- title: __initial_text__
  contents:
  - " The Common Log Format (CLF) for the Session Initiation Protocol (SIP):\n   \
    \                 Framework and Information Model\n"
- title: Abstract
  contents:
  - "Abstract\n   Well-known web servers such as Apache and web proxies like Squid\n\
    \   support event logging using a common log format.  The logs produced\n   using\
    \ these de facto standard formats are invaluable to system\n   administrators\
    \ for troubleshooting a server and tool writers to craft\n   tools that mine the\
    \ log files and produce reports and trends.\n   Furthermore, these log files can\
    \ also be used to train anomaly\n   detection systems and feed events into a security\
    \ event management\n   system.  The Session Initiation Protocol (SIP) does not\
    \ have a common\n   log format, and, as a result, each server supports a distinct\
    \ log\n   format that makes it unnecessarily complex to produce tools to do\n\
    \   trend analysis and security detection.  This document describes a\n   framework,\
    \ including requirements and analysis of existing\n   approaches, and specifies\
    \ an information model for development of a\n   SIP common log file format that\
    \ can be used uniformly by user agents,\n   proxies, registrars, and redirect\
    \ servers as well as back-to-back\n   user agents.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This\
    \ document is a product of the Internet Engineering Task Force\n   (IETF).  It\
    \ represents the consensus of the IETF community.  It has\n   received public\
    \ review and has been approved for publication by the\n   Internet Engineering\
    \ Steering Group (IESG).  Further information on\n   Internet Standards is available\
    \ in Section 2 of RFC 5741.\n   Information about the current status of this document,\
    \ any errata,\n   and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc6872.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2013 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................3\n\
    \   2. Terminology .....................................................4\n  \
    \ 3. Problem Statement ...............................................4\n   4.\
    \ What SIP CLF Is and What It Is Not ..............................5\n   5. Alternative\
    \ Approaches to SIP CLF ...............................5\n      5.1. SIP CLF and\
    \ Call Detail Records ............................6\n      5.2. SIP CLF and Packet\
    \ Capture Tools ...........................6\n      5.3. SIP CLF and Syslog .........................................7\n\
    \      5.4. SIP CLF and IPFIX ..........................................8\n  \
    \ 6. Motivation and Use Cases ........................................8\n   7.\
    \ Challenges in Establishing a SIP CLF ...........................10\n   8. Information\
    \ Model ..............................................11\n      8.1. SIP CLF Mandatory\
    \ Fields ..................................11\n      8.2. Mandatory Fields and\
    \ SIP Entities .........................13\n   9. Examples .......................................................14\n\
    \      9.1. UAC Registration ..........................................15\n  \
    \    9.2. Direct Call between Alice and Bob .........................17\n    \
    \  9.3. Single Downstream Branch Call .............................20\n      9.4.\
    \ Forked Call ...............................................25\n   10. Security\
    \ Considerations .......................................35\n   11. Operational\
    \ Guidance ..........................................37\n   12. Acknowledgments\
    \ ...............................................37\n   13. References ....................................................37\n\
    \      13.1. Normative References .....................................37\n  \
    \    13.2. Informative References ...................................38\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   Servers executing on Internet hosts produce log records\
    \ as part of\n   their normal operations.  Some log records are, in essence, a\
    \ summary\n   of an application-layer protocol data unit (PDU) that captures,\
    \ in\n   precise terms, an event that was processed by the server.  These log\n\
    \   records serve many purposes including analysis and troubleshooting.\n   Well-known\
    \ web servers such as Apache and web proxies like Squid\n   support event logging\
    \ using a Common Log Format (CLF), the common\n   structure for logging requests\
    \ and responses serviced by the web\n   server.  It can be argued that a good\
    \ part of the success of Apache\n   has been its CLF because it allowed third\
    \ parties to produce tools\n   that analyzed the data and generated traffic reports\
    \ and trends.  The\n   Apache CLF has been so successful that not only did it\
    \ become the de\n   facto standard in producing logging data for web servers but\
    \ also\n   many commercial web servers can be configured to produce logs in this\n\
    \   format.  An example of the Apache CLF is depicted next:\n             %h \
    \     %l     %u       %t   \\\"%r\\\"   %s    %b\n        remotehost rfc931 authuser\
    \ [date] request status bytes\n   remotehost:  Remote hostname (or IP number if\
    \ DNS hostname is not\n                available or if DNSLookup is Off.\n   rfc931:\
    \      The remote logname of the user.\n   authuser:    The username by which\
    \ the user has authenticated\n                himself.\n   [date]:      Date and\
    \ time of the request.\n   request:     The request line exactly as it came from\
    \ the client.\n   status:      The HTTP status code returned to the client.\n\
    \   bytes:       The content-length of the document transferred.\n   The inspiration\
    \ for the SIP CLF is the Apache CLF.  However, the\n   state machinery for an\
    \ HTTP transaction is much simpler than that of\n   the SIP transaction (as evidenced\
    \ in Section 7).  The SIP CLF needs\n   to do considerably more.\n   This document\
    \ outlines the problem statement that argues for a SIP\n   CLF.  In addition,\
    \ it provides an information model pertaining to the\n   minimum set of SIP headers\
    \ and fields that must be logged.  This\n   document does not prescribe a specific\
    \ representation format for the\n   SIP CLF record and, instead, allows other\
    \ documents to define a\n   representation format.  [RFC6873] is an example of\
    \ a representation\n   format that provides a UTF-8-based logging scheme.\n"
- title: 2.  Terminology
  contents:
  - "2.  Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\"\
    , \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and\
    \ \"OPTIONAL\" in this\n   document are to be interpreted as described in RFC\
    \ 2119 [RFC2119].\n   RFC 3261 [RFC3261] defines additional terms used in this\
    \ document\n   that are specific to the SIP domain such as \"proxy\"; \"registrar\"\
    ;\n   \"redirect server\"; \"user agent server\" or \"UAS\"; \"user agent client\"\
    \n   or \"UAC\"; \"back-to-back user agent\" or \"B2BUA\"; \"dialog\";\n   \"\
    transaction\"; \"server transaction\".\n   This document uses the term \"SIP server\"\
    \ that is defined to include\n   the following SIP entities: user agent server,\
    \ registrar, redirect\n   server, a SIP proxy in the role of user agent server,\
    \ and a B2BUA in\n   the role of a user agent server.\n"
- title: 3.  Problem Statement
  contents:
  - "3.  Problem Statement\n   The Session Initiation Protocol (SIP) [RFC3261] is\
    \ an Internet\n   multimedia session signaling protocol.  A typical deployment\
    \ of SIP\n   in an enterprise will consist of SIP entities from multiple vendors.\n\
    \   Each SIP entity produces logs using a proprietary format.  The result\n  \
    \ of multiplicity of the log file formats is the inability of the\n   support\
    \ staff to easily trace a call from one entity to another or\n   even to craft\
    \ common tools that will perform trend analysis,\n   debugging and troubleshooting\
    \ problems uniformly across the SIP\n   entities from multiple vendors.\n   Furthermore,\
    \ the log file must be easily accessible by command-line\n   tools for simple\
    \ text processing.  This allows ad hoc queries against\n   the elements in the\
    \ log file to retrieve a log record.  Furthermore,\n   the log file must be in\
    \ a format that allows for rapid searches of a\n   particular log record (or records).\
    \  Because of the large number of\n   records expected in the log file, the records\
    \ must be in a format\n   that allows for rapid scanning and ease of skipping\
    \ records that do\n   not match a search criterion.  Finally, the generation of\
    \ the log\n   file must not impose undue burden on the SIP implementation in the\n\
    \   form of additional libraries that may not be uniformly available on\n   different\
    \ platforms and operating environments where a SIP entity\n   generating a log\
    \ file record may be found.\n   SIP does not currently have a common log format,\
    \ and this document\n   serves to provide the rationale to establish a SIP CLF\
    \ and identifies\n   the required minimal information that must appear in any\
    \ SIP CLF\n   record.\n"
- title: 4.  What SIP CLF Is and What It Is Not
  contents:
  - "4.  What SIP CLF Is and What It Is Not\n   The SIP CLF is a standardized manner\
    \ of producing a log file.  This\n   format can be used by SIP clients, SIP servers,\
    \ proxies, and B2BUAs.\n   The SIP CLF is simply an easily digestible log of currently\
    \ occurring\n   events and past transactions.  It contains enough information\
    \ to\n   allow humans and automata to derive relationships between discrete\n\
    \   transactions handled at a SIP entity or to search for a certain\n   dialog\
    \ or a related set of transactions.\n   The SIP CLF is amenable to quick parsing\
    \ (i.e., well-delimited\n   fields), and it is platform and operating system neutral.\n\
    \   Due to the structure imposed by delimited fields, the SIP CLF is\n   amenable\
    \ to easy parsing and lends itself well to creating other\n   innovative tools\
    \ such as logfile parsers and trend analytic engines.\n   The SIP CLF is not a\
    \ billing tool.  It is not expected that\n   enterprises will bill customers based\
    \ on SIP CLF.  The SIP CLF\n   records events at the signaling layer only and\
    \ does not attempt to\n   correlate the veracity of these events with the media\
    \ layer.  Thus,\n   it cannot be used to trigger customer billing.\n   The SIP\
    \ CLF is not a quality of service (QoS) measurement tool.  If\n   QoS is defined\
    \ as measuring the mean opinion score (MOS) of the\n   received media, then SIP\
    \ CLF does not aid in this task since it does\n   not summarize events at the\
    \ media layer.\n   Finally, the SIP CLF is not a tool for supporting lawful intercept.\n"
- title: 5.  Alternative Approaches to SIP CLF
  contents:
  - "5.  Alternative Approaches to SIP CLF\n   The sipclf working group discussed\
    \ four alternative approaches to\n   determine whether they fill the requirements\
    \ of what is desired of a\n   SIP CLF outlined in Section 3.  We conclude that\
    \ while every scheme\n   discussed below comes with its advantages, its disadvantages\
    \ may\n   preclude it from being used as a SIP CLF.  However, we stress that\n\
    \   the information model contained in this document can be used to\n   develop\
    \ alternative representation formats when desired.  Currently,\n   [RFC6873] is\
    \ an example of a representation format that provides a\n   UTF-8-based logging\
    \ scheme that meets all the requirements of Section\n   3.\n"
- title: 5.1.  SIP CLF and Call Detail Records
  contents:
  - "5.1.  SIP CLF and Call Detail Records\n   Call Detail Records (CDRs) are used\
    \ in operator networks widely and\n   with the adoption of SIP, standardization\
    \ bodies such as the Third\n   Generation Partnership Project (3GPP) have subsequently\
    \ defined SIP-\n   related CDRs as well.  Today, CDRs are used to implement the\n\
    \   functionality approximated by SIP CLF; however, there are important\n   differences.\n\
    \   First, SIP CLF operates natively at the transaction layer and\n   maintains\
    \ enough information in the information elements being logged\n   that dialog-related\
    \ data can be subsequently derived from the\n   transaction logs.  Thus, esoteric\
    \ SIP fields and parameters like the\n   To header (including tags), the From\
    \ header (including tags), the\n   Command Sequence (CSeq) number, etc., are logged\
    \ in SIP CLF.  By\n   contrast, a CDR is used mostly for charging and thus saves\n\
    \   information to facilitate that very aspect.  A CDR will most\n   certainly\
    \ log the public user identification of a party requesting a\n   service (which\
    \ may not correspond to the From header) and the public\n   user identification\
    \ of the party called party (which may not\n   correspond to the To header). \
    \ Furthermore, the sequence numbers\n   maintained by the CDR may not correspond\
    \ to the SIP CSeq header.\n   Thus, it will be hard to piece together the state\
    \ of a dialog through\n   a sequence of CDR records.\n   Second, a CDR record\
    \ will, in all probability, be generated at a SIP\n   entity performing some form\
    \ of proxy-like functionality of a B2BUA\n   providing some service.  By contrast,\
    \ SIP CLF is lightweight enough\n   that it can be generated by a canonical SIP\
    \ user agent server and\n   user agent client as well, including those that execute\
    \ on resource\n   constrained devices (mobile phones).\n   Finally, SIP is also\
    \ being deployed outside of operator-managed Voice\n   over IP (VoIP) networks.\
    \  Universities, research laboratories, and\n   small-to medium-sized companies\
    \ are deploying SIP-based VoIP\n   solutions on networks owned and managed by\
    \ them.  Many of the latter\n   constituencies will not have an interest in generating\
    \ CDRs, but they\n   will like to have a concise representation of the messages\
    \ being\n   handled by the SIP entities in a common format.\n"
- title: 5.2.  SIP CLF and Packet Capture Tools
  contents:
  - "5.2.  SIP CLF and Packet Capture Tools\n   Wireshark and tcpdump are popular\
    \ raw packet capture tools.\n   Wireshark even contains filters that can understand\
    \ SIP at the\n   protocol level and break down a captured message into its individual\n\
    \   header components.  While packet capture tools are appropriate to\n   capture\
    \ and view discrete SIP messages, they do not suffice to serve\n   in the same\
    \ capacity as SIP CLF for the following reasons:\n   o  Using packet capturing\
    \ tools will not eliminate the need for\n      agreeing to a common set of fields\
    \ to represent a SIP CLF record.\n      This common understanding is important\
    \ for interoperability to\n      allow one implementation to read a log file written\
    \ by a different\n      implementation.\n   o  The packet capture from these tools\
    \ is not easily searchable by\n      simple command-line tools for text processing.\n\
    \   o  Using packet capture tools requires that the underlying libraries\n   \
    \   related to packet capture be available for all platforms on which\n      a\
    \ SIP server or a SIP client can execute.  Given the different\n      platforms\
    \ on which a SIP client or server runs --- mobile, fixed\n      host, tablet,\
    \ etc. --- this may become an inhibiting factor when\n      compared to the SIP\
    \ client or server producing a SIP CLF record\n      natively (the SIP client\
    \ or server has already parsed the SIP\n      message for operation on it; therefore,\
    \ it seems reasonable to\n      have it write the parsed tokens out to persistent\
    \ store in an\n      agreed upon format).\n   o  If SIP messages are exchanged\
    \ over a secure transport (TLS)\n      packet, capture tools will be unable to\
    \ decrypt them and render\n      them as individual SIP headers.\n   o  Using\
    \ such tools and related packet capture libraries may imposes\n      a dependency\
    \ on a third-party library.\n"
- title: 5.3.  SIP CLF and Syslog
  contents:
  - "5.3.  SIP CLF and Syslog\n   The syslog protocol [RFC5424] conveys event notification\
    \ messages\n   from an originator to a collector.  While the syslog protocol\n\
    \   provides a packet format and transport mechanism, it does not\n   describe\
    \ any storage format for syslog messages.  Pragmatically,\n   while the syslog\
    \ protocol itself does not describe a storage format,\n   the collector will write\
    \ the arriving messages into a disk file.  A\n   new problem arises due to the\
    \ general nature of syslog: the disk file\n   will contain log messages from many\
    \ originators, not just SIP\n   entities.  This imposes an additional burden of\
    \ discarding all\n   extraneous records when analyzing the disk file for SIP CLF\
    \ records\n   of interest.  SIP CLF records are best stored in a log file that\
    \ is\n   easily searchable by command-line tools.\n   Other drawbacks of using\
    \ syslog include the unavailability of the\n   collector under certain scenarios\
    \ (a mobile SIP phone may be unable\n   to find a collector to which it should\
    \ send the messages), and the\n   need to have syslog-specific libraries available\
    \ for each platform on\n   which the SIP server or the SIP client can execute.\
    \  Finally, because\n   of the frequency and size of SIP log messages, it is not\
    \ desirable to\n   send every SIP CLF log message to the collector.  Instead,\
    \ a\n   judicious use of syslog could be that only certain events -- those\n \
    \  that are pertinent from a network situational awareness perspective,\n   or\
    \ those that include a periodic statistical summary of the messages\n   processed\
    \ -- are sent to the collector.\n"
- title: 5.4.  SIP CLF and IPFIX
  contents:
  - "5.4.  SIP CLF and IPFIX\n   The IP Flow Information Export (IPFIX) protocol [RFC5101]\
    \ allows\n   network administrators to aggregate IP packets characterized by some\n\
    \   commonality (similar packet header fields, one or more\n   characteristics\
    \ of the packet itself) into a flow that can be\n   subsequently collected and\
    \ sent to other elements for analysis and\n   monitoring.  However, IPFIX is not\
    \ a logging format and does not\n   produce a log file that can be examined by\
    \ ad hoc text processing\n   tools.\n"
- title: 6.  Motivation and Use Cases
  contents:
  - "6.  Motivation and Use Cases\n   As SIP becomes pervasive in multiple business\
    \ domains and ubiquitous\n   in academic and research environments, it is beneficial\
    \ to establish\n   a CLF for the following reasons:\n   Common reference for interpreting\
    \ events:  In a laboratory\n      environment or an enterprise service offering,\
    \ there will\n      typically be SIP entities from multiple vendors participating\
    \ in\n      routing requests.  Absent a common log format, each entity will\n\
    \      produce output records in a native format, making it hard to\n      establish\
    \ commonality for tools that operate on the log file.\n   Writing common tools:\
    \  A common log format allows independent tool\n      providers to craft tools\
    \ and applications that interpret the CLF\n      data to produce insightful trend\
    \ analysis and detailed traffic\n      reports.  The format should be such that\
    \ it retains the ability to\n      be read by humans and processed using traditional\
    \ Unix text\n      processing tools.\n   Session correlation across diverse processing\
    \ elements:  In\n      operational SIP networks, a request will typically be processed\
    \ by\n      more than one SIP server.  A SIP CLF will allow the network\n    \
    \  operator to trace the progression of the request (or a set of\n      requests)\
    \ as they traverse through the different servers to\n      establish a concise\
    \ diagnostic trail of a SIP session.\n            Note that tracing the request\
    \ through a set of servers is\n            considerably less challenging if all\
    \ the servers belong to\n            the same administrative domain.\n   Message\
    \ correlation across transactions:  A SIP CLF can enable a\n      quick lookup\
    \ of all messages that comprise a transaction (e.g.,\n      \"Find all messages\
    \ corresponding to server transaction X,\n      including all forked branches.\"\
    ).\n   Message correlation across dialogs:  A SIP CLF can correlate\n      transactions\
    \ that comprise a dialog (e.g., \"Find all messages for\n      dialog created\
    \ by Call-ID C, From tag F and To tag T.\").\n   Trend analysis:  A SIP CLF allows\
    \ an administrator to collect data\n      and spot patterns or trends in the information\
    \ (e.g., \"What is the\n      domain where the most sessions are routed to between\
    \ 9:00 AM and\n      1:00 PM?\").\n   Train anomaly detection systems:  A SIP\
    \ CLF will allow for the\n      training of anomaly detection systems that once\
    \ trained can\n      monitor the CLF file to trigger an alarm on the subsequent\n\
    \      deviations from accepted patterns in the data set.  Currently,\n      anomaly\
    \ detection systems monitor the network and parse raw\n      packets that comprise\
    \ a SIP message -- a process that is\n      unsuitable for anomaly detection systems\
    \ [rieck2008].  With all\n      the necessary event data at their disposal, network\
    \ operations\n      managers and information technology operation managers are\
    \ in a\n      much better position to correlate, aggregate, and prioritize log\n\
    \      data to maintain situational awareness.\n   Testing:  A SIP CLF allows\
    \ for automatic testing of SIP equipment by\n      writing tools that can parse\
    \ a SIP CLF file to ensure behavior of\n      a device under test.\n   Troubleshooting:\
    \  A SIP CLF can enable cursory troubleshooting of a\n      SIP entity (e.g.,\
    \ \"How long did it take to generate a final\n      response for the INVITE associated\
    \ with Call-ID X?\").\n   Offline analysis:  A SIP CLF allows for offline analysis\
    \ of the data\n      gathered.  Once a SIP CLF file has been generated, it can\
    \ be\n      transported (subject to the security considerations in Section 10)\n\
    \      to a host with appropriate computing resources to perform\n      subsequent\
    \ analysis.\n   Real-time monitoring:  A SIP CLF allows administrators to visually\n\
    \      notice the events occurring at a SIP entity in real-time providing\n  \
    \    accurate situational awareness.\n"
- title: 7.  Challenges in Establishing a SIP CLF
  contents:
  - "7.  Challenges in Establishing a SIP CLF\n   Establishing a CLF for SIP is a\
    \ challenging task.  The behavior of a\n   SIP entity is more complex when compared\
    \ to the equivalent HTTP\n   entity.\n   Base protocol services such as parallel\
    \ or serial forking elicit\n   multiple final responses.  Ensuing delays between\
    \ sending a request\n   and receiving a final response all add complexity when\
    \ considering\n   what fields should comprise a CLF and in what manner.  Furthermore,\n\
    \   unlike HTTP, SIP groups multiple discrete transactions into a dialog,\n  \
    \ and these transactions may arrive at a varying inter-arrival rate at\n   a proxy.\
    \  For example, the BYE transaction usually arrives much after\n   the corresponding\
    \ INVITE transaction was received, serviced, and\n   expunged from the transaction\
    \ list.  Nonetheless, it is advantageous\n   to relate these transactions such\
    \ that automata or a human monitoring\n   the log file can construct a set consisting\
    \ of related transactions.\n   ACK requests in SIP need careful consideration\
    \ as well.  In SIP, an\n   ACK is a special method that is associated with an\
    \ INVITE only.  It\n   does not require a response; furthermore, if it is acknowledging\
    \ a\n   non-2xx response, then the ACK is considered part of the original\n  \
    \ INVITE transaction.  If it is acknowledging a 2xx-class response,\n   then the\
    \ ACK is a separate transaction consisting of a request only\n   (i.e., there\
    \ is not a response for an ACK request).  CANCEL is\n   another method that is\
    \ tied to an INVITE transaction, but unlike ACK,\n   the CANCEL request elicits\
    \ a final response.\n   While most requests elicit a response immediately, the\
    \ INVITE request\n   in SIP can remain in a pending state at a proxy as it forks\
    \ branches\n   downstream or at a user agent server while it alerts the user.\n\
    \   [RFC3261] instructs the server transaction to send a 1xx-class\n   provisional\
    \ response if a final response is delayed for more than 200\n   ms.  A SIP CLF\
    \ log file needs to include such provisional responses\n   because they help train\
    \ automata associated with anomaly detection\n   systems and provide some positive\
    \ feedback for a human observer\n   monitoring the log file.\n   Finally, beyond\
    \ supporting native SIP actors such as proxies,\n   registrars, redirect servers,\
    \ and user agent servers (UASs), it is\n   beneficial to derive a common log format\
    \ that supports B2BUA\n   behavior, which may vary considerably depending on the\
    \ specific\n   nature of the B2BUA.\n"
- title: 8.  Information Model
  contents:
  - "8.  Information Model\n   This document defines the mandatory fields that MUST\
    \ occur in a SIP\n   CLF record.  The maximum size (in number of bytes) for a\
    \ SIP CLF\n   field is 4096 bytes.  This limit is the same regardless of whether\n\
    \   the SIP CLF field is a meta-field (see \"Timestamp\" and\n   \"Directionality\"\
    \ defined below) or a normal SIP header.  If the body\n   of the SIP message is\
    \ to be logged, it MUST conform to this limit as\n   well.\n   SIP bodies may\
    \ contain characters that do not form a valid UTF-8\n   sequence.  As such, the\
    \ logging of bodies requires understanding\n   trade-offs with respect to a specific\
    \ logging format to determine if\n   the body can be logged as is or some encoding\
    \ will be required.  The\n   specific syntax and semantics used to log SIP bodies\
    \ MUST be defined\n   by the specific representation format document used to generate\
    \ the\n   SIP CLF record.\n   The information model supports extensibility by\
    \ providing the\n   capability to log \"optional fields\".  Optional fields are\
    \ those SIP\n   header fields (or field components) that are not mandatory (see\n\
    \   Section 8.1 for the mandatory field list).  Optional fields may\n   contain\
    \ SIP headers or other elements present in a SIP message (for\n   example, the\
    \ Reason-Phrase element from the Status-Line production\n   rule in RFC 3261 [RFC3261]).\
    \  Optional fields may also contain\n   additional information that a particular\
    \ vendor desires to log.  The\n   specific syntax and semantics to be accorded\
    \ to optional fields MUST\n   be defined by the specific representation format\
    \ used to generate the\n   SIP CLF record.\n"
- title: 8.1.  SIP CLF Mandatory Fields
  contents:
  - "8.1.  SIP CLF Mandatory Fields\n   The following SIP CLF fields are defined as\
    \ the minimal information\n   that MUST appear in any SIP CLF record:\n   Timestamp:\
    \  Date and time of the request or response represented as\n      the number of\
    \ seconds and milliseconds since the Unix epoch.\n   Message type:  An indicator\
    \ of whether the SIP message is a request\n      or a response.  The allowable\
    \ values for this field are 'R' (for\n      Request) and 'r' (for response).\n\
    \   Directionality:  An indicator of whether the SIP message is received\n   \
    \   by the SIP entity or sent by the SIP entity.  The allowable values\n     \
    \ for this field are 's' (for message sent) and 'r' (for message\n      received).\n\
    \   Transport:  The transport over which a SIP message is sent or\n      received.\
    \  The allowable values for the transport are governed by\n      the \"transport\"\
    \ production rule in Section 25.1 of RFC 3261\n      [RFC3261].\n   Source-address:\
    \  The IPv4 or IPv6 address of the sender of the SIP\n      message.\n   Source-port:\
    \  The source port number of the sender of the SIP\n      message.\n   Destination-address:\
    \  The IPv4 or IPv6 address of the recipient of\n      the SIP message.\n   Destination-port:\
    \  The port number of the recipient of the SIP\n      message.\n   From:  The\
    \ From URI.  For the sake of brevity, URI parameters should\n      not be logged.\n\
    \   From tag:  The tag parameter of the From header.\n   To:  The To URI.  For\
    \ the sake of brevity, URI parameters should not\n      be logged.\n   To tag:\
    \  The tag parameter of the To header.  Note that the tag\n      parameter will\
    \ be absent in the initial request that forms a\n      dialog.\n   Callid:  The\
    \ Call-ID.\n   CSeq-Method:  The method from the CSeq header.\n   CSeq-Number:\
    \  The number from the CSeq header.\n   R-URI:  The Request-URI, including any\
    \ URI parameters.\n   Status:  The SIP response status code.\n   SIP proxies may\
    \ fork, creating several client transactions that\n   correlate to a single server\
    \ transaction.  Responses arriving on\n   these client transactions or new requests\
    \ (CANCEL, ACK) sent on the\n   client transaction need log file entries that\
    \ correlate with a server\n   transaction.  Similarly, a B2BUA may create one\
    \ or more client\n   transactions in response to an incoming request.  These transactions\n\
    \   will require correlation as well.  The last two information model\n   elements\
    \ provide this correlation.\n   Server-Txn:  Server transaction identification\
    \ code - the transaction\n      identifier associated with the server transaction.\n\
    \      Implementations can reuse the server transaction identifier (the\n    \
    \  topmost branch-id of the incoming request, with or without the\n      magic\
    \ cookie), or they could generate a unique identification\n      string for a\
    \ server transaction (this identifier needs to be\n      locally unique to the\
    \ server only).  This identifier is used to\n      correlate ACKs and CANCELs\
    \ to an INVITE transaction; it is also\n      used to aid in forking as explained\
    \ later in this section.  (See\n      Section 9 for usage.)\n   Client-Txn:  Client\
    \ transaction identification code - this field is\n      used to associate client\
    \ transactions with a server transaction\n      for forking proxies or B2BUAs.\
    \  Upon forking, implementations can\n      reuse the value they inserted into\
    \ the topmost Via header's branch\n      parameter, or they can generate a unique\
    \ identification string for\n      the client transaction.  (See Section 9 for\
    \ usage.)\n   This information model applies to all SIP entities --- a UAC, UAS,\n\
    \   proxy, B2BUA, registrar, and redirect server.  The SIP CLF fields\n   prescribed\
    \ for a proxy are equally applicable to the B2BUA.\n   Similarly, the SIP CLF\
    \ fields prescribed for a UAS are equally\n   applicable to registrars and redirect\
    \ servers.\n   The next section specifies the individual SIP CLF information model\n\
    \   elements that form a log record for specific instances of a SIP\n   entity.\
    \  It is understood that a SIP CLF record is extensible using\n   extension mechanisms\
    \ appropriate to the specific representation used\n   to generate the SIP CLF\
    \ record.  This document, however, does not\n   prescribe a specific representation\
    \ format, and it limits the\n   discussion to the mandatory data elements described\
    \ above.\n"
- title: 8.2.  Mandatory Fields and SIP Entities
  contents:
  - "8.2.  Mandatory Fields and SIP Entities\n   Each SIP CLF record must contain\
    \ all the mandatory information model\n   elements outlined in Section 8.1.  This\
    \ document does not specify a\n   representation of a logging format; it is expected\
    \ that other\n   documents will do so.\n   An element may not always have an appropriate\
    \ value to provide for\n   one of these fields, for example, the R-URI field is\
    \ not applicable\n   when logging a response, the Status field is not applicable\
    \ when\n   logging a request, the To tag is not known when a request is first\n\
    \   sent out, etc.  As all the mandatory fields are required to appear in\n  \
    \ the SIP CLF record, the representation document MUST define how to\n   indicate\
    \ a field that is not applicable in the context that the SIP\n   CLF record was\
    \ generated.  Similarly, to handle parsing errors in a\n   field, the representation\
    \ document MUST define a means to indicate\n   that a field cannot be parsed.\n\
    \   The Client-Txn field is always applicable to a UAC.  The Server-Txn\n   field\
    \ does not apply to a UAC unless the element is also acting as a\n   UAS, and\
    \ the message associated to this log record corresponds to a\n   message handled\
    \ by that UAS.  For instance, a proxy forwarding a\n   request will populate both\
    \ the Client-Txn and Server-Txn fields in\n   the record corresponding to the\
    \ forwarded request.\n   The Server-Txn field is always applicable to a UAS. \
    \ The Client-Txn\n   field does not apply to a UAS unless the element is also\
    \ acting as a\n   UAC, and the message associated to this log record corresponds\
    \ to a\n   message handled by that UAC.  For instance, a proxy forwarding a\n\
    \   response will populate both the Server-Txn and Client-Txn fields in\n   the\
    \ record corresponding to the forwarded response.  However, a proxy\n   would\
    \ only populate the Client-Txn field when creating a log record\n   corresponding\
    \ to a request.\n"
- title: 9.  Examples
  contents:
  - "9.  Examples\n   The examples use only the mandatory data elements defined in\
    \ Section\n   8.1.  Extension elements are not considered and neither are SIP\n\
    \   bodies.  When a given mandatory field is not applicable to a SIP\n   entity,\
    \ we use the horizontal dash (\"-\") to represent it.\n   There are five principals\
    \ in the examples below.  They are the\n   following: Alice, the initiator of\
    \ requests.  Alice's user agent uses\n   IPv4 address 198.51.100.1, port 5060.\
    \  P1 is a proxy that Alice's\n   request traverse on their way to Bob, the recipient\
    \ of the requests.\n   P1 also acts as a registrar to Alice.  P1 uses an IPv4\
    \ address of\n   198.51.100.10, port 5060.  Bob has two instances of his user\
    \ agent\n   running on different hosts.  The first instance uses an IPv4 address\n\
    \   of 203.0.113.1, port 5060 and the second instance uses an IPv6\n   address\
    \ of 2001:db8::9, port 5060.  P2 is a proxy responsible for\n   Bob's domain.\
    \  Table 1 summarizes these addresses.\n        +-------------------+--------------------+-------------------+\n\
    \        | Principal         | IP:port            | Host/Domain name  |\n    \
    \    +-------------------+--------------------+-------------------+\n        |\
    \ Alice             | 198.51.100.1:5060  | alice.example.com |\n        | P1 \
    \               | 198.51.100.10:5060 | p1.example.com    |\n        | P2     \
    \           | 203.0.113.200:5060 | p2.example.net    |\n        | Bob UA instance\
    \ 1 | 203.0.113.1:5060   | bob1.example.net  |\n        | Bob UA instance 2 |\
    \ [2001:db8::9]:5060 | bob2.example.net  |\n        +-------------------+--------------------+-------------------+\n\
    \                    Principal to IP Address Assignment\n                    \
    \              Table 1\n   Illustrative examples of SIP CLF follow.\n"
- title: 9.1.  UAC Registration
  contents:
  - "9.1.  UAC Registration\n   Alice sends a registration registrar P1 and receives\
    \ a 2xx-class\n   response.  The register requests causes Alice's UAC to produce\
    \ a log\n   record shown below.\n        Timestamp: 1275930743.699\n        Message\
    \ Type: R\n        Directionality: s\n        Transport: udp\n        CSeq-Number:\
    \ 1\n        CSeq-Method: REGISTER\n        R-URI: sip:example.com\n        Destination-address:\
    \ 198.51.100.10\n        Destination-port: 5060\n        Source-address: 198.51.100.1\n\
    \        Source-port: 5060\n        To: sip:example.com\n        To tag: -\n \
    \       From: sip:alice@example.com\n        From tag: 76yhh\n        Call-ID:\
    \ f81-d4-f6@example.com\n        Status: -\n        Server-Txn: -\n        Client-Txn:\
    \ c-tr-1\n   After some time, Alice's UAC will receive a response from the\n \
    \  registrar.  The response causes Alice's agent to produce a log record\n   shown\
    \ below.\n        Timestamp: 1275930744.100\n        Message Type: r\n       \
    \ Directionality: r\n        Transport: udp\n        CSeq-Number: 1\n        CSeq-Method:\
    \ REGISTER\n        R-URI: -\n        Destination-address: 198.51.100.1\n    \
    \    Destination-port: 5060\n        Source-address: 198.51.100.10\n        Source-port:\
    \ 5060\n        To: sip:example.com\n        To tag: reg-1-xtr\n        From:\
    \ sip:alice@example.com\n        From tag: 76yhh\n        Call-ID: f81-d4-f6@example.com\n\
    \        Status: 100\n        Server-Txn: -\n        Client-Txn: c-tr-1\n"
- title: 9.2.  Direct Call between Alice and Bob
  contents:
  - "9.2.  Direct Call between Alice and Bob\n   In this example, Alice sends a session\
    \ initiation request directly to\n   Bob's agent (instance 1).  Bob's agent accepts\
    \ the session\n   invitation.  We first present the SIP CLF logging from the vantage\n\
    \   point of Alice's UAC.  In line 1, Alice's user agent sends out the\n   INVITE.\
    \  Shortly, it receives a \"180 Ringing\" (line 2), followed by a\n   \"200 OK\"\
    \ response (line 3).  Upon the receipt of the 2xx-class\n   response, Alice's\
    \ user agent sends out an ACK request (line 4).\n        Timestamp: 1275930743.699\n\
    \        Message Type: R\n        Directionality: s\n        Transport: udp\n\
    \        CSeq-Number: 32\n        CSeq-Method: INVITE\n        R-URI: sip:bob@bob1.example.net\n\
    \        Destination-address: 203.0.113.1\n        Destination-port: 5060\n  \
    \      Source-address: 198.51.100.1\n        Source-port: 5060\n        To: sip:bob@bob1.example.net\n\
    \        To tag: -\n        From: sip:alice@example.com\n        From tag: 76yhh\n\
    \        Call-ID: f82-d4-f7@example.com\n        Status: -\n        Server-Txn:\
    \ -\n        Client-Txn: c-1-xt6\n        Timestamp: 1275930745.002\n        Message\
    \ Type: r\n        Directionality: r\n        Transport: udp\n        CSeq-Number:\
    \ 32\n        CSeq-Method: INVITE\n        R-URI: -\n        Destination-address:\
    \ 198.51.100.1\n        Destination-port: 5060\n        Source-address: 203.0.113.1\n\
    \        Source-port: 5060\n        To: sip:bob@example.net\n        To tag: b-in6-iu\n\
    \        From: sip:alice@example.com\n        From tag: 76yhh\n        Call-ID:\
    \ f82-d4-f7@example.com\n        Status: 180\n        Server-Txn: -\n        Client-Txn:\
    \ c-1-xt6\n        Timestamp: 1275930746.100\n        Message Type: r\n      \
    \  Directionality: r\n        Transport: udp\n        CSeq-Number: 32\n      \
    \  CSeq-Method: INVITE\n        R-URI: -\n        Destination-address: 198.51.100.1\n\
    \        Destination-port: 5060\n        Source-address: 203.0.113.1\n       \
    \ Source-port: 5060\n        To: sip:bob@example.net\n        To tag: b-in6-iu\n\
    \        From: sip:alice@example.com\n        From tag: 76yhh\n        Call-ID:\
    \ f82-d4-f7@example.com\n        Status: 200\n        Server-Txn: -\n        Client-Txn:\
    \ c-1-xt6\n        Timestamp: 1275930746.120\n        Message Type: R\n      \
    \  Directionality: s\n        Transport: udp\n        CSeq-Number: 32\n      \
    \  CSeq-Method: ACK\n        R-URI: sip:bob@bob1.example.net\n        Destination-address:\
    \ 203.0.113.1\n        Destination-port: 5060\n        Source-address: 198.51.100.1\n\
    \        Source-port: 5060\n        To: sip:bob@example.net\n        To tag: b-in6-iu\n\
    \        From: sip:alice@example.com\n        From tag: 76yhh\n        Call-ID:\
    \ f82-d4-f7@example.com\n        Status: -\n        Server-Txn: -\n        Client-Txn:\
    \ c-1-xt6\n"
- title: 9.3.  Single Downstream Branch Call
  contents:
  - "9.3.  Single Downstream Branch Call\n   In this example, Alice sends a session\
    \ invitation request to Bob\n   through proxy P1, which inserts a Record-Route\
    \ header causing\n   subsequent requests between Alice and Bob to traverse the\
    \ proxy.  The\n   SIP CLF log records appears from the vantage point of P1.  The\
    \ line\n   numbers below refer to Figure 1.\n        Alice             P1    \
    \         Bob\n         +---INV--------->|               |  Line 1\n         |\
    \                |               |\n         |<---------100---+              \
    \ |  Line 2\n         |                |               |\n         |         \
    \       +---INV-------->|  Line 3\n         |                |               |\n\
    \         |                |<--------100---+  Line 4\n         |             \
    \   |               |\n         |                |<--------180---+  Line 5\n \
    \        |                |               |\n         |<---------180---+     \
    \          |  Line 6\n         |                |               |\n         |\
    \                |<--------200---+  Line 7\n         |                |      \
    \         |\n         |<---------200---+               |  Line 8\n         | \
    \               |               |\n         +---ACK--------->|               |\
    \  Line 9\n         |                |               |\n         |           \
    \     |---ACK-------->|  Line 10\n                  Figure 1: Simple Proxy-Aided\
    \ Call Flow\n   1    Timestamp: 1275930743.699\n        Message Type: R\n    \
    \    Directionality: r\n        Transport: udp\n        CSeq-Number: 43\n    \
    \    CSeq-Method: INVITE\n        R-URI: sip:bob@example.net\n        Destination-address:\
    \ 198.51.100.10\n        Destination-port: 5060\n        Source-address: 198.51.100.1\n\
    \        Source-port: 5060\n        To: sip:bob@example.net\n        To tag: -\n\
    \        From: sip:alice@example.com\n        From tag: al-1\n        Call-ID:\
    \ tr-87h@example.com\n        Status: -\n        Server-Txn: s-x-tr\n        Client-Txn:\
    \ -\n   Note that, at this point, P1 has created a server transaction\n   identification\
    \ code and populated the SIP CLF field Server-Txn with\n   it.  P1 has not yet\
    \ created a client transaction identification code;\n   thus, Client-Txn contains\
    \ a \"-\".\n   2    Timestamp: 1275930744.001\n        Message Type: r\n     \
    \   Directionality: s\n        Transport: udp\n        CSeq-Number: 43\n     \
    \   CSeq-Method: INVITE\n        R-URI: -\n        Destination-address: 198.51.100.1\n\
    \        Destination-port: 5060\n        Source-address: 198.51.100.10\n     \
    \   Source-port: 5060\n        To: sip:bob@example.net\n        To tag: -\n  \
    \      From: sip:alice@example.com\n        From tag: al-1\n        Call-ID: tr-87h@example.com\n\
    \        Status: 100\n        Server-Txn: s-x-tr\n        Client-Txn: -\n   In\
    \ line 3 below, P1 has created a client transaction identification\n   code for\
    \ the downstream branch and populated the SIP CLF field\n   Client-Txn.\n   3\
    \    Timestamp: 1275930744.998\n        Message Type: R\n        Directionality:\
    \ s\n        Transport: udp\n        CSeq-Number: 43\n        CSeq-Method: INVITE\n\
    \        R-URI: sip:bob@bob1.example.net\n        Destination-address: 203.0.113.1\n\
    \        Destination-port: 5060\n        Source-address: 198.51.100.10\n     \
    \   Source-port: 5060\n        To: sip:bob@example.net\n        To tag: -\n  \
    \      From: sip:alice@example.com\n        From tag: al-1\n        Call-ID: tr-87h@example.com\n\
    \        Status: -\n        Server-Txn: s-x-tr\n        Client-Txn: c-x-tr\n \
    \  4    Timestamp: 1275930745.200\n        Message Type: r\n        Directionality:\
    \ r\n        Transport: udp\n        CSeq-Number: 43\n        CSeq-Method: INVITE\n\
    \        R-URI: -\n        Destination-address: 198.51.100.10\n        Destination-port:\
    \ 5060\n        Source-address: 203.0.113.1\n        Source-port: 5060\n     \
    \   To: sip:bob@example.net\n        To tag: b1-1\n        From: sip:alice@example.com\n\
    \        From tag: al-1\n        Call-ID: tr-87h@example.com\n        Status:\
    \ 100\n        Server-Txn: s-x-tr\n        Client-Txn: c-x-tr\n   5    Timestamp:\
    \ 1275930745.800\n        Message Type: r\n        Directionality: r\n       \
    \ Transport: udp\n        CSeq-Number: 43\n        CSeq-Method: INVITE\n     \
    \   R-URI: -\n        Destination-address: 198.51.100.10\n        Destination-port:\
    \ 5060\n        Source-address: 203.0.113.1\n        Source-port: 5060\n     \
    \   To: sip:bob@example.net\n        To tag: b1-1\n        From: sip:alice@example.com\n\
    \        From tag: al-1\n        Call-ID: tr-87h@example.com\n        Status:\
    \ 180\n        Server-Txn: s-x-tr\n        Client-Txn: c-x-tr\n   6    Timestamp:\
    \ 1275930746.009\n        Message Type: r\n        Directionality: s\n       \
    \ Transport: udp\n        CSeq-Number: 43\n        CSeq-Method: INVITE\n     \
    \   R-URI: -\n        Destination-address: 198.51.100.1\n        Destination-port:\
    \ 5060\n        Source-address: 198.51.100.10\n        Source-port: 5060\n   \
    \     To: sip:bob@example.net\n        To tag: b1-1\n        From: sip:alice@example.com\n\
    \        From tag: al-1\n        Call-ID: tr-87h@example.com\n        Status:\
    \ 180\n        Server-Txn: s-x-tr\n        Client-Txn: c-x-tr\n   7    Timestamp:\
    \ 1275930747.120\n        Message Type: r\n        Directionality: r\n       \
    \ Transport: udp\n        CSeq-Number: 43\n        CSeq-Method: INVITE\n     \
    \   R-URI: -\n        Destination-address: 198.51.100.10\n        Destination-port:\
    \ 5060\n        Source-address: 203.0.113.1\n        Source-port: 5060\n     \
    \   To: sip:bob@example.net\n        To tag: b1-1\n        From: sip:alice@example.com\n\
    \        From tag: al-1\n        Call-ID: tr-87h@example.com\n        Status:\
    \ 200\n        Server-Txn: s-x-tr\n        Client-Txn: c-x-tr\n   8    Timestamp:\
    \ 1275930747.300\n        Message Type: r\n        Directionality: s\n       \
    \ Transport: udp\n        CSeq-Number: 43\n        CSeq-Method: INVITE\n     \
    \   R-URI: -\n        Destination-address: 198.51.100.1\n        Destination-port:\
    \ 5060\n        Source-address: 198.51.100.10\n        Source-port: 5060\n   \
    \     To: sip:bob@example.net\n        To tag: b1-1\n        From: sip:alice@example.com\n\
    \        From tag: al-1\n        Call-ID: tr-87h@example.com\n        Status:\
    \ 200\n        Server-Txn: s-x-tr\n        Client-Txn: c-x-tr\n   9    Timestamp:\
    \ 1275930749.100\n        Message Type: R\n        Directionality: r\n       \
    \ Transport: udp\n        CSeq-Number: 43\n        CSeq-Method: ACK\n        R-URI:\
    \ sip:bob@example.net\n        Destination-address: 198.51.100.10\n        Destination-port:\
    \ 5060\n        Source-address: 198.51.100.1\n        Source-port: 5060\n    \
    \    To: sip:bob@example.net\n        To tag: b1-1\n        From: sip:alice@example.com\n\
    \        From tag: al-1\n        Call-ID: tr-87h@example.com\n        Status:\
    \ -\n        Server-Txn: s-x-tr\n        Client-Txn: c-x-tr\n   10   Timestamp:\
    \ 1275930749.100\n        Message Type: R\n        Directionality: s\n       \
    \ Transport: udp\n        CSeq-Number: 43\n        CSeq-Method: ACK\n        R-URI:\
    \ sip:bob@bob1.example.net\n        Destination-address: 203.0.113.1\n       \
    \ Destination-port: 5060\n        Source-address: 198.51.100.10\n        Source-port:\
    \ 5060\n        To: sip:bob@example.net\n        To tag: b1-1\n        From: sip:alice@example.com\n\
    \        From tag: al-1\n        Call-ID: tr-87h@example.com\n        Status:\
    \ -\n        Server-Txn: s-x-tr\n        Client-Txn: c-x-tr\n"
- title: 9.4.  Forked Call
  contents:
  - "9.4.  Forked Call\n   In this example, Alice sends a session invitation to Bob's\
    \ proxy, P2.\n   P2 forks the session invitation request to two registered endpoints\n\
    \   corresponding to Bob's address-of-record.  Both endpoints respond\n   with\
    \ provisional responses.  Shortly thereafter, one of Bob's user\n   agent instances\
    \ accepts the call, causing P2 to send a CANCEL request\n   to the second user\
    \ agent.  P2 does not Record-Route; therefore, the\n   subsequent ACK request\
    \ from Alice to Bob's user agent does not\n   traverse through P2 (and is not\
    \ shown below).\n   Figure 2 depicts the call flow.\n                        \
    \   Bob            Bob\n        Alice      P2   (Instance 1) (Instance 2)\n  \
    \       +---INV--->|          |         |  Line 1\n         |          |     \
    \     |         |\n         |<---100---+          |         |  Line 2\n      \
    \   |          |          |         |\n         |          +---INV--->|      \
    \   |  Line 3\n         |          |          |         |\n         |        \
    \  +---INV----+-------->|  Line 4\n         |          |          |         |\n\
    \         |          |<---100---+         |  Line 5\n         |          |   \
    \       |         |\n         |          |<---------+---100---+  Line 6\n    \
    \     |          |          |         |\n         |          |<---180---+---------+\
    \  Line 7\n         |          |          |         |\n         |<---180---+ \
    \         |         |  Line 8\n         |          |          |         |\n  \
    \       |          |<---180---+         |  Line 9\n         |          |     \
    \     |         |\n         |<---180---+          |         |  Line 10\n     \
    \    |          |          |         |\n         |          |<---200---+     \
    \    |  Line 11\n         |          |          |         |\n         |<---200---+\
    \          |         |  Line 12\n         |          |          |         |\n\
    \         |          +---CANCEL-+-------->|  Line 13\n         |          |  \
    \        |         |\n         |          |<---------+---487---+  Line 14\n  \
    \       |          |          |         |\n         |          +---ACK----+-------->|\
    \  Line 15\n         |          |          |         |\n         |          |<---------+---200---+\
    \  Line 16\n                        Figure 2: Forked Call Flow\n   The SIP CLF\
    \ log appears from the vantage point of P2.  The fields\n   logged are shown below;\
    \ the line numbers refer to Figure 2.\n   1    Timestamp: 1275930743.699\n   \
    \     Message Type: R\n        Directionality: r\n        Transport: udp\n   \
    \     CSeq-Number: 43\n        CSeq-Method: INVITE\n        R-URI: sip:bob@example.net\n\
    \        Destination-address: 203.0.113.200\n        Destination-port: 5060\n\
    \        Source-address: 198.51.100.1\n        Source-port: 5060\n        To:\
    \ sip:bob@example.net\n        To tag: -\n        From: sip:alice@example.com\n\
    \        From tag: a1-1\n        Call-ID: tr-88h@example.com\n        Status:\
    \ -\n        Server-Txn: s-1-tr\n        Client-Txn: -\n   2    Timestamp: 1275930744.001\n\
    \        Message Type: r\n        Directionality: s\n        Transport: udp\n\
    \        CSeq-Number: 43\n        CSeq-Method: INVITE\n        R-URI: -\n    \
    \    Destination-address: 198.51.100.1\n        Destination-port: 5060\n     \
    \   Source-address: 203.0.113.200\n        Source-port: 5060\n        To: sip:bob@example.net\n\
    \        To tag: -\n        From: sip:alice@example.com\n        From tag: a1-1\n\
    \        Call-ID: tr-88h@example.com\n        Status: 100\n        Server-Txn:\
    \ s-1-tr\n        Client-Txn: -\n   3    Timestamp: 1275930744.998\n        Message\
    \ Type: R\n        Directionality: s\n        Transport: udp\n        CSeq-Number:\
    \ 43\n        CSeq-Method: INVITE\n        R-URI: sip:bob@bob1.example.net\n \
    \       Destination-address: 203.0.113.1\n        Destination-port: 5060\n   \
    \     Source-address: 203.0.113.200\n        Source-port: 5060\n        To: sip:bob@example.net\n\
    \        To tag: -\n        From: sip:alice@example.com\n        From tag: a1-1\n\
    \        Call-ID: tr-88h@example.com\n        Status: -\n        Server-Txn: s-1-tr\n\
    \        Client-Txn: c-1-tr\n   4    Timestamp: 1275930745.500\n        Message\
    \ Type: R\n        Directionality: s\n        Transport: udp\n        CSeq-Number:\
    \ 43\n        CSeq-Method: INVITE\n        R-URI: sip:bob@bob2.example.net\n \
    \       Destination-address: [2001:db8::9]\n        Destination-port: 5060\n \
    \       Source-address: 203.0.113.200\n        Source-port: 5060\n        To:\
    \ sip:bob@example.net\n        To tag: -\n        From: sip:alice@example.com\n\
    \        From tag: a1-1\n        Call-ID: tr-88h@example.com\n        Status:\
    \ -\n        Server-Txn: s-1-tr\n        Client-Txn: c-2-tr\n   5    Timestamp:\
    \ 1275930745.800\n        Message Type: r\n        Directionality: r\n       \
    \ Transport: udp\n        CSeq-Number: 43\n        CSeq-Method: INVITE\n     \
    \   R-URI: -\n        Destination-address: 203.0.113.200\n        Destination-port:\
    \ 5060\n        Source-address: 203.0.113.1\n        Source-port: 5060\n     \
    \   To: sip:bob@example.net\n        To tag: b1=-1\n        From: sip:alice@example.com\n\
    \        From tag: a1-1\n        Call-ID: tr-88h@example.com 100\n        Status:\
    \ 100\n        Server-Txn: s-1-tr\n        Client-Txn: c-1-tr\n   6    Timestamp:\
    \ 1275930746.100\n        Message Type: r\n        Directionality: r\n       \
    \ Transport: udp\n        CSeq-Number: 43\n        CSeq-Method: INVITE\n     \
    \   R-URI: -\n        Destination-address: 203.0.113.200\n        Destination-port:\
    \ udp\n        Source-address: [2001:db8::9]\n        Source-port: 5060\n    \
    \    To: sip:bob@example.net\n        To tag: b2-2\n        From: sip:alice@example.com\n\
    \        From tag: a1-1\n        Call-ID: tr-88h@example.com\n        Status:\
    \ 100\n        Server-Txn: s-1-tr\n        Client-Txn: c-2-tr\n   7    Timestamp:\
    \ 1275930746.700\n        Message Type: r\n        Directionality: r\n       \
    \ Transport: udp\n        CSeq-Number: 43\n        CSeq-Method: INVITE\n     \
    \   R-URI: -\n        Destination-address: 203.0.113.200\n        Destination-port:\
    \ udp\n        Source-address: [2001:db8::9]\n        Source-port: 5060\n    \
    \    To: sip:bob@example.net\n        To tag: b2-2\n        From: sip:alice@example.com\n\
    \        From tag: a1-1\n        Call-ID: tr-88h@example.com\n        Status:\
    \ 180\n        Server-Txn: s-1-tr\n        Client-Txn: c-2-tr\n   8    Timestamp:\
    \ 1275930746.990\n        Message Type: r\n        Directionality: s\n       \
    \ Transport: udp\n        CSeq-Number: 43\n        CSeq-Method: INVITE\n     \
    \   R-URI: -\n        Destination-address: 198.51.100.1\n        Destination-port:\
    \ 5060\n        Source-address: 203.0.113.200\n        Source-port: 5060\n   \
    \     To: sip:bob@example.net\n        To tag: b2-2\n        From: sip:alice@example.com\n\
    \        From tag: a1-1\n        Call-ID: tr-88h@example.com\n        Status:\
    \ 180\n        Server-Txn: s-1-tr\n        Client-Txn: c-2-tr\n   9    Timestamp:\
    \ 1275930747.100\n        Message Type: r\n        Directionality: r\n       \
    \ Transport: udp\n        CSeq-Number: 43\n        CSeq-Method: INVITE\n     \
    \   R-URI: -\n        Destination-address: 203.0.113.200\n        Destination-port:\
    \ 5060\n        Source-address: 203.0.113.1\n        Source-port: 5060\n     \
    \   To: sip:bob@example.net\n        To tag: b1-1\n        From: sip:alice@example.com\n\
    \        From tag: a1-1\n        Call-ID: tr-88h@example.com 100\n        Status:\
    \ 180\n        Server-Txn: s-1-tr\n        Client-Txn: c-1-tr\n   10   Timestamp:\
    \ 1275930747.300\n        Message Type: r\n        Directionality: s\n       \
    \ Transport: udp\n        CSeq-Number: 43\n        CSeq-Method: INVITE\n     \
    \   R-URI: -\n        Destination-address: 198.51.100.1\n        Destination-port:\
    \ 5060\n        Source-address: 203.0.113.200\n        Source-port: 5060\n   \
    \     To: sip:bob@example.net\n        To tag: b1-1\n        From: sip:alice@example.com\n\
    \        From tag: a1-1\n        Call-ID: tr-88h@example.com\n        Status:\
    \ 180\n        Server-Txn: s-1-tr\n        Client-Txn: c-2-tr\n   11   Timestamp:\
    \ 1275930747.800\n        Message Type: r\n        Directionality: r\n       \
    \ Transport: udp\n        CSeq-Number: 43\n        CSeq-Method: INVITE\n     \
    \   R-URI: -\n        Destination-address: 203.0.113.200\n        Destination-port:\
    \ 5060\n        Source-address: 203.0.113.1\n        Source-port: 5060\n     \
    \   To: sip:bob@example.net\n        To tag: b1-1\n        From: sip:alice@example.com\n\
    \        From tag: a1-1\n        Call-ID: tr-88h@example.com 100\n        Status:\
    \ 200\n        Server-Txn: s-1-tr\n        Client-Txn: c-1-tr\n   12   Timestamp:\
    \ 1275930748.000\n        Message Type: r\n        Directionality: s\n       \
    \ Transport: udp\n        CSeq-Number: 43\n        CSeq-Method: INVITE\n     \
    \   R-URI: -\n        Destination-address: 198.51.100.1\n        Destination-port:\
    \ 5060\n        Source-address: 203.0.113.200\n        Source-port: 5060\n   \
    \     To: sip:bob@example.net\n        To tag: b1-1\n        From: sip:alice@example.com\n\
    \        From tag: a1-1\n        Call-ID: tr-88h@example.com\n        Status:\
    \ 200\n        Server-Txn: s-1-tr\n        Client-Txn: c-1-tr\n   13   Timestamp:\
    \ 1275930748.201\n        Message Type: R\n        Directionality: s\n       \
    \ Transport: udp\n        CSeq-Number: 43\n        CSeq-Method: CANCEL\n     \
    \   R-URI: sip:bob@bob2.example.net\n        Destination-address: [2001:db8::9]\n\
    \        Destination-port: 5060\n        Source-address: 203.0.113.200\n     \
    \   Source-port: 5060\n        To: sip:bob@example.net\n        To tag: b2-2\n\
    \        From: sip:alice@example.com\n        From tag: a1-1\n        Call-ID:\
    \ tr-88h@example.com\n        Status: -\n        Server-Txn: s-1-tr\n        Client-Txn:\
    \ c-2-tr\n   14   Timestamp: 1275930748.300\n        Message Type: r\n       \
    \ Directionality: r\n        Transport: udp\n        CSeq-Number: 43\n       \
    \ CSeq-Method: INVITE\n        R-URI: -\n        Destination-address: 203.0.113.200\n\
    \        Destination-port: udp\n        Source-address: [2001:db8::9]\n      \
    \  Source-port: 5060\n        To: sip:bob@example.net\n        To tag: b2-2\n\
    \        From: sip:alice@example.com\n        From tag: a1-1\n        Call-ID:\
    \ tr-88h@example.com\n        Status: 487\n        Server-Txn: s-1-tr\n      \
    \  Client-Txn: c-2-tr\n   15   Timestamp: 1275930748.355\n        Message Type:\
    \ R\n        Directionality: s\n        Transport: udp\n        CSeq-Number: 43\n\
    \        CSeq-Method: ACK\n        R-URI: sip:bob@bob2.example.net\n        Destination-address:\
    \ [2001:db8::9]\n        Destination-port: 5060\n        Source-address: 203.0.113.200\n\
    \        Source-port: 5060\n        To: sip:bob@example.net\n        To tag: b2-2\n\
    \        From: sip:alice@example.com\n        From tag: a1-1\n        Call-ID:\
    \ tr-88h@example.com\n        Status: -\n        Server-Txn: s-1-tr\n        Client-Txn:\
    \ c-2-tr\n   16   Timestamp: 1275930748.698\n        Message Type: r\n       \
    \ Directionality: r\n        Transport: udp\n        CSeq-Number: 43\n       \
    \ CSeq-Method: CANCEL\n        R-URI: -\n        Destination-address: 203.0.113.200\n\
    \        Destination-port: udp\n        Source-address: [2001:db8::9]\n      \
    \  Source-port: 5060\n        To: sip:bob@example.net\n        To tag: b2-2\n\
    \        From: sip:alice@example.com\n        From tag: a1-1\n        Call-ID:\
    \ tr-88h@example.com\n        Status: 200\n        Server-Txn: s-1-tr\n      \
    \  Client-Txn: c-2-tr\n   The above SIP CLF log makes it easy to search for a\
    \ specific\n   transaction or a state of the session.  Searching for the string\n\
    \   \"c-1-tr\" on the log records will readily yield the information that\n  \
    \ an INVITE was sent to sip:bob@bob1.example.com, it elicited a 100\n   followed\
    \ by a 180 and then a 200.  Because the ACK request in this\n   case would be\
    \ exchanged end-to-end, this element does not see (and\n   therefore will not\
    \ log) the ACK.\n   Searching for \"c-2-tr\" yields a more complex scenario of\
    \ sending an\n   INVITE to sip:bob@bob2.example.net, receiving 100 and 180.  However,\n\
    \   the log makes it apparent that the request to\n   sip:bob@bob2.example.net\
    \ was subsequently CANCEL'ed before a final\n   response was generated, and that\
    \ the pending INVITE returned a 487.\n   The ACK to the final non-2xx response\
    \ and a 200 to the CANCEL request\n   complete the exchange on that branch.\n"
- title: 10.  Security Considerations
  contents:
  - "10.  Security Considerations\n   A log file by its nature reveals both the state\
    \ of the entity\n   producing it and the nature of the information being logged.\
    \  To the\n   extent that this state should not be publicly accessible and that\
    \ the\n   information is to be considered private, appropriate file and\n   directory\
    \ permissions attached to the log file SHOULD be used.  It is\n   outside the\
    \ scope of this document to specify how to protect the log\n   file while it is\
    \ stored on disk; however, certain precautions can be\n   taken.  Operators SHOULD\
    \ consider using common administrative\n   features such as disk encryption and\
    \ securing log files [schneier-1].\n   Operators SHOULD also consider hardening\
    \ the machine on which the log\n   file is stored by restricting physical access\
    \ to the host as well as\n   restricting access to the file itself.  Depending\
    \ on the specific\n   operating system and environment, the file and directory\
    \ permissions\n   SHOULD be set to be most restrictive such that the file is not\n\
    \   publicly readable and writable and the directory where the file is\n   stored\
    \ is not publicly accessible.\n   The following threats may be considered for\
    \ the log file while it is\n   stored:\n   o  An attacker may gain access to view\
    \ the log file, or may\n      surreptitiously make a copy of the log file for\
    \ later viewing.\n   o  An attacker who is unable to eavesdrop on real-time SIP\
    \ traffic on\n      the network, but, nonetheless, can access the log file, is\
    \ able to\n      easily mount replay attack or other attacks that result from\n\
    \      channel eavesdropping.  Encrypting SIP traffic does not help here\n   \
    \   because the SIP entity generating the log file would have\n      decrypted\
    \ the message for processing and subsequent logging.\n   o  An attacker may delete\
    \ parts of --- or indeed, the whole --- file.\n   Public access to the SIP log\
    \ file creates more of a privacy leak when\n   compared to an adversary eavesdropping\
    \ cleartext SIP traffic on the\n   network.  If all SIP traffic on a network segment\
    \ is encrypted, then\n   as noted above, special attention must be directed to\
    \ the file and\n   directory permissions associated with the log file to preserve\n\
    \   privacy such that only a privileged user can access the contents of\n   the\
    \ log file.\n   Transporting SIP CLF files across the network pose special challenges\n\
    \   as well.  The following threats may be considered for transferring\n   log\
    \ files or while transferring individual log records:\n   o  An attacker may view\
    \ the records;\n   o  An attacker may modify the records in transit or insert\
    \ previously\n      captured records into the stream;\n   o  An attacker may remove\
    \ records in transit, or may stage a man-in-\n      the-middle attack to deliver\
    \ a partially or entirely falsified log\n      file.\n   It is also outside the\
    \ scope of this document to specify protection\n   methods for log files or log\
    \ records that are being transferred\n   between hosts; however, certain precautions\
    \ can be taken.  Operators\n   SHOULD require mutual authentication, channel confidentiality,\
    \ and\n   channel integrity while transferring the log file.  The use of a\n \
    \  secure shell transport layer protocol [RFC4253] or TLS [RFC5246]\n   accomplishes\
    \ this.\n   Even with such care, sensitive information can be leaked during or\n\
    \   after the transfer.  SIP CLF fields like IP addresses and URIs\n   contain\
    \ potentially sensitive information.  Before transferring the\n   log file across\
    \ domains, operators SHOULD ensure that any fields that\n   contain sensitive\
    \ information are appropriately anonymized or\n   obfuscated.  A specification\
    \ for a format that describes which fields\n   are obfuscated and with what characteristics\
    \ (e.g., what correlations\n   still work) is needed to allow interoperable but\
    \ privacy-friendly\n   exchange of SIP CLF between administrative domains.  Such\
    \ a\n   specification is not attempted here, but is for further study.\n   The\
    \ SIP CLF represents the minimum fields that lend themselves to\n   trend analysis\
    \ and serve as information that may be deemed useful.\n   Other formats can be\
    \ defined that include more headers (and the body)\n   from Section 8.1.  However,\
    \ where to draw a judicial line regarding\n   the inclusion of non-mandatory headers\
    \ can be challenging.  Clearly,\n   the more information a SIP entity logs, the\
    \ longer time the logging\n   process will take, the more disk space the log entry\
    \ will consume,\n   and the more potentially sensitive information could be breached.\n\
    \   Therefore, adequate trade-offs should be taken in account when\n   logging\
    \ more fields than the ones recommended in Section 8.1.\n   Implementers need\
    \ to pay particular attention to buffer handling when\n   reading or writing log\
    \ files.  SIP CLF entries can be unbounded in\n   length.  It would be reasonable\
    \ for a full dump of a SIP message to\n   be thousands of octets long.  This is\
    \ of particular importance to CLF\n   log parsers, as a SIP CLF log writers may\
    \ add one or more extension\n   fields to the message to be logged.\n"
- title: 11.  Operational Guidance
  contents:
  - "11.  Operational Guidance\n   SIP CLF log files will take up a substantial amount\
    \ of disk space\n   depending on traffic volume at a processing entity and the\
    \ amount of\n   information being logged.  As such, any organization using SIP\
    \ CLF\n   should establish operational procedures for file rollovers and\n   periodic\
    \ retrieval of logs before rollover as appropriate to the\n   needs of the organization.\n\
    \   Listing such operational guidelines in this document is out of scope\n   for\
    \ this work.\n"
- title: 12.  Acknowledgments
  contents:
  - "12.  Acknowledgments\n   Members of the sipping, dispatch, ipfix, and syslog\
    \ working groups\n   provided invaluable input to the formulation of the document.\
    \  These\n   include Benoit Claise, Spencer Dawkins, John Elwell, David\n   Harrington,\
    \ Christer Holmberg, Hadriel Kaplan, Atsushi Kobayashi,\n   Jiri Kuthan, Scott\
    \ Lawrence, Chris Lonvick, Peter Musgrave, Simon\n   Perreault, Adam Roach, Dan\
    \ Romascanu, Robert Sparks, Brian Trammell,\n   Dale Worley, Theo Zourzouvillys,\
    \ and others that we have undoubtedly,\n   but inadvertently, missed.\n   Rainer\
    \ Gerhards, David Harrington, Cullen Jennings, and Gonzalo\n   Salgueiro helped\
    \ tremendously in discussions related to arriving at\n   the beginnings of an\
    \ information model.\n"
- title: 13.  References
  contents:
  - '13.  References

    '
- title: 13.1.  Normative References
  contents:
  - "13.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use in\
    \ RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119, March\
    \ 1997.\n   [RFC3261]  Rosenberg, J., Schulzrinne, H., Camarillo, G., Johnston,\n\
    \              A., Peterson, J., Sparks, R., Handley, M., and E.\n           \
    \   Schooler, \"SIP: Session Initiation Protocol\", RFC 3261,\n              June\
    \ 2002.\n"
- title: 13.2.  Informative References
  contents:
  - "13.2.  Informative References\n   [RFC4253]  Ylonen, T. and C. Lonvick, \"The\
    \ Secure Shell (SSH)\n              Transport Layer Protocol\", RFC 4253, January\
    \ 2006.\n   [RFC5101]  Claise, B., \"Specification of the IP Flow Information\n\
    \              Export (IPFIX) Protocol for the Exchange of IP Traffic\n      \
    \        Flow Information\", RFC 5101, January 2008.\n   [RFC5246]  Dierks, T.\
    \ and E. Rescorla, \"The Transport Layer Security\n              (TLS) Protocol\
    \ Version 1.2\", RFC 5246, August 2008.\n   [RFC5424]  Gerhards, R., \"The Syslog\
    \ Protocol\", RFC 5424, March 2009.\n   [RFC6873]  Salgueiro, G., Gurbani, V.,\
    \ and A. B. Roach, \"Format for\n              the Session Initiation Protocol\
    \ (SIP) Common Log Format\n              (CLF)\", RFC 6873, February 2013.\n \
    \  [rieck2008]\n              Rieck, K., Wahl, S., Laskov, P., Domschitz, P.,\
    \ and K-R.\n              Muller, \"A Self-learning System for Detection of Anomalous\n\
    \              SIP Messages\", Principles, Systems and Applications of IP\n  \
    \            Telecommunications Services and Security for Next\n             \
    \ Generation Networks (IPTComm), LNCS 5310, pp. 90-106,\n              2008.\n\
    \   [schneier-1]\n              Schneier, B. and J. Kelsey, \"Secure audit logs\
    \ to support\n              computer forensics\", ACM Transactions on Information\
    \ and\n              System Security (TISSEC), 2(2), pp. 159,176, May 1999.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Vijay K. Gurbani (editor)\n   Bell Laboratories, Alcatel-Lucent\n\
    \   1960 Lucent Lane\n   Naperville, IL  60566\n   USA\n   EMail: vkg@bell-labs.com\n\
    \   Eric W. Burger (editor)\n   Georgetown University\n   USA\n   EMail: eburger@standardstrack.com\n\
    \   URI:   http://www.standardstrack.com\n   Tricha Anjali\n   Illinois Institute\
    \ of Technology\n   316 Siegel Hall\n   Chicago, IL  60616\n   USA\n   EMail:\
    \ tricha@ece.iit.edu\n   Humberto Abdelnur\n   INRIA\n   INRIA - Nancy Grant Est\n\
    \   Campus Scientifique\n   54506, Vandoeuvre-les-Nancy Cedex\n   France\n   EMail:\
    \ humbol@gmail.com\n   Olivier Festor\n   INRIA\n   INRIA - Nancy Grant Est\n\
    \   Campus Scientifique\n   54506, Vandoeuvre-les-Nancy Cedex\n   France\n   EMail:\
    \ Olivier.Festor@loria.fr\n"
