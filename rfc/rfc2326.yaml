- title: __initial_text__
  contents:
  - '                  Real Time Streaming Protocol (RTSP)

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (1998).  All Rights Reserved.\n"
- title: Abstract
  contents:
  - "Abstract\n   The Real Time Streaming Protocol, or RTSP, is an application-level\n\
    \   protocol for control over the delivery of data with real-time\n   properties.\
    \ RTSP provides an extensible framework to enable\n   controlled, on-demand delivery\
    \ of real-time data, such as audio and\n   video. Sources of data can include\
    \ both live data feeds and stored\n   clips. This protocol is intended to control\
    \ multiple data delivery\n   sessions, provide a means for choosing delivery channels\
    \ such as UDP,\n   multicast UDP and TCP, and provide a means for choosing delivery\n\
    \   mechanisms based upon RTP (RFC 1889).\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   * 1 Introduction .................................................\
    \  5\n        + 1.1 Purpose ...............................................  5\n\
    \        + 1.2 Requirements ..........................................  6\n  \
    \      + 1.3 Terminology ...........................................  6\n    \
    \    + 1.4 Protocol Properties ...................................  9\n      \
    \  + 1.5 Extending RTSP ........................................ 11\n        +\
    \ 1.6 Overall Operation ..................................... 11\n        + 1.7\
    \ RTSP States ........................................... 12\n        + 1.8 Relationship\
    \ with Other Protocols ..................... 13\n   * 2 Notational Conventions\
    \ ....................................... 14\n   * 3 Protocol Parameters ..........................................\
    \ 14\n        + 3.1 RTSP Version .......................................... 14\n\
    \        + 3.2 RTSP URL .............................................. 14\n  \
    \      + 3.3 Conference Identifiers ................................ 16\n    \
    \    + 3.4 Session Identifiers ................................... 16\n      \
    \  + 3.5 SMPTE Relative Timestamps ............................. 16\n        +\
    \ 3.6 Normal Play Time ...................................... 17\n        + 3.7\
    \ Absolute Time ......................................... 18\n        + 3.8 Option\
    \ Tags ........................................... 18\n             o 3.8.1 Registering\
    \ New Option Tags with IANA .......... 18\n   * 4 RTSP Message .................................................\
    \ 19\n        + 4.1 Message Types ......................................... 19\n\
    \        + 4.2 Message Headers ....................................... 19\n  \
    \      + 4.3 Message Body .......................................... 19\n    \
    \    + 4.4 Message Length ........................................ 20\n   * 5\
    \ General Header Fields ........................................ 20\n   * 6 Request\
    \ ...................................................... 20\n        + 6.1 Request\
    \ Line .......................................... 21\n        + 6.2 Request Header\
    \ Fields ................................. 21\n   * 7 Response .....................................................\
    \ 22\n        + 7.1 Status-Line ........................................... 22\n\
    \             o 7.1.1 Status Code and Reason Phrase .................. 22\n  \
    \           o 7.1.2 Response Header Fields ......................... 26\n   *\
    \ 8 Entity ....................................................... 27\n      \
    \  + 8.1 Entity Header Fields .................................. 27\n        +\
    \ 8.2 Entity Body ........................................... 28\n   * 9 Connections\
    \ .................................................. 28\n        + 9.1 Pipelining\
    \ ............................................ 28\n        + 9.2 Reliability and\
    \ Acknowledgements ...................... 28\n   * 10 Method Definitions ..........................................\
    \ 29\n        + 10.1 OPTIONS .............................................. 30\n\
    \        + 10.2 DESCRIBE ............................................. 31\n  \
    \      + 10.3 ANNOUNCE ............................................. 32\n    \
    \    + 10.4 SETUP ................................................ 33\n      \
    \  + 10.5 PLAY ................................................. 34\n        +\
    \ 10.6 PAUSE ................................................ 36\n        + 10.7\
    \ TEARDOWN ............................................. 37\n        + 10.8 GET_PARAMETER\
    \ ........................................ 37\n        + 10.9 SET_PARAMETER ........................................\
    \ 38\n        + 10.10 REDIRECT ............................................ 39\n\
    \        + 10.11 RECORD .............................................. 39\n  \
    \      + 10.12 Embedded (Interleaved) Binary Data .................. 40\n   *\
    \ 11 Status Code Definitions ..................................... 41\n      \
    \  + 11.1 Success 2xx .......................................... 41\n        \
    \     o 11.1.1 250 Low on Storage Space ...................... 41\n        + 11.2\
    \ Redirection 3xx ...................................... 41\n        + 11.3 Client\
    \ Error 4xx ..................................... 42\n             o 11.3.1 405\
    \ Method Not Allowed ........................ 42\n             o 11.3.2 451 Parameter\
    \ Not Understood .................. 42\n             o 11.3.3 452 Conference Not\
    \ Found ...................... 42\n             o 11.3.4 453 Not Enough Bandwidth\
    \ ...................... 42\n             o 11.3.5 454 Session Not Found .........................\
    \ 42\n             o 11.3.6 455 Method Not Valid in This State ............ 42\n\
    \             o 11.3.7 456 Header Field Not Valid for Resource ....... 42\n  \
    \           o 11.3.8 457 Invalid Range ............................. 43\n    \
    \         o 11.3.9 458 Parameter Is Read-Only .................... 43\n      \
    \       o 11.3.10 459 Aggregate Operation Not Allowed .......... 43\n        \
    \     o 11.3.11 460 Only Aggregate Operation Allowed ......... 43\n          \
    \   o 11.3.12 461 Unsupported Transport .................... 43\n            \
    \ o 11.3.13 462 Destination Unreachable .................. 43\n             o\
    \ 11.3.14 551 Option not supported ..................... 43\n   * 12 Header Field\
    \ Definitions .................................... 44\n        + 12.1 Accept ...............................................\
    \ 46\n        + 12.2 Accept-Encoding ...................................... 46\n\
    \        + 12.3 Accept-Language ...................................... 46\n  \
    \      + 12.4 Allow ................................................ 46\n    \
    \    + 12.5 Authorization ........................................ 46\n      \
    \  + 12.6 Bandwidth ............................................ 46\n        +\
    \ 12.7 Blocksize ............................................ 47\n        + 12.8\
    \ Cache-Control ........................................ 47\n        + 12.9 Conference\
    \ ........................................... 49\n        + 12.10 Connection ..........................................\
    \ 49\n        + 12.11 Content-Base ........................................ 49\n\
    \        + 12.12 Content-Encoding .................................... 49\n  \
    \      + 12.13 Content-Language .................................... 50\n    \
    \    + 12.14 Content-Length ...................................... 50\n      \
    \  + 12.15 Content-Location .................................... 50\n        +\
    \ 12.16 Content-Type ........................................ 50\n        + 12.17\
    \ CSeq ................................................ 50\n        + 12.18 Date\
    \ ................................................ 50\n        + 12.19 Expires\
    \ ............................................. 50\n        + 12.20 From ................................................\
    \ 51\n        + 12.21 Host ................................................ 51\n\
    \        + 12.22 If-Match ............................................ 51\n  \
    \      + 12.23 If-Modified-Since ................................... 52\n    \
    \    + 12.24 Last-Modified........................................ 52\n      \
    \  + 12.25 Location ............................................ 52\n        +\
    \ 12.26 Proxy-Authenticate .................................. 52\n        + 12.27\
    \ Proxy-Require ....................................... 52\n        + 12.28 Public\
    \ .............................................. 53\n        + 12.29 Range ...............................................\
    \ 53\n        + 12.30 Referer ............................................. 54\n\
    \        + 12.31 Retry-After ......................................... 54\n  \
    \      + 12.32 Require ............................................. 54\n    \
    \    + 12.33 RTP-Info ............................................ 55\n      \
    \  + 12.34 Scale ............................................... 56\n        +\
    \ 12.35 Speed ............................................... 57\n        + 12.36\
    \ Server .............................................. 57\n        + 12.37 Session\
    \ ............................................. 57\n        + 12.38 Timestamp\
    \ ........................................... 58\n        + 12.39 Transport ...........................................\
    \ 58\n        + 12.40 Unsupported ......................................... 62\n\
    \        + 12.41 User-Agent .......................................... 62\n  \
    \      + 12.42 Vary ................................................ 62\n    \
    \    + 12.43 Via ................................................. 62\n      \
    \  + 12.44 WWW-Authenticate .................................... 62\n   * 13 Caching\
    \ ..................................................... 62\n   * 14 Examples ....................................................\
    \ 63\n        + 14.1 Media on Demand (Unicast) ............................ 63\n\
    \        + 14.2 Streaming of a Container file ........................ 65\n  \
    \      + 14.3 Single Stream Container Files ........................ 67\n    \
    \    + 14.4 Live Media Presentation Using Multicast .............. 69\n      \
    \  + 14.5 Playing media into an existing session ............... 70\n        +\
    \ 14.6 Recording ............................................ 71\n   * 15 Syntax\
    \ ...................................................... 72\n        + 15.1 Base\
    \ Syntax .......................................... 72\n   * 16 Security Considerations\
    \ ..................................... 73\n   * A RTSP Protocol State Machines\
    \ ................................. 76\n        + A.1 Client State Machine ..................................\
    \ 76\n        + A.2 Server State Machine .................................. 77\n\
    \   * B Interaction with RTP ......................................... 79\n  \
    \ * C Use of SDP for RTSP Session Descriptions ..................... 80\n    \
    \    + C.1 Definitions ........................................... 80\n      \
    \       o C.1.1 Control URL .................................... 80\n        \
    \     o C.1.2 Media streams .................................. 81\n          \
    \   o C.1.3 Payload type(s) ................................ 81\n            \
    \ o C.1.4 Format-specific parameters ..................... 81\n             o\
    \ C.1.5 Range of presentation .......................... 82\n             o C.1.6\
    \ Time of availability ........................... 82\n             o C.1.7 Connection\
    \ Information ......................... 82\n             o C.1.8 Entity Tag .....................................\
    \ 82\n        + C.2 Aggregate Control Not Available ....................... 83\n\
    \        + C.3 Aggregate Control Available ........................... 83\n  \
    \ * D Minimal RTSP implementation .................................. 85\n    \
    \    + D.1 Client ................................................ 85\n      \
    \       o D.1.1 Basic Playback ................................. 86\n        \
    \     o D.1.2 Authentication-enabled ......................... 86\n        + D.2\
    \ Server ................................................ 86\n             o D.2.1\
    \ Basic Playback ................................. 87\n             o D.2.2 Authentication-enabled\
    \ ......................... 87\n   * E Authors' Addresses ...........................................\
    \ 88\n   * F Acknowledgements ............................................. 89\n\
    \   * References ..................................................... 90\n  \
    \ * Full Copyright Statement ....................................... 92\n"
- title: 1 Introduction
  contents:
  - '1 Introduction

    '
- title: 1.1 Purpose
  contents:
  - "1.1 Purpose\n   The Real-Time Streaming Protocol (RTSP) establishes and controls\n\
    \   either a single or several time-synchronized streams of continuous\n   media\
    \ such as audio and video. It does not typically deliver the\n   continuous streams\
    \ itself, although interleaving of the continuous\n   media stream with the control\
    \ stream is possible (see Section 10.12).\n   In other words, RTSP acts as a \"\
    network remote control\" for\n   multimedia servers.\n   The set of streams to\
    \ be controlled is defined by a presentation\n   description. This memorandum\
    \ does not define a format for a\n   presentation description.\n   There is no\
    \ notion of an RTSP connection; instead, a server maintains\n   a session labeled\
    \ by an identifier. An RTSP session is in no way tied\n   to a transport-level\
    \ connection such as a TCP connection. During an\n   RTSP session, an RTSP client\
    \ may open and close many reliable\n   transport connections to the server to\
    \ issue RTSP requests.\n   Alternatively, it may use a connectionless transport\
    \ protocol such as\n   UDP.\n   The streams controlled by RTSP may use RTP [1],\
    \ but the operation of\n   RTSP does not depend on the transport mechanism used\
    \ to carry\n   continuous media.  The protocol is intentionally similar in syntax\n\
    \   and operation to HTTP/1.1 [2] so that extension mechanisms to HTTP\n   can\
    \ in most cases also be added to RTSP. However, RTSP differs in a\n   number of\
    \ important aspects from HTTP:\n     * RTSP introduces a number of new methods\
    \ and has a different\n       protocol identifier.\n     * An RTSP server needs\
    \ to maintain state by default in almost all\n       cases, as opposed to the\
    \ stateless nature of HTTP.\n     * Both an RTSP server and client can issue requests.\n\
    \     * Data is carried out-of-band by a different protocol. (There is an\n  \
    \     exception to this.)\n     * RTSP is defined to use ISO 10646 (UTF-8) rather\
    \ than ISO 8859-1,\n       consistent with current HTML internationalization efforts\
    \ [3].\n     * The Request-URI always contains the absolute URI. Because of\n\
    \       backward compatibility with a historical blunder, HTTP/1.1 [2]\n     \
    \  carries only the absolute path in the request and puts the host\n       name\
    \ in a separate header field.\n     This makes \"virtual hosting\" easier, where\
    \ a single host with one\n     IP address hosts several document trees.\n   The\
    \ protocol supports the following operations:\n   Retrieval of media from media\
    \ server:\n          The client can request a presentation description via HTTP\
    \ or\n          some other method. If the presentation is being multicast, the\n\
    \          presentation description contains the multicast addresses and\n   \
    \       ports to be used for the continuous media. If the presentation\n     \
    \     is to be sent only to the client via unicast, the client\n          provides\
    \ the destination for security reasons.\n   Invitation of a media server to a\
    \ conference:\n          A media server can be \"invited\" to join an existing\n\
    \          conference, either to play back media into the presentation or\n  \
    \        to record all or a subset of the media in a presentation. This\n    \
    \      mode is useful for distributed teaching applications. Several\n       \
    \   parties in the conference may take turns \"pushing the remote\n          control\
    \ buttons.\"\n   Addition of media to an existing presentation:\n          Particularly\
    \ for live presentations, it is useful if the\n          server can tell the client\
    \ about additional media becoming\n          available.\n   RTSP requests may\
    \ be handled by proxies, tunnels and caches as in\n   HTTP/1.1 [2].\n"
- title: 1.2 Requirements
  contents:
  - "1.2 Requirements\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\"\
    , \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and\
    \ \"OPTIONAL\" in this\n   document are to be interpreted as described in RFC\
    \ 2119 [4].\n"
- title: 1.3 Terminology
  contents:
  - "1.3 Terminology\n   Some of the terminology has been adopted from HTTP/1.1 [2].\
    \ Terms not\n   listed here are defined as in HTTP/1.1.\n   Aggregate control:\n\
    \          The control of the multiple streams using a single timeline by\n  \
    \        the server. For audio/video feeds, this means that the client\n     \
    \     may issue a single play or pause message to control both the\n         \
    \ audio and video feeds.\n   Conference:\n          a multiparty, multimedia presentation,\
    \ where \"multi\" implies\n          greater than or equal to one.\n   Client:\n\
    \          The client requests continuous media data from the media\n        \
    \  server.\n   Connection:\n          A transport layer virtual circuit established\
    \ between two\n          programs for the purpose of communication.\n   Container\
    \ file:\n          A file which may contain multiple media streams which often\n\
    \          comprise a presentation when played together. RTSP servers may\n  \
    \        offer aggregate control on these files, though the concept of\n     \
    \     a container file is not embedded in the protocol.\n   Continuous media:\n\
    \          Data where there is a timing relationship between source and\n    \
    \      sink; that is, the sink must reproduce the timing relationship\n      \
    \    that existed at the source. The most common examples of\n          continuous\
    \ media are audio and motion video. Continuous media\n          can be real-time\
    \ (interactive), where there is a \"tight\"\n          timing relationship between\
    \ source and sink, or streaming\n          (playback), where the relationship\
    \ is less strict.\n   Entity:\n          The information transferred as the payload\
    \ of a request or\n          response. An entity consists of metainformation in\
    \ the form of\n          entity-header fields and content in the form of an entity-\n\
    \          body, as described in Section 8.\n   Media initialization:\n      \
    \    Datatype/codec specific initialization. This includes such\n          things\
    \ as clockrates, color tables, etc. Any transport-\n          independent information\
    \ which is required by a client for\n          playback of a media stream occurs\
    \ in the media initialization\n          phase of stream setup.\n   Media parameter:\n\
    \          Parameter specific to a media type that may be changed before\n   \
    \       or during stream playback.\n   Media server:\n          The server providing\
    \ playback or recording services for one or\n          more media streams. Different\
    \ media streams within a\n          presentation may originate from different\
    \ media servers. A\n          media server may reside on the same or a different\
    \ host as the\n          web server the presentation is invoked from.\n   Media\
    \ server indirection:\n          Redirection of a media client to a different\
    \ media server.\n   (Media) stream:\n          A single media instance, e.g.,\
    \ an audio stream or a video\n          stream as well as a single whiteboard\
    \ or shared application\n          group. When using RTP, a stream consists of\
    \ all RTP and RTCP\n          packets created by a source within an RTP session.\
    \ This is\n          equivalent to the definition of a DSM-CC stream([5]).\n \
    \  Message:\n          The basic unit of RTSP communication, consisting of a\n\
    \          structured sequence of octets matching the syntax defined in\n    \
    \      Section 15 and transmitted via a connection or a\n          connectionless\
    \ protocol.\n   Participant:\n          Member of a conference. A participant\
    \ may be a machine, e.g.,\n          a media record or playback server.\n   Presentation:\n\
    \          A set of one or more streams presented to the client as a\n       \
    \   complete media feed, using a presentation description as\n          defined\
    \ below. In most cases in the RTSP context, this implies\n          aggregate\
    \ control of those streams, but does not have to.\n   Presentation description:\n\
    \          A presentation description contains information about one or\n    \
    \      more media streams within a presentation, such as the set of\n        \
    \  encodings, network addresses and information about the\n          content.\
    \  Other IETF protocols such as SDP (RFC 2327 [6]) use\n          the term \"\
    session\" for a live presentation. The presentation\n          description may\
    \ take several different formats, including but\n          not limited to the\
    \ session description format SDP.\n   Response:\n          An RTSP response. If\
    \ an HTTP response is meant, that is\n          indicated explicitly.\n   Request:\n\
    \          An RTSP request. If an HTTP request is meant, that is\n          indicated\
    \ explicitly.\n   RTSP session:\n          A complete RTSP \"transaction\", e.g.,\
    \ the viewing of a movie.\n          A session typically consists of a client\
    \ setting up a\n          transport mechanism for the continuous media stream\
    \ (SETUP),\n          starting the stream with PLAY or RECORD, and closing the\n\
    \          stream with TEARDOWN.\n   Transport initialization:\n          The\
    \ negotiation of transport information (e.g., port numbers,\n          transport\
    \ protocols) between the client and the server.\n"
- title: 1.4 Protocol Properties
  contents:
  - "1.4 Protocol Properties\n   RTSP has the following properties:\n   Extendable:\n\
    \          New methods and parameters can be easily added to RTSP.\n   Easy to\
    \ parse:\n          RTSP can be parsed by standard HTTP or MIME parsers.\n   Secure:\n\
    \          RTSP re-uses web security mechanisms. All HTTP authentication\n   \
    \       mechanisms such as basic (RFC 2068 [2, Section 11.1]) and\n          digest\
    \ authentication (RFC 2069 [8]) are directly applicable.\n          One may also\
    \ reuse transport or network layer security\n          mechanisms.\n   Transport-independent:\n\
    \          RTSP may use either an unreliable datagram protocol (UDP) (RFC\n  \
    \        768 [9]), a reliable datagram protocol (RDP, RFC 1151, not\n        \
    \  widely used [10]) or a reliable stream protocol such as TCP\n          (RFC\
    \ 793 [11]) as it implements application-level reliability.\n   Multi-server capable:\n\
    \          Each media stream within a presentation can reside on a\n         \
    \ different server. The client automatically establishes several\n          concurrent\
    \ control sessions with the different media servers.\n          Media synchronization\
    \ is performed at the transport level.\n   Control of recording devices:\n   \
    \       The protocol can control both recording and playback devices,\n      \
    \    as well as devices that can alternate between the two modes\n          (\"\
    VCR\").\n   Separation of stream control and conference initiation:\n        \
    \  Stream control is divorced from inviting a media server to a\n          conference.\
    \ The only requirement is that the conference\n          initiation protocol either\
    \ provides or can be used to create a\n          unique conference identifier.\
    \ In particular, SIP [12] or H.323\n          [13] may be used to invite a server\
    \ to a conference.\n   Suitable for professional applications:\n          RTSP\
    \ supports frame-level accuracy through SMPTE time stamps\n          to allow\
    \ remote digital editing.\n   Presentation description neutral:\n          The\
    \ protocol does not impose a particular presentation\n          description or\
    \ metafile format and can convey the type of\n          format to be used. However,\
    \ the presentation description must\n          contain at least one RTSP URI.\n\
    \   Proxy and firewall friendly:\n          The protocol should be readily handled\
    \ by both application and\n          transport-layer (SOCKS [14]) firewalls. A\
    \ firewall may need to\n          understand the SETUP method to open a \"hole\"\
    \ for the UDP media\n          stream.\n   HTTP-friendly:\n          Where sensible,\
    \ RTSP reuses HTTP concepts, so that the\n          existing infrastructure can\
    \ be reused. This infrastructure\n          includes PICS (Platform for Internet\
    \ Content Selection\n          [15,16]) for associating labels with content. However,\
    \ RTSP\n          does not just add methods to HTTP since the controlling\n  \
    \        continuous media requires server state in most cases.\n   Appropriate\
    \ server control:\n          If a client can start a stream, it must be able to\
    \ stop a\n          stream. Servers should not start streaming to clients in such\n\
    \          a way that clients cannot stop the stream.\n   Transport negotiation:\n\
    \          The client can negotiate the transport method prior to\n          actually\
    \ needing to process a continuous media stream.\n   Capability negotiation:\n\
    \          If basic features are disabled, there must be some clean\n        \
    \  mechanism for the client to determine which methods are not\n          going\
    \ to be implemented. This allows clients to present the\n          appropriate\
    \ user interface. For example, if seeking is not\n          allowed, the user\
    \ interface must be able to disallow moving a\n          sliding position indicator.\n\
    \     An earlier requirement in RTSP was multi-client capability.\n     However,\
    \ it was determined that a better approach was to make sure\n     that the protocol\
    \ is easily extensible to the multi-client\n     scenario. Stream identifiers\
    \ can be used by several control\n     streams, so that \"passing the remote\"\
    \ would be possible. The\n     protocol would not address how several clients\
    \ negotiate access;\n     this is left to either a \"social protocol\" or some\
    \ other floor\n     control mechanism.\n"
- title: 1.5 Extending RTSP
  contents:
  - "1.5 Extending RTSP\n   Since not all media servers have the same functionality,\
    \ media\n   servers by necessity will support different sets of requests. For\n\
    \   example:\n     * A server may only be capable of playback thus has no need\
    \ to\n       support the RECORD request.\n     * A server may not be capable of\
    \ seeking (absolute positioning) if\n       it is to support live events only.\n\
    \     * Some servers may not support setting stream parameters and thus\n    \
    \   not support GET_PARAMETER and SET_PARAMETER.\n   A server SHOULD implement\
    \ all header fields described in Section 12.\n   It is up to the creators of presentation\
    \ descriptions not to ask the\n   impossible of a server. This situation is similar\
    \ in HTTP/1.1 [2],\n   where the methods described in [H19.6] are not likely to\
    \ be supported\n   across all servers.\n   RTSP can be extended in three ways,\
    \ listed here in order of the\n   magnitude of changes supported:\n     * Existing\
    \ methods can be extended with new parameters, as long as\n       these parameters\
    \ can be safely ignored by the recipient. (This is\n       equivalent to adding\
    \ new parameters to an HTML tag.) If the\n       client needs negative acknowledgement\
    \ when a method extension is\n       not supported, a tag corresponding to the\
    \ extension may be added\n       in the Require: field (see Section 12.32).\n\
    \     * New methods can be added. If the recipient of the message does\n     \
    \  not understand the request, it responds with error code 501 (Not\n       implemented)\
    \ and the sender should not attempt to use this method\n       again. A client\
    \ may also use the OPTIONS method to inquire about\n       methods supported by\
    \ the server. The server SHOULD list the\n       methods it supports using the\
    \ Public response header.\n     * A new version of the protocol can be defined,\
    \ allowing almost all\n       aspects (except the position of the protocol version\
    \ number) to\n       change.\n"
- title: 1.6 Overall Operation
  contents:
  - "1.6 Overall Operation\n   Each presentation and media stream may be identified\
    \ by an RTSP URL.\n   The overall presentation and the properties of the media\
    \ the\n   presentation is made up of are defined by a presentation description\n\
    \   file, the format of which is outside the scope of this specification.\n  \
    \ The presentation description file may be obtained by the client using\n   HTTP\
    \ or other means such as email and may not necessarily be stored\n   on the media\
    \ server.\n   For the purposes of this specification, a presentation description\
    \ is\n   assumed to describe one or more presentations, each of which\n   maintains\
    \ a common time axis. For simplicity of exposition and\n   without loss of generality,\
    \ it is assumed that the presentation\n   description contains exactly one such\
    \ presentation. A presentation\n   may contain several media streams.\n   The\
    \ presentation description file contains a description of the media\n   streams\
    \ making up the presentation, including their encodings,\n   language, and other\
    \ parameters that enable the client to choose the\n   most appropriate combination\
    \ of media. In this presentation\n   description, each media stream that is individually\
    \ controllable by\n   RTSP is identified by an RTSP URL, which points to the media\
    \ server\n   handling that particular media stream and names the stream stored\
    \ on\n   that server. Several media streams can be located on different\n   servers;\
    \ for example, audio and video streams can be split across\n   servers for load\
    \ sharing. The description also enumerates which\n   transport methods the server\
    \ is capable of.\n   Besides the media parameters, the network destination address\
    \ and\n   port need to be determined. Several modes of operation can be\n   distinguished:\n\
    \   Unicast:\n          The media is transmitted to the source of the RTSP request,\n\
    \          with the port number chosen by the client. Alternatively, the\n   \
    \       media is transmitted on the same reliable stream as RTSP.\n   Multicast,\
    \ server chooses address:\n          The media server picks the multicast address\
    \ and port. This is\n          the typical case for a live or near-media-on-demand\n\
    \          transmission.\n   Multicast, client chooses address:\n          If\
    \ the server is to participate in an existing multicast\n          conference,\
    \ the multicast address, port and encryption key are\n          given by the conference\
    \ description, established by means\n          outside the scope of this specification.\n"
- title: 1.7 RTSP States
  contents:
  - "1.7 RTSP States\n   RTSP controls a stream which may be sent via a separate protocol,\n\
    \   independent of the control channel. For example, RTSP control may\n   occur\
    \ on a TCP connection while the data flows via UDP. Thus, data\n   delivery continues\
    \ even if no RTSP requests are received by the media\n   server. Also, during\
    \ its lifetime, a single media stream may be\n   controlled by RTSP requests issued\
    \ sequentially on different TCP\n   connections. Therefore, the server needs to\
    \ maintain \"session state\"\n   to be able to correlate RTSP requests with a\
    \ stream. The state\n   transitions are described in Section A.\n   Many methods\
    \ in RTSP do not contribute to state. However, the\n   following play a central\
    \ role in defining the allocation and usage of\n   stream resources on the server:\
    \ SETUP, PLAY, RECORD, PAUSE, and\n   TEARDOWN.\n   SETUP:\n          Causes the\
    \ server to allocate resources for a stream and start\n          an RTSP session.\n\
    \   PLAY and RECORD:\n          Starts data transmission on a stream allocated\
    \ via SETUP.\n   PAUSE:\n          Temporarily halts a stream without freeing\
    \ server resources.\n   TEARDOWN:\n          Frees resources associated with the\
    \ stream. The RTSP session\n          ceases to exist on the server.\n       \
    \   RTSP methods that contribute to state use the Session header\n          field\
    \ (Section 12.37) to identify the RTSP session whose state\n          is being\
    \ manipulated. The server generates session identifiers\n          in response\
    \ to SETUP requests (Section 10.4).\n"
- title: 1.8 Relationship with Other Protocols
  contents:
  - "1.8 Relationship with Other Protocols\n   RTSP has some overlap in functionality\
    \ with HTTP. It also may\n   interact with HTTP in that the initial contact with\
    \ streaming content\n   is often to be made through a web page. The current protocol\n\
    \   specification aims to allow different hand-off points between a web\n   server\
    \ and the media server implementing RTSP. For example, the\n   presentation description\
    \ can be retrieved using HTTP or RTSP, which\n   reduces roundtrips in web-browser-based\
    \ scenarios, yet also allows\n   for standalone RTSP servers and clients which\
    \ do not rely on HTTP at\n   all.\n   However, RTSP differs fundamentally from\
    \ HTTP in that data delivery\n   takes place out-of-band in a different protocol.\
    \ HTTP is an\n   asymmetric protocol where the client issues requests and the\
    \ server\n   responds. In RTSP, both the media client and media server can issue\n\
    \   requests. RTSP requests are also not stateless; they may set\n   parameters\
    \ and continue to control a media stream long after the\n   request has been acknowledged.\n\
    \     Re-using HTTP functionality has advantages in at least two areas,\n    \
    \ namely security and proxies. The requirements are very similar, so\n     having\
    \ the ability to adopt HTTP work on caches, proxies and\n     authentication is\
    \ valuable.\n   While most real-time media will use RTP as a transport protocol,\
    \ RTSP\n   is not tied to RTP.\n   RTSP assumes the existence of a presentation\
    \ description format that\n   can express both static and temporal properties\
    \ of a presentation\n   containing several media streams.\n"
- title: 2 Notational Conventions
  contents:
  - "2 Notational Conventions\n   Since many of the definitions and syntax are identical\
    \ to HTTP/1.1,\n   this specification only points to the section where they are\
    \ defined\n   rather than copying it. For brevity, [HX.Y] is to be taken to refer\n\
    \   to Section X.Y of the current HTTP/1.1 specification (RFC 2068 [2]).\n   All\
    \ the mechanisms specified in this document are described in both\n   prose and\
    \ an augmented Backus-Naur form (BNF) similar to that used in\n   [H2.1]. It is\
    \ described in detail in RFC 2234 [17], with the\n   difference that this RTSP\
    \ specification maintains the \"1#\" notation\n   for comma-separated lists.\n\
    \   In this memo, we use indented and smaller-type paragraphs to provide\n   background\
    \ and motivation. This is intended to give readers who were\n   not involved with\
    \ the formulation of the specification an\n   understanding of why things are\
    \ the way that they are in RTSP.\n"
- title: 3 Protocol Parameters
  contents:
  - '3 Protocol Parameters

    '
- title: 3.1 RTSP Version
  contents:
  - "3.1 RTSP Version\n   [H3.1] applies, with HTTP replaced by RTSP.\n"
- title: 3.2 RTSP URL
  contents:
  - "3.2 RTSP URL\n   The \"rtsp\" and \"rtspu\" schemes are used to refer to network\
    \ resources\n   via the RTSP protocol. This section defines the scheme-specific\n\
    \   syntax and semantics for RTSP URLs.\n   rtsp_URL  =   ( \"rtsp:\" | \"rtspu:\"\
    \ )\n                 \"//\" host [ \":\" port ] [ abs_path ]\n   host      =\
    \   <A legal Internet host domain name of IP address\n                 (in dotted\
    \ decimal form), as defined by Section 2.1\n                 of RFC 1123 \\cite{rfc1123}>\n\
    \   port      =   *DIGIT\n   abs_path is defined in [H3.2.1].\n     Note that\
    \ fragment and query identifiers do not have a well-defined\n     meaning at this\
    \ time, with the interpretation left to the RTSP\n     server.\n   The scheme\
    \ rtsp requires that commands are issued via a reliable\n   protocol (within the\
    \ Internet, TCP), while the scheme rtspu identifies\n   an unreliable protocol\
    \ (within the Internet, UDP).\n   If the port is empty or not given, port 554\
    \ is assumed. The semantics\n   are that the identified resource can be controlled\
    \ by RTSP at the\n   server listening for TCP (scheme \"rtsp\") connections or\
    \ UDP (scheme\n   \"rtspu\") packets on that port of host, and the Request-URI\
    \ for the\n   resource is rtsp_URL.\n   The use of IP addresses in URLs SHOULD\
    \ be avoided whenever possible\n   (see RFC 1924 [19]).\n   A presentation or\
    \ a stream is identified by a textual media\n   identifier, using the character\
    \ set and escape conventions [H3.2] of\n   URLs (RFC 1738 [20]). URLs may refer\
    \ to a stream or an aggregate of\n   streams, i.e., a presentation. Accordingly,\
    \ requests described in\n   Section 10 can apply to either the whole presentation\
    \ or an individual\n   stream within the presentation. Note that some request\
    \ methods can\n   only be applied to streams, not presentations and vice versa.\n\
    \   For example, the RTSP URL:\n     rtsp://media.example.com:554/twister/audiotrack\n\
    \   identifies the audio stream within the presentation \"twister\", which\n \
    \  can be controlled via RTSP requests issued over a TCP connection to\n   port\
    \ 554 of host media.example.com.\n   Also, the RTSP URL:\n     rtsp://media.example.com:554/twister\n\
    \   identifies the presentation \"twister\", which may be composed of\n   audio\
    \ and video streams.\n   This does not imply a standard way to reference streams\
    \ in URLs.\n   The presentation description defines the hierarchical relationships\n\
    \   in the presentation and the URLs for the individual streams. A\n   presentation\
    \ description may name a stream \"a.mov\" and the whole\n   presentation \"b.mov\"\
    .\n   The path components of the RTSP URL are opaque to the client and do\n  \
    \ not imply any particular file system structure for the server.\n     This decoupling\
    \ also allows presentation descriptions to be used\n     with non-RTSP media control\
    \ protocols simply by replacing the\n     scheme in the URL.\n"
- title: 3.3 Conference Identifiers
  contents:
  - "3.3 Conference Identifiers\n   Conference identifiers are opaque to RTSP and\
    \ are encoded using\n   standard URI encoding methods (i.e., LWS is escaped with\
    \ %). They can\n   contain any octet value. The conference identifier MUST be\
    \ globally\n   unique. For H.323, the conferenceID value is to be used.\n conference-id\
    \ =   1*xchar\n     Conference identifiers are used to allow RTSP sessions to\
    \ obtain\n     parameters from multimedia conferences the media server is\n  \
    \   participating in. These conferences are created by protocols\n     outside\
    \ the scope of this specification, e.g., H.323 [13] or SIP\n     [12]. Instead\
    \ of the RTSP client explicitly providing transport\n     information, for example,\
    \ it asks the media server to use the\n     values in the conference description\
    \ instead.\n"
- title: 3.4 Session Identifiers
  contents:
  - "3.4 Session Identifiers\n   Session identifiers are opaque strings of arbitrary\
    \ length. Linear\n   white space must be URL-escaped. A session identifier MUST\
    \ be chosen\n   randomly and MUST be at least eight octets long to make guessing\
    \ it\n   more difficult. (See Section 16.)\n     session-id   =   1*( ALPHA |\
    \ DIGIT | safe )\n"
- title: 3.5 SMPTE Relative Timestamps
  contents:
  - "3.5 SMPTE Relative Timestamps\n   A SMPTE relative timestamp expresses time relative\
    \ to the start of\n   the clip. Relative timestamps are expressed as SMPTE time\
    \ codes for\n   frame-level access accuracy. The time code has the format\n  \
    \ hours:minutes:seconds:frames.subframes, with the origin at the start\n   of\
    \ the clip. The default smpte format is \"SMPTE 30 drop\" format, with\n   frame\
    \ rate is 29.97 frames per second. Other SMPTE codes MAY be\n   supported (such\
    \ as \"SMPTE 25\") through the use of alternative use of\n   \"smpte time\". For\
    \ the \"frames\" field in the time value can assume\n   the values 0 through 29.\
    \ The difference between 30 and 29.97 frames\n   per second is handled by dropping\
    \ the first two frame indices (values\n   00 and 01) of every minute, except every\
    \ tenth minute. If the frame\n   value is zero, it may be omitted. Subframes are\
    \ measured in\n   one-hundredth of a frame.\n   smpte-range  =   smpte-type \"\
    =\" smpte-time \"-\" [ smpte-time ]\n   smpte-type   =   \"smpte\" | \"smpte-30-drop\"\
    \ | \"smpte-25\"\n                                   ; other timecodes may be\
    \ added\n   smpte-time   =   1*2DIGIT \":\" 1*2DIGIT \":\" 1*2DIGIT [ \":\" 1*2DIGIT\
    \ ]\n                       [ \".\" 1*2DIGIT ]\n   Examples:\n     smpte=10:12:33:20-\n\
    \     smpte=10:07:33-\n     smpte=10:07:00-10:07:33:05.01\n     smpte-25=10:07:00-10:07:33:05.01\n"
- title: 3.6 Normal Play Time
  contents:
  - "3.6 Normal Play Time\n   Normal play time (NPT) indicates the stream absolute\
    \ position\n   relative to the beginning of the presentation. The timestamp consists\n\
    \   of a decimal fraction. The part left of the decimal may be expressed\n   in\
    \ either seconds or hours, minutes, and seconds. The part right of\n   the decimal\
    \ point measures fractions of a second.\n   The beginning of a presentation corresponds\
    \ to 0.0 seconds. Negative\n   values are not defined. The special constant now\
    \ is defined as the\n   current instant of a live event. It may be used only for\
    \ live events.\n   NPT is defined as in DSM-CC: \"Intuitively, NPT is the clock\
    \ the\n   viewer associates with a program. It is often digitally displayed on\n\
    \   a VCR. NPT advances normally when in normal play mode (scale = 1),\n   advances\
    \ at a faster rate when in fast scan forward (high positive\n   scale ratio),\
    \ decrements when in scan reverse (high negative scale\n   ratio) and is fixed\
    \ in pause mode. NPT is (logically) equivalent to\n   SMPTE time codes.\" [5]\n\
    \   npt-range    =   ( npt-time \"-\" [ npt-time ] ) | ( \"-\" npt-time )\n  \
    \ npt-time     =   \"now\" | npt-sec | npt-hhmmss\n   npt-sec      =   1*DIGIT\
    \ [ \".\" *DIGIT ]\n   npt-hhmmss   =   npt-hh \":\" npt-mm \":\" npt-ss [ \"\
    .\" *DIGIT ]\n   npt-hh       =   1*DIGIT     ; any positive number\n   npt-mm\
    \       =   1*2DIGIT    ; 0-59\n   npt-ss       =   1*2DIGIT    ; 0-59\n   Examples:\n\
    \     npt=123.45-125\n     npt=12:05:35.3-\n     npt=now-\n     The syntax conforms\
    \ to ISO 8601. The npt-sec notation is optimized\n     for automatic generation,\
    \ the ntp-hhmmss notation for consumption\n     by human readers. The \"now\"\
    \ constant allows clients to request to\n     receive the live feed rather than\
    \ the stored or time-delayed\n     version. This is needed since neither absolute\
    \ time nor zero time\n     are appropriate for this case.\n"
- title: 3.7 Absolute Time
  contents:
  - "3.7 Absolute Time\n     Absolute time is expressed as ISO 8601 timestamps, using\
    \ UTC (GMT).\n     Fractions of a second may be indicated.\n     utc-range   \
    \ =   \"clock\" \"=\" utc-time \"-\" [ utc-time ]\n     utc-time     =   utc-date\
    \ \"T\" utc-time \"Z\"\n     utc-date     =   8DIGIT                    ; < YYYYMMDD\
    \ >\n     utc-time     =   6DIGIT [ \".\" fraction ]   ; < HHMMSS.fraction >\n\
    \     Example for November 8, 1996 at 14h37 and 20 and a quarter seconds\n   \
    \  UTC:\n     19961108T143720.25Z\n"
- title: 3.8 Option Tags
  contents:
  - "3.8 Option Tags\n   Option tags are unique identifiers used to designate new\
    \ options in\n   RTSP. These tags are used in Require (Section 12.32) and Proxy-\n\
    \   Require (Section 12.27) header fields.\n   Syntax:\n     option-tag   =  \
    \ 1*xchar\n   The creator of a new RTSP option should either prefix the option\
    \ with\n   a reverse domain name (e.g., \"com.foo.mynewfeature\" is an apt name\n\
    \   for a feature whose inventor can be reached at \"foo.com\"), or\n   register\
    \ the new option with the Internet Assigned Numbers Authority\n   (IANA).\n"
- title: 3.8.1 Registering New Option Tags with IANA
  contents:
  - "3.8.1 Registering New Option Tags with IANA\n   When registering a new RTSP option,\
    \ the following information should\n   be provided:\n     * Name and description\
    \ of option. The name may be of any length,\n       but SHOULD be no more than\
    \ twenty characters long. The name MUST\n       not contain any spaces, control\
    \ characters or periods.\n     * Indication of who has change control over the\
    \ option (for\n       example, IETF, ISO, ITU-T, other international standardization\n\
    \       bodies, a consortium or a particular company or group of\n       companies);\n\
    \     * A reference to a further description, if available, for example\n    \
    \   (in order of preference) an RFC, a published paper, a patent\n       filing,\
    \ a technical report, documented source code or a computer\n       manual;\n \
    \    * For proprietary options, contact information (postal and email\n      \
    \ address);\n"
- title: 4 RTSP Message
  contents:
  - "4 RTSP Message\n   RTSP is a text-based protocol and uses the ISO 10646 character\
    \ set in\n   UTF-8 encoding (RFC 2279 [21]). Lines are terminated by CRLF, but\n\
    \   receivers should be prepared to also interpret CR and LF by\n   themselves\
    \ as line terminators.\n     Text-based protocols make it easier to add optional\
    \ parameters in a\n     self-describing manner. Since the number of parameters\
    \ and the\n     frequency of commands is low, processing efficiency is not a\n\
    \     concern. Text-based protocols, if done carefully, also allow easy\n    \
    \ implementation of research prototypes in scripting languages such\n     as Tcl,\
    \ Visual Basic and Perl.\n     The 10646 character set avoids tricky character\
    \ set switching, but\n     is invisible to the application as long as US-ASCII\
    \ is being used.\n     This is also the encoding used for RTCP. ISO 8859-1 translates\n\
    \     directly into Unicode with a high-order octet of zero. ISO 8859-1\n    \
    \ characters with the most-significant bit set are represented as\n     1100001x\
    \ 10xxxxxx. (See RFC 2279 [21])\n   RTSP messages can be carried over any lower-layer\
    \ transport protocol\n   that is 8-bit clean.\n   Requests contain methods, the\
    \ object the method is operating upon and\n   parameters to further describe the\
    \ method. Methods are idempotent,\n   unless otherwise noted. Methods are also\
    \ designed to require little\n   or no state maintenance at the media server.\n"
- title: 4.1 Message Types
  contents:
  - "4.1 Message Types\n   See [H4.1]\n"
- title: 4.2 Message Headers
  contents:
  - "4.2 Message Headers\n   See [H4.2]\n"
- title: 4.3 Message Body
  contents:
  - "4.3 Message Body\n   See [H4.3]\n"
- title: 4.4 Message Length
  contents:
  - "4.4 Message Length\n   When a message body is included with a message, the length\
    \ of that\n   body is determined by one of the following (in order of precedence):\n\
    \   1.     Any response message which MUST NOT include a message body\n      \
    \    (such as the 1xx, 204, and 304 responses) is always terminated\n        \
    \  by the first empty line after the header fields, regardless of\n          the\
    \ entity-header fields present in the message. (Note: An\n          empty line\
    \ consists of only CRLF.)\n   2.     If a Content-Length header field (section\
    \ 12.14) is present,\n          its value in bytes represents the length of the\
    \ message-body.\n          If this header field is not present, a value of zero\
    \ is\n          assumed.\n   3.     By the server closing the connection. (Closing\
    \ the connection\n          cannot be used to indicate the end of a request body,\
    \ since\n          that would leave no possibility for the server to send back\
    \ a\n          response.)\n   Note that RTSP does not (at present) support the\
    \ HTTP/1.1 \"chunked\"\n   transfer coding(see [H3.6]) and requires the presence\
    \ of the\n   Content-Length header field.\n     Given the moderate length of presentation\
    \ descriptions returned,\n     the server should always be able to determine its\
    \ length, even if\n     it is generated dynamically, making the chunked transfer\
    \ encoding\n     unnecessary. Even though Content-Length must be present if there\
    \ is\n     any entity body, the rules ensure reasonable behavior even if the\n\
    \     length is not given explicitly.\n"
- title: 5 General Header Fields
  contents:
  - "5 General Header Fields\n   See [H4.5], except that Pragma, Transfer-Encoding\
    \ and Upgrade headers\n   are not defined:\n      general-header     =     Cache-Control\
    \     ; Section 12.8\n                         |     Connection        ; Section\
    \ 12.10\n                         |     Date              ; Section 12.18\n  \
    \                       |     Via               ; Section 12.43\n"
- title: 6 Request
  contents:
  - "6 Request\n   A request message from a client to a server or vice versa includes,\n\
    \   within the first line of that message, the method to be applied to\n   the\
    \ resource, the identifier of the resource, and the protocol\n   version in use.\n\
    \       Request      =       Request-Line          ; Section 6.1\n           \
    \         *(      general-header        ; Section 5\n                    |   \
    \    request-header        ; Section 6.2\n                    |       entity-header\
    \ )       ; Section 8.1\n                            CRLF\n                  \
    \          [ message-body ]      ; Section 4.3\n"
- title: 6.1 Request Line
  contents:
  - "6.1 Request Line\n  Request-Line = Method SP Request-URI SP RTSP-Version CRLF\n\
    \   Method         =         \"DESCRIBE\"              ; Section 10.2\n      \
    \            |         \"ANNOUNCE\"              ; Section 10.3\n            \
    \      |         \"GET_PARAMETER\"         ; Section 10.8\n                  |\
    \         \"OPTIONS\"               ; Section 10.1\n                  |      \
    \   \"PAUSE\"                 ; Section 10.6\n                  |         \"PLAY\"\
    \                  ; Section 10.5\n                  |         \"RECORD\"    \
    \            ; Section 10.11\n                  |         \"REDIRECT\"       \
    \       ; Section 10.10\n                  |         \"SETUP\"               \
    \  ; Section 10.4\n                  |         \"SET_PARAMETER\"         ; Section\
    \ 10.9\n                  |         \"TEARDOWN\"              ; Section 10.7\n\
    \                  |         extension-method\n  extension-method = token\n  Request-URI\
    \ = \"*\" | absolute_URI\n  RTSP-Version = \"RTSP\" \"/\" 1*DIGIT \".\" 1*DIGIT\n"
- title: 6.2 Request Header Fields
  contents:
  - "6.2 Request Header Fields\n  request-header  =          Accept              \
    \     ; Section 12.1\n                  |          Accept-Encoding          ;\
    \ Section 12.2\n                  |          Accept-Language          ; Section\
    \ 12.3\n                  |          Authorization            ; Section 12.5\n\
    \                  |          From                     ; Section 12.20\n     \
    \             |          If-Modified-Since        ; Section 12.23\n          \
    \        |          Range                    ; Section 12.29\n               \
    \   |          Referer                  ; Section 12.30\n                  | \
    \         User-Agent               ; Section 12.41\n   Note that in contrast to\
    \ HTTP/1.1 [2], RTSP requests always contain\n   the absolute URL (that is, including\
    \ the scheme, host and port)\n   rather than just the absolute path.\n     HTTP/1.1\
    \ requires servers to understand the absolute URL, but\n     clients are supposed\
    \ to use the Host request header. This is purely\n     needed for backward-compatibility\
    \ with HTTP/1.0 servers, a\n     consideration that does not apply to RTSP.\n\
    \   The asterisk \"*\" in the Request-URI means that the request does not\n  \
    \ apply to a particular resource, but to the server itself, and is only\n   allowed\
    \ when the method used does not necessarily apply to a\n   resource.  One example\
    \ would be:\n     OPTIONS * RTSP/1.0\n"
- title: 7 Response
  contents:
  - "7 Response\n   [H6] applies except that HTTP-Version is replaced by RTSP-Version.\n\
    \   Also, RTSP defines additional status codes and does not define some\n   HTTP\
    \ codes. The valid response codes and the methods they can be used\n   with are\
    \ defined in Table 1.\n   After receiving and interpreting a request message,\
    \ the recipient\n   responds with an RTSP response message.\n     Response   \
    \ =     Status-Line         ; Section 7.1\n                 *(    general-header\
    \      ; Section 5\n                 |     response-header     ; Section 7.1.2\n\
    \                 |     entity-header )     ; Section 8.1\n                  \
    \     CRLF\n                       [ message-body ]    ; Section 4.3\n"
- title: 7.1 Status-Line
  contents:
  - "7.1 Status-Line\n   The first line of a Response message is the Status-Line,\
    \ consisting\n   of the protocol version followed by a numeric status code, and\
    \ the\n   textual phrase associated with the status code, with each element\n\
    \   separated by SP characters. No CR or LF is allowed except in the\n   final\
    \ CRLF sequence.\n   Status-Line =   RTSP-Version SP Status-Code SP Reason-Phrase\
    \ CRLF\n"
- title: 7.1.1 Status Code and Reason Phrase
  contents:
  - "7.1.1 Status Code and Reason Phrase\n   The Status-Code element is a 3-digit\
    \ integer result code of the\n   attempt to understand and satisfy the request.\
    \ These codes are fully\n   defined in Section 11. The Reason-Phrase is intended\
    \ to give a short\n   textual description of the Status-Code. The Status-Code\
    \ is intended\n   for use by automata and the Reason-Phrase is intended for the\
    \ human\n   user. The client is not required to examine or display the Reason-\n\
    \   Phrase.\n   The first digit of the Status-Code defines the class of response.\
    \ The\n   last two digits do not have any categorization role. There are 5\n \
    \  values for the first digit:\n     * 1xx: Informational - Request received,\
    \ continuing process\n     * 2xx: Success - The action was successfully received,\
    \ understood,\n       and accepted\n     * 3xx: Redirection - Further action must\
    \ be taken in order to\n       complete the request\n     * 4xx: Client Error\
    \ - The request contains bad syntax or cannot be\n       fulfilled\n     * 5xx:\
    \ Server Error - The server failed to fulfill an apparently\n       valid request\n\
    \   The individual values of the numeric status codes defined for\n   RTSP/1.0,\
    \ and an example set of corresponding Reason-Phrase's, are\n   presented below.\
    \ The reason phrases listed here are only recommended\n   - they may be replaced\
    \ by local equivalents without affecting the\n   protocol. Note that RTSP adopts\
    \ most HTTP/1.1 [2] status codes and\n   adds RTSP-specific status codes starting\
    \ at x50 to avoid conflicts\n   with newly defined HTTP status codes.\n   Status-Code\
    \  =     \"100\"      ; Continue\n                |     \"200\"      ; OK\n  \
    \              |     \"201\"      ; Created\n                |     \"250\"   \
    \   ; Low on Storage Space\n                |     \"300\"      ; Multiple Choices\n\
    \                |     \"301\"      ; Moved Permanently\n                |   \
    \  \"302\"      ; Moved Temporarily\n                |     \"303\"      ; See\
    \ Other\n                |     \"304\"      ; Not Modified\n                |\
    \     \"305\"      ; Use Proxy\n                |     \"400\"      ; Bad Request\n\
    \                |     \"401\"      ; Unauthorized\n                |     \"402\"\
    \      ; Payment Required\n                |     \"403\"      ; Forbidden\n  \
    \              |     \"404\"      ; Not Found\n                |     \"405\" \
    \     ; Method Not Allowed\n                |     \"406\"      ; Not Acceptable\n\
    \                |     \"407\"      ; Proxy Authentication Required\n        \
    \        |     \"408\"      ; Request Time-out\n                |     \"410\"\
    \      ; Gone\n                |     \"411\"      ; Length Required\n        \
    \        |     \"412\"      ; Precondition Failed\n                |     \"413\"\
    \      ; Request Entity Too Large\n                |     \"414\"      ; Request-URI\
    \ Too Large\n                |     \"415\"      ; Unsupported Media Type\n   \
    \             |     \"451\"      ; Parameter Not Understood\n                |\
    \     \"452\"      ; Conference Not Found\n                |     \"453\"     \
    \ ; Not Enough Bandwidth\n                |     \"454\"      ; Session Not Found\n\
    \                |     \"455\"      ; Method Not Valid in This State\n       \
    \         |     \"456\"      ; Header Field Not Valid for Resource\n         \
    \       |     \"457\"      ; Invalid Range\n                |     \"458\"    \
    \  ; Parameter Is Read-Only\n                |     \"459\"      ; Aggregate operation\
    \ not allowed\n                |     \"460\"      ; Only aggregate operation allowed\n\
    \                |     \"461\"      ; Unsupported transport\n                |\
    \     \"462\"      ; Destination unreachable\n                |     \"500\"  \
    \    ; Internal Server Error\n                |     \"501\"      ; Not Implemented\n\
    \                |     \"502\"      ; Bad Gateway\n                |     \"503\"\
    \      ; Service Unavailable\n                |     \"504\"      ; Gateway Time-out\n\
    \                |     \"505\"      ; RTSP Version not supported\n           \
    \     |     \"551\"      ; Option not supported\n                |     extension-code\n\
    \   extension-code  =     3DIGIT\n   Reason-Phrase  =     *<TEXT, excluding CR,\
    \ LF>\n   RTSP status codes are extensible. RTSP applications are not required\n\
    \   to understand the meaning of all registered status codes, though such\n  \
    \ understanding is obviously desirable. However, applications MUST\n   understand\
    \ the class of any status code, as indicated by the first\n   digit, and treat\
    \ any unrecognized response as being equivalent to the\n   x00 status code of\
    \ that class, with the exception that an\n   unrecognized response MUST NOT be\
    \ cached. For example, if an\n   unrecognized status code of 431 is received by\
    \ the client, it can\n   safely assume that there was something wrong with its\
    \ request and\n   treat the response as if it had received a 400 status code.\
    \ In such\n   cases, user agents SHOULD present to the user the entity returned\n\
    \   with the response, since that entity is likely to include human-\n   readable\
    \ information which will explain the unusual status.\n   Code           reason\n\
    \   100            Continue                         all\n   200            OK\
    \                               all\n   201            Created               \
    \           RECORD\n   250            Low on Storage Space             RECORD\n\
    \   300            Multiple Choices                 all\n   301            Moved\
    \ Permanently                all\n   302            Moved Temporarily        \
    \        all\n   303            See Other                        all\n   305 \
    \           Use Proxy                        all\n   400            Bad Request\
    \                      all\n   401            Unauthorized                   \
    \  all\n   402            Payment Required                 all\n   403       \
    \     Forbidden                        all\n   404            Not Found      \
    \                  all\n   405            Method Not Allowed               all\n\
    \   406            Not Acceptable                   all\n   407            Proxy\
    \ Authentication Required    all\n   408            Request Timeout          \
    \        all\n   410            Gone                             all\n   411 \
    \           Length Required                  all\n   412            Precondition\
    \ Failed              DESCRIBE, SETUP\n   413            Request Entity Too Large\
    \         all\n   414            Request-URI Too Long             all\n   415\
    \            Unsupported Media Type           all\n   451            Invalid parameter\
    \                SETUP\n   452            Illegal Conference Identifier    SETUP\n\
    \   453            Not Enough Bandwidth             SETUP\n   454            Session\
    \ Not Found                all\n   455            Method Not Valid In This State\
    \   all\n   456            Header Field Not Valid           all\n   457      \
    \      Invalid Range                    PLAY\n   458            Parameter Is Read-Only\
    \           SET_PARAMETER\n   459            Aggregate Operation Not Allowed \
    \ all\n   460            Only Aggregate Operation Allowed all\n   461        \
    \    Unsupported Transport            all\n   462            Destination Unreachable\
    \          all\n   500            Internal Server Error            all\n   501\
    \            Not Implemented                  all\n   502            Bad Gateway\
    \                      all\n   503            Service Unavailable            \
    \  all\n   504            Gateway Timeout                  all\n   505       \
    \     RTSP Version Not Supported       all\n   551            Option not support\
    \               all\n      Table 1: Status codes and their usage with RTSP methods\n"
- title: 7.1.2 Response Header Fields
  contents:
  - "7.1.2 Response Header Fields\n   The response-header fields allow the request\
    \ recipient to pass\n   additional information about the response which cannot\
    \ be placed in\n   the Status-Line. These header fields give information about\
    \ the\n   server and about further access to the resource identified by the\n\
    \   Request-URI.\n   response-header  =     Location             ; Section 12.25\n\
    \                    |     Proxy-Authenticate   ; Section 12.26\n            \
    \        |     Public               ; Section 12.28\n                    |   \
    \  Retry-After          ; Section 12.31\n                    |     Server    \
    \           ; Section 12.36\n                    |     Vary                 ;\
    \ Section 12.42\n                    |     WWW-Authenticate     ; Section 12.44\n\
    \   Response-header field names can be extended reliably only in\n   combination\
    \ with a change in the protocol version. However, new or\n   experimental header\
    \ fields MAY be given the semantics of response-\n   header fields if all parties\
    \ in the communication recognize them to\n   be response-header fields. Unrecognized\
    \ header fields are treated as\n   entity-header fields.\n"
- title: 8 Entity
  contents:
  - "8 Entity\n   Request and Response messages MAY transfer an entity if not otherwise\n\
    \   restricted by the request method or response status code. An entity\n   consists\
    \ of entity-header fields and an entity-body, although some\n   responses will\
    \ only include the entity-headers.\n   In this section, both sender and recipient\
    \ refer to either the client\n   or the server, depending on who sends and who\
    \ receives the entity.\n"
- title: 8.1 Entity Header Fields
  contents:
  - "8.1 Entity Header Fields\n   Entity-header fields define optional metainformation\
    \ about the\n   entity-body or, if no body is present, about the resource identified\n\
    \   by the request.\n     entity-header       =    Allow               ; Section\
    \ 12.4\n                         |    Content-Base        ; Section 12.11\n  \
    \                       |    Content-Encoding    ; Section 12.12\n           \
    \              |    Content-Language    ; Section 12.13\n                    \
    \     |    Content-Length      ; Section 12.14\n                         |   \
    \ Content-Location    ; Section 12.15\n                         |    Content-Type\
    \        ; Section 12.16\n                         |    Expires             ;\
    \ Section 12.19\n                         |    Last-Modified       ; Section 12.24\n\
    \                         |    extension-header\n     extension-header    =  \
    \  message-header\n   The extension-header mechanism allows additional entity-header\
    \ fields\n   to be defined without changing the protocol, but these fields cannot\n\
    \   be assumed to be recognizable by the recipient. Unrecognized header\n   fields\
    \ SHOULD be ignored by the recipient and forwarded by proxies.\n"
- title: 8.2 Entity Body
  contents:
  - "8.2 Entity Body\n   See [H7.2]\n"
- title: 9 Connections
  contents:
  - "9 Connections\n   RTSP requests can be transmitted in several different ways:\n\
    \     * persistent transport connections used for several\n       request-response\
    \ transactions;\n     * one connection per request/response transaction;\n   \
    \  * connectionless mode.\n   The type of transport connection is defined by the\
    \ RTSP URI (Section\n   3.2). For the scheme \"rtsp\", a persistent connection\
    \ is assumed,\n   while the scheme \"rtspu\" calls for RTSP requests to be sent\
    \ without\n   setting up a connection.\n   Unlike HTTP, RTSP allows the media\
    \ server to send requests to the\n   media client. However, this is only supported\
    \ for persistent\n   connections, as the media server otherwise has no reliable\
    \ way of\n   reaching the client. Also, this is the only way that requests from\n\
    \   media server to client are likely to traverse firewalls.\n"
- title: 9.1 Pipelining
  contents:
  - "9.1 Pipelining\n   A client that supports persistent connections or connectionless\
    \ mode\n   MAY \"pipeline\" its requests (i.e., send multiple requests without\n\
    \   waiting for each response). A server MUST send its responses to those\n  \
    \ requests in the same order that the requests were received.\n"
- title: 9.2 Reliability and Acknowledgements
  contents:
  - "9.2 Reliability and Acknowledgements\n   Requests are acknowledged by the receiver\
    \ unless they are sent to a\n   multicast group. If there is no acknowledgement,\
    \ the sender may\n   resend the same message after a timeout of one round-trip\
    \ time (RTT).\n   The round-trip time is estimated as in TCP (RFC 1123) [18],\
    \ with an\n   initial round-trip value of 500 ms. An implementation MAY cache\
    \ the\n   last RTT measurement as the initial value for future connections.\n\
    \   If a reliable transport protocol is used to carry RTSP, requests MUST\n  \
    \ NOT be retransmitted; the RTSP application MUST instead rely on the\n   underlying\
    \ transport to provide reliability.\n     If both the underlying reliable transport\
    \ such as TCP and the RTSP\n     application retransmit requests, it is possible\
    \ that each packet\n     loss results in two retransmissions. The receiver cannot\
    \ typically\n     take advantage of the application-layer retransmission since\
    \ the\n     transport stack will not deliver the application-layer\n     retransmission\
    \ before the first attempt has reached the receiver.\n     If the packet loss\
    \ is caused by congestion, multiple\n     retransmissions at different layers\
    \ will exacerbate the congestion.\n     If RTSP is used over a small-RTT LAN,\
    \ standard procedures for\n     optimizing initial TCP round trip estimates, such\
    \ as those used in\n     T/TCP (RFC 1644) [22], can be beneficial.\n   The Timestamp\
    \ header (Section 12.38) is used to avoid the\n   retransmission ambiguity problem\
    \ [23, p. 301] and obviates the need\n   for Karn's algorithm.\n   Each request\
    \ carries a sequence number in the CSeq header (Section\n   12.17), which is incremented\
    \ by one for each distinct request\n   transmitted. If a request is repeated because\
    \ of lack of\n   acknowledgement, the request MUST carry the original sequence\
    \ number\n   (i.e., the sequence number is not incremented).\n   Systems implementing\
    \ RTSP MUST support carrying RTSP over TCP and MAY\n   support UDP. The default\
    \ port for the RTSP server is 554 for both UDP\n   and TCP.\n   A number of RTSP\
    \ packets destined for the same control end point may\n   be packed into a single\
    \ lower-layer PDU or encapsulated into a TCP\n   stream. RTSP data MAY be interleaved\
    \ with RTP and RTCP packets.\n   Unlike HTTP, an RTSP message MUST contain a Content-Length\
    \ header\n   whenever that message contains a payload. Otherwise, an RTSP packet\n\
    \   is terminated with an empty line immediately following the last\n   message\
    \ header.\n"
- title: 10 Method Definitions
  contents:
  - "10 Method Definitions\n   The method token indicates the method to be performed\
    \ on the resource\n   identified by the Request-URI. The method is case-sensitive.\
    \  New\n   methods may be defined in the future. Method names may not start with\n\
    \   a $ character (decimal 24) and must be a token. Methods are\n   summarized\
    \ in Table 2.\n      method            direction        object     requirement\n\
    \      DESCRIBE          C->S             P,S        recommended\n      ANNOUNCE\
    \          C->S, S->C       P,S        optional\n      GET_PARAMETER     C->S,\
    \ S->C       P,S        optional\n      OPTIONS           C->S, S->C       P,S\
    \        required\n                                                    (S->C:\
    \ optional)\n      PAUSE             C->S             P,S        recommended\n\
    \      PLAY              C->S             P,S        required\n      RECORD  \
    \          C->S             P,S        optional\n      REDIRECT          S->C\
    \             P,S        optional\n      SETUP             C->S             S\
    \          required\n      SET_PARAMETER     C->S, S->C       P,S        optional\n\
    \      TEARDOWN          C->S             P,S        required\n      Table 2:\
    \ Overview of RTSP methods, their direction, and what\n      objects (P: presentation,\
    \ S: stream) they operate on\n   Notes on Table 2: PAUSE is recommended, but not\
    \ required in that a\n   fully functional server can be built that does not support\
    \ this\n   method, for example, for live feeds. If a server does not support a\n\
    \   particular method, it MUST return \"501 Not Implemented\" and a client\n \
    \  SHOULD not try this method again for this server.\n"
- title: 10.1 OPTIONS
  contents:
  - "10.1 OPTIONS\n   The behavior is equivalent to that described in [H9.2]. An OPTIONS\n\
    \   request may be issued at any time, e.g., if the client is about to\n   try\
    \ a nonstandard request. It does not influence server state.\n   Example:\n  \
    \   C->S:  OPTIONS * RTSP/1.0\n            CSeq: 1\n            Require: implicit-play\n\
    \            Proxy-Require: gzipped-messages\n     S->C:  RTSP/1.0 200 OK\n  \
    \          CSeq: 1\n            Public: DESCRIBE, SETUP, TEARDOWN, PLAY, PAUSE\n\
    \   Note that these are necessarily fictional features (one would hope\n   that\
    \ we would not purposefully overlook a truly useful feature just\n   so that we\
    \ could have a strong example in this section).\n"
- title: 10.2 DESCRIBE
  contents:
  - "10.2 DESCRIBE\n   The DESCRIBE method retrieves the description of a presentation\
    \ or\n   media object identified by the request URL from a server. It may use\n\
    \   the Accept header to specify the description formats that the client\n   understands.\
    \ The server responds with a description of the requested\n   resource. The DESCRIBE\
    \ reply-response pair constitutes the media\n   initialization phase of RTSP.\n\
    \   Example:\n     C->S: DESCRIBE rtsp://server.example.com/fizzle/foo RTSP/1.0\n\
    \           CSeq: 312\n           Accept: application/sdp, application/rtsl, application/mheg\n\
    \     S->C: RTSP/1.0 200 OK\n           CSeq: 312\n           Date: 23 Jan 1997\
    \ 15:35:06 GMT\n           Content-Type: application/sdp\n           Content-Length:\
    \ 376\n           v=0\n           o=mhandley 2890844526 2890842807 IN IP4 126.16.64.4\n\
    \           s=SDP Seminar\n           i=A Seminar on the session description protocol\n\
    \           u=http://www.cs.ucl.ac.uk/staff/M.Handley/sdp.03.ps\n           e=mjh@isi.edu\
    \ (Mark Handley)\n           c=IN IP4 224.2.17.12/127\n           t=2873397496\
    \ 2873404696\n           a=recvonly\n           m=audio 3456 RTP/AVP 0\n     \
    \      m=video 2232 RTP/AVP 31\n           m=whiteboard 32416 UDP WB\n       \
    \    a=orient:portrait\n   The DESCRIBE response MUST contain all media initialization\n\
    \   information for the resource(s) that it describes. If a media client\n   obtains\
    \ a presentation description from a source other than DESCRIBE\n   and that description\
    \ contains a complete set of media initialization\n   parameters, the client SHOULD\
    \ use those parameters and not then\n   request a description for the same media\
    \ via RTSP.\n   Additionally, servers SHOULD NOT use the DESCRIBE response as\
    \ a means\n   of media indirection.\n     Clear ground rules need to be established\
    \ so that clients have an\n     unambiguous means of knowing when to request media\
    \ initialization\n     information via DESCRIBE, and when not to. By forcing a\
    \ DESCRIBE\n     response to contain all media initialization for the set of streams\n\
    \     that it describes, and discouraging use of DESCRIBE for media\n     indirection,\
    \ we avoid looping problems that might result from other\n     approaches.\n \
    \    Media initialization is a requirement for any RTSP-based system,\n     but\
    \ the RTSP specification does not dictate that this must be done\n     via the\
    \ DESCRIBE method. There are three ways that an RTSP client\n     may receive\
    \ initialization information:\n     * via RTSP's DESCRIBE method;\n     * via\
    \ some other protocol (HTTP, email attachment, etc.);\n     * via the command\
    \ line or standard input (thus working as a browser\n       helper application\
    \ launched with an SDP file or other media\n       initialization format).\n \
    \    In the interest of practical interoperability, it is highly\n     recommended\
    \ that minimal servers support the DESCRIBE method, and\n     highly recommended\
    \ that minimal clients support the ability to act\n     as a \"helper application\"\
    \ that accepts a media initialization file\n     from standard input, command\
    \ line, and/or other means that are\n     appropriate to the operating environment\
    \ of the client.\n"
- title: 10.3 ANNOUNCE
  contents:
  - "10.3 ANNOUNCE\n   The ANNOUNCE method serves two purposes:\n   When sent from\
    \ client to server, ANNOUNCE posts the description of a\n   presentation or media\
    \ object identified by the request URL to a\n   server. When sent from server\
    \ to client, ANNOUNCE updates the session\n   description in real-time.\n   If\
    \ a new media stream is added to a presentation (e.g., during a live\n   presentation),\
    \ the whole presentation description should be sent\n   again, rather than just\
    \ the additional components, so that components\n   can be deleted.\n   Example:\n\
    \     C->S: ANNOUNCE rtsp://server.example.com/fizzle/foo RTSP/1.0\n         \
    \  CSeq: 312\n           Date: 23 Jan 1997 15:35:06 GMT\n           Session: 47112344\n\
    \           Content-Type: application/sdp\n           Content-Length: 332\n  \
    \         v=0\n           o=mhandley 2890844526 2890845468 IN IP4 126.16.64.4\n\
    \           s=SDP Seminar\n           i=A Seminar on the session description protocol\n\
    \           u=http://www.cs.ucl.ac.uk/staff/M.Handley/sdp.03.ps\n           e=mjh@isi.edu\
    \ (Mark Handley)\n           c=IN IP4 224.2.17.12/127\n           t=2873397496\
    \ 2873404696\n           a=recvonly\n           m=audio 3456 RTP/AVP 0\n     \
    \      m=video 2232 RTP/AVP 31\n     S->C: RTSP/1.0 200 OK\n           CSeq: 312\n"
- title: 10.4 SETUP
  contents:
  - "10.4 SETUP\n   The SETUP request for a URI specifies the transport mechanism\
    \ to be\n   used for the streamed media. A client can issue a SETUP request for\
    \ a\n   stream that is already playing to change transport parameters, which\n\
    \   a server MAY allow. If it does not allow this, it MUST respond with\n   error\
    \ \"455 Method Not Valid In This State\". For the benefit of any\n   intervening\
    \ firewalls, a client must indicate the transport\n   parameters even if it has\
    \ no influence over these parameters, for\n   example, where the server advertises\
    \ a fixed multicast address.\n     Since SETUP includes all transport initialization\
    \ information,\n     firewalls and other intermediate network devices (which need\
    \ this\n     information) are spared the more arduous task of parsing the\n  \
    \   DESCRIBE response, which has been reserved for media\n     initialization.\n\
    \   The Transport header specifies the transport parameters acceptable to\n  \
    \ the client for data transmission; the response will contain the\n   transport\
    \ parameters selected by the server.\n    C->S: SETUP rtsp://example.com/foo/bar/baz.rm\
    \ RTSP/1.0\n          CSeq: 302\n          Transport: RTP/AVP;unicast;client_port=4588-4589\n\
    \    S->C: RTSP/1.0 200 OK\n          CSeq: 302\n          Date: 23 Jan 1997 15:35:06\
    \ GMT\n          Session: 47112344\n          Transport: RTP/AVP;unicast;\n  \
    \          client_port=4588-4589;server_port=6256-6257\n   The server generates\
    \ session identifiers in response to SETUP\n   requests. If a SETUP request to\
    \ a server includes a session\n   identifier, the server MUST bundle this setup\
    \ request into the\n   existing session or return error \"459 Aggregate Operation\
    \ Not\n   Allowed\" (see Section 11.3.10).\n"
- title: 10.5 PLAY
  contents:
  - "10.5 PLAY\n   The PLAY method tells the server to start sending data via the\n\
    \   mechanism specified in SETUP. A client MUST NOT issue a PLAY request\n   until\
    \ any outstanding SETUP requests have been acknowledged as\n   successful.\n \
    \  The PLAY request positions the normal play time to the beginning of\n   the\
    \ range specified and delivers stream data until the end of the\n   range is reached.\
    \ PLAY requests may be pipelined (queued); a server\n   MUST queue PLAY requests\
    \ to be executed in order. That is, a PLAY\n   request arriving while a previous\
    \ PLAY request is still active is\n   delayed until the first has been completed.\n\
    \     This allows precise editing.\n   For example, regardless of how closely\
    \ spaced the two PLAY requests\n   in the example below arrive, the server will\
    \ first play seconds 10\n   through 15, then, immediately following, seconds 20\
    \ to 25, and\n   finally seconds 30 through the end.\n     C->S: PLAY rtsp://audio.example.com/audio\
    \ RTSP/1.0\n           CSeq: 835\n           Session: 12345678\n           Range:\
    \ npt=10-15\n     C->S: PLAY rtsp://audio.example.com/audio RTSP/1.0\n       \
    \    CSeq: 836\n           Session: 12345678\n           Range: npt=20-25\n  \
    \   C->S: PLAY rtsp://audio.example.com/audio RTSP/1.0\n           CSeq: 837\n\
    \           Session: 12345678\n           Range: npt=30-\n   See the description\
    \ of the PAUSE request for further examples.\n   A PLAY request without a Range\
    \ header is legal. It starts playing a\n   stream from the beginning unless the\
    \ stream has been paused. If a\n   stream has been paused via PAUSE, stream delivery\
    \ resumes at the\n   pause point. If a stream is playing, such a PLAY request\
    \ causes no\n   further action and can be used by the client to test server liveness.\n\
    \   The Range header may also contain a time parameter. This parameter\n   specifies\
    \ a time in UTC at which the playback should start. If the\n   message is received\
    \ after the specified time, playback is started\n   immediately. The time parameter\
    \ may be used to aid in synchronization\n   of streams obtained from different\
    \ sources.\n   For a on-demand stream, the server replies with the actual range\
    \ that\n   will be played back. This may differ from the requested range if\n\
    \   alignment of the requested range to valid frame boundaries is\n   required\
    \ for the media source. If no range is specified in the\n   request, the current\
    \ position is returned in the reply. The unit of\n   the range in the reply is\
    \ the same as that in the request.\n   After playing the desired range, the presentation\
    \ is automatically\n   paused, as if a PAUSE request had been issued.\n   The\
    \ following example plays the whole presentation starting at SMPTE\n   time code\
    \ 0:10:20 until the end of the clip. The playback is to start\n   at 15:36 on\
    \ 23 Jan 1997.\n     C->S: PLAY rtsp://audio.example.com/twister.en RTSP/1.0\n\
    \           CSeq: 833\n           Session: 12345678\n           Range: smpte=0:10:20-;time=19970123T153600Z\n\
    \     S->C: RTSP/1.0 200 OK\n           CSeq: 833\n           Date: 23 Jan 1997\
    \ 15:35:06 GMT\n           Range: smpte=0:10:22-;time=19970123T153600Z\n   For\
    \ playing back a recording of a live presentation, it may be\n   desirable to\
    \ use clock units:\n     C->S: PLAY rtsp://audio.example.com/meeting.en RTSP/1.0\n\
    \           CSeq: 835\n           Session: 12345678\n           Range: clock=19961108T142300Z-19961108T143520Z\n\
    \     S->C: RTSP/1.0 200 OK\n           CSeq: 835\n           Date: 23 Jan 1997\
    \ 15:35:06 GMT\n   A media server only supporting playback MUST support the npt\
    \ format\n   and MAY support the clock and smpte formats.\n"
- title: 10.6 PAUSE
  contents:
  - "10.6 PAUSE\n   The PAUSE request causes the stream delivery to be interrupted\n\
    \   (halted) temporarily. If the request URL names a stream, only\n   playback\
    \ and recording of that stream is halted. For example, for\n   audio, this is\
    \ equivalent to muting. If the request URL names a\n   presentation or group of\
    \ streams, delivery of all currently active\n   streams within the presentation\
    \ or group is halted. After resuming\n   playback or recording, synchronization\
    \ of the tracks MUST be\n   maintained. Any server resources are kept, though\
    \ servers MAY close\n   the session and free resources after being paused for\
    \ the duration\n   specified with the timeout parameter of the Session header\
    \ in the\n   SETUP message.\n   Example:\n     C->S: PAUSE rtsp://example.com/fizzle/foo\
    \ RTSP/1.0\n           CSeq: 834\n           Session: 12345678\n     S->C: RTSP/1.0\
    \ 200 OK\n           CSeq: 834\n           Date: 23 Jan 1997 15:35:06 GMT\n  \
    \ The PAUSE request may contain a Range header specifying when the\n   stream\
    \ or presentation is to be halted. We refer to this point as the\n   \"pause point\"\
    . The header must contain exactly one value rather than\n   a time range. The\
    \ normal play time for the stream is set to the pause\n   point. The pause request\
    \ becomes effective the first time the server\n   is encountering the time point\
    \ specified in any of the currently\n   pending PLAY requests. If the Range header\
    \ specifies a time outside\n   any currently pending PLAY requests, the error\
    \ \"457 Invalid Range\" is\n   returned. If a media unit (such as an audio or\
    \ video frame) starts\n   presentation at exactly the pause point, it is not played\
    \ or\n   recorded.  If the Range header is missing, stream delivery is\n   interrupted\
    \ immediately on receipt of the message and the pause point\n   is set to the\
    \ current normal play time.\n   A PAUSE request discards all queued PLAY requests.\
    \ However, the pause\n   point in the media stream MUST be maintained. A subsequent\
    \ PLAY\n   request without Range header resumes from the pause point.\n   For\
    \ example, if the server has play requests for ranges 10 to 15 and\n   20 to 29\
    \ pending and then receives a pause request for NPT 21, it\n   would start playing\
    \ the second range and stop at NPT 21. If the pause\n   request is for NPT 12\
    \ and the server is playing at NPT 13 serving the\n   first play request, the\
    \ server stops immediately. If the pause\n   request is for NPT 16, the server\
    \ stops after completing the first\n   play request and discards the second play\
    \ request.\n   As another example, if a server has received requests to play ranges\n\
    \   10 to 15 and then 13 to 20 (that is, overlapping ranges), the PAUSE\n   request\
    \ for NPT=14 would take effect while the server plays the first\n   range, with\
    \ the second PLAY request effectively being ignored,\n   assuming the PAUSE request\
    \ arrives before the server has started\n   playing the second, overlapping range.\
    \ Regardless of when the PAUSE\n   request arrives, it sets the NPT to 14.\n \
    \  If the server has already sent data beyond the time specified in the\n   Range\
    \ header, a PLAY would still resume at that point in time, as it\n   is assumed\
    \ that the client has discarded data after that point. This\n   ensures continuous\
    \ pause/play cycling without gaps.\n"
- title: 10.7 TEARDOWN
  contents:
  - "10.7 TEARDOWN\n   The TEARDOWN request stops the stream delivery for the given\
    \ URI,\n   freeing the resources associated with it. If the URI is the\n   presentation\
    \ URI for this presentation, any RTSP session identifier\n   associated with the\
    \ session is no longer valid. Unless all transport\n   parameters are defined\
    \ by the session description, a SETUP request\n   has to be issued before the\
    \ session can be played again.\n   Example:\n     C->S: TEARDOWN rtsp://example.com/fizzle/foo\
    \ RTSP/1.0\n           CSeq: 892\n           Session: 12345678\n     S->C: RTSP/1.0\
    \ 200 OK\n           CSeq: 892\n"
- title: 10.8 GET_PARAMETER
  contents:
  - "10.8 GET_PARAMETER\n   The GET_PARAMETER request retrieves the value of a parameter\
    \ of a\n   presentation or stream specified in the URI. The content of the reply\n\
    \   and response is left to the implementation. GET_PARAMETER with no\n   entity\
    \ body may be used to test client or server liveness (\"ping\").\n   Example:\n\
    \     S->C: GET_PARAMETER rtsp://example.com/fizzle/foo RTSP/1.0\n           CSeq:\
    \ 431\n           Content-Type: text/parameters\n           Session: 12345678\n\
    \           Content-Length: 15\n           packets_received\n           jitter\n\
    \     C->S: RTSP/1.0 200 OK\n           CSeq: 431\n           Content-Length:\
    \ 46\n           Content-Type: text/parameters\n           packets_received: 10\n\
    \           jitter: 0.3838\n     The \"text/parameters\" section is only an example\
    \ type for\n     parameter. This method is intentionally loosely defined with\
    \ the\n     intention that the reply content and response content will be\n  \
    \   defined after further experimentation.\n"
- title: 10.9 SET_PARAMETER
  contents:
  - "10.9 SET_PARAMETER\n     This method requests to set the value of a parameter\
    \ for a\n     presentation or stream specified by the URI.\n     A request SHOULD\
    \ only contain a single parameter to allow the client\n     to determine why a\
    \ particular request failed. If the request contains\n     several parameters,\
    \ the server MUST only act on the request if all of\n     the parameters can be\
    \ set successfully. A server MUST allow a\n     parameter to be set repeatedly\
    \ to the same value, but it MAY disallow\n     changing parameter values.\n  \
    \   Note: transport parameters for the media stream MUST only be set with\n  \
    \   the SETUP command.\n     Restricting setting transport parameters to SETUP\
    \ is for the\n     benefit of firewalls.\n     The parameters are split in a fine-grained\
    \ fashion so that there\n     can be more meaningful error indications. However,\
    \ it may make\n     sense to allow the setting of several parameters if an atomic\n\
    \     setting is desirable. Imagine device control where the client does\n   \
    \  not want the camera to pan unless it can also tilt to the right\n     angle\
    \ at the same time.\n   Example:\n     C->S: SET_PARAMETER rtsp://example.com/fizzle/foo\
    \ RTSP/1.0\n           CSeq: 421\n           Content-length: 20\n           Content-type:\
    \ text/parameters\n           barparam: barstuff\n     S->C: RTSP/1.0 451 Invalid\
    \ Parameter\n           CSeq: 421\n           Content-length: 10\n           Content-type:\
    \ text/parameters\n           barparam\n     The \"text/parameters\" section is\
    \ only an example type for\n     parameter. This method is intentionally loosely\
    \ defined with the\n     intention that the reply content and response content\
    \ will be\n     defined after further experimentation.\n"
- title: 10.10 REDIRECT
  contents:
  - "10.10 REDIRECT\n   A redirect request informs the client that it must connect\
    \ to another\n   server location. It contains the mandatory header Location, which\n\
    \   indicates that the client should issue requests for that URL. It may\n   contain\
    \ the parameter Range, which indicates when the redirection\n   takes effect.\
    \ If the client wants to continue to send or receive\n   media for this URI, the\
    \ client MUST issue a TEARDOWN request for the\n   current session and a SETUP\
    \ for the new session at the designated\n   host.\n   This example request redirects\
    \ traffic for this URI to the new server\n   at the given play time:\n     S->C:\
    \ REDIRECT rtsp://example.com/fizzle/foo RTSP/1.0\n           CSeq: 732\n    \
    \       Location: rtsp://bigserver.com:8001\n           Range: clock=19960213T143205Z-\n"
- title: 10.11 RECORD
  contents:
  - "10.11 RECORD\n   This method initiates recording a range of media data according\
    \ to\n   the presentation description. The timestamp reflects start and end\n\
    \   time (UTC). If no time range is given, use the start or end time\n   provided\
    \ in the presentation description. If the session has already\n   started, commence\
    \ recording immediately.\n   The server decides whether to store the recorded\
    \ data under the\n   request-URI or another URI. If the server does not use the\
    \ request-\n   URI, the response SHOULD be 201 (Created) and contain an entity\
    \ which\n   describes the status of the request and refers to the new resource,\n\
    \   and a Location header.\n   A media server supporting recording of live presentations\
    \ MUST\n   support the clock range format; the smpte format does not make sense.\n\
    \   In this example, the media server was previously invited to the\n   conference\
    \ indicated.\n     C->S: RECORD rtsp://example.com/meeting/audio.en RTSP/1.0\n\
    \           CSeq: 954\n           Session: 12345678\n           Conference: 128.16.64.19/32492374\n"
- title: 10.12 Embedded (Interleaved) Binary Data
  contents:
  - "10.12 Embedded (Interleaved) Binary Data\n   Certain firewall designs and other\
    \ circumstances may force a server\n   to interleave RTSP methods and stream data.\
    \ This interleaving should\n   generally be avoided unless necessary since it\
    \ complicates client and\n   server operation and imposes additional overhead.\
    \ Interleaved binary\n   data SHOULD only be used if RTSP is carried over TCP.\n\
    \   Stream data such as RTP packets is encapsulated by an ASCII dollar\n   sign\
    \ (24 hexadecimal), followed by a one-byte channel identifier,\n   followed by\
    \ the length of the encapsulated binary data as a binary,\n   two-byte integer\
    \ in network byte order. The stream data follows\n   immediately afterwards, without\
    \ a CRLF, but including the upper-layer\n   protocol headers. Each $ block contains\
    \ exactly one upper-layer\n   protocol data unit, e.g., one RTP packet.\n   The\
    \ channel identifier is defined in the Transport header with the\n   interleaved\
    \ parameter(Section 12.39).\n   When the transport choice is RTP, RTCP messages\
    \ are also interleaved\n   by the server over the TCP connection. As a default,\
    \ RTCP packets are\n   sent on the first available channel higher than the RTP\
    \ channel. The\n   client MAY explicitly request RTCP packets on another channel.\
    \ This\n   is done by specifying two channels in the interleaved parameter of\n\
    \   the Transport header(Section 12.39).\n     RTCP is needed for synchronization\
    \ when two or more streams are\n     interleaved in such a fashion. Also, this\
    \ provides a convenient way\n     to tunnel RTP/RTCP packets through the TCP control\
    \ connection when\n     required by the network configuration and transfer them\
    \ onto UDP\n     when possible.\n     C->S: SETUP rtsp://foo.com/bar.file RTSP/1.0\n\
    \           CSeq: 2\n           Transport: RTP/AVP/TCP;interleaved=0-1\n     S->C:\
    \ RTSP/1.0 200 OK\n           CSeq: 2\n           Date: 05 Jun 1997 18:57:18 GMT\n\
    \           Transport: RTP/AVP/TCP;interleaved=0-1\n           Session: 12345678\n\
    \     C->S: PLAY rtsp://foo.com/bar.file RTSP/1.0\n           CSeq: 3\n      \
    \     Session: 12345678\n     S->C: RTSP/1.0 200 OK\n           CSeq: 3\n    \
    \       Session: 12345678\n           Date: 05 Jun 1997 18:59:15 GMT\n       \
    \    RTP-Info: url=rtsp://foo.com/bar.file;\n             seq=232433;rtptime=972948234\n\
    \     S->C: $\\000{2 byte length}{\"length\" bytes data, w/RTP header}\n     S->C:\
    \ $\\000{2 byte length}{\"length\" bytes data, w/RTP header}\n     S->C: $\\001{2\
    \ byte length}{\"length\" bytes  RTCP packet}\n"
- title: 11 Status Code Definitions
  contents:
  - "11 Status Code Definitions\n   Where applicable, HTTP status [H10] codes are\
    \ reused. Status codes\n   that have the same meaning are not repeated here. See\
    \ Table 1 for a\n   listing of which status codes may be returned by which requests.\n"
- title: 11.1 Success 2xx
  contents:
  - '11.1 Success 2xx

    '
- title: 11.1.1 250 Low on Storage Space
  contents:
  - "11.1.1 250 Low on Storage Space\n   The server returns this warning after receiving\
    \ a RECORD request that\n   it may not be able to fulfill completely due to insufficient\
    \ storage\n   space. If possible, the server should use the Range header to\n\
    \   indicate what time period it may still be able to record. Since other\n  \
    \ processes on the server may be consuming storage space\n   simultaneously, a\
    \ client should take this only as an estimate.\n"
- title: 11.2 Redirection 3xx
  contents:
  - "11.2 Redirection 3xx\n   See [H10.3].\n   Within RTSP, redirection may be used\
    \ for load balancing or\n   redirecting stream requests to a server topologically\
    \ closer to the\n   client.  Mechanisms to determine topological proximity are\
    \ beyond the\n   scope of this specification.\n"
- title: 11.3 Client Error 4xx
  contents:
  - '11.3 Client Error 4xx

    '
- title: 11.3.1 405 Method Not Allowed
  contents:
  - "11.3.1 405 Method Not Allowed\n   The method specified in the request is not\
    \ allowed for the resource\n   identified by the request URI. The response MUST\
    \ include an Allow\n   header containing a list of valid methods for the requested\
    \ resource.\n   This status code is also to be used if a request attempts to use\
    \ a\n   method not indicated during SETUP, e.g., if a RECORD request is\n   issued\
    \ even though the mode parameter in the Transport header only\n   specified PLAY.\n"
- title: 11.3.2 451 Parameter Not Understood
  contents:
  - "11.3.2 451 Parameter Not Understood\n   The recipient of the request does not\
    \ support one or more parameters\n   contained in the request.\n"
- title: 11.3.3 452 Conference Not Found
  contents:
  - "11.3.3 452 Conference Not Found\n   The conference indicated by a Conference\
    \ header field is unknown to\n   the media server.\n"
- title: 11.3.4 453 Not Enough Bandwidth
  contents:
  - "11.3.4 453 Not Enough Bandwidth\n   The request was refused because there was\
    \ insufficient bandwidth.\n   This may, for example, be the result of a resource\
    \ reservation\n   failure.\n"
- title: 11.3.5 454 Session Not Found
  contents:
  - "11.3.5 454 Session Not Found\n   The RTSP session identifier in the Session header\
    \ is missing,\n   invalid, or has timed out.\n"
- title: 11.3.6 455 Method Not Valid in This State
  contents:
  - "11.3.6 455 Method Not Valid in This State\n   The client or server cannot process\
    \ this request in its current\n   state.  The response SHOULD contain an Allow\
    \ header to make error\n   recovery easier.\n"
- title: 11.3.7 456 Header Field Not Valid for Resource
  contents:
  - "11.3.7 456 Header Field Not Valid for Resource\n   The server could not act on\
    \ a required request header. For example,\n   if PLAY contains the Range header\
    \ field but the stream does not allow\n   seeking.\n"
- title: 11.3.8 457 Invalid Range
  contents:
  - "11.3.8 457 Invalid Range\n   The Range value given is out of bounds, e.g., beyond\
    \ the end of the\n   presentation.\n"
- title: 11.3.9 458 Parameter Is Read-Only
  contents:
  - "11.3.9 458 Parameter Is Read-Only\n   The parameter to be set by SET_PARAMETER\
    \ can be read but not\n   modified.\n"
- title: 11.3.10 459 Aggregate Operation Not Allowed
  contents:
  - "11.3.10 459 Aggregate Operation Not Allowed\n   The requested method may not\
    \ be applied on the URL in question since\n   it is an aggregate (presentation)\
    \ URL. The method may be applied on a\n   stream URL.\n"
- title: 11.3.11 460 Only Aggregate Operation Allowed
  contents:
  - "11.3.11 460 Only Aggregate Operation Allowed\n   The requested method may not\
    \ be applied on the URL in question since\n   it is not an aggregate (presentation)\
    \ URL. The method may be applied\n   on the presentation URL.\n"
- title: 11.3.12 461 Unsupported Transport
  contents:
  - "11.3.12 461 Unsupported Transport\n   The Transport field did not contain a supported\
    \ transport\n   specification.\n"
- title: 11.3.13 462 Destination Unreachable
  contents:
  - "11.3.13 462 Destination Unreachable\n   The data transmission channel could not\
    \ be established because the\n   client address could not be reached. This error\
    \ will most likely be\n   the result of a client attempt to place an invalid Destination\n\
    \   parameter in the Transport field.\n"
- title: 11.3.14 551 Option not supported
  contents:
  - "11.3.14 551 Option not supported\n   An option given in the Require or the Proxy-Require\
    \ fields was not\n   supported. The Unsupported header should be returned stating\
    \ the\n   option for which there is no support.\n"
- title: 12 Header Field Definitions
  contents:
  - "12 Header Field Definitions\n   HTTP/1.1 [2] or other, non-standard header fields\
    \ not listed here\n   currently have no well-defined meaning and SHOULD be ignored\
    \ by the\n   recipient.\n   Table 3 summarizes the header fields used by RTSP.\
    \ Type \"g\"\n   designates general request headers to be found in both requests\
    \ and\n   responses, type \"R\" designates request headers, type \"r\" designates\n\
    \   response headers, and type \"e\" designates entity header fields.\n   Fields\
    \ marked with \"req.\" in the column labeled \"support\" MUST be\n   implemented\
    \ by the recipient for a particular method, while fields\n   marked \"opt.\" are\
    \ optional. Note that not all fields marked \"req.\"\n   will be sent in every\
    \ request of this type. The \"req.\"  means only\n   that client (for response\
    \ headers) and server (for request headers)\n   MUST implement the fields. The\
    \ last column lists the method for which\n   this header field is meaningful;\
    \ the designation \"entity\" refers to\n   all methods that return a message body.\
    \ Within this specification,\n   DESCRIBE and GET_PARAMETER fall into this class.\n\
    \   Header               type   support   methods\n   Accept               R \
    \     opt.      entity\n   Accept-Encoding      R      opt.      entity\n   Accept-Language\
    \      R      opt.      all\n   Allow                r      opt.      all\n  \
    \ Authorization        R      opt.      all\n   Bandwidth            R      opt.\
    \      all\n   Blocksize            R      opt.      all but OPTIONS, TEARDOWN\n\
    \   Cache-Control        g      opt.      SETUP\n   Conference           R   \
    \   opt.      SETUP\n   Connection           g      req.      all\n   Content-Base\
    \         e      opt.      entity\n   Content-Encoding     e      req.      SET_PARAMETER\n\
    \   Content-Encoding     e      req.      DESCRIBE, ANNOUNCE\n   Content-Language\
    \     e      req.      DESCRIBE, ANNOUNCE\n   Content-Length       e      req.\
    \      SET_PARAMETER, ANNOUNCE\n   Content-Length       e      req.      entity\n\
    \   Content-Location     e      opt.      entity\n   Content-Type         e  \
    \    req.      SET_PARAMETER, ANNOUNCE\n   Content-Type         r      req.  \
    \    entity\n   CSeq                 g      req.      all\n   Date           \
    \      g      opt.      all\n   Expires              e      opt.      DESCRIBE,\
    \ ANNOUNCE\n   From                 R      opt.      all\n   If-Modified-Since\
    \    R      opt.      DESCRIBE, SETUP\n   Last-Modified        e      opt.   \
    \   entity\n   Proxy-Authenticate\n   Proxy-Require        R      req.      all\n\
    \   Public               r      opt.      all\n   Range                R     \
    \ opt.      PLAY, PAUSE, RECORD\n   Range                r      opt.      PLAY,\
    \ PAUSE, RECORD\n   Referer              R      opt.      all\n   Require    \
    \          R      req.      all\n   Retry-After          r      opt.      all\n\
    \   RTP-Info             r      req.      PLAY\n   Scale                Rr   \
    \  opt.      PLAY, RECORD\n   Session              Rr     req.      all but SETUP,\
    \ OPTIONS\n   Server               r      opt.      all\n   Speed            \
    \    Rr     opt.      PLAY\n   Transport            Rr     req.      SETUP\n \
    \  Unsupported          r      req.      all\n   User-Agent           R      opt.\
    \      all\n   Via                  g      opt.      all\n   WWW-Authenticate\
    \     r      opt.      all\n   Overview of RTSP header fields\n"
- title: 12.1 Accept
  contents:
  - "12.1 Accept\n   The Accept request-header field can be used to specify certain\n\
    \   presentation description content types which are acceptable for the\n   response.\n\
    \     The \"level\" parameter for presentation descriptions is properly\n    \
    \ defined as part of the MIME type registration, not here.\n   See [H14.1] for\
    \ syntax.\n   Example of use:\n     Accept: application/rtsl, application/sdp;level=2\n"
- title: 12.2 Accept-Encoding
  contents:
  - "12.2 Accept-Encoding\n     See [H14.3]\n"
- title: 12.3 Accept-Language
  contents:
  - "12.3 Accept-Language\n   See [H14.4]. Note that the language specified applies\
    \ to the\n   presentation description and any reason phrases, not the media\n\
    \   content.\n"
- title: 12.4 Allow
  contents:
  - "12.4 Allow\n   The Allow response header field lists the methods supported by\
    \ the\n   resource identified by the request-URI. The purpose of this field is\n\
    \   to strictly inform the recipient of valid methods associated with the\n  \
    \ resource. An Allow header field must be present in a 405 (Method not\n   allowed)\
    \ response.\n   Example of use:\n     Allow: SETUP, PLAY, RECORD, SET_PARAMETER\n"
- title: 12.5 Authorization
  contents:
  - "12.5 Authorization\n     See [H14.8]\n"
- title: 12.6 Bandwidth
  contents:
  - "12.6 Bandwidth\n   The Bandwidth request header field describes the estimated\
    \ bandwidth\n   available to the client, expressed as a positive integer and measured\n\
    \   in bits per second. The bandwidth available to the client may change\n   during\
    \ an RTSP session, e.g., due to modem retraining.\n   Bandwidth = \"Bandwidth\"\
    \ \":\" 1*DIGIT\n   Example:\n     Bandwidth: 4000\n"
- title: 12.7 Blocksize
  contents:
  - "12.7 Blocksize\n   This request header field is sent from the client to the media\
    \ server\n   asking the server for a particular media packet size. This packet\n\
    \   size does not include lower-layer headers such as IP, UDP, or RTP.\n   The\
    \ server is free to use a blocksize which is lower than the one\n   requested.\
    \ The server MAY truncate this packet size to the closest\n   multiple of the\
    \ minimum, media-specific block size, or override it\n   with the media-specific\
    \ size if necessary. The block size MUST be a\n   positive decimal number, measured\
    \ in octets. The server only returns\n   an error (416) if the value is syntactically\
    \ invalid.\n"
- title: 12.8 Cache-Control
  contents:
  - "12.8 Cache-Control\n   The Cache-Control general header field is used to specify\
    \ directives\n   that MUST be obeyed by all caching mechanisms along the\n   request/response\
    \ chain.\n   Cache directives must be passed through by a proxy or gateway\n \
    \  application, regardless of their significance to that application,\n   since\
    \ the directives may be applicable to all recipients along the\n   request/response\
    \ chain. It is not possible to specify a cache-\n   directive for a specific cache.\n\
    \   Cache-Control should only be specified in a SETUP request and its\n   response.\
    \ Note: Cache-Control does not govern the caching of\n   responses as for HTTP,\
    \ but rather of the stream identified by the\n   SETUP request.  Responses to\
    \ RTSP requests are not cacheable, except\n   for responses to DESCRIBE.\n   Cache-Control\
    \            =   \"Cache-Control\" \":\" 1#cache-directive\n   cache-directive\
    \          =   cache-request-directive\n                            |   cache-response-directive\n\
    \   cache-request-directive  =   \"no-cache\"\n                            | \
    \  \"max-stale\"\n                            |   \"min-fresh\"\n            \
    \                |   \"only-if-cached\"\n                            |   cache-extension\n\
    \   cache-response-directive =   \"public\"\n                            |   \"\
    private\"\n                            |   \"no-cache\"\n                    \
    \        |   \"no-transform\"\n                            |   \"must-revalidate\"\
    \n                            |   \"proxy-revalidate\"\n                     \
    \       |   \"max-age\" \"=\" delta-seconds\n                            |   cache-extension\n\
    \   cache-extension          =   token [ \"=\" ( token | quoted-string ) ]\n \
    \  no-cache:\n          Indicates that the media stream MUST NOT be cached anywhere.\n\
    \          This allows an origin server to prevent caching even by caches\n  \
    \        that have been configured to return stale responses to client\n     \
    \     requests.\n   public:\n          Indicates that the media stream is cacheable\
    \ by any cache.\n   private:\n          Indicates that the media stream is intended\
    \ for a single user\n          and MUST NOT be cached by a shared cache. A private\
    \ (non-\n          shared) cache may cache the media stream.\n   no-transform:\n\
    \          An intermediate cache (proxy) may find it useful to convert\n     \
    \     the media type of a certain stream. A proxy might, for\n          example,\
    \ convert between video formats to save cache space or\n          to reduce the\
    \ amount of traffic on a slow link. Serious\n          operational problems may\
    \ occur, however, when these\n          transformations have been applied to streams\
    \ intended for\n          certain kinds of applications. For example, applications\
    \ for\n          medical imaging, scientific data analysis and those using\n \
    \         end-to-end authentication all depend on receiving a stream\n       \
    \   that is bit-for-bit identical to the original entity-body.\n          Therefore,\
    \ if a response includes the no-transform directive,\n          an intermediate\
    \ cache or proxy MUST NOT change the encoding of\n          the stream. Unlike\
    \ HTTP, RTSP does not provide for partial\n          transformation at this point,\
    \ e.g., allowing translation into\n          a different language.\n   only-if-cached:\n\
    \          In some cases, such as times of extremely poor network\n          connectivity,\
    \ a client may want a cache to return only those\n          media streams that\
    \ it currently has stored, and not to receive\n          these from the origin\
    \ server. To do this, the client may\n          include the only-if-cached directive\
    \ in a request. If it\n          receives this directive, a cache SHOULD either\
    \ respond using a\n          cached media stream that is consistent with the other\n\
    \          constraints of the request, or respond with a 504 (Gateway\n      \
    \    Timeout) status. However, if a group of caches is being\n          operated\
    \ as a unified system with good internal connectivity,\n          such a request\
    \ MAY be forwarded within that group of caches.\n   max-stale:\n          Indicates\
    \ that the client is willing to accept a media stream\n          that has exceeded\
    \ its expiration time. If max-stale is\n          assigned a value, then the client\
    \ is willing to accept a\n          response that has exceeded its expiration\
    \ time by no more than\n          the specified number of seconds. If no value\
    \ is assigned to\n          max-stale, then the client is willing to accept a\
    \ stale\n          response of any age.\n   min-fresh:\n          Indicates that\
    \ the client is willing to accept a media stream\n          whose freshness lifetime\
    \ is no less than its current age plus\n          the specified time in seconds.\
    \ That is, the client wants a\n          response that will still be fresh for\
    \ at least the specified\n          number of seconds.\n   must-revalidate:\n\
    \          When the must-revalidate directive is present in a SETUP\n        \
    \  response received by a cache, that cache MUST NOT use the\n          entry\
    \ after it becomes stale to respond to a subsequent\n          request without\
    \ first revalidating it with the origin server.\n          That is, the cache\
    \ must do an end-to-end revalidation every\n          time, if, based solely on\
    \ the origin server's Expires, the\n          cached response is stale.)\n"
- title: 12.9 Conference
  contents:
  - "12.9 Conference\n   This request header field establishes a logical connection\
    \ between a\n   pre-established conference and an RTSP stream. The conference-id\
    \ must\n   not be changed for the same RTSP session.\n   Conference = \"Conference\"\
    \ \":\" conference-id Example:\n     Conference: 199702170042.SAA08642@obiwan.arl.wustl.edu%20Starr\n\
    \   A response code of 452 (452 Conference Not Found) is returned if the\n   conference-id\
    \ is not valid.\n"
- title: 12.10 Connection
  contents:
  - "12.10 Connection\n   See [H14.10]\n"
- title: 12.11 Content-Base
  contents:
  - "12.11 Content-Base\n   See [H14.11]\n"
- title: 12.12 Content-Encoding
  contents:
  - "12.12 Content-Encoding\n   See [H14.12]\n"
- title: 12.13 Content-Language
  contents:
  - "12.13 Content-Language\n   See [H14.13]\n"
- title: 12.14 Content-Length
  contents:
  - "12.14 Content-Length\n   This field contains the length of the content of the\
    \ method (i.e.\n   after the double CRLF following the last header). Unlike HTTP,\
    \ it\n   MUST be included in all messages that carry content beyond the header\n\
    \   portion of the message. If it is missing, a default value of zero is\n   assumed.\
    \ It is interpreted according to [H14.14].\n"
- title: 12.15 Content-Location
  contents:
  - "12.15 Content-Location\n   See [H14.15]\n"
- title: 12.16 Content-Type
  contents:
  - "12.16 Content-Type\n   See [H14.18]. Note that the content types suitable for\
    \ RTSP are\n   likely to be restricted in practice to presentation descriptions\
    \ and\n   parameter-value types.\n"
- title: 12.17 CSeq
  contents:
  - "12.17 CSeq\n   The CSeq field specifies the sequence number for an RTSP request-\n\
    \   response pair. This field MUST be present in all requests and\n   responses.\
    \ For every RTSP request containing the given sequence\n   number, there will\
    \ be a corresponding response having the same\n   number.  Any retransmitted request\
    \ must contain the same sequence\n   number as the original (i.e. the sequence\
    \ number is not incremented\n   for retransmissions of the same request).\n"
- title: 12.18 Date
  contents:
  - "12.18 Date\n   See [H14.19].\n"
- title: 12.19 Expires
  contents:
  - "12.19 Expires\n   The Expires entity-header field gives a date and time after\
    \ which the\n   description or media-stream should be considered stale. The\n\
    \   interpretation depends on the method:\n   DESCRIBE response:\n          The\
    \ Expires header indicates a date and time after which the\n          description\
    \ should be considered stale.\n   A stale cache entry may not normally be returned\
    \ by a cache (either a\n   proxy cache or an user agent cache) unless it is first\
    \ validated with\n   the origin server (or with an intermediate cache that has\
    \ a fresh\n   copy of the entity). See section 13 for further discussion of the\n\
    \   expiration model.\n   The presence of an Expires field does not imply that\
    \ the original\n   resource will change or cease to exist at, before, or after\
    \ that\n   time.\n   The format is an absolute date and time as defined by HTTP-date\
    \ in\n   [H3.3]; it MUST be in RFC1123-date format:\n   Expires = \"Expires\"\
    \ \":\" HTTP-date\n   An example of its use is\n     Expires: Thu, 01 Dec 1994\
    \ 16:00:00 GMT\n   RTSP/1.0 clients and caches MUST treat other invalid date formats,\n\
    \   especially including the value \"0\", as having occurred in the past\n   (i.e.,\
    \ \"already expired\").\n   To mark a response as \"already expired,\" an origin\
    \ server should use\n   an Expires date that is equal to the Date header value.\
    \ To mark a\n   response as \"never expires,\" an origin server should use an\
    \ Expires\n   date approximately one year from the time the response is sent.\n\
    \   RTSP/1.0 servers should not send Expires dates more than one year in\n   the\
    \ future.\n   The presence of an Expires header field with a date value of some\n\
    \   time in the future on a media stream that otherwise would by default\n   be\
    \ non-cacheable indicates that the media stream is cacheable, unless\n   indicated\
    \ otherwise by a Cache-Control header field (Section 12.8).\n"
- title: 12.20 From
  contents:
  - "12.20 From\n   See [H14.22].\n"
- title: 12.21 Host
  contents:
  - "12.21 Host\n   This HTTP request header field is not needed for RTSP. It should\
    \ be\n   silently ignored if sent.\n"
- title: 12.22 If-Match
  contents:
  - "12.22 If-Match\n   See [H14.25].\n   This field is especially useful for ensuring\
    \ the integrity of the\n   presentation description, in both the case where it\
    \ is fetched via\n   means external to RTSP (such as HTTP), or in the case where\
    \ the\n   server implementation is guaranteeing the integrity of the\n   description\
    \ between the time of the DESCRIBE message and the SETUP\n   message.\n   The\
    \ identifier is an opaque identifier, and thus is not specific to\n   any particular\
    \ session description language.\n"
- title: 12.23 If-Modified-Since
  contents:
  - "12.23 If-Modified-Since\n   The If-Modified-Since request-header field is used\
    \ with the DESCRIBE\n   and SETUP methods to make them conditional. If the requested\
    \ variant\n   has not been modified since the time specified in this field, a\n\
    \   description will not be returned from the server (DESCRIBE) or a\n   stream\
    \ will not be set up (SETUP). Instead, a 304 (not modified)\n   response will\
    \ be returned without any message-body.\n   If-Modified-Since = \"If-Modified-Since\"\
    \ \":\" HTTP-date\n   An example of the field is:\n     If-Modified-Since: Sat,\
    \ 29 Oct 1994 19:43:31 GMT\n"
- title: 12.24 Last-Modified
  contents:
  - "12.24 Last-Modified\n   The Last-Modified entity-header field indicates the date\
    \ and time at\n   which the origin server believes the presentation description\
    \ or\n   media stream was last modified. See [H14.29]. For the methods\n   DESCRIBE\
    \ or ANNOUNCE, the header field indicates the last\n   modification date and time\
    \ of the description, for SETUP that of the\n   media stream.\n"
- title: 12.25 Location
  contents:
  - "12.25 Location\n   See [H14.30].\n"
- title: 12.26 Proxy-Authenticate
  contents:
  - "12.26 Proxy-Authenticate\n   See [H14.33].\n"
- title: 12.27 Proxy-Require
  contents:
  - "12.27 Proxy-Require\n   The Proxy-Require header is used to indicate proxy-sensitive\
    \ features\n   that MUST be supported by the proxy. Any Proxy-Require header\n\
    \   features that are not supported by the proxy MUST be negatively\n   acknowledged\
    \ by the proxy to the client if not supported. Servers\n   should treat this field\
    \ identically to the Require field.\n   See Section 12.32 for more details on\
    \ the mechanics of this message\n   and a usage example.\n"
- title: 12.28 Public
  contents:
  - "12.28 Public\n   See [H14.35].\n"
- title: 12.29 Range
  contents:
  - "12.29 Range\n   This request and response header field specifies a range of time.\n\
    \   The range can be specified in a number of units. This specification\n   defines\
    \ the smpte (Section 3.5), npt (Section 3.6), and clock\n   (Section 3.7) range\
    \ units. Within RTSP, byte ranges [H14.36.1] are\n   not meaningful and MUST NOT\
    \ be used. The header may also contain a\n   time parameter in UTC, specifying\
    \ the time at which the operation is\n   to be made effective. Servers supporting\
    \ the Range header MUST\n   understand the NPT range format and SHOULD understand\
    \ the SMPTE range\n   format. The Range response header indicates what range of\
    \ time is\n   actually being played or recorded. If the Range header is given\
    \ in a\n   time format that is not understood, the recipient should return \"\
    501\n   Not Implemented\".\n   Ranges are half-open intervals, including the lower\
    \ point, but\n   excluding the upper point. In other words, a range of a-b starts\n\
    \   exactly at time a, but stops just before b. Only the start time of a\n   media\
    \ unit such as a video or audio frame is relevant. As an example,\n   assume that\
    \ video frames are generated every 40 ms. A range of 10.0-\n   10.1 would include\
    \ a video frame starting at 10.0 or later time and\n   would include a video frame\
    \ starting at 10.08, even though it lasted\n   beyond the interval. A range of\
    \ 10.0-10.08, on the other hand, would\n   exclude the frame at 10.08.\n   Range\
    \            = \"Range\" \":\" 1\\#ranges-specifier\n                        \
    \  [ \";\" \"time\" \"=\" utc-time ]\n   ranges-specifier = npt-range | utc-range\
    \ | smpte-range\n   Example:\n     Range: clock=19960213T143205Z-;time=19970123T143720Z\n\
    \     The notation is similar to that used for the HTTP/1.1 [2] byte-\n     range\
    \ header. It allows clients to select an excerpt from the media\n     object,\
    \ and to play from a given point to the end as well as from\n     the current\
    \ location to a given point. The start of playback can be\n     scheduled for\
    \ any time in the future, although a server may refuse\n     to keep server resources\
    \ for extended idle periods.\n"
- title: 12.30 Referer
  contents:
  - "12.30 Referer\n   See [H14.37]. The URL refers to that of the presentation description,\n\
    \   typically retrieved via HTTP.\n"
- title: 12.31 Retry-After
  contents:
  - "12.31 Retry-After\n   See [H14.38].\n"
- title: 12.32 Require
  contents:
  - "12.32 Require\n   The Require header is used by clients to query the server about\n\
    \   options that it may or may not support. The server MUST respond to\n   this\
    \ header by using the Unsupported header to negatively acknowledge\n   those options\
    \ which are NOT supported.\n     This is to make sure that the client-server interaction\
    \ will\n     proceed without delay when all options are understood by both\n \
    \    sides, and only slow down if options are not understood (as in the\n    \
    \ case above). For a well-matched client-server pair, the interaction\n     proceeds\
    \ quickly, saving a round-trip often required by negotiation\n     mechanisms.\
    \ In addition, it also removes state ambiguity when the\n     client requires\
    \ features that the server does not understand.\n   Require =   \"Require\" \"\
    :\"  1#option-tag\n   Example:\n     C->S:   SETUP rtsp://server.com/foo/bar/baz.rm\
    \ RTSP/1.0\n             CSeq: 302\n             Require: funky-feature\n    \
    \         Funky-Parameter: funkystuff\n     S->C:   RTSP/1.0 551 Option not supported\n\
    \             CSeq: 302\n             Unsupported: funky-feature\n     C->S: \
    \  SETUP rtsp://server.com/foo/bar/baz.rm RTSP/1.0\n             CSeq: 303\n \
    \    S->C:   RTSP/1.0 200 OK\n             CSeq: 303\n   In this example, \"funky-feature\"\
    \ is the feature tag which indicates\n   to the client that the fictional Funky-Parameter\
    \ field is required.\n   The relationship between \"funky-feature\" and Funky-Parameter\
    \ is not\n   communicated via the RTSP exchange, since that relationship is an\n\
    \   immutable property of \"funky-feature\" and thus should not be\n   transmitted\
    \ with every exchange.\n   Proxies and other intermediary devices SHOULD ignore\
    \ features that\n   are not understood in this field. If a particular extension\
    \ requires\n   that intermediate devices support it, the extension should be tagged\n\
    \   in the Proxy-Require field instead (see Section 12.27).\n"
- title: 12.33 RTP-Info
  contents:
  - "12.33 RTP-Info\n   This field is used to set RTP-specific parameters in the PLAY\n\
    \   response.\n   url:\n          Indicates the stream URL which for which the\
    \ following RTP\n          parameters correspond.\n   seq:\n          Indicates\
    \ the sequence number of the first packet of the\n          stream. This allows\
    \ clients to gracefully deal with packets\n          when seeking. The client\
    \ uses this value to differentiate\n          packets that originated before the\
    \ seek from packets that\n          originated after the seek.\n   rtptime:\n\
    \          Indicates the RTP timestamp corresponding to the time value in\n  \
    \        the Range response header. (Note: For aggregate control, a\n        \
    \  particular stream may not actually generate a packet for the\n          Range\
    \ time value returned or implied. Thus, there is no\n          guarantee that\
    \ the packet with the sequence number indicated\n          by seq actually has\
    \ the timestamp indicated by rtptime.) The\n          client uses this value to\
    \ calculate the mapping of RTP time to\n          NPT.\n     A mapping from RTP\
    \ timestamps to NTP timestamps (wall clock) is\n     available via RTCP. However,\
    \ this information is not sufficient to\n     generate a mapping from RTP timestamps\
    \ to NPT. Furthermore, in\n     order to ensure that this information is available\
    \ at the necessary\n     time (immediately at startup or after a seek), and that\
    \ it is\n     delivered reliably, this mapping is placed in the RTSP control\n\
    \     channel.\n     In order to compensate for drift for long, uninterrupted\n\
    \     presentations, RTSP clients should additionally map NPT to NTP,\n     using\
    \ initial RTCP sender reports to do the mapping, and later\n     reports to check\
    \ drift against the mapping.\n   Syntax:\n   RTP-Info        = \"RTP-Info\" \"\
    :\" 1#stream-url 1*parameter\n   stream-url      = \"url\" \"=\" url\n   parameter\
    \       = \";\" \"seq\" \"=\" 1*DIGIT\n                   | \";\" \"rtptime\"\
    \ \"=\" 1*DIGIT\n   Example:\n     RTP-Info: url=rtsp://foo.com/bar.avi/streamid=0;seq=45102,\n\
    \               url=rtsp://foo.com/bar.avi/streamid=1;seq=30211\n"
- title: 12.34 Scale
  contents:
  - "12.34 Scale\n   A scale value of 1 indicates normal play or record at the normal\n\
    \   forward viewing rate. If not 1, the value corresponds to the rate\n   with\
    \ respect to normal viewing rate. For example, a ratio of 2\n   indicates twice\
    \ the normal viewing rate (\"fast forward\") and a ratio\n   of 0.5 indicates\
    \ half the normal viewing rate. In other words, a\n   ratio of 2 has normal play\
    \ time increase at twice the wallclock rate.\n   For every second of elapsed (wallclock)\
    \ time, 2 seconds of content\n   will be delivered. A negative value indicates\
    \ reverse direction.\n   Unless requested otherwise by the Speed parameter, the\
    \ data rate\n   SHOULD not be changed. Implementation of scale changes depends\
    \ on the\n   server and media type. For video, a server may, for example, deliver\n\
    \   only key frames or selected key frames. For audio, it may time-scale\n   the\
    \ audio while preserving pitch or, less desirably, deliver\n   fragments of audio.\n\
    \   The server should try to approximate the viewing rate, but may\n   restrict\
    \ the range of scale values that it supports. The response\n   MUST contain the\
    \ actual scale value chosen by the server.\n   If the request contains a Range\
    \ parameter, the new scale value will\n   take effect at that time.\n   Scale\
    \ = \"Scale\" \":\" [ \"-\" ] 1*DIGIT [ \".\" *DIGIT ]\n   Example of playing\
    \ in reverse at 3.5 times normal rate:\n     Scale: -3.5\n"
- title: 12.35 Speed
  contents:
  - "12.35 Speed\n   This request header fields parameter requests the server to deliver\n\
    \   data to the client at a particular speed, contingent on the server's\n   ability\
    \ and desire to serve the media stream at the given speed.\n   Implementation\
    \ by the server is OPTIONAL. The default is the bit rate\n   of the stream.\n\
    \   The parameter value is expressed as a decimal ratio, e.g., a value of\n  \
    \ 2.0 indicates that data is to be delivered twice as fast as normal. A\n   speed\
    \ of zero is invalid. If the request contains a Range parameter,\n   the new speed\
    \ value will take effect at that time.\n   Speed = \"Speed\" \":\" 1*DIGIT [ \"\
    .\" *DIGIT ]\n   Example:\n     Speed: 2.5\n   Use of this field changes the bandwidth\
    \ used for data delivery. It is\n   meant for use in specific circumstances where\
    \ preview of the\n   presentation at a higher or lower rate is necessary. Implementors\n\
    \   should keep in mind that bandwidth for the session may be negotiated\n   beforehand\
    \ (by means other than RTSP), and therefore re-negotiation\n   may be necessary.\
    \ When data is delivered over UDP, it is highly\n   recommended that means such\
    \ as RTCP be used to track packet loss\n   rates.\n"
- title: 12.36 Server
  contents:
  - "12.36 Server\n   See [H14.39]\n"
- title: 12.37 Session
  contents:
  - "12.37 Session\n   This request and response header field identifies an RTSP session\n\
    \   started by the media server in a SETUP response and concluded by\n   TEARDOWN\
    \ on the presentation URL. The session identifier is chosen by\n   the media server\
    \ (see Section 3.4). Once a client receives a Session\n   identifier, it MUST\
    \ return it for any request related to that\n   session.  A server does not have\
    \ to set up a session identifier if it\n   has other means of identifying a session,\
    \ such as dynamically\n   generated URLs.\n Session  = \"Session\" \":\" session-id\
    \ [ \";\" \"timeout\" \"=\" delta-seconds ]\n   The timeout parameter is only\
    \ allowed in a response header. The\n   server uses it to indicate to the client\
    \ how long the server is\n   prepared to wait between RTSP commands before closing\
    \ the session due\n   to lack of activity (see Section A). The timeout is measured\
    \ in\n   seconds, with a default of 60 seconds (1 minute).\n   Note that a session\
    \ identifier identifies a RTSP session across\n   transport sessions or connections.\
    \ Control messages for more than one\n   RTSP URL may be sent within a single\
    \ RTSP session. Hence, it is\n   possible that clients use the same session for\
    \ controlling many\n   streams constituting a presentation, as long as all the\
    \ streams come\n   from the same server. (See example in Section 14). However,\
    \ multiple\n   \"user\" sessions for the same URL from the same client MUST use\n\
    \   different session identifiers.\n     The session identifier is needed to distinguish\
    \ several delivery\n     requests for the same URL coming from the same client.\n\
    \   The response 454 (Session Not Found) is returned if the session\n   identifier\
    \ is invalid.\n"
- title: 12.38 Timestamp
  contents:
  - "12.38 Timestamp\n   The timestamp general header describes when the client sent\
    \ the\n   request to the server. The value of the timestamp is of significance\n\
    \   only to the client and may use any timescale. The server MUST echo\n   the\
    \ exact same value and MAY, if it has accurate information about\n   this, add\
    \ a floating point number indicating the number of seconds\n   that has elapsed\
    \ since it has received the request. The timestamp is\n   used by the client to\
    \ compute the round-trip time to the server so\n   that it can adjust the timeout\
    \ value for retransmissions.\n   Timestamp  = \"Timestamp\" \":\" *(DIGIT) [ \"\
    .\" *(DIGIT) ] [ delay ]\n   delay      =  *(DIGIT) [ \".\" *(DIGIT) ]\n"
- title: 12.39 Transport
  contents:
  - "12.39 Transport\n   This request header indicates which transport protocol is\
    \ to be used\n   and configures its parameters such as destination address,\n\
    \   compression, multicast time-to-live and destination port for a single\n  \
    \ stream. It sets those values not already determined by a presentation\n   description.\n\
    \   Transports are comma separated, listed in order of preference.\n   Parameters\
    \ may be added to each transport, separated by a semicolon.\n   The Transport\
    \ header MAY also be used to change certain transport\n   parameters. A server\
    \ MAY refuse to change parameters of an existing\n   stream.\n   The server MAY\
    \ return a Transport response header in the response to\n   indicate the values\
    \ actually chosen.\n   A Transport request header field may contain a list of\
    \ transport\n   options acceptable to the client. In that case, the server MUST\n\
    \   return a single option which was actually chosen.\n   The syntax for the transport\
    \ specifier is\n       transport/profile/lower-transport.\n   The default value\
    \ for the \"lower-transport\" parameters is specific to\n   the profile. For RTP/AVP,\
    \ the default is UDP.\n   Below are the configuration parameters associated with\
    \ transport:\n   General parameters:\n   unicast | multicast:\n          mutually\
    \ exclusive indication of whether unicast or multicast\n          delivery will\
    \ be attempted. Default value is multicast.\n          Clients that are capable\
    \ of handling both unicast and\n          multicast transmission MUST indicate\
    \ such capability by\n          including two full transport-specs with separate\
    \ parameters\n          for each.\n   destination:\n          The address to which\
    \ a stream will be sent. The client may\n          specify the multicast address\
    \ with the destination parameter.\n          To avoid becoming the unwitting perpetrator\
    \ of a remote-\n          controlled denial-of-service attack, a server SHOULD\n\
    \          authenticate the client and SHOULD log such attempts before\n     \
    \     allowing the client to direct a media stream to an address not\n       \
    \   chosen by the server. This is particularly important if RTSP\n          commands\
    \ are issued via UDP, but implementations cannot rely\n          on TCP as reliable\
    \ means of client identification by itself. A\n          server SHOULD not allow\
    \ a client to direct media streams to an\n          address that differs from\
    \ the address commands are coming\n          from.\n   source:\n          If the\
    \ source address for the stream is different than can be\n          derived from\
    \ the RTSP endpoint address (the server in playback\n          or the client in\
    \ recording), the source MAY be specified.\n     This information may also be\
    \ available through SDP. However, since\n     this is more a feature of transport\
    \ than media initialization, the\n     authoritative source for this information\
    \ should be in the SETUP\n     response.\n   layers:\n          The number of\
    \ multicast layers to be used for this media\n          stream. The layers are\
    \ sent to consecutive addresses starting\n          at the destination address.\n\
    \   mode:\n          The mode parameter indicates the methods to be supported\
    \ for\n          this session. Valid values are PLAY and RECORD. If not\n    \
    \      provided, the default is PLAY.\n   append:\n          If the mode parameter\
    \ includes RECORD, the append parameter\n          indicates that the media data\
    \ should append to the existing\n          resource rather than overwrite it.\
    \ If appending is requested\n          and the server does not support this, it\
    \ MUST refuse the\n          request rather than overwrite the resource identified\
    \ by the\n          URI. The append parameter is ignored if the mode parameter\n\
    \          does not contain RECORD.\n   interleaved:\n          The interleaved\
    \ parameter implies mixing the media stream with\n          the control stream\
    \ in whatever protocol is being used by the\n          control stream, using the\
    \ mechanism defined in Section 10.12.\n          The argument provides the channel\
    \ number to be used in the $\n          statement. This parameter may be specified\
    \ as a range, e.g.,\n          interleaved=4-5 in cases where the transport choice\
    \ for the\n          media stream requires it.\n     This allows RTP/RTCP to be\
    \ handled similarly to the way that it is\n     done with UDP, i.e., one channel\
    \ for RTP and the other for RTCP.\n   Multicast specific:\n   ttl:\n         \
    \ multicast time-to-live\n   RTP Specific:\n   port:\n          This parameter\
    \ provides the RTP/RTCP port pair for a multicast\n          session. It is specified\
    \ as a range, e.g., port=3456-3457.\n   client_port:\n          This parameter\
    \ provides the unicast RTP/RTCP port pair on\n          which the client has chosen\
    \ to receive media data and control\n          information.  It is specified as\
    \ a range, e.g.,\n          client_port=3456-3457.\n   server_port:\n        \
    \  This parameter provides the unicast RTP/RTCP port pair on\n          which\
    \ the server has chosen to receive media data and control\n          information.\
    \  It is specified as a range, e.g.,\n          server_port=3456-3457.\n   ssrc:\n\
    \          The ssrc parameter indicates the RTP SSRC [24, Sec. 3] value\n    \
    \      that should be (request) or will be (response) used by the\n          media\
    \ server. This parameter is only valid for unicast\n          transmission. It\
    \ identifies the synchronization source to be\n          associated with the media\
    \ stream.\n   Transport           =    \"Transport\" \":\"\n                 \
    \           1\\#transport-spec\n   transport-spec      =    transport-protocol/profile[/lower-transport]\n\
    \                            *parameter\n   transport-protocol  =    \"RTP\"\n\
    \   profile             =    \"AVP\"\n   lower-transport     =    \"TCP\" | \"\
    UDP\"\n   parameter           =    ( \"unicast\" | \"multicast\" )\n         \
    \              |    \";\" \"destination\" [ \"=\" address ]\n                \
    \       |    \";\" \"interleaved\" \"=\" channel [ \"-\" channel ]\n         \
    \              |    \";\" \"append\"\n                       |    \";\" \"ttl\"\
    \ \"=\" ttl\n                       |    \";\" \"layers\" \"=\" 1*DIGIT\n    \
    \                   |    \";\" \"port\" \"=\" port [ \"-\" port ]\n          \
    \             |    \";\" \"client_port\" \"=\" port [ \"-\" port ]\n         \
    \              |    \";\" \"server_port\" \"=\" port [ \"-\" port ]\n        \
    \               |    \";\" \"ssrc\" \"=\" ssrc\n                       |    \"\
    ;\" \"mode\" = <\"> 1\\#mode <\">\n   ttl                 =    1*3(DIGIT)\n  \
    \ port                =    1*5(DIGIT)\n   ssrc                =    8*8(HEX)\n\
    \   channel             =    1*3(DIGIT)\n   address             =    host\n  \
    \ mode                =    <\"> *Method <\"> | Method\n   Example:\n     Transport:\
    \ RTP/AVP;multicast;ttl=127;mode=\"PLAY\",\n                RTP/AVP;unicast;client_port=3456-3457;mode=\"\
    PLAY\"\n     The Transport header is restricted to describing a single RTP\n \
    \    stream. (RTSP can also control multiple streams as a single\n     entity.)\
    \ Making it part of RTSP rather than relying on a multitude\n     of session description\
    \ formats greatly simplifies designs of\n     firewalls.\n"
- title: 12.40 Unsupported
  contents:
  - "12.40 Unsupported\n   The Unsupported response header lists the features not\
    \ supported by\n   the server. In the case where the feature was specified via\
    \ the\n   Proxy-Require field (Section 12.32), if there is a proxy on the path\n\
    \   between the client and the server, the proxy MUST insert a message\n   reply\
    \ with an error message \"551 Option Not Supported\".\n   See Section 12.32 for\
    \ a usage example.\n"
- title: 12.41 User-Agent
  contents:
  - "12.41 User-Agent\n   See [H14.42]\n"
- title: 12.42 Vary
  contents:
  - "12.42 Vary\n   See [H14.43]\n"
- title: 12.43 Via
  contents:
  - "12.43 Via\n   See [H14.44].\n"
- title: 12.44 WWW-Authentica
  contents:
  - "12.44 WWW-Authentica\n   See [H14.46].\n"
- title: 13 Caching
  contents:
  - "13 Caching\n   In HTTP, response-request pairs are cached. RTSP differs\n   significantly\
    \ in that respect. Responses are not cacheable, with the\n   exception of the\
    \ presentation description returned by DESCRIBE or\n   included with ANNOUNCE.\
    \ (Since the responses for anything but\n   DESCRIBE and GET_PARAMETER do not\
    \ return any data, caching is not\n   really an issue for these requests.) However,\
    \ it is desirable for the\n   continuous media data, typically delivered out-of-band\
    \ with respect\n   to RTSP, to be cached, as well as the session description.\n\
    \   On receiving a SETUP or PLAY request, a proxy ascertains whether it\n   has\
    \ an up-to-date copy of the continuous media content and its\n   description.\
    \ It can determine whether the copy is up-to-date by\n   issuing a SETUP or DESCRIBE\
    \ request, respectively, and comparing the\n   Last-Modified header with that\
    \ of the cached copy. If the copy is not\n   up-to-date, it modifies the SETUP\
    \ transport parameters as appropriate\n   and forwards the request to the origin\
    \ server. Subsequent control\n   commands such as PLAY or PAUSE then pass the\
    \ proxy unmodified. The\n   proxy delivers the continuous media data to the client,\
    \ while\n   possibly making a local copy for later reuse. The exact behavior\n\
    \   allowed to the cache is given by the cache-response directives\n   described\
    \ in Section 12.8. A cache MUST answer any DESCRIBE requests\n   if it is currently\
    \ serving the stream to the requestor, as it is\n   possible that low-level details\
    \ of the stream description may have\n   changed on the origin-server.\n   Note\
    \ that an RTSP cache, unlike the HTTP cache, is of the \"cut-\n   through\" variety.\
    \ Rather than retrieving the whole resource from the\n   origin server, the cache\
    \ simply copies the streaming data as it\n   passes by on its way to the client.\
    \ Thus, it does not introduce\n   additional latency.\n   To the client, an RTSP\
    \ proxy cache appears like a regular media\n   server, to the media origin server\
    \ like a client. Just as an HTTP\n   cache has to store the content type, content\
    \ language, and so on for\n   the objects it caches, a media cache has to store\
    \ the presentation\n   description. Typically, a cache eliminates all transport-references\n\
    \   (that is, multicast information) from the presentation description,\n   since\
    \ these are independent of the data delivery from the cache to\n   the client.\
    \ Information on the encodings remains the same. If the\n   cache is able to translate\
    \ the cached media data, it would create a\n   new presentation description with\
    \ all the encoding possibilities it\n   can offer.\n"
- title: 14 Examples
  contents:
  - "14 Examples\n   The following examples refer to stream description formats that\
    \ are\n   not standards, such as RTSL. The following examples are not to be\n\
    \   used as a reference for those formats.\n"
- title: 14.1 Media on Demand (Unicast)
  contents:
  - "14.1 Media on Demand (Unicast)\n   Client C requests a movie from media servers\
    \ A ( audio.example.com)\n   and V (video.example.com). The media description\
    \ is stored on a web\n   server W . The media description contains descriptions\
    \ of the\n   presentation and all its streams, including the codecs that are\n\
    \   available, dynamic RTP payload types, the protocol stack, and content\n  \
    \ information such as language or copyright restrictions. It may also\n   give\
    \ an indication about the timeline of the movie.\n   In this example, the client\
    \ is only interested in the last part of\n   the movie.\n     C->W: GET /twister.sdp\
    \ HTTP/1.1\n           Host: www.example.com\n           Accept: application/sdp\n\
    \     W->C: HTTP/1.0 200 OK\n           Content-Type: application/sdp\n      \
    \     v=0\n           o=- 2890844526 2890842807 IN IP4 192.16.24.202\n       \
    \    s=RTSP Session\n           m=audio 0 RTP/AVP 0\n           a=control:rtsp://audio.example.com/twister/audio.en\n\
    \           m=video 0 RTP/AVP 31\n           a=control:rtsp://video.example.com/twister/video\n\
    \     C->A: SETUP rtsp://audio.example.com/twister/audio.en RTSP/1.0\n       \
    \    CSeq: 1\n           Transport: RTP/AVP/UDP;unicast;client_port=3056-3057\n\
    \     A->C: RTSP/1.0 200 OK\n           CSeq: 1\n           Session: 12345678\n\
    \           Transport: RTP/AVP/UDP;unicast;client_port=3056-3057;\n          \
    \            server_port=5000-5001\n     C->V: SETUP rtsp://video.example.com/twister/video\
    \ RTSP/1.0\n           CSeq: 1\n           Transport: RTP/AVP/UDP;unicast;client_port=3058-3059\n\
    \     V->C: RTSP/1.0 200 OK\n           CSeq: 1\n           Session: 23456789\n\
    \           Transport: RTP/AVP/UDP;unicast;client_port=3058-3059;\n          \
    \            server_port=5002-5003\n     C->V: PLAY rtsp://video.example.com/twister/video\
    \ RTSP/1.0\n           CSeq: 2\n           Session: 23456789\n           Range:\
    \ smpte=0:10:00-\n     V->C: RTSP/1.0 200 OK\n           CSeq: 2\n           Session:\
    \ 23456789\n           Range: smpte=0:10:00-0:20:00\n           RTP-Info: url=rtsp://video.example.com/twister/video;\n\
    \             seq=12312232;rtptime=78712811\n     C->A: PLAY rtsp://audio.example.com/twister/audio.en\
    \ RTSP/1.0\n           CSeq: 2\n           Session: 12345678\n           Range:\
    \ smpte=0:10:00-\n     A->C: RTSP/1.0 200 OK\n           CSeq: 2\n           Session:\
    \ 12345678\n           Range: smpte=0:10:00-0:20:00\n           RTP-Info: url=rtsp://audio.example.com/twister/audio.en;\n\
    \             seq=876655;rtptime=1032181\n     C->A: TEARDOWN rtsp://audio.example.com/twister/audio.en\
    \ RTSP/1.0\n           CSeq: 3\n           Session: 12345678\n     A->C: RTSP/1.0\
    \ 200 OK\n           CSeq: 3\n     C->V: TEARDOWN rtsp://video.example.com/twister/video\
    \ RTSP/1.0\n           CSeq: 3\n           Session: 23456789\n     V->C: RTSP/1.0\
    \ 200 OK\n           CSeq: 3\n   Even though the audio and video track are on\
    \ two different servers,\n   and may start at slightly different times and may\
    \ drift with respect\n   to each other, the client can synchronize the two using\
    \ standard RTP\n   methods, in particular the time scale contained in the RTCP\
    \ sender\n   reports.\n"
- title: 14.2 Streaming of a Container file
  contents:
  - "14.2 Streaming of a Container file\n   For purposes of this example, a container\
    \ file is a storage entity in\n   which multiple continuous media types pertaining\
    \ to the same end-user\n   presentation are present. In effect, the container\
    \ file represents an\n   RTSP presentation, with each of its components being\
    \ RTSP streams.\n   Container files are a widely used means to store such presentations.\n\
    \   While the components are transported as independent streams, it is\n   desirable\
    \ to maintain a common context for those streams at the\n   server end.\n    \
    \ This enables the server to keep a single storage handle open\n     easily. It\
    \ also allows treating all the streams equally in case of\n     any prioritization\
    \ of streams by the server.\n   It is also possible that the presentation author\
    \ may wish to prevent\n   selective retrieval of the streams by the client in\
    \ order to preserve\n   the artistic effect of the combined media presentation.\
    \ Similarly, in\n   such a tightly bound presentation, it is desirable to be able\
    \ to\n   control all the streams via a single control message using an\n   aggregate\
    \ URL.\n   The following is an example of using a single RTSP session to control\n\
    \   multiple streams. It also illustrates the use of aggregate URLs.\n   Client\
    \ C requests a presentation from media server M . The movie is\n   stored in a\
    \ container file. The client has obtained an RTSP URL to\n   the container file.\n\
    \     C->M: DESCRIBE rtsp://foo/twister RTSP/1.0\n           CSeq: 1\n     M->C:\
    \ RTSP/1.0 200 OK\n           CSeq: 1\n           Content-Type: application/sdp\n\
    \           Content-Length: 164\n           v=0\n           o=- 2890844256 2890842807\
    \ IN IP4 172.16.2.93\n           s=RTSP Session\n           i=An Example of RTSP\
    \ Session Usage\n           a=control:rtsp://foo/twister\n           t=0 0\n \
    \          m=audio 0 RTP/AVP 0\n           a=control:rtsp://foo/twister/audio\n\
    \           m=video 0 RTP/AVP 26\n           a=control:rtsp://foo/twister/video\n\
    \     C->M: SETUP rtsp://foo/twister/audio RTSP/1.0\n           CSeq: 2\n    \
    \       Transport: RTP/AVP;unicast;client_port=8000-8001\n     M->C: RTSP/1.0\
    \ 200 OK\n           CSeq: 2\n           Transport: RTP/AVP;unicast;client_port=8000-8001;\n\
    \                      server_port=9000-9001\n           Session: 12345678\n \
    \    C->M: SETUP rtsp://foo/twister/video RTSP/1.0\n           CSeq: 3\n     \
    \      Transport: RTP/AVP;unicast;client_port=8002-8003\n           Session: 12345678\n\
    \     M->C: RTSP/1.0 200 OK\n           CSeq: 3\n           Transport: RTP/AVP;unicast;client_port=8002-8003;\n\
    \                      server_port=9004-9005\n           Session: 12345678\n \
    \    C->M: PLAY rtsp://foo/twister RTSP/1.0\n           CSeq: 4\n           Range:\
    \ npt=0-\n           Session: 12345678\n     M->C: RTSP/1.0 200 OK\n         \
    \  CSeq: 4\n           Session: 12345678\n           RTP-Info: url=rtsp://foo/twister/video;\n\
    \             seq=9810092;rtptime=3450012\n     C->M: PAUSE rtsp://foo/twister/video\
    \ RTSP/1.0\n           CSeq: 5\n           Session: 12345678\n     M->C: RTSP/1.0\
    \ 460 Only aggregate operation allowed\n           CSeq: 5\n     C->M: PAUSE rtsp://foo/twister\
    \ RTSP/1.0\n           CSeq: 6\n           Session: 12345678\n     M->C: RTSP/1.0\
    \ 200 OK\n           CSeq: 6\n           Session: 12345678\n     C->M: SETUP rtsp://foo/twister\
    \ RTSP/1.0\n           CSeq: 7\n           Transport: RTP/AVP;unicast;client_port=10000\n\
    \     M->C: RTSP/1.0 459 Aggregate operation not allowed\n           CSeq: 7\n\
    \   In the first instance of failure, the client tries to pause one\n   stream\
    \ (in this case video) of the presentation. This is disallowed\n   for that presentation\
    \ by the server. In the second instance, the\n   aggregate URL may not be used\
    \ for SETUP and one control message is\n   required per stream to set up transport\
    \ parameters.\n     This keeps the syntax of the Transport header simple and allows\n\
    \     easy parsing of transport information by firewalls.\n"
- title: 14.3 Single Stream Container Files
  contents:
  - "14.3 Single Stream Container Files\n   Some RTSP servers may treat all files\
    \ as though they are \"container\n   files\", yet other servers may not support\
    \ such a concept. Because of\n   this, clients SHOULD use the rules set forth\
    \ in the session\n   description for request URLs, rather than assuming that a\
    \ consistent\n   URL may always be used throughout. Here's an example of how a\
    \ multi-\n   stream server might expect a single-stream file to be served:\n \
    \         Accept: application/x-rtsp-mh, application/sdp\n          CSeq: 1\n\
    \    S->C  RTSP/1.0 200 OK\n          CSeq: 1\n          Content-base: rtsp://foo.com/test.wav/\n\
    \          Content-type: application/sdp\n          Content-length: 48\n     \
    \     v=0\n          o=- 872653257 872653257 IN IP4 172.16.2.187\n          s=mu-law\
    \ wave file\n          i=audio test\n          t=0 0\n          m=audio 0 RTP/AVP\
    \ 0\n          a=control:streamid=0\n    C->S  SETUP rtsp://foo.com/test.wav/streamid=0\
    \ RTSP/1.0\n          Transport: RTP/AVP/UDP;unicast;\n                     client_port=6970-6971;mode=play\n\
    \          CSeq: 2\n    S->C  RTSP/1.0 200 OK\n          Transport: RTP/AVP/UDP;unicast;client_port=6970-6971;\n\
    \                     server_port=6970-6971;mode=play\n          CSeq: 2\n   \
    \       Session: 2034820394\n    C->S  PLAY rtsp://foo.com/test.wav RTSP/1.0\n\
    \          CSeq: 3\n          Session: 2034820394\n    S->C  RTSP/1.0 200 OK\n\
    \          CSeq: 3\n          Session: 2034820394\n          RTP-Info: url=rtsp://foo.com/test.wav/streamid=0;\n\
    \            seq=981888;rtptime=3781123\n   Note the different URL in the SETUP\
    \ command, and then the switch back\n   to the aggregate URL in the PLAY command.\
    \ This makes complete sense\n   when there are multiple streams with aggregate\
    \ control, but is less\n   than intuitive in the special case where the number\
    \ of streams is\n   one.\n   In this special case, it is recommended that servers\
    \ be forgiving of\n   implementations that send:\n    C->S  PLAY rtsp://foo.com/test.wav/streamid=0\
    \ RTSP/1.0\n          CSeq: 3\n   In the worst case, servers should send back:\n\
    \    S->C  RTSP/1.0 460 Only aggregate operation allowed\n          CSeq: 3\n\
    \   One would also hope that server implementations are also forgiving of\n  \
    \ the following:\n    C->S  SETUP rtsp://foo.com/test.wav RTSP/1.0\n         \
    \ Transport: rtp/avp/udp;client_port=6970-6971;mode=play\n          CSeq: 2\n\
    \   Since there is only a single stream in this file, it's not ambiguous\n   what\
    \ this means.\n"
- title: 14.4 Live Media Presentation Using Multicast
  contents:
  - "14.4 Live Media Presentation Using Multicast\n   The media server M chooses the\
    \ multicast address and port. Here, we\n   assume that the web server only contains\
    \ a pointer to the full\n   description, while the media server M maintains the\
    \ full description.\n     C->W: GET /concert.sdp HTTP/1.1\n           Host: www.example.com\n\
    \     W->C: HTTP/1.1 200 OK\n           Content-Type: application/x-rtsl\n   \
    \        <session>\n             <track src=\"rtsp://live.example.com/concert/audio\"\
    >\n           </session>\n     C->M: DESCRIBE rtsp://live.example.com/concert/audio\
    \ RTSP/1.0\n           CSeq: 1\n     M->C: RTSP/1.0 200 OK\n           CSeq: 1\n\
    \           Content-Type: application/sdp\n           Content-Length: 44\n   \
    \        v=0\n           o=- 2890844526 2890842807 IN IP4 192.16.24.202\n    \
    \       s=RTSP Session\n           m=audio 3456 RTP/AVP 0\n           a=control:rtsp://live.example.com/concert/audio\n\
    \           c=IN IP4 224.2.0.1/16\n     C->M: SETUP rtsp://live.example.com/concert/audio\
    \ RTSP/1.0\n           CSeq: 2\n           Transport: RTP/AVP;multicast\n    \
    \ M->C: RTSP/1.0 200 OK\n           CSeq: 2\n           Transport: RTP/AVP;multicast;destination=224.2.0.1;\n\
    \                      port=3456-3457;ttl=16\n           Session: 0456804596\n\
    \     C->M: PLAY rtsp://live.example.com/concert/audio RTSP/1.0\n           CSeq:\
    \ 3\n           Session: 0456804596\n     M->C: RTSP/1.0 200 OK\n           CSeq:\
    \ 3\n           Session: 0456804596\n"
- title: 14.5 Playing media into an existing session
  contents:
  - "14.5 Playing media into an existing session\n   A conference participant C wants\
    \ to have the media server M play back\n   a demo tape into an existing conference.\
    \ C indicates to the media\n   server that the network addresses and encryption\
    \ keys are already\n   given by the conference, so they should not be chosen by\
    \ the server.\n   The example omits the simple ACK responses.\n     C->M: DESCRIBE\
    \ rtsp://server.example.com/demo/548/sound RTSP/1.0\n           CSeq: 1\n    \
    \       Accept: application/sdp\n     M->C: RTSP/1.0 200 1 OK\n           Content-type:\
    \ application/sdp\n           Content-Length: 44\n           v=0\n           o=-\
    \ 2890844526 2890842807 IN IP4 192.16.24.202\n           s=RTSP Session\n    \
    \       i=See above\n           t=0 0\n           m=audio 0 RTP/AVP 0\n     C->M:\
    \ SETUP rtsp://server.example.com/demo/548/sound RTSP/1.0\n           CSeq: 2\n\
    \           Transport: RTP/AVP;multicast;destination=225.219.201.15;\n       \
    \               port=7000-7001;ttl=127\n           Conference: 199702170042.SAA08642@obiwan.arl.wustl.edu%20Starr\n\
    \     M->C: RTSP/1.0 200 OK\n           CSeq: 2\n           Transport: RTP/AVP;multicast;destination=225.219.201.15;\n\
    \                      port=7000-7001;ttl=127\n           Session: 91389234234\n\
    \           Conference: 199702170042.SAA08642@obiwan.arl.wustl.edu%20Starr\n \
    \    C->M: PLAY rtsp://server.example.com/demo/548/sound RTSP/1.0\n          \
    \ CSeq: 3\n           Session: 91389234234\n     M->C: RTSP/1.0 200 OK\n     \
    \      CSeq: 3\n"
- title: 14.6 Recording
  contents:
  - "14.6 Recording\n   The conference participant client C asks the media server\
    \ M to record\n   the audio and video portions of a meeting. The client uses the\n\
    \   ANNOUNCE method to provide meta-information about the recorded\n   session\
    \ to the server.\n     C->M: ANNOUNCE rtsp://server.example.com/meeting RTSP/1.0\n\
    \           CSeq: 90\n           Content-Type: application/sdp\n           Content-Length:\
    \ 121\n           v=0\n           o=camera1 3080117314 3080118787 IN IP4 195.27.192.36\n\
    \           s=IETF Meeting, Munich - 1\n           i=The thirty-ninth IETF meeting\
    \ will be held in Munich, Germany\n           u=http://www.ietf.org/meetings/Munich.html\n\
    \           e=IETF Channel 1 <ietf39-mbone@uni-koeln.de>\n           p=IETF Channel\
    \ 1 +49-172-2312 451\n           c=IN IP4 224.0.1.11/127\n           t=3080271600\
    \ 3080703600\n           a=tool:sdr v2.4a6\n           a=type:test\n         \
    \  m=audio 21010 RTP/AVP 5\n           c=IN IP4 224.0.1.11/127\n           a=ptime:40\n\
    \           m=video 61010 RTP/AVP 31\n           c=IN IP4 224.0.1.12/127\n   \
    \  M->C: RTSP/1.0 200 OK\n           CSeq: 90\n     C->M: SETUP rtsp://server.example.com/meeting/audiotrack\
    \ RTSP/1.0\n           CSeq: 91\n           Transport: RTP/AVP;multicast;destination=224.0.1.11;\n\
    \                      port=21010-21011;mode=record;ttl=127\n     M->C: RTSP/1.0\
    \ 200 OK\n           CSeq: 91\n           Session: 50887676\n           Transport:\
    \ RTP/AVP;multicast;destination=224.0.1.11;\n                      port=21010-21011;mode=record;ttl=127\n\
    \     C->M: SETUP rtsp://server.example.com/meeting/videotrack RTSP/1.0\n    \
    \       CSeq: 92\n           Session: 50887676\n           Transport: RTP/AVP;multicast;destination=224.0.1.12;\n\
    \                      port=61010-61011;mode=record;ttl=127\n     M->C: RTSP/1.0\
    \ 200 OK\n           CSeq: 92\n           Transport: RTP/AVP;multicast;destination=224.0.1.12;\n\
    \                      port=61010-61011;mode=record;ttl=127\n     C->M: RECORD\
    \ rtsp://server.example.com/meeting RTSP/1.0\n           CSeq: 93\n          \
    \ Session: 50887676\n           Range: clock=19961110T1925-19961110T2015\n   \
    \  M->C: RTSP/1.0 200 OK\n           CSeq: 93\n"
- title: 15 Syntax
  contents:
  - "15 Syntax\n   The RTSP syntax is described in an augmented Backus-Naur form (BNF)\n\
    \   as used in RFC 2068 [2].\n"
- title: 15.1 Base Syntax
  contents:
  - "15.1 Base Syntax\n   OCTET              =      <any 8-bit sequence of data>\n\
    \   CHAR               =      <any US-ASCII character (octets 0 - 127)>\n   UPALPHA\
    \            =      <any US-ASCII uppercase letter \"A\"..\"Z\">\n   LOALPHA \
    \           =      <any US-ASCII lowercase letter \"a\"..\"z\">\n   ALPHA    \
    \          =      UPALPHA | LOALPHA\n   DIGIT              =      <any US-ASCII\
    \ digit \"0\"..\"9\">\n   CTL                =      <any US-ASCII control character\n\
    \                              (octets 0 - 31) and DEL (127)>\n   CR         \
    \        =      <US-ASCII CR, carriage return (13)>\n   LF                 = \
    \     <US-ASCII LF, linefeed (10)>\n   SP                 =      <US-ASCII SP,\
    \ space (32)>\n   HT                 =      <US-ASCII HT, horizontal-tab (9)>\n\
    \   <\">                =      <US-ASCII double-quote mark (34)>\n   CRLF    \
    \           =      CR LF\n   LWS                =      [CRLF] 1*( SP | HT )\n\
    \   TEXT               =      <any OCTET except CTLs>\n   tspecials          =\
    \      \"(\" | \")\" | \"<\" | \">\" | \"@\"\n                      |       \"\
    ,\" | \";\" | \":\" | \"\\\" | <\">\n                      |       \"/\" | \"\
    [\" | \"]\" | \"?\" | \"=\"\n                      |       \"{\" | \"}\" | SP\
    \ | HT\n   token              =      1*<any CHAR except CTLs or tspecials>\n \
    \  quoted-string      =      ( <\"> *(qdtext) <\"> )\n   qdtext             =\
    \      <any TEXT except <\">>\n   quoted-pair        =      \"\\\" CHAR\n   message-header\
    \     =      field-name \":\" [ field-value ] CRLF\n   field-name         =  \
    \    token\n   field-value        =      *( field-content | LWS )\n   field-content\
    \      =      <the OCTETs making up the field-value and\n                    \
    \          consisting of either *TEXT or\n                              combinations\
    \ of token, tspecials, and\n                              quoted-string>\n   safe\
    \               =  \"\\$\" | \"-\" | \"_\" | \".\" | \"+\"\n   extra         \
    \     =  \"!\" | \"*\" | \"$'$\" | \"(\" | \")\" | \",\"\n   hex             \
    \   =  DIGIT | \"A\" | \"B\" | \"C\" | \"D\" | \"E\" | \"F\" |\n             \
    \           \"a\" | \"b\" | \"c\" | \"d\" | \"e\" | \"f\"\n   escape         \
    \    =  \"\\%\" hex hex\n   reserved           =  \";\" | \"/\" | \"?\" | \":\"\
    \ | \"@\" | \"&\" | \"=\"\n   unreserved         =  alpha | digit | safe | extra\n\
    \   xchar              =  unreserved | reserved | escape\n"
- title: 16 Security Considerations
  contents:
  - "16 Security Considerations\n   Because of the similarity in syntax and usage\
    \ between RTSP servers\n   and HTTP servers, the security considerations outlined\
    \ in [H15]\n   apply.  Specifically, please note the following:\n   Authentication\
    \ Mechanisms:\n          RTSP and HTTP share common authentication schemes, and\
    \ thus\n          should follow the same prescriptions with regards to\n     \
    \     authentication. See [H15.1] for client authentication issues,\n        \
    \  and [H15.2] for issues regarding support for multiple\n          authentication\
    \ mechanisms.\n   Abuse of Server Log Information:\n          RTSP and HTTP servers\
    \ will presumably have similar logging\n          mechanisms, and thus should\
    \ be equally guarded in protecting\n          the contents of those logs, thus\
    \ protecting the privacy of the\n          users of the servers. See [H15.3] for\
    \ HTTP server\n          recommendations regarding server logs.\n   Transfer of\
    \ Sensitive Information:\n          There is no reason to believe that information\
    \ transferred via\n          RTSP may be any less sensitive than that normally\
    \ transmitted\n          via HTTP. Therefore, all of the precautions regarding\
    \ the\n          protection of data privacy and user privacy apply to\n      \
    \    implementors of RTSP clients, servers, and proxies. See\n          [H15.4]\
    \ for further details.\n   Attacks Based On File and Path Names:\n          Though\
    \ RTSP URLs are opaque handles that do not necessarily\n          have file system\
    \ semantics, it is anticipated that many\n          implementations will translate\
    \ portions of the request URLs\n          directly to file system calls. In such\
    \ cases, file systems\n          SHOULD follow the precautions outlined in [H15.5],\
    \ such as\n          checking for \"..\" in path components.\n   Personal Information:\n\
    \          RTSP clients are often privy to the same information that HTTP\n  \
    \        clients are (user name, location, etc.) and thus should be\n        \
    \  equally. See [H15.6] for further recommendations.\n   Privacy Issues Connected\
    \ to Accept Headers:\n          Since may of the same \"Accept\" headers exist\
    \ in RTSP as in\n          HTTP, the same caveats outlined in [H15.7] with regards\
    \ to\n          their use should be followed.\n   DNS Spoofing:\n          Presumably,\
    \ given the longer connection times typically\n          associated to RTSP sessions\
    \ relative to HTTP sessions, RTSP\n          client DNS optimizations should be\
    \ less prevalent.\n          Nonetheless, the recommendations provided in [H15.8]\
    \ are still\n          relevant to any implementation which attempts to rely on\
    \ a\n          DNS-to-IP mapping to hold beyond a single use of the mapping.\n\
    \   Location Headers and Spoofing:\n          If a single server supports multiple\
    \ organizations that do not\n          trust one another, then it must check the\
    \ values of Location\n          and Content-Location headers in responses that\
    \ are generated\n          under control of said organizations to make sure that\
    \ they do\n          not attempt to invalidate resources over which they have\
    \ no\n          authority. ([H15.9])\n   In addition to the recommendations in\
    \ the current HTTP specification\n   (RFC 2068 [2], as of this writing), future\
    \ HTTP specifications may\n   provide additional guidance on security issues.\n\
    \   The following are added considerations for RTSP implementations.\n   Concentrated\
    \ denial-of-service attack:\n          The protocol offers the opportunity for\
    \ a remote-controlled\n          denial-of-service attack. The attacker may initiate\
    \ traffic\n          flows to one or more IP addresses by specifying them as the\n\
    \          destination in SETUP requests. While the attacker's IP address\n  \
    \        may be known in this case, this is not always useful in\n          prevention\
    \ of more attacks or ascertaining the attackers\n          identity. Thus, an\
    \ RTSP server SHOULD only allow client-\n          specified destinations for\
    \ RTSP-initiated traffic flows if the\n          server has verified the client's\
    \ identity, either against a\n          database of known users using RTSP authentication\
    \ mechanisms\n          (preferably digest authentication or stronger), or other\n\
    \          secure means.\n   Session hijacking:\n          Since there is no relation\
    \ between a transport layer\n          connection and an RTSP session, it is possible\
    \ for a malicious\n          client to issue requests with random session identifiers\
    \ which\n          would affect unsuspecting clients. The server SHOULD use a\n\
    \          large, random and non-sequential session identifier to\n          minimize\
    \ the possibility of this kind of attack.\n   Authentication:\n          Servers\
    \ SHOULD implement both basic and digest [8]\n          authentication. In environments\
    \ requiring tighter security for\n          the control messages, the RTSP control\
    \ stream may be\n          encrypted.\n   Stream issues:\n          RTSP only\
    \ provides for stream control. Stream delivery issues\n          are not covered\
    \ in this section, nor in the rest of this memo.\n          RTSP implementations\
    \ will most likely rely on other protocols\n          such as RTP, IP multicast,\
    \ RSVP and IGMP, and should address\n          security considerations brought\
    \ up in those and other\n          applicable specifications.\n   Persistently\
    \ suspicious behavior:\n          RTSP servers SHOULD return error code 403 (Forbidden)\
    \ upon\n          receiving a single instance of behavior which is deemed a\n\
    \          security risk. RTSP servers SHOULD also be aware of attempts\n    \
    \      to probe the server for weaknesses and entry points and MAY\n         \
    \ arbitrarily disconnect and ignore further requests clients\n          which\
    \ are deemed to be in violation of local security policy.\n"
- title: 'Appendix A: RTSP Protocol State Machines'
  contents:
  - "Appendix A: RTSP Protocol State Machines\n   The RTSP client and server state\
    \ machines describe the behavior of\n   the protocol from RTSP session initialization\
    \ through RTSP session\n   termination.\n   State is defined on a per object basis.\
    \ An object is uniquely\n   identified by the stream URL and the RTSP session\
    \ identifier. Any\n   request/reply using aggregate URLs denoting RTSP presentations\n\
    \   composed of multiple streams will have an effect on the individual\n   states\
    \ of all the streams. For example, if the presentation /movie\n   contains two\
    \ streams, /movie/audio and /movie/video, then the\n   following command:\n  \
    \   PLAY rtsp://foo.com/movie RTSP/1.0\n     CSeq: 559\n     Session: 12345678\n\
    \   will have an effect on the states of movie/audio and movie/video.\n     This\
    \ example does not imply a standard way to represent streams in\n     URLs or\
    \ a relation to the filesystem. See Section 3.2.\n   The requests OPTIONS, ANNOUNCE,\
    \ DESCRIBE, GET_PARAMETER,\n   SET_PARAMETER do not have any effect on client\
    \ or server state and\n   are therefore not listed in the state tables.\n"
- title: A.1 Client State Machine
  contents:
  - "A.1 Client State Machine\n   The client can assume the following states:\n  \
    \ Init:\n          SETUP has been sent, waiting for reply.\n   Ready:\n      \
    \    SETUP reply received or PAUSE reply received while in Playing\n         \
    \ state.\n   Playing:\n          PLAY reply received\n   Recording:\n        \
    \  RECORD reply received\n   In general, the client changes state on receipt of\
    \ replies to\n   requests. Note that some requests are effective at a future time\
    \ or\n   position (such as a PAUSE), and state also changes accordingly. If no\n\
    \   explicit SETUP is required for the object (for example, it is\n   available\
    \ via a multicast group), state begins at Ready. In this\n   case, there are only\
    \ two states, Ready and Playing. The client also\n   changes state from Playing/Recording\
    \ to Ready when the end of the\n   requested range is reached.\n   The \"next\
    \ state\" column indicates the state assumed after receiving a\n   success response\
    \ (2xx). If a request yields a status code of 3xx, the\n   state becomes Init,\
    \ and a status code of 4xx yields no change in\n   state. Messages not listed\
    \ for each state MUST NOT be issued by the\n   client in that state, with the\
    \ exception of messages not affecting\n   state, as listed above. Receiving a\
    \ REDIRECT from the server is\n   equivalent to receiving a 3xx redirect status\
    \ from the server.\n   state       message sent     next state after response\n\
    \   Init        SETUP            Ready\n               TEARDOWN         Init\n\
    \   Ready       PLAY             Playing\n               RECORD           Recording\n\
    \               TEARDOWN         Init\n               SETUP            Ready\n\
    \   Playing     PAUSE            Ready\n               TEARDOWN         Init\n\
    \               PLAY             Playing\n               SETUP            Playing\
    \ (changed transport)\n   Recording   PAUSE            Ready\n               TEARDOWN\
    \         Init\n               RECORD           Recording\n               SETUP\
    \            Recording (changed transport)\n"
- title: A.2 Server State Machine
  contents:
  - "A.2 Server State Machine\n   The server can assume the following states:\n  \
    \ Init:\n          The initial state, no valid SETUP has been received yet.\n\
    \   Ready:\n          Last SETUP received was successful, reply sent or after\n\
    \          playing, last PAUSE received was successful, reply sent.\n   Playing:\n\
    \          Last PLAY received was successful, reply sent. Data is being\n    \
    \      sent.\n   Recording:\n          The server is recording media data.\n \
    \  In general, the server changes state on receiving requests. If the\n   server\
    \ is in state Playing or Recording and in unicast mode, it MAY\n   revert to Init\
    \ and tear down the RTSP session if it has not received\n   \"wellness\" information,\
    \ such as RTCP reports or RTSP commands, from\n   the client for a defined interval,\
    \ with a default of one minute. The\n   server can declare another timeout value\
    \ in the Session response\n   header (Section 12.37). If the server is in state\
    \ Ready, it MAY\n   revert to Init if it does not receive an RTSP request for\
    \ an interval\n   of more than one minute. Note that some requests (such as PAUSE)\
    \ may\n   be effective at a future time or position, and server state changes\n\
    \   at the appropriate time. The server reverts from state Playing or\n   Recording\
    \ to state Ready at the end of the range requested by the\n   client.\n   The\
    \ REDIRECT message, when sent, is effective immediately unless it\n   has a Range\
    \ header specifying when the redirect is effective. In such\n   a case, server\
    \ state will also change at the appropriate time.\n   If no explicit SETUP is\
    \ required for the object, the state starts at\n   Ready and there are only two\
    \ states, Ready and Playing.\n   The \"next state\" column indicates the state\
    \ assumed after sending a\n   success response (2xx). If a request results in\
    \ a status code of 3xx,\n   the state becomes Init. A status code of 4xx results\
    \ in no change.\n     state           message received  next state\n     Init\
    \            SETUP             Ready\n                     TEARDOWN          Init\n\
    \     Ready           PLAY              Playing\n                     SETUP  \
    \           Ready\n                     TEARDOWN          Init\n             \
    \        RECORD            Recording\n     Playing         PLAY              Playing\n\
    \                     PAUSE             Ready\n                     TEARDOWN \
    \         Init\n                     SETUP             Playing\n     Recording\
    \       RECORD            Recording\n                     PAUSE             Ready\n\
    \                     TEARDOWN          Init\n                     SETUP     \
    \        Recording\n"
- title: 'Appendix B: Interaction with RTP'
  contents:
  - "Appendix B: Interaction with RTP\n   RTSP allows media clients to control selected,\
    \ non-contiguous\n   sections of media presentations, rendering those streams\
    \ with an RTP\n   media layer[24]. The media layer rendering the RTP stream should\
    \ not\n   be affected by jumps in NPT. Thus, both RTP sequence numbers and RTP\n\
    \   timestamps MUST be continuous and monotonic across jumps of NPT.\n   As an\
    \ example, assume a clock frequency of 8000 Hz, a packetization\n   interval of\
    \ 100 ms and an initial sequence number and timestamp of\n   zero. First we play\
    \ NPT 10 through 15, then skip ahead and play NPT\n   18 through 20. The first\
    \ segment is presented as RTP packets with\n   sequence numbers 0 through 49 and\
    \ timestamp 0 through 39,200. The\n   second segment consists of RTP packets with\
    \ sequence number 50\n   through 69, with timestamps 40,000 through 55,200.\n\
    \     We cannot assume that the RTSP client can communicate with the RTP\n   \
    \  media agent, as the two may be independent processes. If the RTP\n     timestamp\
    \ shows the same gap as the NPT, the media agent will\n     assume that there\
    \ is a pause in the presentation. If the jump in\n     NPT is large enough, the\
    \ RTP timestamp may roll over and the media\n     agent may believe later packets\
    \ to be duplicates of packets just\n     played out.\n     For certain datatypes,\
    \ tight integration between the RTSP layer and\n     the RTP layer will be necessary.\
    \ This by no means precludes the\n     above restriction. Combined RTSP/RTP media\
    \ clients should use the\n     RTP-Info field to determine whether incoming RTP\
    \ packets were sent\n     before or after a seek.\n   For continuous audio, the\
    \ server SHOULD set the RTP marker bit at the\n   beginning of serving a new PLAY\
    \ request. This allows the client to\n   perform playout delay adaptation.\n \
    \  For scaling (see Section 12.34), RTP timestamps should correspond to\n   the\
    \ playback timing. For example, when playing video recorded at 30\n   frames/second\
    \ at a scale of two and speed (Section 12.35) of one, the\n   server would drop\
    \ every second frame to maintain and deliver video\n   packets with the normal\
    \ timestamp spacing of 3,000 per frame, but NPT\n   would increase by 1/15 second\
    \ for each video frame.\n   The client can maintain a correct display of NPT by\
    \ noting the RTP\n   timestamp value of the first packet arriving after repositioning.\
    \ The\n   sequence parameter of the RTP-Info (Section 12.33) header provides\n\
    \   the first sequence number of the next segment.\n"
- title: 'Appendix C: Use of SDP for RTSP Session Descriptions'
  contents:
  - "Appendix C: Use of SDP for RTSP Session Descriptions\n   The Session Description\
    \ Protocol (SDP, RFC 2327 [6]) may be used to\n   describe streams or presentations\
    \ in RTSP. Such usage is limited to\n   specifying means of access and encoding(s)\
    \ for:\n   aggregate control:\n          A presentation composed of streams from\
    \ one or more servers\n          that are not available for aggregate control.\
    \ Such a\n          description is typically retrieved by HTTP or other non-RTSP\n\
    \          means. However, they may be received with ANNOUNCE methods.\n   non-aggregate\
    \ control:\n          A presentation composed of multiple streams from a single\n\
    \          server that are available for aggregate control. Such a\n         \
    \ description is typically returned in reply to a DESCRIBE\n          request\
    \ on a URL, or received in an ANNOUNCE method.\n   This appendix describes how\
    \ an SDP file, retrieved, for example,\n   through HTTP, determines the operation\
    \ of an RTSP session. It also\n   describes how a client should interpret SDP\
    \ content returned in reply\n   to a DESCRIBE request. SDP provides no mechanism\
    \ by which a client\n   can distinguish, without human guidance, between several\
    \ media\n   streams to be rendered simultaneously and a set of alternatives\n\
    \   (e.g., two audio streams spoken in different languages).\n"
- title: C.1 Definitions
  contents:
  - "C.1 Definitions\n   The terms \"session-level\", \"media-level\" and other key/attribute\n\
    \   names and values used in this appendix are to be used as defined in\n   SDP\
    \ (RFC 2327 [6]):\n"
- title: C.1.1 Control URL
  contents:
  - "C.1.1 Control URL\n   The \"a=control:\" attribute is used to convey the control\
    \ URL. This\n   attribute is used both for the session and media descriptions.\
    \ If\n   used for individual media, it indicates the URL to be used for\n   controlling\
    \ that particular media stream. If found at the session\n   level, the attribute\
    \ indicates the URL for aggregate control.\n   Example:\n     a=control:rtsp://example.com/foo\n\
    \   This attribute may contain either relative and absolute URLs,\n   following\
    \ the rules and conventions set out in RFC 1808 [25].\n   Implementations should\
    \ look for a base URL in the following order:\n   1.     The RTSP Content-Base\
    \ field\n   2.     The RTSP Content-Location field\n   3.     The RTSP request\
    \ URL\n   If this attribute contains only an asterisk (*), then the URL is\n \
    \  treated as if it were an empty embedded URL, and thus inherits the\n   entire\
    \ base URL.\n"
- title: C.1.2 Media streams
  contents:
  - "C.1.2 Media streams\n   The \"m=\" field is used to enumerate the streams. It\
    \ is expected that\n   all the specified streams will be rendered with appropriate\n\
    \   synchronization. If the session is unicast, the port number serves as\n  \
    \ a recommendation from the server to the client; the client still has\n   to\
    \ include it in its SETUP request and may ignore this\n   recommendation.  If\
    \ the server has no preference, it SHOULD set the\n   port number value to zero.\n\
    \   Example:\n     m=audio 0 RTP/AVP 31\n"
- title: C.1.3 Payload type(s)
  contents:
  - "C.1.3 Payload type(s)\n   The payload type(s) are specified in the \"m=\" field.\
    \ In case the\n   payload type is a static payload type from RFC 1890 [1], no\
    \ other\n   information is required. In case it is a dynamic payload type, the\n\
    \   media attribute \"rtpmap\" is used to specify what the media is. The\n   \"\
    encoding name\" within the \"rtpmap\" attribute may be one of those\n   specified\
    \ in RFC 1890 (Sections 5 and 6), or an experimental encoding\n   with a \"X-\"\
    \ prefix as specified in SDP (RFC 2327 [6]).  Codec-\n   specific parameters are\
    \ not specified in this field, but rather in\n   the \"fmtp\" attribute described\
    \ below. Implementors seeking to\n   register new encodings should follow the\
    \ procedure in RFC 1890 [1].\n   If the media type is not suited to the RTP AV\
    \ profile, then it is\n   recommended that a new profile be created and the appropriate\
    \ profile\n   name be used in lieu of \"RTP/AVP\" in the \"m=\" field.\n"
- title: C.1.4 Format-specific parameters
  contents:
  - "C.1.4 Format-specific parameters\n   Format-specific parameters are conveyed\
    \ using the \"fmtp\" media\n   attribute. The syntax of the \"fmtp\" attribute\
    \ is specific to the\n   encoding(s) that the attribute refers to. Note that the\
    \ packetization\n   interval is conveyed using the \"ptime\" attribute.\n"
- title: C.1.5 Range of presentation
  contents:
  - "C.1.5 Range of presentation\n   The \"a=range\" attribute defines the total time\
    \ range of the stored\n   session. (The length of live sessions can be deduced\
    \ from the \"t\" and\n   \"r\" parameters.) Unless the presentation contains media\
    \ streams of\n   different durations, the range attribute is a session-level\n\
    \   attribute. The unit is specified first, followed by the value range.\n   The\
    \ units and their values are as defined in Section 3.5, 3.6 and\n   3.7.\n   Examples:\n\
    \     a=range:npt=0-34.4368\n     a=range:clock=19971113T2115-19971113T2203\n"
- title: C.1.6 Time of availability
  contents:
  - "C.1.6 Time of availability\n   The \"t=\" field MUST contain suitable values\
    \ for the start and stop\n   times for both aggregate and non-aggregate stream\
    \ control. With\n   aggregate control, the server SHOULD indicate a stop time\
    \ value for\n   which it guarantees the description to be valid, and a start time\n\
    \   that is equal to or before the time at which the DESCRIBE request was\n  \
    \ received. It MAY also indicate start and stop times of 0, meaning\n   that the\
    \ session is always available. With non-aggregate control, the\n   values should\
    \ reflect the actual period for which the session is\n   available in keeping\
    \ with SDP semantics, and not depend on other\n   means (such as the life of the\
    \ web page containing the description)\n   for this purpose.\n"
- title: C.1.7 Connection Information
  contents:
  - "C.1.7 Connection Information\n   In SDP, the \"c=\" field contains the destination\
    \ address for the media\n   stream. However, for on-demand unicast streams and\
    \ some multicast\n   streams, the destination address is specified by the client\
    \ via the\n   SETUP request. Unless the media content has a fixed destination\n\
    \   address, the \"c=\" field is to be set to a suitable null value. For\n   addresses\
    \ of type \"IP4\", this value is \"0.0.0.0\".\n  C.1.8 Entity Tag\n   The optional\
    \ \"a=etag\" attribute identifies a version of the session\n   description. It\
    \ is opaque to the client. SETUP requests may include\n   this identifier in the\
    \ If-Match field (see section 12.22) to only\n   allow session establishment if\
    \ this attribute value still corresponds\n   to that of the current description.\
    \ The attribute value is opaque and\n   may contain any character allowed within\
    \ SDP attribute values.\n   Example:\n     a=etag:158bb3e7c7fd62ce67f12b533f06b83a\n\
    \     One could argue that the \"o=\" field provides identical\n     functionality.\
    \ However, it does so in a manner that would put\n     constraints on servers\
    \ that need to support multiple session\n     description types other than SDP\
    \ for the same piece of media\n     content.\n"
- title: C.2 Aggregate Control Not Available
  contents:
  - "C.2 Aggregate Control Not Available\n   If a presentation does not support aggregate\
    \ control and multiple\n   media sections are specified, each section MUST have\
    \ the control URL\n   specified via the \"a=control:\" attribute.\n   Example:\n\
    \     v=0\n     o=- 2890844256 2890842807 IN IP4 204.34.34.32\n     s=I came from\
    \ a web page\n     t=0 0\n     c=IN IP4 0.0.0.0\n     m=video 8002 RTP/AVP 31\n\
    \     a=control:rtsp://audio.com/movie.aud\n     m=audio 8004 RTP/AVP 3\n    \
    \ a=control:rtsp://video.com/movie.vid\n   Note that the position of the control\
    \ URL in the description implies\n   that the client establishes separate RTSP\
    \ control sessions to the\n   servers audio.com and video.com.\n   It is recommended\
    \ that an SDP file contains the complete media\n   initialization information\
    \ even if it is delivered to the media\n   client through non-RTSP means. This\
    \ is necessary as there is no\n   mechanism to indicate that the client should\
    \ request more detailed\n   media stream information via DESCRIBE.\n"
- title: C.3 Aggregate Control Available
  contents:
  - "C.3 Aggregate Control Available\n   In this scenario, the server has multiple\
    \ streams that can be\n   controlled as a whole. In this case, there are both\
    \ media-level\n   \"a=control:\" attributes, which are used to specify the stream\
    \ URLs,\n   and a session-level \"a=control:\" attribute which is used as the\n\
    \   request URL for aggregate control. If the media-level URL is\n   relative,\
    \ it is resolved to absolute URLs according to Section C.1.1\n   above.\n   If\
    \ the presentation comprises only a single stream, the media-level\n   \"a=control:\"\
    \ attribute may be omitted altogether. However, if the\n   presentation contains\
    \ more than one stream, each media stream section\n   MUST contain its own \"\
    a=control\" attribute.\n   Example:\n     v=0\n     o=- 2890844256 2890842807\
    \ IN IP4 204.34.34.32\n     s=I contain\n     i=<more info>\n     t=0 0\n    \
    \ c=IN IP4 0.0.0.0\n     a=control:rtsp://example.com/movie/\n     m=video 8002\
    \ RTP/AVP 31\n     a=control:trackID=1\n     m=audio 8004 RTP/AVP 3\n     a=control:trackID=2\n\
    \   In this example, the client is required to establish a single RTSP\n   session\
    \ to the server, and uses the URLs\n   rtsp://example.com/movie/trackID=1 and\n\
    \   rtsp://example.com/movie/trackID=2 to set up the video and audio\n   streams,\
    \ respectively. The URL rtsp://example.com/movie/ controls the\n   whole movie.\n"
- title: 'Appendix D: Minimal RTSP implementation'
  contents:
  - 'Appendix D: Minimal RTSP implementation

    '
- title: D.1 Client
  contents:
  - "D.1 Client\n   A client implementation MUST be able to do the following :\n \
    \    * Generate the following requests: SETUP, TEARDOWN, and one of PLAY\n   \
    \    (i.e., a minimal playback client) or RECORD (i.e., a minimal\n       recording\
    \ client). If RECORD is implemented, ANNOUNCE must be\n       implemented as well.\n\
    \     * Include the following headers in requests: CSeq, Connection,\n       Session,\
    \ Transport. If ANNOUNCE is implemented, the capability to\n       include headers\
    \ Content-Language, Content-Encoding, Content-\n       Length, and Content-Type\
    \ should be as well.\n     * Parse and understand the following headers in responses:\
    \ CSeq,\n       Connection, Session, Transport, Content-Language, Content-\n \
    \      Encoding, Content-Length, Content-Type. If RECORD is implemented,\n   \
    \    the Location header must be understood as well.  RTP-compliant\n       implementations\
    \ should also implement RTP-Info.\n     * Understand the class of each error code\
    \ received and notify the\n       end-user, if one is present, of error codes\
    \ in classes 4xx and\n       5xx. The notification requirement may be relaxed\
    \ if the end-user\n       explicitly does not want it for one or all status codes.\n\
    \     * Expect and respond to asynchronous requests from the server, such\n  \
    \     as ANNOUNCE. This does not necessarily mean that it should\n       implement\
    \ the ANNOUNCE method, merely that it MUST respond\n       positively or negatively\
    \ to any request received from the server.\n   Though not required, the following\
    \ are highly recommended at the time\n   of publication for practical interoperability\
    \ with initial\n   implementations and/or to be a \"good citizen\".\n     * Implement\
    \ RTP/AVP/UDP as a valid transport.\n     * Inclusion of the User-Agent header.\n\
    \     * Understand SDP session descriptions as defined in Appendix C\n     * Accept\
    \ media initialization formats (such as SDP) from standard\n       input, command\
    \ line, or other means appropriate to the operating\n       environment to act\
    \ as a \"helper application\" for other\n       applications (such as web browsers).\n\
    \     There may be RTSP applications different from those initially\n     envisioned\
    \ by the contributors to the RTSP specification for which\n     the requirements\
    \ above do not make sense. Therefore, the\n     recommendations above serve only\
    \ as guidelines instead of strict\n     requirements.\n"
- title: D.1.1 Basic Playback
  contents:
  - "D.1.1 Basic Playback\n   To support on-demand playback of media streams, the\
    \ client MUST\n   additionally be able to do the following:\n     * generate the\
    \ PAUSE request;\n     * implement the REDIRECT method, and the Location header.\n"
- title: D.1.2 Authentication-enabled
  contents:
  - "D.1.2 Authentication-enabled\n   In order to access media presentations from\
    \ RTSP servers that require\n   authentication, the client MUST additionally be\
    \ able to do the\n   following:\n     * recognize the 401 status code;\n     *\
    \ parse and include the WWW-Authenticate header;\n     * implement Basic Authentication\
    \ and Digest Authentication.\n"
- title: D.2 Server
  contents:
  - "D.2 Server\n   A minimal server implementation MUST be able to do the following:\n\
    \     * Implement the following methods: SETUP, TEARDOWN, OPTIONS and\n      \
    \ either PLAY (for a minimal playback server) or RECORD (for a\n       minimal\
    \ recording server).  If RECORD is implemented, ANNOUNCE\n       should be implemented\
    \ as well.\n     * Include the following headers in responses: Connection,\n \
    \      Content-Length, Content-Type, Content-Language, Content-Encoding,\n   \
    \    Transport, Public. The capability to include the Location header\n      \
    \ should be implemented if the RECORD method is. RTP-compliant\n       implementations\
    \ should also implement the RTP-Info field.\n     * Parse and respond appropriately\
    \ to the following headers in\n       requests: Connection, Session, Transport,\
    \ Require.\n   Though not required, the following are highly recommended at the\
    \ time\n   of publication for practical interoperability with initial\n   implementations\
    \ and/or to be a \"good citizen\".\n     * Implement RTP/AVP/UDP as a valid transport.\n\
    \     * Inclusion of the Server header.\n     * Implement the DESCRIBE method.\n\
    \     * Generate SDP session descriptions as defined in Appendix C\n     There\
    \ may be RTSP applications different from those initially\n     envisioned by\
    \ the contributors to the RTSP specification for which\n     the requirements\
    \ above do not make sense. Therefore, the\n     recommendations above serve only\
    \ as guidelines instead of strict\n     requirements.\n"
- title: D.2.1 Basic Playback
  contents:
  - "D.2.1 Basic Playback\n   To support on-demand playback of media streams, the\
    \ server MUST\n   additionally be able to do the following:\n     * Recognize\
    \ the Range header, and return an error if seeking is not\n       supported.\n\
    \     * Implement the PAUSE method.\n   In addition, in order to support commonly-accepted\
    \ user interface\n   features, the following are highly recommended for on-demand\
    \ media\n   servers:\n     * Include and parse the Range header, with NPT units.\n\
    \       Implementation of SMPTE units is recommended.\n     * Include the length\
    \ of the media presentation in the media\n       initialization information.\n\
    \     * Include mappings from data-specific timestamps to NPT. When RTP\n    \
    \   is used, the rtptime portion of the RTP-Info field may be used to\n      \
    \ map RTP timestamps to NPT.\n     Client implementations may use the presence\
    \ of length information\n     to determine if the clip is seekable, and visibly\
    \ disable seeking\n     features for clips for which the length information is\
    \ unavailable.\n     A common use of the presentation length is to implement a\
    \ \"slider\n     bar\" which serves as both a progress indicator and a timeline\n\
    \     positioning tool.\n     Mappings from RTP timestamps to NPT are necessary\
    \ to ensure correct\n     positioning of the slider bar.\n"
- title: D.2.2 Authentication-enabled
  contents:
  - "D.2.2 Authentication-enabled\n   In order to correctly handle client authentication,\
    \ the server MUST\n   additionally be able to do the following:\n     * Generate\
    \ the 401 status code when authentication is required for\n       the resource.\n\
    \     * Parse and include the WWW-Authenticate header\n     * Implement Basic\
    \ Authentication and Digest Authentication\n"
- title: 'Appendix E: Authors'' Addresses'
  contents:
  - "Appendix E: Authors' Addresses\n   Henning Schulzrinne\n   Dept. of Computer\
    \ Science\n   Columbia University\n   1214 Amsterdam Avenue\n   New York, NY 10027\n\
    \   USA\n   EMail: schulzrinne@cs.columbia.edu\n   Anup Rao\n   Netscape Communications\
    \ Corp.\n   501 E. Middlefield Road\n   Mountain View, CA 94043\n   USA\n   EMail:\
    \ anup@netscape.com\n   Robert Lanphier\n   RealNetworks\n   1111 Third Avenue\
    \ Suite 2900\n   Seattle, WA 98101\n   USA\n   EMail: robla@real.com\n"
- title: 'Appendix F: Acknowledgements'
  contents:
  - "Appendix F: Acknowledgements\n   This memo is based on the functionality of the\
    \ original RTSP document\n   submitted in October 96. It also borrows format and\
    \ descriptions from\n   HTTP/1.1.\n   This document has benefited greatly from\
    \ the comments of all those\n   participating in the MMUSIC-WG. In addition to\
    \ those already\n   mentioned, the following individuals have contributed to this\n\
    \   specification:\n   Rahul Agarwal, Torsten Braun, Brent Browning, Bruce Butterfield,\n\
    \   Steve Casner, Francisco Cortes, Kelly Djahandari, Martin Dunsmuir,\n   Eric\
    \ Fleischman, Jay Geagan, Andy Grignon, V. Guruprasad, Peter\n   Haight, Mark\
    \ Handley, Brad Hefta-Gaub, John K. Ho, Philipp Hoschka,\n   Anne Jones, Anders\
    \ Klemets, Ruth Lang, Stephanie Leif, Jonathan\n   Lennox, Eduardo F. Llach, Rob\
    \ McCool, David Oran, Maria Papadopouli,\n   Sujal Patel, Ema Patki, Alagu Periyannan,\
    \ Igor Plotnikov, Pinaki\n   Shah, David Singer, Jeff Smith, Alexander Sokolsky,\
    \ Dale Stammen, and\n   John Francis Stracke.\n"
- title: References
  contents:
  - "References\n   1      Schulzrinne, H., \"RTP profile for audio and video conferences\n\
    \          with minimal control\", RFC 1890, January 1996.\n   2      Fielding,\
    \ R., Gettys, J., Mogul, J., Nielsen, H., and T.\n          Berners-Lee, \"Hypertext\
    \ transfer protocol - HTTP/1.1\", RFC\n          2068, January 1997.\n   3   \
    \   Yergeau, F., Nicol, G., Adams, G., and M. Duerst,\n          \"Internationalization\
    \ of the hypertext markup language\", RFC\n          2070, January 1997.\n   4\
    \      Bradner, S., \"Key words for use in RFCs to indicate\n          requirement\
    \ levels\", BCP 14, RFC 2119, March 1997.\n   5      ISO/IEC, \"Information technology\
    \ - generic coding of moving\n          pictures and associated audio information\
    \ - part 6: extension\n          for digital storage media and control,\" Draft\
    \ International\n          Standard ISO 13818-6, International Organization for\n\
    \          Standardization ISO/IEC JTC1/SC29/WG11, Geneva, Switzerland,\n    \
    \      Nov. 1995.\n   6      Handley, M., and V. Jacobson, \"SDP: Session Description\n\
    \          Protocol\", RFC 2327, April 1998.\n   7      Franks, J., Hallam-Baker,\
    \ P., and J. Hostetler, \"An extension to\n          HTTP: digest access authentication\"\
    , RFC 2069, January 1997.\n   8      Postel, J., \"User Datagram Protocol\", STD\
    \ 6, RFC 768, August\n          1980.\n   9      Hinden, B. and C. Partridge,\
    \ \"Version 2 of the reliable data\n          protocol (RDP)\", RFC 1151, April\
    \ 1990.\n   10     Postel, J., \"Transmission control protocol\", STD 7, RFC 793,\n\
    \          September 1981.\n   11     H. Schulzrinne, \"A comprehensive multimedia\
    \ control\n          architecture for the Internet,\" in Proc. International\n\
    \          Workshop on Network and Operating System Support for Digital\n    \
    \      Audio and Video (NOSSDAV), (St. Louis, Missouri), May 1997.\n   12    \
    \ International Telecommunication Union, \"Visual telephone\n          systems\
    \ and equipment for local area networks which provide a\n          non-guaranteed\
    \ quality of service,\" Recommendation H.323,\n          Telecommunication Standardization\
    \ Sector of ITU, Geneva,\n          Switzerland, May 1996.\n   13     McMahon,\
    \ P., \"GSS-API authentication method for SOCKS version\n          5\", RFC 1961,\
    \ June 1996.\n   14     J. Miller, P. Resnick, and D. Singer, \"Rating services\
    \ and\n          rating systems (and their machine readable descriptions),\"\n\
    \          Recommendation REC-PICS-services-961031, W3C (World Wide Web\n    \
    \      Consortium), Boston, Massachusetts, Oct. 1996.\n   15     J. Miller, T.\
    \ Krauskopf, P. Resnick, and W. Treese, \"PICS\n          label distribution label\
    \ syntax and communication protocols,\"\n          Recommendation REC-PICS-labels-961031,\
    \ W3C (World Wide Web\n          Consortium), Boston, Massachusetts, Oct. 1996.\n\
    \   16     Crocker, D. and P. Overell, \"Augmented BNF for syntax\n          specifications:\
    \ ABNF\", RFC 2234, November 1997.\n   17     Braden, B., \"Requirements for internet\
    \ hosts - application and\n          support\", STD 3, RFC 1123, October 1989.\n\
    \   18     Elz, R., \"A compact representation of IPv6 addresses\", RFC\n    \
    \      1924, April 1996.\n   19     Berners-Lee, T., Masinter, L. and M. McCahill,\
    \ \"Uniform\n          resource locators (URL)\", RFC 1738, December 1994.\n \
    \  20     Yergeau, F., \"UTF-8, a transformation format of ISO 10646\",\n    \
    \      RFC 2279, January 1998.\n   22     Braden, B., \"T/TCP - TCP extensions\
    \ for transactions\n          functional specification\", RFC 1644, July 1994.\n\
    \   22     W. R. Stevens, TCP/IP illustrated: the implementation, vol. 2.\n  \
    \        Reading, Massachusetts: Addison-Wesley, 1994.\n   23     Schulzrinne,\
    \ H., Casner, S., Frederick, R. and V. Jacobson,\n          \"RTP: a transport\
    \ protocol for real-time applications\", RFC\n          1889, January 1996.\n\
    \   24     Fielding, R., \"Relative uniform resource locators\", RFC 1808,\n \
    \         June 1995.\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (1998). All Rights\
    \ Reserved.\n   This document and translations of it may be copied and furnished\
    \ to\n   others, and derivative works that comment on or otherwise explain it\n\
    \   or assist in its implementation may be prepared, copied, published\n   and\
    \ distributed, in whole or in part, without restriction of any\n   kind, provided\
    \ that the above copyright notice and this paragraph are\n   included on all such\
    \ copies and derivative works. However, this\n   document itself may not be modified\
    \ in any way, such as by removing\n   the copyright notice or references to the\
    \ Internet Society or other\n   Internet organizations, except as needed for the\
    \ purpose of\n   developing Internet standards in which case the procedures for\n\
    \   copyrights defined in the Internet Standards process must be\n   followed,\
    \ or as required to translate it into languages other than\n   English.\n   The\
    \ limited permissions granted above are perpetual and will not be\n   revoked\
    \ by the Internet Society or its successors or assigns.\n   This document and\
    \ the information contained herein is provided on an\n   \"AS IS\" basis and THE\
    \ INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE DISCLAIMS ALL WARRANTIES,\
    \ EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED TO ANY WARRANTY THAT THE USE\
    \ OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED WARRANTIES\
    \ OF\n   MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.\n"
