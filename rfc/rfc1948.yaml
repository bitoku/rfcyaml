- title: __initial_text__
  contents:
  - '               Defending Against Sequence Number Attacks

    '
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This memo provides information for the Internet community.\
    \  This memo\n   does not specify an Internet standard of any kind.  Distribution\
    \ of\n   this memo is unlimited.\n"
- title: Abstract
  contents:
  - "Abstract\n   IP spoofing attacks based on sequence number spoofing have become\
    \ a\n   serious threat on the Internet (CERT Advisory CA-95:01).  While\n   ubiquitous\
    \ crypgraphic authentication is the right answer, we propose\n   a simple modification\
    \ to TCP implementations that should be a very\n   substantial block to the current\
    \ wave of attacks.\n"
- title: Overview and Rational
  contents:
  - "Overview and Rational\n   In 1985, Morris [1] described a form of attack based\
    \ on guessing what\n   sequence numbers TCP [2] will use for new connections.\
    \  Briefly, the\n   attacker gags a host trusted by the target, impersonates the\
    \ IP\n   address of the trusted host when talking to the target, and completes\n\
    \   the 3-way handshake based on its guess at the next initial sequence\n   number\
    \ to be used.  An ordinary connection to the target is used to\n   gather sequence\
    \ number state information.  This entire sequence,\n   coupled with address-based\
    \ authentication, allows the attacker to\n   execute commands on the target host.\n\
    \   Clearly, the proper solution is cryptographic authentication [3,4].\n   But\
    \ it will quite a long time before that is deployed.  It has\n   therefore been\
    \ necessary for many sites to restrict use of protocols\n   that rely on address-based\
    \ authentication, such as rlogin and rsh.\n   Unfortunately, the prevalence of\
    \ \"sniffer attacks\" -- network\n   eavesdropping (CERT Advisory CA-94:01) --\
    \ has rendered ordinary\n   TELNET [5] very dangerous as well.  The Internet is\
    \ thus left without\n   a safe, secure mechanism for remote login.\n   We propose\
    \ a simple change to TCP implementations that will block\n   most sequence number\
    \ guessing attacks.  More precisely, such attacks\n   will remain possible if\
    \ and only if the Bad Guy already has the\n   ability to launch even more devastating\
    \ attacks.\n"
- title: Details of the Attack
  contents:
  - "Details of the Attack\n   In order to understand the particular case of sequence\
    \ number\n   guessing, one must look at the 3-way handshake used in the TCP open\n\
    \   sequence [2].  Suppose client machine A wants to talk to rsh server\n   B.\
    \  It sends the following message:\n           A->B: SYN, ISNa\n   That is, it\
    \ sends a packet with the SYN (\"synchronize sequence\n   number\") bit set and\
    \ an initial sequence number ISNa.\n   B replies with\n           B->A: SYN, ISNb,\
    \ ACK(ISNa)\n   In addition to sending its own initial sequence number, it\n \
    \  acknowledges A's.  Note that the actual numeric value ISNa must\n   appear\
    \ in the message.\n   A concludes the handshake by sending\n           A->B: ACK(ISNb)\n\
    \   The initial sequence numbers are intended to be more or less random.\n   More\
    \ precisely, RFC 793 specifies that the 32-bit counter be\n   incremented by 1\
    \ in the low-order position about every 4\n   microseconds.  Instead, Berkeley-derived\
    \ kernels increment it by a\n   constant every second, and by another constant\
    \ for each new\n   connection.  Thus, if you open a connection to a machine, you\
    \ know to\n   a very high degree of confidence what sequence number it will use\
    \ for\n   its next connection.  And therein lies the attack.\n   The attacker\
    \ X first opens a real connection to its target B -- say,\n   to the mail port\
    \ or the TCP echo port.  This gives ISNb.  It then\n   impersonates A and sends\n\
    \        Ax->B: SYN, ISNx\n   where \"Ax\" denotes a packet sent by X pretending\
    \ to be A.\n   B's response to X's original SYN (so to speak)\n        B->A: SYN,\
    \ ISNb', ACK(ISNx)\n   goes to the legitimate A, about which more anon.  X never\
    \ sees that\n   message but can still send\n        Ax->B: ACK(ISNb')\n   using\
    \ the predicted value for ISNb'.  If the guess is right -- and\n   usually it\
    \ will be -- B's rsh server thinks it has a legitimate\n   connection with A,\
    \ when in fact X is sending the packets.  X can't\n   see the output from this\
    \ session, but it can execute commands as more\n   or less any user -- and in\
    \ that case, the game is over and X has won.\n   There is a minor difficulty here.\
    \  If A sees B's message, it will\n   realize that B is acknowledging something\
    \ it never sent, and will\n   send a RST packet in response to tear down the connection.\
    \  There are\n   a variety of ways to prevent this; the easiest is to wait until\
    \ the\n   real A is down (possibly as a result of enemy action, of course).  In\n\
    \   actual practice, X can gag A by exploiting a very common\n   implementation\
    \ bug; this is described below.\n"
- title: The Fix
  contents:
  - "The Fix\n   The choice of initial sequence numbers for a connection is not\n\
    \   random.  Rather, it must be chosen so as to minimize the probability\n   of\
    \ old stale packets being accepted by new incarnations of the same\n   connection\
    \ [6, Appendix A].  Furthermore, implementations of TCP\n   derived from 4.2BSD\
    \ contain special code to deal with such\n   reincarnations when the server end\
    \ of the original connection is\n   still in TIMEWAIT state [7, pp. 945].  Accordingly,\
    \ simple\n   randomization, as suggested in [8], will not work well.\n   But duplicate\
    \ packets, and hence the restrictions on the initial\n   sequence number for reincarnations,\
    \ are peculiar to individual\n   connections.  That is, there is no connection,\
    \ syntactic or semantic,\n   between the sequence numbers used for two different\
    \ connections.  We\n   can prevent sequence number guessing attacks by giving\
    \ each\n   connection -- that is, each 4-tuple of <localhost, localport,\n   remotehost,\
    \ remoteport> -- a separate sequence number space.  Within\n   each space, the\
    \ initial sequence number is incremented according to\n   [2]; however, there\
    \ is no obvious relationship between the numbering\n   in different spaces.\n\
    \   The obvious way to do this is to maintain state for dead connections,\n  \
    \ and the easiest way to do that is to change the TCP state transition\n   diagram\
    \ so that both ends of all connections go to TIMEWAIT state.\n   That would work,\
    \ but it's inelegant and consumes storage space.\n   Instead, we use the current\
    \ 4 microsecond timer M and set\n           ISN = M + F(localhost, localport,\
    \ remotehost, remoteport).\n   It is vital that F not be computable from the outside,\
    \ or an attacker\n   could still guess at sequence numbers from the initial sequence\n\
    \   number used for some other connection.  We therefore suggest that F\n   be\
    \ a cryptographic hash function of the connection-id and some secret\n   data.\
    \  MD5 [9] is a good choice, since the code is widely available.\n   The secret\
    \ data can either be a true random number [10], or it can be\n   the combination\
    \ of some per-host secret and the boot time of the\n   machine.  The boot time\
    \ is included to ensure that the secret is\n   changed on occasion.  Other data,\
    \ such as the host's IP address and\n   name, may be included in the hash as well;\
    \ this eases administration\n   by permitting a network of workstations to share\
    \ the same secret data\n   while still giving them separate sequence number spaces.\
    \  Our\n   recommendation, in fact, is to use all three of these items: as\n \
    \  random a number as the hardware can generate, an administratively-\n   installed\
    \ pass phrase, and the machine's IP address.  This allows for\n   local choice\
    \ on how secure the secret is.\n   Note that the secret cannot easily be changed\
    \ on a live machine.\n   Doing so would change the initial sequence numbers used\
    \ for\n   reincarnated connections; to maintain safety, either dead connection\n\
    \   state must be kept or a quiet time observed for two maximum segment\n   lifetimes\
    \ after such a change.\n"
- title: A Common TCP Bug
  contents:
  - "A Common TCP Bug\n   As mentioned earlier, attackers using sequence number guessing\
    \ have\n   to \"gag\" the trusted machine first.  While a number of strategies\
    \ are\n   possible, most of the attacks detected thus far rely on an\n   implementation\
    \ bug.\n   When SYN packets are received for a connection, the receiving system\n\
    \   creates a new TCB in SYN-RCVD state.  To avoid overconsumption of\n   resources,\
    \ 4.2BSD-derived systems permit only a limited number of\n   TCBs in this state\
    \ per connection.  Once this limit is reached,\n   future SYN packets for new\
    \ connections are discarded; it is assumed\n   that the client will retransmit\
    \ them as needed.\n   When a packet is received, the first thing that must be\
    \ done is a\n   search for the TCB for that connection.  If no TCB is found, the\n\
    \   kernel searches for a \"wild card\" TCB used by servers to accept\n   connections\
    \ from all clients.  Unfortunately, in many kernels this\n   code is invoked for\
    \ any incoming packets, not just for initial SYN\n   packets.  If the SYN-RCVD\
    \ queue is full for the wildcard TCB, any new\n   packets specifying just that\
    \ host and port number will be discarded,\n   even if they aren't SYN packets.\n\
    \   To gag a host, then, the attacker sends a few dozen SYN packets to\n   the\
    \ rlogin port from different port numbers on some non-existent\n   machine.  This\
    \ fills up the SYN-RCVD queue, while the SYN+ACK packets\n   go off to the bit\
    \ bucket.  The attack on the target machine then\n   appears to come from the\
    \ rlogin port on the trusted machine.  The\n   replies -- the SYN+ACKs from the\
    \ target -- will be perceived as\n   packets belonging to a full queue, and will\
    \ be dropped silently.\n   This could be avoided if the full queue code checked\
    \ for the ACK bit,\n   which cannot legally be on for legitimate open requests.\
    \  If it is\n   on, RST should be sent in reply.\n"
- title: Security Considerations
  contents:
  - "Security Considerations\n   Good sequence numbers are not a replacement for cryptographic\n\
    \   authentication.  At best, they're a palliative measure.\n   An eavesdropper\
    \ who can observe the initial messages for a connection\n   can determine its\
    \ sequence number state, and may still be able to\n   launch sequence number guessing\
    \ attacks by impersonating that\n   connection.  However, such an eavesdropper\
    \ can also hijack existing\n   connections [11], so the incremental threat isn't\
    \ that high.  Still,\n   since the offset between a fake connection and a given\
    \ real\n   connection will be more or less constant for the lifetime of the\n\
    \   secret, it is important to ensure that attackers can never capture\n   such\
    \ packets.  Typical attacks that could disclose them include both\n   eavesdropping\
    \ and the variety of routing attacks discussed in [8].\n   If random numbers are\
    \ used as the sole source of the secret, they\n   MUST be chosen in accordance\
    \ with the recommendations given in [10].\n"
- title: Acknowledgments
  contents:
  - "Acknowledgments\n   Matt Blaze and Jim Ellis contributed some crucial ideas to\
    \ this RFC.\n   Frank Kastenholz contributed constructive comments to this memo.\n"
- title: References
  contents:
  - "References\n   [1]  R.T. Morris, \"A Weakness in the 4.2BSD UNIX TCP/IP Software\"\
    ,\n        CSTR 117, 1985, AT&T Bell Laboratories, Murray Hill, NJ.\n   [2]  Postel,\
    \ J., \"Transmission Control Protocol\", STD 7, RFC 793,\n        September 1981.\n\
    \   [3]  Kohl, J., and C. Neuman, \"The Kerberos Network Authentication\n    \
    \    Service (V5)\", RFC 1510, September 1993.\n   [4]  Atkinson, R., \"Security\
    \ Architecture for the Internet\n        Protocol\", RFC 1825, August 1995.\n\
    \   [5]  Postel, J., and J. Reynolds, \"Telnet Protocol Specification\",\n   \
    \     STD 8, RFC 854, May 1983.\n   [6]  Jacobson, V., Braden, R., and L. Zhang,\
    \ \"TCP Extension for\n        High-Speed Paths\", RFC 1885, October 1990.\n \
    \  [7]  G.R. Wright, W. R. Stevens, \"TCP/IP Illustrated, Volume 2\",\n      \
    \  1995.  Addison-Wesley.\n   [8]  S. Bellovin, \"Security Problems in the TCP/IP\
    \ Protocol Suite\",\n        April 1989, Computer Communications Review, vol.\
    \ 19, no. 2, pp.\n        32-48.\n   [9]  Rivest, R., \"The MD5 Message-Digest\
    \ Algorithm\", RFC 1321,\n        April 1992.\n   [10] Eastlake, D., Crocker,\
    \ S., and J. Schiller, \"Randomness\n        Recommendations for Security\", RFC\
    \ 1750, December 1994.\n   [11] L. Joncheray, \"A Simple Active Attack Against\
    \ TCP, 1995, Proc.\n        Fifth Usenix UNIX Security Symposium.\n"
- title: Author's Address
  contents:
  - "Author's Address\n   Steven M. Bellovin\n   AT&T Research\n   600 Mountain Avenue\n\
    \   Murray Hill, NJ  07974\n   Phone: (908) 582-5886\n   EMail: smb@research.att.com\n"
