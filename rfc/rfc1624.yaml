- title: __initial_text__
  contents:
  - "                  Computation of the Internet Checksum\n                    \
    \     via Incremental Update\n"
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo provides information for the Internet community.\
    \  This memo\n   does not specify an Internet standard of any kind.  Distribution\
    \ of\n   this memo is unlimited.\n"
- title: Abstract
  contents:
  - "Abstract\n   This memo describes an updated technique for incremental computation\n\
    \   of the standard Internet checksum.  It updates the method described\n   in\
    \ RFC 1141.\n"
- title: Table of Contents
  contents:
  - 'Table of Contents

    '
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   Incremental checksum update is useful in speeding up several\n\
    \   types of operations routinely performed on IP packets, such as\n   TTL update,\
    \ IP fragmentation, and source route update.\n   RFC 1071, on pages 4 and 5, describes\
    \ a procedure to\n   incrementally update the standard Internet checksum.  The\n\
    \   relevant discussion, though comprehensive, was not complete.\n   Therefore,\
    \ RFC 1141 was published to replace this description\n   on Incremental Update.\
    \  In particular, RFC 1141 provides a\n   more detailed exposure to the procedure\
    \ described in RFC 1071.\n   However, it computes a result for certain cases that\
    \ differs\n   from the one obtained from scratch (one's complement of one's\n\
    \   complement sum of the original fields).\n   For the sake of completeness,\
    \ this memo briefly highlights key\n   points from RFCs 1071 and 1141.  Based\
    \ on these discussions,\n   an updated procedure to incrementally compute the\
    \ standard\n   Internet checksum is developed and presented.\n"
- title: 2.  Notation and Equations
  contents:
  - "2.  Notation and Equations\n   Given the following notation:\n          HC  -\
    \ old checksum in header\n          C   - one's complement sum of old header\n\
    \          HC' - new checksum in header\n          C'  - one's complement sum\
    \ of new header\n          m   - old value of a 16-bit field\n          m'  -\
    \ new value of a 16-bit field\n          RFC 1071 states that C' is:\n       \
    \   C' = C + (-m) + m'    --    [Eqn. 1]\n             = C + (m' - m)\n   As RFC\
    \ 1141 points out, the equation above is not useful for direct\n   use in incremental\
    \ updates since C and C' do not refer to the actual\n   checksum stored in the\
    \ header.  In addition, it is pointed out that\n   RFC 1071 did not specify that\
    \ all arithmetic must be performed using\n   one's complement arithmetic.\n  \
    \ Finally, complementing the above equation to get the actual checksum,\n   RFC\
    \ 1141 presents the following:\n          HC' = ~(C + (-m) + m')\n           \
    \   = HC + (m - m')\n              = HC + m + ~m'    --    [Eqn. 2]\n"
- title: 3.  Discussion
  contents:
  - "3.  Discussion\n   Although this equation appears to work, there are boundary\
    \ conditions\n   under which it produces a result which differs from the one obtained\n\
    \   by checksum computation from scratch.  This is due to the way zero is\n  \
    \ handled in one's complement arithmetic.\n   In one's complement, there are two\
    \ representations of zero: the all\n   zero and the all one bit values, often\
    \ referred to as +0 and -0.\n   One's complement addition of non-zero inputs can\
    \ produce -0 as a\n   result, but never +0.  Since there is guaranteed to be at\
    \ least one\n   non-zero field in the IP header, and the checksum field in the\n\
    \   protocol header is the complement of the sum, the checksum field can\n   never\
    \ contain ~(+0), which is -0 (0xFFFF).  It can, however, contain\n   ~(-0), which\
    \ is +0 (0x0000).\n   RFC 1141 yields an updated header checksum of -0 when it\
    \ should be\n   +0.  This is because it assumed that one's complement has a\n\
    \   distributive property, which does not hold when the result is 0 (see\n   derivation\
    \ of [Eqn. 2]).\n   The problem is avoided by not assuming this property.  The\
    \ correct\n   equation is given below:\n          HC' = ~(C + (-m) + m')    --\
    \    [Eqn. 3]\n              = ~(~HC + ~m + m')\n"
- title: 4.  Examples
  contents:
  - "4.  Examples\n   Consider an IP packet header in which a 16-bit field m = 0x5555\n\
    \   changes to m' = 0x3285.  Also, the one's complement sum of all other\n   header\
    \ octets is 0xCD7A.\n   Then the header checksum would be:\n          HC = ~(0xCD7A\
    \ + 0x5555)\n             = ~0x22D0\n             =  0xDD2F\n   The new checksum\
    \ via recomputation is:\n          HC' = ~(0xCD7A + 0x3285)\n              = ~0xFFFF\n\
    \              =  0x0000\n   Using [Eqn. 2], as specified in RFC 1141, the new\
    \ checksum is\n   computed as:\n          HC' = HC + m + ~m'\n              =\
    \  0xDD2F + 0x5555 + ~0x3285\n              =  0xFFFF\n   which does not match\
    \ that computed from scratch, and moreover can\n   never obtain for an IP header.\n\
    \   Applying [Eqn. 3] to the example above, we get the correct result:\n     \
    \     HC' = ~(C + (-m) + m')\n              = ~(0x22D0 + ~0x5555 + 0x3285)\n \
    \             = ~0xFFFF\n              =  0x0000\n"
- title: 5.  Checksum verification by end systems
  contents:
  - "5.  Checksum verification by end systems\n   If an end system verifies the checksum\
    \ by including the checksum\n   field itself in the one's complement sum and then\
    \ comparing the\n   result against -0, as recommended by RFC 1071, it does not\
    \ matter if\n   an intermediate system generated a -0 instead of +0 due to the\
    \ RFC\n   1141 property described here.  In the example above:\n          0xCD7A\
    \ + 0x3285 + 0xFFFF = 0xFFFF\n          0xCD7A + 0x3285 + 0x0000 = 0xFFFF\n  \
    \ However, implementations exist which verify the checksum by computing\n   it\
    \ and comparing against the header checksum field.\n   It is recommended that\
    \ intermediate systems compute incremental\n   checksum using the method described\
    \ in this document, and end systems\n   verify checksum as per the method described\
    \ in RFC 1071.\n   The method in [Eqn. 3] is slightly more expensive than the\
    \ one in RFC\n   1141.  If this is a concern, the two additional instructions\
    \ can be\n   eliminated by subtracting complements with borrow [see Sec. 7]. \
    \ This\n   would result in the following equation:\n          HC' = HC - ~m -\
    \ m'    --    [Eqn. 4]\n          In the example shown above,\n          HC' =\
    \ HC - ~m - m'\n              =  0xDD2F - ~0x5555 - 0x3285\n              =  0x0000\n"
- title: 6.  Historical Note
  contents:
  - "6.  Historical Note\n   A historical aside: the fact that standard one's complement\n\
    \   arithmetic produces negative zero results is one of its main\n   drawbacks;\
    \ it makes for difficulty in interpretation.  In the CDC\n   6000 series computers\
    \ [4], this problem was avoided by using\n   subtraction as the primitive in one's\
    \ complement arithmetic (i.e.,\n   addition is subtraction of the complement).\n"
- title: 7.  Acknowledgments
  contents:
  - "7.  Acknowledgments\n   The contribution of the following individuals to the\
    \ work that led to\n   this document is acknowledged:\n          Manu Kaycee -\
    \ Ascom Timeplex, Incorporated\n          Paul Koning - Digital Equipment Corporation\n\
    \          Tracy Mallory - 3Com Corporation\n          Krishna Narayanaswamy -\
    \ Digital Equipment Corporation\n          Atul Pandya - Digital Equipment Corporation\n\
    \   The failure condition was uncovered as a result of IP testing on a\n   product\
    \ which implemented the RFC 1141 algorithm.  It was analyzed,\n   and the updated\
    \ algorithm devised.  This algorithm was also verified\n   using simulation. \
    \ It was also shown that the failure condition\n   disappears if the checksum\
    \ verification is done as per RFC 1071.\n"
- title: 8.  Security Considerations
  contents:
  - "8.  Security Considerations\n   Security issues are not discussed in this memo.\n"
- title: 9.  Conclusions
  contents:
  - "9.  Conclusions\n   It is recommended that either [Eqn. 3] or [Eqn. 4] be the\n\
    \   implementation technique used for incremental update of the standard\n   Internet\
    \ checksum.\n"
- title: 10.  Author's Address
  contents:
  - "10.  Author's Address\n   Anil Rijsinghani\n   Digital Equipment Corporation\n\
    \   550 King St\n   Littleton, MA 01460\n   Phone: (508) 486-6786\n   EMail: anil@levers.enet.dec.com\n"
- title: 11.  References
  contents:
  - "11.  References\n   [1] Postel, J., \"Internet Protocol - DARPA Internet Program\
    \ Protocol\n       Specification\", STD 5, RFC 791, DARPA, September 1981.\n \
    \  [2] Braden, R., Borman, D., and C. Partridge, \"Computing the Internet\n  \
    \     Checksum\", RFC 1071, ISI, Cray Research, BBN Laboratories,\n       September\
    \ 1988.\n   [3] Mallory, T., and A. Kullberg, \"Incremental Updating of the\n\
    \       Internet Checksum\", RFC 1141, BBN Communications, January 1990.\n   [4]\
    \ Thornton, J., \"Design of a Computer -- the Control\n       Data 6600\", Scott,\
    \ Foresman and Company, 1970.\n"
