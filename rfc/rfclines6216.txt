Abstract This document shows example call flows demonstrating the use of Transport Layer Security (TLS), and Secure/Multipurpose Internet Mail Extensions (S/MIME) in Session Initiation Protocol (SIP).
It also provides information that helps implementers build interoperable SIP software.
To help facilitate interoperability testing, it includes certificates used in the example call flows and processes to create certificates for testing.
This document is informational and is not normative on any aspect of SIP.
implementations are becoming very common.
Several implementations of the S/MIME ([RFC5751]) portion of SIP ([RFC3261]) are also becoming available.
After several interoperability events, it is clear that it is difficult to write these systems without any test vectors or examples of "known good" messages to test against.
Furthermore, testing at the events is often hindered due to the lack of a commonly trusted certification authority to sign the certificates used in the events.
This document addresses both of these issues by providing messages that give detailed examples that implementers can use for comparison and that can also be used for testing.
In addition, this document provides a common certificate and private key that can be used to set up a mock Certification Authority (CA) that can be used during the SIP interoperability events.
Certificate requests from the users will be signed by the private key of the mock CA.
The document also provides some hints and clarifications for implementers.
A simple SIP call flow using SIPS URIs and TLS is shown in Section 3.
The certificates for the hosts used are shown in Section 2.2, and the CA certificates used to sign these are shown in Section 2.1.
The text from Section 4.1 through Section 4.3 shows some simple SIP call flows using S/MIME to sign and encrypt the body of the message.
The user certificates used in these examples are shown in Section 2.3.
These host certificates are signed with the same mock CA private key.
Section 5 presents a partial list of items that implementers should consider in order to implement systems that will interoperate.
Scripts and instructions to make certificates that can be used for interoperability testing are presented in Appendix A, along with methods for converting these to various formats.
The certificates used while creating the examples and test messages in this document are made available in Appendix B. Binary copies of various messages in this document that can be used for testing appear in Appendix C. 2.
The certificate used by the CA to sign the other certificates is shown below.
This is an X.509v3 ([X.509]) certificate.
Note that the X.509v3 Basic Constraints in the certificate allows it to be used as a CA, certification authority.
This certificate is not used directly in the TLS call flow; it is used only to verify user and host certificates.
sha1WithRSAEncryption Issuer: C US, ST California, L San Jose,
O sipit, OU Sipit Test Certificate Authority Validity
Not Before: Jan 27 18:36:05 2011 GMT
C US, ST California, L San Jose, O sipit, OU Sipit Test Certificate Authority Subject Public Key Info:
rsaEncryption RSA Public Key: (2048 bit)
X509v3 Subject Key Identifier: 95:45:7E:5F:2B:EA:65:98:12:91:04:
C7:68:9A:58:16:77:27 X509v3 Authority Key Identifier: 95:45:7E:5F:2B:EA:65:98:12:91:04:
C7:68:9A:58:16:77:27 X509v3 Basic Constraints: CA:TRUE Signature Algorithm:
a8:2a:8d:d7:2c: 91:06:c8:0c The certificate content shown above and throughout this document was rendered by the OpenSSL "x509" tool.
These dumps are included only as informative examples.
Output may vary among future revisions of the tool.
At the time of this document's publication, there were some irregularities in the presentation of Distinguished Names (DNs).
In particular, note that in the "Issuer" and "Subject" fields, it appears the intent is to present DNs in Lightweight Directory Access Protocol (LDAP) format.
If this was intended, the spaces should have been omitted after the delimiting commas, and the elements should have been presented in order of most specific to least specific.
Please refer to Appendix A of [RFC4514].
Using the "Issuer" DN from above as an example and following guidelines in [RFC4514], it should have instead appeared as:
Issuer: OU Sipit Test Certificate Authority,
O sipit,L San Jose, ST California,C US
([X.683]) parse of the CA certificate is shown below. 0
l  949 cons: SEQUENCE 4:
3 cons:   cont [ 0 ] 10:
69 74 20 54 65
72 74 69   Sipit Test Certi 66
61 74 65 20 41
74 79   ficate Authority 153:
69 74 20 54 65
72 74 69   Sipit Test Certi 66
61 74 65 20 41
74 79   ficate Authority 301:
30 82 01 0a 02 82
ab 1f 91 61 f1 1c
a6 7b 16 9b b7 14 79 e4 30
77 d7 d1 f5 5b 2c
50 ef 9d 31 2b c0 59
64 6f 1f 55 a7 3d fd
70 ac 26 f8 34 41 70 d9 c0 03 91 6a ba d1 11
31 de b9 19 70 8d 5d a7 7d 8b 19
3f ae ff de 1f db
94 b3 46 77 6c
ae ae ff 3e d6   ?
47 cb e0 2b 23 76
rL bd 60 fe f7 21 fe
eb d0 91 1b 21 59
0e aa bf d5 b1 6c
a3 3f a5 7d 0e 95 46 f6 f6
58 67 83 75 42
18 0b a4 41 39 b2 2f 6c 80 2c 78
10 f8 c0 0b 0d
73 99 9e 0d d7 97 50 cb cc 45
E 34 23 49 41 85 22 24 ad 29 c3 02
80 cons:   cont [ 3 ]
X509v3 Subject Key Identifier 606:
14 95 45 7e 5f 2b
68 9a 58 16 77
16 80 14 95 45
ea 65 98 12 91 04 f3   0
l  257 prim:  BIT STRING 00 06
5f 9e ae a0 9a bc b5 b9
98 94 cb 0d 66 a9 83 e8
47 31 a6 af 5c 3f
f8 df 05 92 b7 db
72 87 66 c5 ab 35 89 01
ca 2d fb 45 e6 cc 4b f8 21
a2 f0 e6 94 8d 97 4a 00
2d f6 50 55 13 a4 d3 b2
a2 f4 f1 b9 6d 48 5e 5c
mH^\ f3 de e0 fc 59 09 a1 d9 14 61 65 bf d8 3f b9 ba
2e 7c ed 5c 24 9b
6b ca aa 5f f1 c1 1e
82 0f fb 4c 71
4d 7b 38 c8 e3 8a 2a 19 34 44
26 0b ea f0 47 38 46 28 65 04 e2 01
e5 f5 53 74 77 74 75 6d c6 d9 c2
;.. 5c 55 53 34 74 52 a8 26 b1 2f
72 2f bd 6c 69
b5 17 a8 2a 8d d7 2c 91 06 c8
The certificate for the host example.com is shown below.
Note that the Subject Alternative Name is set to example.com and is a DNS type.
The certificates for the other hosts are shown in Appendix B. Version: 3 (0x2)
sha1WithRSAEncryption Issuer: C US, ST California, L San Jose,
O sipit, OU Sipit Test Certificate Authority Validity
Feb  7 19:32:17 2011 GMT
Not After : Jan 14 19:32:17 2111
C US, ST California, L San Jose, O sipit, CN example.com Subject Public Key Info:
rsaEncryption RSA Public Key: (2048 bit)
d4:ed:bc:a0:47:54:09:8c:6e:6d:53: 9a:2c:c9:68:c6:6f:f1:3d:91:1a:24:43:77:7d:91: 69:4b Exponent: 65537 (0x10001)
X509v3 Subject Alternative Name: DNS:example.com, URI:
example.com X509v3 Basic Constraints: CA:
FALSE X509v3 Subject Key Identifier: CC:06:59:5B:8B:5E:
F9:43:19:17 X509v3 Authority Key Identifier: 95:45:7E:5F:2B:EA:65:98:12:91:04:
Digital Signature, Non Repudiation, Key Encipherment X509v3
TLS Web Server Authentication, 1.3.6.1.5.5.7.3.20 Signature Algorithm:
The example host certificate above, as well as all the others presented in this document, are signed directly by a root CA.
These certificate chains have a length equal to two: the root CA and the host certificate.
Non root CAs exist and may also sign certificates.
The certificate chains presented by hosts with certificates signed by non root CAs will have a length greater than two.
For more details on how certificate chains are validated, see Sections 6.1 and 6.2 of [RFC5280].
User Certificates User certificates are used by many applications to establish user identity.
The user certificate for fluffy@example.com is shown below.
Note that the Subject Alternative Name has a list of names with different URL types such as a sip, im, or pres URL.
This is necessary for interoperating with a Common Profile for Instant Messaging (CPIM
In this example, example.com is the domain for fluffy.
The message could be coming from any host in  .example.com, and the address of record (AOR) in the user certificate would still be the same.
The others are shown in Appendix B.1.
These certificates make use of the Extended Key Usage (EKU) extension discussed in [RFC5924].
Note that the X509v3 Extended Key Usage attribute refers to the SIP OID introduced in [RFC5924], which is 1.3.6.1.5.5.7.3.20.
sha1WithRSAEncryption Issuer: C US, ST California, L San Jose,
O sipit, OU Sipit Test Certificate Authority Validity
Feb  7 19:32:17 2011 GMT
Not After : Jan 14 19:32:17 2111
C US, ST California, L San Jose, O sipit, CN fluffy Subject Public Key Info: Public Key Algorithm:
rsaEncryption RSA Public Key: (2048 bit)
X509v3 Subject Alternative Name: URI:sip:fluffy@example.com, URI:im:fluffy@example.com,
URI:pres:fluffy@example.com X509v3 Basic Constraints: CA:
FALSE X509v3 Subject Key Identifier: 85:97:09:
CF:98:87:52 X509v3 Authority Key Identifier: 95:45:7E:5F:2B:EA:65:98:12:91:04:
Digital Signature, Non Repudiation, Key Encipherment X509v3
E mail Protection, 1.3.6.1.5.5.7.3.20 Signature Algorithm: sha1WithRSAEncryption a8:a9:8f:d8:8a:0b:88:
:a8: aa:9e:b0:62:d3:36:f0:0c:b7:2f:a7:17:92:52:36:29:14:0a: d6:65:86:67:73:74:6e:aa:3c:ee:47:38:1e:c8:6e:06:81:85: 1c:2e:f0:b6:04:7d:6c:38:db:81:9c:b8:07:e3:07:be:f5:2f: 09:68:63:04:6b:87:0e:36:b9:a1:
bf:6f:09 Versions of these certificates that do not make use of EKU are also included in Appendix B.2 3.
Call Flow with Message Over TLS 3.1.
The flow below shows the edited SSLDump output of the host example.com forming a TLS [RFC5246] connection to example.net.
In this example, mutual authentication is not used.
Note that the client proposed three protocol suites including TLS RSA WITH AES
128 CBC SHA defined in [RFC5246].
The certificate returned by the server contains a Subject Alternative Name that is set to example.net.
A detailed discussion of TLS can be found in SSL and TLS [EKR TLS].
For more details on the SSLDump tool, see the SSLDump Manual [ssldump manpage].
This example does not use the Server Extended Hello (see [RFC5246]).
Handshake ClientHello Version 3.1 random[32]  4c 09 5b a7
eb 43 52 30 dd 98 4d 09
bb 79 8c dc 59 cd c2 1f b7 ec cipher suites TLS ECDHE RSA WITH AES 256 CBC SHA TLS ECDH RSA WITH AES 256
CBC SHA TLS DHE RSA WITH AES 256 SHA TLS RSA WITH AES 256
CBC SHA TLS DSS RSA WITH AES 256 SHA TLS ECDHE RSA WITH AES 128
CBC SHA TLS ECDH RSA WITH AES 128 CBC SHA TLS DHE RSA WITH AES 128 CBC SHA TLS RSA WITH AES 128 CBC SHA TLS DHE DSS WITH AES 128
CBC SHA TLS ECDHE RSA WITH DES 192 CBC3 SHA TLS ECDH RSA WITH DES 192 CBC3 SHA TLS DHE RSA WITH 3DES EDE CBC SHA TLS RSA WITH 3DES EDE CBC SHA TLS DHE DSS WITH 3DES EDE CBC SHA TLS ECDHE RSA WITH RC4 128 SHA TLS ECDH RSA WITH RC4 128 SHA TLS RSA WITH RC4 128 SHA TLS RSA WITH RC4 128 MD5 TLS DHE RSA WITH DES CBC SHA TLS DHE RSA EXPORT WITH DES40 CBC SHA TLS RSA WITH DES CBC SHA TLS RSA EXPORT WITH DES40 CBC SHA TLS DHE DSS WITH DES CBC SHA TLS DHE DSS EXPORT WITH DES40 CBC SHA TLS RSA EXPORT WITH RC4 40 MD5 compression methods
Handshake ServerHello Version 3.1 random[32]  4c 09 5b a7 30
87 74 c7 16 98 24 d5 af
ef c3 78 0c 94
d4 94 d2 7b a6 3f 40 04
25 f6 e0 session id[0]  cipherSuite
TLS RSA WITH AES 256 CBC SHA compressionMethod
Handshake Certificate 1 4  0.0012
ServerHelloDone 1 5  0.0043 (0.0031)
Handshake Certificate 1 6  0.0043 (0.0000)
Handshake ClientKeyExchange 1 7  0.0043 (0.0000)  C
ChangeCipherSpec 1 8  0.0043 (0.0000)  C
Handshake 1 10 0.0129 (0.0000)  S
ChangeCipherSpec 1 11 0.0129 (0.0000)
application data 1 13 0.0134 (0.0000)
application data 1 14 0.2150
application data 1 15 0.2150 (0.0000)
application data 1 16 12.2304 (12.0154)
C  TCP FIN 1 17 12.2321 (0.0011)
Once the TLS session is set up, the following MESSAGE request (as defined in [RFC3428] is sent from fluffy@example.com to kumiko@example.net.
Note that the URI has a SIPS URL and that the VIA indicates that TLS was used.
In order to format this document, the <allOneLine> convention from [RFC4475] is used to break long lines.
The actual message does not contain the line breaks contained within those tags.
branch z9hG4bK d8754z c785a077a9a8451b 1 d8754z ;
fluffy@example.com:15001>;tag 1a93430b Call ID: OTZmMDE2OWNlYTVjNDkzYzBhMWRlMDU4NDExZmU4ZTQ.
multipart/signed, text/plain, application/pkcs7 mime, application/sdp,
> Content Type: text/plain Content Length:
When a User Agent (UA) goes to send a message to example.com, the UA can see if it already has a TLS connection to example.com and if it does, it may send the message over this connection.
A UA should have some scheme for reusing connections as opening a new TLS connection for every message results in awful performance.
Implementers are encouraged to read [RFC5923] and [RFC3263].
The response is sent from example.net to example.com over the same TLS connection.
branch z9hG4bK d8754z c785a077a9a8451b 1 d8754z ;
fluffy@example.com:15001>;tag 1a93430b Call ID: OTZmMDE2OWNlYTVjNDkzYzBhMWRlMDU4NDExZmU4ZTQ.
4308 MESSAGE Content Length: 0 4.
Call Flow with S/MIME Secured Message 4.1.
MESSAGE Request with Signed Body Below is an example of a signed message.
The values on the Content  Type line (multipart/signed)
and on the Content Disposition line have been broken across lines to fit on the page, but they are not broken across lines in actual implementations.
z9hG4bK d8754z 3a922b6dc0f0ff37 1 d8754z ; rport 50739 <
From: <sip:fluffy@example.com>;tag ef6bad5e Call ID:
multipart/signed, text/plain, application/pkcs7 mime, application/sdp,
Content Type: multipart/signed;boundary 3b515e121b43a911; micalg sha1;protocol "application/pkcs7 signature" </allOneLine
774  3b515e121b43a911 Content Type: text/plain Content Transfer Encoding: binary
attachment;handling required; filename smime.p7s </allOneLine
It is important to note that the signature ("BINARY BLOB 1") is computed over the MIME headers and body, but excludes the multipart boundary lines.
The value on the Message body line ends with CRLF.
The CRLF is included in the boundary and is not part of the signature computation.
To be clear, the signature is computed over data starting with the "C" in the "Content Type" and ending with the "!"
Content Type: text/plain Content Transfer Encoding: binary
Following is the ASN.1 parsing of encrypted contents referred to above as "BINARY BLOB 1".
Note that at address 30, the hash for the signature is specified as SHA 1.
Also note that the sender's certificate is not attached as it is optional in [RFC5652]. 0
SEQUENCE { 4    9:   OBJECT
signedData (1 2 840 113549 1 7 2)
IDENTIFIER countryName (2 5 4 6)
organizationName (2 5 4 10)
96 A3 84 17 4E EF 8A 4D :
79 50 1A B1 7D 4A D3 C1 03 9F 19
CD 28 03 98 6E 2C 0C F6 8D 93 40 F2 88 DA 29 :
AD 0B C2 0E F9 D3 6A 95 2C 79 6E C2 3D 62 E6 54 :
A9 1B AC 66 DB 16 B7 44 6C 03 1B 71 9C
FC D8 3D 2B 57 17 CB 81 03 2A 56 69 :
81 82 FA 78 DE D2 3A 2F FA A3 C5 EA 8B E8 0C 36 :
1B BC DC FD 1B 8C 2E 0F 01 AF D9 E1 04
75 7C BD D9 0B DD AA FA 36 E3 EC E4 A5 35 46 :
BE A2 97 1D AD BA 44 54 3A ED 94 DA 76 4A 51 BA :
} SHA 1 parameters may be omitted entirely, instead of being set to NULL, as mentioned in [RFC3370].
The above dump of Blob 1 has SHA 1 parameters set to NULL.
Below are the same contents signed with the same key, but omitting the NULL according to [RFC3370].
This is the preferred encoding.
This is covered in greater detail in Section 5. 0
1 3 14 3 2 26)
OBJECT IDENTIFIER countryName (2 5 4 6)
OBJECT IDENTIFIER localityName (2 5 4 7)
organizationName (2 5 4 10)
96 A3 84 17 4E EF 8A 4D :
1 3 14 3 2 26)
79 50 1A B1 7D 4A D3 C1 03 9F 19
CD 28 03 98 6E 2C 0C F6 8D 93 40 F2 88 DA 29 :
AD 0B C2 0E F9 D3 6A 95 2C 79 6E C2 3D 62 E6 54 :
A9 1B AC 66 DB 16 B7 44 6C 03 1B 71 9C
FC D8 3D 2B 57 17 CB 81 03 2A 56 69 :
81 82 FA 78 DE D2 3A 2F FA A3 C5 EA 8B E8 0C 36 :
1B BC DC FD 1B 8C 2E 0F 01 AF D9 E1 04
75 7C BD D9 0B DD AA FA 36 E3 EC E4 A5 35 46 :
BE A2 97 1D AD BA 44 54 3A ED 94 DA 76 4A 51 BA :
MESSAGE Request with Encrypted Body Below is an example of an encrypted text/plain message that says "Hello!".
The binary encrypted contents have been replaced with the block "BINARY BLOB 2".
SIP/2.0/TCP 192.0.2.2:15001; branch z9hG4bK d8754z c276232b541dd527 1 d8754z ; rport 50741 </allOneLine>
multipart/signed, text/plain, application/pkcs7 mime, application/sdp,
attachment;handling required; filename smime.p7 </allOneLine
> Content Transfer Encoding: binary <allOneLine
> Content Type: application/pkcs7 mime;smime type enveloped data; name smime.p7m </allOneLine
Following is the ASN.1 parsing of "BINARY BLOB 2".
Note that at address 454, the encryption is set to aes128 CBC. 0
SEQUENCE { 4    9:   OBJECT IDENTIFIER envelopedData (
1 2 840 113549 1 7 3)
countryName (2 5 4 6)
organizationName (2 5 4 10)
B9 12 8F 32 AB 4A E2 38 C1 E0 53 69 88 D6 25 E7 :
40 03 B1 DE 79 21 A3 E8 23 5A 1B CB FB 58
48 A7 C8 F0 3D DF 41 A3 5A
70 82 FA B0 DE :
D8 94 7C 6C 2E 01 FE 33 BD 62
CB 07 4F 58 DE 6F :
B4 FB 46 72 58 9A 88 A0 85 BC 23 D7 C8 :
90 8D 4A 5F 3F
96 7C AC D4 E2 19 E8 02 B6 :
0E F3 0D F2 91 4A 67 A9 EE 51
59 60 0C D7 EB :
A3 FB 04 B3 C9
A5 EB 79 ED B3 56 F8 F6 51 B2 5E :
D8 77 76 C6 :
13 A6 48 12 7B 25 CC 22 5D 73 BD 40
aes128 CBC (2 16 840 1 101 3 4 1 2)
CA 35 CA BD 1E 78 83 D9 20
63 1B 0B B0 2D 88 06 7F 78 80 F3 5A 3E DC 35 :
MESSAGE Request with Encrypted and Signed Body
In the example below, some of the header values have been split across multiple lines.
Where the lines have been broken, the <allOneLine> convention has been used.
This was only done to make it fit in the RFC format.
Specifically, the application/pkcs7 mime Content Type line is one line with no whitespace between the "mime;" and the "smime type".
The values are split across lines for formatting, but are not split in the real message.
The binary encrypted content has been replaced with "BINARY BLOB 3", and the binary signed content has been replaced with "BINARY BLOB 4".
d8754z 97a26e59b7262b34 1 d8754z ;
379f5b27 Call ID: MjYwMzdjYTY3YWRkYzgzMjU0MGI4Mzc2Njk1YzJlNzE. CSeq:
multipart/signed, text/plain, application/pkcs7 mime, application/sdp,
Content Type: multipart/signed;boundary e8df6e1ce5d1e864; micalg sha1;protocol "application/pkcs7 signature" </allOneLine
> Content Length: 1455  e8df6e1ce5d1e864 <allOneLine
> Content Type: application/pkcs7 mime;smime type enveloped data; name smime.p7m </allOneLine
attachment;handling required; filename smime.p7 </allOneLine
attachment;handling required; filename smime.p7s </allOneLine
Below is the ASN.1 parsing of "BINARY BLOB 3". 0
SEQUENCE { 4    9:   OBJECT IDENTIFIER envelopedData (
1 2 840 113549 1 7 3)
countryName (2 5 4 6)
organizationName (2 5 4 10)
8B DD D0 76 6D 9C 46 73 C1 44 A0 10 FF 16 A4 83 :
74 85 21 74 7D E0 FD 42 C0 97 00 82 A2 80 81 22 :
7C 99 6A B6 03 3F 7E F6 48 EA 91 49 35 F1 :
FD 40 54 5D AC F7 84 EA 3F
E9 47 F2 D1 AE DC 13 7E 1B 83 5C 8C C4 :
BC 59 E6 FD 6E 9A B0 91
aes128 CBC (2 16 840 1 101 3 4 1 2)
1D 66 29 46 52 40 13 E1 3B 4A
23 E5 EC AB F9 35 :
A6 B6 A4 BE C0 02
31 06 19 C4 39 22 7D 10 4C 0D :
F4 96 04 78 11 85 4E 7E E3 C3 BC B2 DF 55 17 79 :
Below is the ASN.1 parsing of "BINARY BLOB 4". 0
SEQUENCE { 4    9:   OBJECT
signedData (1 2 840 113549 1 7 2)
IDENTIFIER countryName (2 5 4 6)
organizationName (2 5 4 10)
96 A3 84 17 4E EF 8A 4D :
6E 51 AC 24 2E BA 7C A1 EE 80 A8 55 BC D4 64
FC E5 57 4E C6 3B 67 35 AA E4 78
93 EE 67 63 77 1E 7A 82 BC 1E 26 0F
39 75 0C A6 :
52 EC 27 88 14 BD DB C3 54 C7 :
FC E7 91 1C DB 22 4A
90 7B 58 5F DB 7A 96 :
96 A0 25 61 C2 58 A2 28 E5 B3 B2 F1 6D
This section describes some common interoperability problems.
These were observed by the authors at SIPit interoperability events.
Implementers should be careful to verify that their systems do not introduce these common problems, and, when possible, make their clients forgiving in what they receive.
Implementations should take extra care to produce reasonable error messages when interacting with software that has these problems.
Some SIP clients incorrectly only do SSLv3 and do not support TLS.
See Section 26.2.1 of [RFC3261].
Many SIP clients were found to accept expired certificates with no warning or error.
See Section 4.1.2.5 of [RFC5280].
When used with SIP, TLS and S/MIME provide the identity of the peer that a client is communicating with in the Subject Alternative Name in the certificate.
The software checks that this name corresponds to the identity the server is trying to contact.
Normative text describing path validation can be found in Section 7 of [RFC5922] and Section 6 of [RFC5280].
If a client is trying to set up a TLS connection to good.example.com
and it gets a TLS connection set up with a server that presents a valid certificate but with the name evil.example.com, it will typically generate an error or warning of some type.
Similarly with S/MIME, if a user is trying to communicate with sip:fluffy@example.com, one of the items in the Subject Alternate Name set in the certificate will need to match according to the certificate validation rules in Section 23 of [RFC3261] and Section 6 of [RFC5280].
Some implementations used binary MIME encodings while others used base64.
It is advisable that implementations send only binary and are prepared to receive either.
See Section 3.2 of [RFC5621].
In several places in this document, the messages contain the encoding for the SHA 1 digest algorithm identifier.
The preferred form for encoding as set out in Section 2 of [RFC3370] is the form in which the optional AlgorithmIdentifier parameter field is omitted.
However, [RFC3370] also says the recipients need to be able to receive the form in which the AlgorithmIdentifier parameter field is present and set to NULL.
Examples of the form using NULL can be found in Section 4.2 of [RFC4134].
Receivers really do need to be able to receive the form that includes the NULL because the NULL form, while not preferred, is what was observed as being generated by most implementations.
Implementers should also note that if the algorithm is MD5 instead of SHA 1, then the form that omits the AlgorithmIdentifier parameters field is not allowed and the sender has to use the form where the NULL is included.
The preferred encryption algorithm for S/MIME in SIP is AES as defined in [RFC3853].
Observed S/MIME interoperability has been better when UAs did not attach the senders' certificates.
Attaching the certificates significantly increases the size of the messages, which should be considered when sending over UDP.
Furthermore, the receiver cannot rely on the sender to always send the certificate, so it does not turn out to be useful in most situations.
Please note that the certificate path validation algorithm described in Section 6 of [RFC5280] is a complex algorithm for which all of the details matter.
There are numerous ways in which failing to precisely implement the algorithm as specified in Section 6 of [RFC5280] can create a security flaw,
a simple example of which is the failure to check the expiration date that is already mentioned above.
It is important for developers to ensure that this validation is performed and that the results are verified by their applications or any libraries that they use.
This section provides a non exhaustive list of tests that implementations should perform while developing systems that use S/MIME and TLS for SIP.
Much of the required behavior for inspecting certificates when using S/MIME and TLS with SIP is currently underspecified.
The non  normative recommendations in this document capture the current folklore around that required behavior, guided by both related normative works such as [RFC4474]
(particularly, Section 13.4 Domain Names and Subordination) and informative works such as [RFC2818], Section 3.1.
To summarize, test plans should:  For S/MIME secured bodies, ensure that the peer's URI (address of  record, as per [RFC3261], Section 23.3) appears in the subjectAltName of the peer's certificate as a uniformResourceIdentifier field.
For TLS, ensure that the peer's hostname appears as described in [RFC5922].
Wildcard matching is not allowed against these dNSName entries.
See Section 7.1 of [RFC5922].
ensure that the most specific CommonName in the Subject field matches if there are no dNSName entries in the subjectAltName at all (which is not the same as there being no matching dNSName entries).
The peer's hostname is discovered from the initial DNS query in the server location process [RFC3263].
IP addresses can appear in subjectAltName ([RFC5280]) of the peer's certificate, e.g., "IP:192.168.0.1".
Note that if IP addresses are used in subjectAltName, there are important ramifications regarding the use of Record Route headers that also need to be considered.
See Section 7.5 of [RFC5922].
Use of IP addresses instead of domain names is inadvisable.
For each of these tests, an implementation will proceed past the verification point only if the certificate is "good".
S/MIME protected requests presenting bad certificate data will be rejected.
S/MIME protected responses presenting bad certificate information will be ignored.
TLS connections involving bad certificate data will not be completed.
Bad peer certificate (peer URI does not appear in subjectAltName)
Bad peer certificate (valid authority chain does not end at a trusted CA) 4.
Bad peer certificate (incomplete authority chain) 5.
Bad peer certificate (the current time does not fall within the period of validity) 6.
Bad peer certificate (certificate, or certificate in authority chain, has been revoked)
Bad peer certificate ("Digital Signature" is not specified as an X509v3 Key Usage)
TLS : Good peer certificate (hostname appears in dNSName in subjectAltName) 9.
TLS : Good peer certificate (no dNSNames in subjectAltName, hostname appears in Common Name (CN) of Subject)
Good peer certificate (CN of Subject empty, and subjectAltName extension contains an iPAddress stored in the octet string in network byte order form as specified in RFC 791
Bad peer certificate (no match in dNSNames or in the Subject CN) 12.
TLS : Bad peer certificate (valid authority chain does not end at a trusted CA) 13.
Bad peer certificate (incomplete authority chain) 14.
Bad peer certificate (the current time does not fall within the period of validity) 15.
Bad peer certificate (certificate, or certificate in authority chain, has been revoked) 16.
Bad peer certificate ("TLS Web Server Authentication" is not specified as an X509v3 Key Usage)
Bad peer certificate (Neither "SIP Domain" nor "Any Extended Key Usage" specified as an X509v3 Extended Key Usage, and X509v3 Extended Key Usage is present) 8.
Security Considerations Implementers must never use any of the certificates provided in this document in anything but a test environment.
Installing the CA root certificates used in this document as a trusted root in operational software would completely destroy the security of the system while giving the user the impression that the system was operating securely.
This document recommends some things that implementers might test or verify to improve the security of their implementations.
It is impossible to make a comprehensive list of these, and this document only suggests some of the most common mistakes that have been seen at the SIPit interoperability events.
Just because an implementation does everything this document recommends does not make it secure.
This document does not show any messages to check certificate revocation status (see Sections 3.3 and 6.3 of [RFC5280]) as that is not part of the SIP call flow.
The expectation is that revocation status is checked regularly to protect against the possibility of certificate compromise or repudiation.
For more information on how certificate revocation status can be checked, see [RFC2560] (Online Certificate Status Protocol) and [RFC5055] (Server Based Certificate Validation Protocol).
Appendix A.  Making Test Certificates
These scripts allow you to make certificates for test purposes.
The certificates will all share a common CA root so that everyone running these scripts can have interoperable certificates.
these certificates are totally insecure and are for test purposes only.
All the CAs created by this script share the same private key to facilitate interoperability testing, but this totally breaks the security since the private key of the CA is well known.
The instructions assume a Unix like environment with openssl installed, but openssl does work in Windows too.
version 0.9.8j was used to generate the certificates used in this document.
Make sure you have openssl installed by trying to run "openssl".
Run the makeCA script found in Appendix A.1; this creates a subdirectory called demoCA.
If the makeCA script cannot find where your openssl is installed you will have to set an environment variable called OPENSSLDIR to whatever directory contains the file openssl.cnf.
You can find this with a "locate openssl.cnf".
You are now ready to make certificates.
To create certificates for use with TLS, run the makeCert script found in Appendix A.2 with the fully qualified domain name of the proxy you are making the certificate for, e.g., "makeCert host.example.net domain eku".
This will generate a private key and a certificate.
The private key will be left in a file named domain key example.net.pem in Privacy Enhanced Mail (PEM) format.
The certificate will be in domain cert example.net.pem.
Some programs expect both the certificate and private key combined together in a Public Key Cryptography Standards (PKCS)
This is created by the script and left in a file named example.net.p12.
Some programs expect this file to have a .pfx extension instead of .p12
just rename the file if needed.
A file with a certificate signing request, called example.net.csr, is also created and can be used to get the certificate signed by another CA.
A second argument indicating the number of days for which the certificate should be valid can be passed to the makeCert script.
It is possible to make an expired certificate using the command "
Anywhere that a password is used to protect a certificate, the password is set to the string "password".
The root certificate for the CA is in the file root cert fluffyCA.pem.
For things that need DER format certificates, a certificate can be converted from PEM to DER with "openssl x509  in cert.pem
Some programs expect certificates in PKCS #7 format (with a file extension of .p7c).
You can convert these from PEM format to PKCS #7 with "openssl
IE (version 8), Outlook Express (version 6), and Firefox (version 3.5) can import and export .p12 files and .p7c files.
You can convert a PKCS #7 certificate to PEM format with "openssl
DER  outform PEM  out cert.pem".
The private key can be converted to PKCS #8 format with "openssl pkcs8  in a key.pem  topk8
In general, a TLS client will just need the root certificate of the CA.
A TLS server will need its private key and its certificate.
These could be in two PEM files, a single file with both certificate and private key PEM sections, or a single .p12 file.
An S/MIME program will need its private key and certificate, the root certificate of the CA, and the certificate for every other user it communicates with.
x rm  rf demoCA mkdir
private # This is done to generate the exact serial number used for the RFC echo "4902110184015C" >
index.txt # You may need to modify this for where your default file is # you can find where yours in by typing "openssl ca" for D in /etc/ssl /usr/local/ssl /sw/
etc/ssl /sw/share/ssl; do CONF ${OPENSSLDIR:
$CONF set your OPENSSLDIR variable" exit fi
openssl.cnf  <<EOF [ sipdomain cert ] subjectAltName
serverAuth,1.3.6.1.5.5.7.3.20 [ sipdomain req ] basicConstraints
subjectKeyIdentifier hash [ sipuser cert ]
emailProtection,1.3.6.1.5.5.7.3.20 [ sipuser req ] basicConstraints   CA:FALSE subjectAltName \${ENV::ALTNAME}
hash [ sipdomain noeku cert ]
[ sipdomain noeku req ] basicConstraints
hash [ sipuser noeku cert ]
[ sipuser noeku req ] basicConstraints
PRIVATE KEY  MIIFDjBABgkqhkiG9w0BBQ0wMzAbBgkqhkiG9w0BBQwwDgQIlwtc771DlNUCAggA MBQGCCqGSIb3DQMHBAhRD3Z1i2TavwSCBMgXoXo0H/dTplHwnqfW7Uh1dr776z7B lsNxlenMA6lYmALF/4E1tqOE2/aEbr8W3wTVjNpew9r5TBsbA1I9/FMMe
3qH8ov1ZXVCqEmaHkajSAhFJKXCgpSXaIx2FSntzpVFbRpnw Yd9eml9xwgE3l9aRuvR6p61fd051LzCh7KjvorV1CemPUT6YRBamFNCBoT7cqjhE kqMQfowKkMEY0p2dzMnGzsSPKk10nI53RgPyD/8FT5dPuq073SyjxTKhAbvl kVl lrfZ6b7P/UKwLBCT3bLG6uU/Es84euWN U2JXIADPoCcVeWrUqkf4j368c2Z8Zdd
A27X4ZJ q YfsFNiOA7vshHi3Am3gBzQhEEGsRdzgkf8qmtlRGhq/823GEexoUfu 8SiOOjoU08HGAkTtPWjV5 0C6Q6RW9SmNMwz7msZHoKTQ8kz2LKXUwb6DBwWcw6/
demoCA/cacert.pem <<EOF  BEGIN CERTIFICATE  MIIDtTCCAp2gAwIBAgIJAJajhBdO74pMMA0GCSqGSIb3DQEBBQUAMHAxCzAJBgNV BAYTAlVTMRMwEQYDVQQIDApDYWxpZm9ybmlhMREwDwYDVQQHDAhTYW4gSm9zZTEO
kWHxHMXNpnsWm7cUeeQwnpjQ7Ae3vXfX0fVbLOLu5rGw8IX6pbzLzM9pLE/8UO d MSvAWer7ZG8fVac9/XDSVtsUmReScKwm DRBcNnAA5FqutERj6wSMd65GXCNXad9 ixnMQD u/94f25SzRndsrq7/PtaEW8LeCyZl0JHHcEvHCkq/x5cE3bpYR8vgKyN2 h2XFVTQQqycfHPgwPbCbyqKBcky9YP73If4L2wvb6VsBNtQoFWt569CRGyFZuA6q
EOF # uncomment the following lines to generate your own key pair # openssl req
demoCA/cacert.pem  days 36500  config ${CONF}
<<EOF # US # California
# San Jose # sipit # Sipit Test Certificate Authority # #
# EOF # either randomly generate a serial number, or set it manually # hexdump  n 4  e '4/1 "%04u"' /dev/random >
demoCA/cacert.pem root cert fluffyCA.pem A.2.
x # Make a symbolic link to this file called "makeUserCert" # if you wish to use it to make certs for users.
# # if [ $
alice@example.org [days]" echo "days is how long the certificate is valid" echo "days set to 0 generates an invalid certificate" exit 0 fi
${ADDR}" if [ $2   "user" ]
; then CNVALUE $USER else CNVALUE $DOMAIN fi
rm  f demoCA/newcerts/  export ALTNAME openssl genrsa   out
${ADDR} key.pem 2048 openssl req  new   config
EOF US California San Jose sipit ${CNVALUE} EOF if [ $DAYS   0 ]; then openssl ca  extensions ${ExtPrefix} cert  config
password  policy policy anything \
notext  out ${ADDR} cert.pem \
{ADDR}.csr else openssl ca  extensions
password  policy policy anything \
notext  out ${ADDR} cert.pem \
\  out ${ADDR}.p12  in ${ADDR} cert.pem \
inkey ${ADDR} key.pem  name $
noout  text case ${ADDR} in
${ADDR} key.pem domain key ${ADDR}.pem; \ mv ${ADDR} cert.pem domain cert ${ADDR}.pem
;; esac Appendix B.  Certificates for Testing This section contains various certificates used for testing in PEM format.
These certificates make use of the EKU specification described in [RFC5924].
Fluffy's user certificate for example.com:  BEGIN
uXjWrKwEeDKYwnXnarctszzj65el74tZQlAXe/6nga83p fjH7CN0HIvbBRCxgFo 4Y/9Vk19zxbcqgVhCwrKyuxR7FNuPSsAgP41GwYKYROIC0TzzP0rDrSiC6CXhBQu 7ivjL8EanoaaeGqiTFeT5wEm01YNvbAv NrHPAHcyy0xjGzGXLRj6LKiQBG/rfht EgGXHUf4ahWL
Fluffy's private key for user certificate for example.com:  BEGIN
RSA PRIVATE KEY  MIIEpQIBAAKCAQEAoyxZDOm85OzTnvuZAuyxNjq30x1Nwzq2rlC9X1UId4x pOnw aDEojyMyVhnDIpenbf2nIioBta9hvV9
wRTlmCm0NE44iibuDdrbJ7l41qysBHgy mMJ152q3LbM84 uXpe LWUJQF3v p4GvN6fn4x wjdByL2wUQsYBaOGP
mnhqokxXk cBJtNWDb2wL/jaxzwB3MstMYxsxly0Y iyokARv634bRIBlx1H GoV i/snlnNERjTXJBzPVo3UvtaUW/
TvbG3fGEYIw WK4DMraUbZ66Jlnj1XfADoxWOTsygV KYhZcbwjBWAUSOSduAtfwa6b72OnWd28J 8KYvrXECgYEA1eCJZZSavxhlfxqsWC/WdQ8S3SimI62KSLrN3bI0RO/60KiU2ap3 16ZhNLq8t3DjpkWiZrukixs2odsU7k3z6q qm
Oj HiyNJHHSTXRjNqNBLuTP2fMU uPDfFX/92n6WFjkXB d1P8VSJxUkUjCg36/H 1uHMzQZFBKXXVOPTROG3GDcCgYEAoPFmq8QZOIA
END RSA PRIVATE KEY  Kumiko's user certificate for example.net:  BEGIN CERTIFICATE  MIIEGTCCAwGgAwIBAgIJAJajhBdO74pOMA0GCSqGSIb3DQEBBQUAMHAxCzAJBgNV BAYTAlVTMRMwEQYDVQQIDApDYWxpZm9ybmlhMREwDwYDVQQHDAhTYW4gSm9zZTEO MAwGA1UECgwFc2lwaXQxKTAnBgNVBAsMIFNpcGl0IFRlc3QgQ2VydGlmaWNhdGUg
/PUn2XXcTbP019DqA MkMiX4NNGpDZyeoIrcquKUXK7UQlRoKy Q6Va11DijHTqdPTWFIrRhbRUhPjj0WvG1AFPYRRG/IZfRQcH8Aw1w8XSp614m1mY 9XwL5LuHNimAgjADHMrSk1obmHws0thU9nV0t1UG1SA1lA32JZX81bqKDg3Tq1Ho fsKU3GwoBZG507lVG5bcV2ByA5HnCFpFeDTDYE23197USLhqRtIqrxxr64SFo9Dn P0mYH6e3lRveAZhdKIbCHgGaKqIr7
NetesegCwi7xBOgSK GxUWpTVuDW5smyTTZyvrMQhpkckcyO KvuUVz0/yK67oSume1vo75KY8BvgfeZXZG4PjqqelJ3czB0XLfeb6KFmtoiHQ/R7 4i/O9 MhB3Zoeg5bm5f2g9ljYwRbD1Uav/aH9WeGEX992d9XJ/
YKxyS721re/840FwDvt67w GIfFf7ISrAlkHwroYt0NMnLv610rka8qnVvaQ  END CERTIFICATE  Kumiko's private key for user certificate for example.net:
RSA PRIVATE KEY  MIIEpAIBAAKCAQEAy aHVXQN4BX
iLSRsR14 bqwbg663SHTAB1Yzvu W2Bo2oMnvMJrEe0o407l2J6bJoZZvF CKmKqrYiKaJkXgrBW/jtZ6xCWGPCNAL1pnX1IWG5tDIgj8SALOO4N7hyR0rrA4Rz W0vuVQSYFFX4BhvdxZesyRwCqn3x0pPSff95Ad vuJd5CYuFZCuyGkszQ3fi Nia Gqs01EuyolEv72rsw2E5
xuPel4RcppHNjdYkPDhPLnOUwQBqFL6kyU nTEF k6VIZvNsmGbB6wpHU1cjDAZUx71p6W49TECgYAMHpa7pExUDT076rH9tpCe sume544lsHtX0WbOAipVCuqzeRdKmBWJIBW7YoUS3yqH82JoPM8lamqfwQJmZ9Yh /5YlAIwUJk
QGFm0 Ih5ZMgB3eI7GGLB1sNe0nY1Ve Dzv0pc3UQHQGI7CLDuYLy91V9o8St17 V76JXIHDYy97U4bdBau/kkgGm gd9PJ
END RSA PRIVATE KEY  Domain certificate for example.com:  BEGIN
Z qrNT72tvrB84rBgHEyGGwztfoWWhbhoWwZZ/VFaGRvsjHc41oastSHiZb9h7o4 TgoZBwNLm7E   END CERTIFICATE  Private key for domain certificate for example.com:  BEGIN
Nc9wcWN96UNngUzqtR63TKM1CHsh DSpzB2OdjXW/H9SO5mdgdffqCnpskK SReBiBZqKEJjcfFSL5GGVOwT8EFDvgEW6 XoSXdsEgJcGSHYkK91ViZProaaJiTGfTCNlhtT0WVLa3RI1ZK5DU6fvHfYdYwxKs M3gAULoHBbO5ARpjVWzheuyjB647AoOhaeDD3C1h6bLjs3HIps/
9TId2qilLQV y8bdTHQ9rSqW9SF q5ShOpZa79ER asuDuqxU TiewS0ircrkIyzQmCc1fnfBJh5y6GukpUk8HdLLkA29fV3ZJe Y4ZbL b4TEy/RxEECQREgtnQiaw08yOlT1dobNwxzVsi3mrhtOpfbPBERZUSsCgYEA5JG2 aGRCkyzASGAnZmqqXCP/pImU tJb2OCgQ6/3gsxi/
GjGUfzQ3Vm2baeNMg7sH8C5mQ9nskDuCzdlVAB2bMp23oPl6cvPIb0E   END RSA PRIVATE KEY  Domain certificate for example.net:
BEGIN CERTIFICATE  MIID9DCCAtygAwIBAgIJAJajhBdO74pQMA0GCSqGSIb3DQEBBQUAMHAxCzAJBgNV BAYTAlVTMRMwEQYDVQQIDApDYWxpZm9ybmlhMREwDwYDVQQHDAhTYW4gSm9zZTEO MAwGA1UECgwFc2lwaXQxKTAnBgNVBAsMIFNpcGl0IFRlc3QgQ2VydGlmaWNhdGUg
QXV0aG9yaXR5MCAXDTExMDIwNzE5MzIxOFoYDzIxMTEwMTE0MTkzMjE4WjBbMQsw CQYDVQQGEwJVUzETMBEGA1UECBMKQ2FsaWZvcm5pYTERMA8GA1UEBxMIU2FuIEpv c2UxDjAMBgNVBAoTBXNpcGl0MRQwEgYDVQQDEwtleGFtcGxlLm5ldDCCASIwDQYJ KoZIhvcNAQEBBQADggEPADCCAQoCggEBAOwsdgPVSPMweLWsBDHUSXJS6Vk6pu6K sVg8IWMf1g0TWTPc5jUAQlWlLNtmN4gcSzq5z1ecvf3rLMomJPZaWbektTTg1KZl 2wQgyP vx
ozCBoDAnBgNVHREEIDAeggtleGFtcGxlLm5ldIYPc2lwOmV4YW1wbGUubmV0MAkG A1UdEwQCMAAwHQYDVR0OBBYEFNiNYjKOu6f046JHy28GDRVMeR7sMB8GA1UdIwQY MBaAFJVFfl8r6mWYEpEE82PHaJpYFncnMAsGA1UdDwQEAwIF4DAdBgNVHSUEFjAU BggrBgEFBQcDAQYIKwYBBQUHAxQwDQYJKoZIhvcNAQEFBQADggEBAHUzR2H2IWrQ ls3iqNlG7815mOjm9mgQX6WP2ILwBOTOqtPJ9uE2XZU9qw6d9vdcbAgLpp4Em4T7 Whcs0zVTrgKpWjDlho/boRS1gP2Qu9I86zJzf2R3mhTHUsbpxIwMCcHQg/fdIIeP
Private key for domain certificate for example.net:
BW/uiGNY8OXpbKBOQTZVccOGF03g xc8rJ6ddffmwHnZ83K037aozxujhA99NmUavHQIDAQABAoIBABfBYR2BlpTfi0S6 yLE6aSjWriILhD76NFxrr/AIg79M8uwEjCNIo2N5 ckXvv4x2l9N0U0 tt2Tii3L
FCmpY30N5cvCHcAE/ncW49bZmH3gQ cmr5UcKKDUY baJyLd8Q1f uSmtrfYZzRT5c 4wmrBUjv3w9poMJuEo4slRaDnyeKJPSNR/6/LJk tqnqgNif9cj9wqF6hWA23dDmmU/kSRtn1KOz5XmV9Jbo4Fu64Fvn/m
GQs6UT PVN4GE0Ms8TTJyvxVkpoagQ36VLw/Wr0jUm Z dv1TIlFWTas8RNmdZHMv0LvfEe Qu2fTI68l2d
END RSA PRIVATE KEY  B.2.
These certificates do not make use of the EKU specification described in [RFC5924].
Most existing certificates fall in this category.
Fluffy's user certificate for example.com:  BEGIN
Ni5yzteHfrMszWnz3t ojgak4XTjBJmP2RO0T67GUpEbFV sDeYtWi G1ebDAR6bf6Jdba2K6DnmkxT5Rr6oYJHIApYbubk28asBQN6EGBBgPEO RReJYrjoJR/rBDDe1bxK ONdFXPlwjI/
wUWGRhCQdhjzY4bx0R5Kwz NHvsb8rjlPqfdcbNujBCw rD /uux0G3HwW Mraj5 U2tUehwz87k6SgdqADzL/
CP2mjzCJo5uDhi tzjeg6ZklTSZYQrL3FSv/AgcUfFI 9HuCGkix/htaoEMy2zNZnZOjdtFME9w7wb3GxxqWTUzl9TToloCXYmLeQo/jwuad 40ybun1P5CWkO5Md2Y5zuNfCsRRz5lLYtAVfANtLBfeFV S87AwrrdeITT iyB7H
Fluffy's private key for user certificate for example.com:  BEGIN
END RSA PRIVATE KEY  Kumiko's user certificate for example.net:  BEGIN
i4OeUBiCv9dgRgPBXffrIIVQdIlCoDeLDusHdsC9EfFWvg pRlKVEDgwccO0F5AV bq3MK2Njma5I0lwpIa0RXYQ0K//oX/ jZeakhFty/R9yer0KaXWdLRd6KtncISui z9rFhlTB9lHg6vNJUN9 Xonbcs7siXbj3qZdhb7oipI4PoQlXVetyu SzAVe6MsU
s8ojWMKnAGLaR7grTBmGQ90e6 cg7hWuoGBlQA0R0h8zWQz5AgMBAAGjga4wgasw UQYDVR0RBEowSIYWc2lwOmt1bWlrb0BleGFtcGxlLm5ldIYVaW06a3VtaWtvQGV4 YW1wbGUubmV0hhdwcmVzOmt1bWlrb0BleGFtcGxlLm5ldDAJBgNVHRMEAjAAMB0G A1UdDgQWBBR6WwH61Ul7BIWeiKM35fMAiE9xazAfBgNVHSMEGDAWgBSVRX5fK pl mBKRBPNjx2iaWBZ3JzALBgNVHQ8EBAMCBeAwDQYJKoZIhvcNAQEFBQADggEBAKE8
/vN MeMJZdTzp1x 8pfPhJgHoyz7nkAxhgzC9RT33ra33BNkMQ6esRlQONJ ZRsRLhHP O7 kvXvmj9AAsA291wY   END CERTIFICATE
Kumiko's private key for user certificate for example.net:  BEGIN RSA PRIVATE KEY  MIIEpAIBAAKCAQEAxP0FTe58Qw7uaL m9HJhyBR/dyoTW0xMgorIq4uDnlAYgr/
nqqQYOzNk/9N8vUs12ds3csXHypuuGrJwAVf648RSPDUUQ2XOoPSL9NeuZt5V1fT 1VyVWanKCBZ5sztISNVPt7Pu8DtGLHch4S/7M gEUQB1Ogz7fyJHvFsCgYEA32mE 6lN67aHkqMLa06ZI9JIk/3SsFIPpjwZ4tk sQCqEzawPvkT7qF2 U8lVt0XXKJZL
cuQxA1i6ye0Gjes63Phl0i0CgYEAuEcILGQpTGMyAYWgC93n5Vu6ir IxO89sgyL ew1irhakLiWTYsTxsyGHwQKb4i0IWOEHWVp7DPDPhcs3tCIezhN8WKm7KtAFj1HO YZfemsFU99lutPwUKmNWqFlXqOkeR7cOHtDsRWM15Q45uKJnYmmkSptHjYFNsGXe q4fK40sCgYBoAYtsLfMlqt7s3htx4hZSMFbLP
/iMGW2DMMAzDW Xxsvw86ibrcWY 8c3hbohuJBpyAzba4QoR2G gtRmodLca tQFMrObETHFglNCY
END RSA PRIVATE KEY  Domain certificate for example.com:  BEGIN CERTIFICATE  MIID1TCCAr2gAwIBAgIJAJajhBdO74pTMA0GCSqGSIb3DQEBBQUAMHAxCzAJBgNV BAYTAlVTMRMwEQYDVQQIDApDYWxpZm9ybmlhMREwDwYDVQQHDAhTYW4gSm9zZTEO MAwGA1UECgwFc2lwaXQxKTAnBgNVBAsMIFNpcGl0IFRlc3QgQ2VydGlmaWNhdGUg
c2UxDjAMBgNVBAoTBXNpcGl0MRQwEgYDVQQDEwtleGFtcGxlLmNvbTCCASIwDQYJ KoZIhvcNAQEBBQADggEPADCCAQoCggEBAKEVuYyZlaqfqks9u9yWQRp9WfI VsQg GpJH3vAfastElCdxlBV7 R2CaQ/GnXDnE0lAC5SiKRcvPHq5OLx1VnDADMWmcXBv wK5n1zN
MBaAFJVFfl8r6mWYEpEE82PHaJpYFncnMAsGA1UdDwQEAwIF4DANBgkqhkiG9w0B AQUFAAOCAQEANH wX56VJd0vVB9 Mef1xItWrSQUyNYZZCBq y/5vIoOp6Chaupn xjTjWf50zg6CK8yKBWq8pGlG45GTUx uCx nVIbHpyTT5 YDDUzlIhhAUzIOOB33
Private key for domain certificate for example.com:
i9RqpyGlXRiN jX6KBZ9UVgh/B0/AcYMa3DImTa0 Uie9kN7jTi5pzvIUAdFh RyQ4tULWr5cgrzv PjGG9tXMthuIbILSumVEwvC P6Ksi1r4xp1ezl8CgYEArF51sk2clqM1qpnzXjMm IJbdsA w6ycD9m1uqaGXGo8UswmqCz70KrspheM0gQfVisjPnU2x7lWz1
Hv4sNUO h01chQKBgQCKLEH7vWQX8fkw yKnmvAFoZ5H3IHUQw/WYsoCOVnWoY vowcuuTTt cbW1VkrtEjJPuYeEPa5NI2kmsNUZGrKCpx/3uq2JfMVopJzJN9biFM4ulcKqf9ie hiVIFVVmxq dVmXBgXCknhYK1Mnt9b3BK6mDqerQjK1TKryqAJ2QpQ
END RSA PRIVATE KEY  Domain certificate for example.net:  BEGIN CERTIFICATE  MIID1TCCAr2gAwIBAgIJAJajhBdO74pUMA0GCSqGSIb3DQEBBQUAMHAxCzAJBgNV BAYTAlVTMRMwEQYDVQQIDApDYWxpZm9ybmlhMREwDwYDVQQHDAhTYW4gSm9zZTEO MAwGA1UECgwFc2lwaXQxKTAnBgNVBAsMIFNpcGl0IFRlc3QgQ2VydGlmaWNhdGUg
GfIuHirCsGtNKSQIC6k74MyD7D75nltnLVgJ7Oxt28CAwEAAaOB hDCBgTAnBgNVHREEIDAeggtleGFtcGxlLm5ldIYPc2lwOmV4YW1wbGUubmV0MAkG A1UdEwQCMAAwHQYDVR0OBBYEFC1TKpLjuKa/dPumVbeFXEW4UR6EMB8GA1UdIwQY MBaAFJVFfl8r6mWYEpEE82PHaJpYFncnMAsGA1UdDwQEAwIF4DANBgkqhkiG9w0B AQUFAAOCAQEAJry8LukecUv4DUs5u
Private key for domain certificate for example.net:
MIIEowIBAAKCAQEAqhbHyDUpucZfZgQ5etuh3altHR mRhZXs7 0hYd12X4AIuWq o08pKYirAAVtna5/tL3k6ReGSBEkbDcG6B 1QlLvMOGpWqJ2A8sxQ t3OkVrN6H8 DAGNzTA0HP/q2RReubvL8XDDNoKgrD7xCbghufYTds2paWaLIo5edi3gsabLonl7 riF9DdWp7TN7lx8spykFuMX9MXvm61ucfbnMTQL jVv7HV93DIOOwfQ034DVkWsj Y12V5UC4foXa/Hhy3BlTNQlfJd7MWbDlJHOG1aRvSIc7QRE17uEIcsK
jy1lHasjL oOBkH51lbmZ4PUuUY072j2665gPm7i0nr25igef842JkbqAV8rAoNlQ26Y7tYLEw 6QyLv0odeb0rHZ8IEzahWAdmIPGCIUcFM7RmyInOatGA0dVEU3uYnkUQQVOi/JTx 46CCMbECgYEA4c1Dv/IVz9pdW1o/0MaJ94zfeg7Pgn5DRXnNMjCsSxVHSMINwlUl BcYozs77vWbIuXiXO2xQe9mGA2ss3 vNxB0eu6EBQ/fK16cQQQH52nXdrV1sqnkN 5B5elFKcZKPfNVWrg0BC6csDndTcHp9STIKsxWkesLzC3Vz5UXZMsocCgYEAwNYV
MZKhxcGXl9tIehJ31foyukCgYB9AUs1PwAeTVX13OrduyhUQ0xOoNmMA491Euh8 FpciPD2t1mzkyZWvjPeIXPwQWLglmMJZJeNeRPnpQcrR165zqXKzSj/wBePn12BM cTXLRp6vnPKhJg wno4eQ5hKzGKYbv1hHs5iCuDx pD4sWExpmW Gdn2FXCYwsAF UCXJ4QKBgAKSrm8Y5xQhd8RAMg9JZLGUpPnmTKNU98f3fUFnX7jZEZETasnn18vd 65x04h58cohJJkNxqeL6k3lc3Mw0pzZrvsIha3ZMEoJPCgwBa8zLzrR13YQin6yf
END RSA PRIVATE KEY  B.3.
Certificate Chaining with a Non Root CA Following is a certificate for a non root CA in example.net.
The certificate was signed by the root CA shown in Section 2.1.
As indicated in Sections 4.2.1.9 and 4.2.1.3 [RFC5280], "cA" is set in Basic Constraints, and "keyCertSign" is set in Key Usage.
This identifies the certificate holder as a signing authority.
sha1WithRSAEncryption Issuer: C US, ST California, L San Jose,
O sipit, OU Sipit Test Certificate Authority Validity
Feb  7 20:21:13 2011 GMT
Not After : Jan 14 20:21:13 2111
C US, ST California, L San Jose, O sipit, OU Test CA for example.net,
CN example.net Subject Public Key Info:
rsaEncryption RSA Public Key: (2048 bit)
X509v3 Subject Key Identifier: 72:70:
FC:6F:40:8F:86:8A:AF:E0:B9:6F:E9:C3 X509v3 Authority Key Identifier:
Certificate Sign Signature Algorithm: sha1WithRSAEncryption 70:73
e5 Robert's certificate was signed by the non root CA in example.net:
sha1WithRSAEncryption Issuer: C US, ST California, L San Jose,
O sipit, OU Test CA for example.net,
Feb  7 20:21:13 2011 GMT
Not After : Jan 14 20:21:13 2111
C US, ST California, L San Jose, O sipit, CN robert Subject Public Key Info:
rsaEncryption RSA Public Key: (2048 bit)
X509v3 Subject Alternative Name: URI:sip:robert@example.net, URI:im:robert@example.net,
URI:pres:robert@example.net X509v3 Basic Constraints: CA:
FALSE X509v3 Subject Key Identifier:
CE X509v3 Authority Key Identifier: 72:70:
FC:6F:40:8F:86:8A:AF:E0:B9:6F:E9:C3 X509v3 Key Usage: Digital Signature,
Non Repudiation, Key Encipherment X509v3
E mail Protection, 1.3.6.1.5.5.7.3.20 Signature Algorithm: sha1WithRSAEncryption 25:99:ea:1a:1e:96:6d:4e:b1:9c:5a:43:77:ea:3a:a7:a1:b7: 22:db:b9:d4:9a:1e:17:
d8:52:bc Certificate for CA for example.net in PEM format:  BEGIN CERTIFICATE
Altmir7vj3hcQhR7tsaGL/ IQe RFowTs6Xkcw9Q0qLtyUmCGPGcUrBlDWBZt4jneM33jGA7Vi3B6fqh9PM2htiyYLC F YtIOSyaRTLBUM0b7UsYNhEQ/
Private key for CA for example.net:
36l7QEVMkg qsiyhqGTVmSIeKHig2OVRZD8DFKkSR2GE1rBpGmujbtjKzkNQrVeW K4cV2cIRA7CC1PCAv91E9PY5CivjTdP156o05QIDAQABAoIBADp/7/pIH7h9vcn3 z7hGNE50kaGBHuPrSh3yJG4a O67XbzaRW2I3XzUaiIeHGixoY7duha9Txu4dbJc f2JijR4uAIs4aSv7NDdW09VNw3o8NkWWLEnV288Eo2Tgqc8wXz/
MAwGA1UEChMFc2lwaXQxIDAeBgNVBAsTF1Rlc3QgQ0EgZm9yIGV4YW1wbGUubmV0 MRQwEgYDVQQDEwtleGFtcGxlLm5ldDAgFw0xMTAyMDcyMDIxMTNaGA8yMTExMDEx NDIwMjExM1owVjELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExETAP BgNVBAcTCFNhbiBKb3NlMQ4wDAYDVQQKEwVzaXBpdDEPMA0GA1UEAxMGcm9iZXJ0 MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA09wUaWtxCSwLD52VCMFk IGbvn5wwBjA56xQW2hnMQU2xz/hTW6UNduyXuhYQn 1XtfttS5
P0J8OFac iMTk7zXRY5EgaBj0jju0DwM oADWwybn V44hkqN6LSFESNsBuVTo3Nbj0bPySyYPP9SZY R FAqycxxfO0E26ZpwvvdPCGtK 20QC6LtQZiyYlEWefgEOncOpA7coFSjDzaKtqwf2/2n07Lp/S72bKIwNh
IpwFgBiQvEGUgV3dR0Jc5sZTETOweWBLebC/CtZfnhBcCNx8jwX5m/CtTzMHuxVs VJ1WpUDn K7 G8KIK0 Kp5QdOCxXptHRLkGPBcUCgYAVgCulFL8B3VBdQfsIpKlo TZEpak5dbydj7ZIlFIZpnUJyggP tOnr87TTafliP0gjr5gT1VWsL8BNTzeYrQSr
jvhK6V6X1mI0tqqcYZ07pC3CJBEtAckHj2Ik ZAEjQMf eH62Rcv6Sbozq0 5dFCBZwzIe2IQomg3J8 OyILSs
This section contains a base64 encoded, gzipped, compressed tar file of various Cryptographic Message Syntax (CMS) messages used in this document.
Saving the data in a file foo.tgz.b64
then running a command like "openssl base64  d  in foo.tgz.b64
xfz  " would recover the CMS messages and allow them to be used as test vectors.
Wu45kWR6brjci VDg9 bX60llnp9fZh 7Mu2VCtCq WG8137EnZmvFFX0zRsCSmISSCuPqja
P8CroDHhfFkMiSABDwC2Ir/T gQ/59PQUEKD0aaTHYG1VviT/OF2CJe PFvjAdJpgXEMUWA8ncUmMCSh0QzIW0RniiUMmu8X4f8L8ESUC8E8MsCDiBCR 0L7 f3Pr7ej/
v9NPV5eaR6TYVRfWLfhu 1lh9PEH1Yl7 3jz7fs3BmbkOBuG3w2pqtwGq9cbhC6OdH96zemPjG4apsSHkbVgcoUcehTFK OWy7cOCpAU/puqGxdgMgZPODtBLNnvfvJ/vNw utn/rowmayYapSsrV8Dykr oeeNqsQnR8adKxop2bOKs3FLYdEZeeaIqUusqmMYP5nVzdYPybwytua2/
Df5/g3Rp9K676TSPAKzVXpT5r4gANOljVwygpRhA84HZyWMATfnfMMN DwK0 pxBog/94EoRv7v8TiV3x/87AfxKfCwoIJBIIk0ABv9X4P7Fj E GIJBEIjXh Px3yBTlMLzydGtWw/w/mMDlCjihKxKD6SdgSLzWHqm1j8sX tI/7/2ACgfJv 5T
K7aM74m3GMg/XX3D/RnboCgzWqWesPS0xb7C07Dt2bQhY0r5C48vzDPpttsi gMka8temQZdYbY/tqp8Vq0rvxIKvIg7nF71/PmnMyyzd0mn6eVzNU dvH2w4 c8XBuLdN0YSMHBfhvHnjYjg78aylKLrrTOlyN1qF PRFl1SrGZNnmU Wjk05 G saWZdicn8BeVBe0g/
TzXvk57XUUPlpio55RgRXTilZfXJSaFGC1pfdB s5D0TSuOD5hWuHzt3rPl05bsKSR3Yz8mrzlhH2NpzbMy/gGXajBNnfSE43YR 3jvQRg9iL6 snz6pwoPn/HV94cw GG9j97uh9im0eWfqutI/HV8 ZH5wcVGI
Xx/zv83N d V///4YpK 5sXlQ7qprG9 kHLvb /jC9FWz3JLOJhz8buf0sYWvLZJEonyC onxfckRlwZiXgfOhedWnYyUrvZX7qZm93n 1doZqlp1q6uV6z33LdJKzkqYP XJmVbNpj1sOoBxllEuvBI3PDCzIy3dZXWA8o8zwmWzddMGi4TsIK0Q690YnP fe4s8oUf1bszJ a9mHln9LAx9Zeu9qrmHYT9LHjGEtOMXzYpKML56DjqwWww Ir5oQ
