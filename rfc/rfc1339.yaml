- title: __initial_text__
  contents:
  - '                     Remote Mail Checking Protocol

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo defines an Experimental Protocol for the Internet\n\
    \   community.  Discussion and suggestions for improvement are requested.\n  \
    \ Please refer to the current edition of the \"IAB Official Protocol\n   Standards\"\
    \ for the standardization state and status of this protocol.\n   Distribution\
    \ of this memo is unlimited.\n"
- title: Abstract
  contents:
  - "Abstract\n   This RFC defines a protocol to provide a mail checking service to\
    \ be\n   used between a client and server pair. Typically, a small program on\n\
    \   a client workstation would use the protocol to query a server in\n   order\
    \ to find out whether new mail has arrived for a specified user.\n"
- title: Intent
  contents:
  - "Intent\n   This RFC defines a simple, low-overhead protocol for checking the\n\
    \   status of a maildrop on a host. It is primarily intended for use in\n   adjunct\
    \ with \"remote mail\" servers such as those implementing the\n   Post Office\
    \ Protocol (RFC 1225). Remote mail clients must poll their\n   servers to discover\
    \ the arrival of mail. Using one of the remote mail\n   protocols for periodic\
    \ checking can be quite impractical and\n   expensive for the server since either\
    \ a constant connection between\n   client and server must be maintained or repeated\
    \ and expensive user\n   validations must be done. Furthermore, users on less\
    \ capable\n   computers may not wish to devote the memory required to have a full\n\
    \   implementation of the client polling for mail.  Thus, we feel that an\n  \
    \ easy to implement and inexpensive to use polling scheme would be of\n   benefit\
    \ both to mail servers and their clients.\n"
- title: Protocol Overview
  contents:
  - "Protocol Overview\n   To avoid connection overhead, the Remote Mail Checking\
    \ Protocol is\n   based on the User Datagram Protocol (UDP), using UDP port 50\
    \ decimal\n   (62 octal) for the server. The protocol provides for both non-\n\
    \   authenticated and authenticated polling. Non-authenticated polling is\n  \
    \ simplest for both client and server. Authenticated polling provides a\n   small\
    \ increment of privacy, at the cost of more complexity in both\n   client and\
    \ server (but still far less than polling with one of the\n   remote mail protocols).\n"
- title: Non-Authenticated Protocol
  contents:
  - "Non-Authenticated Protocol\n   In the non-authenticated version of the protocol,\
    \ the server will\n   listen on port 50 for maildrop check requests for users\
    \ with\n   maildrops on the machine. A client will send a single UDP datagram\n\
    \   from a randomly chosen unreserved UDP port to UDP port 50 on the\n   server.\
    \ The datagram will contain a 32-bit (four-octet) number which\n   is set to all\
    \ zeros (0), followed by a case-sensitive ASCII string of\n   a username on the\
    \ server system. The server will find the maildrop on\n   the system for that\
    \ user and determine the amount of time that has\n   passed since the last message\
    \ in the maildrop was appended, as well\n   as the amount of time that has passed\
    \ since the maildrop was last\n   accessed for reading. The server will then send\
    \ back a single UDP\n   datagram containing three 32-bit numbers in network byte\
    \ order to the\n   originating port on the client. Again, the first will be zero\
    \ (0),\n   the second will contain the number of seconds plus one since the last\n\
    \   addition to the specified user's maildrop and the third will contain\n   the\
    \ number of seconds plus one since the last read on the user's\n   maildrop. If\
    \ the username provided does not exist, if the maildrop is\n   not on the system\
    \ or if the maildrop is empty, the server will send\n   back zero (0) in the last\
    \ two numbers for its reply. The client will\n   consider the maildrop to contain\
    \ new mail if the number of seconds\n   since the last read access is greater\
    \ than or equal to the number of\n   seconds since the last addition access of\
    \ the maildrop and either\n   number is non-zero, old mail if the number of seconds\
    \ since the last\n   read access is less than or equal to the number of seconds\
    \ since the\n   last addition access of the maildrop and either number is non-zero,\n\
    \   and empty if both numbers are zero.\n"
- title: Authenticated Protocol
  contents:
  - "Authenticated Protocol\n   The authenticated protocol operates identically to\
    \ the non-\n   authenticated protocol with the exception of the first interaction\n\
    \   between the server and the client. After the client has sent its\n   initial\
    \ request containing the requested username, the server will\n   send back a single\
    \ UDP packet containing three 32-bit numbers. The\n   first number will be a bit-mask\
    \ instead of the normal 32-bits of\n   zero. The bit-mask will indicate a request\
    \ for authentication. Each\n   bit in the mask represents a type of authentication\
    \ that the server\n   accepts. The bits (with the least significant bit numbered\
    \ 0, and the\n   most significant bit 31) are defined as follows:\n      0   \
    \  Cleartext password The password for the maildrop, not\n            NULL-terminated.\n\
    \      1-23  Reserved for future use\n      24-31 Implementation-dependent. Implementors\
    \ wishing to\n            experiment may use these.\n   For each type of authentication\
    \ that the server accepts, the\n   corresponding bit will be set to one. All other\
    \ bits will be set to\n   zero.  The last two 32-bit numbers in the reply will\
    \ be set to zero.\n   If the client supports authentication, it will send back\
    \ a 32-bit\n   mask with the bit representing the kind of authentication it is\
    \ using\n   set to one, followed by the data used for authentication. The client\n\
    \   is free to use any of the types of authentication indicated by the\n   authentication\
    \ request from the server. If the client does not\n   support authentication and\
    \ it receives an authentication request, it\n   SHOULD stop sending requests (though\
    \ this behavior is not required).\n   Once a valid authentication is received\
    \ by the server for a\n   particular maildrop, the server considers the IP address\
    \ and UDP port\n   of the client along with that maildrop to be an authenticated\n\
    \   address/port/maildrop triple. From then on, normal non-authenticated\n   transactions\
    \ take place between the server and the client as\n   described above. Should\
    \ a datagram come from an authenticated\n   address/port pair with a different\
    \ username, or if some amount of\n   time has elapsed since the last request (which\
    \ is implementation\n   dependent), the server should remove the address/port/maildrop\
    \ triple\n   from its list of authenticated triples and send another\n   authentication\
    \ request. Since the time required for an authenticated\n   triple to become unauthenticated\
    \ is implementation dependent, clients\n   should be prepared to send an authentication\
    \ reply to containing the\n   server whenever it is requested.\n"
- title: Server Implementation Notes
  contents:
  - "Server Implementation Notes\n   Servers which implement either the authenticated\
    \ or non-authenticated\n   protocol may decide that they do not wish to reveal\
    \ the actual amount\n   of time that has passed since the last update or read\
    \ from a\n   maildrop. (See the \"Security Considerations\" section below for\n\
    \   reasons some feel this is problematic.) In this case, a server may\n   instead\
    \ reply with the following:\n                   First 32 bits     Second 32 bits\
    \     Third 32 bits\n      New mail           0                 0            \
    \      1\n      Old mail           0                 1                  0\n  \
    \    No mail            0                 0                  0\n   These values\
    \ will appear to the client as correctly representing new,\n   old or no mail\
    \ respectively but will give no indication of the actual\n   times that the changes\
    \ took place.\n   Servers implementing the non-authenticated protocol MUST provide\
    \ some\n   mechanism by which users on the system can give permission for their\n\
    \   maildrops to accessed by the protocol. See the \"Security\n   Considerations\"\
    \ section below for specifics.\n"
- title: Client Implementation Notes
  contents:
  - "Client Implementation Notes\n   Clients MUST not send more than one poll (and\
    \ one authentication) per\n   minute. In particular, lack of server response should\
    \ not result in\n   retransmission.\n   Since the last two numbers in an authentication\
    \ request from a server\n   are always 0 as are the last two numbers in a response\
    \ for an empty\n   or non-existent maildrop, clients that do not support authentication\n\
    \   need not examine the first number in the server datagram at all\n   (though\
    \ they are encouraged to do so for the sake of proper reporting\n   to the user).\n\
    \   Clients can turn the modification interval into absolute time, and\n   track\
    \ the changing of this absolute time in order to discern the\n   arrival of new\
    \ mail (as opposed to the mere existence of unread\n   mail). However, such clients\
    \ should bear three things in mind.\n   First, network delays and clock vagaries\
    \ may result in small\n   inconsistencies in times. A \"slop factor\" of several\
    \ seconds is\n   encouraged. Second, the reading of mail often entails modification\
    \ of\n   the maildrop; the relationship of the access and modification\n   intervals\
    \ should always be consulted. Third, the special results of\n   (1,0) and (0,1)\
    \ are most properly handled as special cases.\n   Clients need not recall whether\
    \ or not they are authenticated (though\n   they must use a consistent port if\
    \ they receive any authentication\n   requests for a given maildrop). It is sufficient\
    \ to issue requests\n   when desired, and to respond to any authentication requests\
    \ that\n   appear.\n"
- title: Security Considerations
  contents:
  - "Security Considerations\n   The are two security considerations for the protocol.\
    \ The first is\n   one mainly of privacy. Some sites and individual users consider\
    \ it\n   problematic to have information about mail arrival available freely.\n\
    \   This can be a simple privacy issue for individuals or a security\n   issue\
    \ for highly secure sites. The authenticated version of the\n   protocol allows\
    \ sites to have a reasonable amount of security in that\n   only people with passwords\
    \ can access this information. The protocol\n   currently only uses cleartext\
    \ passwords, but can be simply modified\n   to use other authentication formats.\
    \ The scheme mentioned in \"Server\n   Implementation Notes\" of using only (0,1)\
    \ and (1,0) in the responses\n   also may limit access to some types of information.\
    \  Implementations\n   that do not use the authenticated scheme MUST have a mechanism\
    \ by\n   which a user can give consent to have this information made\n   available;\
    \ the default for the unauthenticated implementation should\n   be that a user's\
    \ maildrop cannot be accessed until consent of the\n   user is given. (For example,\
    \ UNIX server implementations may wish to\n   make use of the \"owner execute\"\
    \ bit to indicate whether a particular\n   maildrop allows use of the unauthenticated\
    \ protocol. If this is done,\n   a single \"stat\" call can be used to gather\
    \ all information required\n   to respond to a poll.) Servers which do not implement\
    \ authentication\n   should simply return a zero-filled datagram for maildrops\
    \ which don't\n   have permission.\n   The other security consideration involves\
    \ unknown maildrops and\n   usernames. Some site administrators consider it a\
    \ security risk give\n   out any information which would reveal the existence\
    \ or non-existence\n   of a certain username or maildrop on the system. For this\
    \ reason, we\n   have chosen to have the server send back a zero-filled datagram\
    \ as\n   the response to either a request for an unknown username or a\n   maildrop\
    \ that does not exist or is empty. In this way, potential\n   security violations\
    \ are limited, since there is no way to tell the\n   difference between an empty\
    \ maildrop and non-existent maildrop, and\n   also no way to tell if the user\
    \ exists on the system or not. If\n   greater security is desired, the protocol\
    \ should probably not be run\n   in the first place.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Steve Dorner\n   Digital Computer Laboratory\n   University\
    \ of Illinois at Urbana-Champaign\n   1304 West Springfield Avenue\n   Urbana,\
    \ Illinois 61801\n   Phone: (217) 244-1765\n   EMail: s-dorner@uiuc.edu\n   Pete\
    \ Resnick\n   The Beckman Institute\n   University of Illinois at Urbana-Champaign\n\
    \   405 North Mathews Avenue\n   Urbana, Illinois 61801\n   Phone: (217) 244-1265\n\
    \   EMail: resnick@cogsci.uiuc.edu\n"
