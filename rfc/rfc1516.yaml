- title: __initial_text__
  contents:
  - "                     Definitions of Managed Objects\n                    for\
    \ IEEE 802.3 Repeater Devices\n"
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This RFC specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" for the standardization state and status\n   of this protocol.\
    \  Distribution of this memo is unlimited.\n"
- title: Abstract
  contents:
  - "Abstract\n   This memo defines a portion of the Management Information Base (MIB)\n\
    \   for use with network management protocols in the Internet community.\n   In\
    \ particular, it defines objects for managing IEEE 802.3 10\n   Mb/second baseband\
    \ repeaters, sometimes referred to as \"hubs.\"\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. The Network Management Framework ......................\
    \    2\n   1.1 Object Definitions ...................................    2\n \
    \  2. Overview ..............................................    2\n   2.1 Terminology\
    \ ..........................................    3\n   2.1.1 Repeaters, Hubs and\
    \ Concentrators ..................    3\n   2.1.2 Repeaters, Ports, and MAUs .........................\
    \    3\n   2.1.3 Ports and Groups ...................................    5\n \
    \  2.1.4 Internal Ports and MAUs ............................    6\n   2.2 Supporting\
    \ Functions .................................    7\n   2.3 Structure of MIB .....................................\
    \    9\n   2.3.1 The Basic Group Definitions ........................   10\n \
    \  2.3.2 The Monitor Group Definitions ......................   10\n    2.3.3\
    \ The Address Tracking Group Definitions ............   10\n   2.4 Relationship\
    \ to Other MIBs ...........................   10\n   2.4.1 Relationship to the\
    \ 'system' group .................   10\n   2.4.2 Relationship to the 'interfaces'\
    \ group .............   10\n   2.5 Textual Conventions ..................................\
    \   11\n   3. Definitions ...........................................   11\n \
    \  3.1 MIB Groups in the Repeater MIB .......................   12\n   3.2 The\
    \ Basic Group Definitions ..........................   13\n   3.3 The Monitor\
    \ Group Definitions ........................   23\n   3.4 The Address Tracking\
    \ Group Definitions ...............   34\n   3.5 Traps for use by Repeaters ...........................\
    \   36\n   4. Changes from RFC 1368 .................................   38\n \
    \  5. Acknowledgments .......................................   39\n   6. References\
    \ ............................................   39\n   7. Security Considerations\
    \ ...............................   40\n   8. Authors' Addresses ....................................\
    \   40\n"
- title: 1.  The Network Management Framework
  contents:
  - "1.  The Network Management Framework\n   The Internet-standard Network Management\
    \ Framework consists of\n    three components.  They are:\n      o STD 16, RFC\
    \ 1155 which defines the SMI, the mechanisms used for\n        describing and\
    \ naming objects for the purpose of management.\n        STD 16, RFC 1212 defines\
    \ a more concise description mechanism,\n        which is wholly consistent with\
    \ the SMI.\n      o STD 17, RFC 1213 defines MIB-II, the core set of managed objects\n\
    \        for the Internet suite of protocols.\n      o STD 15, RFC 1157 which\
    \ defines the SNMP, the protocol used for\n        network access to managed objects.\n\
    \   The Framework permits new objects to be defined for the purpose of\n   experimentation\
    \ and evaluation.\n"
- title: 1.1.  Object Definitions
  contents:
  - "1.1.  Object Definitions\n   Managed objects are accessed via a virtual information\
    \ store, termed\n   the Management Information Base or MIB.  Objects in the MIB\
    \ are\n   defined using the subset of Abstract Syntax Notation One (ASN.1)\n \
    \  defined in the SMI.  In particular, each object object type is named\n   by\
    \ an OBJECT IDENTIFIER, an administratively assigned name.  The\n   object type\
    \ together with an object instance serves to uniquely\n   identify a specific\
    \ instantiation of the object.  For human\n   convenience, we often use a textual\
    \ string, termed the descriptor, to\n   refer to the object type.\n"
- title: 2.  Overview
  contents:
  - "2.  Overview\n   Instances of the object types defined in this memo represent\n\
    \   attributes of an IEEE 802.3 (Ethernet-like) repeater, as defined by\n   Section\
    \ 9, \"Repeater Unit for 10 Mb/s Baseband Networks\" in the IEEE\n   802.3/ISO\
    \ 8802-3 CSMA/CD standard [7].\n   These Repeater MIB objects may be used to manage\
    \ non-standard\n   repeater-like devices, but defining objects to describe\n \
    \  implementation-specific properties of non-standard repeater-like\n   devices\
    \ is outside the scope of this memo.\n   The definitions presented here are based\
    \ on the IEEE draft standard\n   P802.3K, \"Layer Management for 10 Mb/s Baseband\
    \ Repeaters\" [8].\n   Implementors of these MIB objects should note that [8]\
    \ explicitly\n   describes when, where, and how various repeater attributes are\n\
    \   measured.  The IEEE document also describes the effects of repeater\n   actions\
    \ that may be invoked by manipulating instances of the MIB\n   objects defined\
    \ here.\n   The counters in this document are defined to be the same as those\n\
    \   counters in the IEEE 802.3 Repeater Management draft, with the\n   intention\
    \ that the same instrumentation can be used to implement both\n   the IEEE and\
    \ IETF management standards.\n"
- title: 2.1.  Terminology
  contents:
  - '2.1.  Terminology

    '
- title: 2.1.1.  Repeaters, Hubs and Concentrators
  contents:
  - "2.1.1.  Repeaters, Hubs and Concentrators\n   In late 1988, the IEEE 802.3 Hub\
    \ Management task force was chartered\n   to define managed objects for both 802.3\
    \ repeaters and the proposed\n   10BASE-FA synchronous active stars.  The term\
    \ \"hub\" was used to cover\n   both repeaters and active stars.\n   In March,\
    \ 1991, the active star proposal was dropped from the\n   10BASE-F draft.  Subsequently\
    \ the 802.3 group changed the name of the\n   task force to be the IEEE 802.3\
    \ Repeater Management Task Force, and\n   likewise renamed their draft.\n   The\
    \ use of the term \"hub\" has led to some confusion, as the terms\n   \"hub,\"\
    \ \"intelligent hub,\" and \"concentrator\" are often used to\n   indicate a modular\
    \ chassis with plug-in modules that provide\n   generalized LAN/WAN connectivity,\
    \ often with a mix of 802.3 repeater,\n   token ring, and FDDI connectivity, internetworked\
    \ by bridges,\n   routers, and terminal servers.\n   To be clear that this work\
    \ covers the management of IEEE 802.3\n   repeaters only, the editors of this\
    \ MIB definitions document chose to\n   call this a \"Repeater MIB\" instead of\
    \ a \"Hub MIB.\"\n"
- title: 2.1.2.  Repeaters, Ports, and MAUs
  contents:
  - "2.1.2.  Repeaters, Ports, and MAUs\n   The following text roughly defines the\
    \ terms \"repeater,\" \"port,\" and\n   \"MAU\" as used in the context of this\
    \ memo.  This text is imprecise\n   and omits many technical details.  For a more\
    \ complete and precise\n   definition of these terms, refer to Section 9 of [7].\n\
    \   An IEEE 802.3 repeater connects \"Ethernet-like\" media segments\n   together\
    \ to extend the network length and topology beyond what can be\n   achieved with\
    \ a single coax segment.  It can be pictured as a star\n   structure with two\
    \ or more input/output ports.  The diagram below\n   illustrates a 6-port repeater:\n\
    \                           ^      ^\n                           |      |\n  \
    \                        \\ \\   / /\n                           \\ \\ / /\n \
    \                      _____\\ v /_____\n                    -> ______   ______\
    \ ->\n                            / ^ \\\n                           / / \\ \\\
    \n                          / /   \\ \\\n                           |      |\n\
    \                           v      v\n                    Figure 1.  Repeater\
    \ Unit\n   All the stations on the media segments connected to a given\n   repeater's\
    \ ports participate in a single collision domain.  A packet\n   transmitted by\
    \ any of these stations is seen by all of these\n   stations.\n   Data coming\
    \ in on any port in the repeater is transmitted out through\n   each of the remaining\
    \ n-1 ports.  If data comes in to the repeater on\n   two or more ports simultaneously\
    \ or the repeater detects a collision\n   on the incoming port, the repeater transmits\
    \ a jamming signal out on\n   all ports for the duration of the collision.\n \
    \  A repeater is a bit-wise store-and-forward device.  It is\n   differentiated\
    \ from a bridge (a frame store-and-forward device) in\n   that it is primarily\
    \ concerned with carrier sense and data bits, and\n   does not make data-handling\
    \ decisions based on the legality or\n   contents of a packet.  A repeater retransmits\
    \ data bits as they are\n   received.  Its data FIFO holds only enough bits to\
    \ make sure that the\n   FIFO does not underflow when the data rate of incoming\
    \ bits is\n   slightly slower than the repeater's transmission rate.\n   A repeater\
    \ is not an end-station on the network, and does not count\n   toward the overall\
    \ limit of 1024 stations.  A repeater has no MAC\n   address associated with it,\
    \ and therefore packets may not be\n   addressed to the repeater or to its ports.\
    \  (Packets may be addressed\n   to the MAC address of a management entity that\
    \ is monitoring a\n   repeater.  This management entity may or may not be connected\
    \ to the\n   network through one of the repeater's ports.  How the management\n\
    \   entity obtains information about the activity on the repeater is an\n   implementation\
    \ issue, and is not discussed in this memo.)\n   A repeater is connected to the\
    \ network with Medium Attachment Units\n   (MAUs), and sometimes through Attachment\
    \ Unit Interfaces (AUIs) as\n   well.  (\"MAUs\" are also known as transceivers,\
    \ and an \"AUI\" is the\n   same as a 15-pin Ethernet or DIX connector.)\n   The\
    \ 802.3 standard defines a \"repeater set\" as the \"repeater unit\"\n   plus\
    \ its associated MAUs (and AUIs if present).  The \"repeater unit\"\n   is defined\
    \ as the portion of the repeater set that is inboard of the\n   physical media\
    \ interfaces.  The MAUs may be physically separate from\n   the repeater unit,\
    \ or they may be integrated into the same physical\n   package.\n            \
    \            (MAU)   (MAU)\n                          \\ \\   / /\n          \
    \                 \\ \\ / /\n                       _____\\ v /_____\n       \
    \          (MAU) ______   ______ (MAU)\n                            / ^ \\\n \
    \                          / / \\ \\\n                          / /   \\ \\\n\
    \                        (MAU)   (MAU)\n                    Figure 2.  Repeater\
    \ Set\n   The most commonly-used MAUs are the 10BASE-5 (AUI to thick \"yellow\"\
    \n   coax), 10BASE-2 (BNC to thin coax), 10BASE-T (unshielded twisted-\n   pair),\
    \ and FOIRL (asynchronous fiber optic inter-repeater link, which\n   is being\
    \ combined into the 10BASE-F standard as 10BASE-FL).  The\n   draft 10BASE-F standard\
    \ also includes the definition for a new\n   synchronous fiber optic attachment,\
    \ known as 10BASE-FB.\n   It should be stressed that the repeater MIB being defined\
    \ by the IEEE\n   covers only the repeater unit management - it does not include\n\
    \   management of the MAUs that form the repeater set.  The IEEE\n   recognizes\
    \ that MAU management should be the same for MAUs connected\n   to end-stations\
    \ (DTEs) as it is for MAUs connected to repeaters.\n   This memo follows the same\
    \ strategy; the definition of management\n   information for MAUs is being addressed\
    \ in a separate memo.\n"
- title: 2.1.3.  Ports and Groups
  contents:
  - "2.1.3.  Ports and Groups\n   Repeaters are often implemented in modular \"concentrators,\"\
    \ where a\n   card cage holds several field-replaceable cards.  Several cards\
    \ may\n   form a single repeater unit, with each card containing one or more of\n\
    \   the repeater's ports.  Because of this modular architecture, users\n   typically\
    \ identify these repeater ports with a card number plus the\n   port number relative\
    \ to the card, e.g., Card 3, Port 11.\n   To support this modular numbering scheme,\
    \ this document follows the\n   example of the IEEE Repeater Management draft\
    \ [8], allowing an\n   implementor to separate the ports in a repeater into \"\
    groups\", if\n   desired.  For example, an implementor might choose to represent\n\
    \   field-replaceable units as groups of ports so that the port numbering\n  \
    \ would match the modular hardware implementation.\n   This group mapping is recommended\
    \ but optional.  An implementor may\n   choose to put all of a modular repeater's\
    \ ports into a single group,\n   or to divide the ports into groups that do not\
    \ match physical\n   divisions.\n   The object rptrGroupCapacity, which has a\
    \ maximum value of 1024,\n   indicates the maximum number of groups that a given\
    \ repeater may\n   contain.  The value of rptrGroupCapacity must remain constant\
    \ from\n   one management restart to the next.\n   Each group within the repeater\
    \ is uniquely identified by a group\n   number in the range 1..rptrGroupCapacity.\
    \  Groups may come and go\n   without causing a management reset, and may be sparsely\
    \ numbered\n   within the repeater.  For example, in a 12- card cage, cards 3,\
    \ 5, 6,\n   and 7 may together form a single repeater, and the implementor may\n\
    \   choose to number them as groups 3, 5, 6, and 7, respectively.\n   The object\
    \ rptrGroupPortCapacity, which also has a maximum value of\n   1024, indicates\
    \ the maximum number of ports that a given group may\n   contain.  The value of\
    \ rptrGroupPortCapacity must not change for a\n   given group.  However, a group\
    \ may be deleted from the repeater and\n   replaced with a group containing a\
    \ different number of ports.  The\n   value of rptrGroupLastOperStatusChange will\
    \ indicate that a change\n   took place.\n   Each port within the repeater is\
    \ uniquely identified by a combination\n   of group number and port number, where\
    \ port number is an integer in\n   the range 1..rptrGroupPortCapacity.  As with\
    \ groups within a\n   repeater, ports within a group may be sparsely numbered.\
    \  Likewise,\n   ports may come and go within a group without causing a management\n\
    \   reset.\n"
- title: 2.1.4.  Internal Ports and MAUs
  contents:
  - "2.1.4.  Internal Ports and MAUs\n   Repeater ports may be thought of as sources\
    \ of traffic into the\n   repeater.  In addition to the externally visible ports\
    \ mentioned\n   above, such as those with 10BASE-T MAUs, or AUI ports with external\n\
    \   transceivers, some implementations may have internal ports that are\n   not\
    \ obvious to the end-user but are nevertheless sources of traffic\n   into the\
    \ repeater.  Examples include internal management ports,\n   through which an\
    \ agent communicates, and ports connecting to a\n   backplane internal to the\
    \ implementation.\n   Some implementations may not manage all of a repeater's\
    \ ports.  For\n   managed ports, there must be entries in the port table; unmanaged\n\
    \   ports will not show up in the table.\n   It is the decision of the implementor\
    \ to select the appropriate\n   group(s) in which to place internal ports.  GroupCapacity\
    \ for a given\n   group always reflects the number of MANAGED ports in that group.\n\
    \   If some ports are unmanaged such that not all packet sources are\n   represented\
    \ by managed ports, then the sum of the input counters for\n   the repeater will\
    \ not equal the actual output of the repeater.\n"
- title: 2.2.  Supporting Functions
  contents:
  - "2.2.  Supporting Functions\n   The IEEE 802.3 Hub Management draft [8] defines\
    \ the following seven\n   functions and seven signals used to describe precisely\
    \ when port\n   counters are incremented.  The relationship between the functions\
    \ and\n   signals is shown in Figure 3.\n   The CollisionEvent, ActivityDuration,\
    \ CarrierEvent, FramingError,\n   OctetCount, FCSError, and SourceAddress output\
    \ signals defined here\n   are not retrievable MIB objects, but rather are concepts\
    \ used in\n   defining the MIB objects.  The inputs are defined in Section 9 of\
    \ the\n   IEEE 802.3 standard [7].\n              +---------+\n              |Collision|--------------------->CollisionEvent\n\
    \   CollIn(X)+>|Event    |\n            | |Funct    |          +--------+\n  \
    \          | +---------+          |Activity|\n            | +-------+        \
    \    |Timing  |->ActivityDuration\n            +>|Carrier|      +---->|Funct \
    \  |\n              |Event  |      |     +--------+\n   DataIn(X)->|Funct  |+-----+---------------->CarrierEvent\n\
    \              +-------+|\n                       | +-------+\n              \
    \         +>|Framing|------------>FramingError\n                         |Funct\
    \  |  +-------+\n   decodedData---------->|       |+>|Octet  |\n             \
    \            +-------+| |Count  |->OctetCount\n                              \
    \    | |Funct  |\n                                  | +-------+\n            \
    \                      | +-------+\n                           Octet  | |Cyclic\
    \ |\n                           Stream +>|Redund.|\n                         \
    \         | |Check  |->FCSError\n                                  | |Funct  |\n\
    \                                  | +-------+\n                             \
    \     | +-------+\n                                  | |Source |\n           \
    \                       +>|Address|->SourceAddress\n                         \
    \           |Funct  |\n                                    +-------+\n       \
    \      Figure 3.  Port Functions Relationship\n   Collision Event Function:  The\
    \ collision event function asserts the\n   CollisionEvent signal when the CollIn(X)\
    \ variable has the value\n   SQE.  The CollisionEvent signal remains asserted\
    \ until the assertion\n   of any CarrierEvent signal due to the reception of the\
    \ following\n   event.\n   Carrier Event Function:  The carrier event function\
    \ asserts the\n   CarrierEvent signal when the repeater exits the IDLE state,\
    \ Fig 9-2\n   [7], and the port has been determined to be port N.  It deasserts\n\
    \   the CarrierEvent signal when, for a duration of at least Carrier\n   Recovery\
    \ Time (Ref: 9.5.6.5 [7]), both the DataIn(N) variable has\n   the value II and\
    \ the CollIn(N) variable has the value -SQE.  The\n   value N is the port assigned\
    \ at the time of transition from the IDLE\n   state.\n   Framing Function:  The\
    \ framing function recognizes the boundaries of\n   an incoming frame by monitoring\
    \ the CarrierEvent signal and the\n   decoded data stream.  Data bits are accepted\
    \ while the CarrierEvent\n   signal is asserted.  The framing function strips\
    \ preamble and start\n   of frame delimiter from the received data stream.  The\
    \ remaining\n   bits are aligned along octet boundaries.  If there is not an\n\
    \   integral number of octets, then FramingError shall be asserted.  The\n   FramingError\
    \ signal is cleared upon the assertion of the\n   CarrierEvent signal due to the\
    \ reception of the following event.\n   Activity Timing Function:  The activity\
    \ timing function measures the\n   duration of the assertion of the CarrierEvent\
    \ signal.  This duration\n   value must be adjusted by removing the value of Carrier\
    \ Recovery\n   Time (Ref: 9.5.6.5 [7]) to obtain the true duration of activity\
    \ on\n   the network.  The output of the Activity Timing function is the\n   ActivityDuration\
    \ value, which represents the duration of the\n   CarrierEvent signal as expressed\
    \ in units of bit times.\n   Octet Counting Function:  The octet counting function\
    \ counts the\n   number of complete octets received from the output of the framing\n\
    \   function.  The output of the octet counting function is the\n   OctetCount\
    \ value.  The OctetCount value is reset to zero upon the\n   assertion of the\
    \ CarrierEvent signal due to the reception of the\n   following event.\n   Cyclic\
    \ Redundancy Check Function:  The cyclic redundancy check\n   function verifies\
    \ that the sequence of octets output by the framing\n   function contains a valid\
    \ frame check sequence field.  The frame\n   check sequence field is the last\
    \ four octets received from the\n   output of the framing function.  The algorithm\
    \ for generating an FCS\n   from the octet stream is specified in 3.2.8 [7]. \
    \ If the FCS\n   generated according to this algorithm is not the same as the\
    \ last\n   four octets received from the framing function then the FCSError\n\
    \   signal is asserted.  The FCSError signal is cleared upon the\n   assertion\
    \ of the CarrierEvent signal due to the reception of the\n   following event.\n\
    \   Source Address Function:  The source address function extracts\n   octets\
    \ from the stream output by the framing function.  The seventh\n   through twelfth\
    \ octets shall be extracted from the octet stream and\n   output as the SourceAddress\
    \ variable.  The SourceAddress variable is\n   set to an invalid state upon the\
    \ assertion of the CarrierEvent\n   signal due to the reception of the following\
    \ event.\n"
- title: 2.3.  Structure of MIB
  contents:
  - "2.3.  Structure of MIB\n   Objects in this MIB are arranged into MIB groups.\
    \  Each MIB group is\n   organized as a set of related objects.\n"
- title: 2.3.1.  The Basic Group Definitions
  contents:
  - "2.3.1.  The Basic Group Definitions\n   This mandatory group contains the objects\
    \ which are applicable to\n   all repeaters.  It contains status, parameter and\
    \ control objects\n   for the repeater as a whole, the port groups within the\
    \ repeater, as\n   well as for the individual ports themselves.\n"
- title: 2.3.2.  The Monitor Group Definitions
  contents:
  - "2.3.2.  The Monitor Group Definitions\n   This optional group contains monitoring\
    \ statistics for the repeater\n   as a whole and for individual ports.\n"
- title: 2.3.3.  The Address Tracking Group Definitions
  contents:
  - "2.3.3.  The Address Tracking Group Definitions\n   This optional group contains\
    \ objects for tracking the MAC addresses\n   of the DTEs attached to the ports\
    \ of the repeater.\n"
- title: 2.4.  Relationship to Other MIBs
  contents:
  - "2.4.  Relationship to Other MIBs\n   It is assumed that a repeater implementing\
    \ this MIB will also\n   implement (at least) the 'system' group defined in MIB-II\
    \ [3].\n"
- title: 2.4.1.  Relationship to the 'system' group
  contents:
  - "2.4.1.  Relationship to the 'system' group\n   In MIB-II, the 'system' group\
    \ is defined as being mandatory for all\n   systems such that each managed entity\
    \ contains one instance of each\n   object in the 'system' group.  Thus, those\
    \ objects apply to the\n   entity even if the entity's sole functionality is management\
    \ of a\n   repeater.\n"
- title: 2.4.2.  Relationship to the 'interfaces' group
  contents:
  - "2.4.2.  Relationship to the 'interfaces' group\n   In MIB-II, the 'interfaces'\
    \ group is defined as being mandatory for\n   all systems and contains information\
    \ on an entity's interfaces,\n   where each interface is thought of as being attached\
    \ to a\n   the Internet suite of protocols.)\n   This Repeater MIB uses the notion\
    \ of ports on a repeater.  The\n   concept of a MIB-II interface has NO specific\
    \ relationship to a\n   repeater's port.  Therefore, the 'interfaces' group applies\
    \ only to\n   the one (or more) network interfaces on which the entity managing\n\
    \   the repeater sends and receives management protocol operations, and\n   does\
    \ not apply to the repeater's ports.\n   This is consistent with the physical-layer\
    \ nature of a repeater.  A\n   repeater is a bitwise store-and-forward device.\
    \  It recognizes\n   activity and bits, but does not process incoming data based\
    \ on any\n   packet-related information (such as checksum or addresses).  A\n\
    \   repeater has no MAC address, no MAC implementation, and does not\n   pass\
    \ packets up to higher-level protocol entities for processing.\n   (When a network\
    \ management entity is observing the repeater, it may\n   appear as though the\
    \ repeater is passing packets to a higher-level\n   protocol entity.  However,\
    \ this is only a means of implementing\n   management, and this passing of management\
    \ information is not part\n   of the repeater functionality.)\n"
- title: 2.5.  Textual Conventions
  contents:
  - "2.5.  Textual Conventions\n   The datatype MacAddress is used as a textual convention\
    \ in this\n   document.  This textual convention has NO effect on either the\n\
    \   syntax nor the semantics of any managed object.  Objects defined\n   using\
    \ this convention are always encoded by means of the rules that\n   define their\
    \ primitive type.  Hence, no changes to the SMI or the\n   SNMP are necessary\
    \ to accommodate this textual convention which is\n   adopted merely for the convenience\
    \ of readers.\n"
- title: 3.  Definitions
  contents:
  - "3.  Definitions\n   SNMP-REPEATER-MIB DEFINITIONS ::= BEGIN\n   IMPORTS\n   \
    \    Counter, TimeTicks, Gauge\n                                           FROM\
    \ RFC1155-SMI\n       DisplayString                       FROM RFC1213-MIB\n \
    \      TRAP-TYPE                           FROM RFC-1215\n       OBJECT-TYPE \
    \                        FROM RFC-1212;\n   snmpDot3RptrMgt OBJECT IDENTIFIER\
    \ ::= { mib-2 22 }\n   -- All representations of MAC addresses in this MIB Module\
    \ use,\n   -- as a textual convention (i.e., this convention does not affect\n\
    \   -- their encoding), the data type:\n   MacAddress ::= OCTET STRING (SIZE (6))\
    \    -- a 6 octet address in\n                                             --\
    \ the \"canonical\" order\n   -- defined by IEEE 802.1a, i.e., as if it were transmitted\
    \ least\n   -- significant bit first.\n   --                      References\n\
    \   --\n   -- The following references are used throughout this MIB:\n   --\n\
    \   -- [IEEE 802.3 Std]\n   --    refers to IEEE 802.3/ISO 8802-3 Information\
    \ processing\n   --    systems - Local area networks - Part 3: Carrier sense\n\
    \   --    multiple access with collision detection (CSMA/CD)\n   --    access\
    \ method and physical layer specifications\n   --    (2nd edition, September 21,\
    \ 1990).\n   --\n   -- [IEEE 802.3 Rptr Mgt]\n   --    refers to IEEE P802.3K,\
    \ 'Layer Management for 10 Mb/s\n   --    Baseband Repeaters, Section 19,' Draft\
    \ Supplement to\n   --    ANSI/IEEE 802.3, (Draft 8, April 9, 1992)\n   --   \
    \                   MIB Groups\n   --\n   -- The rptrBasicPackage group is mandatory.\n\
    \   -- The rptrMonitorPackage and rptrAddrTrackPackage\n   -- groups are optional.\n\
    \   rptrBasicPackage\n       OBJECT IDENTIFIER ::= { snmpDot3RptrMgt 1 }\n   rptrMonitorPackage\n\
    \       OBJECT IDENTIFIER ::= { snmpDot3RptrMgt 2 }\n   rptrAddrTrackPackage\n\
    \       OBJECT IDENTIFIER ::= { snmpDot3RptrMgt 3 }\n   -- object identifiers\
    \ for organizing the information\n   -- in the groups by repeater, port-group,\
    \ and port\n   rptrRptrInfo\n       OBJECT IDENTIFIER ::= { rptrBasicPackage 1\
    \ }\n   rptrGroupInfo\n       OBJECT IDENTIFIER ::= { rptrBasicPackage 2 }\n \
    \  rptrPortInfo\n       OBJECT IDENTIFIER ::= { rptrBasicPackage 3 }\n   rptrMonitorRptrInfo\n\
    \       OBJECT IDENTIFIER ::= { rptrMonitorPackage 1 }\n   rptrMonitorGroupInfo\n\
    \       OBJECT IDENTIFIER ::= { rptrMonitorPackage 2 }\n   rptrMonitorPortInfo\n\
    \       OBJECT IDENTIFIER ::= { rptrMonitorPackage 3 }\n   rptrAddrTrackRptrInfo\
    \     -- this subtree is currently unused\n       OBJECT IDENTIFIER ::= { rptrAddrTrackPackage\
    \ 1 }\n   rptrAddrTrackGroupInfo    -- this subtree is currently unused\n    \
    \   OBJECT IDENTIFIER ::= { rptrAddrTrackPackage 2 }\n   rptrAddrTrackPortInfo\n\
    \       OBJECT IDENTIFIER ::= { rptrAddrTrackPackage 3 }\n   --\n   --       \
    \             The BASIC GROUP\n   --\n   -- Implementation of the Basic Group\
    \ is mandatory for all\n   -- managed repeaters.\n   --\n   -- Basic Repeater\
    \ Information\n   --\n   -- Configuration, status, and control objects for the\
    \ overall\n   -- repeater\n   --\n   rptrGroupCapacity OBJECT-TYPE\n       SYNTAX\
    \    INTEGER (1..1024)\n       ACCESS    read-only\n       STATUS    mandatory\n\
    \       DESCRIPTION\n               \"The rptrGroupCapacity is the number of groups\n\
    \               that can be contained within the repeater.  Within\n         \
    \      each managed repeater, the groups are uniquely\n               numbered\
    \ in the range from 1 to rptrGroupCapacity.\n               Some groups may not\
    \ be present in the repeater, in\n               which case the actual number\
    \ of groups present\n               will be less than rptrGroupCapacity.  The\
    \ number\n               of groups present will never be greater than\n      \
    \         rptrGroupCapacity.\n               Note:  In practice, this will generally\
    \ be the\n               number of field-replaceable units (i.e., modules,\n \
    \              cards, or boards) that can fit in the physical\n              \
    \ repeater enclosure, and the group numbers will\n               correspond to\
    \ numbers marked on the physical\n               enclosure.\"\n       REFERENCE\n\
    \               \"Reference IEEE 802.3 Rptr Mgt, 19.2.3.2,\n               aRepeaterGroupCapacity.\"\
    \n       ::= { rptrRptrInfo 1 }\n   rptrOperStatus OBJECT-TYPE\n       SYNTAX\
    \  INTEGER {\n                   other(1),            -- undefined or unknown\
    \ status\n                   ok(2),               -- no known failures\n     \
    \              rptrFailure(3),      -- repeater-related failure\n            \
    \       groupFailure(4),     -- group-related failure\n                   portFailure(5),\
    \      -- port-related failure\n                   generalFailure(6)    -- failure,\
    \ unspecified type\n               }\n       ACCESS    read-only\n       STATUS\
    \    mandatory\n       DESCRIPTION\n               \"The rptrOperStatus object\
    \ indicates the\n               operational state of the repeater.  The\n    \
    \           rptrHealthText object may be consulted for more\n               specific\
    \ information about the state of the\n               repeater's health.\n    \
    \           In the case of multiple kinds of failures (e.g.,\n               repeater\
    \ failure and port failure), the value of\n               this attribute shall\
    \ reflect the highest priority\n               failure in the following order,\
    \ listed highest\n               priority first:\n                   rptrFailure(3)\n\
    \                   groupFailure(4)\n                   portFailure(5)\n     \
    \              generalFailure(6).\"\n       REFERENCE\n               \"Reference\
    \ IEEE 802.3 Rptr Mgt, 19.2.3.2,\n               aRepeaterHealthState.\"\n   \
    \    ::= { rptrRptrInfo 2 }\n   rptrHealthText OBJECT-TYPE\n       SYNTAX    DisplayString\
    \ (SIZE (0..255))\n       ACCESS    read-only\n       STATUS    mandatory\n  \
    \     DESCRIPTION\n               \"The health text object is a text string that\n\
    \               provides information relevant to the operational\n           \
    \    state of the repeater.  Agents may use this string\n               to provide\
    \ detailed information on current\n               failures, including how they\
    \ were detected, and/or\n               instructions for problem resolution. \
    \ The contents\n               are agent-specific.\"\n       REFERENCE\n     \
    \          \"Reference IEEE 802.3 Rptr Mgt, 19.2.3.2,\n               aRepeaterHealthText.\"\
    \n       ::= { rptrRptrInfo 3 }\n   rptrReset OBJECT-TYPE\n       SYNTAX    INTEGER\
    \ {\n                     noReset(1),\n                     reset(2)\n       \
    \          }\n       ACCESS    read-write\n       STATUS    mandatory\n      \
    \ DESCRIPTION\n               \"Setting this object to reset(2) causes a\n   \
    \            transition to the START state of Fig 9-2 in\n               section\
    \ 9 [IEEE 802.3 Std].\n               Setting this object to noReset(1) has no\
    \ effect.\n               The agent will always return the value noReset(1)\n\
    \               when this object is read.\n               After receiving a request\
    \ to set this variable to\n               reset(2), the agent is allowed to delay\
    \ the reset\n               for a short period.  For example, the implementor\n\
    \               may choose to delay the reset long enough to allow\n         \
    \      the SNMP response to be transmitted.  In any\n               event, the\
    \ SNMP response must be transmitted.\n               This action does not reset\
    \ the management counters\n               defined in this document nor does it\
    \ affect the\n               portAdminStatus parameters.  Included in this\n \
    \              action is the execution of a disruptive Self-Test\n           \
    \    with the following characteristics:  a) The nature\n               of the\
    \ tests is not specified.  b) The test resets\n               the repeater but\
    \ without affecting management\n               information about the repeater.\
    \  c) The test does\n               not inject packets onto any segment.  d) Packets\n\
    \               received during the test may or may not be\n               transferred.\
    \  e) The test does not interfere with\n               management functions.\n\
    \               After performing this self-test, the agent will\n            \
    \   update the repeater health information (including\n               rptrOperStatus\
    \ and rptrHealthText), and send a\n               rptrHealth trap.\"\n       REFERENCE\n\
    \               \"Reference IEEE 802.3 Rptr Mgt, 19.2.3.3,\n               acResetRepeater.\"\
    \n       ::= { rptrRptrInfo 4 }\n   rptrNonDisruptTest OBJECT-TYPE\n       SYNTAX\
    \    INTEGER {\n                     noSelfTest(1),\n                     selfTest(2)\n\
    \                 }\n       ACCESS    read-write\n       STATUS    mandatory\n\
    \       DESCRIPTION\n               \"Setting this object to selfTest(2) causes\
    \ the\n               repeater to perform a agent-specific, non-\n           \
    \    disruptive self-test that has the following\n               characteristics:\
    \  a) The nature of the tests is\n               not specified.  b) The test does\
    \ not change the\n               state of the repeater or management information\n\
    \               about the repeater.  c) The test does not inject\n           \
    \    packets onto any segment.  d) The test does not\n               prevent the\
    \ relay of any packets.  e) The test\n               does not interfere with management\
    \ functions.\n               After performing this test, the agent will update\n\
    \               the repeater health information (including\n               rptrOperStatus\
    \ and rptrHealthText) and send a\n               rptrHealth trap.\n          \
    \     Note that this definition allows returning an\n               'okay' result\
    \ after doing a trivial test.\n               Setting this object to noSelfTest(1)\
    \ has no\n               effect.  The agent will always return the value\n   \
    \            noSelfTest(1) when this object is read.\"\n       REFERENCE\n   \
    \            \"Reference IEEE 802.3 Rptr Mgt, 19.2.3.3,\n               acExecuteNonDisruptiveSelfTest.\"\
    \n       ::= { rptrRptrInfo 5 }\n   rptrTotalPartitionedPorts OBJECT-TYPE\n  \
    \     SYNTAX    Gauge\n       ACCESS    read-only\n       STATUS    mandatory\n\
    \       DESCRIPTION\n               \"This object returns the total number of\
    \ ports in\n               the repeater whose current state meets all three\n\
    \               of the following criteria:  rptrPortOperStatus\n             \
    \  does not have the value notPresent(3),\n               rptrPortAdminStatus\
    \ is enabled(1), and\n               rptrPortAutoPartitionState is autoPartitioned(2).\"\
    \n       ::= { rptrRptrInfo 6 }\n   --\n   -- The Basic Port Group Table\n   --\n\
    \   rptrGroupTable OBJECT-TYPE\n       SYNTAX    SEQUENCE OF RptrGroupEntry\n\
    \       ACCESS    not-accessible\n       STATUS    mandatory\n       DESCRIPTION\n\
    \               \"Table of descriptive and status information about\n        \
    \       the groups of ports.\"\n       ::= { rptrGroupInfo 1 }\n   rptrGroupEntry\
    \ OBJECT-TYPE\n       SYNTAX    RptrGroupEntry\n       ACCESS    not-accessible\n\
    \       STATUS    mandatory\n       DESCRIPTION\n               \"An entry in\
    \ the table, containing information\n               about a single group of ports.\"\
    \n       INDEX    { rptrGroupIndex }\n       ::= { rptrGroupTable 1 }\n   RptrGroupEntry\
    \ ::=\n       SEQUENCE {\n           rptrGroupIndex\n               INTEGER,\n\
    \           rptrGroupDescr\n               DisplayString,\n           rptrGroupObjectID\n\
    \               OBJECT IDENTIFIER,\n           rptrGroupOperStatus\n         \
    \      INTEGER,\n           rptrGroupLastOperStatusChange\n               TimeTicks,\n\
    \           rptrGroupPortCapacity\n               INTEGER\n       }\n   rptrGroupIndex\
    \ OBJECT-TYPE\n       SYNTAX    INTEGER (1..1024)\n       ACCESS    read-only\n\
    \       STATUS    mandatory\n       DESCRIPTION\n               \"This object\
    \ identifies the group within the\n               repeater for which this entry\
    \ contains\n               information.  This value is never greater than\n  \
    \             rptrGroupCapacity.\"\n       REFERENCE\n               \"Reference\
    \ IEEE 802.3 Rptr Mgt, 19.2.5.2,\n               aGroupID.\"\n       ::= { rptrGroupEntry\
    \ 1 }\n   rptrGroupDescr OBJECT-TYPE\n       SYNTAX    DisplayString (SIZE (0..255))\n\
    \       ACCESS    read-only\n       STATUS    mandatory\n       DESCRIPTION\n\
    \               \"A textual description of the group.  This value\n          \
    \     should include the full name and version\n               identification\
    \ of the group's hardware type and\n               indicate how the group is differentiated\
    \ from\n               other types of groups in the repeater.  Plug-in\n     \
    \          Module, Rev A' or 'Barney Rubble 10BASE-T 4-port\n               SIMM\
    \ socket Version 2.1' are examples of valid\n               group descriptions.\n\
    \               It is mandatory that this only contain printable\n           \
    \    ASCII characters.\"\n       ::= { rptrGroupEntry 2 }\n   rptrGroupObjectID\
    \ OBJECT-TYPE\n       SYNTAX    OBJECT IDENTIFIER\n       ACCESS    read-only\n\
    \       STATUS    mandatory\n       DESCRIPTION\n               \"The vendor's\
    \ authoritative identification of the\n               group.  This value may be\
    \ allocated within the SMI\n               enterprises subtree (1.3.6.1.4.1) and\
    \ provides a\n               straight-forward and unambiguous means for\n    \
    \           determining what kind of group is being managed.\n               For\
    \ example, this object could take the value\n               1.3.6.1.4.1.4242.1.2.14\
    \ if vendor 'Flintstones,\n               Inc.' was assigned the subtree 1.3.6.1.4.1.4242,\n\
    \               and had assigned the identifier\n               1.3.6.1.4.1.4242.1.2.14\
    \ to its 'Wilma Flintstone\n               6-Port FOIRL Plug-in Module.'\"\n \
    \      ::= { rptrGroupEntry 3 }\n   rptrGroupOperStatus OBJECT-TYPE\n       SYNTAX\
    \    INTEGER {\n                     other(1),\n                     operational(2),\n\
    \                     malfunctioning(3),\n                     notPresent(4),\n\
    \                     underTest(5),\n                     resetInProgress(6)\n\
    \                 }\n       ACCESS    read-only\n       STATUS    mandatory\n\
    \       DESCRIPTION\n               \"An object that indicates the operational\
    \ status\n               of the group.\n               A status of notPresent(4)\
    \ indicates that the group\n               is temporarily or permanently physically\
    \ and/or\n               logically not a part of the repeater.  It is an\n   \
    \            implementation-specific matter as to whether the\n              \
    \ agent effectively removes notPresent entries from\n               the table.\n\
    \               A status of operational(2) indicates that the\n              \
    \ group is functioning, and a status of\n               malfunctioning(3) indicates\
    \ that the group is\n               malfunctioning in some way.\"\n       ::=\
    \ { rptrGroupEntry 4 }\n   rptrGroupLastOperStatusChange OBJECT-TYPE\n       SYNTAX\
    \    TimeTicks\n       ACCESS    read-only\n       STATUS    mandatory\n     \
    \  DESCRIPTION\n               \"An object that contains the value of sysUpTime\
    \ at\n               the time that the value of the rptrGroupOperStatus\n    \
    \           object for this group last changed.\n               A value of zero\
    \ indicates that the group's\n               operational status has not changed\
    \ since the agent\n               last restarted.\"\n       ::= { rptrGroupEntry\
    \ 5 }\n   rptrGroupPortCapacity OBJECT-TYPE\n       SYNTAX    INTEGER (1..1024)\n\
    \       ACCESS    read-only\n       STATUS    mandatory\n       DESCRIPTION\n\
    \               \"The rptrGroupPortCapacity is the number of ports\n         \
    \      that can be contained within the group.  Valid\n               range is\
    \ 1-1024.  Within each group, the ports are\n               uniquely numbered\
    \ in the range from 1 to\n               rptrGroupPortCapacity.\n            \
    \   Note:  In practice, this will generally be the\n               number of ports\
    \ on a module, card, or board, and\n               the port numbers will correspond\
    \ to numbers marked\n               on the physical embodiment.\"\n       REFERENCE\n\
    \               \"Reference IEEE 802.3 Rptr Mgt, 19.2.5.2,\n               aGroupPortCapacity.\"\
    \n       ::= { rptrGroupEntry 6 }\n   --\n   -- The Basic Port Table\n   --\n\
    \   rptrPortTable OBJECT-TYPE\n       SYNTAX    SEQUENCE OF RptrPortEntry\n  \
    \     ACCESS    not-accessible\n       STATUS    mandatory\n       DESCRIPTION\n\
    \               \"Table of descriptive and status information about\n        \
    \       the ports.\"\n       ::= { rptrPortInfo 1 }\n   rptrPortEntry OBJECT-TYPE\n\
    \       SYNTAX    RptrPortEntry\n       ACCESS    not-accessible\n       STATUS\
    \    mandatory\n       DESCRIPTION\n               \"An entry in the table, containing\
    \ information\n               about a single port.\"\n       INDEX    { rptrPortGroupIndex,\
    \ rptrPortIndex }\n       ::= { rptrPortTable 1 }\n   RptrPortEntry ::=\n    \
    \   SEQUENCE {\n           rptrPortGroupIndex\n               INTEGER,\n     \
    \      rptrPortIndex\n               INTEGER,\n           rptrPortAdminStatus\n\
    \               INTEGER,\n           rptrPortAutoPartitionState\n            \
    \   INTEGER,\n           rptrPortOperStatus\n               INTEGER\n       }\n\
    \   rptrPortGroupIndex OBJECT-TYPE\n       SYNTAX    INTEGER (1..1024)\n     \
    \  ACCESS    read-only\n       STATUS    mandatory\n       DESCRIPTION\n     \
    \          \"This object identifies the group containing the\n               port\
    \ for which this entry contains information.\"\n       ::= { rptrPortEntry 1 }\n\
    \   rptrPortIndex OBJECT-TYPE\n       SYNTAX    INTEGER (1..1024)\n       ACCESS\
    \    read-only\n       STATUS    mandatory\n       DESCRIPTION\n             \
    \  \"This object identifies the port within the group\n               for which\
    \ this entry contains information.  This\n               value can never be greater\
    \ than\n               rptrGroupPortCapacity for the associated group.\"\n   \
    \    REFERENCE\n               \"Reference IEEE 802.3 Rptr Mgt, 19.2.6.2,\n  \
    \             aPortID.\"\n       ::= { rptrPortEntry 2 }\n   rptrPortAdminStatus\
    \ OBJECT-TYPE\n       SYNTAX    INTEGER {\n                     enabled(1),\n\
    \                     disabled(2)\n                 }\n       ACCESS    read-write\n\
    \       STATUS    mandatory\n       DESCRIPTION\n               \"Setting this\
    \ object to disabled(2) disables the\n               port.  A disabled port neither\
    \ transmits nor\n               receives.  Once disabled, a port must be\n   \
    \            explicitly enabled to restore operation.  A port\n              \
    \ which is disabled when power is lost or when a\n               reset is exerted\
    \ shall remain disabled when normal\n               operation resumes.\n     \
    \          The admin status takes precedence over auto-\n               partition\
    \ and functionally operates between the\n               auto-partition mechanism\
    \ and the AUI/PMA.\n               Setting this object to enabled(1) enables the\
    \ port\n               and exerts a BEGIN on the port's auto-partition\n     \
    \          state machine.\n               (In effect, when a port is disabled,\
    \ the value of\n               rptrPortAutoPartitionState for that port is frozen\n\
    \               until the port is next enabled.  When the port\n             \
    \  becomes enabled, the rptrPortAutoPartitionState\n               becomes notAutoPartitioned(1),\
    \ regardless of its\n               pre-disabling state.)\"\n       REFERENCE\n\
    \               \"Reference IEEE 802.3 Rptr Mgt, 19.2.6.2,\n               aPortAdminState\
    \ and 19.2.6.3, acPortAdminControl.\"\n       ::= { rptrPortEntry 3 }\n   rptrPortAutoPartitionState\
    \ OBJECT-TYPE\n       SYNTAX    INTEGER {\n                     notAutoPartitioned(1),\n\
    \                     autoPartitioned(2)\n                 }\n       ACCESS  \
    \  read-only\n       STATUS    mandatory\n       DESCRIPTION\n               \"\
    The autoPartitionState flag indicates whether the\n               port is currently\
    \ partitioned by the repeater's\n               auto-partition protection.\n \
    \              The conditions that cause port partitioning are\n             \
    \  specified in partition state machine in Section 9\n               [IEEE 802.3\
    \ Std].  They are not differentiated\n               here.\"\n       REFERENCE\n\
    \               \"Reference IEEE 802.3 Rptr Mgt, 19.2.6.2,\n               aAutoPartitionState.\"\
    \n       ::= { rptrPortEntry 4 }\n   rptrPortOperStatus  OBJECT-TYPE\n       SYNTAX\
    \    INTEGER {\n                     operational(1),\n                     notOperational(2),\n\
    \                     notPresent(3)\n                 }\n       ACCESS    read-only\n\
    \       STATUS    mandatory\n       DESCRIPTION\n               \"This object\
    \ indicates the port's operational\n               status.  The notPresent(3)\
    \ status indicates the\n               port is physically removed (note this may\
    \ or may\n               not be possible depending on the type of port.)\n   \
    \            The operational(1) status indicates that the port\n             \
    \  is enabled (see rptrPortAdminStatus) and working,\n               even though\
    \ it might be auto-partitioned (see\n               rptrPortAutoPartitionState).\n\
    \               If this object has the value operational(1) and\n            \
    \   rptrPortAdminStatus is set to disabled(2), it is\n               expected\
    \ that this object's value will soon change\n               to notOperational(2).\"\
    \n       ::= { rptrPortEntry 5 }\n   --\n   --                    The MONITOR\
    \ GROUP\n   --\n   -- Implementation of this group is optional, but within the\n\
    \   -- group all elements are mandatory.  If a managed repeater\n   -- implements\
    \ any part of this group, the entire group shall\n   -- be implemented.\n   --\n\
    \   -- Repeater Monitor Information\n   --\n   -- Performance monitoring statistics\
    \ for the repeater\n   --\n   rptrMonitorTransmitCollisions OBJECT-TYPE\n    \
    \   SYNTAX    Counter\n       ACCESS    read-only\n       STATUS    mandatory\n\
    \       DESCRIPTION\n               \"This counter is incremented every time the\n\
    \               repeater state machine enters the TRANSMIT\n               COLLISION\
    \ state from any state other than ONE PORT\n               LEFT (Ref: Fig 9-2,\
    \ IEEE 802.3 Std).\n               The approximate minimum time for rollover of\
    \ this\n               counter is 16 hours.\"\n       REFERENCE\n            \
    \   \"Reference IEEE 802.3 Rptr Mgt, 19.2.3.2,\n               aTransmitCollisions.\"\
    \n       ::= { rptrMonitorRptrInfo 1 }\n   --\n   -- The Group Monitor Table\n\
    \   --\n   rptrMonitorGroupTable OBJECT-TYPE\n       SYNTAX    SEQUENCE OF RptrMonitorGroupEntry\n\
    \       ACCESS    not-accessible\n       STATUS    mandatory\n       DESCRIPTION\n\
    \               \"Table of performance and error statistics for the\n        \
    \       groups.\"\n       ::= { rptrMonitorGroupInfo 1 }\n   rptrMonitorGroupEntry\
    \ OBJECT-TYPE\n       SYNTAX    RptrMonitorGroupEntry\n       ACCESS    not-accessible\n\
    \       STATUS    mandatory\n       DESCRIPTION\n               \"An entry in\
    \ the table, containing total\n               performance and error statistics\
    \ for a single\n               group.  Regular retrieval of the information in\n\
    \               this table provides a means of tracking the\n               performance\
    \ and health of the networked devices\n               attached to this group's\
    \ ports.\n               The counters in this table are redundant in the\n   \
    \            sense that they are the summations of information\n             \
    \  already available through other objects.  However,\n               these sums\
    \ provide a considerable optimization of\n               network management traffic\
    \ over the otherwise\n               necessary retrieval of the individual counters\n\
    \               included in each sum.\"\n       INDEX    { rptrMonitorGroupIndex\
    \ }\n       ::= { rptrMonitorGroupTable 1 }\n   RptrMonitorGroupEntry ::=\n  \
    \     SEQUENCE {\n           rptrMonitorGroupIndex\n               INTEGER,\n\
    \           rptrMonitorGroupTotalFrames\n               Counter,\n           rptrMonitorGroupTotalOctets\n\
    \               Counter,\n           rptrMonitorGroupTotalErrors\n           \
    \    Counter\n       }\n   rptrMonitorGroupIndex OBJECT-TYPE\n       SYNTAX  \
    \  INTEGER (1..1024)\n       ACCESS    read-only\n       STATUS    mandatory\n\
    \       DESCRIPTION\n               \"This object identifies the group within\
    \ the\n               repeater for which this entry contains\n               information.\"\
    \n       ::= { rptrMonitorGroupEntry 1 }\n   rptrMonitorGroupTotalFrames OBJECT-TYPE\n\
    \       SYNTAX    Counter\n       ACCESS    read-only\n       STATUS    mandatory\n\
    \       DESCRIPTION\n               \"The total number of frames of valid frame\
    \ length\n               that have been received on the ports in this group\n\
    \               and for which the FCSError and CollisionEvent\n              \
    \ signals were not asserted.  This counter is the\n               summation of\
    \ the values of the\n               rptrMonitorPortReadableFrames counters for\
    \ all of\n               the ports in the group.\n               This statistic\
    \ provides one of the parameters\n               necessary for obtaining the packet\
    \ error rate.\n               The approximate minimum time for rollover of this\n\
    \               counter is 80 hours.\"\n       ::= { rptrMonitorGroupEntry 2 }\n\
    \   rptrMonitorGroupTotalOctets OBJECT-TYPE\n       SYNTAX    Counter\n      \
    \ ACCESS    read-only\n       STATUS    mandatory\n       DESCRIPTION\n      \
    \         \"The total number of octets contained in the valid\n              \
    \ frames that have been received on the ports in\n               this group. \
    \ This counter is the summation of the\n               values of the rptrMonitorPortReadableOctets\n\
    \               counters for all of the ports in the group.\n               This\
    \ statistic provides an indicator of the total\n               data transferred.\
    \  The approximate minimum time\n               for rollover of this counter is\
    \ 58 minutes.\"\n       ::= { rptrMonitorGroupEntry 3 }\n   rptrMonitorGroupTotalErrors\
    \ OBJECT-TYPE\n       SYNTAX    Counter\n       ACCESS    read-only\n       STATUS\
    \    mandatory\n       DESCRIPTION\n               \"The total number of errors\
    \ which have occurred on\n               all of the ports in this group.  This\
    \ counter is\n               the summation of the values of the\n            \
    \   rptrMonitorPortTotalErrors counters for all of the\n               ports in\
    \ the group.\"\n       ::= { rptrMonitorGroupEntry 4 }\n   --\n   -- The Port\
    \ Monitor Table\n   --\n   rptrMonitorPortTable OBJECT-TYPE\n       SYNTAX   \
    \ SEQUENCE OF RptrMonitorPortEntry\n       ACCESS    not-accessible\n       STATUS\
    \    mandatory\n       DESCRIPTION\n               \"Table of performance and\
    \ error statistics for the\n               ports.\"\n       ::= { rptrMonitorPortInfo\
    \ 1 }\n   rptrMonitorPortEntry OBJECT-TYPE\n       SYNTAX    RptrMonitorPortEntry\n\
    \       ACCESS    not-accessible\n       STATUS    mandatory\n       DESCRIPTION\n\
    \               \"An entry in the table, containing performance and\n        \
    \       error statistics for a single port.\"\n       INDEX    { rptrMonitorPortGroupIndex,\
    \ rptrMonitorPortIndex }\n       ::= { rptrMonitorPortTable 1 }\n   RptrMonitorPortEntry\
    \ ::=\n       SEQUENCE {\n           rptrMonitorPortGroupIndex\n             \
    \  INTEGER,\n           rptrMonitorPortIndex\n               INTEGER,\n      \
    \     rptrMonitorPortReadableFrames\n               Counter,\n           rptrMonitorPortReadableOctets\n\
    \               Counter,\n           rptrMonitorPortFCSErrors\n              \
    \ Counter,\n           rptrMonitorPortAlignmentErrors\n               Counter,\n\
    \           rptrMonitorPortFrameTooLongs\n               Counter,\n          \
    \ rptrMonitorPortShortEvents\n               Counter,\n           rptrMonitorPortRunts\n\
    \               Counter,\n           rptrMonitorPortCollisions\n             \
    \  Counter,\n           rptrMonitorPortLateEvents\n               Counter,\n \
    \          rptrMonitorPortVeryLongEvents\n               Counter,\n          \
    \ rptrMonitorPortDataRateMismatches\n               Counter,\n           rptrMonitorPortAutoPartitions\n\
    \               Counter,\n           rptrMonitorPortTotalErrors\n            \
    \   Counter\n       }\n   rptrMonitorPortGroupIndex OBJECT-TYPE\n       SYNTAX\
    \    INTEGER (1..1024)\n       ACCESS    read-only\n       STATUS    mandatory\n\
    \       DESCRIPTION\n               \"This object identifies the group containing\
    \ the\n               port for which this entry contains information.\"\n    \
    \   ::= { rptrMonitorPortEntry 1 }\n   rptrMonitorPortIndex OBJECT-TYPE\n    \
    \   SYNTAX    INTEGER (1..1024)\n       ACCESS    read-only\n       STATUS   \
    \ mandatory\n       DESCRIPTION\n               \"This object identifies the port\
    \ within the group\n               for which this entry contains information.\"\
    \n       REFERENCE\n               \"Reference IEEE 802.3 Rptr Mgt, 19.2.6.2,\n\
    \               aPortID.\"\n       ::= { rptrMonitorPortEntry 2 }\n   rptrMonitorPortReadableFrames\
    \ OBJECT-TYPE\n       SYNTAX    Counter\n       ACCESS    read-only\n       STATUS\
    \    mandatory\n       DESCRIPTION\n               \"This object is the number\
    \ of frames of valid\n               frame length that have been received on this\
    \ port.\n               This counter is incremented by one for each frame\n  \
    \             received on this port whose OctetCount is greater\n            \
    \   than or equal to minFrameSize and less than or\n               equal to maxFrameSize\
    \ (Ref: IEEE 802.3 Std,\n               4.4.2.1) and for which the FCSError and\n\
    \               CollisionEvent signals are not asserted.\n               This\
    \ statistic provides one of the parameters\n               necessary for obtaining\
    \ the packet error rate.\n               The approximate minimum time for rollover\
    \ of this\n               counter is 80 hours.\"\n       REFERENCE\n         \
    \      \"Reference IEEE 802.3 Rptr Mgt, 19.2.6.2,\n               aReadableFrames.\"\
    \n       ::= { rptrMonitorPortEntry 3 }\n   rptrMonitorPortReadableOctets OBJECT-TYPE\n\
    \       SYNTAX    Counter\n       ACCESS    read-only\n       STATUS    mandatory\n\
    \       DESCRIPTION\n               \"This object is the number of octets contained\
    \ in\n               valid frames that have been received on this port.\n    \
    \           This counter is incremented by OctetCount for each\n             \
    \  frame received on this port which has been\n               determined to be\
    \ a readable frame (i.e., including\n               FCS octets but excluding framing\
    \ bits and dribble\n               bits).\n               This statistic provides\
    \ an indicator of the total\n               data transferred.  The approximate\
    \ minimum time\n               for rollover of this counter is 58 minutes.\"\n\
    \       REFERENCE\n               \"Reference IEEE 802.3 Rptr Mgt, 19.2.6.2,\n\
    \               aReadableOctets.\"\n       ::= { rptrMonitorPortEntry 4 }\n  \
    \ rptrMonitorPortFCSErrors OBJECT-TYPE\n       SYNTAX    Counter\n       ACCESS\
    \    read-only\n       STATUS    mandatory\n       DESCRIPTION\n             \
    \  \"This counter is incremented by one for each frame\n               received\
    \ on this port with the FCSError signal\n               asserted and the FramingError\
    \ and CollisionEvent\n               signals deasserted and whose OctetCount is\
    \ greater\n               than or equal to minFrameSize and less than or\n   \
    \            equal to maxFrameSize (Ref: 4.4.2.1, IEEE 802.3\n               Std).\n\
    \               The approximate minimum time for rollover of this\n          \
    \     counter is 80 hours.\"\n       REFERENCE\n               \"Reference IEEE\
    \ 802.3 Rptr Mgt, 19.2.6.2,\n               aFrameCheckSequenceErrors.\"\n   \
    \    ::= { rptrMonitorPortEntry 5 }\n   rptrMonitorPortAlignmentErrors OBJECT-TYPE\n\
    \       SYNTAX    Counter\n       ACCESS    read-only\n       STATUS    mandatory\n\
    \       DESCRIPTION\n               \"This counter is incremented by one for each\
    \ frame\n               received on this port with the FCSError and\n        \
    \       FramingError signals asserted and CollisionEvent\n               signal\
    \ deasserted and whose OctetCount is greater\n               than or equal to\
    \ minFrameSize and less than or\n               equal to maxFrameSize (Ref: IEEE\
    \ 802.3 Std,\n               4.4.2.1).  If rptrMonitorPortAlignmentErrors is\n\
    \               incremented then the rptrMonitorPortFCSErrors\n              \
    \ Counter shall not be incremented for the same\n               frame.\n     \
    \          The approximate minimum time for rollover of this\n               counter\
    \ is 80 hours.\"\n       REFERENCE\n               \"Reference IEEE 802.3 Rptr\
    \ Mgt, 19.2.6.2,\n               aAlignmentErrors.\"\n       ::= { rptrMonitorPortEntry\
    \ 6 }\n   rptrMonitorPortFrameTooLongs OBJECT-TYPE\n       SYNTAX    Counter\n\
    \       ACCESS    read-only\n       STATUS    mandatory\n       DESCRIPTION\n\
    \               \"This counter is incremented by one for each frame\n        \
    \       received on this port whose OctetCount is greater\n               than\
    \ maxFrameSize (Ref: 4.4.2.1, IEEE 802.3 Std).\n               If rptrMonitorPortFrameTooLongs\
    \ is incremented\n               then neither the rptrMonitorPortAlignmentErrors\n\
    \               nor the rptrMonitorPortFCSErrors counter shall be\n          \
    \     incremented for the frame.\n               The approximate minimum time\
    \ for rollover of this\n               counter is 61 days.\"\n       REFERENCE\n\
    \               \"Reference IEEE 802.3 Rptr Mgt, 19.2.6.2,\n               aFramesTooLong.\"\
    \n       ::= { rptrMonitorPortEntry 7 }\n   rptrMonitorPortShortEvents OBJECT-TYPE\n\
    \       SYNTAX    Counter\n       ACCESS    read-only\n       STATUS    mandatory\n\
    \       DESCRIPTION\n               \"This counter is incremented by one for each\n\
    \               CarrierEvent on this port with ActivityDuration\n            \
    \   less than ShortEventMaxTime.  ShortEventMaxTime is\n               greater\
    \ than 74 bit times and less than 82 bit\n               times.  ShortEventMaxTime\
    \ has tolerances included\n               to provide for circuit losses between\
    \ a\n               conformance test point at the AUI and the\n              \
    \ measurement point within the state machine.\n               Note:  shortEvents\
    \ may indicate externally\n               generated noise hits which will cause\
    \ the repeater\n               to transmit Runts to its other ports, or propagate\n\
    \               a collision (which may be late) back to the\n               transmitting\
    \ DTE and damaged frames to the rest of\n               the network.\n       \
    \        Implementors may wish to consider selecting the\n               ShortEventMaxTime\
    \ towards the lower end of the\n               allowed tolerance range to accommodate\
    \ bit losses\n               suffered through physical channel devices not\n \
    \              budgeted for within this standard.\n               The approximate\
    \ minimum time for rollover of this\n               counter is 16 hours.\"\n \
    \      REFERENCE\n               \"Reference IEEE 802.3 Rptr Mgt, 19.2.6.2,\n\
    \               aShortEvents.\"\n       ::= { rptrMonitorPortEntry 8 }\n   rptrMonitorPortRunts\
    \ OBJECT-TYPE\n       SYNTAX    Counter\n       ACCESS    read-only\n       STATUS\
    \    mandatory\n       DESCRIPTION\n               \"This counter is incremented\
    \ by one for each\n               CarrierEvent on this port that meets one of\
    \ the\n               following two conditions.  Only one test need be\n     \
    \          made.  a) The ActivityDuration is greater than\n               ShortEventMaxTime\
    \ and less than ValidPacketMinTime\n               and the CollisionEvent signal\
    \ is deasserted.  b)\n               The OctetCount is less than 64, the\n   \
    \            ActivityDuration is greater than ShortEventMaxTime\n            \
    \   and the CollisionEvent signal is deasserted.\n               ValidPacketMinTime\
    \ is greater than or equal to 552\n               bit times and less than 565\
    \ bit times.\n               An event whose length is greater than 74 bit times\n\
    \               but less than 82 bit times shall increment either\n          \
    \     the shortEvents counter or the runts counter but\n               not both.\
    \  A CarrierEvent greater than or equal to\n               552 bit times but less\
    \ than 565 bit times may or\n               may not be counted as a runt.\n  \
    \             ValidPacketMinTime has tolerances included to\n               provide\
    \ for circuit losses between a conformance\n               test point at the AUI\
    \ and the measurement point\n               within the state machine.\n      \
    \         Runts usually indicate collision fragments, a\n               normal\
    \ network event.  In certain situations\n               associated with large\
    \ diameter networks a\n               percentage of collision fragments may exceed\n\
    \               ValidPacketMinTime.\n               The approximate minimum time\
    \ for rollover of this\n               counter is 16 hours.\"\n       REFERENCE\n\
    \               \"Reference IEEE 802.3 Rptr Mgt, 19.2.6.2, aRunts.\"\n       ::=\
    \ { rptrMonitorPortEntry 9 }\n   rptrMonitorPortCollisions OBJECT-TYPE\n     \
    \  SYNTAX    Counter\n       ACCESS    read-only\n       STATUS    mandatory\n\
    \       DESCRIPTION\n               \"This counter is incremented by one for any\n\
    \               CarrierEvent signal on any port for which the\n              \
    \ CollisionEvent signal on this port is also\n               asserted.\n     \
    \          The approximate minimum time for rollover of this\n               counter\
    \ is 16 hours.\"\n       REFERENCE\n               \"Reference IEEE 802.3 Rptr\
    \ Mgt, 19.2.6.2,\n               aCollisions.\"\n       ::= { rptrMonitorPortEntry\
    \ 10 }\n   rptrMonitorPortLateEvents OBJECT-TYPE\n       SYNTAX    Counter\n \
    \      ACCESS    read-only\n       STATUS    mandatory\n       DESCRIPTION\n \
    \              \"This counter is incremented by one for each\n               CarrierEvent\
    \ on this port in which the CollIn(X)\n               variable transitions to\
    \ the value SQE (Ref:\n               9.6.6.2, IEEE 802.3 Std) while the\n   \
    \            ActivityDuration is greater than the\n               LateEventThreshold.\
    \  Such a CarrierEvent is\n               counted twice, as both a collision and\
    \ as a\n               lateEvent.\n               The LateEventThreshold is greater\
    \ than 480 bit\n               times and less than 565 bit times.\n          \
    \     LateEventThreshold has tolerances included to\n               permit an\
    \ implementation to build a single\n               threshold to serve as both\
    \ the LateEventThreshold\n               and ValidPacketMinTime threshold.\n \
    \              The approximate minimum time for rollover of this\n           \
    \    counter is 81 hours.\"\n       REFERENCE\n               \"Reference IEEE\
    \ 802.3 Rptr Mgt, 19.2.6.2,\n               aLateEvents.\"\n       ::= { rptrMonitorPortEntry\
    \ 11 }\n   rptrMonitorPortVeryLongEvents OBJECT-TYPE\n       SYNTAX    Counter\n\
    \       ACCESS    read-only\n       STATUS    mandatory\n       DESCRIPTION\n\
    \               \"This counter is incremented by one for each\n              \
    \ CarrierEvent on this port whose ActivityDuration\n               is greater\
    \ than the MAU Jabber Lockup Protection\n               timer TW3 (Ref: 9.6.1\
    \ & 9.6.5, IEEE 802.3 Std).\n               Other counters may be incremented\
    \ as appropriate.\"\n       REFERENCE\n               \"Reference IEEE 802.3 Rptr\
    \ Mgt, 19.2.6.2,\n               aVeryLongEvents.\"\n       ::= { rptrMonitorPortEntry\
    \ 12 }\n   rptrMonitorPortDataRateMismatches OBJECT-TYPE\n       SYNTAX    Counter\n\
    \       ACCESS    read-only\n       STATUS    mandatory\n       DESCRIPTION\n\
    \               \"This counter is incremented by one for each frame\n        \
    \       received on this port that meets all of the\n               following\
    \ conditions:  a) The CollisionEvent\n               signal is not asserted. \
    \ b) The ActivityDuration\n               is greater than ValidPacketMinTime.\
    \  c) The\n               frequency (data rate) is detectably mismatched\n   \
    \            from the local transmit frequency.  The exact\n               degree\
    \ of mismatch is vendor specific and is to be\n               defined by the vendor\
    \ for conformance testing.\n               When this event occurs, other counters\
    \ whose\n               increment conditions were satisfied may or may not\n \
    \              also be incremented, at the implementor's\n               discretion.\
    \  Whether or not the repeater was able\n               to maintain data integrity\
    \ is beyond the scope of\n               this standard.\"\n       REFERENCE\n\
    \               \"Reference IEEE 802.3 Rptr Mgt, 19.2.6.2,\n               aDataRateMismatches.\"\
    \n       ::= { rptrMonitorPortEntry 13 }\n   rptrMonitorPortAutoPartitions OBJECT-TYPE\n\
    \       SYNTAX    Counter\n       ACCESS    read-only\n       STATUS    mandatory\n\
    \       DESCRIPTION\n               \"This counter is incremented by one for each\
    \ time\n               the repeater has automatically partitioned this\n     \
    \          port.  The conditions that cause port partitioning\n              \
    \ are specified in the partition state machine in\n               Section 9 [IEEE\
    \ 802.3 Std].  They are not\n               differentiated here.\"\n       REFERENCE\n\
    \               \"Reference IEEE 802.3 Rptr Mgt, 19.2.6.2,\n               aAutoPartitions.\"\
    \n       ::= { rptrMonitorPortEntry 14 }\n   rptrMonitorPortTotalErrors OBJECT-TYPE\n\
    \       SYNTAX    Counter\n       ACCESS    read-only\n       STATUS    mandatory\n\
    \       DESCRIPTION\n               \"The total number of errors which have occurred\
    \ on\n               this port.  This counter is the summation of the\n      \
    \         values of other error counters (for the same\n               port),\
    \ namely:\n                   rptrMonitorPortFCSErrors,\n                   rptrMonitorPortAlignmentErrors,\n\
    \                   rptrMonitorPortFrameTooLongs,\n                   rptrMonitorPortShortEvents,\n\
    \                   rptrMonitorPortLateEvents,\n                   rptrMonitorPortVeryLongEvents,\
    \ and\n                   rptrMonitorPortDataRateMismatches.\n               This\
    \ counter is redundant in the sense that it is\n               the summation of\
    \ information already available\n               through other objects.  However,\
    \ it is included\n               specifically because the regular retrieval of\
    \ this\n               object as a means of tracking the health of a port\n  \
    \             provides a considerable optimization of network\n              \
    \ management traffic over the otherwise necessary\n               retrieval of\
    \ the summed counters.\"\n       ::= { rptrMonitorPortEntry 15 }\n   --\n   --\
    \                    The ADDRESS TRACKING GROUP\n   --\n   -- Implementation of\
    \ this group is optional; it is appropriate\n   -- for all systems which have\
    \ the necessary instrumentation.  If a\n   -- managed repeater implements any\
    \ part of this group, the entire\n   -- group shall be implemented.\n   --\n \
    \  -- The Port Address Tracking Table\n   --\n   rptrAddrTrackTable OBJECT-TYPE\n\
    \       SYNTAX    SEQUENCE OF RptrAddrTrackEntry\n       ACCESS    not-accessible\n\
    \       STATUS    mandatory\n       DESCRIPTION\n               \"Table of address\
    \ mapping information about the\n               ports.\"\n       ::= { rptrAddrTrackPortInfo\
    \ 1 }\n   rptrAddrTrackEntry OBJECT-TYPE\n       SYNTAX    RptrAddrTrackEntry\n\
    \       ACCESS    not-accessible\n       STATUS    mandatory\n       DESCRIPTION\n\
    \               \"An entry in the table, containing address mapping\n        \
    \       information about a single port.\"\n       INDEX    { rptrAddrTrackGroupIndex,\
    \ rptrAddrTrackPortIndex }\n       ::= { rptrAddrTrackTable 1 }\n   RptrAddrTrackEntry\
    \ ::=\n       SEQUENCE {\n           rptrAddrTrackGroupIndex\n               INTEGER,\n\
    \           rptrAddrTrackPortIndex\n               INTEGER,\n           rptrAddrTrackLastSourceAddress\
    \     -- DEPRECATED OBJECT\n               MacAddress,\n           rptrAddrTrackSourceAddrChanges\n\
    \               Counter,\n           rptrAddrTrackNewLastSrcAddress\n        \
    \       OCTET STRING\n       }\n   rptrAddrTrackGroupIndex OBJECT-TYPE\n     \
    \  SYNTAX    INTEGER (1..1024)\n       ACCESS    read-only\n       STATUS    mandatory\n\
    \       DESCRIPTION\n               \"This object identifies the group containing\
    \ the\n               port for which this entry contains information.\"\n    \
    \   ::= { rptrAddrTrackEntry 1 }\n   rptrAddrTrackPortIndex OBJECT-TYPE\n    \
    \   SYNTAX    INTEGER (1..1024)\n       ACCESS    read-only\n       STATUS   \
    \ mandatory\n       DESCRIPTION\n               \"This object identifies the port\
    \ within the group\n               for which this entry contains information.\"\
    \n       REFERENCE\n               \"Reference IEEE 802.3 Rptr Mgt, 19.2.6.2,\n\
    \               aPortID.\"\n       ::= { rptrAddrTrackEntry 2 }\n   rptrAddrTrackLastSourceAddress\
    \ OBJECT-TYPE\n       SYNTAX    MacAddress\n       ACCESS    read-only\n     \
    \  STATUS    deprecated\n       DESCRIPTION\n               \"This object is the\
    \ SourceAddress of the last\n               readable frame (i.e., counted by\n\
    \               rptrMonitorPortReadableFrames) received by this\n            \
    \   port.\n               This object has been deprecated because its value\n\
    \               is undefined when no frames have been observed on\n          \
    \     this port.  The replacement object is\n               rptrAddrTrackNewLastSrcAddress.\"\
    \n       REFERENCE\n               \"Reference IEEE 802.3 Rptr Mgt, 19.2.6.2,\n\
    \               aLastSourceAddress.\"\n       ::= { rptrAddrTrackEntry 3 }\n \
    \  rptrAddrTrackSourceAddrChanges OBJECT-TYPE\n       SYNTAX    Counter\n    \
    \   ACCESS    read-only\n       STATUS    mandatory\n       DESCRIPTION\n    \
    \           \"This counter is incremented by one for each time\n             \
    \  that the rptrAddrTrackLastSourceAddress attribute\n               for this\
    \ port has changed.\n               This may indicate whether a link is connected\
    \ to a\n               single DTE or another multi-user segment.\n           \
    \    The approximate minimum time for rollover of this\n               counter\
    \ is 81 hours.\"\n       REFERENCE\n               \"Reference IEEE 802.3 Rptr\
    \ Mgt, 19.2.6.2,\n               aSourceAddressChanges.\"\n       ::= { rptrAddrTrackEntry\
    \ 4 }\n   rptrAddrTrackNewLastSrcAddress OBJECT-TYPE\n       SYNTAX    OCTET STRING\
    \ (SIZE(0 | 6))\n       ACCESS    read-only\n       STATUS    mandatory\n    \
    \   DESCRIPTION\n               \"This object is the SourceAddress of the last\n\
    \               readable frame (i.e., counted by\n               rptrMonitorPortReadableFrames)\
    \ received by this\n               port.  If no frames have been received by this\n\
    \               port since the agent began monitoring the port\n             \
    \  activity, the agent shall return a string of\n               length zero.\"\
    \n       REFERENCE\n               \"Reference IEEE 802.3 Rptr Mgt, 19.2.6.2,\n\
    \               aLastSourceAddress.\"\n       ::= { rptrAddrTrackEntry 5 }\n \
    \  -- Traps for use by Repeaters\n   -- Traps are defined using the conventions\
    \ in RFC 1215 [6].\n   rptrHealth TRAP-TYPE\n       ENTERPRISE  snmpDot3RptrMgt\n\
    \       VARIABLES   { rptrOperStatus }\n       DESCRIPTION\n               \"\
    The rptrHealth trap conveys information related\n               to the operational\
    \ status of the repeater.  This\n               trap is sent either when the value\
    \ of\n               rptrOperStatus changes, or upon completion of a\n       \
    \        non-disruptive test.\n               The rptrHealth trap must contain\
    \ the\n               rptrOperStatus object.  The agent may optionally\n     \
    \          include the rptrHealthText object in the varBind\n               list.\
    \  See the rptrOperStatus and rptrHealthText\n               objects for descriptions\
    \ of the information that\n               is sent.\n               The agent must\
    \ throttle the generation of\n               consecutive rptrHealth traps so that\
    \ there is at\n               least a five-second gap between traps of this\n\
    \               type.  When traps are throttled, they are dropped,\n         \
    \      not queued for sending at a future time.  (Note\n               that 'generating'\
    \ a trap means sending to all\n               configured recipients.)\"\n    \
    \   REFERENCE\n               \"Reference IEEE 802.3 Rptr Mgt, 19.2.3.4,\n   \
    \            hubHealth notification.\"\n       ::= 1\n   rptrGroupChange TRAP-TYPE\n\
    \       ENTERPRISE  snmpDot3RptrMgt\n       VARIABLES   { rptrGroupIndex }\n \
    \      DESCRIPTION\n               \"This trap is sent when a change occurs in\
    \ the\n               group structure of a repeater.  This occurs only\n     \
    \          when a group is logically or physically removed\n               from\
    \ or added to a repeater.  The varBind list\n               contains the identifier\
    \ of the group that was\n               removed or added.\n               The\
    \ agent must throttle the generation of\n               consecutive rptrGroupChange\
    \ traps for the same\n               group so that there is at least a five-second\
    \ gap\n               between traps of this type.  When traps are\n          \
    \     throttled, they are dropped, not queued for\n               sending at a\
    \ future time.  (Note that 'generating'\n               a trap means sending to\
    \ all configured\n               recipients.)\"\n       REFERENCE\n          \
    \     \"Reference IEEE 802.3 Rptr Mgt, 19.2.3.4,\n               groupMapChange\
    \ notification.\"\n       ::= 2\n   rptrResetEvent TRAP-TYPE\n       ENTERPRISE\
    \  snmpDot3RptrMgt\n       VARIABLES   { rptrOperStatus }\n       DESCRIPTION\n\
    \               \"The rptrResetEvent trap conveys information\n              \
    \ related to the operational status of the repeater.\n               This trap\
    \ is sent on completion of a repeater\n               reset action.  A repeater\
    \ reset action is defined\n               as an a transition to the START state\
    \ of Fig 9-2\n               in section 9 [IEEE 802.3 Std], when triggered by\
    \ a\n               management command (e.g., an SNMP Set on the\n           \
    \    rptrReset object).\n               The agent must throttle the generation\
    \ of\n               consecutive rptrResetEvent traps so that there is\n     \
    \          at least a five-second gap between traps of this\n               type.\
    \  When traps are throttled, they are dropped,\n               not queued for\
    \ sending at a future time.  (Note\n               that 'generating' a trap means\
    \ sending to all\n               configured recipients.)\n               The rptrResetEvent\
    \ trap is not sent when the agent\n               restarts and sends an SNMP coldStart\
    \ or warmStart\n               trap.  However, it is recommended that a repeater\n\
    \               agent send the rptrOperStatus object as an\n               optional\
    \ object with its coldStart and warmStart\n               trap PDUs.\n       \
    \        The rptrOperStatus object must be included in the\n               varbind\
    \ list sent with this trap.  The agent may\n               optionally include\
    \ the rptrHealthText object as\n               well.\"\n       REFERENCE\n   \
    \            \"Reference IEEE 802.3 Rptr Mgt, 19.2.3.4, hubReset\n           \
    \    notification.\"\n       ::= 3\n   END\n"
- title: 4.  Changes from RFC 1368
  contents:
  - "4.  Changes from RFC 1368\n   (1)  Added section 2.1.4, \"Internal Ports and\
    \ MAUs,\" that defines\n        internal ports and clarifies how they may or may\
    \ not be\n        managed.\n   (2)  Noted that the failure list for rptrOperStatus\
    \ is ordered\n        highest priority first.\n   (3)  Clarified rptrReset description\
    \ to indicate that the agent\n        may briefly delay the reset action.\n  \
    \ (4)  For rptrReset, clarified the actions that the agent should\n        take\
    \ after performing the reset and self-test.\n   (5)  For rptrNonDisruptTest, similar\
    \ change to (3).\n   (6)  Clarified that the rptrNonDisruptTest description allows\n\
    \        returning \"ok\" after doing only a trivial test.\n   (7)  Deprecated\
    \ rptrAddrTrackLastSourceAddress and defined a\n        replacement object that\
    \ has a zero-length value until the\n        first frame is seen on the port.\n\
    \   (8)  Clarified that rptrHealth trap is sent after\n        rptrNonDisruptTest\
    \ even if repeater health information\n        doesn't change as a result of the\
    \ test.\n   (9)  Clarified text on throttling traps.\n"
- title: 5.  Acknowledgments
  contents:
  - "5.  Acknowledgments\n   This document is the work of the IETF Hub MIB Working\
    \ Group.  It is\n   based on drafts of the IEEE 802.3 Repeater Management Task\
    \ Force.\n"
- title: 6.  References
  contents:
  - "6.  References\n   [1]  Rose M., and K. McCloghrie, \"Structure and Identification\
    \ of\n        Management Information for TCP/IP-based internets\", STD 16, RFC\n\
    \        1155, Performance Systems International, Hughes LAN Systems, May\n  \
    \      1990.\n   [2]  Case, J., Fedor, M., Schoffstall, M., and J. Davin, \"Simple\n\
    \        Network Management Protocol\", STD 15, RFC 1157, SNMP Research,\n   \
    \     Performance Systems International, Performance Systems\n        International,\
    \ MIT Laboratory for Computer Science, May 1990.\n   [3]  McCloghrie K., and M.\
    \ Rose, Editors, \"Management Information\n        Base for Network Management\
    \ of TCP/IP-based internets\", STD 17,\n        RFC 1213, Performance Systems\
    \ International, March 1991.\n   [4]  Information processing systems - Open Systems\
    \ Interconnection -\n        Specification of Abstract Syntax Notation One (ASN.1),\n\
    \        International Organization for Standardization, International\n     \
    \   Standard 8824, December 1987.\n   [5]  Rose, M., and K. McCloghrie, Editors,\
    \ \"Concise MIB Definitions\",\n        STD 16, RFC 1212, Performance Systems\
    \ International, Hughes LAN\n        Systems, March 1991.\n   [6]  Rose, M., Editor,\
    \ \"A Convention for Defining Traps for use with\n        the SNMP\", RFC 1215,\
    \ Performance Systems International, March\n        1991.\n   [7]  IEEE 802.3/ISO\
    \ 8802-3 - Information processing systems - Local\n        area networks - Part\
    \ 3: Carrier sense multiple access with\n        collision detection (CSMA/CD)\
    \ access method and physical layer\n        specifications, 2nd edition, 21 September\
    \ 1990.\n   [8]  IEEE P802.3K - Layer Management for 10 Mb/s Baseband Repeaters,\n\
    \        Section 19, Draft Supplement to ANSI/IEEE 802.3, Draft 8, 9\n       \
    \ April 1992.\n"
- title: 7.  Security Considerations
  contents:
  - "7.  Security Considerations\n   Security issues are not discussed in this memo.\n"
- title: 8.  Authors' Addresses
  contents:
  - "8.  Authors' Addresses\n   Donna McMaster\n   SynOptics Communications, Inc.\n\
    \   4401 Great America Parkway\n   P.O. Box 58185\n   Santa Clara, CA 95052-8185\n\
    \   Phone: (408) 764-1206\n   EMail: mcmaster@synoptics.com\n   Keith McCloghrie\n\
    \   Hughes LAN Systems, Inc.\n   1225 Charleston Road\n   Mountain View, CA 94043\n\
    \   Phone: (415) 966-7934\n   EMail: kzm@hls.com\n"
