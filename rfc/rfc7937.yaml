- title: __initial_text__
  contents:
  - ' Content Distribution Network Interconnection (CDNI) Logging Interface

    '
- title: Abstract
  contents:
  - "Abstract\n   This memo specifies the Logging interface between a downstream\n\
    \   Content Distribution Network (dCDN) and an upstream CDN (uCDN) that\n   are\
    \ interconnected as per the CDN Interconnection (CDNI) framework.\n   First, it\
    \ describes a reference model for CDNI logging.  Then, it\n   specifies the CDNI\
    \ Logging File format and the actual protocol for\n   exchange of CDNI Logging\
    \ Files.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This\
    \ document is a product of the Internet Engineering Task Force\n   (IETF).  It\
    \ represents the consensus of the IETF community.  It has\n   received public\
    \ review and has been approved for publication by the\n   Internet Engineering\
    \ Steering Group (IESG).  Further information on\n   Internet Standards is available\
    \ in Section 2 of RFC 7841.\n   Information about the current status of this document,\
    \ any errata,\n   and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc7937.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2016 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction  . . . . . . . . . . . . . . . . . . .\
    \ . . . . .   3\n     1.1.  Terminology . . . . . . . . . . . . . . . . . . .\
    \ . . . .   4\n     1.2.  Requirements Language . . . . . . . . . . . . . . .\
    \ . . .   5\n   2.  CDNI Logging Reference Model  . . . . . . . . . . . . . .\
    \ . .   5\n     2.1.  CDNI Logging Interactions . . . . . . . . . . . . . . .\
    \ .   5\n     2.2.  Overall Logging Chain . . . . . . . . . . . . . . . . . .\
    \   9\n       2.2.1.  Logging Generation and During-Generation Aggregation   10\n\
    \       2.2.2.  Logging Collection  . . . . . . . . . . . . . . . . .  11\n  \
    \     2.2.3.  Logging Filtering . . . . . . . . . . . . . . . . . .  11\n    \
    \   2.2.4.  Logging Rectification and Post-Generation Aggregation  12\n      \
    \ 2.2.5.  Log-Consuming Applications  . . . . . . . . . . . . .  13\n        \
    \ 2.2.5.1.  Maintenance and Debugging . . . . . . . . . . . .  13\n         2.2.5.2.\
    \  Accounting  . . . . . . . . . . . . . . . . . . .  14\n         2.2.5.3.  Analytics\
    \ and Reporting . . . . . . . . . . . . .  14\n         2.2.5.4.  Content Protection\
    \  . . . . . . . . . . . . . . .  14\n         2.2.5.5.  Notions Common to Multiple\
    \ Log-Consuming\n                   Applications  . . . . . . . . . . . . . .\
    \ . . . .  15\n   3.  CDNI Logging File . . . . . . . . . . . . . . . . . . .\
    \ . . .  17\n     3.1.  Rules . . . . . . . . . . . . . . . . . . . . . . . .\
    \ . .  17\n     3.2.  CDNI Logging File Structure . . . . . . . . . . . . . .\
    \ .  18\n     3.3.  CDNI Logging Directives . . . . . . . . . . . . . . . . .\
    \  21\n     3.4.  CDNI Logging Records  . . . . . . . . . . . . . . . . . .  26\n\
    \       3.4.1.  HTTP Request Logging Record . . . . . . . . . . . . .  27\n  \
    \   3.5.  CDNI Logging File Extension . . . . . . . . . . . . . . .  38\n    \
    \ 3.6.  CDNI Logging File Examples  . . . . . . . . . . . . . . .  38\n     3.7.\
    \  Cascaded CDNI Logging Files Example . . . . . . . . . . .  42\n   4.  Protocol\
    \ for Exchange of CDNI Logging File after Full\n       Collection  . . . . . .\
    \ . . . . . . . . . . . . . . . . . . .  44\n     4.1.  CDNI Logging Feed . .\
    \ . . . . . . . . . . . . . . . . . .  45\n       4.1.1.  Atom Formatting . .\
    \ . . . . . . . . . . . . . . . . .  45\n       4.1.2.  Updates to Log Files and\
    \ the Feed . . . . . . . . . .  46\n       4.1.3.  Redundant Feeds . . . . . .\
    \ . . . . . . . . . . . . .  47\n       4.1.4.  Example CDNI Logging Feed . .\
    \ . . . . . . . . . . . .  47\n     4.2.  CDNI Logging File Pull  . . . . . .\
    \ . . . . . . . . . . .  49\n   5.  Protocol for Exchange of CDNI Logging File\
    \ During Collection   50\n   6.  IANA Considerations . . . . . . . . . . . . .\
    \ . . . . . . . .  51\n     6.1.  CDNI Logging Directive Names Registry . . .\
    \ . . . . . . .  51\n     6.2.  CDNI Logging File version Registry  . . . . .\
    \ . . . . . .  51\n     6.3.  CDNI Logging record-types Registry  . . . . . .\
    \ . . . . .  52\n     6.4.  CDNI Logging Field Names Registry . . . . . . . .\
    \ . . . .  53\n     6.5.  CDNI Logging Payload Type . . . . . . . . . . . . .\
    \ . . .  55\n   7.  Security Considerations . . . . . . . . . . . . . . . . .\
    \ . .  55\n     7.1.  Authentication, Authorization, Confidentiality, and\n  \
    \         Integrity Protection  . . . . . . . . . . . . . . . . . .  55\n    \
    \ 7.2.  Denial of Service . . . . . . . . . . . . . . . . . . . .  56\n     7.3.\
    \  Privacy . . . . . . . . . . . . . . . . . . . . . . . . .  57\n   8.  References\
    \  . . . . . . . . . . . . . . . . . . . . . . . . .  58\n     8.1.  Normative\
    \ References  . . . . . . . . . . . . . . . . . .  58\n     8.2.  Informative\
    \ References  . . . . . . . . . . . . . . . . .  61\n   Acknowledgments . . .\
    \ . . . . . . . . . . . . . . . . . . . . . .  63\n   Authors' Addresses  . .\
    \ . . . . . . . . . . . . . . . . . . . . .  63\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   This memo specifies the CDNI Logging interface between a\
    \ downstream\n   CDN (dCDN) and an upstream CDN (uCDN).  First, it describes a\n\
    \   reference model for CDNI logging.  Then, it specifies the CDNI\n   Logging\
    \ File format and the actual protocol for exchange of CDNI\n   Logging Files.\n\
    \   The reader should be familiar with the following documents:\n   o  CDNI problem\
    \ statement [RFC6707] and framework [RFC7336], which\n      identify a Logging\
    \ interface,\n   o  Section 8 of [RFC7337], which specifies a set of requirements\
    \ for\n      Logging,\n   o  [RFC6770] outlines real world use cases for interconnecting\
    \ CDNs.\n      These use cases require the exchange of Logging information\n \
    \     between the dCDN and the uCDN.\n   As stated in [RFC6707], \"the CDNI Logging\
    \ interface enables details\n   of content distribution and delivery activities\
    \ to be exchanged\n   between interconnected CDNs.\"\n   The present document\
    \ describes:\n   o  The CDNI Logging reference model (Section 2)\n   o  The CDNI\
    \ Logging File format (Section 3)\n   o  The CDNI Logging File Exchange protocol\
    \ (Section 4)\n"
- title: 1.1.  Terminology
  contents:
  - "1.1.  Terminology\n   In this document, the first letter of each CDNI-specific\
    \ term is\n   capitalized.  We adopt the terminology described in [RFC6707] and\n\
    \   [RFC7336], and extend it with the additional terms defined below.\n   Intra-CDN\
    \ Logging information: Logging information generated and\n   collected within\
    \ a CDN.  The format of the Intra-CDN Logging\n   information may be different\
    \ from the format of the CDNI Logging\n   information.\n   CDNI Logging information:\
    \ Logging information exchanged across CDNs\n   using the CDNI Logging interface.\n\
    \   Logging information: Logging information generated and collected\n   within\
    \ a CDN or obtained from another CDN using the CDNI Logging\n   interface.\n \
    \  CDNI Logging Field: An atomic element of information that can be\n   included\
    \ in a CDNI Logging Record.  The time an event/task started,\n   the IP address\
    \ of an end user to whom content was delivered, and the\n   Uniform Resource Identifier\
    \ (URI) of the content delivered, are\n   examples of CDNI Logging fields.\n \
    \  CDNI Logging Record: An information record providing information\n   about\
    \ a specific event.  This comprises a collection of CDNI Logging\n   fields.\n\
    \   CDNI Logging File: A file containing CDNI Logging Records, as well as\n  \
    \ additional information facilitating the processing of the CDNI\n   Logging Records.\n\
    \   CDN Reporting: The process of providing the relevant information that\n  \
    \ will be used to create a formatted content delivery report provided\n   to the\
    \ Content Service Provider (CSP) in deferred time.  Such\n   information typically\
    \ includes aggregated data that can cover a large\n   period of time (e.g., from\
    \ hours to several months).  Uses of\n   reporting include the collection of charging\
    \ data related to CDN\n   services and the computation of Key Performance Indicators\
    \ (KPIs).\n   CDN Monitoring: The process of providing or displaying content\n\
    \   delivery information in a timely fashion with respect to the\n   corresponding\
    \ deliveries.  Monitoring typically includes visibility\n   of the deliveries\
    \ in progress for service operation purposes.  It\n   presents a view of the global\
    \ health of the services as well as\n   information on usage and performance,\
    \ for network services\n   supervision and operation management.  In particular,\
    \ monitoring data\n   can be used to generate alarms.\n"
- title: 1.2.  Requirements Language
  contents:
  - "1.2.  Requirements Language\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\"\
    , \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"\
    NOT RECOMMENDED\", \"MAY\", and\n   \"OPTIONAL\" in this document are to be interpreted\
    \ as described in RFC\n   2119 [RFC2119].\n"
- title: 2.  CDNI Logging Reference Model
  contents:
  - '2.  CDNI Logging Reference Model

    '
- title: 2.1.  CDNI Logging Interactions
  contents:
  - "2.1.  CDNI Logging Interactions\n   The CDNI logging reference model between\
    \ a given uCDN and a given\n   dCDN involves the following interactions:\n   o\
    \  customization by the uCDN of the CDNI Logging information to be\n      provided\
    \ by the dCDN to the uCDN (e.g., control of which CDNI\n      Logging fields are\
    \ to be communicated to the uCDN for a given task\n      performed by the dCDN\
    \ or control of which types of events are to\n      be logged).  The dCDN takes\
    \ into account this CDNI Logging\n      customization information to determine\
    \ what Logging information to\n      provide to the uCDN, but it may, or may not,\
    \ take into account\n      this CDNI Logging customization information to influence\
    \ what CDN\n      Logging information is to be generated and collected within\
    \ the\n      dCDN (e.g., even if the uCDN requests a restricted subset of the\n\
    \      Logging information, the dCDN may elect to generate a broader set\n   \
    \   of Logging information).  The mechanism to support the\n      customization\
    \ by the uCDN of CDNI Logging information is outside\n      the scope of this\
    \ document and is left for further study.  Until\n      such a mechanism is available,\
    \ the uCDN and dCDN are expected to\n      agree off-line on what exact set of\
    \ CDNI Logging information is to\n      be provided by the dCDN to the uCDN, and\
    \ to rely on management-\n      plane actions to configure the CDNI Logging functions\
    \ in the dCDN\n      to generate this information set and in the uCDN to expect\
    \ this\n      information set.\n   o  generation and collection by the dCDN of\
    \ the intra-CDN Logging\n      information related to the completion of any task\
    \ performed by the\n      dCDN on behalf of the uCDN (e.g., delivery of the content\
    \ to an\n      end user) or related to events happening in the dCDN that are\n\
    \      relevant to the uCDN (e.g., failures or unavailability in dCDN).\n    \
    \  This takes place within the dCDN and does not directly involve\n      CDNI\
    \ interfaces.\n   o  communication by the dCDN to the uCDN of the Logging information\n\
    \      collected by the dCDN relevant to the uCDN.  This is supported by\n   \
    \   the CDNI Logging interface and is in the scope of the present\n      document.\
    \  For example, the uCDN may use this Logging information\n      to charge the\
    \ CSP, to perform analytics and monitoring for\n      operational reasons, to\
    \ provide analytics and monitoring views on\n      its content delivery to the\
    \ CSP, or to perform troubleshooting.\n      This document exclusively specifies\
    \ non-real-time exchange of\n      Logging information.  Closer to real-time exchange\
    \ of Logging\n      information (say sub-minute or sub-second) is outside the\
    \ scope of\n      the present document and is left for further study.  This document\n\
    \      exclusively specifies exchange of Logging information related to\n    \
    \  content delivery.  Exchange of Logging information related to\n      operational\
    \ events (e.g., dCDN request routing function\n      unavailable and content acquisition\
    \ failure by dCDN) for audit or\n      operational reactive adjustments by uCDN\
    \ is outside the scope of\n      the present document and is left for further\
    \ study.\n   o  customization by the dCDN of the CDNI Logging information to be\n\
    \      provided by the uCDN on behalf of the dCDN.  The mechanism to\n      support\
    \ the customization by the dCDN of CDNI Logging information\n      is outside\
    \ the scope of this document and is left for further\n      study.\n   o  generation\
    \ and collection by the uCDN of Intra-CDN Logging\n      information related to\
    \ the completion of any task performed by the\n      uCDN on behalf of the dCDN\
    \ (e.g., serving of content by uCDN to\n      dCDN for acquisition purposes by\
    \ dCDN) or related to events\n      happening in the uCDN that are relevant to\
    \ the dCDN.  This takes\n      place within the uCDN and does not directly involve\
    \ CDNI\n      interfaces.\n   o  communication by the uCDN to the dCDN of the\
    \ Logging information\n      collected by the uCDN relevant to the dCDN.  For\
    \ example, the dCDN\n      might potentially benefit from this information for\
    \ security\n      auditing or content acquisition troubleshooting.  This is outside\n\
    \      the scope of this document and is left for further study.\n   Figure 1\
    \ provides an example of CDNI Logging interactions (focusing\n   only on the interactions\
    \ that are in the scope of this document) in a\n   particular scenario where four\
    \ CDNs are involved in the delivery of\n   content from a given CSP: the uCDN\
    \ has a CDNI interconnection with\n   dCDN-1 and dCDN-2.  In turn, dCDN-2 has\
    \ a CDNI interconnection with\n   dCDN-3, where dCDN-2 is acting as an upstream\
    \ CDN relative to dCDN-3.\n   In this example, uCDN, dCDN-1, dCDN-2, and dCDN-3\
    \ all participate in\n   the delivery of content for the CSP.  In this example,\
    \ the CDNI\n   Logging interface enables the uCDN to obtain Logging information\
    \ from\n   all the dCDNs involved in the delivery.  In the example, the uCDN\n\
    \   uses the Logging information:\n   o  to analyze the performance of the delivery\
    \ performed by the dCDNs\n      and to adjust its operations after the fact (e.g.,\
    \ request\n      routing) as appropriate.\n   o  to provide (non-real-time) reporting\
    \ and monitoring information to\n      the CSP.\n   For instance, the uCDN merges\
    \ Logging information, extracts relevant\n   KPIs, and presents a formatted report\
    \ to the CSP, in addition to a\n   bill for the content delivered by uCDN itself\
    \ or by its dCDNs on the\n   CSP's behalf.  The uCDN may also provide Logging\
    \ information as raw\n   log files to the CSP, so that the CSP can use its own\
    \ logging\n   analysis tools.\n                   +-----+\n                  \
    \ | CSP |\n                   +-----+\n                      ^ Reporting and monitoring\
    \ data\n                      * Billing\n                   ,--*--.\n       Logging\
    \  ,-'       `-.\n       Data  =>(     uCDN    )<=   Logging\n          //   `-.\
    \       _,-'   \\\\  Data\n          ||      `-'-'-'      ||\n       ,-----. \
    \                ,-----.\n    ,-'       `-.           ,-'       `-.\n   (   dCDN-1\
    \    )         (   dCDN-2    )<==  Logging\n    `-.       ,-'          `-.   \
    \   _,-'    \\\\ Data\n      `--'--'                  `--'-'        ||\n     \
    \                                     ,-----.\n                              \
    \          ,'       `-.\n                                       (  dCDN-3    )\n\
    \                                        `.       ,-'\n                      \
    \                    `--'--'\n   ===> CDNI Logging interface\n   ***> outside\
    \ the scope of CDNI\n        Figure 1: Interactions in the CDNI Logging Reference\
    \ Model\n   A downstream CDN relative to uCDN (e.g., dCDN-2) integrates the\n\
    \   relevant Logging information obtained from its own downstream CDNs\n   (i.e.,\
    \ dCDN-3) in the Logging information that it provides to the\n   uCDN, so that\
    \ the uCDN ultimately obtains all Logging information\n   relevant to a CSP for\
    \ which it acts as the authoritative CDN.  Such\n   aggregation is further discussed\
    \ in Section 3.7.\n   Note that the format of Logging information that a CDN provides\
    \ over\n   the CDNI interface might be different from the one that the CDN uses\n\
    \   internally.  In this case, the CDN needs to reformat the Logging\n   information\
    \ before it provides this information to the other CDN over\n   the CDNI Logging\
    \ interface.  Similarly, a CDN might reformat the\n   Logging information that\
    \ it receives over the CDNI Logging interface\n   before injecting it into its\
    \ log-consuming applications or before\n   providing some of this Logging information\
    \ to the CSP.  Such\n   reformatting operations introduce latency in the logging\
    \ distribution\n   chain and introduce a processing burden.  Therefore, there\
    \ are\n   benefits in specifying CDNI Logging formats that are suitable for use\n\
    \   inside CDNs and also are close to the intra-CDN Logging formats\n   commonly\
    \ used in CDNs today.\n"
- title: 2.2.  Overall Logging Chain
  contents:
  - "2.2.  Overall Logging Chain\n   This section discusses the overall logging chain\
    \ within and across\n   CDNs to clarify how CDN Logging information is expected\
    \ to fit in\n   this overall chain.  Figure 2 illustrates the overall logging\
    \ chain\n   within the dCDN, across CDNs using the CDNI Logging interface, and\n\
    \   within the uCDN.  Note that the logging chain illustrated in the\n   figure\
    \ is obviously only an example and varies depending on the\n   specific environments.\
    \  For example, there may be more or fewer\n   instantiations of each entity (e.g.,\
    \ there may be 4 log-consuming\n   applications in a given CDN).  As another example,\
    \ there may be one\n   instance of a Rectification process per log-consuming application\n\
    \   instead of a shared one.\n             Log-Consuming    Log-Consuming\n  \
    \               App              App\n                 ^                ^\n  \
    \               |                |\n           Rectification----------\n     \
    \      ^\n           |\n           Filtering\n            ^\n            |\n \
    \       Collection\n        ^        ^\n        |        |\n        |     Generation\n\
    \        |\n        |                                                     uCDN\n\
    \   CDNI Logging ---------------------------------------------------\n   exchange\
    \                                                   dCDN\n        ^\n        |\
    \          Log-Consuming    Log-Consuming\n        |                 App     \
    \         App\n        |                  ^               ^\n        |       \
    \           |               |\n   Rectification     Rectification---------\n \
    \          ^        ^\n           |        |\n           Filtering\n         \
    \   ^\n            |\n         Collection\n         ^        ^\n         |   \
    \     |\n   Generation    Generation\n            Figure 2: CDNI Logging in the\
    \ Overall Logging Chain\n   The following subsections describe each of the processes\
    \ potentially\n   involved in the logging chain of Figure 2.\n"
- title: 2.2.1.  Logging Generation and During-Generation Aggregation
  contents:
  - "2.2.1.  Logging Generation and During-Generation Aggregation\n   CDNs typically\
    \ generate Logging information for all significant task\n   completions, events,\
    \ and failures.  Logging information is typically\n   generated by many devices\
    \ in the CDN including the surrogates, the\n   request routing system, and the\
    \ control system.\n   The amount of Logging information generated can be huge.\
    \  Therefore,\n   during contract negotiations, interconnected CDNs often agree\
    \ on a\n   retention duration for Logging information, and/or potentially on a\n\
    \   maximum volume of Logging information that the dCDN ought to keep.\n   If\
    \ this volume is exceeded, the dCDN is expected to alert the uCDN\n   but may\
    \ not keep more Logging information for the considered time\n   period.  In addition,\
    \ CDNs may aggregate Logging information and\n   transmit only summaries for some\
    \ categories of operations instead of\n   the full Logging information.  Note\
    \ that such aggregation leads to an\n   information loss, which may be problematic\
    \ for some usages of the\n   Logging information (e.g., debugging).\n   [RFC6983]\
    \ discusses logging for HTTP Adaptive Streaming (HAS).  In\n   accordance with\
    \ the recommendations articulated there, it is expected\n   that a surrogate will\
    \ generate separate Logging information for\n   delivery of each chunk of HAS\
    \ content.  This ensures that separate\n   Logging information can then be provided\
    \ to interconnected CDNs over\n   the CDNI Logging interface.  Still in line with\
    \ the recommendations\n   of [RFC6983], the Logging information for per-chunk\
    \ delivery may\n   include some information (a Content Collection IDentifier and\
    \ a\n   Session IDentifier) intended to facilitate subsequent post-generation\n\
    \   aggregation of per-chunk logs into per-session logs.  Note that a CDN\n  \
    \ may also elect to generate aggregate per-session logs when performing\n   HAS\
    \ delivery, but this needs to be in addition to, and not instead\n   of, the per-chunk\
    \ delivery logs.  We note that aggregate per-session\n   logs for HAS delivery\
    \ are for further study and are outside the scope\n   of this document.\n"
- title: 2.2.2.  Logging Collection
  contents:
  - "2.2.2.  Logging Collection\n   This is the process that continuously collects\
    \ Logging information\n   generated by the log-generating entities within a CDN.\n\
    \   In a CDNI environment, in addition to collecting Logging information\n   from\
    \ log-generating entities within the local CDN, the Collection\n   process also\
    \ collects Logging information provided by another CDN, or\n   other CDNs, through\
    \ the CDNI Logging interface.  This is illustrated\n   in Figure 2 where we see\
    \ that the Collection process of the uCDN\n   collects Logging information from\
    \ log-generating entities within the\n   uCDN as well as Logging information coming\
    \ from the dCDNs through the\n   CDNI Logging interface.\n"
- title: 2.2.3.  Logging Filtering
  contents:
  - "2.2.3.  Logging Filtering\n   A CDN may be required to only present different\
    \ subsets of the whole\n   Logging information collected to various log-consuming\
    \ applications.\n   This is achieved by the Filtering process.\n   In particular,\
    \ the Filtering process can also filter the right subset\n   of Logging information\
    \ that needs to be provided to a given\n   interconnected CDN.  For example, the\
    \ filtering process in the dCDN\n   can be used to ensure that only the Logging\
    \ information related to\n   tasks performed on behalf of a given uCDN are made\
    \ available to that\n   uCDN (thereby filtering out all the Logging information\
    \ related to\n   deliveries by the dCDN of content for its own CSPs).  Similarly,\
    \ the\n   Filtering process may filter or partially mask some fields, for\n  \
    \ example, to protect end-users' privacy when communicating CDNI\n   Logging information\
    \ to another CDN.  Filtering of Logging information\n   prior to communication\
    \ of this information to other CDNs via the CDNI\n   Logging interface requires\
    \ that the downstream CDN can recognize the\n   subset of Logging information\
    \ that relates to each interconnected\n   CDN.\n   The CDN will also filter some\
    \ internal scope information such as\n   information related to its internal alarms\
    \ (security, failures, load,\n   etc.).\n   In some use cases described in [RFC6770],\
    \ the interconnected CDNs do\n   not want to disclose details on their internal\
    \ topology.  The\n   filtering process can then also filter confidential data\
    \ on the\n   dCDNs' topology (number of servers, location, etc.).  In particular,\n\
    \   information about the requests served by each Surrogate may be\n   confidential.\
    \  Therefore, the Logging information needs to be\n   protected so that data such\
    \ as the Surrogates' hostnames are not\n   disclosed to the uCDN.  In the \"Inter-Affiliates\
    \ Interconnection\" use\n   case, this information may be disclosed to the uCDN\
    \ because both the\n   dCDN and the uCDN are operated by entities of the same\
    \ group.\n"
- title: 2.2.4.  Logging Rectification and Post-Generation Aggregation
  contents:
  - "2.2.4.  Logging Rectification and Post-Generation Aggregation\n   If Logging\
    \ information is generated periodically, it is important\n   that the sessions\
    \ that start in one Logging period and end in another\n   are correctly reported.\
    \  If they are reported in the starting period,\n   then the Logging information\
    \ of this period will be available only\n   after the end of the session, which\
    \ delays the Logging information\n   generation.  A simple approach is to provide\
    \ the complete Logging\n   Record for a session in the Logging Period of the session\
    \ end.\n   A Logging rectification/update mechanism could be useful to reach a\n\
    \   good trade-off between the Logging information generation delay and\n   the\
    \ Logging information accuracy.\n   In the presence of HAS, some log-consuming\
    \ applications can benefit\n   from aggregate per-session logs.  For example,\
    \ for analytics, per-\n   session logs allow display of session-related trends,\
    \ which are much\n   more meaningful for some types of analysis than chunk-related\
    \ trends.\n   In the case where aggregate logs have been generated directly by\
    \ the\n   log-generating entities, those can be used by the applications.  In\n\
    \   the case where aggregate logs have not been generated, the\n   Rectification\
    \ process can be extended with a Post-Generation\n   Aggregation process that\
    \ generates per-session logs from the per-\n   chunk logs, possibly leveraging\
    \ the information included in the per-\n   chunk logs for that purpose (Content\
    \ Collection IDentifier and a\n   Session IDentifier).  However, in accordance\
    \ with [RFC6983], this\n   document does not define the exchange of such aggregate\
    \ logs on the\n   CDNI Logging interface.  We note that this is for further study\
    \ and\n   is outside the scope of this document.\n"
- title: 2.2.5.  Log-Consuming Applications
  contents:
  - '2.2.5.  Log-Consuming Applications

    '
- title: 2.2.5.1.  Maintenance and Debugging
  contents:
  - "2.2.5.1.  Maintenance and Debugging\n   Logging information is useful to permit\
    \ the detection (and limit the\n   risk) of content delivery failures.  In particular,\
    \ Logging\n   information facilitates the detection of configuration issues.\n\
    \   To detect faults, Logging information needs to report the success and\n  \
    \ failure of CDN-delivery operations.  The uCDN can summarize such\n   information\
    \ into KPIs.  For instance, Logging information needs to\n   allow the computation\
    \ of the number of times, during a given time\n   period, that content delivery\
    \ related to a specific service succeeds\n   or fails.\n   Logging information\
    \ enables the CDN providers to identify and\n   troubleshoot performance degradations.\
    \  In particular, Logging\n   information enables tracking of traffic data (e.g.,\
    \ the amount of\n   traffic that has been forwarded by a dCDN on behalf of an\
    \ uCDN over a\n   given period of time), which is particularly useful for CDN\
    \ and\n   network planning operations.\n   Some of these maintenance and debugging\
    \ applications only require\n   aggregate Logging information highly compatible\
    \ with the use of\n   anonymization of IP addresses (as supported by the present\
    \ document\n   and specified in the definition of the c-groupid field in\n   Section\
    \ 3.4.1).  However, in some situations, it may be useful, where\n   compatible\
    \ with privacy protection, to access some CDNI Logging\n   Records containing\
    \ full non-anonymized IP addresses.  This is allowed\n   in the definition of\
    \ the c-groupid (in Section 3.4.1), with very\n   significant privacy protection\
    \ limitations that are discussed in the\n   definition of the c-groupid field.\
    \  For example, this may be useful\n   for detailed fault tracking of a particular\
    \ end-user content delivery\n   issue.  Where there is a hard requirement by uCDN\
    \ or CSP to associate\n   a given end user to individual CDNI Logging Records\
    \ (e.g., to allow a\n   posteriori analysis of individual delivery, for example,\
    \ in\n   situations of performance-based penalties), instead of using\n   aggregates\
    \ containing a single client as discussed in the c-groupid\n   field definition,\
    \ an alternate approach is to ensure that a client\n   identifier is embedded\
    \ in the request fields that can be logged in a\n   CDNI Logging Record (for example,\
    \ by including the client identifier\n   in the URI query string or in an HTTP\
    \ Header).  That latter approach\n   offers two significant benefits: first, the\
    \ aggregate inside the\n   c-groupid can contain more than one client, thereby\
    \ ensuring stronger\n   privacy protection; second, it allows a reliable identification\
    \ of\n   the client while IP address does not in many situations (e.g., behind\n\
    \   NAT, where dynamic IP addresses are used and reused, etc.).  However,\n  \
    \ care SHOULD be taken so that the client identifiers exposed in other\n   fields\
    \ of the CDNI Records cannot themselves be linked back to actual\n   users.\n"
- title: 2.2.5.2.  Accounting
  contents:
  - "2.2.5.2.  Accounting\n   Logging information is essential for accounting, to\
    \ permit inter-CDN\n   billing and CSP billing by uCDNs.  For instance, Logging\
    \ information\n   provided by dCDNs enables the uCDN to compute the total amount\
    \ of\n   traffic delivered by every dCDN for a particular Content Provider, as\n\
    \   well as the associated bandwidth usage (e.g., peak, 95th percentile),\n  \
    \ and the maximum number of simultaneous sessions over a given period\n   of time.\n"
- title: 2.2.5.3.  Analytics and Reporting
  contents:
  - "2.2.5.3.  Analytics and Reporting\n   The goals of analytics include gathering\
    \ any relevant information in\n   order to be able to develop statistics on content\
    \ download, analyze\n   user behavior, and monitor the performance and quality\
    \ of content\n   delivery.  For instance, Logging information enables the CDN\n\
    \   providers to report on content consumption (e.g., delivered sessions\n   per\
    \ content) in a specific geographic area.\n   The goal of reporting is to gather\
    \ any relevant information to\n   monitor the performance and quality of content\
    \ delivery, and allow\n   detection of delivery issues.  For instance, reporting\
    \ could track\n   the average delivery throughput experienced by end users in\
    \ a given\n   region for a specific CSP or content set over a period of time.\n"
- title: 2.2.5.4.  Content Protection
  contents:
  - "2.2.5.4.  Content Protection\n   The goal of content protection is to prevent\
    \ and monitor unauthorized\n   access, misuse, modification, and denial of access\
    \ to content.  A set\n   of information is logged in a CDN for security purposes.\
    \  In\n   particular, a record of access to content is usually collected to\n\
    \   permit the CSP to detect infringements of content delivery policies\n   and\
    \ other abnormal end-user behaviors.\n"
- title: 2.2.5.5.  Notions Common to Multiple Log-Consuming Applications
  contents:
  - '2.2.5.5.  Notions Common to Multiple Log-Consuming Applications

    '
- title: 2.2.5.5.1.  Logging Information Views
  contents:
  - "2.2.5.5.1.  Logging Information Views\n   Within a given log-consuming application,\
    \ different views may be\n   provided to different users depending on privacy,\
    \ business, and\n   scalability constraints.\n   For example, an analytics tool\
    \ run by the uCDN can provide one view\n   to a uCDN operator that exploits all\
    \ the Logging information\n   available to the uCDN, while the tool may provide\
    \ a different view to\n   each CSP exploiting only the Logging information related\
    \ to the\n   content of the given CSP.\n   As another example, maintenance and\
    \ debugging tools may provide\n   different views to different CDN operators,\
    \ based on their\n   operational role.\n"
- title: 2.2.5.5.2.  Key Performance Indicators (KPIs)
  contents:
  - "2.2.5.5.2.  Key Performance Indicators (KPIs)\n   This section presents, for\
    \ explanatory purposes, a non-exhaustive\n   list of Key Performance Indicators\
    \ (KPIs) that can be extracted/\n   produced from logs.\n   Multiple log-consuming\
    \ applications, such as analytics, monitoring,\n   and maintenance applications,\
    \ often compute and track such KPIs.\n   In a CDNI environment, depending on the\
    \ situation, these KPIs may be\n   computed by the uCDN or by the dCDN.  But it\
    \ is usually the uCDN that\n   computes KPIs, because the uCDN and dCDN may have\
    \ different\n   definitions of the KPIs and the computation of some KPIs requires\
    \ a\n   vision of all the deliveries performed by the uCDN and all its dCDNs.\n\
    \   Here is a list of important examples of KPIs:\n   o  Number of delivery requests\
    \ received from end users in a given\n      region for each piece of content,\
    \ during a given period of time\n      (e.g., hour/day/week/month)\n   o  Percentage\
    \ of delivery successes/failures among the aforementioned\n      requests\n  \
    \ o  Number of failures listed by failure type (e.g., HTTP error code)\n     \
    \ for requests received from end users in a given region and for\n      each piece\
    \ of content, during a given period of time (e.g.,\n      hour/day/week/month)\n\
    \   o  Number and cause of premature delivery termination for end users\n    \
    \  in a given region and for each piece of content, during a given\n      period\
    \ of time (e.g., hour/day/week/month)\n   o  Maximum and mean number of simultaneous\
    \ sessions established by\n      end users in a given region, for a given Content\
    \ Provider, and\n      during a given period of time (e.g., hour/day/week/month)\n\
    \   o  Volume of traffic delivered for sessions established by end users\n   \
    \   in a given region, for a given Content Provider, and during a\n      given\
    \ period of time (e.g., hour/day/week/month)\n   o  Maximum, mean, and minimum\
    \ delivery throughput for sessions\n      established by end users in a given\
    \ region, for a given Content\n      Provider, and during a given period of time\
    \ (e.g., hour/day/week/\n      month)\n   o  Cache-hit and byte-hit ratios for\
    \ requests received from end users\n      in a given region for each piece of\
    \ content, during a given period\n      of time (e.g., hour/day/week/month)\n\
    \   o  Top 10 most popularly requested contents (during a given day/week/\n  \
    \    month)\n   o  Terminal type (mobile, PC, Set-Top Box (STB), if this information\n\
    \      can be acquired from the browser type inferred from the User Agent\n  \
    \    string, for example)\n   Additional KPIs can be computed from other sources\
    \ of information\n   than the Logging information, for instance, data collected\
    \ by a\n   content portal or by specific client-side application programming\n\
    \   interfaces.  Such KPIs are out of scope for the present document.\n   The\
    \ KPIs used depend strongly on the considered log-consuming\n   application --\
    \ the CDN operator may be interested in different\n   metrics than the CSP.  In\
    \ particular, CDN operators are often\n   interested in delivery and acquisition\
    \ performance KPIs, information\n   related to Surrogates' performance, caching\
    \ information to evaluate\n   the cache-hit ratio, information about the delivered\
    \ file size to\n   compute the volume of content delivered during peak hour, etc.\n\
    \   Some of the KPIs, for instance those providing an instantaneous\n   vision\
    \ of the active sessions for a given CSP's content, are useful\n   essentially\
    \ if they are provided in a timely manner.  By contrast,\n   some other KPIs,\
    \ such as those averaged over a long period of time,\n   can be provided in non-real-time.\n"
- title: 3.  CDNI Logging File
  contents:
  - '3.  CDNI Logging File

    '
- title: 3.1.  Rules
  contents:
  - "3.1.  Rules\n   This specification uses the Augmented Backus-Naur Form (ABNF)\n\
    \   notation and core rules of [RFC5234].  In particular, the present\n   document\
    \ uses the following rules from [RFC5234]:\n      CR = %x0D ; carriage return\n\
    \      ALPHA = %x41-5A / %x61-7A ; A-Z / a-z\n      DIGIT = %x30-39 ; 0-9\n  \
    \    DQUOTE = %x22 ; \" (Double Quote)\n      CRLF = CR LF ; Internet standard\
    \ newline\n      HEXDIG = DIGIT / \"A\" / \"B\" / \"C\" / \"D\" / \"E\" / \"F\"\
    \n      HTAB = %x09 ; horizontal tab\n      LF = %x0A ; linefeed\n      VCHAR\
    \ = %x21-7E ; visible (printing) characters\n      OCTET = %x00-FF ; 8 bits of\
    \ data\n   The present document also uses the following rules from [RFC3986]:\n\
    \      host = as specified in Section 3.2.2 of [RFC3986].\n      IPv4address =\
    \ as specified in Section 3.2.2 of [RFC3986].\n      IPv6address = as specified\
    \ in Section 3.2.2 of [RFC3986].\n      partial-time = as specified in Section\
    \ 5.6 of [RFC3339].\n   The present document also defines the following additional\
    \ rules:\n      ADDRESS = IPv4address / IPv6address\n      ALPHANUM = ALPHA /\
    \ DIGIT\n      DATE = 4DIGIT \"-\" 2DIGIT \"-\" 2DIGIT\n         ; Dates are encoded\
    \ as \"full-date\" specified in [RFC3339].\n      DEC = 1*DIGIT [\".\" 1*DIGIT]\n\
    \      NAMEFORMAT = ALPHANUM *(ALPHANUM / \"_\" / \"-\")\n      QSTRING = DQUOTE\
    \ *(NDQUOTE / PCT-ENCODED) DQUOTE\n      NDQUOTE = %x20-21 / %x23-24 / %x26-7E\
    \ / UTF8-2 / UTF8-3 / UTF8-4\n         ; whereby a DQUOTE is conveyed inside a\
    \ QSTRING unambiguously\n         ; by escaping it with PCT-ENCODED.\n      PCT-ENCODED\
    \ = \"%\" HEXDIG HEXDIG\n         ; percent encoding is used for escaping octets\
    \ that might be\n         ; possible in HTTP headers such as bare CR, bare LF,\
    \ CR LF,\n         ; HTAB, SP, or null.  These octets are rendered with percent\n\
    \         ; encoding in ABNF as specified by [RFC3986] in order to avoid\n   \
    \      ; considering them as separators for the Logging Records.\n      NHTABSTRING\
    \ = 1*(SP / VCHAR)\n      TIME = partial-time\n      USER-COMMENT = *(SP / VCHAR\
    \ / UTF8-2 / UTF8-3 / UTF8-4)\n"
- title: 3.2.  CDNI Logging File Structure
  contents:
  - "3.2.  CDNI Logging File Structure\n   As defined in Section 1.1, a CDNI Logging\
    \ Field is an atomic Logging\n   information element, a CDNI Logging Record is\
    \ a collection of CDNI\n   Logging fields containing all logging information corresponding\
    \ to a\n   single logging event, and a CDNI Logging File contains a collection\n\
    \   of CDNI Logging Records.  This structure is illustrated in Figure 3.\n   The\
    \ use of a file structure for transfer of CDNI Logging information\n   is selected\
    \ since this is the most common practice today for exchange\n   of Logging information\
    \ within and across CDNs.\n   +----------------------------------------------------------+\n\
    \   |CDNI Logging File                                         |\n   |       \
    \                                                   |\n   | #Directive 1     \
    \                                        |\n   | #Directive 2                \
    \                             |\n   | ...                                    \
    \                  |\n   | #Directive P                                      \
    \       |\n   |                                                          |\n \
    \  | +------------------------------------------------------+ |\n   | |CDNI Logging\
    \ Record 1                                 | |\n   | |  +-------------+ +-------------+\
    \     +-------------+ | |\n   | |  |CDNI Logging | |CDNI Logging | ... |CDNI Logging\
    \ | | |\n   | |  |   Field 1   | |   Field 2   |     |   Field N   | | |\n   |\
    \ |  +-------------+ +-------------+     +-------------+ | |\n   | +------------------------------------------------------+\
    \ |\n   |                                                          |\n   | +------------------------------------------------------+\
    \ |\n   | |CDNI Logging Record 2                                 | |\n   | | \
    \ +-------------+ +-------------+     +-------------+ | |\n   | |  |CDNI Logging\
    \ | |CDNI Logging | ... |CDNI Logging | | |\n   | |  |   Field 1   | |   Field\
    \ 2   |     |   Field N   | | |\n   | |  +-------------+ +-------------+     +-------------+\
    \ | |\n   | +------------------------------------------------------+ |\n   | \
    \                                                         |\n   |  ...       \
    \                                              |\n   |                       \
    \                                   |\n   | #Directive P+1                   \
    \                        |\n   |                                             \
    \             |\n   |  ...                                                   \
    \  |\n   |                                                          |\n   | +------------------------------------------------------+\
    \ |\n   | |CDNI Logging Record M                                 | |\n   | | \
    \ +-------------+ +-------------+     +-------------+ | |\n   | |  |CDNI Logging\
    \ | |CDNI Logging | ... |CDNI Logging | | |\n   | |  |   Field 1   | |   Field\
    \ 2   |     |   Field N   | | |\n   | |  +-------------+ +-------------+     +-------------+\
    \ | |\n   | +------------------------------------------------------+ |\n   | \
    \                                                         |\n   |            \
    \                                              |\n   | #Directive P+Q        \
    \                                   |\n   +----------------------------------------------------------+\n\
    \                   Figure 3: Structure of Logging Files\n   The CDNI Logging\
    \ File format is inspired from the W3C Extended Log\n   File Format [ELF].  However,\
    \ it is fully specified by the present\n   document.  Where the present document\
    \ differs from the W3C Extended\n   Log File Format, an implementation of the\
    \ CDNI Logging interface MUST\n   comply with the present document.  The W3C Extended\
    \ Log File Format\n   was used as a starting point, reused where possible, and\
    \ expanded\n   when necessary.\n   Using a format that resembles the W3C Extended\
    \ Log File Format is\n   intended to keep the CDNI logging format close to the\
    \ intra-CDN\n   Logging information format commonly used in CDNs today, thereby\n\
    \   minimizing systematic translation at the CDN/CDNI boundary.\n   A CDNI Logging\
    \ File MUST contain a sequence of lines containing US-\n   ASCII characters [CHAR_SET]\
    \ terminated by CRLF.  Each line of a CDNI\n   Logging File MUST contain either\
    \ a directive or a CDNI Logging\n   Record.\n   Directives record information\
    \ about the CDNI Logging process itself.\n   Lines containing directives MUST\
    \ begin with the \"#\" character.\n   Directives are specified in Section 3.3.\n\
    \   Logging Records provide actual details of the logged event.  Logging\n   Records\
    \ are specified in Section 3.4.\n   The CDNI Logging File has a specific structure.\
    \  It always starts\n   with a directive line, and the first directive it contains\
    \ MUST be\n   the version.\n   The directive lines form together a group that\
    \ contains at least one\n   directive line.  Each directives group is followed\
    \ by a group of\n   Logging Records.  The records group contains zero or more\
    \ actual\n   Logging Record lines about the event being logged.  A record line\n\
    \   consists of the values corresponding to all or a subset of the\n   possible\
    \ Logging fields defined within the scope of the record-type\n   directive.  These\
    \ values MUST appear in the order defined by the\n   fields directive.\n   Note\
    \ that future extensions MUST be compliant with the previous\n   description.\
    \  The following examples depict the structure of a\n   CDNILOGFILE as defined\
    \ currently by the record-type\n   \"cdni_http_request_v1.\"\n      DIRLINE =\
    \ \"#\" directive CRLF\n      DIRGROUP = 1*DIRLINE\n      RECLINE = <any subset\
    \ of record values that match what is expected\n      according to the fields\
    \ directive within the immediately preceding\n      DIRGROUP>\n      RECGROUP\
    \ = *RECLINE\n      CDNILOGFILE = 1*(DIRGROUP RECGROUP)\n"
- title: 3.3.  CDNI Logging Directives
  contents:
  - "3.3.  CDNI Logging Directives\n   A CDNI Logging directive line contains the\
    \ directive name followed by\n   \":\" HTAB and the directive value.\n   Directive\
    \ names MUST be of the format NAMEFORMAT.  All directive\n   names MUST be registered\
    \ in the \"CDNI Logging Directives Names\"\n   registry.  Directive names are\
    \ case-insensitive as per the basic ABNF\n   ([RFC5234]).  Unknown directives\
    \ MUST be ignored.  Directive values\n   can have various formats.  All possible\
    \ directive values for the\n   record-type \"cdni_http_request_v1\" are further\
    \ detailed in this\n   section.\n   The following example shows the structure\
    \ of a directive and\n   enumerates strictly the directive values presently defined\
    \ in the\n   version \"cdni/1.0\" of the CDNI Logging File.\n      directive =\
    \ DIRNAME \":\" HTAB DIRVAL\n      DIRNAME = NAMEFORMAT\n      FIENAME = <any\
    \ CDNI Logging field name registered in the CDNI\n      Logging Field Names registry\
    \ (Section 6.4) that is valid for the\n      record type specified in the record-type\
    \ directive.>\n      DIRVAL = NHTABSTRING / QSTRING / host / USER-COMMENT / FIENAME\n\
    \      *(HTAB FIENAME) / 64HEXDIG\n   An implementation of the CDNI Logging interface\
    \ MUST support all of\n   the following directives, listed below by their directive\
    \ name:\n   o  Version:\n      *  Format: NHTABSTRING\n      *  Directive value:\
    \ Indicates the version of the CDNI Logging File\n         format.  The entity\
    \ transmitting a CDNI Logging File as per the\n         present document MUST\
    \ set the value to \"cdni/1.0\".  In the\n         future, other versions of the\
    \ CDNI Logging File might be\n         specified; those would use a value different\
    \ from \"cdni/1.0\",\n         which allows the entity receiving the CDNI Logging\
    \ File to\n         identify the corresponding version.  CDNI Logging File versions\n\
    \         are case-insensitive as per the basic ABNF ([RFC5234]).\n      *  Occurrence:\
    \ There MUST be one and only one instance of this\n         directive per the\
    \ CDNI Logging File.  It MUST be the first line\n         of the CDNI Logging\
    \ File.\n      *  Example: \"version: HTAB cdni/1.0\".\n   o  UUID:\n      * \
    \ Format: NHTABSTRING\n      *  Directive value: This a Uniform Resource Name\
    \ (URN) from the\n         Universally Unique IDentifier (UUID) URN namespace\
    \ specified in\n         [RFC4122].  The UUID contained in the URN uniquely identifies\n\
    \         the CDNI Logging File.\n      *  Occurrence: There MUST be one and only\
    \ one instance of this\n         directive per the CDNI Logging File.\n      *\
    \  Example: \"UUID: HTAB NHTABSTRING\".\n   o  Claimed-origin:\n      *  Format:\
    \ Host\n      *  Directive value: This contains the claimed identification of\n\
    \         the entity transmitting the CDNI Logging File (e.g., the host\n    \
    \     in a dCDN supporting the CDNI Logging interface) or the entity\n       \
    \  responsible for transmitting the CDNI Logging File (e.g., the\n         dCDN).\n\
    \      *  Occurrence: There MUST be zero or exactly one instance of this\n   \
    \      directive per the CDNI Logging File.  This directive MAY be\n         included\
    \ by the dCDN.  It MUST NOT be included or modified by\n         the uCDN.\n \
    \     *  Example: \"claimed-origin: HTAB host\".\n   o  Established-origin:\n\
    \      *  Format: Host\n      *  Directive value: This contains the identification,\
    \ as\n         established by the entity receiving the CDNI Logging File, of\n\
    \         the entity transmitting the CDNI Logging File (e.g., the host\n    \
    \     in a dCDN supporting the CDNI Logging interface) or the entity\n       \
    \  responsible for transmitting the CDNI Logging File (e.g., the\n         dCDN).\n\
    \      *  Occurrence: There MUST be zero or exactly one instance of this\n   \
    \      directive per the CDNI Logging File.  This directive MAY be\n         added\
    \ by the uCDN (e.g., before storing the CDNI Logging File).\n         It MUST\
    \ NOT be included by the dCDN.  The mechanisms used by\n         the uCDN to establish\
    \ and validate the entity responsible for\n         the CDNI Logging File is outside\
    \ the scope of the present\n         document.  We observe that, in particular,\
    \ this may be achieved\n         through authentication mechanisms that are part\
    \ of the\n         transport layer of the CDNI Logging File pull mechanism\n \
    \        (Section 4.2).\n      *  ABNF example: \"established-origin: HTAB host\"\
    .\n   o  Remark:\n      *  Format: USER-COMMENT\n      *  Directive value: This\
    \ contains comment information.  Data\n         contained in this field is to\
    \ be ignored by analysis tools.\n      *  Occurrence: There MAY be zero, one,\
    \ or any number of instances\n         of this directive per the CDNI Logging\
    \ File.\n      *  Example: \"remark: HTAB USER-COMMENT\".\n   o  Record-type:\n\
    \      *  Format: NAMEFORMAT\n      *  Directive value: Indicates the type of\
    \ the CDNI Logging Records\n         that follow this directive, until another\
    \ record-type directive\n         appears in the CDNI Logging File (or the end\
    \ of the CDNI\n         Logging File).  This can be any CDNI Logging Record type\n\
    \         registered in the \"CDNI Logging record-types\" registry\n         (Section\
    \ 6.3).  For example, this may be \"cdni_http_request_v1\"\n         as specified\
    \ in Section 3.4.1.  CDNI Logging record-types are\n         case-insensitive\
    \ as per the basic ABNF ([RFC5234]).\n      *  Occurrence: There MUST be at least\
    \ one instance of this\n         directive per the CDNI Logging File.  The first\
    \ instance of\n         this directive MUST precede a fields directive and MUST\
    \ precede\n         all CDNI Logging Records.\n      *  Example: \"record-type:\
    \ HTAB cdni_http_request_v1\".\n   o  Fields:\n      *  Format: FIENAME *(HTAB\
    \ FIENAME) ; where FIENAME can take any\n         CDNI Logging field name registered\
    \ in the \"CDNI Logging Field\n         Names\" registry (Section 6.4) that is\
    \ valid for the record type\n         specified in the record-type directive.\n\
    \      *  Directive value: This lists the names of all the fields for\n      \
    \   which a value is to appear in the CDNI Logging Records that\n         follow\
    \ the instance of this directive (until another instance\n         of this directive\
    \ appears in the CDNI Logging File).  The names\n         of the fields, as well\
    \ as their occurrences, MUST comply with\n         the corresponding rules specified\
    \ in the document referenced in\n         the \"CDNI Logging record-types\" registry\
    \ (Section 6.3) for the\n         corresponding CDNI Logging record-type.\n  \
    \    *  Occurrence: There MUST be at least one instance of this\n         directive\
    \ per record-type directive.  The first instance of\n         this directive for\
    \ a given record-type MUST appear before any\n         CDNI Logging Record for\
    \ this record-type.  One situation where\n         more than one instance of the\
    \ fields directive can appear\n         within a given CDNI Logging File is when\
    \ there is a change, in\n         the middle of a fairly large logging period,\
    \ and in the\n         agreement between the uCDN and the dCDN about the set of\
    \ fields\n         that are to be exchanged.  The multiple occurrences allow\n\
    \         records with the old set of fields and records with the new set\n  \
    \       of fields to be carried inside the same Logging File.\n      *  Example:\
    \ \"fields: HTAB FIENAME * (HTAB FIENAME)\".\n   o  SHA256-hash:\n      *  Format:\
    \ 64HEXDIG\n      *  Directive value: This directive permits the detection of\
    \ a\n         corrupted CDNI Logging File.  This can be useful, for instance,\n\
    \         if a problem occurs on the file system of the dCDN Logging\n       \
    \  system and leads to a truncation of a Logging File.  The valid\n         SHA256-hash\
    \ value is included in this directive by the entity\n         that transmits the\
    \ CDNI Logging File.  It MUST be computed by\n         applying the SHA-256 ([RFC6234])\
    \ cryptographic hash function on\n         the CDNI Logging File, including all\
    \ the directives and Logging\n         Records, up to the SHA256-hash directive\
    \ itself, excluding the\n         SHA256-hash directive itself.  The SHA256-hash\
    \ value MUST be\n         represented as a 64-digit hexadecimal number encoded\
    \ in US-\n         ASCII (representing a 256 bit hash value).  The entity\n  \
    \       receiving the CDNI Logging File also computes, in a similar\n        \
    \ way, the SHA-256 hash on the received CDNI Logging File and\n         compares\
    \ this hash to the value of the SHA256-hash directive.\n         If the two values\
    \ are equal, then the received CDNI Logging\n         File is to be considered\
    \ non-corrupted.  If the two values are\n         different, the received CDNI\
    \ Logging File is to be considered\n         corrupted.  The behavior of the entity\
    \ that received a\n         corrupted CDNI Logging File is outside the scope of\
    \ this\n         specification; we note that the entity MAY attempt to pull the\n\
    \         same CDNI Logging File from the transmitting entity again.  If\n   \
    \      the entity receiving a non-corrupted CDNI Logging File adds an\n      \
    \   established-origin directive, it MUST then recompute and update\n        \
    \ the SHA256-hash directive so that it also protects the added\n         established-origin\
    \ directive.\n      *  Occurrence: There MUST be zero or exactly one instance\
    \ of this\n         directive.  There SHOULD be exactly one instance of this\n\
    \         directive.  One situation where that directive could be omitted\n  \
    \       is where integrity protection is already provided via another\n      \
    \   mechanism (for example, if an integrity hash is associated to\n         the\
    \ CDNI Logging File out of band through the CDNI Logging Feed\n         (Section\
    \ 4.1) leveraging ATOM extensions such as those proposed\n         in [ATOMPUB].\
    \  When present, the SHA256-hash field MUST be the\n         last line of the\
    \ CDNI Logging File.\n      *  Example: \"SHA256-hash: HTAB 64HEXDIG\".\n   A\
    \ uCDN-side implementation of the CDNI Logging interface MUST ignore\n   a CDNI\
    \ Logging File that does not comply with the occurrences\n   specified above for\
    \ each and every directive.  For example, a uCDN-\n   side implementation of the\
    \ CDNI Logging interface receiving a CDNI\n   Logging File with zero occurrence\
    \ of the version directive, or with\n   two occurrences of the SHA256-hash, MUST\
    \ ignore this CDNI Logging\n   File.\n   An entity receiving a CDNI Logging File\
    \ with a value set to\n   \"cdni/1.0\" MUST process the CDNI Logging File as per\
    \ the present\n   document.  An entity receiving a CDNI Logging File with a value\
    \ set\n   to a different value MUST process the CDNI Logging File as per the\n\
    \   specification referenced in the \"CDNI Logging File version\" registry\n \
    \  (see Section 6.1) if the implementation supports this specification\n   and\
    \ MUST ignore the CDNI Logging File otherwise.\n"
- title: 3.4.  CDNI Logging Records
  contents:
  - "3.4.  CDNI Logging Records\n   A CDNI Logging Record consists of a sequence of\
    \ CDNI Logging fields\n   relating to that single CDNI Logging Record.\n   CDNI\
    \ Logging fields MUST be separated by the horizontal tabulation\n   (HTAB) character.\n\
    \   To facilitate readability, a prefix scheme is used for CDNI Logging\n   field\
    \ names in a similar way to the one used in W3C Extended Log File\n   Format [ELF].\
    \  The semantics of the prefix in the present document\n   are:\n   o  \"c-\"\
    \ refers to the User Agent that issues the request (corresponds\n      to the\
    \ \"client\" of W3C Extended Log Format)\n   o  \"d-\" refers to the dCDN (relative\
    \ to a given CDN acting as an\n      uCDN)\n   o  \"s-\" refers to the dCDN Surrogate\
    \ that serves the request\n      (corresponds to the \"server\" of the W3C Extended\
    \ Log Format)\n   o  \"u-\" refers to the uCDN (relative to a given CDN acting\
    \ as a dCDN)\n   o  \"cs-\" refers to communication from the User Agent towards\
    \ the dCDN\n      Surrogate\n   o  \"sc-\" refers to communication from the dCDN\
    \ Surrogate towards the\n      User Agent\n   An implementation of the CDNI Logging\
    \ interface as per the present\n   specification MUST support the CDNI HTTP Request\
    \ Logging Record as\n   specified in Section 3.4.1.\n   A CDNI Logging Record\
    \ contains the corresponding values for the\n   fields that are enumerated in\
    \ the last fields directive before the\n   current log line.  Note that the order\
    \ in which the field values\n   appear is dictated by the order of the fields\
    \ names in the fields\n   directive.  There SHOULD be no dependency between the\
    \ various fields\n   values.\n"
- title: 3.4.1.  HTTP Request Logging Record
  contents:
  - "3.4.1.  HTTP Request Logging Record\n   This section defines the CDNI Logging\
    \ Record of record-type\n   \"cdni_http_request_v1\".  It is applicable to content\
    \ delivery\n   performed by the dCDN using HTTP/1.0 ([RFC1945]), HTTP/1.1 ([RFC7230]\n\
    \   [RFC7231] [RFC7232] [RFC7233] [RFC7234] [RFC7235]), or HTTPS\n   ([RFC2818]\
    \ [RFC7230]).  We observe that, in the case of HTTPS\n   delivery, there may be\
    \ value in logging additional information\n   specific to the operation of HTTP\
    \ over Transport Layer Security (TLS)\n   and we note that this is outside the\
    \ scope of the present document\n   and may be addressed in a future document\
    \ defining another CDNI\n   Logging Record or another version of the HTTP Request\
    \ Logging Record.\n   The \"cdni_http_request_v1\" record-type is also expected\
    \ to be\n   applicable to HTTP/2 [RFC7540] since a fundamental design tenet of\n\
    \   HTTP/2 is to preserve the HTTP/1.1 semantics.  We observe that, in\n   the\
    \ case of HTTP/2 delivery, there may be value in logging additional\n   information\
    \ specific to the additional functionality of HTTP/2 (e.g.,\n   information related\
    \ to connection identification, to stream\n   identification, to stream priority,\
    \ and to flow control).  We note\n   that such additional information is outside\
    \ the scope of the present\n   document and may be addressed in a future document\
    \ defining another\n   CDNI Logging Record or another version of the HTTP Request\
    \ Logging\n   Record.\n   The \"cdni_http_request_v1\" record-type contains the\
    \ following CDNI\n   Logging fields, listed by their field name:\n   o  Date:\n\
    \      *  Format: DATE\n      *  Field value: The date on which the processing\
    \ of the request\n         completed on the Surrogate.\n      *  Occurrence: There\
    \ MUST be one and only one instance of this\n         field.\n   o  Time:\n  \
    \    *  Format: TIME\n      *  Field value: The time, which MUST be expressed\
    \ in Coordinated\n         Universal Time (UTC), at which the processing of the\
    \ request\n         completed on the Surrogate.\n      *  Occurrence: There MUST\
    \ be one and only one instance of this\n         field.\n   o  Time-taken:\n \
    \     *  Format: DEC\n      *  Field value: Decimal value of the duration, in\
    \ seconds, between\n         the start of the processing of the request and the\
    \ completion\n         of the request processing (e.g., completion of delivery)\
    \ by the\n         Surrogate.\n      *  Occurrence: There MUST be one and only\
    \ one instance of this\n         field.\n   o  c-groupid:\n      *  Format: NHTABSTRING\n\
    \      *  Field value: An opaque identifier for an aggregate set of\n        \
    \ clients, derived from the client IPv4 or IPv6 address in the\n         request\
    \ received by the Surrogate and/or other network-level\n         identifying information.\
    \  The c-groupid serves to group clients\n         into aggregates.  Example aggregates\
    \ include civil geolocation\n         information (the country, second-level administrative\
    \ division,\n         or postal code from which the client is presumed to make\
    \ the\n         request based on a geolocation database lookup) or network\n \
    \        topological information (e.g., the BGP autonomous system (AS)\n     \
    \    number announcing the prefix containing the address).  The\n         c-groupid\
    \ MAY be structured, e.g., US/TN/MEM/38138.  Agreement\n         between the dCDN\
    \ and the uCDN on a mapping between IPv4 and\n         IPv6 addresses and aggregates\
    \ is presumed to occur out of band.\n         The aggregation mapping SHOULD be\
    \ chosen such that each\n         aggregate contains more than one client.\n \
    \        +  When the aggregate is chosen so that it contains a single\n      \
    \      client (e.g., to allow more detailed analytics, or to allow\n         \
    \   a posteriori analysis of individual delivery, for example,\n            in\
    \ situations of performance-based penalties), the c-groupid\n            MAY be\
    \ structured where some elements identify aggregates\n            and one element\
    \ identifies the client, e.g.,\n            US/TN/MEM/38138/43a5bdd6-95c4-4d62-be65-7410df0021e2.\
    \  In\n            the case where the aggregate is chosen so that it contains\
    \ a\n            single client:\n            -  The element identifying the client\
    \ SHOULD be\n               algorithmically generated (from the client IPv4 or\
    \ IPv6\n               address in the request received by the Surrogate and/or\n\
    \               other network-level identifying information) in a way\n      \
    \         that SHOULD NOT be linkable back to the global addressing\n        \
    \       context and that SHOULD vary over time (to offer\n               protection\
    \ against long-term attacks).\n            -  It is RECOMMENDED that the mapping\
    \ varies at least once\n               every 24 hours.\n            -  The algorithmic\
    \ mapping and variation over time can, in\n               some cases, allow the\
    \ uCDN (with the knowledge of the\n               algorithm, the time variation,\
    \ and the associated\n               attributes and keys) to reconstruct the actual\
    \ client\n               IPv4 or IPv6 address and/or other network-level\n   \
    \            identifying information when required (e.g., to allow a\n       \
    \        posteriori analysis of individual delivery, for example,\n          \
    \     in situations of performance-based penalties).  However,\n             \
    \  these end-user addresses SHOULD only be reconstructed on-\n               demand\
    \ and the CDNI Logging File SHOULD only be stored\n               with the anonymized\
    \ c-groupid value.\n            -  Allowing reconstruction of client address information\n\
    \               carries with it grave risks to end-user privacy.  Since\n    \
    \           the c-groupid is, in this case, equivalent in\n               identification\
    \ power to a client IP address, its use may\n               be restricted by regulation\
    \ or law as personally\n               identifiable information.  For this reason,\
    \ such use is\n               NOT RECOMMENDED.\n            -  One method for\
    \ mapping that MAY be supported by\n               implementations relies on a\
    \ symmetric key that is known\n               only to the uCDN, the dCDN, and\
    \ the HMAC-based Extract-\n               and-Expand Key Derivation Function (HKDF)\
    \ key derivation\n               ([RFC5869]), as will be used in TLS 1.3 ([TLS-1.3]).\n\
    \               When that method is used:\n               o  The uCDN and dCDN\
    \ need to agree on the \"salt\" and\n                  \"input keying material\"\
    , as described in Section 2.2\n                  of [RFC5869] and the initial\
    \ \"info\" parameter (which\n                  could be something like the business\
    \ names of the two\n                  organizations in UTF-8, concatenated), as\
    \ described in\n                  Section 2.3 of [RFC5869].  The hash SHOULD be\
    \ either\n                  SHA-2 or SHA-3 [SHA-3], and the encryption algorithm\n\
    \                  SHOULD be 128-bit AES [AES] in Galois Counter Mode\n      \
    \            (GCM) [GCM] (AES-GCM) or better.  The pseudorandom key\n        \
    \          (PRK) SHOULD be chosen by both parties contributing\n             \
    \     alternate random bytes until sufficient length exists.\n               \
    \   After the initial setup, client-information can be\n                  encrypted\
    \ using the key generated by the \"expand\" step\n                  of Section\
    \ 2.3 of [RFC5869].  The encrypted value\n                  SHOULD be hex encoded\
    \ or base64 encoded (as specified\n                  in Section 4 of [RFC4648]).\
    \  At the agreed-upon\n                  expiration time, a new key SHOULD be\
    \ generated and\n                  used.  New keys SHOULD be indicated by prefixing\
    \ the\n                  key with a special character such as an exclamation\n\
    \                  point.  In this way, shorter lifetimes can be used as\n   \
    \               needed.\n      *  Occurrence: There MUST be one and only one instance\
    \ of this\n         field.\n   o  s-ip:\n      *  Format: ADDRESS\n      *  Field\
    \ value: The IPv4 or IPv6 address of the Surrogate that\n         served the request\
    \ (i.e., the \"server\" address).\n      *  Occurrence: There MUST be zero or\
    \ exactly one instance of this\n         field.\n   o  s-hostname:\n      *  Format:\
    \ Host\n      *  Field value: The hostname of the Surrogate that served the\n\
    \         request (i.e., the \"server\" hostname).\n      *  Occurrence: There\
    \ MUST be zero or exactly one instance of this\n         field.\n   o  s-port:\n\
    \      *  Format: 1*DIGIT\n      *  Field value: The destination TCP port (i.e.,\
    \ the \"server\" port)\n         in the request received by the Surrogate.\n \
    \     *  Occurrence: There MUST be zero or exactly one instance of this\n    \
    \     field.\n   o  cs-method:\n      *  Format: NHTABSTRING\n      *  Field value:\
    \ This is the method of the request received by the\n         Surrogate.  In the\
    \ case of HTTP delivery, this is the HTTP\n         method in the request.\n \
    \     *  Occurrence: There MUST be one and only one instance of this\n       \
    \  field.\n   o  cs-uri:\n      *  Format: NHTABSTRING\n      *  Field value:\
    \ This is the \"effective request URI\" of the request\n         received by the\
    \ Surrogate as specified in [RFC7230].  It\n         complies with the \"http\"\
    \ URI scheme or the \"https\" URI scheme\n         as specified in [RFC7230].\
    \  Note that cs-uri can be privacy\n         sensitive.  In that case, and where\
    \ appropriate, u-uri could be\n         used instead of cs-uri.\n      *  Occurrence:\
    \ There MUST be zero or exactly one instance of this\n         field.\n   o  u-uri:\n\
    \      *  Format: NHTABSTRING\n      *  Field value: This is a complete URI, derived\
    \ from the\n         \"effective request URI\" ([RFC7230]) of the request received\
    \ by\n         the Surrogate (i.e., the cs-uri) but transformed by the entity\n\
    \         generating or transmitting the CDNI Logging Record, in a way\n     \
    \    that is agreed upon between the two ends of the CDNI Logging\n         interface,\
    \ so the transformed URI is meaningful to the uCDN.\n         For example, the\
    \ two ends of the CDNI Logging interface could\n         agree that the u-uri\
    \ is constructed from the cs-uri by removing\n         the part of the hostname\
    \ that exposes which individual\n         Surrogate actually performed the delivery.\
    \  The details of\n         modification performed to generate the u-uri, as well\
    \ as the\n         mechanism to agree on these modifications between the two sides\n\
    \         of the CDNI Logging interface are outside the scope of the\n       \
    \  present document.\n      *  Occurrence: There MUST be one and only one instance\
    \ of this\n         field.\n   o  Protocol:\n      *  Format: NHTABSTRING\n  \
    \    *  Field value: This is the value of the HTTP-Version field as\n        \
    \ specified in [RFC7230] of the Request-Line of the request\n         received\
    \ by the Surrogate (e.g., \"HTTP/1.1\").\n      *  Occurrence: There MUST be one\
    \ and only one instance of this\n         field.\n   o  sc-status:\n      *  Format:\
    \ 3DIGIT\n      *  Field value: This is the Status-Code in the response from the\n\
    \         Surrogate.  In the case of HTTP delivery, this is the HTTP\n       \
    \  Status-Code in the HTTP response.\n      *  Occurrence: There MUST be one and\
    \ only one instance of this\n         field.\n   o  sc-total-bytes:\n      * \
    \ Format: 1*DIGIT\n      *  Field value: This is the total number of bytes of\
    \ the response\n         sent by the Surrogate in response to the request.  In\
    \ the case\n         of HTTP delivery, this includes the bytes of the Status-Line,\n\
    \         the bytes of the HTTP headers, and the bytes of the message-\n     \
    \    body.\n      *  Occurrence: There MUST be one, and only one, instance of\
    \ this\n         field.\n   o  sc-entity-bytes:\n      *  Format: 1*DIGIT\n  \
    \    *  Field value: This is the number of bytes of the message-body in\n    \
    \     the HTTP response sent by the Surrogate in response to the\n         request.\
    \  This does not include the bytes of the Status-Line or\n         the bytes of\
    \ the HTTP headers.\n      *  Occurrence: There MUST be zero or exactly one instance\
    \ of this\n         field.\n   o  cs(insert_HTTP_header_name_here):\n      * \
    \ Format: QSTRING\n      *  Field value: The value of the HTTP header (identified\
    \ by the\n         insert_HTTP_header_name_here in the CDNI Logging field name)\
    \ as\n         it appears in the request processed by the Surrogate, but\n   \
    \      prepended by a DQUOTE and appended by a DQUOTE.  For example,\n       \
    \  when the CDNI Logging field name (FIENAME) listed in the\n         preceding\
    \ fields directive is cs(User-Agent), this CDNI Logging\n         field value\
    \ contains the value of the User-Agent HTTP header as\n         received by the\
    \ Surrogate in the request it processed, but\n         prepended by a DQUOTE and\
    \ appended by a DQUOTE.  If the HTTP\n         header, as it appeared in the request\
    \ processed by the\n         Surrogate, contains one or more DQUOTE, each DQUOTE\
    \ MUST be\n         escaped with percent encoding.  For example, if the HTTP header\n\
    \         contains My_Header\"value\", then the field value of the\n         cs(insert_HTTP_header_name_here)\
    \ is \"My_Header%x22value%x22\".\n         The entity transmitting the CDNI Logging\
    \ File MUST ensure that\n         the respective insert_HTTP_header_name_here\
    \ of the\n         cs(insert_HTTP_header_name_here) listed in the fields directive\n\
    \         comply with HTTP specifications.  In particular, this field\n      \
    \   name does not include any HTAB, since this would prevent proper\n        \
    \ parsing of the fields directive by the entity receiving the\n         CDNI Logging\
    \ File.\n      *  Occurrence: There MAY be zero, one, or any number of instance\n\
    \         of this field.\n   o  sc(insert_HTTP_header_name_here):\n      *  Format:\
    \ QSTRING\n      *  Field value: The value of the HTTP header (identified by the\n\
    \         insert_HTTP_header_name_here in the CDNI Logging field name) as\n  \
    \       it appears in the response issued by the Surrogate to serve the\n    \
    \     request, but prepended by a DQUOTE and appended by a DQUOTE.\n         If\
    \ the HTTP header, as it appeared in the request processed by\n         the Surrogate,\
    \ contains one or more DQUOTEs, each DQUOTE MUST\n         be escaped with percent\
    \ encoding.  For example, if the HTTP\n         header contains My_Header\"value\"\
    , then the field value of the\n         sc(insert_HTTP_header_name_here) is \"\
    My_Header%x22value%x22\".\n         The entity transmitting the CDNI Logging File\
    \ MUST ensure that\n         the respective insert_HTTP_header_name_here of the\n\
    \         cs(insert_HTTP_header_name_here) listed in the fields directive\n  \
    \       comply with HTTP specifications.  In particular, this field\n        \
    \ name does not include any HTAB, since this would prevent proper\n         parsing\
    \ of the fields directive by the entity receiving the\n         CDNI Logging File.\n\
    \      *  Occurrence: There MAY be zero, one, or any number of instances\n   \
    \      of this field.  For a given insert_HTTP_header_name_here, there\n     \
    \    MUST be zero or exactly one instance of this field.\n   o  s-ccid:\n    \
    \  *  Format: QSTRING\n      *  Field value: This contains the value of the Content\
    \ Collection\n         IDentifier (CCID) associated by the uCDN to the content\
    \ served\n         by the Surrogate via the CDNI Metadata interface ([CDNI-META]),\n\
    \         prepended by a DQUOTE and appended by a DQUOTE.  If the CCID\n     \
    \    conveyed in the CDNI Metadata interface contains one or more\n         DQUOTEs,\
    \ each DQUOTE MUST be escaped with percent encoding.\n         For example, if\
    \ the CCID conveyed in the CDNI Metadata\n         interface is My_CCIDD\"value\"\
    , then the field value of the\n         s-ccid is \"My_CCID%x22value%X22\".\n\
    \      *  Occurrence: There MUST be zero or exactly one instance of this\n   \
    \      field.  For a given insert_HTTP_header_name_here, there MUST be\n     \
    \    zero or exactly one instance of this field.\n   o  s-sid:\n      *  Format:\
    \ QSTRING\n      *  Field value: This contains the value of a Session IDentifier\n\
    \         (SID) generated by the dCDN for a specific HTTP session,\n         prepended\
    \ by a DQUOTE and appended by a DQUOTE.  In particular,\n         for an HTTP\
    \ Adaptive Streaming (HAS) session, the SID value is\n         included in the\
    \ Logging Record for every content chunk delivery\n         of that session in\
    \ view of facilitating the later correlation\n         of all the per-content\
    \ chunk log records of a given HAS\n         session.  See Section 3.4.2.2. of\
    \ [RFC6983] for more discussion\n         on the concept of Session IDentifier\
    \ in the context of HAS.  If\n         the SID conveyed contains one or more DQUOTEs,\
    \ each DQUOTE MUST\n         be escaped with percent-encoding.  For example, if\
    \ the SID is\n         My_SID\"value\", then the field value of the s-sid is\n\
    \         \"My_SID%x22value%x22\".\n      *  Occurrence: There MUST be zero or\
    \ exactly one instance of this\n         field.\n   o  s-cached:\n      *  Format:\
    \ 1DIGIT\n      *  Field value: This characterizes whether or not the Surrogate\n\
    \         served the request using content already stored on its local\n     \
    \    cache.  The allowed values are \"0\" (for miss) and \"1\" (for\n        \
    \ hit). \"1\" MUST be used when the Surrogate did serve the request\n        \
    \ exclusively using content already stored on its local cache.\n         \"0\"\
    \ MUST be used otherwise (including cases where the Surrogate\n         served\
    \ the request using some, but not all, content already\n         stored on its\
    \ local cache).  Note that a \"0\" only means a cache\n         miss in the Surrogate\
    \ and does not provide any information on\n         whether or not the content\
    \ was already stored in another device\n         of the dCDN, i.e., whether this\
    \ was a \"dCDN hit\" or a \"dCDN\n         miss\".\n      *  Occurrence: There\
    \ MUST be zero or exactly one instance of this\n         field.\n   CDNI Logging\
    \ field names are case-insensitive as per the basic ABNF\n   ([RFC5234]).  The\
    \ \"fields\" directive corresponding to an HTTP Request\n   Logging Record MUST\
    \ contain all the fields names whose occurrence is\n   specified above as \"[t]here\
    \ MUST be one and only one instance of this\n   field.\"  The corresponding fields\
    \ value MUST be present in every HTTP\n   Request Logging Record.\n   The \"fields\"\
    \ directive corresponding to an HTTP Request Logging\n   Record MAY list all the\
    \ fields values whose occurrence is specified\n   above as \"[t]here MUST be zero\
    \ or exactly one instance of this field\"\n   or \"[t]here MAY be zero, one, or\
    \ any number of instances of this\n   field.\"  The set of such field names actually\
    \ listed in the \"fields\"\n   directive is selected by the CDN generating the\
    \ CDNI Logging File\n   based on agreements between the interconnected CDNs established\n\
    \   through mechanisms outside the scope of this specification (e.g.,\n   contractual\
    \ agreements).  When such a field name is not listed in the\n   \"fields\" directive,\
    \ the corresponding field value MUST NOT be\n   included in the Logging Record.\
    \  When such a field name is listed in\n   the \"fields\" directive, the corresponding\
    \ field value MUST be\n   included in the Logging Record; if the value for the\
    \ field is not\n   available, this MUST be conveyed via a dash character (\"-\"\
    ).\n   The fields names listed in the \"fields\" directive MAY be listed in\n\
    \   the order in which they are listed in Section 3.4.1 or MAY be listed\n   in\
    \ any other order.\n   Logging some specific fields from HTTP requests and responses\
    \ can\n   introduce serious security and privacy risks.  For example, cookies\n\
    \   will often contain (months) long-lived token values that can be used\n   to\
    \ log into a service as the relevant user.  Similar values may be\n   included\
    \ in other header fields or within URLs or elsewhere in HTTP\n   requests and\
    \ responses.  Centralizing such values in a CDNI Logging\n   File can therefore\
    \ represent a significant increase in risk both for\n   the user and the web service\
    \ provider, but also for the CDNs\n   involved.  Therefore, implementations ought\
    \ to attempt to lower the\n   probability of such bad outcomes, e.g., by only\
    \ allowing a configured\n   set of headers to be added to CDNI Logging Records,\
    \ or by not\n   supporting wildcard selection of HTTP request/response fields\
    \ to add.\n   Such mechanisms can reduce the probability that security (or privacy)\n\
    \   sensitive values are centralized in CDNI Logging Files.  Also, when\n   agreeing\
    \ on which HTTP request/response fields are to be provided in\n   CDNI Logging\
    \ Files, the uCDN and dCDN administrators ought to\n   consider these risks. \
    \ Furthermore, CDNs making use of c-groupid to\n   identify an aggregate of clients\
    \ rather than individual clients ought\n   to realize that, by logging certain\
    \ header fields, they may create\n   the possibility to re-identify individual\
    \ clients.  In these cases,\n   heeding the above advice, or not logging header\
    \ fields at all, is\n   particularly important if the goal is to provide logs\
    \ that do not\n   identify individual clients.\n   A dCDN-side implementation\
    \ of the CDNI Logging interface MUST\n   implement all the following Logging fields\
    \ in a CDNI Logging Record\n   of record-type \"cdni_http_request_v1\" and MUST\
    \ support the ability to\n   include valid values for each of them:\n   o  date\n\
    \   o  time\n   o  time-taken\n   o  c-groupid\n   o  s-ip\n   o  s-hostname\n\
    \   o  s-port\n   o  cs-method\n   o  cs-uri\n   o  u-uri\n   o  protocol\n  \
    \ o  sc-status\n   o  sc-total-bytes\n   o  sc-entity-bytes\n   o  cs(insert_HTTP_header_name_here)\n\
    \   o  sc(insert_HTTP_header_name_here)\n   o  s-cached\n   A dCDN-side implementation\
    \ of the CDNI Logging interface MAY support\n   the following Logging fields in\
    \ a CDNI Logging Record of record-type\n   \"cdni_http_request_v1\":\n   o  s-ccid\n\
    \   o  s-sid\n   If a dCDN-side implementation of the CDNI Logging interface supports\n\
    \   these fields, it MUST support the ability to include valid values for\n  \
    \ them.\n   An uCDN-side implementation of the CDNI Logging interface MUST be\n\
    \   able to accept CDNI Logging Files with CDNI Logging Records of\n   record-type\
    \ \"cdni_http_request_v1\" containing any CDNI Logging Field\n   defined in Section\
    \ 3.4.1 as long as the CDNI Logging Record and the\n   CDNI Logging File are compliant\
    \ with the present document.\n   In case an uCDN-side implementation of the CDNI\
    \ Logging interface\n   receives a CDNI Logging File with HTTP Request Logging\
    \ Records that\n   do not contain field values for exactly the set of field names\n\
    \   actually listed in the preceding \"fields\" directive, the\n   implementation\
    \ MUST ignore those HTTP Request Logging Records and\n   MUST accept the other\
    \ HTTP Request Logging Records.\n   To ensure that the Logging File is correct,\
    \ the text MUST be\n   sanitized before being logged.  Null, bare CR, bare LF,\
    \ and HTAB have\n   to be removed by escaping them through percent encoding to\
    \ avoid\n   confusion with the Logging Record separators.\n"
- title: 3.5.  CDNI Logging File Extension
  contents:
  - "3.5.  CDNI Logging File Extension\n   The CDNI Logging File contains blocks of\
    \ directives and blocks of\n   corresponding records.  The supported set of directives\
    \ is defined\n   relative to the CDNI Logging File Format version.  The complete\
    \ set\n   of directives for version \"cdni/1.0\" are defined in Section 3.3. \
    \ The\n   directive list is not expected to require much extension, but when it\n\
    \   does, the new directive MUST be defined and registered in the \"CDNI\n   Logging\
    \ Directive Names\" registry, as described in Figure 9, and a\n   new version\
    \ MUST be defined and registered in the \"CDNI Logging File\n   version\" registry,\
    \ as described in Section 6.2.  For example, adding\n   a new CDNI Logging Directive,\
    \ e.g., \"foo\", to the set of directives\n   defined for \"cdni/1.0\" in Section\
    \ 3.3, would require registering both\n   the new CDNI Logging Directive \"foo\"\
    \ and a new CDNI Logging File\n   version, e.g., \"CDNI/2.0\", which includes\
    \ all of the existing CDNI\n   Logging Directives of \"cdni/1.0\" plus \"foo\"\
    .\n   It is expected that as new logging requirements arise, the list of\n   fields\
    \ to log will change and expand.  When adding new fields, the\n   new fields MUST\
    \ be defined and registered in the \"CDNI Logging Field\n   Names\" registry,\
    \ as described in Section 6.4, and a new record-type\n   MUST be defined and registered\
    \ in the \"CDNI Logging record-types\"\n   registry, as described in Section 6.3.\
    \  For example, adding a new\n   CDNI Logging Field, e.g., \"c-bar\", to the set\
    \ of fields defined for\n   \"cdni_http_request_v1\" in Section 3.4.1, would require\
    \ registering\n   both the new CDNI Logging Field \"c-bar\" and a new CDNI record-type,\n\
    \   e.g., \"cdni_http_request_v2\", which includes all of the existing CDNI\n\
    \   Logging Fields of \"cdni_http_request_v1\" plus \"c-bar\".\n"
- title: 3.6.  CDNI Logging File Examples
  contents:
  - "3.6.  CDNI Logging File Examples\n   Let us consider the upstream CDN and the\
    \ downstream CDN-labeled uCDN\n   and dCDN-1 in Figure 1.  When dCDN-1 acts as\
    \ a downstream CDN for\n   uCDN and performs content delivery on behalf of uCDN,\
    \ dCDN-1 will\n   include the CDNI Logging Records corresponding to the content\n\
    \   deliveries performed on behalf of uCDN in the CDNI Logging Files for\n   uCDN.\
    \  An example CDNI Logging File communicated by dCDN-1 to uCDN is\n   shown below\
    \ in Figure 4.\n   #version:<HTAB>cdni/1.0<CRLF>\n   #UUID:<HTAB>urn:uuid:f81d4fae-7dec-11d0-a765-00a0c91e6bf6<CRLF>\n\
    \   #claimed-origin:<HTAB>cdni-logging-entity.dcdn-1.example.com<CRLF>\n   #record-type:<HTAB>cdni_http_request_v1<CRLF>\n\
    \   #fields:<HTAB>date<HTAB>time<HTAB>time-taken<HTAB>c-groupid<HTAB>\n   cs-method<HTAB>u-uri<HTAB>protocol<HTAB>\n\
    \   sc-status<HTAB>sc-total-bytes<HTAB>cs(User-Agent)<HTAB>\n   cs(Referer)<HTAB>s-cached<CRLF>\n\
    \   2013-05-17<HTAB>00:38:06.825<HTAB>9.058<HTAB>US/TN/MEM/38138<HTAB>\n   GET<HTAB>\n\
    \   http://cdni-ucdn.dcdn-1.example.com/video/movie100.mp4<HTAB>\n   HTTP/1.1<HTAB>200<HTAB>6729891<HTAB>\"\
    Mozilla/5.0\n   (Windows; U; Windows NT 6.0; en-US) AppleWebKit/533.4 (KHTML,\
    \ like\n   Gecko) Chrome/5.0.375.127 Safari/533.4\"<HTAB>\n   \"host1.example.com\"\
    <HTAB>1<CRLF>\n   2013-05-17<HTAB>00:39:09.145<HTAB>15.32<HTAB>FR/PACA/NCE/06100<HTAB>\n\
    \   GET<HTAB>\n   http://cdni-ucdn.dcdn-1.example.com/video/movie118.mp4<HTAB>\n\
    \   HTTP/1.1<HTAB>200<HTAB>15799210<HTAB>\"Mozilla/5.0\n   (Windows; U; Windows\
    \ NT 6.0; en-US) AppleWebKit/533.4 (KHTML, like\n   Gecko) Chrome/5.0.375.127\
    \ Safari/533.4\"<HTAB>\n   \"host1.example.com\"<HTAB>1<CRLF>\n   2013-05-17<HTAB>00:42:53.437<HTAB>52.879<HTAB>US/TN/MEM/38138<HTAB>\n\
    \   GET<HTAB>\n   http://cdni-ucdn.dcdn-1.example.com/video/picture11.mp4<HTAB>\n\
    \   HTTP/1.0<HTAB>200<HTAB>97234724<HTAB>\"Mozilla/5.0\n   (Windows; U; Windows\
    \ NT 6.0; en-US) AppleWebKit/533.4 (KHTML, like\n   Gecko) Chrome/5.0.375.127\
    \ Safari/533.4\"<HTAB>\n   \"host5.example.com\"<HTAB>0<CRLF>\n   #SHA256-hash:<HTAB>\
    \ 64-hexadecimal-digit hash value <CRLF>\n                    Figure 4: CDNI Logging\
    \ File Example\n   If uCDN establishes, by some means (e.g., via TLS authentication\
    \ when\n   pulling the CDNI Logging File), the identity of the entity from which\n\
    \   it pulled the CDNI Logging File, uCDN can add an established-origin\n   directive\
    \ to the CDNI Logging as illustrated below:\n  #established-origin:<HTAB>cdni-logging-entity.dcdn-1.example.com<CRLF>\n\
    \   As illustrated in Figure 2, uCDN will then ingest the corresponding\n   CDNI\
    \ Logging Records into its Collection process, alongside the\n   Logging Records\
    \ generated locally by the uCDN itself.  This allows\n   uCDN to aggregate Logging\
    \ Records for deliveries performed by itself\n   (through Records generated locally)\
    \ as well as for deliveries\n   performed by its downstream CDN(s).  This aggregate\
    \ information can\n   then be used (after Filtering and Rectification, as illustrated\
    \ in\n   Figure 2) by log-consuming applications that take into account\n   deliveries\
    \ performed by uCDN as well as by all of its downstream\n   CDNs.\n   We observe\
    \ that the time between\n   1.  when a delivery is completed in dCDN and\n   2.\
    \  when the corresponding Logging Record is ingested by the\n       Collection\
    \ process in uCDN\n   depends on a number of parameters such as the Logging Period\
    \ agreed\n   to by uCDN and dCDN, how much time uCDN waits before pulling the\
    \ CDNI\n   Logging File once it is advertised in the CDNI Logging Feed, and the\n\
    \   time to complete the pull of the CDNI Logging File.  Therefore, if we\n  \
    \ consider the set of Logging Records aggregated by the Collection\n   process\
    \ in uCDN in a given time interval, there could be a permanent\n   significant\
    \ timing difference between the CDNI Logging Records\n   received from the dCDN\
    \ and the Logging Records generated locally.\n   For example, in a given time\
    \ interval, the Collection process in uCDN\n   may be aggregating Logging Records\
    \ generated locally by uCDN for\n   deliveries performed in the last hour and\
    \ CDNI Logging Records\n   generated in the dCDN for deliveries in the hour before\
    \ last.\n   Say that, for some reason (for example, a Surrogate bug), dCDN-1\n\
    \   could not collect the total number of bytes of the responses sent by\n   the\
    \ Surrogate (in other words, the value for sc-total-bytes is not\n   available).\
    \  Then the corresponding CDNI Logging Records would\n   contain a dash character\
    \ (\"-\") in lieu of the value for the sc-total-\n   bytes field (as specified\
    \ in Section 3.4.1).  In that case, the CDNI\n   Logging File that would be communicated\
    \ by dCDN-1 to uCDN is shown\n   below in Figure 5.\n   #version:<HTAB>cdni/1.0<CRLF>\n\
    \   #UUID:<HTAB>urn:uuid:f81d4fae-7dec-11d0-a765-00a0c91e6bf6<CRLF>\n   #claimed-origin:<HTAB>cdni-logging-entity.dcdn-1.example.com<CRLF>\n\
    \   #record-type:<HTAB>cdni_http_request_v1<CRLF>\n   #fields:<HTAB>date<HTAB>time<HTAB>time-taken<HTAB>c-groupid<HTAB>\n\
    \   cs-method<HTAB>u-uri<HTAB>protocol<HTAB>\n   sc-status<HTAB>sc-total-bytes<HTAB>cs(User-Agent)<HTAB>\n\
    \   cs(Referer)<HTAB>s-cached<CRLF>\n   2013-05-17<HTAB>00:38:06.825<HTAB>9.058<HTAB>US/TN/MEM/38138<HTAB>\n\
    \   GET<HTAB>\n   http://cdni-ucdn.dcdn-1.example.com/video/movie100.mp4<HTAB>\n\
    \   HTTP/1.1<HTAB>200<HTAB>-<HTAB>\"Mozilla/5.0\n   (Windows; U; Windows NT 6.0;\
    \ en-US) AppleWebKit/533.4 (KHTML, like\n   Gecko) Chrome/5.0.375.127 Safari/533.4\"\
    <HTAB>\n   \"host1.example.com\"<HTAB>1<CRLF>\n   2013-05-17<HTAB>00:39:09.145<HTAB>15.32<HTAB>FR/PACA/NCE/06100<HTAB>\n\
    \   GET<HTAB>\n   http://cdni-ucdn.dcdn-1.example.com/video/movie118.mp4<HTAB>\n\
    \   HTTP/1.1<HTAB>200<HTAB>-<HTAB>\"Mozilla/5.0\n   (Windows; U; Windows NT 6.0;\
    \ en-US) AppleWebKit/533.4 (KHTML, like\n   Gecko) Chrome/5.0.375.127 Safari/533.4\"\
    <HTAB>\n   \"host1.example.com\"<HTAB>1<CRLF>\n   2013-05-17<HTAB>00:42:53.437<HTAB>52.879<HTAB>US/TN/MEM/38138<HTAB>\n\
    \   GET<HTAB>\n   http://cdni-ucdn.dcdn-1.example.com/video/picture11.mp4<HTAB>\n\
    \   HTTP/1.0<HTAB>200<HTAB>-<HTAB>\"Mozilla/5.0\n   (Windows; U; Windows NT 6.0;\
    \ en-US) AppleWebKit/533.4 (KHTML, like\n   Gecko) Chrome/5.0.375.127 Safari/533.4\"\
    <HTAB>\n   \"host5.example.com\"<HTAB>0<CRLF>\n   #SHA256-hash:<HTAB> 64-hexadecimal-digit\
    \ hash value <CRLF>\n      Figure 5: CDNI Logging File Example with a Missing\
    \ Field Value\n"
- title: 3.7.  Cascaded CDNI Logging Files Example
  contents:
  - "3.7.  Cascaded CDNI Logging Files Example\n   Let us consider the cascaded CDN\
    \ scenario of uCDN, dCDN-2, and dCDN-3\n   as depicted in Figure 1.  After completion\
    \ of a delivery by dCDN-3 on\n   behalf of dCDN-2, dCDN-3 will include a corresponding\
    \ Logging Record\n   in a CDNI Logging File that will be pulled by dCDN-2 and\
    \ that is\n   illustrated below in Figure 6.  In practice, a CDNI Logging File\
    \ is\n   likely to contain a very high number of CDNI Logging Records.\n   However,\
    \ for readability, the example in Figure 6 contains a single\n   CDNI Logging\
    \ Record.\n   #version:<HTAB>cdni/1.0<CRLF>\n   #UUID:<HTAB>urn:uuid:65718ef-0123-9876-adce4321bcde<CRLF>\n\
    \   #claimed-origin:<HTAB>cdni-logging-entity.dcdn-3.example.com<CRLF>\n   #record-type:<HTAB>cdni_http_request_v1<CRLF>\n\
    \   #fields:<HTAB>date<HTAB>time<HTAB>time-taken<HTAB>c-groupid<HTAB>\n   cs-method<HTAB>u-uri<HTAB>protocol<HTAB>\n\
    \   sc-status<HTAB>sc-total-bytes<HTAB>cs(User-Agent)<HTAB>\n   cs(Referer)<HTAB>s-cached<CRLF>\n\
    \   2013-05-17<HTAB>00:39:09.119<HTAB>14.07<HTAB>US/CA/SFO/94114<HTAB>\n   GET<HTAB>\n\
    \   http://cdni-dcdn-2.dcdn-3.example.com/video/movie118.mp4<HTAB>\n   HTTP/1.1<HTAB>200<HTAB>15799210<HTAB>\"\
    Mozilla/5.0\n   (Windows; U; Windows NT 6.0; en-US) AppleWebKit/533.4 (KHTML,\
    \ like\n   Gecko) Chrome/5.0.375.127 Safari /533.4\"<HTAB>\n   \"host1.example.com\"\
    <HTAB>1<CRLF>\n   #SHA256-hash:<HTAB> 64-hexadecimal-digit hash value <CRLF>\n\
    \      Figure 6: Cascaded CDNI Logging File Example (dCDN-3 to dCDN-2)\n   If\
    \ dCDN-2 establishes, by some means (e.g., via TLS authentication\n   when pulling\
    \ the CDNI Logging File), the identity of the entity from\n   which it pulled\
    \ the CDNI Logging File, dCDN-2 can add an established-\n   origin directive to\
    \ the CDNI Logging as illustrated below:\n  #established-origin:<HTAB>cdni-logging-entity.dcdn-3.example.com<CRLF>\n\
    \   dCDN-2 (behaving as an upstream CDN from the viewpoint of dCDN-3)\n   will\
    \ then ingest the CDNI Logging Record for the considered dCDN-3\n   delivery into\
    \ its Collection process (as illustrated in Figure 2).\n   This Logging Record\
    \ may be aggregated with Logging Records generated\n   locally by dCDN-2 for deliveries\
    \ performed by dCDN-2 itself.  Say,\n   for illustration, that the content delivery\
    \ performed by dCDN-3 on\n   behalf of dCDN-2 had actually been redirected to\
    \ dCDN-2 by uCDN, and\n   say that another content delivery has just been redirected\
    \ by uCDN to\n   dCDN-2 and that dCDN-2 elected to perform the corresponding delivery\n\
    \   itself.  Then, after Filtering and Rectification (as illustrated in\n   Figure\
    \ 2), dCDN-2 will include the two Logging Records corresponding\n   respectively\
    \ to the delivery performed by dCDN-3 and the delivery\n   performed by dCDN-2,\
    \ in the next CDNI Logging File that will be\n   communicated to uCDN.  An example\
    \ of such a CDNI Logging File is\n   illustrated below in Figure 7.\n   #version:<HTAB>cdni/1.0<CRLF>\n\
    \   #UUID:<HTAB>urn:uuid:1234567-8fedc-abab-0987654321ff<CRLF>\n   #claimed-origin:<HTAB>cdni-logging-entity.dcdn-2.example.com<CRLF>\n\
    \   #record-type:<HTAB>cdni_http_request_v1<CRLF>\n   #fields:<HTAB>date<HTAB>time<HTAB>time-taken<HTAB>c-groupid<HTAB>\n\
    \   cs-method<HTAB>u-uri<HTAB>protocol<HTAB>\n   sc-status<HTAB>sc-total-bytes<HTAB>cs(User-Agent)<HTAB>\n\
    \   cs(Referer)<HTAB>s-cached<CRLF>\n   2013-05-17<HTAB>00:39:09.119<HTAB>14.07<HTAB>US/CA/SFO/94114<HTAB>\n\
    \   GET<HTAB>\n   http://cdni-ucdn.dcdn-2.example.com/video/movie118.mp4<HTAB>\n\
    \   HTTP/1.1<HTAB>200<HTAB>15799210<HTAB>\"Mozilla/5.0\n   (Windows; U; Windows\
    \ NT 6.0; en-US) AppleWebKit/533.4 (KHTML, like\n   Gecko) Chrome/5.0.375.127\
    \ Safari /533.4\"<HTAB>\n   \"host1.example.com\"<HTAB>1<CRLF>\n   2013-05-17<HTAB>01:42:53.437<HTAB>52.879<HTAB>FR/IDF/PAR/75001<HTAB>\n\
    \   GET<HTAB>\n   http://cdni-ucdn.dcdn-2.example.com/video/picture11.mp4<HTAB>\n\
    \   HTTP/1.0<HTAB>200<HTAB>97234724<HTAB>\"Mozilla/5.0\n   (Windows; U; Windows\
    \ NT 6.0; en-US) AppleWebKit/533.4 (KHTML, like\n   Gecko) Chrome/5.0.375.127\
    \ Safari /533.4\"<HTAB>\n   \"host5.example.com\"<HTAB>0<CRLF>\n   #SHA256-hash:<HTAB>\
    \ 64-hexadecimal-digit hash value <CRLF>\n       Figure 7: Cascaded CDNI Logging\
    \ File Example (dCDN-2 to uCDN)\n   If uCDN establishes, by some means (e.g.,\
    \ via TLS authentication when\n   pulling the CDNI Logging File), the identity\
    \ of the entity from which\n   it pulled the CDNI Logging File, uCDN can add to\
    \ the CDNI Logging an\n   established-origin directive as illustrated below:\n\
    \  #established-origin:<HTAB>cdni-logging-entity.dcdn-2.example.com<CRLF>\n  \
    \ In the example of Figure 7, we observe that:\n   o  The first Logging Record\
    \ corresponds to the Logging Record\n      communicated earlier to dCDN-2 by dCDN-3,\
    \ which corresponds to a\n      delivery redirected by uCDN to dCDN-2 and then\
    \ redirected by\n      dCDN-2 to dCDN-3.  The fields values in this Logging Record\
    \ are\n      copied from the corresponding CDNI Logging Record communicated to\n\
    \      dCDN2 by dCDN-3, with the exception of the u-uri that now reflects\n  \
    \    the URI convention between uCDN and dCDN-2 and that presents the\n      delivery\
    \ to uCDN as if it was performed by dCDN-2 itself.  This\n      reflects the fact\
    \ that dCDN-2 had taken full responsibility of the\n      corresponding delivery\
    \ (even if in this case, dCDN-2 elected to\n      redirect the delivery to dCDN-3\
    \ so it is actually performed by\n      dCDN-3 on behalf of dCDN-2).\n   o  The\
    \ second Logging Record corresponds to a delivery redirected by\n      uCDN to\
    \ dCDN-2 and performed by dCDN-2 itself.  The time of the\n      delivery in this\
    \ Logging Record may be significantly more recent\n      than the first Logging\
    \ Record since it was generated locally while\n      the first Logging Record\
    \ was generated by dCDN-3 and had to be\n      advertised, and then pulled and\
    \ then ingested into the dCDN-2\n      Collection process, before being aggregated\
    \ with the second\n      Logging Record.\n"
- title: 4.  Protocol for Exchange of CDNI Logging File after Full Collection
  contents:
  - "4.  Protocol for Exchange of CDNI Logging File after Full Collection\n   This\
    \ section specifies a protocol for the exchange of CDNI Logging\n   Files as specified\
    \ in Section 3 after the CDNI Logging File is fully\n   collected by the dCDN.\n\
    \   This protocol comprises:\n   o  a CDNI Logging feed, allowing the dCDN to\
    \ notify the uCDN about\n      the CDNI Logging Files that can be retrieved by\
    \ that uCDN from the\n      dCDN, as well as all the information necessary for\
    \ retrieving each\n      of these CDNI Logging Files.  The CDNI Logging feed is\
    \ specified\n      in Section 4.1.\n   o  a CDNI Logging File pull mechanism,\
    \ allowing the uCDN to obtain\n      from the dCDN a given CDNI Logging File at\
    \ the uCDN's convenience.\n      The CDNI Logging File pull mechanism is specified\
    \ in Section 4.2.\n   An implementation of the CDNI Logging interface on the dCDN\
    \ side (the\n   entity generating the CDNI Logging File) MUST support the server\
    \ side\n   of the CDNI Logging feed (as specified in Section 4.1) and the server\n\
    \   side of the CDNI Logging pull mechanism (as specified in\n   Section 4.2).\n\
    \   An implementation of the CDNI Logging interface on the uCDN side (the\n  \
    \ entity consuming the CDNI Logging File) MUST support the client side\n   of\
    \ the CDNI Logging feed (as specified in Section 4.1) and the client\n   side\
    \ of the CDNI Logging pull mechanism (as specified in\n   Section 4.2).\n"
- title: 4.1.  CDNI Logging Feed
  contents:
  - "4.1.  CDNI Logging Feed\n   The server-side implementation of the CDNI Logging\
    \ feed MUST produce\n   an Atom feed [RFC4287].  This feed is used to advertise\
    \ log files\n   that are available for the client-side to retrieve using the CDNI\n\
    \   Logging pull mechanism.\n"
- title: 4.1.1.  Atom Formatting
  contents:
  - "4.1.1.  Atom Formatting\n   A CDNI Logging feed MUST be structured as an Archived\
    \ feed, as\n   defined in [RFC5005], and MUST be formatted in Atom [RFC4287].\
    \  This\n   means it consists of a subscription document that is regularly\n \
    \  updated as new CDNI Logging Files become available, and information\n   about\
    \ older CDNI Logging Files is moved into archive documents.  Once\n   created,\
    \ archive documents are never modified.\n   Each CDNI Logging File listed in an\
    \ Atom feed MUST be described in an\n   atom:entry container element.\n   The\
    \ atom:entry MUST contain an atom:content element whose \"src\"\n   attribute\
    \ is a link to the CDNI Logging File and whose \"type\"\n   attribute is the MIME\
    \ Media Type indicating that the entry is a CDNI\n   Logging File.  This MIME\
    \ Media Type is defined as \"application/cdni\"\n   (See [RFC7736]) with the Payload\
    \ Type (ptype) parameter set to\n   \"logging-file\".\n   For compatibility with\
    \ some Atom feed readers, the atom:entry MAY\n   also contain an atom:link entry\
    \ whose \"href\" attribute is a link to\n   the CDNI Logging File and whose \"\
    type\" attribute is the MIME Media\n   Type indicating that the entry is a CDNI\
    \ Logging File using the\n   \"application/cdni\" MIME Media Type with the Payload\
    \ Type (ptype)\n   parameter set to \"logging-file\" (see [RFC7736]).\n   The\
    \ URI used in the atom:id of the atom:entry MUST contain the UUID\n   of the CDNI\
    \ Logging File.\n   The atom:updated in the atom:entry MUST indicate the time\
    \ at which\n   the CDNI Logging File was last updated.\n"
- title: 4.1.2.  Updates to Log Files and the Feed
  contents:
  - "4.1.2.  Updates to Log Files and the Feed\n   CDNI Logging Files MUST NOT be\
    \ modified by the dCDN once published in\n   the CDNI Logging feed.\n   The frequency\
    \ with which the subscription feed is updated, the period\n   of time covered\
    \ by each CDNI Logging File or each archive document,\n   and timeliness of publishing\
    \ of CDNI Logging Files are outside the\n   scope of the present document and\
    \ are expected to be agreed upon by\n   uCDN and dCDN via other means (e.g., human\
    \ agreement).\n   The server-side implementation MUST be able to set, and SHOULD\
    \ set,\n   HTTP-cache control headers on the subscription feed to indicate the\n\
    \   frequency at which the client-side is to poll for updates.\n   The client-side\
    \ MAY use HTTP-cache control headers (set by the\n   server-side) on the subscription\
    \ feed to determine the frequency at\n   which to poll for updates.  The client-side\
    \ MAY instead, or in\n   addition, use other information to determine when to\
    \ poll for updates\n   (e.g., a polling frequency that may have been negotiated\
    \ between the\n   uCDN and dCDN by mechanisms outside the scope of the present\
    \ document\n   and that is to override the indications provided in the HTTP-cache\n\
    \   control headers).\n   The potential retention limits (e.g., sliding time window)\
    \ within\n   which the dCDN is to retain and be ready to serve an archive document\n\
    \   is outside the scope of the present document and is expected to be\n   agreed\
    \ upon by uCDN and dCDN via other means (e.g., human agreement).\n   The server-side\
    \ implementation MUST retain, and be ready to serve,\n   any archive document\
    \ within the agreed retention limits.  Outside\n   these agreed limits, the server-side\
    \ implementation MAY indicate its\n   inability to serve (e.g., with HTTP status\
    \ code 404) an archive\n   document or MAY refuse to serve it (e.g., with HTTP\
    \ status code 403\n   or 410).\n"
- title: 4.1.3.  Redundant Feeds
  contents:
  - "4.1.3.  Redundant Feeds\n   The server-side implementation MAY present more than\
    \ one CDNI Logging\n   feed for redundancy.  Each CDNI Logging File MAY be published\
    \ in more\n   than one feed.\n   A client-side implementation MAY support such\
    \ redundant CDNI Logging\n   feeds.  If it supports a redundant CDNI Logging feed,\
    \ the client-side\n   can use the UUID of the CDNI Logging File, presented in\
    \ the atom:id\n   element of the Atom feed, to avoid unnecessarily pulling and\
    \ storing\n   a given CDNI Logging File more than once.\n"
- title: 4.1.4.  Example CDNI Logging Feed
  contents:
  - "4.1.4.  Example CDNI Logging Feed\n   Figure 8 illustrates an example of the\
    \ subscription document of a\n   CDNI Logging feed.\n   <?xml version=\"1.0\"\
    \ encoding=\"utf-8\"?>\n   <feed xmlns=\"http://www.w3.org/2005/Atom\">\n    \
    \ <title type=\"text\">CDNI Logging Feed</title>\n     <updated>2013-03-23T14:46:11Z</updated>\n\
    \     <id>urn:uuid:663ae677-40fb-e99a-049d-c5642916b8ce</id>\n     <link href=\"\
    https://dcdn.example/logfeeds/ucdn1\"\n        rel=\"self\" type=\"application/atom+xml\"\
    \ />\n     <link href=\"https://dcdn.example/logfeeds/ucdn1\"\n        rel=\"\
    current\" type=\"application/atom+xml\" />\n     <link href=\"https://dcdn.example/logfeeds/ucdn1/201303231400\"\
    \n        rel=\"prev-archive\" type=\"application/atom+xml\" />\n     <generator\
    \ version=\"example version 1\">CDNI Log Feed\n        Generator</generator>\n\
    \     <author><name>dcdn.example</name></author>\n     <entry>\n       <title\
    \ type=\"text\">CDNI Logging File for uCDN at\n         2013-03-23 14:15:00</title>\n\
    \         <id>urn:uuid:12345678-1234-abcd-00aa-01234567abcd</id>\n         <updated>2013-03-23T14:15:00Z</updated>\n\
    \         <content src=\"https://dcdn.example/logs/ucdn/\n            http-requests-20130323141500000000\"\
    \n            type=\"application/cdni\"\n            ptype=\"logging-file\"/>\n\
    \         <summary>CDNI Logging File for uCDN at\n         2013-03-23 14:15:00</summary>\n\
    \     </entry>\n     <entry>\n       <title type=\"text\">CDNI Logging File for\
    \ uCDN at\n         2013-03-23 14:30:00</title>\n         <id>urn:uuid:87654321-4321-dcba-aa00-dcba7654321</id>\n\
    \         <updated>2013-03-23T14:30:00Z</updated>\n         <content src=\"https://dcdn.example/logs/ucdn/\n\
    \            http-requests-20130323143000000000\"\n            type=\"application/cdni\"\
    \n            ptype=\"logging-file\"/>\n         <summary>CDNI Logging File for\
    \ uCDN at\n         2013-03-23 14:30:00</summary>\n     </entry>\n     ...\n \
    \    <entry>\n       ...\n     </entry>\n   </feed>\n      Figure 8: Example Subscription\
    \ Document of a CDNI Logging Feed\n"
- title: 4.2.  CDNI Logging File Pull
  contents:
  - "4.2.  CDNI Logging File Pull\n   A client-side implementation of the CDNI Logging\
    \ interface MAY pull,\n   at its convenience, a CDNI Logging File that is published\
    \ by the\n   server-side in the CDNI Logging Feed (in the subscription document\
    \ or\n   an archive document).  To do so, the client-side:\n   o  MUST implement\
    \ HTTP/1.1 ([RFC7230] [RFC7231] [RFC7232] [RFC7233]\n      [RFC7234] [RFC7235]),\
    \ MAY also support other HTTP versions (e.g.,\n      HTTP/2 [RFC7540]), and MAY\
    \ negotiate which HTTP version is\n      actually used.  This allows operators\
    \ and implementers to choose\n      to use later versions of HTTP to take advantage\
    \ of new features,\n      while still ensuring interoperability with systems that\
    \ only\n      support HTTP/1.1;\n   o  MUST use the URI that was associated to\
    \ the CDNI Logging File\n      (within the \"src\" attribute of the corresponding\
    \ atom:content\n      element) in the CDNI Logging Feed;\n   o  MUST support exchange\
    \ of CDNI Logging Files with no content\n      encoding applied to the representation;\n\
    \   o  MUST support exchange of CDNI Logging Files with \"gzip\" content\n   \
    \   encoding (as defined in [RFC7230]) applied to the representation.\n   Note\
    \ that a client-side implementation of the CDNI Logging interface\n   MAY pull\
    \ a CDNI Logging File that it has already pulled.\n   The server-side implementation\
    \ MUST respond to a valid pull request\n   by a client-side implementation for\
    \ a CDNI Logging File published by\n   the server-side in the CDNI Logging Feed\
    \ (in the subscription\n   document or an archive document).  The server-side\
    \ implementation:\n   o  MUST implement HTTP/1.1 to handle the client-side request\
    \ and MAY\n      also support other HTTP versions (e.g., HTTP/2);\n   o  MUST\
    \ include the CDNI Logging File identified by the request URI\n      inside the\
    \ body of the HTTP response;\n   o  MUST support exchange of CDNI Logging Files\
    \ with no content\n      encoding applied to the representation;\n   o  MUST support\
    \ exchange of CDNI Logging Files with \"gzip\" content\n      encoding (as defined\
    \ in [RFC7231]) applied to the representation.\n   Content negotiation approaches\
    \ defined in [RFC7231] (e.g., using\n   Accept-Encoding request-header field or\
    \ Content-Encoding entity-\n   header field) MAY be used by the client-side and\
    \ server-side\n   implementations to establish the content coding to be used for\
    \ a\n   particular exchange of a CDNI Logging File.\n   Applying compression content\
    \ encoding (such as \"gzip\") is expected to\n   mitigate the impact of exchanging\
    \ the large volumes of logging\n   information expected across CDNs.  This is\
    \ expected to be\n   particularly useful in the presence of HTTP Adaptive Streaming\
    \ (HAS)\n   that, as per the present version of the document, will result in a\n\
    \   separate CDNI Log Record for each HAS segment delivery in the CDNI\n   Logging\
    \ File.\n   The potential retention limits (e.g., sliding time window and maximum\n\
    \   aggregate file storage quotas) within which the dCDN is to retain and\n  \
    \ be ready to serve a CDNI Logging File previously advertised in the\n   CDNI\
    \ Logging Feed is outside the scope of the present document and is\n   expected\
    \ to be agreed upon by uCDN and dCDN via other means (e.g.,\n   human agreement).\
    \  The server-side implementation MUST retain, and be\n   ready to serve, any\
    \ CDNI Logging File within the agreed retention\n   limits.  Outside these agreed\
    \ limits, the server-side implementation\n   MAY indicate its inability to serve\
    \ (e.g., with HTTP status code 404)\n   a CDNI Logging File or MAY refuse to serve\
    \ it (e.g., with HTTP status\n   code 403 or 410).\n"
- title: 5.  Protocol for Exchange of CDNI Logging File During Collection
  contents:
  - "5.  Protocol for Exchange of CDNI Logging File During Collection\n   We note\
    \ that, in addition to the CDNI Logging File exchange protocol\n   specified in\
    \ Section 4, implementations of the CDNI Logging interface\n   may also support\
    \ other mechanisms to exchange CDNI Logging Files.  In\n   particular, such mechanisms\
    \ might allow the exchange of the CDNI\n   Logging File to start before the file\
    \ is fully collected.  This can\n   allow CDNI Logging Records to be communicated\
    \ by the dCDN to the uCDN\n   as they are gathered by the dCDN without having\
    \ to wait until all the\n   CDNI Logging Records of the same logging period are\
    \ collected in the\n   corresponding CDNI Logging File.  This approach is commonly\
    \ referred\n   to as the \"tailing\" of the file.\n   Such an approach could be\
    \ used, for example, to exchange logging\n   information with a significantly\
    \ reduced time-lag (e.g., sub-minute\n   or sub-second) between when the event\
    \ occurred in the dCDN and when\n   the corresponding CDNI Logging Record is made\
    \ available to the uCDN.\n   This can satisfy log-consuming applications requiring\
    \ extremely fresh\n   logging information such as near-real-time content delivery\n\
    \   monitoring.  Such mechanisms are for further study and are outside\n   the\
    \ scope of this document.\n"
- title: 6.  IANA Considerations
  contents:
  - '6.  IANA Considerations

    '
- title: 6.1.  CDNI Logging Directive Names Registry
  contents:
  - "6.1.  CDNI Logging Directive Names Registry\n   IANA has created a new \"CDNI\
    \ Logging Directive Names\" subregistry\n   under the \"Content Delivery Networks\
    \ Interconnection (CDNI)\n   Parameters\" registry.\n   The initial contents of\
    \ the \"CDNI Logging Directives\" registry\n   comprise the names of the directives\
    \ specified in Section 3.3 of the\n   present document and are as follows:\n \
    \    +------------------------------+-----------+\n     | Directive Name     \
    \          | Reference |\n     +------------------------------+-----------+\n\
    \     | version                      | RFC 7937  |\n     | UUID              \
    \           | RFC 7937  |\n     | claimed-origin               | RFC 7937  |\n\
    \     | established-origin           | RFC 7937  |\n     | remark            \
    \           | RFC 7937  |\n     | record-type                  | RFC 7937  |\n\
    \     | fields                       | RFC 7937  |\n     | SHA256-hash       \
    \           | RFC 7937  |\n     +------------------------------+-----------+\n\
    \              Figure 9: CDNI Logging Directive Names Registry\n   Within the\
    \ registry, names are to be allocated by IANA according to\n   the \"Specification\
    \ Required\" policy specified in [RFC5226].\n   Directive names are to be allocated\
    \ by IANA with a format of\n   NAMEFORMAT (see Section 3.1).  All directive names\
    \ defined in the\n   Logging File are case-insensitive as per the basic ABNF ([RFC5234]).\n\
    \   Each specification that defines a new CDNI Logging directive needs to\n  \
    \ contain a description for the new directive with the same set of\n   information\
    \ as provided in Section 3.3 (i.e., format, directive\n   value, and occurrence).\n"
- title: 6.2.  CDNI Logging File version Registry
  contents:
  - "6.2.  CDNI Logging File version Registry\n   IANA has created a new \"CDNI Logging\
    \ File version\" subregistry under\n   the \"Content Delivery Networks Interconnection\
    \ (CDNI) Parameters\"\n   registry.\n   The initial contents of the \"CDNI Logging\
    \ File version\" registry\n   comprise the value \"cdni/1.0\" specified in Section\
    \ 3.3 of the present\n   document and are as follows:\n    +-----------------+-----------+----------------------------------+\n\
    \    | version         | Reference |        Description               |\n    +-----------------+-----------+----------------------------------+\n\
    \    | cdni/1.0        | RFC 7937  | CDNI Logging File version 1.0    |\n    |\
    \                 |           | as specified in RFC 7937         |\n    +-----------------+-----------+----------------------------------+\n\
    \               Figure 10: CDNI Logging File version Registry\n   Within the registry,\
    \ version values are to be allocated by IANA\n   according to the \"Specification\
    \ Required\" policy specified in\n   [RFC5226].  Version values are to be allocated\
    \ by IANA with a format\n   of NAMEFORMAT (see Section 3.1).  All version values\
    \ defined in the\n   Logging File are case-insensitive as per the basic ABNF ([RFC5234]).\n"
- title: 6.3.  CDNI Logging record-types Registry
  contents:
  - "6.3.  CDNI Logging record-types Registry\n   IANA has created a new \"CDNI Logging\
    \ record-types\" subregistry under\n   the \"Content Delivery Networks Interconnection\
    \ (CDNI) Parameters\"\n   registry.\n   The initial contents of the \"CDNI Logging\
    \ record-types\" registry\n   comprise the names of the CDNI Logging record-types\
    \ specified in\n   Section 3.4 of the present document and are as follows:\n \
    \ +----------------------+-----------+---------------------------------+\n  |\
    \ record-types         | Reference |        Description              |\n  +----------------------+-----------+---------------------------------+\n\
    \  | cdni_http_request_v1 | RFC 7937  | CDNI Logging Record version 1   |\n  |\
    \                      |           | for content delivery using HTTP |\n  +----------------------+-----------+---------------------------------+\n\
    \               Figure 11: CDNI Logging record-types Registry\n   Within the registry,\
    \ record-types are to be allocated by IANA\n   according to the \"Specification\
    \ Required\" policy specified in\n   [RFC5226].  Record-types are to be allocated\
    \ by IANA with a format of\n   NAMEFORMAT (see Section 3.1).  All record-types\
    \ defined in the\n   Logging File are case-insensitive as per the basic ABNF ([RFC5234]).\n\
    \   Each specification that defines a new record-type needs to contain a\n   description\
    \ for the new record-type with the same set of information\n   as provided in\
    \ Section 3.4.1.  This includes:\n   o  A list of all the CDNI Logging fields\
    \ that can appear in a CDNI\n      Logging Record of the new record-type\n   o\
    \  For all these fields: a specification of the occurrence for each\n      Field\
    \ in the new record-type\n   o  For every newly defined Field, i.e., for every\
    \ Field that results\n      in a registration in the \"CDNI Logging Field Names\"\
    \ registry\n      (Section 6.4): a specification of the field name, format, and\n\
    \      field value.\n"
- title: 6.4.  CDNI Logging Field Names Registry
  contents:
  - "6.4.  CDNI Logging Field Names Registry\n   IANA has created a new \"CDNI Logging\
    \ Field Names\" subregistry under\n   the \"Content Delivery Networks Interconnection\
    \ (CDNI) Parameters\"\n   registry.\n   This registry is intended to be shared\
    \ across the currently defined\n   record-type (i.e., cdni_http_request_v1) as\
    \ well as potentially other\n   CDNI Logging record-types that may be defined\
    \ in separate\n   specifications.  When a field from this registry is used by\
    \ another\n   CDNI Logging record-type, it is to be used with the exact semantics\n\
    \   and format specified in the document that registered this field and\n   that\
    \ is identified in the Reference column of the registry.  If\n   another CDNI\
    \ Logging record-type requires a field with semantics that\n   are not strictly\
    \ identical, or a format that is not strictly\n   identical, then this new field\
    \ is to be registered in the registry\n   with a different field name.  When a\
    \ field from this registry is used\n   by another CDNI Logging record-type, it\
    \ can be used with different\n   occurrence rules.\n   The initial contents of\
    \ the \"CDNI Logging Fields Names\" registry\n   comprise the names of the CDNI\
    \ Logging fields specified in\n   Section 3.4 of the present document and are\
    \ as follows:\n     +------------------------------------------+-----------+\n\
    \     | Field Name                               | Reference |\n     +------------------------------------------+-----------+\n\
    \     | date                                     | RFC 7937  |\n     | time  \
    \                                   | RFC 7937  |\n     | time-taken         \
    \                      | RFC 7937  |\n     | c-groupid                       \
    \         | RFC 7937  |\n     | s-ip                                     | RFC\
    \ 7937  |\n     | s-hostname                               | RFC 7937  |\n   \
    \  | s-port                                   | RFC 7937  |\n     | cs-method\
    \                                | RFC 7937  |\n     | cs-uri                \
    \                   | RFC 7937  |\n     | u-uri                              \
    \      | RFC 7937  |\n     | protocol                                 | RFC 7937\
    \  |\n     | sc-status                                | RFC 7937  |\n     | sc-total-bytes\
    \                           | RFC 7937  |\n     | sc-entity-bytes            \
    \              | RFC 7937  |\n     | cs(insert_HTTP_header_name_here)        \
    \ | RFC 7937  |\n     | sc(insert_HTTP_header_name_here)         | RFC 7937  |\n\
    \     | s-ccid                                   | RFC 7937  |\n     | s-sid \
    \                                   | RFC 7937  |\n     | s-cached           \
    \                      | RFC 7937  |\n     +------------------------------------------+-----------+\n\
    \               Figure 12: CDNI Logging Field Names Registry\n   Within the registry,\
    \ names are to be allocated by IANA according to\n   the \"Specification Required\"\
    \ policy specified in [RFC5226].  Field\n   names are to be allocated by IANA\
    \ with a format of NHTABSTRING (see\n   Section 3.1).  All field names defined\
    \ in the Logging File are case-\n   insensitive as per the basic ABNF ([RFC5234]).\n"
- title: 6.5.  CDNI Logging Payload Type
  contents:
  - "6.5.  CDNI Logging Payload Type\n   IANA has registered the following new Payload\
    \ Type in the \"CDNI\n   Payload Types\" registry for use with the application/cdni\
    \ MIME media\n   type.\n                    +----------------------+---------------+\n\
    \                    | Payload Type         | Specification |\n              \
    \      +----------------------+---------------+\n                    | logging-file\
    \         | RFC 7937]     |\n                    +----------------------+---------------+\n\
    \                   Figure 13: CDNI Logging Payload Type\n   The purpose of the\
    \ logging-file payload type is to distinguish\n   between CDNI Logging Files and\
    \ other CDNI messages.\n   o  Interface: LI\n   o  Encoding: See Section 3.2,\
    \ Section 3.3, and Section 3.4\n"
- title: 7.  Security Considerations
  contents:
  - '7.  Security Considerations

    '
- title: 7.1.  Authentication, Authorization, Confidentiality, and Integrity
  contents:
  - "7.1.  Authentication, Authorization, Confidentiality, and Integrity\n      Protection\n\
    \   An implementation of the CDNI Logging interface MUST support TLS\n   transport\
    \ of the CDNI Logging feed (Section 4.1) and of the CDNI\n   Logging File pull\
    \ (Section 4.2) as per [RFC2818] and [RFC7230].\n   TLS MUST be used by the server-side\
    \ and the client-side of the CDNI\n   Logging feed, as well as the server-side\
    \ and the client-side of the\n   CDNI Logging File pull mechanism, including authentication\
    \ of the\n   remote end, unless alternate methods are used for ensuring the\n\
    \   security of the information exchanged over the LI interface (such as\n   setting\
    \ up an IPsec tunnel between the two CDNs or using a physically\n   secured internal\
    \ network between two CDNs that are owned by the same\n   corporate entity).\n\
    \   The use of TLS for transport of the CDNI Logging feed and CDNI\n   Logging\
    \ File pull allows:\n   o  the dCDN and uCDN to authenticate each other using\
    \ TLS client auth\n      and TLS server auth.\n   And, once they have mutually\
    \ authenticated each other, it allows:\n   o  the dCDN and uCDN to authorize each\
    \ other (to ensure they are\n      transmitting/receiving CDNI Logging File to/from\
    \ an authorized\n      CDN).\n   o  the CDNI Logging information to be transmitted\
    \ with\n      confidentiality.\n   o  the integrity of the CDNI Logging information\
    \ to be protected\n      during the exchange.\n   When TLS is used, the general\
    \ TLS usage guidance in [RFC7525] MUST be\n   followed.\n   The SHA256-hash directive\
    \ inside the CDNI Logging File provides\n   additional integrity protection, this\
    \ time targeting potential\n   corruption of the CDNI Logging information during\
    \ the CDNI Logging\n   File generation, storage, or exchange.  This mechanism\
    \ does not\n   itself allow restoration of the corrupted CDNI Logging information,\n\
    \   but it allows detection of such corruption, and therefore triggering\n   of\
    \ appropriate corrective actions (e.g., discard of corrupted\n   information,\
    \ and attempt to re-obtain the CDNI Logging information).\n   Note that the SHA256-hash\
    \ does not protect against tampering by a\n   third party, since such a third\
    \ party could have recomputed and\n   updated the SHA256-hash after tampering.\
    \  Protection against third-\n   party tampering, when the CDNI Logging File is\
    \ communicated over the\n   CDN Logging interface, can be achieved as discussed\
    \ above through the\n   use of TLS.\n"
- title: 7.2.  Denial of Service
  contents:
  - "7.2.  Denial of Service\n   This document does not define a specific mechanism\
    \ to protect against\n   Denial-of-Service (DoS) attacks on the Logging interface.\
    \  However,\n   the CDNI Logging feed and CDNI Logging pull endpoints are typically\n\
    \   to be accessed only by a very small number of valid remote endpoints,\n  \
    \ and therefore can be easily protected against DoS attacks through the\n   usual\
    \ conventional DoS-protection mechanisms such as firewalling or\n   use of Virtual\
    \ Private Networks (VPNs).\n   Protection of dCDN Surrogates against spoofed delivery\
    \ requests is\n   outside the scope of the CDNI Logging interface.\n"
- title: 7.3.  Privacy
  contents:
  - "7.3.  Privacy\n   CDNs have the opportunity to collect detailed information about\
    \ the\n   downloads performed by end users.  A dCDN is expected to collect such\n\
    \   information into CDNI Logging Files, which are then communicated to a\n  \
    \ uCDN.\n   Having detailed CDNI Logging information known by the dCDN in itself\n\
    \   does not represent a particular privacy concern since the dCDN is\n   obviously\
    \ fully aware of all information logged since it generated\n   the information\
    \ in the first place.\n   Transporting detailed CDNI Logging information over\
    \ the HTTP-based\n   CDNI Logging interface does not represent a particular privacy\n\
    \   concern because it is protected by the usual privacy-protection\n   mechanism\
    \ (e.g., TLS).\n   When HTTP redirection is used between the uCDN and the dCDN,\
    \ making\n   detailed CDNI Logging information known to the uCDN does not\n  \
    \ represent a particular privacy concern because the uCDN is already\n   exposed\
    \ at request redirection time to most of the information that\n   shows up as\
    \ CDNI Logging information (e.g., end-user IP address, URL,\n   and HTTP headers).\
    \  When DNS redirection is used between the uCDN and\n   the dCDN, there are cases\
    \ where there is no privacy concern in making\n   detailed CDNI logging information\
    \ known to the uCDN; this may be the\n   case, for example, where (1) it is considered\
    \ that because the uCDN\n   has the authority (with respect to the CSP) and control\
    \ on how the\n   requests are delivered (including whether it is served by the\
    \ uCDN\n   itself or by a dCDN), the uCDN is entitled to access all detailed\n\
    \   information related to the corresponding deliveries, and (2) there is\n  \
    \ no legal reason to restrict access by the uCDN to all this detailed\n   information.\
    \  Conversely still, when DNS redirection is used between\n   the uCDN and the\
    \ dCDN, there are cases where there may be some\n   privacy concern in making\
    \ detailed CDNI Logging information known to\n   the uCDN; this may be the case,\
    \ for example, because the uCDN is in a\n   different jurisdiction to the dCDN,\
    \ resulting is some legal reasons\n   to restrict access by the uCDN to all the\
    \ detailed information\n   related to the deliveries.  In this latter case, the\
    \ privacy concerns\n   can be taken into account when the uCDN and dCDN agree\
    \ about which\n   fields are to be conveyed inside the CDNI Logging Files and\
    \ which\n   privacy protection mechanism is to be used as discussed in the\n \
    \  definition of the c-groupid field specified in Section 3.4.1.\n   Another privacy\
    \ concern arises from the fact that large volumes of\n   detailed information\
    \ about content delivery to users, potentially\n   traceable back to individual\
    \ users, may be collected in CDNI Logging\n   Files.  These CDNI Logging Files\
    \ represent high-value targets, likely\n   concentrated in a fairly centralized\
    \ system (although the CDNI\n   Logging architecture does not mandate a particular\
    \ level of\n   centralization/distribution) and at risk of potential data\n  \
    \ exfiltration.  Note that the means of such data exfiltration are\n   beyond\
    \ the scope of the CDNI Logging interface itself (e.g.,\n   corrupted employee,\
    \ corrupted logging storage system, etc.).  This\n   privacy concern calls for\
    \ some protection.\n   The collection of large volumes of such information into\
    \ CDNI Logging\n   Files introduces potential end-users' privacy protection concerns.\n\
    \   Mechanisms to address these concerns are discussed in the definition\n   of\
    \ the c-groupid field specified in Section 3.4.1.\n   The use of mutually authenticated\
    \ TLS to establish a secure session\n   for the transport of the CDNI Logging\
    \ feed and CDNI Logging pull as\n   discussed in Section 7.1 provides confidentiality\
    \ while the Logging\n   information is in transit and prevents any party other\
    \ than the\n   authorized uCDN to gain access to the logging information.\n  \
    \ We also note that the query string portion of the URL that may be\n   conveyed\
    \ inside the cs-uri and u-uri fields of CDNI Logging Files, or\n   the HTTP cookies(\
    \ [RFC6265]) that may be conveyed as part of the\n   cs(<HTTP-header-name>) field\
    \ of CDNI Logging Files, may contain\n   personal information or information that\
    \ can be exploited to derive\n   personal information.  Where this is a concern,\
    \ the CDNI Logging\n   interface specification allows the dCDN to not include\
    \ the cs-uri and\n   to include a u-uri that removes (or hides) the sensitive\
    \ part of the\n   query string and allows the dCDN to not include the cs(<HTTP-header-\n\
    \   name>) fields corresponding to HTTP headers associated with cookies.\n"
- title: 8.  References
  contents:
  - '8.  References

    '
- title: 8.1.  Normative References
  contents:
  - "8.1.  Normative References\n   [AES]      NIST, \"Advanced Encryption Standard\
    \ (AES)\", National\n              Institute of Standards and Technology FIPS\
    \ 197, November\n              2001, <http://csrc.nist.gov/publications/fips/fips197/\n\
    \              fips-197.pdf>.\n   [GCM]      NIST, \"Recommendation for Block\
    \ Cipher Modes of Operation:\n              Galois/Counter Mode (GCM) and GMAC\"\
    , National Institute of\n              Standards and Technology SP 800-38D,\n\
    \              DOI 10.6028/NIST.SP.800-38D, November 2007,\n              <http://csrc.nist.gov/publications/nistpubs/800-38D/\n\
    \              SP-800-38D.pdf>.\n   [RFC2119]  Bradner, S., \"Key words for use\
    \ in RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119,\n\
    \              DOI 10.17487/RFC2119, March 1997,\n              <http://www.rfc-editor.org/info/rfc2119>.\n\
    \   [RFC3339]  Klyne, G. and C. Newman, \"Date and Time on the Internet:\n   \
    \           Timestamps\", RFC 3339, DOI 10.17487/RFC3339, July 2002,\n       \
    \       <http://www.rfc-editor.org/info/rfc3339>.\n   [RFC3986]  Berners-Lee,\
    \ T., Fielding, R., and L. Masinter, \"Uniform\n              Resource Identifier\
    \ (URI): Generic Syntax\", STD 66,\n              RFC 3986, DOI 10.17487/RFC3986,\
    \ January 2005,\n              <http://www.rfc-editor.org/info/rfc3986>.\n   [RFC4122]\
    \  Leach, P., Mealling, M., and R. Salz, \"A Universally\n              Unique\
    \ IDentifier (UUID) URN Namespace\", RFC 4122,\n              DOI 10.17487/RFC4122,\
    \ July 2005,\n              <http://www.rfc-editor.org/info/rfc4122>.\n   [RFC4287]\
    \  Nottingham, M., Ed. and R. Sayre, Ed., \"The Atom\n              Syndication\
    \ Format\", RFC 4287, DOI 10.17487/RFC4287,\n              December 2005, <http://www.rfc-editor.org/info/rfc4287>.\n\
    \   [RFC4648]  Josefsson, S., \"The Base16, Base32, and Base64 Data\n        \
    \      Encodings\", RFC 4648, DOI 10.17487/RFC4648, October 2006,\n          \
    \    <http://www.rfc-editor.org/info/rfc4648>.\n   [RFC5005]  Nottingham, M.,\
    \ \"Feed Paging and Archiving\", RFC 5005,\n              DOI 10.17487/RFC5005,\
    \ September 2007,\n              <http://www.rfc-editor.org/info/rfc5005>.\n \
    \  [RFC5226]  Narten, T. and H. Alvestrand, \"Guidelines for Writing an\n    \
    \          IANA Considerations Section in RFCs\", BCP 26, RFC 5226,\n        \
    \      DOI 10.17487/RFC5226, May 2008,\n              <http://www.rfc-editor.org/info/rfc5226>.\n\
    \   [RFC5234]  Crocker, D., Ed. and P. Overell, \"Augmented BNF for Syntax\n \
    \             Specifications: ABNF\", STD 68, RFC 5234,\n              DOI 10.17487/RFC5234,\
    \ January 2008,\n              <http://www.rfc-editor.org/info/rfc5234>.\n   [RFC7230]\
    \  Fielding, R., Ed. and J. Reschke, Ed., \"Hypertext Transfer\n             \
    \ Protocol (HTTP/1.1): Message Syntax and Routing\",\n              RFC 7230,\
    \ DOI 10.17487/RFC7230, June 2014,\n              <http://www.rfc-editor.org/info/rfc7230>.\n\
    \   [RFC7231]  Fielding, R., Ed. and J. Reschke, Ed., \"Hypertext Transfer\n \
    \             Protocol (HTTP/1.1): Semantics and Content\", RFC 7231,\n      \
    \        DOI 10.17487/RFC7231, June 2014,\n              <http://www.rfc-editor.org/info/rfc7231>.\n\
    \   [RFC7232]  Fielding, R., Ed. and J. Reschke, Ed., \"Hypertext Transfer\n \
    \             Protocol (HTTP/1.1): Conditional Requests\", RFC 7232,\n       \
    \       DOI 10.17487/RFC7232, June 2014,\n              <http://www.rfc-editor.org/info/rfc7232>.\n\
    \   [RFC7233]  Fielding, R., Ed., Lafon, Y., Ed., and J. Reschke, Ed.,\n     \
    \         \"Hypertext Transfer Protocol (HTTP/1.1): Range Requests\",\n      \
    \        RFC 7233, DOI 10.17487/RFC7233, June 2014,\n              <http://www.rfc-editor.org/info/rfc7233>.\n\
    \   [RFC7234]  Fielding, R., Ed., Nottingham, M., Ed., and J. Reschke,\n     \
    \         Ed., \"Hypertext Transfer Protocol (HTTP/1.1): Caching\",\n        \
    \      RFC 7234, DOI 10.17487/RFC7234, June 2014,\n              <http://www.rfc-editor.org/info/rfc7234>.\n\
    \   [RFC7235]  Fielding, R., Ed. and J. Reschke, Ed., \"Hypertext Transfer\n \
    \             Protocol (HTTP/1.1): Authentication\", RFC 7235,\n             \
    \ DOI 10.17487/RFC7235, June 2014,\n              <http://www.rfc-editor.org/info/rfc7235>.\n\
    \   [RFC7525]  Sheffer, Y., Holz, R., and P. Saint-Andre,\n              \"Recommendations\
    \ for Secure Use of Transport Layer\n              Security (TLS) and Datagram\
    \ Transport Layer Security\n              (DTLS)\", BCP 195, RFC 7525, DOI 10.17487/RFC7525,\
    \ May\n              2015, <http://www.rfc-editor.org/info/rfc7525>.\n   [RFC7540]\
    \  Belshe, M., Peon, R., and M. Thomson, Ed., \"Hypertext\n              Transfer\
    \ Protocol Version 2 (HTTP/2)\", RFC 7540,\n              DOI 10.17487/RFC7540,\
    \ May 2015,\n              <http://www.rfc-editor.org/info/rfc7540>.\n   [SHA-3]\
    \    NIST, \"SHA-3 Standard: Permutation-Based Hash and\n              Extendable-Output\
    \ Functions\", National Institute of\n              Standards and Technology FIPS\
    \ 202,\n              DOI 10.6028/NIST.FIPS.202, August 2015,\n              <http://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.202.pdf>.\n"
- title: 8.2.  Informative References
  contents:
  - "8.2.  Informative References\n   [ATOMPUB]  Snell, J., \"Atom Link Extensions\"\
    , Work in Progress,\n              draft-snell-atompub-link-extensions-09, June\
    \ 2012.\n   [CDNI-META]\n              Niven-Jenkins, B., Murray, R., Caulfield,\
    \ M., and K. Ma,\n              \"CDN Interconnection Metadata\", Work in Progress,\n\
    \              draft-ietf-cdni-metadata-20, August 2016.\n   [CHAR_SET] IANA,\
    \ \"Character Sets\",\n              <http://www.iana.org/assignments/character-sets>.\n\
    \   [ELF]      Phillip M. Hallam-Baker, and Brian Behlendorf, \"Extended\n   \
    \           Log File Format\", W3C Working Draft, WD-logfile-960323,\n       \
    \       <http://www.w3.org/TR/WD-logfile.html>.\n   [RFC1945]  Berners-Lee, T.,\
    \ Fielding, R., and H. Frystyk, \"Hypertext\n              Transfer Protocol --\
    \ HTTP/1.0\", RFC 1945,\n              DOI 10.17487/RFC1945, May 1996,\n     \
    \         <http://www.rfc-editor.org/info/rfc1945>.\n   [RFC2818]  Rescorla, E.,\
    \ \"HTTP Over TLS\", RFC 2818,\n              DOI 10.17487/RFC2818, May 2000,\n\
    \              <http://www.rfc-editor.org/info/rfc2818>.\n   [RFC5869]  Krawczyk,\
    \ H. and P. Eronen, \"HMAC-based Extract-and-Expand\n              Key Derivation\
    \ Function (HKDF)\", RFC 5869,\n              DOI 10.17487/RFC5869, May 2010,\n\
    \              <http://www.rfc-editor.org/info/rfc5869>.\n   [RFC6234]  Eastlake\
    \ 3rd, D. and T. Hansen, \"US Secure Hash Algorithms\n              (SHA and SHA-based\
    \ HMAC and HKDF)\", RFC 6234,\n              DOI 10.17487/RFC6234, May 2011,\n\
    \              <http://www.rfc-editor.org/info/rfc6234>.\n   [RFC6265]  Barth,\
    \ A., \"HTTP State Management Mechanism\", RFC 6265,\n              DOI 10.17487/RFC6265,\
    \ April 2011,\n              <http://www.rfc-editor.org/info/rfc6265>.\n   [RFC6707]\
    \  Niven-Jenkins, B., Le Faucheur, F., and N. Bitar, \"Content\n             \
    \ Distribution Network Interconnection (CDNI) Problem\n              Statement\"\
    , RFC 6707, DOI 10.17487/RFC6707, September\n              2012, <http://www.rfc-editor.org/info/rfc6707>.\n\
    \   [RFC6770]  Bertrand, G., Ed., Stephan, E., Burbridge, T., Eardley,\n     \
    \         P., Ma, K., and G. Watson, \"Use Cases for Content Delivery\n      \
    \        Network Interconnection\", RFC 6770, DOI 10.17487/RFC6770,\n        \
    \      November 2012, <http://www.rfc-editor.org/info/rfc6770>.\n   [RFC6983]\
    \  van Brandenburg, R., van Deventer, O., Le Faucheur, F.,\n              and\
    \ K. Leung, \"Models for HTTP-Adaptive-Streaming-Aware\n              Content\
    \ Distribution Network Interconnection (CDNI)\",\n              RFC 6983, DOI\
    \ 10.17487/RFC6983, July 2013,\n              <http://www.rfc-editor.org/info/rfc6983>.\n\
    \   [RFC7336]  Peterson, L., Davie, B., and R. van Brandenburg, Ed.,\n       \
    \       \"Framework for Content Distribution Network\n              Interconnection\
    \ (CDNI)\", RFC 7336, DOI 10.17487/RFC7336,\n              August 2014, <http://www.rfc-editor.org/info/rfc7336>.\n\
    \   [RFC7337]  Leung, K., Ed. and Y. Lee, Ed., \"Content Distribution\n      \
    \        Network Interconnection (CDNI) Requirements\", RFC 7337,\n          \
    \    DOI 10.17487/RFC7337, August 2014,\n              <http://www.rfc-editor.org/info/rfc7337>.\n\
    \   [RFC7736]  Ma, K., \"Content Delivery Network Interconnection (CDNI)\n   \
    \           Media Type Registration\", RFC 7736, DOI 10.17487/RFC7736,\n     \
    \         December 2015, <http://www.rfc-editor.org/info/rfc7736>.\n   [TLS-1.3]\
    \  Rescorla, E., \"The Transport Layer Security (TLS) Protocol\n             \
    \ Version 1.3\", Work in Progress, draft-ietf-tls-tls13-15,\n              August\
    \ 2016.\n"
- title: Acknowledgments
  contents:
  - "Acknowledgments\n   This document borrows from the W3C Extended Log Format [ELF].\n\
    \   Rob Murray significantly contributed into the text of Section 4.1.\n   The\
    \ authors thank Ben Niven-Jenkins, Kevin Ma, David Mandelberg, and\n   Ray van\
    \ Brandenburg for their ongoing input.\n   Brian Trammel and Rich Salz made significant\
    \ contributions into\n   making this interface privacy-friendly.\n   Finally,\
    \ we also thank Sebastien Cubaud, Pawel Grochocki, Christian\n   Jacquenet, Yannick\
    \ Le Louedec, Anne Marrec, Emile Stephan, Fabio\n   Costa, Sara Oueslati, Yvan\
    \ Massot, Renaud Edel, Joel Favier, and the\n   contributors of the EU FP7 OCEAN\
    \ project for their input in the early\n   draft versions of this document.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Francois Le Faucheur (editor)\n   France\n   Phone: +33\
    \ 6 19 98 50 90\n   Email: flefauch@gmail.com\n   Gilles Bertrand (editor)\n \
    \  Phone: +41 76 675 91 44\n   Email: gilbertrand@gmail.com\n   Iuniana Oprescu\
    \ (editor)\n   France\n   Email: iuniana.oprescu@gmail.com\n   Roy Peterkofsky\n\
    \   Google Inc.\n   345 Spear St, 4th Floor\n   San Francisco  CA 94105\n   United\
    \ States of America\n   Email: peterkofsky@google.com\n"
