- title: __initial_text__
  contents:
  - ' A Means for Expressing Location Information in the Domain Name System

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo defines an Experimental Protocol for the Internet\n\
    \   community.  This memo does not specify an Internet standard of any\n   kind.\
    \  Discussion and suggestions for improvement are requested.\n   Distribution\
    \ of this memo is unlimited.\n"
- title: 1. Abstract
  contents:
  - "1. Abstract\n   This memo defines a new DNS RR type for experimental purposes.\
    \  This\n   RFC describes a mechanism to allow the DNS to carry location\n   information\
    \ about hosts, networks, and subnets.  Such information for\n   a small subset\
    \ of hosts is currently contained in the flat-file UUCP\n   maps.  However, just\
    \ as the DNS replaced the use of HOSTS.TXT to\n   carry host and network address\
    \ information, it is possible to replace\n   the UUCP maps as carriers of location\
    \ information.\n   This RFC defines the format of a new Resource Record (RR) for\
    \ the\n   Domain Name System (DNS), and reserves a corresponding DNS type\n  \
    \ mnemonic (LOC) and numerical code (29).\n   This RFC assumes that the reader\
    \ is familiar with the DNS [RFC 1034,\n   RFC 1035].  The data shown in our examples\
    \ is for pedagogical use and\n   does not necessarily reflect the real Internet.\n"
- title: 2. RDATA Format
  contents:
  - "2. RDATA Format\n       MSB                                           LSB\n \
    \      +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n      0|        VERSION\
    \        |         SIZE          |\n       +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n\
    \      2|       HORIZ PRE       |       VERT PRE        |\n       +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n\
    \      4|                   LATITUDE                    |\n       +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n\
    \      6|                   LATITUDE                    |\n       +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n\
    \      8|                   LONGITUDE                   |\n       +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n\
    \     10|                   LONGITUDE                   |\n       +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n\
    \     12|                   ALTITUDE                    |\n       +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n\
    \     14|                   ALTITUDE                    |\n       +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n\
    \   (octet)\n"
- title: 'where:'
  contents:
  - 'where:

    '
- title: VERSION      Version number of the representation.  This must be zero.
  contents:
  - "VERSION      Version number of the representation.  This must be zero.\n    \
    \         Implementations are required to check this field and make\n        \
    \     no assumptions about the format of unrecognized versions.\n"
- title: SIZE         The diameter of a sphere enclosing the described entity, in
  contents:
  - "SIZE         The diameter of a sphere enclosing the described entity, in\n  \
    \           centimeters, expressed as a pair of four-bit unsigned\n          \
    \   integers, each ranging from zero to nine, with the most\n             significant\
    \ four bits representing the base and the second\n             number representing\
    \ the power of ten by which to multiply\n             the base.  This allows sizes\
    \ from 0e0 (<1cm) to 9e9\n             (90,000km) to be expressed.  This representation\
    \ was chosen\n             such that the hexadecimal representation can be read\
    \ by\n             eye; 0x15 = 1e5.  Four-bit values greater than 9 are\n    \
    \         undefined, as are values with a base of zero and a non-zero\n      \
    \       exponent.\n             Since 20000000m (represented by the value 0x29)\
    \ is greater\n             than the equatorial diameter of the WGS 84 ellipsoid\n\
    \             (12756274m), it is therefore suitable for use as a\n           \
    \  \"worldwide\" size.\n"
- title: HORIZ PRE    The horizontal precision of the data, in centimeters,
  contents:
  - "HORIZ PRE    The horizontal precision of the data, in centimeters,\n        \
    \     expressed using the same representation as SIZE.  This is\n            \
    \ the diameter of the horizontal \"circle of error\", rather\n             than\
    \ a \"plus or minus\" value.  (This was chosen to match\n             the interpretation\
    \ of SIZE; to get a \"plus or minus\" value,\n             divide by 2.)\n"
- title: VERT PRE     The vertical precision of the data, in centimeters,
  contents:
  - "VERT PRE     The vertical precision of the data, in centimeters,\n          \
    \   expressed using the sane representation as for SIZE.  This\n             is\
    \ the total potential vertical error, rather than a \"plus\n             or minus\"\
    \ value.  (This was chosen to match the\n             interpretation of SIZE;\
    \ to get a \"plus or minus\" value,\n             divide by 2.)  Note that if\
    \ altitude above or below sea\n             level is used as an approximation\
    \ for altitude relative to\n             the [WGS 84] ellipsoid, the precision\
    \ value should be\n             adjusted.\n"
- title: LATITUDE     The latitude of the center of the sphere described by the
  contents:
  - "LATITUDE     The latitude of the center of the sphere described by the\n    \
    \         SIZE field, expressed as a 32-bit integer, most significant\n      \
    \       octet first (network standard byte order), in thousandths\n          \
    \   of a second of arc.  2^31 represents the equator; numbers\n             above\
    \ that are north latitude.\n"
- title: LONGITUDE    The longitude of the center of the sphere described by the
  contents:
  - "LONGITUDE    The longitude of the center of the sphere described by the\n   \
    \          SIZE field, expressed as a 32-bit integer, most significant\n     \
    \        octet first (network standard byte order), in thousandths\n         \
    \    of a second of arc, rounded away from the prime meridian.\n             2^31\
    \ represents the prime meridian; numbers above that are\n             east longitude.\n"
- title: ALTITUDE     The altitude of the center of the sphere described by the
  contents:
  - "ALTITUDE     The altitude of the center of the sphere described by the\n    \
    \         SIZE field, expressed as a 32-bit integer, most significant\n      \
    \       octet first (network standard byte order), in centimeters,\n         \
    \    from a base of 100,000m below the [WGS 84] reference\n             spheroid\
    \ used by GPS (semimajor axis a=6378137.0,\n             reciprocal flattening\
    \ rf=298.257223563).  Altitude above\n             (or below) sea level may be\
    \ used as an approximation of\n             altitude relative to the the [WGS\
    \ 84] spheroid, though due\n             to the Earth's surface not being a perfect\
    \ spheroid, there\n             will be differences.  (For example, the geoid\
    \ (which sea\n             level approximates) for the continental US ranges from\
    \ 10\n             meters to 50 meters below the [WGS 84] spheroid.\n        \
    \     Adjustments to ALTITUDE and/or VERT PRE will be necessary\n            \
    \ in most cases.  The Defense Mapping Agency publishes geoid\n             height\
    \ values relative to the [WGS 84] ellipsoid.\n"
- title: 3. Master File Format
  contents:
  - "3. Master File Format\n   The LOC record is expressed in a master file in the\
    \ following format:\n   <owner> <TTL> <class> LOC ( d1 [m1 [s1]] {\"N\"|\"S\"\
    } d2 [m2 [s2]]\n                               {\"E\"|\"W\"} alt[\"m\"] [siz[\"\
    m\"] [hp[\"m\"]\n                               [vp[\"m\"]]]] )\n   (The parentheses\
    \ are used for multi-line data as specified in [RFC\n   1035] section 5.1.)\n\
    \   where:\n       d1:     [0 .. 90]            (degrees latitude)\n       d2:\
    \     [0 .. 180]           (degrees longitude)\n       m1, m2: [0 .. 59]     \
    \       (minutes latitude/longitude)\n       s1, s2: [0 .. 59.999]        (seconds\
    \ latitude/longitude)\n       alt:    [-100000.00 .. 42849672.95] BY .01 (altitude\
    \ in meters)\n       siz, hp, vp: [0 .. 90000000.00] (size/precision in meters)\n\
    \   If omitted, minutes and seconds default to zero, size defaults to 1m,\n  \
    \ horizontal precision defaults to 10000m, and vertical precision\n   defaults\
    \ to 10m.  These defaults are chosen to represent typical\n   ZIP/postal code\
    \ area sizes, since it is often easy to find\n   approximate geographical location\
    \ by ZIP/postal code.\n"
- title: 4. Example Data
  contents:
  - '4. Example Data

    '
- title: ;;;
  contents:
  - ';;;

    '
- title: ;;; note that these data would not all appear in one zone file
  contents:
  - ';;; note that these data would not all appear in one zone file

    '
- title: ;;;
  contents:
  - ';;;

    '
- title: ;; network LOC RR derived from ZIP data.  note use of precision defaults
  contents:
  - ';; network LOC RR derived from ZIP data.  note use of precision defaults

    '
- title: cambridge-net.kei.com.        LOC   42 21 54 N 71 06 18 W -24m 30m
  contents:
  - 'cambridge-net.kei.com.        LOC   42 21 54 N 71 06 18 W -24m 30m

    '
- title: ;; higher-precision host LOC RR.  note use of vertical precision default
  contents:
  - ';; higher-precision host LOC RR.  note use of vertical precision default

    '
- title: loiosh.kei.com.               LOC   42 21 43.952 N 71 5 6.344 W
  contents:
  - "loiosh.kei.com.               LOC   42 21 43.952 N 71 5 6.344 W\n           \
    \                         -24m 1m 200m\n"
- title: pipex.net.                    LOC   52 14 05 N 00 08 50 E 10m
  contents:
  - 'pipex.net.                    LOC   52 14 05 N 00 08 50 E 10m

    '
- title: curtin.edu.au.                LOC   32 7 19 S 116 2 25 E 10m
  contents:
  - 'curtin.edu.au.                LOC   32 7 19 S 116 2 25 E 10m

    '
- title: rwy04L.logan-airport.boston.  LOC   42 21 28.764 N 71 00 51.617 W
  contents:
  - "rwy04L.logan-airport.boston.  LOC   42 21 28.764 N 71 00 51.617 W\n         \
    \                           -44m 2000m\n"
- title: 5. Application use of the LOC RR
  contents:
  - '5. Application use of the LOC RR

    '
- title: 5.1 Suggested Uses
  contents:
  - "5.1 Suggested Uses\n   Some uses for the LOC RR have already been suggested,\
    \ including the\n   USENET backbone flow maps, a \"visual traceroute\" application\
    \ showing\n   the geographical path of an IP packet, and network management\n\
    \   applications that could use LOC RRs to generate a map of hosts and\n   routers\
    \ being managed.\n"
- title: 5.2 Search Algorithms
  contents:
  - "5.2 Search Algorithms\n   This section specifies how to use the DNS to translate\
    \ domain names\n   and/or IP addresses into location information.\n   If an application\
    \ wishes to have a \"fallback\" behavior, displaying a\n   less precise or larger\
    \ area when a host does not have an associated\n   LOC RR, it MAY support use\
    \ of the algorithm in section 5.2.3, as\n   noted in sections 5.2.1 and 5.2.2.\
    \  If fallback is desired, this\n   behaviour is the RECOMMENDED default, but\
    \ in some cases it may need\n   to be modified based on the specific requirements\
    \ of the application\n   involved.\n   This search algorithm is designed to allow\
    \ network administrators to\n   specify the location of a network or subnet without\
    \ requiring LOC RR\n   data for each individual host.  For example, a computer\
    \ lab with 24\n   workstations, all of which are on the same subnet and in basically\n\
    \   the same location, would only need a LOC RR for the subnet.\n   (However,\
    \ if the file server's location has been more precisely\n   measured, a separate\
    \ LOC RR for it can be placed in the DNS.)\n"
- title: 5.2.1 Searching by Name
  contents:
  - "5.2.1 Searching by Name\n   If the application is beginning with a name, rather\
    \ than an IP\n   address (as the USENET backbone flow maps do), it MUST check\
    \ for a\n   LOC RR associated with that name.  (CNAME records should be followed\n\
    \   as for any other RR type.)\n   If there is no LOC RR for that name, all A\
    \ records (if any)\n   associated with the name MAY be checked for network (or\
    \ subnet) LOC\n   RRs using the \"Searching by Network or Subnet\" algorithm (5.2.3).\
    \  If\n   multiple A records exist and have associated network or subnet LOC\n\
    \   RRs, the application may choose to use any, some, or all of the LOC\n   RRs\
    \ found, possibly in combination.  It is suggested that multi-homed\n   hosts\
    \ have LOC RRs for their name in the DNS to avoid any ambiguity\n   in these cases.\n\
    \   Note that domain names that do not have associated A records must\n   have\
    \ a LOC RR associated with their name in order for location\n   information to\
    \ be accessible.\n"
- title: 5.2.2 Searching by Address
  contents:
  - "5.2.2 Searching by Address\n   If the application is beginning with an IP address\
    \ (as a \"visual\n   traceroute\" application might be) it MUST first map the\
    \ address to a\n   name using the IN-ADDR.ARPA namespace (see [RFC 1034], section\n\
    \   5.2.1), then check for a LOC RR associated with that name.\n   If there is\
    \ no LOC RR for the name, the address MAY be checked for\n   network (or subnet)\
    \ LOC RRs using the \"Searching by Network or\n   Subnet\" algorithm (5.2.3).\n"
- title: 5.2.3 Searching by Network or Subnet
  contents:
  - "5.2.3 Searching by Network or Subnet\n   Even if a host's name does not have\
    \ any associated LOC RRs, the\n   network(s) or subnet(s) it is on may.  If the\
    \ application wishes to\n   search for such less specific data, the following\
    \ algorithm SHOULD be\n   followed to find a network or subnet LOC RR associated\
    \ with the IP\n   address.  This algorithm is adapted slightly from that specified\
    \ in\n   [RFC 1101], sections 4.3 and 4.4.\n   Since subnet LOC RRs are (if present)\
    \ more specific than network LOC\n   RRs, it is best to use them if available.\
    \  In order to do so, we\n   build a stack of network and subnet names found while\
    \ performing the\n   [RFC 1101] search, then work our way down the stack until\
    \ a LOC RR is\n   found.\n   1. create a host-zero address using the network portion\
    \ of the IP\n      address (one, two, or three bytes for class A, B, or C networks,\n\
    \      respectively).  For example, for the host 128.9.2.17, on the class\n  \
    \    B network 128.9, this would result in the address \"128.9.0.0\".\n   2. Reverse\
    \ the octets, suffix IN-ADDR.ARPA, and query for PTR and A\n      records.  Retrieve:\n\
    \               0.0.9.128.IN-ADDR.ARPA.  PTR    isi-net.isi.edu.\n           \
    \                             A      255.255.255.0\n      Push the name \"isi-net.isi.edu\"\
    \ onto the stack of names to be\n      searched for LOC RRs later.\n   3. Since\
    \ an A RR was found, repeat using mask from RR\n      (255.255.255.0), constructing\
    \ a query for 0.2.9.128.IN-ADDR.ARPA.\n      Retrieve:\n               0.2.9.128.IN-ADDR.ARPA.\
    \  PTR    div2-subnet.isi.edu.\n                                        A    \
    \  255.255.255.240\n      Push the name \"div2-subnet.isi.edu\" onto the stack\
    \ of names to be\n      searched for LOC RRs later.\n   4. Since another A RR\
    \ was found, repeat using mask 255.255.255.240\n      (x'FFFFFFF0'), constructing\
    \ a query for 16.2.9.128.IN-ADDR.ARPA.\n      Retrieve:\n               16.2.9.128.IN-ADDR.ARPA.\
    \ PTR    inc-subsubnet.isi.edu.\n      Push the name \"inc-subsubnet.isi.edu\"\
    \ onto the stack of names to\n      be searched for LOC RRs later.\n   5. Since\
    \ no A RR is present at 16.2.9.128.IN-ADDR.ARPA., there are no\n      more subnet\
    \ levels to search.  We now pop the top name from the\n      stack and check for\
    \ an associated LOC RR.  Repeat until a LOC RR\n      is found.\n      In this\
    \ case, assume that inc-subsubnet.isi.edu does not have an\n      associated LOC\
    \ RR, but that div2-subnet.isi.edu does.  We will\n      then use div2-subnet.isi.edu's\
    \ LOC RR as an approximation of this\n      host's location.  (Note that even\
    \ if isi-net.isi.edu has a LOC RR,\n      it will not be used if a subnet also\
    \ has a LOC RR.)\n"
- title: 5.3 Applicability to non-IN Classes and non-IP Addresses
  contents:
  - "5.3 Applicability to non-IN Classes and non-IP Addresses\n   The LOC record is\
    \ defined for all RR classes, and may be used with\n   non-IN classes such as\
    \ HS and CH.  The semantics of such use are not\n   defined by this memo.\n  \
    \ The search algorithm in section 5.2.3 may be adapted to other\n   addressing\
    \ schemes by extending [RFC 1101]'s encoding of network\n   names to cover those\
    \ schemes.  Such extensions are not defined by\n   this memo.\n"
- title: 6. References
  contents:
  - "6. References\n   [RFC 1034] Mockapetris, P., \"Domain Names - Concepts and Facilities\"\
    ,\n              STD 13, RFC 1034, USC/Information Sciences Institute,\n     \
    \         November 1987.\n   [RFC 1035] Mockapetris, P., \"Domain Names - Implementation\
    \ and\n              Specification\", STD 13, RFC 1035, USC/Information Sciences\n\
    \              Institute, November 1987.\n   [RFC 1101] Mockapetris, P., \"DNS\
    \ Encoding of Network Names and Other\n              Types\", RFC 1101, USC/Information\
    \ Sciences Institute,\n              April 1989.\n   [WGS 84] United States Department\
    \ of Defense; DoD WGS-1984 - Its\n            Definition and Relationships with\
    \ Local Geodetic Systems;\n            Washington, D.C.; 1985; Report AD-A188\
    \ 815 DMA; 6127; 7-R-\n            138-R; CV, KV;\n"
- title: 7. Security Considerations
  contents:
  - "7. Security Considerations\n   High-precision LOC RR information could be used\
    \ to plan a penetration\n   of physical security, leading to potential denial-of-machine\
    \ attacks.\n   To avoid any appearance of suggesting this method to potential\n\
    \   attackers, we declined the opportunity to name this RR \"ICBM\".\n"
- title: 8. Authors' Addresses
  contents:
  - "8. Authors' Addresses\n   The authors as a group can be reached as <loc@pipex.net>.\n\
    \   Christopher Davis\n   Kapor Enterprises, Inc.\n   238 Main Street, Suite 400\n\
    \   Cambridge, MA 02142\n   Phone: +1 617 576 4532\n   EMail: ckd@kei.com\n  \
    \ Paul Vixie\n   Vixie Enterprises\n   Star Route Box 159A\n   Woodside, CA 94062\n\
    \   Phone: +1 415 747 0204\n   EMail: paul@vix.com\n   Tim Goodwin\n   Public\
    \ IP Exchange Ltd (PIPEX)\n   216 The Science Park\n   Cambridge CB4 4WA\n   UK\n\
    \   Phone: +44 1223 250250\n   EMail: tim@pipex.net\n   Ian Dickinson\n   FORE\
    \ Systems\n   2475 The Crescent\n   Solihull Parkway\n   Birmingham Business Park\n\
    \   B37 7YE\n   UK\n   Phone: +44 121 717 4444\n   EMail: idickins@fore.co.uk\n"
- title: 'Appendix A: Sample Conversion Routines'
  contents:
  - 'Appendix A: Sample Conversion Routines

    '
- title: /*
  contents:
  - "/*\n * routines to convert between on-the-wire RR format and zone file\n * format.\
    \  Does not contain conversion to/from decimal degrees;\n * divide or multiply\
    \ by 60*60*1000 for that.\n */\n"
- title: static unsigned int poweroften[10] = {1, 10, 100, 1000, 10000, 100000,
  contents:
  - "static unsigned int poweroften[10] = {1, 10, 100, 1000, 10000, 100000,\n    \
    \                             1000000,10000000,100000000,1000000000};\n"
- title: /* takes an XeY precision/size value, returns a string representation.*/
  contents:
  - '/* takes an XeY precision/size value, returns a string representation.*/

    '
- title: static const char *
  contents:
  - 'static const char *

    '
- title: precsize_ntoa(prec)
  contents:
  - "precsize_ntoa(prec)\n        u_int8_t prec;\n"
- title: '{'
  contents:
  - "{\n        static char retbuf[sizeof(\"90000000.00\")];\n        unsigned long\
    \ val;\n        int mantissa, exponent;\n        mantissa = (int)((prec >> 4)\
    \ & 0x0f) % 10;\n        exponent = (int)((prec >> 0) & 0x0f) % 10;\n        val\
    \ = mantissa * poweroften[exponent];\n        (void) sprintf(retbuf,\"%d.%.2d\"\
    , val/100, val%100);\n        return (retbuf);\n"
- title: '}'
  contents:
  - '}

    '
- title: /* converts ascii size/precision X * 10**Y(cm) to 0xXY. moves pointer.*/
  contents:
  - '/* converts ascii size/precision X * 10**Y(cm) to 0xXY. moves pointer.*/

    '
- title: static u_int8_t
  contents:
  - 'static u_int8_t

    '
- title: precsize_aton(strptr)
  contents:
  - "precsize_aton(strptr)\n        char **strptr;\n"
- title: '{'
  contents:
  - "{\n        unsigned int mval = 0, cmval = 0;\n        u_int8_t retval = 0;\n\
    \        register char *cp;\n        register int exponent;\n        register\
    \ int mantissa;\n        cp = *strptr;\n        while (isdigit(*cp))\n       \
    \         mval = mval * 10 + (*cp++ - '0');\n        if (*cp == '.') {       \
    \        /* centimeters */\n                cp++;\n                if (isdigit(*cp))\
    \ {\n                        cmval = (*cp++ - '0') * 10;\n                   \
    \     if (isdigit(*cp)) {\n                                cmval += (*cp++ - '0');\n\
    \                        }\n                }\n        }\n        cmval = (mval\
    \ * 100) + cmval;\n        for (exponent = 0; exponent < 9; exponent++)\n    \
    \            if (cmval < poweroften[exponent+1])\n                        break;\n\
    \        mantissa = cmval / poweroften[exponent];\n        if (mantissa > 9)\n\
    \                mantissa = 9;\n        retval = (mantissa << 4) | exponent;\n\
    \        *strptr = cp;\n        return (retval);\n"
- title: '}'
  contents:
  - '}

    '
- title: /* converts ascii lat/lon to unsigned encoded 32-bit number.
  contents:
  - "/* converts ascii lat/lon to unsigned encoded 32-bit number.\n *  moves pointer.\
    \ */\n"
- title: static u_int32_t
  contents:
  - 'static u_int32_t

    '
- title: latlon2ul(latlonstrptr,which)
  contents:
  - "latlon2ul(latlonstrptr,which)\n        char **latlonstrptr;\n        int *which;\n"
- title: '{'
  contents:
  - "{\n        register char *cp;\n        u_int32_t retval;\n        int deg = 0,\
    \ min = 0, secs = 0, secsfrac = 0;\n        cp = *latlonstrptr;\n        while\
    \ (isdigit(*cp))\n                deg = deg * 10 + (*cp++ - '0');\n        while\
    \ (isspace(*cp))\n                cp++;\n        if (!(isdigit(*cp)))\n      \
    \          goto fndhemi;\n        while (isdigit(*cp))\n                min =\
    \ min * 10 + (*cp++ - '0');\n        while (isspace(*cp))\n                cp++;\n\
    \        if (!(isdigit(*cp)))\n                goto fndhemi;\n        while (isdigit(*cp))\n\
    \                secs = secs * 10 + (*cp++ - '0');\n        if (*cp == '.') {\
    \               /* decimal seconds */\n                cp++;\n               \
    \ if (isdigit(*cp)) {\n                        secsfrac = (*cp++ - '0') * 100;\n\
    \                        if (isdigit(*cp)) {\n                               \
    \ secsfrac += (*cp++ - '0') * 10;\n                                if (isdigit(*cp))\
    \ {\n                                        secsfrac += (*cp++ - '0');\n    \
    \                            }\n                        }\n                }\n\
    \        }\n        while (!isspace(*cp))   /* if any trailing garbage */\n  \
    \              cp++;\n        while (isspace(*cp))\n                cp++;\n fndhemi:\n\
    \        switch (*cp) {\n        case 'N': case 'n':\n        case 'E': case 'e':\n\
    \                retval = ((unsigned)1<<31)\n                        + (((((deg\
    \ * 60) + min) * 60) + secs) * 1000)\n                        + secsfrac;\n  \
    \              break;\n        case 'S': case 's':\n        case 'W': case 'w':\n\
    \                retval = ((unsigned)1<<31)\n                        - (((((deg\
    \ * 60) + min) * 60) + secs) * 1000)\n                        - secsfrac;\n  \
    \              break;\n        default:\n                retval = 0;     /* invalid\
    \ value -- indicates error */\n                break;\n        }\n        switch\
    \ (*cp) {\n        case 'N': case 'n':\n        case 'S': case 's':\n        \
    \        *which = 1;     /* latitude */\n                break;\n        case\
    \ 'E': case 'e':\n        case 'W': case 'w':\n                *which = 2;   \
    \  /* longitude */\n                break;\n        default:\n               \
    \ *which = 0;     /* error */\n                break;\n        }\n        cp++;\
    \                   /* skip the hemisphere */\n        while (!isspace(*cp)) \
    \  /* if any trailing garbage */\n                cp++;\n        while (isspace(*cp))\
    \    /* move to next field */\n                cp++;\n        *latlonstrptr =\
    \ cp;\n        return (retval);\n"
- title: '}'
  contents:
  - '}

    '
- title: /* converts a zone file representation in a string to an RDATA
  contents:
  - "/* converts a zone file representation in a string to an RDATA\n * on-the-wire\
    \ representation. */\n"
- title: u_int32_t
  contents:
  - 'u_int32_t

    '
- title: loc_aton(ascii, binary)
  contents:
  - "loc_aton(ascii, binary)\n        const char *ascii;\n        u_char *binary;\n"
- title: '{'
  contents:
  - "{\n        const char *cp, *maxcp;\n        u_char *bcp;\n        u_int32_t latit\
    \ = 0, longit = 0, alt = 0;\n        u_int32_t lltemp1 = 0, lltemp2 = 0;\n   \
    \     int altmeters = 0, altfrac = 0, altsign = 1;\n        u_int8_t hp = 0x16;\
    \    /* default = 1e6 cm = 10000.00m = 10km */\n        u_int8_t vp = 0x13;  \
    \  /* default = 1e3 cm = 10.00m */\n        u_int8_t siz = 0x12;   /* default\
    \ = 1e2 cm = 1.00m */\n        int which1 = 0, which2 = 0;\n        cp = ascii;\n\
    \        maxcp = cp + strlen(ascii);\n        lltemp1 = latlon2ul(&cp, &which1);\n\
    \        lltemp2 = latlon2ul(&cp, &which2);\n        switch (which1 + which2)\
    \ {\n        case 3:                 /* 1 + 2, the only valid combination */\n\
    \                if ((which1 == 1) && (which2 == 2)) { /* normal case */\n   \
    \                     latit = lltemp1;\n                        longit = lltemp2;\n\
    \                } else if ((which1 == 2) && (which2 == 1)) {/*reversed*/\n  \
    \                      longit = lltemp1;\n                        latit = lltemp2;\n\
    \                } else {        /* some kind of brokenness */\n             \
    \           return 0;\n                }\n                break;\n        default:\
    \                /* we didn't get one of each */\n                return 0;\n\
    \        }\n        /* altitude */\n        if (*cp == '-') {\n              \
    \  altsign = -1;\n                cp++;\n        }\n        if (*cp == '+')\n\
    \                cp++;\n        while (isdigit(*cp))\n                altmeters\
    \ = altmeters * 10 + (*cp++ - '0');\n        if (*cp == '.') {               /*\
    \ decimal meters */\n                cp++;\n                if (isdigit(*cp))\
    \ {\n                        altfrac = (*cp++ - '0') * 10;\n                 \
    \       if (isdigit(*cp)) {\n                                altfrac += (*cp++\
    \ - '0');\n                        }\n                }\n        }\n        alt\
    \ = (10000000 + (altsign * (altmeters * 100 + altfrac)));\n        while (!isspace(*cp)\
    \ && (cp < maxcp))\n                                           /* if trailing\
    \ garbage or m */\n                cp++;\n        while (isspace(*cp) && (cp <\
    \ maxcp))\n                cp++;\n        if (cp >= maxcp)\n                goto\
    \ defaults;\n        siz = precsize_aton(&cp);\n        while (!isspace(*cp) &&\
    \ (cp < maxcp))/*if trailing garbage or m*/\n                cp++;\n        while\
    \ (isspace(*cp) && (cp < maxcp))\n                cp++;\n        if (cp >= maxcp)\n\
    \                goto defaults;\n        hp = precsize_aton(&cp);\n        while\
    \ (!isspace(*cp) && (cp < maxcp))/*if trailing garbage or m*/\n              \
    \  cp++;\n        while (isspace(*cp) && (cp < maxcp))\n                cp++;\n\
    \        if (cp >= maxcp)\n                goto defaults;\n        vp = precsize_aton(&cp);\n\
    \ defaults:\n        bcp = binary;\n        *bcp++ = (u_int8_t) 0;  /* version\
    \ byte */\n        *bcp++ = siz;\n        *bcp++ = hp;\n        *bcp++ = vp;\n\
    \        PUTLONG(latit,bcp);\n        PUTLONG(longit,bcp);\n        PUTLONG(alt,bcp);\n\
    \        return (16);            /* size of RR in octets */\n"
- title: '}'
  contents:
  - '}

    '
- title: /* takes an on-the-wire LOC RR and prints it in zone file
  contents:
  - "/* takes an on-the-wire LOC RR and prints it in zone file\n * (human readable)\
    \ format. */\n"
- title: char *
  contents:
  - 'char *

    '
- title: loc_ntoa(binary,ascii)
  contents:
  - "loc_ntoa(binary,ascii)\n        const u_char *binary;\n        char *ascii;\n"
- title: '{'
  contents:
  - "{\n        static char tmpbuf[255*3];\n        register char *cp;\n        register\
    \ const u_char *rcp;\n        int latdeg, latmin, latsec, latsecfrac;\n      \
    \  int longdeg, longmin, longsec, longsecfrac;\n        char northsouth, eastwest;\n\
    \        int altmeters, altfrac, altsign;\n        const int referencealt = 100000\
    \ * 100;\n        int32_t latval, longval, altval;\n        u_int32_t templ;\n\
    \        u_int8_t sizeval, hpval, vpval, versionval;\n        char *sizestr, *hpstr,\
    \ *vpstr;\n        rcp = binary;\n        if (ascii)\n                cp = ascii;\n\
    \        else {\n                cp = tmpbuf;\n        }\n        versionval =\
    \ *rcp++;\n        if (versionval) {\n                sprintf(cp,\"; error: unknown\
    \ LOC RR version\");\n                return (cp);\n        }\n        sizeval\
    \ = *rcp++;\n        hpval = *rcp++;\n        vpval = *rcp++;\n        GETLONG(templ,rcp);\n\
    \        latval = (templ - ((unsigned)1<<31));\n        GETLONG(templ,rcp);\n\
    \        longval = (templ - ((unsigned)1<<31));\n        GETLONG(templ,rcp);\n\
    \        if (templ < referencealt) { /* below WGS 84 spheroid */\n           \
    \     altval = referencealt - templ;\n                altsign = -1;\n        }\
    \ else {\n                altval = templ - referencealt;\n                altsign\
    \ = 1;\n        }\n        if (latval < 0) {\n                northsouth = 'S';\n\
    \                latval = -latval;\n        }\n        else\n                northsouth\
    \ = 'N';\n        latsecfrac = latval % 1000;\n        latval = latval / 1000;\n\
    \        latsec = latval % 60;\n        latval = latval / 60;\n        latmin\
    \ = latval % 60;\n        latval = latval / 60;\n        latdeg = latval;\n  \
    \      if (longval < 0) {\n                eastwest = 'W';\n                longval\
    \ = -longval;\n        }\n        else\n                eastwest = 'E';\n    \
    \    longsecfrac = longval % 1000;\n        longval = longval / 1000;\n      \
    \  longsec = longval % 60;\n        longval = longval / 60;\n        longmin =\
    \ longval % 60;\n        longval = longval / 60;\n        longdeg = longval;\n\
    \        altfrac = altval % 100;\n        altmeters = (altval / 100) * altsign;\n\
    \        sizestr = savestr(precsize_ntoa(sizeval));\n        hpstr = savestr(precsize_ntoa(hpval));\n\
    \        vpstr = savestr(precsize_ntoa(vpval));\n        sprintf(cp,\n       \
    \         \"%d %.2d %.2d.%.3d %c %d %.2d %.2d.%.3d %c %d.%.2dm\n             \
    \   %sm %sm %sm\",\n                latdeg, latmin, latsec, latsecfrac, northsouth,\n\
    \                longdeg, longmin, longsec, longsecfrac, eastwest,\n         \
    \       altmeters, altfrac, sizestr, hpstr, vpstr);\n        free(sizestr);\n\
    \        free(hpstr);\n        free(vpstr);\n        return (cp);\n"
- title: '}'
  contents:
  - '}

    '
