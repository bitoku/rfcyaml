- title: __initial_text__
  contents:
  - '                     IPv6 Flow Label Specification

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2004).  All Rights Reserved.\n"
- title: Abstract
  contents:
  - "Abstract\n   This document specifies the IPv6 Flow Label field and the minimum\n\
    \   requirements for IPv6 source nodes labeling flows, IPv6 nodes\n   forwarding\
    \ labeled packets, and flow state establishment methods.\n   Even when mentioned\
    \ as examples of possible uses of the flow\n   labeling, more detailed requirements\
    \ for specific use cases are out\n   of scope for this document.\n   The usage\
    \ of the Flow Label field enables efficient IPv6 flow\n   classification based\
    \ only on IPv6 main header fields in fixed\n   positions.\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   A flow is a sequence of packets sent from a particular source\
    \ to a\n   particular unicast, anycast, or multicast destination that the source\n\
    \   desires to label as a flow.  A flow could consist of all packets in a\n  \
    \ specific transport connection or a media stream.  However, a flow is\n   not\
    \ necessarily 1:1 mapped to a transport connection.\n   Traditionally, flow classifiers\
    \ have been based on the 5-tuple of the\n   source and destination addresses,\
    \ ports, and the transport protocol\n   type.  However, some of these fields may\
    \ be unavailable due to either\n   fragmentation or encryption, or locating them\
    \ past a chain of IPv6\n   option headers may be inefficient.  Additionally, if\
    \ classifiers\n   depend only on IP layer headers, later introduction of alternative\n\
    \   transport layer protocols will be easier.\n   The usage of the 3-tuple of\
    \ the Flow Label and the Source and\n   Destination Address fields enables efficient\
    \ IPv6 flow\n   classification, where only IPv6 main header fields in fixed positions\n\
    \   are used.\n   The minimum level of IPv6 flow support consists of labeling\
    \ the\n   flows.  IPv6 source nodes supporting the flow labeling MUST be able\n\
    \   to label known flows (e.g., TCP connections, application streams),\n   even\
    \ if the node itself would not require any flow-specific\n   treatment.  Doing\
    \ this enables load spreading and receiver oriented\n   resource reservations,\
    \ for example.  Node requirements for flow\n   labeling are given in section 3.\n\
    \   Specific flow state establishment methods and the related service\n   models\
    \ are out of scope for this specification, but the generic\n   requirements enabling\
    \ co-existence of different methods in IPv6 nodes\n   are set forth in section\
    \ 4.  The associated scaling characteristics\n   (such as nodes involved in state\
    \ establishment, amount of state\n   maintained by them, and state growth function)\
    \ will be specific to\n   particular service models.\n   The key words \"MUST\"\
    , \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD\
    \ NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this\n   document are to\
    \ be interpreted as described in BCP 14, RFC 2119\n   [KEYWORDS].\n"
- title: 2.  IPv6 Flow Label Specification
  contents:
  - "2.  IPv6 Flow Label Specification\n   The 20-bit Flow Label field in the IPv6\
    \ header [IPv6] is used by a\n   source to label packets of a flow.  A Flow Label\
    \ of zero is used to\n   indicate packets not part of any flow.  Packet classifiers\
    \ use the\n   triplet of Flow Label, Source Address, and Destination Address fields\n\
    \   to identify which flow a particular packet belongs to.  Packets are\n   processed\
    \ in a flow-specific manner by the nodes that have been set\n   up with flow-specific\
    \ state.  The nature of the specific treatment\n   and the methods for the flow\
    \ state establishment are out of scope for\n   this specification.\n   The Flow\
    \ Label value set by the source MUST be delivered unchanged to\n   the destination\
    \ node(s).\n   IPv6 nodes MUST NOT assume any mathematical or other properties\
    \ of\n   the Flow Label values assigned by source nodes.  Router performance\n\
    \   SHOULD NOT be dependent on the distribution of the Flow Label values.\n  \
    \ Especially, the Flow Label bits alone make poor material for a hash\n   key.\n\
    \   Nodes keeping dynamic flow state MUST NOT assume packets arriving 120\n  \
    \ seconds or more after the previous packet of a flow still belong to\n   the\
    \ same flow, unless a flow state establishment method in use\n   defines a longer\
    \ flow state lifetime or the flow state has been\n   explicitly refreshed within\
    \ the lifetime duration.\n   The use of the Flow Label field does not necessarily\
    \ signal any\n   requirement on packet reordering.  Especially, the zero label\
    \ does\n   not imply that significant reordering is acceptable.\n   If an IPv6\
    \ node is not providing flow-specific treatment, it MUST\n   ignore the field\
    \ when receiving or forwarding a packet.\n"
- title: 3.  Flow Labeling Requirements
  contents:
  - "3.  Flow Labeling Requirements\n   To enable Flow Label based classification,\
    \ source nodes SHOULD assign\n   each unrelated transport connection and application\
    \ data stream to a\n   new flow.  The source node MAY also take part in flow state\n\
    \   establishment methods that result in assigning certain packets to\n   specific\
    \ flows.  A source node which does not assign traffic to flows\n   MUST set the\
    \ Flow Label to zero.\n   To enable applications and transport protocols to define\
    \ what packets\n   constitute a flow, the source node MUST provide means for the\n\
    \   applications and transport protocols to specify the Flow Label values\n  \
    \ to be used with their flows.  The use of the means to specify Flow\n   Label\
    \ values is subject to appropriate privileges (see section 5.1).\n   The source\
    \ node SHOULD be able to select unused Flow Label values for\n   flows not requesting\
    \ a specific value to be used.\n   A source node MUST ensure that it does not\
    \ unintentionally reuse Flow\n   Label values it is currently using or has recently\
    \ used when creating\n   new flows.  Flow Label values previously used with a\
    \ specific pair of\n   source and destination addresses MUST NOT be assigned to\
    \ new flows\n   with the same address pair within 120 seconds of the termination\
    \ of\n   the previous flow.  The source node SHOULD provide the means for the\n\
    \   applications and transport protocols to specify quarantine periods\n   longer\
    \ than the default 120 seconds for individual flows.\n   To avoid accidental Flow\
    \ Label value reuse, the source node SHOULD\n   select new Flow Label values in\
    \ a well-defined sequence (e.g.,\n   sequential or pseudo-random) and use an initial\
    \ value that avoids\n   reuse of recently used Flow Label values each time the\
    \ system\n   restarts.  The initial value SHOULD be derived from a previous value\n\
    \   stored in non-volatile memory, or in the absence of such history, a\n   randomly\
    \ generated initial value using techniques that produce good\n   randomness properties\
    \ [RND] SHOULD be used.\n"
- title: 4.  Flow State Establishment Requirements
  contents:
  - "4.  Flow State Establishment Requirements\n   To enable flow-specific treatment,\
    \ flow state needs to be established\n   on all or a subset of the IPv6 nodes\
    \ on the path from the source to\n   the destination(s).  The methods for the\
    \ state establishment, as well\n   as the models for flow-specific treatment will\
    \ be defined in separate\n   specifications.\n   To enable co-existence of different\
    \ methods in IPv6 nodes, the\n   methods MUST meet the following basic requirements:\n\
    \   (1)  The method MUST provide the means for flow state clean-up from\n    \
    \    the IPv6 nodes providing the flow-specific treatment.  Signaling\n      \
    \  based methods where the source node is involved are free to\n        specify\
    \ flow state lifetimes longer than the default 120\n        seconds.\n   (2) \
    \ Flow state establishment methods MUST be able to recover from\n        the case\
    \ where the requested flow state cannot be supported.\n"
- title: 5.  Security Considerations
  contents:
  - "5.  Security Considerations\n   This section considers security issues raised\
    \ by the use of the Flow\n   Label, primarily the potential for denial-of-service\
    \ attacks, and the\n   related potential for theft of service by unauthorized\
    \ traffic\n   (Section 5.1).  Section 5.2 addresses the use of the Flow Label\
    \ in\n   the presence of IPsec including its interaction with IPsec tunnel\n \
    \  mode and other tunneling protocols.  We also note that inspection of\n   unencrypted\
    \ Flow Labels may allow some forms of traffic analysis by\n   revealing some structure\
    \ of the underlying communications.  Even if\n   the flow label were encrypted,\
    \ its presence as a constant value in a\n   fixed position might assist traffic\
    \ analysis and cryptoanalysis.\n"
- title: 5.1.  Theft and Denial of Service
  contents:
  - "5.1.  Theft and Denial of Service\n   Since the mapping of network traffic to\
    \ flow-specific treatment is\n   triggered by the IP addresses and Flow Label\
    \ value of the IPv6\n   header, an adversary may be able to obtain better service\
    \ by\n   modifying the IPv6 header or by injecting packets with false\n   addresses\
    \ and/or labels.  Taken to its limits, such theft-of-service\n   becomes a denial-of-service\
    \ attack when the modified or injected\n   traffic depletes the resources available\
    \ to forward it and other\n   traffic streams.  A curiosity is that if a DoS attack\
    \ were undertaken\n   against a given Flow Label (or set of Flow Labels), then\
    \ traffic\n   containing an affected Flow Label might well experience worse-than-\n\
    \   best-effort network performance.\n   Note that since the treatment of IP headers\
    \ by nodes is typically\n   unverified, there is no guarantee that flow labels\
    \ sent by a node are\n   set according to the recommendations in this document.\
    \  Therefore,\n   any assumptions made by the network about header fields such\
    \ as flow\n   labels should be limited to the extent that the upstream nodes are\n\
    \   explicitly trusted.\n   Since flows are identified by the 3-tuple of the Flow\
    \ Label and the\n   Source and Destination Address, the risk of theft or denial\
    \ of\n   service introduced by the Flow Label is closely related to the risk\n\
    \   of theft or denial of service by address spoofing.  An adversary who\n   is\
    \ in a position to forge an address is also likely to be able to\n   forge a label,\
    \ and vice versa.\n   There are two issues with different properties: Spoofing\
    \ of the Flow\n   Label only, and spoofing of the whole 3-tuple, including Source\
    \ and\n   Destination Address.\n   The former can be done inside a node which\
    \ is using or transmitting\n   the correct source address.  The ability to spoof\
    \ a Flow Label\n   typically implies being in a position to also forge an address,\
    \ but\n   in many cases, spoofing an address may not be interesting to the\n \
    \  spoofer, especially if the spoofer's goal is theft of service, rather\n   than\
    \ denial of service.\n   The latter can be done by a host which is not subject\
    \ to ingress\n   filtering [INGR] or by an intermediate router.  Due to its\n\
    \   properties, such is typically useful only for denial of service.  In\n   the\
    \ absence of ingress filtering, almost any third party could\n   instigate such\
    \ an attack.\n   In the presence of ingress filtering, forging a non-zero Flow\
    \ Label\n   on packets that originated with a zero label, or modifying or\n  \
    \ clearing a label, could only occur if an intermediate system such as\n   a router\
    \ was compromised, or through some other form of man-in-the-\n   middle attack.\
    \  However, the risk is limited to traffic receiving\n   better or worse quality\
    \ of service than intended.  For example, if\n   Flow Labels are altered or cleared\
    \ at random, flow classification\n   will no longer happen as intended, and the\
    \ altered packets will\n   receive default treatment.  If a complete 3-tuple is\
    \ forged, the\n   altered packets will be classified into the forged flow and\
    \ will\n   receive the corresponding quality of service; this will create a\n\
    \   denial of service attack subtly different from one where only the\n   addresses\
    \ are forged.  Because it is limited to a single flow\n   definition, e.g., to\
    \ a limited amount of bandwidth, such an attack\n   will be more specific and\
    \ at a finer granularity than a normal\n   address-spoofing attack.\n   Since\
    \ flows are identified by the complete 3-tuple, ingress filtering\n   [INGR] will,\
    \ as noted above, mitigate part of the risk.  If the\n   source address of a packet\
    \ is validated by ingress filtering, there\n   can be a degree of trust that the\
    \ packet has not transited a\n   compromised router, to the extent that ISP infrastructure\
    \ may be\n   trusted.  However, this gives no assurance that another form of man-\n\
    \   in-the-middle attack has not occurred.\n   Only applications with an appropriate\
    \ privilege in a sending host\n   will be entitled to set a non-zero Flow Label.\
    \  Mechanisms for this\n   are operating system dependent.  Related policy and\
    \ authorization\n   mechanisms may also be required; for example, in a multi-user\
    \ host,\n   only some users may be entitled to set the Flow Label.  Such\n   authorization\
    \ issues are outside the scope of this specification.\n"
- title: 5.2.  IPsec and Tunneling Interactions
  contents:
  - "5.2.  IPsec and Tunneling Interactions\n   The IPsec protocol, as defined in\
    \ [IPSec, AH, ESP], does not include\n   the IPv6 header's Flow Label in any of\
    \ its cryptographic calculations\n   (in the case of tunnel mode, it is the outer\
    \ IPv6 header's Flow Label\n   that is not included).  Hence modification of the\
    \ Flow Label by a\n   network node has no effect on IPsec end-to-end security,\
    \ because it\n   cannot cause any IPsec integrity check to fail.  As a consequence,\n\
    \   IPsec does not provide any defense against an adversary's\n   modification\
    \ of the Flow Label (i.e., a man-in-the-middle attack).\n   IPsec tunnel mode\
    \ provides security for the encapsulated IP header's\n   Flow Label.  A tunnel\
    \ mode IPsec packet contains two IP headers: an\n   outer header supplied by the\
    \ tunnel ingress node and an encapsulated\n   inner header supplied by the original\
    \ source of the packet.  When an\n   IPsec tunnel is passing through nodes performing\
    \ flow classification,\n   the intermediate network nodes operate on the Flow\
    \ Label in the outer\n   header.  At the tunnel egress node, IPsec processing\
    \ includes\n   removing the outer header and forwarding the packet (if required)\n\
    \   using the inner header.  The IPsec protocol requires that the inner\n   header's\
    \ Flow Label not be changed by this decapsulation processing\n   to ensure that\
    \ modifications to label cannot be used to launch theft-\n   or denial-of-service\
    \ attacks across an IPsec tunnel endpoint.  This\n   document makes no change\
    \ to that requirement; indeed it forbids\n   changes to the Flow Label.\n   When\
    \ IPsec tunnel egress decapsulation processing includes a\n   sufficiently strong\
    \ cryptographic integrity check of the encapsulated\n   packet (where sufficiency\
    \ is determined by local security policy),\n   the tunnel egress node can safely\
    \ assume that the Flow Label in the\n   inner header has the same value as it\
    \ had at the tunnel ingress node.\n   This analysis and its implications apply\
    \ to any tunneling protocol\n   that performs integrity checks.  Of course, any\
    \ Flow Label set in an\n   encapsulating IPv6 header is subject to the risks described\
    \ in the\n   previous section.\n"
- title: 5.3.  Security Filtering Interactions
  contents:
  - "5.3.  Security Filtering Interactions\n   The Flow Label does nothing to eliminate\
    \ the need for packet\n   filtering based on headers past the IP header, if such\
    \ filtering is\n   deemed necessary for security reasons on nodes such as firewalls\
    \ or\n   filtering routers.\n"
- title: 6.  Acknowledgements
  contents:
  - "6.  Acknowledgements\n   The discussion on the topic in the IPv6 WG mailing list\
    \ has been\n   instrumental for the definition of this specification.  The authors\n\
    \   want to thank Ran Atkinson, Steve Blake, Jim Bound, Francis Dupont,\n   Robert\
    \ Elz, Tony Hain, Robert Hancock, Bob Hinden, Christian Huitema,\n   Frank Kastenholz,\
    \ Thomas Narten, Charles Perkins, Pekka Savola,\n   Hesham Soliman, Michael Thomas,\
    \ Margaret Wasserman, and Alex Zinin\n   for their contributions.\n"
- title: 7.  References
  contents:
  - '7.  References

    '
- title: 7.1.  Normative References
  contents:
  - "7.1.  Normative References\n   [IPv6]      Deering, S. and R. Hinden, \"Internet\
    \ Protocol Version 6\n               Specification\", RFC 2460, December 1998.\n\
    \   [KEYWORDS]  Bradner, S., \"Key words for use in RFCs to indicate\n       \
    \        requirement levels\", BCP 14, RFC 2119, March 1997.\n   [RND]       Eastlake,\
    \ D., Crocker, S. and J. Schiller, \"Randomness\n               Recommendations\
    \ for Security\", RFC 1750, December 1994.\n"
- title: 7.2.  Informative References
  contents:
  - "7.2.  Informative References\n   [AH]        Kent, S. and R. Atkinson, \"IP Authentication\
    \ Header\", RFC\n               2402, November 1998.\n   [ESP]       Kent, S.\
    \ and R. Atkinson, \"IP Encapsulating Security\n               Payload (ESP)\"\
    , RFC 2406, November 1998.\n   [INGR]      Ferguson, P. and D. Senie, \"Network\
    \ Ingress Filtering:\n               Defeating Denial of Service Attacks which\
    \ employ IP\n               Source Address Spoofing\", BCP 38, RFC 2827, May 2000.\n\
    \   [IPSec]     Kent, S. and R. Atkinson, \"Security Architecture for the\n  \
    \             Internet Protocol\", RFC 2401, November 1998.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Jarno Rajahalme\n   Nokia Research Center\n   P.O. Box\
    \ 407\n   FIN-00045 NOKIA GROUP,\n   Finland\n   EMail: jarno.rajahalme@nokia.com\n\
    \   Alex Conta\n   Transwitch Corporation\n   3 Enterprise Drive\n   Shelton,\
    \ CT 06484\n   USA\n   EMail: aconta@txc.com\n   Brian E. Carpenter\n   IBM Zurich\
    \ Research Laboratory\n   Saeumerstrasse 4 / Postfach\n   8803 Rueschlikon\n \
    \  Switzerland\n   EMail: brc@zurich.ibm.com\n   Steve Deering\n   Cisco Systems,\
    \ Inc.\n   170 West Tasman Drive\n   San Jose, CA 95134-1706\n   USA\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2004).  This\
    \ document is subject\n   to the rights, licenses and restrictions contained in\
    \ BCP 78 and\n   except as set forth therein, the authors retain all their rights.\n\
    \   This document and the information contained herein are provided on an\n  \
    \ \"AS IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE\n   REPRESENTS\
    \ OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY AND THE\n   INTERNET ENGINEERING\
    \ TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS OR\n   IMPLIED, INCLUDING BUT NOT\
    \ LIMITED TO ANY WARRANTY THAT THE USE OF\n   THE INFORMATION HEREIN WILL NOT\
    \ INFRINGE ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY OR FITNESS\
    \ FOR A PARTICULAR PURPOSE.\n"
- title: Intellectual Property
  contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or\
    \ scope of any\n   Intellectual Property Rights or other rights that might be\
    \ claimed\n   to pertain to the implementation or use of the technology\n   described\
    \ in this document or the extent to which any license\n   under such rights might\
    \ or might not be available; nor does it\n   represent that it has made any independent\
    \ effort to identify any\n   such rights.  Information on the procedures with\
    \ respect to\n   rights in RFC documents can be found in BCP 78 and BCP 79.\n\
    \   Copies of IPR disclosures made to the IETF Secretariat and any\n   assurances\
    \ of licenses to be made available, or the result of an\n   attempt made to obtain\
    \ a general license or permission for the use\n   of such proprietary rights by\
    \ implementers or users of this\n   specification can be obtained from the IETF\
    \ on-line IPR repository\n   at http://www.ietf.org/ipr.\n   The IETF invites\
    \ any interested party to bring to its attention\n   any copyrights, patents or\
    \ patent applications, or other\n   proprietary rights that may cover technology\
    \ that may be required\n   to implement this standard.  Please address the information\
    \ to the\n   IETF at ietf-ipr@ietf.org.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
