- title: __initial_text__
  contents:
  - '         Extensions to OSPF to Support Mobile Ad Hoc Networking

    '
- title: Abstract
  contents:
  - "Abstract\n   This document describes extensions to OSPF to support mobile ad\
    \ hoc\n   networks (MANETs).  The extensions, called OSPF-OR (OSPF-Overlapping\n\
    \   Relay), include mechanisms for link-local signaling (LLS), an OSPF-\n   MANET\
    \ interface, a simple technique to reduce the size of Hello\n   packets by only\
    \ transmitting incremental state changes, and a method\n   for optimized flooding\
    \ of routing updates.  OSPF-OR also provides a\n   means to reduce unnecessary\
    \ adjacencies to support larger MANETs.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document is not an Internet Standards Track specification;\
    \ it is\n   published for examination, experimental implementation, and\n   evaluation.\n\
    \   This document defines an Experimental Protocol for the Internet\n   community.\
    \  This document is a product of the Internet Engineering\n   Task Force (IETF).\
    \  It represents the consensus of the IETF\n   community.  It has received public\
    \ review and has been approved for\n   publication by the Internet Engineering\
    \ Steering Group (IESG).  Not\n   all documents approved by the IESG are a candidate\
    \ for any level of\n   Internet Standard; see Section 2 of RFC 5741.\n   Information\
    \ about the current status of this document, any errata,\n   and how to provide\
    \ feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc5820.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2010 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n   This document\
    \ may contain material from IETF Documents or IETF\n   Contributions published\
    \ or made publicly available before November\n   10, 2008.  The person(s) controlling\
    \ the copyright in some of this\n   material may not have granted the IETF Trust\
    \ the right to allow\n   modifications of such material outside the IETF Standards\
    \ Process.\n   Without obtaining an adequate license from the person(s) controlling\n\
    \   the copyright in such materials, this document may not be modified\n   outside\
    \ the IETF Standards Process, and derivative works of it may\n   not be created\
    \ outside the IETF Standards Process, except to format\n   it for publication\
    \ as an RFC or to translate it into languages other\n   than English.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................4\n\
    \      1.1. Problem Statement ..........................................4\n  \
    \    1.2. Motivation for Extending OSPF to Support MANETs ............5\n   2.\
    \ Requirements Notation ...........................................5\n   3. Proposed\
    \ Enhancements ...........................................5\n      3.1. OSPF-MANET\
    \ Interface .......................................7\n           3.1.1. Interface\
    \ Operation .................................8\n           3.1.2. LSA Formats\
    \ and Examples ............................8\n      3.2. Incremental OSPF-MANET\
    \ Hellos .............................12\n           3.2.1. The I Option Bit ...................................12\n\
    \           3.2.2. State Check Sequence TLV (SCS TLV) .................12\n  \
    \         3.2.3. Neighbor Drop TLV ..................................13\n    \
    \       3.2.4. Request From TLV (RF TLV) ..........................14\n      \
    \     3.2.5. Full State For TLV (FSF TLV) .......................14\n        \
    \   3.2.6. Neighbor Adjacencies ...............................15\n          \
    \ 3.2.7. Sending Hellos .....................................16\n           3.2.8.\
    \ Receiving Hellos ...................................17\n           3.2.9. Interoperability\
    \ ...................................19\n           3.2.10. Support for OSPF Graceful\
    \ Restart .................19\n      3.3. Optimized Flooding (Overlapping Relays)\
    \ ...................20\n           3.3.1. Operation Overview .................................20\n\
    \           3.3.2. Determination of Overlapping Relays ................21\n  \
    \         3.3.3. Terminology ........................................21\n    \
    \       3.3.4. Overlapping Relay Discovery Process ................22\n      \
    \     3.3.5. The F Option Bit ...................................23\n        \
    \   3.3.6. Active Overlapping Relay TLV (AOR TLV) .............23\n          \
    \ 3.3.7. Willingness TLV ....................................24\n           3.3.8.\
    \ Flooding and Relay Decisions .......................25\n           3.3.9. Intelligent\
    \ Transmission of Link State\n                  Acknowledgments ....................................26\n\
    \           3.3.10. Important Timers ..................................27\n  \
    \         3.3.11. Miscellaneous Protocol Considerations .............28\n    \
    \       3.3.12. Interoperability ..................................28\n      3.4.\
    \ New Bits in LLS Type 1 Extended Options and Flags .........29\n      3.5. Smart\
    \ Peering .............................................29\n           3.5.1. Rationale\
    \ for Smart Peering ........................29\n           3.5.2. Previous Related\
    \ Work ..............................30\n           3.5.3. Smart Peering Solution\
    \ .............................30\n           3.5.4. Advertising 2-Way Links in\
    \ Router-LSAs .............33\n   4. Security Considerations ........................................36\n\
    \   5. IANA Considerations ............................................38\n  \
    \ 6. Contributors ...................................................39\n   7.\
    \ Acknowledgments ................................................39\n   8. References\
    \ .....................................................39\n      8.1. Normative\
    \ References ......................................39\n      8.2. Informative\
    \ References ....................................40\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   Mobile ad hoc networks (MANETs) have been an area of study\
    \ for some\n   time within various working groups and areas within the IETF, various\n\
    \   military branches, and various government agencies.  Recently,\n   networks\
    \ with mobile ad hoc requirements have been proposed and are\n   being seriously\
    \ considered for deployment in the near term, which\n   means the concepts and\
    \ research now need to be applied to deployed\n   networks.  Towards that end,\
    \ this document applies many of the\n   principles and concepts learned through\
    \ prior work to [OSPFv3], along\n   with new concepts based on current requirements.\n"
- title: 1.1.  Problem Statement
  contents:
  - "1.1.  Problem Statement\n   MANETs are synonymous with packet radio networks,\
    \ which have been\n   around since the 1960s in a limited military capacity. \
    \ With the boom\n   in mobile devices and wireless communications, MANETs are\
    \ finding\n   scope in commercial and military environments.  The aim of these\n\
    \   networks is to support robust and efficient communication in a mobile\n  \
    \ wireless network by incorporating routing functionality into mobile\n   nodes.\n\
    \   A MANET is an autonomous set of nodes distributed over a wide\n   geographical\
    \ area that communicate over bandwidth-constrained\n   wireless links.  Each node\
    \ may represent a transmitter, receiver, or\n   relay station with varying physical\
    \ capabilities.  Packets may\n   traverse through several intermediate (relay)\
    \ nodes before reaching\n   their destination.  These networks typically lack\
    \ infrastructure:\n   nodes are mobile, and there is no central hub or controller;\
    \ thus,\n   there is no fixed network topology.  Moreover, MANETs must contend\n\
    \   with a difficult and variable communication environment.  Packet\n   transmissions\
    \ are plagued by the usual problems of radio\n   communication, which include\
    \ propagation path loss, signal multipath\n   and fading, and thermal noise. \
    \ These effects vary with terminal\n   movement, which also induces Doppler spreading\
    \ in the frequency of\n   the transmitted signal.  Finally, transmissions from\
    \ neighboring\n   terminals, known as multi-access interference, hostile jammers,\
    \ and\n   impulsive interference, e.g., ignition systems, generators, and other\n\
    \   non-similar in-band communications, may contribute additional\n   interference.\n\
    \   Given this nature of MANETs, the existence of a communication link\n   between\
    \ a pair of nodes is a function of their variable link quality,\n   including\
    \ signal strength and bandwidth.  Thus, routing paths vary,\n   based on environment\
    \ and the resulting network topology.  In such\n   networks, the topology may\
    \ be stable for periods of time and then\n   suddenly become unpredictable.  Since\
    \ MANETs are typically\n   decentralized systems, there are no central controllers\
    \ or specially\n   designated routers to determine the routing paths as the topology\n\
    \   changes.  All of the routing decisions and forwarding (relaying) of\n   packets\
    \ must be done by the nodes themselves, and communication is on\n   a peer-to-peer\
    \ basis.\n"
- title: 1.2.  Motivation for Extending OSPF to Support MANETs
  contents:
  - "1.2.  Motivation for Extending OSPF to Support MANETs\n   The motivation to extend\
    \ a standard protocol, OSPF (described in\n   [OSPF] and [OSPFv3]), to operate\
    \ on MANETs is twofold.  The primary\n   reason is for interoperability -- MANET\
    \ devices need to be able to\n   work when plugged into a wireline network in\
    \ as many cases as\n   possible.  The junction point between a MANET and wire-line\
    \ network\n   should also be as fluid as possible, allowing a MANET to \"plug\
    \ in\" to\n   just about any location within a wire-line network, and also find\n\
    \   connectivity, etc., as needed.\n   While routes could be redistributed between\
    \ two routing protocols,\n   one designed just for wire-line networks, and the\
    \ other just for\n   MANETs, this adds complexity and overhead to the MANET/wireline\n\
    \   interface, increases the odds of an error being introduced between\n   the\
    \ two domains, and decreases flexibility.\n   The second motivation is that OSPF\
    \ is a well-understood and widely\n   deployed routing protocol.  This provides\
    \ a strong basis of\n   experience and skills from which to work.  A protocol\
    \ that is known\n   to work can be extended, rather than developing a new protocol\
    \ that\n   must then be completely troubleshot, tested, and modified over a\n\
    \   number of years.  Working with a well-known protocol allows\n   development\
    \ effort to be placed in a narrowly focused area, rather\n   than rebuilding,\
    \ from scratch, many things that are already known to\n   work.\n"
- title: 2.  Requirements Notation
  contents:
  - "2.  Requirements Notation\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\"\
    , \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"\
    MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described\
    \ in RFC 2119 [KEY].\n"
- title: 3.  Proposed Enhancements
  contents:
  - "3.  Proposed Enhancements\n   This document proposes modifications to [OSPFv3]\
    \ to support mobile ad\n   hoc networks (MANETs).  Note that it is possible to\
    \ use the\n   mechanisms defined in Sections 3.2 and 3.3 independently of one\n\
    \   another.\n   The challenges with deploying standard [OSPFv3] in a MANET\n\
    \   environment fit into two categories.  First, traditional link-state\n   routing\
    \ protocols are designed for a statically configured\n   environment.  As a result,\
    \ most of the configuration is done manually\n   when a new router is placed in\
    \ the network.  Thus, OSPF will not\n   function in an environment where routers\
    \ interconnect and disconnect\n   in somewhat random topologies and combinations.\
    \  There are\n   modifications that must be made in order for routers running\
    \ the same\n   protocol to communicate in a heterogeneous and dynamic environment.\n\
    \   Currently there is no defined interface type that describes a\n   wireless\
    \ network.  Wireless links have characteristics of both multi-\n   access and\
    \ point-to-multipoint links.  Treating wireless links as\n   multi-access does\
    \ not take into account that not all nodes on the\n   same Layer 2 link have bi-directional\
    \ connectivity.  However, any\n   transmission on a link will reach nodes that\
    \ are within transmission\n   range.  In this way, the link is multi-access due\
    \ to the fact that\n   two simultaneous transmissions may collide.  A new interface\
    \ type\n   needs to be defined in order to accurately describe this behavior.\n\
    \   The second category of challenges involves scalability.  A MANET must\n  \
    \ transmit more state information to maintain reachability.  Therefore,\n   OSPF\
    \ will need scalability enhancements to support MANETs.  While\n   some flooding\
    \ optimizations are present in OSPF, such as designated\n   router (DR) election,\
    \ many of these were built under the assumption\n   of a true multi-access network.\
    \  Wireless networks are not true\n   multi-access networks, because it cannot\
    \ be assumed that there is\n   2-way connectivity between everyone on the same\
    \ Layer 2 link.\n   Therefore, optimizations such as DR election will not perform\n\
    \   correctly in MANET networks.  Without any further optimizations in\n   link-state\
    \ flooding, current OSPF would not be able to operate in a\n   highly dynamic\
    \ environment in which links are constantly being formed\n   and broken.  The\
    \ amount of information that would need to be flooded\n   would overload the network.\n\
    \   Another scalability issue is the periodic transmission of Hello\n   messages.\
    \  Currently, even if there are no changes in a router's\n   neighbor list, the\
    \ Hello messages still list all the neighbors on a\n   particular link.  For a\
    \ MANET router, where saving bandwidth and\n   transmission power is a critical\
    \ issue, the transmission of\n   potentially large Hello messages is particularly\
    \ wasteful.\n   Finally, current routing protocols will form a neighbor relationship\n\
    \   with any router on a Layer 2 link that is correctly configured.  For\n   MANET\
    \ routers in a wireless network, this may lead to an excessive\n   number of parallel\
    \ links between two routers if communication is\n   achieved via multiple interfaces.\
    \  In a statically configured\n   network, this is not a problem, since the physical\
    \ topology can be\n   built to prevent excessive redundancy.  However, in a dynamic\n\
    \   network, there must exist additional mechanisms to prevent too many\n   redundant\
    \ links.  (Note that links between two nodes on different\n   radio types, different\
    \ antennae, different channels, etc., are\n   considered different links and not\
    \ redundant links.)  In scalability\n   tests, it has been demonstrated that the\
    \ presence of too many\n   redundant links will both increase the size of routing\
    \ updates and\n   cause extra flooding, resulting in even relatively small networks\
    \ not\n   converging.\n"
- title: 3.1.  OSPF-MANET Interface
  contents:
  - "3.1.  OSPF-MANET Interface\n   Interfaces are defined as the connection between\
    \ a router and one of\n   its attached networks [OSPF].  Four types of interfaces\
    \ have been\n   defined and supported in [OSPF] and [OSPFv3]: broadcast, Non-\n\
    \   Broadcast Multi-Access (NBMA), point-to-point, and point-to-\n   multipoint.\n\
    \   The point-to-multipoint model has been chosen to represent MANET\n   interfaces.\
    \  (The features designed in this document MAY be included\n   on other interface\
    \ types as appropriate.)  The MANET interface allows\n   the following:\n   o\
    \  OSPF treats all router-to-router connections over the MANET\n      interface\
    \ as if they were point-to-point links.\n   o  Link metric can be set on a per-neighbor\
    \ basis.\n   o  Broadcast and multicast can be accomplished through Layer 2\n\
    \      broadcast or Layer 2 pseudo-broadcast.\n      *  The MANET interface supports\
    \ Layer 2 broadcast if it is able to\n         address a single physical message\
    \ to all of the attached\n         neighbors.  One such example is 802.11.\n \
    \     *  The MANET interface supports Layer 2 pseudo-broadcast if it is\n    \
    \     able to pick up a packet from the broadcast queue, replicate\n         the\
    \ packet, and send a copy over each point-to-point link.  One\n         such example\
    \ is Frame Relay.\n   o  An API must be provided for Layer 3 to determine the\
    \ Layer 2\n      broadcast capability.  Based on the return of the API, OSPF\n\
    \      classifies the MANET interfaces into the following three types:\n     \
    \ MANET broadcast, MANET pseudo-broadcast, and MANET non-broadcast.\n   o  Multicast\
    \ SHOULD be used for OSPF packets.  When the MANET\n      interface supports Layer\
    \ 2 broadcast or pseudo-broadcast, the\n      multicast process is transparent\
    \ to OSPF.  Otherwise, OSPF MUST\n      replicate multicast packets by itself.\n"
- title: 3.1.1.  Interface Operation
  contents:
  - "3.1.1.  Interface Operation\n   A MANET node has at least one MANET interface.\
    \  MANET nodes can\n   communicate with each other through MANET interfaces. \
    \ MANET nodes\n   can communicate with non-MANET routers only through normal\n\
    \   interfaces, such as Ethernet, ATM, etc.\n   For scalability reasons, it is\
    \ not required to configure IPv6 global\n   unicast addresses on MANET interfaces.\
    \  Instead, a management\n   loopback interface with an IPv6 global unicast address\
    \ MAY be\n   configured on each MANET node.\n   The link state advertisements\
    \ (LSAs) associated with a MANET\n   interface SHOULD have the DC-bit set in the\
    \ OSPFv3 Options Field and\n   the DoNotAge bit set in the LS Age field as described\
    \ in [OSPFv3].\n   Demand Circuits are an optional feature; hence, the DC-bit\
    \ setting\n   recommendation level is SHOULD.\n"
- title: 3.1.2.  LSA Formats and Examples
  contents:
  - "3.1.2.  LSA Formats and Examples\n   LSA formats are specified in [OSPFv3].\n\
    \   In order to display example LSAs, a network map is included below.\n   Router\
    \ names are prefixed with the letters RT, network names with the\n   letter N,\
    \ and router interface names with the letter I.\n   o  Four MANET nodes, RT1,\
    \ RT2, RT3, and RT4, reside in area 2.\n   o  RT1 has one MANET interface, I11.\
    \  Through the interface, RT1 is\n      full-adjacent to RT2, RT3, and RT4.\n\
    \   o  RT2 has two MANET interfaces, I21 and I22, and one Ethernet\n      interface,\
    \ I23.  RT2 is full-adjacent to RT1 and RT4 through the\n      interface I21,\
    \ and full-adjacent to RT4 through the interface I22.\n      Stub network N1 is\
    \ attached with RT2 through the interface I23.\n   o  RT3 has one MANET interface,\
    \ I31, and is full-adjacent to RT1\n      through the interface.\n   o  RT4 has\
    \ two MANET interfaces, I41 and I42.  It is full-adjacent to\n      RT2 through\
    \ the interface I41, and full-adjacent to RT1 and RT2\n      through the interface\
    \ I42.\n   o  Moreover, each MANET node is configured with a management loopback\n\
    \      interface.\n      +---+I11        I21+---+I23   |\n      |RT1|-+----------+-|RT2|------|N1\n\
    \      +---+ |          | +---+      |\n      |                |   VI22\n    \
    \  |                |   +\n      |                |   |\n      |             \
    \   |   |\n      |                |   |\n      |                |   |\n      |\
    \                |   +\n      |                |   ^I41\n      +---+ |       \
    \   +---+\n      |RT3|-+        +-|RT4|\n      +---+I31      I42+---+\n   The\
    \ assignment of IPv6 global unicast prefixes to network links is\n   shown below.\
    \  (Note: No IPv6 global unicast addresses are configured\n   on the MANET interfaces).\n\
    \      -----------------------------------------------------------\n      RT1\
    \      LOOPBACK      2001:DB8:0001::/64\n               I11           n/a\n  \
    \    RT2      LOOPBACK      2001:DB8:0002::/64\n               I21           n/a\n\
    \               I22           n/a\n               I23           2001:DB8:0012::/60\n\
    \      RT3      LOOPBACK      2001:DB8:0003::/64\n               I31         \
    \  n/a\n      RT4      LOOPBACK      2001:DB8:0004::/64\n               I41  \
    \         n/a\n               I42           n/a\n   The OSPF interface IDs and\
    \ the link-local addresses for the router\n   interfaces in the network are shown\
    \ below.  EUIxy represents the\n   64-bit interface identifier of the interface\
    \ Ixy, in Modified EUI-64\n   format [IPV6ADD].\n      Node    Interface    Interface\
    \ ID    Link-Local address\n      -----------------------------------------------------------\n\
    \      RT1     LOOPBACK     1               n/a\n              I11          2\
    \               fe80:0002::EUI11\n      RT2     LOOPBACK     1               n/a\n\
    \              I21          2               fe80:0002::EUI21\n              I22\
    \          3               fe80:0003::EUI22\n              I23          4    \
    \           fe80:0004::EUI23\n      RT3     LOOPBACK     1               n/a\n\
    \              I31          2               fe80:0002::EUI31\n      RT4     LOOPBACK\
    \     1               n/a\n              I41          2               fe80:0002::EUI41\n\
    \              I42          3               fe80:0003::EUI42\n"
- title: 3.1.2.1.  Router-LSAs
  contents:
  - "3.1.2.1.  Router-LSAs\n   As an example, consider the router-LSAs that node RT2\
    \ would\n   originate.  Two MANET interfaces, consisting of 3 point-to-point\n\
    \   links, are presented.\n      RT2's router-LSA\n      LS age = DoNotAge+0 \
    \             ;newly originated\n      LS type = 0x2001                 ;router-LSA\n\
    \      Link State ID = 0                ;first fragment\n      Advertising Router\
    \ = 192.0.2.2   ;RT2's Router ID\n      bit E = 0                        ;not\
    \ an AS boundary router\n      bit B = 0                        ;not an area border\
    \ router\n      Options = (V6-bit|E-bit|R-bit)\n       Type = 1              \
    \          ;p2p link to RT1 over I21\n       Metric = 10                     ;cost\
    \ to RT1\n       Interface ID = 2                ;Interface ID of I21\n      \
    \ Neighbor Interface ID = 2       ;Interface ID of I11\n       Neighbor Router\
    \ ID = 192.0.2.1  ;RT1's Router ID\n       Type = 1                        ;p2p\
    \ link to RT4 over I21\n       Metric = 25                     ;cost to RT4\n\
    \       Interface ID = 2                ;Interface ID of I21\n       Neighbor\
    \ Interface ID = 3       ;Interface ID of I42\n       Neighbor Router ID = 192.0.2.4\
    \  ;RT4's Router ID\n       Type = 1                        ;p2p link to RT4 over\
    \ I22\n       Metric = 15                     ;cost to RT4\n       Interface ID\
    \ = 3                ;Interface ID of I22\n       Neighbor Interface ID = 2  \
    \     ;Interface ID of I41\n       Neighbor Router ID = 192.0.2.4  ;RT4's Router\
    \ ID\n"
- title: 3.1.2.2.  Link-LSAs
  contents:
  - "3.1.2.2.  Link-LSAs\n   A MANET node originates a separate link-LSA for each\
    \ attached\n   interface.  As an example, consider the link-LSA that RT3 will\
    \ build\n   for its MANET interface I31.\n      RT3's link-LSA for MANET interface\
    \ I31\n      LS age = DoNotAge+0              ;newly originated\n      LS type\
    \ = 0x0008                 ;link-LSA\n      Link State ID = 2                ;Interface\
    \ ID of I31\n      Advertising Router = 192.0.2.3   ;RT3's Router ID\n      Rtr\
    \ Pri = 1                      ;default priority\n      Options = (V6-bit|E-bit|R-bit)\n\
    \      Link-local Interface Address = fe80:0002::EUI31\n      # prefixes = 0 \
    \                  ;no global unicast address\n"
- title: 3.1.2.3.  Intra-Area-Prefix-LSAs
  contents:
  - "3.1.2.3.  Intra-Area-Prefix-LSAs\n   A MANET node originates an intra-area-prefix-LSA\
    \ to advertise its own\n   prefixes and those of its attached stub links.  As\
    \ an example,\n   consider the intra-area-prefix-LSA that RT2 will build.\n  \
    \    RT2's intra-area-prefix-LSA for its own prefixes\n      LS age = DoNotAge+0\
    \              ;newly originated\n      LS type = 0x2009                 ;intra-area-prefix-LSA\n\
    \      Link State ID = 177              ;or something else\n      Advertising\
    \ Router = 192.0.2.2   ;RT2's Router ID\n      # prefixes = 2\n      Referenced\
    \ LS type = 0x2001      ;router-LSA reference\n      Referenced Link State ID\
    \ = 0     ;always 0 for router-LSA\n                                       ;reference\n\
    \      Referenced Advertising Router = 192.0.2.2\n                           \
    \            ;RT2's Router ID\n       PrefixLength = 64               ;prefix\
    \ on RT2's LOOPBACK\n       PrefixOptions = 0\n       Metric = 0             \
    \         ;cost of RT2's LOOPBACK\n       Address Prefix = 2001:DB8:0002::\n \
    \      PrefixLength = 60               ;prefix on I23\n       PrefixOptions =\
    \ 0\n       Metric = 10                     ;cost of I23\n       Address Prefix\
    \ = 2001:DB8:0012::\n   Note: MANET nodes may originate intra-area-prefix-LSAs\
    \ for attached\n   transit (broadcast/NBMA) networks.  This is normal behavior\
    \ (defined\n   in [OSPFv3]), which is irrelevant to MANET interfaces.  Please\n\
    \   consult [OSPFv3] for details.\n"
- title: 3.2.  Incremental OSPF-MANET Hellos
  contents:
  - "3.2.  Incremental OSPF-MANET Hellos\n   In MANETs, reducing the size of periodically\
    \ transmitted packets can\n   be very important in decreasing the total amount\
    \ of overhead\n   associated with routing.  Towards this end, removing the list\
    \ of\n   neighbors from Hello packets, unless that information changes, can\n\
    \   reduce routing protocol overhead.  While the reduction for each Hello\n  \
    \ packet is small, over time it will be significant.\n   A new option bit is defined\
    \ in this document to facilitate the\n   operation of incremental Hello packets.\
    \  A new State Check Sequence\n   TLV (SCS TLV) and Neighbor Drop TLV are also\
    \ defined, transmitted\n   using LLS [LLS].\n"
- title: 3.2.1.  The I Option Bit
  contents:
  - "3.2.1.  The I Option Bit\n   A new I-bit is defined in the LLS Type 1 Extended\
    \ Options and Flags\n   field.  The bit is defined for Hello packets and indicates\
    \ that only\n   incremental information is present.  See Section 5 for placement\
    \ of\n   the I-bit.\n"
- title: 3.2.2.  State Check Sequence TLV (SCS TLV)
  contents:
  - "3.2.2.  State Check Sequence TLV (SCS TLV)\n   A new TLV is defined that indicates\
    \ the current state, which is\n   represented by a State Check Sequence (SCS)\
    \ number of the\n   transmitting router.\n    0                   1          \
    \           2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7  8\
    \  9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+--+--+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |            Type               |           Length                |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+--+--+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |         SCS Number            |R|FS|N |   Reserved              |\n   +-----------------------------------------------------------------+\n\
    \   o  Type: 6\n   o  Length: Set to 4.\n   o  SCS Number: A circular two-octet\
    \ unsigned integer indicating the\n      current state of the transmitting device.\
    \  Note that when the\n      incremental Hello mechanism is invoked (or re-started),\
    \ an initial\n      SCS value of '1' SHOULD be used for the first incremental\
    \ Hello\n      packet.  This sequence number is referred to as InitialSCS.  Note\n\
    \      that InitialSCS also implies a full state.\n   o  R: Request bit.  If set,\
    \ this is a request for current state.  The\n      list of routers that should\
    \ respond to this request is indicated\n      in the Request From TLV (RF TLV)\
    \ (defined below).  If the RF TLV\n      is not present, it is assumed that the\
    \ request is meant for all\n      nodes.\n   o  FS: Full State bit. If set, the\
    \ Hello packet contains full state\n      as far as the neighbor(s) in the Full\
    \ State For TLV (FSF TLV)\n      (defined below) are concerned.  If the FSF TLV\
    \ is not present, the\n      Hello packet contains full state for all neighbors.\n\
    \   o  N: Incomplete bit.  If NOT set, the complete state associated with\n  \
    \    the SCS number is included in the Hello packet.  If set, this\n      indicates\
    \ that the appended TLVs are being sent 'persistently',\n      and that there\
    \ is more state associated with the SCS number that\n      was sent originally,\
    \ but is not included in this Hello packet.\n      This bit allows any desired\
    \ TLVs to be sent 'persistently' for a\n      number of Hellos with the same SCS\
    \ number without requiring all of\n      the TLVs associated with that SCS number\
    \ to be transmitted.  The\n      first time an SCS number is sent, the entire\
    \ state associated with\n      that SCS number is transmitted, and the N-bit MUST\
    \ NOT be set.\n   o  Reserved: Set to 0.  Reserved for future use.\n   A Hello\
    \ with the SCS TLV appended and with the R-bit set will be\n   referred to as\
    \ a Hello request.\n"
- title: 3.2.3.  Neighbor Drop TLV
  contents:
  - "3.2.3.  Neighbor Drop TLV\n   A new TLV is defined in this document that indicates\
    \ neighbor(s) that\n   have been removed from the list of known neighbors.\n \
    \   0                   1                   2                   3\n    0 1 2 3\
    \ 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |            Type               |           Length              |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   | Dropped Neighbor(s)                                           |\n   +---------------------------------------------------------------+\n\
    \   | ....\n   +--------------------\n   o  Type: 7\n   o  Length: Set to the\
    \ number of dropped neighbors included in the TLV\n      multiplied by 4.\n  \
    \ o  Dropped Neighbor(s) - Router ID of the neighbor being dropped.\n"
- title: 3.2.4.  Request From TLV (RF TLV)
  contents:
  - "3.2.4.  Request From TLV (RF TLV)\n   A new TLV is defined in this document that\
    \ indicates neighbor(s) from\n   which the latest Hello state is being requested.\n\
    \    0                   1                   2                   3\n    0 1 2\
    \ 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |            Type               |           Length              |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                   Request From Neighbor(s)                    |\n   +---------------------------------------------------------------+\n\
    \   | ....\n   +--------------------\n   o  Type: 8\n   o  Length: Set to the\
    \ number of neighbors included in the TLV\n      multiplied by 4.\n   o  Request\
    \ From Neighbor(s) - Router ID of the neighbor(s) from which\n      Hello state\
    \ is being requested.\n"
- title: 3.2.5.  Full State For TLV (FSF TLV)
  contents:
  - "3.2.5.  Full State For TLV (FSF TLV)\n   A new TLV is defined in this document\
    \ that indicates neighbor(s) to\n   which the transmitting node is responding\
    \ with full state.\n    0                   1                   2            \
    \       3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n\
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |  \
    \          Type               |           Length              |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                   Full State For Neighbor(s)                  |\n   +---------------------------------------------------------------+\n\
    \   | ....\n   +--------------------\n   o  Type: 9\n   o  Length: Set to the\
    \ number of neighbors included in the TLV\n      multiplied by 4.\n   o  Full\
    \ State For Neighbor(s) - Router ID of the neighbor(s) should\n      process this\
    \ packet.\n"
- title: 3.2.6.  Neighbor Adjacencies
  contents:
  - "3.2.6.  Neighbor Adjacencies\n   This section describes building neighbor adjacencies\
    \ and the failure\n   of such adjacencies using the incremental Hello signaling.\n"
- title: 3.2.6.1.  Building Neighbor Adjacencies
  contents:
  - "3.2.6.1.  Building Neighbor Adjacencies\n   Hello packets are sent periodically\
    \ in accordance with [OSPF] and\n   [OSPFv3].  An OSPF implementation that supports\
    \ sending only partial\n   neighbor information in Hello packets SHOULD always\
    \ set the I-bit in\n   its transmitted Hello packets, except as described elsewhere\
    \ in this\n   document.  Hello packets MAY be suppressed from being transmitted\n\
    \   every HelloInterval if other packet transmissions are sent by the\n   router\
    \ during that time.\n   On receiving a Hello packet from a new neighbor (in this\
    \ context, a\n   new neighbor is a neighbor in less than Init state as defined\
    \ in\n   Section 10.1 [OSPF]), if the Hello has the I-bit set, a router will:\n\
    \   o  Place the new neighbor in the neighbor list described in [OSPFv3],\n  \
    \    Appendix A.3.2.\n   o  Increment the router's SCS number that it will use\
    \ in its next\n      Hello (indicated in the SCS TLV).\n   o  Remove the neighbor\
    \ from the neighbor list described in [OSPFv3],\n      Appendix A.3.2, when the\
    \ neighbor has reached the Exchange state\n      (as described in [OSPF], Section\
    \ 10.1).\n   o  Remove the neighbor from the neighbor list described in [OSPFv3],\n\
    \      Appendix A.3.2, if the neighbor is not a DR or backup designated\n    \
    \  router (BDR) on an OSPF broadcast link, and if the neighbor is\n      advertised\
    \ as connected in the network-LSA advertised by the DR.\n"
- title: 3.2.6.2.  Adjacency Failure
  contents:
  - "3.2.6.2.  Adjacency Failure\n   On discovering an adjacency failure (going to\
    \ state less than\n   Exchange), a router using I-bit signaling SHOULD:\n   o\
    \  Remove the adjacent router from local tables, and take the\n      appropriate\
    \ actions for a failed adjacency described in [OSPF] and\n      [OSPFv3].\n  \
    \ o  Add the formerly adjacent router to a Neighbor Drop TLV.\n   o  Increment\
    \ the router's SCS number that it will transmit in its\n      next Hello.\n  \
    \ o  Transmit Hellos with this Neighbor Drop TLV.  It may be desirable\n     \
    \ to send the Neighbor Drop TLV in three consecutive Hellos to\n      increase\
    \ the probability of reception.  In this case, 'persistent'\n      Hello packets\
    \ would be sent with the same SCS number, the Neighbor\n      Drop TLV, and the\
    \ N-bit set.  Thus, the receiver knows that the\n      Neighbor Drop TLV is being\
    \ sent persistently, and there is more\n      state associated with the SCS in\
    \ case it must request missing\n      state presumably transmitted in a previous\
    \ Hello.\n"
- title: 3.2.7.  Sending Hellos
  contents:
  - "3.2.7.  Sending Hellos\n   When a device is first attached to a network (whether\
    \ by being\n   brought within range of another device, powering the device on,\n\
    \   enabling the device's radio interface, etc.), it will need to obtain\n   complete\
    \ neighbor state from each of its neighbors before it can\n   utilize the incremental\
    \ Hello mechanism.  Thus, upon initialization,\n   a device MAY send a multicast\
    \ Hello request (and omit the Request\n   From TLV).  Neighbors will receive the\
    \ request and respond with a\n   Hello with their complete neighbor state.\n \
    \  If a device is in INIT state with a neighbor and receives a Hello\n   from\
    \ the neighbor without its router ID listed in the neighbor list,\n   the device\
    \ SHOULD request the current state from the neighbor.  Note\n   that this is to\
    \ avoid a \"race\" condition, since the received Hello\n   can either mean that\
    \ the device is NOT SEEN by the neighbor, or that\n   the device is adjacent and\
    \ not listed in the incremental list.  Thus,\n   by receiving a Hello request,\
    \ the neighbor will respond with its\n   neighbor state for the neighbor.\n  \
    \ The first Hello packet with a particular SCS number MUST contain the\n   full\
    \ state associated with that SCS number, i.e., all state changes\n   since the\
    \ last SCS number.  The N-bit MUST NOT be set in the State\n   Check Sequence\
    \ TLV.\n   Incremental Hello packets can be sent persistently (sent in k\n   successive\
    \ Hello packets), with flexibility in the actual amount of\n   information being\
    \ sent.  The three options include:\n   o  The entire incremental Hello packet\
    \ is sent persistently.  This is\n      accomplished by simply sending the entire\
    \ state associated with a\n      SCS number for k successive Hellos.  Since the\
    \ SCS number remains\n      the same, the N-bit is not set in these incremental\
    \ Hello packets.\n   o  Partial information for a particular SCS number is sent\n\
    \      persistently.  After the first Hello packet with a particular SCS\n   \
    \   number is sent, only the TLVs that are desired to be sent\n      persistently\
    \ are sent in subsequent Hellos with the same SCS\n      number and the N-bit\
    \ set.\n   o  No information is sent persistently.  This is simply the default\n\
    \      behavior where an incremental Hello packet with a particular SCS\n    \
    \  number is only sent once.\n"
- title: 3.2.8.  Receiving Hellos
  contents:
  - "3.2.8.  Receiving Hellos\n   Each OSPF device supporting incremental Hello signaling,\
    \ as described\n   in this document, MUST keep the last known SCS number from\
    \ each\n   neighbor it has received Hellos from as long as the neighbor\n   adjacency\
    \ structure is maintained.\n   If a device receives a Hello from an adjacent neighbor\
    \ with an SCS\n   number less than the last known SCS number from that neighbor,\
    \ it\n   MUST first check if the SCS number is a wrap around.  \"Wrap around\"\
    \n   is a condition when the last known SCS number is MAX_SCS (65535) and\n  \
    \ the new SCS number is 1.  If it is not a wrap around, then the device\n   MUST\
    \ send a Hello request to the neighbor.\n   If it is a wrap around, or if a device\
    \ receives a Hello from an\n   adjacent neighbor with an SCS number one greater\
    \ than the last known\n   SCS number from that neighbor, it MUST:\n   o  Examine\
    \ the neighbor list described in [OSPFv3], Appendix A.3.2.\n      If any neighbors\
    \ are contained in this list, increment the SCS\n      number contained in the\
    \ adjacent neighbor's data structure.\n   o  Examine the Neighbor Drop TLV as\
    \ described in Section 3.2.6.2.  If\n      this list contains a neighbor other\
    \ than the local router,\n      increment the SCS number contained in the adjacent\
    \ neighbor's data\n      structure.\n   o  Examine the Neighbor Drop TLV as described\
    \ in Section 3.2.6.2.  If\n      the local router identifier is contained in this\
    \ list, destroy the\n      transmitting adjacent neighbor's data structures.\n\
    \   o  Examine any other TLVs incrementally signaled, as described in\n      documents\
    \ referring to this RFC.  If there are other state changes\n      indicated, increment\
    \ the SCS number contained in the adjacent\n      neighbor's data structure.\n\
    \   o  If no state change information is contained in the received Hello,\n  \
    \    send a request for current state (by setting the 'R'-bit) in the\n      next\
    \ Hello.\n   If a device receives a Hello from an adjacent neighbor with an SCS\n\
    \   number greater than the last known SCS number + 1 from that neighbor,\n  \
    \ it MUST send a Hello request to the neighbor, since it may be missing\n   some\
    \ neighbor state.\n"
- title: 3.2.8.1.  Receiving Hellos with the N-bit Set
  contents:
  - "3.2.8.1.  Receiving Hellos with the N-bit Set\n   If a device receives a Hello\
    \ with the SCS TLV included and the N-bit\n   set in this TLV, it MUST verify\
    \ that it has already received the SCS\n   number with the N-bit NOT set from\
    \ the neighbor.  If the device\n   determines that this is the first receipt of\
    \ the SCS number from this\n   neighbor, then it MUST send a Hello request to\
    \ the neighbor, since it\n   missed the initial Hello packet with the SCS number\
    \ and thus is\n   missing state.\n"
- title: 3.2.8.2.  Receiving Hellos with the R-bit Set
  contents:
  - "3.2.8.2.  Receiving Hellos with the R-bit Set\n   If a device receives a Hello\
    \ with the SCS TLV included and the R-bit\n   set, it looks for the RF TLV.  If\
    \ its router ID is listed in the RF\n   TLV or the TLV is not found, it includes\
    \ its full state in the next\n   Hello.  This MUST include:\n   o  The neighbor\
    \ ID of the requesting neighbor(s) in the list of\n      neighbors described in\
    \ [OSPFv3], Appendix A.3.2.\n   o  An SCS TLV with the transmitter's current SCS\
    \ number and the\n      FS-bit set.  Note that the transmitter's SCS number is\
    \ NOT\n      incremented.\n   o  Any other TLVs, defined in other documents referencing\
    \ this RFC,\n      indicating the current state of the local system.\n   o  The\
    \ neighbor ID of all the neighbors who have requested current\n      state, in\
    \ the FSF TLV.\n   If the full state is being sent to a large number of existing\n\
    \   neighbors, an implementation could choose to instead generate a full\n   state\
    \ for all neighbors and omit the FSF TLV.\n"
- title: 3.2.8.3.  Receiving Hellos with the FS-bit Set
  contents:
  - "3.2.8.3.  Receiving Hellos with the FS-bit Set\n   When a device receives a Hello\
    \ with the SCS TLV included and the\n   FS-bit set, the Hello packet contains\
    \ the neighbor's full state for\n   the device.  The packet SHOULD be processed\
    \ as follows:\n   o  If the received SCS number is equal to the last known SCS\
    \ number,\n      the packet SHOULD be ignored, since the device already has the\n\
    \      latest state information.\n   o  If the received SCS number is different\
    \ than the last known SCS\n      number, this Hello has new information and MUST\
    \ be parsed.\n   o  If it is listed in the FSF TLV, or if the FSF TLV is not present,\n\
    \      the device MUST save the SCS number, process the Hello as\n      described\
    \ in Section 3.2.8, and process any other appended TLVs.\n"
- title: 3.2.9.  Interoperability
  contents:
  - "3.2.9.  Interoperability\n   On receiving a Hello packet from a new neighbor\
    \ without the I-bit\n   set, the local router will continue to place that router's\
    \ identifier\n   in transmitted Hellos on this link as described in [OSPFv3],\n\
    \   Appendix A.3.2.\n"
- title: 3.2.10.  Support for OSPF Graceful Restart
  contents:
  - "3.2.10.  Support for OSPF Graceful Restart\n   OSPF graceful restart, as described\
    \ in [OSPFREST] and [OSPFGR],\n   relies on the lack of neighbors in the list\
    \ of neighbors described in\n   [OSPFv3], Appendix A.3.2, to determine that an\
    \ adjacent router has\n   restarted, and other signaling to determine that the\
    \ adjacency should\n   not be torn down.  If all Hello packets transmitted by\
    \ a given router\n   have an empty Hello list, reliance on an empty Hello packet\
    \ to signal\n   a restart (or to reliably tear down an OSPF adjacency) is no longer\n\
    \   possible.  Hence, this signaling must be slightly altered.  When a\n   router\
    \ would like to tear down all adjacencies, or signal that it has\n   restarted:\n\
    \   o  On initially restarting, during the first RouterDeadInterval after\n  \
    \    restart, the router will transmit Hello packets with an empty\n      neighbor\
    \ list and the I-bit cleared.  Any normal restart or other\n      signaling may\
    \ be included in these initial Hello packets.\n   o  As adjacencies are learned,\
    \ these newly learned adjacent routers\n      are included in the multicast Hellos\
    \ transmitted on the link.\n   o  After one RouterDeadInterval has passed, the\
    \ incremental Hello\n      mechanism is invoked.  An incremental Hello packet\
    \ with full state\n      is sent with the I-bit set, the SCS TLV included with\
    \ the FS-bit\n      set, and the InitialSCS value (e.g., SCS of '1').  Subsequent\n\
    \      Hello packets will include only incremental state.\n   Routers that are\
    \ neighboring with a restarting router MUST continue\n   sending their Hello packets\
    \ with the I-bit set.\n"
- title: 3.3.  Optimized Flooding (Overlapping Relays)
  contents:
  - "3.3.  Optimized Flooding (Overlapping Relays)\n   A component that may influence\
    \ the scalability and convergence\n   characteristics of OSPF ([OSPF], [OSPFv3])\
    \ in a MANET environment is\n   how much information needs to be flooded.  The\
    \ ideal solution is that\n   a router will receive a particular routing update\
    \ only once.\n   However, there must be a trade-off between protocol complexity\
    \ and\n   ensuring that every speaker in the network receives all of the\n   information.\
    \  Note that a speaker refers to any node in the network\n   that is running the\
    \ routing protocol and transmitting routing updates\n   and Hello messages.\n\
    \   Controlling the amount of information on the link has increased\n   importance\
    \ in a MANET environment due to the potential transmission\n   costs and resource\
    \ availability in general.\n   In some environments, a group of speakers that\
    \ share the same logical\n   segment may not be directly visible to each other;\
    \ some of the\n   possible causes are the following: low signal strength, long\
    \ distance\n   separation, environmental disruptions, partial VC (virtual circuit)\n\
    \   meshing, etc.  In these networks, a logical segment refers to the\n   local\
    \ flooding domain dynamically determined by transmission radius.\n   In these\
    \ situations, some speakers (the ones not able to directly\n   reach the sender)\
    \ may never be able to synchronize their databases.\n   To solve the synchronization\
    \ issues encountered in these\n   environments, a mechanism is needed through\
    \ which all the nodes on\n   the same logical segment can receive the routing\
    \ information,\n   regardless of the state of their adjacency to the source.\n"
- title: 3.3.1.  Operation Overview
  contents:
  - "3.3.1.  Operation Overview\n   The optimized flooding operation relies on the\
    \ ability of a speaker\n   to advertise all of its locally connected neighbors.\
    \  In OSPF, this\n   ability is realized through the use of link state advertisements\n\
    \   (LSA)s ([OSPF], [OSPFv3]).\n   A speaker receives router-LSAs from its adjacent\
    \ neighbors.  A\n   speaker's router-LSA conveys the list of the adjacent speakers\
    \ of the\n   originator (\"neighbor list\").  The local speaker can compare the\n\
    \   neighbor list reported by each speaker to its own neighbor list.  If\n   the\
    \ local neighbor list contains adjacent speakers that the\n   originator cannot\
    \ reach directly (i.e., those speakers that are not\n   in the originator's neighbor\
    \ list), then these speakers are locally\n   known as non-overlapping neighbors\
    \ for the originator.\n   The local speaker should relay any routing information\
    \ to non-\n   overlapping neighbors of the sender based on the algorithm outlined\n\
    \   in Section 3.3.8.  Because more than one such speaker may exist, the\n   mechanism\
    \ is called \"overlapping relays\".  The algorithm, however,\n   does select the\
    \ set of overlapping relays that should transmit first.\n   This set is known\
    \ as the active set of overlapping relays for a\n   speaker.\n"
- title: 3.3.2.  Determination of Overlapping Relays
  contents:
  - "3.3.2.  Determination of Overlapping Relays\n   The first step in the process\
    \ is for each speaker to build and\n   propagate their neighbor lists in router-LSA\
    \ packets.  Every speaker\n   is then in a position to determine their 2-hop neighborhood,\
    \ i.e.,\n   those nodes that are neighbors of the speaker's 1-hop neighbors.\n\
    \   A bidirectional neighbor is considered an overlapping relay for a\n   speaker\
    \ if it can reach a node in the 2-hop neighborhood of the\n   speaker, i.e., if\
    \ it has 1-hop neighbors (excluding the speaker\n   itself).\n   The set of Active\
    \ Overlapping Relays for a speaker is the minimum set\n   of direct neighbors\
    \ such that every node in the 2-hop neighborhood of\n   the speaker is a neighbor\
    \ of at least one overlapping relay in the\n   active set.\n   Each speaker SHOULD\
    \ select a set of Active Overlapping Relays based\n   on a selection algorithm\
    \ (one such algorithm is suggested in\n   Section 3.3.4 and is based on the multipoint\
    \ relay (MPR) selection\n   algorithm described in [OLSR]).  The behavior of the\
    \ overlapping\n   relays MUST follow that specified in Section 3.3.8.\n   Note\
    \ that a speaker MUST NOT choose a neighbor to serve as an Active\n   Overlapping\
    \ Relay if that neighbor set the N-bit in its Active\n   Overlapping Relay TLV\
    \ as defined in Section 3.3.6, unless the\n   neighbor is the only neighbor to\
    \ reach a 2-hop neighbor.\n   Election of Active Overlapping Relays is done across\
    \ interfaces, and\n   thus, it is node-based and not link-based.\n"
- title: 3.3.3.  Terminology
  contents:
  - "3.3.3.  Terminology\n   The following heuristic and terminology for Active Overlapping\
    \ Relay\n   selection is largely taken from [OLSR]:\n   o  FULL: Neighbor state\
    \ FULL as defined in [OSPF] and [OSPFv3].  Note\n      that all neighbor references\
    \ in this document are assumed to be\n      FULL neighbors.\n   o  N: N is the\
    \ set of FULL neighbors of the node.\n   o  2-hop FULL neighbors (N2): The list\
    \ of 2-hop neighbors of the node\n      that are FULL and that can be reached\
    \ from direct neighbors,\n      excluding any directly connected neighbors.\n\
    \   o  Active Set: A (sub)set of the neighbors selected, such that\n      through\
    \ these selected nodes, all 2-hop FULL neighbors are\n      reachable.\n   o \
    \ D(y): The degree of a 1-hop neighbor node y (where y is a member\n      of N)\
    \ is defined as the number of FULL neighbors of node y,\n      EXCLUDING all the\
    \ members of N and EXCLUDING the node performing\n      the computation.\n"
- title: 3.3.4.  Overlapping Relay Discovery Process
  contents:
  - "3.3.4.  Overlapping Relay Discovery Process\n   A possible algorithm for discovering\
    \ overlapping relays is the\n   following:\n   1. Start with an active set made\
    \ of all members of N that have set\n      the A-bit in their Active Overlapping\
    \ Relay TLV (AOR TLV) as\n      defined in Section 3.3.6.\n   2. Calculate D(y),\
    \ where y is a member of N, for all nodes in N.\n   3. Add to the active set those\
    \ nodes in N, which are the *only* nodes\n      to provide reachability to a node\
    \ in N2, i.e., if node b in N2 can\n      be reached only through a symmetric\
    \ link to node a in N, then add\n      node a to the active set.  Remove the nodes\
    \ from N2 that are now\n      covered by a node in the active set.\n   4. While\
    \ there exist nodes in N2 that are not covered by at least one\n      node in\
    \ the active set:\n      A. For each node in N, calculate the reachability, i.e.,\
    \ the\n         number of nodes in N2 that are not yet covered by at least one\n\
    \         node in the active set and that are reachable through this\n       \
    \  1-hop neighbor.\n      B. Select as an Active Overlapping Relay the node with\
    \ the highest\n         Willingness value (Section 3.3.7) among the nodes in N\
    \ with\n         non-zero reachability.  In the case of multiple choices, select\n\
    \         the node that provides reachability to the maximum number of\n     \
    \    nodes in N2.  In the case of multiple nodes providing the same\n        \
    \ amount of reachability, select as active the node whose D(y) is\n         greater.\
    \  As a final tie breaker, the node with the highest\n         router ID should\
    \ be chosen.  Remove the nodes from N2 that are\n         now covered by a node\
    \ in the active set.\n   5. As an optimization, process each node, y, in the active\
    \ set in\n      increasing order of Willingness value.  If all nodes in N2 are\n\
    \      still covered by at least one node in the active set, excluding\n     \
    \ node y, and if Willingness of node y is smaller than\n      MAX_WILLINGNESS,\
    \ then node y should be removed from the active\n      set.\n"
- title: 3.3.5.  The F Option Bit
  contents:
  - "3.3.5.  The F Option Bit\n   A single new option bit, the F-bit, is defined in\
    \ the LLS Type 1\n   Extended Options and Flags field.  The F-bit indicates that\
    \ the node\n   supports the optimized flooding mechanism as specified in this\n\
    \   document.  See Section 5 for placement of the F-bit.\n"
- title: 3.3.6.  Active Overlapping Relay TLV (AOR TLV)
  contents:
  - "3.3.6.  Active Overlapping Relay TLV (AOR TLV)\n   A new TLV is defined so that\
    \ each speaker can convey its set of\n   Active Overlapping Relays in the Hello\
    \ messages.  The TLV is\n   transmitted using LLS [LLS].\n       0           \
    \        1                   2                   3\n       0 1 2 3 4 5 6 7 8 9\
    \ 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |         Type                  |        Length                 |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \  Relays Added |A|N|           Reserved                        |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |    Router ID(s) of Active Overlapping Relay(s)                |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \                              ...                              |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   o  Type: 10\n   o  Length - variable.  Length of TLV in bytes, NOT including\
    \ Type and\n      Length.\n   o  Relays Added - variable.  Number of Active Overlapping\
    \ Relays that\n      are being added.  Note that the number of Active Overlapping\n\
    \      Relays that are being dropped is then given by\n      [(Length - 4)/4 -\
    \ Relays Added].\n   o  A-bit - If this bit is set, the node is specifying that\
    \ it will\n      always flood routing updates that it receives, regardless of\n\
    \      whether it is selected as an Active Overlapping Relay.\n   o  N-bit - If\
    \ this bit is set, the node is specifying that it most\n      likely will not\
    \ flood routing updates.  The node SHOULD NOT be\n      chosen to be an Active\
    \ Overlapping Relay unless it is the *only*\n      neighbor that can reach 2-hop\
    \ neighbor(s).  Note that if the node\n      is selected as an Active Overlapping\
    \ Relay and the node cannot\n      perform the required duties, network behavior\
    \ is not compromised,\n      since it results in the same behavior as if the node\
    \ was not\n      chosen as an Active Overlapping Relay.\n   o  Reserved - Reserved\
    \ for future use. MUST be set to zero by the\n      sender, and MUST be ignored\
    \ upon receipt.\n   o  Router ID(s) of Active Overlapping Relay(s) - The router\
    \ ID(s) of\n      neighbor(s) that are either chosen to serve as an Active\n \
    \     Overlapping Relay or removed from serving as an Active Overlapping\n   \
    \   Relay.  The Active Overlapping Relays that are being added MUST be\n     \
    \ listed first, and the number of such relays MUST equal Add Length.\n      The\
    \ remaining listed relays are being dropped as Active\n      Overlapping Relays,\
    \ and the number of such relays MUST equal\n      [(Length - 4)/4 - Relays Added].\n\
    \   Note that the A-bit and N-bit are independent of any particular\n   selection\
    \ algorithm to determine the set of Active Overlapping\n   Relays.  However, the\
    \ bits SHOULD be considered as input into the\n   selection algorithm.\n   If\
    \ a node is selected as an Active Overlapping Relay and it does not\n   support\
    \ the Incremental Hello mechanism defined in Section 3.2, then\n   it SHOULD always\
    \ be included as an Active Overlapping Relay in the\n   TLV.  Note that while\
    \ a node needs to know whether it is an Active\n   Overlapping Relay, it does\
    \ not necessarily have to know the\n   identities of the other Active Overlapping\
    \ Relays.\n"
- title: 3.3.7.  Willingness TLV
  contents:
  - "3.3.7.  Willingness TLV\n   A new TLV is defined so that each speaker can convey\
    \ its willingness\n   to serve as an Active Overlapping Relay in the Hello message.\
    \  The\n   TLV is transmitted using the LLS [LLS].\n       0                 \
    \  1                   2                   3\n       0 1 2 3 4 5 6 7 8 9 0 1 2\
    \ 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |         Type                  |        Length                 |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \   Willingness |                       Reserved                |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   o  Type: 11\n   o  Length - 4 bytes.  It does not include the Type and Length\
    \ fields.\n   o  Willingness - 1 byte to indicate the willingness of the node\
    \ to\n      serve as an Active Overlapping Relay for its neighbors.\n        \
    \ *  0: MIN_WILLINGNESS\n         *  128: DEFAULT_WILLINGNESS\n         *  255:\
    \ MAX_WILLINGNESS\n   The TLV is optional and MUST be silently ignored if not\
    \ understood.\n   If the Willingness TLV is not included in the Hello packet,\
    \ the\n   Willingness value SHOULD be taken as DEFAULT_WILLINGNESS.\n"
- title: 3.3.8.  Flooding and Relay Decisions
  contents:
  - "3.3.8.  Flooding and Relay Decisions\n   The decision whether to relay any received\
    \ LSAs, and when to relay\n   such information, is made depending on the topology\
    \ and whether the\n   node is part of the set of Active Overlapping Relays.\n\
    \   Upon receiving an LSA from a bi-directional neighbor, a node makes\n   flooding\
    \ decisions based on the following algorithm:\n   1. If the node is an Active\
    \ Overlapping Relay for the adjacent\n      speaker, then the router SHOULD immediately\
    \ relay any information\n      received from the adjacent speaker.\n   2. If the\
    \ node is a non-Active Overlapping Relay for the adjacent\n      speaker, then\
    \ the router SHOULD wait a specified amount of time\n      (PushbackInterval plus\
    \ jitter (see Section 3.3.10)) to decide\n      whether to transmit.  [Jitter\
    \ is used to try to avoid several non-\n      Active Overlapping Relays from propagating\
    \ redundant information.]\n      Note that a node with the N-bit set in the 'Active\
    \ Overlapping\n      Relays' extension will not be chosen as an Active Overlapping\n\
    \      Relay unless it is the only node to provide reachability to a\n      2-hop\
    \ neighbor.  However, it MUST perform the duties of a non-\n      Active Overlapping\
    \ Relay as required.  Non-Active Overlapping\n      Relays MUST follow the acknowledgment\
    \ mechanism outlined in\n      Section 3.3.9.\n      A. During this time, if the\
    \ node determines that flooding the LSA\n         will only result in a redundant\
    \ transmission, the node MUST\n         suppress its transmission.  Otherwise,\
    \ it MUST transmit upon\n         expiration of PushbackInterval plus jitter.\n\
    \      B. If a non-Active Overlapping Relay hears a re-flood from another\n  \
    \       node that covers its non-overlapping neighbors before its timer\n    \
    \     to transmit expires, it SHOULD reset its PushbackInterval plus\n       \
    \  jitter timer.  (Note that the implementation should take care\n         to\
    \ avoid resetting the PushbackInterval timer based on\n         transmissions\
    \ from Active Overlapping Relays.)  During this\n         time, if the node determines\
    \ that flooding the update will only\n         result in a redundant transmission,\
    \ the node MUST suppress its\n         transmission.  Otherwise, it MUST transmit\
    \ upon expiration of\n         PushbackInterval plus jitter.\n      C. If a non-Active\
    \ Overlapping Relay hears an old instance of the\n         LSA during this time,\
    \ it SHOULD ignore the LSA, and it SHOULD\n         NOT send a unicast packet\
    \ to the neighbor with the most recent\n         LSA as specified in [OSPFv3].\n\
    \   3. For LSAs that are received unicast because of retransmission by\n     \
    \ the originator, the node MUST determine whether it has already\n      received\
    \ the LSA from another speaker.  If it already has the\n      current instance\
    \ of the LSA in its database, it MUST do nothing\n      further in terms of flooding\
    \ the LSA (since it would have taken\n      appropriate action when it initially\
    \ received the LSA).  However,\n      if it does not have the current instance\
    \ of the LSA in its\n      database, it MUST take action according to the rules\
    \ above, just\n      as if it received the multicast LSA.  The acknowledgment\
    \ mechanism\n      outlined in Section 3.3.9 MUST be followed, and any timeout\n\
    \      mechanism for unicast LSAs MAY be followed.\n   Note that a node can determine\
    \ whether further flooding an LSA will\n   only result in a redundant transmission\
    \ by already having heard link\n   state acknowledgments (ACKs) or floods for\
    \ the LSA from all of its\n   neighbors.\n   Due to the dynamic nature of a network,\
    \ the set of Active Overlapping\n   Relays may not be up to date at the time the\
    \ relay decision is made\n   or may not be able to perform the flooding duties,\
    \ e.g., due to poor\n   link quality.  The non-Active Overlapping Relays prevent\
    \ this\n   situation from causing database synchronization issues and, thus,\n\
    \   packet loss.\n   Since the originator of the information, the relay, and the\
    \ receiver\n   are all in the same dynamically determined local flooding domain,\
    \ the\n   relay MUST NOT change the routing update information.  In general,\n\
    \   LSAs SHOULD be sent to a well-known multicast address.  In some\n   cases,\
    \ routing updates MAY be sent using unicast packets.\n"
- title: 3.3.9.  Intelligent Transmission of Link State Acknowledgments
  contents:
  - "3.3.9.  Intelligent Transmission of Link State Acknowledgments\n   In order to\
    \ optimize the bandwidth utilization on the link, a speaker\n   MUST follow these\
    \ recommendations related to ACK transmissions:\n   1. All ACKs MUST be sent via\
    \ multicast.\n   2. Typically, LSAs are acknowledged by all of the adjacent speakers.\n\
    \      In the case of relayed information, the relay MUST only expect\n      either\
    \ explicit or implicit acknowledgments from neighbors that\n      have not previously\
    \ acknowledged this LSA.\n   3. Because routing updates are sent via multicast,\
    \ the set of\n      overlapping speakers will usually receive the same update\
    \ more\n      than once.  A speaker SHOULD only acknowledge the first update\n\
    \      received on the link.\n   4. An Active Overlapping Relay SHOULD NOT explicitly\
    \ acknowledge\n      information that it is relaying.  The relayed information\
    \ will\n      serve as an acknowledgment to the sender.  If no information is\n\
    \      being relayed, then an explicit ACK MUST be sent.\n   5. Several ACKs MAY\
    \ be bundled into a single packet.  The wait\n      (AckInterval) before sending\
    \ one such packet reduces the number of\n      packet transmissions required in\
    \ acknowledging multiple LSAs.\n   6. All ACK packets SHOULD reset the RouterDeadInterval\
    \ at the\n      receiver.  If there is no state waiting to be transmitted in a\n\
    \      Hello packet at the sender, then the HelloInterval at the sender\n    \
    \  SHOULD be reset.  Note that an ACK serves as a Hello packet with\n      no\
    \ state change.\n   7. Any LSA received via unicast MUST be acknowledged.  (Note\
    \ that\n      acknowledgment is via multicast as specified in rule (1) above.)\n\
    \   An ACK received from a non-overlapping neighbor should prevent\n   redundant\
    \ transmission of the information to it by another\n   overlapping relay.\n"
- title: 3.3.10.  Important Timers
  contents:
  - "3.3.10.  Important Timers\n   This section details the timers that were introduced\
    \ in Sections\n   3.3.8 and 3.3.9.\n   o  PushbackInterval: The length of time\
    \ in seconds that a non-Active\n      Overlapping Relay SHOULD wait before further\
    \ flooding an LSA if\n      needed.  This timer MUST be less than 1/2 of the RxmtInterval\n\
    \      ([OSPF], [OSPFv3]) minus propagation delays, i.e.,\n      (PushbackInterval\
    \ + propagation delay) < RxmtInterval/2.  The\n      PushbackInterval is set by\
    \ a non-Active Overlapping Relay upon\n      receipt of an LSA.\n   o  AckInterval:\
    \ After a node determines that it must transmit an ACK\n      and the AckInterval\
    \ timer is not already set, the node SHOULD set\n      the AckInterval timer.\
    \  The AckInterval is the length of time in\n      seconds that a node should\
    \ wait in order to transmit many ACKs in\n      the acknowledgment packet.  This\
    \ wait reduces the number of packet\n      transmissions required in acknowledging\
    \ multiple LSAs.  The\n      AckInterval MUST be less than the PushbackInterval\
    \ minus\n      propagation delays, i.e.,\n      (AckInterval + propagation delay)\
    \ < PushbackInterval.\n"
- title: 3.3.11.  Miscellaneous Protocol Considerations
  contents:
  - "3.3.11.  Miscellaneous Protocol Considerations\n   The mechanism described refers\
    \ to the operation of relays on a common\n   media segment.  In other words, an\
    \ LSA is only relayed out the same\n   interface through which it was received.\
    \  However, the concept of\n   information relay may be extended to the flooding\
    \ of all link state\n   advertisements received on any interface (and forwarded\
    \ on any other\n   interface).  OSPF works on the premise that all of the nodes\
    \ in a\n   flooding domain will receive all of the routing information.  Note\n\
    \   that one of the important properties is that the routing information\n   is\
    \ not altered when relayed.\n   If each speaker advertised all of its adjacent\
    \ neighbors on all\n   interfaces, then the overlap check would result in the\
    \ determination\n   of which speakers are adjacent to both speakers.  As a result,\
    \ link\n   state information should only be flooded to non-overlapping neighbors\n\
    \   (taking all of the interfaces into account).\n   The flooding mechanism in\
    \ OSPF relies on a designated router to\n   guarantee that any new LSA received\
    \ by one router attached to the\n   broadcast network will be re-flooded properly\
    \ to all the other\n   routers attached to the broadcast network.  Such designated\
    \ routers\n   must be able to reach all of the other speakers on the same subnet.\n\
    \   A designated router SHOULD NOT be elected if overlapping relays are\n   used.\n\
    \   If such designated routers already exist, then the relays MUST be\n   capable\
    \ of differentiating them and then making the relaying\n   decisions based on\
    \ the OSPF's normal operation.  As a result, there\n   may be groups of neighbors\
    \ to which some information should not be\n   relayed.  This mode of operation\
    \ is NOT RECOMMENDED, as it adds to\n   the complexity of the system.\n   The\
    \ intent of the overlapping relay mechanism is to optimize flooding\n   of routing\
    \ control information.  However, other information (such as\n   data) may also\
    \ be relayed in some networks using the same mechanism.\n"
- title: 3.3.12.  Interoperability
  contents:
  - "3.3.12.  Interoperability\n   On receiving a Hello packet from a new neighbor\
    \ without the F-bit\n   set, the local router will assume that the new neighbor\
    \ will flood\n   normally as described in [OSPFv3].  Thus, the local router SHOULD\n\
    \   include the neighbor in its overlapping relay set since the neighbor\n   will\
    \ flood by default.  This will allow the local router to more\n   optimally select\
    \ its entire overlapping relay set.\n   If the F-bit is set and the I-bit as defined\
    \ in Section 3.2 is not\n   set in the neighbor's Hello, and the neighbor is selected\
    \ as an\n   overlapping relay by the local router, the local router will continue\n\
    \   to include the neighbor's identifier in its active relay set.\n"
- title: 3.4.  New Bits in LLS Type 1 Extended Options and Flags
  contents:
  - "3.4.  New Bits in LLS Type 1 Extended Options and Flags\n   Two new option bits\
    \ are defined in the \"LLS Type 1 Extended Options\n   and Flags\" Field [LLS]\
    \ as follows:\n   o  I-bit - defined in Section 3.2.1: The I-bit is only defined\
    \ for\n      Hello packets and indicates that only incremental information is\n\
    \      present.\n   o  F-bit - defined in Section 3.3.5: The F-bit indicates that\
    \ the\n      node supports the optimized flooding mechanism as specified in\n\
    \      this document.\n"
- title: 3.5.  Smart Peering
  contents:
  - "3.5.  Smart Peering\n   There is significant overhead in OSPF when a router has\
    \ to establish\n   adjacencies with every peer with whom it can verify 2-way\n\
    \   connectivity.  OSPF supports the broadcast network type for these\n   scenarios,\
    \ where you only have to peer with the designated router\n   (DR).  However, a\
    \ full mesh of connectivity is required for proper\n   operation, and this doesn't\
    \ help in networks with overlapping partial\n   meshes of connectivity.  This\
    \ document proposes a technique to reduce\n   the number of adjacencies based\
    \ on shortest path tree (SPT)\n   reachability information.\n"
- title: 3.5.1.  Rationale for Smart Peering
  contents:
  - "3.5.1.  Rationale for Smart Peering\n   In OSPF ([OSPF], [OSPFv3]), nodes establish\
    \ an adjacency by first\n   verifying 2-way connectivity between them and then\
    \ synchronizing\n   their link state databases.  Once the peering relationship\
    \ is\n   complete and the adjacency is established, the nodes will continue to\n\
    \   advertise each other in their LSAs.  As a result, the peers are\n   maintained\
    \ in the link state database and are included in all SPF\n   (Shortest Path First)\
    \ calculations.  During the reliable flooding\n   process, a node must ensure\
    \ that each peer has indeed received the\n   flooded routing update via an acknowledgment\
    \ and retransmission\n   mechanism.\n   Consequently, maintaining an adjacency\
    \ for a particular peer is a\n   trade-off between the added redundancy in routing\
    \ paths and network\n   reachability versus the associated overhead (memory consumption,\
    \ SPF\n   computations, routing overhead, and network convergence).\n   Consider\
    \ the possibility of reducing the number of adjacencies that a\n   node maintains\
    \ without compromising reachability and redundancy.\n   This will have direct\
    \ implications on network scalability and is\n   especially attractive in environments\
    \ where the network topology is\n   dynamic.  For example, in a mobile ad hoc\
    \ network (MANET), where\n   nodes are mobile and the topology is constantly changing,\
    \ it seems\n   highly desirable to 'intelligently' become adjacent with only\n\
    \   selected peers and not establish a peering session with every node\n   that\
    \ comes within transmission range.  Selective peering can be\n   particularly\
    \ useful in avoiding the peering process for unstable\n   nodes, i.e., nodes that\
    \ come in and out of transmission range.\n"
- title: 3.5.2.  Previous Related Work
  contents:
  - "3.5.2.  Previous Related Work\n   The formation of a FULL adjacency requires\
    \ discovery (2-way\n   relationship) and database synchronization.  To prevent\
    \ achieving the\n   FULL state, others have taken the approach of modifying link\
    \ state\n   protocols to use periodic advertisements (instead of a database\n\
    \   exchange).  The result is that neighbor discovery is still required,\n   but\
    \ routing information is learned over time.  An example of this\n   approach is:\n\
    \   o  OSPFv2 Wireless Interface Type [WINTF]\n      *  where the use of periodic\
    \ advertisements \"eliminates the\n         formation of full adjacencies on wireless\
    \ interfaces; all\n         neighbor states beyond 2-Way are not reached,and no\
    \ database\n         synchronization is performed\".\n   What we propose in this\
    \ specification goes a step further by not\n   requiring the formation and maintenance\
    \ of neighbor state (2-way, or\n   other) *and* without changing the route distribution\
    \ mechanisms in\n   the link state protocols.  In other words, the mechanism described\
    \ is\n   completely backward compatible.\n"
- title: 3.5.3.  Smart Peering Solution
  contents:
  - "3.5.3.  Smart Peering Solution\n   Two routers are defined as synchronized when\
    \ they have identical link\n   state databases.  To limit the number of neighbors\
    \ that are formed,\n   an algorithm is needed to select which neighbors with whom\
    \ to peer.\n   The algorithm MUST provide reachability to every possible destination\n\
    \   in the network, just as when normal adjacency formation processes are\n  \
    \ used.  We should always peer with a neighbor if it provides our only\n   path\
    \ to currently unreachable destinations.\n"
- title: 3.5.3.1.  SPT Reachability Heuristics
  contents:
  - "3.5.3.1.  SPT Reachability Heuristics\n   The peering decision is really a local\
    \ matter to a router.  If a\n   router can ensure that reachability to other nodes\
    \ is available\n   without bringing up a new adjacency, it can choose not to bring\
    \ up\n   the new adjacency.\n   We propose an algorithm that uses the existing\
    \ information about a\n   new neighbor's reachability in the SPT.  If the two\
    \ routers can\n   already reach each other in the SPT, it is not necessary to\
    \ form an\n   adjacency between them.\n   The decision to peer or not is made\
    \ when a Hello is received.  When a\n   Hello is received from a new neighbor\
    \ or a neighbor in a state lower\n   than Exchange:\n   o  A check is made in\
    \ the link state database to see if the peer is\n      already reachable in the\
    \ SPT.\n      *  If the peer is either not known in the SPT or is not reachable,\n\
    \         we start the Exchange process.\n      *  If the peer is reachable, then\
    \ bringing up adjacency with this\n         neighbor does not provide reachability\
    \ to any new destinations.\n   Let's take an example of a single OSPF area.  This\
    \ check would look\n   for the neighbor's router-LSA.  If the LSA is present in\
    \ the database\n   and is reachable in the SPT, we have a chance to suppress adjacency\n\
    \   formation.\n   It's worth noting that as the number of links and redundancy\
    \ in the\n   network is reduced, the likelihood of suboptimal routing increases.\n"
- title: 3.5.3.2.  State Machine
  contents:
  - "3.5.3.2.  State Machine\n   The state machine of a basic implementation of this\
    \ algorithm is\n   provided below.  An implementation MAY use some heuristics\
    \ (Step (3)\n   below), beyond the SPT reachability, to decide whether or not\
    \ it\n   considers a new adjacency to be of value.\n                        ......................\n\
    \                        |Receive a Hello     |\n                    (1) |from\
    \ a new potential|\n                        |neighbor            |\n         \
    \               '`''''''''''''''''''''\n                                  |\n\
    \                                  |\n                                  |\n  \
    \                      ,''''''''''''''''''''''|\n                        |Check\
    \ to see if there |\n                    (2) |is a router-LSA from  |----no--(4)form\
    \ a\n                        |the new potential     |          new\n         \
    \               |neighbor in the link  |          neighbor\n                 \
    \       |state database, which |\n                        |is reachable in SPT\
    \   |\n                        '`''''''''''''''''''''''\n                    \
    \              |\n                                  |yes\n         (3)       \
    \               |\n      ,'''''''''''''''''''''''''''''''''''''''''''''''''''''''''|\n\
    \      |                            (3b)........................ |\n      |(3a),______________________\
    \     |Determine if the      | |\n      |    |Determine if the new |     |number\
    \ of redundant   | |\n      |    |link cost is better  |     |paths to the potential|\
    \ |\n      |    |than the current path|     |neighbor is < the     | |\n     \
    \ |    |cost by a configured |     |maximum configured    | |\n      |    |amount\
    \               |     |value                 | |\n      |    '`'''''''''''''''''''''\
    \     '`'''''''''''''''''''''' |\n      |                       \\           \
    \  /                   |\n      |                   .....\\.........../....  \
    \              |\n      |                   |User configurable   |           \
    \     |\n      |                   |selection algorithm |                |\n \
    \     |                   '`'''/'''''''\\''''''''                |\n      |  \
    \                     /         \\                       |\n      '`'''''''''''''''''''''/'''''''''''\\\
    '''''''''''''''''''''''\n                            /             \\\n      \
    \               requirements     requirements\n                        met   \
    \           not met\n                        /                    \\\n       \
    \                /                      \\\n           (4) form a new neighbor\
    \      (5) do not become\n                                            neighbors\n"
- title: 3.5.4.  Advertising 2-Way Links in Router-LSAs
  contents:
  - "3.5.4.  Advertising 2-Way Links in Router-LSAs\n   The technique described in\
    \ Section 3.5.3 minimizes the number of\n   adjacencies in highly meshed environments.\
    \  This is especially useful\n   when the network is in motion and the average\
    \ adjacency lifetime is\n   small.\n   However, it suffers from an undesirable\
    \ side effect of limiting the\n   number of transit links available to forward\
    \ traffic.\n   An implementation may choose to allow some (or even all) of these\n\
    \   2-way state neighbors to be announced in the router-LSA.  Since the\n   state\
    \ remains 2-way, we don't incur control plane (database sync and\n   flooding)\
    \ overhead.  However, advertising the link in the router-LSA\n   makes the link\
    \ available to the data plane.\n   This can be safely done if the neighbor is\
    \ reachable in a special SPT\n   constructed by ignoring any other 2-way links\
    \ in the network.  This\n   optional optimization is described below.\n"
- title: 3.5.4.1.  Unsynchronized Adjacencies
  contents:
  - "3.5.4.1.  Unsynchronized Adjacencies\n   If the new neighbor is already reachable\
    \ in the SPT, there is no\n   urgency in doing a full database sync with it. \
    \ These are the steps\n   we need to perform when a neighbor has reached 2-way\
    \ state.\n   Note that when we say \"SPT\" in this section, we mean the special\
    \ SPT\n   constructed based on rules in Section 3.5.4.2.\n   o  After a 2-WayReceived\
    \ event, check if the neighbor is reachable in\n      the SPT.  If yes, mark the\
    \ neighbor as FULL with respect to link\n      advertisement.\n   o  This means\
    \ that the router-LSA or network-LSA link corresponding\n      to the neighbor\
    \ is advertised as if the neighbor is FULL.\n   o  The adjacency information is\
    \ constructed with the U-bit (see\n      below).\n   o  Database synchronization\
    \ is postponed:\n         *  By a configured amount of time -OR-\n         * \
    \ Until the time it's absolutely \"necessary\"\n   In either case, if a database\
    \ sync is currently pending, it is\n   started as soon as we detect that the neighbor\
    \ is no longer reachable\n   in the SPT.  The database sync can be done by Out-of-Band\
    \ Sync [OOB],\n   which maintains the current adjacency and does the sync in the\n\
    \   background.  A normal resync can alternately be done with the\n   drawback\
    \ of adjacency flap.\n   In standard OSPF, we first bring up adjacency and then\
    \ announce a\n   transit link.  The approach described above allows the link to\
    \ be\n   used as a forwarding path very quickly and still allows the database\n\
    \   to be synchronized in a timely fashion when the alternate flooding\n   path\
    \ has recently been broken.\n   There is a circular dependency issue that also\
    \ needs to be resolved.\n   Once you start announcing the link, the shortest path\
    \ will likely be\n   via this very link.  So it's non-trivial to detect when the\
    \ alternate\n   dependent path is gone.  We would like to be able to detect that\
    \ the\n   neighbor is reachable via a path that doesn't traverse an\n   unsynchronized\
    \ path.\n   We have generally solved this class of problems by running an SPF\
    \ and\n   pretending that the link in question doesn't exist.  It doesn't\n  \
    \ require a full SPF, but just enough to see if ANY other path is\n   available\
    \ to reach the neighbor.  The worst case is when the\n   alternate path is really\
    \ gone, which we find that out by building a\n   full SPT.  This needs to be done\
    \ every time the link state database\n   changes, and for EACH link that has SPT\
    \ dependence for its viability.\n   This approach has scalability concerns and\
    \ is not considered further\n   here.\n   We can achieve the same results with\
    \ just ONE additional SPF that is\n   capable of ignoring these Unsynchronized\
    \ links.  The result from this\n   SPT can be used to satisfy the reachability\
    \ condition for ANY number\n   of Unsynchronized Adjacencies.  This basically\
    \ requires that we can\n   actually tell the difference between a normal FULL\
    \ adjacency and this\n   new Unsynchronized Adjacency.  We can do this in one\
    \ of two ways:\n   (A) Defining LD Options and using a bit in it, as shown below:\n\
    \      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   \
    \   |     Type      |   LD Options  |          Metric               |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                      Interface ID                             |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \                   Neighbor Interface ID                       |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                    Neighbor Router ID                         |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      \
    \               Link Description in a Router-LSA\n      LD Options\n         Link\
    \ Description options.  Used to specify some special\n         capability or state\
    \ of a link.\n                               +-+-+-+-+-+-+-+-+\n             \
    \                  | | | | | | | |U|\n                               +-+-+-+-+-+-+-+-+\n\
    \                                   LD Options\n      U-bit\n         The \"Unsynchronized\"\
    \ bit.  This is set if the adjacency is\n         being announced before databases\
    \ are fully synchronized.\n      This approach is backward compatible, because\
    \ the only routers\n      looking at this bit are those that support the mechanisms\n\
    \      specified in this document.\n   (B) Introducing a new link type in router-LSA.\n\
    \      This is a much more complex solution, with backward compatibility\n   \
    \   concerns, due to the fact that unknown link type handling is not\n      defined\
    \ in the OSPF standard [OSPF].  Hence, this solution isn't\n      considered further.\n"
- title: 3.5.4.2.  Unsynchronized SPT
  contents:
  - "3.5.4.2.  Unsynchronized SPT\n   Whenever link state changes happen, we need\
    \ to run ONE additional SPF\n   by ignoring all links with the U-bit set.  This\
    \ SPT is then consulted\n   to see if any of our Unsynchronized Adjacencies need\
    \ to start\n   database sync.  This SPT is also consulted when a new neighbor\
    \ goes\n   into 2-way state to decide if we should form the adjacency\n   immediately\
    \ or defer it for later.\n"
- title: 3.5.4.3.  Flooding Considerations
  contents:
  - "3.5.4.3.  Flooding Considerations\n   One of the main goals in trying to delay\
    \ the database synchronization\n   is to be able to reduce unnecessary OSPF packets\
    \ traversing these\n   links.  Since the unsynchronized Adjacencies remain in\
    \ 2-way state,\n   OSPF updates will not be flooded over the corresponding interfaces,\n\
    \   resulting in additional savings.\n   An option is provided to enable or disable\
    \ flooding over these\n   Unsynchronized Adjacencies.  The advantage of allowing\
    \ flooding is\n   being able to use more links for control plane purposes.  We\
    \ will\n   still have the savings of not having to form the adjacency.\n"
- title: 3.5.4.4.  Overlapping Relay (OR) Election Impact
  contents:
  - "3.5.4.4.  Overlapping Relay (OR) Election Impact\n   The overlapping relay election\
    \ algorithm uses the 2-hop neighborhood\n   it gleans from our neighbor's router-LSAs.\
    \  The introduction of\n   Unsynchronized Adjacencies needs to be considered in\
    \ the relay\n   election algorithm.\n   If flooding is enabled on unsynchronized\
    \ Adjacencies, no change is\n   needed in the relay election algorithm.  If flooding\
    \ is disabled,\n   then the relay election algorithm needs to prune neighbors\
    \ that are\n   connected via an Unsynchronized Adjacency from our 1-hop and 2-hop\n\
    \   neighbor lists.\n"
- title: 4.  Security Considerations
  contents:
  - "4.  Security Considerations\n   In a MANET, security is both more difficult and\
    \ important, due to the\n   wireless nature of the medium.  Controlling the ability\
    \ of devices to\n   connect to a MANET at Layer 2 will be relegated to Layer 2\
    \ security\n   mechanisms, such as 802.1x, and others.  Controlling the ability\
    \ of\n   attached devices to transmit traffic will require some type of\n   security\
    \ system (outside the scope of this document) that can\n   authenticate, and provide\
    \ authorization for, individual members of\n   the routing domain.\n   Additional\
    \ security considerations are similar to any MANET protocol\n   extension.  The\
    \ following text is from [MDR]:\n   As with OSPFv3 [OSPFv3], OSPF-OR can use the\
    \ IPv6 Authentication\n   Header (AH) [AH] and/or the IPv6 Encapsulation Security\
    \ Payload (ESP)\n   [ESP] to provide authentication, integrity, and/or confidentiality.\n\
    \   The use of AH and ESP for OSPFv3 is described in [OSPFv3-SEC].\n   Generic\
    \ threats to routing protocols are described and categorized in\n   [THREATS].\
    \  The mechanisms described in [OSPFv3-SEC] provide\n   protection against many\
    \ of these threats, but not all of them.  In\n   particular, as mentioned in [OSPFv3],\
    \ these mechanisms do not provide\n   protection against compromised, malfunctioning,\
    \ or misconfigured\n   routers (also called Byzantine routers); this is true for\
    \ both OSPFv3\n   and OSPF-OR.\n   The extension of OSPFv3 to include MANET routers\
    \ does not introduce\n   any new security threats.  However, the use of a wireless\
    \ medium and\n   lack of infrastructure, inherent with MANET routers, may render\
    \ some\n   of the attacks described in [THREATS] easier to mount.  Depending on\n\
    \   the network context, these increased vulnerabilities may increase the\n  \
    \ need to provide authentication, integrity, and/or confidentiality, as\n   well\
    \ as anti-replay service.\n   For example, sniffing of routing information and\
    \ traffic analysis are\n   easier tasks with wireless routers than with wired\
    \ routers, since the\n   attacker only needs to be within the radio range of a\
    \ router.  The\n   use of confidentiality (encryption) provides protection against\n\
    \   sniffing but not traffic analysis.\n   Similarly, interference attacks are\
    \ also easier to mount against\n   MANET routers due to their wireless nature.\
    \  Such attacks can be\n   mounted even if OSPF packets are protected by authentication\
    \ and\n   confidentiality, e.g., by transmitting noise or replaying outdated\n\
    \   OSPF packets.  As discussed below, an anti-replay service (provided\n   by\
    \ both ESP and AH) can be used to protect against the latter attack.\n   The following\
    \ threat actions are also easier with MANET routers:\n   spoofing (assuming the\
    \ identity of a legitimate router),\n   falsification (sending false routing information),\
    \ and overloading\n   (sending or triggering an excessive amount of routing updates).\n\
    \   These attacks are only possible if authentication is not used, or the\n  \
    \ attacker takes control of a router or is able to forge legitimacy\n   (e.g.,\
    \ by discovering the cryptographic key).\n   [OSPFv3-SEC] mandates the use of\
    \ manual keying when current IPsec\n   protocols are used with OSPFv3.  Routers\
    \ are required to use manually\n   configured keys with the same security association\
    \ (SA) parameters\n   for both inbound and outbound traffic.  For MANET routers,\
    \ this\n   implies that all routers attached to the same MANET must use the same\n\
    \   key for multicasting packets.  This is required in order to achieve\n   scalability\
    \ and feasibility, as explained in [OSPFv3-SEC].  Future\n   specifications can\
    \ explore the use of automated key management\n   protocols that may be suitable\
    \ for MANETs.\n   As discussed in [OSPFv3-SEC], the use of manual keys can increase\n\
    \   vulnerability.  For example, manual keys are usually long lived, thus\n  \
    \ giving an attacker more time to discover the keys.  In addition, the\n   use\
    \ of the same key on all routers attached to the same MANET leaves\n   all routers\
    \ insecure against impersonation attacks if any one of the\n   routers is compromised.\n\
    \   Although [AH] and [ESP] state that implementations of AH and ESP\n   SHOULD\
    \ NOT provide anti-replay service in conjunction with SAs that\n   are manually\
    \ keyed, it is important to note that such service is\n   allowed if the sequence\
    \ number counter at the sender is correctly\n   maintained across local reboots\
    \ until the key is replaced.\n   Therefore, it may be possible for MANET routers\
    \ to make use of the\n   anti-replay service provided by AH and ESP.\n   When\
    \ an OSPF routing domain includes both MANETs and fixed networks,\n   the frequency\
    \ of OSPF updates either due to actual topology changes\n   or malfeasance could\
    \ result in instability in the fixed networks.  In\n   situations where this is\
    \ a concern, it is recommended that the border\n   routers segregate the MANETs\
    \ from the fixed networks with either\n   separate OSPF areas or, in cases where\
    \ legacy routers are very\n   sensitive to OSPF update frequency, separate OSPF\
    \ instances.  With\n   separate OSPF areas, the 5-second MinLSInterval will dampen\
    \ the\n   frequency of changes originated in the MANETs.  Additionally, OSPF\n\
    \   ranges can be configured to aggregate prefixes for the areas\n   supporting\
    \ MANETs.  With separate OSPF instances, more conservative\n   local policies\
    \ can be employed to limit the volume of updates\n   emanating from the MANETs.\n"
- title: 5.  IANA Considerations
  contents:
  - "5.  IANA Considerations\n   IANA has made the assignments as explained below\
    \ using the policies\n   outlined in [IANA].\n   o  I-bit and F-bit from \"LLS\
    \ Type 1 Extended Options and Flags\"\n      registry as defined below:\n   +---+---+---+---+---+---+---+-\
    \ -+---+---+---+---+---+---+---+---+\n   | * | * | * | * | * | * | * |...| * |\
    \ * | * | * | F | I | RS| LR|\n   +---+---+---+---+---+---+---+- -+---+---+---+---+---+---+---+---+\n\
    \                  Bits in Extended Options and Flags TLV\n   o  New TLV types\
    \ from the \"Link Local Signalling TLV Identifiers (LLS\n      Types)\" registry\
    \ as defined below:\n      TLV Name                      TLV Type\n      --------\
    \                      --------\n      State Check Sequence TLV          6\n \
    \     Neighbor Drop TLV                 7\n      Request From TLV            \
    \      8\n      Full State For TLV                9\n      Active Overlapping\
    \ Relay TLV      10\n      Willingness TLV                   11\n   o  A new registry\
    \ has been defined for LD Options as defined in\n      Section 3.5.4.1.  The U-bit\
    \ is allocated by this document.\n      All future additions to LD Options are\
    \ subject to OSPF WG review\n      and require IETF Review.\n"
- title: 6.  Contributors
  contents:
  - "6.  Contributors\n   The following persons are contributing authors to the document:\n\
    \   Fred Baker                         Dave Cook\n   Cisco Systems           \
    \           Cisco Systems\n   1121 Via Del Rey                   7025-4 Kit Creek\
    \ Road\n   Santa Barbara, CA 93117            Research Triangle Park, NC 27709\n\
    \   USA                                USA\n   EMail: fred@cisco.com         \
    \     EMail: dacook@cisco.com\n   Alvaro Retana                      Yi Yang\n\
    \   Cisco Systems                      Cisco Systems\n   7025-4 Kit Creek Road\
    \              7025-4 Kit Creek Road\n   Research Triangle Park, NC 27709   Research\
    \ Triangle Park, NC 27709\n   USA                                USA\n   EMail:\
    \ aretana@cisco.com           EMail: yiya@cisco.com\n   Russ White\n   Cisco Systems\n\
    \   7025-4 Kit Creek Road\n   Research Triangle Park, NC 27709\n   USA\n   EMail:\
    \ riw@cisco.com\n"
- title: 7.  Acknowledgments
  contents:
  - "7.  Acknowledgments\n   The authors and contributors would like to thank Pratap\
    \ Pellakuru and\n   Stan Ratliff for their feedback and implementation of the\
    \ document.\n   Thanks to Richard Ogier and John Avery for doing a final review.\n"
- title: 8.  References
  contents:
  - '8.  References

    '
- title: 8.1.  Normative References
  contents:
  - "8.1.  Normative References\n   [OSPF]         Moy, J., \"OSPF Version 2\", STD\
    \ 54, RFC 2328,\n                  April 1998.\n   [OSPFv3]       Coltun, R.,\
    \ Ferguson, D., Moy, J., and A. Lindem,\n                  \"OSPF for IPv6\",\
    \ RFC 5340, July 2008.\n   [LLS]          Zinin, A., Roy, A., Nguyen, L., Friedman,\
    \ B., and\n                  D. Yeung, \"OSPF Link-Local Signaling\", RFC 5613,\n\
    \                  August 2009.\n   [IANA]         Narten, T. and H. Alvestrand,\
    \ \"Guidelines for Writing\n                  an IANA Considerations Section in\
    \ RFCs\", BCP 26,\n                  RFC 5226, May 2008.\n   [KEY]          Bradner,\
    \ S., \"Key words for use in RFCs to Indicate\n                  Requirement Levels\"\
    , BCP 14, RFC 2119, March 1997.\n"
- title: 8.2.  Informative References
  contents:
  - "8.2.  Informative References\n   [IPV6ADD]      Hinden, R. and S. Deering, \"\
    IP Version 6 Addressing\n                  Architecture\", RFC 4291, February\
    \ 2006.\n   [OSPFGR]       Moy, J., Pillay-Esnault, P., and A. Lindem, \"Graceful\n\
    \                  OSPF Restart\", RFC 3623, November 2003.\n   [OSPFREST]   \
    \  Nguyen, L., Roy, A., and A. Zinin, \"OSPF Restart\n                  Signaling\"\
    , RFC 4812, March 2007.\n   [OOB]          Nguyen, L., Roy, A., and A. Zinin,\
    \ \"OSPF Out-of-Band\n                  Link State Database (LSDB) Resynchronization\"\
    ,\n                  RFC 4811, March 2007.\n   [OLSR]         Clausen, T., Ed.,\
    \ and P. Jacquet, Ed., \"Optimized Link\n                  State Routing Protocol\
    \ (OLSR)\", RFC 3626,\n                  October 2003.\n   [WINTF]        Ahrenholz\
    \ J., et al., \"OSPFv2 Wireless Interface\n                  Type\", Work in Progress,\
    \ May 2004.\n   [MDR]          Ogier, R. and P. Spagnolo, \"Mobile Ad Hoc Network\n\
    \                  (MANET) Extension of OSPF Using Connected Dominating\n    \
    \              Set (CDS) Flooding\", RFC 5614, August 2009.\n   [AH]         \
    \  Kent, S., \"IP Authentication Header\", RFC 4302,\n                  December\
    \ 2005.\n   [ESP]          Kent, S., \"IP Encapsulating Security Payload (ESP)\"\
    ,\n                  RFC 4303, December 2005.\n   [OSPFv3-SEC]   Gupta, M. and\
    \ N. Melam,\n                  \"Authentication/Confidentiality for OSPFv3\",\
    \ RFC 4552,\n                  June 2006.\n   [THREATS]      Barbir, A., Murphy,\
    \ S., and Y. Yang, \"Generic Threats\n                  to Routing Protocols\"\
    , RFC 4593, October 2006.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Abhay Roy (Editor)\n   Cisco Systems\n   170 W. Tasman\
    \ Drive\n   San Jose, CA 95134\n   USA\n   EMail: akr@cisco.com\n   Madhavi W.\
    \ Chandra (Editor)\n   113 Holmhurst Court\n   Cary, NC 27519\n   EMail: mw.chandra@gmail.com\n"
