- title: __initial_text__
  contents:
  - '         Concise Binary Object Representation (CBOR) Sequences

    '
- title: Abstract
  contents:
  - "Abstract\n   This document describes the Concise Binary Object Representation\n\
    \   (CBOR) Sequence format and associated media type \"application/cbor-\n   seq\"\
    .  A CBOR Sequence consists of any number of encoded CBOR data\n   items, simply\
    \ concatenated in sequence.\n   Structured syntax suffixes for media types allow\
    \ other media types to\n   build on them and make it explicit that they are built\
    \ on an existing\n   media type as their foundation.  This specification defines\
    \ and\n   registers \"+cbor-seq\" as a structured syntax suffix for CBOR\n   Sequences.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This\
    \ document is a product of the Internet Engineering Task Force\n   (IETF).  It\
    \ represents the consensus of the IETF community.  It has\n   received public\
    \ review and has been approved for publication by the\n   Internet Engineering\
    \ Steering Group (IESG).  Further information on\n   Internet Standards is available\
    \ in Section 2 of RFC 7841.\n   Information about the current status of this document,\
    \ any errata,\n   and how to provide feedback on it may be obtained at\n   https://www.rfc-editor.org/info/rfc8742.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2020 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (https://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction\n     1.1.  Conventions Used in This Document\n\
    \   2.  CBOR Sequence Format\n   3.  The \"+cbor-seq\" Structured Syntax Suffix\n\
    \   4.  Practical Considerations\n     4.1.  Specifying CBOR Sequences in Concise\
    \ Data Definition\n           Language (CDDL)\n     4.2.  Diagnostic Notation\n\
    \     4.3.  Optimizing CBOR Sequences for Skipping Elements\n   5.  Security Considerations\n\
    \   6.  IANA Considerations\n     6.1.  Media Type\n     6.2.  CoAP Content-Format\
    \ Registration\n     6.3.  Structured Syntax Suffix\n   7.  References\n     7.1.\
    \  Normative References\n     7.2.  Informative References\n   Acknowledgements\n\
    \   Author's Address\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   The Concise Binary Object Representation (CBOR) [RFC7049]\
    \ can be used\n   for serialization of data in the JSON [RFC8259] data model or\
    \ in its\n   own, somewhat expanded, data model.  When serializing a sequence\
    \ of\n   such values, it is sometimes convenient to have a format where these\n\
    \   sequences can simply be concatenated to obtain a serialization of the\n  \
    \ concatenated sequence of values or to encode a sequence of values\n   that might\
    \ grow at the end by just appending further CBOR data items.\n   This document\
    \ describes the concept and format of \"CBOR Sequences\",\n   which are composed\
    \ of zero or more encoded CBOR data items.  CBOR\n   Sequences can be consumed\
    \ (and produced) incrementally without\n   requiring a streaming CBOR parser that\
    \ is able to deliver\n   substructures of a data item incrementally (or a streaming\
    \ encoder\n   able to encode from substructures incrementally).\n   This document\
    \ defines and registers the \"application/cbor-seq\" media\n   type in the \"\
    Media Types\" registry along with a Constrained\n   Application Protocol (CoAP)\
    \ Content-Format identifier.  Media type\n   structured syntax suffixes [RFC6838]\
    \ were introduced as a way for a\n   media type to signal that it is based on\
    \ another media type as its\n   foundation.  CBOR [RFC7049] defines the \"+cbor\"\
    \ structured syntax\n   suffix.  This document defines and registers the \"+cbor-seq\"\
    \n   structured syntax suffix in the \"Structured Syntax Suffix Registry\".\n"
- title: 1.1.  Conventions Used in This Document
  contents:
  - "1.1.  Conventions Used in This Document\n   The key words \"MUST\", \"MUST NOT\"\
    , \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\"\
    , \"NOT RECOMMENDED\", \"MAY\", and\n   \"OPTIONAL\" in this document are to be\
    \ interpreted as described in\n   BCP 14 [RFC2119] [RFC8174] when, and only when,\
    \ they appear in all\n   capitals, as shown here.\n   In this specification, the\
    \ term \"byte\" is used in its now-customary\n   sense as a synonym for \"octet\"\
    .\n"
- title: 2.  CBOR Sequence Format
  contents:
  - "2.  CBOR Sequence Format\n   Formally, a CBOR Sequence is a sequence of bytes\
    \ that is recursively\n   defined as either of the following:\n   *  an empty\
    \ (zero-length) sequence of bytes\n   *  the sequence of bytes making up an encoded\
    \ CBOR data item\n      [RFC7049] followed by a CBOR Sequence.\n   In short, concatenating\
    \ zero or more encoded CBOR data items\n   generates a CBOR Sequence.  (Consequently,\
    \ concatenating zero or more\n   CBOR Sequences also results in a CBOR Sequence.)\n\
    \   There is no end-of-sequence indicator.  (If one is desired, CBOR\n   encoding\
    \ an array of the CBOR data model values being encoded,\n   employing either a\
    \ definite or an indefinite length encoding, as a\n   single CBOR data item may\
    \ actually be the more appropriate\n   representation.)\n   CBOR Sequences, unlike\
    \ JSON Text Sequences [RFC7464], do not use a\n   marker between items.  This\
    \ is possible because CBOR-encoded data\n   items are self delimiting and the\
    \ end can always be calculated.\n   (Note that, while the early object/array-only\
    \ form of JSON was self\n   delimiting as well, this stopped being the case when\
    \ simple values\n   such as single numbers were made valid JSON documents.)\n\
    \   Decoding a CBOR Sequence works as follows:\n   *  If the CBOR Sequence is\
    \ an empty sequence of bytes, the result is\n      an empty sequence of CBOR data\
    \ model values.\n   *  Otherwise, one must decode a single CBOR data item from\
    \ the bytes\n      of the CBOR Sequence and insert the resulting CBOR data model\n\
    \      value at the start of the result of repeating this decoding\n      process\
    \ recursively with the remaining bytes.  (A streaming\n      decoder would therefore\
    \ simply deliver zero or more CBOR data\n      model values, each as soon as the\
    \ bytes making it up are\n      available.)\n   This means that if any data item\
    \ in the sequence is not well formed,\n   it is not possible to reliably decode\
    \ the rest of the sequence.  (An\n   implementation may be able to recover from\
    \ some errors in a sequence\n   of bytes that is almost, but not entirely, a well-formed\
    \ encoded CBOR\n   data item.  Handling malformed data is outside the scope of\
    \ this\n   specification.)\n   This also means that the CBOR Sequence format can\
    \ reliably detect\n   truncation of the bytes making up the last CBOR data item\
    \ in the\n   sequence, but it cannot detect entirely missing CBOR data items at\n\
    \   the end.  A CBOR Sequence decoder that is used for consuming\n   streaming\
    \ CBOR Sequence data may simply pause for more data (e.g., by\n   suspending and\
    \ later resuming decoding) in case a truncated final\n   item is being received.\n"
- title: 3.  The "+cbor-seq" Structured Syntax Suffix
  contents:
  - "3.  The \"+cbor-seq\" Structured Syntax Suffix\n   The use case for the \"+cbor-seq\"\
    \ structured syntax suffix is\n   analogous to that for \"+cbor\": it SHOULD be\
    \ used by a media type when\n   the result of parsing the bytes of the media type\
    \ object as a CBOR\n   Sequence is meaningful and is at least sometimes not just\
    \ a single\n   CBOR data item.  (Without the qualification at the end, this sentence\n\
    \   is trivially true for any +cbor media type, which of course should\n   continue\
    \ to use the \"+cbor\" structured syntax suffix.)\n   Applications encountering\
    \ a \"+cbor-seq\" media type can then either\n   simply use generic processing\
    \ if all they need is a generic view of\n   the CBOR Sequence or use generic CBOR\
    \ Sequence tools for initial\n   parsing and then implement their own specific\
    \ processing on top of\n   that generic parsing tool.\n"
- title: 4.  Practical Considerations
  contents:
  - '4.  Practical Considerations

    '
- title: 4.1.  Specifying CBOR Sequences in Concise Data Definition Language
  contents:
  - "4.1.  Specifying CBOR Sequences in Concise Data Definition Language\n      (CDDL)\n\
    \   In Concise Data Definition Language (CDDL) [RFC8610], CBOR Sequences\n   are\
    \ already supported as contents of byte strings using the\n   \".cborseq\" control\
    \ operator (Section 3.8.4 of [RFC8610]) by employing\n   an array as the controller\
    \ type:\n   my-embedded-cbor-seq = bytes .cborseq my-array\n   my-array = [* my-element]\n\
    \   my-element = my-foo / my-bar\n   Currently, CDDL does not provide for unadorned\
    \ CBOR Sequences as a\n   top-level subject of a specification.  For now, the\
    \ suggestion is to\n   use an array for the top-level rule, as is used for the\
    \ \".cborseq\"\n   control operator, and add English text that explains that the\n\
    \   specification is really about a CBOR Sequence with the elements of\n   the\
    \ array:\n   ; This defines an array, the elements of which are to be used\n \
    \  ; in a CBOR Sequence:\n   my-sequence = [* my-element]\n   my-element = my-foo\
    \ / my-bar\n   (Future versions of CDDL may provide a notation for top-level CBOR\n\
    \   Sequences, e.g., by using a group as the top-level rule in a CDDL\n   specification.)\n"
- title: 4.2.  Diagnostic Notation
  contents:
  - "4.2.  Diagnostic Notation\n   CBOR diagnostic notation (see Section 6 of [RFC7049])\
    \ or extended\n   diagnostic notation (Appendix G of [RFC8610]) also does not\
    \ provide\n   for unadorned CBOR Sequences at this time (the latter does provide\n\
    \   for CBOR Sequences embedded in a byte string as per Appendix G.3 of\n   [RFC8610]).\n\
    \   In a similar spirit to the recommendation for CDDL above, this\n   specification\
    \ recommends enclosing the CBOR data items in an array.\n   In a more informal\
    \ setting, where the boundaries within which the\n   notation is used are obvious,\
    \ it is also possible to leave off the\n   outer brackets for this array, as shown\
    \ in these two examples:\n   [1, 2, 3]\n   1, 2, 3\n   Note that it is somewhat\
    \ difficult to discuss zero-length CBOR\n   Sequences in the latter form.\n"
- title: 4.3.  Optimizing CBOR Sequences for Skipping Elements
  contents:
  - "4.3.  Optimizing CBOR Sequences for Skipping Elements\n   In certain applications,\
    \ being able to efficiently skip an element\n   without the need for decoding\
    \ its substructure, or efficiently\n   fanning out elements to multi-threaded\
    \ decoding processes, is of the\n   utmost importance.  For these applications,\
    \ byte strings (which carry\n   length information in bytes) containing embedded\
    \ CBOR can be used as\n   the elements of a CBOR Sequence:\n   ; This defines\
    \ an array of CBOR byte strings, the elements of which\n   ; are to be used in\
    \ a CBOR Sequence:\n   my-sequence = [* my-element]\n   my-element = bytes .cbor\
    \ my-element-structure\n   my-element-structure = my-foo / my-bar\n   Within limits,\
    \ this may also enable recovering from elements that\n   internally are not well\
    \ formed; the limitation is that the sequence\n   of byte strings does need to\
    \ be well formed as such.\n"
- title: 5.  Security Considerations
  contents:
  - "5.  Security Considerations\n   The security considerations of CBOR [RFC7049]\
    \ apply.  This format\n   provides no cryptographic integrity protection of any\
    \ kind but can be\n   combined with security specifications such as CBOR Object\
    \ Signing and\n   Encryption (COSE) [RFC8152] to do so.  (COSE protections can\
    \ be\n   applied to an entire CBOR Sequence or to each of the elements of the\n\
    \   sequence independently; in the latter case, additional effort may be\n   required\
    \ if there is a need to protect the relationship of the\n   elements in the sequence.)\n\
    \   As usual, decoders must operate on input that is assumed to be\n   untrusted.\
    \  This means that decoders MUST fail gracefully in the face\n   of malicious\
    \ inputs.\n"
- title: 6.  IANA Considerations
  contents:
  - '6.  IANA Considerations

    '
- title: 6.1.  Media Type
  contents:
  - "6.1.  Media Type\n   Media types are registered in the \"Media Types\" registry\n\
    \   [IANA-MEDIA-TYPES].  IANA has registered the media type for CBOR\n   Sequence,\
    \ application/cbor-seq, as follows:\n   Type name: application\n   Subtype name:\
    \ cbor-seq\n   Required parameters: N/A\n   Optional parameters: N/A\n   Encoding\
    \ considerations: binary\n   Security considerations: See RFC 8742, Section 5.\n\
    \   Interoperability considerations: Described herein.\n   Published specification:\
    \ RFC 8742.\n   Applications that use this media type: Data serialization and\n\
    \   deserialization.\n   Fragment identifier considerations: N/A\n   Additional\
    \ information:\n   *  Deprecated alias names for this type: N/A\n   *  Magic number(s):\
    \ N/A\n   *  File extension(s): N/A\n   *  Macintosh file type code(s): N/A\n\
    \   Person & email address to contact for further information:\n      cbor@ietf.org\n\
    \   Intended usage: COMMON\n   Author: Carsten Bormann (cabo@tzi.org)\n   Change\
    \ controller: IETF\n"
- title: 6.2.  CoAP Content-Format Registration
  contents:
  - "6.2.  CoAP Content-Format Registration\n   IANA has assigned a CoAP Content-Format\
    \ ID for the media type\n   \"application/cbor-seq\", within the \"CoAP Content-Formats\"\
    \ subregistry\n   of the \"Constrained RESTful Environments (CoRE) Parameters\"\
    \ registry\n   [IANA-CORE-PARAMETERS], from the \"Expert Review\" (0-255) range\n\
    \   ([RFC8126]).  The assigned ID is shown in Table 1.\n           | Media type\
    \           | Encoding | ID | Reference |\n           | application/cbor-seq |\
    \ -        | 63 | RFC 8742  |\n                     Table 1: CoAP Content-Format\
    \ ID\n"
- title: 6.3.  Structured Syntax Suffix
  contents:
  - "6.3.  Structured Syntax Suffix\n   Structured Syntax Suffixes are registered\
    \ within the \"Structured\n   Syntax Suffix Registry\" maintained at\n   [IANA-STRUCTURED-SYNTAX-SUFFIX].\
    \  IANA has registered the \"+cbor-seq\"\n   structured syntax suffix in accordance\
    \ with [RFC6838] as follows:\n      Name: CBOR Sequence\n      +suffix: +cbor-seq\n\
    \      References: RFC 8742\n      Encoding considerations: binary\n      Fragment\
    \ identifier considerations: The syntax and semantics of\n      fragment identifiers\
    \ specified for +cbor-seq SHOULD be the same as\n      that specified for \"application/cbor-seq\"\
    .  (At the time of\n      publication of this document, there is no fragment identification\n\
    \      syntax defined for \"application/cbor-seq\".)\n         The syntax and\
    \ semantics for fragment identifiers for a\n         specific \"xxx/yyy+cbor-seq\"\
    \ SHOULD be processed as follows:\n         o  For cases defined in +cbor-seq,\
    \ if the fragment identifier\n            resolves per the +cbor-seq rules, then\
    \ process as specified\n            in +cbor-seq.\n         o  For cases defined\
    \ in +cbor-seq, if the fragment identifier\n            does not resolve per the\
    \ +cbor-seq rules, then process as\n            specified in \"xxx/yyy+cbor-seq\"\
    .\n         o  For cases not defined in +cbor-seq, process as specified in\n \
    \           \"xxx/yyy+cbor-seq\".\n      Interoperability considerations: n/a\n\
    \      Security considerations: See RFC 8742, Section 5\n      Contact: CBOR WG\
    \ mailing list (cbor@ietf.org), or any IESG-\n      designated successor.\n  \
    \    Author/Change controller: IETF\n"
- title: 7.  References
  contents:
  - '7.  References

    '
- title: 7.1.  Normative References
  contents:
  - "7.1.  Normative References\n   [IANA-CORE-PARAMETERS]\n              IANA, \"\
    Constrained RESTful Environments (CoRE)\n              Parameters\",\n       \
    \       <https://www.iana.org/assignments/core-parameters>.\n   [IANA-MEDIA-TYPES]\n\
    \              IANA, \"Media Types\",\n              <https://www.iana.org/assignments/media-types>.\n\
    \   [IANA-STRUCTURED-SYNTAX-SUFFIX]\n              IANA, \"Structured Syntax Suffix\
    \ Registry\",\n              <https://www.iana.org/assignments/media-type-structured-\n\
    \              suffix>.\n   [RFC2119]  Bradner, S., \"Key words for use in RFCs\
    \ to Indicate\n              Requirement Levels\", BCP 14, RFC 2119,\n       \
    \       DOI 10.17487/RFC2119, March 1997,\n              <https://www.rfc-editor.org/info/rfc2119>.\n\
    \   [RFC7049]  Bormann, C. and P. Hoffman, \"Concise Binary Object\n         \
    \     Representation (CBOR)\", RFC 7049, DOI 10.17487/RFC7049,\n             \
    \ October 2013, <https://www.rfc-editor.org/info/rfc7049>.\n   [RFC8174]  Leiba,\
    \ B., \"Ambiguity of Uppercase vs Lowercase in RFC\n              2119 Key Words\"\
    , BCP 14, RFC 8174, DOI 10.17487/RFC8174,\n              May 2017, <https://www.rfc-editor.org/info/rfc8174>.\n"
- title: 7.2.  Informative References
  contents:
  - "7.2.  Informative References\n   [RFC6838]  Freed, N., Klensin, J., and T. Hansen,\
    \ \"Media Type\n              Specifications and Registration Procedures\", BCP\
    \ 13,\n              RFC 6838, DOI 10.17487/RFC6838, January 2013,\n         \
    \     <https://www.rfc-editor.org/info/rfc6838>.\n   [RFC7464]  Williams, N.,\
    \ \"JavaScript Object Notation (JSON) Text\n              Sequences\", RFC 7464,\
    \ DOI 10.17487/RFC7464, February 2015,\n              <https://www.rfc-editor.org/info/rfc7464>.\n\
    \   [RFC8091]  Wilde, E., \"A Media Type Structured Syntax Suffix for JSON\n \
    \             Text Sequences\", RFC 8091, DOI 10.17487/RFC8091, February\n   \
    \           2017, <https://www.rfc-editor.org/info/rfc8091>.\n   [RFC8126]  Cotton,\
    \ M., Leiba, B., and T. Narten, \"Guidelines for\n              Writing an IANA\
    \ Considerations Section in RFCs\", BCP 26,\n              RFC 8126, DOI 10.17487/RFC8126,\
    \ June 2017,\n              <https://www.rfc-editor.org/info/rfc8126>.\n   [RFC8152]\
    \  Schaad, J., \"CBOR Object Signing and Encryption (COSE)\",\n              RFC\
    \ 8152, DOI 10.17487/RFC8152, July 2017,\n              <https://www.rfc-editor.org/info/rfc8152>.\n\
    \   [RFC8259]  Bray, T., Ed., \"The JavaScript Object Notation (JSON) Data\n \
    \             Interchange Format\", STD 90, RFC 8259,\n              DOI 10.17487/RFC8259,\
    \ December 2017,\n              <https://www.rfc-editor.org/info/rfc8259>.\n \
    \  [RFC8610]  Birkholz, H., Vigano, C., and C. Bormann, \"Concise Data\n     \
    \         Definition Language (CDDL): A Notational Convention to\n           \
    \   Express Concise Binary Object Representation (CBOR) and\n              JSON\
    \ Data Structures\", RFC 8610, DOI 10.17487/RFC8610,\n              June 2019,\
    \ <https://www.rfc-editor.org/info/rfc8610>.\n"
- title: Acknowledgements
  contents:
  - "Acknowledgements\n   This document has mostly been generated from [RFC7464] by\
    \ Nico\n   Williams and [RFC8091] by Erik Wilde, which do a similar but slightly\n\
    \   more complicated exercise for JSON [RFC8259].  Laurence Lundblade\n   raised\
    \ an issue on the CBOR mailing list that pointed out the need\n   for this document.\
    \  Jim Schaad and John Mattsson provided helpful\n   comments.\n"
- title: Author's Address
  contents:
  - "Author's Address\n   Carsten Bormann\n   Universit\xE4t Bremen TZI\n   Postfach\
    \ 330440\n   D-28359 Bremen\n   Germany\n"
