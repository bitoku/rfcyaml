Abstract This document expands, updates, and establishes an IANA registry for the list of URIs intended for use with XML digital signatures, encryption, canonicalization, and key management.
These URIs identify algorithms and types of information.
This document obsoletes RFC 4051.
Introduction XML digital signatures, canonicalization, and encryption have been standardized by the W3C and by the joint IETF/W3C XMLDSIG working group [W3C].
All of these are now
W3C Recommendations and some are also RFCs.
They are available as follows:
XML Digital Signatures Draft Standard
All of these documents and recommendations use URIs [RFC3986] to identify algorithms and keying information types.
The W3C has subsequently produced updated XML Signature 1.1 [XMLDSIG11], Canonical XML 1.1 [CANON11], and XML Encryption 1.1 [XMLENC11] versions, as well as a new XML Signature Properties specification [XMLDSIG PROP].
All camel case element names herein, such as DigestValue, are from these documents.
This document is an updated convenient reference list of URIs and corresponding algorithms in which there is expressed interest.
Since the previous list [RFC4051] was issued in 2005, significant new cryptographic algorithms of interest to XML security, for some of which the URI is only specified in this document, have been added.
All of the URIs appear in the indexes in Section 4.
Only the URIs that were added by [RFC4051] or this document have a subsection in Section 2 or 3, with the exception of Minimal Canonicalization (Section 2.4), for example, use of SHA 256 is defined in [XMLENC11] and hence there is no subsection on that algorithm here, but its URI is included in the indexes in Section 4.
Specification in this document of the URI representing an algorithm does not imply endorsement of the algorithm for any particular purpose.
A protocol specification, which this is not, generally gives algorithm and implementation requirements for the protocol.
Security considerations for algorithms are constantly evolving, as documented elsewhere.
This specification simply provides some URIs and relevant formatting for when those URIs are used.
Note that progressing XML Digital Signature [RFC3275] along the Standards Track required removal of any algorithms from the original version [RFC3075]
for which there was not demonstrated interoperability.
This required removal of the Minimal Canonicalization algorithm, in which there appears to be continued interest.
The URI for Minimal Canonicalization was included in [RFC4051] and is included here.
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in [RFC2119].
This document is not intended to change the algorithm implementation requirements of any IETF or W3C document.
Use of [RFC2119] terminology is intended to be only such as is already stated or implied by other authoritative documents.
The following acronyms are used in this document:
HMAC Keyed Hashing MAC [RFC2104]
IETF Internet Engineering Task Force
MAC Message Authentication Code MD Message Digest NIST United States National Institute of Standards and Technology
<www.nist.gov> RC Rivest Cipher RSA Rivest, Shamir, and Adleman SHA Secure Hash Algorithm URI Uniform Resource Identifier [RFC3986]
W3C World Wide Web Consortium <www.w3.org> XML eXtensible Markup Language 2.
The URI [RFC3986] that was dropped from the XML Digital Signature standard due to the transition from Proposed Standard to Draft Standard [RFC3275] is included in Section 2.4 below with its original http://www.w3.org/2000/09/xmldsig# prefix so as to avoid changing the XMLDSIG standard's namespace.
Additional algorithms in [RFC4051] were given URIs that start with http://www.w3.org/2001/04/xmldsig more# while further algorithms added in this document are given URIs that start with http://www.w3.org/2007/05/xmldsig more
# In addition, for ease of reference, this document includes in the indexes in Section 4 many cryptographic algorithm URIs from several XML security documents using the namespaces with which they are defined in those documents.
For example, 2000/09/xmldsig# for some URIs specified in [RFC3275] and 2001/04/xmlenc# for some URIs specified in [XMLENC10].
These algorithms are usable wherever a DigestMethod element occurs.
The MD5 algorithm [RFC1321] takes no explicit parameters.
An example of an MD5 DigestAlgorithm element is: <DigestAlgorithm Algorithm "http://www.w3.org/2001/04/xmldsig more#md5"/
An MD5 digest is a 128 bit string.
The content of the DigestValue element SHALL be the base64 [RFC2045] encoding of this bit string viewed as a 16 octet stream.
See [RFC6151] for MD5 security considerations.
The SHA 224 algorithm [FIPS180 4] [RFC6234] takes no explicit parameters.
An example of a SHA 224 DigestAlgorithm element is: <DigestAlgorithm Algorithm "http://www.w3.org/2001/04/xmldsig more#sha224" /
A SHA 224 digest is a 224 bit string.
The content of the DigestValue element SHALL be the base64 [RFC2045] encoding of this string viewed as a 28 octet stream.
The SHA 384 algorithm [FIPS180 4] takes no explicit parameters.
An example of a SHA 384 DigestAlgorithm element is: <DigestAlgorithm Algorithm "http://www.w3.org/2001/04/xmldsig more#sha384" /
A SHA 384 digest is a 384 bit string.
The content of the DigestValue element SHALL be the base64 [RFC2045] encoding of this string viewed as a 48 octet stream.
The Whirlpool algorithm [10118 3] takes no explicit parameters.
A Whirlpool digest is a 512 bit string.
The content of the DigestValue element SHALL be the base64 [RFC2045] encoding of this string viewed as a 64 octet stream.
: http://www.w3.org/2007/05/xmldsig more#sha3 224 http://www.w3.org/2007/05/xmldsig more#sha3 256 http://www.w3.org/2007/05/xmldsig more#sha3 384 http://www.w3.org/2007/05/xmldsig more#sha3 512 NIST has recently completed a hash function competition for an alternative to the SHA family.
algorithm was selected [Keccak] [SHA 3].
This hash function is commonly referred to as "SHA 3", and this section is a space holder and reservation of URIs for future information on Keccak use in XML security.
A SHA 3 224, 256, 384, and 512 digest is a 224 , 256 , 384 , and 512 bit string, respectively.
The content of the DigestValue element SHALL be the base64 [RFC2045] encoding of this string viewed as a 28 , 32 , 48 , and 64 octet stream, respectively.
This section covers SignatureMethod MAC (Message Authentication Code) Algorithms.
Note: Some text in this section is duplicated from [RFC3275] for the convenience of the reader.
RFC 3275 is normative in case of conflict.
HMAC MD5 Identifier: http://www.w3.org/2001/04/xmldsig more#hmac md5
The HMAC algorithm [RFC2104] takes the truncation length in bits as a parameter; if the parameter is not specified, then all the bits of the hash are output.
An example of an HMAC MD5 SignatureMethod element is as follows:
The output of the HMAC algorithm is ultimately the output (possibly truncated) of the chosen digest algorithm.
This value SHALL be base64 [RFC2045] encoded in the same straightforward fashion as the output of the digest algorithms.
Example: the SignatureValue element for the HMAC MD5 digest 9294727A
3638BB1C 13F48EF8 158BFC9D from the test vectors in [RFC2104] would be kpRyejY4uxwT9I74FYv8nQ  Schema Definition: <simpleType name "HMACOutputLength"> <restriction base "
The Schema Definition and DTD immediately above are copied from [RFC3275].
See [RFC6151] for HMAC MD5 security considerations.
sha512 SHA 224, SHA 256,
SHA 384, and SHA 512
[RFC6234] can also be used in HMAC as described in Section 2.2.1 above for HMAC MD5.
RIPEMD 160 [10118 3] can also be used in HMAC as described in Section 2.2.1 above for HMAC MD5.
SignatureMethod Public Key Signature Algorithms
These algorithms are distinguished from those in Section 2.2 above in that they use public key methods.
That is to say, the verification key is different from and not feasibly derivable from the signing key.
RSA MD5 Identifier: http://www.w3.org/2001/04/xmldsig more#rsa md5
This implies the PKCS#1 v1.5 padding algorithm described in [RFC3447].
An example of use is <
SignatureMethod Algorithm "http://www.w3.org/2001/04/xmldsig more#rsa md5" /
The SignatureValue content for an RSA MD5 signature is the base64 [RFC2045] encoding of the octet string computed as per [RFC3447], Section 8.2.1, signature generation for the RSASSA PKCS1 v1 5 signature scheme.
As specified in the EMSA PKCS1 V1 5 ENCODE function in [RFC3447], Section 9.2, the value input to the signature function MUST contain a pre pended algorithm object identifier for the hash function, but the availability of an ASN.1 parser and recognition of OIDs is not required of a signature verifier.
The PKCS#1 v1.5 representation appears as: CRYPT (PAD (ASN.1 (OID, DIGEST (data))))
Note that the padded ASN.1 will be of the following form:
01   FF    00   prefix   hash
"hash" is the MD5 digest of the data.
"prefix" is the ASN.1 BER MD5 algorithm designator prefix required in PKCS #1
, hex 30 20 30 0c 06 08 2a 86 48 86 f7 0d
This prefix is included to make it easier to use standard cryptographic libraries.
The FF octet MUST be repeated enough times that the value of the quantity being CRYPTed is exactly one octet shorter than the RSA modulus.
See [RFC6151] for MD5 security considerations.
This implies the PKCS#1 v1.5 padding algorithm [RFC3447] as described in Section 2.3.1, but with the ASN.1 BER SHA 256 algorithm designator prefix.
An example of use is <SignatureMethod Algorithm "
RSA SHA384 Identifier: http://www.w3.org/2001/04/xmldsig more#rsa sha384
This implies the PKCS#1 v1.5 padding algorithm [RFC3447] as described in Section 2.3.1, but with the ASN.1 BER SHA 384 algorithm designator prefix.
An example of use is <SignatureMethod Algorithm "
Because it takes about the same effort to calculate a SHA 384 message digest as it does a SHA 512 message digest, it is suggested that RSA SHA512 be used in preference to RSA SHA384 where possible.
This implies the PKCS#1 v1.5 padding algorithm [RFC3447] as described in Section 2.3.1, but with the ASN.1 BER SHA 512 algorithm designator prefix.
An example of use is <SignatureMethod Algorithm "
This implies the PKCS#1 v1.5 padding algorithm [RFC3447] as described in Section 2.3.1, but with the ASN.1 BER RIPEMD160 algorithm designator prefix.
An example of use is <SignatureMethod Algorithm "
ECDSA SHA , ECDSA RIPEMD160,
The Elliptic Curve Digital Signature Algorithm (ECDSA)
[FIPS180 4] is the elliptic curve analogue of the Digital Signature Algorithm (DSA) signature method, i.e., the Digital Signature Standard (DSS).
It takes no explicit parameters.
For detailed specifications of how to use it with SHA hash functions and XML Digital Signature, please see [X9.62] and [RFC4050].
The #ecdsa ripemd160 and #ecdsa whirlpool fragments in the new namespace identifies a signature method processed in the same way as specified by the #ecdsa sha1 fragment of this namespace, with the exception that RIPEMD160 or Whirlpool is used instead of SHA 1.
The output of the ECDSA algorithm consists of a pair of integers usually referred by the pair (r, s).
The signature value consists of the base64 encoding of the concatenation of two octet streams that respectively result from the octet encoding of the values r and s in that order.
Conversion from integer to octet stream must be done according to the I2OSP operation defined in the [RFC3447] specification with the l parameter equal to the size of the base point order of the curve in bytes (e.g., 32 for the P 256 curve and 66 for the P 521 curve [FIPS186 3]).
For an introduction to elliptic curve cryptographic algorithms, see [RFC6090] and note the errata (Errata ID 2773 2777).
The ESIGN algorithm specified in [IEEEP1363a]
is a signature scheme based on the integer factorization problem.
It is much faster than previous digital signature schemes, so ESIGN can be implemented on smart cards without special co processors.
RSA Whirlpool Identifier: http://www.w3.org/2007/05/xmldsig more#rsa whirlpool
As in the definition of the RSA SHA1 algorithm in [XMLDSIG11], the designator "RSA" means the RSASSA PKCS1 v1 5 algorithm as defined in [RFC3447].
When identified through the #rsa whirlpool fragment identifier, Whirlpool is used as the hash algorithm instead.
Use of the ASN.1 BER Whirlpool algorithm designator is implied.
That designator is hex 30 4e 30 0a 06
06 28 cf 06 03 00 37 05 00 04 40 as an explicit octet sequence.
This corresponds to OID 1.0.10118.3.0.55 defined in [10118 3].
An example of use is <
RSASSA PSS with Parameters Identifiers:
These identifiers imply the PKCS#1 EMSA PSS encoding algorithm [RFC3447].
The RSASSA PSS algorithm takes the digest method (hash function), a mask generation function, the salt length in bytes (SaltLength), and the trailer field as explicit parameters.
Algorithm identifiers for hash functions specified in XML encryption [XMLENC11]
[XMLDSIG11] and in Section 2.1 are considered to be valid algorithm identifiers for hash functions.
According to [RFC3447], the default value for the digest function is SHA 1, but due to the discovered weakness of SHA 1
[RFC6194], it is recommended that SHA 256 or a stronger hash function be used.
Notwithstanding [RFC3447], SHA 256 is the default to be used with these SignatureMethod identifiers if no hash function has been specified.
The default salt length for these SignatureMethod identifiers if the SaltLength is not specified SHALL be the number of octets in the hash value of the digest method, as recommended in [RFC4055].
In a parameterized RSASSA PSS signature the ds:
DigestMethod and the SaltLength parameters usually appear.
If they do not, the defaults make this equivalent to http://www.w3.org/2007/05/xmldsig more#sha256
rsa MGF1 (see Section 2.3.10).
The TrailerField defaults to 1 (0xBC) when omitted.
Schema Definition (target namespace http://www.w3.org/2007/05/xmldsig more#):
> Top level element that can be used in xs:any namespace "#other" wildcard of ds:SignatureMethod content.
element name "MaskGenerationFunction" type "pss:MaskGenerationFunctionType" minOccurs "
:element name "SaltLength" type "xs:int" minOccurs "0"/
> <xs:element name "TrailerField" type "xs:int
attribute name "Algorithm" type "
[RFC3447] currently specifies only one mask generation function MGF1 based on a hash function.
Although [RFC3447] allows for parameterization, the default is to use the same hash function as the digest method function.
Only this default approach is supported by this section; therefore, the definition of a mask generation function type is not needed yet.
The same applies to the trailer field.
There is only one value (0xBC) specified in [RFC3447].
Hence, this default parameter must be used for signature generation.
The default salt length is the length of the hash function.
Identifiers: http://www.w3.org/2007/05/xmldsig more#sha3 224 rsa MGF1 http://www.w3.org/2007/05/xmldsig more#sha3 256 rsa MGF1 http://www.w3.org/2007/05/xmldsig more#sha3 384 rsa
more#sha3 512 rsa MGF1 http://www.w3.org/2007/05/xmldsig
MGF1 http://www.w3.org/2007/05/xmldsig more#md5 rsa MGF1 http://www.w3.org/2007/05/xmldsig more#sha1 rsa
MGF1 http://www.w3.org/2007/05/xmldsig more#sha224 rsa MGF1 http://www.w3.org/2007/05/xmldsig
MGF1 http://www.w3.org/2007/05/xmldsig more#sha384 rsa MGF1 http://www.w3.org/2007/05/xmldsig more#sha512
MGF1 http://www.w3.org/2007/05/xmldsig more#ripemd128 rsa MGF1 http://www.w3.org/2007/05/xmldsig more#ripemd160
An example of use is <SignatureMethod Algorithm  "http://www.w3.org/2007/05/xmldsig more#SHA3 256 rsa MGF1" /
RSA SHA224 Identifier: http://www.w3.org/2007/05/xmldsig more#rsa
This implies the PKCS#1 v1.5 padding algorithm [RFC3447] as described in Section 2.3.1, but with the ASN.1 BER SHA 224 algorithm designator prefix.
An example of use is <SignatureMethod Algorithm "http://www.w3.org/2007/05/xmldsig more#rsa sha224" />
Because it takes about the same effort to calculate a SHA 224 message digest as it does a SHA 256 message digest, it is suggested that RSA SHA256 be used in preference to RSA SHA224 where possible.
Thus far, two independent interoperable implementations of Minimal Canonicalization have not been announced.
Therefore, when XML Digital Signature was advanced along the Standards Track from [RFC3075] to [RFC3275], Minimal Canonicalization was dropped.
However, there is still interest.
For its definition, see Section 6.5.1 of [RFC3075].
For reference, its identifier remains:
Transform Algorithms Note that all CanonicalizationMethod algorithms can also be used as transform algorithms.
http://www.w3.org/2001/04/xmldsig more#xptr This transform algorithm takes an [XPointer] as an explicit parameter.
An example of use is: <Transform Algorithm "http://www.w3.org/2001/04/xmldsig more/xptr"> <
> Schema Definition: <element name "XPointer" type "string"/
Input to this transform is an octet stream (which is then parsed into XML).
Output from this transform is a node set; the results of the XPointer are processed as defined in the XMLDSIG specification [RFC3275] for a same document XPointer.
This subsection gives identifiers and information for several EncryptionMethod Algorithms.
ARCFOUR Encryption Algorithm Identifier: http://www.w3.org/2001/04/xmldsig more#arcfour ARCFOUR is a fast, simple stream encryption algorithm that is compatible with RSA Security's RC4 algorithm [RC4].
An example EncryptionMethod element using ARCFOUR is <EncryptionMethod Algorithm "http://www.w3.org/2001/04/xmldsig more#arcfour"
Note that Arcfour makes use of the generic KeySize parameter specified and defined in [XMLENC11].
Camellia Block Encryption Identifiers: http://www.w3.org/2001/04/xmldsig more#camellia128
cbc Camellia is a block cipher with the same interface as the AES [Camellia] [RFC3713]; it has a 128 bit block size and 128 , 192 , and 256 bit key sizes.
In XML encryption, Camellia is used in the same way as the AES: it is used in the Cipher Block Chaining (CBC) mode with a 128 bit initialization vector (IV).
The resulting cipher text is prefixed by the IV.
If included in XML output, it is then base64 encoded.
An example Camellia EncryptionMethod is as follows:
<EncryptionMethod Algorithm  "http://www.w3.org/2001/04/xmldsig more#camellia128 cbc" /
Camellia Key Wrap Identifiers: http://www.w3.org/2001/04/xmldsig more#kw
[RFC3713] key wrap is identical to the AES key wrap algorithm [RFC3394] specified in the XML Encryption standard with "AES" replaced by "Camellia".
As with AES key wrap, the check value is 0xA6A6A6A6A6A6A6A6.
The algorithm is the same whatever the size of the Camellia key used in wrapping, called the "key encrypting key" or "KEK".
If Camellia is supported, it is particularly suggested that wrapping 128 bit keys with a 128 bit KEK and wrapping 256 bit keys with a 256 bit KEK be supported.
An example of use is: <EncryptionMethod Algorithm  "http://www.w3.org/2001/04/xmldsig more#kw
PSEC KEM Identifier: http://www.w3.org/2001/04/xmldsig more#psec kem The PSEC KEM algorithm, specified in [18033 2], is a key encapsulation mechanism using elliptic curve encryption.
An example of use is: <EncryptionMethod Algorithm "http://www.w3.org/2001/04/xmlenc#psec kem"> <ECParameters> <
> See [18033 2] for information on the parameters above.
SEED Block Encryption Identifier: http://www.w3.org/2007/05/xmldsig more#seed128 cbc
SEED [RFC4269] is a 128 bit block size with 128 bit key sizes.
In XML Encryption, SEED can be used in the Cipher Block Chaining (CBC) mode with a 128 bit initialization vector (IV).
The resulting cipher text is prefixed by the IV.
If included in XML output, it is then base64 encoded.
An example SEED EncryptionMethod is as follows:
SEED Key Wrap Identifier: http://www.w3.org/2007/05/xmldsig more#kw seed128
Key wrapping with SEED is identical to Section 2.2.1 of [RFC3394] with "AES" replaced by "SEED".
The algorithm is specified in [RFC4010].
The implementation of SEED is optional.
The default initial value is 0xA6A6A6A6A6A6A6A6.
An example of use is: <EncryptionMethod Algorithm  "http://www.w3.org/2007/05/xmldsig
In Section 3.1 below a new KeyInfo element child is specified, while in Section 3.2 additional KeyInfo Type values for use in RetrievalMethod are specified.
#7 Bag of Certificates and
signedData" can also be used as a bag of certificates and/or certificate revocation lists (CRLs).
The PKCS7signedData element is defined to accommodate such structures within KeyInfo.
The binary PKCS #7 structure is base64 [RFC2045] encoded.
Any signer information present is ignored.
The following is an example [RFC3092], eliding the base64 data:
The Type attribute of RetrievalMethod is an optional identifier for the type of data to be retrieved.
The result of dereferencing a RetrievalMethod reference for all KeyInfo types with an XML structure is an XML element or document with that element as the root.
The various "raw" key information types return a binary value.
Thus, they require a Type attribute because they are not unambiguously parsable.
http://www.w3.org/2001/04/xmldsig more#KeyName http://www.w3.org/2001/04/xmldsig more#KeyValue http://www.w3.org/2001/04/xmldsig
The "Sec/Doc" column has the section of this document or, if not specified in this document, the document where the item is specified.
The initial "http://www.w3.org/" part of the URI is not included below.
The first six entries have a null fragment identifier or no fragment identifier.
3.2 ripemd128 rsa MGF1  2007/05/xmldsig more#ripemd128 rsa MGF1 2.3.10
ripemd160 rsa MGF1  2007/05/xmldsig more#ripemd160
2007/05/xmldsig more#whirlpool rsa MGF1 2.3.10
The initial "http://www.w3.org/" part of the URI is not included above.
The initial "http://www.w3.org/" part of the URI is not included below.
[RFC3275]  SignatureMethod 2000/09/xmldsig#enveloped signature [RFC3275]
2.3.7   SignatureMethod 2001/04/xmldsig more#esign sha224
2.3.2   SignatureMethod 2001/04/xmldsig more#rsa sha384
rsa MGF1 2.3.10 SignatureMethod 2007/05
MGF1 2.3.10 SignatureMethod 2007/05/xmldsig more#rsa
rsa MGF1 2.3.10  SignatureMethod 2007/05
rsa MGF1 2.3.10  SignatureMethod 2007/05
/xmldsig more#sha3 512 rsa MGF1 2.3.10
SignatureMethod 2007/05/xmldsig more#sha384 rsa MGF1
/xmldsig more#whirlpool rsa MGF1 2.3.10 SignatureMethod 2009/
[XPATH]  Transform TR/1999/REC xslt 19991116
The initial "http://www.w3.org/" part of the URI is not included above.
Allocation Considerations W3C and IANA allocation considerations are given below.
W3C Allocation Considerations As it is easy for people to construct their own unique URIs [RFC3986]
and, if appropriate, to obtain a URI from the W3C, it is not intended that any additional "http://www.w3.org/2007/05/xmldsig more#" URIs be created beyond those enumerated in this RFC.
(W3C Namespace stability rules prohibit the creation of new URIs under "http://www.w3.org/2000/09/xmldsig#" and URIs under "http://www.w3.org/2001/04/xmldsig more#" were frozen with the publication of [RFC4051].)
An "xmldsig more" URI does not imply any official W3C or IETF status for these algorithms or identifiers nor does it imply that they are only useful in digital signatures.
Currently, dereferencing such URIs may or may not produce a temporary placeholder document.
Permission to use these URI prefixes has been given by the W3C. 5.2.
IANA Considerations IANA has established a registry entitled "XML Security URIs".
The initial contents correspond to Section 4.2 of this document with each section number in the "Sec/Doc" column augmented with a reference to this RFC (for example, "2.6.4" means "[RFC6931], Section 2.6.4").
New entries, including new Types, will be added based on Expert Review [RFC5226].
Criterion for inclusion are (1) documentation sufficient for interoperability of the algorithm or data type and the XML syntax for its representation and use and (2) sufficient importance as normally indicated by inclusion in (2a)
an approved W3C Note, Proposed Recommendation, or Recommendation or (2b) an approved IETF Standards Track document.
Typically, the registry will reference a W3C or IETF document specifying such XML syntax; that document will either contain a more abstract description of the algorithm or data type or reference another document with a more abstract description.
This RFC is concerned with documenting the URIs that designate algorithms and some data types used in connection with XML security.
The security considerations vary widely with the particular algorithms, and the general security considerations for XML security are outside of the scope of this document but appear in [XMLDSIG11], [XMLENC11], [CANON10], [CANON11], and [GENERIC].
[RFC6151] should be consulted before considering the use of MD5 as a DigestMethod or RSA MD5 as a SignatureMethod.
See [RFC6194] for SHA 1 security considerations and [RFC6151] for MD5 security considerations.
Additional security considerations are given in connection with the description of some algorithms in the body of this document.
Implementers should be aware that cryptographic algorithms become weaker with time.
As new cryptoanalysis techniques are developed and computing performance improves, the work factor to break a particular cryptographic algorithm will reduce.
Therefore, cryptographic implementations should be modular, allowing new algorithms to be readily inserted.
That is, implementers should be prepared for the set of mandatory to implement algorithms to change over time.
Appendix A.  Changes from RFC 4051
The following changes have been made in RFC 4051 to produce this document.
Updated and added numerous RFC, W3C, and Internet Draft references.
ecdsa ripemd160, #whirlpool, #ecdsa whirlpool, #rsa whirlpool, #seed128 cbc, and #kw seed128.
Incorporated RFC 4051 errata [Errata191].
Added URI and fragment index sections.
For MD5 and SHA 1, added references to [RFC6151] and [RFC6194].
Added SHA 3 / Keccak placeholder section including #sha3 224, #sha3 256, #sha3 384, and #sha3 512.
Added RSASSA PSS sections including #sha3 224 MGF1, #sha3 256 MGF1, #sha3 384 MGF1, #sha3 512 MGF1, #md2 rsa MGF1, #md5 rsa MGF1, #sha1 rsa MGF1,
#sha224 rsa MGF1, #sha256 rsa MGF1, #sha384 rsa MGF1,
#sha512 rsa MGF1, #ripemd128 rsa MGF1, #ripemd160 rsa MGF1, and #whirlpool rsa MGF1.
Added new URIs from Canonical XML 1.1 and XML Encryption 1.1 including: #aes128 gcm, #aes192 gcm, #aes256 gc, #ConcatKDF,
#pbkdf, #rsa oaep, #ECDH ES, and #dh es.
Added numerous URIs that are specified in W3C XML Security documents to the Indexes.
These do not have sections in the body of this document   for example,
those for dsa sha256, mgf1sha , decrypt#XML, and xmldsig filter2.
Requested establishment of an IANA registry.
