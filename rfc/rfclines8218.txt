Abstract This document specifies a multipath extension for the Optimized Link State Routing Protocol version 2 (OLSRv2) to discover multiple disjoint paths for Mobile Ad
Considering the characteristics of MANETs, especially the dynamic network topology, using multiple paths can increase aggregated throughput and improve the reliability by avoiding single route failures.
The interoperability with OLSRv2 is retained.
The Optimized Link State Routing Protocol version 2 (OLSRv2)
[RFC7181] is a proactive link state protocol designed for use in Mobile Ad
It generates routing messages periodically to create and maintain a Routing Set, which contains routing information to all the possible destinations in the routing domain.
For each destination, there exists a unique Routing Tuple, which indicates the next hop to reach the destination.
This document specifies an extension of the OLSRv2 protocol [RFC7181] to provide multiple disjoint paths when appropriate for a source  destination pair.
Because of the characteristics of MANETs [RFC2501], especially the dynamic topology, having multiple paths is helpful for increasing network throughput, improving forwarding reliability, and load balancing.
Multipath OLSRv2 (MP OLSRv2), specified in this document, uses the Multipath Dijkstra Algorithm by default to explore multiple disjoint paths from a source router to a destination router based on the topology information obtained through OLSRv2 and to forward the datagrams in a load balancing manner using source routing.
MP OLSRv2 is designed to be interoperable with OLSRv2.
Motivation and Experiments to Be Conducted
This document is an experimental extension of OLSRv2 that can increase the data forwarding reliability in dynamic and high load MANET scenarios by transmitting datagrams over multiple disjoint paths using source routing.
This mechanism is used because:  Disjoint paths can avoid single route failures.
Transmitting datagrams through parallel paths can increase aggregated throughput.
Some scenarios may require that some routers must (or must not) be used.
Having control of the paths at the source benefits the load  balancing and traffic engineering.
An application of this extension is in combination with Forward Error Correction (FEC)
coding applied across packets (erasure coding) [WPMC11].
Because the packet drops are normally bursty in a path (for example, due to route failure), erasure coding is less effective in single path routing protocols.
By providing multiple disjoint paths, the application of erasure coding with multipath protocol is more resilient to routing failures.
In existing deployments, while running code and simulations have proven the interest of multipath extension for OLSRv2 in certain networks [GIIS14][WCNC08][ADHOC11], more experiments and experiences are still needed to understand the effects of the protocol specified in this Experimental RFC.
The multipath extension for OLSRv2 is expected to be revised and documented as a Standards Track RFC once sufficient operational experience is obtained.
Other than general experiences, including the protocol specification and interoperability with base OLSRv2 implementations, experiences in the following aspects are highly appreciated:
Optimal values for the number of multiple paths (NUMBER OF PATHS, see Section 5) to be used.
This depends on the network topology and router density.
Optimal values used in the metric functions.
Metric functions are applied to increase the metric of used links and nodes so as to obtain disjoint paths.
What kind of disjointness is desired (node disjoint or link disjoint) may depend on the Layer 2 protocol used and can be achieved by applying different sets of metric functions.
Use of different metric types.
This multipath extension can be used with metric types that meet the requirement of OLSRv2, such as [RFC7779].
The metric type used also has an impact on the choice of metric functions as indicated in the previous bullet point.
The impact of partial topology information to multipath calculation.
OLSRv2 maintains a partial topology information base to reduce protocol overhead.
Experience has shown that multiple paths can be obtained even with such partial information; however, depending on the Multipoint Relay (MPR) selection algorithm used, the disjointness of the multiple paths might be impacted depending on the Multipoint Relay (MPR) selection algorithm used.
Use of IPv6 loose source routing.
In the current specification, only strict source routing is used for IPv6 based on [RFC6554].
In [IPv6 SRH], the use of the loose source routing is also proposed in IPv6.
In scenarios where the length of the source routing header is critical, the loose source routing can be considered.
Optimal choice of "key" routers for loose source routing.
In some cases, loose source routing is used to reduce overhead or for interoperability with OLSRv2 routers.
Other than the basic rules defined in the following parts of this document, optimal choices of routers to put in the loose source routing header can be further studied.
Depending on the application type and transport layer type, either a per flow scheduler or per  datagram scheduler is applied.
By default, the traffic load should be equally distributed in multiple paths.
In some scenarios, weighted scheduling can be considered: for example, the paths with lower metrics (i.e., higher quality) can transfer more datagrams or flows compared to paths with higher metrics.
The impacts of the delay variation due to multipath routing.
[RFC2991] brings out some concerns of multipath routing, especially variable latencies when per datagram scheduling is applied.
Although current experiment results show that multipath routing can reduce the jitter in dynamic scenarios, some transport protocols or applications may be sensitive to the datagram reordering.
The disjoint multipath protocol has an interesting application with erasure coding, especially for services like video/audio streaming [WPMC11].
The combination of erasure coding mechanisms and this extension is thus encouraged.
Different algorithms to obtain multiple paths, other than the default Multipath Dijkstra Algorithm introduced in Section 8.5.2 of this specification.
The use of multitopology information.
By using [RFC7722], multiple topologies using different metric types can be obtained.
Although there is no work defining how this extension can make use of the multitopology information base yet, experimentation with the use of multiple metrics for building multiple paths is encouraged.
Comments are solicited and should be addressed to the MANET working group's mailing list at
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in BCP 14
when, and only when, they appear in all capitals, as shown here.
This document uses the terminology and notation defined in [RFC5444], [RFC6130], and [RFC7181].
Additionally, it defines the following terminology: OLSRv2
Routing Process:  A routing process based on [RFC7181], without multipath extension specified in this document.
Routing Process:  A Multipath Routing Process based on this specification as an extension to [RFC7181].
Routing Process:  An OLSRv2 Routing Process that supports Source Routing (SR) or an MP OLSRv2 Routing Process.
As an extension of OLSRv2, this specification is applicable to MANETs for which OLSRv2 is applicable (see [RFC7181]).
It can operate on single or multiple interfaces to discover multiple disjoint paths from a source router to a destination router.
MP OLSRv2 is designed for networks with dynamic topology to avoid single route failure.
It can also provide higher aggregated throughput and load balancing.
In a router supporting MP OLSRv2, MP OLSRv2 does not necessarily replace OLSRv2 completely.
The extension can be applied for certain applications that are suitable for multipath routing (mainly video or audio streams) based on information such as a Diffserv codepoint [RFC2474].
Compared to OLSRv2, this extension does not introduce any new message type.
A new Message TLV Type is introduced to identify the routers that support forwarding based on the source routing header.
It is interoperable with OLSRv2 implementations that do not have this extension: as the MP OLSRv2 uses source routing, in IPv4 networks the interoperability is achieved using loose source routing headers; in IPv6 networks, it is achieved by eliminating routers that do not support IPv6 strict source routing.
multipath calculation approaches: proactive and reactive.
In the proactive calculation, the paths to all the destinations are calculated before they are needed.
In the reactive calculation, only the paths to desired destination(s) are calculated on demand.
The proactive approach requires more computational resources than the reactive one.
The reactive approach requires the IP forwarding plane to trigger the multipath calculation.
MP OLSRv2 forwards datagrams using the source routing header.
As there are multiple paths to each destination, MP OLSRv2 requires the IP forwarding plane to be able to choose which source route to be put in the source routing header based on the path scheduler defined by MP OLSRv2.
For IPv4 networks, implementation of loose source routing is required following [RFC791].
For IPv6 networks, implementation of strict source routing is required following the source routing header generation and processing defined in [RFC6554].
4.  Protocol Overview and Functioning This specification uses OLSRv2
to:  Identify all the reachable routers in the network.
Identify a sufficient subset of links in the networks so that routes can be calculated to all reachable destinations.
Provide a Routing Set containing the shortest routes from this router to all destinations.
In addition, the MP OLSRv2
Routing Process identifies the routers that support source routing by adding a new Message TLV in HELLO and Topology Control (TC) messages.
Based on the above information acquired, every MP OLSRv2
Routing Process is aware of a reduced topology map of the network and the routers supporting source routing.
A Multipath Routing Set containing the multipath information is maintained.
It may be either proactively calculated or reactively calculated:
In the proactive approach, multiple paths to all possible destinations are calculated and updated based on control message exchange.
The routes are thus available before they are actually needed.
In the reactive approach, a multipath algorithm is invoked on demand, i.e., only when there is a datagram to be sent from the source to the destination and there is no available Routing Tuple in the Multipath Routing Set.
This requires the IP forwarding information base to trigger the multipath calculation specified in Section 8.5 when no Multipath Routing Tuple is available.
The reactive operation is local to the router and no additional exchange of routing control messages is required.
When the paths are being calculated, the datagrams SHOULD be buffered unless the router does not have enough memory.
Routers in the same network may choose either proactive or reactive multipath calculation independently according to their computation resources.
The Multipath Dijkstra Algorithm (defined in Section 8.5) is introduced as the default algorithm to generate multiple disjoint paths from a source to a destination, and such information is kept in the Multipath Routing Set.
The datagram is forwarded based on source routing.
When there is a datagram to be sent to a destination, the source router acquires a path from the Multipath Routing Set.
The path information is stored in the datagram header using the source routing header.
In addition to the parameters and constants defined in [RFC7181], this specification uses the parameters and constants described in this section.
Router Parameters NUMBER OF PATHS:
The number of paths desired by the router.
The maximum number of hops allowed to be put in the source routing header.
A value set to 0 means there is no limitation on the maximum number of hops.
In an IPv6 network, it MUST be set to 0 because [RFC6554] supports only strict source routing.
All the intermediate routers MUST be included in the source routing header, which is a various number of hops.
In an IPv4 network, it MUST be strictly less than 11 and greater than 0 due to the length limit of the IPv4 header.
The ratio that defines the maximum metric of a path compared to the shortest path kept in the OLSRv2 Routing Set.
For example, the metric to a destination is R metric based on the Routing Set.
Then, the maximum metric allowed for a path is CUTOFF RATIO
CUTOFF RATIO MUST be greater than or equal to 1.
Setting the number low makes it less likely that additional paths will be found   for example, setting it to 1 will mean only equal length paths are considered.
The maximum time between the transmission of two successive TC messages by an MP OLSRv2 Routing Process.
The minimum value in the TLV with Type   VALIDITY TIME included in TC messages generated based on SR TC INTERVAL.
This extension employs the routing control messages HELLO and TC as defined in OLSRv2
[RFC7181] to obtain network topology information.
For the datagram to support source routing, a source routing header is added to each datagram routed by this extension.
Depending on the IP version used, the source routing header is defined in this section.
HELLO and TC messages HELLO and TC messages used by the MP OLSRv2
Routing Process use the same format as defined in [RFC7181].
In addition, a new Message TLV Type is defined to identify the originator of the HELLO or TC message that supports source route forwarding.
The new Message TLV Type is introduced for enabling MP OLSRv2 as an extension of OLSRv2: only the routers supporting source route forwarding can be used in the source routing header of a datagram because adding a router that does not understand the source routing header will cause routing failure.
The SOURCE ROUTE TLV is a Message TLV signaling that the message is generated by a router that supports source route forwarding.
It can be an MP OLSRv2 Routing Process or an OLSRv2 Routing Process that supports source route forwarding.
Every HELLO or TC message generated by a MP OLSRv2
Routing Process MUST have exactly one SOURCE ROUTE TLV without value.
Every HELLO or TC message generated by an OLSRv2 Routing Process MUST have exactly one SOURCE ROUTE TLV, if the OLSRv2 Routing Process supports source route forwarding, and be willing to join the source route generated by other MP OLSRv2 Routing Processes.
The existence of SOURCE ROUTE TLV MUST be consistent for a specific OLSRv2 Routing Process, i.e., either it adds SOURCE ROUTE TLV to all its HELLO/TC messages or it does not add SOURCE ROUTE TLV to any HELLO/TC messages.
Source Routing Header in IPv4
In IPv4 [RFC791] networks, the MP OLSRv2
Routing Process employs the loose source routing header, as defined in [RFC791].
It exists as an option header with option class 0 and option number 3.
The source route information is kept in the "route data" field of the loose source routing header.
Source Routing Header in IPv6
In IPv6 [RFC8200] networks, the MP OLSRv2
Routing Process employs the source routing header, as defined in Section 3 of [RFC6554], with IPv6 Routing Type 3.
The source route information is kept in the "Addresses" field of the routing header.
Routing Process maintains the information bases as defined in [RFC7181].
Additionally, a Multipath Information Base is used for this specification.
It includes the protocol sets as defined below.
Router Set records the routers that support source  route forwarding.
This includes routers that run the MP OLSRv2
Routing Process or the OLSRv2 Routing Process with source route forwarding support.
The set consists of SR OLSRv2
Routing Tuple: (SR addr, SR time) where: SR addr is the originator address of the router that supports source route forwarding.
SR time is the time until which the SR OLSRv2
Routing Tuple is considered valid.
Multipath Routing Set The Multipath Routing Set records the full path information of different paths to the destination.
It consists of Multipath Routing Tuple:
(MR dest addr, MR path set) where: MR dest addr is the network address of the destination; it is either the network address of an interface of a destination router or the network address of an attached network.
MP path set contains the multiple paths to the destination and it consists of a set of Path Tuples.
where: PT metric is the metric of the path to the destination, measured in LINK METRIC TYPE defined in [RFC7181].
This protocol is based on OLSRv2 and is extended to discover multiple disjoint paths from a source router to a destination router.
It retains the formats of the basic routing control packets and the processing of OLSRv2 to obtain the topology information of the network.
The main differences from the OLSRv2 Routing Process are the datagram processing at the source router and datagram forwarding.
HELLO and TC Message Generation HELLO messages are generated according to Section 15.1 of [RFC7181], plus a single message TLV with Type :
TC messages are generated according to Section 16.1 of [RFC7181], plus a single message TLV with Type :
For the routers that do not generate TC messages according to [RFC7181], at least one TC message MUST be generated by an MP OLSRv2 Routing Process during the SR TC INTERVAL (Section 5), which MUST be greater than or equal to TC INTERVAL.
Those TC messages MUST NOT carry any advertised neighbor addresses.
This serves for those routers to advertise the SOURCE ROUTE TLV so that the other routers can be aware of the routers that are source route enabled so as to be used as destinations of multipath routing.
The validity time associated with the VALIDITY TIME TLV in such TC messages equals SR HOLD TIME, which MUST be greater than the SR TC INTERVAL.
If the TC message carries an optional INTERVAL TIME TLV, it MUST have a value encoding the SR TC INTERVAL.
HELLO and TC Message Processing HELLO and TC messages are processed according to Sections 15.3 and 16.3 of [RFC7181].
In addition to the reasons specified in [RFC7181] for discarding a HELLO message or a TC message on reception, a HELLO or TC message received MUST be discarded if it has more than one Message TLV with Type   SOURCE ROUTE.
For every HELLO or TC message received, if there is a Message TLV with Type :  SOURCE ROUTE, create or update (if the Tuple exists already)
the SR OLSR Routing Tuple with:  SR addr :  originator address of the HELLO or TC message
SR time :  current time   validity time of the TC or HELLO message defined in [RFC7181].
Routing Process selects routing MPRs and flooding MPRs following Section 18 of [RFC7181].
In a mixed network with OLSRv2
only routers, the following considerations apply when calculating MPRs:
MP OLSRv2 routers SHOULD be preferred as routing MPRs to increase the possibility of finding disjoint paths using MP OLSRv2 routers.
The number of routing MPRs that run the MP OLSRv2
Routing Process MUST be equal to or greater than NUMBER OF PATHS if there are enough MP OLSRv2 symmetric neighbors.
Otherwise, all the MP OLSRv2 routers are selected as routing MPRs, except the routers with willingness WILL NEVER.
Datagram Processing at the MP OLSRv2 Originator
If datagrams without a source routing header need to be forwarded using multiple paths (for example, based on the information of a Diffserv codepoint [RFC2474]), the MP OLSRv2
Routing Process will try to find the Multipath Routing Tuple where:  MR dest addr   destination of the datagram
If no matching Multipath Routing Tuple is found and the Multipath Routing Set is maintained proactively, it indicates that there is no multipath route available to the desired destination.
The datagram is forwarded following the OLSRv2 Routing Process.
If no matching Multipath Routing Tuple is found and the Multipath Routing Set is maintained reactively, the multipath algorithm defined in Section 8.5 is invoked to calculate the Multipath Routing Tuple to the destination.
If the calculation does not return any Multipath Routing Tuple, the following steps are aborted and the datagram is forwarded following the OLSRv2 Routing Process.
If a matching Multipath Routing Tuple is obtained, the Path Tuples of the Multipath Routing Tuple are applied to the datagrams using either per flow or per datagram scheduling, depending on the transport layer protocol and the application used.
By default, per flow scheduling is used, especially for the transport protocols that are sensitive to reordering, such as TCP.
The path selection decision is made on the first datagram and all subsequent datagrams of the same flow use the same path.
If the path breaks before the flow is closed, another path with the most similar metric is used.
Per datagram scheduling is recommended if the traffic is insensitive to reordering such as unreliable transmission of media traffic or when erasure coding is applied.
In such a case, each datagram selects its paths independently.
By default, the traffic load should be equally distributed in multiple paths.
Other path scheduling mechanisms (e.g., assigning more traffic over better paths) are also possible and will not impact the interoperability of different implementations.
For IPv6 networks, strict source routing is used; thus, all the intermediate routers in the path are stored in the source routing header following the format defined in Section 3 of [RFC6554] with the Routing Type set to 3.
For IPv4 networks, loose source routing is used with the following rules:
Only the addresses that exist in the SR OLSR Router Set can be added to the source routing header.
If the length of the path (n) is greater than MAX SRC HOPS (Section 5) or if adding the whole path information exceeds the MTU, only the "key" routers in the path are kept.
By default, the key routers are uniformly chosen in the path.
If further information, such as the capacity of the routers (e.g., battery life) or the routers' willingness in forwarding data, is available, the routers with higher capacity and willingness are preferred.
The routers that are considered not appropriate for forwarding indicated by external policies should be avoided.
It is not recommended to fragment the IP packet if the packet with the source routing header would exceed the minimum MTU along the path.
Depending on the size of the routing domain, the MTU should be at least 1280
40 (for the outer IP header)
diameter of the network in number of hops (for the source routing header).
If the links in the network have different MTU sizes, by using technologies like Path MTU Discovery, the routers are able to be aware of the MTU along the path.
The size of the datagram plus the size of IP headers (including the source routing header) should not exceed the minimum MTU along the path; otherwise, the source routing should not be used.
If the destination of the datagrams is out of the MP OLSRv2 routing domain, the datagram must be source routed to the gateway between the MP OLSRv2 routing domain and the rest of the Internet.
The gateway MUST remove the source routing header before forwarding the datagram to the rest of the Internet.
The Multipath Routing Set maintains the information of multiple paths to the destination.
The Path Tuples of the Multipath Routing Set (Section 7.2) are generated based on a multipath algorithm.
For each path to a destination, the algorithm must provide:  The metric of the path to the destination,  The list of intermediate routers on the path.
For IPv6 networks, as strict source routing is used, only the routers that exist in the SR OLSRv2 Router Set are considered in the path calculation, i.e., only the source routing supported routers can exist in the path.
After the calculation of multiple paths, the metric of paths (denoted c i for path i) to the destination is compared to the R metric of the OLSRv2
Routing Tuple ([RFC7181]) to the same destination.
i is greater than R metric   CUTOFF RATIO (Section 5), the corresponding path i SHOULD NOT be used.
If less than two paths are found with metrics less than R metric   CUTOFF RATIO, the router SHOULD fall back to OLSRv2 Routing Process without using multipath routing.
This can happen if there are too many OLSRv2
only routers in the network, and requiring multipath routing may result in inferior paths.
By invoking the multipath algorithm, up to NUMBER OF PATHS paths are obtained and added to the Multipath Routing Set by creating a Multipath Routing Tuple with:  MR dest addr :  destination of the datagram.
An MP path set with calculated Path Tuples.
Each Path Tuple corresponds to a path obtained in the Multipath Dijkstra Algorithm, with PT metric :
This section introduces the Multipath Dijkstra Algorithm as a default algorithm.
It tries to obtain disjoint paths when appropriate, but it does not guarantee strict disjoint paths.
The use of other algorithms is not prohibited, as long as the requirements described in Section 8.5.1 are met.
Using different multipath algorithms will not impact the interoperability.
The general principle of the Multipath Dijkstra Algorithm [ADHOC11] is to use the Dijkstra Algorithm for multiple iterations and to look for the shortest path P[i] to the destination d at iteration i.
After each iteration, the metric of used links is increased.
Compared to the original Dijkstra's algorithm, the main modification consists in adding two incremental functions, named metric functions fp and fe, in order to prevent the next steps resulting in similar paths:  fp(c) is used to increase metrics of arcs belonging to the previous path P[i 1] (with i>1), where c is the value of the previous metric.
This encourages future paths to use different arcs but not different vertices.
fe(c) is used to increase metrics of the arcs that lead to intermediate vertices of the previous path P[i 1] (with i>1), where c is the value of the previous metric.
The "lead to" means that only one vertex of the arc belongs to the previous path P[i 1] while the other vertex does not.
The "intermediate" means that the source and destination vertices are not considered.
Consider the simple example in Figure 1: a path P[i]
S A D is obtained at step i.
For the next step, the metric of link S A and A D are to be increased using fp(c) because they belong to the path P[i].
A B is to be increased using fe(c) because A is an intermediate vertex of path P[i], and B is not part of P[i].
S A D Figure 1
It is possible to choose a different fp and fe to get link disjoint paths or node disjoint paths as desired.
A recommendation for configuration of fp and fe is given in Section 9.
To get NUMBER OF PATHS different paths, for each path P[i]
Run Dijkstra's algorithm to get the shortest path P[i] for the destination d. 2.
Apply metric function fp to the metric of links (in both directions) in P[i].
Apply metric function fe to the metric of links (in both directions)
that lead to routers used in P[i].
A simple example of the Multipath Dijkstra Algorithm is illustrated in Appendix A. 8.6.
The Multipath Routing Set MUST be updated when the Local Information Base, the Neighborhood Information Base, or the Topology Information Base indicate a change (including a change of any potentially used outgoing neighbor metric values) of the known symmetric links and/or attached networks in the MANET, hence, changing the Topology Graph as described in Section 17.7 of [RFC7181].
How the Multipath Routing Set is updated depends on whether the set is maintained reactively or proactively:  In reactive mode, all the Tuples in the Multipath Routing Set are removed.
The new arriving datagrams will be processed as specified in Section 8.4.
In proactive mode, the routes to all the destinations are updated according to Section 8.5.
In IPv4 networks, datagrams are forwarded using loose source routing as specified in Section 3.1 of [RFC791].
In IPv6 networks, datagrams are forwarded using strict source routing as specified in Section 4.2 of [RFC6554], except the applied routers are MP OLSRv2 routers rather than RPL routers.
The last hop of the source route MUST remove the source routing header.
This section gives default values and guidelines for setting parameters defined in Section 5.
Network administrators may wish to change certain or all the parameters for different network scenarios.
As an experimental protocol, the users of this protocol are also encouraged to explore different parameter settings in various network environments and provide feedback.
NUMBER OF PATHS :  3.
This parameter defines the number of parallel paths used in datagram forwarding.
Setting it to 1 makes the specification identical to OLSRv2.
Setting it to too large of a value may lead to unnecessary computational overhead and inferior paths.
MAX SRC HOPS :  10, for IPv4 networks.
For IPv6 networks, it MUST be set to 0, i.e., no constraint on the maximum number of hops.
It MUST be greater than or equal to 1.
It MUST be greater than or equal to TC INTERVAL.
It SHOULD be significantly greater than TC INTERVAL to reduce unnecessary TC message generations.
It MUST be greater than SR TC INTERVAL and SHOULD allow for a small number of lost messages.
2 c, where c is the original metric of the link.
The setting of metric functions fp and fc defines the preference of obtained multiple disjoint paths.
If id is the identity function, i.e., fp(c) c, three cases are possible:  if id fe<fp, only increase the metric of related links;  if id<fe fp, apply equal increase to the metric of related nodes and links;  if id<fe<fp, apply greater increase to the metric of related links.
Increasing the metric of related links or nodes means avoiding the use of such links or nodes in the next path to be calculated.
As an extension of [RFC7181], the security considerations and security architecture illustrated in [RFC7181] are applicable to this MP OLSRv2 specification.
The implementations without security mechanisms are vulnerable to threats discussed in [RFC8116].
In a mixed network with OLSRv2 only routers, a compromised router can add SOURCE ROUTE TLVs in its TC and HELLO messages, which will make other MP OLSRv2
Routing Processes believe that it supports source routing.
This will increase the possibility of being chosen as MPRs and put into the source routing header.
The former will make it possible to manipulate the flooding of TC messages and the latter will make the datagram pass through the compromised router.
As with [RFC7181], a conformant implementation of MP OLSRv2 MUST, at minimum, implement the security mechanisms specified in [RFC7183] to provide integrity and replay protection of routing control messages.
The MP OLSRv2 Routing Process MUST drop datagrams entering or exiting an OLSRv2/MP OLSRv2 routing domain that contain a source routing header.
Compared to OLSRv2, the use of the source routing header in this specification introduces vulnerabilities related to source routing attacks, which include bypassing filtering devices, bandwidth exhaustion of certain routers, etc.
Those attacks are discussed in Section 5 of [RFC6554] and [RFC5095].
The influence is limited to the OLSRv2/MP OLSRv2 routing domain because the source routing header is used only in the current routing domain.
If the multiple paths are calculated reactively, the datagrams SHOULD be buffered while the paths are being calculated.
Because the path calculation is local and no control message is exchanged, the buffering time should be trivial.
However, depending on the CPU power and memory of the router, a maximum buffer size SHOULD be set to avoid occupying too much memory of the router.
When the buffer is full, the oldest datagrams are dropped.
A possible attack that a malicious application could launch would be one in which it initiates a large amount of datagrams to all the other routers in the network, thus triggering path calculation to all the other routers and during which the datagrams are buffered.
This might flush other legitimate datagrams.
But the impact of the attack is transient: once the path calculation is finished, the datagrams are forwarded and the buffer goes back to empty.
This section adds one new Message TLV, allocated as a new Type Extension to an existing Message TLV.
This specification updates the "Type 7 Message TLV Type Extensions" registry [RFC7181] by adding the new Type Extension SOURCE ROUTE, as illustrated in Table 1.
SOURCE ROUTE Type for Type 7 Message TLV Type Extensions
Examples of Multipath Dijkstra Algorithm
This appendix gives two examples of the Multipath Dijkstra Algorithm.
A network topology is depicted in Figure 2. .
The capital letters are the names of routers.
An arbitrary metric with value between 1 and 3 is used.
The initial metrics of all the links are indicated in the parentheses.
The incremental functions fp(c) 4c and fe(c) 2c are used in this example.
Two paths from router S to router D are demanded.
On the first run of the Dijkstra Algorithm, the shortest path S A D with metric 3 is obtained.
The incremental function fp is applied to increase the metric of the link S A and A D, and fe is applied to increase the metric of the link A B and A C.  Figure 3 shows the link metrics after the increment. .
On the second run of the Dijkstra Algorithm, the second path S B C D with metric 6 is obtained.
As mentioned in Section 8.5, the Multipath Dijkstra Algorithm does not guarantee strict disjoint paths in order to avoid choosing inferior paths.
For example, given the topology in Figure 4, two paths from node S to D are desired.
On the top of the figure, there is a high cost path between S and D.
If an algorithm tries to obtain strict disjoint paths, the two paths obtained will be S B D and S (high cost path)
D, which are extremely unbalanced.
It is undesirable because it will cause huge delay variance between the paths.
By using the Multipath Dijkstra Algorithm, which is based on the punishing scheme, S B D and S B C D will be obtained.
/ \ C / Figure 4
