- title: __initial_text__
  contents:
  - '                 A Reliable Transport Mechanism for PIM

    '
- title: Abstract
  contents:
  - "Abstract\n   This document defines a reliable transport mechanism for the PIM\n\
    \   protocol for transmission of Join/Prune messages.  This eliminates\n   the\
    \ need for periodic Join/Prune message transmission and processing.\n   The reliable\
    \ transport mechanism can use either TCP or SCTP as the\n   transport protocol.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document is not an Internet Standards Track specification;\
    \ it is\n   published for examination, experimental implementation, and\n   evaluation.\n\
    \   This document defines an Experimental Protocol for the Internet\n   community.\
    \  This document is a product of the Internet Engineering\n   Task Force (IETF).\
    \  It represents the consensus of the IETF\n   community.  It has received public\
    \ review and has been approved for\n   publication by the Internet Engineering\
    \ Steering Group (IESG).  Not\n   all documents approved by the IESG are a candidate\
    \ for any level of\n   Internet Standard; see Section 2 of RFC 5741.\n   Information\
    \ about the current status of this document, any errata,\n   and how to provide\
    \ feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc6559.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2012 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction . . . . . . . . . . . . . . . . . . .\
    \ . . . . . .  3\n     1.1.  Requirements Notation  . . . . . . . . . . . . .\
    \ . . . . .  4\n     1.2.  Definitions  . . . . . . . . . . . . . . . . . . .\
    \ . . . .  4\n   2.  Protocol Overview  . . . . . . . . . . . . . . . . . . .\
    \ . . .  5\n   3.  PIM Hello Options  . . . . . . . . . . . . . . . . . . . .\
    \ . .  6\n     3.1.  PIM over the TCP Transport Protocol  . . . . . . . . . .\
    \ .  6\n     3.2.  PIM over the SCTP Transport Protocol . . . . . . . . . . .\
    \  7\n     3.3.  Interface ID . . . . . . . . . . . . . . . . . . . . . . .  8\n\
    \   4.  Establishing Transport Connections . . . . . . . . . . . . . .  9\n  \
    \   4.1.  Connection Security  . . . . . . . . . . . . . . . . . . . 11\n    \
    \ 4.2.  Connection Maintenance . . . . . . . . . . . . . . . . . . 11\n     4.3.\
    \  Actions When a Connection Goes Down  . . . . . . . . . . . 13\n     4.4.  Moving\
    \ from PORT to Datagram Mode  . . . . . . . . . . . . 14\n     4.5.  On-Demand\
    \ versus Pre-Configured Connections  . . . . . . . 14\n     4.6.  Possible Hello\
    \ Suppression Considerations  . . . . . . . . 15\n     4.7.  Avoiding a Pair of\
    \ TCP Connections between Neighbors . . . 15\n   5.  PORT Message Definitions\
    \ . . . . . . . . . . . . . . . . . . . 16\n     5.1.  PORT Join/Prune Message\
    \  . . . . . . . . . . . . . . . . . 18\n     5.2.  PORT Keep-Alive Message  .\
    \ . . . . . . . . . . . . . . . . 19\n     5.3.  PORT Options . . . . . . . .\
    \ . . . . . . . . . . . . . . . 20\n       5.3.1.  PIM IPv4 Join/Prune Option\
    \ . . . . . . . . . . . . . . 21\n       5.3.2.  PIM IPv6 Join/Prune Option .\
    \ . . . . . . . . . . . . . 21\n   6.  Explicit Tracking  . . . . . . . . . .\
    \ . . . . . . . . . . . . 22\n   7.  Support of Multiple Address Families . .\
    \ . . . . . . . . . . . 23\n   8.  Miscellany . . . . . . . . . . . . . . . .\
    \ . . . . . . . . . . 23\n   9.  Transport Considerations . . . . . . . . . .\
    \ . . . . . . . . . 23\n   10. Manageability Considerations . . . . . . . . .\
    \ . . . . . . . . 24\n   11. Security Considerations  . . . . . . . . . . . .\
    \ . . . . . . . 25\n   12. IANA Considerations  . . . . . . . . . . . . . . .\
    \ . . . . . . 25\n     12.1. PORT Port Number . . . . . . . . . . . . . . . .\
    \ . . . . . 25\n     12.2. PORT Hello Options . . . . . . . . . . . . . . . .\
    \ . . . . 25\n     12.3. PORT Message Type Registry . . . . . . . . . . . . .\
    \ . . . 26\n     12.4. PORT Option Type Registry  . . . . . . . . . . . . . .\
    \ . . 26\n   13. Contributors . . . . . . . . . . . . . . . . . . . . . . . .\
    \ . 26\n   14. Acknowledgments  . . . . . . . . . . . . . . . . . . . . . . .\
    \ 27\n   15. References . . . . . . . . . . . . . . . . . . . . . . . . . . 27\n\
    \     15.1. Normative References . . . . . . . . . . . . . . . . . . . 27\n  \
    \   15.2. Informative References . . . . . . . . . . . . . . . . . . 28\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   The goals of this specification are:\n   o  To create a\
    \ simple incremental mechanism to provide reliable PIM\n      Join/Prune message\
    \ delivery in PIM version 2 for use with PIM\n      Sparse-Mode (PIM-SM) [RFC4601],\
    \ including PIM Source-Specific\n      Multicast (PIM-SSM), and Bidirectional\
    \ PIM [RFC5015].\n   o  When a router supports this specification, it need not\
    \ use the\n      reliable transport mechanism with every neighbor.  It can be\n\
    \      negotiated on a per-neighbor basis.\n   The explicit non-goals of this\
    \ specification are:\n   o  Making changes to the PIM message formats as defined\
    \ in [RFC4601].\n   o  Providing support for automatic switching between the reliable\n\
    \      transport mechanism and the regular PIM mechanism defined in\n      [RFC4601].\
    \  Two routers that are PIM neighbors on a link will\n      always use the reliable\
    \ transport mechanism if and only if both\n      have enabled support for the\
    \ reliable transport mechanism.\n   This document will specify how periodic Join/Prune\
    \ message\n   transmission can be eliminated by using TCP [RFC0793] or SCTP\n\
    \   [RFC4960] as the reliable transport mechanism for Join/Prune\n   messages.\
    \  The destination port number is 8471 for both TCP and SCTP.\n   This specification\
    \ enables greater scalability in terms of control-\n   traffic overhead.  However,\
    \ for routers connected to multi-access\n   links, scalability comes at the price\
    \ of increased PIM state and the\n   overhead required to maintain this state.\n\
    \   In many existing and emerging networks, particularly wireless and\n   mobile\
    \ satellite systems, link degradation due to weather,\n   interference, and other\
    \ impairments can result in temporary spikes in\n   the packet loss rate.  In\
    \ these environments, periodic PIM joining\n   can cause join latency when messages\
    \ are lost, causing a\n   retransmission only 60 seconds later.  By applying a\
    \ reliable\n   transport, a lost Join is retransmitted rapidly.  Furthermore,\
    \ when\n   the last user leaves a multicast group, any lost Prune is similarly\n\
    \   repaired, and the multicast stream is quickly removed from the\n   wireless/satellite\
    \ link.  Without a reliable transport, the multicast\n   transmission could otherwise\
    \ continue until it timed out, roughly 3\n   minutes later.  As network resources\
    \ are at a premium in many of\n   these environments, rapid termination of the\
    \ multicast stream is\n   critical for maintaining efficient use of bandwidth.\n\
    \   This is an experimental extension to PIM.  It makes some fundamental\n   changes\
    \ to how PIM works in that Join/Prune state does not require\n   periodic updates,\
    \ and it partly turns PIM into a hard-state protocol.\n   Also, using reliable\
    \ delivery for PIM messages is a new concept, and\n   it is likely that experiences\
    \ from early implementations and\n   deployments will lead to at least minor changes\
    \ in the protocol.\n   Once there is some deployment experience, making this a\
    \ Standards\n   Track protocol should be considered.  Experiments using this protocol\n\
    \   only require support by pairs of PIM neighbors, and need not be\n   constrained\
    \ to isolated networks.\n"
- title: 1.1.  Requirements Notation
  contents:
  - "1.1.  Requirements Notation\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\"\
    , \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"\
    MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described\
    \ in [RFC2119].\n"
- title: 1.2.  Definitions
  contents:
  - "1.2.  Definitions\n   PORT:   Stands for PIM Over Reliable Transport, which is\
    \ the short\n      form for describing the mechanism in this specification where\
    \ PIM\n      can use the TCP or SCTP transport protocol.\n   Periodic Join/Prune\
    \ message:   A Join/Prune message sent periodically\n      to refresh state.\n\
    \   Incremental Join/Prune message:   A Join/Prune message sent as a\n      result\
    \ of state creation or deletion events.  Also known as a\n      triggered message.\n\
    \   Native Join/Prune message:   A Join/Prune message that is carried\n      with\
    \ an IP protocol type of PIM.\n   PORT Join/Prune message:   A Join/Prune message\
    \ using TCP or SCTP for\n      transport.\n   Datagram Mode:   The procedures\
    \ whereby PIM encapsulates triggered or\n      periodic Join/Prune messages in\
    \ IP packets.\n   PORT Mode:   The procedures used by PIM and defined in this\n\
    \      specification for sending Join/Prune messages over the TCP or SCTP\n  \
    \    transport layer.\n"
- title: 2.  Protocol Overview
  contents:
  - "2.  Protocol Overview\n   PIM Over Reliable Transport (PORT) is a simple extension\
    \ to PIMv2 for\n   refresh reduction of PIM Join/Prune messages.  It involves\
    \ sending\n   incremental rather than periodic Join/Prune messages over a TCP/SCTP\n\
    \   connection between PIM neighbors.\n   PORT only applies to PIM Sparse-Mode\
    \ [RFC4601] and Bidirectional PIM\n   [RFC5015] Join/Prune messages.\n   This\
    \ document does not restrict PORT to any specific link types.\n   However, the\
    \ use of PORT on, e.g., multi-access LANs with many PIM\n   neighbors should be\
    \ carefully evaluated.  This is due to the facts\n   that there may be a full\
    \ mesh of PORT connections and that explicit\n   tracking of all PIM neighbors\
    \ is required.\n   PORT can be incrementally used on a link between PORT-capable\n\
    \   neighbors.  Routers that are not PORT-capable can continue to use PIM\n  \
    \ in Datagram mode.  PORT capability is detected using new PORT-Capable\n   PIM\
    \ Hello Options.\n   Once PORT is enabled on an interface and a PIM neighbor also\n\
    \   announces that it is PORT enabled, only PORT Join/Prune messages will\n  \
    \ be used.  That is, only PORT Join/Prune messages are accepted from,\n   and\
    \ sent to, that particular neighbor.  Native Join/Prune messages\n   are still\
    \ used for PIM neighbors that are not PORT enabled.\n   PORT Join/Prune messages\
    \ are sent using a TCP/SCTP connection.  When\n   two PIM neighbors are PORT enabled,\
    \ both for TCP or both for SCTP,\n   they will immediately, or on demand, establish\
    \ a connection.  If the\n   connection goes down, they will again immediately,\
    \ or on demand, try\n   to reestablish the connection.  No Join/Prune messages\
    \ (neither\n   Native nor PORT) are sent while there is no connection.  Also,\
    \ any\n   received native Join/Prune messages from that neighbor are discarded,\n\
    \   even when the connection is down.\n   When PORT is used, only incremental\
    \ Join/Prune messages are sent from\n   downstream routers to upstream routers.\
    \  As such, downstream routers\n   do not generate periodic Join/Prune messages\
    \ for state for which the\n   Reverse Path Forwarding (RPF) neighbor is PORT-capable.\n\
    \   For Joins and Prunes that are received over a TCP/SCTP connection,\n   the\
    \ upstream router does not start or maintain timers on the outgoing\n   interface\
    \ entry.  Instead, it keeps track of which downstream routers\n   have expressed\
    \ interest.  An interface is deleted from the outgoing\n   interface list only\
    \ when all downstream routers on the interface no\n   longer wish to receive traffic.\
    \  If there also are native Joins/\n   Prunes from a non-PORT neighbor, then a\
    \ router can maintain timers on\n   the outgoing interface entry as usual, while\
    \ at the same time keep\n   track of each of the downstream PORT Joins/Prunes.\n\
    \   This document does not update the PIM Join/Prune packet format.  In\n   the\
    \ procedures described in this document, each PIM Join/Prune\n   message is included\
    \ in the payload of a PORT message carried over\n   TCP/SCTP.  See Section 5 for\
    \ details on the PORT message.\n"
- title: 3.  PIM Hello Options
  contents:
  - '3.  PIM Hello Options

    '
- title: 3.1.  PIM over the TCP Transport Protocol
  contents:
  - "3.1.  PIM over the TCP Transport Protocol\n   Option Type: PIM-over-TCP-Capable\n\
    \        0                   1                   2                   3\n     \
    \   0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \       |           Type = 27           |         Length = 4 + X        |\n  \
    \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    \
    \   |     TCP Connection ID AFI     |        Reserved       |  Exp  |\n      \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n       |\
    \                       TCP Connection ID                       |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   Assigned Hello Type values can be found in [HELLO-OPT].\n   When a router\
    \ is configured to use PIM over TCP on a given interface,\n   it MUST include\
    \ the PIM-over-TCP-Capable Hello Option in its Hello\n   messages for that interface.\
    \  If a router is explicitly disabled from\n   using PIM over TCP, it MUST NOT\
    \ include the PIM-over-TCP-Capable\n   Hello Option in its Hello messages.\n \
    \  All Hello messages containing the PIM-over-TCP-Capable Hello Option\n   MUST\
    \ also contain the Interface ID Hello Option, see Section 3.3.\n   Implementations\
    \ MAY provide a configuration option to enable or\n   disable PORT functionality.\
    \  It is RECOMMENDED that this capability\n   be disabled by default.\n   Length:\
    \   Length in bytes for the value part of the Type/Length/Value\n      encoding,\
    \ where X is the number of bytes that make up the\n      Connection ID field.\
    \  X is 4 when AFI of value 1 (IPv4) [AFI] is\n      used, 16 when AFI of value\
    \ 2 (IPv6) [AFI] is used, and 0 when AFI\n      of value 0 is used.\n   TCP Connection\
    \ ID AFI:   The AFI value to describe the address family\n      of the address\
    \ of the TCP Connection ID field.  Note that this\n      value does not need to\
    \ match the address family of the PIM Hello\n      message that carries it.  When\
    \ this field is 0, a mechanism\n      outside the scope of this document is used\
    \ to obtain the addresses\n      used to establish the TCP connection.\n   Reserved:\
    \   Set to zero on transmission and ignored on receipt.\n   Exp:   For experimental\
    \ use [RFC3692].  One expected use of these\n      bits would be to signal experimental\
    \ capabilities.  For example,\n      if a router supports an experimental feature,\
    \ it may set a bit to\n      indicate this.  The default behavior, unless a router\
    \ supports a\n      particular experiment, is to ignore the bits on receipt.\n\
    \   TCP Connection ID:   An IPv4 or IPv6 address used to establish the\n     \
    \ TCP connection.  This field is omitted (length 0) for the\n      Connection\
    \ ID AFI 0.\n"
- title: 3.2.  PIM over the SCTP Transport Protocol
  contents:
  - "3.2.  PIM over the SCTP Transport Protocol\n   Option Type: PIM-over-SCTP-Capable\n\
    \        0                   1                   2                   3\n     \
    \   0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \       |           Type = 28           |         Length = 4 + X        |\n  \
    \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    \
    \   |     SCTP Connection ID AFI    |        Reserved       |  Exp  |\n      \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n       |\
    \                       SCTP Connection ID                      |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   Assigned Hello Type values can be found in [HELLO-OPT].\n   When a router\
    \ is configured to use PIM over SCTP on a given\n   interface, it MUST include\
    \ the PIM-over-SCTP-Capable Hello Option in\n   its Hello messages for that interface.\
    \  If a router is explicitly\n   disabled from using PIM over SCTP, it MUST NOT\
    \ include the PIM-over-\n   SCTP-Capable Hello Option in its Hello messages.\n\
    \   All Hello messages containing the PIM-over-SCTP-Capable Hello Option\n   MUST\
    \ also contain the Interface ID Hello Option; see Section 3.3.\n   Implementations\
    \ MAY provide a configuration option to enable or\n   disable PORT functionality.\
    \  It is RECOMMENDED that this capability\n   be disabled by default.\n   Length:\
    \   Length in bytes for the value part of the Type/Length/Value\n      encoding,\
    \ where X is the number of bytes that make up the\n      Connection ID field.\
    \  X is 4 when AFI of value 1 (IPv4) [AFI] is\n      used, 16 when AFI of value\
    \ 2 (IPv6) [AFI] is used, and 0 when AFI\n      of value 0 is used.\n   SCTP Connection\
    \ ID AFI:   The AFI value to describe the address\n      family of the address\
    \ of the SCTP Connection ID field.  Note that\n      this value does not need\
    \ to match the address family of the PIM\n      Hello message that carries it.\
    \  When this field is 0, a mechanism\n      outside the scope of this document\
    \ is used to obtain the addresses\n      used to establish the SCTP connection.\n\
    \   Reserved:   Set to zero on transmission and ignored on receipt.\n   Exp: \
    \  For experimental use [RFC3692].  One expected use of these\n      bits would\
    \ be to signal experimental capabilities.  For example,\n      if a router supports\
    \ an experimental feature, it may set a bit to\n      indicate this.  The default\
    \ behavior, unless a router supports a\n      particular experiment, is to ignore\
    \ the bits on receipt.\n   SCTP Connection ID:   An IPv4 or IPv6 address used\
    \ to establish the\n      SCTP connection.  This field is omitted (length 0) for\
    \ the\n      Connection ID AFI 0.\n"
- title: 3.3.  Interface ID
  contents:
  - "3.3.  Interface ID\n   All Hello messages containing PIM-over-TCP-Capable or\
    \ PIM-over-SCTP-\n   Capable Hello Options MUST also contain the Interface ID\
    \ Hello Option\n   [RFC6395].\n   The Interface ID is used to associate a PORT\
    \ Join/Prune message with\n   the PIM neighbor from which it is coming.  When\
    \ unnumbered interfaces\n   are used or when a single transport connection is\
    \ used for sending\n   and receiving Join/Prune messages over multiple interfaces,\
    \ the\n   Interface ID is used to convey the interface from Join/Prune message\n\
    \   sender to Join/Prune message receiver.  The value of the Interface ID\n  \
    \ Hello Option in Hellos sent on an interface MUST be the same as the\n   Interface\
    \ ID value in all PORT Join/Prune messages sent to a PIM\n   neighbor on that\
    \ interface.\n   The Interface ID need only uniquely identify an interface of\
    \ a\n   router; it does not need to identify to which router the interface\n \
    \  belongs.  This means that the Router ID part of the Interface ID MAY\n   be\
    \ 0.  For details on the Router ID and the value 0, see [RFC6395].\n"
- title: 4.  Establishing Transport Connections
  contents:
  - "4.  Establishing Transport Connections\n   While a router interface is PORT enabled,\
    \ a PIM-over-TCP-Capable or a\n   PIM-over-SCTP-Capable Option MUST be included\
    \ in the PIM Hello\n   messages sent on that interface.  When a router on a PORT-enabled\n\
    \   interface receives a Hello message containing a PIM-over-TCP-Capable/\n  \
    \ PIM-over-SCTP-Capable Option from a new neighbor, or an existing\n   neighbor\
    \ that did not previously include the option, it switches to\n   PORT mode for\
    \ that particular neighbor.\n   When a router switches to PORT mode for a neighbor,\
    \ it stops sending\n   and accepting Native Join/Prune messages for that neighbor.\
    \  Any\n   state from previous Native Join/Prune messages is left to expire as\n\
    \   normal.  It will also attempt to establish a transport connection\n   (TCP\
    \ or SCTP) with the neighbor.  If both the router and its neighbor\n   have announced\
    \ both PIM-over-TCP-Capable and PIM-over-SCTP-Capable\n   Options, SCTP MUST be\
    \ used.  This resolves the issue where two\n   transports are both offered.  The\
    \ method prefers SCTP over TCP,\n   because SCTP has benefits such as handling\
    \ of call collisions and\n   support for multiple streams, as discussed later\
    \ in this document.\n   When the router is using TCP, it will compare the TCP\
    \ Connection ID\n   it announced in the PIM-over-TCP-Capable Option with the TCP\n\
    \   Connection ID in the Hello received from the neighbor.  Unless\n   connections\
    \ are opened on demand (see below), the router with the\n   lower Connection ID\
    \ MUST do an active transport open to the neighbor\n   Connection ID.  The router\
    \ with the higher Connection ID MUST do a\n   passive transport open.  An implementation\
    \ MAY open connections only\n   on demand; in that case, it may be that the neighbor\
    \ with the higher\n   Connection ID does the active open (see Section 4.5).  If\
    \ the router\n   with the lower Connection ID chooses to only do an active open\
    \ on\n   demand, it MUST do a passive open, allowing for the neighbor to\n   initiate\
    \ the connection.  Note that the source address of the active\n   open MUST be\
    \ the announced Connection ID.\n   When the router is using SCTP, the IP address\
    \ comparison need not be\n   done since the SCTP protocol can handle call collision.\n\
    \   The decisions whether to use PORT, which transport to use, and which\n   Connection\
    \ IDs to use are made independently for IPv4 and IPv6.\n   Thus, if PORT is used\
    \ both for IPv4 and IPv6, both IPv4 and IPv6 PIM\n   Hello messages MUST be sent,\
    \ both containing PORT Hello Options.  If\n   two neighbors announce the same\
    \ transport (TCP or SCTP) and the same\n   Connection IDs in the IPv4 and IPv6\
    \ Hello messages, then only one\n   connection is established and is shared. \
    \ Otherwise, two connections\n   are established and are used separately.\n  \
    \ The PIM router that performs the active open initiates the connection\n   with\
    \ a locally generated source transport port number and a well-\n   known destination\
    \ transport port number.  The PIM router that\n   performs the passive open listens\
    \ on the well-known local transport\n   port number and does not qualify the remote\
    \ transport port number.\n   See Section 5 for the well-known port number assignment\
    \ for PORT.\n   When a transport connection is established (or reestablished),\
    \ the\n   two routers MUST both send a full set of Join/Prune messages for\n \
    \  state for which the other router is the upstream neighbor.  This is\n   needed\
    \ to ensure that the upstream neighbor has the correct state.\n   When moving\
    \ from Datagram mode, or when the connection has gone down,\n   the router cannot\
    \ be sure that all the previous Join/Prune state was\n   received by the neighbor.\
    \  Any state that was created before the\n   connection was established (or reestablished)\
    \ and that is not\n   refreshed MUST be left to expire and be deleted.  When the\
    \ non-\n   refreshed state has expired and been deleted, the two neighbors will\n\
    \   be in sync.\n   When not running PORT, a full update is only needed when a\
    \ router\n   restarts; with PORT, it must be done every time a connection is\n\
    \   established.  This can be costly, although it is expected that a PORT\n  \
    \ connection will go up and down rarely.  There may be a need for\n   extensions\
    \ to better handle this.\n   It is possible that a router starts sending Hello\
    \ messages with a new\n   Connection ID, e.g., due to configuration changes. \
    \ A router MUST\n   always use the last announced and last seen Connection IDs.\
    \  A\n   connection is identified by the local Connection ID (the one we are\n\
    \   announcing on a particular interface), and the remote Connection ID\n   (the\
    \ one we are receiving from a neighbor on the same interface).\n   When either\
    \ the local or remote ID changes, the Connection ID pair we\n   need a connection\
    \ for changes.  There may be an existing connection\n   with the same pair, in\
    \ which case the router will share that\n   connection.  Or, a new connection\
    \ may need to be established.  Note\n   that for link-local addresses, the interface\
    \ should be regarded as\n   part of the ID, so that connection sharing is not\
    \ attempted when the\n   same link-local addresses are seen on different interfaces.\n\
    \   When a Connection ID changes, if the previously used connection is\n   not\
    \ needed (i.e., there are no other PIM neighborships using the same\n   Connection\
    \ ID pair), both peers MUST attempt to reset the transport\n   connection.  Next\
    \ (even if the old connection is still needed), they\n   MUST, unless a connection\
    \ already exists with the new Connection ID\n   pair, immediately or on demand\
    \ attempt to establish a new connection\n   with the new Connection ID pair.\n\
    \   Normally, the Interface ID would not change while a connection is up.\n  \
    \ However, if it does, the change does not affect the connection.  It\n   just\
    \ means that when subsequent PORT Join/Prune messages are\n   received, they should\
    \ be matched against the last seen Interface ID.\n   Note that a Join sent over\
    \ a transport connection will only be seen\n   by the upstream router; thus, it\
    \ will not cause non-PORT routers on\n   the link with the upstream router to\
    \ delay the refresh of Join state\n   for the same state.  Similarly, a Prune\
    \ sent over a transport\n   connection will only be seen by the upstream router;\
    \ thus, it will\n   never cause non-PORT routers on the link with the upstream\
    \ router to\n   send a Join to override this Prune.\n   Note also that a datagram\
    \ PIM Join/Prune message for a said (S,G) or\n   (*,G) sent by some router on\
    \ a link will not cause routers on the\n   same link that use a transport connection\
    \ with the upstream router\n   for that state to suppress the refresh of that\
    \ state to the upstream\n   router (because they don't need to periodically refresh\
    \ this state)\n   or to send a Join to override a Prune.  The latter will not\
    \ occur\n   because the upstream router will only stop forwarding the traffic\n\
    \   when all joined routers that use a transport connection have\n   explicitly\
    \ sent a Prune for this state, as explained in Section 6.\n"
- title: 4.1.  Connection Security
  contents:
  - "4.1.  Connection Security\n   TCP/SCTP packets used for PORT MUST be sent with\
    \ a TTL/Hop Limit of\n   255 to facilitate the enabling of the Generalized TTL\
    \ Security\n   Mechanism (GTSM) [RFC5082].  Implementations SHOULD provide a\n\
    \   configuration option to enable the GTSM check at the receiver.  This\n   means\
    \ checking that inbound packets from directly connected neighbors\n   have a TTL/Hop\
    \ Limit of 255, but implementations MAY also allow for a\n   different TTL/Hop\
    \ Limit threshold to check that the sender is within\n   a certain number of router\
    \ hops.  The GTSM check SHOULD be disabled\n   by default.\n   Implementations\
    \ SHOULD support the TCP Authentication Option (TCP-AO)\n   [RFC5925] and SCTP\
    \ Authenticated Chunks [RFC4895].\n"
- title: 4.2.  Connection Maintenance
  contents:
  - "4.2.  Connection Maintenance\n   TCP is designed to keep connections up indefinitely\
    \ during a period\n   of network disconnection.  If a PIM-over-TCP router fails,\
    \ the TCP\n   connection may stay up until the neighbor actually reboots, and\
    \ even\n   then it may continue to stay up until PORT tries to send the neighbor\n\
    \   some information.  This is particularly relevant to PIM since the\n   flow\
    \ of Join/Prune messages might be in only one direction and the\n   downstream\
    \ neighbor might never get any indication via TCP that the\n   other end of the\
    \ connection is not really there.\n   SCTP has a heartbeat mechanism that can\
    \ be used to detect that a\n   connection is not working, even when no data is\
    \ sent.  Many TCP\n   implementations also support sending keep-alives for this\
    \ purpose.\n   Implementations MAY make use of TCP keep-alives, but the PORT keep-\n\
    \   alive mechanism defined below allows for more control and\n   flexibility.\n\
    \   One can detect that a PORT connection is not working by regularly\n   sending\
    \ PORT messages.  This applies to both TCP and SCTP.  For\n   example, in the\
    \ case of TCP, the connection will be reset if no TCP\n   ACKs are received after\
    \ several retries.  PORT in itself does not\n   require any periodic signaling.\
    \  PORT Join/Prune messages are only\n   sent when there is a state change.  If\
    \ the state changes are not\n   frequent enough, a PORT Keep-Alive message (defined\
    \ in Section 5.2)\n   can be sent instead.  For example, if an implementation\
    \ wants to send\n   a PORT message, to check that the connection is working, at\
    \ least\n   every 60 seconds, then whenever 60 seconds have passed since the\n\
    \   previous message, a Keep-Alive message could be sent.  If there were\n   less\
    \ than 60 seconds between each Join/Prune, no Keep-Alive messages\n   would be\
    \ needed.  Implementations SHOULD support the use of PORT\n   Keep-Alive messages.\
    \  It is RECOMMENDED that a configuration option\n   be available to network administrators\
    \ to enable it when needed.\n   Note that Keep-Alives can be used by a peer, independently\
    \ of whether\n   the other peer supports it.\n   An implementation that supports\
    \ Keep-Alive messages acts as follows\n   when processing a received PORT message.\
    \  When processing a Keep-\n   Alive message with a non-zero Holdtime value, it\
    \ MUST set a timer to\n   the value.  We call this timer Connection Expiry Timer\
    \ (CET).  If the\n   CET is already running, it MUST be reset to the new value.\
    \  When\n   processing a Keep-Alive message with a zero Holdtime value, the CET\n\
    \   (if running) MUST be stopped.  When processing a PORT message other\n   than\
    \ a Keep-Alive, the CET MUST be reset to the last received\n   Holdtime value\
    \ if running.  If the CET is not running, no action is\n   taken.  If the CET\
    \ expires, the connection SHOULD be shut down.  This\n   specification does not\
    \ mandate a specific default Holdtime value.\n   However, the dynamic congestion\
    \ and flow control in TCP and SCTP can\n   result in variable transit delay between\
    \ the endpoints.  When\n   capacity varies, there may be loss in the network or\
    \ variable link\n   performance.  Consistent behavior therefore requires a sufficiently\n\
    \   large Holdtime value, e.g., 60 seconds to prevent premature\n   termination.\n\
    \   It is possible that a router receives Join/Prune messages for an\n   interface/link\
    \ that is down.  As long as the neighbor has not\n   expired, it is RECOMMENDED\
    \ to process those messages as usual.  If\n   they are ignored, then the router\
    \ SHOULD ensure it gets a full update\n   for that interface when it comes back\
    \ up.  This can be done by\n   changing the GenID (Generation Identifier; see\
    \ [RFC4601]) or by\n   terminating and reestablishing the connection.\n   If a\
    \ PORT neighbor changes its GenID and a connection is established\n   or is in\
    \ the process of being established, the local side should\n   generally tear down\
    \ the connection and do as described in\n   Section 4.3.  However, if the connection\
    \ is shared by multiple\n   interfaces and the GenID changes for only one of them,\
    \ the local side\n   SHOULD simply send a full update, similar to other cases\
    \ when a GenID\n   changes for an upstream neighbor.\n"
- title: 4.3.  Actions When a Connection Goes Down
  contents:
  - "4.3.  Actions When a Connection Goes Down\n   A connection may go down for a\
    \ variety of reasons.  It may be due to\n   an error condition or a configuration\
    \ change.  A connection SHOULD be\n   shut down as soon as there are no more PIM\
    \ neighbors using it.  That\n   is, for the connection in question (and its associated\
    \ local and\n   remote Connection IDs), when there is no PIM neighbor with that\n\
    \   particular remote Connection ID on any interface where we announce\n   the\
    \ local Connection ID, the connection SHOULD be shut down.  This\n   may happen\
    \ when a new Connection ID is configured, PORT is disabled,\n   or a PIM neighbor\
    \ expires.\n   If a PIM neighbor expires, one should free connection state and\n\
    \   downstream outgoing interface list (oif-list) state for that\n   neighbor.\
    \  A downstream router, when an upstream neighboring router\n   has expired, will\
    \ simply update the RPF neighbor for the\n   corresponding state to a new neighbor\
    \ where it would trigger Join/\n   Prune messages.  This behavior is according\
    \ to [RFC4601], which\n   defines the term \"RPF neighbor\".  It is required of\
    \ a PIM router to\n   clear its neighbor table for a neighbor who has timed out\
    \ due to\n   neighbor Holdtime expiration.\n   When a connection is no longer\
    \ available between two PORT-enabled PIM\n   neighbors, they MUST immediately,\
    \ or on demand, try to reestablish\n   the connection following the normal rules\
    \ for connection\n   establishment.  The neighbors MUST also start expiry timers\
    \ so that\n   all oif-list state for the neighbor using the connection gets expired\n\
    \   after J/P_Holdtime, unless it later gets refreshed by receiving new\n   Join/Prunes.\n\
    \   The value of J/P_Holdtime is 210 seconds.  This value is based on\n   Section\
    \ 4.11 of [RFC4601], which says that J/P_HoldTime should be 3.5\n   * t_periodic\
    \ where the default for t_periodic is 60 seconds.\n"
- title: 4.4.  Moving from PORT to Datagram Mode
  contents:
  - "4.4.  Moving from PORT to Datagram Mode\n   There may be situations where an\
    \ administrator decides to stop using\n   PORT.  If PORT is disabled on a router\
    \ interface, or a previously\n   PORT-enabled neighbor no longer announces any\
    \ of the PORT Hello\n   Options, the router follows the rules in Section 4.3 for\
    \ taking down\n   connections and starting timers.  Next, the router SHOULD trigger\
    \ a\n   full state update similar to what would be done if the GenID changed\n\
    \   in Datagram mode.  The router SHOULD send Join/Prune messages for any\n  \
    \ state where the router switched from PORT to Datagram mode for the\n   upstream\
    \ neighbor.\n"
- title: 4.5.  On-Demand versus Pre-Configured Connections
  contents:
  - "4.5.  On-Demand versus Pre-Configured Connections\n   Transport connections could\
    \ be established when they are needed or\n   when a router interface to other\
    \ PIM neighbors has come up.  The\n   advantage of on-demand transport connection\
    \ establishment is the\n   reduction of router resources, especially in the case\
    \ where there is\n   no need for a full mesh of connections on a network interface.\
    \  The\n   disadvantage is additional delay and queueing when a Join/Prune\n \
    \  message needs to be sent and a transport connection is not\n   established\
    \ yet.\n   If a router interface has become operational and PIM neighbors are\n\
    \   learned from Hello messages, at that time, transport connections may\n   be\
    \ established.  The advantage is that a connection is ready to\n   transport data\
    \ by the time a Join/Prune message needs to be sent.\n   The disadvantage is there\
    \ can be more connections established than\n   needed.  This can occur when there\
    \ is a small set of RPF neighbors\n   for the active distribution trees compared\
    \ to the total number of\n   neighbors.  Even when transport connections are pre-established\n\
    \   before they are needed, a connection can go down and an\n   implementation\
    \ will have to deal with an on-demand situation.\n   Note that for TCP, it is\
    \ the router with the lower Connection ID that\n   decides whether to open a connection\
    \ immediately or on demand.  The\n   router with the higher Connection ID SHOULD\
    \ only initiate a\n   connection on demand, that is, if it needs to send a Join/Prune\n\
    \   message and there is no currently established connection.\n   Therefore, this\
    \ specification RECOMMENDS but does not mandate the use\n   of on-demand transport\
    \ connection establishment.\n"
- title: 4.6.  Possible Hello Suppression Considerations
  contents:
  - "4.6.  Possible Hello Suppression Considerations\n   Based on this specification,\
    \ a transport connection cannot be\n   established until a Hello message is received.\
    \  Reasons for this are\n   to determine if the PIM neighbor supports this specification\
    \ and to\n   determine the remote address to use for establishing the transport\n\
    \   connection.\n   There are cases where it is desirable to suppress entirely\
    \ the\n   transmission of Hello messages.  In this case, how to determine if\n\
    \   the PIM neighbor supports this specification and how to determine\n   out-of-band\
    \ (i.e., outside of the PIM protocol) the remote address\n   for establishing\
    \ the transport connection are outside the scope of\n   this document.  In this\
    \ case, the following is outside the scope of\n   this document: how to determine\
    \ if the PIM neighbor supports this\n   specification as well as an out-of-band\
    \ (outside of the PIM protocol)\n   method to determine the remote address to\
    \ establish the transport\n   connection.\n"
- title: 4.7.  Avoiding a Pair of TCP Connections between Neighbors
  contents:
  - "4.7.  Avoiding a Pair of TCP Connections between Neighbors\n   To ensure that\
    \ there is only one TCP connection between a pair of PIM\n   neighbors, the following\
    \ set of rules MUST be followed.  Note that\n   this section applies only to TCP;\
    \ for SCTP, this is not an issue.\n   Let nodes A and B be two PIM neighbors where\
    \ A's Connection ID is\n   numerically smaller than B's Connection ID, and each\
    \ is known to the\n   other as having a potential PIM adjacency relationship.\n\
    \   At node A:\n   o  If there is already an established TCP connection to B,\
    \ on the\n      PIM-over-TCP port, then A MUST NOT attempt to establish a new\n\
    \      connection to B.  Rather, it uses the established connection to\n     \
    \ send Join/Prune messages to B.  (This is independent of which node\n      initiated\
    \ the connection.)\n   o  If A has initiated a connection to B, but the connection\
    \ is still\n      in the process of being established, then A MUST refuse any\n\
    \      connection on the PIM-over-TCP port from B.\n   o  At any time when A does\
    \ not have a connection to B (which is\n      either established or in the process\
    \ of being established), A MUST\n      accept connections from B.\n   At node\
    \ B:\n   o  If there is already an established TCP connection to A on the PIM-\n\
    \      over-TCP port, then B MUST NOT attempt to establish a new\n      connection\
    \ to A.  Rather, it uses the established connection to\n      send Join/Prune\
    \ messages to A.  (This is independent of which node\n      initiated the connection.)\n\
    \   o  If B has initiated a connection to A, but the connection is still\n   \
    \   in the process of being established, then if A initiates a\n      connection\
    \ too, B MUST accept the connection initiated by A and\n      release the connection\
    \ that it (B) initiated.\n"
- title: 5.  PORT Message Definitions
  contents:
  - "5.  PORT Message Definitions\n   For scaling purposes, it may be desirable to\
    \ allow Join/Prune\n   messages from different PIM protocol families to be sent\
    \ over the\n   same transport connection.  Also, it may be desirable to have a\
    \ set\n   of Join/Prune messages for one address family sent over a transport\n\
    \   connection that is established over a different address-family\n   network\
    \ layer.\n   To be able to do this, we need a common PORT message format.  This\n\
    \   will provide both record boundary and demux points when sending over\n   a\
    \ stream protocol like TCP/SCTP.\n   A PORT message may contain PORT Options;\
    \ see Section 5.3.  We will\n   define two PORT Options for carrying PIM Join/Prune\
    \ messages -- one\n   for IPv4 and one for IPv6.  For each PIM Join/Prune message\
    \ to be\n   sent over the transport connection, we send a PORT Join/Prune message\n\
    \   containing exactly one such option.\n   Each PORT message will have the Type/Length/Value\
    \ format.  Multiple\n   different TLV types can be sent over the same transport\
    \ connection.\n   To make sure PIM Join/Prune messages are delivered as soon as\
    \ the TCP\n   transport layer receives the Join/Prune buffer, the TCP Push flag\n\
    \   will be set in all outgoing Join/Prune messages sent over a TCP\n   transport\
    \ connection.\n   PORT messages will be sent using destination TCP port number\
    \ 8471.\n   When using SCTP as the reliable transport, destination port number\n\
    \   8471 will be used.  See Section 12 for IANA considerations.\n   PORT messages\
    \ are error checked.  This includes unknown/illegal type\n   fields or a truncated\
    \ message.  If the PORT message contains a PIM\n   Join/Prune Message, then that\
    \ is subject to the normal PIM error\n   checks, including checksum verification.\
    \  If any parsing errors occur\n   in a PORT message, it is skipped, and we proceed\
    \ to any following\n   PORT messages.\n   When an unknown type field is encountered,\
    \ that message MUST be\n   ignored.  As specified above, one then proceeds as\
    \ usual when\n   processing further PORT messages.  This is important in order\
    \ to\n   allow new message types to be specified in the future, without\n   breaking\
    \ existing implementations.  However, if only unknown or\n   invalid messages\
    \ are received for a longer period of time, an\n   implementation MAY alert the\
    \ operator.  For example, if a message is\n   sent with a wrong length, the receiver\
    \ is likely to see only unknown/\n   invalid messages thereafter.\n   The checksum\
    \ of the PIM Join/Prune message MUST be calculated exactly\n   as specified in\
    \ Section 4.9 of [RFC4601].  For IPv6, [RFC4601]\n   specifies the use of a pseudo-header.\
    \  For PORT, the exact same\n   pseudo-header MUST be used, but its source and\
    \ destination address\n   fields MUST be set to 0 when calculating the checksum.\n\
    \   The TLV type field is 16 bits.  The range 65532 - 65535 is for\n   experimental\
    \ use [RFC3692].\n   This document defines two message types.\n"
- title: 5.1.  PORT Join/Prune Message
  contents:
  - "5.1.  PORT Join/Prune Message\n        0                   1                \
    \   2                   3\n        0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\
    \ 2 3 4 5 6 7 8 9 0 1\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \       |          Type = 1             |        Message Length         |\n  \
    \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    \
    \   |                            Reserved                           |\n      \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n       |\
    \                           Interface                           |\n       |  \
    \                             ID                              |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \       |    PORT Option Type           |      Option Value Length      |\n  \
    \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    \
    \   |                             Value                             |\n      \
    \ |                               .                               |\n       |\
    \                               .                               |\n       |  \
    \                             .                               |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \       \\                               .                               \\\n\
    \       /                               .                               /\n  \
    \     \\                               .                               \\\n  \
    \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    \
    \   |    PORT Option Type           |      Option Value Length      |\n      \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n       |\
    \                             Value                             |\n       |  \
    \                             .                               |\n       |    \
    \                           .                               |\n       |      \
    \                         .                               |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                          PORT Join/Prune Message\n   The PORT Join/Prune Message\
    \ is used for sending a PIM Join/Prune.\n   Message Length:   Length in bytes\
    \ for the value part of the Type/\n      Length/Value encoding.  If no PORT Options\
    \ are included, the\n      length is 12.  If n PORT Options with Option Value\
    \ lengths L1, L2,\n      ..., Ln are included, the message length is 12 + 4*n\
    \ + L1 + L2 +\n      ... + Ln.\n   Reserved:   Set to zero on transmission and\
    \ ignored on receipt.\n   Interface ID:   This MUST be the Interface ID of the\
    \ Interface ID\n      Hello Option contained in the PIM Hello messages that the\
    \ PIM\n      router is sending to the PIM neighbor.  It indicates to the PIM\n\
    \      neighbor what interface to associate the Join/Prune with.  The\n      Interface\
    \ ID allows us to do connection sharing.\n   PORT Options:   The message MUST\
    \ contain exactly one PIM Join/Prune\n      PORT Option, either one PIM IPv4 Join/Prune\
    \ or one PIM IPv6 Join/\n      Prune.  It MUST NOT contain both.  It MAY contain\
    \ additional\n      options not defined in this document.  The behavior when receiving\n\
    \      a message containing unknown options depends on the option type.\n    \
    \  See Section 5.3 for option definitions.\n"
- title: 5.2.  PORT Keep-Alive Message
  contents:
  - "5.2.  PORT Keep-Alive Message\n        0                   1                \
    \   2                   3\n        0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\
    \ 2 3 4 5 6 7 8 9 0 1\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \       |          Type = 2             |        Message Length         |\n  \
    \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    \
    \   |                            Reserved                           |\n      \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n       |\
    \           Holdtime            |       PORT Option Type        |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \       |      Option Value Length      |            Value              |\n  \
    \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+              .                +\n    \
    \   |                                              .                |\n      \
    \ |                                              .                |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \       \\                               .                               \\\n\
    \       /                               .                               /\n  \
    \     \\                               .                               \\\n  \
    \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    \
    \   |    PORT Option Type           |      Option Value Length      |\n      \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n       |\
    \                             Value                             |\n       |  \
    \                             .                               |\n       |    \
    \                           .                               |\n       |      \
    \                         .                               |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                          PORT Keep-Alive Message\n   The PORT Keep-alive Message\
    \ is used to regularly send PORT messages\n   to verify that a connection is alive.\
    \  They are used when other PORT\n   messages are not sent at the desired frequency.\n\
    \   Message Length:   Length in bytes for the value part of the Type/\n      Length/Value\
    \ encoding.  If no PORT Options are included, the\n      length is 6.  If n PORT\
    \ Options with Option Value lengths L1, L2,\n      ..., Ln are included, the message\
    \ length is 6 + 4*n + L1 + L2 +\n      ... + Ln.\n   Reserved:   Set to zero on\
    \ transmission and ignored on receipt.\n   Holdtime:   This specifies a Holdtime\
    \ in seconds for the connection.\n      A non-zero value means that the connection\
    \ SHOULD be gracefully\n      shut down if no further PORT messages are received\
    \ within the\n      specified time.  This is measured on the receiving side by\n\
    \      measuring the time from when one PORT message has been processed\n    \
    \  until the next has been processed.  Note that this MUST be done\n      for\
    \ any PORT message, not just keep-alive messages.  A Holdtime of\n      0 disables\
    \ the keep-alive mechanism.\n   PORT Options:   A keep-alive message MUST NOT\
    \ contain any of the\n      options defined in this document.  It MAY contain\
    \ other options\n      not defined in this document.  The behavior when receiving\
    \ a\n      message containing unknown options depends on the option type.\n  \
    \    See Section 5.3 for option definitions.\n"
- title: 5.3.  PORT Options
  contents:
  - "5.3.  PORT Options\n   Each PORT Option is a TLV.  The type is 16 bits.  The\
    \ PORT Option\n   type space is split in two ranges.  The types in the range 0\
    \ - 32767\n   (the most significant bit is not set) are for Critical Options.\
    \  The\n   types in the range 32768 - 65535 (the most significant bit is set)\n\
    \   are for Non-Critical Options.\n   The behavior of a router receiving a message\
    \ with an unknown PORT\n   Option is determined by whether the option is a Critical\
    \ Option.  If\n   the message contains an unknown Critical Option, the entire\
    \ message\n   must be ignored.  If the option is Non-Critical, only that particular\n\
    \   option is ignored, and the message is processed as if the option was\n   not\
    \ present.\n   PORT Option types are assigned by IANA, except the ranges 32764\
    \ -\n   32767 and 65532 - 65535, which are for experimental use [RFC3692].\n \
    \  The length specifies the length of the value in bytes.  Below are the\n   two\
    \ options defined in this document.\n"
- title: 5.3.1.  PIM IPv4 Join/Prune Option
  contents:
  - "5.3.1.  PIM IPv4 Join/Prune Option\n        0                   1           \
    \        2                   3\n        0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8\
    \ 9 0 1 2 3 4 5 6 7 8 9 0 1\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \       |      PORT Option Type = 1     |      Option Value Length      |\n  \
    \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    \
    \   |                   PIMv2 Join/Prune Message                    |\n      \
    \ |                               .                               |\n       |\
    \                               .                               |\n       |  \
    \                             .                               |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                     PIM IPv4 Join/Prune Option Format\n   The IPv4 Join/Prune\
    \ Option is used to carry a PIMv2 Join/Prune\n   message that has all IPv4-encoded\
    \ addresses in the PIM payload.\n   Option Value Length:   The number of bytes\
    \ that make up the PIMv2\n      Join/Prune message.\n   PIMv2 Join/Prune Message:\
    \   PIMv2 Join/Prune message and payload with\n      no IP header in front of\
    \ it.\n"
- title: 5.3.2.  PIM IPv6 Join/Prune Option
  contents:
  - "5.3.2.  PIM IPv6 Join/Prune Option\n        0                   1           \
    \        2                   3\n        0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8\
    \ 9 0 1 2 3 4 5 6 7 8 9 0 1\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \       |      PORT Option Type = 2     |      Option Value Length      |\n  \
    \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    \
    \   |                   PIMv2 Join/Prune Message                    |\n      \
    \ |                               .                               |\n       |\
    \                               .                               |\n       |  \
    \                             .                               |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                     PIM IPv6 Join/Prune Option Format\n   The IPv6 Join/Prune\
    \ Option is used to carry a PIMv2 Join/Prune\n   message that has all IPv6-encoded\
    \ addresses in the PIM payload.\n   Option Value Length:   The number of bytes\
    \ that make up the PIMv2\n      Join/Prune message.\n   PIMv2 Join/Prune Message:\
    \   PIMv2 Join/Prune message and payload with\n      no IP header in front of\
    \ it.\n"
- title: 6.  Explicit Tracking
  contents:
  - "6.  Explicit Tracking\n   When explicit tracking is used, a router keeps track\
    \ of Join state\n   for individual downstream neighbors on a given interface.\
    \  This MUST\n   be done for all PORT Joins and Prunes.  Note that it may also\
    \ be done\n   for native Join/Prune messages, if all neighbors on the LAN have\
    \ set\n   the T bit of the LAN Prune Delay Option (see definition in Section\n\
    \   4.9.2 of [RFC4601]).  The discussion below covers ET (explicit\n   tracking)\
    \ neighbors and non-ET neighbors.  The set of ET neighbors\n   MUST include the\
    \ PORT neighbors.  The set of non-ET neighbors\n   consists of all the non-PORT\
    \ neighbors, unless all neighbors have set\n   the LAN Prune Delay T bit -- in\
    \ which case, the ET neighbors set\n   contains all neighbors.\n   For some link-types,\
    \ e.g., point-to-point, tracking neighbors is no\n   different than tracking interfaces.\
    \  It may also be possible for an\n   implementation to treat different downstream\
    \ neighbors as being on\n   different logical interfaces, even if they are on\
    \ the same physical\n   link.  Exactly how this is implemented, and for which\
    \ link types, is\n   left to the implementer.\n   For (*,G) and (S,G) state, the\
    \ router starts forwarding traffic on an\n   interface when a Join is received\
    \ from a neighbor on such an\n   interface.  When a non-ET neighbor sends a Prune,\
    \ as specified in\n   [RFC4601], if no Join is sent to override this Prune before\
    \ the\n   expiration of the Override Timer, the upstream router concludes that\n\
    \   no non-ET neighbor is interested.  If no ET neighbors are interested,\n  \
    \ the interface can be removed from the oif-list.  When an ET neighbor\n   sends\
    \ a Prune, one removes the Join state for that neighbor.  If no\n   other ET or\
    \ non-ET neighbors are interested, the interface can be\n   removed from the oif-list.\
    \  When a PORT neighbor sends a Prune, there\n   can be no Prune Override, since\
    \ the Prune is not visible to other\n   neighbors.\n   For (S,G,rpt) state, the\
    \ router needs to track Prune state on the\n   shared tree.  It needs to know\
    \ which ET neighbors have sent Prunes,\n   and whether any non-ET neighbors have\
    \ sent Prunes.  Normally, one\n   would forward a packet from a source S to a\
    \ group G out on an\n   interface if a (*,G) Join is received, but no (S,G,rpt)\
    \ Prune.  With\n   ET, one needs to do this check per ET neighbor.  That is, the\
    \ packet\n   should be forwarded except in two cases: all ET neighbors that have\n\
    \   sent (*,G) Joins have also sent (S,G,rpt) Prunes, and if a non-ET\n   neighbor\
    \ has sent a (*,G) Join, whether there also is non-ET\n   (S,G,rpt) Prune state.\n"
- title: 7.  Support of Multiple Address Families
  contents:
  - "7.  Support of Multiple Address Families\n   To allow for efficient use of router\
    \ resources, one can mux Join/\n   Prune messages of different address families\
    \ on the same transport\n   connection.  There are two ways this can be accomplished\
    \ -- using a\n   common message format over a TCP connection or using multiple\
    \ streams\n   over a single SCTP connection.\n   Using the common message format\
    \ described in this specification, and\n   using different PORT Options, both\
    \ IPv4- and IPv6-based Join/Prune\n   messages can be encoded within the same\
    \ transport connection.\n   When using SCTP multi-streaming, the common message\
    \ format is still\n   used to convey address-family information, but an SCTP association\
    \ is\n   used, on a per-family basis, to send data concurrently for multiple\n\
    \   families.  When data is sent concurrently, head-of-line blocking\n   (which\
    \ can occur when using TCP) is avoided.\n"
- title: 8.  Miscellany
  contents:
  - "8.  Miscellany\n   There are no changes to processing of other PIM messages like\
    \ PIM\n   Asserts, Grafts, Graft-Acks, Registers, and Register-Stops.  This\n\
    \   goes for Bootstrap Router (BSR) and Auto-RP type messages as well.\n   This\
    \ extension is applicable only to PIM-SM, PIM-SSM, and\n   Bidirectional PIM.\
    \  It does not take requirements for PIM Dense Mode\n   (PIM-DM) into consideration.\n"
- title: 9.  Transport Considerations
  contents:
  - "9.  Transport Considerations\n   As noted in the introduction, this is an experimental\
    \ extension to\n   PIM, and using reliable delivery for PIM messages is a new\
    \ concept.\n   There are several potential transport-related concerns.  Hopefully,\n\
    \   experiences from early implementations and deployments will reveal\n   what\
    \ concerns are relevant and how to resolve them.\n   One consideration is keep-alive\
    \ mechanisms.  We have defined an\n   optional keep-alive mechanism for PORT;\
    \ see Section 4.2.  Also, SCTP\n   and many TCP implementations provide keep-alive\
    \ mechanisms that could\n   be used.  When to use keep-alive messages and which\
    \ mechanism to use\n   are unclear; however, we believe the PORT Keep-alive allows\
    \ for\n   better application control.  It is unclear what Holdtimes are\n   preferred\
    \ for the PORT Keep-alives.  For now, it is RECOMMENDED that\n   administrators\
    \ be able to configure whether to use keep-alives, what\n   Holdtimes to use,\
    \ etc.\n   In a stable state, it is expected that only occasional small messages\n\
    \   are sent over a PORT connection.  This depends on how often PIM Join/\n  \
    \ Prune state changes.  Thus, over a long period of time, there may be\n   only\
    \ small messages that never use the entire TCP congestion window,\n   and the\
    \ window may become very large.  This would then be an issue if\n   there is a\
    \ state change that makes PORT send a very large message.\n   It may be good if\
    \ the TCP stack provides some rate-limiting or burst-\n   limiting.  The congestion\
    \ control mechanism defined in [RFC3465] may\n   be of help.\n   With PORT, it\
    \ is possible that only occasional small messages are\n   sent (as discussed in\
    \ the previous paragraph).  This may cause\n   problems for the TCP retransmit\
    \ mechanism.  In particular, the TCP\n   Fast Retransmit algorithm may never get\
    \ triggered.  For further\n   discussion of this and a possible solution, see\
    \ [RFC3042].\n   There may be SCTP issues similar to the TCP issues discussed\
    \ in the\n   above two paragraphs.\n"
- title: 10.  Manageability Considerations
  contents:
  - "10.  Manageability Considerations\n   This document defines using TCP or SCTP\
    \ transports between pairs of\n   PIM neighbors.  It is recommended that this\
    \ mechanism be disabled by\n   default.  An administrator can then enable PORT\
    \ TCP and/or SCTP on\n   PIM-enabled interfaces.  If two neighbors both have PORT\
    \ SCTP (or\n   both have PORT TCP), they will only use SCTP (or alternatively,\
    \ TCP)\n   for PIM Join/Prune messages.  This is the case even when the\n   connection\
    \ is down (there is no fallback to native Join/Prune\n   messages).\n   When PORT\
    \ support is enabled, a router sends PIM Hello messages\n   announcing support\
    \ for TCP and/or SCTP and also Connection IDs.  It\n   should be possible to configure\
    \ a local Connection ID, and also to\n   see what PORT capabilities and Connection\
    \ IDs PIM neighbors are\n   announcing.  Based on these advertisements, pairs\
    \ of PIM neighbors\n   will decide whether to try to establish a PORT connection.\
    \  There\n   should be a way for an operator to check the current connection\n\
    \   state.  Statistics on the number of PORT messages sent and received\n   (including\
    \ number of invalid messages) may also be helpful.\n   For connection security\
    \ (see Section 4.1), it should be possible to\n   enable a GTSM check to only\
    \ accept connections (TCP/SCTP packets)\n   when the sender is within a certain\
    \ number of router hops.  Also, one\n   should be able to configure the use of\
    \ TCP-AO.\n   For connection maintenance (see Section 4.2), it is recommended\
    \ to\n   support Keep-Alive messages.  It should be configurable whether to\n\
    \   send Keep-Alives -- and if doing so, whether to use a Holdtime and\n   what\
    \ Holdtime to use.\n   There should be some way to alert an operator when PORT\
    \ connections\n   are going down or when there is a failure in establishing a\
    \ PORT\n   connection.  Also, information like the number of connection\n   failures,\
    \ and how long the connection has been up or down, is useful.\n"
- title: 11.  Security Considerations
  contents:
  - "11.  Security Considerations\n   There are several security issues related to\
    \ the use of TCP or SCTP\n   transports.  By sending packets with a spoofed source\
    \ address, off-\n   path attackers might establish a connection or inject packets\
    \ into an\n   existing connection.  This might allow an attacker to send spoofed\n\
    \   Join/Prune messages and/or reset a connection.  Mechanisms that help\n   protect\
    \ against this are discussed in Section 4.1.\n   For authentication, TCP-AO [RFC5925]\
    \ may be used with TCP,\n   Authenticated Chunks [RFC4895] may be used with SCTP.\
    \  Also, GTSM\n   [RFC5082] can be used to help prevent spoofing.\n"
- title: 12.  IANA Considerations
  contents:
  - "12.  IANA Considerations\n   This specification makes use of a TCP port number\
    \ and an SCTP port\n   number for the use of the pim-port service that has been\
    \ assigned by\n   IANA.  It also makes use of IANA PIM Hello Options assignments\
    \ that\n   have been made permanent.\n"
- title: 12.1.  PORT Port Number
  contents:
  - "12.1.  PORT Port Number\n   IANA previously had assigned a port number that is\
    \ used as a\n   destination port for pim-port TCP and SCTP transports.  The assigned\n\
    \   number is 8471.  References to this document have been added to the\n   Service\
    \ Name and Transport Protocol Port Number Registry for pim-\n   port.\n"
- title: 12.2.  PORT Hello Options
  contents:
  - "12.2.  PORT Hello Options\n   In the \"PIM-Hello Options\" registry, the following\
    \ options have been\n   added for PORT.\n    Value    Length      Name       \
    \             Reference\n   -------  ----------  -----------------------  ---------------\n\
    \    27       Variable    PIM-over-TCP-Capable     this document\n    28     \
    \  Variable    PIM-over-SCTP-Capable    this document\n"
- title: 12.3.  PORT Message Type Registry
  contents:
  - "12.3.  PORT Message Type Registry\n   A registry for PORT message types has been\
    \ created.  The message type\n   is a 16-bit integer, with values from 0 to 65535.\
    \  An RFC is required\n   for assignments in the range 0 - 65531.  This document\
    \ defines two\n   PORT message types: Type 1 (Join/Prune) and Type 2 (Keep-alive).\
    \  The\n   type range 65532 - 65535 is for experimental use [RFC3692].\n   The\
    \ initial content of the registry is as follows:\n    Type           Name    \
    \                         Reference\n   -------------  -------------------------------\
    \  ---------------\n    0              Reserved                         this document\n\
    \    1              Join/Prune                       this document\n    2    \
    \          Keep-alive                       this document\n    3-65531       \
    \ Unassigned\n    65532-65535    Experimental                     this document\n"
- title: 12.4.  PORT Option Type Registry
  contents:
  - "12.4.  PORT Option Type Registry\n   A registry for PORT Option types.  The option\
    \ type is a 16-bit\n   integer, with values from 0 to 65535.  The type space is\
    \ split in two\n   ranges, 0 - 32767 for Critical Options and 32768 - 65535 for\
    \ Non-\n   Critical Options.  Option types are assigned by IANA, except the\n\
    \   ranges 32764 - 32767 and 65532 - 65535 that are for experimental use\n   [RFC3692].\
    \  An RFC is required for the IANA assignments.  An RFC\n   defining a new option\
    \ type must specify whether the option is\n   Critical or Non-Critical in order\
    \ for IANA to assign a type.  This\n   document defines two Critical PORT Option\
    \ types: Type 1 (PIM IPv4\n   Join/Prune) and Type 2 (PIM IPv6 Join/Prune).\n\
    \   The initial content of the registry is as follows:\n    Type           Name\
    \                               Reference\n   -------------  ----------------------------------\
    \  ---------------\n    0              Reserved                            this\
    \ document\n    1              PIM IPv4 Join/Prune                 this document\n\
    \    2              PIM IPv6 Join/Prune                 this document\n    3-32763\
    \        Unassigned Critical Options\n    32764-32767    Experimental        \
    \                this document\n    32768-65531    Unassigned Non-Critical Options\n\
    \    65532-65535    Experimental                        this document\n"
- title: 13.  Contributors
  contents:
  - "13.  Contributors\n   In addition to the persons listed as authors, significant\n\
    \   contributions were provided by Apoorva Karan and Arjen Boers.\n"
- title: 14.  Acknowledgments
  contents:
  - "14.  Acknowledgments\n   The authors would like to give a special thank you and\
    \ appreciation\n   to Nidhi Bhaskar for her initial design and early prototype\
    \ of this\n   idea.\n   Appreciation goes to Randall Stewart for his authoritative\
    \ review and\n   recommendation for using SCTP.\n   Thanks also goes to the following\
    \ for their ideas and review of this\n   specification: Mike McBride, Toerless\
    \ Eckert, Yiqun Cai, Albert Tian,\n   Suresh Boddapati, Nataraj Batchu, Daniel\
    \ Voce, John Zwiebel, Yakov\n   Rekhter, Lenny Giuliano, Gorry Fairhurst, Sameer\
    \ Gulrajani, Thomas\n   Morin, Dimitri Papadimitriou, Bharat Joshi, Rishabh Parekh,\
    \ Manav\n   Bhatia, Pekka Savola, Tom Petch, and Joe Touch.\n   A special thank\
    \ you goes to Eric Rosen for his very detailed review\n   and commentary.  Many\
    \ of his comments are reflected as text in this\n   specification.\n"
- title: 15.  References
  contents:
  - '15.  References

    '
- title: 15.1.  Normative References
  contents:
  - "15.1.  Normative References\n   [RFC0793]    Postel, J., \"Transmission Control\
    \ Protocol\", STD 7,\n                RFC 793, September 1981.\n   [RFC2119] \
    \   Bradner, S., \"Key words for use in RFCs to Indicate\n                Requirement\
    \ Levels\", BCP 14, RFC 2119, March 1997.\n   [RFC4601]    Fenner, B., Handley,\
    \ M., Holbrook, H., and I. Kouvelas,\n                \"Protocol Independent Multicast\
    \ - Sparse Mode (PIM-SM):\n                Protocol Specification (Revised)\"\
    , RFC 4601,\n                August 2006.\n   [RFC4895]    Tuexen, M., Stewart,\
    \ R., Lei, P., and E. Rescorla,\n                \"Authenticated Chunks for the\
    \ Stream Control\n                Transmission Protocol (SCTP)\", RFC 4895, August\
    \ 2007.\n   [RFC4960]    Stewart, R., \"Stream Control Transmission Protocol\"\
    ,\n                RFC 4960, September 2007.\n   [RFC5015]    Handley, M., Kouvelas,\
    \ I., Speakman, T., and L.\n                Vicisano, \"Bidirectional Protocol\
    \ Independent Multicast\n                (BIDIR-PIM)\", RFC 5015, October 2007.\n\
    \   [RFC5082]    Gill, V., Heasley, J., Meyer, D., Savola, P., and C.\n      \
    \          Pignataro, \"The Generalized TTL Security Mechanism\n             \
    \   (GTSM)\", RFC 5082, October 2007.\n   [RFC5925]    Touch, J., Mankin, A.,\
    \ and R. Bonica, \"The TCP\n                Authentication Option\", RFC 5925,\
    \ June 2010.\n   [RFC6395]    Gulrajani, S. and S. Venaas, \"An Interface Identifier\n\
    \                (ID) Hello Option for PIM\", RFC 6395, October 2011.\n"
- title: 15.2.  Informative References
  contents:
  - "15.2.  Informative References\n   [AFI]        IANA, \"Address Family Numbers\"\
    ,\n                <http://www.iana.org/assignments/\n                address-family-numbers>.\n\
    \   [HELLO-OPT]  IANA, \"PIM-Hello Options\",\n                <http://www.iana.org/assignments/pim-parameters>.\n\
    \   [RFC3042]    Allman, M., Balakrishnan, H., and S. Floyd, \"Enhancing\n   \
    \             TCP's Loss Recovery Using Limited Transmit\", RFC 3042,\n      \
    \          January 2001.\n   [RFC3465]    Allman, M., \"TCP Congestion Control\
    \ with Appropriate\n                Byte Counting (ABC)\", RFC 3465, February\
    \ 2003.\n   [RFC3692]    Narten, T., \"Assigning Experimental and Testing Numbers\n\
    \                Considered Useful\", BCP 82, RFC 3692, January 2004.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Dino Farinacci\n   Cisco Systems\n   Tasman Drive\n  \
    \ San Jose, CA  95134\n   USA\n   EMail: dino@cisco.com\n   IJsbrand Wijnands\n\
    \   Cisco Systems\n   Tasman Drive\n   San Jose, CA  95134\n   USA\n   EMail:\
    \ ice@cisco.com\n   Stig Venaas\n   Cisco Systems\n   Tasman Drive\n   San Jose,\
    \ CA  95134\n   USA\n   EMail: stig@cisco.com\n   Maria Napierala\n   AT&T Labs\n\
    \   200 Laurel Drive\n   Middletown, New Jersey  07748\n   USA\n   EMail: mnapierala@att.com\n"
