- title: __initial_text__
  contents:
  - '         Licklider Transmission Protocol - Security Extensions

    '
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This memo defines an Experimental Protocol for the Internet\n\
    \   community.  It does not specify an Internet standard of any kind.\n   Discussion\
    \ and suggestions for improvement are requested.\n   Distribution of this memo\
    \ is unlimited.\n"
- title: IESG Note
  contents:
  - "IESG Note\n   This RFC is not a candidate for any level of Internet Standard.\
    \  It\n   represents the consensus of the Delay Tolerant Networking (DTN)\n  \
    \ Research Group of the Internet Research Task Force (IRTF).  It may be\n   considered\
    \ for standardization by the IETF in the future, but the\n   IETF disclaims any\
    \ knowledge of the fitness of this RFC for any\n   purpose and in particular notes\
    \ that the decision to publish is not\n   based on IETF review for such things\
    \ as security, congestion control,\n   or inappropriate interaction with deployed\
    \ protocols.  See RFC 3932\n   for more information.\n"
- title: Abstract
  contents:
  - "Abstract\n   The Licklider Transmission Protocol (LTP) is intended to serve as\
    \ a\n   reliable convergence layer over single-hop deep-space radio frequency\n\
    \   (RF) links.  LTP does Automatic Repeat reQuest (ARQ) of data\n   transmissions\
    \ by soliciting selective-acknowledgment reception\n   reports.  It is stateful\
    \ and has no negotiation or handshakes.  This\n   document describes security\
    \ extensions to LTP, and is part of a\n   series of related documents describing\
    \ LTP.\n   This document is a product of the Delay Tolerant Networking Research\n\
    \   Group and has been reviewed by that group.  No objections to its\n   publication\
    \ as an RFC were raised.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................2\n\
    \   2. Security Extensions .............................................2\n  \
    \    2.1. LTP Authentication .........................................3\n    \
    \  2.2. A Cookie Mechanism .........................................6\n   3. Security\
    \ Considerations .........................................7\n   4. IANA Considerations\
    \ .............................................7\n   5. Acknowledgments .................................................8\n\
    \   6. References ......................................................8\n  \
    \    6.1. Normative References .......................................8\n    \
    \  6.2. Informative References .....................................9\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   This document describes extensions to the base LTP protocol\n\
    \   [LTPSPEC].  The background to LTP is described in the \"motivation\"\n   document\
    \ [LTPMOTIVE].  All the extensions defined in this document\n   provide additional\
    \ security features for LTP.\n   LTP is designed to provide retransmission-based\
    \ reliability over\n   links characterized by extremely long message round-trip\
    \ times (RTTs)\n   and/or frequent interruptions in connectivity.  Since communication\n\
    \   across interplanetary space is the most prominent example of this\n   sort\
    \ of environment, LTP is principally aimed at supporting \"long-\n   haul\" reliable\
    \ transmission in interplanetary space, but has\n   applications in other environments\
    \ as well.\n   This document describes security extensions to LTP, and is part\
    \ of a\n   series of related documents describing LTP.  Other documents in this\n\
    \   series cover the motivation for LTP and the main protocol\n   specification.\
    \  We recommend reading all the documents in the series\n   before writing code\
    \ based on this document.\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\"\
    , \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"\
    MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described\
    \ in [B97].\n"
- title: 2.  Security Extensions
  contents:
  - "2.  Security Extensions\n   The syntactical layout of the extensions are defined\
    \ in Section 3.1.4\n   of the base protocol specification [LTPSPEC].\n   Implementers\
    \ should note that the LTP extension mechanism allows for\n   multiple occurrences\
    \ of any extension tag, in both (or either) the\n   header or trailer.  For example,\
    \ the LTP authentication mechanism\n   defined below requires both header and\
    \ trailer extensions, which both\n   use the same tag.\n   This document defines\
    \ new security extensions for LTP but does not\n   address key management since\
    \ key management in Delay-Tolerant\n   Networking (DTN) remains an open research\
    \ question.\n   If LTP were deployed layered on top of UDP, it might be possible\
    \ to\n   use IPsec or other existing security mechanisms.  However, in general\n\
    \   DTN, IPsec's key exchange (IKE) cannot work (e.g., where link delays\n   are\
    \ measured in minutes).\n"
- title: 2.1.  LTP Authentication
  contents:
  - "2.1.  LTP Authentication\n   The LTP authentication mechanism provides cryptographic\n\
    \   authentication of the segment.\n   Implementations MAY support this extension\
    \ field.  If they do not\n   support this header, then they MUST ignore it.\n\
    \   The LTP authentication extension field has the extension tag value\n   0x00.\n\
    \   LTP authentication requires three new fields, the first two of which\n   are\
    \ carried as the value of the Extensions field of the LTP segment\n   header,\
    \ and the third of which is carried in the segment trailer.\n   The fields that\
    \ are carried in the header extensions field are\n   catenated together to form\
    \ the extension value (with the leftmost\n   octet representing the ciphersuite\
    \ and the remaining octets the\n   KeyID).  The KeyID field is optional, and is\
    \ determined to be absent\n   if the extension value consists of a single octet.\n\
    \      Ciphersuite: an 8-bit integer value with values defined below.\n      KeyID:\
    \ An optional key identifier, the interpretation of which is\n      out of scope\
    \ for this specification (that is, implementers MUST\n      treat these KeyID\
    \ fields as raw octets, even if they contained an\n      ASN.1 DER encoding of\
    \ an X.509 IssuerSerial construct [PKIXPROF],\n      for example).\n   The LTP-auth\
    \ header extension MUST be present in the first segment\n   from any LTP session\
    \ that uses LTP authentication, but MAY be omitted\n   from subsequent segments\
    \ in that session.  To guard against\n   additional problems arising from lost\
    \ segments, implementations\n   SHOULD, where bandwidth allows, include these\
    \ fields in a number of\n   segments in the LTP session.  If the first segment\
    \ (or any part\n   thereof) is retransmitted, then the LTP-auth header extension\
    \ MUST be\n   included in the retransmission.\n   The field carried as a trailer\
    \ extension is the AuthVal field.  It\n   contains the authentication value, which\
    \ is either a message\n   authentication code (MAC) or a digital signature.  This\
    \ is itself a\n   structured field whose length and formatting depend on the\n\
    \   ciphersuite.\n   If for some reason the sender includes two instances of LTP-auth\n\
    \   headers, then there is a potential problem for the receiver in that\n   presumably\
    \ at least one of the AuthVal fields will not verify.  There\n   are very few\
    \ situations where it would make sense to include more\n   than one LTP-auth extension\
    \ in a single segment, since LTP is a peer-\n   to-peer protocol.  If however,\
    \ keys are being upgraded, then the\n   sender might protect the segment with\
    \ both the new and old keys.  In\n   such cases, the receiver MUST search and\
    \ can consider the LTP\n   authentication valid so long as one AuthVal is correct.\n\
    \   For all ciphersuites, the input to the calculation is the entire\n   encoded\
    \ segment including the AuthVal extension tag and length, but\n   not of course,\
    \ including the AuthVal value.\n   We define three ciphersuites in this specification.\
    \  Our approach is\n   to follow the precedent set by TLS [TLS], and to \"hardcode\"\
    \ all\n   algorithm options in a single ciphersuite number.  This means that\n\
    \   there are 256 potential ciphersuites supported by this version of\n   LTP-auth.\
    \  Since this is a limited space, IANA has established a\n   registry for LTP\
    \ Ciphersuites as described in the IANA Considerations\n   section below.  Current\
    \ ciphersuite assignments are:\n      Ciphersuite                        Value\n\
    \      -----------                        -----\n      HMAC-SHA1-80          \
    \                0\n      RSA-SHA256                            1\n      Unassigned\
    \                          2-127\n      Reserved                           128-191\n\
    \      Private/Experimental Use           192-254\n      NULL                \
    \                 255\n   1. HMAC-SHA1-80 Ciphersuite\n      The HMAC-SHA1-80\
    \ ciphersuite involves generating a MAC over the\n      LTP segment and appending\
    \ the resulting AuthVal field to the end\n      of the segment.  There is only\
    \ one MACing algorithm defined for\n      this, which is HMAC-SHA1-80 [HMAC].\
    \  The AuthVal field in this\n      case contains just the output of the HMAC-SHA1-80\
    \ algorithm, which\n      is a fixed-width field (10 octets).\n   2. RSA-SHA256\
    \ Ciphersuite\n      The RSA-SHA256 ciphersuite involves generating a digital\
    \ signature\n      of the LTP segment and appending the resulting AuthVal field\
    \ to\n      the end of the segment.  There is only one signature algorithm\n \
    \     currently defined for this, which is RSA with SHA256 as defined in\n   \
    \   [RSA], Section 8.2.  The AuthVal field in this case is simply the\n      signature\
    \ value, where the signature value occupies the minimum\n      number of octets,\
    \ e.g., 128 octets for a 1024-bit signature).\n   3. NULL Ciphersuite\n      The\
    \ NULL ciphersuite is basically the same as the HMAC-SHA1-80\n      ciphersuite,\
    \ but with a hardcoded key.  This ciphersuite\n      effectively provides only\
    \ a strong checksum without\n      authentication, and thus is subject to active\
    \ attacks and is the\n      equivalent of providing a Cyclic Redundancy Check\
    \ (CRC).\n      The hardcoded key to be used with this ciphersuite is the\n  \
    \    following:\n         HMAC_KEY     :  c37b7e64 92584340\n                \
    \      :  bed12207 80894115\n                      :  5068f738\n         (The\
    \ above is the test vector from RFC 3537 [WRAP].)\n      In each case, the bytes\
    \ that are input to the cryptographic\n      algorithm consist of the entire LTP\
    \ segment except the AuthVal.\n      In particular, the header extensions field\
    \ that may contain the\n      ciphersuite number and the KeyID field is part of\
    \ the input.\n      The output bytes of the cryptographic operation are the payload\
    \ of\n      the AuthVal field.\n   The following shows an example LTP-auth header,\
    \ starting from and\n   including the Extensions field.\n       ext  tag  sdnv\
    \  c-s  k-id\n      +----+----+----+----+----+\n      |0x11|0x00|0x02|0x00|0x24|\n\
    \      +----+----+----+----+----+\n   The Extensions field has the value 0x11\
    \ with the most significant and\n   least significant nibble value 1, indicating\
    \ the presence of one\n   header and one trailer extension, respectively.  The\
    \ next octet is\n   the extension tag (0x00 for LTP-auth), followed by the Self-\n\
    \   Delimiting Numeric Value (SDNV) encoded length of the ensuing data: a\n  \
    \ one-octet ciphersuite (0x00 meaning HMAC-SHA1-80) and the KeyID (in\n   this\
    \ case with a short value of 0x24).  The trailer extension (not\n   shown above)\
    \ should contain the AuthVal.\n"
- title: 2.2.  A Cookie Mechanism
  contents:
  - "2.2.  A Cookie Mechanism\n   The use of cookies is a well-known way to make Denial\
    \ of Service\n   (DoS) attacks harder to mount.  We define the cookie extension\
    \ for\n   use in environments where an LTP implementation is liable to such\n\
    \   attacks.\n   The cookie is placed in a header extension field, and has no\
    \ related\n   trailer extension field.  It has the extension tag value 0x01.\n\
    \   The cookie value can essentially be viewed as a sufficiently long\n   random\
    \ number, where the length can be determined by the\n   implementation (longer\
    \ cookies are harder to guess and therefore\n   better, though using more bandwidth).\
    \  Note that cookie values can be\n   derived using lots of different schemes\
    \ so long as they produce\n   random-looking and hard-to-predict values.\n   The\
    \ first cookie inserted into a segment for this session is called\n   the initial\
    \ cookie.\n   Note that cookies do not outlast an LTP session.\n   The basic mode\
    \ of operation is that an LTP engine can include a\n   cookie in a segment at\
    \ any time.  After that time, all segments\n   corresponding to that LTP session\
    \ MUST contain a good cookie value --\n   that is, all segments both to and from\
    \ the engine MUST contain a good\n   cookie.  Clearly, there will be some delay\
    \ before the cookie is seen\n   in incoming segments -- implementations MUST determine\
    \ an acceptable\n   delay for these cases, and MUST only accept segments without\
    \ a cookie\n   until that time.\n   The cookie value can be extended at any time\
    \ by catenating more\n   random bits.  This allows both LTP engines to contribute\
    \ to the\n   randomness of the cookie, where that is useful.  It also allows a\n\
    \   node that considers the cookie value too short (say due to changing\n   circumstances)\
    \ to add additional security.  In this case, the\n   extended cookie value becomes\
    \ the \"to-be-checked-against\" cookie\n   value for all future segments (modulo\
    \ the communications delay as\n   above).\n   It can happen that both sides emit\
    \ segments containing an initial\n   cookie before their peer has a chance to\
    \ see any cookie.  In that\n   case, two cookie extension fields MUST be included\
    \ in all segments\n   subsequently (once the traffic has caught up).  That is,\
    \ the sender\n   and recipient cookies are handled independently.  In such cases,\
    \ both\n   cookie values MUST be \"good\" at all relevant times (i.e., modulo\
    \ the\n   delay).  In this case, the peer's initial cookie MUST arrive before\n\
    \   the calculated delay for receipt of segments containing this engine's\n  \
    \ cookie -- there is only a finite window during which a second cookie\n   can\
    \ be inserted into the session.\n   A \"good\" cookie is therefore one that starts\
    \ with the currently\n   stored cookie value, or else a new cookie where none\
    \ has been seen in\n   that session so far.  Once a cookie value is seen and treated\
    \ as\n   \"good\" (e.g., an extended value), the previous value is no longer\n\
    \   \"good\".\n   Modulo the communications delay, segments with an incorrect\
    \ or\n   missing cookie value MUST be silently discarded.\n   If a segment is\
    \ to be retransmitted (e.g., as a result of a timer\n   expiring), then it needs\
    \ to contain the correct cookie value at the\n   time of (re)transmission.  Note\
    \ that this may differ from what was\n   the correct cookie value at the time\
    \ of the original transmission.\n"
- title: 3.  Security Considerations
  contents:
  - "3.  Security Considerations\n   The extensions specified above are generally\
    \ intended to help thwart\n   DoS attacks.  For environments where lower layers\
    \ provide neither\n   integrity nor freshness, it makes sense to use both extensions\n\
    \   together.  For example, in the case where a node extends an existing\n   cookie,\
    \ the lack of origin authentication would allow a man in the\n   middle to lock\
    \ out the session.\n   While there are currently some concerns about using the\
    \ SHA-1\n   algorithm, these appear to only make it easier to find collisions.\n\
    \   In that case, the use of HMAC with SHA-1 can still be considered\n   safe.\
    \  However, we have changed to use SHA-256 for the signature\n   ciphersuite.\n"
- title: 4.  IANA Considerations
  contents:
  - "4.  IANA Considerations\n   IANA has created and now maintains registry for known\
    \ LTP\n   ciphersuites (as defined in Section 2.1).  The registry has been\n \
    \  populated using the initial values given in Sections 2.1 and 2.2\n   above.\
    \  IANA may assign LTP Extension Tag values from the range\n   2..127 (decimal,\
    \ inclusive) using the Specification Required rule\n   [GUIDE].  The specification\
    \ concerned can be an RFC (whether\n   Standards Track, Experimental, or Informational),\
    \ or a specification\n   from any other standards development organization recognized\
    \ by IANA\n   or with a liaison with the IESG, specifically including CCSDS\n\
    \   (http://www.ccsds.org/).\n"
- title: 5.  Acknowledgments
  contents:
  - "5.  Acknowledgments\n   Many thanks to Tim Ray, Vint Cerf, Bob Durst, Kevin Fall,\
    \ Adrian\n   Hooke, Keith Scott, Leigh Torgerson, Eric Travis, and Howie Weiss\
    \ for\n   their thoughts on this protocol and its role in Delay-Tolerant\n   Networking\
    \ architecture.\n   Part of the research described in this document was carried\
    \ out at\n   the Jet Propulsion Laboratory, California Institute of Technology,\n\
    \   under a contract with the National Aeronautics and Space\n   Administration.\
    \  This work was performed under DOD Contract DAA-B07-\n   00-CC201, DARPA AO\
    \ H912; JPL Task Plan No. 80-5045, DARPA AO H870;\n   and NASA Contract NAS7-1407.\n\
    \   Thanks are also due to Shawn Ostermann, Hans Kruse, and Dovel Myers\n   at\
    \ Ohio University for their suggestions and advice in making various\n   design\
    \ decisions.  This work was done when Manikantan Ramadas was a\n   graduate student\
    \ at the EECS Dept., Ohio University, in the\n   Internetworking Research Group\
    \ Laboratory.\n   Part of this work was carried out at Trinity College Dublin\
    \ as part\n   of the Dev-SeNDT contract funded by Enterprise Ireland's technology\n\
    \   development programme.\n"
- title: 6.  References
  contents:
  - '6.  References

    '
- title: 6.1.  Normative References
  contents:
  - "6.1.  Normative References\n   [B97]       Bradner, S., \"Key words for use in\
    \ RFCs to Indicate\n               Requirement Levels\", BCP 14, RFC 2119, March\
    \ 1997.\n   [GUIDE]     Narten, T. and H. Alvestrand, \"Guidelines for Writing\
    \ an\n               IANA Considerations Section in RFCs\", BCP 26, RFC 5226,\n\
    \               May 2008.\n   [HMAC]      Krawczyk, H., Bellare, M., and R. Canetti,\
    \ \"HMAC: Keyed-\n               Hashing for Message Authentication\", RFC 2104,\
    \ February\n               1997.\n   [LTPSPEC]   Ramadas, M., Burleigh, S., and\
    \ S. Farrell, \"Licklider\n               Transmission Protocol - Specification\"\
    , RFC 5326,\n               September 2008.\n   [RSA]       Jonsson, J. and B.\
    \ Kaliski, \"Public-Key Cryptography\n               Standards (PKCS) #1: RSA\
    \ Cryptography Specifications\n               Version 2.1\", RFC 3447, February\
    \ 2003.\n"
- title: 6.2.  Informative References
  contents:
  - "6.2.  Informative References\n   [LTPMOTIVE] Burleigh, S., Ramadas, M., and S.\
    \ Farrell, \"Licklider\n               Transmission Protocol - Motivation\", RFC\
    \ 5325, September\n               2008.\n   [PKIXPROF]  Cooper, D., Santesson,\
    \ S., Farrell, S., Boeyen, S.,\n               Housley, R., and W. Polk, \"Internet\
    \ X.509 Public Key\n               Infrastructure Certificate and Certificate\
    \ Revocation\n               List (CRL) Profile\", RFC 5280, May 2008.\n   [TLS]\
    \        Dierks, T. and E. Rescorla, \"The Transport Layer\n               Security\
    \ (TLS) Protocol Version 1.2\", RFC 5246, August\n               2008.\n   [WRAP]\
    \      Schaad, J. and R. Housley, \"Wrapping a Hashed Message\n              \
    \ Authentication Code (HMAC) key with a Triple-Data\n               Encryption\
    \ Standard (DES) Key or an Advanced Encryption\n               Standard (AES)\
    \ Key\", RFC 3537, May 2003.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Stephen Farrell\n   Computer Science Department\n   Trinity\
    \ College Dublin\n   Ireland\n   Telephone: +353-1-896-1761\n   EMail: stephen.farrell@cs.tcd.ie\n\
    \   Manikantan Ramadas\n   ISRO Telemetry Tracking and Command Network (ISTRAC)\n\
    \   Indian Space Research Organization (ISRO)\n   Plot # 12 & 13, 3rd Main, 2nd\
    \ Phase\n   Peenya Industrial Area\n   Bangalore 560097\n   India\n   Telephone:\
    \ +91 80 2364 2602\n   EMail: mramadas@gmail.com\n   Scott C. Burleigh\n   Jet\
    \ Propulsion Laboratory\n   4800 Oak Grove Drive\n   M/S: 301-485B\n   Pasadena,\
    \ CA 91109-8099\n   Telephone: +1 (818) 393-3353\n   Fax: +1 (818) 354-1075\n\
    \   EMail: Scott.Burleigh@jpl.nasa.gov\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The IETF Trust (2008).\n   This document\
    \ is subject to the rights, licenses and restrictions\n   contained in BCP 78\
    \ and at http://www.rfc-editor.org/copyright.html,\n   and except as set forth\
    \ therein, the authors retain all their rights.\n   This document and the information\
    \ contained herein are provided on an\n   \"AS IS\" basis and THE CONTRIBUTOR,\
    \ THE ORGANIZATION HE/SHE REPRESENTS\n   OR IS SPONSORED BY (IF ANY), THE INTERNET\
    \ SOCIETY, THE IETF TRUST AND\n   THE INTERNET ENGINEERING TASK FORCE DISCLAIM\
    \ ALL WARRANTIES, EXPRESS\n   OR IMPLIED, INCLUDING BUT NOT LIMITED TO ANY WARRANTY\
    \ THAT THE USE OF\n   THE INFORMATION HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY\
    \ IMPLIED\n   WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.\n"
- title: Intellectual Property
  contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or\
    \ scope of any\n   Intellectual Property Rights or other rights that might be\
    \ claimed to\n   pertain to the implementation or use of the technology described\
    \ in\n   this document or the extent to which any license under such rights\n\
    \   might or might not be available; nor does it represent that it has\n   made\
    \ any independent effort to identify any such rights.  Information\n   on the\
    \ procedures with respect to rights in RFC documents can be\n   found in BCP 78\
    \ and BCP 79.\n   Copies of IPR disclosures made to the IETF Secretariat and any\n\
    \   assurances of licenses to be made available, or the result of an\n   attempt\
    \ made to obtain a general license or permission for the use of\n   such proprietary\
    \ rights by implementers or users of this\n   specification can be obtained from\
    \ the IETF on-line IPR repository at\n   http://www.ietf.org/ipr.\n   The IETF\
    \ invites any interested party to bring to its attention any\n   copyrights, patents\
    \ or patent applications, or other proprietary\n   rights that may cover technology\
    \ that may be required to implement\n   this standard.  Please address the information\
    \ to the IETF at\n   ietf-ipr@ietf.org.\n"
