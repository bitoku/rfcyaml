- title: __initial_text__
  contents:
  - '                  Generic Routing Encapsulation (GRE)

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo provides information for the Internet community.\
    \  This memo\n   does not specify an Internet standard of any kind.  Distribution\
    \ of\n   this memo is unlimited.\n"
- title: Abstract
  contents:
  - "Abstract\n   This document specifies a protocol for performing encapsulation\
    \ of an\n   arbitrary network layer protocol over another arbitrary network layer\n\
    \   protocol.\n"
- title: Introduction
  contents:
  - "Introduction\n   A number of different proposals [RFC 1234, RFC 1226] currently\
    \ exist\n   for the encapsulation of one protocol over another protocol. Other\n\
    \   types of encapsulations [RFC 1241, SDRP, RFC 1479] have been proposed\n  \
    \ for transporting IP over IP for policy purposes. This memo describes\n   a protocol\
    \ which is very similar to, but is more general than, the\n   above proposals.\
    \  In attempting to be more general, many protocol\n   specific nuances have been\
    \ ignored.  The result is that this proposal\n   is may be less suitable for a\
    \ situation where a specific \"X over Y\"\n   encapsulation has been described.\
    \  It is the attempt of this protocol\n   to provide a simple, general purpose\
    \ mechanism which is reduces the\n   problem of encapsulation from its current\
    \ O(n^2) problem to a more\n   manageable state.  This proposal also attempts\
    \ to provide a\n   lightweight encapsulation for use in policy based routing.\
    \  This memo\n   explicitly does not address the issue of when a packet should\
    \ be\n   encapsulated.  This memo acknowledges, but does not address problems\n\
    \   with mutual encapsulation [RFC 1326].\n   In the most general case, a system\
    \ has a packet that needs to be\n   encapsulated and routed.  We will call this\
    \ the payload packet.  The\n   payload is first encapsulated in a GRE packet,\
    \ which possibly also\n   includes a route.  The resulting GRE packet can then\
    \ be encapsulated\n   in some other protocol and then forwarded.  We will call\
    \ this outer\n   protocol the delivery protocol. The algorithms for processing\
    \ this\n   packet are discussed later.\n"
- title: Overall packet
  contents:
  - "Overall packet\n   The entire encapsulated packet would then have the form:\n\
    \                  ---------------------------------\n                  |    \
    \                           |\n                  |       Delivery Header     \
    \    |\n                  |                               |\n                \
    \  ---------------------------------\n                  |                    \
    \           |\n                  |       GRE Header              |\n         \
    \         |                               |\n                  ---------------------------------\n\
    \                  |                               |\n                  |    \
    \   Payload packet          |\n                  |                           \
    \    |\n                  ---------------------------------\n"
- title: Packet header
  contents:
  - "Packet header\n   The GRE packet header has the form:\n       0             \
    \      1                   2                   3\n       0 1 2 3 4 5 6 7 8 9 0\
    \ 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |C|R|K|S|s|Recur|  Flags  | Ver |         Protocol Type         |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \      Checksum (optional)      |       Offset (optional)       |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                         Key (optional)                        |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \                    Sequence Number (optional)                 |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                         Routing (optional)\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      Flags and version (2 octets)\n      The GRE flags are encoded in the first\
    \ two octets.  Bit 0 is the\n      most significant bit, bit 15 is the least significant\
    \ bit.  Bits\n      13 through 15 are reserved for the Version field.  Bits 5\
    \ through\n      12 are reserved for future use and MUST be transmitted as zero.\n\
    \      Checksum Present (bit 0)\n      If the Checksum Present bit is set to 1,\
    \ then the Checksum field\n      is present and contains valid information.\n\
    \      If either the Checksum Present bit or the Routing Present bit are\n   \
    \   set, BOTH the Checksum and Offset fields are present in the GRE\n      packet.\n\
    \      Routing Present (bit 1)\n      If the Routing Present bit is set to 1,\
    \ then it indicates that the\n      Offset and Routing fields are present and\
    \ contain valid\n      information.\n      If either the Checksum Present bit\
    \ or the Routing Present bit are\n      set, BOTH the Checksum and Offset fields\
    \ are present in the GRE\n      packet.\n      Key Present (bit 2)\n      If the\
    \ Key Present bit is set to 1, then it indicates that the Key\n      field is\
    \ present in the GRE header.  Otherwise, the Key field is\n      not present in\
    \ the GRE header.\n      Sequence Number Present (bit 3)\n      If the Sequence\
    \ Number Present bit is set to 1, then it indicates\n      that the Sequence Number\
    \ field is present.  Otherwise, the\n      Sequence Number field is not present\
    \ in the GRE header.\n      Strict Source Route (bit 4)\n      The meaning of\
    \ the Strict Source route bit is defined in other\n      documents.  It is recommended\
    \ that this bit only be set to 1 if\n      all of the the Routing Information\
    \ consists of Strict Source\n      Routes.\n      Recursion Control (bits 5-7)\n\
    \      Recursion control contains a three bit unsigned integer which\n      contains\
    \ the number of additional encapsulations which are\n      permissible.  This\
    \ SHOULD default to zero.\n      Version Number (bits 13-15)\n      The Version\
    \ Number field MUST contain the value 0.  Other values\n      are outside of the\
    \ scope of this document.\n      Protocol Type (2 octets)\n      The Protocol\
    \ Type field contains the protocol type of the payload\n      packet.  In general,\
    \ the value will be the Ethernet protocol type\n      field for the packet.  Currently\
    \ defined protocol types are listed\n      below.  Additional values may be defined\
    \ in other documents.\n      Offset (2 octets)\n      The offset field indicates\
    \ the octet offset from the start of the\n      Routing field to the first octet\
    \ of the active Source Route Entry\n      to be examined.  This field is present\
    \ if the Routing Present or\n      the Checksum Present bit is set to 1, and contains\
    \ valid\n      information only if the Routing Present bit is set to 1.\n    \
    \  Checksum (2 octets)\n      The Checksum field contains the IP (one's complement)\
    \ checksum of\n      the GRE header and the payload packet.  This field is present\
    \ if\n      the Routing Present or the Checksum Present bit is set to 1, and\n\
    \      contains valid information only if the Checksum Present bit is set\n  \
    \    to 1.\n      Key (4 octets)\n      The Key field contains a four octet number\
    \ which was inserted by\n      the encapsulator.  It may be used by the receiver\
    \ to authenticate\n      the source of the packet.  The techniques for determining\n\
    \      authenticity are outside of the scope of this document.  The Key\n    \
    \  field is only present if the Key Present field is set to 1.\n      Sequence\
    \ Number (4 octets)\n      The Sequence Number field contains an unsigned 32 bit\
    \ integer\n      which is inserted by the encapsulator.  It may be used by the\n\
    \      receiver to establish the order in which packets have been\n      transmitted\
    \ from the encapsulator to the receiver.  The exact\n      algorithms for the\
    \ generation of the Sequence Number and the\n      semantics of their reception\
    \ is outside of the scope of this\n      document.\n      Routing (variable)\n\
    \      The Routing field is optional and is present only if the Routing\n    \
    \  Present bit is set to 1.\n      The Routing field is a list of Source Route\
    \ Entries (SREs).  Each\n      SRE has the form:\n    0                   1  \
    \                 2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6\
    \ 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |       Address Family          |  SRE Offset   |  SRE Length   |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                        Routing Information ...\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   The routing field is terminated with a \"NULL\" SRE containing an\n   address\
    \ family of type 0x0000 and a length of 0.\n   Address Family (2 octets)\n   The\
    \ Address Family field contains a two octet value which indicates\n   the syntax\
    \ and semantics of the Routing Information field.  The\n   values for this field\
    \ and the corresponding syntax and semantics for\n   Routing Information are defined\
    \ in other documents.\n   SRE Offset (1 octet)\n   The SRE Offset field indicates\
    \ the octet offset from the start of the\n   Routing Information field to the\
    \ first octet of the active entry in\n   Source Route Entry to be examined.\n\
    \   SRE Length (1 octet)\n   The SRE Length field contains the number of octets\
    \ in the SRE.  If\n   the SRE Length is 0, this indicates this is the last SRE\
    \ in the\n   Routing field.\n   Routing Information (variable)\n   The Routing\
    \ Information field contains data which may be used in\n   routing this packet.\
    \  The exact semantics of this field is defined in\n   other documents.\n"
- title: Forwarding of GRE packets
  contents:
  - "Forwarding of GRE packets\n   Normally, a system which is forwarding delivery\
    \ layer packets will\n   not differentiate GRE packets from other packets in any\
    \ way.\n   However, a GRE packet may be received by a system.  In this case, the\n\
    \   system should use some delivery-specific means to determine that this\n  \
    \ is a GRE packet.  Once this is determined, the Key, Sequence Number\n   and\
    \ Checksum fields if they contain valid information as indicated by\n   the corresponding\
    \ flags may be checked.  If the Routing Present bit\n   is set to 1, then the\
    \ Address Family field should be checked to\n   determine the semantics and use\
    \ of the SRE Length, SRE Offset and\n   Routing Information fields.  The exact\
    \ semantics for processing a SRE\n   for each Address Family is defined in other\
    \ documents.\n   Once all SREs have been processed, then the source route is complete,\n\
    \   the GRE header should be removed, the payload's TTL MUST be\n   decremented\
    \ (if one exists) and the payload packet should be\n   forwarded as a normal packet.\
    \  The exact forwarding method depends on\n   the Protocol Type field.\n"
- title: Current List of Protocol Types
  contents:
  - "Current List of Protocol Types\n   The following are currently assigned protocol\
    \ types for GRE.  Future\n   protocol types must be taken from DIX ethernet encoding.\
    \  For\n   historical reasons, a number of other values have been used for some\n\
    \   protocols.  The following table of values MUST be used to identify\n   the\
    \ following protocols:\n       Protocol Family                     PTYPE\n   \
    \    ---------------                     -----\n       Reserved              \
    \              0000\n       SNA                                 0004\n       OSI\
    \ network layer                   00FE\n       PUP                           \
    \      0200\n       XNS                                 0600\n       IP      \
    \                            0800\n       Chaos                              \
    \ 0804\n       RFC 826 ARP                         0806\n       Frame Relay ARP\
    \                     0808\n       VINES                               0BAD\n\
    \       VINES Echo                          0BAE\n       VINES Loopback      \
    \                0BAF\n       DECnet (Phase IV)                   6003\n     \
    \  Transparent Ethernet Bridging       6558\n       Raw Frame Relay          \
    \           6559\n       Apollo Domain                       8019\n       Ethertalk\
    \ (Appletalk)               809B\n       Novell IPX                          8137\n\
    \       RFC 1144 TCP/IP compression         876B\n       IP Autonomous Systems\
    \               876C\n       Secure Data                         876D\n      \
    \ Reserved                            FFFF\n   See the IANA list of Ether Types\
    \ for the complete list of these\n   values.\n   URL = ftp://ftp.isi.edu/in-notes/iana/assignments/ethernet-numbers.\n"
- title: References
  contents:
  - "References\n   RFC 1479\n      Steenstrup, M. \"Inter-Domain Policy Routing Protocol\n\
    \      Specification: Version 1\", RFC1479, BBN Systems and Technologies,\n  \
    \    July 1993.\n   RFC 1226\n      Kantor, B. \"Internet Protocol Encapsulation\
    \ of AX.25 Frames\", RFC\n      1226, University of California, San Diego, May\
    \ 1991.\n   RFC 1234\n      Provan, D. \"Tunneling IPX Traffic through IP Networks\"\
    , RFC 1234,\n      Novell, Inc., June 1991.\n   RFC 1241\n      Woodburn, R.,\
    \ and D. Mills, \"Scheme for an Internet Encapsulation\n      Protocol: Version\
    \ 1\", RFC 1241, SAIC, University of Delaware, July\n      1991.\n   RFC 1326\n\
    \      Tsuchiya, P., \"Mutual Encapsulation Considered Dangerous\", RFC\n    \
    \  1326, Bellcore, May 1992.\n   SDRP\n      Estrin, D., Li, T., and Y. Rekhter,\
    \ \"Source Demand Routing\n      Protocol Specification (Version 1)\", Work in\
    \ Progress.\n   RFC 1702\n      Hanks, S., Li, T., Farinacci, D., and P. Traina,\
    \ \"Generic Routing\n      Encapsulation over IPv4 networks\", RFC 1702, NetSmiths,\
    \ Ltd.,\n      cisco Systems, October 1994.\n"
- title: Security Considerations
  contents:
  - "Security Considerations\n   Security issues are not discussed in this memo.\n"
- title: Acknowledgements
  contents:
  - "Acknowledgements\n   The authors would like to acknowledge Yakov Rekhter (IBM)\
    \ and Deborah\n   Estrin (USC) for their advice, encouragement and insightful\
    \ comments.\n"
- title: Authors'  Addresses
  contents:
  - "Authors'  Addresses\n   Stan Hanks\n   NetSmiths, Ltd.\n   2025 Lincoln Highway\n\
    \   Edison NJ, 08817\n   EMail: stan@netsmiths.com\n   Tony Li\n   cisco Systems,\
    \ Inc.\n   1525 O'Brien Drive\n   Menlo Park, CA 94025\n   EMail: tli@cisco.com\n\
    \   Dino Farinacci\n   cisco Systems, Inc.\n   1525 O'Brien Drive\n   Menlo Park,\
    \ CA 94025\n   EMail: dino@cisco.com\n   Paul Traina\n   cisco Systems, Inc.\n\
    \   1525 O'Brien Drive\n   Menlo Park, CA 94025\n   EMail: pst@cisco.com\n"
