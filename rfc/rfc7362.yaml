- title: __initial_text__
  contents:
  - "                  Latching: Hosted NAT Traversal (HNT)\n                  for\
    \ Media in Real-Time Communication\n"
- title: Abstract
  contents:
  - "Abstract\n   This document describes the behavior of signaling intermediaries\
    \ in\n   Real-Time Communication (RTC) deployments, sometimes referred to as\n\
    \   Session Border Controllers (SBCs), when performing Hosted NAT\n   Traversal\
    \ (HNT).  HNT is a set of mechanisms, such as media relaying\n   and latching,\
    \ that such intermediaries use to enable other RTC\n   devices behind NATs to\
    \ communicate with each other.\n   This document is non-normative and is only\
    \ written to explain HNT in\n   order to provide a reference to the Internet community\
    \ and an\n   informative description to manufacturers and users.\n   Latching,\
    \ which is one of the HNT components, has a number of\n   security issues covered\
    \ here.  Because of those, and unless all\n   security considerations explained\
    \ here are taken into account and\n   solved, the IETF advises against use of\
    \ the latching mechanism over\n   the Internet and recommends other solutions,\
    \ such as the Interactive\n   Connectivity Establishment (ICE) protocol.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document is not an Internet Standards Track specification;\
    \ it is\n   published for informational purposes.\n   This document is a product\
    \ of the Internet Engineering Task Force\n   (IETF).  It represents the consensus\
    \ of the IETF community.  It has\n   received public review and has been approved\
    \ for publication by the\n   Internet Engineering Steering Group (IESG).  Not\
    \ all documents\n   approved by the IESG are a candidate for any level of Internet\n\
    \   Standard; see Section 2 of RFC 5741.\n   Information about the current status\
    \ of this document, any errata,\n   and how to provide feedback on it may be obtained\
    \ at\n   http://www.rfc-editor.org/info/rfc7362.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2014 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction  . . . . . . . . . . . . . . . . . . .\
    \ . . . . .   2\n   2.  Background  . . . . . . . . . . . . . . . . . . . . .\
    \ . . . .   4\n   3.  Impact on Signaling . . . . . . . . . . . . . . . . . .\
    \ . . .   5\n   4.  Media Behavior and Latching . . . . . . . . . . . . . . .\
    \ . .   6\n   5.  Security Considerations . . . . . . . . . . . . . . . . . .\
    \ .  11\n   6.  Acknowledgements  . . . . . . . . . . . . . . . . . . . . . .\
    \  13\n   7.  References  . . . . . . . . . . . . . . . . . . . . . . . . .  14\n\
    \     7.1.  Normative References  . . . . . . . . . . . . . . . . . .  14\n  \
    \   7.2.  Informative References  . . . . . . . . . . . . . . . . .  14\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   Network Address Translators (NATs) are widely used in the\
    \ Internet by\n   consumers and organizations.  Although specific NAT behaviors\
    \ vary,\n   this document uses the term \"NAT\" for devices that map any IPv4\
    \ or\n   IPv6 address and transport port number to another IPv4 or IPv6\n   address\
    \ and transport port number.  This includes consumer NATs,\n   firewall/NATs,\
    \ IPv4-IPv6 NATs, Carrier-Grade NATs (CGNs) [RFC6888],\n   etc.\n   The Session\
    \ Initiation Protocol (SIP) [RFC3261], and others that try\n   to use a more direct\
    \ path for media than with signaling, are\n   difficult to use across NATs.  These\
    \ protocols use IP addresses and\n   transport port numbers encoded in bodies\
    \ such as the Session\n   Description Protocol (SDP) [RFC4566] and, in the case\
    \ of SIP, various\n   header fields.  Such addresses and ports are unusable unless\
    \ all\n   peers in a session are located behind the same NAT.\n   Mechanisms such\
    \ as Session Traversal Utilities for NAT (STUN)\n   [RFC5389], Traversal Using\
    \ Relays around NAT (TURN) [RFC5766], and\n   Interactive Connectivity Establishment\
    \ (ICE) [RFC5245] did not exist\n   when protocols like SIP began being deployed.\
    \  Some mechanisms, such\n   as the early versions of STUN [RFC3489], had started\
    \ appearing, but\n   they were unreliable and suffered a number of issues typical\
    \ for\n   UNilateral Self-Address Fixing (UNSAF), as described in [RFC3424].\n\
    \   For these and other reasons, Session Border Controllers (SBCs) that\n   were\
    \ already being used by SIP domains for other SIP and media-\n   related purposes\
    \ began to use proprietary mechanisms to enable SIP\n   devices behind NATs to\
    \ communicate across the NATs.  These mechanisms\n   are often transparent to\
    \ endpoints and rely on a dynamic address and\n   port discovery technique called\
    \ \"latching\".\n   The term often used for this behavior is \"Hosted NAT Traversal\n\
    \   (HNT)\"; a number of manufacturers sometimes use other names such as\n   \"\
    Far-end NAT Traversal\" or \"NAT assist\" instead.  The systems that\n   perform\
    \ HNT are frequently SBCs as described in [RFC5853], although\n   other systems\
    \ such as media gateways and \"media proxies\" sometimes\n   perform the same\
    \ role.  For the purposes of this document, all such\n   systems are referred\
    \ to as SBCs and the NAT traversal behavior is\n   called HNT.\n   At the time\
    \ of this document's publication, a vast majority of SIP\n   domains use HNT to\
    \ enable SIP devices to communicate across NATs\n   despite the publication of\
    \ ICE.  There are many reasons for this, but\n   those reasons are not relevant\
    \ to this document's purpose and will\n   not be discussed.  It is, however, worth\
    \ pointing out that the\n   current deployment levels of HNT and NATs make the\
    \ complete\n   extinction of this practice highly unlikely in the foreseeable\n\
    \   future.\n   The purpose of this document is to describe the mechanisms often\
    \ used\n   for HNT at the SDP and media layer in order to aid understanding the\n\
    \   implications and limitations imposed by it.  Although the mechanisms\n   used\
    \ in HNT are well known in the community, publication in an IETF\n   document\
    \ is useful as a means of providing common terminology and a\n   reference for\
    \ related documents.\n   This document does not attempt to make a case for HNT\
    \ or present it\n   as a solution that is somehow better than alternatives such\
    \ as ICE.\n   Due to the security issues presented in Section 5, the latching\n\
    \   mechanism is considered inappropriate for general use on the Internet\n  \
    \ unless all security considerations are taken into account and solved.\n   The\
    \ IETF is instead advising for the use of the Interactive\n   Connectivity Establishment\
    \ (ICE) [RFC5245] and Traversal Using Relays\n   around NAT (TURN) [RFC5766] protocols.\n\
    \   It is also worth mentioning that there are purely signaling-layer\n   components\
    \ of HNT as well.  One such component is briefly described\n   for SIP in [RFC5853],\
    \ but that is not the focus of this document.\n   SIP uses numerous expressive\
    \ primitives for message routing.  As a\n   result, the HNT component for SIP\
    \ is typically more implementation-\n   specific and deployment-specific than\
    \ the SDP and media components.\n   For the purposes of this document it is hence\
    \ assumed that signaling\n   intermediaries handle traffic in a way that allows\
    \ protocols such as\n   SIP to function correctly across the NATs.\n   The rest\
    \ of this document focuses primarily on the use of HNT for\n   SIP.  However,\
    \ the mechanisms described here are relatively generic\n   and are often used\
    \ with other protocols such as the Extensible\n   Messaging and Presence Protocol\
    \ (XMPP) [RFC6120], Media Gateway\n   Control Protocol (MGCP) [RFC3435], Megaco/H.248\
    \ [RFC5125], and H.323\n   [H.323].\n"
- title: 2.  Background
  contents:
  - "2.  Background\n   The general problems with NAT traversal for protocols such\
    \ as SIP\n   are:\n   1.  The addresses and port numbers encoded in SDP bodies\
    \ (or their\n       equivalents) by NATed User Agents (UAs) are not usable across\
    \ the\n       Internet because they represent the private network addressing\n\
    \       information of the UA rather than the addresses/ports that will\n    \
    \   be mapped to/from by the NAT.\n   2.  The policies inherent in NATs, and explicit\
    \ in firewalls, are\n       such that packets from outside the NAT cannot reach\
    \ the UA until\n       the UA sends packets out first.\n   3.  Some NATs apply\
    \ endpoint-dependent filtering on incoming packets,\n       as described in [RFC4787];\
    \ thus, a UA may only be able to receive\n       packets from the same remote\
    \ peer IP:port as it sends packets out\n       to.\n   In order to overcome these\
    \ issues, signaling intermediaries such as\n   SIP SBCs on the public side of\
    \ the NATs perform HNT for both\n   signaling and media.  An example deployment\
    \ model of HNT and SBCs is\n   shown in Figure 1.\n                          \
    \    +-----+       +-----+\n                              | SBC |-------| SBC\
    \ |\n                              +-----+       +-----+\n                   \
    \            /                 \\\n                              /     Public\
    \ Net    \\\n                             /                     \\\n         \
    \              +-----+                     +-----+\n                       |NAT-A|\
    \                     |NAT-B|\n                       +-----+                \
    \     +-----+\n                         /                             \\\n   \
    \                     / Private Net       Private Net \\\n                   \
    \    /                                 \\\n                   +------+       \
    \                     +------+\n                   | UA-A |                  \
    \          | UA-B |\n                   +------+                            +------+\n\
    \    Figure 1: Signaling and Media Flows in a Common Deployment Scenario\n"
- title: 3.  Impact on Signaling
  contents:
  - "3.  Impact on Signaling\n   Along with codec and other media-layer information,\
    \ session\n   establishment signaling also conveys potentially private and non-\n\
    \   globally routable addressing information.  Signaling intermediaries\n   would\
    \ hence modify such information so that peer UAs are given the\n   (public) addressing\
    \ information of a media relay controlled by the\n   intermediary.\n   In typical\
    \ deployments, the media relay and signaling intermediary\n   (i.e., the SBC)\
    \ are co-located, thereby sharing the same IP address.\n   Also, the address of\
    \ the media relay would typically belong to the\n   same IP address family as\
    \ the one used for signaling (as it is known\n   to work for that UA).  In other\
    \ words, signaling and media would both\n   travel over either IPv4 or IPv6.\n\
    \   The port numbers introduced in the signaling by the intermediary are\n   typically\
    \ allocated dynamically.  Allocation strategies are entirely\n   implementation\
    \ dependent and they often vary from one product to the\n   next.\n   The offer/answer\
    \ media negotiation model [RFC3264] is such that once\n   an offer is sent, the\
    \ generator of the offer needs to be prepared to\n   receive media on the advertised\
    \ address/ports.  In practice, such\n   media may or may not be received depending\
    \ on the implementations\n   participating in a given session, local policies,\
    \ and the call\n   scenario.  For example, if a SIP SDP offer originally came\
    \ from a UA\n   behind a NAT, the SIP SBC cannot send media to it until an SDP\
    \ answer\n   is given to the UA and latching (Section 4) occurs.  Another example\n\
    \   is, when a SIP SBC sends an SDP offer in a SIP INVITE to a\n   residential\
    \ customer's UA and receives back SDP in a 18x response,\n   the SBC may decide,\
    \ for policy reasons, not to send media to that\n   customer UA until a SIP 200\
    \ response has been received (e.g., to\n   prevent toll fraud).\n"
- title: 4.  Media Behavior and Latching
  contents:
  - "4.  Media Behavior and Latching\n   An UA that is behind a NAT would stream media\
    \ from an address and a\n   port number (an address:port tuple) that are only\
    \ valid in its local\n   network.  Once packets cross the NAT, that address:port\
    \ tuple will be\n   mapped to a public one.  The UA, however, is not typically\
    \ aware of\n   the public mapping and would often advertise the private address:port\n\
    \   tuple in signaling.  This way, while a session is still being set up,\n  \
    \ the signaling intermediary is not yet aware what addresses and ports\n   the\
    \ caller and the callee would end up using for media traffic: it\n   has only\
    \ seen them advertise the private addresses they use behind\n   their respective\
    \ NATs.  Therefore, media relays used in HNT would\n   often use a mechanism called\
    \ \"latching\".\n   Historically, \"latching\" only referred to the process by\
    \ which SBCs\n   \"latch\" onto UDP packets from a given UA for security purposes,\
    \ and\n   \"symmetric-latching\" is when the latched address:port tuples are used\n\
    \   to send media back to the UA.  Today, most people talk about them\n   both\
    \ as \"latching\"; thus, this document does as well.\n   The latching mechanism\
    \ works as follows:\n   1.  After receiving an offer from Alice (User Agent Client\
    \ (UAC)\n       located behind a NAT), a signaling intermediary located on the\n\
    \       public Internet would allocate a set of IP address:port tuples on\n  \
    \     a media relay.  The set would then be advertised to Bob (User\n       Agent\
    \ Server (UAS)) so that he would use those media relay\n       address:port tuples\
    \ for all media he wished to send toward Alice\n       (UAC).\n   2.  Next, after\
    \ receiving from Bob (UAS) an answer to its offer, the\n       signaling server\
    \ would allocate a second address:port set on the\n       media relay.  In its\
    \ answer to Alice (UAC), the SBC will replace\n       Bob's address:port with\
    \ this second set.  This way, Alice will\n       send media to this media relay\
    \ address:port.\n   3.  The media relay receives the media packets on the allocated\
    \ ports\n       and uses their respective source address:ports as a destination\n\
    \       for all media bound in the opposite direction.  In other words,\n    \
    \   it \"latches\" or locks on these source address:port tuples.\n   4.  This\
    \ way, when Alice (UAC) streams media toward the media relay,\n       it would\
    \ be received on the second address:port tuple.  The\n       source address:port\
    \ of her traffic would belong to the public\n       interface of Alice's NAT,\
    \ and anything that the relay sends back\n       to that address:port would find\
    \ its way to Alice.\n   5.  Similarly, the source of the media packets that Bob\
    \ (UAS) is\n       sending would be latched upon and used for media going in that\n\
    \       direction.\n   6.  Latching is usually done only once per peer and not\
    \ allowed to\n       change or cause a re-latching until a new offer and answer\
    \ get\n       exchanged (e.g., in a subsequent call or after a SIP peer has\n\
    \       gone on and off hold).  The reasons for such restrictions are\n      \
    \ mostly related to security: once a session has started, a user\n       agent\
    \ is not expected to suddenly start streaming from a\n       different port without\
    \ sending a new offer first.  A change may\n       indicate an attempt to hijack\
    \ the session.  In some cases,\n       however, a port change may be caused by\
    \ a re-mapping in a NAT\n       device standing between the SBC and the UA.  More\
    \ advanced SBCs\n       may therefore allow some level of flexibility on the re-latching\n\
    \       restrictions while carefully considering the potential security\n    \
    \   implications of doing so.\n   Figure 2 describes how latching occurs for SIP\
    \ where HNT is provided\n   by an SBC connected to two networks: 203.0.113/24\
    \ facing towards the\n   UAC network and 198.51.100/24 facing towards the UAS\
    \ network.\n   192.0.2.1   192.0.2.9/203.0.113.4                   198.51.100.33\n\
    \      Alice         NAT       203.0.113.9-SBC-198.51.100.2     Bob\n     -------\
    \        ---                   ---                -------\n        |         \
    \   |                     |                       |\n    1.  |--SIP INVITE+offer\
    \ c=192.0.2.1--->|                       |\n        |            |           \
    \          |                       |\n    2.  |            |   (SBC allocates\
    \ 198.51.100.2:22007         |\n        |            |    for inbound RTP from\
    \ Bob)                |\n        |            |                     |        \
    \               |\n    3.  |            |                     |-----INVITE+offer----->|\n\
    \        |            |                     |  c=198.51.100.2:22007 |\n      \
    \  |            |                     |                       |\n    4.  |   \
    \         |                     |<------180 Ringing-----|\n        |         \
    \   |                     |                       |\n        |            |  \
    \                   |                       |\n    5.  |<------180 Ringing----------------|\
    \                       |\n        |            |                     |      \
    \                 |\n    6.  |            |                     |<------200+answer------|\n\
    \        |            |                     |                       |\n    7.\
    \  |            |   (SBC allocates 203.0.113.9:36010          |\n        |   \
    \         |    for inbound RTP from Alice)              |\n        |         \
    \   |                     |                       |\n    8.  |<-200+answer,c=203.0.113.9:36010--|\
    \  c=198.51.100.33      |\n        |            |                     |      \
    \                 |\n    9.  |------------ACK------------------>|            \
    \           |\n   10.  |            |                     |----------ACK--------->|\n\
    \        |            |                     |                       |\n   11.\
    \  |=====RTP,dest=203.0.113.9:36010==>|                       |\n        |   \
    \         |                     |                       |\n   12.  |         \
    \   |                (SBC latches to              |\n        |            |  \
    \             source IP address and         |\n        |            |        \
    \       port seen at (11))            |\n        |            |              \
    \       |                       |\n   13.  |            |                    \
    \ |<======= RTP ==========|\n        |            |                     |dest:198.51.100.2:22007|\n\
    \   14.  |<=====RTP, to latched address=====|                       |\n      \
    \  |            |                     |                       |\n           Figure\
    \ 2: Latching by a SIP SBC across Two Interfaces\n   While XMPP implementations\
    \ often rely on ICE to handle NAT traversal,\n   there are some that also support\
    \ a non-ICE transport called XMPP\n   Jingle Raw UDP Transport Method [XEP-0177].\
    \  Figure 3 describes how\n   latching occurs for one such XMPP implementation\
    \ where HNT is\n   provided by an XMPP server on the public Internet.\n   192.0.2.1\
    \  192.0.2.9/203.0.113.4        203.0.113.9      198.51.100.8\n      Romeo   \
    \        NAT                  XMPP Server            Juliet\n      -----     \
    \      ---                      ---                 -----\n        |         \
    \     |                        |                     |\n    1.  |----session-initiate\
    \ cand=192.0.2.1--->|                     |\n        |              |        \
    \                |                     |\n    2.  |<------------ack-----------------------|\
    \                     |\n        |              |                        |   \
    \                  |\n    3.  |              |      (Server allocates 203.0.113.9:2200\
    \      |\n        |              |       for inbound RTP from Juliet)        \
    \   |\n        |              |                        |                     |\n\
    \    4.  |              |                        |--session-initiate-->|\n   \
    \     |              |                        |cand=203.0.113.9:2200|\n      \
    \  |              |                        |                     |\n    5.  |\
    \              |                        |<--------ack---------|\n        |   \
    \           |                        |                     |\n        |      \
    \        |                        |                     |\n    6.  |         \
    \     |                        |<---session-accept---|\n        |            \
    \  |                        |  cand=198.51.100.8  |\n        |              |\
    \                        |                     |\n    7.  |              |   \
    \                     |---------ack-------->|\n        |              |      \
    \                  |                     |\n    8.  |              |      (Server\
    \ allocates  203.0.113.9:3300     |\n        |              |       for inbound\
    \ RTP from Romeo)            |\n        |              |                     \
    \   |                     |\n    9.  |<-session-accept cand=203.0.113.9:3300-|\
    \                     |\n        |              |                        |   \
    \                  |\n   10.  |-----------------ack------------------>|      \
    \               |\n        |              |                        |         \
    \            |\n        |              |                        |            \
    \         |\n   11.  |======RTP, dest=203.0.113.9:3300======>|               \
    \      |\n        |              |                        |                  \
    \   |\n   12.  |              |               (XMPP server latches to        |\n\
    \        |              |                src IP 203.0.113.4 and        |\n   \
    \     |              |                src port seen at (11))        |\n      \
    \  |              |                        |                     |\n   13.  |\
    \              |                        |<======= RTP ========|\n        |   \
    \           |                        |dest=203.0.113.9:2200|\n   14.  |<======RTP,\
    \ to latched address=========|                     |\n        |              |\
    \                        |                     |\n        Figure 3: Latching by\
    \ an XMPP Server across Two Interfaces\n   The above is a general description,\
    \ and some details vary between\n   implementations or configuration settings.\
    \  For example, some\n   intermediaries perform additional logic before latching\
    \ on received\n   packet source information to prevent malicious attacks or latching\n\
    \   erroneously to previous media senders -- often called \"rogue-rtp\" in\n \
    \  the industry.\n   It is worth pointing out that latching is not exclusively\
    \ a \"server\n   affair\", and some clients may also use it in cases where they\
    \ are\n   configured with a public IP address and are contacted by a NATed\n \
    \  client with no other NAT traversal means.\n   In order for latching to function\
    \ correctly, the UA behind the NAT\n   needs to support symmetric RTP.  That is,\
    \ it needs to use the same\n   ports for sending data as the ones it listens on\
    \ for inbound packets.\n   Today, this is the case with almost all SIP and XMPP\
    \ clients.  Also,\n   UAs need to make sure they can begin sending media packets\n\
    \   independently without waiting for packets to arrive first.  In\n   theory,\
    \ it is possible that some UAs would not send packets out\n   first, for example,\
    \ if a SIP session begins in 'inactive' or\n   'recvonly' SDP mode from the UA\
    \ behind the NAT.  In practice,\n   however, SIP sessions from regular UAs (the\
    \ kind that one could find\n   behind a NAT) virtually never begin in 'inactive'\
    \ or 'recvonly' mode,\n   for obvious reasons.  The media direction would also\
    \ be problematic\n   if the SBC side indicated 'inactive' or 'sendonly' modes\
    \ when it sent\n   SDP to the UA.  However, SBCs providing HNT would always be\n\
    \   configured to avoid this.\n   Given that, in order for latching to work properly,\
    \ media relays need\n   to begin receiving media before they start sending, it\
    \ is possible\n   for deadlocks to occur.  This can happen when the UAC and the\
    \ UAS in\n   a session are connected to different signaling intermediaries that\n\
    \   both provide HNT.  In this case, the media relays controlled by the\n   signaling\
    \ servers could end up each waiting upon the other to\n   initiate the streaming.\
    \  To prevent this, relays would often attempt\n   to start streaming toward the\
    \ address:port tuples provided in the\n   offer/answer even before receiving any\
    \ inbound traffic.  If the\n   entity they are streaming to is another HNT performing\
    \ server, it\n   would have provided its relay's public address and ports, and\
    \ the\n   early stream would find its target.\n   Although many SBCs only support\
    \ UDP-based media latching (in\n   particular, RTP/RTCP), many SBCs support TCP-based\
    \ media latching as\n   well.  TCP-based latching is more complicated; it involves\
    \ forcing\n   the UA behind the NAT to be the TCP client and sending the initial\n\
    \   SYN-flagged TCP packet to the SBC (i.e., be the 'active' mode side of\n  \
    \ a TCP-based media session).  If both UAs of a TCP-based media session\n   are\
    \ behind NATs, then SBCs typically force both UAs to be the TCP\n   clients, and\
    \ the SBC splices the TCP connections together.  TCP\n   splicing is a well-known\
    \ technique, as described in [TCP-SPLICING].\n   HNT and latching, in particular,\
    \ are generally found to work\n   reliably, but they do have obvious caveats.\
    \  The first one usually\n   raised by IETF participants is that UAs are not aware\
    \ of it\n   occurring.  This makes it impossible for the mechanism to be used\n\
    \   with protocols such as ICE that try various traversal techniques in\n   an\
    \ effort to choose the one that best suits a particular situation.\n   Overwriting\
    \ address information in offers and answers may actually\n   completely prevent\
    \ UAs from using ICE because of the ice-mismatch\n   rules described in [RFC5245].\n\
    \   The second issue raised by IETF participants is that it causes media\n   to\
    \ go through a relay instead of directly over the IP-routed path\n   between the\
    \ two participating UAs.  While this adds obvious drawbacks\n   such as reduced\
    \ scalability and increased latency, it is also\n   considered a benefit by SBC\
    \ administrators: if a customer pays for\n   \"phone\" service, for example, the\
    \ media is what is truly being paid\n   for, and the administrators usually like\
    \ to be able to detect that\n   the media is flowing correctly, evaluate its quality,\
    \ know if and why\n   it failed, etc.  Also, in some cases, routing media through\
    \ operator\n   controlled relays may route media over paths explicitly optimized\
    \ for\n   media and hence offer better performance than regular Internet\n   routing.\n"
- title: 5.  Security Considerations
  contents:
  - "5.  Security Considerations\n   A common concern is that an SBC (or an XMPP server\
    \ -- all security\n   considerations apply to both) that implements HNT may latch\
    \ to\n   incorrect and possibly malicious sources.  The ICE [RFC5245]\n   protocol,\
    \ for example, provides authentication tokens (conveyed in\n   the ice-ufrag and\
    \ ice-pwd attributes) that allow the identity of a\n   peer to be confirmed before\
    \ engaging in media exchange with her.\n   Without such authentication, a malicious\
    \ source could attempt a\n   resource exhaustion attack by flooding all possible\
    \ media-latching\n   UDP ports on the SBC in order to prevent calls from succeeding.\
    \  SBCs\n   have various mechanisms to prevent this from happening or to alert\
    \ an\n   administrator when it does.  Still, a sufficiently sophisticated\n  \
    \ attacker may be able to bypass them for some time.  The most common\n   example\
    \ is typically referred to as \"restricted-latching\", whereby\n   the SBC will\
    \ not latch to any packets from a source public IP address\n   other than the\
    \ one the SIP UA uses for SIP signaling.  This way, the\n   SBC simply ignores\
    \ and does not latch onto packets coming from the\n   attacker.  In some cases,\
    \ the limitation may be loosened to allow\n   media from a range of IP addresses\
    \ belonging to the same network in\n   order to allow for use cases such as decomposed\
    \ UAs and various forms\n   of third-party call control.  However, since relaxing\
    \ the\n   restrictions in such a way may provide attackers with a larger attack\n\
    \   surface, such configurations are generally performed only on a case-\n   by-case\
    \ basis so that the specifics of individual deployments can be\n   taken into\
    \ account.\n   All of the above problems would still arise if the attacker knows\
    \ the\n   public source IP of the UA that is actually making the call.  This\n\
    \   would allow attackers to still flood all of the SBC's public IP\n   addresses\
    \ and ports with packets spoofing that SIP UA's public source\n   IP address.\
    \  However, this would only impact media from that IP (or\n   range of IP addresses)\
    \ rather than all calls that the SBC is\n   servicing.\n   A malicious source\
    \ could send media packets to an SBC media-latching\n   UDP port in the hopes\
    \ of being latched to for the purpose of\n   receiving media for a given SIP session.\
    \  SBCs have various\n   mechanisms to prevent this as well.  Restricted latching,\
    \ for\n   example, would also help in this case because the attacker can't make\n\
    \   the SBC send media packets back to themselves since the SBC will not\n   latch\
    \ onto the attacker's media packets, not having seen the\n   corresponding signaling\
    \ packets first.  There could still be an issue\n   if the attacker happens to\
    \ be either (1) in the IP routing path where\n   it can thus spoof the same IP\
    \ as the real UA and get the media coming\n   back, in which case the attacker\
    \ hardly needs to attack at all to\n   begin with, or (2) behind the same NAT\
    \ as the legitimate SIP UA, in\n   which case the attacker's packets will be latched\
    \ to by the SBC and\n   the SBC will send media back to the attacker.  In the\
    \ latter case,\n   which may be of particular concern with Carrier-Grade NATs,\
    \ the\n   legitimate SIP UA will likely end the call anyway when a human user\n\
    \   who does not hear anything hangs up.  In the case of a non-human call\n  \
    \ participant, such as an answering machine, this may not happen\n   (although\
    \ many such automated UAs would also hang up when they do not\n   receive any\
    \ media).  The attacker could also redirect all media to\n   the real SIP UA after\
    \ receiving it, in which case the attack would\n   likely remain undetected and\
    \ succeed.  Again, this would be of\n   particular concern with larger-scale NATs\
    \ serving many different\n   endpoints, such as Carrier-Grade NATs.  The larger\
    \ the number of\n   devices fronted by a NAT is, the more use cases would vary,\
    \ and the\n   more the number of possible attack vectors would grow.\n   Naturally,\
    \ Secure RTP (SRTP) [RFC3711] would help mitigate such\n   threats and, if used\
    \ with the appropriate key negotiation mechanisms,\n   would protect the media\
    \ from monitoring while in transit.  It should\n   therefore be used independently\
    \ of HNT.  Section 26 of [RFC3261]\n   provides an overview of additional threats\
    \ and solutions on\n   monitoring and session interception.\n   With SRTP, if\
    \ the SBC that performs the latching is actually\n   participating in the SRTP\
    \ key exchange, then it would simply refuse\n   to latch onto a source unless\
    \ it can authenticate it.  Failing to\n   implement and use SRTP would represent\
    \ a serious threat to users\n   connecting from behind Carrier-Grade NATs [RFC6888]\
    \ and is considered\n   a harmful practice.\n   For SIP clients, HNT is usually\
    \ transparent in the sense that the SIP\n   UA does not know it occurs.  In certain\
    \ cases, it may be detectable,\n   such as when ICE is supported by the SIP UA\
    \ and the SBC modifies the\n   default connection address and media port numbers\
    \ in SDP, thereby\n   disabling ICE due to the mismatch condition.  Even in that\
    \ case,\n   however, the SIP UA only knows that a middlebox is relaying media\
    \ but\n   not necessarily that it is performing latching/HNT.\n   In order to\
    \ perform HNT, the SBC has to modify SDP to and from the\n   SIP UA behind a NAT;\
    \ thus, the SIP UA cannot use S/MIME [RFC5751],\n   and it cannot sign a sending\
    \ request, or verify a received request\n   using the SIP Identity mechanism [RFC4474]\
    \ unless the SBC re-signs\n   the request.  However, neither S/MIME nor SIP Identity\
    \ are widely\n   deployed; thus, not being able to sign/verify requests appears\
    \ not to\n   be a concern at this time.\n   From a privacy perspective, media\
    \ relaying is sometimes seen as a way\n   of protecting one's IP address and not\
    \ revealing it to the remote\n   party.  That kind of IP address masking is often\
    \ perceived as\n   important.  However, this is no longer an exclusive advantage\
    \ of HNT\n   since it can also be accomplished by client-controlled relaying\n\
    \   mechanisms such as TURN [RFC5766] if the client explicitly wishes to\n   do\
    \ so.\n"
- title: 6.  Acknowledgements
  contents:
  - "6.  Acknowledgements\n   The authors would like to thank Flemming Andreasen,\
    \ Miguel A.\n   Garcia, Alissa Cooper, Vijay K. Gurbani, Ari Keranen, and Paul\n\
    \   Kyzivat for their reviews and suggestions on improving this document.\n"
- title: 7.  References
  contents:
  - '7.  References

    '
- title: 7.1.  Normative References
  contents:
  - "7.1.  Normative References\n   [RFC3261]  Rosenberg, J., Schulzrinne, H., Camarillo,\
    \ G., Johnston,\n              A., Peterson, J., Sparks, R., Handley, M., and\
    \ E.\n              Schooler, \"SIP: Session Initiation Protocol\", RFC 3261,\n\
    \              June 2002.\n   [RFC3264]  Rosenberg, J. and H. Schulzrinne, \"\
    An Offer/Answer Model\n              with Session Description Protocol (SDP)\"\
    , RFC 3264, June\n              2002.\n   [RFC3711]  Baugher, M., McGrew, D.,\
    \ Naslund, M., Carrara, E., and K.\n              Norrman, \"The Secure Real-time\
    \ Transport Protocol (SRTP)\",\n              RFC 3711, March 2004.\n   [RFC4566]\
    \  Handley, M., Jacobson, V., and C. Perkins, \"SDP: Session\n              Description\
    \ Protocol\", RFC 4566, July 2006.\n   [RFC4787]  Audet, F. and C. Jennings, \"\
    Network Address Translation\n              (NAT) Behavioral Requirements for Unicast\
    \ UDP\", BCP 127,\n              RFC 4787, January 2007.\n   [RFC5853]  Hautakorpi,\
    \ J., Camarillo, G., Penfield, R., Hawrylyshen,\n              A., and M. Bhatia,\
    \ \"Requirements from Session Initiation\n              Protocol (SIP) Session\
    \ Border Control (SBC) Deployments\",\n              RFC 5853, April 2010.\n \
    \  [RFC6120]  Saint-Andre, P., \"Extensible Messaging and Presence\n         \
    \     Protocol (XMPP): Core\", RFC 6120, March 2011.\n   [XEP-0177]\n        \
    \      Beda, J., Saint-Andre, P., Hildebrand, J., and S. Egan,\n             \
    \ \"XEP-0177: Jingle Raw UDP Transport Method\", XSF XEP 0177,\n             \
    \ December 2009.\n"
- title: 7.2.  Informative References
  contents:
  - "7.2.  Informative References\n   [H.323]    International Telecommunication Union,\
    \ \"Packet-based\n              multimedia communication systems\", ITU-T Recommendation\n\
    \              H.323, December 2009.\n   [RFC3424]  Daigle, L. and IAB, \"IAB\
    \ Considerations for UNilateral\n              Self-Address Fixing (UNSAF) Across\
    \ Network Address\n              Translation\", RFC 3424, November 2002.\n   [RFC3435]\
    \  Andreasen, F. and B. Foster, \"Media Gateway Control\n              Protocol\
    \ (MGCP) Version 1.0\", RFC 3435, January 2003.\n   [RFC3489]  Rosenberg, J.,\
    \ Weinberger, J., Huitema, C., and R. Mahy,\n              \"STUN - Simple Traversal\
    \ of User Datagram Protocol (UDP)\n              Through Network Address Translators\
    \ (NATs)\", RFC 3489,\n              March 2003.\n   [RFC4474]  Peterson, J. and\
    \ C. Jennings, \"Enhancements for\n              Authenticated Identity Management\
    \ in the Session\n              Initiation Protocol (SIP)\", RFC 4474, August\
    \ 2006.\n   [RFC5125]  Taylor, T., \"Reclassification of RFC 3525 to Historic\"\
    ,\n              RFC 5125, February 2008.\n   [RFC5245]  Rosenberg, J., \"Interactive\
    \ Connectivity Establishment\n              (ICE): A Protocol for Network Address\
    \ Translator (NAT)\n              Traversal for Offer/Answer Protocols\", RFC\
    \ 5245, April\n              2010.\n   [RFC5389]  Rosenberg, J., Mahy, R., Matthews,\
    \ P., and D. Wing,\n              \"Session Traversal Utilities for NAT (STUN)\"\
    , RFC 5389,\n              October 2008.\n   [RFC5751]  Ramsdell, B. and S. Turner,\
    \ \"Secure/Multipurpose Internet\n              Mail Extensions (S/MIME) Version\
    \ 3.2 Message\n              Specification\", RFC 5751, January 2010.\n   [RFC5766]\
    \  Mahy, R., Matthews, P., and J. Rosenberg, \"Traversal Using\n             \
    \ Relays around NAT (TURN): Relay Extensions to Session\n              Traversal\
    \ Utilities for NAT (STUN)\", RFC 5766, April 2010.\n   [RFC6888]  Perreault,\
    \ S., Yamagata, I., Miyakawa, S., Nakagawa, A.,\n              and H. Ashida,\
    \ \"Common Requirements for Carrier-Grade NATs\n              (CGNs)\", BCP 127,\
    \ RFC 6888, April 2013.\n   [TCP-SPLICING]\n              Maltz, D. and P. Bhagwat,\
    \ \"TCP Splice for application\n              layer proxy performance\", Journal\
    \ of High Speed Networks\n              Vol. 8, No. 3, 1999, pp. 225-240, March\
    \ 1999.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Emil Ivov\n   Jitsi\n   Strasbourg  67000\n   France\n\
    \   EMail: emcho@jitsi.org\n   Hadriel Kaplan\n   Oracle\n   100 Crosby Drive\n\
    \   Bedford, MA  01730\n   USA\n   EMail: hadrielk@yahoo.com\n   Dan Wing\n  \
    \ Cisco Systems, Inc.\n   170 West Tasman Drive\n   San Jose, CA  95134\n   USA\n\
    \   EMail: dwing@cisco.com\n"
