- title: __initial_text__
  contents:
  - '            Security Architecture for the Internet Protocol

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (1998).  All Rights Reserved.\n"
- title: Table of Contents
  contents:
  - 'Table of Contents

    '
- title: 1. Introduction........................................................3
  contents:
  - "1. Introduction........................................................3\n  1.1\
    \ Summary of Contents of Document..................................3\n  1.2 Audience.........................................................3\n\
    \  1.3 Related Documents................................................4\n"
- title: 2. Design Objectives...................................................4
  contents:
  - "2. Design Objectives...................................................4\n  2.1\
    \ Goals/Objectives/Requirements/Problem Description................4\n  2.2 Caveats\
    \ and Assumptions..........................................5\n"
- title: 3. System Overview.....................................................5
  contents:
  - "3. System Overview.....................................................5\n  3.1\
    \ What IPsec Does..................................................6\n  3.2 How\
    \ IPsec Works..................................................6\n  3.3 Where\
    \ IPsec May Be Implemented...................................7\n"
- title: 4. Security Associations...............................................8
  contents:
  - "4. Security Associations...............................................8\n  4.1\
    \ Definition and Scope.............................................8\n  4.2 Security\
    \ Association Functionality..............................10\n  4.3 Combining Security\
    \ Associations.................................11\n  4.4 Security Association\
    \ Databases..................................13\n     4.4.1 The Security Policy\
    \ Database (SPD).........................14\n     4.4.2 Selectors..................................................17\n\
    \     4.4.3 Security Association Database (SAD)........................21\n  4.5\
    \ Basic Combinations of Security Associations.....................24\n  4.6 SA\
    \ and Key Management...........................................26\n     4.6.1\
    \ Manual Techniques..........................................27\n     4.6.2 Automated\
    \ SA and Key Management............................27\n     4.6.3 Locating a Security\
    \ Gateway................................28\n  4.7 Security Associations and Multicast.............................29\n"
- title: 5. IP Traffic Processing..............................................30
  contents:
  - "5. IP Traffic Processing..............................................30\n  5.1\
    \ Outbound IP Traffic Processing..................................30\n     5.1.1\
    \ Selecting and Using an SA or SA Bundle.....................30\n     5.1.2 Header\
    \ Construction for Tunnel Mode........................31\n        5.1.2.1 IPv4\
    \ -- Header Construction for Tunnel Mode...........31\n        5.1.2.2 IPv6 --\
    \ Header Construction for Tunnel Mode...........32\n  5.2 Processing Inbound IP\
    \ Traffic...................................33\n     5.2.1 Selecting and Using\
    \ an SA or SA Bundle.....................33\n     5.2.2 Handling of AH and ESP\
    \ tunnels.............................34\n"
- title: 6. ICMP Processing (relevant to IPsec)................................35
  contents:
  - "6. ICMP Processing (relevant to IPsec)................................35\n  6.1\
    \ PMTU/DF Processing..............................................36\n     6.1.1\
    \ DF Bit.....................................................36\n     6.1.2 Path\
    \ MTU Discovery (PMTU)..................................36\n        6.1.2.1 Propagation\
    \ of PMTU...................................36\n        6.1.2.2 Calculation of\
    \ PMTU...................................37\n        6.1.2.3 Granularity of PMTU\
    \ Processing........................37\n        6.1.2.4 PMTU Aging............................................38\n"
- title: 7. Auditing...........................................................39
  contents:
  - '7. Auditing...........................................................39

    '
- title: 8. Use in Systems Supporting Information Flow Security................39
  contents:
  - "8. Use in Systems Supporting Information Flow Security................39\n  8.1\
    \ Relationship Between Security Associations and Data Sensitivity.40\n  8.2 Sensitivity\
    \ Consistency Checking................................40\n  8.3 Additional MLS\
    \ Attributes for Security Association Databases....41\n  8.4 Additional Inbound\
    \ Processing Steps for MLS Networking..........41\n  8.5 Additional Outbound Processing\
    \ Steps for MLS Networking.........41\n  8.6 Additional MLS Processing for Security\
    \ Gateways.................42\n"
- title: 9. Performance Issues.................................................42
  contents:
  - '9. Performance Issues.................................................42

    '
- title: 10. Conformance Requirements..........................................43
  contents:
  - '10. Conformance Requirements..........................................43

    '
- title: 11. Security Considerations...........................................43
  contents:
  - '11. Security Considerations...........................................43

    '
- title: 12. Differences from RFC 1825.........................................43
  contents:
  - '12. Differences from RFC 1825.........................................43

    '
- title: Acknowledgements......................................................44
  contents:
  - 'Acknowledgements......................................................44

    '
- title: Appendix A -- Glossary................................................45
  contents:
  - 'Appendix A -- Glossary................................................45

    '
- title: Appendix B -- Analysis/Discussion of PMTU/DF/Fragmentation Issues.....48
  contents:
  - "Appendix B -- Analysis/Discussion of PMTU/DF/Fragmentation Issues.....48\n  B.1\
    \ DF bit..........................................................48\n  B.2 Fragmentation...................................................48\n\
    \  B.3 Path MTU Discovery..............................................52\n  \
    \   B.3.1 Identifying the Originating Host(s)........................53\n    \
    \ B.3.2 Calculation of PMTU........................................55\n     B.3.3\
    \ Granularity of Maintaining PMTU Data.......................56\n     B.3.4 Per\
    \ Socket Maintenance of PMTU Data........................57\n     B.3.5 Delivery\
    \ of PMTU Data to the Transport Layer...............57\n     B.3.6 Aging of PMTU\
    \ Data.........................................57\n"
- title: Appendix C -- Sequence Space Window Code Example......................58
  contents:
  - 'Appendix C -- Sequence Space Window Code Example......................58

    '
- title: Appendix D -- Categorization of ICMP messages.........................60
  contents:
  - 'Appendix D -- Categorization of ICMP messages.........................60

    '
- title: References............................................................63
  contents:
  - 'References............................................................63

    '
- title: Disclaimer............................................................64
  contents:
  - 'Disclaimer............................................................64

    '
- title: Author Information....................................................65
  contents:
  - 'Author Information....................................................65

    '
- title: Full Copyright Statement..............................................66
  contents:
  - 'Full Copyright Statement..............................................66

    '
- title: 1. Introduction
  contents:
  - '1. Introduction

    '
- title: 1.1 Summary of Contents of Document
  contents:
  - "1.1 Summary of Contents of Document\n   This memo specifies the base architecture\
    \ for IPsec compliant\n   systems.  The goal of the architecture is to provide\
    \ various security\n   services for traffic at the IP layer, in both the IPv4\
    \ and IPv6\n   environments.  This document describes the goals of such systems,\n\
    \   their components and how they fit together with each other and into\n   the\
    \ IP environment.  It also describes the security services offered\n   by the\
    \ IPsec protocols, and how these services can be employed in the\n   IP environment.\
    \  This document does not address all aspects of IPsec\n   architecture.  Subsequent\
    \ documents will address additional\n   architectural details of a more advanced\
    \ nature, e.g., use of IPsec\n   in NAT environments and more complete support\
    \ for IP multicast.  The\n   following fundamental components of the IPsec security\
    \ architecture\n   are discussed in terms of their underlying, required functionality.\n\
    \   Additional RFCs (see Section 1.3 for pointers to other documents)\n   define\
    \ the protocols in (a), (c), and (d).\n        a. Security Protocols -- Authentication\
    \ Header (AH) and\n           Encapsulating Security Payload (ESP)\n        b.\
    \ Security Associations -- what they are and how they work,\n           how they\
    \ are managed, associated processing\n        c. Key Management -- manual and\
    \ automatic (The Internet Key\n           Exchange (IKE))\n        d. Algorithms\
    \ for authentication and encryption\n   This document is not an overall Security\
    \ Architecture for the\n   Internet; it addresses security only at the IP layer,\
    \ provided\n   through the use of a combination of cryptographic and protocol\n\
    \   security mechanisms.\n   The keywords MUST, MUST NOT, REQUIRED, SHALL, SHALL\
    \ NOT, SHOULD,\n   SHOULD NOT, RECOMMENDED, MAY, and OPTIONAL, when they appear\
    \ in this\n   document, are to be interpreted as described in RFC 2119 [Bra97].\n"
- title: 1.2 Audience
  contents:
  - "1.2 Audience\n   The target audience for this document includes implementers\
    \ of this\n   IP security technology and others interested in gaining a general\n\
    \   background understanding of this system.  In particular, prospective\n   users\
    \ of this technology (end users or system administrators) are\n   part of the\
    \ target audience.  A glossary is provided as an appendix\n   to help fill in\
    \ gaps in background/vocabulary.  This document assumes\n   that the reader is\
    \ familiar with the Internet Protocol, related\n   networking technology, and\
    \ general security terms and concepts.\n"
- title: 1.3 Related Documents
  contents:
  - "1.3 Related Documents\n   As mentioned above, other documents provide detailed\
    \ definitions of\n   some of the components of IPsec and of their inter-relationship.\n\
    \   They include RFCs on the following topics:\n        a. \"IP Security Document\
    \ Roadmap\" [TDG97] -- a document\n           providing guidelines for specifications\
    \ describing encryption\n           and authentication algorithms used in this\
    \ system.\n        b. security protocols -- RFCs describing the Authentication\n\
    \           Header (AH) [KA98a] and Encapsulating Security Payload (ESP)\n   \
    \        [KA98b] protocols.\n        c. algorithms for authentication and encryption\
    \ -- a separate\n           RFC for each algorithm.\n        d. automatic key\
    \ management -- RFCs on \"The Internet Key\n           Exchange (IKE)\" [HC98],\
    \ \"Internet Security Association and\n           Key Management Protocol (ISAKMP)\"\
    \ [MSST97],\"The OAKLEY Key\n           Determination Protocol\" [Orm97], and\
    \ \"The Internet IP\n           Security Domain of Interpretation for ISAKMP\"\
    \ [Pip98].\n"
- title: 2. Design Objectives
  contents:
  - '2. Design Objectives

    '
- title: 2.1 Goals/Objectives/Requirements/Problem Description
  contents:
  - "2.1 Goals/Objectives/Requirements/Problem Description\n   IPsec is designed to\
    \ provide interoperable, high quality,\n   cryptographically-based security for\
    \ IPv4 and IPv6.  The set of\n   security services offered includes access control,\
    \ connectionless\n   integrity, data origin authentication, protection against\
    \ replays (a\n   form of partial sequence integrity), confidentiality (encryption),\n\
    \   and limited traffic flow confidentiality.  These services are\n   provided\
    \ at the IP layer, offering protection for IP and/or upper\n   layer protocols.\n\
    \   These objectives are met through the use of two traffic security\n   protocols,\
    \ the Authentication Header (AH) and the Encapsulating\n   Security Payload (ESP),\
    \ and through the use of cryptographic key\n   management procedures and protocols.\
    \  The set of IPsec protocols\n   employed in any context, and the ways in which\
    \ they are employed,\n   will be determined by the security and system requirements\
    \ of users,\n   applications, and/or sites/organizations.\n   When these mechanisms\
    \ are correctly implemented and deployed, they\n   ought not to adversely affect\
    \ users, hosts, and other Internet\n   components that do not employ these security\
    \ mechanisms for\n   protection of their traffic.  These mechanisms also are designed\
    \ to\n   be algorithm-independent.  This modularity permits selection of\n   different\
    \ sets of algorithms without affecting the other parts of the\n   implementation.\
    \  For example, different user communities may select\n   different sets of algorithms\
    \ (creating cliques) if required.\n   A standard set of default algorithms is\
    \ specified to facilitate\n   interoperability in the global Internet.  The use\
    \ of these\n   algorithms, in conjunction with IPsec traffic protection and key\n\
    \   management protocols, is intended to permit system and application\n   developers\
    \ to deploy high quality, Internet layer, cryptographic\n   security technology.\n"
- title: 2.2 Caveats and Assumptions
  contents:
  - "2.2 Caveats and Assumptions\n   The suite of IPsec protocols and associated default\
    \ algorithms are\n   designed to provide high quality security for Internet traffic.\n\
    \   However, the security offered by use of these protocols ultimately\n   depends\
    \ on the quality of the their implementation, which is outside\n   the scope of\
    \ this set of standards.  Moreover, the security of a\n   computer system or network\
    \ is a function of many factors, including\n   personnel, physical, procedural,\
    \ compromising emanations, and\n   computer security practices.  Thus IPsec is\
    \ only one part of an\n   overall system security architecture.\n   Finally, the\
    \ security afforded by the use of IPsec is critically\n   dependent on many aspects\
    \ of the operating environment in which the\n   IPsec implementation executes.\
    \  For example, defects in OS security,\n   poor quality of random number sources,\
    \ sloppy system management\n   protocols and practices, etc. can all degrade the\
    \ security provided\n   by IPsec.  As above, none of these environmental attributes\
    \ are\n   within the scope of this or other IPsec standards.\n"
- title: 3. System Overview
  contents:
  - "3. System Overview\n   This section provides a high level description of how\
    \ IPsec works,\n   the components of the system, and how they fit together to\
    \ provide\n   the security services noted above.  The goal of this description\
    \ is\n   to enable the reader to \"picture\" the overall process/system, see how\n\
    \   it fits into the IP environment, and to provide context for later\n   sections\
    \ of this document, which describe each of the components in\n   more detail.\n\
    \   An IPsec implementation operates in a host or a security gateway\n   environment,\
    \ affording protection to IP traffic.  The protection\n   offered is based on\
    \ requirements defined by a Security Policy\n   Database (SPD) established and\
    \ maintained by a user or system\n   administrator, or by an application operating\
    \ within constraints\n   established by either of the above.  In general, packets\
    \ are selected\n   for one of three processing modes based on IP and transport\
    \ layer\n   header information (Selectors, Section 4.4.2) matched against entries\n\
    \   in the database (SPD).  Each packet is either afforded IPsec security\n  \
    \ services, discarded, or allowed to bypass IPsec, based on the\n   applicable\
    \ database policies identified by the Selectors.\n"
- title: 3.1 What IPsec Does
  contents:
  - "3.1 What IPsec Does\n   IPsec provides security services at the IP layer by enabling\
    \ a system\n   to select required security protocols, determine the algorithm(s)\
    \ to\n   use for the service(s), and put in place any cryptographic keys\n   required\
    \ to provide the requested services.  IPsec can be used to\n   protect one or\
    \ more \"paths\" between a pair of hosts, between a pair\n   of security gateways,\
    \ or between a security gateway and a host.  (The\n   term \"security gateway\"\
    \ is used throughout the IPsec documents to\n   refer to an intermediate system\
    \ that implements IPsec protocols.  For\n   example, a router or a firewall implementing\
    \ IPsec is a security\n   gateway.)\n   The set of security services that IPsec\
    \ can provide includes access\n   control, connectionless integrity, data origin\
    \ authentication,\n   rejection of replayed packets (a form of partial sequence\
    \ integrity),\n   confidentiality (encryption), and limited traffic flow\n   confidentiality.\
    \  Because these services are provided at the IP\n   layer, they can be used by\
    \ any higher layer protocol, e.g., TCP, UDP,\n   ICMP, BGP, etc.\n   The IPsec\
    \ DOI also supports negotiation of IP compression [SMPT98],\n   motivated in part\
    \ by the observation that when encryption is employed\n   within IPsec, it prevents\
    \ effective compression by lower protocol\n   layers.\n"
- title: 3.2 How IPsec Works
  contents:
  - "3.2 How IPsec Works\n   IPsec uses two protocols to provide traffic security\
    \ --\n   Authentication Header (AH) and Encapsulating Security Payload (ESP).\n\
    \   Both protocols are described in more detail in their respective RFCs\n   [KA98a,\
    \ KA98b].\n        o The IP Authentication Header (AH) [KA98a] provides\n    \
    \      connectionless integrity, data origin authentication, and an\n        \
    \  optional anti-replay service.\n        o The Encapsulating Security Payload\
    \ (ESP) protocol [KA98b] may\n          provide confidentiality (encryption),\
    \ and limited traffic flow\n          confidentiality.  It also may provide connectionless\n\
    \          integrity, data origin authentication, and an anti-replay\n       \
    \   service.  (One or the other set of these security services\n          must\
    \ be applied whenever ESP is invoked.)\n        o Both AH and ESP are vehicles\
    \ for access control, based on the\n          distribution of cryptographic keys\
    \ and the management of\n          traffic flows relative to these security protocols.\n\
    \   These protocols may be applied alone or in combination with each\n   other\
    \ to provide a desired set of security services in IPv4 and IPv6.\n   Each protocol\
    \ supports two modes of use: transport mode and tunnel\n   mode.  In transport\
    \ mode the protocols provide protection primarily\n   for upper layer protocols;\
    \ in tunnel mode, the protocols are applied\n   to tunneled IP packets.  The differences\
    \ between the two modes are\n   discussed in Section 4.\n   IPsec allows the user\
    \ (or system administrator) to control the\n   granularity at which a security\
    \ service is offered.  For example, one\n   can create a single encrypted tunnel\
    \ to carry all the traffic between\n   two security gateways or a separate encrypted\
    \ tunnel can be created\n   for each TCP connection between each pair of hosts\
    \ communicating\n   across these gateways.  IPsec management must incorporate\
    \ facilities\n   for specifying:\n        o which security services to use and\
    \ in what combinations\n        o the granularity at which a given security protection\
    \ should be\n          applied\n        o the algorithms used to effect cryptographic-based\
    \ security\n   Because these security services use shared secret values\n   (cryptographic\
    \ keys), IPsec relies on a separate set of mechanisms\n   for putting these keys\
    \ in place. (The keys are used for\n   authentication/integrity and encryption\
    \ services.)  This document\n   requires support for both manual and automatic\
    \ distribution of keys.\n   It specifies a specific public-key based approach\
    \ (IKE -- [MSST97,\n   Orm97, HC98]) for automatic key management, but other automated\
    \ key\n   distribution techniques MAY be used.  For example, KDC-based systems\n\
    \   such as Kerberos and other public-key systems such as SKIP could be\n   employed.\n"
- title: 3.3 Where IPsec May Be Implemented
  contents:
  - "3.3 Where IPsec May Be Implemented\n   There are several ways in which IPsec\
    \ may be implemented in a host or\n   in conjunction with a router or firewall\
    \ (to create a security\n   gateway).  Several common examples are provided below:\n\
    \        a. Integration of IPsec into the native IP implementation.  This\n  \
    \         requires access to the IP source code and is applicable to\n       \
    \    both hosts and security gateways.\n        b. \"Bump-in-the-stack\" (BITS)\
    \ implementations, where IPsec is\n           implemented \"underneath\" an existing\
    \ implementation of an IP\n           protocol stack, between the native IP and\
    \ the local network\n           drivers.  Source code access for the IP stack\
    \ is not required\n           in this context, making this implementation approach\n\
    \           appropriate for use with legacy systems.  This approach, when\n  \
    \         it is adopted, is usually employed in hosts.\n        c. The use of\
    \ an outboard crypto processor is a common design\n           feature of network\
    \ security systems used by the military, and\n           of some commercial systems\
    \ as well.  It is sometimes referred\n           to as a \"Bump-in-the-wire\"\
    \ (BITW) implementation.  Such\n           implementations may be designed to\
    \ serve either a host or a\n           gateway (or both).  Usually the BITW device\
    \ is IP\n           addressable.  When supporting a single host, it may be quite\n\
    \           analogous to a BITS implementation, but in supporting a\n        \
    \   router or firewall, it must operate like a security gateway.\n"
- title: 4. Security Associations
  contents:
  - "4. Security Associations\n   This section defines Security Association management\
    \ requirements for\n   all IPv6 implementations and for those IPv4 implementations\
    \ that\n   implement AH, ESP, or both.  The concept of a \"Security Association\"\
    \n   (SA) is fundamental to IPsec.  Both AH and ESP make use of SAs and a\n  \
    \ major function of IKE is the establishment and maintenance of\n   Security Associations.\
    \  All implementations of AH or ESP MUST support\n   the concept of a Security\
    \ Association as described below.  The\n   remainder of this section describes\
    \ various aspects of Security\n   Association management, defining required characteristics\
    \ for SA\n   policy management, traffic processing, and SA management techniques.\n"
- title: 4.1 Definition and Scope
  contents:
  - "4.1 Definition and Scope\n   A Security Association (SA) is a simplex \"connection\"\
    \ that affords\n   security services to the traffic carried by it.  Security services\n\
    \   are afforded to an SA by the use of AH, or ESP, but not both.  If\n   both\
    \ AH and ESP protection is applied to a traffic stream, then two\n   (or more)\
    \ SAs are created to afford protection to the traffic stream.\n   To secure typical,\
    \ bi-directional communication between two hosts, or\n   between two security\
    \ gateways, two Security Associations (one in each\n   direction) are required.\n\
    \   A security association is uniquely identified by a triple consisting\n   of\
    \ a Security Parameter Index (SPI), an IP Destination Address, and a\n   security\
    \ protocol (AH or ESP) identifier.  In principle, the\n   Destination Address\
    \ may be a unicast address, an IP broadcast\n   address, or a multicast group\
    \ address.  However, IPsec SA management\n   mechanisms currently are defined\
    \ only for unicast SAs.  Hence, in the\n   discussions that follow, SAs will be\
    \ described in the context of\n   point-to-point communication, even though the\
    \ concept is applicable\n   in the point-to-multipoint case as well.\n   As noted\
    \ above, two types of SAs are defined: transport mode and\n   tunnel mode.  A\
    \ transport mode SA is a security association between\n   two hosts.  In IPv4,\
    \ a transport mode security protocol header\n   appears immediately after the\
    \ IP header and any options, and before\n   any higher layer protocols (e.g.,\
    \ TCP or UDP).  In IPv6, the security\n   protocol header appears after the base\
    \ IP header and extensions, but\n   may appear before or after destination options,\
    \ and before higher\n   layer protocols.  In the case of ESP, a transport mode\
    \ SA provides\n   security services only for these higher layer protocols, not\
    \ for the\n   IP header or any extension headers preceding the ESP header.  In\
    \ the\n   case of AH, the protection is also extended to selected portions of\n\
    \   the IP header, selected portions of extension headers, and selected\n   options\
    \ (contained in the IPv4 header, IPv6 Hop-by-Hop extension\n   header, or IPv6\
    \ Destination extension headers).  For more details on\n   the coverage afforded\
    \ by AH, see the AH specification [KA98a].\n   A tunnel mode SA is essentially\
    \ an SA applied to an IP tunnel.\n   Whenever either end of a security association\
    \ is a security gateway,\n   the SA MUST be tunnel mode.  Thus an SA between two\
    \ security gateways\n   is always a tunnel mode SA, as is an SA between a host\
    \ and a security\n   gateway.  Note that for the case where traffic is destined\
    \ for a\n   security gateway, e.g., SNMP commands, the security gateway is acting\n\
    \   as a host and transport mode is allowed.  But in that case, the\n   security\
    \ gateway is not acting as a gateway, i.e., not transiting\n   traffic.  Two hosts\
    \ MAY establish a tunnel mode SA between\n   themselves.  The requirement for\
    \ any (transit traffic) SA involving a\n   security gateway to be a tunnel SA\
    \ arises due to the need to avoid\n   potential problems with regard to fragmentation\
    \ and reassembly of\n   IPsec packets, and in circumstances where multiple paths\
    \ (e.g., via\n   different security gateways) exist to the same destination behind\
    \ the\n   security gateways.\n   For a tunnel mode SA, there is an \"outer\" IP\
    \ header that specifies\n   the IPsec processing destination, plus an \"inner\"\
    \ IP header that\n   specifies the (apparently) ultimate destination for the packet.\
    \  The\n   security protocol header appears after the outer IP header, and\n \
    \  before the inner IP header.  If AH is employed in tunnel mode,\n   portions\
    \ of the outer IP header are afforded protection (as above),\n   as well as all\
    \ of the tunneled IP packet (i.e., all of the inner IP\n   header is protected,\
    \ as well as higher layer protocols).  If ESP is\n   employed, the protection\
    \ is afforded only to the tunneled packet, not\n   to the outer header.\n   In\
    \ summary,\n           a) A host MUST support both transport and tunnel mode.\n\
    \           b) A security gateway is required to support only tunnel\n       \
    \       mode.  If it supports transport mode, that should be used\n          \
    \    only when the security gateway is acting as a host, e.g.,\n             \
    \ for network management.\n"
- title: 4.2 Security Association Functionality
  contents:
  - "4.2 Security Association Functionality\n   The set of security services offered\
    \ by an SA depends on the security\n   protocol selected, the SA mode, the endpoints\
    \ of the SA, and on the\n   election of optional services within the protocol.\
    \  For example, AH\n   provides data origin authentication and connectionless\
    \ integrity for\n   IP datagrams (hereafter referred to as just \"authentication\"\
    ).  The\n   \"precision\" of the authentication service is a function of the\n\
    \   granularity of the security association with which AH is employed, as\n  \
    \ discussed in Section 4.4.2, \"Selectors\".\n   AH also offers an anti-replay\
    \ (partial sequence integrity) service at\n   the discretion of the receiver,\
    \ to help counter denial of service\n   attacks.  AH is an appropriate protocol\
    \ to employ when\n   confidentiality is not required (or is not permitted, e.g\
    \ , due to\n   government restrictions on use of encryption).  AH also provides\n\
    \   authentication for selected portions of the IP header, which may be\n   necessary\
    \ in some contexts.  For example, if the integrity of an IPv4\n   option or IPv6\
    \ extension header must be protected en route between\n   sender and receiver,\
    \ AH can provide this service (except for the\n   non-predictable but mutable\
    \ parts of the IP header.)\n   ESP optionally provides confidentiality for traffic.\
    \  (The strength\n   of the confidentiality service depends in part, on the encryption\n\
    \   algorithm employed.)  ESP also may optionally provide authentication\n   (as\
    \ defined above).  If authentication is negotiated for an ESP SA,\n   the receiver\
    \ also may elect to enforce an anti-replay service with\n   the same features\
    \ as the AH anti-replay service.  The scope of the\n   authentication offered\
    \ by ESP is narrower than for AH, i.e., the IP\n   header(s) \"outside\" the ESP\
    \ header is(are) not protected.  If only\n   the upper layer protocols need to\
    \ be authenticated, then ESP\n   authentication is an appropriate choice and is\
    \ more space efficient\n   than use of AH encapsulating ESP.  Note that although\
    \ both\n   confidentiality and authentication are optional, they cannot both be\n\
    \   omitted. At least one of them MUST be selected.\n   If confidentiality service\
    \ is selected, then an ESP (tunnel mode) SA\n   between two security gateways\
    \ can offer partial traffic flow\n   confidentiality.  The use of tunnel mode\
    \ allows the inner IP headers\n   to be encrypted, concealing the identities of\
    \ the (ultimate) traffic\n   source and destination.  Moreover, ESP payload padding\
    \ also can be\n   invoked to hide the size of the packets, further concealing\
    \ the\n   external characteristics of the traffic.  Similar traffic flow\n   confidentiality\
    \ services may be offered when a mobile user is\n   assigned a dynamic IP address\
    \ in a dialup context, and establishes a\n   (tunnel mode) ESP SA to a corporate\
    \ firewall (acting as a security\n   gateway).  Note that fine granularity SAs\
    \ generally are more\n   vulnerable to traffic analysis than coarse granularity\
    \ ones which are\n   carrying traffic from many subscribers.\n"
- title: 4.3 Combining Security Associations
  contents:
  - "4.3 Combining Security Associations\n   The IP datagrams transmitted over an\
    \ individual SA are afforded\n   protection by exactly one security protocol,\
    \ either AH or ESP, but\n   not both.  Sometimes a security policy may call for\
    \ a combination of\n   services for a particular traffic flow that is not achievable\
    \ with a\n   single SA.  In such instances it will be necessary to employ multiple\n\
    \   SAs to implement the required security policy.  The term \"security\n   association\
    \ bundle\" or \"SA bundle\" is applied to a sequence of SAs\n   through which\
    \ traffic must be processed to satisfy a security policy.\n   The order of the\
    \ sequence is defined by the policy.  (Note that the\n   SAs that comprise a bundle\
    \ may terminate at different endpoints. For\n   example, one SA may extend between\
    \ a mobile host and a security\n   gateway and a second, nested SA may extend\
    \ to a host behind the\n   gateway.)\n   Security associations may be combined\
    \ into bundles in two ways:\n   transport adjacency and iterated tunneling.\n\
    \           o Transport adjacency refers to applying more than one\n         \
    \    security protocol to the same IP datagram, without invoking\n           \
    \  tunneling.  This approach to combining AH and ESP allows\n             for\
    \ only one level of combination; further nesting yields\n             no added\
    \ benefit (assuming use of adequately strong\n             algorithms in each\
    \ protocol) since the processing is\n             performed at one IPsec instance\
    \ at the (ultimate)\n             destination.\n             Host 1 --- Security\
    \ ---- Internet -- Security --- Host 2\n              | |        Gwy 1       \
    \               Gwy 2        | |\n              | |                          \
    \                      | |\n              | -----Security Association 1 (ESP transport)-------\
    \ |\n              |                                                    |\n  \
    \            -------Security Association 2 (AH transport)----------\n        \
    \   o Iterated tunneling refers to the application of multiple\n             layers\
    \ of security protocols effected through IP tunneling.\n             This approach\
    \ allows for multiple levels of nesting, since\n             each tunnel can originate\
    \ or terminate at a different IPsec\n             site along the path.  No special\
    \ treatment is expected for\n             ISAKMP traffic at intermediate security\
    \ gateways other than\n             what can be specified through appropriate\
    \ SPD entries (See\n             Case 3 in Section 4.5)\n             There are\
    \ 3 basic cases of iterated tunneling -- support is\n             required only\
    \ for cases 2 and 3.:\n             1. both endpoints for the SAs are the same\
    \ -- The inner and\n                outer tunnels could each be either AH or ESP,\
    \ though it\n                is unlikely that Host 1 would specify both to be\
    \ the\n                same, i.e., AH inside of AH or ESP inside of ESP.\n   \
    \             Host 1 --- Security ---- Internet -- Security --- Host 2\n     \
    \            | |        Gwy 1                      Gwy 2        | |\n        \
    \         | |                                                | |\n           \
    \      | -------Security Association 1 (tunnel)---------- | |\n              \
    \   |                                                    |\n                 ---------Security\
    \ Association 2 (tunnel)--------------\n             2. one endpoint of the SAs\
    \ is the same -- The inner and\n                uter tunnels could each be either\
    \ AH or ESP.\n                Host 1 --- Security ---- Internet -- Security ---\
    \ Host 2\n                 | |        Gwy 1                      Gwy 2       \
    \  |\n                 | |                                     |           |\n\
    \                 | ----Security Association 1 (tunnel)----           |\n    \
    \             |                                                   |\n        \
    \         ---------Security Association 2 (tunnel)-------------\n            \
    \ 3. neither endpoint is the same -- The inner and outer\n                tunnels\
    \ could each be either AH or ESP.\n                Host 1 --- Security ---- Internet\
    \ -- Security --- Host 2\n                 |          Gwy 1                  \
    \    Gwy 2         |\n                 |            |                        \
    \  |           |\n                 |            --Security Assoc 1 (tunnel)- \
    \          |\n                 |                                             \
    \      |\n                 -----------Security Association 2 (tunnel)-----------\n\
    \   These two approaches also can be combined, e.g., an SA bundle could\n   be\
    \ constructed from one tunnel mode SA and one or two transport mode\n   SAs, applied\
    \ in sequence.  (See Section 4.5 \"Basic Combinations of\n   Security Associations.\"\
    ) Note that nested tunnels can also occur\n   where neither the source nor the\
    \ destination endpoints of any of the\n   tunnels are the same.  In that case,\
    \ there would be no host or\n   security gateway with a bundle corresponding to\
    \ the nested tunnels.\n   For transport mode SAs, only one ordering of security\
    \ protocols seems\n   appropriate.  AH is applied to both the upper layer protocols\
    \ and\n   (parts of) the IP header.  Thus if AH is used in a transport mode, in\n\
    \   conjunction with ESP, AH SHOULD appear as the first header after IP,\n   prior\
    \ to the appearance of ESP.  In that context, AH is applied to\n   the ciphertext\
    \ output of ESP.  In contrast, for tunnel mode SAs, one\n   can imagine uses for\
    \ various orderings of AH and ESP.  The required\n   set of SA bundle types that\
    \ MUST be supported by a compliant IPsec\n   implementation is described in Section\
    \ 4.5.\n"
- title: 4.4 Security Association Databases
  contents:
  - "4.4 Security Association Databases\n   Many of the details associated with processing\
    \ IP traffic in an IPsec\n   implementation are largely a local matter, not subject\
    \ to\n   standardization.  However, some external aspects of the processing\n\
    \   must be standardized, to ensure interoperability and to provide a\n   minimum\
    \ management capability that is essential for productive use of\n   IPsec.  This\
    \ section describes a general model for processing IP\n   traffic relative to\
    \ security associations, in support of these\n   interoperability and functionality\
    \ goals.  The model described below\n   is nominal; compliant implementations\
    \ need not match details of this\n   model as presented, but the external behavior\
    \ of such implementations\n   must be mappable to the externally observable characteristics\
    \ of this\n   model.\n   There are two nominal databases in this model: the Security\
    \ Policy\n   Database and the Security Association Database.  The former specifies\n\
    \   the policies that determine the disposition of all IP traffic inbound\n  \
    \ or outbound from a host, security gateway, or BITS or BITW IPsec\n   implementation.\
    \  The latter database contains parameters that are\n   associated with each (active)\
    \ security association.  This section\n   also defines the concept of a Selector,\
    \ a set of IP and upper layer\n   protocol field values that is used by the Security\
    \ Policy Database to\n   map traffic to a policy, i.e., an SA (or SA bundle).\n\
    \   Each interface for which IPsec is enabled requires nominally separate\n  \
    \ inbound vs. outbound databases (SAD and SPD), because of the\n   directionality\
    \ of many of the fields that are used as selectors.\n   Typically there is just\
    \ one such interface, for a host or security\n   gateway (SG).  Note that an SG\
    \ would always have at least 2\n   interfaces, but the \"internal\" one to the\
    \ corporate net, usually\n   would not have IPsec enabled and so only one pair\
    \ of SADs and one\n   pair of SPDs would be needed.  On the other hand, if a host\
    \ had\n   multiple interfaces or an SG had multiple external interfaces, it\n\
    \   might be necessary to have separate SAD and SPD pairs for each\n   interface.\n"
- title: 4.4.1 The Security Policy Database (SPD)
  contents:
  - "4.4.1 The Security Policy Database (SPD)\n   Ultimately, a security association\
    \ is a management construct used to\n   enforce a security policy in the IPsec\
    \ environment.  Thus an\n   essential element of SA processing is an underlying\
    \ Security Policy\n   Database (SPD) that specifies what services are to be offered\
    \ to IP\n   datagrams and in what fashion.  The form of the database and its\n\
    \   interface are outside the scope of this specification.  However, this\n  \
    \ section does specify certain minimum management functionality that\n   must\
    \ be provided, to allow a user or system administrator to control\n   how IPsec\
    \ is applied to traffic transmitted or received by a host or\n   transiting a\
    \ security gateway.\n   The SPD must be consulted during the processing of all\
    \ traffic\n   (INBOUND and OUTBOUND), including non-IPsec traffic.  In order to\n\
    \   support this, the SPD requires distinct entries for inbound and\n   outbound\
    \ traffic.  One can think of this as separate SPDs (inbound\n   vs.  outbound).\
    \  In addition, a nominally separate SPD must be\n   provided for each IPsec-enabled\
    \ interface.\n   An SPD must discriminate among traffic that is afforded IPsec\n\
    \   protection and traffic that is allowed to bypass IPsec.  This applies\n  \
    \ to the IPsec protection to be applied by a sender and to the IPsec\n   protection\
    \ that must be present at the receiver.  For any outbound or\n   inbound datagram,\
    \ three processing choices are possible: discard,\n   bypass IPsec, or apply IPsec.\
    \  The first choice refers to traffic\n   that is not allowed to exit the host,\
    \ traverse the security gateway,\n   or be delivered to an application at all.\
    \  The second choice refers\n   to traffic that is allowed to pass without additional\
    \ IPsec\n   protection.  The third choice refers to traffic that is afforded\n\
    \   IPsec protection, and for such traffic the SPD must specify the\n   security\
    \ services to be provided, protocols to be employed,\n   algorithms to be used,\
    \ etc.\n   For every IPsec implementation, there MUST be an administrative\n \
    \  interface that allows a user or system administrator to manage the\n   SPD.\
    \  Specifically, every inbound or outbound packet is subject to\n   processing\
    \ by IPsec and the SPD must specify what action will be\n   taken in each case.\
    \  Thus the administrative interface must allow the\n   user (or system administrator)\
    \ to specify the security processing to\n   be applied to any packet entering\
    \ or exiting the system, on a packet\n   by packet basis.  (In a host IPsec implementation\
    \ making use of a\n   socket interface, the SPD may not need to be consulted on\
    \ a per\n   packet basis, but the effect is still the same.)  The management\n\
    \   interface for the SPD MUST allow creation of entries consistent with\n   the\
    \ selectors defined in Section 4.4.2, and MUST support (total)\n   ordering of\
    \ these entries.  It is expected that through the use of\n   wildcards in various\
    \ selector fields, and because all packets on a\n   single UDP or TCP connection\
    \ will tend to match a single SPD entry,\n   this requirement will not impose\
    \ an unreasonably detailed level of\n   SPD specification.  The selectors are\
    \ analogous to what are found in\n   a stateless firewall or filtering router\
    \ and which are currently\n   manageable this way.\n   In host systems, applications\
    \ MAY be allowed to select what security\n   processing is to be applied to the\
    \ traffic they generate and consume.\n   (Means of signalling such requests to\
    \ the IPsec implementation are\n   outside the scope of this standard.)  However,\
    \ the system\n   administrator MUST be able to specify whether or not a user or\n\
    \   application can override (default) system policies.  Note that\n   application\
    \ specified policies may satisfy system requirements, so\n   that the system may\
    \ not need to do additional IPsec processing beyond\n   that needed to meet an\
    \ application's requirements.  The form of the\n   management interface is not\
    \ specified by this document and may differ\n   for hosts vs. security gateways,\
    \ and within hosts the interface may\n   differ for socket-based vs.  BITS implementations.\
    \  However, this\n   document does specify a standard set of SPD elements that\
    \ all IPsec\n   implementations MUST support.\n   The SPD contains an ordered\
    \ list of policy entries.  Each policy\n   entry is keyed by one or more selectors\
    \ that define the set of IP\n   traffic encompassed by this policy entry.  (The\
    \ required selector\n   types are defined in Section 4.4.2.)  These define the\
    \ granularity of\n   policies or SAs.  Each entry includes an indication of whether\n\
    \   traffic matching this policy will be bypassed, discarded, or subject\n   to\
    \ IPsec processing.  If IPsec processing is to be applied, the entry\n   includes\
    \ an SA (or SA bundle) specification, listing the IPsec\n   protocols, modes,\
    \ and algorithms to be employed, including any\n   nesting requirements.  For\
    \ example, an entry may call for all\n   matching traffic to be protected by ESP\
    \ in transport mode using\n   3DES-CBC with an explicit IV, nested inside of AH\
    \ in tunnel mode\n   using HMAC/SHA-1.  For each selector, the policy entry specifies\
    \ how\n   to derive the corresponding values for a new Security Association\n\
    \   Database (SAD, see Section 4.4.3) entry from those in the SPD and the\n  \
    \ packet (Note that at present, ranges are only supported for IP\n   addresses;\
    \ but wildcarding can be expressed for all selectors):\n           a. use the\
    \ value in the packet itself -- This will limit use\n              of the SA to\
    \ those packets which have this packet's value\n              for the selector\
    \ even if the selector for the policy entry\n              has a range of allowed\
    \ values or a wildcard for this\n              selector.\n           b. use the\
    \ value associated with the policy entry -- If this\n              were to be\
    \ just a single value, then there would be no\n              difference between\
    \ (b) and (a).  However, if the allowed\n              values for the selector\
    \ are a range (for IP addresses) or\n              wildcard, then in the case\
    \ of a range,(b) would enable use\n              of the SA by any packet with\
    \ a selector value within the\n              range not just by packets with the\
    \ selector value of the\n              packet that triggered the creation of the\
    \ SA.  In the case\n              of a wildcard, (b) would allow use of the SA\
    \ by packets\n              with any value for this selector.\n   For example,\
    \ suppose there is an SPD entry where the allowed value\n   for source address\
    \ is any of a range of hosts (192.168.2.1 to\n   192.168.2.10).  And suppose that\
    \ a packet is to be sent that has a\n   source address of 192.168.2.3.  The value\
    \ to be used for the SA could\n   be any of the sample values below depending\
    \ on what the policy entry\n   for this selector says is the source of the selector\
    \ value:\n           source for the  example of\n           value to be     new\
    \ SAD\n           used in the SA  selector value\n           --------------- ------------\n\
    \           a. packet       192.168.2.3 (one host)\n           b. SPD entry  \
    \  192.168.2.1 to 192.168.2.10 (range of hosts)\n   Note that if the SPD entry\
    \ had an allowed value of wildcard for the\n   source address, then the SAD selector\
    \ value could be wildcard (any\n   host).  Case (a) can be used to prohibit sharing,\
    \ even among packets\n   that match the same SPD entry.\n   As described below\
    \ in Section 4.4.3, selectors may include \"wildcard\"\n   entries and hence the\
    \ selectors for two entries may overlap.  (This\n   is analogous to the overlap\
    \ that arises with ACLs or filter entries\n   in routers or packet filtering firewalls.)\
    \  Thus, to ensure\n   consistent, predictable processing, SPD entries MUST be\
    \ ordered and\n   the SPD MUST always be searched in the same order, so that the\
    \ first\n   matching entry is consistently selected.  (This requirement is\n \
    \  necessary as the effect of processing traffic against SPD entries\n   must\
    \ be deterministic, but there is no way to canonicalize SPD\n   entries given\
    \ the use of wildcards for some selectors.)  More detail\n   on matching of packets\
    \ against SPD entries is provided in Section 5.\n   Note that if ESP is specified,\
    \ either (but not both) authentication\n   or encryption can be omitted.  So it\
    \ MUST be possible to configure\n   the SPD value for the authentication or encryption\
    \ algorithms to be\n   \"NULL\".  However, at least one of these services MUST\
    \ be selected,\n   i.e., it MUST NOT be possible to configure both of them as\
    \ \"NULL\".\n   The SPD can be used to map traffic to specific SAs or SA bundles.\n\
    \   Thus it can function both as the reference database for security\n   policy\
    \ and as the map to existing SAs (or SA bundles).  (To\n   accommodate the bypass\
    \ and discard policies cited above, the SPD also\n   MUST provide a means of mapping\
    \ traffic to these functions, even\n   though they are not, per se, IPsec processing.)\
    \  The way in which the\n   SPD operates is different for inbound vs. outbound\
    \ traffic and it\n   also may differ for host vs.  security gateway, BITS, and\
    \ BITW\n   implementations.  Sections 5.1 and 5.2 describe the use of the SPD\n\
    \   for outbound and inbound processing, respectively.\n   Because a security\
    \ policy may require that more than one SA be\n   applied to a specified set of\
    \ traffic, in a specific order, the\n   policy entry in the SPD must preserve\
    \ these ordering requirements,\n   when present.  Thus, it must be possible for\
    \ an IPsec implementation\n   to determine that an outbound or inbound packet\
    \ must be processed\n   thorough a sequence of SAs.  Conceptually, for outbound\
    \ processing,\n   one might imagine links (to the SAD) from an SPD entry for which\n\
    \   there are active SAs, and each entry would consist of either a single\n  \
    \ SA or an ordered list of SAs that comprise an SA bundle.  When a\n   packet\
    \ is matched against an SPD entry and there is an existing SA or\n   SA bundle\
    \ that can be used to carry the traffic, the processing of\n   the packet is controlled\
    \ by the SA or SA bundle entry on the list.\n   For an inbound IPsec packet for\
    \ which multiple IPsec SAs are to be\n   applied, the lookup based on destination\
    \ address, IPsec protocol, and\n   SPI should identify a single SA.\n   The SPD\
    \ is used to control the flow of ALL traffic through an IPsec\n   system, including\
    \ security and key management traffic (e.g., ISAKMP)\n   from/to entities behind\
    \ a security gateway.  This means that ISAKMP\n   traffic must be explicitly accounted\
    \ for in the SPD, else it will be\n   discarded.  Note that a security gateway\
    \ could prohibit traversal of\n   encrypted packets in various ways, e.g., having\
    \ a DISCARD entry in\n   the SPD for ESP packets or providing proxy key exchange.\
    \  In the\n   latter case, the traffic would be internally routed to the key\n\
    \   management module in the security gateway.\n"
- title: 4.4.2  Selectors
  contents:
  - "4.4.2  Selectors\n   An SA (or SA bundle) may be fine-grained or coarse-grained,\
    \ depending\n   on the selectors used to define the set of traffic for the SA.\
    \  For\n   example, all traffic between two hosts may be carried via a single\n\
    \   SA, and afforded a uniform set of security services.  Alternatively,\n   traffic\
    \ between a pair of hosts might be spread over multiple SAs,\n   depending on\
    \ the applications being used (as defined by the Next\n   Protocol and Port fields),\
    \ with different security services offered\n   by different SAs.  Similarly, all\
    \ traffic between a pair of security\n   gateways could be carried on a single\
    \ SA, or one SA could be assigned\n   for each communicating host pair.  The following\
    \ selector parameters\n   MUST be supported for SA management to facilitate control\
    \ of SA\n   granularity.  Note that in the case of receipt of a packet with an\n\
    \   ESP header, e.g., at an encapsulating security gateway or BITW\n   implementation,\
    \ the transport layer protocol, source/destination\n   ports, and Name (if present)\
    \ may be \"OPAQUE\", i.e., inaccessible\n   because of encryption or fragmentation.\
    \  Note also that both Source\n   and Destination addresses should either be IPv4\
    \ or IPv6.\n      - Destination IP Address (IPv4 or IPv6): this may be a single\
    \ IP\n        address (unicast, anycast, broadcast (IPv4 only), or multicast\n\
    \        group), a range of addresses (high and low values (inclusive),\n    \
    \    address + mask, or a wildcard address.  The last three are used\n       \
    \ to support more than one destination system sharing the same SA\n        (e.g.,\
    \ behind a security gateway). Note that this selector is\n        conceptually\
    \ different from the \"Destination IP Address\" field\n        in the <Destination\
    \ IP Address, IPsec Protocol, SPI> tuple used\n        to uniquely identify an\
    \ SA.  When a tunneled packet arrives at\n        the tunnel endpoint, its SPI/Destination\
    \ address/Protocol are\n        used to look up the SA for this packet in the\
    \ SAD.  This\n        destination address comes from the encapsulating IP header.\n\
    \        Once the packet has been processed according to the tunnel SA\n     \
    \   and has come out of the tunnel, its selectors are \"looked up\" in\n     \
    \   the Inbound SPD.  The Inbound SPD has a selector called\n        destination\
    \ address.  This IP destination address is the one in\n        the inner (encapsulated)\
    \ IP header.  In the case of a\n        transport'd packet, there will be only\
    \ one IP header and this\n        ambiguity does not exist.  [REQUIRED for all\
    \ implementations]\n      - Source IP Address(es) (IPv4 or IPv6): this may be\
    \ a single IP\n        address (unicast, anycast, broadcast (IPv4 only), or multicast\n\
    \        group), range of addresses (high and low values inclusive),\n       \
    \ address + mask, or a wildcard address.  The last three are used\n        to\
    \ support more than one source system sharing the same SA\n        (e.g., behind\
    \ a security gateway or in a multihomed host).\n        [REQUIRED for all implementations]\n\
    \      - Name: There are 2 cases (Note that these name forms are\n        supported\
    \ in the IPsec DOI.)\n                1. User ID\n                    a. a fully\
    \ qualified user name string (DNS), e.g.,\n                       mozart@foo.bar.com\n\
    \                    b. X.500 distinguished name, e.g., C = US, SP = MA,\n   \
    \                    O = GTE Internetworking, CN = Stephen T. Kent.\n        \
    \        2. System name (host, security gateway, etc.)\n                    a.\
    \ a fully qualified DNS name, e.g., foo.bar.com\n                    b. X.500\
    \ distinguished name\n                    c. X.500 general name\n        NOTE:\
    \ One of the possible values of this selector is \"OPAQUE\".\n        [REQUIRED\
    \ for the following cases.  Note that support for name\n        forms other than\
    \ addresses is not required for manually keyed\n        SAs.\n               \
    \ o User ID\n                    - native host implementations\n             \
    \       - BITW and BITS implementations acting as HOSTS\n                    \
    \  with only one user\n                    - security gateway implementations\
    \ for INBOUND\n                      processing.\n                o System names\
    \ -- all implementations]\n      - Data sensitivity level: (IPSO/CIPSO labels)\n\
    \        [REQUIRED for all systems providing information flow security as\n  \
    \      per Section 8, OPTIONAL for all other systems.]\n      - Transport Layer\
    \ Protocol: Obtained from the IPv4 \"Protocol\" or\n        the IPv6 \"Next Header\"\
    \ fields.  This may be an individual\n        protocol number.  These packet fields\
    \ may not contain the\n        Transport Protocol due to the presence of IP extension\
    \ headers,\n        e.g., a Routing Header, AH, ESP, Fragmentation Header,\n \
    \       Destination Options, Hop-by-hop options, etc.  Note that the\n       \
    \ Transport Protocol may not be available in the case of receipt\n        of a\
    \ packet with an ESP header, thus a value of \"OPAQUE\" SHOULD\n        be supported.\n\
    \        [REQUIRED for all implementations]\n        NOTE: To locate the transport\
    \ protocol, a system has to chain\n        through the packet headers checking\
    \ the \"Protocol\" or \"Next\n        Header\" field until it encounters either\
    \ one it recognizes as a\n        transport protocol, or until it reaches one\
    \ that isn't on its\n        list of extension headers, or until it encounters\
    \ an ESP header\n        that renders the transport protocol opaque.\n      -\
    \ Source and Destination (e.g., TCP/UDP) Ports: These may be\n        individual\
    \ UDP or TCP port values or a wildcard port.  (The use\n        of the Next Protocol\
    \ field and the Source and/or Destination\n        Port fields (in conjunction\
    \ with the Source and/or Destination\n        Address fields), as an SA selector\
    \ is sometimes referred to as\n        \"session-oriented keying.\").  Note that\
    \ the source and\n        destination ports may not be available in the case of\
    \ receipt of\n        a packet with an ESP header, thus a value of \"OPAQUE\"\
    \ SHOULD be\n        supported.\n        The following table summarizes the relationship\
    \ between the\n        \"Next Header\" value in the packet and SPD and the derived\
    \ Port\n        Selector value for the SPD and SAD.\n          Next Hdr      \
    \  Transport Layer   Derived Port Selector Field\n          in Packet       Protocol\
    \ in SPD   Value in SPD and SAD\n          --------        ---------------   ---------------------------\n\
    \          ESP             ESP or ANY        ANY (i.e., don't look at it)\n  \
    \        -don't care-    ANY               ANY (i.e., don't look at it)\n    \
    \      specific value  specific value    NOT ANY (i.e., drop packet)\n       \
    \      fragment\n          specific value  specific value    actual port selector\
    \ field\n             not fragment\n        If the packet has been fragmented,\
    \ then the port information may\n        not be available in the current fragment.\
    \  If so, discard the\n        fragment.  An ICMP PMTU should be sent for the\
    \ first fragment,\n        which will have the port information.  [MAY be supported]\n\
    \   The IPsec implementation context determines how selectors are used.\n   For\
    \ example, a host implementation integrated into the stack may make\n   use of\
    \ a socket interface.  When a new connection is established the\n   SPD can be\
    \ consulted and an SA (or SA bundle) bound to the socket.\n   Thus traffic sent\
    \ via that socket need not result in additional\n   lookups to the SPD/SAD.  In\
    \ contrast, a BITS, BITW, or security\n   gateway implementation needs to look\
    \ at each packet and perform an\n   SPD/SAD lookup based on the selectors. The\
    \ allowable values for the\n   selector fields differ between the traffic flow,\
    \ the security\n   association, and the security policy.\n   The following table\
    \ summarizes the kinds of entries that one needs to\n   be able to express in\
    \ the SPD and SAD.  It shows how they relate to\n   the fields in data traffic\
    \ being subjected to IPsec screening.\n   (Note: the \"wild\" or \"wildcard\"\
    \ entry for src and dst addresses\n   includes a mask, range, etc.)\n Field  \
    \       Traffic Value       SAD Entry            SPD Entry\n --------      -------------\
    \   ----------------   --------------------\n src addr      single IP addr  single,range,wild\
    \  single,range,wildcard\n dst addr      single IP addr  single,range,wild  single,range,wildcard\n\
    \ xpt protocol* xpt protocol    single,wildcard    single,wildcard\n src port*\
    \     single src port single,wildcard    single,wildcard\n dst port*     single\
    \ dst port single,wildcard    single,wildcard\n user id*      single user id \
    \ single,wildcard    single,wildcard\n sec. labels   single value    single,wildcard\
    \    single,wildcard\n       * The SAD and SPD entries for these fields could\
    \ be \"OPAQUE\"\n         because the traffic value is encrypted.\n   NOTE: In\
    \ principle, one could have selectors and/or selector values\n   in the SPD which\
    \ cannot be negotiated for an SA or SA bundle.\n   Examples might include selector\
    \ values used to select traffic for\n   discarding or enumerated lists which cause\
    \ a separate SA to be\n   created for each item on the list.  For now, this is\
    \ left for future\n   versions of this document and the list of required selectors\
    \ and\n   selector values is the same for the SPD and the SAD.  However, it is\n\
    \   acceptable to have an administrative interface that supports use of\n   selector\
    \ values which cannot be negotiated provided that it does not\n   mislead the\
    \ user into believing it is creating an SA with these\n   selector values.  For\
    \ example, the interface may allow the user to\n   specify an enumerated list\
    \ of values but would result in the creation\n   of a separate policy and SA for\
    \ each item on the list.  A vendor\n   might support such an interface to make\
    \ it easier for its customers\n   to specify clear and concise policy specifications.\n"
- title: 4.4.3 Security Association Database (SAD)
  contents:
  - "4.4.3 Security Association Database (SAD)\n   In each IPsec implementation there\
    \ is a nominal Security Association\n   Database, in which each entry defines\
    \ the parameters associated with\n   one SA.  Each SA has an entry in the SAD.\
    \  For outbound processing,\n   entries are pointed to by entries in the SPD.\
    \  Note that if an SPD\n   entry does not currently point to an SA that is appropriate\
    \ for the\n   packet, the implementation creates an appropriate SA (or SA Bundle)\n\
    \   and links the SPD entry to the SAD entry (see Section 5.1.1).  For\n   inbound\
    \ processing, each entry in the SAD is indexed by a destination\n   IP address,\
    \ IPsec protocol type, and SPI.  The following parameters\n   are associated with\
    \ each entry in the SAD.  This description does not\n   purport to be a MIB, but\
    \ only a specification of the minimal data\n   items required to support an SA\
    \ in an IPsec implementation.\n   For inbound processing: The following packet\
    \ fields are used to look\n   up the SA in the SAD:\n         o Outer Header's\
    \ Destination IP address: the IPv4 or IPv6\n           Destination address.\n\
    \           [REQUIRED for all implementations]\n         o IPsec Protocol: AH\
    \ or ESP, used as an index for SA lookup\n           in this database.  Specifies\
    \ the IPsec protocol to be\n           applied to the traffic on this SA.\n  \
    \         [REQUIRED for all implementations]\n         o SPI: the 32-bit value\
    \ used to distinguish among different\n           SAs terminating at the same\
    \ destination and using the same\n           IPsec protocol.\n           [REQUIRED\
    \ for all implementations]\n   For each of the selectors defined in Section 4.4.2,\
    \ the SA entry in\n   the SAD MUST contain the value or values which were negotiated\
    \ at the\n   time the SA was created.  For the sender, these values are used to\n\
    \   decide whether a given SA is appropriate for use with an outbound\n   packet.\
    \  This is part of checking to see if there is an existing SA\n   that can be\
    \ used.  For the receiver, these values are used to check\n   that the selector\
    \ values in an inbound packet match those for the SA\n   (and thus indirectly\
    \ those for the matching policy).  For the\n   receiver, this is part of verifying\
    \ that the SA was appropriate for\n   this packet.  (See Section 6 for rules for\
    \ ICMP messages.)  These\n   fields can have the form of specific values, ranges,\
    \ wildcards, or\n   \"OPAQUE\" as described in section 4.4.2, \"Selectors\". \
    \ Note that for\n   an ESP SA, the encryption algorithm or the authentication\
    \ algorithm\n   could be \"NULL\".  However they MUST not both be \"NULL\".\n\
    \   The following SAD fields are used in doing IPsec processing:\n         o Sequence\
    \ Number Counter: a 32-bit value used to generate the\n           Sequence Number\
    \ field in AH or ESP headers.\n           [REQUIRED for all implementations, but\
    \ used only for outbound\n           traffic.]\n         o Sequence Counter Overflow:\
    \ a flag indicating whether overflow\n           of the Sequence Number Counter\
    \ should generate an auditable\n           event and prevent transmission of additional\
    \ packets on the\n           SA.\n           [REQUIRED for all implementations,\
    \ but used only for outbound\n           traffic.]\n         o Anti-Replay Window:\
    \ a 32-bit counter and a bit-map (or\n           equivalent) used to determine\
    \ whether an inbound AH or ESP\n           packet is a replay.\n           [REQUIRED\
    \ for all implementations but used only for inbound\n           traffic. NOTE:\
    \ If anti-replay has been disabled by the\n           receiver, e.g., in the case\
    \ of a manually keyed SA, then the\n           Anti-Replay Window is not used.]\n\
    \         o AH Authentication algorithm, keys, etc.\n           [REQUIRED for\
    \ AH implementations]\n         o ESP Encryption algorithm, keys, IV mode, IV,\
    \ etc.\n           [REQUIRED for ESP implementations]\n         o ESP authentication\
    \ algorithm, keys, etc. If the\n           authentication service is not selected,\
    \ this field will be\n           null.\n           [REQUIRED for ESP implementations]\n\
    \         o Lifetime of this Security Association: a time interval after\n   \
    \        which an SA must be replaced with a new SA (and new SPI) or\n       \
    \    terminated, plus an indication of which of these actions\n           should\
    \ occur.  This may be expressed as a time or byte count,\n           or a simultaneous\
    \ use of both, the first lifetime to expire\n           taking precedence. A compliant\
    \ implementation MUST support\n           both types of lifetimes, and must support\
    \ a simultaneous use\n           of both.  If time is employed, and if IKE employs\
    \ X.509\n           certificates for SA establishment, the SA lifetime must be\n\
    \           constrained by the validity intervals of the certificates,\n     \
    \      and the NextIssueDate of the CRLs used in the IKE exchange\n          \
    \ for the SA.  Both initiator and responder are responsible for\n           constraining\
    \ SA lifetime in this fashion.\n           [REQUIRED for all implementations]\n\
    \           NOTE: The details of how to handle the refreshing of keys\n      \
    \     when SAs expire is a local matter.  However, one reasonable\n          \
    \ approach is:\n             (a) If byte count is used, then the implementation\n\
    \                 SHOULD count the number of bytes to which the IPsec\n      \
    \           algorithm is applied.  For ESP, this is the encryption\n         \
    \        algorithm (including Null encryption) and for AH,\n                 this\
    \ is the authentication algorithm.  This includes\n                 pad bytes,\
    \ etc.  Note that implementations SHOULD be\n                 able to handle having\
    \ the counters at the ends of an\n                 SA get out of synch, e.g.,\
    \ because of packet loss or\n                 because the implementations at each\
    \ end of the SA\n                 aren't doing things the same way.\n        \
    \     (b) There SHOULD be two kinds of lifetime -- a soft\n                 lifetime\
    \ which warns the implementation to initiate\n                 action such as\
    \ setting up a replacement SA and a\n                 hard lifetime when the current\
    \ SA ends.\n             (c) If the entire packet does not get delivered during\n\
    \                 the SAs lifetime, the packet SHOULD be discarded.\n        \
    \ o IPsec protocol mode: tunnel, transport or wildcard.\n           Indicates\
    \ which mode of AH or ESP is applied to traffic on\n           this SA.  Note\
    \ that if this field is \"wildcard\" at the\n           sending end of the SA,\
    \ then the application has to specify\n           the mode to the IPsec implementation.\
    \  This use of wildcard\n           allows the same SA to be used for either tunnel\
    \ or transport\n           mode traffic on a per packet basis, e.g., by different\n\
    \           sockets.  The receiver does not need to know the mode in\n       \
    \    order to properly process the packet's IPsec headers.\n           [REQUIRED\
    \ as follows, unless implicitly defined by context:\n                   - host\
    \ implementations must support all modes\n                   - gateway implementations\
    \ must support tunnel mode]\n           NOTE: The use of wildcard for the protocol\
    \ mode of an inbound\n           SA may add complexity to the situation in the\
    \ receiver (host\n           only).  Since the packets on such an SA could be\
    \ delivered in\n           either tunnel or transport mode, the security of an\
    \ incoming\n           packet could depend in part on which mode had been used\
    \ to\n           deliver it.  If, as a result, an application cared about the\n\
    \           SA mode of a given packet, then the application would need a\n   \
    \        mechanism to obtain this mode information.\n         o Path MTU: any\
    \ observed path MTU and aging variables.  See\n           Section 6.1.2.4\n  \
    \         [REQUIRED for all implementations but used only for outbound\n     \
    \      traffic]\n"
- title: 4.5 Basic Combinations of Security Associations
  contents:
  - "4.5 Basic Combinations of Security Associations\n   This section describes four\
    \ examples of combinations of security\n   associations that MUST be supported\
    \ by compliant IPsec hosts or\n   security gateways.  Additional combinations\
    \ of AH and/or ESP in\n   tunnel and/or transport modes MAY be supported at the\
    \ discretion of\n   the implementor.  Compliant implementations MUST be capable\
    \ of\n   generating these four combinations and on receipt, of processing\n  \
    \ them, but SHOULD be able to receive and process any combination.  The\n   diagrams\
    \ and text below describe the basic cases.  The legend for the\n   diagrams is:\n\
    \        ==== = one or more security associations (AH or ESP, transport\n    \
    \           or tunnel)\n        ---- = connectivity (or if so labelled, administrative\
    \ boundary)\n        Hx   = host x\n        SGx  = security gateway x\n      \
    \  X*   = X supports IPsec\n   NOTE: The security associations below can be either\
    \ AH or ESP.  The\n   mode (tunnel vs transport) is determined by the nature of\
    \ the\n   endpoints.  For host-to-host SAs, the mode can be either transport or\n\
    \   tunnel.\n   Case 1.  The case of providing end-to-end security between 2 hosts\n\
    \        across the Internet (or an Intranet).\n                 ====================================\n\
    \                 |                                  |\n                H1* ------\
    \ (Inter/Intranet) ------ H2*\n        Note that either transport or tunnel mode\
    \ can be selected by the\n        hosts.  So the headers in a packet between H1\
    \ and H2 could look\n        like any of the following:\n                  Transport\
    \                  Tunnel\n             -----------------          ---------------------\n\
    \             1. [IP1][AH][upper]        4. [IP2][AH][IP1][upper]\n          \
    \   2. [IP1][ESP][upper]       5. [IP2][ESP][IP1][upper]\n             3. [IP1][AH][ESP][upper]\n\
    \        Note that there is no requirement to support general nesting,\n     \
    \   but in transport mode, both AH and ESP can be applied to the\n        packet.\
    \  In this event, the SA establishment procedure MUST\n        ensure that first\
    \ ESP, then AH are applied to the packet.\n   Case 2.  This case illustrates simple\
    \ virtual private networks\n        support.\n                       ===========================\n\
    \                       |                         |\n  ---------------------|----\
    \                  ---|-----------------------\n  |                    |   | \
    \                 |  |                      |\n  |  H1 -- (Local --- SG1* |---\
    \ (Internet) ---| SG2* --- (Local --- H2  |\n  |        Intranet)       |    \
    \              |          Intranet)      |\n  --------------------------     \
    \             ---------------------------\n      admin. boundary             \
    \                  admin. boundary\n        Only tunnel mode is required here.\
    \  So the headers in a packet\n        between SG1 and SG2 could look like either\
    \ of the following:\n                        Tunnel\n                ---------------------\n\
    \                4. [IP2][AH][IP1][upper]\n                5. [IP2][ESP][IP1][upper]\n\
    \   Case 3.  This case combines cases 1 and 2, adding end-to-end security\n  \
    \      between the sending and receiving hosts.  It imposes no new\n        requirements\
    \ on the hosts or security gateways, other than a\n        requirement for a security\
    \ gateway to be configurable to pass\n        IPsec traffic (including ISAKMP\
    \ traffic) for hosts behind it.\n     ===============================================================\n\
    \     |                                                             |\n     |\
    \                 =========================                   |\n     |      \
    \           |                       |                   |\n  ---|-----------------|----\
    \                ---|-------------------|---\n  |  |                 |   |   \
    \             |  |                   |  |\n  | H1* -- (Local --- SG1* |-- (Internet)\
    \ --| SG2* --- (Local --- H2* |\n  |        Intranet)       |                |\
    \          Intranet)      |\n  --------------------------                ---------------------------\n\
    \       admin. boundary                            admin. boundary\n   Case 4.\
    \  This covers the situation where a remote host (H1) uses the\n        Internet\
    \ to reach an organization's firewall (SG2) and to then\n        gain access to\
    \ some server or other machine (H2).  The remote\n        host could be a mobile\
    \ host (H1) dialing up to a local PPP/ARA\n        server (not shown) on the Internet\
    \ and then crossing the\n        Internet to the home organization's firewall\
    \ (SG2), etc.  The\n        details of support for this case, (how H1 locates\
    \ SG2,\n        authenticates it, and verifies its authorization to represent\n\
    \        H2) are discussed in Section 4.6.3, \"Locating a Security\n        Gateway\"\
    .\n        ======================================================\n        | \
    \                                                   |\n        |==============================\
    \                      |\n        ||                            |            \
    \          |\n        ||                         ---|----------------------|---\n\
    \        ||                         |  |                      |  |\n        H1*\
    \ ----- (Internet) ------| SG2* ---- (Local ----- H2* |\n              ^     \
    \               |           Intranet)        |\n              |              \
    \      ------------------------------\n        could be dialup              admin.\
    \ boundary (optional)\n        to PPP/ARA server\n        Only tunnel mode is\
    \ required between H1 and SG2.  So the choices\n        for the SA between H1\
    \ and SG2 would be one of the ones in case\n        2.  The choices for the SA\
    \ between H1 and H2 would be one of the\n        ones in case 1.\n        Note\
    \ that in this case, the sender MUST apply the transport\n        header before\
    \ the tunnel header.  Therefore the management\n        interface to the IPsec\
    \ implementation MUST support configuration\n        of the SPD and SAD to ensure\
    \ this ordering of IPsec header\n        application.\n   As noted above, support\
    \ for additional combinations of AH and ESP is\n   optional.  Use of other, optional\
    \ combinations may adversely affect\n   interoperability.\n"
- title: 4.6 SA and Key Management
  contents:
  - "4.6 SA and Key Management\n   IPsec mandates support for both manual and automated\
    \ SA and\n   cryptographic key management.  The IPsec protocols, AH and ESP, are\n\
    \   largely independent of the associated SA management techniques,\n   although\
    \ the techniques involved do affect some of the security\n   services offered\
    \ by the protocols.  For example, the optional anti-\n   replay services available\
    \ for AH and ESP require automated SA\n   management.  Moreover, the granularity\
    \ of key distribution employed\n   with IPsec determines the granularity of authentication\
    \ provided.\n   (See also a discussion of this issue in Section 4.7.)  In general,\n\
    \   data origin authentication in AH and ESP is limited by the extent to\n   which\
    \ secrets used with the authentication algorithm (or with a key\n   management\
    \ protocol that creates such secrets) are shared among\n   multiple possible sources.\n\
    \   The following text describes the minimum requirements for both types\n   of\
    \ SA management.\n"
- title: 4.6.1 Manual Techniques
  contents:
  - "4.6.1 Manual Techniques\n   The simplest form of management is manual management,\
    \ in which a\n   person manually configures each system with keying material and\n\
    \   security association management data relevant to secure communication\n  \
    \ with other systems.  Manual techniques are practical in small, static\n   environments\
    \ but they do not scale well.  For example, a company\n   could create a Virtual\
    \ Private Network (VPN) using IPsec in security\n   gateways at several sites.\
    \  If the number of sites is small, and\n   since all the sites come under the\
    \ purview of a single administrative\n   domain, this is likely to be a feasible\
    \ context for manual management\n   techniques.  In this case, the security gateway\
    \ might selectively\n   protect traffic to and from other sites within the organization\
    \ using\n   a manually configured key, while not protecting traffic for other\n\
    \   destinations.  It also might be appropriate when only selected\n   communications\
    \ need to be secured.  A similar argument might apply to\n   use of IPsec entirely\
    \ within an organization for a small number of\n   hosts and/or gateways.  Manual\
    \ management techniques often employ\n   statically configured, symmetric keys,\
    \ though other options also\n   exist.\n"
- title: 4.6.2 Automated SA and Key Management
  contents:
  - "4.6.2 Automated SA and Key Management\n   Widespread deployment and use of IPsec\
    \ requires an Internet-standard,\n   scalable, automated, SA management protocol.\
    \  Such support is\n   required to facilitate use of the anti-replay features\
    \ of AH and ESP,\n   and to accommodate on-demand creation of SAs, e.g., for user-\
    \ and\n   session-oriented keying.  (Note that the notion of \"rekeying\" an SA\n\
    \   actually implies creation of a new SA with a new SPI, a process that\n   generally\
    \ implies use of an automated SA/key management protocol.)\n   The default automated\
    \ key management protocol selected for use with\n   IPsec is IKE [MSST97, Orm97,\
    \ HC98] under the IPsec domain of\n   interpretation [Pip98].  Other automated\
    \ SA management protocols MAY\n   be employed.\n   When an automated SA/key management\
    \ protocol is employed, the output\n   from this protocol may be used to generate\
    \ multiple keys, e.g., for a\n   single ESP SA.  This may arise because:\n   \
    \    o the encryption algorithm uses multiple keys (e.g., triple DES)\n      \
    \ o the authentication algorithm uses multiple keys\n       o both encryption\
    \ and authentication algorithms are employed\n   The Key Management System may\
    \ provide a separate string of bits for\n   each key or it may generate one string\
    \ of bits from which all of them\n   are extracted.  If a single string of bits\
    \ is provided, care needs to\n   be taken to ensure that the parts of the system\
    \ that map the string\n   of bits to the required keys do so in the same fashion\
    \ at both ends\n   of the SA.  To ensure that the IPsec implementations at each\
    \ end of\n   the SA use the same bits for the same keys, and irrespective of which\n\
    \   part of the system divides the string of bits into individual keys,\n   the\
    \ encryption key(s) MUST be taken from the first (left-most, high-\n   order)\
    \ bits and the authentication key(s) MUST be taken from the\n   remaining bits.\
    \  The number of bits for each key is defined in the\n   relevant algorithm specification\
    \ RFC.  In the case of multiple\n   encryption keys or multiple authentication\
    \ keys, the specification\n   for the algorithm must specify the order in which\
    \ they are to be\n   selected from a single string of bits provided to the algorithm.\n"
- title: 4.6.3 Locating a Security Gateway
  contents:
  - "4.6.3 Locating a Security Gateway\n   This section discusses issues relating\
    \ to how a host learns about the\n   existence of relevant security gateways and\
    \ once a host has contacted\n   these security gateways, how it knows that these\
    \ are the correct\n   security gateways.  The details of where the required information\
    \ is\n   stored is a local matter.\n   Consider a situation in which a remote\
    \ host (H1) is using the\n   Internet to gain access to a server or other machine\
    \ (H2) and there\n   is a security gateway (SG2), e.g., a firewall, through which\
    \ H1's\n   traffic must pass.  An example of this situation would be a mobile\n\
    \   host (Road Warrior) crossing the Internet to the home organization's\n   firewall\
    \ (SG2).  (See Case 4 in the section 4.5 Basic Combinations of\n   Security Associations.)\
    \ This situation raises several issues:\n        1. How does H1 know/learn about\
    \ the existence of the security\n           gateway SG2?\n        2. How does\
    \ it authenticate SG2, and once it has authenticated\n           SG2, how does\
    \ it confirm that SG2 has been authorized to\n           represent H2?\n     \
    \   3. How does SG2 authenticate H1 and verify that H1 is authorized\n       \
    \    to contact H2?\n        4. How does H1 know/learn about backup gateways which\
    \ provide\n           alternate paths to H2?\n   To address these problems, a\
    \ host or security gateway MUST have an\n   administrative interface that allows\
    \ the user/administrator to\n   configure the address of a security gateway for\
    \ any sets of\n   destination addresses that require its use. This includes the\
    \ ability\n   to configure:\n        o the requisite information for locating\
    \ and authenticating the\n          security gateway and verifying its authorization\
    \ to represent\n          the destination host.\n        o the requisite information\
    \ for locating and authenticating any\n          backup gateways and verifying\
    \ their authorization to represent\n          the destination host.\n   It is\
    \ assumed that the SPD is also configured with policy information\n   that covers\
    \ any other IPsec requirements for the path to the security\n   gateway and the\
    \ destination host.\n   This document does not address the issue of how to automate\
    \ the\n   discovery/verification of security gateways.\n"
- title: 4.7 Security Associations and Multicast
  contents:
  - "4.7 Security Associations and Multicast\n   The receiver-orientation of the Security\
    \ Association implies that, in\n   the case of unicast traffic, the destination\
    \ system will normally\n   select the SPI value.  By having the destination select\
    \ the SPI\n   value, there is no potential for manually configured Security\n\
    \   Associations to conflict with automatically configured (e.g., via a\n   key\
    \ management protocol) Security Associations or for Security\n   Associations\
    \ from multiple sources to conflict with each other.  For\n   multicast traffic,\
    \ there are multiple destination systems per\n   multicast group.  So some system\
    \ or person will need to coordinate\n   among all multicast groups to select an\
    \ SPI or SPIs on behalf of each\n   multicast group and then communicate the group's\
    \ IPsec information to\n   all of the legitimate members of that multicast group\
    \ via mechanisms\n   not defined here.\n   Multiple senders to a multicast group\
    \ SHOULD use a single Security\n   Association (and hence Security Parameter Index)\
    \ for all traffic to\n   that group when a symmetric key encryption or authentication\n\
    \   algorithm is employed. In such circumstances, the receiver knows only\n  \
    \ that the message came from a system possessing the key for that\n   multicast\
    \ group.  In such circumstances, a receiver generally will\n   not be able to\
    \ authenticate which system sent the multicast traffic.\n   Specifications for\
    \ other, more general multicast cases are deferred\n   to later IPsec documents.\n\
    \   At the time this specification was published, automated protocols for\n  \
    \ multicast key distribution were not considered adequately mature for\n   standardization.\
    \  For multicast groups having relatively few members,\n   manual key distribution\
    \ or multiple use of existing unicast key\n   distribution algorithms such as\
    \ modified Diffie-Hellman appears\n   feasible.  For very large groups, new scalable\
    \ techniques will be\n   needed.  An example of current work in this area is the\
    \ Group Key\n   Management Protocol (GKMP) [HM97].\n"
- title: 5. IP Traffic Processing
  contents:
  - "5. IP Traffic Processing\n   As mentioned in Section 4.4.1 \"The Security Policy\
    \ Database (SPD)\",\n   the SPD must be consulted during the processing of all\
    \ traffic\n   (INBOUND and OUTBOUND), including non-IPsec traffic.  If no policy\
    \ is\n   found in the SPD that matches the packet (for either inbound or\n   outbound\
    \ traffic), the packet MUST be discarded.\n   NOTE: All of the cryptographic algorithms\
    \ used in IPsec expect their\n   input in canonical network byte order (see Appendix\
    \ in RFC 791) and\n   generate their output in canonical network byte order. \
    \ IP packets\n   are also transmitted in network byte order.\n"
- title: 5.1 Outbound IP Traffic Processing
  contents:
  - '5.1 Outbound IP Traffic Processing

    '
- title: 5.1.1 Selecting and Using an SA or SA Bundle
  contents:
  - "5.1.1 Selecting and Using an SA or SA Bundle\n   In a security gateway or BITW\
    \ implementation (and in many BITS\n   implementations), each outbound packet\
    \ is compared against the SPD to\n   determine what processing is required for\
    \ the packet.  If the packet\n   is to be discarded, this is an auditable event.\
    \  If the traffic is\n   allowed to bypass IPsec processing, the packet continues\
    \ through\n   \"normal\" processing for the environment in which the IPsec processing\n\
    \   is taking place.  If IPsec processing is required, the packet is\n   either\
    \ mapped to an existing SA (or SA bundle), or a new SA (or SA\n   bundle) is created\
    \ for the packet.  Since a packet's selectors might\n   match multiple policies\
    \ or multiple extant SAs and since the SPD is\n   ordered, but the SAD is not,\
    \ IPsec MUST:\n           1. Match the packet's selector fields against the outbound\n\
    \              policies in the SPD to locate the first appropriate\n         \
    \     policy, which will point to zero or more SA bundles in the\n           \
    \   SAD.\n           2. Match the packet's selector fields against those in the\
    \ SA\n              bundles found in (1) to locate the first SA bundle that\n\
    \              matches.  If no SAs were found or none match, create an\n     \
    \         appropriate SA bundle and link the SPD entry to the SAD\n          \
    \    entry.  If no key management entity is found, drop the\n              packet.\n\
    \           3. Use the SA bundle found/created in (2) to do the required\n   \
    \           IPsec processing, e.g., authenticate and encrypt.\n   In a host IPsec\
    \ implementation based on sockets, the SPD will be\n   consulted whenever a new\
    \ socket is created, to determine what, if\n   any, IPsec processing will be applied\
    \ to the traffic that will flow\n   on that socket.\n   NOTE: A compliant implementation\
    \ MUST not allow instantiation of an\n   ESP SA that employs both a NULL encryption\
    \ and a NULL authentication\n   algorithm.  An attempt to negotiate such an SA\
    \ is an auditable event.\n"
- title: 5.1.2 Header Construction for Tunnel Mode
  contents:
  - "5.1.2 Header Construction for Tunnel Mode\n   This section describes the handling\
    \ of the inner and outer IP\n   headers, extension headers, and options for AH\
    \ and ESP tunnels.  This\n   includes how to construct the encapsulating (outer)\
    \ IP header, how to\n   handle fields in the inner IP header, and what other actions\
    \ should\n   be taken.  The general idea is modeled after the one used in RFC\n\
    \   2003, \"IP Encapsulation with IP\":\n        o The outer IP header Source\
    \ Address and Destination Address\n          identify the \"endpoints\" of the\
    \ tunnel (the encapsulator and\n          decapsulator).  The inner IP header\
    \ Source Address and\n          Destination Addresses identify the original sender\
    \ and\n          recipient of the datagram, (from the perspective of this\n  \
    \        tunnel), respectively.  (see footnote 3 after the table in\n        \
    \  5.1.2.1 for more details on the encapsulating source IP\n          address.)\n\
    \        o The inner IP header is not changed except to decrement the TTL\n  \
    \        as noted below, and remains unchanged during its delivery to\n      \
    \    the tunnel exit point.\n        o No change to IP options or extension headers\
    \ in the inner\n          header occurs during delivery of the encapsulated datagram\n\
    \          through the tunnel.\n        o If need be, other protocol headers such\
    \ as the IP\n          Authentication header may be inserted between the outer\
    \ IP\n          header and the inner IP header.\n   The tables in the following\
    \ sub-sections show the handling for the\n   different header/option fields (constructed\
    \ = the value in the outer\n   field is constructed independently of the value\
    \ in the inner).\n"
- title: 5.1.2.1 IPv4 -- Header Construction for Tunnel Mode
  contents:
  - "5.1.2.1 IPv4 -- Header Construction for Tunnel Mode\n                       \
    \ <-- How Outer Hdr Relates to Inner Hdr -->\n                        Outer Hdr\
    \ at                 Inner Hdr at\n   IPv4                 Encapsulator      \
    \           Decapsulator\n     Header fields:     --------------------       \
    \  ------------\n       version          4 (1)                        no change\n\
    \       header length    constructed                  no change\n       TOS  \
    \            copied from inner hdr (5)    no change\n       total length     constructed\
    \                  no change\n       ID               constructed            \
    \      no change\n       flags (DF,MF)    constructed, DF (4)          no change\n\
    \       fragmt offset    constructed                  no change\n       TTL  \
    \            constructed (2)              decrement (2)\n       protocol     \
    \    AH, ESP, routing hdr         no change\n       checksum         constructed\
    \                  constructed (2)\n       src address      constructed (3)  \
    \            no change\n       dest address     constructed (3)              no\
    \ change\n   Options            never copied                 no change\n     \
    \   1. The IP version in the encapsulating header can be different\n         \
    \  from the value in the inner header.\n        2. The TTL in the inner header\
    \ is decremented by the\n           encapsulator prior to forwarding and by the\
    \ decapsulator if\n           it forwards the packet.  (The checksum changes when\
    \ the TTL\n           changes.)\n           Note: The decrementing of the TTL\
    \ is one of the usual actions\n           that takes place when forwarding a packet.\
    \  Packets\n           originating from the same node as the encapsulator do not\n\
    \           have their TTL's decremented, as the sending node is\n           originating\
    \ the packet rather than forwarding it.\n        3. src and dest addresses depend\
    \ on the SA, which is used to\n           determine the dest address which in\
    \ turn determines which src\n           address (net interface) is used to forward\
    \ the packet.\n           NOTE: In principle, the encapsulating IP source address\
    \ can\n           be any of the encapsulator's interface addresses or even an\n\
    \           address different from any of the encapsulator's IP\n           addresses,\
    \ (e.g., if it's acting as a NAT box) so long as the\n           address is reachable\
    \ through the encapsulator from the\n           environment into which the packet\
    \ is sent.  This does not\n           cause a problem because IPsec does not currently\
    \ have any\n           INBOUND processing requirement that involves the Source\n\
    \           Address of the encapsulating IP header.  So while the\n          \
    \ receiving tunnel endpoint looks at the Destination Address in\n           the\
    \ encapsulating IP header, it only looks at the Source\n           Address in\
    \ the inner (encapsulated) IP header.\n        4. configuration determines whether\
    \ to copy from the inner\n           header (IPv4 only), clear or set the DF.\n\
    \        5. If Inner Hdr is IPv4 (Protocol = 4), copy the TOS.  If Inner\n   \
    \        Hdr is IPv6 (Protocol = 41), map the Class to TOS.\n"
- title: 5.1.2.2 IPv6 -- Header Construction for Tunnel Mode
  contents:
  - "5.1.2.2 IPv6 -- Header Construction for Tunnel Mode\n   See previous section\
    \ 5.1.2 for notes 1-5 indicated by (footnote\n   number).\n                  \
    \      <-- How Outer Hdr  Relates Inner Hdr --->\n                        Outer\
    \ Hdr at                 Inner Hdr at\n   IPv6                 Encapsulator  \
    \               Decapsulator\n     Header fields:     --------------------   \
    \      ------------\n       version          6 (1)                        no change\n\
    \       class            copied or configured (6)     no change\n       flow id\
    \          copied or configured         no change\n       len              constructed\
    \                  no change\n       next header      AH,ESP,routing hdr     \
    \      no change\n       hop limit        constructed (2)              decrement\
    \ (2)\n       src address      constructed (3)              no change\n      \
    \ dest address     constructed (3)              no change\n     Extension headers\
    \  never copied                 no change\n        6. If Inner Hdr is IPv6 (Next\
    \ Header = 41), copy the Class.  If\n           Inner Hdr is IPv4 (Next Header\
    \ = 4), map the TOS to Class.\n"
- title: 5.2 Processing Inbound IP Traffic
  contents:
  - "5.2 Processing Inbound IP Traffic\n   Prior to performing AH or ESP processing,\
    \ any IP fragments are\n   reassembled.  Each inbound IP datagram to which IPsec\
    \ processing will\n   be applied is identified by the appearance of the AH or\
    \ ESP values in\n   the IP Next Protocol field (or of AH or ESP as an extension\
    \ header in\n   the IPv6 context).\n   Note: Appendix C contains sample code for\
    \ a bitmask check for a 32\n   packet window that can be used for implementing\
    \ anti-replay service.\n"
- title: 5.2.1 Selecting and Using an SA or SA Bundle
  contents:
  - "5.2.1 Selecting and Using an SA or SA Bundle\n   Mapping the IP datagram to the\
    \ appropriate SA is simplified because\n   of the presence of the SPI in the AH\
    \ or ESP header.  Note that the\n   selector checks are made on the inner headers\
    \ not the outer (tunnel)\n   headers.  The steps followed are:\n           1.\
    \ Use the packet's destination address (outer IP header),\n              IPsec\
    \ protocol, and SPI to look up the SA in the SAD.  If\n              the SA lookup\
    \ fails, drop the packet and log/report the\n              error.\n          \
    \ 2. Use the SA found in (1) to do the IPsec processing, e.g.,\n             \
    \ authenticate and decrypt.  This step includes matching the\n              packet's\
    \ (Inner Header if tunneled) selectors to the\n              selectors in the\
    \ SA.  Local policy determines the\n              specificity of the SA selectors\
    \ (single value, list,\n              range, wildcard).  In general, a packet's\
    \ source address\n              MUST match the SA selector value.  However, an\
    \ ICMP packet\n              received on a tunnel mode SA may have a source address\n\
    \              other than that bound to the SA and thus such packets\n       \
    \       should be permitted as exceptions to this check.  For an\n           \
    \   ICMP packet, the selectors from the enclosed problem\n              packet\
    \ (the source and destination addresses and ports\n              should be swapped)\
    \ should be checked against the selectors\n              for the SA.  Note that\
    \ some or all of these selectors may\n              be inaccessible because of\
    \ limitations on how many bits of\n              the problem packet the ICMP packet\
    \ is allowed to carry or\n              due to encryption.  See Section 6.\n \
    \             Do (1) and (2) for every IPsec header until a Transport\n      \
    \        Protocol Header or an IP header that is NOT for this\n              system\
    \ is encountered.  Keep track of what SAs have been\n              used and their\
    \ order of application.\n           3. Find an incoming policy in the SPD that\
    \ matches the\n              packet.  This could be done, for example, by use\
    \ of\n              backpointers from the SAs to the SPD or by matching the\n\
    \              packet's selectors (Inner Header if tunneled) against\n       \
    \       those of the policy entries in the SPD.\n           4. Check whether the\
    \ required IPsec processing has been\n              applied, i.e., verify that\
    \ the SA's found in (1) and (2)\n              match the kind and order of SAs\
    \ required by the policy\n              found in (3).\n              NOTE: The\
    \ correct \"matching\" policy will not necessarily\n              be the first\
    \ inbound policy found.  If the check in (4)\n              fails, steps (3) and\
    \ (4) are repeated until all policy\n              entries have been checked or\
    \ until the check succeeds.\n   At the end of these steps, pass the resulting\
    \ packet to the Transport\n   Layer or forward the packet.  Note that any IPsec\
    \ headers processed\n   in these steps may have been removed, but that this information,\n\
    \   i.e., what SAs were used and the order of their application, may be\n   needed\
    \ for subsequent IPsec or firewall processing.\n   Note that in the case of a\
    \ security gateway, if forwarding causes a\n   packet to exit via an IPsec-enabled\
    \ interface, then additional IPsec\n   processing may be applied.\n"
- title: 5.2.2 Handling of AH and ESP tunnels
  contents:
  - "5.2.2 Handling of AH and ESP tunnels\n   The handling of the inner and outer\
    \ IP headers, extension headers,\n   and options for AH and ESP tunnels should\
    \ be performed as described\n   in the tables in Section 5.1.\n"
- title: 6. ICMP Processing (relevant to IPsec)
  contents:
  - "6. ICMP Processing (relevant to IPsec)\n   The focus of this section is on the\
    \ handling of ICMP error messages.\n   Other ICMP traffic, e.g., Echo/Reply, should\
    \ be treated like other\n   traffic and can be protected on an end-to-end basis\
    \ using SAs in the\n   usual fashion.\n   An ICMP error message protected by AH\
    \ or ESP and generated by a\n   router SHOULD be processed and forwarded in a\
    \ tunnel mode SA.  Local\n   policy determines whether or not it is subjected\
    \ to source address\n   checks by the router at the destination end of the tunnel.\
    \  Note that\n   if the router at the originating end of the tunnel is forwarding\
    \ an\n   ICMP error message from another router, the source address check\n  \
    \ would fail.  An ICMP message protected by AH or ESP and generated by\n   a router\
    \ MUST NOT be forwarded on a transport mode SA (unless the SA\n   has been established\
    \ to the router acting as a host, e.g., a Telnet\n   connection used to manage\
    \ a router).  An ICMP message generated by a\n   host SHOULD be checked against\
    \ the source IP address selectors bound\n   to the SA in which the message arrives.\
    \  Note that even if the source\n   of an ICMP error message is authenticated,\
    \ the returned IP header\n   could be invalid. Accordingly, the selector values\
    \ in the IP header\n   SHOULD also be checked to be sure that they are consistent\
    \ with the\n   selectors for the SA over which the ICMP message was received.\n\
    \   The table in Appendix D characterize ICMP messages as being either\n   host\
    \ generated, router generated, both, unknown/unassigned.  ICMP\n   messages falling\
    \ into the last two categories should be handled as\n   determined by the receiver's\
    \ policy.\n   An ICMP message not protected by AH or ESP is unauthenticated and\
    \ its\n   processing and/or forwarding may result in denial of service.  This\n\
    \   suggests that, in general, it would be desirable to ignore such\n   messages.\
    \  However, it is expected that many routers (vs. security\n   gateways) will\
    \ not implement IPsec for transit traffic and thus\n   strict adherence to this\
    \ rule would cause many ICMP messages to be\n   discarded.  The result is that\
    \ some critical IP functions would be\n   lost, e.g., redirection and PMTU processing.\
    \  Thus it MUST be\n   possible to configure an IPsec implementation to accept\
    \ or reject\n   (router) ICMP traffic as per local security policy.\n   The remainder\
    \ of this section addresses how PMTU processing MUST be\n   performed at hosts\
    \ and security gateways.  It addresses processing of\n   both authenticated and\
    \ unauthenticated ICMP PMTU messages.  However,\n   as noted above, unauthenticated\
    \ ICMP messages MAY be discarded based\n   on local policy.\n"
- title: 6.1 PMTU/DF Processing
  contents:
  - '6.1 PMTU/DF Processing

    '
- title: 6.1.1 DF Bit
  contents:
  - "6.1.1 DF Bit\n   In cases where a system (host or gateway) adds an encapsulating\n\
    \   header (ESP tunnel or AH tunnel), it MUST support the option of\n   copying\
    \ the DF bit from the original packet to the encapsulating\n   header (and processing\
    \ ICMP PMTU messages).  This means that it MUST\n   be possible to configure the\
    \ system's treatment of the DF bit (set,\n   clear, copy from encapsulated header)\
    \ for each interface.  (See\n   Appendix B for rationale.)\n"
- title: 6.1.2 Path MTU Discovery (PMTU)
  contents:
  - "6.1.2 Path MTU Discovery (PMTU)\n   This section discusses IPsec handling for\
    \ Path MTU Discovery\n   messages.  ICMP PMTU is used here to refer to an ICMP\
    \ message for:\n           IPv4 (RFC 792):\n                   - Type = 3 (Destination\
    \ Unreachable)\n                   - Code = 4 (Fragmentation needed and DF set)\n\
    \                   - Next-Hop MTU in the low-order 16 bits of the second\n  \
    \                   word of the ICMP header (labelled \"unused\" in RFC\n    \
    \                 792), with high-order 16 bits set to zero\n           IPv6 (RFC\
    \ 1885):\n                   - Type = 2 (Packet Too Big)\n                   -\
    \ Code = 0 (Fragmentation needed)\n                   - Next-Hop MTU in the 32\
    \ bit MTU field of the ICMP6\n                     message\n"
- title: 6.1.2.1 Propagation of PMTU
  contents:
  - "6.1.2.1 Propagation of PMTU\n   The amount of information returned with the ICMP\
    \ PMTU message (IPv4\n   or IPv6) is limited and this affects what selectors are\
    \ available for\n   use in further propagating the PMTU information.  (See Appendix\
    \ B for\n   more detailed discussion of this topic.)\n   o PMTU message with 64\
    \ bits of IPsec header -- If the ICMP PMTU\n     message contains only 64 bits\
    \ of the IPsec header (minimum for\n     IPv4), then a security gateway MUST support\
    \ the following options\n     on a per SPI/SA basis:\n        a. if the originating\
    \ host can be determined (or the possible\n           sources narrowed down to\
    \ a manageable number), send the PM\n           information to all the possible\
    \ originating hosts.\n        b. if the originating host cannot be determined,\
    \ store the PMTU\n           with the SA and wait until the next packet(s) arrive\
    \ from the\n           originating host for the relevant security association.\
    \  If\n           the packet(s) are bigger than the PMTU, drop the packet(s),\n\
    \           and compose ICMP PMTU message(s) with the new packet(s) and\n    \
    \       the updated PMTU, and send the ICMP message(s) about the\n           problem\
    \ to the originating host. Retain the PMTU information\n           for any message\
    \ that might arrive subsequently (see Section\n           6.1.2.4, \"PMTU Aging\"\
    ).\n   o PMTU message with >64 bits of IPsec header -- If the ICMP message\n \
    \    contains more information from the original packet then there may\n     be\
    \ enough non-opaque information to immediately determine to which\n     host to\
    \ propagate the ICMP/PMTU message and to provide that system\n     with the 5\
    \ fields (source address, destination address, source\n     port, destination\
    \ port, transport protocol) needed to determine\n     where to store/update the\
    \ PMTU.  Under such circumstances, a\n     security gateway MUST generate an ICMP\
    \ PMTU message immediately\n     upon receipt of an ICMP PMTU from further down\
    \ the path.\n   o Distributing the PMTU to the Transport Layer -- The host mechanism\n\
    \     for getting the updated PMTU to the transport layer is unchanged,\n    \
    \ as specified in RFC 1191 (Path MTU Discovery).\n"
- title: 6.1.2.2 Calculation of PMTU
  contents:
  - "6.1.2.2 Calculation of PMTU\n   The calculation of PMTU from an ICMP PMTU MUST\
    \ take into account the\n   addition of any IPsec header -- AH transport, ESP\
    \ transport, AH/ESP\n   transport, ESP tunnel, AH tunnel.  (See Appendix B for\
    \ discussion of\n   implementation issues.)\n   Note: In some situations the addition\
    \ of IPsec headers could result\n   in an effective PMTU (as seen by the host\
    \ or application) that is\n   unacceptably small.  To avoid this problem, the\
    \ implementation may\n   establish a threshold below which it will not report\
    \ a reduced PMTU.\n   In such cases, the implementation would apply IPsec and\
    \ then fragment\n   the resulting packet according to the PMTU.  This would result\
    \ in a\n   more efficient use of the available bandwidth.\n"
- title: 6.1.2.3 Granularity of PMTU Processing
  contents:
  - "6.1.2.3 Granularity of PMTU Processing\n   In hosts, the granularity with which\
    \ ICMP PMTU processing can be done\n   differs depending on the implementation\
    \ situation.  Looking at a\n   host, there are 3 situations that are of interest\
    \ with respect to\n   PMTU issues (See Appendix B for additional details on this\
    \ topic.):\n        a. Integration of IPsec into the native IP implementation\n\
    \        b. Bump-in-the-stack implementations, where IPsec is implemented\n  \
    \         \"underneath\" an existing implementation of a TCP/IP protocol\n   \
    \        stack, between the native IP and the local network drivers\n        c.\
    \ No IPsec implementation -- This case is included because it\n           is relevant\
    \ in cases where a security gateway is sending PMTU\n           information back\
    \ to a host.\n   Only in case (a) can the PMTU data be maintained at the same\n\
    \   granularity as communication associations.  In (b) and (c), the IP\n   layer\
    \ will only be able to maintain PMTU data at the granularity of\n   source and\
    \ destination IP addresses (and optionally TOS), as\n   described in RFC 1191.\
    \  This is an important difference, because more\n   than one communication association\
    \ may map to the same source and\n   destination IP addresses, and each communication\
    \ association may have\n   a different amount of IPsec header overhead (e.g.,\
    \ due to use of\n   different transforms or different algorithms).\n   Implementation\
    \ of the calculation of PMTU and support for PMTUs at\n   the granularity of individual\
    \ communication associations is a local\n   matter.  However, a socket-based implementation\
    \ of IPsec in a host\n   SHOULD maintain the information on a per socket basis.\
    \  Bump in the\n   stack systems MUST pass an ICMP PMTU to the host IP implementation,\n\
    \   after adjusting it for any IPsec header overhead added by these\n   systems.\
    \  The calculation of the overhead SHOULD be determined by\n   analysis of the\
    \ SPI and any other selector information present in a\n   returned ICMP PMTU message.\n"
- title: 6.1.2.4 PMTU Aging
  contents:
  - "6.1.2.4 PMTU Aging\n   In all systems (host or gateway) implementing IPsec and\
    \ maintaining\n   PMTU information, the PMTU associated with a security association\n\
    \   (transport or tunnel) MUST be \"aged\" and some mechanism put in place\n \
    \  for updating the PMTU in a timely manner, especially for discovering\n   if\
    \ the PMTU is smaller than it needs to be.  A given PMTU has to\n   remain in\
    \ place long enough for a packet to get from the source end\n   of the security\
    \ association to the system at the other end of the\n   security association and\
    \ propagate back an ICMP error message if the\n   current PMTU is too big.  Note\
    \ that if there are nested tunnels,\n   multiple packets and round trip times\
    \ might be required to get an\n   ICMP message back to an encapsulator or originating\
    \ host.\n   Systems SHOULD use the approach described in the Path MTU Discovery\n\
    \   document (RFC 1191, Section 6.3), which suggests periodically\n   resetting\
    \ the PMTU to the first-hop data-link MTU and then letting\n   the normal PMTU\
    \ Discovery processes update the PMTU as necessary.\n   The period SHOULD be configurable.\n"
- title: 7. Auditing
  contents:
  - "7. Auditing\n   Not all systems that implement IPsec will implement auditing.\
    \  For\n   the most part, the granularity of auditing is a local matter.\n   However,\
    \ several auditable events are identified in the AH and ESP\n   specifications\
    \ and for each of these events a minimum set of\n   information that SHOULD be\
    \ included in an audit log is defined.\n   Additional information also MAY be\
    \ included in the audit log for each\n   of these events, and additional events,\
    \ not explicitly called out in\n   this specification, also MAY result in audit\
    \ log entries.  There is\n   no requirement for the receiver to transmit any message\
    \ to the\n   purported transmitter in response to the detection of an auditable\n\
    \   event, because of the potential to induce denial of service via such\n   action.\n"
- title: 8. Use in Systems Supporting Information Flow Security
  contents:
  - "8. Use in Systems Supporting Information Flow Security\n   Information of various\
    \ sensitivity levels may be carried over a\n   single network.  Information labels\
    \ (e.g., Unclassified, Company\n   Proprietary, Secret) [DoD85, DoD87] are often\
    \ employed to distinguish\n   such information.  The use of labels facilitates\
    \ segregation of\n   information, in support of information flow security models,\
    \ e.g.,\n   the Bell-LaPadula model [BL73].  Such models, and corresponding\n\
    \   supporting technology, are designed to prevent the unauthorized flow\n   of\
    \ sensitive information, even in the face of Trojan Horse attacks.\n   Conventional,\
    \ discretionary access control (DAC) mechanisms, e.g.,\n   based on access control\
    \ lists, generally are not sufficient to\n   support such policies, and thus facilities\
    \ such as the SPD do not\n   suffice in such environments.\n   In the military\
    \ context, technology that supports such models is\n   often referred to as multi-level\
    \ security (MLS).  Computers and\n   networks often are designated \"multi-level\
    \ secure\" if they support\n   the separation of labelled data in conjunction\
    \ with information flow\n   security policies.  Although such technology is more\
    \ broadly\n   applicable than just military applications, this document uses the\n\
    \   acronym \"MLS\" to designate the technology, consistent with much\n   extant\
    \ literature.\n   IPsec mechanisms can easily support MLS networking.  MLS networking\n\
    \   requires the use of strong Mandatory Access Controls (MAC), which\n   unprivileged\
    \ users or unprivileged processes are incapable of\n   controlling or violating.\
    \  This section pertains only to the use of\n   these IP security mechanisms in\
    \ MLS (information flow security\n   policy) environments.  Nothing in this section\
    \ applies to systems not\n   claiming to provide MLS.\n   As used in this section,\
    \ \"sensitivity information\" might include\n   implementation-defined hierarchic\
    \ levels, categories, and/or\n   releasability information.\n   AH can be used\
    \ to provide strong authentication in support of\n   mandatory access control\
    \ decisions in MLS environments.  If explicit\n   IP sensitivity information (e.g.,\
    \ IPSO [Ken91]) is used and\n   confidentiality is not considered necessary within\
    \ the particular\n   operational environment, AH can be used to authenticate the\
    \ binding\n   between sensitivity labels in the IP header and the IP payload\n\
    \   (including user data).  This is a significant improvement over\n   labeled\
    \ IPv4 networks where the sensitivity information is trusted\n   even though there\
    \ is no authentication or cryptographic binding of\n   the information to the\
    \ IP header and user data.  IPv4 networks might\n   or might not use explicit\
    \ labelling.  IPv6 will normally use implicit\n   sensitivity information that\
    \ is part of the IPsec Security\n   Association but not transmitted with each\
    \ packet instead of using\n   explicit sensitivity information.  All explicit\
    \ IP sensitivity\n   information MUST be authenticated using either ESP, AH, or\
    \ both.\n   Encryption is useful and can be desirable even when all of the hosts\n\
    \   are within a protected environment, for example, behind a firewall or\n  \
    \ disjoint from any external connectivity.  ESP can be used, in\n   conjunction\
    \ with appropriate key management and encryption\n   algorithms, in support of\
    \ both DAC and MAC.  (The choice of\n   encryption and authentication algorithms,\
    \ and the assurance level of\n   an IPsec implementation will determine the environments\
    \ in which an\n   implementation may be deemed sufficient to satisfy MLS requirements.)\n\
    \   Key management can make use of sensitivity information to provide\n   MAC.\
    \  IPsec implementations on systems claiming to provide MLS SHOULD\n   be capable\
    \ of using IPsec to provide MAC for IP-based communications.\n"
- title: 8.1 Relationship Between Security Associations and Data Sensitivity
  contents:
  - "8.1 Relationship Between Security Associations and Data Sensitivity\n   Both\
    \ the Encapsulating Security Payload and the Authentication Header\n   can be\
    \ combined with appropriate Security Association policies to\n   provide multi-level\
    \ secure networking.  In this case each SA (or SA\n   bundle) is normally used\
    \ for only a single instance of sensitivity\n   information.  For example, \"\
    PROPRIETARY - Internet Engineering\" must\n   be associated with a different SA\
    \ (or SA bundle) from \"PROPRIETARY -\n   Finance\".\n"
- title: 8.2 Sensitivity Consistency Checking
  contents:
  - "8.2 Sensitivity Consistency Checking\n   An MLS implementation (both host and\
    \ router) MAY associate\n   sensitivity information, or a range of sensitivity\
    \ information with\n   an interface, or a configured IP address with its associated\
    \ prefix\n   (the latter is sometimes referred to as a logical interface, or an\n\
    \   interface alias).  If such properties exist, an implementation SHOULD\n  \
    \ compare the sensitivity information associated with the packet\n   against the\
    \ sensitivity information associated with the interface or\n   address/prefix\
    \ from which the packet arrived, or through which the\n   packet will depart.\
    \  This check will either verify that the\n   sensitivities match, or that the\
    \ packet's sensitivity falls within\n   the range of the interface or address/prefix.\n\
    \   The checking SHOULD be done on both inbound and outbound processing.\n"
- title: 8.3 Additional MLS Attributes for Security Association Databases
  contents:
  - "8.3 Additional MLS Attributes for Security Association Databases\n   Section\
    \ 4.4 discussed two Security Association databases (the\n   Security Policy Database\
    \ (SPD) and the Security Association Database\n   (SAD)) and the associated policy\
    \ selectors and SA attributes.  MLS\n   networking introduces an additional selector/attribute:\n\
    \           - Sensitivity information.\n   The Sensitivity information aids in\
    \ selecting the appropriate\n   algorithms and key strength, so that the traffic\
    \ gets a level of\n   protection appropriate to its importance or sensitivity\
    \ as described\n   in section 8.1.  The exact syntax of the sensitivity information\
    \ is\n   implementation defined.\n"
- title: 8.4 Additional Inbound Processing Steps for MLS Networking
  contents:
  - "8.4 Additional Inbound Processing Steps for MLS Networking\n   After an inbound\
    \ packet has passed through IPsec processing, an MLS\n   implementation SHOULD\
    \ first check the packet's sensitivity (as\n   defined by the SA (or SA bundle)\
    \ used for the packet) with the\n   interface or address/prefix as described in\
    \ section 8.2 before\n   delivering the datagram to an upper-layer protocol or\
    \ forwarding it.\n   The MLS system MUST retain the binding between the data received\
    \ in\n   an IPsec protected packet and the sensitivity information in the SA\n\
    \   or SAs used for processing, so appropriate policy decisions can be\n   made\
    \ when delivering the datagram to an application or forwarding\n   engine.  The\
    \ means for maintaining this binding are implementation\n   specific.\n"
- title: 8.5 Additional Outbound Processing Steps for MLS Networking
  contents:
  - "8.5 Additional Outbound Processing Steps for MLS Networking\n   An MLS implementation\
    \ of IPsec MUST perform two additional checks\n   besides the normal steps detailed\
    \ in section 5.1.1.  When consulting\n   the SPD or the SAD to find an outbound\
    \ security association, the MLS\n   implementation MUST use the sensitivity of\
    \ the data to select an\n   appropriate outbound SA or SA bundle.  The second\
    \ check comes before\n   forwarding the packet out to its destination, and is\
    \ the sensitivity\n   consistency checking described in section 8.2.\n"
- title: 8.6 Additional MLS Processing for Security Gateways
  contents:
  - "8.6 Additional MLS Processing for Security Gateways\n   An MLS security gateway\
    \ MUST follow the previously mentioned inbound\n   and outbound processing rules\
    \ as well as perform some additional\n   processing specific to the intermediate\
    \ protection of packets in an\n   MLS environment.\n   A security gateway MAY\
    \ act as an outbound proxy, creating SAs for MLS\n   systems that originate packets\
    \ forwarded by the gateway.  These MLS\n   systems may explicitly label the packets\
    \ to be forwarded, or the\n   whole originating network may have sensitivity characteristics\n\
    \   associated with it.  The security gateway MUST create and use\n   appropriate\
    \ SAs for AH, ESP, or both, to protect such traffic it\n   forwards.\n   Similarly\
    \ such a gateway SHOULD accept and process inbound AH and/or\n   ESP packets and\
    \ forward appropriately, using explicit packet\n   labeling, or relying on the\
    \ sensitivity characteristics of the\n   destination network.\n"
- title: 9. Performance Issues
  contents:
  - "9. Performance Issues\n   The use of IPsec imposes computational performance\
    \ costs on the hosts\n   or security gateways that implement these protocols.\
    \  These costs are\n   associated with the memory needed for IPsec code and data\
    \ structures,\n   and the computation of integrity check values, encryption and\n\
    \   decryption, and added per-packet handling.  The per-packet\n   computational\
    \ costs will be manifested by increased latency and,\n   possibly, reduced throughout.\
    \  Use of SA/key management protocols,\n   especially ones that employ public\
    \ key cryptography, also adds\n   computational performance costs to use of IPsec.\
    \  These per-\n   association computational costs will be manifested in terms\
    \ of\n   increased latency in association establishment.  For many hosts, it\n\
    \   is anticipated that software-based cryptography will not appreciably\n   reduce\
    \ throughput, but hardware may be required for security gateways\n   (since they\
    \ represent aggregation points), and for some hosts.\n   The use of IPsec also\
    \ imposes bandwidth utilization costs on\n   transmission, switching, and routing\
    \ components of the Internet\n   infrastructure, components not implementing IPsec.\
    \  This is due to\n   the increase in the packet size resulting from the addition\
    \ of AH\n   and/or ESP headers, AH and ESP tunneling (which adds a second IP\n\
    \   header), and the increased packet traffic associated with key\n   management\
    \ protocols.  It is anticipated that, in most instances,\n   this increased bandwidth\
    \ demand will not noticeably affect the\n   Internet infrastructure.  However,\
    \ in some instances, the effects may\n   be significant, e.g., transmission of\
    \ ESP encrypted traffic over a\n   dialup link that otherwise would have compressed\
    \ the traffic.\n   Note: The initial SA establishment overhead will be felt in\
    \ the first\n   packet.  This delay could impact the transport layer and application.\n\
    \   For example, it could cause TCP to retransmit the SYN before the\n   ISAKMP\
    \ exchange is done.  The effect of the delay would be different\n   on UDP than\
    \ TCP because TCP shouldn't transmit anything other than\n   the SYN until the\
    \ connection is set up whereas UDP will go ahead and\n   transmit data beyond\
    \ the first packet.\n   Note: As discussed earlier, compression can still be employed\
    \ at\n   layers above IP.  There is an IETF working group (IP Payload\n   Compression\
    \ Protocol (ippcp)) working on \"protocol specifications\n   that make it possible\
    \ to perform lossless compression on individual\n   payloads before the payload\
    \ is processed by a protocol that encrypts\n   it. These specifications will allow\
    \ for compression operations to be\n   performed prior to the encryption of a\
    \ payload by IPsec protocols.\"\n"
- title: 10. Conformance Requirements
  contents:
  - "10. Conformance Requirements\n   All IPv4 systems that claim to implement IPsec\
    \ MUST comply with all\n   requirements of the Security Architecture document.\
    \  All IPv6 systems\n   MUST comply with all requirements of the Security Architecture\n\
    \   document.\n"
- title: 11. Security Considerations
  contents:
  - "11. Security Considerations\n   The focus of this document is security; hence\
    \ security considerations\n   permeate this specification.\n"
- title: 12. Differences from RFC 1825
  contents:
  - "12. Differences from RFC 1825\n   This architecture document differs substantially\
    \ from RFC 1825 in\n   detail and in organization, but the fundamental notions\
    \ are\n   unchanged.  This document provides considerable additional detail in\n\
    \   terms of compliance specifications.  It introduces the SPD and SAD,\n   and\
    \ the notion of SA selectors.  It is aligned with the new versions\n   of AH and\
    \ ESP, which also differ from their predecessors.  Specific\n   requirements for\
    \ supported combinations of AH and ESP are newly\n   added, as are details of\
    \ PMTU management.\n"
- title: Acknowledgements
  contents:
  - "Acknowledgements\n   Many of the concepts embodied in this specification were\
    \ derived from\n   or influenced by the US Government's SP3 security protocol,\
    \ ISO/IEC's\n   NLSP, the proposed swIPe security protocol [SDNS, ISO, IB93, IBK93],\n\
    \   and the work done for SNMP Security and SNMPv2 Security.\n   For over 3 years\
    \ (although it sometimes seems *much* longer), this\n   document has evolved through\
    \ multiple versions and iterations.\n   During this time, many people have contributed\
    \ significant ideas and\n   energy to the process and the documents themselves.\
    \  The authors\n   would like to thank Karen Seo for providing extensive help\
    \ in the\n   review, editing, background research, and coordination for this\n\
    \   version of the specification.  The authors would also like to thank\n   the\
    \ members of the IPsec and IPng working groups, with special\n   mention of the\
    \ efforts of (in alphabetic order): Steve Bellovin,\n   Steve Deering, James Hughes,\
    \ Phil Karn, Frank Kastenholz, Perry\n   Metzger, David Mihelcic, Hilarie Orman,\
    \ Norman Shulman, William\n   Simpson, Harry Varnis, and Nina Yuan.\n"
- title: Appendix A -- Glossary
  contents:
  - "Appendix A -- Glossary\n   This section provides definitions for several key\
    \ terms that are\n   employed in this document.  Other documents provide additional\n\
    \   definitions and background information relevant to this technology,\n   e.g.,\
    \ [VK83, HA94].  Included in this glossary are generic security\n   service and\
    \ security mechanism terms, plus IPsec-specific terms.\n     Access Control\n\
    \        Access control is a security service that prevents unauthorized\n   \
    \     use of a resource, including the prevention of use of a resource\n     \
    \   in an unauthorized manner.  In the IPsec context, the resource\n        to\
    \ which access is being controlled is often:\n                o for a host, computing\
    \ cycles or data\n                o for a security gateway, a network behind the\
    \ gateway\n        or\n                  bandwidth on that network.\n     Anti-replay\n\
    \        [See \"Integrity\" below]\n     Authentication\n        This term is\
    \ used informally to refer to the combination of two\n        nominally distinct\
    \ security services, data origin authentication\n        and connectionless integrity.\
    \  See the definitions below for\n        each of these services.\n     Availability\n\
    \        Availability, when viewed as a security service, addresses the\n    \
    \    security concerns engendered by attacks against networks that\n        deny\
    \ or degrade service.  For example, in the IPsec context, the\n        use of\
    \ anti-replay mechanisms in AH and ESP support\n        availability.\n     Confidentiality\n\
    \        Confidentiality is the security service that protects data from\n   \
    \     unauthorized disclosure.  The primary confidentiality concern in\n     \
    \   most instances is unauthorized disclosure of application level\n        data,\
    \ but disclosure of the external characteristics of\n        communication also\
    \ can be a concern in some circumstances.\n        Traffic flow confidentiality\
    \ is the service that addresses this\n        latter concern by concealing source\
    \ and destination addresses,\n        message length, or frequency of communication.\
    \  In the IPsec\n        context, using ESP in tunnel mode, especially at a security\n\
    \        gateway, can provide some level of traffic flow confidentiality.\n  \
    \      (See also traffic analysis, below.)\n     Encryption\n        Encryption\
    \ is a security mechanism used to transform data from\n        an intelligible\
    \ form (plaintext) into an unintelligible form\n        (ciphertext), to provide\
    \ confidentiality.  The inverse\n        transformation process is designated\
    \ \"decryption\".  Oftimes the\n        term \"encryption\" is used to generically\
    \ refer to both\n        processes.\n     Data Origin Authentication\n       \
    \ Data origin authentication is a security service that verifies\n        the\
    \ identity of the claimed source of data.  This service is\n        usually bundled\
    \ with connectionless integrity service.\n     Integrity\n        Integrity is\
    \ a security service that ensures that modifications\n        to data are detectable.\
    \  Integrity comes in various flavors to\n        match application requirements.\
    \  IPsec supports two forms of\n        integrity: connectionless and a form of\
    \ partial sequence\n        integrity.  Connectionless integrity is a service\
    \ that detects\n        modification of an individual IP datagram, without regard\
    \ to the\n        ordering of the datagram in a stream of traffic.  The form of\n\
    \        partial sequence integrity offered in IPsec is referred to as\n     \
    \   anti-replay integrity, and it detects arrival of duplicate IP\n        datagrams\
    \ (within a constrained window).  This is in contrast to\n        connection-oriented\
    \ integrity, which imposes more stringent\n        sequencing requirements on\
    \ traffic, e.g., to be able to detect\n        lost or re-ordered messages.  Although\
    \ authentication and\n        integrity services often are cited separately, in\
    \ practice they\n        are intimately connected and almost always offered in\
    \ tandem.\n     Security Association (SA)\n        A simplex (uni-directional)\
    \ logical connection, created for\n        security purposes.  All traffic traversing\
    \ an SA is provided the\n        same security processing.  In IPsec, an SA is\
    \ an internet layer\n        abstraction implemented through the use of AH or\
    \ ESP.\n     Security Gateway\n        A security gateway is an intermediate system\
    \ that acts as the\n        communications interface between two networks.  The\
    \ set of hosts\n        (and networks) on the external side of the security gateway\
    \ is\n        viewed as untrusted (or less trusted), while the networks and\n\
    \        hosts and on the internal side are viewed as trusted (or more\n     \
    \   trusted).  The internal subnets and hosts served by a security\n        gateway\
    \ are presumed to be trusted by virtue of sharing a\n        common, local, security\
    \ administration.  (See \"Trusted\n        Subnetwork\" below.) In the IPsec context,\
    \ a security gateway is\n        a point at which AH and/or ESP is implemented\
    \ in order to serve\n        a set of internal hosts, providing security services\
    \ for these\n        hosts when they communicate with external hosts also employing\n\
    \        IPsec (either directly or via another security gateway).\n     SPI\n\
    \        Acronym for \"Security Parameters Index\".  The combination of a\n  \
    \      destination address, a security protocol, and an SPI uniquely\n       \
    \ identifies a security association (SA, see above).  The SPI is\n        carried\
    \ in AH and ESP protocols to enable the receiving system\n        to select the\
    \ SA under which a received packet will be\n        processed.  An SPI has only\
    \ local significance, as defined by\n        the creator of the SA (usually the\
    \ receiver of the packet\n        carrying the SPI); thus an SPI is generally\
    \ viewed as an opaque\n        bit string.  However, the creator of an SA may\
    \ choose to\n        interpret the bits in an SPI to facilitate local processing.\n\
    \     Traffic Analysis\n        The analysis of network traffic flow for the purpose\
    \ of deducing\n        information that is useful to an adversary.  Examples of\
    \ such\n        information are frequency of transmission, the identities of the\n\
    \        conversing parties, sizes of packets, flow identifiers, etc.\n      \
    \  [Sch94]\n     Trusted Subnetwork\n        A subnetwork containing hosts and\
    \ routers that trust each other\n        not to engage in active or passive attacks.\
    \  There also is an\n        assumption that the underlying communications channel\
    \ (e.g., a\n        LAN or CAN) isn't being attacked by other means.\n"
- title: Appendix B -- Analysis/Discussion of PMTU/DF/Fragmentation Issues
  contents:
  - 'Appendix B -- Analysis/Discussion of PMTU/DF/Fragmentation Issues

    '
- title: B.1 DF bit
  contents:
  - "B.1 DF bit\n   In cases where a system (host or gateway) adds an encapsulating\n\
    \   header (e.g., ESP tunnel), should/must the DF bit in the original\n   packet\
    \ be copied to the encapsulating header?\n   Fragmenting seems correct for some\
    \ situations, e.g., it might be\n   appropriate to fragment packets over a network\
    \ with a very small MTU,\n   e.g., a packet radio network, or a cellular phone\
    \ hop to mobile node,\n   rather than propagate back a very small PMTU for use\
    \ over the rest of\n   the path.  In other situations, it might be appropriate\
    \ to set the DF\n   bit in order to get feedback from later routers about PMTU\n\
    \   constraints which require fragmentation.  The existence of both of\n   these\
    \ situations argues for enabling a system to decide whether or\n   not to fragment\
    \ over a particular network \"link\", i.e., for requiring\n   an implementation\
    \ to be able to copy the DF bit (and to process ICMP\n   PMTU messages), but making\
    \ it an option to be selected on a per\n   interface basis.  In other words, an\
    \ administrator should be able to\n   configure the router's treatment of the\
    \ DF bit (set, clear, copy from\n   encapsulated header) for each interface.\n\
    \   Note: If a bump-in-the-stack implementation of IPsec attempts to\n   apply\
    \ different IPsec algorithms based on source/destination ports,\n   it will be\
    \ difficult to apply Path MTU adjustments.\n"
- title: B.2 Fragmentation
  contents:
  - "B.2 Fragmentation\n   If required, IP fragmentation occurs after IPsec processing\
    \ within an\n   IPsec implementation.  Thus, transport mode AH or ESP is applied\
    \ only\n   to whole IP datagrams (not to IP fragments).  An IP packet to which\n\
    \   AH or ESP has been applied may itself be fragmented by routers en\n   route,\
    \ and such fragments MUST be reassembled prior to IPsec\n   processing at a receiver.\
    \  In tunnel mode, AH or ESP is applied to an\n   IP packet, the payload of which\
    \ may be a fragmented IP packet.  For\n   example, a security gateway, \"bump-in-the-stack\"\
    \ (BITS), or \"bump-\n   in-the-wire\" (BITW) IPsec implementation may apply tunnel\
    \ mode AH to\n   such fragments.  Note that BITS or BITW implementations are examples\n\
    \   of where a host IPsec implementation might receive fragments to which\n  \
    \ tunnel mode is to be applied.  However, if transport mode is to be\n   applied,\
    \ then these implementations MUST reassemble the fragments\n   prior to applying\
    \ IPsec.\n   NOTE: IPsec always has to figure out what the encapsulating IP header\n\
    \   fields are.  This is independent of where you insert IPsec and is\n   intrinsic\
    \ to the definition of IPsec.  Therefore any IPsec\n   implementation that is\
    \ not integrated into an IP implementation must\n   include code to construct\
    \ the necessary IP headers (e.g., IP2):\n        o AH-tunnel --> IP2-AH-IP1-Transport-Data\n\
    \        o ESP-tunnel -->  IP2-ESP_hdr-IP1-Transport-Data-ESP_trailer\n   *********************************************************************\n\
    \   Overall, the fragmentation/reassembly approach described above works\n   for\
    \ all cases examined.\n                              AH Xport   AH Tunnel  ESP\
    \ Xport  ESP Tunnel\n Implementation approach      IPv4 IPv6  IPv4 IPv6  IPv4\
    \ IPv6  IPv4 IPv6\n -----------------------      ---- ----  ---- ----  ---- ----\
    \  ---- ----\n Hosts (integr w/ IP stack)     Y    Y     Y    Y     Y    Y   \
    \  Y    Y\n Hosts (betw/ IP and drivers)   Y    Y     Y    Y     Y    Y     Y\
    \    Y\n S. Gwy (integr w/ IP stack)               Y    Y                Y   \
    \ Y\n Outboard crypto processor *\n        * If the crypto processor system has\
    \ its own IP address, then it\n          is covered by the security gateway case.\
    \  This box receives\n          the packet from the host and performs IPsec processing.\
    \  It\n          has to be able to handle the same AH, ESP, and related\n    \
    \      IPv4/IPv6 tunnel processing that a security gateway would have\n      \
    \    to handle.  If it doesn't have it's own address, then it is\n          similar\
    \ to the bump-in-the stack implementation between IP and\n          the network\
    \ drivers.\n   The following analysis assumes that:\n        1. There is only\
    \ one IPsec module in a given system's stack.\n           There isn't an IPsec\
    \ module A (adding ESP/encryption and\n           thus) hiding the transport protocol,\
    \ SRC port, and DEST port\n           from IPsec module B.\n        2. There are\
    \ several places where IPsec could be implemented (as\n           shown in the\
    \ table above).\n                a. Hosts with integration of IPsec into the native\
    \ IP\n                   implementation.  Implementer has access to the source\n\
    \                   for the stack.\n                b. Hosts with bump-in-the-stack\
    \ implementations, where\n                   IPsec is implemented between IP and\
    \ the local network\n                   drivers.  Source access for stack is not\
    \ available;\n                   but there are well-defined interfaces that allows\
    \ the\n                   IPsec code to be incorporated into the system.\n   \
    \             c. Security gateways and outboard crypto processors with\n     \
    \              integration of IPsec into the stack.\n        3. Not all of the\
    \ above approaches are feasible in all hosts.\n           But it was assumed that\
    \ for each approach, there are some\n           hosts for whom the approach is\
    \ feasible.\n   For each of the above 3 categories, there are IPv4 and IPv6, AH\n\
    \   transport and tunnel modes, and ESP transport and tunnel modes -- for\n  \
    \ a total of 24 cases (3 x 2 x 4).\n   Some header fields and interface fields\
    \ are listed here for ease of\n   reference -- they're not in the header order,\
    \ but instead listed to\n   allow comparison between the columns.  (* = not covered\
    \ by AH\n   authentication.  ESP authentication doesn't cover any headers that\n\
    \   precede it.)\n                                             IP/Transport Interface\n\
    \             IPv4            IPv6            (RFC 1122 -- Sec 3.4)\n        \
    \     ----            ----            ----------------------\n             Version\
    \ = 4     Version = 6\n             Header Len\n             *TOS            Class,Flow\
    \ Lbl  TOS\n             Packet Len      Payload Len     Len\n             ID\
    \                              ID (optional)\n             *Flags            \
    \              DF\n             *Offset\n             *TTL            *Hop Limit\
    \      TTL\n             Protocol        Next Header\n             *Checksum\n\
    \             Src Address     Src Address     Src Address\n             Dst Address\
    \     Dst Address     Dst Address\n             Options?        Options?     \
    \   Opt\n             ? = AH covers Option-Type and Option-Length, but\n     \
    \            might not cover Option-Data.\n   The results for each of the 20 cases\
    \ is shown below (\"works\" = will\n   work if system fragments after outbound\
    \ IPsec processing, reassembles\n   before inbound IPsec processing).  Notes indicate\
    \ implementation\n   issues.\n    a. Hosts (integrated into IP stack)\n      \
    \    o AH-transport  --> (IP1-AH-Transport-Data)\n                    - IPv4 --\
    \ works\n                    - IPv6 -- works\n          o AH-tunnel --> (IP2-AH-IP1-Transport-Data)\n\
    \                    - IPv4 -- works\n                    - IPv6 -- works\n  \
    \        o ESP-transport --> (IP1-ESP_hdr-Transport-Data-ESP_trailer)\n      \
    \              - IPv4 -- works\n                    - IPv6 -- works\n        \
    \  o ESP-tunnel -->  (IP2-ESP_hdr-IP1-Transport-Data-ESP_trailer)\n          \
    \          - IPv4 -- works\n                    - IPv6 -- works\n    b. Hosts\
    \ (Bump-in-the-stack) -- put IPsec between IP layer and\n       network drivers.\
    \  In this case, the IPsec module would have to do\n       something like one\
    \ of the following for fragmentation and\n       reassembly.\n            - do\
    \ the fragmentation/reassembly work itself and\n              send/receive the\
    \ packet directly to/from the network\n              layer.  In AH or ESP transport\
    \ mode, this is fine.  In AH\n              or ESP tunnel mode where the tunnel\
    \ end is at the ultimate\n              destination, this is fine.  But in AH\
    \ or ESP tunnel modes\n              where the tunnel end is different from the\
    \ ultimate\n              destination and where the source host is multi-homed,\
    \ this\n              approach could result in sub-optimal routing because the\n\
    \              IPsec module may be unable to obtain the information\n        \
    \      needed (LAN interface and next-hop gateway) to direct the\n           \
    \   packet to the appropriate network interface.  This is not\n              a\
    \ problem if the interface and next-hop gateway are the\n              same for\
    \ the ultimate destination and for the tunnel end.\n              But if they\
    \ are different, then IPsec would need to know\n              the LAN interface\
    \ and the next-hop gateway for the tunnel\n              end.  (Note: The tunnel\
    \ end (security gateway) is highly\n              likely to be on the regular\
    \ path to the ultimate\n              destination.  But there could also be more\
    \ than one path\n              to the destination, e.g., the host could be at\
    \ an\n              organization with 2 firewalls.  And the path being used\n\
    \              could involve the less commonly chosen firewall.)  OR\n       \
    \     - pass the IPsec'd packet back to the IP layer where an\n              extra\
    \ IP header would end up being pre-pended and the\n              IPsec module\
    \ would have to check and let IPsec'd fragments\n              go by.\n      \
    \                              OR\n            - pass the packet contents to the\
    \ IP layer in a form such\n              that the IP layer recreates an appropriate\
    \ IP header\n       At the network layer, the IPsec module will have access to\
    \ the\n       following selectors from the packet -- SRC address, DST address,\n\
    \       Next Protocol, and if there's a transport layer header --> SRC\n     \
    \  port and DST port.  One cannot assume IPsec has access to the\n       Name.\
    \  It is assumed that the available selector information is\n       sufficient\
    \ to figure out the relevant Security Policy entry and\n       Security Association(s).\n\
    \          o AH-transport  --> (IP1-AH-Transport-Data)\n                    -\
    \ IPv4 -- works\n                    - IPv6 -- works\n          o AH-tunnel -->\
    \ (IP2-AH-IP1-Transport-Data)\n                    - IPv4 -- works\n         \
    \           - IPv6 -- works\n          o ESP-transport --> (IP1-ESP_hdr-Transport-Data-ESP_trailer)\n\
    \                    - IPv4 -- works\n                    - IPv6 -- works\n  \
    \        o ESP-tunnel -->  (IP2-ESP_hdr-IP1-Transport-Data-ESP_trailer)\n    \
    \                - IPv4 -- works\n                    - IPv6 -- works\n    c.\
    \ Security gateways -- integrate IPsec into the IP stack\n       NOTE: The IPsec\
    \ module will have access to the following\n       selectors from the packet --\
    \ SRC address, DST address, Next\n       Protocol, and if there's a transport\
    \ layer header --> SRC port\n       and DST port.  It won't have access to the\
    \ User ID (only Hosts\n       have access to User ID information.)  Unlike some\
    \ Bump-in-the-\n       stack implementations, security gateways may be able to\
    \ look up\n       the Source Address in the DNS to provide a System Name, e.g.,\
    \ in\n       situations involving use of dynamically assigned IP addresses in\n\
    \       conjunction with dynamically updated DNS entries.  It also won't\n   \
    \    have access to the transport layer information if there is an ESP\n     \
    \  header, or if it's not the first fragment of a fragmented\n       message.\
    \  It is assumed that the available selector information\n       is sufficient\
    \ to figure out the relevant Security Policy entry\n       and Security Association(s).\n\
    \          o AH-tunnel --> (IP2-AH-IP1-Transport-Data)\n                    -\
    \ IPv4 -- works\n                    - IPv6 -- works\n          o ESP-tunnel -->\
    \  (IP2-ESP_hdr-IP1-Transport-Data-ESP_trailer)\n                    - IPv4 --\
    \ works\n                    - IPv6 -- works\n   **********************************************************************\n"
- title: B.3 Path MTU Discovery
  contents:
  - "B.3 Path MTU Discovery\n   As mentioned earlier, \"ICMP PMTU\" refers to an ICMP\
    \ message used for\n   Path MTU Discovery.\n   The legend for the diagrams below\
    \ in B.3.1 and B.3.3 (but not B.3.2)\n   is:\n        ==== = security association\
    \ (AH or ESP, transport or tunnel)\n        ---- = connectivity (or if so labelled,\
    \ administrative boundary)\n        .... = ICMP message (hereafter referred to\
    \ as ICMP PMTU) for\n                IPv4:\n                - Type = 3 (Destination\
    \ Unreachable)\n                - Code = 4 (Fragmentation needed and DF set)\n\
    \                - Next-Hop MTU in the low-order 16 bits of the second\n     \
    \             word of the ICMP header (labelled unused in RFC 792),\n        \
    \          with high-order 16 bits set to zero\n                IPv6 (RFC 1885):\n\
    \                - Type = 2 (Packet Too Big)\n                - Code = 0 (Fragmentation\
    \ needed and DF set)\n                - Next-Hop MTU in the 32 bit MTU field of\
    \ the ICMP6\n        Hx   = host x\n        Rx   = router x\n        SGx  = security\
    \ gateway x\n        X*   = X supports IPsec\n"
- title: B.3.1 Identifying the Originating Host(s)
  contents:
  - 'B.3.1 Identifying the Originating Host(s)

    '
- title: The amount of information returned with the ICMP message is limited
  contents:
  - 'The amount of information returned with the ICMP message is limited

    '
- title: and this affects what selectors are available to identify security
  contents:
  - 'and this affects what selectors are available to identify security

    '
- title: associations, originating hosts, etc. for use in further propagating
  contents:
  - 'associations, originating hosts, etc. for use in further propagating

    '
- title: the PMTU information.
  contents:
  - 'the PMTU information.

    '
- title: In brief...  An ICMP message must contain the following information
  contents:
  - 'In brief...  An ICMP message must contain the following information

    '
- title: 'from the "offending" packet:'
  contents:
  - "from the \"offending\" packet:\n        - IPv4 (RFC 792) --  IP header plus a\
    \ minimum of 64 bits\n"
- title: Accordingly, in the IPv4 context, an ICMP PMTU may identify only the
  contents:
  - 'Accordingly, in the IPv4 context, an ICMP PMTU may identify only the

    '
- title: first (outermost) security association.  This is because the ICMP
  contents:
  - 'first (outermost) security association.  This is because the ICMP

    '
- title: PMTU may contain only 64 bits of the "offending" packet beyond the IP
  contents:
  - 'PMTU may contain only 64 bits of the "offending" packet beyond the IP

    '
- title: header, which would capture only the first SPI from AH or ESP.  In
  contents:
  - 'header, which would capture only the first SPI from AH or ESP.  In

    '
- title: the IPv6 context, an ICMP PMTU will probably provide all the SPIs and
  contents:
  - 'the IPv6 context, an ICMP PMTU will probably provide all the SPIs and

    '
- title: the selectors in the IP header, but maybe not the SRC/DST ports (in
  contents:
  - 'the selectors in the IP header, but maybe not the SRC/DST ports (in

    '
- title: the transport header) or the encapsulated (TCP, UDP, etc.) protocol.
  contents:
  - 'the transport header) or the encapsulated (TCP, UDP, etc.) protocol.

    '
- title: Moreover, if ESP is used, the transport ports and protocol selectors
  contents:
  - 'Moreover, if ESP is used, the transport ports and protocol selectors

    '
- title: may be encrypted.
  contents:
  - 'may be encrypted.

    '
- title: Looking at the diagram below of a security gateway tunnel (as
  contents:
  - 'Looking at the diagram below of a security gateway tunnel (as

    '
- title: mentioned elsewhere, security gateways do not use transport mode)...
  contents:
  - "mentioned elsewhere, security gateways do not use transport mode)...\n     H1\
    \   ===================           H3\n       \\  |                 |         \
    \ /\n   H0 -- SG1* ---- R1 ---- SG2* ---- R2 -- H5\n       /  ^        |     \
    \              \\\n     H2   |........|                    H4\n   Suppose that\
    \ the security policy for SG1 is to use a single SA to SG2\n   for all the traffic\
    \ between hosts H0, H1, and H2 and hosts H3, H4,\n   and H5.  And suppose H0 sends\
    \ a data packet to H5 which causes R1 to\n   send an ICMP PMTU message to SG1.\
    \  If the PMTU message has only the\n   SPI, SG1 will be able to look up the SA\
    \ and find the list of possible\n   hosts (H0, H1, H2, wildcard); but SG1 will\
    \ have no way to figure out\n   that H0 sent the traffic that triggered the ICMP\
    \ PMTU message.\n      original        after IPsec     ICMP\n      packet    \
    \      processing      packet\n      --------        -----------     ------\n\
    \                                      IP-3 header (S = R1, D = SG1)\n       \
    \                               ICMP header (includes PMTU)\n                \
    \      IP-2 header     IP-2 header (S = SG1, D = SG2)\n                      ESP\
    \ header      minimum of 64 bits of ESP hdr (*)\n      IP-1 header     IP-1 header\n\
    \      TCP header      TCP header\n      TCP data        TCP data\n          \
    \            ESP trailer\n      (*) The 64 bits will include enough of the ESP\
    \ (or AH) header to\n          include the SPI.\n              - ESP -- SPI (32\
    \ bits), Seq number (32 bits)\n              - AH -- Next header (8 bits), Payload\
    \ Len (8 bits),\n                Reserved (16 bits), SPI (32 bits)\n   This limitation\
    \ on the amount of information returned with an ICMP\n   message creates a problem\
    \ in identifying the originating hosts for\n   the packet (so as to know where\
    \ to further propagate the ICMP PMTU\n   information).  If the ICMP message contains\
    \ only 64 bits of the IPsec\n   header (minimum for IPv4), then the IPsec selectors\
    \ (e.g., Source and\n   Destination addresses, Next Protocol, Source and Destination\
    \ ports,\n   etc.) will have been lost.  But the ICMP error message will still\n\
    \   provide SG1 with the SPI, the PMTU information and the source and\n   destination\
    \ gateways for the relevant security association.\n   The destination security\
    \ gateway and SPI uniquely define a security\n   association which in turn defines\
    \ a set of possible originating\n   hosts.  At this point, SG1 could:\n   a. send\
    \ the PMTU information to all the possible originating hosts.\n      This would\
    \ not work well if the host list is a wild card or if\n      many/most of the\
    \ hosts weren't sending to SG1; but it might work\n      if the SPI/destination/etc\
    \ mapped to just one or a small number of\n      hosts.\n   b. store the PMTU\
    \ with the SPI/etc and wait until the next packet(s)\n      arrive from the originating\
    \ host(s) for the relevant security\n      association.  If it/they are bigger\
    \ than the PMTU, drop the\n      packet(s), and compose ICMP PMTU message(s) with\
    \ the new packet(s)\n      and the updated PMTU, and send the originating host(s)\
    \ the ICMP\n      message(s) about the problem.  This involves a delay in notifying\n\
    \      the originating host(s), but avoids the problems of (a).\n   Since only\
    \ the latter approach is feasible in all instances, a\n   security gateway MUST\
    \ provide such support, as an option.  However,\n   if the ICMP message contains\
    \ more information from the original\n   packet, then there may be enough information\
    \ to immediately determine\n   to which host to propagate the ICMP/PMTU message\
    \ and to provide that\n   system with the 5 fields (source address, destination\
    \ address, source\n   port, destination port, and transport protocol) needed to\
    \ determine\n   where to store/update the PMTU.  Under such circumstances, a security\n\
    \   gateway MUST generate an ICMP PMTU message immediately upon receipt\n   of\
    \ an ICMP PMTU from further down the path.  NOTE: The Next Protocol\n   field\
    \ may not be contained in the ICMP message and the use of ESP\n   encryption may\
    \ hide the selector fields that have been encrypted.\n"
- title: B.3.2 Calculation of PMTU
  contents:
  - "B.3.2 Calculation of PMTU\n   The calculation of PMTU from an ICMP PMTU has to\
    \ take into account\n   the addition of any IPsec header by H1 -- AH and/or ESP\
    \ transport, or\n   ESP or AH tunnel.  Within a single host, multiple applications\
    \ may\n   share an SPI and nesting of security associations may occur.  (See\n\
    \   Section 4.5 Basic Combinations of Security Associations for\n   description\
    \ of the combinations that MUST be supported).  The diagram\n   below illustrates\
    \ an example of security associations between a pair\n   of hosts (as viewed from\
    \ the perspective of one of the hosts.)  (ESPx\n   or AHx = transport mode)\n\
    \           Socket 1 -------------------------|\n                            \
    \                 |\n           Socket 2 (ESPx/SPI-A) ---------- AHx (SPI-B) --\
    \ Internet\n   In order to figure out the PMTU for each socket that maps to SPI-B,\n\
    \   it will be necessary to have backpointers from SPI-B to each of the 2\n  \
    \ paths that lead to it -- Socket 1 and Socket 2/SPI-A.\n"
- title: B.3.3 Granularity of Maintaining PMTU Data
  contents:
  - "B.3.3 Granularity of Maintaining PMTU Data\n   In hosts, the granularity with\
    \ which PMTU ICMP processing can be done\n   differs depending on the implementation\
    \ situation.  Looking at a\n   host, there are three situations that are of interest\
    \ with respect to\n   PMTU issues:\n   a. Integration of IPsec into the native\
    \ IP implementation\n   b. Bump-in-the-stack implementations, where IPsec is implemented\n\
    \      \"underneath\" an existing implementation of a TCP/IP protocol\n      stack,\
    \ between the native IP and the local network drivers\n   c. No IPsec implementation\
    \ -- This case is included because it is\n      relevant in cases where a security\
    \ gateway is sending PMTU\n      information back to a host.\n   Only in case\
    \ (a) can the PMTU data be maintained at the same\n   granularity as communication\
    \ associations.  In the other cases, the\n   IP layer will maintain PMTU data\
    \ at the granularity of Source and\n   Destination IP addresses (and optionally\
    \ TOS/Class), as described in\n   RFC 1191.  This is an important difference,\
    \ because more than one\n   communication association may map to the same source\
    \ and destination\n   IP addresses, and each communication association may have\
    \ a different\n   amount of IPsec header overhead (e.g., due to use of different\n\
    \   transforms or different algorithms).  The examples below illustrate\n   this.\n\
    \   In cases (a) and (b)...  Suppose you have the following situation.\n   H1\
    \ is sending to H2 and the packet to be sent from R1 to R2 exceeds\n   the PMTU\
    \ of the network hop between them.\n                 ==================================\n\
    \                 |                                |\n                H1* ---\
    \ R1 ----- R2 ---- R3 ---- H2*\n                 ^       |\n                 |.......|\n\
    \   If R1 is configured to not fragment subscriber traffic, then R1 sends\n  \
    \ an ICMP PMTU message with the appropriate PMTU to H1.  H1's\n   processing would\
    \ vary with the nature of the implementation.  In case\n   (a) (native IP), the\
    \ security services are bound to sockets or the\n   equivalent.  Here the IP/IPsec\
    \ implementation in H1 can store/update\n   the PMTU for the associated socket.\
    \  In case (b), the IP layer in H1\n   can store/update the PMTU but only at the\
    \ granularity of Source and\n   Destination addresses and possibly TOS/Class,\
    \ as noted above.  So the\n   result may be sub-optimal, since the PMTU for a\
    \ given\n   SRC/DST/TOS/Class will be the subtraction of the largest amount of\n\
    \   IPsec header used for any communication association between a given\n   source\
    \ and destination.\n   In case (c), there has to be a security gateway to have\
    \ any IPsec\n   processing.  So suppose you have the following situation.  H1\
    \ is\n   sending to H2 and the packet to be sent from SG1 to R exceeds the\n \
    \  PMTU of the network hop between them.\n                         ================\n\
    \                         |              |\n                H1 ---- SG1* --- R\
    \ --- SG2* ---- H2\n                 ^       |\n                 |.......|\n \
    \  As described above for case (b), the IP layer in H1 can store/update\n   the\
    \ PMTU but only at the granularity of Source and Destination\n   addresses, and\
    \ possibly TOS/Class.  So the result may be sub-optimal,\n   since the PMTU for\
    \ a given SRC/DST/TOS/Class will be the subtraction\n   of the largest amount\
    \ of IPsec header used for any communication\n   association between a given source\
    \ and destination.\n"
- title: B.3.4 Per Socket Maintenance of PMTU Data
  contents:
  - "B.3.4 Per Socket Maintenance of PMTU Data\n   Implementation of the calculation\
    \ of PMTU (Section B.3.2) and support\n   for PMTUs at the granularity of individual\
    \ \"communication\n   associations\" (Section B.3.3) is a local matter.  However,\
    \ a socket-\n   based implementation of IPsec in a host SHOULD maintain the\n\
    \   information on a per socket basis.  Bump in the stack systems MUST\n   pass\
    \ an ICMP PMTU to the host IP implementation, after adjusting it\n   for any IPsec\
    \ header overhead added by these systems.  The\n   determination of the overhead\
    \ SHOULD be determined by analysis of the\n   SPI and any other selector information\
    \ present in a returned ICMP\n   PMTU message.\n"
- title: B.3.5 Delivery of PMTU Data to the Transport Layer
  contents:
  - "B.3.5 Delivery of PMTU Data to the Transport Layer\n   The host mechanism for\
    \ getting the updated PMTU to the transport\n   layer is unchanged, as specified\
    \ in RFC 1191 (Path MTU Discovery).\n"
- title: B.3.6 Aging of PMTU Data
  contents:
  - "B.3.6 Aging of PMTU Data\n   This topic is covered in Section 6.1.2.4.\n"
- title: Appendix C -- Sequence Space Window Code Example
  contents:
  - "Appendix C -- Sequence Space Window Code Example\n   This appendix contains a\
    \ routine that implements a bitmask check for\n   a 32 packet window.  It was\
    \ provided by James Hughes\n   (jim_hughes@stortek.com) and Harry Varnis (hgv@anubis.network.com)\n\
    \   and is intended as an implementation example.  Note that this code\n   both\
    \ checks for a replay and updates the window.  Thus the algorithm,\n   as shown,\
    \ should only be called AFTER the packet has been\n   authenticated.  Implementers\
    \ might wish to consider splitting the\n   code to do the check for replays before\
    \ computing the ICV.  If the\n   packet is not a replay, the code would then compute\
    \ the ICV, (discard\n   any bad packets), and if the packet is OK, update the\
    \ window.\n"
- title: '#include <stdio.h>'
  contents:
  - '#include <stdio.h>

    '
- title: '#include <stdlib.h>'
  contents:
  - '#include <stdlib.h>

    '
- title: typedef unsigned long u_long;
  contents:
  - 'typedef unsigned long u_long;

    '
- title: enum {
  contents:
  - "enum {\n    ReplayWindowSize = 32\n"
- title: '};'
  contents:
  - '};

    '
- title: u_long bitmap = 0;                 /* session state - must be 32 bits */
  contents:
  - 'u_long bitmap = 0;                 /* session state - must be 32 bits */

    '
- title: u_long lastSeq = 0;                     /* session state */
  contents:
  - 'u_long lastSeq = 0;                     /* session state */

    '
- title: /* Returns 0 if packet disallowed, 1 if packet permitted */
  contents:
  - '/* Returns 0 if packet disallowed, 1 if packet permitted */

    '
- title: int ChkReplayWindow(u_long seq);
  contents:
  - 'int ChkReplayWindow(u_long seq);

    '
- title: int ChkReplayWindow(u_long seq) {
  contents:
  - "int ChkReplayWindow(u_long seq) {\n    u_long diff;\n    if (seq == 0) return\
    \ 0;             /* first == 0 or wrapped */\n    if (seq > lastSeq) {       \
    \         /* new larger sequence number */\n        diff = seq - lastSeq;\n  \
    \      if (diff < ReplayWindowSize) {  /* In window */\n            bitmap <<=\
    \ diff;\n            bitmap |= 1;                /* set bit for this packet */\n\
    \        } else bitmap = 1;          /* This packet has a \"way larger\" */\n\
    \        lastSeq = seq;\n        return 1;                       /* larger is\
    \ good */\n    }\n    diff = lastSeq - seq;\n    if (diff >= ReplayWindowSize)\
    \ return 0; /* too old or wrapped */\n    if (bitmap & ((u_long)1 << diff)) return\
    \ 0; /* already seen */\n    bitmap |= ((u_long)1 << diff);              /* mark\
    \ as seen */\n    return 1;                           /* out of order but good\
    \ */\n"
- title: '}'
  contents:
  - '}

    '
- title: char string_buffer[512];
  contents:
  - 'char string_buffer[512];

    '
- title: '#define STRING_BUFFER_SIZE sizeof(string_buffer)'
  contents:
  - '#define STRING_BUFFER_SIZE sizeof(string_buffer)

    '
- title: int main() {
  contents:
  - "int main() {\n    int result;\n    u_long last, current, bits;\n    printf(\"\
    Input initial state (bits in hex, last msgnum):\\n\");\n    if (!fgets(string_buffer,\
    \ STRING_BUFFER_SIZE, stdin)) exit(0);\n    sscanf(string_buffer, \"%lx %lu\"\
    , &bits, &last);\n    if (last != 0)\n    bits |= 1;\n    bitmap = bits;\n   \
    \ lastSeq = last;\n    printf(\"bits:%08lx last:%lu\\n\", bitmap, lastSeq);\n\
    \    printf(\"Input value to test (current):\\n\");\n    while (1) {\n       \
    \ if (!fgets(string_buffer, STRING_BUFFER_SIZE, stdin)) break;\n        sscanf(string_buffer,\
    \ \"%lu\", &current);\n        result = ChkReplayWindow(current);\n        printf(\"\
    %-3s\", result ? \"OK\" : \"BAD\");\n        printf(\" bits:%08lx last:%lu\\n\"\
    , bitmap, lastSeq);\n    }\n    return 0;\n"
- title: '}'
  contents:
  - '}

    '
- title: Appendix D -- Categorization of ICMP messages
  contents:
  - 'Appendix D -- Categorization of ICMP messages

    '
- title: The tables below characterize ICMP messages as being either host
  contents:
  - 'The tables below characterize ICMP messages as being either host

    '
- title: generated, router generated, both, unassigned/unknown.  The first set
  contents:
  - 'generated, router generated, both, unassigned/unknown.  The first set

    '
- title: are IPv4.  The second set are IPv6.
  contents:
  - "are IPv4.  The second set are IPv6.\n                                IPv4\n"
- title: Type    Name/Codes                                             Reference
  contents:
  - 'Type    Name/Codes                                             Reference

    '
- title: ========================================================================
  contents:
  - '========================================================================

    '
- title: 'HOST GENERATED:'
  contents:
  - "HOST GENERATED:\n  3     Destination Unreachable\n         2  Protocol Unreachable\
    \                               [RFC792]\n         3  Port Unreachable       \
    \                            [RFC792]\n         8  Source Host Isolated      \
    \                         [RFC792]\n        14  Host Precedence Violation    \
    \                      [RFC1812]\n 10     Router Selection                   \
    \                    [RFC1256]\n"
- title: Type    Name/Codes                                             Reference
  contents:
  - 'Type    Name/Codes                                             Reference

    '
- title: ========================================================================
  contents:
  - '========================================================================

    '
- title: 'ROUTER GENERATED:'
  contents:
  - "ROUTER GENERATED:\n  3     Destination Unreachable\n         0  Net Unreachable\
    \                                    [RFC792]\n         4  Fragmentation Needed,\
    \ Don't Fragment was Set       [RFC792]\n         5  Source Route Failed     \
    \                           [RFC792]\n         6  Destination Network Unknown\
    \                        [RFC792]\n         7  Destination Host Unknown      \
    \                     [RFC792]\n         9  Comm. w/Dest. Net. is Administratively\
    \ Prohibited  [RFC792]\n        11  Destination Network Unreachable for Type of\
    \ Service[RFC792]\n  5     Redirect\n         0  Redirect Datagram for the Network\
    \ (or subnet)      [RFC792]\n         2  Redirect Datagram for the Type of Service\
    \ & Network[RFC792]\n  9     Router Advertisement                            \
    \       [RFC1256]\n 18     Address Mask Reply                                \
    \     [RFC950]\n                                IPv4\n"
- title: Type    Name/Codes                                             Reference
  contents:
  - 'Type    Name/Codes                                             Reference

    '
- title: ========================================================================
  contents:
  - '========================================================================

    '
- title: 'BOTH ROUTER AND HOST GENERATED:'
  contents:
  - "BOTH ROUTER AND HOST GENERATED:\n  0     Echo Reply                         \
    \                    [RFC792]\n  3     Destination Unreachable\n         1  Host\
    \ Unreachable                                   [RFC792]\n        10  Comm. w/Dest.\
    \ Host is Administratively Prohibited  [RFC792]\n        12  Destination Host\
    \ Unreachable for Type of Service   [RFC792]\n        13  Communication Administratively\
    \ Prohibited          [RFC1812]\n        15  Precedence cutoff in effect     \
    \                   [RFC1812]\n  4     Source Quench                         \
    \                 [RFC792]\n  5     Redirect\n         1  Redirect Datagram for\
    \ the Host                     [RFC792]\n         3  Redirect Datagram for the\
    \ Type of Service and Host [RFC792]\n  6     Alternate Host Address          \
    \                       [JBP]\n  8     Echo                                  \
    \                 [RFC792]\n 11     Time Exceeded                            \
    \              [RFC792]\n 12     Parameter Problem                           \
    \   [RFC792,RFC1108]\n 13     Timestamp                                      \
    \        [RFC792]\n 14     Timestamp Reply                                   \
    \     [RFC792]\n 15     Information Request                                  \
    \  [RFC792]\n 16     Information Reply                                      [RFC792]\n\
    \ 17     Address Mask Request                                   [RFC950]\n 30\
    \     Traceroute                                             [RFC1393]\n 31  \
    \   Datagram Conversion Error                              [RFC1475]\n 32    \
    \ Mobile Host Redirect                                   [Johnson]\n 39     SKIP\
    \                                                   [Markson]\n 40     Photuris\
    \                                               [Simpson]\n"
- title: Type    Name/Codes                                             Reference
  contents:
  - 'Type    Name/Codes                                             Reference

    '
- title: ========================================================================
  contents:
  - '========================================================================

    '
- title: 'UNASSIGNED TYPE OR UNKNOWN GENERATOR:'
  contents:
  - "UNASSIGNED TYPE OR UNKNOWN GENERATOR:\n  1     Unassigned                   \
    \                          [JBP]\n  2     Unassigned                         \
    \                    [JBP]\n  7     Unassigned                               \
    \              [JBP]\n 19     Reserved (for Security)                        \
    \        [Solo]\n 20-29  Reserved (for Robustness Experiment)                \
    \   [ZSu]\n 33     IPv6 Where-Are-You                                     [Simpson]\n\
    \ 34     IPv6 I-Am-Here                                         [Simpson]\n 35\
    \     Mobile Registration Request                            [Simpson]\n 36  \
    \   Mobile Registration Reply                              [Simpson]\n 37    \
    \ Domain Name Request                                    [Simpson]\n 38     Domain\
    \ Name Reply                                      [Simpson]\n 41-255 Reserved\
    \                                               [JBP]\n                      \
    \          IPv6\n"
- title: Type    Name/Codes                                             Reference
  contents:
  - 'Type    Name/Codes                                             Reference

    '
- title: ========================================================================
  contents:
  - '========================================================================

    '
- title: 'HOST GENERATED:'
  contents:
  - "HOST GENERATED:\n  1     Destination Unreachable                            \
    \    [RFC 1885]\n         4  Port Unreachable\n"
- title: Type    Name/Codes                                             Reference
  contents:
  - 'Type    Name/Codes                                             Reference

    '
- title: ========================================================================
  contents:
  - '========================================================================

    '
- title: 'ROUTER GENERATED:'
  contents:
  - "ROUTER GENERATED:\n  1     Destination Unreachable                          \
    \      [RFC1885]\n         0  No Route to Destination\n         1  Comm. w/Destination\
    \ is Administratively Prohibited\n         2  Not a Neighbor\n         3  Address\
    \ Unreachable\n  2     Packet Too Big                                        \
    \ [RFC1885]\n         0\n  3     Time Exceeded                               \
    \           [RFC1885]\n         0  Hop Limit Exceeded in Transit\n         1 \
    \ Fragment reassembly time exceeded\n"
- title: Type    Name/Codes                                             Reference
  contents:
  - 'Type    Name/Codes                                             Reference

    '
- title: ========================================================================
  contents:
  - '========================================================================

    '
- title: 'BOTH ROUTER AND HOST GENERATED:'
  contents:
  - "BOTH ROUTER AND HOST GENERATED:\n  4     Parameter Problem                  \
    \                    [RFC1885]\n         0  Erroneous Header Field Encountered\n\
    \         1  Unrecognized Next Header Type Encountered\n         2  Unrecognized\
    \ IPv6 Option Encountered\n"
- title: References
  contents:
  - "References\n   [BL73]    Bell, D.E. & LaPadula, L.J., \"Secure Computer Systems:\n\
    \             Mathematical Foundations and Model\", Technical Report M74-\n  \
    \           244, The MITRE Corporation, Bedford, MA, May 1973.\n   [Bra97]   Bradner,\
    \ S., \"Key words for use in RFCs to Indicate\n             Requirement Level\"\
    , BCP 14, RFC 2119, March 1997.\n   [DoD85]   US National Computer Security Center,\
    \ \"Department of\n             Defense Trusted Computer System Evaluation Criteria\"\
    , DoD\n             5200.28-STD, US Department of Defense, Ft. Meade, MD.,\n \
    \            December 1985.\n   [DoD87]   US National Computer Security Center,\
    \ \"Trusted Network\n             Interpretation of the Trusted Computer System\
    \ Evaluation\n             Criteria\", NCSC-TG-005, Version 1, US Department of\n\
    \             Defense, Ft. Meade, MD., 31 July 1987.\n   [HA94]    Haller, N.,\
    \ and R. Atkinson, \"On Internet Authentication\",\n             RFC 1704, October\
    \ 1994.\n   [HC98]    Harkins, D., and D. Carrel, \"The Internet Key Exchange\n\
    \             (IKE)\", RFC 2409, November 1998.\n   [HM97]    Harney, H., and\
    \ C.  Muckenhirn, \"Group Key Management\n             Protocol (GKMP) Architecture\"\
    , RFC 2094, July 1997.\n   [ISO]     ISO/IEC JTC1/SC6, Network Layer Security\
    \ Protocol, ISO-IEC\n             DIS 11577, International Standards Organisation,\
    \ Geneva,\n             Switzerland, 29 November 1992.\n   [IB93]    John Ioannidis\
    \ and Matt Blaze, \"Architecture and\n             Implementation of Network-layer\
    \ Security Under Unix\",\n             Proceedings of USENIX Security Symposium,\
    \ Santa Clara, CA,\n             October 1993.\n   [IBK93]   John Ioannidis, Matt\
    \ Blaze, & Phil Karn, \"swIPe: Network-\n             Layer Security for IP\"\
    , presentation at the Spring 1993\n             IETF Meeting, Columbus, Ohio\n\
    \   [KA98a]   Kent, S., and R. Atkinson, \"IP Authentication Header\", RFC\n \
    \            2402, November 1998.\n   [KA98b]   Kent, S., and R. Atkinson, \"\
    IP Encapsulating Security\n             Payload (ESP)\", RFC 2406, November 1998.\n\
    \   [Ken91]   Kent, S., \"US DoD Security Options for the Internet\n         \
    \    Protocol\", RFC 1108, November 1991.\n   [MSST97]  Maughan, D., Schertler,\
    \ M., Schneider, M., and J. Turner,\n             \"Internet Security Association\
    \ and Key Management Protocol\n             (ISAKMP)\", RFC 2408, November 1998.\n\
    \   [Orm97]   Orman, H., \"The OAKLEY Key Determination Protocol\", RFC\n    \
    \         2412, November 1998.\n   [Pip98]   Piper, D., \"The Internet IP Security\
    \ Domain of\n             Interpretation for ISAKMP\", RFC 2407, November 1998.\n\
    \   [Sch94]   Bruce Schneier, Applied Cryptography, Section 8.6, John\n      \
    \       Wiley & Sons, New York, NY, 1994.\n   [SDNS]    SDNS Secure Data Network\
    \ System, Security Protocol 3, SP3,\n             Document SDN.301, Revision 1.5,\
    \ 15 May 1989, published in\n             NIST Publication NIST-IR-90-4250, February\
    \ 1990.\n   [SMPT98]  Shacham, A., Monsour, R., Pereira, R., and M. Thomas, \"\
    IP\n             Payload Compression Protocol (IPComp)\", RFC 2393, August\n \
    \            1998.\n   [TDG97]   Thayer, R., Doraswamy, N., and R. Glenn, \"IP\
    \ Security\n             Document Roadmap\", RFC 2411, November 1998.\n   [VK83]\
    \    V.L. Voydock & S.T. Kent, \"Security Mechanisms in High-\n             level\
    \ Networks\", ACM Computing Surveys, Vol. 15, No. 2,\n             June 1983.\n"
- title: Disclaimer
  contents:
  - "Disclaimer\n   The views and specification expressed in this document are those\
    \ of\n   the authors and are not necessarily those of their employers.  The\n\
    \   authors and their employers specifically disclaim responsibility for\n   any\
    \ problems arising from correct or incorrect implementation or use\n   of this\
    \ design.\n"
- title: Author Information
  contents:
  - "Author Information\n   Stephen Kent\n   BBN Corporation\n   70 Fawcett Street\n\
    \   Cambridge, MA  02140\n   USA\n   Phone: +1 (617) 873-3988\n   EMail: kent@bbn.com\n\
    \   Randall Atkinson\n   @Home Network\n   425 Broadway\n   Redwood City, CA 94063\n\
    \   USA\n   Phone: +1 (415) 569-5000\n   EMail: rja@corp.home.net\n"
- title: Copyright (C) The Internet Society (1998).  All Rights Reserved.
  contents:
  - "Copyright (C) The Internet Society (1998).  All Rights Reserved.\n   This document\
    \ and translations of it may be copied and furnished to\n   others, and derivative\
    \ works that comment on or otherwise explain it\n   or assist in its implementation\
    \ may be prepared, copied, published\n   and distributed, in whole or in part,\
    \ without restriction of any\n   kind, provided that the above copyright notice\
    \ and this paragraph are\n   included on all such copies and derivative works.\
    \  However, this\n   document itself may not be modified in any way, such as by\
    \ removing\n   the copyright notice or references to the Internet Society or other\n\
    \   Internet organizations, except as needed for the purpose of\n   developing\
    \ Internet standards in which case the procedures for\n   copyrights defined in\
    \ the Internet Standards process must be\n   followed, or as required to translate\
    \ it into languages other than\n   English.\n   The limited permissions granted\
    \ above are perpetual and will not be\n   revoked by the Internet Society or its\
    \ successors or assigns.\n   This document and the information contained herein\
    \ is provided on an\n   \"AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET\
    \ ENGINEERING\n   TASK FORCE DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n\
    \   BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN\
    \ WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY\
    \ OR FITNESS FOR A PARTICULAR PURPOSE.\n"
