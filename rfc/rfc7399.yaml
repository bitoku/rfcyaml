- title: __initial_text__
  contents:
  - '   Unanswered Questions in the Path Computation Element Architecture

    '
- title: Abstract
  contents:
  - "Abstract\n   The Path Computation Element (PCE) architecture is set out in RFC\n\
    \   4655.  The architecture is extended for multi-layer networking with\n   the\
    \ introduction of the Virtual Network Topology Manager (VNTM) in\n   RFC 5623\
    \ and generalized to Hierarchical PCE (H-PCE) in RFC 6805.\n   These three architectural\
    \ views of PCE deliberately leave some key\n   questions unanswered, especially\
    \ with respect to the interactions\n   between architectural components.  This\
    \ document draws out those\n   questions and discusses them in an architectural\
    \ context with\n   reference to other architectural components, existing protocols,\
    \ and\n   recent IETF efforts.\n   This document does not update the architecture\
    \ documents and does not\n   define how protocols or components must be used.\
    \  It does, however,\n   suggest how the architectural components might be combined\
    \ to provide\n   advanced PCE function.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document is not an Internet Standards Track specification;\
    \ it is\n   published for informational purposes.\n   This document is a product\
    \ of the Internet Engineering Task Force\n   (IETF).  It represents the consensus\
    \ of the IETF community.  It has\n   received public review and has been approved\
    \ for publication by the\n   Internet Engineering Steering Group (IESG).  Not\
    \ all documents\n   approved by the IESG are a candidate for any level of Internet\n\
    \   Standard; see Section 2 of RFC 5741.\n   Information about the current status\
    \ of this document, any errata,\n   and how to provide feedback on it may be obtained\
    \ at\n   http://www.rfc-editor.org/info/rfc7399.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2014 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................3\n\
    \      1.1. Terminology ................................................4\n  \
    \ 2. What Is Topology Information? ...................................4\n   3.\
    \ How Is Topology Information Gathered? ...........................5\n   4. How\
    \ Do I Find My PCE? ...........................................6\n   5. How Do\
    \ I Select between PCEs? ...................................7\n   6. How Do Redundant\
    \ PCEs Synchronize TEDs? .........................8\n   7. Where Is the Destination?\
    \ .......................................9\n   8. Who Runs or Owns a Parent PCE?\
    \ .................................10\n   9. How Do I Find My Parent PCE? ...................................11\n\
    \   10. How Do I Find My Child PCEs? ..................................11\n  \
    \ 11. How Is the Parent PCE Domain Topology Built? ..................12\n   12.\
    \ Does H-PCE Solve the Internet? ................................12\n   13. What\
    \ are Sticky Resources? ....................................13\n   14. What Is\
    \ a Stateful PCE for? ...................................14\n   15. How Is the\
    \ LSP-DB Built? ......................................14\n   16. How Do Redundant\
    \ Stateful PCEs Synchronize State? .............15\n   17. What Is an Active PCE?\
    \ What Is a Passive PCE? .................16\n   18. What is LSP Delegation? .......................................17\n\
    \   19. Is an Active PCE with LSP Delegation Just a Fancy NMS? ........18\n  \
    \ 20. Comparison of Stateless and Stateful PCE ......................18\n   21.\
    \ How Does a PCE Work with a Virtual Network Topology? ..........19\n   22. How\
    \ Does PCE Communicate with VNTM ............................21\n   23. How Does\
    \ Service Scheduling and Calendering Work? .............21\n   24. Where Does\
    \ Policy Fit In? .....................................22\n   25. Does PCE Play\
    \ a Role in SDN? ..................................23\n   26. Security Considerations\
    \ .......................................23\n   27. References ....................................................25\n\
    \      27.1. Normative References .....................................25\n  \
    \    27.2. Informative References ...................................25\n   Acknowledgements\
    \ ..................................................29\n   Authors' Addresses\
    \ ................................................29\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   Over the years since the architecture for the Path Computation\n\
    \   Element (PCE) was documented in [RFC4655], many new people have\n   become\
    \ involved in the work of the PCE working group and wish to use\n   or understand\
    \ the PCE architecture.  These people often missed out on\n   early discussions\
    \ within the working group and are unfamiliar with\n   questions that were raised\
    \ during the development of the\n   documentation.\n   Furthermore, the base architecture\
    \ has been extended to handle other\n   situations and requirements: the architecture\
    \ was extended for multi-\n   layer networking with the introduction of the Virtual\
    \ Network\n   Topology Manager (VNTM) [RFC5623] and was generalized to include\n\
    \   Hierarchical PCE (H-PCE) [RFC6805].\n   These three architectural views of\
    \ PCE deliberately leave some key\n   questions unanswered, especially with respect\
    \ to the interactions\n   between architectural components.  This document draws\
    \ out those\n   questions and discusses them in an architectural context with\n\
    \   reference to other architectural components, existing protocols, and\n   recent\
    \ IETF efforts.\n   This document does not update the architecture documents and\
    \ does not\n   define how protocols or components must be used.  It does, however,\n\
    \   suggest how the architectural components might be combined to provide\n  \
    \ advanced PCE function.\n"
- title: 1.1.  Terminology
  contents:
  - "1.1.  Terminology\n   Readers are assumed to be thoroughly familiar with terminology\n\
    \   defined in [RFC4655], [RFC4726], [RFC5440], [RFC5623], and [RFC6805].\n  \
    \ More information about terms related to stateful PCE can be found in\n   [STATEFUL-PCE].\n\
    \   Throughout this document, the term \"area\" is used to refer equally to\n\
    \   an OSPF area and an IS-IS level.  It is assumed that the reader is\n   able\
    \ to map the small differences between these two use cases.\n"
- title: 2.  What Is Topology Information?
  contents:
  - "2.  What Is Topology Information?\n   [RFC4655] specifies that a PCE performs\
    \ path computations based on a\n   view of the available network resources and\
    \ network topology.  This\n   information is collected into a Traffic Engineering\
    \ Database (TED).\n   However, [RFC4655] does not provide a detailed description\
    \ of what\n   information is present in the TED.  It simply says that the TED\n\
    \   \"contains the topology and resource information of the domain.\"  The\n \
    \  precise information that needs to be held in a TED depends on the\n   type\
    \ of network and nature of the computation that has to be\n   performed.  As a\
    \ basic minimum, the TED must contain the nodes and\n   links that form the domain,\
    \ and it must identify the connectivity in\n   the domain.\n   For most traffic-engineering\
    \ needs (for example, MPLS Traffic\n   Engineering - MPLS-TE), the TED would additionally\
    \ contain a basic\n   metric for each link and knowledge of the available (unallocated)\n\
    \   resources on each link.\n   More advanced use cases might require that the\
    \ TED contain additional\n   data that represents qualitative information such\
    \ as:\n      - link delay\n      - link jitter\n      - node throughput capabilities\n\
    \      - optical impairments\n      - switching capabilities\n      - limited\
    \ node cross-connect capabilities\n   Additionally, an important information element\
    \ for computing paths,\n   especially for protected services, is the Shared Risk\
    \ Group (SRG).\n   This is an indication of resources in the TED that have a common\
    \ risk\n   of failure.  That is, they have a shared risk of failure from a\n \
    \  single event.\n   In short, the TED needs to contain as much information as\
    \ is needed\n   to satisfy the path computation requests subject to the objective\n\
    \   functions (OFs).  This, in itself, may not be a trivial issue in some\n  \
    \ network technologies.  For example, in some optical networks, the\n   path computation\
    \ for a new Label Switched Path (LSP) may need to\n   consider the impact that\
    \ turning up a new laser would have on the\n   optical signals already being carried\
    \ by fibers.  It may be possible\n   to abstract this information as parameters\
    \ of the optical links and\n   nodes in the TED, but it may be easier to capture\
    \ this information\n   through a database of existing LSPs (see Sections 14 and\
    \ 15).\n"
- title: 3.  How Is Topology Information Gathered?
  contents:
  - "3.  How Is Topology Information Gathered?\n   Clearly, the information in the\
    \ TED discussed in Section 2 needs to\n   be gathered and maintained somehow.\
    \  [RFC4655] simply says \"The TED\n   may be fed by Interior Gateway Protocol\
    \ (IGP) extensions or\n   potentially by other means.\"  In this context, \"fed\"\
    \ means built and\n   maintained.\n   Thus, one way that the PCE may construct\
    \ its TED is by participating\n   in the IGP running in the network.  In an MPLS-TE\
    \ network, this would\n   depend on OSPF TE [RFC3630] and IS-IS TE [RFC5305].\
    \  In a GMPLS\n   network, it would utilize the GMPLS extensions to OSPF and IS-IS,\n\
    \   [RFC4203] and [RFC5307].\n   However, participating in an IGP, even as a passive\
    \ receiver of IGP\n   information, can place a significant load on the PCE.  The\
    \ IGP can be\n   quite \"chatty\" when there are frequent updates to the use of\
    \ the\n   network, meaning that the PCE must dedicate significant processing to\n\
    \   parsing protocol messages and updating the TED.  Furthermore, to be\n   truly\
    \ useful, a PCE implementation would need to support OSPF and IS-\n   IS.\n  \
    \ An alternative feed from the network to the PCE's TED is offered by\n   BGP-LS\
    \ [LS-DISTRIB].  This approach offers the alternative of\n   leveraging an in-network\
    \ BGP speaker (such as an Autonomous System\n   Border Router or a Route Reflector)\
    \ that already has to participate\n   in the IGP and that is specifically designed\
    \ to apply filters to IGP\n   advertisements.  In this usage, the BGP speaker\
    \ filters and\n   aggregates topology information according to configured policy\
    \ before\n   advertising it \"north-bound\" to the PCE to update the TED.  The\
    \ PCE\n   implementation has to support just a simplified subset of BGP rather\n\
    \   than two full IGPs.\n   But BGP might not be convenient in all networks (for\
    \ example, where\n   BGP is not run, such as in an optical network or a BGP-free\
    \ core).\n   Furthermore, not all relevant information is made available through\n\
    \   standard TE extensions to the IGPs.  In these cases, the TED must be\n   built\
    \ or supplemented from other sources such as the Network\n   Management System\
    \ (NMS), inventory management systems, and directly\n   configured data.\n   It\
    \ has also been proposed that the PCE Communication Protocol (PCEP)\n   [RFC5440]\
    \ could be extended to serve as an information collection\n   protocol to supply\
    \ information from network devices to a PCE.  The\n   logic is that the network\
    \ devices may already speak PCEP; so, the\n   protocol could easily be used to\
    \ report details about the resources\n   and state in the network, including the\
    \ LSP state discussed in\n   Sections 14 and 15.\n   Note that a PCE that is responsible\
    \ for more than one domain must, of\n   course, collect TE information from each\
    \ domain to build its TED or\n   TEDs.\n"
- title: 4.  How Do I Find My PCE?
  contents:
  - "4.  How Do I Find My PCE?\n   A Path Computation Client (PCC) needs to know the\
    \ identity/location\n   of a PCE in order to be able to make computation requests.\
    \  This is\n   because PCEP is a transaction-based protocol carried over TCP,\
    \ and\n   the architectural decision made in Section 6.4 of RFC 4655 required\n\
    \   targeted PCC-PCE communications.\n   As described in [RFC4655], a PCC could\
    \ be configured with the\n   knowledge of the IP address of its PCE.  This is\
    \ a relatively\n   lightweight option considering all of the other configuration\
    \ that a\n   router may require, but it is open to configuration errors, and does\n\
    \   not meet the need for minimal-configuration operation.  Furthermore,\n   configuration\
    \ communication with multiple PCEs could become onerous,\n   while handling changes\
    \ in PCE identities and coping with failure\n   events would be an issue for a\
    \ configured system.\n   [RFC4655] offers the possibility for PCEs to advertise\
    \ themselves in\n   the IGP, and this requirement is developed in [RFC4674] and\
    \ made\n   possible in OSPF and IS-IS through [RFC5088] and [RFC5089].  In\n \
    \  general, these mechanisms should be sufficient for PCCs in a network\n   where\
    \ an IGP is used and where the PCE participates in the IGP.\n   Note, however,\
    \ that not all PCEs will participate in the IGP (see\n   Section 3).  In these\
    \ cases, assuming configuration is not\n   appropriate as a discovery mechanism,\
    \ some other server\n   announcement/discovery function may be needed, such as\
    \ DNS [RFC4848]\n   as used for discovery of the Local Location Information Server\
    \ (LIS)\n   [RFC5986] and in the Application-Layer Traffic Optimization (ALTO)\n\
    \   discovery function [ALTO-SERVER-DISC].\n"
- title: 5.  How Do I Select between PCEs?
  contents:
  - "5.  How Do I Select between PCEs?\n   When more than one PCE is discovered or\
    \ configured, a PCC will need\n   to select which PCE to use.  It may make this\
    \ decision on any\n   arbitrary algorithm (for example, first-listed, or round\
    \ robin), but\n   it may also be the case that different PCEs have different\n\
    \   capabilities and path computation scope; in which case, the PCC will\n   want\
    \ to select the PCE most likely to be able to satisfy any one\n   request.  The\
    \ first requirement, of course, is that the PCE can\n   compute paths for the\
    \ relevant domain.\n   PCE advertisement in OSPF or IS-IS per [RFC5088] and [RFC5089]\
    \ allows\n   a PCE to announce its capabilities as required in [RFC4657].  A PCC\n\
    \   can select between PCEs based on the capabilities that they have\n   announced.\
    \  However, these capabilities are expressed as flags in the\n   PCE advertisement\
    \ so only the core capabilities are presented, and\n   there is not scope for\
    \ including detailed information (such as\n   support for specific objective functions)\
    \ in the advertisement.\n   Additional and more complex PCE capabilities, including\
    \ the\n   capability to perform point-to-multipoint (P2MP) path computations\n\
    \   [RFC6006], may be announced by the PCE as optional PCEP type-length-\n   value\
    \ (TLV) Type Indicators in the Open message described in\n   [RFC5440].  This\
    \ mechanism is not limited to just a set of flags, and\n   detailed capability\
    \ information may be presented in sub-TLVs.\n   Note that this exchange of PCE\
    \ capabilities is in the form of an\n   announcement, not a negotiation.  That\
    \ is, a PCC that wants specific\n   function from a PCE must examine the advertised\
    \ capabilities and\n   select which PCE to use for a specific request.  There\
    \ is no scope\n   for a PCC to request a PCE to support features or functions\
    \ that it\n   does not offer or announce.\n   A PCC may also vary which PCE it\
    \ uses according to congestion\n   information reported by the PCEs using the\
    \ Notification Object and\n   Notification Type [RFC5440].  In a heavily overloaded\
    \ PCE system,\n   note that reports from one PCE that it is overloaded may simply\n\
    \   result in all PCCs switching to another PCE, which will, itself,\n   immediately\
    \ become overloaded.  Thus, PCCs should exercise a certain\n   amount of discretion\
    \ and queueing theory before selecting a PCE\n   purely based on reported load.\n\
    \   Note that a PCC could send all requests to all PCEs that it knows\n   about.\
    \  It can then select between the results, perhaps choosing the\n   first result\
    \ it receives, but this approach is very likely to\n   overload all the PCEs in\
    \ the network considering that one of the\n   reasons for multiple PCEs is to\
    \ share the load.\n"
- title: 6.  How Do Redundant PCEs Synchronize TEDs?
  contents:
  - "6.  How Do Redundant PCEs Synchronize TEDs?\n   A network may have more than\
    \ one PCE, as discussed in the previous\n   sections.  These PCEs may provide\
    \ redundancy for load-sharing,\n   resilience, or partitioning of computation\
    \ features.\n   In order to achieve some consistency between the results of different\n\
    \   PCEs, it is desirable that they operate on the same TE information.\n   The\
    \ TED reflects the actual state of the network and is not a\n   resource reservation\
    \ or booking scheme.  Therefore, a PCE-based\n   system does not prevent competition\
    \ for network resources during the\n   provisioning phase, although a process\
    \ of \"sticky resources\" that are\n   temporarily reduced in the TED after a\
    \ computation may be applied\n   purely as a local implementation feature.\n \
    \  One option for ensuring that multiple PCEs use the same TE\n   information\
    \ is simply to have the PCEs driven from the same TED.\n   This could be achieved\
    \ in implementations by utilizing a shared\n   database, but it is unlikely to\
    \ be efficient.\n   More likely is that each PCE is responsible for building its\
    \ own TED\n   independently, using the techniques described in Section 3.  If\
    \ the\n   PCEs participate in the IGP, it is likely that they will attach at\n\
    \   different points in the network; so, there may be minor and temporary\n  \
    \ inconsistencies between their TEDs caused by IGP convergence issues.\n   If\
    \ the PCEs gather TE information via BGP-LS [LS-DISTRIB] from\n   different sources,\
    \ the same inconsistencies may arise.  However, if\n   the PCEs attach to the\
    \ same BGP speaker, it may be possible to\n   achieve consistency between TEDs\
    \ modulo the BGP-LS process itself.\n   A final option is to provide an explicit\
    \ synchronization process\n   between the TED of a \"master\" PCE and the TEDs\
    \ of other PCEs.  Such a\n   process could be achieved using BGP-LS or a database\
    \ synchronization\n   protocol (which would allow check-pointing and sequential\
    \ updates).\n   This approach is fraught with issues around selection of the master\n\
    \   PCE and handling failures.  It is, in fact, a mirrored database\n   scenario:\
    \ a problem that is well known and the subject of plenty of\n   work.\n   Noting\
    \ that the provisioning protocols such as RSVP-TE [RFC3209]\n   already handle\
    \ contention for resources, that the differences between\n   TEDs are likely to\
    \ be relatively small with moderate arrival rates\n   for new services, and that\
    \ contention in all but the most busy\n   networks is relatively unlikely, there\
    \ may be no value in any attempt\n   to synchronize TEDs between PCEs.\n   However,\
    \ see Section 16 for a discussion of synchronizing other state\n   between redundant\
    \ PCEs.\n"
- title: 7.  Where Is the Destination?
  contents:
  - "7.  Where Is the Destination?\n   Path computation provides an end-to-end path\
    \ between a source and a\n   destination.  If the destination lies in the source\
    \ domain, then its\n   location will be known to the PCE and there are no issues\
    \ to be\n   solved.  However, in a multi-domain system a path must be found to\
    \ a\n   remote domain that contains the destination, and that can only be\n  \
    \ achieved by knowledge of the location of the destination or at least\n   knowing\
    \ the next domain in the path toward the domain that contains\n   the destination.\n\
    \   The simplest solution here is achieved when a PCE has visibility into\n  \
    \ multiple domains.  Such may be the case in a multi-area network where\n   the\
    \ PCE is aware of the contents of all of the IGP areas.  This\n   approach is\
    \ only likely to be appropriate where the number of nodes\n   is manageable, and\
    \ it is unlikely to extend over administrative\n   boundaries.\n   The per-domain\
    \ path computation method for establishing inter-domain\n   traffic engineering\
    \ LSPs [RFC5152] simply requires a PCE to compute a\n   path to the next domain\
    \ toward the destination.  As the LSP setup\n   (through signaling) progresses\
    \ domain by domain, the Label Switching\n   Router (LSR) at the entry point to\
    \ each domain requests its local PCE\n   to compute the next segment of the path,\
    \ that is from that LSR to the\n   next domain in the sequence toward the destination.\
    \  Thus, it is not\n   necessary for any PCE (except the last) to know in which\
    \ domain the\n   destination exists.  But, in this approach, each PCE must somehow\n\
    \   determine the next domain toward the destination, and it is not\n   obvious\
    \ how this is achieved.\n   [RFC5152] suggests that, in an IP/MPLS network, it\
    \ is good enough to\n   leverage the IP reachability information distributed by\
    \ BGP and\n   assume that TE reachability can follow the same Autonomous System\n\
    \   (AS) path.  This approach might not guarantee the optimal TE path\n   and,\
    \ of course, might result in no path being found in degenerate\n   cases.  Furthermore,\
    \ in many network technologies (such as optical\n   networks operated by GMPLS)\
    \ there may be limited or no end-to-end IP\n   connectivity.\n   The Backward\
    \ Recursive PCE-based Computation (BRPC) procedure\n   [RFC5441] is able to achieve\
    \ a more optimal end-to-end path than the\n   per-domain method, but depends on\
    \ the knowledge of both the domain in\n   which the destination is located and\
    \ the sequence of domains toward\n   the destination.  This information is described\
    \ in [RFC5441] as being\n   known a priori.  Clearly, however, information is\
    \ not always known a\n   priori, and it may be hard for the PCE that serves the\
    \ source PCC to\n   discover the necessary details.  While there are several approaches\n\
    \   to solving the question of establishing the domain sequence (for\n   example,\
    \ BRPC trial and error or H-PCE [RFC6805]), none of them\n   addresses the issue\
    \ of determining where the destination lies.\n   One argument that is often made\
    \ is that an end-to-end connection\n   expressed as an LSP is a feature of a service\
    \ agreement between\n   source and destination.  If that is the case, it is argued,\
    \ it stands\n   to reason that the location of the destination must be known to\
    \ the\n   source node in the same way that the source has determined the IP\n\
    \   address of the destination.  Presumably, this would be through a\n   commercial\
    \ process or an administrative protocol.\n   [RFC4974] introduced the concept\
    \ of Calls and Connections for LSPs.\n   A Call does not provide the actual connectivity\
    \ for transmitting user\n   traffic, but builds a relationship that will allow\
    \ subsequent\n   Connections to be made.  A Call might be considered an agreement\
    \ to\n   support an end-to-end LSP that is made between the endpoint nodes.\n\
    \   Call messages are sent and routed as normal IP messages, so the\n   sender\
    \ does not need to know the location of the destination.\n   Furthermore, Call\
    \ requests are responded, and the Call Response can\n   carry information (such\
    \ as the identity of the domain containing the\n   destination) for use by Call\
    \ initiator.  Thus, the use of GMPLS Calls\n   might provide a mechanism to discover\
    \ destination's location.\n"
- title: 8.  Who Runs or Owns a Parent PCE?
  contents:
  - "8.  Who Runs or Owns a Parent PCE?\n   A parent PCE [RFC6805] is responsible\
    \ for selecting inter-domain path\n   by coordinating with child PCEs and maintaining\
    \ a domain topology\n   map.\n   In the case of multi-domains (e.g., IGP areas\
    \ or multiple ASes)\n   within a single service provider network, the management\n\
    \   responsibility for the parent PCE would most likely be handled by the\n  \
    \ service provider.\n   In the case of multiple ASes within different service\
    \ provider\n   networks, it may be necessary for a third party to manage the parent\n\
    \   PCEs according to commercial and policy agreements from each of the\n   participating\
    \ service providers.  Note that the H-PCE architecture\n   does not require disclosure\
    \ of internals of a child domain to the\n   parent PCE.  Thus, there is ample\
    \ scope for a parent PCE to be run by\n   one of the connected service providers\
    \ or by a third party without\n   compromising commercial issues.  In fact, each\
    \ service provider could\n   run its own parent PCE while allowing its child PCEs\
    \ to be contacted\n   by outsider parent PCEs according to configured policy and\
    \ security.\n"
- title: 9.  How Do I Find My Parent PCE?
  contents:
  - "9.  How Do I Find My Parent PCE?\n   [RFC6805] specifies that a child PCE must\
    \ be configured with the\n   address of its parent PCE in order for it to interact\
    \ with its parent\n   PCE.  There is no scope for parent PCEs to advertise their\
    \ presence;\n   however, there is potential for directory systems (such as DNS\n\
    \   [RFC4848] as used in the ALTO discovery function [ALTO-SERVER-DISC])\n   to\
    \ be used as described in Section 4.\n   According to [RFC6805], note that the\
    \ child PCE must also be\n   authorized to peer with the parent PCE.  This is\
    \ discussed from the\n   viewpoint of the parent PCE in Section 10.  The child\
    \ PCE may need to\n   participate in a key distribution protocol in order to properly\n\
    \   authenticate its identity to the parent PCE.\n"
- title: 10.  How Do I Find My Child PCEs?
  contents:
  - "10.  How Do I Find My Child PCEs?\n   Within the hierarchical PCE framework [RFC6805],\
    \ the parent PCE must\n   only accept path computation requests from authorized\
    \ child PCEs.  If\n   a parent PCE receives a request from an unauthorized child\
    \ PCE, the\n   request should be dropped.\n   This requires a parent PCE to be\
    \ configured with the identities and\n   security credentials of all of its child\
    \ PCEs, or there must be some\n   form of shared secret that allows an unknown\
    \ child PCE to be\n   authorized by the parent PCE.\n"
- title: 11.  How Is the Parent PCE Domain Topology Built?
  contents:
  - "11.  How Is the Parent PCE Domain Topology Built?\n   The parent PCE maintains\
    \ a domain topology map of the child domains\n   and their interconnectivity.\
    \  This map does not include any\n   visibility into the child domains.  Where\
    \ inter-domain connectivity\n   is provided by TE links, the capabilities of those\
    \ links may also be\n   known to the parent PCE.\n   The parent PCE maintains\
    \ a TED for the parent domain in the same way\n   that any PCE does.  The nodes\
    \ in the parent domain will be\n   abstractions of the child domains (connected\
    \ by real or virtual TE\n   links), but the parent domain may also include real\
    \ nodes and links.\n   The mechanism for building the parent TED is likely to\
    \ rely heavily\n   on administrative configuration and commercial issues because\
    \ the\n   network was probably partitioned into domains specifically to address\n\
    \   these issues.  However, note that in some configurations (for\n   example,\
    \ collections of small optical domains) a separate instance of\n   a routing protocol\
    \ (probably an IGP) may be run within the parent\n   domain to advertise the domain\
    \ interconnectivity.  Additionally,\n   since inter-domain TE links can be advertised\
    \ by the IGPs operating\n   in the child domains, this information could be exported\
    \ to the\n   parent PCE either by the child PCEs or using a north-bound export\n\
    \   mechanism such as BGP-LS [LS-DISTRIB].\n"
- title: 12.  Does H-PCE Solve the Internet?
  contents:
  - "12.  Does H-PCE Solve the Internet?\n   The model described in [RFC6805] introduced\
    \ a hierarchical\n   relationship between domains.  It is applicable to environments\
    \ with\n   small groups of domains where visibility from the ingress LSRs is\n\
    \   limited.  Applying the hierarchical PCE model to large groups of\n   domains\
    \ such as the Internet is not considered feasible or desirable.\n   This does\
    \ open up a harder question: how many domains can be handled\n   by an H-PCE system?\
    \  In other words: what is a small group of\n   domains?  The answer is not clear\
    \ and might be \"I know it when I see\n   it.\"  At the moment, a rough guide\
    \ might be around 20 domains as a\n   maximum.\n   An associated question would\
    \ be: how many hierarchy levels can be\n   handled by H-PCE?  Architecturally,\
    \ the answer is that there is no\n   limit, but it is hard to construct practical\
    \ examples where more than\n   two or possibly three levels are needed.\n"
- title: 13.  What are Sticky Resources?
  contents:
  - "13.  What are Sticky Resources?\n   When a PCE computes a path, it has a reasonable\
    \ idea that an LSP will\n   be set up and that resources will be allocated within\
    \ the network.\n   If the arrival rate of computation requests is faster than\
    \ the LSP\n   setup rate combined with the IGP convergence time, it is quite\n\
    \   possible that the PCE will perform its next computation before the\n   TED\
    \ has been updated to reflect the setup of the previous LSP.  This\n   can result\
    \ in LSP setup failures if there is contention for\n   resources.  The likelihood\
    \ of this problem is particularly high\n   during recovery from network failures\
    \ when a large number of LSPs\n   might need new paths.\n   A PCE may choose to\
    \ make a provisional assignment of the resources\n   that would be needed for\
    \ an LSP and to reduce the available resources\n   in its TED so that the problem\
    \ is mitigated.  Such resources are\n   informally known as \"sticky resources\"\
    .\n   Note that using sticky resources introduces a number of other\n   problems\
    \ that can make managing the TED difficult.  For example:\n   -  When the TED\
    \ is updated as a result of new information from the\n      IGP, how does the\
    \ PCE know whether the reduction in available\n      resources is due to the successful\
    \ setup of the LSP for which it\n      is holding sticky resources or due to some\
    \ other network event\n      (such as the setup of another LSP)?  This problem\
    \ may be\n      particularly evident if there are multiple PCEs that do not\n\
    \      synchronize their sticky resources or if not all LSPs utilize PCE\n   \
    \   computation.\n   -  When LSP setup fails, how are the sticky resources released?\n\
    \      Since the PCE doesn't know about the failure of the LSP setup, it\n   \
    \   needs some other mechanism to release them.\n   -  What happens if a path\
    \ computation was made only to investigate\n      the potential for an LSP but\
    \ not to actually set one up?\n   -  What if the path used by the LSP does not\
    \ match that provided by\n      the PCE (for example, because the control plane\
    \ routes around some\n      problem)?\n   Some of these issues can be mitigated\
    \ by using a Stateful PCE (see\n   Section 14) or by timers.\n"
- title: 14.  What Is a Stateful PCE for?
  contents:
  - "14.  What Is a Stateful PCE for?\n   A Stateless PCE can perform path computations\
    \ that take into account\n   the existence of other LSPs if the paths of those\
    \ LSPs are supplied\n   on the computation request.  This function can be particularly\
    \ useful\n   when arranging protection paths so that a working and protection\
    \ LSP\n   do not share any links or nodes.  It can also be used when a group of\n\
    \   LSPs are to be reoptimized at the same time in the process known as\n   Global\
    \ Concurrent Optimization (GCO) [RFC5557].\n   However, this mechanism can be\
    \ quite a burden on the protocol\n   messages, especially when large numbers of\
    \ LSP paths need to be\n   reported.\n   A Stateful PCE [STATEFUL-PCE] maintains\
    \ a database of LSPs (the LSP-\n   DB) that are active in the network, i.e., have\
    \ been provisioned such\n   that they use network resources although they might\
    \ or might not be\n   carrying traffic.  This database allows a PCC to refer to\
    \ an LSP\n   using only its identifier -- all other details can be retrieved by\n\
    \   the PCE from the LSP-DB.\n   A Stateful PCE can use the LSP-DB for many other\
    \ functions, such as\n   balancing the distribution of LSPs in the network.  Furthermore,\
    \ the\n   PCE can correlate LSPs with network resource availability placing new\n\
    \   LSPs more cleverly.\n   A Stateful PCE that is also an Active PCE (see Section\
    \ 17) can\n   respond to changes in network resource availability and predicted\n\
    \   demands to reroute LSPs that it knows about.\n   Section 20 offers a brief\
    \ comparison of the different modes of PCE\n   with reference to stateful and\
    \ stateless PCE.\n"
- title: 15.  How Is the LSP-DB Built?
  contents:
  - "15.  How Is the LSP-DB Built?\n   The LSP-DB contains information about the LSPs\
    \ that are active in the\n   network, as mentioned in Section 14.  This state\
    \ information can be\n   constructed by the PCE from information it receives from\
    \ a number of\n   sources including from provisioning tools and from the network,\
    \ but\n   no matter how the information is gleaned, a Stateful PCE needs to\n\
    \   synchronize its LSP-DB with the state in the network.  Just as\n   described\
    \ in Section 13, the PCE cannot rely on knowledge about\n   previous computations\
    \ it has made, but it must find out the actual\n   LSPs in the network.\n   A\
    \ simple solution is for all ingress LSRs to report all LSPs to the\n   PCE as\
    \ they are set up, modified, or torn down.  Since PCEP already\n   has the facility\
    \ to fully describe LSP routes and resources in the\n   protocol messages, this\
    \ is not a difficult problem, and the LSP State\n   Report (PCRpt) message has\
    \ been defined for this purpose\n   [STATEFUL-PCE].\n   The situation can be more\
    \ complex, however, if there are ingress LSRs\n   that do not support PCEP, support\
    \ PCEP but not the PCRpt, or that are\n   unaware of the requirement to report\
    \ LSPs to the PCE.  This might\n   happen if the LSRs are able to compute paths\
    \ themselves or if they\n   receive LSP setup instructions with pre-computed paths\
    \ from an NMS.\n   An alternative approach is to note that any LSR on the path\
    \ of an LSP\n   can probably see the whole path (through the Record Route object\
    \ in\n   RSVP-TE signaling [RFC3209]) and knows the bandwidth reserved for the\n\
    \   LSP.  Thus, any LSR could report the LSP to the PCE, noting that it\n   will\
    \ not hurt (beyond additional message processing and potential\n   overload of\
    \ the PCE or the network) for the LSP to be reported\n   multiple times because\
    \ it is clearly identified.  In fact, this would\n   also provide a cross-check\
    \ mechanism.\n   Nevertheless, it is possible that some LSPs will traverse only\
    \ LSRs\n   that are not aware of the PCE's need to learn LSP state and build an\n\
    \   LSP-DB.  In these cases, the stateful PCE must either only have\n   limited\
    \ knowledge of the LSPs in the network or must learn about LSPs\n   through some\
    \ other mechanism (such as reading the MPLS and GMPLS MIB\n   modules [RFC3812]\
    \ [RFC4802]).\n   Ultimately, there may be no substitute for all LSRs being aware\
    \ of\n   Stateful PCEs and able to respond to requests for reports on all LSPs\n\
    \   that they know about.  This will allow a Stateful PCE to build its\n   LSP-DB\
    \ from scratch (which it may need to do at start of day) and to\n   verify its\
    \ LSP-DB against the network (which may be important if the\n   PCE has suffered\
    \ some form of outage).\n"
- title: 16.  How Do Redundant Stateful PCEs Synchronize State?
  contents:
  - "16.  How Do Redundant Stateful PCEs Synchronize State?\n   It is important that\
    \ two PCEs operating in a network have similar\n   views of the available resources.\
    \  That is, they should have the same\n   or substantially similar TEDs.  This\
    \ is easy to achieve either by\n   building the TEDs from the network in the same\
    \ way or by one PCE\n   synchronizing its TED to the other PCE using a TED export\
    \ protocol\n   such as BGP-LS [LS-DISTRIB] or the Network Configuration Protocol\n\
    \   (NETCONF) [RFC6241] (see Section 6).\n   Synchronizing the LSP-DB can be a\
    \ more complicated issue.  As\n   described in Section 15, building the LSP-DB\
    \ can be an involved\n   process, so it would be best to not have multiple PCEs\
    \ each trying to\n   build an LSP-DB from the network.  However, it is still important\n\
    \   that where multiple PCEs operate in the network (either as\n   distributed\
    \ PCEs or with one acting as a backup for the other), their\n   LSP-DBs are kept\
    \ synchronized.\n   Thus, there is likely to be a need for a protocol mechanism\
    \ for one\n   PCE to update its LSP-DB with that of another PCE.  This is no\n\
    \   different from any other database-synchronization problem and could\n   use\
    \ existing mechanisms or a new protocol.  Note, however, that in\n   the case\
    \ of distributed PCEs that are also Active PCEs (see Section\n   17), each PCE\
    \ will be creating entries in its own LSP-DB; so, the\n   synchronization of databases\
    \ must be incremental and bidirectional,\n   not just simply a database dump.\n\
    \   It may be helpful to clarify the word \"redundant\" in the context of\n  \
    \ this question.  One interpretation is that a redundant PCE exists\n   solely\
    \ as a backup such that it only performs a function in the\n   network in the\
    \ event of a failure of the primary PCE.  This seems\n   like a waste of expensive\
    \ resources, and it would make more sense for\n   the redundant PCE to take its\
    \ share of computation load all the time.\n   However, that scenario of two (or\
    \ more) active PCEs creates exactly\n   the state synchronization issue described\
    \ above.\n   Various deployment options have been suggested where one PCE serves\
    \ a\n   set of PCCs as the primary computation server, and only addresses\n  \
    \ requests from other PCCs in the event of the failure of some other\n   PCE;\
    \ however, this mode of operation still raises questions about the\n   need for\
    \ synchronized state even in non-failure scenarios if the LSPs\n   that will be\
    \ computed by the different PCEs may traverse the same\n   network resources.\n"
- title: 17.  What Is an Active PCE? What Is a Passive PCE?
  contents:
  - "17.  What Is an Active PCE? What Is a Passive PCE?\n   A Passive PCE is one that\
    \ only responds to path computation requests.\n   It takes no autonomous actions.\
    \  A Passive PCE may be stateless or\n   stateful.\n   An Active PCE is one that\
    \ issues provisioning \"recommendations\" to\n   the network.  These recommendations\
    \ may be new routes for existing\n   LSPs or routes for new LSPs (that is, an\
    \ Active PCE may recommend the\n   instantiation of new LSPs).  An Active PCE\
    \ may be stateless or\n   stateful, but in order for it to reroute existing LSPs\
    \ effectively,\n   it is likely to hold state for at least those LSPs that it\
    \ will\n   reroute.\n   Many people consider that the PCE, itself, cannot be Active.\
    \  That\n   is, they hold that the PCE's function is purely to compute paths.\
    \  In\n   that worldview, the \"Active PCE\" is actually the combination of a\n\
    \   normal, passive PCE and an additional architectural component\n   responsible\
    \ for issuing commands or recommendations to the network.\n   In some configurations,\
    \ the VNTM discussed in Sections 21 and 22\n   provides this additional component.\n\
    \   Section 20 offers a brief comparison of the different modes of PCE\n   with\
    \ reference to passive and active PCE.\n"
- title: 18.  What is LSP Delegation?
  contents:
  - "18.  What is LSP Delegation?\n   LSP delegation [STATEFUL-PCE] is the process\
    \ where a PCC (usually an\n   ingress LSR) passes responsibility for triggering\
    \ updates to the\n   attributes of an LSP (such as bandwidth or path) to the PCE.\
    \  In this\n   case, the PCE would need to be both Stateful and Active.\n   LSP\
    \ delegation allows an LSP to be set up under the control of the\n   ingress LSR\
    \ potentially using the services of a PCE.  Once the LSP\n   has been set up,\
    \ the LSR (a PCC) tells the PCE about the LSP by\n   providing details of the\
    \ path and resources used.  It delegates\n   responsibility for the LSP to the\
    \ PCE so that the PCE can make\n   adjustments to the LSP as dictated by changes\
    \ to the TED and the\n   policies in force at the PCE.  The PCE makes the adjustments\
    \ by\n   sending a new path to the LSR with the instruction/recommendation\n \
    \  that the LSP be re-signaled.\n   There may be some debate over whether the\
    \ PCE \"owns\" the LSP after\n   delegation.  That is, if the PCE supplies a new\
    \ path, is the ingress\n   LSR required to act or can it take the information\
    \ \"under\n   advisement\"?  It may be too soon to answer this question\n   definitively;\
    \ however, there is certainly an expectation that the LSR\n   will act on the\
    \ advice it receives.  A comparison may be drawn with a\n   visit to the doctor:\
    \ the doctor has an expectation that the patient\n   will take the medicine, but\
    \ the patient has free will.\n   It is important, however, to distinguish between\
    \ an LSP established\n   within the network and subsequently delegated to a PCE\
    \ and an LSP\n   that was established as the result of an Active PCE's recommendation\n\
    \   for LSP instantiation.\n   Section 20 offers a brief comparison of the different\
    \ modes of PCE\n   with reference to LSP delegation.\n"
- title: 19.  Is an Active PCE with LSP Delegation Just a Fancy NMS?
  contents:
  - "19.  Is an Active PCE with LSP Delegation Just a Fancy NMS?\n   In many ways\
    \ the answer here is \"yes\".  But the PCE architecture\n   forms part of a new\
    \ way of looking at network operation and\n   management.  In this new view, the\
    \ network operation is more dynamic\n   and under the control of software applications\
    \ without direct\n   intervention from operators.  This is not to say that the\
    \ operator\n   has no say in how their network runs, but it does mean that the\n\
    \   operator sets policies (see Section 24) and that new components (such\n  \
    \ as an Active PCE) are responsible for acting on those policies to\n   dynamically\
    \ control the network.\n   There is a subtle distinction between an NMS and an\
    \ Active PCE with\n   LSP delegation.  An NMS is in control of the LSPs in the\
    \ network and\n   can command that they are set up, modified, or torn down.  An\
    \ Active\n   PCE can only make suggestions about LSPs that have been delegated\
    \ to\n   the PCE by a PCC, or make recommendations for the instantiation of\n\
    \   new LSPs.\n   For more details, see the discussion of an architecture for\n\
    \   Application-Based Network Operation (ABNO) in [NET-OPS]\n"
- title: 20.  Comparison of Stateless and Stateful PCE
  contents:
  - "20.  Comparison of Stateless and Stateful PCE\n   Table 1 shows a comparison\
    \ of stateless and stateful PCEs to show how\n   they how might be instantiated\
    \ as passive or active PCEs with or\n   without control of LSPs.  The terms used\
    \ relate to the concepts\n   introduced in the previous sections.  The entries\
    \ in the table refer\n   to the notes that follow.\n                         \
    \  | Stateless |  Stateful |\n   ------------------------+-----------+-----------+\n\
    \   Passive                 |     1     |     2     |\n   Active delegated LSPs\
    \   |     3     |     4     |\n   Active suggest new LSPs |     5     |     6\
    \     |\n   Active instantiate LSPs |     7     |     7     |\n   Notes:\n   1.\
    \ Passive is the normal mode for a stateless PCE.\n   2. A passive mode stateful\
    \ PCE may have value for more complex\n      environments and for computing protected\
    \ services.\n   3. Delegation of LSPs to a stateless PCE is relatively pointless,\n\
    \      but could add value at moment of delegation.\n   4. This is the normal\
    \ mode for a stateful PCE.\n   5. There is only marginal potential for a stateless\
    \ PCE to\n      recommend new LSPs because without a view of existing LSPs, the\n\
    \      PCE cannot determine when new ones might be needed.\n   6. This mode has\
    \ potential for recommending the instantiation of\n      new LSPs.\n   7. These\
    \ modes are out of scope for PCE as currently described.\n      That is, the PCE\
    \ can recommend instantiation, but cannot\n      actually instantiate the LSPs.\n\
    \              Table 1 : Comparing Stateless and Stateful PCE\n"
- title: 21.  How Does a PCE Work with a Virtual Network Topology?
  contents:
  - "21.  How Does a PCE Work with a Virtual Network Topology?\n   A Virtual Network\
    \ Topology (VNT) is described in [RFC4397] as a set\n   of Hierarchical LSPs that\
    \ is created (or could be created) in a\n   particular network layer to provide\
    \ network flexibility (data links)\n   in other layers.  Thus, the TE topology\
    \ of a network can be\n   constructed from TE links that are simply data links,\
    \ from TE links\n   that are supported by LSPs in another layer of the network,\
    \ or from\n   TE links that could be supported by LSPs (\"potential LSPs\") that\n\
    \   would be set up on demand in another network layer.  This third type\n   of\
    \ TE link is known as a Virtual TE Link in [RFC5212].\n   [RFC5212] also gives\
    \ a more detailed explanation of a VNT, and it\n   should be noted that the network\
    \ topology in a packet network could\n   be supported by LSPs in a number of different\
    \ lower-layer networks.\n   For example, the TE links in the packet network could\
    \ be achieved by\n   connections (LSPs) in underlying Synchronous Optical Network\
    \ or\n   Synchronous Digital Hierarchy (SONET/SDH) and photonic networks.\n  \
    \ Furthermore, because of the hierarchical nature of MPLS, the TE links\n   in\
    \ a packet network may be achieved by setting up packet LSPs in the\n   same packet\
    \ network.\n   A PCE obviously works with the TED that contains information about\n\
    \   the TE links in the network.  Those links may be already established\n   or\
    \ may be virtual TE links.  In a simple TED, there is no distinction\n   between\
    \ the types of TE link; however, there may be advantages to\n   selecting TE links\
    \ that are based on real data links over those based\n   on dynamic LSPs in lower\
    \ layers because the data links may be more\n   stable.  Conversely, the TE links\
    \ based on dynamic LSPs may be able\n   to be repaired dynamically giving better\
    \ resilience.  Similarly, a\n   PCE may prefer to select a TE link that is supported\
    \ by a data link\n   or existing LSP in preference to using a virtual TE link\
    \ because the\n   latter may need to be set up (taking time) and the setup could\n\
    \   potentially fail.  Thus, a PCE might want to employ additional\n   metrics\
    \ or indicators to help it view the TED and select the right\n   path for LSPs.\n\
    \   If a PCE uses a virtual TE link, then some action will be needed to\n   establish\
    \ the LSP that supports that link.  Some models (such as that\n   in [RFC5212])\
    \ trigger the setup of the lower-layer LSPs on-demand\n   during the signaling\
    \ of the upper-layer LSP (i.e., when the upper\n   layer comes to use the virtual\
    \ TE link, the upper-layer signaling is\n   paused and the lower-layer LSP is\
    \ established).  Another view,\n   described in [RFC5623], is that when the PCE\
    \ computes a path that\n   will use a virtual TE link, it should trigger the setup\
    \ of the lower-\n   layer LSP to properly create the TE link so that the path\
    \ it returns\n   will be sure to be viable.  This latter mode of operation can\
    \ be\n   extended to allow the PCE to spot the need for additional TE links\n\
    \   and to trigger LSPs in lower layers in order to create those links.\n   Of\
    \ course, such \"interference\" in a lower-layer network by a PCE\n   responsible\
    \ for a higher-layer network depends heavily on policy.  In\n   order to make\
    \ a clean architectural separation and to facilitate\n   proper policy control,\
    \ [RFC5623] introduces the Virtual Network\n   Topology Manager (VNTM) as a functional\
    \ element that manages and\n   controls the VNT.  [RFC5623] notes that the PCE\
    \ and VNT Manager are\n   distinct functional elements that may or may not be\
    \ collocated.\n   indeed, it should be noted that there will be a PCE for the\
    \ upper\n   layer, and a PCE for each lower layer, and a VNTM responsible for\n\
    \   coordinating between the PCEs and for triggering LSP setup in the\n   lower\
    \ layers.  Therefore, the combination of all of the PCEs and the\n   VNTM produces\
    \ functionally similar to an Active, multi-layer PCE.\n   See [TE-INFO] for additional\
    \ discussion of the construction of\n   networks using virtual and potential links.\n"
- title: 22.  How Does PCE Communicate with VNTM
  contents:
  - "22.  How Does PCE Communicate with VNTM\n   The VNTM described in Section 21\
    \ and [RFC5623] has several interfaces\n   (see also [NET-OPS]).\n   -  In order\
    \ to make decisions on whether to create new TE links, the\n      VNTM needs to\
    \ learn from the upper-layer PCE about resource\n      shortages and the need\
    \ for additional TE links.  It can then make\n      policy-based decisions to\
    \ determine whether to create new TE links\n      and how to support them through\
    \ existing or new LSPs.\n   -  The VNTM will need to coordinate with the PCEs\
    \ in the lower\n      layers, but this is simply a normal use of PCEP.\n   - \
    \ The VNTM will need to issue provisioning requests/commands (via\n      the Provisioning\
    \ Manager described in [NET-OPS]) to the lower-\n      layer networks to cause\
    \ LSPs to be set up to act as TE links in\n      the higher layer network.  A\
    \ number of potential protocols exist\n      for this function as described in\
    \ [NET-OPS], but it should be\n      noted that it makes a lot of sense for this\
    \ interface to be the\n      same as that used by an Active PCE when providing\
    \ paths to the\n      network.\n"
- title: 23.  How Does Service Scheduling and Calendering Work?
  contents:
  - "23.  How Does Service Scheduling and Calendering Work?\n   LSP scheduling or\
    \ calendaring is a process where LSPs are planned\n   ahead of time, and they\
    \ are only set up when needed.  The challenge\n   here is to ensure that the resources\
    \ needed by an LSP and that were\n   available when the LSP's path was computed\
    \ are still available when\n   the LSP needs to be set up.  This needs to be achieved\
    \ using a\n   mechanism that allows those resources to be used in the meantime.\n\
    \   Previous discussion of this topic has suggested that LSPs should be\n   pre-signaled\
    \ so that each LSR along the path could make a \"temporal\n   reservation\" of\
    \ resources.  But this approach can become very\n   complicated requiring each\
    \ network node to store multi-dimensional\n   state.\n   Conversely, a centralized\
    \ database of resources and LSPs (such as the\n   database maintained by a Stateful\
    \ PCE) can be enhanced with a time-\n   based booking system.  If the PCE is also\
    \ Active, then when the time\n   comes for the LSP to be set up (or later, when\
    \ it is to be torn\n   down), the PCE can issue recommendations to the network.\n\
    \   In a busy network (and why would one bother with a scheduling service\n  \
    \ in a network that is not busy?), it should be noted that the\n   computation\
    \ algorithm can be quite complex.  It may also be necessary\n   to reposition\
    \ existing or planned LSPs as new bookings arrive.\n   Furthermore, the booking\
    \ database that contains both the scheduled\n   LSPs and their impact on the network\
    \ resources can become quite\n   large.  A very important factor in the size of\
    \ the active database\n   (depending on implementation) may be the timeslices\
    \ that are\n   available in the calendering process.\n"
- title: 24.  Where Does Policy Fit In?
  contents:
  - "24.  Where Does Policy Fit In?\n   Policy is critical to the operation of a network.\
    \  In a PCE context,\n   it provides control and management of how a PCE selects\
    \ network\n   resources for use by different PCEs.\n   [RFC5394] introduced the\
    \ concept of PCE-based policy-enabled path\n   computation.  It is based on the\
    \ Policy Core Information Model (PCIM)\n   [RFC3060] as extended by [RFC3460],\
    \ and provides a framework for\n   supporting path computation policy.\n   Policy\
    \ enters into all aspects of the use of a PCE starting from the\n   very decision\
    \ to use a PCE to off-load computation function from the\n   LSRs.\n   -  Each\
    \ PCC must select which computations will be delegated to a\n      PCE.\n   -\
    \  Each PCC must select which PCEs it will use.\n   -  Each PCE must determine\
    \ which PCCs are allowed to use its services\n      and for what computations.\n\
    \   -  The PCE must determine how to collect the information in its TED,\n   \
    \   who to trust for that information, and how to refresh/update the\n      information.\n\
    \   -  Each PCE must determine which objective functions and which\n      algorithms\
    \ to apply.\n   -  Inter-domain (and particularly H-PCE) computations will need\
    \ to be\n      sensitive to commercial and reliability information about domains\n\
    \      and their interactions.\n   -  Stateful PCEs must determine what state\
    \ to hold, when to refresh\n      it, and which network elements to trust for\
    \ the supply of the\n      state information.\n   -  An Active PCE must have a\
    \ policy relationship with its LSRs to\n      determine which LSPs can be modified\
    \ or triggered, and what LSP\n      delegation is supported.\n   -  Multi-layer\
    \ interactions (especially those using virtual or\n      dynamic TE links) must\
    \ provide policy control to stop server layer\n      LSPs (which are fat and expensive\
    \ by definition) from being set up\n      on a whim to address micro-flows or\
    \ speculative computations in\n      higher layers.\n   -  A PCE may supply, along\
    \ with a computed path, policy information\n      that should be signaled during\
    \ LSP setup for use by the LSRs along\n      the path.\n   It may be seen, therefore,\
    \ that a PCE is substantially a policy\n   engine that computes paths.  It should\
    \ also be noted that the work of\n   the PCE can be substantially controlled by\
    \ configured policy in a way\n   that will reduce the options available to the\
    \ PCC, but also\n   significantly reduce the need for the use of optional parameters\
    \ in\n   the PCEP messages.\n"
- title: 25.  Does PCE Play a Role in SDN?
  contents:
  - "25.  Does PCE Play a Role in SDN?\n   Software-Defined Networking (SDN) is the\
    \ latest shiny thing in\n   networking.  It refers to a separation between the\
    \ control elements\n   and the forwarding components so that software running\
    \ in a\n   centralized system called a controller, can act to program the\n  \
    \ devices in the network to behave in specific ways.\n   A required element in\
    \ an SDN architecture is a component that plans\n   how the network resources\
    \ will be used and how the devices will be\n   programmed.  It is possible to\
    \ view this component as performing\n   specific computations to place flows within\
    \ the network given\n   knowledge of the availability of network resources, how\
    \ other\n   forwarding devices are programmed, and the way that other flows are\n\
    \   routed.  This, it may be concluded, is the same function that a PCE\n   might\
    \ offer in a network operated using a dynamic control plane.\n   Thus, a PCE could\
    \ form part of the infrastructure for an SDN.\n   A view of how PCE integrates\
    \ into a wider network control system\n   including SDN is presented in [NET-OPS].\n"
- title: 26.  Security Considerations
  contents:
  - "26.  Security Considerations\n   The use of a PCE-based architecture and subsequent\
    \ impact on network\n   security must, itself, be considered in the context of\
    \ existing\n   routing and signaling protocols and techniques.  The nature of\
    \ multi-\n   domain network scenarios and establishment of relationships between\n\
    \   PCCs and PCEs may increase the vulnerability of the network to\n   security\
    \ attacks.  However, this informational document does not\n   define any new protocol\
    \ elements or mechanism.  As such, it does not\n   introduce any new security\
    \ issues and security is deemed to be a\n   \"previously answered question\" even\
    \ if the answers previously\n   supplied are not perfect.  Previous PCE RFCs have\
    \ given some\n   attention to security concerns in the use of PCE (RFC 4655),\
    \ PCE\n   discovery (RFC 4674, RFC 5088, and RFC 5089), and PCEP (RFC 4657 and\n\
    \   RFC 5440).\n   It is worth noting that PCEP operates over TCP.  An analysis\
    \ of the\n   security issues for routing protocols that use TCP (including PCEP)\n\
    \   is provided in [RFC6952], while [PCE-PCEPS] discusses an experimental\n  \
    \ approach to provide secure transport for PCEP.\n   A number of the questions\
    \ raised and answered in this document should\n   be given consideration in the\
    \ light of security requirements.  Some\n   of these are called out explicitly\
    \ (Sections 8 and 10), but attention\n   should also be paid to security in all\
    \ aspects of the use of PCE.\n   For example:\n   -  Topology and other information\
    \ about the network needs to be kept\n      private and protected from modification\
    \ or forgery.  That means\n      that access to the TED, LSP-DB, etc., needs to\
    \ be secured and that\n      mechanisms used to gather topology and other information\
    \ (Sections\n      2, 11, 14, and 15) need to include security.\n   -  PCE discovery\
    \ (Sections 4, 5, 9, and 10) needs to protect against\n      impersonation or\
    \ misconfiguration so that PCCs know that they are\n      getting correct paths\
    \ and so that PCEs know that they are only\n      serving legitimate computation\
    \ requests.\n   -  Synchronization of information and state between PCEs (Sections\
    \ 6\n      and 16) is subject to the same security requirements in that the\n\
    \      information exchanged is sensitive and needs to be protected\n      against\
    \ interception and modification.\n   -  PCE computes paths for components that\
    \ may provision the network.\n      Those component are responsible for the security\
    \ of the\n      provisioning mechanisms, however, if PCE operates as a\n     \
    \ provisioning protocol (Sections 17, 18, 19, and 25).\n   -  A PCE may also need\
    \ to interface with other network components\n      (Sections 19, 21, 22, and\
    \ 25).  Those communications, if external\n      to an implementation, also need\
    \ to be secure.\n"
- title: 27.  References
  contents:
  - '27.  References

    '
- title: 27.1.  Normative References
  contents:
  - "27.1.  Normative References\n   [RFC4655]      Farrel, A., Vasseur, J.-P., and\
    \ J. Ash, \"A Path\n                  Computation Element (PCE)-Based Architecture\"\
    , RFC\n                  4655, August 2006,\n                  <http://www.rfc-editor.org/info/rfc4655>.\n\
    \   [RFC5440]      Vasseur, JP., Ed., and JL. Le Roux, Ed., \"Path\n         \
    \         Computation Element (PCE) Communication Protocol\n                 \
    \ (PCEP)\", RFC 5440, March 2009,\n                  <http://www.rfc-editor.org/info/rfc5440>.\n\
    \   [RFC5623]      Oki, E., Takeda, T., Le Roux, JL., and A. Farrel,\n       \
    \           \"Framework for PCE-Based Inter-Layer MPLS and GMPLS\n           \
    \       Traffic Engineering\", RFC 5623, September 2009,\n                  <http://www.rfc-editor.org/info/rfc5623>.\n\
    \   [RFC6805]      King, D., Ed., and A. Farrel, Ed., \"The Application of\n \
    \                 the Path Computation Element Architecture to the\n         \
    \         Determination of a Sequence of Domains in MPLS and\n               \
    \   GMPLS\", RFC 6805, November 2012,\n                  <http://www.rfc-editor.org/info/rfc6805>.\n"
- title: 27.2.  Informative References
  contents:
  - "27.2.  Informative References\n   [ALTO-SERVER-DISC]\n                  Kiesel,\
    \ S., Stiemerling, M., Schwan, N., Scharf, M.,\n                  and H. Song,\
    \ \"ALTO Server Discovery\", Work in\n                  Progress, draft-ietf-alto-server-discovery-10,\n\
    \                  September 2013.\n   [LS-DISTRIB]   Gredler, H., Medved, J.,\
    \ Previdi, S., Farrel, A., and\n                  S. Ray, \"North-Bound Distribution\
    \ of Link-State and TE\n                  Information using BGP\", Work in Progress,\n\
    \                  draft-ietf-idr-ls-distribution-06, September 2014.\n   [NET-OPS]\
    \      King, D., and A. Farrel, \"A PCE-based Architecture for\n             \
    \     Application-based Network Operations\", Work in\n                  Progress,\
    \ draft-farrkingel-pce-abno-architecture-13,\n                  October 2014.\n\
    \   [PCE-PCEPS]    Lopez, D., Gonzalez de Dios, O., Wu, Q., and D. Dhody,\n  \
    \                \"Secure Transport for PCEP\", Work in Progress,\n          \
    \        draft-ietf-pce-pceps-02, October 2014.\n   [RFC3060]      Moore, B.,\
    \ Ellesson, E., Strassner, J., and A.\n                  Westerinen, \"Policy\
    \ Core Information Model -- Version\n                  1 Specification\", RFC\
    \ 3060, February 2001,\n                  <http://www.rfc-editor.org/info/rfc3060>.\n\
    \   [RFC3209]      Awduche, D., Berger, L., Gan, D., Li, T., Srinivasan,\n   \
    \               V., and G. Swallow, \"RSVP-TE: Extensions to RSVP for\n      \
    \            LSP Tunnels\", RFC 3209, December 2001,\n                  <http://www.rfc-editor.org/info/rfc3209>.\n\
    \   [RFC3460]      Moore, B., Ed., \"Policy Core Information Model (PCIM)\n  \
    \                Extensions\", RFC 3460, January 2003\n                  <http://www.rfc-editor.org/info/rfc3460>.\n\
    \   [RFC3630]      Katz, D., Kompella, K., and D. Yeung, \"Traffic\n         \
    \         Engineering (TE) Extensions to OSPF Version 2\", RFC\n             \
    \     3630, September 2003,\n                  <http://www.rfc-editor.org/info/rfc3630>.\n\
    \   [RFC3812]      Srinivasan, C., Viswanathan, A., and T. Nadeau,\n         \
    \         \"Multiprotocol Label Switching (MPLS) Traffic\n                  Engineering\
    \ (TE) Management Information Base (MIB)\",\n                  RFC 3812, June\
    \ 2004,\n                  <http://www.rfc-editor.org/info/rfc3812>.\n   [RFC4203]\
    \      Kompella, K., Ed., and Y. Rekhter, Ed., \"OSPF\n                  Extensions\
    \ in Support of Generalized Multi-Protocol\n                  Label Switching\
    \ (GMPLS)\", RFC 4203, October 2005,\n                  <http://www.rfc-editor.org/info/rfc4203>.\n\
    \   [RFC4397]      Bryskin, I. and A. Farrel, \"A Lexicography for the\n     \
    \             Interpretation of Generalized Multiprotocol Label\n            \
    \      Switching (GMPLS) Terminology within the Context of\n                 \
    \ the ITU-T's Automatically Switched Optical Network\n                  (ASON)\
    \ Architecture\", RFC 4397, February 2006,\n                  <http://www.rfc-editor.org/info/rfc4397>.\n\
    \   [RFC4657]      Ash, J., Ed., and J. Le Roux, Ed., \"Path Computation\n   \
    \               Element (PCE) Communication Protocol Generic\n               \
    \   Requirements\", RFC 4657, September 2006,\n                  <http://www.rfc-editor.org/info/rfc4657>.\n\
    \   [RFC4674]      Le Roux, J., Ed., \"Requirements for Path Computation\n   \
    \               Element (PCE) Discovery\", RFC 4674, October 2006,\n         \
    \         <http://www.rfc-editor.org/info/rfc4674>.\n   [RFC4726]      Farrel,\
    \ A., Vasseur, J.-P., and A. Ayyangar, \"A\n                  Framework for Inter-Domain\
    \ Multiprotocol Label\n                  Switching Traffic Engineering\", RFC\
    \ 4726, November\n                  2006, <http://www.rfc-editor.org/info/rfc4726>.\n\
    \   [RFC4802]      Nadeau, T., Ed., and A. Farrel, Ed., \"Generalized\n      \
    \            Multiprotocol Label Switching (GMPLS) Traffic\n                 \
    \ Engineering Management Information Base\", RFC 4802,\n                  February\
    \ 2007,\n                  <http://www.rfc-editor.org/info/rfc4802>.\n   [RFC4848]\
    \      Daigle, L., \"Domain-Based Application Service Location\n             \
    \     Using URIs and the Dynamic Delegation Discovery\n                  Service\
    \ (DDDS)\", RFC 4848, April 2007,\n                  <http://www.rfc-editor.org/info/rfc4848>.\n\
    \   [RFC4974]      Papadimitriou, D. and A. Farrel, \"Generalized MPLS\n     \
    \             (GMPLS) RSVP-TE Signaling Extensions in Support of\n           \
    \       Calls\", RFC 4974, August 2007,\n                  <http://www.rfc-editor.org/info/rfc4974>.\n\
    \   [RFC5088]      Le Roux, JL., Ed., Vasseur, JP., Ed., Ikejiri, Y., and\n  \
    \                R. Zhang, \"OSPF Protocol Extensions for Path\n             \
    \     Computation Element (PCE) Discovery\", RFC 5088,\n                  January\
    \ 2008,\n                  <http://www.rfc-editor.org/info/rfc5088>.\n   [RFC5089]\
    \      Le Roux, JL., Ed., Vasseur, JP., Ed., Ikejiri, Y., and\n              \
    \    R. Zhang, \"IS-IS Protocol Extensions for Path\n                  Computation\
    \ Element (PCE) Discovery\", RFC 5089,\n                  January 2008,\n    \
    \              <http://www.rfc-editor.org/info/rfc5089>.\n   [RFC5152]      Vasseur,\
    \ JP., Ed., Ayyangar, A., Ed., and R. Zhang, \"A\n                  Per-Domain\
    \ Path Computation Method for Establishing\n                  Inter-Domain Traffic\
    \ Engineering (TE) Label Switched\n                  Paths (LSPs)\", RFC 5152,\
    \ February 2008,\n                  <http://www.rfc-editor.org/info/rfc5152>.\n\
    \   [RFC5212]      Shiomoto, K., Papadimitriou, D., Le Roux, JL.,\n          \
    \        Vigoureux, M., and D. Brungard, \"Requirements for\n                \
    \  GMPLS-Based Multi-Region and Multi-Layer Networks\n                  (MRN/MLN)\"\
    , RFC 5212, July 2008,\n                  <http://www.rfc-editor.org/info/rfc5212>.\n\
    \   [RFC5305]      Li, T. and H. Smit, \"IS-IS Extensions for Traffic\n      \
    \            Engineering\", RFC 5305, October 2008,\n                  <http://www.rfc-editor.org/info/rfc5305>.\n\
    \   [RFC5307]      Kompella, K., Ed., and Y. Rekhter, Ed., \"IS-IS\n         \
    \         Extensions in Support of Generalized Multi-Protocol\n              \
    \    Label Switching (GMPLS)\", RFC 5307, October 2008,\n                  <http://www.rfc-editor.org/info/rfc5307>.\n\
    \   [RFC5394]      Bryskin, I., Papadimitriou, D., Berger, L., and J.\n      \
    \            Ash, \"Policy-Enabled Path Computation Framework\", RFC\n       \
    \           5394, December 2008,\n                  <http://www.rfc-editor.org/info/rfc5394>.\n\
    \   [RFC5441]      Vasseur, JP., Ed., Zhang, R., Bitar, N., and JL. Le\n     \
    \             Roux, \"A Backward-Recursive PCE-Based Computation\n           \
    \       (BRPC) Procedure to Compute Shortest Constrained\n                  Inter-Domain\
    \ Traffic Engineering Label Switched\n                  Paths\", RFC 5441, April\
    \ 2009,\n                  <http://www.rfc-editor.org/info/rfc5441>.\n   [RFC5557]\
    \      Lee, Y., Le Roux, JL., King, D., and E. Oki, \"Path\n                 \
    \ Computation Element Communication Protocol (PCEP)\n                  Requirements\
    \ and Protocol Extensions in Support of\n                  Global Concurrent Optimization\"\
    , RFC 5557, July 2009,\n                  <http://www.rfc-editor.org/info/rfc5557>.\n\
    \   [RFC5986]      Thomson, M. and J. Winterbottom, \"Discovering the\n      \
    \            Local Location Information Server (LIS)\", RFC 5986,\n          \
    \        September 2010,\n                  <http://www.rfc-editor.org/info/rfc5986>.\n\
    \   [RFC6006]      Zhao, Q., Ed., King, D., Ed., Verhaeghe, F., Takeda,\n    \
    \              T., Ali, Z., and J. Meuric, \"Extensions to the Path\n        \
    \          Computation Element Communication Protocol (PCEP) for\n           \
    \       Point-to-Multipoint Traffic Engineering Label Switched\n             \
    \     Paths\", RFC 6006, September 2010,\n                  <http://www.rfc-editor.org/info/rfc6006>.\n\
    \   [RFC6241]      Enns, R., Ed., Bjorklund, M., Ed., Schoenwaelder, J.,\n   \
    \               Ed., and A. Bierman, Ed., \"Network Configuration\n          \
    \        Protocol (NETCONF)\", RFC 6241, June 2011,\n                  <http://www.rfc-editor.org/info/rfc6241>.\n\
    \   [RFC6952]      Jethanandani, M., Patel, K., and L. Zheng, \"Analysis\n   \
    \               of BGP, LDP, PCEP, and MSDP Issues According to the\n        \
    \          Keying and Authentication for Routing Protocols (KARP)\n          \
    \        Design Guide\", RFC 6952, May 2013,\n                  <http://www.rfc-editor.org/info/rfc6952>.\n\
    \   [STATEFUL-PCE] Crabbe, E., Minei, I., Medved, J., and R. Varga, \"PCEP\n \
    \                 Extensions for Stateful PCE\", Work in Progress,\n         \
    \         draft-ietf-pce-stateful-pce-10, October 2014.\n   [TE-INFO]      Farrel,\
    \ A., Ed., Drake, J., Bitar, N., Swallow, G.,\n                  Ceccarelli, D,\
    \ and X. Zhang, \"Problem Statement and\n                  Architecture for Information\
    \ Exchange Between\n                  Interconnected Traffic Engineered Networks\"\
    , Work in\n                  Progress, draft-farrel-interconnected-te-info-\n\
    \                  exchange-07, September 2014.\n"
- title: Acknowledgements
  contents:
  - "Acknowledgements\n   Thanks for constructive comments go to Fatai Zhang, Oscar\
    \ Gonzalez de\n   Dios, Xian Zhang, Cyril Margaria, Denis Ovsienko, Ina Minei,\
    \ Dhruv\n   Dhody, and Qin Wu.\n   This work was supported in part by the FP-7\
    \ IDEALIST project under\n   grant agreement number 317999.\n   This work received\
    \ funding from the European Union's Seventh\n   Framework Programme for research,\
    \ technological development and\n   demonstration through the PACE project under\
    \ grant agreement no.\n   619712.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Adrian Farrel\n   Juniper Networks\n   EMail: adrian@olddog.co.uk\n\
    \   Daniel King\n   Old Dog Consulting\n   EMail: daniel@olddog.co.uk\n"
