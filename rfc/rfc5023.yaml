- title: __initial_text__
  contents:
  - '                      The Atom Publishing Protocol

    '
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Abstract
  contents:
  - "Abstract\n   The Atom Publishing Protocol (AtomPub) is an application-level\n\
    \   protocol for publishing and editing Web resources.  The protocol is\n   based\
    \ on HTTP transfer of Atom-formatted representations.  The Atom\n   format is\
    \ documented in the Atom Syndication Format.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................4\n\
    \   2. Notational Conventions ..........................................4\n  \
    \    2.1. XML-Related Conventions ....................................4\n    \
    \       2.1.1. Referring to Information Items ......................4\n      \
    \     2.1.2. RELAX NG Schema .....................................4\n        \
    \   2.1.3. Use of \"xml:base\" and \"xml:lang\" ....................5\n   3. Terminology\
    \ .....................................................5\n   4. Protocol Model\
    \ ..................................................6\n      4.1. Identity and\
    \ Naming ........................................6\n      4.2. Documents and Resource\
    \ Classification ......................7\n      4.3. Control and Publishing .....................................8\n\
    \      4.4. Client Implementation Considerations .......................9\n  \
    \ 5. Protocol Operations .............................................9\n    \
    \  5.1. Retrieving a Service Document .............................10\n      5.2.\
    \ Listing Collection Members ................................10\n      5.3. Creating\
    \ a Resource .......................................11\n      5.4. Editing a Resource\
    \ ........................................11\n           5.4.1. Retrieving a Resource\
    \ ..............................11\n           5.4.2. Editing a Resource .................................12\n\
    \           5.4.3. Deleting a Resource ................................12\n  \
    \    5.5. Use of HTTP Response Codes ................................12\n   6.\
    \ Protocol Documents .............................................13\n      6.1.\
    \ Document Types ............................................13\n      6.2. Document\
    \ Extensibility ....................................13\n   7. Category Documents\
    \ .............................................14\n      7.1. Example ...................................................14\n\
    \      7.2. Element Definitions .......................................14\n  \
    \         7.2.1. The \"app:categories\" Element .......................14\n  \
    \ 8. Service Documents ..............................................15\n    \
    \  8.1. Workspaces ................................................16\n      8.2.\
    \ Example ...................................................16\n      8.3. Element\
    \ Definitions .......................................17\n           8.3.1. The\
    \ \"app:service\" Element ..........................17\n           8.3.2. The\
    \ \"app:workspace\" Element ........................18\n           8.3.3. The\
    \ \"app:collection\" Element .......................18\n           8.3.4. The\
    \ \"app:accept\" Element ...........................19\n           8.3.5. Usage\
    \ in Atom Feed Documents .......................19\n           8.3.6. The \"app:categories\"\
    \ Element .......................20\n   9. Creating and Editing Resources .................................20\n\
    \      9.1. Member URIs ...............................................20\n  \
    \    9.2. Creating Resources with POST ..............................20\n    \
    \       9.2.1. Example ............................................21\n      9.3.\
    \ Editing Resources with PUT ................................22\n      9.4. Deleting\
    \ Resources with DELETE ............................22\n      9.5. Caching and\
    \ Entity Tags ...................................22\n           9.5.1. Example\
    \ ............................................23\n      9.6. Media Resources and\
    \ Media Link Entries ....................25\n           9.6.1. Examples ...........................................26\n\
    \      9.7. The Slug Header ...........................................30\n  \
    \         9.7.1. Slug Header Syntax .................................31\n    \
    \       9.7.2. Example ............................................31\n   10.\
    \ Listing Collections ...........................................32\n      10.1.\
    \ Collection Partial Lists .................................32\n      10.2. The\
    \ \"app:edited\" Element .................................33\n   11. Atom Format\
    \ Link Relation Extensions ..........................34\n      11.1. The \"edit\"\
    \ Link Relation .................................34\n      11.2. The \"edit-media\"\
    \ Link Relation ...........................34\n   12. The Atom Format Type Parameter\
    \ ................................34\n      12.1. The \"type\" parameter .....................................34\n\
    \           12.1.1. Conformance .......................................35\n  \
    \ 13. Atom Publishing Controls ......................................35\n    \
    \  13.1. The \"app:control\" Element ................................35\n    \
    \       13.1.1. The \"app:draft\" Element ...........................36\n   14.\
    \ Securing the Atom Publishing Protocol .........................36\n   15. Security\
    \ Considerations .......................................37\n      15.1. Denial\
    \ of Service ........................................37\n      15.2. Replay Attacks\
    \ ...........................................37\n      15.3. Spoofing Attacks\
    \ .........................................37\n      15.4. Linked Resources .........................................38\n\
    \      15.5. Digital Signatures and Encryption ........................38\n  \
    \    15.6. URIs and IRIs ............................................38\n    \
    \  15.7. Code Injection and Cross Site Scripting ..................39\n   16.\
    \ IANA Considerations ...........................................39\n      16.1.\
    \ Content-Type Registration for 'application/atomcat+xml' ..39\n      16.2. Content-Type\
    \ Registration for 'application/atomsvc+xml' ..40\n      16.3. Header Field Registration\
    \ for 'SLUG' .....................42\n      16.4. The Link Relation Registration\
    \ \"edit\" ....................42\n      16.5. The Link Relation Registration\
    \ \"edit-media\" ..............42\n      16.6. The Atom Format Media Type Parameter\
    \ .....................43\n   17. References ....................................................43\n\
    \      17.1. Normative References .....................................43\n  \
    \    17.2. Informative References ...................................44\n   Appendix\
    \ A. Contributors ..........................................46\n   Appendix B.\
    \ RELAX NG Compact Schema ...............................46\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   The Atom Publishing Protocol is an application-level protocol\
    \ for\n   publishing and editing Web Resources using HTTP [RFC2616] and XML 1.0\n\
    \   [REC-xml].  The protocol supports the creation of Web Resources and\n   provides\
    \ facilities for:\n   o  Collections: Sets of Resources, which can be retrieved\
    \ in whole or\n      in part.\n   o  Services: Discovery and description of Collections.\n\
    \   o  Editing: Creating, editing, and deleting Resources.\n   The Atom Publishing\
    \ Protocol is different from many contemporary\n   protocols in that the server\
    \ is given wide latitude in processing\n   requests from clients.  See Section\
    \ 4.4 for more details.\n"
- title: 2.  Notational Conventions
  contents:
  - "2.  Notational Conventions\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\"\
    , \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"\
    MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described\
    \ in [RFC2119].\n"
- title: 2.1.  XML-Related Conventions
  contents:
  - '2.1.  XML-Related Conventions

    '
- title: 2.1.1.  Referring to Information Items
  contents:
  - "2.1.1.  Referring to Information Items\n   Atom Protocol Document formats are\
    \ specified in terms of the XML\n   Information Set [REC-xml-infoset], serialized\
    \ as XML 1.0 [REC-xml].\n   The Infoset terms \"Element Information Item\" and\
    \ \"Attribute\n   Information Item\" are shortened to \"element\" and \"attribute\"\
    \n   respectively.  Therefore, when this specification uses the term\n   \"element\"\
    , it is referring to an Element Information Item, and when\n   it uses the term\
    \ \"attribute\", it is referring to an Attribute\n   Information Item.\n"
- title: 2.1.2.  RELAX NG Schema
  contents:
  - "2.1.2.  RELAX NG Schema\n   Some sections of this specification are illustrated\
    \ with fragments of\n   a non-normative RELAX NG Compact schema [RNC].  However,\
    \ the text of\n   this specification provides the definition of conformance. \
    \ Complete\n   schemas appear in Appendix B.\n"
- title: 2.1.3.  Use of "xml:base" and "xml:lang"
  contents:
  - "2.1.3.  Use of \"xml:base\" and \"xml:lang\"\n   XML elements defined by this\
    \ specification MAY have an \"xml:base\"\n   attribute [REC-xmlbase].  When xml:base\
    \ is used, it serves the\n   function described in Section 5.1.1 of URI Generic\
    \ Syntax [RFC3986],\n   by establishing the base URI (or IRI, Internationalized\
    \ Resource\n   Identifier [RFC3987]) for resolving relative references found within\n\
    \   the scope of the \"xml:base\" attribute.\n   Any element defined by this specification\
    \ MAY have an \"xml:lang\"\n   attribute, whose content indicates the natural\
    \ language for the\n   element and its descendants.  Requirements regarding the\
    \ content and\n   interpretation of \"xml:lang\" are specified in Section 2.12\
    \ of XML 1.0\n   [REC-xml].\n"
- title: 3.  Terminology
  contents:
  - "3.  Terminology\n   For convenience, this protocol can be referred to as the\
    \ \"Atom\n   Protocol\" or \"AtomPub\".  The following terminology is used by\
    \ this\n   specification:\n   o  URI - A Uniform Resource Identifier as defined\
    \ in [RFC3986].  In\n      this specification, the phrase \"the URI of a document\"\
    \ is\n      shorthand for \"a URI which, when dereferenced, is expected to\n \
    \     produce that document as a representation\".\n   o  IRI - An Internationalized\
    \ Resource Identifier as defined in\n      [RFC3987].  Before an IRI found in\
    \ a document is used by HTTP, the\n      IRI is first converted to a URI.  See\
    \ Section 4.1.\n   o  Resource - A network-accessible data object or service identified\n\
    \      by an IRI, as defined in [RFC2616].  See [REC-webarch] for further\n  \
    \    discussion on Resources.\n   o  relation (or \"relation of\") - Refers to\
    \ the \"rel\" attribute value\n      of an atom:link element.\n   o  Representation\
    \ - An entity included with a request or response as\n      defined in [RFC2616].\n\
    \   o  Collection - A Resource that contains a set of Member Resources.\n    \
    \  Collections are represented as Atom Feeds.  See Section 9.\n   o  Member (or\
    \ Member Resource) - A Resource whose IRI is listed in a\n      Collection by\
    \ an atom:link element with a relation of \"edit\" or\n      \"edit-media\". \
    \ See Section 9.1.  The protocol defines two kinds of\n      Members:\n      *\
    \  Entry Resource - Members of a Collection that are represented\n         as\
    \ Atom Entry Documents, as defined in [RFC4287].\n      *  Media Resource - Members\
    \ of a Collection that have\n         representations other than Atom Entry Documents.\n\
    \   o  Media Link Entry - An Entry Resource that contains metadata about\n   \
    \   a Media Resource.  See Section 9.6.\n   o  Workspace - A named group of Collections.\
    \  See Section 8.1.\n   o  Service Document - A document that describes the location\
    \ and\n      capabilities of one or more Collections, grouped into Workspaces.\n\
    \      See Section 8.\n   o  Category Document - A document that describes the\
    \ categories\n      allowed in a Collection.  See Section 7.\n"
- title: 4.  Protocol Model
  contents:
  - "4.  Protocol Model\n   The Atom Protocol specifies operations for publishing\
    \ and editing\n   Resources using HTTP.  It uses Atom-formatted representations\
    \ to\n   describe the state and metadata of those Resources.  It defines how\n\
    \   Collections of Resources can be organized, and it specifies formats\n   to\
    \ support their discovery, grouping and categorization.\n"
- title: 4.1.  Identity and Naming
  contents:
  - "4.1.  Identity and Naming\n   Atom Protocol documents allow the use of IRIs [RFC3987]\
    \ as well as\n   URIs [RFC3986] to identify Resources.  Before an IRI in a document\
    \ is\n   used by HTTP, the IRI is first converted to a URI according to the\n\
    \   procedure defined in Section 3.1 of [RFC3987].  In accordance with\n   that\
    \ specification, the conversion SHOULD be applied as late as\n   possible.  Conversion\
    \ does not imply Resource creation -- the IRI and\n   the URI into which it is\
    \ converted identify the same Resource.\n   While the Atom Protocol specifies\
    \ the formats of the representations\n   that are exchanged and the actions that\
    \ can be performed on the IRIs\n   embedded in those representations, it does\
    \ not constrain the form of\n   the URIs that are used.  HTTP [RFC2616] specifies\
    \ that the URI space\n   of each server is controlled by that server, and this\
    \ protocol\n   imposes no further constraints on that control.\n"
- title: 4.2.  Documents and Resource Classification
  contents:
  - "4.2.  Documents and Resource Classification\n   A Resource whose IRI is listed\
    \ in a Collection is called a Member\n   Resource.  The protocol defines two kinds\
    \ of Member Resources --\n   Entry Resources and Media Resources.  Entry Resources\
    \ are represented\n   as Atom Entry Documents [RFC4287].  Media Resources can\
    \ have\n   representations in any media type.  A Media Resource is described\n\
    \   within a Collection using an Entry called a Media Link Entry.  This\n   diagram\
    \ shows the classification of Resources within the Atom\n   Protocol:\n      \
    \          Member Resources\n                       |\n                -----------------\n\
    \               |                 |\n         Entry Resources     Media Resources\n\
    \               |\n         Media Link Entry\n   The Atom Protocol defines Collection\
    \ Resources for managing and\n   organizing both kinds of Member Resource.  A\
    \ Collection is\n   represented by an Atom Feed Document.  A Collection Feed's\
    \ Entries\n   contain the IRIs of, and metadata about, the Collection's Member\n\
    \   Resources.  A Collection Feed can contain any number of Entries,\n   which\
    \ might represent all the Members of the Collection, or an\n   ordered subset\
    \ of them (see Section 10.1).  In the diagram of a\n   Collection below, there\
    \ are two Entries.  The first contains the IRI\n   of an Entry Resource.  The\
    \ second contains the IRIs of both a Media\n   Resource and a Media Link Entry,\
    \ which contains the metadata for that\n   Media Resource:\n     Collection\n\
    \        |\n        o- Entry\n        |    |\n        |    o- Member Entry IRI\
    \ (Entry Resource)\n        |\n        o- Entry\n             |\n            \
    \ o- Member Entry IRI (Media Link Entry)\n             |\n             o- Media\
    \ IRI        (Media Resource)\n   The Atom Protocol does not make a distinction\
    \ between Feeds used for\n   Collections and other Atom Feeds.  The only mechanism\
    \ that this\n   specification supplies for indicating that a Feed is a Collection\n\
    \   Feed is the presence of the Feed's IRI in a Service Document.\n   Service\
    \ Documents represent server-defined groups of Collections, and\n   are used to\
    \ initialize the process of creating and editing Resources.\n   These groups of\
    \ Collections are called Workspaces.  Workspaces have\n   names, but no IRIs,\
    \ and no specified processing model.  The Service\n   Document can indicate which\
    \ media types, and which categories, a\n   Collection will accept.  In the diagram\
    \ below, there are two\n   Workspaces each describing the IRIs, acceptable media\
    \ types, and\n   categories for a Collection:\n     Service\n        o- Workspace\n\
    \        |    |\n        |    o- Collection\n        |         |\n        |  \
    \       o- IRI, categories, media types\n        |\n        o- Workspace\n   \
    \          |\n             o- Collection\n                  |\n              \
    \    o- IRI, categories, media types\n"
- title: 4.3.  Control and Publishing
  contents:
  - "4.3.  Control and Publishing\n   The Atom Publishing Protocol uses HTTP methods\
    \ to author Member\n   Resources as follows:\n   o  GET is used to retrieve a\
    \ representation of a known Resource.\n   o  POST is used to create a new, dynamically\
    \ named, Resource.  When\n      the client submits non-Atom-Entry representations\
    \ to a Collection\n      for creation, two Resources are always created -- a Media\
    \ Entry\n      for the requested Resource, and a Media Link Entry for metadata\n\
    \      about the Resource that will appear in the Collection.\n   o  PUT is used\
    \ to edit a known Resource.  It is not used for Resource\n      creation.\n  \
    \ o  DELETE is used to remove a known Resource.\n   The Atom Protocol only covers\
    \ the creating, editing, and deleting of\n   Entry and Media Resources.  Other\
    \ Resources could be created, edited,\n   and deleted as the result of manipulating\
    \ a Collection, but the\n   number of those Resources, their media types, and\
    \ effects of Atom\n   Protocol operations on them are outside the scope of this\n\
    \   specification.\n   Since all aspects of client-server interaction are defined\
    \ in terms\n   of HTTP, [RFC2616] should be consulted for any areas not covered\
    \ in\n   this specification.\n"
- title: 4.4.  Client Implementation Considerations
  contents:
  - "4.4.  Client Implementation Considerations\n   The Atom Protocol imposes few\
    \ restrictions on the actions of servers.\n   Unless a constraint is specified\
    \ here, servers can be expected to\n   vary in behavior, in particular around\
    \ the manipulation of Atom\n   Entries sent by clients.  For example, although\
    \ this specification\n   only defines the expected behavior of Collections with\
    \ respect to GET\n   and POST, this does not imply that PUT, DELETE, PROPPATCH,\
    \ and others\n   are forbidden on Collection Resources -- only that this specification\n\
    \   does not define what the server's response would be to those methods.\n  \
    \ Similarly, while some HTTP status codes are mentioned explicitly,\n   clients\
    \ ought to be prepared to handle any status code from a server.\n   Servers can\
    \ choose to accept, reject, delay, moderate, censor,\n   reformat, translate,\
    \ relocate, or re-categorize the content submitted\n   to them.  Only some of\
    \ these choices are immediately relayed back to\n   the client in responses to\
    \ client requests; other choices may only\n   become apparent later, in the feed\
    \ or published entries.  The same\n   series of requests to two different publishing\
    \ sites can result in a\n   different series of HTTP responses, different resulting\
    \ feeds, or\n   different entry contents.\n   As a result, client software has\
    \ to be written flexibly to accept\n   what the server decides are the results\
    \ of its submissions.  Any\n   server response or server content modification\
    \ not explicitly\n   forbidden by this specification or HTTP [RFC2616] is therefore\n\
    \   allowed.\n"
- title: 5.  Protocol Operations
  contents:
  - "5.  Protocol Operations\n   While specific HTTP status codes are shown in the\
    \ interaction\n   diagrams below, an AtomPub client should be prepared to handle\
    \ any\n   status code.  For example, a PUT to a Member URI could result in the\n\
    \   return of a \"204 No Content\" status code, which still indicates\n   success.\n"
- title: 5.1.  Retrieving a Service Document
  contents:
  - "5.1.  Retrieving a Service Document\n   Client                              \
    \       Server\n     |                                           |\n     |  1.)\
    \ GET to Service Document URI          |\n     |------------------------------------------>|\n\
    \     |                                           |\n     |  2.) 200 Ok      \
    \                         |\n     |      Service Document                    \
    \ |\n     |<------------------------------------------|\n     |              \
    \                             |\n   1.  The client sends a GET request to the\
    \ URI of the Service\n       Document.\n   2.  The server responds with a Service\
    \ Document enumerating the IRIs\n       of a group of Collections and the capabilities\
    \ of those\n       Collections supported by the server.  The content of this\n\
    \       document can vary based on aspects of the client request,\n       including,\
    \ but not limited to, authentication credentials.\n"
- title: 5.2.  Listing Collection Members
  contents:
  - "5.2.  Listing Collection Members\n   To list the Members of a Collection, the\
    \ client sends a GET request\n   to the URI of a Collection.  An Atom Feed Document\
    \ is returned whose\n   Entries contain the IRIs of Member Resources.  The returned\
    \ Feed may\n   describe all, or only a partial list, of the Members in a Collection\n\
    \   (see Section 10).\n   Client                          Server\n     |     \
    \                           |\n     |  1.) GET to Collection URI     |\n     |------------------------------->|\n\
    \     |                                |\n     |  2.) 200 Ok                 \
    \   |\n     |      Atom Feed Document        |\n     |<-------------------------------|\n\
    \     |                                |\n   1.  The client sends a GET request\
    \ to the URI of the Collection.\n   2.  The server responds with an Atom Feed\
    \ Document containing the\n       IRIs of the Collection Members.\n"
- title: 5.3.  Creating a Resource
  contents:
  - "5.3.  Creating a Resource\n   Client                                     Server\n\
    \     |                                           |\n     |  1.) POST to Collection\
    \ URI               |\n     |      Member Representation                |\n  \
    \   |------------------------------------------>|\n     |                    \
    \                       |\n     |  2.) 201 Created                          |\n\
    \     |      Location: Member Entry URI           |\n     |<------------------------------------------|\n\
    \     |                                           |\n   1.  The client POSTs a\
    \ representation of the Member to the URI of the\n       Collection.\n   2.  If\
    \ the Member Resource was created successfully, the server\n       responds with\
    \ a status code of 201 and a Location header that\n       contains the IRI of\
    \ the newly created Entry Resource.  Media\n       Resources could have also been\
    \ created and their IRIs can be\n       found through the Entry Resource.  See\
    \ Section 9.6 for more\n       details.\n"
- title: 5.4.  Editing a Resource
  contents:
  - "5.4.  Editing a Resource\n   Once a Resource has been created and its Member\
    \ URI is known, that\n   URI can be used to retrieve, edit, and delete the Resource.\
    \  Section\n   11 describes extensions to the Atom Syndication Format used in\
    \ the\n   Atom Protocol for editing purposes.\n"
- title: 5.4.1.  Retrieving a Resource
  contents:
  - "5.4.1.  Retrieving a Resource\n   Client                                    \
    \ Server\n     |                                           |\n     |  1.) GET\
    \ to Member URI                    |\n     |------------------------------------------>|\n\
    \     |                                           |\n     |  2.) 200 Ok      \
    \                         |\n     |      Member Representation               \
    \ |\n     |<------------------------------------------|\n     |              \
    \                             |\n   1.  The client sends a GET request to the\
    \ URI of a Member Resource to\n       retrieve its representation.\n   2.  The\
    \ server responds with the representation of the Member\n       Resource.\n"
- title: 5.4.2.  Editing a Resource
  contents:
  - "5.4.2.  Editing a Resource\n   Client                                     Server\n\
    \     |                                           |\n     |  1.) PUT to Member\
    \ URI                    |\n     |      Member Representation                |\n\
    \     |------------------------------------------>|\n     |                  \
    \                         |\n     |  2.) 200 OK                              \
    \ |\n     |<------------------------------------------|\n   1.  The client sends\
    \ a PUT request to store a representation of a\n       Member Resource.\n   2.\
    \  If the request is successful, the server responds with a status\n       code\
    \ of 200.\n"
- title: 5.4.3.  Deleting a Resource
  contents:
  - "5.4.3.  Deleting a Resource\n   Client                                     Server\n\
    \     |                                           |\n     |  1.) DELETE to Member\
    \ URI                 |\n     |------------------------------------------>|\n\
    \     |                                           |\n     |  2.) 200 OK      \
    \                         |\n     |<------------------------------------------|\n\
    \     |                                           |\n   1.  The client sends a\
    \ DELETE request to the URI of a Member\n       Resource.\n   2.  If the deletion\
    \ is successful, the server responds with a status\n       code of 200.\n   A\
    \ different approach is taken for deleting Media Resources; see\n   Section 9.4\
    \ for details.\n"
- title: 5.5.  Use of HTTP Response Codes
  contents:
  - "5.5.  Use of HTTP Response Codes\n   The Atom Protocol uses the response status\
    \ codes defined in HTTP to\n   indicate the success or failure of an operation.\
    \  Consult the HTTP\n   specification [RFC2616] for detailed definitions of each\
    \ status code.\n   Implementers are asked to note that according to the HTTP\n\
    \   specification, HTTP 4xx and 5xx response entities SHOULD include a\n   human-readable\
    \ explanation of the error.\n"
- title: 6.  Protocol Documents
  contents:
  - '6.  Protocol Documents

    '
- title: 6.1.  Document Types
  contents:
  - "6.1.  Document Types\n   This specification defines two kinds of documents --\
    \ Category\n   Documents and Service Documents.\n   A Category Document (Section\
    \ 7) contains lists of categories\n   specified using the \"atom:category\" element\
    \ from the Atom Syndication\n   Format (see Section 4.2.2 of [RFC4287]).\n   A\
    \ Service Document (Section 8) groups available Collections into\n   Workspaces.\n\
    \   The namespace name [REC-xml-names] for either kind of document is:\n     \
    \  http://www.w3.org/2007/app\n   Atom Publishing Protocol XML Documents MUST\
    \ be \"namespace-well-\n   formed\" as specified in Section 7 of [REC-xml-names].\n\
    \   This specification uses the prefix \"app:\" for the namespace name.\n   The\
    \ prefix \"atom:\" is used for \"http://www.w3.org/2005/Atom\", the\n   namespace\
    \ name of the Atom Syndication Format [RFC4287].  These\n   namespace prefixes\
    \ are not semantically significant.\n   This specification does not define any\
    \ DTDs for Atom Protocol\n   formats, and hence does not require them to be \"\
    valid\" in the sense\n   used by [REC-xml].\n"
- title: 6.2.  Document Extensibility
  contents:
  - "6.2.  Document Extensibility\n   Unrecognized markup in an Atom Publishing Protocol\
    \ document is\n   considered \"foreign markup\" as defined in Section 6 of the\
    \ Atom\n   Syndication Format [RFC4287].  Foreign markup can be used anywhere\n\
    \   within a Category or Service Document unless it is explicitly\n   forbidden.\
    \  Processors that encounter foreign markup MUST NOT stop\n   processing and MUST\
    \ NOT signal an error.  Clients SHOULD preserve\n   foreign markup when transmitting\
    \ such documents.\n   The namespace name \"http://www.w3.org/2007/app\" is reserved\
    \ for\n   forward-compatible revisions of the Category and Service Document\n\
    \   types.  This does not exclude the addition of elements and attributes\n  \
    \ that might not be recognized by processors conformant to this\n   specification.\
    \  Such unrecognized markup from the\n   \"http://www.w3.org/2007/app\" namespace\
    \ MUST be treated as foreign\n   markup.\n"
- title: 7.  Category Documents
  contents:
  - "7.  Category Documents\n   Category Documents contain lists of categories described\
    \ using the\n   \"atom:category\" element from the Atom Syndication Format [RFC4287].\n\
    \   Categories can also appear in Service Documents, where they indicate\n   the\
    \ categories allowed in a Collection (see Section 8.3.6).\n   Category Documents\
    \ are identified with the \"application/atomcat+xml\"\n   media type (see Section\
    \ 16.1).\n"
- title: 7.1.  Example
  contents:
  - "7.1.  Example\n       <?xml version=\"1.0\" ?>\n       <app:categories\n    \
    \       xmlns:app=\"http://www.w3.org/2007/app\"\n           xmlns:atom=\"http://www.w3.org/2005/Atom\"\
    \n           fixed=\"yes\" scheme=\"http://example.com/cats/big3\">\n        \
    \ <atom:category term=\"animal\" />\n         <atom:category term=\"vegetable\"\
    \ />\n         <atom:category term=\"mineral\" />\n       </app:categories>\n\
    \   This Category Document contains atom:category elements, with the\n   terms\
    \ 'animal', 'vegetable', and 'mineral'.  None of the categories\n   use the \"\
    label\" attribute defined in [RFC4287].  They all inherit the\n   \"http://example.com/cats/big3\"\
    \ \"scheme\" attribute declared on the\n   app:categories element.  Therefore\
    \ if the 'mineral' category were to\n   appear in an Atom Entry or Feed Document,\
    \ it would appear as:\n   <atom:category scheme=\"http://example.com/cats/big3\"\
    \ term=\"mineral\"/>\n"
- title: 7.2.  Element Definitions
  contents:
  - '7.2.  Element Definitions

    '
- title: 7.2.1.  The "app:categories" Element
  contents:
  - "7.2.1.  The \"app:categories\" Element\n   The root of a Category Document is\
    \ the \"app:categories\" element.  An\n   app:categories element can contain zero\
    \ or more atom:category\n   elements from the Atom Syndication Format [RFC4287]\
    \ namespace\n   (\"http://www.w3.org/2005/Atom\").\n   An atom:category child\
    \ element that has no \"scheme\" attribute\n   inherits the attribute from its\
    \ app:categories parent.  An atom:\n   category child element with an existing\
    \ \"scheme\" attribute does not\n   inherit the \"scheme\" value of its app:categories\
    \ parent element.\n   atomCategory =\n       element atom:category {\n       \
    \   atomCommonAttributes,\n          attribute term { text },\n          attribute\
    \ scheme { atomURI }?,\n          attribute label { text }?,\n          undefinedContent\n\
    \       }\n   appInlineCategories =\n       element app:categories {\n       \
    \    attribute fixed { \"yes\" | \"no\" }?,\n           attribute scheme { atomURI\
    \ }?,\n           (atomCategory*,\n           undefinedContent)\n       }\n  \
    \ appOutOfLineCategories =\n       element app:categories {\n           attribute\
    \ href { atomURI },\n           undefinedContent\n       }\n   appCategories =\
    \ appInlineCategories | appOutOfLineCategories\n"
- title: 7.2.1.1.  Attributes of "app:categories"
  contents:
  - "7.2.1.1.  Attributes of \"app:categories\"\n   The app:categories element can\
    \ contain a \"fixed\" attribute, with a\n   value of either \"yes\" or \"no\"\
    , indicating whether the list of\n   categories is a fixed or an open set.  The\
    \ absence of the \"fixed\"\n   attribute is equivalent to the presence of a \"\
    fixed\" attribute with a\n   value of \"no\".\n   Alternatively, the app:categories\
    \ element MAY contain an \"href\"\n   attribute, whose value MUST be an IRI reference\
    \ identifying a\n   Category Document.  If the \"href\" attribute is provided,\
    \ the app:\n   categories element MUST be empty and MUST NOT have the \"fixed\"\
    \ or\n   \"scheme\" attributes.\n"
- title: 8.  Service Documents
  contents:
  - "8.  Service Documents\n   For authoring to commence, a client needs to discover\
    \ the\n   capabilities and locations of the available Collections.  Service\n\
    \   Documents are designed to support this discovery process.\n   How Service\
    \ Documents are discovered is not defined in this\n   specification.\n   Service\
    \ Documents are identified with the \"application/atomsvc+xml\"\n   media type\
    \ (see Section 16.2).\n"
- title: 8.1.  Workspaces
  contents:
  - "8.1.  Workspaces\n   A Service Document groups Collections into Workspaces. \
    \ Operations on\n   Workspaces, such as creation or deletion, are not defined\
    \ by this\n   specification.  This specification assigns no meaning to Workspaces;\n\
    \   that is, a Workspace does not imply any specific processing\n   assumptions.\n\
    \   There is no requirement that a server support multiple Workspaces.\n   In\
    \ addition, a Collection MAY appear in more than one Workspace.\n"
- title: 8.2.  Example
  contents:
  - "8.2.  Example\n   <?xml version=\"1.0\" encoding='utf-8'?>\n   <service xmlns=\"\
    http://www.w3.org/2007/app\"\n            xmlns:atom=\"http://www.w3.org/2005/Atom\"\
    >\n     <workspace>\n       <atom:title>Main Site</atom:title>\n       <collection\n\
    \           href=\"http://example.org/blog/main\" >\n         <atom:title>My Blog\
    \ Entries</atom:title>\n         <categories\n            href=\"http://example.com/cats/forMain.cats\"\
    \ />\n       </collection>\n       <collection\n           href=\"http://example.org/blog/pic\"\
    \ >\n         <atom:title>Pictures</atom:title>\n         <accept>image/png</accept>\n\
    \         <accept>image/jpeg</accept>\n         <accept>image/gif</accept>\n \
    \      </collection>\n     </workspace>\n     <workspace>\n       <atom:title>Sidebar\
    \ Blog</atom:title>\n       <collection\n           href=\"http://example.org/sidebar/list\"\
    \ >\n         <atom:title>Remaindered Links</atom:title>\n         <accept>application/atom+xml;type=entry</accept>\n\
    \         <categories fixed=\"yes\">\n           <atom:category\n            \
    \ scheme=\"http://example.org/extra-cats/\"\n             term=\"joke\" />\n \
    \          <atom:category\n             scheme=\"http://example.org/extra-cats/\"\
    \n             term=\"serious\" />\n         </categories>\n       </collection>\n\
    \     </workspace>\n   </service>\n   The Service Document above describes two\
    \ Workspaces.  The first\n   Workspace is called \"Main Site\", and has two Collections\
    \ called \"My\n   Blog Entries\" and \"Pictures\", whose IRIs are\n   \"http://example.org/blog/main\"\
    \ and \"http://example.org/blog/pic\"\n   respectively.  The \"Pictures\" Collection\
    \ includes three \"accept\"\n   elements indicating the types of image files the\
    \ client can send to\n   the Collection to create new Media Resources (entries\
    \ associated with\n   Media Resources are discussed in Section 9.6).\n   The second\
    \ Workspace is called \"Sidebar Blog\" and has a single\n   Collection called\
    \ \"Remaindered Links\" whose IRI is\n   \"http://example.org/sidebar/list\".\
    \  The Collection has an \"accept\"\n   element whose content is \"application/atom+xml;type=entry\"\
    ,\n   indicating it will accept Atom Entries from a client.\n   Within each of\
    \ the two Entry Collections, the \"categories\" element\n   provides a list of\
    \ available categories for Member Entries.  In the\n   \"My Blog Entries\" Collection,\
    \ the list of available categories is\n   available through the \"href\" attribute.\
    \  The \"Sidebar Blog\"\n   Collection provides a category list within the Service\
    \ Document, but\n   states the list is fixed, signaling a request from the server\
    \ that\n   Entries be POSTed using only those two categories.\n"
- title: 8.3.  Element Definitions
  contents:
  - '8.3.  Element Definitions

    '
- title: 8.3.1.  The "app:service" Element
  contents:
  - "8.3.1.  The \"app:service\" Element\n   The root of a Service Document is the\
    \ \"app:service\" element.\n   The app:service element is the container for service\
    \ information\n   associated with one or more Workspaces.  An app:service element\
    \ MUST\n   contain one or more app:workspace elements.\n   namespace app = \"\
    http://www.w3.org/2007/app\"\n   start = appService\n   appService =\n      element\
    \ app:service {\n         appCommonAttributes,\n         ( appWorkspace+\n   \
    \        & extensionElement* )\n      }\n"
- title: 8.3.2.  The "app:workspace" Element
  contents:
  - "8.3.2.  The \"app:workspace\" Element\n   Workspaces are server-defined groups\
    \ of Collections.  The \"app:\n   workspace\" element contains zero or more app:collection\
    \ elements\n   describing the Collections of Resources available for editing.\n\
    \   appWorkspace =\n      element app:workspace {\n         appCommonAttributes,\n\
    \         ( atomTitle\n           & appCollection*\n           & extensionSansTitleElement*\
    \ )\n      }\n   atomTitle = element atom:title { atomTextConstruct }\n"
- title: 8.3.2.1.  The "atom:title" Element
  contents:
  - "8.3.2.1.  The \"atom:title\" Element\n   The app:workspace element MUST contain\
    \ one \"atom:title\" element (as\n   defined in [RFC4287]), giving a human-readable\
    \ title for the\n   Workspace.\n"
- title: 8.3.3.  The "app:collection" Element
  contents:
  - "8.3.3.  The \"app:collection\" Element\n   The \"app:collection\" element describes\
    \ a Collection.  The app:\n   collection element MUST contain one atom:title element.\n\
    \   The app:collection element MAY contain any number of app:accept\n   elements,\
    \ indicating the types of representations accepted by the\n   Collection.  The\
    \ order of such elements is not significant.\n   The app:collection element MAY\
    \ contain any number of app:categories\n   elements.\n   appCollection =\n   \
    \   element app:collection {\n         appCommonAttributes,\n         attribute\
    \ href { atomURI  },\n         ( atomTitle\n           & appAccept*\n        \
    \   & appCategories*\n           & extensionSansTitleElement* )\n      }\n"
- title: 8.3.3.1.  The "href" Attribute
  contents:
  - "8.3.3.1.  The \"href\" Attribute\n   The app:collection element MUST contain\
    \ an \"href\" attribute, whose\n   value gives the IRI of the Collection.\n"
- title: 8.3.3.2.  The "atom:title" Element
  contents:
  - "8.3.3.2.  The \"atom:title\" Element\n   The \"atom:title\" element is defined\
    \ in [RFC4287] and gives a human-\n   readable title for the Collection.\n"
- title: 8.3.4.  The "app:accept" Element
  contents:
  - "8.3.4.  The \"app:accept\" Element\n   The content of an \"app:accept\" element\
    \ value is a media range as\n   defined in [RFC2616].  The media range specifies\
    \ a type of\n   representation that can be POSTed to a Collection.\n   The app:accept\
    \ element is similar to the HTTP Accept request-header\n   [RFC2616].  Media type\
    \ parameters are allowed within app:accept, but\n   app:accept has no notion of\
    \ preference -- \"accept-params\" or \"q\"\n   arguments, as specified in Section\
    \ 14.1 of [RFC2616] are not\n   significant.\n   White space (as defined in [REC-xml])\
    \ around the app:accept element's\n   media range is insignificant and MUST be\
    \ ignored.\n   A value of \"application/atom+xml;type=entry\" MAY appear in any\
    \ app:\n   accept list of media ranges and indicates that Atom Entry Documents\n\
    \   can be POSTed to the Collection.  If no app:accept element is\n   present,\
    \ clients SHOULD treat this as equivalent to an app:accept\n   element with the\
    \ content \"application/atom+xml;type=entry\".\n   If one app:accept element exists\
    \ and is empty, clients SHOULD assume\n   that the Collection does not support\
    \ the creation of new Entries.\n   appAccept =\n      element app:accept {\n \
    \           appCommonAttributes,\n            ( text? )\n      }\n"
- title: 8.3.5.  Usage in Atom Feed Documents
  contents:
  - "8.3.5.  Usage in Atom Feed Documents\n   The app:collection element MAY appear\
    \ as a child of an atom:feed or\n   atom:source element in an Atom Feed Document.\
    \  Its content identifies\n   a Collection by which new Entries can be added to\
    \ appear in the feed.\n   When it appears in an atom:feed or atom:source element,\
    \ the app:\n   collection element is considered foreign markup as defined in Section\n\
    \   6 of [RFC4287].\n"
- title: 8.3.6.  The "app:categories" Element
  contents:
  - "8.3.6.  The \"app:categories\" Element\n   The \"app:categories\" element provides\
    \ a list of the categories that\n   can be applied to the members of a Collection.\
    \  See Section 7.2.1 for\n   the detailed definition of app:categories.\n   The\
    \ server MAY reject attempts to create or store members whose\n   categories are\
    \ not present in its categories list.  A Collection that\n   indicates the category\
    \ set is open SHOULD NOT reject otherwise\n   acceptable members whose categories\
    \ are not in its categories list.\n   The absence of an app:categories element\
    \ means that the category\n   handling of the Collection is unspecified.  A \"\
    fixed\" category list\n   that contains zero categories indicates the Collection\
    \ does not\n   accept category data.\n"
- title: 9.  Creating and Editing Resources
  contents:
  - '9.  Creating and Editing Resources

    '
- title: 9.1.  Member URIs
  contents:
  - "9.1.  Member URIs\n   The Member URI allows clients to retrieve, edit, and delete\
    \ a Member\n   Resource using HTTP's GET, PUT, and DELETE methods.  Entry Resources\n\
    \   are represented as Atom Entry documents.\n   Member URIs appear in two places.\
    \  They are returned in a Location\n   header after successful Resource creation\
    \ using POST, as described in\n   Section 9.2 below.  They can also appear in\
    \ a Collection Feed's\n   Entries, as atom:link elements with a link relation\
    \ of \"edit\".\n   A Member Entry SHOULD contain such an atom:link element with\
    \ a link\n   relation of \"edit\", which indicates the Member URI.\n"
- title: 9.2.  Creating Resources with POST
  contents:
  - "9.2.  Creating Resources with POST\n   To add members to a Collection, clients\
    \ send POST requests to the URI\n   of the Collection.\n   Successful member creation\
    \ is indicated with a 201 (\"Created\")\n   response code.  When the Collection\
    \ responds with a status code of\n   201, it SHOULD also return a response body,\
    \ which MUST be an Atom\n   Entry Document representing the newly created Resource.\
    \  Since the\n   server is free to alter the POSTed Entry, for example, by changing\n\
    \   the content of the atom:id element, returning the Entry can be useful\n  \
    \ to the client, enabling it to correlate the client and server views\n   of the\
    \ new Entry.\n   When a Member Resource is created, its Member Entry URI MUST\
    \ be\n   returned in a Location header in the Collection's response.\n   If the\
    \ creation request contained an Atom Entry Document, and the\n   subsequent response\
    \ from the server contains a Content-Location\n   header that matches the Location\
    \ header character-for-character, then\n   the client is authorized to interpret\
    \ the response entity as being a\n   complete representation of the newly created\
    \ Entry.  Without a\n   matching Content-Location header, the client MUST NOT\
    \ assume the\n   returned entity is a complete representation of the created Resource.\n\
    \   The request body sent with the POST need not be an Atom Entry.  For\n   example,\
    \ it might be a picture or a movie.  Collections MAY return a\n   response with\
    \ a status code of 415 (\"Unsupported Media Type\") to\n   indicate that the media\
    \ type of the POSTed entity is not allowed or\n   supported by the Collection.\
    \  For a discussion of the issues in\n   creating such content, see Section 9.6.\n"
- title: 9.2.1.  Example
  contents:
  - "9.2.1.  Example\n   Below, the client sends a POST request containing an Atom\
    \ Entry\n   representation using the URI of the Collection:\n       POST /edit/\
    \ HTTP/1.1\n       Host: example.org\n       User-Agent: Thingio/1.0\n       Authorization:\
    \ Basic ZGFmZnk6c2VjZXJldA==\n       Content-Type: application/atom+xml;type=entry\n\
    \       Content-Length: nnn\n       Slug: First Post\n       <?xml version=\"\
    1.0\"?>\n       <entry xmlns=\"http://www.w3.org/2005/Atom\">\n         <title>Atom-Powered\
    \ Robots Run Amok</title>\n         <id>urn:uuid:1225c695-cfb8-4ebb-aaaa-80da344efa6a</id>\n\
    \         <updated>2003-12-13T18:30:02Z</updated>\n         <author><name>John\
    \ Doe</name></author>\n         <content>Some text.</content>\n       </entry>\n\
    \   The server signals a successful creation with a status code of 201.\n   The\
    \ response includes a Location header indicating the Member Entry\n   URI of the\
    \ Atom Entry, and a representation of that Entry in the body\n   of the response.\n\
    \       HTTP/1.1 201 Created\n       Date: Fri, 7 Oct 2005 17:17:11 GMT\n    \
    \   Content-Length: nnn\n       Content-Type: application/atom+xml;type=entry;charset=\"\
    utf-8\"\n       Location: http://example.org/edit/first-post.atom\n       ETag:\
    \ \"c180de84f991g8\"\n       <?xml version=\"1.0\"?>\n       <entry xmlns=\"http://www.w3.org/2005/Atom\"\
    >\n         <title>Atom-Powered Robots Run Amok</title>\n         <id>urn:uuid:1225c695-cfb8-4ebb-aaaa-80da344efa6a</id>\n\
    \         <updated>2003-12-13T18:30:02Z</updated>\n         <author><name>John\
    \ Doe</name></author>\n         <content>Some text.</content>\n         <link\
    \ rel=\"edit\"\n             href=\"http://example.org/edit/first-post.atom\"\
    />\n       </entry>\n   The Entry created and returned by the Collection might\
    \ not match the\n   Entry POSTed by the client.  A server MAY change the values\
    \ of\n   various elements in the Entry, such as the atom:id, atom:updated, and\n\
    \   atom:author values, and MAY choose to remove or add other elements\n   and\
    \ attributes, or change element content and attribute values.\n"
- title: 9.3.  Editing Resources with PUT
  contents:
  - "9.3.  Editing Resources with PUT\n   To edit a Member Resource, a client sends\
    \ a PUT request to its Member\n   URI, as specified in [RFC2616].\n   To avoid\
    \ unintentional loss of data when editing Member Entries or\n   Media Link Entries,\
    \ an Atom Protocol client SHOULD preserve all\n   metadata that has not been intentionally\
    \ modified, including unknown\n   foreign markup as defined in Section 6 of [RFC4287].\n"
- title: 9.4.  Deleting Resources with DELETE
  contents:
  - "9.4.  Deleting Resources with DELETE\n   To delete a Member Resource, a client\
    \ sends a DELETE request to its\n   Member URI, as specified in [RFC2616].  The\
    \ deletion of a Media Link\n   Entry SHOULD result in the deletion of the corresponding\
    \ Media\n   Resource.\n"
- title: 9.5.  Caching and Entity Tags
  contents:
  - "9.5.  Caching and Entity Tags\n   Implementers are advised to pay attention to\
    \ cache controls and to\n   make use of the mechanisms available in HTTP when\
    \ editing Resources,\n   in particular, entity-tags as outlined in [NOTE-detect-lost-update].\n\
    \   Clients are not assured to receive the most recent representations of\n  \
    \ Collection Members using GET if the server is authorizing\n   intermediaries\
    \ to cache them.\n"
- title: 9.5.1.  Example
  contents:
  - "9.5.1.  Example\n   Below, the client creates a Member Entry using POST:\n  \
    \     POST /myblog/entries HTTP/1.1\n       Host: example.org\n       Authorization:\
    \ Basic ZGFmZnk6c2VjZXJldA==\n       Content-Type: application/atom+xml;type=entry\n\
    \       Content-Length: nnn\n       Slug: First Post\n       <?xml version=\"\
    1.0\" ?>\n       <entry xmlns=\"http://www.w3.org/2005/Atom\">\n         <title>Atom-Powered\
    \ Robots Run Amok</title>\n         <id>urn:uuid:1225c695-cfb8-4ebb-aaaa-80da344efa6a</id>\n\
    \         <updated>2007-02-123T17:09:02Z</updated>\n         <author><name>Captain\
    \ Lansing</name></author>\n         <content>It's something moving... solid metal</content>\n\
    \       </entry>\n   The server signals a successful creation with a status code\
    \ of 201,\n   and returns an ETag header in the response.  Because, in this case,\n\
    \   the server returned a Content-Location header and Location header\n   with\
    \ the same value, the returned Entry representation can be\n   understood to be\
    \ a complete representation of the newly created Entry\n   (see Section 9.2).\n\
    \       HTTP/1.1 201 Created\n       Date: Fri, 23 Feb 2007 21:17:11 GMT\n   \
    \    Content-Length: nnn\n       Content-Type: application/atom+xml;type=entry\n\
    \       Location: http://example.org/edit/first-post.atom\n       Content-Location:\
    \ http://example.org/edit/first-post.atom\n       ETag: \"e180ee84f0671b1\"\n\
    \       <?xml version=\"1.0\" ?>\n       <entry xmlns=\"http://www.w3.org/2005/Atom\"\
    >\n         <title>Atom-Powered Robots Run Amok</title>\n         <id>urn:uuid:1225c695-cfb8-4ebb-aaaa-80da344efa6a</id>\n\
    \         <updated>2007-02-123T17:09:02Z</updated>\n         <author><name>Captain\
    \ Lansing</name></author>\n         <content>It's something moving... solid metal</content>\n\
    \       </entry>\n   The client can, if it wishes, use the returned ETag value\
    \ to later\n   construct a \"Conditional GET\" as defined in [RFC2616].  In this\
    \ case,\n   prior to editing, the client sends the ETag value for the Member\n\
    \   using the If-None-Match header.\n       GET /edit/first-post.atom HTTP/1.1\n\
    \       Host: example.org\n       Authorization: Basic ZGFmZnk6c2VjZXJldA==\n\
    \       If-None-Match: \"e180ee84f0671b1\"\n   If the Entry has not been modified,\
    \ the response will be a status\n   code of 304 (\"Not Modified\").  This allows\
    \ the client to determine\n   whether it still has the most recent representation\
    \ of the Entry at\n   the time of editing.\n       HTTP/1.1 304 Not Modified\n\
    \       Date: Sat, 24 Feb 2007 13:17:11 GMT\n   After editing, the client can\
    \ PUT the Entry and send the ETag entity\n   value in an If-Match header, informing\
    \ the server to accept the entry\n   on the condition that the entity value sent\
    \ still matches the\n   server's.\n       PUT /edit/first-post.atom HTTP/1.1\n\
    \       Host: example.org\n       Authorization: Basic ZGFmZnk6c2VjZXJldA==\n\
    \       Content-Type: application/atom+xml;type=entry\n       Content-Length:\
    \ nnn\n       If-Match: \"e180ee84f0671b1\"\n       <?xml version=\"1.0\" ?>\n\
    \       <entry xmlns=\"http://www.w3.org/2005/Atom\">\n         <title>Atom-Powered\
    \ Robots Run Amok</title>\n         <id>urn:uuid:1225c695-cfb8-4ebb-aaaa-80da344efa6a</id>\n\
    \         <updated>2007-02-24T16:34:06Z</updated>\n         <author><name>Captain\
    \ Lansing</name></author>\n         <content>Update: it's a hoax!</content>\n\
    \       </entry>\n   The server however has since received a more recent copy\
    \ than the\n   client's, and it responds with a status code of 412 (\"Precondition\n\
    \   Failed\").\n       HTTP/1.1 412 Precondition Failed\n       Date: Sat, 24\
    \ Feb 2007 16:34:11 GMT\n   This informs the client that the server has a more\
    \ recent version of\n   the Entry and will not allow the sent entity to be stored.\n"
- title: 9.6.  Media Resources and Media Link Entries
  contents:
  - "9.6.  Media Resources and Media Link Entries\n   A client can POST Media Resources\
    \ as well as Entry Resources to a\n   Collection.  If a server accepts such a\
    \ request, then it MUST create\n   two new Resources -- one that corresponds to\
    \ the entity sent in the\n   request, called the Media Resource, and an associated\
    \ Member Entry,\n   called the Media Link Entry.  Media Link Entries are represented\
    \ as\n   Atom Entries, and appear in the Collection.\n   The Media Link Entry\
    \ contains the metadata and IRI of the (perhaps\n   non-textual) Media Resource.\
    \  The Media Link Entry thus makes the\n   metadata about the Media Resource separately\
    \ available for retrieval\n   and alteration.\n   The server can signal the media\
    \ types it will accept using the app:\n   accept element in the Service Document,\
    \ as specified in Section\n   8.3.4.\n   Successful responses to creation requests\
    \ MUST include the URI of the\n   Media Link Entry in the Location header.  The\
    \ Media Link Entry SHOULD\n   contain an atom:link element with a link relation\
    \ of \"edit-media\"\n   that contains the Media Resource IRI.  The Media Link\
    \ Entry MUST have\n   an atom:content element with a \"src\" attribute.  The value\
    \ of the\n   \"src\" attribute is an IRI for the newly created Media Resource.\
    \  It\n   is OPTIONAL that the IRI of the \"src\" attribute on the atom:content\n\
    \   element be the same as the Media Resource IRI.  For example, the\n   \"src\"\
    \ attribute value might instead be a link into a static cache or\n   content distribution\
    \ network and not the Media Resource IRI.\n   Implementers are asked to note that\
    \ [RFC4287] specifies that Atom\n   Entries MUST contain an atom:summary element.\
    \  Thus, upon successful\n   creation of a Media Link Entry, a server MAY choose\
    \ to populate the\n   atom:summary element (as well as any other mandatory elements\
    \ such as\n   atom:id, atom:author, and atom:title) with content derived from\
    \ the\n   POSTed entity or from any other source.  A server might not allow a\n\
    \   client to modify the server-selected values for these elements.\n   For Resource\
    \ creation, this specification only defines cases where\n   the POST body has\
    \ an Atom Entry entity declared as an Atom media type\n   (\"application/atom+xml\"\
    ), or a non-Atom entity declared as a non-Atom\n   media type.  When a client\
    \ is POSTing an Atom Entry to a Collection,\n   it may use a media type of either\
    \ \"application/atom+xml\" or\n   \"application/atom +xml;type=entry\".  This\
    \ specification does not\n   specify any request semantics or server behavior\
    \ in the case where\n   the POSTed media type is \"application/atom+xml\" but\
    \ the body is\n   something other than an Atom Entry.  In particular, what happens\
    \ on\n   POSTing an Atom Feed Document to a Collection using the \"application/\n\
    \   atom+xml\" media type is undefined.\n   The Atom Protocol does not specify\
    \ a means to create multiple\n   representations of the same Resource (for example,\
    \ a PNG and a JPG of\n   the same image) either on creation or editing.\n"
- title: 9.6.1.  Examples
  contents:
  - "9.6.1.  Examples\n   Below, the client sends a POST request containing a PNG\
    \ image to the\n   URI of a Collection that accepts PNG images:\n       POST /edit/\
    \ HTTP/1.1\n       Host: media.example.org\n       Content-Type: image/png\n \
    \      Slug: The Beach\n       Authorization: Basic ZGFmZnk6c2VjZXJldA==\n   \
    \    Content-Length: nnn\n       ...binary data...\n   The server signals a successful\
    \ creation with a status code of 201.\n   The response includes a Location header\
    \ indicating the Member URI of\n   the Media Link Entry and a representation of\
    \ that entry in the body\n   of the response.  The Media Link Entry includes a\
    \ content element\n   with a \"src\" attribute.  It also contains a link with\
    \ a link relation\n   of \"edit-media\", specifying the IRI to be used for modifying\
    \ the\n   Media Resource.\n       HTTP/1.1 201 Created\n       Date: Fri, 7 Oct\
    \ 2005 17:17:11 GMT\n       Content-Length: nnn\n       Content-Type: application/atom+xml;type=entry;charset=\"\
    utf-8\"\n       Location: http://example.org/media/edit/the_beach.atom\n     \
    \  <?xml version=\"1.0\"?>\n       <entry xmlns=\"http://www.w3.org/2005/Atom\"\
    >\n         <title>The Beach</title>\n         <id>urn:uuid:1225c695-cfb8-4ebb-aaaa-80da344efa6a</id>\n\
    \         <updated>2005-10-07T17:17:08Z</updated>\n         <author><name>Daffy</name></author>\n\
    \         <summary type=\"text\" />\n         <content type=\"image/png\"\n  \
    \          src=\"http://media.example.org/the_beach.png\"/>\n         <link rel=\"\
    edit-media\"\n            href=\"http://media.example.org/edit/the_beach.png\"\
    \ />\n         <link rel=\"edit\"\n            href=\"http://example.org/media/edit/the_beach.atom\"\
    \ />\n       </entry>\n   Later, the client sends a PUT request containing the\
    \ new PNG using\n   the URI indicated in the Media Link Entry's \"edit-media\"\
    \ link:\n       PUT /edit/the_beach.png HTTP/1.1\n       Host: media.example.org\n\
    \       Content-Type: image/png\n       Authorization: Basic ZGFmZnk6c2VjZXJldA==\n\
    \       Content-Length: nnn\n       ...binary data...\n   The server signals a\
    \ successful edit with a status code of 200.\n       HTTP/1.1 200 Ok\n       Date:\
    \ Fri, 8 Oct 2006 17:17:11 GMT\n   The client can edit the metadata for the picture.\
    \  First GET the\n   Media Link Entry:\n       GET /media/edit/the_beach.atom\
    \ HTTP/1.1\n       Host: example.org\n       Authorization: Basic ZGFmZnk6c2VjZXJldA==\n\
    \   The Media Link Entry is returned.\n       HTTP/1.1 200 Ok\n       Date: Fri,\
    \ 7 Oct 2005 17:18:11 GMT\n       Content-Length: nnn\n       Content-Type: application/atom+xml;type=entry;charset=\"\
    utf-8\"\n       ETag: \"c181bb840673b5\"\n       <?xml version=\"1.0\"?>\n   \
    \    <entry xmlns=\"http://www.w3.org/2005/Atom\">\n         <title>The Beach</title>\n\
    \         <id>urn:uuid:1225c695-cfb8-4ebb-aaaa-80da344efa6a</id>\n         <updated>2005-10-07T17:17:08Z</updated>\n\
    \         <author><name>Daffy</name></author>\n         <summary type=\"text\"\
    \ />\n         <content type=\"image/png\"\n            src=\"http://media.example.org/the_beach.png\"\
    />\n         <link rel=\"edit-media\"\n            href=\"http://media.example.org/edit/the_beach.png\"\
    \ />\n         <link rel=\"edit\"\n            href=\"http://example.org/media/edit/the_beach.atom\"\
    \ />\n       </entry>\n   The metadata can be updated, in this case to add a summary,\
    \ and then\n   PUT back to the server.\n       PUT /media/edit/the_beach.atom\
    \ HTTP/1.1\n       Host: example.org\n       Authorization: Basic ZGFmZnk6c2VjZXJldA==\n\
    \       Content-Type: application/atom+xml;type=entry\n       Content-Length:\
    \ nnn\n       If-Match: \"c181bb840673b5\"\n       <?xml version=\"1.0\"?>\n \
    \      <entry xmlns=\"http://www.w3.org/2005/Atom\">\n         <title>The Beach</title>\n\
    \         <id>urn:uuid:1225c695-cfb8-4ebb-aaaa-80da344efa6a</id>\n         <updated>2005-10-07T17:17:08Z</updated>\n\
    \         <author><name>Daffy</name></author>\n         <summary type=\"text\"\
    >\n             A nice sunset picture over the water.\n         </summary>\n \
    \        <content type=\"image/png\"\n            src=\"http://media.example.org/the_beach.png\"\
    />\n         <link rel=\"edit-media\"\n            href=\"http://media.example.org/edit/the_beach.png\"\
    \ />\n         <link rel=\"edit\"\n            href=\"http://example.org/media/edit/the_beach.atom\"\
    \ />\n       </entry>\n   The update was successful.\n       HTTP/1.1 200 Ok\n\
    \       Date: Fri, 7 Oct 2005 17:19:11 GMT\n       Content-Length: 0\n   Multiple\
    \ Media Resources can be added to the Collection.\n       POST /edit/ HTTP/1.1\n\
    \       Host: media.example.org\n       Content-Type: image/png\n       Slug:\
    \ The Pier\n       Authorization: Basic ZGFmZnk6c2VjZXJldA==\n       Content-Length:\
    \ nnn\n       ...binary data...\n   The Resource is created successfully.\n  \
    \     HTTP/1.1 201 Created\n       Date: Fri, 7 Oct 2005 17:17:11 GMT\n      \
    \ Content-Length: nnn\n       Content-Type: application/atom+xml;type=entry;charset=\"\
    utf-8\"\n       Location: http://example.org/media/edit/the_pier.atom\n      \
    \ <?xml version=\"1.0\"?>\n       <entry xmlns=\"http://www.w3.org/2005/Atom\"\
    >\n         <title>The Pier</title>\n         <id>urn:uuid:1225c695-cfb8-4ebb-aaaa-80da344efe6b</id>\n\
    \         <updated>2005-10-07T17:26:43Z</updated>\n         <author><name>Daffy</name></author>\n\
    \         <summary type=\"text\" />\n         <content type=\"image/png\"\n  \
    \          src=\"http://media.example.org/the_pier.png\"/>\n         <link rel=\"\
    edit-media\"\n            href=\"http://media.example.org/edit/the_pier.png\"\
    \ />\n         <link rel=\"edit\"\n            href=\"http://example.org/media/edit/the_pier.atom\"\
    \ />\n       </entry>\n   The client can now create a new Atom Entry in the blog\
    \ Entry\n   Collection that references the two newly created Media Resources.\n\
    \       POST /blog/ HTTP/1.1\n       Host: example.org\n       Content-Type: application/atom+xml;type=entry\n\
    \       Slug: A day at the beach\n       Authorization: Basic ZGFmZnk6c2VjZXJldA==\n\
    \       Content-Length: nnn\n       <?xml version=\"1.0\"?>\n       <entry xmlns=\"\
    http://www.w3.org/2005/Atom\">\n         <title>A fun day at the beach</title>\n\
    \         <id>urn:uuid:1225c695-cfb8-4ebb-aaaa-80da344efa6b</id>\n         <updated>2005-10-07T17:40:02Z</updated>\n\
    \         <author><name>Daffy</name></author>\n         <content type=\"xhtml\"\
    >\n             <xhtml:div xmlns:xhtml=\"http://www.w3.org/1999/xhtml\">\n   \
    \              <xhtml:p>We had a good day at the beach.\n                    \
    \ <xhtml:img alt=\"the beach\"\n                         src=\"http://media.example.org/the_beach.png\"\
    />\n                 </xhtml:p>\n                 <xhtml:p>Later we walked down\
    \ to the pier.\n                     <xhtml:img  alt=\"the pier\"\n          \
    \               src=\"http://media.example.org/the_pier.png\"/>\n            \
    \     </xhtml:p>\n             </xhtml:div>\n         </content>\n       </entry>\n\
    \   The Resource is created successfully.\n       HTTP/1.1 200 Ok\n       Date:\
    \ Fri, 7 Oct 2005 17:20:11 GMT\n       Content-Length: nnn\n       Content-Type:\
    \ application/atom+xml;type=entry;charset=\"utf-8\"\n       Location: http://example.org/blog/atom/a-day-at-the-beach.atom\n\
    \       <?xml version=\"1.0\"?>\n       <entry xmlns=\"http://www.w3.org/2005/Atom\"\
    >\n         <title>A fun day at the beach</title>\n         <id>http://example.org/blog/a-day-at-the-beach.xhtml</id>\n\
    \         <updated>2005-10-07T17:43:07Z</updated>\n         <author><name>Daffy</name></author>\n\
    \         <content type=\"xhtml\">\n             <xhtml:div xmlns:xhtml=\"http://www.w3.org/1999/xhtml\"\
    >\n                 <xhtml:p>We had a good day at the beach.\n               \
    \      <xhtml:img alt=\"the beach\"\n                        src=\"http://media.example.org/the_beach.png\"\
    />\n                 </xhtml:p>\n                 <xhtml:p>Later we walked down\
    \ to the pier.\n                     <xhtml:img alt=\"the pier\"\n           \
    \             src=\"http://media.example.org/the_pier.png\"/>\n              \
    \   </xhtml:p>\n             </xhtml:div>\n         </content>\n         <link\
    \ rel=\"edit\"\n           href=\"http://example.org/blog/edit/a-day-at-the-beach.atom\"\
    />\n         <link rel=\"alternate\" type=\"text/html\"\n           href=\"http://example.org/blog/a-day-at-the-beach.html\"\
    />\n       </entry>\n   Note that the returned Entry contains a link with a relation\
    \ of\n   \"alternate\" that points to the associated HTML page that was created\n\
    \   -- this is not required by this specification, but is included to\n   show\
    \ the kinds of changes a server can make to an Entry.\n"
- title: 9.7.  The Slug Header
  contents:
  - "9.7.  The Slug Header\n   Slug is an HTTP entity-header whose presence in a POST\
    \ to a\n   Collection constitutes a request by the client to use the header's\n\
    \   value as part of any URIs that would normally be used to retrieve the\n  \
    \ to-be-created Entry or Media Resources.\n   Servers MAY use the value of the\
    \ Slug header when creating the Member\n   URI of the newly created Resource,\
    \ for instance, by using some or all\n   of the words in the value for the last\
    \ URI segment.  Servers MAY also\n   use the value when creating the atom:id,\
    \ or as the title of a Media\n   Link Entry (see Section 9.6).\n   Servers MAY\
    \ choose to ignore the Slug entity-header.  Servers MAY\n   alter the header value\
    \ before using it.  For instance, a server might\n   filter out some characters\
    \ or replace accented letters with non-\n   accented ones, replace spaces with\
    \ underscores, change case, and so\n   on.\n"
- title: 9.7.1.  Slug Header Syntax
  contents:
  - "9.7.1.  Slug Header Syntax\n   The syntax of the Slug header is defined using\
    \ the augmented BNF\n   syntax defined in Section 2.1 of [RFC2616]:\n       LWS\
    \      = <defined in Section 2.2 of [RFC2616]>\n       slugtext = %x20-7E | LWS\n\
    \       Slug     = \"Slug\" \":\" *slugtext\n   The field value is the percent-encoded\
    \ value of the UTF-8 encoding of\n   the character sequence to be included (see\
    \ Section 2.1 of [RFC3986]\n   for the definition of percent encoding, and [RFC3629]\
    \ for the\n   definition of the UTF-8 encoding).\n   Implementation note: to produce\
    \ the field value from a character\n   sequence, first encode it using the UTF-8\
    \ encoding, then encode all\n   octets outside the ranges %20-24 and %26-7E using\
    \ percent encoding\n   (%25 is the ASCII encoding of \"%\", thus it needs to be\
    \ escaped).  To\n   consume the field value, first reverse the percent encoding,\
    \ then run\n   the resulting octet sequence through a UTF-8 decoding process.\n"
- title: 9.7.2.  Example
  contents:
  - "9.7.2.  Example\n   Here is an example of the Slug header that uses percent-encoding\
    \ to\n   represent the Unicode character U+00E8 (LATIN SMALL LETTER E WITH\n \
    \  GRAVE):\n       POST /myblog/entries HTTP/1.1\n       Host: example.org\n \
    \      Content-Type: image/png\n       Slug: The Beach at S%C3%A8te\n       Authorization:\
    \ Basic ZGFmZnk6c2VjZXJldA==\n       Content-Length: nnn\n       ...binary data...\n\
    \   See Section 9.2.1 for an example of the Slug header applied to the\n   creation\
    \ of an Entry Resource.\n"
- title: 10.  Listing Collections
  contents:
  - "10.  Listing Collections\n   Collection Resources MUST provide representations\
    \ in the form of Atom\n   Feed Documents whose Entries contain the IRIs of the\
    \ Members in the\n   Collection.  No distinction is made between Collection Feeds\
    \ and\n   other kinds of Feeds -- a Feed might act both as a 'public' feed for\n\
    \   subscription purposes and as a Collection Feed.\n   Each Entry in the Feed\
    \ Document SHOULD have an atom:link element with\n   a relation of \"edit\" (see\
    \ Section 11.1).\n   The Entries in the returned Atom Feed SHOULD be ordered by\
    \ their\n   \"app:edited\" property, with the most recently edited Entries coming\n\
    \   first in the document order.  The app:edited value is not equivalent\n   to\
    \ the HTTP Last-Modified header and cannot be used to determine the\n   freshness\
    \ of cached responses.\n   Clients MUST NOT assume that an Atom Entry returned\
    \ in the Feed is a\n   full representation of an Entry Resource and SHOULD perform\
    \ a GET on\n   the URI of the Member Entry before editing it.  See Section 9.5\
    \ for a\n   discussion on the implications of cache control directives when\n\
    \   obtaining entries.\n"
- title: 10.1.  Collection Partial Lists
  contents:
  - "10.1.  Collection Partial Lists\n   Collections can contain large numbers of\
    \ Resources.  A client such as\n   a web spider or web browser might be overwhelmed\
    \ if the response to a\n   GET contained every Entry in a Collection -- in turn\
    \ the server might\n   also waste bandwidth and processing time on generating\
    \ a response\n   that cannot be handled.  For this reason, servers MAY respond\
    \ to\n   Collection GET requests with a Feed Document containing a partial\n \
    \  list of the Collection's members, and a link to the next partial list\n   feed,\
    \ if it exists.  The first such partial list returned MUST\n   contain the most\
    \ recently edited member Resources and MUST have an\n   atom:link with a \"next\"\
    \ relation whose \"href\" value is the URI of the\n   next partial list of the\
    \ Collection.  This next partial list will\n   contain the next most recently\
    \ edited set of Member Resources (and an\n   atom:link to the following partial\
    \ list if it exists).\n   In addition to the \"next\" relation, partial list feeds\
    \ MAY contain\n   link elements with \"rel\" attribute values of \"previous\"\
    , \"first\", and\n   \"last\", that can be used to navigate through the complete\
    \ set of\n   entries in the Collection.\n   For instance, suppose a client is\
    \ supplied the URI\n   \"http://example.org/entries/go\" of a Collection of Member\
    \ Entries,\n   where the server as a matter of policy avoids generating Feed\n\
    \   Documents containing more than 10 Entries.  The Atom Feed Document\n   for\
    \ the Collection will then represent the first partial list of a\n   set of 10\
    \ linked Feed Documents.  The \"first\" relation references the\n   initial Feed\
    \ Document in the set and the \"last\" relation references\n   the final Feed\
    \ Document in the set.  Within each document, the\n   \"previous\" and \"next\"\
    \ link relations reference the preceding and\n   subsequent documents.\n     <feed\
    \ xmlns=\"http://www.w3.org/2005/Atom\">\n       <link rel=\"first\"\n       \
    \      href=\"http://example.org/entries/go\" />\n       <link rel=\"next\"\n\
    \             href=\"http://example.org/entries/2\" />\n       <link rel=\"last\"\
    \n             href=\"http://example.org/entries/10\" />\n       ...\n     </feed>\n\
    \   The \"previous\" and \"next\" link elements for the partial list feed\n  \
    \ located at \"http://example.org/entries/2\" would look like this:\n     <feed\
    \ xmlns=\"http://www.w3.org/2005/Atom\">\n       <link rel=\"first\"\n       \
    \      href=\"http://example.org/entries/go\" />\n       <link rel=\"previous\"\
    \n             href=\"http://example.org/entries/go\" />\n       <link rel=\"\
    next\"\n             href=\"http://example.org/entries/3\" />\n       <link rel=\"\
    last\"\n             href=\"http://example.org/entries/10\" />\n       ...\n \
    \    </feed>\n"
- title: 10.2.  The "app:edited" Element
  contents:
  - "10.2.  The \"app:edited\" Element\n   The \"app:edited\" element is a Date construct\
    \ (as defined by\n   [RFC4287]), whose content indicates the last time an Entry\
    \ was\n   edited.  If the entry has not been edited yet, the content indicates\n\
    \   the time it was created.  Atom Entry elements in Collection Documents\n  \
    \ SHOULD contain one app:edited element, and MUST NOT contain more than\n   one.\n\
    \   appEdited = element app:edited ( atomDateConstruct )\n   The server SHOULD\
    \ change the value of this element every time an\n   Entry Resource or an associated\
    \ Media Resource has been edited.\n"
- title: 11.  Atom Format Link Relation Extensions
  contents:
  - '11.  Atom Format Link Relation Extensions

    '
- title: 11.1.  The "edit" Link Relation
  contents:
  - "11.1.  The \"edit\" Link Relation\n   This specification adds the value \"edit\"\
    \ to the Atom Registry of Link\n   Relations (see Section 7.1 of [RFC4287]). \
    \ The value of \"edit\"\n   specifies that the value of the href attribute is\
    \ the IRI of an\n   editable Member Entry.  When appearing within an atom:entry,\
    \ the href\n   IRI can be used to retrieve, update, and delete the Resource\n\
    \   represented by that Entry.  An atom:entry MUST NOT contain more than\n   one\
    \ \"edit\" link relation.\n"
- title: 11.2.  The "edit-media" Link Relation
  contents:
  - "11.2.  The \"edit-media\" Link Relation\n   This specification adds the value\
    \ \"edit-media\" to the Atom Registry\n   of Link Relations (see Section 7.1 of\
    \ [RFC4287]).  When appearing\n   within an atom:entry, the value of the href\
    \ attribute is an IRI that\n   can be used to modify a Media Resource associated\
    \ with that Entry.\n   An atom:entry element MAY contain zero or more \"edit-media\"\
    \ link\n   relations.  An atom:entry MUST NOT contain more than one atom:link\n\
    \   element with a \"rel\" attribute value of \"edit-media\" that has the\n  \
    \ same \"type\" and \"hreflang\" attribute values.  All \"edit-media\" link\n\
    \   relations in the same Entry reference the same Resource.  If a client\n  \
    \ encounters multiple \"edit-media\" link relations in an Entry then it\n   SHOULD\
    \ choose a link based on the client preferences for \"type\" and\n   \"hreflang\"\
    .  If a client encounters multiple \"edit-media\" link\n   relations in an Entry\
    \ and has no preference based on the \"type\" and\n   \"hreflang\" attributes\
    \ then the client SHOULD pick the first \"edit-\n   media\" link relation in document\
    \ order.\n"
- title: 12.  The Atom Format Type Parameter
  contents:
  - "12.  The Atom Format Type Parameter\n   The Atom Syndication Format [RFC4287]\
    \ defines the \"application/\n   atom+xml\" media type to identify both Atom Feed\
    \ and Atom Entry\n   Documents.  Implementation experience has demonstrated that\
    \ Atom Feed\n   and Entry Documents can have different processing models and that\n\
    \   there are situations where they need to be differentiated.  This\n   specification\
    \ defines a \"type\" parameter used to differentiate the\n   two types of Atom\
    \ documents.\n"
- title: 12.1.  The "type" parameter
  contents:
  - "12.1.  The \"type\" parameter\n   This specification defines a new \"type\" parameter\
    \ for use with the\n   \"application/atom+xml\" media type.  The \"type\" parameter\
    \ has a value\n   of \"entry\" or \"feed\".\n   Neither the parameter name nor\
    \ its value are case sensitive.\n   The value \"entry\" indicates that the media\
    \ type identifies an Atom\n   Entry Document.  The root element of the document\
    \ MUST be atom:entry.\n   The value \"feed\" indicates that the media type identifies\
    \ an Atom\n   Feed Document.  The root element of the document MUST be atom:feed.\n\
    \   If not specified, the type is assumed to be unspecified, requiring\n   Atom\
    \ processors to examine the root element to determine the type of\n   Atom document.\n"
- title: 12.1.1.  Conformance
  contents:
  - "12.1.1.  Conformance\n   New specifications MAY require that the \"type\" parameter\
    \ be used to\n   identify the Atom Document type.  Producers of Atom Entry Documents\n\
    \   SHOULD use the \"type\" parameter regardless of whether or not it is\n   mandatory.\
    \  Producers of Atom Feed Documents MAY use the parameter.\n   Atom processors\
    \ that do not recognize the \"type\" parameter MUST\n   ignore its value and examine\
    \ the root element to determine the\n   document type.\n   Atom processors that\
    \ do recognize the \"type\" parameter SHOULD detect\n   and report inconsistencies\
    \ between the parameter's value and the\n   actual type of the document's root\
    \ element.\n"
- title: 13.  Atom Publishing Controls
  contents:
  - "13.  Atom Publishing Controls\n   This specification defines an Atom Format Structured\
    \ Extension, as\n   defined in Section 6 of [RFC4287], for publishing control\
    \ within the\n   \"http://www.w3.org/2007/app\" namespace.\n"
- title: 13.1.  The "app:control" Element
  contents:
  - "13.1.  The \"app:control\" Element\n   namespace app = \"http://www.w3.org/2007/app\"\
    \n    pubControl =\n       element app:control {\n       atomCommonAttributes,\n\
    \       pubDraft?\n       & extensionElement\n    }\n    pubDraft =\n      element\
    \ app:draft { \"yes\" | \"no\" }\n   The \"app:control\" element MAY appear as\
    \ a child of an atom:entry that\n   is being created or updated via the Atom Publishing\
    \ Protocol.  The\n   app:control element MUST appear only once in an Entry.  The\
    \ app:\n   control element is considered foreign markup as defined in Section\
    \ 6\n   of [RFC4287].\n   The app:control element and its child elements MAY be\
    \ included in\n   Atom Feed or Entry Documents.\n   The app:control element can\
    \ contain an \"app:draft\" element as defined\n   below, and it can contain extension\
    \ elements as defined in Section 6\n   of [RFC4287].\n"
- title: 13.1.1.  The "app:draft" Element
  contents:
  - "13.1.1.  The \"app:draft\" Element\n   The inclusion of the \"app:draft\" element\
    \ represents a request by the\n   client to control the visibility of a Member\
    \ Resource.  The app:draft\n   element MAY be ignored by the server.\n   The number\
    \ of app:draft elements in app:control MUST be zero or one.\n   The content of\
    \ an app:draft element MUST be one of \"yes\" or \"no\".  If\n   the element contains\
    \ \"no\", this indicates a client request that the\n   Member Resource be made\
    \ publicly visible.  If the app:draft element\n   is not present, then servers\
    \ that support the extension MUST behave\n   as though an app:draft element containing\
    \ \"no\" was sent.\n"
- title: 14.  Securing the Atom Publishing Protocol
  contents:
  - "14.  Securing the Atom Publishing Protocol\n   The Atom Publishing Protocol is\
    \ based on HTTP.  Authentication\n   requirements for HTTP are covered in Section\
    \ 11 of [RFC2616].\n   The use of authentication mechanisms to prevent POSTing\
    \ or editing by\n   unknown or unauthorized clients is RECOMMENDED but not required.\n\
    \   When authentication is not used, clients and servers are vulnerable\n   to\
    \ trivial spoofing, denial-of-service, and defacement attacks.\n   However, in\
    \ some contexts, this is an acceptable risk.\n   The type of authentication deployed\
    \ is a local decision made by the\n   server operator.  Clients are likely to\
    \ face authentication schemes\n   that vary across server deployments.  At a minimum,\
    \ client and server\n   implementations MUST be capable of being configured to\
    \ use HTTP Basic\n   Authentication [RFC2617] in conjunction with a connection\
    \ made with\n   TLS 1.0 [RFC2246] or a subsequent standards-track version of TLS\n\
    \   (such as [RFC4346]), supporting the conventions for using HTTP over\n   TLS\
    \ described in [RFC2818].\n   The choice of authentication mechanism will impact\
    \ interoperability.\n   The minimum level of security referenced above (Basic\
    \ Authentication\n   with TLS) is considered good practice for Internet applications\
    \ at\n   the time of publication of this specification and sufficient for\n  \
    \ establishing a baseline for interoperability.  Implementers are\n   encouraged\
    \ to investigate and use alternative mechanisms regarded as\n   equivalently good\
    \ or better at the time of deployment.  It is\n   RECOMMENDED that clients be\
    \ implemented in such a way that new\n   authentication schemes can be deployed.\n\
    \   Because this protocol uses HTTP response status codes as the primary\n   means\
    \ of reporting the result of a request, servers are advised to\n   respond to\
    \ unauthorized or unauthenticated requests using an\n   appropriate 4xx HTTP response\
    \ code (e.g., 401 \"Unauthorized\" or 403\n   \"Forbidden\") in accordance with\
    \ [RFC2617].\n"
- title: 15.  Security Considerations
  contents:
  - "15.  Security Considerations\n   The Atom Publishing Protocol is based on HTTP\
    \ and thus subject to the\n   security considerations found in Section 15 of [RFC2616].\n\
    \   The threats listed in this section apply to many protocols that run\n   under\
    \ HTTP.  The Atompub Working Group decided that the protection\n   afforded by\
    \ running authenticated HTTP under TLS (as described in\n   Section 14) was sufficient\
    \ to mitigate many of the problems presented\n   by the attacks listed in this\
    \ section.\n"
- title: 15.1.  Denial of Service
  contents:
  - "15.1.  Denial of Service\n   Atom Publishing Protocol server implementations\
    \ need to take adequate\n   precautions to ensure malicious clients cannot consume\
    \ excessive\n   server resources (CPU, memory, disk, etc.).\n"
- title: 15.2.  Replay Attacks
  contents:
  - "15.2.  Replay Attacks\n   Atom Publishing Protocol server implementations are\
    \ susceptible to\n   replay attacks.  Specifically, this specification does not\
    \ define a\n   means of detecting duplicate requests.  Accidentally sent duplicate\n\
    \   requests are indistinguishable from intentional and malicious replay\n   attacks.\n"
- title: 15.3.  Spoofing Attacks
  contents:
  - "15.3.  Spoofing Attacks\n   Atom Publishing Protocol implementations are susceptible\
    \ to a variety\n   of spoofing attacks.  Malicious clients might send Atom Entries\n\
    \   containing inaccurate information anywhere in the document.\n"
- title: 15.4.  Linked Resources
  contents:
  - "15.4.  Linked Resources\n   Atom Feed and Entry Documents can contain XML External\
    \ Entities as\n   defined in Section 4.2.2 of [REC-xml].  Atom implementations\
    \ are not\n   required to load external entities.  External entities are subject\
    \ to\n   the same security concerns as any network operation and can alter the\n\
    \   semantics of an Atom document.  The same issues exist for Resources\n   linked\
    \ to by Atom elements such as atom:link and atom:content.\n"
- title: 15.5.  Digital Signatures and Encryption
  contents:
  - "15.5.  Digital Signatures and Encryption\n   Atom Entry and Feed Documents can\
    \ contain XML Digital Signatures\n   [REC-xmldsig-core] and can be encrypted using\
    \ XML Encryption\n   [REC-xmlenc-core] as specified in Section 5 of [RFC4287].\
    \  Handling\n   of signatures and encrypted elements in Atom documents is discussed\n\
    \   in Sections 5 and 6.3 of [RFC4287].\n   Neither servers nor clients are under\
    \ any obligation to support\n   encryption and digital signature of Entries or\
    \ Feeds, although it is\n   certainly possible that in some installations, clients\
    \ or servers\n   might require signing or encrypting of the documents exchanged\
    \ in the\n   Atom Protocol.\n   Because servers are allowed (and in some cases,\
    \ expected) to modify\n   the contents of an Entry Document before publishing\
    \ it, signatures\n   within an entry are only likely to be useful to the server\
    \ to which\n   the entry is being sent.  Clients cannot assume that the signature\n\
    \   will be valid when viewed by a third party, or even that the server\n   will\
    \ publish the client's signature.\n   A server is allowed to strip client-applied\
    \ signatures, to strip\n   client-applied signatures and then re-sign with its\
    \ own public key,\n   and to oversign an entry with its own public key.  The meaning\
    \ to a\n   third party of a signature applied by a server is the same as a\n \
    \  signature from anyone, as described in [RFC4287].  It is RECOMMENDED\n   that\
    \ a server that is aware that it has changed any part of an Entry\n   Document\
    \ that was signed by the client should strip that signature\n   before publishing\
    \ the entry in order to prevent third parties from\n   trying to interpret a signature\
    \ that cannot be validated.\n"
- title: 15.6.  URIs and IRIs
  contents:
  - "15.6.  URIs and IRIs\n   Atom Publishing Protocol implementations handle URIs\
    \ and IRIs.  See\n   Section 7 of [RFC3986] and Section 8 of [RFC3987] for security\n\
    \   considerations related to their handling and use.\n   The Atom Publishing\
    \ Protocol leaves the server in control of minting\n   URIs.  The use of any client-supplied\
    \ data for creating new URIs is\n   subject to the same concerns as described\
    \ in the next section.\n"
- title: 15.7.  Code Injection and Cross Site Scripting
  contents:
  - "15.7.  Code Injection and Cross Site Scripting\n   Atom Feed and Entry Documents\
    \ can contain a broad range of content\n   types including code that might be\
    \ executable in some contexts.\n   Malicious clients could attempt to attack servers\
    \ or other clients by\n   injecting code into a Collection Document's Entry or\
    \ Media Resources.\n   Server implementations are strongly encouraged to verify\
    \ that client-\n   supplied content is safe prior to accepting, processing, or\n\
    \   publishing it.  In the case of HTML, experience indicates that\n   verification\
    \ based on a white list of acceptable content is more\n   effective than a black\
    \ list of forbidden content.\n   Additional information about XHTML and HTML content\
    \ safety can be\n   found in Section 8.1 of [RFC4287].\n"
- title: 16.  IANA Considerations
  contents:
  - "16.  IANA Considerations\n   This specification uses two new media types that\
    \ conform to the\n   registry mechanism described in [RFC4288], a new message\
    \ header that\n   conforms to the registry mechanism described in [RFC3864], and\
    \ two\n   new link relations that conform to the registry mechanism described\n\
    \   in [RFC4287].\n"
- title: 16.1.  Content-Type Registration for 'application/atomcat+xml'
  contents:
  - "16.1.  Content-Type Registration for 'application/atomcat+xml'\n   An Atom Publishing\
    \ Protocol Category Document, when serialized as XML\n   1.0, can be identified\
    \ with the following media type:\n   MIME media type name:  application\n   MIME\
    \ subtype name:  atomcat+xml\n   Required parameters:  None.\n   Optional parameters:\n\
    \      \"charset\":  This parameter has identical semantics to the charset\n \
    \        parameter of the \"application/xml\" media type as specified in\n   \
    \      [RFC3023].\n   Encoding considerations:  Identical to those of \"application/xml\"\
    \ as\n      described in [RFC3023], Section 3.2.\n   Security considerations:\
    \  As defined in RFC 5023.\n      In addition, as this media type uses the \"\
    +xml\" convention, it\n      shares the same security considerations as described\
    \ in [RFC3023],\n      Section 10.\n   Interoperability considerations:  There\
    \ are no known interoperability\n      issues.\n   Published specification:  RFC\
    \ 5023.\n   Applications that use this media type:  No known applications\n  \
    \    currently use this media type.\n   Additional information:\n   Magic number(s):\
    \  As specified for \"application/xml\" in [RFC3023],\n      Section 3.2.\n  \
    \ File extension:  .atomcat\n   Fragment identifiers:  As specified for \"application/xml\"\
    \ in\n      [RFC3023], Section 5.\n   Base URI:  As specified in [RFC3023], Section\
    \ 6.\n   Macintosh file type code:  TEXT\n   Person & email address to contact\
    \ for further information:\n      Joe Gregorio <joe@bitworking.org>\n   Intended\
    \ usage:  COMMON\n   Author/Change controller:  IETF (iesg@ietf.org) Internet\
    \ Engineering\n      Task Force\n"
- title: 16.2.  Content-Type Registration for 'application/atomsvc+xml'
  contents:
  - "16.2.  Content-Type Registration for 'application/atomsvc+xml'\n   An Atom Publishing\
    \ Protocol Service Document, when serialized as XML\n   1.0, can be identified\
    \ with the following media type:\n   MIME media type name:  application\n   MIME\
    \ subtype name:  atomsvc+xml\n   Required parameters:  None.\n   Optional parameters:\n\
    \      \"charset\":  This parameter has identical semantics to the charset\n \
    \        parameter of the \"application/xml\" media type as specified in\n   \
    \      [RFC3023].\n   Encoding considerations:  Identical to those of \"application/xml\"\
    \ as\n      described in [RFC3023], Section 3.2.\n   Security considerations:\
    \  As defined in RFC 5023.\n      In addition, as this media type uses the \"\
    +xml\" convention, it\n      shares the same security considerations as described\
    \ in [RFC3023],\n      Section 10.\n   Interoperability considerations:  There\
    \ are no known interoperability\n      issues.\n   Published specification:  RFC\
    \ 5023.\n   Applications that use this media type:  No known applications\n  \
    \    currently use this media type.\n   Additional information:\n   Magic number(s):\
    \  As specified for \"application/xml\" in [RFC3023],\n      Section 3.2.\n  \
    \ File extension:  .atomsvc\n   Fragment identifiers:  As specified for \"application/xml\"\
    \ in\n      [RFC3023], Section 5.\n   Base URI:  As specified in [RFC3023], Section\
    \ 6.\n   Macintosh file type code:  TEXT\n   Person and email address to contact\
    \ for further information:  Joe\n      Gregorio <joe@bitworking.org>\n   Intended\
    \ usage:  COMMON\n   Author/Change controller:  IETF (iesg@ietf.org) Internet\
    \ Engineering\n      Task Force\n"
- title: 16.3.  Header Field Registration for 'SLUG'
  contents:
  - "16.3.  Header Field Registration for 'SLUG'\n   Header field name:  SLUG\n  \
    \ Applicable protocol:  http [RFC2616]\n   Status:  standard.\n   Author/Change\
    \ controller:  IETF (iesg@ietf.org) Internet Engineering\n      Task Force\n \
    \  Specification document(s):  RFC 5023.\n   Related information:  None.\n"
- title: 16.4.  The Link Relation Registration "edit"
  contents:
  - "16.4.  The Link Relation Registration \"edit\"\n   Attribute Value:  edit\n \
    \  Description:  An IRI of an editable Member Entry.  When appearing\n      within\
    \ an atom:entry, the href IRI can be used to retrieve,\n      update, and delete\
    \ the Resource represented by that Entry.\n   Expected display characteristics:\
    \  Undefined; this relation can be\n      used for background processing or to\
    \ provide extended\n      functionality without displaying its value.\n   Security\
    \ considerations:  Automated agents should take care when this\n      relation\
    \ crosses administrative domains (e.g., the URI has a\n      different authority\
    \ than the current document).\n"
- title: 16.5.  The Link Relation Registration "edit-media"
  contents:
  - "16.5.  The Link Relation Registration \"edit-media\"\n   Attribute Value:  edit-media\n\
    \   Description:  An IRI of an editable Media Resource.  When appearing\n    \
    \  within an atom:entry, the href IRI can be used to retrieve,\n      update,\
    \ and delete the Media Resource associated with that Entry.\n   Expected display\
    \ characteristics:  Undefined; this relation can be\n      used for background\
    \ processing or to provide extended\n      functionality without displaying its\
    \ value.\n   Security considerations:  Automated agents should take care when\
    \ this\n      relation crosses administrative domains (e.g., the URI has a\n \
    \     different authority than the current document).\n"
- title: 16.6.  The Atom Format Media Type Parameter
  contents:
  - "16.6.  The Atom Format Media Type Parameter\n   IANA has added a reference to\
    \ this specification in the\n   'application/atom+xml' media type registration.\n"
- title: 17.  References
  contents:
  - '17.  References

    '
- title: 17.1.  Normative References
  contents:
  - "17.1.  Normative References\n   [REC-xml]  Yergeau, F., Paoli, J., Bray, T.,\
    \ Sperberg-McQueen, C.,\n              and E. Maler, \"Extensible Markup Language\
    \ (XML) 1.0\n              (Fourth Edition)\", World Wide Web Consortium\n   \
    \           Recommendation REC-xml-20060816, August 2006,\n              <http://www.w3.org/TR/2006/REC-xml-20060816>.\n\
    \   [REC-xml-infoset]\n              Cowan, J. and R. Tobin, \"XML Information\
    \ Set (Second\n              Edition)\", World Wide Web Consortium Recommendation\
    \ REC-\n              xml-infoset-20040204, February 2004,\n              <http://www.w3.org/TR/2004/REC-xml-infoset-20040204>.\n\
    \   [REC-xml-names]\n              Hollander, D., Bray, T., Tobin, R., and A.\
    \ Layman,\n              \"Namespaces in XML 1.0 (Second Edition)\", World Wide\
    \ Web\n              Consortium Recommendation REC-xml-names-20060816, August\n\
    \              2006, <http://www.w3.org/TR/2006/REC-xml-names-20060816>.\n   [REC-xmlbase]\n\
    \              Marsh, J., \"XML Base\", W3C REC W3C.REC-xmlbase-20010627,\n  \
    \            June 2001,\n              <http://www.w3.org/TR/2001/REC-xmlbase-20010627>.\n\
    \   [REC-xmldsig-core]\n              Solo, D., Reagle, J., and D. Eastlake, \"\
    XML-Signature\n              Syntax and Processing\", World Wide Web Consortium\n\
    \              Recommendation REC-xmldsig-core-20020212, February 2002,\n    \
    \          <http://www.w3.org/TR/2002/REC-xmldsig-core-20020212>.\n   [REC-xmlenc-core]\n\
    \              Eastlake, D. and J. Reagle, \"XML Encryption Syntax and\n     \
    \         Processing\", World Wide Web Consortium Recommendation REC-\n      \
    \        xmlenc-core-20021210, December 2002,\n              <http://www.w3.org/TR/2002/REC-xmlenc-core-20021210>.\n\
    \   [RFC2119]  Bradner, S., \"Key words for use in RFCs to Indicate\n        \
    \      Requirement Levels\", BCP 14, RFC 2119, March 1997.\n   [RFC2246]  Dierks,\
    \ T. and C. Allen, \"The TLS Protocol Version 1.0\",\n              RFC 2246,\
    \ January 1999.\n   [RFC2616]  Fielding, R., Gettys, J., Mogul, J., Frystyk, H.,\n\
    \              Masinter, L., Leach, P., and T. Berners-Lee, \"Hypertext\n    \
    \          Transfer Protocol -- HTTP/1.1\", RFC 2616, June 1999.\n   [RFC2617]\
    \  Franks, J., Hallam-Baker, P., Hostetler, J., Lawrence, S.,\n              Leach,\
    \ P., Luotonen, A., and L. Stewart, \"HTTP\n              Authentication: Basic\
    \ and Digest Access Authentication\",\n              RFC 2617, June 1999.\n  \
    \ [RFC2818]  Rescorla, E., \"HTTP Over TLS\", RFC 2818, May 2000.\n   [RFC3023]\
    \  Murata, M., St. Laurent, S., and D. Kohn, \"XML Media\n              Types\"\
    , RFC 3023, January 2001.\n   [RFC3629]  Yergeau, F., \"UTF-8, a transformation\
    \ format of ISO\n              10646\", STD 63, RFC 3629, November 2003.\n   [RFC3864]\
    \  Klyne, G., Nottingham, M., and J. Mogul, \"Registration\n              Procedures\
    \ for Message Header Fields\", BCP 90, RFC 3864,\n              September 2004.\n\
    \   [RFC3986]  Berners-Lee, T., Fielding, R., and L. Masinter, \"Uniform\n   \
    \           Resource Identifier (URI): Generic Syntax\", STD 66, RFC\n       \
    \       3986, January 2005.\n   [RFC3987]  Duerst, M. and M. Suignard, \"Internationalized\
    \ Resource\n              Identifiers (IRIs)\", RFC 3987, January 2005.\n   [RFC4287]\
    \  Nottingham, M. and R. Sayre, \"The Atom Syndication\n              Format\"\
    , RFC 4287, December 2005.\n   [RFC4288]  Freed, N. and J. Klensin, \"Media Type\
    \ Specifications and\n              Registration Procedures\", BCP 13, RFC 4288,\
    \ December 2005.\n   [RFC4346]  Dierks, T. and E. Rescorla, \"The Transport Layer\
    \ Security\n              (TLS) Protocol Version 1.1\", RFC 4346, April 2006.\n"
- title: 17.2.  Informative References
  contents:
  - "17.2.  Informative References\n   [NOTE-detect-lost-update]\n              Nielsen,\
    \ H. and D. LaLiberte, \"Editing the Web: Detecting\n              the Lost Update\
    \ Problem Using Unreserved Checkout\", World\n              Wide Web Consortium\
    \ NOTE NOTE-detect-lost-update, May\n              1999, <http://www.w3.org/1999/04/Editing/>.\n\
    \   [REC-webarch]\n              Walsh, N. and I. Jacobs, \"Architecture of the\
    \ World Wide\n              Web, Volume One\", W3C REC REC-webarch-20041215, December\n\
    \              2004, <http://www.w3.org/TR/2004/REC-webarch-20041215>.\n   [RNC]\
    \      Clark, J., \"RELAX NG Compact Syntax\", December 2001,\n              <http://www.oasis-open.org/committees/relax-ng/\n\
    \              compact-20021121.html>.\n"
- title: Appendix A.  Contributors
  contents:
  - "Appendix A.  Contributors\n   The content and concepts within are a product of\
    \ the Atom community\n   and the Atompub Working Group.\n"
- title: Appendix B.  RELAX NG Compact Schema
  contents:
  - "Appendix B.  RELAX NG Compact Schema\n   This appendix is informative.\n   The\
    \ Relax NG schema explicitly excludes elements in the Atom Protocol\n   namespace\
    \ that are not defined in this revision of the specification.\n   Requirements\
    \ for Atom Protocol processors encountering such markup\n   are given in Sections\
    \ 6.2 and 6.3 of [RFC4287].\n   The Schema for Service Documents:\n   # -*- rnc\
    \ -*- # RELAX NG Compact Syntax Grammar for the Atom Protocol\n   namespace app\
    \ = \"http://www.w3.org/2007/app\"\n   namespace atom = \"http://www.w3.org/2005/Atom\"\
    \n   namespace xsd = \"http://www.w3.org/2001/XMLSchema\"\n   namespace xhtml\
    \ = \"http://www.w3.org/1999/xhtml\"\n   namespace local = \"\"\n   start = appService\n\
    \   # common:attrs\n   atomURI = text\n   appCommonAttributes =\n      attribute\
    \ xml:base { atomURI }?,\n      attribute xml:lang { atomLanguageTag  }?,\n  \
    \    attribute xml:space {\"default\"|\"preserved\"}?,\n      undefinedAttribute*\n\
    \   atomCommonAttributes = appCommonAttributes\n   undefinedAttribute = attribute\
    \ * - (xml:base | xml:space  | xml:lang\n     | local:*) { text }\n   atomLanguageTag\
    \ = xsd:string {\n      pattern = \"([A-Za-z]{1,8}(-[A-Za-z0-9]{1,8})*)?\"\n \
    \  }\n   atomDateConstruct =\n       appCommonAttributes,\n       xsd:dateTime\n\
    \   # app:service\n   appService =\n      element app:service {\n         appCommonAttributes,\n\
    \         ( appWorkspace+\n           & extensionElement* )\n      }\n   # app:workspace\n\
    \   appWorkspace =\n      element app:workspace {\n         appCommonAttributes,\n\
    \         ( atomTitle\n           & appCollection*\n           & extensionSansTitleElement*\
    \ )\n      }\n   atomTitle = element atom:title { atomTextConstruct }\n   # app:collection\n\
    \   appCollection =\n      element app:collection {\n         appCommonAttributes,\n\
    \         attribute href { atomURI  },\n         ( atomTitle\n           & appAccept*\n\
    \           & appCategories*\n           & extensionSansTitleElement* )\n    \
    \  }\n   # app:categories\n   atomCategory =\n       element atom:category {\n\
    \          atomCommonAttributes,\n          attribute term { text },\n       \
    \   attribute scheme { atomURI }?,\n          attribute label { text }?,\n   \
    \       undefinedContent\n       }\n   appInlineCategories =\n       element app:categories\
    \ {\n           attribute fixed { \"yes\" | \"no\" }?,\n           attribute scheme\
    \ { atomURI }?,\n           (atomCategory*,\n           undefinedContent)\n  \
    \     }\n   appOutOfLineCategories =\n       element app:categories {\n      \
    \     attribute href { atomURI },\n           undefinedContent\n       }\n   appCategories\
    \ = appInlineCategories | appOutOfLineCategories\n   # app:accept\n   appAccept\
    \ =\n      element app:accept {\n            appCommonAttributes,\n          \
    \  ( text? )\n      }\n   # Simple Extension\n   simpleSansTitleExtensionElement\
    \ =\n      element * - (app:*|atom:title) {\n         text\n      }\n   simpleExtensionElement\
    \ =\n      element * - (app:*) {\n         text\n      }\n   # Structured Extension\n\
    \   structuredSansTitleExtensionElement =\n      element * - (app:*|atom:title)\
    \ {\n         (attribute * { text }+,\n            (text|anyElement)*)\n     \
    \  | (attribute * { text }*,\n          (text?, anyElement+, (text|anyElement)*))\n\
    \      }\n   structuredExtensionElement =\n      element * - (app:*) {\n     \
    \    (attribute * { text }+,\n            (text|anyElement)*)\n       | (attribute\
    \ * { text }*,\n          (text?, anyElement+, (text|anyElement)*))\n      }\n\
    \   # Other Extensibility\n   extensionSansTitleElement =\n    simpleSansTitleExtensionElement|structuredSansTitleExtensionElement\n\
    \   extensionElement = simpleExtensionElement |\n      structuredExtensionElement\n\
    \   undefinedContent = (text|anyForeignElement)*\n   # Extensions\n   anyElement\
    \ =\n      element * {\n         (attribute * { text }\n          | text\n   \
    \       | anyElement)*\n      }\n   anyForeignElement =\n       element * - app:*\
    \ {\n          (attribute * { text }\n           | text\n           | anyElement)*\n\
    \       }\n   atomPlainTextConstruct =\n       atomCommonAttributes,\n       attribute\
    \ type { \"text\" | \"html\" }?,\n       text\n   atomXHTMLTextConstruct =\n \
    \      atomCommonAttributes,\n       attribute type { \"xhtml\" },\n       xhtmlDiv\n\
    \   atomTextConstruct = atomPlainTextConstruct | atomXHTMLTextConstruct\n   anyXHTML\
    \ = element xhtml:* {\n       (attribute * { text }\n        | text\n        |\
    \ anyXHTML)*\n   }\n   xhtmlDiv = element xhtml:div {\n     (attribute * { text\
    \ }\n      | text\n      | anyXHTML)*\n   }\n   # EOF\n   The Schema for Category\
    \ Documents:\n   # -*- rnc -*- # RELAX NG Compact Syntax Grammar for the Atom\
    \ Protocol\n   namespace app = \"http://www.w3.org/2007/app\"\n   namespace atom\
    \ = \"http://www.w3.org/2005/Atom\"\n   namespace xsd = \"http://www.w3.org/2001/XMLSchema\"\
    \n   namespace local = \"\"\n   start = appCategories\n   atomCommonAttributes\
    \ =\n      attribute xml:base { atomURI }?,\n      attribute xml:lang { atomLanguageTag\
    \ }?,\n      undefinedAttribute*\n   undefinedAttribute = attribute * - (xml:base\
    \ | xml:lang | local:*) {\n     text }\n   atomURI = text\n   atomLanguageTag\
    \ = xsd:string {\n      pattern = \"([A-Za-z]{1,8}(-[A-Za-z0-9]{1,8})*)?\"\n \
    \  }\n   atomCategory =\n       element atom:category {\n          atomCommonAttributes,\n\
    \          attribute term { text },\n          attribute scheme { atomURI }?,\n\
    \          attribute label { text }?,\n          undefinedContent\n       }\n\
    \   appInlineCategories =\n       element app:categories {\n           attribute\
    \ fixed { \"yes\" | \"no\" }?,\n           attribute scheme { atomURI }?,\n  \
    \         (atomCategory*,\n           undefinedContent)\n       }\n   appOutOfLineCategories\
    \ =\n       element app:categories {\n           attribute href { atomURI },\n\
    \           (empty)\n       }\n   appCategories = appInlineCategories | appOutOfLineCategories\n\
    \   # Extensibility\n   undefinedContent = (text|anyForeignElement)*\n   anyElement\
    \ =\n      element * {\n         (attribute * { text }\n          | text\n   \
    \       | anyElement)*\n      }\n   anyForeignElement =\n       element * - atom:*\
    \ {\n          (attribute * { text }\n           | text\n           | anyElement)*\n\
    \       }\n   # EOF\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Joe Gregorio (editor)\n   Google\n   EMail: joe@bitworking.org\n\
    \   URI:   http://bitworking.org/\n   Bill de hOra (editor)\n   NewBay Software\n\
    \   EMail: bill@dehora.net\n   URI:   http://dehora.net/\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The IETF Trust (2007).\n   This document\
    \ is subject to the rights, licenses and restrictions\n   contained in BCP 78,\
    \ and except as set forth therein, the authors\n   retain all their rights.\n\
    \   This document and the information contained herein are provided on an\n  \
    \ \"AS IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n  \
    \ OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY, THE IETF TRUST AND\n   THE\
    \ INTERNET ENGINEERING TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS\n   OR IMPLIED,\
    \ INCLUDING BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF\n   THE INFORMATION\
    \ HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY\
    \ OR FITNESS FOR A PARTICULAR PURPOSE.\n"
- title: Intellectual Property
  contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or\
    \ scope of any\n   Intellectual Property Rights or other rights that might be\
    \ claimed to\n   pertain to the implementation or use of the technology described\
    \ in\n   this document or the extent to which any license under such rights\n\
    \   might or might not be available; nor does it represent that it has\n   made\
    \ any independent effort to identify any such rights.  Information\n   on the\
    \ procedures with respect to rights in RFC documents can be\n   found in BCP 78\
    \ and BCP 79.\n   Copies of IPR disclosures made to the IETF Secretariat and any\n\
    \   assurances of licenses to be made available, or the result of an\n   attempt\
    \ made to obtain a general license or permission for the use of\n   such proprietary\
    \ rights by implementers or users of this\n   specification can be obtained from\
    \ the IETF on-line IPR repository at\n   http://www.ietf.org/ipr.\n   The IETF\
    \ invites any interested party to bring to its attention any\n   copyrights, patents\
    \ or patent applications, or other proprietary\n   rights that may cover technology\
    \ that may be required to implement\n   this standard.  Please address the information\
    \ to the IETF at\n   ietf-ipr@ietf.org.\n"
