- title: __initial_text__
  contents:
  - '             Session Peering Provisioning Framework (SPPF)

    '
- title: Abstract
  contents:
  - "Abstract\n   This document specifies the data model and the overall structure\
    \ for\n   a framework to provision Session Establishment Data (SED) into\n   Session\
    \ Data Registries and SIP Service Provider (SSP) data stores.\n   The framework\
    \ is called the \"Session Peering Provisioning Framework\"\n   (SPPF).  The provisioned\
    \ data is typically used by network elements\n   for session establishment.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This\
    \ document is a product of the Internet Engineering Task Force\n   (IETF).  It\
    \ represents the consensus of the IETF community.  It has\n   received public\
    \ review and has been approved for publication by the\n   Internet Engineering\
    \ Steering Group (IESG).  Further information on\n   Internet Standards is available\
    \ in Section 2 of RFC 7841.\n   Information about the current status of this document,\
    \ any errata,\n   and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc7877.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2016 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction  . . . . . . . . . . . . . . . . . . .\
    \ . . . . .   3\n   2.  Terminology . . . . . . . . . . . . . . . . . . . . .\
    \ . . . .   6\n   3.  Framework High-Level Design . . . . . . . . . . . . . .\
    \ . . .   7\n     3.1.  Framework Data Model  . . . . . . . . . . . . . . . .\
    \ . .   7\n     3.2.  Time Value  . . . . . . . . . . . . . . . . . . . . . .\
    \ .  10\n     3.3.  Extensibility . . . . . . . . . . . . . . . . . . . . . .\
    \  10\n   4.  Substrate Protocol Requirements . . . . . . . . . . . . . . .  11\n\
    \     4.1.  Mandatory Substrate . . . . . . . . . . . . . . . . . . .  11\n  \
    \   4.2.  Connection Oriented . . . . . . . . . . . . . . . . . . .  11\n    \
    \ 4.3.  Request and Response Model  . . . . . . . . . . . . . . .  11\n     4.4.\
    \  Connection Lifetime . . . . . . . . . . . . . . . . . . .  11\n     4.5.  Authentication\
    \  . . . . . . . . . . . . . . . . . . . . .  12\n     4.6.  Authorization . .\
    \ . . . . . . . . . . . . . . . . . . . .  12\n     4.7.  Confidentiality and\
    \ Integrity . . . . . . . . . . . . . .  12\n     4.8.  Near Real Time  . . .\
    \ . . . . . . . . . . . . . . . . . .  12\n     4.9.  Request and Response Sizes\
    \  . . . . . . . . . . . . . . .  12\n     4.10. Request and Response Correlation\
    \  . . . . . . . . . . . .  13\n     4.11. Request Acknowledgement . . . . . .\
    \ . . . . . . . . . . .  13\n   5.  Base Framework Data Structures and Response\
    \ Codes . . . . . .  13\n     5.1.  Basic Object Type and Organization Identifiers\
    \  . . . . .  13\n     5.2.  Various Object Key Types  . . . . . . . . . . . .\
    \ . . . .  14\n       5.2.1.  Generic Object Key Type . . . . . . . . . . . .\
    \ . . .  14\n       5.2.2.  Derived Object Key Types  . . . . . . . . . . . .\
    \ . .  15\n     5.3.  Response Message Types  . . . . . . . . . . . . . . . .\
    \ .  16\n   6.  Framework Data Model Objects  . . . . . . . . . . . . . . . .\
    \  18\n     6.1.  Destination Group . . . . . . . . . . . . . . . . . . . .  18\n\
    \     6.2.  Public Identifier . . . . . . . . . . . . . . . . . . . .  19\n  \
    \   6.3.  SED Group . . . . . . . . . . . . . . . . . . . . . . . .  25\n    \
    \ 6.4.  SED Record  . . . . . . . . . . . . . . . . . . . . . . .  29\n     6.5.\
    \  SED Group Offer . . . . . . . . . . . . . . . . . . . . .  33\n     6.6.  Egress\
    \ Route  . . . . . . . . . . . . . . . . . . . . . .  35\n   7.  Framework Operations\
    \  . . . . . . . . . . . . . . . . . . . .  36\n     7.1.  Add Operation . . .\
    \ . . . . . . . . . . . . . . . . . . .  37\n     7.2.  Delete Operation  . .\
    \ . . . . . . . . . . . . . . . . . .  37\n     7.3.  Get Operations  . . . .\
    \ . . . . . . . . . . . . . . . . .  38\n     7.4.  Accept Operations . . . .\
    \ . . . . . . . . . . . . . . . .  38\n     7.5.  Reject Operations . . . . .\
    \ . . . . . . . . . . . . . . .  39\n     7.6.  Get Server Details Operation \
    \ . . . . . . . . . . . . . .  39\n   8.  XML Considerations  . . . . . . . .\
    \ . . . . . . . . . . . . .  40\n     8.1.  Namespaces  . . . . . . . . . . .\
    \ . . . . . . . . . . . .  40\n     8.2.  Versioning and Character Encoding .\
    \ . . . . . . . . . . .  40\n   9.  Security Considerations . . . . . . . . .\
    \ . . . . . . . . . .  41\n     9.1.  Confidentiality and Authentication  . .\
    \ . . . . . . . . .  41\n     9.2.  Authorization . . . . . . . . . . . . . .\
    \ . . . . . . . .  41\n     9.3.  Denial of Service . . . . . . . . . . . . .\
    \ . . . . . . .  41\n       9.3.1.  DoS Issues Inherited from the Substrate Mechanism\
    \ . .  42\n       9.3.2.  DoS Issues Specific to SPPF . . . . . . . . . . . .\
    \ .  42\n     9.4.  Information Disclosure  . . . . . . . . . . . . . . . . .\
    \  43\n     9.5.  Non-repudiation . . . . . . . . . . . . . . . . . . . . .  43\n\
    \     9.6.  Replay Attacks  . . . . . . . . . . . . . . . . . . . . .  43\n  \
    \   9.7.  Compromised or Malicious Intermediary . . . . . . . . . .  44\n   10.\
    \ Internationalization Considerations . . . . . . . . . . . . .  44\n   11. IANA\
    \ Considerations . . . . . . . . . . . . . . . . . . . . .  44\n     11.1.  URN\
    \ Assignments  . . . . . . . . . . . . . . . . . . . .  44\n     11.2.  Organization\
    \ Identifier Namespace Registry . . . . . . .  45\n   12. Formal Specification\
    \  . . . . . . . . . . . . . . . . . . . .  45\n   13. References  . . . . . .\
    \ . . . . . . . . . . . . . . . . . . .  54\n     13.1.  Normative References\
    \ . . . . . . . . . . . . . . . . . .  54\n     13.2.  Informative References\
    \ . . . . . . . . . . . . . . . . .  55\n   Acknowledgements  . . . . . . . .\
    \ . . . . . . . . . . . . . . . .  57\n   Authors' Addresses  . . . . . . . .\
    \ . . . . . . . . . . . . . . .  57\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   Service Providers (SPs) and enterprises use routing databases\
    \ known\n   as Registries to make session routing decisions for Voice over IP,\n\
    \   SMS, and Multimedia Messaging Service (MMS) traffic exchanges.  This\n   document\
    \ is narrowly focused on the provisioning framework for these\n   Registries.\
    \  This framework prescribes a way for an entity to\n   provision session-related\
    \ data into a Session Peering Provisioning\n   Protocol (SPPP) Registry (or \"\
    Registry\").  The data being provisioned\n   can be optionally shared with other\
    \ participating peering entities.\n   The requirements and use cases driving this\
    \ framework have been\n   documented in [RFC6461].\n   Three types of provisioning\
    \ flows have been described in the use case\n   document: client to Registry,\
    \ Registry to local data repository, and\n   Registry to Registry.  This document\
    \ addresses client-to-Registry\n   flow enabling the ability to provision Session\
    \ Establishment Data\n   (SED).  The framework that supports the flow of messages\
    \ to\n   facilitate client-to-Registry provisioning is referred to as the\n  \
    \ \"Session Peering Provisioning Framework\" (SPPF).\n   The roles of the \"client\"\
    \ and the \"server\" only apply to the\n   connection, and those roles are not\
    \ related in any way to the type of\n   entity that participates in a protocol\
    \ exchange.  For example, a\n   Registry might also include a \"client\" when\
    \ such a Registry initiates\n   a connection (for example, for data distribution\
    \ to an SSP).\n   *--------*               *------------*               *------------*\n\
    \   |        | (1) Client   |             | (3) Registry  |            |\n   |\
    \ Client | ------------> |  Registry  |<------------->|  Registry  |\n   |   \
    \     |   to Registry |            |  to Registry  |            |\n   *--------*\
    \               *------------*               *------------*\n                \
    \                 /  \\                          \\\n                        \
    \        /    \\                          \\\n                               /\
    \      \\                          \\\n                              /       \
    \ \\                          v\n                             /          \\  \
    \                       ...\n                            /            \\\n   \
    \                        / (2) Distrib  \\\n                          / Registry\
    \ data  \\\n                         /  to local data   \\\n                 \
    \       V      store         V\n                       +----------+       +----------+\n\
    \                       |Local Data|       |Local Data|\n                    \
    \   |Repository|       |Repository|\n                       +----------+     \
    \  +----------+\n                Figure 1: Three Registry Provisioning Flows\n\
    \   A \"terminating\" SSP provisions SED into the Registry to be\n   selectively\
    \ shared with other peer SSPs.\n   SED is typically used by various downstream\
    \ SIP-signaling systems to\n   route a call to the next hop associated with the\
    \ called domain.\n   These systems typically use a local data store (\"Local Data\n\
    \   Repository\") as their source of session routing information.  More\n   specifically,\
    \ the SED is the set of parameters that the outgoing\n   Signaling Path Border\
    \ Elements (SBEs) need to initiate the session.\n   See [RFC5486] for more details.\n\
    \   A Registry may distribute the provisioned data into local data\n   repositories\
    \ or may additionally offer a central query-resolution\n   service (not shown\
    \ in the above figure) for query purposes.\n   A key requirement for the SPPF\
    \ is to be able to accommodate two basic\n   deployment scenarios:\n   1.  A resolution\
    \ system returns a Lookup Function (LUF) that\n       identifies the target domain\
    \ to assist in call routing (as\n       described in Section 4.3.3 of [RFC5486]).\
    \  In this case, the\n       querying entity may use other means to perform the\
    \ Location\n       Routing Function (LRF), which in turn helps determine the actual\n\
    \       location of the Signaling Function in that domain.\n   2.  A resolution\
    \ system returns an LRF that comprises the location\n       (address) of the Signaling\
    \ Function in the target domain (as\n       described in [RFC5486]).\n   In terms\
    \ of framework design, SPPF is agnostic to the substrate\n   protocol.  This document\
    \ includes the specification of the data model\n   and identifies, but does not\
    \ specify, the means to enable protocol\n   operations within a request and response\
    \ structure.  That aspect of\n   the specification has been delegated to the \"\
    protocol\" specification\n   for the framework.  To encourage interoperability,\
    \ the framework\n   supports extensibility aspects.\n   In this document, an XML\
    \ Schema is used to describe the building\n   blocks of the SPPF and to express\
    \ the data types, semantic\n   relationships between the various data types, and\
    \ various constraints\n   as a binding construct.  However, a \"protocol\" specification\
    \ is free\n   to choose any data representation format as long as it meets the\n\
    \   requirements laid out in the SPPF XML Schema Definition (XSD).  As an\n  \
    \ example, XML and JSON are two widely used data representation\n   formats.\n\
    \   This document is organized as follows:\n   o  Section 2 provides the terminology\n\
    \   o  Section 3 provides an overview of SPPF, including functional\n      entities\
    \ and a data model\n   o  Section 4 specifies requirements for SPPF substrate\
    \ protocols\n   o  Section 5 describes the base framework data structures, the\n\
    \      generic response types that MUST be supported by a conforming\n      substrate\
    \ \"protocol\" specification, and the basic object type from\n      which most\
    \ first-class objects extend\n   o  Section 6 provides a detailed description\
    \ of the data model object\n      specifications\n   o  Section 7 describes the\
    \ operations that are supported by the data\n      model\n   o  Section 8 defines\
    \ XML considerations XML parsers must meet to\n      conform to this specification\n\
    \   o  Sections 9 - 11 discuss security, internationalization, and IANA\n    \
    \  considerations, respectively\n   o  Section 12 normatively defines the SPPF\
    \ using its XSD.\n"
- title: 2.  Terminology
  contents:
  - "2.  Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\"\
    , \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"NOT RECOMMENDED\"\
    , \"MAY\", and\n   \"OPTIONAL\" in this document are to be interpreted as described\
    \ in\n   [RFC2119].\n   This document reuses terms from [RFC3261], [RFC5486],\
    \ use cases and\n   requirements documented in [RFC6461], and the ENUM Validation\n\
    \   Architecture [RFC4725].\n   This document defines the following additional\
    \ terms:\n   SPPF:   Session Peering Provisioning Framework, which is the\n  \
    \    framework used by a substrate protocol to provision data into a\n      Registry\
    \ (see arrow labeled \"1\" in Figure 1 of [RFC6461]).  It is\n      the primary\
    \ scope of this document.\n   Client:   In the context of SPPF, this is an application\
    \ that\n      initiates a provisioning request.  It is sometimes referred to as\n\
    \      a \"Registry client\".\n   Server:   In the context of SPPF, this is an\
    \ application that\n      receives a provisioning request and responds accordingly.\n\
    \   Registry:   The Registry operates a master database of SED for one or\n  \
    \    more Registrants.\n   Registrant:   The definition of a Registrant is based\
    \ on [RFC4725].\n      It is the end user, person, or organization that is the\
    \ \"holder\"\n      of the SED being provisioned into the Registry by a Registrar.\n\
    \      For example, in [RFC6461], a Registrant is pictured as an SP in\n     \
    \ Figure 2.\n      Within the confines of a Registry, a Registrant is uniquely\n\
    \      identified by the \"rant\" element.\n   Registrar:   The definition of\
    \ a Registrar is based on [RFC4725].  It\n      is an entity that performs provisioning\
    \ operations on behalf of a\n      Registrant by interacting with the Registry\
    \ via SPPF operations.\n      In other words, the Registrar is the SPPF client.\
    \  The Registrar\n      and Registrant roles are logically separate to allow,\
    \ but not\n      require, a single Registrar to perform provisioning operations\
    \ on\n      behalf of more than one Registrant.\n   Peering Organization:   A\
    \ peering organization is an entity to which\n      a Registrant's SED Groups\
    \ are made visible using the operations of\n      SPPF.\n"
- title: 3.  Framework High-Level Design
  contents:
  - "3.  Framework High-Level Design\n   This section introduces the structure of\
    \ the data model and provides\n   the information framework for the SPPF.  The\
    \ data model is defined\n   along with all the objects manipulated by a conforming\
    \ substrate\n   protocol and their relationships.\n"
- title: 3.1.  Framework Data Model
  contents:
  - "3.1.  Framework Data Model\n   The data model illustrated and described in Figure\
    \ 2 defines the\n   logical objects and the relationships between these objects\
    \ supported\n   by SPPF.  SPPF defines protocol operations through which an SPPF\n\
    \   client populates a Registry with these logical objects.  SPPF clients\n  \
    \ belonging to different Registrars may provision data into the\n   Registry using\
    \ a conforming substrate protocol that implements these\n   operations\n   The\
    \ logical structure presented below is consistent with the\n   terminology and\
    \ requirements defined in [RFC6461].\n       +-------------+                 \
    \       +-----------------+\n       | All object  |                        |Egress\
    \ Route:    |\n       | types       |                   0..n | rant,         \
    \  |\n       +-------------+                     +--| egrRteName,     |\n    \
    \         |0..n                        /   | pref,           |\n             |\
    \                           /    | regxRewriteRule,|\n             |2        \
    \                 /     | ingrSedGrp,     |\n   +----------------------+     \
    \       /      | svcs            |\n   |Organization:         |           /  \
    \     +-----------------+\n   | orgId                |          /\n   +----------------------+\
    \         /\n          |0..n                    /\n          |               \
    \        /        (\"rant\" = Registrant)\n          |A SED Group is        /\n\
    \          |associated with      /\n          |zero or more        /         \
    \     +---[abstract]----+\n          |peering            /               | SED\
    \ Record:     |\n          |organizations     /                |  rant,      \
    \    |\n          |                 /                 |  sedName,       |0..n\n\
    \          |0..n            /                  |  sedFunction,   |------|\n  \
    \ +--------+--------------+0..n          0..n|  isInSvc,       |      |\n   |SED\
    \ Group:             |------------------|  ttl            |      |\n   |  rant,\
    \                |                  +-----------------+      |\n   |  sedGrpName,\
    \          |                      ^ Various types      |\n   |  isInSvc,     \
    \        |                      | of SED Records     |\n   |  sedRecRef,     \
    \      |                      |                    |\n   |  peeringOrg,      \
    \    |                +-----+------------+       |\n   |  sourceIdent,       \
    \  |                |        |         |       |\n   |  priority,            |\
    \             +----+  +-------+  +----+     |\n   |  dgName               |  \
    \           | URI|  | NAPTR |  | NS |     |\n   +-----------------------+    \
    \         +----+  +-------+  +----+     |\n          |0..n                   \
    \                                     |\n          |                         \
    \        +-----[abstract]------+    |\n          |0..n                       \
    \      |Public Identifier:   |    |\n      +----------------------+0..n      0..n|\
    \  rant,              |    |\n      | Dest Group:          |--------------|  publicIdentifier,\
    \  |    |\n      |   rant,              |              |  dgName             |\
    \    |\n      |   dgName             |              |                     |  \
    \  |\n      +----------------------+              +---------------------+    |\n\
    \                                                     ^ Various types   |\n  \
    \               +---------+-------+------+----------+ of Public       |\n    \
    \             |         |       |      |          | Identifiers     |\n      \
    \        +------+  +-----+  +-----+ +-----+  +------+             |\n        \
    \      |  URI |  | TNP |  | TNR | | RN  |  |  TN  |-------------|\n          \
    \    +------+  +-----+  +-----+ +-----+  +------+  0..n\n                    \
    \  Figure 2: Framework Data Model\n   The objects and attributes that comprise\
    \ the data model can be\n   described as follows (objects listed from the bottom\
    \ up):\n   o  Public Identifier:\n      From a broad perspective, a Public Identifier\
    \ is a well-known\n      attribute that is used as the key to perform resolution\
    \ lookups.\n      Within the context of SPPF, a Public Identifier object can be\
    \ a\n      Telephone Number (TN), a range of TNs, a Public Switched Telephone\n\
    \      Network (PSTN) Routing Number (RN), a TN prefix, or a URI.\n      An SPPF\
    \ Public Identifier may be a member of zero or more\n      Destination Groups\
    \ to create logical groupings of Public\n      Identifiers that share a common\
    \ set of SED (e.g., routes).\n      A TN Public Identifier may optionally be associated\
    \ with zero or\n      more individual SED Records.  This ability for a Public\
    \ Identifier\n      to be directly associated with a SED Record, as opposed to\
    \ forcing\n      membership in one or more Destination Groups, supports use cases\n\
    \      where the SED Record contains data specifically tailored to an\n      individual\
    \ TN Public Identifier.\n   o  Destination Group:\n      A named logical grouping\
    \ of zero or more Public Identifiers that\n      can be associated with one or\
    \ more SED Groups for the purpose of\n      facilitating the management of their\
    \ common SED.\n   o  SED Group:\n      A SED Group contains a set of SED Record\
    \ references, a set of\n      Destination Group references, and a set of peering\
    \ organization\n      identifiers.  This is used to establish a three-part relationship\n\
    \      between a set of Public Identifiers, the SED shared across these\n    \
    \  Public Identifiers, and the list of peering organizations whose\n      query\
    \ responses from the resolution system may include the SED\n      contained in\
    \ a given SED Group.  In addition, the sourceIdent\n      element within a SED\
    \ Group, in concert with the set of peering\n      organization identifiers, enables\
    \ fine-grained source-based\n      routing.  For further details about the SED\
    \ Group and source-based\n      routing, refer to the definitions and descriptions\
    \ in Section 6.1.\n   o  SED Record:\n      A SED Record contains the data that\
    \ a resolution system returns in\n      response to a successful query for a Public\
    \ Identifier.  SED\n      Records are generally associated with a SED Group when\
    \ the SED\n      within is not specific to a Public Identifier.\n      To support\
    \ the use cases defined in [RFC6461], the SPPF defines\n      three types of SED\
    \ Records: URIType, NAPTRType, and NSType.  These\n      SED Records extend the\
    \ abstract type SedRecType and inherit the\n      common attribute \"priority\"\
    \ that is meant for setting precedence\n      across the SED Records defined within\
    \ a SED Group in a protocol-\n      agnostic fashion.\n   o  Egress Route:\n \
    \     In a high-availability environment, the originating SSP likely has\n   \
    \   more than one egress path to the ingress SBE of the target SSP.\n      The\
    \ Egress Route allows the originating SSP to choose a specific\n      egress SBE\
    \ to be associated with the target ingress SBE.  The\n      \"svcs\" element specifies\
    \ ENUM services (e.g., E2U+pstn:sip+sip)\n      that are used to identify the\
    \ SED Records associated with the SED\n      Group that will be modified by the\
    \ originating SSP.\n   o  Organization:\n      An Organization is an entity that\
    \ may fulfill any combination of\n      three roles: Registrant, Registrar, and\
    \ peering organization.  All\n      objects in SPPF are associated with two organization\
    \ identifiers\n      to identify each object's Registrant and Registrar.  A SED\
    \ Group\n      object is also associated with a set of zero or more organization\n\
    \      identifiers that identify the peering organization(s) whose\n      resolution\
    \ query responses may include the SED defined in the SED\n      Records within\
    \ that SED Group.  A peering organization is an\n      entity with which the Registrant\
    \ intends to share the SED data.\n"
- title: 3.2.  Time Value
  contents:
  - "3.2.  Time Value\n   Some request and response messages in SPPF include a time\
    \ value or\n   values defined as type xs:dateTime, a built-in W3C XML Schema\n\
    \   Datatype.  Use of an unqualified local time value is disallowed as it\n  \
    \ can lead to interoperability issues.  The value of a time attribute\n   MUST\
    \ be expressed in Coordinated Universal Time (UTC) format without\n   the time-zone\
    \ digits.\n   \"2010-05-30T09:30:10Z\" is an example of an acceptable time value\
    \ for\n   use in SPPF messages.  \"2010-05-30T06:30:10+3:00\" is a valid UTC time\n\
    \   but is not acceptable for use in SPPF messages.\n"
- title: 3.3.  Extensibility
  contents:
  - "3.3.  Extensibility\n   The framework contains various points of extensibility\
    \ in the form of\n   the \"ext\" elements.  Extensions used beyond the scope of\
    \ private SPPF\n   installations need to be documented in an RFC, and the first\
    \ such\n   extension is expected to define an IANA registry, holding a list of\n\
    \   documented extensions.\n"
- title: 4.  Substrate Protocol Requirements
  contents:
  - "4.  Substrate Protocol Requirements\n   This section provides requirements for\
    \ substrate protocols suitable\n   to carry SPPF.  More specifically, this section\
    \ specifies the\n   services, features, and assumptions that SPPF delegates to\
    \ the chosen\n   substrate and envelope technologies.\n"
- title: 4.1.  Mandatory Substrate
  contents:
  - "4.1.  Mandatory Substrate\n   None of the existing transport protocols carried\
    \ directly over IP,\n   appearing as \"Protocol\" in the IPv4 headers or \"Next\
    \ Header\" in the\n   IPv6 headers, meet the requirements listed in this section\
    \ to carry\n   SPPF.\n   Therefore, one choice to carry SPPF has been provided\
    \ in \"Session\n   Peering Provisioning (SPP) Protocol over SOAP\" [RFC7878],\
    \ using SOAP\n   as the substrate.  To encourage interoperability, the SPPF server\n\
    \   MUST provide support for this protocol.  With time, it is possible\n   that\
    \ other choices may surface that comply with the requirements\n   discussed above.\n"
- title: 4.2.  Connection Oriented
  contents:
  - "4.2.  Connection Oriented\n   The SPPF follows a model where a client establishes\
    \ a connection to a\n   server in order to further exchange SPPF messages over\
    \ such a point-\n   to-point connection.  Therefore, a substrate protocol for\
    \ SPPF will\n   be connection oriented.\n"
- title: 4.3.  Request and Response Model
  contents:
  - "4.3.  Request and Response Model\n   Provisioning operations in SPPF follow the\
    \ request-response model,\n   where a client sends a request message to initiate\
    \ a transaction and\n   the server sends a response.  Multiple subsequent request-response\n\
    \   exchanges MAY be performed over a single persistent connection.\n   Therefore,\
    \ a substrate protocol for SPPF will follow the request-\n   response model by\
    \ ensuring a response is sent to the request\n   initiator.\n"
- title: 4.4.  Connection Lifetime
  contents:
  - "4.4.  Connection Lifetime\n   Some use cases involve provisioning a single request\
    \ to a network\n   element.  Connections supporting such provisioning requests\
    \ might be\n   short-lived, and may be established only on demand, for the duration\n\
    \   of a few seconds.  Other use cases involve provisioning either a\n   large\
    \ dataset or a constant stream of small updates, both of which\n   would likely\
    \ require long-lived connections, spanning multiple hours\n   or even days.\n\
    \   Therefore, a protocol suitable for SPPF SHOULD be able to support\n   both\
    \ short-lived and long-lived connections.\n"
- title: 4.5.  Authentication
  contents:
  - "4.5.  Authentication\n   All SPPF objects are associated with a Registrant identifier.\
    \  An\n   SPPF client provisions SPPF objects on behalf of Registrants.  An\n\
    \   authenticated SPP client is a Registrar.  Therefore, the SPPF\n   substrate\
    \ protocol MUST provide means for an SPPF server to\n   authenticate an SPPF client.\n"
- title: 4.6.  Authorization
  contents:
  - "4.6.  Authorization\n   After successful authentication of the SPPF client as\
    \ a Registrar,\n   the Registry performs authorization checks to determine if\
    \ the\n   Registrar is authorized to act on behalf of the Registrant whose\n \
    \  identifier is included in the SPPF request.  Refer to Section 9 for\n   further\
    \ guidance.\n"
- title: 4.7.  Confidentiality and Integrity
  contents:
  - "4.7.  Confidentiality and Integrity\n   SPPF objects that the Registry manages\
    \ can be private in nature.\n   Therefore, the substrate protocol MUST provide\
    \ means for data\n   integrity protection.\n   If the data is compromised in-flight\
    \ between the SPPF client and\n   Registry, it will seriously affect the stability\
    \ and integrity of the\n   system.  Therefore, the substrate protocol MUST provide\
    \ means for\n   data integrity protection.\n"
- title: 4.8.  Near Real Time
  contents:
  - "4.8.  Near Real Time\n   Many use cases require responses in near real time from\
    \ the server\n   (in the range of a few multiples of round-trip time between the\n\
    \   server and client).  Therefore, a Data for Reachability of\n   Inter-/Intra-NetworK\
    \ SIP (DRINKS) substrate protocol MUST support\n   near real-time responses to\
    \ requests submitted by the client.\n"
- title: 4.9.  Request and Response Sizes
  contents:
  - "4.9.  Request and Response Sizes\n   Use of SPPF may involve simple updates that\
    \ may consist of a small\n   number of bytes, such as the update of a single Public\
    \ Identifier.\n   Other provisioning operations may constitute a large dataset,\
    \ as in\n   adding millions of records to a Registry.  As a result, a suitable\n\
    \   substrate protocol for SPPF SHOULD accommodate datasets of various\n   sizes.\n"
- title: 4.10.  Request and Response Correlation
  contents:
  - "4.10.  Request and Response Correlation\n   A substrate protocol suitable for\
    \ SPPF MUST allow responses to be\n   correlated with requests.\n"
- title: 4.11.  Request Acknowledgement
  contents:
  - "4.11.  Request Acknowledgement\n   Data transported in the SPPF is likely crucial\
    \ for the operation of\n   the communication network that is being provisioned.\
    \  An SPPF client\n   responsible for provisioning SED to the Registry has a need\
    \ to know\n   if the submitted requests have been processed correctly.\n   Failed\
    \ transactions can lead to situations where a subset of Public\n   Identifiers\
    \ or even SSPs might not be reachable or the provisioning\n   state of the network\
    \ is inconsistent.\n   Therefore, a substrate protocol for SPPF MUST provide a\
    \ response for\n   each request, so that a client can identify whether a request\n\
    \   succeeded or failed.\n"
- title: 5.  Base Framework Data Structures and Response Codes
  contents:
  - "5.  Base Framework Data Structures and Response Codes\n   SPPF contains some\
    \ common data structures for most of the supported\n   object types.  This section\
    \ describes these common data structures.\n"
- title: 5.1.  Basic Object Type and Organization Identifiers
  contents:
  - "5.1.  Basic Object Type and Organization Identifiers\n   All first-class objects\
    \ extend the type BasicObjType.  It consists of\n   the Registrant organization,\
    \ the Registrar organization, the date and\n   time of object creation, and the\
    \ last date and time the object was\n   modified.  The Registry MUST store the\
    \ date and time of the object\n   creation and modification, if applicable, for\
    \ all Get operations (see\n   Section 7).  If the client passed in either date\
    \ or time values, the\n   Registry MUST ignore it.  The Registrar performs the\
    \ SPPF operations\n   on behalf of the Registrant, the organization that owns\
    \ the object.\n   <complexType name=\"BasicObjType\" abstract=\"true\">\n    <sequence>\n\
    \     <element name=\"rant\" type=\"sppfb:OrgIdType\"/>\n     <element name=\"\
    rar\" type=\"sppfb:OrgIdType\"/>\n     <element name=\"cDate\" type=\"dateTime\"\
    \ minOccurs=\"0\"/>\n     <element name=\"mDate\" type=\"dateTime\" minOccurs=\"\
    0\"/>\n     <element name=\"ext\" type=\"sppfb:ExtAnyType\" minOccurs=\"0\"/>\n\
    \    </sequence>\n   </complexType>\n   The identifiers used for Registrants (rant)\
    \ and Registrars (rar) are\n   instances of OrgIdType.  The OrgIdType is defined\
    \ as a string and all\n   OrgIdType instances MUST follow the textual convention:\n\
    \   \"namespace:value\" (for example, \"iana-en:32473\").  Specifically:\n   Strings\
    \ used as OrgIdType Namespace identifiers MUST conform to the\n   following syntax\
    \ in the Augmented Backus-Naur Form (ABNF) [RFC5234].\n         namespace = ALPHA\
    \ *(ALPHA/DIGIT/\"-\")\n   See Section 11 for the corresponding IANA registry\
    \ definition.\n"
- title: 5.2.  Various Object Key Types
  contents:
  - "5.2.  Various Object Key Types\n   The SPPF data model contains various object\
    \ relationships.  In some\n   cases, these object relationships are established\
    \ by embedding the\n   unique identity of the related object inside the relating\
    \ object.\n   Note that an object's unique identity is required to Delete or Get\n\
    \   the details of an object.  The following subsections normatively\n   define\
    \ the various object keys in SPPF and the attributes of those\n   keys.\n   \"\
    Name\" attributes that are used as components of object key types\n   MUST be\
    \ compared using the toCasefold() function, as specified in\n   Section 3.13 of\
    \ [Unicode6.1] (or a newer version of Unicode).  This\n   function performs case-insensitive\
    \ comparisons.\n"
- title: 5.2.1.  Generic Object Key Type
  contents:
  - "5.2.1.  Generic Object Key Type\n   Most objects in SPPF are uniquely identified\
    \ by an object key that\n   has the object's name, type, and Registrant's organization\
    \ ID as\n   attributes.  The abstract type called ObjKeyType is where this unique\n\
    \   identity is housed.  Any concrete representation of the ObjKeyType\n   MUST\
    \ contain the following:\n      Object Name: The name of the object.\n      Registrant\
    \ ID: The unique organization ID that identifies the\n      Registrant.\n    \
    \  Type: The value that represents the type of SPPF object.  This is\n      required\
    \ as different types of objects in SPPF, that belong to the\n      same Registrant,\
    \ can have the same name.\n   The structure of abstract ObjKeyType is as follows:\n\
    \   <complexType name=\"ObjKeyType\" abstract=\"true\">\n    <annotation>\n  \
    \   <documentation>\n     ---- Generic type that represents the\n          key\
    \ for various objects in SPPF. ----\n     </documentation>\n    </annotation>\n\
    \   </complexType>\n"
- title: 5.2.2.  Derived Object Key Types
  contents:
  - "5.2.2.  Derived Object Key Types\n   The SPPF data model contains certain objects\
    \ that are uniquely\n   identified by attributes, different from or in addition\
    \ to the\n   attributes in the generic object key described in the previous\n\
    \   section.  Object keys of this kind are derived from the abstract\n   ObjKeyType\
    \ and defined in their own abstract key types.  Because\n   these object key types\
    \ are abstract, they MUST be specified in a\n   concrete form in any SPPF-conforming\
    \ substrate \"protocol\"\n   specification.  These are used in Delete and Get\
    \ operations and may\n   also be used in Accept and Reject operations.\n   Following\
    \ are the derived object keys in an SPPF data model:\n   o  SedGrpOfferKeyType:\
    \ This uniquely identifies a SED Group object\n      offer.  This key type extends\
    \ from ObjKeyType and MUST also have\n      the organization ID of the Registrant\
    \ to whom the object is being\n      offered as one of its attributes.  In addition\
    \ to the Delete and\n      Get operations, these key types are used in Accept\
    \ and Reject\n      operations on a SED Group Offer object.  The structure of\
    \ abstract\n      SedGrpOfferKeyType is as follows:\n   <complexType name=\"SedGrpOfferKeyType\"\
    \n   abstract=\"true\">\n       <complexContent>\n           <extension base=\"\
    sppfb:ObjKeyType\">\n               <annotation>\n       <documentation>\n   \
    \    ---- Generic type that represents\n            the key for an object offer.\
    \ ----\n       </documentation>\n      </annotation>\n     </extension>\n    </complexContent>\n\
    \   </complexType>\n      A SED Group Offer object MUST use SedGrpOfferKeyType.\
    \  Refer to\n      Section 6.5 for a description of the SED Group Offer object.\n\
    \   o  PubIdKeyType: This uniquely identifies a Public Identity object.\n    \
    \  This key type extends from the abstract ObjKeyType.  Any concrete\n      definition\
    \ of PubIdKeyType MUST contain the elements that identify\n      the value and\
    \ type of Public Identity and also contain the\n      organization ID of the Registrant\
    \ that is the owner of the Public\n      Identity object.  A Public Identity object\
    \ in SPPF is uniquely\n      identified by the Registrant's organization ID, the\
    \ value of the\n      Public Identity, and the type of the Public Identity object.\n\
    \      Consequently, any concrete representation of the PubIdKeyType MUST\n  \
    \    contain the following attributes:\n      *  Registrant ID: The unique organization\
    \ ID that identifies the\n         Registrant.\n      *  Value: The value of the\
    \ Public Identity.\n      *  Type: The type of the Public Identity object.\n \
    \     The PubIdKeyType is used in Delete and Get operations on a Public\n    \
    \  Identifier object.\n   o  The structure of abstract PubIdKeyType is as follows:\n\
    \   <complexType name=\"PubIdKeyType\" abstract=\"true\">\n    <complexContent>\n\
    \     <extension base=\"sppfb:ObjKeyType\">\n      <annotation>\n       <documentation>\n\
    \       ---- Generic type that represents the key for a Pub ID. ----\n       </documentation>\n\
    \      </annotation>\n     </extension>\n    </complexContent>\n   </complexType>\n\
    \   A Public Identity object MUST use attributes of PubIdKeyType for its\n   unique\
    \ identification.  Refer to Section 6 for a description of a\n   Public Identity\
    \ object.\n"
- title: 5.3.  Response Message Types
  contents:
  - "5.3.  Response Message Types\n   The following table contains the list of response\
    \ types that MUST be\n   defined for a substrate protocol used to carry SPPF.\
    \  An SPPF server\n   MUST implement all of the following at minimum.\n   +---------------------+---------------------------------------------+\n\
    \   | Response Type       | Description                                 |\n  \
    \ +---------------------+---------------------------------------------+\n   |\
    \ Request succeeded   | A given request succeeded.                  |\n   | Request\
    \ syntax      | The syntax of a given request was found to  |\n   | invalid  \
    \           | be invalid.                                 |\n   | Request too\
    \ large   | The count of entities in the request is     |\n   |              \
    \       | larger than the server is willing or able   |\n   |                \
    \     | to process.                                 |\n   | Version not      \
    \   | The server does not support the version of  |\n   | supported          \
    \ | the SPPF protocol specified in the request. |\n   | Command invalid     |\
    \ The operation and/or command being          |\n   |                     | requested\
    \ by the client is invalid and/or   |\n   |                     | not supported\
    \ by the server.                |\n   | System temporarily  | The SPPF server\
    \ is temporarily not          |\n   | unavailable         | available to serve\
    \ the client request.      |\n   | Unexpected internal | The SPPF server encountered\
    \ an unexpected   |\n   | system or server    | error that prevented the server\
    \ from        |\n   | error               | fulfilling the request.          \
    \           |\n   | Attribute value     | The SPPF server encountered an attribute\
    \ or |\n   | invalid             | property in the request that had an       \
    \  |\n   |                     | invalid/bad value.  Optionally, the         |\n\
    \   |                     | specification MAY provide a way to indicate |\n  \
    \ |                     | the Attribute Name and the Attribute Value  |\n   |\
    \                     | to identify the object that was found to be |\n   |  \
    \                   | invalid.                                    |\n   | Object\
    \ does not     | An object present in the request does not   |\n   | exist   \
    \            | exist on the SPPF server. Optionally, the   |\n   |           \
    \          | specification MAY provide a way to indicate |\n   |             \
    \        | the Attribute Name and the Attribute Value  |\n   |               \
    \      | that identifies the nonexistent object.     |\n   | Object status or\
    \    | The operation requested on an object        |\n   | ownership does not\
    \  | present in the request cannot be performed  |\n   | allow for operation |\
    \ because the object is in a status that does |\n   |                     | not\
    \ allow said operation, or the user       |\n   |                     | requesting\
    \ the operation is not authorized  |\n   |                     | to perform said\
    \ operation on the object.    |\n   |                     | Optionally, the specification\
    \ MAY provide a |\n   |                     | way to indicate the Attribute Name\
    \ and the  |\n   |                     | Attribute Value that identifies the object.\
    \ |\n   +---------------------+---------------------------------------------+\n\
    \                          Table 1: Response Types\n   When the response messages\
    \ are \"parameterized\" with the Attribute\n   Name and Attribute Value, then\
    \ the use of these parameters MUST\n   adhere to the following rules:\n   o  Any\
    \ value provided for the Attribute Name parameter MUST be an\n      exact XSD\
    \ element name of the protocol data element to which the\n      response message\
    \ is referring.  For example, valid values for\n      \"attribute name\" are \"\
    dgName\", \"sedGrpName\", \"sedRec\", etc.\n   o  The value for Attribute Value\
    \ MUST be the value of the data\n      element to which the preceding Attribute\
    \ Name refers.\n   o  Response type \"Attribute value invalid\" MUST be used whenever\
    \ an\n      element value does not adhere to data validation rules.\n   o  Response\
    \ types \"Attribute value invalid\" and \"Object does not\n      exist\" MUST\
    \ NOT be used interchangeably.  Response type \"Object\n      does not exist\"\
    \ MUST be returned by an Update/Del/Accept/Reject\n      operation when the data\
    \ element(s) used to uniquely identify a\n      preexisting object does not exist.\
    \  If the data elements used to\n      uniquely identify an object are malformed,\
    \ then response type\n      \"Attribute value invalid\" MUST be returned.\n"
- title: 6.  Framework Data Model Objects
  contents:
  - "6.  Framework Data Model Objects\n   This section provides a description of the\
    \ specification of each\n   supported data model object (the nouns) and identifies\
    \ the commands\n   (the verbs) that MUST be supported for each data model object.\n\
    \   However, the specification of the data structures necessary to\n   support\
    \ each command is delegated to an SPPF-conforming substrate\n   \"protocol\" specification.\n"
- title: 6.1.  Destination Group
  contents:
  - "6.1.  Destination Group\n   A Destination Group represents a logical grouping\
    \ of Public\n   Identifiers with common SED.  The substrate protocol MUST support\
    \ the\n   ability to Add, Get, and Delete Destination Groups (refer to\n   Section\
    \ 7 for a generic description of various operations).\n   A Destination Group\
    \ object MUST be uniquely identified by attributes\n   as defined in the description\
    \ of \"ObjKeyType\" in \"Generic Object Key\n   Type\" (Section 5.2.1 of this\
    \ document).\n   The DestGrpType object structure is defined as follows:\n   <complexType\
    \ name=\"DestGrpType\">\n    <complexContent>\n     <extension base=\"sppfb:BasicObjType\"\
    >\n      <sequence>\n       <element name=\"dgName\" type=\"sppfb:ObjNameType\"\
    />\n      </sequence>\n     </extension>\n    </complexContent>\n   </complexType>\n\
    \   The DestGrpType object is composed of the following elements:\n   o  base:\
    \ All first-class objects extend BasicObjType (see\n      Section 5.1).\n   o\
    \  dgName: The character string that contains the name of the\n      Destination\
    \ Group.\n   o  ext: Point of extensibility described in Section 3.3.\n"
- title: 6.2.  Public Identifier
  contents:
  - "6.2.  Public Identifier\n   A Public Identifier is the search key used for locating\
    \ the SED.  In\n   many cases, a Public Identifier is attributed to the end user\
    \ who has\n   a retail relationship with the SP or Registrant organization.  SPPF\n\
    \   supports the notion of the carrier-of-record as defined in [RFC5067].\n  \
    \ Therefore, the Registrant under which the Public Identifier is being\n   created\
    \ can optionally claim to be a carrier-of-record.\n   SPPF identifies three types\
    \ of Public Identifiers: TNs, RNs, and\n   URIs.  SPPF provides structures to\
    \ manage a single TN, a contiguous\n   range of TNs, and a TN prefix.  The substrate\
    \ protocol MUST support\n   the ability to Add, Get, and Delete Public Identifiers\
    \ (refer to\n   Section 7 for a generic description of various operations).\n\
    \   A Public Identity object MUST be uniquely identified by attributes as\n  \
    \ defined in the description of \"PubIdKeyType\" in Section 5.2.2.\n   The abstract\
    \ XSD type PubIdType is a generalization for the concrete\n   Public Identifier\
    \ schema types.  The PubIdType element \"dgName\"\n   represents the name of a\
    \ Destination Group of which a given Public\n   Identifier may be a member.  Note\
    \ that this element may be present\n   multiple times so that a given Public Identifier\
    \ may be a member of\n   multiple Destination Groups.  The PubIdType object structure\
    \ is\n   defined as follows:\n   <complexType name=\"PubIdType\" abstract=\"true\"\
    >\n    <complexContent>\n     <extension base=\"sppfb:BasicObjType\">\n      <sequence>\n\
    \       <element name=\"dgName\" type=\"sppfb:ObjNameType\"\n                minOccurs=\"\
    0\" maxOccurs=\"unbounded\"/>\n      </sequence>\n     </extension>\n    </complexContent>\n\
    \   </complexType>\n   A Public Identifier may be a member of zero or more Destination\n\
    \   Groups.  When a Public Identifier is a member of a Destination Group,\n  \
    \ it is intended to be associated with SED through the SED Group(s)\n   that is\
    \ associated with the Destination Group.  When a Public\n   Identifier is not\
    \ member of any Destination Group, it is intended to\n   be associated with SED\
    \ through the SED Records that are directly\n   associated with the Public Identifier.\n\
    \   A TN is provisioned using the TNType, an extension of PubIdType.\n   Each\
    \ TNType object is uniquely identified by the combination of its\n   value contained\
    \ within the <tn> element and its Registrant ID.\n   TNType is defined as follows:\n\
    \   <complexType name=\"TNType\">\n    <complexContent>\n     <extension base=\"\
    sppfb:PubIdType\">\n      <sequence>\n       <element name=\"tn\" type=\"sppfb:NumberValType\"\
    />\n       <element name=\"corInfo\" type=\"sppfb:CORInfoType\" minOccurs=\"0\"\
    />\n       <element name=\"sedRecRef\" type=\"sppfb:SedRecRefType\"\n        \
    \        minOccurs=\"0\" maxOccurs=\"unbounded\"/>\n      </sequence>\n     </extension>\n\
    \    </complexContent>\n   </complexType>\n   <complexType name=\"CORInfoType\"\
    >\n    <sequence>\n      <element name=\"corClaim\" type=\"boolean\" default=\"\
    true\"/>\n      <element name=\"cor\" type=\"boolean\" default=\"false\" minOccurs=\"\
    0\"/>\n      <element name=\"corDate\" type=\"dateTime\" minOccurs=\"0\"/>\n \
    \   </sequence>\n   </complexType>\n   <simpleType name=\"NumberValType\">\n \
    \   <restriction base=\"token\">\n     <maxLength value=\"20\"/>\n     <pattern\
    \ value=\"\\+?\\d\\d*\"/>\n    </restriction>\n   </simpleType>\n   TNType consists\
    \ of the following attributes:\n   o  tn: Telephone number to be added to the\
    \ Registry.\n   o  sedRecRef: Optional reference to SED Records that are directly\n\
    \      associated with the TN Public Identifier.  Following the SPPF data\n  \
    \    model, the SED Record could be a protocol-agnostic URIType or\n      another\
    \ type.\n   o  corInfo: corInfo is an optional parameter of type CORInfoType that\n\
    \      allows the Registrant organization to set forth a claim to be the\n   \
    \   carrier-of-record (see [RFC5067]).  This is done by setting the\n      value\
    \ of the <corClaim> element of the CORInfoType object\n      structure to \"true\"\
    .  The other two parameters of the CORInfoType,\n      <cor> and <corDate>, are\
    \ set by the Registry to describe the\n      outcome of the carrier-of-record\
    \ claim by the Registrant.  In\n      general, inclusion of the <corInfo> parameter\
    \ is useful if the\n      Registry has the authority information, such as the\
    \ number\n      portability data, etc., in order to qualify whether the Registrant\n\
    \      claim can be satisfied.  If the carrier-of-record claim disagrees\n   \
    \   with the authority data in the Registry, whether or not a TN Add\n      operation\
    \ fails is a matter of policy and is beyond the scope of\n      this document.\n\
    \   An RN is provisioned using the RNType, an extension of PubIDType.\n   The\
    \ Registrant organization can add the RN and associate it with the\n   appropriate\
    \ Destination Group(s) to share the route information.\n   This allows SSPs to\
    \ use the RN search key to derive the Ingress\n   Routes for session establishment\
    \ at the runtime resolution process\n   (see [RFC6116]).  Each RNType object is\
    \ uniquely identified by the\n   combination of its value inside the <rn> element\
    \ and its Registrant\n   ID.  RNType is defined as follows:\n   <complexType name=\"\
    RNType\">\n    <complexContent>\n     <extension base=\"sppfb:PubIdType\">\n \
    \     <sequence>\n       <element name=\"rn\" type=\"sppfb:NumberValType\"/>\n\
    \       <element name=\"corInfo\" type=\"sppfb:CORInfoType\" minOccurs=\"0\"/>\n\
    \      </sequence>\n     </extension>\n    </complexContent>\n   </complexType>\n\
    \   RNType has the following attributes:\n   o  rn: The RN used as the search\
    \ key.\n   o  corInfo: corInfo is an optional parameter of type CORInfoType that\n\
    \      allows the Registrant organization to set forth a claim to be the\n   \
    \   carrier-of-record (see [RFC5067]).\n   TNRType structure is used to provision\
    \ a contiguous range of TNs.\n   The object definition requires a starting TN\
    \ and an ending TN that\n   together define the span of the TN range, including\
    \ the starting and\n   ending TN.  Use of TNRType is particularly useful when\
    \ expressing a\n   TN range that does not include all the TNs within a TN block\
    \ or\n   prefix.  The TNRType definition accommodates the open number plan as\n\
    \   well such that the TNs that fall in the range between the start and\n   end\
    \ TN may include TNs with different length variance.  Whether the\n   Registry\
    \ can accommodate the open number plan semantics is a matter\n   of policy and\
    \ is beyond the scope of this document.  Each TNRType\n   object is uniquely identified\
    \ by the combination of its value that,\n   in turn, is a combination of the <startTn>\
    \ and <endTn> elements and\n   its Registrant ID.  The TNRType object structure\
    \ definition is as\n   follows:\n   <complexType name=\"TNRType\">\n    <complexContent>\n\
    \     <extension base=\"sppfb:PubIdType\">\n      <sequence>\n       <element\
    \ name=\"range\" type=\"sppfb:NumberRangeType\"/>\n       <element name=\"corInfo\"\
    \ type=\"sppfb:CORInfoType\" minOccurs=\"0\"/>\n      </sequence>\n     </extension>\n\
    \    </complexContent>\n   </complexType>\n   <complexType name=\"NumberRangeType\"\
    >\n    <sequence>\n     <element name=\"startTn\" type=\"sppfb:NumberValType\"\
    />\n     <element name=\"endTn\" type=\"sppfb:NumberValType\"/>\n    </sequence>\n\
    \   </complexType>\n   TNRType has the following attributes:\n   o  startTn: The\
    \ starting TN in the TN range.\n   o  endTn: The last TN in the TN range.\n  \
    \ o  corInfo: corInfo is an optional parameter of type CORInfoType that\n    \
    \  allows the Registrant organization to set forth a claim to be the\n      carrier-of-record\
    \ (see [RFC5067]).\n   In some cases, it is useful to describe a set of TNs with\
    \ the help of\n   the first few digits of the TN, also referred to as the TN prefix\
    \ or\n   a block.  A given TN prefix may include TNs with different length\n \
    \  variance in support of the open number plan.  Once again, whether the\n   Registry\
    \ supports the open number plan semantics is a matter of\n   policy, and it is\
    \ beyond the scope of this document.  The TNPType\n   data structure is used to\
    \ provision a TN prefix.  Each TNPType object\n   is uniquely identified by the\
    \ combination of its value in the\n   <tnPrefix> element and its Registrant ID.\
    \  TNPType is defined as\n   follows:\n   <complexType name=\"TNPType\">\n   \
    \ <complexContent>\n     <extension base=\"sppfb:PubIdType\">\n      <sequence>\n\
    \       <element name=\"tnPrefix\" type=\"sppfb:NumberValType\"/>\n       <element\
    \ name=\"corInfo\" type=\"sppfb:CORInfoType\" minOccurs=\"0\"/>\n      </sequence>\n\
    \     </extension>\n    </complexContent>\n   </complexType>\n   TNPType consists\
    \ of the following attributes:\n   o  tnPrefix: The TN prefix.\n   o  corInfo:\
    \ corInfo is an optional parameter of type CORInfoType that\n      allows the\
    \ Registrant organization to set forth a claim to be the\n      carrier-of-record\
    \ (see [RFC5067]).\n   In some cases, a Public Identifier may be a URI, such as\
    \ an email\n   address.  The URIPubIdType object is comprised of the data element\n\
    \   necessary to house such Public Identifiers.  Each URIPubIdType object\n  \
    \ is uniquely identified by the combination of its value in the <uri>\n   element\
    \ and its Registrant ID.  URIPubIdType is defined as follows:\n   <complexType\
    \ name=\"URIPubIdType\">\n    <complexContent>\n     <extension base=\"sppfb:PubIdType\"\
    >\n      <sequence>\n       <element name=\"uri\" type=\"anyURI\"/>\n       <element\
    \ name=\"ext\" type=\"sppfb:ExtAnyType\" minOccurs=\"0\"/>\n      </sequence>\n\
    \     </extension>\n    </complexContent>\n   </complexType>\n   URIPubIdType\
    \ consists of the following attributes:\n   o  uri: The value that acts as the\
    \ Public Identifier.\n   o  ext: Point of extensibility described in Section 3.3.\n"
- title: 6.3.  SED Group
  contents:
  - "6.3.  SED Group\n   SED Group is a grouping of one or more Destination Groups,\
    \ the common\n   SED Records, and the list of peer organizations with access to\
    \ the\n   SED Records associated with a given SED Group.  It is this indirect\n\
    \   linking of Public Identifiers to their SED that significantly\n   improves\
    \ the scalability and manageability of the peering data.\n   Additions and changes\
    \ to SED information are reduced to a single\n   operation on a SED Group or SED\
    \ Record rather than millions of data\n   updates to individual Public Identifier\
    \ records that individually\n   contain their peering data.  The substrate protocol\
    \ MUST support the\n   ability to Add, Get, and Delete SED Groups (refer to Section\
    \ 7 for a\n   generic description of various operations).\n   A SED Group object\
    \ MUST be uniquely identified by attributes as\n   defined in the description\
    \ of \"ObjKeyType\" in \"Generic Object Key\n   Type\" (Section 5.2.1 of this\
    \ document).\n   The SedGrpType object structure is defined as follows:\n   <complexType\
    \ name=\"SedGrpType\">\n    <complexContent>\n     <extension base=\"sppfb:BasicObjType\"\
    >\n      <sequence>\n       <element name=\"sedGrpName\" type=\"sppfb:ObjNameType\"\
    />\n       <element name=\"sedRecRef\" type=\"sppfb:SedRecRefType\"\n        \
    \        minOccurs=\"0\" maxOccurs=\"unbounded\"/>\n       <element name=\"dgName\"\
    \ type=\"sppfb:ObjNameType\"\n                minOccurs=\"0\" maxOccurs=\"unbounded\"\
    />\n       <element name=\"peeringOrg\" type=\"sppfb:OrgIdType\"\n           \
    \     minOccurs=\"0\" maxOccurs=\"unbounded\"/>\n       <element name=\"sourceIdent\"\
    \ type=\"sppfb:SourceIdentType\"\n                minOccurs=\"0\" maxOccurs=\"\
    unbounded\"/>\n       <element name=\"isInSvc\" type=\"boolean\"/>\n       <element\
    \ name=\"priority\" type=\"unsignedShort\"/>\n       <element name=\"ext\" type=\"\
    sppfb:ExtAnyType\" minOccurs=\"0\"/>\n      </sequence>\n     </extension>\n \
    \   </complexContent>\n   </complexType>\n   <complexType name=\"SedRecRefType\"\
    >\n    <sequence>\n     <element name=\"sedKey\" type=\"sppfb:ObjKeyType\"/>\n\
    \     <element name=\"priority\" type=\"unsignedShort\"/>\n     <element name=\"\
    ext\" type=\"sppfb:ExtAnyType\" minOccurs=\"0\"/>\n    </sequence>\n   </complexType>\n\
    \   The SedGrpType object is composed of the following elements:\n   o  base:\
    \ All first-class objects extend BasicObjType (see\n      Section 5.1).\n   o\
    \  sedGrpName: The character string that contains the name of the SED\n      Group.\
    \  It uniquely identifies this object within the context of\n      the Registrant\
    \ ID (a child element of the base element as\n      described above).\n   o  sedRecRef:\
    \ Set of zero or more objects of type SedRecRefType that\n      house the unique\
    \ keys of the SED Records (containing the SED) that\n      the SedGrpType object\
    \ refers to and their relative priority within\n      the context of this SED\
    \ Group.\n   o  dgName: Set of zero or more names of DestGrpType object instances.\n\
    \      Each dgName name, in association with this SED Group's Registrant\n   \
    \   ID, uniquely identifies a DestGrpType object instance whose\n      associated\
    \ Public Identifiers are reachable using the SED housed\n      in this SED Group.\
    \  An intended side effect of this is that a SED\n      Group cannot provide session\
    \ establishment information for a\n      Destination Group belonging to another\
    \ Registrant.\n   o  peeringOrg: Set of zero or more peering organization IDs\
    \ that have\n      accepted an offer to receive this SED Group's information.\
    \  Note\n      that this identifier \"peeringOrg\" is an instance of OrgIdType.\n\
    \      The set of peering organizations in this list is not directly\n      settable\
    \ or modifiable using the addSedGrpsRqst operation.  This\n      set is instead\
    \ controlled using the SED Offer and Accept\n      operations.\n   o  sourceIdent:\
    \ Set of zero or more SourceIdentType object instances.\n      These objects,\
    \ described further below, house the source\n      identification schemes and\
    \ identifiers that are applied at\n      resolution time as part of source-based\
    \ routing algorithms for the\n      SED Group.\n   o  isInSvc: A boolean element\
    \ that defines whether this SED Group is\n      in service.  The SED contained\
    \ in a SED Group that is in service\n      is a candidate for inclusion in resolution\
    \ responses for Public\n      Identities residing in the Destination Group associated\
    \ with this\n      SED Group.  The session establishment information contained\
    \ in a\n      SED Group that is not in service is not a candidate for inclusion\n\
    \      in resolution responses.\n   o  priority: Priority value that can be used\
    \ to provide a relative\n      value weighting of one SED Group over another.\
    \  The manner in\n      which this value is used, perhaps in conjunction with\
    \ other\n      factors, is a matter of policy.\n   o  ext: Point of extensibility\
    \ described in Section 3.3.\n   As described above, the SED Group contains a set\
    \ of references to SED\n   Record objects.  A SED Record object is based on an\
    \ abstract type:\n   SedRecType.  The concrete types that use SedRecType as an\
    \ extension\n   base are NAPTRType, NSType, and URIType.  The definitions of these\n\
    \   types are included in \"SED Record\" (Section 6.4 of this document).\n   The\
    \ SedGrpType object provides support for source-based routing via\n   the peeringOrg\
    \ data element and more granular source-based routing\n   via the source identity\
    \ element.  The source identity element\n   provides the ability to specify zero\
    \ or more of the following in\n   association with a given SED Group: a regular\
    \ expression that is\n   matched against the resolution client IP address, a regular\n\
    \   expression that is matched against the root domain name(s), and/or a\n   regular\
    \ expression that is matched against the calling party URI(s).\n   The result\
    \ will be that, after identifying the visible SED Groups\n   whose associated\
    \ Destination Group(s) contains the lookup key being\n   queried and whose peeringOrg\
    \ list contains the querying\n   organization's organization ID, the resolution\
    \ server will evaluate\n   the characteristics of the Source URI, Source IP address,\
    \ and root\n   domain of the lookup key being queried.  The resolution server\
    \ then\n   compares these criteria against the source identity criteria\n   associated\
    \ with the SED Groups.  The SED contained in SED Groups that\n   have source-based\
    \ routing criteria will only be included in the\n   resolution response if one\
    \ or more of the criteria matches the source\n   criteria from the resolution\
    \ request.  The source identity data\n   element is of type SourceIdentType, whose\
    \ structure is defined as\n   follows:\n   <complexType name=\"SourceIdentType\"\
    >\n    <sequence>\n     <element name=\"sourceIdentRegex\" type=\"sppfb:RegexType\"\
    />\n     <element name=\"sourceIdentScheme\"\n              type=\"sppfb:SourceIdentSchemeType\"\
    />\n     <element name=\"ext\" type=\"sppfb:ExtAnyType\" minOccurs=\"0\"/>\n \
    \   </sequence>\n   </complexType>\n   <simpleType name=\"SourceIdentSchemeType\"\
    >\n    <restriction base=\"token\">\n     <enumeration value=\"uri\"/>\n     <enumeration\
    \ value=\"ip\"/>\n     <enumeration value=\"rootDomain\"/>\n    </restriction>\n\
    \   </simpleType>\n   The SourceIdentType object is composed of the following\
    \ data\n   elements:\n   o  sourceIdentScheme: The source identification scheme\
    \ that this\n      source identification criteria applies to and that the associated\n\
    \      sourceIdentRegex should be matched against.\n   o  sourceIdentRegex: The\
    \ regular expression that should be used to\n      test for a match against the\
    \ portion of the resolution request\n      that is dictated by the associated\
    \ sourceIdentScheme.\n   o  ext: Point of extensibility described in Section 3.3.\n"
- title: 6.4.  SED Record
  contents:
  - "6.4.  SED Record\n   SED Group represents a combined grouping of SED Records\
    \ that define\n   SED.  However, SED Records need not be created to just serve\
    \ a single\n   SED Group.  SED Records can be created and managed to serve multiple\n\
    \   SED Groups.  As a result, a change, for example, to the properties of\n  \
    \ a network node used for multiple routes would necessitate just a\n   single\
    \ update operation to change the properties of that node.  The\n   change would\
    \ then be reflected in all the SED Groups whose SED Record\n   set contains a\
    \ reference to that node.  The substrate protocol MUST\n   support the ability\
    \ to Add, Get, and Delete SED Records (refer to\n   Section 7 for a generic description\
    \ of various operations).\n   A SED Record object MUST be uniquely identified\
    \ by attributes as\n   defined in the description of \"ObjKeyType\" in \"Generic\
    \ Object Key\n   Type\" (Section 5.2.1 of this document).\n   The SedRecType object\
    \ structure is defined as follows:\n   <complexType name=\"SedRecType\" abstract=\"\
    true\">\n    <complexContent>\n     <extension base=\"sppfb:BasicObjType\">\n\
    \      <sequence>\n       <element name=\"sedName\" type=\"sppfb:ObjNameType\"\
    />\n       <element name=\"sedFunction\" type=\"sppfb:SedFunctionType\"\n    \
    \            minOccurs=\"0\"/>\n       <element name=\"isInSvc\" type=\"boolean\"\
    />\n       <element name=\"ttl\" type=\"positiveInteger\" minOccurs=\"0\"/>\n\
    \      </sequence>\n     </extension>\n    </complexContent>\n   </complexType>\n\
    \   <simpleType name=\"SedFunctionType\">\n    <restriction base=\"token\">\n\
    \     <enumeration value=\"routing\"/>\n     <enumeration value=\"lookup\"/>\n\
    \    </restriction>\n   </simpleType>\n   The SedRecType object is composed of\
    \ the following elements:\n   o  base: All first-class objects extend BasicObjType\
    \ (see\n      Section 5.1).\n   o  sedName: The character string that contains\
    \ the name of the SED\n      Record.  It uniquely identifies this object within\
    \ the context of\n      the Registrant ID (a child element of the base element\
    \ as\n      described above).\n   o  sedFunction: As described in [RFC6461], SED\
    \ falls primarily into\n      one of two categories or functions: LUF and LRF.\
    \  To remove any\n      ambiguity as to the function a SED Record is intended\
    \ to provide,\n      this optional element allows the provisioning party to make\
    \ its\n      intentions explicit.\n   o  isInSvc: A boolean element that defines\
    \ whether or not this SED\n      Record is in service.  The session establishment\
    \ information\n      contained in a SED Record that is in service is a candidate\
    \ for\n      inclusion in resolution responses for TNs that are either directly\n\
    \      associated to this SED Record or for Public Identities residing in\n  \
    \    a Destination Group that is associated to a SED Group, which, in\n      turn,\
    \ has an association to this SED Record.\n   o  ttl: Number of seconds that an\
    \ addressing server may cache a\n      particular SED Record.\n   As described\
    \ above, SED Records are based on abstract type\n   SedRecType.  The concrete\
    \ types that use SedRecType as an extension\n   base are NAPTRType, NSType, and\
    \ URIType.  The definitions of these\n   types are included below.  The NAPTRType\
    \ object is comprised of the\n   data elements necessary for a Naming Authority\
    \ Pointer (NAPTR) (see\n   [RFC3403]) that contains routing information for a\
    \ SED Group.  The\n   NSType object is comprised of the data elements necessary\
    \ for a DNS\n   name server that points to another DNS server that contains the\n\
    \   desired routing information.  The NSType is relevant only when the\n   resolution\
    \ protocol is ENUM (see [RFC6116]).  The URIType object is\n   comprised of the\
    \ data elements necessary to house a URI.\n   The data provisioned in a Registry\
    \ can be leveraged for many purposes\n   and queried using various protocols including\
    \ SIP, ENUM, and others.\n   As such, the resolution data represented by the SED\
    \ Records must be\n   in a form suitable for transport using one of these protocols.\
    \  In\n   the NAPTRType, for example, if the URI is associated with a\n   Destination\
    \ Group, the user part of the replacement string <uri> that\n   may require the\
    \ Public Identifier cannot be preset.  As a SIP\n   Redirect, the resolution server\
    \ will apply <ere> pattern on the input\n   Public Identifier in the query and\
    \ process the replacement string by\n   substituting any back references in the\
    \ <uri> to arrive at the final\n   URI that is returned in the SIP Contact header.\
    \  For an ENUM query,\n   the resolution server will simply return the values\
    \ of the <ere> and\n   <uri> members of the URI.\n   <complexType name=\"NAPTRType\"\
    >\n    <complexContent>\n     <extension base=\"sppfb:SedRecType\">\n      <sequence>\n\
    \       <element name=\"order\" type=\"unsignedShort\"/>\n       <element name=\"\
    flags\" type=\"sppfb:FlagsType\" minOccurs=\"0\"/>\n       <element name=\"svcs\"\
    \ type=\"sppfb:SvcType\"/>\n       <element name=\"regx\" type=\"sppfb:RegexParamType\"\
    \ minOccurs=\"0\"/>\n       <element name=\"repl\" type=\"sppfb:ReplType\" minOccurs=\"\
    0\"/>\n       <element name=\"ext\" type=\"sppfb:ExtAnyType\" minOccurs=\"0\"\
    />\n      </sequence>\n     </extension>\n    </complexContent>\n   </complexType>\n\
    \   <complexType name=\"NSType\">\n    <complexContent>\n     <extension base=\"\
    sppfb:SedRecType\">\n      <sequence>\n       <element name=\"hostName\" type=\"\
    token\"/>\n       <element name=\"ipAddr\" type=\"sppfb:IPAddrType\"\n       \
    \         minOccurs=\"0\" maxOccurs=\"unbounded\"/>\n       <element name=\"ext\"\
    \ type=\"sppfb:ExtAnyType\" minOccurs=\"0\"/>\n      </sequence>\n     </extension>\n\
    \    </complexContent>\n   </complexType>\n   <complexType name=\"IPAddrType\"\
    >\n    <sequence>\n     <element name=\"addr\" type=\"sppfb:AddrStringType\"/>\n\
    \     <element name=\"ext\" type=\"sppfb:ExtAnyType\" minOccurs=\"0\"/>\n    </sequence>\n\
    \    <attribute name=\"type\" type=\"sppfb:IPType\" default=\"IPv4\"/>\n   </complexType>\n\
    \   <simpleType name=\"IPType\">\n    <restriction base=\"token\">\n     <enumeration\
    \ value=\"IPv4\"/>\n     <enumeration value=\"IPv6\"/>\n    </restriction>\n \
    \  </simpleType>\n   <complexType name=\"URIType\">\n    <complexContent>\n  \
    \   <extension base=\"sppfb:SedRecType\">\n      <sequence>\n       <element name=\"\
    ere\" type=\"token\" default=\"^(.*)$\"/>\n       <element name=\"uri\" type=\"\
    anyURI\"/>\n       <element name=\"ext\" type=\"sppfb:ExtAnyType\" minOccurs=\"\
    0\"/>\n      </sequence>\n     </extension>\n    </complexContent>\n   </complexType>\n\
    \   <simpleType name=\"flagsType\">\n    <restriction base=\"token\">\n     <length\
    \ value=\"1\"/>\n     <pattern value=\"[A-Z]|[a-z]|[0-9]\"/>\n    </restriction>\n\
    \   </simpleType>\n   The NAPTRType object is composed of the following elements:\n\
    \   o  order: Order value in an ENUM NAPTR, relative to other NAPTRType\n    \
    \  objects in the same SED Group.\n   o  svcs: ENUM service(s) that is served\
    \ by the SBE.  This field's\n      value must be of the form specified in [RFC6116]\
    \ (e.g.,\n      E2U+pstn:sip+sip).  The allowable values are a matter of policy\n\
    \      and are not limited by this protocol.\n   o  regx: NAPTR's regular expression\
    \ field.  If this is not included,\n      then the repl field must be included.\n\
    \   o  repl: NAPTR replacement field; it should only be provided if the\n    \
    \  regx field is not provided; otherwise, the server will ignore it.\n   o  ext:\
    \ Point of extensibility described in Section 3.3.\n   The NSType object is composed\
    \ of the following elements:\n   o  hostName: Root-relative host name of the name\
    \ server.\n   o  ipAddr: Zero or more objects of type IpAddrType.  Each object\n\
    \      holds an IP Address and the IP Address type (\"IPv4\" or \"IPv6\").\n \
    \  o  ext: Point of extensibility described in Section 3.3.\n   The URIType object\
    \ is composed of the following elements:\n   o  ere: The POSIX Extended Regular\
    \ Expression (ere) as defined in\n      [RFC3986].\n   o  uri: the URI as defined\
    \ in [RFC3986].  In some cases, this will\n      serve as the replacement string,\
    \ and it will be left to the\n      resolution server to arrive at the final usable\
    \ URI.\n"
- title: 6.5.  SED Group Offer
  contents:
  - "6.5.  SED Group Offer\n   The list of peer organizations whose resolution responses\
    \ can include\n   the SED contained in a given SED Group is controlled by the\n\
    \   organization to which a SED Group object belongs (its Registrant) and\n  \
    \ the peer organization that submits resolution requests (a data\n   recipient,\
    \ also known as a peering organization).  The Registrant\n   offers access to\
    \ a SED Group by submitting a SED Group Offer.  The\n   data recipient can then\
    \ accept or reject that offer.  Not until\n   access to a SED Group has been offered\
    \ and accepted will the data\n   recipient's organization ID be included in the\
    \ peeringOrg list in a\n   SED Group object, and that SED Group's peering information\
    \ becomes a\n   candidate for inclusion in the responses to the resolution requests\n\
    \   submitted by that data recipient.  The substrate protocol MUST\n   support\
    \ the ability to Add, Get, Delete, Accept, and Reject SED Group\n   Offers (refer\
    \ to Section 7 for a generic description of various\n   operations).\n   A SED\
    \ Group Offer object MUST be uniquely identified by attributes as\n   defined\
    \ in the description of \"SedGrpOfferKeyType\" in \"Derived Object\n   Key Types\"\
    \ (Section 5.2.2 of this document).\n   The SedGrpOfferType object structure is\
    \ defined as follows:\n   <complexType name=\"SedGrpOfferType\">\n    <complexContent>\n\
    \     <extension base=\"sppfb:BasicObjType\">\n      <sequence>\n       <element\
    \ name=\"sedGrpOfferKey\" type=\"sppfb:SedGrpOfferKeyType\"/>\n       <element\
    \ name=\"status\" type=\"sppfb:SedGrpOfferStatusType\"/>\n       <element name=\"\
    offerDateTime\" type=\"dateTime\"/>\n       <element name=\"acceptDateTime\" type=\"\
    dateTime\" minOccurs=\"0\"/>\n       <element name=\"ext\" type=\"sppfb:ExtAnyType\"\
    \ minOccurs=\"0\"/>\n      </sequence>\n     </extension>\n    </complexContent>\n\
    \   </complexType>\n   <complexType name=\"SedGrpOfferKeyType\" abstract=\"true\"\
    >\n    <annotation>\n     <documentation>\n     -- Generic type that represents\
    \ the key for a SED Group Offer. Must\n        be defined in concrete form in\
    \ a substrate \"protocol\"\n        specification. --\n     </documentation>\n\
    \    </annotation>\n   </complexType>\n   <simpleType name=\"SedGrpOfferStatusType\"\
    >\n    <restriction base=\"token\">\n     <enumeration value=\"offered\"/>\n \
    \    <enumeration value=\"accepted\"/>\n    </restriction>\n   </simpleType>\n\
    \   The SedGrpOfferType object is composed of the following elements:\n   o  base:\
    \ All first-class objects extend BasicObjType (see\n      Section 5.1).\n   o\
    \  sedGrpOfferKey: The object that identifies the SED that is or has\n      been\
    \ offered and the organization to which it is or has been\n      offered.\n  \
    \ o  status: The status of the offer, offered or accepted.  The server\n     \
    \ controls the status.  It is automatically set to \"offered\"\n      whenever\
    \ a new SED Group Offer is added and is automatically set\n      to \"accepted\"\
    \ if and when that offer is accepted.  The value of\n      the element is ignored\
    \ when passed in by the client.\n   o  offerDateTime: Date and time in UTC when\
    \ the SED Group Offer was\n      added.\n   o  acceptDateTime: Date and time in\
    \ UTC when the SED Group Offer was\n      accepted.\n"
- title: 6.6.  Egress Route
  contents:
  - "6.6.  Egress Route\n   In a high-availability environment, the originating SSP\
    \ likely has\n   more than one egress path to the ingress SBE of the target SSP.\
    \  If\n   the originating SSP wants to exercise greater control and choose a\n\
    \   specific egress SBE to be associated to the target ingress SBE, it\n   can\
    \ do so using the EgrRteType object.\n   An Egress Route object MUST be uniquely\
    \ identified by attributes as\n   defined in the description of \"ObjKeyType\"\
    \ in \"Generic Object Key\n   Type\" (Section 5.2.1 of this document).\n   Assume\
    \ that the target SSP has offered, as part of its SED, to share\n   one or more\
    \ Ingress Routes and that the originating SSP has accepted\n   the offer.  In\
    \ order to add the Egress Route to the Registry, the\n   originating SSP uses\
    \ a valid regular expression to rewrite the\n   Ingress Route in order to include\
    \ the egress SBE information.  Also,\n   more than one Egress Route can be associated\
    \ with a given Ingress\n   Route in support of fault-tolerant configurations.\
    \  The supporting\n   SPPF structure provides a way to include route precedence\
    \ information\n   to help manage traffic to more than one outbound egress SBE.\n\
    \   The substrate protocol MUST support the ability to Add, Get, and\n   Delete\
    \ Egress Routes (refer to Section 7 for a generic description of\n   various operations).\
    \  The EgrRteType object structure is defined as\n   follows:\n   <complexType\
    \ name=\"EgrRteType\">\n    <complexContent>\n     <extension base=\"sppfb:BasicObjType\"\
    >\n      <sequence>\n       <element name=\"egrRteName\" type=\"sppfb:ObjNameType\"\
    />\n       <element name=\"pref\" type=\"unsignedShort\"/>\n       <element name=\"\
    regxRewriteRule\" type=\"sppfb:RegexParamType\"/>\n       <element name=\"ingrSedGrp\"\
    \ type=\"sppfb:ObjKeyType\"\n                minOccurs=\"0\" maxOccurs=\"unbounded\"\
    />\n       <element name=\"svcs\" type=\"sppfb:SvcType\" minOccurs=\"0\"/>\n \
    \      <element name=\"ext\" type=\"sppfb:ExtAnyType\" minOccurs=\"0\"/>\n   \
    \   </sequence>\n     </extension>\n    </complexContent>\n   </complexType>\n\
    \   The EgrRteType object is composed of the following elements:\n   o  base:\
    \ All first-class objects extend BasicObjType (see\n      Section 5.1).\n   o\
    \  egrRteName: The name of the Egress Route.\n   o  pref: The preference of this\
    \ Egress Route relative to other Egress\n      Routes that may get selected when\
    \ responding to a resolution\n      request.\n   o  regxRewriteRule: The regular\
    \ expression rewrite rule that should\n      be applied to the regular expression\
    \ of the ingress NAPTR(s) that\n      belongs to the Ingress Route.\n   o  ingrSedGrp:\
    \ The ingress SED Group that the Egress Route should be\n      used for.\n   o\
    \  svcs: ENUM service(s) that is served by an Egress Route.  This\n      element\
    \ is used to identify the ingress NAPTRs associated with the\n      SED Group\
    \ to which an Egress Route's regxRewriteRule should be\n      applied.  If no\
    \ ENUM service(s) is associated with an Egress\n      Route, then the Egress Route's\
    \ regxRewriteRule should be applied\n      to all the NAPTRs associated with the\
    \ SED Group.  This field's\n      value must be of the form specified in [RFC6116]\
    \ (e.g.,\n      E2U+pstn:sip+sip).  The allowable values are a matter of policy\n\
    \      and are not limited by this protocol.\n   o  ext: Point of extensibility\
    \ described in Section 3.3.\n"
- title: 7.  Framework Operations
  contents:
  - "7.  Framework Operations\n   In addition to the operation-specific object types,\
    \ all operations\n   MAY specify the minor version of the protocol that when used\
    \ in\n   conjunction with the major version (which can be, for instance,\n   specified\
    \ in the protocol Namespace) can serve to identify the\n   version of the SPPF\
    \ protocol that the client is using.  If the minor\n   version is not specified,\
    \ the latest minor version supported by the\n   SPPF server for the given major\
    \ version will be used.  Additionally,\n   operations that may potentially modify\
    \ persistent protocol objects\n   SHOULD include a transaction ID as well.\n"
- title: 7.1.  Add Operation
  contents:
  - "7.1.  Add Operation\n   Any conforming substrate \"protocol\" specification MUST\
    \ provide a\n   definition for the operation that adds one or more SPPF objects\
    \ into\n   the Registry.  If the object, as identified by the request attributes\n\
    \   that form part of the object's key, does not exist, then the Registry\n  \
    \ MUST create the object.  If the object does exist, then the Registry\n   MUST\
    \ replace the current properties of the object with the properties\n   passed\
    \ in as part of the Add operation.\n   Note that this effectively allows modification\
    \ of a preexisting\n   object.\n   If the entity that issued the command is not\
    \ authorized to perform\n   this operation, an appropriate error message MUST\
    \ be returned from\n   amongst the response messages defined in \"Response Message\
    \ Types\"\n   (Section 5.3 of this document).\n"
- title: 7.2.  Delete Operation
  contents:
  - "7.2.  Delete Operation\n   Any conforming substrate \"protocol\" specification\
    \ MUST provide a\n   definition for the operation that deletes one or more SPPF\
    \ objects\n   from the Registry using the object's key.\n   If the entity that\
    \ issued the command is not authorized to perform\n   this operation, an appropriate\
    \ error message MUST be returned from\n   amongst the response messages defined\
    \ in \"Response Message Types\"\n   (Section 5.3 of this document).\n   When an\
    \ object is deleted, any references to that object must of\n   course also be\
    \ removed as the SPPF server implementation fulfills the\n   deletion request.\
    \  Furthermore, the deletion of a composite object\n   must also result in the\
    \ deletion of the objects it contains.  As a\n   result, the following rules apply\
    \ to the deletion of SPPF object\n   types:\n   o  Destination Groups: When a\
    \ Destination Group is deleted, any\n      cross-references between that destination\
    \ group and any SED Group\n      must be automatically removed by the SPPF implementation\
    \ as part\n      of fulfilling the deletion request.  Similarly, any cross-\n\
    \      references between that Destination Group and any Public\n      Identifier\
    \ must be removed by the SPPF implementation.\n   o  SED Groups: When a SED Group\
    \ is deleted, any references between\n      that SED Group and any Destination\
    \ Group must be automatically\n      removed by the SPPF implementation as part\
    \ of fulfilling the\n      deletion request.  Similarly, any cross-references\
    \ between that\n      SED Group and any SED Records must be removed by the SPPF\n\
    \      implementation as part of fulfilling the deletion request.\n      Furthermore,\
    \ SED Group Offers relating to that SED Group must also\n      be deleted.\n \
    \  o  SED Records: When a SED Record is deleted, any cross-references\n      between\
    \ that SED Record and any SED Group must be removed by the\n      SPPF implementation\
    \ as part of fulfilling the deletion request.\n      Similarly, any reference\
    \ between that SED Record and any Public\n      Identifier must be removed by\
    \ the SPPF implementation.\n   o  Public Identifiers: When a Public Identifier\
    \ is deleted, any\n      cross-references between that Public Identifier and any\
    \ referenced\n      Destination Group must be removed by the SPPF implementation\
    \ as\n      part of fulfilling the deletion request.  Any references to SED\n\
    \      Records associated directly to that Public Identifier must also be\n  \
    \    deleted by the SPPF implementation.\n   Deletes MUST be atomic.\n"
- title: 7.3.  Get Operations
  contents:
  - "7.3.  Get Operations\n   At times, on behalf of the Registrant, the Registrar\
    \ may need to get\n   information about SPPF objects that were previously provisioned\
    \ in\n   the Registry.  A few examples include logging, auditing, and pre-\n \
    \  provisioning dependency checking.  This query mechanism is limited to\n   aid\
    \ provisioning scenarios and should not be confused with query\n   protocols provided\
    \ as part of the resolution system (e.g., ENUM and\n   SIP).\n   Any conforming\
    \ \"protocol\" specification MUST provide a definition for\n   the operation that\
    \ queries the details of one or more SPPF objects\n   from the Registry using\
    \ the object's key.  If the entity that issued\n   the command is not authorized\
    \ to perform this operation, an\n   appropriate error message MUST be returned\
    \ from among the response\n   messages defined in Section 5.3.\n   If the response\
    \ to the Get operation includes an object(s) that\n   extends the BasicObjType,\
    \ the Registry MUST include the \"cDate\" and\n   \"mDate\", if applicable.\n"
- title: 7.4.  Accept Operations
  contents:
  - "7.4.  Accept Operations\n   In SPPF, a SED Group Offer can be accepted or rejected\
    \ by, or on\n   behalf of, the Registrant to which the SED Group has been offered\n\
    \   (refer to Section 6.5 of this document for a description of the SED\n   Group\
    \ Offer object).  The Accept operation is used to accept the SED\n   Group Offers.\
    \  Any conforming substrate \"protocol\" specification MUST\n   provide a definition\
    \ for the operation to accept SED Group Offers by,\n   or on behalf of, the Registrant,\
    \ using the SED Group Offer object\n   key.\n   Not until access to a SED Group\
    \ has been offered and accepted will\n   the Registrant's organization ID be included\
    \ in the peeringOrg list\n   in that SED Group object, and that SED Group's peering\
    \ information\n   becomes a candidate for inclusion in the responses to the resolution\n\
    \   requests submitted by that Registrant.  A SED Group Offer that is in\n   the\
    \ \"offered\" status is accepted by, or on behalf of, the Registrant\n   to which\
    \ it has been offered.  When the SED Group Offer is accepted,\n   the SED Group\
    \ Offer is moved to the \"accepted\" status and the data\n   recipient's organization\
    \ ID is added into the list of peerOrgIds for\n   that SED Group.\n   If the entity\
    \ that issued the command is not authorized to perform\n   this operation, an\
    \ appropriate error message MUST be returned from\n   amongst the response messages\
    \ defined in \"Response Message Types\"\n   (Section 5.3 of this document).\n"
- title: 7.5.  Reject Operations
  contents:
  - "7.5.  Reject Operations\n   In SPPF, a SED Group Offer object can be accepted\
    \ or rejected by, or\n   on behalf of, the Registrant to which the SED Group has\
    \ been offered\n   (refer to \"Framework Data Model Objects\", Section 6 of this\
    \ document,\n   for a description of the SED Group Offer object).  Furthermore,\
    \ that\n   offer may be rejected, regardless of whether or not it has been\n \
    \  previously accepted.  The Reject operation is used to reject the SED\n   Group\
    \ Offer.  When the SED Group Offer is rejected, that SED Group\n   Offer is deleted,\
    \ and, if appropriate, the data recipient's\n   organization ID is removed from\
    \ the list of peeringOrg IDs for that\n   SED Group.  Any conforming substrate\
    \ \"protocol\" specification MUST\n   provide a definition for the operation to\
    \ reject SED Group Offers by,\n   or on behalf of, the Registrant, using the SED\
    \ Group Offer object\n   key.\n   If the entity that issued the command is not\
    \ authorized to perform\n   this operation, an appropriate error message MUST\
    \ be returned from\n   among the response messages defined in \"Response Message\
    \ Types\"\n   (Section 5.3 of this document).\n"
- title: 7.6.  Get Server Details Operation
  contents:
  - "7.6.  Get Server Details Operation\n   In SPPF, the Get Server Details operation\
    \ can be used to request\n   certain details about the SPPF server that include\
    \ the SPPF server's\n   current status and the major/minor version of the SPPF\
    \ protocol\n   supported by the SPPF server.\n   Any conforming substrate \"protocol\"\
    \ specification MUST provide a\n   definition for the operation to request such\
    \ details from the SPPF\n   server.  If the entity that issued the command is\
    \ not authorized to\n   perform this operation, an appropriate error message MUST\
    \ be returned\n   from among the response messages defined in \"Response Message\
    \ Types\"\n   (Section 5.3 of this document).\n"
- title: 8.  XML Considerations
  contents:
  - "8.  XML Considerations\n   XML serves as the encoding format for SPPF, allowing\
    \ complex\n   hierarchical data to be expressed in a text format that can be read,\n\
    \   saved, and manipulated with both traditional text tools and tools\n   specific\
    \ to XML.\n   XML is case sensitive.  Unless stated otherwise, the character casing\n\
    \   of XML specifications in this document MUST be preserved to develop a\n  \
    \ conforming specification.\n   This section discusses a small number of XML-related\
    \ considerations\n   pertaining to SPPF.\n"
- title: 8.1.  Namespaces
  contents:
  - "8.1.  Namespaces\n   All SPPF elements are defined in the Namespaces in the \"\
    IANA\n   Considerations\" and \"Formal Framework Specification\" sections of this\n\
    \   document.\n"
- title: 8.2.  Versioning and Character Encoding
  contents:
  - "8.2.  Versioning and Character Encoding\n   All XML instances SHOULD begin with\
    \ an <?xml?> declaration to\n   identify the version of XML that is being used,\
    \ optionally identify\n   use of the character encoding used, and optionally provide\
    \ a hint to\n   an XML parser that an external schema file is needed to validate\
    \ the\n   XML instance.\n   Conformant XML parsers recognize both UTF-8 (defined\
    \ in [RFC3629])\n   and UTF-16 (defined in [RFC2781]); per [RFC2277], UTF-8 is\
    \ the\n   RECOMMENDED character encoding for use with SPPF.\n   Character encodings\
    \ other than UTF-8 and UTF-16 are allowed by XML.\n   UTF-8 is the default encoding\
    \ assumed by XML in the absence of an\n   \"encoding\" attribute or a byte order\
    \ mark (BOM); thus, the \"encoding\"\n   attribute in the XML declaration is OPTIONAL\
    \ if UTF-8 encoding is\n   used.  SPPF clients and servers MUST accept a UTF-8\
    \ BOM if present,\n   though emitting a UTF-8 BOM is NOT RECOMMENDED.\n   Example\
    \ XML declarations:\n   <?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"\
    no\"?>\n"
- title: 9.  Security Considerations
  contents:
  - "9.  Security Considerations\n   Many SPPF implementations manage data that is\
    \ considered confidential\n   and critical.  Furthermore, SPPF implementations\
    \ can support\n   provisioning activities for multiple Registrars and Registrants.\
    \  As\n   a result, any SPPF implementation must address the requirements for\n\
    \   confidentiality, authentication, and authorization.\n"
- title: 9.1.  Confidentiality and Authentication
  contents:
  - "9.1.  Confidentiality and Authentication\n   With respect to confidentiality\
    \ and authentication, the substrate\n   protocol requirements section of this\
    \ document contains security\n   properties that the substrate protocol must provide,\
    \ so that\n   authenticated endpoints can exchange data confidentially and with\n\
    \   integrity protection.  Refer to Section 4 of this document and\n   [RFC7878]\
    \ for the specific solutions to authentication and\n   confidentiality.\n"
- title: 9.2.  Authorization
  contents:
  - "9.2.  Authorization\n   With respect to authorization, the SPPF server implementation\
    \ must\n   define and implement a set of authorization rules that precisely\n\
    \   address (1) which Registrars will be authorized to create/modify/\n   delete\
    \ each SPPF object type for a given Registrant(s) and (2) which\n   Registrars\
    \ will be authorized to view/get each SPPF object type for a\n   given Registrant(s).\
    \  These authorization rules are a matter of\n   policy and are not specified\
    \ within the context of SPPF.  However,\n   any SPPF implementation must specify\
    \ these authorization rules in\n   order to function in a reliable and safe manner.\n"
- title: 9.3.  Denial of Service
  contents:
  - "9.3.  Denial of Service\n   In general, guidance on Denial-of-Service (DoS) issues\
    \ is given in\n   \"Internet Denial of Service Considerations\" [RFC4732], which\
    \ also\n   gives a general vocabulary for describing the DoS issue.\n   SPPF is\
    \ a high-level client-server protocol that can be implemented\n   on lower-level\
    \ mechanisms such as remote procedure call and web-\n   service API protocols.\
    \  As such, it inherits any Denial-of-Service\n   issues inherent to the specific\
    \ lower-level mechanism used for any\n   implementation of SPPF.  SPPF also has\
    \ its own set of higher-level\n   exposures that are likely to be independent\
    \ of lower-layer mechanism\n   choices.\n"
- title: 9.3.1.  DoS Issues Inherited from the Substrate Mechanism
  contents:
  - "9.3.1.  DoS Issues Inherited from the Substrate Mechanism\n   In general, an\
    \ SPPF implementation is dependent on the selection and\n   implementation of\
    \ a lower-level substrate protocol and a binding\n   between that protocol and\
    \ SPPF.  The archetypal SPPF implementation\n   uses XML [W3C.REC-xml-20081126]\
    \ representation in a SOAP [SOAPREF]\n   request/response framework over HTTP\
    \ [RFC7230], probably also uses\n   Transport Layer Security (TLS) [RFC5246] for\
    \ on-the-wire data\n   integrity and participant authentication, and might use\
    \ HTTP Digest\n   authentication [RFC2069].\n   The typical deployment scenario\
    \ for SPPF is to have servers in a\n   managed facility; therefore, techniques\
    \ such as Network Ingress\n   Filtering [RFC2827] are generally applicable.  In\
    \ short, any DoS\n   mechanism affecting a typical HTTP implementation would affect\
    \ such\n   an SPPF implementation; therefore, the mitigation tools for HTTP in\n\
    \   general also apply to SPPF.\n   SPPF does not directly specify an authentication\
    \ mechanism; instead,\n   it relies on the lower-level substrate protocol to provide\
    \ for\n   authentication.  In general, authentication is an expensive\n   operation,\
    \ and one apparent attack vector is to flood an SPPF server\n   with repeated\
    \ requests for authentication, thereby exhausting its\n   resources.  Therefore,\
    \ SPPF implementations SHOULD be prepared to\n   handle authentication floods,\
    \ perhaps by noting repeated failed login\n   requests from a given source address\
    \ and blocking that source\n   address.\n"
- title: 9.3.2.  DoS Issues Specific to SPPF
  contents:
  - "9.3.2.  DoS Issues Specific to SPPF\n   The primary defense mechanism against\
    \ DoS within SPPF is\n   authentication.  Implementations MUST tightly control\
    \ access to the\n   SPPF service, SHOULD implement DoS and other policy control\n\
    \   screening, and MAY employ a variety of policy violation reporting and\n  \
    \ response measures such as automatic blocking of specific users and\n   alerting\
    \ of operations personnel.  In short, the primary SPPF\n   response to DoS-like\
    \ activity by a user is to block that user or\n   subject their actions to additional\
    \ review.\n   SPPF allows a client to submit multiple-element or \"batch\" requests\n\
    \   that may insert or otherwise affect a large amount of data with a\n   single\
    \ request.  In the simplest case, the server progresses\n   sequentially through\
    \ each element in a batch, completing one before\n   starting the next.  Mid-batch\
    \ failures are handled by stopping the\n   batch and rolling back the data store\
    \ to its pre-request state.  This\n   \"stop and roll back\" design provides a\
    \ DoS opportunity.  A hostile\n   client could repeatedly issue large batch requests\
    \ with one or more\n   failing elements, causing the server to repeatedly stop\
    \ and roll back\n   large transactions.  The suggested response is to monitor\
    \ clients for\n   such failures and take administrative action (such as blocking\
    \ the\n   user) when an excessive number of rollbacks is reported.\n   An additional\
    \ suggested response is for an implementer to set their\n   maximum allowable\
    \ XML message size and their maximum allowable batch\n   size at a level that\
    \ they feel protects their operational instance,\n   given the hardware sizing\
    \ they have in place and the expected load\n   and size needs that their users\
    \ expect.\n"
- title: 9.4.  Information Disclosure
  contents:
  - "9.4.  Information Disclosure\n   It is not uncommon for the logging systems to\
    \ document on-the-wire\n   messages for various purposes, such as debugging, auditing,\
    \ and\n   tracking.  At the minimum, the various support and administration\n\
    \   staff will have access to these logs.  Also, if an unprivileged user\n   gains\
    \ access to the SPPF deployments and/or support systems, it will\n   have access\
    \ to the information that is potentially deemed\n   confidential.  To manage information\
    \ disclosure concerns beyond the\n   substrate level, SPPF implementations MAY\
    \ provide support for\n   encryption at the SPPF object level.\n"
- title: 9.5.  Non-repudiation
  contents:
  - "9.5.  Non-repudiation\n   In some situations, it may be required to protect against\
    \ denial of\n   involvement (see [RFC4949]) and tackle non-repudiation concerns\
    \ in\n   regard to SPPF messages.  This type of protection is useful to\n   satisfy\
    \ authenticity concerns related to SPPF messages beyond the\n   end-to-end connection\
    \ integrity, confidentiality, and authentication\n   protection that the substrate\
    \ layer provides.  This is an optional\n   feature, and some SPPF implementations\
    \ MAY provide support for it.\n"
- title: 9.6.  Replay Attacks
  contents:
  - "9.6.  Replay Attacks\n   Anti-replay protection ensures that a given SPPF object\
    \ replayed at a\n   later time won't affect the integrity of the system.  SPPF\
    \ provides\n   at least one mechanism to fight against replay attacks.  Use of\
    \ the\n   optional client transaction identifier allows the SPPF client to\n \
    \  correlate the request message with the response and to be sure that\n   it\
    \ is not a replay of a server response from earlier exchanges.  Use\n   of unique\
    \ values for the client transaction identifier is highly\n   encouraged to avoid\
    \ chance matches to a potential replay message.\n"
- title: 9.7.  Compromised or Malicious Intermediary
  contents:
  - "9.7.  Compromised or Malicious Intermediary\n   The SPPF client or Registrar\
    \ can be a separate entity acting on\n   behalf of the Registrant in facilitating\
    \ provisioning transactions to\n   the Registry.  Therefore, even though the substrate\
    \ layer provides\n   end-to-end protection for each specific SPPP connection between\n\
    \   client and server, data might be available in clear text before or\n   after\
    \ it traverses an SPPP connection.  Therefore, a\n   man-in-the-middle attack\
    \ by one of the intermediaries is a\n   possibility that could affect the integrity\
    \ of the data that belongs\n   to the Registrant and/or expose peering data to\
    \ unintended actors.\n"
- title: 10.  Internationalization Considerations
  contents:
  - "10.  Internationalization Considerations\n   Character encodings to be used for\
    \ SPPF elements are described in\n   Section 8.2.  The use of time elements in\
    \ the protocol is specified\n   in Section 3.2.  Where human-readable messages\
    \ that are presented to\n   an end user are used in the protocol, those messages\
    \ SHOULD be tagged\n   according to [RFC5646], and the substrate protocol MUST\
    \ support a\n   respective mechanism to transmit such tags together with those\
    \ human-\n   readable messages.\n"
- title: 11.  IANA Considerations
  contents:
  - '11.  IANA Considerations

    '
- title: 11.1.  URN Assignments
  contents:
  - "11.1.  URN Assignments\n   This document uses URNs to describe XML Namespaces\
    \ and XML Schemas\n   conforming to a Registry mechanism described in [RFC3688].\n\
    \   Two URI assignments have been made:\n   Registration for the SPPF XML Namespace:\n\
    \   urn:ietf:params:xml:ns:sppf:base:1\n   Registrant Contact: The IESG\n   XML:\
    \ None.  Namespace URIs do not represent an XML specification.\n   Registration\
    \ request for the XML Schema:\n   URI: urn:ietf:params:xml:schema:sppf:1\n   Registrant\
    \ Contact: IESG\n   XML: See \"Formal Specification\" (Section 12 of this document).\n"
- title: 11.2.  Organization Identifier Namespace Registry
  contents:
  - "11.2.  Organization Identifier Namespace Registry\n   IANA has created and will\
    \ maintain a registry titled \"SPPF OrgIdType\n   Namespaces\".  The formal syntax\
    \ is described in Section 5.1.\n   Assignments consist of the OrgIdType Namespace\
    \ string and the\n   definition of the associated Namespace.  This document makes\
    \ the\n   following initial assignment for the OrgIdType Namespaces:\n       \
    \  OrgIdType Namespace string                       Namespace\n         --------------------------\
    \                       ---------\n         IANA Enterprise Numbers          \
    \                iana-en\n   Future assignments are to be made through the well-known\
    \ IANA Policy\n   \"RFC Required\" (see Section 4.1 of [RFC5226]).  Such assignments\
    \ will\n   typically be requested when a new Namespace for identification of SPs\n\
    \   is defined.\n"
- title: 12.  Formal Specification
  contents:
  - "12.  Formal Specification\n   This section provides the XSD for the SPPF protocol.\n\
    \   <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n   <schema xmlns:sppfb=\"urn:ietf:params:xml:ns:sppf:base:1\"\
    \n   xmlns=\"http://www.w3.org/2001/XMLSchema\"\n   targetNamespace=\"urn:ietf:params:xml:ns:sppf:base:1\"\
    \n   elementFormDefault=\"qualified\" xml:lang=\"EN\">\n    <annotation>\n   \
    \  <documentation>\n      ---- Generic object key types to be defined by specific\n\
    \           substrate/architecture.  The types defined here can\n           be\
    \ extended by the specific architecture to\n           define the Object Identifiers.\
    \ ----\n     </documentation>\n    </annotation>\n    <complexType name=\"ObjKeyType\"\
    \n     abstract=\"true\">\n     <annotation>\n      <documentation>\n       ----\
    \ Generic type that represents the\n            key for various objects in SPPF.\
    \ ----\n      </documentation>\n     </annotation>\n    </complexType>\n    <complexType\
    \ name=\"SedGrpOfferKeyType\" abstract=\"true\">\n     <complexContent>\n    \
    \  <extension base=\"sppfb:ObjKeyType\">\n       <annotation>\n        <documentation>\n\
    \        ---- Generic type that represents\n             the key for a SED Group\
    \ Offer. ----\n        </documentation>\n       </annotation>\n      </extension>\n\
    \     </complexContent>\n    </complexType>\n    <complexType name=\"PubIdKeyType\"\
    \ abstract=\"true\">\n     <complexContent>\n      <extension base=\"sppfb:ObjKeyType\"\
    >\n       <annotation>\n        <documentation>\n         ----Generic type that\n\
    \         represents the key\n         for a Pub ID. ----\n        </documentation>\n\
    \       </annotation>\n      </extension>\n     </complexContent>\n    </complexType>\n\
    \    <annotation>\n     <documentation>\n       ---- Object Type Definitions ----\n\
    \     </documentation>\n    </annotation>\n    <complexType name=\"SedGrpType\"\
    >\n     <complexContent>\n      <extension base=\"sppfb:BasicObjType\">\n    \
    \   <sequence>\n        <element name=\"sedGrpName\" type=\"sppfb:ObjNameType\"\
    />\n        <element name=\"sedRecRef\" type=\"sppfb:SedRecRefType\"\n       \
    \          minOccurs=\"0\" maxOccurs=\"unbounded\"/>\n        <element name=\"\
    dgName\" type=\"sppfb:ObjNameType\"\n                 minOccurs=\"0\" maxOccurs=\"\
    unbounded\"/>\n        <element name=\"peeringOrg\" type=\"sppfb:OrgIdType\"\n\
    \                 minOccurs=\"0\" maxOccurs=\"unbounded\"/>\n        <element\
    \ name=\"sourceIdent\" type=\"sppfb:SourceIdentType\"\n                 minOccurs=\"\
    0\" maxOccurs=\"unbounded\"/>\n        <element name=\"isInSvc\" type=\"boolean\"\
    />\n        <element name=\"priority\" type=\"unsignedShort\"/>\n        <element\
    \ name=\"ext\"\n        type=\"sppfb:ExtAnyType\" minOccurs=\"0\"/>\n       </sequence>\n\
    \      </extension>\n     </complexContent>\n    </complexType>\n    <complexType\
    \ name=\"DestGrpType\">\n     <complexContent>\n      <extension base=\"sppfb:BasicObjType\"\
    >\n       <sequence>\n        <element name=\"dgName\"\n        type=\"sppfb:ObjNameType\"\
    />\n       </sequence>\n      </extension>\n     </complexContent>\n    </complexType>\n\
    \    <complexType name=\"PubIdType\" abstract=\"true\">\n     <complexContent>\n\
    \      <extension base=\"sppfb:BasicObjType\">\n       <sequence>\n        <element\
    \ name=\"dgName\" type=\"sppfb:ObjNameType\"\n                 minOccurs=\"0\"\
    \ maxOccurs=\"unbounded\"/>\n       </sequence>\n      </extension>\n     </complexContent>\n\
    \    </complexType>\n    <complexType name=\"TNType\">\n     <complexContent>\n\
    \      <extension base=\"sppfb:PubIdType\">\n       <sequence>\n        <element\
    \ name=\"tn\" type=\"sppfb:NumberValType\"/>\n        <element name=\"corInfo\"\
    \ type=\"sppfb:CORInfoType\" minOccurs=\"0\"/>\n        <element name=\"sedRecRef\"\
    \ type=\"sppfb:SedRecRefType\"\n                 minOccurs=\"0\" maxOccurs=\"\
    unbounded\"/>\n       </sequence>\n      </extension>\n     </complexContent>\n\
    \    </complexType>\n    <complexType name=\"TNRType\">\n     <complexContent>\n\
    \      <extension base=\"sppfb:PubIdType\">\n       <sequence>\n        <element\
    \ name=\"range\" type=\"sppfb:NumberRangeType\"/>\n        <element name=\"corInfo\"\
    \ type=\"sppfb:CORInfoType\" minOccurs=\"0\"/>\n       </sequence>\n      </extension>\n\
    \     </complexContent>\n    </complexType>\n    <complexType name=\"TNPType\"\
    >\n     <complexContent>\n      <extension base=\"sppfb:PubIdType\">\n       <sequence>\n\
    \        <element name=\"tnPrefix\" type=\"sppfb:NumberValType\"/>\n        <element\
    \ name=\"corInfo\" type=\"sppfb:CORInfoType\" minOccurs=\"0\"/>\n       </sequence>\n\
    \      </extension>\n     </complexContent>\n    </complexType>\n    <complexType\
    \ name=\"RNType\">\n     <complexContent>\n      <extension base=\"sppfb:PubIdType\"\
    >\n       <sequence>\n        <element name=\"rn\" type=\"sppfb:NumberValType\"\
    />\n        <element name=\"corInfo\" type=\"sppfb:CORInfoType\" minOccurs=\"\
    0\"/>\n       </sequence>\n      </extension>\n     </complexContent>\n    </complexType>\n\
    \     <complexType name=\"URIPubIdType\">\n     <complexContent>\n      <extension\
    \ base=\"sppfb:PubIdType\">\n       <sequence>\n        <element name=\"uri\"\
    \ type=\"anyURI\"/>\n        <element name=\"ext\" type=\"sppfb:ExtAnyType\" minOccurs=\"\
    0\"/>\n       </sequence>\n      </extension>\n     </complexContent>\n    </complexType>\n\
    \    <complexType name=\"SedRecType\" abstract=\"true\">\n     <complexContent>\n\
    \      <extension base=\"sppfb:BasicObjType\">\n       <sequence>\n        <element\
    \ name=\"sedName\" type=\"sppfb:ObjNameType\"/>\n        <element name=\"sedFunction\"\
    \ type=\"sppfb:SedFunctionType\"\n                 minOccurs=\"0\"/>\n       \
    \ <element name=\"isInSvc\" type=\"boolean\"/>\n        <element name=\"ttl\"\
    \ type=\"positiveInteger\" minOccurs=\"0\"/>\n       </sequence>\n      </extension>\n\
    \     </complexContent>\n    </complexType>\n    <complexType name=\"NAPTRType\"\
    >\n     <complexContent>\n      <extension base=\"sppfb:SedRecType\">\n      \
    \ <sequence>\n        <element name=\"order\" type=\"unsignedShort\"/>\n     \
    \   <element name=\"flags\" type=\"sppfb:FlagsType\" minOccurs=\"0\"/>\n     \
    \   <element name=\"svcs\" type=\"sppfb:SvcType\"/>\n        <element name=\"\
    regx\" type=\"sppfb:RegexParamType\" minOccurs=\"0\"/>\n        <element name=\"\
    repl\" type=\"sppfb:ReplType\" minOccurs=\"0\"/>\n        <element name=\"ext\"\
    \ type=\"sppfb:ExtAnyType\" minOccurs=\"0\"/>\n       </sequence>\n      </extension>\n\
    \     </complexContent>\n    </complexType>\n    <complexType name=\"NSType\"\
    >\n     <complexContent>\n      <extension base=\"sppfb:SedRecType\">\n      \
    \ <sequence>\n        <element name=\"hostName\" type=\"token\"/>\n        <element\
    \ name=\"ipAddr\" type=\"sppfb:IPAddrType\"\n                 minOccurs=\"0\"\
    \ maxOccurs=\"unbounded\"/>\n        <element name=\"ext\" type=\"sppfb:ExtAnyType\"\
    \ minOccurs=\"0\"/>\n       </sequence>\n      </extension>\n     </complexContent>\n\
    \    </complexType>\n    <complexType name=\"URIType\">\n     <complexContent>\n\
    \      <extension base=\"sppfb:SedRecType\">\n       <sequence>\n        <element\
    \ name=\"ere\" type=\"token\" default=\"^(.*)$\"/>\n        <element name=\"uri\"\
    \ type=\"anyURI\"/>\n        <element name=\"ext\" type=\"sppfb:ExtAnyType\" minOccurs=\"\
    0\"/>\n       </sequence>\n      </extension>\n     </complexContent>\n    </complexType>\n\
    \    <complexType name=\"SedGrpOfferType\">\n     <complexContent>\n      <extension\
    \ base=\"sppfb:BasicObjType\">\n       <sequence>\n        <element name=\"sedGrpOfferKey\"\
    \ type=\"sppfb:SedGrpOfferKeyType\"/>\n        <element name=\"status\" type=\"\
    sppfb:SedGrpOfferStatusType\"/>\n        <element name=\"offerDateTime\" type=\"\
    dateTime\"/>\n        <element name=\"acceptDateTime\" type=\"dateTime\" minOccurs=\"\
    0\"/>\n        <element name=\"ext\" type=\"sppfb:ExtAnyType\" minOccurs=\"0\"\
    />\n       </sequence>\n      </extension>\n     </complexContent>\n    </complexType>\n\
    \    <complexType name=\"EgrRteType\">\n     <complexContent>\n      <extension\
    \ base=\"sppfb:BasicObjType\">\n       <sequence>\n        <element name=\"egrRteName\"\
    \ type=\"sppfb:ObjNameType\"/>\n        <element name=\"pref\" type=\"unsignedShort\"\
    />\n        <element name=\"regxRewriteRule\" type=\"sppfb:RegexParamType\"/>\n\
    \        <element name=\"ingrSedGrp\" type=\"sppfb:ObjKeyType\"\n            \
    \     minOccurs=\"0\" maxOccurs=\"unbounded\"/>\n        <element name=\"svcs\"\
    \ type=\"sppfb:SvcType\" minOccurs=\"0\"/>\n        <element name=\"ext\" type=\"\
    sppfb:ExtAnyType\" minOccurs=\"0\"/>\n       </sequence>\n      </extension>\n\
    \     </complexContent>\n    </complexType>\n    <annotation>\n     <documentation>\n\
    \      ---- Abstract Object and Element Type Definitions ----\n     </documentation>\n\
    \    </annotation>\n    <complexType name=\"BasicObjType\" abstract=\"true\">\n\
    \     <sequence>\n      <element name=\"rant\" type=\"sppfb:OrgIdType\"/>\n  \
    \    <element name=\"rar\" type=\"sppfb:OrgIdType\"/>\n      <element name=\"\
    cDate\" type=\"dateTime\" minOccurs=\"0\"/>\n      <element name=\"mDate\" type=\"\
    dateTime\" minOccurs=\"0\"/>\n      <element name=\"ext\" type=\"sppfb:ExtAnyType\"\
    \ minOccurs=\"0\"/>\n     </sequence>\n    </complexType>\n    <complexType name=\"\
    RegexParamType\">\n     <sequence>\n      <element name=\"ere\" type=\"sppfb:RegexType\"\
    \ default=\"^(.*)$\"/>\n      <element name=\"repl\" type=\"sppfb:ReplType\"/>\n\
    \     </sequence>\n    </complexType>\n    <complexType name=\"IPAddrType\">\n\
    \     <sequence>\n      <element name=\"addr\" type=\"sppfb:AddrStringType\"/>\n\
    \      <element name=\"ext\" type=\"sppfb:ExtAnyType\" minOccurs=\"0\"/>\n   \
    \  </sequence>\n     <attribute name=\"type\" type=\"sppfb:IPType\" default=\"\
    v4\"/>\n    </complexType>\n    <complexType name=\"SedRecRefType\">\n     <sequence>\n\
    \      <element name=\"sedKey\" type=\"sppfb:ObjKeyType\"/>\n      <element name=\"\
    priority\" type=\"unsignedShort\"/>\n      <element name=\"ext\" type=\"sppfb:ExtAnyType\"\
    \ minOccurs=\"0\"/>\n     </sequence>\n    </complexType>\n    <complexType name=\"\
    SourceIdentType\">\n     <sequence>\n      <element name=\"sourceIdentRegex\"\
    \ type=\"sppfb:RegexType\"/>\n      <element name=\"sourceIdentScheme\"\n    \
    \           type=\"sppfb:SourceIdentSchemeType\"/>\n      <element name=\"ext\"\
    \ type=\"sppfb:ExtAnyType\" minOccurs=\"0\"/>\n     </sequence>\n    </complexType>\n\
    \    <complexType name=\"CORInfoType\">\n     <sequence>\n      <element name=\"\
    corClaim\" type=\"boolean\" default=\"true\"/>\n      <element name=\"cor\" type=\"\
    boolean\" default=\"false\" minOccurs=\"0\"/>\n      <element name=\"corDate\"\
    \ type=\"dateTime\" minOccurs=\"0\"/>\n     </sequence>\n    </complexType>\n\
    \    <complexType name=\"SvcMenuType\">\n     <sequence>\n      <element name=\"\
    serverStatus\" type=\"sppfb:ServerStatusType\"/>\n      <element name=\"majMinVersion\"\
    \ type=\"token\" maxOccurs=\"unbounded\"/>\n      <element name=\"objURI\" type=\"\
    anyURI\" maxOccurs=\"unbounded\"/>\n      <element name=\"extURI\" type=\"anyURI\"\
    \n               minOccurs=\"0\" maxOccurs=\"unbounded\"/>\n     </sequence>\n\
    \    </complexType>\n    <complexType name=\"ExtAnyType\">\n     <sequence>\n\
    \      <any namespace=\"##other\" maxOccurs=\"unbounded\"/>\n     </sequence>\n\
    \    </complexType>\n    <simpleType name=\"FlagsType\">\n     <restriction base=\"\
    token\">\n      <length value=\"1\"/>\n      <pattern value=\"[A-Z]|[a-z]|[0-9]\"\
    />\n     </restriction>\n    </simpleType>\n    <simpleType name=\"SvcType\">\n\
    \     <restriction base=\"token\">\n      <minLength value=\"1\"/>\n     </restriction>\n\
    \    </simpleType>\n    <simpleType name=\"RegexType\">\n     <restriction base=\"\
    token\">\n      <minLength value=\"1\"/>\n     </restriction>\n    </simpleType>\n\
    \    <simpleType name=\"ReplType\">\n     <restriction base=\"token\">\n     \
    \ <minLength value=\"1\"/>\n      <maxLength value=\"255\"/>\n     </restriction>\n\
    \    </simpleType>\n    <simpleType name=\"OrgIdType\">\n     <restriction base=\"\
    token\"/>\n    </simpleType>\n    <simpleType name=\"ObjNameType\">\n     <restriction\
    \ base=\"token\">\n      <minLength value=\"3\"/>\n      <maxLength value=\"80\"\
    />\n     </restriction>\n    </simpleType>\n    <simpleType name=\"TransIdType\"\
    >\n     <restriction base=\"token\">\n      <minLength value=\"3\"/>\n      <maxLength\
    \ value=\"120\"/>\n     </restriction>\n    </simpleType>\n    <simpleType name=\"\
    MinorVerType\">\n     <restriction base=\"unsignedLong\"/>\n    </simpleType>\n\
    \    <simpleType name=\"AddrStringType\">\n     <restriction base=\"token\">\n\
    \      <minLength value=\"3\"/>\n      <maxLength value=\"45\"/>\n     </restriction>\n\
    \    </simpleType>\n    <simpleType name=\"IPType\">\n     <restriction base=\"\
    token\">\n      <enumeration value=\"v4\"/>\n      <enumeration value=\"v6\"/>\n\
    \     </restriction>\n    </simpleType>\n    <simpleType name=\"SourceIdentSchemeType\"\
    >\n     <restriction base=\"token\">\n      <enumeration value=\"uri\"/>\n   \
    \   <enumeration value=\"ip\"/>\n      <enumeration value=\"rootDomain\"/>\n \
    \    </restriction>\n    </simpleType>\n    <simpleType name=\"ServerStatusType\"\
    >\n     <restriction base=\"token\">\n      <enumeration value=\"inService\"/>\n\
    \      <enumeration value=\"outOfService\"/>\n     </restriction>\n    </simpleType>\n\
    \    <simpleType name=\"SedGrpOfferStatusType\">\n     <restriction base=\"token\"\
    >\n      <enumeration value=\"offered\"/>\n      <enumeration value=\"accepted\"\
    />\n     </restriction>\n    </simpleType>\n    <simpleType name=\"NumberValType\"\
    >\n     <restriction base=\"token\">\n      <maxLength value=\"20\"/>\n      <pattern\
    \ value=\"\\+?\\d\\d*\"/>\n     </restriction>\n    </simpleType>\n    <simpleType\
    \ name=\"NumberTypeEnum\">\n     <restriction base=\"token\">\n      <enumeration\
    \ value=\"TN\"/>\n      <enumeration value=\"TNPrefix\"/>\n      <enumeration\
    \ value=\"RN\"/>\n     </restriction>\n    </simpleType>\n    <simpleType name=\"\
    SedFunctionType\">\n     <restriction base=\"token\">\n      <enumeration value=\"\
    routing\"/>\n      <enumeration value=\"lookup\"/>\n     </restriction>\n    </simpleType>\n\
    \    <complexType name=\"NumberType\">\n     <sequence>\n      <element name=\"\
    value\" type=\"sppfb:NumberValType\"/>\n      <element name=\"type\" type=\"sppfb:NumberTypeEnum\"\
    />\n     </sequence>\n    </complexType>\n    <complexType name=\"NumberRangeType\"\
    >\n     <sequence>\n      <element name=\"startRange\" type=\"sppfb:NumberValType\"\
    />\n      <element name=\"endRange\" type=\"sppfb:NumberValType\"/>\n     </sequence>\n\
    \    </complexType>\n   </schema>\n"
- title: 13.  References
  contents:
  - '13.  References

    '
- title: 13.1.  Normative References
  contents:
  - "13.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use in\
    \ RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119,\n  \
    \            DOI 10.17487/RFC2119, March 1997,\n              <http://www.rfc-editor.org/info/rfc2119>.\n\
    \   [RFC2277]  Alvestrand, H., \"IETF Policy on Character Sets and\n         \
    \     Languages\", BCP 18, RFC 2277, DOI 10.17487/RFC2277,\n              January\
    \ 1998, <http://www.rfc-editor.org/info/rfc2277>.\n   [RFC3629]  Yergeau, F.,\
    \ \"UTF-8, a transformation format of ISO\n              10646\", STD 63, RFC\
    \ 3629, DOI 10.17487/RFC3629, November\n              2003, <http://www.rfc-editor.org/info/rfc3629>.\n\
    \   [RFC3688]  Mealling, M., \"The IETF XML Registry\", BCP 81, RFC 3688,\n  \
    \            DOI 10.17487/RFC3688, January 2004,\n              <http://www.rfc-editor.org/info/rfc3688>.\n\
    \   [RFC3986]  Berners-Lee, T., Fielding, R., and L. Masinter, \"Uniform\n   \
    \           Resource Identifier (URI): Generic Syntax\", STD 66,\n           \
    \   RFC 3986, DOI 10.17487/RFC3986, January 2005,\n              <http://www.rfc-editor.org/info/rfc3986>.\n\
    \   [RFC5226]  Narten, T. and H. Alvestrand, \"Guidelines for Writing an\n   \
    \           IANA Considerations Section in RFCs\", BCP 26, RFC 5226,\n       \
    \       DOI 10.17487/RFC5226, May 2008,\n              <http://www.rfc-editor.org/info/rfc5226>.\n\
    \   [RFC5234]  Crocker, D., Ed. and P. Overell, \"Augmented BNF for Syntax\n \
    \             Specifications: ABNF\", STD 68, RFC 5234,\n              DOI 10.17487/RFC5234,\
    \ January 2008,\n              <http://www.rfc-editor.org/info/rfc5234>.\n   [RFC7878]\
    \  Cartwright, K., Bhatia, V., Mule, J., and A. Mayrhofer,\n              \"Session\
    \ Peering Provisioning (SPP) Protocol over SOAP\",\n              RFC 7878, DOI\
    \ 10.17487/RFC7878, August 2016,\n              <http://www.rfc-editor.org/info/rfc7878>.\n\
    \   [W3C.REC-xml-20081126]\n              Bray, T., Paoli, J., Sperberg-McQueen,\
    \ C., Maler, E., and\n              F. Yergeau, \"Extensible Markup Language (XML)\
    \ 1.0 (Fifth\n              Edition)\", World Wide Web Consortium Recommendation\
    \ REC-\n              xml-20081126, November 2008,\n              <http://www.w3.org/TR/2008/REC-xml-20081126>.\n"
- title: 13.2.  Informative References
  contents:
  - "13.2.  Informative References\n   [RFC2069]  Franks, J., Hallam-Baker, P., Hostetler,\
    \ J., Leach, P.,\n              Luotonen, A., Sink, E., and L. Stewart, \"An Extension\
    \ to\n              HTTP : Digest Access Authentication\", RFC 2069,\n       \
    \       DOI 10.17487/RFC2069, January 1997,\n              <http://www.rfc-editor.org/info/rfc2069>.\n\
    \   [RFC2781]  Hoffman, P. and F. Yergeau, \"UTF-16, an encoding of ISO\n    \
    \          10646\", RFC 2781, DOI 10.17487/RFC2781, February 2000,\n         \
    \     <http://www.rfc-editor.org/info/rfc2781>.\n   [RFC2827]  Ferguson, P. and\
    \ D. Senie, \"Network Ingress Filtering:\n              Defeating Denial of Service\
    \ Attacks which employ IP Source\n              Address Spoofing\", BCP 38, RFC\
    \ 2827, DOI 10.17487/RFC2827,\n              May 2000, <http://www.rfc-editor.org/info/rfc2827>.\n\
    \   [RFC3261]  Rosenberg, J., Schulzrinne, H., Camarillo, G., Johnston,\n    \
    \          A., Peterson, J., Sparks, R., Handley, M., and E.\n              Schooler,\
    \ \"SIP: Session Initiation Protocol\", RFC 3261,\n              DOI 10.17487/RFC3261,\
    \ June 2002,\n              <http://www.rfc-editor.org/info/rfc3261>.\n   [RFC3403]\
    \  Mealling, M., \"Dynamic Delegation Discovery System (DDDS)\n              Part\
    \ Three: The Domain Name System (DNS) Database\",\n              RFC 3403, DOI\
    \ 10.17487/RFC3403, October 2002,\n              <http://www.rfc-editor.org/info/rfc3403>.\n\
    \   [RFC4725]  Mayrhofer, A. and B. Hoeneisen, \"ENUM Validation\n           \
    \   Architecture\", RFC 4725, DOI 10.17487/RFC4725, November\n              2006,\
    \ <http://www.rfc-editor.org/info/rfc4725>.\n   [RFC4732]  Handley, M., Ed., Rescorla,\
    \ E., Ed., and IAB, \"Internet\n              Denial-of-Service Considerations\"\
    , RFC 4732,\n              DOI 10.17487/RFC4732, December 2006,\n            \
    \  <http://www.rfc-editor.org/info/rfc4732>.\n   [RFC4949]  Shirey, R., \"Internet\
    \ Security Glossary, Version 2\",\n              FYI 36, RFC 4949, DOI 10.17487/RFC4949,\
    \ August 2007,\n              <http://www.rfc-editor.org/info/rfc4949>.\n   [RFC5067]\
    \  Lind, S. and P. Pfautz, \"Infrastructure ENUM\n              Requirements\"\
    , RFC 5067, DOI 10.17487/RFC5067, November\n              2007, <http://www.rfc-editor.org/info/rfc5067>.\n\
    \   [RFC5246]  Dierks, T. and E. Rescorla, \"The Transport Layer Security\n  \
    \            (TLS) Protocol Version 1.2\", RFC 5246,\n              DOI 10.17487/RFC5246,\
    \ August 2008,\n              <http://www.rfc-editor.org/info/rfc5246>.\n   [RFC5486]\
    \  Malas, D., Ed. and D. Meyer, Ed., \"Session Peering for\n              Multimedia\
    \ Interconnect (SPEERMINT) Terminology\",\n              RFC 5486, DOI 10.17487/RFC5486,\
    \ March 2009,\n              <http://www.rfc-editor.org/info/rfc5486>.\n   [RFC5646]\
    \  Phillips, A., Ed. and M. Davis, Ed., \"Tags for Identifying\n             \
    \ Languages\", BCP 47, RFC 5646, DOI 10.17487/RFC5646,\n              September\
    \ 2009, <http://www.rfc-editor.org/info/rfc5646>.\n   [RFC6116]  Bradner, S.,\
    \ Conroy, L., and K. Fujiwara, \"The E.164 to\n              Uniform Resource\
    \ Identifiers (URI) Dynamic Delegation\n              Discovery System (DDDS)\
    \ Application (ENUM)\", RFC 6116,\n              DOI 10.17487/RFC6116, March 2011,\n\
    \              <http://www.rfc-editor.org/info/rfc6116>.\n   [RFC6461]  Channabasappa,\
    \ S., Ed., \"Data for Reachability of Inter-\n              /Intra-NetworK SIP\
    \ (DRINKS) Use Cases and Protocol\n              Requirements\", RFC 6461, DOI\
    \ 10.17487/RFC6461, January\n              2012, <http://www.rfc-editor.org/info/rfc6461>.\n\
    \   [RFC7230]  Fielding, R., Ed. and J. Reschke, Ed., \"Hypertext Transfer\n \
    \             Protocol (HTTP/1.1): Message Syntax and Routing\",\n           \
    \   RFC 7230, DOI 10.17487/RFC7230, June 2014,\n              <http://www.rfc-editor.org/info/rfc7230>.\n\
    \   [SOAPREF]  Gudgin, M., Hadley, M., Moreau, J., and H. Nielsen, \"SOAP\n  \
    \            Version 1.2 Part 1: Messaging Framework\", W3C REC REC-\n       \
    \       SOAP12-part1-20030624, June 2003,\n              <http://www.w3.org/TR/soap12-part1/>.\n\
    \   [Unicode6.1]\n              The Unicode Consortium, \"The Unicode Standard,\
    \ Version\n              6.1.0\", (Mountain View, CA: The Unicode Consortium,\n\
    \              2012. ISBN 978-1-936213-02-3),\n              <http://unicode.org/versions/Unicode6.1.0/>.\n"
- title: Acknowledgements
  contents:
  - "Acknowledgements\n   This document is a result of various discussions held in\
    \ the DRINKS\n   working group and within the DRINKS protocol design team, with\n\
    \   contributions from the following individuals, in alphabetical order:\n   Syed\
    \ Ali, Jeremy Barkan, Vikas Bhatia, Sumanth Channabasappa, Lisa\n   Dusseault,\
    \ Deborah A.  Guyton, Otmar Lendl, Manjul Maharishi, Mickael\n   Marrache, Alexander\
    \ Mayrhofer, Samuel Melloul, David Schwartz, and\n   Richard Shockey.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Kenneth Cartwright\n   TNS\n   1939 Roland Clarke Place\n\
    \   Reston, VA  20191\n   United States\n   Email: kcartwright@tnsi.com\n   Vikas\
    \ Bhatia\n   TNS\n   1939 Roland Clarke Place\n   Reston, VA  20191\n   United\
    \ States\n   Email: vbhatia@tnsi.com\n   Syed Wasim Ali\n   NeuStar\n   46000\
    \ Center Oak Plaza\n   Sterling, VA  20166\n   United States\n   Email: syed.ali@neustar.biz\n\
    \   David Schwartz\n   XConnect\n   316 Regents Park Road\n   London  N3 2XJ\n\
    \   United Kingdom\n   Email: dschwartz@xconnect.net\n"
