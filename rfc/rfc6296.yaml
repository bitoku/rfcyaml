- title: __initial_text__
  contents:
  - '                IPv6-to-IPv6 Network Prefix Translation

    '
- title: Abstract
  contents:
  - "Abstract\n   This document describes a stateless, transport-agnostic IPv6-to-IPv6\n\
    \   Network Prefix Translation (NPTv6) function that provides the\n   address-independence\
    \ benefit associated with IPv4-to-IPv4 NAT\n   (NAPT44) and provides a 1:1 relationship\
    \ between addresses in the\n   \"inside\" and \"outside\" prefixes, preserving\
    \ end-to-end reachability\n   at the network layer.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document is not an Internet Standards Track specification;\
    \ it is\n   published for examination, experimental implementation, and\n   evaluation.\n\
    \   This document defines an Experimental Protocol for the Internet\n   community.\
    \  This document is a product of the Internet Engineering\n   Task Force (IETF).\
    \  It represents the consensus of the IETF\n   community.  It has received public\
    \ review and has been approved for\n   publication by the Internet Engineering\
    \ Steering Group (IESG).  Not\n   all documents approved by the IESG are a candidate\
    \ for any level of\n   Internet Standard; see Section 2 of RFC 5741.\n   Information\
    \ about the current status of this document, any errata,\n   and how to provide\
    \ feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc6296.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2011 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction . . . . . . . . . . . . . . . . . . .\
    \ . . . . . .  3\n     1.1.  What is Address Independence?  . . . . . . . . .\
    \ . . . . .  4\n     1.2.  NPTv6 Applicability  . . . . . . . . . . . . . . .\
    \ . . . .  5\n     1.3.  Requirements Terminology . . . . . . . . . . . . . .\
    \ . . .  7\n   2.  NPTv6 Overview . . . . . . . . . . . . . . . . . . . . . .\
    \ . .  7\n     2.1.  NPTv6: The Simplest Case . . . . . . . . . . . . . . . .\
    \ .  7\n     2.2.  NPTv6 between Peer Networks  . . . . . . . . . . . . . . .\
    \  8\n     2.3.  NPTv6 Redundancy and Load Sharing  . . . . . . . . . . . .  9\n\
    \     2.4.  NPTv6 Multihoming  . . . . . . . . . . . . . . . . . . . .  9\n  \
    \   2.5.  Mapping with No Per-Flow State . . . . . . . . . . . . . . 10\n    \
    \ 2.6.  Checksum-Neutral Mapping . . . . . . . . . . . . . . . . . 10\n   3. \
    \ NPTv6 Algorithmic Specification  . . . . . . . . . . . . . . . 11\n     3.1.\
    \  NPTv6 Configuration Calculations . . . . . . . . . . . . . 11\n     3.2.  NPTv6\
    \ Translation, Internal Network to External Network  . 12\n     3.3.  NPTv6 Translation,\
    \ External Network to Internal Network  . 12\n     3.4.  NPTv6 with a /48 or Shorter\
    \ Prefix . . . . . . . . . . . . 12\n     3.5.  NPTv6 with a /49 or Longer Prefix\
    \  . . . . . . . . . . . . 13\n     3.6.  /48 Prefix Mapping Example . . . . .\
    \ . . . . . . . . . . . 13\n     3.7.  Address Mapping for Longer Prefixes  .\
    \ . . . . . . . . . . 14\n   4.  Implications of Network Address Translator Behavioral\n\
    \       Requirements . . . . . . . . . . . . . . . . . . . . . . . . . 15\n  \
    \   4.1.  Prefix Configuration and Generation  . . . . . . . . . . . 15\n    \
    \ 4.2.  Subnet Numbering . . . . . . . . . . . . . . . . . . . . . 15\n     4.3.\
    \  NAT Behavioral Requirements  . . . . . . . . . . . . . . . 15\n   5.  Implications\
    \ for Applications  . . . . . . . . . . . . . . . . 16\n     5.1.  Recommendation\
    \ for Network Planners Considering Use of\n           NPTv6 Translation  . . .\
    \ . . . . . . . . . . . . . . . . . 17\n     5.2.  Recommendations for Application\
    \ Writers  . . . . . . . . . 18\n     5.3.  Recommendation for Future Work . .\
    \ . . . . . . . . . . . . 18\n   6.  A Note on Port Mapping . . . . . . . . .\
    \ . . . . . . . . . . . 18\n   7.  Security Considerations  . . . . . . . . .\
    \ . . . . . . . . . . 19\n   8.  Acknowledgements . . . . . . . . . . . . . .\
    \ . . . . . . . . . 19\n   9.  References . . . . . . . . . . . . . . . . . .\
    \ . . . . . . . . 20\n     9.1.  Normative References . . . . . . . . . . . .\
    \ . . . . . . . 20\n     9.2.  Informative References . . . . . . . . . . . .\
    \ . . . . . . 20\n   Appendix A.  Why GSE?  . . . . . . . . . . . . . . . . .\
    \ . . . . . 23\n   Appendix B.  Verification Code . . . . . . . . . . . . . .\
    \ . . . . 25\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   This document describes a stateless IPv6-to-IPv6 Network\
    \ Prefix\n   Translation (NPTv6) function, designed to provide address\n   independence\
    \ to the edge network.  It is transport-agnostic with\n   respect to transports\
    \ that do not checksum the IP header, such as\n   SCTP, and to transports that\
    \ use the TCP/UDP/DCCP (Datagram\n   Congestion Control Protocol) pseudo-header\
    \ and checksum [RFC1071].\n   For reasons discussed in [RFC2993] and Section 5,\
    \ the IETF does not\n   recommend the use of Network Address Translation technology\
    \ for IPv6.\n   Where translation is implemented, however, this specification\n\
    \   provides a mechanism that has fewer architectural problems than\n   merely\
    \ implementing a traditional stateful Network Address Translator\n   in an IPv6\
    \ environment.  It also provides a useful alternative to the\n   complexities\
    \ and costs imposed by multihoming using provider-\n   independent addressing\
    \ and the routing and network management issues\n   of overlaid ISP address space.\
    \  Some problems remain, however.  The\n   reader should consider the alternatives\
    \ suggested in [RFC4864] and\n   the considerations of [RFC5902] for improved\
    \ approaches.\n   The stateless approach described in this document has several\n\
    \   ramifications:\n   o  Any security benefit that NAPT44 might offer is not\
    \ present in\n      NPTv6, necessitating the use of a firewall to obtain those\n\
    \      benefits if desired.  An example of such a firewall is described\n    \
    \  in [RFC6092].\n   o  End-to-end reachability is preserved, although the address\
    \ used\n      \"inside\" the edge network differs from the address used \"outside\"\
    \n      the edge network.  This has implications for application referrals\n \
    \     and other uses of Internet layer addresses.\n   o  If there are multiple\
    \ identically configured prefix translators\n      between two networks, there\
    \ is no need for them to exchange\n      dynamic state, as there is no dynamic\
    \ state -- the algorithmic\n      translation will be identical across each of\
    \ them.  The network\n      can therefore asymmetrically route, load share, and\
    \ fail-over\n      among them without issue.\n   o  Since translation is 1:1 at\
    \ the network layer, there is no need to\n      modify port numbers or other transport\
    \ parameters.\n   o  TCP sessions that authenticate peers using the TCP Authentication\n\
    \      Option [RFC5925] cannot have their addresses translated, as the\n     \
    \ addresses are used in the calculation of the Message\n      Authentication Code.\
    \  This consideration applies in general to any\n      UNilateral Self-Address\
    \ Fixing (UNSAF) [RFC3424] Protocol, which\n      the IAB recommends against the\
    \ deployment of in an environment\n      that changes Internet addresses.\n  \
    \ o  Applications using the Internet Key Exchange Protocol Version 2\n      (IKEv2)\
    \ [RFC5996] should, at least in theory, detect the presence\n      of the translator;\
    \ while no NAT traversal solution is required,\n      [RFC5996] would require\
    \ such sessions to use UDP.\n"
- title: 1.1.  What is Address Independence?
  contents:
  - "1.1.  What is Address Independence?\n   For the purposes of this document, IPv6\
    \ address independence consists\n   of the following set of properties:\n   From\
    \ the perspective of the edge network:\n      *  The IPv6 addresses used inside\
    \ the local network (for\n         interfaces, access lists, and logs) do not\
    \ need to be\n         renumbered if the global prefix(es) assigned for use by\
    \ the\n         edge network are changed.\n      *  The IPv6 addresses used inside\
    \ the edge network (for\n         interfaces, access lists, and logs) or within\
    \ other upstream\n         networks (such as when multihoming) do not need to\
    \ be\n         renumbered when a site adds, drops, or changes upstream\n     \
    \    networks.\n      *  It is not necessary for an administration to convince\
    \ an\n         upstream network to route its internal IPv6 prefixes or for it\n\
    \         to advertise prefixes derived from other upstream networks into\n  \
    \       it.\n      *  Unless it wants to optimize routing between multiple upstream\n\
    \         networks in the process of multihoming, there is no need for a\n   \
    \      BGP exchange with the upstream network.\n   From the perspective of the\
    \ upstream network:\n      *  IPv6 addresses used by the edge network are guaranteed\
    \ to have\n         a provider-allocated prefix, eliminating the need and concern\n\
    \         for BCP 38 [RFC2827] ingress filtering and the advertisement of\n  \
    \       customer-specific prefixes.\n   Thus, address independence has ramifications\
    \ for the edge network,\n   networks it directly connects with (especially its\
    \ upstream\n   networks), and the Internet as a whole.  The desire for address\n\
    \   independence has been a primary driver for IPv4 NAT deployment in\n   medium-\
    \ to large-sized enterprise networks, including NAT deployments\n   in enterprises\
    \ that have plenty of IPv4 provider-independent address\n   space (from IPv4 \"\
    swamp space\").  It has also been a driver for edge\n   networks to become members\
    \ of Regional Internet Registry (RIR)\n   communities, seeking to obtain BGP Autonomous\
    \ System Numbers and\n   provider-independent prefixes, and as a result has been\
    \ one of the\n   drivers of the explosion of the IPv4 route table.  Service providers\n\
    \   have stated that the lack of address independence from their\n   customers\
    \ has been a negative incentive to deployment, due to the\n   impact of customer\
    \ routing expected in their networks.\n   The Local Network Protection [RFC4864]\
    \ document discusses a related\n   concept called \"Address Autonomy\" as a benefit\
    \ of NAPT44.  [RFC4864]\n   indicates that address autonomy can be achieved by\
    \ the simultaneous\n   use of global addresses on all nodes within a site that\
    \ need external\n   connectivity and Unique Local Addresses (ULAs) [RFC4193] for\
    \ all\n   internal communication.  However, this solution fails to meet the\n\
    \   requirement for address independence, because if an ISP renumbering\n   event\
    \ occurs, all of the hosts, routers, DHCP servers, Access Control\n   Lists (ACLs),\
    \ firewalls, and other internal systems that are\n   configured with global addresses\
    \ from the ISP will need to be\n   renumbered before global connectivity is fully\
    \ restored.\n   The use of IPv6 provider-independent (PI) addresses has also been\n\
    \   suggested as a means to fulfill the address-independence requirement.\n  \
    \ However, this solution requires that an enterprise qualify to receive\n   a\
    \ PI assignment and persuade its ISP to install specific routes for\n   the enterprise's\
    \ PI addresses.  There are a number of practical\n   issues with this approach,\
    \ especially if there is a desire to route\n   to a number of geographically and\
    \ topologically diverse sites, which\n   can sometimes involve coordinating with\
    \ several ISPs to route\n   portions of a single PI prefix.  These problems have\
    \ caused numerous\n   enterprises with plenty of IPv4 swamp space to choose to\
    \ use IPv4 NAT\n   for part, or substantially all, of their internal network instead\
    \ of\n   using their provider-independent address space.\n"
- title: 1.2.  NPTv6 Applicability
  contents:
  - "1.2.  NPTv6 Applicability\n   NPTv6 provides a simple and compelling solution\
    \ to meet the address-\n   independence requirement in IPv6.  The address-independence\
    \ benefit\n   stems directly from the translation function of the network prefix\n\
    \   translator.  To avoid as many of the issues associated with NAPT44 as\n  \
    \ possible, NPTv6 is defined to include a two-way, checksum-neutral,\n   algorithmic\
    \ translation function, and nothing else.\n   The fact that NPTv6 does not map\
    \ ports and is checksum-neutral avoids\n   the need for an NPTv6 Translator to\
    \ rewrite transport layer headers.\n   This makes it feasible to deploy new or\
    \ improved transport layer\n   protocols without upgrading NPTv6 Translators.\
    \  Similarly, since\n   NPTv6 does not rewrite transport layer headers, NPTv6\
    \ will not\n   interfere with encryption of the full IP payload in many cases.\n\
    \   The default NPTv6 address-mapping mechanism is purely algorithmic, so\n  \
    \ NPTv6 translators do not need to maintain per-node or per-connection\n   state,\
    \ allowing deployment of more robust and adaptive networks than\n   can be deployed\
    \ using NAPT44.  Since the default NPTv6 mapping can be\n   performed in either\
    \ direction, it does not interfere with inbound\n   connection establishment,\
    \ thus allowing internal nodes to participate\n   in direct Peer-to-Peer applications\
    \ without the application layer\n   overhead one finds in many IPv4 Peer-to-Peer\
    \ applications.\n   Although NPTv6 compares favorably to NAPT44 in several ways,\
    \ it does\n   not eliminate all of the architectural problems associated with\
    \ IPv4\n   NAT, as described in [RFC2993].  NPTv6 involves modifying IP headers\n\
    \   in transit, so it is not compatible with security mechanisms, such as\n  \
    \ the IPsec Authentication Header, that provide integrity protection\n   for the\
    \ IP header.  NPTv6 may interfere with the use of application\n   protocols that\
    \ transmit IP addresses in the application-specific\n   portion of the IP datagram.\
    \  These applications currently require\n   Application Layer Gateways (ALGs)\
    \ to work correctly through NAPT44\n   devices, and similar ALGs may be required\
    \ for these applications to\n   work through NPTv6 Translators.  The use of separate\
    \ internal and\n   external prefixes creates complexity for DNS deployment, due\
    \ to the\n   desire for internal nodes to communicate with other internal nodes\n\
    \   using internal addresses, while external nodes need to obtain\n   external\
    \ addresses to communicate with the same nodes.  This\n   frequently results in\
    \ the deployment of \"split DNS\", which may add\n   complexity to network configuration.\n\
    \   The choice of address within the edge network bears consideration.\n   One\
    \ could use a ULA, which maximizes address independence.  That\n   could also\
    \ be considered a misuse of the ULA; if the expectation is\n   that a ULA prevents\
    \ access to a system from outside the range of the\n   ULA, NPTv6 overrides that.\
    \  On the other hand, the administration is\n   aware that it has made that choice\
    \ and could deploy a second ULA for\n   the purpose of privacy if it desired;\
    \ the only prefix that will be\n   translated is one that has an NPTv6 Translator\
    \ configured to\n   translate to or from it.  Also, using any other global-scope\
    \ address\n   format makes one either obtain a PI prefix or be at the mercy of\
    \ the\n   agency from which it was allocated.\n   There are significant technical\
    \ impacts associated with the\n   deployment of any prefix translation mechanism,\
    \ including NPTv6, and\n   we strongly encourage anyone who is considering the\
    \ implementation or\n   deployment of NPTv6 to read [RFC4864] and [RFC5902], and\
    \ to carefully\n   consider the alternatives described in that document, some\
    \ of which\n   may cause fewer problems than NPTv6.\n"
- title: 1.3.  Requirements Terminology
  contents:
  - "1.3.  Requirements Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\"\
    , \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"\
    MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described\
    \ in RFC 2119 [RFC2119].\n"
- title: 2.  NPTv6 Overview
  contents:
  - "2.  NPTv6 Overview\n   NPTv6 may be implemented in an IPv6 router to map one\
    \ IPv6 address\n   prefix to another IPv6 prefix as each IPv6 datagram transits\
    \ the\n   router.  A router that implements an NPTv6 prefix translation\n   function\
    \ is referred to as an NPTv6 Translator.\n"
- title: '2.1.  NPTv6: The Simplest Case'
  contents:
  - "2.1.  NPTv6: The Simplest Case\n   In its simplest form, an NPTv6 Translator\
    \ interconnects two network\n   links, one of which is an \"internal\" network\
    \ link attached to a leaf\n   network within a single administrative domain and\
    \ the other of which\n   is an \"external\" network with connectivity to the global\
    \ Internet.\n   All of the hosts on the internal network will use addresses from\
    \ a\n   single, locally routed prefix, and those addresses will be translated\n\
    \   to/from addresses in a globally routable prefix as IP datagrams\n   transit\
    \ the NPTv6 Translator.  The lengths of these two prefixes will\n   be functionally\
    \ the same; if they differ, the longer of the two will\n   limit the ability to\
    \ use subnets in the shorter.\n               External Network:  Prefix = 2001:0DB8:0001:/48\n\
    \                   --------------------------------------\n                 \
    \                    |\n                                     |\n             \
    \                 +-------------+\n                              |     NPTv6 \
    \  |\n                              |  Translator |\n                        \
    \      +-------------+\n                                     |\n             \
    \                        |\n                   --------------------------------------\n\
    \               Internal Network:  Prefix = FD01:0203:0405:/48\n             \
    \          Figure 1: A Simple Translator\n   Figure 1 shows an NPTv6 Translator\
    \ attached to two networks.  In this\n   example, the internal network uses IPv6\
    \ Unique Local Addresses (ULAs)\n   [RFC4193] to represent the internal IPv6 nodes,\
    \ and the external\n   network uses globally routable IPv6 addresses to represent\
    \ the same\n   nodes.\n   When an NPTv6 Translator forwards datagrams in the \"\
    outbound\"\n   direction, from the internal network to the external network, NPTv6\n\
    \   overwrites the IPv6 source prefix (in the IPv6 header) with a\n   corresponding\
    \ external prefix.  When datagrams are forwarded in the\n   \"inbound\" direction,\
    \ from the external network to the internal\n   network, the IPv6 destination\
    \ prefix is overwritten with a\n   corresponding internal prefix.  Using the prefixes\
    \ shown in the\n   diagram above, as an IP datagram passes through the NPTv6 Translator\n\
    \   in the outbound direction, the source prefix (FD01:0203:0405:/48)\n   will\
    \ be overwritten with the external prefix (2001:0DB8:0001:/48).\n   In an inbound\
    \ datagram, the destination prefix (2001:0DB8:0001:/48)\n   will be overwritten\
    \ with the internal prefix (FD01:0203:0405:/48).\n   In both cases, it is the\
    \ local IPv6 prefix that is overwritten; the\n   remote IPv6 prefix remains unchanged.\
    \  Nodes on the internal network\n   are said to be \"behind\" the NPTv6 Translator.\n"
- title: 2.2.  NPTv6 between Peer Networks
  contents:
  - "2.2.  NPTv6 between Peer Networks\n   NPTv6 can also be used between two private\
    \ networks.  In these cases,\n   both networks may use ULA prefixes, with each\
    \ subnet in one network\n   mapped into a corresponding subnet in the other network,\
    \ and vice\n   versa.  Or, each network may use ULA prefixes for internal addressing\n\
    \   and global unicast addresses on the other network.\n                  Internal\
    \ Prefix = FD01:4444:5555:/48\n                  --------------------------------------\n\
    \                       V            |      External Prefix\n                \
    \       V            |      2001:0DB8:6666:/48\n                       V     \
    \   +---------+      ^\n                       V        |  NPTv6  |      ^\n \
    \                      V        |  Device |      ^\n                       V \
    \       +---------+      ^\n              External Prefix       |            ^\n\
    \              2001:0DB8:0001:/48    |            ^\n                  --------------------------------------\n\
    \                  Internal Prefix = FD01:0203:0405:/48\n               Figure\
    \ 2: Flow of Information in Translation\n"
- title: 2.3.  NPTv6 Redundancy and Load Sharing
  contents:
  - "2.3.  NPTv6 Redundancy and Load Sharing\n   In some cases, more than one NPTv6\
    \ Translator may be attached to a\n   network, as shown in Figure 3.  In such\
    \ cases, NPTv6 Translators are\n   configured with the same internal and external\
    \ prefixes.  Since there\n   is only one translation, even though there are multiple\
    \ translators,\n   they map only one external address (prefix and Interface Identifier\n\
    \   (IID)) to the internal address.\n               External Network:  Prefix\
    \ = 2001:0DB8:0001:/48\n                   --------------------------------------\n\
    \                          |                      |\n                        \
    \  |                      |\n                   +-------------+        +-------------+\n\
    \                   |  NPTv6      |        |  NPTv6      |\n                 \
    \  |  Translator |        |  Translator |\n                   |   #1        |\
    \        |   #2        |\n                   +-------------+        +-------------+\n\
    \                          |                      |\n                        \
    \  |                      |\n                   --------------------------------------\n\
    \               Internal Network:  Prefix = FD01:0203:0405:/48\n             \
    \         Figure 3: Parallel Translators\n"
- title: 2.4.  NPTv6 Multihoming
  contents:
  - "2.4.  NPTv6 Multihoming\n            External Network #1:          External Network\
    \ #2:\n         Prefix = 2001:0DB8:0001:/48    Prefix = 2001:0DB8:5555:/48\n \
    \        ---------------------------    --------------------------\n         \
    \                |                      |\n                         |        \
    \              |\n                  +-------------+        +-------------+\n \
    \                 |  NPTv6      |        |  NPTv6      |\n                  |\
    \  Translator |        |  Translator |\n                  |   #1        |    \
    \    |   #2        |\n                  +-------------+        +-------------+\n\
    \                         |                      |\n                         |\
    \                      |\n                  --------------------------------------\n\
    \              Internal Network:  Prefix = FD01:0203:0405:/48\n      Figure 4:\
    \ Parallel Translators with Different Upstream Networks\n   When multihoming,\
    \ NPTv6 Translators are attached to an internal\n   network, as shown in Figure\
    \ 4, but are connected to different\n   external networks.  In such cases, NPTv6\
    \ Translators are configured\n   with the same internal prefix but different external\
    \ prefixes.  Since\n   there are multiple translations, they map multiple external\
    \ addresses\n   (prefix and IID) to the common internal address.  A system within\
    \ the\n   edge network is unable to determine which external address it is\n \
    \  using apart from services such as Session Traversal Utilities for NAT\n   (STUN)\
    \ [RFC5389].\n   Multihoming in this sense has one negative feature as compared\
    \ with\n   multihoming with a provider-independent address: when routes change\n\
    \   between NPTv6 Translators, the translated prefix can change since the\n  \
    \ upstream network changes.  This causes sessions and referrals\n   dependent\
    \ on it to fail as well.  This is not expected to be a major\n   issue, however,\
    \ in networks where routing is generally stable.\n"
- title: 2.5.  Mapping with No Per-Flow State
  contents:
  - "2.5.  Mapping with No Per-Flow State\n   When NPTv6 is used as described in this\
    \ document, no per-node or per-\n   flow state is maintained in the NPTv6 Translator.\
    \  Both inbound and\n   outbound datagrams are translated algorithmically, using\
    \ only\n   information found in the IPv6 header.  Due to this property, NPTv6's\n\
    \   two-way, algorithmic address mapping can support both outbound and\n   inbound\
    \ connection establishment without the need for maintenance of\n   mapping state\
    \ or for state-priming or rendezvous mechanisms.  This is\n   a significant improvement\
    \ over NAPT44 devices, but it also has\n   significant security implications,\
    \ which are described in Section 7.\n"
- title: 2.6.  Checksum-Neutral Mapping
  contents:
  - "2.6.  Checksum-Neutral Mapping\n   When a change is made to one of the IP header\
    \ fields in the IPv6\n   pseudo-header checksum (such as one of the IP addresses),\
    \ the\n   checksum field in the transport layer header may become invalid.\n \
    \  Fortunately, an incremental change in the area covered by the\n   Internet\
    \ standard checksum [RFC1071] will result in a well-defined\n   change to the\
    \ checksum value [RFC1624].  So, a checksum change caused\n   by modifying part\
    \ of the area covered by the checksum can be\n   corrected by making a complementary\
    \ change to a different 16-bit\n   field covered by the same checksum.\n   The\
    \ NPTv6 mapping mechanisms described in this document are checksum-\n   neutral,\
    \ which means that they result in IP headers that will\n   generate the same IPv6\
    \ pseudo-header checksum when the checksum is\n   calculated using the standard\
    \ Internet checksum algorithm [RFC1071].\n   Any changes that are made during\
    \ translation of the IPv6 prefix are\n   offset by changes to other parts of the\
    \ IPv6 address.  This results\n   in transport layers that use the Internet checksum\
    \ (such as TCP and\n   UDP) calculating the same IPv6 pseudo-header checksum for\
    \ both the\n   internal and external forms of the same datagram, which avoids\
    \ the\n   need for the NPTv6 Translator to modify those transport layer headers\n\
    \   to correct the checksum value.\n   The outgoing checksum correction is achieved\
    \ by making a change to a\n   16-bit section of the source address that is not\
    \ used for routing in\n   the external network.  Due to the nature of checksum\
    \ arithmetic, when\n   the corresponding correction is applied to the same bits\
    \ of\n   destination address of the inbound packet, the Destination Address\n\
    \   (DA) is returned to the correct internal value.\n   As noted in Section 4.2,\
    \ this mapping results in an edge network\n   using a /48 external prefix to be\
    \ unable to use subnet 0xFFFF.\n"
- title: 3.  NPTv6 Algorithmic Specification
  contents:
  - "3.  NPTv6 Algorithmic Specification\n   The [RFC4291] IPv6 Address is reproduced\
    \ for clarity in Figure 5.\n      0    15 16   31 32   47 48   63 64   79 80 \
    \  95 96  111 112  127\n     +-------+-------+-------+-------+-------+-------+-------+-------+\n\
    \     |     Routing Prefix    | Subnet|   Interface Identifier (IID)  |\n    \
    \ +-------+-------+-------+-------+-------+-------+-------+-------+\n        \
    \    Figure 5: Enumeration of the IPv6 Address [RFC4291]\n"
- title: 3.1.  NPTv6 Configuration Calculations
  contents:
  - "3.1.  NPTv6 Configuration Calculations\n   When an NPTv6 Translation function\
    \ is configured, it is configured\n   with\n   o  one or more \"internal\" interfaces\
    \ with their \"internal\" routing\n      domain prefixes, and\n   o  one or more\
    \ \"external\" interfaces with their \"external\" routing\n      domain prefixes.\n\
    \   In the simple case, there is one of each.  If a single router\n   provides\
    \ NPTv6 translation services between a multiplicity of domains\n   (as might be\
    \ true when multihoming), each internal/external pair must\n   be thought of as\
    \ a separate NPTv6 Translator from the perspective of\n   this specification.\n\
    \   When an NPTv6 Translator is configured, the translation function\n   first\
    \ ensures that the internal and external prefixes are the same\n   length, extending\
    \ the shorter of the two with zeroes if necessary.\n   These two prefixes will\
    \ be used in the prefix translation function\n   described in Sections 3.2 and\
    \ 3.3.\n   They are then zero-extended to /64 for the purposes of a calculation.\n\
    \   The translation function calculates the one's complement sum of the\n   16-bit\
    \ words of the /64 external prefix and the /64 internal prefix.\n   It then calculates\
    \ the difference between these values: internal\n   minus external.  This value,\
    \ called the \"adjustment\", is effectively\n   constant for the lifetime of the\
    \ NPTv6 Translator configuration and\n   is used in per-datagram processing.\n"
- title: 3.2.  NPTv6 Translation, Internal Network to External Network
  contents:
  - "3.2.  NPTv6 Translation, Internal Network to External Network\n   When a datagram\
    \ passes through the NPTv6 Translator from an internal\n   to an external network,\
    \ its IPv6 Source Address is either changed in\n   two ways or results in the\
    \ datagram being discarded:\n   o  If the internal subnet number has no mapping,\
    \ such as being 0xFFFF\n      or simply not mapped, discard the datagram.  This\
    \ SHOULD result in\n      an ICMP Destination Unreachable.\n   o  The internal\
    \ prefix is overwritten with the external prefix, in\n      effect subtracting\
    \ the difference between the two checksums (the\n      adjustment) from the pseudo-header's\
    \ checksum, and\n   o  A 16-bit word of the address has the adjustment added to\
    \ it using\n      one's complement arithmetic.  If the result is 0xFFFF, it is\n\
    \      overwritten as zero.  The choice of word is as specified in\n      Sections\
    \ 3.4 or 3.5 as appropriate.\n"
- title: 3.3.  NPTv6 Translation, External Network to Internal Network
  contents:
  - "3.3.  NPTv6 Translation, External Network to Internal Network\n   When a datagram\
    \ passes through the NPTv6 Translator from an external\n   to an internal network,\
    \ its IPv6 Destination Address is changed in\n   two ways:\n   o  The external\
    \ prefix is overwritten with the internal prefix, in\n      effect adding the\
    \ difference between the two checksums (the\n      adjustment) to the pseudo-header's\
    \ checksum, and\n   o  A 16-bit word of the address has the adjustment subtracted\
    \ from it\n      (bitwise inverted and added to it) using one's complement\n \
    \     arithmetic.  If the result is 0xFFFF, it is overwritten as zero.\n     \
    \ The choice of word is as specified in Section 3.4 or Section 3.5\n      as appropriate.\n"
- title: 3.4.  NPTv6 with a /48 or Shorter Prefix
  contents:
  - "3.4.  NPTv6 with a /48 or Shorter Prefix\n   When an NPTv6 Translator is configured\
    \ with internal and external\n   prefixes that are 48 bits in length (a /48) or\
    \ shorter, the\n   adjustment MUST be added to or subtracted from bits 48..63\
    \ of the\n   address.\n   This mapping results in no modification of the Interface\
    \ Identifier\n   (IID), which is held in the lower half of the IPv6 address, so\
    \ it\n   will not interfere with future protocols that may use unique IIDs for\n\
    \   node identification.\n   NPTv6 Translator implementations MUST implement the\
    \ /48 mapping.\n"
- title: 3.5.  NPTv6 with a /49 or Longer Prefix
  contents:
  - "3.5.  NPTv6 with a /49 or Longer Prefix\n   When an NPTv6 Translator is configured\
    \ with internal and external\n   prefixes that are longer than 48 bits in length\
    \ (such as a /52, /56,\n   or /60), the adjustment must be added to or subtracted\
    \ from one of\n   the words in bits 64..79, 80..95, 96..111, or 112..127 of the\n\
    \   address.  While the choice of word is immaterial as long as it is\n   consistent,\
    \ these words MUST be inspected in that sequence and the\n   first that is not\
    \ initially 0xFFFF chosen, for consistency's sake.\n   NPTv6 Translator implementations\
    \ SHOULD implement the mapping for\n   longer prefixes.\n"
- title: 3.6.  /48 Prefix Mapping Example
  contents:
  - "3.6.  /48 Prefix Mapping Example\n   For the network shown in Figure 1, the Internal\
    \ Prefix is FD01:0203:\n   0405:/48, and the External Prefix is 2001:0DB8:0001:/48.\n\
    \   If a node with internal address FD01:0203:0405:0001::1234 sends an\n   outbound\
    \ datagram through the NPTv6 Translator, the resulting\n   external address will\
    \ be 2001:0DB8:0001:D550::1234.  The resulting\n   address is obtained by calculating\
    \ the checksum of both the internal\n   and external 48-bit prefixes, subtracting\
    \ the internal prefix from\n   the external prefix using one's complement arithmetic\
    \ to calculate\n   the \"adjustment\", and adding the adjustment to the 16-bit\
    \ subnet\n   field (in this case, 0x0001).\n   To show the work:\n   The one's\
    \ complement checksum of FD01:0203:0405 is 0xFCF5.  The one's\n   complement checksum\
    \ of 2001:0DB8:0001 is 0xD245.  Using one's\n   complement arithmetic, 0xD245\
    \ - 0xFCF5 = 0xD54F.  The subnet in the\n   original datagram is 0x0001.  Using\
    \ one's complement arithmetic,\n   0x0001 + 0xD54F = 0xD550.  Since 0xD550 !=\
    \ 0xFFFF, it is not changed\n   to 0x0000.\n   So, the value 0xD550 is written\
    \ in the 16-bit subnet area, resulting\n   in a mapped external address of 2001:0DB8:0001:D550::1234.\n\
    \   When a response datagram is received, it will contain the destination\n  \
    \ address 2001:0DB8:0001:D550::0001, which will be mapped back to FD01:\n   0203:0405:0001::1234\
    \ using the inverse mapping algorithm.\n   In this case, the difference between\
    \ the two prefixes will be\n   calculated as follows:\n   Using one's complement\
    \ arithmetic, 0xFCF5 - 0xD245 = 0x2AB0.  The\n   subnet in the original datagram\
    \ = 0xD550.  Using one's complement\n   arithmetic, 0xD550 + 0x2AB0 = 0x0001.\
    \  Since 0x0001 != 0xFFFF, it is\n   not changed to 0x0000.\n   So the value 0x0001\
    \ is written into the subnet field, and the\n   internal value of the subnet field\
    \ is properly restored.\n"
- title: 3.7.  Address Mapping for Longer Prefixes
  contents:
  - "3.7.  Address Mapping for Longer Prefixes\n   If the prefix being mapped is longer\
    \ than 48 bits, the algorithm is\n   slightly more complex.  A common case will\
    \ be that the internal and\n   external prefixes are of different lengths.  In\
    \ such a case, the\n   shorter prefix is zero-extended to the length of the longer\
    \ as\n   described in Section 3.1 for the purposes of overwriting the prefix.\n\
    \   Then, they are both zero-extended to 64 bits to facilitate one's\n   complement\
    \ arithmetic.  The \"adjustment\" is calculated using those\n   64-bit prefixes.\n\
    \   For example, if the internal prefix is a /48 ULA and the external\n   prefix\
    \ is a /56 provider-allocated prefix, the ULA becomes a /56 with\n   zeros in\
    \ bits 48..55.  For purposes of one's complement arithmetic,\n   they are then\
    \ both zero-extended to 64 bits.  A side effect of this\n   is that a subset of\
    \ the subnets possible in the shorter prefix is\n   untranslatable.  While the\
    \ security value of this is debatable, the\n   administration may choose to use\
    \ them for subnets that it knows need\n   no external accessibility.\n   We then\
    \ find the first word in the IID that does not have the value\n   0xFFFF, trying\
    \ bits 64..79, and then 80..95, 96..111, and finally\n   112..127.  We perform\
    \ the same calculation (with the same proof of\n   correctness) as in Section\
    \ 3.6 but apply it to that word.\n   Although any 16-bit portion of an IPv6 IID\
    \ could contain 0xFFFF, an\n   IID of all-ones is a reserved anycast identifier\
    \ that should not be\n   used on the network [RFC2526].  If an NPTv6 Translator\
    \ discovers a\n   datagram with an IID of all-zeros while performing address mapping,\n\
    \   that datagram MUST be dropped, and an ICMPv6 Parameter Problem error\n   SHOULD\
    \ be generated [RFC4443].\n   Note: This mechanism does involve modification of\
    \ the IID; it may not\n   be compatible with future mechanisms that use unique\
    \ IIDs for node\n   identification.\n"
- title: 4.  Implications of Network Address Translator Behavioral Requirements
  contents:
  - '4.  Implications of Network Address Translator Behavioral Requirements

    '
- title: 4.1.  Prefix Configuration and Generation
  contents:
  - "4.1.  Prefix Configuration and Generation\n   NPTv6 Translators MUST support\
    \ manual configuration of internal and\n   external prefixes and MUST NOT place\
    \ any restrictions on those\n   prefixes except that they be valid IPv6 unicast\
    \ prefixes as described\n   in [RFC4291].  They MAY also support random generation\
    \ of ULA\n   addresses on command.  Since the most common place anticipated for\n\
    \   the implementation of an NPTv6 Translator is a Customer Premises\n   Equipment\
    \ (CPE) router, the reader is urged to consider the\n   requirements of [RFC6204].\n"
- title: 4.2.  Subnet Numbering
  contents:
  - "4.2.  Subnet Numbering\n   For reasons detailed in Appendix B, a network using\
    \ NPTv6 Translation\n   and a /48 external prefix MUST NOT use the value 0xFFFF\
    \ to designate\n   a subnet that it expects to be translated.\n"
- title: 4.3.  NAT Behavioral Requirements
  contents:
  - "4.3.  NAT Behavioral Requirements\n   NPTv6 Translators MUST support hairpinning\
    \ behavior, as defined in\n   the NAT Behavioral Requirements for UDP document\
    \ [RFC4787].  This\n   means that when an NPTv6 Translator receives a datagram\
    \ on the\n   internal interface that has a destination address that matches the\n\
    \   site's external prefix, it will translate the datagram and forward it\n  \
    \ internally.  This allows internal nodes to reach other internal nodes\n   using\
    \ their external, global addresses when necessary.\n   Conceptually, the datagram\
    \ leaves the domain (is translated as\n   described in Section 3.2) and returns\
    \ (is again translated as\n   described in Section 3.3).  As a result, the datagram\
    \ exchange will\n   be through the NPTv6 Translator in both directions for the\
    \ lifetime\n   of the session.  The alternative would be to require the NPTv6\n\
    \   Translator to drop the datagram, forcing the sender to use the\n   correct\
    \ internal prefix for its peer.  Performing only the external-\n   to-internal\
    \ translation results in the datagram being sent from the\n   untranslated internal\
    \ address of the source to the translated and\n   therefore internal address of\
    \ its peer, which would enable the\n   session to bypass the NPTv6 Translator\
    \ for future datagrams.  It\n   would also mean that the original sender would\
    \ be unlikely to\n   recognize the response when it arrived.\n   Because NPTv6\
    \ does not perform port mapping and uses a one-to-one,\n   reversible-mapping\
    \ algorithm, none of the other NAT behavioral\n   requirements apply to NPTv6.\n"
- title: 5.  Implications for Applications
  contents:
  - "5.  Implications for Applications\n   NPTv6 Translation does not create several\
    \ of the problems known to\n   exist with other kinds of NATs as discussed in\
    \ [RFC2993].  In\n   particular, NPTv6 Translation is stateless, so a \"reset\"\
    \ or brief\n   outage of an NPTv6 Translator does not break connections that\n\
    \   traverse the translation function, and if multiple NPTv6 Translators\n   exist\
    \ between the same two networks, the load can shift or be\n   dynamically load\
    \ shared among them.  Also, an NPTv6 Translator does\n   not aggregate traffic\
    \ for several hosts/interfaces behind a fewer\n   number of external addresses,\
    \ so there is no inherent expectation for\n   an NPTv6 Translator to block new\
    \ inbound flows from external hosts\n   and no issue with a filter or blacklist\
    \ associated with one prefix\n   within the domain affecting another.  A firewall\
    \ can, of course, be\n   used in conjunction with an NPTv6 Translator; this would\
    \ allow the\n   network administrator more flexibility to specify security policy\n\
    \   than would be possible with a traditional NAT.\n   However, NPTv6 Translation\
    \ does create difficulties for some kinds of\n   applications.  Some examples\
    \ include:\n   o  An application instance \"behind\" an NPTv6 Translator will\
    \ see a\n      different address for its connections than its peers \"outside\"\
    \ the\n      NPTv6 Translator.\n   o  An application instance \"outside\" an NPTv6\
    \ Translator will see a\n      different address for its connections than any\
    \ peer \"inside\" an\n      NPTv6 Translator.\n   o  An application instance wishing\
    \ to establish communication with a\n      peer \"behind\" an NPTv6 Translator\
    \ may need to use a different\n      address to reach that peer depending on whether\
    \ the instance is\n      behind the same NPTv6 Translator or external to it. \
    \ Since an\n      NPTv6 Translator implements hairpinning (Section 4.3), it suffices\n\
    \      for applications to always use their external addresses.  However,\n  \
    \    this creates inefficiencies in the local network and may also\n      complicate\
    \ implementation of the NPTv6 Translator.  [RFC3484] also\n      would prefer\
    \ the private address in such a case in order to reduce\n      those inefficiencies.\n\
    \   o  An application instance that moves from a realm \"behind\" an NPTv6\n \
    \     Translator to a realm that is \"outside\" the network, or vice\n      versa,\
    \ may find that it is no longer able to reach its peers at\n      the same addresses\
    \ it was previously able to use.\n   o  An application instance that is intermittently\
    \ communicating with\n      a peer that moves from behind an NPTv6 Translator\
    \ to \"outside\" of\n      it, or vice versa, may find that it is no longer able\
    \ to reach\n      that peer at the same address that it had previously used.\n\
    \   Many, but not all, of the applications that are adversely affected by\n  \
    \ NPTv6 Translation are those that do \"referrals\" -- where an\n   application\
    \ instance passes its own addresses, and/or addresses of\n   its peers, to other\
    \ peers.  (Some believe referrals are inherently\n   undesirable; others believe\
    \ that they are necessary in some\n   circumstances.  A discussion of the merits\
    \ of referrals, or lack\n   thereof, is beyond the scope of this document.)\n\
    \   To some extent, the incidence of these difficulties can be reduced by\n  \
    \ DNS hacks that attempt to expose addresses \"behind\" an NPTv6\n   Translator\
    \ only to hosts that are also behind the same NPTv6\n   Translator and perhaps\
    \ to also expose only the \"internal\" addresses\n   of hosts behind the NPTv6\
    \ Translator to other hosts behind the same\n   NPTv6 Translator.  However, this\
    \ cannot be a complete solution.  A\n   full discussion of these issues is out\
    \ of scope for this document,\n   but briefly: (a) reliance on DNS to solve this\
    \ problem depends on\n   hosts always making queries from DNS servers in the same\
    \ realm as\n   they are (or on DNS interception proxies, which create their own\n\
    \   problems) and on mobile hosts/applications not caching those results;\n  \
    \ (b) reliance on DNS to solve this problem depends on network\n   administrators\
    \ on all networks using such applications to reliably\n   and accurately maintain\
    \ current DNS entries for every host using\n   those applications; and (c) reliance\
    \ on DNS to solve this problem\n   depends on applications always using DNS names,\
    \ even though they\n   often must run in environments where DNS names are not\
    \ reliably\n   maintained for every host.  Other issues are that there is often\
    \ no\n   single distinguished name for a host and no reliable way for a host\n\
    \   to determine what DNS names are associated with it and which names\n   are\
    \ appropriate to use in which contexts.\n"
- title: 5.1.  Recommendation for Network Planners Considering Use of NPTv6
  contents:
  - "5.1.  Recommendation for Network Planners Considering Use of NPTv6\n      Translation\n\
    \   In light of the above, network planners considering the use of NPTv6\n   translation\
    \ should carefully consider the kinds of applications that\n   they will need\
    \ to run in the future and determine whether the\n   address-stability and provider-independence\
    \ benefits are consistent\n   with their application requirements.\n"
- title: 5.2.  Recommendations for Application Writers
  contents:
  - "5.2.  Recommendations for Application Writers\n   Several mechanisms (e.g., STUN\
    \ [RFC5389], Traversal Using Relays\n   around NAT (TURN) [RFC5766], and Interactive\
    \ Connectivity\n   Establishment (ICE) [RFC5245]) have been used with traditional\
    \ IPv4\n   NAT to circumvent some of the limitations of such devices.  Similar\n\
    \   mechanisms could also be applied to circumvent some of the issues\n   with\
    \ an NPTv6 Translator.  However, all of these require the\n   assistance of an\
    \ external server or a function co-located with the\n   translator that can tell\
    \ an \"internal\" host what its \"external\"\n   addresses are.\n"
- title: 5.3.  Recommendation for Future Work
  contents:
  - "5.3.  Recommendation for Future Work\n   It might be desirable to define a general\
    \ mechanism that would allow\n   hosts within a translation domain to determine\
    \ their external\n   addresses and/or request that inbound traffic be permitted.\
    \  If such\n   a mechanism were to be defined, it would ideally be general enough\
    \ to\n   also accommodate other types of NAT likely to be encountered by IPV6\n\
    \   applications, in particular IPv4/IPv6 Translation [RFC6144] [RFC6147]\n  \
    \ [RFC6145] [RFC6146] [RFC6052].  For this and other reasons, such a\n   mechanism\
    \ is beyond the scope of this document.\n"
- title: 6.  A Note on Port Mapping
  contents:
  - "6.  A Note on Port Mapping\n   In addition to overwriting IP addresses when datagrams\
    \ are forwarded,\n   NAPT44 devices overwrite the source port number in outbound\
    \ traffic\n   and the destination port number in inbound traffic.  This mechanism\n\
    \   is called \"port mapping\".\n   The major benefit of port mapping is that\
    \ it allows multiple\n   computers to share a single IPv4 address.  A large number\
    \ of internal\n   IPv4 addresses (typically from one of the [RFC1918] private\
    \ address\n   spaces) can be mapped into a single external, globally routable\
    \ IPv4\n   address, with the local port number used to identify which internal\n\
    \   node should receive each inbound datagram.  This address-\n   amplification\
    \ feature is not generally foreseen as a necessity at\n   this time.\n   Since\
    \ port mapping requires rewriting a portion of the transport\n   layer header,\
    \ it requires NAPT44 devices to be aware of all of the\n   transport protocols\
    \ that they forward, thus stifling the development\n   of new and improved transport\
    \ protocols and preventing the use of\n   IPsec encryption.  Modifying the transport\
    \ layer header is\n   incompatible with security mechanisms that encrypt the full\
    \ IP\n   payload and restricts the NAPT44 to forwarding transport layers that\n\
    \   use weak checksum algorithms that are easily recalculated in routers.\n  \
    \ Since there is significant detriment caused by modifying transport\n   layer\
    \ headers and very little, if any, benefit to the use of port\n   mapping in IPv6,\
    \ NPTv6 Translators that comply with this\n   specification MUST NOT perform port\
    \ mapping.\n"
- title: 7.  Security Considerations
  contents:
  - "7.  Security Considerations\n   When NPTv6 is deployed using either of the two-way,\
    \ algorithmic\n   mappings defined in this document, it allows direct inbound\n\
    \   connections to internal nodes.  While this can be viewed as a benefit\n  \
    \ of NPTv6 versus NAPT44, it does open internal nodes to attacks that\n   would\
    \ be more difficult in a NAPT44 network.  From a security\n   standpoint, although\
    \ this situation is not substantially worse than\n   running IPv6 with no NAT,\
    \ some enterprises may assume that an NPTv6\n   Translator will offer similar\
    \ protection to a NAPT44 device.\n   The port mapping mechanism in NAPT44 implementations\
    \ requires that\n   state be created in both directions.  This has lead to an\
    \ industry-\n   wide perception that NAT functionality is the same as a stateful\n\
    \   firewall.  It is not.  The translation function of the NAT only\n   creates\
    \ dynamic state in one direction and has no policy.  For this\n   reason, it is\
    \ RECOMMENDED that NPTv6 Translators also implement\n   firewall functionality\
    \ such as described in [RFC6092], with\n   appropriate configuration options including\
    \ turning it on or off.\n   When [RFC4864] talks about randomizing the subnet\
    \ identifier, the\n   idea is to make it harder for worms to guess a valid subnet\n\
    \   identifier at an advertised network prefix.  This should not be\n   interpreted\
    \ as endorsing concealment of the subnet identifier behind\n   the obfuscating\
    \ function of a translator such as NPTv6.  [RFC4864]\n   specifically talks about\
    \ how to obtain the desired properties of\n   concealment without using a translator.\
    \  Topology hiding when using\n   NAT is often ineffective in environments where\
    \ the topology is\n   visible in application layer messaging protocols such as\
    \ DNS, SIP,\n   SMTP, etc.  If the information were not available through the\n\
    \   application layer, [RFC2993] would not be valid.\n   Due to the potential\
    \ interactions with IKEv2/IPsec NAT traversal, it\n   would be valuable to test\
    \ interactions of NPTv6 with various aspects\n   of current-day IKEv2/IPsec NAT\
    \ traversal.\n"
- title: 8.  Acknowledgements
  contents:
  - "8.  Acknowledgements\n   The checksum-neutral algorithmic address mapping described\
    \ in this\n   document is based on email written by Iljtsch van Beijnum.\n   The\
    \ following people provided advice or review comments that\n   substantially improved\
    \ this document: Allison Mankin, Christian\n   Huitema, Dave Thaler, Ed Jankiewicz,\
    \ Eric Kline, Iljtsch van Beijnum,\n   Jari Arkko, Keith Moore, Mark Townsley,\
    \ Merike Kaeo, Ralph Droms,\n   Remi Despres, Steve Blake, and Tony Hain.\n"
- title: 9.  References
  contents:
  - '9.  References

    '
- title: 9.1.  Normative References
  contents:
  - "9.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use in\
    \ RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119, March\
    \ 1997.\n   [RFC2526]  Johnson, D. and S. Deering, \"Reserved IPv6 Subnet Anycast\n\
    \              Addresses\", RFC 2526, March 1999.\n   [RFC4193]  Hinden, R. and\
    \ B. Haberman, \"Unique Local IPv6 Unicast\n              Addresses\", RFC 4193,\
    \ October 2005.\n   [RFC4291]  Hinden, R. and S. Deering, \"IP Version 6 Addressing\n\
    \              Architecture\", RFC 4291, February 2006.\n   [RFC4443]  Conta,\
    \ A., Deering, S., and M. Gupta, \"Internet Control\n              Message Protocol\
    \ (ICMPv6) for the Internet Protocol\n              Version 6 (IPv6) Specification\"\
    , RFC 4443, March 2006.\n   [RFC4787]  Audet, F. and C. Jennings, \"Network Address\
    \ Translation\n              (NAT) Behavioral Requirements for Unicast UDP\",\
    \ BCP 127,\n              RFC 4787, January 2007.\n"
- title: 9.2.  Informative References
  contents:
  - "9.2.  Informative References\n   [GSE]      O'Dell, M., \"GSE - An Alternate\
    \ Addressing Architecture\n              for IPv6\", Work in Progress, February\
    \ 1997.\n   [NIST]     NIST, \"Draft NIST Framework and Roadmap for Smart Grid\n\
    \              Interoperability Standards, Release 1.0\", September 2009.\n  \
    \ [RFC1071]  Braden, R., Borman, D., Partridge, C., and W. Plummer,\n        \
    \      \"Computing the Internet checksum\", RFC 1071,\n              September\
    \ 1988.\n   [RFC1624]  Rijsinghani, A., \"Computation of the Internet Checksum\
    \ via\n              Incremental Update\", RFC 1624, May 1994.\n   [RFC1918] \
    \ Rekhter, Y., Moskowitz, R., Karrenberg, D., Groot, G., and\n              E.\
    \ Lear, \"Address Allocation for Private Internets\",\n              BCP 5, RFC\
    \ 1918, February 1996.\n   [RFC2827]  Ferguson, P. and D. Senie, \"Network Ingress\
    \ Filtering:\n              Defeating Denial of Service Attacks which employ IP\
    \ Source\n              Address Spoofing\", BCP 38, RFC 2827, May 2000.\n   [RFC2993]\
    \  Hain, T., \"Architectural Implications of NAT\", RFC 2993,\n              November\
    \ 2000.\n   [RFC3424]  Daigle, L. and IAB, \"IAB Considerations for UNilateral\n\
    \              Self-Address Fixing (UNSAF) Across Network Address\n          \
    \    Translation\", RFC 3424, November 2002.\n   [RFC3484]  Draves, R., \"Default\
    \ Address Selection for Internet\n              Protocol version 6 (IPv6)\", RFC\
    \ 3484, February 2003.\n   [RFC4864]  Van de Velde, G., Hain, T., Droms, R., Carpenter,\
    \ B., and\n              E. Klein, \"Local Network Protection for IPv6\", RFC\
    \ 4864,\n              May 2007.\n   [RFC5245]  Rosenberg, J., \"Interactive Connectivity\
    \ Establishment\n              (ICE): A Protocol for Network Address Translator\
    \ (NAT)\n              Traversal for Offer/Answer Protocols\", RFC 5245,\n   \
    \           April 2010.\n   [RFC5389]  Rosenberg, J., Mahy, R., Matthews, P.,\
    \ and D. Wing,\n              \"Session Traversal Utilities for NAT (STUN)\",\
    \ RFC 5389,\n              October 2008.\n   [RFC5766]  Mahy, R., Matthews, P.,\
    \ and J. Rosenberg, \"Traversal Using\n              Relays around NAT (TURN):\
    \ Relay Extensions to Session\n              Traversal Utilities for NAT (STUN)\"\
    , RFC 5766, April 2010.\n   [RFC5902]  Thaler, D., Zhang, L., and G. Lebovitz,\
    \ \"IAB Thoughts on\n              IPv6 Network Address Translation\", RFC 5902,\
    \ July 2010.\n   [RFC5925]  Touch, J., Mankin, A., and R. Bonica, \"The TCP\n\
    \              Authentication Option\", RFC 5925, June 2010.\n   [RFC5996]  Kaufman,\
    \ C., Hoffman, P., Nir, Y., and P. Eronen,\n              \"Internet Key Exchange\
    \ Protocol Version 2 (IKEv2)\",\n              RFC 5996, September 2010.\n   [RFC6052]\
    \  Bao, C., Huitema, C., Bagnulo, M., Boucadair, M., and X.\n              Li,\
    \ \"IPv6 Addressing of IPv4/IPv6 Translators\", RFC 6052,\n              October\
    \ 2010.\n   [RFC6092]  Woodyatt, J., \"Recommended Simple Security Capabilities\
    \ in\n              Customer Premises Equipment (CPE) for Providing\n        \
    \      Residential IPv6 Internet Service\", RFC 6092,\n              January 2011.\n\
    \   [RFC6144]  Baker, F., Li, X., Bao, C., and K. Yin, \"Framework for\n     \
    \         IPv4/IPv6 Translation\", RFC 6144, April 2011.\n   [RFC6145]  Li, X.,\
    \ Bao, C., and F. Baker, \"IP/ICMP Translation\n              Algorithm\", RFC\
    \ 6145, April 2011.\n   [RFC6146]  Bagnulo, M., Matthews, P., and I. van Beijnum,\
    \ \"Stateful\n              NAT64: Network Address and Protocol Translation from\
    \ IPv6\n              Clients to IPv4 Servers\", RFC 6146, April 2011.\n   [RFC6147]\
    \  Bagnulo, M., Sullivan, A., Matthews, P., and I. van\n              Beijnum,\
    \ \"DNS64: DNS Extensions for Network Address\n              Translation from\
    \ IPv6 Clients to IPv4 Servers\", RFC 6147,\n              April 2011.\n   [RFC6204]\
    \  Singh, H., Beebee, W., Donley, C., Stark, B., and O.\n              Troan,\
    \ \"Basic Requirements for IPv6 Customer Edge\n              Routers\", RFC 6204,\
    \ April 2011.\n"
- title: Appendix A.  Why GSE?
  contents:
  - "Appendix A.  Why GSE?\n   For the purpose of this discussion, let us oversimplify\
    \ the\n   Internet's structure by distinguishing between two broad classes of\n\
    \   networks: transit and edge.  A \"transit network\", in this context, is\n\
    \   a network that provides connectivity services to other networks.  Its\n  \
    \ Autonomous System (AS) number may show up in a non-final position in\n   BGP\
    \ AS paths, or in the case of mobile and residential broadband\n   networks, it\
    \ may offer network services to smaller networks that\n   cannot justify RIR membership.\
    \  An \"edge network\", in contrast, is\n   any network that is not a transit\
    \ network; it is the ultimate\n   customer, and while it provides internal connectivity\
    \ for its own\n   use, it is a consumer of transit services in other respects.\
    \  In\n   terms of routing, a network in the transit domain generally needs\n\
    \   some way to make choices about how it routes to other networks; an\n   edge\
    \ network is generally quite satisfied with a simple default\n   route.\n   The\
    \ [GSE] proposal, and as a result this proposal (which is similar\n   to GSE in\
    \ most respects and inspired by it), responds directly to\n   current concerns\
    \ in the RIR communities.  Edge networks are used to\n   an environment in IPv4\
    \ in which their addressing is disjoint from\n   that of their upstream transit\
    \ networks; it is either provider\n   independent, or a network prefix translator\
    \ makes their external\n   address distinct from their internal address, and they\
    \ like the\n   distinction.  In IPv6, there is a mantra that edge network addresses\n\
    \   should be derived from their upstream, and if they have multiple\n   upstreams,\
    \ edge networks are expected to design their networks to use\n   all of those\
    \ prefixes equivalently.  They see this as unnecessary and\n   unwanted operational\
    \ complexity and, as a result, are pushing very\n   hard in the RIR communities\
    \ for provider-independent addressing.\n   Widespread use of provider-independent\
    \ addressing has a natural and\n   perhaps unavoidable side effect that is likely\
    \ to be very expensive\n   in the long term.  With widespread PI addressing, the\
    \ routing table\n   will enumerate the networks at the edge of the transit domain,\
    \ the\n   edge networks, rather than enumerate the transit domain.  Per the BGP\n\
    \   Update Report of 17 December 2010, there are currently over 36,000\n   Autonomous\
    \ Systems being advertised in BGP, of which over 15,000\n   advertise only one\
    \ prefix.  There are in the neighborhood of 5000 ASs\n   that show up in a non-final\
    \ position in AS paths, and perhaps another\n   5000 networks whose AS numbers\
    \ are terminal in more than one AS path.\n   In other words, we have prefixes\
    \ for some 36,000 transit and edge\n   networks in the route table now, many of\
    \ which arguably need an\n   Autonomous System number only for multihoming.  The\
    \ vast majority of\n   networks (2/3) having the tools necessary to multihome\
    \ are not\n   visibly doing so and would be well served by any solution that gives\n\
    \   them address independence without the overhead of RIR membership and\n   BGP\
    \ routing.\n   Current growth estimates suggest that we could easily see that\
    \ be on\n   the order of 10,000,000 within fifteen years.  Tens of thousands of\n\
    \   entries in the route table are very survivable; while our protocols\n   and\
    \ computers will likely do quite well with tens of millions of\n   routes, the\
    \ heat produced and power consumed by those routers, and\n   the inevitable impact\
    \ on the cost of those routers, is not a good\n   outcome.  To avoid having a\
    \ massive and unscalable route table, we\n   need to find a way that is politically\
    \ acceptable and returns us to\n   enumerating the transit domain, not the edge.\n\
    \   There have been a number of proposals.  As described, Shim6 moves the\n  \
    \ complexity to the edge, and the edge is rebelling.  Geographic\n   addressing\
    \ in essence forces ISPs to \"own\" geographic territory from\n   a routing perspective,\
    \ as otherwise there is no clue in the address\n   as to what network a datagram\
    \ should be delivered to in order to\n   reach it.  Metropolitan Addressing can\
    \ imply regulatory authority\n   and, even if it is implemented using internet\
    \ exchange consortia,\n   visits a great deal of complexity on the transit networks\
    \ that\n   directly serve the edge.  The one that is likely to be most\n   acceptable\
    \ is any proposal that enables an edge network to be\n   operationally independent\
    \ of its upstreams, with no obligation to\n   renumber when it adds, drops, or\
    \ changes ISPs, and with no additional\n   burden placed either on the ISP or\
    \ the edge network as a result.\n   From an application perspective, an additional\
    \ operational\n   requirement in the words of the Roadmap for the Smart Grid [NIST]\
    \ is\n   that\n      \"...the network should provide the capability to enable\
    \ an\n      application in a particular domain to communicate with an\n      application\
    \ in any other domain over the information network, with\n      proper management\
    \ control as to who and where applications can be\n      inter-connected.\"\n\
    \   In other words, the structure of the network should allow for and\n   enable\
    \ appropriate access control, but the structure of the network\n   should not\
    \ inherently limit access.\n   The GSE model, by statelessly translating the prefix\
    \ between an edge\n   network and its upstream transit network, accomplishes that\
    \ with a\n   minimum of fuss and bother.  Stated in the simplest terms, it enables\n\
    \   the edge network to behave as if it has a provider-independent prefix\n  \
    \ from a multihoming and renumbering perspective without the overhead\n   of RIR\
    \ membership or maintenance of BGP connectivity, and it enables\n   the transit\
    \ networks to aggressively aggregate what are from their\n   perspective provider-allocated\
    \ customer prefixes, to maintain a\n   rational-sized routing table.\n"
- title: Appendix B.  Verification Code
  contents:
  - "Appendix B.  Verification Code\n   This non-normative appendix is presented as\
    \ a proof of concept; it is\n   in no sense optimized.  For example, one's complement\
    \ arithmetic is\n   implemented in portable subroutines, where operational\n \
    \  implementations might use one's complement arithmetic instructions\n   through\
    \ a pragma; such implementations probably need to explicitly\n   force 0xFFFF\
    \ to 0x0000, as the instruction will not.  The original\n   purpose of the code\
    \ was to verify whether or not it was necessary to\n   suppress 0xFFFF by overwriting\
    \ with zero and whether predicted issues\n   with subnet numbering were real.\n\
    \   The point is to\n   o  demonstrate that if one or the other representation\
    \ of zero is not\n      used in the word in which the checksum is updated, the\
    \ program\n      maps inner and outer addresses in a manner that is,\n      mathematically,\
    \ 1:1 and onto (each inner address maps to a unique\n      outer address, and\
    \ that outer address maps back to exactly the\n      same inner address), and\n\
    \   o  give guidance on the suppression of 0xFFFF checksums.\n   In short, in\
    \ one's complement arithmetic, x-x=0 but will take the\n   negative representation\
    \ of zero.  If 0xFFFF results are forced to the\n   value 0x0000, as is recommended\
    \ in [RFC1071], the word the checksum\n   is adjusted in cannot be initially 0xFFFF,\
    \ as on the return it will\n   be forced to 0.  If 0xFFFF results are not forced\
    \ to the value 0x0000\n   as is recommended in [RFC1071], the word the checksum\
    \ is adjusted in\n   cannot be initially 0, as on the return it will be calculated\
    \ as\n   0+(~0) = 0xFFFF.  We chose to follow [RFC1071]'s recommendations,\n \
    \  which implies a requirement to not use 0xFFFF as a subnet number in\n   networks\
    \ with a /48 external prefix.\n  /*\n   * Copyright (c) 2011 IETF Trust and the\
    \ persons identified as\n   * authors of the code.  All rights reserved.\n   *\n\
    \   * Redistribution and use in source and binary forms, with or without\n   *\
    \ modification, are permitted provided that the following conditions\n   * are\
    \ met:\n   *\n   * - Redistributions of source code must retain the above copyright\n\
    \   *   notice, this list of conditions and the following disclaimer.\n   *\n\
    \   * - Redistributions in binary form must reproduce the above\n   *   copyright\
    \ notice, this list of conditions and the following\n   *   disclaimer in the\
    \ documentation and/or other materials provided\n   *   with the distribution.\n\
    \   *\n   * - Neither the name of Internet Society, IETF or IETF Trust, nor\n\
    \   *   the names of specific contributors, may be used to endorse or\n   *  \
    \ promote products derived from this software without specific\n   *   prior written\
    \ permission.\n   *\n   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND\n\
    \   * CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES,\n   * INCLUDING,\
    \ BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\n   * MERCHANTABILITY AND FITNESS\
    \ FOR A PARTICULAR PURPOSE ARE\n   * DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT\
    \ OWNER OR CONTRIBUTORS\n   * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\
    \ SPECIAL,\n   * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED\n\
    \   * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n   * DATA,\
    \ OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n   * ON ANY THEORY\
    \ OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n   * OR TORT (INCLUDING\
    \ NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY\n   * OUT OF THE USE OF THIS SOFTWARE,\
    \ EVEN IF ADVISED OF THE\n   * POSSIBILITY OF SUCH DAMAGE.\n   */\n  #include\
    \ \"stdio.h\"\n  #include \"assert.h\"\n  /*\n   * program to verify the NPTv6\
    \ algorithm\n   *\n   * argument:\n   *    Perform negative zero suppression:\
    \ boolean\n   *\n   * method:\n   *    We specify an internal and an external\
    \ prefix.  The prefix\n   *    length is presumed to be the common length of both\
    \ and, for\n   *    this, is a /48.  We perform the three algorithms specified.\n\
    \   *    The \"datagram\" address is in effect the source address\n   *    internal->external\
    \ and the destination address\n   *    external->internal.\n   */\n  unsigned\
    \ short  inner_init[] = {\n      0xFD01, 0x0203, 0x0405, 1, 2, 3, 4, 5};\n  unsigned\
    \ short  outer_init[] = {\n      0x2001, 0x0db8, 0x0001, 1, 2, 3, 4, 5};\n  unsigned\
    \ short  inner[8];\n  unsigned short  datagram[8];\n  unsigned char   checksum[65536]\
    \ = {0};\n  unsigned short  outer[8];\n  unsigned short  adjustment;\n  unsigned\
    \ short  suppress;\n  /*\n   * One's complement sum.\n   * return number1 + number2\n\
    \   */\n  unsigned short\n  add1(number1, number2)\n      unsigned short  number1;\n\
    \      unsigned short  number2;\n  {\n      unsigned int    result;\n      result\
    \ = number1;\n      result += number2;\n      if (suppress) {\n          while\
    \ (0xFFFF <= result) {\n              result = result + 1 - 0x10000;\n       \
    \   }\n      } else {\n          while (0xFFFF < result) {\n              result\
    \ = result + 1 - 0x10000;\n          }\n      }\n      return result;\n  }\n \
    \ /*\n   * One's complement difference\n   * return number1 - number2\n   */\n\
    \  unsigned short\n  sub1(number1, number2)\n      unsigned short  number1;\n\
    \      unsigned short  number2;\n  {\n      return add1(number1, ~number2);\n\
    \  }\n  /*\n   * return one's complement sum of an array of numbers\n   */\n \
    \ unsigned short\n  sum1(numbers, count)\n      unsigned short *numbers;\n   \
    \   int             count;\n  {\n      unsigned int    result;\n      result =\
    \ *numbers++;\n      while (--count > 0) {\n          result += *numbers++;\n\
    \      }\n      if (suppress) {\n          while (0xFFFF <= result) {\n      \
    \        result = result + 1 - 0x10000;\n          }\n      } else {\n       \
    \   while (0xFFFF < result) {\n              result = result + 1 - 0x10000;\n\
    \          }\n      }\n      return result;\n  }\n  /*\n   * NPTv6 initialization:\
    \ Section 3.1 assuming Section 3.4\n   *\n   * Create the /48, a source address\
    \ in internal format, and a\n   * source address in external format.  Calculate\
    \ the adjustment\n   * if one /48 is overwritten with the other.\n   */\n  void\n\
    \  nptv6_initialization(subnet)\n      unsigned short  subnet;\n  {\n      int\
    \             i;\n      unsigned short  inner48;\n      unsigned short  outer48;\n\
    \      /* Initialize the internal and external prefixes. */\n      for (i = 0;\
    \ i < 8; i++) {\n          inner[i] = inner_init[i];\n          outer[i] = outer_init[i];\n\
    \      }\n      inner[3] = subnet;\n      outer[3] = subnet;\n      /* Calculate\
    \ the checksum adjustment. */\n      inner48 = sum1(inner, 3);\n      outer48\
    \ = sum1(outer, 3);\n      adjustment = sub1(inner48, outer48);\n  }\n  /*\n \
    \  * NPTv6 datagram from edge to transit: Section 3.2 assuming\n   * Section 3.4\n\
    \   *\n   * Overwrite the prefix in the source address with the outer\n   * prefix\
    \ and adjust the checksum.\n   */\n  void\n  nptv6_inner_to_outer()\n  {\n   \
    \   int             i;\n      /* Let's get the source address into the datagram.\
    \ */\n      for (i = 0; i < 8; i++) {\n          datagram[i] = inner[i];\n   \
    \   }\n      /* Overwrite the prefix with the outer prefix. */\n      for (i =\
    \ 0; i < 3; i++) {\n          datagram[i] = outer[i];\n      }\n      /* Adjust\
    \ the checksum. */\n      datagram[3] = add1(datagram[3], adjustment);\n  }\n\
    \  /*\n   * NPTv6 datagram from transit to edge: Section 3.3 assuming\n   * Section\
    \ 3.4\n   *\n   * Overwrite the prefix in the destination address with the\n \
    \  * inner prefix and adjust the checksum.\n   */\n  void\n  nptv6_outer_to_inner()\n\
    \  {\n      int             i;\n      /* Overwrite the prefix with the outer prefix.\
    \ */\n      for (i = 0; i < 3; i++) {\n          datagram[i] = inner[i];\n   \
    \   }\n      /* Adjust the checksum. */\n      datagram[3] = sub1(datagram[3],\
    \ adjustment);\n  }\n  /*\n   * Main program\n   */\n  main(argc, argv)\n    \
    \  int             argc;\n      char          **argv;\n  {\n      unsigned   \
    \     subnet;\n      int             i;\n      if (argc < 2) {\n             fprintf(stderr,\
    \ \"usage: nptv6 supression\\n\");\n             assert(0);\n         }\n    \
    \     suppress = atoi(argv[1]);\n         assert(suppress <= 1);\n         for\
    \ (subnet = 0; subnet < 0x10000; subnet++) {\n             /* Section 3.1: initialize\
    \ the system */\n             nptv6_initialization(subnet);\n             /* Section\
    \ 3.2: take a datagram from inside to outside */\n             nptv6_inner_to_outer();\n\
    \             /* The resulting checksum value should be unique. */\n         \
    \    if (checksum[subnet]) {\n                  printf(\"inner->outer duplicated\
    \ checksum: \"\n                         \"inner: %x:%x:%x:%x:%x:%x:%x:%x(%x)\
    \ \"\n                         \"calculated: %x:%x:%x:%x:%x:%x:%x:%x(%x)\\n\"\
    ,\n                         inner[0], inner[1], inner[2], inner[3],\n        \
    \                 inner[4], inner[5], inner[6], inner[7],\n                  \
    \       sum1(inner, 8), datagram[0], datagram[1],\n                         datagram[2],\
    \ datagram[3], datagram[4],\n                         datagram[5], datagram[6],\
    \ datagram[7],\n                         sum1(datagram, 8));\n          }\n  \
    \        checksum[subnet] = 1;\n          /*\n           * The resulting checksum\
    \ should be the same as the inner\n           * address's checksum.\n        \
    \   */\n          if (sum1(datagram, 8) != sum1(inner, 8)) {\n              printf(\"\
    inner->outer incorrect: \"\n                     \"inner: %x:%x:%x:%x:%x:%x:%x:%x(%x)\
    \ \"\n                     \"calculated: %x:%x:%x:%x:%x:%x:%x:%x(%x)\\n\",\n \
    \                    inner[0], inner[1], inner[2], inner[3],\n               \
    \      inner[4], inner[5], inner[6], inner[7],\n                     sum1(inner,\
    \ 8),\n                     datagram[0], datagram[1], datagram[2], datagram[3],\n\
    \                     datagram[4], datagram[5], datagram[6], datagram[7],\n  \
    \                   sum1(datagram, 8));\n          }\n          /* Section 3.3:\
    \ take a datagram from outside to inside */\n          nptv6_outer_to_inner();\n\
    \          /*\n           * The returning datagram should have the same checksum\
    \ it\n           * left with.\n           */\n          if (sum1(datagram, 8)\
    \ != sum1(inner, 8)) {\n              printf(\"outer->inner checksum incorrect:\
    \ \"\n                     \"calculated: %x:%x:%x:%x:%x:%x:%x:%x(%x) \"\n    \
    \                 \"inner: %x:%x:%x:%x:%x:%x:%x:%x(%x)\\n\",\n               \
    \      datagram[0], datagram[1], datagram[2], datagram[3],\n                 \
    \    datagram[4], datagram[5], datagram[6], datagram[7],\n                   \
    \  sum1(datagram, 8), inner[0], inner[1], inner[2],\n                     inner[3],\
    \ inner[4], inner[5], inner[6], inner[7],\n                     sum1(inner, 8));\n\
    \          }\n          /*\n           * And every octet should calculate back\
    \ to the same inner\n           * value.\n           */\n          for (i = 0;\
    \ i < 8; i++) {\n              if (inner[i] != datagram[i]) {\n              \
    \    printf(\"outer->inner different: \"\n                         \"calculated:\
    \ %x:%x:%x:%x:%x:%x:%x:%x \"\n                         \"inner: %x:%x:%x:%x:%x:%x:%x:%x\\\
    n\",\n                         datagram[0], datagram[1], datagram[2],\n      \
    \                   datagram[3], datagram[4], datagram[5],\n                 \
    \        datagram[6], datagram[7], inner[0], inner[1],\n                     \
    \    inner[2], inner[3], inner[4], inner[5],\n                         inner[6],\
    \ inner[7]);\n                  break;\n              }\n          }\n      }\n\
    \  }\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Margaret Wasserman\n   Painless Security\n   North Andover,\
    \ MA  01845\n   USA\n   Phone: +1 781 405 7464\n   EMail: mrw@painless-security.com\n\
    \   URI:   http://www.painless-security.com\n   Fred Baker\n   Cisco Systems\n\
    \   Santa Barbara, California  93117\n   USA\n   Phone: +1-408-526-4257\n   EMail:\
    \ fred@cisco.com\n"
