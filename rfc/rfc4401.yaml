- title: __initial_text__
  contents:
  - "         A Pseudo-Random Function (PRF) API Extension for the\n    Generic Security\
    \ Service Application Program Interface (GSS-API)\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2006).\n"
- title: Abstract
  contents:
  - "Abstract\n   This document defines a Pseudo-Random Function (PRF) extension to\
    \ the\n   Generic Security Service Application Program Interface (GSS-API) for\n\
    \   keying application protocols given an established GSS-API security\n   context.\
    \  The primary intended use of this function is to key secure\n   session layers\
    \ that do not or cannot use GSS-API per-message message\n   integrity check (MIC)\
    \ and wrap tokens for session protection.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................2\n\
    \      1.1. Conventions Used in This Document ..........................2\n  \
    \ 2. GSS_Pseudo_random() .............................................2\n    \
    \  2.1. C-Bindings .................................................5\n   3. IANA\
    \ Considerations .............................................5\n   4. Security\
    \ Considerations .........................................5\n   5. References\
    \ ......................................................7\n      5.1. Normative\
    \ References .......................................7\n      5.2. Informative\
    \ References .....................................7\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   A need has arisen for users of the GSS-API to key applications'\n\
    \   cryptographic protocols using established GSS-API security contexts.\n   Such\
    \ applications can use the GSS-API [RFC2743] for authentication,\n   but not for\
    \ transport security (for whatever reasons), and since the\n   GSS-API does not\
    \ provide a method for obtaining keying material from\n   established security\
    \ contexts, such applications cannot make\n   effective use of the GSS-API.\n\
    \   To address this need, we define a pseudo-random function (PRF)\n   extension\
    \ to the GSS-API.\n   Though this document specifies an abstract API as an extension\
    \ to the\n   GSS-API version 2, update 1, and though it specifies the bindings\
    \ of\n   this extension for the C programming language, it does not specify a\n\
    \   revision of the GSS-API and so does not address the matter of how\n   portable\
    \ applications detect support for and ensure access to this\n   extension.  We\
    \ defer this matter to an expected, comprehensive update\n   to the GSS-API.\n"
- title: 1.1.  Conventions Used in This Document
  contents:
  - "1.1.  Conventions Used in This Document\n   The key words \"MUST\", \"MUST NOT\"\
    , \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\"\
    , \"MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described\
    \ in [RFC2119].\n"
- title: 2.  GSS_Pseudo_random()
  contents:
  - "2.  GSS_Pseudo_random()\n   Inputs:\n   o  context CONTEXT handle,\n   o  prf_key\
    \ INTEGER,\n   o  prf_in OCTET STRING,\n   o  desired_output_len INTEGER\n   Outputs:\n\
    \   o  major_status INTEGER,\n   o  minor_status INTEGER,\n   o  prf_out OCTET\
    \ STRING\n   Return major_status codes:\n   o  GSS_S_COMPLETE indicates no error.\n\
    \   o  GSS_S_NO_CONTEXT indicates that a null context has been provided\n    \
    \  as input.\n   o  GSS_S_CONTEXT_EXPIRED indicates that an expired context has\
    \ been\n      provided as input.\n   o  GSS_S_UNAVAILABLE indicates that the mechanism\
    \ lacks support for\n      this function or, if the security context is not fully\n\
    \      established, that the context is not ready to compute the PRF with\n  \
    \    the given prf_key, or that the given prf_key is not available.\n   o  GSS_S_FAILURE\
    \ indicates general failure, possibly due to the given\n      input data being\
    \ too large or of zero length, or due to the\n      desired_output_len being zero;\
    \ the minor status code may provide\n      additional information.\n   This function\
    \ applies the established context's mechanism's keyed\n   pseudo-random function\
    \ (PRF) to the input data ('prf_in'), keyed with\n   key material associated with\
    \ the given security context and\n   identified by 'prf_key', and outputs the\
    \ resulting octet string\n   ('prf_out') of desired_output_len length.\n   The\
    \ minimum input data length is one octet.\n   Mechanisms MUST be able to consume\
    \ all the provided prf_in input data\n   that is 2^14 or fewer octets.\n   If\
    \ a mechanism cannot consume as much input data as provided by the\n   caller,\
    \ then GSS_Pseudo_random() MUST return GSS_S_FAILURE.\n   The minimum desired_output_len\
    \ is one.\n   Mechanisms MUST be able to output at least up to 2^14 octets.\n\
    \   If the implementation cannot produce the desired output due to lack\n   of\
    \ resources, then it MUST return GSS_S_FAILURE and MUST set a\n   suitable minor\
    \ status code.\n   The prf_key can take on the following values: GSS_C_PRF_KEY_FULL,\n\
    \   GSS_C_PRF_KEY_PARTIAL, or mechanism-specific values, if any.  This\n   parameter\
    \ is intended to distinguish between the best cryptographic\n   keys that may\
    \ be available only after full security context\n   establishment and keys that\
    \ may be available prior to full security\n   context establishment.  For some\
    \ mechanisms, or contexts, those two\n   prf_key values MAY refer to the same\
    \ cryptographic keys; for\n   mechanisms like the Kerberos V GSS-API mechanism\
    \ [RFC1964] where one\n   peer may assert a key that may be considered better\
    \ than the others\n   they MAY be different keys.\n   GSS_C_PRF_KEY_PARTIAL corresponds\
    \ to a key that would have been used\n   while the security context was partially\
    \ established, even if it is\n   fully established when GSS_Pseudo_random() is\
    \ actually called.\n   Mechanism-specific prf_key values are intended to refer\
    \ to any other\n   keys that may be available.\n   The GSS_C_PRF_KEY_FULL value\
    \ corresponds to the best key available\n   for fully-established security contexts.\n\
    \   GSS_Pseudo_random() has the following properties:\n   o  its output string\
    \ MUST be a pseudo-random function [GGM1] [GGM2]\n      of the input keyed with\
    \ key material from the given security\n      context -- the chances of getting\
    \ the same output given different\n      input parameters should be exponentially\
    \ small.\n   o  when successfully applied to the same inputs by an initiator and\n\
    \      acceptor using the same security context, it MUST produce the\n      _same\
    \ results_ for both, the initiator and acceptor, even if\n      called multiple\
    \ times (as long as the security context is not\n      expired).\n   o  upon full\
    \ establishment of a security context, all cryptographic\n      keys and/or negotiations\
    \ used for computing the PRF with any\n      prf_key MUST be authenticated (mutually,\
    \ if mutual authentication\n      is in effect for the given security context).\n\
    \   o  the outputs of the mechanism's GSS_Pseudo_random() (for different\n   \
    \   inputs) and its per-message tokens for the given security context\n      MUST\
    \ be \"cryptographically separate\"; in other words, it must not\n      be feasible\
    \ to recover key material for one mechanism operation or\n      transform its\
    \ tokens and PRF outputs from one to the other given\n      only said tokens and\
    \ PRF outputs.  (This is a fancy way of saying\n      that key derivation and\
    \ strong cryptographic operations and\n      constructions must be used.)\n  \
    \ o  as implied by the above requirement, it MUST NOT be possible to\n      access\
    \ any raw keys of a security context through\n      GSS_Pseudo_random(), no matter\
    \ what inputs are given.\n"
- title: 2.1.  C-Bindings
  contents:
  - "2.1.  C-Bindings\n   #define GSS_C_PRF_KEY_FULL 0\n   #define GSS_C_PRF_KEY_PARTIAL\
    \ 1\n   OM_uint32 gss_pseudo_random(\n     OM_uint32                     *minor_status,\n\
    \     gss_ctx_id_t                  context,\n     int                       \
    \    prf_key,\n     const gss_buffer_t            prf_in,\n     ssize_t      \
    \                 desired_output_len,\n     gss_buffer_t                  prf_out\n\
    \   );\n   Additional major status codes for the C-bindings:\n   o  GSS_S_CALL_INACCESSIBLE_READ\n\
    \   o  GSS_S_CALL_INACCESSIBLE_WRITE\n   See [RFC2744].\n"
- title: 3.  IANA Considerations
  contents:
  - "3.  IANA Considerations\n   This document has no IANA considerations currently.\
    \  If and when a\n   relevant IANA registry of GSS-API symbols is created, then\
    \ the\n   generic and language-specific function names, constant names, and\n\
    \   constant values described above should be added to such a registry.\n"
- title: 4.  Security Considerations
  contents:
  - "4.  Security Considerations\n   Care should be taken in properly designing a\
    \ mechanism's PRF\n   function.\n   GSS mechanisms' PRF functions should use a\
    \ key derived from contexts'\n   authenticated session keys and should preserve\
    \ the forward security\n   properties of the mechanisms' key exchanges.\n   Some\
    \ mechanisms may support the GSS PRF function with security\n   contexts that\
    \ are not fully established, but applications MUST assume\n   that authentication,\
    \ mutual or otherwise, has not completed until the\n   security context is fully\
    \ established.\n   Callers of GSS_Pseudo_random() should avoid accidentally calling\
    \ it\n   with the same inputs.  One useful technique is to prepend to the\n  \
    \ prf_in input string, by convention, a string indicating the intended\n   purpose\
    \ of the PRF output in such a way that unique contexts in which\n   the function\
    \ is called yield unique inputs to it.\n   Pseudo-random functions are, by their\
    \ nature, capable of producing\n   only limited amounts of cryptographically secure\
    \ output.  The exact\n   amount of output that one can safely use, unfortunately,\
    \ varies from\n   one PRF to another (which prevents us from recommending specific\n\
    \   numbers).  Because of this, we recommend that unless you really know\n   what\
    \ you are doing (i.e., you are a cryptographer and are qualified\n   to pass judgement\
    \ on cryptographic functions in areas of period,\n   presence of short cycles,\
    \ etc.), you limit the amount of the PRF\n   output used to the necessary minimum.\
    \  See [RFC4086] for more\n   information about \"Randomness Requirements for\
    \ Security\".\n   For some mechanisms, the computational cost of computing\n \
    \  GSS_Pseudo_random() may increase significantly as the length of the\n   prf_in\
    \ data and/or the desired_output_length increase.  This means\n   that if an application\
    \ can be tricked into providing very large input\n   octet strings and requesting\
    \ very long output octet strings, then\n   that may constitute a denial of service\
    \ attack on the application;\n   therefore, applications SHOULD place appropriate\
    \ limits on the size\n   of any input octet strings received from their peers\
    \ without\n   integrity protection.\n"
- title: 5.  References
  contents:
  - '5.  References

    '
- title: 5.1.  Normative References
  contents:
  - "5.1.  Normative References\n   [GGM1]     Goldreich, O., Goldwasser, S., and\
    \ S. Micali, \"How to\n              Construct Random Functions\", Journal of\
    \ the ACM, October\n              1986.\n   [RFC2119]  Bradner, S., \"Key words\
    \ for use in RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC\
    \ 2119, March 1997.\n   [RFC2743]  Linn, J., \"Generic Security Service Application\
    \ Program\n              Interface Version 2, Update 1\", RFC 2743, January 2000.\n\
    \   [RFC2744]  Wray, J., \"Generic Security Service API Version 2 :\n        \
    \      C-bindings\", RFC 2744, January 2000.\n"
- title: 5.2.  Informative References
  contents:
  - "5.2.  Informative References\n   [GGM2]     Goldreich, O., Goldwasser, S., and\
    \ S. Micali, \"On the\n              Cryptographic Applications of Random Functions\"\
    ,\n              Proceedings of CRYPTO 84 on Advances in cryptology, 1985.\n \
    \  [RFC4086]  Eastlake, D., 3rd, Schiller, J., and S. Crocker,\n             \
    \ \"Randomness Requirements for Security\", BCP 106, RFC 4086,\n             \
    \ June 2005.\n   [RFC1964]  Linn, J., \"The Kerberos Version 5 GSS-API Mechanism\"\
    , RFC\n              1964, June 1996.\n"
- title: Author's Address
  contents:
  - "Author's Address\n   Nicolas Williams\n   Sun Microsystems\n   5300 Riata Trace\
    \ Ct\n   Austin, TX  78727\n   US\n   EMail: Nicolas.Williams@sun.com\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2006).\n   This\
    \ document is subject to the rights, licenses and restrictions\n   contained in\
    \ BCP 78, and except as set forth therein, the authors\n   retain all their rights.\n\
    \   This document and the information contained herein are provided on an\n  \
    \ \"AS IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n  \
    \ OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY AND THE INTERNET\n   ENGINEERING\
    \ TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS OR IMPLIED,\n   INCLUDING BUT NOT\
    \ LIMITED TO ANY WARRANTY THAT THE USE OF THE\n   INFORMATION HEREIN WILL NOT\
    \ INFRINGE ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY OR FITNESS\
    \ FOR A PARTICULAR PURPOSE.\n"
- title: Intellectual Property
  contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or\
    \ scope of any\n   Intellectual Property Rights or other rights that might be\
    \ claimed to\n   pertain to the implementation or use of the technology described\
    \ in\n   this document or the extent to which any license under such rights\n\
    \   might or might not be available; nor does it represent that it has\n   made\
    \ any independent effort to identify any such rights.  Information\n   on the\
    \ procedures with respect to rights in RFC documents can be\n   found in BCP 78\
    \ and BCP 79.\n   Copies of IPR disclosures made to the IETF Secretariat and any\n\
    \   assurances of licenses to be made available, or the result of an\n   attempt\
    \ made to obtain a general license or permission for the use of\n   such proprietary\
    \ rights by implementers or users of this\n   specification can be obtained from\
    \ the IETF on-line IPR repository at\n   http://www.ietf.org/ipr.\n   The IETF\
    \ invites any interested party to bring to its attention any\n   copyrights, patents\
    \ or patent applications, or other proprietary\n   rights that may cover technology\
    \ that may be required to implement\n   this standard.  Please address the information\
    \ to the IETF at\n   ietf-ipr@ietf.org.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is provided by the IETF\n\
    \   Administrative Support Activity (IASA).\n"
