- title: __initial_text__
  contents:
  - "              Certification Authority (CA) Key Rollover in\n             the\
    \ Resource Public Key Infrastructure (RPKI)\n"
- title: Abstract
  contents:
  - "Abstract\n   This document describes how a Certification Authority (CA) in the\n\
    \   Resource Public Key Infrastructure (RPKI) performs a planned rollover\n  \
    \ of its key pair.  This document also notes the implications of this\n   key\
    \ rollover procedure for relying parties (RPs).  In general, RPs\n   are expected\
    \ to maintain a local cache of the objects that have been\n   published in the\
    \ RPKI repository, and thus the way in which a CA\n   performs key rollover impacts\
    \ RPs.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This memo documents an Internet Best Current Practice.\n\
    \   This document is a product of the Internet Engineering Task Force\n   (IETF).\
    \  It represents the consensus of the IETF community.  It has\n   received public\
    \ review and has been approved for publication by the\n   Internet Engineering\
    \ Steering Group (IESG).  Further information on\n   BCPs is available in Section\
    \ 2 of RFC 5741.\n   Information about the current status of this document, any\
    \ errata,\n   and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc6489.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2012 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................2\n\
    \      1.1. Terminology and Concepts ...................................2\n  \
    \ 2. CA Key Rollover Procedure .......................................3\n   3.\
    \ Relying Party Requirements ......................................6\n   4. Reissuing\
    \ Certificates and RPKI Signed Objects ..................7\n      4.1. CA Certificates\
    \ ............................................7\n      4.2. RPKI Signed Objects\
    \ ........................................7\n   5. Security Considerations .........................................8\n\
    \   6. Acknowledgements ................................................8\n  \
    \ 7. References ......................................................9\n    \
    \  7.1. Normative References .......................................9\n      7.2.\
    \ Informative References .....................................9\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   This document describes an algorithm to be employed by a\n\
    \   Certification Authority (CA) in the Resource Public Key\n   Infrastructure\
    \ (RPKI) [RFC6480] to perform a rollover of its key\n   pair.\n   This document\
    \ defines a conservative procedure for such entities to\n   follow when performing\
    \ a key rollover.  This procedure is\n   \"conservative\" in that the CA's actions\
    \ in key rollover are not\n   intended to disrupt the normal operation of relying\
    \ parties (RPs) in\n   maintaining a local cached version of the RPKI distributed\n\
    \   repository.  Using this procedure, RPs are in a position to be able\n   to\
    \ validate all authentic objects in the RPKI using the validation\n   procedure\
    \ described in [RFC6480] at all times.\n"
- title: 1.1.  Terminology and Concepts
  contents:
  - "1.1.  Terminology and Concepts\n   It is assumed that the reader is familiar\
    \ with the terms and concepts\n   described in \"Internet X.509 Public Key Infrastructure\
    \ Certificate\n   and Certificate Revocation List (CRL) Profile\" [RFC5280], \"\
    X.509\n   Extensions for IP Addresses and AS Identifiers\" [RFC3779], the\n  \
    \ profile for RPKI Certificates [RFC6487], and the RPKI repository\n   structure\
    \ [RFC6481] .\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\"\
    , \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and\
    \ \"OPTIONAL\" in this\n   document are to be interpreted as described in [RFC2119].\n"
- title: 2.  CA Key Rollover Procedure
  contents:
  - "2.  CA Key Rollover Procedure\n   A CA in the RPKI is an entity that issues CA\
    \ and end-entity (EE)\n   certificates and Certificate Revocation Lists (CRLs).\
    \  A CA instance\n   is associated with a single key pair [RFC6487], implying\
    \ that if key\n   rollover is a regularly scheduled event, then, over time, there\
    \ will\n   be many CA instances.  The implication in the context of key rollover\n\
    \   is that, strictly speaking, a CA does not perform a key rollover per\n   se.\
    \  In order to perform the equivalent of a key rollover, the CA\n   creates a\
    \ \"new\" instance of itself, with a new key pair, and then\n   effectively substitutes\
    \ this \"new\" CA instance into the RPKI\n   hierarchy in place of the \"old\"\
    \ CA instance.\n   Note that focus of this procedure is planned key rollover,\
    \ not an\n   emergency key rollover, e.g., promoted by a suspected or detected\n\
    \   private key compromise.  However, the procedure described here is\n   applicable\
    \ in emergency key rollover situations, with the exception\n   of the \"Staging\
    \ Period\" duration.\n   There are several considerations regarding this procedure\
    \ that MUST\n   be followed by a CA performing a key rollover operation.  The\n\
    \   critical consideration is that the RPKI has potential application in\n   the\
    \ area of control of routing integrity [RFC6480], and key rollover\n   should\
    \ not cause any transient hiatus in which an RP is led to\n   incorrect conclusions\
    \ regarding the authenticity of attestations made\n   in the context of the RPKI.\
    \  A CA cannot assume that all RPs will\n   perform path validation and path discovery\
    \ in the same fashion;\n   therefore, the key rollover procedure MUST preserve\
    \ the integrity of\n   the CRL Distribution Points (CRLDP), Subject Information\
    \ Access\n   (SIA), and Authority Information Access (AIA) pointers in RPKI\n\
    \   certificates.\n   In the procedure described here, the CA creates a \"new\"\
    \ CA instance,\n   and has the associated new public key published in the form\
    \ of a\n   \"new\" CA certificate.  While the \"current\" and \"new\" CA instances\n\
    \   share a single repository publication point, each CA has its own CRL\n   and\
    \ its own manifest.  Initially, the \"new\" CA publishes an empty CRL\n   and\
    \ a manifest that contains a single entry for the CRL.  The\n   \"current\" CA\
    \ also maintains its published CRL and manifest at this\n   repository publication\
    \ point.\n   The CA performing key rollover waits for a period of time to afford\n\
    \   every RP an opportunity to discover and retrieve this \"new\" CA\n   certificate,\
    \ and store it in its local RPKI repository cache\n   instance.  This period of\
    \ time is termed the Staging Period.  During\n   this period, the CA will have\
    \ a \"new\" CA instance, with no\n   subordinate products, and a \"current\" CA\
    \ instance that has issued all\n   subordinate products.  At the expiration of\
    \ the Staging Period, the\n   \"new\" CA instance MUST replace all (valid) subordinate\
    \ products of\n   the \"current\" CA instance, overwriting the \"current\" subordinate\n\
    \   products in the CA's repository publication point.  When this process\n  \
    \ is complete, the \"current\" CA instance is retired, and the \"new\" CA\n  \
    \ instance becomes the \"current\" CA.\n   During the transition of the \"current\"\
    \ and \"new\" CA instances, the\n   \"new\" CA instance MUST reissue all subordinate\
    \ products of the\n   \"current\" CA.  The procedure described here requires that,\
    \ with the\n   exception of manifests and CRLs, the reissued subordinate products\
    \ be\n   published using the same repository publication point object names,\n\
    \   effectively overwriting the old objects with these reissued objects.\n   The\
    \ intent of this overwriting operation is to ensure that the AIA\n   pointers\
    \ of subordinate products at lower tiers in the RPKI hierarchy\n   remain correct,\
    \ and that CA key rollover does not require any\n   associated actions by any\
    \ subordinate CA.\n   There are three CA states described here:\n   CURRENT:\n\
    \      The CURRENT CA is the active CA instance used to accept and\n      process\
    \ certificate issuance and revocation requests.  The\n      starting point for\
    \ this algorithm is that the key of the CURRENT\n      CA is to be rolled over.\n\
    \   NEW:\n      The NEW CA is the CA instance that is being created.  The NEW\
    \ CA\n      is not active, and thus does not accept nor process certificate\n\
    \      issuance and revocation requests.  The NEW CA SHOULD issue a CRL\n    \
    \  and an EE certificate in association with its manifest to provide\n      a\
    \ trivial, complete, and consistent instance of a CA.\n   OLD:\n      The CA instance\
    \ is in the process of being removed.  An OLD CA\n      instance is unable to\
    \ process any certificate issuance and\n      revocation requests.  An OLD CA\
    \ instance will continue to issue\n      regularly scheduled CRLs and issue an\
    \ EE certificate as part of\n      the process of updating its manifest to reflect\
    \ the updated CRL.\n      To perform a key rollover operation, the CA MUST perform\
    \ the\n      following steps in the order given here.  Unless specified\n    \
    \  otherwise each step SHOULD be performed without any intervening\n      delay.\
    \  The process MUST be run through to completion.\n      1. Generate a new key\
    \ pair for use by the NEW CA.  Because the\n         goal of this algorithm is\
    \ key rollover, the key pair generated\n         in this step MUST be different\
    \ from the pair in use by the\n         CURRENT CA.\n      2. Generate a certificate\
    \ request with this key pair and pass the\n         request to the CA that issued\
    \ the CURRENT CA certificate.  This\n         request MUST include the same SIA\
    \ extension that is present in\n         the CURRENT CA certificate.  This request,\
    \ when satisfied, will\n         result in the publication of the NEW CA certificate.\
    \  This\n         (NEW) CA certificate will contain a subject name selected by\n\
    \         the issuer, which MUST be distinct from the subject name used\n    \
    \     in the CURRENT CA certificate.  The Certificate Practice\n         Statement\
    \ (CPS) for the issuer of the NEW CA certificate will\n         indicate the time\
    \ frame within which a certificate request is\n         expected to be processed.\n\
    \      3. Publish the NEW CA's CRL and manifest.\n         The steps involved\
    \ here are:\n         -  Wait for the issuer of the NEW CA to publish the NEW\
    \ CA\n            certificate.\n         -  As quickly as possible following the\
    \ publication of the NEW\n            CA certificate, use the key pair associated\
    \ with the NEW CA\n            to generate an initially empty CRL, and publish\
    \ this CRL in\n            the NEW CA's repository publication point.  It is\n\
    \            RECOMMENDED that the CRL for the NEW CA have a nextUpdate\n     \
    \       value that will cause the CRL to be replaced at the end of\n         \
    \   the Staging Period (see in Step 4 below).\n         -  Generate a new key\
    \ pair, and generate an associated EE\n            certificate request with an\
    \ AIA value of the NEW CA's\n            repository publication point.  Pass this\
    \ EE certificate\n            request to the NEW CA, and use the returned (single-use)\
    \ EE\n            certificate as the NEW CA's manifest EE certificate.\n     \
    \    -  Generate a manifest containing the new CA's CRL as the only\n        \
    \    entry, and sign it with the private key associated with the\n           \
    \ manifest EE certificate.  Publish the manifest at the NEW\n            CA's\
    \ repository publication point.\n         -  Destroy the private key associated\
    \ with the manifest EE\n            certificate.\n      4. The NEW CA enters a\
    \ Staging Period.  The duration of the\n         Staging Period is determined\
    \ by the CA, but it SHOULD be no\n         less than 24 hours.  The Staging Period\
    \ is intended to afford\n         an opportunity for all RPs to download the NEW\
    \ CA certificate\n         prior to publication of certificates, CRLs, and RPKI\
    \ signed\n         objects under the NEW CA.  During the Staging Period, the NEW\n\
    \         CA SHOULD reissue, but not publish, all of the products that\n     \
    \    were issued under the CURRENT CA.  This includes all CA\n         certificates,\
    \ EE certificates, and RPKI signed objects.\n         Section 4 describes how\
    \ each reissued product relates to the\n         product that it replaces.  During\
    \ the Staging Period, the\n         CURRENT CA SHOULD continue to accept and process\
    \ certificate\n         issuance requests and MUST continue to accept and process\n\
    \         certificate revocation requests.  If any certificates are\n        \
    \ issued by the CURRENT CA during the Staging Period, they MUST\n         be reissued\
    \ under the NEW CA during this period.  Any\n         certificates that are revoked\
    \ under the CURRENT CA MUST NOT be\n         reissued under the NEW CA.  As noted\
    \ above, in the case of an\n         emergency key rollover, a CA will decide\
    \ whether the 24 hour\n         minimal Staging Period interval is appropriate,\
    \ or if a shorter\n         Staging Period is needed.  As the Staging Period imposes\
    \ no\n         additional burden on Relying Parties, there is no stipulated or\n\
    \         recommended maximum Staging Period.\n      5. Upon expiration of the\
    \ Staging Period, the NEW CA MUST publish\n         the signed products that have\
    \ been reissued under the NEW CA,\n         replacing the corresponding products\
    \ issued under the CURRENT\n         CA at the NEW CA's repository publication\
    \ point.  This\n         replacement is implied by the file naming requirements\
    \ imposed\n         by [RFC6481] for these signed products.  The trivial manifest\n\
    \         for the NEW CA (which contained only one entry, for the NEW\n      \
    \   CA's CRL) is replaced by a manifest listing all of these\n         reissued,\
    \ signed products.  At this point, the CURRENT CA\n         becomes the OLD CA,\
    \ and the NEW CA becomes the CURRENT CA.  Use\n         the OLD CA to issue a\
    \ manifest that lists only the OLD CA's\n         CRL.  It is anticipated that\
    \ this step is very brief, perhaps a\n         few minutes in duration, because\
    \ the CA has reissued all of the\n         signed products during the Staging\
    \ Period.  Nonetheless, it is\n         desirable that the activities performed\
    \ in this step be viewed\n         as atomic by RPs.\n      6. Generate a certificate\
    \ revocation request for the OLD CA\n         certificate and submit it to the\
    \ issuer of that certificate.\n         When the OLD CA certificate is revoked,\
    \ the CRL for the OLD CA\n         is removed from the repository, along with\
    \ the manifest for the\n         OLD CA.  The private key for the OLD CA is destroyed.\n"
- title: 3.  Relying Party Requirements
  contents:
  - "3.  Relying Party Requirements\n   This procedure defines a Staging Period for\
    \ CAs performing a key\n   rollover operation.  This period is defined as a period\
    \ no shorter\n   than 24 hours.\n   RPs who maintain a local cache of the distributed\
    \ RPKI repository\n   MUST perform a local cache synchronization operation against\
    \ the\n   distributed RPKI repository at regular intervals of no longer than 24\n\
    \   hours.\n"
- title: 4.  Reissuing Certificates and RPKI Signed Objects
  contents:
  - "4.  Reissuing Certificates and RPKI Signed Objects\n   This section provides\
    \ rules a CA MUST use when it reissues\n   subordinate certificates and RPKI signed\
    \ objects [RFC6488] as part of\n   the key rollover process.  Note that CRLs and\
    \ manifests are not\n   reissued, per se.  They are generated for each CA instance.\
    \  A\n   manifest catalogues the contents of a publication point relative to a\n\
    \   CA instance.  A CRL lists revoked certificates relative to a CA\n   instance.\
    \  Key rollover processing for CRLs and manifests is\n   described above, in Section\
    \ 3.\n"
- title: 4.1.  CA Certificates
  contents:
  - "4.1.  CA Certificates\n   When a CA, as part of the key rollover process, reissues\
    \ a CA\n   certificate, it copies all of the field and extension values from the\n\
    \   old certificate into the new certificate.  The only exceptions to\n   this\
    \ rule are that the notBefore value MAY be set to the current date\n   and time,\
    \ and the certificate serial number MAY change.  Because the\n   reissued CA certificate\
    \ is issued by a different CA instance, it is\n   not a requirement that the certificate\
    \ serial number change in the\n   reissued certificate.  Nonetheless, the CA MUST\
    \ ensure that each\n   certificate issued under a specific CA instance (a distinct\
    \ name and\n   key) contains a unique serial number.\n"
- title: 4.2.  RPKI Signed Objects
  contents:
  - "4.2.  RPKI Signed Objects\n   An RPKI signed object is a Cryptographic Message\
    \ Syntax (CMS) signed-\n   data object, containing an EE certificate and a payload\
    \ (content)\n   [RFC6488].  When a key rollover occurs, the EE certificate for\
    \ the\n   RPKI signed object MUST be reissued, under the key of the NEW CA.  A\n\
    \   CA MAY choose to treat this EE certificate the same way that it deals\n  \
    \ with CA certificates, i.e., to copy over all fields and extensions,\n   and\
    \ MAY change only the notBefore date and the serial number.  If the\n   CA adopts\
    \ this approach, then the new EE certificate is inserted into\n   the CMS wrapper,\
    \ but the signed context remains the same.  (If the\n   signing time or binary\
    \ signing time values in the CMS wrapper are\n   non-null, they MAY be updated\
    \ to reflect the current time.)\n   Alternatively, the CA MAY elect to generate\
    \ a new key pair for this\n   EE certificate.  If it does so, the object content\
    \ MUST be resigned\n   under the private key corresponding to the EE certificate.\
    \  In this\n   case, the EE certificate MUST contain a new public key and a new\n\
    \   notBefore value, and it MAY contain a new notAfter value, but all\n   other\
    \ field and extension values, other than those relating to the\n   digital signature\
    \ and its associated certificate validation path,\n   remain unchanged.  If the\
    \ signing time or binary signing time values\n   in the CMS wrapper are non-null,\
    \ they MAY be updated to reflect the\n   current time.\n   As noted in Sections\
    \ 2.1.6.4.3 and 2.1.6.4.4 of [RFC6488], the\n   presence or absence of the signing-time\
    \ and/or the binary-signing-\n   time attribute MUST NOT affect the validity of\
    \ the RPKI signed\n   object.\n"
- title: 5.  Security Considerations
  contents:
  - "5.  Security Considerations\n   No key should be used forever.  The longer a\
    \ key is in use, the\n   greater the probability that it will have been compromised\
    \ through\n   carelessness, accident, espionage, or cryptanalysis.  Infrequent\
    \ key\n   rollover increases the risk that the rollover procedures will not be\n\
    \   followed to the appropriate level of precision, increasing the risk\n   of\
    \ operational failure of some form in the key rollover process.\n   Regular scheduling\
    \ of key rollover is generally considered to be a\n   part of a prudent key management\
    \ practice.  However, key rollover\n   does impose additional operational burdens\
    \ on both the CA and the\n   population of RPs.\n   These considerations imply\
    \ that in choosing lifetimes for the keys it\n   manages, a CA should balance\
    \ security and operational impact (on\n   RPs).  A CA should perform key rollover\
    \ at regularly scheduled\n   intervals.  These intervals should be frequent enough\
    \ to minimize the\n   risks associated with key compromise (noted above) and to\
    \ maintain\n   local operational proficiency with respect to the key rollover\n\
    \   process.  However, key lifetimes should be sufficiently long so that\n   the\
    \ (system-wide) load associated with key rollover events (across\n   the entire\
    \ RPKI) does not impose an excessive burden upon the\n   population of RPs.  RPs\
    \ are encouraged to maintain an accurate local\n   cache of the current state\
    \ of the RPKI, which implies frequent\n   queries to the RPKI repository system\
    \ to detect changes.  When a CA\n   rekeys, it changes many signed objects, thus\
    \ impacting all RPs.\n"
- title: 6.  Acknowledgements
  contents:
  - "6.  Acknowledgements\n   The authors would like to acknowledge the review comments\
    \ of Tim\n   Bruijnzeels and Sean Turner in preparing this document.\n"
- title: 7.  References
  contents:
  - '7.  References

    '
- title: 7.1.  Normative References
  contents:
  - "7.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use in\
    \ RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119, March\
    \ 1997.\n   [RFC3779]  Lynn, C., Kent, S., and K. Seo, \"X.509 Extensions for\
    \ IP\n              Addresses and AS Identifiers\", RFC 3779, June 2004.\n   [RFC5280]\
    \  Cooper, D., Santesson, S., Farrell, S., Boeyen, S.,\n              Housley,\
    \ R., and W. Polk, \"Internet X.509 Public Key\n              Infrastructure Certificate\
    \ and Certificate Revocation List\n              (CRL) Profile\", RFC 5280, May\
    \ 2008.\n   [RFC6480]  Lepinski, M. and S. Kent, \"An Infrastructure to Support\n\
    \              Secure Internet Routing\", RFC 6480, February 2012.\n   [RFC6481]\
    \  Huston, G., Loomans, R., and G. Michaelson, \"A Profile for\n             \
    \ Resource Certificate Repository Structure\", RFC 6481,\n              February\
    \ 2012.\n   [RFC6487]  Huston, G., Michaelson, G., and R. Loomans, \"A Profile\
    \ for\n              X.509 PKIX Resource Certificates\", RFC 6487, February\n\
    \              2012.\n"
- title: 7.2.  Informative References
  contents:
  - "7.2.  Informative References\n   [RFC6488]  Lepinski, M., Chi, A., and S. Kent,\
    \ \"Signed Object\n              Template for the Resource Public Key Infrastructure\n\
    \              (RPKI)\", RFC 6488, February 2012.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Geoff Huston\n   APNIC\n   EMail: gih@apnic.net\n   URI:\
    \   http://www.apnic.net\n   George Michaelson\n   APNIC\n   EMail: ggm@apnic.net\n\
    \   URI:   http://www.apnic.net\n   Stephen Kent\n   BBN Technologies\n   10 Moulton\
    \ St.\n   Cambridge, MA  02138\n   USA\n   EMail: kent@bbn.com\n"
