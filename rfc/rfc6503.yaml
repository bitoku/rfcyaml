- title: __initial_text__
  contents:
  - '             Centralized Conferencing Manipulation Protocol

    '
- title: Abstract
  contents:
  - "Abstract\n   The Centralized Conferencing Manipulation Protocol (CCMP) allows\
    \ a\n   Centralized Conferencing (XCON) system client to create, retrieve,\n \
    \  change, and delete objects that describe a centralized conference.\n   CCMP\
    \ is a means to control basic and advanced conference features\n   such as conference\
    \ state and capabilities, participants, relative\n   roles, and details.  CCMP\
    \ is a stateless, XML-based, client server\n   protocol that carries, in its request\
    \ and response messages,\n   conference information in the form of XML documents\
    \ and fragments\n   conforming to the centralized conferencing data model schema.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This\
    \ document is a product of the Internet Engineering Task Force\n   (IETF).  It\
    \ represents the consensus of the IETF community.  It has\n   received public\
    \ review and has been approved for publication by the\n   Internet Engineering\
    \ Steering Group (IESG).  Further information on\n   Internet Standards is available\
    \ in Section 2 of RFC 5741.\n   Information about the current status of this document,\
    \ any errata,\n   and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc6503.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2012 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................4\n\
    \   2. Conventions and Terminology .....................................5\n  \
    \ 3. XCON Conference Control System Architecture .....................5\n    \
    \  3.1. Conference Objects .........................................7\n      3.2.\
    \ Conference Users ...........................................7\n   4. Protocol\
    \ Overview ...............................................8\n      4.1. Protocol\
    \ Operations ........................................9\n      4.2. Data Management\
    \ ...........................................10\n      4.3. Data Model Compliance\
    \ .....................................11\n      4.4. Implementation Approach\
    \ ...................................12\n   5. CCMP Messages ..................................................13\n\
    \      5.1. CCMP Request Message Type .................................13\n  \
    \    5.2. CCMP Response Message Type ................................15\n    \
    \  5.3. Detailed Messages .........................................17\n      \
    \     5.3.1. blueprintsRequest and blueprintsResponse ...........20\n        \
    \   5.3.2. confsRequest and confsResponse .....................22\n          \
    \ 5.3.3. blueprintRequest and blueprintResponse .............24\n           5.3.4.\
    \ confRequest and confResponse .......................26\n           5.3.5. usersRequest\
    \ and usersResponse .....................30\n           5.3.6. userRequest and\
    \ userResponse .......................32\n           5.3.7. sidebarsByValRequest\
    \ and sidebarsByValResponse .....37\n           5.3.8. sidebarByValRequest and\
    \ sidebarByValResponse .......39\n           5.3.9. sidebarsByRefRequest and sidebarsByRefResponse\
    \ .....42\n           5.3.10. sidebarByRefRequest and sidebarByRefResponse ......44\n\
    \           5.3.11. extendedRequest and extendedResponse ..............47\n  \
    \         5.3.12. optionsRequest and optionsResponse ................49\n    \
    \  5.4. CCMP Response Codes .......................................53\n   6. A\
    \ Complete Example of CCMP in Action ...........................57\n      6.1.\
    \ Alice Retrieves the Available Blueprints ..................58\n      6.2. Alice\
    \ Gets Detailed Information about a Specific\n           Blueprint .................................................60\n\
    \      6.3. Alice Creates a New Conference through a Cloning\n           Operation\
    \ .................................................62\n      6.4. Alice Updates\
    \ Conference Information ......................65\n      6.5. Alice Inserts a\
    \ List of Users into the Conference Object ..66\n      6.6. Alice Joins the Conference\
    \ ................................68\n      6.7. Alice Adds a New User to the\
    \ Conference ...................70\n      6.8. Alice Asks for the CCMP Server\
    \ Capabilities ...............72\n      6.9. Alice Makes Use of a CCMP Server\
    \ Extension ................75\n   7. Locating a Conference Server ...................................78\n\
    \   8. Managing Notifications .........................................79\n  \
    \ 9. HTTP Transport .................................................80\n   10.\
    \ Security Considerations .......................................82\n      10.1.\
    \ Assuring That the Proper Conference Server Has\n            Been Contacted ...........................................83\n\
    \      10.2. User Authentication and Authorization ....................84\n  \
    \    10.3. Security and Privacy of Identity .........................85\n    \
    \  10.4. Mitigating DoS Attacks ...................................86\n   11.\
    \ XML Schema ....................................................87\n   12. IANA\
    \ Considerations ..........................................105\n      12.1. URN\
    \ Sub-Namespace Registration ..........................105\n      12.2. XML Schema\
    \ Registration .................................106\n      12.3. MIME Media Type\
    \ Registration for\n            'application/ccmp+xml' ..................................106\n\
    \      12.4. DNS Registrations .......................................107\n  \
    \         12.4.1. Registration of a Conference Server\n                   Application\
    \ Service Tag ..........................108\n           12.4.2. Registration of\
    \ a Conference Server\n                   Application Protocol Tag for CCMP ................108\n\
    \      12.5. CCMP Protocol Registry ..................................108\n  \
    \         12.5.1. CCMP Message Types ...............................109\n    \
    \       12.5.2. CCMP Response Codes ..............................111\n   13.\
    \ Acknowledgments ..............................................113\n   14. References\
    \ ...................................................113\n      14.1. Normative\
    \ References ....................................113\n      14.2. Informative\
    \ References ..................................114\n   Appendix A.  Evaluation\
    \ of Other Protocol Models and\n                Transports Considered for CCMP\
    \ ......................116\n     A.1.  Using SOAP for CCMP ......................................117\n\
    \     A.2.  A RESTful Approach for CCMP ..............................117\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   \"A Framework for Centralized Conferencing\" [RFC5239] (XCON\
    \ framework)\n   defines a signaling-agnostic framework, naming conventions, and\n\
    \   logical entities required for building advanced conferencing systems.\n  \
    \ The XCON framework introduces the conference object as a logical\n   representation\
    \ of a conference instance, representing the current\n   state and capabilities\
    \ of a conference.\n   The Centralized Conferencing Manipulation Protocol (CCMP)\
    \ defined in\n   this document allows authenticated and authorized users to create,\n\
    \   manipulate, and delete conference objects.  Operations on conferences\n  \
    \ include adding and removing participants, changing their roles, as\n   well\
    \ as adding and removing media streams and associated endpoints.\n   CCMP implements\
    \ the client-server model within the XCON framework,\n   with the conferencing\
    \ client and conference server acting as client\n   and server, respectively.\
    \  CCMP uses HTTP [RFC2616] as the protocol\n   to transfer requests and responses,\
    \ which contain the domain-specific\n   XML-encoded data objects defined in [RFC6501]\
    \ \"Conference Information\n   Data Model for Centralized Conferencing (XCON)\"\
    .\n   Section 2 clarifies the conventions and terminology used in the\n   document.\
    \  Section 3 provides an overview of the conference control\n   functionality\
    \ of the XCON framework, together with a description of\n   the main targets CCMP\
    \ deals with, namely conference objects and\n   conference users.  A general description\
    \ of the operations associated\n   with protocol messages is given in Section\
    \ 4 together with\n   implementation details.  Section 5 delves into the details\
    \ of\n   specific CCMP messages.  A complete, non-normative, example of the\n\
    \   operation of CCMP, describing a typical call flow associated with\n   conference\
    \ creation and manipulation, is provided in Section 6.  A\n   survey of the methods\
    \ that can be used to locate a conference server\n   is provided in Section 7,\
    \ and Section 8 discusses potential\n   approaches to notifications management.\
    \  CCMP transport over HTTP is\n   highlighted in Section 9.  Security considerations\
    \ are presented in\n   Section 10.  Finally, Section 11 provides the XML schema.\n"
- title: 2.  Conventions and Terminology
  contents:
  - "2.  Conventions and Terminology\n   The key words \"MUST\", \"MUST NOT\", \"\
    REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\"\
    , \"NOT RECOMMENDED\", \"MAY\", and\n   \"OPTIONAL\" in this document are to be\
    \ interpreted as described in\n   [RFC2119].\n   In addition to the terms defined\
    \ in \"A Framework for Centralized\n   Conferencing\" [RFC5239], this document\
    \ uses the following terms and\n   acronyms:\n   XCON-aware client:   An XCON\
    \ conferencing system client that is able\n      to issue CCMP requests.\n   First-Party\
    \ Request:   A request issued by the client to manipulate\n      its own conferencing\
    \ data.\n   Third-Party Request:   A request issued by a client to manipulate\
    \ the\n      conference data of another client.\n"
- title: 3.  XCON Conference Control System Architecture
  contents:
  - "3.  XCON Conference Control System Architecture\n   CCMP supports the XCON framework.\
    \  Figure 1 depicts a subset of the\n   \"Conferencing System Logical Decomposition\"\
    \ architecture from the\n   XCON framework document.  It illustrates the role\
    \ that CCMP assumes\n   within the overall centralized architecture.\n   ........................................................\n\
    \   .  Conferencing System                                 .\n   .           \
    \                                           .\n   .        +---------------------------------------+\
    \     .\n   .        |   C O N F E R E N C E   O B J E C T   |     .\n   .   \
    \   +-+-------------------------------------+ |     .\n   .      |   C O N F E\
    \ R E N C E   O B J E C T   | |     .\n   .    +-+-------------------------------------+\
    \ | |     .\n   .    |   C O N F E R E N C E   O B J E C T   | | |     .\n   .\
    \    |                                       | |-+     .\n   .    |          \
    \                             |-+       .\n   .    +---------------------------------------+\
    \         .\n   .                        ^                             .\n   .\
    \                        |                             .\n   .               \
    \         v                             .\n   .               +-------------------+\
    \                  .\n   .               | Conference Control|               \
    \   .\n   .               | Server            |                  .\n   .     \
    \          +-------------------+                  .\n   .                    \
    \    ^                             .\n   .........................|..............................\n\
    \                            |\n                            |Centralized\n   \
    \                         |Conferencing\n                            |Manipulation\n\
    \                            |Protocol\n                            |\n   .........................|..............................\n\
    \   .                        V                             .\n   .           \
    \     +----------------+                    .\n   .                | Conference\
    \     |                    .\n   .                | Control        |         \
    \           .\n   .                | Client         |                    .\n \
    \  .                +----------------+                    .\n   .            \
    \                                          .\n   .  Conferencing Client      \
    \                           .\n   ........................................................\n\
    \                 Figure 1: Conferencing Client Interaction\n   The Centralized\
    \ Conferencing Manipulation Protocol (CCMP) allows the\n   conference control\
    \ client (conferencing client) to interface with the\n   conference object maintained\
    \ by the conferencing system, as depicted\n   in Figure 1.  Note that additional\
    \ functionality of the conferencing\n   client and conferencing system is discussed\
    \ in the XCON framework and\n   related documents.\n   This section provides details\
    \ of the identifiers REQUIRED to address\n   and manage the clients associated\
    \ with a conferencing system using\n   CCMP.\n"
- title: 3.1.  Conference Objects
  contents:
  - "3.1.  Conference Objects\n   Conference objects feature a simple dynamic inheritance-and-override\n\
    \   mechanism.  Conference objects are linked into a tree known as a\n   \"cloning\
    \ tree\" (see Section 7.1 of [RFC5239]).  Each cloning tree\n   node inherits\
    \ attributes from its parent node.  The roots of these\n   inheritance trees are\
    \ conference templates also known as\n   \"blueprints\".  Nodes in the inheritance\
    \ tree can be active\n   conferences or simply descriptions that do not currently\
    \ have any\n   resources associated with them (i.e., conference reservations).\
    \  An\n   object can mark certain of its properties as unalterable, so that\n\
    \   they cannot be overridden.  Per the framework, a client may specify a\n  \
    \ parent object (a conference or blueprint) from which to inherit\n   values when\
    \ a conference is created using the conference control\n   protocol.\n   Conference\
    \ objects are uniquely identified by the XCON-URI within the\n   scope of the\
    \ conferencing system.  The XCON-URI is introduced in the\n   XCON framework and\
    \ defined in the XCON common data model.\n   Conference objects are comprehensively\
    \ represented through XML\n   documents compliant with the XML schema defined\
    \ in the XCON data\n   model [RFC6501].  The root element of such documents, called\n\
    \   <conference-info>, is of type \"conference-type\".  It encompasses\n   other\
    \ XML elements describing different conference features and users\n   as well.\
    \  Using CCMP, conferencing clients can use these XML\n   structures to express\
    \ their preferences in creating or updating a\n   conference.  A conference server\
    \ can convey conference information\n   back to the clients using the XML elements.\n"
- title: 3.2.  Conference Users
  contents:
  - "3.2.  Conference Users\n   Each conference can have zero or more users.  All\
    \ conference\n   participants are users, but some users may have only administrative\n\
    \   functions and do not contribute or receive media.  Users are added\n   one\
    \ user at a time to simplify error reporting.  When a conference is\n   cloned\
    \ from a parent object, users are inherited as well, so that it\n   is easy to\
    \ set up a conference that has the same set of participants\n   or a common administrator.\
    \  The conference server creates individual\n   users, assigning them a unique\
    \ conference user identifier (XCON-\n   USERID).  The XCON-USERID as identifier\
    \ of each conferencing system\n   client is introduced in the XCON framework and\
    \ defined in the XCON\n   common data model.  Each CCMP request, with an exception\
    \ pointed out\n   in Section 5.3.6 representing the case of a user at his first\n\
    \   entrance in the system as a conference participant, must carry the\n   XCON-USERID\
    \ of the requestor in the proper <confUserID> parameter.\n   The XCON-USERID acts\
    \ as a pointer to the user's profile as a\n   conference actor, e.g., her signaling\
    \ URI and other XCON protocol\n   URIs in general, her role (moderator, participant,\
    \ observer, etc.),\n   her display text, her joining information, and so on. \
    \ A variety of\n   elements defined in the common <conference-info> element as\
    \ specified\n   in the XCON data model are used to describe the users related\
    \ to a\n   conference including the <users> element, as well as each <user>\n\
    \   element included within it.  For example, it is possible to determine\n  \
    \ how a specific user expects and is allowed to join a conference by\n   looking\
    \ at the <allowed-users-list> in <users>: each <target> element\n   involved in\
    \ such a list represents a user and shows a 'method'\n   attribute defining how\
    \ the user is expected to join the conference,\n   i.e., \"dial-in\" for users\
    \ that are allowed to dial, \"dial-out\" for\n   users that the conference focus\
    \ will be trying to reach (with\n   \"dial-in\" being the default mode).  If the\
    \ conference is currently\n   active, dial-out users are contacted immediately;\
    \ otherwise, they are\n   contacted at the start of the conference.  CCMP, acting\
    \ as the\n   conference control protocol, provides a means to manipulate these\
    \ and\n   other kinds of user-related features.\n   As a consequence of an explicit\
    \ user registration to a specific XCON\n   conferencing system, conferencing clients\
    \ are usually provided\n   (besides the XCON-USERID) with log-in credentials (i.e.,\
    \ username and\n   password).  Such credentials can be used to authenticate the\
    \ XCON-\n   aware client issuing CCMP requests.  Thus, both username and password\n\
    \   should be carried in a CCMP request as part of the \"subject\"\n   parameter\
    \ whenever a registered conferencing client wishes to contact\n   a CCMP server.\
    \  CCMP does not maintain a user's subscriptions at the\n   conference server;\
    \ hence, it does not provide any specific mechanism\n   allowing clients to register\
    \ their conferencing accounts.  The\n   \"subject\" parameter is just used for\
    \ carrying authentication data\n   associated with pre-registered clients, with\
    \ the specific\n   registration modality outside the scope of this document.\n"
- title: 4.  Protocol Overview
  contents:
  - "4.  Protocol Overview\n   CCMP is a client-server, XML-based protocol for user\
    \ creation,\n   retrieval, modification, and deletion of conference objects. \
    \ CCMP is\n   a stateless protocol, such that implementations can safely handle\n\
    \   transactions independently from each other.  CCMP messages are XML\n   documents\
    \ or XML document fragments compliant with the XCON data\n   model representation\
    \ [RFC6501].\n   Section 4.1 specifies the basic operations that can create, retrieve,\n\
    \   modify, and delete conference-related information in a centralized\n   conference.\
    \  The core set of objects manipulated by CCMP includes\n   conference blueprints,\
    \ the conference object, users, and sidebars.\n   Each operation in the protocol\
    \ model, as summarized in Section 4.1,\n   is atomic and either succeeds or fails\
    \ as a whole.  The conference\n   server MUST ensure that the operations are atomic\
    \ in that the\n   operation invoked by a specific conferencing client completes\
    \ prior\n   to another client's operation on the same conference object.  While\n\
    \   the details for this data locking functionality are out of scope for\n   the\
    \ CCMP specification and are implementation specific for a\n   conference server,\
    \ some core functionality for ensuring the integrity\n   of the data is provided\
    \ by CCMP as described in Section 4.2.\n   While the XML documents that are carried\
    \ in CCMP need to comply with\n   the XCON data model, there are situations in\
    \ which the values for\n   mandatory elements are unknown by the client.  The\
    \ mechanism for\n   ensuring compliance with the data model in these cases is\
    \ described\n   in Section 4.3.\n   CCMP is completely independent from underlying\
    \ protocols, which means\n   that there can be different ways to carry CCMP messages\
    \ from a\n   conferencing client to a conference server.  The specification\n\
    \   describes the use of HTTP as a transport solution, including CCMP\n   requests\
    \ in HTTP POST messages and CCMP responses in HTTP 200 OK\n   replies.  This implementation\
    \ approach is further described in\n   Section 4.4.\n"
- title: 4.1.  Protocol Operations
  contents:
  - "4.1.  Protocol Operations\n   The main operations provided by CCMP belong in\
    \ four general\n   categories:\n   create:  for the creation of a conference object,\
    \ a conference user,\n      a sidebar, or a blueprint.\n   retrieve:  to get information\
    \ about the current state of either a\n      conference object (be it an actual\
    \ conference, a blueprint, or a\n      sidebar) or a conference user.  A retrieve\
    \ operation can also be\n      used to obtain the XCON-URIs of the current conferences\
    \ (active or\n      registered) handled by the conferencing server and/or the\n\
    \      available blueprints.\n   update:  to modify the current features of a\
    \ specified conference or\n      conference user.\n   delete:  to remove from\
    \ the system a conference object or a\n      conference user.\n   Thus, the main\
    \ targets of CCMP operations are as follows:\n   o  conference objects associated\
    \ with either active or registered\n      conferences,\n   o  conference objects\
    \ associated with blueprints,\n   o  conference objects associated with sidebars,\
    \ both embedded in the\n      main conference (i.e., <entry> elements in <sidebars-by-value>)\n\
    \      and external to it (i.e., whose XCON-URIs are included in the\n      <entry>\
    \ elements of <sidebars-by-ref>),\n   o  <user> elements associated with conference\
    \ users, and\n   o  the list of XCON-URIs related to conferences and blueprints\n\
    \      available at the server, for which only retrieval operations are\n    \
    \  allowed.\n"
- title: 4.2.  Data Management
  contents:
  - "4.2.  Data Management\n   The XCON framework defines a model whereby the conference\
    \ server\n   centralizes and maintains the conference information.  Since multiple\n\
    \   clients can modify the same conference objects, a conferencing client\n  \
    \ might not have the latest version of a specific conference object\n   when it\
    \ initiates operations.  To determine whether the client has\n   the most up-to-date\
    \ conference information, CCMP defines a versioning\n   approach.  Each conference\
    \ object is associated with a version\n   number.  All CCMP response messages\
    \ containing a conference document\n   (or a fragment thereof) MUST contain a\
    \ <version> parameter.  When a\n   client sends an update message to the server,\
    \ which includes\n   modifications to a conference object, if the modifications\
    \ are all\n   successfully applied, the server MUST return a response, with a\n\
    \   <response-code> of \"200\", containing the version number of the\n   modified\
    \ object.  With this approach, a client working on version \"X\"\n   of a conference\
    \ object that receives a response, with a <response-\n   code> of \"200\", with\
    \ a version number that is \"X+1\" can be certain\n   that the version it manipulated\
    \ was the most up to date.  However, if\n   the response contains a version that\
    \ is at least \"X+2\", the client\n   knows that the object modified by the server\
    \ was more up to date than\n   the object the client was manipulating.  In order\
    \ to ensure that the\n   client always has the latest version of the modified\
    \ object, the\n   client can send a request to the conference server to retrieve\
    \ the\n   conference object.  The client can then update the relevant data\n \
    \  elements in the conference object prior to invoking a specific\n   operation.\
    \  Note that a client subscribed to the XCON event package\n   [RFC6502] notifications\
    \ about conference object modifications, will\n   receive the most up-to-date\
    \ version of that object upon receipt of a\n   notification.\n   The \"version\"\
    \ parameter is OPTIONAL for requests, since it is not\n   needed by the server:\
    \ as long as the required modifications can be\n   applied to the target conference\
    \ object without conflicts, the server\n   does not care whether the client has\
    \ stored an up-to-date view of the\n   information.  In addition, to ensure the\
    \ integrity of the data, the\n   conference server first checks all the parameters,\
    \ before making any\n   changes to the internal representation of the conference\
    \ object.  For\n   example, it would be undesirable to change the <subject> of\
    \ the\n   conference, but then detect an invalid URI in one of the <service-\n\
    \   uris> and abort the remaining updates.\n"
- title: 4.3.  Data Model Compliance
  contents:
  - "4.3.  Data Model Compliance\n   The XCON data model [RFC6501] identifies some\
    \ elements and attributes\n   as mandatory.  Since the XML documents carried in\
    \ the body of the\n   CCMP requests and responses need to be compliant with the\
    \ XCON data\n   model, there can be a problem in cases of client-initiated\n \
    \  operations, such as the initial creation of conference objects and\n   cases\
    \ whereby a client updates a conference object adding new\n   elements, such as\
    \ a new user.  In such cases, not all of the\n   mandatory data can be known in\
    \ advance by the client issuing a CCMP\n   request.  As an example, a client cannot\
    \ know, at the time it issues\n   a conference creation request, the XCON-URI\
    \ that the server will\n   assign to the yet-to-be-created conference; hence,\
    \ it is not able to\n   populate the mandatory 'entity' attribute of the conference\
    \ document\n   contained in the request with the correct value.  To solve this\n\
    \   issue, the CCMP client fills all mandatory data model fields, for\n   which\
    \ no value is available at the time the request is constructed,\n   with placeholder\
    \ values in the form of a wildcard string,\n   AUTO_GENERATE_X (all uppercase),\
    \ with X being a unique numeric index\n   for each data model field for which\
    \ the value is unknown.  This form\n   of wildcard string is chosen, rather than\
    \ the use of random unique\n   strings (e.g., FOO_BAR_LA) or non-numeric values\
    \ for X, to simplify\n   processing at the server.  The values of AUTO_GENERATE_X\
    \ are only\n   unique within the context of the specific request.  The placeholder\n\
    \   AUTO_GENERATE_X values MUST be within the value part of an attribute\n   or\
    \ element (e.g., <userinfo\n   entity=\"xcon-userid:AUTO_GENERATE_1@example.com\"\
    >).\n   When the server receives requests containing values in the form of\n \
    \  AUTO_GENERATE_X, the server does the following:\n   (a)  Generates the proper\
    \ identifier for each instance of\n        AUTO_GENERATE_X in the document.  If\
    \ an instance of\n        AUTO_GENERATE_X is not within the value part of the\
    \ attribute/\n        element, the server MUST send a <response-code> of \"400\
    \ Bad\n        Request\".  In cases where AUTO_GENERATE_X appears only in the\n\
    \        user part of a URI (i.e., in the case of XCON-USERIDs or XCON-\n    \
    \    URIs), the server needs to ensure that the domain name is one\n        that\
    \ is within the server's domain of responsibility.  If the\n        domain name\
    \ is not within the server's domain of responsibility,\n        then the server\
    \ MUST send a <response-code> of \"427 Invalid\n        Domain Name\".  The server\
    \ MUST replace each instance of a\n        specific wildcard field (e.g., AUTO_GENERATE_1)\
    \ with the same\n        identifier.  The identifiers MUST be unique for each\
    \ instance of\n        AUTO_GENERATE_X within the same XML document received in\
    \ the\n        request; for example, the value that replaces AUTO_GENERATE_1\n\
    \        MUST NOT be the same as the value that replaces AUTO_GENERATE_2.\n  \
    \      Note that the values that replace the instances of\n        AUTO_GENERATE_X\
    \ are not the same across all conference objects;\n        for example, different\
    \ values can be used to replace\n        AUTO_GENERATE_1 in two different documents.\n\
    \   (b)  Sends a response in which all values of AUTO_GENERATE_X received\n  \
    \      in the request have been replaced by the newly created one(s).\n   With\
    \ this approach, compatibility with the data model requirements is\n   maintained,\
    \ while allowing for client-initiated manipulation of\n   conference objects at\
    \ the server's side.  Note that the use of this\n   mechanism could be avoided\
    \ in come cases by using multiple\n   operations, such as creating a new user\
    \ and then adding the new user\n   to an existing conference.  However, the AUTO_GENERATE_X\
    \ mechanism\n   allows a single operation to be used to effect the same change\
    \ on the\n   conference object.\n"
- title: 4.4.  Implementation Approach
  contents:
  - "4.4.  Implementation Approach\n   CCMP is implemented using HTTP, placing the\
    \ CCMP request messages\n   into the body of an HTTP POST operation and placing\
    \ the CCMP\n   responses into the body of the HTTP response messages.  A non-\n\
    \   exhaustive summary of the other approaches that were considered and\n   the\
    \ perceived advantages of the HTTP solution described in this\n   document are\
    \ provided in Appendix A.\n   Most CCMP commands can pend indefinitely, thus increasing\
    \ the\n   potential that pending requests can continue to increase when a\n  \
    \ server is receiving more requests than it can process within a\n   specific\
    \ time period.  In this case, a server SHOULD return a\n   <response-code> of\
    \ \"510\" to the pending requests.  In addition, to\n   mitigate the situation,\
    \ clients MUST NOT wait indefinitely for a\n   response and MUST implement a timer\
    \ such that when it expires, the\n   client MUST close the connection.  Thirty\
    \ seconds is RECOMMENDED as\n   the default value for this timer.  Sixty seconds\
    \ is considered a\n   reasonable upper range.  Note that there may be cases where\
    \ a\n   response message is lost and a request has been successful (e.g.,\n  \
    \ user added to a conference); yet, the client will be unaware and\n   close the\
    \ connection.  However, as described in Section 4.2, there is\n   a versioning\
    \ mechanism for the conference objects; thus, there is a\n   mechanism for the\
    \ conference object stored by the client to be\n   brought up to date.\n   CCMP\
    \ messages have a MIME-type of \"application/ccmp+xml\", which\n   appears inside\
    \ the Content-Type and Accept header fields of HTTP\n   requests and responses.\
    \  The XML documents in the CCMP messages MUST\n   be encoded in UTF-8.  This\
    \ specification follows the recommendations\n   and conventions described in [RFC3023],\
    \ including the naming\n   convention of the type ('+xml' suffix) and the usage\
    \ of the 'charset'\n   parameter.  The 'charset' parameter MUST be included with\
    \ the XML\n   document.  Section 9 provides the complete requirements for an HTTP\n\
    \   implementation to support CCMP.\n"
- title: 5.  CCMP Messages
  contents:
  - "5.  CCMP Messages\n   CCMP messages are either requests or responses.  The general\
    \ CCMP\n   request message is defined in Section 5.1.  The general CCMP response\n\
    \   message is defined in Section 5.2.  The details of the specific\n   message\
    \ type that is carried in the CCMP request and response\n   messages are described\
    \ in Section 5.3.  CCMP response codes are\n   listed in Section 5.4.\n"
- title: 5.1.  CCMP Request Message Type
  contents:
  - "5.1.  CCMP Request Message Type\n   A CCMP request message is comprised of the\
    \ following parameters:\n   subject:  An OPTIONAL parameter containing the username\
    \ and password\n      of the client registered at the conferencing system.  Each\
    \ user\n      who subscribes to the conferencing system is assumed to be\n   \
    \   equipped with those credentials and SHOULD enclose them in each\n      CCMP\
    \ request she issues.  These fields can be used to control that\n      the user\
    \ sending the CCMP request has the authority to perform the\n      requested operation.\
    \  The same fields can also be used for other\n      authorization and authentication\
    \ procedures.\n   confUserID:  An OPTIONAL parameter containing the XCON-USERID\
    \ of the\n      client.  The XCON-USERID is used to identify any conferencing\n\
    \      client within the context of the conferencing system and it is\n      assigned\
    \ by the conference server for each conferencing client who\n      interacts with\
    \ it.  The <confUserID> parameter is REQUIRED in the\n      CCMP request and response\
    \ messages with the exception of the case\n      of a user who has no XCON-USERID\
    \ and who wants to enter, via CCMP,\n      a conference whose identifier is known.\
    \  In such case, a side\n      effect of the request is that the user is provided\
    \ with an\n      appropriate XCON-USERID.  An example of the aforementioned case\n\
    \      will be provided in Section 5.3.6.\n   confObjID:  An OPTIONAL parameter\
    \ containing the XCON-URI of the\n      target conference object.\n   operation:\
    \  An OPTIONAL parameter refining the type of specialized\n      request message.\
    \  The <operation> parameter is REQUIRED in all\n      requests except for the\
    \ blueprintsRequest and confsRequest\n      specialized messages.\n   conference-password:\
    \  The parameter is OPTIONAL except that it MUST\n      be inserted in all requests\
    \ whose target conference object is\n      password-protected i.e., contains the\
    \ <conference-password>\n      element in [RFC6501]).  A CCMP <response-code>\
    \ of \"423\" MUST be\n      returned if a conference-password is not included\
    \ in the request\n      when required.\n   specialized request message:  This\
    \ is a specialization of the generic\n      request message (e.g., blueprintsRequest),\
    \ containing parameters\n      that are dependent on the specific request sent\
    \ to the server.  A\n      specialized request message MUST be included in the\
    \ CCMP request\n      message.  The details for the specialized messages and associated\n\
    \      parameters are provided in Section 5.3.\n   <!-- Definition of CCMP Request\
    \ -->\n   <xs:element name=\"ccmpRequest\" type=\"ccmp-request-type\" />\n   <!--\
    \ Definition of ccmp-request-type-->\n   <xs:complexType name=\"ccmp-request-type\"\
    >\n       <xs:sequence>\n           <xs:element name=\"ccmpRequest\"\n       \
    \                type=\"ccmp-request-message-type\" />\n       </xs:sequence>\n\
    \   </xs:complexType>\n    <!--  Definition of ccmp-request-message-type -->\n\
    \    <xs:complexType abstract=\"true\"\n                    name=\"ccmp-request-message-type\"\
    >\n        <xs:sequence>\n            <xs:element name=\"subject\" type=\"subject-type\"\
    \n                        minOccurs=\"0\" maxOccurs=\"1\" />\n            <xs:element\
    \ name=\"confUserID\" type=\"xs:string\"\n                        minOccurs=\"\
    0\" maxOccurs=\"1\" />\n            <xs:element name=\"confObjID\" type=\"xs:string\"\
    \n                        minOccurs=\"0\" maxOccurs=\"1\" />\n            <xs:element\
    \ name=\"operation\" type=\"operationType\"\n                        minOccurs=\"\
    0\" maxOccurs=\"1\" />\n            <xs:element name=\"conference-password\" type=\"\
    xs:string\"\n                        minOccurs=\"0\" maxOccurs=\"1\" />\n    \
    \        <xs:any namespace=\"##other\" processContents=\"lax\"\n             \
    \       minOccurs=\"0\" maxOccurs=\"unbounded\"/>\n        </xs:sequence>\n  \
    \      <xs:anyAttribute namespace=\"##any\" processContents=\"lax\"/>\n   </xs:complexType>\n\
    \               Figure 2: Structure of CCMP Request Messages\n"
- title: 5.2.  CCMP Response Message Type
  contents:
  - "5.2.  CCMP Response Message Type\n   A CCMP response message is comprised of\
    \ the following parameters:\n   confUserID:  A REQUIRED parameter in CCMP response\
    \ messages\n      containing the XCON-USERID of the conferencing client that issued\n\
    \      the CCMP request message.\n   confObjID:  An OPTIONAL parameter containing\
    \ the XCON-URI of the\n      target conference object.\n   operation:  An OPTIONAL\
    \ parameter for CCMP response messages.  This\n      parameter is REQUIRED in\
    \ all responses except for the\n      \"blueprintsResponse\" and \"confsResponse\"\
    \ specialized messages.\n   response-code:  A REQUIRED parameter containing the\
    \ response code\n      associated with the request.  The response code MUST be\
    \ chosen\n      from the codes listed in Section 5.4.\n   response-string:  An\
    \ OPTIONAL reason string associated with the\n      response.  In case of an error,\
    \ in particular, this string can be\n      used to provide the client with detailed\
    \ information about the\n      error itself.\n   version:  An OPTIONAL parameter\
    \ reflecting the current version number\n      of the conference object referred\
    \ by the confObjID.  This number\n      is contained in the 'version' attribute\
    \ of the <conference-info>\n      element related to that conference.  This parameter\
    \ is REQUIRED in\n      CCMP response messages and SHOULD NOT be included in CCMP\
    \ request\n      messages.\n   specialized response message:  This is specialization\
    \ of the generic\n      response message, containing parameters that are dependent\
    \ on the\n      specific request sent to the server (e.g., \"blueprintsResponse\"\
    ).\n      A specialized response message SHOULD be included in the CCMP\n    \
    \  response message, except in an error situation where the CCMP\n      request\
    \ message did not contain a valid specialized message.  In\n      this case, the\
    \ conference server MUST return a <response-code> of\n      \"400\".  The details\
    \ for the specialized messages and associated\n      parameters are provided in\
    \ Section 5.3.\n   <!-- Definition of CCMP Response -->\n   <xs:element name=\"\
    ccmpResponse\" type=\"ccmp-response-type\" />\n   <!-- Definition of ccmp-response-type\
    \ -->\n   <xs:complexType name=\"ccmp-response-type\">\n       <xs:sequence>\n\
    \           <xs:element name=\"ccmpResponse\"\n                       type=\"\
    ccmp-response-message-type\" />\n       </xs:sequence>\n   </xs:complexType>\n\
    \   <!--  Definition of ccmp-response-message-type -->\n   <xs:complexType abstract=\"\
    true\"\n                   name=\"ccmp-response-message-type\">\n       <xs:sequence>\n\
    \           <xs:element name=\"confUserID\" type=\"xs:string\"\n             \
    \          minOccurs=\"1\" maxOccurs=\"1\" />\n           <xs:element name=\"\
    confObjID\" type=\"xs:string\"\n                       minOccurs=\"0\" maxOccurs=\"\
    1\" />\n           <xs:element name=\"operation\" minOccurs=\"0\"\n          \
    \             maxOccurs=\"1\" />\n           <xs:element name=\"response-code\"\
    \n                       type=\"response-codeType\"\n                       minOccurs=\"\
    1\" maxOccurs=\"1\" />\n           <xs:element name=\"response-string\" type=\"\
    xs:string\"\n                       minOccurs=\"0\" maxOccurs=\"1\" />\n     \
    \      <xs:element name=\"version\" type=\"xs:positiveInteger\"\n            \
    \           minOccurs=\"0\" maxOccurs=\"1\" />\n           <xs:any namespace=\"\
    ##other\" processContents=\"lax\"\n                   minOccurs=\"0\" maxOccurs=\"\
    unbounded\"/>\n       </xs:sequence>\n       <xs:anyAttribute namespace=\"##any\"\
    \ processContents=\"lax\"/>\n   </xs:complexType>\n               Figure 3: Structure\
    \ of CCMP Response Message\n"
- title: 5.3.  Detailed Messages
  contents:
  - "5.3.  Detailed Messages\n   Based on the request and response message structures\
    \ described in\n   Sections 5.1 and 5.2, the following summarizes the specialized\
    \ CCMP\n   request and response types described in this document:\n   1.   blueprintsRequest/blueprintsResponse\n\
    \   2.   confsRequest/confsResponse\n   3.   blueprintRequest/blueprintResponse\n\
    \   4.   confRequest/confResponse\n   5.   usersRequest/usersResponse\n   6. \
    \  userRequest/userResponse\n   7.   sidebarsByValRequest/sidebarsByValResponse\n\
    \   8.   sidebarsByRefRequest/sidebarsByRefResponse\n   9.   sidebarByValRequest/sidebarByValResponse\n\
    \   10.  sidebarByRefRequest/sidebarByRefResponse\n   11.  extendedRequest/extendedResponse\n\
    \   12.  optionsRequest/optionsResponse\n   These CCMP request/response pairs\
    \ use the fundamental CCMP operations\n   as defined in Section 4.1 to manipulate\
    \ the conference data.  These\n   request/response pairs are included in an IANA\
    \ registry as defined in\n   Section 12.5.  Table 1 summarizes the remaining CCMP\
    \ operations and\n   corresponding actions that are valid for a specific CCMP\
    \ request\n   type, noting that neither the blueprintsRequest/blueprintsResponse\n\
    \   nor confsRequest/confsResponse require an <operation> parameter.  An\n   entity\
    \ MUST support the response message for each of the request\n   messages that\
    \ is supported.  The corresponding response message MUST\n   contain the same\
    \ <operation> parameter.  Note that some entries are\n   labeled \"N/A\", indicating\
    \ that the operation is invalid for that\n   request type.  In the case of an\
    \ \"N/A*\" label, the operation MAY be\n   allowed for specific privileged users\
    \ or system administrators but is\n   not part of the functionality included in\
    \ this document.\n   +---------------+------------+------------+------------+------------+\n\
    \   | Operation     |  Retrieve  |   Create   |   Update   |   Delete   |\n  \
    \ | ------------- |            |            |            |            |\n   |\
    \ Request Type  |            |            |            |            |\n   +---------------+------------+------------+------------+------------+\n\
    \   | blueprints    |  Get list  |     N/A    |     N/A    |     N/A    |\n  \
    \ | Request       |     of     |            |            |            |\n   |\
    \               | blueprints |            |            |            |\n   | -------------\
    \ | ---------- | ---------- | ---------- | ---------- |\n   | blueprint     |\
    \     Get    |    N/A*    |    N/A*    |    N/A*    |\n   | Request       |  blueprint\
    \ |            |            |            |\n   | ------------- | ---------- |\
    \ ---------- | ---------- | ---------- |\n   | confsRequest  |  Get list  |  \
    \   N/A    |     N/A    |     N/A    |\n   |               |  of confs  |    \
    \        |            |            |\n   | ------------- | ---------- | ----------\
    \ | ---------- | ---------- |\n   | confRequest   |     Get    |   Create   |\
    \   Change   |   Delete   |\n   |               | conference | conference | conference\
    \ | conference |\n   |               |   object   |   object   |   object   |\
    \   object   |\n   | ------------- | ---------- | ---------- | ---------- | ----------\
    \ |\n   | usersRequest  |     Get    |   N/A(**)  |   Change   |   N/A(**)  |\n\
    \   |               |   <users>  |            |   <users>  |            |\n  \
    \ | ------------- | ---------- | ---------- | ---------- | ---------- |\n   |\
    \ userRequest   |     Get    |    Add a   |   Change   |   Delete   |\n   |  \
    \             |  specified |  <user> to |  specified |  specified |\n   |    \
    \           |   <user>   |   a conf   |   <user>   |   <user>   |\n   |      \
    \         |            |    (***)   |            |            |\n   | -------------\
    \ | ---------- | ---------- | ---------- | ---------- |\n   | sidebarsByVal |\
    \     Get    |     N/A    |     N/A    |     N/A    |\n   | Request       | <sidebars-\
    \ |            |            |            |\n   |               |   by-val>  |\
    \            |            |            |\n   | ------------- | ---------- | ----------\
    \ | ---------- | ---------- |\n   | sidebarsByRef |     Get    |     N/A    |\
    \     N/A    |     N/A    |\n   | Request       | <sidebars- |            |  \
    \          |            |\n   |               |   by-ref>  |            |    \
    \        |            |\n   | ------------- | ---------- | ---------- | ----------\
    \ | ---------- |\n   | sidebarByValR |     Get    |   Create   |   Change   |\
    \   Delete   |\n   | equest        |  sidebar-  |  sidebar-  |  sidebar-  |  sidebar-\
    \  |\n   |               |   by-val   |   by-val   |   by-val   |   by-val   |\n\
    \   | ------------- | ---------- | ---------- | ---------- | ---------- |\n  \
    \ | sidebarByRefR |     Get    |   Create   |   Change   |   Delete   |\n   |\
    \ equest        |  sidebar-  |  sidebar-  |  sidebar-  |  sidebar-  |\n   |  \
    \             |   by-ref   |   by-ref   |   by-ref   |   by-ref   |\n   +---------------+------------+------------+------------+------------+\n\
    \            Table 1: Request Type Operation-Specific Processing\n   (**): These\
    \ operations are not allowed for a usersRequest message,\n   since the <users>\
    \ section, which is the target element of such a\n   request, is created and removed\
    \ in conjunction with the creation and\n   deletion, respectively, of the associated\
    \ conference document.  Thus,\n   \"update\" and \"retrieve\" are the only semantically\
    \ correct operations\n   for such message.\n   (***): This operation can involve\
    \ the creation of an XCON-USERID, if\n   the sender does not add it in the <confUserID>\
    \ parameter and/or if\n   the entity field of the <userInfo> parameter is void.\n\
    \   Additional parameters included in the specialized CCMP request and\n   response\
    \ messages are detailed in the subsequent sections.  If a\n   required parameter\
    \ is not included in a request, the conference\n   server MUST return a <response-code>\
    \ of \"400\" per Section 5.4.\n"
- title: 5.3.1.  blueprintsRequest and blueprintsResponse
  contents:
  - "5.3.1.  blueprintsRequest and blueprintsResponse\n   A blueprintsRequest (Figure\
    \ 4) message is sent to request the list of\n   XCON-URIs associated with the\
    \ available blueprints from the\n   conference server.  These XCON-URIs can be\
    \ subsequently used by the\n   client to access detailed information about a specified\
    \ blueprint\n   with a specific blueprintRequest message per Section 5.3.3.\n\
    \   The <confUserID> parameter MUST be included in every\n   blueprintsRequest/Response\
    \ message and reflect the XCON-USERID of the\n   conferencing client issuing the\
    \ request.  Since a blueprintsRequest\n   message is not targeted to a specific\
    \ conference instance and is a\n   \"retrieve-only\" request, the <confObjID>\
    \ and <operation> parameters\n   MUST NOT be included in the blueprintsRequest/Response\
    \ messages.\n   In order to obtain a specific subset of the available blueprints,\
    \ a\n   client may specify a selection filter providing an appropriate xpath\n\
    \   query in the OPTIONAL \"xpathFilter\" parameter of the request.  The\n   information\
    \ in the blueprints typically represents general\n   capabilities and characteristics.\
    \  For example, to select blueprints\n   having both audio and video stream support,\
    \ a possible xpathFilter\n   value could be: \"/conference-info[conference-description/\n\
    \   available-media/entry/type='audio' and conference-description/\n   available-media/entry/type='video']\"\
    .  A conference server SHOULD NOT\n   provide any sensitive information (e.g.,\
    \ passwords) in the\n   blueprints.\n   The associated blueprintsResponse message\
    \ SHOULD contain, as shown in\n   Figure 4, a \"blueprintsInfo\" parameter containing\
    \ the above mentioned\n   XCON-URI list.\n <!-- blueprintsRequest -->\n <xs:complexType\
    \ name=\"ccmp-blueprints-request-message-type\">\n     <xs:complexContent>\n \
    \        <xs:extension base=\"tns:ccmp-request-message-type\">\n             <xs:sequence>\n\
    \                 <xs:element ref=\"blueprintsRequest\" />\n             </xs:sequence>\n\
    \         </xs:extension>\n     </xs:complexContent>\n </xs:complexType>\n <!--\
    \ blueprintsRequestType -->\n <xs:element name=\"blueprintsRequest\" type=\"blueprintsRequestType\"\
    />\n <xs:complexType name=\"blueprintsRequestType\">\n     <xs:sequence>\n   \
    \      <xs:element name=\"xpathFilter\" type=\"xs:string\" minOccurs=\"0\"/>\n\
    \         <xs:any namespace=\"##other\" processContents=\"lax\"\n            \
    \     minOccurs=\"0\" maxOccurs=\"unbounded\"/>\n     </xs:sequence>\n     <xs:anyAttribute\
    \ namespace=\"##any\" processContents=\"lax\"/>\n </xs:complexType>\n <!-- blueprintsResponse\
    \ -->\n <xs:complexType name=\"ccmp-blueprints-response-message-type\">\n    \
    \ <xs:complexContent>\n         <xs:extension base=\"tns:ccmp-response-message-type\"\
    >\n             <xs:sequence>\n                 <xs:element ref=\"blueprintsResponse\"\
    \ />\n             </xs:sequence>\n         </xs:extension>\n     </xs:complexContent>\n\
    \ </xs:complexType>\n <!-- blueprintsResponseType -->\n <xs:element name=\"blueprintsResponse\"\
    \ type=\"blueprintsResponseType\"/>\n <xs:complexType name=\"blueprintsResponseType\"\
    >\n     <xs:sequence>\n         <xs:element name=\"blueprintsInfo\"\n        \
    \             type=\"info:uris-type\" minOccurs=\"0\"/>\n         <xs:any namespace=\"\
    ##other\" processContents=\"lax\"\n                 minOccurs=\"0\" maxOccurs=\"\
    unbounded\"/>\n     </xs:sequence>\n     <xs:anyAttribute namespace=\"##any\"\
    \ processContents=\"lax\"/>\n </xs:complexType>\n             Figure 4: Structure\
    \ of the blueprintsRequest and\n                        blueprintsResponse Messages\n"
- title: 5.3.2.  confsRequest and confsResponse
  contents:
  - "5.3.2.  confsRequest and confsResponse\n   A confsRequest message is used to\
    \ retrieve, from the server, the list\n   of XCON-URIs associated with active\
    \ and registered conferences\n   currently handled by the conferencing system.\
    \  The <confUserID>\n   parameter MUST be included in every confsRequest/Response\
    \ message and\n   reflect the XCON-USERID of the conferencing client issuing the\n\
    \   request.  The <confObjID> parameter MUST NOT be included in the\n   confsRequest\
    \ message.  The confsRequest message is of a retrieve-only\n   type, since the\
    \ sole purpose is to collect information available at\n   the conference server.\
    \  Thus, an <operation> parameter MUST NOT be\n   included in a confsRequest message.\
    \  In order to retrieve a specific\n   subset of the available conferences, a\
    \ client may specify a selection\n   filter providing an appropriate xpath query\
    \ in the OPTIONAL\n   \"xpathFilter\" parameter of the request.  For example,\
    \ to select only\n   the registered conferences, a possible xpathFilter value\
    \ could be \"/\n   conference-info[conference-description/conference-state/\n\
    \   active='false']\".  The associated confsResponse message SHOULD\n   contain\
    \ the list of XCON-URIs in the \"confsInfo\" parameter.  A user,\n   upon receipt\
    \ of the response message, can interact with the available\n   conference objects\
    \ through further CCMP messages.\n <!-- confsRequest -->\n <xs:complexType name=\"\
    ccmp-confs-request-message-type\">\n     <xs:complexContent>\n         <xs:extension\
    \ base=\"tns:ccmp-request-message-type\">\n             <xs:sequence>\n      \
    \           <xs:element ref=\"confsRequest\" />\n             </xs:sequence>\n\
    \         </xs:extension>\n     </xs:complexContent>\n </xs:complexType>\n <!--\
    \ confsRequestType -->\n <xs:element name=\"confsRequest\" type=\"confsRequestType\"\
    \ />\n <xs:complexType name=\"confsRequestType\">\n     <xs:sequence>\n      \
    \   <xs:element name=\"xpathFilter\" type=\"xs:string\" minOccurs=\"0\"/>\n  \
    \       <xs:any namespace=\"##other\" processContents=\"lax\"\n              \
    \   minOccurs=\"0\" maxOccurs=\"unbounded\"/>\n     </xs:sequence>\n     <xs:anyAttribute\
    \ namespace=\"##any\" processContents=\"lax\"/>\n </xs:complexType>\n <!-- confsResponse\
    \ -->\n <xs:complexType name=\"ccmp-confs-response-message-type\">\n     <xs:complexContent>\n\
    \         <xs:extension base=\"tns:ccmp-response-message-type\">\n           \
    \  <xs:sequence>\n                 <xs:element ref=\"confsResponse\" />\n    \
    \         </xs:sequence>\n         </xs:extension>\n     </xs:complexContent>\n\
    \ </xs:complexType>\n <!-- confsResponseType -->\n <xs:element name=\"confsResponse\"\
    \ type=\"confsResponseType\"/>\n <xs:complexType name=\"confsResponseType\">\n\
    \     <xs:sequence>\n         <xs:element name=\"confsInfo\" type=\"info:uris-type\"\
    \n                     minOccurs=\"0\"/>\n         <xs:any namespace=\"##other\"\
    \ processContents=\"lax\"\n                 minOccurs=\"0\" maxOccurs=\"unbounded\"\
    />\n     </xs:sequence>\n     <xs:anyAttribute namespace=\"##any\" processContents=\"\
    lax\"/>\n </xs:complexType>\n    Figure 5: Structure of the confsRequest and confsResponse\
    \ Messages\n"
- title: 5.3.3.  blueprintRequest and blueprintResponse
  contents:
  - "5.3.3.  blueprintRequest and blueprintResponse\n   Through a blueprintRequest,\
    \ a client can manipulate the conference\n   object associated with a specified\
    \ blueprint.  Along with the\n   <confUserID> parameter, the request MUST include\
    \ the <confObjID> and\n   the <operation> parameters.  Again, the <confUserID>\
    \ parameter MUST\n   be included in every blueprintRequest/Response message and\
    \ reflect\n   the XCON-USERID of the conferencing client issuing the request.\
    \  The\n   <confObjID> parameter MUST contain the XCON-URI of the blueprint,\n\
    \   which might have been previously retrieved through a\n   blueprintsRequest\
    \ message.\n   The blueprintRequest message SHOULD NOT contain an <operation>\n\
    \   parameter with a value other than \"retrieve\".  An <operation>\n   parameter\
    \ with a value of \"create\", \"update\", or \"delete\" SHOULD NOT\n   be included\
    \ in a blueprintRequest message except in the case of\n   privileged users (e.g.,\
    \ the conference server administration staff),\n   who might authenticate themselves\
    \ by the mean of the \"subject\"\n   request parameter.\n   A blueprintRequest/retrieve\
    \ carrying a <confObjID> parameter whose\n   value is not associated with one\
    \ of the available system's\n   blueprints, will generate, on the server's side,\
    \ a blueprintResponse\n   message containing a <response-code> of \"404\".  This\
    \ also holds for\n   the case in which the mentioned <confObjID> parameter value\
    \ is\n   related to an existing conference document stored at the server, but\n\
    \   associated with an actual conference (be it active or registered) or\n   with\
    \ a sidebar rather than a blueprint.\n   For a <response-code> of \"200\" in a\
    \ \"retrieve\" operation, the\n   <blueprintInfo> parameter MUST be included in\
    \ the blueprintResponse\n   message.  The <blueprintInfo> parameter contains the\
    \ conference\n   document associated with the blueprint as identified by the\n\
    \   <confObjID> parameter specified in the blueprintRequest.\n   <!--  blueprintRequest\
    \ -->\n   <xs:complexType name=\"ccmp-blueprint-request-message-type\">\n    \
    \   <xs:complexContent>\n           <xs:extension base=\"tns:ccmp-request-message-type\"\
    >\n               <xs:sequence>\n                   <xs:element ref=\"blueprintRequest\"\
    \ />\n               </xs:sequence>\n           </xs:extension>\n       </xs:complexContent>\n\
    \   </xs:complexType>\n   <!-- blueprintRequestType -->\n   <xs:element name=\"\
    blueprintRequest\" type=\"blueprintRequestType\" />\n   <xs:complexType name=\"\
    blueprintRequestType\">\n       <xs:sequence>\n           <xs:element name=\"\
    blueprintInfo\"\n                       type=\"info:conference-type\" minOccurs=\"\
    0\"/>\n           <xs:any namespace=\"##other\" processContents=\"lax\"\n    \
    \               minOccurs=\"0\" maxOccurs=\"unbounded\"/>\n       </xs:sequence>\n\
    \       <xs:anyAttribute namespace=\"##any\" processContents=\"lax\"/>\n   </xs:complexType>\n\
    \   <!-- blueprintResponse -->\n   <xs:complexType name=\"ccmp-blueprint-response-message-type\"\
    >\n       <xs:complexContent>\n           <xs:extension base=\"tns:ccmp-response-message-type\"\
    >\n               <xs:sequence>\n                   <xs:element ref=\"blueprintResponse\"\
    \ />\n               </xs:sequence>\n           </xs:extension>\n       </xs:complexContent>\n\
    \   </xs:complexType>\n   <!-- blueprintResponseType -->\n   <xs:element name=\"\
    blueprintResponse\" type=\"blueprintResponseType\"/>\n   <xs:complexType name=\"\
    blueprintResponseType\">\n       <xs:sequence>\n           <xs:element name=\"\
    blueprintInfo\" type=\"info:conference-type\"\n                       minOccurs=\"\
    0\"/>\n           <xs:any namespace=\"##other\" processContents=\"lax\"\n    \
    \               minOccurs=\"0\" maxOccurs=\"unbounded\">\n       </xs:sequence>\n\
    \       <xs:anyAttribute namespace=\"##any\" processContents=\"lax\"/>\n   </xs:complexType>\n\
    \              Figure 6: Structure of the blueprintRequest and\n             \
    \           blueprintResponse Messages\n"
- title: 5.3.4.  confRequest and confResponse
  contents:
  - "5.3.4.  confRequest and confResponse\n   With a confRequest message, CCMP clients\
    \ can manipulate conference\n   objects associated with either active or registered\
    \ conferences.  The\n   <confUserID> parameter MUST be included in every confRequest/Response\n\
    \   message and reflect the XCON-USERID of the conferencing client\n   issuing\
    \ the request. confRequest and confResponse messages MUST also\n   include an\
    \ <operation> parameter.  ConfResponse messages MUST return\n   to the requestor\
    \ a <response-code> and MAY contain a <response-\n   string> explaining it.  Depending\
    \ upon the type of operation, a\n   <confObjID> and <confInfo> parameter MAY be\
    \ included in the\n   confRequest and response.  For each type of operation, the\
    \ text below\n   describes whether the <confObjID> and <confInfo> parameters need\
    \ to\n   be included in the confRequest and confResponse messages.\n   The creation\
    \ case deserves care.  To create a new conference through\n   a confRequest message,\
    \ two approaches can be considered:\n   1.  Creation through explicit cloning:\
    \ the <confObjID> parameter MUST\n       contain the XCON-URI of the blueprint\
    \ or of the conference to be\n       cloned, while the <confInfo> parameter MUST\
    \ NOT be included in\n       the confRequest.  Note that cloning of an active\
    \ conference is\n       only done in the case of a sidebar operation per the XCON\n\
    \       framework and as described in Section 5.3.8.\n   2.  Creation through\
    \ implicit cloning (also known as \"direct\n       creation\"): the <confObjID>\
    \ parameter MUST NOT be included in the\n       request and the CCMP client can\
    \ describe the desired conference\n       to be created using the <confInfo> parameter.\
    \  If no <confInfo>\n       parameter is provided in the request, the new conference\
    \ will be\n       created as a clone of the system default blueprint.\n   In both\
    \ creation cases, the confResponse, for a successful completion\n   of a \"create\"\
    \ operation, contains a <response-code> of \"200\" and MUST\n   contain the XCON-URI\
    \ of the newly created conference in the\n   <confObjID> parameter, in order to\
    \ allow the conferencing client to\n   manipulate that conference through following\
    \ CCMP requests.  In\n   addition, the <confInfo> parameter containing the conference\
    \ document\n   created MAY be included, at the discretion of the conferencing\
    \ system\n   implementation, along with the REQUIRED <version> parameter\n   initialized\
    \ at \"1\", since, at creation time, the conference object is\n   at its first\
    \ version.\n   In the case of a confRequest with an <operation> parameter of\n\
    \   \"retrieve\", the <confObjID> parameter representing the XCON-URI of\n   the\
    \ target conference MUST be included and the <confInfo> parameter\n   MUST NOT\
    \ be included in the request.  The conference server MUST\n   ignore any <confInfo>\
    \ parameter that is received in a confRequest\n   \"retrieve\" operation.  If\
    \ the confResponse for the retrieve operation\n   contains a <response-code> of\
    \ \"200\", the <confInfo> parameter MUST be\n   included in the response.  The\
    \ <confInfo> parameter MUST contain the\n   entire conference document describing\
    \ the target conference object in\n   its current state.  The current state of\
    \ the retrieved conference\n   object MUST also be reported in the proper \"version\"\
    \ response\n   parameter.\n   In case of a confRequest with an <operation> parameter\
    \ of \"update\",\n   the <confInfo> and <confObjID> parameters MUST be included\
    \ in the\n   request.  The <confInfo> represents an object of type\n   \"conference-type\"\
    \ containing all the changes to be applied to the\n   conference whose identifier\
    \ has the same value as the <confObjID>\n   parameter.  Note that, in such a case,\
    \ though the <confInfo>\n   parameter indeed has to follow the rules indicated\
    \ in the XCON data\n   model, it does not represent the entire updated version\
    \ of the target\n   conference, since it conveys just the modifications to apply\
    \ to that\n   conference.  For example, in order to change the conference title,\n\
    \   the <confInfo> parameter will be of the form:\n   <confInfo entity=\"xcon:8977777@example.com\"\
    >\n     <conference-description>\n       <display-text> *** NEW CONFERENCE TITLE\
    \ *** </display-text>\n     </conference-description>\n   </confInfo>\n      \
    \     Figure 7: Updating a Conference Object: Modifying the\n                \
    \           Title of a Conference\n   Similarly, to remove the title of an existing\
    \ conference, a\n   confRequest/update carrying the following <confInfo> parameter\
    \ would\n   do the job.\n   <confInfo entity=\"xcon:8977777@example.com\">\n \
    \    <conference-description>\n       <display-text/>\n     </conference-description>\n\
    \   </confInfo>\n                  Figure 8: Updating a Conference Object:\n \
    \                   Removing the Title of a Conference\n   In the case of a confResponse/update\
    \ with a <response-code> of \"200\",\n   no additional information is REQUIRED\
    \ in the response message, which\n   means the return of a <confInfo> parameter\
    \ is OPTIONAL.  A subsequent\n   confRequest/retrieve transaction might provide\
    \ the CCMP client with\n   the current status of the conference after the modification,\
    \ or the\n   notification protocol might address that task as well.  A <response-\n\
    \   code> of \"200\" indicates that the conference object has been changed\n \
    \  according to the request by the conference server.  The <version>\n   parameter\
    \ MUST be enclosed in the confResponse/update message, in\n   order to let the\
    \ client understand what is the current conference-\n   object version, upon the\
    \ applied modifications.  A <response-code> of\n   \"409\" indicates that the\
    \ changes reflected in the <confInfo>\n   parameter of the request are not feasible.\
    \  This could be due to\n   policies, requestor roles, specific privileges, unacceptable\
    \ values,\n   etc., with the reason specific to a conferencing system and its\n\
    \   configuration.  Together with a <response-code> of \"409\", the\n   <version>\
    \ parameter MUST be attached in the confResponse/update,\n   allowing the client\
    \ to later retrieve the current version of the\n   target conference if the one\
    \ she attempted to modify was not the most\n   up to date.\n   In the case of\
    \ a confRequest with an <operation> parameter of\n   \"delete\", the <confObjID>\
    \ parameter representing the XCON-URI of the\n   target conference MUST be included\
    \ while the <confInfo> parameter\n   MUST NOT be included in the request.  The\
    \ conference server MUST\n   ignore any <confInfo> parameter that is received\
    \ within such a\n   request.  The confResponse MUST contain the same value for\
    \ the\n   <confObjID> parameter that was included in the confRequest.  If the\n\
    \   confResponse/delete operation contains a <response-code> of \"200\",\n   the\
    \ conference indicated in the <confObjID> parameter has been\n   successfully\
    \ deleted.  A confResponse/delete with a <response-code>\n   of \"200\" MUST NOT\
    \ contain the <confInfo> parameter.  The <version>\n   parameter SHOULD NOT be\
    \ returned in any confResponse/delete.  If the\n   conference server cannot delete\
    \ the conference referenced by the\n   <confObjID> parameter received in the confRequest\
    \ because it is the\n   parent of another conference object that is in use, the\
    \ conference\n   server MUST return a <response-code> of \"425\".\n   A confRequest\
    \ with an <operation> parameter of \"retrieve\", \"update\",\n   or \"delete\"\
    \ carrying a <confObjID> parameter which is not associated\n   with one of the\
    \ conferences (active or registered) that the system is\n   holding will generate,\
    \ on the server's side, a confResponse message\n   containing a <response-code>\
    \ of \"404\".  This also holds for the case\n   in which the mentioned <confObjID>\
    \ parameter is related to an\n   existing conference object stored at the server,\
    \ but associated with\n   a blueprint or with a sidebar rather than an actual\
    \ conference.\n   The schema for the confRequest/confResponse pair is shown in\n\
    \   Figure 9.\n   <!-- confRequest -->\n   <xs:complexType name=\"ccmp-conf-request-message-type\"\
    >\n       <xs:complexContent>\n           <xs:extension base=\"tns:ccmp-request-message-type\"\
    >\n               <xs:sequence>\n                   <xs:element ref=\"confRequest\"\
    \ />\n               </xs:sequence>\n           </xs:extension>\n       </xs:complexContent>\n\
    \   </xs:complexType>\n   <!-- confRequestType -->\n   <xs:element name=\"confRequest\"\
    \ type=\"confRequestType\" />\n   <xs:complexType name=\"confRequestType\">\n\
    \       <xs:sequence>\n           <xs:element name=\"confInfo\" type=\"info:conference-type\"\
    \n                       minOccurs=\"0\"/>\n           <xs:any namespace=\"##other\"\
    \ processContents=\"lax\"\n                   minOccurs=\"0\" maxOccurs=\"unbounded\"\
    />\n       </xs:sequence>\n       <xs:anyAttribute namespace=\"##any\" processContents=\"\
    lax\"/>\n   </xs:complexType>\n   <!-- confResponse -->\n   <xs:complexType name=\"\
    ccmp-conf-response-message-type\">\n       <xs:complexContent>\n           <xs:extension\
    \ base=\"tns:ccmp-response-message-type\">\n               <xs:sequence>\n   \
    \                <xs:element ref=\"confResponse\" />\n               </xs:sequence>\n\
    \           </xs:extension>\n       </xs:complexContent>\n   </xs:complexType>\n\
    \   <!-- confResponseType -->\n   <xs:element name=\"confResponse\" type=\"confResponseType\"\
    \ />\n   <xs:complexType name=\"confResponseType\">\n       <xs:sequence>\n  \
    \         <xs:element name=\"confInfo\" type=\"info:conference-type\"\n      \
    \                 minOccurs=\"0\"/>\n           <xs:any namespace=\"##other\"\
    \ processContents=\"lax\"\n                   minOccurs=\"0\" maxOccurs=\"unbounded\"\
    />\n       </xs:sequence>\n       <xs:anyAttribute namespace=\"##any\" processContents=\"\
    lax\"/>\n   </xs:complexType>\n     Figure 9: Structure of the confRequest and\
    \ confResponse Messages\n"
- title: 5.3.5.  usersRequest and usersResponse
  contents:
  - "5.3.5.  usersRequest and usersResponse\n   The usersRequest message allows a\
    \ client to manipulate the <users>\n   element of the conference object represented\
    \ by the <confObjID>\n   parameter.  The <users> element contains the list of\
    \ <user> elements\n   associated with conference participants, the list of the\
    \ users to\n   which access to the conference is allowed/denied, conference\n\
    \   participation policies, etc.  The <confObjID> parameter MUST be\n   included\
    \ in a usersRequest message.\n   A <usersInfo> parameter MAY be included in a\
    \ usersRequest message\n   depending upon the operation.  If the <usersInfo> parameter\
    \ is\n   included in the usersRequest message, the parameter MUST be compliant\n\
    \   with the <users> field of the XCON data model.\n   Two operations are allowed\
    \ for a usersRequest message:\n   1.  \"retrieve\": In this case the request MUST\
    \ NOT include a\n       <usersInfo> parameter, while the successful response MUST\
    \ contain\n       the desired <users> element in the <usersInfo> parameter.  The\n\
    \       conference server MUST ignore a <usersInfo> parameter if it is\n     \
    \  received in a request with an <operation> parameter of\n       \"retrieve\"\
    .\n   2.  \"update\": In this case, the <usersInfo> parameter MUST contain\n \
    \      the modifications to be applied to the <users> element indicated.\n   \
    \    If the <response-code> is \"200\", then the <usersInfo> parameter\n     \
    \  SHOULD NOT be returned.  Any <usersInfo> parameter that is\n       returned\
    \ SHOULD be ignored.  A <response-code> of \"426\" indicates\n       that the\
    \ conferencing client is not allowed to make the changes\n       reflected in\
    \ the <usersInfo> contained in the usersRequest\n       message.  This could be\
    \ due to policies, roles, specific\n       privileges, etc., with the reason being\
    \ specific to a\n       conferencing system and its configuration.\n   Operations\
    \ of \"create\" and \"delete\" are not applicable to a\n   usersRequest message\
    \ and MUST NOT be considered by the server, which\n   means that a <response-code>\
    \ of \"403\" MUST be included in the\n   usersResponse message.\n   <!-- usersRequest\
    \ -->\n   <xs:complexType name=\"ccmp-users-request-message-type\">\n       <xs:complexContent>\n\
    \           <xs:extension base=\"tns:ccmp-request-message-type\">\n          \
    \     <xs:sequence>\n                   <xs:element ref=\"usersRequest\" />\n\
    \               </xs:sequence>\n           </xs:extension>\n       </xs:complexContent>\n\
    \   </xs:complexType>\n   <!-- usersRequestType -->\n   <xs:element name=\"usersRequest\"\
    \ type=\"usersRequestType\" />\n   <xs:complexType name=\"usersRequestType\">\n\
    \       <xs:sequence>\n           <xs:element name=\"usersInfo\"\n           \
    \            type=\"info:users-type\" minOccurs=\"0\" />\n           <xs:any namespace=\"\
    ##other\" processContents=\"lax\"\n                   minOccurs=\"0\" maxOccurs=\"\
    unbounded\"/>\n       </xs:sequence>\n       <xs:anyAttribute namespace=\"##any\"\
    \ processContents=\"lax\"/>\n   </xs:complexType>\n   <!-- usersResponse -->\n\
    \   <xs:complexType name=\"ccmp-users-response-message-type\">\n       <xs:complexContent>\n\
    \           <xs:extension base=\"tns:ccmp-response-message-type\">\n         \
    \      <xs:sequence>\n                   <xs:element ref=\"usersResponse\" />\n\
    \               </xs:sequence>\n           </xs:extension>\n       </xs:complexContent>\n\
    \   </xs:complexType>\n   <!-- usersResponseType -->\n   <xs:element name=\"usersResponse\"\
    \ type=\"usersResponseType\" />\n   <xs:complexType name=\"usersResponseType\"\
    >\n       <xs:sequence>\n           <xs:element name=\"usersInfo\" type=\"info:users-type\"\
    \n                       minOccurs=\"0\"/>\n           <xs:any namespace=\"##other\"\
    \ processContents=\"lax\"\n                   minOccurs=\"0\" maxOccurs=\"unbounded\"\
    />\n       </xs:sequence>\n       <xs:anyAttribute namespace=\"##any\" processContents=\"\
    lax\"/>\n   </xs:complexType>\n    Figure 10: Structure of the usersRequest and\
    \ usersResponse Messages\n"
- title: 5.3.6.  userRequest and userResponse
  contents:
  - "5.3.6.  userRequest and userResponse\n   A userRequest message is used to manipulate\
    \ <user> elements inside a\n   conference document associated with a conference\
    \ identified by the\n   <confObjID> parameter.  Besides retrieving information\
    \ about a\n   specific conference user, the message is used to request that the\n\
    \   conference server either create, modify, or delete information about\n   a\
    \ user.  A userRequest message MUST include the <confObjID> and the\n   <operation>\
    \ parameters, and it MAY include a <userInfo> parameter\n   containing the detailed\
    \ user's information depending upon the\n   operation and whether the <userInfo>\
    \ has already been populated for a\n   specific user.  Note that a user may not\
    \ necessarily be a\n   conferencing control client (i.e., some participants in\
    \ a conference\n   are not \"XCON aware\").\n   An XCON-USERID SHOULD be assigned\
    \ to each and every user subscribed\n   to the system.  In such a way, a user\
    \ who is not a conference\n   participant can make requests (provided she has\
    \ successfully passed\n   authorization and authentication checks), like creating\
    \ a conference\n   or retrieving conference information.\n   Conference users\
    \ can be created in a number of different ways.  In\n   each of these cases, the\
    \ <operation> parameter MUST be set to\n   \"create\" in the userRequest message.\
    \  Each of the userResponse\n   messages for these cases MUST include the <confObjID>,\
    \ <confUserID>,\n   <operation>, and <response-code> parameters.  In the case\
    \ of a\n   <response-code> of \"200\", the userResponse message MAY include the\n\
    \   <userInfo> parameter depending upon the manner in which the user was\n   created:\n\
    \   o  A conferencing client with an XCON-USERID adds itself to the\n      conference:\
    \ In this case, the <userInfo> parameter MAY be included\n      in the userRequest.\
    \  The <userInfo> parameter MUST contain a\n      <user> element (compliant with\
    \ the XCON data model) and the\n      'entity' attribute MUST be set to a value\
    \ that represents the\n      XCON-USERID of the user initiating the request. \
    \ No additional\n      parameters beyond those previously described are required\
    \ in the\n      userResponse message, in the case of a <response-code> of \"200\"\
    .\n   o  A conferencing client acts on behalf of another user whose XCON-\n  \
    \    USERID is known: In this case, the <userInfo> parameter MUST be\n      included\
    \ in the userRequest.  The <userInfo> parameter MUST\n      contain a <user> element\
    \ and the 'entity' attribute value MUST be\n      set to the XCON-USERID of the\
    \ other user in question.  No\n      additional parameters beyond those previously\
    \ described are\n      required in the userResponse message, in the case of a\
    \ <response-\n      code> of \"200\".\n   o  A conferencing client who has no\
    \ XCON-USERID and who wants to\n      enter, via CCMP, a conference whose identifier\
    \ is known: In this\n      case, a side effect of the request is that the user\
    \ is provided\n      with a new XCON-USERID (created by the server) carried inside\
    \ the\n      <confUserID> parameter of the response.  This is the only case in\n\
    \      which a CCMP request can be valid though carrying a void\n      <confUserID>\
    \ parameter.  A <userInfo> parameter MUST be enclosed\n      in the request, providing\
    \ at least a contact URI of the joining\n      client, in order to let the focus\
    \ initiate the signaling phase\n      needed to add her to the conference.  The\
    \ mandatory 'entity'\n      attribute of the <userInfo> parameter in the request\
    \ MUST be\n      filled with a placeholder value with the user part of the XCON-\n\
    \      USERID containing a value of AUTO_GENERATE_X as described in\n      Section\
    \ 4.3, to conform to the rules contained in the XCON data\n      model XML schema.\
    \  The messages (userRequest and userResponse) in\n      this case should look\
    \ like the following:\n   Request fields:\n   confUserID=null;\n   confObjID=confXYZ;\n\
    \   operation=create;\n   userInfo=\n   <userInfo entity=\"xcon-userid:AUTO_GENERATE_1@example.com\"\
    >\n           <endpoint entity=\"sip:GHIL345@example.com\">\n           ...\n\
    \   Response fields (in case of success):\n   confUserID=user345;\n   confObjID=confXYZ;\n\
    \   operation=create;\n   response-code=200;\n   userInfo=null; //or the entire\
    \ userInfo object\n                Figure 11: userRequest and userResponse in\
    \ the\n                          Absence of an xcon-userid\n   o  A conferencing\
    \ client is unaware of the XCON-USERID of a third\n      user: In this case, the\
    \ XCON-USERID in the request, <confUserID>,\n      is the sender's and the 'entity'\
    \ attribute of the attached\n      <userInfo> parameter is filled with the placeholder\
    \ value\n      \"xcon-userid:AUTO_GENERATE_1@example.com\".  The XCON-USERID for\n\
    \      the third user MUST be returned to the client issuing the request\n   \
    \   in the 'entity' attribute of the response <userInfo> parameter, if\n     \
    \ the <response-code> is \"200\".  This scenario is intended to\n      support\
    \ both the case where a brand new conferencing system user\n      is added to\
    \ a conference by a third party (i.e., a user who has\n      not yet been provided\
    \ with an XCON-USERID) and the case where the\n      CCMP client issuing the request\
    \ does not know the to-be-added\n      user's XCON-USERID (which means such an\
    \ identifier could already\n      exist on the server's side for that user). \
    \ In this last case, the\n      conference server is in charge of avoiding XCON-URI\
    \ duplicates for\n      the same conferencing client, looking at key fields in\
    \ the\n      request-provided <userInfo> parameter, such as the signaling URI.\n\
    \      If the joining user is brand new, then the generation of a new\n      XCON-USERID\
    \ is needed; otherwise, if that user exists already, the\n      server must recover\
    \ the corresponding XCON-USERID.\n   In the case of a userRequest with an <operation>\
    \ parameter of\n   \"retrieve\", the <confObjID> parameter representing the XCON-URI\
    \ of\n   the target conference MUST be included.  The <confUserID>, containing\n\
    \   the CCMP client's XCON-USERID, MUST also be included in the\n   userRequest\
    \ message.  If the client wants to retrieve information\n   about her profile\
    \ in the specified conference, no <userInfo>\n   parameter is needed in the retrieve\
    \ request.  On the other hand, if\n   the client wants to obtain someone else's\
    \ info within the given\n   conference, she MUST include in the userRequest/retrieve\
    \ a <userInfo>\n   parameter whose 'entity' attribute conveys the desired user's\
    \ XCON-\n   USERID.  If the userResponse for the retrieve operation contains a\n\
    \   <response-code> of \"200\", the <userInfo> parameter MUST be included\n  \
    \ in the response.\n   In case of a userRequest with an <operation> parameter\
    \ of \"update\",\n   the <confObjID>, <confUserID>, and <userInfo> parameters\
    \ MUST be\n   included in the request.  The <userInfo> parameter is of type \"\
    user-\n   type\" and contains all the changes to be applied to a specific <user>\n\
    \   element in the conference object identified by the <confObjID>\n   parameter\
    \ in the userRequest message.  The user to be modified is\n   identified through\
    \ the 'entity' attribute of the <userInfo> parameter\n   included in the request.\
    \  In the case of a userResponse with a\n   <response-code> of \"200\", no additional\
    \ information is required in\n   the userResponse message.  A <response-code>\
    \ of \"200\" indicates that\n   the referenced <user> element has been updated\
    \ by the conference\n   server.  A <response-code> of \"426\" indicates that the\
    \ conferencing\n   client is not allowed to make the changes reflected in the\
    \ <userInfo>\n   in the initial request.  This could be due to policies, roles,\n\
    \   specific privileges, etc., with the reason specific to a conferencing\n  \
    \ system and its configuration.\n   In the case of a userRequest with an <operation>\
    \ parameter of\n   \"delete\", the <confObjID> representing the XCON-URI of the\
    \ target\n   conference MUST be included.  The <confUserID> parameter, containing\n\
    \   the CCMP client's XCON-USERID, MUST be included in the userRequest\n   message.\
    \  If the client wants to exit the specified conference, no\n   <userInfo> parameter\
    \ is needed in the delete request.  On the other\n   hand, if the client wants\
    \ to remove another participant from the\n   given conference, she MUST include\
    \ in the userRequest/delete a\n   <userInfo> parameter whose 'entity' attribute\
    \ conveys the XCON-USERID\n   of that participant.  The userResponse MUST contain\
    \ the same value\n   for the <confObjID> parameter that was included in the <confObjID>\n\
    \   parameter in the userRequest.  The userResponse MUST contain a\n   <response-code>\
    \ of \"200\" if the target <user> element has been\n   successfully deleted. \
    \ If the userResponse for the delete operation\n   contains a <response-code>\
    \ of \"200\", the userResponse MUST NOT\n   contain the <userInfo> parameter.\n\
    \   <!-- userRequest -->\n   <xs:complexType name=\"ccmp-user-request-message-type\"\
    >\n       <xs:complexContent>\n           <xs:extension base=\"tns:ccmp-request-message-type\"\
    >\n               <xs:sequence>\n                   <xs:element ref=\"userRequest\"\
    \ />\n               </xs:sequence>\n           </xs:extension>\n       </xs:complexContent>\n\
    \   </xs:complexType>\n   <!-- userRequestType -->\n   <xs:element name=\"userRequest\"\
    \ type=\"userRequestType\" />\n   <xs:complexType name=\"userRequestType\">\n\
    \       <xs:sequence>\n           <xs:element name=\"userInfo\"\n            \
    \           type=\"info:user-type\" minOccurs=\"0\" />\n           <xs:any namespace=\"\
    ##other\" processContents=\"lax\"\n                   minOccurs=\"0\" maxOccurs=\"\
    unbounded\"/>\n       </xs:sequence>\n       <xs:anyAttribute namespace=\"##any\"\
    \ processContents=\"lax\"/>\n   </xs:complexType>\n   <!-- userResponse -->\n\
    \   <xs:complexType name=\"ccmp-user-response-message-type\">\n       <xs:complexContent>\n\
    \           <xs:extension base=\"tns:ccmp-response-message-type\">\n         \
    \      <xs:sequence>\n                   <xs:element ref=\"userResponse\" />\n\
    \               </xs:sequence>\n           </xs:extension>\n       </xs:complexContent>\n\
    \   </xs:complexType>\n   <!-- userResponseType -->\n   <xs:element name=\"userResponse\"\
    \ type=\"userResponseType\" />\n   <xs:complexType name=\"userResponseType\">\n\
    \       <xs:sequence>\n           <xs:element name=\"userInfo\" type=\"info:user-type\"\
    \n                       minOccurs=\"0\"/>\n           <xs:any namespace=\"##other\"\
    \ processContents=\"lax\"\n                   minOccurs=\"0\" maxOccurs=\"unbounded\"\
    />\n       </xs:sequence>\n       <xs:anyAttribute namespace=\"##any\" processContents=\"\
    lax\"/>\n   </xs:complexType>\n     Figure 12: Structure of the userRequest and\
    \ userResponse Messages\n"
- title: 5.3.7.  sidebarsByValRequest and sidebarsByValResponse
  contents:
  - "5.3.7.  sidebarsByValRequest and sidebarsByValResponse\n   A sidebarsByValRequest\
    \ message is used to execute a retrieve-only\n   operation on the <sidebars-by-val>\
    \ field of the conference object\n   represented by the <confObjID>.  The sidebarsByValRequest\
    \ message is\n   of a retrieve-only type, so an <operation> parameter MUST NOT\
    \ be\n   included in a sidebarsByValRequest message.  As with blueprints and\n\
    \   conferences, CCMP allows for the use of xpath filters whenever a\n   selected\
    \ subset of the sidebars available at the server's side has to\n   be retrieved\
    \ by the client.  This applies both to sidebars by\n   reference and sidebars\
    \ by value.  A sidebarsByValResponse message\n   with a <response-code> of \"\
    200\" MUST contain a <sidebarsByValInfo>\n   parameter containing the desired\
    \ <sidebars-by-val> element.  A\n   sidebarsByValResponse message MUST return\
    \ to the client a <version>\n   element related to the current version of the\
    \ main conference object\n   (i.e., the one whose identifier is contained in the\
    \ <confObjID> field\n   of the request) with which the sidebars in question are\
    \ associated.\n   The <sidebarsByValInfo> parameter contains the list of the conference\n\
    \   objects associated with the sidebars by value derived from the main\n   conference.\
    \  The retrieved sidebars can then be updated or deleted\n   using the sidebarByValRequest\
    \ message, which is described in\n   Section 5.3.8.\n <!-- sidebarsByValRequest\
    \ -->\n <xs:complexType name=\"ccmp-sidebarsByVal-request-message-type\">\n  \
    \   <xs:complexContent>\n         <xs:extension base=\"tns:ccmp-request-message-type\"\
    >\n             <xs:sequence>\n                 <xs:element ref=\"sidebarsByValRequest\"\
    />\n             </xs:sequence>\n         </xs:extension>\n    </xs:complexContent>\n\
    \ </xs:complexType>\n <!-- sidebarsByValRequestType -->\n <xs:element name=\"\
    sidebarsByValRequest\"\n             type=\"sidebarsByValRequestType\" />\n <xs:complexType\
    \ name=\"sidebarsByValRequestType\">\n     <xs:sequence>\n         <xs:element\
    \ name=\"xpathFilter\" type=\"xs:string\" minOccurs=\"0\"/>\n         <xs:any\
    \ namespace=\"##other\" processContents=\"lax\"\n                 minOccurs=\"\
    0\" maxOccurs=\"unbounded\"/>\n   </xs:sequence>\n   <xs:anyAttribute namespace=\"\
    ##any\" processContents=\"lax\"/>\n </xs:complexType>\n <!-- sidebarsByValResponse\
    \ -->\n <xs:complexType name=\"ccmp-sidebarsByVal-response-message-type\">\n \
    \        <xs:complexContent>\n          <xs:extension base=\"tns:ccmp-response-message-type\"\
    >\n                 <xs:sequence>\n            <xs:element ref=\"sidebarsByValResponse\"\
    />\n           </xs:sequence>\n          </xs:extension>\n         </xs:complexContent>\n\
    \ </xs:complexType>\n <!-- sidebarsByValResponseType -->\n <xs:element name=\"\
    sidebarsByValResponse\"\n             type=\"sidebarsByValResponseType\" />\n\
    \ <xs:complexType name=\"sidebarsByValResponseType\">\n     <xs:sequence>\n  \
    \       <xs:element name=\"sidebarsByValInfo\"\n                     type=\"info:sidebars-by-val-type\"\
    \ minOccurs=\"0\"/>\n         <xs:any namespace=\"##other\" processContents=\"\
    lax\"\n                 minOccurs=\"0\" maxOccurs=\"unbounded\"/>\n    </xs:sequence>\n\
    \    <xs:anyAttribute namespace=\"##any\" processContents=\"lax\"/>\n </xs:complexType>\n\
    \           Figure 13: Structure of the sidebarsByValRequest and\n           \
    \           sidebarsByValResponse Messages\n"
- title: 5.3.8.  sidebarByValRequest and sidebarByValResponse
  contents:
  - "5.3.8.  sidebarByValRequest and sidebarByValResponse\n   A sidebarByValRequest\
    \ message MUST contain the <operation> parameter,\n   which distinguishes among\
    \ retrieval, creation, modification, and\n   deletion of a specific sidebar. \
    \ The other required parameters depend\n   upon the type of operation.\n   In\
    \ the case of a \"create\" operation, the <confObjID> parameter MUST\n   be included\
    \ in the sidebyValRequest message.  In this case, the\n   <confObjID> parameter\
    \ contains the XCON-URI of the main conference in\n   which the sidebar has to\
    \ be created.  If no \"sidebarByValInfo\"\n   parameter is included, the sidebar\
    \ is created by cloning the main\n   conference, as envisioned in the XCON framework\
    \ [RFC5239] following\n   the implementation specific cloning rules.  Otherwise,\
    \ similar to the\n   case of direct creation, the sidebar conference object is\
    \ built on\n   the basis of the \"sidebarByValInfo\" parameter provided by the\n\
    \   requestor.  As a consequence of a sidebar-by-val creation, the\n   conference\
    \ server MUST update the main conference object reflected by\n   the <confObjID>\
    \ parameter in the sidebarbyValRequest/create message\n   introducing the new\
    \ sidebar object as a new <entry> in the proper\n   section <sidebars-by-val>.\
    \  The newly created sidebar conference\n   object MAY be included in the sidebarByValResponse\
    \ in the\n   <sidebarByValInfo> parameter, if the <response-code> is \"200\".\
    \  The\n   XCON-URI of the newly created sidebar MUST appear in the <confObjID>\n\
    \   parameter of the response.  The conference server can notify any\n   conferencing\
    \ clients that have subscribed to the conference event\n   package and that are\
    \ authorized to receive the notification of the\n   addition of the sidebar to\
    \ the conference.\n   In the case of a sidebarByValRequest message with an <operation>\n\
    \   parameter of \"retrieve\", the URI for the conference object created\n   for\
    \ the sidebar (received in response to a create operation or in a\n   sidebarsByValResponse\
    \ message) MUST be included in the <confObjID>\n   parameter in the request. \
    \ This retrieve operation is handled by the\n   conference server in the same\
    \ manner as in the case of an <operation>\n   parameter of \"retrieve\" included\
    \ in a confRequest message, as\n   described in Section 5.3.4.\n   In the case\
    \ of a sidebarByValRequest message with an <operation>\n   parameter of \"update\"\
    , the <sidebarByValInfo> MUST also be included\n   in the request.  The <confObjID>\
    \ parameter contained in the request\n   message identifies the specific sidebar\
    \ instance to be updated.  An\n   update operation on the specific sidebar instance\
    \ contained in the\n   <sidebarByValInfo> parameter is handled by the conference\
    \ server in\n   the same manner as an update operation on the conference instance\
    \ as\n   reflected by the <confInfo> parameter included in a confRequest\n   message\
    \ as detailed in Section 5.3.4.  A sidebarByValResponse message\n   MUST return\
    \ to the client a <version> element related to the current\n   version of the\
    \ sidebar whose identifier is contained in the\n   <confObjID> field of the request.\n\
    \   If an <operation> parameter of \"delete\" is included in the\n   sidebarByVal\
    \ request, the <sidebarByValInfo> parameter MUST NOT be\n   included in the request.\
    \  Any <sidebarByValInfo> included in the\n   request MUST be ignored by the conference\
    \ server.  The URI for the\n   conference object associated with the sidebar MUST\
    \ be included in the\n   <confObjID> parameter in the request.  If the specific\
    \ conferencing\n   user, as reflected by the <confUserID> parameter, in the request\
    \ is\n   authorized to delete the conference, the conference server deletes\n\
    \   the conference object reflected by the <confObjID> parameter and\n   updates\
    \ the data in the conference object from which the sidebar was\n   cloned.  The\
    \ conference server can notify any conferencing clients\n   that have subscribed\
    \ to the conference event package and that are\n   authorized to receive the notification\
    \ of the deletion of the sidebar\n   from the conference.\n   If a sidebarByValRequest\
    \ with an <operation> parameter of \"retrieve\",\n   \"update\", or \"delete\"\
    \ carries a <confObjID> parameter which is not\n   associated with any existing\
    \ sidebar-by-val, a confResponse message\n   containing a <response-code> of \"\
    404\" will be generated on the\n   server's side.  This also holds for the case\
    \ in which the mentioned\n   <confObjID> parameter is related to an existing conference\
    \ object\n   stored at the server, but associated with a blueprint or with an\n\
    \   actual conference or with a sidebar-by-ref rather than a sidebar-by-\n   val.\n\
    \   <!-- sidebarByValRequest -->\n   <xs:complexType name=\"ccmp-sidebarByVal-request-message-type\"\
    >\n       <xs:complexContent>\n           <xs:extension base=\"tns:ccmp-request-message-type\"\
    >\n               <xs:sequence>\n                   <xs:element ref=\"sidebarByValRequest\"\
    />\n               </xs:sequence>\n           </xs:extension>\n       </xs:complexContent>\n\
    \   </xs:complexType>\n   <!-- sidebarByValRequestType -->\n   <xs:element name=\"\
    sidebarByValRequest\"\n               type=\"sidebarByValRequestType\" />\n  \
    \ <xs:complexType name=\"sidebarByValRequestType\">\n       <xs:sequence>\n  \
    \         <xs:element name=\"sidebarByValInfo\"\n                       type=\"\
    info:conference-type\" minOccurs=\"0\"/>\n           <xs:any namespace=\"##other\"\
    \ processContents=\"lax\"\n                   minOccurs=\"0\" maxOccurs=\"unbounded\"\
    />\n       </xs:sequence>\n       <xs:anyAttribute namespace=\"##any\" processContents=\"\
    lax\"/>\n   </xs:complexType>\n   <!-- sidebarByValResponse -->\n   <xs:complexType\
    \ name=\"ccmp-sidebarByVal-response-message-type\">\n    <xs:complexContent>\n\
    \           <xs:extension base=\"tns:ccmp-response-message-type\">\n         \
    \   <xs:sequence>\n                   <xs:element ref=\"sidebarByValResponse\"\
    />\n            </xs:sequence>\n     </xs:extension>\n    </xs:complexContent>\n\
    \   </xs:complexType>\n   <!-- sidebarByValResponseType -->\n   <xs:element name=\"\
    sidebarByValResponse\"\n               type=\"sidebarByValResponseType\" />\n\
    \   <xs:complexType name=\"sidebarByValResponseType\">\n     <xs:sequence>\n \
    \       <xs:element name=\"sidebarByValInfo\"\n                    type=\"info:conference-type\"\
    \ minOccurs=\"0\"/>\n        <xs:any namespace=\"##other\" processContents=\"\
    lax\"\n                   minOccurs=\"0\" maxOccurs=\"unbounded\"/>\n     </xs:sequence>\n\
    \     <xs:anyAttribute namespace=\"##any\" processContents=\"lax\"/>\n   </xs:complexType>\n\
    \            Figure 14: Structure of the sidebarByValRequest and\n           \
    \            sidebarByValResponse Messages\n"
- title: 5.3.9.  sidebarsByRefRequest and sidebarsByRefResponse
  contents:
  - "5.3.9.  sidebarsByRefRequest and sidebarsByRefResponse\n   Similar to the sidebarsByValRequest,\
    \ a sidebarsByRefRequest can be\n   invoked to retrieve the <sidebars-by-ref>\
    \ element of the conference\n   object identified by the <confObjID> parameter.\
    \  The\n   sidebarsByRefRequest message is of a retrieve-only type, so an\n  \
    \ <operation> parameter MUST NOT be included in a sidebarsByRefRequest\n   message.\
    \  In the case of a <response-code> of \"200\", the\n   <sidebarsByRefInfo> parameter,\
    \ containing the <sidebars-by-ref>\n   element of the conference object, MUST\
    \ be included in the response.\n   The <sidebars-by-ref> element represents the\
    \ set of URIs of the\n   sidebars associated with the main conference, whose description\
    \ (in\n   the form of a standard XCON conference document) is external to the\n\
    \   main conference itself.  Through the retrieved URIs, it is then\n   possible\
    \ to access single sidebars using the sidebarByRefRequest\n   message, described\
    \ in Section 5.3.10.  A sidebarsByRefResponse\n   message MUST carry back to the\
    \ client a <version> element related to\n   the current version of the main conference\
    \ object (i.e., the one\n   whose identifier is contained in the <confObjId> field\
    \ of the\n   request) with which the sidebars in question are associated.\n  \
    \ <!-- sidebarsByRefRequest -->\n   <xs:complexType name=\"ccmp-sidebarsByRef-request-message-type\"\
    >\n       <xs:complexContent>\n           <xs:extension base=\"tns:ccmp-request-message-type\"\
    >\n               <xs:sequence>\n                   <xs:element ref=\"sidebarsByRefRequest\"\
    />\n               </xs:sequence>\n           </xs:extension>\n      </xs:complexContent>\n\
    \   </xs:complexType>\n   <!-- sidebarsByRefRequestType -->\n   <xs:element name=\"\
    sidebarsByRefRequest\"\n               type=\"sidebarsByRefRequestType\" />\n\
    \   <xs:complexType name=\"sidebarsByRefRequestType\">\n       <xs:sequence>\n\
    \           <xs:element name=\"xpathFilter\"\n                       type=\"xs:string\"\
    \ minOccurs=\"0\"/>\n           <xs:any namespace=\"##other\" processContents=\"\
    lax\"\n                   minOccurs=\"0\" maxOccurs=\"unbounded\"/>\n       </xs:sequence>\n\
    \       <xs:anyAttribute namespace=\"##any\" processContents=\"lax\"/>\n   </xs:complexType>\n\
    \   <!-- sidebarsByRefResponse -->\n   <xs:complexType name=\"ccmp-sidebarsByref-response-message-type\"\
    >\n           <xs:complexContent>\n            <xs:extension base=\"tns:ccmp-response-message-type\"\
    >\n                    <xs:sequence>\n                           <xs:element ref=\"\
    sidebarsByRefResponse\"/>\n                    </xs:sequence>\n            </xs:extension>\n\
    \     </xs:complexContent>\n   </xs:complexType>\n   <!-- sidebarsByRefResponseType\
    \ -->\n   <xs:element name=\"sidebarsByRefResponse\"\n               type=\"sidebarsByRefResponseType\"\
    \ />\n   <xs:complexType name=\"sidebarsByRefResponseType\">\n       <xs:sequence>\n\
    \          <xs:element name=\"sidebarsByRefInfo\"\n                      type=\"\
    info:uris-type\" minOccurs=\"0\"/>\n          <xs:any namespace=\"##other\" processContents=\"\
    lax\"\n                  minOccurs=\"0\" maxOccurs=\"unbounded\"/>\n       </xs:sequence>\n\
    \       <xs:anyAttribute namespace=\"##any\" processContents=\"lax\"/>\n   </xs:complexType>\n\
    \             Figure 15: Structure of the sidebarsByRefRequest\n             \
    \       and sidebarsByRefResponse Messages\n"
- title: 5.3.10.  sidebarByRefRequest and sidebarByRefResponse
  contents:
  - "5.3.10.  sidebarByRefRequest and sidebarByRefResponse\n   A sidebarByValResponse\
    \ message MUST return to the client a <version>\n   element related to the current\
    \ version of the sidebar whose\n   identifier is contained in the <confObjID>\
    \ field of the request.\n   In the case of a create operation, the <confObjID>\
    \ parameter MUST be\n   included in the sidebyRefRequest message.  In this case,\
    \ the\n   <confObjID> parameter contains the XCON-URI of the main conference in\n\
    \   which the sidebar has to be created.  If no <sidebarByRefInfo>\n   parameter\
    \ is included, following the XCON framework [RFC5239], the\n   sidebar is created\
    \ by cloning the main conference, observing the\n   implementation-specific cloning\
    \ rules.  Otherwise, similar to the\n   case of direct creation, the sidebar conference\
    \ object is built on\n   the basis of the <sidebarByRefInfo> parameter provided\
    \ by the\n   requestor.  If the creation of the sidebar is successful, the\n \
    \  conference server MUST update the <sidebars-by-ref> element in the\n   conference\
    \ object from which the sidebar was created (i.e., as\n   identified by the <confObjID>\
    \ in the original sidebarByRefRequest),\n   with the URI of the newly created\
    \ sidebar.  The newly created\n   conference object MAY be included in the response\
    \ in the\n   <sidebarByRefInfo> parameter with a <response-code> of \"200\". \
    \ The\n   URI for the conference object associated with the newly created\n  \
    \ sidebar object MUST appear in the <confObjID> parameter of the\n   response.\
    \  The conference server can notify any conferencing clients\n   that have subscribed\
    \ to the conference event package and that are\n   authorized to receive the notification\
    \ of the addition of the sidebar\n   to the conference.\n   In the case of a sidebarByRefRequest\
    \ message with an <operation>\n   parameter of \"retrieve\", the URI for the conference\
    \ object created\n   for the sidebar MUST be included in the <confObjID> parameter\
    \ in the\n   request.  A retrieve operation on the <sidebarByRefInfo> is handled\n\
    \   by the conference server in the same manner as a retrieve operation\n   on\
    \ the confInfo included in a confRequest message as detailed in\n   Section 5.3.4.\n\
    \   In the case of a sidebarByRefRequest message with an <operation>\n   parameter\
    \ of \"update\", the URI for the conference object created for\n   the sidebar\
    \ MUST be included in the <confObjID> parameter in the\n   request.  The <sidebarByRefInfo>\
    \ MUST also be included in the request\n   in the case of an \"update\" operation.\
    \  An update operation on the\n   <sidebarByRefInfo> is handled by the conference\
    \ server in the same\n   manner as an update operation on the <confInfo> included\
    \ in a\n   confRequest message as detailed in Section 5.3.4.  A\n   sidebarByRefResponse\
    \ message MUST carry back to the client a\n   <version> element related to the\
    \ current version of the sidebar whose\n   identifier is contained in the <confObjID>\
    \ field of the request.\n   If an <operation> parameter of \"delete\" is included\
    \ in the\n   sidebarByRefRequest, the <sidebarByRefInfo> parameter MUST NOT be\n\
    \   included in the request.  Any <sidebarByRefInfo> included in the\n   request\
    \ MUST be ignored by the conference server.  The URI for the\n   conference object\
    \ for the sidebar MUST be included in the <confObjID>\n   parameter in the request.\
    \  If the specific conferencing user as\n   reflected by the <confUserID> parameter\
    \ in the request is authorized\n   to delete the conference, the conference server\
    \ SHOULD delete the\n   conference object reflected by the <confObjID> parameter\
    \ and SHOULD\n   update the <sidebars-by-ref> element in the conference object\
    \ from\n   which the sidebar was originally cloned.  The conference server can\n\
    \   notify any conferencing clients that have subscribed to the\n   conference\
    \ event package and that are authorized to receive the\n   notification of the\
    \ deletion of the sidebar.\n   If a sidebarByRefRequest with an <operation> parameter\
    \ of \"retrieve\",\n   \"update\", or \"delete\" carries a <confObjID> parameter\
    \ that is not\n   associated with any existing sidebar-by-ref, a confResponse\
    \ message\n   containing a <response-code> of \"404\" will be generated on the\n\
    \   server's side.  This also holds for the case in which the value of\n   the\
    \ mentioned <confObjID> parameter is related to an existing\n   conference object\
    \ stored at the server, but associated with a\n   blueprint or with an actual\
    \ conference or with a sidebar-by-val\n   rather than a sidebar-by-ref.\n   <!--\
    \ sidebarByRefRequest -->\n   <xs:complexType name=\"ccmp-sidebarByRef-request-message-type\"\
    >\n       <xs:complexContent>\n           <xs:extension base=\"tns:ccmp-request-message-type\"\
    >\n               <xs:sequence>\n                   <xs:element ref=\"sidebarByRefRequest\"\
    />\n                </xs:sequence>\n           </xs:extension>\n       </xs:complexContent>\n\
    \   </xs:complexType>\n   <!-- sidebarByRefRequestType -->\n   <xs:element name=\"\
    sidebarByRefRequest\"\n               type=\"sidebarByRefRequestType\" />\n  \
    \ <xs:complexType name=\"sidebarByRefRequestType\">\n       <xs:sequence>\n  \
    \         <xs:element name=\"sidebarByRefInfo\"\n                       type=\"\
    info:conference-type\" minOccurs=\"0\"/>\n           <xs:any namespace=\"##other\"\
    \ processContents=\"lax\"\n                  minOccurs=\"0\" maxOccurs=\"unbounded\"\
    />\n        </xs:sequence>\n        <xs:anyAttribute namespace=\"##any\" processContents=\"\
    lax\"/>\n   </xs:complexType>\n   <!-- sidebarByRefResponse -->\n   <xs:complexType\
    \ name=\"ccmp-sidebarByRef-response-message-type\">\n       <xs:complexContent>\n\
    \           <xs:extension base=\"tns:ccmp-response-message-type\">\n         \
    \      <xs:sequence>\n                   <xs:element ref=\"sidebarByRefResponse\"\
    />\n               </xs:sequence>\n           </xs:extension>\n       </xs:complexContent>\n\
    \   </xs:complexType>\n   <!-- sidebarByRefResponseType -->\n   <xs:element name=\"\
    sidebarByRefResponse\"\n               type=\"sidebarByRefResponseType\" />\n\
    \   <xs:complexType name=\"sidebarByRefResponseType\">\n       <xs:sequence>\n\
    \           <xs:element name=\"sidebarByRefInfo\"\n                       type=\"\
    info:conference-type\" minOccurs=\"0\"/>\n           <xs:any namespace=\"##other\"\
    \ processContents=\"lax\"\n                  minOccurs=\"0\" maxOccurs=\"unbounded\"\
    />\n     </xs:sequence>\n     <xs:anyAttribute namespace=\"##any\" processContents=\"\
    lax\"/>\n   </xs:complexType>\n              Figure 16: Structure of the sidebarByRefRequest\n\
    \                     and sidebarByRefResponse Messages\n"
- title: 5.3.11.  extendedRequest and extendedResponse
  contents:
  - "5.3.11.  extendedRequest and extendedResponse\n   In order to allow specifying\
    \ new request and response pairs for\n   conference control, CCMP defines the\
    \ extendedRequest and\n   extendedResponse messages.  Such messages constitute\
    \ a CCMP skeleton\n   in which implementers can transport the information needed\
    \ to realize\n   conference control mechanisms not explicitly envisioned in the\
    \ CCMP\n   specification; these mechanisms are called, in this context,\n   \"\
    extensions\".  Each extension is assumed to be characterized by an\n   appropriate\
    \ name that MUST be carried in the extendedRequest/\n   extendedResponse pair\
    \ in the provided <extensionName> field.\n   Extension-specific information can\
    \ be transported in the form of\n   schema-defined XML elements inside the <any>\
    \ element present in both\n   extendedRequest and extendedResponse.\n   The conferencing\
    \ client SHOULD be able to determine the extensions\n   supported by a CCMP server\
    \ and to recover the XML schema defining the\n   related specific elements by\
    \ means of an optionsRequest/\n   optionsResponse CCMP transaction (see Section\
    \ 5.3.12).\n   The meaning of the common CCMP parameters inherited by the\n  \
    \ extendedRequest and extendedResponse from the basic CCMP request and\n   response\
    \ messages SHOULD be preserved and exploited appropriately\n   while defining\
    \ an extension.\n   <!-- extendedRequest -->\n   <xs:complexType name=\"ccmp-extended-request-message-type\"\
    >\n      <xs:complexContent>\n          <xs:extension base=\"tns:ccmp-request-message-type\"\
    >\n             <xs:sequence>\n                            <xs:element ref=\"\
    extendedRequest\"/>\n             </xs:sequence>\n          </xs:extension>\n\
    \      </xs:complexContent>\n   </xs:complexType>\n   <!-- extendedRequestType\
    \ -->\n   <xs:element name=\"extendedRequest\" type=\"extendedRequestType\"/>\n\
    \   <xs:complexType name=\"extendedRequestType\">\n     <xs:sequence>\n      \
    \     <xs:element name=\"extensionName\"\n                       type=\"xs:string\"\
    \ minOccurs=\"1\"/>\n           <xs:any namespace=\"##other\" processContents=\"\
    lax\"\n                   minOccurs=\"0\"\n               maxOccurs=\"unbounded\"\
    \ />\n    </xs:sequence>\n   </xs:complexType>\n   <!-- extendedResponse -->\n\
    \   <xs:complexType name=\"ccmp-extended-response-message-type\">\n      <xs:complexContent>\n\
    \          <xs:extension base=\"tns:ccmp-response-message-type\">\n          \
    \    <xs:sequence>\n                            <xs:element ref=\"extendedResponse\"\
    />\n              </xs:sequence>\n          </xs:extension>\n       </xs:complexContent>\n\
    \   </xs:complexType>\n   <!-- extendedResponseType -->\n   <xs:element name=\"\
    extendedResponse\" type=\"extendedResponseType\"/>\n   <xs:complexType name=\"\
    extendedResponseType\">\n           <xs:sequence>\n                   <xs:element\
    \ name=\"extensionName\"\n                               type=\"xs:string\"\n\
    \                               minOccurs=\"1\"/>\n                   <xs:any\
    \ namespace=\"##other\"\n                           processContents=\"lax\"\n\
    \                           minOccurs=\"0\" maxOccurs=\"unbounded\" />\n     \
    \      </xs:sequence>\n   </xs:complexType>\n              Figure 17: Structure\
    \ of the extendedRequest and\n                         extendedResponse Messages\n"
- title: 5.3.12.  optionsRequest and optionsResponse
  contents:
  - "5.3.12.  optionsRequest and optionsResponse\n   The optionsRequest message (Figure\
    \ 18) retrieves general information\n   about conference server capabilities.\
    \  These capabilities include the\n   standard CCMP messages (request/response\
    \ pairs) and potential\n   extension messages supported by the conference server.\
    \  As such, it\n   is a basic CCMP message, rather than a specialization of the\
    \ general\n   CCMP request.\n   The optionsResponse returns, in the appropriate\
    \ <options> field, a\n   list of the supported CCMP message pairs as defined in\
    \ this\n   specification.  These messages are in the form of a list: <standard-\n\
    \   message-list> including each of the supported messages as reflected\n   by\
    \ <standard-message> elements.  The optionsResponse message also\n   allows for\
    \ an <extended-message-list>, which is a list of additional\n   message types\
    \ in the form of <extended-message-list> elements that\n   are currently undefined,\
    \ to allow for future extensibility.  The\n   following information is provided\
    \ for both types of messages:\n   o  <name> (REQUIRED): in case of standard messages,\
    \ it can be one of\n      the 10 standard message names defined in this document\
    \ (i.e.,\n      \"blueprintsRequest\", \"confsRequest\", etc.).  In case of\n\
    \      extensions, this element MUST carry the same value of the\n      <extension-name>\
    \ inserted in the corresponding extendedRequest/\n      extendedResponse message\
    \ pair.\n   o  <operations> (OPTIONAL): this field is a list of <operation>\n\
    \      entries, each representing the Create, Read, Update, Delete (CRUD)\n  \
    \    operation supported by the server for the message.  If this\n      element\
    \ is absent, the client SHOULD assume the server is able to\n      handle the\
    \ entire set of CRUD operations or, in case of standard\n      messages, all the\
    \ operations envisioned for that message in this\n      document.\n   o  <schema-ref>\
    \ (OPTIONAL): since all CCMP messages can potentially\n      contain XML elements\
    \ not envisioned in the CCMP schema (due to the\n      presence of <any> elements\
    \ and attributes), a reference to a\n      proper schema definition specifying\
    \ such new elements/attributes\n      can also be sent back to the clients by\
    \ means of such field.  If\n      this element is absent, no new elements are\
    \ introduced in the\n      messages other than those explicitly defined in the\
    \ CCMP\n      specification.\n   o  <description> (OPTIONAL): human-readable information\
    \ about the\n      related message.\n   The only parameter needed in the optionsRequest\
    \ is the sender\n   confUserID, which is mirrored in the same parameter of the\n\
    \   corresponding optionsResponse.\n   The CCMP server MUST include the <standard-message-list>\
    \ containing\n   at least one <operation> element in the optionsResponse, since\
    \ a CCMP\n   server is REQUIRED to be able to handle both the request and response\n\
    \   messages for at least one of the operations.\n   <!-- optionsRequest -->\n\
    \   <xs:complexType name=\"ccmp-options-request-message-type\">\n           <xs:complexContent>\n\
    \                   <xs:extension base=\"tns:ccmp-request-message-type\"/>\n \
    \          </xs:complexContent>\n   </xs:complexType>\n   <!-- optionsResponse\
    \ -->\n   <xs:complexType name=\"ccmp-options-response-message-type\">\n     \
    \ <xs:complexContent>\n         <xs:extension base=\"tns:ccmp-response-message-type\"\
    >\n           <xs:sequence>\n             <xs:element ref=\"optionsResponse\"\
    />\n           </xs:sequence>\n         </xs:extension>\n     </xs:complexContent>\n\
    \   </xs:complexType>\n   <!-- optionsResponseType -->\n   <xs:element name=\"\
    optionsResponse\"\n                  type=\"optionsResponseType\" />\n   <xs:complexType\
    \ name=\"optionsResponseType\">\n     <xs:sequence>\n      <xs:element name=\"\
    options\"\n               type=\"options-type\" minOccurs=\"0\"/>\n      <xs:any\
    \ namespace=\"##other\" processContents=\"lax\"\n                minOccurs=\"\
    0\" maxOccurs=\"unbounded\"/>\n    </xs:sequence>\n    <xs:anyAttribute namespace=\"\
    ##any\" processContents=\"lax\"/>\n   </xs:complexType>\n   <!-- options-type\
    \ -->\n   <xs:complexType name=\"options-type\">\n      <xs:sequence>\n      \
    \     <xs:element name=\"standard-message-list\"\n                   type=\"standard-message-list-type\"\
    \n                   minOccurs=\"1\"/>\n       <xs:element name=\"extended-message-list\"\
    \n                   type=\"extended-message-list-type\"\n                   minOccurs=\"\
    0\"/>\n       <xs:any namespace=\"##other\" processContents=\"lax\"\n        \
    \       minOccurs=\"0\" maxOccurs=\"unbounded\"/>\n      </xs:sequence>\n    \
    \  <xs:anyAttribute namespace=\"##any\" processContents=\"lax\"/>\n   </xs:complexType>\n\
    \   <!-- standard-message-list-type -->\n   <xs:complexType name=\"standard-message-list-type\"\
    >\n     <xs:sequence>\n           <xs:element name=\"standard-message\"\n    \
    \                   type=\"standard-message-type\"\n                       minOccurs=\"\
    1\" maxOccurs=\"10\"/>\n       <xs:any namespace=\"##other\" processContents=\"\
    lax\"\n               minOccurs=\"0\" maxOccurs=\"unbounded\"/>\n     </xs:sequence>\n\
    \     <xs:anyAttribute namespace=\"##any\" processContents=\"lax\"/>\n   </xs:complexType>\n\
    \   <!-- standard-message-type -->\n   <xs:complexType name=\"standard-message-type\"\
    >\n      <xs:sequence>\n           <xs:element name=\"name\"\n               \
    \        type=\"standard-message-name-type\"\n                       minOccurs=\"\
    1\"/>\n           <xs:element name=\"operations\"\n                       type=\"\
    operations-type\"\n                       minOccurs=\"0\"/>\n           <xs:element\
    \ name=\"schema-def\"\n                       type=\"xs:string\" minOccurs=\"\
    0\"/>\n           <xs:element name=\"description\"\n                       type=\"\
    xs:string\" minOccurs=\"0\"/>\n       <xs:any namespace=\"##other\" processContents=\"\
    lax\"\n               minOccurs=\"0\" maxOccurs=\"unbounded\"/>\n      </xs:sequence>\n\
    \      <xs:anyAttribute namespace=\"##any\" processContents=\"lax\"/>\n   </xs:complexType>\n\
    \   <!-- standard-message-name-type -->\n   <xs:simpleType name=\"standard-message-name-type\"\
    >\n      <xs:restriction base=\"xs:token\">\n       <xs:enumeration value=\"confsRequest\"\
    />\n       <xs:enumeration value=\"confRequest\"/>\n       <xs:enumeration value=\"\
    blueprintsRequest\"/>\n       <xs:enumeration value=\"blueprintRequest\"/>\n \
    \      <xs:enumeration value=\"usersRequest\"/>\n       <xs:enumeration value=\"\
    userRequest\"/>\n       <xs:enumeration value=\"sidebarsByValRequest\"/>\n   \
    \    <xs:enumeration value=\"sidebarByValRequest\"/>\n       <xs:enumeration value=\"\
    sidebarsByRefRequest\"/>\n       <xs:enumeration value=\"sidebarByRefRequest\"\
    />\n      </xs:restriction>\n   </xs:simpleType>\n   <!-- operations-type -->\n\
    \   <xs:complexType name=\"operations-type\">\n     <xs:sequence>\n        <xs:element\
    \ name=\"operation\" type=\"operationType\"\n                    minOccurs=\"\
    1\" maxOccurs=\"4\"/>\n     </xs:sequence>\n     <xs:anyAttribute namespace=\"\
    ##any\" processContents=\"lax\"/>\n   </xs:complexType>\n              Figure\
    \ 18: Structure of the optionsRequest and\n                         optionsResponse\
    \ Messages\n"
- title: 5.4.  CCMP Response Codes
  contents:
  - "5.4.  CCMP Response Codes\n   All CCMP response messages MUST include a <response-code>.\
    \  This\n   document defines an IANA registry for the CCMP response codes, as\n\
    \   described in Section 12.5.2.  The following summarizes the CCMP\n   response\
    \ codes:\n   200 Success:\n      Successful completion of the requested operation.\n\
    \   400 Bad Request:\n      Syntactically malformed request.\n   401 Unauthorized:\n\
    \      User not allowed to perform the required operation.\n   403 Forbidden:\n\
    \      Operation not allowed (e.g., cancellation of a blueprint).\n   404 Object\
    \ Not Found:\n      The target conference object does not exist at the server\
    \ (The\n      object in the error message refers to the <confObjID> parameter\
    \ in\n      the generic request message).\n   409 Conflict:\n      A generic error\
    \ associated with all those situations in which a\n      requested client operation\
    \ cannot be successfully completed by the\n      server.  An example of such a\
    \ situation is when the modification\n      of an object cannot be applied due\
    \ to conflicts arising at the\n      server's side, e.g., because the client version\
    \ of the object is\n      an obsolete one and the requested modifications collide\
    \ with the\n      up-to-date state of the object stored at the server.  Such code\n\
    \      would also be used if a client attempts to create an object\n      (conference\
    \ or user) with an entity that already exists.\n   420 User Not Found:\n     \
    \ Target user missing at the server (it is related to the XCON-\n      USERID\
    \ in the 'entity' attribute of the <userInfo> parameter when\n      it is included\
    \ in userRequests).\n   421 Invalid confUserID:\n      User does not exist at\
    \ the server (This code is returned for\n      requests where the <confUserID>\
    \ parameter is invalid).\n   422 Invalid Conference Password:\n      The password\
    \ for the target conference object contained in the\n      request is wrong.\n\
    \   423 Conference Password Required:\n      \"conference-password\" missing in\
    \ a request to access a password-\n      protected conference object.\n   424\
    \ Authentication Required:\n      User's authentication information is missing\
    \ or invalid.\n   425 Forbidden Delete Parent:\n      Cancel operation failed\
    \ since the target object is a parent of\n      child objects that depend on it,\
    \ or because it affects, based on\n      the \"parent-enforceable\" mechanism,\
    \ the corresponding element in a\n      child object.\n   426 Forbidden Change\
    \ Protected:\n      Update refused by the server because the target element cannot\
    \ be\n      modified due to its implicit dependence on the value of a parent\n\
    \      object (\"parent-enforceable\" mechanism).\n   427 Invalid Domain Name:\n\
    \      The domain name in an AUTO_GENERATE_X instance in the conference\n    \
    \  object is not within the CCMP server's domain of responsibility.\n   500 Server\
    \ Internal Error:\n      The server cannot complete the required service due to\
    \ a system\n      internal error.\n   501 Not Implemented:\n      Operation defined\
    \ by the protocol, but not implemented by this\n      server.\n   510 Request\
    \ Timeout:\n      The time required to serve the request has exceeded the configured\n\
    \      service threshold.\n   511 Resources Not Available:\n      This code is\
    \ used when the CCMP server cannot execute a command\n      because of resource\
    \ issues, e.g., it cannot create a sub-\n      conference because the system has\
    \ reached its limits on the number\n      of sub-conferences, or if a request\
    \ for adding a new user fails\n      because the max number of users has been\
    \ reached for the\n      conference or the max number of users has been reached\
    \ for the\n      conferencing system.\n   The handling of a <response-code> of\
    \ \"404\", \"409\", \"420\", \"421\",\n   \"425\", \"426\", or \"427\" is only\
    \ applicable to specific operations for\n   specialized message responses and\
    \ the details are provided in\n   Section 5.3.  The following table summarizes\
    \ these response codes and\n   the specialized message and operation to which\
    \ they are applicable:\n   +----------+-------------+--------------+-------------+-------------+\n\
    \   | Response | Create      | Retrieve     | Update      | Delete      |\n  \
    \ | code     |             |              |             |             |\n   +----------+-------------+--------------+-------------+-------------+\n\
    \   | 404      | userRequest | All retrieve | All update  | All delete  |\n  \
    \ |          | sidebarBy   | requests     | requests    | requests    |\n   |\
    \          | ValRequest, | EXCEPT:      |             |             |\n   |  \
    \        | sidebarsBy  | blueprints   |             |             |\n   |    \
    \      | RefRequest  | Request,     |             |             |\n   |      \
    \    |             | confsRequest |             |             |\n   | --------\
    \ | ----------- | ------------ | ----------- | ----------- |\n   | 409      |\
    \ N/A         | N/A          | All update  | N/A         |\n   |          |  \
    \           |              | requests    |             |\n   | -------- | -----------\
    \ | -----------  | ----------- | ----------- |\n   | 420      | userRequest |\
    \ userRequest  | userRequest | userRequest |\n   |          | (third-     |  \
    \            |             |             |\n   |          | party       |    \
    \          |             |             |\n   |          | invite with |      \
    \        |             |             |\n   |          | third-user  |        \
    \      |             |             |\n   |          | entity) (*) |          \
    \    |             |             |\n   | -------- | ----------- | -----------\
    \  | ----------- | ----------- |\n   | 421      | All create  | All retrieve |\
    \ All update  | All delete  |\n   |          | requests    | requests     | requests\
    \    | requests    |\n   |          | EXCEPT:     |              |           \
    \  |             |\n   |          | userRequest |              |             |\
    \             |\n   |          | with no     |              |             |  \
    \           |\n   |          | confUserID  |              |             |    \
    \         |\n   |          | (**)        |              |             |      \
    \       |\n   | -------- | ----------- | -----------  | ----------- | -----------\
    \ |\n   | 425      | N/A         | N/A          | N/A         | All delete  |\n\
    \   |          |             |              |             | request     |\n  \
    \ | -------- | ----------- | -----------  | ----------- | ----------- |\n   |\
    \ 426      | N/A         | N/A          | All update  | N/A         |\n   |  \
    \        |             |              | requests    |             |\n   | --------\
    \ | ----------- | -----------  | ----------- | ----------- |\n   | 427      |\
    \ ConfRequest | N/A          | All update  | N/A         |\n   |          | UserRequest\
    \ |              | requests    |             |\n   +----------+-------------+--------------+-------------+-------------+\n\
    \             Table 2: Response Codes and Associated Operations\n   (*) \"420\"\
    \ in answer to a \"userRequest/create\" operation: In the case\n   of a third-party\
    \ invite, this code can be returned if the\n   <confUserID> (contained in the\
    \ 'entity' attribute of the <userInfo>\n   parameter) of the user to be added\
    \ is unknown.  In the case above, if\n   instead it is the <confUserID> parameter\
    \ of the sender of the request\n   that is invalid, a <response-code> of \"421\"\
    \ is returned to the\n   client.\n   (**) \"421\" is not sent in answer to userRequest/create\
    \ messages\n   having a \"null\" confUserID, since this case is associated with\
    \ a user\n   who is unaware of his own XCON-USERID, but wants to enter a known\n\
    \   conference.\n   In the case of a <response-code> of \"510\", a conferencing\
    \ client MAY\n   re-attempt the request within a period of time that would be\
    \ specific\n   to a conferencing client or conference server.\n   A <response-code>\
    \ of \"400\" indicates that the conferencing client\n   sent a malformed request,\
    \ which is indicative of an error in the\n   conferencing client or in the conference\
    \ server.  The handling is\n   specific to the conferencing client implementation\
    \ (e.g., generate a\n   log, display an error message, etc.).  It is NOT RECOMMENDED\
    \ that the\n   client re-attempt the request in this case.\n   A <response-code>\
    \ of \"401\" or \"403\" indicates the client does not\n   have the appropriate\
    \ permissions, or there is an error in the\n   permissions: re-attempting the\
    \ request would likely not succeed and\n   thus it is NOT RECOMMENDED.\n   Any\
    \ unexpected or unknown <response-code> SHOULD be treated by the\n   client in\
    \ the same manner as a <response-code> of \"500\", the handling\n   of which is\
    \ specific to the conferencing client implementation.\n"
- title: 6.  A Complete Example of CCMP in Action
  contents:
  - "6.  A Complete Example of CCMP in Action\n   In this section a typical, non-normative,\
    \ scenario in which CCMP\n   comes into play is described, by showing the actual\
    \ composition of\n   the various CCMP messages.  In the call flows of the example,\
    \ the\n   conferencing client is a CCMP-enabled client, and the conference\n \
    \  server is a CCMP-enabled server.  The XCON-USERID of the client,\n   Alice,\
    \ is \"xcon-userid:alice@example.com\" and it appears in the\n   <confUserID>\
    \ parameter in all requests.  The sequence of operations\n   is as follows:\n\
    \   1.  Alice retrieves the list of available blueprints from the server\n   \
    \    (Section 6.1);\n   2.  Alice asks for detailed information about a specific\
    \ blueprint\n       (Section 6.2);\n   3.  Alice decides to create a new conference\
    \ by cloning the retrieved\n       blueprint (Section 6.3);\n   4.  Alice modifies\
    \ information (e.g., XCON-URI, name, and\n       description) associated with\
    \ the newly created blueprint\n       (Section 6.4);\n   5.  Alice specifies a\
    \ list of users to be contacted when the\n       conference is activated (Section\
    \ 6.5);\n   6.  Alice joins the conference (Section 6.6);\n   7.  Alice lets a\
    \ new user, Ciccio, (whose XCON-USERID is\n       \"xcon-userid:Ciccio@example.com\"\
    ) join the conference\n       (Section 6.7).\n   8.  Alice asks for the CCMP server\
    \ capabilities (Section 6.8);\n   9.  Alice exploits an extension of the CCMP\
    \ server (Section 6.9).\n   Note that the examples do not include any details\
    \ beyond the basic\n   operation.\n   In the following sections, we deal with\
    \ each of the aforementioned\n   actions separately.\n"
- title: 6.1.  Alice Retrieves the Available Blueprints
  contents:
  - "6.1.  Alice Retrieves the Available Blueprints\n   This section illustrates the\
    \ transaction associated with retrieval of\n   the blueprints, together with a\
    \ dump of the two messages exchanged\n   (blueprintsRequest and blueprintsResponse).\
    \  As shown in the figure,\n   the blueprintsResponse message contains, in the\
    \ <blueprintsInfo>\n   parameter, information about the available blueprints,\
    \ in the form of\n   the standard XCON-URI of the blueprint, plus additional (and\n\
    \   optional) information, like its display-text and purpose.\n   Alice retrieves\
    \ from the server the list of available blueprints:\n    CCMP Client         \
    \                                    CCMP Server\n         |                 \
    \                                      |\n         | CCMP blueprintsRequest message\
    \                        |\n         |   - confUserID: Alice                 \
    \                |\n         |   - confObjID: (null)                         \
    \        |\n         |------------------------------------------------------>|\n\
    \         |                                                       |\n        \
    \ |                     CCMP blueprintsResponse message   |\n         |      \
    \                - confUserID: Alice              |\n         |              \
    \        - confObjID: (null)              |\n         |                      -\
    \ response-code: 200             |\n         |                      - blueprintsInfo:\
    \ bp123,bp124,.. |\n         |<------------------------------------------------------|\n\
    \         |                                                       |\n        \
    \ .                                                       .\n         .      \
    \                                                 .\n  1. blueprintsRequest message:\n\
    \  <?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n  <ccmp:ccmpRequest\n\
    \        xmlns:info=\"urn:ietf:params:xml:ns:conference-info\"\n        xmlns:ccmp=\"\
    urn:ietf:params:xml:ns:xcon-ccmp\"\n        xmlns:xcon=\"urn:ietf:params:xml:ns:xcon-conference-info\"\
    >\n      <ccmpRequest xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n\
    \       xsi:type=\"ccmp:ccmp-blueprints-request-message-type\">\n          <confUserID>xcon-userid:alice@example.com</confUserID>\n\
    \          <ccmp:blueprintsRequest/>\n      </ccmpRequest>\n  </ccmp:ccmpRequest>\n\
    \  2. blueprintsResponse message from the server:\n  <?xml version=\"1.0\" encoding=\"\
    UTF-8\" standalone=\"yes\"?>\n  <ccmp:ccmpResponse\n   xmlns:xcon=\"urn:ietf:params:xml:ns:xcon-conference-info\"\
    \n   xmlns:info=\"urn:ietf:params:xml:ns:conference-info\"\n   xmlns:ccmp=\"urn:ietf:params:xml:ns:xcon-ccmp\"\
    >\n  <ccmpResponse\n      xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\
    \n      xsi:type=\"ccmp:ccmp-blueprints-response-message-type\">\n     <confUserID>xcon-userid:alice@example.com</confUserID>\n\
    \     <response-code>200</response-code>\n       <ccmp:blueprintsResponse>\n \
    \       <blueprintsInfo>\n         <info:entry>\n          <info:uri>xcon:AudioRoom@example.com</info:uri>\n\
    \          <info:display-text>AudioRoom</info:display-text>\n          <info:purpose>Simple\
    \ Room:\n             conference room with public access,\n             where\
    \ only audio is available, more users\n             can talk at the same time\n\
    \             and the requests for the AudioFloor\n             are automatically\
    \ accepted.\n          </info:purpose>\n         </info:entry>\n         <info:entry>\n\
    \          <info:uri>xcon:VideoRoom@example.com</info:uri>\n          <info:display-text>VideoRoom</info:display-text>\n\
    \          <info:purpose>Video Room:\n              conference room with public\
    \ access,\n              where both audio and video are available,\n         \
    \     8 users can talk and be seen at the same time,\n              and the floor\
    \ requests are automatically accepted.\n          </info:purpose>\n         </info:entry>\n\
    \         <info:entry>\n          <info:uri>xcon:AudioConference1@example.com</info:uri>\n\
    \          <info:display-text>AudioConference1</info:display-text>\n         \
    \ <info:purpose>Public Audio Conference:\n               conference with public\
    \ access,\n               where only audio is available,\n               only\
    \ one user can talk at the same time,\n               and the requests for the\
    \ AudioFloor MUST\n               be accepted by a Chair.\n          </info:purpose>\n\
    \         </info:entry>\n         <info:entry>\n          <info:uri>xcon:VideoConference1@example.com</info:uri>\n\
    \          <info:display-text>VideoConference1</info:display-text>\n         \
    \   <info:purpose>Public Video Conference: conference\n                where both\
    \ audio and video are available,\n                only one user can talk.\n  \
    \          </info:purpose>\n          </info:entry>\n          <info:entry>\n\
    \           <info:uri>xcon:AudioConference2@example.com</info:uri>\n         \
    \  <info:display-text>AudioConference2</info:display-text>\n           <info:purpose>Basic\
    \ Audio Conference:\n                conference with private access,\n       \
    \         where only audio is available,\n                only one user can talk\
    \ at the same time,\n                and the requests for the AudioFloor MUST\n\
    \                be accepted by a Chair.\n           </info:purpose>\n       \
    \   </info:entry>\n       </blueprintsInfo>\n     </ccmp:blueprintsResponse>\n\
    \    </ccmpResponse>\n  </ccmp:ccmpResponse>\n               Figure 19: Getting\
    \ Blueprints from the Server\n"
- title: 6.2.  Alice Gets Detailed Information about a Specific Blueprint
  contents:
  - "6.2.  Alice Gets Detailed Information about a Specific Blueprint\n   This section\
    \ illustrates the second transaction in the overall flow.\n   In this case, Alice,\
    \ who now knows the XCON-URIs of the blueprints\n   available at the server, makes\
    \ a drill-down query, in the form of a\n   CCMP blueprintRequest message, to get\
    \ detailed information about one\n   of them (the one called with XCON-URI \"\
    xcon:AudioRoom@example.com\").\n   The picture shows such a transaction.  Notice\
    \ that the response\n   contains, in the <blueprintInfo> parameter, a document\
    \ compliant with\n   the standard XCON data model.\n   Alice retrieves detailed\
    \ information about a specified blueprint:\n   CCMP Client                   \
    \                          CCMP Server\n        |                            \
    \                           |\n        | CCMP blueprintRequest message       \
    \                  |\n        |   - confUserID: Alice                        \
    \         |\n        |   - confObjID: bp123                                  |\n\
    \        |   - operation: retrieve                               |\n        |\
    \   - blueprintInfo: (null)                             |\n        |------------------------------------------------------>|\n\
    \        |                                                       |\n        |\
    \                        CCMP blueprintResponse message |\n        |         \
    \                 - confUserID: Alice          |\n        |                  \
    \        - confObjID: bp123           |\n        |                          -\
    \ operation: retrieve        |\n        |                          - response-code:\
    \ 200         |\n        |                          - blueprintInfo: bp123Info\
    \   |\n        |<------------------------------------------------------|\n   \
    \     |                                                       |\n        .   \
    \                                                    .\n        .            \
    \                                           .\n 1. blueprintRequest message:\n\
    \ <?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n <ccmp:ccmpRequest\n\
    \       xmlns:info=\"urn:ietf:params:xml:ns:conference-info\"\n       xmlns:ccmp=\"\
    urn:ietf:params:xml:ns:xcon-ccmp\"\n       xmlns:xcon=\"urn:ietf:params:xml:ns:xcon-conference-info\"\
    >\n   <ccmpRequest xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n \
    \                 xsi:type=\"ccmp:ccmp-blueprint-request-message-type\">\n   \
    \      <confUserID>xcon-userid:alice@example.com</confUserID>\n         <confObjID>xcon:AudioRoom@example.com</confObjID>\n\
    \         <operation>retrieve</operation>\n         <ccmp:blueprintRequest/>\n\
    \   </ccmpRequest>\n </ccmp:ccmpRequest>\n 2. blueprintResponse message from the\
    \ server:\n <?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n <ccmp:ccmpResponse\n\
    \       xmlns:xcon=\"urn:ietf:params:xml:ns:xcon-conference-info\"\n       xmlns:info=\"\
    urn:ietf:params:xml:ns:conference-info\"\n       xmlns:ccmp=\"urn:ietf:params:xml:ns:xcon-ccmp\"\
    >\n  <ccmpResponse xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n \
    \     xsi:type=\"ccmp:ccmp-blueprint-response-message-type\">\n  <confUserID>xcon-userid:alice@example.com</confUserID>\n\
    \  <confObjID>xcon:AudioRoom@example.com</confObjID>\n  <operation>retrieve</operation>\n\
    \  <response-code>200</response-code>\n  <response-string>Success</response-string>\n\
    \  <ccmp:blueprintResponse>\n    <blueprintInfo entity=\"xcon:AudioRoom@example.com\"\
    >\n     <info:conference-description>\n        <info:display-text>AudioRoom</info:display-text>\n\
    \        <info:available-media>\n           <info:entry label=\"audioLabel\">\n\
    \              <info:display-text>audio stream</info:display-text>\n         \
    \     <info:type>audio</info:type>\n           </info:entry>\n        </info:available-media>\n\
    \     </info:conference-description>\n     <info:users>\n       <xcon:join-handling>allow</xcon:join-handling>\n\
    \      </info:users>\n     <xcon:floor-information>\n      <xcon:floor-request-handling>confirm</xcon:floor-request-handling>\n\
    \       <xcon:conference-floor-policy>\n           <xcon:floor id=\"audioFloor\"\
    >\n               <xcon:media-label>audioLabel</xcon:media-label>\n          \
    \ </xcon:floor>\n       </xcon:conference-floor-policy>\n     </xcon:floor-information>\n\
    \    </blueprintInfo>\n   </ccmp:blueprintResponse>\n  </ccmpResponse>\n </ccmp:ccmpResponse>\n\
    \         Figure 20: Getting Information about a Specific Blueprint\n"
- title: 6.3.  Alice Creates a New Conference through a Cloning Operation
  contents:
  - "6.3.  Alice Creates a New Conference through a Cloning Operation\n   This section\
    \ illustrates the third transaction in the overall flow.\n   Alice decides to\
    \ create a new conference by cloning the blueprint\n   having XCON-URI \"xcon:AudioRoom@example.com\"\
    , for which she just\n   retrieved detailed information through the blueprintRequest\
    \ message.\n   This is achieved by sending a confRequest/create message having\
    \ the\n   blueprint's URI in the <confObjID> parameter.  The picture shows such\n\
    \   a transaction.  Notice that the response contains, in the <confInfo>\n   parameter,\
    \ the document associated with the newly created conference,\n   which is compliant\
    \ with the standard XCON data model.  The\n   <confObjID> parameter in the response\
    \ is set to the XCON-URI of the\n   new conference (in this case, \"xcon:8977794@example.com\"\
    ).  We also\n   notice that this value is equal to the value of the 'entity'\n\
    \   attribute of the <conference-info> element of the document\n   representing\
    \ the newly created conference object.\n   Alice creates a new conference by cloning\
    \ the\n   \"xcon:AudioRoom@example.com\" blueprint:\n"
- title: CCMP Client                                             CCMP Server
  contents:
  - "CCMP Client                                             CCMP Server\n       |\
    \                                                       |\n       | CCMP confRequest\
    \ message                              |\n       |   - confUserID: Alice     \
    \                            |\n       |   - confObjID: AudioRoom            \
    \                  |\n       |   - operation: create                         \
    \        |\n       |   - confInfo: (null)                                  |\n\
    \       |------------------------------------------------------>|\n       |  \
    \                                                     |\n       |            \
    \                CCMP confResponse message  |\n       |                      \
    \        - confUserID: Alice      |\n       |                              - confObjID:\
    \ newConfId   |\n       |                              - operation: create   \
    \   |\n       |                              - response-code: 200     |\n    \
    \   |                              - version: 1             |\n       |      \
    \                        - confInfo: newConfInfo  |\n       |<------------------------------------------------------|\n\
    \       |                                                       |\n       .  \
    \                                                     .\n       .            \
    \                                           .\n"
- title: '1. confRequest message:'
  contents:
  - '1. confRequest message:

    '
- title: <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
  contents:
  - '<?xml version="1.0" encoding="UTF-8" standalone="yes"?>

    '
- title: <ccmp:ccmpRequest
  contents:
  - "<ccmp:ccmpRequest\n      xmlns:info=\"urn:ietf:params:xml:ns:conference-info\"\
    \n      xmlns:ccmp=\"urn:ietf:params:xml:ns:xcon-ccmp\"\n      xmlns:xcon=\"urn:ietf:params:xml:ns:xcon-conference-info\"\
    >\n   <ccmpRequest\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\
    \n         xsi:type=\"ccmp:ccmp-conf-request-message-type\">\n      <confUserID>xcon-userid:alice@example.com</confUserID>\n\
    \      <confObjID>xcon:AudioRoom@example.com</confObjID>\n      <operation>create</operation>\n\
    \      <ccmp:confRequest/>\n   </ccmpRequest>\n"
- title: </ccmp:ccmpRequest>
  contents:
  - '</ccmp:ccmpRequest>

    '
- title: '2. confResponse message from the server:'
  contents:
  - '2. confResponse message from the server:

    '
- title: <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
  contents:
  - '<?xml version="1.0" encoding="UTF-8" standalone="yes"?>

    '
- title: <ccmp:ccmpResponse
  contents:
  - "<ccmp:ccmpResponse\n      xmlns:xcon=\"urn:ietf:params:xml:ns:xcon-conference-info\"\
    \n      xmlns:info=\"urn:ietf:params:xml:ns:conference-info\"\n      xmlns:ccmp=\"\
    urn:ietf:params:xml:ns:xcon-ccmp\">\n"
- title: <ccmpResponse xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  contents:
  - "<ccmpResponse xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n     xsi:type=\"\
    ccmp:ccmp-conf-response-message-type\">\n <confUserID>xcon-userid:alice@example.com</confUserID>\n\
    \ <confObjID>xcon:8977794@example.com</confObjID>\n <operation>create</operation>\n\
    \ <response-code>200</response-code>\n <response-string>Success</response-string>\n\
    \ <version>1</version>\n <ccmp:confResponse>\n   <confInfo entity=\"xcon:8977794@example.com\"\
    >\n     <info:conference-description>\n       <info:display-text>\n          \
    \    New conference by Alice cloned from AudioRoom\n       </info:display-text>\n\
    \       <info:available-media>\n               <info:entry label=\"333\">\n  \
    \               <info:display-text>audio stream</info:display-text>\n        \
    \         <info:type>audio</info:type>\n               </info:entry>\n       \
    \ </info:available-media>\n      </info:conference-description>\n      <info:users>\n\
    \           <xcon:join-handling>allow</xcon:join-handling>\n      </info:users>\n\
    \      <xcon:floor-information>\n      <xcon:floor-request-handling>confirm</xcon:floor-request-handling>\n\
    \       <xcon:conference-floor-policy>\n          <xcon:floor id=\"11\">\n   \
    \          <xcon:media-label>333</xcon:media-label>\n          </xcon:floor>\n\
    \       </xcon:conference-floor-policy>\n      </xcon:floor-information>\n   \
    \  </confInfo>\n    </ccmp:confResponse>\n  </ccmpResponse>\n"
- title: </ccmp:ccmpResponse>
  contents:
  - "</ccmp:ccmpResponse>\n        Figure 21: Creating a New Conference by Cloning\
    \ a Blueprint\n"
- title: 6.4.  Alice Updates Conference Information
  contents:
  - "6.4.  Alice Updates Conference Information\n   This section illustrates the fourth\
    \ transaction in the overall flow.\n   Alice decides to modify some of the details\
    \ associated with the\n   conference she just created.  More precisely, she changes\
    \ the\n   <display-text> element under the <conference-description> element of\n\
    \   the document representing the conference.  This is achieved through a\n  \
    \ confRequest/update message carrying the fragment of the conference\n   document\
    \ to which the required changes have to be applied.  As shown\n   in the picture,\
    \ the response contains a code of \"200\", which\n   acknowledges the modifications\
    \ requested by the client, while also\n   updating the conference version number\
    \ from 1 to 2, as reflected in\n   the \"version\" parameter.\n   Alice updates\
    \ information about the conference she just created:\n   CCMP Client         \
    \                                    CCMP Server\n        |                  \
    \                                     |\n        | CCMP confRequest message  \
    \                            |\n        |   - confUserID: Alice              \
    \                   |\n        |   - confObjID: 8977794                      \
    \          |\n        |   - operation: update                                \
    \ |\n        |   - confInfo: confUpdates                             |\n     \
    \   |------------------------------------------------------>|\n        |     \
    \                                                  |\n        |              \
    \              CCMP confResponse message  |\n        |                       \
    \       - confUserID: Alice      |\n        |                              - confObjID:\
    \ 8977794     |\n        |                              - operation: update  \
    \    |\n        |                              - response-code: 200     |\n  \
    \      |                              - version: 2             |\n        |  \
    \                            - confInfo: (null)       |\n        |<------------------------------------------------------|\n\
    \        |                                                       |\n        .\
    \                                                       .\n        .         \
    \                                              .\n 1. confRequest message:\n <?xml\
    \ version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n <ccmp:ccmpRequest\n\
    \      xmlns:info=\"urn:ietf:params:xml:ns:conference-info\"\n            xmlns:ccmp=\"\
    urn:ietf:params:xml:ns:xcon-ccmp\"\n      xmlns:xcon=\"urn:ietf:params:xml:ns:xcon-conference-info\"\
    >\n   <ccmpRequest\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\
    \n         xsi:type=\"ccmp:ccmp-conf-request-message-type\">\n     <confUserID>xcon-userid:alice@example.com</confUserID>\n\
    \     <confObjID>xcon:8977794@example.com</confObjID>\n     <operation>update</operation>\n\
    \     <ccmp:confRequest>\n          <confInfo entity=\"xcon:8977794@example.com\"\
    >\n             <info:conference-description>\n               <info:display-text>\n\
    \                  Alice's conference\n               </info:display-text>\n \
    \            </info:conference-description>\n          </confInfo>\n       </ccmp:confRequest>\n\
    \   </ccmpRequest>\n </ccmp:ccmpRequest>\n 2. confResponse message from the server:\n\
    \ <?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n <ccmp:ccmpResponse\n\
    \      xmlns:xcon=\"urn:ietf:params:xml:ns:xcon-conference-info\"\n      xmlns:info=\"\
    urn:ietf:params:xml:ns:conference-info\"\n      xmlns:ccmp=\"urn:ietf:params:xml:ns:xcon-ccmp\"\
    >\n     <ccmpResponse xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n\
    \      xsi:type=\"ccmp:ccmp-conf-response-message-type\">\n         <confUserID>xcon-userid:alice@example.com</confUserID>\n\
    \         <confObjID>xcon:8977794@example.com</confObjID>\n         <operation>update</operation>\n\
    \         <response-code>200</response-code>\n         <response-string>Success</response-string>\n\
    \         <version>2</version>\n         <ccmp:confResponse/>\n     </ccmpResponse>\n\
    \ </ccmp:ccmpResponse>\n                Figure 22: Updating Conference Information\n"
- title: 6.5.  Alice Inserts a List of Users into the Conference Object
  contents:
  - "6.5.  Alice Inserts a List of Users into the Conference Object\n   This section\
    \ illustrates the fifth transaction in the overall flow.\n   Alice modifies the\
    \ <allowed-users-list> under the <users> element in\n   the document associated\
    \ with the conference she created.  To achieve\n   this, she makes use of the\
    \ usersRequest message provided by CCMP.\n   Alice updates information about the\
    \ list of users to whom access to\n   the conference is permitted:\n   CCMP Client\
    \                                             CCMP Server\n        |         \
    \                                              |\n        | CCMP usersRequest\
    \ message                             |\n        |   - confUserID: Alice     \
    \                            |\n        |   - confObjID: 8977794             \
    \                   |\n        |   - operation: update                       \
    \          |\n        |   - usersInfo: usersUpdates                          \
    \ |\n        |------------------------------------------------------>|\n     \
    \   |                                                       |\n        |     \
    \                      CCMP usersResponse message  |\n        |              \
    \               - confUserID: Alice       |\n        |                       \
    \      - confObjID: 8977794      |\n        |                             - operation:\
    \ update       |\n        |                             - response-code: 200 \
    \     |\n        |                             - version: 3              |\n \
    \       |                             - usersInfo: (null)       |\n        |<------------------------------------------------------|\n\
    \        |                                                       |\n        .\
    \                                                       .\n        .         \
    \                                              .\n 1. usersRequest message:\n\
    \ <?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n <ccmp:ccmpRequest\n\
    \      xmlns:xcon=\"urn:ietf:params:xml:ns:xcon-conference-info\"\n          xmlns:info=\"\
    urn:ietf:params:xml:ns:conference-info\"\n          xmlns:ccmp=\"urn:ietf:params:xml:ns:xcon-ccmp\"\
    >\n     <ccmpRequest xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n\
    \                  xsi:type=\"ccmp:ccmp-users-request-message-type\">\n      \
    \   <confUserID>xcon-userid:alice@example.com</confUserID>\n         <confObjID>xcon:8977794@example.com</confObjID>\n\
    \         <operation>update</operation>\n         <ccmp:usersRequest>\n      \
    \       <usersInfo>\n                 <xcon:allowed-users-list>\n            \
    \         <xcon:target method=\"dial out\"\n                                 \
    \ uri=\"xmpp:cicciolo@pippozzo.com\"/>\n                     <xcon:target method=\"\
    refer\"\n                                  uri=\"tel:+1-972-555-1234\"/>\n   \
    \                  <xcon:target method=\"refer\"\n                           \
    \       uri=\"sip:Carol@example.com\"/>\n                 </xcon:allowed-users-list>\n\
    \             </usersInfo>\n         </ccmp:usersRequest>\n     </ccmpRequest>\n\
    \ </ccmp:ccmpRequest>\n 2. usersResponse message from the server:\n <?xml version=\"\
    1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n <ccmp:ccmpResponse\n       xmlns:xcon=\"\
    urn:ietf:params:xml:ns:xcon-conference-info\"\n       xmlns:info=\"urn:ietf:params:xml:ns:conference-info\"\
    \n       xmlns:ccmp=\"urn:ietf:params:xml:ns:xcon-ccmp\">\n     <ccmpResponse\
    \ xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n      xsi:type=\"ccmp:ccmp-users-response-message-type\"\
    >\n         <confUserID>xcon-userid:alice@example.com</confUserID>\n         <confObjID>xcon:8977794@example.com</confObjID>\n\
    \         <operation>retrieve</operation>\n         <response-code>200</response-code>\n\
    \         <response-string>Success</response-string>\n         <version>3</version>\n\
    \         <ccmp:usersResponse/>\n     </ccmpResponse>\n </ccmp:ccmpResponse>\n\
    \           Figure 23: Updating the List of Allowed Users for the\n          \
    \         Conference 'xcon:8977794@example.com'\n"
- title: 6.6.  Alice Joins the Conference
  contents:
  - "6.6.  Alice Joins the Conference\n   This section illustrates the sixth transaction\
    \ in the overall flow.\n   Alice uses CCMP to add herself to the newly created\
    \ conference.  This\n   is achieved through a userRequest/create message containing,\
    \ in the\n   <userInfo> parameter, a <user> element compliant with the XCON data\n\
    \   model representation.  Notice that such an element includes\n   information\
    \ about the user's Addresses of Record, as well as her\n   current endpoint. \
    \ The picture below shows the transaction.  Notice\n   how the <confUserID> parameter\
    \ is equal to the 'entity' attribute of\n   the <userInfo> element, which indicates\
    \ that the request issued by\n   the client is a first-party one.\n   Alice joins\
    \ the conference by issuing a userRequest/create message\n   with her own ID to\
    \ the server:\n   CCMP Client                                             CCMP\
    \ Server\n        |                                                       |\n\
    \        | CCMP userRequest message                              |\n        |\
    \   - confUserID: Alice                                 |\n        |   - confObjID:\
    \ 8977794                                |\n        |   - operation: create  \
    \                               |\n        |   - userInfo: AliceUserInfo     \
    \                      |\n        |------------------------------------------------------>|\n\
    \        |                                                       |\n        |\
    \                            CCMP userResponse message  |\n        |         \
    \                     - confUserID: Alice      |\n        |                  \
    \            - confObjID: 8977794     |\n        |                           \
    \   - operation: create      |\n        |                              - response-code:\
    \ 200     |\n        |                              - version: 4             |\n\
    \        |                              - userInfo: (null)       |\n        |<------------------------------------------------------|\n\
    \        |                                                       |\n        .\
    \                                                       .\n        .         \
    \                                              .\n 1. userRequest message:\n <?xml\
    \ version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n <ccmp:ccmpRequest\n\
    \        xmlns:info=\"urn:ietf:params:xml:ns:conference-info\"\n            xmlns:ccmp=\"\
    urn:ietf:params:xml:ns:xcon-ccmp\"\n            xmlns:xcon=\"urn:ietf:params:xml:ns:xcon-conference-info\"\
    >\n     <ccmpRequest xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n\
    \             xsi:type=\"ccmp:ccmp-user-request-message-type\">\n         <confUserID>xcon-userid:alice@example.com</confUserID>\n\
    \         <confObjID>xcon:8977794@example.com</confObjID>\n                 <operation>create</operation>\n\
    \         <ccmp:userRequest>\n             <userInfo entity=\"xcon-userid:alice@example.com\"\
    >\n                 <info:associated-aors>\n                     <info:entry>\n\
    \                         <info:uri>\n                            mailto:Alice83@example.com\n\
    \                         </info:uri>\n                         <info:display-text>email</info:display-text>\n\
    \                     </info:entry>\n                 </info:associated-aors>\n\
    \                 <info:endpoint entity=\"sip:alice_789@example.com\"/>\n    \
    \         </userInfo>\n         </ccmp:userRequest>\n     </ccmpRequest>\n </ccmp:ccmpRequest>\n\
    \ 2. userResponse message from the server:\n <?xml version=\"1.0\" encoding=\"\
    UTF-8\" standalone=\"yes\"?>\n <ccmp:ccmpResponse\n       xmlns:xcon=\"urn:ietf:params:xml:ns:xcon-conference-info\"\
    \n       xmlns:info=\"urn:ietf:params:xml:ns:conference-info\"\n       xmlns:ccmp=\"\
    urn:ietf:params:xml:ns:xcon-ccmp\">\n     <ccmpResponse xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\
    \n      xsi:type=\"ccmp:ccmp-user-response-message-type\">\n         <confUserID>xcon-userid:alice@example.com</confUserID>\n\
    \         <confObjID>xcon:8977794@example.com</confObjID>\n         <operation>create</operation>\n\
    \         <response-code>200</response-code>\n         <response-string>Success</response-string>\n\
    \         <version>4</version>\n         <ccmp:userResponse/>\n     </ccmpResponse>\n\
    \ </ccmp:ccmpResponse>\n            Figure 24: Alice Joins the Conference through\
    \ CCMP\n"
- title: 6.7.  Alice Adds a New User to the Conference
  contents:
  - "6.7.  Alice Adds a New User to the Conference\n   This section illustrates the\
    \ seventh and last transaction in the\n   overall flow.  Alice uses CCMP to add\
    \ a new conferencing system user,\n   Ciccio, to the conference.  This \"third-party\"\
    \ request is realized\n   through a userRequest/create message containing, in\
    \ the <userInfo>\n   parameter, a <user> element compliant with the XCON data\
    \ model\n   representation.  Notice that such an element includes information\n\
    \   about Ciccio's Addresses of Record, as well as his current endpoint,\n   but\
    \ has a placeholder 'entity' attribute,\n   \"AUTO_GENERATE_1@example.com\" as\
    \ discussed in Section 4.3, since the\n   XCON-USERID is initially unknown to\
    \ Alice.  Thus, the conference\n   server is in charge of generating a new XCON-USERID\
    \ for the user\n   Alice indicates (i.e., Ciccio), and returning it in the 'entity'\n\
    \   attribute of the <userInfo> parameter carried in the response, as\n   well\
    \ as adding the user to the conference.  The picture below shows\n   the transaction.\n\
    \   Alice adds user \"Ciccio\" to the conference by issuing a third-party\n  \
    \ userRequest/create message to the server:\n  CCMP Client                   \
    \                          CCMP Server\n       |                             \
    \                          |\n       | CCMP userRequest message              \
    \                |\n       |   - confUserID: Alice                           \
    \      |\n       |   - confObjID: 8977794                                |\n \
    \      |   - operation: create                                 |\n       |   -\
    \ userInfo: dummyUserID, CiccioUserInfo             |\n       |------------------------------------------------------>|\n\
    \       |                                                       |\n       |  \
    \                     CCMP optionsResponse message    |\n       |            \
    \                - confUserID: Alice        |\n       |                      \
    \      - confObjID: 8977794       |\n       |                            - operation:\
    \ create        |\n       |                            - response-code: 200  \
    \     |\n       |                            - version: 5               |\n  \
    \     |                            - userInfo: userIDCiccio,  |\n       |    \
    \                                    CiccioUserInfo |\n       |              \
    \                                         |\n       |<------------------------------------------------------|\n\
    \       |                                                       |\n       .  \
    \                                                     .\n       .            \
    \                                           .\n"
- title: '1. "third-party" userRequest message from Alice:'
  contents:
  - '1. "third-party" userRequest message from Alice:

    '
- title: <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
  contents:
  - '<?xml version="1.0" encoding="UTF-8" standalone="yes"?>

    '
- title: <ccmp:ccmpRequest
  contents:
  - "<ccmp:ccmpRequest\n       xmlns:info=\"urn:ietf:params:xml:ns:conference-info\"\
    \n       xmlns:ccmp=\"urn:ietf:params:xml:ns:xcon-ccmp\"\n       xmlns:xcon=\"\
    urn:ietf:params:xml:ns:xcon-conference-info\">\n    <ccmpRequest xmlns:xsi=\"\
    http://www.w3.org/2001/XMLSchema-instance\"\n                 xsi:type=\"ccmp:ccmp-user-request-message-type\"\
    >\n        <confUserID>xcon-userid:alice@example.com</confUserID>\n        <confObjID>xcon:8977794@example.com</confObjID>\n\
    \        <operation>create</operation>\n        <ccmp:userRequest>\n         \
    \   <userInfo entity=\"xcon-userid:AUTO_GENERATE_1@example.com\">\n          \
    \      <info:associated-aors>\n                    <info:entry>\n            \
    \            <info:uri>\n                            mailto:Ciccio@example.com\n\
    \                        </info:uri>\n                        <info:display-text>email</info:display-text>\n\
    \                    </info:entry>\n                </info:associated-aors>\n\
    \                <info:endpoint entity=\"sip:Ciccio@example.com\"/>\n        \
    \    </userInfo>\n        </ccmp:userRequest>\n    </ccmpRequest>\n"
- title: </ccmp:ccmpRequest>
  contents:
  - '</ccmp:ccmpRequest>

    '
- title: '2. "third-party" userResponse message from the server:'
  contents:
  - '2. "third-party" userResponse message from the server:

    '
- title: <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
  contents:
  - "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n <ccmp:ccmpResponse\n\
    \        xmlns:info=\"urn:ietf:params:xml:ns:conference-info\"\n        xmlns:ccmp=\"\
    urn:ietf:params:xml:ns:xcon-ccmp\"\n        xmlns:xcon=\"urn:ietf:params:xml:ns:xcon-conference-info\"\
    >\n     <ccmpResponse xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n\
    \                   xsi:type=\"ccmp:ccmp-user-response-message-type\">\n     \
    \    <confUserID>xcon-userid:alice@example.com</confUserID>\n         <confObjID>xcon:8977794@example.com</confObjID>\n\
    \         <operation>create</operation>\n         <response-code>200</response-code>\n\
    \         <version>5</version>\n         <ccmp:userResponse>\n               \
    \  <userInfo entity=\"xcon-userid:Ciccio@example.com\">\n                 <info:associated-aors>\n\
    \                     <info:entry>\n                         <info:uri>\n    \
    \                         mailto:Ciccio@example.com\n                        \
    \ </info:uri>\n                         <info:display-text>email</info:display-text>\n\
    \                     </info:entry>\n                 </info:associated-aors>\n\
    \                 <info:endpoint entity=\"sip:Ciccio@example.com\"/>\n       \
    \      </userInfo>\n         </ccmp:userResponse>\n     </ccmpResponse>\n </ccmp:ccmpResponse>\n\
    \      Figure 25: Alice Adds a New User to the Conference through CCMP\n"
- title: 6.8.  Alice Asks for the CCMP Server Capabilities
  contents:
  - "6.8.  Alice Asks for the CCMP Server Capabilities\n   This section illustrates\
    \ how Alice can discover which standard CCMP\n   messages and what extensions\
    \ are supported by the CCMP server with\n   which she interacts through an optionsRequest/optionsResponse\n\
    \   transaction.\n   To prepare the optionsRequest, Alice just puts her XCON-USERID\
    \ in the\n   <confUserID> parameter.  Looking at the <options> element in the\n\
    \   received optionsResponse, Alice infers the following server\n   capabilities\
    \ as regards standard CCMP messages:\n   o  the server doesn't support sidebarsByValRequest\
    \ nor the\n      sidebarByValRequest messages, since they do not appear in the\n\
    \      <standard-message-list>;\n   o  the only implemented operation for the\
    \ blueprintRequest message is\n      \"retrieve\", since no other <operation>\
    \ entries are included in the\n      related <operations> field.\n   By analyzing\
    \ the <extended-message-list>, Alice discovers the server\n   implements a bluePrint\
    \ extension, referred to as \"confSummaryRequest\"\n   in this example.  This\
    \ extension allows Alice to recover via CCMP a\n   brief description of a specific\
    \ conference; the XML elements involved\n   in this extended conference control\
    \ transaction are available at the\n   URL indicated in the <schema-ref> element,\
    \ and the only operation\n   provided by this extension is \"retrieve\".  To better\
    \ understand how\n   Alice can exploit the \"confSummaryRequest\" extension via\
    \ CCMP, see\n   Section 6.9.\n   The figure below shows the optionsRequest/optionsResponse\
    \ message\n   exchange between Alice and the CCMP server.\n   CCMP Client    \
    \                                         CCMP Server\n        |             \
    \                                          |\n        | CCMP optionsRequest message\
    \                           |\n        |   - confUserID: Alice               \
    \                  |\n        |------------------------------------------------------>|\n\
    \        |                                                       |\n        |\
    \                          CCMP userResponse message    |\n        |         \
    \                   - confUserID: Alice        |\n        |                  \
    \          - response-code: 200       |\n        |                           \
    \ - options (list of both    |\n        |                              standard\
    \ and extended    |\n        |                              supported messages)\
    \      |\n        |<------------------------------------------------------|\n\
    \        |                                                       |\n        .\
    \                                                       .\n        .         \
    \                                              .\n 1. optionsRequest (Alice asks\
    \ for CCMP server capabilities)\n <?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"\
    yes\"?>\n   <ccmp:ccmpRequest\n         xmlns:info=\"urn:ietf:params:xml:ns:conference-info\"\
    \n         xmlns:ccmp=\"urn:ietf:params:xml:ns:xcon-ccmp\"\n         xmlns:xcon=\"\
    urn:ietf:params:xml:ns:xcon-conference-info\">\n     <ccmpRequest xmlns:xsi=\"\
    http://www.w3.org/2001/XMLSchema-instance\"\n        xsi:type=\"ccmp:ccmp-options-request-message-type\"\
    >\n         <confUserID>xcon-userid:alice@example.com</confUserID>\n     </ccmpRequest>\n\
    \   </ccmp:ccmpRequest>\n 2. optionsResponse (the server returns the list of its\
    \ conference\n    control capabilities)\n <?xml version=\"1.0\" encoding=\"UTF-8\"\
    \ standalone=\"yes\"?>\n   <ccmp:ccmpResponse\n          xmlns:info=\"urn:ietf:params:xml:ns:conference-info\"\
    \n          xmlns:ccmp=\"urn:ietf:params:xml:ns:xcon-ccmp\"\n          xmlns:xcon=\"\
    urn:ietf:params:xml:ns:xcon-conference-info\">\n     <ccmpResponse xmlns:xsi=\"\
    http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:type=\"ccmp:ccmp-options-response-message-type\"\
    >\n         <confUserID>xcon-userid:alice@example.com</confUserID>\n         <response-code>200</response-code>\n\
    \         <response-string>success</response-string>\n         <ccmp:optionsResponse>\n\
    \            <options>\n               <standard-message-list>\n             \
    \     <standard-message>\n                     <name>blueprintsRequest</name>\n\
    \                  </standard-message>\n                  <standard-message>\n\
    \                    <name>blueprintRequest</name>\n                    <operations>\n\
    \                      <operation>retrieve</operation>\n                    </operations>\n\
    \                  </standard-message>\n                  <standard-message>\n\
    \                    <name>confsRequest</name>\n                  </standard-message>\n\
    \                  <standard-message>\n                    <name>confRequest</name>\n\
    \                  </standard-message>\n                  <standard-message>\n\
    \                     <name>usersRequest</name>\n                  </standard-message>\n\
    \                  <standard-message>\n                     <name>userRequest</name>\n\
    \                  </standard-message>\n                  <standard-message>\n\
    \                     <name>sidebarsByRefRequest</name>\n                  </standard-message>\n\
    \                  <standard-message>\n                     <name>sidebarByRefRequest</name>\n\
    \                  </standard-message>\n               </standard-message-list>\n\
    \               <extended-message-list>\n                  <extended-message>\n\
    \                     <name>confSummaryRequest</name>\n                     <operations>\n\
    \                       <operation>retrieve</operation>\n                    \
    \ </operations>\n                     <schema-def>\n                         \
    \ http://example.com/ccmp-extension-schema.xsd\n                     </schema-def>\n\
    \                     <description>\n                          confSummaryRequest\
    \ is intended\n                          to allow the requestor to retrieve\n\
    \                          a brief description\n                          of the\
    \ conference indicated in the\n                          confObjID request parameter\n\
    \                     </description>\n                  </extended-message>\n\
    \               </extended-message-list>\n            </options>\n         </ccmp:optionsResponse>\n\
    \     </ccmpResponse>\n   </ccmp:ccmpResponse>\n         Figure 26: Alice Asks\
    \ for the Server Control Capabilities\n"
- title: 6.9.  Alice Makes Use of a CCMP Server Extension
  contents:
  - "6.9.  Alice Makes Use of a CCMP Server Extension\n   In this section, a very\
    \ simple example of CCMP extension support is\n   provided.  Alice can recover\
    \ information about this and other server-\n   supported extensions by issuing\
    \ an optionsRequest (see Section 6.8).\n   The extension in question is named\
    \ \"confSummaryRequest\" and allows a\n   CCMP client to obtain from the CCMP\
    \ server synthetic information\n   about a specific conference.  The conference\
    \ summary is carried in\n   the form of an XML element as follows:\n     <?xml\
    \ version=\"1.0\" encoding=\"UTF-8\"?>\n       <xs:schema xmlns:xs=\"http://www.w3.org/2001/XMLSchema\"\
    \n                 targetNamespace=\"http://example.com/ccmp-extension\"\n   \
    \              xmlns=\"http://example.com/ccmp-extension\">\n       <xs:element\
    \ name=\"confSummary\" type=\"conf-summary-type\"/>\n       <xs:complexType name=\"\
    conf-summary-type\">\n         <xs:sequence>\n           <xs:element name=\"title\"\
    \ type=\"xs:string\"/>\n           <xs:element name=\"status\" type=\"xs:string\"\
    />\n           <xs:element name=\"public\" type=\"xs:boolean\"/>\n           <xs:element\
    \ name=\"media\" type=\"xs:string\"/>\n         </xs:sequence>\n       </xs:complexType>\n\
    \     </xs:schema>\n          Figure 27: Example of XML Schema defining an extension\n\
    \                   parameter (ccmp-extension-schema.xsd)\n   As can be inferred\
    \ from the schema file, the <confSummary> element\n   contains conference information\
    \ related to the following:\n   o  title\n   o  status (active or registered)\n\
    \   o  participation modality (if everyone is allowed to participate, the\n  \
    \    boolean <public> element is set to \"true\")\n   o  involved media\n   In\
    \ order to retrieve a conference summary related to the conference\n   she participates\
    \ in, Alice sends to the CCMP server an\n   extendedRequest with a \"confSummaryRequest\"\
    \ <extensionName>,\n   specifying the conference XCON-URI in the confObjID request\n\
    \   parameter, as depicted in the figure below.\n  CCMP Client               \
    \                              CCMP Server\n       |                         \
    \                              |\n       | CCMP extendedRequest message      \
    \                    |\n       |   - confUserID: Alice                       \
    \          |\n       |   - confObjID: 8977794                                |\n\
    \       |   - operation: retrieve                               |\n       |  \
    \ - extensionName: confSummaryRequest                 |\n       |------------------------------------------------------>|\n\
    \       |                                                       |\n       |  \
    \                    CCMP extendedResponse message    |\n       |            \
    \                - confUserID: Alice        |\n       |                      \
    \      - confObjID: 8977794       |\n       |                            - operation:\
    \ retrieve      |\n       |                            - response-code: 200  \
    \     |\n       |                            - extensionName:           |\n  \
    \     |                              confSummaryRequest       |\n       |    \
    \                        - confSummary              |\n       |<------------------------------------------------------|\n\
    \       |                                                       |\n       .  \
    \                                                     .\n       .            \
    \                                           .\n"
- title: 1. extendedRequest (Alice makes use of the "confSummaryRequest")
  contents:
  - '1. extendedRequest (Alice makes use of the "confSummaryRequest")

    '
- title: <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
  contents:
  - "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n  <ccmp:ccmpRequest\
    \ xmlns:info=\"urn:ietf:params:xml:ns:conference-info\"\n        xmlns:ccmp=\"\
    urn:ietf:params:xml:ns:xcon-ccmp\"\n        xmlns:xcon=\"urn:ietf:params:xml:ns:xcon-conference-info\"\
    \n        xmlns:example=\"http://example.com/ccmp-extension\">\n    <ccmpRequest\
    \ xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xsi:type=\"\
    ccmp:ccmp-extended-request-message-type\">\n        <confUserID>xcon-userid:alice@example.com</confUserID>\n\
    \        <confObjID>xcon:8977794@example.com</confObjID>\n        <operation>retrieve</operation>\n\
    \        <ccmp:extendedRequest>\n               <extensionName>confRequestSummary</extensionName>\n\
    \        </ccmp:extendedRequest>\n    </ccmpRequest>\n  </ccmp:ccmpRequest>\n"
- title: 2. extendedResponse (the server provides Alice with a brief description
  contents:
  - "2. extendedResponse (the server provides Alice with a brief description\n   of\
    \ the desired conference)\n"
- title: <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
  contents:
  - "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n  <ccmp:ccmpResponse\
    \ xmlns:info=\"urn:ietf:params:xml:ns:conference-info\"\n          xmlns:ccmp=\"\
    urn:ietf:params:xml:ns:xcon-ccmp\"\n          xmlns:xcon=\"urn:ietf:params:xml:ns:xcon-conference-info\"\
    \n          xmlns:example=\"http://example.com/ccmp-extension\">\n    <ccmpResponse\
    \ xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:type=\"\
    ccmp:ccmp-extended-response-message-type\">\n         <confUserID>xcon-userid:alice@example.com</confUserID>\n\
    \         <confObjID>xcon:8977794@example.com</confObjID>\n         <operation>retrieve</operation>\n\
    \         <response-code>200</response-code>\n         <response-string>success</response-string>\n\
    \         <ccmp:extendedResponse>\n           <extensionName>confSummaryRequest</extensionName>\n\
    \           <example:confSummary>\n               <title> Alice's conference </title>\n\
    \               <status> active </status>\n               <public> true </public>\n\
    \               <media> audio </media>\n           </example:confSummary>\n  \
    \       </ccmp:extendedResponse>\n     </ccmpResponse>\n  </ccmp:ccmpResponse>\n\
    \       Figure 28: Alice Exploits the 'confSummaryRequest' Extension\n"
- title: 7.  Locating a Conference Server
  contents:
  - "7.  Locating a Conference Server\n   If a conferencing client is not pre-configured\
    \ to use a specific\n   conference server for the requests, the client MUST first\
    \ discover\n   the conference server before it can send any requests.  The result\
    \ of\n   the discovery process, is the address of the server supporting\n   conferencing.\
    \  In this document, the result is an http: or https:\n   URI, which identifies\
    \ a conference server.\n   DNS is RECOMMENDED to be used to locate a conference\
    \ server in the\n   case that the client is not pre-configured to use a specific\n\
    \   conference server.  URI-Enabled NAPTR (U-NAPTR) resolution for\n   conferencing\
    \ takes a domain name as input and produces a URI that\n   identifies the conference\
    \ server.  This process also requires an\n   Application Service tag and an Application\
    \ Protocol tag, which\n   differentiate conferencing-related NAPTR records from\
    \ other records\n   for that domain.\n   Section 12.4.1 defines an Application\
    \ Service tag of \"XCON\", which is\n   used to identify the centralized conferencing\
    \ (XCON) server for a\n   particular domain.  The Application Protocol tag \"\
    CCMP\", defined in\n   Section 12.4.2, is used to identify an XCON server that\
    \ understands\n   CCMP.\n   The NAPTR records in the following example (Figure\
    \ 29) demonstrate\n   the use of the Application Service and Application Protocol\
    \ tags.\n   Iterative NAPTR resolution is used to delegate responsibility for\
    \ the\n   conferencing service from \"zonea.example.com.\" and\n   \"zoneb.example.com.\"\
    \ to \"outsource.example.com.\".\n             zonea.example.com.\n          \
    \   ;;       order pref flags\n             IN NAPTR 100   10   \"\"  \"XCON-CCMP\"\
    \ (     ; service\n             \"\"                                        ;\
    \ regex\n             outsource.example.com.                    ; replacement\n\
    \             )\n             zoneb.example.com.\n             ;;       order\
    \ pref flags\n             IN NAPTR 100   10   \"\"  \"XCON-CCMP\" (     ; service\n\
    \             \"\"                                        ; regex\n          \
    \   outsource.example.com.                    ; replacement\n             )\n\
    \             outsource.example.com.\n             ;;       order pref flags\n\
    \             IN NAPTR 100   10   \"u\"  \"XCON-CCMP\" (    ; service\n      \
    \       \"!*.!https://confs.example.com/!\"         ; regex\n             .  \
    \                                       ; replacement\n             )\n      \
    \       Figure 29: Sample XCON-CCMP Service NAPTR Records\n   Details for the\
    \ \"XCON\" Application Service tag and the \"CCMP\"\n   Application Protocol tag\
    \ are included in Section 12.4.\n"
- title: 8.  Managing Notifications
  contents:
  - "8.  Managing Notifications\n   As per [RFC5239], CCMP is one of the following\
    \ four protocols, which\n   have been formally identified within the XCON framework:\n\
    \   Conference Control Protocol:\n      mediates between conference and media\
    \ control client (conferencing\n      client) and conference server.  This document\
    \ describes such a\n      protocol.\n   Binary floor Control Protocol:\n     \
    \ operates between the floor control client and the floor control\n      server.\
    \  An example of such a protocol is the Binary Floor Control\n      Protocol (BFCP),\
    \ specified in [RFC4582].\n   Call Signaling Protocol:\n      operates between\
    \ the Call Signaling Client and the focus.\n      Examples of call signaling protocols\
    \ include SIP, H.323 and IAX.\n      Such protocols are capable of negotiating\
    \ a conferencing session.\n   Notification Protocol:\n      operates between the\
    \ Notification Client and the XCON Notification\n      Service.  This specification\
    \ does not define a new notification\n      protocol.  For clients that use SIP\
    \ as the call signaling\n      protocol, the XCON event package [RFC6502] MUST\
    \ be used by the\n      client for notifications of changes in the conference\
    \ data as\n      described below.\n   The protocol specified in this document\
    \ is a proactive one and is\n   used by a conferencing client to send requests\
    \ to a conference server\n   in order to retrieve information about the conference\
    \ objects stored\n   by the server and to possibly manipulate them.  However,\
    \ a complete\n   conferencing solution is not prohibited from providing clients\
    \ with a\n   means for receiving asynchronous updates about the status of the\n\
    \   objects available at the server.  The notification protocol, while\n   conceptually\
    \ independent of all the mentioned companion protocols,\n   can nonetheless be\
    \ chosen in a way that is consistent with the\n   overall protocol architecture\
    \ characterizing a specific deployment,\n   as discussed in the following.\n \
    \  When the conferencing control client uses SIP [RFC3261] as the\n   signaling\
    \ protocol to participate in the conference, SIP event\n   notification can be\
    \ used.  In such a case, the conferencing control\n   client MUST implement the\
    \ conference event package for XCON\n   [RFC6502].  This is the default mechanism\
    \ for conferencing clients as\n   is SIP for signaling per the XCON framework\
    \ [RFC5239].\n   In the case where the interface to the conference server is entirely\n\
    \   web based, there is a common mechanism for web-based systems that\n   could\
    \ be used -- a \"call back\".  With this mechanism, the\n   conferencing client\
    \ provides the conference server with an HTTP URL\n   that is invoked when a change\
    \ occurs.  This is a common\n   implementation mechanism for e-commerce.  This\
    \ works well in the\n   scenarios whereby the conferencing client is a web server\
    \ that\n   provides the graphical HTML user interface and uses CCMP as the back-\n\
    \   end interface to the conference server.  This model can coexist with\n   the\
    \ SIP event notification model.  PC-based clients behind NATs could\n   provide\
    \ a SIP event URI, whereas web-based clients using CCMP in the\n   back end would\
    \ probably find the HTTP call back approach much easier.\n   The details of this\
    \ approach are out of scope for CCMP; thus, we\n   expect a future specification\
    \ will document this solution.\n"
- title: 9.  HTTP Transport
  contents:
  - "9.  HTTP Transport\n   This section describes the use of HTTP [RFC2616] and HTTP\
    \ over TLS\n   [RFC2818] as transport mechanisms for CCMP, which a conforming\n\
    \   conference server and conferencing client MUST support.\n   Although CCMP\
    \ uses HTTP as a transport, it uses a strict subset of\n   HTTP features, and\
    \ due to the restrictions of some features, a\n   conferencing server might not\
    \ be a fully compliant HTTP server.  It\n   is intended that a conference server\
    \ can easily be built using an\n   HTTP server with extensibility mechanisms,\
    \ and that a conferencing\n   client can trivially use existing HTTP libraries.\
    \  This subset of\n   requirements helps implementers avoid ambiguity with the\
    \ many options\n   the full HTTP protocol offers.\n   Support of HTTP authentication\
    \ [RFC2617] and cookies [RFC6265] is\n   OPTIONAL for a conferencing client that\
    \ conforms to this\n   specification.  These mechanisms are unnecessary because\
    \ CCMP\n   requests carry their own authentication information (in the \"subject\"\
    \n   field; see Section 5.1).  A conferencing client SHOULD include\n   support\
    \ for HTTP proxy authentication.\n   A CCMP request is carried in the body of\
    \ an HTTP POST request.  The\n   conferencing client MUST include a Host header\
    \ in the request.\n   The MIME type of CCMP request and response bodies is \"\
    application/\n   ccmp+xml\".  The conference server and conferencing client MUST\n\
    \   provide this value in the HTTP Content-Type and Accept header fields.\n  \
    \ If the conference server does not receive the appropriate Content-\n   Type\
    \ and Accept header fields, the conference server SHOULD fail the\n   request,\
    \ returning a 406 (Not Acceptable) response.  CCMP responses\n   SHOULD include\
    \ a Content-Length header.\n   Conferencing clients MUST NOT use the Expect header\
    \ or the Range\n   header in CCMP requests.  The conference server MAY return\
    \ 501 (Not\n   Implemented) errors if either of these HTTP features are used.\
    \  In\n   the case that the conference server receives a request from the\n  \
    \ conferencing client containing an If-* (conditional) header, the\n   conference\
    \ server SHOULD return a 412 (precondition failed) response.\n   The POST method\
    \ is the only method REQUIRED for CCMP.  If a\n   conference server chooses to\
    \ support GET or HEAD, it SHOULD consider\n   the kind of application doing the\
    \ GET.  Since a conferencing client\n   only uses a POST method, the GET or HEAD\
    \ MUST be either a URL that\n   was found outside its normal context (e.g., somebody\
    \ found a URL in\n   protocol traces or log files and fed it into their browser)\
    \ or\n   somebody is testing or debugging a system.  The conference server\n \
    \  could provide information in the CCMP response indicating that the\n   URL\
    \ corresponds to a conference server and only responds to CCMP POST\n   requests\
    \ or the conference server could instead try to avoid any leak\n   of information\
    \ by returning a very generic HTTP error message such as\n   405 (Method Not Allowed).\n\
    \   The conference server populates the HTTP headers of responses so that\n  \
    \ they are consistent with the contents of the message.  In particular,\n   the\
    \ CacheControl header SHOULD be set to disable caching of any\n   conference information\
    \ by HTTP intermediaries.  Otherwise, there is\n   the risk of stale information\
    \ and/or the unauthorized disclosure of\n   the information.  The HTTP status\
    \ code MUST indicate a 2xx series\n   response for all CCMP Response and Error\
    \ messages.\n   The conference server MAY redirect a CCMP request.  A conference\n\
    \   server MUST NOT include CCMP responses in a 3xx response.  A\n   conferencing\
    \ client MUST handle redirects by using the Location\n   header provided by the\
    \ server in a 3xx response.  When redirecting,\n   the conferencing client MUST\
    \ observe the delay indicated by the\n   Retry-After header.  The conferencing\
    \ client MUST authenticate the\n   server that returns the redirect response before\
    \ following the\n   redirect.  A conferencing client SHOULD authenticate the conference\n\
    \   server indicated in a redirect.\n   The conference server SHOULD support persistent\
    \ connections and\n   request pipelining.  If pipelining is not supported, the\
    \ conference\n   server MUST NOT allow persistent connections.  The conference\
    \ server\n   MUST support termination of a response by the closing of a\n   connection.\n\
    \   Implementations of CCMP that implement HTTP transport MUST implement\n   transport\
    \ over TLS [RFC2818].  TLS provides message integrity and\n   confidentiality\
    \ between the conferencing client and the conference\n   server.  The conferencing\
    \ client MUST implement the server\n   authentication method described in HTTPS\
    \ [RFC2818].  The device uses\n   the URI obtained during conference server discovery\
    \ to authenticate\n   the server.  The details of this authentication method are\
    \ provided\n   in Section 3.1 of HTTPS [RFC2818].  When TLS is used, the\n   conferencing\
    \ client SHOULD fail a request if server authentication\n   fails.\n"
- title: 10.  Security Considerations
  contents:
  - "10.  Security Considerations\n   As identified in the XCON framework [RFC5239],\
    \ there are a wide\n   variety of potential attacks related to conferencing, due\
    \ to the\n   natural involvement of multiple endpoints and the capability to\n\
    \   manipulate the data on the conference server using CCMP.  Examples of\n  \
    \ attacks include the following: an endpoint attempting to listen to\n   conferences\
    \ in which it is not authorized to participate, an endpoint\n   attempting to\
    \ disconnect or mute other users, and an endpoint theft\n   of service in attempting\
    \ to create conferences it is not allowed to\n   create.\n   The following summarizes\
    \ the security considerations for CCMP:\n   1.  The client MUST determine the\
    \ proper conference server.  The\n       conference server discovery is described\
    \ in Section 7.\n   2.  The client MUST connect to the proper conference server.\
    \  The\n       mechanisms for addressing this security consideration are\n   \
    \    described in Section 10.1.\n   3.  The protocol MUST support a confidentiality\
    \ and integrity\n       mechanism.  As described in Section 9, implementations\
    \ of CCMP\n       MUST implement the HTTP transport over TLS [RFC2818].\n   4.\
    \  There are security issues associated with the authorization to\n       perform\
    \ actions on the conferencing system to invoke specific\n       capabilities.\
    \  A conference server SHOULD ensure that only\n       authorized entities can\
    \ manipulate the conference data.  The\n       mechanisms for addressing this\
    \ security consideration are\n       described in Section 10.2.\n   5.  The privacy\
    \ and security of the identity of a user in the\n       conference MUST be assured.\
    \  The mechanisms to ensure the\n       security and privacy of identity are discussed\
    \ in Section 10.3.\n   6.  A final issue is related to Denial-of-Service (DoS)\
    \ attacks on\n       the conference server itself.  The recommendations to minimize\n\
    \       the potential and impact of DoS attacks are discussed in\n       Section\
    \ 10.4.\n   Of the considerations listed above, items 1 and 3 are addressed\n\
    \   within the referenced sections earlier in this document.  The\n   remaining\
    \ security considerations are addressed in detail in the\n   following sections.\n"
- title: 10.1.  Assuring That the Proper Conference Server Has Been Contacted
  contents:
  - "10.1.  Assuring That the Proper Conference Server Has Been Contacted\n   Section\
    \ 7 describes a mechanism using DNS by which a conferencing\n   client discovers\
    \ a conference server.  A primary concern is spoofed\n   DNS replies; thus, the\
    \ use of DNS Security (DNSSEC) is RECOMMENDED to\n   ensure that the client receives\
    \ a valid response from the DNS server\n   in cases where this is a concern.\n\
    \   When the CCMP transaction is conducted using TLS [RFC5246], the\n   conference\
    \ server can authenticate its identity, either as a domain\n   name or as an IP\
    \ address, to the conferencing client by presenting a\n   certificate containing\
    \ that identifier as a subjectAltName (i.e., as\n   an iPAddress or dNSName, respectively).\
    \  Any implementation of CCMP\n   MUST be capable of being transacted over TLS\
    \ so that the client can\n   request the above authentication.  Note that, in\
    \ order for the\n   presented certificate to be valid at the client, the client\
    \ MUST be\n   able to validate the certificate following the procedures in\n \
    \  [RFC2818] in the case of HTTP as a transport.  In particular, the\n   validation\
    \ path of the certificate must end in one of the client's\n   trust anchors, even\
    \ if that trust anchor is the conference server\n   certificate itself.  If the\
    \ client has external information as to the\n   expected identity or credentials\
    \ of the proper conference server, the\n   authentication checks described above\
    \ MAY be omitted.\n"
- title: 10.2.  User Authentication and Authorization
  contents:
  - "10.2.  User Authentication and Authorization\n   Many policy authorization decisions\
    \ are based on the identity of the\n   user or the role that a user may have.\
    \  The conference server MUST\n   implement mechanisms for authentication of users\
    \ to validate their\n   identity.  There are several ways that a user might authenticate\
    \ its\n   identity to the system.  For users joining a conference using one of\n\
    \   the call signaling protocols, the user authentication mechanisms for\n   the\
    \ specific protocol can be used.  For example, in the case of a\n   user joining\
    \ the conference using SIP signaling, the user\n   authentication as defined in\
    \ [RFC3261] MUST be used.  For the case of\n   users joining the conference using\
    \ CCMP, the CCMP Request messages\n   provide a subject field that contains a\
    \ username and password, which\n   can be used for authentication.  Since the\
    \ CCMP messages are\n   RECOMMENDED to be carried over TLS, this information can\
    \ be sent\n   securely.\n   The XCON framework [RFC5239] provides an overview\
    \ of other\n   authorization mechanisms.  In the cases where a user is authorized\n\
    \   via multiple mechanisms, it is RECOMMENDED that the conference server\n  \
    \ associate the authorization of the CCMP interface with other\n   authorization\
    \ mechanisms; for example, Public Switched Telephone\n   Network (PSTN) users\
    \ that join with a PIN and control the conference\n   using CCMP.  When a conference\
    \ server presents the identity of\n   authorized users, it MAY provide information\
    \ about the way the\n   identity was proven or verified by the system.  A conference\
    \ server\n   can also allow a completely unauthenticated user into the system\
    \ --\n   this information SHOULD also be communicated to interested parties.\n\
    \   Once a user is authenticated and authorized through the various\n   mechanisms\
    \ available on the conference server, the conference server\n   MUST allocate\
    \ a conference user identifier (XCON-USERID) and SHOULD\n   associate the XCON-USERID\
    \ with any signaling specific user\n   identifiers that were used for authentication\
    \ and authorization.\n   This XCON-USERID can be provided to a specific user through\
    \ the\n   conference notification interface and MUST be provided to users that\n\
    \   interact with the conferencing system using CCMP (i.e., in the\n   appropriate\
    \ CCMP response messages).  The XCON-USERIDs for each user/\n   participant in\
    \ the conference are contained in the 'entity' attribute\n   in the <user> element\
    \ in the conference object.  The XCON-USERID is\n   REQUIRED for any subsequent\
    \ operations by the user on the conference\n   object and is carried in the confUserID\
    \ parameter in the CCMP\n   requests and responses.\n   Note that the policy management\
    \ of an XCON-compliant conferencing\n   system is out of the scope of this document,\
    \ as well as of the XCON\n   working group (WG).  However, the specification of\
    \ a policy\n   management framework is realizable with the overall XCON\n   architecture,\
    \ in particular with regard to a Role-Based Access\n   Control (RBAC) approach.\
    \  In RBAC, the following elements are\n   identified: (i) Users; (ii) Roles;\
    \ (iii) Objects; (iv) Operations;\n   (v) Permissions.  For all of the above elements,\
    \ a direct mapping\n   exists onto the main XCON entities.  As an example, RBAC\
    \ objects map\n   onto XCON data model objects and RBAC operations map onto CCMP\n\
    \   operations.\n   Future documents can define an RBAC framework for XCON, by\
    \ first\n   focusing on the definition of roles and then specifying the needed\n\
    \   permission policy sets and role policy sets (used to associate policy\n  \
    \ permission sets with specific roles).  With these policies in place,\n   access\
    \ to a conference object compliant with the XCON data model can\n   be appropriately\
    \ controlled.  As far as assigning users to roles, the\n   Users in the RBAC model\
    \ relate directly to the <users> element in the\n   conference object.  The <users>\
    \ element is comprised of <user>\n   elements representing a specific user in\
    \ the conferencing system.\n   Each <user> element contains an 'entity' attribute\
    \ with the XCON-\n   USERID and a <role> element.  Thus, each authorized user\
    \ (as\n   represented by an XCON-USERID) can be associated with a <role>\n   element.\n"
- title: 10.3.  Security and Privacy of Identity
  contents:
  - "10.3.  Security and Privacy of Identity\n   An overview of the required privacy\
    \ and anonymity for users of a\n   conferencing system are provided in the XCON\
    \ framework [RFC5239].\n   The security of the identity in the form of the XCON-USERID\
    \ is\n   provided in CCMP through the use of TLS.\n   The conference server SHOULD\
    \ support the mechanism to ensure the\n   privacy of the XCON-USERID.  The conferencing\
    \ client indicates the\n   desired level of privacy by manipulation of the <provide-anonymity>\n\
    \   element defined in the XCON data model [RFC6501].  The <provide-\n   anonymity>\
    \ element controls the degree to which a user reveals their\n   identity.  The\
    \ following summarizes the values for the <provide-\n   anonymity> element that\
    \ the client includes in their requests:\n      \"hidden\": Ensures that other\
    \ participants are not aware that there\n      is an additional participant (i.e.,\
    \ the user issuing the request)\n      in the conference.  This could be used\
    \ in cases of users that are\n      authorized with a special role in a conference\
    \ (e.g., a supervisor\n      in a call center environment).\n      \"anonymous\"\
    : Ensures that other participants are aware that there\n      is another participant\
    \ (i.e., the user issuing the request);\n      however, the other participants\
    \ are not provided information as to\n      the identity of the user.\n      \"\
    semi-private\": Ensures that the user's identity is only to be\n      revealed\
    \ to other participants or users that have a higher-level\n      authorization\
    \ (e.g., a conferencing system can be configured such\n      that a human administrator\
    \ can see all users).\n   If the client desires privacy, the conferencing client\
    \ SHOULD include\n   the <provide-anonymity> element in the <confInfo> parameter\
    \ in a CCMP\n   confRequest message with an <operation> parameter of \"update\"\
    \ or\n   \"create\" or in the <userInfo> parameter in a CCMP userRequest message\n\
    \   with an <operation> parameter of \"update\" or \"create\".  If the\n   <provide-anonymity>\
    \ element is not included in the conference object,\n   then other users can see\
    \ the participant's identity.  Participants\n   are made aware of other participants\
    \ that are \"anonymous\" or \"semi-\n   private\" when they perform subsequent\
    \ operations on the conference\n   object or retrieve the conference object or\
    \ when they receive\n   subsequent notifications.\n   Note that independent of\
    \ the level of anonymity requested by the\n   user, the identity of the user is\
    \ always known by the conferencing\n   system as that is required to perform the\
    \ necessary authorization as\n   described in Section 10.2.  The degree to which\
    \ human administrators\n   can see the information can be controlled using policies\
    \ (e.g., some\n   information in the data model can be hidden from human\n   administrators).\n"
- title: 10.4.  Mitigating DoS Attacks
  contents:
  - "10.4.  Mitigating DoS Attacks\n   [RFC4732] provides an overview of possible\
    \ DoS attacks.  In order to\n   minimize the potential for DoS attacks, it is\
    \ RECOMMENDED that\n   conferencing systems require user authentication and authorization\n\
    \   for any client participating in a conference.  This can be\n   accomplished\
    \ through the use of the mechanisms described in\n   Section 10.2, as well as\
    \ by using the security mechanisms associated\n   with the specific signaling\
    \ (e.g., Session Initiation Protocol Secure\n   (SIPS)) and media protocols (e.g.,\
    \ Secure Realtime Transport Protocol\n   (SRTP)).  In addition, Section 4.4 describes\
    \ the use of a timer\n   mechanism to alleviate the situation whereby CCMP messages\
    \ pend\n   indefinitely, thus increasing the potential that pending requests\n\
    \   continue to increase when is a server is receiving more requests than\n  \
    \ it can process.\n"
- title: 11.  XML Schema
  contents:
  - "11.  XML Schema\n   This section gives the XML schema definition\n   [W3C.REC-xmlschema-1-20041028]\
    \ [W3C.REC-xmlschema-2-20041028] of the\n   \"application/ccmp+xml\" format. \
    \ This is presented as a formal\n   definition of the \"application/ccmp+xml\"\
    \ format.  A new XML\n   namespace, a new XML schema, and the MIME type for this\
    \ schema are\n   registered with IANA as described in Section 12.  Note that this\
    \ XML\n   Schema Definition is not intended to be used with on-the-fly\n   validation\
    \ of the presence XML document.  Whitespaces are included in\n   the schema to\
    \ conform to the line length restrictions of the RFC\n   format without having\
    \ a negative impact on the readability of the\n   document.  Any conforming processor\
    \ should remove leading and\n   trailing white spaces.\n"
- title: <?xml version="1.0" encoding="utf-8"?>
  contents:
  - "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n   <xs:schema\n      targetNamespace=\"\
    urn:ietf:params:xml:ns:xcon-ccmp\"\n      xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\
    \n      xmlns=\"urn:ietf:params:xml:ns:xcon-ccmp\"\n      xmlns:tns=\"urn:ietf:params:xml:ns:xcon-ccmp\"\
    \n      xmlns:dm=\"urn:ietf:params:xml:ns:xcon-conference-info\"\n      xmlns:info=\"\
    urn:ietf:params:xml:ns:conference-info\"\n      xmlns:xs=\"http://www.w3.org/2001/XMLSchema\"\
    >\n      <xs:import namespace=\"urn:ietf:params:xml:ns:xcon-conference-info\"\n\
    \                 schemaLocation=\"DataModel.xsd\"/>\n      <xs:import namespace=\"\
    urn:ietf:params:xml:ns:conference-info\"\n                 schemaLocation=\"rfc4575.xsd\"\
    />\n      <xs:element name=\"ccmpRequest\" type=\"ccmp-request-type\" />\n   \
    \   <xs:element name=\"ccmpResponse\" type=\"ccmp-response-type\" />\n"
- title: <!-- CCMP request definition -->
  contents:
  - "<!-- CCMP request definition -->\n   <xs:complexType name=\"ccmp-request-type\"\
    >\n       <xs:sequence>\n           <xs:element name=\"ccmpRequest\"\n       \
    \                type=\"ccmp-request-message-type\" />\n       </xs:sequence>\n\
    \   </xs:complexType>\n   <!-- ccmp-request-message-type -->\n   <xs:complexType\
    \ abstract=\"true\"\n                   name=\"ccmp-request-message-type\">\n\
    \       <xs:sequence>\n           <xs:element name=\"subject\" type=\"subject-type\"\
    \n                       minOccurs=\"0\" maxOccurs=\"1\" />\n           <xs:element\
    \ name=\"confUserID\" type=\"xs:string\"\n                       minOccurs=\"\
    0\" maxOccurs=\"1\" />\n           <xs:element name=\"confObjID\" type=\"xs:string\"\
    \n                       minOccurs=\"0\" maxOccurs=\"1\" />\n           <xs:element\
    \ name=\"operation\" type=\"operationType\"\n                       minOccurs=\"\
    0\" maxOccurs=\"1\" />\n           <xs:element name=\"conference-password\" type=\"\
    xs:string\"\n                       minOccurs=\"0\" maxOccurs=\"1\" />\n     \
    \     <xs:any namespace=\"##other\" processContents=\"lax\"\n                \
    \  minOccurs=\"0\" maxOccurs=\"unbounded\"/>\n      </xs:sequence>\n      <xs:anyAttribute\
    \ namespace=\"##any\" processContents=\"lax\"/>\n   </xs:complexType>\n"
- title: <!-- CCMP response definition -->
  contents:
  - "<!-- CCMP response definition -->\n   <xs:complexType name=\"ccmp-response-type\"\
    >\n       <xs:sequence>\n           <xs:element name=\"ccmpResponse\"\n      \
    \                 type=\"ccmp-response-message-type\" />\n       </xs:sequence>\n\
    \   </xs:complexType>\n   <!-- ccmp-response-message-type -->\n   <xs:complexType\
    \ abstract=\"true\" name=\"ccmp-response-message-type\">\n       <xs:sequence>\n\
    \           <xs:element name=\"confUserID\" type=\"xs:string\"\n             \
    \          minOccurs=\"1\" maxOccurs=\"1\" />\n           <xs:element name=\"\
    confObjID\" type=\"xs:string\"\n                       minOccurs=\"0\" maxOccurs=\"\
    1\" />\n           <xs:element name=\"operation\" type=\"operationType\"\n   \
    \                    minOccurs=\"0\"\n                       maxOccurs=\"1\" />\n\
    \           <xs:element name=\"response-code\"\n                       type=\"\
    response-codeType\"\n                       minOccurs=\"1\" maxOccurs=\"1\" />\n\
    \           <xs:element name=\"response-string\" type=\"xs:string\"\n        \
    \               minOccurs=\"0\" maxOccurs=\"1\" />\n           <xs:element name=\"\
    version\" type=\"xs:positiveInteger\"\n                       minOccurs=\"0\"\
    \ maxOccurs=\"1\" />\n           <xs:any namespace=\"##other\" processContents=\"\
    lax\"\n                       minOccurs=\"0\" maxOccurs=\"unbounded\"/>\n    \
    \   </xs:sequence>\n       <xs:anyAttribute namespace=\"##any\" processContents=\"\
    lax\"/>\n   </xs:complexType>\n"
- title: <!-- CCMP REQUESTS -->
  contents:
  - "<!-- CCMP REQUESTS -->\n   <!-- blueprintsRequest -->\n   <xs:complexType name=\"\
    ccmp-blueprints-request-message-type\">\n       <xs:complexContent>\n        \
    \   <xs:extension base=\"tns:ccmp-request-message-type\">\n               <xs:sequence>\n\
    \                   <xs:element ref=\"blueprintsRequest\" />\n               </xs:sequence>\n\
    \           </xs:extension>\n       </xs:complexContent>\n   </xs:complexType>\n\
    \   <!-- blueprintsRequestType -->\n   <xs:element name=\"blueprintsRequest\"\
    \ type=\"blueprintsRequestType\"/>\n   <xs:complexType name=\"blueprintsRequestType\"\
    >\n       <xs:sequence>\n           <xs:element name=\"xpathFilter\" type=\"xs:string\"\
    \n                       minOccurs=\"0\"/>\n           <xs:any namespace=\"##other\"\
    \ processContents=\"lax\"\n                   minOccurs=\"0\" maxOccurs=\"unbounded\"\
    />\n       </xs:sequence>\n       <xs:anyAttribute namespace=\"##any\" processContents=\"\
    lax\"/>\n   </xs:complexType>\n   <!--  blueprintRequest -->\n   <xs:complexType\
    \ name=\"ccmp-blueprint-request-message-type\">\n       <xs:complexContent>\n\
    \           <xs:extension base=\"tns:ccmp-request-message-type\">\n          \
    \     <xs:sequence>\n                   <xs:element ref=\"blueprintRequest\" />\n\
    \               </xs:sequence>\n           </xs:extension>\n       </xs:complexContent>\n\
    \   </xs:complexType>\n   <!-- blueprintRequestType -->\n   <xs:element name=\"\
    blueprintRequest\" type=\"blueprintRequestType\" />\n   <xs:complexType name=\"\
    blueprintRequestType\">\n       <xs:sequence>\n           <xs:element name=\"\
    blueprintInfo\"\n                       type=\"info:conference-type\" minOccurs=\"\
    0\"/>\n           <xs:any namespace=\"##other\" processContents=\"lax\"\n    \
    \               minOccurs=\"0\" maxOccurs=\"unbounded\"/>\n       </xs:sequence>\n\
    \       <xs:anyAttribute namespace=\"##any\" processContents=\"lax\"/>\n   </xs:complexType>\n\
    \   <!-- confsRequest -->\n   <xs:complexType name=\"ccmp-confs-request-message-type\"\
    >\n       <xs:complexContent>\n           <xs:extension base=\"tns:ccmp-request-message-type\"\
    >\n               <xs:sequence>\n                   <xs:element ref=\"confsRequest\"\
    \ />\n               </xs:sequence>\n           </xs:extension>\n       </xs:complexContent>\n\
    \   </xs:complexType>\n   <!-- confsRequestType -->\n   <xs:element name=\"confsRequest\"\
    \ type=\"confsRequestType\" />\n   <xs:complexType name=\"confsRequestType\">\n\
    \       <xs:sequence>\n           <xs:element name=\"xpathFilter\" type=\"xs:string\"\
    \n                       minOccurs=\"0\"/>\n           <xs:any namespace=\"##other\"\
    \ processContents=\"lax\"\n                  minOccurs=\"0\" maxOccurs=\"unbounded\"\
    />\n       </xs:sequence>\n       <xs:anyAttribute namespace=\"##any\" processContents=\"\
    lax\"/>\n   </xs:complexType>\n   <!-- confRequest -->\n   <xs:complexType name=\"\
    ccmp-conf-request-message-type\">\n       <xs:complexContent>\n           <xs:extension\
    \ base=\"tns:ccmp-request-message-type\">\n               <xs:sequence>\n    \
    \               <xs:element ref=\"confRequest\" />\n               </xs:sequence>\n\
    \           </xs:extension>\n       </xs:complexContent>\n    </xs:complexType>\n\
    \   <!-- confRequestType -->\n   <xs:element name=\"confRequest\" type=\"confRequestType\"\
    \ />\n   <xs:complexType name=\"confRequestType\">\n       <xs:sequence>\n   \
    \        <xs:element name=\"confInfo\" type=\"info:conference-type\"\n       \
    \                minOccurs=\"0\"/>\n           <xs:any namespace=\"##other\" processContents=\"\
    lax\"\n                  minOccurs=\"0\" maxOccurs=\"unbounded\"/>\n       </xs:sequence>\n\
    \       <xs:anyAttribute namespace=\"##any\" processContents=\"lax\"/>\n   </xs:complexType>\n\
    \   <!-- usersRequest -->\n   <xs:complexType name=\"ccmp-users-request-message-type\"\
    >\n       <xs:complexContent>\n           <xs:extension base=\"tns:ccmp-request-message-type\"\
    >\n               <xs:sequence>\n                   <xs:element ref=\"usersRequest\"\
    \ />\n               </xs:sequence>\n           </xs:extension>\n       </xs:complexContent>\n\
    \   </xs:complexType>\n   <!-- usersRequestType -->\n   <xs:element name=\"usersRequest\"\
    \ type=\"usersRequestType\" />\n   <xs:complexType name=\"usersRequestType\">\n\
    \       <xs:sequence>\n           <xs:element name=\"usersInfo\" type=\"info:users-type\"\
    \n                       minOccurs=\"0\" />\n           <xs:any namespace=\"##other\"\
    \ processContents=\"lax\"\n                   minOccurs=\"0\" maxOccurs=\"unbounded\"\
    />\n       </xs:sequence>\n       <xs:anyAttribute namespace=\"##any\" processContents=\"\
    lax\"/>\n    </xs:complexType>\n   <!-- userRequest -->\n   <xs:complexType name=\"\
    ccmp-user-request-message-type\">\n       <xs:complexContent>\n           <xs:extension\
    \ base=\"tns:ccmp-request-message-type\">\n               <xs:sequence>\n    \
    \               <xs:element ref=\"userRequest\" />\n               </xs:sequence>\n\
    \           </xs:extension>\n       </xs:complexContent>\n   </xs:complexType>\n\
    \   <!-- userRequestType -->\n   <xs:element name=\"userRequest\" type=\"userRequestType\"\
    \ />\n   <xs:complexType name=\"userRequestType\">\n       <xs:sequence>\n   \
    \        <xs:element name=\"userInfo\" type=\"info:user-type\"\n             \
    \          minOccurs=\"0\" />\n           <xs:any namespace=\"##other\" processContents=\"\
    lax\"\n                   minOccurs=\"0\" maxOccurs=\"unbounded\"/>\n       </xs:sequence>\n\
    \       <xs:anyAttribute namespace=\"##any\" processContents=\"lax\"/>\n   </xs:complexType>\n\
    \   <!-- sidebarsByValRequest -->\n   <xs:complexType name=\"ccmp-sidebarsByVal-request-message-type\"\
    >\n       <xs:complexContent>\n           <xs:extension base=\"tns:ccmp-request-message-type\"\
    >\n               <xs:sequence>\n                   <xs:element ref=\"sidebarsByValRequest\"\
    \ />\n                </xs:sequence>\n           </xs:extension>\n       </xs:complexContent>\n\
    \   </xs:complexType>\n    <!-- sidebarsByValRequestType -->\n    <xs:element\
    \ name=\"sidebarsByValRequest\"\n                type=\"sidebarsByValRequestType\"\
    \ />\n    <xs:complexType name=\"sidebarsByValRequestType\">\n        <xs:sequence>\n\
    \            <xs:element name=\"xpathFilter\"\n                        type=\"\
    xs:string\" minOccurs=\"0\"/>\n            <xs:any namespace=\"##other\" processContents=\"\
    lax\"\n                    minOccurs=\"0\" maxOccurs=\"unbounded\"/>\n       \
    \ </xs:sequence>\n            <xs:anyAttribute namespace=\"##any\" processContents=\"\
    lax\"/>\n    </xs:complexType>\n    <!-- sidebarsByRefRequest -->\n    <xs:complexType\
    \ name=\"ccmp-sidebarsByRef-request-message-type\">\n        <xs:complexContent>\n\
    \            <xs:extension base=\"tns:ccmp-request-message-type\">\n         \
    \       <xs:sequence>\n                    <xs:element ref=\"sidebarsByRefRequest\"\
    \ />\n                </xs:sequence>\n            </xs:extension>\n        </xs:complexContent>\n\
    \    </xs:complexType>\n   <!-- sidebarsByRefRequestType -->\n   <xs:element name=\"\
    sidebarsByRefRequest\"\n               type=\"sidebarsByRefRequestType\" />\n\
    \   <xs:complexType name=\"sidebarsByRefRequestType\">\n       <xs:sequence>\n\
    \           <xs:element name=\"xpathFilter\" type=\"xs:string\"\n            \
    \           minOccurs=\"0\"/>\n           <xs:any namespace=\"##other\" processContents=\"\
    lax\"\n                   minOccurs=\"0\" maxOccurs=\"unbounded\"/>\n       </xs:sequence>\n\
    \       <xs:anyAttribute namespace=\"##any\" processContents=\"lax\"/>\n   </xs:complexType>\n\
    \   <!-- sidebarByValRequest -->\n   <xs:complexType name=\"ccmp-sidebarByVal-request-message-type\"\
    >\n       <xs:complexContent>\n           <xs:extension base=\"tns:ccmp-request-message-type\"\
    >\n               <xs:sequence>\n                   <xs:element ref=\"sidebarByValRequest\"\
    \ />\n               </xs:sequence>\n            </xs:extension>\n       </xs:complexContent>\n\
    \   </xs:complexType>\n   <!-- sidebarByValRequestType -->\n   <xs:element name=\"\
    sidebarByValRequest\"\n               type=\"sidebarByValRequestType\"/>\n   <xs:complexType\
    \ name=\"sidebarByValRequestType\">\n       <xs:sequence>\n           <xs:element\
    \ name=\"sidebarByValInfo\"\n                       type=\"info:conference-type\"\
    \ minOccurs=\"0\"/>\n           <xs:any namespace=\"##other\" processContents=\"\
    lax\"\n                   minOccurs=\"0\" maxOccurs=\"unbounded\"/>\n       </xs:sequence>\n\
    \   <xs:anyAttribute namespace=\"##any\" processContents=\"lax\"/>\n   </xs:complexType>\n\
    \   <!-- sidebarByRefRequest -->\n   <xs:complexType name=\"ccmp-sidebarByRef-request-message-type\"\
    >\n       <xs:complexContent>\n           <xs:extension base=\"tns:ccmp-request-message-type\"\
    >\n               <xs:sequence>\n                   <xs:element ref=\"sidebarByRefRequest\"\
    \ />\n               </xs:sequence>\n           </xs:extension>\n       </xs:complexContent>\n\
    \   </xs:complexType>\n   <!-- sidebarByRefRequestType -->\n   <xs:element name=\"\
    sidebarByRefRequest\"\n               type=\"sidebarByRefRequestType\" />\n  \
    \ <xs:complexType name=\"sidebarByRefRequestType\">\n       <xs:sequence>\n  \
    \         <xs:element name=\"sidebarByRefInfo\"\n                       type=\"\
    info:conference-type\" minOccurs=\"0\"/>\n           <xs:any namespace=\"##other\"\
    \ processContents=\"lax\"\n                   minOccurs=\"0\" maxOccurs=\"unbounded\"\
    />\n       </xs:sequence>\n       <xs:anyAttribute namespace=\"##any\" processContents=\"\
    lax\"/>\n   </xs:complexType>\n   <!-- extendedRequest -->\n   <xs:complexType\
    \ name=\"ccmp-extended-request-message-type\">\n      <xs:complexContent>\n  \
    \        <xs:extension base=\"tns:ccmp-request-message-type\">\n             <xs:sequence>\n\
    \                         <xs:element ref=\"extendedRequest\"/>\n            \
    \ </xs:sequence>\n          </xs:extension>\n      </xs:complexContent>\n   </xs:complexType>\n\
    \   <!-- extendedRequestType -->\n   <xs:element name=\"extendedRequest\" type=\"\
    extendedRequestType\"/>\n   <xs:complexType name=\"extendedRequestType\">\n  \
    \   <xs:sequence>\n        <xs:element name=\"extensionName\"\n              \
    \      type=\"xs:string\" minOccurs=\"1\"/>\n        <xs:any namespace=\"##other\"\
    \ processContents=\"lax\" minOccurs=\"0\"\n                           maxOccurs=\"\
    unbounded\" />\n    </xs:sequence>\n   </xs:complexType>\n   <!-- optionsRequest\
    \ -->\n        <xs:complexType name=\"ccmp-options-request-message-type\">\n \
    \       <xs:complexContent>\n            <xs:extension base=\"tns:ccmp-request-message-type\"\
    >\n            </xs:extension>\n        </xs:complexContent>\n    </xs:complexType>\n"
- title: <!-- CCMP RESPONSES -->
  contents:
  - "<!-- CCMP RESPONSES -->\n   <!-- blueprintsResponse -->\n   <xs:complexType name=\"\
    ccmp-blueprints-response-message-type\">\n       <xs:complexContent>\n       \
    \    <xs:extension base=\"tns:ccmp-response-message-type\">\n               <xs:sequence>\n\
    \                   <xs:element ref=\"blueprintsResponse\" />\n              \
    \ </xs:sequence>\n           </xs:extension>\n       </xs:complexContent>\n  \
    \ </xs:complexType>\n   <!-- blueprintsResponseType -->\n   <xs:element name=\"\
    blueprintsResponse\" type=\"blueprintsResponseType\"/>\n   <xs:complexType name=\"\
    blueprintsResponseType\">\n       <xs:sequence>\n           <xs:element name=\"\
    blueprintsInfo\" type=\"info:uris-type\"\n                       minOccurs=\"\
    0\"/>\n           <xs:any namespace=\"##other\" processContents=\"lax\"\n    \
    \               minOccurs=\"0\" maxOccurs=\"unbounded\"/>\n       </xs:sequence>\n\
    \       <xs:anyAttribute namespace=\"##any\" processContents=\"lax\"/>\n   </xs:complexType>\n\
    \   <!-- blueprintResponse -->\n   <xs:complexType name=\"ccmp-blueprint-response-message-type\"\
    >\n       <xs:complexContent>\n           <xs:extension base=\"tns:ccmp-response-message-type\"\
    >\n               <xs:sequence>\n                   <xs:element ref=\"blueprintResponse\"\
    \ />\n               </xs:sequence>\n           </xs:extension>\n       </xs:complexContent>\n\
    \    </xs:complexType>\n    <!-- blueprintResponseType -->\n    <xs:element name=\"\
    blueprintResponse\" type=\"blueprintResponseType\"/>\n    <xs:complexType name=\"\
    blueprintResponseType\">\n        <xs:sequence>\n          <xs:element name=\"\
    blueprintInfo\" type=\"info:conference-type\"\n                        minOccurs=\"\
    0\"/>\n          <xs:any namespace=\"##other\" processContents=\"lax\"\n     \
    \               minOccurs=\"0\" maxOccurs=\"unbounded\"/>\n        </xs:sequence>\n\
    \        <xs:anyAttribute namespace=\"##any\" processContents=\"lax\"/>\n    </xs:complexType>\n\
    \    <!-- confsResponse -->\n    <xs:complexType name=\"ccmp-confs-response-message-type\"\
    >\n        <xs:complexContent>\n            <xs:extension base=\"tns:ccmp-response-message-type\"\
    >\n                <xs:sequence>\n                    <xs:element ref=\"confsResponse\"\
    \ />\n                </xs:sequence>\n            </xs:extension>\n        </xs:complexContent>\n\
    \    </xs:complexType>\n    <!-- confsResponseType -->\n    <xs:element name=\"\
    confsResponse\" type=\"confsResponseType\" />\n    <xs:complexType name=\"confsResponseType\"\
    >\n        <xs:sequence>\n            <xs:element name=\"confsInfo\" type=\"info:uris-type\"\
    \n                        minOccurs=\"0\"/>\n            <xs:any namespace=\"\
    ##other\" processContents=\"lax\"\n                    minOccurs=\"0\" maxOccurs=\"\
    unbounded\"/>\n        </xs:sequence>\n        <xs:anyAttribute namespace=\"##any\"\
    \ processContents=\"lax\"/>\n    </xs:complexType>\n    <!-- confResponse -->\n\
    \    <xs:complexType name=\"ccmp-conf-response-message-type\">\n        <xs:complexContent>\n\
    \            <xs:extension base=\"tns:ccmp-response-message-type\">\n        \
    \        <xs:sequence>\n                    <xs:element ref=\"confResponse\"/>\n\
    \                </xs:sequence>\n            </xs:extension>\n        </xs:complexContent>\n\
    \    </xs:complexType>\n    <!-- confResponseType -->\n    <xs:element name=\"\
    confResponse\" type=\"confResponseType\" />\n    <xs:complexType name=\"confResponseType\"\
    >\n        <xs:sequence>\n            <xs:element name=\"confInfo\" type=\"info:conference-type\"\
    \n                        minOccurs=\"0\"/>\n            <xs:any namespace=\"\
    ##other\" processContents=\"lax\"\n                    minOccurs=\"0\" maxOccurs=\"\
    unbounded\"/>\n        </xs:sequence>\n        <xs:anyAttribute namespace=\"##any\"\
    \ processContents=\"lax\"/>\n    </xs:complexType>\n    <!-- usersResponse -->\n\
    \    <xs:complexType name=\"ccmp-users-response-message-type\">\n        <xs:complexContent>\n\
    \            <xs:extension base=\"tns:ccmp-response-message-type\">\n        \
    \        <xs:sequence>\n                    <xs:element ref=\"usersResponse\"\
    \ />\n                </xs:sequence>\n            </xs:extension>\n         </xs:complexContent>\n\
    \    </xs:complexType>\n    <!-- usersResponseType -->\n    <xs:element name=\"\
    usersResponse\" type=\"usersResponseType\" />\n    <xs:complexType name=\"usersResponseType\"\
    >\n        <xs:sequence>\n            <xs:element name=\"usersInfo\" type=\"info:users-type\"\
    \n                        minOccurs=\"0\"/>\n            <xs:any namespace=\"\
    ##other\" processContents=\"lax\"\n                    minOccurs=\"0\" maxOccurs=\"\
    unbounded\"/>\n        </xs:sequence>\n        <xs:anyAttribute namespace=\"##any\"\
    \ processContents=\"lax\"/>\n    </xs:complexType>\n    <!-- userResponse -->\n\
    \    <xs:complexType name=\"ccmp-user-response-message-type\">\n        <xs:complexContent>\n\
    \            <xs:extension base=\"tns:ccmp-response-message-type\">\n        \
    \        <xs:sequence>\n                    <xs:element ref=\"userResponse\" />\n\
    \                </xs:sequence>\n            </xs:extension>\n        </xs:complexContent>\n\
    \    </xs:complexType>\n    <!-- userResponseType -->\n    <xs:element name=\"\
    userResponse\" type=\"userResponseType\" />\n    <xs:complexType name=\"userResponseType\"\
    >\n        <xs:sequence>\n            <xs:element name=\"userInfo\" type=\"info:user-type\"\
    \n                        minOccurs=\"0\"/>\n            <xs:any namespace=\"\
    ##other\" processContents=\"lax\"\n                  minOccurs=\"0\" maxOccurs=\"\
    unbounded\"/>\n        </xs:sequence>\n        <xs:anyAttribute namespace=\"##any\"\
    \ processContents=\"lax\"/>\n    </xs:complexType>\n    <!-- sidebarsByValResponse\
    \ -->\n    <xs:complexType name=\"ccmp-sidebarsByVal-response-message-type\">\n\
    \        <xs:complexContent>\n            <xs:extension base=\"tns:ccmp-response-message-type\"\
    >\n                <xs:sequence>\n                    <xs:element ref=\"sidebarsByValResponse\"\
    \ />\n                </xs:sequence>\n            </xs:extension>\n        </xs:complexContent>\n\
    \    </xs:complexType>\n    <!-- sidebarsByValResponseType -->\n    <xs:element\
    \ name=\"sidebarsByValResponse\"\n                type=\"sidebarsByValResponseType\"\
    \ />\n    <xs:complexType name=\"sidebarsByValResponseType\">\n        <xs:sequence>\n\
    \            <xs:element name=\"sidebarsByValInfo\"\n                        type=\"\
    info:sidebars-by-val-type\" minOccurs=\"0\"/>\n            <xs:any namespace=\"\
    ##other\" processContents=\"lax\"\n                    minOccurs=\"0\" maxOccurs=\"\
    unbounded\"/>\n        </xs:sequence>\n        <xs:anyAttribute namespace=\"##any\"\
    \ processContents=\"lax\"/>\n    </xs:complexType>\n    <!-- sidebarsByRefResponse\
    \ -->\n    <xs:complexType name=\"ccmp-sidebarsByRef-response-message-type\">\n\
    \        <xs:complexContent>\n            <xs:extension base=\"tns:ccmp-response-message-type\"\
    >\n                <xs:sequence>\n                    <xs:element ref=\"sidebarsByRefResponse\"\
    \ />\n                </xs:sequence>\n            </xs:extension>\n       </xs:complexContent>\n\
    \    </xs:complexType>\n    <!-- sidebarsByRefResponseType -->\n    <xs:element\
    \ name=\"sidebarsByRefResponse\"\n                type=\"sidebarsByRefResponseType\"\
    \ />\n    <xs:complexType name=\"sidebarsByRefResponseType\">\n        <xs:sequence>\n\
    \            <xs:element name=\"sidebarsByRefInfo\" type=\"info:uris-type\"\n\
    \                        minOccurs=\"0\"/>\n            <xs:any namespace=\"##other\"\
    \ processContents=\"lax\"\n                    minOccurs=\"0\" maxOccurs=\"unbounded\"\
    />\n        </xs:sequence>\n        <xs:anyAttribute namespace=\"##any\" processContents=\"\
    lax\"/>\n    </xs:complexType>\n    <!-- sidebarByValResponse -->\n    <xs:complexType\
    \ name=\"ccmp-sidebarByVal-response-message-type\">\n        <xs:complexContent>\n\
    \            <xs:extension base=\"tns:ccmp-response-message-type\">\n        \
    \        <xs:sequence>\n                    <xs:element ref=\"sidebarByValResponse\"\
    \ />\n                </xs:sequence>\n            </xs:extension>\n        </xs:complexContent>\n\
    \    </xs:complexType>\n    <!-- sidebarByValResponseType -->\n    <xs:element\
    \ name=\"sidebarByValResponse\"\n                type=\"sidebarByValResponseType\"\
    \ />\n    <xs:complexType name=\"sidebarByValResponseType\">\n        <xs:sequence>\n\
    \            <xs:element name=\"sidebarByValInfo\"\n                        type=\"\
    info:conference-type\" minOccurs=\"0\"/>\n            <xs:any namespace=\"##other\"\
    \ processContents=\"lax\"\n                    minOccurs=\"0\" maxOccurs=\"unbounded\"\
    />\n         </xs:sequence>\n         <xs:anyAttribute namespace=\"##any\" processContents=\"\
    lax\"/>\n    </xs:complexType>\n    <!-- sidebarByRefResponse -->\n    <xs:complexType\
    \ name=\"ccmp-sidebarByRef-response-message-type\">\n        <xs:complexContent>\n\
    \            <xs:extension base=\"tns:ccmp-response-message-type\">\n        \
    \        <xs:sequence>\n                    <xs:element ref=\"sidebarByRefResponse\"\
    \ />\n                 </xs:sequence>\n            </xs:extension>\n        </xs:complexContent>\n\
    \    </xs:complexType>\n    <!-- sidebarByRefResponseType -->\n    <xs:element\
    \ name=\"sidebarByRefResponse\"\n                type=\"sidebarByRefResponseType\"\
    \ />\n    <xs:complexType name=\"sidebarByRefResponseType\">\n        <xs:sequence>\n\
    \            <xs:element name=\"sidebarByRefInfo\"\n                        type=\"\
    info:conference-type\" minOccurs=\"0\"/>\n            <xs:any namespace=\"##other\"\
    \ processContents=\"lax\"\n                    minOccurs=\"0\" maxOccurs=\"unbounded\"\
    />\n        </xs:sequence>\n        <xs:anyAttribute namespace=\"##any\" processContents=\"\
    lax\"/>\n    </xs:complexType>\n    <!-- extendedResponse -->\n    <xs:complexType\
    \ name=\"ccmp-extended-response-message-type\">\n       <xs:complexContent>\n\
    \           <xs:extension base=\"tns:ccmp-response-message-type\">\n         \
    \      <xs:sequence>\n                                 <xs:element ref=\"extendedResponse\"\
    />\n               </xs:sequence>\n           </xs:extension>\n        </xs:complexContent>\n\
    \    </xs:complexType>\n    <!-- extendedResponseType -->\n    <xs:element name=\"\
    extendedResponse\" type=\"extendedResponseType\"/>\n    <xs:complexType name=\"\
    extendedResponseType\">\n        <xs:sequence>\n                <xs:element name=\"\
    extensionName\"\n                            type=\"xs:string\" minOccurs=\"1\"\
    />\n                <xs:any namespace=\"##other\" processContents=\"lax\"\n  \
    \                      minOccurs=\"0\"\n                    maxOccurs=\"unbounded\"\
    \ />\n        </xs:sequence>\n    </xs:complexType>\n    <!-- optionsResponse\
    \ -->\n        <xs:complexType name=\"ccmp-options-response-message-type\">\n\
    \        <xs:complexContent>\n            <xs:extension base=\"tns:ccmp-response-message-type\"\
    >\n                <xs:sequence>\n                    <xs:element ref=\"optionsResponse\"\
    />\n                 </xs:sequence>\n            </xs:extension>\n        </xs:complexContent>\n\
    \    </xs:complexType>\n    <!-- optionsResponseType -->\n    <xs:element name=\"\
    optionsResponse\"\n                type=\"optionsResponseType\" />\n    <xs:complexType\
    \ name=\"optionsResponseType\">\n        <xs:sequence>\n            <xs:element\
    \ name=\"options\"\n                        type=\"options-type\" minOccurs=\"\
    0\"/>\n            <xs:any namespace=\"##other\" processContents=\"lax\"\n   \
    \                 minOccurs=\"0\" maxOccurs=\"unbounded\"/>\n        </xs:sequence>\n\
    \        <xs:anyAttribute namespace=\"##any\" processContents=\"lax\"/>\n    </xs:complexType>\n"
- title: <!-- CCMP ELEMENT TYPES -->
  contents:
  - "<!-- CCMP ELEMENT TYPES -->\n    <!-- response-codeType-->\n    <xs:simpleType\
    \ name=\"response-codeType\">\n         <xs:restriction base=\"xs:positiveInteger\"\
    >\n                 <xs:pattern value=\"[0-9][0-9][0-9]\" />\n         </xs:restriction>\n\
    \    </xs:simpleType>\n    <!-- operationType -->\n    <xs:simpleType name=\"\
    operationType\">\n      <xs:restriction base=\"xs:token\">\n        <xs:enumeration\
    \ value=\"retrieve\"/>\n        <xs:enumeration value=\"create\"/>\n        <xs:enumeration\
    \ value=\"update\"/>\n        <xs:enumeration value=\"delete\"/>\n      </xs:restriction>\n\
    \    </xs:simpleType>\n   <!-- subject-type -->\n   <xs:complexType name=\"subject-type\"\
    >\n       <xs:sequence>\n           <xs:element name=\"username\" type=\"xs:string\"\
    \n                       minOccurs=\"0\" maxOccurs=\"1\" />\n           <xs:element\
    \ name=\"password\" type=\"xs:string\"\n                       minOccurs=\"0\"\
    \ maxOccurs=\"1\" />\n           <xs:any namespace=\"##other\" processContents=\"\
    lax\"\n                   minOccurs=\"0\" maxOccurs=\"unbounded\"/>\n       </xs:sequence>\n\
    \       <xs:anyAttribute namespace=\"##any\" processContents=\"lax\"/>\n   </xs:complexType>\n\
    \   <!-- options-type -->\n    <xs:complexType name=\"options-type\">\n      <xs:sequence>\n\
    \        <xs:element name=\"standard-message-list\"\n                    type=\"\
    standard-message-list-type\"\n                    minOccurs=\"1\"/>\n        <xs:element\
    \ name=\"extended-message-list\"\n                    type=\"extended-message-list-type\"\
    \n                    minOccurs=\"0\"/>\n        <xs:any namespace=\"##other\"\
    \ processContents=\"lax\"\n                    minOccurs=\"0\" maxOccurs=\"unbounded\"\
    />\n        </xs:sequence>\n        <xs:anyAttribute namespace=\"##any\" processContents=\"\
    lax\"/>\n    </xs:complexType>\n    <!-- standard-message-list-type -->\n    <xs:complexType\
    \ name=\"standard-message-list-type\">\n      <xs:sequence>\n        <xs:element\
    \ name=\"standard-message\"\n                    type=\"standard-message-type\"\
    \n                    minOccurs=\"1\" maxOccurs=\"10\"/>\n        <xs:any namespace=\"\
    ##other\" processContents=\"lax\"\n                    minOccurs=\"0\" maxOccurs=\"\
    unbounded\"/>\n        </xs:sequence>\n        <xs:anyAttribute namespace=\"##any\"\
    \ processContents=\"lax\"/>\n    </xs:complexType>\n    <!-- standard-message-type\
    \ -->\n    <xs:complexType name=\"standard-message-type\">\n      <xs:sequence>\n\
    \        <xs:element name=\"name\"\n                    type=\"standard-message-name-type\"\
    \n                    minOccurs=\"1\"/>\n        <xs:element name=\"operations\"\
    \n                    type=\"operations-type\"\n                    minOccurs=\"\
    0\"/>\n        <xs:element name=\"schema-def\" type=\"xs:string\" minOccurs=\"\
    0\"/>\n        <xs:element name=\"description\" type=\"xs:string\" minOccurs=\"\
    0\"/>\n        <xs:any namespace=\"##other\" processContents=\"lax\"\n       \
    \             minOccurs=\"0\" maxOccurs=\"unbounded\"/>\n        </xs:sequence>\n\
    \        <xs:anyAttribute namespace=\"##any\" processContents=\"lax\"/>\n    </xs:complexType>\n\
    \    <!-- standard-message-name-type -->\n    <xs:simpleType name=\"standard-message-name-type\"\
    >\n      <xs:restriction base=\"xs:token\">\n        <xs:enumeration value=\"\
    confsRequest\"/>\n        <xs:enumeration value=\"confRequest\"/>\n        <xs:enumeration\
    \ value=\"blueprintsRequest\"/>\n        <xs:enumeration value=\"blueprintRequest\"\
    />\n        <xs:enumeration value=\"usersRequest\"/>\n        <xs:enumeration\
    \ value=\"userRequest\"/>\n        <xs:enumeration value=\"sidebarsByValRequest\"\
    />\n        <xs:enumeration value=\"sidebarByValRequest\"/>\n        <xs:enumeration\
    \ value=\"sidebarsByRefRequest\"/>\n        <xs:enumeration value=\"sidebarByRefRequest\"\
    />\n      </xs:restriction>\n    </xs:simpleType>\n    <!-- operations-type -->\n\
    \    <xs:complexType name=\"operations-type\">\n      <xs:sequence>\n        <xs:element\
    \ name=\"operation\" type=\"operationType\"\n                    minOccurs=\"\
    1\" maxOccurs=\"4\"/>\n      </xs:sequence>\n      <xs:anyAttribute namespace=\"\
    ##any\" processContents=\"lax\"/>\n    </xs:complexType>\n    <!-- extended-message-list-type\
    \ -->\n    <xs:complexType name=\"extended-message-list-type\">\n      <xs:sequence>\n\
    \        <xs:element name=\"extended-message\"\n                    type=\"extended-message-type\"\
    \n                    minOccurs=\"0\"/>\n        <xs:any namespace=\"##other\"\
    \ processContents=\"lax\"\n                    minOccurs=\"0\" maxOccurs=\"unbounded\"\
    />\n        </xs:sequence>\n        <xs:anyAttribute namespace=\"##any\" processContents=\"\
    lax\"/>\n    </xs:complexType>\n    <!-- extended-message-type -->\n    <xs:complexType\
    \ name=\"extended-message-type\">\n      <xs:sequence>\n        <xs:element name=\"\
    name\" type=\"xs:string\" />\n        <xs:element name=\"operations\"\n      \
    \              type=\"operations-type\"\n                    minOccurs=\"0\"/>\n\
    \        <xs:element name=\"schema-def\" type=\"xs:string\" />\n        <xs:element\
    \ name=\"description\"\n                    type=\"xs:string\"\n             \
    \       minOccurs=\"0\"/>\n        <xs:any namespace=\"##other\" processContents=\"\
    lax\"\n                    minOccurs=\"0\" maxOccurs=\"unbounded\"/>\n       \
    \ </xs:sequence>\n        <xs:anyAttribute namespace=\"##any\" processContents=\"\
    lax\"/>\n    </xs:complexType>\n </xs:schema>\n                        Figure\
    \ 30: CCMP XML Schema\n"
- title: 12.  IANA Considerations
  contents:
  - "12.  IANA Considerations\n   This document registers a new XML namespace, a new\
    \ XML schema, and\n   the MIME type for the schema.  This document also registers\
    \ the\n   \"XCON\" Application Service tag and the \"CCMP\" Application Protocol\n\
    \   tag and defines registries for the CCMP operation types and response\n   codes.\n"
- title: 12.1.  URN Sub-Namespace Registration
  contents:
  - "12.1.  URN Sub-Namespace Registration\n   This section registers a new XML namespace,\n\
    \   \"urn:ietf:params:xml:ns:xcon-ccmp\".\n      URI: urn:ietf:params:xml:ns:xcon-ccmp\n\
    \      Registrant Contact: IETF XCON working group (xcon@ietf.org), Mary\n   \
    \   Barnes (mary.ietf.barnes@gmail.com).\n      XML:\n   BEGIN\n     <?xml version=\"\
    1.0\"?>\n     <!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\"\n   \
    \    \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">\n     <html xmlns=\"\
    http://www.w3.org/1999/xhtml\" xml:lang=\"en\">\n       <head>\n         <title>CCMP\
    \ Messages</title>\n       </head>\n       <body>\n         <h1>Namespace for\
    \ CCMP Messages</h1>\n         <h2>urn:ietf:params:xml:ns:xcon-ccmp</h2>\n   \
    \      <p>See <a href=\"http://www.rfc-editor.org/rfc/rfc6503.txt\">\n       \
    \     RFC 6503</a>.</p>\n       </body>\n     </html>\n   END\n"
- title: 12.2.  XML Schema Registration
  contents:
  - "12.2.  XML Schema Registration\n   This section registers an XML schema per the\
    \ guidelines in [RFC3688].\n   URI:  urn:ietf:params:xml:schema:xcon-ccmp\n  \
    \ Registrant Contact:  IETF XCON working group (xcon@ietf.org), Mary\n      Barnes\
    \ (mary.ietf.barnes@gmail.com).\n   Schema:  The XML for this schema can be found\
    \ as the entirety of\n      Section 11 of this document.\n"
- title: 12.3.  MIME Media Type Registration for 'application/ccmp+xml'
  contents:
  - "12.3.  MIME Media Type Registration for 'application/ccmp+xml'\n   This section\
    \ registers the \"application/ccmp+xml\" MIME type.\n   To:  ietf-types@iana.org\n\
    \   Subject:  Registration of MIME media type application/ccmp+xml\n   MIME media\
    \ type name:  application\n   MIME subtype name:  ccmp+xml\n   Required parameters:\
    \  (none)\n   Optional parameters:  charset\n      Same as the charset parameter\
    \ of \"application/xml\" as specified in\n      [RFC3023], Section 3.2.\n   Encoding\
    \ considerations:  Same as the encoding considerations of\n      \"application/xml\"\
    \ as specified in [RFC3023], Section 3.2.\n   Security considerations:  This content\
    \ type is designed to carry\n      protocol data related to conference control.\
    \  Some of the data\n      could be considered private.  This media type does\
    \ not provide any\n      protection and thus other mechanisms such as those described\
    \ in\n      Section 10 are required to protect the data.  This media type does\n\
    \      not contain executable content.\n   Interoperability considerations:  None.\n\
    \   Published specification:  RFC 6503.\n   Applications that use this media type:\
    \  Centralized Conferencing\n      control clients and servers.\n   Additional\
    \ Information:  Magic Number(s): (none)\n      File extension(s): .ccmp\n    \
    \  Macintosh File Type Code(s): TEXT\n   Person & email address to contact for\
    \ further information:  Mary\n      Barnes <mary.ietf.barnes@gmail.com>\n   Intended\
    \ usage:  LIMITED USE\n   Author/Change controller:  The IETF\n   Other information:\
    \  This media type is a specialization of\n      application/xml [RFC3023], and\
    \ many of the considerations\n      described there also apply to application/ccmp+xml.\n"
- title: 12.4.  DNS Registrations
  contents:
  - "12.4.  DNS Registrations\n   Section 12.4.1 defines an Application Service tag\
    \ of \"XCON\", which is\n   used to identify the centralized conferencing (XCON)\
    \ server for a\n   particular domain.  The Application Protocol tag \"CCMP\",\
    \ defined in\n   Section 12.4.2, is used to identify an XCON server that understands\n\
    \   CCMP.\n"
- title: 12.4.1.  Registration of a Conference Server Application Service Tag
  contents:
  - "12.4.1.  Registration of a Conference Server Application Service Tag\n   This\
    \ section registers a new S-NAPTR/U-NAPTR Application Service tag\n   for XCON,\
    \ as mandated by [RFC3958].\n   Application Service Tag: XCON\n   Intended usage:\
    \ Identifies a server that supports centralized\n   conferencing.\n   Defining\
    \ publication: RFC 6503\n   Contact information: The authors of this document\n\
    \   Author/Change controller: The IESG\n"
- title: 12.4.2.  Registration of a Conference Server Application Protocol Tag
  contents:
  - "12.4.2.  Registration of a Conference Server Application Protocol Tag\n     \
    \    for CCMP\n   This section registers a new S-NAPTR/U-NAPTR Application Protocol\
    \ tag\n   for CCMP, as mandated by [RFC3958].\n   Application Service Tag: CCMP\n\
    \   Intended Usage: Identifies the Centralized Conferencing (XCON)\n   Manipulation\
    \ Protocol.\n   Applicable Service Tag(s): XCON\n   Terminal NAPTR Record Type(s):\
    \ U\n   Defining Publication: RFC 6503\n   Contact Information: The authors of\
    \ this document\n   Author/Change Controller: The IESG\n"
- title: 12.5.  CCMP Protocol Registry
  contents:
  - "12.5.  CCMP Protocol Registry\n   The IANA has created a new registry for CCMP:\n\
    \   http://www.iana.org/assignments/ccmp-parameters.  The document\n   creates\
    \ initial sub-registries for CCMP operation types and response\n   codes.\n"
- title: 12.5.1.  CCMP Message Types
  contents:
  - "12.5.1.  CCMP Message Types\n   The following summarizes the registry for CCMP\
    \ messages:\n   Related Registry:   CCMP Message Types Registry\n   Defining RFC:\
    \  RFC 6503.\n   Registration/Assignment Procedures:  Following the policies outlined\n\
    \      in [RFC5226], the IANA policy for assigning new values for the\n      CCMP\
    \ message types for CCMP is Specification Required.\n   Registrant Contact:  IETF\
    \ XCON working group (xcon@ietf.org), Mary\n      Barnes (mary.ietf.barnes@gmail.com).\n\
    \   This specification establishes the Message sub-registry under\n   http://www.iana.org/assignments/ccmp-messages.\
    \  The initial Message\n   table is populated using the CCMP messages described\
    \ in Section 4.1\n   and defined in the XML schema in Section 11.\n  Message \
    \             Description                             Reference\n  -------   \
    \           -----------                             ---------\n  optionsRequest\
    \       Used by a conferencing client           [RFC6503]\n                  \
    \     to query a conference server for\n                       its capabilities,\
    \ in terms of\n                       supported messages.\n  optionsResponse \
    \     Returns a list of CCMP messages         [RFC6503]\n                    \
    \   supported by the specific\n                       conference server.\n  blueprintsRequest\
    \    Used by a conferencing client           [RFC6503]\n                     \
    \  to query a conference server for\n                       its capabilities,\
    \ in terms of\n                       available conference blueprints.\n  blueprintsResponse\
    \   Returns a list of blueprints supported  [RFC6503]\n                      \
    \ by the specific conference server.\n  blueprintRequest     Sent to retrieve\
    \ the conference object  [RFC6503]\n                       associated with a specific\
    \ blueprint.\n  blueprintResponse    Returns the conference object           [RFC6503]\n\
    \                       associated with a specific blueprint.\n  confsRequest\
    \         Used by a conferencing client           [RFC6503]\n                \
    \       to query a conference server for\n                       its scheduled/active\
    \ conferences.\n  confsResponse        Returns the list of the currently     \
    \  [RFC6503]\n                       activated/scheduled conferences\n       \
    \                at the server.\n  confRequest          Used to create a conference\
    \ object      [RFC6503]\n                       and/or to request an operation\
    \ on\n                       the conference object as a whole.\n  confResponse\
    \         Indicates the result of the operation   [RFC6503]\n                \
    \       on the conference object as a whole.\n  userRequest          Used to request\
    \ an operation on the     [RFC6503]\n                       <user> element in\
    \ the conference object.\n  userResponse         Indicates the result of the requested\
    \   [RFC6503]\n                       operation on the <user> element in\n   \
    \                    the conference object.\n  usersRequest         Used to manipulate\
    \ the <users> element  [RFC6503]\n                       in the conference object,\
    \ including\n                       parameters such as the <allowed-users-list>,\n\
    \                       <join-handling>, etc.\n  usersResponse        Indicates\
    \ the result of the request     [RFC6503]\n                       to manipulate\
    \ the <users> element in\n                       the conference object.\n  sidebarsByValRequest\
    \ Used to retrieve the <sidebars-by-val>  [RFC6503]\n                       element\
    \ of the target conference object.\n  sidebarsByValResponse Returns the list of\
    \ the sidebar-by-val [RFC6503]\n                        conferences within the\
    \ target\n                        conference object.\n  sidebarsByRefRequest \
    \ Used to retrieve the <sidebars-by-ref> [RFC6503]\n                        element\
    \ of the target conference\n                        object.\n  sidebarsByRefResponse\
    \ Returns the list of the sidebar-by-ref [RFC6503]\n                        conferences\
    \ associated with the target\n                        conference object.\n  sidebarByValRequest\
    \  Used to request an operation on a       [RFC6503]\n                       sidebar-by-val\
    \ conference.\n  sidebarByValResponse Indicates the result of the request to \
    \ [RFC6503]\n                       manipulate a sidebar-by-val conference.\n\
    \  sidebarByRefRequest  Used to request an operation on a       [RFC6503]\n  \
    \                     sideber-by-ref conference.\n  sidebarByRefResponse Indicates\
    \ the result of the request to  [RFC6503]\n                       manipulate a\
    \ sidebar-by-ref conference.\n"
- title: 12.5.2.  CCMP Response Codes
  contents:
  - "12.5.2.  CCMP Response Codes\n   The following summarizes the requested registry\
    \ for CCMP response\n   codes:\n   Related Registry:   CCMP Response Code Registry\n\
    \   Defining RFC:  RFC 6503.\n   Registration/Assignment Procedures:  Following\
    \ the policies outlined\n      in [RFC5226], the IANA policy for assigning new\
    \ values for the\n      Response codes for CCMP shall be Specification Required.\n\
    \   Registrant Contact:  IETF XCON working group (xcon@ietf.org), Mary\n     \
    \ Barnes (mary.ietf.barnes@gmail.com).\n   This specification establishes the\
    \ Response-code sub-registry under\n   http://www.iana.org/assignments/ccmp-parameters.\
    \  The initial\n   Response-code table is populated using the Response codes defined\
    \ in\n   Section 5.4 as follows:\n         Default\n         Response\n  Number\
    \ String              Description                       Reference\n  ------ -------------\
    \       ------------                      ---------\n   200   Success        \
    \     The request was successfully      [RFC6503]\n                          \
    \   processed.\n   400   Bad Request         The request was badly formed in \
    \  [RFC6503]\n                             some fashion.\n   401   Unauthorized\
    \        The user was not authorized for   [RFC6503]\n                       \
    \      the specific operation on the\n                             conference\
    \ object.\n   403   Forbidden           The specific operation is not     [RFC6503]\n\
    \                             valid for the target conference\n              \
    \               object.\n   404   Object Not Found    The specific conference\
    \ object    [RFC6503]\n                             was not found.\n   409   Conflict\
    \            A requested operation cannot be   [RFC6503]\n                   \
    \          successfully completed by the\n                             server.\
    \ For example, the\n                             modification of an object\n \
    \                            cannot be applied because\n                     \
    \        the client version of the object\n                             is obsolete\
    \ and the requested\n                             modifications collide with the\n\
    \                             up-to-date state of the object\n               \
    \              stored at the server.\n   420   User Not Found      The user who\
    \ is the target of the [RFC6503]\n                             requested operation\
    \ is unknown.\n   421   Invalid confUserID  The <confUserID> parameter of the\
    \ [RFC6503]\n                             sender in the request is invalid.\n\
    \   422   Invalid Conference  A request to access/manipulate    [RFC6503]\n  \
    \       Password            a password-protected conference\n                \
    \             object contained an invalid\n                             <conference-password>\
    \ parameter.\n   423   Conference Password A request to access/manipulate    [RFC6503]\n\
    \         Required            a password-protected conference\n              \
    \               object did not contain a\n                             <conference-password>\
    \ parameter.\n   424   Authentication      The server wants to authenticate  [RFC6503]\n\
    \         Required            the request through the <subject>\n            \
    \                 parameter but the parameter is\n                           \
    \  not provided in the request.\n   425   Forbidden Delete    The conferencing\
    \ system cannot    [RFC6503]\n         Parent              delete the specific\
    \ conference\n                             object because it is a\n          \
    \                   parent for another conference object.\n   426   Forbidden\
    \ Change    The target conference object      [RFC6503]\n         Protected  \
    \         cannot be changed (e.g., due to\n                             policies,\
    \ roles or privileges).\n   427   Invalid Domain Name The domain name in an  \
    \           [RFC6503]\n                             AUTO_GENERATE_X\n        \
    \                     instance in the conference object\n                    \
    \         is not within the conference\n                             server's\
    \ domain of responsibility.\n   500   Server Internal     The conference server\
    \ experienced [RFC6503]\n         Error               some sort of internal error.\n\
    \   501   Not Implemented     The specific operation is not     [RFC6503]\n  \
    \                           implemented on the conferencing\n                \
    \             system.\n   510   Request Timeout     The request could not be \
    \         [RFC6503]\n                             processed within a reasonable\n\
    \                             time (as specified by the\n                    \
    \         conferencing system).\n   511   Resources Not       The conference server\
    \ cannot      [RFC6503]\n         Available           execute a command because\
    \ of\n                             resource issues, e.g., it cannot\n        \
    \                     create a conference because\n                          \
    \   the system has reached its limits\n                             on the number\
    \ of conferences.\n"
- title: 13.  Acknowledgments
  contents:
  - "13.  Acknowledgments\n   The authors appreciate the feedback provided by Dave\
    \ Morgan, Pierre\n   Tane, Lorenzo Miniero, Tobia Castaldi, Theo Zourzouvillys,\
    \ Sean\n   Duddy, Oscar Novo, Richard Barnes, Simo Veikkolainen, Keith Drage,\n\
    \   Peter Reissner, Tony Lindstrom, Stephen Kent (secdir review), Brian\n   Carpenter\
    \ (genart review), and Mykyta Yevstifeyev (IANA\n   considerations).  Special\
    \ thanks go to Roberta Presta for her\n   invaluable contribution to this document.\
    \  Roberta has worked on the\n   specification of CCMP at the University of Napoli\
    \ for the preparation\n   of her Master thesis.  She has also implemented the\
    \ CCMP prototype\n   used for the trials and from which the dumps provided in\
    \ Section 6\n   have been extracted.\n"
- title: 14.  References
  contents:
  - '14.  References

    '
- title: 14.1.  Normative References
  contents:
  - "14.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use in\
    \ RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119, March\
    \ 1997.\n   [RFC2616]  Fielding, R., Gettys, J., Mogul, J., Frystyk, H.,\n   \
    \           Masinter, L., Leach, P., and T. Berners-Lee, \"Hypertext\n       \
    \       Transfer Protocol -- HTTP/1.1\", RFC 2616, June 1999.\n   [RFC2617]  Franks,\
    \ J., Hallam-Baker, P., Hostetler, J., Lawrence, S.,\n              Leach, P.,\
    \ Luotonen, A., and L. Stewart, \"HTTP\n              Authentication: Basic and\
    \ Digest Access Authentication\",\n              RFC 2617, June 1999.\n   [RFC2818]\
    \  Rescorla, E., \"HTTP Over TLS\", RFC 2818, May 2000.\n   [RFC3688]  Mealling,\
    \ M., \"The IETF XML Registry\", BCP 81, RFC 3688,\n              January 2004.\n\
    \   [RFC5239]  Barnes, M., Boulton, C., and O. Levin, \"A Framework for\n    \
    \          Centralized Conferencing\", RFC 5239, June 2008.\n   [RFC5246]  Dierks,\
    \ T. and E. Rescorla, \"The Transport Layer Security\n              (TLS) Protocol\
    \ Version 1.2\", RFC 5246, August 2008.\n   [RFC6265]  Barth, A., \"HTTP State\
    \ Management Mechanism\", RFC 6265,\n              April 2011.\n   [RFC6501] \
    \ Novo, O., Camarillo, G., Morgan, D., and J. Urpalainen,\n              \"Conference\
    \ Information Data Model for Centralized\n              Conferencing (XCON)\"\
    , RFC 6501, March 2012.\n   [W3C.REC-xmlschema-1-20041028]\n              Beech,\
    \ D., Thompson, H., Mendelsohn, N., and M. Maloney,\n              \"XML Schema\
    \ Part 1: Structures Second Edition\", World Wide\n              Web Consortium\
    \ Recommendation REC-xmlschema-1-20041028,\n              October 2004,\n    \
    \          <http://www.w3.org/TR/2004/REC-xmlschema-1-20041028>.\n   [W3C.REC-xmlschema-2-20041028]\n\
    \              Biron, P. and A. Malhotra, \"XML Schema Part 2: Datatypes\n   \
    \           Second Edition\", World Wide Web Consortium\n              Recommendation\
    \ REC-xmlschema-2-20041028, October 2004,\n              <http://www.w3.org/TR/2004/REC-xmlschema-2-20041028>.\n"
- title: 14.2.  Informative References
  contents:
  - "14.2.  Informative References\n   [REST]     Fielding, \"Architectural Styles\
    \ and the Design of Network-\n              based Software Architectures\", 2000.\n\
    \   [RFC3023]  Murata, M., St. Laurent, S., and D. Kohn, \"XML Media\n       \
    \       Types\", RFC 3023, January 2001.\n   [RFC3261]  Rosenberg, J., Schulzrinne,\
    \ H., Camarillo, G., Johnston,\n              A., Peterson, J., Sparks, R., Handley,\
    \ M., and E.\n              Schooler, \"SIP: Session Initiation Protocol\", RFC\
    \ 3261,\n              June 2002.\n   [RFC3958]  Daigle, L. and A. Newton, \"\
    Domain-Based Application\n              Service Location Using SRV RRs and the\
    \ Dynamic Delegation\n              Discovery Service (DDDS)\", RFC 3958, January\
    \ 2005.\n   [RFC4582]  Camarillo, G., Ott, J., and K. Drage, \"The Binary Floor\n\
    \              Control Protocol (BFCP)\", RFC 4582, November 2006.\n   [RFC4732]\
    \  Handley, M., Rescorla, E., and IAB, \"Internet Denial-of-\n              Service\
    \ Considerations\", RFC 4732, December 2006.\n   [RFC5226]  Narten, T. and H.\
    \ Alvestrand, \"Guidelines for Writing an\n              IANA Considerations Section\
    \ in RFCs\", BCP 26, RFC 5226,\n              May 2008.\n   [RFC6502]  Camarillo,\
    \ G., Srinivasan, S., Even, R., and J.\n              Urpalainen, \"Conference\
    \ Event Package Data Format\n              Extension for Centralized Conferencing\
    \ (XCON)\", RFC 6502,\n              March 2012.\n   [W3C.REC-soap12-part1-20070427]\n\
    \              Nielsen, H., Mendelsohn, N., Moreau, J., Gudgin, M.,\n        \
    \      Hadley, M., Lafon, Y., and A. Karmarkar, \"SOAP Version 1.2\n         \
    \     Part 1: Messaging Framework (Second Edition)\", World Wide\n           \
    \   Web Consortium Recommendation REC-soap12-part1-20070427,\n              April\
    \ 2007,\n              <http://www.w3.org/TR/2007/REC-soap12-part1-20070427>.\n\
    \   [W3C.REC-soap12-part2-20070427]\n              Moreau, J., Gudgin, M., Karmarkar,\
    \ A., Mendelsohn, N.,\n              Hadley, M., Lafon, Y., and H. Nielsen, \"\
    SOAP Version 1.2\n              Part 2: Adjuncts (Second Edition)\", World Wide\
    \ Web\n              Consortium Recommendation REC-soap12-part2-20070427,\n  \
    \            April 2007,\n              <http://www.w3.org/TR/2007/REC-soap12-part2-20070427>.\n"
- title: Appendix A.  Evaluation of Other Protocol Models and  Transports
  contents:
  - "Appendix A.  Evaluation of Other Protocol Models and  Transports\n          \
    \   Considered for CCMP\n   This section provides some background as to the selection\
    \ of HTTP as\n   the transport for the CCMP requests/responses.  In addition to\
    \ HTTP,\n   the operations on the objects can be implemented in at least two\n\
    \   different ways, namely as remote procedure calls -- using SOAP as\n   described\
    \ in Appendix A.1 and by defining resources following a\n   RESTful architecture\
    \ Appendix A.2.\n   In both the SOAP and RESTFUL approaches, servers will have\
    \ to\n   recreate their internal state representation of the object with each\n\
    \   update request, checking parameters and triggering function\n   invocations.\
    \  In the SOAP approach, it would be possible to describe\n   a separate operation\
    \ for each atomic element, but that would greatly\n   increase the complexity\
    \ of the protocol.  A coarser-grained approach\n   to CCMP does require that the\
    \ server process XML elements in updates\n   that have not changed and that there\
    \ can be multiple changes in one\n   update.  For CCMP, the resource (REST) model\
    \ might appear more\n   attractive, since the conference operations fit the CRUD\
    \ approach.\n   However, neither of these approaches were considered ideal.  SOAP\
    \ was\n   considered to bring additional overhead.  It is quite awkward to\n \
    \  apply a RESTful approach since CCMP requires a more complex request/\n   response\
    \ protocol in order to maintain the data both in the server\n   and at the client.\
    \  This doesn't map very elegantly to the basic\n   request/response model, whereby\
    \ a response typically indicates\n   whether the request was successful or not,\
    \ rather than providing\n   additional data to maintain the synchronization between\
    \ the client\n   and server data.  In addition, the CCMP clients may also receive\
    \ the\n   data in notifications.  While the notification method or protocol\n\
    \   used by some conferencing clients can be independent of CCMP, the\n   same\
    \ data in the server is used for both CCMP and notifications -\n   this requires\
    \ a server application above the transport layer (e.g.,\n   HTTP) for maintaining\
    \ the data, which in the CCMP model is\n   transparent to the transport protocol.\n\
    \   Thus, the solution for CCMP defined in this document is viewed as a\n   good\
    \ compromise amongst the most notable past candidates and is\n   referred to as\
    \ \"HTTP single-verb transport plus CCMP body\".  With\n   this approach, CCMP\
    \ is able to take advantage of existing HTTP\n   functionality.  As with SOAP,\
    \ CCMP uses a \"single HTTP verb\" for\n   transport (i.e., a single transaction\
    \ type for each request/response\n   pair); this allows decoupling CCMP messages\
    \ from HTTP messages.\n   Similarly, as with any RESTful approach, CCMP messages\
    \ are inserted\n   directly in the body of HTTP messages, thus avoiding any unnecessary\n\
    \   processing and communication burden associated with further\n   intermediaries.\
    \  With this approach, no modification to the CCMP\n   messages/operations is\
    \ required to use a different transport\n   protocol.\n"
- title: A.1.  Using SOAP for CCMP
  contents:
  - "A.1.  Using SOAP for CCMP\n   A remote procedure call (RPC) mechanism for CCMP\
    \ could use SOAP\n   (Simple Object Access Protocol [W3C.REC-soap12-part1-20070427]\n\
    \   [W3C.REC-soap12-part2-20070427]), where conferences and the other\n   objects\
    \ are modeled as services with associated operations.\n   Conferences and other\
    \ objects are selected by their own local\n   identifiers, such as email-like\
    \ names for users.  This approach has\n   the advantage that it can easily define\
    \ atomic operations that have\n   well-defined error conditions.\n   All SOAP\
    \ operations would use a single HTTP verb.  While the RESTful\n   approach requires\
    \ the use of a URI for each object, SOAP can use any\n   token.\n"
- title: A.2.  A RESTful Approach for CCMP
  contents:
  - "A.2.  A RESTful Approach for CCMP\n   Conference objects can also be modeled\
    \ as resources identified by\n   URIs, with the basic CRUD operations mapped to\
    \ the HTTP methods POST/\n   PUT for creating objects, GET for reading objects,\
    \ PATCH/POST/PUT for\n   changing objects, and DELETE for deleting them.  Many\
    \ of the objects,\n   such as conferences, already have natural URIs.\n   CCMP\
    \ can be mapped into the CRUD (Create, Read, Update, Delete)\n   design pattern.\
    \  The basic CRUD operations are used to manipulate\n   conference objects, which\
    \ are XML documents containing the\n   information characterizing a specified\
    \ conference instance, be it an\n   active conference or a conference blueprint\
    \ used by the conference\n   server to create new conference instances through\
    \ a simple clone\n   operation.\n   Following the CRUD approach, CCMP could use\
    \ a general-purpose\n   protocol such as HTTP [RFC2616] to transfer domain-specific\
    \ XML-\n   encoded data objects defined in the \"Conference Information Data\n\
    \   Model for Centralized Conferencing\" [RFC6501].\n   Following on the CRUD\
    \ approach, CCMP could follow the well-known REST\n   (REpresentational State\
    \ Transfer) architectural style [REST].  CCMP\n   could map onto the REST philosophy,\
    \ by specifying resource URIs,\n   resource formats, methods supported at each\
    \ URI and status codes that\n   have to be returned when a certain method is invoked\
    \ on a specific\n   URI.  A REST-style approach must ensure sure that all operations\
    \ can\n   be mapped to HTTP operations.\n   The following summarizes the specific\
    \ HTTP method that could be used\n   for each of the CCMP Requests:\n   Retrieve:\
    \ HTTP GET could be used on XCON-URIs, so that clients can\n   obtain data about\
    \ conference objects in the form of XML data model\n   documents.\n   Create:\
    \ HTTP PUT could be used to create a new object as identified\n   by the XCON-URI\
    \ or XCON-USERID.\n   Change: Either HTTP PATCH or HTTP POST could be used to\
    \ change the\n   conference object identified by the XCON-URI.\n   Delete: HTTP\
    \ DELETE could be used to delete conference objects and\n   parameters within\
    \ conference objects identified by the XCON-URI.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Mary Barnes\n   Polycom\n   TX\n   USA\n   EMail: mary.ietf.barnes@gmail.com\n\
    \   Chris Boulton\n   NS-Technologies\n   EMail: chris@ns-technologies.com\n \
    \  Simon Pietro Romano\n   University of Napoli\n   Via Claudio 21\n   Napoli\
    \  80125\n   Italy\n   EMail: spromano@unina.it\n   Henning Schulzrinne\n   Columbia\
    \ University\n   Department of Computer Science\n   450 Computer Science Building\n\
    \   New York, NY  10027\n   EMail: hgs+xcon@cs.columbia.edu\n"
