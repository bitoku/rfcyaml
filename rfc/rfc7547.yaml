- title: __initial_text__
  contents:
  - "            Management of Networks with Constrained Devices:\n              \
    \     Problem Statement and Requirements\n"
- title: Abstract
  contents:
  - "Abstract\n   This document provides a problem statement, deployment and management\n\
    \   topology options, as well as requirements addressing the different\n   use\
    \ cases of the management of networks where constrained devices are\n   involved.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document is not an Internet Standards Track specification;\
    \ it is\n   published for informational purposes.\n   This document is a product\
    \ of the Internet Engineering Task Force\n   (IETF).  It represents the consensus\
    \ of the IETF community.  It has\n   received public review and has been approved\
    \ for publication by the\n   Internet Engineering Steering Group (IESG).  Not\
    \ all documents\n   approved by the IESG are a candidate for any level of Internet\n\
    \   Standard; see Section 2 of RFC 5741.\n   Information about the current status\
    \ of this document, any errata,\n   and how to provide feedback on it may be obtained\
    \ at\n   http://www.rfc-editor.org/info/rfc7547.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2015 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................3\n\
    \      1.1. Overview ...................................................3\n  \
    \    1.2. Terminology ................................................4\n    \
    \  1.3. Network Types and Characteristics in Focus .................5\n      1.4.\
    \ Constrained Device Deployment Options ......................9\n      1.5. Management\
    \ Topology Options ...............................10\n      1.6. Managing the\
    \ Constrainedness of a Device or Network .......10\n      1.7. Configuration and\
    \ Monitoring Functionality Levels .........13\n   2. Problem Statement ..............................................14\n\
    \   3. Requirements on the Management of Networks with\n      Constrained Devices\
    \ ............................................16\n      3.1. Management Architecture/System\
    \ ............................18\n      3.2. Management Protocols and Data Models\
    \ ......................22\n      3.3. Configuration Management ..................................25\n\
    \      3.4. Monitoring Functionality ..................................27\n  \
    \    3.5. Self-Management ...........................................32\n    \
    \  3.6. Security and Access Control ...............................33\n      3.7.\
    \ Energy Management .........................................35\n      3.8. Software\
    \ Distribution .....................................37\n      3.9. Traffic Management\
    \ ........................................37\n      3.10. Transport Layer ..........................................39\n\
    \      3.11. Implementation Requirements ..............................40\n  \
    \ 4. Security Considerations ........................................41\n   5.\
    \ Informative References .........................................42\n   Acknowledgments\
    \ ...................................................44\n   Authors' Addresses\
    \ ................................................44\n"
- title: 1.  Introduction
  contents:
  - '1.  Introduction

    '
- title: 1.1.  Overview
  contents:
  - "1.1.  Overview\n   Constrained devices (also known as sensors, smart objects,\
    \ or smart\n   devices) with limited CPU, memory, and power resources can be\n\
    \   connected to a network.  It might be based on unreliable or lossy\n   channels,\
    \ it may use wireless technologies with limited bandwidth and\n   a dynamic topology,\
    \ or it may need the service of a gateway or proxy\n   to connect to the Internet.\
    \  In other scenarios, the constrained\n   devices can be connected to a unconstrained\
    \ network using off-the-\n   shelf protocol stacks.\n   Constrained devices might\
    \ be in charge of gathering information in\n   diverse settings including natural\
    \ ecosystems, buildings, and\n   factories and sending the information to one\
    \ or more server stations.\n   Constrained devices may also work under severe\
    \ resource constraints\n   such as limited battery and computing power, little\
    \ memory and\n   insufficient wireless bandwidth, and communication capabilities.\
    \  A\n   central entity, e.g., a base station or controlling server, might\n \
    \  have more computational and communication resources and can act as a\n   gateway\
    \ between the constrained devices and the application logic in\n   the core network.\n\
    \   Today, constrained devices of diverse size and with different\n   resources\
    \ and capabilities are being connected.  Mobile personal\n   gadgets, building-automation\
    \ devices, cellular phones, machine-to-\n   machine (M2M) devices, etc., benefit\
    \ from interacting with other\n   \"things\" in the near or somewhere in the Internet.\
    \  With this the\n   Internet of Things (IoT) becomes a reality, built up of uniquely\n\
    \   identifiable objects (things).  And over the next decade, this could\n   grow\
    \ to trillions of constrained devices and will greatly increase\n   the Internet's\
    \ size and scope.\n   Network management is characterized by monitoring network\
    \ status,\n   detecting faults (and inferring their causes), setting network\n\
    \   parameters, and carrying out actions to remove faults, maintain\n   normal\
    \ operation, and improve network efficiency and application\n   performance. \
    \ The traditional network monitoring application\n   periodically collects information\
    \ from a set of managed network\n   elements, it processes the data, and it presents\
    \ the results to the\n   network management users.  Constrained devices, however,\
    \ often have\n   limited power, have low transmission range, and might be unreliable.\n\
    \   They might also need to work in hostile environments with advanced\n   security\
    \ requirements or need to be used in harsh environments for a\n   long time without\
    \ supervision.  Due to such constraints, the\n   management of a network with\
    \ constrained devices faces a different\n   type of challenges compared to the\
    \ management of a traditional IP\n   network.\n   The IETF has already done substantial\
    \ standardization work to enable\n   communication in IP networks and to manage\
    \ such networks as well as\n   the manifold types of nodes in these networks [RFC6632].\
    \  However,\n   the IETF so far has not developed any specific technologies for\
    \ the\n   management of constrained devices and the networks comprised by\n  \
    \ constrained devices.  IP-based sensors or constrained devices in such\n   an\
    \ environment (i.e., devices with very limited memory, CPU, and\n   energy resources)\
    \ nowadays use application-layer protocols in an ad\n   hoc manner to do simple\
    \ resource management and monitoring.\n   This document provides a problem statement\
    \ and lists requirements for\n   the different use cases of management of a network\
    \ with constrained\n   devices.  Sections 1.3 and 1.5 describe different topology\
    \ options\n   for the networking and management of constrained devices.  Section\
    \ 2\n   provides a problem statement on the issue of the management of\n   networked\
    \ constrained devices.  Section 3 lists requirements on the\n   management of\
    \ applications and networks with constrained devices.\n   Note that the requirements\
    \ listed in Section 3 have been separated\n   from the context in which they may\
    \ appear.  Depending on the concrete\n   circumstances, an implementer may decide\
    \ to address a certain\n   relevant subset of the requirements.\n   The use cases\
    \ in the context of networks with constrained devices can\n   be found in [RFC7548].\
    \  This document provides a list of objectives\n   for discussions and does not\
    \ aim to be a strict requirements document\n   for all use cases.  In fact, there\
    \ likely is not a single solution\n   that works equally well for all the use\
    \ cases.\n"
- title: 1.2.  Terminology
  contents:
  - "1.2.  Terminology\n   Concerning constrained devices and networks, this document\
    \ generally\n   builds on the terminology defined in [RFC7228], where the terms\n\
    \   \"constrained device\", \"constrained network\", and others are defined.\n\
    \   Additionally, the following terms are used throughout:\n   AMI:   (Advanced\
    \ Metering Infrastructure) A system including\n          hardware, software, and\
    \ networking technologies that measures,\n          collects, and analyzes energy\
    \ use and that communicates with a\n          hierarchically deployed network\
    \ of metering devices, either on\n          request or on a schedule.\n   C0:\
    \    Class 0 constrained device as defined in Section 3 of\n          [RFC7228].\n\
    \   C1:    Class 1 constrained device as defined in Section 3 of\n          [RFC7228].\n\
    \   C2:    Class 2 constrained device as defined in Section 3 of\n          [RFC7228].\n\
    \   Network of Constrained Devices:  A network to which constrained\n        \
    \  devices are connected that may or may not be a constrained\n          network\
    \ (see [RFC7228] for the definition of the term\n          constrained network).\n\
    \   M2M:   (Machine to Machine) The automatic data transfer between\n        \
    \  devices of different kinds.  In M2M scenarios, a device (such\n          as\
    \ a sensor or meter) captures an event, which is relayed\n          through a\
    \ network (wireless, wired, or hybrid) to an\n          application.\n   MANET:\
    \ (Mobile Ad Hoc Network [RFC2501]) A self-configuring and\n          infrastructureless\
    \ network of mobile devices connected by\n          wireless technologies.\n \
    \  Smart Grid:  An electrical grid that uses communication technologies\n    \
    \      to gather and act on information in an automated fashion to\n         \
    \ improve the efficiency, reliability, and sustainability of the\n          production\
    \ and distribution of electricity.\n   Smart Meter:  An electrical meter in the\
    \ context of a smart grid.\n   For a detailed discussion on the constrained networks\
    \ as well as\n   classes of constrained devices and their capabilities, please\
    \ see\n   [RFC7228].\n"
- title: 1.3.  Network Types and Characteristics in Focus
  contents:
  - "1.3.  Network Types and Characteristics in Focus\n   In this document, we differentiate\
    \ the following types of networks\n   concerning their transport and communication\
    \ technologies:\n   (Note that a network in general can involve constrained and\n\
    \   unconstrained devices.)\n   1.  Wireline unconstrained networks, e.g., an\
    \ Ethernet LAN with\n       constrained and unconstrained devices involved.\n\
    \   2.  A combination of wireline and wireless networks, possibly with a\n   \
    \    multi-hop connectivity between constrained devices, utilizing\n       dynamic\
    \ routing in both the wireless and wireline portions of the\n       network. \
    \ Such networks usually support highly distributed\n       applications with many\
    \ nodes (e.g., environmental monitoring) and\n       tend to deal with large-scale\
    \ multipoint-to-point (MP2P) systems.\n       Wireless Mesh Networks (WMNs), as\
    \ a specific variant, use off-\n       the-shelf radio technology such as Wi-Fi,\
    \ WiMAX, and cellular\n       3G/4G.  WMNs are reliable based on the redundancy\
    \ they offer and\n       have often a more planned deployment to provide dynamic\
    \ and cost\n       effective connectivity over a certain geographic area.\n  \
    \ 3.  A combination of wireline and wireless networks with point-to-\n       point\
    \ (P2P) or point-to-multipoint (P2MP) communication generally\n       with single-hop\
    \ connectivity to constrained devices, utilizing\n       static routing over the\
    \ wireless network.  Such networks support\n       short-range, P2P, low-data-rate,\
    \ source-to-sink types of\n       applications, such as RFID systems, light switches,\
    \ fire/smoke\n       detectors, and home appliances.  This type of network also\n\
    \       supports confined short-range spaces such as a home, a factory, a\n  \
    \     building, or the human body.  [IEEE802.15.1] (Bluetooth) and\n       [IEEE802.15.4]\
    \ are well-known examples of applicable standards\n       for such networks. \
    \ By using 6LoWPANs (IPv6 over Low-Power\n       Wireless Personal Area Networks)\
    \ [RFC4919] and RPL (Routing\n       Protocol for Low-Power and Lossy Networks)\
    \ [RFC6550] on top of\n       IEEE 802.15.4, multi-hop connectivity and dynamic\
    \ routing can be\n       achieved.  With RPL, the IETF has specified a proactive\
    \ \"route-\n       over\" architecture where routing and forwarding is implemented\
    \ at\n       the network layer.  The protocol provides a mechanism whereby\n \
    \      MP2P, P2MP, and P2P traffic are supported.\n   4.  Self-configuring infrastructureless\
    \ networks of mobile devices\n       (e.g., MANET) are a particular type of network\
    \ connected by\n       wireless technologies.  Infrastructureless networks are\
    \ mostly\n       based on P2P communications of devices moving independently in\n\
    \       any direction and changing the links to other devices frequently.\n  \
    \     Such devices do act as a router to forward traffic unrelated to\n      \
    \ their own use.\n   Wireline unconstrained networks with constrained and unconstrained\n\
    \   devices are mainly used for specific applications like Building\n   Automation\
    \ or Infrastructure Monitoring.  Wireline and wireless\n   networks with multi-hop\
    \ or P2MP connectivity are used, e.g., for\n   environmental monitoring as well\
    \ as transport and mobile\n   applications.\n   Furthermore, different network\
    \ characteristics are determined by\n   multiple dimensions: dynamicity of the\
    \ topology, bandwidth, and loss\n   rate.  In the following, each dimension is\
    \ explained, and networks in\n   scope for this document are outlined:\n   Network\
    \ Topology:\n   The topology of a network can be represented as a graph, with\
    \ edges\n   (i.e., links) and vertices (routers and hosts).  Examples of\n   different\
    \ topologies include \"star\" topologies (with one central node\n   and multiple\
    \ nodes in one-hop distance), tree structures (with each\n   node having exactly\
    \ one parent), directed acyclic graphs (with each\n   node having one or more\
    \ parents), clustered topologies (where one or\n   more \"cluster heads\" are\
    \ responsible for a certain area of the\n   network), mesh topologies (fully distributed),\
    \ etc.\n   Management protocols may take advantage of specific network\n   topologies,\
    \ for example, by distributing large-scale management tasks\n   amongst multiple\
    \ distributed network management stations (e.g., in\n   case of a mesh topology),\
    \ or by using a hierarchical management\n   approach (e.g., in case of a tree\
    \ or clustered topology).  These\n   different management topology options are\
    \ described in Section 1.6.\n   Note that in certain network deployments, such\
    \ as community ad hoc\n   networks (see the use case \"Community Network Applications\"\
    \ in\n   [RFC7548]), the topology is not preplanned; thus, it may be unknown\n\
    \   for management purposes.  In other use cases, such as industrial\n   applications\
    \ (see the use case \"Industrial Applications\" in\n   [RFC7548]), the topology\
    \ may be designed in advance and therefore\n   taken advantage of when managing\
    \ the network.\n   Dynamicity of the network topology:\n   The dynamicity of the\
    \ network topology determines the rate of change\n   of the graph as a function\
    \ of time.  Such changes can occur due to\n   different factors, such as mobility\
    \ of nodes (e.g., in MANETs or\n   cellular networks), duty cycles (for low-power\
    \ devices enabling their\n   network interface only periodically to transmit or\
    \ receive packets),\n   or unstable links (in particular wireless links with strongly\n\
    \   fluctuating link quality).\n   Examples of different levels of dynamicity\
    \ of the topology are\n   Ethernets (with typically a very static topology) on\
    \ the one side,\n   and Low-power and Lossy Networks (LLNs) on the other side.\
    \  LLNs\n   nodes are often duty-cycled and operate on unreliable wireless links\n\
    \   and are potentially mobile (e.g., for sensor networks).\n   The more dynamic\
    \ the topology is, the more have routing, transport\n   and application-layer\
    \ protocols to cope with interrupted connectivity\n   and/or longer delays.  For\
    \ example, management protocols (with a\n   given underlying transport protocol)\
    \ that expect continuous session\n   flows without changes of routes during a\
    \ communication flow, may fail\n   to operate.\n   Networks with a very low dynamicity\
    \ (e.g., Ethernet) with no or\n   infrequent topology changes (e.g., less than\
    \ once every 30 minutes),\n   are in the scope of this document if they are used\
    \ with constrained\n   devices (see, e.g., the use case \"Building Automation\"\
    \ in [RFC7548]).\n   Traffic flows:\n   The traffic flow in a network determines\
    \ from which sources data\n   traffic is sent to which destinations in the network.\
    \  Several\n   different traffic flows are defined in [RFC7102], including P2P,\n\
    \   MP2P, and P2MP flows as:\n   o  P2P: Point-to-point refers to traffic exchanged\
    \ between two nodes\n      (regardless of the number of hops between the two nodes).\n\
    \   o  P2MP: Point-to-multipoint traffic refers to traffic between one\n     \
    \ node and a set of nodes.  This is similar to the P2MP concept in\n      Multicast\
    \ or MPLS Traffic Engineering.\n   o  MP2P: Multipoint-to-point is used to describe\
    \ a particular traffic\n      pattern (e.g., MP2P flows collecting information\
    \ from many nodes\n      flowing inwards towards a collecting sink).\n   If one\
    \ of these traffic patterns is predominant in a network,\n   protocols (routing,\
    \ transport, application) may be optimized for the\n   specific traffic flow.\
    \  For example, in a network with a tree\n   topology and MP2P traffic, collection\
    \ tree protocols are efficient to\n   send data from the leaves of the tree to\
    \ the root of the tree, via\n   each node's parent.\n   Bandwidth:\n   The bandwidth\
    \ of the network is the amount of data that can be sent\n   per unit of time between\
    \ two communication endpoints.  It is usually\n   determined by the link with\
    \ the minimum bandwidth on the path from\n   the source to the destination of\
    \ data packets.  The bandwidth in\n   networks can range from a few kilobytes\
    \ per second (such as on some\n   IEEE 802.15.4 link layers) to many gigabytes\
    \ per second (e.g., on\n   fiber optics).\n   For management purposes, the management\
    \ protocol typically requires\n   the sending of information between the network\
    \ management station and\n   the clients, for monitoring or control purposes.\
    \  If the available\n   bandwidth is insufficient for the management protocol,\
    \ packets will\n   be buffered and eventually dropped; thus, management is not\
    \ possible\n   with such a protocol.\n   Networks without bandwidth limitation\
    \ (e.g., Ethernet) are in the\n   scope of this document if they are used with\
    \ constrained devices (see\n   the use case \"Building Automation\" in [RFC7548]).\n\
    \   Loss rate:\n   The loss rate (or bit error rate) is the number of bit errors\
    \ divided\n   by the total number of bits transmitted.  For wired networks, loss\n\
    \   rates are typically extremely low, e.g., around 10^-12 or 10^-13 for\n   the\
    \ latest 10 Gbit Ethernet.  For wireless networks, such as IEEE\n   802.15.4,\
    \ the bit error rate can be as high as 10^-1 to 1 in case of\n   interferences.\
    \  Even when using a reliable transport protocol,\n   management operations can\
    \ fail if the loss rate is too high, unless\n   they are specifically designed\
    \ to cope with these situations.\n"
- title: 1.4.  Constrained Device Deployment Options
  contents:
  - "1.4.  Constrained Device Deployment Options\n   We differentiate the following\
    \ deployment options for the constrained\n   devices:\n   o  A network of constrained\
    \ devices that communicate with each other,\n   o  Constrained devices that are\
    \ connected directly to an IP network,\n   o  A network of constrained devices\
    \ that communicate with a gateway\n      or proxy with more communication capabilities\
    \ possibly acting as a\n      representative of the device to entities in the\
    \ unconstrained\n      network,\n   o  Constrained devices that are connected\
    \ to the Internet or an IP\n      network via a gateway/proxy,\n   o  A hierarchy\
    \ of constrained devices, e.g., a network of C0 devices\n      connected to one\
    \ or more C1 devices -- connected to one or more C2\n      devices -- connected\
    \ to one or more gateways -- connected to some\n      application servers or NMS,\
    \ and\n   o  The possibility of device grouping (possibly in a dynamic manner)\n\
    \      such as that the grouped devices can act as one logical device at\n   \
    \   the edge of the network and one device in this group can act as\n      the\
    \ managing entity.\n"
- title: 1.5.  Management Topology Options
  contents:
  - "1.5.  Management Topology Options\n   We differentiate the following options\
    \ for the management of networks\n   of constrained devices:\n   o  A network\
    \ of constrained devices managed by one central manager.\n      A logically centralized\
    \ management might be implemented in a\n      hierarchical fashion for scalability\
    \ and robustness reasons.  The\n      manager and the management application logic\
    \ might have a gateway/\n      proxy in between or might be on different nodes\
    \ in different\n      networks, e.g., management application running on a cloud\
    \ server.\n   o  Distributed management, where a network of constrained devices\
    \ is\n      managed by more than one manager.  Each manager controls a\n     \
    \ subnetwork and may communicate directly with other manager\n      stations in\
    \ a cooperative fashion.  The distributed management may\n      be weakly distributed,\
    \ where functions are broken down and\n      assigned to many managers dynamically,\
    \ or strongly distributed,\n      where almost all managed things have embedded\
    \ management\n      functionality and explicit management disappears, which usually\n\
    \      comes with the price that the strongly distributed management\n      logic\
    \ now needs to be managed.\n   o  Hierarchical management, where a hierarchy of\
    \ networks with\n      constrained devices are managed by the managers at their\n\
    \      corresponding hierarchy level.  That is, each manager is\n      responsible\
    \ for managing the nodes in its subnetwork.  It passes\n      information from\
    \ its subnetwork to its higher-level manager and\n      disseminates management\
    \ functions received from the higher-level\n      manager to its subnetwork. \
    \ Hierarchical management is essentially\n      a scalability mechanism, logically\
    \ the decision-making may be\n      still centralized.\n"
- title: 1.6.  Managing the Constrainedness of a Device or Network
  contents:
  - "1.6.  Managing the Constrainedness of a Device or Network\n   The capabilities\
    \ of a constrained device or network and the\n   constrainedness thereof influence\
    \ and have an impact on the\n   requirements for the management of such a network\
    \ or devices.\n   Note that the list below gives examples and does not claim\n\
    \   completeness.\n   A constrained device:\n   o  might only support an unreliable\
    \ (e.g., lossy) radio link, i.e.,\n      the client and server of a management\
    \ protocol need to gracefully\n      handle incomplete command exchanges or missing\
    \ commands.\n   o  might only be able to go online from time to time, where it\
    \ is\n      reachable, i.e., a command might be necessary to repeat after a\n\
    \      longer timeout or the timeout value with which one endpoint waits\n   \
    \   on a response needs to be sufficiently high.\n   o  might only be able to\
    \ support a limited operating time (e.g.,\n      based on the available battery)\
    \ or may behave as 'sleepy\n      endpoints', setting their network links to a\
    \ disconnected state\n      during long periods of time, i.e., the devices need\
    \ to economize\n      their energy usage with suitable mechanisms and the managing\n\
    \      entity needs to monitor and control the energy status of the\n      constrained\
    \ devices it manages.\n   o  might only be able to support one simple communication\
    \ protocol,\n      i.e., the management protocol needs to be possible to downscale\n\
    \      from constrained (C2) to very constrained (C0) devices with\n      modular\
    \ implementation and a very basic version with just a few\n      simple commands.\n\
    \   o  might only be able to support a communication protocol, which is\n    \
    \  not IP based.\n   o  might only be able to support limited or no user and/or\
    \ transport\n      security, i.e., the management system needs to support a less-\n\
    \      costly and simple but sufficiently secure authentication\n      mechanism.\n\
    \   o  might not be able to support compression and decompression of\n      exchanged\
    \ data based on limited CPU power, i.e., an intermediary\n      entity which is\
    \ capable of data compression should be able to\n      communicate with both,\
    \ devices that support data compression\n      (e.g., C2) and devices that do\
    \ not support data compression (e.g.,\n      C1 and C0).\n   o  might only be\
    \ able to support a simple encryption, i.e., it would\n      be beneficial if\
    \ the devices use cryptographic algorithms that are\n      supported in hardware\
    \ and the encryption used is efficient in\n      terms of memory and CPU usage.\n\
    \   o  might only be able to communicate with one single managing entity\n   \
    \   and cannot support the parallel access of many managing entities.\n   o  might\
    \ depend on a self-configuration feature, i.e., the managing\n      entity might\
    \ not know all devices in a network and the device\n      needs to be able to\
    \ initiate connection setup for the device\n      configuration.\n   o  might\
    \ depend on self- or neighbor-monitoring features, i.e., the\n      managing entity\
    \ might not be able to monitor all devices in a\n      network continuously.\n\
    \   o  might only be able to communicate with its neighbors, i.e., the\n     \
    \ device should be able to get its configuration from a neighbor.\n   o  might\
    \ only be able to support parsing of data models with limited\n      size, i.e.,\
    \ the device data models need to be compact containing\n      the most necessary\
    \ data and if possible parsable as a stream.\n   o  might only be able to support\
    \ a limited or no-failure detection,\n      i.e., the managing entity needs to\
    \ handle the situation, where a\n      failure does not get detected or gets detected\
    \ late gracefully,\n      e.g., with asking repeatedly.\n   o  might only be able\
    \ to support the reporting of just one or a\n      limited set failure types.\n\
    \   o  might only be able to support a limited set of notifications,\n      possible\
    \ only an \"I am alive.\" message.\n   o  might only be able to support a soft-reset\
    \ from failure recovery.\n   o  might possibly generate a large amount of redundant\
    \ reporting\n      data, i.e., the intermediary management entity (see [RFC7252])\n\
    \      should be able to filter and aggregate redundant data.\n   A network of\
    \ constrained devices:\n   o  might only support an unreliable (e.g., lossy) radio\
    \ link, i.e.,\n      the client and server of a management protocol need to repeat\n\
    \      commands as necessary or gracefully ignore incomplete commands.\n   o \
    \ might be necessary to manage based on multicast communication,\n      i.e.,\
    \ the managing entity needs to be prepared to configure many\n      devices at\
    \ once based on the same data model.\n   o  might have a very large topology supporting\
    \ 10,000 or more nodes\n      for some applications and as such node naming is\
    \ a specific issue\n      for constrained networks.\n   o  needs to support self-organization,\
    \ i.e., given the large number\n      of nodes and their potential placement in\
    \ hostile locations and\n      frequently changing topology, manual configuration\
    \ of nodes is\n      typically not feasible.  As such, the network would benefit\
    \ from\n      the ability to reconfigure itself so that it can continue to\n \
    \     operate properly and support reliable connectivity.\n   o  might need a\
    \ management solution that is energy efficient, using\n      as little wireless\
    \ bandwidth as possible since communication is\n      highly energy demanding.\n\
    \   o  needs to support localization schemes to determine the location of\n  \
    \    devices since the devices might be moving and location information\n    \
    \  is important for some applications.\n   o  needs a management solution that\
    \ is scalable as the network may\n      consist of thousands of nodes and may\
    \ need to be extended\n      continuously.\n   o  needs to provide fault tolerance.\
    \  Faults in network operation\n      including hardware and software errors or\
    \ failures detected by the\n      transport protocol should be handled smoothly.\
    \  In such a case, it\n      should be possible to run the protocol at a reduced\
    \ level but\n      avoid failing completely.  For example, self-monitoring mechanisms\n\
    \      or graceful degradation of features can be used to provide fault\n    \
    \  tolerance.\n   o  might require new management capabilities, for example, network\n\
    \      coverage information and a constrained device power distribution\n    \
    \  map.\n   o  might require a new management function for data management, since\n\
    \      the type and amount of data collected in constrained networks is\n    \
    \  different from those of the traditional networks.\n   o  might also need energy-efficient\
    \ key management.\n"
- title: 1.7.  Configuration and Monitoring Functionality Levels
  contents:
  - "1.7.  Configuration and Monitoring Functionality Levels\n   Devices often differ\
    \ significantly on the level of configuration\n   management support they provide.\
    \  This document classifies the\n   configuration management functionality as\
    \ follows:\n   CL0:  Devices are preconfigured and allow no runtime configuration\n\
    \         changes.  Configuration parameters are often hard coded and\n      \
    \   compiled directly into the firmware image.\n   CL1:  Devices have explicit\
    \ configuration objects.  However, changes\n         require a restart of the\
    \ device to take effect.\n   CL2:  Devices allow management systems to replace\
    \ the entire\n         configuration (or predetermined subsets) in bulk.\n   \
    \      Configuration changes take effect by soft-restarts of the\n         system\
    \ (or subsystems).\n   CL3:  Devices allow management systems to modify configuration\n\
    \         objects without bulk replacements and changes take effect\n        \
    \ immediately.\n   CL4:  Devices support multiple configuration datastores and\
    \ they\n         might distinguish between the currently running and the next\n\
    \         startup configuration.\n   CL5:  Devices support configuration datastore\
    \ locking and device-\n         local configuration change transactions, i.e.,\
    \ either all\n         configuration changes are applied or none of them are.\n\
    \   CL6:  Devices support configuration change transactions across\n         devices.\n\
    \   This document defines a classification of devices with regard to\n   different\
    \ levels of monitoring support.  In general, a device may be\n   in several of\
    \ the levels listed below:\n   ML0:  Devices push predefined monitoring data.\n\
    \   ML1:  Devices allow management systems to pull predefined monitoring\n   \
    \      data.\n   ML2:  Devices allow management systems to pull user-defined filtered\n\
    \         subsets of monitoring data.\n   ML3:  Devices are able to locally process\
    \ monitoring data in order to\n         detect threshold crossings or to aggregate\
    \ data.\n   At the time of this writing, constrained devices often implement a\n\
    \   combination of one of CL0-CL2 with one of ML0-ML1.\n"
- title: 2.  Problem Statement
  contents:
  - "2.  Problem Statement\n   The terminology for the \"Internet of Things\" is still\
    \ nascent, and\n   depending on the network type or layer in focus, diverse technologies\n\
    \   and terms are in use.  Common to all these considerations is the\n   \"Things\"\
    \ or \"Objects\" are supposed to have physical or virtual\n   identities using\
    \ interfaces to communicate.  In this context, we need\n   to differentiate between\
    \ the constrained and smart devices identified\n   by an IP address compared to\
    \ virtual entities such as Smart Objects,\n   which can be identified as a resource\
    \ or a virtual object by using a\n   unique identifier.  Furthermore, the smart\
    \ devices usually have\n   limited memory and CPU power as well as aim to be self-configuring\n\
    \   and easy to deploy.\n   However, the constraints of the network nodes require\
    \ a rethinking of\n   the protocol characteristics concerning power consumption,\n\
    \   performance, bandwidth consumption, memory, and CPU usage.  As such,\n   there\
    \ is a demand for protocol simplification, energy-efficient\n   communication,\
    \ less CPU usage, and a smaller memory footprint.\n   On the application layer,\
    \ the IETF is already developing protocols\n   like the Constrained Application\
    \ Protocol (CoAP) [RFC7252] enabling\n   the communication of constrained devices\
    \ and networks, e.g., for\n   smart energy applications or home automation environments.\
    \  In fact,\n   the deployment of such an environment involves many, in some\n\
    \   scenarios up to million, constrained devices (e.g., smart meters),\n   which\
    \ produce a large amount of data.  This data needs to be\n   collected, filtered,\
    \ and preprocessed for further use in diverse\n   services.\n   Considering the\
    \ high number of nodes to deploy, one has to think\n   about the manageability\
    \ aspects of the smart devices and plan for\n   easy deployment, configuration,\
    \ and management of the networks of\n   constrained devices as well as the devices\
    \ themselves.  Consequently,\n   seamless monitoring and self-configuration of\
    \ such network nodes\n   becomes more and more imperative.  Self-configuration\
    \ and self-\n   management are already a reality in the standards of some\n  \
    \ organizations such as 3GPP.  To introduce self-configuration of smart\n   devices\
    \ successfully, a device-initiated connection establishment is\n   often required.\n\
    \   A simple and efficient application-layer protocol, such as CoAP, is\n   essential\
    \ to address the issue of efficient object-to-object\n   communication and information\
    \ exchange.  Such an information exchange\n   should be done based on interoperable\
    \ data models to enable the\n   exchange and interpretation of diverse application-\
    \ and management-\n   related data.\n   In an ideal world, we would have only\
    \ one network management protocol\n   for monitoring, configuration, and exchanging\
    \ management data,\n   independently of the type of the network (e.g., smart grid,\
    \ wireless\n   access, or core network).  Furthermore, it would be desirable to\n\
    \   derive the basic data models for constrained devices from the core\n   models\
    \ used today to enable reuse of functionality and end-to-end\n   information exchange.\
    \  However, the current management protocols seem\n   to be too heavyweight compared\
    \ to the capabilities the constrained\n   devices have and are not applicable\
    \ directly for use in a network of\n   constrained devices.  Furthermore, the\
    \ data models addressing the\n   requirements of such smart devices need yet to\
    \ be designed.\n   So far, the IETF has not developed any specific technologies\
    \ for the\n   management of constrained devices and the networks comprised by\n\
    \   constrained devices.  IP-based sensors or constrained devices in such\n  \
    \ an environment, i.e., today, devices with very limited memory and CPU\n   resources\
    \ use, e.g., application-layer protocols to do simple\n   resource management\
    \ and monitoring.  This might be sufficient for\n   some basic cases; however,\
    \ there is a need to reconsider the network\n   management mechanisms based on\
    \ the new, changed, and reduced\n   requirements coming from smart devices and\
    \ the network of such\n   constrained devices.  Although it is questionable whether\
    \ we can take\n   the same comprehensive approach we use in an IP network and\
    \ use it\n   for the management of constrained devices.  Hence, the management\
    \ of\n   a network with constrained devices is necessarily designed in a\n   simplified\
    \ and less complex manner.\n   As Section 1.6 highlights, there are diverse characteristics\
    \ of\n   constrained devices or networks, which stem from their\n   constrainedness\
    \ and therefore have an impact on the requirements for\n   the management of such\
    \ a network with constrained devices.  The use\n   cases discussed in [RFC7548]\
    \ show that the requirements on\n   constrained networks are manifold and need\
    \ to be analyzed from\n   different angles, e.g., concerning the design of the\
    \ management\n   architecture, the selection of the appropriate protocol features,\
    \ as\n   well as the specific issues that are new in the context of\n   constrained\
    \ devices.  Examples of such issues are careful management\n   of scarce energy\
    \ resources, the necessity for self-organization and\n   self-management of such\
    \ devices but also the implementation\n   considerations to enable the use of\
    \ common communication technologies\n   on a constrained hardware in an efficient\
    \ manner.  For an exhaustive\n   list of issues and requirements that need to\
    \ be addressed for the\n   management of a network with constrained devices, please\
    \ see Sections\n   1.6 and 3.\n"
- title: 3.  Requirements on the Management of Networks with Constrained Devices
  contents:
  - "3.  Requirements on the Management of Networks with Constrained Devices\n   This\
    \ section describes the requirements categorized by management\n   areas listed\
    \ in subsections.\n   Note that the requirements listed in this section have been\
    \ separated\n   from the context in which they may appear.  In general, this document\n\
    \   does not recommend the realization of any subset of the described\n   requirements.\
    \  As such, this document avoids selecting any of the\n   requirements as mandatory\
    \ to implement.  A device might be able to\n   provide only a particular selected\
    \ set of requirements and might not\n   be capable to provide all requirements\
    \ in this document.  On the\n   other hand, a device vendor might select a specific\
    \ relevant subset\n   of the requirements to implement.\n   The following template\
    \ is used for the definition of the\n   requirements.\n   Req-ID:  An ID composed\
    \ of two numbers: a section number indicating\n      the topic area and a unique\
    \ three-digit number per section.\n   Title:  The title of the requirement.\n\
    \   Description:  The rationale and description of the requirement.\n   Source:\
    \  The origin of the requirement and the matching use case or\n      application.\
    \  For the discussion of referred use cases for\n      constrained management,\
    \ please see [RFC7548].\n   Requirement Type:  Functional Requirement, Non-functional\n\
    \      Requirement.  A functional requirement is related to a function or\n  \
    \    component.  As such, functional requirements may be technical\n      details\
    \ or specific functionality that define what a system is\n      supposed to accomplish.\
    \  Non-functional requirements (also known\n      as design constraints or quality\
    \ requirements) impose\n      implementation-related considerations such as performance\n\
    \      requirements, security, or reliability.\n   Device type:  The device types\
    \ by which this requirement can be\n      supported: C0, C1, and/or C2.\n   Priority:\
    \  The priority of the requirement showing its importance for\n      a particular\
    \ type of device: High, Medium, and Low.  The priority\n      of a requirement\
    \ can be High, e.g., for a C2 device, but Low for a\n      C1 or C0 device, as\
    \ the realization of complex features in a C1\n      device is in many cases not\
    \ possible.\n"
- title: 3.1.  Management Architecture/System
  contents:
  - "3.1.  Management Architecture/System\n   Req-ID:  1.001\n   Title:  Support multiple\
    \ device classes within a single network\n   Description:  Larger networks usually\
    \ consist of devices belonging to\n      different device classes (e.g., constrained\
    \ mesh endpoints and\n      less constrained routers) communicating with each\
    \ other.  Hence,\n      the management architecture must be applicable to networks\
    \ that\n      have a mix of different device classes.  See Section 3 of\n    \
    \  [RFC7228] for the definition of Constrained Device Classes.\n   Source:  All\
    \ use cases\n   Requirement Type:  Non-functional Requirement\n   Device type:\
    \  C1 and/or C2\n   Priority:  High\n   ---\n   Req-ID:  1.002\n   Title:  Management\
    \ scalability\n   Description:  The management architecture must be able to scale\
    \ with\n      the number of devices involved and operate efficiently in any\n\
    \      network size and topology.  This implies that, e.g., the managing\n   \
    \   entity is able to handle large amounts of device monitoring data\n      and\
    \ the management protocol is not sensitive to the decrease of\n      the time\
    \ between two client requests.  To achieve good\n      scalability, caching techniques,\
    \ in-network data aggregation\n      techniques, and hierarchical management models\
    \ may be used.\n   Source:  General requirement for all use cases to enable large-scale\n\
    \      networks\n   Requirement Type:  Non-functional Requirement\n   Device type:\
    \  C0, C1, and C2\n   Priority:  High\n   ---\n   Req-ID:  1.003\n   Title:  Hierarchical\
    \ management\n   Description:  Provide a means of hierarchical management, i.e.,\n\
    \      provide intermediary management entities on different levels,\n      which\
    \ can take over the responsibility for the management of a\n      subhierarchy\
    \ of the network of constraint devices.  The\n      intermediary management entity\
    \ can, e.g., support management data\n      aggregation to handle, e.g., high-frequent\
    \ monitoring data or\n      provide a caching mechanism for the uplink and downlink\n\
    \      communication.  Hierarchical management contributes to management\n   \
    \   scalability.\n   Source:  Use cases where a large amount of devices are deployed\
    \ with\n      a hierarchical topology\n   Requirement Type:  Non-functional Requirement\n\
    \   Device type:  Managing and intermediary entities\n   Priority:  Medium\n \
    \  ---\n   Req-ID:  1.004\n   Title:  Minimize state maintained on constrained\
    \ devices\n   Description:  The amount of state that needs to be maintained on\n\
    \      constrained devices should be minimized.  This is important in\n      order\
    \ to save memory (especially relevant for C0 and C1 devices)\n      and in order\
    \ to allow devices to restart, for example, to apply\n      configuration changes\
    \ or to recover from extended periods of\n      inactivity.\n   Note:  One way\
    \ to achieve this is to adopt a RESTful architecture\n      that minimizes the\
    \ amount of state maintained by managed\n      constrained devices and that makes\
    \ resources of a device\n      addressable via URIs.\n   Source:  Basic requirement\
    \ that concerns all use cases\n   Requirement Type:  Functional Requirement\n\
    \   Device type:  C0, C1, and C2\n   Priority:  High\n   ---\n   Req-ID:  1.005\n\
    \   Title:  Automatic resynchronization with eventual consistency\n   Description:\
    \  To support large scale networks, where some constrained\n      devices may\
    \ be offline at any point in time, it is necessary to\n      distribute configuration\
    \ parameters in a way that allows temporary\n      inconsistencies but eventually\
    \ converges, after a sufficiently\n      long period of time without further changes,\
    \ towards global\n      consistency.\n   Source:  Use cases with large-scale networks\
    \ with many devices\n   Requirement Type:  Functional Requirement\n   Device type:\
    \  C0, C1, and C2\n   Priority:  High\n   ---\n   Req-ID:  1.006\n   Title:  Support\
    \ for lossy links and unreachable devices\n   Description:  Some constrained devices\
    \ will only be able to support\n      lossy and unreliable links characterized\
    \ by a limited data rate, a\n      high latency, and a high transmission error\
    \ rate.  Furthermore,\n      constrained devices often duty cycle their radio\
    \ or the whole\n      device in order to save energy.  Some classes of devices\
    \ labeled\n      as 'sleepy endpoints' set their network links to a disconnected\n\
    \      state during long periods of time.  In all cases, the management\n    \
    \  system must not assume that constrained devices are always\n      reachable.\n\
    \   Source:  Basic requirement for networks of constrained devices with\n    \
    \  unreliable links and constrained devices that sleep to save energy\n   Requirement\
    \ Type:  Non-functional Requirement\n   Device type:  C0, C1, and C2\n   Priority:\
    \  High\n   ---\n   Req-ID:  1.007\n   Title:  Network-wide configuration\n  \
    \ Description:  Provide means by which the behavior of the network can\n     \
    \ be specified at a level of abstraction (network-wide\n      configuration) higher\
    \ than a set of configuration information\n      specific to individual devices.\
    \  It is useful to derive the\n      device-specific configuration from the network-wide\
    \ configuration.\n      Such a repository can be used to configure predefined\
    \ device or\n      protocol parameters for the whole network.  Furthermore, such\
    \ a\n      network-wide view can be used to monitor and manage a group of\n  \
    \    routers or a whole network.  For example, monitoring the\n      performance\
    \ of a network requires information additional to what\n      can be acquired\
    \ from a single router using a management protocol.\n   Note:  The identification\
    \ of the relevant subset of the policies to\n      be provisioned is according\
    \ to the capabilities of each device and\n      can be obtained from a preconfigured\
    \ data-repository.\n   Source:  In general, all use cases of network and device\n\
    \      configuration based on a network view in a top-down manner\n   Requirement\
    \ Type:  Non-functional Requirement\n   Device type:  C0, C1, and C2\n   Priority:\
    \  Medium\n   ---\n   Req-ID:  1.008\n   Title:  Distributed management\n   Description:\
    \  Provide a means of simple distributed management, where\n      a network of\
    \ constrained devices can be managed or monitored by\n      more than one manager.\
    \  Since the connectivity to a server cannot\n      be guaranteed at all times,\
    \ a distributed approach may provide\n      higher reliability, at the cost of\
    \ increased complexity.  This\n      requirement implies the handling of data\
    \ consistency in case of\n      concurrent read and write access to the device\
    \ datastore.  It\n      might also happen that no management (configuration) server\
    \ is\n      accessible and the only reachable node is a peer device.  In this\n\
    \      case, the device should be able to obtain its configuration from\n    \
    \  peer devices.\n   Source:  Use cases where the count of devices to manage is\
    \ high\n   Requirement Type:  Non-functional Requirement\n   Device type:  C1\
    \ and C2\n   Priority:  Medium\n"
- title: 3.2.  Management Protocols and Data Models
  contents:
  - "3.2.  Management Protocols and Data Models\n   Req-ID:  2.001\n   Title:  Modular\
    \ implementation of management protocols\n   Description:  Management protocols\
    \ should be specified to allow for\n      modular implementations, i.e., it should\
    \ be possible to implement\n      only a basic set of protocol primitives on highly\
    \ constrained\n      devices, while devices with additional resources may provide\
    \ more\n      support for additional protocol primitives.  See Section 1.7 for\
    \ a\n      discussion on the level of configuration management and monitoring\n\
    \      support constrained devices may provide.\n   Source:  Basic requirement\
    \ interesting for all use cases\n   Requirement Type:  Non-functional Requirement\n\
    \   Device type:  C0, C1, and C2\n   Priority:  High\n   ---\n   Req-ID:  2.002\n\
    \   Title:  Compact encoding of management data\n   Description:  The encoding\
    \ of management data should be compact and\n      space efficient, enabling small\
    \ message sizes.\n   Source:  General requirement to save memory for the receiver\
    \ buffer\n      and on-air bandwidth\n   Requirement Type:  Functional Requirement\n\
    \   Device type:  C0, C1, and C2\n   Priority:  High\n   ---\n   Req-ID:  2.003\n\
    \   Title:  Compression of management data or complete messages\n   Description:\
    \  Management data exchanges can be further optimized by\n      applying data\
    \ compression techniques or delta encoding techniques.\n      Compression typically\
    \ requires additional code size and some\n      additional buffers and/or the\
    \ maintenance of some additional state\n      information.  For C0 devices, compression\
    \ may not be feasible.\n   Source:  Use cases where it is beneficial to reduce\
    \ transmission time\n      and bandwidth, e.g., mobile applications that require\
    \ saving on-\n      air bandwidth\n   Requirement Type:  Functional Requirement\n\
    \   Device type:  C1 and C2\n   Priority:  Medium\n   ---\n   Req-ID:  2.004\n\
    \   Title:  Mapping of management protocol interactions\n   Description:  It is\
    \ desirable to have a lossless automated mapping\n      between the management\
    \ protocol used to manage constrained devices\n      and the management protocols\
    \ used to manage regular devices.  In\n      the ideal case, the same core management\
    \ protocol can be used with\n      certain restrictions taking into account the\
    \ resource limitations\n      of constrained devices.  However, for very resource-constrained\n\
    \      devices, this goal might not be achievable.\n   Source:  Use cases where\
    \ high-frequency interaction with the\n      management system of a unconstrained\
    \ network is required\n   Requirement Type:  Functional Requirement\n   Device\
    \ type:  C1 and C2\n   Priority:  Medium\n   ---\n   Req-ID:  2.005\n   Title:\
    \  Consistency of data models with the underlying information\n      model\n \
    \  Description:  The data models used by the management protocol must be\n   \
    \   consistent with the information model used to define data models\n      for\
    \ unconstrained networks.  This is essential to facilitate the\n      integration\
    \ of the management of constrained networks with the\n      management of unconstrained\
    \ networks.  Using an underlying\n      information model for future data model\
    \ design enables further\n      top-down model design and model reuse as well\
    \ as data\n      interoperability (i.e., exchange of management information between\n\
    \      the constrained and unconstrained networks).  This is a strong\n      requirement,\
    \ despite the fact that the underlying information\n      models are often not\
    \ explicitly documented in the IETF.\n   Source:  General requirement to support\
    \ data interoperability,\n      consistency, and model reuse\n   Requirement Type:\
    \  Non-functional Requirement\n   Device type:  C0, C1, and C2\n   Priority: \
    \ High\n   ---\n   Req-ID:  2.006\n   Title:  Lossless mapping of management data\
    \ models\n   Description:  It is desirable to have a lossless automated mapping\n\
    \      between the management data models used to manage regular devices\n   \
    \   and the management data models used for managing constrained\n      devices.\
    \  In the ideal case, the same core data models can be used\n      with certain\
    \ restrictions taking into account the resource\n      limitations of constrained\
    \ devices.  However, for very resource-\n      constrained devices, this goal\
    \ might not be achievable.\n   Source:  Use cases where consistent data exchange\
    \ with the management\n      system of a unconstrained network is required\n \
    \  Requirement Type:  Functional Requirement\n   Device type:  C2\n   Priority:\
    \  Medium\n   ---\n   Req-ID:  2.007\n   Title:  Protocol extensibility\n   Description:\
    \  Provide means of extensibility for the management\n      protocol, i.e., by\
    \ adding new protocol messages or mechanisms that\n      can deal with changing\
    \ requirements on a supported message and\n      data types effectively, without\
    \ causing interoperability problems\n      or having to replace/update large amount\
    \ of deployed devices.\n   Source:  Basic requirement useful for all use cases\n\
    \   Requirement Type:  Functional Requirement\n   Device type:  C0, C1, and C2\n\
    \   Priority:  High\n"
- title: 3.3.  Configuration Management
  contents:
  - "3.3.  Configuration Management\n   Req-ID:  3.001\n   Title:  Self-configuration\
    \ capability\n   Description:  Automatic configuration and reconfiguration of\
    \ devices\n      without manual intervention.  Compared to the traditional\n \
    \     management of devices where the management application is the\n      central\
    \ entity configuring the devices, in the autoconfiguration\n      scenario the\
    \ device is the active part and initiates the\n      configuration process.  Self-configuration\
    \ can be initiated during\n      the initial configuration or for subsequent configurations,\
    \ where\n      the configuration data needs to be refreshed.  Self-configuration\n\
    \      should be also supported during the initialization phase or in the\n  \
    \    event of failures, where prior knowledge of the network topology\n      is\
    \ not available or the topology of the network is uncertain.\n   Source:  In general,\
    \ all use cases requiring easy deployment and\n      plug&play behavior as well\
    \ as easy maintenance of many constrained\n      devices\n   Requirement Type:\
    \  Functional Requirement\n   Device type:  C0, C1, and C2\n   Priority:  High\
    \ for device categories C0 and C1; Medium for C2\n   ---\n   Req-ID:  3.002\n\
    \   Title:  Capability discovery\n   Description:  Enable the discovery of supported\
    \ optional management\n      capabilities of a device and their exposure via at\
    \ least one\n      protocol and/or data model.\n   Source:  Use cases where the\
    \ device interaction with other devices or\n      applications is a function of\
    \ the level of support for its\n      capabilities\n   Requirement Type:  Functional\
    \ Requirement\n   Device type:  C1 and C2\n   Priority:  Medium\n   ---\n   Req-ID:\
    \  3.003\n   Title:  Asynchronous transaction support\n   Description:  Provide\
    \ configuration management with asynchronous\n      (event-driven) transaction\
    \ support.  Configuration operations must\n      support a transactional model,\
    \ with asynchronous indications that\n      the transaction was completed.\n \
    \  Source:  Use cases that require transaction-oriented processing\n      because\
    \ of reliability or distributed architecture functional\n      requirements\n\
    \   Requirement Type:  Functional Requirement\n   Device type:  C1 and C2\n  \
    \ Priority:  Medium\n   ---\n   Req-ID:  3.004\n   Title:  Network reconfiguration\n\
    \   Description:  Provide a means of iterative network reconfiguration in\n  \
    \    order to recover the network from node and communication failures.\n    \
    \  The network reconfiguration can be failure-driven and self-\n      initiated\
    \ (automatic reconfiguration).  The network\n      reconfiguration can be also\
    \ performed on the whole hierarchical\n      structure of a network (network topology).\n\
    \   Source:  Practically all use cases, as network connectivity is a\n      basic\
    \ requirement\n   Requirement Type:  Functional Requirement\n   Device type: \
    \ C0, C1, and C2\n   Priority:  Medium\n"
- title: 3.4.  Monitoring Functionality
  contents:
  - "3.4.  Monitoring Functionality\n   Req-ID:  4.001\n   Title:  Device status monitoring\n\
    \   Description:  Provide a monitoring function to collect and expose\n      information\
    \ about device status and expose it via at least one\n      management interface.\
    \  The device monitoring might make use of the\n      hierarchical management\
    \ through the intermediary entities and the\n      caching mechanism.  The device\
    \ monitoring might also make use of\n      neighbor-monitoring (fault detection\
    \ in the local network) to\n      support fast fault detection and recovery, e.g.,\
    \ in a scenario\n      where a managing entity is unreachable and a neighbor can\
    \ take\n      over the monitoring responsibility.\n   Source:  All use cases\n\
    \   Requirement Type:  Functional Requirement\n   Device type:  C0, C1, and C2\n\
    \   Priority:  High; Medium for neighbor-monitoring\n   ---\n   Req-ID:  4.002\n\
    \   Title:  Energy status monitoring\n   Description:  Provide a monitoring function\
    \ to collect and expose\n      information about device energy parameters and\
    \ usage (e.g.,\n      battery level and average power consumption).\n   Source:\
    \  Use case \"Energy Management\"\n   Requirement Type:  Functional Requirement\n\
    \   Device type:  C0, C1, and C2\n   Priority:  High for energy reporting devices;\
    \ Low for others\n   ---\n   Req-ID:  4.003\n   Title:  Monitoring of current\
    \ and estimated device availability\n   Description:  Provide a monitoring function\
    \ to collect and expose\n      information about current device availability (energy,\
    \ memory,\n      computing power, forwarding-plane utilization, queue buffers,\n\
    \      etc.) and estimation of remaining available resources.\n   Source:  All\
    \ use cases.  Note that monitoring energy resources (like\n      battery status)\
    \ may be required on all kinds of devices.\n   Requirement Type:  Functional Requirement\n\
    \   Device type:  C0, C1, and C2\n   Priority:  Medium\n   ---\n   Req-ID:  4.004\n\
    \   Title:  Network status monitoring\n   Description:  Provide a monitoring function\
    \ to collect, analyze, and\n      expose information related to the status of\
    \ a network or network\n      segments connected to the interface of the device.\n\
    \   Source:  All use cases\n   Requirement Type:  Functional Requirement\n   Device\
    \ type:  C1 and C2\n   Priority:  Low, based on the realization complexity\n \
    \  ---\n   Req-ID:  4.005\n   Title:  Self-monitoring\n   Description:  Provide\
    \ self-monitoring (local fault detection) feature\n      for fast fault detection\
    \ and recovery.\n   Source:  Use cases where the devices cannot be monitored centrally\
    \ in\n      an appropriate manner, e.g., self-healing is required\n   Requirement\
    \ Type:  Functional Requirement\n   Device type:  C1 and C2\n   Priority:  High\
    \ for C2; Medium for C1\n   ---\n   Req-ID:  4.006\n   Title:  Performance monitoring\n\
    \   Description:  The device will provide a monitoring function to\n      collect\
    \ and expose information about the basic performance\n      parameter of the device.\
    \  The performance management functionality\n      might make use of the hierarchical\
    \ management through the\n      intermediary devices.\n   Source:  Use cases \"\
    Building Automation\" and \"Transport Applications\"\n   Requirement Type:  Functional\
    \ Requirement\n   Device type:  C1 and C2\n   Priority:  Low\n   ---\n   Req-ID:\
    \  4.007\n   Title:  Fault detection monitoring\n   Description:  The device will\
    \ provide fault detection monitoring.\n      The system collects information about\
    \ network states in order to\n      identify whether faults have occurred.  In\
    \ some cases, the\n      detection of the faults might be based on the processing\
    \ and\n      analysis of the parameters retrieved from the network or other\n\
    \      devices.  In case of C0 devices, the monitoring might be limited\n    \
    \  to the check whether or not the device is alive.\n   Source:  Use cases \"\
    Environmental Monitoring\", \"Building Automation\",\n      \"Energy Management\"\
    , \"Infrastructure Monitoring\"\n   Requirement Type:  Functional Requirement\n\
    \   Device type:  C0, C1 and C2\n   Priority:  Medium\n   ---\n   Req-ID:  4.008\n\
    \   Title:  Passive and reactive monitoring\n   Description:  The device will\
    \ provide passive and reactive monitoring\n      capabilities.  The system or\
    \ manager collects information about\n      device components and network states\
    \ (passive monitoring) and may\n      perform postmortem analysis of collected\
    \ data.  In case events of\n      interest have occurred, the system or the manager\
    \ can adaptively\n      react (reactive monitoring), e.g., reconfigure the network.\n\
    \      Typically, actions (reactions) will be executed or sent as\n      commands\
    \ by the management applications.\n   Source:  Diverse use cases relevant for\
    \ device status and network\n      state monitoring\n   Requirement Type:  Functional\
    \ Requirement\n   Device type:  C2\n   Priority:  Medium\n   ---\n   Req-ID: \
    \ 4.009\n   Title:  Recovery\n   Description:  Provide local, central and hierarchical\
    \ recovery\n      mechanisms (recovery is in some cases achieved by recovering\
    \ the\n      whole network of constrained devices).\n   Source:  Use cases \"\
    Industrial Applications\", \"Home Automation\", and\n      \"Building Automation\"\
    , as well as mobile applications that involve\n      different forms of clustering\
    \ or area managers\n   Requirement Type:  Functional Requirement\n   Device type:\
    \  C2\n   Priority:  Medium\n   ---\n   Req-ID:  4.010\n   Title:  Network topology\
    \ discovery\n   Description:  Provide a network topology discovery capability\
    \ (e.g.,\n      use of topology extraction algorithms to retrieve the network\n\
    \      state) and a monitoring function to collect and expose information\n  \
    \    about the network topology.\n   Source:  Use cases \"Community Network Applications\"\
    \ and mobile\n      applications\n   Requirement Type:  Functional Requirement\n\
    \   Device type:  C1 and C2\n   Priority:  Low, based on the realization complexity\n\
    \   ---\n   Req-ID:  4.011\n   Title:  Notifications\n   Description:  The device\
    \ will provide the capability of sending\n      notifications on critical events\
    \ and faults.\n   Source:  All use cases\n   Requirement Type:  Functional Requirement\n\
    \   Device type:  C0, C1, and C2\n   Priority:  Medium for C2; Low for C0 and\
    \ C1\n   ---\n   Req-ID:  4.012\n   Title:  Logging\n   Description:  The device\
    \ will provide the capability of building,\n      keeping, and allowing retrieval\
    \ of logs of events (including but\n      not limited to critical faults and alarms).\n\
    \   Source:  Use cases \"Industrial Applications\", \"Building Automation\",\n\
    \      and \"Infrastructure Monitoring\"\n   Requirement Type:  Functional Requirement\n\
    \   Device type:  C2\n   Priority:  High for some medical or industrial applications;\
    \ Medium\n      otherwise\n"
- title: 3.5.  Self-Management
  contents:
  - "3.5.  Self-Management\n   Req-ID:  5.001\n   Title:  Self-management -- Self-healing\n\
    \   Description:  Enable event-driven and/or periodic self-management\n      functionality\
    \ in a device.  The device should be able to react in\n      case of a failure,\
    \ e.g., by initiating a fully or partly reset and\n      initiate a self-configuration\
    \ or management data update as\n      necessary.  A device might be further able\
    \ to check for failures\n      cyclically or on a schedule in order to trigger\
    \ self-management as\n      necessary.  It is a matter of device design and subject\
    \ for\n      discussion how much self-management a C1 device can support.\n  \
    \    Failure detection and self-management logic are assumed to be\n      generally\
    \ useful for the self-healing of a device.\n   Source:  The requirement generally\
    \ relates to all use cases in this\n      document.\n   Requirement Type:  Functional\
    \ Requirement\n   Device type:  C1 and C2\n   Priority:  High for C2; Medium for\
    \ C1\n"
- title: 3.6.  Security and Access Control
  contents:
  - "3.6.  Security and Access Control\n   Req-ID:  6.001\n   Title:  Authentication\
    \ of management system and devices\n   Description:  Systems having a management\
    \ role must be properly\n      authenticated to the device such that the device\
    \ can exercise\n      proper access control and in particular distinguish rightful\n\
    \      management systems from rogue systems.  On the other hand, managed\n  \
    \    devices must authenticate themselves to systems having a\n      management\
    \ role such that management systems can protect\n      themselves from rogue devices.\
    \  In certain application scenarios,\n      it is possible that a large number\
    \ of devices need to be\n      (re-)started at about the same time.  Protocols\
    \ and authentication\n      systems should be designed such that a large number\
    \ of devices\n      (re-)starting simultaneously does not negatively impact the\
    \ device\n      authentication process.\n   Source:  Basic security requirement\
    \ for all use cases\n   Requirement Type:  Functional Requirement\n   Device type:\
    \  C0, C1, and C2\n   Priority:  High; Medium for the (re-)start of a large number\
    \ of\n      devices\n   ---\n   Req-ID:  6.002\n   Title:  Support suitable security\
    \ bootstrapping mechanisms\n   Description:  Mechanisms should be supported that\
    \ simplify the\n      bootstrapping of device that is the discovery of newly deployed\n\
    \      devices in order to provide them with appropriate access control\n    \
    \  permissions.\n   Source:  Basic security requirement for all use cases\n  \
    \ Requirement Type:  Functional Requirement\n   Device type:  C0, C1, and C2\n\
    \   Priority:  High\n   ---\n   Req-ID:  6.003\n   Title:  Access control on management\
    \ system and devices\n   Description:  Systems acting in a management role must\
    \ provide an\n      access control mechanism that allows the security administrator\
    \ to\n      restrict which devices can access the managing system (e.g., using\n\
    \      an access control white list of known devices).  On the other\n      hand,\
    \ managed constrained devices must provide an access control\n      mechanism\
    \ that allows the security administrator to restrict how\n      systems in a management\
    \ role can access the device (e.g., no-\n      access, read-only access, and read-write\
    \ access).\n   Source:  Basic security requirement for use cases where access\n\
    \      control is essential\n   Requirement Type:  Functional Requirement\n  \
    \ Device type:  C0, C1, and C2\n   Priority:  High\n   ---\n   Req-ID:  6.004\n\
    \   Title:  Select cryptographic algorithms that are efficient in both\n     \
    \ code space and execution time\n   Description:  Cryptographic algorithms have\
    \ a major impact in terms\n      of both code size and overall execution time.\
    \  Therefore, it is\n      necessary to select mandatory to implement cryptographic\n\
    \      algorithms that are reasonable to implement with the available\n      code\
    \ space and that have a small impact at runtime.  Furthermore,\n      some wireless\
    \ technologies (e.g., IEEE 802.15.4) require the\n      support of certain cryptographic\
    \ algorithms.  It might be useful\n      to choose algorithms that are likely\
    \ to be supported in wireless\n      chipsets for certain wireless technologies.\n\
    \   Source:  Generic requirement to reduce the footprint and CPU usage of\n  \
    \    a constrained device\n   Requirement Type:  Non-functional Requirement\n\
    \   Device type:  C0, C1, and C2\n   Priority:  High; Medium for hardware-supported\
    \ algorithms\n"
- title: 3.7.  Energy Management
  contents:
  - "3.7.  Energy Management\n   Req-ID:  7.001\n   Title:  Management of energy resources\n\
    \   Description:  Enable managing power resources in the network, e.g.,\n    \
    \  reduce the sampling rate of nodes with critical battery and reduce\n      node\
    \ transmission power, put nodes to sleep, put single interfaces\n      to sleep,\
    \ reject a management job based on available energy or\n      criteria predefined\
    \ by the management application (such as\n      importance levels forcing execution\
    \ even if the energy level is\n      low), etc.  The device may further implement\
    \ standard data models\n      for energy management and expose it through a management\
    \ protocol\n      interface, e.g., EMAN MIB modules [RFC7460] and [RFC7461] as\
    \ well\n      as other EMAN extensions.  It might be necessary to use a subset\n\
    \      of EMAN MIBs for C1 and C2 devices.\n   Source:  Use case \"Energy Management\"\
    \n   Requirement Type:  Functional Requirement\n   Device type:  C0, C1, and C2\n\
    \   Priority:  Medium for the use case \"Energy Management\"; Low otherwise\n\
    \   ---\n   Req-ID:  7.002\n   Title:  Support of energy-optimized communication\
    \ protocols\n   Description:  Use an optimized communication protocol to minimize\n\
    \      energy usage for the device (radio) receiver/transmitter, on-air\n    \
    \  bandwidth usage (i.e., maximize protocol efficiency), and the\n      amount\
    \ of data communication between nodes.  Minimizing data\n      communication implies\
    \ data aggregation and filtering but also a\n      compact format for the transferred\
    \ data.\n   Source:  Use cases \"Energy Management\" and mobile applications\n\
    \   Requirement Type:  Non-functional Requirement\n   Device type:  C2\n   Priority:\
    \  Medium\n   ---\n   Req-ID:  7.003\n   Title:  Support for Layer 2 (L2) energy-aware\
    \ protocols\n   Description:  The device will support L2 energy-management protocols\n\
    \      (e.g., energy-efficient Ethernet [IEEE802.3az]) and be able to\n      report\
    \ on these.\n   Source:  Use case \"Energy Management\"\n   Requirement Type:\
    \  Non-functional Requirement\n   Device type:  C0, C1, and C2\n   Priority: \
    \ Medium\n   ---\n   Req-ID:  7.004\n   Title:  Dying gasp\n   Description:  When\
    \ energy resources draw below the red-line level,\n      the device will send\
    \ a \"dying gasp\" notification and perform, if\n      still possible, a graceful\
    \ shutdown including conservation of\n      critical device configuration and\
    \ status information.\n   Source:  Use case \"Energy Management\"\n   Requirement\
    \ Type:  Functional Requirement\n   Device type:  C0, C1, and C2\n   Priority:\
    \  Medium\n"
- title: 3.8.  Software Distribution
  contents:
  - "3.8.  Software Distribution\n   Req-ID:  8.001\n   Title:  Group-based provisioning\n\
    \   Description:  Support group-based provisioning, i.e., firmware update\n  \
    \    and configuration management of a large set of constrained devices\n    \
    \  with eventual consistency and coordinated reload times.  The\n      device\
    \ should accept group-based configuration management based on\n      bulk commands,\
    \ which aim similar configurations of a large set of\n      constrained devices\
    \ of the same type in a given group and which\n      may share a common data model.\
    \  Activation of configuration may be\n      based on preloaded sets of default\
    \ values.\n   Source:  All use cases\n   Requirement Type:  Non-functional Requirement\n\
    \   Device type:  C0, C1, and C2\n   Priority:  Medium\n"
- title: 3.9.  Traffic Management
  contents:
  - "3.9.  Traffic Management\n   Req-ID:  9.001\n   Title:  Congestion avoidance\n\
    \   Description:  Support congestion control principles as defined in\n      [RFC2914],\
    \ e.g., the ability to avoid congestion by modifying the\n      device's reporting\
    \ rate for periodical data (which is usually\n      redundant) based on the importance\
    \ and reliability level of the\n      management data.  This functionality is\
    \ usually controlled by the\n      managing entity, where the managing entity\
    \ marks the data as\n      important or relevant for reliability.  However, reducing\
    \ a\n      device's reporting rate can also be initiated by a device if it is\n\
    \      able to detect congestion or has insufficient buffer memory.\n   Source:\
    \  Use cases with high reporting rate and traffic, e.g., AMI or\n      M2M\n \
    \  Requirement Type:  Non-functional Requirement\n   Device type:  C1 and C2\n\
    \   Priority:  Medium\n   ---\n   Req-ID:  9.002\n   Title:  Reroute traffic\n\
    \   Description:  Provide the ability for network nodes to redirect\n      traffic\
    \ from overloaded intermediary nodes in a network to another\n      path in order\
    \ to prevent congestion on a central server and in the\n      primary network.\n\
    \   Source:  Use cases with high reporting rate and traffic, e.g., AMI or\n  \
    \    M2M\n   Requirement Type:  Non-functional Requirement\n   Device type:  Intermediary\
    \ entity in the network\n   Priority:  Medium\n   ---\n   Req-ID:  9.003\n   Title:\
    \  Traffic Shaping\n   Description:  Provide the ability to apply traffic-shaping\
    \ policies\n      to incoming and outgoing links on an overloaded intermediary\
    \ node\n      (as necessary) in order to reduce the amount of traffic in the\n\
    \      network.\n   Source:  Use cases with high reporting rate and traffic, e.g.,\
    \ AMI or\n      M2M\n   Requirement Type:  Non-functional Requirement\n   Device\
    \ type:  Intermediary entity in the network\n   Priority:  Medium\n"
- title: 3.10.  Transport Layer
  contents:
  - "3.10.  Transport Layer\n   Req-ID:  10.001\n   Title:  Scalable transport layer\n\
    \   Description:  Enable the use of a scalable transport layer, i.e., not\n  \
    \    sensitive to a high rate of incoming client requests, which is\n      useful\
    \ for applications requiring frequent access to device data.\n   Source:  Applications\
    \ with frequent access to the device data\n   Requirement Type:  Non-functional\
    \ Requirement\n   Device type:  C0, C1 and C2\n   Priority:  Medium\n   ---\n\
    \   Req-ID:  10.002\n   Title:  Reliable unicast transport of messages\n   Description:\
    \  Diverse applications need a reliable transport of\n      messages.  The reliability\
    \ might be achieved based on a transport\n      protocol such as TCP or can be\
    \ supported based on message\n      repetition if an acknowledgment is missing.\n\
    \   Source:  Generally, applications benefit from the reliability of the\n   \
    \   message transport\n   Requirement Type:  Functional Requirement\n   Device\
    \ type:  C0, C1, and C2\n   Priority:  High\n   ---\n   Req-ID:  10.003\n   Title:\
    \  Best-effort multicast\n   Description:  Provide best-effort multicast of messages,\
    \ which is\n      generally useful when devices need to discover a service provided\n\
    \      by a server or many devices need to be configured by a managing\n     \
    \ entity at once based on the same data model.\n   Source:  Use cases where a\
    \ device needs to discover services as well\n      as use cases with high amount\
    \ of devices to manage, which are\n      hierarchically deployed, e.g., AMI or\
    \ M2M\n   Requirement Type:  Functional Requirement\n   Device type:  C0, C1,\
    \ and C2\n   Priority:  Medium\n   ---\n   Req-ID:  10.004\n   Title:  Secure\
    \ message transport\n   Description:  Enable secure message transport providing\n\
    \      authentication, data integrity, and confidentiality by using\n      existing\
    \ transport-layer technologies with a small footprint such\n      as TLS/DTLS.\n\
    \   Source:  All use cases\n   Requirement Type:  Non-functional Requirements\n\
    \   Device type:  C1 and C2\n   Priority:  High\n"
- title: 3.11.  Implementation Requirements
  contents:
  - "3.11.  Implementation Requirements\n   Req-ID:  11.001\n   Title:  Avoid complex\
    \ application-layer transactions requiring large\n      application-layer messages\n\
    \   Description:  Complex application-layer transactions tend to require\n   \
    \   large memory buffers that are typically not available on C0 or C1\n      devices\
    \ and only by limiting functionality on C2 devices.\n      Furthermore, the failure\
    \ of a single large transaction requires\n      repeating the whole transaction.\
    \  On constrained devices, it is\n      often more desirable to split a large\
    \ transaction into a sequence\n      of smaller transactions that require less\
    \ resources and allow\n      making progress using a sequence of smaller steps.\n\
    \   Source:  Basic requirement that concerns all use cases with memory\n     \
    \ constrained devices\n   Requirement Type:  Non-functional Requirement\n   Device\
    \ type:  C0, C1, and C2\n   Priority:  High\n   ---\n   Req-ID:  11.002\n   Title:\
    \  Avoid reassembly of messages at multiple layers in the\n      protocol stack\n\
    \   Description:  Reassembly of messages at multiple layers in the\n      protocol\
    \ stack requires buffers at multiple layers, which leads to\n      inefficient\
    \ use of memory resources.  This can be avoided by\n      making sure the application\
    \ layer, the security layer, the\n      transport layer, the IPv6 layer, and any\
    \ adaptation layers are\n      aware of the limitations of each other such that\
    \ unnecessary\n      fragmentation and reassembly can be avoided.  In addition,\
    \ message\n      size constraints must be announced to protocol peers such that\n\
    \      they can adapt and avoid sending messages that can't be processed\n   \
    \   due to resource constraints on the receiving device.\n   Source:  Basic requirement\
    \ that concerns all use cases with memory\n      constrained devices\n   Requirement\
    \ Type:  Non-functional Requirement\n   Device type:  C0, C1, and C2\n   Priority:\
    \  High\n"
- title: 4.  Security Considerations
  contents:
  - "4.  Security Considerations\n   This document discusses the problem statement\
    \ and requirements on\n   networks of constrained devices.  Section 1.6 mentions\
    \ a number of\n   limitations that could prevent the implementation of strong\n\
    \   cryptographic algorithms.  Requirements for security and access\n   control\
    \ are listed in Section 3.6.\n   Often, constrained devices might be deployed\
    \ in unsafe environments\n   where attackers can gain physical access to the devices.\
    \  As a\n   consequence, it is crucial that devices are robust and tamper\n  \
    \ resistant, have no backdoors, do not provide services that are not\n   essential\
    \ for the primary function, and properly protect any security\n   credentials\
    \ that may be stored on the device (e.g., by using hardware\n   protection mechanisms).\
    \  Furthermore, it is important that any\n   credentials leaking from a single\
    \ device do not simplify the attack\n   on other (similar) devices.  In particular,\
    \ security credentials\n   should never be shared.\n   Since constrained devices\
    \ often have limited computational resources,\n   care should be taken in choosing\
    \ efficient but cryptographically\n   strong cryptographic algorithms.  Designers\
    \ of constrained devices\n   that have a long expected lifetime need to ensure\
    \ that cryptographic\n   algorithms can be updated once devices have been deployed.\
    \  The\n   ability to perform secure firmware and software updates is an\n   important\
    \ management requirement.\n   Constrained devices might also generate sensitive\
    \ data or require the\n   processing of sensitive data.  Therefore, it is an important\n\
    \   requirement to properly protect access to the data in order to\n   protect\
    \ the privacy of humans using Internet-enabled devices.  For\n   certain types\
    \ of data, protection during the transmission over the\n   network may not be\
    \ sufficient, and methods should be investigated\n   that provide protection of\
    \ data while it is cached or stored (e.g.,\n   when using a store-and-forward\
    \ transport mechanism).\n"
- title: 5.  Informative References
  contents:
  - "5.  Informative References\n   [RFC2914]  Floyd, S., \"Congestion Control Principles\"\
    , BCP 41,\n              RFC 2914, DOI 10.17487/RFC2914, September 2000,\n   \
    \           <http://www.rfc-editor.org/info/rfc2914>.\n   [RFC2501]  Corson, S.\
    \ and J. Macker, \"Mobile Ad hoc Networking\n              (MANET): Routing Protocol\
    \ Performance Issues and\n              Evaluation Considerations\", RFC 2501,\n\
    \              DOI 10.17487/RFC2501, January 1999,\n              <http://www.rfc-editor.org/info/rfc2501>.\n\
    \   [RFC6632]  Ersue, M., Ed. and B. Claise, \"An Overview of the IETF\n     \
    \         Network Management Standards\", RFC 6632,\n              DOI 10.17487/RFC6632,\
    \ June 2012,\n              <http://www.rfc-editor.org/info/rfc6632>.\n   [RFC7102]\
    \  Vasseur, JP., \"Terms Used in Routing for Low-Power and\n              Lossy\
    \ Networks\", RFC 7102, DOI 10.17487/RFC7102, January\n              2014, <http://www.rfc-editor.org/info/rfc7102>.\n\
    \   [RFC7228]  Bormann, C., Ersue, M., and A. Keranen, \"Terminology for\n   \
    \           Constrained-Node Networks\", RFC 7228,\n              DOI 10.17487/RFC7228,\
    \ May 2014,\n              <http://www.rfc-editor.org/info/rfc7228>.\n   [RFC7252]\
    \  Shelby, Z., Hartke, K., and C. Bormann, \"The Constrained\n              Application\
    \ Protocol (CoAP)\", RFC 7252,\n              DOI 10.17487/RFC7252, June 2014,\n\
    \              <http://www.rfc-editor.org/info/rfc7252>.\n   [RFC4919]  Kushalnagar,\
    \ N., Montenegro, G., and C. Schumacher, \"IPv6\n              over Low-Power\
    \ Wireless Personal Area Networks (6LoWPANs):\n              Overview, Assumptions,\
    \ Problem Statement, and Goals\",\n              RFC 4919, DOI 10.17487/RFC4919,\
    \ August 2007,\n              <http://www.rfc-editor.org/info/rfc4919>.\n   [RFC6550]\
    \  Winter, T., Ed., Thubert, P., Ed., Brandt, A., Hui, J.,\n              Kelsey,\
    \ R., Levis, P., Pister, K., Struik, R., Vasseur,\n              JP., and R. Alexander,\
    \ \"RPL: IPv6 Routing Protocol for\n              Low-Power and Lossy Networks\"\
    , RFC 6550,\n              DOI 10.17487/RFC6550, March 2012,\n              <http://www.rfc-editor.org/info/rfc6550>.\n\
    \   [RFC7460]  Chandramouli, M., Claise, B., Schoening, B., Quittek, J.,\n   \
    \           and T. Dietz, \"Monitoring and Control MIB for Power and\n       \
    \       Energy\", RFC 7460, DOI 10.17487/RFC7460, March 2015,\n              <http://www.rfc-editor.org/info/rfc7460>.\n\
    \   [RFC7461]  Parello, J., Claise, B., and M. Chandramouli, \"Energy\n      \
    \        Object Context MIB\", RFC 7461, DOI 10.17487/RFC7461, March\n       \
    \       2015, <http://www.rfc-editor.org/info/rfc7461>.\n   [RFC7548]  Ersue,\
    \ M., Ed., Romascanu, D., Schoenwaelder, J., and A.\n              Sehgal, \"\
    Management of Networks with Constrained Devices:\n              Use Cases\", RFC\
    \ 7548, DOI 10.17487/RFC7548, May 2015,\n              <http://www.rfc-editor.org/info/rfc7548>.\n\
    \   [IEEE802.15.4]\n              IEEE, \"Part 15.4: Low-Rate Wireless Personal\
    \ Area Networks\n              (LR-WPANs)\", IEEE Standard 802.15.4, September\
    \ 2011,\n              <https://standards.ieee.org/about/get/802/802.15.html>.\n\
    \   [IEEE802.15.1]\n              IEEE, \"Part 15.1: Wireless medium access control\
    \ (MAC) and\n              physical layer (PHY) specifications for wireless personal\n\
    \              area networks (WPANs)\", IEEE Standard 802.15.1, June 2005,\n \
    \             <https://standards.ieee.org/about/get/802/802.15.html>.\n   [IEEE802.3az]\n\
    \              IEEE, \"ETHERNET\", IEEE Standard 802.3az, 2012-2014,\n       \
    \       <https://standards.ieee.org/about/get/802/802.3.html>.\n"
- title: Acknowledgments
  contents:
  - "Acknowledgments\n   The following reviewed and provided valuable comments during\
    \ the\n   creation of this document:\n   Dominique Barthel, Andy Bierman, Carsten\
    \ Bormann, Zhen Cao, Benoit\n   Claise, Hui Deng, Bert Greevenbosch, Joel M. Halpern,\
    \ Ulrich Herberg,\n   James Nguyen, Anuj Sehgal, Zach Shelby, Peter van der Stok,\
    \ Thomas\n   Watteyne, and Bert Wijnen.\n   The authors would like to thank the\
    \ reviewers and the participants on\n   the Coman and OPSAWG mailing lists for\
    \ their valuable contributions\n   and comments.\n   Juergen Schoenwaelder was\
    \ partly funded by Flamingo, a Network of\n   Excellence project (ICT-318488)\
    \ supported by the European Commission\n   under its Seventh Framework Programme.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Mehmet Ersue (editor)\n   Nokia Networks\n   EMail: mehmet.ersue@nokia.com\n\
    \   Dan Romascanu\n   Avaya\n   EMail: dromasca@avaya.com\n   Juergen Schoenwaelder\n\
    \   Jacobs University Bremen\n   EMail: j.schoenwaelder@jacobs-university.de\n\
    \   Ulrich Herberg\n   EMail: ulrich@herberg.name\n"
