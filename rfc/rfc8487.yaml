- contents:
  - '         Mtrace Version 2: Traceroute Facility for IP Multicast

    '
  title: __initial_text__
- contents:
  - "Abstract\n   This document describes the IP multicast traceroute facility, named\n
    \  Mtrace version 2 (Mtrace2).  Unlike unicast traceroute, Mtrace2\n   requires
    special implementations on the part of routers.  This\n   specification describes
    the required functionality in multicast\n   routers, as well as how an Mtrace2
    client invokes a Query and\n   receives a Reply.\n"
  title: Abstract
- contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This
    document is a product of the Internet Engineering Task Force\n   (IETF).  It represents
    the consensus of the IETF community.  It has\n   received public review and has
    been approved for publication by the\n   Internet Engineering Steering Group (IESG).
    \ Further information on\n   Internet Standards is available in Section 2 of RFC
    7841.\n   Information about the current status of this document, any errata,\n
    \  and how to provide feedback on it may be obtained at\n   https://www.rfc-editor.org/info/rfc8487.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2018 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n
    \  (https://trustee.ietf.org/license-info) in effect on the date of\n   publication
    of this document.  Please review these documents\n   carefully, as they describe
    your rights and restrictions with respect\n   to this document.  Code Components
    extracted from this document must\n   include Simplified BSD License text as described
    in Section 4.e of\n   the Trust Legal Provisions and are provided without warranty
    as\n   described in the Simplified BSD License.\n   This document may contain
    material from IETF Documents or IETF\n   Contributions published or made publicly
    available before November\n   10, 2008.  The person(s) controlling the copyright
    in some of this\n   material may not have granted the IETF Trust the right to
    allow\n   modifications of such material outside the IETF Standards Process.\n
    \  Without obtaining an adequate license from the person(s) controlling\n   the
    copyright in such materials, this document may not be modified\n   outside the
    IETF Standards Process, and derivative works of it may\n   not be created outside
    the IETF Standards Process, except to format\n   it for publication as an RFC
    or to translate it into languages other\n   than English.\n"
  title: Copyright Notice
- contents:
  - "Table of Contents\n   1.  Introduction  . . . . . . . . . . . . . . . . . . .
    . . . . .   5\n   2.  Terminology . . . . . . . . . . . . . . . . . . . . . .
    . . .   7\n     2.1.  Definitions . . . . . . . . . . . . . . . . . . . . . .
    .   7\n   3.  Packet Formats  . . . . . . . . . . . . . . . . . . . . . . .   8\n
    \    3.1.  Mtrace2 TLV Format  . . . . . . . . . . . . . . . . . . .   9\n     3.2.
    \ Defined TLVs  . . . . . . . . . . . . . . . . . . . . . .  10\n       3.2.1.
    \ Mtrace2 Query . . . . . . . . . . . . . . . . . . . .  10\n       3.2.2.  Mtrace2
    Request . . . . . . . . . . . . . . . . . . .  12\n       3.2.3.  Mtrace2 Reply
    . . . . . . . . . . . . . . . . . . . .  12\n       3.2.4.  IPv4 Mtrace2 Standard
    Response Block  . . . . . . . .  13\n       3.2.5.  IPv6 Mtrace2 Standard Response
    Block  . . . . . . . .  18\n       3.2.6.  Mtrace2 Augmented Response Block  .
    . . . . . . . . .  20\n       3.2.7.  Mtrace2 Extended Query Block  . . . . .
    . . . . . . .  21\n   4.  Router Behavior . . . . . . . . . . . . . . . . . .
    . . . . .  22\n     4.1.  Receiving an Mtrace2 Query  . . . . . . . . . . . .
    . . .  22\n       4.1.1.  Query Packet Verification . . . . . . . . . . . . .
    .  22\n       4.1.2.  Query Normal Processing . . . . . . . . . . . . . . .  23\n
    \    4.2.  Receiving an Mtrace2 Request  . . . . . . . . . . . . . .  23\n       4.2.1.
    \ Request Packet Verification . . . . . . . . . . . . .  24\n       4.2.2.  Request
    Normal Processing . . . . . . . . . . . . . .  24\n     4.3.  Forwarding Mtrace2
    Request  . . . . . . . . . . . . . . .  26\n       4.3.1.  Destination Address
    . . . . . . . . . . . . . . . . .  26\n       4.3.2.  Source Address  . . . .
    . . . . . . . . . . . . . . .  26\n       4.3.3.  Appending Standard Response
    Block . . . . . . . . . .  26\n     4.4.  Sending Mtrace2 Reply . . . . . . .
    . . . . . . . . . . .  27\n       4.4.1.  Destination Address . . . . . . . .
    . . . . . . . . .  27\n       4.4.2.  Source Address  . . . . . . . . . . . .
    . . . . . . .  27\n       4.4.3.  Appending Standard Response Block . . . . .
    . . . . .  27\n     4.5.  Proxying Mtrace2 Query  . . . . . . . . . . . . . .
    . . .  28\n     4.6.  Hiding Information  . . . . . . . . . . . . . . . . . .
    .  28\n   5.  Client Behavior . . . . . . . . . . . . . . . . . . . . . . .  29\n
    \    5.1.  Sending Mtrace2 Query . . . . . . . . . . . . . . . . . .  29\n       5.1.1.
    \ Destination Address . . . . . . . . . . . . . . . . .  29\n       5.1.2.  Source
    Address  . . . . . . . . . . . . . . . . . . .  29\n     5.2.  Determining the
    Path  . . . . . . . . . . . . . . . . . .  29\n     5.3.  Collecting Statistics
    . . . . . . . . . . . . . . . . . .  29\n     5.4.  Last-Hop Router (LHR) . .
    . . . . . . . . . . . . . . . .  30\n     5.5.  First-Hop Router (FHR)  . . .
    . . . . . . . . . . . . . .  30\n     5.6.  Broken Intermediate Router  . . .
    . . . . . . . . . . . .  30\n     5.7.  Non-supported Router  . . . . . . . .
    . . . . . . . . . .  30\n     5.8.  Mtrace2 Termination . . . . . . . . . . .
    . . . . . . . .  31\n       5.8.1.  Arriving at Source  . . . . . . . . . . .
    . . . . . .  31\n       5.8.2.  Fatal Error . . . . . . . . . . . . . . . . .
    . . . .  31\n       5.8.3.  No Upstream Router  . . . . . . . . . . . . . . .
    . .  31\n       5.8.4.  Reply Timeout . . . . . . . . . . . . . . . . . . . .
    \ 31\n     5.9.  Continuing after an Error . . . . . . . . . . . . . . . .  31\n
    \  6.  Protocol-Specific Considerations  . . . . . . . . . . . . . .  32\n     6.1.
    \ PIM-SM  . . . . . . . . . . . . . . . . . . . . . . . . .  32\n     6.2.  Bidirectional
    PIM . . . . . . . . . . . . . . . . . . . .  32\n     6.3.  PIM-DM  . . . . .
    . . . . . . . . . . . . . . . . . . . .  32\n     6.4.  IGMP/MLD Proxy  . . .
    . . . . . . . . . . . . . . . . . .  33\n   7.  Problem Diagnosis . . . . . .
    . . . . . . . . . . . . . . . .  33\n     7.1.  Forwarding Inconsistencies  .
    . . . . . . . . . . . . . .  33\n     7.2.  TTL or Hop-Limit Problems . . . .
    . . . . . . . . . . . .  33\n     7.3.  Packet Loss . . . . . . . . . . . . .
    . . . . . . . . . .  33\n     7.4.  Link Utilization  . . . . . . . . . . . .
    . . . . . . . .  34\n     7.5.  Time Delay  . . . . . . . . . . . . . . . . .
    . . . . . .  34\n   8.  IANA Considerations . . . . . . . . . . . . . . . . .
    . . . .  34\n     8.1.  \"Mtrace2 Forwarding Codes\" Registry . . . . . . . .
    . . .  35\n     8.2.  \"Mtrace2 TLV Types\" Registry  . . . . . . . . . . . .
    . .  35\n     8.3.  UDP Destination Port  . . . . . . . . . . . . . . . . . .
    \ 35\n   9.  Security Considerations . . . . . . . . . . . . . . . . . . .  35\n
    \    9.1.  Addresses in Mtrace2 Header . . . . . . . . . . . . . . .  35\n     9.2.
    \ Verification of Clients and Peers . . . . . . . . . . . .  35\n     9.3.  Topology
    Discovery  . . . . . . . . . . . . . . . . . . .  36\n     9.4.  Characteristics
    of Multicast Channel  . . . . . . . . . .  36\n     9.5.  Limiting Query/Request
    Rates  . . . . . . . . . . . . . .  37\n     9.6.  Limiting Reply Rates  . . .
    . . . . . . . . . . . . . . .  37\n     9.7.  Specific Security Concerns  . .
    . . . . . . . . . . . . .  37\n       9.7.1.  Request and Response Bombardment
    \ . . . . . . . . . .  37\n       9.7.2.  Amplification Attack  . . . . . . .
    . . . . . . . . .  37\n       9.7.3.  Leaking of Confidential Topology Details
    \ . . . . . .  38\n       9.7.4.  Delivery of False Information (Forged Reply
    Messages)  38\n   10. References  . . . . . . . . . . . . . . . . . . . . . .
    . . .  39\n     10.1.  Normative References . . . . . . . . . . . . . . . . .
    .  39\n     10.2.  Informative References . . . . . . . . . . . . . . . . .  40\n
    \  Acknowledgements  . . . . . . . . . . . . . . . . . . . . . . . .  41\n   Authors'
    Addresses  . . . . . . . . . . . . . . . . . . . . . . .  41\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   Given a multicast distribution tree, tracing hop-by-hop
    downstream\n   from a multicast source to a given multicast receiver is difficult\n
    \  because there is no efficient and deterministic way to determine the\n   branch
    of the multicast routing tree on which that receiver lies.  On\n   the other hand,
    walking up the tree from a receiver to a source is\n   easy, as most existing
    multicast routing protocols know the upstream\n   router for each source.  Tracing
    from a receiver to a source can\n   involve only the routers on the direct path.\n
    \  This document specifies the multicast traceroute facility named\n   Mtrace
    version 2 or Mtrace2, which allows the tracing of an IP\n   multicast routing
    path.  Mtrace2 is usually initiated from an Mtrace2\n   client by sending an Mtrace2
    Query to a Last-Hop Router (LHR) or to a\n   Rendezvous Point (RP).  The RP is
    a special router where sources and\n   receivers meet in Protocol Independent
    Multicast - Sparse Mode\n   (PIM-SM) [5].  From the LHR/RP receiving the Query,
    the tracing is\n   directed towards a specified source if a source address is
    specified\n   and a source-specific state exists on the receiving router.  If
    no\n   source address is specified or if no source-specific state exists on\n
    \  a receiving LHR, the tracing is directed toward the RP for the\n   specified
    group address.  Moreover, Mtrace2 provides additional\n   information such as
    the packet rates and losses, as well as other\n   diagnostic information.  Mtrace2
    is primarily intended for the\n   following purposes:\n   o  To trace the path
    that a packet would take from a source to a\n      receiver.\n   o  To isolate
    packet-loss problems (e.g., congestion).\n   o  To isolate configuration problems
    (e.g., Time to live (TTL)\n      threshold).\n   The following figure shows a
    typical case of how Mtrace2 is used.\n   FHR represents the first-hop router,
    LHR represents the last-hop\n   router, and the arrow lines represent the Mtrace2
    messages that are\n   sent from one node to another.  The numbers before the Mtrace2\n
    \  messages represent the sequence of the messages that would happen.\n   The
    source, receiver, and Mtrace2 client are typically hosts.\n                  2.
    Request                 2. Request\n                    +----+                    +----+\n
    \                   |    |                    |    |\n                    v    |
    \                   v    |\n   +--------+    +-----+                        +-----+
    \   +----------+\n   | Source |----| FHR |----- The Internet -----| LHR |----|
    Receiver |\n   +--------+    +-----+            |           +-----+    +----------+\n
    \                    \\              |             ^\n                      \\
    \            |            /\n                       \\            |           /\n
    \                       \\           |          /\n                3. Reply \\
    \         |         / 1. Query\n                          \\         |        /\n
    \                          \\        |       /\n                            \\
    \ +---------+ /\n                             v | Mtrace2 |/\n                               |
    Client  |\n                               +---------+\n   When an Mtrace2 client
    initiates a multicast trace, it sends an\n   Mtrace2 Query packet to an LHR or
    RP for a multicast group and,\n   optionally, a source address.  The LHR/RP turns
    the Query packet into\n   a Request.  The Request message type enables each of
    the upstream\n   routers processing the message to apply different packet and
    message\n   validation rules than those required for the handling of a Query\n
    \  message.  The LHR/RP then appends a Standard Response Block\n   containing
    its interface addresses and packet statistics to the\n   Request packet, then
    forwards the packet towards the source/RP.  The\n   Request packet is either unicasted
    to its upstream router towards the\n   source/RP or multicasted to the group if
    the upstream router's IP\n   address is not known.  In a similar fashion, each
    router along the\n   path to the source/RP appends a Standard Response Block to
    the end of\n   the Request packet before forwarding it to its upstream router.
    \ When\n   the FHR receives the Request packet, it appends its own Standard\n
    \  Response Block, turns the Request packet into a Reply, and unicasts\n   the
    Reply back to the Mtrace2 client.\n   The Mtrace2 Reply may be returned before
    reaching the FHR under some\n   circumstances.  This can happen if a Request packet
    is received at an\n   RP or gateway, or when any of several types of error or
    exception\n   conditions occur that prevent the sending of a Request to the next\n
    \  upstream router.\n   The Mtrace2 client waits for the Mtrace2 Reply message
    and displays\n   the results.  When not receiving an Mtrace2 Reply message due
    to\n   network congestion, a broken router (see Section 5.6), or a non-\n   responding
    router (see Section 5.7), the Mtrace2 client may resend\n   another Mtrace2 Query
    with a lower hop count (see Section 3.2.1) and\n   repeat the process until it
    receives an Mtrace2 Reply message.  The\n   details are specific to the Mtrace2
    client and outside the scope of\n   this document.\n   Note that when a router's
    control plane and forwarding plane are out\n   of sync, the Mtrace2 Requests might
    be forwarded based on the control\n   states instead.  In this case, the traced
    path might not represent\n   the real path the data packets would follow.\n   Mtrace2
    supports both IPv4 and IPv6.  Unlike the previous version of\n   Mtrace, which
    implements its query and response as Internet Group\n   Management Protocol (IGMP)
    messages [10], all Mtrace2 messages are\n   UDP based.  Although the packet formats
    of IPv4 and IPv6 Mtrace2 are\n   different because of the address families, the
    syntax between them is\n   similar.\n   This document describes the base specification
    of Mtrace2 that can\n   serve as a basis for future proposals such as Mtrace2
    for Automatic\n   Multicast Tunneling (AMT) [16] and Mtrace2 for Multicast in
    MPLS/BGP\n   IP VPNs (known as Multicast VPN (MVPN)) [15].  They are, therefore,\n
    \  out of the scope of this document.\n"
  title: 1.  Introduction
- contents:
  - "2.  Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\",
    \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"NOT RECOMMENDED\",
    \"MAY\", and\n   \"OPTIONAL\" in this document are to be interpreted as described
    in\n   BCP 14 [1] [7] when, and only when, they appear in all capitals, as\n   shown
    here.  The key words indicate requirement levels for compliant\n   Mtrace2 implementations.\n"
  - contents:
    - "2.1.  Definitions\n   Since Mtrace2 Queries and Requests flow in the opposite
      direction to\n   the data flow, we refer to \"upstream\" and \"downstream\"
      with respect\n   to data, unless explicitly specified.\n   Incoming Interface:\n
      \     The interface on which data is expected to arrive from the\n      specified
      source and group.\n   Outgoing Interface:\n      This is one of the interfaces
      to which data from the source or RP\n      is expected to be transmitted for
      the specified source and group.\n      It is also the interface on which the
      Mtrace2 Request was\n      received.\n   Upstream router:\n      The router,
      connecting to the Incoming Interface of the current\n      router, which is
      responsible for forwarding data for the specified\n      source and group to
      the current router.\n   First-Hop Router (FHR):\n      The router that is directly
      connected to the source the Mtrace2\n      Query specifies.\n   Last-Hop Router
      (LHR):\n      A router that is directly connected to a receiver.  It is also
      the\n      router that receives the Mtrace2 Query from an Mtrace2 client.\n
      \  Group state:\n      The state a shared-tree protocol, such as Protocol Independent\n
      \     Multicast - Sparse Mode (PIM-SM) [5], uses to choose the upstream\n      router
      towards the RP for the specified group.  In this state,\n      source-specific
      state is not available for the corresponding group\n      address on the router.\n
      \  Source-specific state:\n      The state that is used to choose the path towards
      the source for\n      the specified source and group.\n   ALL-[protocol]-ROUTERS
      group:\n      Link-local multicast address for multicast routers to communicate\n
      \     with their adjacent routers that are running the same routing\n      protocol.
      \ For instance, the IPv4 'ALL-PIM-ROUTERS' group is\n      '224.0.0.13', and
      the IPv6 'ALL-PIM-ROUTERS' group is 'ff02::d'\n      [5].\n"
    title: 2.1.  Definitions
  title: 2.  Terminology
- contents:
  - "3.  Packet Formats\n   This section describes the details of the packet formats
    for Mtrace2\n   messages.\n   All Mtrace2 messages are encoded in the Type/Length/Value
    (TLV)\n   format (see Section 3.1).  The first TLV of a message is a message\n
    \  header TLV specifying the type of message and additional context\n   information
    required for processing of the message and for parsing of\n   subsequent TLVs
    in the message.  Subsequent TLVs in a message,\n   referred to as Blocks, are
    appended after the header TLV to provide\n   additional information associated
    with the message.  If an\n   implementation receives an unknown TLV Type for any
    TLV in a message,\n   it SHOULD ignore and silently discard the entire packet.
    \ If the\n   length of a TLV exceeds the available space in the containing packet,\n
    \  the implementation MUST ignore and silently discard the TLV and any\n   remaining
    portion of the containing packet.\n   All Mtrace2 messages are UDP packets.  For
    IPv4, Mtrace2\n   Query/Request/Reply messages MUST NOT be fragmented.  Therefore,\n
    \  Mtrace2 clients and LHRs/RPs MUST set the IP header do-not-fragment\n   (DF)
    bit for all Mtrace2 messages.  For IPv6, the packet size for the\n   Mtrace2 messages
    MUST NOT exceed 1280 bytes, which is the smallest\n   Maximum Transmission Unit
    (MTU) for an IPv6 interface [8].  The\n   source port is uniquely selected by
    the local host operating system.\n   The destination port is the IANA-reserved
    Mtrace2 port number (see\n   Section 8).  All Mtrace2 messages MUST have a valid
    UDP checksum.\n   Additionally, Mtrace2 supports both IPv4 and IPv6, but not when\n
    \  mixed.  For example, if an Mtrace2 Query or Request message arrives\n   as
    an IPv4 packet, all addresses specified in the Mtrace2 messages\n   MUST be IPv4
    as well.  The same rule applies to IPv6 Mtrace2\n   messages.\n"
  - contents:
    - "3.1.  Mtrace2 TLV Format\n      0                   1                   2                   3\n
      \     0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \    |     Type      |           Length              |   Value ....  |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  Type: 8 bits\n      Describes the format of the Value field.  For all the
      available\n      types, please see Section 3.2.\n   Length: 16 bits\n      Length
      of Type, Length, and Value fields in octets.  Minimum\n      length required
      is 4 octets.  The length MUST be a multiple of 4\n      octets.  The maximum
      TLV length is not defined; however, the\n      entire Mtrace2 packet length
      MUST NOT exceed the available MTU.\n   Value: variable length\n      The format
      is based on the Type value.  The length of the Value\n      field is the Length
      field minus 3.  All reserved fields in the\n      Value field MUST be transmitted
      as zeros and ignored on receipt.\n"
    title: 3.1.  Mtrace2 TLV Format
  - contents:
    - "3.2.  Defined TLVs\n   The following TLV Types are defined:\n         Code
      \        Type\n         ====         ================================\n         0x00
      \        Reserved\n         0x01         Mtrace2 Query\n         0x02         Mtrace2
      Request\n         0x03         Mtrace2 Reply\n         0x04         Mtrace2
      Standard Response Block\n         0x05         Mtrace2 Augmented Response Block\n
      \        0x06         Mtrace2 Extended Query Block\n   Each Mtrace2 message
      MUST begin with either a Query, a Request, or a\n   Reply TLV.  The first TLV
      determines the type of each Mtrace2\n   message.  Following a Query TLV, there
      can be a sequence of optional\n   Extended Query Blocks.  In the case of a Request
      or a Reply TLV, it\n   is then followed by a sequence of Standard Response Blocks,
      each from\n   a multicast router on the path towards the source or the RP.  In
      the\n   case where more information is needed, a Standard Response Block can\n
      \  be followed by one or multiple Augmented Response Blocks.\n   We will describe
      each message type in detail in the next few\n   sections.\n"
    - contents:
      - "3.2.1.  Mtrace2 Query\n   An Mtrace2 Query is originated by an Mtrace2 client,
        which sends an\n   Mtrace2 Query message to the LHR.  The LHR modifies only
        the Type\n   field of the Query TLV (to turn it into a \"Request\") before
        appending\n   a Standard Response Block and forwarding it upstream.  The LHR
        and\n   intermediate routers handling the Mtrace2 message when tracing\n   upstream
        MUST NOT modify any other fields within the Query/Request\n   TLV.  Additionally,
        intermediate routers handling the message after\n   the LHR has converted
        the Query into a Request MUST NOT modify the\n   Type field of the Request
        TLV.  If the actual number of hops is not\n   known, an Mtrace2 client could
        send an initial Query message with a\n   large # Hops (e.g., 0xff), in order
        to try to trace the full path.\n   An Mtrace2 Query message is shown as follows:\n
        \     0                   1                   2                   3\n      0
        1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \    |     Type      |           Length              |    # Hops     |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \    |                                                               |\n     |
        \                     Multicast Address                        |\n     |                                                               |\n
        \    +=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+\n     |
        \                                                              |\n     |                        Source
        Address                         |\n     |                                                               |\n
        \    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     |
        \                                                              |\n     |                    Mtrace2
        Client Address                     |\n     |                                                               |\n
        \    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     |
        \           Query ID           |         Client Port #         |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  Length: 16 bits\n      The Length field MUST be either 20 (i.e., 8 + 3
        * 4 (IPv4\n      addresses)) or 56 (i.e., 8 + 3 * 16 (IPv6 addresses)); if
        the\n      length is 20, then IPv4 addresses MUST be assumed, and if the\n
        \     length is 56, then IPv6 addresses MUST be assumed.\n   # Hops: 8 bits\n
        \     This field specifies the maximum number of hops that the Mtrace2\n      client
        wants to trace.  If there are some error conditions in the\n      middle of
        the path that prevent an Mtrace2 Reply from being\n      received by the client,
        the client MAY issue another Mtrace2 Query\n      with a lower number of hops
        until it receives a Reply.\n   Multicast Address: 32 bits or 128 bits\n      This
        field specifies an IPv4 or IPv6 address, which can be either:\n      m-1:
        \ a multicast group address to be traced or\n      m-2:  all ones in case
        of IPv4 or the unspecified address (::) in\n            case of IPv6 if no
        group-specific information is desired.\n   Source Address: 32 bits or 128
        bits\n      This field specifies an IPv4 or IPv6 address, which can be either:\n
        \     s-1:  a unicast address of the source to be traced or\n      s-2:  all
        ones in case of IPv4 or the unspecified address (::) in\n            case
        of IPv6 if no source-specific information is desired.\n            For example,
        the client is tracing a (*,g) group state.\n      Note that it is invalid
        to have a source-group combination of\n      (s-2, m-2).  If a router receives
        such combination in an Mtrace2\n      Query, it MUST silently discard the
        Query.\n   Mtrace2 Client Address: 32 bits or 128 bits\n      This field specifies
        the Mtrace2 client's IPv4 address or IPv6\n      global address.  This address
        MUST be a valid unicast address;\n      therefore, it MUST NOT be all ones
        or an unspecified address.  The\n      Mtrace2 Reply will be sent to this
        address.\n   Query ID: 16 bits\n      This field is used as a unique identifier
        for this Mtrace2 Query\n      so that duplicate or delayed Reply messages
        may be detected.\n   Client Port #: 16 bits\n      This field specifies the
        destination UDP port number for receiving\n      the Mtrace2 Reply packet.\n"
      title: 3.2.1.  Mtrace2 Query
    - contents:
      - "3.2.2.  Mtrace2 Request\n   The Mtrace2 Request TLV is exactly the same as
        an Mtrace2 Query\n   except for identifying the Type field of 0x02.\n   When
        an LHR receives an Mtrace2 Query message, it turns the Query\n   into a Request
        by changing the Type field of the Query from 0x01 to\n   0x02.  The LHR then
        appends an Mtrace2 Standard Response Block (see\n   Section 3.2.4) of its
        own to the Request message before sending it\n   upstream.  The upstream routers
        do the same without changing the Type\n   field until one of them is ready
        to send a Reply.\n"
      title: 3.2.2.  Mtrace2 Request
    - contents:
      - "3.2.3.  Mtrace2 Reply\n   The Mtrace2 Reply TLV is exactly the same as an
        Mtrace2 Query except\n   for identifying the Type field of 0x03.\n   When
        an FHR or an RP receives an Mtrace2 Request message that is\n   destined to
        itself, it appends an Mtrace2 Standard Response Block\n   (see Section 3.2.4)
        of its own to the Request message.  Next, it\n   turns the Request message
        into a Reply by changing the Type field of\n   the Request from 0x02 to 0x03
        and by changing the UDP destination\n   port to the port number specified
        in the Client Port Number field in\n   the Request.  It then unicasts the
        Reply message to the Mtrace2\n   client specified in the Mtrace2 Client Address
        field.\n   There are a number of cases in which an intermediate router might\n
        \  return a Reply before a Request reaches the FHR or the RP.  See\n   Sections
        4.1.1, 4.2.2, 4.3.3, and 4.5 for more details.\n"
      title: 3.2.3.  Mtrace2 Reply
    - contents:
      - "3.2.4.  IPv4 Mtrace2 Standard Response Block\n   This section describes the
        message format of an IPv4 Mtrace2 Standard\n   Response Block.  The Type field
        is 0x04.\n      0                   1                   2                   3\n
        \     0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \    |     Type      |           Length              |      MBZ      |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \    |                      Query Arrival Time                       |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \    |                  Incoming Interface Address                   |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \    |                  Outgoing Interface Address                   |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \    |                   Upstream Router Address                     |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \    |                                                               |\n     .
        \          Input packet count on Incoming Interface            .\n     |                                                               |\n
        \    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     |
        \                                                              |\n     .           Output
        packet count on Outgoing Interface           .\n     |                                                               |\n
        \    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     |
        \                                                              |\n     .      Total
        number of packets for this source-group pair       .\n     |                                                               |\n
        \    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     |
        \         Rtg Protocol         |    Multicast Rtg Protocol     |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \    |    Fwd TTL    |      MBZ      |S|   Src Mask  |Forwarding Code|\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  MBZ: 8 bits\n      This field MUST be zeroed on transmission and ignored
        on\n      reception.\n   Query Arrival Time: 32 bits\n      The Query Arrival
        Time is a 32-bit Network Time Protocol (NTP)\n      timestamp specifying the
        arrival time of the Mtrace2 Query or\n      Request packet at this router.
        \ The 32-bit form of an NTP\n      timestamp consists of the middle 32 bits
        of the full 64-bit form;\n      that is, the low 16 bits of the integer part
        and the high 16 bits\n      of the fractional part.\n      The following formula
        converts from a timespec (fractional part in\n      nanoseconds) to a 32-bit
        NTP timestamp:\n         query_arrival_time\n         = ((tv.tv_sec + 32384)
        << 16) + ((tv.tv_nsec << 7) / 1953125)\n      The constant 32384 is the number
        of seconds from Jan 1, 1900 to\n      Jan 1, 1970 truncated to 16 bits.  ((tv.tv_nsec
        << 7) / 1953125)\n      is a reduction of ((tv.tv_nsec / 1000000000) << 16),
        where \"<<\"\n      denotes a logical left shift.\n      Note that synchronized
        clocks are required on the traced routers\n      to estimate propagation and
        queuing delays between successive\n      hops.  Nevertheless, even without
        this synchronization, an\n      application can still estimate an upper bound
        on cumulative one-\n      way latency by measuring the time between sending
        a Query and\n      receiving a Reply.\n      Additionally, Query Arrival Time
        is useful for measuring the\n      packet rate.  For example, suppose that
        a client issues two\n      Queries, and the corresponding Requests R1 and
        R2 arrive at router\n      X at time T1 and T2, then the client would be able
        to compute the\n      packet rate on router X by using the packet-count information\n
        \     stored in the R1 and R2 and using the time T1 and T2.\n   Incoming Interface
        Address: 32 bits\n      This field specifies the address of the interface
        on which packets\n      from the source or the RP are expected to arrive,
        or 0 if unknown\n      or unnumbered.\n   Outgoing Interface Address: 32 bits\n
        \     This field specifies the address of the interface on which packets\n
        \     from the source or the RP are expected to transmit towards the\n      receiver,
        or 0 if unknown or unnumbered.  This is also the address\n      of the interface
        on which the Mtrace2 Query or Request arrives.\n   Upstream Router Address:
        32 bits\n      This field specifies the address of the upstream router from
        which\n      this router expects packets from this source.  This MAY be a\n
        \     multicast group (e.g., ALL-[protocol]-ROUTERS group) if the\n      upstream
        router is not known because of the workings of the\n      multicast routing
        protocol.  However, it MUST be 0 if the Incoming\n      Interface address
        is unknown or unnumbered.\n   Input packet count on Incoming Interface: 64
        bits\n      This field contains the number of multicast packets received for\n
        \     all groups and sources on the Incoming Interface, or all ones if\n      no
        count can be reported.  This counter may have the same value as\n      ifHCInMulticastPkts
        from the Interfaces Group MIB (IF-MIB) [9] for\n      this interface.\n   Output
        packet count on Outgoing Interface: 64 bits\n      This field contains the
        number of multicast packets that have been\n      transmitted or queued for
        transmission for all groups and sources\n      on the Outgoing Interface,
        or all ones if no count can be\n      reported.  This counter may have the
        same value as\n      ifHCOutMulticastPkts from the IF-MIB [9] for this interface.\n
        \  Total number of packets for this source-group pair: 64 bits\n      This
        field counts the number of packets from the specified source\n      forwarded
        by the router to the specified group, or all ones if no\n      count can be
        reported.  If the S bit is set (see below), the count\n      is for the source
        network, as specified by the Src Mask field (see\n      below).  If the S
        bit is set and the Src Mask field is 127,\n      indicating no source-specific
        state, the count is for all sources\n      sending to this group.  This counter
        should have the same value as\n      ipMcastRoutePkts from the IP Multicast
        MIB [14] for this\n      forwarding entry.\n   Rtg Protocol: 16 bits\n      This
        field describes the unicast routing protocol running between\n      this router
        and the upstream router, and it is used to determine\n      the Reverse Path
        Forwarding (RPF) interface for the specified\n      source or RP.  This value
        should have the same value as\n      ipMcastRouteRtProtocol from the IP Multicast
        MIB [14] for this\n      entry.  If the router is not able to obtain this
        value, all 0's\n      must be specified.\n   Multicast Rtg Protocol: 16 bits\n
        \     This field describes the multicast routing protocol in use between\n
        \     the router and the upstream router.  This value should have the\n      same
        value as ipMcastRouteProtocol from the IP Multicast MIB [14]\n      for this
        entry.  If the router cannot obtain this value, all 0's\n      must be specified.\n
        \  Fwd TTL: 8 bits\n      This field contains the configured multicast TTL
        threshold, if\n      any, of the Outgoing Interface.\n   S: 1 bit\n      If
        this bit is set, it indicates that the packet count for the\n      source-group
        pair is for the source network, as determined by\n      masking the source
        address with the Src Mask field.\n   Src Mask: 7 bits\n      This field contains
        the number of 1's in the netmask the router\n      has for the source (i.e.,
        a value of 24 means the netmask is\n      0xffffff00).  If the router is forwarding
        solely on group state,\n      this field is set to 127 (0x7f).\n   Forwarding
        Code: 8 bits\n      This field contains a forwarding information/error code.
        \ Values\n      with the high-order bit set (0x80-0xff) are intended for use
        with\n      conditions that are transitory or automatically recovered.  Other\n
        \     Forwarding Code values indicate a need to fix a problem in the\n      Query
        or a need to redirect the Query.  Sections 4.1 and 4.2\n      explain how
        and when the Forwarding Code is filled.  Defined\n      values are as follows:\n
        \  Value  Name            Description\n   -----  --------------  ----------------------------------------------\n
        \  0x00   NO_ERROR        No error.\n   0x01   WRONG_IF        Mtrace2 Request
        arrived on an interface\n                          for which this router does
        not perform\n                          forwarding for the specified group
        to the\n                          source or RP.\n   0x02   PRUNE_SENT      This
        router has sent a prune upstream that\n                          applies to
        the source and group in the\n                          Mtrace2 Request.\n
        \  0x03   PRUNE_RCVD      This router has stopped forwarding for this\n                          source
        and group in response to a Request\n                          from the downstream
        router.\n   0x04   SCOPED          The group is subject to administrative\n
        \                         scoping at this router.\n   0x05   NO_ROUTE        This
        router has no route for the source or\n                          group and
        no way to determine a potential\n                          route.\n   0x06
        \  WRONG_LAST_HOP  This router is not the proper LHR.\n   0x07   NOT_FORWARDING
        \ This router is not forwarding this source and\n                          group
        out the Outgoing Interface for an\n                          unspecified reason.\n
        \  0x08   REACHED_RP      Reached the Rendezvous Point.\n   0x09   RPF_IF
        \         Mtrace2 Request arrived on the expected\n                          RPF
        interface for this source and group.\n   0x0A   NO_MULTICAST    Mtrace2 Request
        arrived on an interface\n                          that is not enabled for
        multicast.\n   0x0B   INFO_HIDDEN     One or more hops have been hidden from
        this\n                          trace.\n   0x0C   REACHED_GW      Mtrace2
        Request arrived on a gateway (e.g.,\n                          a NAT or firewall)
        that hides the\n                          information between this router
        and the\n                          Mtrace2 client.\n   0x0D   UNKNOWN_QUERY
        \  A non-transitive Extended Query Type was\n                          received
        by a router that does not support\n                          the type.\n   0x80
        \  FATAL_ERROR     A fatal error is one where the router may\n                          know
        the upstream router but cannot forward\n                          the message
        to it.\n   0x81   NO_SPACE        There was not enough room to insert another\n
        \                         Standard Response Block in the packet.\n   0x83
        \  ADMIN_PROHIB    Mtrace2 is administratively prohibited.\n"
      title: 3.2.4.  IPv4 Mtrace2 Standard Response Block
    - contents:
      - "3.2.5.  IPv6 Mtrace2 Standard Response Block\n   This section describes the
        message format of an IPv6 Mtrace2 Standard\n   Response Block.  The Type field
        is also 0x04.\n      0                   1                   2                   3\n
        \     0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \    |     Type      |           Length              |      MBZ      |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \    |                      Query Arrival Time                       |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \    |                     Incoming Interface ID                     |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \    |                     Outgoing Interface ID                     |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \    |                                                               |\n     *
        \                        Local Address                         *\n     |                                                               |\n
        \    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     |
        \                                                              |\n     *                         Remote
        Address                        *\n     |                                                               |\n
        \    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     |
        \                                                              |\n     .           Input
        packet count on Incoming Interface            .\n     |                                                               |\n
        \    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     |
        \                                                              |\n     .           Output
        packet count on Outgoing Interface           .\n     |                                                               |\n
        \    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     |
        \                                                              |\n     .      Total
        number of packets for this source-group pair       .\n     |                                                               |\n
        \    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     |
        \         Rtg Protocol         |    Multicast Rtg Protocol     |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \    |              MBZ 2          |S|Src Prefix Len |Forwarding Code|\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  MBZ: 8 bits\n      This field MUST be zeroed on transmission and ignored
        on\n      reception.\n   Query Arrival Time: 32 bits\n      Same definition
        as in IPv4.\n   Incoming Interface ID: 32 bits\n      This field specifies
        the interface ID on which packets from the\n      source or RP are expected
        to arrive, or 0 if unknown.  This ID\n      should be the value taken from
        InterfaceIndex of the IF-MIB [9]\n      for this interface.\n   Outgoing Interface
        ID: 32 bits\n      This field specifies the interface ID to which packets
        from the\n      source or RP are expected to transmit, or 0 if unknown.  This
        ID\n      should be the value taken from InterfaceIndex of the IF-MIB [9]\n
        \     for this interface.\n   Local Address: 128 bits\n      This field specifies
        a global IPv6 address that uniquely\n      identifies the router.  A unique
        local unicast address [12] SHOULD\n      NOT be used unless the router is
        only assigned link-local and\n      unique local addresses.  If the router
        is only assigned link-local\n      addresses, its link-local address can be
        specified in this field.\n   Remote Address: 128 bits\n      This field specifies
        the address of the upstream router, which, in\n      most cases, is a link-local
        unicast address for the upstream\n      router.\n      Although a link-local
        address does not have enough information to\n      identify a node, it is
        possible to detect the upstream router with\n      the assistance of the Incoming
        Interface ID and the current router\n      address (i.e., Local Address).\n
        \     Note that this may be a multicast group (e.g., ALL-[protocol]-\n      ROUTERS
        group) if the upstream router is not known because of the\n      workings
        of a multicast routing protocol.  However, it should be\n      the unspecified
        address (::) if the Incoming Interface address is\n      unknown.\n   Input
        packet count on Incoming Interface: 64 bits\n      Same definition as in IPv4.\n
        \  Output packet count on Outgoing Interface: 64 bits\n      Same definition
        as in IPv4.\n   Total number of packets for this source-group pair: 64 bits\n
        \     Same definition as in IPv4, except if the S bit is set (see\n      below),
        the count is for the source network, as specified by the\n      Src Prefix
        Len field.  If the S bit is set and the Src Prefix Len\n      field is 255,
        indicating no source-specific state, the count is\n      for all sources sending
        to this group.  This counter should have\n      the same value as ipMcastRoutePkts
        from the IP Multicast MIB [14]\n      for this forwarding entry.\n   Rtg Protocol:
        16 bits\n      Same definition as in IPv4.\n   Multicast Rtg Protocol: 16
        bits\n      Same definition as in IPv4.\n   MBZ 2: 15 bits\n      This field
        MUST be zeroed on transmission and ignored on\n      reception.\n   S: 1 bit\n
        \     Same definition as in IPv4, except the Src Prefix Len field is\n      used
        to mask the source address.\n   Src Prefix Len: 8 bits\n      This field contains
        the prefix length this router has for the\n      source.  If the router is
        forwarding solely on group state, this\n      field is set to 255 (0xff).\n
        \  Forwarding Code: 8 bits\n      Same definition as in IPv4.\n"
      title: 3.2.5.  IPv6 Mtrace2 Standard Response Block
    - contents:
      - "3.2.6.  Mtrace2 Augmented Response Block\n   In addition to the Standard
        Response Block, a multicast router on the\n   traced path can optionally add
        one or multiple Augmented Response\n   Blocks before sending the Request to
        its upstream router.\n   The Augmented Response Block is flexible for various
        purposes such as\n   providing diagnosis information (see Section 7) and protocol\n
        \  verification.  Its Type field is 0x05, and its format is as follows:\n
        \     0                   1                   2                   3\n      0
        1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \    |     Type      |           Length              |      MBZ      |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \    |    Augmented Response Type    |           Value ....          |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  MBZ: 8 bits\n      This field MUST be zeroed on transmission and ignored
        on\n      reception.\n   Augmented Response Type: 16 bits\n      This field
        specifies the type of various responses from a\n      multicast router that
        might need to communicate back to the\n      Mtrace2 client as well as the
        multicast routers on the traced\n      path.\n      The Augmented Response
        Type is defined as follows:\n         Code      Type\n         ======    ==============================================\n
        \        0x0001    # of the returned Standard Response Blocks\n      When
        the NO_SPACE error occurs on a router, the router should send\n      the original
        Mtrace2 Request received from the downstream router\n      as a Reply back
        to the Mtrace2 client and continue with a new\n      Mtrace2 Request.  In
        the new Request, the router adds a Standard\n      Response Block followed
        by an Augmented Response Block with 0x01\n      as the Augmented Response
        Type, and the number of the returned\n      Mtrace2 Standard Response Blocks
        as the Value.\n      Each upstream router recognizes the total number of hops
        the\n      Request has traced so far by adding this number and the number
        of\n      the Standard Response Block in the current Request message.\n      This
        document only defines one Augmented Response Type in the\n      Augmented
        Response Block.  The description on how to provide\n      diagnosis information
        using the Augmented Response Block is out of\n      the scope of this document
        and will be addressed in separate\n      documents.\n   Value: variable length\n
        \     The format is based on the Augmented Response Type value.  The\n      length
        of the Value field is Length field minus 6.\n"
      title: 3.2.6.  Mtrace2 Augmented Response Block
    - contents:
      - "3.2.7.  Mtrace2 Extended Query Block\n   There may be a sequence of optional
        Extended Query Blocks that follow\n   an Mtrace2 Query to further specify
        any information needed for the\n   Query.  For example, an Mtrace2 client
        might be interested in tracing\n   the path the specified source and group
        would take based on a certain\n   topology.  In this case, the client can
        pass in the multi-topology ID\n   as the value for an Extended Query Type
        (see below).  The Extended\n   Query Type is extensible, and the behavior
        of the new types will be\n   addressed by separate documents.\n   The Mtrace2
        Extended Query Block's Type field is 0x06 and is\n   formatted as follows:\n
        \     0                   1                   2                   3\n      0
        1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \    |     Type      |           Length              |      MBZ    |T|\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \    |      Extended Query Type      |           Value ....          |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  MBZ: 7 bits\n      This field MUST be zeroed on transmission and ignored
        on\n      reception.\n   T-bit (Transitive Attribute): 1 bit\n      If the
        TLV Type is unrecognized by the receiving router, then this\n      TLV is
        either discarded or forwarded along with the Query,\n      depending on the
        value of this bit.  If this bit is set, then the\n      router MUST forward
        this TLV.  If this bit is clear, the router\n      MUST send an Mtrace2 Reply
        with an UNKNOWN_QUERY error.\n   Extended Query Type: 16 bits\n      This
        field specifies the type of the Extended Query Block.\n   Value: 16 bits\n
        \     This field specifies the value of this Extended Query.\n"
      title: 3.2.7.  Mtrace2 Extended Query Block
    title: 3.2.  Defined TLVs
  title: 3.  Packet Formats
- contents:
  - "4.  Router Behavior\n   This section describes the router behavior in the context
    of Mtrace2\n   in detail.\n"
  - contents:
    - "4.1.  Receiving an Mtrace2 Query\n   An Mtrace2 Query message is an Mtrace2
      message with no response\n   blocks filled in and uses a TLV Type of 0x01.\n"
    - contents:
      - "4.1.1.  Query Packet Verification\n   Upon receiving an Mtrace2 Query message,
        a router MUST examine\n   whether the Multicast Address and the Source Address
        are a valid\n   combination as specified in Section 3.2.1, and whether the
        Mtrace2\n   Client Address is a valid IP unicast address.  If either one is\n
        \  invalid, the Query MUST be silently ignored.\n   Mtrace2 supports a non-local
        client to the LHR/RP.  A router MUST,\n   however, support a mechanism to
        drop Queries from clients beyond a\n   specified administrative boundary.
        \ The potential approaches are\n   described in Section 9.2.\n   In the case
        where a local LHR client is required, the router must\n   then examine the
        Query to see if it is the proper LHR/RP for the\n   destination address in
        the packet.  It is the proper local LHR if it\n   has a multicast-capable
        interface on the same subnet as the Mtrace2\n   Client Address and is the
        router that would forward traffic from the\n   given (S,G) or (*,G) onto that
        subnet.  It is the proper RP if the\n   multicast group address specified
        in the Query is 0 and if the IP\n   header destination address is a valid
        RP address on this router.\n   If the router determines that it is not the
        proper LHR/RP, or it\n   cannot make that determination, it does one of two
        things depending\n   on whether the Query was received via multicast or unicast.
        \ If the\n   Query was received via multicast, then it MUST be silently discarded.\n
        \  If it was received via unicast, the router turns the Query into a\n   Reply
        message by changing the TLV Type to 0x03 and appending a\n   Standard Response
        Block with a Forwarding Code of WRONG_LAST_HOP.\n   The rest of the fields
        in the Standard Response Block MUST be zeroed.\n   The router then sends the
        Reply message to the Mtrace2 Client Address\n   on the Client Port # as specified
        in the Mtrace2 Query.\n   Duplicate Query messages as identified by the tuple
        (Mtrace2 Client\n   Address, Query ID) SHOULD be ignored.  This MAY be implemented
        using\n   a cache of previously processed Queries keyed by the Mtrace2 Client\n
        \  Address and Query ID pair.  The duration of the cached entries is\n   implementation
        specific.  Duplicate Request messages MUST NOT be\n   ignored in this manner.\n"
      title: 4.1.1.  Query Packet Verification
    - contents:
      - "4.1.2.  Query Normal Processing\n   When a router receives an Mtrace2 Query
        and it determines that it is\n   the proper LHR/RP, it turns the Query to
        a Request by changing the\n   TLV Type from 0x01 to 0x02, and it performs
        the steps listed in\n   Section 4.2.\n"
      title: 4.1.2.  Query Normal Processing
    title: 4.1.  Receiving an Mtrace2 Query
  - contents:
    - "4.2.  Receiving an Mtrace2 Request\n   An Mtrace2 Request is an Mtrace2 message
      that uses the TLV Type of\n   0x02.  With the exception of the LHR, whose Request
      was just\n   converted from a Query, each Request received by a router should
      have\n   at least one Standard Response Block filled in.\n"
    - contents:
      - "4.2.1.  Request Packet Verification\n   If the Mtrace2 Request does not come
        from an adjacent router, or if\n   the Request is not addressed to this router,
        or if the Request is\n   addressed to a multicast group that is not a link-scoped
        group (i.e.,\n   224.0.0.0/24 for IPv4 and FFx2::/16 for IPv6 [2]), it MUST
        be\n   silently ignored.  The Generalized TTL Security Mechanism (GTSM) [13]\n
        \  SHOULD be used by the router to determine whether the router is\n   adjacent
        or not.  Source verification specified in Section 9.2 is\n   also considered.\n
        \  If the sum of the number of the Standard Response Blocks in the\n   received
        Mtrace2 Request and the value of the Augmented Response Type\n   of 0x01,
        if any, is equal or more than the # Hops in the Mtrace2\n   Request, it MUST
        be silently ignored.\n"
      title: 4.2.1.  Request Packet Verification
    - contents:
      - "4.2.2.  Request Normal Processing\n   When a router receives an Mtrace2 Request
        message, it performs the\n   following steps.  Note that it is possible to
        have multiple\n   situations covered by the Forwarding Codes.  The first one\n
        \  encountered is the one that is reported, i.e., all \"note Forwarding\n
        \  Code N\" should be interpreted as \"if Forwarding Code is not already\n
        \  set, set Forwarding Code to N\".  Note that in the steps described\n   below,
        the \"Outgoing Interface\" is the one on which the Mtrace2\n   Request message
        arrives.\n   1.   Prepare a Standard Response Block to be appended to the
        packet,\n        setting all fields to an initial default value of zero.\n
        \  2.   If Mtrace2 is administratively prohibited, note the Forwarding\n        Code
        of ADMIN_PROHIB and skip to step 4.\n   3.   In the Standard Response Block,
        fill in the Query Arrival Time,\n        Outgoing Interface Address (for IPv4)
        or Outgoing Interface ID\n        (for IPv6), Output Packet Count, and Fwd
        TTL (for IPv4).\n   4.   Attempt to determine the forwarding information for
        the\n        specified source and group, using the same mechanisms as would\n
        \       be used when a packet is received from the source destined for\n        the
        group.  A state need not be instantiated, it can be a\n        \"phantom\"
        state created only for the purpose of the trace, such\n        as \"dry-run\".\n
        \       If using a shared-tree protocol and there is no source-specific\n
        \       state, or if no source-specific information is desired (i.e.,\n        all
        ones for IPv4 or an unspecified address (::) for IPv6),\n        group state
        should be used.  If there is no group state or no\n        group-specific
        information is desired, potential source state\n        (i.e., the path that
        would be followed for a source-specific\n        \"join\") should be used.\n
        \  5.   If no forwarding information can be determined, the router notes\n
        \       a Forwarding Code of NO_ROUTE, sets the remaining fields that\n        have
        not yet been filled in to zero, and then sends an Mtrace2\n        Reply back
        to the Mtrace2 client.\n   6.   If a Forwarding Code of ADMIN_PROHIB has been
        set, skip to step\n        7.  Otherwise, fill in the Incoming Interface Address
        (or\n        Incoming Interface ID and Local Address for IPv6), Upstream\n
        \       Router Address (or Remote Address for IPv6), Input Packet Count,\n
        \       Total Number of Packets, Routing Protocol, S, and Src Mask (or\n        Src
        Prefix Len for IPv6) using the forwarding information\n        determined
        in step 4.\n   7.   If the Outgoing Interface is not enabled for multicast,
        note\n        Forwarding Code of NO_MULTICAST.  If the Outgoing Interface
        is\n        the interface from which the router would expect data to arrive\n
        \       from the source, note Forwarding Code RPF_IF.  If the Outgoing\n        Interface
        is not one to which the router would forward data from\n        the source
        or RP to the group, a Forwarding Code of WRONG_IF is\n        noted.  In the
        above three cases, the router will return an\n        Mtrace2 Reply and terminate
        the trace.\n   8.   If the group is subject to administrative scoping on either
        the\n        Outgoing or Incoming Interfaces, a Forwarding Code of SCOPED
        is\n        noted.\n   9.   If this router is the RP for the group for a non-source-specific\n
        \       Query, note a Forwarding Code of REACHED_RP.  The router will\n        send
        an Mtrace2 Reply and terminate the trace.\n   10.  If this router is directly
        connected to the specified source or\n        source network on the Incoming
        Interface, it sets the Upstream\n        Router Address (for IPv4) or the
        Remote Address (for IPv6) of\n        the response block to zero.  The router
        will send an Mtrace2\n        Reply and terminate the trace.\n   11.  If this
        router has sent a prune upstream that applies to the\n        source and group
        in the Mtrace2 Request, it notes a Forwarding\n        Code of PRUNE_SENT.
        \ If the router has stopped forwarding\n        downstream in response to
        a prune sent by the downstream router,\n        it notes a Forwarding Code
        of PRUNE_RCVD.  If the router should\n        normally forward traffic downstream
        for this source and group\n        but is not, it notes a Forwarding Code
        of NOT_FORWARDING.\n   12.  If this router is a gateway (e.g., a NAT or firewall)
        that hides\n        the information between this router and the Mtrace2 client,
        it\n        notes a Forwarding Code of REACHED_GW.  The router continues the\n
        \       processing as described in Section 4.5.\n   13.  If the total number
        of the Standard Response Blocks, including\n        the newly prepared one,
        and the value of the Augmented Response\n        Type of 0x01, if any, is
        less than the # Hops in the Request,\n        the packet is then forwarded
        to the upstream router as described\n        in Section 4.3; otherwise, the
        packet is sent as an Mtrace2\n        Reply to the Mtrace2 client as described
        in Section 4.4.\n"
      title: 4.2.2.  Request Normal Processing
    title: 4.2.  Receiving an Mtrace2 Request
  - contents:
    - "4.3.  Forwarding Mtrace2 Request\n   This section describes how an Mtrace2
      Request should be forwarded.\n"
    - contents:
      - "4.3.1.  Destination Address\n   If the upstream router for the Mtrace2 Request
        is known for this\n   Request, the Mtrace2 Request is sent to that router.
        \ If the Incoming\n   Interface is known but the upstream router is not, the
        Mtrace2\n   Request is sent to an appropriate multicast address on the Incoming\n
        \  Interface.  The multicast address SHOULD depend on the multicast\n   routing
        protocol in use, such as ALL-[protocol]-ROUTERS group.  It\n   MUST be a link-scoped
        group (i.e., 224.0.0.0/24 for IPv4 and\n   FF02::/16 for IPv6) and MUST NOT
        be the all-systems multicast group\n   (224.0.0.1) for IPv4 and All Nodes
        Address (FF02::1) for IPv6.  It\n   MAY also be the all-routers multicast
        group (224.0.0.2) for IPv4 or\n   All Routers Address (FF02::2) for IPv6 if
        the routing protocol in use\n   does not define a more appropriate multicast
        address.\n"
      title: 4.3.1.  Destination Address
    - contents:
      - "4.3.2.  Source Address\n   An Mtrace2 Request should be sent with the address
        of the Incoming\n   Interface.  However, if the Incoming Interface is unnumbered,
        the\n   router can use one of its numbered interface addresses as the source\n
        \  address.\n"
      title: 4.3.2.  Source Address
    - contents:
      - "4.3.3.  Appending Standard Response Block\n   An Mtrace2 Request MUST be
        sent upstream towards the source or the RP\n   after appending a Standard
        Response Block to the end of the received\n   Mtrace2 Request.  The Standard
        Response Block includes the multicast\n   states and statistics information
        of the router described in\n   Section 3.2.4.\n   If appending the Standard
        Response Block would make the Mtrace2\n   Request packet longer than the MTU
        of the Incoming Interface, or, in\n   the case of IPv6, longer than 1280 bytes,
        the router MUST change the\n   Forwarding Code in the last Standard Response
        Block of the received\n   Mtrace2 Request into NO_SPACE.  The router then
        turns the Request\n   into a Reply and sends the Reply as described in Section
        4.4.\n   The router will continue with a new Request by copying the old\n
        \  Request, excluding all the response blocks, followed by the\n   previously
        prepared Standard Response Block and an Augmented Response\n   Block with
        0x01 as the Augmented Response Type, and the number of the\n   returned Standard
        Response Blocks as the Value.\n"
      title: 4.3.3.  Appending Standard Response Block
    title: 4.3.  Forwarding Mtrace2 Request
  - contents:
    - "4.4.  Sending Mtrace2 Reply\n   An Mtrace2 Reply MUST be returned to the client
      by a router if any of\n   the following conditions occur:\n   1.  The total
      number of the traced routers are equal to the # Hops in\n       the Request
      (including the one just added) plus the number of the\n       returned blocks,
      if any.\n   2.  Appending the Standard Response Block would make the Mtrace2\n
      \      Request packet longer than the MTU of the Incoming Interface.\n       (In
      case of IPv6, not more than 1280 bytes; see Section 4.3.3 for\n       additional
      details on the handling of this case.)\n   3.  The Request has reached the RP
      for a non-source-specific Query or\n       has reached the first-hop router
      for a source-specific Query (see\n       Section 4.2.2, items 9 and 10, for
      additional details).\n"
    - contents:
      - "4.4.1.  Destination Address\n   An Mtrace2 Reply MUST be sent to the address
        specified in the Mtrace2\n   Client Address field in the Mtrace2 Request.\n"
      title: 4.4.1.  Destination Address
    - contents:
      - "4.4.2.  Source Address\n   An Mtrace2 Reply SHOULD be sent with the address
        of the router's\n   Outgoing Interface.  However, if the Outgoing Interface
        address is\n   unnumbered, the router can use one of its numbered interface\n
        \  addresses as the source address.\n"
      title: 4.4.2.  Source Address
    - contents:
      - "4.4.3.  Appending Standard Response Block\n   An Mtrace2 Reply MUST be sent
        with the prepared Standard Response\n   Block appended at the end of the received
        Mtrace2 Request except in\n   the case of NO_SPACE Forwarding Code.\n"
      title: 4.4.3.  Appending Standard Response Block
    title: 4.4.  Sending Mtrace2 Reply
  - contents:
    - "4.5.  Proxying Mtrace2 Query\n   When a gateway (e.g., a NAT or firewall),
      which needs to block\n   unicast packets to the Mtrace2 client, or hide information
      between\n   the gateway and the Mtrace2 client, receives an Mtrace2 Query from
      an\n   adjacent host or Mtrace2 Request from an adjacent router, it appends\n
      \  a Standard Response Block with REACHED_GW as the Forwarding Code.  It\n   turns
      the Query or Request into a Reply and sends the Reply back to\n   the client.\n
      \  At the same time, the gateway originates a new Mtrace2 Query message\n   by
      copying the original Mtrace2 header (the Query or Request without\n   any of
      the response blocks) and making the following changes:\n   o  setting the RPF
      interface's address as the Mtrace2 Client Address;\n   o  using its own port
      number as the Client Port #; and,\n   o  decreasing # Hops by ((number of the
      Standard Response Blocks that\n      were just returned in a Reply) - 1).  The
      \"- 1\" in this expression\n      accounts for the additional Standard Response
      Block appended by\n      the gateway router.\n   The new Mtrace2 Query message
      is then sent to the upstream router or\n   to an appropriate multicast address
      on the RPF interface.\n   When the gateway receives an Mtrace2 Reply whose Query
      ID matches the\n   one in the original Mtrace2 header, it MUST relay the Mtrace2
      Reply\n   back to the Mtrace2 client by replacing the Reply's header with the\n
      \  original Mtrace2 header.  If the gateway does not receive the\n   corresponding
      Mtrace2 Reply within the [Mtrace Reply Timeout] period\n   (see Section 5.8.4),
      then it silently discards the original Mtrace2\n   Query or Request message
      and terminates the trace.\n"
    title: 4.5.  Proxying Mtrace2 Query
  - contents:
    - "4.6.  Hiding Information\n   Information about a domain's topology and connectivity
      may be hidden\n   from Mtrace2 Requests.  The Forwarding Code of INFO_HIDDEN
      may be\n   used to note that.  For example, the Incoming Interface address and\n
      \  packet count on the ingress router of a domain, and the Outgoing\n   Interface
      address and packet count on the egress router of the\n   domain, can be specified
      as all ones.  Additionally, the source-group\n   packet count (see Sections
      3.2.4 and 3.2.5) within the domain may be\n   all ones if it is hidden.\n"
    title: 4.6.  Hiding Information
  title: 4.  Router Behavior
- contents:
  - "5.  Client Behavior\n   This section describes the behavior of an Mtrace2 client
    in detail.\n"
  - contents:
    - "5.1.  Sending Mtrace2 Query\n   An Mtrace2 client initiates an Mtrace2 Query
      by sending the Query to\n   the LHR of interest.\n"
    - contents:
      - "5.1.1.  Destination Address\n   If an Mtrace2 client knows the proper LHR,
        it unicasts an Mtrace2\n   Query packet to that router; otherwise, it MAY
        send the Mtrace2 Query\n   packet to the all-routers multicast group (224.0.0.2)
        for IPv4 or All\n   Routers Address (FF02::2) for IPv6.  This will ensure
        that the packet\n   is received by the LHR on the subnet.\n   See also Section
        5.4 on determining the LHR.\n"
      title: 5.1.1.  Destination Address
    - contents:
      - "5.1.2.  Source Address\n   An Mtrace2 Query MUST be sent with the client's
        interface address,\n   which is the Mtrace2 Client Address.\n"
      title: 5.1.2.  Source Address
    title: 5.1.  Sending Mtrace2 Query
  - contents:
    - "5.2.  Determining the Path\n   An Mtrace2 client could send an initial Query
      message with a large #\n   Hops, in order to try to trace the full path.  If
      this attempt fails,\n   one strategy is to perform a linear search (as the traditional\n
      \  unicast traceroute program does); set the # Hops field to 1 and try\n   to
      get a Reply, then 2, and so on.  If no Reply is received at a\n   certain hop,
      this hop is identified as the probable cause of\n   forwarding failures on the
      path.  Nevertheless, the sender may\n   attempt to continue tracing past the
      non-responding hop by further\n   increasing the hop count in the hope that
      further hops may respond.\n   Each of these attempts MUST NOT be initiated before
      the previous\n   attempt has terminated either because of successful reception
      of a\n   Reply or because the [Mtrace Reply Timeout] timeout has occurred.\n
      \  See also Section 5.6 on receiving the results of a trace.\n"
    title: 5.2.  Determining the Path
  - contents:
    - "5.3.  Collecting Statistics\n   After a client has determined that it has traced
      the whole path or as\n   much as it can expect to (see Section 5.8), it might
      collect\n   statistics by waiting a short time and performing a second trace.
      \ If\n   the path is the same in the two traces, statistics can be displayed\n
      \  as described in Sections 7.3 and 7.4.\n"
    title: 5.3.  Collecting Statistics
  - contents:
    - "5.4.  Last-Hop Router (LHR)\n   The Mtrace2 client may not know which is the
      last-hop router, or that\n   router may be behind a firewall that blocks unicast
      packets but\n   passes multicast packets.  In these cases, the Mtrace2 Request
      should\n   be multicasted to the all-routers multicast group (224.0.0.2) for\n
      \  IPv4 or All Routers Address (FF02::2) for IPv6.  All routers except\n   the
      correct last-hop router SHOULD ignore any Mtrace2 Request\n   received via multicast.\n"
    title: 5.4.  Last-Hop Router (LHR)
  - contents:
    - "5.5.  First-Hop Router (FHR)\n   The IANA assigned 224.0.1.32 as the default
      multicast group for old\n   IPv4 mtrace (v1) responses, in order to support
      mtrace clients that\n   are not unicast reachable from the first-hop router.
      \ Mtrace2,\n   however, does not require any IPv4/IPv6 multicast addresses for
      the\n   Mtrace2 Replies.  Every Mtrace2 Reply is sent to the unicast address\n
      \  specified in the Mtrace2 Client Address field of the Mtrace2 Reply.\n"
    title: 5.5.  First-Hop Router (FHR)
  - contents:
    - "5.6.  Broken Intermediate Router\n   A broken intermediate router might simply
      not understand Mtrace2\n   packets and drop them.  The Mtrace2 client will get
      no Reply at all\n   as a result.  It should then perform a hop-by-hop search
      by setting\n   the # Hops field until it gets an Mtrace2 Reply.  The client
      may use\n   linear or binary search; however, the latter is likely to be slower\n
      \  because a failure requires waiting for the [Mtrace Reply Timeout]\n   period.\n"
    title: 5.6.  Broken Intermediate Router
  - contents:
    - "5.7.  Non-supported Router\n   When a non-supported router receives an Mtrace2
      Query or Request\n   message whose destination address is a multicast address,
      the router\n   will silently discard the message.\n   When the router receives
      an Mtrace2 Query that is destined to itself,\n   the router returns an Internet
      Control Message Protocol (ICMP) port\n   unreachable to the Mtrace2 client.
      \ On the other hand, when the\n   router receives an Mtrace2 Request that is
      destined to itself, the\n   router returns an ICMP port unreachable to its adjacent
      router from\n   which the Request receives.  Therefore, the Mtrace2 client needs
      to\n   terminate the trace when the [Mtrace Reply Timeout] timeout has\n   occurred,
      and it may then issue another Query with a lower number of\n   # Hops.\n"
    title: 5.7.  Non-supported Router
  - contents:
    - "5.8.  Mtrace2 Termination\n   When performing an expanding hop-by-hop trace,
      it is necessary to\n   determine when to stop expanding.\n"
    - contents:
      - "5.8.1.  Arriving at Source\n   A trace can be determined to have arrived
        at the source if the\n   Incoming Interface of the last router in the trace
        is non-zero, but\n   the upstream router is zero.\n"
      title: 5.8.1.  Arriving at Source
    - contents:
      - "5.8.2.  Fatal Error\n   A trace has encountered a fatal error if the last
        Forwarding Error in\n   the trace has the 0x80 bit set.\n"
      title: 5.8.2.  Fatal Error
    - contents:
      - "5.8.3.  No Upstream Router\n   A trace cannot continue if the last upstream
        router in the trace is\n   set to 0.\n"
      title: 5.8.3.  No Upstream Router
    - contents:
      - "5.8.4.  Reply Timeout\n   This document defines the [Mtrace Reply Timeout]
        value, which is used\n   to time out an Mtrace2 Reply as seen in Sections
        4.5, 5.2, and 5.7.\n   The default [Mtrace Reply Timeout] value is 10 (seconds)
        and can be\n   manually changed on the Mtrace2 client and routers.\n"
      title: 5.8.4.  Reply Timeout
    title: 5.8.  Mtrace2 Termination
  - contents:
    - "5.9.  Continuing after an Error\n   When the NO_SPACE error occurs, as described
      in Section 4.2, a router\n   will send back an Mtrace2 Reply to the Mtrace2
      client and continue\n   with a new Request (see Section 4.3.3).  In this case,
      the Mtrace2\n   client may receive multiple Mtrace2 Replies from different routers\n
      \  along the path.  When this happens, the client MUST treat them as a\n   single
      Mtrace2 Reply message by collating the Augmented Response\n   Blocks of subsequent
      Replies sharing the same Query ID, sequencing\n   each cluster of Augmented
      Response Blocks based on the order in which\n   they are received.\n   If a
      trace times out, it is very likely that a router in the middle\n   of the path
      does not support Mtrace2.  That router's address will be\n   in the Upstream
      Router field of the last Standard Response Block in\n   the last received Reply.
      \ A client may be able to determine a list of\n   neighbors of the non-responding
      router (e.g., by using the Simple\n   Network Management Protocol (SNMP) [12]
      [14]).  The neighbors\n   obtained in this way could then be probed (via the
      multicast MIB\n   [14]) to determine which one is the upstream neighbor (i.e.,
      an RPF\n   neighbor) of the non-responding router.  This algorithm can identify\n
      \  the upstream neighbor because, even though there may be multiple\n   neighbors,
      the non-responding router should only have sent a \"join\"\n   to the one neighbor
      corresponding to its selected RPF path.  Because\n   of this, only the RPF neighbor
      should contain the non-responding\n   router as a multicast next hop in its
      MIB output list for the\n   affected multicast route.\n"
    title: 5.9.  Continuing after an Error
  title: 5.  Client Behavior
- contents:
  - "6.  Protocol-Specific Considerations\n   This section describes the Mtrace2 behavior
    with the presence of\n   different multicast protocols.\n"
  - contents:
    - "6.1.  PIM-SM\n   When an Mtrace2 reaches a PIM-SM RP, and the RP does not forward
      the\n   trace on, it means that the RP has not performed a source-specific\n
      \  join, so there is no more state to trace.  However, the path that\n   traffic
      would use if the RP did perform a source-specific join can be\n   traced by
      setting the trace destination to the RP, the trace source\n   to the traffic
      source, and the trace group to 0.  This Mtrace2 Query\n   may be unicasted to
      the RP, and the RP takes the same actions as an\n   LHR.\n"
    title: 6.1.  PIM-SM
  - contents:
    - "6.2.  Bidirectional PIM\n   Bidirectional PIM [4] is a variant of PIM-SM that
      builds\n   bidirectional shared trees that connect multicast sources and\n   receivers.
      \ Along the bidirectional shared trees, multicast data is\n   natively forwarded
      from the sources to the Rendezvous Point Link\n   (RPL), and from which, to
      receivers without requiring source-specific\n   state.  In contrast to PIM-SM,
      Bidirectional PIM always has the state\n   to trace.\n   A Designated Forwarder
      (DF) for a given Rendezvous Point Address\n   (RPA) is in charge of forwarding
      downstream traffic onto its link and\n   forwarding upstream traffic from its
      link towards the RPL that the\n   RPA belongs to.  Hence, Mtrace2 Reply reports
      DF addresses or RPA\n   along the path.\n"
    title: 6.2.  Bidirectional PIM
  - contents:
    - "6.3.  PIM-DM\n   Routers running PIM - Dense Mode (PIM-DM) [11] do not know
      the path\n   packets would take unless traffic is flowing.  Without some extra\n
      \  protocol mechanism, this means that in an environment with multiple\n   possible
      paths with branch points on shared media, Mtrace2 can only\n   trace existing
      paths, not potential paths.  When there are multiple\n   possible paths but
      the branch points are not on shared media, the\n   upstream router is known,
      but the LHR may not know that it is the\n   appropriate last hop.\n   When traffic
      is flowing, PIM-DM routers know whether or not they are\n   the LHR for the
      link (because they won or lost an Assert battle) and\n   know who the upstream
      router is (because it won an Assert battle).\n   Therefore, Mtrace2 is always
      able to follow the proper path when\n   traffic is flowing.\n"
    title: 6.3.  PIM-DM
  - contents:
    - "6.4.  IGMP/MLD Proxy\n   When an IGMP or Multicast Listener Discovery (MLD)
      Proxy [3] receives\n   an Mtrace2 Query packet on an Incoming Interface, it
      notes a WRONG_IF\n   in the Forwarding Code of the last Standard Response Block
      (see\n   Section 3.2.4) and sends the Mtrace2 Reply back to the Mtrace2\n   client.
      \ On the other hand, when an Mtrace2 Query packet reaches an\n   Outgoing Interface
      of the IGMP/MLD proxy, it is forwarded onto its\n   Incoming Interface towards
      the upstream router.\n"
    title: 6.4.  IGMP/MLD Proxy
  title: 6.  Protocol-Specific Considerations
- contents:
  - "7.  Problem Diagnosis\n   This section describes different scenarios in which
    Mtrace2 can be\n   used to diagnose the multicast problems.\n"
  - contents:
    - "7.1.  Forwarding Inconsistencies\n   The Forwarding Error code can tell if
      a group is unexpectedly pruned\n   or administratively scoped.\n"
    title: 7.1.  Forwarding Inconsistencies
  - contents:
    - "7.2.  TTL or Hop-Limit Problems\n   By taking the maximum of hops from the
      source and forwarding the TTL\n   threshold over all hops, it is possible to
      discover the TTL or hop\n   limit required for the source to reach the destination.\n"
    title: 7.2.  TTL or Hop-Limit Problems
  - contents:
    - "7.3.  Packet Loss\n   By taking multiple traces, it is possible to find packet-loss\n
      \  information by tracking the difference between the output packet\n   count
      for the specified source-group address pair at a given upstream\n   router and
      the input packet count on the next-hop downstream router.\n   On a point-to-point
      link, any steadily increasing difference in these\n   counts implies packet
      loss.  Although the packet counts will differ\n   due to Mtrace2 Request propagation
      delay, the difference should\n   remain essentially constant (except for jitter
      caused by differences\n   in propagation time among the trace iterations).  However,
      this\n   difference will display a steady increase if packet loss is\n   occurring.
      \ On a shared link, the count of input packets can be\n   larger than the number
      of output packets at the previous hop, due to\n   other routers or hosts on
      the link injecting packets.  This appears\n   as \"negative loss\", which may
      mask real packet loss.\n   In addition to the counts of input and output packets
      for all\n   multicast traffic on the interfaces, the Standard Response Block\n
      \  includes a count of the packets forwarded by a node for the specified\n   source-group
      pair.  Taking the difference in this count between two\n   traces and then comparing
      those differences between two hops gives a\n   measure of packet loss just for
      traffic from the specified source to\n   the specified receiver via the specified
      group.  This measure is not\n   affected by shared links.\n   On a point-to-point
      link that is a multicast tunnel, packet loss is\n   usually due to congestion
      in unicast routers along the path of that\n   tunnel.  On native multicast links,
      loss is more likely in the output\n   queue of one hop, perhaps due to priority
      dropping, or in the input\n   queue at the next hop.  The counters in the Standard
      Response Block\n   do not allow these cases to be distinguished.  Differences
      in packet\n   counts between the Incoming and Outgoing Interfaces on one node\n
      \  cannot generally be used to measure queue overflow in the node.\n"
    title: 7.3.  Packet Loss
  - contents:
    - "7.4.  Link Utilization\n   Again, with two traces, you can divide the difference
      in the input or\n   output packet counts at some hop by the difference in timestamps
      from\n   the same hop to obtain the packet rate over the link.  If the average\n
      \  packet size is known, then the link utilization can also be estimated\n   to
      see whether packet loss may be due to the rate limit or the\n   physical capacity
      on a particular link being exceeded.\n"
    title: 7.4.  Link Utilization
  - contents:
    - "7.5.  Time Delay\n   If the routers have synchronized clocks, it is possible
      to estimate\n   propagation and queuing delay from the differences between the\n
      \  timestamps at successive hops.  However, this delay includes control\n   processing
      overhead, so is not necessarily indicative of the delay\n   that data traffic
      would experience.\n"
    title: 7.5.  Time Delay
  title: 7.  Problem Diagnosis
- contents:
  - "8.  IANA Considerations\n   The following registries have been created and are
    maintained under\n   the \"Specification Required\" registry policy as specified
    in [6].\n"
  - contents:
    - "8.1.  \"Mtrace2 Forwarding Codes\" Registry\n   This registry holds integers
      in the range 0-255.  Assignment of a\n   Forwarding Code requires specification
      of a value and a name for the\n   Forwarding Code.  Initial values for the Forwarding
      Codes are given\n   in the table at the end of Section 3.2.4.  Additional values\n
      \  (specific to IPv6) may also be specified at the end of Section 3.2.5.\n   Any
      additions to this registry are required to fully describe the\n   conditions
      under which the new Forwarding Code is used.\n"
    title: 8.1.  "Mtrace2 Forwarding Codes" Registry
  - contents:
    - "8.2.  \"Mtrace2 TLV Types\" Registry\n   Assignment of a TLV Type requires
      specification of an integer value\n   \"Code\" in the range 0-255 and a name
      (\"Type\").  Initial values for\n   the TLV Types are given in the table at
      the beginning of Section 3.2.\n"
    title: 8.2.  "Mtrace2 TLV Types" Registry
  - contents:
    - "8.3.  UDP Destination Port\n   IANA has assigned UDP user port 33435 (mtrace)
      for use by this\n   protocol as the Mtrace2 UDP destination port.\n"
    title: 8.3.  UDP Destination Port
  title: 8.  IANA Considerations
- contents:
  - "9.  Security Considerations\n   This section addresses some of the security considerations
    related to\n   Mtrace2.\n"
  - contents:
    - "9.1.  Addresses in Mtrace2 Header\n   An Mtrace2 header includes three addresses:
      a source address, a\n   multicast address, and an Mtrace2 Client Address.  These
      addresses\n   MUST be congruent with the definition defined in Section 3.2.1,
      and\n   forwarding Mtrace2 messages that have invalid addresses MUST be\n   prohibited.
      \ For instance, if the Mtrace2 Client Address specified in\n   an Mtrace2 header
      is a multicast address, then a router that receives\n   the Mtrace2 message
      MUST silently discard it.\n"
    title: 9.1.  Addresses in Mtrace2 Header
  - contents:
    - "9.2.  Verification of Clients and Peers\n   A router providing Mtrace2 functionality
      MUST support a source-\n   verification mechanism to drop Queries from clients
      and Requests from\n   peer router or client addresses that are unauthorized
      or that are\n   beyond a specified administrative boundary.  This verification
      could,\n   for example, be specified via a list of allowed/disallowed clients\n
      \  and peer addresses or subnets for a given Mtrace2 message type sent\n   to
      the Mtrace2 protocol port.  If a Query or Request is received from\n   an unauthorized
      address or one beyond the specified administrative\n   boundary, the Query/Request
      MUST NOT be processed.  The router MAY,\n   however, perform rate-limited logging
      of such events.\n   The required use of source verification on the participating
      routers\n   minimizes the possible methods for introduction of spoofed Query/\n
      \  Request packets that would otherwise enable DoS amplification attacks\n   targeting
      an authorized \"query\" host.  The source verification\n   mechanisms provide
      this protection by allowing Query messages from an\n   authorized host address
      to be received only by the router(s)\n   connected to that host and only on
      the interface to which that host\n   is attached.  For protection against spoofed
      Request messages, the\n   source-verification mechanisms allow Request messages
      only from a\n   directly connected routing peer and allow these messages to
      be\n   received only on the interface to which that peer is attached.\n   Note
      that the following vulnerabilities cannot be covered by the\n   source verification
      methods described here.  These methods can,\n   nevertheless, prevent attacks
      launched from outside the boundaries of\n   a given network as well as from
      any hosts within the network that are\n   not on the same LAN as an intended
      authorized query client.\n   o  A server/router \"B\" other than the server/router
      \"A\" that actually\n      \"owns\" a given IP address could, if it is connected
      to the same\n      LAN, send an Mtrace2 Query or Request with the source address
      set\n      to the address for server/router \"A\".  This is not a significant\n
      \     threat, however, if only trusted servers and routers are connected\n      to
      that LAN.\n   o  A malicious application running on a trusted server or router\n
      \     could send packets that might cause an amplification problem.  It\n      is
      beyond the scope of this document to protect against a DoS\n      attack launched
      from the same host that is the target of the\n      attack or from another \"on
      path\" host, but this is not a likely\n      threat scenario.  In addition,
      routers on the path MAY rate-limit\n      the packets as specified in Sections
      9.5 and 9.6.\n"
    title: 9.2.  Verification of Clients and Peers
  - contents:
    - "9.3.  Topology Discovery\n   Mtrace2 can be used to discover any actively used
      topology.  If your\n   network topology is a secret, Mtrace2 may be restricted
      at the border\n   of your domain, using the ADMIN_PROHIB Forwarding Code.\n"
    title: 9.3.  Topology Discovery
  - contents:
    - "9.4.  Characteristics of Multicast Channel\n   Mtrace2 can be used to discover
      what sources are sending to what\n   groups and at what rates.  If this information
      is a secret, Mtrace2\n   may be restricted at the border of your domain, using
      the\n   ADMIN_PROHIB Forwarding Code.\n"
    title: 9.4.  Characteristics of Multicast Channel
  - contents:
    - "9.5.  Limiting Query/Request Rates\n   A router may limit Mtrace2 Queries and
      Requests by ignoring some of\n   the consecutive messages.  The router MAY randomly
      ignore the\n   received messages to minimize the processing overhead, i.e.,
      to keep\n   fairness in processing Queries or prevent traffic amplification.
      \ The\n   rate limit is left to the router's implementation.\n"
    title: 9.5.  Limiting Query/Request Rates
  - contents:
    - "9.6.  Limiting Reply Rates\n   The proxying and NO_SPACE behaviors may result
      in one Query returning\n   multiple Reply messages.  In order to prevent abuse,
      the routers in\n   the traced path MAY need to rate-limit the Replies.  The
      rate-limit\n   function is left to the router's implementation.\n"
    title: 9.6.  Limiting Reply Rates
  - contents:
    - '9.7.  Specific Security Concerns

      '
    - contents:
      - "9.7.1.  Request and Response Bombardment\n   A malicious sender could generate
        invalid and undesirable Mtrace2\n   traffic to hosts and/or routers on a network
        by eliciting responses\n   to spoofed or multicast client addresses.  This
        could be done via\n   forged or multicast client/source addresses in Mtrace2
        Query or\n   Request messages.  The recommended protections against this type
        of\n   attack are described in Sections 9.1, 9.2, 9.5, and 9.6.\n"
      title: 9.7.1.  Request and Response Bombardment
    - contents:
      - "9.7.2.  Amplification Attack\n   Because an Mtrace2 Query results in Mtrace2
        Request and Mtrace2 Reply\n   messages that are larger than the original message,
        the potential\n   exists for an amplification attack from a malicious sender.
        \ This\n   threat is minimized by restricting the set of addresses from which\n
        \  Mtrace2 messages can be received on a given router as specified in\n   Section
        9.2.\n   In addition, for a router running a PIM protocol (PIM-SM, PIM-DM,
        PIM\n   - Source-Specific Multicast (PIM-SSM), or Bidirectional PIM), the\n
        \  router SHOULD drop any Mtrace2 Request or Reply message that is\n   received
        from an IP address that does not correspond to an\n   authenticated PIM neighbor
        on the interface from which the packet is\n   received.  The intent of this
        text is to prevent non-router endpoints\n   from injecting Request messages.
        \ Implementations of non-PIM\n   protocols SHOULD employ some other mechanism
        to prevent this attack.\n"
      title: 9.7.2.  Amplification Attack
    - contents:
      - "9.7.3.  Leaking of Confidential Topology Details\n   Mtrace2 Queries are
        a potential mechanism for obtaining confidential\n   topology information
        for a targeted network.  Sections 9.2 and 9.4\n   describe required and optional
        methods for ensuring that information\n   delivered with Mtrace2 messages
        is not disseminated to unauthorized\n   hosts.\n"
      title: 9.7.3.  Leaking of Confidential Topology Details
    - contents:
      - "9.7.4.  Delivery of False Information (Forged Reply Messages)\n   Forged
        Reply messages could potentially provide a host with invalid\n   or incorrect
        topology information.  They could also provide invalid\n   or incorrect information
        regarding multicast traffic statistics,\n   multicast stream propagation delay
        between hops, multicast and\n   unicast protocols in use between hops and
        other information used for\n   analyzing multicast traffic patterns, and troubleshooting
        multicast\n   traffic problems.  This threat is mitigated by the following
        factors:\n   o  The required source verification of permissible source addresses\n
        \     specified in Section 9.2 eliminates the origination of forged\n      Replies
        from addresses that have not been authorized to send\n      Mtrace2 messages
        to routers on a given network.  This mechanism\n      can block forged Reply
        messages sent from any \"off path\" source.\n   o  To forge a Reply, the sender
        would need to somehow know (or guess)\n      the associated 2-byte Query ID
        for an extant Query and the\n      dynamically allocated source port number.
        \ Because \"off path\"\n      sources can be blocked by a source verification
        mechanism, the\n      scope of this threat is limited to \"on path\" attackers.\n
        \  o  The required use of source verification (Section 9.2) and\n      recommended
        use of PIM neighbor authentication (Section 9.7.2) for\n      messages that
        are only valid when sent by a multicast routing peer\n      (Request and Reply
        messages) eliminate the possibility of\n      reception of a forged Reply
        from an authorized host address that\n      does not belong to a multicast
        peer router.\n   o  The use of encryption between the source of a Query and
        the\n      endpoint of the trace would provide a method to protect the values\n
        \     of the Query ID and the dynamically allocated client (source) port\n
        \     (see Section 3.2.1).  These are the values needed to create a\n      forged
        Reply message that would pass validity checks at the\n      querying client.
        \ This type of cryptographic protection is not\n      practical, however,
        because the primary reason for executing an\n      Mtrace2 is that the destination
        endpoint (and path to that\n      endpoint) are not known by the querying
        client.  While it is not\n      practical to provide cryptographic protection
        between a client and\n      the Mtrace2 endpoints (destinations), it may be
        possible to\n      prevent forged responses from \"off path\" nodes attached
        to any\n      Mtrace2 transit LAN by devising a scheme to encrypt the critical\n
        \     portions of an Mtrace2 message between each valid sender/receiver\n
        \     pair at each hop to be used for multicast/Mtrace2 transit.  The\n      use
        of encryption protection between nodes is, however, out of the\n      scope
        of this document.\n"
      title: 9.7.4.  Delivery of False Information (Forged Reply Messages)
    title: 9.7.  Specific Security Concerns
  title: 9.  Security Considerations
- contents:
  - '10.  References

    '
  - contents:
    - "10.1.  Normative References\n   [1]   Bradner, S., \"Key words for use in RFCs
      to Indicate Requirement\n         Levels\", BCP 14, RFC 2119, DOI 10.17487/RFC2119,
      March 1997,\n         <https://www.rfc-editor.org/info/rfc2119>.\n   [2]   Hinden,
      R. and S. Deering, \"IP Version 6 Addressing\n         Architecture\", RFC 4291,
      DOI 10.17487/RFC4291, February 2006,\n         <https://www.rfc-editor.org/info/rfc4291>.\n
      \  [3]   Fenner, B., He, H., Haberman, B., and H. Sandick, \"Internet\n         Group
      Management Protocol (IGMP) / Multicast Listener Discovery\n         (MLD)-Based
      Multicast Forwarding (\"IGMP/MLD Proxying\")\",\n         RFC 4605, DOI 10.17487/RFC4605,
      August 2006,\n         <https://www.rfc-editor.org/info/rfc4605>.\n   [4]   Handley,
      M., Kouvelas, I., Speakman, T., and L. Vicisano,\n         \"Bidirectional Protocol
      Independent Multicast (BIDIR- PIM)\",\n         RFC 5015, DOI 10.17487/RFC5015,
      October 2007,\n         <https://www.rfc-editor.org/info/rfc5015>.\n   [5]   Fenner,
      B., Handley, M., Holbrook, H., Kouvelas, I., Parekh,\n         R., Zhang, Z.,
      and L. Zheng, \"Protocol Independent Multicast -\n         Sparse Mode (PIM-SM):
      Protocol Specification (Revised)\",\n         STD 83, RFC 7761, DOI 10.17487/RFC7761,
      March 2016,\n         <https://www.rfc-editor.org/info/rfc7761>.\n   [6]   Cotton,
      M., Leiba, B., and T. Narten, \"Guidelines for Writing\n         an IANA Considerations
      Section in RFCs\", BCP 26, RFC 8126,\n         DOI 10.17487/RFC8126, June 2017,\n
      \        <https://www.rfc-editor.org/info/rfc8126>.\n   [7]   Leiba, B., \"Ambiguity
      of Uppercase vs Lowercase in RFC 2119 Key\n         Words\", BCP 14, RFC 8174,
      DOI 10.17487/RFC8174, May 2017,\n         <https://www.rfc-editor.org/info/rfc8174>.\n
      \  [8]   Deering, S. and R. Hinden, \"Internet Protocol, Version 6 (IPv6)\n
      \        Specification\", STD 86, RFC 8200, DOI 10.17487/RFC8200, July\n         2017,
      <https://www.rfc-editor.org/info/rfc8200>.\n"
    title: 10.1.  Normative References
  - contents:
    - "10.2.  Informative References\n   [9]   McCloghrie, K. and F. Kastenholz, \"The
      Interfaces Group MIB\",\n         RFC 2863, DOI 10.17487/RFC2863, June 2000,\n
      \        <https://www.rfc-editor.org/info/rfc2863>.\n   [10]  Cain, B., Deering,
      S., Kouvelas, I., Fenner, B., and A.\n         Thyagarajan, \"Internet Group
      Management Protocol, Version 3\",\n         RFC 3376, DOI 10.17487/RFC3376,
      October 2002,\n         <https://www.rfc-editor.org/info/rfc3376>.\n   [11]
      \ Adams, A., Nicholas, J., and W. Siadak, \"Protocol Independent\n         Multicast
      - Dense Mode (PIM-DM): Protocol Specification\n         (Revised)\", RFC 3973,
      DOI 10.17487/RFC3973, January 2005,\n         <https://www.rfc-editor.org/info/rfc3973>.\n
      \  [12]  Draves, R. and D. Thaler, \"Default Router Preferences and\n         More-Specific
      Routes\", RFC 4191, DOI 10.17487/RFC4191, November\n         2005, <https://www.rfc-editor.org/info/rfc4191>.\n
      \  [13]  Gill, V., Heasley, J., Meyer, D., Savola, P., Ed., and C.\n         Pignataro,
      \"The Generalized TTL Security Mechanism (GTSM)\",\n         RFC 5082, DOI 10.17487/RFC5082,
      October 2007,\n         <https://www.rfc-editor.org/info/rfc5082>.\n   [14]
      \ McWalter, D., Thaler, D., and A. Kessler, \"IP Multicast MIB\",\n         RFC
      5132, DOI 10.17487/RFC5132, December 2007,\n         <https://www.rfc-editor.org/info/rfc5132>.\n
      \  [15]  Rosen, E., Ed. and R. Aggarwal, Ed., \"Multicast in MPLS/ BGP IP\n
      \        VPNs\", RFC 6513, DOI 10.17487/RFC6513, February 2012,\n         <https://www.rfc-editor.org/info/rfc6513>.\n
      \  [16]  Bumgardner, G., \"Automatic Multicast Tunneling\", RFC 7450,\n         DOI
      10.17487/RFC7450, February 2015,\n         <https://www.rfc-editor.org/info/rfc7450>.\n"
    title: 10.2.  Informative References
  title: 10.  References
- contents:
  - "Acknowledgements\n   This specification started largely as a transcription of
    Van\n   Jacobson's slides from the 30th IETF meeting and the implementation\n
    \  in mrouted 3.3 by Ajit Thyagarajan.  Van's original slides credit\n   Steve
    Casner, Steve Deering, Dino Farinacci, and Deb Agrawal.  The\n   original multicast
    traceroute client, mtrace (version 1), has been\n   implemented by Ajit Thyagarajan,
    Steve Casner, and Bill Fenner.  The\n   idea of the S bit to allow statistics
    for a source subnet is due to\n   Tom Pusateri.\n   For the Mtrace version 2 specification,
    the authors would like to\n   give special thanks to Tatsuya Jinmei, Bill Fenner,
    and Steve Casner.\n   Also, extensive comments were received from David L. Black,
    Ronald\n   Bonica, Yiqun Cai, Liu Hui, Bharat Joshi, Robert Kebler, John\n   Kristoff,
    Mankamana Mishra, Heidi Ou, Eric Rescorla, Pekka Savola,\n   Shinsuke Suzuki,
    Dave Thaler, Achmad Husni Thamrin, Stig Venaas, Cao\n   Wei, and the MBONED Working
    Group members.\n"
  title: Acknowledgements
- contents:
  - "Authors' Addresses\n   Hitoshi Asaeda\n   National Institute of Information and
    Communications Technology\n   4-2-1 Nukui-Kitamachi\n   Koganei, Tokyo  184-8795\n
    \  Japan\n   Email: asaeda@nict.go.jp\n   Kerry Meyer\n   Dell EMC\n   176 South
    Street\n   Hopkinton, MA  01748\n   United States\n   Email: kerry.meyer@me.com\n
    \  WeeSan Lee (editor)\n   Email: weesan@weesan.com\n"
  title: Authors' Addresses
