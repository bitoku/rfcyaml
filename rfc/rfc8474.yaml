- title: __initial_text__
  contents:
  - '                 IMAP Extension for Object Identifiers

    '
- title: Abstract
  contents:
  - "Abstract\n   This document updates RFC 3501 (IMAP4rev1) with persistent\n   identifiers\
    \ on mailboxes and messages to allow clients to more\n   efficiently reuse cached\
    \ data when resources have changed location on\n   the server.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This\
    \ document is a product of the Internet Engineering Task Force\n   (IETF).  It\
    \ represents the consensus of the IETF community.  It has\n   received public\
    \ review and has been approved for publication by the\n   Internet Engineering\
    \ Steering Group (IESG).  Further information on\n   Internet Standards is available\
    \ in Section 2 of RFC 7841.\n   Information about the current status of this document,\
    \ any errata,\n   and how to provide feedback on it may be obtained at\n   https://www.rfc-editor.org/info/rfc8474.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2018 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (https://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction  . . . . . . . . . . . . . . . . . . .\
    \ . . . . .   2\n   2.  Conventions Used in This Document . . . . . . . . . .\
    \ . . . .   3\n   3.  CAPABILITY Identification . . . . . . . . . . . . . . .\
    \ . . .   3\n   4.  MAILBOXID Object Identifier . . . . . . . . . . . . . . .\
    \ . .   3\n     4.1.  New Response Code for CREATE  . . . . . . . . . . . . .\
    \ .   4\n     4.2.  New OK Untagged Response for SELECT and EXAMINE . . . . .\
    \   4\n     4.3.  New Attribute for STATUS  . . . . . . . . . . . . . . . .  \
    \ 5\n   5.  EMAILID Object Identifier and THREADID Correlator . . . . . .   6\n\
    \     5.1.  EMAILID Identifier for Identical Messages . . . . . . . .   6\n  \
    \   5.2.  THREADID Identifier for Related Messages  . . . . . . . .   6\n    \
    \ 5.3.  New Message Data Items in FETCH and UID FETCH Commands  .   7\n   6. \
    \ New Filters on SEARCH Command . . . . . . . . . . . . . . . .   9\n   7.  Formal\
    \ Syntax . . . . . . . . . . . . . . . . . . . . . . . .   9\n   8.  Implementation\
    \ Considerations . . . . . . . . . . . . . . . .  10\n     8.1.  Assigning Object\
    \ Identifiers  . . . . . . . . . . . . . .  10\n     8.2.  Interaction with Special\
    \ Cases  . . . . . . . . . . . . .  11\n     8.3.  Client Usage  . . . . . . .\
    \ . . . . . . . . . . . . . . .  11\n     8.4.  Advice to Client Implementers\
    \ . . . . . . . . . . . . . .  12\n   9.  Future Considerations . . . . . . .\
    \ . . . . . . . . . . . . .  12\n   10. IANA Considerations . . . . . . . . .\
    \ . . . . . . . . . . . .  12\n   11. Security Considerations . . . . . . . .\
    \ . . . . . . . . . . .  13\n   12. References  . . . . . . . . . . . . . . .\
    \ . . . . . . . . . .  13\n     12.1.  Normative References . . . . . . . . .\
    \ . . . . . . . . .  13\n     12.2.  Informative References . . . . . . . . .\
    \ . . . . . . . .  14\n   Appendix A.  Ideas for Implementing Object Identifiers\
    \  . . . . .  15\n   Acknowledgments . . . . . . . . . . . . . . . . . . . . .\
    \ . . . .  15\n   Author's Address  . . . . . . . . . . . . . . . . . . . . .\
    \ . . .  16\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   IMAP stores are often used by many clients.  Each client\
    \ may cache\n   data from the server so that it doesn't need to redownload\n \
    \  information.  [RFC3501] states that a mailbox can be uniquely\n   referenced\
    \ by its name and UIDVALIDITY, and a message within that\n   mailbox can be uniquely\
    \ referenced by its mailbox (name +\n   UIDVALIDITY) and unique identifier (UID).\
    \  The triple of mailbox\n   name, UIDVALIDITY, and UID is guaranteed to be immutable.\n\
    \   [RFC4315] defines a COPYUID response that allows a client that copies\n  \
    \ messages to know the mapping between the UIDs in the source and\n   destination\
    \ mailboxes and, hence, update its local cache.\n   If a mailbox is successfully\
    \ renamed by a client, that client will\n   know that the same messages exist\
    \ in the destination mailbox name as\n   previously existed in the source mailbox\
    \ name.\n   The result is that the client that copies (or moves [RFC6851])\n \
    \  messages or renames a mailbox can update its local cache, but any\n   other\
    \ client connected to the same store cannot know with certainty\n   that the messages\
    \ are identical, so it will redownload everything.\n   This extension adds new\
    \ properties to a message (EMAILID) and mailbox\n   (MAILBOXID).  These properties\
    \ allow a client to quickly identify\n   messages or mailboxes that have been\
    \ renamed by another client.\n   This extension also adds an optional thread identifier\
    \ (THREADID) to\n   messages, which can be used by the server to indicate messages\
    \ that\n   it has identified to be related.  A server that does not implement\n\
    \   threading will return NIL to all requests for THREADID.\n"
- title: 2.  Conventions Used in This Document
  contents:
  - "2.  Conventions Used in This Document\n   In examples, \"C:\" indicates lines\
    \ sent by a client that is connected\n   to a server.  \"S:\" indicates lines\
    \ sent by the server to the client.\n   The key words \"MUST\", \"MUST NOT\",\
    \ \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\"\
    , \"NOT RECOMMENDED\", \"MAY\", and\n   \"OPTIONAL\" in this document are to be\
    \ interpreted as described in\n   BCP 14 [RFC2119] [RFC8174] when, and only when,\
    \ they appear in all\n   capitals, as shown here.\n"
- title: 3.  CAPABILITY Identification
  contents:
  - "3.  CAPABILITY Identification\n   IMAP servers that support this extension MUST\
    \ include \"OBJECTID\" in\n   the response list to the CAPABILITY command.\n"
- title: 4.  MAILBOXID Object Identifier
  contents:
  - "4.  MAILBOXID Object Identifier\n   The MAILBOXID is a server-allocated unique\
    \ identifier for each\n   mailbox.\n   The server MUST return the same MAILBOXID\
    \ for a mailbox with the same\n   name and UIDVALIDITY.\n   The server MUST NOT\
    \ report the same MAILBOXID for two mailboxes at\n   the same time.\n   The server\
    \ MUST NOT reuse the same MAILBOXID for a mailbox that does\n   not obey all the\
    \ invariants that [RFC3501] defines for a mailbox that\n   does not change name\
    \ or UIDVALIDITY.\n   The server MUST keep the same MAILBOXID for the source and\n\
    \   destination when renaming a mailbox in a way that keeps the same\n   messages\
    \ (but see [RFC3501] for the special case regarding the\n   renaming of INBOX,\
    \ which is treated as creating a new mailbox and\n   moving the messages).\n"
- title: 4.1.  New Response Code for CREATE
  contents:
  - "4.1.  New Response Code for CREATE\n   This document extends the CREATE command\
    \ to have the response code\n   MAILBOXID on successful mailbox creation.\n  \
    \ A server advertising the OBJECTID capability MUST include the\n   MAILBOXID\
    \ response code in the tagged OK response to all successful\n   CREATE commands.\n\
    \   Syntax: \"MAILBOXID\" SP \"(\" objectid \")\"\n    Response code in tagged\
    \ OK response for successful CREATE command.\n   Example:\n     C: 3 create foo\n\
    \     S: 3 OK [MAILBOXID (F2212ea87-6097-4256-9d51-71338625)] Completed\n    \
    \ C: 4 create bar\n     S: 4 OK [MAILBOXID (F6352ae03-b7f5-463c-896f-d8b48ee3)]\
    \ Completed\n     C: 5 create foo\n     S: 5 NO Mailbox already exists\n"
- title: 4.2.  New OK Untagged Response for SELECT and EXAMINE
  contents:
  - "4.2.  New OK Untagged Response for SELECT and EXAMINE\n   This document adds\
    \ a new untagged response code to the SELECT and\n   EXAMINE commands.\n   A server\
    \ advertising the OBJECTID capability MUST return an untagged\n   OK response\
    \ with the MAILBOXID response code on all successful SELECT\n   and EXAMINE commands.\n\
    \   Syntax: \"OK\" SP \"[\" \"MAILBOXID\" SP \"(\" objectid \")\" \"]\" SP text\n\
    \                Untagged OK response to SELECT or EXAMINE.\n   Example:\n   \
    \     C: 27 select \"foo\"\n        [...]\n        S: * OK [MAILBOXID (F2212ea87-6097-4256-9d51-71338625)]\
    \ Ok\n        [...]\n        S: 27 OK [READ-WRITE] Completed\n"
- title: 4.3.  New Attribute for STATUS
  contents:
  - "4.3.  New Attribute for STATUS\n   This document adds the MAILBOXID attribute\
    \ to the STATUS command\n   using the extended syntax defined in [RFC4466].\n\
    \   A server that advertises the OBJECTID capability MUST support the\n   MAILBOXID\
    \ status attribute.\n   Syntax: \"MAILBOXID\"\n                   The attribute\
    \ in the STATUS command.\n   Syntax: \"MAILBOXID\" SP \"(\" objectid \")\"\n \
    \     The response item in the STATUS response contains the ObjectID\n      assigned\
    \ by the server for this mailbox.\n   Example:\n    C: 6 status foo (mailboxid)\n\
    \    S: * STATUS foo (MAILBOXID (F2212ea87-6097-4256-9d51-71338625))\n    S: 6\
    \ OK Completed\n    C: 7 status bar (mailboxid)\n    S: * STATUS bar (MAILBOXID\
    \ (F6352ae03-b7f5-463c-896f-d8b48ee3))\n    S: 7 OK Completed\n    C: 8 rename\
    \ foo renamed\n    S: * OK rename foo renamed\n    S: 8 OK Completed\n    C: 9\
    \ status renamed (mailboxid)\n    S: * STATUS renamed (MAILBOXID (F2212ea87-6097-4256-9d51-71338625))\n\
    \    S: 9 OK Completed\n    C: 10 status bar (mailboxid)\n    S: * STATUS bar\
    \ (MAILBOXID (F6352ae03-b7f5-463c-896f-d8b48ee3))\n    S: 10 OK Completed\n  \
    \ When the LIST-STATUS IMAP capability defined in [RFC5819] is also\n   available,\
    \ the STATUS command can be combined with the LIST command.\n   Example:\n   C:\
    \ 11 list \"\" \"*\" return (status (mailboxid))\n   S: * LIST (\\HasNoChildren)\
    \ \".\" INBOX\n   S: * STATUS INBOX (MAILBOXID (Ff8e3ead4-9389-4aff-adb1-d8d89efd8cbf))\n\
    \   S: * LIST (\\HasNoChildren) \".\" bar\n   S: * STATUS bar (MAILBOXID (F6352ae03-b7f5-463c-896f-d8b48ee3))\n\
    \   S: * LIST (\\HasNoChildren) \".\" renamed\n   S: * STATUS renamed (MAILBOXID\
    \ (F2212ea87-6097-4256-9d51-71338625))\n   S: 11 OK Completed (0.001 secs 3 calls)\n"
- title: 5.  EMAILID Object Identifier and THREADID Correlator
  contents:
  - '5.  EMAILID Object Identifier and THREADID Correlator

    '
- title: 5.1.  EMAILID Identifier for Identical Messages
  contents:
  - "5.1.  EMAILID Identifier for Identical Messages\n   The EMAILID data item is\
    \ an ObjectID that uniquely identifies the\n   content of a single message.  Anything\
    \ that must remain immutable on\n   a {name, uidvalidity, uid} triple must also\
    \ be the same between\n   messages with the same EMAILID.\n   The server MUST\
    \ return the same EMAILID for the same triple; hence,\n   EMAILID is immutable.\n\
    \   The server MUST return the same EMAILID as the source message for the\n  \
    \ matching destination message in the COPYUID pairing after a COPY or\n   MOVE\
    \ command [RFC6851].\n   The server MAY assign the same EMAILID as an existing\
    \ message upon\n   APPEND (e.g., if it detects that the new message has exactly\n\
    \   identical content to that of an existing message).\n   NOTE: EMAILID only\
    \ identifies the immutable content of the message.\n   In particular, it is possible\
    \ for different messages with the same\n   EMAILID to have different keywords.\
    \  This document does not specify a\n   way to STORE by EMAILID.\n"
- title: 5.2.  THREADID Identifier for Related Messages
  contents:
  - "5.2.  THREADID Identifier for Related Messages\n   The THREADID data item is\
    \ an ObjectID that uniquely identifies a set\n   of messages that the server believes\
    \ should be grouped together when\n   presented.\n   THREADID calculation is generally\
    \ based on some combination of\n   References, In-Reply-To, and Subject, but the\
    \ exact logic is left up\n   to the server implementation.  [RFC5256] describes\
    \ some algorithms\n   that could be used; however, this specification does not\
    \ mandate any\n   particular strategy.\n   The server MUST return the same THREADID\
    \ for all messages with the\n   same EMAILID.\n   The server SHOULD return the\
    \ same THREADID for related messages, even\n   if they are in different mailboxes;\
    \ for example, messages that would\n   appear in the same thread if they were\
    \ in the same mailbox SHOULD\n   have the same THREADID, even if they are in different\
    \ mailboxes.\n   The server MUST NOT change the THREADID of a message once reported.\n\
    \   THREADID is OPTIONAL; if the server doesn't support THREADID or is\n   unable\
    \ to calculate relationships between messages, it MUST return\n   NIL to all FETCH\
    \ responses for the THREADID data item, and a SEARCH\n   for THREADID MUST NOT\
    \ match any messages.\n   The server MUST NOT use the same ObjectID value for\
    \ both EMAILIDs and\n   THREADIDs.  If they are stored with the same value internally,\
    \ the\n   server can generate prefixed values (as shown in the examples below\n\
    \   with M and T prefixes) to avoid clashes.\n"
- title: 5.3.  New Message Data Items in FETCH and UID FETCH Commands
  contents:
  - "5.3.  New Message Data Items in FETCH and UID FETCH Commands\n   This document\
    \ defines two FETCH items:\n   Syntax: \"EMAILID\"\n     The EMAILID message data\
    \ item causes the server to return EMAILID\n     FETCH response data items.\n\
    \   Syntax: \"THREADID\"\n    The THREADID message data item causes the server\
    \ to return THREADID\n    FETCH response data items.\n   This document defines\
    \ the following responses:\n   Syntax: \"EMAILID\" SP \"(\" objectid \")\"\n \
    \  The EMAILID response data item contains the server-assigned ObjectID\n   for\
    \ each message.\n   Syntax: \"THREADID\" SP \"(\" objectid \")\"\n   The THREADID\
    \ response data item contains the server-assigned ObjectID\n   for the set of\
    \ related messages to which this message belongs.\n   Syntax: \"THREADID\" SP\
    \ nil\n    The NIL value is returned for the THREADID response data item when\n\
    \    the server mailbox does not support THREADID calculation.\n   Example:\n\
    \    C: 5 append inbox \"20-Mar-2018 03:07:37 +1100\" {733}\n    [...]\n    Subject:\
    \ Message A\n    Message-ID: <fake.1521475657.54797@example.com>\n    [...]\n\
    \    S: 5 OK [APPENDUID 1521475658 1] Completed\n    C: 11 append inbox \"20-Mar-2018\
    \ 03:07:37 +1100\" {793}\n    [...]\n    Subject: Re: Message A\n    Message-ID:\
    \ <fake.1521475657.21213@example.org>\n    References: <fake.1521475657.54797@example.com>\n\
    \    [...]\n    S: 11 OK [APPENDUID 1521475658 2] Completed\n    C: 17 append\
    \ inbox \"20-Mar-2018 03:07:37 +1100\" {736}\n    [...]\n    Subject: Message\
    \ C\n    Message-ID: <fake.1521475657.60280@example.com>\n    [...]\n    S: 17\
    \ OK [APPENDUID 1521475658 3] Completed\n    C: 22 fetch 1:* (emailid threadid)\n\
    \    S: * 1 FETCH (EMAILID (M6d99ac3275bb4e) THREADID (T64b478a75b7ea9))\n   \
    \ S: * 2 FETCH (EMAILID (M288836c4c7a762) THREADID (T64b478a75b7ea9))\n    S:\
    \ * 3 FETCH (EMAILID (M5fdc09b49ea703) THREADID (T11863d02dd95b5))\n    S: 22\
    \ OK Completed (0.000 sec)\n    C: 23 move 2 foo\n    S: * OK [COPYUID 1521475659\
    \ 2 1] Completed\n    S: * 2 EXPUNGE\n    S: 23 OK Completed\n    C: 24 fetch\
    \ 1:* (emailid threadid)\n    S: * 1 FETCH (EMAILID (M6d99ac3275bb4e) THREADID\
    \ (T64b478a75b7ea9))\n    S: * 2 FETCH (EMAILID (M5fdc09b49ea703) THREADID (T11863d02dd95b5))\n\
    \    S: 24 OK Completed (0.000 sec)\n    C: 25 select \"foo\"\n    C: 25 select\
    \ \"foo\"\n    [...]\n    S: 25 OK [READ-WRITE] Completed\n    C: 26 fetch 1:*\
    \ (emailid threadid)\n    S: * 1 FETCH (EMAILID (M288836c4c7a762) THREADID (T64b478a75b7ea9))\n\
    \    S: 26 OK Completed (0.000 sec)\n   Example: (no THREADID support)\n     \
    \         C: 26 fetch 1:* (emailid threadid)\n              S: * 1 FETCH (EMAILID\
    \ (M00000001) THREADID NIL)\n              S: * 2 FETCH (EMAILID (M00000002) THREADID\
    \ NIL)\n              S: 26 OK Completed (0.000 sec)\n"
- title: 6.  New Filters on SEARCH Command
  contents:
  - "6.  New Filters on SEARCH Command\n   This document defines the filters EMAILID\
    \ and THREADID on the SEARCH\n   command.\n   Syntax: \"EMAILID\" SP objectid\n\
    \         Messages whose EMAILID is exactly the specified ObjectID.\n   Syntax:\
    \ \"THREADID\" SP objectid\n        Messages whose THREADID is exactly the specified\
    \ ObjectID.\n   Example: (as if run before the MOVE shown above when the mailbox\
    \ had\n   three messages)\n                 C: 27 search emailid M6d99ac3275bb4e\n\
    \                 S: * SEARCH 1\n                 S: 27 OK Completed (1 msgs in\
    \ 0.000 secs)\n                 C: 28 search threadid T64b478a75b7ea9\n      \
    \           S: * SEARCH 1 2\n                 S: 28 OK Completed (2 msgs in 0.000\
    \ secs)\n"
- title: 7.  Formal Syntax
  contents:
  - "7.  Formal Syntax\n   The following syntax specification uses the Augmented Backus-Naur\n\
    \   Form (ABNF) [RFC5234] notation.  Elements not defined here can be\n   found\
    \ in the formal syntax of the ABNF [RFC5234], IMAP [RFC3501], and\n   IMAP ABNF\
    \ extensions [RFC4466] specifications.\n   Except as noted otherwise, all alphabetic\
    \ characters are case\n   insensitive.  The use of uppercase or lowercase characters\
    \ to define\n   token strings is for editorial clarity only.  Implementations\
    \ MUST\n   accept these strings in a case-insensitive fashion.\n   Please note\
    \ specifically that ObjectID values are case sensitive.\n      capability =/ \"\
    OBJECTID\"\n      fetch-att =/ \"EMAILID\" / \"THREADID\"\n      fetch-emailid-resp\
    \ = \"EMAILID\" SP \"(\" objectid \")\"\n              ; follows tagged-ext production\
    \ from [RFC4466]\n      fetch-threadid-resp = \"THREADID\" SP ( \"(\" objectid\
    \ \")\" / nil )\n              ; follows tagged-ext production from [RFC4466]\n\
    \      msg-att-static =/ fetch-emailid-resp / fetch-threadid-resp\n      objectid\
    \ = 1*255(ALPHA / DIGIT / \"_\" / \"-\")\n              ; characters in object\
    \ identifiers are case\n              ; significant\n      resp-text-code =/ \"\
    MAILBOXID\" SP \"(\" objectid \")\"\n              ; incorporated before the expansion\
    \ rule of\n              ;  atom [SP 1*<any TEXT-CHAR except \"]\">]\n       \
    \       ; that appears in [RFC3501]\n      search-key =/ \"EMAILID\" SP objectid\
    \ / \"THREADID\" SP objectid\n      status-att =/ \"MAILBOXID\"\n      status-att-val\
    \ =/ \"MAILBOXID\" SP \"(\" objectid \")\"\n              ; follows tagged-ext\
    \ production from [RFC4466]\n"
- title: 8.  Implementation Considerations
  contents:
  - '8.  Implementation Considerations

    '
- title: 8.1.  Assigning Object Identifiers
  contents:
  - "8.1.  Assigning Object Identifiers\n   All ObjectID values are allocated by the\
    \ server.\n   In the interest of reducing the possibilities of encoding mistakes,\n\
    \   ObjectIDs are restricted to a safe subset of possible byte values; in\n  \
    \ order to allow clients to allocate storage, they are restricted in\n   length.\n\
    \   An ObjectID is a string of 1 to 255 characters from the following set\n  \
    \ of 64 codepoints: a-z, A-Z, 0-9, _, -.  These characters are safe to\n   use\
    \ in almost any context (e.g., filesystems, URIs, IMAP atoms).\n   These are the\
    \ same characters defined as base64url in [RFC4648].\n   For maximum safety, servers\
    \ should also follow defensive allocation\n   strategies to avoid creating risks\
    \ where glob completion or data type\n   detection may be present (e.g., on filesystems\
    \ or in spreadsheets).\n   In particular, it is wise to avoid:\n   o  IDs starting\
    \ with a dash\n   o  IDs starting with digits\n   o  IDs that contain only digits\n\
    \   o  IDs that differ only by ASCII case (for example, A vs. a)\n   o  the specific\
    \ sequence of three characters NIL in any case (because\n      this sequence can\
    \ be confused with the IMAP protocol expression of\n      the null value)\n  \
    \ A good solution to these issues is to prefix every ID with a single\n   alphabetical\
    \ character.\n"
- title: 8.2.  Interaction with Special Cases
  contents:
  - "8.2.  Interaction with Special Cases\n   The case of RENAME INBOX may need special\
    \ handling because it has\n   special behavior, as defined in [RFC3501], Section\
    \ 6.3.5.\n   It is advisable (though not required) to have MAILBOXID be globally\n\
    \   unique, but it is only required to be unique within messages offered\n   to\
    \ a single client login to a single server hostname.  For example, a\n   proxy\
    \ that aggregates multiple independent servers MUST NOT advertise\n   the OBJECTID\
    \ capability unless it can guarantee that different\n   objects will never use\
    \ the same identifiers, even if backend object\n   identifiers collide.\n"
- title: 8.3.  Client Usage
  contents:
  - "8.3.  Client Usage\n   Servers that implement both RFC 6154 and this specification\
    \ should\n   optimize their execution of commands like UID SEARCH OR EMAILID 1234\n\
    \   EMAILID 4321.\n   Clients can assume that searching the all-mail mailbox using\
    \ OR/\n   EMAILID or OR/THREADID is a fast way to find messages again if some\n\
    \   other client has moved them out of the mailbox where they were\n   previously\
    \ seen.\n   Clients that cache data offline should fetch the EMAILID of all new\n\
    \   messages to avoid redownloading already-cached message details.\n   Clients\
    \ should fetch the MAILBOXID for any new mailboxes before\n   discarding cache\
    \ data for any mailbox that is no longer present on\n   the server so that they\
    \ can detect renames and avoid redownloading\n   data.\n"
- title: 8.4.  Advice to Client Implementers
  contents:
  - "8.4.  Advice to Client Implementers\n   In cases of server failure and disaster\
    \ recovery, or misbehaving\n   servers, it is possible that a client will be sent\
    \ invalid\n   information, e.g., identical ObjectIDs or ObjectIDs that have changed\n\
    \   where they MUST NOT change according to this document.\n   In a case where\
    \ a client detects inconsistent ObjectID responses from\n   a server, it SHOULD\
    \ fall back to relying on the guarantees of RFC\n   3501.  For simplicity, a client\
    \ MAY instead choose to discard its\n   entire cache and resync all state from\
    \ the server.\n   Client authors protecting against server misbehavior MUST ensure\
    \ that\n   their design cannot get into an infinite loop of discarding cache and\n\
    \   fetching the same data repeatedly without user interaction.\n"
- title: 9.  Future Considerations
  contents:
  - "9.  Future Considerations\n   This extension is intentionally defined to be compatible\
    \ with the\n   data model in [JMAP-MAIL].\n   A future extension could be proposed\
    \ to give a way to SELECT a\n   mailbox by MAILBOXID rather than name.\n   A future\
    \ extension to [RFC5228] could allow fileinto by MAILBOXID\n   rather than name.\n\
    \   An extension to allow fetching message content directly via EMAILID\n   and\
    \ message listings by THREADID could be proposed.\n"
- title: 10.  IANA Considerations
  contents:
  - "10.  IANA Considerations\n   IANA has added \"OBJECTID\" to the \"IMAP Capabilities\"\
    \ registry located\n   at <https://www.iana.org/assignments/imap-capabilities>\
    \ with a\n   reference to this document.\n   IANA has added \"MAILBOXID\" to the\
    \ \"IMAP Response Codes\" registry\n   located at <https://www.iana.org/assignments/imap-response-codes>\n\
    \   with a reference to this document.\n"
- title: 11.  Security Considerations
  contents:
  - "11.  Security Considerations\n   It is strongly advised that servers generate\
    \ ObjectIDs that are safe\n   to use as filesystem names and unlikely to be autodetected\
    \ as\n   numbers.  See implementation considerations.\n   If a digest is used\
    \ for ID generation, it must have a collision-\n   resistant property, so server\
    \ implementations are advised to monitor\n   current security research and choose\
    \ secure digests.  As the IDs are\n   generated by the server, it will be possible\
    \ to migrate to a new hash\n   by just using the new algorithm when creating new\
    \ IDs.  This is\n   particularly true if a prefix is used on each ID, which can\
    \ be\n   changed when the algorithm changes.\n   The use of a digest for ID generation\
    \ may be used as proof that a\n   particular sequence of bytes was seen by the\
    \ server.  However, this\n   is only a risk if IDs are leaked to clients who don't\
    \ have permission\n   to fetch the data directly.  Servers that are expected to\
    \ handle\n   highly sensitive data should consider this when choosing how to\n\
    \   create IDs.\n   See also the security considerations in [RFC3501], Section\
    \ 11.\n"
- title: 12.  References
  contents:
  - '12.  References

    '
- title: 12.1.  Normative References
  contents:
  - "12.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use in\
    \ RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119,\n  \
    \            DOI 10.17487/RFC2119, March 1997,\n              <https://www.rfc-editor.org/info/rfc2119>.\n\
    \   [RFC3501]  Crispin, M., \"INTERNET MESSAGE ACCESS PROTOCOL - VERSION\n   \
    \           4rev1\", RFC 3501, DOI 10.17487/RFC3501, March 2003,\n           \
    \   <https://www.rfc-editor.org/info/rfc3501>.\n   [RFC4315]  Crispin, M., \"\
    Internet Message Access Protocol (IMAP) -\n              UIDPLUS extension\",\
    \ RFC 4315, DOI 10.17487/RFC4315,\n              December 2005, <https://www.rfc-editor.org/info/rfc4315>.\n\
    \   [RFC4466]  Melnikov, A. and C. Daboo, \"Collected Extensions to IMAP4\n  \
    \            ABNF\", RFC 4466, DOI 10.17487/RFC4466, April 2006,\n           \
    \   <https://www.rfc-editor.org/info/rfc4466>.\n   [RFC5228]  Guenther, P., Ed.\
    \ and T. Showalter, Ed., \"Sieve: An Email\n              Filtering Language\"\
    , RFC 5228, DOI 10.17487/RFC5228,\n              January 2008, <https://www.rfc-editor.org/info/rfc5228>.\n\
    \   [RFC5234]  Crocker, D., Ed. and P. Overell, \"Augmented BNF for Syntax\n \
    \             Specifications: ABNF\", STD 68, RFC 5234,\n              DOI 10.17487/RFC5234,\
    \ January 2008,\n              <https://www.rfc-editor.org/info/rfc5234>.\n  \
    \ [RFC5256]  Crispin, M. and K. Murchison, \"Internet Message Access\n       \
    \       Protocol - SORT and THREAD Extensions\", RFC 5256,\n              DOI\
    \ 10.17487/RFC5256, June 2008,\n              <https://www.rfc-editor.org/info/rfc5256>.\n\
    \   [RFC5819]  Melnikov, A. and T. Sirainen, \"IMAP4 Extension for\n         \
    \     Returning STATUS Information in Extended LIST\", RFC 5819,\n           \
    \   DOI 10.17487/RFC5819, March 2010,\n              <https://www.rfc-editor.org/info/rfc5819>.\n\
    \   [RFC6851]  Gulbrandsen, A. and N. Freed, Ed., \"Internet Message\n       \
    \       Access Protocol (IMAP) - MOVE Extension\", RFC 6851,\n              DOI\
    \ 10.17487/RFC6851, January 2013,\n              <https://www.rfc-editor.org/info/rfc6851>.\n\
    \   [RFC8174]  Leiba, B., \"Ambiguity of Uppercase vs Lowercase in RFC\n     \
    \         2119 Key Words\", BCP 14, RFC 8174, DOI 10.17487/RFC8174,\n        \
    \      May 2017, <https://www.rfc-editor.org/info/rfc8174>.\n"
- title: 12.2.  Informative References
  contents:
  - "12.2.  Informative References\n   [JMAP-MAIL]\n              Jenkins, N. and\
    \ C. Newman, \"JMAP for Mail\", Work in\n              Progress, draft-ietf-jmap-mail-07,\
    \ August 2018.\n   [RFC4122]  Leach, P., Mealling, M., and R. Salz, \"A Universally\n\
    \              Unique IDentifier (UUID) URN Namespace\", RFC 4122,\n         \
    \     DOI 10.17487/RFC4122, July 2005,\n              <https://www.rfc-editor.org/info/rfc4122>.\n\
    \   [RFC4648]  Josefsson, S., \"The Base16, Base32, and Base64 Data\n        \
    \      Encodings\", RFC 4648, DOI 10.17487/RFC4648, October 2006,\n          \
    \    <https://www.rfc-editor.org/info/rfc4648>.\n"
- title: Appendix A.  Ideas for Implementing Object Identifiers
  contents:
  - "Appendix A.  Ideas for Implementing Object Identifiers\n   Ideas for calculating\
    \ MAILBOXID:\n   o  Universally Unique Identifier (UUID) [RFC4122]\n   o  Server-assigned\
    \ sequence number (guaranteed not to be reused)\n   Ideas for implementing EMAILID:\n\
    \   o  Digest of message content (RFC822 bytes) -- expensive unless\n      cached\n\
    \   o  UUID [RFC4122]\n   o  Server-assigned sequence number (guaranteed not to\
    \ be reused)\n   Ideas for implementing THREADID:\n   o  Derive from EMAILID of\
    \ first seen message in the thread.\n   o  UUID [RFC4122]\n   o  Server-assigned\
    \ sequence number (guaranteed not to be reused)\n   There is a need to index and\
    \ look up reference/in-reply-to data at\n   message creation to efficiently find\
    \ matching messages for threading.\n   Threading may be either across mailboxes\
    \ or within each mailbox only.\n   The server has significant leeway here.\n"
- title: Acknowledgments
  contents:
  - "Acknowledgments\n   The author would like to thank the EXTRA working group at\
    \ IETF for\n   feedback and advice -- in particular, Arnt Gulbrandsen, Brandon\
    \ Long,\n   Chris Newman, and Josef Sipek.\n   This document drew inspiration\
    \ from the Gmail X-GM-THRID and X-GM-\n   MSGID implementations as currently defined\
    \ at\n   <https://developers.google.com/gmail/imap/imap-extensions>, as well\n\
    \   as the X-GUID implementation in the Dovecot server.\n"
- title: Author's Address
  contents:
  - "Author's Address\n   Bron Gondwana (editor)\n   FastMail\n   Level 2, 114 William\
    \ St\n   Melbourne  VIC 3000\n   Australia\n   Email: brong@fastmailteam.com\n\
    \   URI:   https://www.fastmail.com\n"
