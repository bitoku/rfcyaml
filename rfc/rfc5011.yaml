- title: __initial_text__
  contents:
  - '        Automated Updates of DNS Security (DNSSEC) Trust Anchors

    '
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Abstract
  contents:
  - "Abstract\n   This document describes a means for automated, authenticated, and\n\
    \   authorized updating of DNSSEC \"trust anchors\".  The method provides\n  \
    \ protection against N-1 key compromises of N keys in the trust point\n   key\
    \ set.  Based on the trust established by the presence of a current\n   anchor,\
    \ other anchors may be added at the same place in the\n   hierarchy, and, ultimately,\
    \ supplant the existing anchor(s).\n   This mechanism will require changes to\
    \ resolver management behavior\n   (but not resolver resolution behavior), and\
    \ the addition of a single\n   flag bit to the DNSKEY record.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................2\n\
    \      1.1. Compliance Nomenclature ....................................3\n  \
    \ 2. Theory of Operation .............................................3\n    \
    \  2.1. Revocation .................................................4\n      2.2.\
    \ Add Hold-Down ..............................................4\n      2.3. Active\
    \ Refresh .............................................5\n      2.4. Resolver\
    \ Parameters ........................................6\n           2.4.1. Add\
    \ Hold-Down Time ..................................6\n           2.4.2. Remove\
    \ Hold-Down Time ...............................6\n           2.4.3. Minimum Trust\
    \ Anchors per Trust Point ...............6\n   3. Changes to DNSKEY RDATA Wire\
    \ Format .............................6\n   4. State Table .....................................................6\n\
    \      4.1. Events .....................................................7\n  \
    \    4.2. States .....................................................7\n   5.\
    \ Trust Point Deletion ............................................8\n   6. Scenarios\
    \ - Informative .........................................9\n      6.1. Adding\
    \ a Trust Anchor ......................................9\n      6.2. Deleting\
    \ a Trust Anchor ....................................9\n      6.3. Key Roll-Over\
    \ .............................................10\n      6.4. Active Key Compromised\
    \ ....................................10\n      6.5. Stand-by Key Compromised\
    \ ..................................10\n      6.6. Trust Point Deletion ......................................10\n\
    \   7. IANA Considerations ............................................11\n  \
    \ 8. Security Considerations ........................................11\n    \
    \  8.1. Key Ownership vs. Acceptance Policy .......................11\n      8.2.\
    \ Multiple Key Compromise ...................................12\n      8.3. Dynamic\
    \ Updates ...........................................12\n   9. Normative References\
    \ ...........................................12\n   10. Informative References\
    \ ........................................12\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   As part of the reality of fielding DNSSEC (Domain Name System\n\
    \   Security Extensions) [RFC4033] [RFC4034] [RFC4035], the community has\n  \
    \ come to the realization that there will not be one signed name space,\n   but\
    \ rather islands of signed name spaces each originating from\n   specific points\
    \ (i.e., 'trust points') in the DNS tree.  Each of\n   those islands will be identified\
    \ by the trust point name, and\n   validated by at least one associated public\
    \ key.  For the purpose of\n   this document, we'll call the association of that\
    \ name and a\n   particular key a 'trust anchor'.  A particular trust point can\
    \ have\n   more than one key designated as a trust anchor.\n   For a DNSSEC-aware\
    \ resolver to validate information in a DNSSEC\n   protected branch of the hierarchy,\
    \ it must have knowledge of a trust\n   anchor applicable to that branch.  It\
    \ may also have more than one\n   trust anchor for any given trust point.  Under\
    \ current rules, a chain\n   of trust for DNSSEC-protected data that chains its\
    \ way back to ANY\n   known trust anchor is considered 'secure'.\n   Because of\
    \ the probable balkanization of the DNSSEC tree due to\n   signing voids at key\
    \ locations, a resolver may need to know literally\n   thousands of trust anchors\
    \ to perform its duties (e.g., consider an\n   unsigned \".COM\").  Requiring\
    \ the owner of the resolver to manually\n   manage these many relationships is\
    \ problematic.  It's even more\n   problematic when considering the eventual requirement\
    \ for key\n   replacement/update for a given trust anchor.  The mechanism described\n\
    \   herein won't help with the initial configuration of the trust anchors\n  \
    \ in the resolvers, but should make trust point key\n   replacement/rollover more\
    \ viable.\n   As mentioned above, this document describes a mechanism whereby\
    \ a\n   resolver can update the trust anchors for a given trust point, mainly\n\
    \   without human intervention at the resolver.  There are some corner\n   cases\
    \ discussed (e.g., multiple key compromise) that may require\n   manual intervention,\
    \ but they should be few and far between.  This\n   document DOES NOT discuss\
    \ the general problem of the initial\n   configuration of trust anchors for the\
    \ resolver.\n"
- title: 1.1.  Compliance Nomenclature
  contents:
  - "1.1.  Compliance Nomenclature\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\"\
    , \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"\
    MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described\
    \ in BCP 14, [RFC2119].\n"
- title: 2.  Theory of Operation
  contents:
  - "2.  Theory of Operation\n   The general concept of this mechanism is that existing\
    \ trust anchors\n   can be used to authenticate new trust anchors at the same\
    \ point in\n   the DNS hierarchy.  When a zone operator adds a new SEP key (i.e.,\
    \ a\n   DNSKEY with the Secure Entry Point bit set) (see [RFC4034], Section\n\
    \   2.1.1) to a trust point DNSKEY RRSet, and when that RRSet is\n   validated\
    \ by an existing trust anchor, then the resolver can add the\n   new key to its\
    \ set of valid trust anchors for that trust point.\n   There are some issues with\
    \ this approach that need to be mitigated.\n   For example, a compromise of one\
    \ of the existing keys could allow an\n   attacker to add their own 'valid' data.\
    \  This implies a need for a\n   method to revoke an existing key regardless of\
    \ whether or not that\n   key is compromised.  As another example, assuming a\
    \ single key\n   compromise, we need to prevent an attacker from adding a new\
    \ key and\n   revoking all the other old keys.\n"
- title: 2.1.  Revocation
  contents:
  - "2.1.  Revocation\n   Assume two trust anchor keys A and B.  Assume that B has\
    \ been\n   compromised.  Without a specific revocation bit, B could invalidate\
    \ A\n   simply by sending out a signed trust point key set that didn't\n   contain\
    \ A.  To fix this, we add a mechanism that requires knowledge\n   of the private\
    \ key of a DNSKEY to revoke that DNSKEY.\n   A key is considered revoked when\
    \ the resolver sees the key in a\n   self-signed RRSet and the key has the REVOKE\
    \ bit (see Section 7\n   below) set to '1'.  Once the resolver sees the REVOKE\
    \ bit, it MUST\n   NOT use this key as a trust anchor or for any other purpose\
    \ except to\n   validate the RRSIG it signed over the DNSKEY RRSet specifically\
    \ for\n   the purpose of validating the revocation.  Unlike the 'Add' operation\n\
    \   below, revocation is immediate and permanent upon receipt of a valid\n   revocation\
    \ at the resolver.\n   A self-signed RRSet is a DNSKEY RRSet that contains the\
    \ specific\n   DNSKEY and for which there is a corresponding validated RRSIG record.\n\
    \   It's not a special DNSKEY RRSet, just a way of describing the\n   validation\
    \ requirements for that RRSet.\n   N.B.: A DNSKEY with the REVOKE bit set has\
    \ a different fingerprint\n   than one without the bit set.  This affects the\
    \ matching of a DNSKEY\n   to DS records in the parent [RFC3755], or the fingerprint\
    \ stored at a\n   resolver used to configure a trust point.\n   In the given example,\
    \ the attacker could revoke B because it has\n   knowledge of B's private key,\
    \ but could not revoke A.\n"
- title: 2.2.  Add Hold-Down
  contents:
  - "2.2.  Add Hold-Down\n   Assume two trust point keys A and B.  Assume that B has\
    \ been\n   compromised.  An attacker could generate and add a new trust anchor\n\
    \   key C (by adding C to the DNSKEY RRSet and signing it with B), and\n   then\
    \ invalidate the compromised key.  This would result in both the\n   attacker\
    \ and owner being able to sign data in the zone and have it\n   accepted as valid\
    \ by resolvers.\n   To mitigate but not completely solve this problem, we add\
    \ a hold-down\n   time to the addition of the trust anchor.  When the resolver\
    \ sees a\n   new SEP key in a validated trust point DNSKEY RRSet, the resolver\n\
    \   starts an acceptance timer, and remembers all the keys that validated\n  \
    \ the RRSet.  If the resolver ever sees the DNSKEY RRSet without the\n   new key\
    \ but validly signed, it stops the acceptance process for that\n   key and resets\
    \ the acceptance timer.  If all of the keys that were\n   originally used to validate\
    \ this key are revoked prior to the timer\n   expiring, the resolver stops the\
    \ acceptance process and resets the\n   timer.\n   Once the timer expires, the\
    \ new key will be added as a trust anchor\n   the next time the validated RRSet\
    \ with the new key is seen at the\n   resolver.  The resolver MUST NOT treat the\
    \ new key as a trust anchor\n   until the hold-down time expires AND it has retrieved\
    \ and validated a\n   DNSKEY RRSet after the hold-down time that contains the\
    \ new key.\n   N.B.: Once the resolver has accepted a key as a trust anchor, the\
    \ key\n   MUST be considered a valid trust anchor by that resolver until\n   explicitly\
    \ revoked as described above.\n   In the given example, the zone owner can recover\
    \ from a compromise by\n   revoking B and adding a new key D and signing the DNSKEY\
    \ RRSet with\n   both A and B.\n   The reason this does not completely solve the\
    \ problem has to do with\n   the distributed nature of DNS.  The resolver only\
    \ knows what it sees.\n   A determined attacker who holds one compromised key\
    \ could keep a\n   single resolver from realizing that the key had been compromised\
    \ by\n   intercepting 'real' data from the originating zone and substituting\n\
    \   their own (e.g., using the example, signed only by B).  This is no\n   worse\
    \ than the current situation assuming a compromised key.\n"
- title: 2.3.  Active Refresh
  contents:
  - "2.3.  Active Refresh\n   A resolver that has been configured for an automatic\
    \ update of keys\n   from a particular trust point MUST query that trust point\
    \ (e.g., do a\n   lookup for the DNSKEY RRSet and related RRSIG records) no less\
    \ often\n   than the lesser of 15 days, half the original TTL for the DNSKEY\n\
    \   RRSet, or half the RRSIG expiration interval and no more often than\n   once\
    \ per hour.  The expiration interval is the amount of time from\n   when the RRSIG\
    \ was last retrieved until the expiration time in the\n   RRSIG.  That is, queryInterval\
    \ = MAX(1 hr, MIN (15 days, 1/2*OrigTTL,\n   1/2*RRSigExpirationInterval))\n \
    \  If the query fails, the resolver MUST repeat the query until\n   satisfied\
    \ no more often than once an hour and no less often than the\n   lesser of 1 day,\
    \ 10% of the original TTL, or 10% of the original\n   expiration interval.  That\
    \ is, retryTime = MAX (1 hour, MIN (1 day,\n   .1 * origTTL, .1 * expireInterval)).\n"
- title: 2.4.  Resolver Parameters
  contents:
  - '2.4.  Resolver Parameters

    '
- title: 2.4.1.  Add Hold-Down Time
  contents:
  - "2.4.1.  Add Hold-Down Time\n   The add hold-down time is 30 days or the expiration\
    \ time of the\n   original TTL of the first trust point DNSKEY RRSet that contained\
    \ the\n   new key, whichever is greater.  This ensures that at least two\n   validated\
    \ DNSKEY RRSets that contain the new key MUST be seen by the\n   resolver prior\
    \ to the key's acceptance.\n"
- title: 2.4.2.  Remove Hold-Down Time
  contents:
  - "2.4.2.  Remove Hold-Down Time\n   The remove hold-down time is 30 days.  This\
    \ parameter is solely a key\n   management database bookeeping parameter.  Failure\
    \ to remove\n   information about the state of defunct keys from the database\
    \ will\n   not adversely impact the security of this protocol, but may end up\n\
    \   with a database cluttered with obsolete key information.\n"
- title: 2.4.3.  Minimum Trust Anchors per Trust Point
  contents:
  - "2.4.3.  Minimum Trust Anchors per Trust Point\n   A compliant resolver MUST be\
    \ able to manage at least five SEP keys\n   per trust point.\n"
- title: 3.  Changes to DNSKEY RDATA Wire Format
  contents:
  - "3.  Changes to DNSKEY RDATA Wire Format\n   Bit 8 of the DNSKEY Flags field is\
    \ designated as the 'REVOKE' flag.\n   If this bit is set to '1', AND the resolver\
    \ sees an RRSIG(DNSKEY)\n   signed by the associated key, then the resolver MUST\
    \ consider this\n   key permanently invalid for all purposes except for validating\
    \ the\n   revocation.\n"
- title: 4.  State Table
  contents:
  - "4.  State Table\n   The most important thing to understand is the resolver's\
    \ view of any\n   key at a trust point.  The following state table describes this\
    \ view\n   at various points in the key's lifetime.  The table is a normative\n\
    \   part of this specification.  The initial state of the key is 'Start'.\n  \
    \ The resolver's view of the state of the key changes as various events\n   occur.\n\
    \   This is the state of a trust-point key as seen from the resolver.\n   The\
    \ column on the left indicates the current state.  The header at\n   the top shows\
    \ the next state.  The intersection of the two shows the\n   event that will cause\
    \ the state to transition from the current state\n   to the next.\n          \
    \                   NEXT STATE\n           --------------------------------------------------\n\
    \    FROM   |Start  |AddPend |Valid  |Missing|Revoked|Removed|\n   ----------------------------------------------------------\n\
    \   Start   |       |NewKey  |       |       |       |       |\n   ----------------------------------------------------------\n\
    \   AddPend |KeyRem |        |AddTime|       |       |       |\n   ----------------------------------------------------------\n\
    \   Valid   |       |        |       |KeyRem |Revbit |       |\n   ----------------------------------------------------------\n\
    \   Missing |       |        |KeyPres|       |Revbit |       |\n   ----------------------------------------------------------\n\
    \   Revoked |       |        |       |       |       |RemTime|\n   ----------------------------------------------------------\n\
    \   Removed |       |        |       |       |       |       |\n   ----------------------------------------------------------\n\
    \                           State Table\n"
- title: 4.1.  Events
  contents:
  - "4.1.  Events\n   NewKey   The resolver sees a valid DNSKEY RRSet with a new SEP\
    \ key.\n            That key will become a new trust anchor for the named trust\n\
    \            point after it's been present in the RRSet for at least 'add\n  \
    \          time'.\n   KeyPres  The key has returned to the valid DNSKEY RRSet.\n\
    \   KeyRem   The resolver sees a valid DNSKEY RRSet that does not contain\n  \
    \          this key.\n   AddTime  The key has been in every valid DNSKEY RRSet\
    \ seen for at\n            least the 'add time'.\n   RemTime  A revoked key has\
    \ been missing from the trust-point DNSKEY\n            RRSet for sufficient time\
    \ to be removed from the trust set.\n   RevBit   The key has appeared in the trust\
    \ anchor DNSKEY RRSet with\n            its \"REVOKED\" bit set, and there is\
    \ an RRSig over the DNSKEY\n            RRSet signed by this key.\n"
- title: 4.2.  States
  contents:
  - "4.2.  States\n   Start    The key doesn't yet exist as a trust anchor at the\
    \ resolver.\n            It may or may not exist at the zone server, but either\n\
    \            hasn't yet been seen at the resolver or was seen but was\n      \
    \      absent from the last DNSKEY RRSet (e.g., KeyRem event).\n   AddPend  The\
    \ key has been seen at the resolver, has its 'SEP' bit\n            set, and has\
    \ been included in a validated DNSKEY RRSet.\n            There is a hold-down\
    \ time for the key before it can be used\n            as a trust anchor.\n   Valid\
    \    The key has been seen at the resolver and has been included\n           \
    \ in all validated DNSKEY RRSets from the time it was first\n            seen\
    \ through the hold-down time.  It is now valid for\n            verifying RRSets\
    \ that arrive after the hold-down time.\n            Clarification: The DNSKEY\
    \ RRSet does not need to be\n            continuously present at the resolver\
    \ (e.g., its TTL might\n            expire).  If the RRSet is seen and is validated\
    \ (i.e.,\n            verifies against an existing trust anchor), this key MUST\
    \ be\n            in the RRSet, otherwise a 'KeyRem' event is triggered.\n   Missing\
    \  This is an abnormal state.  The key remains a valid trust-\n            point\
    \ key, but was not seen at the resolver in the last\n            validated DNSKEY\
    \ RRSet.  This is an abnormal state because\n            the zone operator should\
    \ be using the REVOKE bit prior to\n            removal.\n   Revoked  This is\
    \ the state a key moves to once the resolver sees an\n            RRSIG(DNSKEY)\
    \ signed by this key where that DNSKEY RRSet\n            contains this key with\
    \ its REVOKE bit set to '1'.  Once in\n            this state, this key MUST permanently\
    \ be considered invalid\n            as a trust anchor.\n   Removed  After a fairly\
    \ long hold-down time, information about this\n            key may be purged from\
    \ the resolver.  A key in the removed\n            state MUST NOT be considered\
    \ a valid trust anchor.  (Note:\n            this state is more or less equivalent\
    \ to the \"Start\" state,\n            except that it's bad practice to re-introduce\
    \ previously\n            used keys -- think of this as the holding state for\
    \ all the\n            old keys for which the resolver no longer needs to track\n\
    \            state.)\n"
- title: 5.  Trust Point Deletion
  contents:
  - "5.  Trust Point Deletion\n   A trust point that has all of its trust anchors\
    \ revoked is considered\n   deleted and is treated as if the trust point was never\
    \ configured.\n   If there are no superior configured trust points, data at and\
    \ below\n   the deleted trust point are considered insecure by the resolver. \
    \ If\n   there ARE superior configured trust points, data at and below the\n \
    \  deleted trust point are evaluated with respect to the superior trust\n   point(s).\n\
    \   Alternately, a trust point that is subordinate to another configured\n   trust\
    \ point MAY be deleted by a resolver after 180 days, where such a\n   subordinate\
    \ trust point validly chains to a superior trust point.\n   The decision to delete\
    \ the subordinate trust anchor is a local\n   configuration decision.  Once the\
    \ subordinate trust point is deleted,\n   validation of the subordinate zone is\
    \ dependent on validating the\n   chain of trust to the superior trust point.\n"
- title: 6.  Scenarios - Informative
  contents:
  - "6.  Scenarios - Informative\n   The suggested model for operation is to have\
    \ one active key and one\n   stand-by key at each trust point.  The active key\
    \ will be used to\n   sign the DNSKEY RRSet.  The stand-by key will not normally\
    \ sign this\n   RRSet, but the resolver will accept it as a trust anchor if/when\
    \ it\n   sees the signature on the trust point DNSKEY RRSet.\n   Since the stand-by\
    \ key is not in active signing use, the associated\n   private key may (and should)\
    \ be provided with additional protections\n   not normally available to a key\
    \ that must be used frequently (e.g.,\n   locked in a safe, split among many parties,\
    \ etc).  Notionally, the\n   stand-by key should be less subject to compromise\
    \ than an active key,\n   but that will be dependent on operational concerns not\
    \ addressed\n   here.\n"
- title: 6.1.  Adding a Trust Anchor
  contents:
  - "6.1.  Adding a Trust Anchor\n   Assume an existing trust anchor key 'A'.\n  \
    \ 1.  Generate a new key pair.\n   2.  Create a DNSKEY record from the key pair\
    \ and set the SEP and Zone\n       Key bits.\n   3.  Add the DNSKEY to the RRSet.\n\
    \   4.  Sign the DNSKEY RRSet ONLY with the existing trust anchor key -\n    \
    \   'A'.\n   5.  Wait for various resolvers' timers to go off and for them to\n\
    \       retrieve the new DNSKEY RRSet and signatures.\n   6.  The new trust anchor\
    \ will be populated at the resolvers on the\n       schedule described by the\
    \ state table and update algorithm -- see\n       Sections 2 and 4 above.\n"
- title: 6.2.  Deleting a Trust Anchor
  contents:
  - "6.2.  Deleting a Trust Anchor\n   Assume existing trust anchors 'A' and 'B' and\
    \ that you want to revoke\n   and delete 'A'.\n   1.  Set the revocation bit on\
    \ key 'A'.\n   2.  Sign the DNSKEY RRSet with both 'A' and 'B'.  'A' is now revoked.\n\
    \       The operator should include the revoked 'A' in the RRSet for at\n    \
    \   least the remove hold-down time, but then may remove it from the\n       DNSKEY\
    \ RRSet.\n"
- title: 6.3.  Key Roll-Over
  contents:
  - "6.3.  Key Roll-Over\n   Assume existing keys A and B. 'A' is actively in use\
    \ (i.e. has been\n   signing the DNSKEY RRSet).  'B' was the stand-by key. (i.e.\
    \ has been\n   in the DNSKEY RRSet and is a valid trust anchor, but wasn't being\n\
    \   used to sign the RRSet).\n      1.  Generate a new key pair 'C'.\n      2.\
    \  Add 'C' to the DNSKEY RRSet.\n      3.  Set the revocation bit on key 'A'.\n\
    \      4.  Sign the RRSet with 'A' and 'B'.\n   'A' is now revoked, 'B' is now\
    \ the active key, and 'C' will be the\n   stand-by key once the hold-down expires.\
    \  The operator should include\n   the revoked 'A' in the RRSet for at least the\
    \ remove hold-down time,\n   but may then remove it from the DNSKEY RRSet.\n"
- title: 6.4.  Active Key Compromised
  contents:
  - "6.4.  Active Key Compromised\n   This is the same as the mechanism for Key Roll-Over\
    \ (Section 6.3)\n   above, assuming 'A' is the active key.\n"
- title: 6.5.  Stand-by Key Compromised
  contents:
  - "6.5.  Stand-by Key Compromised\n   Using the same assumptions and naming conventions\
    \ as Key Roll-Over\n   (Section 6.3) above:\n      1.  Generate a new key pair\
    \ 'C'.\n      2.  Add 'C' to the DNSKEY RRSet.\n      3.  Set the revocation bit\
    \ on key 'B'.\n      4.  Sign the RRSet with 'A' and 'B'.\n   'B' is now revoked,\
    \ 'A' remains the active key, and 'C' will be the\n   stand-by key once the hold-down\
    \ expires.  'B' should continue to be\n   included in the RRSet for the remove\
    \ hold-down time.\n"
- title: 6.6.  Trust Point Deletion
  contents:
  - "6.6.  Trust Point Deletion\n   To delete a trust point that is subordinate to\
    \ another configured\n   trust point (e.g., example.com to .com) requires some\
    \ juggling of the\n   data.  The specific process is:\n   1.  Generate a new DNSKEY\
    \ and DS record and provide the DS record to\n       the parent along with DS\
    \ records for the old keys.\n   2.  Once the parent has published the DSs, add\
    \ the new DNSKEY to the\n       RRSet and revoke ALL of the old keys at the same\
    \ time, while\n       signing the DNSKEY RRSet with all of the old and new keys.\n\
    \   3.  After 30 days, stop publishing the old, revoked keys and remove\n    \
    \   any corresponding DS records in the parent.\n   Revoking the old trust-point\
    \ keys at the same time as adding new keys\n   that chain to a superior trust\
    \ prevents the resolver from adding the\n   new keys as trust anchors.  Adding\
    \ DS records for the old keys avoids\n   a race condition where either the subordinate\
    \ zone becomes unsecure\n   (because the trust point was deleted) or becomes bogus\
    \ (because it\n   didn't chain to the superior zone).\n"
- title: 7.  IANA Considerations
  contents:
  - "7.  IANA Considerations\n   The IANA has assigned a bit in the DNSKEY flags field\
    \ (see Section 7\n   of [RFC4034]) for the REVOKE bit (8).\n"
- title: 8.  Security Considerations
  contents:
  - "8.  Security Considerations\n   In addition to the following sections, see also\
    \ Theory of Operation\n   above (Section 2) and especially Section 2.2 for related\
    \ discussions.\n   Security considerations for trust anchor rollover not specific\
    \ to\n   this protocol are discussed in [RFC4986].\n"
- title: 8.1.  Key Ownership vs. Acceptance Policy
  contents:
  - "8.1.  Key Ownership vs. Acceptance Policy\n   The reader should note that, while\
    \ the zone owner is responsible for\n   creating and distributing keys, it's wholly\
    \ the decision of the\n   resolver owner as to whether to accept such keys for\
    \ the\n   authentication of the zone information.  This implies the decision to\n\
    \   update trust-anchor keys based on trusting a current trust-anchor key\n  \
    \ is also the resolver owner's decision.\n   The resolver owner (and resolver\
    \ implementers) MAY choose to permit\n   or prevent key status updates based on\
    \ this mechanism for specific\n   trust points.  If they choose to prevent the\
    \ automated updates, they\n   will need to establish a mechanism for manual or\
    \ other out-of-band\n   updates, which are outside the scope of this document.\n"
- title: 8.2.  Multiple Key Compromise
  contents:
  - "8.2.  Multiple Key Compromise\n   This scheme permits recovery as long as at\
    \ least one valid trust-\n   anchor key remains uncompromised, e.g., if there\
    \ are three keys, you\n   can recover if two of them are compromised.  The zone\
    \ owner should\n   determine their own level of comfort with respect to the number\
    \ of\n   active, valid trust anchors in a zone and should be prepared to\n   implement\
    \ recovery procedures once they detect a compromise.  A\n   manual or other out-of-band\
    \ update of all resolvers will be required\n   if all trust-anchor keys at a trust\
    \ point are compromised.\n"
- title: 8.3.  Dynamic Updates
  contents:
  - "8.3.  Dynamic Updates\n   Allowing a resolver to update its trust anchor set\
    \ based on in-band\n   key information is potentially less secure than a manual\
    \ process.\n   However, given the nature of the DNS, the number of resolvers that\n\
    \   would require update if a trust anchor key were compromised, and the\n   lack\
    \ of a standard management framework for DNS, this approach is no\n   worse than\
    \ the existing situation.\n"
- title: 9.  Normative References
  contents:
  - "9.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use in RFCs\
    \ to Indicate\n              Requirement Levels\", BCP 14, RFC 2119, March 1997.\n\
    \   [RFC3755]  Weiler, S., \"Legacy Resolver Compatibility for Delegation\n  \
    \            Signer (DS)\", RFC 3755, May 2004.\n   [RFC4033]  Arends, R., Austein,\
    \ R., Larson, M., Massey, D., and S.\n              Rose, \"DNS Security Introduction\
    \ and Requirements\", RFC\n              4033, March 2005.\n   [RFC4034]  Arends,\
    \ R., Austein, R., Larson, M., Massey, D., and S.\n              Rose, \"Resource\
    \ Records for the DNS Security Extensions\",\n              RFC 4034, March 2005.\n\
    \   [RFC4035]  Arends, R., Austein, R., Larson, M., Massey, D., and S.\n     \
    \         Rose, \"Protocol Modifications for the DNS Security\n              Extensions\"\
    , RFC 4035, March 2005.\n"
- title: 10.  Informative References
  contents:
  - "10.  Informative References\n   [RFC4986]  Eland, H., Mundy, R., Crocker, S.,\
    \ and S. Krishnaswamy,\n              \"Requirements Related to DNS Security (DNSSEC)\
    \ Trust\n              Anchor Rollover\", RFC 4986, August 2007.\n"
- title: Author's Address
  contents:
  - "Author's Address\n   Michael StJohns\n   Independent\n   EMail: mstjohns@comcast.net\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The IETF Trust (2007).\n   This document\
    \ is subject to the rights, licenses and restrictions\n   contained in BCP 78,\
    \ and except as set forth therein, the authors\n   retain all their rights.\n\
    \   This document and the information contained herein are provided on an\n  \
    \ \"AS IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n  \
    \ OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY, THE IETF TRUST AND\n   THE\
    \ INTERNET ENGINEERING TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS\n   OR IMPLIED,\
    \ INCLUDING BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF\n   THE INFORMATION\
    \ HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY\
    \ OR FITNESS FOR A PARTICULAR PURPOSE.\n"
- title: Intellectual Property
  contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or\
    \ scope of any\n   Intellectual Property Rights or other rights that might be\
    \ claimed to\n   pertain to the implementation or use of the technology described\
    \ in\n   this document or the extent to which any license under such rights\n\
    \   might or might not be available; nor does it represent that it has\n   made\
    \ any independent effort to identify any such rights.  Information\n   on the\
    \ procedures with respect to rights in RFC documents can be\n   found in BCP 78\
    \ and BCP 79.\n   Copies of IPR disclosures made to the IETF Secretariat and any\n\
    \   assurances of licenses to be made available, or the result of an\n   attempt\
    \ made to obtain a general license or permission for the use of\n   such proprietary\
    \ rights by implementers or users of this\n   specification can be obtained from\
    \ the IETF on-line IPR repository at\n   http://www.ietf.org/ipr.\n   The IETF\
    \ invites any interested party to bring to its attention any\n   copyrights, patents\
    \ or patent applications, or other proprietary\n   rights that may cover technology\
    \ that may be required to implement\n   this standard.  Please address the information\
    \ to the IETF at\n   ietf-ipr@ietf.org.\n"
