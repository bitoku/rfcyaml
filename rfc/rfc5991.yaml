- title: __initial_text__
  contents:
  - '                        Teredo Security Updates

    '
- title: Abstract
  contents:
  - "Abstract\n   The Teredo protocol defines a set of flags that are embedded in\
    \ every\n   Teredo IPv6 address.  This document specifies a set of security\n\
    \   updates that modify the use of this flags field, but are backward\n   compatible.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This\
    \ document is a product of the Internet Engineering Task Force\n   (IETF).  It\
    \ represents the consensus of the IETF community.  It has\n   received public\
    \ review and has been approved for publication by the\n   Internet Engineering\
    \ Steering Group (IESG).  Further information on\n   Internet Standards is available\
    \ in Section 2 of RFC 5741.\n   Information about the current status of this document,\
    \ any errata,\n   and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc5991.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2010 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n   This document\
    \ may contain material from IETF Documents or IETF\n   Contributions published\
    \ or made publicly available before November\n   10, 2008.  The person(s) controlling\
    \ the copyright in some of this\n   material may not have granted the IETF Trust\
    \ the right to allow\n   modifications of such material outside the IETF Standards\
    \ Process.\n   Without obtaining an adequate license from the person(s) controlling\n\
    \   the copyright in such materials, this document may not be modified\n   outside\
    \ the IETF Standards Process, and derivative works of it may\n   not be created\
    \ outside the IETF Standards Process, except to format\n   it for publication\
    \ as an RFC or to translate it into languages other\n   than English.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................2\n\
    \   2. Terminology .....................................................3\n  \
    \ 3. Specification ...................................................4\n    \
    \  3.1. Random Address Flags .......................................4\n      3.2.\
    \ Deprecation of Cone Bit ....................................6\n   4. Security\
    \ Considerations .........................................7\n   5. Acknowledgments\
    \ .................................................7\n   6. References ......................................................8\n\
    \      6.1. Normative References .......................................8\n  \
    \    6.2. Informative References .....................................8\n   Appendix\
    \ A.  Implementation Status .................................9\n   Appendix B.\
    \  Resistance to Address Prediction ......................9\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   Teredo [RFC4380] defines a set of flags that are embedded\
    \ in every\n   Teredo IPv6 address.  This document specifies a set of security\n\
    \   updates that modify the use of this flags field, but are backwards\n   compatible.\
    \  This document updates RFC 4380.\n   The Flags field in a Teredo IPv6 address\
    \ has 13 unused bits out of a\n   total of 16 bits.  To guard against address-scanning\
    \ risks [RFC5157]\n   from malicious users, this update randomizes 12 of the 13\
    \ unused bits\n   when configuring the Teredo IPv6 address.  Even if an attacker\
    \ were\n   able to determine the external (mapped) IPv4 address and port\n   assigned\
    \ by a NAT to the Teredo client, the attacker would still need\n   to attack a\
    \ range of 4,096 IPv6 addresses to determine the actual\n   Teredo IPv6 address\
    \ of the client.\n   The cone bit in a Teredo IPv6 address indicates whether a\
    \ peer needs\n   to send Teredo control messages before communicating with a Teredo\n\
    \   IPv6 address.  Unfortunately, it may also have some value in terms of\n  \
    \ profiling to the extent that it reveals the security posture of the\n   network.\
    \  If the cone bit is set, an attacker may decide it is\n   fruitful to port-scan\
    \ the embedded external IPv4 address and others\n   associated with the same organization,\
    \ looking for open ports.\n   Deprecating the cone bit prevents the a priori revelation\
    \ of the\n   security posture of the NAT.\n"
- title: 2.  Terminology
  contents:
  - "2.  Terminology\n   This document uses the following terminology, for consistency\
    \ with\n   [RFC4380].\n   Cone NAT: A NAT that maps all requests from the same\
    \ internal IP\n      address and port to the same external IP address and port.\n\
    \      Furthermore, any external host can send a packet to the internal\n    \
    \  host by sending a packet to the mapped external address and port.\n   Indirect\
    \ Bubble: A Teredo control message that is sent to another\n      Teredo client\
    \ via the destination's Teredo server, as specified in\n      [RFC4380], Section\
    \ 5.2.4.\n   Local Address/Port: The IPv4 address and UDP port from which a Teredo\n\
    \      client sends Teredo packets.  The local port is referred to as the\n  \
    \    Teredo service port in [RFC4380].  The local address of a node may\n    \
    \  or may not be globally routable because the node can be located\n      behind\
    \ one or more NATs.\n   Mapped Address/Port: A global IPv4 address and a UDP port\
    \ that\n      results from the translation of a node's own local address/port\
    \ by\n      one or more NATs.  The node learns these values through the Teredo\n\
    \      protocol specified in [RFC4380].  The mapped address/port can be\n    \
    \  different for every peer with which a node tries to communicate.\n   Network\
    \ Address Translation (NAT): The process of converting between\n      IP addresses\
    \ used within an intranet or other private network and\n      Internet IP addresses.\n\
    \   Peer: A Teredo client with which another Teredo client needs to\n      communicate.\n\
    \   Port-Preserving NAT: A NAT that translates a local address/port to a\n   \
    \   mapped address/port such that the mapped port has the same value\n      as\
    \ the local port, as long as that same mapped address/port has\n      not already\
    \ been used for a different local address/port.\n   Public Address: An external\
    \ global address used by a NAT.\n   Restricted NAT: A NAT where all requests from\
    \ the same internal IP\n      address and port are mapped to the same external\
    \ IP address and\n      port.  Unlike the cone NAT, an external host can send\
    \ packets to\n      an internal host (by sending a packet to the external mapped\n\
    \      address and port) only if the internal host has first sent a\n      packet\
    \ to the external host.\n   Teredo Client: A node that implements the client parts\
    \ of [RFC4380],\n      has access to the IPv4 Internet, and wants to gain access\
    \ to the\n      IPv6 Internet.\n   Teredo IPv6 Address: An IPv6 address that starts\
    \ with the prefix\n      2001:0000:/32 and is formed as specified in Section 4\
    \ of\n      [RFC4380].\n   Teredo Server: A node that has a globally routable\
    \ address on the\n      IPv4 Internet, and is used as a helper to provide IPv6\n\
    \      connectivity to Teredo clients.\n   The key words \"MUST\", \"MUST NOT\"\
    , \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\"\
    , \"MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described\
    \ in RFC 2119 [RFC2119].\n"
- title: 3.  Specification
  contents:
  - '3.  Specification

    '
- title: 3.1.  Random Address Flags
  contents:
  - "3.1.  Random Address Flags\n   Teredo addresses are structured, and some of the\
    \ fields contained in\n   them are fairly predictable.  This makes the addresses\
    \ themselves\n   easier to predict and opens up a vulnerability.\n   Teredo prefix:\
    \  This field is 32 bits and has a single IANA-assigned\n      value.\n   Server:\
    \  This field is 32 bits and is set to the server in use.  The\n      server to\
    \ use is generally statically configured on the client.\n      This means that\
    \ overall entropy of the server field will be low,\n      i.e., that the server\
    \ will not be hard to predict.  Attackers\n      could confine their guessing\
    \ to the most popular server IP\n      addresses.\n   Flags:  The Flags field\
    \ is 16 bits in length, but [RFC4380] provides\n      for only one of these bits\
    \ (the cone bit) to vary.\n   Client port:  This 16-bit field corresponds to the\
    \ external port\n      number assigned to the client's Teredo service port.  Thus,\
    \ the\n      value of this field depends on two factors (the chosen Teredo\n \
    \     service port and the NAT port assignment behavior), and it\n      therefore\
    \ is harder to predict the entropy this field will have.\n      If clients tend\
    \ to use a predictable port number and NATs are\n      often port-preserving,\
    \ then the port number can be rather\n      predictable.\n   Client IPv4 address:\
    \  This 32-bit field corresponds to the external\n      IPv4 address the NAT has\
    \ assigned for the client port.  In\n      principle, this can be any address\
    \ in the assigned part of the\n      IPv4 unicast address space.  However, if\
    \ an attacker is looking\n      for the address of a specific Teredo client, they\
    \ will have to\n      have the external IPv4 address pretty well narrowed down.\
    \  Certain\n      IPv4 address ranges could also become well known for having\
    \ a\n      higher concentration of Teredo clients, making it easier to find\n\
    \      an arbitrary Teredo client.  These addresses could correspond to\n    \
    \  large organizations that allow Teredo, such as a university or\n      enterprise,\
    \ or to Internet Service Providers that only provide\n      their customers with\
    \ RFC 1918 addresses.\n   Optimizations in scanning can also reduce the number\
    \ of addresses\n   that need to be checked.  For example, for addresses behind\
    \ a cone\n   NAT, it would likely be easy to probe if a specific port number is\n\
    \   open on an IPv4 address, prior to trying to form a Teredo address for\n  \
    \ that address and port.\n   Hence, the Flags field specified in [RFC4380], Section\
    \ 4 is updated\n   as follows:\n                           1\n       0 1 2 3 4\
    \ 5 6 7 8 9 0 1 2 3 4 5\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |C|z|Random1|U|G|\
    \    Random2    |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   C: This flag is\
    \ specified in [RFC4380], and its use is modified in\n      Section 3.2 below.\n\
    \   z: This flag is reserved.  It MUST be set to zero when the address is\n  \
    \    constructed, as specified in [RFC4380].\n   Random1: MUST be set to a random\
    \ value.\n   U: This flag is specified in [RFC4380].\n   G: This flag is specified\
    \ in [RFC4380].\n   Random2: MUST be set to a random value.\n"
- title: 3.2.  Deprecation of Cone Bit
  contents:
  - "3.2.  Deprecation of Cone Bit\n   The qualification procedure is specified in\
    \ [RFC4380], Section 5.2.1,\n   and is modified as follows.  Teredo clients SHOULD\
    \ completely skip\n   the first phase of the qualification procedure and implement\
    \ only the\n   second phase where it uses the Teredo link-local address with the\n\
    \   cone bit set to zero.  Consequently, a distinction between cone and\n   restricted\
    \ NATs can no longer be made.  Teredo communication will\n   still succeed, but\
    \ at the expense of forcing peers to skip case 4 of\n   the sending details specified\
    \ in [RFC4380], Section 5.2.4.  This will\n   result in the same number of indirect\
    \ bubbles being sent as if the\n   other end were a peer behind a restricted NAT.\
    \  Even though the peer\n   behind the cone NAT does not need these indirect bubbles,\
    \ it replies\n   to these indirect bubbles just like it would to any other indirect\n\
    \   bubbles.  Skipping case 4 is already allowed for reliability reasons\n   (as\
    \ also specified in [RFC4380], Section 5.2.4), and hence this does\n   not break\
    \ interoperability, but the result of skipping the first\n   phase of qualification\
    \ is to force that behavior (which is less\n   efficient, but potentially more\
    \ reliable) to be taken by peers.\n   In addition, clients and relays SHOULD ignore\
    \ the cone bit in the\n   address of a Teredo peer and treat it as if it were\
    \ always clear, as\n   specified in [RFC4380], Section 5.2.4 (last paragraph).\n\
    \   Teredo servers MUST NOT ignore the cone bit for the following\n   reasons.\n\
    \   o  The cone bit in the IPv6 source address of a Router Solicitation\n    \
    \  (RS) from a client controls what IPv4 source address the server\n      should\
    \ use when sending a Router Advertisement (RA).  If this\n      behavior is not\
    \ preserved, legacy clients will conclude that they\n      are behind a cone NAT\
    \ even when they are not (because the client\n      WILL receive the RA where\
    \ previously it would not, since a cone\n      bit set to 1 requires the server\
    \ to respond from another IP\n      address).  They will then set their cone bit\
    \ and lose\n      connectivity.\n   o  When the Teredo server sends RAs (or bubbles\
    \ if it's also a\n      relay), the cone bit in its own Teredo address is set,\
    \ indicating\n      that it doesn't require bubbles to reach it.\n"
- title: 4.  Security Considerations
  contents:
  - "4.  Security Considerations\n   The basic threat model for Teredo is described\
    \ in detail in\n   [RFC4380], Section 7, but briefly, the goal is that a Teredo\
    \ client\n   should be as secure as if a host were directly attached to an\n \
    \  untrusted Internet link.  This document specifies updates to\n   [RFC4380]\
    \ that improve the security of the base Teredo mechanism\n   regarding specific\
    \ threats.\n   IPv6 address scanning [RFC5157] by off-path attackers: The Teredo\n\
    \   IPv6 Address format defined in [RFC4380], Section 4 makes it\n   relatively\
    \ easy for a malicious user to conduct an address-scan to\n   determine IPv6 addresses\
    \ by guessing the external (mapped) IPv4\n   address and port assigned to the\
    \ Teredo client.  The random address\n   bits guard against address-scanning risks\
    \ by providing a range of\n   4,096 IPv6 addresses per external IPv4 address/port.\
    \  As a result,\n   even if a malicious user were able to determine the external\
    \ (mapped)\n   IPv4 address and port assigned to the Teredo client, the malicious\n\
    \   user would still need to attack a range of 4,096 IPv6 addresses to\n   determine\
    \ the actual Teredo IPv6 address of the client.  Appendix B\n   compares the address\
    \ prediction resistance of a Teredo address\n   following this specification to\
    \ that of an address formed using\n   standard IPv6 stateless address autoconfiguration\
    \ [RFC4862].\n   In order to prevent adversaries from easily guessing the values\
    \ of\n   the random bits and hence the address, the Random1 and Random2 bits\n\
    \   in the Teredo Flags field MUST be constructed following the\n   recommendations\
    \ for random number generation as specified in\n   [NIST-RANDOM] and [RFC4086].\n\
    \   Opening a hole in an enterprise firewall [TUNNEL-SEC]: Teredo is NOT\n   RECOMMENDED\
    \ as a solution for networks that wish to implement strict\n   controls for what\
    \ traffic passes to and from the Internet.\n   Administrators of such networks\
    \ may wish to filter all Teredo traffic\n   at the boundaries of their networks.\n"
- title: 5.  Acknowledgments
  contents:
  - "5.  Acknowledgments\n   The authors would like to thank Remi Denis-Courmont,\
    \ Fred Templin,\n   Jordi Palet Martinez, James Woodyatt, Christian Huitema, Tom\
    \ Yu, Jari\n   Arkko, David Black, Tim Polk, and Sean Turner for reviewing earlier\n\
    \   versions of this document and providing comments to make this\n   document\
    \ better.  The authors would also like to thank Alfred Hoenes\n   for a careful\
    \ review of this document.\n"
- title: 6.  References
  contents:
  - '6.  References

    '
- title: 6.1.  Normative References
  contents:
  - "6.1.  Normative References\n   [RFC2119]      Bradner, S., \"Key words for use\
    \ in RFCs to Indicate\n                  Requirement Levels\", BCP 14, RFC 2119,\
    \ March 1997.\n   [RFC4380]      Huitema, C., \"Teredo: Tunneling IPv6 over UDP\
    \ through\n                  Network Address Translations (NATs)\", RFC 4380,\n\
    \                  February 2006.\n"
- title: 6.2.  Informative References
  contents:
  - "6.2.  Informative References\n   [NIST-RANDOM]  \"NIST SP 800-90, Recommendation\
    \ for Random Number\n                  Generation Using Deterministic Random Bit\
    \ Generators\",\n                  March 2007, <http://csrc.nist.gov/publications/\n\
    \                  nistpubs/800-90/SP800-90revised_March2007.pdf>.\n   [RFC4086]\
    \      Eastlake 3rd, D., Schiller, J., and S. Crocker,\n                  \"Randomness\
    \ Requirements for Security\", BCP 106,\n                  RFC 4086, June 2005.\n\
    \   [RFC4862]      Thomson, S., Narten, T., and T. Jinmei, \"IPv6\n          \
    \        Stateless Address Autoconfiguration\", RFC 4862,\n                  September\
    \ 2007.\n   [RFC5157]      Chown, T., \"IPv6 Implications for Network Scanning\"\
    ,\n                  RFC 5157, March 2008.\n   [TUNNEL-SEC]   Hoagland, J., Krishnan,\
    \ S., and D. Thaler, \"Security\n                  Concerns With IP Tunneling\"\
    , Work in Progress, March\n                  2010.\n"
- title: Appendix A.  Implementation Status
  contents:
  - "Appendix A.  Implementation Status\n   Deprecation of the cone bit as specified\
    \ in this document is\n   implemented in Windows Vista and Windows Server 2008.\n\
    \   The random flags specified in this document are implemented in\n   Windows\
    \ Vista SP1 and Windows Server 2008.\n   All Windows implementations automatically\
    \ disable Teredo if they\n   detect that they are on a managed network with a\
    \ domain controller.\n"
- title: Appendix B.  Resistance to Address Prediction
  contents:
  - "Appendix B.  Resistance to Address Prediction\n   This section compares the address\
    \ prediction resistance of a Teredo\n   address as compared to an address formed\
    \ using IPv6 stateless address\n   autoconfiguration (SLAAC) [RFC4862].\n   Let's\
    \ assume that the attacker knows a Teredo client's external IPv4\n   address and\
    \ Ethernet card's vendor.  Since the attacker knows the\n   client's external\
    \ IPv4 address, he does not have to search this\n   space.  The attacker does\
    \ not know the external port (16 bits) and\n   the value of the random bits (12\
    \ bits), and he has to search this\n   space.  This gives the attacker a total\
    \ search space of 28 bits\n   (16+12).  This compares very favorably with the\
    \ 24 bits of search\n   space required to find an address configured using SLAAC\
    \ (when the\n   Ethernet card's vendor is known) as described in Section 2.3 of\n\
    \   [RFC5157].  Without the 12 random bits, the search space is limited\n   to\
    \ only 16 bits, and this is significantly worse than the 24 bits of\n   search\
    \ space provided by SLAAC.\n   As the knowledge of the attacker decreases, the\
    \ number of bits of\n   search space in both cases is likely to increase in a\
    \ relatively\n   similar fashion.  The predictability of Teredo addresses will\
    \ stay\n   comparable to that of SLAAC addresses with the added 12 bits of\n \
    \  search space, but will be significantly worse without the random\n   bits.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Dave Thaler\n   Microsoft Corporation\n   One Microsoft\
    \ Way\n   Redmond, WA  98052\n   USA\n   Phone: +1 425 703 8835\n   EMail: dthaler@microsoft.com\n\
    \   Suresh Krishnan\n   Ericsson\n   8400 Decarie Blvd.\n   Town of Mount Royal,\
    \ QC\n   Canada\n   Phone: +1 514 345 7900 x42871\n   EMail: suresh.krishnan@ericsson.com\n\
    \   James Hoagland\n   Symantec Corporation\n   350 Ellis St.\n   Mountain View,\
    \ CA  94043\n   USA\n   EMail: Jim_Hoagland@symantec.com\n   URI:   http://symantec.com/\n"
