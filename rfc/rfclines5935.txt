Abstract This memo defines the IETF standard expression of Structure of Management Information (SMI) base datatypes in XML Schema Definition (XSD) language.
The primary objective of this memo is to enable the production of XML documents that are as faithful to the SMI as possible, using XSD as the validation mechanism.
Introduction Numerous use cases exist for expressing the management information described by SMI Management Information Base (MIB) modules in XML [XML].
Potential use cases reside both outside and within the traditional IETF network management community.
For example, developers of some XML based management applications may want to incorporate the rich set of data models provided by MIB modules.
Developers of other XML based management applications may want to access MIB module instrumentation via gateways to SNMP agents.
Such applications benefit from the IETF standard mapping of SMI datatypes to XML datatypes via XSD [XMLSchema], [XSDDatatypes].
MIB modules use SMIv2 [RFC2578] to describe data models.
For legacy MIB modules, SMIv1
MIB data conveyed in variable bindings ("varbinds") within protocol data units (PDUs) of SNMP messages use the primitive, base datatypes defined by the SMI.
The SMI allows for the creation of derivative datatypes, "textual conventions" ("TCs")
A TC has a unique name, has a syntax that either refines or is a base SMI datatype, and has relatively precise application level semantics.
TCs facilitate correct application level handling of MIB data, improve readability of MIB modules by humans, and support appropriate renderings of MIB data.
Values in varbinds corresponding to MIB objects defined with TC syntax are always encoded as the base SMI datatype underlying the TC syntax.
Thus, the XSD mappings defined in this memo provide support for values of MIB objects defined with TC syntax as well as for values of MIB objects defined with base SMI syntax.
Using the translation of TC into base SMI datatypes any MIB module that uses TCs can be mapped into XSD using the mappings defined in this memo.
For example, for IP addresses (both IPv4 and IPv6), MIB objects defined using the InetAddress TC (as per [RFC4001]) are encoded using the base SMI datatype underlying the InetAddress TC syntax rather than the IpAddress base datatype.
Various independent schemes have been devised for expressing SMI datatypes in XSD.
These schemes exhibit a degree of commonality, especially concerning numeric SMI datatypes, but these schemes also exhibit sufficient differences, especially concerning the non numeric SMI datatypes, precluding uniformity of expression and general interoperability.
Throughout this memo, the term "fidelity" refers to the quality of an accurate, consistent representation of SMI data values and the term "faithful" refers to the quality of reliably reflecting the semantics of SMI data values.
Thus defined, the characteristics of fidelity and being faithful are essential to uniformity of expression and general interoperability in the XML representation of SMI data values.
The primary purpose of this memo is to define the standard expression of SMI base datatypes in XML documents that is both uniform and interoperable.
This standard expression enables Internet operators, management application developers, and users to benefit from a wider range of management tools and to benefit from a greater degree of unified management.
Thus, standard expression enables and facilitates improvements to the timeliness, accuracy, and utility of management information.
The overall objective of this memo, and of any related future memos as may be published, is to define the XSD equivalent [XSDDatatypes] of SMIv2 (STD 58) and to encourage XML based protocols to carry, and XML based applications to use, the management information defined in SMIv2 compliant MIB modules.
The use of a standard mapping from SMIv2 to XML via XSD validation enables and promotes the efficient reuse of existing and future MIB modules and instrumentation by XML  based protocols and management applications.
Developers of certain XML based management applications will find this specification sufficient for their purposes.
Developers of other XML based management applications may need to make more complete reuse of existing MIB modules, requiring standard XSD documents for TCs [RFC2579] and MIB structure [RFC2578].
Memos supporting such requirements are planned, but have not been produced at the time of this writing.
Finally, it is worthwhile to note that the goal of fidelity to the SMIv2 standard (STD 58), as specified in the "Requirements" section below, is crucial to this effort.
Fidelity leverages the established "rough consensus" of the precise SMIv2 data models contained in MIB modules, and leverages existing instrumentation, the "running code" implementing SMIv2 data models.
This effort does not include any redesign of SMIv2 datatypes, data structures or textual conventions in order to overcome known limitations.
Such work can be pursued by other efforts.
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in RFC 2119
The following set of requirements is intended to produce XML documents that can be validated via the XSD defined in this specification to faithfully represent values carried "on the wire" in SNMP PDUs as defined by the SMI: R1.
All SMI base datatypes MUST have a corresponding XSD datatype.
SMIv2 is the normative SMI for this document.
Prior to mapping datatypes into XSD, legacy SMIv1 modules MUST be converted (at least logically) in accordance with Section 2.1, inclusive, of the "Coexistence" RFC [RFC3584].
The XSD datatype specified for a given SMI datatype MUST be able to represent all valid values for that SMI datatype.
The XSD datatype specified for a given SMI datatype MUST represent any special encoding rules associated with that SMI datatype.
The XSD datatype specified for a given SMI datatype MUST include any restrictions on values associated with the SMI datatype.
The XSD datatype specified for a given SMI datatype MUST be the most logical XSD datatype, with the fewest necessary restrictions on its set of values, consistent with the foregoing requirements.
The XML output produced as a result of meeting the foregoing requirements SHOULD be the most coherent and succinct representation (i.e., avoiding superfluous "decoration") from the perspective of readability by humans.
XSD for SMI Base Datatypes
This document provides XSD datatype mappings for the SMIv2 base datatypes only   i.e., the eleven "ObjectSyntax" datatypes defined in RFC 2578.
These datatypes   via tag values defined in the SMIv2 to identify them in varbinds
constrain values carried "on the  wire" in SNMP PDUs between SNMP management applications and SNMP agents:  INTEGER, Integer32  Unsigned32, Gauge32
OCTET STRING  Opaque  IpAddress  OBJECT IDENTIFIER
The "BITS" pseudo type (also referred to as a "construct" in RFC 2578) is treated as a Textual Convention, not a base datatype, for the purpose of this document.
xml version "1.0" encoding "utf 8"?
" elementFormDefault "qualified" attributeFormDefault "unqualified" xml:lang "en"> <xs:
IETF Trust and the persons identified as authors of the code.
Redistribution and use in source and binary forms, with or without modification, is permitted pursuant to, and subject to the license terms contained in, the Simplified BSD License set forth in Section 4.c of the IETF Trust's Legal Provisions Relating to IETF Documents (http://trustee.ietf.org/license info).
This version of this XML Schema Definition (XSD) document is part of RFC 5935; see the RFC itself for full legal notices.
> <xs:simpleType name "Integer32"> <xs:restriction base "xs:int"/
> <xs:simpleType name "Unsigned32"> <xs:restriction base "xs:unsignedInt"/
restriction base "xs:hexBinary"> <xs:maxLength value "65535"/
restriction base "xs:string"> <xs:pattern value  "
(([0 9] [1 9][0 9] 1[0 9][0 9]
restriction base "xs:string"> <xs:pattern value  "
The XSD datatypes, including any specified restrictions, were chosen based on fit with the requirements specified earlier in this document, and with attention to simplicity while maintaining fidelity to the SMI.
Also, the "canonical representations" (i.e., refinements of the "lexical representations") documented in the W3C XSD specification [XMLSchema], [XSDDatatypes] are assumed.
All of the numeric XSD datatypes specified in the previous section   INTEGER, Integer32, Unsigned32, Gauge32, Counter32, TimeTicks, and Counter64   comply with the relevant requirements
They cover all valid values for the corresponding SMI datatypes.
They comply with the standard encoding rules associated with the corresponding SMI datatypes.
They inherently match the range restrictions associated with the corresponding SMI datatypes.
They are the most direct XSD datatypes that exhibit the foregoing characteristics relative to the corresponding SMI datatypes (which is why no "restriction" statements   other than the "base" XSD type   are required in the XSD).
Special note to application developers:
compliance with this schema in an otherwise correct translation from raw ("on the wire" representation)
SNMP MIB data produces values that are faithful to the original.
However, the Gauge32, Counter32, Counter64, and TimeTicks datatypes have special application semantics that must be considered when using their raw values for anything other than display, printing, storage, or transmission of the literal value.
RFC 2578 provides the necessary details.
This XSD datatype corresponds to the SMI "OCTET STRING" datatype.
Several independent schemes for mapping SMI datatypes to XSD have used the XSD "string" type to represent "OCTET STRING", but this mapping does not conform to the requirements specified in this document.
Most notably, "string" cannot faithfully represent all valid values (0 thru 255) that each octet in an "OCTET STRING" can have   or at least cannot do so in a way that provides for easy human readability of the resulting XML output.
Consequently, the XSD datatype "hexBinary" is specified as the standard mapping of the SMI "OCTET STRING" datatype.
In hexBinary, each octet is encoded as two hexadecimal digits; the canonical representation limits the set of allowed hexadecimal digits to 0 9 and
uppercase A F. The hexBinary representation of "OCTET STRING" complies with the relevant requirements:
It covers all valid values for the corresponding SMI datatype.
It complies with the standard encoding rules associated with the corresponding SMI datatype.
With the "maxLength" restriction to 65535 octets, the XSD datatype specification matches the restrictions associated with the corresponding SMI datatype.
It is the most direct XSD datatype that exhibits the foregoing characteristics relative to the corresponding SMI datatype (which must allow for any valid binary octet value).
The XML output produced from the canonical representation of this XSD datatype is not optimal with respect to readability by humans; however, that is a consequence of the SMI datatype itself.
Where human readability is more of a concern, it is likely that the actual MIB objects in question will be represented by textual conventions that limit the set of values that will be included in the OctetStrings and will, thus, bypass the hexBinary typing.
The "hexBinary" XSD datatype is specified as the representation of the SMI "Opaque" datatype generally for the same reasons as "hexBinary" is specified for the "OctetString" datatype:
It covers all valid values for the corresponding SMI datatype.
It complies with the standard encoding rules associated with the corresponding SMI datatype.
There are no restriction issues associated with using "hexBinary" for "Opaque".
It is the most direct XSD datatype that exhibits the foregoing characteristics relative to the corresponding SMI datatype (which must allow for any valid binary octet value).
The XML output produced from the canonical representation of this XSD datatype is not optimal with respect to readability by humans; however, that is a consequence of the SMI datatype itself.
Unmediated "Opaque" data is intended for consumption by applications, not humans.
The XSD "string" datatype is the natural choice to represent an IpAddress as XML output.
The "pattern" restriction applied in this case results in a dotted decimal string of four values between "0" and "255" separated by a period (".
This pattern also precludes leading zeros.
Note that the SMI relies upon Textual Conventions (TCs) to specify an IPv6 address.
As such, the representation of an IPv6 address as an XSD datatype is beyond the scope of this document.
This XSD datatype corresponds to the SMI "OBJECT IDENTIFIER" datatype.
The XSD "string" datatype is also the natural choice to represent an ObjectIdentifier as XML output, for the same reasons as for the IpAddress choice.
The "pattern" restriction applied in this case results in a dotted decimal string of up to 128 elements (referred to as "sub ids"), each holding an "Unsigned32" integer value.
Note that the first two components of an "OBJECT IDENTIFIER" each have a limited range of values as indicated in the XSD pattern restriction and as described in the ASN1.1/BER standard [ASN.1].
There are three values allocated for the root node, and at most 39 values for nodes subordinate to a root node value of 0 or 1.
The minimum length of an "OBJECT IDENTIFIER" is two sub ids and the representation of a zero valued "OBJECT IDENTIFIER" is "0.0".
Note that no explicit "minLength" restriction, which would be "3" to allow for the minimum of two sub ids and a single separating dot, is required since the pattern itself enforces this restriction.
Security Considerations Security considerations for any given SMI MIB module will be relevant to any XSD/XML mapping of that MIB module; however, the mapping defined in this document does not itself introduce any new security considerations.
If and when proxies or gateways are developed to convey SNMP management information from SNMP agents to XML based management applications via XSD/XML mapping of MIB modules based on this specification and its planned siblings, special care will need to be taken to ensure that all applicable SNMP security mechanisms are supported in an appropriate manner yet to be determined.
In accordance with RFC 3688 [RFC3688], the IANA XML registry has been updated with the following namespace and schema registrations associated with this document:
SMI Base Datatypes Namespace Registration
This document registers a URI for the SMI Base Datatypes XML namespace in the IETF XML registry.
Following the format in RFC 3688, IANA has made the following registration:
N/A, the requested URI is an XML namespace.
SMI Base Datatypes Schema Registration
This document registers a URI for the SMI Base Datatypes XML schema in the IETF XML registry.
Following the format in RFC 3688, IANA has made the following registration:
Section 4 of this document.
