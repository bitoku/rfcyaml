This document describes the binding protocols used in conjunction with the ONC Remote Procedure Call (ONC RPC Version 2) protocols.
2 2.1 RPCBIND Protocol Specification (in RPC Language)
This document specifies the binding protocols used in conjunction with ONC RPC Version 2.
As a prerequisite, the reader is expected to be familiar with [1] and [2] which describe the ONC RPC Version 2 and XDR (eXternal Data Representation) protocols.
An RPC service is identified by its RPC program number, version number, and the transport address where it may be reached.
The transport address, in turn, consists of a network address and a transport selector.
In the case of a service available over TCP/IP or UDP/IP, the network address will be an IP address, and the transport selector will be a TCP or UDP port number.
A client program needs to know the RPC program number, version number, and the transport address corresponding to a service in order to utilize the service.
Of these, the RPC program number and version number are usually built into the client program, as part of the service definition.
The network address component of the transport address is usually available in a name service, or is given as a parameter to the client program.
The transport selector (ie., the TCP or UDP port) is usually determined dynamically, and varies with each invocation of the service.
Server programs allocate a transport address, and register it with a well known lookup service (well known because it uses a fixed transport selector, and resides at the same network address as the server).
Client programs consult the lookup service in order to obtain the server's transport address.
Such a lookup service is very desirable because the range of well  known transport selectors is very small for some transports and the number of services is potentially very large.
By running only the lookup service on a well known transport selector, the transport addresses of other remote programs can be ascertained by querying the lookup service.
This document describes three versions of a lookup service, all of which use the same RPC program number (100000).
They all use port 111 over TCP and UDP transports.
Versions 3 and 4 are described in Section 2 ("RPCBIND Program Protocol").
Version 2 is described in Section 3 ("Port Mapper Program Protocol").
The distinguishing characteristic of RPCBIND (versions 3 and 4) is that this protocol uses a transport independent format for the transport address, known as the universal address format.
An address in universal address format is an ASCII string representation of the transport dependent address.
String representation of addresses corresponding to a transport are defined by the addressing authority for the transport.
The RPCBIND protocol can be used for binding ONC RPC clients and servers over any transport.
The Port Mapper (version 2), on the other hand, is an older protocol that is specific to TCP and UDP.
It handles TCP and UDP ports directly.
The RPCBIND program maps RPC program and version numbers to universal addresses, thus making dynamic binding of remote programs possible.
The RPCBIND program is bound to a well known address of each supported transport, and other programs register their dynamically allocated transport address with it.
The RPCBIND program then makes those addresses publicly available.
The RPCBIND program also aids in broadcast RPC.
A given RPC program will usually have different transport address bindings on different machines, so there is no way to directly broadcast to all of these programs.
The RPCBIND program, however, does have a well known address.
So, to broadcast to a given program, the client actually sends its message to the RPCBIND program located at the broadcast address.
Each instance of the RPCBIND program that picks up the broadcast then calls the local service specified by the client.
When the RPCBIND program gets the reply from the local service, it sends the reply back to the client.
A mapping of (program, version, network ID) to address
The network identifier  (r netid):
This is a string that represents a local identification for a   network.
This is defined by a system administrator based on local   conventions, and cannot be depended on to have the same value on   every system.
A list of   rpcb entry items is returned by RPCBPROC GETADDRLIST.
The meanings   and values used for the r nc   fields are given below.
The network identifier  (r nc netid):
Transport semantics (r nc semantics):
This identifies the family to which the protocol belongs.
This identifies a protocol within a family.
/ typedef rpcb stat rpcb stat byvers[RPCBVERS STAT]
RPCBPROC BCAST has the same functionality as CALLIT;   the new name is intended to indicate that this   procedure should be used for broadcast RPC, and   RPCBPROC INDIRECT should be used for indirect calls.
/ rpcb rmtcallres RPCBPROC BCAST(rpcb rmtcallargs)
RPCBPROC CALLIT; unsigned int RPCBPROC GETTIME(void)
; string RPCBPROC TADDR2UADDR(netbuf)   8; string RPCBPROC GETVERSADDR(rpcb)
; rpcb rmtcallres RPCBPROC INDIRECT(rpcb rmtcallargs)   10; rpcb entry list ptr RPCBPROC GETADDRLIST(rpcb)
11; rpcb stat byvers RPCBPROC GETSTAT(void)
For TCP/IP and UDP/IP, for example, it is port number 111.
Each transport has such an assigned, well known address.
The following is a description of each of the procedures supported by RPCBIND.
2.2.1 RPCBIND Version 3 RPCBPROC SET:
When a program first becomes available on a machine, it registers itself with RPCBIND running on the same machine.
The program passes its program number "r prog", version number "r vers", network identifier "r netid", universal address "r addr", and the owner of the service "r owner".
The procedure returns a boolean response whose value is TRUE if the procedure successfully established the mapping and FALSE otherwise.
The procedure refuses to establish a mapping if one already exists for the ordered set ("r prog", "r vers", "r netid").
Note that neither "r netid" nor "r addr" can be NULL, and that "r netid" should be a valid network identifier on the machine making the call.
When a program becomes unavailable, it should unregister itself with the RPCBIND program on the same machine.
The parameters and results have meanings identical to those of RPCBPROC SET.
The mapping of the ("r prog", "r vers", "r netid") tuple with "r addr" is deleted.
Only the owner of the service or the super user is allowed to unset a service.
Given a program number "r prog", version number "r vers", and network identifier  "r netid", this procedure returns the universal address on which the program is awaiting call requests.
The "r netid" field of the argument is ignored and the "r netid" is inferred from the network identifier of the transport on which the request came in.
This procedure lists all entries in RPCBIND's database.
The procedure takes no parameters and returns a list of program, version, network identifier, and universal addresses.
This procedure allows a caller to call another remote procedure on the same machine without knowing the remote procedure's universal address.
It is intended for supporting broadcasts to arbitrary remote programs via RPCBIND's universal address.
The parameters "prog", "vers", "proc", and args are the program number, version number, procedure number, and parameters of the remote procedure.
Note This procedure only sends a response if the procedure was successfully executed and is silent (no response) otherwise.
The procedure returns the remote program's universal address, and the results of the remote procedure.
This procedure returns the local time on its own machine in seconds since the midnight of the First day of January, 1970.
: This procedure converts universal addresses to transport specific addresses.
RPCBPROC TADDR2UADDR: This procedure converts transport specific addresses to universal addresses.
2.2.2 RPCBIND, Version 4 Version 4 of the RPCBIND protocol includes all of the above procedures, and adds several additional ones.
This procedure is identical to the version 3 RPCBPROC CALLIT procedure.
The new name indicates that the procedure should be used for broadcast RPCs only.
RPCBPROC INDIRECT, defined below, should be used for indirect RPC calls.
This procedure is similar to RPCBPROC GETADDR.
The difference is the "r vers" field of the rpcb structure can be used to specify the version of interest.
If that version is not registered, no address is returned.
Instead of being silent about errors (such as the program not being registered on the system), this procedure returns an indication of the error.
This procedure should not be used for broadcast RPC.
It is intended to be used with indirect RPC calls only.
This procedure returns a list of addresses for the given rpcb entry.
The client may be able use the results to determine alternate transports that it can use to communicate with the server.
This procedure returns statistics on the activity of the RPCBIND server.
The information lists the number and kind of requests the server has received.
Note All procedures except RPCBPROC SET and RPCBPROC UNSET can be called by clients running on a machine other than a machine on which RPCBIND is running.
RPCBIND only accepts RPCBPROC SET and RPCBPROC UNSET requests by clients running on the same machine as the RPCBIND program.
The port mapper program maps RPC program and version numbers to transport  specific port numbers.
This program makes dynamic binding of remote programs possible.
The port mapper protocol differs from the newer RPCBIND protocols in that it is transport specific in its address handling.
3.1 Port Mapper Protocol Specification (in RPC Language)
The portmapper program currently supports two protocols (UDP and TCP).
The portmapper is contacted by talking to it on assigned port number 111 (SUNRPC) on either of these protocols.
The following is a description of each of the portmapper procedures: PMAPPROC NULL:
This procedure does no work.
By convention, procedure zero of any protocol takes no parameters and returns no results.
PMAPPROC SET: When a program first becomes available on a machine, it registers itself with the port mapper program on the same machine.
The program passes its program number "prog", version number "vers", transport protocol number "prot", and the port "port" on which it awaits service request.
The procedure returns a boolean reply whose value is "TRUE" if the procedure successfully established the mapping and "FALSE" otherwise.
The procedure refuses to establish a mapping if one already exists for the tuple "(prog, vers, prot)".
When a program becomes unavailable, it should unregister itself with the port mapper program on the same machine.
The parameters and results have meanings identical to those of "PMAPPROC SET".
The protocol and port number fields of the argument are ignored.
Given a program number "prog", version number "vers", and transport protocol number "prot", this procedure returns the port number on which the program is awaiting call requests.
A port value of zeros means the program has not been registered.
The "port" field of the argument is ignored.
This procedure enumerates all entries in the port mapper's database.
The procedure takes no parameters and returns a list of program, version, protocol, and port values.
This procedure allows a client to call another remote procedure on the same machine without knowing the remote procedure's port number.
It is intended for supporting broadcasts to arbitrary remote programs via the well known port mapper's port.
The parameters "prog", "vers", "proc", and the bytes of "args" are the program number, version number, procedure number, and parameters of the remote procedure.
This procedure only sends a reply if the procedure was successfully executed and is silent (no reply) otherwise.
The port mapper communicates with the remote program using UDP only.
The procedure returns the remote program's port number, and the reply is the reply of the remote procedure.
Security Considerations Security issues are not discussed in this memo.
