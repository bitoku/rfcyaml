- title: __initial_text__
  contents:
  - '             The Generalized TTL Security Mechanism (GTSM)

    '
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Abstract
  contents:
  - "Abstract\n   The use of a packet's Time to Live (TTL) (IPv4) or Hop Limit (IPv6)\n\
    \   to verify whether the packet was originated by an adjacent node on a\n   connected\
    \ link has been used in many recent protocols.  This document\n   generalizes\
    \ this technique.  This document obsoletes Experimental RFC\n   3682.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction . . . . . . . . . . . . . . . . . . .\
    \ . . . . . .  2\n   2.  Assumptions Underlying GTSM  . . . . . . . . . . . .\
    \ . . . . .  3\n     2.1.  GTSM Negotiation . . . . . . . . . . . . . . . . .\
    \ . . . .  4\n     2.2.  Assumptions on Attack Sophistication . . . . . . . .\
    \ . . .  4\n   3.  GTSM Procedure . . . . . . . . . . . . . . . . . . . . . .\
    \ . .  5\n   4.  Acknowledgments  . . . . . . . . . . . . . . . . . . . . . .\
    \ .  6\n   5.  Security Considerations  . . . . . . . . . . . . . . . . . . .\
    \  6\n     5.1.  TTL (Hop Limit) Spoofing . . . . . . . . . . . . . . . . .  7\n\
    \     5.2.  Tunneled Packets . . . . . . . . . . . . . . . . . . . . .  7\n  \
    \     5.2.1.  IP Tunneled over IP  . . . . . . . . . . . . . . . . .  8\n    \
    \   5.2.2.  IP Tunneled over MPLS  . . . . . . . . . . . . . . . .  9\n     5.3.\
    \  Onlink Attackers . . . . . . . . . . . . . . . . . . . . . 11\n     5.4.  Fragmentation\
    \ Considerations . . . . . . . . . . . . . . . 11\n     5.5.  Multi-Hop Protocol\
    \ Sessions  . . . . . . . . . . . . . . . 12\n   6.  Applicability Statement \
    \ . . . . . . . . . . . . . . . . . . . 12\n     6.1.  Backwards Compatibility\
    \  . . . . . . . . . . . . . . . . . 12\n   7.  References . . . . . . . . . .\
    \ . . . . . . . . . . . . . . . . 13\n     7.1.  Normative References . . . .\
    \ . . . . . . . . . . . . . . . 13\n     7.2.  Informative References . . . .\
    \ . . . . . . . . . . . . . . 14\n   Appendix A.  Multi-Hop GTSM  . . . . . .\
    \ . . . . . . . . . . . . . 15\n   Appendix B.  Changes Since RFC 3682  . . .\
    \ . . . . . . . . . . . . 15\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   The Generalized TTL Security Mechanism (GTSM) is designed\
    \ to protect\n   a router's IP-based control plane from CPU-utilization based\
    \ attacks.\n   In particular, while cryptographic techniques can protect the router-\n\
    \   based infrastructure (e.g., BGP [RFC4271], [RFC4272]) from a wide\n   variety\
    \ of attacks, many attacks based on CPU overload can be\n   prevented by the simple\
    \ mechanism described in this document.  Note\n   that the same technique protects\
    \ against other scarce-resource\n   attacks involving a router's CPU, such as\
    \ attacks against processor-\n   line card bandwidth.\n   GTSM is based on the\
    \ fact that the vast majority of protocol peerings\n   are established between\
    \ routers that are adjacent.  Thus, most\n   protocol peerings are either directly\
    \ between connected interfaces\n   or, in the worst case, are between loopback\
    \ and loopback, with static\n   routes to loopbacks.  Since TTL spoofing is considered\
    \ nearly\n   impossible, a mechanism based on an expected TTL value can provide\
    \ a\n   simple and reasonably robust defense from infrastructure attacks\n   based\
    \ on forged protocol packets from outside the network.  Note,\n   however, that\
    \ GTSM is not a substitute for authentication mechanisms.\n   In particular, it\
    \ does not secure against insider on-the-wire\n   attacks, such as packet spoofing\
    \ or replay.\n   Finally, the GTSM mechanism is equally applicable to both TTL\
    \ (IPv4)\n   and Hop Limit (IPv6), and from the perspective of GTSM, TTL and Hop\n\
    \   Limit have identical semantics.  As a result, in the remainder of\n   this\
    \ document the term \"TTL\" is used to refer to both TTL or Hop\n   Limit (as\
    \ appropriate).\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\"\
    , \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and\
    \ \"OPTIONAL\" in this\n   document are to be interpreted as described in RFC\
    \ 2119 [RFC2119].\n"
- title: 2.  Assumptions Underlying GTSM
  contents:
  - "2.  Assumptions Underlying GTSM\n   GTSM is predicated upon the following assumptions:\n\
    \   1.  The vast majority of protocol peerings are between adjacent\n       routers.\n\
    \   2.  Service providers may or may not configure strict ingress\n       filtering\
    \ [RFC3704] on non-trusted links.  If maximal protection\n       is desired, such\
    \ filtering is necessary as described in\n       Section 2.2.\n   3.  Use of GTSM\
    \ is OPTIONAL, and can be configured on a per-peer\n       (group) basis.\n  \
    \ 4.  The peer routers both implement GTSM.\n   5.  The router supports a method\
    \ to use separate resource pools\n       (e.g., queues, processing quotas) for\
    \ differently classified\n       traffic.\n   Note that this document does not\
    \ prescribe further restrictions that\n   a router may apply to packets not matching\
    \ the GTSM filtering rules,\n   such as dropping packets that do not match any\
    \ configured protocol\n   session and rate-limiting the rest.  This document also\
    \ does not\n   suggest the actual means of resource separation, as those are\n\
    \   hardware and implementation-specific.\n   However, the possibility of denial-of-service\
    \ (DoS) attack prevention\n   is based on the assumption that classification of\
    \ packets and\n   separation of their paths are done before the packets go through\
    \ a\n   scarce resource in the system.  In practice, the closer GTSM\n   processing\
    \ is done to the line-rate hardware, the more resistant the\n   system is to DoS\
    \ attacks.\n"
- title: 2.1.  GTSM Negotiation
  contents:
  - "2.1.  GTSM Negotiation\n   This document assumes that, when used with existing\
    \ protocols, GTSM\n   will be manually configured between protocol peers.  That\
    \ is, no\n   automatic GTSM capability negotiation, such as is provided by RFC\n\
    \   3392 [RFC3392], is assumed or defined.\n   If a new protocol is designed with\
    \ built-in GTSM support, then it is\n   recommended that procedures are always\
    \ used for sending and\n   validating received protocol packets (GTSM is always\
    \ on, see for\n   example [RFC2461]).  If, however, dynamic negotiation of GTSM\
    \ support\n   is necessary, protocol messages used for such negotiation MUST be\n\
    \   authenticated using other security mechanisms to prevent DoS attacks.\n  \
    \ Also note that this specification does not offer a generic GTSM\n   capability\
    \ negotiation mechanism, so messages of the protocol\n   augmented with the GTSM\
    \ behavior will need to be used if dynamic\n   negotiation is deemed necessary.\n"
- title: 2.2.  Assumptions on Attack Sophistication
  contents:
  - "2.2.  Assumptions on Attack Sophistication\n   Throughout this document, we assume\
    \ that potential attackers have\n   evolved in both sophistication and access\
    \ to the point that they can\n   send control traffic to a protocol session, and\
    \ that this traffic\n   appears to be valid control traffic (i.e., it has the\
    \ source/\n   destination of configured peer routers).\n   We also assume that\
    \ each router in the path between the attacker and\n   the victim protocol speaker\
    \ decrements TTL properly (clearly, if\n   either the path or the adjacent peer\
    \ is compromised, then there are\n   worse problems to worry about).\n   For maximal\
    \ protection, ingress filtering should be applied before\n   the packet goes through\
    \ the scarce resource.  Otherwise an attacker\n   directly connected to one interface\
    \ could disturb a GTSM-protected\n   session on the same or another interface.\
    \  Interfaces that aren't\n   configured with this filtering (e.g., backbone links)\
    \ are assumed to\n   not have such attackers (i.e., are trusted).\n   As a specific\
    \ instance of such interfaces, we assume that tunnels are\n   not a back-door\
    \ for allowing TTL-spoofing on protocol packets to a\n   GTSM-protected peering\
    \ session with a directly connected neighbor.\n   We assume that: 1) there are\
    \ no tunneled packets terminating on the\n   router, 2) tunnels terminating on\
    \ the router are assumed to be secure\n   and endpoints are trusted, 3) tunnel\
    \ decapsulation includes source\n   address spoofing prevention [RFC3704], or\
    \ 4) the GTSM-enabled session\n   does not allow protocol packets coming from\
    \ a tunnel.\n   Since the vast majority of peerings are between adjacent routers,\
    \ we\n   can set the TTL on the protocol packets to 255 (the maximum possible\n\
    \   for IP) and then reject any protocol packets that come in from\n   configured\
    \ peers that do NOT have an inbound TTL of 255.\n   GTSM can be disabled for applications\
    \ such as route-servers and other\n   multi-hop peerings.  In the event that an\
    \ attack comes in from a\n   compromised multi-hop peering, that peering can be\
    \ shut down.\n"
- title: 3.  GTSM Procedure
  contents:
  - "3.  GTSM Procedure\n   If GTSM is not built into the protocol and is used as\
    \ an additional\n   feature (e.g., for BGP, LDP, or MSDP), it SHOULD NOT be enabled\
    \ by\n   default in order to remain backward-compatible with the unmodified\n\
    \   protocol.  However, if the protocol defines a built-in dynamic\n   capability\
    \ negotiation for GTSM, a protocol peer MAY suggest the use\n   of GTSM provided\
    \ that GTSM would only be enabled if both peers agree\n   to use it.\n   If GTSM\
    \ is enabled for a protocol session, the following steps are\n   added to the\
    \ IP packet sending and reception procedures:\n      Sending protocol packets:\n\
    \         The TTL field in all IP packets used for transmission of\n         messages\
    \ associated with GTSM-enabled protocol sessions MUST be\n         set to 255.\
    \  This also applies to the related ICMP error\n         handling messages.\n\
    \         On some architectures, the TTL of control plane originated\n       \
    \  traffic is under some configurations decremented in the\n         forwarding\
    \ plane.  The TTL of GTSM-enabled sessions MUST NOT be\n         decremented.\n\
    \      Receiving protocol packets:\n         The GTSM packet identification step\
    \ associates each received\n         packet addressed to the router's control\
    \ plane with one of the\n         following three trustworthiness categories:\n\
    \         +  Unknown: these are packets that cannot be associated with\n     \
    \       any registered GTSM-enabled session, and hence GTSM cannot\n         \
    \   make any judgment on the level of risk associated with them.\n         + \
    \ Trusted: these are packets that have been identified as\n            belonging\
    \ to one of the GTSM-enabled sessions, and their TTL\n            values are within\
    \ the expected range.\n         +  Dangerous: these are packets that have been\
    \ identified as\n            belonging to one of the GTSM-enabled sessions, but\
    \ their TTL\n            values are NOT within the expected range, and hence GTSM\n\
    \            believes there is a risk that these packets have been\n         \
    \   spoofed.\n         The exact policies applied to packets of different\n  \
    \       classifications are not postulated in this document and are\n        \
    \ expected to be configurable.  Configurability is likely\n         necessary\
    \ in particular with the treatment of related messages\n         (ICMP errors).\
    \  It should be noted that fragmentation may\n         restrict the amount of\
    \ information available for\n         classification.\n         However, by default,\
    \ the implementations:\n         +  SHOULD ensure that packets classified as Dangerous\
    \ do not\n            compete for resources with packets classified as Trusted\
    \ or\n            Unknown.\n         +  MUST NOT drop (as part of GTSM processing)\
    \ packets\n            classified as Trusted or Unknown.\n         +  MAY drop\
    \ packets classified as Dangerous.\n"
- title: 4.  Acknowledgments
  contents:
  - "4.  Acknowledgments\n   The use of the TTL field to protect BGP originated with\
    \ many\n   different people, including Paul Traina and Jon Stewart.  Ryan\n  \
    \ McDowell also suggested a similar idea.  Steve Bellovin, Jay\n   Borkenhagen,\
    \ Randy Bush, Alfred Hoenes, Vern Paxon, Robert Raszuk,\n   and Alex Zinin also\
    \ provided useful feedback on earlier versions of\n   this document.  David Ward\
    \ provided insight on the generalization of\n   the original BGP-specific idea.\
    \  Alex Zinin, Alia Atlas, and John\n   Scudder provided a significant amount\
    \ of feedback for the newer\n   versions of the document.  During and after the\
    \ IETF Last Call,\n   useful comments were provided by Francis Dupont, Sam Hartman,\
    \ Lars\n   Eggert, and Ross Callon.\n"
- title: 5.  Security Considerations
  contents:
  - "5.  Security Considerations\n   GTSM is a simple procedure that protects single-hop\
    \ protocol\n   sessions, except in those cases in which the peer has been\n  \
    \ compromised.  In particular, it does not protect against the wide\n   range\
    \ of on-the-wire attacks; protection from these attacks requires\n   more rigorous\
    \ security mechanisms.\n"
- title: 5.1.  TTL (Hop Limit) Spoofing
  contents:
  - "5.1.  TTL (Hop Limit) Spoofing\n   The approach described here is based on the\
    \ observation that a TTL\n   (or Hop Limit) value of 255 is non-trivial to spoof,\
    \ since as the\n   packet passes through routers towards the destination, the\
    \ TTL is\n   decremented by one per router.  As a result, when a router receives\
    \ a\n   packet, it may not be able to determine if the packet's IP address is\n\
    \   valid, but it can determine how many router hops away it is (again,\n   assuming\
    \ none of the routers in the path are compromised in such a\n   way that they\
    \ would reset the packet's TTL).\n   Note, however, that while engineering a packet's\
    \ TTL such that it has\n   a particular value when sourced from an arbitrary location\
    \ is\n   difficult (but not impossible), engineering a TTL value of 255 from\n\
    \   non-directly connected locations is not possible (again, assuming\n   none\
    \ of the directly connected neighbors are compromised, the packet\n   has not\
    \ been tunneled to the decapsulator, and the intervening\n   routers are operating\
    \ in accordance with RFC 791 [RFC0791]).\n"
- title: 5.2.  Tunneled Packets
  contents:
  - "5.2.  Tunneled Packets\n   The security of any tunneling technique depends heavily\
    \ on\n   authentication at the tunnel endpoints, as well as how the tunneled\n\
    \   packets are protected in flight.  Such mechanisms are, however,\n   beyond\
    \ the scope of this memo.\n   An exception to the observation that a packet with\
    \ TTL of 255 is\n   difficult to spoof may occur when a protocol packet is tunneled\
    \ and\n   the tunnel is not integrity-protected (i.e., the lower layer is\n  \
    \ compromised).\n   When the protocol packet is tunneled directly to the protocol\
    \ peer\n   (i.e., the protocol peer is the decapsulator), the GTSM provides some\n\
    \   limited added protection as the security depends entirely on the\n   integrity\
    \ of the tunnel.\n   For protocol adjacencies over a tunnel, if the tunnel itself\
    \ is\n   deemed secure (i.e., the underlying infrastructure is deemed secure,\n\
    \   and the tunnel offers degrees of protection against spoofing such as\n   keys\
    \ or cryptographic security), the GTSM can serve as a check that\n   the protocol\
    \ packet did not originate beyond the head-end of the\n   tunnel.  In addition,\
    \ if the protocol peer can receive packets for\n   the GTSM-protected protocol\
    \ session from outside the tunnel, the GTSM\n   can help thwart attacks from beyond\
    \ the adjacent router.\n   When the tunnel tail-end decapsulates the protocol\
    \ packet and then\n   IP-forwards the packet to a directly connected protocol\
    \ peer, the TTL\n   is decremented as described below.  This means that the tunnel\n\
    \   decapsulator is the penultimate node from the GTSM-protected protocol\n  \
    \ peer's perspective.  As a result, the GTSM check protects from\n   attackers\
    \ encapsulating packets to your peers.  However, specific\n   cases arise when\
    \ the connection from the tunnel decapsulator node to\n   the protocol peer is\
    \ not an IP forwarding hop, where TTL-decrementing\n   does not happen (e.g.,\
    \ layer-2 tunneling, bridging, etc).  In the\n   IPsec architecture [RFC4301],\
    \ another example is the use of Bump-in-\n   the-Wire (BITW) [BITW].\n"
- title: 5.2.1.  IP Tunneled over IP
  contents:
  - "5.2.1.  IP Tunneled over IP\n   Protocol packets may be tunneled over IP directly\
    \ to a protocol peer,\n   or to a decapsulator (tunnel endpoint) that then forwards\
    \ the packet\n   to a directly connected protocol peer.  Examples of tunneling\
    \ IP over\n   IP include IP-in-IP [RFC2003], GRE [RFC2784], and various forms\
    \ of\n   IPv6-in-IPv4 (e.g., [RFC4213]).  These cases are depicted below.\n  \
    \    Peer router ---------- Tunnel endpoint router and peer\n       TTL=255  \
    \   [tunnel]   [TTL=255 at ingress]\n                              [TTL=255 at\
    \ processing]\n      Peer router -------- Tunnel endpoint router ----- On-link\
    \ peer\n       TTL=255    [tunnel]  [TTL=255 at ingress]    [TTL=254 at ingress]\n\
    \                            [TTL=254 at egress]\n   In both cases, the encapsulator\
    \ (origination tunnel endpoint) is the\n   (supposed) sending protocol peer. \
    \ The TTL in the inner IP datagram\n   can be set to 255, since RFC 2003 specifies\
    \ the following behavior:\n      When encapsulating a datagram, the TTL in the\
    \ inner IP\n      header is decremented by one if the tunneling is being\n   \
    \   done as part of forwarding the datagram; otherwise, the\n      inner header\
    \ TTL is not changed during encapsulation.\n   In the first case, the encapsulated\
    \ packet is tunneled directly to\n   the protocol peer (also a tunnel endpoint),\
    \ and therefore the\n   encapsulated packet's TTL can be received by the protocol\
    \ peer with\n   an arbitrary value, including 255.\n   In the second case, the\
    \ encapsulated packet is tunneled to a\n   decapsulator (tunnel endpoint), which\
    \ then forwards it to a directly\n   connected protocol peer.  For IP-in-IP tunnels,\
    \ RFC 2003 specifies\n   the following decapsulator behavior:\n      The TTL in\
    \ the inner IP header is not changed when decapsulating.\n      If, after decapsulation,\
    \ the inner datagram has TTL = 0, the\n      decapsulator MUST discard the datagram.\
    \  If, after decapsulation,\n      the decapsulator forwards the datagram to one\
    \ of its network\n      interfaces, it will decrement the TTL as a result of doing\
    \ normal\n      IP forwarding.  See also Section 4.4.\n   And similarly, for GRE\
    \ tunnels, RFC 2784 specifies the following\n   decapsulator behavior:\n     \
    \ When a tunnel endpoint decapsulates a GRE packet which has an IPv4\n      packet\
    \ as the payload, the destination address in the IPv4 payload\n      packet header\
    \ MUST be used to forward the packet and the TTL of\n      the payload packet\
    \ MUST be decremented.\n   Hence the inner IP packet header's TTL, as seen by\
    \ the decapsulator,\n   can be set to an arbitrary value (in particular, 255).\
    \  If the\n   decapsulator is also the protocol peer, it is possible to deliver\
    \ the\n   protocol packet to it with a TTL of 255 (first case).  On the other\n\
    \   hand, if the decapsulator needs to forward the protocol packet to a\n   directly\
    \ connected protocol peer, the TTL will be decremented (second\n   case).\n"
- title: 5.2.2.  IP Tunneled over MPLS
  contents:
  - "5.2.2.  IP Tunneled over MPLS\n   Protocol packets may also be tunneled over\
    \ MPLS Label Switched Paths\n   (LSPs) to a protocol peer.  The following diagram\
    \ depicts the\n   topology.\n      Peer router -------- LSP Termination router\
    \ and peer\n       TTL=255    MPLS LSP   [TTL=x at ingress]\n   MPLS LSPs can\
    \ operate in Uniform or Pipe tunneling models.  The TTL\n   handling for these\
    \ models is described in RFC 3443 [RFC3443] that\n   updates RFC 3032 [RFC3032]\
    \ in regards to TTL processing in MPLS\n   networks.  RFC 3443 specifies the TTL\
    \ processing in both Uniform and\n   Pipe Models, which in turn can used with\
    \ or without penultimate hop\n   popping (PHP).  The TTL processing in these cases\
    \ results in\n   different behaviors, and therefore are analyzed separately. \
    \ Please\n   refer to Section 3.1 through Section 3.3 of RFC 3443.\n   The main\
    \ difference from a TTL processing perspective between Uniform\n   and Pipe Models\
    \ at the LSP termination node resides in how the\n   incoming TTL (iTTL) is determined.\
    \  The tunneling model determines\n   the iTTL: For Uniform Model LSPs, the iTTL\
    \ is the value of the TTL\n   field from the popped MPLS header (encapsulating\
    \ header), whereas for\n   Pipe Model LSPs, the iTTL is the value of the TTL field\
    \ from the\n   exposed header (encapsulated header).\n   For Uniform Model LSPs,\
    \ RFC 3443 states that at ingress:\n      For each pushed Uniform Model label,\
    \ the TTL is copied from the\n      label/IP-packet immediately underneath it.\n\
    \   From this point, the inner TTL (i.e., the TTL of the tunneled IP\n   datagram)\
    \ represents non-meaningful information, and at the egress\n   node or during\
    \ PHP, the ingress TTL (iTTL) is equal to the TTL of the\n   popped MPLS header\
    \ (see Section 3.1 of RFC 3443).  In consequence,\n   for Uniform Model LSPs of\
    \ more than one hop, the TTL at ingress\n   (iTTL) will be less than 255 (x <=\
    \ 254), and as a result the check\n   described in Section 3 of this document\
    \ will fail.\n   The TTL treatment is identical between Short Pipe Model LSPs\
    \ without\n   PHP and Pipe Model LSPs (without PHP only).  For these cases, RFC\n\
    \   3443 states that:\n      For each pushed Pipe Model or Short Pipe Model label,\
    \ the TTL\n      field is set to a value configured by the network operator. \
    \ In\n      most implementations, this value is set to 255 by default.\n   In\
    \ these models, the forwarding treatment at egress is based on the\n   tunneled\
    \ packet as opposed to the encapsulation packet.  The ingress\n   TTL (iTTL) is\
    \ the value of the TTL field of the header that is\n   exposed, that is the tunneled\
    \ IP datagram's TTL.  The protocol\n   packet's TTL as seen by the LSP termination\
    \ can therefore be set to\n   an arbitrary value (including 255).  If the LSP\
    \ termination router is\n   also the protocol peer, it is possible to deliver\
    \ the protocol packet\n   with a TTL of 255 (x = 255).\n   Finally, for Short\
    \ Pipe Model LSPs with PHP, the TTL of the tunneled\n   packet is unchanged after\
    \ the PHP operation.  Therefore, the same\n   conclusions drawn regarding the\
    \ Short Pipe Model LSPs without PHP and\n   Pipe Model LSPs (without PHP only)\
    \ apply to this case.  For Short\n   Pipe Model LSPs, the TTL at egress has the\
    \ same value with or without\n   PHP.\n   In conclusion, GTSM checks are possible\
    \ for IP tunneled over Pipe\n   model LSPs, but not for IP tunneled over Uniform\
    \ model LSPs.\n   Additionally, for all tunneling modes, if the LSP termination\
    \ router\n   needs to forward the protocol packet to a directly connected protocol\n\
    \   peer, it is not possible to deliver the protocol packet to the\n   protocol\
    \ peer with a TTL of 255.  If the packet is further forwarded,\n   the outgoing\
    \ TTL (oTTL) is calculated by decrementing iTTL by one.\n"
- title: 5.3.  Onlink Attackers
  contents:
  - "5.3.  Onlink Attackers\n   As described in Section 2, an attacker directly connected\
    \ to one\n   interface can disturb a GTSM-protected session on the same or another\n\
    \   interface (by spoofing a GTSM peer's address) unless ingress\n   filtering\
    \ has been applied on the connecting interface.  As a result,\n   interfaces that\
    \ do not include such protection need to be trusted not\n   to originate attacks\
    \ on the router.\n"
- title: 5.4.  Fragmentation Considerations
  contents:
  - "5.4.  Fragmentation Considerations\n   As mentioned, fragmentation may restrict\
    \ the amount of information\n   available for classification.  Since non-initial\
    \ IP fragments do not\n   contain Layer 4 information, it is highly likely that\
    \ they cannot be\n   associated with a registered GTSM-enabled session.  Following\
    \ the\n   receiving protocol procedures described in Section 3, non-initial IP\n\
    \   fragments would likely be classified with Unknown trustworthiness.\n   And\
    \ since the IP packet would need to be reassembled in order to be\n   processed,\
    \ the end result is that the initial-fragment of a GTSM-\n   enabled session effectively\
    \ receives the treatment of an Unknown-\n   trustworthiness packet, and the complete\
    \ reassembled packet receives\n   the aggregate of the Unknowns.\n   In principle,\
    \ an implementation could remember the TTL of all\n   received fragments.  Then\
    \ when reassembling the packet, verify that\n   the TTL of all fragments match\
    \ the required value for an associated\n   GTSM-enabled session.  In the likely\
    \ common case that the\n   implementation does not do this check on all fragments,\
    \ then it is\n   possible for a legitimate first fragment (which passes the GTSM\n\
    \   check) to be combined with spoofed non-initial fragments, implying\n   that\
    \ the integrity of the received packet is unknown and unprotected.\n   If this\
    \ check is performed on all fragments at reassembly, and some\n   fragment does\
    \ not pass the GTSM check for a GTSM-enabled session, the\n   reassembled packet\
    \ is categorized as a Dangerous-trustworthiness\n   packet and receives the corresponding\
    \ treatment.\n   Further, reassembly requires to wait for all the fragments and\n\
    \   therefore likely invalidates or weakens the fifth assumption\n   presented\
    \ in Section 2: it may not be possible to classify non-\n   initial fragments\
    \ before going through a scarce resource in the\n   system, when fragments need\
    \ to be buffered for reassembly and later\n   processed by a CPU.  That is, when\
    \ classification cannot be done with\n   the required granularity, non-initial\
    \ fragments of GTSM-enabled\n   session packets would not use different resource\
    \ pools.\n   Consequently, to get practical protection from fragment attacks,\n\
    \   operators may need to rate-limit or discard all received fragments.\n   As\
    \ such, it is highly RECOMMENDED for GTSM-protected protocols to\n   avoid fragmentation\
    \ and reassembly by manual MTU tuning, using\n   adaptive measures such as Path\
    \ MTU Discovery (PMTUD), or any other\n   available method [RFC1191], [RFC1981],\
    \ or [RFC4821].\n"
- title: 5.5.  Multi-Hop Protocol Sessions
  contents:
  - "5.5.  Multi-Hop Protocol Sessions\n   GTSM could possibly offer some small, though\
    \ difficult to quantify,\n   degree of protection when used with multi-hop protocol\
    \ sessions (see\n   Appendix A).  In order to avoid having to quantify the degree\
    \ of\n   protection and the resulting applicability of multi-hop, we only\n  \
    \ describe the single-hop case because its security properties are\n   clearer.\n"
- title: 6.  Applicability Statement
  contents:
  - "6.  Applicability Statement\n   GTSM is only applicable to environments with\
    \ inherently limited\n   topologies (and is most effective in those cases where\
    \ protocol peers\n   are directly connected).  In particular, its application\
    \ should be\n   limited to those cases in which protocol peers are directly\n\
    \   connected.\n   GTSM will not protect against attackers who are as close to\
    \ the\n   protected station as its legitimate peer.  For example, if the\n   legitimate\
    \ peer is one hop away, GTSM will not protect from attacks\n   from directly connected\
    \ devices on the same interface (see\n   Section 2.2 for more).\n   Experimentation\
    \ on GTSM's applicability and security properties is\n   needed in multi-hop scenarios.\
    \  The multi-hop scenarios where GTSM\n   might be applicable is expected to have\
    \ the following\n   characteristics: the topology between peers is fairly static\
    \ and\n   well-known, and in which the intervening network (between the peers)\n\
    \   is trusted.\n"
- title: 6.1.  Backwards Compatibility
  contents:
  - "6.1.  Backwards Compatibility\n   RFC 3682 [RFC3682] did not specify how to handle\
    \ \"related messages\"\n   (ICMP errors).  This specification mandates setting\
    \ and verifying\n   TTL=255 of those as well as the main protocol packets.\n \
    \  Setting TTL=255 in related messages does not cause issues for RFC\n   3682\
    \ implementations.\n   Requiring TTL=255 in related messages may have impact with\
    \ RFC 3682\n   implementations, depending on which default TTL the implementation\n\
    \   uses for originated packets; some implementations are known to use\n   255,\
    \ while 64 or other values are also used.  Related messages from\n   the latter\
    \ category of RFC 3682 implementations would be classified\n   as Dangerous and\
    \ treated as described in Section 3.  This is not\n   believed to be a significant\
    \ problem because protocols do not depend\n   on related messages (e.g., typically\
    \ having a protocol exchange for\n   closing the session instead of doing a TCP-RST),\
    \ and indeed the\n   delivery of related messages is not reliable.  As such, related\n\
    \   messages typically provide an optimization to shorten a protocol\n   keepalive\
    \ timeout.  Regardless of these issues, given that related\n   messages provide\
    \ a significant attack vector to e.g., reset protocol\n   sessions, making this\
    \ further restriction seems sensible.\n"
- title: 7.  References
  contents:
  - '7.  References

    '
- title: 7.1.  Normative References
  contents:
  - "7.1.  Normative References\n   [RFC0791]  Postel, J., \"Internet Protocol\",\
    \ STD 5, RFC 791,\n              September 1981.\n   [RFC2003]  Perkins, C., \"\
    IP Encapsulation within IP\", RFC 2003,\n              October 1996.\n   [RFC2119]\
    \  Bradner, S., \"Key words for use in RFCs to Indicate\n              Requirement\
    \ Levels\", BCP 14, RFC 2119, March 1997.\n   [RFC2461]  Narten, T., Nordmark,\
    \ E., and W. Simpson, \"Neighbor\n              Discovery for IP Version 6 (IPv6)\"\
    , RFC 2461,\n              December 1998.\n   [RFC2784]  Farinacci, D., Li, T.,\
    \ Hanks, S., Meyer, D., and P.\n              Traina, \"Generic Routing Encapsulation\
    \ (GRE)\", RFC 2784,\n              March 2000.\n   [RFC3392]  Chandra, R. and\
    \ J. Scudder, \"Capabilities Advertisement\n              with BGP-4\", RFC 3392,\
    \ November 2002.\n   [RFC3443]  Agarwal, P. and B. Akyol, \"Time To Live (TTL)\
    \ Processing\n              in Multi-Protocol Label Switching (MPLS) Networks\"\
    ,\n              RFC 3443, January 2003.\n   [RFC4213]  Nordmark, E. and R. Gilligan,\
    \ \"Basic Transition Mechanisms\n              for IPv6 Hosts and Routers\", RFC\
    \ 4213, October 2005.\n   [RFC4271]  Rekhter, Y., Li, T., and S. Hares, \"A Border\
    \ Gateway\n              Protocol 4 (BGP-4)\", RFC 4271, January 2006.\n   [RFC4301]\
    \  Kent, S. and K. Seo, \"Security Architecture for the\n              Internet\
    \ Protocol\", RFC 4301, December 2005.\n"
- title: 7.2.  Informative References
  contents:
  - "7.2.  Informative References\n   [BITW]     \"Thread: 'IP-in-IP, TTL decrementing\
    \ when forwarding and\n              BITW' on int-area list, Message-ID:\n   \
    \           <Pine.LNX.4.64.0606020830220.12705@netcore.fi>\",\n              June\
    \ 2006, <http://www1.ietf.org/mail-archive/web/\n              int-area/current/msg00267.html>.\n\
    \   [RFC1191]  Mogul, J. and S. Deering, \"Path MTU discovery\", RFC 1191,\n \
    \             November 1990.\n   [RFC1981]  McCann, J., Deering, S., and J. Mogul,\
    \ \"Path MTU Discovery\n              for IP version 6\", RFC 1981, August 1996.\n\
    \   [RFC3032]  Rosen, E., Tappan, D., Fedorkow, G., Rekhter, Y.,\n           \
    \   Farinacci, D., Li, T., and A. Conta, \"MPLS Label Stack\n              Encoding\"\
    , RFC 3032, January 2001.\n   [RFC3682]  Gill, V., Heasley, J., and D. Meyer,\
    \ \"The Generalized TTL\n              Security Mechanism (GTSM)\", RFC 3682,\
    \ February 2004.\n   [RFC3704]  Baker, F. and P. Savola, \"Ingress Filtering for\
    \ Multihomed\n              Networks\", BCP 84, RFC 3704, March 2004.\n   [RFC4272]\
    \  Murphy, S., \"BGP Security Vulnerabilities Analysis\",\n              RFC 4272,\
    \ January 2006.\n   [RFC4821]  Mathis, M. and J. Heffner, \"Packetization Layer\
    \ Path MTU\n              Discovery\", RFC 4821, March 2007.\n"
- title: Appendix A.  Multi-Hop GTSM
  contents:
  - "Appendix A.  Multi-Hop GTSM\n   NOTE: This is a non-normative part of the specification.\n\
    \   The main applicability of GTSM is for directly connected peers.  GTSM\n  \
    \ could be used for non-directly connected sessions as well, where the\n   recipient\
    \ would check that the TTL is within a configured number of\n   hops from 255\
    \ (e.g., check that packets have 254 or 255).  As such\n   deployment is expected\
    \ to have a more limited applicability and\n   different security implications,\
    \ it is not specified in this\n   document.\n"
- title: Appendix B.  Changes Since RFC 3682
  contents:
  - "Appendix B.  Changes Since RFC 3682\n   o  Bring the work on the Standards Track\
    \ (RFC 3682 was Experimental).\n   o  New text on GTSM applicability and use in\
    \ new and existing\n      protocols.\n   o  Restrict the scope to not specify\
    \ multi-hop scenarios.\n   o  Explicitly require that related messages (ICMP errors)\
    \ must also\n      be sent and checked to have TTL=255.  See Section 6.1 for\n\
    \      discussion on backwards compatibility.\n   o  Clarifications relating to\
    \ fragmentation, security with tunneling,\n      and implications of ingress filtering.\n\
    \   o  A significant number of editorial improvements and clarifications.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Vijay Gill\n   EMail: vijay@umbc.edu\n   John Heasley\n\
    \   EMail: heas@shrubbery.net\n   David Meyer\n   EMail: dmm@1-4-5.net\n   Pekka\
    \ Savola (editor)\n   Espoo\n   Finland\n   EMail: psavola@funet.fi\n   Carlos\
    \ Pignataro\n   EMail: cpignata@cisco.com\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The IETF Trust (2007).\n   This document\
    \ is subject to the rights, licenses and restrictions\n   contained in BCP 78,\
    \ and except as set forth therein, the authors\n   retain all their rights.\n\
    \   This document and the information contained herein are provided on an\n  \
    \ \"AS IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n  \
    \ OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY, THE IETF TRUST AND\n   THE\
    \ INTERNET ENGINEERING TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS\n   OR IMPLIED,\
    \ INCLUDING BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF\n   THE INFORMATION\
    \ HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY\
    \ OR FITNESS FOR A PARTICULAR PURPOSE.\n"
- title: Intellectual Property
  contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or\
    \ scope of any\n   Intellectual Property Rights or other rights that might be\
    \ claimed to\n   pertain to the implementation or use of the technology described\
    \ in\n   this document or the extent to which any license under such rights\n\
    \   might or might not be available; nor does it represent that it has\n   made\
    \ any independent effort to identify any such rights.  Information\n   on the\
    \ procedures with respect to rights in RFC documents can be\n   found in BCP 78\
    \ and BCP 79.\n   Copies of IPR disclosures made to the IETF Secretariat and any\n\
    \   assurances of licenses to be made available, or the result of an\n   attempt\
    \ made to obtain a general license or permission for the use of\n   such proprietary\
    \ rights by implementers or users of this\n   specification can be obtained from\
    \ the IETF on-line IPR repository at\n   http://www.ietf.org/ipr.\n   The IETF\
    \ invites any interested party to bring to its attention any\n   copyrights, patents\
    \ or patent applications, or other proprietary\n   rights that may cover technology\
    \ that may be required to implement\n   this standard.  Please address the information\
    \ to the IETF at\n   ietf-ipr@ietf.org.\n"
