This document describes a directory access protocol that provides both read and update access.
Update access requires secure authentication, but this document does not mandate implementation of any satisfactory authentication mechanisms.
In accordance with RFC 2026, section 4.4.1, this specification is being approved by IESG as a Proposed Standard despite this limitation, for the following reasons: a. to encourage implementation and interoperability testing of these protocols (with or without update access) before they are deployed, and b. to encourage deployment and use of these protocols in read only applications.
(e.g. applications where LDAPv3 is used as a query language for directories which are updated by some secure mechanism other than LDAP), and c. to avoid delaying the advancement and deployment of other Internet standards track protocols which require the ability to query, but not update, LDAPv3 directory servers.
Readers are hereby warned that until mandatory authentication mechanisms are standardized, clients and servers written according to this specification which make use of update functionality are UNLIKELY TO INTEROPERATE, or MAY INTEROPERATE ONLY IF AUTHENTICATION IS REDUCED TO AN UNACCEPTABLY WEAK LEVEL.
Implementors are hereby discouraged from deploying LDAPv3 clients or servers which implement the update functionality, until a Proposed Standard for mandatory authentication in LDAPv3 has been approved and published as an RFC. 2.
Abstract The Lightweight Directory Access Protocol (LDAP)
[1] defines a network representation of a search filter transmitted to an LDAP server.
Some applications may find it useful to have a common way of representing these search filters in a human readable form.
This document defines a human readable string format for representing LDAP search filters.
This document replaces RFC 1960, extending the string LDAP filter definition to include support for LDAP version 3 extended match filters, and including support for representing the full range of possible LDAP search filters.
An LDAPv3 search filter is defined in Section 4.5.1 of [1] as follows:
SEQUENCE { attributeDesc   AttributeDescription, attributeValue  AttributeValue } MatchingRuleAssertion ::
OCTET STRING where the LDAPString above is limited to the UTF 8 encoding of the ISO 10646 character
The AttributeDescription is a string representation of the attribute description and is defined in [1].
The AttributeValue and AssertionValue OCTET STRING have the form defined in [2].
The Filter is encoded for transmission over a network using the Basic Encoding Rules defined in [3], with simplifications described in [1].
The string representation of an LDAP search filter is defined by the following grammar, following the ABNF notation defined in [5].
The filter format uses a prefix notation.
The attr, matchingrule, and value constructs are as described in the corresponding section of [1] given above.
The case of the two hexadecimal digits is not significant.
This simple escaping mechanism eliminates filter parsing ambiguities and allows any filter that can be represented in LDAP to be represented as a NUL terminated string.
Other characters besides the ones listed above may be escaped using this mechanism, for example, non printing characters.
Note that although both the substring and present productions in the grammar above can produce the "attr  " construct, this construct is used only to denote a presence filter.
This section gives a few examples of search filters written using this notation.
The following examples illustrate the use of extensible matching.
The second example illustrates the use of the ":dn" notation to indicate that matching rule "2.4.6.8.10" should be used when making comparisons, and that the attributes of an entry's distinguished name should be considered part of the entry when evaluating the match.
The third example denotes an equality match, except that DN components should be considered part of the entry when doing the match.
The fourth example is a filter that should be applied to any attribute supporting the matching rule given (since the attr has been left off).
Attributes supporting the matching rule contained in the DN should also be considered.
The following examples illustrate the use of the escaping mechanism.
(o Parens R Us \28for all your parenthetical needs\29)
The first example shows the use of the escaping mechanism to represent parenthesis characters.
The third illustrates the escaping of the backslash character.
The fourth example shows a filter searching for the four byte value 0x00000004, illustrating the use of the escaping mechanism to represent arbitrary data, including NUL characters.
The final example illustrates the use of the escaping mechanism to represent various non ASCII UTF 8 characters.
This memo describes a string representation of LDAP search filters.
While the representation itself has no known security implications, LDAP search filters do.
They are interpreted by LDAP servers to select entries from which data is retrieved.
LDAP servers should take care to protect the data they maintain from unauthorized access.
