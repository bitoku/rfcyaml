- title: __initial_text__
  contents:
  - '                        IP Authentication Header

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (1998).  All Rights Reserved.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n                 3.3.3.1.2.3 Extension Headers Not Containing\
    \ Options.11\n              3.3.3.2.2  Implicit Packet Padding......................12\n\
    \        3.3.4  Fragmentation..........................................12\n  \
    \   3.4  Inbound Packet Processing...................................13\n    \
    \    3.4.1  Reassembly.............................................13\n      \
    \  3.4.2  Security Association Lookup............................13\n        3.4.3\
    \  Sequence Number Verification...........................13\n        3.4.4  Integrity\
    \ Check Value Verification.....................15\n  4. Auditing.........................................................15\n\
    \  5. Conformance Requirements.........................................16\n  6.\
    \ Security Considerations..........................................16\n  7. Differences\
    \ from RFC 1826........................................16\n  Acknowledgements....................................................17\n\
    \  Appendix A -- Mutability of IP Options/Extension Headers............18\n  \
    \   A1. IPv4 Options.................................................18\n    \
    \ A2. IPv6 Extension Headers.......................................19\n  References..........................................................20\n\
    \  Disclaimer..........................................................21\n  Author\
    \ Information..................................................22\n  Full Copyright\
    \ Statement............................................22\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   The IP Authentication Header (AH) is used to provide connectionless\n\
    \   integrity and data origin authentication for IP datagrams (hereafter\n   referred\
    \ to as just \"authentication\"), and to provide protection\n   against replays.\
    \  This latter, optional service may be selected, by\n   the receiver, when a\
    \ Security Association is established. (Although\n   the default calls for the\
    \ sender to increment the Sequence Number\n   used for anti-replay, the service\
    \ is effective only if the receiver\n   checks the Sequence Number.)  AH provides\
    \ authentication for as much\n   of the IP header as possible, as well as for\
    \ upper level protocol\n   data.  However, some IP header fields may change in\
    \ transit and the\n   value of these fields, when the packet arrives at the receiver,\
    \ may\n   not be predictable by the sender.  The values of such fields cannot\n\
    \   be protected by AH.  Thus the protection provided to the IP header by\n  \
    \ AH is somewhat piecemeal.\n   AH may be applied alone, in combination with the\
    \ IP Encapsulating\n   Security Payload (ESP) [KA97b], or in a nested fashion\
    \ through the\n   use of tunnel mode (see \"Security Architecture for the Internet\n\
    \   Protocol\" [KA97a], hereafter referred to as the Security Architecture\n \
    \  document).  Security services can be provided between a pair of\n   communicating\
    \ hosts, between a pair of communicating security\n   gateways, or between a security\
    \ gateway and a host.  ESP may be used\n   to provide the same security services,\
    \ and it also provides a\n   confidentiality (encryption) service.  The primary\
    \ difference between\n   the authentication provided by ESP and AH is the extent\
    \ of the\n   coverage.  Specifically, ESP does not protect any IP header fields\n\
    \   unless those fields are encapsulated by ESP (tunnel mode).  For more\n   details\
    \ on how to use AH and ESP in various network environments, see\n   the Security\
    \ Architecture document [KA97a].\n   It is assumed that the reader is familiar\
    \ with the terms and concepts\n   described in the Security Architecture document.\
    \  In particular, the\n   reader should be familiar with the definitions of security\
    \ services\n   offered by AH and ESP, the concept of Security Associations, the\
    \ ways\n   in which AH can be used in conjunction with ESP, and the different\n\
    \   key management options available for AH and ESP.  (With regard to the\n  \
    \ last topic, the current key management options required for both AH\n   and\
    \ ESP are manual keying and automated keying via IKE [HC98].)\n   The keywords\
    \ MUST, MUST NOT, REQUIRED, SHALL, SHALL NOT, SHOULD,\n   SHOULD NOT, RECOMMENDED,\
    \ MAY, and OPTIONAL, when they appear in this\n   document, are to be interpreted\
    \ as described in RFC 2119 [Bra97].\n"
- title: 2.  Authentication Header Format
  contents:
  - "2.  Authentication Header Format\n   The protocol header (IPv4, IPv6, or Extension)\
    \ immediately preceding\n   the AH header will contain the value 51 in its Protocol\
    \ (IPv4) or\n   Next Header (IPv6, Extension) field [STD-2].\n    0          \
    \         1                   2                   3\n    0 1 2 3 4 5 6 7 8 9 0\
    \ 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   | Next Header   |  Payload Len  |          RESERVED             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                 Security Parameters Index (SPI)               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                    Sequence Number Field                      |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                                                               |\n   +  \
    \              Authentication Data (variable)                 |\n   |        \
    \                                                       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   The following subsections define the fields that comprise the AH\n   format.\
    \  All the fields described here are mandatory, i.e., they are\n   always present\
    \ in the AH format and are included in the Integrity\n   Check Value (ICV) computation\
    \ (see Sections 2.6 and 3.3.3).\n"
- title: 2.1  Next Header
  contents:
  - "2.1  Next Header\n   The Next Header is an 8-bit field that identifies the type\
    \ of the\n   next payload after the Authentication Header.  The value of this\n\
    \   field is chosen from the set of IP Protocol Numbers defined in the\n   most\
    \ recent \"Assigned Numbers\" [STD-2] RFC from the Internet Assigned\n   Numbers\
    \ Authority (IANA).\n"
- title: 2.2  Payload Length
  contents:
  - "2.2  Payload Length\n   This 8-bit field specifies the length of AH in 32-bit\
    \ words (4-byte\n   units), minus \"2\".  (All IPv6 extension headers, as per\
    \ RFC 1883,\n   encode the \"Hdr Ext Len\" field by first subtracting 1 (64-bit\
    \ word)\n   from the header length (measured in 64-bit words).  AH is an IPv6\n\
    \   extension header.  However, since its length is measured in 32-bit\n   words,\
    \ the \"Payload Length\" is calculated by subtracting 2 (32 bit\n   words).) \
    \ In the \"standard\" case of a 96-bit authentication value\n   plus the 3 32-bit\
    \ word fixed portion, this length field will be \"4\".\n   A \"null\" authentication\
    \ algorithm may be used only for debugging\n   purposes.  Its use would result\
    \ in a \"1\" value for this field for\n   IPv4 or a \"2\" for IPv6, as there would\
    \ be no corresponding\n   Authentication Data field (see Section 3.3.3.2.1 on\
    \ \"Authentication\n   Data Padding\").\n"
- title: 2.3  Reserved
  contents:
  - "2.3  Reserved\n   This 16-bit field is reserved for future use.  It MUST be set\
    \ to\n   \"zero.\" (Note that the value is included in the Authentication Data\n\
    \   calculation, but is otherwise ignored by the recipient.)\n"
- title: 2.4  Security Parameters Index (SPI)
  contents:
  - "2.4  Security Parameters Index (SPI)\n   The SPI is an arbitrary 32-bit value\
    \ that, in combination with the\n   destination IP address and security protocol\
    \ (AH), uniquely\n   identifies the Security Association for this datagram.  The\
    \ set of\n   SPI values in the range 1 through 255 are reserved by the Internet\n\
    \   Assigned Numbers Authority (IANA) for future use; a reserved SPI\n   value\
    \ will not normally be assigned by IANA unless the use of the\n   assigned SPI\
    \ value is specified in an RFC.  It is ordinarily selected\n   by the destination\
    \ system upon establishment of an SA (see the\n   Security Architecture document\
    \ for more details).\n   The SPI value of zero (0) is reserved for local, implementation-\n\
    \   specific use and MUST NOT be sent on the wire.  For example, a key\n   management\
    \ implementation MAY use the zero SPI value to mean \"No\n   Security Association\
    \ Exists\" during the period when the IPsec\n   implementation has requested that\
    \ its key management entity establish\n   a new SA, but the SA has not yet been\
    \ established.\n"
- title: 2.5  Sequence Number
  contents:
  - "2.5  Sequence Number\n   This unsigned 32-bit field contains a monotonically\
    \ increasing\n   counter value (sequence number).  It is mandatory and is always\n\
    \   present even if the receiver does not elect to enable the anti-replay\n  \
    \ service for a specific SA.  Processing of the Sequence Number field\n   is at\
    \ the discretion of the receiver, i.e., the sender MUST always\n   transmit this\
    \ field, but the receiver need not act upon it (see the\n   discussion of Sequence\
    \ Number Verification in the \"Inbound Packet\n   Processing\" section below).\n\
    \   The sender's counter and the receiver's counter are initialized to 0\n   when\
    \ an SA is established.  (The first packet sent using a given SA\n   will have\
    \ a Sequence Number of 1; see Section 3.3.2 for more details\n   on how the Sequence\
    \ Number is generated.)  If anti-replay is enabled\n   (the default), the transmitted\
    \ Sequence Number must never be allowed\n   to cycle.  Thus, the sender's counter\
    \ and the receiver's counter MUST\n   be reset (by establishing a new SA and thus\
    \ a new key) prior to the\n   transmission of the 2^32nd packet on an SA.\n"
- title: 2.6  Authentication Data
  contents:
  - "2.6  Authentication Data\n   This is a variable-length field that contains the\
    \ Integrity Check\n   Value (ICV) for this packet.  The field must be an integral\
    \ multiple\n   of 32 bits in length.  The details of the ICV computation are\n\
    \   described in Section 3.3.2 below.  This field may include explicit\n   padding.\
    \  This padding is included to ensure that the length of the\n   AH header is\
    \ an integral multiple of 32 bits (IPv4) or 64 bits\n   (IPv6).  All implementations\
    \ MUST support such padding.  Details of\n   how to compute the required padding\
    \ length are provided below.  The\n   authentication algorithm specification MUST\
    \ specify the length of the\n   ICV and the comparison rules and processing steps\
    \ for validation.\n"
- title: 3.  Authentication Header Processing
  contents:
  - '3.  Authentication Header Processing

    '
- title: 3.1  Authentication Header Location
  contents:
  - "3.1  Authentication Header Location\n   Like ESP, AH may be employed in two ways:\
    \ transport mode or tunnel\n   mode.  The former mode is applicable only to host\
    \ implementations and\n   provides protection for upper layer protocols, in addition\
    \ to\n   selected IP header fields.  (In this mode, note that for \"bump-in-\n\
    \   the-stack\" or \"bump-in-the-wire\" implementations, as defined in the\n \
    \  Security Architecture document, inbound and outbound IP fragments may\n   require\
    \ an IPsec implementation to perform extra IP\n   reassembly/fragmentation in\
    \ order to both conform to this\n   specification and provide transparent IPsec\
    \ support.  Special care is\n   required to perform such operations within these\
    \ implementations when\n   multiple interfaces are in use.)\n   In transport mode,\
    \ AH is inserted after the IP header and before an\n   upper layer protocol, e.g.,\
    \ TCP, UDP, ICMP, etc. or before any other\n   IPsec headers that have already\
    \ been inserted.  In the context of\n   IPv4, this calls for placing AH after\
    \ the IP header (and any options\n   that it contains), but before the upper layer\
    \ protocol.  (Note that\n   the term \"transport\" mode should not be misconstrued\
    \ as restricting\n   its use to TCP and UDP.  For example, an ICMP message MAY\
    \ be sent\n   using either \"transport\" mode or \"tunnel\" mode.)  The following\n\
    \   diagram illustrates AH transport mode positioning for a typical IPv4\n   packet,\
    \ on a \"before and after\" basis.\n                  BEFORE APPLYING AH\n   \
    \         ----------------------------\n      IPv4  |orig IP hdr  |     |    \
    \  |\n            |(any options)| TCP | Data |\n            ----------------------------\n\
    \                  AFTER APPLYING AH\n            ---------------------------------\n\
    \      IPv4  |orig IP hdr  |    |     |      |\n            |(any options)| AH\
    \ | TCP | Data |\n            ---------------------------------\n            |<-------\
    \ authenticated ------->|\n                 except for mutable fields\n   In the\
    \ IPv6 context, AH is viewed as an end-to-end payload, and thus\n   should appear\
    \ after hop-by-hop, routing, and fragmentation extension\n   headers.  The destination\
    \ options extension header(s) could appear\n   either before or after the AH header\
    \ depending on the semantics\n   desired.  The following diagram illustrates AH\
    \ transport mode\n   positioning for a typical IPv6 packet.\n                \
    \       BEFORE APPLYING AH\n            ---------------------------------------\n\
    \      IPv6  |             | ext hdrs |     |      |\n            | orig IP hdr\
    \ |if present| TCP | Data |\n            ---------------------------------------\n\
    \                      AFTER APPLYING AH\n            ------------------------------------------------------------\n\
    \      IPv6  |             |hop-by-hop, dest*, |    | dest |     |      |\n  \
    \          |orig IP hdr  |routing, fragment. | AH | opt* | TCP | Data |\n    \
    \        ------------------------------------------------------------\n      \
    \      |<---- authenticated except for mutable fields ----------->|\n        \
    \         * = if present, could be before AH, after AH, or both\n   ESP and AH\
    \ headers can be combined in a variety of modes.  The IPsec\n   Architecture document\
    \ describes the combinations of security\n   associations that must be supported.\n\
    \   Tunnel mode AH may be employed in either hosts or security gateways\n   (or\
    \ in so-called \"bump-in-the-stack\" or \"bump-in-the-wire\"\n   implementations,\
    \ as defined in the Security Architecture document).\n   When AH is implemented\
    \ in a security gateway (to protect transit\n   traffic), tunnel mode must be\
    \ used.  In tunnel mode, the \"inner\" IP\n   header carries the ultimate source\
    \ and destination addresses, while\n   an \"outer\" IP header may contain distinct\
    \ IP addresses, e.g.,\n   addresses of security gateways.  In tunnel mode, AH\
    \ protects the\n   entire inner IP packet, including the entire inner IP header.\
    \ The\n   position of AH in tunnel mode, relative to the outer IP header, is\n\
    \   the same as for AH in transport mode.  The following diagram\n   illustrates\
    \ AH tunnel mode positioning for typical IPv4 and IPv6\n   packets.\n        \
    \  ------------------------------------------------\n    IPv4  | new IP hdr* |\
    \    | orig IP hdr*  |    |      |\n          |(any options)| AH | (any options)\
    \ |TCP | Data |\n          ------------------------------------------------\n\
    \          |<- authenticated except for mutable fields -->|\n          |     \
    \      in the new IP hdr                  |\n          --------------------------------------------------------------\n\
    \    IPv6  |           | ext hdrs*|    |            | ext hdrs*|   |    |\n  \
    \        |new IP hdr*|if present| AH |orig IP hdr*|if present|TCP|Data|\n    \
    \      --------------------------------------------------------------\n      \
    \    |<-- authenticated except for mutable fields in new IP hdr ->|\n        \
    \   * = construction of outer IP hdr/extensions and modification\n           \
    \    of inner IP hdr/extensions is discussed below.\n"
- title: 3.2  Authentication Algorithms
  contents:
  - "3.2  Authentication Algorithms\n   The authentication algorithm employed for\
    \ the ICV computation is\n   specified by the SA.  For point-to-point communication,\
    \ suitable\n   authentication algorithms include keyed Message Authentication\
    \ Codes\n   (MACs) based on symmetric encryption algorithms (e.g., DES) or on\n\
    \   one-way hash functions (e.g., MD5 or SHA-1).  For multicast\n   communication,\
    \ one-way hash algorithms combined with asymmetric\n   signature algorithms are\
    \ appropriate, though performance and space\n   considerations currently preclude\
    \ use of such algorithms.  The\n   mandatory-to-implement authentication algorithms\
    \ are described in\n   Section 5 \"Conformance Requirements\".  Other algorithms\
    \ MAY be\n   supported.\n"
- title: 3.3  Outbound Packet Processing
  contents:
  - "3.3  Outbound Packet Processing\n   In transport mode, the sender inserts the\
    \ AH header after the IP\n   header and before an upper layer protocol header,\
    \ as described above.\n   In tunnel mode, the outer and inner IP header/extensions\
    \ can be\n   inter-related in a variety of ways.  The construction of the outer\
    \ IP\n   header/extensions during the encapsulation process is described in\n\
    \   the Security Architecture document.\n   If there is more than one IPsec header/extension\
    \ required, the order\n   of the application of the security headers MUST be defined\
    \ by\n   security policy.  For simplicity of processing, each IPsec header\n \
    \  SHOULD ignore the existence (i.e., not zero the contents or try to\n   predict\
    \ the contents) of IPsec headers to be applied later.  (While a\n   native IP\
    \ or bump-in-the-stack implementation could predict the\n   contents of later\
    \ IPsec headers that it applies itself, it won't be\n   possible for it to predict\
    \ any IPsec headers added by a bump-in-the-\n   wire implementation between the\
    \ host and the network.)\n"
- title: 3.3.1  Security Association Lookup
  contents:
  - "3.3.1  Security Association Lookup\n   AH is applied to an outbound packet only\
    \ after an IPsec\n   implementation determines that the packet is associated with\
    \ an SA\n   that calls for AH processing.  The process of determining what, if\n\
    \   any, IPsec processing is applied to outbound traffic is described in\n   the\
    \ Security Architecture document.\n"
- title: 3.3.2  Sequence Number Generation
  contents:
  - "3.3.2  Sequence Number Generation\n   The sender's counter is initialized to\
    \ 0 when an SA is established.\n   The sender increments the Sequence Number for\
    \ this SA and inserts the\n   new value into the Sequence Number Field.  Thus\
    \ the first packet sent\n   using a given SA will have a Sequence Number of 1.\n\
    \   If anti-replay is enabled (the default), the sender checks to ensure\n   that\
    \ the counter has not cycled before inserting the new value in the\n   Sequence\
    \ Number field.  In other words, the sender MUST NOT send a\n   packet on an SA\
    \ if doing so would cause the Sequence Number to cycle.\n   An attempt to transmit\
    \ a packet that would result in Sequence Number\n   overflow is an auditable event.\
    \  (Note that this approach to Sequence\n   Number management does not require\
    \ use of modular arithmetic.)\n   The sender assumes anti-replay is enabled as\
    \ a default, unless\n   otherwise notified by the receiver (see 3.4.3).  Thus,\
    \ if the counter\n   has cycled, the sender will set up a new SA and key (unless\
    \ the SA\n   was configured with manual key management).\n   If anti-replay is\
    \ disabled, the sender does not need to monitor or\n   reset the counter, e.g.,\
    \ in the case of manual key management (see\n   Section 5.) However, the sender\
    \ still increments the counter and when\n   it reaches the maximum value, the\
    \ counter rolls over back to zero.\n"
- title: 3.3.3  Integrity Check Value Calculation
  contents:
  - "3.3.3  Integrity Check Value Calculation\n   The AH ICV is computed over:\n \
    \          o IP header fields that are either immutable in transit or\n      \
    \       that are predictable in value upon arrival at the endpoint\n         \
    \    for the AH SA\n           o the AH header (Next Header, Payload Len, Reserved,\
    \ SPI,\n             Sequence Number, and the Authentication Data (which is set\n\
    \             to zero for this computation), and explicit padding bytes\n    \
    \         (if any))\n           o the upper level protocol data, which is assumed\
    \ to be\n             immutable in transit\n"
- title: 3.3.3.1  Handling Mutable Fields
  contents:
  - "3.3.3.1  Handling Mutable Fields\n   If a field may be modified during transit,\
    \ the value of the field is\n   set to zero for purposes of the ICV computation.\
    \  If a field is\n   mutable, but its value at the (IPsec) receiver is predictable,\
    \ then\n   that value is inserted into the field for purposes of the ICV\n   calculation.\
    \  The Authentication Data field is also set to zero in\n   preparation for this\
    \ computation.  Note that by replacing each\n   field's value with zero, rather\
    \ than omitting the field, alignment is\n   preserved for the ICV calculation.\
    \  Also, the zero-fill approach\n   ensures that the length of the fields that\
    \ are so handled cannot be\n   changed during transit, even though their contents\
    \ are not explicitly\n   covered by the ICV.\n   As a new extension header or\
    \ IPv4 option is created, it will be\n   defined in its own RFC and SHOULD include\
    \ (in the Security\n   Considerations section) directions for how it should be\
    \ handled when\n   calculating the AH ICV.  If the IP (v4 or v6) implementation\n\
    \   encounters an extension header that it does not recognize, it will\n   discard\
    \ the packet and send an ICMP message.  IPsec will never see\n   the packet. \
    \ If the IPsec implementation encounters an IPv4 option\n   that it does not recognize,\
    \ it should zero the whole option, using\n   the second byte of the option as\
    \ the length.  IPv6 options (in\n   Destination extension headers or Hop by Hop\
    \ extension header) contain\n   a flag indicating mutability, which determines\
    \ appropriate processing\n   for such options.\n"
- title: 3.3.3.1.1  ICV Computation for IPv4
  contents:
  - '3.3.3.1.1  ICV Computation for IPv4

    '
- title: 3.3.3.1.1.1  Base Header Fields
  contents:
  - "3.3.3.1.1.1  Base Header Fields\n   The IPv4 base header fields are classified\
    \ as follows:\n   Immutable\n             Version\n             Internet Header\
    \ Length\n             Total Length\n             Identification\n           \
    \  Protocol (This should be the value for AH.)\n             Source Address\n\
    \             Destination Address (without loose or strict source routing)\n \
    \  Mutable but predictable\n             Destination Address (with loose or strict\
    \ source routing)\n   Mutable (zeroed prior to ICV calculation)\n            \
    \ Type of Service (TOS)\n             Flags\n             Fragment Offset\n  \
    \           Time to Live (TTL)\n             Header Checksum\n      TOS -- This\
    \ field is excluded because some routers are known to\n             change the\
    \ value of this field, even though the IP\n             specification does not\
    \ consider TOS to be a mutable header\n             field.\n      Flags -- This\
    \ field is excluded since an intermediate router might\n             set the DF\
    \ bit, even if the source did not select it.\n      Fragment Offset -- Since AH\
    \ is applied only to non-fragmented IP\n             packets, the Offset Field\
    \ must always be zero, and thus it\n             is excluded (even though it is\
    \ predictable).\n      TTL -- This is changed en-route as a normal course of processing\n\
    \             by routers, and thus its value at the receiver is not\n        \
    \     predictable by the sender.\n      Header Checksum -- This will change if\
    \ any of these other fields\n             changes, and thus its value upon reception\
    \ cannot be\n             predicted by the sender.\n"
- title: 3.3.3.1.1.2  Options
  contents:
  - "3.3.3.1.1.2  Options\n   For IPv4 (unlike IPv6), there is no mechanism for tagging\
    \ options as\n   mutable in transit.  Hence the IPv4 options are explicitly listed\
    \ in\n   Appendix A and classified as immutable, mutable but predictable, or\n\
    \   mutable.  For IPv4, the entire option is viewed as a unit; so even\n   though\
    \ the type and length fields within most options are immutable\n   in transit,\
    \ if an option is classified as mutable, the entire option\n   is zeroed for ICV\
    \ computation purposes.\n"
- title: 3.3.3.1.2  ICV Computation for IPv6
  contents:
  - '3.3.3.1.2  ICV Computation for IPv6

    '
- title: 3.3.3.1.2.1  Base Header Fields
  contents:
  - "3.3.3.1.2.1  Base Header Fields\n   The IPv6 base header fields are classified\
    \ as follows:\n   Immutable\n             Version\n             Payload Length\n\
    \             Next Header (This should be the value for AH.)\n             Source\
    \ Address\n             Destination Address (without Routing Extension Header)\n\
    \   Mutable but predictable\n             Destination Address (with Routing Extension\
    \ Header)\n   Mutable (zeroed prior to ICV calculation)\n             Class\n\
    \             Flow Label\n             Hop Limit\n"
- title: 3.3.3.1.2.2  Extension Headers Containing Options
  contents:
  - "3.3.3.1.2.2  Extension Headers Containing Options\n   IPv6 options in the Hop-by-Hop\
    \ and Destination Extension Headers\n   contain a bit that indicates whether the\
    \ option might change\n   (unpredictably) during transit.  For any option for\
    \ which contents\n   may change en-route, the entire \"Option Data\" field must\
    \ be treated\n   as zero-valued octets when computing or verifying the ICV.  The\n\
    \   Option Type and Opt Data Len are included in the ICV calculation.\n   All\
    \ options for which the bit indicates immutability are included in\n   the ICV\
    \ calculation.  See the IPv6 specification [DH95] for more\n   information.\n"
- title: 3.3.3.1.2.3  Extension Headers Not Containing Options
  contents:
  - "3.3.3.1.2.3  Extension Headers Not Containing Options\n   The IPv6 extension\
    \ headers that do not contain options are explicitly\n   listed in Appendix A\
    \ and classified as immutable, mutable but\n   predictable, or mutable.\n"
- title: 3.3.3.2  Padding
  contents:
  - '3.3.3.2  Padding

    '
- title: 3.3.3.2.1  Authentication Data Padding
  contents:
  - "3.3.3.2.1  Authentication Data Padding\n   As mentioned in section 2.6, the Authentication\
    \ Data field explicitly\n   includes padding to ensure that the AH header is a\
    \ multiple of 32\n   bits (IPv4) or 64 bits (IPv6).  If padding is required, its\
    \ length is\n   determined by two factors:\n             - the length of the ICV\n\
    \             - the IP protocol version (v4 or v6)\n   For example, if the output\
    \ of the selected algorithm is 96-bits, no\n   padding is required for either\
    \ IPv4 or for IPv6.  However, if a\n   different length ICV is generated, due\
    \ to use of a different\n   algorithm, then padding may be required depending\
    \ on the length and\n   IP protocol version.  The content of the padding field\
    \ is arbitrarily\n   selected by the sender.  (The padding is arbitrary, but need\
    \ not be\n   random to achieve security.)  These padding bytes are included in\
    \ the\n   Authentication Data calculation, counted as part of the Payload\n  \
    \ Length, and transmitted at the end of the Authentication Data field\n   to enable\
    \ the receiver to perform the ICV calculation.\n"
- title: 3.3.3.2.2  Implicit Packet Padding
  contents:
  - "3.3.3.2.2  Implicit Packet Padding\n   For some authentication algorithms, the\
    \ byte string over which the\n   ICV computation is performed must be a multiple\
    \ of a blocksize\n   specified by the algorithm.  If the IP packet length (including\
    \ AH)\n   does not match the blocksize requirements for the algorithm, implicit\n\
    \   padding MUST be appended to the end of the packet, prior to ICV\n   computation.\
    \  The padding octets MUST have a value of zero.  The\n   blocksize (and hence\
    \ the length of the padding) is specified by the\n   algorithm specification.\
    \  This padding is not transmitted with the\n   packet.  Note that MD5 and SHA-1\
    \ are viewed as having a 1-byte\n   blocksize because of their internal padding\
    \ conventions.\n"
- title: 3.3.4  Fragmentation
  contents:
  - "3.3.4  Fragmentation\n   If required, IP fragmentation occurs after AH processing\
    \ within an\n   IPsec implementation.  Thus, transport mode AH is applied only\
    \ to\n   whole IP datagrams (not to IP fragments).  An IP packet to which AH\n\
    \   has been applied may itself be fragmented by routers en route, and\n   such\
    \ fragments must be reassembled prior to AH processing at a\n   receiver.  In\
    \ tunnel mode, AH is applied to an IP packet, the payload\n   of which may be\
    \ a fragmented IP packet.  For example, a security\n   gateway or a \"bump-in-the-stack\"\
    \ or \"bump-in-the-wire\" IPsec\n   implementation (see the Security Architecture\
    \ document for details)\n   may apply tunnel mode AH to such fragments.\n"
- title: 3.4  Inbound Packet Processing
  contents:
  - "3.4  Inbound Packet Processing\n   If there is more than one IPsec header/extension\
    \ present, the\n   processing for each one ignores (does not zero, does not use)\
    \ any\n   IPsec headers applied subsequent to the header being processed.\n"
- title: 3.4.1  Reassembly
  contents:
  - "3.4.1  Reassembly\n   If required, reassembly is performed prior to AH processing.\
    \  If a\n   packet offered to AH for processing appears to be an IP fragment,\n\
    \   i.e., the OFFSET field is non-zero or the MORE FRAGMENTS flag is set,\n  \
    \ the receiver MUST discard the packet; this is an auditable event. The\n   audit\
    \ log entry for this event SHOULD include the SPI value,\n   date/time, Source\
    \ Address, Destination Address, and (in IPv6) the\n   Flow ID.\n   NOTE: For packet\
    \ reassembly, the current IPv4 spec does NOT require\n   either the zero'ing of\
    \ the OFFSET field or the clearing of the MORE\n   FRAGMENTS flag.  In order for\
    \ a reassembled packet to be processed by\n   IPsec (as opposed to discarded as\
    \ an apparent fragment), the IP code\n   must do these two things after it reassembles\
    \ a packet.\n"
- title: 3.4.2  Security Association Lookup
  contents:
  - "3.4.2  Security Association Lookup\n   Upon receipt of a packet containing an\
    \ IP Authentication Header, the\n   receiver determines the appropriate (unidirectional)\
    \ SA, based on the\n   destination IP address, security protocol (AH), and the\
    \ SPI.  (This\n   process is described in more detail in the Security Architecture\n\
    \   document.)  The SA indicates whether the Sequence Number field will\n   be\
    \ checked, specifies the algorithm(s) employed for ICV computation,\n   and indicates\
    \ the key(s) required to validate the ICV.\n   If no valid Security Association\
    \ exists for this session (e.g., the\n   receiver has no key), the receiver MUST\
    \ discard the packet; this is\n   an auditable event.  The audit log entry for\
    \ this event SHOULD\n   include the SPI value, date/time, Source Address, Destination\n\
    \   Address, and (in IPv6) the Flow ID.\n"
- title: 3.4.3  Sequence Number Verification
  contents:
  - "3.4.3  Sequence Number Verification\n   All AH implementations MUST support the\
    \ anti-replay service, though\n   its use may be enabled or disabled by the receiver\
    \ on a per-SA basis.\n   (Note that there are no provisions for managing transmitted\
    \ Sequence\n   Number values among multiple senders directing traffic to a single\
    \ SA\n   (irrespective of whether the destination address is unicast,\n   broadcast,\
    \ or multicast).  Thus the anti-replay service SHOULD NOT be\n   used in a multi-sender\
    \ environment that employs a single SA.)\n   If the receiver does not enable anti-replay\
    \ for an SA, no inbound\n   checks are performed on the Sequence Number.  However,\
    \ from the\n   perspective of the sender, the default is to assume that anti-replay\n\
    \   is enabled at the receiver.  To avoid having the sender do\n   unnecessary\
    \ sequence number monitoring and SA setup (see section\n   3.3.2), if an SA establishment\
    \ protocol such as IKE is employed, the\n   receiver SHOULD notify the sender,\
    \ during SA establishment, if the\n   receiver will not provide anti-replay protection.\n\
    \   If the receiver has enabled the anti-replay service for this SA, the\n   receiver\
    \ packet counter for the SA MUST be initialized to zero when\n   the SA is established.\
    \  For each received packet, the receiver MUST\n   verify that the packet contains\
    \ a Sequence Number that does not\n   duplicate the Sequence Number of any other\
    \ packets received during\n   the life of this SA.  This SHOULD be the first AH\
    \ check applied to a\n   packet after it has been matched to an SA, to speed rejection\
    \ of\n   duplicate packets.\n   Duplicates are rejected through the use of a sliding\
    \ receive window.\n   (How the window is implemented is a local matter, but the\
    \ following\n   text describes the functionality that the implementation must\n\
    \   exhibit.)  A MINIMUM window size of 32 MUST be supported; but a\n   window\
    \ size of 64 is preferred and SHOULD be employed as the default.\n   Another window\
    \ size (larger than the MINIMUM) MAY be chosen by the\n   receiver.  (The receiver\
    \ does NOT notify the sender of the window\n   size.)\n   The \"right\" edge of\
    \ the window represents the highest, validated\n   Sequence Number value received\
    \ on this SA.  Packets that contain\n   Sequence Numbers lower than the \"left\"\
    \ edge of the window are\n   rejected.  Packets falling within the window are\
    \ checked against a\n   list of received packets within the window.  An efficient\
    \ means for\n   performing this check, based on the use of a bit mask, is described\n\
    \   in the Security Architecture document.\n   If the received packet falls within\
    \ the window and is new, or if the\n   packet is to the right of the window, then\
    \ the receiver proceeds to\n   ICV verification.  If the ICV validation fails,\
    \ the receiver MUST\n   discard the received IP datagram as invalid; this is an\
    \ auditable\n   event.  The audit log entry for this event SHOULD include the\
    \ SPI\n   value, date/time, Source Address, Destination Address, the Sequence\n\
    \   Number, and (in IPv6) the Flow ID.  The receive window is updated\n   only\
    \ if the ICV verification succeeds.\n   DISCUSSION:\n      Note that if the packet\
    \ is either inside the window and new, or is\n      outside the window on the\
    \ \"right\" side, the receiver MUST\n      authenticate the packet before updating\
    \ the Sequence Number window\n      data.\n"
- title: 3.4.4  Integrity Check Value Verification
  contents:
  - "3.4.4  Integrity Check Value Verification\n   The receiver computes the ICV over\
    \ the appropriate fields of the\n   packet, using the specified authentication\
    \ algorithm, and verifies\n   that it is the same as the ICV included in the Authentication\
    \ Data\n   field of the packet.  Details of the computation are provided below.\n\
    \   If the computed and received ICV's match, then the datagram is valid,\n  \
    \ and it is accepted.  If the test fails, then the receiver MUST\n   discard the\
    \ received IP datagram as invalid; this is an auditable\n   event.  The audit\
    \ log entry SHOULD include the SPI value, date/time\n   received, Source Address,\
    \ Destination Address, and (in IPv6) the Flow\n   ID.\n   DISCUSSION:\n      Begin\
    \ by saving the ICV value and replacing it (but not any\n      Authentication\
    \ Data padding) with zero.  Zero all other fields\n      that may have been modified\
    \ during transit.  (See section 3.3.3.1\n      for a discussion of which fields\
    \ are zeroed before performing the\n      ICV calculation.)  Check the overall\
    \ length of the packet, and if\n      it requires implicit padding based on the\
    \ requirements of the\n      authentication algorithm, append zero-filled bytes\
    \ to the end of\n      the packet as required.  Perform the ICV computation and\
    \ compare\n      the result with the saved value, using the comparison rules\n\
    \      defined by the algorithm specification.  (For example, if a\n      digital\
    \ signature and one-way hash are used for the ICV\n      computation, the matching\
    \ process is more complex.)\n"
- title: 4.  Auditing
  contents:
  - "4.  Auditing\n   Not all systems that implement AH will implement auditing. \
    \ However,\n   if AH is incorporated into a system that supports auditing, then\
    \ the\n   AH implementation MUST also support auditing and MUST allow a system\n\
    \   administrator to enable or disable auditing for AH.  For the most\n   part,\
    \ the granularity of auditing is a local matter.  However,\n   several auditable\
    \ events are identified in this specification and for\n   each of these events\
    \ a minimum set of information that SHOULD be\n   included in an audit log is\
    \ defined.  Additional information also MAY\n   be included in the audit log for\
    \ each of these events, and additional\n   events, not explicitly called out in\
    \ this specification, also MAY\n   result in audit log entries.  There is no requirement\
    \ for the\n   receiver to transmit any message to the purported sender in response\n\
    \   to the detection of an auditable event, because of the potential to\n   induce\
    \ denial of service via such action.\n"
- title: 5.  Conformance Requirements
  contents:
  - "5.  Conformance Requirements\n   Implementations that claim conformance or compliance\
    \ with this\n   specification MUST fully implement the AH syntax and processing\n\
    \   described here and MUST comply with all requirements of the Security\n   Architecture\
    \ document.  If the key used to compute an ICV is manually\n   distributed, correct\
    \ provision of the anti-replay service would\n   require correct maintenance of\
    \ the counter state at the sender, until\n   the key is replaced, and there likely\
    \ would be no automated recovery\n   provision if counter overflow were imminent.\
    \  Thus a compliant\n   implementation SHOULD NOT provide this service in conjunction\
    \ with\n   SAs that are manually keyed.  A compliant AH implementation MUST\n\
    \   support the following mandatory-to-implement algorithms:\n             - HMAC\
    \ with MD5 [MG97a]\n             - HMAC with SHA-1 [MG97b]\n"
- title: 6.  Security Considerations
  contents:
  - "6.  Security Considerations\n   Security is central to the design of this protocol,\
    \ and these\n   security considerations permeate the specification.  Additional\n\
    \   security-relevant aspects of using the IPsec protocol are discussed\n   in\
    \ the Security Architecture document.\n"
- title: 7.  Differences from RFC 1826
  contents:
  - "7.  Differences from RFC 1826\n   This specification of AH differs from RFC 1826\
    \ [ATK95] in several\n   important respects, but the fundamental features of AH\
    \ remain intact.\n   One goal of the revision of RFC 1826 was to provide a complete\n\
    \   framework for AH, with ancillary RFCs required only for algorithm\n   specification.\
    \  For example, the anti-replay service is now an\n   integral, mandatory part\
    \ of AH, not a feature of a transform defined\n   in another RFC.  Carriage of\
    \ a sequence number to support this\n   service is now required at all times.\
    \  The default algorithms\n   required for interoperability have been changed\
    \ to HMAC with MD5 or\n   SHA-1 (vs. keyed MD5), for security reasons.  The list\
    \ of IPv4 header\n   fields excluded from the ICV computation has been expanded\
    \ to include\n   the OFFSET and FLAGS fields.\n   Another motivation for revision\
    \ was to provide additional detail and\n   clarification of subtle points.  This\
    \ specification provides\n   rationale for exclusion of selected IPv4 header fields\
    \ from AH\n   coverage and provides examples on positioning of AH in both the\
    \ IPv4\n   and v6 contexts.  Auditing requirements have been clarified in this\n\
    \   version of the specification.  Tunnel mode AH was mentioned only in\n   passing\
    \ in RFC 1826, but now is a mandatory feature of AH.\n   Discussion of interactions\
    \ with key management and with security\n   labels have been moved to the Security\
    \ Architecture document.\n"
- title: Acknowledgements
  contents:
  - "Acknowledgements\n   For over 3 years, this document has evolved through multiple\
    \ versions\n   and iterations.  During this time, many people have contributed\n\
    \   significant ideas and energy to the process and the documents\n   themselves.\
    \  The authors would like to thank Karen Seo for providing\n   extensive help\
    \ in the review, editing, background research, and\n   coordination for this version\
    \ of the specification.  The authors\n   would also like to thank the members\
    \ of the IPsec and IPng working\n   groups, with special mention of the efforts\
    \ of (in alphabetic order):\n   Steve Bellovin, Steve Deering, Francis Dupont,\
    \ Phil Karn, Frank\n   Kastenholz, Perry Metzger, David Mihelcic, Hilarie Orman,\
    \ Norman\n   Shulman, William Simpson, and Nina Yuan.\n"
- title: Appendix A -- Mutability of IP Options/Extension Headers
  contents:
  - 'Appendix A -- Mutability of IP Options/Extension Headers

    '
- title: A1.  IPv4 Options
  contents:
  - "A1.  IPv4 Options\n   This table shows how the IPv4 options are classified with\
    \ regard to\n   \"mutability\".  Where two references are provided, the second\
    \ one\n   supercedes the first.  This table is based in part on information\n\
    \   provided in RFC1700, \"ASSIGNED NUMBERS\", (October 1994).\n           Opt.\n"
- title: 'Copy Class  #   Name                      Reference'
  contents:
  - 'Copy Class  #   Name                      Reference

    '
- title: '---- ----- ---  ------------------------  ---------'
  contents:
  - '---- ----- ---  ------------------------  ---------

    '
- title: IMMUTABLE -- included in ICV calculation
  contents:
  - "IMMUTABLE -- included in ICV calculation\n  0   0     0   End of Options List\
    \       [RFC791]\n  0   0     1   No Operation              [RFC791]\n  1   0\
    \     2   Security                  [RFC1108(historic but in use)]\n  1   0  \
    \   5   Extended Security         [RFC1108(historic but in use)]\n  1   0    \
    \ 6   Commercial Security       [expired I-D, now US MIL STD]\n  1   0    20 \
    \  Router Alert              [RFC2113]\n  1   0    21   Sender Directed Multi-\
    \    [RFC1770]\n                Destination Delivery\n"
- title: MUTABLE -- zeroed
  contents:
  - "MUTABLE -- zeroed\n  1   0      3  Loose Source Route        [RFC791]\n  0  \
    \ 2      4  Time Stamp                [RFC791]\n  0   0      7  Record Route \
    \             [RFC791]\n  1   0      9  Strict Source Route       [RFC791]\n \
    \ 0   2     18  Traceroute                [RFC1393]\n"
- title: EXPERIMENTAL, SUPERCEDED -- zeroed
  contents:
  - "EXPERIMENTAL, SUPERCEDED -- zeroed\n  1   0      8  Stream ID               \
    \  [RFC791, RFC1122 (Host Req)]\n  0   0     11  MTU Probe                 [RFC1063,\
    \ RFC1191 (PMTU)]\n  0   0     12  MTU Reply                 [RFC1063, RFC1191\
    \ (PMTU)]\n  1   0     17  Extended Internet Proto   [RFC1385, RFC1883 (IPv6)]\n\
    \  0   0     10  Experimental Measurement  [ZSu]\n  1   2     13  Experimental\
    \ Flow Control [Finn]\n  1   0     14  Experimental Access Ctl   [Estrin]\n  0\
    \   0     15  ???                       [VerSteeg]\n  1   0     16  IMI Traffic\
    \ Descriptor    [Lee]\n  1   0     19  Address Extension         [Ullmann IPv7]\n\
    \   NOTE: Use of the Router Alert option is potentially incompatible with\n  \
    \ use of IPsec.  Although the option is immutable, its use implies that\n   each\
    \ router along a packet's path will \"process\" the packet and\n   consequently\
    \ might change the packet.  This would happen on a hop by\n   hop basis as the\
    \ packet goes from router to router.  Prior to being\n   processed by the application\
    \ to which the option contents are\n   directed, e.g., RSVP/IGMP, the packet should\
    \ encounter AH processing.\n   However, AH processing would require that each\
    \ router along the path\n   is a member of a multicast-SA defined by the SPI.\
    \  This might pose\n   problems for packets that are not strictly source routed,\
    \ and it\n   requires multicast support techniques not currently available.\n\
    \   NOTE: Addition or removal of any security labels (BSO, ESO, CIPSO) by\n  \
    \ systems along a packet's path conflicts with the classification of\n   these\
    \ IP Options as immutable and is incompatible with the use of\n   IPsec.\n   NOTE:\
    \ End of Options List options SHOULD be repeated as necessary to\n   ensure that\
    \ the IP header ends on a 4 byte boundary in order to\n   ensure that there are\
    \ no unspecified bytes which could be used for a\n   covert channel.\n"
- title: A2.  IPv6 Extension Headers
  contents:
  - "A2.  IPv6 Extension Headers\n   This table shows how the IPv6 Extension Headers\
    \ are classified with\n   regard to \"mutability\".\n"
- title: Option/Extension Name                  Reference
  contents:
  - 'Option/Extension Name                  Reference

    '
- title: '-----------------------------------    ---------'
  contents:
  - '-----------------------------------    ---------

    '
- title: MUTABLE BUT PREDICTABLE -- included in ICV calculation
  contents:
  - "MUTABLE BUT PREDICTABLE -- included in ICV calculation\n  Routing (Type 0)  \
    \                  [RFC1883]\n"
- title: BIT INDICATES IF OPTION IS MUTABLE (CHANGES UNPREDICTABLY DURING TRANSIT)
  contents:
  - "BIT INDICATES IF OPTION IS MUTABLE (CHANGES UNPREDICTABLY DURING TRANSIT)\n \
    \ Hop by Hop options                  [RFC1883]\n  Destination options       \
    \          [RFC1883]\n"
- title: NOT APPLICABLE
  contents:
  - "NOT APPLICABLE\n  Fragmentation                       [RFC1883]\n      Options\
    \ -- IPv6 options in the Hop-by-Hop and Destination\n             Extension Headers\
    \ contain a bit that indicates whether the\n             option might change (unpredictably)\
    \ during transit.  For\n             any option for which contents may change\
    \ en-route, the\n             entire \"Option Data\" field must be treated as\
    \ zero-valued\n             octets when computing or verifying the ICV.  The Option\n\
    \             Type and Opt Data Len are included in the ICV calculation.\n   \
    \          All options for which the bit indicates immutability are\n        \
    \     included in the ICV calculation.  See the IPv6\n             specification\
    \ [DH95] for more information.\n      Routing (Type 0) -- The IPv6 Routing Header\
    \ \"Type 0\" will\n             rearrange the address fields within the packet\
    \ during\n             transit from source to destination.  However, the contents\n\
    \             of the packet as it will appear at the receiver are known\n    \
    \         to the sender and to all intermediate hops.  Hence, the\n          \
    \   IPv6 Routing Header \"Type 0\" is included in the\n             Authentication\
    \ Data calculation as mutable but predictable.\n             The sender must order\
    \ the field so that it appears as it\n             will at the receiver, prior\
    \ to performing the ICV\n             computation.\n      Fragmentation -- Fragmentation\
    \ occurs after outbound IPsec\n             processing (section 3.3) and reassembly\
    \ occurs before\n             inbound IPsec processing (section 3.4).  So the\n\
    \             Fragmentation Extension Header, if it exists, is not seen\n    \
    \         by IPsec.\n             Note that on the receive side, the IP implementation\
    \ could\n             leave a Fragmentation Extension Header in place when it\n\
    \             does re-assembly.  If this happens, then when AH receives\n    \
    \         the packet, before doing ICV processing, AH MUST \"remove\"\n      \
    \       (or skip over) this header and change the previous header's\n        \
    \     \"Next Header\" field to be the \"Next Header\" field in the\n         \
    \    Fragmentation Extension Header.\n             Note that on the send side,\
    \ the IP implementation could\n             give the IPsec code a packet with\
    \ a Fragmentation Extension\n             Header with Offset of 0 (first fragment)\
    \ and a More\n             Fragments Flag of 0 (last fragment).  If this happens,\
    \ then\n             before doing ICV processing, AH MUST first \"remove\" (or\n\
    \             skip over) this header and change the previous header's\n      \
    \       \"Next Header\" field to be the \"Next Header\" field in the\n       \
    \      Fragmentation Extension Header.\n"
- title: References
  contents:
  - "References\n   [ATK95]   Atkinson, R., \"The IP Authentication Header\", RFC\
    \ 1826,\n             August 1995.\n   [Bra97]   Bradner, S., \"Key words for\
    \ use in RFCs to Indicate\n             Requirement Level\", BCP 14, RFC 2119,\
    \ March 1997.\n   [DH95]    Deering, S., and B. Hinden, \"Internet Protocol version\
    \ 6\n             (IPv6) Specification\", RFC 1883, December 1995.\n   [HC98]\
    \    Harkins, D., and D. Carrel, \"The Internet Key Exchange\n             (IKE)\"\
    , RFC 2409, November 1998.\n   [KA97a]   Kent, S., and R. Atkinson, \"Security\
    \ Architecture for the\n             Internet Protocol\", RFC 2401, November 1998.\n\
    \   [KA97b]   Kent, S., and R. Atkinson, \"IP Encapsulating Security\n       \
    \      Payload (ESP)\", RFC 2406, November 1998.\n   [MG97a]   Madson, C., and\
    \ R. Glenn, \"The Use of HMAC-MD5-96 within\n             ESP and AH\", RFC 2403,\
    \ November 1998.\n   [MG97b]   Madson, C., and R. Glenn, \"The Use of HMAC-SHA-1-96\
    \ within\n             ESP and AH\", RFC 2404, November 1998.\n   [STD-2]   Reynolds,\
    \ J., and J. Postel, \"Assigned Numbers\", STD 2, RFC\n             1700, October\
    \ 1994.  See also:\n             http://www.iana.org/numbers.html\n"
- title: Disclaimer
  contents:
  - "Disclaimer\n   The views and specification here are those of the authors and\
    \ are not\n   necessarily those of their employers.  The authors and their\n \
    \  employers specifically disclaim responsibility for any problems\n   arising\
    \ from correct or incorrect implementation or use of this\n   specification.\n"
- title: Author Information
  contents:
  - "Author Information\n   Stephen Kent\n   BBN Corporation\n   70 Fawcett Street\n\
    \   Cambridge, MA  02140\n   USA\n   Phone: +1 (617) 873-3988\n   EMail: kent@bbn.com\n\
    \   Randall Atkinson\n   @Home Network\n   425 Broadway,\n   Redwood City, CA\
    \  94063\n   USA\n   Phone: +1 (415) 569-5000\n   EMail: rja@corp.home.net\n"
- title: Copyright (C) The Internet Society (1998).  All Rights Reserved.
  contents:
  - "Copyright (C) The Internet Society (1998).  All Rights Reserved.\n   This document\
    \ and translations of it may be copied and furnished to\n   others, and derivative\
    \ works that comment on or otherwise explain it\n   or assist in its implementation\
    \ may be prepared, copied, published\n   and distributed, in whole or in part,\
    \ without restriction of any\n   kind, provided that the above copyright notice\
    \ and this paragraph are\n   included on all such copies and derivative works.\
    \  However, this\n   document itself may not be modified in any way, such as by\
    \ removing\n   the copyright notice or references to the Internet Society or other\n\
    \   Internet organizations, except as needed for the purpose of\n   developing\
    \ Internet standards in which case the procedures for\n   copyrights defined in\
    \ the Internet Standards process must be\n   followed, or as required to translate\
    \ it into languages other than\n   English.\n   The limited permissions granted\
    \ above are perpetual and will not be\n   revoked by the Internet Society or its\
    \ successors or assigns.\n   This document and the information contained herein\
    \ is provided on an\n   \"AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET\
    \ ENGINEERING\n   TASK FORCE DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n\
    \   BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN\
    \ WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY\
    \ OR FITNESS FOR A PARTICULAR PURPOSE.\n"
