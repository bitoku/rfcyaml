- title: __initial_text__
  contents:
  - '             Current Practices for Multiple-Interface Hosts

    '
- title: Abstract
  contents:
  - "Abstract\n   An increasing number of hosts are operating in multiple-interface\n\
    \   environments.  This document summarizes current practices in this\n   area\
    \ and describes in detail how some common operating systems cope\n   with challenges\
    \ that ensue from this context.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document is not an Internet Standards Track specification;\
    \ it is\n   published for informational purposes.\n   This document is a product\
    \ of the Internet Engineering Task Force\n   (IETF).  It represents the consensus\
    \ of the IETF community.  It has\n   received public review and has been approved\
    \ for publication by the\n   Internet Engineering Steering Group (IESG).  Not\
    \ all documents\n   approved by the IESG are a candidate for any level of Internet\n\
    \   Standard; see Section 2 of RFC 5741.\n   Information about the current status\
    \ of this document, any errata,\n   and how to provide feedback on it may be obtained\
    \ at\n   http://www.rfc-editor.org/info/rfc6419.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2011 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction . . . . . . . . . . . . . . . . . . .\
    \ . . . . . .  3\n   2.  Summary of Current Approaches  . . . . . . . . . . .\
    \ . . . . .  3\n     2.1.  Centralized Connection Management  . . . . . . . .\
    \ . . . .  3\n     2.2.  Per-Application Connection Settings  . . . . . . . .\
    \ . . .  4\n     2.3.  Stack-Level Solutions to Specific Problems . . . . . .\
    \ . .  4\n       2.3.1.  DNS Resolution Issues  . . . . . . . . . . . . . . .\
    \ .  5\n       2.3.2.  First-Hop Selection  . . . . . . . . . . . . . . . . .\
    \  5\n       2.3.3.  Address Selection Policy . . . . . . . . . . . . . . .  5\n\
    \   3.  Current Practices in Some Operating Systems  . . . . . . . . .  6\n  \
    \   3.1.  Mobile Handset Operating Systems . . . . . . . . . . . . .  6\n    \
    \   3.1.1.  Nokia S60 3rd Edition, Feature Pack 2  . . . . . . . .  7\n      \
    \ 3.1.2.  Microsoft Windows Mobile and Windows Phone 7 . . . . .  9\n       3.1.3.\
    \  RIM BlackBerry . . . . . . . . . . . . . . . . . . . . 10\n       3.1.4.  Google\
    \ Android . . . . . . . . . . . . . . . . . . . . 11\n       3.1.5.  Qualcomm\
    \ Brew  . . . . . . . . . . . . . . . . . . . . 12\n       3.1.6.  Leadcore Technology\
    \ Arena  . . . . . . . . . . . . . . 13\n     3.2.  Desktop Operating Systems\
    \  . . . . . . . . . . . . . . . . 14\n       3.2.1.  Microsoft Windows  . . .\
    \ . . . . . . . . . . . . . . . 14\n         3.2.1.1.  First-Hop Selection  .\
    \ . . . . . . . . . . . . . . 14\n         3.2.1.2.  Outbound and Inbound Addresses\
    \ . . . . . . . . . . 14\n         3.2.1.3.  DNS Configuration  . . . . . . .\
    \ . . . . . . . . . 15\n       3.2.2.  Linux and BSD-Based Operating Systems \
    \ . . . . . . . . 16\n         3.2.2.1.  First-Hop Selection  . . . . . . . .\
    \ . . . . . . . 16\n         3.2.2.2.  Outbound and Inbound Addresses . . . .\
    \ . . . . . . 16\n         3.2.2.3.  DNS Configuration  . . . . . . . . . . .\
    \ . . . . . 17\n   4.  Acknowledgements . . . . . . . . . . . . . . . . . . .\
    \ . . . . 18\n   5.  Security Considerations  . . . . . . . . . . . . . . . .\
    \ . . . 18\n   6.  Contributors . . . . . . . . . . . . . . . . . . . . . . .\
    \ . . 19\n   7.  References . . . . . . . . . . . . . . . . . . . . . . . . .\
    \ . 19\n     7.1.  Normative References . . . . . . . . . . . . . . . . . . .\
    \ 19\n     7.2.  Informative References . . . . . . . . . . . . . . . . . . 19\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   Multiple-interface hosts face several challenges not faced\
    \ by single-\n   interface hosts, some of which are described in the multiple\n\
    \   interfaces (MIF) problem statement [RFC6418].  This document\n   summarizes\
    \ how current implementations deal with the problems\n   identified in the MIF\
    \ problem statement.\n   Publicly available information about the multiple-interface\
    \ solutions\n   implemented in some widely used operating systems, including both\n\
    \   mobile handset and desktop operating systems, is collected in this\n   document,\
    \ including Nokia S60 [S60], Microsoft Windows Mobile\n   [WINDOWSMOBILE], Blackberry\
    \ [BLACKBERRY], Google Android [ANDROID],\n   Microsoft Windows, Linux, and BSD-based\
    \ operating systems.\n"
- title: 2.  Summary of Current Approaches
  contents:
  - "2.  Summary of Current Approaches\n   This section summarizes current approaches\
    \ that are used to resolve\n   the multiple-interface issues described in the\
    \ MIF problem statement\n   [RFC6418].  These approaches can be broken down into\
    \ three major\n   categories:\n   o  Centralized connection management\n   o \
    \ Per-application connection settings\n   o  Stack-level solutions to specific\
    \ problems\n"
- title: 2.1.  Centralized Connection Management
  contents:
  - "2.1.  Centralized Connection Management\n   It is a common practice for mobile\
    \ handset operating systems to use a\n   centralized connection manager that performs\
    \ network interface\n   selection based on application or user input.  However,\
    \ connection\n   managers usually restrict the problem to the selection of the\n\
    \   interface and do not cope with selection of the provisioning domain,\n   as\
    \ defined in [RFC6418].  The information used by the connection\n   manager may\
    \ be programmed into an application or provisioned on a\n   handset-wide basis.\
    \  When information is not available to make an\n   interface selection, the connection\
    \ manager will query the user to\n   choose between available choices.\n   Routing\
    \ tables are not typically used for network interface selection\n   when a connection\
    \ manager is in use, as the criteria for network\n   selection is not strictly\
    \ IP-based but is also dependent on other\n   properties of the interface (cost,\
    \ type, etc.).  Furthermore,\n   multiple overlapping private IPv4 address spaces\
    \ are often exposed to\n   a multiple-interface host, making it difficult to make\
    \ interface\n   selection decisions based on prefix matching.\n"
- title: 2.2.  Per-Application Connection Settings
  contents:
  - "2.2.  Per-Application Connection Settings\n   In mobile handsets, applications\
    \ are often involved in choosing what\n   interface and related configuration\
    \ information should be used.  In\n   some cases, the application selects the\
    \ interface directly, and in\n   other cases, the application provides more abstract\
    \ information to a\n   connection manager that makes the final interface choice.\n"
- title: 2.3.  Stack-Level Solutions to Specific Problems
  contents:
  - "2.3.  Stack-Level Solutions to Specific Problems\n   In most desktop operating\
    \ systems, multiple-interface problems are\n   dealt with in the stack and related\
    \ components, based on system-\n   level configuration information, without the\
    \ benefit of input from\n   applications or users.  These solutions tend to map\
    \ well to the\n   problems listed in the problem statement:\n   o  DNS resolution\
    \ issues\n   o  Routing\n   o  Address selection policy\n   The configuration\
    \ information for desktop systems comes from one of\n   the following sources:\
    \ DHCP, router advertisements, proprietary\n   configuration systems, or manual\
    \ configuration.  While these systems\n   universally accept IP address assignment\
    \ on a per-interface basis,\n   they differ in what set of information can be\
    \ assigned on a per-\n   interface basis and what can be configured only on a\
    \ per-system\n   basis.\n   When choosing between multiple sets of information\
    \ provided, these\n   systems will typically give preference to information received\
    \ on the\n   \"primary\" interface.  The mechanism for designating the \"primary\"\
    \n   interface differs by system.\n   There is very little commonality in how\
    \ desktop operating systems\n   handle multiple sets of configuration information,\
    \ with notable\n   variations between different versions of the same operating\
    \ system\n   and/or within different software packages built for the same\n  \
    \ operating system.  Although these systems differ widely, it is not\n   clear\
    \ that any of them provide a completely satisfactory user\n   experience in multiple-interface\
    \ environments.\n   The following sections discuss some of the solutions used\
    \ in each of\n   the areas raised in the MIF problem statement.\n"
- title: 2.3.1.  DNS Resolution Issues
  contents:
  - "2.3.1.  DNS Resolution Issues\n   There is very little commonality in how desktop\
    \ operating systems\n   handle the DNS server list.  Some systems support per-interface\
    \ DNS\n   server lists, while others only support a single system-wide list.\n\
    \   On hosts with per-interface DNS server lists, different mechanisms\n   are\
    \ used to determine which DNS server is contacted for a given\n   query.  In most\
    \ cases, the first DNS server listed on the \"primary\"\n   interface is queried\
    \ first, with back off to other servers if an\n   answer is not received.\n  \
    \ Systems that support a single system-wide list differ in how they\n   select\
    \ which DNS server to use in cases where they receive more than\n   one DNS server\
    \ list to configure (e.g., from DHCP on multiple\n   interfaces).  Some accept\
    \ the information received on the \"primary\"\n   interface, while others use\
    \ either the first or last set DNS server\n   list configured.\n"
- title: 2.3.2.  First-Hop Selection
  contents:
  - "2.3.2.  First-Hop Selection\n   Routing information is also handled differently\
    \ on different desktop\n   operating systems.  While all systems maintain some\
    \ sort of routing\n   cache, to handle redirects and/or statically configured\
    \ routes, most\n   packets are routed based on configured default gateway information.\n\
    \   Some systems do allow the configuration of different default router\n   lists\
    \ for different interfaces.  These systems will always choose the\n   default\
    \ gateway on the interface with the lowest routing metric, with\n   different\
    \ behavior when two or more interfaces have the same routing\n   metric.\n   Most\
    \ systems do not allow the configuration of more than one default\n   router list,\
    \ choosing instead to use the first or last default router\n   list configured\
    \ and/or the router list configured on the \"primary\"\n   interface.\n"
- title: 2.3.3.  Address Selection Policy
  contents:
  - "2.3.3.  Address Selection Policy\n   There is somewhat more commonality in how\
    \ desktop hosts handle\n   address selection.  Applications typically provide\
    \ the destination\n   address for an outgoing packet, and the IP stack is responsible\
    \ for\n   picking the source address.\n   IPv6 specifies a specific source address\
    \ selection mechanism in\n   [RFC3484], and several systems implement this mechanism\
    \ with similar\n   support for IPv4.  However, many systems do not provide any\
    \ mechanism\n   to update this default policy, and there is no standard way to\
    \ do so.\n   In some cases, the routing decision (including which interface to\n\
    \   use) is made before source address selection is performed, and a\n   source\
    \ address is chosen from the outbound interface.  In other\n   cases, source address\
    \ selection is performed before, or independently\n   from, outbound interface\
    \ selection.\n"
- title: 3.  Current Practices in Some Operating Systems
  contents:
  - "3.  Current Practices in Some Operating Systems\n   The material presented in\
    \ this section is derived from contributions\n   from people familiar with the\
    \ operating systems described (see\n   Section 6 a list of these individuals).\
    \  The authors and the IETF\n   take no position about the operating systems described\
    \ and understand\n   that other operating systems also exist.  Furthermore, it\
    \ should be\n   understood that Section 3 describes particular behaviors that\
    \ were\n   believed to be current at the time this document was written: earlier\n\
    \   and later versions of the operating systems described may exhibit\n   different\
    \ behaviors.  Please refer to the References section for\n   pointers to original\
    \ documentation, including further details.\n"
- title: 3.1.  Mobile Handset Operating Systems
  contents:
  - "3.1.  Mobile Handset Operating Systems\n   Cellular devices typically run a variety\
    \ of applications in parallel,\n   each with different requirements for IP connectivity.\
    \  A typical\n   scenario is shown in Figure 1, where a cellular device is utilizing\n\
    \   Wireless Local Area Network (WLAN) access for web browsing and\n   General\
    \ Packet Radio Service (GPRS) access for transferring\n   multimedia messages\
    \ (MMS).  Another typical scenario would be a real-\n   time Voice over IP (VoIP)\
    \ session over one network interface in\n   parallel with best-effort web browsing\
    \ on another network interface.\n   Yet another typical scenario would be global\
    \ Internet access through\n   one network interface and local (e.g., corporate\
    \ VPN) network access\n   through another.\n        Web server               \
    \                        MMS Gateway\n             |                         \
    \                       |\n            -+--Internet----            ----Operator\
    \ network--+-\n                    |                          |\n            \
    \    +-------+                  +-------+\n                |WLAN AP|         \
    \         | GGSN  |\n                +-------+                  +-------+\n  \
    \                  |        +--------+        |\n                    +--------|Cellular|--------+\n\
    \                             |device  |\n                             +--------+\n\
    \               A Cellular Device with Two Network Interfaces\n              \
    \                   Figure 1\n   Different network access technologies require\
    \ different settings.\n   For example, WLAN requires the Service Set Identifier\
    \ (SSID), and the\n   GPRS network requires the Access Point Name (APN) of the\
    \ Gateway GPRS\n   Support Node (GGSN), among other parameters.  It is common\
    \ that\n   different accesses lead to different destination networks (e.g., to\n\
    \   Internet, intranet, cellular network services, etc.).\n"
- title: 3.1.1.  Nokia S60 3rd Edition, Feature Pack 2
  contents:
  - "3.1.1.  Nokia S60 3rd Edition, Feature Pack 2\n   S60 is a software platform\
    \ for mobile devices running on the Symbian\n   operating system (OS).  S60 uses\
    \ the concept of an Internet Access\n   Point (IAP) [S60] that contains all information\
    \ required for opening\n   a network connection using a specific access technology.\
    \  A device\n   may have several IAPs configured for different network technologies\n\
    \   and settings (multiple WLAN SSIDs, GPRS APNs, dial-up numbers, and so\n  \
    \ forth).  There may also be 'virtual' IAPs that define parameters\n   needed\
    \ for tunnel establishment (e.g., for VPN).\n   For each application, a correct\
    \ IAP needs to be selected at the point\n   when the application requires network\
    \ connectivity.  This is\n   essential, as the wrong IAP may not be able to support\
    \ the\n   application or reach the desired destination.  For example, an MMS\n\
    \   application must use the correct IAP in order to reach the MMS\n   Gateway,\
    \ which typically is not accessible from the public Internet.\n   As another example,\
    \ an application might need to use the IAP\n   associated with its corporate VPN\
    \ in order to reach internal\n   corporate servers.  Binding applications to IAPs\
    \ avoids several\n   problems, such as choosing the correct DNS server in the\
    \ presence of\n   split DNS (as an application will use the DNS server list from\
    \ its\n   bound IAP) and overlapping private IPv4 address spaces used for\n  \
    \ different interfaces (as each application will use the default routes\n   from\
    \ its bound IAP).\n   If multiple applications utilize the same IAP, the underlying\
    \ network\n   connection can typically be shared.  This is often the case when\n\
    \   multiple Internet-using applications are running in parallel.\n   The IAP\
    \ for an application can be selected in multiple ways:\n   o  Statically: for\
    \ example, from a configuration interface, via\n      client provisioning/device\
    \ management system, or at build-time.\n   o  Manually by the user: for example,\
    \ each time an application\n      starts, the user may be asked to select the\
    \ IAP to use.  This may\n      be needed, for example, if a user sometimes wishes\
    \ to access his\n      corporate intranet and other times would prefer to access\
    \ the\n      Internet directly.\n   o  Automatically by the system: after the\
    \ destination network has\n      been selected statically or dynamically.\n  \
    \ The static approach is fine for certain applications, like MMS, for\n   which\
    \ configuration can be provisioned by the network operator and\n   does not change\
    \ often.  Manual selection works but may be seen as\n   troublesome by the user.\
    \  An automatic selection mechanism needs to\n   have some way of knowing which\
    \ destination network the user, or an\n   application, is trying access.\n   S60\
    \ 3rd Edition, Feature Pack 2 introduces the concept of Service\n   Network Access\
    \ Points (SNAPs) that group together IAPs that lead to\n   the same destination.\
    \  This enables static or manual selection of the\n   destination network for\
    \ an application and leaves the problem of\n   selecting the best of the available\
    \ IAPs within a SNAP to the\n   operating system.\n   When SNAPs are used, the\
    \ operating system can notify applications\n   when a preferred IAP, leading to\
    \ the same destination, becomes\n   available (for example, when a user comes\
    \ within range of his home\n   WLAN access point) or when the currently used IAP\
    \ is no longer\n   available.  If so, applications have to reconnect via another\
    \ IAP\n   (for example, when a user goes out of range of his home WLAN and must\n\
    \   move to the cellular network).\n   S60 3.2 does not support RFC 3484 for source\
    \ address selection\n   mechanisms.  Applications are tightly bound to the network\
    \ interface\n   selected for them or by them.  For example, an application may\
    \ be\n   connected to an IPv6 3G connection, IPv4 3G connection, WLAN\n   connection,\
    \ or VPN connection.  The application can change between\n   the connections but\
    \ uses only one at a time.  If the interface\n   happens to be dual-stack, then\
    \ IPv4 is preferred over IPv6.\n   DNS configuration is per-interface; an application\
    \ bound to an\n   interface will always use the DNS settings for that interface.\n\
    \   Hence, the device itself remembers these pieces of information for\n   each\
    \ interface separately.\n   S60 3.2 manages with totally overlapping addresses\
    \ spaces.  Each\n   interface can even have the same IPv4 address configured on\
    \ it\n   without issues because interfaces are kept totally separate from each\n\
    \   other.  This implies that interface selection has to be done at the\n   application\
    \ layer, as from the network-layer point of view, a device\n   is not multihomed\
    \ in the IP-sense.\n   Please see the S60 source documentation for more details\
    \ and\n   screenshots [S60].\n"
- title: 3.1.2.  Microsoft Windows Mobile and Windows Phone 7
  contents:
  - "3.1.2.  Microsoft Windows Mobile and Windows Phone 7\n   Microsoft Windows Mobile\
    \ leverages a connection manager\n   [WINDOWSMOBILE] to handle multiple network\
    \ connections.  This\n   architecture centralizes and automates network connection\n\
    \   establishment and management and makes it possible to automatically\n   select\
    \ a connection, to dial-in automatically or by user initiation,\n   and to optimize\
    \ connection and shared resource usage.  The connection\n   manager periodically\
    \ re-evaluates the validity of the connection\n   selection.  The connection manager\
    \ uses various attributes such as\n   cost, security, bandwidth, error rate, and\
    \ latency in its decision\n   making.\n   The connection manager selects the best\
    \ possible connection for the\n   application based on the destination network\
    \ the application wishes\n   to reach.  The selection is made between available\
    \ physical and\n   virtual connections (e.g., VPN, GPRS, WLAN, and wired Ethernet)\
    \ that\n   are known to provide connectivity to the destination network, and the\n\
    \   selection is based on the costs associated with each connection.\n   Different\
    \ applications are bundled to use the same network connection\n   when possible,\
    \ but in conflict situations when a connection cannot be\n   shared, higher-priority\
    \ applications take precedence, and the lower-\n   priority applications lose\
    \ connectivity until the conflict situation\n   clears.\n   During operation,\
    \ the connection manager opens new connections as\n   needed and also disconnects\
    \ unused or idle connections.\n   To optimize resource use, such as battery power\
    \ and bandwidth, the\n   connection manager enables applications to synchronize\
    \ network\n   connection usage by allowing applications to register their\n  \
    \ requirements for periodic connectivity.  An application is notified\n   when\
    \ a suitable connection becomes available for its use.\n   In comparison to Windows\
    \ Mobile connection management, Windows Phone\n   7 updates the routing functionality\
    \ in the case where the terminal\n   can be attached simultaneously to several\
    \ interfaces.  Windows Phone\n   7 selects the first hop corresponding to the\
    \ interface that has a\n   lower metric.  When there are multiple interfaces,\
    \ the applications\n   system will, by default, choose from an ordered list of\
    \ available\n   interfaces.  The default connection policy will prefer wired over\n\
    \   wireless and WLAN over cellular.  Hence, if an application wants to\n   use\
    \ cellular 3G as the active interface when WLAN is available, the\n   application\
    \ needs to override the default connection mapping policy.\n   An application-specific\
    \ mapping policy can be set via a Microsoft API\n   or provisioned by the Mobile\
    \ Operator.  The application, in\n   compliance with the security model, can request\
    \ connection type by\n   interface (WLAN, cellular), by minimum interface speed\
    \ (x kbit/s, y\n   Mbit/s), or by name (Access Point Name).\n   In dual-stack\
    \ systems, Windows Mobile and Windows Phone 7 implement\n   address selection\
    \ rules per [WNDS-RFC3484].  An administrator can\n   configure a policy table\
    \ that can override the default behavior of\n   the selection algorithms.  Note\
    \ that the policy table specifies\n   precedence values and preferred source prefixes\
    \ for destination\n   prefixes (see [RFC3484], Section 2.1 for details).  If the\
    \ system has\n   not been configured, then the default policy table specified\
    \ in\n   [RFC3484] is used.\n"
- title: 3.1.3.  RIM BlackBerry
  contents:
  - "3.1.3.  RIM BlackBerry\n   Depending on the network configuration, applications\
    \ in Research In\n   Motion (RIM) BlackBerry devices [BLACKBERRY] can use direct\
    \ TCP/IP\n   connectivity or different application proxies to establish\n   connections\
    \ over the wireless network.  For instance, some wireless\n   service providers\
    \ provide an Internet gateway to offer direct TCP/IP\n   connectivity to the Internet\
    \ while some others can provide a Wireless\n   Application Protocol (WAP) gateway\
    \ that allows HTTP connections to\n   occur over WAP.  It is also possible to\
    \ use the BlackBerry Enterprise\n   Server [BLACKBERRY] as a network gateway.\
    \  The BlackBerry Enterprise\n   Server provides an HTTP and TCP/IP proxy service\
    \ to allow the\n   application to use it as a secure gateway for managing HTTP\
    \ and\n   TCP/IP connections to the intranet or the Internet.  An application\n\
    \   connecting to the Internet can use either the BlackBerry Internet\n   Service\
    \ or the Internet gateway of the wireless server provider or\n   direct Internet\
    \ connectivity over WLAN to manage connections.  The\n   problem of gateway selection\
    \ is supposed to be managed independently\n   by each application.  For instance,\
    \ an application can be designed to\n   always use the default Internet gateway,\
    \ while another application\n   can be designed to use a preferred proxy when\
    \ available.\n   A BlackBerry device [BLACKBERRY] can be attached to multiple\
    \ networks\n   simultaneously (wireless/wired).  In this case, multiple network\n\
    \   interfaces can be associated to a single IP stack or multiple IP\n   stacks.\
    \  The device, or the application, can select the network\n   interface to be\
    \ used in various ways.  For instance, the device can\n   always map the applications\
    \ to the default network interface (or the\n   default access network).  When\
    \ multiple IP stacks are associated to\n   multiple interfaces, the application\
    \ can select the source address\n   corresponding to the preferred network interface.\
    \  Per-interface IP\n   stacks also allow to manage overlapping address spaces.\
    \  When\n   multiple network interfaces are aggregated into a single IP stack,\n\
    \   the device associates each application to the more appropriate\n   network\
    \ interface.  The selection can be based on cost, type of\n   service (ToS), and/or\
    \ user preference.\n   The BlackBerry uses per-interface DNS configuration; applications\n\
    \   bound to a specific interface will use the DNS settings for that\n   interface.\n"
- title: 3.1.4.  Google Android
  contents:
  - "3.1.4.  Google Android\n   Android is based on a Linux kernel and, in many situations,\
    \ behaves\n   like a Linux device as described in Section 3.2.2.  Per Linux,\n\
    \   Android can manage multiple routing tables and relies on policy-based\n  \
    \ routing associated with packet-filtering capabilities (see\n   Section 3.2.2.1\
    \ for details).  Such a framework can be used to solve\n   complex routing issue\
    \ brought by multiple interfaces terminals, e.g.,\n   address space overlapping.\n\
    \   For incoming packets, Android implements the weak host model\n   [RFC1122]\
    \ on both IPv4 and IPv6.  However, Android can also be\n   configured to support\
    \ the strong host model.\n   Regarding DNS configuration, Android does not list\
    \ the DNS servers in\n   the file /etc/resolv.conf, used by Linux.  However, per\
    \ Linux, DNS\n   configuration is node-scoped, even if DNS configuration can rely\
    \ on\n   the DHCP client.  For instance, the udhcp client [UDHCP], which is\n\
    \   also available for Linux, can be used on Android.  Each time new\n   configuration\
    \ data is received by the host from a DHCP server,\n   regardless of which interface\
    \ it is received on, the DHCP client\n   rewrites the global configuration data\
    \ with the most recent\n   information received.\n   Actually, the main difference\
    \ between Linux and Android is on the\n   address selection mechanism.  Android\
    \ versions prior to 2.2 simply\n   prefer IPv6 connectivity over IPv4.  However,\
    \ it should be noted\n   that, at the time of this writing, IPv6 is available\
    \ only on WiFi and\n   virtual interfaces but not on the cellular interface (without\
    \ IPv6 in\n   IPv4 encapsulation).  Android 2.2 has been updated with\n   [ANDROID-RFC3484],\
    \ which implements some of the address selection\n   rules defined in [RFC3484].\
    \  All [RFC3484] rules are supported,\n   except rule 3 (avoid deprecated addresses),\
    \ rule 4 (prefer home\n   addresses), and rule 7 (prefer native transport).  Also,\
    \ rule 9 (use\n   longest matching prefix) has been modified so it does not sort\
    \ IPv4\n   addresses.\n   The Android reference documentation describes the android.net\
    \ package\n   [ANDROID] and the ConnectivityManager class that applications can\
    \ use\n   to request the first hop to a specified destination address via a\n\
    \   specified network interface (Third Generation Partnership Project\n   (3GPP)\
    \ or WLAN).  Applications also ask the connection manager for\n   permission to\
    \ start using a network feature.  The connection manager\n   monitors changes\
    \ in network connectivity and attempts to failover to\n   another network if connectivity\
    \ to an active network is lost.  When\n   there are changes in network connectivity,\
    \ applications are notified.\n   Applications are also able to ask for information\
    \ about all network\n   interfaces, including their availability, type, and other\n\
    \   information.\n"
- title: 3.1.5.  Qualcomm Brew
  contents:
  - "3.1.5.  Qualcomm Brew\n   This section describes how multiple-interface support\
    \ is handled by\n   Advanced Mobile Station Software (AMSS) that comes with Brew\
    \ OS for\n   all Qualcomm chipsets (e.g., Mobile Station Modem (MSM), Snapdragon,\n\
    \   etc.).  AMSS is a low-level connectivity platform, on top of which\n   manufacturers\
    \ can build to provide the necessary connectivity to\n   applications.  The interaction\
    \ model between AMSS, the operating\n   system, and the applications is not unique\
    \ and depends on the design\n   chosen by the manufacturer.  The Mobile OS can\
    \ let an application\n   invoke the AMSS directly (via API) or provide its own\
    \ connection\n   manager that will request connectivity to the AMSS based on\n\
    \   applications needs.  The interaction between the OS connection\n   manager\
    \ and the applications is OS dependent.\n   AMSS supports a concept of netpolicy\
    \ that allows each application to\n   specify the type of network connectivity\
    \ desired.  The netpolicy\n   contains parameters such as access technology, IP\
    \ version type, and\n   network profile.  Access technology could be a specific\
    \ technology\n   type such as CDMA or WLAN or could be a group of technologies,\
    \ such\n   as ANY_Cellular or ANY_Wireless.  IP version could be one of IPv4,\n\
    \   IPv6, or Default.  The network profile identifies a type of network\n   domain\
    \ or service within a certain network technology, such as 3GPP\n   APN or Mobile\
    \ IP Home Agent.  It also specifies all the mandatory\n   parameters required\
    \ to connect to the domain such authentication\n   credentials and other optional\
    \ parameters such as Quality of Service\n   (QoS) attributes.  Network profile\
    \ is technology specific, and the\n   set of parameters contained in the profile\
    \ could vary for different\n   technologies.\n   Two models of network usage are\
    \ supported:\n   o  Applications requiring network connectivity specify an appropriate\n\
    \      netpolicy in order to select the desired network.  The netpolicy\n    \
    \  may match one or more network interfaces.  The AMSS system\n      selection\
    \ module selects the best interface out of the ones that\n      match the netpolicy\
    \ based on various criteria such as cost, speed,\n      or other provisioned rules.\
    \  The application explicitly starts the\n      selected network interface and,\
    \ as a result, the application also\n      gets bound to the corresponding network\
    \ interface.  All outbound\n      packets from this application are always routed\
    \ over this bound\n      interface using the source address of the interface.\n\
    \   o  Applications may rely on a separate connection manager to control\n   \
    \   (e.g., start/stop) the network interface.  In this model,\n      applications\
    \ are not necessarily bound to any one interface.  All\n      outbound packets\
    \ from such applications are routed on one of the\n      interfaces that match\
    \ its netpolicy.  The routing decision is made\n      individually for each packet\
    \ and selects the best interface based\n      on the criteria described above\
    \ and the destination address.\n      Source address is always assigned to the\
    \ interface used to\n      transmit the packet.\n   All of the routing/interface\
    \ selection decisions are based on the\n   netpolicy and not just on the destination\
    \ address to avoid the issue\n   of overlapping private IPv4 addresses.  This\
    \ also allows multiple\n   interfaces to be configured with the same IP address,\
    \ for example, to\n   handle certain tunneling scenarios.  Applications that do\
    \ not specify\n   a netpolicy are routed by AMSS to the best possible interface\
    \ using\n   the default netpolicy.  Default netpolicy could be pre-defined or\n\
    \   provisioned by the administrator or operator.  Hence, the default\n   interface\
    \ could vary from device to device and also depends upon the\n   available networks\
    \ at any given time.\n   AMSS allows each interface to be configured with its\
    \ own set of DNS\n   configuration parameters (e.g., list of DNS servers, domain\
    \ names,\n   etc.).  The interface selected to make a DNS resolution is the one\
    \ to\n   which the application making the DNS query is bound.  Applications\n\
    \   can also specify a different netpolicy as part of the DNS request to\n   select\
    \ another interface for DNS resolution.  Regardless, all the DNS\n   queries are\
    \ sent only over this selected interface using the DNS\n   configuration from\
    \ the interface.  DNS resolution is first attempted\n   with the primary server\
    \ configured in the interface.  If a response\n   is not received, the queries\
    \ are sent to all the other servers\n   configured in the interface in a sequential\
    \ manner using a backoff\n   mechanism.\n"
- title: 3.1.6.  Leadcore Technology Arena
  contents:
  - "3.1.6.  Leadcore Technology Arena\n   Arena, a mobile OS based on Linux, provides\
    \ a connection manager,\n   which is described in [MIF-ARENA] and [MIF-REQS].\
    \  The Arena\n   connection manager provides a means for applications to register\n\
    \   their connectivity requirement.  The connection manager can then\n   choose\
    \ an interface that matches the application's needs while\n   considering other\
    \ factors such as availability, cost, and stability.\n   Also, the connection\
    \ manager can handle multiple-interface issues\n   such as connection sharing.\n"
- title: 3.2.  Desktop Operating Systems
  contents:
  - "3.2.  Desktop Operating Systems\n   Multiple-interface issues also occur in desktop\
    \ environments in those\n   cases where a desktop host has multiple (logical or\
    \ physical)\n   interfaces connected to networks with different reachability\n\
    \   properties, such as one interface connected to the global Internet,\n   while\
    \ another interface is connected to a corporate VPN.\n"
- title: 3.2.1.  Microsoft Windows
  contents:
  - "3.2.1.  Microsoft Windows\n   The multiple-interface functionality currently\
    \ implemented in\n   Microsoft Windows operation systems is described in more\
    \ detail in\n   [MULTIHOMING].\n"
- title: 3.2.1.1.  First-Hop Selection
  contents:
  - "3.2.1.1.  First-Hop Selection\n   It is possible, although not often desirable,\
    \ to configure default\n   routers on more than one Windows interface.  In this\
    \ configuration,\n   Windows will use the default route on the interface with\
    \ the lowest\n   routing metric (i.e., the fastest interface).  If multiple interfaces\n\
    \   share the same metric, the behavior will differ based on the version\n   of\
    \ Windows in use.  Prior to Windows Vista, the packet would be\n   routed out\
    \ of the first interface that was bound to the TCP/IP stack,\n   the preferred\
    \ interface.  In Windows Vista, host-to-router load\n   sharing [RFC4311] is used\
    \ for both IPv4 and IPv6.\n"
- title: 3.2.1.2.  Outbound and Inbound Addresses
  contents:
  - "3.2.1.2.  Outbound and Inbound Addresses\n   If the source address of the outgoing\
    \ packet has not been determined\n   by the application, Windows will choose from\
    \ the addresses assigned\n   to its interfaces.  Windows implements [RFC3484]\
    \ for source address\n   selection in IPv6 and, in Windows Vista, for IPv4.  Prior\
    \ to Windows\n   Vista, IPv4 simply chose the first address on the outgoing interface.\n\
    \   For incoming packets, Windows will check if the destination address\n   matches\
    \ one of the addresses assigned to its interfaces.  Windows has\n   implemented\
    \ the weak host model [RFC1122] on IPv4 in Windows 2000,\n   Windows XP, and Windows\
    \ Server 2003.  The strong host model became\n   the default for IPv4 in Windows\
    \ Vista and Windows Server 2008;\n   however, the weak host model is available\
    \ via per-interface\n   configuration.  IPv6 has always implemented the strong\
    \ host model.\n"
- title: 3.2.1.3.  DNS Configuration
  contents:
  - "3.2.1.3.  DNS Configuration\n   Windows largely relies on suffixes to solve DNS\
    \ resolution issues.\n   Suffixes are used for four different purposes:\n   1.\
    \  DNS Suffix Search List (aka domain search list): suffix is added\n       to\
    \ non-FQDNs (Fully Qualified Domain Names).\n   2.  Interface-specific suffix\
    \ list: allows sending different DNS\n       queries to different DNS servers.\n\
    \   3.  Suffix to control Dynamic DNS Updates: determines which DNS\n       server\
    \ will receive a dynamic update for a name with a certain\n       suffix.\n  \
    \ 4.  Suffix in the Name Resolution Policy Table [NRPT]: aids in\n       identifying\
    \ a namespace that requires special handling (feature\n       available only after\
    \ Windows 7 and its server counterpart,\n       Windows Server 2008 R2).\n   However,\
    \ this section focuses on the interface-specific suffix list\n   since it is the\
    \ only suffix usage in the scope of this document.\n   DNS configuration information\
    \ can be host-wide or interface specific.\n   Host-wide DNS configuration is input\
    \ via static configuration or, in\n   sites that use Active Directory, Microsoft's\
    \ Group Policy.\n   Interface-specific DNS configuration can be input via static\n\
    \   configuration or via DHCP.\n   The host-wide configuration consists of a primary\
    \ DNS suffix to be\n   used for the local host, as well as a list of suffixes\
    \ that can be\n   appended to names being queried.  Before Windows Vista and Windows\n\
    \   Server 2008, there was also a host-wide DNS server list that took\n   precedence\
    \ over per-interface DNS configuration.\n   The interface-specific DNS configuration\
    \ comprises an interface-\n   specific suffix list and a list of DNS server IP\
    \ addresses.\n   Windows uses a host-wide \"effective\" server list for an actual\
    \ query,\n   where the effective server list may be different for different names.\n\
    \   In the list of DNS server addresses, the first server is considered\n   the\
    \ \"primary\" server, with all other servers being secondary.\n   When a DNS query\
    \ is performed in Windows, the query is first sent to\n   the primary DNS server\
    \ on the preferred interface.  If no response is\n   received in one second, the\
    \ query is sent to the primary DNS servers\n   on all interfaces under consideration.\
    \  If no response is received\n   for 2 more seconds, the DNS server sends the\
    \ query to all of the DNS\n   servers on the DNS server lists for all interfaces\
    \ under\n   consideration.  If the host still doesn't receive a response after\
    \ 4\n   seconds, it will send to all of the servers again and wait 8 seconds\n\
    \   for a response.\n"
- title: 3.2.2.  Linux and BSD-Based Operating Systems
  contents:
  - '3.2.2.  Linux and BSD-Based Operating Systems

    '
- title: 3.2.2.1.  First-Hop Selection
  contents:
  - "3.2.2.1.  First-Hop Selection\n   In addition to the two commonly used routing\
    \ tables (the local and\n   main routing tables), the kernel can support up to\
    \ 252 additional\n   routing tables that can be added in the file /etc/iproute2/rt_tables.\n\
    \   A routing table can contain an arbitrary number of routes; the\n   selection\
    \ of route is classically made according to the destination\n   address of the\
    \ packet.  Linux also provides more flexible routing\n   selection based on the\
    \ type of service, scope, and output interface.\n   In addition, since kernel\
    \ version 2.2, Linux supports policy-based\n   routing using the multiple routing\
    \ tables capability and a routing\n   policy database.  This database contains\
    \ routing rules used by the\n   kernel.  Using policy-based routing, the source\
    \ address, the ToS\n   flags, the interface name, and an \"fwmark\" (a mark added\
    \ in the data\n   structure representing the packet) can be used as route selectors.\n\
    \   Policy-based routing can be used in addition to Linux packet-\n   filtering\
    \ capabilities, e.g., provided by the \"iptables\" tool.  In a\n   multiple-interface\
    \ context, this tool can be used to mark the\n   packets, i.e., assign a number\
    \ to fwmark, in order to select the\n   routing rule according to the type of\
    \ traffic.  This mark can be\n   assigned according to parameters like protocol,\
    \ source and/or\n   destination addresses, port number, and so on.\n   Such a\
    \ routing management framework allows management of complex\n   situations such\
    \ as address space overlapping.  In this situation, the\n   administrator can\
    \ use packet marking and policy-based routing to\n   select the correct interface.\n"
- title: 3.2.2.2.  Outbound and Inbound Addresses
  contents:
  - "3.2.2.2.  Outbound and Inbound Addresses\n   By default, source address selection\
    \ follows the following basics\n   rules.  The initial source address for an outbound\
    \ packet can be\n   chosen by the application using the bind() call.  Without\
    \ information\n   from the application, the kernel chooses the first address configured\n\
    \   on the interface that belongs to the same subnet as the destination\n   address\
    \ or the next-hop router.\n   Linux also implements [RFC3484] for source address\
    \ selection for IPv6\n   and dual-stack configurations.  However, the address-sorting\
    \ rules\n   from [RFC3484] are not always adequate.  For this reason, Linux\n\
    \   allows the system administrator to dynamically change the sorting.\n   This\
    \ can be achieved with the /etc/gai.conf file.\n   For incoming packets, Linux\
    \ checks if the destination address matches\n   one of the addresses assigned\
    \ to its interfaces and then processes\n   the packet according the configured\
    \ host model.  By default, Linux\n   implements the weak host model [RFC1122]\
    \ on both IPv4 and IPv6.\n   However, Linux can also be configured to support\
    \ the strong host\n   model.\n"
- title: 3.2.2.3.  DNS Configuration
  contents:
  - "3.2.2.3.  DNS Configuration\n   Most BSD and Linux distributions rely on their\
    \ DHCP client to handle\n   the configuration of interface-specific information\
    \ (such as an IP\n   address and netmask) and a set of system-wide configuration\n\
    \   information (such a DNS server list, an NTP server list, and default\n   routes).\
    \  Users of these operating systems have the choice of using\n   any DHCP client\
    \ available for their platform with an operating system\n   default.  This section\
    \ discusses the behavior of several DHCP clients\n   that may be used with Linux\
    \ and BSD distributions.\n   The Internet Systems Consortium (ISC) DHCP Client\
    \ [ISCDHCP] and its\n   derivative for OpenBSD [OPENBSDDHCLIENT] can be configured\
    \ with\n   specific instructions for each interface.  However, each time new\n\
    \   configuration data is received by the host from a DHCP server,\n   regardless\
    \ of which interface it is received on, the DHCP client\n   rewrites the global\
    \ configuration data, such as the default routes\n   and the DNS server list (in\
    \ /etc/resolv.conf) with the most recent\n   information received.  Therefore,\
    \ the last configured interface\n   always become the primary one.  The ISC DHCPv6\
    \ client behaves\n   similarly.  However, OpenBSD provides two mechanisms that\
    \ prevent the\n   configuration that the user made manually from being overwritten:\n\
    \   o  OPTION MODIFIERS (default, supersede, prepend, and append): this\n    \
    \  mechanism allows the user to override the DHCP options.  For\n      example,\
    \ the supersede statement defines, for some options, the\n      values the client\
    \ should always use rather than any value supplied\n      by the server.\n   o\
    \  resolv.conf.tail: this allows the user to append anything to the\n      resolv.conf\
    \ file created by the DHCP client.\n   The Phystech dhcpcd client [PHYSTECHDHCPC]\
    \ behaves similarly to the\n   ISC client.  It replaces the DNS server list in\
    \ /etc/resolv.conf and\n   the default routes each time new DHCP information is\
    \ received on any\n   interface.  However, the -R flag can be used to instruct\
    \ the client\n   to not replace the DNS servers in /etc/resolv.conf.  However,\
    \ this\n   flag is a global flag for the DHCP server and is therefore applicable\n\
    \   to all interfaces.  When dhcpd is called with the -R flag, the DNS\n   servers\
    \ are never replaced.\n   The pump client [PUMP] also behaves similarly to the\
    \ ISC client.  It\n   replaces the DNS servers in /etc/resolv.conf and the default\
    \ routes\n   each time new DHCP information is received on any interface.\n  \
    \ However, the nodns and nogateway options can be specified on a per-\n   interface\
    \ basis, enabling the user to define which interface should\n   be used to obtain\
    \ the global configuration information.\n   The udhcp client [UDHCP] is often\
    \ used in embedded platforms based on\n   busybox.  The udhcp client behaves similarly\
    \ to the ISC client.  It\n   rewrites default routes and the DNS server list each\
    \ time new DHCP\n   information is received.\n   Red Hat-based distributions,\
    \ such as Red Hat, Centos, and Fedora have\n   a per-interface configuration option\
    \ (PEERDNS) that indicates that\n   the DNS server list should not be updated\
    \ based on configuration\n   received on that interface.\n   Most configurable\
    \ DHCP clients can be set to define a primary\n   interface; only that interface\
    \ is used for the global configuration\n   data.  However, this is limited, since\
    \ a mobile host might not always\n   have the same set of interfaces available.\
    \  Connection managers may\n   help in this situation.\n   Some distributions\
    \ also have a connection manager.  However, most\n   connection managers serve\
    \ as a GUI to the DHCP client and therefore\n   do not change the functionality\
    \ described above.\n"
- title: 4.  Acknowledgements
  contents:
  - "4.  Acknowledgements\n   The authors of this document would like to thank following\
    \ people for\n   their input and feedback: Dan Wing, Hui Deng, Jari Arkko, Julien\n\
    \   Laganier, and Steinar H. Gunderson.\n"
- title: 5.  Security Considerations
  contents:
  - "5.  Security Considerations\n   This document describes current operating system\
    \ implementations and\n   how they handle the issues raised in the MIF problem\
    \ statement.\n   While it is possible that the currently implemented mechanisms\n\
    \   described in this document may affect the security of the systems\n   described,\
    \ this document merely reports on current practice.  It does\n   not attempt to\
    \ analyze the security properties (or any other\n   architectural properties)\
    \ of the currently implemented mechanisms.\n"
- title: 6.  Contributors
  contents:
  - "6.  Contributors\n   The following people contributed most of the per-operating\
    \ system\n   information found in this document:\n   o  Marc Blanchet, Viagenie\n\
    \   o  Hua Chen, Leadcore Technology, Ltd.\n   o  Yan Zhang, Leadcore Technology,\
    \ Ltd.\n   o  Shunan Fan, Huawei Technology\n   o  Jian Yang, Huawei Technology\n\
    \   o  Gabriel Montenegro, Microsoft Corporation\n   o  Shyam Seshadri, Microsoft\
    \ Corporation\n   o  Dave Thaler, Microsoft Corporation\n   o  Kevin Chin, Microsoft\
    \ Corporation\n   o  Teemu Savolainen, Nokia\n   o  Tao Sun, China Mobile\n  \
    \ o  George Tsirtsis, Qualcomm\n   o  David Freyermuth, France Telecom\n   o \
    \ Aurelien Collet, Altran\n   o  Giyeong Son, RIM\n"
- title: 7.  References
  contents:
  - '7.  References

    '
- title: 7.1.  Normative References
  contents:
  - "7.1.  Normative References\n   [RFC6418]     Blanchet, M. and P. Seite, \"Multiple\
    \ Interfaces and\n                 Provisioning Domains Problem Statement\", RFC\
    \ 6418,\n                 November 2011.\n"
- title: 7.2.  Informative References
  contents:
  - "7.2.  Informative References\n   [ANDROID]     Google Inc., \"Android developers:\
    \ package android.net\",\n                 <http://developer.android.com/reference/android/net/\n\
    \                 ConnectivityManager.html>.\n   [ANDROID-RFC3484]\n         \
    \        Gunderson, S., \"RFC 3484 support for Android\", 2010,\n            \
    \     <http://gitorious.org/0xdroid/bionic/commit/\n                 9ab75d4cc803e91b7f1b656ffbe2ad32c52a86f9>.\n\
    \   [BLACKBERRY]  Research In Motion Limited, \"BlackBerry Java\n            \
    \     Development Environment - Fundamentals Guide: Wireless\n               \
    \  gateways\", <http://na.blackberry.com/eng/\n                 deliverables/5827/Wireless_gateways_447132_11.jsp>.\n\
    \   [ISCDHCP]     Internet Software Consortium, \"ISC DHCP\",\n              \
    \   <http://www.isc.org/software/dhcp>.\n   [MIF-ARENA]   Zhang, Y., Sun, T.,\
    \ and H. Chen, \"Multi-interface\n                 Network Connection Manager\
    \ in Arena Platform\", Work\n                 in Progress, February 2009.\n  \
    \ [MIF-REQS]    Yang, J., Sun, T., and S. Fan, \"Multi-interface\n           \
    \      Connection Manager Implementation and Requirements\",\n               \
    \  Work in Progress, March 2009.\n   [MULTIHOMING] Montenegro, G., Thaler, D.,\
    \ and S. Seshadri, \"Multiple\n                 Interfaces on Windows\", Work\
    \ in Progress, March 2009.\n   [NRPT]        Davies, J., \"Name Resolution Policy\
    \ Table\",\n                 February 2010, <http://technet.microsoft.com/en-\n\
    \                 us/magazine/ff394369.aspx>.\n   [OPENBSDDHCLIENT]\n        \
    \         OpenBSD, \"OpenBSD dhclient\", <http://www.openbsd.org/>.\n   [PHYSTECHDHCPC]\n\
    \                 Phystech, \"dhcpcd\",\n                 <http://www.phystech.com/download/dhcpcd.html>.\n\
    \   [PUMP]        Red Hat, \"PUMP\", 2009, <http://redhat.com>.\n   [RFC1122]\
    \     Braden, R., \"Requirements for Internet Hosts -\n                 Communication\
    \ Layers\", STD 3, RFC 1122, October 1989.\n   [RFC3484]     Draves, R., \"Default\
    \ Address Selection for Internet\n                 Protocol version 6 (IPv6)\"\
    , RFC 3484, February 2003.\n   [RFC4311]     Hinden, R. and D. Thaler, \"IPv6\
    \ Host-to-Router Load\n                 Sharing\", RFC 4311, November 2005.\n\
    \   [S60]         Nokia Corporation, \"S60 Platform: IP Bearer\n             \
    \    Management\", 2007, <http://www.forum.nokia.com/info/\n                 sw.nokia.com/id/190358c8-7cb1-4be3-9321-f9d6788ecae5/\n\
    \                 S60_Platform_IP_Bearer_Management_v1_0_en.pdf.html>.\n   [UDHCP]\
    \       Busybox, \"uDHCP\",\n                 <http://busybox.net/downloads/BusyBox.html>.\n\
    \   [WINDOWSMOBILE]\n                 Microsoft Corporation, \"SDK Documentation\
    \ for Windows\n                 Mobile-Based Smartphones: Connection Manager\"\
    , 2005,\n                 <http://msdn.microsoft.com/en-us/library/\n        \
    \         aa457829.aspx>.\n   [WNDS-RFC3484]\n                 Microsoft Corporation,\
    \ \"SDK Documentation for Windows\n                 Mobile-Based Smartphones:\
    \ Default Address Selection for\n                 IPv6\", April 2010, <http://msdn.microsoft.com/en-us/\n\
    \                 library/aa925716.aspx>.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Margaret Wasserman\n   Painless Security, LLC\n   356\
    \ Abbott Street\n   North Andover, MA  01845\n   USA\n   Phone: +1 781 405-7464\n\
    \   EMail: mrw@painless-security.com\n   URI:   http://www.painless-security.com\n\
    \   Pierrick Seite\n   France Telecom - Orange\n   4, rue du clos courtel BP 91226\n\
    \   Cesson-Sevigne  35512\n   France\n   EMail: pierrick.seite@orange.com\n"
