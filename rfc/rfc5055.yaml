- title: __initial_text__
  contents:
  - '          Server-Based Certificate Validation Protocol (SCVP)

    '
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Abstract
  contents:
  - "Abstract\n   The Server-Based Certificate Validation Protocol (SCVP) allows a\n\
    \   client to delegate certification path construction and certification\n   path\
    \ validation to a server.  The path construction or validation\n   (e.g., making\
    \ sure that none of the certificates in the path are\n   revoked) is performed\
    \ according to a validation policy, which\n   contains one or more trust anchors.\
    \  It allows simplification of\n   client implementations and use of a set of\
    \ predefined validation\n   policies.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n           3.2.3. wantBack ...........................................16\n\
    \           3.2.4. validationPolicy ...................................19\n  \
    \                3.2.4.1. validationPolRef ..........................20\n    \
    \                       3.2.4.1.1. Default Validation Policy ......21\n      \
    \            3.2.4.2. validationAlg .............................22\n        \
    \                   3.2.4.2.1. Basic Validation Algorithm .....22\n          \
    \                 3.2.4.2.2. Basic Validation\n                              \
    \        Algorithm Errors ...............23\n                           3.2.4.2.3.\
    \ Name Validation Algorithm ......24\n                           3.2.4.2.4. Name\
    \ Validation\n                                      Algorithm Errors ...............25\n\
    \                  3.2.4.3. userPolicySet .............................26\n  \
    \                3.2.4.4. inhibitPolicyMapping ......................26\n    \
    \              3.2.4.5. requireExplicitPolicy .....................27\n      \
    \            3.2.4.6. inhibitAnyPolicy ..........................27\n        \
    \          3.2.4.7. trustAnchors ..............................27\n          \
    \        3.2.4.8. keyUsages .................................28\n            \
    \      3.2.4.9. extendedKeyUsages .........................28\n              \
    \    3.2.4.10. specifiedKeyUsages .......................29\n           3.2.5.\
    \ responseFlags ......................................30\n                  3.2.5.1.\
    \ fullRequestInResponse .....................30\n                  3.2.5.2. responseValidationPolByRef\
    \ ................30\n                  3.2.5.3. protectResponse ...........................31\n\
    \                  3.2.5.4. cachedResponse ............................31\n  \
    \         3.2.6. serverContextInfo ..................................32\n    \
    \       3.2.7. validationTime .....................................32\n      \
    \     3.2.8. intermediateCerts ..................................33\n        \
    \   3.2.9. revInfos ...........................................34\n          \
    \ 3.2.10. producedAt ........................................35\n           3.2.11.\
    \ queryExtensions ...................................35\n                  3.2.11.1.\
    \ extnID ...................................35\n                  3.2.11.2. critical\
    \ .................................35\n                  3.2.11.3. extnValue ................................36\n\
    \      3.3. requestorRef ..............................................36\n  \
    \    3.4. requestNonce ..............................................36\n    \
    \  3.5. requestorName .............................................37\n      3.6.\
    \ responderName .............................................37\n      3.7. requestExtensions\
    \ .........................................38\n           3.7.1. extnID .............................................38\n\
    \           3.7.2. critical ...........................................38\n  \
    \         3.7.3. extnValue ..........................................38\n    \
    \  3.8. signatureAlg ..............................................38\n      3.9.\
    \ hashAlg ...................................................39\n      3.10. requestorText\
    \ ............................................39\n      3.11. SCVP Request Authentication\
    \ ..............................40\n   4. Validation Response.............................................40\n\
    \     4.1. cvResponseVersion...........................................43\n  \
    \   4.2. serverConfigurationID.......................................43\n    \
    \ 4.3. producedAt..................................................44\n     4.4.\
    \ responseStatus..............................................44\n     4.5. respValidationPolicy........................................46\n\
    \     4.6. requestRef..................................................47\n  \
    \         4.6.1. requestHash ........................................47\n    \
    \       4.6.2. fullRequest ........................................48\n     4.7.\
    \ requestorRef................................................48\n     4.8. requestorName...............................................48\n\
    \     4.9. replyObjects................................................49\n  \
    \         4.9.1. cert................................................50\n    \
    \       4.9.2. replyStatus.........................................50\n      \
    \     4.9.3. replyValTime .......................................51\n        \
    \   4.9.4. replyChecks ........................................51\n          \
    \ 4.9.5. replyWantBacks .....................................53\n           4.9.6.\
    \ validationErrors ...................................56\n           4.9.7. nextUpdate\
    \ .........................................56\n           4.9.8. certReplyExtensions\
    \ ................................56\n     4.10. respNonce..................................................57\n\
    \     4.11. serverContextInfo..........................................57\n  \
    \   4.12. cvResponseExtensions ......................................58\n    \
    \ 4.13. requestorText .............................................58\n     4.14.\
    \ SCVP Response Validation ..................................59\n           4.14.1.\
    \ Simple Key Validation .............................59\n           4.14.2. SCVP\
    \ Server Certificate Validation ................59\n   5. Server Policy Request...........................................60\n\
    \      5.1. vpRequestVersion...........................................60\n  \
    \    5.2. requestNonce...............................................60\n   6.\
    \ Validation Policy Response......................................61\n      6.1.\
    \ vpResponseVersion..........................................62\n      6.2. maxCVRequestVersion........................................62\n\
    \      6.3. maxVPRequestVersion........................................62\n  \
    \    6.4. serverConfigurationID......................................62\n    \
    \  6.5. thisUpdate.................................................63\n      6.6.\
    \ nextUpdate and requestNonce................................63\n      6.7. supportedChecks............................................63\n\
    \      6.8. supportedWantBacks.........................................64\n  \
    \    6.9. validationPolicies.........................................64\n    \
    \  6.10. validationAlgs............................................64\n      6.11.\
    \ authPolicies..............................................64\n      6.12. responseTypes.............................................64\n\
    \      6.13. revocationInfoTypes.......................................64\n  \
    \    6.14. defaultPolicyValues.......................................65\n    \
    \  6.15. signatureGeneration ......................................65\n      6.16.\
    \ signatureVerification ....................................65\n      6.17. hashAlgorithms\
    \ ...........................................66\n      6.18. serverPublicKeys\
    \ .........................................66\n      6.19. clockSkew ................................................66\n\
    \   7. SCVP Server Relay...............................................67\n  \
    \ 8. SCVP ASN.1 Module...............................................68\n   9.\
    \ Security Considerations.........................................76\n   10.IANA\
    \ Considerations.............................................78\n   11. References.....................................................78\n\
    \       11.1. Normative References.....................................78\n  \
    \     11.2. Informative References...................................79\n   12.\
    \ Acknowledgments................................................80\n   Appendix\
    \ A. MIME Media Type Registrations..........................81\n        A.1. application/scvp-cv-request..............................81\n\
    \        A.2. application/scvp-cv-response.............................82\n  \
    \      A.3. application/scvp-vp-request..............................83\n    \
    \    A.4. application/scvp-vp-response.............................84\n   Appendix\
    \ B. SCVP over HTTP.........................................85\n        B.1. SCVP\
    \ Request.............................................85\n        B.2. SCVP Response............................................85\n\
    \        B.3. SCVP Policy Request......................................86\n  \
    \      B.4. SCVP Policy Response.....................................86\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   Certificate validation is complex.  If certificate handling\
    \ is to be\n   widely deployed in a variety of applications and environments,\
    \ the\n   amount of processing an application needs to perform before it can\n\
    \   accept a certificate needs to be reduced.  There are a variety of\n   applications\
    \ that can make use of public key certificates, but these\n   applications are\
    \ burdened with the overhead of constructing and\n   validating the certification\
    \ paths.  SCVP reduces this overhead for\n   two classes of certificate-using\
    \ applications.\n   The first class of applications wants just two things: confirmation\n\
    \   that the public key belongs to the identity named in the certificate\n   and\
    \ confirmation that the public key can be used for the intended\n   purpose. \
    \ Such clients can completely delegate certification path\n   construction and\
    \ validation to the SCVP server.  This is often\n   referred to as delegated path\
    \ validation (DPV).\n   The second class of applications can perform certification\
    \ path\n   validation, but they lack a reliable or efficient method of\n   constructing\
    \ a valid certification path.  Such clients delegate\n   certification path construction\
    \ to the SCVP server, but not\n   validation of the returned certification path.\
    \  This is often\n   referred to as delegated path discovery (DPD).\n"
- title: 1.1.  Terminology
  contents:
  - "1.1.  Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"\
    SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\"\
    , and \"OPTIONAL\" in this\n   document are to be interpreted as described in\
    \ [STDWORDS].\n"
- title: 1.2.  SCVP Overview
  contents:
  - "1.2.  SCVP Overview\n   The primary goals of SCVP are to make it easier to deploy\
    \ Public Key\n   Infrastructure (PKI)-enabled applications by delegating path\n\
    \   discovery and/or validation processing to a server, and to allow\n   central\
    \ administration of validation policies within an organization.\n   SCVP can be\
    \ used by clients that do much of the certificate\n   processing themselves but\
    \ simply want an untrusted server to collect\n   information for them.  However,\
    \ when the client has complete trust in\n   the SCVP server, SCVP can be used\
    \ to delegate the work of\n   certification path construction and validation,\
    \ and SCVP can be used\n   to ensure that policies are consistently enforced throughout\
    \ an\n   organization.\n   Untrusted SCVP servers can provide clients the certification\
    \ paths.\n   They can also provide clients the revocation information, such as\n\
    \   Certificate Revocation Lists (CRLs) and Online Certificate Status\n   Protocol\
    \ (OCSP) responses, that the clients need to validate the\n   certification paths\
    \ constructed by the SCVP server.  These services\n   can be valuable to clients\
    \ that do not implement the protocols needed\n   to find and download intermediate\
    \ certificates, CRLs, and OCSP\n   responses.\n   Trusted SCVP servers can perform\
    \ certification path construction and\n   validation for the client.  For a client\
    \ that uses these services,\n   the client inherently trusts the SCVP server as\
    \ much as it would its\n   own certification path validation software (if it contained\
    \ such\n   software).  There are two main reasons that a client may want to\n\
    \   trust such an SCVP server:\n   1. The client does not want to incur the overhead\
    \ of including\n      certification path validation software and running it for\
    \ each\n      certificate it receives.\n   2. The client is in an organization\
    \ or community that wants to\n      centralize management of validation policies.\
    \  These policies\n      might dictate that particular trust anchors are to be\
    \ used and the\n      types of policy checking that are to be performed during\n\
    \      certification path validation.\n"
- title: 1.3.  SCVP Requirements
  contents:
  - "1.3.  SCVP Requirements\n   SCVP meets the mandatory requirements documented\
    \ in [RQMTS] for DPV\n   and DPD.\n   Note that RFC 3379 states the following\
    \ requirement:\n      The DPD response MUST indicate one of the following status\n\
    \      alternatives:\n      1) one or more certification paths was found according\
    \ to the path\n         discovery policy, with all of the requested revocation\n\
    \         information present.\n      2) one or more certification paths was found\
    \ according to the path\n         discovery policy, with a subset of the requested\
    \ revocation\n         information present.\n      3) one or more certification\
    \ paths was found according to the path\n         discovery policy, with none\
    \ of the requested revocation\n         information present.\n      4) no certification\
    \ path was found according to the path discovery\n         policy.\n      5) path\
    \ construction could not be performed due to an error.\n   DPD responses constructed\
    \ by SCVP servers do not differentiate\n   between states 2) and 3).  This property\
    \ was discussed on the PKIX\n   working group list and determined to be conformant\
    \ with the intent of\n   [RQMTS].\n"
- title: 1.4.  Validation Policies
  contents:
  - "1.4.  Validation Policies\n   A validation policy (as defined in RFC 3379 [RQMTS])\
    \ specifies the\n   rules and parameters to be used by the SCVP server when validating\
    \ a\n   certificate.  In SCVP, the validation policy to be used by the server\n\
    \   either can be fully referenced in the request by the client (and thus\n  \
    \ no additional parameters are necessary) or can be referenced in the\n   request\
    \ by the client with additional parameters.\n   Policy definitions can be quite\
    \ long and complex, and some policies\n   may allow for the setting of a few parameters.\
    \  The request can\n   therefore be very simple if an object identifier (OID)\
    \ is used to\n   specify both the algorithm to be used and all the associated\n\
    \   parameters of the validation policy.  The request can be more complex\n  \
    \ if the validation policy fixes many of the parameters but allows the\n   client\
    \ to specify some of them.  When the validation policy defines\n   every parameter\
    \ necessary, an SCVP request needs only to contain the\n   certificate to be validated,\
    \ the referenced validation policy, and\n   any run-time parameters for the request.\n\
    \   A server publishes the references of the validation policies it\n   supports.\
    \  When these policies have parameters that may be\n   overridden, the server\
    \ communicates the default values for these\n   parameters as well.  The client\
    \ can simplify the request by omitting\n   a parameter from a request if the default\
    \ value published by the\n   server for a given validation policy reference is\
    \ acceptable.\n   However, if there is a desire to demonstrate to someone else\
    \ that a\n   specific validation policy with all its parameters has been used,\
    \ the\n   client will need to ask the server for the inclusion of the full\n \
    \  validation policy with all the parameters in the response.\n   The inputs to\
    \ the basic certification path processing algorithm used\n   by SCVP are defined\
    \ by [PKIX-1] in Section 6.1.1 and comprise:\n      Certificate to be validated\
    \ (by value or by reference);\n      Validation time;\n      The initial policy\
    \ set;\n      Initial inhibit policy mapping setting;\n      Initial inhibit anyPolicy\
    \ setting; and\n      Initial require explicit policy setting.\n   The basic certification\
    \ path processing algorithm also supports\n   specification of one or more trust\
    \ anchors (by value or reference) as\n   an input.  Where the client demands a\
    \ certification path originating\n   with a specific Certification Authority (CA),\
    \ a single trust anchor\n   is specified.  Where the client is willing to accept\
    \ paths beginning\n   with any of several CAs, a set of trust anchors is specified.\n\
    \   The basic certification path processing algorithm also supports the\n   following\
    \ parameters, which are defined in [PKIX-1], Section 4:\n      The usage of the\
    \ key contained in the certificate (e.g., key\n      encipherment, key agreement,\
    \ signature); and\n      Other application-specific purposes for which the certified\
    \ public\n      key may be used.\n"
- title: 1.5.  Validation Algorithm
  contents:
  - "1.5.  Validation Algorithm\n   The validation algorithm is determined by agreement\
    \ between the\n   client and the server and is represented as an OID.  The algorithm\n\
    \   defines the checking that will be performed by the server to\n   determine\
    \ whether the certificate is valid.  A validation algorithm\n   is one of the\
    \ parameters to a validation policy.  SCVP defines a\n   basic validation algorithm\
    \ that implements the basic path validation\n   algorithm as defined in [PKIX-1],\
    \ and it permits the client to\n   request additional information about the certificate\
    \ to be validated.\n   New validation algorithms can be specified that define\
    \ additional\n   checks if needed.  These new validation algorithms may specify\n\
    \   additional parameters.  The values for these parameters may be\n   defined\
    \ by any validation policy that uses the algorithm or may be\n   included by the\
    \ client in the request.\n   Application-specific validation algorithms, in addition\
    \ to those\n   defined in this document, can be defined to meet specific\n   requirements\
    \ not covered by the basic validation algorithm.  The\n   validation algorithms\
    \ documented here should serve as a guide for the\n   development of further application-specific\
    \ validation algorithms.\n   For example, a new application-specific validation\
    \ algorithm might\n   require the presence of a particular name form in the subject\n\
    \   alternative name extension of the certificate.\n"
- title: 1.6.  Validation Requirements
  contents:
  - "1.6.  Validation Requirements\n   For a certification path to be considered valid\
    \ under a particular\n   validation policy, it MUST be a valid certification path\
    \ as defined\n   in [PKIX-1], and all validation policy constraints that apply\
    \ to the\n   certification path MUST be verified.\n   Revocation checking is one\
    \ aspect of certification path validation\n   defined in [PKIX-1].  However, revocation\
    \ checking is an optional\n   feature in [PKIX-1], and revocation information\
    \ is distributed in\n   multiple formats.  Clients specify in requests whether\
    \ revocation\n   checking should be performed and whether revocation information\n\
    \   should be returned in the response.\n   Servers MUST be capable of indicating\
    \ the sources of revocation\n   information that they are capable of processing:\n\
    \      1. full CRLs (or full Authority Revocation Lists);\n      2. OCSP responses,\
    \ using [OCSP];\n      3. delta CRLs; and\n      4. indirect CRLs.\n"
- title: 2.  Protocol Overview
  contents:
  - "2.  Protocol Overview\n   SCVP uses a simple request-response model.  That is,\
    \ the SCVP client\n   creates a request and sends it to the SCVP server, and then\
    \ the SCVP\n   server creates a single response and sends it to the client.  The\n\
    \   typical use of SCVP is expected to be over HTTP [HTTP], but it can\n   also\
    \ be used with email or any other protocol that can transport\n   digitally signed\
    \ objects.  Appendices A and B provide the details\n   necessary to use SCVP with\
    \ HTTP.\n   SCVP includes two request-response pairs.  The primary request-\n\
    \   response pair handles certificate validation.  The secondary request-\n  \
    \ response pair is used to determine the list of validation policies\n   and default\
    \ parameters supported by a specific SCVP server.\n   Section 3 defines the certificate\
    \ validation request.\n   Section 4 defines the corresponding certificate validation\
    \ response.\n   Section 5 defines the validation policies request.\n   Section\
    \ 6 defines the corresponding validation policies response.\n   Appendix A registers\
    \ MIME types for SCVP requests and responses, and\n   Appendix B describes the\
    \ use of these MIME types with HTTP.\n"
- title: 3.  Validation Request
  contents:
  - "3.  Validation Request\n   An SCVP client request to the server MUST be a single\
    \ CVRequest item.\n   When a CVRequest is encapsulated in a MIME body part,\n\
    \   application/scvp-cv-request MUST be used.  There are two forms of\n   SCVP\
    \ request: unprotected and protected.  A protected request is used\n   to authenticate\
    \ the client to the server or to provide anonymous\n   client integrity over the\
    \ request-response pair.  The protection is\n   provided by a digital signature\
    \ or message authentication code (MAC).\n   In the later case, the MAC key is\
    \ derived using a key agreement\n   algorithm, such as Diffie-Hellman.  If the\
    \ client's public key is\n   contained in a certificate, then it may be used to\
    \ authenticate the\n   client.  More commonly, the client's key agreement public\
    \ key will be\n   ephemeral, supporting anonymous client integrity.\n   A server\
    \ MAY require all requests to be protected, and a server MAY\n   discard all unprotected\
    \ requests.  Alternatively, a server MAY choose\n   to process unprotected requests.\n\
    \   The unprotected request consists of a CVRequest encapsulated in a\n   Cryptographic\
    \ Message Syntax (CMS) ContentInfo [CMS].  An overview of\n   this structure is\
    \ provided below and is only intended as\n   illustrative.  The definitive ASN.1\
    \ is found in [CMS].  Many details\n   are not shown, but the way that SCVP makes\
    \ use of CMS is clearly\n   illustrated.\n      ContentInfo {\n        contentType\
    \        id-ct-scvp-certValRequest,\n                                     -- (1.2.840.113549.1.9.16.1.10)\n\
    \        content            CVRequest }\n   The protected request consists of\
    \ a CVRequest encapsulated in either\n   a SignedData or AuthenticatedData, which\
    \ is in turn encapsulated in a\n   ContentInfo.  That is, the EncapsulatedContentInfo\
    \ field of either\n   SignedData or AuthenticatedData consists of an eContentType\
    \ field\n   with a value of id-ct-scvp-certValRequest and an eContent field that\n\
    \   contains a Distinguished Encoding Rules (DER)-encoded CVRequest.\n   SignedData\
    \ is used when the request is digitally signed.\n   AuthenticatedData is used\
    \ with a message authentication code (MAC).\n   All SCVP clients and servers MUST\
    \ support SignedData for signed\n   requests and responses.  SCVP clients and\
    \ servers SHOULD support\n   AuthenticatedData for MAC-protected requests and\
    \ responses.\n   If the client uses SignedData, it MUST have a public key that\
    \ has\n   been bound to a subject identity by a certificate that conforms to\n\
    \   the PKIX profile [PKIX-1], and that certificate MUST be suitable for\n   signing\
    \ the SCVP request.  That is:\n      1. If the key usage extension is present,\
    \ either the digital\n         signature or the non-repudiation bit MUST be asserted.\n\
    \      2. If the extended key usage extension is present, it MUST contain\n  \
    \       either the SCVP client OID (see Section 3.11), the\n         anyExtendedKeyUsage\
    \ OID, or another OID acceptable to the SCVP\n         server.\n   The client\
    \ MUST put an unambiguous reference to its certificate in\n   the SignedData that\
    \ encapsulates the request.  The client SHOULD\n   include its certificate in\
    \ the request, but MAY omit the certificate\n   to reduce the size of the request.\
    \  The client MAY include other\n   certificates in the request to aid the validation\
    \ of its certificates\n   by the SCVP server.  The signerInfos field of SignedData\
    \ MUST include\n   exactly one SignerInfo.  The SignedData MUST NOT include the\n\
    \   unsignedAttrs field.\n   The client MUST put its key agreement public key,\
    \ or an unambiguous\n   reference to a certificate that contains its key agreement\
    \ public\n   key, in the AuthenticatedData that encapsulates the request.  If\
    \ an\n   ephemeral key agreement key pair is used, then the ephemeral key\n  \
    \ agreement public key is carried in the originatorKey field of\n   KeyAgreeRecipientInfo,\
    \ which requires the client to obtain the\n   server's key agreement public key\
    \ before computing the message\n   authentication code (MAC).  An SCVP server's\
    \ key agreement key is\n   included in its validation policy response message\
    \ (see Section 6).\n   The recipientInfos field of AuthenticatedData MUST include\
    \ exactly\n   one RecipientInfo, which contains information for the SCVP server.\n\
    \   The AuthenticatedData MUST NOT include the unauthAttrs field.\n   The syntax\
    \ and semantics for SignedData, AuthenticatedData, and\n   ContentInfo are defined\
    \ in [CMS].  The syntax and semantics for\n   CVRequest are defined below.  The\
    \ CVRequest item contains the client\n   request.  The CVRequest contains the\
    \ cvRequestVersion and query\n   items; the CVRequest MAY also contain the requestorRef,\
    \ requestNonce,\n   requestorName, responderName, requestExtensions, signatureAlg,\
    \ and\n   hashAlg items.\n   The CVRequest MUST have the following syntax:\n \
    \     CVRequest ::= SEQUENCE {\n        cvRequestVersion        INTEGER DEFAULT\
    \ 1,\n        query                   Query,\n        requestorRef        [0]\
    \ GeneralNames OPTIONAL,\n        requestNonce        [1] OCTET STRING OPTIONAL,\n\
    \        requestorName       [2] GeneralName OPTIONAL,\n        responderName\
    \       [3] GeneralName OPTIONAL,\n        requestExtensions   [4] Extensions\
    \ OPTIONAL,\n        signatureAlg        [5] AlgorithmIdentifier OPTIONAL,\n \
    \       hashAlg             [6] OBJECT IDENTIFIER OPTIONAL,\n        requestorText\
    \       [7] UTF8String (SIZE (1..256)) OPTIONAL }\n   Conforming clients MUST\
    \ be able to construct requests with\n   cvRequestVersion and query.  Conforming\
    \ clients MUST DER encode the\n   CVRequest in both protected and unprotected\
    \ messages to facilitate\n   unambiguous hash-based referencing in the corresponding\
    \ response\n   message.  SCVP clients that insist on creation of a fresh response\n\
    \   (e.g., to protect against a replay attack or ensure information is up\n  \
    \ to date) MUST support requestNonce.  Support for the remaining items\n   is\
    \ optional in client implementations.\n   Conforming servers MUST be able to parse\
    \ CVRequests that contain any\n   or all of the optional items.\n   Each of the\
    \ items within the CVRequest is described in the following\n   sections.\n"
- title: 3.1.  cvRequestVersion
  contents:
  - "3.1.  cvRequestVersion\n   The cvRequestVersion item defines the version of the\
    \ SCVP CVRequest\n   used in a request.  The subsequent response MUST use the\
    \ same version\n   number.  The value of the cvRequestVersion item MUST be one\
    \ (1) for a\n   client implementing this specification.  Future updates to this\n\
    \   specification must specify other values if there are any changes to\n   syntax\
    \ or semantics.  However, new extensions may be defined without\n   changing the\
    \ version number.\n   SCVP clients MUST support asserting this value and SCVP\
    \ servers MUST\n   be capable of processing this value.\n"
- title: 3.2.  query
  contents:
  - "3.2.  query\n   The query item specifies one or more certificates that are the\n\
    \   subject of the request; the certificates can be either public key\n   certificates\
    \ [PKIX-1] or attribute certificates [PKIX-AC].  A query\n   MUST contain a queriedCerts\
    \ item as well as one checks item, and one\n   validationPolicy item; a query\
    \ MAY also contain wantBack,\n   responseFlags, serverContextInfo, validationTime,\
    \ intermediateCerts,\n   revInfos, producedAt, and queryExtensions items.\n  \
    \ A Query MUST have the following syntax:\n      Query ::= SEQUENCE {\n      \
    \  queriedCerts            CertReferences,\n        checks                  CertChecks,\n\
    \         -- Note: tag [0] not used --\n        wantBack            [1] WantBack\
    \ OPTIONAL,\n        validationPolicy        ValidationPolicy,\n        responseFlags\
    \           ResponseFlags OPTIONAL,\n        serverContextInfo   [2] OCTET STRING\
    \ OPTIONAL,\n        validationTime      [3] GeneralizedTime OPTIONAL,\n     \
    \   intermediateCerts   [4] CertBundle OPTIONAL,\n        revInfos           \
    \ [5] RevocationInfos OPTIONAL,\n        producedAt          [6] GeneralizedTime\
    \ OPTIONAL,\n        queryExtensions     [7] Extensions OPTIONAL }\n   The list\
    \ of certificate references in the queriedCerts item tells the\n   server the\
    \ certificate(s) for which the client wants information.\n   The checks item specifies\
    \ the checking that the client wants\n   performed.  The wantBack item specifies\
    \ the objects that the client\n   wants the server to return in the response.\
    \  The validationPolicy\n   item specifies the validation policy that the client\
    \ wants the server\n   to employ.  The responseFlags item allows the client to\
    \ request\n   optional features for the response.  The serverContextInfo item\
    \ tells\n   the server that additional information from a previous request-\n\
    \   response is desired.  The validationTime item tells the date and time\n  \
    \ relative to which the client wants the server to perform the checks.\n   The\
    \ intermediateCerts and revInfos items provide context for the\n   client request.\
    \  The queryExtensions item provides for future\n   expansion of the query syntax.\
    \  The syntax and semantics of each of\n   these items are discussed in the following\
    \ sections.\n   Conforming clients MUST be able to construct a Query with a\n\
    \   queriedCerts item that specifies at least one certificate, checks,\n   and\
    \ validationPolicy.  Conforming SCVP clients MAY support\n   specification of\
    \ multiple certificates and MAY support the optional\n   items in the Query structure.\n\
    \   SCVP clients that support delegated path discovery (DPD) as defined\n   in\
    \ [RQMTS] MUST support wantBack and responseFlags.  SCVP clients\n   that insist\
    \ on creation of a fresh response (e.g., to protect against\n   a replay attack\
    \ or ensure information is up to date) MUST support\n   responseFlags.\n   Conforming\
    \ servers MUST be able to process a Query that contains any\n   of the optional\
    \ items, and MUST be able to process a Query that\n   specifies multiple certificates.\n"
- title: 3.2.1.  queriedCerts
  contents:
  - "3.2.1.  queriedCerts\n   The queriedCerts item is a SEQUENCE of one or more certificates,\
    \ each\n   of which is a subject of the request.  The specified certificates are\n\
    \   either public key certificates or attribute certificates; if more\n   than\
    \ one certificate is specified, all must be of the same type.\n   Each certificate\
    \ is either directly included, or it is referenced.\n   When referenced, a hash\
    \ value of the referenced item is included to\n   ensure that the SCVP client\
    \ and the SCVP server both obtain the same\n   certificate when the referenced\
    \ certificate is fetched.  Certificate\n   references use the SCVPCertID type,\
    \ which is described below.  A\n   single request MAY contain both directly included\
    \ and referenced\n   certificates.\n   CertReferences has the following syntax:\n\
    \   CertReferences ::= CHOICE {\n     pkcRefs     [0] SEQUENCE SIZE (1..MAX) OF\
    \ PKCReference,\n     acRefs      [1] SEQUENCE SIZE (1..MAX) OF ACReference }\n\
    \   PKCReference ::= CHOICE {\n     cert        [0] Certificate,\n     pkcRef\
    \      [1] SCVPCertID }\n   ACReference ::= CHOICE {\n     attrCert    [2] AttributeCertificate,\n\
    \     acRef       [3] SCVPCertID }\n   SCVPCertID ::= SEQUENCE {\n     certHash\
    \        OCTET STRING,\n     issuerSerial    SCVPIssuerSerial,\n     hashAlgorithm\
    \   AlgorithmIdentifier DEFAULT { algorithm sha-1 } }\n   The ASN.1 definition\
    \ of Certificate is imported from [PKIX-1] and the\n   definition of AttributeCertificate\
    \ is imported from [PKIX-AC].\n   When creating a SCVPCertID, the certHash is\
    \ computed over the entire\n   DER-encoded certificate including the signature.\
    \  The hash algorithm\n   used to compute certHash is specified in hashAlgorithm.\
    \  The hash\n   algorithm used to compute certHash SHOULD be one of the hash\n\
    \   algorithms specified in the hashAlgorithms item of the server's\n   validation\
    \ policy response message.\n   When encoding SCVPIssuerSerial, serialNumber is\
    \ the serial number\n   that uniquely identifies the certificate.  For public\
    \ key\n   certificates, the issuer MUST contain only the issuer name from the\n\
    \   certificate encoded in the directoryName choice of GeneralNames.  For\n  \
    \ attribute certificates, the issuer MUST contain the issuer name field\n   from\
    \ the attribute certificate.\n   Conforming clients MUST be able to reference\
    \ a certificate by direct\n   inclusion.  Clients SHOULD be able to specify a\
    \ certificate using the\n   SCVPCertID.  Conforming clients MAY be able to reference\
    \ multiple\n   certificates and MAY be able to reference both public key and\n\
    \   attribute certificates.\n   Conforming SCVP Server implementations MUST be\
    \ able to process\n   CertReferences with multiple certificates.  Conforming SCVP\
    \ server\n   implementations MUST be able to parse CertReferences that contain\n\
    \   either public key or attribute certificates.  Conforming SCVP server\n   implementations\
    \ MUST be able to parse both the cert and pkcRef\n   choices in PKCReference.\
    \  Conforming SCVP server implementations that\n   process attribute certificates\
    \ MUST be able to parse both the\n   attrCert and acRef choices in ACReference.\n"
- title: 3.2.2.  checks
  contents:
  - "3.2.2.  checks\n   The checks item describes the checking that the SCVP client\
    \ wants the\n   SCVP server to perform on the certificate(s) in the queriedCerts\n\
    \   item.  The checks item contains a sequence of object identifiers\n   (OIDs).\
    \  Each OID tells the SCVP server what checking the client\n   expects the server\
    \ to perform.  For each check specified in the\n   request, the SCVP server MUST\
    \ perform the requested check, or return\n   an error.  A server may choose to\
    \ perform additional checks (e.g., a\n   server that is only asked to build a\
    \ validated certification path may\n   choose to also perform revocation status\
    \ checks), although the server\n   cannot indicate in the response that the additional\
    \ checks have been\n   performed, except in the case of an error response.\n \
    \  The checks item uses the CertChecks type, which has the following\n   syntax:\n\
    \      CertChecks ::= SEQUENCE SIZE (1..MAX) OF OBJECT IDENTIFIER\n   For public\
    \ key certificates, the following checks are defined in this\n   document:\n \
    \  -  id-stc-build-pkc-path: Build a prospective certification path to a\n   \
    \   trust anchor (as defined in Section 6.1 of [PKIX-1]);\n   -  id-stc-build-valid-pkc-path:\
    \ Build a validated certification path\n      to a trust anchor (revocation checking\
    \ not required);\n   -  id-stc-build-status-checked-pkc-path: Build a validated\n\
    \      certification path to a trust anchor and perform revocation status\n  \
    \    checks on the certification path.\n   Conforming SCVP server implementations\
    \ that support delegated path\n   discovery (DPD) as defined in [RQMTS] MUST support\
    \ the id-stc-build-\n   pkc-path check.  Conforming SCVP server implementations\
    \ that support\n   delegated path validation (DPV) as defined in [RQMTS] MUST\
    \ support\n   the id-stc-build-valid-pkc-path and id-stc-build-status-checked-pkc-\n\
    \   path checks.\n   For attribute certificates, the following checks are defined\
    \ in this\n   document:\n   -  id-stc-build-aa-path: Build a prospective certification\
    \ path to a\n      trust anchor for the Attribute Certificate (AC) issuer;\n \
    \  -  id-stc-build-valid-aa-path: Build a validated certification path\n     \
    \ to a trust anchor for the AC issuer;\n   -  id-stc-build-status-checked-aa-path:\
    \ Build a validated\n      certification path to a trust anchor for the AC issuer\
    \ and perform\n      revocation status checks on the certification path for the\
    \ AC\n      issuer;\n   -  id-stc-status-check-ac-and-build-status-checked-aa-path:\
    \ Build a\n      validated certification path to a trust anchor for the AC issuer\n\
    \      and perform revocation status checks on the AC as well as the\n      certification\
    \ path for the AC issuer.\n   Conforming SCVP server implementations MAY support\
    \ the attribute\n   certificates checks.\n   For these purposes, the following\
    \ OIDs are defined:\n      id-stc OBJECT IDENTIFIER ::= { iso(1) identified-organization(3)\n\
    \              dod(6) internet(1) security(5) mechanisms(5) pkix(7) 17 }\n   \
    \   id-stc-build-pkc-path         OBJECT IDENTIFIER ::= { id-stc 1 }\n      id-stc-build-valid-pkc-path\
    \   OBJECT IDENTIFIER ::= { id-stc 2 }\n      id-stc-build-status-checked-pkc-path\n\
    \                                    OBJECT IDENTIFIER ::= { id-stc 3 }\n    \
    \  id-stc-build-aa-path          OBJECT IDENTIFIER ::= { id-stc 4 }\n      id-stc-build-valid-aa-path\
    \    OBJECT IDENTIFIER ::= { id-stc 5 }\n      id-stc-build-status-checked-aa-path\n\
    \                                    OBJECT IDENTIFIER ::= { id-stc 6 }\n    \
    \  id-stc-status-check-ac-and-build-status-checked-aa-path\n                 \
    \                   OBJECT IDENTIFIER ::= { id-stc 7 }\n   Other specifications\
    \ may define additional checks.\n   Conforming client implementations MUST support\
    \ assertion of at least\n   one of the standard checks.  Conforming clients MAY\
    \ support assertion\n   of multiple checks.  Conforming clients need not support\
    \ all of the\n   checks defined in this section.\n"
- title: 3.2.3.  wantBack
  contents:
  - "3.2.3.  wantBack\n   The optional wantBack item describes any information the\
    \ SCVP client\n   wants from the SCVP server for the certificate(s) in the queriedCerts\n\
    \   item in addition to the results of the checks specified in the checks\n  \
    \ item.  If present, the wantBack item MUST contain a sequence of\n   object identifiers\
    \ (OIDs).  Each OID tells the SCVP server what the\n   client wants to know about\
    \ the queriedCerts item.  For each type of\n   information specified in the request,\
    \ the server MUST return\n   information regarding its finding (in a successful\
    \ response).\n   For example, a request might include a checks item that only\n\
    \   specifies certification path building and include a wantBack item\n   that\
    \ requests the return of the certification path built by the\n   server.  In this\
    \ case, the response would not include a status for\n   the validation of the\
    \ certification path, but it would include a\n   prospective certification path.\
    \  A client that wants to perform its\n   own certification path validation might\
    \ use a request of this form.\n   Alternatively, a request might include a checks\
    \ item that requests\n   the server to build a certification path and validate\
    \ it, including\n   revocation checking, and not include a wantBack item.  In\
    \ this case,\n   the response would include only a status for the validation of\
    \ the\n   certification path.  A client that completely delegates certification\n\
    \   path validation might use a request of this form.\n   The wantBack item uses\
    \ the WantBack type, which has the following\n   syntax:\n      WantBack ::= SEQUENCE\
    \ SIZE (1..MAX) OF OBJECT IDENTIFIER\n   For public key certificates, the following\
    \ wantBacks are defined in\n   this document:\n   -  id-swb-pkc-cert: The certificate\
    \ that was the subject of the\n      request;\n   -  id-swb-pkc-best-cert-path:\
    \ The certification path built for the\n      certificate including the certificate\
    \ that was validated;\n   -  id-swb-pkc-revocation-info: Proof of revocation status\
    \ for each\n      certificate in the certification path;\n   -  id-swb-pkc-public-key-info:\
    \ The public key from the certificate\n      that was the subject of the request;\n\
    \   -  id-swb-pkc-all-cert-paths: A set of certification paths for the\n     \
    \ certificate that was the subject of the request;\n   -  id-swb-pkc-ee-revocation-info:\
    \ Proof of revocation status for the\n      end entity certificate in the certification\
    \ path; and\n   -  id-swb-pkc-CAs-revocation-info: Proof of revocation status\
    \ for\n      each CA certificate in the certification path.\n   All conforming\
    \ SCVP server implementations MUST support the id-swb-\n   pkc-cert and id-swb-pkc-public-key-info\
    \ wantBacks.  Conforming SCVP\n   server implementations that support delegated\
    \ path discovery (DPD) as\n   defined in [RQMTS] MUST support the id-swb-pkc-best-cert-path\
    \ and id-\n   swb-pkc-revocation-info wantBacks.\n   SCVP provides two methods\
    \ for a client to obtain multiple\n   certification paths for a certificate. \
    \ The client could use\n   serverContextInfo to request one path at a time (see\
    \ Section 3.2.6).\n   After obtaining each path, the client could submit the\n\
    \   serverContextInfo from the previous request to obtain another path\n   until\
    \ either the client found a suitable path or the server indicated\n   (by not\
    \ returning a serverContextInfo) that no more paths were\n   available.  Alternatively,\
    \ the client could send a single request\n   with an id-swb-pkc-all-cert-paths\
    \ wantBack, in which case the server\n   would return all of the available paths\
    \ in a single response.\n   The server may, at its discretion, limit the number\
    \ of paths that it\n   returns in response to the id-swb-pkc-all-cert-paths. \
    \ When the\n   request includes an id-swb-pkc-all-cert-paths wantBack, the response\n\
    \   SHOULD NOT include a serverContextInfo.\n   For attribute certificates, the\
    \ following wantBacks are defined in\n   this document:\n   -  id-swb-ac-cert:\
    \ The attribute certificate that was the subject of\n      the request;\n   -\
    \  id-swb-aa-cert-path: The certification path built for the AC\n      issuer\
    \ certificate;\n   -  id-swb-ac-revocation-info: Proof of revocation status for\
    \ each\n      certificate in the AC issuer certification path; and\n   -  id-swb-aa-revocation-info:\
    \ Proof of revocation status for the\n      attribute certificate.\n   Conforming\
    \ SCVP server implementations MAY support the attribute\n   certificate wantBacks.\n\
    \   The following wantBack can be used for either public key or attribute\n  \
    \ certificates:\n   -  id-swb-relayed-responses: Any SCVP responses received by\
    \ the\n      server that were used to generate the response to this query.\n \
    \  Conforming SCVP servers MAY support the id-swb-relayed-responses\n   wantBack.\n\
    \   For these purposes, the following OIDs are defined:\n      id-swb OBJECT IDENTIFIER\
    \ ::= { iso(1) identified-organization(3)\n              dod(6) internet(1) security(5)\
    \ mechanisms(5) pkix(7) 18 }\n      id-swb-pkc-best-cert-path      OBJECT IDENTIFIER\
    \ ::= { id-swb 1 }\n      id-swb-pkc-revocation-info     OBJECT IDENTIFIER ::=\
    \ { id-swb 2 }\n      id-swb-pkc-public-key-info     OBJECT IDENTIFIER ::= { id-swb\
    \ 4 }\n      id-swb-aa-cert-path            OBJECT IDENTIFIER ::= { id-swb 5 }\n\
    \      id-swb-aa-revocation-info      OBJECT IDENTIFIER ::= { id-swb 6 }\n   \
    \   id-swb-ac-revocation-info      OBJECT IDENTIFIER ::= { id-swb 7 }\n      id-swb-relayed-responses\
    \       OBJECT IDENTIFIER ::= { id-swb 9 }\n      id-swb-pkc-cert            \
    \    OBJECT IDENTIFIER ::= { id-swb 10}\n      id-swb-ac-cert                \
    \ OBJECT IDENTIFIER ::= { id-swb 11}\n      id-swb-pkc-all-cert-paths      OBJECT\
    \ IDENTIFIER ::= { id-swb 12}\n      id-swb-pkc-ee-revocation-info  OBJECT IDENTIFIER\
    \ ::= { id-swb 13}\n      id-swb-pkc-CAs-revocation-info OBJECT IDENTIFIER ::=\
    \ { id-swb 14}\n   Other specifications may define additional wantBacks.\n   Conforming\
    \ client implementations that support delegated path\n   validation (DPV) as defined\
    \ in [RQMTS] SHOULD support assertion of at\n   least one wantBack.  Conforming\
    \ client implementations that support\n   delegated path discovery (DPD) as defined\
    \ in [RQMTS] MUST support\n   assertion of at least one wantBack.  Conforming\
    \ clients MAY support\n   assertion of multiple wantBacks.  Conforming clients\
    \ need not support\n   all of the wantBacks defined in this section.\n"
- title: 3.2.4.  validationPolicy
  contents:
  - "3.2.4.  validationPolicy\n   The validationPolicy item defines the validation\
    \ policy that the\n   client wants the SCVP server to use during certificate validation.\n\
    \   If this policy cannot be used for any reason, then the server MUST\n   return\
    \ an error response.\n   A validation policy MUST define default values for all\
    \ parameters\n   necessary for processing an SCVP request.  For each parameter,\
    \ a\n   validation policy may either allow the client to specify a non-\n   default\
    \ value or forbid the use of a non-default value.  If the\n   client wishes to\
    \ use the default values for all of the parameters,\n   then the client need only\
    \ supply a reference to the policy in this\n   item.  If the client wishes to\
    \ use non-default values for one or more\n   parameters, then the client supplies\
    \ a reference to the policy plus\n   whatever parameters are necessary to complete\
    \ the request in this\n   item.  If there are any conflicts between the policy\
    \ referenced in\n   the request and any supplied parameter values in the request,\
    \ then\n   the server MUST return an error response.\n   The syntax of the validationPolicy\
    \ item is:\n      ValidationPolicy ::= SEQUENCE {\n        validationPolRef  \
    \        ValidationPolRef,\n        validationAlg         [0] ValidationAlg OPTIONAL,\n\
    \        userPolicySet         [1] SEQUENCE SIZE (1..MAX) OF OBJECT\n        \
    \                            IDENTIFIER OPTIONAL,\n        inhibitPolicyMapping\
    \  [2] BOOLEAN OPTIONAL,\n        requireExplicitPolicy [3] BOOLEAN OPTIONAL,\n\
    \        inhibitAnyPolicy      [4] BOOLEAN OPTIONAL,\n        trustAnchors   \
    \       [5] TrustAnchors OPTIONAL,\n        keyUsages             [6] SEQUENCE\
    \ OF KeyUsage OPTIONAL,\n        extendedKeyUsages     [7] SEQUENCE OF KeyPurposeId\
    \ OPTIONAL,\n        specifiedKeyUsages    [8] SEQUENCE OF KeyPurposeId OPTIONAL\
    \ }\n   The validationPolRef item is required, but the remaining items are\n \
    \  optional.  The optional items are used to provide validation policy\n   parameters.\
    \  When the client uses the validation policy's default\n   values for all parameters,\
    \ all of the optional items are absent.\n   At a minimum, conforming SCVP client\
    \ implementations MUST support the\n   validationPolRef item.  Conforming client\
    \ implementations MAY support\n   any or all of the optional items in ValidationPolicy.\n\
    \   Conforming SCVP servers MUST support processing of a ValidationPolicy\n  \
    \ that contains any or all of the optional items.\n   The validationAlg item specifies\
    \ the validation algorithm.  The\n   userPolicySet item provides an acceptable\
    \ set of certificate\n   policies.  The inhibitPolicyMapping item inhibits certificate\
    \ policy\n   mapping during certification path validation.  The\n   requireExplicitPolicy\
    \ item requires at least one valid certificate\n   policy in the certificate policies\
    \ extension.  The inhibitAnyPolicy\n   item indicates whether the anyPolicy certificate\
    \ policy OID is\n   processed or ignored when evaluating certificate policy. \
    \ The\n   trustAnchors item indicates the trust anchors that are acceptable to\n\
    \   the client.  The keyUsages item indicates the technical usage of the\n   public\
    \ key that is to be confirmed by the server as acceptable.  The\n   extendedKeyUsages\
    \ item indicates the application-specific usage of\n   the public key that is\
    \ to be confirmed by the server as acceptable.\n   The syntax and semantics of\
    \ each of these items are discussed in the\n   following sections.\n"
- title: 3.2.4.1.  validationPolRef
  contents:
  - "3.2.4.1.  validationPolRef\n   The reference to the validation policy is an OID\
    \ that the client and\n   server have agreed represents a particular validation\
    \ policy.\n   The syntax of the validationPolRef item is:\n      ValidationPolRef::=\
    \ SEQUENCE {\n        valPolId              OBJECT IDENTIFIER,\n        valPolParams\
    \          ANY DEFINED BY valPolId OPTIONAL }\n   Where a validation policy supports\
    \ additional policy-specific\n   parameter settings, these values are specified\
    \ using the valPolParams\n   item.  The syntax and semantics of the parameters\
    \ structure are\n   defined by the object identifier encoded as the valPolId.\
    \  Where a\n   validation policy has no parameters, such as the default validation\n\
    \   policy (see Section 3.2.4.1.1), this item MUST be omitted.\n   Parameters\
    \ specified in this item are independent of the validation\n   algorithm and the\
    \ validation algorithm's parameters (see Section\n   3.2.4.2).  For example, a\
    \ server may support a validation policy\n   where it validates a certificate\
    \ using the name validation algorithm\n   and also makes a determination regarding\
    \ the creditworthiness of the\n   subject.  In this case, the validation policy\
    \ parameters could be\n   used to specify the value of the transaction.  The validation\n\
    \   algorithm parameters are used to specify the application identifier\n   and\
    \ name for the name validation algorithm.\n   Conforming SCVP client implementations\
    \ MUST support specification of\n   a validation policy.  Conforming SCVP client\
    \ implementations MAY be\n   able to specify parameters for a validation policy.\
    \  Conforming SCVP\n   server implementations MUST be able to process valPolId\
    \ and MAY be\n   able to process valPolParams.\n"
- title: 3.2.4.1.1.  Default Validation Policy
  contents:
  - "3.2.4.1.1.  Default Validation Policy\n   The client can request the SCVP server's\
    \ default validation policy or\n   another validation policy.  The default validation\
    \ policy corresponds\n   to standard certification path processing as defined\
    \ in [PKIX-1] with\n   server-chosen default values (e.g., with a server-determined\
    \ policy\n   set and trust anchors).  The default values can be distributed out\
    \ of\n   band or using the policy request mechanism (see Section 5).  This\n \
    \  mechanism permits the deployment of an SCVP server without obtaining\n   a\
    \ new object identifier.\n   The object identifier that identifies the default\
    \ validation policy\n   is:\n      id-svp OBJECT IDENTIFIER ::= { iso(1) identified-organization(3)\n\
    \             dod(6) internet(1) security(5) mechanisms(5) pkix(7) 19 }\n    \
    \  id-svp-defaultValPolicy OBJECT IDENTIFIER ::= { id-svp 1 }\n   The default\
    \ validation policy MUST use the basic validation algorithm\n   as its default\
    \ validation algorithm (see Section 3.2.4.2.1), and has\n   no validation policy\
    \ parameters (see Section 3.2.4.1).\n   When using the default validation policy,\
    \ the client can override any\n   of the default parameter values by supplying\
    \ a specific value in the\n   request.  The SCVP server MUST make use of the provided\
    \ parameter\n   values or return an error response.\n   Conforming implementations\
    \ of SCVP servers MUST support the default\n   policy.  However, an SCVP server\
    \ may be configured to send an error\n   response to all requests using the default\
    \ policy to meet local\n   security requirements.\n"
- title: 3.2.4.2.  validationAlg
  contents:
  - "3.2.4.2.  validationAlg\n   The optional validationAlg item defines the validation\
    \ algorithm to\n   be used by the SCVP server during certificate validation. \
    \ The value\n   of this item can be determined by agreement between the client\
    \ and\n   the server.  The validation algorithm is represented by an object\n\
    \   identifier.\n   The syntax of the validationAlg item is:\n      ValidationAlg\
    \ ::= SEQUENCE {\n        valAlgId              OBJECT IDENTIFIER,\n        parameters\
    \            ANY DEFINED BY valAlgId OPTIONAL }\n   The following section specifies\
    \ the basic validation algorithm and\n   the name validation algorithm.\n   SCVP\
    \ servers MUST recognize and support both validation algorithms\n   defined in\
    \ this section.  SCVP clients that support explicit\n   assertion of the validation\
    \ algorithm MUST support the basic\n   validation algorithm and SHOULD support\
    \ the name validation\n   algorithm.  Other validation algorithms can be specified\
    \ in other\n   documents for use with specific applications.  SCVP clients and\n\
    \   servers MAY support any such validation algorithms.\n"
- title: 3.2.4.2.1.  Basic Validation Algorithm
  contents:
  - "3.2.4.2.1.  Basic Validation Algorithm\n   The client can request use of the\
    \ SCVP basic validation algorithm or\n   another algorithm.  For identity certificates,\
    \ the basic validation\n   algorithm MUST implement the certification path validation\
    \ algorithm\n   as defined in Section 6 of [PKIX-1].  For attribute certificates,\
    \ the\n   basic validation algorithm MUST implement certification path\n   validation\
    \ as defined in Section 5 of [PKIX-AC].  Other validation\n   algorithms MAY implement\
    \ functions over and above those in the basic\n   algorithm, but validation algorithms\
    \ MUST generate results compliant\n   with the basic validation algorithm.  That\
    \ is, none of the validation\n   requirements in the basic algorithm may be omitted\
    \ from any newly\n   defined validation algorithms.  However, other validation\
    \ algorithms\n   MAY reject paths that are valid using the basic validation algorithm.\n\
    \   The object identifier to identify the basic validation algorithm is:\n   \
    \   id-svp-basicValAlg OBJECT IDENTIFIER ::= { id-svp 3 }\n   When id-svp-basicValAlg\
    \ appears in valAlgId, the parameters item MUST\n   be absent.\n"
- title: 3.2.4.2.2.  Basic Validation Algorithm Errors
  contents:
  - "3.2.4.2.2.  Basic Validation Algorithm Errors\n   The following errors are defined\
    \ for the basic validation algorithm\n   for inclusion in the validationErrors\
    \ item in the response (see\n   Section 4.9.6).  These errors can be used by any\
    \ other validation\n   algorithm since all validation algorithms MUST implement\
    \ the\n   functionality of the basic validation algorithm.\n      id-bvae OBJECT\
    \ IDENTIFIER ::= id-svp-basicValAlg\n      id-bvae-expired              OBJECT\
    \ IDENTIFIER ::= { id-bvae 1 }\n      id-bvae-not-yet-valid        OBJECT IDENTIFIER\
    \ ::= { id-bvae 2 }\n      id-bvae-wrongTrustAnchor     OBJECT IDENTIFIER ::=\
    \ { id-bvae 3 }\n      id-bvae-noValidCertPath      OBJECT IDENTIFIER ::= { id-bvae\
    \ 4 }\n      id-bvae-revoked              OBJECT IDENTIFIER ::= { id-bvae 5 }\n\
    \      id-bvae-invalidKeyPurpose    OBJECT IDENTIFIER ::= { id-bvae 9 }\n    \
    \  id-bvae-invalidKeyUsage      OBJECT IDENTIFIER ::= { id-bvae 10 }\n      id-bvae-invalidCertPolicy\
    \    OBJECT IDENTIFIER ::= { id-bvae 11 }\n   The id-bvae-expired value means\
    \ that the validation time used for the\n   request was later than the notAfter\
    \ time in the end certificate (the\n   certificate specified in the queriedCerts\
    \ item).\n   The id-bvae-not-yet-valid value means that the validation time used\n\
    \   for the request was before the notBefore time in the end certificate.\n  \
    \ The id-bvae-wrongTrustAnchor value means that a certification path\n   could\
    \ not be constructed for the client-specified trust anchor(s),\n   but a path\
    \ exists for one of the trust anchors specified in the\n   server's default validation\
    \ policy.\n   The id-bvae-noValidCertPath value means that the server could not\n\
    \   construct a sequence of intermediate certificates between the trust\n   anchor\
    \ and the target certificate that satisfied the request.\n   The id-bvae-revoked\
    \ value means that the end certificate has been\n   revoked.\n   The id-bvae-invalidKeyPurpose\
    \ value means that the extended key usage\n   extension ([PKIX-1], Section 4.2.1.13)\
    \ in the end certificate does\n   not satisfy the validation policy.\n   The id-bvae-invalidKeyUsage\
    \ value means that the keyUsage extension\n   ([PKIX-1], Section 4.2.1.3) in the\
    \ end certificate does not satisfy\n   the validation policy.  For example, the\
    \ keyUsage extension in the\n   certificate may assert only the keyEncipherment\
    \ bit, but the\n   validation policy specifies in the keyUsages item that\n  \
    \ digitalSignature is required.\n   The id-bvae-invalidCertPolicy value means\
    \ that the path is not valid\n   under any of the policies specified in the user\
    \ policy set and\n   explicit policies are required.  That is, the valid_policy_tree\
    \ is\n   NULL and the explicit_policy variable is zero ([PKIX-1], Section\n  \
    \ 6.1.5).\n"
- title: 3.2.4.2.3.  Name Validation Algorithm
  contents:
  - "3.2.4.2.3.  Name Validation Algorithm\n   The name validation algorithm allows\
    \ the client to specify one or\n   more subject names that MUST appear in the\
    \ end certificate in\n   addition to the requirements specified for the basic\
    \ validation\n   algorithm.  The name validation algorithm allows the client to\
    \ supply\n   an application identifier and a name to the server.  The application\n\
    \   identifier defines the name matching rules to use in comparing the\n   name\
    \ supplied in the request with the names in the certificate.\n      id-svp-nameValAlg\
    \ OBJECT IDENTIFIER ::= { id-svp 2 }\n   When the id-svp-nameValAlg appears as\
    \ a valAlgId, the parameters MUST\n   use the NameValidationAlgParms syntax:\n\
    \      NameValidationAlgParms ::= SEQUENCE {\n        nameCompAlgId     OBJECT\
    \ IDENTIFIER,\n        validationNames   GeneralNames }\n   GeneralNames is defined\
    \ in [PKIX-1].\n   If more than one name is supplied in the validationNames value,\
    \ all\n   names MUST be of the same type.  The certificate must contain a\n  \
    \ matching name for each of the names supplied in validationNames\n   according\
    \ to the name matching rules associated with the\n   nameCompAlgId.  This specification\
    \ defines three sets of name\n   matching rules.\n   If the nameCompAlgId supplied\
    \ in the request is id-nva-dnCompAlg,\n   then GeneralNames supplied in the request\
    \ MUST be a directoryName,\n   and the matching rules to be used are defined in\
    \ [PKIX-1].  The\n   certificate must contain a matching name in either the subject\
    \ field\n   or a directoryName in the subjectAltName extension.  This\n   specification\
    \ defines the OID for id-nva-dnCompAlg as follows:\n      id-nva-dnCompAlg   OBJECT\
    \ IDENTIFIER ::= { id-svp 4 }\n   If the nameCompAlgId supplied in the request\
    \ is id-kp-serverAuth\n   [PKIX-1], then GeneralNames supplied in the request\
    \ MUST be a\n   dNSName, and the matching rules to be used are defined in [PKIX-1].\n\
    \   If a subjectAltName extension is present and includes one or more\n   names\
    \ of type dNSName, a match in any one of the set is considered\n   acceptable.\
    \  If the subjectAltName extension is omitted, or does not\n   include any names\
    \ of type dNSName, the (most specific) Common Name\n   field in the subject field\
    \ of the certificate MUST be used.\n   Names may contain the wildcard character\
    \ *, which is considered to\n   match any single domain name component.  That\
    \ is, *.a.com matches\n   foo.a.com but not bar.foo.a.com.\n   If the nameCompAlgId\
    \ supplied in the request is id-kp-mailProtection\n   [PKIX-1], then GeneralNames\
    \ supplied in the request MUST be an\n   rfc822Name, and the matching rules are\
    \ defined in [SMIME-CERT].\n   Conforming SCVP servers MUST support the name validation\
    \ algorithm\n   and the matching rules associated with id-nva-dnCompAlg, id-kp-\n\
    \   serverAuth, and id-kp-mailProtection.  SCVP servers MAY support other\n  \
    \ name matching rules.\n"
- title: 3.2.4.2.4.  Name Validation Algorithm Errors
  contents:
  - "3.2.4.2.4.  Name Validation Algorithm Errors\n   The following errors are defined\
    \ for the name validation algorithm:\n      id-nvae OBJECT IDENTIFIER ::= id-svp-nameValAlg\n\
    \      id-nvae-name-mismatch    OBJECT IDENTIFIER ::= { id-nvae 1 }\n      id-nvae-no-name\
    \          OBJECT IDENTIFIER ::= { id-nvae 2 }\n      id-nvae-unknown-alg    \
    \  OBJECT IDENTIFIER ::= { id-nvae 3 }\n      id-nvae-bad-name         OBJECT\
    \ IDENTIFIER ::= { id-nvae 4 }\n      id-nvae-bad-name-type    OBJECT IDENTIFIER\
    \ ::= { id-nvae 5 }\n      id-nvae-mixed-names      OBJECT IDENTIFIER ::= { id-nvae\
    \ 6 }\n   The id-nvae-name-mismatch value means the client supplied a name with\n\
    \   the request, which the server recognized and the server found a\n   corresponding\
    \ name type in the certificate, but was unable to find a\n   match to the name\
    \ supplied.  For example, the client supplied a DNS\n   name of example1.com,\
    \ and the certificate contained a DNS name of\n   example.com.\n   The id-nvae-no-name\
    \ value means the client supplied a name with the\n   request, which the server\
    \ recognized, but the server could not find\n   the corresponding name type in\
    \ the certificate.  For example, the\n   client supplied a DNS name of example1.com,\
    \ and the certificate only\n   contained a rfc822Name of user@example.com.\n \
    \  The id-nvae-unknown-alg value means the client supplied a\n   nameCompAlgId\
    \ that the server does not recognize.\n   The id-nvae-bad-name value means the\
    \ client supplied either an empty\n   or malformed name in the request.\n   The\
    \ id-nvae-bad-name-type value means the client supplied an\n   inappropriate name\
    \ type for the application identifier.  For example,\n   the client specified\
    \ a nameCompAlgId of id-kp-serverAuth, and an\n   rfc822Name of user@example.com.\n\
    \   The id-nvae-mixed-names value means the client supplied multiple\n   names\
    \ in the request of different types.\n"
- title: 3.2.4.3.  userPolicySet
  contents:
  - "3.2.4.3.  userPolicySet\n   The userPolicySet item specifies a list of certificate\
    \ policy\n   identifiers that the SCVP server MUST use when constructing and\n\
    \   validating a certification path.  The userPolicySet item specifies\n   the\
    \ user-initial-policy-set as defined in Section 6 of [PKIX-1].  A\n   userPolicySet\
    \ containing the anyPolicy OID indicates a user-initial-\n   policy-set of any-policy.\n\
    \   SCVP clients SHOULD support the userPolicySet item in requests, and\n   SCVP\
    \ servers MUST support the userPolicySet item in requests.\n"
- title: 3.2.4.4.  inhibitPolicyMapping
  contents:
  - "3.2.4.4.  inhibitPolicyMapping\n   The inhibitPolicyMapping item specifies an\
    \ input to the certification\n   path validation algorithm, and it controls whether\
    \ policy mapping is\n   allowed during certification path validation (see [PKIX-1],\
    \ Section\n   6.1.1).  If the client wants the server to inhibit policy mapping,\n\
    \   inhibitPolicyMapping is set to TRUE in the request.  SCVP clients MAY\n  \
    \ support inhibiting policy mapping.  SCVP servers SHOULD support\n   inhibiting\
    \ policy mapping.\n"
- title: 3.2.4.5.  requireExplicitPolicy
  contents:
  - "3.2.4.5.  requireExplicitPolicy\n   The requireExplicitPolicy item specifies\
    \ an input to the\n   certification path validation algorithm, and it controls\
    \ whether\n   there must be at least one valid policy in the certificate policies\n\
    \   extension (see [PKIX-1], Section 6.1.1).  If the client wants the\n   server\
    \ to require at least one policy, requireExplicitPolicy is set\n   to TRUE in\
    \ the request.\n   SCVP clients MAY support requiring explicit policies.  SCVP\
    \ servers\n   SHOULD support requiring explicit policies.\n"
- title: 3.2.4.6.  inhibitAnyPolicy
  contents:
  - "3.2.4.6.  inhibitAnyPolicy\n   The inhibitAnyPolicy item specifies an input to\
    \ the certification\n   path validation algorithm (see [PKIX-1], Section 6.1.1),\
    \ and it\n   controls whether the anyPolicy OID is processed or ignored when\n\
    \   evaluating certificate policy.  If the client wants the server to\n   ignore\
    \ the anyPolicy OID, inhibitAnyPolicy MUST be set to TRUE in the\n   request.\n\
    \   SCVP clients MAY support ignoring the anyPolicy OID.  SCVP servers\n   SHOULD\
    \ support ignoring the anyPolicy OID.\n"
- title: 3.2.4.7.  trustAnchors
  contents:
  - "3.2.4.7.  trustAnchors\n   The trustAnchors item specifies the trust anchors\
    \ at which the\n   certification path must terminate if the path is to be considered\n\
    \   valid by the SCVP server for the request.  If a trustAnchors item is\n   present,\
    \ the server MUST NOT consider any certification paths ending\n   in other trust\
    \ anchors as valid.\n   The TrustAnchors type contains one or more trust anchor\n\
    \   specifications.  A certificate reference can be used to identify the\n   trust\
    \ anchor by certificate hash and distinguished name with serial\n   number.  Alternatively,\
    \ trust anchors can be provided directly.  The\n   order of trust anchor specifications\
    \ within the sequence is not\n   important.  Any CA certificate that meets the\
    \ requirements of\n   [PKIX-1] for signing certificates can be provided as a trust\
    \ anchor.\n   If a trust anchor is supplied that does not meet these requirements,\n\
    \   the server MUST return an error response.\n   The trust anchor itself, regardless\
    \ of its form, MUST NOT be included\n   in any certification path returned by\
    \ the SCVP server.\n   TrustAnchors has the following syntax:\n      TrustAnchors\
    \ ::= SEQUENCE SIZE (1..MAX) OF PKCReference\n   SCVP servers MUST support trustAnchors.\
    \  SCVP clients SHOULD support\n   trustAnchors.\n"
- title: 3.2.4.8.  keyUsages
  contents:
  - "3.2.4.8.  keyUsages\n   The key usage extension ([PKIX-1], Section 4.2.1.3) in\
    \ the\n   certificate defines the technical purpose (such as encipherment,\n \
    \  signature, and CRL signing) of the key contained in the certificate.\n   If\
    \ the client wishes to confirm the technical usage, then it can\n   communicate\
    \ the usage it wants to validate by the same structure\n   using the same semantics\
    \ as defined in [PKIX-1].  For example, if the\n   client obtained the certificate\
    \ in the context of a digital\n   signature, it can confirm this use by including\
    \ a keyUsage structure\n   with the digital signature bit set.\n   If the keyUsages\
    \ item is present and contains an empty sequence, it\n   indicates that the client\
    \ does not require any particular key usage.\n   If the keyUsages item contains\
    \ one or more keyUsage definitions, then\n   the certificate MUST satisfy at least\
    \ one of the specified keyUsage\n   definitions.  If the client is willing to\
    \ accept multiple\n   possibilities, then the client passes in a sequence of possible\n\
    \   patterns.  Each keyUsage can contain a set of one or more bits set in\n  \
    \ the request, all bits MUST be set in the certificate to match against\n   an\
    \ instance of the keyUsage in the SCVP request.  The certificate key\n   usage\
    \ extension may contain more usages than requested.  For example,\n   if a client\
    \ wishes to check for either digital signature or non-\n   repudiation, then the\
    \ client provides two keyUsage values, one with\n   digital signature set and\
    \ the other with non-repudiation set.  If the\n   key usage extension is absent\
    \ from the certificate, the certificate\n   MUST be considered good for all usages\
    \ and therefore any pattern in\n   the SCVP request will match.\n   SCVP clients\
    \ SHOULD support keyUsages, and SCVP servers MUST support\n   keyUsages.\n"
- title: 3.2.4.9.  extendedKeyUsages
  contents:
  - "3.2.4.9.  extendedKeyUsages\n   The extended key usage extension ([PKIX-1], Section\
    \ 4.2.1.13) defines\n   more specific technical purposes, in addition to, or in\
    \ place of, the\n   purposes indicated in the key usage extension, for which the\n\
    \   certified public key may be used.  If the client will accept\n   certificates\
    \ that are consistent with a particular value (or values)\n   in the extended\
    \ key usage extension, then it can communicate the\n   appropriate usages using\
    \ the same semantics as defined in [PKIX-1].\n   For example, if the client obtained\
    \ the certificate in the context of\n   a Transport Layer Security (TLS) server,\
    \ it can confirm the\n   certificate is consistent with this usage by including\
    \ the extended\n   key usage structure with the id-kp-serverAuth object identifier.\n\
    \   If the extension is absent, or is present and asserts the\n   anyExtendedKeyUsage\
    \ OID, then all usages specified in the request are\n   a match.  If the extension\
    \ is present and does not assert the\n   anyExtendedKeyUsage OID, all usages in\
    \ the request MUST be present in\n   the certificate.  The certificate extension\
    \ may contain more usages\n   than requested.\n   Where the client does not require\
    \ any particular extended key usage,\n   the client can specify an empty SEQUENCE.\
    \  This may be used to\n   override extended key usage requirements imposed in\
    \ the validation\n   policy specified by valPolId.\n   SCVP clients SHOULD support\
    \ extendedKeyUsages, and SCVP servers MUST\n   support extendedKeyUsages.\n"
- title: 3.2.4.10.  specifiedKeyUsages
  contents:
  - "3.2.4.10.  specifiedKeyUsages\n   The extended key usage extension ([PKIX-1],\
    \ Section 4.2.1.13) defines\n   more specific technical purposes, in addition\
    \ to or in place of the\n   purposes indicated in the key usage extension, for\
    \ which the\n   certified public key may be used.  If the client requires that\
    \ a\n   particular value (or values) appear in the extended key usage\n   extension,\
    \ then it can specify the required usage(s) using the same\n   semantics as defined\
    \ in [PKIX-1].  For example, if the client\n   obtained the certificate in the\
    \ context of a TLS server, it might\n   require that the server certificate include\
    \ the extended key usage\n   structure with the id-kp-serverAuth object identifier.\
    \  In this case,\n   the client would include a specifiedKeyUsages item in the\
    \ request and\n   assert the id-kp-serverAuth object identifier.\n   If one or\
    \ more specified usages are included in the request, the\n   certificate MUST\
    \ contain the extended key usage extension, and all\n   usages specified in the\
    \ request MUST be present in the certificate\n   extension.  The certificate extension\
    \ may contain more usages than\n   specified in the request.  Specified key usages\
    \ are not satisfied by\n   the presence of the anyExtendedKeyUsage OID.\n   Where\
    \ the client does not require any particular extended key usage,\n   the client\
    \ can specify an empty SEQUENCE.  This may be used to\n   override specified key\
    \ usage requirements imposed in the validation\n   policy specified by valPolId.\n\
    \   SCVP clients SHOULD support specifiedKeyUsages, and SCVP servers MUST\n  \
    \ support specifiedKeyUsages.\n"
- title: 3.2.5.  responseFlags
  contents:
  - "3.2.5.  responseFlags\n   The optional responseFlags item allows the client to\
    \ indicate which\n   optional features in the CVResponse it wants the server to\
    \ include.\n   If the default values for all of the flags are used, then the\n\
    \   responseFlags item MUST NOT be included in the request.\n   The syntax of\
    \ the responseFlags item is:\n      ResponseFlags ::= SEQUENCE {\n        fullRequestInResponse\
    \      [0] BOOLEAN DEFAULT FALSE,\n        responseValidationPolByRef [1] BOOLEAN\
    \ DEFAULT TRUE,\n        protectResponse            [2] BOOLEAN DEFAULT TRUE,\n\
    \        cachedResponse             [3] BOOLEAN DEFAULT TRUE }\n   Each of the\
    \ response flags is described in the following sections.\n"
- title: 3.2.5.1.  fullRequestInResponse
  contents:
  - "3.2.5.1.  fullRequestInResponse\n   By default, the server includes a hash of\
    \ the request in non-cached\n   responses to allow the client to identify the\
    \ response.  If the\n   client wants the server to include the full request in\
    \ the non-cached\n   response, fullRequestInResponse is set to TRUE.  The main\
    \ reason a\n   client would request the server to include the full request in\
    \ the\n   response is to archive the request-response exchange in a single\n \
    \  object.  That is, the client wants to archive a single object that\n   includes\
    \ both request and response.\n   SCVP clients and servers MUST support the default\
    \ behavior.  SCVP\n   clients MAY support requesting and processing the full request.\
    \  SCVP\n   servers SHOULD support returning the full request.\n"
- title: 3.2.5.2.  responseValidationPolByRef
  contents:
  - "3.2.5.2.  responseValidationPolByRef\n   The responseValidationPolByRef item\
    \ controls whether the response\n   includes just a reference to the policy or\
    \ a reference to the policy\n   plus all the parameters by value of the policy\
    \ used to process the\n   request.  The response MUST contain a reference to the\
    \ validation\n   policy.  If the client wants the validation policy parameters\
    \ to be\n   included by value also, then responseValidationPolByRef is set to\n\
    \   FALSE.  The main reason a client would request the server to include\n   validation\
    \ policy to be included by value is to archive the request-\n   response exchange\
    \ in a single object.  That is, the client wants to\n   archive the CVResponse\
    \ and have it include every aspect of the\n   validation policy.\n   SCVP clients\
    \ MUST support requesting and processing the validation\n   policy by reference,\
    \ and SCVP servers MUST support returning the\n   validation policy by reference.\
    \  SCVP clients MAY support requesting\n   and processing the validation policy\
    \ by values.  SVCP servers SHOULD\n   support returning the validation policy\
    \ by values.\n"
- title: 3.2.5.3.  protectResponse
  contents:
  - "3.2.5.3.  protectResponse\n   The protectResponse item indicates whether the\
    \ client requires the\n   server to protect the response.  If the client is performing\
    \ full\n   certification path validation on the response and it is not concerned\n\
    \   about the source of the response, then the client does not benefit\n   from\
    \ a digital signature or MAC on the response.  In this case, the\n   client can\
    \ indicate to the server that protecting the message is\n   unnecessary.  However,\
    \ the server is always permitted to return a\n   protected response.\n   SCVP\
    \ clients that support delegated path discovery (DPD) as defined\n   in [RQMTS]\
    \ MUST support setting this value to FALSE.\n   SCVP clients that support delegated\
    \ path validation (DPV) as defined\n   in [RQMTS] require an authenticated response.\
    \  Unless a protected\n   transport mechanism (such as TLS) is used, such clients\
    \ MUST always\n   set this value to TRUE or omit the responseFlags item entirely,\
    \ which\n   requires the server to return a protected response.\n   SCVP servers\
    \ MUST support returning protected responses, and SCVP\n   servers SHOULD support\
    \ returning unprotected responses.  Based on\n   local policy, the server can\
    \ be configured to return protected or\n   unprotected responses if this value\
    \ is set to FALSE.  If, based on\n   local policy, the server is unable to return\
    \ protected responses,\n   then the server MUST return an error if this value\
    \ is set to TRUE.\n"
- title: 3.2.5.4.  cachedResponse
  contents:
  - "3.2.5.4.  cachedResponse\n   The cachedResponse item indicates whether the client\
    \ will accept a\n   cached response.  To enhance performance and limit the exposure\
    \ of\n   signing keys, an SCVP service may be designed to cache responses\n  \
    \ until new revocation information is expected.  Where cachedResponse\n   is set\
    \ to TRUE, the client will accept a previously cached response.\n   Clients may\
    \ insist on creation of a fresh response to protect against\n   a replay attack\
    \ and ensure that information is up to date.  Where\n   cachedResponse is FALSE,\
    \ the client will not accept a cached\n   response.  To ensure that a response\
    \ is fresh, the client MUST also\n   include the requestNonce as defined in Section\
    \ 3.4.\n   Servers MUST process the cachedResponse flag.  Where cachedResponse\n\
    \   is FALSE, servers that cannot produce fresh responses MUST reply with\n  \
    \ an error message.  Servers MAY choose to provide fresh responses even\n   where\
    \ cachedResponse is set to TRUE.\n"
- title: 3.2.6.  serverContextInfo
  contents:
  - "3.2.6.  serverContextInfo\n   The optional serverContextInfo item, if present,\
    \ contains context\n   from a previous request-response exchange with the same\
    \ SCVP server.\n   It allows the server to return more than one certification\
    \ path for\n   the same certificate to the client.  For example, if a server\n\
    \   constructs a particular certification path for a certificate, but the\n  \
    \ client finds it unacceptable, the client can then send the same query\n   back\
    \ to the server with the serverContextInfo from the first\n   response, and the\
    \ server will be able to provide a different\n   certification path (if another\
    \ one can be found).\n   Contents of the serverContextInfo are opaque to the SCVP\
    \ client.\n   That is, the client only knows that it needs to return the value\n\
    \   provided by the server with the subsequent request to get a different\n  \
    \ certification path.  Note that the subsequent query needs to be\n   identical\
    \ to the previous query with the exception of the following:\n      - requestNonce,\n\
    \      - serverContextInfo, and\n      - the client's digital signature or MAC\
    \ on the request.\n   SCVP clients MAY support serverContextInfo, and SCVP servers\
    \ SHOULD\n   support serverContextInfo.\n"
- title: 3.2.7.  validationTime
  contents:
  - "3.2.7.  validationTime\n   The optional validationTime item, if present, tells\
    \ the date and time\n   relative to which the SCVP client wants the server to\
    \ perform the\n   checks.  If the validationTime is not present, the server MUST\n\
    \   perform the validation using the date and time at which the server\n   processes\
    \ the request.  If the validationTime is present, it MUST be\n   encoded as GeneralizedTime.\
    \  The validationTime provided MUST be a\n   retrospective time since the server\
    \ can only perform a validity check\n   using the current time (default) or previous\
    \ time.  A server can\n   ignore the validationTime provided in the request if\
    \ the time is\n   within the clock skew of the server's current time.\n   The\
    \ revocation status information is obtained with respect to the\n   validation\
    \ time.  When specifying a validation time other than the\n   current time, the\
    \ validation time should not necessarily be identical\n   to the time when the\
    \ private key was used.  The validation time\n   specified by the client may be\
    \ adjusted to compensate for:\n   1) time for the end-entity to realize that its\
    \ private key has been,\n      or could possibly be, compromised, and/or\n   2)\
    \ time for the end-entity to report the key compromise, and/or\n   3) time for\
    \ the revocation authority to process the revocation\n      request from the end-entity,\
    \ and/or\n   4) time for the revocation authority to update and distribute the\n\
    \      revocation status information.\n   GeneralizedTime values MUST be expressed\
    \ in Universal Coordinated\n   Time (UTC) (which is also known as Greenwich Mean\
    \ Time and Zulu time)\n   and MUST include seconds (i.e., times are YYYYMMDDHHMMSSZ),\
    \ even when\n   the number of seconds is zero.  GeneralizedTime values MUST NOT\n\
    \   include fractional seconds.\n   The information in the corresponding CertReply\
    \ item in the response\n   MUST be formatted as if the server created the response\
    \ at the time\n   indicated in the validationTime.  However, if the server does\
    \ not\n   have appropriate historical information, the server MUST return an\n\
    \   error response.\n   SCVP servers MUST apply a clock skew to the validation\
    \ time to allow\n   for minor time synchronization errors.  The default value\
    \ is 10\n   minutes.  If the server uses a value other than the default, it MUST\n\
    \   include the clock skew value in the validation policy response.\n   SCVP clients\
    \ MAY support validationTime other than the current time.\n   SCVP servers MUST\
    \ support using its current time, and SHOULD support\n   the client setting the\
    \ validationTime in the request.\n"
- title: 3.2.8.  intermediateCerts
  contents:
  - "3.2.8.  intermediateCerts\n   The optional intermediateCerts item may help the\
    \ SCVP server create\n   valid certification paths.  The intermediateCerts item,\
    \ when present,\n   provides certificates that the server MAY use when forming\
    \ a\n   certification path.  When building certification paths, the server\n \
    \  MAY use the certificates in the intermediateCerts item in addition to\n   any\
    \ other certificates that the server can access.  When present, the\n   intermediateCerts\
    \ item MUST contain at least one certificate, and\n   the intermediateCerts item\
    \ MUST be structured as a CertBundle.  The\n   certificates in the intermediateCerts\
    \ item MUST NOT be considered as\n   valid by the server just because they are\
    \ present in this item.\n   The CertBundle type contains one or more certificates.\
    \  The order of\n   the entries in the bundle is not important.  CertBundle has\
    \ the\n   following syntax:\n      CertBundle ::= SEQUENCE SIZE (1..MAX) OF Certificate\n\
    \   SCVP clients SHOULD support intermediateCerts, and SCVP servers MUST\n   support\
    \ intermediateCerts.\n"
- title: 3.2.9.  revInfos
  contents:
  - "3.2.9.  revInfos\n   The optional revInfos item specifies revocation information\
    \ such as\n   CRLs, delta CRLs [PKIX-1], and OCSP responses [OCSP] that the SCVP\n\
    \   server MAY use when validating certification paths.  The purpose of\n   the\
    \ revInfos item is to provide revocation information to which the\n   server might\
    \ not otherwise have access, such as an OCSP response that\n   the client received\
    \ along with the certificate.  Note that the\n   information in the revInfos item\
    \ might not be used by the server.\n   For example, the revocation information\
    \ might be associated with\n   certificates that the server does not use in the\
    \ certification path\n   that it constructs.\n   Clients SHOULD be courteous to\
    \ the SCVP server by separating CRLs and\n   delta CRLs.  However, since the two\
    \ share a common syntax, SCVP\n   servers SHOULD accept delta CRLs even if they\
    \ are identified as\n   regular CRLs by the SCVP client.\n   CRLs, delta CRLs,\
    \ and OCSP responses can be provided as revocation\n   information.  If needed,\
    \ additional object identifiers can be\n   assigned for additional revocation\
    \ information types in the future.\n   The revInfos item uses the RevocationInfos\
    \ type, which has the\n   following syntax:\n      RevocationInfos ::= SEQUENCE\
    \ SIZE (1..MAX) OF RevocationInfo\n      RevocationInfo ::= CHOICE {\n       \
    \ crl                    [0] CertificateList,\n        delta-crl             \
    \ [1] CertificateList,\n        ocsp                   [2] OCSPResponse,\n   \
    \     other                  [3] OtherRevInfo }\n      OtherRevInfo ::= SEQUENCE\
    \ {\n        riType                     OBJECT IDENTIFIER,\n        riValue  \
    \                  ANY DEFINED BY riType }\n"
- title: 3.2.10.  producedAt
  contents:
  - "3.2.10.  producedAt\n   The client MAY allow the server to use a cached SCVP\
    \ response.  When\n   doing so, the client MAY use the producedAt item to express\n\
    \   requirements on the freshness of the cached response.  The producedAt\n  \
    \ item tells the earliest date and time at which an acceptable cached\n   response\
    \ could have been produced.  The producedAt item represents\n   the date and time\
    \ in UTC, using the GeneralizedTime type.  The value\n   in the producedAt item\
    \ is independent of the validation time.\n   GeneralizedTime value MUST be expressed\
    \ in UTC, as defined in Section\n   3.2.7.\n   SCVP clients MAY support using\
    \ producedAt values in the request.\n   SCVP servers MAY support the producedAt\
    \ values in the request.  SCVP\n   servers that support cached responses SHOULD\
    \ support the producedAt\n   value in requests.\n"
- title: 3.2.11.  queryExtensions
  contents:
  - "3.2.11.  queryExtensions\n   The optional queryExtensions item contains extensions.\
    \  If present,\n   each extension in the sequence extends the query.  This specification\n\
    \   does not define any extensions; the facility is provided to allow\n   future\
    \ specifications to extend SCVP.  The syntax for Extensions is\n   imported from\
    \ [PKIX-1].  The queryExtensions item, when present, MUST\n   contain a sequence\
    \ of Extension items, and each of the extensions\n   MUST contain extnID, critical,\
    \ and extnValue items.  Each of these is\n   described in the following sections.\n"
- title: 3.2.11.1.  extnID
  contents:
  - "3.2.11.1.  extnID\n   The extnID item is an identifier for the extension.  It\
    \ contains the\n   object identifier that names the extension.\n"
- title: 3.2.11.2.  critical
  contents:
  - "3.2.11.2.  critical\n   The critical item is a BOOLEAN.  Each extension is designated\
    \ as\n   either critical (with a value of TRUE) or non-critical (with a value\n\
    \   of FALSE).  By default, the extension is non-critical.  An SCVP\n   server\
    \ MUST reject the query if it encounters a critical extension\n   that it does\
    \ not recognize; however, a non-critical extension MAY be\n   ignored if it is\
    \ not recognized, but MUST be processed if it is\n   recognized.\n"
- title: 3.2.11.3.  extnValue
  contents:
  - "3.2.11.3.  extnValue\n   The extnValue item contains an OCTET STRING.  Within\
    \ the OCTET STRING\n   is the extension value.  An ASN.1 type is specified for\
    \ each\n   extension, identified by the associated extnID object identifier.\n"
- title: 3.3.  requestorRef
  contents:
  - "3.3.  requestorRef\n   The optional requestorRef item contains a list of names\
    \ identifying\n   SCVP servers, and it is intended for use in environments where\
    \ SCVP\n   relay is employed.  Although requestorRef is encoded as a SEQUENCE,\n\
    \   no order is implied.  The requestorRef item is used to detect looping\n  \
    \ in some configurations.  The value and use of requestorRef are\n   described\
    \ in Section 7.\n   Conforming SCVP clients MAY support specification of the requestorRef\n\
    \   value.  Conforming SCVP server implementations MUST process the\n   requestorRef\
    \ value if present.  If the SCVP client includes a\n   requestorRef value in the\
    \ request, then the SCVP server MUST return\n   the same value in a non-cached\
    \ response.  The SCVP server MAY omit\n   the requestorRef value from cached SCVP\
    \ responses.\n   The requestorRef item MUST be a sequence of GeneralName.  No\n\
    \   provisions are made to ensure uniqueness of the requestorRef\n   GeneralName\
    \ values.\n"
- title: 3.4.  requestNonce
  contents:
  - "3.4.  requestNonce\n   The optional requestNonce item contains a request identifier\n\
    \   generated by the SCVP client.  If the client includes a requestNonce\n   value\
    \ in the request, it is expressing a preference that the SCVP\n   server SHOULD\
    \ return a non-cached response.  If the server returns a\n   non-cached response,\
    \ it MUST include the value of requestNonce from\n   the request in the response\
    \ as the respNonce item; however, the\n   server MAY return a cached response\
    \ which MUST NOT have a respNonce.\n   SCVP clients that insist on creation of\
    \ a fresh response (e.g., to\n   protect against a replay attack or ensure information\
    \ is up to date)\n   MUST support requestNonce.  Conforming SCVP server implementations\n\
    \   MUST process the requestNonce value if present.\n   If the client includes\
    \ a requestNonce and also sets the\n   cachedResponse flag to FALSE as described\
    \ in Section 3.2.5.4, the\n   client is indicating that the SCVP server MUST return\
    \ either a non-\n   cached response including the respNonce or an error response.\
    \  The\n   client SHOULD include a requestNonce item in every request to prevent\n\
    \   an attacker from acting as a man-in-the-middle by replaying old\n   responses\
    \ from the server.  The requestNonce value SHOULD change with\n   every request\
    \ sent by the client.\n   The client MUST NOT set the cachedResponse flag to FALSE\
    \ without also\n   including a requestNonce.  A server receiving such a request\
    \ SHOULD\n   return an invalidRequest error response.\n   The requestNonce item,\
    \ if present, MUST be an OCTET STRING that was\n   generated exclusively for this\
    \ request.\n"
- title: 3.5.  requestorName
  contents:
  - "3.5.  requestorName\n   The optional requestorName item is used by the client\
    \ to include an\n   identifier in the request.  The client MAY include this information\n\
    \   for the DPV server to copy into the response.\n   Conforming SCVP clients\
    \ MAY support specification of this item in\n   requests.  SCVP servers MUST be\
    \ able to process requests that include\n   this item.\n"
- title: 3.6.  responderName
  contents:
  - "3.6.  responderName\n   The optional responderName item is used by the client\
    \ to indicate the\n   identity of the SCVP server that the client expects to sign\
    \ the SCVP\n   response if the response is digitally signed.  The responderName\
    \ item\n   SHOULD only be included if:\n   1. the request is either unprotected\
    \ or digitally signed (i.e., is\n      not protected using a MAC), and\n   2.\
    \ the responseFlags item is either absent or present with the\n      protectResponse\
    \ set to TRUE.\n   Conforming SCVP clients MAY support specification of this item\
    \ in\n   requests.  SCVP servers MUST be able to process requests that include\n\
    \   this item.  SCVP servers that maintain a single private key for\n   signing\
    \ SCVP responses or that are unable to return digitally signed\n   responses MAY\
    \ ignore the value in this item.  SCVP servers that\n   maintain more than one\
    \ private key for signing SCVP responses SHOULD\n   either (a) digitally sign\
    \ the response using a private key that\n   corresponds to a certificate that\
    \ includes the name specified in\n   responderName in either subject field or\
    \ subjectAltName extension or\n   (b) return a error indicating that the server\
    \ does not possess a\n   certificate that asserts the specified name.\n"
- title: 3.7.  requestExtensions
  contents:
  - "3.7.  requestExtensions\n   The OPTIONAL requestExtensions item contains extensions.\
    \  If present,\n   each extension in the sequence extends the request.  This\n\
    \   specification does not define any extensions; the facility is\n   provided\
    \ to allow future specifications to extend SCVP.  The syntax\n   for Extensions\
    \ is imported from [PKIX-1].  The requestExtensions\n   item, when present, MUST\
    \ contain a sequence of Extension items, and\n   each of the extensions MUST contain\
    \ extnID, critical, and extnValue\n   items.  Each of these is described in the\
    \ following sections.\n"
- title: 3.7.1.  extnID
  contents:
  - "3.7.1.  extnID\n   The extnID item is an identifier for the extension.  It contains\
    \ the\n   object identifier that names the extension.\n"
- title: 3.7.2.  critical
  contents:
  - "3.7.2.  critical\n   The critical item is a BOOLEAN.  Each extension is designated\
    \ as\n   either critical (with a value of TRUE) or non-critical (with a value\n\
    \   of FALSE).  By default, the extension is non-critical.  An SCVP\n   server\
    \ MUST reject the query if it encounters a critical extension it\n   does not\
    \ recognize.  A non-critical extension MAY be ignored if it is\n   not recognized,\
    \ but MUST be processed if it is recognized.\n"
- title: 3.7.3.  extnValue
  contents:
  - "3.7.3.  extnValue\n   The extnValue item contains an OCTET STRING.  Within the\
    \ OCTET STRING\n   is the extension value.  An ASN.1 type is specified for each\n\
    \   extension, identified by the associated extnID object identifier.\n"
- title: 3.8.  signatureAlg
  contents:
  - "3.8.  signatureAlg\n   The signatureAlg item contains an AlgorithmIdentifier\
    \ indicating\n   which algorithm the server should use to sign the response message.\n\
    \   The signatureAlg item SHOULD only be included if:\n   1. the request is either\
    \ unprotected or digitally signed (i.e., is\n      not protected using a MAC),\
    \ and\n   2. the responseFlags item is either absent or present with the\n   \
    \   protectResponse set to TRUE.\n   If included, the signatureAlg item SHOULD\
    \ specify one of the\n   signature algorithms specified in the signatureGeneration\
    \ item of the\n   server's validation policy response message.\n   SCVP servers\
    \ MUST be able to process requests that include this item.\n   If the server is\
    \ returning a digitally signed response to this\n   message, then:\n   1. If the\
    \ signatureAlg item is present and specifies an algorithm\n      that is included\
    \ in the signatureGeneration item of the server's\n      validation policy response\
    \ message, the server MUST sign the\n      response using the signature algorithm\
    \ specified in signatureAlg.\n   2. Otherwise, if the signatureAlg item is absent\
    \ or is present but\n      specifies an algorithm that is not supported by the\
    \ server, the\n      server MUST sign the response using the server's default\
    \ signature\n      algorithm as specified in the signatureGeneration item of the\n\
    \      server's validation policy response message.\n"
- title: 3.9.  hashAlg
  contents:
  - "3.9.  hashAlg\n   The hashAlg item contains an object identifier indicating which\
    \ hash\n   algorithm the server should use to compute the hash value for the\n\
    \   requestHash item in the response.  SCVP clients SHOULD NOT include\n   this\
    \ item if fullRequestInResponse is set to TRUE.  If included, the\n   hashAlg\
    \ item SHOULD specify one of the hash algorithms specified in\n   the hashAlgorithms\
    \ item of the server's validation policy response\n   message.\n   SCVP servers\
    \ MUST be able to process requests that include this item.\n   If the server is\
    \ returning a response to this message that includes a\n   requestHash, then:\n\
    \   1. If the hashAlg item is present and specifies an algorithm that is\n   \
    \   included in the hashAlgorithms item of the server's validation\n      policy\
    \ response message, the server MUST use the algorithm\n      specified in hashAlg\
    \ to compute the requestHash.\n   2. Otherwise, if the hashAlg item is absent\
    \ or is present but\n      specifies an algorithm that is not supported by the\
    \ server, the\n      server MUST compute the requestHash using the server's default\n\
    \      hash algorithm as specified in the hashAlgorithms item of the\n      server's\
    \ validation policy response message.\n"
- title: 3.10.  requestorText
  contents:
  - "3.10.  requestorText\n   SCVP clients MAY use the requestorText item to provide\
    \ text for\n   inclusion in the corresponding response.  For example, this field\
    \ may\n   describe the nature or reason for the request.\n   Conforming SCVP client\
    \ implementations MAY support inclusion of this\n   item in requests.  Conforming\
    \ SCVP server implementations MUST accept\n   requests that include this item.\
    \  When generating non-cached\n   responses, conforming SCVP server implementations\
    \ MUST copy the\n   contents of this item into the requestorText item in the\n\
    \   corresponding response (see Section 4.13).\n"
- title: 3.11.  SCVP Request Authentication
  contents:
  - "3.11.  SCVP Request Authentication\n   It is a matter of local policy what validation\
    \ policy the server uses\n   when authenticating requests.  When authenticating\
    \ protected SCVP\n   requests, the SCVP servers SHOULD use the validation algorithm\n\
    \   defined in Section 6 of [PKIX-1].\n   If the certificate used to validate\
    \ a SignedData validation request\n   includes the key usage extension ([PKIX-1],\
    \ Section 4.2.1.3), it MUST\n   have either the digital signature bit set, the\
    \ non-repudiation bit\n   set, or both bits set.\n   If the certificate used to\
    \ validate an AuthenticatedData validation\n   request includes the key usage\
    \ extension, it MUST have the key\n   agreement bit set.\n   If the certificate\
    \ used on a validation request contains the extended\n   key usage extension ([PKIX-1],\
    \ Section 4.2.1.13), the server SHALL\n   verify that it contains the SCVP client\
    \ OID, the anyExtendedKeyUsage\n   OID, or another OID acceptable to the server.\
    \  The SCVP client OID is\n   defined as follows:\n      id-kp OBJECT IDENTIFIER\
    \ ::= { iso(1) identified-organization(3)\n                dod(6) internet(1)\
    \ security(5) mechanisms(5) pkix(7) 3 }\n      id-kp-scvpClient             OBJECT\
    \ IDENTIFIER ::= { id-kp 16 }\n   If a protected request fails to meet the validation\
    \ policy of the\n   server, it MUST be treated as an unauthenticated request.\n"
- title: 4.  Validation Response
  contents:
  - "4.  Validation Response\n   An SCVP server response to the client MUST be a single\
    \ CVResponse\n   item.  When a CVResponse is encapsulated in a MIME body part,\n\
    \   application/scvp-cv-response MUST be used.\n   There are a number of forms\
    \ of an SCVP response:\n   1. A success response to a request that has protectResponse\
    \ set to\n      FALSE.  These responses SHOULD NOT be protected by the server.\n\
    \   2. The server MUST protect all other success responses.  If the\n      server\
    \ is unable to return a protected success response due to\n      local policy,\
    \ then it MUST return an error response.\n   3. An error response to a request\
    \ made over a protected transport\n      such as TLS.  These responses SHOULD\
    \ NOT be protected by the\n      server.\n   4. An error response to a request\
    \ that has protectResponse set to\n      FALSE.  These responses SHOULD NOT be\
    \ protected by the server.\n   5. An error response to an authenticated request.\
    \  The server SHOULD\n      protect these responses.\n   6. An error response\
    \ to an AuthenticatedData request where MAC is\n      valid.  The server MUST\
    \ protect these responses.\n   7. All other error responses MUST NOT be protected\
    \ by the server.\n   Successful responses are made when the server has fully complied\
    \ with\n   the request.  That is, the server was able to attempt to build a\n\
    \   certification path using the referenced or supplied validation\n   policy,\
    \ and it was able to comply with all the requested parameters.\n   If the server\
    \ is unable to perform validations using the required\n   validation policy or\
    \ the request contains an unsupported option, then\n   the server MUST return\
    \ an error response.\n   For protected requests and responses, SCVP servers MUST\
    \ support\n   SignedData and SHOULD support AuthenticatedData.  It is a matter\
    \ of\n   local policy which types are used.  Where a protected response is\n \
    \  required, SCVP servers MUST use SignedData or AuthenticatedData, even\n   if\
    \ the transaction is performed using a protected transport (e.g.,\n   TLS).\n\
    \   If the server is making a protected response to a protected request,\n   then\
    \ the server MUST use the same protection mechanism (SignedData or\n   AuthenticatedData)\
    \ as in the request.\n   An overview of the structure used for an unprotected\
    \ response is\n   provided below.  Many details are not shown, but the way that\
    \ SCVP\n   makes use of CMS is clearly illustrated.\n      ContentInfo {\n   \
    \     contentType        id-ct-scvp-certValResponse,\n                       \
    \             -- (1.2.840.113549.1.9.16.1.11)\n        content            CVResponse\
    \ }\n   The protected response consists of a CVResponse encapsulated in\n   either\
    \ a SignedData or an AuthenticatedData, which is in turn\n   encapsulated in a\
    \ ContentInfo.  That is, the EncapsulatedContentInfo\n   field of either SignedData\
    \ or AuthenticatedData consists of an\n   eContentType field with a value of id-ct-scvp-certValResponse\
    \ and an\n   eContent field that contains a DER-encoded CVResponse.\n   The SCVP\
    \ server MUST include its own certificate in the certificates\n   field within\
    \ SignedData.  Other certificates MAY also be included.\n   The SCVP server MAY\
    \ also provide one or more CRLs in the crls field\n   within SignedData.  The\
    \ signerInfos field of SignedData MUST include\n   exactly one SignerInfo.  The\
    \ SignedData MUST NOT include the\n   unsignedAttrs field.\n   The signedAttrs\
    \ field within SignerInfo MUST include the content-type\n   and message-digest\
    \ attributes defined in [CMS], and it SHOULD include\n   the signing-certificate\
    \ attribute as defined in [ESS].  Within the\n   signing-certificate attribute,\
    \ the first certificate identified in\n   the sequence of certificate identifiers\
    \ MUST be the certificate of\n   the SCVP server.  The inclusion of other certificate\
    \ identifiers in\n   the signing-certificate attribute is OPTIONAL.  The inclusion\
    \ of\n   policies in the signing-certificate is OPTIONAL.\n   The recipientInfos\
    \ field of AuthenticatedData MUST include exactly\n   one RecipientInfo, which\
    \ contains information for the client that\n   sent the request.  The AuthenticatedData\
    \ MUST NOT include the\n   unauthAttrs field.\n   The CVResponse item contains\
    \ the server's response.  The CVResponse\n   MUST contain the cvResponseVersion,\
    \ serverConfigurationID,\n   producedAt, and responseStatus items.  The CVResponse\
    \ MAY also\n   contain the respValidationPolicy, requestRef, requestorRef,\n \
    \  requestorName, replyObjects, respNonce, serverContextInfo, and\n   cvResponseExtensions\
    \ items.  The replyObjects item MUST contain\n   exactly one CertReply item for\
    \ each certificate requested.  The\n   requestorRef item MUST be included if the\
    \ request included a\n   requestorRef item and a non-cached response is provided.\
    \  The\n   respNonce item MUST be included if the request included a\n   requestNonce\
    \ item and a non-cached response is provided.\n   The CVResponse MUST have the\
    \ following syntax:\n      CVResponse ::= SEQUENCE {\n        cvResponseVersion\
    \         INTEGER,\n        serverConfigurationID     INTEGER,\n        producedAt\
    \                GeneralizedTime,\n        responseStatus            ResponseStatus,\n\
    \        respValidationPolicy  [0] RespValidationPolicy OPTIONAL,\n        requestRef\
    \            [1] RequestReference OPTIONAL,\n        requestorRef          [2]\
    \ GeneralNames OPTIONAL,\n        requestorName         [3] GeneralNames OPTIONAL,\n\
    \        replyObjects          [4] ReplyObjects OPTIONAL,\n        respNonce \
    \            [5] OCTET STRING OPTIONAL,\n        serverContextInfo     [6] OCTET\
    \ STRING OPTIONAL,\n        cvResponseExtensions  [7] Extensions OPTIONAL,\n \
    \       requestorText         [8] UTF8String (SIZE (1..256)) OPTIONAL }\n   Conforming\
    \ SCVP servers MAY be capable of constructing a CVResponse\n   that includes the\
    \ serverContextInfo or cvResponseExtensions items.\n   Conforming SCVP servers\
    \ MUST be capable of constructing a CVResponse\n   with any of the remaining optional\
    \ items.  Conforming SCVP clients\n   MUST be capable of processing a CVResponse\
    \ with the following\n   optional items: respValidationPolicy, requestRef, requestorName,\n\
    \   replyObjects, and respNonce.\n   Conforming SCVP clients that are capable\
    \ of including requestorRef in\n   a request MUST be capable of processing a CVResponse\
    \ that includes\n   the requestorRef item.  Conforming SCVP clients MUST be capable\
    \ of\n   processing a CVResponse that includes the serverContextInfo or\n   cvResponseExtensions\
    \ items.  Conforming clients MUST be able to\n   determine if critical extensions\
    \ are present in the\n   cvResponseExtensions item.\n"
- title: 4.1.  cvResponseVersion
  contents:
  - "4.1.  cvResponseVersion\n   The syntax and semantics of cvResponseVersion are\
    \ the same as\n   cvRequestVersion as described in Section 3.1.  The cvResponseVersion\n\
    \   MUST match the cvRequestVersion in the request.  If the server cannot\n  \
    \ generate a response with a matching version number, then the server\n   MUST\
    \ return an error response that indicates the highest version\n   number that\
    \ the server supports as the version number.\n"
- title: 4.2.  serverConfigurationID
  contents:
  - "4.2.  serverConfigurationID\n   The server configuration ID item represents the\
    \ version of the SCVP\n   server configuration when it processed the request.\
    \  See Section 6.4\n   for details.\n"
- title: 4.3.  producedAt
  contents:
  - "4.3.  producedAt\n   The producedAt item tells the date and time at which the\
    \ SCVP server\n   generated the response.  The producedAt item MUST be expressed\
    \ in\n   UTC, and it MUST be interpreted as defined in Section 3.2.7.  This\n\
    \   value is independent of the validation time.\n"
- title: 4.4.  responseStatus
  contents:
  - "4.4.  responseStatus\n   The responseStatus item gives status information to\
    \ the SCVP client\n   about its request.  The responseStatus item has a numeric\
    \ status code\n   and an optional string that is a sequence of characters from\
    \ the\n   ISO/IEC 10646-1 character set encoded with the UTF-8 transformation\n\
    \   format defined in [UTF8].\n   The string MAY be used to transmit status information.\
    \  The client\n   MAY choose to display the string to a human user.  However,\
    \ because\n   there is often no way to know the languages understood by a human\n\
    \   user, the string may be of little or no assistance.\n   The responseStatus\
    \ item uses the ResponseStatus type, which has the\n   following syntax:\n   \
    \   ResponseStatus ::= SEQUENCE {\n        statusCode            CVStatusCode\
    \ DEFAULT  okay,\n        errorMessage          UTF8String OPTIONAL }\n      CVStatusCode\
    \ ::= ENUMERATED {\n        okay                               (0),\n        skipUnrecognizedItems\
    \              (1),\n        tooBusy                           (10),\n       \
    \ invalidRequest                    (11),\n        internalError             \
    \        (12),\n        badStructure                      (20),\n        unsupportedVersion\
    \                (21),\n        abortUnrecognizedItems            (22),\n    \
    \    unrecognizedSigKey                (23),\n        badSignatureOrMAC      \
    \           (24),\n        unableToDecode                    (25),\n        notAuthorized\
    \                     (26),\n        unsupportedChecks                 (27),\n\
    \        unsupportedWantBacks              (28),\n        unsupportedSignatureOrMAC\
    \         (29),\n        invalidSignatureOrMAC             (30),\n        protectedResponseUnsupported\
    \      (31),\n        unrecognizedResponderName         (32),\n        relayingLoop\
    \                      (40),\n        unrecognizedValPol                (50),\n\
    \        unrecognizedValAlg                (51),\n        fullRequestInResponseUnsupported\
    \  (52),\n        fullPolResponseUnsupported        (53),\n        inhibitPolicyMappingUnsupported\
    \   (54),\n        requireExplicitPolicyUnsupported  (55),\n        inhibitAnyPolicyUnsupported\
    \       (56),\n        validationTimeUnsupported         (57),\n        unrecognizedCritQueryExt\
    \          (63),\n        unrecognizedCritRequestExt        (64) }\n   The CVStatusCode\
    \ values have the following meaning:\n    0 The request was fully processed.\n\
    \    1 The request included some unrecognized non-critical extensions;\n     \
    \ however, processing was able to continue ignoring them.\n   10 Too busy; try\
    \ again later.\n   11 The server was able to decode the request, but there was\
    \ some\n      other problem with the request.\n   12 An internal server error\
    \ occurred.\n   20 The structure of the request was wrong.\n   21 The version\
    \ of request is not supported by this server.\n   22 The request included unrecognized\
    \ items, and the server was not\n      able to continue processing.\n   23 The\
    \ server could not validate the key used to protect the\n      request.\n   24\
    \ The signature or message authentication code did not match the\n      body of\
    \ the request.\n   25 The encoding was not understood.\n   26 The request was\
    \ not authorized.\n   27 The request included unsupported checks items, and the\
    \ server was\n      not able to continue processing.\n   28 The request included\
    \ unsupported wantBack items, and the server\n      was not able to continue processing.\n\
    \   29 The server does not support the signature or message\n      authentication\
    \ code algorithm used by the client to protect the\n      request.\n   30 The\
    \ server could not validate the client's signature or message\n      authentication\
    \ code on the request.\n   31 The server could not generate a protected response\
    \ as requested\n      by the client.\n   32 The server does not have a certificate\
    \ matching the requested\n      responder name.\n   40 The request was previously\
    \ relayed by the same server.\n   50 The request contained an unrecognized validation\
    \ policy\n      reference.\n   51 The request contained an unrecognized validation\
    \ algorithm OID.\n   52 The server does not support returning the full request\
    \ in the\n      response.\n   53 The server does not support returning the full\
    \ validation policy\n      by value in the response.\n   54 The server does not\
    \ support the requested value for inhibit\n      policy mapping.\n   55 The server\
    \ does not support the requested value for require\n      explicit policy.\n \
    \  56 The server does not support the requested value for inhibit\n      anyPolicy.\n\
    \   57 The server only validates requests using current time.\n   63 The query\
    \ item in the request contains a critical extension whose\n      OID is not recognized.\n\
    \   64 The request contains a critical request extension whose OID is\n      not\
    \ recognized.\n   Status codes 0-9 are reserved for codes that indicate the request\
    \ was\n   processed by the server and therefore MUST be sent in a success\n  \
    \ response.  Status codes 10 and above indicate an error and MUST\n   therefore\
    \ be sent in an error response.\n"
- title: 4.5.  respValidationPolicy
  contents:
  - "4.5.  respValidationPolicy\n   The respValidationPolicy item contains either\
    \ a reference to the full\n   validation policy or the full policy by value used\
    \ by the server to\n   validate the request.  It MUST be present in success responses\
    \ and\n   MUST NOT be present in error responses.  The choice between returning\n\
    \   the policy by reference or by value is controlled by the\n   responseValidationPolByRef\
    \ item in the request.  The resultant\n   validation policy is the union of the\
    \ following:\n   1. Values from the request.\n   2. For values that are not explicitly\
    \ included in the request, values\n      from the validation policy specified\
    \ by reference in the request.\n   The RespValidationPolicy syntax is:\n     \
    \ RespValidationPolicy ::= ValidationPolicy\n   The validationPolicy item is defined\
    \ in Section 3.2.4.  When\n   responseValidationPolByRef is set to FALSE in the\
    \ request, all items\n   in the validationPolicy item MUST be populated.  When\n\
    \   responseValidationPolByRef is set to TRUE, OPTIONAL items in the\n   validationPolicy\
    \ item only need to be populated for items for which\n   the value in the request\
    \ differs from the value from the referenced\n   validation policy.\n   Conforming\
    \ SCVP clients MUST be capable of processing the validation\n   policy by reference.\
    \  SCVP clients MAY be capable of processing the\n   optional items in the validation\
    \ policy.\n   Conforming SCVP server implementations MUST be capable of asserting\n\
    \   the policy by reference, and MUST be capable of including the\n   optional\
    \ items.\n"
- title: 4.6.  requestRef
  contents:
  - "4.6.  requestRef\n   The requestRef item allows the SCVP client to identify the\
    \ request\n   that corresponds to this response from the server.  It associates\
    \ the\n   response to a particular request using either a hash of the request\n\
    \   or a copy of CVRequest from the request.\n   The requestRef item does not\
    \ provide authentication, but does allow\n   the client to determine that the\
    \ request was not maliciously\n   modified.\n   The requestRef item allows the\
    \ client to associate a response with a\n   request.  The requestNonce provides\
    \ an alternative mechanism for\n   matching requests and responses.  When the\
    \ fullRequest alternative is\n   used, the response provides a single data structure\
    \ that is suitable\n   for archive of the transaction.\n   The requestRef item\
    \ uses the RequestReference type, which has the\n   following syntax:\n      RequestReference\
    \ ::= CHOICE {\n        requestHash       [0] HashValue, -- hash of CVRequest\n\
    \        fullRequest       [1] CVRequest }\n   SCVP clients MUST support requestHash,\
    \ and they MAY support\n   fullRequest.  SCVP servers MUST support using requestHash,\
    \ and they\n   SHOULD support using fullRequest.\n"
- title: 4.6.1.  requestHash
  contents:
  - "4.6.1.  requestHash\n   The requestHash item is the hash of the CVRequest.  The\
    \ one-way hash\n   function used to compute the hash of the CVRequest is as specified\
    \ in\n   Section 3.9.  The requestHash item serves two purposes.  First, it\n\
    \   allows a client to determine that the request was not maliciously\n   modified.\
    \  Second, it allows the client to associate a response with\n   a request when\
    \ using connectionless protocols.  The requestNonce\n   provides an alternative\
    \ mechanism for matching requests and\n   responses.\n   The requestHash item\
    \ uses the HashValue type, which has the following\n   syntax:\n      HashValue\
    \ ::= SEQUENCE {\n        algorithm       AlgorithmIdentifier DEFAULT { algorithm\
    \ sha-1 },\n        value           OCTET STRING }\n      sha-1 OBJECT IDENTIFIER\
    \ ::= { iso(1) identified-organization(3)\n          oiw(14) secsig(3) algorithm(2)\
    \ 26 }\n   The algorithm identifier for SHA-1 is imported from [PKIX-ALG].  It\n\
    \   is repeated here for convenience.\n"
- title: 4.6.2.  fullRequest
  contents:
  - "4.6.2.  fullRequest\n   Like requestHash, the fullRequest alternative allows\
    \ a client to\n   determine that the request was not maliciously modified.  It\
    \ also\n   provides a single data structure that is suitable for archive of the\n\
    \   transaction.\n   The fullRequest item uses the CVRequest type.  The syntax\
    \ and\n   semantics of the CVRequest type are described in Section 3.\n"
- title: 4.7.  requestorRef
  contents:
  - "4.7.  requestorRef\n   The optional requestorRef item is used by the client to\
    \ identify the\n   original requestor in cases where SCVP relay is used.  The\
    \ value is\n   only of local significance to the client.  If the SCVP client\n\
    \   includes a requestorRef value in the request, then the SCVP server\n   MUST\
    \ return the same value if the server is generating a non-cached\n   response.\n"
- title: 4.8.  requestorName
  contents:
  - "4.8.  requestorName\n   The optional requestorName item is used by the server\
    \ to return one\n   or more identities associated with the client in the response.\n\
    \   The SCVP server MAY choose to include any or all of the following:\n   (1)\
    \ the identity asserted by the client in the requestorName item of\n      the\
    \ request,\n   (2) an authenticated identity for the client from a certificate\
    \ or\n      other credential used to authenticate the request, or\n   (3) a client\
    \ identifier from an out-of-band mechanism.\n   Alternatively, the SCVP server\
    \ MAY omit this item.\n   In the case of non-cached responses to authenticated\
    \ requests, the\n   SCVP server SHOULD return a requestor name.\n   SCVP servers\
    \ that support authenticated requests SHOULD support this\n   item.\n   SCVP clients\
    \ MUST be able to process responses that include this\n   item, although the item\
    \ value might not impact the processing in any\n   manner.\n"
- title: 4.9.  replyObjects
  contents:
  - "4.9.  replyObjects\n   The replyObjects item returns requested objects to the\
    \ SCVP client,\n   each of which tells the client about a single certificate from\
    \ the\n   request.  The replyObjects item MUST be present in the response,\n \
    \  unless the response is reporting an error.  The CertReply item MUST\n   contain\
    \ cert, replyStatus, replyValTime, replyChecks, and\n   replyWantBacks items,\
    \ and the CertReply item MAY contain the\n   validationErrors, nextUpdate, and\
    \ certReplyExtensions items.\n   A success response MUST contain one CertReply\
    \ for each certificate\n   specified in the queriedCerts item in the request.\
    \  The order is\n   important.  The first CertReply in the sequence MUST correspond\
    \ to\n   the first certificate in the request, the second CertReply in the\n \
    \  sequence MUST correspond to the second certificate in the request,\n   and\
    \ so on.\n   The checks item in the request determines the content of the\n  \
    \ replyChecks item in the response.  The wantBack item in the request\n   determines\
    \ the content of the replyWantBacks item in the response.\n   The queryExtensions\
    \ items in the request controls the absence or the\n   presence and content of\
    \ the certReplyExtensions item in the response.\n   The replyObjects item uses\
    \ the ReplyObjects type, which has the\n   following syntax:\n      ReplyObjects\
    \ ::= SEQUENCE SIZE (1..MAX) OF CertReply\n      CertReply ::= SEQUENCE {\n  \
    \      cert                       CertReference,\n        replyStatus        \
    \        ReplyStatus DEFAULT success,\n        replyValTime               GeneralizedTime,\n\
    \        replyChecks                ReplyChecks,\n        replyWantBacks     \
    \        ReplyWantBacks,\n        validationErrors       [0] SEQUENCE SIZE (1..MAX)\
    \ OF\n                                     OBJECT IDENTIFIER OPTIONAL,\n     \
    \   nextUpdate             [1] GeneralizedTime OPTIONAL,\n        certReplyExtensions\
    \    [2] Extensions OPTIONAL }\n"
- title: 4.9.1.  cert
  contents:
  - "4.9.1.  cert\n   The cert item contains either the certificate or a reference\
    \ to the\n   certificate about which the client is requesting information.  If\
    \ the\n   certificate was specified by reference in the request, the request\n\
    \   included either the id-swb-pkc-cert or id-swb-aa-cert wantBack, and\n   the\
    \ server was able to obtain the referenced certificate, then this\n   item MUST\
    \ include the certificate.  Otherwise, this item MUST include\n   the same value\
    \ as was used in the queriedCerts item in the request.\n   CertReference has the\
    \ following syntax:\n      CertReference ::= CHOICE {\n        pkc           \
    \        PKCReference,\n        ac                    ACReference }\n"
- title: 4.9.2.  replyStatus
  contents:
  - "4.9.2.  replyStatus\n   The replyStatus item gives status information to the\
    \ client about the\n   request for the specific certificate.  Note that the responseStatus\n\
    \   item is different from the replyStatus item.  The responseStatus item\n  \
    \ is the status of the whole request, while the replyStatus item is the\n   status\
    \ for the individual query item.\n   The replyStatus item uses the ReplyStatus\
    \ type, which has the\n   following syntax:\n      ReplyStatus ::= ENUMERATED\
    \ {\n          success                    (0),\n          malformedPKC       \
    \        (1),\n          malformedAC                (2),\n          unavailableValidationTime\
    \  (3),\n          referenceCertHashFail      (4),\n          certPathConstructFail\
    \      (5),\n          certPathNotValid           (6),\n          certPathNotValidNow\
    \        (7),\n          wantBackUnsatisfied        (8) }\n   The meanings of\
    \ the various ReplyStatus values are:\n   0 Success: all checks were performed\
    \ successfully.\n   1 Failure: the public key certificate was malformed.\n   2\
    \ Failure: the attribute certificate was malformed.\n   3 Failure: historical\
    \ data for the requested validation time is not\n      available.\n   4 Failure:\
    \ the server could not locate the reference certificate or\n      the referenced\
    \ certificate did not match the hash value provided.\n   5 Failure: no certification\
    \ path could be constructed.\n   6 Failure: the constructed certification path\
    \ is not valid with\n      respect to the validation policy.\n   7 Failure: the\
    \ constructed certification path is not valid with\n      respect to the validation\
    \ policy, but a query at a later time may\n      be successful.\n   8 Failure:\
    \ all checks were performed successfully; however, one or\n      more of the wantBacks\
    \ could not be satisfied.\n   Codes 1 and 2 are used to tell the client that the\
    \ request was\n   properly formed, but the certificate in question was not.  This\
    \ is\n   especially useful to clients that do not parse certificates.\n   Code\
    \ 7 is used to tell the client that a valid certification path was\n   found with\
    \ the exception that a certificate in the path is on hold,\n   current revocation\
    \ information is unavailable, or the validation time\n   precedes the notBefore\
    \ time in one or more certificates in the path.\n   For codes 1, 2, 3, and 4,\
    \ the replyChecks and replyWantBacks items\n   are not populated (i.e., they MUST\
    \ be an empty sequence).  For codes\n   5, 6, 7, and 8, replyChecks MUST include\
    \ an entry corresponding to\n   each check in the request; the replyWantBacks\
    \ item is not populated.\n"
- title: 4.9.3.  replyValTime
  contents:
  - "4.9.3.  replyValTime\n   The replyValTime item tells the time at which the information\
    \ in the\n   CertReply was correct.  The replyValTime item represents the date\
    \ and\n   time in UTC, using GeneralizedTime type.  The encoding rules for\n \
    \  GeneralizedTime in Section 3.2.7 MUST be used.\n   Within the request, the\
    \ optional validationTime item tells the date\n   and time relative to which the\
    \ SCVP client wants the server to\n   perform the checks.  If the validationTime\
    \ is not present, the server\n   MUST respond as if the client provided the date\
    \ and time at which the\n   server processes the request.\n   The information\
    \ in the CertReply item MUST be formatted as if the\n   server created this portion\
    \ of the response at the time indicated in\n   the validationTime item of the\
    \ query.  However, if the server does\n   not have appropriate historical information,\
    \ the server MAY either\n   return an error or return information for a later\
    \ time.\n"
- title: 4.9.4.  replyChecks
  contents:
  - "4.9.4.  replyChecks\n   The replyChecks item contains the responses to the checks\
    \ item in the\n   query.  The replyChecks item includes the object identifier\
    \ (OID)\n   from the query and an integer.  The value of the integer indicates\n\
    \   whether the requested check was successful.  The OIDs in the checks\n   item\
    \ of the query are used to identify the corresponding replyChecks\n   values.\
    \  Each OID specified in the checks item in the request MUST be\n   matched by\
    \ an OID in the replyChecks item of the response.  In the\n   case of an error\
    \ response, the server MAY include additional checks\n   in the response to further\
    \ explain the error.  Clients MUST ignore\n   any unrecognized ReplyCheck included\
    \ in the response.\n   The replyChecks item uses the ReplyChecks type, which has\
    \ the\n   following syntax:\n      ReplyChecks ::= SEQUENCE OF ReplyCheck\n  \
    \    ReplyCheck ::= SEQUENCE {\n        check                      OBJECT IDENTIFIER,\n\
    \        status                     INTEGER DEFAULT 0 }\n   The status value for\
    \ public key certification path building to a\n   trusted root, { id-stc 1 },\
    \ can be one of the following:\n      0: Built a path\n      1: Could not build\
    \ a path\n   The status value for public key certification path building to a\n\
    \   trusted root along with simple validation processing, { id-stc 2 },\n   can\
    \ be one of the following:\n      0: Valid\n      1: Not valid\n   The status\
    \ value for public key certification path building to a\n   trusted root along\
    \ with complete status checking, { id-stc 3 }, can\n   be one of the following:\n\
    \      0: Valid\n      1: Not valid\n      2: Revocation off-line\n      3: Revocation\
    \ unavailable\n      4: No known source for revocation information\n   Revocation\
    \ off-line means that the server or distribution point for\n   the revocation\
    \ information was connected to successfully without a\n   network error but either\
    \ no data was returned or if data was returned\n   it was stale.  Revocation unavailable\
    \ means that a network error was\n   returned when an attempt was made to reach\
    \ the server or distribution\n   point.  No known source for revocation information\
    \ means that the\n   server was able to build a valid certification path but was\
    \ unable to\n   locate a source for revocation information for one or more\n \
    \  certificates in the path.\n   The status value for AC issuer certification\
    \ path building to a\n   trusted root, { id-stc 4 }, can be one of the following:\n\
    \      0: Built a path\n      1: Could not build a path\n   The status value for\
    \ AC issuer certification path building to a\n   trusted root along with simple\
    \ validation processing, { id-stc 5 },\n   can be one of the following:\n    \
    \  0: Valid\n      1: Not valid\n   The status value for AC issuer certification\
    \ path building to a\n   trusted root along with complete status checking, { id-stc\
    \ 6 }, can\n   be one of the following:\n      0: Valid\n      1: Not valid\n\
    \      2: Revocation off-line\n      3: Revocation unavailable\n      4: No known\
    \ source for revocation information\n   The status value for revocation status\
    \ checking of an AC as well as\n   AC issuer certification path building to a\
    \ trusted root along with\n   complete status checking, { id-stc 7 }, can be one\
    \ of the following:\n      0: Valid\n      1: Not valid\n      2: Revocation off-line\n\
    \      3: Revocation unavailable\n      4: No known source for revocation information\n"
- title: 4.9.5.  replyWantBacks
  contents:
  - "4.9.5.  replyWantBacks\n   The replyWantBacks item contains the responses to\
    \ the wantBack item\n   in the request.  The replyWantBacks item includes the\
    \ object\n   identifier (OID) from the wantBack item in the request and an OCTET\n\
    \   STRING.  Within the OCTET STRING is the requested value.  The OIDs in\n  \
    \ the wantBack item in the request are used to identify the\n   corresponding\
    \ reply value.  The OIDs in the replyWantBacks item MUST\n   match the OIDs in\
    \ the wantBack item in the request.  For a non-error\n   response, replyWantBacks\
    \ MUST include exactly one ReplyWantBack for\n   each wantBack specified in the\
    \ request (excluding id-swb-pkc-cert and\n   id-swb-ac-cert, where the requested\
    \ information is included in the\n   cert item).\n   The replyWantBacks item uses\
    \ the ReplyWantBacks type, which has the\n   following syntax:\n      ReplyWantBacks\
    \ ::= SEQUENCE OF ReplyWantBack\n      ReplyWantBack::= SEQUENCE {\n        wb\
    \                         OBJECT IDENTIFIER,\n        value                  \
    \    OCTET STRING }\n   The OCTET STRING value for the certification path used\
    \ to verify the\n   certificate in the request, { id-swb 1 }, contains the CertBundle\n\
    \   type.  The syntax and semantics of the CertBundle type are described\n   in\
    \ Section 3.2.8.  This CertBundle includes all the certificates in\n   the path,\
    \ starting with the end certificate and ending with the\n   certificate issued\
    \ by the trust anchor.\n   The OCTET STRING value for the proof of revocation\
    \ status,\n   { id-swb 2 }, contains the RevInfoWantBack type.  The RevInfoWantBack\n\
    \   type is a SEQUENCE of the RevocationInfos type and an optional\n   CertBundle.\
    \  The syntax and semantics of the RevocationInfos type are\n   described in Section\
    \ 3.2.9.  The CertBundle MUST be included if any\n   certificates required to\
    \ validate the revocation information were not\n   returned in the id-swb-pkc-best-cert-path\
    \ or\n   id-swb-pkc-all-cert-paths wantBack.  The CertBundle MUST include all\n\
    \   such certificates, but there are no ordering requirements.\n      RevInfoWantBack\
    \ ::= SEQUENCE {\n        revocationInfo             RevocationInfos,\n      \
    \  extraCerts                 CertBundle OPTIONAL }\n   The OCTET STRING value\
    \ for the public key information, { id-swb 4 },\n   contains the SubjectPublicKeyInfo\
    \ type.  The syntax and semantics of\n   the SubjectPublicKeyInfo type are described\
    \ in [PKIX-1].\n   The OCTET STRING value for the AC issuer certification path\
    \ used to\n   verify the certificate in the request, { id-swb 5 }, contains the\n\
    \   CertBundle type.  The syntax and semantics of the CertBundle type are\n  \
    \ described in Section 3.2.8.  This CertBundle includes all the\n   certificates\
    \ in the path, beginning with the AC issuer certificate\n   and ending with the\
    \ certificate issued by the trust anchor.\n   The OCTET STRING value for the proof\
    \ of revocation status of the AC\n   issuer certification path, { id-swb 6 },\
    \ contains the RevInfoWantBack\n   type.  The RevInfoWantBack type is a SEQUENCE\
    \ of the RevocationInfos\n   type and an optional CertBundle.  The syntax and\
    \ semantics of the\n   RevocationInfos type are described in Section 3.2.9.  The\
    \ CertBundle\n   MUST be included if any certificates required to validate the\n\
    \   revocation information were not returned in the id-aa-cert-path\n   wantBack.\
    \  The CertBundle MUST include all such certificates, but\n   there are no ordering\
    \ requirements.\n   The OCTET STRING value for the proof of revocation status\
    \ of the\n   attribute certificate, { id-swb 7 }, contains the RevInfoWantBack\n\
    \   type.  The RevInfoWantBack type is a SEQUENCE of the RevocationInfos\n   type\
    \ and an optional CertBundle.  The syntax and semantics of the\n   RevocationInfos\
    \ type are described in Section 3.2.9.  The CertBundle\n   MUST be included if\
    \ any certificates required to validate the\n   revocation information were not\
    \ returned in the id-swb-aa-cert-path\n   wantBack.  The CertBundle MUST include\
    \ all such certificates, but\n   there are no ordering requirements.\n   The OCTET\
    \ STRING value for returning all paths, { id-swb 12 },\n   contains an ASN.1 type\
    \ CertBundles, as defined below.  The syntax and\n   semantics of the CertBundle\
    \ type are described in Section 3.2.8.\n   Each CertBundle includes all the certificates\
    \ in one path, starting\n   with the end certificate and ending with the certificate\
    \ issued by\n   the trust anchor.\n      CertBundles ::= SEQUENCE SIZE (1..MAX)\
    \ OF CertBundle\n   The OCTET STRING value for relayed responses, { id-swb 9 },\
    \ contains\n   an ASN.1 type SCVPResponses, as defined below.  If the SCVP server\n\
    \   used information obtained from other SCVP servers when generating\n   this\
    \ response, then SCVPResponses MUST include each of the SCVP\n   responses received\
    \ from those servers.  If the SCVP server did not\n   use information obtained\
    \ from other SCVP servers when generating the\n   response, then SCVPResponses\
    \ MUST be an empty sequence.\n      SCVPResponses ::= SEQUENCE OF ContentInfo\n\
    \   The OCTET STRING value for the proof of revocation status of the\n   path's\
    \ target certificate, { id-swb-13 }, contains the\n   RevInfoWantBack type.  The\
    \ RevInfoWantBack type is a SEQUENCE of the\n   RevocationInfos type and an optional\
    \ CertBundle.  The syntax and\n   semantics of the RevocationInfos type are described\
    \ in Section 3.2.9.\n   The CertBundle MUST be included if any certificates required\
    \ to\n   validate the revocation information were not returned in the id-swb-\n\
    \   pkc-best-cert-path or id-swb-pkc-all-cert-paths wantBack.  The\n   CertBundle\
    \ MUST include all such certificates, but there are no\n   ordering requirements.\n\
    \   The OCTET STRING value for the proof of revocation status of the\n   intermediate\
    \ certificates in the path, { id-swb 14 }, contains the\n   RevInfoWantBack type.\
    \  The RevInfoWantBack type is a SEQUENCE of the\n   RevocationInfos type and\
    \ an optional CertBundle.  The syntax and\n   semantics of the RevocationInfos\
    \ type are described in Section 3.2.9.\n   The CertBundle MUST be included if\
    \ any certificates required to\n   validate the revocation information were not\
    \ returned in the id-swb-\n   pkc-best-cert-path or id-swb-pkc-all-cert-paths\
    \ wantBack.  The\n   CertBundle MUST include all such certificates, but there\
    \ are no\n   ordering requirements.\n"
- title: 4.9.6.  validationErrors
  contents:
  - "4.9.6.  validationErrors\n   The validationErrors item MUST only be present in\
    \ failure responses.\n   If present, it MUST contain one or more OIDs representing\
    \ the reason\n   the validation failed (validation errors for the basic validation\n\
    \   algorithm and name validation algorithm are defined in Sections\n   3.2.4.2.2\
    \ and 3.2.4.2.4).  The validationErrors item SHOULD only be\n   included when\
    \ the replyStatus is 3, 5, 6, 7, or 8.  SCVP servers are\n   not required to specify\
    \ all of the reasons that validation failed.\n   SCVP clients MUST NOT assume\
    \ that the OIDs included in\n   validationErrors represent all of the validation\
    \ errors for the\n   certification path.\n"
- title: 4.9.7.  nextUpdate
  contents:
  - "4.9.7.  nextUpdate\n   The nextUpdate item tells the time at which the server\
    \ expects a\n   refresh of information regarding the validity of the certificate\
    \ to\n   become available.  The nextUpdate item is especially interesting if\n\
    \   the certificate revocation status information is not available or the\n  \
    \ certificate is suspended.  The nextUpdate item represents the date\n   and time\
    \ in UTC, using the GeneralizedTime type.  The encoding rules\n   for GeneralizedTime\
    \ in Section 3.2.7 MUST be used.\n"
- title: 4.9.8.  certReplyExtensions
  contents:
  - "4.9.8.  certReplyExtensions\n   The certReplyExtensions item contains the responses\
    \ to the\n   queryExtensions item in the request.  The certReplyExtensions item\n\
    \   uses the Extensions type defined in [PKIX-1].  The object identifiers\n  \
    \ (OIDs) in the queryExtensions item in the request are used to\n   identify the\
    \ corresponding reply values.  The certReplyExtensions\n   item, when present,\
    \ contains a sequence of Extension items, each of\n   which contains an extnID\
    \ item, a critical item, and an extnValue\n   item.\n   The extnID item is an\
    \ identifier for the extension.  It contains the\n   OID that names the extension,\
    \ and it MUST match one of the OIDs in\n   the queryExtensions item in the request.\n\
    \   The critical item is a BOOLEAN, and it MUST be set to FALSE.\n   The extnValue\
    \ item contains an OCTET STRING.  Within the OCTET STRING\n   is the extension\
    \ value.  An ASN.1 type is specified for each\n   extension, identified by the\
    \ associated extnID object identifier.\n"
- title: 4.10.  respNonce
  contents:
  - "4.10.  respNonce\n   The respNonce item contains an identifier to bind the request\
    \ to the\n   response.\n   If the client includes a requestNonce value in the\
    \ request and the\n   server is generating a specific non-cached response to the\
    \ request\n   then the server MUST return the same value in the response.\n  \
    \ If the server is using a cached response to the request then it MUST\n   omit\
    \ the respNonce item.\n   If the server is returning a specific non-cached response\
    \ to a\n   request without a nonce, then the server MAY include a message-\n \
    \  specific nonce.  For digitally signed messages, the server MAY use\n   the\
    \ value of the message-digest attribute in the signedAttrs within\n   SignerInfo\
    \ of the request as the value in the respNonce item.\n   The requestNonce item\
    \ uses the OCTET STRING type.\n   Conforming client implementations MUST be able\
    \ to process a response\n   that includes this item.  Conforming servers MUST\
    \ support respNonce.\n"
- title: 4.11.  serverContextInfo
  contents:
  - "4.11.  serverContextInfo\n   The serverContextInfo item in a response is a mechanism\
    \ for the\n   server to pass some opaque context information to the client.  If\
    \ the\n   client does not like the certification path returned, it can make a\n\
    \   new query and pass along this context information.\n   Section 3.2.6 contains\
    \ information about the client's usage of this\n   item.\n   The context information\
    \ is opaque to the client, but it provides\n   information to the server that\
    \ ensures that a different certification\n   path will be returned (if another\
    \ one can be found).  The context\n   information could indicate the state of\
    \ the server, or it could\n   contain a sequence of hashes of certification paths\
    \ that have already\n   been returned to the client.  The protocol does not dictate\
    \ any\n   structure or requirements for this item.  However, implementers\n  \
    \ should review the Security Considerations section of this document\n   before\
    \ selecting a structure.\n   Servers that are incapable of returning additional\
    \ paths MUST NOT\n   include the serverContextInfo item in the response.\n"
- title: 4.12.  cvResponseExtensions
  contents:
  - "4.12.  cvResponseExtensions\n   If present, the cvResponseExtensions item contains\
    \ a sequence of\n   extensions that extend the response.  This specification does\
    \ not\n   define any extensions.  The facility is provided to allow future\n \
    \  specifications to extend SCVP.  The syntax for Extensions is imported\n   from\
    \ [PKIX-1].  The cvResponseExtensions item, when present, contains\n   a sequence\
    \ of Extension items, each of which contains an extnID item,\n   a critical item,\
    \ and an extnValue item.\n   The extnID item is an identifier for the extension.\
    \  It contains the\n   object identifier (OID) that names the extension.\n   The\
    \ critical item is a BOOLEAN.  Each extension is designated as\n   either critical\
    \ (with a value of TRUE) or non-critical (with a value\n   of FALSE).  An SCVP\
    \ client MUST reject the response if it encounters\n   a critical extension it\
    \ does not recognize; however, a non-critical\n   extension MAY be ignored if\
    \ it is not recognized.\n   The extnValue item contains an OCTET STRING.  Within\
    \ the OCTET STRING\n   is the extension value.  An ASN.1 type is specified for\
    \ each\n   extension, identified by the associated extnID object identifier.\n"
- title: 4.13.  requestorText
  contents:
  - "4.13.  requestorText\n   The requestorText item contains a text field supplied\
    \ by the client.\n   If the client includes a requestorText value in the request\
    \ and the\n   server is generating a specific non-cached response to the request,\n\
    \   then the server MUST return the same value in the response.\n   If the server\
    \ is using a cached response to the request, then it MUST\n   omit the requestorText\
    \ item.\n   The requestNonce item uses the UTF8 string type.\n   Conforming client\
    \ implementations that support the requestorText item\n   in requests (see Section\
    \ 3.10) MUST be able to process a response\n   that includes this item.  Conforming\
    \ servers MUST support\n   requestorText in responses.\n"
- title: 4.14.  SCVP Response Validation
  contents:
  - "4.14.  SCVP Response Validation\n   There are two mechanisms for validation of\
    \ SCVP responses, one based\n   on the client's knowledge of a specific SCVP server\
    \ key and the other\n   based on validation of the certificate corresponding to\
    \ the private\n   key used to protect the SCVP response.\n"
- title: 4.14.1.  Simple Key Validation
  contents:
  - "4.14.1.  Simple Key Validation\n   The simple key validation method is where\
    \ the SCVP client has a local\n   policy of one or more SCVP server keys that\
    \ directly identify the set\n   of valid SCVP servers.  Mechanisms for storage\
    \ of server keys or\n   identifiers are a local matter.  For example, a client\
    \ could store\n   cryptographic hashes of public keys used to verify SignedData\n\
    \   responses.  Alternatively, a client could store shared symmetric keys\n  \
    \ used to verify MACs in AuthenticatedData responses.\n   Simple key validation\
    \ MUST be used by SCVP clients that cannot\n   validate PKIX-1 certificates and\
    \ are therefore making delegated path\n   validation requests to the SCVP server\
    \ [RQMTS].  It is a matter of\n   local policy with these clients whether to use\
    \ SignedData or\n   AuthenticatedData.  Simple key validation MAY be used by other\
    \ SCVP\n   clients for other reasons.\n"
- title: 4.14.2.  SCVP Server Certificate Validation
  contents:
  - "4.14.2.  SCVP Server Certificate Validation\n   It is a matter of local policy\
    \ what validation policy the client uses\n   when validating responses.  When\
    \ validating protected SCVP responses,\n   SCVP clients SHOULD use the validation\
    \ algorithm defined in Section 6\n   of [PKIX-1].  SCVP clients may impose additional\
    \ limitations on the\n   algorithm, such as limiting the number of certificates\
    \ in the path or\n   establishing initial name constraints, as specified in Section\
    \ 6.2 of\n   [PKIX-1].\n   If the certificate used to sign the validation policy\
    \ responses and\n   SignedData validation responses contains the key usage extension\n\
    \   ([PKIX-1], Section 4.2.1.3), it MUST have either the digital\n   signature\
    \ bit set, the non-repudiation bit set, or both bits set.\n   If the certificate\
    \ for AuthenticatedData validation responses\n   contains the key usage extension,\
    \ it MUST have the key agreement bit\n   set.\n   If the certificate used on a\
    \ validation policy response or a\n   validation response contains the extended\
    \ key usage extension\n   ([PKIX-1], Section 4.2.1.13), it MUST contain either\
    \ the\n   anyExtendedKeyUsage OID or the following OID:\n      id-kp-scvpServer\
    \             OBJECT IDENTIFIER ::= { id-kp 15 }\n"
- title: 5.  Server Policy Request
  contents:
  - "5.  Server Policy Request\n   An SCVP client uses the ValPolRequest item to request\
    \ information\n   about an SCVP server's policies and configuration information,\n\
    \   including the list of validation policies supported by the SCVP\n   server.\
    \  When a ValPolRequest is encapsulated in a MIME body part, it\n   MUST be carried\
    \ in an application/scvp-vp-request MIME body part.\n   The request consists of\
    \ a ValPolRequest encapsulated in a\n   ContentInfo.  The client does not sign\
    \ the request.\n      ContentInfo {\n        contentType        id-ct-scvp-valPolRequest,\n\
    \                                      -- (1.2.840.113549.1.9.16.1.12)\n     \
    \   content            ValPolRequest }\n   The ValPolRequest type has the following\
    \ syntax:\n      ValPolRequest ::= SEQUENCE {\n        vpRequestVersion      \
    \     INTEGER DEFAULT 1,\n        requestNonce               OCTET STRING }\n\
    \   Conforming SCVP server implementations MUST recognize and process the\n  \
    \ server policy request.  Conforming clients SHOULD support the server\n   policy\
    \ request.\n"
- title: 5.1.  vpRequestVersion
  contents:
  - "5.1.  vpRequestVersion\n   The syntax and semantics of vpRequestVersion are the\
    \ same as\n   cvRequestVersion as described in Section 3.1.\n"
- title: 5.2.  requestNonce
  contents:
  - "5.2.  requestNonce\n   The requestNonce item contains a request identifier generated\
    \ by the\n   SCVP client.  If the server returns a specific response, it MUST\n\
    \   include the requestNonce from the request in the response, but the\n   server\
    \ MAY return a cached response, which MUST NOT include a\n   requestNonce.\n"
- title: 6.  Validation Policy Response
  contents:
  - "6.  Validation Policy Response\n   In response to a ValPolRequest, the SCVP server\
    \ provides a\n   ValPolResponse.  The ValPolResponse may not be unique to any\n\
    \   ValPolRequest, so may be reused by the server in response to multiple\n  \
    \ ValPolRequests.  The ValPolResponse also has an indication of how\n   frequently\
    \ the ValPolResponse may be reissued.  The server MUST sign\n   the response using\
    \ its digital signature certificate.  When a\n   ValPolResponse is encapsulated\
    \ in a MIME body part, it MUST be\n   carried in an application/scvp-vp-response\
    \ MIME body part.\n   The response consists of a ValPolResponse encapsulated in\
    \ a\n   SignedData, which is in turn encapsulated in a ContentInfo.  That is,\n\
    \   the EncapsulatedContentInfo field of SignedData consists of an\n   eContentType\
    \ field with a value of id-ct-scvp-valPolResponse\n   (1.2.840.113549.1.9.16.1.13)\
    \ and an eContent field that contains a\n   DER-encoded ValPolResponse.  The SCVP\
    \ server MUST include its own\n   certificate in the certificates field within\
    \ SignedData, and the\n   signerInfos field of SignedData MUST include exactly\
    \ one SignerInfo.\n   The SignedData MUST NOT include the unsignedAttrs field.\n\
    \   The ValPolResponse type has the following syntax:\n      ValPolResponse ::=\
    \ SEQUENCE {\n        vpResponseVersion               INTEGER,\n        maxCVRequestVersion\
    \             INTEGER,\n        maxVPRequestVersion             INTEGER,\n   \
    \     serverConfigurationID           INTEGER,\n        thisUpdate           \
    \           GeneralizedTime,\n        nextUpdate                      GeneralizedTime\
    \ OPTIONAL,\n        supportedChecks                 CertChecks,\n        supportedWantBacks\
    \              WantBack,\n        validationPolicies              SEQUENCE OF\
    \ OBJECT IDENTIFIER,\n        validationAlgs                  SEQUENCE OF OBJECT\
    \ IDENTIFIER,\n        authPolicies                    SEQUENCE OF AuthPolicy,\n\
    \        responseTypes                   ResponseTypes,\n        defaultPolicyValues\
    \             RespValidationPolicy,\n        revocationInfoTypes             RevocationInfoTypes,\n\
    \        signatureGeneration             SEQUENCE OF AlgorithmIdentifier,\n  \
    \      signatureVerification           SEQUENCE OF AlgorithmIdentifier,\n    \
    \    hashAlgorithms                  SEQUENCE SIZE (1..MAX) OF\n             \
    \                              OBJECT IDENTIFIER,\n        serverPublicKeys  \
    \              SEQUENCE OF KeyAgreePublicKey\n                               \
    \            OPTIONAL,\n        clockSkew                       INTEGER DEFAULT\
    \ 10,\n        requestNonce                    OCTET STRING OPTIONAL }\n     \
    \ ResponseTypes  ::= ENUMERATED {\n        cached-only                (0),\n \
    \       non-cached-only            (1),\n        cached-and-non-cached      (2)\
    \ }\n      RevocationInfoTypes ::= BIT STRING {\n        fullCRLs            \
    \       (0),\n        deltaCRLs                  (1),\n        indirectCRLs  \
    \             (2),\n        oCSPResponses              (3) }\n   SCVP clients\
    \ that support validation policy requests MUST support\n   validation policy responses.\
    \  SCVP servers MUST support validation\n   policy responses.\n   SCVP servers\
    \ MUST support cached policy responses and MAY support\n   specific responses\
    \ to policy requests.\n"
- title: 6.1.  vpResponseVersion
  contents:
  - "6.1.  vpResponseVersion\n   The syntax and semantics of the vpResponseVersion\
    \ item are the same\n   as cvRequestVersion as described in Section 3.1.  The\n\
    \   vpResponseVersion used MUST be the same as the vpRequestVersion\n   unless\
    \ the client has used a value greater than the values the server\n   supports.\
    \  If the client submits a vpRequestVersion greater than the\n   version supported\
    \ by the server, the server MUST return a\n   vpResponseVersion using the highest\
    \ version number the server\n   supports as the version number.\n"
- title: 6.2.  maxCVRequestVersion
  contents:
  - "6.2.  maxCVRequestVersion\n   The maxCVRequestVersion item defines the maximum\
    \ version number for\n   CV requests that the server supports.\n"
- title: 6.3.  maxVPRequestVersion
  contents:
  - "6.3.  maxVPRequestVersion\n   The maxVPRequestVersion item defines the maximum\
    \ version number for\n   VP requests that the server supports.\n"
- title: 6.4.  serverConfigurationID
  contents:
  - "6.4.  serverConfigurationID\n   The serverConfigurationID item is an integer\
    \ that uniquely represents\n   the version of the server configuration as represented\
    \ by the\n   validationPolicies, validationAlgs, authPolicies,\n   defaultPolicyValues,\
    \ and clockSkew.  If any of these values change,\n   the server MUST create a\
    \ new ValPolResponse with a new\n   serverConfigurationID.  If the configuration\
    \ has not changed, then\n   the server may reuse serverConfigurationID across\
    \ multiple\n   ValPolResponse messages.  However, if the server reverts to an\n\
    \   earlier configuration, the server MUST NOT revert the configuration\n   ID\
    \ as well, but MUST select another unique value.\n"
- title: 6.5.  thisUpdate
  contents:
  - "6.5.  thisUpdate\n   This item indicates the signing date and time of this policy\n\
    \   response.\n   GeneralizedTime values MUST be expressed in Greenwich Mean Time\n\
    \   (Zulu) and interpreted as defined in Section 3.2.7.\n"
- title: 6.6.  nextUpdate and requestNonce
  contents:
  - "6.6.  nextUpdate and requestNonce\n   These items are used to indicate whether\
    \ policy responses are\n   specific to policy requests.  Where policy responses\
    \ are cached,\n   these items indicate when the information will be updated. \
    \ The\n   optional nextUpdate item indicates the time by which the next policy\n\
    \   response will be published.  The optional requestNonce item links the\n  \
    \ response to a specific request by returning the nonce provided in the\n   request.\n\
    \   If the nextUpdate item is omitted, it indicates a non-cached response\n  \
    \ generated in response to a specific request (i.e., the ValPolResponse\n   is\
    \ bound to a specific request).  If this item is omitted, the\n   requestNonce\
    \ item MUST be present and MUST include the requestNonce\n   value from the request.\n\
    \   If the nextUpdate item is present, it indicates a cached response\n   that\
    \ is not bound to a specific request.  An SCVP server MUST\n   periodically generate\
    \ a new response as defined by the next update\n   time, but MAY use the same\
    \ ValPolResponse to respond to multiple\n   requests.  The requestNonce is omitted\
    \ if the nextUpdate item is\n   present.\n   It is a matter of local server policy\
    \ to return a cached or non-\n   cached specific response.\n   GeneralizedTime\
    \ values in nextUpdate MUST be expressed in Greenwich\n   Mean Time (Zulu) as\
    \ specified in Section 3.2.7.\n"
- title: 6.7.  supportedChecks
  contents:
  - "6.7.  supportedChecks\n   The supportedChecks item contains a sequence of object\
    \ identifiers\n   representing the checks supported by the server.\n"
- title: 6.8.  supportedWantBacks
  contents:
  - "6.8.  supportedWantBacks\n   The supportedWantBacks item contains a sequence\
    \ of object identifiers\n   representing the wantBacks supported by the server.\n"
- title: 6.9.  validationPolicies
  contents:
  - "6.9.  validationPolicies\n   The validationPolicies item contains a sequence\
    \ of object identifiers\n   representing the validation policies supported by\
    \ the server.  It is\n   a matter of local policy if the server wishes to process\
    \ requests\n   using the default validation policy, and if it does not, then it\
    \ MUST\n   NOT include the id-svp-defaultValPolicy in this list.\n"
- title: 6.10.  validationAlgs
  contents:
  - "6.10.  validationAlgs\n   The validationAlgs item contains a sequence of OIDs.\
    \  Each OID\n   identifies a validation algorithm supported by the server.\n"
- title: 6.11.  authPolicies
  contents:
  - "6.11.  authPolicies\n   The authPolicies item contains a sequence of policy references\
    \ for\n   authenticating to the SCVP server.\n   The reference to the authentication\
    \ policy is an OID that the client\n   and server have agreed represents an authentication\
    \ policy.  The list\n   of policies is intended to document to the client if authentication\n\
    \   is required for some requests and if so how.\n      AuthPolicy ::=  OBJECT\
    \ IDENTIFIER\n"
- title: 6.12.  responseTypes
  contents:
  - "6.12.  responseTypes\n   The responseTypes item allows the server to publish\
    \ the range of\n   response types it supports.  Cached only means the server will\
    \ only\n   return cached responses to requests.  Non-cached only means the\n \
    \  server will return a specific response to the request, i.e.,\n   containing\
    \ the requestor's nonce.  Both means that the server\n   supports both cached\
    \ and non-cached response types and will return\n   either a cached or non- cached\
    \ response, depending on the request.\n"
- title: 6.13.  revocationInfoTypes
  contents:
  - "6.13.  revocationInfoTypes\n   The revocationInfoTypes item allows the server\
    \ to indicate the\n   sources of revocation information that it is capable of\
    \ processing.\n   For each bit in the RevocationInfoTypes BIT STRING, the server\
    \ MUST\n   set the bit to one if it is capable of processing the corresponding\n\
    \   revocation information type and to zero if it cannot.\n"
- title: 6.14.  defaultPolicyValues
  contents:
  - "6.14.  defaultPolicyValues\n   This is the default validation policy used by\
    \ the server.  It\n   contains a RespValidationPolicy, which is defined in Section\
    \ 4.5.\n   All OPTIONAL items in the validationPolicy item MUST be populated.\
    \  A\n   server will use these default values when the request references the\n\
    \   default validation policy and the client does not override the\n   default\
    \ values by supplying other values in the request.\n   This allows the client\
    \ to optimize the request by omitting parameters\n   that match the server default\
    \ values.\n"
- title: 6.15.  signatureGeneration
  contents:
  - "6.15.  signatureGeneration\n   This sequence specifies the set of digital signature\
    \ algorithms\n   supported by an SCVP server for signing CVResponse messages.\
    \  Each\n   digital signature algorithm is specified as an AlgorithmIdentifier,\n\
    \   using the encoding rules associated with the signatureAlgorithm field\n  \
    \ in a public key certificate [PKIX-1].  Supported algorithms are\n   defined\
    \ in [PKIX-ALG] and [PKIX-ALG2], but other signature algorithms\n   may also be\
    \ supported.\n   By including an algorithm (e.g., RSA with SHA-1) in this list,\
    \ the\n   server states that it has a private key and corresponding certified\n\
    \   public key for that asymmetric algorithm, and supports the specified\n   hash\
    \ algorithm.  The list is ordered; the first digital signature\n   algorithm is\
    \ the server's default algorithm.  The default algorithm\n   will be used by the\
    \ server to protect signed messages unless the\n   client specifies another algorithm.\n\
    \   For servers that do not have an on-line private key, and cannot sign\n   CVResponse\
    \ messages, the signatureGeneration item is encoded as an\n   empty sequence.\n"
- title: 6.16.  signatureVerification
  contents:
  - "6.16.  signatureVerification\n   This sequence specifies the set of digital signature\
    \ algorithms that\n   can be verified by this SCVP server.  Each digital signature\n\
    \   algorithm is specified as an AlgorithmIdentifier, using the encoding\n   rules\
    \ associated with the signatureAlgorithm field in a public key\n   certificate\
    \ [PKIX-1].  Supported algorithms are defined in [PKIX-ALG]\n   and [PKIX-ALG2],\
    \ but other signature algorithms may also be\n   supported.\n   For servers that\
    \ do not verify signatures on CVRequest messages, the\n   signatureVerification\
    \ item is encoded as an empty sequence.\n"
- title: 6.17.  hashAlgorithms
  contents:
  - "6.17.  hashAlgorithms\n   This sequence specifies the set of hash algorithms\
    \ that the server\n   can use to hash certificates and requests.  The list is\
    \ ordered; the\n   first hash algorithm is the server's default algorithm.  The\
    \ default\n   algorithm will be used by the server to compute hashes included\
    \ in\n   responses unless the client specifies another algorithm.  Each hash\n\
    \   algorithm is specified as an object identifier.  [PKIX-ALG2]\n   specifies\
    \ object identifiers for SHA-1, SHA-224, SHA-256, SHA-384,\n   and SHA-512.  Other\
    \ hash algorithms may also be supported.\n"
- title: 6.18.  serverPublicKeys
  contents:
  - "6.18.  serverPublicKeys\n   The serverPublicKeys item is a sequence of one or\
    \ more key agreement\n   public keys and associated parameters.  It is used by\
    \ clients making\n   AuthenticatedData requests to the server.  Each item in the\n\
    \   serverPublicKeys sequence is of the KeyAgreePublicKey type:\n      KeyAgreePublicKey\
    \ ::= SEQUENCE {\n        algorithm            AlgorithmIdentifier,\n        publicKey\
    \            BIT STRING,\n        macAlgorithm         AlgorithmIdentifier,\n\
    \        kDF                  AlgorithmIdentifier OPTIONAL }\n   The KeyAgreePublicKey\
    \ includes the algorithm identifier and the\n   server's public key.  SCVP servers\
    \ that support the key agreement\n   mode of AuthenticatedData for SCVP requests\
    \ MUST support\n   serverPublicKeys and the Diffie-Hellman key agreement algorithm\
    \ as\n   specified in [PKIX-ALG].  SCVP servers that support serverPublicKeys\n\
    \   MUST support the 1024-bit Modular Exponential (MODP) group key (group\n  \
    \ 2) as defined in [IKE].  SCVP servers that support serverPublicKeys\n   MAY\
    \ support other Diffie-Hellman groups [IKE-GROUPS], as well as\n   other key agreement\
    \ algorithms.\n   The macAlgorithm item specifies the symmetric algorithm the\
    \ server\n   expects the client to use with the result of the key agreement\n\
    \   algorithm.  A key derivation function (KDF), which derives symmetric\n   key\
    \ material from the key agreement result, may be implied by the\n   macAlgorithm.\
    \  Alternatively, the KDF may be explicitly specified\n   using the optional kDF\
    \ item.\n"
- title: 6.19.  clockSkew
  contents:
  - "6.19.  clockSkew\n   The clockSkew item is the number of minutes the server will\
    \ allow for\n   clock skew.  The default value is 10 minutes.\n"
- title: 7.  SCVP Server Relay
  contents:
  - "7.  SCVP Server Relay\n   In some network environments, especially ones that\
    \ include firewalls,\n   an SCVP server might not be able to obtain all of the\
    \ information\n   that it needs to process a request.  However, the server might\
    \ be\n   configured to use the services of one or more other SCVP servers to\n\
    \   fulfill all requests.  In such cases, the SCVP client is unaware that\n  \
    \ the initial SCVP server is using the services of other SCVP servers.\n   The\
    \ initial SCVP server acts as a client to another SCVP server.\n   Unlike the\
    \ original client, the SCVP server is expected to have\n   moderate computing\
    \ and memory resources.   This section describes\n   SCVP server-to-SCVP server\
    \ exchanges.  This section does not impose\n   any requirements on SCVP clients\
    \ that are not also SCVP servers.\n   Further, this section does not impose any\
    \ requirements on SCVP\n   servers that do not relay requests to other SCVP servers.\n\
    \   When one SCVP server relays a request to another server, in an\n   incorrectly\
    \ configured system of servers, it is possible that the\n   same request will\
    \ be relayed back again.  Any SCVP server that relays\n   requests MUST implement\
    \ the conventions described in this section to\n   detect and break loops.\n \
    \  When an SCVP server relays a request, the request MUST include the\n   requestorRef\
    \ item.  If the request to be relayed already contains a\n   requestorRef item,\
    \ then the server-generated request MUST contain a\n   requestorRef item constructed\
    \ from this value and an additional\n   GeneralName that contains an identifier\
    \ of the SCVP server.  If the\n   request to be relayed does not contain a requestorRef\
    \ item, then the\n   server-generated request MUST contain a requestorRef item\
    \ that\n   includes a GeneralName that contains an identifier of the SCVP\n  \
    \ server.\n   To prevent false loop detection, servers should use identifiers\
    \ that\n   are unique within their network of cooperating SCVP servers.  SCVP\n\
    \   servers that support relay SHOULD populate this item with the DNS\n   name\
    \ of the server or the distinguished name in the server's\n   certificate.  SCVP\
    \ servers MAY choose other procedures for generating\n   identifiers that are\
    \ unique within their community.\n   When an SCVP server receives a request that\
    \ contains a requestorRef\n   item, the server MUST check the sequence of names\
    \ in the requestorRef\n   item for its own identifier.  If the server discovers\
    \ its own\n   identifier in the requestorRef item, it MUST respond with an error,\n\
    \   setting the statusCode in the responseStatus item to 40.\n   When an SCVP\
    \ server generates a non-cached response to a relayed\n   request, the server\
    \ MUST include the requestorRef item from the\n   request in the response.\n"
- title: 8.  SCVP ASN.1 Module
  contents:
  - "8.  SCVP ASN.1 Module\n   This section defines the syntax for SCVP request-response\
    \ pairs.  The\n   semantics for the messages are defined in Sections 3, 4, 5,\
    \ and 6.\n   The SCVP ASN.1 module follows.\n   SCVP\n     { iso(1) identified-organization(3)\
    \ dod(6) internet(1)\n       security(5) mechanisms(5) pkix(7) id-mod(0) 21 }\n\
    \   DEFINITIONS IMPLICIT TAGS ::= BEGIN\n   IMPORTS\n   AlgorithmIdentifier, Attribute,\
    \ Certificate, Extensions,\n   -- Import UTF8String if required by compiler\n\
    \   -- UTF8String, -- CertificateList, CertificateSerialNumber\n     FROM PKIX1Explicit88\
    \ -- RFC 3280\n     { iso(1) identified-organization(3) dod(6) internet(1)\n \
    \      security(5) mechanisms(5) pkix(7) id-mod(0) 18 }\n   GeneralNames, GeneralName,\
    \ KeyUsage, KeyPurposeId\n     FROM PKIX1Implicit88 -- RFC 3280\n     { iso(1)\
    \ identified-organization(3) dod(6) internet(1)\n       security(5) mechanisms(5)\
    \ pkix(7) id-mod(0) 19 }\n   AttributeCertificate\n     FROM PKIXAttributeCertificate\
    \ -- RFC 3281\n     { iso(1) identified-organization(3) dod(6) internet(1)\n \
    \      security(5) mechanisms(5) pkix(7) id-mod(0) 12 }\n   OCSPResponse\n   \
    \  FROM OCSP -- RFC 2560\n     { iso(1) identified-organization(3) dod(6) internet(1)\n\
    \       security(5) mechanisms(5) pkix(7) id-mod(0) 14 }\n   ContentInfo\n   \
    \  FROM CryptographicMessageSyntax2004 -- RFC 3852\n     { iso(1) member-body(2)\
    \ us(840) rsadsi(113549)\n       pkcs(1) pkcs-9(9) smime(16) modules(0) cms-2004(24)\
    \ } ;\n   -- SCVP Certificate Validation Request\n   id-ct OBJECT IDENTIFIER ::=\
    \ { iso(1) member-body(2)\n             us(840) rsadsi(113549) pkcs(1) pkcs9(9)\n\
    \             id-smime(16) 1 }\n   id-ct-scvp-certValRequest OBJECT IDENTIFIER\
    \ ::= { id-ct 10 }\n   CVRequest ::= SEQUENCE {\n     cvRequestVersion       \
    \    INTEGER DEFAULT 1,\n     query                      Query,\n     requestorRef\
    \           [0] GeneralNames OPTIONAL,\n     requestNonce           [1] OCTET\
    \ STRING OPTIONAL,\n     requestorName          [2] GeneralName OPTIONAL,\n  \
    \   responderName          [3] GeneralName OPTIONAL,\n     requestExtensions \
    \     [4] Extensions OPTIONAL,\n     signatureAlg           [5] AlgorithmIdentifier\
    \ OPTIONAL,\n     hashAlg                [6] OBJECT IDENTIFIER OPTIONAL,\n   \
    \  requestorText          [7] UTF8String (SIZE (1..256)) OPTIONAL }\n   Query\
    \ ::= SEQUENCE {\n     queriedCerts             CertReferences,\n     checks \
    \                  CertChecks,\n     wantBack             [1] WantBack OPTIONAL,\n\
    \     validationPolicy         ValidationPolicy,\n     responseFlags         \
    \   ResponseFlags OPTIONAL,\n     serverContextInfo    [2] OCTET STRING OPTIONAL,\n\
    \     validationTime       [3] GeneralizedTime OPTIONAL,\n     intermediateCerts\
    \    [4] CertBundle OPTIONAL,\n     revInfos             [5] RevocationInfos OPTIONAL,\n\
    \     producedAt           [6] GeneralizedTime OPTIONAL,\n     queryExtensions\
    \      [7] Extensions OPTIONAL }\n   CertReferences ::= CHOICE {\n     pkcRefs\
    \       [0] SEQUENCE SIZE (1..MAX) OF PKCReference,\n     acRefs        [1] SEQUENCE\
    \ SIZE (1..MAX) OF ACReference }\n   CertReference::= CHOICE {\n     pkc     \
    \          PKCReference,\n     ac                ACReference }\n   PKCReference\
    \ ::= CHOICE {\n     cert          [0] Certificate,\n     pkcRef        [1] SCVPCertID\
    \ }\n   ACReference ::= CHOICE {\n     attrCert      [2] AttributeCertificate,\n\
    \     acRef         [3] SCVPCertID }\n   SCVPCertID ::= SEQUENCE {\n       certHash\
    \        OCTET STRING,\n       issuerSerial    SCVPIssuerSerial,\n       hashAlgorithm\
    \   AlgorithmIdentifier DEFAULT { algorithm sha-1 } }\n   SCVPIssuerSerial ::=\
    \ SEQUENCE {\n        issuer         GeneralNames,\n        serialNumber   CertificateSerialNumber\n\
    \   }\n   ValidationPolicy ::= SEQUENCE {\n     validationPolRef           ValidationPolRef,\n\
    \     validationAlg          [0] ValidationAlg OPTIONAL,\n     userPolicySet \
    \         [1] SEQUENCE SIZE (1..MAX) OF OBJECT\n                             \
    \     IDENTIFIER OPTIONAL,\n     inhibitPolicyMapping   [2] BOOLEAN OPTIONAL,\n\
    \     requireExplicitPolicy  [3] BOOLEAN OPTIONAL,\n     inhibitAnyPolicy    \
    \   [4] BOOLEAN OPTIONAL,\n     trustAnchors           [5] TrustAnchors OPTIONAL,\n\
    \     keyUsages              [6] SEQUENCE OF KeyUsage OPTIONAL,\n     extendedKeyUsages\
    \      [7] SEQUENCE OF KeyPurposeId OPTIONAL,\n     specifiedKeyUsages     [8]\
    \ SEQUENCE OF KeyPurposeId OPTIONAL }\n   CertChecks ::= SEQUENCE SIZE (1..MAX)\
    \ OF OBJECT IDENTIFIER\n   WantBack ::= SEQUENCE SIZE (1..MAX) OF OBJECT IDENTIFIER\n\
    \   ValidationPolRef ::= SEQUENCE {\n       valPolId             OBJECT IDENTIFIER,\n\
    \       valPolParams         ANY DEFINED BY valPolId OPTIONAL }\n   ValidationAlg\
    \ ::= SEQUENCE {\n     valAlgId               OBJECT IDENTIFIER,\n     parameters\
    \             ANY DEFINED BY valAlgId OPTIONAL }\n   NameValidationAlgParms ::=\
    \ SEQUENCE {\n     nameCompAlgId          OBJECT IDENTIFIER,\n     validationNames\
    \        GeneralNames }\n   TrustAnchors ::= SEQUENCE SIZE (1..MAX) OF PKCReference\n\
    \   KeyAgreePublicKey ::= SEQUENCE {\n     algorithm           AlgorithmIdentifier,\n\
    \     publicKey           BIT STRING,\n     macAlgorithm        AlgorithmIdentifier,\n\
    \     kDF                 AlgorithmIdentifier OPTIONAL }\n   ResponseFlags ::=\
    \ SEQUENCE {\n     fullRequestInResponse      [0] BOOLEAN DEFAULT FALSE,\n   \
    \  responseValidationPolByRef [1] BOOLEAN DEFAULT TRUE,\n     protectResponse\
    \            [2] BOOLEAN DEFAULT TRUE,\n     cachedResponse             [3] BOOLEAN\
    \ DEFAULT TRUE }\n   CertBundle ::= SEQUENCE SIZE (1..MAX) OF Certificate\n  \
    \ RevocationInfos ::= SEQUENCE SIZE (1..MAX) OF RevocationInfo\n   RevocationInfo\
    \ ::= CHOICE {\n     crl                    [0] CertificateList,\n     delta-crl\
    \              [1] CertificateList,\n     ocsp                   [2] OCSPResponse,\n\
    \     other                  [3] OtherRevInfo }\n   OtherRevInfo ::= SEQUENCE\
    \ {\n     riType                     OBJECT IDENTIFIER,\n     riValue        \
    \            ANY DEFINED BY riType }\n   -- SCVP Certificate Validation Response\n\
    \   id-ct-scvp-certValResponse OBJECT IDENTIFIER ::= { id-ct 11 }\n   CVResponse\
    \ ::= SEQUENCE {\n     cvResponseVersion          INTEGER,\n     serverConfigurationID\
    \      INTEGER,\n     producedAt                 GeneralizedTime,\n     responseStatus\
    \             ResponseStatus,\n     respValidationPolicy   [0] RespValidationPolicy\
    \ OPTIONAL,\n     requestRef             [1] RequestReference OPTIONAL,\n    \
    \ requestorRef           [2] GeneralNames OPTIONAL,\n     requestorName      \
    \    [3] GeneralNames OPTIONAL,\n     replyObjects           [4] ReplyObjects\
    \ OPTIONAL,\n     respNonce              [5] OCTET STRING OPTIONAL,\n     serverContextInfo\
    \      [6] OCTET STRING OPTIONAL,\n     cvResponseExtensions   [7] Extensions\
    \ OPTIONAL,\n     requestorText          [8] UTF8String (SIZE (1..256)) OPTIONAL\
    \ }\n   ResponseStatus ::= SEQUENCE {\n       statusCode               CVStatusCode\
    \ DEFAULT  okay,\n       errorMessage             UTF8String OPTIONAL }\n   CVStatusCode\
    \ ::= ENUMERATED {\n       okay                               (0),\n       skipUnrecognizedItems\
    \              (1),\n       tooBusy                           (10),\n       invalidRequest\
    \                    (11),\n       internalError                     (12),\n \
    \      badStructure                      (20),\n       unsupportedVersion    \
    \            (21),\n       abortUnrecognizedItems            (22),\n       unrecognizedSigKey\
    \                (23),\n       badSignatureOrMAC                 (24),\n     \
    \  unableToDecode                    (25),\n       notAuthorized             \
    \        (26),\n       unsupportedChecks                 (27),\n       unsupportedWantBacks\
    \              (28),\n       unsupportedSignatureOrMAC         (29),\n       invalidSignatureOrMAC\
    \             (30),\n       protectedResponseUnsupported      (31),\n       unrecognizedResponderName\
    \         (32),\n       relayingLoop                      (40),\n       unrecognizedValPol\
    \                (50),\n       unrecognizedValAlg                (51),\n     \
    \  fullRequestInResponseUnsupported  (52),\n       fullPolResponseUnsupported\
    \        (53),\n       inhibitPolicyMappingUnsupported   (54),\n       requireExplicitPolicyUnsupported\
    \  (55),\n       inhibitAnyPolicyUnsupported       (56),\n       validationTimeUnsupported\
    \         (57),\n       unrecognizedCritQueryExt          (63),\n       unrecognizedCritRequestExt\
    \        (64) }\n   RespValidationPolicy ::= ValidationPolicy\n   RequestReference\
    \ ::= CHOICE {\n     requestHash   [0] HashValue, -- hash of CVRequest\n     fullRequest\
    \   [1] CVRequest }\n   HashValue ::= SEQUENCE {\n     algorithm         AlgorithmIdentifier\
    \ DEFAULT { algorithm sha-1 },\n     value             OCTET STRING }\n   sha-1\
    \ OBJECT IDENTIFIER ::= { iso(1) identified-organization(3)\n             oiw(14)\
    \ secsig(3) algorithm(2) 26 }\n   ReplyObjects ::= SEQUENCE SIZE (1..MAX) OF CertReply\n\
    \   CertReply ::= SEQUENCE {\n     cert                       CertReference,\n\
    \     replyStatus                ReplyStatus DEFAULT success,\n     replyValTime\
    \               GeneralizedTime,\n     replyChecks                ReplyChecks,\n\
    \     replyWantBacks             ReplyWantBacks,\n     validationErrors      \
    \ [0] SEQUENCE SIZE (1..MAX) OF\n                                  OBJECT IDENTIFIER\
    \ OPTIONAL,\n     nextUpdate             [1] GeneralizedTime OPTIONAL,\n     certReplyExtensions\
    \    [2] Extensions OPTIONAL }\n   ReplyStatus ::= ENUMERATED {\n     success\
    \                    (0),\n     malformedPKC               (1),\n     malformedAC\
    \                (2),\n     unavailableValidationTime  (3),\n     referenceCertHashFail\
    \      (4),\n     certPathConstructFail      (5),\n     certPathNotValid     \
    \      (6),\n     certPathNotValidNow        (7),\n     wantBackUnsatisfied  \
    \      (8) }\n   ReplyChecks ::= SEQUENCE OF ReplyCheck\n   ReplyCheck ::= SEQUENCE\
    \ {\n     check                      OBJECT IDENTIFIER,\n     status         \
    \            INTEGER DEFAULT 0 }\n   ReplyWantBacks ::= SEQUENCE OF ReplyWantBack\n\
    \   ReplyWantBack::= SEQUENCE {\n     wb                         OBJECT IDENTIFIER,\n\
    \     value                      OCTET STRING }\n   CertBundles ::= SEQUENCE SIZE\
    \ (1..MAX) OF CertBundle\n   RevInfoWantBack ::= SEQUENCE {\n     revocationInfo\
    \             RevocationInfos,\n     extraCerts                 CertBundle OPTIONAL\
    \ }\n   SCVPResponses ::= SEQUENCE OF ContentInfo\n   -- SCVP Validation Policies\
    \ Request\n   id-ct-scvp-valPolRequest     OBJECT IDENTIFIER ::= { id-ct 12 }\n\
    \   ValPolRequest ::= SEQUENCE {\n     vpRequestVersion           INTEGER DEFAULT\
    \ 1,\n     requestNonce               OCTET STRING }\n   -- SCVP Validation Policies\
    \ Response\n   id-ct-scvp-valPolResponse OBJECT IDENTIFIER ::= { id-ct 13 }\n\
    \   ValPolResponse ::= SEQUENCE {\n     vpResponseVersion                INTEGER,\n\
    \     maxCVRequestVersion              INTEGER,\n     maxVPRequestVersion    \
    \          INTEGER,\n     serverConfigurationID            INTEGER,\n     thisUpdate\
    \                       GeneralizedTime,\n     nextUpdate                    \
    \   GeneralizedTime OPTIONAL,\n     supportedChecks                  CertChecks,\n\
    \     supportedWantBacks               WantBack,\n     validationPolicies    \
    \           SEQUENCE OF OBJECT IDENTIFIER,\n     validationAlgs              \
    \     SEQUENCE OF OBJECT IDENTIFIER,\n     authPolicies                     SEQUENCE\
    \ OF AuthPolicy,\n     responseTypes                    ResponseTypes,\n     defaultPolicyValues\
    \              RespValidationPolicy,\n     revocationInfoTypes              RevocationInfoTypes,\n\
    \     signatureGeneration              SEQUENCE OF AlgorithmIdentifier,\n    \
    \ signatureVerification            SEQUENCE OF AlgorithmIdentifier,\n     hashAlgorithms\
    \                   SEQUENCE SIZE (1..MAX) OF\n                              \
    \          OBJECT IDENTIFIER,\n     serverPublicKeys                 SEQUENCE\
    \ OF KeyAgreePublicKey\n                                        OPTIONAL,\n  \
    \   clockSkew                        INTEGER DEFAULT 10,\n     requestNonce  \
    \                   OCTET STRING OPTIONAL }\n   ResponseTypes  ::= ENUMERATED\
    \ {\n     cached-only                (0),\n     non-cached-only            (1),\n\
    \     cached-and-non-cached      (2) }\n   RevocationInfoTypes ::= BIT STRING\
    \ {\n     fullCRLs                   (0),\n     deltaCRLs                  (1),\n\
    \     indirectCRLs               (2),\n     oCSPResponses              (3) }\n\
    \   AuthPolicy ::= OBJECT IDENTIFIER\n   -- SCVP Check Identifiers\n   id-stc\
    \ OBJECT IDENTIFIER ::= { iso(1) identified-organization(3)\n             dod(6)\
    \ internet(1) security(5) mechanisms(5) pkix(7) 17 }\n   id-stc-build-pkc-path\
    \        OBJECT IDENTIFIER ::= { id-stc 1 }\n   id-stc-build-valid-pkc-path  OBJECT\
    \ IDENTIFIER ::= { id-stc 2 }\n   id-stc-build-status-checked-pkc-path\n     \
    \                           OBJECT IDENTIFIER ::= { id-stc 3 }\n   id-stc-build-aa-path\
    \         OBJECT IDENTIFIER ::= { id-stc 4 }\n   id-stc-build-valid-aa-path  \
    \ OBJECT IDENTIFIER ::= { id-stc 5 }\n   id-stc-build-status-checked-aa-path\n\
    \                                OBJECT IDENTIFIER ::= { id-stc 6 }\n   id-stc-status-check-ac-and-build-status-checked-aa-path\n\
    \                                OBJECT IDENTIFIER ::= { id-stc 7 }\n   -- SCVP\
    \ WantBack Identifiers\n   id-swb OBJECT IDENTIFIER ::= { iso(1) identified-organization(3)\n\
    \             dod(6) internet(1) security(5) mechanisms(5) pkix(7) 18 }\n   id-swb-pkc-best-cert-path\
    \       OBJECT IDENTIFIER ::= { id-swb 1 }\n   id-swb-pkc-revocation-info    \
    \  OBJECT IDENTIFIER ::= { id-swb 2 }\n   id-swb-pkc-public-key-info      OBJECT\
    \ IDENTIFIER ::= { id-swb 4 }\n   id-swb-aa-cert-path             OBJECT IDENTIFIER\
    \ ::= { id-swb 5 }\n   id-swb-aa-revocation-info       OBJECT IDENTIFIER ::= {\
    \ id-swb 6 }\n   id-swb-ac-revocation-info       OBJECT IDENTIFIER ::= { id-swb\
    \ 7 }\n   id-swb-relayed-responses        OBJECT IDENTIFIER ::= { id-swb 9 }\n\
    \   id-swb-pkc-cert                 OBJECT IDENTIFIER ::= { id-swb 10}\n   id-swb-ac-cert\
    \                  OBJECT IDENTIFIER ::= { id-swb 11}\n   id-swb-pkc-all-cert-paths\
    \       OBJECT IDENTIFIER ::= { id-swb 12}\n   id-swb-pkc-ee-revocation-info \
    \  OBJECT IDENTIFIER ::= { id-swb 13}\n   id-swb-pkc-CAs-revocation-info  OBJECT\
    \ IDENTIFIER ::= { id-swb 14}\n   -- SCVP Validation Policy and Algorithm Identifiers\n\
    \   id-svp OBJECT IDENTIFIER ::= { iso(1) identified-organization(3)\n       \
    \      dod(6) internet(1) security(5) mechanisms(5) pkix(7) 19 }\n   id-svp-defaultValPolicy\
    \ OBJECT IDENTIFIER ::= { id-svp 1 }\n   -- SCVP Basic Validation Algorithm Identifier\n\
    \   id-svp-basicValAlg OBJECT IDENTIFIER ::= { id-svp 3 }\n   -- SCVP Basic Validation\
    \ Algorithm Errors\n   id-bvae OBJECT IDENTIFIER ::= id-svp-basicValAlg\n   id-bvae-expired\
    \              OBJECT IDENTIFIER ::= { id-bvae 1 }\n   id-bvae-not-yet-valid \
    \       OBJECT IDENTIFIER ::= { id-bvae 2 }\n   id-bvae-wrongTrustAnchor     OBJECT\
    \ IDENTIFIER ::= { id-bvae 3 }\n   id-bvae-noValidCertPath      OBJECT IDENTIFIER\
    \ ::= { id-bvae 4 }\n   id-bvae-revoked              OBJECT IDENTIFIER ::= { id-bvae\
    \ 5 }\n   id-bvae-invalidKeyPurpose    OBJECT IDENTIFIER ::= { id-bvae 9 }\n \
    \  id-bvae-invalidKeyUsage      OBJECT IDENTIFIER ::= { id-bvae 10 }\n   id-bvae-invalidCertPolicy\
    \    OBJECT IDENTIFIER ::= { id-bvae 11 }\n   -- SCVP Name Validation Algorithm\
    \ Identifier\n   id-svp-nameValAlg OBJECT IDENTIFIER ::= { id-svp 2 }\n   -- SCVP\
    \ Name Validation Algorithm DN comparison algorithm\n   id-nva-dnCompAlg   OBJECT\
    \ IDENTIFIER ::= { id-svp 4 }\n   -- SCVP Name Validation Algorithm Errors\n \
    \  id-nvae OBJECT IDENTIFIER ::= id-svp-nameValAlg\n   id-nvae-name-mismatch \
    \         OBJECT IDENTIFIER ::= { id-nvae 1 }\n   id-nvae-no-name            \
    \    OBJECT IDENTIFIER ::= { id-nvae 2 }\n   id-nvae-unknown-alg            OBJECT\
    \ IDENTIFIER ::= { id-nvae 3 }\n   id-nvae-bad-name               OBJECT IDENTIFIER\
    \ ::= { id-nvae 4 }\n   id-nvae-bad-name-type          OBJECT IDENTIFIER ::= {\
    \ id-nvae 5 }\n   id-nvae-mixed-names            OBJECT IDENTIFIER ::= { id-nvae\
    \ 6 }\n   -- SCVP Extended Key Usage Key Purpose Identifiers\n   id-kp OBJECT\
    \ IDENTIFIER ::= { iso(1) identified-organization(3)\n             dod(6) internet(1)\
    \ security(5) mechanisms(5) pkix(7) 3 }\n   id-kp-scvpServer               OBJECT\
    \ IDENTIFIER ::= { id-kp 15 }\n   id-kp-scvpClient               OBJECT IDENTIFIER\
    \ ::= { id-kp 16 }\n   END\n"
- title: 9.  Security Considerations
  contents:
  - "9.  Security Considerations\n   For security considerations specific to the Cryptographic\
    \ Message\n   Syntax message formats, see [CMS].  For security considerations\n\
    \   specific to the process of PKI certification path validation, see\n   [PKIX-1].\n\
    \   A client that trusts a server's response for validation of a\n   certificate\
    \ inherently trusts that server as much as it would trust\n   its own validation\
    \ software.  This means that if an attacker\n   compromises a trusted SCVP server,\
    \ the attacker can change the\n   validation processing for every client that\
    \ relies on that server.\n   Thus, an SCVP server must be protected at least as\
    \ well as the trust\n   anchors that the SCVP server trusts.\n   Clients MUST\
    \ verify that the response matches their original request.\n   Clients need to\
    \ ensure that the server has performed the appropriate\n   checks for the correct\
    \ certificates under the requested validation\n   policy for the specified validation\
    \ time, and that the response\n   includes the requested wantBacks and meets the\
    \ client's freshness\n   requirements.\n   When the SCVP response is used to determine\
    \ the validity of a\n   certificate, the client MUST validate the digital signature\
    \ or MAC on\n   the response to ensure that the expected SCVP server generated\
    \ it.\n   If the client does not check the digital signature or MAC on the\n \
    \  response, a man-in-the-middle attack could fool the client into\n   believing\
    \ modified responses from the server or responses to\n   questions the client\
    \ did not ask.\n   If the client does not include a requestNonce item, or if the\
    \ client\n   does not check that the requestNonce in the response matches the\n\
    \   value in the request, an attacker can replay previous responses from\n   the\
    \ SCVP server.\n   If the server does not require some sort of authorization (such\
    \ as\n   signed requests), an attacker can get the server to respond to\n   arbitrary\
    \ requests.  Such responses may give the attacker information\n   about weaknesses\
    \ in the server or about the timeliness of the\n   server's checking.  This information\
    \ may be valuable for a future\n   attack.\n   If the server uses the serverContextInfo\
    \ item to indicate some server\n   state associated with a requestor, implementers\
    \ must take appropriate\n   measures against denial-of-service attacks where an\
    \ attacker sends in\n   a lot of requests at one time to force the server to keep\
    \ a lot of\n   state information.\n   SCVP does not include any confidentiality\
    \ mechanisms.  If\n   confidentiality is needed, it can be achieved with a lower-layer\n\
    \   security protocol such as TLS [TLS].\n   If an SCVP client is not operating\
    \ on a network with good physical\n   protection, it must ensure that there is\
    \ integrity over the SCVP\n   request-response pair.  The client can ensure integrity\
    \ by using a\n   protected transport such as TLS.  It can ensure integrity by\
    \ using\n   MACs or digital signatures to individually protect the request and\n\
    \   response messages.\n   If an SCVP client populates the userPolicySet in a\
    \ request with a\n   value other than anyPolicy, but does not set the\n   requireExplicitPolicy\
    \ flag, the server may return an affirmative\n   answer for paths that do not\
    \ satisfy any of the specified policies.\n   In general, when a client populates\
    \ the userPolicySet in a request\n   with a value other than anyPolicy, the requireExplicitPolicy\
    \ flag\n   should also be set.  This guarantees that all valid paths satisfy at\n\
    \   least one of the requested policies.\n   In SCVP, historical validation of\
    \ a certificate returns the known\n   status of the certificate at the time specified\
    \ in validationTime.\n   This may be used to demonstrate due diligence, but does\
    \ not\n   necessarily provide the most complete information.  A certificate may\n\
    \   have been revoked after the time specified in validationTime, but the\n  \
    \ revocation notice may specify an invalidity date that precedes the\n   validationTime.\
    \  The SCVP server would provide an affirmative\n   response even though the most\
    \ current information available indicates\n   the certificate should not be trusted\
    \ at that time.  SCVP clients may\n   wish to specify a validationTime later than\
    \ the actual time of\n   interest to mitigate this risk.\n"
- title: 10.  IANA Considerations
  contents:
  - "10.  IANA Considerations\n   The details of SCVP requests and responses are communicated\
    \ using\n   object identifiers (OIDs).  The objects are defined in an arc\n  \
    \ delegated by IANA to the PKIX Working Group.  This document also\n   includes\
    \ four MIME type registrations in Appendix A.  No further\n   action by IANA is\
    \ necessary for this document or any anticipated\n   updates.\n"
- title: 11.  References
  contents:
  - '11.  References

    '
- title: 11.1.  Normative References
  contents:
  - "11.1.  Normative References\n   [STDWORDS]    Bradner, S., \"Key words for use\
    \ in RFCs to Indicate\n                 Requirement Levels\", BCP 14, RFC 2119,\
    \ March 1997.\n   [CMS]         Housley, R., \"Cryptographic Message Syntax (CMS)\"\
    , RFC\n                 3852, July 2004.\n   [OCSP]        Myers, M., Ankney,\
    \ R., Malpani, A., Galperin, S., and\n                 C. Adams, \"X.509 Internet\
    \ Public Key Infrastructure\n                 Online Certificate Status Protocol\
    \ - OCSP\", RFC 2560,\n                 June 1999.\n   [PKIX-1]      Housley,\
    \ R., Polk, W., Ford, W., and D. Solo, \"Internet\n                 X.509 Public\
    \ Key Infrastructure Certificate and\n                 Certificate Revocation\
    \ List (CRL) Profile\", RFC 3280,\n                 April 2002.\n   [PKIX-AC]\
    \     Farrell, S. and R. Housley, \"An Internet Attribute\n                 Certificate\
    \ Profile for Authorization\", RFC 3281, April\n                 2002.\n   [PKIX-ALG]\
    \    Bassham, L., Polk, W., and R. Housley, \"Algorithms and\n               \
    \  Identifiers for the Internet X.509 Public Key\n                 Infrastructure\
    \ Certificate and Certificate Revocation\n                 List (CRL) Profile\"\
    , RFC 3279, April 2002.\n   [PKIX-ALG2]   Schaad, J., Kaliski, B., and R. Housley,\
    \ \"Additional\n                 Algorithms and Identifiers for RSA Cryptography\
    \ for use\n                 in the Internet X.509 Public Key Infrastructure\n\
    \                 Certificate and Certificate Revocation List (CRL)\n        \
    \         Profile\", RFC 4055, June 2005.\n   [UTF8]        Yergeau, F., \"UTF-8,\
    \ a transformation format of ISO\n                 10646\", STD 63, RFC 3629,\
    \ November 2003.\n   [ESS]         Hoffman, P., Ed., \"Enhanced Security Services\
    \ for\n                 S/MIME\", RFC 2634, June 1999.\n   [SMIME-CERT]  Ramsdell,\
    \ B., Ed., \"Secure/Multipurpose Internet Mail\n                 Extensions (S/MIME)\
    \ Version 3.1 Certificate Handling\",\n                 RFC 3850, July 2004.\n\
    \   [IKE]         Kaufman, C., Ed., \"Internet Key Exchange (IKEv2)\n        \
    \         Protocol\", RFC 4306, December 2005.\n   [HTTP]        Fielding, R.,\
    \ Gettys, J., Mogul, J., Frystyk, H.,\n                 Masinter, L., Leach, P.,\
    \ and T. Berners-Lee, \"Hypertext\n                 Transfer Protocol -- HTTP/1.1\"\
    , RFC 2616, June 1999.\n"
- title: 11.2.  Informative References
  contents:
  - "11.2.  Informative References\n   [IKE-GROUPS]  Kivinen, T. and M. Kojo, \"More\
    \ Modular Exponential\n                 (MODP) Diffie-Hellman groups for Internet\
    \ Key Exchange\n                 (IKE)\", RFC 3526, May 2003.\n   [RQMTS]    \
    \   Pinkas, D. and R. Housley, \"Delegated Path Validation\n                 and\
    \ Delegated Path Discovery Protocol Requirements\",\n                 RFC 3379,\
    \ September 2002.\n   [TLS]         Dierks, T. and E. Rescorla, \"The Transport\
    \ Layer\n                 Security (TLS) Protocol Version 1.1\", RFC 4346, April\n\
    \                 2006.\n"
- title: 12.  Acknowledgments
  contents:
  - "12.  Acknowledgments\n   The lively debate in the PKIX Working Group has made\
    \ a significant\n   impact on this protocol.  Special thanks to the following\
    \ for their\n   contributions to this document and diligence in greatly improving\
    \ it.\n   Paul Hoffman\n   Phillip Hallam-Baker\n   Mike Myers\n   Frank Balluffi\n\
    \   Ameya Talwalkar\n   John Thielens\n   Peter Sylvester\n   Yuriy Dzambasow\n\
    \   Sean P. Turner\n   Wen-Cheng Wang\n   Francis Dupont\n   Dave Engberg\n  \
    \ Faisal Maqsood\n   Thanks also to working group chair Steve Kent for his support\
    \ and\n   help.\n"
- title: Appendix A.  MIME Media Type Registrations
  contents:
  - "Appendix A.  MIME Media Type Registrations\n   Four MIME media type registrations\
    \ are provided in this appendix.\n"
- title: A.1.  application/scvp-cv-request
  contents:
  - "A.1.  application/scvp-cv-request\n   To: ietf-types@iana.org\n   Subject: Registration\
    \ of MIME media type application/scvp-cv-request\n   MIME media type name: application\n\
    \   MIME subtype name: scvp-cv-request\n   Required parameters: None\n   Optional\
    \ parameters: None\n   Encoding considerations: Binary\n   Security considerations:\
    \ Carries a request for information.  This\n   request may optionally be cryptographically\
    \ protected.\n   Interoperability considerations: None\n   Published specification:\
    \ RFC 5055\n   Applications that use this media type: SCVP clients sending\n \
    \  certificate validation requests\n   Additional information:\n      Magic number(s):\
    \ None\n      File extension(s): .SCQ\n      Macintosh File Type Code(s): None\n\
    \   Person & email address to contact for further information:\n   Ambarish Malpani\
    \ <ambarish@yahoo.com>\n   Intended usage: COMMON\n   Restrictions on usage: This\
    \ media type can be used with any protocol\n   that can transport digitally signed\
    \ objects.\n   Author: Ambarish Malpani <ambarish@yahoo.com>\n   Change controller:\
    \ IESG\n"
- title: A.2.  application/scvp-cv-response
  contents:
  - "A.2.  application/scvp-cv-response\n   To: ietf-types@iana.org\n   Subject: Registration\
    \ of MIME media type application/scvp-cv-response\n   MIME media type name: application\n\
    \   MIME subtype name: scvp-cv-response\n   Required parameters: None\n   Optional\
    \ parameters: None\n   Encoding considerations: Binary\n   Security considerations:\
    \ The client may require that this response be\n   cryptographically protected,\
    \ or may choose to use a secure transport\n   mechanism.  DPD responses may be\
    \ unprotected, but the client\n   validates the information provided in the request.\n\
    \   Interoperability considerations: None\n   Published specification: RFC 5055\n\
    \   Applications that use this media type: SCVP servers responding to\n   certificate\
    \ validation requests\n   Additional information:\n      Magic number(s): None\n\
    \      File extension(s): .SCS\n      Macintosh File Type Code(s): none\n   Person\
    \ & email address to contact for further information:\n   Ambarish Malpani <ambarish@yahoo.com>\n\
    \   Intended usage: COMMON\n   Restrictions on usage: This media type can be used\
    \ with any protocol\n   that can transport digitally signed objects.\n   Author:\
    \ Ambarish Malpani <ambarish@yahoo.com>\n   Change controller: IESG\n"
- title: A.3.  application/scvp-vp-request
  contents:
  - "A.3.  application/scvp-vp-request\n   To: ietf-types@iana.org\n   Subject: Registration\
    \ of MIME media type application/scvp-vp-request\n   MIME media type name: application\n\
    \   MIME subtype name: scvp-vp-request\n   Required parameters: None\n   Optional\
    \ parameters: None\n   Encoding considerations: Binary\n   Security considerations:\
    \ Carries a request for information.\n   Interoperability considerations: None\n\
    \   Published specification: RFC 5055\n   Applications that use this media type:\
    \ SCVP clients sending\n   validation policy requests\n   Additional information:\n\
    \      Magic number(s): None\n      File extension(s): .SPQ\n      Macintosh File\
    \ Type Code(s): none\n   Person & email address to contact for further information:\n\
    \   Ambarish Malpani <ambarish@yahoo.com>\n   Intended usage: COMMON\n   Restrictions\
    \ on usage: None\n   Author: Ambarish Malpani <ambarish@yahoo.com>\n   Change\
    \ controller: IESG\n"
- title: A.4.  application/scvp-vp-response
  contents:
  - "A.4.  application/scvp-vp-response\n   To: ietf-types@iana.org\n   Subject: Registration\
    \ of MIME media type application/scvp-vp-response\n   MIME media type name: application\n\
    \   MIME subtype name: scvp-vp-response\n   Required parameters: None\n   Optional\
    \ parameters: None\n   Encoding considerations: Binary\n   Security considerations:\
    \ None\n   Interoperability considerations: None\n   Published specification:\
    \ RFC 5055\n   Applications that use this media type: SCVP servers responding\
    \ to\n   validation policy requests\n   Additional information:\n      Magic number(s):\
    \ None\n      File extension(s): .SPP\n      Macintosh File Type Code(s): none\n\
    \   Person & email address to contact for further information:\n   Ambarish Malpani\
    \ <ambarish@yahoo.com>\n   Intended usage: COMMON\n   Restrictions on usage: This\
    \ media type can be used with any protocol\n   that can transport digitally signed\
    \ objects.\n   Author: Ambarish Malpani <ambarish@yahoo.com>\n   Change controller:\
    \ IESG\n"
- title: Appendix B.  SCVP over HTTP
  contents:
  - "Appendix B.  SCVP over HTTP\n   This appendix describes the formatting and transportation\
    \ conventions\n   for the SCVP request and response when carried by HTTP.\n  \
    \ In order for SCVP clients and servers using HTTP to interoperate, the\n   following\
    \ rules apply.\n   -  Clients MUST use the POST method to submit their requests.\n\
    \   -  Servers MUST use the 200 response code for successful responses.\n   -\
    \  Clients MAY attempt to send HTTPS requests using TLS 1.0 or later,\n      although\
    \ servers are not required to support TLS.\n   -  Servers MUST NOT assume client\
    \ support for any type of HTTP\n      authentication such as cookies, Basic authentication,\
    \ or Digest\n      authentication.\n   -  Clients and servers are expected to\
    \ follow the other rules and\n      restrictions in [HTTP].  Note that some of\
    \ those rules are for\n      HTTP methods other than POST; clearly, only the rules\
    \ that apply\n      to POST are relevant for this specification.\n"
- title: B.1.  SCVP Request
  contents:
  - "B.1.  SCVP Request\n   An SCVP request using the POST method is constructed as\
    \ follows:\n   The Content-Type header MUST have the value \"application/scvp-cv-\n\
    \   request\".\n   The body of the message is the binary value of the DER encoding\
    \ of\n   the CVRequest, wrapped in a CMS body as described in Section 3.\n"
- title: B.2.  SCVP Response
  contents:
  - "B.2.  SCVP Response\n   An HTTP-based SCVP response is composed of the appropriate\
    \ HTTP\n   headers, followed by the binary value of the BER encoding of the\n\
    \   CVResponse, wrapped in a CMS body as described in Section 4.\n   The Content-Type\
    \ header MUST have the value \"application/scvp-cv-\n   response\".\n"
- title: B.3.  SCVP Policy Request
  contents:
  - "B.3.  SCVP Policy Request\n   An SCVP request using the POST method is constructed\
    \ as follows:\n      The Content-Type header MUST have the value \"application/scvp-vp-\n\
    \      request\".\n   The body of the message is the binary value of the BER encoding\
    \ of\n   the ValPolRequest, wrapped in a CMS body as described in Section 5.\n"
- title: B.4.  SCVP Policy Response
  contents:
  - "B.4.  SCVP Policy Response\n   An HTTP-based SCVP policy response is composed\
    \ of the appropriate\n   HTTP headers, followed by the binary value of the DER\
    \ encoding of the\n   ValPolResponse, wrapped in a CMS body as described in Section\
    \ 6.  The\n   Content-Type header MUST have the value \"application/scvp-vp-\n\
    \   response\".\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Trevor Freeman\n   Microsoft Corporation,\n   One Microsoft\
    \ Way\n   Redmond, WA 98052\n   USA.\n   EMail: trevorf@microsoft.com\n   Russell\
    \ Housley\n   Vigil Security, LLC\n   918 Spring Knoll Drive\n   Herndon, VA 20170\n\
    \   USA\n   EMail: housley@vigilsec.com\n   Ambarish Malpani\n   Malpani Consulting\
    \ Services\n   EMail: ambarish@yahoo.com\n   David Cooper\n   National Institute\
    \ of Standards and Technology\n   100 Bureau Drive, Mail Stop 8930\n   Gaithersburg,\
    \ MD 20899-8930\n   EMail: david.cooper@nist.gov\n   Tim Polk\n   National Institute\
    \ of Standards and Technology\n   100 Bureau Drive, Mail Stop 8930\n   Gaithersburg,\
    \ MD 20899-8930\n   EMail: wpolk@nist.gov\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The IETF Trust (2007).\n   This document\
    \ is subject to the rights, licenses and restrictions\n   contained in BCP 78,\
    \ and except as set forth therein, the authors\n   retain all their rights.\n\
    \   This document and the information contained herein are provided on an\n  \
    \ \"AS IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n  \
    \ OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY, THE IETF TRUST AND\n   THE\
    \ INTERNET ENGINEERING TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS\n   OR IMPLIED,\
    \ INCLUDING BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF\n   THE INFORMATION\
    \ HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY\
    \ OR FITNESS FOR A PARTICULAR PURPOSE.\n"
- title: Intellectual Property
  contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or\
    \ scope of any\n   Intellectual Property Rights or other rights that might be\
    \ claimed to\n   pertain to the implementation or use of the technology described\
    \ in\n   this document or the extent to which any license under such rights\n\
    \   might or might not be available; nor does it represent that it has\n   made\
    \ any independent effort to identify any such rights.  Information\n   on the\
    \ procedures with respect to rights in RFC documents can be\n   found in BCP 78\
    \ and BCP 79.\n   Copies of IPR disclosures made to the IETF Secretariat and any\n\
    \   assurances of licenses to be made available, or the result of an\n   attempt\
    \ made to obtain a general license or permission for the use of\n   such proprietary\
    \ rights by implementers or users of this\n   specification can be obtained from\
    \ the IETF on-line IPR repository at\n   http://www.ietf.org/ipr.\n   The IETF\
    \ invites any interested party to bring to its attention any\n   copyrights, patents\
    \ or patent applications, or other proprietary\n   rights that may cover technology\
    \ that may be required to implement\n   this standard.  Please address the information\
    \ to the IETF at\n   ietf-ipr@ietf.org.\n"
