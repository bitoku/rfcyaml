- title: __initial_text__
  contents:
  - '     RTP Payload Format for Transport of MPEG-4 Elementary Streams

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2003).  All Rights Reserved.\n"
- title: Abstract
  contents:
  - "Abstract\n   The Motion Picture Experts Group (MPEG) Committee (ISO/IEC JTC1/SC29\n\
    \   WG11) is a working group in ISO that produced the MPEG-4 standard.\n   MPEG\
    \ defines tools to compress content such as audio-visual\n   information into\
    \ elementary streams.  This specification defines a\n   simple, but generic RTP\
    \ payload format for transport of any non-\n   multiplexed MPEG-4 elementary stream.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction . . . . . . . . . . . . . . . . . . .\
    \ . . . . . .  3\n   2.  Carriage of MPEG-4 Elementary Streams Over RTP . . .\
    \ . . . . .  4\n       2.1.  Signaling by MIME Format Parameters  . . . . . .\
    \ . . . .  4\n       2.2.  MPEG Access Units  . . . . . . . . . . . . . . . .\
    \ . . .  5\n       2.3.  Concatenation of Access Units  . . . . . . . . . . .\
    \ . .  5\n       2.4.  Fragmentation of Access Units  . . . . . . . . . . . .\
    \ .  6\n       2.5.  Interleaving . . . . . . . . . . . . . . . . . . . . . .\
    \  6\n       2.6.  Time Stamp Information . . . . . . . . . . . . . . . . .  7\n\
    \       2.7.  State Indication of MPEG-4 System Streams  . . . . . . .  8\n  \
    \     2.8.  Random Access Indication . . . . . . . . . . . . . . . .  8\n    \
    \   2.9.  Carriage of Auxiliary Information  . . . . . . . . . . .  8\n      \
    \ 2.10. MIME Format Parameters and Configuring Conditional Field  8\n       2.11.\
    \ Global Structure of Payload Format . . . . . . . . . . .  9\n       2.12. Modes\
    \ to Transport MPEG-4 Streams  . . . . . . . . . . .  9\n       2.13. Alignment\
    \ with RFC 3016  . . . . . . . . . . . . . . . . 10\n   3.  Payload Format . .\
    \ . . . . . . . . . . . . . . . . . . . . . . 10\n       3.1.  Usage of RTP Header\
    \ Fields and RTCP  . . . . . . . . . . 10\n       3.2.  RTP Payload Structure\
    \  . . . . . . . . . . . . . . . . . 11\n             3.2.1.  The AU Header Section\
    \  . . . . . . . . . . . . . 11\n                     3.2.1.1.  The AU-header\
    \  . . . . . . . . . . . . 12\n             3.2.2.  The Auxiliary Section . .\
    \ . . . . . . . . . . .  14\n             3.2.3.  The Access Unit Data Section\
    \ . . . . . . . . . . 15\n                     3.2.3.1.  Fragmentation. . . .\
    \ . . . . . . . . . 16\n                     3.2.3.2.  Interleaving . . . . .\
    \ . . . . . . . . 16\n                     3.2.3.3.  Constraints for Interleaving\
    \ . . . . . 17\n                     3.2.3.4.  Crucial and Non-Crucial AUs with\n\
    \                               MPEG-4 System Data . . . . . . . . . . 20\n  \
    \     3.3.  Usage of this Specification. . . . . . . . . . . . . . . 21\n    \
    \         3.3.1.  General. . . . . . . . . . . . . . . . . . . . . 21\n      \
    \       3.3.2.  The Generic Mode . . . . . . . . . . . . . . . . 22\n        \
    \     3.3.3.  Constant Bit Rate CELP . . . . . . . . . . . . . 22\n          \
    \   3.3.4.  Variable Bit Rate CELP . . . . . . . . . . . . . 23\n            \
    \ 3.3.5.  Low Bit Rate AAC . . . . . . . . . . . . . . . . 24\n             3.3.6.\
    \  High Bit Rate AAC. . . . . . . . . . . . . . . . 25\n             3.3.7.  Additional\
    \ Modes . . . . . . . . . . . . . . . . 26\n   4.  IANA Considerations. . . .\
    \ . . . . . . . . . . . . . . . . . . 27\n       4.1.  MIME Type Registration\
    \ . . . . . . . . . . . . . . . . . 27\n       4.2.  Registration of Mode Definitions\
    \ with IANA . . . . . . . 33\n       4.3.  Concatenation of Parameters. . . .\
    \ . . . . . . . . . . . 33\n       4.4.  Usage of SDP . . . . . . . . . . . .\
    \ . . . . . . . . . . 34\n             4.4.1.  The a=fmtp Keyword . . . . . .\
    \ . . . . . . . . . 34\n   5.  Security Considerations. . . . . . . . . . . .\
    \ . . . . . . . . 34\n   6.  Acknowledgements . . . . . . . . . . . . . . . .\
    \ . . . . . . . 35\n   APPENDIX: Usage of this Payload Format. . .  . . . . .\
    \ . . . . . . 36\n   Appendix A.  Interleave Analysis . . . . . . . . . . . .\
    \ . . . . . 36\n   A.  Examples of Delay Analysis with Interleave. . .  . . .\
    \ . . . . 36\n       A.1.  Introduction . . . . . . . . . . . . . . . . . . .\
    \ . . . 36\n       A.2.  De-interleaving and Error Concealment  . . . . . . .\
    \ . . 36\n       A.3.  Simple Group Interleave  . . . . . . . . . . . . . . .\
    \ . 36\n             A.3.1.  Introduction . . . . . . . . . . . . . . . . . .\
    \ 36\n             A.3.2.  Determining the De-interleave Buffer Size  . . . 37\n\
    \             A.3.3.  Determining the Maximum Displacement . . . . . . 37\n  \
    \     A.4.  More Subtle Group Interleave . . . . . . . . . . . . . . 38\n    \
    \         A.4.1.  Introduction . . . . . . . . . . . . . . . . . . 38\n      \
    \       A.4.2.  Determining the De-interleave Buffer Size. . . . 38\n        \
    \     A.4.3.  Determining the Maximum Displacement . . . . . . 39\n       A.5.\
    \  Continuous Interleave  . . . . . . . . . . . . . . . . . 39\n             A.5.1.\
    \  Introduction . . . . . . . . . . . . . . . . . . 39\n             A.5.2.  Determining\
    \ the De-interleave Buffer Size  . . . 40\n             A.5.3.  Determining the\
    \ Maximum Displacement . . . . . . 40\n   References . . . . . . . . . . . . .\
    \ . . . . . . . . . . . . . . . 41\n   Normative References . . . . . . . . .\
    \ . . . . . . . . . . . . . . 41\n   Informative References . . . . . . . . .\
    \ . . . . . . . . . . . . . 41\n   Authors' Addresses . . . . . . . . . . . .\
    \ . . . . . . . . . . . . 42\n   Full Copyright Statement . . . . . . . . . .\
    \ . . . . . . . . . . . 43\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   The MPEG Committee is Working Group 11 (WG11) in ISO/IEC\
    \ JTC1 SC29\n   that specified the MPEG-1, MPEG-2 and, more recently, the MPEG-4\n\
    \   standards [1].  The MPEG-4 standard specifies compression of audio-\n   visual\
    \ data into, for example an audio or video elementary stream.\n   In the MPEG-4\
    \ standard, these streams take the form of audio-visual\n   objects that may be\
    \ arranged into an audio-visual scene by means of a\n   scene description.  Each\
    \ MPEG-4 elementary stream consists of a\n   sequence of Access Units; examples\
    \ of an Access Unit (AU) are an\n   audio frame and a video picture.\n   This\
    \ specification defines a general and configurable payload\n   structure to transport\
    \ MPEG-4 elementary streams, in particular\n   MPEG-4 audio (including speech)\
    \ streams, MPEG-4 video streams and\n   also MPEG-4 systems streams, such as BIFS\
    \ (BInary Format for Scenes),\n   OCI (Object Content Information), OD (Object\
    \ Descriptor) and IPMP\n   (Intellectual Property Management and Protection) streams.\
    \  The RTP\n   payload defined in this document is simple to implement and\n \
    \  reasonably efficient.  It allows for optional interleaving of Access\n   Units\
    \ (such as audio frames) to increase error resiliency in packet\n   loss.\n  \
    \ Some types of MPEG-4 elementary streams include \"crucial\" information\n  \
    \ whose loss cannot be tolerated.  However, RTP does not provide\n   reliable\
    \ transmission, so receipt of that crucial information is not\n   assured.  Section\
    \ 3.2.3.4 specifies how stream state is conveyed so\n   that the receiver can\
    \ detect the loss of crucial information and\n   cease decoding until the next\
    \ random access point has been received.\n   Applications transmitting streams\
    \ that include crucial information,\n   such as OD commands, BIFS commands, or\
    \ programmatic content such as\n   MPEG-J (Java) and ECMAScript, should include\
    \ random access points, at\n   a suitable periodicity depending upon the probability\
    \ of loss, in\n   order to reduce stream corruption to an acceptable level.  An\
    \ example\n   is the carousel mechanism as defined by MPEG in ISO/IEC 14496-1\
    \ [1].\n   Such applications may also employ additional protocols or services\
    \ to\n   reduce the probability of loss.  At the RTP layer, these measures\n \
    \  include payload formats and profiles for retransmission or forward\n   error\
    \ correction (such as in RFC 2733 [10]), that must be employed\n   with due consideration\
    \ to congestion control.  Another solution that\n   may be appropriate for some\
    \ applications is to carry RTP over TCP\n   (such as in RFC 2326 [8], section\
    \ 10.12).  At the network layer,\n   resource allocation or preferential service\
    \ may be available to\n   reduce the probability of loss.  For a general description\
    \ of methods\n   to repair streaming media, see RFC 2354 [9].\n   Though the RTP\
    \ payload format defined in this document is capable of\n   transporting any MPEG-4\
    \ stream, other, more specific, formats may\n   exist, such as RFC 3016 [12] for\
    \ transport of MPEG-4 video (ISO/IEC\n   14496 [1] part 2).\n   Configuration\
    \ of the payload is provided to accommodate the\n   transportation of any MPEG-4\
    \ stream at any possible bit rate.\n   However, for a specific MPEG-4 elementary\
    \ stream typically only very\n   few configurations are needed.  So as to allow\
    \ for the design of\n   simplified, but dedicated receivers, this specification\
    \ requires that\n   specific modes be defined for transport of MPEG-4 streams.\
    \  This\n   document defines modes for MPEG-4 CELP and AAC streams, as well as\
    \ a\n   generic mode that can be used to transport any MPEG-4 stream.  In the\n\
    \   future, new RFCs are expected to specify additional modes for the\n   transportation\
    \ of MPEG-4 streams.\n   The RTP payload format defined in this document specifies\
    \ carriage of\n   system-related information that is often equivalent to the\n\
    \   information that may be contained in the MPEG-4 Sync Layer (SL) as\n   defined\
    \ in MPEG-4 Systems [1].  This document does not prescribe how\n   to transcode\
    \ or map information from the SL to fields defined in the\n   RTP payload format.\
    \  Such processing, if any, is left to the\n   discretion of the application.\
    \  However, to anticipate the need for\n   the transportation of any additional\
    \ system-related information in\n   the future, an auxiliary field can be configured\
    \ that may carry any\n   such data.\n   The key words \"MUST\", \"MUST NOT\",\
    \ \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\"\
    ,  \"MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described\
    \ in BCP 14, RFC 2119 [4].\n"
- title: 2.  Carriage of MPEG-4 Elementary Streams over RTP
  contents:
  - '2.  Carriage of MPEG-4 Elementary Streams over RTP

    '
- title: 2.1.  Signaling by MIME Format Parameters
  contents:
  - "2.1.  Signaling by MIME Format Parameters\n   With this payload format, a single\
    \ MPEG-4 elementary stream can be\n   transported.  Information on the type of\
    \ MPEG-4 stream carried in the\n   payload is conveyed by MIME format parameters,\
    \ as in an SDP [5]\n   message or by other means (see section 4).  These MIME\
    \ format\n   parameters specify the configuration of the payload.  To allow for\n\
    \   simplified and dedicated receivers, a MIME format parameter is\n   available\
    \ to signal a specific mode of using this payload.  A mode\n   definition MAY\
    \ include the type of MPEG-4 elementary stream, as well\n   as the applied configuration,\
    \ so as to avoid the need for receivers\n   to parse all MIME format parameters.\
    \  The applied mode MUST be\n   signaled.\n"
- title: 2.2.  MPEG Access Units
  contents:
  - "2.2.  MPEG Access Units\n   For carriage of compressed audio-visual data, MPEG\
    \ defines Access\n   Units.  An MPEG Access Unit (AU) is the smallest data entity\
    \ to which\n   timing information is attributed.  In the case of audio, an Access\n\
    \   Unit may represent an audio frame and in the case of video, a\n   picture.\
    \  MPEG Access Units are octet-aligned by definition.  If, for\n   example, an\
    \ audio frame is not octet-aligned, up to 7 zero-padding\n   bits MUST be inserted\
    \ at the end of the frame to achieve the octet-\n   aligned Access Units, as required\
    \ by the MPEG-4 specification.\n   MPEG-4 decoders MUST be able to decode AUs\
    \ in which such padding is\n   applied.\n   Consistent with the MPEG-4 specification,\
    \ this document requires that\n   each MPEG-4 part 2 video Access Unit include\
    \ all the coded data of a\n   picture, any video stream headers that may precede\
    \ the coded picture\n   data, and any video stream stuffing that may follow it,\
    \ up to but not\n   including the startcode indicating the start of a new video\
    \ stream or\n   the next Access Unit.\n"
- title: 2.3.  Concatenation of Access Units
  contents:
  - "2.3.  Concatenation of Access Units\n   Frequently it is possible to carry multiple\
    \ Access Units in one RTP\n   packet.  This is particularly useful for audio;\
    \ for example, when AAC\n   is used for encoding a stereo signal at 64 kbits/sec,\
    \ AAC frames\n   contain on average, approximately 200 octets.  On a LAN with\
    \ a 1500\n   octet MTU, this would allow an average of 7 complete AAC frames to\
    \ be\n   carried per RTP packet.\n   Access Units may have a fixed size in octets,\
    \ but a variable size is\n   also possible.  To facilitate parsing in the case\
    \ of multiple\n   concatenated AUs in one RTP packet, the size of each AU is made\
    \ known\n   to the receiver.  When concatenating in the case of a constant AU\n\
    \   size, this size is communicated \"out of band\" through a MIME format\n  \
    \ parameter.  When concatenating in case of variable size AUs, the RTP\n   payload\
    \ carries \"in band\" an AU size field for each contained AU.\n   In combination\
    \ with the RTP payload length, the size information\n   allows the RTP payload\
    \ to be split by the receiver back into the\n   individual AUs.\n   To simplify\
    \ the implementation of RTP receivers, it is required that\n   when multiple AUs\
    \ are carried in an RTP packet, each AU MUST be\n   complete, i.e., the number\
    \ of AUs in an RTP packet MUST be integral.\n   In addition, an AU MUST NOT be\
    \ repeated in other RTP packets; hence\n   repetition of an AU is only possible\
    \ when using a duplicate RTP\n   packet.\n"
- title: 2.4.  Fragmentation of Access Units
  contents:
  - "2.4.  Fragmentation of Access Units\n   MPEG allows for very large Access Units.\
    \  Since most IP networks have\n   significantly smaller MTU sizes, this payload\
    \ format allows for the\n   fragmentation of an Access Unit over multiple RTP\
    \ packets.  Hence,\n   when an IP packet is lost after IP-level fragmentation,\
    \ only an AU\n   fragment may get lost instead of the entire AU.  To simplify\
    \ the\n   implementation of RTP receivers, an RTP packet SHALL either carry one\n\
    \   or more complete Access Units or a single fragment of one AU, i.e.,\n   packets\
    \ MUST NOT contain fragments of multiple Access Units.\n"
- title: 2.5.  Interleaving
  contents:
  - "2.5.  Interleaving\n   When an RTP packet carries a contiguous sequence of Access\
    \ Units, the\n   loss of such a packet can result in a \"decoding gap\" for the\
    \ user.\n   One method of alleviating this problem is to allow for the Access\n\
    \   Units to be interleaved in the RTP packets.  For a modest cost in\n   latency\
    \ and implementation complexity, significant error resiliency\n   to packet loss\
    \ can be achieved.\n   To support optional interleaving of Access Units, this\
    \ payload format\n   allows for index information to be sent for each Access Unit.\
    \  After\n   informing receivers about buffer resources to allocate for de-\n\
    \   interleaving, the RTP sender is free to choose the interleaving\n   pattern\
    \ without propagating this information a priori to the\n   receiver(s).  Indeed,\
    \ the sender could dynamically adjust the\n   interleaving pattern based on the\
    \ Access Unit size, error rates, etc.\n   The RTP receiver does not need to know\
    \ the interleaving pattern used;\n   it only needs to extract the index information\
    \ of the Access Unit and\n   insert the Access Unit into the appropriate sequence\
    \ in the decoding\n   or rendering queue.  An example of interleaving is given\
    \ below.\n   For example, if we assume that an RTP packet contains 3 AUs, and\
    \ that\n   the AUs are numbered 0, 1, 2, 3, 4, and so forth, and if an\n   interleaving\
    \ group length of 9 is chosen, then RTP packet(i) contains\n   the following AU(n):\n\
    \      RTP packet(0):  AU(0),  AU(3),  AU(6)\n      RTP packet(1):  AU(1),  AU(4),\
    \  AU(7)\n      RTP packet(2):  AU(2),  AU(5),  AU(8)\n      RTP packet(3):  AU(9),\
    \  AU(12), AU(15)\n      RTP packet(4):  AU(10), AU(13), AU(16)  Etc.\n"
- title: 2.6.  Time Stamp Information
  contents:
  - "2.6.  Time Stamp Information\n   The RTP time stamp MUST carry the sampling instant\
    \ of the first AU\n   (fragment) in the RTP packet.  When multiple AUs are carried\
    \ within\n   an RTP packet, the time stamps of subsequent AUs can be calculated\
    \ if\n   the frame period of each AU is known.  For audio and video, this is\n\
    \   possible if the frame rate is constant.  However, in some cases it is\n  \
    \ not possible to make such a calculation (for example, for variable\n   frame\
    \ rate video, or for MPEG-4 BIFS streams carrying composition\n   information).\
    \  To support such cases, this payload format can be\n   configured to carry a\
    \ time stamp in the RTP payload for each\n   contained Access Unit.  A time stamp\
    \ MAY be conveyed in the RTP\n   payload only for non-first AUs in the RTP packet,\
    \ and SHALL NOT be\n   conveyed for the first AU (fragment), as the time stamp\
    \ for the first\n   AU in the RTP packet is carried by the RTP time stamp.\n \
    \  MPEG-4 defines two types of time stamps: the composition time stamp\n   (CTS)\
    \ and the decoding time stamp (DTS).  The CTS represents the\n   sampling instant\
    \ of an AU, and hence the CTS is equivalent to the RTP\n   time stamp.  The DTS\
    \ may be used in MPEG-4 video streams that use\n   bi-directional coding, i.e.,\
    \ when pictures are predicted in both\n   forward and backward direction by using\
    \ either a reference picture in\n   the past, or a reference picture in the future.\
    \  The DTS cannot be\n   carried in the RTP header.  In some cases, the DTS can\
    \ be derived\n   from the RTP time stamp using frame rate information; this requires\n\
    \   deep parsing in the video stream, which may be considered\n   objectionable.\
    \  If the video frame rate is variable, the required\n   information may not even\
    \ be present in the video stream.  For both\n   reasons, the capability has been\
    \ defined to optionally carry the DTS\n   in the RTP payload for each contained\
    \ Access Unit.\n   To keep the coding of time stamps efficient, each time stamp\n\
    \   contained in the RTP payload is coded as a difference.  For the CTS,\n   the\
    \ offset from the RTP time stamps is provided, and for the DTS, the\n   offset\
    \ from the CTS.\n"
- title: 2.7.  State Indication of MPEG-4 System Streams
  contents:
  - "2.7.  State Indication of MPEG-4 System Streams\n   ISO/IEC 14496-1 defines states\
    \ for MPEG-4 system streams.  So as to\n   convey state information when transporting\
    \ MPEG-4 system streams,\n   this payload format allows for the optional carriage\
    \ in the RTP\n   payload of the stream state for each contained Access Unit. \
    \ Stream\n   states are used to signal \"crucial\" AUs that carry information\
    \ whose\n   loss cannot be tolerated and are also useful when repeating AUs\n\
    \   according to the carousel mechanism defined in ISO/IEC 14496-1.\n"
- title: 2.8.  Random Access Indication
  contents:
  - "2.8.  Random Access Indication\n   Random access to the content of MPEG-4 elementary\
    \ streams may be\n   possible at some but not all Access Units.  To signal Access\
    \ Units\n   where random access is possible, a random access point flag can\n\
    \   optionally be carried in the RTP payload for each contained Access\n   Unit.\
    \  Carriage of random access points is particularly useful for\n   MPEG-4 system\
    \ streams in combination with the stream state.\n"
- title: 2.9.  Carriage of Auxiliary Information
  contents:
  - "2.9.  Carriage of Auxiliary Information\n   This payload format defines a specific\
    \ field to carry auxiliary data.\n   The auxiliary data field is preceded by a\
    \ field that specifies the\n   length of the auxiliary data, so as to facilitate\
    \ the skipping of\n   data without parsing it.  The coding of the auxiliary data\
    \ is not\n   defined in this document; instead, the format, meaning and signaling\n\
    \   of auxiliary information is expected to be specified in one or more\n   future\
    \ RFCs.  Auxiliary information MUST NOT be transmitted until its\n   format, meaning\
    \ and signaling have been specified and its use has\n   been signaled.  Receivers\
    \ that have knowledge of the auxiliary data\n   MAY decode the auxiliary data,\
    \ but receivers without knowledge of\n   such data MUST skip the auxiliary data\
    \ field.\n"
- title: 2.10.  MIME Format Parameters and Configuring Conditional Fields
  contents:
  - "2.10.  MIME Format Parameters and Configuring Conditional Fields\n   To support\
    \ the features described in the previous sections, several\n   fields are defined\
    \ for carriage in the RTP payload.  However, their\n   use strongly depends on\
    \ the type of MPEG-4 elementary stream that is\n   carried.  Sometimes a specific\
    \ field is needed with a certain length,\n   while in other cases such a field\
    \ is not needed.  To be efficient in\n   either case, the fields to support these\
    \ features are configurable by\n   means of MIME format parameters.  In general,\
    \ a MIME format parameter\n   defines the presence and length of the associated\
    \ field.  A length of\n   zero indicates absence of the field.  As a consequence,\
    \ parsing of\n   the payload requires knowledge of MIME format parameters.  The\
    \ MIME\n   format parameters are conveyed to the receiver via SDP [5] messages,\n\
    \   as specified in section 4.4.1, or through other means.\n"
- title: 2.11.  Global Structure of Payload Format
  contents:
  - "2.11.  Global Structure of Payload Format\n   The RTP payload following the RTP\
    \ header, contains three octet-\n   aligned data sections, of which the first\
    \ two MAY be empty, see\n   Figure 1.\n         +---------+-----------+-----------+---------------+\n\
    \         | RTP     | AU Header | Auxiliary | Access Unit   |\n         | Header\
    \  | Section   | Section   | Data Section  |\n         +---------+-----------+-----------+---------------+\n\
    \                   <----------RTP Packet Payload----------->\n            Figure\
    \ 1: Data sections within an RTP packet\n   The first data section is the AU (Access\
    \ Unit) Header Section, that\n   contains one or more AU-headers; however, each\
    \ AU-header MAY be\n   empty, in which case the entire AU Header Section is empty.\
    \  The\n   second section is the Auxiliary Section, containing auxiliary data;\n\
    \   this section MAY also be configured empty.  The third section is the\n   Access\
    \ Unit Data Section, containing either a single fragment of one\n   Access Unit\
    \ or one or more complete Access Units.  The Access Unit\n   Data Section MUST\
    \ NOT be empty.\n"
- title: 2.12.  Modes to Transport MPEG-4 Streams
  contents:
  - "2.12.  Modes to Transport MPEG-4 Streams\n   While it is possible to build fully\
    \ configurable receivers capable of\n   receiving any MPEG-4 stream, this specification\
    \ also allows for the\n   design of simplified, but dedicated receivers, that\
    \ are for example,\n   capable of receiving only one type of MPEG-4 stream.  This\
    \ is\n   achieved by requiring that specific modes be defined in order to use\n\
    \   this specification.  Each mode may define constraints for transport\n   of\
    \ one or more types of MPEG-4 streams, for instance on the payload\n   configuration.\n\
    \   The applied mode MUST be signaled.  Signaling the mode is\n   particularly\
    \ important for receivers that are only capable of\n   decoding one or more specific\
    \ modes.  Such receivers need to\n   determine whether the applied mode is supported,\
    \ so as to avoid\n   problems with processing of payloads that are beyond the\
    \ capabilities\n   of the receiver.\n   In this document several modes are defined\
    \ for the transportation of\n   MPEG-4 CELP and AAC streams, as well as a generic\
    \ mode that can be\n   used for any MPEG-4 stream.  In the future, new RFCs may\
    \ specify\n   other modes of using this specification.  However, each mode MUST\
    \ be\n   in full compliance with this specification (see section 3.3.7).\n"
- title: 2.13.  Alignment with RFC 3016
  contents:
  - "2.13.  Alignment with RFC 3016\n   This payload can be configured as nearly identical\
    \ to the payload\n   format defined in RFC 3016 [12] for the MPEG-4 video configurations\n\
    \   recommended in RFC 3016.  Hence, receivers that comply with RFC 3016\n   can\
    \ decode such RTP payload, provided that additional packets\n   containing video\
    \ decoder configuration (VO, VOL, VOSH) are inserted\n   in the stream, as required\
    \ by RFC 3016 [12].  Conversely, receivers\n   that comply with the specification\
    \ in this document SHOULD be able to\n   decode payloads, names and parameters\
    \ defined for MPEG-4 video in RFC\n   3016 [12].  In this respect, it is strongly\
    \ RECOMMENDED that the\n   implementation provide the ability to ignore \"in band\"\
    \ video decoder\n   configuration packets that may be found in streams conforming\
    \ to the\n   RFC 3016 video payload.\n   Note the \"out of band\" availability\
    \ of the video decoder\n   configuration is optional in RFC 3016 [12].  To achieve\
    \ maximum\n   interoperability with the RTP payload format defined in this\n \
    \  document, applications that use RFC 3016 to transport MPEG-4 video\n   (part\
    \ 2) are recommended to make the video decoder configuration\n   available as\
    \ a MIME parameter.\n"
- title: 3.  Payload Format
  contents:
  - '3.  Payload Format

    '
- title: 3.1.  Usage of RTP Header Fields and RTCP
  contents:
  - "3.1.  Usage of RTP Header Fields and RTCP\n   Payload Type (PT): The assignment\
    \ of an RTP payload type for this\n      packet format is outside the scope of\
    \ this document; it is\n      specified by the RTP profile under which this payload\
    \ format is\n      used, or signaled dynamically out-of-band (e.g., using SDP).\n\
    \   Marker (M) bit: The M bit is set to 1 to indicate that the RTP packet\n  \
    \    payload contains either the final fragment of a fragmented Access\n     \
    \ Unit or one or more complete Access Units.\n   Extension (X) bit: Defined by\
    \ the RTP profile used.\n   Sequence Number: The RTP sequence number SHOULD be\
    \ generated by the\n      sender in the usual manner with a constant random offset.\n\
    \   Timestamp: Indicates the sampling instant of the first AU contained\n    \
    \  in the RTP payload.  This sampling instant is equivalent to the\n      CTS\
    \ in the MPEG-4 time domain.  When using SDP, the clock rate of\n      the RTP\
    \ time stamp MUST be expressed using the \"rtpmap\" attribute.\n      If an MPEG-4\
    \ audio stream is transported, the rate SHOULD be set\n      to the same value\
    \ as the sampling rate of the audio stream.  If an\n      MPEG-4 video stream\
    \ is transported, it is RECOMMENDED that the\n      rate be set to 90 kHz.\n \
    \  In all cases, the sender SHALL make sure that RTP time stamps are\n   identical\
    \ only if the RTP time stamp refers to fragments of the same\n   Access Unit.\n\
    \   According to RFC 3550 [2] (section 5.1), it is RECOMMENDED that RTP\n   time\
    \ stamps start at a random value for security reasons.  This is\n   not an issue\
    \ for synchronization of multiple RTP streams.  However,\n   when streams from\
    \ multiple sources are to be synchronized (for\n   example one stream from local\
    \ storage, another from an RTP streaming\n   server), synchronization may become\
    \ impossible if the receiver only\n   knows the original time stamp relationships.\
    \  In such cases the time\n   stamp relationship required for obtaining synchronization\
    \ may be\n   provided by out of band means.  The format of such information, as\n\
    \   well as methods to convey such information, are beyond the scope of\n   this\
    \ specification.\n   SSRC: set as described in RFC 3550 [2].\n   CC and CSRC fields\
    \ are used as described in RFC 3550 [2].\n   RTCP SHOULD be used as defined in\
    \ RFC 3550 [2].  Note that time\n   stamps in RTCP Sender Reports may be used\
    \ to synchronize multiple\n   MPEG-4 elementary streams and also to synchronize\
    \ MPEG-4 streams with\n   non-MPEG-4 streams, in case the delivery of these streams\
    \ uses RTP.\n"
- title: 3.2.  RTP Payload Structure
  contents:
  - '3.2.  RTP Payload Structure

    '
- title: 3.2.1.  The AU Header Section
  contents:
  - "3.2.1.  The AU Header Section\n   When present, the AU Header Section consists\
    \ of the AU-headers-length\n   field, followed by a number of AU-headers, see\
    \ Figure 2.\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+- .. -+-+-+-+-+-+-+-+-+-+\n\
    \      |AU-headers-length|AU-header|AU-header|      |AU-header|padding|\n    \
    \  |                 |   (1)   |   (2)   |      |   (n)   | bits  |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-\
    \ .. -+-+-+-+-+-+-+-+-+-+\n                   Figure 2: The AU Header Section\n\
    \   The AU-headers are configured using MIME format parameters and MAY be\n  \
    \ empty.  If the AU-header is configured empty, the AU-headers-length\n   field\
    \ SHALL NOT be present and consequently the AU Header Section is\n   empty.  If\
    \ the AU-header is not configured empty, then the AU-\n   headers-length is a\
    \ two octet field that specifies the length in bits\n   of the immediately following\
    \ AU-headers, excluding the padding bits.\n   Each AU-header is associated with\
    \ a single Access Unit (fragment)\n   contained in the Access Unit Data Section\
    \ in the same RTP packet.\n   For each contained Access Unit (fragment), there\
    \ is exactly one AU-\n   header.  Within the AU Header Section, the AU-headers\
    \ are bit-wise\n   concatenated in the order in which the Access Units are contained\
    \ in\n   the Access Unit Data Section.  Hence, the n-th AU-header refers to\n\
    \   the n-th AU (fragment).  If the concatenated AU-headers consume a\n   non-integer\
    \ number of octets, up to 7 zero-padding bits MUST be\n   inserted at the end\
    \ in order to achieve octet-alignment of the AU\n   Header Section.\n"
- title: 3.2.1.1.  The AU-header
  contents:
  - "3.2.1.1.  The AU-header\n   Each AU-header may contain the fields given in Figure\
    \ 3.  The length\n   in bits of the fields, with the exception of the CTS-flag,\
    \ the\n   DTS-flag and the RAP-flag fields, is defined by MIME format\n   parameters;\
    \ see section 4.1.  If a MIME format parameter has the\n   default value of zero,\
    \ then the associated field is not present.  The\n   number of bits for fields\
    \ that are present and that represent the\n   value of a parameter MUST be chosen\
    \ large enough to correctly encode\n   the largest value of that parameter during\
    \ the session.\n   If present, the fields MUST occur in the mutual order given\
    \ in Figure\n   3.  In the general case, a receiver can only discover the size\
    \ of an\n   AU-header by parsing it since the presence of the CTS-delta and DTS-\n\
    \   delta fields is signaled by the value of the CTS-flag and DTS-flag,\n   respectively.\n\
    \      +---------------------------------------+\n      |     AU-size        \
    \                   |\n      +---------------------------------------+\n     \
    \ |     AU-Index / AU-Index-delta         |\n      +---------------------------------------+\n\
    \      |     CTS-flag                          |\n      +---------------------------------------+\n\
    \      |     CTS-delta                         |\n      +---------------------------------------+\n\
    \      |     DTS-flag                          |\n      +---------------------------------------+\n\
    \      |     DTS-delta                         |\n      +---------------------------------------+\n\
    \      |     RAP-flag                          |\n      +---------------------------------------+\n\
    \      |     Stream-state                      |\n      +---------------------------------------+\n\
    \   Figure 3: The fields in the AU-header.  If used, the AU-Index field\n    \
    \         only occurs in the first AU-header within an AU Header\n           \
    \  Section; in any other AU-header, the AU-Index-delta field\n             occurs\
    \ instead.\n   AU-size: Indicates the size in octets of the associated Access\
    \ Unit\n      in the Access Unit Data Section in the same RTP packet.  When the\n\
    \      AU-size is associated with an AU fragment, the AU size indicates\n    \
    \  the size of the entire AU and not the size of the fragment.  In\n      this\
    \ case, the size of the fragment is known from the size of the\n      AU data\
    \ section.  This can be exploited to determine whether a\n      packet contains\
    \ an entire AU or a fragment, which is particularly\n      useful after losing\
    \ a packet carrying the last fragment of an AU.\n   AU-Index: Indicates the serial\
    \ number of the associated Access Unit\n      (fragment).  For each (in decoding\
    \ order) consecutive AU or AU\n      fragment, the serial number is incremented\
    \ by 1.  When present,\n      the AU-Index field occurs in the first AU-header\
    \ in the AU Header\n      Section, but MUST NOT occur in any subsequent (non-first)\
    \ AU-\n      header in that Section.  To encode the serial number in any such\n\
    \      non-first AU-header, the AU-Index-delta field is used.\n   AU-Index-delta:\
    \ The AU-Index-delta field is an unsigned integer that\n      specifies the serial\
    \ number of the associated AU as the difference\n      with respect to the serial\
    \ number of the previous Access Unit.\n      Hence, for the n-th (n>1) AU, the\
    \ serial number is found from:\n      AU-Index(n) = AU-Index(n-1) + AU-Index-delta(n)\
    \ + 1\n      If the AU-Index field is present in the first AU-header in the AU\n\
    \      Header Section, then the AU-Index-delta field MUST be present in\n    \
    \  any subsequent (non-first) AU-header.  When the AU-Index-delta is\n      coded\
    \ with the value 0, it indicates that the Access Units are\n      consecutive\
    \ in decoding order.  An AU-Index-delta value larger\n      than 0 signals that\
    \ interleaving is applied.\n   CTS-flag: Indicates whether the CTS-delta field\
    \ is present.  A value\n      of 1 indicates that the field is present, a value\
    \ of 0 indicates\n      that it is not present.\n      The CTS-flag field MUST\
    \ be present in each AU-header if the length\n      of the CTS-delta field is\
    \ signaled to be larger than zero.  In\n      that case, the CTS-flag field MUST\
    \ have the value 0 in the first\n      AU-header and MAY have the value 1 in all\
    \ non-first AU-headers.\n      The CTS-flag field SHOULD be 0 for any non-first\
    \ fragment of an\n      Access Unit.\n   CTS-delta: Encodes the CTS by specifying\
    \ the value of CTS as a 2's\n      complement offset (delta) from the time stamp\
    \ in the RTP header of\n      this RTP packet.  The CTS MUST use the same clock\
    \ rate as the time\n      stamp in the RTP header.\n   DTS-flag: Indicates whether\
    \ the DTS-delta field is present.  A value\n      of 1 indicates that DTS-delta\
    \ is present, a value of 0 indicates\n      that it is not present.\n      The\
    \ DTS-flag field MUST be present in each AU-header if the length\n      of the\
    \ DTS-delta field is signaled to be larger than zero.  The\n      DTS-flag field\
    \ MUST have the same value for all fragments of an\n      Access Unit.\n   DTS-delta:\
    \ Specifies the value of the DTS as a 2's complement offset\n      (delta) from\
    \ the CTS.  The DTS MUST use the same clock rate as the\n      time stamp in the\
    \ RTP header.  The DTS-delta field MUST have the\n      same value for all fragments\
    \ of an Access Unit.\n   RAP-flag: When set to 1, indicates that the associated\
    \ Access Unit\n      provides a random access point to the content of the stream.\
    \  If\n      an Access Unit is fragmented, the RAP flag, if present, MUST be\n\
    \      set to 0 for each non-first fragment of the AU.\n   Stream-state:  Specifies\
    \ the state of the stream for an AU of an\n      MPEG-4 system stream; each state\
    \ is identified by a value of a\n      modulo counter.  In ISO/IEC 14496-1, MPEG-4\
    \ system streams use the\n      AU_SequenceNumber to signal stream states.  When\
    \ the stream state\n      changes, the value of the stream-state MUST be incremented\
    \ by one.\n      Note: no relation is required between stream-states of different\n\
    \      streams.\n"
- title: 3.2.2.  The Auxiliary Section
  contents:
  - "3.2.2.  The Auxiliary Section\n   The Auxiliary Section consists of the auxiliary-data-size\
    \ field\n   followed by the auxiliary-data field.  Receivers MAY (but are not\n\
    \   required to) parse the auxiliary-data field; to facilitate skipping\n   of\
    \ the auxiliary-data field by receivers, the auxiliary-data-size\n   field indicates\
    \ the length in bits of the auxiliary-data.  If the\n   concatenation of the auxiliary-data-size\
    \ and the auxiliary-data\n   fields consume a non-integer number of octets, up\
    \ to 7 zero padding\n   bits MUST be inserted immediately after the auxiliary\
    \ data in order\n   to achieve octet-alignment.  See Figure 4.\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-\
    \ .. -+-+-+-+-+-+-+-+-+\n      | auxiliary-data-size   | auxiliary-data      \
    \ |padding bits |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+- .. -+-+-+-+-+-+-+-+-+\n\
    \           Figure 4: The fields in the Auxiliary Section\n   The length in bits\
    \ of the auxiliary-data-size field is configurable\n   by a MIME format parameter;\
    \ see section 4.1.  The default length of\n   zero indicates that the entire Auxiliary\
    \ Section is absent.\n   auxiliary-data-size: specifies the length in bits of\
    \ the immediately\n      following auxiliary-data field;\n   auxiliary-data: the\
    \ auxiliary-data field contains data of a format\n      not defined by this specification.\n"
- title: 3.2.3.  The Access Unit Data Section
  contents:
  - "3.2.3.  The Access Unit Data Section\n   The Access Unit Data Section contains\
    \ an integer number of complete\n   Access Units or a single fragment of one AU.\
    \  The Access Unit Data\n   Section is never empty.  If data of more than one\
    \ Access Unit is\n   present, then the AUs are concatenated into a contiguous\
    \ string of\n   octets.  See Figure 5.  The AUs inside the Access Unit Data Section\n\
    \   MUST be in decoding order, though not necessarily contiguous in the\n   case\
    \ of interleaving.\n   The size and number of Access Units SHOULD be adjusted\
    \ such that the\n   resulting RTP packet is not larger than the path MTU.  To\
    \ handle\n   larger packets, this payload format relies on lower layers for\n\
    \   fragmentation, which may result in reduced performance.\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |AU(1)                                                          |\n   \
    \   +                                                               |\n      |\
    \                                                               |\n      |   \
    \            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |      \
    \         |AU(2)                                          |\n      +-+-+-+-+-+-+-+-+\
    \                                               |\n      |                   \
    \                                            |\n      |                      \
    \         +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |                         \
    \      | AU(n)                         |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |AU(n) continued|\n      |-+-+-+-+-+-+-+-+\n        Figure 5: Access Unit\
    \ Data Section; each AU is octet-aligned.\n   When multiple Access Units are carried,\
    \ the size of each AU MUST be\n   made available to the receiver.  If the AU size\
    \ is variable, then the\n   size of each AU MUST be indicated in the AU-size field\
    \ of the\n   corresponding AU-header.  However, if the AU size is constant for\
    \ a\n   stream, this mechanism SHOULD NOT be used; instead, the fixed size\n \
    \  SHOULD be signaled by the MIME format parameter \"constantSize\"; see\n   section\
    \ 4.1.\n   The absence of both AU-size in the AU-header and the constantSize\n\
    \   MIME format parameter indicates the carriage of a single AU\n   (fragment),\
    \ i.e., that a single Access Unit (fragment) is transported\n   in each RTP packet\
    \ for that stream.\n"
- title: 3.2.3.1.  Fragmentation
  contents:
  - "3.2.3.1.  Fragmentation\n   A packet SHALL carry either one or more complete\
    \ Access Units, or a\n   single fragment of an Access Unit.  Fragments of the\
    \ same Access Unit\n   have the same time stamp but different RTP sequence numbers.\
    \  The\n   marker bit in the RTP header is 1 on the last fragment of an Access\n\
    \   Unit, and 0 on all other fragments.\n"
- title: 3.2.3.2.  Interleaving
  contents:
  - "3.2.3.2.  Interleaving\n   Unless prohibited by the signaled mode, a sender MAY\
    \ interleave\n   Access Units.  Receivers that are capable of receiving modes\
    \ that\n   support interleaving MUST be able to decode interleaved Access Units.\n\
    \   When a sender interleaves Access Units, it needs to provide\n   sufficient\
    \ information to enable a receiver to unambiguously\n   reconstruct the original\
    \ order, even in the case of out-of-order\n   packets, packet loss or duplication.\
    \  The information that senders\n   need to provide depends on whether or not\
    \ the Access Units have a\n   constant time duration.  Access Units have a constant\
    \ time duration,\n   if:\n   TS(i+1) - TS(i) = constant\n       for any i, where:\n\
    \          i indicates the index of the AU in the original order, and\n      \
    \    TS(i) denotes the time stamp of AU(i)\n   The MIME parameter \"constantDuration\"\
    \ SHOULD be used to signal that\n   Access Units have a constant time duration;\
    \ see section 4.1.\n   If the \"constantDuration\" parameter is present, the receiver\
    \ can\n   reconstruct the original Access Unit timing based solely on the RTP\n\
    \   timestamp and AU-Index-delta.  Accordingly, when transmitting Access\n   Units\
    \ of constant duration, the AU-Index, if present, MUST be set to\n   the value\
    \ 0.  Receivers of constant duration Access Units MUST use\n   the RTP timestamp\
    \ to determine the index of the first AU in the RTP\n   packet.  The AU-Index-delta\
    \ header and the signaled\n   \"constantDuration\" are used to reconstruct AU\
    \ timing.\n   If the \"constantDuration\" parameter is not present, then senders\
    \ MAY\n   signal AUs of constant duration by coding the AU-Index with zero in\n\
    \   each RTP packet.  In the absence of the constantDuration parameter\n   receivers\
    \ MUST conclude that the AUs have constant duration if the\n   AU-index is zero\
    \ in two consecutive RTP packets.\n   When transmitting Access Units of variable\
    \ duration, then the\n   \"constantDuration\" parameter MUST NOT be present, and\
    \ the transmitter\n   MUST use the AU-Index to encode the index information required\
    \ for\n   re-ordering, and the receiver MUST use that value to determine the\n\
    \   index of each AU in the RTP packet.  The number of bits of the AU-\n   Index\
    \ field MUST be chosen so that valid index information is\n   provided at the\
    \ applied interleaving scheme, without causing problems\n   due to roll-over of\
    \ the AU-Index field.  In addition, the CTS-delta\n   MUST be coded in the AU\
    \ header for each non-first AU in the RTP\n   packet, so that receivers can place\
    \ the AUs correctly in time.\n   When interleaving is applied, a de-interleave\
    \ buffer is needed in\n   receivers to put the Access Units in their correct logical\n\
    \   consecutive decoding order.  This requires the computation of the\n   time\
    \ stamp for each Access Unit.  In case of a constant time duration\n   per Access\
    \ Unit, the time stamp of the i-th access unit in an RTP\n   packet with RTP time\
    \ stamp T is calculated as follows:\n   Timestamp[0] = T\n   Timestamp[i, i >\
    \ 0] = T +(Sum(for k=1 to i of (AU-Index-delta[k]\n                         +\
    \ 1))) * access-unit-duration\n   When AU-Index-delta is always 0, this reduces\
    \ to T + i * (access-\n   unit-duration).  This is the non-interleaved case, where\
    \ the frames\n   are consecutive in decoding order.  Note that the AU-Index field\n\
    \   (present for the first Access Unit) is indeed not needed in this\n   calculation.\n"
- title: 3.2.3.3.  Constraints for Interleaving
  contents:
  - "3.2.3.3.  Constraints for Interleaving\n   The size of the packets should be\
    \ suitably chosen to be appropriate\n   to both the path MTU and the capacity\
    \ of the receiver's de-interleave\n   buffer.  The maximum packet size for a session\
    \ SHOULD be chosen to\n   not exceed the path MTU.\n   To allow receivers to allocate\
    \ sufficient resources for de-\n   interleaving, senders MUST provide the information\
    \ to receivers as\n   specified in this section.\n   AUs enter the decoder in\
    \ decoding order.  The de-interleave buffer is\n   used to re-order a stream of\
    \ interleaved AUs back into decoding\n   order.  When interleaving is applied,\
    \ the decoding of \"early\" AUs has\n   to be postponed until all AUs that precede\
    \ it in decoding order are\n   present.  Therefore, these \"early\" AUs are stored\
    \ in the de-\n   interleave buffer.  As an example in Figure 6, the interleaving\n\
    \   pattern from section 2.5 is considered.\n                             +--+--+--+--+--+--+--+--+--+--+--+-\n\
    \   Interleaved AUs           | 0| 3| 6| 1| 4| 7| 2| 5| 8| 9|12|..\n         \
    \                    +--+--+--+--+--+--+--+--+--+--+--+-\n   Storage of \"early\"\
    \ AUs         3  3  3  3  3  3\n                                     6  6  6 \
    \ 6  6  6\n                                           4  4  4\n              \
    \                                7  7  7\n                                   \
    \                         12 12\n   Figure 6: Storage of \"early\" AUs in the\
    \ de-interleave buffer per\n             interleaved AU.\n   AU(3) is to be delivered\
    \ to the decoder after AU(0), AU(1) and AU(2);\n   of these AUs, AU(2) arrives\
    \ from the network last and hence AU(3)\n   needs to be stored until AU(2) is\
    \ present in the pattern.  Similarly,\n   AU(6) is to be stored until AU(5) is\
    \ present, while AU(4) and AU(7)\n   are to be stored until AU(2) and AU(5) are\
    \ present, respectively.\n   Note that the fullness of the de-interleave buffer\
    \ varies in time.\n   In Figure 6, the de-interleave buffer contains at most 4,\
    \ but often\n   less AUs.\n   So as to give a rough indication of the resources\
    \ needed in the\n   receiver for de-interleaving, the maximum displacement in\
    \ time of an\n   AU is defined.  For any AU(j) in the pattern, each AU(i) with\
    \ i<j\n   that is not yet present can be determined.  The maximum displacement\n\
    \   in time of an AU is the maximum difference between the time stamp of\n   an\
    \ AU in the pattern and the time stamp of the earliest AU that is\n   not yet\
    \ present.  In other words, when considering a sequence of\n   interleaved AUs,\
    \ then:\n   Maximum displacement = max{TS(i) - TS(j)}\n       for any i and any\
    \ j>i, where:\n          i and j indicate the index of the AU in the interleaving\n\
    \                pattern, and\n          TS denotes the time stamp of the AU.\n\
    \   As an example in Figure 7, the interleaving pattern from section 2.5\n   is\
    \ considered.  For each AU in the pattern, the index is given of the\n   earliest\
    \ of any earlier AUs not yet present.  Hence for each AU(n) in\n   the interleaving\
    \ pattern the smallest index k (with k<n) of not yet\n   delivered AUs is indicated.\
    \  A \"-\" indicates that all previous AUs\n   are present.  If the AU period\
    \ is constant, the maximum displacement\n   equals 5 AU periods, as found for\
    \ AU(6) and AU(7).\n                                 +--+--+--+--+--+--+--+--+--+--+--+-\n\
    \   Interleaved AUs               | 0| 3| 6| 1| 4| 7| 2| 5| 8| 9|12|..\n     \
    \                            +--+--+--+--+--+--+--+--+--+--+--+-\n   Earliest\
    \ not yet present AU     -  1  1  -  2  2  -  -  -  - 10\n   Figure 7: For each\
    \ AU in the interleaving pattern, the earliest of\n             any earlier AUs\
    \ not yet present\n   When interleaving, senders MUST signal the maximum displacement\
    \ in\n   time during the session via the MIME format parameter\n   \"maxDisplacement\"\
    ; see section 4.1.\n   An estimate of the size of the de-interleave buffer is\
    \ found by\n   multiplying the maximum displacement by the maximum bit rate:\n\
    \   size(de-interleave buffer) = {(maxDisplacement) * Rate(max)} / (RTP\n    \
    \                            clock frequency),\n       where:\n          Rate(max)\
    \ is the maximum bit-rate of the transported stream.\n   Note that receivers can\
    \ derive Rate(max) from the MIME format\n   parameters streamType, profile-level-id,\
    \ and config.\n   However, this calculation estimates the size of the de-interleave\n\
    \   buffer and the required size may differ from the calculated value.\n   If\
    \ this calculation under-estimates the size of the\n   de-interleave buffer, then\
    \ senders, when interleaving, MUST signal a\n   size of the de-interleave buffer\
    \ via the MIME format parameter\n   \"de-interleaveBufferSize\"; see section 4.1.\
    \  If the calculation\n   over-estimates the size of the de-interleave buffer,\
    \ then senders,\n   when interleaving, MAY signal a size of the de-interleave\
    \ buffer via\n   the MIME format parameter \"de-interleaveBufferSize\".\n   The\
    \ signaled size of the de-interleave buffer MUST be large enough to\n   contain\
    \ all \"early\" AUs at any point in time during the session.\n   That is:\n  \
    \ minimum de-interleave buffer size = max [sum {if TS(i) > TS(j) then\n      \
    \                                 AU-size(i) else 0}]\n       for any j and any\
    \ i<j, where:\n          i and j indicate the index of an AU in the interleaving\n\
    \                pattern,\n          TS(i) denotes the time stamp of AU(i), and\n\
    \          AU-size(i) denotes the size of AU(i) in number of octets.\n   If the\
    \ \"de-interleaveBufferSize\" parameter is present, then the\n   applied buffer\
    \ for de-interleaving in a receiver MUST have a size\n   that is at least equal\
    \ to the signaled size of the de-interleave\n   buffer, else a size that is at\
    \ least equal to the calculated size of\n   the de-interleave buffer.\n   No matter\
    \ what interleaving scheme is used, the scheme must be\n   analyzed to calculate\
    \ the applicable maxDisplacement value, as well\n   as the required size of the\
    \ de-interleave buffer.  Senders SHOULD\n   signal values that are not larger\
    \ than the strictly required values;\n   if larger values are signaled, the receiver\
    \ will buffer excessively.\n   Note that for low bit-rate material, the applied\
    \ interleaving may\n   make packets shorter than the MTU size.\n"
- title: 3.2.3.4.  Crucial and Non-Crucial AUs with MPEG-4 System Data
  contents:
  - "3.2.3.4.  Crucial and Non-Crucial AUs with MPEG-4 System Data\n   Some Access\
    \ Units with MPEG-4 system data, called \"crucial\" AUs,\n   carry information\
    \ whose loss cannot be tolerated, either in the\n   presentation or in the decoder.\
    \  At each crucial AU in an MPEG-4\n   system stream, the stream state changes.\
    \  The stream-state MAY remain\n   constant at non-crucial AUs.  In ISO/IEC 14496-1,\
    \ MPEG-4 system\n   streams use the AU_SequenceNumber to signal stream states.\n\
    \   Example: Given three AUs, AU1 = \"Insertion of node X\", AU2 = \"Set\n   position\
    \ of node X\", AU3 = \"Set position of node X\".  AU1 is crucial,\n   since if\
    \ it is lost, AU2 cannot be executed.  However, AU2 is not\n   crucial, since\
    \ AU3 can be executed even if AU2 is lost.\n   When a crucial AU is (possibly)\
    \ lost, the stream is corrupted.  For\n   example, when an AU is lost and the\
    \ stream state has changed at the\n   next received AU, then it is possible that\
    \ the lost AU was crucial.\n   Once corrupted, the stream remains corrupted until\
    \ the next random\n   access point.  Note that loss of non-crucial AUs does not\
    \ corrupt the\n   stream.  When a decoder starts receiving a stream, the decoder\
    \ MUST\n   consider the stream corrupted until an AU is received that provides\
    \ a\n   random access point.\n   An AU that provides a random access point, as\
    \ signaled by the RAP-\n   flag, may or may not be crucial.  Non-crucial RAP AUs\
    \ provide a\n   \"repeated\" random access point for use by decoders that recently\n\
    \   joined the stream or that need to re-start decoding after a stream\n   corruption.\
    \  Non-crucial RAP AUs MUST include all updates since the\n   last crucial RAP\
    \ AU.\n   Upon receiving AUs, decoders are to react as follows:\n   a) if the\
    \ RAP-flag is set to 1 and the stream-state changes, then the\n      AU is a crucial\
    \ RAP AU, and the AU MUST be decoded.\n   b) if the RAP-flag is set to 1 and the\
    \ stream state does not change,\n      then the AU is a non-crucial RAP AU, and\
    \ the receiver SHOULD\n      decode it if the stream is corrupted.  Otherwise,\
    \ the decoder MUST\n      ignore the AU.\n   c) if the RAP-flag is set to 0, then\
    \ the AU MUST be decoded, unless\n      the stream is corrupted, in which case\
    \ the AU MUST be ignored.\n"
- title: 3.3.  Usage of this Specification
  contents:
  - '3.3.  Usage of this Specification

    '
- title: 3.3.1.  General
  contents:
  - "3.3.1.  General\n   Usage of this specification requires definition of a mode.\
    \  A mode\n   defines how to use this specification, as deemed appropriate.\n\
    \   Senders MUST signal the applied mode via the MIME format parameter\n   \"\
    mode\", as specified in section 4.1.  This specification defines a\n   generic\
    \ mode that can be used for any MPEG-4 stream, as well as\n   specific modes for\
    \ the transportation of MPEG-4 CELP and MPEG-4 AAC\n   streams, defined in ISO/IEC\
    \ 14496-3 [1].\n   When use of this payload format is signaled using SDP [5],\
    \ an\n   \"rtpmap\" attribute is part of that signaling.  The same requirements\n\
    \   apply for the rtpmap attribute in any mode compliant to this\n   specification.\
    \  The general form of an rtpmap attribute is:\n   a=rtpmap:<payload type> <encoding\
    \ name>/<clock rate>[/<encoding\n             parameters>]\n   For audio streams,\
    \ <encoding parameters> specifies the number of\n   audio channels: 2 for stereo\
    \ material (see RFC 2327 [5]) and 1 for\n   mono.  Provided no additional parameters\
    \ are needed, this parameter\n   may be omitted for mono material, hence its default\
    \ value is 1.\n"
- title: 3.3.2.  The Generic Mode
  contents:
  - "3.3.2.  The Generic Mode\n   The generic mode can be used for any MPEG-4 stream.\
    \  In this mode, no\n   mode-specific constraints are applied; hence, in the generic\
    \ mode,\n   the full flexibility of this specification can be exploited.  The\n\
    \   generic mode is signaled by mode=generic.\n   An example is given below for\
    \ the transportation of a BIFS-Anim\n   stream.  In this example carriage of multiple\
    \ BIFS-Anim Access Units\n   is allowed in one RTP packet.  The AU-header contains\
    \ the AU-size\n   field, the CTS-flag and, if the CTS flag is set to 1, the CTS-delta\n\
    \   field.  The number of bits of the AU-size and the CTS-delta fields\n   are\
    \ 10 and 16, respectively.  The AU-header also contains the RAP-\n   flag and\
    \ the Stream-state of 4 bits.  This results in an AU-header\n   with a total size\
    \ of two or four octets per BIFS-Anim AU.  The RTP\n   time stamp uses a 1 kHz\
    \ clock.  Note that the media type name is\n   video, because the BIFS-Anim stream\
    \ is part of an audio-visual\n   presentation.  For conventions on media type\
    \ names, see section 4.1.\n   In detail:\n   m=video 49230 RTP/AVP 96\n   a=rtpmap:96\
    \ mpeg4-generic/1000\n   a=fmtp:96 streamtype=3; profile-level-id=1807; mode=generic;\n\
    \   objectType=2; config=0842237F24001FB400094002C0; sizeLength=10;\n   CTSDeltaLength=16;\
    \ randomAccessIndication=1;\n   streamStateIndication=4\n   Note: The a=fmtp line\
    \ has been wrapped to fit the page, it comprises\n   a single line in the SDP\
    \ file.\n   The hexadecimal value of the \"config\" parameter is the\n   BIFSConfiguration()\
    \ as defined in ISO/IEC 14496-1.  The\n   BIFSConfiguration() specifies that the\
    \ BIFS stream is a BIFS-Anim\n   stream.  For the description of MIME parameters,\
    \ see section 4.1.\n"
- title: 3.3.3.  Constant Bit-rate CELP
  contents:
  - "3.3.3.  Constant Bit-rate CELP\n   This mode is signaled by mode=CELP-cbr.  In\
    \ this mode, one or more\n   complete CELP frames of fixed size can be transported\
    \ in one RTP\n   packet; interleaving MUST NOT be used with this mode.  The RTP\n\
    \   payload consists of one or more concatenated CELP frames, each of\n   equal\
    \ size.  CELP frames MUST NOT be fragmented when using this mode.\n   Both the\
    \ AU Header Section and the Auxiliary Section MUST be empty.\n   The MIME format\
    \ parameter constantSize MUST be provided to specify\n   the length of each CELP\
    \ frame.\n   For example:\n   m=audio 49230 RTP/AVP 96\n   a=rtpmap:96 mpeg4-generic/16000/1\n\
    \   a=fmtp:96 streamtype=5; profile-level-id=14; mode=CELP-cbr; config=\n   440E00;\
    \ constantSize=27; constantDuration=240\n   Note: The a=fmtp line has been wrapped\
    \ to fit the page, it comprises\n   a single line in the SDP file.\n   The hexadecimal\
    \ value of the \"config\" parameter is the\n   AudioSpecificConfig()as defined\
    \ in ISO/IEC 14496-3.\n   AudioSpecificConfig() specifies a mono CELP stream with\
    \ a sampling\n   rate of 16 kHz at a fixed bitrate of 14.4 kb/s and 6 sub-frames\
    \ per\n   CELP frame.  For the description of MIME parameters, see section 4.1.\n"
- title: 3.3.4.  Variable Bit-rate CELP
  contents:
  - "3.3.4.  Variable Bit-rate CELP\n   This mode is signaled by mode=CELP-vbr.  With\
    \ this mode, one or more\n   complete CELP frames of variable size can be transported\
    \ in one RTP\n   packet with OPTIONAL interleaving.  In this mode, the largest\n\
    \   possible value for AU-size is greater than the maximum CELP frame\n   size.\
    \ Because CELP frames are very small, there is no support for\n   fragmentation\
    \ of CELP frames.  Hence, CELP frames MUST NOT be\n   fragmented when using this\
    \ mode.\n   In this mode, the RTP payload consists of the AU Header Section,\n\
    \   followed by one or more concatenated CELP frames.  The Auxiliary\n   Section\
    \ MUST be empty.  For each CELP frame contained in the payload,\n   there MUST\
    \ be a one octet AU-header in the AU Header Section to\n   provide:\n   a) the\
    \ size of each CELP frame in the payload and\n   b) index information for computing\
    \ the sequence (and hence timing) of\n      each CELP frame.\n   Transport of\
    \ CELP frames requires that the AU-size field be coded\n   with 6 bits.  Therefore,\
    \ in this mode 6 bits are allocated to the\n   AU-size field, and 2 bits to the\
    \ AU-Index(-delta) field.  Each AU-\n   Index field MUST be coded with the value\
    \ 0.  In the AU Header\n   Section, the concatenated AU-headers are preceded by\
    \ the 16-bit AU-\n   headers-length field, as specified in section 3.2.1.\n  \
    \ In addition to the required MIME format parameters, the following\n   parameters\
    \ MUST be present: sizeLength, indexLength, and\n   indexDeltaLength.  CELP frames\
    \ always have a fixed duration per\n   Access Unit; when interleaving in this\
    \ mode, this specific duration\n   MUST be signaled by the MIME format parameter\
    \ constantDuration.  In\n   addition, the parameter maxDisplacement MUST be present\
    \ when\n   interleaving.\n   For example:\n   m=audio 49230 RTP/AVP 96\n   a=rtpmap:96\
    \ mpeg4-generic/16000/1\n   a=fmtp:96 streamtype=5; profile-level-id=14; mode=CELP-vbr;\
    \ config=\n   440F20; sizeLength=6; indexLength=2; indexDeltaLength=2;\n   constantDuration=160;\
    \ maxDisplacement=5\n   Note: The a=fmtp line has been wrapped to fit the page;\
    \ it comprises\n   a single line in the SDP file.\n   The hexadecimal value of\
    \ the \"config\" parameter is the\n   AudioSpecificConfig() as defined in ISO/IEC\
    \ 14496-3.\n   AudioSpecificConfig() specifies a mono CELP stream with a sampling\n\
    \   rate of 16 kHz, at a bitrate that varies between 13.9 and 16.2 kb/s\n   and\
    \ with 4 sub-frames per CELP frame.  For the description of MIME\n   parameters,\
    \ see section 4.1.\n"
- title: 3.3.5.  Low Bit-rate AAC
  contents:
  - "3.3.5.  Low Bit-rate AAC\n   This mode is signaled by mode=AAC-lbr.  This mode\
    \ supports the\n   transportation of one or more complete AAC frames of variable\
    \ size.\n   In this mode, the AAC frames are allowed to be interleaved and hence\n\
    \   receivers MUST support de-interleaving.  The maximum size of an AAC\n   frame\
    \ in this mode is 63 octets.  AAC frames MUST NOT be fragmented\n   when using\
    \ this mode.  Hence, when using this mode, encoders MUST\n   ensure that the size\
    \ of each AAC frame is at most 63 octets.\n   The payload configuration in this\
    \ mode is the same as in the variable\n   bit-rate CELP mode as defined in 3.3.4.\
    \  The RTP payload consists of\n   the AU Header Section, followed by concatenated\
    \ AAC frames.  The\n   Auxiliary Section MUST be empty.  For each AAC frame contained\
    \ in the\n   payload, the one octet AU-header MUST provide:\n   a) the size of\
    \ each AAC frame in the payload and\n   b) index information for computing the\
    \ sequence (and hence timing) of\n      each AAC frame.\n   In the AU-header Section,\
    \ the concatenated AU-headers MUST be\n   preceded by the 16-bit AU-headers-length\
    \ field, as specified in\n   section 3.2.1.\n   In addition to the required MIME\
    \ format parameters, the following\n   parameters MUST be present: sizeLength,\
    \ indexLength, and\n   indexDeltaLength.  AAC frames always have a fixed duration\
    \ per Access\n   Unit; when interleaving in this mode, this specific duration\
    \ MUST be\n   signaled by the MIME format parameter constantDuration.  In addition,\n\
    \   the parameter maxDisplacement MUST be present when interleaving.\n   For example:\n\
    \   m=audio 49230 RTP/AVP 96\n   a=rtpmap:96 mpeg4-generic/22050/1\n   a=fmtp:96\
    \ streamtype=5; profile-level-id=14; mode=AAC-lbr; config=\n   1388; sizeLength=6;\
    \ indexLength=2; indexDeltaLength=2;\n   constantDuration=1024; maxDisplacement=5\n\
    \   Note: The a=fmtp line has been wrapped to fit the page; it comprises\n   a\
    \ single line in the SDP file.\n   The hexadecimal value of the \"config\" parameter\
    \ is the\n   AudioSpecificConfig(), as defined in ISO/IEC 14496-3.\n   AudioSpecificConfig()\
    \ specifies a mono AAC stream with a sampling\n   rate of 22.05 kHz.  For the\
    \ description of MIME parameters, see\n   section 4.1.\n"
- title: 3.3.6.  High Bit-rate AAC
  contents:
  - "3.3.6.  High Bit-rate AAC\n   This mode is signaled by mode=AAC-hbr.  This mode\
    \ supports the\n   transportation of variable size AAC frames.  In one RTP packet,\n\
    \   either one or more complete AAC frames are carried, or a single\n   fragment\
    \ of an AAC frame is carried.  In this mode, the AAC frames\n   are allowed to\
    \ be interleaved and hence receivers MUST support de-\n   interleaving.  The maximum\
    \ size of an AAC frame in this mode is 8191\n   octets.\n   In this mode, the\
    \ RTP payload consists of the AU Header Section,\n   followed by either one AAC\
    \ frame, several concatenated AAC frames or\n   one fragmented AAC frame.  The\
    \ Auxiliary Section MUST be empty.  For\n   each AAC frame contained in the payload,\
    \ there MUST be an AU-header\n   in the AU Header Section to provide:\n   a) the\
    \ size of each AAC frame in the payload and\n   b) index information for computing\
    \ the sequence (and hence timing) of\n      each AAC frame.\n   To code the maximum\
    \ size of an AAC frame requires 13 bits.\n   Therefore, in this configuration\
    \ 13 bits are allocated to the AU-\n   size, and 3 bits to the AU-Index(-delta)\
    \ field.  Thus, each AU-header\n   has a size of 2 octets.  Each AU-Index field\
    \ MUST be coded with the\n   value 0.  In the AU Header Section, the concatenated\
    \ AU-headers MUST\n   be preceded by the 16-bit AU-headers-length field, as specified\
    \ in\n   section 3.2.1.\n   In addition to the required MIME format parameters,\
    \ the following\n   parameters MUST be present: sizeLength, indexLength, and\n\
    \   indexDeltaLength.  AAC frames always have a fixed duration per Access\n  \
    \ Unit; when interleaving in this mode, this specific duration MUST be\n   signaled\
    \ by the MIME format parameter constantDuration.  In addition,\n   the parameter\
    \ maxDisplacement MUST be present when interleaving.\n   For example:\n   m=audio\
    \ 49230 RTP/AVP 96\n   a=rtpmap:96 mpeg4-generic/48000/6\n   a=fmtp:96 streamtype=5;\
    \ profile-level-id=16; mode=AAC-hbr;\n   config=11B0; sizeLength=13; indexLength=3;\n\
    \   indexDeltaLength=3; constantDuration=1024\n   Note: The a=fmtp line has been\
    \ wrapped to fit the page; it comprises\n   a single line in the SDP file.\n \
    \  The hexadecimal value of the \"config\" parameter is the\n   AudioSpecificConfig(),\
    \ as defined in ISO/IEC 14496-3.\n   AudioSpecificConfig() specifies a 5.1 channel\
    \ AAC stream with a\n   sampling rate of 48 kHz.  For the description of MIME\
    \ parameters, see\n   section 4.1.\n"
- title: 3.3.7.  Additional Modes
  contents:
  - "3.3.7.  Additional Modes\n   This specification only defines the modes specified\
    \ in sections 3.3.2\n   through 3.3.6.  Additional modes are expected to be defined\
    \ in future\n   RFCs.  Each additional mode MUST be in full compliance with this\n\
    \   specification.\n   Any new mode MUST be defined such that an implementation\
    \ including\n   all the features of this specification can decode the payload\
    \ format\n   corresponding to this new mode.  For this reason, a mode MUST NOT\n\
    \   specify new default values for MIME parameters.  In particular, MIME\n   parameters\
    \ that configure the RTP payload MUST be present (unless\n   they have the default\
    \ value), even if its presence is redundant in\n   case the mode assigns a fixed\
    \ value to a parameter.  A mode may\n   additionally define that some MIME parameters\
    \ are required instead of\n   optional, that some MIME parameters have fixed values\
    \ (or ranges),\n   and that there are rules restricting its usage.\n"
- title: 4.  IANA Considerations
  contents:
  - "4.  IANA Considerations\n   This section describes the MIME types and names associated\
    \ with this\n   payload format.  Section 4.1 registers the MIME types, as per\
    \ RFC\n   2048 [3].\n   This format may require additional information about the\
    \ mapping to\n   be made available to the receiver.  This is done using parameters\n\
    \   described in the next section.\n"
- title: 4.1.  MIME Type Registration
  contents:
  - "4.1.  MIME Type Registration\n   MIME media type name: \"video\" or \"audio\"\
    \ or \"application\"\n   \"video\" MUST be used for MPEG-4 Visual streams (ISO/IEC\
    \ 14496-2) or\n   MPEG-4 Systems streams (ISO/IEC 14496-1) that convey information\n\
    \   needed for an audio/visual presentation.\n   \"audio\" MUST be used for MPEG-4\
    \ Audio streams (ISO/IEC 14496-3) or\n   MPEG-4 Systems streams that convey information\
    \ needed for an audio\n   only presentation.\n   \"application\" MUST be used\
    \ for MPEG-4 Systems streams (ISO/IEC\n   14496-1) that serve purposes other than\
    \ audio/visual presentation,\n   e.g., in some cases when MPEG-J (Java) streams\
    \ are transmitted.\n   Depending on the required payload configuration, MIME format\n\
    \   parameters may need to be available to the receiver.  This is done\n   using\
    \ the parameters described in the next section.  There are\n   required and optional\
    \ parameters.\n   Optional parameters are of two types: general parameters and\n\
    \   configuration parameters.  The configuration parameters are used to\n   configure\
    \ the fields in the AU Header section and in the auxiliary\n   section.  The absence\
    \ of any configuration parameter is equivalent to\n   the associated field set\
    \ to its default value, which is always zero.\n   The absence of all configuration\
    \ parameters results in a default\n   \"basic\" configuration with an empty AU-header\
    \ section and an empty\n   auxiliary section in each RTP packet.\n   MIME subtype\
    \ name: mpeg4-generic\n   Required parameters:\n   MIME format parameters are\
    \ not case dependent; for clarity however,\n   both upper and lower case are used\
    \ in the names of the parameters\n   described in this specification.\n      streamType:\n\
    \      The integer value that indicates the type of MPEG-4 stream that is\n  \
    \    carried; its coding corresponds to the values of the streamType,\n      as\
    \ defined in Table 9 (streamType Values) in ISO/IEC 14496-1.\n      profile-level-id:\n\
    \      A decimal representation of the MPEG-4 Profile Level indication.\n    \
    \  This parameter MUST be used in the capability exchange or session\n      set-up\
    \ procedure to indicate the MPEG-4 Profile and Level\n      combination of which\
    \ the relevant MPEG-4 media codec is capable.\n      For MPEG-4 Audio streams,\
    \ this parameter is the decimal value from\n         Table 5 (audioProfileLevelIndication\
    \ Values) in ISO/IEC 14496-\n         1, indicating which MPEG-4 Audio tool subsets\
    \ are required to\n         decode the audio stream.\n      For MPEG-4 Visual\
    \ streams, this parameter is the decimal value\n         from Table G-1 (FLC table\
    \ for profile and level indication) of\n         ISO/IEC 14496-2 [1], indicating\
    \ which MPEG-4 Visual tool\n         subsets are required to decode the visual\
    \ stream.\n      For BIFS streams, this parameter is the decimal value obtained\n\
    \         from (SPLI + 256*GPLI), where:\n         SPLI is the decimal value from\
    \ Table 4 in ISO/IEC 14496-1 with\n                  the applied sceneProfileLevelIndication;\n\
    \         GPLI is the decimal value from Table 7 in ISO/IEC 14496-1 with\n   \
    \         the applied graphicsProfileLevelIndication.\n      For MPEG-J streams,\
    \ this parameter is the decimal value from table\n         13 (MPEGJProfileLevelIndication)\
    \ in ISO/IEC 14496-1, indicating\n         the profile and level of the MPEG-J\
    \ stream.\n      For OD streams, this parameter is the decimal value from table\
    \ 3\n         (ODProfileLevelIndication) in ISO/IEC 14496-1, indicating the\n\
    \         profile and level of the OD stream.\n      For IPMP streams, this parameter\
    \ has either the decimal value 0,\n         indicating an unspecified profile\
    \ and level, or a value larger\n         than zero, indicating an MPEG-4 IPMP\
    \ profile and level as\n         defined in a future MPEG-4 specification.\n \
    \     For Clock Reference streams and Object Content Info streams, this\n    \
    \     parameter has the decimal value zero, indicating that profile\n        \
    \ and level information is conveyed through the OD framework.\n      config:\n\
    \      A hexadecimal representation of an octet string that expresses the\n  \
    \    media payload configuration.  Configuration data is mapped onto\n      the\
    \ hexadecimal octet string in an MSB-first basis.  The first bit\n      of the\
    \ configuration data SHALL be located at the MSB of the first\n      octet.  In\
    \ the last octet, if necessary to achieve octet-\n      alignment, up to 7 zero-valued\
    \ padding bits shall follow the\n      configuration data.\n      For MPEG-4 Audio\
    \ streams, config is the audio object type specific\n         decoder configuration\
    \ data AudioSpecificConfig(), as defined in\n         ISO/IEC 14496-3.  For Structured\
    \ Audio, the\n         AudioSpecificConfig() may be conveyed by other means, not\n\
    \         defined by this specification.  If the AudioSpecificConfig() is\n  \
    \       conveyed by other means for Structured Audio, then the config\n      \
    \   MUST be a quoted empty hexadecimal octet string, as follows:\n         config=\"\
    \".\n         Note that a future mode of using this RTP payload format for\n \
    \        Structured Audio may define such other means.\n      For MPEG-4 Visual\
    \ streams, config is the MPEG-4 Visual\n         configuration information as\
    \ defined in subclause 6.2.1, Start\n         codes of ISO/IEC 14496-2.  The configuration\
    \ information\n         indicated by this parameter SHALL be the same as the\n\
    \         configuration information in the corresponding MPEG-4 Visual\n     \
    \    stream, except for first-half-vbv-occupancy and latter-half-\n         vbv-occupancy,\
    \ if it exists, which may vary in the repeated\n         configuration information\
    \ inside an MPEG-4 Visual stream (See\n         6.2.1 Start codes of ISO/IEC 14496-2).\n\
    \      For BIFS streams, this is the BIFSConfig() information as defined\n   \
    \      in ISO/IEC 14496-1.  Version 1 of BIFSConfig is defined in\n         section\
    \ 9.3.5.2, and version 2 is defined in section 9.3.5.3.\n         The MIME format\
    \ parameter objectType signals the version of\n         BIFSConfig.\n      For\
    \ IPMP streams, this is either a quoted empty hexadecimal octet\n         string,\
    \ indicating the absence of any decoder configuration\n         information (config=\"\
    \"), or the IPMPConfiguration() as will be\n         defined in a future MPEG-4\
    \ IPMP specification.\n      For Object Content Info (OCI) streams, this is the\n\
    \         OCIDecoderConfiguration() information of the OCI stream, as\n      \
    \   defined in section 8.4.2.4 in ISO/IEC 14496-1.\n      For OD streams, Clock\
    \ Reference streams and MPEG-J streams, this\n         is a quoted empty hexadecimal\
    \ octet string (config=\"\"), as no\n         information on the decoder configuration\
    \ is required.\n      mode:\n      The mode in which this specification is used.\
    \  The following modes\n      can be signaled:\n      mode=generic,\n      mode=CELP-cbr,\n\
    \      mode=CELP-vbr,\n      mode=AAC-lbr and\n      mode=AAC-hbr.\n      Other\
    \ modes are expected to be defined in future RFCs.  See also\n      section 3.3.7\
    \ and 4.2 of RFC 3640.\n   Optional general parameters:\n      objectType:\n \
    \     The decimal value from Table 8 in ISO/IEC 14496-1, indicating the\n    \
    \  value of the objectTypeIndication of the transported stream.  For\n      BIFS\
    \ streams, this parameter MUST be present to signal the version\n      of BIFSConfiguration().\
    \  Note that objectTypeIndication may signal\n      a non-MPEG-4 stream and that\
    \ the RTP payload format defined in\n      this document may not be suitable for\
    \ carrying a stream that is\n      not defined by MPEG-4.  The objectType parameter\
    \ SHOULD NOT be set\n      to a value that signals a stream that cannot be carried\
    \ by this\n      payload format.\n      constantSize:\n      The constant size\
    \ in octets of each Access Unit for this stream.\n      The constantSize and the\
    \ sizeLength parameters MUST NOT be\n      simultaneously present.\n      constantDuration:\n\
    \      The constant duration of each Access Unit for this stream,\n      measured\
    \ with the same units as the RTP time stamp.\n      maxDisplacement:\n      The\
    \ decimal representation of the maximum displacement in time of\n      an interleaved\
    \ AU, as defined in section 3.2.3.3, expressed in\n      units of the RTP time\
    \ stamp clock.\n      This parameter MUST be present when interleaving is applied.\n\
    \      de-interleaveBufferSize:\n      The decimal representation in number of\
    \ octets of the size of the\n      de-interleave buffer, described in section\
    \ 3.2.3.3.  When\n      interleaving, this parameter MUST be present if the calculation\
    \ of\n      the de-interleave buffer size given in 3.2.3.3 and based on\n    \
    \  maxDisplacement and rate(max) under-estimates the size of the\n      de-interleave\
    \ buffer.  If this calculation does not under-estimate\n      the size of the\
    \ de-interleave buffer, then the\n      de-interleaveBufferSize parameter SHOULD\
    \ NOT be present.\n   Optional configuration parameters:\n      sizeLength:\n\
    \      The number of bits on which the AU-size field is encoded in the\n     \
    \ AU-header.  The sizeLength and the constantSize parameters MUST\n      NOT be\
    \ simultaneously present.\n      indexLength:\n      The number of bits on which\
    \ the AU-Index is encoded in the first\n      AU-header.  The default value of\
    \ zero indicates the absence of the\n      AU-Index field in each first AU-header.\n\
    \      indexDeltaLength:\n      The number of bits on which the AU-Index-delta\
    \ field is encoded in\n      any non-first AU-header.  The default value of zero\
    \ indicates the\n      absence of the AU-Index-delta field in each non-first AU-header.\n\
    \      CTSDeltaLength:\n      The number of bits on which the CTS-delta field\
    \ is encoded in the\n      AU-header.\n      DTSDeltaLength:\n      The number\
    \ of bits on which the DTS-delta field is encoded in the\n      AU-header.\n \
    \     randomAccessIndication:\n      A decimal value of zero or one, indicating\
    \ whether the RAP-flag is\n      present in the AU-header.  The decimal value\
    \ of one indicates\n      presence of the RAP-flag, the default value zero indicates\
    \ its\n      absence.\n      streamStateIndication:\n      The number of bits\
    \ on which the Stream-state field is encoded in\n      the AU-header.  This parameter\
    \ MAY be present when transporting\n      MPEG-4 system streams, and SHALL NOT\
    \ be present for MPEG-4 audio\n      and MPEG-4 video streams.\n      auxiliaryDataSizeLength:\n\
    \      The number of bits that is used to encode the auxiliary-data-size\n   \
    \   field.\n   Applications MAY use more parameters, in addition to those defined\n\
    \   above.  Each additional parameter MUST be registered with IANA to\n   ensure\
    \ that there is not a clash of names.  Each additional parameter\n   MUST be accompanied\
    \ by a specification in the form of an RFC, MPEG\n   standard, or other permanent\
    \ and readily available reference (the\n   \"Specification Required\" policy defined\
    \ in RFC 2434 [6]).  Receivers\n   MUST tolerate the presence of such additional\
    \ parameters, but these\n   parameters SHALL NOT impact the decoding of receivers\
    \ that comply\n   with this specification.\n   Encoding considerations:\n   This\
    \ MIME subtype is defined for RTP transport only.  System\n   bitstreams MUST\
    \ be generated according to MPEG-4 Systems\n   specifications (ISO/IEC 14496-1).\
    \  Video bitstreams MUST be generated\n   according to MPEG-4 Visual specifications\
    \ (ISO/IEC 14496-2).  Audio\n   bitstreams MUST be generated according to MPEG-4\
    \ Audio specifications\n   (ISO/IEC 14496-3).  The RTP packets MUST be packetized\
    \ according to\n   the RTP payload format defined in RFC 3640.\n   Security considerations:\n\
    \   As defined in section 5 of RFC 3640.\n   Interoperability considerations:\n\
    \   MPEG-4 provides a large and rich set of tools for the coding of\n   visual\
    \ objects.  For effective implementation of the standard,\n   subsets of the MPEG-4\
    \ tool sets have been provided for use in\n   specific applications.  These subsets,\
    \ called 'Profiles', limit the\n   size of the tool set a decoder is required\
    \ to implement.  In order to\n   restrict computational complexity, one or more\
    \ 'Levels' are set for\n   each Profile.  A Profile@Level combination allows:\n\
    \       .  a codec builder to implement only the subset of the standard\n    \
    \      he needs, while maintaining interworking with other MPEG-4\n          devices\
    \ that implement the same combination, and\n       .  checking whether MPEG-4\
    \ devices comply with the standard\n          ('conformance testing').\n   A stream\
    \ SHALL be compliant with the MPEG-4 Profile@Level specified\n   by the parameter\
    \ \"profile-level-id\".  Interoperability between a\n   sender and a receiver\
    \ is achieved by specifying the parameter\n   \"profile-level-id\" in MIME content.\
    \  In the capability\n   exchange/announcement procedure, this parameter may mutually\
    \ be set\n   to the same value.\n   Published specification:\n   The specifications\
    \ for MPEG-4 streams are presented in ISO/IEC\n   14496-1, 14496-2, and 14496-3.\
    \  The RTP payload format is described\n   in RFC 3640.\n   Applications which\
    \ use this media type:\n   Multimedia streaming and conferencing tools.\n   Additional\
    \ information: none\n   Magic number(s): none\n   File extension(s):\n   None.\
    \  A file format with the extension .mp4 has been defined for\n   MPEG-4 content\
    \ but is not directly correlated with this MIME type for\n   which the sole purpose\
    \ is RTP transport.\n   Macintosh File Type Code(s): none\n   Person & email address\
    \ to contact for further information:\n   Authors of RFC 3640, IETF Audio/Video\
    \ Transport working group.\n   Intended usage: COMMON\n   Author/Change controller:\n\
    \   Authors of RFC 3640, IETF Audio/Video Transport working group.\n"
- title: 4.2.  Registration of Mode Definitions with IANA
  contents:
  - "4.2.  Registration of Mode Definitions with IANA\n   This specification can be\
    \ used in a number of modes.  The mode of\n   operation is signaled using the\
    \ \"mode\" MIME parameter, with the\n   initial set of values specified in section\
    \ 4.1.  New modes may be\n   defined at any time, as described in section 3.3.7.\
    \  These modes MUST\n   be registered with IANA, to ensure that there is not a\
    \ clash of\n   names.\n   A new mode registration MUST be accompanied by a specification\
    \ in the\n   form of an RFC, MPEG standard, or other permanent and readily\n \
    \  available reference (the \"Specification Required\" policy defined in\n   RFC\
    \ 2434 [6]).\n"
- title: 4.3.  Concatenation of Parameters
  contents:
  - "4.3.  Concatenation of Parameters\n   Multiple parameters SHOULD be expressed\
    \ as a MIME media type string,\n   in the form of a semicolon-separated list of\
    \ parameter=value pairs\n   (for parameter usage examples see sections 3.3.2 up\
    \ to 3.3.6).\n"
- title: 4.4.  Usage of SDP
  contents:
  - '4.4.  Usage of SDP

    '
- title: 4.4.1.  The a=fmtp Keyword
  contents:
  - "4.4.1.  The a=fmtp Keyword\n   It is assumed that one typical way to transport\
    \ the above-described\n   parameters associated with this payload format is via\
    \ an SDP message\n   [5] for example transported to the client in reply to an\
    \ RTSP\n   DESCRIBE [8] or via SAP [11].  In that case, the (a=fmtp) keyword\n\
    \   MUST be used as described in RFC 2327 [5], section 6, the syntax then\n  \
    \ being:\n   a=fmtp:<format> <parameter name>=<value>[; <parameter name>=<value>]\n"
- title: 5.  Security Considerations
  contents:
  - "5.  Security Considerations\n   RTP packets using the payload format defined\
    \ in this specification\n   are subject to the security considerations discussed\
    \ in the RTP\n   specification [2].  This implies that confidentiality of the\
    \ media\n   streams is achieved by encryption.  Because the data compression used\n\
    \   with this payload format is applied end-to-end, encryption may be\n   performed\
    \ on the compressed data so there is no conflict between the\n   two operations.\
    \  The packet processing complexity of this payload\n   type (i.e., excluding\
    \ media data processing) does not exhibit any\n   significant non-uniformity in\
    \ the receiver side to cause a denial-\n   of-service threat.\n   However, it\
    \ is possible to inject non-compliant MPEG streams (Audio,\n   Video, and Systems)\
    \ so that the receiver/decoder's buffers are\n   overloaded, which might compromise\
    \ the functionality of the receiver\n   or even crash it.  This is especially\
    \ true for end-to-end systems\n   like MPEG, where the buffer models are precisely\
    \ defined.\n   MPEG-4 Systems support stream types including commands that are\n\
    \   executed on the terminal, like OD commands, BIFS commands, etc. and\n   programmatic\
    \ content like MPEG-J (Java(TM) Byte Code) and MPEG-4\n   scripts.  It is possible\
    \ to use one or more of the above in a manner\n   non-compliant to MPEG to crash\
    \ the receiver or make it temporarily\n   unavailable.  Senders that transport\
    \ MPEG-4 content SHOULD ensure\n   that such content is MPEG compliant, as defined\
    \ in the compliance\n   part of IEC/ISO 14496 [1].  Receivers that support MPEG-4\
    \ content\n   should prevent malfunctioning of the receiver in case of non MPEG\n\
    \   compliant content.\n   Authentication mechanisms can be used to validate the\
    \ sender and the\n   data to prevent security problems due to non-compliant malignant\n\
    \   MPEG-4 streams.\n   In ISO/IEC 14496-1, a security model is defined for MPEG-4\
    \ Systems\n   streams carrying MPEG-J access units that comprise Java(TM) classes\n\
    \   and objects.  MPEG-J defines a set of Java APIs and a secure\n   execution\
    \ model.  MPEG-J content can call this set of APIs and\n   Java(TM) methods from\
    \ a set of Java packages supported in the\n   receiver within the defined security\
    \ model.  According to this\n   security model, downloaded byte code is forbidden\
    \ to load libraries,\n   define native methods, start programs, read or write\
    \ files, or read\n   system properties. Receivers can implement intelligent filters\
    \ to\n   validate the buffer requirements or parametric (OD, BIFS, etc.) or\n\
    \   programmatic (MPEG-J, MPEG-4 scripts) commands in the streams.\n   However,\
    \ this can increase the complexity significantly.\n   Implementors of MPEG-4 streaming\
    \ over RTP who also implement MPEG-4\n   scripts (subset of ECMAScript) MUST ensure\
    \ that the action of such\n   scripts is limited solely to the domain of the single\
    \ presentation in\n   which they reside (thus disallowing session to session communication,\n\
    \   access to local resources and storage, etc).  Though loading static\n   network-located\
    \ resources (such as media) into the presentation\n   should be permitted, network\
    \ access by scripts MUST be restricted to\n   such a (media) download.\n"
- title: 6.  Acknowledgements
  contents:
  - "6.  Acknowledgements\n   This document evolved into RFC 3640 after several revisions.\
    \  Thanks\n   to contributions from people in the ISMA forum, the IETF AVT Working\n\
    \   Group and the 4-on-IP ad-hoc group within MPEG.  The authors wish to\n   thank\
    \ all people involved, particularly Andrea Basso, Stephen Casner,\n   M. Reha\
    \ Civanlar, Carsten Herpel, John Lazaro, Zvi Lifshitz, Young-\n   kwon Lim, Alex\
    \ MacAulay, Bill May, Colin Perkins, Dorairaj V and\n   Stephan Wenger for their\
    \ valuable comments and support.\n"
- title: 'APPENDIX: Usage of this Payload Format'
  contents:
  - 'APPENDIX: Usage of this Payload Format

    '
- title: Appendix A.  Interleave Analysis
  contents:
  - 'Appendix A.  Interleave Analysis

    '
- title: A.  Examples of Delay Analysis with Interleave
  contents:
  - 'A.  Examples of Delay Analysis with Interleave

    '
- title: A.1.  Introduction
  contents:
  - "A.1.  Introduction\n   Interleaving issues are discussed in this appendix.  Some\
    \ general\n   notes are provided on de-interleaving and error concealment, while\
    \ a\n   number of interleaving patterns are examined, in particular for\n   determining\
    \ the size of the de-interleave buffer and the maximum\n   displacement of access\
    \ units in time.  In these examples, the maximum\n   displacement is cited in\
    \ terms of an access unit count, for ease of\n   reading.  In actual streams,\
    \ it is signaled in units of the RTP time\n   stamp clock.\n"
- title: A.2.  De-interleaving and Error Concealment
  contents:
  - "A.2.  De-interleaving and Error Concealment\n   This appendix does not describe\
    \ any details on de-interleaving and\n   error concealment, as the control of\
    \ the AU decoding and error\n   concealment process has little to do with interleaving.\
    \  If the next\n   AU to be decoded is present and there is sufficient storage\
    \ available\n   for the decoded AU, then decode it immediately.  If not, wait.\
    \  When\n   the decoding deadline is reached (i.e., the time when decoding must\n\
    \   begin in order to be completed by the time the AU is to be\n   presented),\
    \ or if the decoder is some hardware that presents a\n   constant delay between\
    \ initiation of decoding of an AU and\n   presentation of that AU, then decoding\
    \ must begin at that deadline\n   time.\n   If the next AU to be decoded is not\
    \ present when the decoding\n   deadline is reached, then that AU is lost so the\
    \ receiver must take\n   whatever error concealment measures are deemed appropriate.\
    \  The\n   play-out delay may need to be adjusted at that point (especially if\n\
    \   other AUs have also missed their deadline recently).  Or, if it was a\n  \
    \ momentary delay, and maintaining the latency is important, then the\n   receiver\
    \ should minimize the glitch and continue processing with the\n   next AU.\n"
- title: A.3.  Simple Group Interleave
  contents:
  - 'A.3.  Simple Group Interleave

    '
- title: A.3.1.  Introduction
  contents:
  - "A.3.1.  Introduction\n   An example of regular interleave is when packets are\
    \ formed into\n   groups.  If the 'stride' of the interleave (the distance between\n\
    \   interleaved AUs) is N, packet 0 could contain AU(0), AU(N), AU(2N),\n   and\
    \ so on; packet 1 could contain AU(1), AU(1+N), AU(1+2N), and so\n   on.  If there\
    \ are M access units in a packet, then there are M*N\n   access units in the group.\n\
    \   An example with N=M=3 follows; note that this is the same example as\n   given\
    \ in section 2.5 and that a fixed time duration per Access Unit\n   is assumed:\n\
    \   Packet   Time stamp   Carried AUs      AU-Index, AU-Index-delta\n   P(0) \
    \    T[0]         0, 3, 6          0, 2, 2\n   P(1)     T[1]         1, 4, 7 \
    \         0, 2, 2\n   P(2)     T[2]         2, 5, 8          0, 2, 2\n   P(3)\
    \     T[9]         9,12,15          0, 2, 2\n   In this example, the AU-Index\
    \ is present in the first AU-header and\n   coded with the value 0, as required\
    \ for fixed duration AUs.  The\n   position of the first AU of each packet within\
    \ the group is defined\n   by the RTP time stamp, while the AU-Index-delta field\
    \ indicates the\n   position of subsequent AUs relative to the first AU in the\
    \ packet.\n   All AU-Index-delta fields are coded with the value N-1, equal to\
    \ 2 in\n   this example.  Hence the RTP time stamp and the AU-Index-delta are\n\
    \   used to reconstruct the original order.  See also section 3.2.3.2.\n"
- title: A.3.2.  Determining the De-interleave Buffer Size
  contents:
  - "A.3.2.  Determining the De-interleave Buffer Size\n   For the regular pattern\
    \ as in this example, Figure 6 in section\n   3.2.3.3 shows that the de-interleave\
    \ buffer stores at most 4 AUs.  A\n   de-interleaveBufferSize value that is at\
    \ least equal to the total\n   number of octets of any 4 \"early\" AUs that are\
    \ stored at the same\n   time may be signaled.\n"
- title: A.3.3.  Determining the Maximum Displacement
  contents:
  - "A.3.3.  Determining the Maximum Displacement\n   For the regular pattern as in\
    \ this example, Figure 7 in section 3.3\n   shows that the maximum displacement\
    \ in time equals 5 AU periods.\n   Hence, the minimum maxDisplacement value that\
    \ must be signaled is 5\n   AU periods.  In case each AU has the same size, this\
    \ maxDisplacement\n   value over-estimates the de-interleave buffer size with\
    \ one AU.\n   However, note that in case of variable AU sizes, the total size\
    \ of\n   any 4 \"early\" AUs that must be stored at the same time may exceed\n\
    \   maxDisplacement times the maximum bitrate, in which case the de-\n   interleaveBufferSize\
    \ must be signaled.\n"
- title: A.4.  More Subtle Group Interleave
  contents:
  - 'A.4.  More Subtle Group Interleave

    '
- title: A.4.1.  Introduction
  contents:
  - "A.4.1.  Introduction\n   Another example of forming packets with group interleave\
    \ is given\n   below.  In this example, the packets are formed such that the loss\
    \ of\n   two subsequent RTP packets does not cause the loss of two subsequent\n\
    \   AUs.  Note that in this example, the RTP time stamps of packet 3 and\n   packet\
    \ 4 are earlier than the RTP time stamps of packets 1 and 2,\n   respectively;\
    \ a fixed time duration per Access Unit is assumed.\n   Packet   Time stamp  \
    \ Carried AUs      AU-Index, AU-Index-delta\n   0        T[0]         0,  5  \
    \          0, 4\n   1        T[2]         2,  7            0, 4\n   2        T[4]\
    \         4,  9            0, 4\n   3        T[1]         1,  6            0,\
    \ 4\n   4        T[3]         3,  8            0, 4\n   5        T[10]       10,\
    \ 15            0, 4\n   and so on ..\n   In this example, the AU-Index is present\
    \ in the first AU-header and\n   coded with the value 0, as required for AUs with\
    \ a fixed duration.\n   To reconstruct the original order, the RTP time stamp\
    \ and the AU-\n   Index-delta (coded with the value 4) are used.  See also section\n\
    \   3.2.3.2.\n"
- title: A.4.2.  Determining the De-interleave Buffer Size
  contents:
  - "A.4.2.  Determining the De-interleave Buffer Size\n   From Figure 8, it can be\
    \ to determined that at most 5 \"early\" AUs are\n   to be stored.  If the AUs\
    \ are of constant size, then this value\n   equals 5 times the AU size.  The minimum\
    \ size of the de-interleave\n   buffer equals the maximum total number of octets\
    \ of the \"early\" AUs\n   that are to be stored at the same time.  This gives\
    \ the minimum value\n   of the de-interleaveBufferSize that may be signaled.\n\
    \                              +--+--+--+--+--+--+--+--+--+--+\n   Interleaved\
    \ AUs            | 0| 5| 2| 7| 4| 9| 1| 6| 3| 8|\n                           \
    \   +--+--+--+--+--+--+--+--+--+--+\n                                -  -  5 \
    \ -  5  -  2  7  4  9\n                                            7     4  9\
    \  5\n   \"Early\" AUs                                    5     6\n          \
    \                                        7     7\n                           \
    \                       9     9\n   Figure 8: Storage of \"early\" AUs in the\
    \ de-interleave buffer per\n             interleaved AU.\n"
- title: A.4.3.  Determining the Maximum Displacement
  contents:
  - "A.4.3.  Determining the Maximum Displacement\n   From Figure 9, it can be seen\
    \ that the maximum displacement in time\n   equals 8 AU periods.  Hence the minimum\
    \ maxDisplacement value to be\n   signaled is 8 AU periods.\n                \
    \                    +--+--+--+--+--+--+--+--+--+--+\n   Interleaved AUs     \
    \             | 0| 5| 2| 7| 4| 9| 1| 6| 3| 8|\n                              \
    \      +--+--+--+--+--+--+--+--+--+--+\n   Earliest not yet present AU       \
    \ -  1  1  1  1  1  -  3  -  -\n   Figure 9: For each AU in the interleaving pattern,\
    \ the earliest of\n             any earlier AUs not yet present\n   In case each\
    \ AU has the same size, the found maxDisplacement value\n   over-estimates the\
    \ de-interleave buffer size with three AUs.\n   However, in case of variable AU\
    \ sizes, the total size of any 5\n   \"early\" AUs stored at the same time may\
    \ exceed maxDisplacement times\n   the maximum bitrate, in which case de-interleaveBufferSize\
    \ must be\n   signaled.\n"
- title: A.5.  Continuous Interleave
  contents:
  - 'A.5.  Continuous Interleave

    '
- title: A.5.1.  Introduction
  contents:
  - "A.5.1.  Introduction\n   In continuous interleave, once the scheme is 'primed',\
    \ the number of\n   AUs in a packet exceeds the 'stride' (the distance between\
    \ them).\n   This shortens the buffering needed, smoothes the data-flow, and gives\n\
    \   slightly larger packets -- and thus lower overhead -- for the same\n   interleave.\
    \  For example, here is a continuous interleave also over a\n   stride of 3 AUs,\
    \ but with 4 AUs per packet, for a run of 20 AUs.\n   This shows both how the\
    \ scheme 'starts up' and how it finishes.  Once\n   again, the example assumes\
    \ fixed time duration per Access Unit.\n   Packet   Time-stamp   Carried AUs \
    \        AU-Index, AU-Index-delta\n   0        T[0]                      0   \
    \   0\n   1        T[1]                  1   4      0  2\n   2        T[2]   \
    \           2   5   8      0  2  2\n   3        T[3]          3   6   9  12  \
    \    0  2  2  2\n   4        T[7]          7  10  13  16      0  2  2  2\n   5\
    \        T[11]        11  14  17  20      0  2  2  2\n   6        T[15]      \
    \  15  18              0  2\n   7        T[19]        19                  0\n\
    \   In this example, the AU-Index is present in the first AU-header and\n   coded\
    \ with the value 0, as required for AUs with a fixed duration.\n   To reconstruct\
    \ the original order, the RTP time stamp and the\n   AU-Index-delta (coded with\
    \ the value 2) are used.  See also 3.2.3.2.\n   Note that this example has RTP\
    \ time-stamps in increasing order.\n"
- title: A.5.2.  Determining the De-interleave Buffer Size
  contents:
  - "A.5.2.  Determining the De-interleave Buffer Size\n   For this example the de-interleave\
    \ buffer size can be derived from\n   Figure 10.  The maximum number of \"early\"\
    \ AUs is 3.  If the AUs are\n   of constant size, then the de-interleave buffer\
    \ size equals 3 times\n   the AU size.  Compared to the example in A.2, for constant\
    \ size AUs\n   the de-interleave buffer size is reduced from 4 to 3 times the\
    \ AU\n   size, while maintaining the same 'stride'.\n                        +--+--+--+--+--+--+--+--+--+--+--+--+--+--+-\n\
    \   Interleaved AUs      | 0| 1| 4| 2| 5| 8| 3| 6| 9|12| 7|10|13|16|\n       \
    \                 +--+--+--+--+--+--+--+--+--+--+--+--+--+--+-\n             \
    \             -  -  -  4  -  -  4  8  -  -  8 12  -  -\n                     \
    \                       5           9\n   \"Early\" AUs                      \
    \        8          12\n   Figure 10: Storage of \"early\" AUs in the de-interleave\
    \ buffer per\n              interleaved AU.\n"
- title: A.5.3.  Determining the Maximum Displacement
  contents:
  - "A.5.3.  Determining the Maximum Displacement\n   For this example, the maximum\
    \ displacement has a value of 5 AU\n   periods.  See Figure 11.  Compared to the\
    \ example in A.2, the maximum\n   displacement does not decrease, though in fact\
    \ less de-interleave\n   buffering is required.\n                        +--+--+--+--+--+--+--+--+--+--+--+--+--+--+-\n\
    \   Interleaved AUs      | 0| 1| 4| 2| 5| 8| 3| 6| 9|12| 7|10|13|16|\n       \
    \                 +--+--+--+--+--+--+--+--+--+--+--+--+--+--+-\n   Earliest not\
    \ yet\n        present AU        -  -  2  -  3  3  -  -  7  7  -  - 11 11\n  \
    \ Figure 11: For each AU in the interleaving pattern, the earliest of\n      \
    \        any earlier AUs not yet present\n"
- title: References
  contents:
  - 'References

    '
- title: Normative References
  contents:
  - "Normative References\n   [1]  ISO/IEC International Standard 14496 (MPEG-4);\
    \ \"Information\n        technology - Coding of audio-visual objects\", January\
    \ 2000\n   [2]  Schulzrinne, H., Casner, S., Frederick, R. and V. Jacobson,\n\
    \        \"RTP:  A Transport Protocol for Real-Time Applications\", RFC\n    \
    \    3550, July 2003.\n   [3]  Freed, N., Klensin, J. and J. Postel, \"Multipurpose\
    \ Internet\n        Mail Extensions (MIME) Part Four: Registration Procedures\"\
    , BCP\n        13, RFC 2048, November 1996.\n   [4]  Bradner, S., \"Key words\
    \ for use in RFCs to Indicate Requirement\n        Levels\", BCP 14, RFC 2119,\
    \ March 1997.\n   [5]  Handley, M. and V. Jacobson, \"SDP: Session Description\n\
    \        Protocol\", RFC 2327, April 1998.\n   [6]  Narten, T. and H. Alvestrand,\
    \ \"Guidelines for Writing an IANA\n        Considerations Section in RFCs\",\
    \ BCP 26, RFC 2434, October 1998.\n"
- title: Informative References
  contents:
  - "Informative References\n   [7]  Hoffman, D., Fernando, G., Goyal, V. and M. Civanlar,\
    \ \"RTP\n        Payload Format for MPEG1/MPEG2 Video\", RFC 2250, January 1998.\n\
    \   [8]  Schulzrinne, H., Rao, A. and R. Lanphier, \"Real-Time Session\n     \
    \   Protocol (RTSP)\", RFC 2326, April 1998.\n   [9]  Perkins, C. and O. Hodson,\
    \ \"Options for Repair of Streaming\n        Media\", RFC 2354, June 1998.\n \
    \  [10] Schulzrinne, H. and J. Rosenberg, \"An RTP Payload Format for\n      \
    \  Generic Forward Error Correction\", RFC 2733, December 1999.\n   [11] Handley,\
    \ M., Perkins, C. and E. Whelan, \"Session Announcement\n        Protocol\", RFC\
    \ 2974, October 2000.\n   [12] Kikuchi, Y., Nomura, T., Fukunaga, S., Matsui,\
    \ Y. and H. Kimata,\n        \"RTP Payload Format for MPEG-4 Audio/Visual Streams\"\
    , RFC 3016,\n        November 2000.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Jan van der Meer\n   Philips Electronics\n   Prof Holstlaan\
    \ 4\n   Building WAH-1\n   5600 JZ Eindhoven\n   Netherlands\n   EMail: jan.vandermeer@philips.com\n\
    \   David Mackie\n   Apple Computer, Inc.\n   One Infinite Loop, MS:302-3KS\n\
    \   Cupertino  CA 95014\n   EMail: dmackie@apple.com\n   Viswanathan Swaminathan\n\
    \   Sun Microsystems Inc.\n   2600 Casey Avenue\n   Mountain View, CA 94043\n\
    \   EMail: viswanathan.swaminathan@sun.com\n   David Singer\n   Apple Computer,\
    \ Inc.\n   One Infinite Loop, MS:302-3MT\n   Cupertino  CA 95014\n   EMail: singer@apple.com\n\
    \   Philippe Gentric\n   Philips Electronics\n   51 rue Carnot\n   92156 Suresnes\n\
    \   France\n   EMail: philippe.gentric@philips.com\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2003).  All\
    \ Rights Reserved.\n   This document and translations of it may be copied and\
    \ furnished to\n   others, and derivative works that comment on or otherwise explain\
    \ it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assignees.\n\
    \   This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
