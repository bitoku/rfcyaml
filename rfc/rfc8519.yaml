- title: __initial_text__
  contents:
  - '        YANG Data Model for Network Access Control Lists (ACLs)

    '
- title: Abstract
  contents:
  - "Abstract\n   This document defines a data model for Access Control Lists (ACLs).\n\
    \   An ACL is a user-ordered set of rules used to configure the\n   forwarding\
    \ behavior in a device.  Each rule is used to find a match\n   on a packet and\
    \ define actions that will be performed on the packet.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This\
    \ document is a product of the Internet Engineering Task Force\n   (IETF).  It\
    \ represents the consensus of the IETF community.  It has\n   received public\
    \ review and has been approved for publication by the\n   Internet Engineering\
    \ Steering Group (IESG).  Further information on\n   Internet Standards is available\
    \ in Section 2 of RFC 7841.\n   Information about the current status of this document,\
    \ any errata,\n   and how to provide feedback on it may be obtained at\n   https://www.rfc-editor.org/info/rfc8519.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2019 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (https://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction  . . . . . . . . . . . . . . . . . . .\
    \ . . . . .   2\n     1.1.  Definitions and Acronyms  . . . . . . . . . . . .\
    \ . . . .   3\n     1.2.  Terminology . . . . . . . . . . . . . . . . . . . .\
    \ . . .   4\n     1.3.  Tree Diagram  . . . . . . . . . . . . . . . . . . . .\
    \ . .   4\n   2.  Problem Statement . . . . . . . . . . . . . . . . . . . . .\
    \ .   4\n   3.  Understanding ACL's Filters and Actions . . . . . . . . . . .\
    \   4\n     3.1.  ACL Modules . . . . . . . . . . . . . . . . . . . . . . .  \
    \ 5\n   4.  ACL YANG Models . . . . . . . . . . . . . . . . . . . . . . .   9\n\
    \     4.1.  IETF Access Control List Module . . . . . . . . . . . . .   9\n  \
    \   4.2.  IETF Packet Fields Module . . . . . . . . . . . . . . . .  24\n    \
    \ 4.3.  ACL Examples  . . . . . . . . . . . . . . . . . . . . . .  37\n     4.4.\
    \  Port Range Usage and Other Examples . . . . . . . . . . .  39\n   5.  Security\
    \ Considerations . . . . . . . . . . . . . . . . . . .  42\n   6.  IANA Considerations\
    \ . . . . . . . . . . . . . . . . . . . . .  43\n     6.1.  URI Registration \
    \ . . . . . . . . . . . . . . . . . . . .  43\n     6.2.  YANG Module Name Registration\
    \ . . . . . . . . . . . . . .  44\n   7.  References  . . . . . . . . . . . .\
    \ . . . . . . . . . . . . .  44\n     7.1.  Normative References  . . . . . .\
    \ . . . . . . . . . . . .  44\n     7.2.  Informative References  . . . . . .\
    \ . . . . . . . . . . .  46\n   Appendix A.  Extending ACL Model Examples . .\
    \ . . . . . . . . . .  47\n     A.1.  Example of a Company's Proprietary Module\
    \ . . . . . . . .  47\n     A.2.  Linux nftables  . . . . . . . . . . . . . .\
    \ . . . . . . .  50\n     A.3.  Ethertypes  . . . . . . . . . . . . . . . . .\
    \ . . . . . .  51\n   Acknowledgements  . . . . . . . . . . . . . . . . . . .\
    \ . . . . .  60\n   Authors' Addresses  . . . . . . . . . . . . . . . . . . .\
    \ . . . .  60\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   An Access Control List (ACL) is one of the basic elements\
    \ used to\n   configure device-forwarding behavior.  It is used in many networking\n\
    \   technologies such as Policy-Based Routing (PBR), firewalls, etc.\n   An ACL\
    \ is a user-ordered set of rules that is used to filter traffic\n   on a networking\
    \ device.  Each rule is represented by an Access\n   Control Entry (ACE).\n  \
    \ Each ACE has a group of match criteria and a group of actions.\n   The match\
    \ criteria allow for the definition of packet headers and\n   metadata, the contents\
    \ of which must match the definitions.\n   o  Packet header matches apply to fields\
    \ visible in the packet such\n      as address, Class of Service (CoS), or port\
    \ number.\n   o  In case a vendor supports it, metadata matches apply to fields\n\
    \      associated with the packet, that are not in the packet header,\n      such\
    \ as the input interface or length of the packet as received\n      over the wire.\n\
    \   The actions specify what to do with the packet when the matching\n   criteria\
    \ are met.  These actions are any operations that would apply\n   to the packet,\
    \ such as counting, policing, or simply forwarding.  The\n   list of potential\
    \ actions is unbounded depending on the capabilities\n   of the networking devices.\n\
    \   Access Control List is also widely known as ACL (pronounced as\n   [ak-uh\
    \ l]) or Access List.  In this document, Access Control List,\n   ACL, and Access\
    \ List are used interchangeably.\n   The matching of filters and actions in an\
    \ ACE/ACL is triggered only\n   after the application/attachment of the ACL to\
    \ an interface, a\n   Virtual Routing and Forwarding (VRF) interface, a vty/tty\
    \ session, a\n   QoS policy, or routing protocols, amongst various other configuration\n\
    \   attachment points.  Once attached, it is used for filtering traffic\n   using\
    \ the match criteria in the ACEs and taking appropriate action(s)\n   that has\
    \ been configured against that ACE.  In order to apply an ACL\n   to any attachment\
    \ point other than an interface, vendors would have\n   to augment the ACL YANG\
    \ model.\n"
- title: 1.1.  Definitions and Acronyms
  contents:
  - "1.1.  Definitions and Acronyms\n   ACE: Access Control Entry\n   ACL: Access\
    \ Control List\n   CoS: Class of Service\n   DSCP: Differentiated Services Code\
    \ Point\n   ICMP: Internet Control Message Protocol\n   IP: Internet Protocol\n\
    \   IPv4: Internet Protocol version 4\n   IPv6: Internet Protocol version 6\n\
    \   MAC: Media Access Control\n   PBR: Policy-Based Routing\n   TCP: Transmission\
    \ Control Protocol\n   UDP: User Datagram Protocol\n"
- title: 1.2.  Terminology
  contents:
  - "1.2.  Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"\
    SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"NOT\
    \ RECOMMENDED\", \"MAY\", and\n   \"OPTIONAL\" in this document are to be interpreted\
    \ as described in\n   BCP 14 [RFC2119] [RFC8174] when, and only when, they appear\
    \ in all\n   capitals, as shown here.\n"
- title: 1.3.  Tree Diagram
  contents:
  - "1.3.  Tree Diagram\n   For a reference to the annotations used in the tree diagrams\
    \ included\n   in this document, please see \"YANG Tree Diagrams\" [RFC8340].\n"
- title: 2.  Problem Statement
  contents:
  - "2.  Problem Statement\n   This document defines a YANG 1.1 data model [RFC7950]\
    \ for the\n   configuration of ACLs.  The model defines matching rules for commonly\n\
    \   used protocols such as Ethernet, IPv4, IPv6, TCP, UDP, and ICMP.  If\n   more\
    \ protocols need to be supported in the future, this base model\n   can be augmented.\
    \  An example of such an augmentation can be seen in\n   Appendix A.\n   ACL implementations\
    \ in every device may vary greatly in terms of the\n   filter constructs and actions\
    \ that they support.  Therefore, this\n   document proposes a model that can be\
    \ augmented by standard\n   extensions and vendor proprietary models.\n"
- title: 3.  Understanding ACL's Filters and Actions
  contents:
  - "3.  Understanding ACL's Filters and Actions\n   Although different vendors have\
    \ different ACL data models, there is a\n   common understanding of what an ACL\
    \ is.  A network system usually has\n   a list of ACLs, and each ACL contains\
    \ an ordered list of rules, also\n   known as ACEs.  Each ACE has a group of match\
    \ criteria and a group of\n   actions.  The match criteria allows for definition\
    \ of the contents of\n   the packet headers or metadata, if supported by the vendor.\
    \  Packet\n   header matching applies to fields visible in the packet such as\n\
    \   address, CoS, or port number.  Metadata matching applies to fields\n   associated\
    \ with the packet, that are not in the packet header, such\n   as the input interface,\
    \ packet length, or source or destination\n   prefix length.  The actions can\
    \ be any sort of operation from logging\n   to rate-limiting or dropping to simply\
    \ forwarding.  Actions on the\n   first matching ACE are applied with no processing\
    \ of subsequent ACEs.\n   The model also includes a container to hold overall\
    \ operational state\n   for each ACL and for each ACE.  One ACL can be applied\
    \ to multiple\n   targets within the device, such as the interface of a networking\n\
    \   device, applications or features running in the device, etc.  When\n   applied\
    \ to interfaces of a networked device, distinct ACLs are\n   defined for the ingress\
    \ (input) or egress (output) interface.\n   This document tries to address the\
    \ commonalities between all vendors\n   and creates a common model, which can\
    \ be augmented with proprietary\n   models.  The base model is simple in design,\
    \ and we hope to achieve\n   enough flexibility for each vendor to extend the\
    \ base model.\n   The use of feature statements in the model allows vendors to\n\
    \   advertise match rules they are capable and willing to support.  There\n  \
    \ are two sets of feature statements a device needs to advertise.  The\n   first\
    \ set of feature statements specifies the capability of the\n   device.  These\
    \ include features such as \"Device can support matching\n   on Ethernet headers\"\
    \ or \"Device can support matching on IPv4\n   headers\".  The second set of feature\
    \ statements specifies the\n   combinations of headers the device is willing to\
    \ support.  These\n   include features such as \"Plain IPv6 ACL supported\" or\
    \ \"Ethernet,\n   IPv4 and IPv6 ACL combinations supported\".\n"
- title: 3.1.  ACL Modules
  contents:
  - "3.1.  ACL Modules\n   There are two YANG modules in the model.  The first module,\
    \ \"ietf-\n   access-control-list\", defines generic ACL aspects that are common\
    \ to\n   all ACLs regardless of their type or vendor.  In effect, the module\n\
    \   can be viewed as providing a generic ACL \"superclass\".  It imports\n   the\
    \ second module, \"ietf-packet-fields\".  The match container in\n   \"ietf-access-control-list\"\
    \ uses groupings in \"ietf-packet-fields\" to\n   specify match fields such as\
    \ port numbers or protocols.  The\n   combination of 'if-feature' checks and 'must'\
    \ statements allows for\n   the selection of relevant match fields that a user\
    \ can define rules\n   for.\n   If there is a need to define a new \"matches\"\
    \ choice, such as IP Flow\n   Information Export (IPFIX) [RFC7011], the container\
    \ \"matches\" can be\n   augmented.\n   module: ietf-access-control-list\n   \
    \  +--rw acls\n        +--rw acl* [name]\n        |  +--rw name    string\n  \
    \      |  +--rw type?   acl-type\n        |  +--rw aces\n        |     +--rw ace*\
    \ [name]\n        |        +--rw name          string\n        |        +--rw\
    \ matches\n        |        |  +--rw (l2)?\n        |        |  |  +--:(eth)\n\
    \        |        |  |     +--rw eth {match-on-eth}?\n        |        |  |  \
    \      +--rw destination-mac-address?\n        |        |  |        |       yang:mac-address\n\
    \        |        |  |        +--rw destination-mac-address-mask?\n        | \
    \       |  |        |       yang:mac-address\n        |        |  |        +--rw\
    \ source-mac-address?\n        |        |  |        |       yang:mac-address\n\
    \        |        |  |        +--rw source-mac-address-mask?\n        |      \
    \  |  |        |       yang:mac-address\n        |        |  |        +--rw ethertype?\n\
    \        |        |  |                eth:ethertype\n        |        |  +--rw\
    \ (l3)?\n        |        |  |  +--:(ipv4)\n        |        |  |  |  +--rw ipv4\
    \ {match-on-ipv4}?\n        |        |  |  |     +--rw dscp?\n        |      \
    \  |  |  |     |       inet:dscp\n        |        |  |  |     +--rw ecn?\n  \
    \      |        |  |  |     |       uint8\n        |        |  |  |     +--rw\
    \ length?\n        |        |  |  |     |       uint16\n        |        |  |\
    \  |     +--rw ttl?\n        |        |  |  |     |       uint8\n        |   \
    \     |  |  |     +--rw protocol?\n        |        |  |  |     |       uint8\n\
    \        |        |  |  |     +--rw ihl?\n        |        |  |  |     |     \
    \  uint8\n        |        |  |  |     +--rw flags?\n        |        |  |  |\
    \     |       bits\n        |        |  |  |     +--rw offset?\n        |    \
    \    |  |  |     |       uint16\n        |        |  |  |     +--rw identification?\n\
    \        |        |  |  |     |       uint16\n        |        |  |  |     +--rw\
    \ (destination-network)?\n        |        |  |  |     |  +--:(destination-ipv4-network)\n\
    \        |        |  |  |     |     +--rw destination-ipv4-network?\n        |\
    \        |  |  |     |             inet:ipv4-prefix\n        |        |  |  |\
    \     +--rw (source-network)?\n        |        |  |  |        +--:(source-ipv4-network)\n\
    \        |        |  |  |           +--rw source-ipv4-network?\n        |    \
    \    |  |  |                   inet:ipv4-prefix\n        |        |  |  +--:(ipv6)\n\
    \        |        |  |     +--rw ipv6 {match-on-ipv6}?\n        |        |  |\
    \        +--rw dscp?\n        |        |  |        |       inet:dscp\n       \
    \ |        |  |        +--rw ecn?\n        |        |  |        |       uint8\n\
    \        |        |  |        +--rw length?\n        |        |  |        |  \
    \     uint16\n        |        |  |        +--rw ttl?\n        |        |  | \
    \       |       uint8\n        |        |  |        +--rw protocol?\n        |\
    \        |  |        |       uint8\n        |        |  |        +--rw (destination-network)?\n\
    \        |        |  |        |  +--:(destination-ipv6-network)\n        |   \
    \     |  |        |     +--rw destination-ipv6-network?\n        |        |  |\
    \        |             inet:ipv6-prefix\n        |        |  |        +--rw (source-network)?\n\
    \        |        |  |        |  +--:(source-ipv6-network)\n        |        |\
    \  |        |     +--rw source-ipv6-network?\n        |        |  |        | \
    \            inet:ipv6-prefix\n        |        |  |        +--rw flow-label?\n\
    \        |        |  |                inet:ipv6-flow-label\n        |        |\
    \  +--rw (l4)?\n        |        |  |  +--:(tcp)\n        |        |  |  |  +--rw\
    \ tcp {match-on-tcp}?\n        |        |  |  |     +--rw sequence-number?   \
    \       uint32\n        |        |  |  |     +--rw acknowledgement-number?   uint32\n\
    \        |        |  |  |     +--rw data-offset?              uint8\n        |\
    \        |  |  |     +--rw reserved?                 uint8\n        |        |\
    \  |  |     +--rw flags?                    bits\n        |        |  |  |   \
    \  +--rw window-size?              uint16\n        |        |  |  |     +--rw\
    \ urgent-pointer?           uint16\n        |        |  |  |     +--rw options?\
    \                  binary\n        |        |  |  |     +--rw source-port\n  \
    \      |        |  |  |     |  +--rw (source-port)?\n        |        |  |  |\
    \     |     +--:(range-or-operator)\n        |        |  |  |     |        +--rw\
    \ (port-range-or-operator)?\n        |        |  |  |     |           +--:(range)\n\
    \        |        |  |  |     |           |  +--rw lower-port\n        |     \
    \   |  |  |     |           |  |       inet:port-number\n        |        |  |\
    \  |     |           |  +--rw upper-port\n        |        |  |  |     |     \
    \      |          inet:port-number\n        |        |  |  |     |           +--:(operator)\n\
    \        |        |  |  |     |              +--rw operator?     operator\n  \
    \      |        |  |  |     |              +--rw port\n        |        |  | \
    \ |     |                      inet:port-number\n        |        |  |  |    \
    \ +--rw destination-port\n        |        |  |  |        +--rw (destination-port)?\n\
    \        |        |  |  |           +--:(range-or-operator)\n        |       \
    \ |  |  |              +--rw (port-range-or-operator)?\n        |        |  |\
    \  |                 +--:(range)\n        |        |  |  |                 | \
    \ +--rw lower-port\n        |        |  |  |                 |  |       inet:port-number\n\
    \        |        |  |  |                 |  +--rw upper-port\n        |     \
    \   |  |  |                 |          inet:port-number\n        |        |  |\
    \  |                 +--:(operator)\n        |        |  |  |                \
    \    +--rw operator?     operator\n        |        |  |  |                  \
    \  +--rw port\n        |        |  |  |                            inet:port-number\n\
    \        |        |  |  +--:(udp)\n        |        |  |  |  +--rw udp {match-on-udp}?\n\
    \        |        |  |  |     +--rw length?             uint16\n        |    \
    \    |  |  |     +--rw source-port\n        |        |  |  |     |  +--rw (source-port)?\n\
    \        |        |  |  |     |     +--:(range-or-operator)\n        |       \
    \ |  |  |     |        +--rw (port-range-or-operator)?\n        |        |  |\
    \  |     |           +--:(range)\n        |        |  |  |     |           | \
    \ +--rw lower-port\n        |        |  |  |     |           |  |       inet:port-number\n\
    \        |        |  |  |     |           |  +--rw upper-port\n        |     \
    \   |  |  |     |           |          inet:port-number\n        |        |  |\
    \  |     |           +--:(operator)\n        |        |  |  |     |          \
    \    +--rw operator?     operator\n        |        |  |  |     |            \
    \  +--rw port\n        |        |  |  |     |                      inet:port-number\n\
    \        |        |  |  |     +--rw destination-port\n        |        |  |  |\
    \        +--rw (destination-port)?\n        |        |  |  |           +--:(range-or-operator)\n\
    \        |        |  |  |              +--rw (port-range-or-operator)?\n     \
    \   |        |  |  |                 +--:(range)\n        |        |  |  |   \
    \              |  +--rw lower-port\n        |        |  |  |                 |\
    \  |       inet:port-number\n        |        |  |  |                 |  +--rw\
    \ upper-port\n        |        |  |  |                 |          inet:port-number\n\
    \        |        |  |  |                 +--:(operator)\n        |        | \
    \ |  |                    +--rw operator?     operator\n        |        |  |\
    \  |                    +--rw port\n        |        |  |  |                 \
    \           inet:port-number\n        |        |  |  +--:(icmp)\n        |   \
    \     |  |     +--rw icmp {match-on-icmp}?\n        |        |  |        +--rw\
    \ type?             uint8\n        |        |  |        +--rw code?          \
    \   uint8\n        |        |  |        +--rw rest-of-header?   binary\n     \
    \   |        |  +--rw egress-interface?    if:interface-ref\n        |       \
    \ |  +--rw ingress-interface?   if:interface-ref\n        |        +--rw actions\n\
    \        |        |  +--rw forwarding    identityref\n        |        |  +--rw\
    \ logging?      identityref\n        |        +--ro statistics {acl-aggregate-stats}?\n\
    \        |           +--ro matched-packets?   yang:counter64\n        |      \
    \     +--ro matched-octets?    yang:counter64\n        +--rw attachment-points\n\
    \           +--rw interface* [interface-id] {interface-attachment}?\n        \
    \      +--rw interface-id    if:interface-ref\n              +--rw ingress\n \
    \             |  +--rw acl-sets\n              |     +--rw acl-set* [name]\n \
    \             |        +--rw name              -> /acls/acl/name\n           \
    \   |        +--ro ace-statistics* [name] {interface-stats}?\n              |\
    \           +--ro name\n              |           |       -> /acls/acl/aces/ace/name\n\
    \              |           +--ro matched-packets?   yang:counter64\n         \
    \     |           +--ro matched-octets?    yang:counter64\n              +--rw\
    \ egress\n                 +--rw acl-sets\n                    +--rw acl-set*\
    \ [name]\n                       +--rw name              -> /acls/acl/name\n \
    \                      +--ro ace-statistics* [name] {interface-stats}?\n     \
    \                     +--ro name\n                          |       -> /acls/acl/aces/ace/name\n\
    \                          +--ro matched-packets?   yang:counter64\n         \
    \                 +--ro matched-octets?    yang:counter64\n"
- title: 4.  ACL YANG Models
  contents:
  - '4.  ACL YANG Models

    '
- title: 4.1.  IETF Access Control List Module
  contents:
  - "4.1.  IETF Access Control List Module\n   The \"ietf-access-control-list\" module\
    \ defines the \"acls\" container\n   that has a list of each \"acl\".  Each \"\
    acl\" has information\n   identifying the access list by a name (\"name\") and\
    \ a list (\"aces\") of\n   rules associated with the \"name\".  Each of the entries\
    \ in the list\n   (\"aces\"), indexed by the string \"name\", has containers defining\n\
    \   \"matches\" and \"actions\".\n   The model defines several ACL types and actions\
    \ in the form of\n   identities and features.  Features are used by implementors\
    \ to select\n   the ACL types the system can support, and identities are used\
    \ to\n   validate the types that have been selected.  These types are\n   implicitly\
    \ inherited by the \"ace\", thus safeguarding against\n   misconfiguration of\
    \ \"ace\" types in an \"acl\".\n   The \"matches\" define criteria used to identify\
    \ patterns in \"ietf-\n   packet-fields\".  The choice statements within the match\
    \ container\n   allow for the selection of one header within each of \"l2\", \"\
    l3\", or\n   \"l4\" headers.  The \"actions\" define the behavior to undertake\
    \ once a\n   \"match\" has been identified.  In addition to permit and deny actions,\n\
    \   a logging option allows for a match to be logged that can later be\n   used\
    \ to determine which rule was matched upon.  The model also\n   defines the ability\
    \ for ACLs to be attached to a particular\n   interface.\n   Statistics in the\
    \ ACL can be collected for an \"ace\" or for an\n   \"interface\".  The feature\
    \ statements defined for statistics can be\n   used to determine whether statistics\
    \ are being collected per \"ace\" or\n   per \"interface\".\n   This module imports\
    \ definitions from \"Common YANG Data Types\"\n   [RFC6991] and \"A YANG Data\
    \ Model for Interface Management\" [RFC8343].\n"
- title: <CODE BEGINS> file "ietf-access-control-list@2019-03-04.yang"
  contents:
  - '<CODE BEGINS> file "ietf-access-control-list@2019-03-04.yang"

    '
- title: module ietf-access-control-list {
  contents:
  - "module ietf-access-control-list {\n  yang-version 1.1;\n  namespace \"urn:ietf:params:xml:ns:yang:ietf-access-control-list\"\
    ;\n  prefix acl;\n  import ietf-yang-types {\n    prefix yang;\n    reference\n\
    \      \"RFC 6991 - Common YANG Data Types.\";\n  }\n  import ietf-packet-fields\
    \ {\n    prefix pf;\n    reference\n      \"RFC 8519 - YANG Data Model for Network\
    \ Access Control\n                  Lists (ACLs).\";\n  }\n  import ietf-interfaces\
    \ {\n    prefix if;\n    reference\n      \"RFC 8343 - A YANG Data Model for Interface\
    \ Management.\";\n  }\n  organization\n    \"IETF NETMOD (Network Modeling) Working\
    \ Group.\";\n  contact\n    \"WG Web:  <https://datatracker.ietf.org/wg/netmod/>\n\
    \     WG List: netmod@ietf.org\n     Editor: Mahesh Jethanandani\n           \
    \  mjethanandani@gmail.com\n     Editor: Lisa Huang\n             huangyi_99@yahoo.com\n\
    \     Editor: Sonal Agarwal\n             sagarwal12@gmail.com\n     Editor: Dana\
    \ Blair\n             dana@blairhome.com\";\n  description\n    \"This YANG module\
    \ defines a component that describes the\n     configuration and monitoring of\
    \ Access Control Lists (ACLs).\n     The key words 'MUST', 'MUST NOT', 'REQUIRED',\
    \ 'SHALL',\n     'SHALL NOT', 'SHOULD', 'SHOULD NOT', 'RECOMMENDED',\n     'NOT\
    \ RECOMMENDED', 'MAY', and 'OPTIONAL' in this document\n     are to be interpreted\
    \ as described in BCP 14 (RFC 2119)\n     (RFC 8174) when, and only when, they\
    \ appear in all\n     capitals, as shown here.\n     Copyright (c) 2019 IETF Trust\
    \ and the persons identified as\n     the document authors.  All rights reserved.\n\
    \     Redistribution and use in source and binary forms, with or\n     without\
    \ modification, is permitted pursuant to, and subject\n     to the license terms\
    \ contained in, the Simplified BSD\n     License set forth in Section 4.c of the\
    \ IETF Trust's Legal\n     Provisions Relating to IETF Documents\n     (http://trustee.ietf.org/license-info).\n\
    \     This version of this YANG module is part of RFC 8519; see\n     the RFC\
    \ itself for full legal notices.\";\n  revision 2019-03-04 {\n    description\n\
    \      \"Initial version.\";\n    reference\n      \"RFC 8519: YANG Data Model\
    \ for Network Access Control\n                 Lists (ACLs).\";\n  }\n  /*\n \
    \  * Identities\n   */\n  /*\n   * Forwarding actions for a packet\n   */\n  identity\
    \ forwarding-action {\n    description\n      \"Base identity for actions in the\
    \ forwarding category.\";\n  }\n  identity accept {\n    base forwarding-action;\n\
    \    description\n      \"Accept the packet.\";\n  }\n  identity drop {\n    base\
    \ forwarding-action;\n    description\n      \"Drop packet without sending any\
    \ ICMP error message.\";\n  }\n  identity reject {\n    base forwarding-action;\n\
    \    description\n      \"Drop the packet and send an ICMP error message to the\
    \ source.\";\n  }\n  /*\n   * Logging actions for a packet\n   */\n  identity\
    \ log-action {\n    description\n      \"Base identity for defining the destination\
    \ for logging\n       actions.\";\n  }\n  identity log-syslog {\n    base log-action;\n\
    \    description\n      \"System log (syslog) the information for the packet.\"\
    ;\n  }\n  identity log-none {\n    base log-action;\n    description\n      \"\
    No logging for the packet.\";\n  }\n  /*\n   * ACL type identities\n   */\n  identity\
    \ acl-base {\n    description\n      \"Base Access Control List type for all Access\
    \ Control List type\n       identifiers.\";\n  }\n  identity ipv4-acl-type {\n\
    \    base acl:acl-base;\n    if-feature \"ipv4\";\n    description\n      \"An\
    \ ACL that matches on fields from the IPv4 header\n       (e.g., IPv4 destination\
    \ address) and Layer 4 headers (e.g., TCP\n       destination port).  An ACL of\
    \ type ipv4 does not contain\n       matches on fields in the Ethernet header\
    \ or the IPv6 header.\";\n  }\n  identity ipv6-acl-type {\n    base acl:acl-base;\n\
    \    if-feature \"ipv6\";\n    description\n      \"An ACL that matches on fields\
    \ from the IPv6 header\n       (e.g., IPv6 destination address) and Layer 4 headers\
    \ (e.g., TCP\n       destination port).  An ACL of type ipv6 does not contain\n\
    \       matches on fields in the Ethernet header or the IPv4 header.\";\n  }\n\
    \  identity eth-acl-type {\n    base acl:acl-base;\n    if-feature \"eth\";\n\
    \    description\n      \"An ACL that matches on fields in the Ethernet header,\n\
    \       like 10/100/1000baseT or a Wi-Fi Access Control List.  An ACL\n      \
    \ of type ethernet does not contain matches on fields in the\n       IPv4 header,\
    \ the IPv6 header, or Layer 4 headers.\";\n  }\n  identity mixed-eth-ipv4-acl-type\
    \ {\n    base acl:eth-acl-type;\n    base acl:ipv4-acl-type;\n    if-feature \"\
    mixed-eth-ipv4\";\n    description\n      \"An ACL that contains a mix of entries\
    \ that match\n       on fields in Ethernet headers and in IPv4 headers.\n    \
    \   Matching on Layer 4 header fields may also exist in the\n       list.\";\n\
    \  }\n  identity mixed-eth-ipv6-acl-type {\n    base acl:eth-acl-type;\n    base\
    \ acl:ipv6-acl-type;\n    if-feature \"mixed-eth-ipv6\";\n    description\n  \
    \    \"An ACL that contains a mix of entries that match on fields\n       in Ethernet\
    \ headers and in IPv6 headers.  Matching\n       on Layer 4 header fields may\
    \ also exist in the list.\";\n  }\n  identity mixed-eth-ipv4-ipv6-acl-type {\n\
    \    base acl:eth-acl-type;\n    base acl:ipv4-acl-type;\n    base acl:ipv6-acl-type;\n\
    \    if-feature \"mixed-eth-ipv4-ipv6\";\n    description\n      \"An ACL that\
    \ contains a mix of entries that\n       match on fields in Ethernet headers,\
    \ IPv4 headers, and IPv6\n       headers.  Matching on Layer 4 header fields may\
    \ also exist\n       in the list.\";\n  }\n  /*\n   * Features\n   */\n  /*\n\
    \   * Features supported by device\n   */\n  feature match-on-eth {\n    description\n\
    \      \"The device can support matching on Ethernet headers.\";\n  }\n  feature\
    \ match-on-ipv4 {\n    description\n      \"The device can support matching on\
    \ IPv4 headers.\";\n  }\n  feature match-on-ipv6 {\n    description\n      \"\
    The device can support matching on IPv6 headers.\";\n  }\n  feature match-on-tcp\
    \ {\n    description\n      \"The device can support matching on TCP headers.\"\
    ;\n  }\n  feature match-on-udp {\n    description\n      \"The device can support\
    \ matching on UDP headers.\";\n  }\n  feature match-on-icmp {\n    description\n\
    \      \"The device can support matching on ICMP (v4 and v6) headers.\";\n  }\n\
    \  /*\n   * Header classifications combinations supported by\n   * device\n  \
    \ */\n  feature eth {\n    if-feature \"match-on-eth\";\n    description\n   \
    \   \"Plain Ethernet ACL supported.\";\n  }\n  feature ipv4 {\n    if-feature\
    \ \"match-on-ipv4\";\n    description\n      \"Plain IPv4 ACL supported.\";\n\
    \  }\n  feature ipv6 {\n    if-feature \"match-on-ipv6\";\n    description\n \
    \     \"Plain IPv6 ACL supported.\";\n  }\n  feature mixed-eth-ipv4 {\n    if-feature\
    \ \"match-on-eth and match-on-ipv4\";\n    description\n      \"Ethernet and IPv4\
    \ ACL combinations supported.\";\n  }\n  feature mixed-eth-ipv6 {\n    if-feature\
    \ \"match-on-eth and match-on-ipv6\";\n    description\n      \"Ethernet and IPv6\
    \ ACL combinations supported.\";\n  }\n  feature mixed-eth-ipv4-ipv6 {\n    if-feature\n\
    \      \"match-on-eth and match-on-ipv4\n       and match-on-ipv6\";\n    description\n\
    \      \"Ethernet, IPv4, and IPv6 ACL combinations supported.\";\n  }\n  /*\n\
    \   * Stats Features\n   */\n  feature interface-stats {\n    description\n  \
    \    \"ACL counters are available and reported only per interface.\";\n  }\n \
    \ feature acl-aggregate-stats {\n    description\n      \"ACL counters are aggregated\
    \ over all interfaces and reported\n       only per ACL entry.\";\n  }\n  /*\n\
    \   * Attachment point features\n   */\n  feature interface-attachment {\n   \
    \ description\n      \"ACLs are set on interfaces.\";\n  }\n  /*\n   * Typedefs\n\
    \   */\n  typedef acl-type {\n    type identityref {\n      base acl-base;\n \
    \   }\n    description\n      \"This type is used to refer to an ACL type.\";\n\
    \  }\n  /*\n   * Groupings\n   */\n  grouping acl-counters {\n    description\n\
    \      \"Common grouping for ACL counters.\";\n    leaf matched-packets {\n  \
    \    type yang:counter64;\n      config false;\n      description\n        \"\
    Count of the number of packets matching the current ACL\n         entry.\n   \
    \      An implementation should provide this counter on a\n         per-interface,\
    \ per-ACL-entry basis if possible.\n         If an implementation only supports\
    \ ACL counters on a per-\n         entry basis (i.e., not broken out per interface),\
    \ then the\n         value should be equal to the aggregate count across all\n\
    \         interfaces.\n         An implementation that provides counters on a\
    \ per-entry, per-\n         interface basis is not required to also provide an\
    \ aggregate\n         count, e.g., per entry -- the user is expected to be able\
    \ to\n         implement the required aggregation if such a count is\n       \
    \  needed.\";\n    }\n    leaf matched-octets {\n      type yang:counter64;\n\
    \      config false;\n      description\n        \"Count of the number of octets\
    \ (bytes) matching the current\n         ACL entry.\n         An implementation\
    \ should provide this counter on a\n         per-interface, per-ACL-entry basis\
    \ if possible.\n         If an implementation only supports ACL counters per entry\n\
    \         (i.e., not broken out per interface), then the value\n         should\
    \ be equal to the aggregate count across all interfaces.\n         An implementation\
    \ that provides counters per entry per\n         interface is not required to\
    \ also provide an aggregate count,\n         e.g., per entry -- the user is expected\
    \ to be able to\n         implement the required aggregation if such a count is\
    \ needed.\";\n    }\n  }\n  /*\n   * Configuration and monitoring data nodes\n\
    \   */\n  container acls {\n    description\n      \"This is a top-level container\
    \ for Access Control Lists.\n       It can have one or more acl nodes.\";\n  \
    \  list acl {\n      key \"name\";\n      description\n        \"An ACL is an\
    \ ordered list of ACEs.  Each ACE has a\n         list of match criteria and a\
    \ list of actions.\n         Since there are several kinds of ACLs implemented\n\
    \         with different attributes for different vendors,\n         this model\
    \ accommodates customizing ACLs for\n         each kind and for each vendor.\"\
    ;\n      leaf name {\n        type string {\n          length \"1..64\";\n   \
    \     }\n        description\n          \"The name of the access list.  A device\
    \ MAY further\n           restrict the length of this name; space and special\n\
    \           characters are not allowed.\";\n      }\n      leaf type {\n     \
    \   type acl-type;\n        description\n          \"Type of ACL.  Indicates the\
    \ primary intended\n           type of match criteria (e.g., Ethernet, IPv4, IPv6,\
    \ mixed,\n           etc.) used in the list instance.\";\n      }\n      container\
    \ aces {\n        description\n          \"The aces container contains one or\
    \ more ACE nodes.\";\n        list ace {\n          key \"name\";\n          ordered-by\
    \ user;\n          description\n            \"List of ACEs.\";\n          leaf\
    \ name {\n            type string {\n              length \"1..64\";\n       \
    \     }\n            description\n              \"A unique name identifying this\
    \ ACE.\";\n          }\n          container matches {\n            description\n\
    \              \"The rules in this set determine what fields will be\n       \
    \        matched upon before any action is taken on them.\n               The\
    \ rules are selected based on the feature set\n               defined by the server\
    \ and the acl-type defined.\n               If no matches are defined in a particular\
    \ container,\n               then any packet will match that container.  If no\n\
    \               matches are specified at all in an ACE, then any\n           \
    \    packet will match the ACE.\";\n            choice l2 {\n              container\
    \ eth {\n                when \"derived-from-or-self(/acls/acl/type, \"\n    \
    \               + \"'acl:eth-acl-type')\";\n                if-feature \"match-on-eth\"\
    ;\n                uses pf:acl-eth-header-fields;\n                description\n\
    \                  \"Rule set that matches Ethernet headers.\";\n            \
    \  }\n              description\n                \"Match Layer 2 headers, for\
    \ example, Ethernet\n                 header fields.\";\n            }\n     \
    \       choice l3 {\n              container ipv4 {\n                when \"derived-from-or-self(/acls/acl/type,\
    \ \"\n                   + \"'acl:ipv4-acl-type')\";\n                if-feature\
    \ \"match-on-ipv4\";\n                uses pf:acl-ip-header-fields;\n        \
    \        uses pf:acl-ipv4-header-fields;\n                description\n      \
    \            \"Rule set that matches IPv4 headers.\";\n              }\n     \
    \         container ipv6 {\n                when \"derived-from-or-self(/acls/acl/type,\
    \ \"\n                   + \"'acl:ipv6-acl-type')\";\n                if-feature\
    \ \"match-on-ipv6\";\n                uses pf:acl-ip-header-fields;\n        \
    \        uses pf:acl-ipv6-header-fields;\n                description\n      \
    \            \"Rule set that matches IPv6 headers.\";\n              }\n     \
    \         description\n                \"Choice of either IPv4 or IPv6 headers\"\
    ;\n            }\n            choice l4 {\n              container tcp {\n   \
    \             if-feature \"match-on-tcp\";\n                uses pf:acl-tcp-header-fields;\n\
    \                container source-port {\n                  choice source-port\
    \ {\n                    case range-or-operator {\n                      uses\
    \ pf:port-range-or-operator;\n                      description\n            \
    \            \"Source port definition from range or\n                        \
    \ operator.\";\n                    }\n                    description\n     \
    \                 \"Choice of source port definition using\n                 \
    \      range/operator or a choice to support future\n                       'case'\
    \ statements, such as one enabling a\n                       group of source ports\
    \ to be referenced.\";\n                  }\n                  description\n \
    \                   \"Source port definition.\";\n                }\n        \
    \        container destination-port {\n                  choice destination-port\
    \ {\n                    case range-or-operator {\n                      uses\
    \ pf:port-range-or-operator;\n                      description\n            \
    \            \"Destination port definition from range or\n                   \
    \      operator.\";\n                    }\n                    description\n\
    \                      \"Choice of destination port definition using\n       \
    \                range/operator or a choice to support future\n              \
    \         'case' statements, such as one enabling a\n                       group\
    \ of destination ports to be referenced.\";\n                  }\n           \
    \       description\n                    \"Destination port definition.\";\n \
    \               }\n                description\n                  \"Rule set that\
    \ matches TCP headers.\";\n              }\n              container udp {\n  \
    \              if-feature \"match-on-udp\";\n                uses pf:acl-udp-header-fields;\n\
    \                container source-port {\n                  choice source-port\
    \ {\n                    case range-or-operator {\n                      uses\
    \ pf:port-range-or-operator;\n                      description\n            \
    \            \"Source port definition from range or\n                        \
    \ operator.\";\n                    }\n                    description\n     \
    \                 \"Choice of source port definition using\n                 \
    \      range/operator or a choice to support future\n                       'case'\
    \ statements, such as one enabling a\n                       group of source ports\
    \ to be referenced.\";\n                  }\n                  description\n \
    \                   \"Source port definition.\";\n                }\n        \
    \        container destination-port {\n                  choice destination-port\
    \ {\n                    case range-or-operator {\n                      uses\
    \ pf:port-range-or-operator;\n                      description\n            \
    \            \"Destination port definition from range or\n                   \
    \      operator.\";\n                    }\n                    description\n\
    \                      \"Choice of destination port definition using\n       \
    \                range/operator or a choice to support future\n              \
    \         'case' statements, such as one enabling a\n                       group\
    \ of destination ports to be referenced.\";\n                  }\n           \
    \       description\n                    \"Destination port definition.\";\n \
    \               }\n                description\n                  \"Rule set that\
    \ matches UDP headers.\";\n              }\n              container icmp {\n \
    \               if-feature \"match-on-icmp\";\n                uses pf:acl-icmp-header-fields;\n\
    \                description\n                  \"Rule set that matches ICMP headers.\"\
    ;\n              }\n              description\n                \"Choice of TCP,\
    \ UDP, or ICMP headers.\";\n            }\n            leaf egress-interface {\n\
    \              type if:interface-ref;\n              description\n           \
    \     \"Egress interface.  This should not be used if this ACL\n             \
    \    is attached as an egress ACL (or the value should\n                 equal\
    \ the interface to which the ACL is attached).\";\n            }\n           \
    \ leaf ingress-interface {\n              type if:interface-ref;\n           \
    \   description\n                \"Ingress interface.  This should not be used\
    \ if this ACL\n                 is attached as an ingress ACL (or the value should\n\
    \                 equal the interface to which the ACL is attached).\";\n    \
    \        }\n          }\n          container actions {\n            description\n\
    \              \"Definition of actions for this ace entry.\";\n            leaf\
    \ forwarding {\n              type identityref {\n                base forwarding-action;\n\
    \              }\n              mandatory true;\n              description\n \
    \               \"Specifies the forwarding action per ace entry.\";\n        \
    \    }\n            leaf logging {\n              type identityref {\n       \
    \         base log-action;\n              }\n              default \"log-none\"\
    ;\n              description\n                \"Specifies the log action and destination\
    \ for\n                 matched packets.  Default value is not to log the\n  \
    \               packet.\";\n            }\n          }\n          container statistics\
    \ {\n            if-feature \"acl-aggregate-stats\";\n            config false;\n\
    \            description\n              \"Statistics gathered across all attachment\
    \ points for the\n               given ACL.\";\n            uses acl-counters;\n\
    \          }\n        }\n      }\n    }\n    container attachment-points {\n \
    \     description\n        \"Enclosing container for the list of\n         attachment\
    \ points on which ACLs are set.\";\n      /*\n       * Groupings\n       */\n\
    \      grouping interface-acl {\n        description\n          \"Grouping for\
    \ per-interface ingress ACL data.\";\n        container acl-sets {\n         \
    \ description\n            \"Enclosing container for the list of ingress ACLs\
    \ on the\n             interface.\";\n          list acl-set {\n            key\
    \ \"name\";\n            ordered-by user;\n            description\n         \
    \     \"List of ingress ACLs on the interface.\";\n            leaf name {\n \
    \             type leafref {\n                path \"/acls/acl/name\";\n     \
    \         }\n              description\n                \"Reference to the ACL\
    \ name applied on the ingress.\";\n            }\n            list ace-statistics\
    \ {\n              if-feature \"interface-stats\";\n              key \"name\"\
    ;\n              config false;\n              description\n                \"\
    List of ACEs.\";\n              leaf name {\n                type leafref {\n\
    \                  path \"/acls/acl/aces/ace/name\";\n                }\n    \
    \            description\n                  \"Name of the ace entry.\";\n    \
    \          }\n              uses acl-counters;\n            }\n          }\n \
    \       }\n      }\n      list interface {\n        if-feature \"interface-attachment\"\
    ;\n        key \"interface-id\";\n        description\n          \"List of interfaces\
    \ on which ACLs are set.\";\n        leaf interface-id {\n          type if:interface-ref;\n\
    \          description\n            \"Reference to the interface id list key.\"\
    ;\n        }\n        container ingress {\n          uses interface-acl;\n   \
    \       description\n            \"The ACLs applied to the ingress interface.\"\
    ;\n        }\n        container egress {\n          uses interface-acl;\n    \
    \      description\n            \"The ACLs applied to the egress interface.\"\
    ;\n        }\n      }\n    }\n  }\n"
- title: '}'
  contents:
  - '}

    '
- title: <CODE ENDS>
  contents:
  - '<CODE ENDS>

    '
- title: 4.2.  IETF Packet Fields Module
  contents:
  - "4.2.  IETF Packet Fields Module\n   The packet fields module defines the necessary\
    \ groups for matching on\n   fields in the packet including Ethernet, IPv4, IPv6,\
    \ and transport-\n   layer fields.  The \"type\" node determines which of these\
    \ fields get\n   included for any given ACL with the exception of TCP, UDP, and\
    \ ICMP\n   header fields.  Those fields can be used in conjunction with any of\n\
    \   the above Layer 2 or Layer 3 fields.\n   Since the number of match criteria\
    \ are very large, the base\n   specification does not include these directly but\
    \ references them by\n   the 'uses' statement to keep the base module simple.\
    \  In case more\n   match conditions are needed, those can be added by augmenting\
    \ choices\n   within container \"matches\" in the ietf-access-control-list.yang\
    \ data\n   model.\n   This module imports definitions from \"Common YANG Data\
    \ Types\"\n   [RFC6991] and references \"Internet Protocol\" [RFC791], \"Internet\n\
    \   Control Message Protocol\" [RFC792], \"Transmission Control Protocol\"\n \
    \  [RFC793], \"Definition of the Differentiated Services Field (DS Field)\n  \
    \ in the IPv4 and IPv6 Headers\" [RFC2474], \"The Addition of Explicit\n   Congestion\
    \ Notification (ECN) to IP\" [RFC3168], \"IPv6 Scoped Address\n   Architecture\"\
    \ [RFC4007], \"IP Version 6 Addressing Architecture\"\n   [RFC4291], \"A Recommendation\
    \ for IPv6 Address Text Representation\"\n   [RFC5952], and \"Internet Protocol,\
    \ Version 6 (IPv6) Specification\"\n   [RFC8200].\n"
- title: <CODE BEGINS> file "ietf-packet-fields@2019-03-04.yang"
  contents:
  - '<CODE BEGINS> file "ietf-packet-fields@2019-03-04.yang"

    '
- title: module ietf-packet-fields {
  contents:
  - "module ietf-packet-fields {\n  yang-version 1.1;\n  namespace \"urn:ietf:params:xml:ns:yang:ietf-packet-fields\"\
    ;\n  prefix packet-fields;\n  import ietf-inet-types {\n    prefix inet;\n   \
    \ reference\n      \"RFC 6991 - Common YANG Data Types.\";\n  }\n  import ietf-yang-types\
    \ {\n    prefix yang;\n    reference\n      \"RFC 6991 - Common YANG Data Types.\"\
    ;\n  }\n  import ietf-ethertypes {\n    prefix eth;\n    reference\n      \"RFC\
    \ 8519 - YANG Data Model for Network Access Control\n                  Lists (ACLs).\"\
    ;\n  }\n  organization\n    \"IETF NETMOD (Network Modeling) Working Group.\"\
    ;\n  contact\n    \"WG Web:  <https://datatracker.ietf.org/wg/netmod/>\n     WG\
    \ List: netmod@ietf.org\n     Editor: Mahesh Jethanandani\n             mjethanandani@gmail.com\n\
    \     Editor: Lisa Huang\n             huangyi_99@yahoo.com\n     Editor: Sonal\
    \ Agarwal\n             sagarwal12@gmail.com\n     Editor: Dana Blair\n      \
    \       dana@blairhome.com\";\n  description\n    \"This YANG module defines groupings\
    \ that are used by\n     the ietf-access-control-list YANG module.  Their usage\n\
    \     is not limited to ietf-access-control-list and can be\n     used anywhere\
    \ as applicable.\n     Copyright (c) 2019 IETF Trust and the persons identified\
    \ as\n     the document authors.  All rights reserved.\n     Redistribution and\
    \ use in source and binary forms, with or\n     without modification, is permitted\
    \ pursuant to, and subject\n     to the license terms contained in, the Simplified\
    \ BSD\n     License set forth in Section 4.c of the IETF Trust's Legal\n     Provisions\
    \ Relating to IETF Documents\n     (http://trustee.ietf.org/license-info).\n \
    \    This version of this YANG module is part of RFC 8519; see\n     the RFC itself\
    \ for full legal notices.\";\n  revision 2019-03-04 {\n    description\n     \
    \ \"Initial version.\";\n    reference\n      \"RFC 8519: YANG Data Model for\
    \ Network Access Control\n                 Lists (ACLs).\";\n  }\n  /*\n   * Typedefs\n\
    \   */\n  typedef operator {\n    type enumeration {\n      enum lte {\n     \
    \   description\n          \"Less than or equal to.\";\n      }\n      enum gte\
    \ {\n        description\n          \"Greater than or equal to.\";\n      }\n\
    \      enum eq {\n        description\n          \"Equal to.\";\n      }\n   \
    \   enum neq {\n        description\n          \"Not equal to.\";\n      }\n \
    \   }\n    description\n      \"The source and destination port range definitions\n\
    \       can be further qualified using an operator.  An\n       operator is needed\
    \ only if the lower-port is specified\n       and the upper-port is not specified.\
    \  The operator\n       therefore further qualifies the lower-port only.\";\n\
    \  }\n  /*\n   * Groupings\n   */\n  grouping port-range-or-operator {\n    choice\
    \ port-range-or-operator {\n      case range {\n        leaf lower-port {\n  \
    \        type inet:port-number;\n          must '. <= ../upper-port' {\n     \
    \       error-message\n              \"The lower-port must be less than or equal\
    \ to\n               the upper-port.\";\n          }\n          mandatory true;\n\
    \          description\n            \"Lower boundary for a port.\";\n        }\n\
    \        leaf upper-port {\n          type inet:port-number;\n          mandatory\
    \ true;\n          description\n            \"Upper boundary for a port.\";\n\
    \        }\n      }\n      case operator {\n        leaf operator {\n        \
    \  type operator;\n          default \"eq\";\n          description\n        \
    \    \"Operator to be applied on the port below.\";\n        }\n        leaf port\
    \ {\n          type inet:port-number;\n          mandatory true;\n          description\n\
    \            \"Port number along with the operator on which to\n             match.\"\
    ;\n        }\n      }\n      description\n        \"Choice of specifying a port\
    \ range or a single\n         port along with an operator.\";\n    }\n    description\n\
    \      \"Grouping for port definitions in the form of a\n       choice statement.\"\
    ;\n  }\n  grouping acl-ip-header-fields {\n    description\n      \"IP header\
    \ fields common to IPv4 and IPv6\";\n    reference\n      \"RFC 791: Internet\
    \ Protocol.\";\n    leaf dscp {\n      type inet:dscp;\n      description\n  \
    \      \"Differentiated Services Code Point.\";\n      reference\n        \"RFC\
    \ 2474: Definition of the Differentiated Services\n                   Field (DS\
    \ Field) in the IPv4 and IPv6\n                   Headers.\";\n    }\n    leaf\
    \ ecn {\n      type uint8 {\n        range \"0..3\";\n      }\n      description\n\
    \        \"Explicit Congestion Notification.\";\n      reference\n        \"RFC\
    \ 3168: The Addition of Explicit Congestion\n                   Notification (ECN)\
    \ to IP.\";\n    }\n    leaf length {\n      type uint16;\n      description\n\
    \        \"In the IPv4 header field, this field is known as the Total\n      \
    \   Length.  Total Length is the length of the datagram, measured\n         in\
    \ octets, including internet header and data.\n         In the IPv6 header field,\
    \ this field is known as the Payload\n         Length, which is the length of\
    \ the IPv6 payload, i.e., the rest\n         of the packet following the IPv6\
    \ header, in octets.\";\n      reference\n        \"RFC 791: Internet Protocol\n\
    \         RFC 8200: Internet Protocol, Version 6 (IPv6) Specification.\";\n  \
    \  }\n    leaf ttl {\n      type uint8;\n      description\n        \"This field\
    \ indicates the maximum time the datagram is allowed\n         to remain in the\
    \ internet system.  If this field contains the\n         value zero, then the\
    \ datagram must be dropped.\n         In IPv6, this field is known as the Hop\
    \ Limit.\";\n      reference\n        \"RFC 791: Internet Protocol\n         RFC\
    \ 8200: Internet Protocol, Version 6 (IPv6) Specification.\";\n    }\n    leaf\
    \ protocol {\n      type uint8;\n      description\n        \"Internet Protocol\
    \ number.  Refers to the protocol of the\n         payload.  In IPv6, this field\
    \ is known as 'next-header',\n         and if extension headers are present, the\
    \ protocol is\n         present in the 'upper-layer' header.\";\n      reference\n\
    \        \"RFC 791: Internet Protocol\n         RFC 8200: Internet Protocol, Version\
    \ 6 (IPv6) Specification.\";\n    }\n  }\n  grouping acl-ipv4-header-fields {\n\
    \    description\n      \"Fields in the IPv4 header.\";\n    leaf ihl {\n    \
    \  type uint8 {\n        range \"5..60\";\n      }\n      description\n      \
    \  \"In an IPv4 header field, the Internet Header Length (IHL) is\n         the\
    \ length of the internet header in 32-bit words and\n         thus points to the\
    \ beginning of the data.  Note that the\n         minimum value for a correct\
    \ header is 5.\";\n    }\n    leaf flags {\n      type bits {\n        bit reserved\
    \ {\n          position 0;\n          description\n            \"Reserved.  Must\
    \ be zero.\";\n        }\n        bit fragment {\n          position 1;\n    \
    \      description\n            \"Setting the value to 0 indicates may fragment,\
    \ while\n             setting the value to 1 indicates do not fragment.\";\n \
    \       }\n        bit more {\n          position 2;\n          description\n\
    \            \"Setting the value to 0 indicates this is the last fragment,\n \
    \            and setting the value to 1 indicates more fragments are\n       \
    \      coming.\";\n        }\n      }\n      description\n        \"Bit definitions\
    \ for the Flags field in the IPv4 header.\";\n    }\n    leaf offset {\n     \
    \ type uint16 {\n        range \"20..65535\";\n      }\n      description\n  \
    \      \"The fragment offset is measured in units of 8 octets (64 bits).\n   \
    \      The first fragment has offset zero.  The length is 13 bits\";\n    }\n\
    \    leaf identification {\n      type uint16;\n      description\n        \"\
    An identifying value assigned by the sender to aid in\n         assembling the\
    \ fragments of a datagram.\";\n    }\n    choice destination-network {\n     \
    \ case destination-ipv4-network {\n        leaf destination-ipv4-network {\n \
    \         type inet:ipv4-prefix;\n          description\n            \"Destination\
    \ IPv4 address prefix.\";\n        }\n      }\n      description\n        \"Choice\
    \ of specifying a destination IPv4 address or\n         referring to a group of\
    \ IPv4 destination addresses.\";\n    }\n    choice source-network {\n      case\
    \ source-ipv4-network {\n        leaf source-ipv4-network {\n          type inet:ipv4-prefix;\n\
    \          description\n            \"Source IPv4 address prefix.\";\n       \
    \ }\n      }\n      description\n        \"Choice of specifying a source IPv4\
    \ address or\n         referring to a group of IPv4 source addresses.\";\n   \
    \ }\n  }\n  grouping acl-ipv6-header-fields {\n    description\n      \"Fields\
    \ in the IPv6 header.\";\n    choice destination-network {\n      case destination-ipv6-network\
    \ {\n        leaf destination-ipv6-network {\n          type inet:ipv6-prefix;\n\
    \          description\n            \"Destination IPv6 address prefix.\";\n  \
    \      }\n      }\n      description\n        \"Choice of specifying a destination\
    \ IPv6 address\n         or referring to a group of IPv6 destination\n       \
    \  addresses.\";\n    }\n    choice source-network {\n      case source-ipv6-network\
    \ {\n        leaf source-ipv6-network {\n          type inet:ipv6-prefix;\n  \
    \        description\n            \"Source IPv6 address prefix.\";\n        }\n\
    \      }\n      description\n        \"Choice of specifying a source IPv6 address\
    \ or\n         referring to a group of IPv6 source addresses.\";\n    }\n    leaf\
    \ flow-label {\n      type inet:ipv6-flow-label;\n      description\n        \"\
    IPv6 Flow label.\";\n    }\n    reference\n      \"RFC 4291: IP Version 6 Addressing\
    \ Architecture\n       RFC 4007: IPv6 Scoped Address Architecture\n       RFC\
    \ 5952: A Recommendation for IPv6 Address Text\n                 Representation.\"\
    ;\n  }\n  grouping acl-eth-header-fields {\n    description\n      \"Fields in\
    \ the Ethernet header.\";\n    leaf destination-mac-address {\n      type yang:mac-address;\n\
    \      description\n        \"Destination IEEE 802 Media Access Control (MAC)\n\
    \         address.\";\n    }\n    leaf destination-mac-address-mask {\n      type\
    \ yang:mac-address;\n      description\n        \"Destination IEEE 802 MAC address\
    \ mask.\";\n    }\n    leaf source-mac-address {\n      type yang:mac-address;\n\
    \      description\n        \"Source IEEE 802 MAC address.\";\n    }\n    leaf\
    \ source-mac-address-mask {\n      type yang:mac-address;\n      description\n\
    \        \"Source IEEE 802 MAC address mask.\";\n    }\n    leaf ethertype {\n\
    \      type eth:ethertype;\n      description\n        \"The Ethernet Type (or\
    \ Length) value represented\n         in the canonical order defined by IEEE 802.\n\
    \         The canonical representation uses lowercase\n         characters.\"\
    ;\n      reference\n        \"IEEE 802-2014, Clause 9.2.\";\n    }\n    reference\n\
    \      \"IEEE 802: IEEE Standard for Local and Metropolitan\n       Area Networks:\
    \ Overview and Architecture.\";\n  }\n  grouping acl-tcp-header-fields {\n   \
    \ description\n      \"Collection of TCP header fields that can be used to\n \
    \      set up a match filter.\";\n    leaf sequence-number {\n      type uint32;\n\
    \      description\n        \"Sequence number that appears in the packet.\";\n\
    \    }\n    leaf acknowledgement-number {\n      type uint32;\n      description\n\
    \        \"The acknowledgement number that appears in the\n         packet.\"\
    ;\n    }\n    leaf data-offset {\n      type uint8 {\n        range \"5..15\"\
    ;\n      }\n      description\n        \"Specifies the size of the TCP header\
    \ in 32-bit\n         words.  The minimum size header is 5 words and\n       \
    \  the maximum is 15 words; thus, this gives a\n         minimum size of 20 bytes\
    \ and a maximum of 60\n         bytes, allowing for up to 40 bytes of options\n\
    \         in the header.\";\n    }\n    leaf reserved {\n      type uint8;\n \
    \     description\n        \"Reserved for future use.\";\n    }\n    leaf flags\
    \ {\n      type bits {\n        bit cwr {\n          position 1;\n          description\n\
    \            \"The Congestion Window Reduced (CWR) flag is set\n             by\
    \ the sending host to indicate that it received\n             a TCP segment with\
    \ the ECN-Echo (ECE) flag set\n             and had responded in the congestion\
    \ control\n             mechanism.\";\n          reference\n            \"RFC\
    \ 3168: The Addition of Explicit Congestion\n                       Notification\
    \ (ECN) to IP.\";\n        }\n        bit ece {\n          position 2;\n     \
    \     description\n            \"ECN-Echo has a dual role, depending on the value\n\
    \             of the SYN flag.  It indicates the following: if\n             the\
    \ SYN flag is set (1), the TCP peer is ECN\n             capable, and if the SYN\
    \ flag is clear (0), a packet\n             with the Congestion Experienced flag\
    \ set (ECN=11)\n             in the IP header was received during normal\n   \
    \          transmission (added to the header by RFC 3168).\n             This\
    \ serves as an indication of network congestion\n             (or impending congestion)\
    \ to the TCP sender.\";\n          reference\n            \"RFC 3168: The Addition\
    \ of Explicit Congestion\n                       Notification (ECN) to IP.\";\n\
    \        }\n        bit urg {\n          position 3;\n          description\n\
    \            \"Indicates that the Urgent Pointer field is significant.\";\n  \
    \      }\n        bit ack {\n          position 4;\n          description\n  \
    \          \"Indicates that the Acknowledgement field is significant.\n      \
    \       All packets after the initial SYN packet sent by the\n             client\
    \ should have this flag set.\";\n        }\n        bit psh {\n          position\
    \ 5;\n          description\n            \"Push function.  Asks to push the buffered\
    \ data to the\n             receiving application.\";\n        }\n        bit\
    \ rst {\n          position 6;\n          description\n            \"Reset the\
    \ connection.\";\n        }\n        bit syn {\n          position 7;\n      \
    \    description\n            \"Synchronize sequence numbers.  Only the first\
    \ packet\n             sent from each end should have this flag set.  Some\n \
    \            other flags and fields change meaning based on this\n           \
    \  flag, and some are only valid for when it is set,\n             and others\
    \ when it is clear.\";\n        }\n        bit fin {\n          position 8;\n\
    \          description\n            \"Last package from the sender.\";\n     \
    \   }\n      }\n      description\n        \"Also known as Control Bits.  Contains\
    \ nine 1-bit flags.\";\n      reference\n        \"RFC 793: Transmission Control\
    \ Protocol.\";\n    }\n    leaf window-size {\n      type uint16;\n      units\
    \ \"bytes\";\n      description\n        \"The size of the receive window, which\
    \ specifies\n         the number of window size units beyond the segment\n   \
    \      identified by the sequence number in the Acknowledgement\n         field\
    \ that the sender of this segment is currently\n         willing to receive.\"\
    ;\n    }\n    leaf urgent-pointer {\n      type uint16;\n      description\n \
    \       \"This field is an offset from the sequence number\n         indicating\
    \ the last urgent data byte.\";\n    }\n    leaf options {\n      type binary\
    \ {\n        length \"1..40\";\n      }\n      description\n        \"The length\
    \ of this field is determined by the\n         Data Offset field.  Options have\
    \ up to three\n         fields: Option-Kind (1 byte), Option-Length\n        \
    \ (1 byte), and Option-Data (variable).  The Option-Kind\n         field indicates\
    \ the type of option and is the\n         only field that is not optional.  Depending\
    \ on\n         what kind of option we are dealing with,\n         the next two\
    \ fields may be set: the Option-Length\n         field indicates the total length\
    \ of the option,\n         and the Option-Data field contains the value of\n \
    \        the option, if applicable.\";\n    }\n  }\n  grouping acl-udp-header-fields\
    \ {\n    description\n      \"Collection of UDP header fields that can be used\n\
    \       to set up a match filter.\";\n    leaf length {\n      type uint16;\n\
    \      description\n        \"A field that specifies the length in bytes of\n\
    \         the UDP header and UDP data.  The minimum\n         length is 8 bytes\
    \ because that is the length of\n         the header.  The field size sets a theoretical\n\
    \         limit of 65,535 bytes (8-byte header plus 65,527\n         bytes of\
    \ data) for a UDP datagram.  However, the\n         actual limit for the data\
    \ length, which is\n         imposed by the underlying IPv4 protocol, is\n   \
    \      65,507 bytes (65,535 minus 8-byte UDP header\n         minus 20-byte IP\
    \ header).\n         In IPv6 jumbograms, it is possible to have\n         UDP\
    \ packets of a size greater than 65,535 bytes.\n         RFC 2675 specifies that\
    \ the Length field is set\n         to zero if the length of the UDP header plus\n\
    \         UDP data is greater than 65,535.\";\n    }\n  }\n  grouping acl-icmp-header-fields\
    \ {\n    description\n      \"Collection of ICMP header fields that can be\n \
    \      used to set up a match filter.\";\n    leaf type {\n      type uint8;\n\
    \      description\n        \"Also known as control messages.\";\n      reference\n\
    \        \"RFC 792: Internet Control Message Protocol\n         RFC 4443: Internet\
    \ Control Message Protocol (ICMPv6)\n                   for Internet Protocol\
    \ Version 6 (IPv6)\n                   Specification.\";\n    }\n    leaf code\
    \ {\n      type uint8;\n      description\n        \"ICMP subtype.  Also known\
    \ as control messages.\";\n      reference\n        \"RFC 792: Internet Control\
    \ Message Protocol\n         RFC 4443: Internet Control Message Protocol (ICMPv6)\n\
    \                   for Internet Protocol Version 6 (IPv6)\n                 \
    \  Specification.\";\n    }\n    leaf rest-of-header {\n      type binary;\n \
    \     description\n        \"Unbounded in length, the contents vary based on the\n\
    \         ICMP type and code.  Also referred to as 'Message Body'\n         in\
    \ ICMPv6.\";\n      reference\n        \"RFC 792: Internet Control Message Protocol\n\
    \         RFC 4443: Internet Control Message Protocol (ICMPv6)\n             \
    \      for Internet Protocol Version 6 (IPv6)\n                   Specification.\"\
    ;\n    }\n  }\n"
- title: '}'
  contents:
  - '}

    '
- title: <CODE ENDS>
  contents:
  - '<CODE ENDS>

    '
- title: 4.3.  ACL Examples
  contents:
  - "4.3.  ACL Examples\n   Requirement: Deny tcp traffic from 192.0.2.0/24, destined\
    \ to\n   198.51.100.0/24.\n   Here is the ACL configuration xml for this Access\
    \ Control List:\n   [note: '\\' line wrapping for formatting only]\n   <?xml version=\"\
    1.0\" encoding=\"UTF-8\"?>\n   <config xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\"\
    >\n     <acls\n       xmlns=\"urn:ietf:params:xml:ns:yang:ietf-access-control-list\"\
    >\n       <acl>\n         <name>sample-ipv4-acl</name>\n         <type>ipv4-acl-type</type>\n\
    \         <aces>\n           <ace>\n             <name>rule1</name>\n        \
    \     <matches>\n               <ipv4>\n                 <protocol>6</protocol>\n\
    \                 <destination-ipv4-network>198.51.100.0/24</destination\\\n \
    \  -ipv4-network>\n                 <source-ipv4-network>192.0.2.0/24</source-ipv4-network>\n\
    \               </ipv4>\n             </matches>\n             <actions>\n   \
    \            <forwarding>drop</forwarding>\n             </actions>\n        \
    \   </ace>\n         </aces>\n       </acl>\n     </acls>\n   </config>\n   The\
    \ ACL and ACEs can be described in the command-line interface (CLI)\n   as the\
    \ following:\n         acl ipv4 sample-ipv4-acl\n         deny tcp 192.0.2.0/24\
    \ 198.51.100.0/24\n   Requirement: Accept all DNS traffic destined for 2001:db8::/32\
    \ on\n   port 53.\n   [note: '\\' line wrapping for formatting only]\n   <?xml\
    \ version=\"1.0\" encoding=\"UTF-8\"?>\n   <config xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\"\
    >\n     <acls\n       xmlns=\"urn:ietf:params:xml:ns:yang:ietf-access-control-list\"\
    >\n       <acl>\n         <name>allow-dns-packets</name>\n         <type>ipv6-acl-type</type>\n\
    \         <aces>\n           <ace>\n             <name>rule1</name>\n        \
    \     <matches>\n               <ipv6>\n                 <destination-ipv6-network>2001:db8::/32</destination-i\\\
    \n   pv6-network>\n               </ipv6>\n               <udp>\n            \
    \     <destination-port>\n                   <operator>eq</operator>\n       \
    \            <port>53</port>\n                 </destination-port>\n         \
    \      </udp>\n             </matches>\n             <actions>\n             \
    \  <forwarding>accept</forwarding>\n             </actions>\n           </ace>\n\
    \         </aces>\n       </acl>\n     </acls>\n   </config>\n"
- title: 4.4.  Port Range Usage and Other Examples
  contents:
  - "4.4.  Port Range Usage and Other Examples\n   When a lower-port and an upper-port\
    \ are both present, it represents a\n   range between the lower-port and upper-port\
    \ with both the lower-port\n   and upper-port included.  When only a port is present,\
    \ it represents\n   a port, with the operator specifying the range.\n   The following\
    \ XML example represents a configuration where TCP\n   traffic from source ports\
    \ 16384, 16385, 16386, and 16387 is dropped.\n   <?xml version=\"1.0\" encoding=\"\
    UTF-8\"?>\n   <config xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\">\n   \
    \  <acls\n       xmlns=\"urn:ietf:params:xml:ns:yang:ietf-access-control-list\"\
    >\n       <acl>\n         <name>sample-port-acl</name>\n         <type>ipv4-acl-type</type>\n\
    \         <aces>\n           <ace>\n             <name>rule1</name>\n        \
    \     <matches>\n               <tcp>\n                 <source-port>\n      \
    \             <lower-port>16384</lower-port>\n                   <upper-port>16387</upper-port>\n\
    \                 </source-port>\n               </tcp>\n             </matches>\n\
    \             <actions>\n               <forwarding>drop</forwarding>\n      \
    \       </actions>\n           </ace>\n         </aces>\n       </acl>\n     </acls>\n\
    \   </config>\n   The following XML example represents a configuration where all\
    \ IPv4\n   ICMP echo requests are dropped.\n   <?xml version=\"1.0\" encoding=\"\
    UTF-8\"?>\n   <config xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\">\n   \
    \  <acls\n       xmlns=\"urn:ietf:params:xml:ns:yang:ietf-access-control-list\"\
    >\n       <acl>\n         <name>sample-icmp-acl</name>\n         <aces>\n    \
    \       <ace>\n             <name>rule1</name>\n             <matches>\n     \
    \          <ipv4>\n                 <protocol>1</protocol>\n               </ipv4>\n\
    \               <icmp>\n                 <type>8</type>\n                 <code>0</code>\n\
    \               </icmp>\n             </matches>\n             <actions>\n   \
    \            <forwarding>drop</forwarding>\n             </actions>\n        \
    \   </ace>\n         </aces>\n       </acl>\n     </acls>\n   </config>\n   The\
    \ following XML example represents a configuration of a single\n   port, port\
    \ 21, that accepts TCP traffic.\n   <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\
    \   <config xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\">\n     <acls\n \
    \      xmlns=\"urn:ietf:params:xml:ns:yang:ietf-access-control-list\">\n     \
    \  <acl>\n         <name>sample-ipv4-acl</name>\n         <type>ipv4-acl-type</type>\n\
    \         <aces>\n           <ace>\n             <name>rule1</name>\n        \
    \     <matches>\n               <tcp>\n                 <destination-port>\n \
    \                  <operator>eq</operator>\n                   <port>21</port>\n\
    \                 </destination-port>\n               </tcp>\n             </matches>\n\
    \             <actions>\n               <forwarding>accept</forwarding>\n    \
    \         </actions>\n           </ace>\n         </aces>\n       </acl>\n   \
    \  </acls>\n   </config>\n   The following XML example represents a configuration\
    \ specifying all\n   ports that are not equal to 21 that will drop TCP packets\
    \ destined\n   for those ports.\n   <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\
    \   <config xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\">\n     <acls\n \
    \      xmlns=\"urn:ietf:params:xml:ns:yang:ietf-access-control-list\">\n     \
    \  <acl>\n         <name>sample-ipv4-acl</name>\n         <type>ipv4-acl-type</type>\n\
    \         <aces>\n           <ace>\n             <name>rule1</name>\n        \
    \     <matches>\n               <tcp>\n                 <destination-port>\n \
    \                  <operator>neq</operator>\n                   <port>21</port>\n\
    \                 </destination-port>\n               </tcp>\n             </matches>\n\
    \             <actions>\n               <forwarding>drop</forwarding>\n      \
    \       </actions>\n           </ace>\n         </aces>\n       </acl>\n     </acls>\n\
    \   </config>\n"
- title: 5.  Security Considerations
  contents:
  - "5.  Security Considerations\n   The YANG modules specified in this document define\
    \ a schema for data\n   that is designed to be accessed via network management\
    \ protocol such\n   as NETCONF [RFC6241] or RESTCONF [RFC8040].  The lowest NETCONF\
    \ layer\n   is the secure transport layer, and the mandatory-to-implement secure\n\
    \   transport is Secure Shell (SSH) [RFC6242].  The lowest RESTCONF layer\n  \
    \ is HTTPS, and the mandatory-to-implement secure transport is TLS\n   [RFC8446].\n\
    \   The NETCONF Access Control Model (NACM) [RFC8341] provides the means\n   to\
    \ restrict access for particular NETCONF or RESTCONF users to a\n   preconfigured\
    \ subset of all available NETCONF or RESTCONF protocol\n   operations and content.\n\
    \   There are a number of data nodes defined in these YANG modules that\n   are\
    \ writable/creatable/deletable (i.e., config true, which is the\n   default).\
    \  These data nodes may be considered sensitive or vulnerable\n   in some network\
    \ environments.  Write operations (e.g., edit-config)\n   to these data nodes\
    \ without proper protection can have a negative\n   effect on network operations.\
    \  These are the subtrees and data nodes\n   and their sensitivity/vulnerability:\n\
    \      /acls/acl/aces: This list specifies all the configured access\n      control\
    \ entries on the device.  Unauthorized write access to this\n      list can allow\
    \ intruders to modify the entries so as to permit\n      traffic that should not\
    \ be permitted, or deny traffic that should\n      be permitted.  The former may\
    \ result in a DoS attack, or\n      compromise the device.  The latter may result\
    \ in a DoS attack.\n      The impact of an unauthorized read access of the list\
    \ will allow\n      the attacker to determine which rules are in effect, to better\n\
    \      craft an attack.\n      /acls/acl/aces/ace/actions/logging: This node specifies\
    \ ability to\n      log packets that match this ace entry.  Unauthorized write\
    \ access\n      to this node can allow intruders to enable logging on one or many\n\
    \      ace entries, overwhelming the server in the process.  Unauthorized\n  \
    \    read access of this node can allow intruders to access logging\n      information,\
    \ which could be used to craft an attack the server.\n"
- title: 6.  IANA Considerations
  contents:
  - "6.  IANA Considerations\n   This document registers three URIs and three YANG\
    \ modules.\n"
- title: 6.1.  URI Registration
  contents:
  - "6.1.  URI Registration\n   This document registers three URIs in the \"IETF XML\
    \ Registry\"\n   [RFC3688] as follows:\n   URI: urn:ietf:params:xml:ns:yang:ietf-access-control-list\n\
    \   URI: urn:ietf:params:xml:ns:yang:ietf-packet-fields\n   URI: urn:ietf:params:xml:ns:yang:ietf-ethertypes\n\
    \   Registrant Contact: The IESG.\n   XML: N/A; the requested URI is an XML namespace.\n"
- title: 6.2.  YANG Module Name Registration
  contents:
  - "6.2.  YANG Module Name Registration\n   This document registers three YANG modules\
    \ in the \"YANG Module Names\"\n   registry [RFC6020].\n   Name: ietf-access-control-list\n\
    \   Namespace: urn:ietf:params:xml:ns:yang:ietf-access-control-list\n   Prefix:\
    \ acl\n   Reference: RFC 8519\n   Name: ietf-packet-fields\n   Namespace: urn:ietf:params:xml:ns:yang:ietf-packet-fields\n\
    \   Prefix: packet-fields\n   Reference: RFC 8519\n   Name: ietf-ethertypes\n\
    \   Namespace: urn:ietf:params:xml:ns:yang:ietf-ethertypes\n   Prefix: ethertypes\n\
    \   Reference: RFC 8519\n"
- title: 7.  References
  contents:
  - '7.  References

    '
- title: 7.1.  Normative References
  contents:
  - "7.1.  Normative References\n   [RFC791]   Postel, J., \"Internet Protocol\",\
    \ STD 5, RFC 791,\n              DOI 10.17487/RFC0791, September 1981,\n     \
    \         <https://www.rfc-editor.org/info/rfc791>.\n   [RFC792]   Postel, J.,\
    \ \"Internet Control Message Protocol\", STD 5,\n              RFC 792, DOI 10.17487/RFC0792,\
    \ September 1981,\n              <https://www.rfc-editor.org/info/rfc792>.\n \
    \  [RFC793]   Postel, J., \"Transmission Control Protocol\", STD 7,\n        \
    \      RFC 793, DOI 10.17487/RFC0793, September 1981,\n              <https://www.rfc-editor.org/info/rfc793>.\n\
    \   [RFC2119]  Bradner, S., \"Key words for use in RFCs to Indicate\n        \
    \      Requirement Levels\", BCP 14, RFC 2119,\n              DOI 10.17487/RFC2119,\
    \ March 1997,\n              <https://www.rfc-editor.org/info/rfc2119>.\n   [RFC2474]\
    \  Nichols, K., Blake, S., Baker, F., and D. Black,\n              \"Definition\
    \ of the Differentiated Services Field (DS\n              Field) in the IPv4 and\
    \ IPv6 Headers\", RFC 2474,\n              DOI 10.17487/RFC2474, December 1998,\n\
    \              <https://www.rfc-editor.org/info/rfc2474>.\n   [RFC3168]  Ramakrishnan,\
    \ K., Floyd, S., and D. Black, \"The Addition\n              of Explicit Congestion\
    \ Notification (ECN) to IP\",\n              RFC 3168, DOI 10.17487/RFC3168, September\
    \ 2001,\n              <https://www.rfc-editor.org/info/rfc3168>.\n   [RFC4007]\
    \  Deering, S., Haberman, B., Jinmei, T., Nordmark, E., and\n              B.\
    \ Zill, \"IPv6 Scoped Address Architecture\", RFC 4007,\n              DOI 10.17487/RFC4007,\
    \ March 2005,\n              <https://www.rfc-editor.org/info/rfc4007>.\n   [RFC4291]\
    \  Hinden, R. and S. Deering, \"IP Version 6 Addressing\n              Architecture\"\
    , RFC 4291, DOI 10.17487/RFC4291, February\n              2006, <https://www.rfc-editor.org/info/rfc4291>.\n\
    \   [RFC5952]  Kawamura, S. and M. Kawashima, \"A Recommendation for IPv6\n  \
    \            Address Text Representation\", RFC 5952,\n              DOI 10.17487/RFC5952,\
    \ August 2010,\n              <https://www.rfc-editor.org/info/rfc5952>.\n   [RFC6991]\
    \  Schoenwaelder, J., Ed., \"Common YANG Data Types\",\n              RFC 6991,\
    \ DOI 10.17487/RFC6991, July 2013,\n              <https://www.rfc-editor.org/info/rfc6991>.\n\
    \   [RFC7950]  Bjorklund, M., Ed., \"The YANG 1.1 Data Modeling Language\",\n\
    \              RFC 7950, DOI 10.17487/RFC7950, August 2016,\n              <https://www.rfc-editor.org/info/rfc7950>.\n\
    \   [RFC8174]  Leiba, B., \"Ambiguity of Uppercase vs Lowercase in RFC\n     \
    \         2119 Key Words\", BCP 14, RFC 8174, DOI 10.17487/RFC8174,\n        \
    \      May 2017, <https://www.rfc-editor.org/info/rfc8174>.\n   [RFC8200]  Deering,\
    \ S. and R. Hinden, \"Internet Protocol, Version 6\n              (IPv6) Specification\"\
    , STD 86, RFC 8200,\n              DOI 10.17487/RFC8200, July 2017,\n        \
    \      <https://www.rfc-editor.org/info/rfc8200>.\n   [RFC8343]  Bjorklund, M.,\
    \ \"A YANG Data Model for Interface\n              Management\", RFC 8343, DOI\
    \ 10.17487/RFC8343, March 2018,\n              <https://www.rfc-editor.org/info/rfc8343>.\n"
- title: 7.2.  Informative References
  contents:
  - "7.2.  Informative References\n   [RFC3688]  Mealling, M., \"The IETF XML Registry\"\
    , BCP 81, RFC 3688,\n              DOI 10.17487/RFC3688, January 2004,\n     \
    \         <https://www.rfc-editor.org/info/rfc3688>.\n   [RFC6020]  Bjorklund,\
    \ M., Ed., \"YANG - A Data Modeling Language for\n              the Network Configuration\
    \ Protocol (NETCONF)\", RFC 6020,\n              DOI 10.17487/RFC6020, October\
    \ 2010,\n              <https://www.rfc-editor.org/info/rfc6020>.\n   [RFC6241]\
    \  Enns, R., Ed., Bjorklund, M., Ed., Schoenwaelder, J., Ed.,\n              and\
    \ A. Bierman, Ed., \"Network Configuration Protocol\n              (NETCONF)\"\
    , RFC 6241, DOI 10.17487/RFC6241, June 2011,\n              <https://www.rfc-editor.org/info/rfc6241>.\n\
    \   [RFC6242]  Wasserman, M., \"Using the NETCONF Protocol over Secure\n     \
    \         Shell (SSH)\", RFC 6242, DOI 10.17487/RFC6242, June 2011,\n        \
    \      <https://www.rfc-editor.org/info/rfc6242>.\n   [RFC7011]  Claise, B., Ed.,\
    \ Trammell, B., Ed., and P. Aitken,\n              \"Specification of the IP Flow\
    \ Information Export (IPFIX)\n              Protocol for the Exchange of Flow\
    \ Information\", STD 77,\n              RFC 7011, DOI 10.17487/RFC7011, September\
    \ 2013,\n              <https://www.rfc-editor.org/info/rfc7011>.\n   [RFC8040]\
    \  Bierman, A., Bjorklund, M., and K. Watsen, \"RESTCONF\n              Protocol\"\
    , RFC 8040, DOI 10.17487/RFC8040, January 2017,\n              <https://www.rfc-editor.org/info/rfc8040>.\n\
    \   [RFC8340]  Bjorklund, M. and L. Berger, Ed., \"YANG Tree Diagrams\",\n   \
    \           BCP 215, RFC 8340, DOI 10.17487/RFC8340, March 2018,\n           \
    \   <https://www.rfc-editor.org/info/rfc8340>.\n   [RFC8341]  Bierman, A. and\
    \ M. Bjorklund, \"Network Configuration\n              Access Control Model\"\
    , STD 91, RFC 8341,\n              DOI 10.17487/RFC8341, March 2018,\n       \
    \       <https://www.rfc-editor.org/info/rfc8341>.\n   [RFC8446]  Rescorla, E.,\
    \ \"The Transport Layer Security (TLS) Protocol\n              Version 1.3\",\
    \ RFC 8446, DOI 10.17487/RFC8446, August 2018,\n              <https://www.rfc-editor.org/info/rfc8446>.\n"
- title: Appendix A.  Extending ACL Model Examples
  contents:
  - 'Appendix A.  Extending ACL Model Examples

    '
- title: A.1.  Example of a Company's Proprietary Module
  contents:
  - "A.1.  Example of a Company's Proprietary Module\n   The \"example-newco-acl\"\
    \ module is an example of a company's\n   proprietary model that augments the\
    \ \"ietf-acl\" module.  It shows how\n   to use 'augment' with an XML Path Language\
    \ (XPath) expression to add\n   additional match criteria, actions, and default\
    \ actions for when no\n   ACE matches are found.  All these are company proprietary\
    \ extensions\n   or system feature extensions.  \"example-newco-acl\" is just\
    \ an\n   example, and it is expected that vendors will create their own\n   proprietary\
    \ models.\n   module example-newco-acl {\n     yang-version 1.1;\n     namespace\
    \ \"http://example.com/ns/example-newco-acl\";\n     prefix example-newco-acl;\n\
    \     import ietf-access-control-list {\n       prefix acl;\n     }\n     organization\n\
    \       \"Newco model group.\";\n     contact\n       \"abc@newco.com\";\n   \
    \  description\n       \"This YANG module augments the IETF ACL YANG module.\"\
    ;\n     revision 2019-03-04 {\n       description\n         \"Creating NewCo proprietary\
    \ extensions to the ietf-acl\n          model.\";\n       reference\n        \
    \ \"RFC 8519: YANG Data Model for Network Access Control\n                   \
    \ Lists (ACLs).\";\n     }\n     augment \"/acl:acls/acl:acl/\"\n           +\
    \ \"acl:aces/acl:ace/\"\n           + \"acl:matches\" {\n       description\n\
    \         \"Newco proprietary simple filter matches.\";\n       choice protocol-payload-choice\
    \ {\n         description\n           \"Newco proprietary payload match condition.\"\
    ;\n         list protocol-payload {\n           key \"value-keyword\";\n     \
    \      ordered-by user;\n           description\n             \"Match protocol\
    \ payload.\";\n           uses match-simple-payload-protocol-value;\n        \
    \ }\n       }\n       choice metadata {\n         description\n           \"Newco\
    \ proprietary interface match condition.\";\n         leaf packet-length {\n \
    \          type uint16;\n           description\n             \"Match on packet\
    \ length.\";\n         }\n       }\n     }\n     augment \"/acl:acls/acl:acl/\"\
    \n           + \"acl:aces/acl:ace/\"\n           + \"acl:actions\" {\n       description\n\
    \         \"Newco proprietary simple filter actions.\";\n       choice action\
    \ {\n         description\n           \"Newco proprietary action choices.\";\n\
    \         case count {\n           description\n             \"Count the packet\
    \ in the named counter.\";\n           leaf count {\n             type uint32;\n\
    \             description\n               \"Count.\";\n           }\n        \
    \ }\n         case policer {\n           description\n             \"Name of policer\
    \ used to rate-limit traffic.\";\n           leaf policer {\n             type\
    \ string;\n             description\n               \"Name of the policer.\";\n\
    \           }\n         }\n         case hierarchical-policer {\n           leaf\
    \ hierarchical-policer {\n             type string;\n             description\n\
    \               \"Name of the hierarchical policer.\";\n           }\n       \
    \    description\n             \"Name of the hierarchical policer used to\n  \
    \            rate-limit traffic.\";\n         }\n       }\n     }\n     augment\
    \ \"/acl:acls/acl:acl\"\n           + \"/acl:aces/acl:ace/\"\n           + \"\
    acl:actions\" {\n       leaf default-action {\n         type identityref {\n \
    \          base acl:forwarding-action;\n         }\n         default \"acl:drop\"\
    ;\n         description\n           \"Actions that occur if no ACE is matched.\"\
    ;\n       }\n       description\n         \"Newco proprietary default action.\"\
    ;\n     }\n     grouping match-simple-payload-protocol-value {\n       description\n\
    \         \"Newco proprietary payload\";\n       leaf value-keyword {\n      \
    \   type enumeration {\n           enum icmp {\n             description\n   \
    \            \"Internet Control Message Protocol.\";\n           }\n         \
    \  enum icmp6 {\n             description\n               \"Internet Control Message\
    \ Protocol\n                Version 6.\";\n           }\n           enum range\
    \ {\n             description\n               \"Range of values.\";\n        \
    \   }\n         }\n         description\n           \"(null).\";\n       }\n \
    \    }\n   }\n   The following figure is the tree diagram of example-newco-acl.\
    \  In\n   this example, /ietf-acl:acls/ietf-acl:acl/ietf-acl:aces/ietf-acl:ace/\n\
    \   ietf-acl:matches are augmented with two new choices: protocol-\n   payload-choice\
    \ and metadata.  The protocol-payload-choice uses a\n   grouping with an enumeration\
    \ of all supported protocol values.\n   Metadata matches apply to fields associated\
    \ with the packet, that are\n   not in the packet header, such as overall packet\
    \ length.  In another\n   example, /ietf-acl:acls/ietf-acl:acl/ietf-acl:aces/ietf-acl:ace/\n\
    \   ietf-acl:actions are augmented with a new choice of actions.\n   module: example-newco-acl\n\
    \     augment /acl:acls/acl:acl/acl:aces/acl:ace/acl:matches:\n       +--rw (protocol-payload-choice)?\n\
    \       |  +--:(protocol-payload)\n       |     +--rw protocol-payload* [value-keyword]\n\
    \       |        +--rw value-keyword    enumeration\n       +--rw (metadata)?\n\
    \          +--:(packet-length)\n             +--rw packet-length?      uint16\n\
    \     augment /acl:acls/acl:acl/acl:aces/acl:ace/acl:actions:\n       +--rw (action)?\n\
    \          +--:(count)\n          |  +--rw count?                   uint32\n \
    \         +--:(policer)\n          |  +--rw policer?                 string\n\
    \          +--:(hierarchical-policer)\n             +--rw hierarchical-policer?\
    \   string\n     augment /acl:acls/acl:acl/acl:aces/acl:ace/acl:actions:\n   \
    \    +--rw default-action?   identityref\n"
- title: A.2.  Linux nftables
  contents:
  - "A.2.  Linux nftables\n   As the Linux platform is becoming more popular than\
    \ the networking\n   platform, the Linux data model is changing.  Previously,\
    \ ACLs in\n   Linux were highly protocol specific, and different utilities were\n\
    \   used (iptables, ip6tables, arptables, and ebtables), so each one had\n   a\
    \ separate data model.  Recently, this has changed, and a single\n   utility,\
    \ nftables, has been developed.  With a single application, it\n   has a single\
    \ data model for firewall filters, and it follows very\n   similarly the ietf-access-control\
    \ list module proposed in this\n   document.  The nftables support input and output\
    \ ACEs, and each ACE\n   can be defined with match and action.\n   The example\
    \ in Section 4.3 can be configured using nftable tool as\n   below.\n        \
    \ nft add table ip filter\n         nft add chain filter input\n         nft add\
    \ rule ip filter input ip protocol tcp ip saddr \\\n             192.0.2.1/24\
    \ drop\n   The configuration entries added in nftable would be:\n         table\
    \ ip filter {\n           chain input {\n             ip protocol tcp ip saddr\
    \ 192.0.2.1/24 drop\n           }\n         }\n   We can see that there are many\
    \ similarities between Linux nftables\n   and IETF ACL YANG data models and their\
    \ extension models.  It should\n   be fairly easy to do translation between the\
    \ ACL YANG model described\n   in this document and Linux nftables.\n"
- title: A.3.  Ethertypes
  contents:
  - "A.3.  Ethertypes\n   The ACL module is dependent on the definition of Ethertypes.\
    \  IEEE\n   owns the allocation of those Ethertypes.  This model is being\n  \
    \ included here to enable the definition of those types till such time\n   that\
    \ IEEE takes up the task of publication of the model that defines\n   those Ethertypes.\
    \  At that time, this model can be deprecated.\n   <CODE BEGINS> file \"ietf-ethertypes@2019-03-04.yang\"\
    \n   module ietf-ethertypes {\n     namespace \"urn:ietf:params:xml:ns:yang:ietf-ethertypes\"\
    ;\n     prefix ethertypes;\n     organization\n       \"IETF NETMOD (Network Modeling)\
    \ Working Group.\";\n     contact\n       \"WG Web:   <https://datatracker.ietf.org/wg/netmod/>\n\
    \        WG List:  <mailto:netmod@ietf.org>\n        Editor:   Mahesh Jethanandani\n\
    \                  <mjethanandani@gmail.com>\";\n     description\n       \"This\
    \ module contains common definitions for the\n        Ethertype used by different\
    \ modules.  It is a\n        placeholder module, till such time that IEEE\n  \
    \      starts a project to define these Ethertypes\n        and publishes a standard.\n\
    \        At that time, this module can be deprecated.\n        Copyright (c) 2019\
    \ IETF Trust and the persons identified as\n        the document authors.  All\
    \ rights reserved.\n        Redistribution and use in source and binary forms,\
    \ with or\n        without modification, is permitted pursuant to, and subject\n\
    \        to the license terms contained in, the Simplified BSD\n        License\
    \ set forth in Section 4.c of the IETF Trust's Legal\n        Provisions Relating\
    \ to IETF Documents\n        (http://trustee.ietf.org/license-info).\n       \
    \ This version of this YANG module is part of RFC 8519; see\n        the RFC itself\
    \ for full legal notices.\";\n     revision 2019-03-04 {\n       description\n\
    \         \"Initial revision.\";\n       reference\n         \"RFC 8519: YANG\
    \ Data Model for Network Access Control\n                    Lists (ACLs).\";\n\
    \     }\n     typedef ethertype {\n       type union {\n         type uint16;\n\
    \         type enumeration {\n           enum ipv4 {\n             value 2048;\n\
    \             description\n               \"Internet Protocol version 4 (IPv4)\
    \ with a\n                hex value of 0x0800.\";\n             reference\n  \
    \             \"RFC 791: Internet Protocol.\";\n           }\n           enum\
    \ arp {\n             value 2054;\n             description\n               \"\
    Address Resolution Protocol (ARP) with a\n                hex value of 0x0806.\"\
    ;\n             reference\n               \"RFC 826: An Ethernet Address Resolution\
    \ Protocol: Or\n                         Converting Network Protocol Addresses\
    \ to 48.bit\n                         Ethernet Address for Transmission on Ethernet\n\
    \                         Hardware.\";\n           }\n           enum wlan {\n\
    \             value 2114;\n             description\n               \"Wake-on-LAN.\
    \  Hex value of 0x0842.\";\n           }\n           enum trill {\n          \
    \   value 8947;\n             description\n               \"Transparent Interconnection\
    \ of Lots of Links.\n                Hex value of 0x22F3.\";\n             reference\n\
    \               \"RFC 6325: Routing Bridges (RBridges): Base Protocol\n      \
    \                    Specification.\";\n           }\n           enum srp {\n\
    \             value 8938;\n             description\n               \"Stream Reservation\
    \ Protocol.  Hex value of\n                0x22EA.\";\n             reference\n\
    \               \"IEEE 801.1Q-2011.\";\n           }\n           enum decnet {\n\
    \             value 24579;\n             description\n               \"DECnet\
    \ Phase IV.  Hex value of 0x6003.\";\n           }\n           enum rarp {\n \
    \            value 32821;\n             description\n               \"Reverse\
    \ Address Resolution Protocol.\n                Hex value 0x8035.\";\n       \
    \      reference\n               \"RFC 903: A Reverse Address Resolution Protocol.\"\
    ;\n           }\n           enum appletalk {\n             value 32923;\n    \
    \         description\n               \"Appletalk (Ethertalk).  Hex value of 0x809B.\"\
    ;\n           }\n           enum aarp {\n             value 33011;\n         \
    \    description\n               \"Appletalk Address Resolution Protocol.  Hex\
    \ value\n                of 0x80F3.\";\n           }\n           enum vlan {\n\
    \             value 33024;\n             description\n               \"VLAN-tagged\
    \ frame (IEEE 802.1Q) and Shortest Path\n                Bridging IEEE 802.1aq\
    \ with Network-Network\n                Interface (NNI) compatibility.  Hex value\
    \ of\n                0x8100.\";\n             reference\n               \"IEEE\
    \ 802.1Q.\";\n           }\n           enum ipx {\n             value 33079;\n\
    \             description\n               \"Internetwork Packet Exchange (IPX).\
    \  Hex value\n                of 0x8137.\";\n           }\n           enum qnx\
    \ {\n             value 33284;\n             description\n               \"QNX\
    \ Qnet.  Hex value of 0x8204.\";\n           }\n           enum ipv6 {\n     \
    \        value 34525;\n             description\n               \"Internet Protocol\
    \ Version 6 (IPv6).  Hex value\n                of 0x86DD.\";\n             reference\n\
    \               \"RFC 8200: Internet Protocol, Version 6 (IPv6)\n            \
    \              Specification\n                RFC 8201: Path MTU Discovery for\
    \ IP version 6.\";\n           }\n           enum efc {\n             value 34824;\n\
    \             description\n               \"Ethernet flow control using pause\
    \ frames.\n                Hex value of 0x8808.\";\n             reference\n \
    \              \"IEEE 802.1Qbb.\";\n           }\n           enum esp {\n    \
    \         value 34825;\n             description\n               \"Ethernet Slow\
    \ Protocol.  Hex value of 0x8809.\";\n             reference\n               \"\
    IEEE 802.3-2015.\";\n           }\n           enum cobranet {\n             value\
    \ 34841;\n             description\n               \"CobraNet.  Hex value of 0x8819.\"\
    ;\n           }\n           enum mpls-unicast {\n             value 34887;\n \
    \            description\n               \"Multiprotocol Label Switching (MPLS)\
    \ unicast traffic.\n                Hex value of 0x8847.\";\n             reference\n\
    \               \"RFC 3031: Multiprotocol Label Switching Architecture.\";\n \
    \          }\n           enum mpls-multicast {\n             value 34888;\n  \
    \           description\n               \"MPLS multicast traffic.  Hex value of\
    \ 0x8848.\";\n             reference\n               \"RFC 3031: Multiprotocol\
    \ Label Switching Architecture.\";\n           }\n           enum pppoe-discovery\
    \ {\n             value 34915;\n             description\n               \"Point-to-Point\
    \ Protocol over Ethernet.  Used during\n                the discovery process.\
    \  Hex value of 0x8863.\";\n             reference\n               \"RFC 2516:\
    \ A Method for Transmitting PPP Over Ethernet\n                          (PPPoE).\"\
    ;\n           }\n           enum pppoe-session {\n             value 34916;\n\
    \             description\n               \"Point-to-Point Protocol over Ethernet.\
    \  Used during\n                session stage.  Hex value of 0x8864.\";\n    \
    \         reference\n               \"RFC 2516: A Method for Transmitting PPP\
    \ Over Ethernet\n                          (PPPoE).\";\n           }\n       \
    \    enum intel-ans {\n             value 34925;\n             description\n \
    \              \"Intel Advanced Networking Services.  Hex value of\n         \
    \       0x886D.\";\n           }\n           enum jumbo-frames {\n           \
    \  value 34928;\n             description\n               \"Jumbo frames or Ethernet\
    \ frames with more than\n                1500 bytes of payload, up to 9000 bytes.\"\
    ;\n           }\n           enum homeplug {\n             value 34939;\n     \
    \        description\n               \"Family name for the various power line\n\
    \                communications.  Hex value of 0x887B.\";\n           }\n    \
    \       enum eap {\n             value 34958;\n             description\n    \
    \           \"Ethernet Access Protocol (EAP) over LAN.  Hex value\n          \
    \      of 0x888E.\";\n             reference\n               \"IEEE 802.1X.\"\
    ;\n           }\n           enum profinet {\n             value 34962;\n     \
    \        description\n               \"PROcess FIeld Net (PROFINET).  Hex value\
    \ of 0x8892.\";\n           }\n           enum hyperscsi {\n             value\
    \ 34970;\n             description\n               \"Small Computer System Interface\
    \ (SCSI) over Ethernet.\n                Hex value of 0x889A.\";\n           }\n\
    \           enum aoe {\n             value 34978;\n             description\n\
    \               \"Advanced Technology Advancement (ATA) over Ethernet.\n     \
    \           Hex value of 0x88A2.\";\n           }\n           enum ethercat {\n\
    \             value 34980;\n             description\n               \"Ethernet\
    \ for Control Automation Technology (EtherCAT).\n                Hex value of\
    \ 0x88A4.\";\n           }\n           enum provider-bridging {\n            \
    \ value 34984;\n             description\n               \"Provider Bridging (802.1ad)\
    \ and Shortest Path Bridging\n                (801.1aq).  Hex value of 0x88A8.\"\
    ;\n             reference\n               \"IEEE 802.1ad and IEEE 802.1aq).\"\
    ;\n           }\n           enum ethernet-powerlink {\n             value 34987;\n\
    \             description\n               \"Ethernet Powerlink.  Hex value of\
    \ 0x88AB.\";\n           }\n           enum goose {\n             value 35000;\n\
    \             description\n               \"Generic Object Oriented Substation\
    \ Event (GOOSE).\n                Hex value of 0x88B8.\";\n             reference\n\
    \               \"IEC/ISO 8802-2 and 8802-3.\";\n           }\n           enum\
    \ gse {\n             value 35001;\n             description\n               \"\
    Generic Substation Events.  Hex value of 88B9.\";\n             reference\n  \
    \             \"IEC 61850.\";\n           }\n           enum sv {\n          \
    \   value 35002;\n             description\n               \"Sampled Value Transmission.\
    \  Hex value of 0x88BA.\";\n             reference\n               \"IEC 61850.\"\
    ;\n           }\n           enum lldp {\n             value 35020;\n         \
    \    description\n               \"Link Layer Discovery Protocol (LLDP).  Hex\
    \ value of\n                0x88CC.\";\n             reference\n             \
    \  \"IEEE 802.1AB.\";\n           }\n           enum sercos {\n             value\
    \ 35021;\n             description\n               \"Sercos Interface.  Hex value\
    \ of 0x88CD.\";\n           }\n           enum wsmp {\n             value 35036;\n\
    \             description\n               \"WAVE Short Message Protocol (WSMP).\
    \  Hex value of\n                0x88DC.\";\n           }\n           enum homeplug-av-mme\
    \ {\n             value 35041;\n             description\n               \"HomePlug\
    \ AV Mobile Management Entity (MME).  Hex value\n                of 88E1.\";\n\
    \           }\n           enum mrp {\n             value 35043;\n            \
    \ description\n               \"Media Redundancy Protocol (MRP).  Hex value of\n\
    \                0x88E3.\";\n             reference\n               \"IEC 62439-2.\"\
    ;\n           }\n           enum macsec {\n             value 35045;\n       \
    \      description\n               \"MAC Security.  Hex value of 0x88E5.\";\n\
    \             reference\n               \"IEEE 802.1AE.\";\n           }\n   \
    \        enum pbb {\n             value 35047;\n             description\n   \
    \            \"Provider Backbone Bridges (PBB).  Hex value of\n              \
    \  0x88E7.\";\n             reference\n               \"IEEE 802.1ah.\";\n   \
    \        }\n           enum cfm {\n             value 35074;\n             description\n\
    \               \"Connectivity Fault Management (CFM).  Hex value of\n       \
    \         0x8902.\";\n             reference\n               \"IEEE 802.1ag.\"\
    ;\n           }\n           enum fcoe {\n             value 35078;\n         \
    \    description\n               \"Fiber Channel over Ethernet (FCoE).  Hex value\
    \ of\n                0x8906.\";\n             reference\n               \"T11\
    \ FC-BB-5.\";\n           }\n           enum fcoe-ip {\n             value 35092;\n\
    \             description\n               \"FCoE Initialization Protocol.  Hex\
    \ value of 0x8914.\";\n           }\n           enum roce {\n             value\
    \ 35093;\n             description\n               \"RDMA over Converged Ethernet\
    \ (RoCE).  Hex value of\n                0x8915.\";\n           }\n          \
    \ enum tte {\n             value 35101;\n             description\n          \
    \     \"TTEthernet Protocol Control Frame (TTE).  Hex value\n                of\
    \ 0x891D.\";\n             reference\n               \"SAE AS6802.\";\n      \
    \     }\n           enum hsr {\n             value 35119;\n             description\n\
    \               \"High-availability Seamless Redundancy (HSR).  Hex\n        \
    \        value of 0x892F.\";\n             reference\n               \"IEC 62439-3:2016.\"\
    ;\n           }\n         }\n       }\n       description\n         \"The uint16\
    \ type placeholder is defined to enable\n          users to manage their own ethertypes\
    \ not\n          covered by the module.  Otherwise, the module contains\n    \
    \      enum definitions for the more commonly used ethertypes.\";\n     }\n  \
    \ }\n   <CODE ENDS>\n"
- title: Acknowledgements
  contents:
  - "Acknowledgements\n   Alex Clemm, Andy Bierman, and Lisa Huang started by sketching\
    \ an\n   initial draft version in several past IETF meetings.  That document\n\
    \   included an ACL YANG model structure and a rich set of match filters,\n  \
    \ and it acknowledged contributions by Louis Fourie, Dana Blair, Tula\n   Kraiser,\
    \ Patrick Gili, George Serpa, Martin Bjorklund, Kent Watsen,\n   and Phil Shafer.\
    \  Many people have reviewed the various earlier draft\n   versions that made\
    \ the document that went into IETF charter.\n   Dean Bogdanovic, Kiran Agrahara\
    \ Sreenivasa, Lisa Huang, and Dana\n   Blair each evaluated the YANG model in\
    \ earlier draft versions\n   separately, and then they worked together to create\
    \ an ACL draft\n   version that was supported by different vendors.  That document\n\
    \   removed vendor-specific features and gave examples that allowed\n   vendors\
    \ to extend their own proprietary ACLs.  That earlier draft\n   version was superseded\
    \ with this document and received participation\n   from many vendors.\n   The\
    \ authors would like to thank Jason Sterne, Lada Lhotka, Juergen\n   Schoenwalder,\
    \ David Bannister, Jeff Haas, Kristian Larsson, and Einar\n   Nilsen-Nygaard for\
    \ their reviews of and suggestions for the document.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Mahesh Jethanandani\n   VMware\n   Email: mjethanandani@gmail.com\n\
    \   Sonal Agarwal\n   Cisco Systems, Inc.\n   Email: sagarwal12@gmail.com\n  \
    \ Lisa Huang\n   Email: huangyi_99@yahoo.com\n   Dana Blair\n   Email: dana@blairhome.com\n"
