- title: __initial_text__
  contents:
  - '                 HTTP Strict Transport Security (HSTS)

    '
- title: Abstract
  contents:
  - "Abstract\n   This specification defines a mechanism enabling web sites to declare\n\
    \   themselves accessible only via secure connections and/or for users to\n  \
    \ be able to direct their user agent(s) to interact with given sites\n   only\
    \ over secure connections.  This overall policy is referred to as\n   HTTP Strict\
    \ Transport Security (HSTS).  The policy is declared by web\n   sites via the\
    \ Strict-Transport-Security HTTP response header field\n   and/or by other means,\
    \ such as user agent configuration, for example.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This\
    \ document is a product of the Internet Engineering Task Force\n   (IETF).  It\
    \ represents the consensus of the IETF community.  It has\n   received public\
    \ review and has been approved for publication by the\n   Internet Engineering\
    \ Steering Group (IESG).  Further information on\n   Internet Standards is available\
    \ in Section 2 of RFC 5741.\n   Information about the current status of this document,\
    \ any errata,\n   and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc6797.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2012 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................4\n\
    \      1.1. Organization of This Specification .........................6\n  \
    \    1.2. Document Conventions .......................................6\n   2.\
    \ Overview ........................................................6\n      2.1.\
    \ Use Cases ..................................................6\n      2.2. HTTP\
    \ Strict Transport Security Policy Effects ..............6\n      2.3. Threat\
    \ Model ...............................................6\n           2.3.1. Threats\
    \ Addressed ...................................7\n                  2.3.1.1. Passive\
    \ Network Attackers ..................7\n                  2.3.1.2. Active Network\
    \ Attackers ...................7\n                  2.3.1.3. Web Site Development\
    \ and Deployment Bugs ...8\n           2.3.2. Threats Not Addressed ...............................8\n\
    \                  2.3.2.1. Phishing ...................................8\n  \
    \                2.3.2.2. Malware and Browser Vulnerabilities ........8\n    \
    \  2.4. Requirements ...............................................9\n      \
    \     2.4.1. Overall Requirement .................................9\n        \
    \          2.4.1.1. Detailed Core Requirements .................9\n          \
    \        2.4.1.2. Detailed Ancillary Requirements ...........10\n   3. Conformance\
    \ Criteria ...........................................10\n   4. Terminology ....................................................11\n\
    \   5. HSTS Mechanism Overview ........................................13\n  \
    \    5.1. HSTS Host Declaration .....................................13\n    \
    \  5.2. HSTS Policy ...............................................13\n      5.3.\
    \ HSTS Policy Storage and Maintenance by User Agents ........14\n      5.4. User\
    \ Agent HSTS Policy Enforcement ........................14\n   6. Syntax .........................................................14\n\
    \      6.1. Strict-Transport-Security HTTP Response Header Field ......15\n  \
    \         6.1.1. The max-age Directive ..............................16\n    \
    \       6.1.2. The includeSubDomains Directive ....................16\n      6.2.\
    \ Examples ..................................................16\n   7. Server\
    \ Processing Model ........................................17\n      7.1. HTTP-over-Secure-Transport\
    \ Request Type ...................17\n      7.2. HTTP Request Type .........................................18\n\
    \   8. User Agent Processing Model ....................................18\n  \
    \    8.1. Strict-Transport-Security Response Header Field\n           Processing\
    \ ................................................19\n           8.1.1. Noting\
    \ an HSTS Host - Storage Model ................20\n      8.2. Known HSTS Host\
    \ Domain Name Matching ......................20\n      8.3. URI Loading and Port\
    \ Mapping ..............................21\n      8.4. Errors in Secure Transport\
    \ Establishment ..................22\n      8.5. HTTP-Equiv <Meta> Element Attribute\
    \ .......................22\n      8.6. Missing Strict-Transport-Security Response\
    \ Header Field ...23\n   9. Constructing an Effective Request URI ..........................23\n\
    \      9.1. ERU Fundamental Definitions ...............................23\n  \
    \    9.2. Determining the Effective Request URI .....................24\n    \
    \       9.2.1. Effective Request URI Examples .....................24\n   10.\
    \ Domain Name IDNA-Canonicalization .............................25\n   11. Server\
    \ Implementation and Deployment Advice ...................26\n      11.1. Non-Conformant\
    \ User Agent Considerations .................26\n      11.2. HSTS Policy Expiration\
    \ Time Considerations ...............26\n      11.3. Using HSTS in Conjunction\
    \ with Self-Signed Public-Key\n            Certificates .............................................27\n\
    \      11.4. Implications of includeSubDomains ........................28\n  \
    \          11.4.1. Considerations for Offering Unsecured HTTP\n              \
    \      Services at Alternate Ports or Subdomains of an\n                    HSTS\
    \ Host ........................................28\n            11.4.2. Considerations\
    \ for Offering Web Applications at\n                    Subdomains of an HSTS\
    \ Host .......................29\n   12. User Agent Implementation Advice ..............................30\n\
    \      12.1. No User Recourse .........................................30\n  \
    \    12.2. User-Declared HSTS Policy ................................30\n    \
    \  12.3. HSTS Pre-Loaded List .....................................31\n      12.4.\
    \ Disallow Mixed Security Context Loads ....................31\n      12.5. HSTS\
    \ Policy Deletion .....................................31\n   13. Internationalized\
    \ Domain Names for Applications (IDNA):\n       Dependency and Migration ......................................32\n\
    \   14. Security Considerations .......................................32\n  \
    \    14.1. Underlying Secure Transport Considerations ...............32\n    \
    \  14.2. Non-Conformant User Agent Implications ...................33\n      14.3.\
    \ Ramifications of HSTS Policy Establishment Only over\n            Error-Free\
    \ Secure Transport ..............................33\n      14.4. The Need for\
    \ includeSubDomains ...........................34\n      14.5. Denial of Service\
    \ ........................................35\n      14.6. Bootstrap MITM Vulnerability\
    \ .............................36\n      14.7. Network Time Attacks .....................................37\n\
    \      14.8. Bogus Root CA Certificate Phish plus DNS Cache\n            Poisoning\
    \ Attack .........................................37\n      14.9. Creative Manipulation\
    \ of HSTS Policy Store ...............37\n      14.10. Internationalized Domain\
    \ Names ..........................38\n   15. IANA Considerations ...........................................39\n\
    \   16. References ....................................................39\n  \
    \    16.1. Normative References .....................................39\n    \
    \  16.2. Informative References ...................................40\n   Appendix\
    \ A. Design Decision Notes .................................44\n   Appendix B.\
    \ Differences between HSTS Policy and Same-Origin\n               Policy ................................................45\n\
    \   Appendix C. Acknowledgments .......................................46\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   HTTP [RFC2616] may be used over various transports, typically\
    \ the\n   Transmission Control Protocol (TCP).  However, TCP does not provide\n\
    \   channel integrity protection, confidentiality, or secure host\n   identification.\
    \  Thus, the Secure Sockets Layer (SSL) protocol\n   [RFC6101] and its successor,\
    \ Transport Layer Security (TLS) [RFC5246]\n   were developed in order to provide\
    \ channel-oriented security and are\n   typically layered between application\
    \ protocols and TCP.  [RFC2818]\n   specifies how HTTP is layered onto TLS and\
    \ defines the Uniform\n   Resource Identifier (URI) scheme of \"https\" (in practice,\
    \ however,\n   HTTP user agents (UAs) typically use either TLS or SSL3, depending\n\
    \   upon a combination of negotiation with the server and user\n   preferences).\n\
    \   UAs employ various local security policies with respect to the\n   characteristics\
    \ of their interactions with web resources, depending\n   on (in part) whether\
    \ they are communicating with a given web\n   resource's host using HTTP or HTTP-over-Secure-Transport.\
    \  For\n   example, cookies ([RFC6265]) may be flagged as Secure.  UAs are to\n\
    \   send such Secure cookies to their addressed host only over a secure\n   transport.\
    \  This is in contrast to non-Secure cookies, which are\n   returned to the host\
    \ regardless of transport (although subject to\n   other rules).\n   UAs typically\
    \ announce to their users any issues with secure\n   connection establishment,\
    \ such as being unable to validate a TLS\n   server certificate trust chain, or\
    \ if a TLS server certificate is\n   expired, or if a TLS host's domain name appears\
    \ incorrectly in the\n   TLS server certificate (see Section 3.1 of [RFC2818]).\
    \  Often, UAs\n   enable users to elect to continue to interact with a web resource's\n\
    \   host in the face of such issues.  This behavior is sometimes referred\n  \
    \ to as \"click(ing) through\" security [GoodDhamijaEtAl05]\n   [SunshineEgelmanEtAl09];\
    \ thus, it can be described as \"click-through\n   insecurity\".\n   A key vulnerability\
    \ enabled by click-through insecurity is the\n   leaking of any cookies the web\
    \ resource may be using to manage a\n   user's session.  The threat here is that\
    \ an attacker could obtain the\n   cookies and then interact with the legitimate\
    \ web resource while\n   impersonating the user.\n   Jackson and Barth proposed\
    \ an approach, in [ForceHTTPS], to enable\n   web resources to declare that any\
    \ interactions by UAs with the web\n   resource must be conducted securely and\
    \ that any issues with\n   establishing a secure transport session are to be treated\
    \ as fatal\n   and without direct user recourse.  The aim is to prevent click-\n\
    \   through insecurity and address other potential threats.\n   This specification\
    \ embodies and refines the approach proposed in\n   [ForceHTTPS].  For example,\
    \ rather than using a cookie to convey\n   policy from a web resource's host to\
    \ a UA, it defines an HTTP\n   response header field for this purpose.  Additionally,\
    \ a web\n   resource's host may declare its policy to apply to the entire domain\n\
    \   name subtree rooted at its host name.  This enables HTTP Strict\n   Transport\
    \ Security (HSTS) to protect so-called \"domain cookies\",\n   which are applied\
    \ to all subdomains of a given web resource's host\n   name.\n   This specification\
    \ also incorporates notions from [JacksonBarth2008]\n   in that policy is applied\
    \ on an \"entire-host\" basis: it applies to\n   HTTP (only) over any TCP port\
    \ of the issuing host.\n   Note that the policy defined by this specification\
    \ is distinctly\n   different than the \"same-origin policy\" defined in \"The\
    \ Web Origin\n   Concept\" [RFC6454].  These differences are summarized in Appendix\
    \ B.\n"
- title: 1.1.  Organization of This Specification
  contents:
  - "1.1.  Organization of This Specification\n   This specification begins with an\
    \ overview of the use cases, policy\n   effects, threat models, and requirements\
    \ for HSTS (in Section 2).\n   Then, Section 3 defines conformance requirements.\
    \  Section 4 defines\n   terminology relevant to this document.  The HSTS mechanism\
    \ itself is\n   formally specified in Sections 5 through 15.\n"
- title: 1.2.  Document Conventions
  contents:
  - "1.2.  Document Conventions\n   NOTE:  This is a note to the reader.  These are\
    \ points that should be\n          expressly kept in mind and/or considered.\n"
- title: 2.  Overview
  contents:
  - "2.  Overview\n   This section discusses the use cases, summarizes the HSTS Policy,\
    \ and\n   continues with a discussion of the threat model, non-addressed\n   threats,\
    \ and derived requirements.\n"
- title: 2.1.  Use Cases
  contents:
  - "2.1.  Use Cases\n   The high-level use case is a combination of:\n   o  Web browser\
    \ user wishes to interact with various web sites (some\n      arbitrary, some\
    \ known) in a secure fashion.\n   o  Web site deployer wishes to offer their site\
    \ in an explicitly\n      secure fashion for their own, as well as their users',\
    \ benefit.\n"
- title: 2.2.  HTTP Strict Transport Security Policy Effects
  contents:
  - "2.2.  HTTP Strict Transport Security Policy Effects\n   The effects of the HSTS\
    \ Policy, as applied by a conformant UA in\n   interactions with a web resource\
    \ host wielding such policy (known as\n   an HSTS Host), are summarized as follows:\n\
    \   1.  UAs transform insecure URI references to an HSTS Host into secure\n  \
    \     URI references before dereferencing them.\n   2.  The UA terminates any\
    \ secure transport connection attempts upon\n       any and all secure transport\
    \ errors or warnings.\n"
- title: 2.3.  Threat Model
  contents:
  - "2.3.  Threat Model\n   HSTS is concerned with three threat classes: passive network\n\
    \   attackers, active network attackers, and imperfect web developers.\n   However,\
    \ it is explicitly not a remedy for two other classes of\n   threats: phishing\
    \ and malware.  Threats that are addressed, as well\n   as threats that are not\
    \ addressed, are briefly discussed below.\n   Readers may wish to refer to Section\
    \ 2 of [ForceHTTPS] for details as\n   well as relevant citations.\n"
- title: 2.3.1.  Threats Addressed
  contents:
  - '2.3.1.  Threats Addressed

    '
- title: 2.3.1.1.  Passive Network Attackers
  contents:
  - "2.3.1.1.  Passive Network Attackers\n   When a user browses the web on a local\
    \ wireless network (e.g., an\n   802.11-based wireless local area network) a nearby\
    \ attacker can\n   possibly eavesdrop on the user's unencrypted Internet Protocol-based\n\
    \   connections, such as HTTP, regardless of whether or not the local\n   wireless\
    \ network itself is secured [BeckTews09].  Freely available\n   wireless sniffing\
    \ toolkits (e.g., [Aircrack-ng]) enable such passive\n   eavesdropping attacks,\
    \ even if the local wireless network is\n   operating in a secure fashion.  A\
    \ passive network attacker using such\n   tools can steal session identifiers/cookies\
    \ and hijack the user's web\n   session(s) by obtaining cookies containing authentication\
    \ credentials\n   [ForceHTTPS].  For example, there exist widely available tools,\
    \ such\n   as Firesheep (a web browser extension) [Firesheep], that enable their\n\
    \   wielder to obtain other local users' session cookies for various web\n   applications.\n\
    \   To mitigate such threats, some web sites support, but usually do not\n   force,\
    \ access using end-to-end secure transport -- e.g., signaled\n   through URIs\
    \ constructed with the \"https\" scheme [RFC2818].  This can\n   lead users to\
    \ believe that accessing such services using secure\n   transport protects them\
    \ from passive network attackers.\n   Unfortunately, this is often not the case\
    \ in real-world deployments,\n   as session identifiers are often stored in non-Secure\
    \ cookies to\n   permit interoperability with versions of the service offered\
    \ over\n   insecure transport (\"Secure cookies\" are those cookies containing\
    \ the\n   \"Secure\" attribute [RFC6265]).  For example, if the session\n   identifier\
    \ for a web site (an email service, say) is stored in a\n   non-Secure cookie,\
    \ it permits an attacker to hijack the user's\n   session if the user's UA makes\
    \ a single insecure HTTP request to the\n   site.\n"
- title: 2.3.1.2.  Active Network Attackers
  contents:
  - "2.3.1.2.  Active Network Attackers\n   A determined attacker can mount an active\
    \ attack, either by\n   impersonating a user's DNS server or, in a wireless network,\
    \ by\n   spoofing network frames or offering a similarly named evil twin\n   access\
    \ point.  If the user is behind a wireless home router, an\n   attacker can attempt\
    \ to reconfigure the router using default\n   passwords and other vulnerabilities.\
    \  Some sites, such as banks, rely\n   on end-to-end secure transport to protect\
    \ themselves and their users\n   from such active attackers.  Unfortunately, browsers\
    \ allow their\n   users to easily opt out of these protections in order to be\
    \ usable\n   for sites that incorrectly deploy secure transport, for example by\n\
    \   generating and self-signing their own certificates (without also\n   distributing\
    \ their certification authority (CA) certificate to their\n   users' browsers).\n"
- title: 2.3.1.3.  Web Site Development and Deployment Bugs
  contents:
  - "2.3.1.3.  Web Site Development and Deployment Bugs\n   The security of an otherwise\
    \ uniformly secure site (i.e., all of its\n   content is materialized via \"https\"\
    \ URIs) can be compromised\n   completely by an active attacker exploiting a simple\
    \ mistake, such as\n   the loading of a cascading style sheet or a SWF (Shockwave\
    \ Flash)\n   movie over an insecure connection (both cascading style sheets and\n\
    \   SWF movies can script the embedding page, to the surprise of many web\n  \
    \ developers, plus some browsers do not issue so-called \"mixed content\n   warnings\"\
    \ when SWF files are embedded via insecure connections).\n   Even if the site's\
    \ developers carefully scrutinize their login page\n   for \"mixed content\",\
    \ a single insecure embedding anywhere on the\n   overall site compromises the\
    \ security of their login page because an\n   attacker can script (i.e., control)\
    \ the login page by injecting code\n   (e.g., a script) into another, insecurely\
    \ loaded, site page.\n   NOTE:  \"Mixed content\" as used above (see also Section\
    \ 5.3 in\n          [W3C.REC-wsc-ui-20100812]) refers to the notion termed \"\
    mixed\n          security context\" in this specification and should not be\n\
    \          confused with the same \"mixed content\" term used in the\n       \
    \   context of markup languages such as XML and HTML.\n"
- title: 2.3.2.  Threats Not Addressed
  contents:
  - '2.3.2.  Threats Not Addressed

    '
- title: 2.3.2.1.  Phishing
  contents:
  - "2.3.2.1.  Phishing\n   Phishing attacks occur when an attacker solicits authentication\n\
    \   credentials from the user by hosting a fake site located on a\n   different\
    \ domain than the real site, perhaps driving traffic to the\n   fake site by sending\
    \ a link in an email message.  Phishing attacks\n   can be very effective because\
    \ users find it difficult to distinguish\n   the real site from a fake site. \
    \ HSTS is not a defense against\n   phishing per se; rather, it complements many\
    \ existing phishing\n   defenses by instructing the browser to protect session\
    \ integrity and\n   long-lived authentication tokens [ForceHTTPS].\n"
- title: 2.3.2.2.  Malware and Browser Vulnerabilities
  contents:
  - "2.3.2.2.  Malware and Browser Vulnerabilities\n   Because HSTS is implemented\
    \ as a browser security mechanism, it\n   relies on the trustworthiness of the\
    \ user's system to protect the\n   session.  Malicious code executing on the user's\
    \ system can\n   compromise a browser session, regardless of whether HSTS is used.\n"
- title: 2.4.  Requirements
  contents:
  - "2.4.  Requirements\n   This section identifies and enumerates various requirements\
    \ derived\n   from the use cases and the threats discussed above and also lists\
    \ the\n   detailed core requirements that HTTP Strict Transport Security\n   addresses,\
    \ as well as ancillary requirements that are not directly\n   addressed.\n"
- title: 2.4.1.  Overall Requirement
  contents:
  - "2.4.1.  Overall Requirement\n   o  Minimize, for web browser users and web site\
    \ deployers, the risks\n      that are derived from passive and active network\
    \ attackers, web\n      site development and deployment bugs, and insecure user\
    \ actions.\n"
- title: 2.4.1.1.  Detailed Core Requirements
  contents:
  - "2.4.1.1.  Detailed Core Requirements\n   These core requirements are derived\
    \ from the overall requirement and\n   are addressed by this specification.\n\
    \   1.  Web sites need to be able to declare to UAs that they should be\n    \
    \   accessed using a strict security policy.\n   2.  Web sites need to be able\
    \ to instruct UAs that contact them\n       insecurely to do so securely.\n  \
    \ 3.  UAs need to retain persistent data about web sites that signal\n       strict\
    \ security policy enablement, for time spans declared by the\n       web sites.\
    \  Additionally, UAs need to cache the \"freshest\" strict\n       security policy\
    \ information, in order to allow web sites to\n       update the information.\n\
    \   4.  UAs need to rewrite all insecure UA \"http\" URI loads to use the\n  \
    \     \"https\" secure scheme for those web sites for which secure policy\n  \
    \     is enabled.\n   5.  Web site administrators need to be able to signal strict\
    \ security\n       policy application to subdomains of higher-level domains for\n\
    \       which strict security policy is enabled, and UAs need to enforce\n   \
    \    such policy.\n       For example, both example.com and foo.example.com could\
    \ set\n       policy for bar.foo.example.com.\n   6.  UAs need to disallow security\
    \ policy application to peer domains,\n       and/or higher-level domains, by\
    \ domains for which strict security\n       policy is enabled.\n       For example,\
    \ neither bar.foo.example.com nor foo.example.com can\n       set policy for example.com,\
    \ nor can bar.foo.example.com set\n       policy for foo.example.com.  Also, foo.example.com\
    \ cannot set\n       policy for sibling.example.com.\n   7.  UAs need to prevent\
    \ users from \"clicking through\" security\n       warnings.  Halting connection\
    \ attempts in the face of secure\n       transport exceptions is acceptable. \
    \ See also Section 12.1 (\"No\n       User Recourse\").\n   NOTE:  A means for\
    \ uniformly securely meeting the first core\n          requirement above is not\
    \ specifically addressed by this\n          specification (see Section 14.6 (\"\
    Bootstrap MITM\n          Vulnerability\")).  It may be addressed by a future\
    \ revision of\n          this specification or some other specification.  Note\
    \ also\n          that there are means by which UA implementations may more\n\
    \          fully meet the first core requirement; see Section 12 (\"User\n   \
    \       Agent Implementation Advice\").\n"
- title: 2.4.1.2.  Detailed Ancillary Requirements
  contents:
  - "2.4.1.2.  Detailed Ancillary Requirements\n   These ancillary requirements are\
    \ also derived from the overall\n   requirement.  They are not normatively addressed\
    \ in this\n   specification but could be met by UA implementations at their\n\
    \   implementor's discretion, although meeting these requirements may be\n   complex.\n\
    \   1.  Disallow \"mixed security context\" loads (see Section 2.3.1.3).\n   2.\
    \  Facilitate user declaration of web sites for which strict\n       security\
    \ policy is enabled, regardless of whether the sites\n       signal HSTS Policy.\n"
- title: 3.  Conformance Criteria
  contents:
  - "3.  Conformance Criteria\n   This specification is written for hosts and user\
    \ agents.\n   A conformant host is one that implements all the requirements listed\n\
    \   in this specification that are applicable to hosts.\n   A conformant user\
    \ agent is one that implements all the requirements\n   listed in this specification\
    \ that are applicable to user agents.\n   The key words \"MUST\", \"MUST NOT\"\
    , \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\"\
    , \"MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described\
    \ in [RFC2119].\n"
- title: 4.  Terminology
  contents:
  - "4.  Terminology\n   Terminology is defined in this section.\n   ASCII case-insensitive\
    \ comparison:\n      means comparing two strings exactly, codepoint for codepoint,\n\
    \      except that the characters in the range U+0041 ..  U+005A (i.e.,\n    \
    \  LATIN CAPITAL LETTER A to LATIN CAPITAL LETTER Z) and the\n      corresponding\
    \ characters in the range U+0061 ..  U+007A (i.e.,\n      LATIN SMALL LETTER A\
    \ to LATIN SMALL LETTER Z) are considered to\n      also match.  See [Unicode]\
    \ for details.\n   codepoint:\n      is a colloquial contraction of Code Point,\
    \ which is any value in\n      the Unicode codespace; that is, the range of integers\
    \ from 0 to\n      10FFFF(hex) [Unicode].\n   domain name:\n      is also referred\
    \ to as \"DNS name\" and is defined in [RFC1035] to\n      be represented outside\
    \ of the DNS protocol itself (and\n      implementations thereof) as a series\
    \ of labels separated by dots,\n      e.g., \"example.com\" or \"yet.another.example.org\"\
    .  In the context\n      of this specification, domain names appear in that portion\
    \ of a\n      URI satisfying the reg-name production in \"Appendix A.  Collected\n\
    \      ABNF for URI\" in [RFC3986], and the host component from the Host\n   \
    \   HTTP header field production in Section 14.23 of [RFC2616].\n      NOTE: \
    \ The domain names appearing in actual URI instances and\n             matching\
    \ the aforementioned production components may or\n             may not be a fully\
    \ qualified domain name.\n   domain name label:\n      is that portion of a domain\
    \ name appearing \"between the dots\",\n      i.e., consider \"foo.example.com\"\
    : \"foo\", \"example\", and \"com\" are\n      all domain name labels.\n   Effective\
    \ Request URI:\n      is a URI, identifying the target resource, that can be inferred\
    \ by\n      an HTTP host for any given HTTP request it receives.  Such\n     \
    \ inference is necessary because HTTP requests often do not contain\n      a complete\
    \ \"absolute\" URI identifying the target resource.  See\n      Section 9 (\"\
    Constructing an Effective Request URI\").\n   HTTP Strict Transport Security:\n\
    \      is the overall name for the combined UA- and server-side security\n   \
    \   policy defined by this specification.\n   HTTP Strict Transport Security Host:\n\
    \      is a conformant host implementing the HTTP server aspects of the\n    \
    \  HSTS Policy.  This means that an HSTS Host returns the\n      \"Strict-Transport-Security\"\
    \ HTTP response header field in its HTTP\n      response messages sent over secure\
    \ transport.\n   HTTP Strict Transport Security Policy:\n      is the name of\
    \ the combined overall UA- and server-side facets of\n      the behavior defined\
    \ in this specification.\n   HSTS:\n      See HTTP Strict Transport Security.\n\
    \   HSTS Host:\n      See HTTP Strict Transport Security Host.\n   HSTS Policy:\n\
    \      See HTTP Strict Transport Security Policy.\n   Known HSTS Host:\n     \
    \ is an HSTS Host for which the UA has an HSTS Policy in effect;\n      i.e.,\
    \ the UA has noted this host as a Known HSTS Host.  See\n      Section 8.1.1 (\"\
    Noting an HSTS Host - Storage Model\") for\n      particulars.\n   Local policy:\n\
    \      comprises policy rules that deployers specify and that are often\n    \
    \  manifested as configuration settings.\n   MITM:\n      is an acronym for \"\
    man in the middle\".  See \"man-in-the-middle\n      attack\" in [RFC4949].\n\
    \   Request URI:\n      is the URI used to cause a UA to issue an HTTP request\
    \ message.\n      See also \"Effective Request URI\".\n   UA:\n      is an acronym\
    \ for \"user agent\".  For the purposes of this\n      specification, a UA is\
    \ an HTTP client application typically\n      actively manipulated by a user [RFC2616].\n\
    \   unknown HSTS Host:\n      is an HSTS Host that the user agent has not noted.\n"
- title: 5.  HSTS Mechanism Overview
  contents:
  - "5.  HSTS Mechanism Overview\n   This section provides an overview of the mechanism\
    \ by which an HSTS\n   Host conveys its HSTS Policy to UAs and how UAs process\
    \ the HSTS\n   Policies received from HSTS Hosts.  The mechanism details are\n\
    \   specified in Sections 6 through 15.\n"
- title: 5.1.  HSTS Host Declaration
  contents:
  - "5.1.  HSTS Host Declaration\n   An HTTP host declares itself an HSTS Host by\
    \ issuing to UAs an HSTS\n   Policy, which is represented by and conveyed via\
    \ the\n   Strict-Transport-Security HTTP response header field over secure\n \
    \  transport (e.g., TLS).  Upon error-free receipt and processing of\n   this\
    \ header by a conformant UA, the UA regards the host as a Known\n   HSTS Host.\n"
- title: 5.2.  HSTS Policy
  contents:
  - "5.2.  HSTS Policy\n   An HSTS Policy directs UAs to communicate with a Known\
    \ HSTS Host only\n   over secure transport and specifies policy retention time\
    \ duration.\n   HSTS Policy explicitly overrides the UA processing of URI references,\n\
    \   user input (e.g., via the \"location bar\"), or other information that,\n\
    \   in the absence of HSTS Policy, might otherwise cause UAs to\n   communicate\
    \ insecurely with the Known HSTS Host.\n   An HSTS Policy may contain an optional\
    \ directive -- includeSubDomains\n   -- specifying that this HSTS Policy also\
    \ applies to any hosts whose\n   domain names are subdomains of the Known HSTS\
    \ Host's domain name.\n"
- title: 5.3.  HSTS Policy Storage and Maintenance by User Agents
  contents:
  - "5.3.  HSTS Policy Storage and Maintenance by User Agents\n   UAs store and index\
    \ HSTS Policies based strictly upon the domain\n   names of the issuing HSTS Hosts.\n\
    \   This means that UAs will maintain the HSTS Policy of any given HSTS\n   Host\
    \ separately from any HSTS Policies issued by any other HSTS Hosts\n   whose domain\
    \ names are superdomains or subdomains of the given HSTS\n   Host's domain name.\
    \  Only the given HSTS Host can update or can cause\n   deletion of its issued\
    \ HSTS Policy.  It accomplishes this by sending\n   Strict-Transport-Security\
    \ HTTP response header fields to UAs with new\n   values for policy time duration\
    \ and subdomain applicability.  Thus,\n   UAs cache the \"freshest\" HSTS Policy\
    \ information on behalf of an HSTS\n   Host.  Specifying a zero time duration\
    \ signals the UA to delete the\n   HSTS Policy (including any asserted includeSubDomains\
    \ directive) for\n   that HSTS Host.  See Section 8.1 (\"Strict-Transport-Security\
    \ Response\n   Header Field Processing\") for details.  Additionally, Section\
    \ 6.2\n   presents examples of Strict-Transport-Security HTTP response header\n\
    \   fields.\n"
- title: 5.4.  User Agent HSTS Policy Enforcement
  contents:
  - "5.4.  User Agent HSTS Policy Enforcement\n   When establishing an HTTP connection\
    \ to a given host, however\n   instigated, the UA examines its cache of Known\
    \ HSTS Hosts to see if\n   there are any with domain names that are superdomains\
    \ of the given\n   host's domain name.  If any are found, and of those if any\
    \ have the\n   includeSubDomains directive asserted, then HSTS Policy applies\
    \ to the\n   given host.  Otherwise, HSTS Policy applies to the given host only\
    \ if\n   the given host is itself known to the UA as an HSTS Host.  See\n   Section\
    \ 8.3 (\"URI Loading and Port Mapping\") for details.\n"
- title: 6.  Syntax
  contents:
  - "6.  Syntax\n   This section defines the syntax of the Strict-Transport-Security\
    \ HTTP\n   response header field and its directives, and presents some examples.\n\
    \   Section 7 (\"Server Processing Model\") then details how hosts employ\n  \
    \ this header field to declare their HSTS Policy, and Section 8 (\"User\n   Agent\
    \ Processing Model\") details how user agents process the header\n   field and\
    \ apply the HSTS Policy.\n"
- title: 6.1.  Strict-Transport-Security HTTP Response Header Field
  contents:
  - "6.1.  Strict-Transport-Security HTTP Response Header Field\n   The Strict-Transport-Security\
    \ HTTP response header field (STS header\n   field) indicates to a UA that it\
    \ MUST enforce the HSTS Policy in\n   regards to the host emitting the response\
    \ message containing this\n   header field.\n   The ABNF (Augmented Backus-Naur\
    \ Form) syntax for the STS header field\n   is given below.  It is based on the\
    \ Generic Grammar defined in\n   Section 2 of [RFC2616] (which includes a notion\
    \ of \"implied linear\n   whitespace\", also known as \"implied *LWS\").\n   \
    \  Strict-Transport-Security = \"Strict-Transport-Security\" \":\"\n         \
    \                        [ directive ]  *( \";\" [ directive ] )\n     directive\
    \                 = directive-name [ \"=\" directive-value ]\n     directive-name\
    \            = token\n     directive-value           = token | quoted-string\n\
    \   where:\n     token          = <token, defined in [RFC2616], Section 2.2>\n\
    \     quoted-string  = <quoted-string, defined in [RFC2616], Section 2.2>\n  \
    \ The two directives defined in this specification are described below.\n   The\
    \ overall requirements for directives are:\n   1.  The order of appearance of\
    \ directives is not significant.\n   2.  All directives MUST appear only once\
    \ in an STS header field.\n       Directives are either optional or required,\
    \ as stipulated in\n       their definitions.\n   3.  Directive names are case-insensitive.\n\
    \   4.  UAs MUST ignore any STS header field containing directives, or\n     \
    \  other header field value data, that does not conform to the\n       syntax\
    \ defined in this specification.\n   5.  If an STS header field contains directive(s)\
    \ not recognized by\n       the UA, the UA MUST ignore the unrecognized directives,\
    \ and if\n       the STS header field otherwise satisfies the above requirements\n\
    \       (1 through 4), the UA MUST process the recognized directives.\n   Additional\
    \ directives extending the semantic functionality of the STS\n   header field\
    \ can be defined in other specifications, with a registry\n   (having an IANA\
    \ policy definition of IETF Review [RFC5226]) defined\n   for them at such time.\n\
    \   NOTE:  Such future directives will be ignored by UAs implementing\n      \
    \    only this specification, as well as by generally\n          non-conforming\
    \ UAs.  See Section 14.2 (\"Non-Conformant User\n          Agent Implications\"\
    ) for further discussion.\n"
- title: 6.1.1.  The max-age Directive
  contents:
  - "6.1.1.  The max-age Directive\n   The REQUIRED \"max-age\" directive specifies\
    \ the number of seconds,\n   after the reception of the STS header field, during\
    \ which the UA\n   regards the host (from whom the message was received) as a\
    \ Known HSTS\n   Host.  See also Section 8.1.1 (\"Noting an HSTS Host - Storage\n\
    \   Model\").  The delta-seconds production is specified in [RFC2616].\n   The\
    \ syntax of the max-age directive's REQUIRED value (after\n   quoted-string unescaping,\
    \ if necessary) is defined as:\n    max-age-value = delta-seconds\n    delta-seconds\
    \ = <1*DIGIT, defined in [RFC2616], Section 3.3.2>\n   NOTE:  A max-age value\
    \ of zero (i.e., \"max-age=0\") signals the UA to\n          cease regarding the\
    \ host as a Known HSTS Host, including the\n          includeSubDomains directive\
    \ (if asserted for that HSTS Host).\n          See also Section 8.1 (\"Strict-Transport-Security\
    \ Response\n          Header Field Processing\").\n"
- title: 6.1.2.  The includeSubDomains Directive
  contents:
  - "6.1.2.  The includeSubDomains Directive\n   The OPTIONAL \"includeSubDomains\"\
    \ directive is a valueless directive\n   which, if present (i.e., it is \"asserted\"\
    ), signals the UA that the\n   HSTS Policy applies to this HSTS Host as well as\
    \ any subdomains of\n   the host's domain name.\n"
- title: 6.2.  Examples
  contents:
  - "6.2.  Examples\n   The HSTS header field below stipulates that the HSTS Policy\
    \ is to\n   remain in effect for one year (there are approximately 31536000\n\
    \   seconds in a year), and the policy applies only to the domain of the\n   HSTS\
    \ Host issuing it:\n     Strict-Transport-Security: max-age=31536000\n   The HSTS\
    \ header field below stipulates that the HSTS Policy is to\n   remain in effect\
    \ for approximately six months and that the policy\n   applies to the domain of\
    \ the issuing HSTS Host and all of its\n   subdomains:\n     Strict-Transport-Security:\
    \ max-age=15768000 ; includeSubDomains\n   The max-age directive value can optionally\
    \ be quoted:\n     Strict-Transport-Security: max-age=\"31536000\"\n   The HSTS\
    \ header field below indicates that the UA must delete the\n   entire HSTS Policy\
    \ associated with the HSTS Host that sent the header\n   field:\n     Strict-Transport-Security:\
    \ max-age=0\n   The HSTS header field below has exactly the same effect as the\
    \ one\n   immediately above because the includeSubDomains directive's presence\n\
    \   in the HSTS header field is ignored when max-age is zero:\n     Strict-Transport-Security:\
    \ max-age=0; includeSubDomains\n"
- title: 7.  Server Processing Model
  contents:
  - "7.  Server Processing Model\n   This section describes the processing model that\
    \ HSTS Hosts\n   implement.  The model comprises two facets: the first being the\n\
    \   processing rules for HTTP request messages received over a secure\n   transport\
    \ (TLS [RFC5246] or SSL [RFC6101]; see also Section 14.1\n   (\"Underlying Secure\
    \ Transport Considerations\")), and the second being\n   the processing rules\
    \ for HTTP request messages received over\n   non-secure transports, such as TCP.\n"
- title: 7.1.  HTTP-over-Secure-Transport Request Type
  contents:
  - "7.1.  HTTP-over-Secure-Transport Request Type\n   When replying to an HTTP request\
    \ that was conveyed over a secure\n   transport, an HSTS Host SHOULD include in\
    \ its response message an STS\n   header field that MUST satisfy the grammar specified\
    \ above in\n   Section 6.1 (\"Strict-Transport-Security HTTP Response Header Field\"\
    ).\n   If an STS header field is included, the HSTS Host MUST include only\n \
    \  one such header field.\n   Establishing a given host as a Known HSTS Host,\
    \ in the context of a\n   given UA, MAY be accomplished over HTTP, which is in\
    \ turn running\n   over secure transport, by correctly returning (per this\n \
    \  specification) at least one valid STS header field to the UA.  Other\n   mechanisms,\
    \ such as a client-side pre-loaded Known HSTS Host list,\n   MAY also be used;\
    \ e.g., see Section 12 (\"User Agent Implementation\n   Advice\").\n   NOTE: \
    \ Including the STS header field is stipulated as a \"SHOULD\" in\n          order\
    \ to accommodate various server- and network-side caches\n          and load-balancing\
    \ configurations where it may be difficult to\n          uniformly emit STS header\
    \ fields on behalf of a given HSTS\n          Host.\n"
- title: 7.2.  HTTP Request Type
  contents:
  - "7.2.  HTTP Request Type\n   If an HSTS Host receives an HTTP request message\
    \ over a non-secure\n   transport, it SHOULD send an HTTP response message containing\
    \ a\n   status code indicating a permanent redirect, such as status code 301\n\
    \   (Section 10.3.2 of [RFC2616]), and a Location header field value\n   containing\
    \ either the HTTP request's original Effective Request URI\n   (see Section 9\
    \ (\"Constructing an Effective Request URI\")) altered as\n   necessary to have\
    \ a URI scheme of \"https\", or a URI generated\n   according to local policy\
    \ with a URI scheme of \"https\".\n   NOTE:  The above behavior is a \"SHOULD\"\
    \ rather than a \"MUST\" due to:\n      *  Risks in server-side non-secure-to-secure\
    \ redirects\n         [OWASP-TLSGuide].\n      *  Site deployment characteristics.\
    \  For example, a site that\n         incorporates third-party components may\
    \ not behave correctly\n         when doing server-side non-secure-to-secure redirects\
    \ in the\n         case of being accessed over non-secure transport but does\n\
    \         behave correctly when accessed uniformly over secure transport.\n  \
    \       The latter is the case given an HSTS-capable UA that has\n         already\
    \ noted the site as a Known HSTS Host (by whatever means,\n         e.g., prior\
    \ interaction or UA configuration).\n   An HSTS Host MUST NOT include the STS\
    \ header field in HTTP responses\n   conveyed over non-secure transport.\n"
- title: 8.  User Agent Processing Model
  contents:
  - "8.  User Agent Processing Model\n   This section describes the HTTP Strict Transport\
    \ Security processing\n   model for UAs.  There are several facets to the model,\
    \ enumerated by\n   the following subsections.\n   This processing model assumes\
    \ that the UA implements IDNA2008\n   [RFC5890], or possibly IDNA2003 [RFC3490],\
    \ as noted in Section 13\n   (\"Internationalized Domain Names for Applications\
    \ (IDNA): Dependency\n   and Migration\").  It also assumes that all domain names\
    \ manipulated\n   in this specification's context are already IDNA-canonicalized\
    \ as\n   outlined in Section 10 (\"Domain Name IDNA-Canonicalization\") prior\
    \ to\n   the processing specified in this section.\n      NOTE:  [RFC3490] is\
    \ referenced due to its ongoing relevance to\n             actual deployments\
    \ for the foreseeable future.\n   The above assumptions mean that this processing\
    \ model also\n   specifically assumes that appropriate IDNA and Unicode validations\n\
    \   and character list testing have occurred on the domain names, in\n   conjunction\
    \ with their IDNA-canonicalization, prior to the processing\n   specified in this\
    \ section.  See the IDNA-specific security\n   considerations in Section 14.10\
    \ (\"Internationalized Domain Names\")\n   for rationale and further details.\n"
- title: 8.1.  Strict-Transport-Security Response Header Field Processing
  contents:
  - "8.1.  Strict-Transport-Security Response Header Field Processing\n   If an HTTP\
    \ response, received over a secure transport, includes an\n   STS header field,\
    \ conforming to the grammar specified in Section 6.1\n   (\"Strict-Transport-Security\
    \ HTTP Response Header Field\"), and there\n   are no underlying secure transport\
    \ errors or warnings (see\n   Section 8.4), the UA MUST either:\n   o  Note the\
    \ host as a Known HSTS Host if it is not already so noted\n      (see Section\
    \ 8.1.1 (\"Noting an HSTS Host - Storage Model\")),\n   or\n   o  Update the UA's\
    \ cached information for the Known HSTS Host if\n      either or both of the max-age\
    \ and includeSubDomains header field\n      value tokens are conveying information\
    \ different than that already\n      maintained by the UA.\n      The max-age\
    \ value is essentially a \"time to live\" value relative\n      to the reception\
    \ time of the STS header field.\n      If the max-age header field value token\
    \ has a value of zero, the\n      UA MUST remove its cached HSTS Policy information\
    \ (including the\n      includeSubDomains directive, if asserted) if the HSTS\
    \ Host is\n      known, or the UA MUST NOT note this HSTS Host if it is not yet\n\
    \      known.\n      If a UA receives more than one STS header field in an HTTP\n\
    \      response message over secure transport, then the UA MUST process\n    \
    \  only the first such header field.\n   Otherwise:\n   o  If an HTTP response\
    \ is received over insecure transport, the UA\n      MUST ignore any present STS\
    \ header field(s).\n   o  The UA MUST ignore any STS header fields not conforming\
    \ to the\n      grammar specified in Section 6.1 (\"Strict-Transport-Security\
    \ HTTP\n      Response Header Field\").\n"
- title: 8.1.1.  Noting an HSTS Host - Storage Model
  contents:
  - "8.1.1.  Noting an HSTS Host - Storage Model\n   If the substring matching the\
    \ host production from the Request-URI\n   (of the message to which the host responded)\
    \ syntactically matches\n   the IP-literal or IPv4address productions from Section\
    \ 3.2.2 of\n   [RFC3986], then the UA MUST NOT note this host as a Known HSTS\
    \ Host.\n   Otherwise, if the substring does not congruently match a Known HSTS\n\
    \   Host's domain name, per the matching procedure specified in\n   Section 8.2\
    \ (\"Known HSTS Host Domain Name Matching\"), then the UA\n   MUST note this host\
    \ as a Known HSTS Host, caching the HSTS Host's\n   domain name and noting along\
    \ with it the expiry time of this\n   information, as effectively stipulated per\
    \ the given max-age value,\n   as well as whether the includeSubDomains directive\
    \ is asserted or\n   not.  See also Section 11.2 (\"HSTS Policy Expiration Time\n\
    \   Considerations\").\n   The UA MUST NOT modify the expiry time or the includeSubDomains\n\
    \   directive of any superdomain matched Known HSTS Host.\n   A Known HSTS Host\
    \ is \"expired\" if its cache entry has an expiry date\n   in the past.  The UA\
    \ MUST evict all expired Known HSTS Hosts from its\n   cache if, at any time,\
    \ an expired Known HSTS Host exists in the\n   cache.\n"
- title: 8.2.  Known HSTS Host Domain Name Matching
  contents:
  - "8.2.  Known HSTS Host Domain Name Matching\n   A given domain name may match\
    \ a Known HSTS Host's domain name in one\n   or both of two fashions: a congruent\
    \ match, or a superdomain match.\n   Alternatively, there may be no match.\n \
    \  The steps below determine whether there are any matches, and if so,\n   of\
    \ which fashion:\n      Compare the given domain name with the domain name of\
    \ each of the\n      UA's unexpired Known HSTS Hosts.  For each Known HSTS Host's\n\
    \      domain name, the comparison is done with the given domain name\n      label-by-label\
    \ (comparing only labels) using an ASCII case-\n      insensitive comparison beginning\
    \ with the rightmost label, and\n      continuing right-to-left.  See also Section\
    \ 2.3.2.4 of [RFC5890].\n      *  Superdomain Match\n         If a label-for-label\
    \ match between an entire Known HSTS Host's\n         domain name and a right-hand\
    \ portion of the given domain name\n         is found, then this Known HSTS Host's\
    \ domain name is a\n         superdomain match for the given domain name.  There\
    \ could be\n         multiple superdomain matches for a given domain name.\n \
    \        For example:\n            Given domain name (DN):   qaz.bar.foo.example.com\n\
    \            Superdomain matched\n            Known HSTS Host DN:           bar.foo.example.com\n\
    \            Superdomain matched\n            Known HSTS Host DN:            \
    \   foo.example.com\n      *  Congruent Match\n         If a label-for-label match\
    \ between a Known HSTS Host's domain\n         name and the given domain name\
    \ is found -- i.e., there are no\n         further labels to compare -- then the\
    \ given domain name\n         congruently matches this Known HSTS Host.\n    \
    \     For example:\n            Given domain name:                foo.example.com\n\
    \            Congruently matched\n            Known HSTS Host DN:            \
    \   foo.example.com\n      *  Otherwise, if no matches are found, the given domain\
    \ name does\n         not represent a Known HSTS Host.\n"
- title: 8.3.  URI Loading and Port Mapping
  contents:
  - "8.3.  URI Loading and Port Mapping\n   Whenever the UA prepares to \"load\" (also\
    \ known as \"dereference\") any\n   \"http\" URI [RFC3986] (including when following\
    \ HTTP redirects\n   [RFC2616]), the UA MUST first determine whether a domain\
    \ name is\n   given in the URI and whether it matches a Known HSTS Host, using\n\
    \   these steps:\n   1.  Extract from the URI any substring described by the host\n\
    \       component of the authority component of the URI.\n   2.  If the substring\
    \ is null, then there is no match with any Known\n       HSTS Host.\n   3.  Else,\
    \ if the substring is non-null and syntactically matches the\n       IP-literal\
    \ or IPv4address productions from Section 3.2.2 of\n       [RFC3986], then there\
    \ is no match with any Known HSTS Host.\n   4.  Otherwise, the substring is a\
    \ given domain name, which MUST be\n       matched against the UA's Known HSTS\
    \ Hosts using the procedure in\n       Section 8.2 (\"Known HSTS Host Domain Name\
    \ Matching\").\n   5.  If, when performing domain name matching any superdomain\
    \ match\n       with an asserted includeSubDomains directive is found, or, if\
    \ no\n       superdomain matches with asserted includeSubDomains directives\n\
    \       are found and a congruent match is found (with or without an\n       asserted\
    \ includeSubDomains directive), then before proceeding\n       with the load:\n\
    \          The UA MUST replace the URI scheme with \"https\" [RFC2818], and\n\
    \          if the URI contains an explicit port component of \"80\", then\n  \
    \        the UA MUST convert the port component to be \"443\", or\n          if\
    \ the URI contains an explicit port component that is not\n          equal to\
    \ \"80\", the port component value MUST be preserved;\n          otherwise,\n\
    \          if the URI does not contain an explicit port component, the UA\n  \
    \        MUST NOT add one.\n          NOTE:  These steps ensure that the HSTS\
    \ Policy applies to HTTP\n                 over any TCP port of an HSTS Host.\n\
    \   NOTE:  In the case where an explicit port is provided (and to a\n        \
    \  lesser extent with subdomains), it is reasonably likely that\n          there\
    \ is actually an HTTP (i.e., non-secure) server running on\n          the specified\
    \ port and that an HTTPS request will thus fail\n          (see item 6 in Appendix\
    \ A (\"Design Decision Notes\")).\n"
- title: 8.4.  Errors in Secure Transport Establishment
  contents:
  - "8.4.  Errors in Secure Transport Establishment\n   When connecting to a Known\
    \ HSTS Host, the UA MUST terminate the\n   connection (see also Section 12 (\"\
    User Agent Implementation Advice\"))\n   if there are any errors, whether \"warning\"\
    \ or \"fatal\" or any other\n   error level, with the underlying secure transport.\
    \  For example, this\n   includes any errors found in certificate validity checking\
    \ that UAs\n   employ, such as via Certificate Revocation Lists (CRLs) [RFC5280],\
    \ or\n   via the Online Certificate Status Protocol (OCSP) [RFC2560], as well\n\
    \   as via TLS server identity checking [RFC6125].\n"
- title: 8.5.  HTTP-Equiv <Meta> Element Attribute
  contents:
  - "8.5.  HTTP-Equiv <Meta> Element Attribute\n   UAs MUST NOT heed http-equiv=\"\
    Strict-Transport-Security\" attribute\n   settings on <meta> elements [W3C.REC-html401-19991224]\
    \ in received\n   content.\n"
- title: 8.6.  Missing Strict-Transport-Security Response Header Field
  contents:
  - "8.6.  Missing Strict-Transport-Security Response Header Field\n   If a UA receives\
    \ HTTP responses from a Known HSTS Host over a secure\n   channel but the responses\
    \ are missing the STS header field, the UA\n   MUST continue to treat the host\
    \ as a Known HSTS Host until the\n   max-age value for the knowledge of that Known\
    \ HSTS Host is reached.\n   Note that the max-age value could be effectively infinite\
    \ for a given\n   Known HSTS Host.  For example, this would be the case if the\
    \ Known\n   HSTS Host is part of a pre-configured list that is implemented such\n\
    \   that the list entries never \"age out\".\n"
- title: 9.  Constructing an Effective Request URI
  contents:
  - "9.  Constructing an Effective Request URI\n   This section specifies how an HSTS\
    \ Host must construct the Effective\n   Request URI for a received HTTP request.\n\
    \   HTTP requests often do not carry an absoluteURI for the target\n   resource;\
    \ instead, the URI needs to be inferred from the Request-URI,\n   Host header\
    \ field, and connection context ([RFC2616], Sections 3.2.1,\n   5.1.2, and 5.2).\
    \  The result of this process is called the \"effective\n   request URI (ERU)\"\
    .  The \"target resource\" is the resource identified\n   by the effective request\
    \ URI.\n"
- title: 9.1.  ERU Fundamental Definitions
  contents:
  - "9.1.  ERU Fundamental Definitions\n   The first line of an HTTP request message,\
    \ Request-Line, is specified\n   by the following ABNF from [RFC2616], Section\
    \ 5.1:\n     Request-Line   = Method SP Request-URI SP HTTP-Version CRLF\n   The\
    \ Request-URI, within the Request-Line, is specified by the\n   following ABNF\
    \ from [RFC2616], Section 5.1.2:\n     Request-URI    = \"*\" | absoluteURI |\
    \ abs_path | authority\n   The Host request header field is specified by the following\
    \ ABNF from\n   [RFC2616], Section 14.23:\n     Host = \"Host\" \":\" host [ \"\
    :\" port ]\n"
- title: 9.2.  Determining the Effective Request URI
  contents:
  - "9.2.  Determining the Effective Request URI\n   If the Request-URI is an absoluteURI,\
    \ then the effective request URI\n   is the Request-URI.\n   If the Request-URI\
    \ uses the abs_path form or the asterisk form, and\n   the Host header field is\
    \ present, then the effective request URI is\n   constructed by concatenating:\n\
    \   o  the scheme name: \"http\" if the request was received over an\n      insecure\
    \ TCP connection, or \"https\" when received over a TLS/\n      SSL-secured TCP\
    \ connection, and\n   o  the octet sequence \"://\", and\n   o  the host, and\
    \ the port (if present), from the Host header field,\n      and\n   o  the Request-URI\
    \ obtained from the Request-Line, unless the\n      Request-URI is just the asterisk\
    \ \"*\".\n   If the Request-URI uses the abs_path form or the asterisk form, and\n\
    \   the Host header field is not present, then the effective request URI\n   is\
    \ undefined.\n   Otherwise, when Request-URI uses the authority form, the effective\n\
    \   request URI is undefined.\n   Effective request URIs are compared using the\
    \ rules described in\n   [RFC2616] Section 3.2.3, except that empty path components\
    \ MUST NOT\n   be treated as equivalent to an absolute path of \"/\".\n"
- title: 9.2.1.  Effective Request URI Examples
  contents:
  - "9.2.1.  Effective Request URI Examples\n   Example 1: the effective request URI\
    \ for the message\n     GET /pub/WWW/TheProject.html HTTP/1.1\n     Host: www.example.org:8080\n\
    \   (received over an insecure TCP connection) is \"http\", plus \"://\",\n  \
    \ plus the authority component \"www.example.org:8080\", plus the\n   request-target\
    \ \"/pub/WWW/TheProject.html\".  Thus, it is\n   \"http://www.example.org:8080/pub/WWW/TheProject.html\"\
    .\n   Example 2: the effective request URI for the message\n     OPTIONS * HTTP/1.1\n\
    \     Host: www.example.org\n   (received over an SSL/TLS secured TCP connection)\
    \ is \"https\", plus\n   \"://\", plus the authority component \"www.example.org\"\
    .  Thus, it is\n   \"https://www.example.org\".\n"
- title: 10.  Domain Name IDNA-Canonicalization
  contents:
  - "10.  Domain Name IDNA-Canonicalization\n   An IDNA-canonicalized domain name\
    \ is the output string generated by\n   the following steps.  The input is a putative\
    \ domain name string\n   ostensibly composed of any combination of \"A-labels\"\
    , \"U-labels\", and\n   \"NR-LDH labels\" (see Section 2 of [RFC5890]) concatenated\
    \ using some\n   separator character (typically \".\").\n   1.  Convert the input\
    \ putative domain name string to an order-\n       preserving sequence of individual\
    \ label strings.\n   2.  When implementing IDNA2008, convert, validate, and test\
    \ each\n       A-label and U-label found among the sequence of individual label\n\
    \       strings, using the procedures defined in Sections 5.3 through 5.5\n  \
    \     of [RFC5891].\n       Otherwise, when implementing IDNA2003, convert each\
    \ label using\n       the \"ToASCII\" conversion in Section 4 of [RFC3490] (see\
    \ also the\n       definition of \"equivalence of labels\" in Section 2 of [RFC3490]).\n\
    \   3.  If no errors occurred during the foregoing step, concatenate all\n   \
    \    the labels in the sequence, in order, into a string, separating\n       each\
    \ label from the next with a %x2E (\".\") character.  The\n       resulting string,\
    \ known as an IDNA-canonicalized domain name, is\n       appropriate for use in\
    \ the context of Section 8 (\"User Agent\n       Processing Model\").\n      \
    \ Otherwise, errors occurred.  The input putative domain name\n       string was\
    \ not successfully IDNA-canonicalized.  Invokers of this\n       procedure should\
    \ attempt appropriate error recovery.\n   See also Sections 13 (\"Internationalized\
    \ Domain Names for\n   Applications (IDNA): Dependency and Migration\") and 14.10\n\
    \   (\"Internationalized Domain Names\") of this specification for further\n \
    \  details and considerations.\n"
- title: 11.  Server Implementation and Deployment Advice
  contents:
  - "11.  Server Implementation and Deployment Advice\n   This section is non-normative.\n"
- title: 11.1.  Non-Conformant User Agent Considerations
  contents:
  - "11.1.  Non-Conformant User Agent Considerations\n   Non-conformant UAs ignore\
    \ the Strict-Transport-Security header field;\n   thus, non-conformant user agents\
    \ do not address the threats described\n   in Section 2.3.1 (\"Threats Addressed\"\
    ).  Please refer to Section 14.2\n   (\"Non-Conformant User Agent Implications\"\
    ) for further discussion.\n"
- title: 11.2.  HSTS Policy Expiration Time Considerations
  contents:
  - "11.2.  HSTS Policy Expiration Time Considerations\n   Server implementations\
    \ and deploying web sites need to consider\n   whether they are setting an expiry\
    \ time that is a constant value into\n   the future, or whether they are setting\
    \ an expiry time that is a\n   fixed point in time.\n   The \"constant value into\
    \ the future\" approach can be accomplished by\n   constantly sending the same\
    \ max-age value to UAs.\n   For example, a max-age value of 7776000 seconds is\
    \ 90 days:\n     Strict-Transport-Security: max-age=7776000\n   Note that each\
    \ receipt of this header by a UA will require the UA to\n   update its notion\
    \ of when it must delete its knowledge of this Known\n   HSTS Host.\n   The \"\
    fixed point in time\" approach can be accomplished by sending\n   max-age values\
    \ that represent the remaining time until the desired\n   expiry time.  This would\
    \ require the HSTS Host to send a newly\n   calculated max-age value in each HTTP\
    \ response.\n   A consideration here is whether a deployer wishes to have the\n\
    \   signaled HSTS Policy expiry time match that for the web site's domain\n  \
    \ certificate.\n   Additionally, server implementers should consider employing\
    \ a default\n   max-age value of zero in their deployment configuration systems.\n\
    \   This will require deployers to willfully set max-age in order to have\n  \
    \ UAs enforce the HSTS Policy for their host and will protect them from\n   inadvertently\
    \ enabling HSTS with some arbitrary non-zero duration.\n"
- title: 11.3.  Using HSTS in Conjunction with Self-Signed Public-Key
  contents:
  - "11.3.  Using HSTS in Conjunction with Self-Signed Public-Key\n       Certificates\n\
    \   If all four of the following conditions are true...\n   o  a web site/organization/enterprise\
    \ is generating its own secure\n      transport public-key certificates for web\
    \ sites, and\n   o  that organization's root certification authority (CA) certificate\n\
    \      is not typically embedded by default in browser and/or operating\n    \
    \  system CA certificate stores, and\n   o  HSTS Policy is enabled on a host identifying\
    \ itself using a\n      certificate signed by the organization's CA (i.e., a \"\
    self-signed\n      certificate\"), and\n   o  this certificate does not match\
    \ a usable TLS certificate\n      association (as defined by Section 4 of the\
    \ TLSA protocol\n      specification [RFC6698]),\n   ...then secure connections\
    \ to that site will fail, per the HSTS\n   design.  This is to protect against\
    \ various active attacks, as\n   discussed above.\n   However, if said organization\
    \ wishes to employ its own CA, and self-\n   signed certificates, in concert with\
    \ HSTS, it can do so by deploying\n   its root CA certificate to its users' browsers\
    \ or operating system CA\n   root certificate stores.  It can also, in addition\
    \ or instead,\n   distribute to its users' browsers the end-entity certificate(s)\
    \ for\n   specific hosts.  There are various ways in which this can be\n   accomplished\
    \ (details are out of scope for this specification).  Once\n   its root CA certificate\
    \ is installed in the browsers, it may employ\n   HSTS Policy on its site(s).\n\
    \   Alternatively, that organization can deploy the TLSA protocol; all\n   browsers\
    \ that also use TLSA will then be able to trust the\n   certificates identified\
    \ by usable TLS certificate associations as\n   denoted via TLSA.\n   NOTE:  Interactively\
    \ distributing root CA certificates to users,\n          e.g., via email, and\
    \ having the users install them, is\n          arguably training the users to\
    \ be susceptible to a possible\n          form of phishing attack.  See Section\
    \ 14.8 (\"Bogus Root CA\n          Certificate Phish plus DNS Cache Poisoning\
    \ Attack\").  Thus,\n          care should be taken in the manner in which such\
    \ certificates\n          are distributed and installed on users' systems and\
    \ browsers.\n"
- title: 11.4.  Implications of includeSubDomains
  contents:
  - "11.4.  Implications of includeSubDomains\n   The includeSubDomains directive\
    \ has practical implications meriting\n   careful consideration; two example scenarios\
    \ are:\n   o  An HSTS Host offers unsecured HTTP-based services on alternate\n\
    \      ports or at various subdomains of its HSTS Host domain name.\n   o  Distinct\
    \ web applications are offered at distinct subdomains of an\n      HSTS Host,\
    \ such that UAs often interact directly with these\n      subdomain web applications\
    \ without having necessarily interacted\n      with a web application offered\
    \ at the HSTS Host's domain name (if\n      any).\n   The sections below discuss\
    \ each of these scenarios in turn.\n"
- title: 11.4.1.  Considerations for Offering Unsecured HTTP Services at
  contents:
  - "11.4.1.  Considerations for Offering Unsecured HTTP Services at\n         Alternate\
    \ Ports or Subdomains of an HSTS Host\n   For example, certification authorities\
    \ often offer their CRL\n   distribution and OCSP services [RFC2560] over plain\
    \ HTTP, and\n   sometimes at a subdomain of a publicly available web application\
    \ that\n   may be secured by TLS/SSL.  For example, <https://ca.example.com/>\
    \ is\n   a publicly available web application for \"Example CA\", a\n   certification\
    \ authority.  Customers use this web application to\n   register their public\
    \ keys and obtain certificates.  \"Example CA\"\n   generates certificates for\
    \ customers containing\n   <http://crl-and-ocsp.ca.example.com/> as the value\
    \ for the \"CRL\n   Distribution Points\" and \"Authority Information Access:OCSP\"\
    \n   certificate fields.\n   If ca.example.com were to issue an HSTS Policy with\
    \ the\n   includeSubDomains directive, then HTTP-based user agents implementing\n\
    \   HSTS that have interacted with the ca.example.com web application\n   would\
    \ fail to retrieve CRLs and fail to check OCSP for certificates,\n   because these\
    \ services are offered over plain HTTP.\n   In this case, Example CA can either:\n\
    \   o  not use the includeSubDomains directive, or\n   o  ensure that HTTP-based\
    \ services offered at subdomains of\n      ca.example.com are also uniformly offered\
    \ over TLS/SSL, or\n   o  offer plain HTTP-based services at a different domain\
    \ name, e.g.,\n      crl-and-ocsp.ca.example.NET, or\n   o  utilize an alternative\
    \ approach to distributing certificate status\n      information, obviating the\
    \ need to offer CRL distribution and OCSP\n      services over plain HTTP (e.g.,\
    \ the \"Certificate Status Request\"\n      TLS extension [RFC6066], often colloquially\
    \ referred to as \"OCSP\n      Stapling\").\n   NOTE:  The above points are expressly\
    \ only an example and do not\n          purport to address all the involved complexities.\
    \  For\n          instance, there are many considerations -- on the part of CAs,\n\
    \          certificate deployers, and applications (e.g., browsers) --\n     \
    \     involved in deploying an approach such as \"OCSP Stapling\".\n         \
    \ Such issues are out of scope for this specification.\n"
- title: 11.4.2.  Considerations for Offering Web Applications at Subdomains of
  contents:
  - "11.4.2.  Considerations for Offering Web Applications at Subdomains of\n    \
    \     an HSTS Host\n   In this scenario, an HSTS Host declares an HSTS Policy\
    \ with an\n   includeSubDomains directive, and there also exist distinct web\n\
    \   applications offered at distinct subdomains of the HSTS Host such\n   that\
    \ UAs often interact directly with these subdomain web\n   applications without\
    \ having necessarily interacted with the HSTS\n   Host.  In such a case, the UAs\
    \ will not receive or enforce the HSTS\n   Policy.\n   For example, the HSTS Host\
    \ is \"example.com\", and it is configured to\n   emit the STS header field with\
    \ the includeSubDomains directive.\n   However, example.com's actual web application\
    \ is addressed at\n   \"www.example.com\", and example.com simply redirects user\
    \ agents to\n   \"https://www.example.com/\".\n   If the STS header field is only\
    \ emitted by \"example.com\" but UAs\n   typically bookmark -- and links (from\
    \ anywhere on the web) are\n   typically established to -- \"www.example.com\"\
    , and \"example.com\" is\n   not contacted directly by all user agents in some\
    \ non-zero percentage\n   of interactions, then some number of UAs will not note\
    \ \"example.com\"\n   as an HSTS Host, and some number of users of \"www.example.com\"\
    \ will\n   be unprotected by HSTS Policy.\n   To address this, HSTS Hosts should\
    \ be configured such that the STS\n   header field is emitted directly at each\
    \ HSTS Host domain or\n   subdomain name that constitutes a well-known \"entry\
    \ point\" to one's\n   web application(s), whether or not the includeSubDomains\
    \ directive is\n   employed.\n   Thus, in our example, if the STS header field\
    \ is emitted from both\n   \"example.com\" and \"www.example.com\", this issue\
    \ will be addressed.\n   Also, if there are any other well-known entry points\
    \ to web\n   applications offered by \"example.com\", such as \"foo.example.com\"\
    ,\n   they should also be configured to emit the STS header field.\n"
- title: 12.  User Agent Implementation Advice
  contents:
  - "12.  User Agent Implementation Advice\n   This section is non-normative.\n  \
    \ In order to provide users and web sites more effective protection, as\n   well\
    \ as controls for managing their UA's caching of HSTS Policy, UA\n   implementers\
    \ should consider including features such as the\n   following:\n"
- title: 12.1.  No User Recourse
  contents:
  - "12.1.  No User Recourse\n   Failing secure connection establishment on any warnings\
    \ or errors\n   (per Section 8.4 (\"Errors in Secure Transport Establishment\"\
    )) should\n   be done with \"no user recourse\".  This means that the user should\
    \ not\n   be presented with a dialog giving her the option to proceed.  Rather,\n\
    \   it should be treated similarly to a server error where there is\n   nothing\
    \ further the user can do with respect to interacting with the\n   target web\
    \ application, other than wait and retry.\n   Essentially, \"any warnings or errors\"\
    \ means anything that would cause\n   the UA implementation to announce to the\
    \ user that something is not\n   entirely correct with the connection establishment.\n\
    \   Not doing this, i.e., allowing user recourse such as \"clicking\n   through\
    \ warning/error dialogs\", is a recipe for a man-in-the-middle\n   attack.  If\
    \ a web application issues an HSTS Policy, then it is\n   implicitly opting into\
    \ the \"no user recourse\" approach, whereby all\n   certificate errors or warnings\
    \ cause a connection termination, with\n   no chance to \"fool\" users into making\
    \ the wrong decision and\n   compromising themselves.\n"
- title: 12.2.  User-Declared HSTS Policy
  contents:
  - "12.2.  User-Declared HSTS Policy\n   A user-declared HSTS Policy is the ability\
    \ for users to explicitly\n   declare a given domain name as representing an HSTS\
    \ Host, thus\n   seeding it as a Known HSTS Host before any actual interaction\
    \ with\n   it.  This would help protect against the bootstrap MITM vulnerability\n\
    \   as discussed in Section 14.6 (\"Bootstrap MITM Vulnerability\").\n   NOTE:\
    \  Such a feature is difficult to get right on a per-site basis.\n          See\
    \ the discussion of \"rewrite rules\" in Section 5.5 of\n          [ForceHTTPS].\
    \  For example, arbitrary web sites may not\n          materialize all their URIs\
    \ using the \"https\" scheme and thus\n          could \"break\" if a UA were\
    \ to attempt to access the site\n          exclusively using such URIs.  Also\
    \ note that this feature\n          would complement, but is independent of, an\
    \ \"HSTS pre-loaded\n          list\" feature (see Section 12.3).\n"
- title: 12.3.  HSTS Pre-Loaded List
  contents:
  - "12.3.  HSTS Pre-Loaded List\n   An HSTS pre-loaded list is a facility whereby\
    \ web site administrators\n   can have UAs pre-configured with HSTS Policy for\
    \ their site(s) by the\n   UA vendor(s) -- a so-called \"pre-loaded list\" --\
    \ in a manner similar\n   to how root CA certificates are embedded in browsers\
    \ \"at the\n   factory\".  This would help protect against the bootstrap MITM\n\
    \   vulnerability (Section 14.6).\n   NOTE:  Such a facility would complement\
    \ a \"user-declared HSTS Policy\"\n          feature (Section 12.2).\n"
- title: 12.4.  Disallow Mixed Security Context Loads
  contents:
  - "12.4.  Disallow Mixed Security Context Loads\n   \"Mixed security context\" loads\
    \ happen when a web application\n   resource, fetched by the UA over a secure\
    \ transport, subsequently\n   causes the fetching of one or more other resources\
    \ without using\n   secure transport.  This is also generally referred to as \"\
    mixed\n   content\" loads (see Section 5.3 (\"Mixed Content\") in\n   [W3C.REC-wsc-ui-20100812])\
    \ but should not be confused with the same\n   \"mixed content\" term that is\
    \ also used in the context of markup\n   languages such as XML and HTML.\n   NOTE:\
    \  In order to provide behavioral uniformity across UA\n          implementations,\
    \ the notion of mixed security context will\n          require further standardization\
    \ work, e.g., to define the\n          term(s) more clearly and to define specific\
    \ behaviors with\n          respect to it.\n"
- title: 12.5.  HSTS Policy Deletion
  contents:
  - "12.5.  HSTS Policy Deletion\n   HSTS Policy deletion is the ability to delete\
    \ a UA's cached HSTS\n   Policy on a per-HSTS Host basis.\n   NOTE:  Adding such\
    \ a feature should be done very carefully in both\n          the user interface\
    \ and security senses.  Deleting a cache\n          entry for a Known HSTS Host\
    \ should be a very deliberate and\n          well-considered act -- it shouldn't\
    \ be something that users\n          get used to doing as a matter of course:\
    \ e.g., just \"clicking\n          through\" in order to get work done.  Also,\
    \ implementations\n          need to guard against allowing an attacker to inject\
    \ code,\n          e.g., ECMAscript, into the UA that silently and\n         \
    \ programmatically removes entries from the UA's cache of Known\n          HSTS\
    \ Hosts.\n"
- title: '13.  Internationalized Domain Names for Applications (IDNA): Dependency'
  contents:
  - "13.  Internationalized Domain Names for Applications (IDNA): Dependency\n   \
    \  and Migration\n   Textual domain names on the modern Internet may contain one\
    \ or more\n   \"internationalized\" domain name labels.  Such domain names are\n\
    \   referred to as \"internationalized domain names\" (IDNs).  The\n   specification\
    \ suites defining IDNs and the protocols for their use\n   are named \"Internationalized\
    \ Domain Names for Applications (IDNA)\".\n   At this time, there are two such\
    \ specification suites: IDNA2008\n   [RFC5890] and its predecessor IDNA2003 [RFC3490].\n\
    \   IDNA2008 obsoletes IDNA2003, but there are differences between the\n   two\
    \ specifications, and thus there can be differences in processing\n   (e.g., converting)\
    \ domain name labels that have been registered under\n   one from those registered\
    \ under the other.  There will be a\n   transition period of some time during\
    \ which IDNA2003-based domain\n   name labels will exist in the wild.  In order\
    \ to facilitate their\n   IDNA transition, user agents SHOULD implement IDNA2008\
    \ [RFC5890] and\n   MAY implement [RFC5895] (see also Section 7 of [RFC5894])\
    \ or [UTS46].\n   If a user agent does not implement IDNA2008, the user agent\
    \ MUST\n   implement IDNA2003.\n"
- title: 14.  Security Considerations
  contents:
  - "14.  Security Considerations\n   This specification concerns the expression,\
    \ conveyance, and\n   enforcement of the HSTS Policy.  The overall HSTS Policy\
    \ threat\n   model, including addressed and unaddressed threats, is given in\n\
    \   Section 2.3 (\"Threat Model\").\n   Additionally, the sections below discuss\
    \ operational ramifications of\n   the HSTS Policy, provide feature rationale,\
    \ discuss potential HSTS\n   Policy misuse, and highlight some known vulnerabilities\
    \ in the HSTS\n   Policy regime.\n"
- title: 14.1.  Underlying Secure Transport Considerations
  contents:
  - "14.1.  Underlying Secure Transport Considerations\n   This specification is fashioned\
    \ to be independent of the secure\n   transport underlying HTTP.  However, the\
    \ threat analysis and\n   requirements in Section 2 (\"Overview\") in fact presume\
    \ TLS or SSL as\n   the underlying secure transport.  Thus, employment of HSTS\
    \ in the\n   context of HTTP running over some other secure transport protocol\n\
    \   would require assessment of that secure transport protocol's security\n  \
    \ model in conjunction with the specifics of how HTTP is layered over\n   it in\
    \ order to assess HSTS's subsequent security properties in that\n   context.\n"
- title: 14.2.  Non-Conformant User Agent Implications
  contents:
  - "14.2.  Non-Conformant User Agent Implications\n   Non-conformant user agents\
    \ ignore the Strict-Transport-Security\n   header field; thus, non-conformant\
    \ user agents do not address the\n   threats described in Section 2.3.1 (\"Threats\
    \ Addressed\").\n   This means that the web application and its users wielding\n\
    \   non-conformant UAs will be vulnerable to both of the following:\n   o  Passive\
    \ network attacks due to web site development and deployment\n      bugs:\n  \
    \       For example, if the web application contains any insecure\n         references\
    \ (e.g., \"http\") to the web application server, and if\n         not all of\
    \ its cookies are flagged as \"Secure\", then its\n         cookies will be vulnerable\
    \ to passive network sniffing and,\n         potentially, subsequent misuse of\
    \ user credentials.\n   o  Active network attacks:\n         For example, if an\
    \ attacker is able to place a \"man in the\n         middle\", secure transport\
    \ connection attempts will likely yield\n         warnings to the user, but without\
    \ HSTS Policy being enforced,\n         the present common practice is to allow\
    \ the user to \"click\n         through\" and proceed.  This renders the user\
    \ and possibly the\n         web application open to abuse by such an attacker.\n\
    \   This is essentially the status quo for all web applications and their\n  \
    \ users in the absence of HSTS Policy.  Since web application providers\n   typically\
    \ do not control the type or version of UAs their web\n   applications interact\
    \ with, the implication is that HSTS Host\n   deployers must generally exercise\
    \ the same level of care to avoid web\n   site development and deployment bugs\
    \ (see Section 2.3.1.3) as they\n   would if they were not asserting HSTS Policy.\n"
- title: 14.3.  Ramifications of HSTS Policy Establishment Only over Error-Free
  contents:
  - "14.3.  Ramifications of HSTS Policy Establishment Only over Error-Free\n    \
    \   Secure Transport\n   The user agent processing model defined in Section 8\
    \ (\"User Agent\n   Processing Model\") stipulates that a host is initially noted\
    \ as a\n   Known HSTS Host, or that updates are made to a Known HSTS Host's\n\
    \   cached information, only if the UA receives the STS header field over\n  \
    \ a secure transport connection having no underlying secure transport\n   errors\
    \ or warnings.\n   The rationale behind this is that if there is a \"man in the\
    \ middle\"\n   (MITM) -- whether a legitimately deployed proxy or an illegitimate\n\
    \   entity -- it could cause various mischief (see also Appendix A\n   (\"Design\
    \ Decision Notes\") item 3, as well as Section 14.6 (\"Bootstrap\n   MITM Vulnerability\"\
    )); for example:\n   o  Unauthorized notation of the host as a Known HSTS Host,\n\
    \      potentially leading to a denial-of-service situation if the host\n    \
    \  does not uniformly offer its services over secure transport (see\n      also\
    \ Section 14.5 (\"Denial of Service\")).\n   o  Resetting the time to live for\
    \ the host's designation as a Known\n      HSTS Host by manipulating the max-age\
    \ header field parameter value\n      that is returned to the UA.  If max-age\
    \ is returned as zero, this\n      will cause the host to cease being regarded\
    \ as a Known HSTS Host\n      by the UA, leading to either insecure connections\
    \ to the host or\n      possibly denial of service if the host delivers its services\
    \ only\n      over secure transport.\n   However, this means that if a UA is \"\
    behind\" a MITM non-transparent\n   TLS proxy -- within a corporate intranet,\
    \ for example -- and\n   interacts with an unknown HSTS Host beyond the proxy,\
    \ the user could\n   possibly be presented with the legacy secure connection error\n\
    \   dialogs.  Even if the risk is accepted and the user \"clicks through\",\n\
    \   the host will not be noted as an HSTS Host.  Thus, as long as the UA\n   is\
    \ behind such a proxy, the user will be vulnerable and will possibly\n   be presented\
    \ with the legacy secure connection error dialogs for\n   as-yet unknown HSTS\
    \ Hosts.\n   Once the UA successfully connects to an unknown HSTS Host over error-\n\
    \   free secure transport, the host will be noted as a Known HSTS Host.\n   This\
    \ will result in the failure of subsequent connection attempts\n   from behind\
    \ interfering proxies.\n   The above discussion relates to the recommendation\
    \ in Section 12\n   (\"User Agent Implementation Advice\") that the secure connection\
    \ be\n   terminated with \"no user recourse\" whenever there are warnings and\n\
    \   errors and the host is a Known HSTS Host.  Such a posture protects\n   users\
    \ from \"clicking through\" security warnings and putting\n   themselves at risk.\n"
- title: 14.4.  The Need for includeSubDomains
  contents:
  - "14.4.  The Need for includeSubDomains\n   Without the includeSubDomains directive,\
    \ a web application would not\n   be able to adequately protect so-called \"domain\
    \ cookies\" (even if\n   these cookies have their \"Secure\" flag set and thus\
    \ are conveyed only\n   on secure channels).  These are cookies the web application\
    \ expects\n   UAs to return to any and all subdomains of the web application.\n\
    \   For example, suppose example.com represents the top-level DNS name\n   for\
    \ a web application.  Further suppose that this cookie is set for\n   the entire\
    \ example.com domain, i.e., it is a \"domain cookie\", and it\n   has its Secure\
    \ flag set.  Suppose example.com is a Known HSTS Host\n   for this UA, but the\
    \ includeSubDomains directive is not set.\n   Now, if an attacker causes the UA\
    \ to request a subdomain name that is\n   unlikely to already exist in the web\
    \ application, such as\n   \"https://uxdhbpahpdsf.example.com/\", but that the\
    \ attacker has\n   managed to register in the DNS and point at an HTTP server\
    \ under the\n   attacker's control, then:\n   1.  The UA is unlikely to already\
    \ have an HSTS Policy established for\n       \"uxdhbpahpdsf.example.com\".\n\
    \   2.  The HTTP request sent to uxdhbpahpdsf.example.com will include\n     \
    \  the Secure-flagged domain cookie.\n   3.  If \"uxdhbpahpdsf.example.com\" returns\
    \ a certificate during TLS\n       establishment, and the user \"clicks through\"\
    \ any warning that\n       might be presented (it is possible, but not certain,\
    \ that one may\n       obtain a requisite certificate for such a domain name such\
    \ that a\n       warning may or may not appear), then the attacker can obtain\
    \ the\n       Secure-flagged domain cookie that's ostensibly being protected.\n\
    \   Without the \"includeSubDomains\" directive, HSTS is unable to protect\n \
    \  such Secure-flagged domain cookies.\n"
- title: 14.5.  Denial of Service
  contents:
  - "14.5.  Denial of Service\n   HSTS could be used to mount certain forms of Denial-of-Service\
    \ (DoS)\n   attacks against web sites.  A DoS attack is an attack in which one\
    \ or\n   more network entities target a victim entity and attempt to prevent\n\
    \   the victim from doing useful work.  This section discusses such\n   scenarios\
    \ in terms of HSTS, though this list is not exhaustive.  See\n   also [RFC4732]\
    \ for a discussion of overall Internet DoS\n   considerations.\n   o  Web applications\
    \ available over HTTP\n      There is an opportunity for perpetrating DoS attacks\
    \ with web\n      applications (or critical portions of them) that are available\n\
    \      only over HTTP without secure transport, if attackers can cause\n     \
    \ UAs to set HSTS Policy for such web applications' host(s).\n      This is because\
    \ once the HSTS Policy is set for a web\n      application's host in a UA, the\
    \ UA will only use secure transport\n      to communicate with the host.  If the\
    \ host is not using secure\n      transport or is not using it for critical portions\
    \ of its web\n      application, then the web application will be rendered unusable\n\
    \      for the UA's user.\n      NOTE:  This is a use case for UAs to offer an\
    \ \"HSTS Policy\n             deletion\" feature as noted in Section 12.5 (\"\
    HSTS Policy\n             Deletion\").\n      An HSTS Policy can be set for a\
    \ victim host in various ways:\n      *  If the web application has an HTTP response\
    \ splitting\n         vulnerability [CWE-113] (which can be abused in order to\n\
    \         facilitate \"HTTP header injection\").\n      *  If an attacker can\
    \ spoof a redirect from an insecure victim\n         site, e.g., <http://example.com/>\
    \ to <https://example.com/>,\n         where the latter is attacker-controlled\
    \ and has an apparently\n         valid certificate.  In this situation, the attacker\
    \ can then\n         set an HSTS Policy for example.com and also for all subdomains\n\
    \         of example.com.\n      *  If an attacker can convince users to manually\
    \ configure HSTS\n         Policy for a victim host.  This assumes that their\
    \ UAs offer\n         such a capability (see Section 12 (\"User Agent Implementation\n\
    \         Advice\")).  Alternatively, if such UA configuration is\n         scriptable,\
    \ then an attacker can cause UAs to execute his\n         script and set HSTS\
    \ Policies for whichever desired domains.\n   o  Inadvertent use of includeSubDomains\n\
    \      The includeSubDomains directive instructs UAs to automatically\n      regard\
    \ all subdomains of the given HSTS Host as Known HSTS Hosts.\n      If any such\
    \ subdomains do not support properly configured secure\n      transport, then\
    \ they will be rendered unreachable from such UAs.\n"
- title: 14.6.  Bootstrap MITM Vulnerability
  contents:
  - "14.6.  Bootstrap MITM Vulnerability\n   Bootstrap MITM (man-in-the-middle) vulnerability\
    \ is a vulnerability\n   that users and HSTS Hosts encounter in the situation\
    \ where the user\n   manually enters, or follows a link, to an unknown HSTS Host\
    \ using an\n   \"http\" URI rather than an \"https\" URI.  Because the UA uses\
    \ an\n   insecure channel in the initial attempt to interact with the\n   specified\
    \ server, such an initial interaction is vulnerable to\n   various attacks (see\
    \ Section 5.3 of [ForceHTTPS]).\n   NOTE:  There are various features/facilities\
    \ that UA implementations\n          may employ in order to mitigate this vulnerability.\
    \  Please\n          see Section 12 (\"User Agent Implementation Advice\").\n"
- title: 14.7.  Network Time Attacks
  contents:
  - "14.7.  Network Time Attacks\n   Active network attacks can subvert network time\
    \ protocols (such as\n   the Network Time Protocol (NTP) [RFC5905]) -- making\
    \ HSTS less\n   effective against clients that trust NTP or lack a real time clock.\n\
    \   Network time attacks are beyond the scope of this specification.\n   Note\
    \ that modern operating systems use NTP by default.  See also\n   Section 2.10\
    \ of [RFC4732].\n"
- title: 14.8.  Bogus Root CA Certificate Phish plus DNS Cache Poisoning Attack
  contents:
  - "14.8.  Bogus Root CA Certificate Phish plus DNS Cache Poisoning Attack\n   An\
    \ attacker could conceivably obtain users' login credentials\n   belonging to\
    \ a victim HSTS-protected web application via a bogus root\n   CA certificate\
    \ phish plus DNS cache poisoning attack.\n   For example, the attacker could first\
    \ convince users of a victim web\n   application (which is protected by HSTS Policy)\
    \ to install the\n   attacker's version of a root CA certificate purporting (falsely)\
    \ to\n   represent the CA of the victim web application.  This might be\n   accomplished\
    \ by sending the users a phishing email message with a\n   link to such a certificate,\
    \ which their browsers may offer to install\n   if clicked on.\n   Then, if the\
    \ attacker can perform an attack on the users' DNS\n   servers, (e.g., via cache\
    \ poisoning) and turn on HSTS Policy for\n   their fake web application, the affected\
    \ users' browsers would access\n   the attacker's web application rather than\
    \ the legitimate web\n   application.\n   This type of attack leverages vectors\
    \ that are outside of the scope\n   of HSTS.  However, the feasibility of such\
    \ threats can be mitigated\n   by including in a web application's overall deployment\
    \ approach\n   appropriate employment, in addition to HSTS, of security facilities\n\
    \   such as DNS Security Extensions [RFC4033], plus techniques to block\n   email\
    \ phishing and fake certificate injection.\n"
- title: 14.9.  Creative Manipulation of HSTS Policy Store
  contents:
  - "14.9.  Creative Manipulation of HSTS Policy Store\n   Since an HSTS Host may\
    \ select its own host name and subdomains\n   thereof, and this information is\
    \ cached in the HSTS Policy store of\n   conforming UAs, it is possible for those\
    \ who control one or more HSTS\n   Hosts to encode information into domain names\
    \ they control and cause\n   such UAs to cache this information as a matter of\
    \ course in the\n   process of noting the HSTS Host.  This information can be\
    \ retrieved\n   by other hosts through cleverly constructed and loaded web resources,\n\
    \   causing the UA to send queries to (variations of) the encoded domain\n   names.\
    \  Such queries can reveal whether the UA had previously visited\n   the original\
    \ HSTS Host (and subdomains).\n   Such a technique could potentially be abused\
    \ as yet another form of\n   \"web tracking\" [WebTracking].\n"
- title: 14.10.  Internationalized Domain Names
  contents:
  - "14.10.  Internationalized Domain Names\n   Internet security relies in part on\
    \ the DNS and the domain names it\n   hosts.  Domain names are used by users to\
    \ identify and connect to\n   Internet hosts and other network resources.  For\
    \ example, Internet\n   security is compromised if a user entering an internationalized\n\
    \   domain name (IDN) is connected to different hosts based on different\n   interpretations\
    \ of the IDN.\n   The processing models specified in this specification assume\
    \ that the\n   domain names they manipulate are IDNA-canonicalized, and that the\n\
    \   canonicalization process correctly performed all appropriate IDNA and\n  \
    \ Unicode validations and character list testing per the requisite\n   specifications\
    \ (e.g., as noted in Section 10 (\"Domain Name IDNA-\n   Canonicalization\")).\
    \  These steps are necessary in order to avoid\n   various potentially compromising\
    \ situations.\n   In brief, examples of issues that could stem from lack of careful\
    \ and\n   consistent Unicode and IDNA validations include unexpected processing\n\
    \   exceptions, truncation errors, and buffer overflows, as well as\n   false-positive\
    \ and/or false-negative domain name matching results.\n   Any of the foregoing\
    \ issues could possibly be leveraged by attackers\n   in various ways.\n   Additionally,\
    \ IDNA2008 [RFC5890] differs from IDNA2003 [RFC3490] in\n   terms of disallowed\
    \ characters and character mapping conventions.\n   This situation can also lead\
    \ to false-positive and/or false-negative\n   domain name matching results, resulting\
    \ in, for example, users\n   possibly communicating with unintended hosts or not\
    \ being able to\n   reach intended hosts.\n   For details, refer to the Security\
    \ Considerations sections of\n   [RFC5890], [RFC5891], and [RFC3490], as well\
    \ as the specifications\n   they normatively reference.  Additionally, [RFC5894]\
    \ provides\n   detailed background and rationale for IDNA2008 in particular, as\
    \ well\n   as IDNA and its issues in general, and should be consulted in\n   conjunction\
    \ with the former specifications.\n"
- title: 15.  IANA Considerations
  contents:
  - "15.  IANA Considerations\n   Below is the Internet Assigned Numbers Authority\
    \ (IANA) Permanent\n   Message Header Field registration information per [RFC3864].\n\
    \     Header field name:           Strict-Transport-Security\n     Applicable\
    \ protocol:         http\n     Status:                      standard\n     Author/Change\
    \ controller:    IETF\n     Specification document(s):   this one\n"
- title: 16.  References
  contents:
  - '16.  References

    '
- title: 16.1.  Normative References
  contents:
  - "16.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use in\
    \ RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119, March\
    \ 1997.\n   [RFC2616]  Fielding, R., Gettys, J., Mogul, J., Frystyk, H.,\n   \
    \           Masinter, L., Leach, P., and T. Berners-Lee, \"Hypertext\n       \
    \       Transfer Protocol -- HTTP/1.1\", RFC 2616, June 1999.\n   [RFC2818]  Rescorla,\
    \ E., \"HTTP Over TLS\", RFC 2818, May 2000.\n   [RFC3490]  Faltstrom, P., Hoffman,\
    \ P., and A. Costello,\n              \"Internationalizing Domain Names in Applications\
    \ (IDNA)\",\n              RFC 3490, March 2003.\n   [RFC3864]  Klyne, G., Nottingham,\
    \ M., and J. Mogul, \"Registration\n              Procedures for Message Header\
    \ Fields\", BCP 90, RFC 3864,\n              September 2004.\n   [RFC3986]  Berners-Lee,\
    \ T., Fielding, R., and L. Masinter, \"Uniform\n              Resource Identifier\
    \ (URI): Generic Syntax\", STD 66,\n              RFC 3986, January 2005.\n  \
    \ [RFC5246]  Dierks, T. and E. Rescorla, \"The Transport Layer Security\n    \
    \          (TLS) Protocol Version 1.2\", RFC 5246, August 2008.\n   [RFC5890]\
    \  Klensin, J., \"Internationalized Domain Names for\n              Applications\
    \ (IDNA): Definitions and Document Framework\",\n              RFC 5890, August\
    \ 2010.\n   [RFC5891]  Klensin, J., \"Internationalized Domain Names in\n    \
    \          Applications (IDNA): Protocol\", RFC 5891, August 2010.\n   [RFC5895]\
    \  Resnick, P. and P. Hoffman, \"Mapping Characters for\n              Internationalized\
    \ Domain Names in Applications\n              (IDNA) 2008\", RFC 5895, September\
    \ 2010.\n   [RFC6698]  Hoffman, P. and J. Schlyter, \"The DNS-Based Authentication\n\
    \              of Named Entities (DANE) Transport Layer Security (TLS)\n     \
    \         Protocol: TLSA\", RFC 6698, August 2012.\n   [UTS46]    Davis, M. and\
    \ M. Suignard, \"Unicode IDNA Compatibility\n              Processing\", Unicode\
    \ Technical Standard #46,\n              <http://unicode.org/reports/tr46/>.\n\
    \   [Unicode]  The Unicode Consortium, \"The Unicode Standard\",\n           \
    \   <http://www.unicode.org/versions/latest/>.\n   [W3C.REC-html401-19991224]\n\
    \              Raggett, D., Le Hors, A., and I. Jacobs, \"HTML 4.01\n        \
    \      Specification\", World Wide Web Consortium Recommendation\n           \
    \   REC-html401-19991224, December 1999,\n              <http://www.w3.org/TR/1999/REC-html401-19991224/>.\n"
- title: 16.2.  Informative References
  contents:
  - "16.2.  Informative References\n   [Aircrack-ng]\n              d'Otreppe, T.,\
    \ \"Aircrack-ng\", Accessed: 11-Jul-2010,\n              <http://www.aircrack-ng.org/>.\n\
    \   [BeckTews09]\n              Beck, M. and E. Tews, \"Practical Attacks Against\
    \ WEP and\n              WPA\", Second ACM Conference on Wireless Network\n  \
    \            Security Zurich, Switzerland, 2009,\n              <http://dl.acm.org/citation.cfm?id=1514286>.\n\
    \   [CWE-113]  \"CWE-113: Improper Neutralization of CRLF Sequences in\n     \
    \         HTTP Headers ('HTTP Response Splitting')\", Common Weakness\n      \
    \        Enumeration <http://cwe.mitre.org/>, The Mitre\n              Corporation\
    \ <http://www.mitre.org/>,\n              <http://cwe.mitre.org/data/definitions/113.html>.\n\
    \   [Firesheep]\n              Various, \"Firesheep\", Wikipedia Online, ongoing,\
    \ <https://\n              secure.wikimedia.org/wikipedia/en/w/\n            \
    \  index.php?title=Firesheep&oldid=517474182>.\n   [ForceHTTPS]\n            \
    \  Jackson, C. and A. Barth, \"ForceHTTPS:  Protecting High-\n              Security\
    \ Web Sites from Network Attacks\", In Proceedings\n              of the 17th\
    \ International World Wide Web Conference\n              (WWW2008) , 2008,\n \
    \             <https://crypto.stanford.edu/forcehttps/>.\n   [GoodDhamijaEtAl05]\n\
    \              Good, N., Dhamija, R., Grossklags, J., Thaw, D.,\n            \
    \  Aronowitz, S., Mulligan, D., and J. Konstan, \"Stopping\n              Spyware\
    \ at the Gate: A User Study of Privacy, Notice and\n              Spyware\", In\
    \ Proceedings of Symposium On Usable Privacy\n              and Security (SOUPS)\
    \ Pittsburgh, PA, USA, July 2005,\n              <http://www.law.berkeley.edu/files/\n\
    \              Spyware_at_the_Gate.pdf>.\n   [HTTP1_1-UPD]\n              Fielding,\
    \ R., Ed., and J. Reschke, Ed., \"Hypertext\n              Transfer Protocol (HTTP/1.1):\
    \ Message Syntax and Routing\",\n              Work in Progress, October 2012.\n\
    \   [JacksonBarth2008]\n              Jackson, C. and A. Barth, \"Beware of Finer-Grained\n\
    \              Origins\", Web 2.0 Security and Privacy Workshop, Oakland,\n  \
    \            CA, USA, 2008,\n              <http://seclab.stanford.edu/websec/origins/fgo.pdf>.\n\
    \   [OWASP-TLSGuide]\n              Coates, M., Wichers, D., Boberski, M., and\
    \ T. Reguly,\n              \"Transport Layer Protection Cheat Sheet\",\n    \
    \          Accessed: 11-Jul-2010, <http://www.owasp.org/index.php/\n         \
    \     Transport_Layer_Protection_Cheat_Sheet>.\n   [RFC1035]  Mockapetris, P.,\
    \ \"Domain names - implementation and\n              specification\", STD 13,\
    \ RFC 1035, November 1987.\n   [RFC2560]  Myers, M., Ankney, R., Malpani, A.,\
    \ Galperin, S., and C.\n              Adams, \"X.509 Internet Public Key Infrastructure\
    \ Online\n              Certificate Status Protocol - OCSP\", RFC 2560, June 1999.\n\
    \   [RFC4033]  Arends, R., Austein, R., Larson, M., Massey, D., and S.\n     \
    \         Rose, \"DNS Security Introduction and Requirements\",\n            \
    \  RFC 4033, March 2005.\n   [RFC4732]  Handley, M., Rescorla, E., and IAB, \"\
    Internet Denial-of-\n              Service Considerations\", RFC 4732, December\
    \ 2006.\n   [RFC4949]  Shirey, R., \"Internet Security Glossary, Version 2\",\n\
    \              RFC 4949, August 2007.\n   [RFC5226]  Narten, T. and H. Alvestrand,\
    \ \"Guidelines for Writing an\n              IANA Considerations Section in RFCs\"\
    , BCP 26, RFC 5226,\n              May 2008.\n   [RFC5280]  Cooper, D., Santesson,\
    \ S., Farrell, S., Boeyen, S.,\n              Housley, R., and W. Polk, \"Internet\
    \ X.509 Public Key\n              Infrastructure Certificate and Certificate Revocation\
    \ List\n              (CRL) Profile\", RFC 5280, May 2008.\n   [RFC5894]  Klensin,\
    \ J., \"Internationalized Domain Names for\n              Applications (IDNA):\
    \ Background, Explanation, and\n              Rationale\", RFC 5894, August 2010.\n\
    \   [RFC5905]  Mills, D., Martin, J., Burbank, J., and W. Kasch, \"Network\n \
    \             Time Protocol Version 4: Protocol and Algorithms\n             \
    \ Specification\", RFC 5905, June 2010.\n   [RFC6066]  Eastlake, D., \"Transport\
    \ Layer Security (TLS) Extensions:\n              Extension Definitions\", RFC\
    \ 6066, January 2011.\n   [RFC6101]  Freier, A., Karlton, P., and P. Kocher, \"\
    The Secure\n              Sockets Layer (SSL) Protocol Version 3.0\", RFC 6101,\n\
    \              August 2011.\n   [RFC6125]  Saint-Andre, P. and J. Hodges, \"Representation\
    \ and\n              Verification of Domain-Based Application Service Identity\n\
    \              within Internet Public Key Infrastructure Using X.509\n       \
    \       (PKIX) Certificates in the Context of Transport Layer\n              Security\
    \ (TLS)\", RFC 6125, March 2011.\n   [RFC6265]  Barth, A., \"HTTP State Management\
    \ Mechanism\", RFC 6265,\n              April 2011.\n   [RFC6454]  Barth, A.,\
    \ \"The Web Origin Concept\", RFC 6454,\n              December 2011.\n   [SunshineEgelmanEtAl09]\n\
    \              Sunshine, J., Egelman, S., Almuhimedi, H., Atri, N., and\n    \
    \          L. Cranor, \"Crying Wolf: An Empirical Study of SSL Warning\n     \
    \         Effectiveness\", In Proceedings of 18th USENIX Security\n          \
    \    Symposium Montreal, Canada, August 2009, <http://\n              www.usenix.org/events/sec09/tech/full_papers/\n\
    \              sunshine.pdf>.\n   [W3C.REC-wsc-ui-20100812]\n              Roessler,\
    \ T. and A. Saldhana, \"Web Security Context: User\n              Interface Guidelines\"\
    , World Wide Web Consortium\n              Recommendation REC-wsc-ui-20100812,\
    \ August 2010,\n              <http://www.w3.org/TR/2010/REC-wsc-ui-20100812>.\n\
    \   [WebTracking]\n              Schmucker, N., \"Web Tracking\", SNET2 Seminar\
    \ Paper\n              - Summer Term, 2011, <http://www.snet.tu-berlin.de/\n \
    \             fileadmin/fg220/courses/SS11/snet-project/\n              web-tracking_schmuecker.pdf>.\n"
- title: Appendix A.  Design Decision Notes
  contents:
  - "Appendix A.  Design Decision Notes\n   This appendix documents various design\
    \ decisions.\n   1.  Cookies aren't appropriate for HSTS Policy expression, as\
    \ they\n       are potentially mutable (while stored in the UA); therefore, an\n\
    \       HTTP header field is employed.\n   2.  We chose to not attempt to specify\
    \ how \"mixed security context\n       loads\" (also known as \"mixed content\
    \ loads\") are handled, due to\n       UA implementation considerations as well\
    \ as classification\n       difficulties.\n   3.  An HSTS Host may update UA notions\
    \ of HSTS Policy via new HSTS\n       header field parameter values.  We chose\
    \ to have UAs honor the\n       \"freshest\" information received from a server\
    \ because there is\n       the chance of a web site sending out an erroneous HSTS\
    \ Policy,\n       such as a multi-year max-age value, and/or an incorrect\n  \
    \     includeSubDomains directive.  If the HSTS Host couldn't correct\n      \
    \ such errors over protocol, it would require some form of\n       annunciation\
    \ to users and manual intervention on the users' part,\n       which could be\
    \ a non-trivial problem for both web application\n       providers and their users.\n\
    \   4.  HSTS Hosts are identified only via domain names -- explicit IP\n     \
    \  address identification of all forms is excluded.  This is for\n       simplification\
    \ and also is in recognition of various issues with\n       using direct IP address\
    \ identification in concert with PKI-based\n       security.\n   5.  The max-age\
    \ approach of having the HSTS Host provide a simple\n       integer number of\
    \ seconds for a cached HSTS Policy time-to-live\n       value, as opposed to an\
    \ approach of stating an expiration time in\n       the future, was chosen for\
    \ various reasons.  Amongst the reasons\n       are no need for clock synchronization,\
    \ no need to define date and\n       time value syntaxes (specification simplicity),\
    \ and\n       implementation simplicity.\n   6.  In determining whether port mapping\
    \ was to be employed, the\n       option of merely refusing to dereference any\
    \ URL with an explicit\n       port was considered.  It was felt, though, that\
    \ the possibility\n       that the URI to be dereferenced is incorrect (and there\
    \ is indeed\n       a valid HTTPS server at that port) is worth the small cost\
    \ of\n       possibly wasted HTTPS fetches to HTTP servers.\n"
- title: Appendix B.  Differences between HSTS Policy and Same-Origin Policy
  contents:
  - "Appendix B.  Differences between HSTS Policy and Same-Origin Policy\n   HSTS\
    \ Policy has the following primary characteristics:\n      HSTS Policy stipulates\
    \ requirements for the security\n      characteristics of UA-to-host connection\
    \ establishment, on a\n      per-host basis.\n      Hosts explicitly declare HSTS\
    \ Policy to UAs.  Conformant UAs are\n      obliged to implement hosts' declared\
    \ HSTS Policies.\n      HSTS Policy is conveyed over protocol from the host to\
    \ the UA.\n      The UA maintains a cache of Known HSTS Hosts.\n      UAs apply\
    \ HSTS Policy whenever making an HTTP connection to a\n      Known HSTS Host,\
    \ regardless of host port number; i.e., it applies\n      to all ports on a Known\
    \ HSTS Host.  Hosts are unable to affect\n      this aspect of HSTS Policy.\n\
    \      Hosts may optionally declare that their HSTS Policy applies to all\n  \
    \    subdomains of their host domain name.\n   In contrast, the Same-Origin Policy\
    \ (SOP) [RFC6454] has the following\n   primary characteristics:\n      An origin\
    \ is the scheme, host, and port of a URI identifying a\n      resource.\n    \
    \  A UA may dereference a URI, thus loading a representation of the\n      resource\
    \ the URI identifies.  UAs label resource representations\n      with their origins,\
    \ which are derived from their URIs.\n      The SOP refers to a collection of\
    \ principles, implemented within\n      UAs, governing the isolation of and communication\
    \ between resource\n      representations within the UA, as well as resource\n\
    \      representations' access to network resources.\n   In summary, although\
    \ both HSTS Policy and SOP are enforced by UAs,\n   HSTS Policy is optionally\
    \ declared by hosts and is not origin-based,\n   while the SOP applies to all\
    \ resource representations loaded from all\n   hosts by conformant UAs.\n"
- title: Appendix C.  Acknowledgments
  contents:
  - "Appendix C.  Acknowledgments\n   The authors thank Devdatta Akhawe, Michael Barrett,\
    \ Ben Campbell,\n   Tobias Gondrom, Paul Hoffman, Murray Kucherawy, Barry Leiba,\
    \ James\n   Manger, Alexey Melnikov, Haevard Molland, Yoav Nir, Yngve N.\n   Pettersen,\
    \ Laksh Raghavan, Marsh Ray, Julian Reschke, Eric Rescorla,\n   Tom Ritter, Peter\
    \ Saint-Andre, Brian Smith, Robert Sparks, Maciej\n   Stachowiak, Sid Stamm, Andy\
    \ Steingrubl, Brandon Sterne, Martin\n   Thomson, Daniel Veditz, and Jan Wrobel,\
    \ as well as all the websec\n   working group participants and others for their\
    \ various reviews and\n   helpful contributions.\n   Thanks to Julian Reschke\
    \ for his elegant rewriting of the effective\n   request URI text, which he did\
    \ when incorporating the ERU notion into\n   the updates to HTTP/1.1 [HTTP1_1-UPD].\
    \  Subsequently, the ERU text in\n   this spec was lifted from Julian's work in\
    \ the updated HTTP/1.1\n   (part 1) specification and adapted to the [RFC2616]\
    \ ABNF.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Jeff Hodges\n   PayPal\n   2211 North First Street\n \
    \  San Jose, California  95131\n   US\n   EMail: Jeff.Hodges@PayPal.com\n   Collin\
    \ Jackson\n   Carnegie Mellon University\n   EMail: collin.jackson@sv.cmu.edu\n\
    \   Adam Barth\n   Google, Inc.\n   EMail: ietf@adambarth.com\n   URI:   http://www.adambarth.com/\n"
