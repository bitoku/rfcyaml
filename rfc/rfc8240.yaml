- title: __initial_text__
  contents:
  - ''
- title: Internet Architecture Board (IAB)                          H. Tschofenig
  contents:
  - 'Internet Architecture Board (IAB)                          H. Tschofenig

    '
- title: Report from the Internet of Things Software Update (IoTSU) Workshop 2016
  contents:
  - 'Report from the Internet of Things Software Update (IoTSU) Workshop 2016

    '
- title: Abstract
  contents:
  - "Abstract\n   This document provides a summary of the Internet of Things Software\n\
    \   Update (IoTSU) Workshop that took place at Trinity College Dublin,\n   Ireland\
    \ on the 13th and 14th of June, 2016.  The main goal of the\n   workshop was to\
    \ foster a discussion on requirements, challenges, and\n   solutions for bringing\
    \ software and firmware updates to IoT devices.\n   This report summarizes the\
    \ discussions and lists recommendations to\n   the standards community.\n   Note\
    \ that this document is a report on the proceedings of the\n   workshop.  The\
    \ views and positions documented in this report are\n   those of the workshop\
    \ participants and do not necessarily reflect IAB\n   views and positions.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document is not an Internet Standards Track specification;\
    \ it is\n   published for informational purposes.\n   This document is a product\
    \ of the Internet Architecture Board (IAB)\n   and represents information that\
    \ the IAB has deemed valuable to\n   provide for permanent record.  It represents\
    \ the consensus of the\n   Internet Architecture Board (IAB).  Documents approved\
    \ for\n   publication by the IAB are not a candidate for any level of Internet\n\
    \   Standard; see Section 2 of RFC 7841.\n   Information about the current status\
    \ of this document, any errata,\n   and how to provide feedback on it may be obtained\
    \ at\n   https://www.rfc-editor.org/info/rfc8240.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2017 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (https://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction  . . . . . . . . . . . . . . . . . . .\
    \ . . . . .   3\n   2.  Terminology . . . . . . . . . . . . . . . . . . . . .\
    \ . . . .   5\n   3.  Requirements and Questions Raised . . . . . . . . . . .\
    \ . . .   6\n   4.  Authorizing a Software/Firmware Update  . . . . . . . . .\
    \ . .  12\n   5.  End-of-Support  . . . . . . . . . . . . . . . . . . . . . .\
    \ .  13\n   6.  Incentives  . . . . . . . . . . . . . . . . . . . . . . . . .\
    \  15\n   7.  Measurements and Analysis . . . . . . . . . . . . . . . . . .  15\n\
    \   8.  Firmware Distribution in Mesh Networks  . . . . . . . . . . .  16\n  \
    \ 9.  Compromised Devices . . . . . . . . . . . . . . . . . . . . .  17\n   10.\
    \ Miscellaneous Points  . . . . . . . . . . . . . . . . . . . .  17\n   11. Tentative\
    \ Conclusions and Next Steps  . . . . . . . . . . . .  19\n   12. Security Considerations\
    \ . . . . . . . . . . . . . . . . . . .  20\n   13. IANA Considerations . . .\
    \ . . . . . . . . . . . . . . . . . .  20\n   14. Informative References  . .\
    \ . . . . . . . . . . . . . . . . .  20\n   Appendix A.  Program Committee  .\
    \ . . . . . . . . . . . . . . . .  24\n   Appendix B.  Accepted Position Papers\
    \ . . . . . . . . . . . . . .  24\n   Appendix C.  List of Participants . . .\
    \ . . . . . . . . . . . . .  26\n   Acknowledgements  . . . . . . . . . . . .\
    \ . . . . . . . . . . . .  27\n   Authors' Addresses  . . . . . . . . . . . .\
    \ . . . . . . . . . . .  27\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   This document provides a summary of the Internet of Things\
    \ Software\n   Update (IoTSU) Workshop [IoTSU] that took place at Trinity College\n\
    \   Dublin, Ireland on the 13th and 14th of June, 2016.  The main goal of\n  \
    \ the workshop was to foster a discussion on requirements, challenges,\n   and\
    \ solutions for bringing software and firmware updates to IoT\n   devices.\n \
    \  The views and positions in this report are those of the workshop\n   participants\
    \ and do not necessarily reflect those of their employers/\n   sponsors, the authors\
    \ of this memo, nor the Internet Architecture\n   Board (IAB), under whose auspices\
    \ the workshop was held.\n   The IAB holds occasional workshops designed to consider\
    \ long-term\n   issues and strategies for the Internet, and to suggest future\n\
    \   directions for the Internet architecture.  The topics investigated\n   often\
    \ require coordinated efforts of different organizations and\n   industry bodies\
    \ to improve an identified problem.  One of the goals\n   of such workshops is\
    \ to assist with communication between relevant\n   organizations, companies,\
    \ and universities, especially when the\n   topics are partly out of the scope\
    \ for the Internet Engineering Task\n   Force (IETF).  This long-term planning\
    \ function of the IAB is\n   complementary to the ongoing engineering efforts\
    \ performed by working\n   groups of the IETF.\n   In his essay \"The Internet\
    \ of Things Is Wildly Insecure -- And Often\n   Unpatchable\" [BS14], Bruce Schneier\
    \ expressed concerns about the\n   status of software/firmware updates for IoT\
    \ devices.  IoT devices,\n   which have a reputation for being insecure from the\
    \ time they are\n   manufactured, are often expected to stay active in the field\
    \ for 10\n   or more years and to operate unattended with Internet connectivity.\n\
    \   Incorporating a software update mechanism to fix vulnerabilities, to\n   update\
    \ configuration settings and, to add new functionality as well,\n   is recommended\
    \ by security experts.  However, there are challenges\n   when using software\
    \ updates, as documented in the United States\n   Federal Trade Commission (FTC)\
    \ report titled \"internet of things:\n   Privacy & Security in a Connected World\"\
    \ [FTC] and in the Article 29\n   Data Protection Working Party document \"Opinion\
    \ 8/2014 on the on\n   [sic] Recent Developments on the Internet of Things\"[WP29].\n\
    \   Among the challenges in designing a basic software/firmware update\n   function\
    \ are:\n   -  Implementations of software update mechanisms may incorporate\n\
    \      vulnerabilities, becoming an attractive attack target.  See, for\n    \
    \  example, [OS14].\n   -  Operational challenges, such as the case of an expired\
    \ certificate\n      in a hub device [BB14].\n   -  Privacy issues if devices\
    \ \"call home\" often to check for updates.\n   -  A lack of incentives to distribute\
    \ software updates along the\n      value chain.\n   -  Questions such as the\
    \ following.  Who should be able to update\n      device software after normal\
    \ support stops?  When should an\n      alternate source of software updates take\
    \ over?\n   There are various (often proprietary) software update mechanisms in\n\
    \   use today, and the functionality of those varies significantly with\n   the\
    \ envisioned use of the IoT devices.  More powerful IoT devices,\n   such as those\
    \ running general purpose operating systems (like Linux),\n   can make use of\
    \ sophisticated software update mechanisms known from\n   the desktop and the\
    \ mobile world.  This workshop focused on more\n   constrained IoT devices that\
    \ often run dedicated real-time operating\n   systems or potentially no operating\
    \ system at all.\n   There is a real risk that many IoT devices will continue\
    \ to be\n   shipped without a solid software/firmware update mechanism in place.\n\
    \   Ideally, IoT software developers and product designers should be able\n  \
    \ to integrate standardized mechanisms that have experienced\n   substantial review\
    \ and where the documentation is available to the\n   public.\n   Hence, the IAB\
    \ decided to organize a workshop to reach out to\n   relevant stakeholders to\
    \ explore the state of the art and to identify\n   requirements and gaps.  In\
    \ particular, the call for position papers\n   asked for:\n   -  Protocol mechanisms\
    \ for distributing software updates.\n   -  Mechanisms for securing software updates.\n\
    \   -  Metadata about software/firmware packages.\n   -  Implications of operating\
    \ system and hardware design on the\n      software update mechanisms.\n   - \
    \ Installation of software updates (in context of software and\n      hardware\
    \ security of IoT devices).\n   -  Privacy implications of software update mechanisms.\n\
    \   -  Implications of device ownership and control for software update.\n   The\
    \ rest of the document is organized as follows: basic terminology\n   is provided\
    \ in Section 2, followed by a longer section discussing\n   requirements.  Subsequent\
    \ sections explore selected topics, such as\n   incentives and measurements in\
    \ more detail.  Most of the write-up\n   does raise more questions than it answers.\
    \  Nevertheless, we tried to\n   synthesize possible conclusions and offer a few\
    \ next steps.\n"
- title: 2.  Terminology
  contents:
  - "2.  Terminology\n   As is typical with people from different backgrounds, workshop\n\
    \   participants started the workshop with a discussions of terminology.\n   This\
    \ section is more intended to reflect those discussions than to\n   present canonical\
    \ definitions of terms.\n   Device Classes:  IoT devices come in various \"sizes\"\
    \ (such as size of\n      RAM or size of flash memory).  With these configurations,\
    \ devices\n      are limited in what they can support in terms of operating-system\n\
    \      features, cryptographic algorithms, and protocol stacks.  For this\n  \
    \    reason, the group differentiated two types of classes, namely ARM\n     \
    \ Cortex A-class/Intel Atom and Cortex M-class/Intel Quark types of\n      devices.\
    \  A-class devices are equipped with powerful processors\n      typically found\
    \ in set-top boxes and home routers.  The Raspberry\n      Pi is an example of\
    \ an A-class device that is capable of running a\n      regular desktop operating\
    \ system, such as Linux.  There are\n      differences between the Intel and the\
    \ ARM-based CPUs in terms of\n      architecture, microcode, and who is allowed\
    \ to update a Basic\n      Input/Output System (BIOS) (if available).  A detailed\
    \ discussion\n      of these hardware architectural differences were, however,\
    \ outside\n      the scope of the workshop.  The implication is that lower-end\n\
    \      microcontrollers have constraints that put restrictions on the\n      amount\
    \ of software that can be put on them.  While it is easy to\n      require support\
    \ of a wide range of features, those may not\n      necessarily fit on these devices.\n\
    \   Software Update and Firmware Update:  Based on the device classes, it\n  \
    \    was observed that regular operating systems come with\n      sophisticated\
    \ software update mechanisms (such as Red Hat Package\n      Manager (RPM) [RPM]\
    \ or pacman [PACMAN]) that make use of the\n      operating system to install\
    \ and run each application in a\n      compartmentalized fashion.  Firmware updates\
    \ typically do not\n      provide such a fine-grained granularity for software\
    \ updates and\n      instead distribute the entire binary image, which consists\
    \ of the\n      (often minimalistic) operating system and all applications.  While\n\
    \      the distinction between the mechanisms that A-class and M-class\n     \
    \ devices will typically use may get more fuzzy over time, most\n      M-class\
    \ devices use firmware updates while A-class devices use a\n      combination\
    \ of firmware and software updates (with firmware\n      updates being less frequent\
    \ operations).\n   Hitless Update:  A hitless update implies that the user experience\
    \ is\n      not \"hit\", i.e., it is not impacted.  It is possible to impact the\n\
    \      user experience when applying an update even when the device does\n   \
    \   not reboot (to obtain or apply said update).  If the update is\n      applied\
    \ when a user is not using a product and their service is\n      not impacted,\
    \ the update is \"hitless\".\n"
- title: 3.  Requirements and Questions Raised
  contents:
  - "3.  Requirements and Questions Raised\n   Workshop participants discussed requirements\
    \ and several of these\n   raised further questions.  As with the previous section,\
    \ we aim to\n   present the discussion as it was.\n   -  There may be a need to\
    \ be support partial (differential) updates\n      that do not require the entire\
    \ firmware image to be sent.  This\n      may mean that techniques like bsdiff\
    \ [BSDIFF] and courgette\n      [COURGETTE] are used but might also mean devices\
    \ supporting the\n      download of applications and libraries alone.  The latter\
    \ feature\n      may require dynamic linking and position independent code.  It\
    \ was\n      unclear whether position independent code should be recommended\n\
    \      for low-end IoT devices.\n   -  The relative importance of dynamic linkers\
    \ for low-end IoT devices\n      is unclear.  Some operating systems used with\
    \ M-class devices,\n      such as Contiki, provide support for a dynamic linker\
    \ according to\n      [OS-Support].  This could help to minimize the amount of\
    \ data\n      transmitted during updates since only the modified application or\n\
    \      library needs to be transmitted.\n   -  How should dependencies among various\
    \ software updates be handled?\n      These dependencies may include information\
    \ about the hardware\n      platform and configuration as well as other software\
    \ components\n      running on a system.  For firmware updates, the problem of\n\
    \      dependencies are often solved by the manufacturer or Original\n      Equipment\
    \ Manufacturer (OEM) rather than on the device itself.\n   -  Support for devices\
    \ with multiple microcontrollers may require an\n      architecture where one\
    \ microcontroller is responsible for\n      interacting with the update service\
    \ and then dispatching software\n      images to the attached microcontrollers\
    \ within its local realm.\n      The alternative of letting each microcontroller\
    \ interact with an\n      update service appeared less practical.\n   -  Support\
    \ may be required for devices with multiple owners/\n      stakeholders where\
    \ the question arises about who is authorized to\n      push a firmware/software\
    \ update.\n   -  Data origin authentication (DAO) was agreed to be required for\n\
    \      software updates.  Without DAO, updates simply become a perfect\n     \
    \ vulnerability.  It is, however, nontrivial to ensure that the\n      actual\
    \ trust relationships that exist are modeled by the DAO\n      mechanism.  For\
    \ some devices and deployment scenarios, any DAO\n      mechanism is onerous,\
    \ possibly to the point where it may be hard\n      to convince a device maker\
    \ to include the functionality.\n   -  Should digital signatures and encryption\
    \ for software updates be\n      recommended as a best current practice?  This\
    \ question\n      particularly raises the question about the use of symmetric\
    \ key\n      cryptography since not all low-end IoT devices are currently using\n\
    \      asymmetric crypto.\n   -  DAO is most commonly provided via digital signature\
    \ mechanisms,\n      but symmetric schemes could also be developed, though IETF\n\
    \      discussion of such mechanisms (for purposes less sensitive than\n     \
    \ software update) has proved significantly controversial.  The main\n      problem\
    \ seems to be that simple symmetric schemes only ensure that\n      the sender\
    \ is a member of a group, and they do not fully\n      authenticate a specific\
    \ sender.  And with a software update, we do\n      not want any (possibly compromised)\
    \ device to be able to\n      authenticate new software for all other similar\
    \ devices.\n   -  What are the firmware update signing key requirements?  Since\n\
    \      devices have a rather long lifetime, there has to be a way to\n      change\
    \ the signing key during the lifetime of the device.\n   -  Should a firmware\
    \ update mechanism support multiple signatures of\n      firmware images?  Multiple\
    \ signatures can come in two different\n      flavors, namely:\n         A single\
    \ firmware image may be signed by multiple different\n         parties.  In this\
    \ case, one could imagine an environment where\n         an OEM signs the software\
    \ it creates, but then the software is\n         again signed by the enterprise\
    \ that approves the distribution\n         within the company.  Other examples\
    \ include regulatory\n         signatures where the software for a medical device\
    \ may be\n         signed as approved by a certification body.\n         A software\
    \ image may contain libraries that are each signed by\n         their developers.\n\
    \      Is a device expected to verify the different types of signatures\n    \
    \  or is this a service provided by some unconstrained device?  This\n      raises\
    \ questions about who the IoT device should trust for what\n      and whether\
    \ transitive trust is acceptable for some types of\n      devices.\n   -  Are\
    \ applications from a range of sources allowed to run on a\n      device or only\
    \ those from the OEM?  If the device is a \"closed\"\n      device that only supports/runs\
    \ software from the OEM, then a\n      single signature may be sufficient.  In\
    \ a system that is more\n      \"open\", third-party applications may require\
    \ support of multiple\n      signatures.\n   -  There is a need for some form\
    \ of secure storage, at least for\n      those IoT devices that are exposed to\
    \ physical attacks.  This\n      includes at least the need to protect the integrity\
    \ of the public\n      key of the update service on the device (if signature-based\
    \ DAO is\n      in use).  The use of symmetric key cryptography requires improved\n\
    \      confidentiality protection (in addition to integrity protection).\n   -\
    \  Is there a need to allow the update infrastructure side to\n      authenticate\
    \ the IoT device before distributing an update?\n      Questions about the identifier\
    \ used for such an authentication\n      action were raised.  The idea of reusing\
    \ Media Access Control\n      (MAC) addresses lead to concerns about the significant\
    \ privacy\n      implications of such identifier reuse.\n   -  It is important\
    \ to minimize device/service downtime due to update\n      processing and to minimize\
    \ user interaction (e.g., car should not\n      distract the driver) (see \"Hitless\
    \ Update\" in Section 2).  While\n      it may not be possible to avoid all downtime,\
    \ there was agreement\n      that one ought to strive for \"no inappropriate\"\
    \ device downtime.\n      This means minimal downtime impacting the user/operation\
    \ of the\n      device.  The definition of \"downtime\" also depends on the use\n\
    \      case, with a smart light bulb, the device could be \"up\" if the\n    \
    \  light is still on, even if some advanced services are unavailable\n      for\
    \ a short time.  Whether an update can be done without rebooting\n      the device\
    \ depends on the software being installed, on the OS\n      architecture, and\
    \ potentially even on the hardware architecture.\n      The cost/benefit ratio\
    \ also plays a role.\n   -  It is desirable to minimize the time taken from the\
    \ start of the\n      update to when it is finished.  In some systems with many\
    \ devices\n      (e.g., industrial lighting), this can be a challenge if updates\n\
    \      need to be unicasted.\n   -  In some systems with multiple devices, it\
    \ can be a challenge to\n      ensure that all devices are at the same release\
    \ level, especially\n      if some devices are sleepy.  There are some systems\
    \ where ensuring\n      all relevant devices are at the same release level is\
    \ a hard\n      requirement.  In other cases, it is acceptable if devices converge\n\
    \      much more slowly to the current release level.\n   -  It ought not be possible\
    \ for a factory worker to compromise the\n      update process (e.g., copy signing\
    \ keys and install unauthorized\n      public keys/trust anchors) during the manufacturing\
    \ process.\n      There are typically two factories involved: the first factory\n\
    \      produces microcontrollers and other components and the second\n      factory\
    \ produces the complete product, such as a fridge.  This\n      fridge contains\
    \ many of the components previously manufactured.\n      Hence, the firmware of\
    \ components produced in the first stage may\n      be six months old when the\
    \ fridge leaves the factory.  One does\n      not want to install a firmware update\
    \ when the fridge boots the\n      first time.  For that time, the firmware update\
    \ happens already at\n      the end of the manufacturing process.\n   -  Should\
    \ devices have a recovery procedure when the device gets\n      compromised? \
    \ How is the compromise detected?\n   -  There was a bit of discussion about the\
    \ importance for IoT devices\n      to know the current time for the purpose of\
    \ checking certificate\n      validity.  For example, what does \"real-time clock\"\
    \ (RTC) actually\n      mean?  And what constitutes \"good enough\" time?  There\
    \ are,\n      however, cost, power, size, and environmental constraints that can\n\
    \      make the addition of a real-time clock to an IoT device complex:\n    \
    \  o  Cost: Battery- or supercap-backed RTC modules might be several\n       \
    \  times the cost of the rest of the bill of materials.\n      o  Size: The battery\
    \ and other components are often several times\n         larger than the rest\
    \ of the material.\n      o  Manufacturing: Some modules require an extra assembly\
    \ step,\n         because the battery could be damaged or explode at high\n  \
    \       temperatures during the reflow process.\n      o  Supply chain: Devices\
    \ containing fitted batteries need\n         additional supply-chain management\
    \ to account for storage\n         temperature and to avoid shipping aged devices.\n\
    \      o  Environmental: Real-time-clock modules are typically not rated\n   \
    \      at industrial temperature ranges.  Those that are have\n         extremely\
    \ reduced lifetime at high temperatures.\n      o  Lifetime: Some of these modules\
    \ last only a few years at the\n         top of their environmental range.\n \
    \     While a good solution is needed, it is not clear whether there is\n    \
    \  one true solution.  A recent proposal from Google called\n      \"Roughtime\"\
    \ [RT] may be worthwhile to explore.\n   -  How do devices learn about a firmware\
    \ update?  Push or Pull?  What\n      should be required functionality for a firmware\
    \ update protocol?\n   -  There is a need to find out whether a software update\
    \ was\n      successful.  In one discussed solution, the bootloader analyzes\n\
    \      the performance of the running image to determine which image to\n    \
    \  run (rather than just verifying the integrity of the received\n      image).\
    \  One of the key criteria is that the updated system is\n      able to make a\
    \ connection to the device management/software update\n      infrastructure. \
    \ As long as it is able to talk to the update\n      infrastructure, it can receive\
    \ another update.  As an alternative\n      perspective, the argument was made\
    \ that one needs to have a way to\n      update the system without having the\
    \ full system running.\n   -  Gateway requirements.  In some deployments, gateways\
    \ terminate the\n      IP-based protocol communication and use non-IP mechanisms\
    \ to\n      communicate with other microcontrollers, for example, within a\n \
    \     car.  The gateway in such a system is the endpoint of the IP\n      communication.\
    \  The group had mixed feelings about the use of\n      gateways versus the use\
    \ of IP communication to every\n      microcontroller.  Participants argued that\
    \ there is a lack of\n      awareness of IPv6 header compression (with the IPv6\
    \ over Low-Power\n      Wireless Personal Area Network (6LoWPAN) standards) and\
    \ of the\n      possible benefits of IPv6 in those environments in terms of\n\
    \      lowering the complexity of the overall system.\n   -  The amount of energy\
    \ consumed due to software update needs to be\n      minimized.  For example,\
    \ awakening a sleepy device regularly only\n      to check for new software would\
    \ seem wasteful if the device cannot\n      feasibly be exploited while asleep.\
    \  However, the trade-off is\n      that once the device awakens with old software,\
    \ there may be a\n      window of vulnerability if some relevant exploit has been\n\
    \      discovered.\n   -  The amount of storage required for update ought to be\
    \ minimized\n      and can sometimes be significant.  However, there are also\n\
    \      benefits to schemes that store two or three different software\n      images\
    \ for robustness, e.g., if one has space for separate current\n      last-known-good\
    \ and being-updated images, then devices can better\n      survive the buggy occasional\
    \ updates that are also inevitable.\n   Which of the features discussed in the\
    \ list above are nice to have?\n   Which are required?  Not all of these are required\
    \ to achieve\n   improvement.  Which are most important?\n   Among the participants,\
    \ there was consensus that supporting\n   signatures (for integrity and authentication)\
    \ of the firmware image\n   itself and the need for partial updates were seen\
    \ as important.\n   However, there were also concerns regarding the performance\n\
    \   implications, since certain device categories may not utilize public\n   key\
    \ cryptography at all; hence, only a symmetric key approach seems\n   viable,\
    \ unless some other scheme such as a hash-based signature\n   became practical\
    \ (they currently aren't, due to signature size).\n   This aspect raised concerns\
    \ and triggered a discussion around the use\n   of device management infrastructure,\
    \ similar to Kerberos, that\n   manages keys and distributes them to the appropriate\
    \ parties.  As\n   such, in this setup, there could be a unique key shared with\
    \ the key\n   distribution center; but for use with specific services (such as\
    \ a\n   software update service), a fresh and unique secret would be\n   distributed.\n\
    \   In addition to the requirements for the end devices, there are also\n   infrastructure-related\
    \ requirements.  The infrastructure may consist\n   of servers in the local network\
    \ and/or various servers deployed on\n   the Internet.  It may also consist of\
    \ some application-layer\n   gateways.  The potential benefits of having such\
    \ a local server might\n   include:\n   -  The local server acting for neighboring\
    \ nodes.  For example, in a\n      vehicle one microcontroller can process all\
    \ firmware updates and\n      redistribute the relevant parts of those to interconnected\n\
    \      microcontrollers.\n   -  Local infrastructure could perform some digital\
    \ signature checks\n      on behalf of the devices, e.g., certificate-revocation\
    \ checking.\n   -  Local multicast can enable transmission of the same update\
    \ to many\n      devices.\n   -  Local servers can hide complexity associated\
    \ with Network Address\n      Translation (NAT) and firewalls from the device.\n\
    \   Another point related to local infrastructure is that since many IoT\n   devices\
    \ will not be (directly) connected to the Internet, but only\n   through a gateway,\
    \ there may in any case be a need to develop a\n   software/firmware update mechanism\
    \ that works in environments where\n   no end-to-end Internet connectivity exists.\n\
    \   Some current firmware update schemes need to identify devices.\n   Different\
    \ design approaches are possible.\n   -  In an extreme form in one case, the decision\
    \ about updating a\n      device is made by the infrastructure based on the unique\
    \ device\n      identification.  The operator of the firmware update\n      infrastructure\
    \ knows about the hardware and software requirements\n      for the IoT devices,\
    \ knows about the policy for updating the\n      device, etc.  The device itself\
    \ is provisioned with credentials so\n      that it can verify a firmware update\
    \ coming from an authorized\n      device.\n   -  In another extreme, the device\
    \ has knowledge about the software\n      and hardware configuration and possible\
    \ dependencies.  It consults\n      software repositories to obtain those software\
    \ packages that are\n      most appropriate.  Verifying the authenticity of the\
    \ software\n      packages/firmware images will still be required.\n   Hence,\
    \ in some deployed software update mechanisms there is no desire\n   for the device\
    \ to be identified beyond the need to exchange\n   information about the most\
    \ recent software versions.  For other\n   devices, it is seen as important to\
    \ identify the device itself in\n   order to provide the appropriate firmware\
    \ image/software packages.\n   Related to device identification, various privacy\
    \ concerns arise,\n   such as the need to determine what information is provided\
    \ to whom\n   and the uses to which this information is put.  For IoT devices\
    \ where\n   there is a close relationship to an individual (see [RFC6973]),\n\
    \   privacy concerns are likely higher than for devices where such a\n   relationship\
    \ does not exist (e.g., a sensor measuring concrete).  The\n   software/firmware\
    \ update mechanism should, however, not make the\n   privacy situation of IoT\
    \ devices worse.  The proposal from the group\n   was to introduce a minimal requirement\
    \ of not sending any new\n   identifiers over an unencrypted channel as part of\
    \ an update\n   protocol.\n   However, software updates will provide yet another\
    \ venue in which the\n   tension between those advocating better privacy and those\
    \ seeking to\n   monetize information will play out.  It is in the nature of software\n\
    \   update that it requires devices to sometimes \"call home\" and such\n   interactions\
    \ provide fertile ground for monetization.\n"
- title: 4.  Authorizing a Software/Firmware Update
  contents:
  - "4.  Authorizing a Software/Firmware Update\n   There were quite a few points\
    \ revolving around authorization:\n   -  Who can accept or reject an update? \
    \ Is it the owner of the\n      device, the user, or both?  The user may not necessarily\
    \ be the\n      owner.\n   -  With products that fall under a regulatory structure,\
    \ such as\n      healthcare, you don't want firmware other than what has been\n\
    \      accredited.\n   -  In some cases, it will be very difficult for a firmware\
    \ update\n      system to communicate to users that an update is available.  Doing\n\
    \      so may require tracking the device and its status with regard to\n    \
    \  the installed firmware/software, with all the privacy downsides if\n      such\
    \ tracking is badly done.\n   -  Not all updates are the same.  Security updates\
    \ are often treated\n      differently compared to feature updates, and the authorization\
    \ for\n      these may differ.\n   -  Some people may choose to decline updates,\
    \ often on the basis that\n      their system is currently stable, but also possibly\
    \ due to\n      concerns about unwanted changes, such as the HP printer firmware\n\
    \      update pushed in March 2016 [HP-Firmware] that turned off features\n  \
    \    that end users liked.\n"
- title: 5.  End-of-Support
  contents:
  - "5.  End-of-Support\n   There was quite a bit of discussion about end-of-support\
    \ for\n   products/devices and how to handle that.\n   -  How should end-of-support\
    \ or end-of-features be treated?  Devices\n      are often deployed for 10+ years\
    \ (or even longer in some\n      verticals).  Device makers may not want or be\
    \ able to support\n      software and services for such an extended period of\
    \ time.  Will\n      these devices stop working after a certain, previously unannounced\n\
    \      period of time, such as Eye-Fi cards [EYEFI]?\n   -  There will be a broad\
    \ range of device makers involved in IoT, who\n      may differ substantially\
    \ in terms of how well they can handle the\n      full device life cycle.  Some\
    \ will be large commercial enterprises\n      that are used to dealing with long\
    \ device lifetimes, whereas\n      others may be very small commercial entities\
    \ where the device\n      lifetime may be longer than the company lifetime.  Yet\
    \ other\n      devices may be the result of open-source activities that prosper\n\
    \      or flounder.  The problem of end-of-support arises in all these\n     \
    \ cases, though feasible solutions for software update may\n      substantially\
    \ differ.  In some cases, device makers may not be\n      willing to continue\
    \ to update devices, for example, due to a\n      change in business strategies\
    \ caused by a merger.  In yet other\n      cases, a company may have gone bankrupt.\n\
    \   -  While there are many legal, ethical, and business-related\n      questions,\
    \ can we technically enable transfer of device service to\n      another provider?\
    \  Could there even be business models for\n      entities that take over device\
    \ updates for original device makers\n      that no longer wish to handle software\
    \ update?\n   -  The release of code, as it was done with the Little Printer\n\
    \      manufactured and developed by a company called \"Berg\"\n      [LittlePrinter],\
    \ could provide a useful example.  While the\n      community took over the support\
    \ in that case, this can hardly be\n      assumed in all cases.  Just releasing\
    \ the source code for a device\n      will not necessarily motivate others to\
    \ work on the code, to fix\n      bugs, or to maintain a service.  Nevertheless,\
    \ escrowing code so\n      that the community can take it over if a company fails\
    \ is one\n      possible option.\n   -  The situation gets more complex when the\
    \ device has security\n      mechanisms to ensure that only selected parties are\
    \ allowed to\n      update the device (which is really a basic requirement for\
    \ any\n      secure software update).  In this case, private signing keys (or\n\
    \      similar) may need to be made available as well, which could\n      introduce\
    \ security problems for already-deployed software.  In the\n      best case, it\
    \ changes assumptions made about the trust model and\n      about who can submit\
    \ updates.\n   -  How should deployed devices behave when they are end-of-support\n\
    \      and support ends?  Many of them may still function normally, but\n    \
    \  others may fail due to the absence of cloud infrastructure\n      services.\
    \  Some products are probably expected to fail safely,\n      similarly to a smoke\
    \ alarm that makes a loud noise when the\n      battery becomes empty.  Cell phones\
    \ without a contract can, in\n      some countries, still be used for emergency\
    \ services (although at\n      the expense of society due to untraceable hoax\
    \ calls), as\n      discussed in RFC 7406 [RFC7406].\n   The recommendation that\
    \ can be provided to device makers and users is\n   to think about the end-of-support\
    \ and end-of-support scenarios ahead\n   of time and plan for those.  While device\
    \ makers rarely want to\n   consider what happens if their business fails, it\
    \ is definitely\n   legitimate to consider scenarios where they are hugely successful\
    \ and\n   want to evolve a product line instead of supporting previously sold\n\
    \   products forever.  Maybe there is also value in subscription-based\n   models\
    \ where product and device support is only provided as long as\n   the subscription\
    \ is paid.  Without a subscription, the product is\n   deactivated and cannot\
    \ pose a threat to the Internet at large.\n"
- title: 6.  Incentives
  contents:
  - "6.  Incentives\n   Workshop participants also discussed how to create incentives\
    \ for\n   companies to ship software updates, which is particularly important\n\
    \   for products that will be deployed in the market for a long time.  It\n  \
    \ is also further complicated by complex value chains.\n   -  Companies shipping\
    \ software updates benefit from improved\n      security.  Their devices are less\
    \ likely to be abused as a vector\n      to launch other attacks, whether on their\
    \ own networks or (as part\n      of a botnet) on other Internet hosts.  This\
    \ clearly creates an\n      incentive to support and use software updates.\n \
    \  -  On the other hand, updates can also break things.  The negative\n      customer\
    \ experience can be due to service interruptions during or\n      after the update\
    \ process but can also result from bad experience\n      from deliberate changes\
    \ introduced as part of an update -- such as\n      a feature that is not available\
    \ anymore, or a \"bug\" that another\n      service has relied upon being fixed.\n\
    \   -  For most classes of device, there does not seem to be a regulatory\n  \
    \    requirement to report or fix vulnerabilities, similar to data-\n      breach-notification\
    \ laws.\n   -  Subscription models for device management were suggested so that\n\
    \      companies providing the service have an economic interest in\n      keeping\
    \ devices online (and updated for that).\n"
- title: 7.  Measurements and Analysis
  contents:
  - "7.  Measurements and Analysis\n   From a security point of view, it is important\
    \ to know what devices\n   are out there and what version of software they run.\
    \  One workshop\n   paper [PLONKA] reported measurements that were initially done\
    \ on\n   buggy devices first distributed in 2003, and that were still\n   detectable\
    \ in significant numbers just before the workshop 13 years\n   later.  As such,\
    \ in addition to the firmware update mechanism,\n   companies have been offering\
    \ device management solutions that allow\n   OEMs to keep track of their devices.\
    \  Tracking these devices and\n   their status is still challenging since some\
    \ devices are only\n   connected irregularly or are only turned on when needed\
    \ (such as a\n   hockey alarm that is only turned on before a match).\n   Various\
    \ stakeholders have a justified interest in knowing something\n   about deployed\
    \ devices.  For example:\n   -  Manufacturers and other players in the supply\
    \ chain are interested\n      to know what devices are out there, how many have\
    \ been sold, and\n      what devices are out there but have not been sold.  This\
    \ could\n      help to understand which firmware versions to support and for how\n\
    \      long.\n   -  Device users, owners, and customers like these may want to\
    \ know\n      what devices are installed over a longer period of time, what\n\
    \      software/firmware version is the device running, what is the\n      uptime\
    \ of each of these devices, what types of faults have\n      occurred, etc.  Forgotten\
    \ devices may pose problems, particularly\n      if they (have the potential to)\
    \ behave badly.\n   -  To an extent, network operators offering services to device\
    \ owners\n      and other actors may also need similar information, for example,\n\
    \      to control botnets.\n   -  Researchers doing analysis on the state of the\
    \ Internet ecosystem\n      (such as what protocols are being used, how much data\
    \ IoT devices\n      generate, etc.,) need measurements for their work.\n   There\
    \ can easily be some invasiveness in approaches to acquiring such\n   measurements.\
    \  The challenge was put forward to find ways to create\n   measurement infrastructures\
    \ that are privacy preserving.  Arnar\n   Birgisson noted that there are privacy-preserving\
    \ statistical\n   techniques, such as RAPPOR [RAPPOR], and Ned Smith added that\n\
    \   techniques like Intel's Enhanced Privacy ID (EPID) may play a role in\n  \
    \ maintaining some level of anonymity for the IoT device (owners) while\n   also\
    \ enabling measurement.  It seemed clear that naive approaches to\n   measurement\
    \ (e.g., where devices are willing to expose a unique\n   identifier to anyone\
    \ on request) are unlikely to prove sufficient.\n"
- title: 8.  Firmware Distribution in Mesh Networks
  contents:
  - "8.  Firmware Distribution in Mesh Networks\n   There was some discussion of the\
    \ requirements for mesh-based\n   networks, mainly relating to industrial lighting.\
    \  In these networks,\n   software update can impose unacceptable performance\
    \ burdens,\n   especially if there are many devices, some of which may be sleepy.\n\
    \   The workshop discussed whether some forms of multicast (perhaps not\n   IP\
    \ multicast) would be needed to provide acceptable solutions for\n   software\
    \ update in such cases.  It was not clear at which layer a\n   multicast solution\
    \ might be effective in such cases, though there did\n   not seem to be any clearly\
    \ applicable standards-based approach that\n   was available at the time of the\
    \ workshop.\n"
- title: 9.  Compromised Devices
  contents:
  - "9.  Compromised Devices\n   There was recognition that there are, and perhaps\
    \ always will be,\n   large numbers of devices that can be, or have been, compromised.\n\
    \   While updating these can mitigate problems, there will always be new\n   devices\
    \ added to networks that cannot be updated (for various\n   reasons); so the question\
    \ of what, if anything, to do about\n   compromised devices was discussed.\n \
    \  -  There may be value if it were possible to single out a device that\n   \
    \   shows faulty behavior or has been compromised, and to shut it down\n     \
    \ in some sense.\n   -  Prior work in the IETF on Network Endpoint Assessment\
    \ (NEA) [NEA]\n      allowed assessing the \"posture\" of devices.  Posture refers\
    \ to the\n      hardware or software configuration of a device and may include\n\
    \      knowledge that the software installed is up to date.  The obtained\n  \
    \    information can then be used by some network infrastructure to\n      create\
    \ a quarantined region network around the device.\n   -  RFC 6561 [RFC6561] describes\
    \ one scheme for an ISP to send\n      \"signals\" to customers about hosts (usually\
    \ those that are part of\n      a botnet or generating spam) in their home network.\n\
    \   -  Neither RFC 6561 nor NEA has found widespread deployment.  Whether\n  \
    \    such mechanisms can be more successful in the IoT environment has\n     \
    \ yet to be studied.\n   The conclusion of the discussion at the workshop itself\
    \ was that\n   there is some interest in identifying and stopping misbehaving\n\
    \   devices, but the actual solution mechanisms are unclear.\n"
- title: 10.  Miscellaneous Points
  contents:
  - "10.  Miscellaneous Points\n   There were a number of points discussed at the\
    \ workshop that don't\n   neatly fit under the above headings but that are worth\
    \ recording.\n   Those include:\n   -  Complex questions can arise when considering\
    \ the impact of the\n      lack of updates on other devices, other persons, or\
    \ the public in\n      general.  If I don't update my device, and it is used to\
    \ attack a\n      random host on the Internet, but at no apparent cost to me,\
    \ then\n      what incentive do I have to do updates that would have protected\n\
    \      that random host?  What incentive has my device's vendor to have\n    \
    \  provided those updates in advance?  An example of such a case can\n      be\
    \ found in DDoS attacks from IoT devices, such as printers\n      [SNMP-DDOS]\
    \ and cameras [DDOS-KREBS].\n   -  With some IoT devices, there are many stakeholders\
    \ contributing to\n      the end product (e.g., contributing different subsystems).\n\
    \      Ensuring that vulnerabilities are fixed and software/firmware\n      updates\
    \ are communicated through the value chain is known to be\n      difficult, as\
    \ demonstrated in [OS14].\n   -  What about forgotten devices?  There are many\
    \ such, and there will\n      be more.  Even though they are forgotten, such devices\
    \ may be\n      useless consumers of electricity, or they may be part of some\n\
    \      critical system.\n   -  Can we determine whether an update impacts other\
    \ devices in the\n      Internet?  Updates to one device can have unintended impact\
    \ on\n      other devices that depend on it.  This can have cascading effects\n\
    \      if we are not careful.  Changing the format of the output of a\n      sensor\
    \ could have cascading impacts, e.g., if some actuator reacts\n      to the presence/absence\
    \ of that sensor's data.\n   -  How should a device behave when it is running\
    \ out-of-date\n      software?  The example of a smoke alarm was mentioned.  We\
    \ don't\n      want 100 devices in a living room to start beeping when their\n\
    \      batteries run low or when they cannot communicate with the cloud.\n   \
    \   But are devices supposed to simply stop working?\n   -  The IETF has published\
    \ a specification that uses the Cryptographic\n      Message Syntax (CMS) to protect\
    \ firmware packages, as described in\n      RFC 4108 [RFC4108], which also contains\
    \ metadata to describe the\n      firmware image itself.  During the workshop,\
    \ the question was\n      raised whether a solution will, in the future, be needed\
    \ that is\n      post-quantum secure.  A post-quantum cryptosystem is a system\
    \ that\n      is secure against quantum computers that have more than a trivial\n\
    \      number of quantum bits.  It is open to conjecture whether it is\n     \
    \ feasible to build such a machine, but current signature algorithms\n      are\
    \ known not to be post-quantum secure.  This would require\n      introducing\
    \ technologies like the Hash-based Merkle Tree Signature\n      (MTS) [HOUSLEY],\
    \ which was presented and discussed at the\n      workshop.  The downsides of\
    \ such solutions are their novelty and,\n      for these use cases, the fairly\
    \ large signature or key sizes\n      involved; e.g., depending on the parameters,\
    \ a signature could\n      easily have a size of 5-10 KiB [HASHSIG] [XMSS].  While\
    \ it is\n      likely that post-quantum secure signature algorithms will be\n\
    \      needed for software updates at some point in time, it may be the\n    \
    \  case that such algorithms will be needed sooner for services\n      requiring\
    \ long-term confidentiality, (e.g., using Transport Layer\n      Security (TLS)),\
    \ so it was not clear that this application would\n      be a first-mover in terms\
    \ of post-quantum security.\n   -  Many devices that use certificates do not check\
    \ the revocation\n      status of certificates, even though extensions like Online\n\
    \      Certificate Status Protocol (OCSP) stapling exists [RFC6961] and\n    \
    \  is increasingly deployed with Web browsers.  The workshop\n      participants\
    \ did not reach a conclusion regarding the\n      recommendations of certificate\
    \ revocation checking, although the\n      importance has been recognized.  The\
    \ reluctance regarding\n      deploying certificate revocation deserves further\
    \ investigation.\n"
- title: 11.  Tentative Conclusions and Next Steps
  contents:
  - "11.  Tentative Conclusions and Next Steps\n   The workshop participants discussed\
    \ some tentative conclusions and\n   possible next steps:\n   -  There was strong\
    \ agreement that having some standardized secure\n      (authorized and authenticated)\
    \ software update would be an\n      improvement over having none.\n   -  It would\
    \ be valuable to find agreement on the right scope for a\n      standardized software/firmware\
    \ update mechanism.  It is not clear\n      that an entire update system can or\
    \ should be standardized, but\n      there may be some aspects of such solutions\
    \ where standards would\n      be beneficial, e.g., (meta-)data formats and/or\
    \ protocols for\n      distributing firmware updates.  More discussion is needed\
    \ to\n      identify which parts of the problem space could benefit from\n   \
    \   standardization.\n   -  It will be useful to investigate solutions to install\
    \ updates with\n      no operational interruption as well as ways to distribute\
    \ software\n      updates without disrupting network operations (specifically,\
    \ in\n      low-power wireless networks), including the development of a\n   \
    \   multicast transfer mechanism (with appropriate security).\n   -  There will\
    \ almost certainly be a need for a way to transfer\n      authority/responsibility\
    \ for updates, particularly considering\n      end-of-support cases.  This is\
    \ very close to calling for a\n      standard way to \"root\" devices as a feature\
    \ of all devices.\n   -  We would benefit from documentation of proofs-of-concept\
    \ of\n      software/firmware updates for constrained devices on different\n \
    \     operating system architectures.  The IETF Light-Weight\n      Implementation\
    \ Guidance (lwig) Working Group may be a good venue\n      for such documents.\n"
- title: 12.  Security Considerations
  contents:
  - "12.  Security Considerations\n   This document summarizes an IAB workshop on\
    \ software/firmware updates\n   and the entire content is, therefore, security\
    \ related.\n   Standardizing and deploying a software/firmware update mechanism\
    \ for\n   use with IoT devices could help fix security vulnerabilities faster\n\
    \   and, in some cases, be the only via to get vulnerability patched at\n   all.\n"
- title: 13.  IANA Considerations
  contents:
  - "13.  IANA Considerations\n   This document does not require any IANA actions.\n"
- title: 14.  Informative References
  contents:
  - "14.  Informative References\n   [BB14]     Barrett, B., \"Winks Outage Shows\
    \ Us How Frustrating Smart\n              Homes Could Be\", April 2014,\n    \
    \          <http://www.wired.com/2015/04/smart-home-headaches/>.\n   [BS14]  \
    \   Schneier, B., \"The Internet of Things Is Wildly Insecure\n              --\
    \ And Often Unpatchable\", January 2014,\n              <https://www.schneier.com/essays/archives/2014/01/\n\
    \              the_internet_of_thin.html>.\n   [BSDIFF]   Percival, C., \"Matching\
    \ with Mismatches and Assorted\n              Applications\", September 2016,\n\
    \              <https://ora.ox.ac.uk/objects/\n              uuid:4f0d53cc-fb9f-4246-a835-3c8734eba735/datastreams/\n\
    \              THESIS01>.\n   [COURGETTE]\n              Google, \"Software Updates:\
    \ Courgette\", September 2016,\n              <https://www.chromium.org/developers/design-documents/\n\
    \              software-updates-courgette>.\n   [DDOS-KREBS]\n              Goodin,\
    \ D., \"Record-breaking DDoS reportedly delivered by\n              >145k hacked\
    \ cameras\", September 2016,\n              <http://arstechnica.com/security/2016/09/botnet-of-145k-\n\
    \              cameras-reportedly-deliver-internets-biggest-ddos-ever/>.\n   [EYEFI]\
    \    Aldred, J., \"Eye-Fi to Drop Suport for Some Cards. They\n              Will\
    \ 'Magically' Stop Working on September 16, 2016\", June\n              2016,\
    \ <http://www.diyphotography.net/eyefi-drop-support-\n              cards-will-magically-stop-working-september-16-2016/>.\n\
    \   [FTC]      Federal Trade Commission, \"FTC Report on Internet of\n       \
    \       Things Urges Companies to Adopt Best Practices to Address\n          \
    \    Consumer Privacy and Security Risks\", January 2015,\n              <https://www.ftc.gov/system/files/documents/reports/\n\
    \              federal-trade-commission-staff-report-november-2013-\n        \
    \      workshop-entitled-internet-things-\n              privacy/150127iotrpt.pdf>.\n\
    \   [HASHSIG]  Langley, A., \"Hash based signatures\", July 2013,\n          \
    \    <https://www.imperialviolet.org/2013/07/18/hashsig.html>.\n   [HOUSLEY] \
    \ Housley, R., \"Use of the Hash-based Merkle Tree Signature\n              (MTS)\
    \ Algorithm in the Cryptographic Message Syntax\n              (CMS)\", Work in\
    \ Progress, draft-housley-cms-mts-hash-\n              sig-07, June 2017.\n  \
    \ [HP-Firmware]\n              BoingBoing, \"HP detonates its timebomb: printers\
    \ stop\n              accepting third party ink en masse\", September 2016,\n\
    \              <http://boingboing.net/2016/09/19/\n              hp-detonates-its-timebomb-pri.html>.\n\
    \   [IoTSU]    IAB, \"Internet of Things Software Update Workshop (IoTSU)\n  \
    \            2016\", June 2016,\n              <https://www.iab.org/activities/workshops/iotsu/>.\n\
    \   [LittlePrinter]\n              Berg, \"The future of Little Printer\", September\
    \ 2014,\n              <http://littleprinterblog.tumblr.com/post/97047976103/\n\
    \              the-future-of-little-printer>.\n   [NEA]      IETF, \"Network Endpoint\
    \ Assessment (nea) Concluded WG\",\n              October 2016,\n            \
    \  <https://datatracker.ietf.org/wg/nea/charter/>.\n   [OS-Support]\n        \
    \      Dong, W., Chen, C., Liu, X., and J. Bu, \"Providing OS\n              Support\
    \ for Wireless Sensor Networks: Challenges and\n              Approaches\", DOI\
    \ 10.1109/SURV.2010.032610.00045, May 2010,\n              <http://ieeexplore.ieee.org/stamp/\n\
    \              stamp.jsp?arnumber=5462978>.\n   [OS14]     Oppenheim, L. and S.\
    \ Tal, \"Too Many Cooks: Exploiting the\n              Internet of TR-069 Things\"\
    , December 2014,\n              <http://mis.fortunecook.ie/\n              too-many-cooks-exploiting-tr069_tal-oppenheim_31c3.pdf>.\n\
    \   [PACMAN]   \"pacman\", 2016, <https://www.archlinux.org/pacman/>.\n   [PLONKA]\
    \   Plonka, D. and E. Boschi, \"The Internet of Things Old and\n             \
    \ Unmanaged\", June 2016,\n              <https://down.dsg.cs.tcd.ie/iotsu/subs/\n\
    \              IoTSU_2016_paper_25.pdf>.\n   [RAPPOR]   Erlingsson, U., Pihur,\
    \ V., and A. Korolova, \"RAPPOR\",\n              DOI 10.1145/2660267.2660348,\
    \ July 2014,\n              <http://dl.acm.org/citation.cfm?doid=2660267.2660348>.\n\
    \   [RFC4108]  Housley, R., \"Using Cryptographic Message Syntax (CMS) to\n  \
    \            Protect Firmware Packages\", RFC 4108,\n              DOI 10.17487/RFC4108,\
    \ August 2005,\n              <https://www.rfc-editor.org/info/rfc4108>.\n   [RFC6561]\
    \  Livingood, J., Mody, N., and M. O'Reirdan,\n              \"Recommendations\
    \ for the Remediation of Bots in ISP\n              Networks\", RFC 6561, DOI\
    \ 10.17487/RFC6561, March 2012,\n              <https://www.rfc-editor.org/info/rfc6561>.\n\
    \   [RFC6961]  Pettersen, Y., \"The Transport Layer Security (TLS)\n         \
    \     Multiple Certificate Status Request Extension\", RFC 6961,\n           \
    \   DOI 10.17487/RFC6961, June 2013,\n              <https://www.rfc-editor.org/info/rfc6961>.\n\
    \   [RFC6973]  Cooper, A., Tschofenig, H., Aboba, B., Peterson, J.,\n        \
    \      Morris, J., Hansen, M., and R. Smith, \"Privacy\n              Considerations\
    \ for Internet Protocols\", RFC 6973,\n              DOI 10.17487/RFC6973, July\
    \ 2013,\n              <https://www.rfc-editor.org/info/rfc6973>.\n   [RFC7406]\
    \  Schulzrinne, H., McCann, S., Bajko, G., Tschofenig, H.,\n              and\
    \ D. Kroeselberg, \"Extensions to the Emergency Services\n              Architecture\
    \ for Dealing With Unauthenticated and\n              Unauthorized Devices\",\
    \ RFC 7406, DOI 10.17487/RFC7406,\n              December 2014, <https://www.rfc-editor.org/info/rfc7406>.\n\
    \   [RPM]      \"Red Hat Package Manager (RPM)\", 2016, <http://rpm.org/>.\n \
    \  [RT]       Google, \"Roughtime\", September 2016,\n              <https://roughtime.googlesource.com/roughtime>.\n\
    \   [SNMP-DDOS]\n              BITAG, \"SNMP Reflected Amplification DDoS Attack\n\
    \              Mitigation\", August 2012,\n              <https://www.bitag.org/documents/\n\
    \              SNMP-Reflected-Amplification-DDoS-Attack-Mitigation.pdf>.\n   [WP29]\
    \     Article 29 Data Protection Working Party, \"Opinion 8/2014\n           \
    \   on the on Recent Developments on the Internet of Things\",\n             \
    \ 14/EN, WP 223, September 2014,\n              <http://ec.europa.eu/justice/data-protection/article-\n\
    \              29/documentation/opinion-recommendation/files/2014/\n         \
    \     wp223_en.pdf>.\n   [XMSS]     Huelsing, A., Butin, D., Gazdag, S., Rijneveld,\
    \ J., and A.\n              Mohaisen, \"XMSS: Extended Hash-Based Signatures\"\
    , Work in\n              Progress, draft-irtf-cfrg-xmss-hash-based-signatures-10,\n\
    \              July 2017.\n"
- title: Appendix A.  Program Committee
  contents:
  - "Appendix A.  Program Committee\n   The following individuals helped to organize\
    \ the workshop: Jari\n   Arkko, Arnar Birgisson, Carsten Bormann, Stephen Farrell,\
    \ Russ\n   Housley, Ned Smith, Robert Sparks, and Hannes Tschofenig.\n"
- title: Appendix B.  Accepted Position Papers
  contents:
  - "Appendix B.  Accepted Position Papers\n   The list of accepted position papers\
    \ is below.  Links to these, and\n   to the workshop agenda and raw minutes are\
    \ accessible at:\n   <https://down.dsg.cs.tcd.ie/iotsu/>.\n   -  R. Housley, \"\
    Position Paper for Internet of Things Software Update\n      Workshop (IoTSU)\"\
    \n   -  D. Thomas and A. Beresford, \"Incentivising software updates\"\n   - \
    \ L. Zappaterra and E. Dijk, \"Software Updates for Wireless\n      Connected\
    \ Lighting Systems: requirements, challenges and\n      recommendations\"\n  \
    \ -  M. Orehek and A. Zugenmaier, \"Updates in IoT are more than just\n      one\
    \ iota\"\n   -  D. Plonka and E. Boschi, \"The Internet of Things Old and\n  \
    \    Unmanaged\"\n   -  D. Bosschaert, \"Using OSGi for an extensible, updatable\
    \ and future\n      proof IoT\"\n   -  A. Padilla, E. Baccelli, T. Eichinger,\
    \ and K. Schleiser, \"The\n      Future of IoT Software Must be Updated\"\n  \
    \ -  T. Hardie, \"Software Update in a multi-system Internet of Things\"\n   -\
    \  R. Sparks and B. Campbell, \"Avoiding the Obsolete-Thing Event\n      Horizon\"\
    \n   -  J. Karkov, \"SW update for Long lived products\"\n   -  S. Farrell, \"\
    Some Software Update Requirements\"\n   -  S. Chakrabarti, \"Internet Of Things\
    \ Software Update Challenges:\n      Ownership, Software Security & Services\"\
    \n   -  M. Kovatsch, A. Scholz, and J. Hund, \"Why Software Updates Are\n    \
    \  More Than a Security Issue: Challenges for IETF CoRE and the W3C\n      Web\
    \ of Things\"\n   -  A. Grau, \"Secure Software Updates for IoT Devices\"\n  \
    \ -  Birr-Pixton, \"Electric Imp's experiences of upgrading half a\n      million\
    \ embedded devices\"\n   -  Y. Zhang, J. Yin, C. Groves, and M. Patel, \"oneM2M\
    \ device\n      management and software/firmware update\"\n   -  E. Smith, M.\
    \ Stitt, R. Ensink, and K. Jager, \"User Experience (UX)\n      Centric IoT Software\
    \ Update\"\n   -  J.-P. Fassino, E.A. Moktad, and J.-M. Brun, \"Secure Firmware\n\
    \      Update in Schneider Electric IOT-enabled offers\"\n   -  M. Orehek, \"\
    Summary of existing firmware update strategies for\n      deeply embedded systems\"\
    \n   -  N. Smith, \"Toward A Common Modeling Standard for Software Update\n  \
    \    and IoT Objects\"\n   -  S. Schmidt, M. Tausig, M. Hudler, and G. Simhandl,\
    \ \"Secure\n      Firmware Update Over the Air in the Internet of Things Focusing\
    \ on\n      Flexibility and Feasibility\"\n   -  A. Adomnicai, J. Fournier, L.\
    \ Masson, and A. Tria, \"How careful\n      should we be when implementing cryptography\
    \ for software update\n      mechanisms in the IoT?\"\n   -  V. Prevelakis and\
    \ H. Hamad, \"Controlling Change via Policy\n      Contracts\"\n   -  H. Birkholz,\
    \ N. Cam-Winget, and C. Bormann, \"IoT Software Updates\n      need Security Automation\"\
    \n   -  R. Bisewski, \"Comparative Analysis of Distributed Repository\n      Update\
    \ Methodology and How CoAP-like Update Methods Could\n      Alleviate Internet\
    \ Strain for Devices that Constitute the Internet\n      of Things\"\n   -  J.\
    \ Arrko, \"Architectural Considerations with Smart Objects and\n      Software\
    \ Updates\"\n   -  J. Jimenez and M. Ocak, \"Software Update Experiences for IoT\"\
    \n   -  H. Tschofenig, \"Software and Firmware Updates with the OMA LWM2M\n  \
    \    Protocol\"\n"
- title: Appendix C.  List of Participants
  contents:
  - "Appendix C.  List of Participants\n   -  Arnar Birgisson, Google\n   -  Alan\
    \ Grau, IconLabs\n   -  Alexandre Adomnicai, Trusted Objects\n   -  Alf Zugenmaier,\
    \ Munich University of Applied Science\n   -  Ben Campbell, Oracle\n   -  Carsten\
    \ Bormann, TZI University Bremen\n   -  Daniel Thomas, University of Cambridge\n\
    \   -  David Bosschaert, Adobe\n   -  David Malone, Maynooth University\n   -\
    \  David Plonka, Akamai\n   -  Doug Leith, Trinity College Dublin\n   -  Emmanuel\
    \ Baccelli, Inria\n   -  Eric Smith, SpinDance\n   -  Jean-Philippe Fassino, Schneider\
    \ Electric\n   -  Joergen Karkov, Grundfos\n   -  Jonathon Dukes, Trinity College\
    \ Dublin\n   -  Joseph Birr-Pixton, Electric Imp\n   -  Kaspar Schleiser, Freie\
    \ Universitaet Berlin\n   -  Luca Zappaterra, Philips Lighting Research\n   -\
    \  Martin Orehek, Munich University of Applied Science\n   -  Mathias Tausig,\
    \ FH Campus Wien\n   -  Matthias Kovatsch, Siemens\n   -  Milan Patel, Huawei\n\
    \   -  Ned Smith, Intel\n   -  Robert Ensink, SpinDance\n   -  Robert Sparks,\
    \ Oracle\n   -  Russ Housley, Vigil Security\n   -  Samita Chakrabarti, Ericsson\n\
    \   -  Stephen Farrell, Trinity College Dublin\n   -  Vassilis Prevelakis, TU\
    \ Braunschweig\n   -  Hannes Tschofenig, ARM Ltd.\n"
- title: Acknowledgements
  contents:
  - "Acknowledgements\n   We would like to thank all paper authors and participants\
    \ for their\n   contributions.  The IoTSU workshop is co-sponsored by the Internet\n\
    \   Architecture Board and the Science Foundation Ireland funded CONNECT\n   Centre\
    \ for future networks and communications.  The program committee\n   would like\
    \ to express their thanks to Comcast for sponsoring the\n   social event.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Hannes Tschofenig\n   ARM Limited\n   Email: hannes.tschofenig@gmx.net\n\
    \   Stephen Farrell\n   Trinity College Dublin\n   Dublin  2\n   Ireland\n   Phone:\
    \ +353-1-896-2354\n   Email: stephen.farrell@cs.tcd.ie\n"
