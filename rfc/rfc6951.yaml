- title: __initial_text__
  contents:
  - ''
- title: UDP Encapsulation of Stream Control Transmission Protocol (SCTP) Packets
  contents:
  - "UDP Encapsulation of Stream Control Transmission Protocol (SCTP) Packets\n  \
    \               for End-Host to End-Host Communication\n"
- title: Abstract
  contents:
  - "Abstract\n   This document describes a simple method of encapsulating Stream\n\
    \   Control Transmission Protocol (SCTP) packets into UDP packets and its\n  \
    \ limitations.  This allows the usage of SCTP in networks with legacy\n   NATs\
    \ that do not support SCTP.  It can also be used to implement SCTP\n   on hosts\
    \ without directly accessing the IP layer, for example,\n   implementing it as\
    \ part of the application without requiring special\n   privileges.\n   Please\
    \ note that this document only describes the functionality\n   required within\
    \ an SCTP stack to add on UDP encapsulation, providing\n   only those mechanisms\
    \ for two end-hosts to communicate with each\n   other over UDP ports.  In particular,\
    \ it does not provide mechanisms\n   to determine whether UDP encapsulation is\
    \ being used by the peer, nor\n   the mechanisms for determining which remote\
    \ UDP port number can be\n   used.  These functions are out of scope for this\
    \ document.\n   This document covers only end-hosts and not tunneling (egress\
    \ or\n   ingress) endpoints.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This\
    \ document is a product of the Internet Engineering Task Force\n   (IETF).  It\
    \ represents the consensus of the IETF community.  It has\n   received public\
    \ review and has been approved for publication by the\n   Internet Engineering\
    \ Steering Group (IESG).  Further information on\n   Internet Standards is available\
    \ in Section 2 of RFC 5741.\n   Information about the current status of this document,\
    \ any errata,\n   and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc6951.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2013 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction  . . . . . . . . . . . . . . . . . . .\
    \ . . . . .   3\n   2.  Conventions . . . . . . . . . . . . . . . . . . . . .\
    \ . . . .   3\n   3.  Use Cases . . . . . . . . . . . . . . . . . . . . . . .\
    \ . . .   3\n     3.1.  Portable SCTP Implementations . . . . . . . . . . . .\
    \ . .   3\n     3.2.  Legacy NAT Traversal  . . . . . . . . . . . . . . . . .\
    \ .   4\n   4.  Unilateral Self-Address Fixing (UNSAF) Considerations . . . .\
    \   4\n   5.  SCTP over UDP . . . . . . . . . . . . . . . . . . . . . . . .  \
    \ 4\n     5.1.  Architectural Considerations  . . . . . . . . . . . . . .   4\n\
    \     5.2.  Packet Format . . . . . . . . . . . . . . . . . . . . . .   5\n  \
    \   5.3.  Encapsulation Procedure . . . . . . . . . . . . . . . . .   6\n    \
    \ 5.4.  Decapsulation Procedure . . . . . . . . . . . . . . . . .   7\n     5.5.\
    \  ICMP Considerations . . . . . . . . . . . . . . . . . . .   7\n     5.6.  Path\
    \ MTU Considerations . . . . . . . . . . . . . . . . .   7\n     5.7.  Handling\
    \ of Embedded IP Addresses . . . . . . . . . . . .   8\n     5.8.  Explicit Congestion\
    \ Notification (ECN) Considerations . .   8\n   6.  Socket API Considerations\
    \ . . . . . . . . . . . . . . . . . .   8\n     6.1.  Get or Set the Remote UDP\
    \ Encapsulation Port Number\n           (SCTP_REMOTE_UDP_ENCAPS_PORT) . . . .\
    \ . . . . . . . . . .   9\n   7.  IANA Considerations . . . . . . . . . . . .\
    \ . . . . . . . . .   9\n   8.  Security Considerations . . . . . . . . . . .\
    \ . . . . . . . .   9\n   9.  Acknowledgments . . . . . . . . . . . . . . . .\
    \ . . . . . . .  10\n   10. References  . . . . . . . . . . . . . . . . . . .\
    \ . . . . . .  10\n     10.1.  Normative References . . . . . . . . . . . . .\
    \ . . . . .  10\n     10.2.  Informative References . . . . . . . . . . . . .\
    \ . . . .  11\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   This document describes a simple method of encapsulating\
    \ SCTP packets\n   into UDP packets.  SCTP, as defined in [RFC4960], runs directly\
    \ over\n   IPv4 or IPv6.  There are two main reasons for encapsulating SCTP\n\
    \   packets:\n   o  To allow SCTP traffic to pass through legacy NATs, which do\
    \ not\n      provide native SCTP support as specified in [BEHAVE] and\n      [NATSUPP].\n\
    \   o  To allow SCTP to be implemented on hosts that do not provide\n      direct\
    \ access to the IP layer.  In particular, applications can\n      use their own\
    \ SCTP implementation if the operating system does not\n      provide one.\n \
    \  SCTP provides the necessary congestion control and reliability\n   service\
    \ that UDP does not perform.\n"
- title: 2.  Conventions
  contents:
  - "2.  Conventions\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\"\
    , \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and\
    \ \"OPTIONAL\" in this\n   document are to be interpreted as described in [RFC2119].\n"
- title: 3.  Use Cases
  contents:
  - "3.  Use Cases\n   This section discusses two important use cases for encapsulating\
    \ SCTP\n   into UDP.\n"
- title: 3.1.  Portable SCTP Implementations
  contents:
  - "3.1.  Portable SCTP Implementations\n   Some operating systems support SCTP natively.\
    \  For other operating\n   systems, implementations are available but require\
    \ special privileges\n   to install and/or use them.  In some cases, a kernel\
    \ implementation\n   might not be available at all.  When providing an SCTP implementation\n\
    \   as part of a user process, most operating systems require special\n   privileges\
    \ to access the IP layer directly.\n   Using UDP encapsulation makes it possible\
    \ to provide an SCTP\n   implementation as part of a user process that does not\
    \ require any\n   special privileges.\n   A crucial point for implementing SCTP\
    \ in user space is that the\n   source address of outgoing packets needs to be\
    \ controlled.  This is\n   not an issue if the SCTP stack can use all addresses\
    \ configured at\n   the IP layer as source addresses.  However, it is an issue\
    \ when also\n   using the address management required for NAT traversal, described\
    \ in\n   Section 5.7.\n"
- title: 3.2.  Legacy NAT Traversal
  contents:
  - "3.2.  Legacy NAT Traversal\n   Using UDP encapsulation allows SCTP communication\
    \ when traversing\n   legacy NATs (i.e, those NATs not supporting SCTP as described\
    \ in\n   [BEHAVE] and [NATSUPP]).  For single-homed associations, IP addresses\n\
    \   MUST NOT be listed in the INIT and INIT-ACK chunks.  To use multiple\n   addresses,\
    \ the dynamic address reconfiguration extension described in\n   [RFC5061] MUST\
    \ be used only with wildcard addresses in the ASCONF\n   chunks (Address Configuration\
    \ Change Chunks) in combination with\n   [RFC4895].\n   For multihomed SCTP associations,\
    \ the address management as described\n   in Section 5.7 MUST be performed.\n\
    \   SCTP sends periodic HEARTBEAT chunks on all idle paths.  These can\n   keep\
    \ the NAT state alive.\n"
- title: 4.  Unilateral Self-Address Fixing (UNSAF) Considerations
  contents:
  - "4.  Unilateral Self-Address Fixing (UNSAF) Considerations\n   As [RFC3424] requires\
    \ a limited scope, this document only covers SCTP\n   endpoints dealing with legacy\
    \ constraints as described in Section 3.\n   It doesn't cover generic tunneling\
    \ endpoints.\n   Obviously, the exit strategy is to use hosts supporting SCTP\
    \ natively\n   and middleboxes supporting SCTP as specified in [BEHAVE] and\n\
    \   [NATSUPP].\n"
- title: 5.  SCTP over UDP
  contents:
  - '5.  SCTP over UDP

    '
- title: 5.1.  Architectural Considerations
  contents:
  - "5.1.  Architectural Considerations\n   UDP-encapsulated SCTP is normally communicated\
    \ between SCTP stacks\n   using the IANA-assigned UDP port number 9899 (sctp-tunneling)\
    \ on both\n   ends.  There are circumstances where other ports may be used on\n\
    \   either end: As stated earlier, implementations in the application\n   space\
    \ might be required to use ports other than the registered port.\n   Since NAT\
    \ boxes might change UDP port numbers, the receiver might\n   observe other UDP\
    \ port numbers than were used by the sender.\n   Discovery of alternate ports\
    \ is outside of the scope of this\n   document, but this section describes considerations\
    \ for SCTP stack\n   design in light of their potential use.\n   Each SCTP stack\
    \ uses a single local UDP encapsulation port number as\n   the destination port\
    \ for all its incoming SCTP packets.  While the\n   uniqueness of the local UDP\
    \ encapsulation port number is not\n   necessarily required for the protocol,\
    \ this greatly simplifies\n   implementation design, since different ports for\
    \ each address would\n   require a sender implementation to choose the appropriate\
    \ port while\n   doing source address selection.  Using a single local UDP\n \
    \  encapsulation port number per host is not possible if the SCTP stack\n   is\
    \ implemented as part of each application, there are multiple\n   applications,\
    \ and some of the applications want to use the same IP\n   address.\n   An SCTP\
    \ implementation supporting UDP encapsulation MUST maintain a\n   remote UDP encapsulation\
    \ port number per destination address for each\n   SCTP association.  Again, because\
    \ the remote stack may be using ports\n   other than the well-known port, each\
    \ port may be different from each\n   stack.  However, because of remapping of\
    \ ports by NATs, the remote\n   ports associated with different remote IP addresses\
    \ may not be\n   identical, even if they are associated with the same stack.\n\
    \   Implementation note: Because the well-known port might not be used,\n   implementations\
    \ need to allow other port numbers to be specified as a\n   local or remote UDP\
    \ encapsulation port number through APIs.\n"
- title: 5.2.  Packet Format
  contents:
  - "5.2.  Packet Format\n   To encapsulate an SCTP packet, a UDP header as defined\
    \ in [RFC0768]\n   is inserted between the IP header as defined in [RFC0791] and\
    \ the\n   SCTP common header as defined in [RFC4960].\n   Figure 1 shows the packet\
    \ format of an encapsulated SCTP packet when\n   IPv4 is used.\n       0     \
    \              1                   2                   3\n       0 1 2 3 4 5 6\
    \ 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                         IPv4 Header                           |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \                         UDP Header                            |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                      SCTP Common Header                       |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \                        SCTP Chunk #1                          |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                           ...                                 |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \                        SCTP Chunk #n                          |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                     Figure 1: An SCTP/UDP/IPv4 Packet\n   The packet format\
    \ for an encapsulated SCTP packet when using IPv6 as\n   defined in [RFC2460]\
    \ is shown in Figure 2.  Please note that the\n   number m of IPv6 extension headers\
    \ can be 0.\n       0                   1                   2                \
    \   3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n\
    \      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   \
    \   |                      IPv6 Base Header                         |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                    IPv6 Extension Header #1                   |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \                           ...                                 |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                    IPv6 Extension Header #m                   |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \                         UDP Header                            |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                      SCTP Common Header                       |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \                        SCTP Chunk #1                          |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                           ...                                 |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \                        SCTP Chunk #n                          |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                     Figure 2: An SCTP/UDP/IPv6 Packet\n"
- title: 5.3.  Encapsulation Procedure
  contents:
  - "5.3.  Encapsulation Procedure\n   Within the UDP header, the source port MUST\
    \ be the local UDP\n   encapsulation port number of the SCTP stack, and the destination\
    \ port\n   MUST be the remote UDP encapsulation port number maintained for the\n\
    \   association and the destination address to which the packet is sent\n   (see\
    \ Section 5.1).\n   Because the SCTP packet is the UDP payload, the length of\
    \ the UDP\n   packet MUST be the length of the SCTP packet plus the size of the\
    \ UDP\n   header.\n   The SCTP checksum MUST be computed for IPv4 and IPv6, and\
    \ the UDP\n   checksum SHOULD be computed for IPv4 and IPv6.  (See [RFC0768]\n\
    \   regarding IPv4; see [RFC2460] and [RFC6936] regarding IPv6.)\n   Although\
    \ UDP with a zero checksum over IPv6 is allowed under certain\n   constraints\
    \ [RFC6936], this document does not specify mechanisms for\n   this mode.  Deployed\
    \ support may be limited; also, at the time of\n   writing, the use of a zero\
    \ UDP checksum would be counter to the goal\n   of legacy NAT traversal.\n"
- title: 5.4.  Decapsulation Procedure
  contents:
  - "5.4.  Decapsulation Procedure\n   When an encapsulated packet is received, the\
    \ UDP header is removed.\n   Then, the generic lookup is performed, as done by\
    \ an SCTP stack\n   whenever a packet is received, to find the association for\
    \ the\n   received SCTP packet.  After finding the SCTP association (which\n \
    \  includes checking the verification tag), the UDP source port MUST be\n   stored\
    \ as the encapsulation port for the destination address the SCTP\n   packet is\
    \ received from (see Section 5.1).\n   When a non-encapsulated SCTP packet is\
    \ received by the SCTP stack,\n   the encapsulation of outgoing packets belonging\
    \ to the same\n   association and the corresponding destination address MUST be\n\
    \   disabled.\n"
- title: 5.5.  ICMP Considerations
  contents:
  - "5.5.  ICMP Considerations\n   When receiving ICMP or ICMPv6 response packets,\
    \ there might not be\n   enough bytes in the payload to identify the SCTP association\
    \ that the\n   SCTP packet triggering the ICMP or ICMPv6 packet belongs to.  If\
    \ a\n   received ICMP or ICMPv6 packet cannot be related to a specific SCTP\n\
    \   association or the verification tag cannot be verified, it MUST be\n   discarded\
    \ silently.  In particular, this means that the SCTP stack\n   MUST NOT rely on\
    \ receiving ICMP or ICMPv6 messages.  Implementation\n   constraints could prevent\
    \ processing received ICMP or ICMPv6\n   messages.\n   If received ICMP or ICMPv6\
    \ messages are processed, the following\n   mapping SHOULD apply:\n   1.  ICMP\
    \ messages with type 'Destination Unreachable' and code 'Port\n       Unreachable'\
    \ SHOULD be treated as ICMP messages with type\n       'Destination Unreachable'\
    \ and code 'Protocol Unreachable'.  See\n       [RFC0792] for more details.\n\
    \   2.  ICMPv6 messages with type 'Destination Unreachable' and code\n       'Port\
    \ Unreachable' SHOULD be treated as ICMPv6 messages with type\n       'Parameter\
    \ Problem' and code 'unrecognized Next Header type\n       encountered'.  See\
    \ [RFC4443] for more details.\n"
- title: 5.6.  Path MTU Considerations
  contents:
  - "5.6.  Path MTU Considerations\n   If an SCTP endpoint starts to encapsulate the\
    \ packets of a path, it\n   MUST decrease the Path MTU of that path by the size\
    \ of the UDP\n   header.  If it stops encapsulating them, the Path MTU SHOULD\
    \ be\n   increased by the size of the UDP header.\n   When performing Path MTU\
    \ discovery as described in [RFC4820] and\n   [RFC4821], it MUST be taken into\
    \ account that one cannot rely on the\n   feedback provided by ICMP or ICMPv6\
    \ due to the limitation laid out in\n   Section 5.5.\n   If the implementation\
    \ does not allow control of the Don't Fragment\n   (DF) bit contained in the IPv4\
    \ header, then Path MTU discovery can't\n   be used.  In this case, an implementation-specific\
    \ value should be\n   used instead.\n"
- title: 5.7.  Handling of Embedded IP Addresses
  contents:
  - "5.7.  Handling of Embedded IP Addresses\n   When using UDP encapsulation for\
    \ legacy NAT traversal, IP addresses\n   that might require translation MUST NOT\
    \ be put into any SCTP packet.\n   This means that a multihomed SCTP association\
    \ is set up initially as\n   a single-homed one, and the protocol extension [RFC5061]\
    \ in\n   combination with [RFC4895] is used to add the other addresses.  Only\n\
    \   wildcard addresses are put into the SCTP packet.\n   When addresses are changed\
    \ during the lifetime of an association, the\n   protocol extension [RFC5061]\
    \ MUST be used with wildcard addresses\n   only.  If an SCTP endpoint receives\
    \ an ABORT with the T-bit set, it\n   MAY use this as an indication that the addresses\
    \ seen by the peer\n   might have changed.\n"
- title: 5.8.  Explicit Congestion Notification (ECN) Considerations
  contents:
  - "5.8.  Explicit Congestion Notification (ECN) Considerations\n   If the implementation\
    \ supports the sending and receiving of the ECN\n   bits for the IP protocols\
    \ being used by an SCTP association, the ECN\n   bits MUST NOT be changed during\
    \ sending and receiving.\n"
- title: 6.  Socket API Considerations
  contents:
  - "6.  Socket API Considerations\n   This section describes how the socket API defined\
    \ in [RFC6458] needs\n   to be extended to provide a way for the application to\
    \ control the\n   UDP encapsulation.\n   Please note that this section is informational\
    \ only.\n   A socket API implementation based on [RFC6458] is extended by\n  \
    \ supporting one new read/write socket option.\n"
- title: 6.1.  Get or Set the Remote UDP Encapsulation Port Number
  contents:
  - "6.1.  Get or Set the Remote UDP Encapsulation Port Number\n      (SCTP_REMOTE_UDP_ENCAPS_PORT)\n\
    \   This socket option can be used to set and retrieve the UDP\n   encapsulation\
    \ port number.  This allows an endpoint to encapsulate\n   initial packets.\n\
    \   struct sctp_udpencaps {\n     sctp_assoc_t sue_assoc_id;\n     struct sockaddr_storage\
    \ sue_address;\n     uint16_t sue_port;\n   };\n   sue_assoc_id:  This parameter\
    \ is ignored for one-to-one style\n      sockets.  For one-to-many style sockets,\
    \ the application may fill\n      in an association identifier or SCTP_FUTURE_ASSOC\
    \ for this query.\n      It is an error to use SCTP_{CURRENT|ALL}_ASSOC in sue_assoc_id.\n\
    \   sue_address:  This specifies which address is of interest.  If a\n      wildcard\
    \ address is provided, it applies only to future paths.\n   sue_port:  The UDP\
    \ port number in network byte order; used as the\n      destination port number\
    \ for UDP encapsulation.  Providing a value\n      of 0 disables UDP encapsulation.\n"
- title: 7.  IANA Considerations
  contents:
  - "7.  IANA Considerations\n   This document refers to the already assigned UDP\
    \ port 9899 (sctp-\n   tunneling).  IANA has updated this assignment to refer\
    \ to this\n   document.  As per [RFC6335], the Assignee is [IESG] and the Contact\n\
    \   is [IETF_Chair].\n   Please note that the TCP port 9899 (sctp-tunneling) assignment\
    \ is not\n   needed anymore, and IANA has removed this TCP port number assignment\n\
    \   and marked TCP port 9899 as \"Reserved\".\n"
- title: 8.  Security Considerations
  contents:
  - "8.  Security Considerations\n   Encapsulating SCTP into UDP does not add any\
    \ additional security\n   considerations to the ones given in [RFC4960] and [RFC5061].\n\
    \   Firewalls inspecting SCTP packets must also be aware of the\n   encapsulation\
    \ and apply corresponding rules to the encapsulated\n   packets.\n   An attacker\
    \ might send a malicious UDP packet towards an SCTP\n   endpoint to change the\
    \ encapsulation port for a single remote address\n   of a particular SCTP association.\
    \  However, as specified in\n   Section 5.4, this requires the usage of one of\
    \ the two negotiated\n   verification tags.  This protects against blind attackers\
    \ the same\n   way as described in [RFC4960] for SCTP over IPv4 or IPv6.  Non-blind\n\
    \   attackers can affect SCTP association using the UDP encapsulation\n   described\
    \ in this document in the same way as SCTP associations not\n   using the UDP\
    \ encapsulation of SCTP described here.\n"
- title: 9.  Acknowledgments
  contents:
  - "9.  Acknowledgments\n   The authors wish to thank Stewart Bryant, Dave Crocker,\
    \ Gorry\n   Fairhurst, Tero Kivinen, Barry Leiba, Pete Resnick, Martin\n   Stiemerling,\
    \ Irene Ruengeler, and Dan Wing for their invaluable\n   comments.\n"
- title: 10.  References
  contents:
  - '10.  References

    '
- title: 10.1.  Normative References
  contents:
  - "10.1.  Normative References\n   [RFC0768]  Postel, J., \"User Datagram Protocol\"\
    , STD 6, RFC 768,\n              August 1980.\n   [RFC0791]  Postel, J., \"Internet\
    \ Protocol\", STD 5, RFC 791, September\n              1981.\n   [RFC0792]  Postel,\
    \ J., \"Internet Control Message Protocol\", STD 5,\n              RFC 792, September\
    \ 1981.\n   [RFC2119]  Bradner, S., \"Key words for use in RFCs to Indicate\n\
    \              Requirement Levels\", BCP 14, RFC 2119, March 1997.\n   [RFC2460]\
    \  Deering, S.E. and R.M. Hinden, \"Internet Protocol, Version\n             \
    \ 6 (IPv6) Specification\", RFC 2460, December 1998.\n   [RFC4443]  Conta, A.,\
    \ Deering, S., and M. Gupta, \"Internet Control\n              Message Protocol\
    \ (ICMPv6) for the Internet Protocol\n              Version 6 (IPv6) Specification\"\
    , RFC 4443, March 2006.\n   [RFC4820]  Tuexen, M., Stewart, R., and P. Lei, \"\
    Padding Chunk and\n              Parameter for the Stream Control Transmission\
    \ Protocol\n              (SCTP)\", RFC 4820, March 2007.\n   [RFC4821]  Mathis,\
    \ M. and J. Heffner, \"Packetization Layer Path MTU\n              Discovery\"\
    , RFC 4821, March 2007.\n   [RFC4895]  Tuexen, M., Stewart, R., Lei, P., and E.\
    \ Rescorla,\n              \"Authenticated Chunks for the Stream Control Transmission\n\
    \              Protocol (SCTP)\", RFC 4895, August 2007.\n   [RFC4960]  Stewart,\
    \ R., \"Stream Control Transmission Protocol\", RFC\n              4960, September\
    \ 2007.\n   [RFC5061]  Stewart, R., Xie, Q., Tuexen, M., Maruyama, S., and M.\n\
    \              Kozuka, \"Stream Control Transmission Protocol (SCTP)\n       \
    \       Dynamic Address Reconfiguration\", RFC 5061, September\n             \
    \ 2007.\n"
- title: 10.2.  Informative References
  contents:
  - "10.2.  Informative References\n   [BEHAVE]   Stewart, R., Tuexen, M., and I.\
    \ Ruengeler, \"Stream Control\n              Transmission Protocol (SCTP) Network\
    \ Address Translation\",\n              Work in Progress, February 2013.\n   [NATSUPP]\
    \  Stewart, R., Tuexen, M., and I. Ruengeler, \"Stream Control\n             \
    \ Transmission Protocol (SCTP) Network Address Translation\n              Support\"\
    , Work in Progress, February 2013.\n   [RFC3424]  Daigle, L. IAB, \"IAB Considerations\
    \ for UNilateral Self-\n              Address Fixing (UNSAF) Across Network Address\n\
    \              Translation\", RFC 3424, November 2002.\n   [RFC6335]  Cotton,\
    \ M., Eggert, L., Touch, J., Westerlund, M., and S.\n              Cheshire, \"\
    Internet Assigned Numbers Authority (IANA)\n              Procedures for the Management\
    \ of the Service Name and\n              Transport Protocol Port Number Registry\"\
    , BCP 165, RFC\n              6335, August 2011.\n   [RFC6458]  Stewart, R., Tuexen,\
    \ M., Poon, K., Lei, P., and V.\n              Yasevich, \"Sockets API Extensions\
    \ for the Stream Control\n              Transmission Protocol (SCTP)\", RFC 6458,\
    \ December 2011.\n   [RFC6936]  Fairhurst, G. and M. Westerlund, \"Applicability\
    \ Statement\n              for the Use of IPv6 UDP Datagrams with Zero Checksums\"\
    ,\n              RFC 6936, April 2013.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Michael Tuexen\n   Muenster University of Applied Sciences\n\
    \   Stegerwaldstrasse 39\n   48565 Steinfurt\n   DE\n   EMail: tuexen@fh-muenster.de\n\
    \   Randall R. Stewart\n   Adara Networks\n   Chapin, SC  29036\n   US\n   EMail:\
    \ randall@lakerest.net\n"
