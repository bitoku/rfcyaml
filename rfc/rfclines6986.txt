This document is intended to be a source of information about the Russian Federal standard hash function (GOST R 34.11 2012), which is one of the Russian cryptographic standard algorithms (called GOST algorithms).
This document updates RFC 5831.
The Russian Federal standard hash function (GOST R 34.11 2012) establishes the hash function algorithm and the hash function calculation procedure for any sequence of binary symbols used in cryptographic methods of information processing and information security, including techniques for providing data integrity and authenticity and for digital signatures during information transfer, information processing, and information storage in computer aided systems.
The hash function defined in the standard provides for the operation of digital signature systems using the asymmetric cryptographic algorithm in compliance with GOST R 34.10 2012
GOST R 34.11 2012 applies to the creation, operation, and modernization of information systems of different purpose.
GOST R 34.11 94 is superseded by GOST R 34.11 2012 from 1st January 2013.
That means that all new systems that are presented for certification MUST use GOST R 34.11 2012 and MAY use GOST R 34.11 94 also for maintaining compatibility with existing systems.
Usage of GOST R 34.11 94 in current systems is allowed at least for a 5 year period.
This document updates RFC 5831
[GOST3411 2012] was developed by the Center for Information Protection and Special Communications of the Federal Security Service of the Russian Federation with participation of the open joint stock company Information Technologies and Communication Systems (InfoTeCS JSC).
GOST R 34.11 2012 was approved and introduced by Decree #216 of the Federal Agency on Technical Regulating and Metrology on 07.08.2012.
GOST R 34.11 2012 is intended to replace GOST R 34.11 94
[GOST3411 94], a national standard of the Russian Federation.
Terms and concepts in the standard comply with the following international standards:
/IEC14888 3Amd], and   series of standards ISO/IEC 10118
The following terms and their corresponding definitions are used in the standard.
Definitions padding: appending extra bits to a data string
initializing value: a value used in defining the starting point of a hash function (Clause 3.7 of [ISO
message: string of bits of any length
(Clause 3.10 of [ISO/IEC14888 1]).
round function: a function that transforms two binary strings of lengths L1 and L2 to a binary string of length L2.
It is used iteratively as part of a hash function, where it combines a data string of length L1 with the previous output of length L2
Note: In GOST R 34.11 2012, the concepts "string of bits of length L" and "binary row vector of length L" are identical.
string of bits that is the output of a hash function
(Clause 3.6 of [ISO/IEC14888 1].
function that maps strings of bits to fixed length strings of bits, satisfying the following properties: 1.  for a given output, it is computationally infeasible to find an input that maps to this output; 2.  for a given input, it is computationally infeasible to find a second input that maps to the same output; and
it is computationally infeasible to find any two distinct inputs that map to the same output (Clauses 3.2 and 3.7 of [ISO/IEC14888 1]).
Note: In the standard (to provide terminological compatibility with the current native standard documentation and with the published scientific and technical works), the terms "hash function" and "cryptographic hash function" are synonyms.
one or more data elements resulting from the signature process (Clause 3.12 of [ISO/IEC 14888 1].
Note: In the standard (to provide terminological compatibility with the current native standard documentation and with the published scientific and technical works), the terms "digital signature", "electronic signature", and "electronic digital signature" are synonyms.
the set of all binary vectors of length n, where n is a non  negative integer; subvectors and vector components are enumerated from right to left starting from zero (xor)   exclusive or of the two binary vectors of the same length A  B    concatenation of vectors A, B (both belong to V ),
V n bijective mapping operation associating an element from Z (2^n) with its binary representation, i.e., for an element z of the ring Z (2^n), represented by the residue z 0
the mapping inverse to the mapping Vec n, i.e., Int n   Vec n^( 1)
, M belongs to V ,  M
V    V n hash function mapping the vector (message) M into the vector (hash code) H(M)
General Provisions GOST R 34.11 2012 defines two hash functions H:
V    V n with the hash code lengths n
512 bits and n   256 bits.
The initializing value IV for a hash function with a hash code length of 512 bits is 0^512.
The initializing value IV for a hash function with a hash code length of 256 bits is (00000001)^64.
Nonlinear Bijections of Binary Vector Sets Nonlinear bijection of the binary vector set V 8 is presented by the following substitution:
V 8 where Pi': Z (2^8)   Z (2^8).
The values of the substitution
Tau   (0,  8, 16, 24, 32, 40, 48, 56, 1,  9, 17, 25, 33, 41, 49, 57, 2, 10, 18, 26, 34, 42, 50, 58, 3, 11, 19, 27, 35, 43, 51, 59, 4, 12, 20, 28, 36, 44, 52, 60, 5, 13, 21, 29, 37, 45, 53, 61, 6, 14, 22, 30, 38, 46, 54, 62, 7, 15, 23, 31, 39, 47, 55, 63) 6.4.
Linear Transformations of Binary Vector Sets Linear transformation l of the binary vector set V 64 is specified by the right multiplication with the matrix A over the field GF(2).
The matrix rows are specified sequentially in a hexadecimal form.
The row with number j,
a (j, 0), where a (j, i) belongs to Z 16
8e20faa72ba0b470 47107ddd9b505a38 ad08b0e0c3282d1c d8045870ef14980e 6c022c38f90a4c07 3601161cf205268d
c3e9224312c8c1a0 effa11af0964ee50 f97d86d98a327728 e4fa2054a80b329c 727d102a548b194e
492c024284fbaec0 aa16012142f35760 550b8e9e21f7a530 a48b474f9ef5dc18 70a6a56e2440598e 3853dc371220a247 1ca76e95091051ad 0edd37c48a08a6d8
4i   0, 4i   1, 4i   2, 4i   3.
The product of the vector b
belonging to V 64 and
the matrix A is the vector c belonging to V 64
^64, if b i   0
Iteration Constants Iteration constants are specified in a hexadecimal form.
The constant value specified in the form a 127...
f574dcac2bce2fc70a39fc286a3d8435 06f15e5f529c1f8bf2ea7514b1297b7b d3e20fe490359eb1c1c93a376062db09 c2b6f443867adb31991e96f50aba0ab2 C[4]
Transformations For calculating the hash code H(M) of the message M belonging to V , the following transformations are used: X[k]:
V 512   V 512, X[k](a)
a, k, a belongs to V 512; S:V 512
a 0 belongs to V 512, a i belongs to V 64,
The hash code value of the message M belonging to V  is calculated using the iterative procedure.
Each iteration is provided using the round function:
x V 512   V 512, where N belongs to V 512 calculated as g N(h, m)
Hash Function Calculation Procedure Initial data for the procedure of calculating the hash code H(M) are a message M belonging to V  (subject to hashing) and initializing value IV belonging to V 512.
The algorithm for calculating the function
H consists of the following steps.
Assign initial values to the following variables: 1.1.
512 belonging to V 512 1.3.
512 belonging to V 512 1.4.
If it is true, then go to Step 3.
Else, perform the following calculations: 2.2.
the subvector m belonging to V 512 of the message
M   M'  m Then perform the following calculations: 2.3.
h :  g 0(h, EPSILON), for function with 512 bit hash code h :
MSB 256(g 0(h, EPSILON)), for function with 256 bit hash code 3.7.
The value of the variable h (obtained in Step 3.6) is the value of hash function H(M).
This section is for information only and is not a normative part of the standard.
The vectors from V  are specified in a hexadecimal form.
The vector A belonging to V (4n) (specified in the form a (n 1)...
Example 1 Let's calculate the hash code of the following message (represented as a hexadecimal string)
: M1   32313039383736353433323130393837 36353433323130393837363534333231 30393837363534333231303938373635 343332313039383736353433323130 10.1.1.
For Hash Function with 512 Bit Hash Code Assign the following values to the variables:
The length of the message is  M1
, so the incomplete block is padded:
Calculate K :  LPS(h (xor) N)
After the transformation S: S(h
fcfcfcfcfcfcfcfcfcfcfcfcfcfcfcfc fcfcfcfcfcfcfcfcfcfcfcfcfcfcfcfc fcfcfcfcfcfcfcfcfcfcfcfcfcfcfcfc fcfcfcfcfcfcfcfcfcfcfcfcfcfcfcfc after the transformation P: PS(h (xor) N)
fcfcfcfcfcfcfcfcfcfcfcfcfcfcfcfc fcfcfcfcfcfcfcfcfcfcfcfcfcfcfcfc fcfcfcfcfcfcfcfcfcfcfcfcfcfcfcfc fcfcfcfcfcfcfcfcfcfcfcfcfcfcfcfc after the transformation L:
K :  LPS(h (xor) N)
Then the transformation E(K, m) is performed:
ddf644e6e15f5733bff249410445536f 4e9bd69e200f3596b3d9ea737d70a1d7 d1b6143b9c9288357758f8ef78278aa1 55f4d717dda7cb12b211e87e7f19203d PS(K[1]
ddbf4eb3d17755b2f6f29bd9b658f411 4449d6ea14f8d7e8e6419e733bef177e e104207d9c78dd7f5f450f709227a719 575335a1888acb20336f96d735a1123d LPS(K[1]
861c298afb9186934a93c9d96ade20df 109379bb9c1a1ffd0ad81fce7b45ccd5 4501e7d127e32874b5d7927b032de7a1 Iteration 6
ed094d14c6d973b731d50570d0a9bca2 15415a15031fd20ddefb5bc61b96671d 6902f49df4d2fd346ceebda9431cb075 Iteration 10 K[10]
691cb6896f3e00b87f71d37a584c35b9 cd8789fad55a46887e5b60e124b51a61 Iteration 11 K[11]
The result of the transformation g N(h, m) is h   fd102cf8812ccb1191ea34af21394f38
The result of the transformation g 0(h, N) is h
The result of the transformation g 0(h, EPSILON) is h
The hash code of the message M1 is the value H(M1)
For Hash Function with 256 Bit Hash Code Assign the following values to the variables
The length of the message is  M1
, so the incomplete block is padded:
Calculate K :  LPS(h (xor) N)
eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee after the transformation P: PS(h (xor) N)   eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee after the transformation
Then the transformation E(K, m) is performed:
ecd95e282645a83930045858325f5afa 2341dc110ad303110ef676d9ac63509b f3a3041b65148f93f5c986f293bb7cfc ef92288ac34df08f63c8f6362cd8f1f0 PS(K[1]
da22de93a66a66b19c7e6b5eea633511 e611d68c8401bfcd0c7d0cc39d4a5eb9 Iteration 2 K[2]
c2b45089c62e9d82edf1ef45230db9a2 3c9e1c521113376628a5f6a5dbc041b2 Iteration 3 K[3]
772e36b03d4b9aa471037212cde93375 226552392ef4d83010a007e1117a07b5 Iteration 4 K[4]
LPSX[K[1]](m)   f30d791ed78bdee819022a3d78182242 124efcdd54e203f23fb2dc7f94338ff9 55a5afc15ffef03165263c4fdb36933a a982016471fbac9419f892551e9e568b Iteration 8 K[8]
55c96bdae6ee97055cc7e857267c2ccf 28c8f5dd95ed58a9a68c12663bb28967 Iteration 10 K[10]
The result of the transformation g N(h, m) is h
The result of the transformation g 0(h, N) is h
The result of the transformation g 0(h, EPSILON) is h
The hash code of the message M1 is the value H(M1)
Example 2 Let's calculate the hash code of the following message:
M2   fbe2e5f0eee3c820fbeafaebef20fffb f0e1e0f0f520e0ed20e8ece0ebe5f0f2 f120fff0eeec20f120faf2fee5e2202c e8f6f3ede220e8e6eee1e8f0f2d1202c e8f0f2e5e220e5d1 10.2.1.
For Hash Function with 512 Bit Hash Code Assign the following values to the variables
The length of the message is  M2    576 > 512, so a part of this message is initially transformed:
Calculate K :  LPS(h (xor) N)
fcfcfcfcfcfcfcfcfcfcfcfcfcfcfcfc fcfcfcfcfcfcfcfcfcfcfcfcfcfcfcfc fcfcfcfcfcfcfcfcfcfcfcfcfcfcfcfc fcfcfcfcfcfcfcfcfcfcfcfcfcfcfcfc after the transformation P: PS(h (xor) N)
fcfcfcfcfcfcfcfcfcfcfcfcfcfcfcfc fcfcfcfcfcfcfcfcfcfcfcfcfcfcfcfc fcfcfcfcfcfcfcfcfcfcfcfcfcfcfcfc fcfcfcfcfcfcfcfcfcfcfcfcfcfcfcfc after the transformation L: LPS(h (xor) N)
Then the transformation E(K, m) is performed:
ddf644e6e15f5733bff249410445536f 4e9bd69e200f3596b3d9ea737d70a1d7 d1b6143b9c9288357758f8ef78278aa1 55f4d717dda7cb12b211e87e7f19203d PS(K[1]
ddbf4eb3d17755b2f6f29bd9b658f411 4449d6ea14f8d7e8e6419e733bef177e e104207d9c78dd7f5f450f709227a719 575335a1888acb20336f96d735a1123d LPS(K[1]
d70472ccbc73ae89da7d1599c72860c2 85f5771088f1fb0f943d949f22f1413c 991eafb51ab8e5ad8644770037765aec Iteration 12 K[12]
The result of the transformation g N(h, m) is
h   cd7f602312faa465e3bb4ccd9795395d e2914e938f10f8e127b7ac459b0c517b 98ef779ef7c7a46aa7843b8889731f48 2e5d221e8e2cea852e816cdac407c7af
The length of the rest of the message is less than 512, so the incomplete block is padded:
m :  00000000000000000000000000000000 00000000000000000000000000000000 00000000000000000000000000000000 0000000000000001fbe2e5f0eee3c820
The result of the transformation g N(h, m) is h
The result of the transformation g 0(h, N) is h
The result of the transformation g 0(h, EPSILON) is h   28fbc9bada033b1460642bdcddb90c3f
The hash code of the message M2 is the value H(M2)
For Hash Function with 256 Bit Hash Code Assign the following values to the variables:
The length of the message is  M2    576 > 512, so a part of this message is initially transformed:
K :  LPS(h (xor) N)
eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee after the transformation P: PS(h (xor) N)   eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee after the transformation
Then the transformation E(K, m) is performed:
ecd95e282645a83930045858325f5afa 2341dc110ad303110ef676d9ac63509b f3a3041b65148f93f5c986f293bb7cfc ef92288ac34df08f63c8f6362cd8f1f0 PS(K[1]
da22de93a66a66b19c7e6b5eea633511 e611d68c8401bfcd0c7d0cc39d4a5eb9 Iteration 2 K[2]
2b4434163f214cf7ce6164a75731bcea 5819e6a6a6fea99da9222951d2a28e01 Iteration 9 K[9]
a065c55e2168c31576a756c7ecc1a912 9cd3d207f8f43073076c30e111fd5f11 9095ca396e9fb78a2bf4781c44e845e4 47b8fc75b788284aae27582212ec23ee Iteration 12 K[12]
The result of the transformation g N(h, m) is h
The length of the rest of the message is less than 512, so the incomplete block is padded:
The result of the transformation g N(h, m) is h   a69049e7bd076ab775bc2873af26f098
The result of the transformation g 0(h, N) is h
The result of the transformation g 0(h, EPSILON) is h   508f7e553c06501d749a66fc28c6cac0 b005746d97537fa85d9e40904efed29d c345e53d7f84875d5068e4eb743f0793 d673f09741f9578471fb2598cb35c230
The hash code of the message M2 is the value H(M2)
This entire document is about security considerations.
