- contents:
  - '                    FTP Extensions for IPv6 and NATs

    '
  title: __initial_text__
- contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol
    for the\n   Internet community, and requests discussion and suggestions for\n
    \  improvements.  Please refer to the current edition of the \"Internet\n   Official
    Protocol Standards\" (STD 1) for the standardization state\n   and status of this
    protocol.  Distribution of this memo is unlimited.\n"
  title: Status of this Memo
- contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (1998).  All Rights Reserved.\n"
  title: Copyright Notice
- contents:
  - "Abstract\n   The specification for the File Transfer Protocol assumes that the\n
    \  underlying network protocol uses a 32-bit network address\n   (specifically
    IP version 4).  With the deployment of version 6 of the\n   Internet Protocol,
    network addresses will no longer be 32-bits.  This\n   paper specifies extensions
    to FTP that will allow the protocol to\n   work over IPv4 and IPv6.  In addition,
    the framework defined can\n   support additional network protocols in the future.\n"
  title: Abstract
- contents:
  - "1.  Introduction\n   The keywords, such as MUST and SHOULD, found in this document
    are\n   used as defined in RFC 2119 [Bra97].\n   The File Transfer Protocol [PR85]
    only provides the ability to\n   communicate information about IPv4 data connections.
    \ FTP assumes\n   network addresses will be 32 bits in length.  However, with
    the\n   deployment of version 6 of the Internet Protocol [DH96] addresses\n   will
    no longer be 32 bits long.  RFC 1639 [Pis94] specifies\n   extensions to FTP to
    enable its use over various network protocols.\n   Unfortunately, the mechanism
    can fail in a multi-protocol\n   environment.  During the transition between IPv4
    and IPv6, FTP needs\n   the ability to negotiate the network protocol that will
    be used for\n   data transfer.\n   This document provides a specification for
    a way that FTP can\n   communicate data connection endpoint information for network\n
    \  protocols other than IPv4.  In this specification, the FTP commands\n   PORT
    and PASV are replaced with EPRT and EPSV, respectively.  This\n   document is
    organized as follows.  Section 2 outlines the EPRT\n   command and Section 3 outlines
    the EPSV command.  Section 4 defines\n   the utilization of these two new FTP
    commands.  Section 5 briefly\n   presents security considerations.  Finally, Section
    6 provides\n   conclusions.\n"
  title: 1.  Introduction
- contents:
  - "2.  The EPRT Command\n   The EPRT command allows for the specification of an
    extended address\n   for the data connection.  The extended address MUST consist
    of the\n   network protocol as well as the network and transport addresses.  The\n
    \  format of EPRT is:\n           EPRT<space><d><net-prt><d><net-addr><d><tcp-port><d>\n
    \  The EPRT command keyword MUST be followed by a single space (ASCII\n   32).
    \ Following the space, a delimiter character (<d>) MUST be\n   specified.  The
    delimiter character MUST be one of the ASCII\n   characters in range 33-126 inclusive.
    \ The character \"|\" (ASCII 124)\n   is recommended unless it coincides with
    a character needed to encode\n   the network address.\n   The <net-prt> argument
    MUST be an address family number defined by\n   IANA in the latest Assigned Numbers
    RFC (RFC 1700 [RP94] as of the\n   writing of this document).  This number indicates
    the protocol to be\n   used (and, implicitly, the address length).  This document
    will use\n   two of address family numbers from [RP94] as examples, according
    to\n   the following table:\n        AF Number   Protocol\n        ---------   --------\n
    \       1           Internet Protocol, Version 4 [Pos81a]\n        2           Internet
    Protocol, Version 6 [DH96]\n   The <net-addr> is a protocol specific string representation
    of the\n   network address.  For the two address families specified above (AF\n
    \  Number 1 and 2), addresses MUST be in the following format:\n        AF Number
    \  Address Format      Example\n        ---------   --------------      -------\n
    \       1           dotted decimal      132.235.1.2\n        2           IPv6
    string         1080::8:800:200C:417A\n                    representations\n                    defined
    in [HD96]\n   The <tcp-port> argument must be the string representation of the\n
    \  number of the TCP port on which the host is listening for the data\n   connection.\n
    \  The following are sample EPRT commands:\n        EPRT |1|132.235.1.2|6275|\n
    \       EPRT |2|1080::8:800:200C:417A|5282|\n   The first command specifies that
    the server should use IPv4 to open a\n   data connection to the host \"132.235.1.2\"
    on TCP port 6275.  The\n   second command specifies that the server should use
    the IPv6 network\n   protocol and the network address \"1080::8:800:200C:417A\"
    to open a\n   TCP data connection on port 5282.\n   Upon receipt of a valid EPRT
    command, the server MUST return a code\n   of 200 (Command OK).  The standard
    negative error code 500 and 501\n   [PR85] are sufficient to handle most errors
    (e.g., syntax errors)\n   involving the EPRT command.  However, an additional
    error code is\n   needed.  The response code 522 indicates that the server does
    not\n   support the requested network protocol.  The interpretation of this\n
    \  new error code is:\n        5yz Negative Completion\n        x2z Connections\n
    \       xy2 Extended Port Failure - unknown network protocol\n   The text portion
    of the response MUST indicate which network\n   protocols the server does support.
    \ If the network protocol is\n   unsupported, the format of the response string
    MUST be:\n        <text stating that the network protocol is unsupported> \\\n
    \           (prot1,prot2,...,protn)\n   Both the numeric code specified above
    and the protocol information\n   between the characters '(' and ')' are intended
    for the software\n   automata receiving the response; the textual message between
    the\n   numeric code and the '(' is intended for the human user and can be\n   any
    arbitrary text, but MUST NOT include the characters '(' and ')'.\n   In the above
    case, the text SHOULD indicate that the network protocol\n   in the EPRT command
    is not supported by the server.  The list of\n   protocols inside the parenthesis
    MUST be a comma separated list of\n   address family numbers.  Two example response
    strings follow:\n        Network protocol not supported, use (1)\n        Network
    protocol not supported, use (1,2)\n"
  title: 2.  The EPRT Command
- contents:
  - "3.  The EPSV Command\n   The EPSV command requests that a server listen on a
    data port and\n   wait for a connection.  The EPSV command takes an optional argument.\n
    \  The response to this command includes only the TCP port number of the\n   listening
    connection.  The format of the response, however, is\n   similar to the argument
    of the EPRT command.  This allows the same\n   parsing routines to be used for
    both commands.  In addition, the\n   format leaves a place holder for the network
    protocol and/or network\n   address, which may be needed in the EPSV response
    in the future.  The\n   response code for entering passive mode using an extended
    address\n   MUST be 229.  The interpretation of this code, according to [PR85]\n
    \  is:\n        2yz Positive Completion\n        x2z Connections\n        xy9
    Extended Passive Mode Entered\n   The text returned in response to the EPSV command
    MUST be:\n        <text indicating server is entering extended passive mode> \\\n
    \           (<d><d><d><tcp-port><d>)\n   The portion of the string enclosed in
    parentheses MUST be the exact\n   string needed by the EPRT command to open the
    data connection, as\n   specified above.\n   The first two fields contained in
    the parenthesis MUST be blank.  The\n   third field MUST be the string representation
    of the TCP port number\n   on which the server is listening for a data connection.
    \ The network\n   protocol used by the data connection will be the same network\n
    \  protocol used by the control connection.  In addition, the network\n   address
    used to establish the data connection will be the same\n   network address used
    for the control connection.  An example response\n   string follows:\n        Entering
    Extended Passive Mode (|||6446|)\n   The standard negative error codes 500 and
    501 are sufficient to\n   handle all errors involving the EPSV command (e.g.,
    syntax errors).\n   When the EPSV command is issued with no argument, the server
    will\n   choose the network protocol for the data connection based on the\n   protocol
    used for the control connection.  However, in the case of\n   proxy FTP, this
    protocol might not be appropriate for communication\n   between the two servers.
    \ Therefore, the client needs to be able to\n   request a specific protocol.  If
    the server returns a protocol that\n   is not supported by the host that will
    be connecting to the port, the\n   client MUST issue an ABOR (abort) command to
    allow the server to\n   close down the listening connection.  The client can then
    send an\n   EPSV command requesting the use of a specific network protocol, as\n
    \  follows:\n        EPSV<space><net-prt>\n   If the requested protocol is supported
    by the server, it SHOULD use\n   the protocol.  If not, the server MUST return
    the 522 error messages\n   as outlined in section 2.\n   Finally, the EPSV command
    can be used with the argument \"ALL\" to\n   inform Network Address Translators
    that the EPRT command (as well as\n   other data commands) will no longer be used.
    \ An example of this\n   command follows:\n        EPSV<space>ALL\n   Upon receipt
    of an EPSV ALL command, the server MUST reject all data\n   connection setup commands
    other than EPSV (i.e., EPRT, PORT, PASV, et\n   al.).  This use of the EPSV command
    is further explained in section\n   4.\n"
  title: 3.  The EPSV Command
- contents:
  - "4.  Command Usage\n   For all FTP transfers where the control and data connection(s)
    are\n   being established between the same two machines, the EPSV command\n   MUST
    be used.  Using the EPSV command benefits performance of\n   transfers that traverse
    firewalls or Network Address Translators\n   (NATs).  RFC 1579 [Bel94] recommends
    using the passive command when\n   behind firewalls since firewalls do not generally
    allow incoming\n   connections (which are required when using the PORT (EPRT)
    command).\n   In addition, using EPSV as defined in this document does not require\n
    \  NATs to change the network address in the traffic as it is forwarded.\n   The
    NAT would have to change the address if the EPRT command was\n   used.  Finally,
    if the client issues an \"EPSV ALL\" command, NATs may\n   be able to put the
    connection on a \"fast path\" through the\n   translator, as the EPRT command
    will never be used and therefore,\n   translation of the data portion of the segments
    will never be needed.\n   When a client only expects to do two-way FTP transfers,
    it SHOULD\n   issue this command as soon as possible.  If a client later finds
    that\n   it must do a three-way FTP transfer after issuing an EPSV ALL\n   command,
    a new FTP session MUST be started.\n"
  title: 4.  Command Usage
- contents:
  - "5.  Security Issues\n   The authors do not believe that these changes to FTP
    introduce new\n   security problems.  A companion Work in Progress [AO98] is a
    more\n   general discussion of FTP security issues and techniques to reduce\n
    \  these security problems.\n"
  title: 5.  Security Issues
- contents:
  - "6.  Conclusions\n   The extensions specified in this paper will enable FTP to
    operate\n   over a variety of network protocols.\n"
  title: 6.  Conclusions
- contents:
  - "References\n   [AO98]   Allman, M., and S. Ostermann, \"FTP Security\n            Considerations\",
    Work in Progress.\n   [Bel94]  Bellovin, S., \"Firewall-Friendly FTP\", RFC 1579,
    February\n            1994.\n   [Bra97]  Bradner, S., \"Key words for use in RFCs
    to Indicate\n            Requirement Levels\", BCP 14, RFC 2119, March 1997.\n
    \  [DH96]   Deering, S., and R. Hinden, \"Internet Protocol, Version 6\n            (IPv6)
    Specification\", RFC 1883, December 1995.\n   [HD96]   Hinden, R., and S. Deering,
    \"IP Version 6 Addressing\n            Architecture\", RFC 2373, July 1998.\n
    \  [Pis94]  Piscitello, D., \"FTP Operation Over Big Address Records\n            (FOOBAR)\",
    RFC 1639, June 1994.\n   [Pos81a] Postel, J., \"Internet Protocol\", STD 5, RFC
    791, September\n            1981.\n   [Pos81b] Postel, J., \"Transmission Control
    Protocol\", STD 7, RFC 793,\n            September 1981.\n   [PR85]   Postel,
    J., and J. Reynolds, \"File Transfer Protocol (FTP)\",\n            STD 9, RFC
    959, October 1985.\n   [RP94]   Reynolds, J., and J. Postel, \"Assigned Numbers\",
    STD 2, RFC\n            1700, October 1994.  See also:\n            http://www.iana.org/numbers.html\n"
  title: References
- contents:
  - "Authors' Addresses\n   Mark Allman\n   NASA Lewis Research Center/Sterling Software\n
    \  21000 Brookpark Rd.  MS 54-2\n   Cleveland, OH  44135\n   Phone: (216) 433-6586\n
    \  EMail: mallman@lerc.nasa.gov\n   http://gigahertz.lerc.nasa.gov/~mallman/\n
    \  Shawn Ostermann\n   School of Electrical Engineering and Computer Science\n
    \  Ohio University\n   416 Morton Hall\n   Athens, OH  45701\n   Phone: (740)
    593-1234\n   EMail: ostermann@cs.ohiou.edu\n   Craig Metz\n   The Inner Net\n
    \  Box 10314-1954\n   Blacksburg, VA  24062-0314\n   Phone:  (DSN) 754-8590\n
    \  EMail: cmetz@inner.net\n"
  title: Authors' Addresses
- contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (1998).  All
    Rights Reserved.\n   This document and translations of it may be copied and furnished
    to\n   others, and derivative works that comment on or otherwise explain it\n
    \  or assist in its implementation may be prepared, copied, published\n   and
    distributed, in whole or in part, without restriction of any\n   kind, provided
    that the above copyright notice and this paragraph are\n   included on all such
    copies and derivative works.  However, this\n   document itself may not be modified
    in any way, such as by removing\n   the copyright notice or references to the
    Internet Society or other\n   Internet organizations, except as needed for the
    purpose of\n   developing Internet standards in which case the procedures for\n
    \  copyrights defined in the Internet Standards process must be\n   followed,
    or as required to translate it into languages other than\n   English.\n   The
    limited permissions granted above are perpetual and will not be\n   revoked by
    the Internet Society or its successors or assigns.\n   This document and the information
    contained herein is provided on an\n   \"AS IS\" basis and THE INTERNET SOCIETY
    AND THE INTERNET ENGINEERING\n   TASK FORCE DISCLAIMS ALL WARRANTIES, EXPRESS
    OR IMPLIED, INCLUDING\n   BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF THE
    INFORMATION\n   HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED WARRANTIES
    OF\n   MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.\n"
  title: Full Copyright Statement
