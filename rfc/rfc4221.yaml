- title: __initial_text__
  contents:
  - '        Multiprotocol Label Switching (MPLS) Management Overview

    '
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard of any kind.  Distribution of\
    \ this\n   memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2005).\n"
- title: Abstract
  contents:
  - "Abstract\n   A range of Management Information Base (MIB) modules has been\n\
    \   developed to help model and manage the various aspects of\n   Multiprotocol\
    \ Label Switching (MPLS) networks.  These MIB modules are\n   defined in separate\
    \ documents that focus on the specific areas of\n   responsibility of the modules\
    \ that they describe.\n   This document describes the management architecture\
    \ for MPLS and\n   indicates the interrelationships between the different MIB\
    \ modules\n   used for MPLS network management.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n      4.10. TE-LINK-STD-MIB ...........................................7\n\
    \      4.11. MIB Module Interdependencies ..............................8\n  \
    \    4.12. Dependencies on External MIB Modules ......................9\n   5.\
    \ Tables, Scalars, and Notifications in MPLS-LSR-STD-MIB .........10\n      5.1.\
    \ Tables ....................................................10\n      5.2. Scalars\
    \ ...................................................10\n      5.3. Indexing ..................................................11\n\
    \      5.4. Notifications .............................................12\n  \
    \    5.5. Dependencies between MIB Module Tables ....................12\n   6.\
    \ Tables, Scalars, and Notifications in the LDP MIB ..............13\n      6.1.\
    \ MIB Modules ...............................................13\n      6.2. Tables\
    \ ....................................................14\n      6.3. Scalars ...................................................15\n\
    \      6.4. Notifications .............................................15\n  \
    \    6.5. Dependencies between MIB Module Tables ....................15\n   7.\
    \ Tables, Scalars, and Notifications in MPLS-TE-STD-MIB ..........16\n      7.1.\
    \ Tables ....................................................16\n      7.2. Scalars\
    \ ...................................................17\n      7.3. Notifications\
    \ .............................................18\n      7.4. Dependencies between\
    \ MIB Module Tables ....................18\n   8. Tables, Scalars, and Notifications\
    \ in MPLS-FTN-STD-MIB .........18\n      8.1. Tables ....................................................18\n\
    \      8.2. Scalars ...................................................19\n  \
    \    8.3. Notifications .............................................19\n    \
    \  8.4. Dependencies between MIB Module Tables ....................19\n   9. Tables\
    \ and Objects in TE-LINK-STD-MIB ..........................19\n      9.1. Tables\
    \ ....................................................19\n      9.2. Scalars ...................................................20\n\
    \      9.3. Notifications .............................................20\n  \
    \    9.4. Dependencies between MIB Module Tables ....................20\n   10.\
    \ Table Dependencies between MPLS MIB Modules ...................21\n   11. A\
    \ Note on Interfaces ..........................................21\n      11.1.\
    \ MPLS Tunnels as Interfaces ...............................21\n      11.2. Application\
    \ of the Interfaces Group to TE Links ..........22\n      11.3. References to\
    \ Interface MIB Objects from MPLS MIB\n            Modules ..................................................23\n\
    \   12. Management Options ............................................24\n  \
    \ 13. Related IETF MIB Modules ......................................25\n    \
    \  13.1. PWE3 Working Group MIB Modules ...........................26\n      13.2.\
    \ PPVPN Working Group MIB Modules ..........................26\n           13.2.1.\
    \ PPVPN-MPLS-VPN-STD-MIB ............................26\n      13.3. CCAMP Working\
    \ Group MIB Modules ..........................26\n   14. Traffic Engineering Working\
    \ Group TE MIB ......................27\n      14.1. Choosing between TE MIB Modules\
    \ ..........................27\n   15. Security Considerations .......................................28\n\
    \   16. Acknowledgements ..............................................28\n  \
    \ 17. Normative References ..........................................29\n   18.\
    \ Informative References ........................................30\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   This document describes the Management Architecture for\
    \ Multi-\n   Protocol Label Switching (MPLS) [RFC3031].  In particular, it\n \
    \  describes how the managed objects defined in various MPLS-related\n   Management\
    \ Information Base (MIB) documents model different aspects\n   of MPLS.  Furthermore,\
    \ this document explains the interactions and\n   dependencies between each of\
    \ these MIB modules.\n   For additional information, this document also includes\
    \ a brief note\n   on MIB modules produced by the Pseudo Wire Emulation Edge to\
    \ Edge\n   (PWE3), Provider Provisioned Virtual Private Network (PPVPN), Common\n\
    \   Control and Measurement Plane (CCAMP), and Internet Traffic\n   Engineering\
    \ (TEWG) working groups.\n   The document begins with a brief outline of the SNMP\
    \ framework.  This\n   is not intended to be a complete reference on SNMP, but\
    \ is provided\n   to give context to the rest of the document and to indicate\
    \ reference\n   material for readers that need to know more about SNMP.\n   This\
    \ document does not propose any additions to the MPLS MIB\n   framework, nor define\
    \ any standards for the Internet community.  It\n   is an informational document.\
    \  In all cases, the reader is advised to\n   turn to the document that defines\
    \ the MIB module in question for\n   further information.\n   Comments should\
    \ be made directly to the MPLS mailing list at\n   mpls@uu.net.\n"
- title: 2.  Terminology
  contents:
  - "2.  Terminology\n   This document uses terminology from the MPLS architecture\
    \ document\n   [RFC3031] and the following MPLS related MIB modules: MPLS TC MIB\n\
    \   [TCMIB], MPLS LSR MIB [LSRMIB], MPLS TE MIB [TEMIB], MPLS LDP MIB\n   [LDPMIB],\
    \ MPLS FTN MIB [FTNMIB], TE LINK MIB [TELMIB], and PPVPN MPLS\n   VPN MIB [VPNMIB].\n\
    \   Throughout this document hyphenated MIB names (such as MPLS-TE-STD-\n   MIB)\
    \ should be taken to refer to specific MIB modules.  Non-\n   hyphenated MIB names\
    \ (such as MPLS LDP MIB) indicate MIB documents.\n"
- title: 3.  The SNMP Management Framework
  contents:
  - "3.  The SNMP Management Framework\n   For a detailed overview of the documents\
    \ that describe the current\n   Internet-Standard Management Framework, please\
    \ refer to section 7 of\n   RFC 3410 [RFC3410].\n   Managed objects are accessed\
    \ via a virtual information store, termed\n   the Management Information Base\
    \ or MIB.  MIB objects are generally\n   accessed through the Simple Network Management\
    \ Protocol (SNMP).\n   Objects in the MIB are defined using the mechanisms defined\
    \ in the\n   Structure of Management Information (SMI).  This document specifies\
    \ a\n   MIB module that is compliant to the SMIv2, which is described in STD\n\
    \   58, RFC 2578 [RFC2578], STD 58, RFC 2579 [RFC2579] and STD 58, RFC\n   2580\
    \ [RFC2580].\n"
- title: 4.  An Introduction to the MPLS Working Group MIB Modules
  contents:
  - "4.  An Introduction to the MPLS Working Group MIB Modules\n   This section addresses\
    \ the MIB documents produced by the MPLS working\n   group, namely MPLS TC MIB,\
    \ MPLS LSR MIB, MPLS TE MIB, MPLS LDP MIB,\n   MPLS FTN MIB, and TE LINK MIB.\
    \  The rest of this section briefly\n   describes the following:\n   -  the MPLS\
    \ Object Identifier (OID) tree structure and the position\n      of different\
    \ MPLS related MIB modules on this tree;\n   -  the purpose of each of the MIB\
    \ modules within the MIB documents,\n      what it can be used for, and how it\
    \ relates to the other MIB\n      modules.\n   Note that each MIB document contains\
    \ one or more compliance\n   statements for the modules and objects that it defines.\
    \  Therefore,\n   the support for the different MIB modules and objects is beyond\
    \ the\n   scope of this document, although some recommendations are included in\n\
    \   the sections that follow.\n"
- title: 4.1.  Structure of the MPLS MIB OID Tree
  contents:
  - "4.1.  Structure of the MPLS MIB OID Tree\n   The MPLS MIB OID tree has the following\
    \ structure.\n      transmission -- RFC 2578 [RFC2578]\n        |\n        +-\
    \ mplsStdMIB -- MPLS-TC-STD-MIB\n        |    |\n        |    +- mplsTCStdMIB\
    \ -- MPLS-TC-STD-MIB\n        |    |\n        |    +- mplsLsrStdMIB -- MPLS-LSR-STD-MIB\n\
    \        |    |\n        |    +- mplsTeStdMIB -- MPLS-TE-STD-MIB\n        |  \
    \  |\n        |    +- mplsLdpStdMIB -- MPLS-LDP-STD-MIB\n        |    |\n    \
    \    |    +- mplsLdpAtmStdMIB -- MPLS-LDP-ATM-STD-MIB\n        |    |\n      \
    \  |    +- mplsLdpFrameRelayStdMIB -- MPLS-LDP-FRAME-RELAY-STD-MIB\n        |\
    \    |\n        |    +- mplsLdpGenericStdMIB -- MPLS-LDP-GENERIC-STD-MIB\n   \
    \     |    |\n        |    +- mplsFTNStdMIB -- MPLS-FTN-STD-MIB\n        |\n \
    \       +- teLinkStdMIB -- TE-LINK-STD-MIB\n   Note: The OIDs for MIB modules\
    \ are assigned and managed by IANA.\n   They can be found in the referenced MIB\
    \ documents.\n"
- title: 4.2.  MPLS-TC-STD-MIB
  contents:
  - "4.2.  MPLS-TC-STD-MIB\n   MPLS-TC-STD-MIB defines textual conventions [RFC2579]\
    \ that may be\n   common to MPLS-related MIB modules.  These conventions allow\
    \ multiple\n   MIB modules to use the same syntax and format for a concept that\
    \ is\n   shared between the MIB modules.\n   For example, labels are a central\
    \ part of MPLS and need to be\n   presented in many of the MIB modules.  The textual\
    \ convention for\n   representing an MPLS label is defined in MPLS-TC-STD-MIB.\n\
    \   All of the other MPLS MIB modules import textual conventions from\n   this\
    \ MIB module.\n"
- title: 4.3.  MPLS-LSR-STD-MIB
  contents:
  - "4.3.  MPLS-LSR-STD-MIB\n   MPLS-LSR-STD-MIB describes managed objects for modeling\
    \ an MPLS Label\n   Switching Router (LSR).  This puts it at the heart of the\
    \ management\n   architecture for MPLS.\n   This MIB module is used to model and\
    \ manage the basic label switching\n   behavior of an MPLS LSR.  It represents\
    \ the label forwarding\n   information base (LFIB) of the LSR and provides a view\
    \ of the LSPs\n   that are being switched by the LSR in question.\n   Since basic\
    \ MPLS label switching is common to all MPLS applications,\n   this MIB module\
    \ is referenced by many of the other MPLS MIB modules.\n   In general, MPLS-LSR-STD-MIB\
    \ provides a model of incoming labels on\n   MPLS-enabled interfaces being mapped\
    \ to outgoing labels on MPLS-\n   enabled interfaces via a conceptual object called\
    \ an MPLS cross-\n   connect.  MPLS cross-connect entries and their properties\
    \ are\n   represented in MPLS-LSR-STD-MIB and are typically referenced by other\n\
    \   MIB modules in order to refer to the underlying MPLS LSP.\n   For example,\
    \ MPLS-TE-STD-MIB models traffic-engineered tunnels.\n   These tunnels map to\
    \ one or more underlying MPLS LSPs.  MPLS-TE-STD-\n   MIB refers to the underlying\
    \ LSPs by pointing to cross-connect\n   entries in MPLS-LSR-STD-MIB.\n"
- title: 4.4.  MPLS-LDP-STD-MIB
  contents:
  - "4.4.  MPLS-LDP-STD-MIB\n   MPLS-LDP-STD-MIB describes managed objects used to\
    \ model and manage\n   the MPLS Label Distribution Protocol (LDP) [RFC3036]. \
    \ LDP is one of\n   the MPLS protocols used to distribute labels and establish\
    \ LSPs.\n   This MIB module contains objects common to all LDP implementations.\n\
    \   For an LDP implementation that provides standard MIB support, this\n   MIB\
    \ module provides the core set of objects that are needed, along\n   with one\
    \ or more of the other LDP MIB modules from the following\n   sections.\n"
- title: 4.5.  MPLS-LDP-GENERIC-STD-MIB
  contents:
  - "4.5.  MPLS-LDP-GENERIC-STD-MIB\n   This MIB module provides objects for managing\
    \ the LDP Per Platform\n   Label Space and is typically implemented along with\
    \ the MPLS-LDP-\n   STD-MIB module.  This MIB Module contains tables for configuring\
    \ MPLS\n   Generic Label Ranges.  Although the LDP Specification does not\n  \
    \ provide a way to configure Label Ranges for Generic Labels, the MIB\n   module\
    \ does provide a way to reserve a range of generic labels\n   because the working\
    \ group thought this was useful.\n"
- title: 4.6.  MPLS-LDP-ATM-STD-MIB
  contents:
  - "4.6.  MPLS-LDP-ATM-STD-MIB\n   This MIB module is typically supported along with\
    \ MPLS-LDP-STD-MIB by\n   LDP implementations if LDP uses ATM as the Layer 2 medium.\
    \  Tables in\n   this MIB module allow for configuring LDP to use ATM.\n"
- title: 4.7.  MPLS-LDP-FRAME-RELAY-STD-MIB
  contents:
  - "4.7.  MPLS-LDP-FRAME-RELAY-STD-MIB\n   This MIB module is typically supported\
    \ along with MPLS-LDP-STD-MIB by\n   LDP implementations if LDP uses Frame Relay\
    \ as the Layer 2 medium.\n   Tables in this MIB module allow for configuration\
    \ of LDP to use Frame\n   Relay.\n"
- title: 4.8.  MPLS-TE-STD-MIB
  contents:
  - "4.8.  MPLS-TE-STD-MIB\n   MPLS-TE-STD-MIB describes managed objects that are\
    \ used to model and\n   manage MPLS Traffic Engineered (TE) Tunnels.\n   This\
    \ MIB module is based on a table that represents TE tunnels that\n   either originate\
    \ from, traverse via, or terminate on the LSR in\n   question.  The MIB module\
    \ provides configuration and statistics\n   objects needed for TE tunnels.\n"
- title: 4.9.  MPLS-FTN-STD-MIB
  contents:
  - "4.9.  MPLS-FTN-STD-MIB\n   MPLS-FTN-STD-MIB describes managed objects that are\
    \ used to model and\n   manage the MPLS FEC-to-NHLFE (FTN) mappings that take\
    \ place at an\n   ingress Label Edge Router (LER).\n   An LER is an LSR placed\
    \ at the edge of an MPLS domain, and it passes\n   traffic into and out of the\
    \ MPLS domain.  An ingress LER is\n   responsible for classifying data and assigning\
    \ it to a suitable LSP\n   or tunnel.\n   This classification is done using Forwarding\
    \ Equivalence Classes\n   (FECs) that define the common attributes of data (usually\
    \ packets)\n   that will be treated in the same way.  Once data has been classified,\n\
    \   it can be handed off to an LSP or tunnel through the Next Hop Label\n   Forwarding\
    \ Entry (NHLFE).\n   In the case of an IP-to-MPLS mapping, the FEC objects describe\
    \ IP\n   6-tuples that represent source and destination address ranges, source\n\
    \   and destination port ranges, the IPv4 Protocol field or IPv6 next-\n   header\
    \ field, and the DiffServ Code Point (DSCP).\n"
- title: 4.10.  TE-LINK-STD-MIB
  contents:
  - "4.10.  TE-LINK-STD-MIB\n   TE-LINK-STD-MIB describes managed objects that are\
    \ used to model and\n   manage TE links, including bundled links, in an MPLS network.\n\
    \   The TE link feature is designed to aggregate one or more similar data\n  \
    \ channels or TE links between a pair of LSRs.  A TE link is a sub-\n   interface\
    \ capable of carrying traffic-engineered MPLS traffic.\n   A bundled link is a\
    \ sub-interface that bonds the traffic of a group\n   of one or more TE links.\n"
- title: 4.11.  MIB Module Interdependencies
  contents:
  - "4.11.  MIB Module Interdependencies\n   This section provides an overview of\
    \ the relationship between the\n   MPLS MIB modules described above.  More details\
    \ of these\n   relationships are given below after the MIB modules have been\n\
    \   discussed in more detail.\n   The arrows in the following diagram show a 'depends\
    \ on' relationship.\n   A relationship \"MIB module A depends on MIB module B\"\
    \ means that MIB\n   module A uses an object, object identifier, or textual convention\n\
    \   defined in MIB module B, or that MIB module A contains a pointer\n   (index\
    \ or RowPointer) to an object in MIB module B.\n   +-------> MPLS-TC-STD-MIB\n\
    \   |            ^\n   |            |\n   |         MPLS-LSR-STD-MIB <------------------+\n\
    \   |                                             |\n   +<-----------------------\
    \ MPLS-LDP-STD-MIB -->+\n   |                                    ^        |\n\
    \   |                                    |        |\n   +<-- MPLS-LDP-GENERIC-STD-MIB\
    \ ------>+        |\n   |                                    |        |\n   +<--\
    \ MPLS-LDP-ATM-STD-MIB ---------->+        |\n   |                           \
    \         |        |\n   +<-- MPLS-LDP-FRAME-RELAY-STD-MIB -->+        |\n   |\
    \                                             |\n   +<------- MPLS-TE-STD-MIB\
    \ ------------------->+\n   |            ^                                |\n\
    \   |            |                                |\n   +<------- MPLS-FTN-STD-MIB\
    \ ------------------>+\n   Thus:\n   -  All the MPLS MIB modules depend on MPLS-TC-STD-MIB.\n\
    \   -  MPLS-LDP-STD-MIB, MPLS-TE-STD-MIB, and MPLS-FTN-STD-MIB contain\n     \
    \ references to objects in MPLS-LSR-STD-MIB.\n   -  MPLS-LDP-GENERIC-STD-MIB,\
    \ MPLS-LDP-ATM-STD-MIB, and MPLS-LDP-\n      FRAME-RELAY-STD-MIB contain references\
    \ to objects in MPLS-LDP-\n      STD-MIB.\n   -  MPLS-FTN-STD-MIB contains references\
    \ to objects in MPLS-TE-STD-\n      MIB.\n   Note that there is a textual convention\
    \ (MplsIndexType) defined in\n   MPLS-LSR-STD-MIB that is imported by MPLS-LDP-STD-MIB.\n"
- title: 4.12.  Dependencies on External MIB Modules
  contents:
  - "4.12.  Dependencies on External MIB Modules\n   With the exception of MPLS-TC-STD-MIB,\
    \ all the MPLS MIB modules have\n   dependencies on the Interfaces MIB [RFC2863].\
    \  MPLS-FTN-STD-MIB\n   references IP-capable interfaces on which received traffic\
    \ is to be\n   classified using indexes in the Interface Table (ifTable) of IF-MIB\n\
    \   [RFC2863].  The other MPLS MIB modules reference MPLS-capable\n   interfaces\
    \ in ifTable.\n   The Interfaces Group of IF-MIB [RFC2863] defines generic managed\n\
    \   objects for managing interfaces.  The MPLS MIB modules contain\n   media-specific\
    \ extensions to the Interfaces Group for managing MPLS\n   interfaces.\n   The\
    \ MPLS MIB modules assume the interpretation of the Interfaces\n   Group to be\
    \ in accordance with [RFC2863], which states that ifTable\n   contains information\
    \ on the managed resource's interfaces and that\n   each sub-layer below the internetwork\
    \ layer of a network interface is\n   considered an interface.  Thus, the MPLS\
    \ interface is represented as\n   an entry in ifTable.\n   The interrelation of\
    \ entries in ifTable is defined by the Interfaces\n   Stack Group defined in [RFC2863].\n\
    \   Additionally, MPLS-LDP-ATM-STD-MIB imports the textual convention\n   AtmVpIdentifier\
    \ from ATM-TC-MIB to represent an ATM virtual path\n   identifier, whereas MPLS-LDP-FRAME-RELAY-STD-MIB\
    \ imports the textual\n   convention DLCI from FRAME-RELAY-DTE-MIB to represent\
    \ a Data Link\n   Channel identifier.\n   MPLS-LDP-STD-MIB imports the textual\
    \ conventions IndexInteger and\n   IndexIntegerNextFree from [RFC3289], and MPLS-TE-STD-MIB\
    \ imports\n   IndexIntegerNextFree.  IndexInteger provides a standard arbitrary\n\
    \   index, whereas IndexIntegerNextFree is used by a management agent\n   that\
    \ needs to select an appropriate value for an arbitrary index.\n   Finally, all\
    \ of the MIB modules import standard textual conventions\n   such as integers,\
    \ strings, timestamps, etc., from the MIB modules in\n   which they are defined.\
    \  This is business as usual for a MIB module\n   and is not discussed further\
    \ in this document.\n"
- title: 5.  Tables, Scalars, and Notifications in MPLS-LSR-STD-MIB
  contents:
  - '5.  Tables, Scalars, and Notifications in MPLS-LSR-STD-MIB

    '
- title: 5.1.  Tables
  contents:
  - "5.1.  Tables\n   MPLS-LSR-STD-MIB contains the following tables.\n   -  The interface\
    \ configuration table (mplsInterfaceTable) is used for\n      enabling MPLS on\
    \ MPLS-capable interfaces.\n   -  The in-segment (mplsInSegmentTable) and out-segment\n\
    \      (mplsOutSegmentTable) tables are used to configure and monitor LSP\n  \
    \    segments carrying data into and out of the LSR, respectively.\n   -  The\
    \ in-segment mapping table (mplsInSegmentMapTable) provides a\n      look-up table\
    \ that enables the discovery of an in-segment in\n      mplsInSegmentTable from\
    \ the known incoming interface and incoming\n      label.\n   -  The cross-connect\
    \ table (mplsXCTable) is used to associate in and\n      out segments in order\
    \ to form a cross-connect (i.e., to represent\n      an LSP transiting the LSR).\n\
    \   -  The label stack table (mplsLabelStackTable) allows the\n      specification\
    \ of multi-label stacks to be imposed on a given LSP\n      at this LSR.\n   -\
    \  The MPLS in-segment (mplsInSegmentPerfTable) and out-segment\n      (mplsOutSegmentPerfTable)\
    \ performance tables contain objects to\n      measure the performance of LSPs.\n\
    \   -  The MPLS interface performance table (mplsInterfacePerfTable) has\n   \
    \   objects to measure MPLS performance on a per-interface basis.\n"
- title: 5.2.  Scalars
  contents:
  - "5.2.  Scalars\n   Where tables in the MIB module have arbitrary indexes, scalars\
    \ are\n   provided to supply the next available index.  This applies to\n   mplsInSegmentTable,\
    \ mplsOutSegmentTable, mplsXCTable, and\n   mplsLabelStackTable, but see the section\
    \ on indexing, below.\n   mplsMaxLabelStackDepth defines the maximum size of a\
    \ imposed label\n   stack supported at this LSR (and not, as the description in\
    \ MPLS-\n   LSR-STD-MIB states, the maximum label stack depth supported by the\n\
    \   LSR).\n   mplsXCNotificationsEnable is used to enable and disable notifications\n\
    \   from MPLS-LSR-STD-MIB.\n"
- title: 5.3.  Indexing
  contents:
  - "5.3.  Indexing\n   Note that the indexing used by the tables in MPLS-LSR-STD-MIB\
    \ is\n   unusual.  A specific textual convention, MplsIndexType, is defined in\n\
    \   the MIB module and is used as the type for indexes to\n   mplsInSegmentTable,\
    \ mplsOutSegmentTable, mplsXCTable, and\n   mplsLabelStackTable.  The textual\
    \ convention is defined as an octet\n   string of between one and twenty-four\
    \ octets, inclusive.\n   Although this convention can be used to map simple integers\
    \ and so\n   preserve the normal indexing techniques, it may also be used to\n\
    \   encode more complex indexing rules that may be useful to\n   implementations\
    \ that subdivide their label spaces according to\n   physical or implementation\
    \ constraints (such as placing the\n   responsibility for a subset of labels with\
    \ a line card).\n   Note that it would be unusual, but not impossible, to make\n\
    \   sophisticated use of these indexes in a write-access MIB since the\n   'next'\
    \ index value would be hard to determine.  Thus, non-simple\n   values are likely\
    \ only to be used in read-only MIBs in which the\n   indexes are generated as\
    \ a result of signaling protocol\n   implementations or other configuration means.\
    \  The formatting and\n   interpretation of non-simple indexes is out of the scope\
    \ of the MIB\n   module definition and is expected to be part of the manageability\n\
    \   statement for a particular device.  When the formatting is not known\n   by\
    \ an agent, it should treat the index as a plain octet string\n   containing an\
    \ integer of between one and twenty-four octets.\n   As described in the previous\
    \ section, scalars are provided to allow\n   agents to discover a suitable value\
    \ to use as an index when creating\n   a new row in one of these tables.  These\
    \ scalars all use a second\n   textual convention, MplsIndexNextType, also defined\
    \ within MPLS-LSR-\n   STD-MIB.  This textual convention allows the 'null string',\
    \ (that is,\n   a string of length one octet with value 0x00).  The null string\
    \ is\n   used to indicate that either write access is not supported or no more\n\
    \   indexes are currently available.\n   Note that the usage of the nextIndex\
    \ scalars is such that at any time\n   a scalar supplies a value that is currently\
    \ unused as an index to the\n   specific table.  In order to avoid lacunae in\
    \ the indexing of a table\n   under normal usage, implementations are recommended\
    \ to change the\n   value in an nextIndex scalar only when the index is used (that\
    \ is,\n   when a row is created) and not when the nextIndex scalar is read.  In\n\
    \   a 'busy' table, this may result in row creation attempts failing and\n   agents\
    \ having to re-read the scalar before making a second row\n   creation attempt.\
    \  The desire to avoid this issue is in opposition to\n   the desire to avoid\
    \ lacunae.\n"
- title: 5.4.  Notifications
  contents:
  - "5.4.  Notifications\n   MPLS-LSR-STD-MIB can issue two notifications (if notifications\
    \ are\n   enabled).\n   -  mplsXCUp reports when a cross-connect becomes active.\n\
    \   -  mplsXCDown reports when a cross-connect becomes\n      inactive.\n"
- title: 5.5.  Dependencies between MIB Module Tables
  contents:
  - "5.5.  Dependencies between MIB Module Tables\n   The tables in MPLS-LSR-STD-MIB\
    \ are related as shown on the diagram\n   below.  The arrows indicate a reference\
    \ from one table to another.\n   Note that the various MIB tables contain two\
    \ instances of pointers to\n   external tables that are not currently defined.\
    \  Entries in an\n   external Traffic Parameters Table (external_Traffic_Table)\
    \ are\n   pointed to using RowPointers from the mplsInSegmentTable\n   (mplsInSegmentTrafficParamPtr)\
    \ and from the mplsOutSegmentTable\n   (mplsOutSegmentTrafficParamPtr) to allow\
    \ representation of the\n   traffic parameters for the MPLS segment.  Alternatively,\
    \ the pointers\n   may indicate an entry in the Tunnel Resource Table\n   (mplsTunnelResourceTable)\
    \ in MPLS-TE-STD-MIB.  Similarly, an external\n   label table may be used to store\
    \ label values if, for some reason,\n   they are not stored in place within the\
    \ LSR MIB tables.  This might\n   occur if extra per-label space information needs\
    \ to be stored, and it\n   paves the way for GMPLS where labels cannot always\
    \ be stored in a\n   32-bit value.  RowPointers are used from the mplsInSegmentTable\n\
    \   (mplsInSegmentLabelPtr), the mplsOutSegmentTable\n   (mplsOutSegmentTopLabelPtr),\
    \ and from the mplsLabelStackTable\n   (mplsLabelStackLabelPtr).\n           \
    \           mplsInterfacePerfTable\n                                 ^\n     \
    \                            |\n                                 V\n         \
    \               mplsInterfaceTable\n                         ^              ^\n\
    \   mplsInSegmentMapTable |              | mplsLabelStackTable\n             |\
    \           |              |           ^     |\n             |      +----+   \
    \           +----+      |     |\n             |      |                       \
    \ |      |     |\n             |      | external_Traffic_Table |      |     |\n\
    \             |      |   ^                ^   |      |     |\n             V \
    \     |   |                |   |      |     |\n            mplsInSegmentTable\
    \        mplsOutSegmentTable |\n             |  ^   ^                        ^\
    \   ^     |  |\n             |  |   |                        |   |     |  V\n\
    \      +------+  |   +----> mplsXCTable  <----+   |     +--+\n      |        \
    \ V                                V        |\n      | mplsInSegmentPerfTable\
    \    mplsOutSegmentPerfTable |\n      |                                      \
    \             |\n      +--------------> external_Label_Table <-------------+\n"
- title: 6. Tables, Scalars, and Notifications in the LDP MIB
  contents:
  - '6. Tables, Scalars, and Notifications in the LDP MIB

    '
- title: 6.1.  MIB Modules
  contents:
  - "6.1.  MIB Modules\n   The MIB document for LDP contains four MIB modules.  This\
    \ structure\n   makes it easier for an implementation to select only those modules\n\
    \   that are relevant to it.  The MIB Modules are MPLS-LDP-STD-MIB,\n   MPLS-LDP-GENERIC-STD-MIB,\
    \ MPLS-LDP-ATM-STD-MIB, and MPLS-LDP-FRAME-\n   RELAY-STD-MIB.\n   MPLS-LDP-STD-MIB\
    \ defines objects that are specific to LDP without any\n   Layer 2 objects.  MPLS-LDP-GENERIC-STD-MIB\
    \ defines Layer 2 Per\n   Platform Label Space objects for use with MPLS-LDP-STD-MIB\
    \ and for\n   use on Ethernet.  MPLS-LDP-ATM-STD-MIB defines Layer 2 Asynchronous\n\
    \   Transfer Mode (ATM) objects for use with MPLS-LDP-STD-MIB.  MPLS-\n   LDP-FRAME-RELAY-STD-MIB\
    \ defines Layer 2 FRAME-RELAY objects for use\n   with MPLS-LDP-STD-MIB.\n   The\
    \ MPLS-LDP-STD-MIB module provides the core support and is\n   typically supported\
    \ along with at least one of the Layer 2 MIB\n   modules.\n"
- title: 6.2.  Tables
  contents:
  - "6.2.  Tables\n   The tables in the LDP MIB for configuring the LDP behavior of\
    \ an LSR\n   are as follows.\n   -  The LDP Entity Table (mplsLdpEntityTable)\
    \ provides a way to\n      configure the LSR for using LDP.  There must be at\
    \ least one LDP\n      Entity for the LSR to support LDP.  Each entry/row in this\
    \ table\n      represents a single LDP Entity.\n   -  Several tables exist to\
    \ help configure LDP's use of labels.  These\n      are spread through the MIB\
    \ modules described in the previous\n      section.  They are: mplsLdpEntityGenLRTable,\n\
    \      mplsLdpEntityAtmParmsTable and mplsLdpEntityAtmLRTable,\n      mplsLdpEntityFrameRelayParmsTable\
    \ and mplsLdpEntityFrLRTable.\n      They are used to configure generic, ATM,\
    \ and Frame Relay labels as\n      their names suggest.\n   -  The LDP Peer Table\
    \ (mplsLdpPeerTable) is a read-only table that\n      contains information about\
    \ LDP Peers known to LDP Entities.\n   -  The LDP Hello Adjacencies Table (mplsLdpHelloAdjacencyTable)\
    \ is a\n      table of all adjacencies between all LDP Entities and all LDP\n\
    \      Peers.\n   -  Several tables exist to monitor and control LDP sessions.\
    \  The LDP\n      Session Table (mplsLdpSessionTable) represents sessions between\
    \ an\n      LDP Entity and a Peer.  mplsLdpAtmSesTable and\n      mplsLdpFrameRelaySesTable\
    \ contain session information specific to\n      ATM.\n   -  The MPLS LDP Session\
    \ Peer Address Table (mplsLdpSesPeerAddrTable)\n      stores addresses learned\
    \ after session initialization via Address\n      Message advertisement.\n   -\
    \  The LDP FEC Table (mplsFecTable) represents FEC (Forwarding\n      Equivalence\
    \ Class) information that may be in use on one or more\n      LSPs.  The LDP LSP\
    \ FEC Table (mplsLdpLspFecTable) shows the FECs\n      associated with each LSP.\n\
    \   -  MPLS-LDP-STD-MIB has a mapping table (mplsLdpLspTable) that maps\n    \
    \  the LDP MIB's representation of LDP sessions to the underlying LSR\n      MIB's\
    \ representation of the LSPs created by these sessions, by\n      pointing to\
    \ mplsInSegmentTable, mplsOutSegmentTable, and\n      mplsXCTable, respectively.\n\
    \   -  Statistics may be gathered through the LDP Entity Statistics Table\n  \
    \    (mplsLdpEntityStatsTable) and the LDP Session Statistics Table\n      (mplsLdpSesStatsTable).\n"
- title: 6.3.  Scalars
  contents:
  - "6.3.  Scalars\n   Where tables in the MIB modules have arbitrary indexes, scalars\
    \ are\n   provided to supply the next available index.  This applies to\n   mplsLdpEntityTable\
    \ and mplsFecTable.\n   Two scalars exist to configure the LSR.  The LSR ID is\
    \ set in\n   mplsLdpLsrId, and the loop detection capabilities are reported in\n\
    \   mplsLdpLsrLoopDetectionCapable.\n"
- title: 6.4.  Notifications
  contents:
  - "6.4.  Notifications\n   MPLS-LDP-STD-MIB defines four notifications that a device\
    \ can issue.\n   -  mplsLdpInitSesThresholdExceeded is reported when the number\
    \ of\n      Session Initialization messages exceeds a configured threshold.\n\
    \   -  mplsLdpPVLMismatch is issued if the Path Vector Limit for a\n      configured\
    \ Entity and Peer do not match.\n   -  mplsLdpSessionUp and mplsLdpSessionDown\
    \ report the transition of\n      Session state.\n   No scalar object is provided\
    \ to enable and disable notifications from\n   MPLS-LDP-STD-MIB.  Instead, the\
    \ implementer is referred to [RFC3413].\n"
- title: 6.5.  Dependencies between MIB Module Tables
  contents:
  - "6.5.  Dependencies between MIB Module Tables\n   The many tables in the four\
    \ LDP MIB modules are related as shown on\n   the diagram below.  The arrows indicate\
    \ a reference from one table to\n   another.  Note that in many cases the reference\
    \ is through an\n   augmentation of the referenced table.\n   mplsLdpEntityGenLRTable\
    \ ------------->+\n   mplsLdpEntityAtmParmsTable ---------->+\n   mplsLdpEntityAtmLRTable\
    \ ------------->+\n   mplsLdpEntityFrameRelayParmsTable --->+\n   mplsLdpEntityFrLRTable\
    \ -------------->+\n   mplsLdpEntityStatsTable ------------->+\n             \
    \                            |\n   mplsLdpHelloAdjacencyTable            |\n \
    \               |                        |\n                |  mplsLdpEntityTable\
    \ <--+\n                |      ^       ^\n                V      |       |\n \
    \           mplsLdpPeerTable <-+- mplsLdpSesPeerAddrTable\n                  \
    \     ^       |\n                       |       V\n                 mplsLdpSessionTable\n\
    \                              ^   ^\n                              |   |\n  \
    \ mplsLdpSesStatsTable ------+   +-- mplsLdpLspFecTable\n   mplsLdpAtmSesTable\
    \ --------+   |    |       |\n   mplsLdpFrameRelaySesTable--+   |    |       V\n\
    \                                  |    |    mplsFecTable\n                  \
    \                |    V\n                                  +-- mplsLdpLspTable\n"
- title: 7.  Tables, Scalars, and Notifications in MPLS-TE-STD-MIB
  contents:
  - '7.  Tables, Scalars, and Notifications in MPLS-TE-STD-MIB

    '
- title: 7.1.  Tables
  contents:
  - "7.1.  Tables\n   MPLS-TE-STD-MIB contains the following tables.\n   -  The Tunnel\
    \ Table (mplsTunnelTable) is used to configure and report\n      MPLS tunnels.\
    \  Note that reporting of tunnels in this table at\n      transit LSRs is optional.\n\
    \      Entries in mplsTunnelTable are indexed by four objects.  The\n      source\
    \ and destination LSR IDs give context to the entry, and an\n      index  (mplsTunnelIndex)\
    \ identifies the tunnel itself.  However,\n      the fourth index (mplsTunnelInstance)\
    \ may give rise to some\n      confusion since its usage is not clearly explained.\n\
    \      The description says: \"Uniquely identifies an instance of a\n      tunnel.\
    \  It is useful to identify multiple instances of tunnels\n      for the purposes\
    \ of backup and parallel tunnels.\" In the case of\n      backup tunnels, multiple\
    \ instances of the same tunnel may be\n      defined, but only one is active at\
    \ any time.  Different instances\n      may have different properties (such as\
    \ explicit routes), and one\n      instance may be set up to protect against failure\
    \ of another.\n      Parallel tunnels may be used to provide load sharing or\n\
    \      protection.\n      The mplsTunnelInstancePriority object is used to indicate\
    \ the\n      precedence of tunnels with the same LSR IDs and mplsTunnelIndex\n\
    \      value.  The mplsTunnelPrimaryInstance object gives a quick\n      reference\
    \ back to the preferred instance of the tunnel.\n      The mplsTunnelIndex value\
    \ is typically signaled as the Tunnel ID,\n      and the mplsTunnelInstance as\
    \ the LSP ID, in protocols where both\n      fields exist.  In protocols where\
    \ there is only one identifying\n      index (usually known as the LSP ID), only\
    \ the mplsTunnelIndex is\n      signaled.\n   -  The Resource Table (mplsTunnelResourceTable)\
    \ is used to configure\n      resources to be requested on this tunnel.  The CRLDP\
    \ resource\n      table (mplsTunnelCRLDPResTable) is used to request additional\n\
    \      resource details that are specific to tunnels signaled using CR-\n    \
    \  LDP.\n   -  The routes requested, computed, and actually used for a tunnel\
    \ are\n      found in the Tunnel Hop Table (mplsTunnelHopTable), Tunnel\n    \
    \  Computed Hop Table (mplsTunnelCHopTable), and Tunnel Actual Hop\n      Table\
    \ (mplsTunnelARHopTable).\n   -  Statistics about the performance of tunnels may\
    \ be gathered\n      through the Tunnel Performance Table (mplsTunnelPerfTable).\n"
- title: 7.2.  Scalars
  contents:
  - "7.2.  Scalars\n   Where tables in the MIB module have arbitrary indexes, scalars\
    \ are\n   provided to supply the next available index.  This applies to\n   mplsTunnelTable,\
    \ mplsTunnelResourceTable, and mplsTunnelHopTable.\n   Two scalars exist to configure\
    \ the support for MPLS tunnels on the\n   LSR.  mplsTunnelTEDistProto lists the\
    \ signaling methods and protocols\n   supported.  mplsTunnelMaxHops defines the\
    \ size of route that may be\n   configured on the LSR.\n   Two further scalars\
    \ enhance the statistics on the LSR by counting the\n   number of configured (mplsTunnelConfigured)\
    \ and active\n   (mplsTunnelActive) tunnels.\n   The scalar mplsTunnelNotificationMaxRate\
    \ is used to control the rate\n   at which notifications are issued from MPLS-TE-STD-MIB.\
    \  A rate of\n   zero means that notifications must not be issued.  If notifications\n\
    \   would be generated faster than the configured rate, an implementation\n  \
    \ may choose to discard notifications or to queue them for distribution\n   at\
    \ a quieter time.\n"
- title: 7.3.  Notifications
  contents:
  - "7.3.  Notifications\n   MPLS-TE-STD-MIB defines four notifications that a device\
    \ can issue.\n   The rate of dispatch of notifications is controlled as described\
    \ in\n   the previous section.\n   -  mplsTunnelUp and mplsTunnelDown report the\
    \ transition of Tunnel\n      state.\n   -  Rerouting and re-optimization of Tunnels\
    \ paths are reported by\n      mplsTunnelRerouted and mplsTunnelReoptimized.\n"
- title: 7.4.  Dependencies between MIB Module Tables
  contents:
  - "7.4.  Dependencies between MIB Module Tables\n   The tables in MPLS-TE-STD-MIB\
    \ are related as shown on the diagram\n   below.  The arrows indicate a reference\
    \ from one table to another.\n                        mplsTunnelPerfTable\n  \
    \                              ^\n                                |\n        \
    \                        V\n                         mplsTunnelTable\n       \
    \                      |      |\n                             V      |\n     \
    \   mplsTunnelResourceTable     +--> mplsTunnelHopTable\n              ^     \
    \                |\n              |                     +--> mplsTunnelCHopTable\n\
    \              V                     |\n   mplsTunnelCRLDPResTable          +-->\
    \ mplsTunnelARHopTable\n"
- title: 8.  Tables, Scalars, and Notifications in MPLS-FTN-STD-MIB
  contents:
  - '8.  Tables, Scalars, and Notifications in MPLS-FTN-STD-MIB

    '
- title: 8.1.  Tables
  contents:
  - "8.1.  Tables\n   MPLS-FTN-STD-MIB contains the following tables.\n   -  The FEC-to-NHLFE\
    \ Table (mplsFTNTable) defines the FEC to NHLFE\n      rules to be applied to\
    \ incoming packets, and the actions to be\n      taken on matching packets.\n\
    \   -  The FEC-to-NHLFE Mapping Table (mplsFTNMapTable) provides the\n      capability\
    \ to activate FTN rules defined in the mplsFTNTable on\n      specific interfaces\
    \ in the system.\n   -  Performance statistics for FTN rules are found in the\n\
    \      mplsFTNPerfTable.\n"
- title: 8.2.  Scalars
  contents:
  - "8.2.  Scalars\n   This MIB module contains the scalars mplsFTNTableLastChanged\
    \ and\n   mplsFTNMapTableLastChanged to indicate the last time an object\n   changed\
    \ in mplsFTNTable and mplsFTNMapTable, respectively.  Another\n   scalar, mplsFTNIndexNext,\
    \ is used to supply the next valid index for\n   creating new conceptual rows\
    \ in mplsFTNTable.\n"
- title: 8.3.  Notifications
  contents:
  - "8.3.  Notifications\n   There are no notifications in this MIB module.\n"
- title: 8.4.  Dependencies between MIB Module Tables
  contents:
  - "8.4.  Dependencies between MIB Module Tables\n   The tables in MPLS-FTN-STD-MIB\
    \ are related as shown on the diagram\n   below.  The arrows indicate a reference\
    \ from one table to another.\n                         mplsFTNTable\n        \
    \                      ^\n                              |\n                  \
    \     mplsFTNMapTable\n                              ^\n                     \
    \         |\n                       mplsFTNPerfTable\n"
- title: 9.  Tables and Objects in TE-LINK-STD-MIB
  contents:
  - '9.  Tables and Objects in TE-LINK-STD-MIB

    '
- title: 9.1.  Tables
  contents:
  - "9.1.  Tables\n   TE-LINK-STD-MIB contains the following tables.\n   -  The TE\
    \ link table (teLinkTable) is used to specify TE links,\n      including bundled\
    \ links, and their generic traffic-engineering\n      parameters.\n   -  The TE\
    \ link descriptor table (teLinkDescriptorTable) is used to\n      list the TE\
    \ link descriptors.\n   -  The shared risk link group (SRLG) table (teLinkSrlgTable)\
    \ is used\n      to specify the SRLGs associated with TE links.\n   -  The TE\
    \ link bandwidth table (teLinkBandwidthTable) is used to\n      report priority-based\
    \ bandwidth values associated with TE links.\n   -  The component link table (componentLinkTable)\
    \ is used to identify\n      the data-bearing component links that are associated\
    \ with the TE\n      links and specify the data-bearing link generic traffic\n\
    \      engineering parameters.\n   -  The component link descriptor table (componentLinkDescriptorTable)\n\
    \      is used to list the data-bearing component link descriptors.\n   -  The\
    \ component link bandwidth table (componentLinkBandwidthTable)\n      is used\
    \ to report priority-based bandwidth values associated with\n      data-bearing\
    \ component links.\n"
- title: 9.2.  Scalars
  contents:
  - "9.2.  Scalars\n   There are no scalars in this MIB module.\n"
- title: 9.3.  Notifications
  contents:
  - "9.3.  Notifications\n   There are no notifications in this MIB module.\n"
- title: 9.4.  Dependencies between MIB Module Tables
  contents:
  - "9.4.  Dependencies between MIB Module Tables\n   The tables in TE-LINK-STD-MIB\
    \ are related as shown on the diagram\n   below.  The arrows indicate a reference\
    \ from one table to another.\n   Note that many of the associations between tables\
    \ are through a\n   common index that is the ifIndex of the related interface.\n\
    \                   teLinkTable\n                            ^\n             \
    \               |\n   teLinkDescriptorTable ---+\n                           \
    \ |\n   teLinkSrlgTable ---------+\n                            |\n   teLinkBandwidthTable\
    \ ----+\n                   componentLinkTable\n                             \
    \      ^\n                                   |\n   componentLinkDescriptorTable\
    \ ---+\n                                   |\n   componentLinkBandwidthTable ----+\n"
- title: 10.  Table Dependencies between MPLS MIB Modules
  contents:
  - "10.  Table Dependencies between MPLS MIB Modules\n   Section 4.11 gave an overview\
    \ of how the MPLS MIB modules are\n   related.  Now that the tables in the MIB\
    \ modules have been\n   introduced, it is possible to give a more detailed diagram\
    \ of these\n   relationships.\n   MPLS-TC-STD-MIB is left off the diagram because\
    \ many of the MIB\n   module tables use textual conventions from that MIB module.\n\
    \             mplsLsrXCTable   mplsLsrInSegmentTable\n                       \
    \  ^     ^\n                         |     |\n                         +---- mplsLdpLspTable\n\
    \                         |     |\n   mplsTunnelTable ------+     V\n      ^ \
    \                 |    mplsLsrOutSegmentTable\n      |                  |\n  \
    \ mplsFTNTable ---------+\n"
- title: 11.  A Note on Interfaces
  contents:
  - "11.  A Note on Interfaces\n   The Interfaces Group of IF-MIB [RFC2863] defines\
    \ generic managed\n   objects for managing interfaces.  The MPLS MIB modules make\n\
    \   references to interfaces so that it can be clearly determined where\n   the\
    \ procedures managed by the MIB modules should be performed.\n   Additionally,\
    \ the MPLS MIB modules (notably MPLS-TE-STD-MIB and TE-\n   LINK-STD-MIB) utilize\
    \ interface stacking within the Interface Group.\n"
- title: 11.1.  MPLS Tunnels as Interfaces
  contents:
  - "11.1.  MPLS Tunnels as Interfaces\n   MPLS-TE-STD-MIB builds on the concept of\
    \ managing MPLS Tunnels as\n   logical interfaces.  [RFC2863] states that the\
    \ interfaces table\n   (ifTable) contains information on the managed resource's\
    \ interfaces,\n   and that each sub-layer below the internetwork layer of a network\n\
    \   interface is considered an interface.  Thus, an MPLS Tunnel managed\n   as\
    \ an interface is represented as an entry in the ifTable.  The\n   interrelation\
    \ of entries in the ifTable is defined by the Interfaces\n   Stack Group defined\
    \ in [RFC2863].\n   When using MPLS Tunnels as interfaces, the interface stack\
    \ table\n   might appear as follows:\n   +------------------------------------------------+\n\
    \   | MPLS tunnel interface ifType = mplsTunnel(150) |\n   +------------------------------------------------+\n\
    \   |        MPLS interface ifType = mpls(166)       |\n   +------------------------------------------------+\n\
    \   |               Underlying layer                 |\n   +------------------------------------------------+\n\
    \   In the diagram above, \"Underlying layer\" refers to the ifIndex of any\n\
    \   interface type for which MPLS internetworking has been defined.\n   Examples\
    \ include ATM, Frame Relay, and Ethernet.\n   A detailed listing of the mapping\
    \ between ifTable objects and their\n   use for MPLS Tunnels is given in [TEMIB].\
    \  A few key objects are\n   listed here to provide an overview of the concepts.\n\
    \   Each MPLS tunnel is represented by an entry in the ifTable.  Each\n   tunnel\
    \ is therefore assigned a unique ifIndex.\n   The type of an interface represented\
    \ by an entry in the ifTable is\n   indicated by the ifType object.  The value\
    \ that is allocated to\n   identify an MPLS tunnel is 150.\n   The ifOperStatus\
    \ object reflects the actual operational status of the\n   MPLS tunnel and may\
    \ be mapped from the mplsTunnelOperStatus object.\n   It may be considered convenient\
    \ and good management to set the ifName\n   object to reflect the name of the\
    \ MPLS tunnel as contained in the\n   mplsTunnelName object.\n"
- title: 11.2.  Application of the Interfaces Group to TE Links
  contents:
  - "11.2.  Application of the Interfaces Group to TE Links\n   TE-LINK-STD-MIB also\
    \ uses interface stacking to manage TE Link\n   interfaces as logical interfaces.\
    \  The TE Link interface is\n   represented as an entry in the ifTable.  The interrelation\
    \ of entries\n   in the ifTable is defined by Interfaces Stack Group defined in\n\
    \   [RFC2863].  When using TE Link interfaces, the interface stack table\n   might\
    \ appear as follows:\n   +-------------------------------------------------------------------+\n\
    \   | MPLS interface ifType = mpls(166)                                 |\n  \
    \ | ifIndex = 1                                                       |\n   +-------------------------------------------------------------------+\n\
    \   | TE link (bundled link) ifType = teLink(200)                       |\n  \
    \ | ifIndex = 2                                                       |\n   +--------------------------------+-+--------------------------------+\n\
    \   | TE link ifType = teLink(200)   | | TE link ifType = teLink(200)   |\n  \
    \ | ifIndex = 3                    | | ifIndex = 4                    |\n   +--------------------------------+\
    \ +--------------------------------+\n   | Component link                 | |\
    \ Component link                 |\n   | ifType = opticalTransport(196) | | ifType\
    \ = opticalTransport(196) |\n   | ifIndex = 5                    | | ifIndex =\
    \ 6                    |\n   +--------------------------------+ +--------------------------------+\n\
    \   In the above diagram, \"opticalTransport\" is an example of an\n   underlying\
    \ physical interface: in this case an optical transport\n   interface.  TE link\
    \ management and bundling can be seen in the levels\n   of interface stacking.\
    \  Two TE links are defined, each managing an\n   optical transport link.  These\
    \ two TE links are combined into a\n   bundle, which is managed as a single TE\
    \ link interface.  This TE Link\n   interface supports MPLS and is presented as\
    \ an MPLS interface.\n   A detailed listing of the mapping between ifTable objects\
    \ and their\n   use for TE Links is given in [TELMIB].  A few key objects are\
    \ listed\n   here to provide an overview of the concepts.\n   Each TE Link interface\
    \ is represented by a separate entry in the\n   ifTable, with a unique ifIndex.\n\
    \   The type of an interface represented by an entry in the ifTable is\n   indicated\
    \ by the ifType object.  The value that is allocated to\n   identify a TE Link\
    \ is 200.\n"
- title: 11.3.  References to Interface MIB Objects from MPLS MIB Modules
  contents:
  - "11.3.  References to Interface MIB Objects from MPLS MIB Modules\n   MPLS-TE-STD-MIB\
    \ contains two objects that reference the management of\n   an MPLS tunnel as\
    \ an interface.  mplsTunnelIsIf is a TruthValue that\n   indicates whether the\
    \ tunnel is present in the ifTable.  If the\n   tunnel is managed as an interface,\
    \ the mplsTunnelIfIndex object\n   contains the ifIndex that identifies the corresponding\
    \ entry in the\n   ifTable.\n   MPLS-LSR-STD-MIB includes a table (mplsInterfaceTable)\
    \ for\n   configuring the support for MPLS on specific interfaces.  A\n   conceptual\
    \ row in this table is created automatically by an LSR for\n   every interface\
    \ that is capable of and configured for support of\n   MPLS.  A conceptual row\
    \ in this table will exist if and only if a\n   corresponding entry in ifTable\
    \ exists with ifType = mpls(166).  The\n   fate of the entries in the two tables\
    \ are closely linked so that if\n   the entry in the ifTable is operationally\
    \ disabled, the entry in\n   mplsInterfaceTable is deleted.  During the life of\
    \ an entry in\n   mplsInterfaceTable, a corresponding entry is managed in\n  \
    \ mplsInterfacePerfTable to show performance counters for the MPLS-\n   capable\
    \ interface.\n   The ifIndex that identifies MPLS-capable interfaces also plays\
    \ an\n   important indexing role in MPLS-LSR-STD-MIB.  In-segments (that is,\n\
    \   incoming LSP labels) are represented in mplsInSegmentTable, which is\n   indexed\
    \ by the mplsInSegmentIfIndex and mplsInSegmentLabel objects.\n   mplsInSegmentIfIndex\
    \ is set to the ifIndex of the incoming MPLS-\n   capable interface.  mplsInSegmentLabel\
    \ identifies the incoming MPLS\n   label.  Note that the corresponding mplsOutSegmentTable\
    \ contains an\n   mplsOutSegmentIfIndex object to identify the outgoing MPLS-capable\n\
    \   interface, but that this does not form part of the index of the\n   table.\n\
    \   MPLS-LDP-STD-MIB uses ifIndex extensively to identify the interface\n   over\
    \ which MPLS is active.\n   Within MPLS-FTN-STD-MIB, mplsFTNMapTable maps entries\
    \ in mplsFTNTable\n   to interfaces on which mplsFTNTable entries should be activated.\n\
    \   Interfaces are identified using their ifIndex values.\n"
- title: 12.  Management Options
  contents:
  - "12.  Management Options\n   It is not the intention of this document to provide\
    \ instructions or\n   advice to implementers of Management Stations, Management\
    \ Agents, or\n   managed entities.  It is, however, useful to make some observations\n\
    \   about how the MIB modules described above might be used to manage\n   MPLS\
    \ systems.\n   All MPLS LSPs may appear in MPLS-LSR-STD-MIB.  At transit nodes,\
    \ they\n   are seen as full cross-connects between incoming labels on incoming\n\
    \   interfaces and outgoing labels on outgoing interfaces.  At ingress or\n  \
    \ egress points, the cross-connections are unbalanced having spoof\n   upstream\
    \ or downstream legs, respectively.\n   Split and merge points of LSPs may be\
    \ represented as more complex\n   cross-connects in MPLS-LSR-STD-MIB.  Similarly,\
    \ bidirectional LSPs\n   can be represented by using the same cross-connect index\
    \ for each of\n   the forward and reverse cross-connections.\n   The modules in\
    \ the LDP MIB are intended solely for use with LDP and\n   CR-LDP.  LSPs that\
    \ are signaled through other means may conveniently\n   be stored in mplsLdpLspTable\
    \ for consistency with LSPs set up using\n   LDP, but there is little further\
    \ value to this because the table\n   gives only pointers into MPLS-LSR-STD-MIB.\
    \  If, however, the LSPs are\n   established with associated FECs using some signaling\
    \ method other\n   than LDP (for example, BGP), it may be advantageous to use\n\
    \   mplsLdpLspTable, mplsFecTable, and mplsLdpLspFecTable to correlate\n   the\
    \ LSPs.\n   Note that if CR-LDP is the signaling protocol, there is no\n   requirement\
    \ to use the LSP-related tables in the LDP MIB since the\n   LSP will be adequately\
    \ represented in MPLS-TE-MIB and MPLS-LSR-STD-\n   MIB.\n   MPLS tunnels may be\
    \ represented in MPLS-TE-STD-MIB with their cross-\n   connects indicated in MPLS-LSR-STD-MIB.\
    \  Tunnels are often (although\n   not always) set up with a series of constraints\
    \ that may be\n   represented in MPLS-TE-STD-MIB.  Note that a distinguishing\
    \ feature\n   of a tunnel is that it has an ingress and an egress, where LSPs\n\
    \   established through LDP may be end-to-end or may be hop-by-hop.\n   All LSPs\
    \ (tunnels and non-tunnels) may be established as a result of\n   signaling protocols\
    \ already defined or for future study.  In\n   addition, LSPs may be set up manually\
    \ by issuing configuration\n   commands to each of the LSRs on the LSP.  These\
    \ commands may utilize\n   SNMP by performing SET operations to the MIB module\
    \ tables and\n   objects described here.  Alternatively, configuration may be\
    \ through\n   some non-standard interface such as a Command Line or a Graphical\n\
    \   User Interface.  Such configured LSPs may also be represented in the\n   MIB\
    \ module tables.\n   Do not be misled by considerations of the \"permanence\"\
    \ of LSPs when\n   deciding which tables of which MIB modules to use.  An MPLS\
    \ tunnel\n   may have a very long life expectancy if it is set up by an amnesiac\n\
    \   user.  Otherwise, it may have a very short lifetime if it is\n   automatically\
    \ provisioned to satisfy on-demand traffic requirements.\n   Similarly, an LSP\
    \ established in response to a routing protocol\n   (sometimes known as a hop-by-hop\
    \ LSP) may be equally stable or\n   unstable.\n"
- title: 13.  Related IETF MIB Modules
  contents:
  - "13.  Related IETF MIB Modules\n   This section describes the broad interactions\
    \ between MIB modules\n   produced by the PWE3, PPVPN, and CCAMP working groups\
    \ and the MPLS\n   MIB modules.  This information is provided as background and\
    \ is not\n   central to this document.\n"
- title: 13.1.  PWE3 Working Group MIB Modules
  contents:
  - "13.1.  PWE3 Working Group MIB Modules\n   The PWE3 working group has produced\
    \ a document [PWE3FW] that includes\n   a description of the framework for MIB\
    \ modules within PWE3 operation.\n   Since the PWE3 architecture includes the\
    \ use of MPLS as an emulated\n   service and as a PSN service, the MPLS MIB modules\
    \ described above\n   may be leveraged.  The PWE3 framework document describes\
    \ the\n   interactions between the MPLS MIB modules and the PWE3 MIB modules.\n"
- title: 13.2.  PPVPN Working Group MIB Modules
  contents:
  - "13.2.  PPVPN Working Group MIB Modules\n   At present, the PPVPN working group\
    \ has not included a discussion of\n   how the MPLS MIB modules interact with\
    \ the MIB modules being produced\n   by that working group.  The authors of this\
    \ document hope to make a\n   forthcoming addition to the PPVPN framework document\
    \ [PPVPNFW]\n   detailing these interactions.  At the moment, there are two MIB\n\
    \   modules, [VPNMIB] and [VPNTCMIB], which are discussed next.\n"
- title: 13.2.1.  PPVPN-MPLS-VPN-STD-MIB
  contents:
  - "13.2.1.  PPVPN-MPLS-VPN-STD-MIB\n   PPVPN-MPLS-VPN-STD-MIB describes managed\
    \ objects that are used to\n   model and manage RFC2547bis MPLS VPNs [RFC2547Bis].\
    \  This MIB module\n   contains tables that model virtual routing forwarding entries\
    \ (VRFs),\n   as well as the interfaces associated with those VRFs.\n"
- title: 13.2.1.1.  Position in the OID Tree
  contents:
  - "13.2.1.1.  Position in the OID Tree\n      transmission -- RFC 2578 [RFC2578]\n\
    \        |\n        +- vpnMIB -- PPVPN-MPLS-VPN-STD-MIB\n"
- title: 13.2.1.2.  Dependencies
  contents:
  - "13.2.1.2.  Dependencies\n   This MIB module currently has no direct dependencies\
    \ on any of the\n   MPLS MIB modules.  This MIB module models MPLS VPN interfaces\
    \ as\n   entries in the Interfaces MIB's Interfaces Table (ifTable).  This MIB\n\
    \   module may be modified in the future to import textual conventions\n   from\
    \ MPLS-TC-STD-MIB.\n   A specific textual conventions MIB module [VPNTCMIB] defines\
    \ textual\n   conventions that are imported into PPVPN-MPLS-VPN-STD-MIB.\n"
- title: 13.3.  CCAMP Working Group MIB Modules
  contents:
  - "13.3.  CCAMP Working Group MIB Modules\n   The CCAMP working group is developing\
    \ MIB modules in support of GMPLS\n   that interact directly with the MPLS MIB\
    \ modules.  Along with any MIB\n   modules produced by the CCAMP working group,\
    \ a separate CCAMP-\n   specific Management Framework document is expected to\
    \ be issued\n   describing the relationship between these MIB modules and the\n\
    \   existing MPLS (and other) MIB modules.\n"
- title: 14.  Traffic Engineering Working Group TE MIB
  contents:
  - "14.  Traffic Engineering Working Group TE MIB\n   The TEWG has produced a traffic\
    \ engineering MIB (TE-MIB) [TEWGMIB]\n   containing objects for monitoring traffic-engineered\
    \ tunnels at their\n   ingress points.\n   In many senses TE-MIB contains the\
    \ same information as MPLS-TE-STD-\n   MIB.  Both MIB modules can be used to monitor\
    \ MPLS tunnels; however,\n   TE-MIB is minimalistic and caters best to TE tunnels\
    \ as tunnels, at\n   the expense of not having many advanced features of MPLS-TE-STD-MIB,\n\
    \   whereas MPLS-TE-STD-MIB can deconstruct tunnels into hop-by-hop\n   cross-connects,\
    \ at the expense of more complexity.\n   The TE-MIB module imports textual conventions\
    \ from the MPLS-TC-STD-\n   MIB module and therefore is dependent on that document.\n"
- title: 14.1.  Choosing between TE MIB Modules
  contents:
  - "14.1.  Choosing between TE MIB Modules\n   TE-MIB is a flexible MIB module designed\
    \ to manage traffic\n   engineering tunnels regardless of the implementation technology.\n\
    \   This flexibility and a focus on simplicity lead to some compromises.\n   -\
    \ Some MPLS configuration parameters are left out.  For example, the\n     resource\
    \ management in TE-MIB is confined to bandwidth, so missing\n     the full IntServ\
    \ control.\n   - Other TE-MIB parameters are present but with only limited options;\n\
    \     for example, the ability to configure different label distribution\n   \
    \  methods per LSP.\n   Extensibility of TE-MIB to related concepts (such as DiffServ\
    \ and\n   Fast Reroute) and integrations with other MIB modules (such as that\n\
    \   in MPLS-LSR-STD-MIB) are not work items at the time of writing.  The\n   MPLS\
    \ MIB modules are more closely integrated as described in this\n   document.\n\
    \   Write/create access to TE-MIB is only available at the ingress, where\n  \
    \ it can be used to configure an ingress to signal a tunnel with\n   constraints.\
    \  It cannot be used to configure hop-by-hop cross-\n   connects to build a tunnel.\n\
    \   The purpose of TE-MIB module is to allow a Management Agent to\n   configure\
    \ tunnels, and to inspect and monitor all tunnels (however\n   created) at their\
    \ ingress points.  It does not provide information\n   about tunnels at any other\
    \ point in the network (that is, at transit\n   or egress nodes).  This module\
    \ can be used, for example, to configure\n   the constraints of a tunnel, whereupon\
    \ the ingress would compute the\n   tunnel path and signal it.  The MIB module\
    \ can then be used at the\n   ingress to monitor the tunnel's path(s), their status,\
    \ and the\n   tunnel's uptime and counters.  This MIB module is not designed to\n\
    \   configure hop-by-hop cross-connects to build a tunnel.\n"
- title: 15.  Security Considerations
  contents:
  - "15.  Security Considerations\n   This document describes the interrelationships\
    \ amongst the different\n   MIB modules relevant to MPLS management and as such\
    \ does not have any\n   security implications in and of itself.\n   Each specific\
    \ MIB document specifies specific MIB objects, and such a\n   document must provide\
    \ a proper security considerations section that\n   explains the security aspects\
    \ of those objects.\n   The attention of readers is particularly drawn to the\
    \ security\n   implications of making MIB objects available for create or write\n\
    \   access through an access protocol such as SNMP.  SNMPv1 by itself is\n   an\
    \ insecure environment.  Even if the network itself is made secure\n   (for example,\
    \ by using IPSec), there is no control over who on the\n   secure network is allowed\
    \ to access and GET (read) the objects in\n   this MIB.  It is recommended that\
    \ the implementers consider the\n   security features as provided by the SNMPv3\
    \ framework.  Specifically,\n   the use of the User-based Security Model STD 62,\
    \ RFC 3414 [RFC3414],\n   and the View-based Access Control Model STD 62, RFC\
    \ 3415 [RFC3415],\n   is recommended.\n   It is then a customer/user responsibility\
    \ to ensure that the SNMP\n   entity giving access to an instance of this MIB\
    \ is properly\n   configured to give access to only those objects, and to those\n\
    \   principals (users) that have legitimate rights to access them.\n"
- title: 16.  Acknowledgements
  contents:
  - "16.  Acknowledgements\n   Many small pieces of text in this document have been\
    \ borrowed from\n   the documents that define the MIB modules described here.\
    \  The\n   authors would like to express appreciation to all who worked on those\n\
    \   MIB documents.\n   Thanks also to all those who attended the November 2002\
    \ MPLS MIB open\n   meeting and gave constructive feedback, and in particular\
    \ to Sharon\n   Chisholm for her thoughts on Management Options.\n   Thanks to\
    \ Kireeti Kompella for revising the text on TE-MIB.\n   Without the consistent\
    \ pressure and encouragement from Bert Wijnen,\n   this document would not have\
    \ been written.\n"
- title: 17.  Normative References
  contents:
  - "17.  Normative References\n   [FTNMIB]      Nadeau, T., Srinivasan, C., and A.\
    \ Viswanathan,\n                 \"Multiprotocol Label Switching (MPLS) Forwarding\n\
    \                 Equivalence Class To Next Hop Label Forwarding Entry\n     \
    \            (FEC-To-NHLFE) Management Information Base (MIB)\", RFC\n       \
    \          3814, June 2004.\n   [LDPMIB]      Cucchiara, J., Sjostrand, H., and\
    \ J. Luciani,\n                 \"Definitions of Managed Objects for the Multiprotocol\n\
    \                 Label Switching (MPLS), Label Distribution Protocol\n      \
    \           (LDP)\", RFC 3815, June 2004.\n   [LSRMIB]      Srinivasan, C., Viswanathan,\
    \ A., and T. Nadeau,\n                 \"Multiprotocol Label Switching (MPLS)\
    \ Label Switching\n                 Router (LSR) Management Information Base (MIB)\"\
    , RFC\n                 3813, June 2004.\n   [RFC2863]     McCloghrie, K. and\
    \ F. Kastenholtz, \"The Interfaces\n                 Group MIB \", RFC 2863, June\
    \ 2000.\n   [RFC3289]     Baker, F., Chan, K., and A. Smith, \"Management\n  \
    \               Information Base for the Differentiated Services\n           \
    \      Architecture\", RFC 3289, May 2002.\n   [TCMIB]       Nadeau, T. and J.\
    \ Cucchiara, \"Definitions of Textual\n                 Conventions (TCs) for\
    \ Multiprotocol Label Switching\n                 (MPLS) Management\", RFC 3811,\
    \ June 2004.\n   [TELMIB]      Dubuc, M., Dharanikota, S., Nadeau, T., J. Lang,\n\
    \                 \"Traffic Engineering Link Management Information Base\",\n\
    \                 RFC 4220, November 2005.\n   [TEMIB]       Srinivasan, C., Viswanathan,\
    \ A., and T. Nadeau,\n                 \"Multiprotocol Label Switching (MPLS)\
    \ Traffic\n                 Engineering (TE) Management Information Base (MIB)\"\
    ,\n                 RFC 3812, June 2004.\n"
- title: 18.  Informative References
  contents:
  - "18.  Informative References\n   [PPVPNFW]     Callon, R. and M. Suzuki, \"A Framework\
    \ for Layer 3\n                 Provider-Provisioned Virtual Private Networks\n\
    \                 (PPVPNs)\", RFC 4110, July 2005.\n   [PWE3FW]      Bryant, S.\
    \ and P. Pate, \"Pseudo Wire Emulation Edge-\n                 to-Edge (PWE3)\
    \ Architecture\", RFC 3985, March 2005.\n   [RFC2026]     Bradner, S., \"The Internet\
    \ Standards Process --\n                 Revision 3\", BCP 9, RFC 2026, October\
    \ 1996.\n   [RFC2547Bis]  Rosen, E., et al., \"MPLS/BGP VPNs\", Work in Progress,\n\
    \                 October 2002.\n   [RFC2578]     McCloghrie, K., Perkins, D.,\
    \ and J. Schoenwaelder,\n                 \"Structure of Management Information\
    \ Version 2\n                 (SMIv2)\", STD 58, RFC 2578, April 1999.\n   [RFC2579]\
    \     McCloghrie, K., Perkins, D., and J. Schoenwaelder,\n                 \"\
    Textual Conventions for SMIv2\", STD 58, RFC 2579,\n                 April 1999.\n\
    \   [RFC2580]     McCloghrie, K., Perkins, D., and J. Schoenwaelder,\n       \
    \          \"Conformance Statements for SMIv2\", STD 58, RFC 2580,\n         \
    \        April 1999.\n   [RFC3031]     Rosen, E., Viswanathan, A., and R. Callon,\n\
    \                 \"Multiprotocol Label Switching Architecture\", RFC 3031,\n\
    \                 January 2001.\n   [RFC3036]     Andersson, L., Doolan, P., Feldman,\
    \ N., Fredette, A.,\n                 and B. Thomas, \"LDP Specification\", RFC\
    \ 3036, January\n                 2001.\n   [RFC3410]     Case, J., Mundy, R.,\
    \ Partain, D. and B. Stewart,\n                 \"Introduction and Applicability\
    \ Statements for\n                 Internet-Standard Management Framework\", RFC\
    \ 3410,\n                 December 2002.\n   [RFC3413]     Levi, D., Meyer, P.,\
    \ and B. Stewart, \"Simple Network\n                 Management Protocol (SNMP)\
    \ Applications\", STD 62, RFC\n                 3413, December 2002.\n   [RFC3414]\
    \     Blumenthal, U. and B. Wijnen, \"User-based Security\n                 Model\
    \ (USM) for version 3 of the Simple Network\n                 Management Protocol\
    \ (SNMPv3)\", STD 62, RFC 3414,\n                 December 2002.\n   [RFC3415]\
    \     Wijnen, B., Presuhn, R., and K. McCloghrie, \"View-based\n             \
    \    Access Control Model (VACM) for the Simple Network\n                 Management\
    \ Protocol (SNMP)\", STD 62, RFC 3415, December\n                 2002.\n   [TEWGMIB]\
    \     Kompella, K., \"A Traffic Engineering (TE) MIB\", RFC\n                \
    \ 3970, January 2005.\n   [VPNMIB]      Nadeau, T., et al., \"MPLS/BGP Virtual\
    \ Private Network\n                 Management Information Base Using SMIv2\"\
    , Work in\n                 Progress, November 2002.\n   [VPNTCMIB]    Schliesser,\
    \ B. and T. Nadeau, \"Definition of Textual\n                 Conventions for\
    \ Provider Provisioned Virtual Private\n                 Network (PPVPN) Management\"\
    , Work in Progress, November\n                 2002.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Thomas D. Nadeau\n   Cisco Systems, Inc.\n   1414 Massachusetts\
    \ Ave.\n   Boxborough, MA 01719\n   EMail: tnadeau@cisco.com\n   Cheenu Srinivasan\n\
    \   Bloomberg L.P.\n   731 Lexington Avenue\n   New York, NY 10022\n   Phone:\
    \ (212) 617-3682\n   EMail: cheenu@bloomberg.net\n   Adrian Farrel\n   Old Dog\
    \ Consulting\n   Phone: +44 (0) 1978 860944\n   EMail: adrian@olddog.co.uk\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2005).\n   This\
    \ document is subject to the rights, licenses and restrictions\n   contained in\
    \ BCP 78, and except as set forth therein, the authors\n   retain all their rights.\n\
    \   This document and the information contained herein are provided on an\n  \
    \ \"AS IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n  \
    \ OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY AND THE INTERNET\n   ENGINEERING\
    \ TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS OR IMPLIED,\n   INCLUDING BUT NOT\
    \ LIMITED TO ANY WARRANTY THAT THE USE OF THE\n   INFORMATION HEREIN WILL NOT\
    \ INFRINGE ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY OR FITNESS\
    \ FOR A PARTICULAR PURPOSE.\n"
- title: Intellectual Property
  contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or\
    \ scope of any\n   Intellectual Property Rights or other rights that might be\
    \ claimed to\n   pertain to the implementation or use of the technology described\
    \ in\n   this document or the extent to which any license under such rights\n\
    \   might or might not be available; nor does it represent that it has\n   made\
    \ any independent effort to identify any such rights.  Information\n   on the\
    \ procedures with respect to rights in RFC documents can be\n   found in BCP 78\
    \ and BCP 79.\n   Copies of IPR disclosures made to the IETF Secretariat and any\n\
    \   assurances of licenses to be made available, or the result of an\n   attempt\
    \ made to obtain a general license or permission for the use of\n   such proprietary\
    \ rights by implementers or users of this\n   specification can be obtained from\
    \ the IETF on-line IPR repository at\n   http://www.ietf.org/ipr.\n   The IETF\
    \ invites any interested party to bring to its attention any\n   copyrights, patents\
    \ or patent applications, or other proprietary\n   rights that may cover technology\
    \ that may be required to implement\n   this standard.  Please address the information\
    \ to the IETF at ietf-\n   ipr@ietf.org.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
