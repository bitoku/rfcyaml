- contents:
  - '             Telnet Encryption: DES3 64 bit Output Feedback

    '
  title: __initial_text__
- contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol
    for the\n   Internet community, and requests discussion and suggestions for\n
    \  improvements.  Please refer to the current edition of the \"Internet\n   Official
    Protocol Standards\" (STD 1) for the standardization state\n   and status of this
    protocol.  Distribution of this memo is unlimited.\n"
  title: Status of this Memo
- contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2000).  All Rights Reserved.\n"
  title: Copyright Notice
- contents:
  - "Abstract\n   This document specifies how to use the Triple-DES (data encryption\n
    \  standard) encryption algorithm in output feedback mode with the\n   telnet
    encryption option.\n"
  title: Abstract
- contents:
  - "1.  Command Names and Codes\n   Encryption Type\n      DES3_OFB64       4\n   Suboption
    Commands\n      OFB64_IV         1\n      OFB64_IV_OK      2\n      OFB64_IV_BAD
    \    3\n"
  title: 1.  Command Names and Codes
- contents:
  - "2.  Command Meanings\n   IAC SB ENCRYPT IS DES3_OFB64 OFB64_IV <initial vector>
    IAC SE\n     The sender of this command generates a random 8 byte initial\n     vector,
    and sends it to the other side of the connection using the\n     OFB64_IV command.
    \ The initial vector is sent in clear text.  Only\n     the side of the connection
    that is WILL ENCRYPT may send the\n     OFB64_IV command.\n   IAC SB ENCRYPT REPLY
    DES3_OFB64 OFB64_IV_OK IAC SE\n   IAC SB ENCRYPT REPLY DES3_OFB64 OFB64_IV_BAD
    IAC SE\n     The sender of these commands either accepts or rejects the initial\n
    \    vector received in a OFB64_IV command.  Only the side of the\n     connection
    that is DO ENCRYPT may send the OFB64_IV_OK and\n     OFB64_IV_BAD commands.  The
    OFB64_IV_OK command MUST be sent for\n     backwards compatibility with existing
    implementations; there\n     really isn't any reason why a sender would need to
    send the\n     OFB64_IV_BAD command except in the case of a protocol violation\n
    \    where the IV sent was not of the correct length (i.e., 8 bytes).\n"
  title: 2.  Command Meanings
- contents:
  - "3.  Implementation Rules\n   Once a OFB64_IV_OK command has been received, the
    WILL ENCRYPT side\n   of the connection should do keyid negotiation using the
    ENC_KEYID\n   command.  Once the keyid negotiation has successfully identified
    a\n   common keyid, then START and END commands may be sent by the side of\n   the
    connection that is WILL ENCRYPT.  Data will be encrypted using\n   the DES3 64
    bit Output Feedback algorithm.\n   If encryption (decryption) is turned off and
    back on again, and the\n   same keyid is used when re-starting the encryption
    (decryption), the\n   intervening clear text must not change the state of the
    encryption\n   (decryption) machine.\n   If a START command is sent (received)
    with a different keyid, the\n   encryption (decryption) machine must be re-initialized
    immediately\n   following the end of the START command with the new key and the\n
    \  initial vector sent (received) in the last OFB64_IV command.\n   If a new OFB64_IV
    command is sent (received), and encryption\n   (decryption) is enabled, the encryption
    (decryption) machine must be\n   re-initialized immediately following the end
    of the OFB64_IV command\n   with the new initial vector, and the keyid sent (received)
    in the\n   last START command.\n   If encryption (decryption) is not enabled when
    a OFB64_IV command is\n   sent (received), the encryption (decryption) machine
    must be re-\n   initialized after the next START command, with the keyid sent\n
    \  (received) in that START command, and the initial vector sent\n   (received)
    in this OFB64_IV command.\n"
  title: 3.  Implementation Rules
- contents:
  - "4.  Algorithm\n   DES3 64 bit Output Feedback\n                  key1       key2
    \      key3\n                   |          |          |\n                   v
    \         v          v\n               +-------+  +-------+  +-------+\n            +->|
    DES-e |->| DES-d |->| DES-e |-- +\n            |  +-------+  +-------+  +-------+
    \  |\n            +------------------------------------+\n                                                v\n
    \   INPUT ------------------------------------->(+) ----> DATA\n   Given:\n     iV:
    Initial vector, 64 bits (8 bytes) long.\n     Dn: the nth chunk of 64 bits (8
    bytes) of data to\n         encrypt (decrypt).\n     On: the nth chunk of 64 bits
    (8 bytes) of encrypted\n         (decrypted) output.\n       V0 = DES-e(DES-d(DES-e(iV,
    key1),key2),key3)\n       V(n+1) = DES-e(DES-d(DES-e(Vn, key1),key2),key3)\n       On
    = Dn ^ Vn\n"
  title: 4.  Algorithm
- contents:
  - "5.  Integration with the AUTHENTICATION telnet option\n   As noted in the telnet
    ENCRYPTION option specifications, a keyid\n   value of zero indicates the default
    encryption key, as might be\n   derived from the telnet AUTHENTICATION option.
    \ If the default\n   encryption key negotiated as a result of the telnet AUTHENTICATION\n
    \  option contains less than 16 bytes, then the DES3_OFB64 option must\n   not
    be offered or used as a valid telnet encryption option.\n   The following rules
    are to be followed for creating three DES\n   encryption keys based upon the available
    encrypt key data:\n     keys_to_use = bytes of key data / DES block size (8 bytes)\n
    \  where the keys are labeled \"key1\" through \"key6\" with \"key1\" being\n
    \  the first 8 bytes; \"key2\" the second 8 bytes; ... and \"key6\" being\n   sixth
    8 bytes (if available).\n   When two keys are available:\n    . data sent from
    the server is encrypted with key1, decrypted with\n      key2, and encrypted with
    key1;\n    . data sent from the client is encrypted with key2, decrypted with\n
    \     key1, and encrypted with key2\n   When three keys are available:\n    .
    data sent from the server is encrypted with key1, decrypted with\n      key2,
    and encrypted with key3;\n    . data sent from the client is encrypted with key2,
    decrypted with\n      key3, and encrypted with key1\n   When four keys are available:\n
    \   . data sent from the server is encrypted with key1, decrypted with\n      key2,
    and encrypted with key3;\n    . data sent from the client is encrypted with key2,
    decrypted with\n      key4, and encrypted with key1\n   When five keys are available:\n
    \   . data sent from the server is encrypted with key1, decrypted with\n      key2,
    and encrypted with key3;\n    . data sent from the client is encrypted with key2,
    decrypted with\n      key4, and encrypted with key5\n   When six keys are available:\n
    \   . data sent from the server is encrypted with key1, decrypted with\n      key2,
    and encrypted with key3;\n    . data sent from the client is encrypted with key4,
    decrypted with\n      key5, and encrypted with key6\n   In all cases, the keys
    used by DES3_OFB64 must have their parity\n   corrected after they are determined
    using the above algorithm.\n   Note that the above algorithm assumes that it is
    safe to use a non-\n   DES key (or part of a non-DES key) as a DES key.  This
    is not\n   necessarily true of all cipher systems, but we specify this behaviour\n
    \  as the default since it is true for most authentication systems in\n   popular
    use today, and for compatibility with existing\n   implementations.  New telnet
    AUTHENTICATION mechanisms may specify\n   alternative methods for determining
    the keys to be used for this\n   cipher suite in their specification, if the session
    key negotiated by\n   that authentication mechanism is not a DES key and and where
    this\n   algorithm may not be safely used.\n"
  title: 5.  Integration with the AUTHENTICATION telnet option
- contents:
  - "6.  Security Considerations\n   Encryption using Output Feedback does not ensure
    data integrity; an\n   active attacker may be able to substitute text, if he can
    predict the\n   clear-text that was being transmitted.\n   The tradeoff here is
    that adding a message authentication code (MAC)\n   will significantly increase
    the number of bytes needed to send a\n   single character in the telnet protocol,
    which will impact\n   performance on slow (i.e. dialup) links.\n   This option
    was originally drafted back when CPU speeds where not\n   necessarily fast enough
    to do allow use of CFB.  Since then, CPU's\n   have gotten much faster.  Given
    the inherent weaknesses in Output\n   Feedback mode, perhaps it should be deprecated
    in favor of CFB modes?\n"
  title: 6.  Security Considerations
- contents:
  - "7.  Acknowledgments\n   This document was based on the \"Telnet Encryption: DES
    64 bit Output\n   Feedback\" document originally written by Dave Borman of Cray
    Research\n   with the assistance of the IETF Telnet Working Group.\n"
  title: 7.  Acknowledgments
- contents:
  - "Author's Address\n   Jeffrey Altman, Editor\n   Columbia University\n   612 West
    115th Street Room 716\n   New York NY 10025 USA\n   Phone: +1 (212) 854-1344\n
    \  EMail: jaltman@columbia.edu\n"
  title: Author's Address
- contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2000).  All
    Rights Reserved.\n   This document and translations of it may be copied and furnished
    to\n   others, and derivative works that comment on or otherwise explain it\n
    \  or assist in its implementation may be prepared, copied, published\n   and
    distributed, in whole or in part, without restriction of any\n   kind, provided
    that the above copyright notice and this paragraph are\n   included on all such
    copies and derivative works.  However, this\n   document itself may not be modified
    in any way, such as by removing\n   the copyright notice or references to the
    Internet Society or other\n   Internet organizations, except as needed for the
    purpose of\n   developing Internet standards in which case the procedures for\n
    \  copyrights defined in the Internet Standards process must be\n   followed,
    or as required to translate it into languages other than\n   English.\n   The
    limited permissions granted above are perpetual and will not be\n   revoked by
    the Internet Society or its successors or assigns.\n   This document and the information
    contained herein is provided on an\n   \"AS IS\" basis and THE INTERNET SOCIETY
    AND THE INTERNET ENGINEERING\n   TASK FORCE DISCLAIMS ALL WARRANTIES, EXPRESS
    OR IMPLIED, INCLUDING\n   BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF THE
    INFORMATION\n   HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED WARRANTIES
    OF\n   MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.\n"
  title: Full Copyright Statement
- contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided
    by the\n   Internet Society.\n"
  title: Acknowledgement
