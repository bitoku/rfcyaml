- contents:
  - '          The Session Initiation Protocol (SIP) "Join" Header

    '
  title: __initial_text__
- contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol
    for the\n   Internet community, and requests discussion and suggestions for\n
    \  improvements.  Please refer to the current edition of the \"Internet\n   Official
    Protocol Standards\" (STD 1) for the standardization state\n   and status of this
    protocol.  Distribution of this memo is unlimited.\n"
  title: Status of this Memo
- contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2004).\n"
  title: Copyright Notice
- contents:
  - "Abstract\n   This document defines a new header for use with SIP multi-party\n
    \  applications and call control.  The Join header is used to logically\n   join
    an existing SIP dialog with a new SIP dialog.  This primitive\n   can be used
    to enable a variety of features, for example: \"Barge-In\",\n   answering-machine-style
    \"Message Screening\" and \"Call Center\n   Monitoring\".  Note that definition
    of these example features is non-\n   normative.\n"
  title: Abstract
- contents:
  - "Table of Contents\n   1.   Introduction . . . . . . . . . . . . . . . . . . .
    . . . . .   2\n   2.   Conventions  . . . . . . . . . . . . . . . . . . . . .
    . . .   3\n   3.   Applicability of RFC 2804 (\"Raven\"). . . . . . . . . . .
    . .   3\n   4.   User Agent Server Behavior: Receiving a Join Header  . . . .
    \  4\n   5.   User Agent Client Behavior: Sending a Join header  . . . . .   6\n
    \  6.   Proxy behavior . . . . . . . . . . . . . . . . . . . . . . .   7\n   7.
    \  Syntax . . . . . . . . . . . . . . . . . . . . . . . . . . .   7\n        7.1.
    \ The Join Header  . . . . . . . . . . . . . . . . . . .   7\n        7.2.  New
    option tag for Require and Supported headers . . .   8\n   8.   Usage Examples
    . . . . . . . . . . . . . . . . . . . . . . .   8\n        8.1.  Join accepted
    and transitioned to central conference .   9\n        8.2.  Join rejected  . .
    . . . . . . . . . . . . . . . . . .  12\n   9.   Security Considerations  . .
    . . . . . . . . . . . . . . . .  13\n   10.  IANA Considerations  . . . . . .
    . . . . . . . . . . . . . .  14\n        10.1. Registration of \"Join\" SIP header.
    . . . . . . . . . .  14\n        10.2. Registration of \"join\" SIP Option-tag.
    . . . . . . . .  14\n   11.  Acknowledgments  . . . . . . . . . . . . . . . .
    . . . . . .  14\n   12.  References . . . . . . . . . . . . . . . . . . . . .
    . . . .  14\n        12.1. Normative References . . . . . . . . . . . . . . .
    . .  14\n        12.2. Informative References . . . . . . . . . . . . . . . .
    \ 15\n   13.  Authors' Addresses . . . . . . . . . . . . . . . . . . . . .  16\n
    \  14.  Full Copyright Statement . . . . . . . . . . . . . . . . . .  17\n"
  title: Table of Contents
- contents:
  - "1. Introduction\n   This document describes a SIP [1] extension header field
    as part of\n   the SIP multiparty applications architecture framework [12].  The\n
    \  Join header is used to logically join an existing SIP dialog with a\n   new
    SIP dialog.  This is especially useful in peer-to-peer call\n   control environments.\n
    \  One use of the \"Join\" header is to insert a new participant into a\n   multimedia
    conversation (which may be a two-party call or a SIP\n   conference [15]).  While
    this functionality is already available\n   using 3rd party call control [17],
    style call control, the 3pcc model\n   requires a central point of control which
    may not be desirable in\n   many environments.  As such, a method of performing
    these same call\n   control primitives in a distributed, peer-to-peer fashion
    is very\n   desirable.\n   Use of an explicit Join header is needed in some cases
    instead of\n   addressing an INVITE to a conference URI for the following reasons:\n
    \  o  A conference may not yet exist--the new invitation may be trying\n      to
    join an ordinary two-party call.\n   o  The party joining may not know if the
    dialog it wants to join is\n      part of a conference.\n   o  The party joining
    may not know the conference URI.\n   The Join header enables services such as
    barge-in, real-time message\n   screening, and call center monitoring in a distributed
    peer-to-peer\n   way.  This list of services is not exhaustive.\n   For example,
    the Boss has an established 2-party conversation with a\n   Customer, and using
    some out-of-band mechanism (e.g., voice,\n   gestures, or email) asks an Assistant
    to join the conversation.  The\n   Assistant sends an INVITE with a Join header
    to the Boss with the\n   dialog information for the established dialog.  The Assistant\n
    \  obtained this information from some other mechanism, for example a\n   web-page,
    an instant message, or from the SIP session dialog package\n   [13].\n   Assistant
    \    Boss        Customer\n   | callid: 4@A |  callid: 7@c |\n   |             |
    \             |\n   |             |<============>|\n   |             |              |\n
    \  |INVITE------>|              |\n   |Join: 7@c    |              |\n   |             |reINVITE----->|\n
    \  |<----200-----|<----200------|\n   |-----ACK---->|<----ACK------|\n   |             |
    \             |\n   |   .. begins mixing ..      |\n   |             |              |\n
    \  |<===========>|<============>|\n   |<::::::::::::::::::::::::::>|\n   Note
    that this operation effectively creates a new conference.  The\n   Boss needs
    to cause a new conference to start (and consequently\n   create or obtain a new
    conference URI).   In our example, the Boss\n   mixes all media locally, so it
    needs to generate a new conference\n   URI, return the conference URI as the Contact
    to the Join INVITE\n   (with the \"isfocus\" Contact header field parameter as
    defined in [6],\n   and reINVITE or UPDATE [22] the Customer with the conference
    URI as\n   the new Contact.  This scenario is also discussed in more detail in\n
    \  [16].\n"
  title: 1. Introduction
- contents:
  - "2.  Conventions\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\",
    \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\",  \"MAY\", and
    \"OPTIONAL\" in this\n   document are to be interpreted as described in RFC 2119
    [2].\n   This document refers frequently to the terms \"confirmed dialog\" and\n
    \  \"early dialog\".  These are defined in Section 12 of SIP [1].\n"
  title: 2.  Conventions
- contents:
  - "3.  Applicability of RFC 2804 (\"Raven\")\n   This primitive can be used to create
    services which are used for\n   monitoring purposes, however these services do
    not meet the\n   definition of a wiretap according to RFC 2804 [14].  The definition\n
    \  from RFC 2804 is included here:\n      Wiretapping is what occurs when information
    passed across the\n      Internet from one party to one or more other parties
    is delivered\n      to a third party:\n      1. Without the sending party knowing
    about the third party\n      2. Without any of the recipient parties knowing about
    the delivery\n         to the third party\n      3. When the normal expectation
    of the sender is that the\n         transmitted information will only be seen
    by the recipient\n         parties or parties obliged to keep the information
    in\n         confidence\n      4. When the third party acts deliberately to target
    the\n         transmission of the first party, either because he is of\n         interest,
    or because the second party's reception is of\n         interest.\n   Specifically,
    item 2 of this definition does not apply to this\n   extension, as one party is
    always aware of a Join request and can\n   even decline such requests.  In addition,
    in many applications of\n   this primitive, some or all of the other items may
    not apply.  For\n   example, in many call centers which handle financial transactions,\n
    \  all conversations are recorded with the full knowledge and\n   expectation
    of all parties involved.\n"
  title: 3.  Applicability of RFC 2804 ("Raven")
- contents:
  - "4.  User Agent Server Behavior: Receiving a Join Header\n   The Join header contains
    information used to match an existing SIP\n   dialog (call-id, to-tag, and from-tag).
    \ Upon receiving an INVITE\n   with a Join header, the UA attempts to match this
    information with a\n   confirmed or early dialog.  The to-tag and from-tag parameters
    are\n   matched as if they were tags present in an incoming request.  In\n   other
    words the to-tag parameter is compared to the local tag, and\n   the from-tag
    parameter is compared to the remote tag.\n   If more than one Join header field
    is present in an INVITE, or if a\n   Join header field is present in a request
    other than INVITE, the UAS\n   MUST reject the request with a 400 Bad Request
    response.\n   The Join header has specific call control semantics.  If both a
    Join\n   header field and another header field with contradictory semantics\n
    \  (for example a Replaces [8] header field) are present in a request,\n   the
    request MUST be rejected with a 400 \"Bad Request\" response.\n   If the Join
    header field matches more than one dialog, the UA MUST\n   act as if no match
    is found.\n   If no match is found, but the Request-URI in the INVITE corresponds\n
    \  to a conference URI, the UAS MUST ignore the Join header and continue\n   processing
    the INVITE as if the Join header did not exist.  This\n   allows User Agents which
    receive an INVITE with Join to redirect the\n   request directly to a conference
    URI.\n   Otherwise if no match is found, the UAS rejects the INVITE and\n   returns
    a 481 Call/Transaction Does Not Exist response.  Likewise, if\n   the Join header
    field matches a dialog which was not created with an\n   INVITE, the UAS MUST
    reject the request with a 481 response.\n   If the Join header field matches a
    dialog which has already\n   terminated, the UA SHOULD decline the request with
    a 603 Declined\n   response.\n   If the Join header field matches an active dialog
    (n.b. unlike the\n   Replaces header, the Join header has no limitation on its
    use with\n   early dialogs), the UA MUST verify that the initiator of the new\n
    \  INVITE is authorized to join the matched dialog.  If the initiator of\n   the
    new INVITE has authenticated successfully as equivalent to the\n   user who is
    being joined, then the join is authorized.  For example,\n   if the user being
    joined and the initiator of the joining dialog\n   share the same credentials
    for Digest authentication [4], or they\n   sign the join request with S/MIME [5]
    with the same private key and\n   present the (same) corresponding certificate
    used in the original\n   dialog, then the join is authorized.\n   Alternatively,
    the Referred-By mechanism [9] defines a mechanism that\n   the UAS can use to
    verify that a join request was sent on behalf of\n   the other participant in
    the matched dialog (in this case, triggered\n   by a REFER request).  If the join
    request contains a Referred-By\n   header which corresponds to the user being
    joined, the UA SHOULD\n   treat the join as if it was authorized by the joined
    party.  The\n   Referred-By header MUST reference a corresponding, valid Refererred-\n
    \  By Authenticated Identity Body [10].  The UA MAY apply other local\n   policy
    to authorize the remainder of the request.  In other words,\n   the UAS may apply
    different policy to the joined dialog than was\n   applied to the target dialog.\n
    \  The UA MAY also maintain a list of authorized entities who are\n   allowed
    to join any dialog with certain characteristics (for example,\n   all dialogs
    placed in the call center context of the UA).  In\n   addition, the UA MAY use
    other authorization mechanisms defined for\n   this purpose in standards track
    extensions.  For example, an\n   extension could define a mechanism for transitively
    asserting\n   authorization of a join.\n   If authorization is successful, the
    UA attempts to accept the new\n   INVITE, and assign any mixing or conferencing
    resources necessary to\n   complete the join.  If the UA cannot accept the new
    INVITE (for\n   example: it cannot establish required QoS or keying, or it has\n
    \  incompatible media), the UA MUST return an appropriate error response\n   and
    MUST leave the matched dialog unchanged.\n   A User Agent that accepts a Join
    header needs to setup dialogs or\n   conferences such that the requesting UAC
    is logically added to the\n   conversation space associated with the matched dialog.
    \ Any dialogs\n   which are already logically associated with the matched dialog
    in the\n   same conversation space are included as well.  For a detailed\n   description
    of various conferencing mechanisms that could be used to\n   handle a Join, please
    consult the SIP conferencing framework [15].\n   If the UAS has sufficient resources
    to locally handle the Join\n   request, the UAS SHOULD accept the Join request
    and perform the\n   appropriate media mixing or combining.  The UAS MAY rearrange\n
    \  appropriate dialogs instead as described below, based on some local\n   policy.\n
    \  If the UAS does not have sufficient resources locally to handle the\n   request,
    or does not wish to use these local resources, but is aware\n   of other resources
    which could be used to satisfy the request (e.g.,\n   a centralized conference
    server), the UA SHOULD create a conference\n   using this resource (e.g., INVITE
    the conference server to obtain a\n   conference URI), redirect the requestor
    to this resource, and request\n   other participants in the same conversation
    space to use this\n   resource.  The UA MAY use any appropriate mechanism to transition\n
    \  participants to the new resource (e.g., 3xx response, 3rd-party call\n   control
    reinvitiations, REFER requests, or reinvitations to a\n   multicast group).  The
    UA SHOULD only use mechanisms which are\n   expected to be acceptable to the other
    participants.  For example,\n   the UA SHOULD NOT attempt to transition the participants
    to a\n   multicast group unless the UA can reasonably expect that all the\n   participants
    can support multicast.\n   If the UAS is incapable of satisfying the Join request,
    it MUST\n   return a 488 \"Not Acceptable Here\" response.\n"
  title: '4.  User Agent Server Behavior: Receiving a Join Header'
- contents:
  - "5.  User Agent Client Behavior: Sending a Join header\n   A User Agent that wishes
    to add a new dialog of its own to a single\n   existing early or confirmed dialog
    and any associated dialogs or\n   conferences, MAY send the target User Agent
    an INVITE request\n   containing a Join header field.  The UAC places the Call-ID,
    to-tag,\n   and from-tag information for the target dialog in a single Join\n
    \  header field and sends the new INVITE to the target.\n   If the User Agent
    receives a 300-class response, and acts on this\n   response by sending an INVITE
    to a Contact in the response, this\n   redirected INVITE MUST contain the same
    Join header which was present\n   in the original request.  Although this is unusual,
    this allows\n   INVITE requests with a Join header to be redirected before reaching\n
    \  the target UAS.\n   Note that use of the Join mechanism does not provide a
    way to match\n   multiple dialogs, nor does it provide a way to match an entire
    call,\n   an entire transaction, or to follow a chain of proxy forking logic.\n"
  title: '5.  User Agent Client Behavior: Sending a Join header'
- contents:
  - "6.  Proxy behavior\n   Proxy Servers do not require any new behavior to support
    this\n   extension.  They simply pass the Join header field transparently as\n
    \  described in the SIP specification.\n   Note that it is possible for a proxy
    (especially when forking based\n   on some application layer logic, such as caller
    screening or time-\n   of-day routing) to forward an INVITE request containing
    a Join header\n   field to a completely orthogonal set of Contacts than the original\n
    \  request it was intended to replace.  In this case, the INVITE request\n   with
    the Join header field will fail.\n"
  title: 6.  Proxy behavior
- contents:
  - '7.  Syntax

    '
  - contents:
    - "7.1.  The Join Header\n   The Join header field indicates that a new dialog
      (created by the\n   INVITE in which the Join header field in contained) should
      be joined\n   with a dialog identified by the header field, and any associated\n
      \  dialogs or conferences.  It is a request header only, and defined\n   only
      for INVITE requests.  The Join header field MAY be encrypted as\n   part of
      end-to-end encryption.  Only a single Join header field value\n   may be present
      in a SIP request\n   This document adds the following entry to Table 3 of [1].
      \ Additions\n   to this table are also provided for extension methods defined
      at the\n   time of publication of this document.  This is provided as a courtesy\n
      \  to the reader and is not normative in any way.  MESSAGE, SUBSCRIBE\n   and
      NOTIFY, REFER, INFO, UPDATE, PRACK, and PUBLISH are defined\n   respectively
      in [19], [20], [7], [21], [22], [23], and [24].\n   Header field    where   proxy
      \  ACK  BYE  CAN  INV  OPT  REG  MSG\n   ------------    -----   -----   ---
      \ ---  ---  ---  ---  ---  ---\n   Join              R              -    -    -
      \   o    -    -    -\n                                   SUB  NOT  REF  INF
      \ UPD  PRA  PUB\n                                   ---  ---  ---  ---  ---
      \ ---  ---\n   Join              R              -    -    -    -    -    -    -\n
      \  The following syntax specification uses the augmented Backus-Naur\n   Form
      (BNF) as described in RFC 2234 [3].\n      Join            = \"Join\" HCOLON
      callid *(SEMI join-param)\n      join-param      = to-tag / from-tag / generic-param\n
      \     to-tag          = \"to-tag\" EQUAL token\n      from-tag        = \"from-tag\"
      EQUAL token\n   A Join header MUST contain exactly one to-tag and exactly one
      from-\n   tag, as they are required for unique dialog matching.  For\n   compatibility
      with dialogs initiated by RFC 2543 [11] compliant UAs,\n   a to-tag of zero
      matches both a to-tag value of zero and a null to-\n   tag.  Likewise, a from-tag
      of zero matches both a to-tag value of\n   zero and a null from-tag.\n   Examples:\n
      \     Join: 98732@sip.example.com\n             ;from-tag=r33th4x0r\n             ;to-tag=ff87ff\n
      \     Join: 12adf2f34456gs5;to-tag=12345;from-tag=54321\n      Join: 87134@192.0.2.23;to-tag=24796;from-tag=0\n"
    title: 7.1.  The Join Header
  - contents:
    - "7.2.  New option tag for Require and Supported headers\n   This specification
      defines a new Require/Supported header option tag\n   \"join\".  UAs which support
      the Join header MUST include the \"join\"\n   option tag in a Supported header
      field.  UAs that want explicit\n   failure notification if Join is not supported
      MAY include the \"join\"\n   option in a Require header field.\n   Example:\n
      \     Require: join, 100rel\n"
    title: 7.2.  New option tag for Require and Supported headers
  title: 7.  Syntax
- contents:
  - "8.  Usage Examples\n   The following non-normative examples are not intended
    to enumerate\n   all the possibilities for the usage of this extension, but rather
    to\n   provide examples or ideas only.  For more examples, please see\n   service-examples
    [18].\n"
  - contents:
    - "8.1.  Join accepted and transitioned to central conference\n   A             B
      \             C            conf\n   |             |  callid: 7@c |              |\n
      \  |             |              |              |\n   |             |<-INVITE------|
      \             | *1\n   |             |-----200----->|              | *2\n   |
      \            |<----ACK------|              | *3\n   |             |<============>|
      \             |\n   |             |              |              |\n   |INVITE------>|
      \             |              | *4\n   |Join: 7@c    |--INVITE-------------------->|
      *5\n   |             |<----200---------------------| *6\n   |             |-----ACK-------------------->|\n
      \  |<----302-----|              |              | *7\n   |-----ACK---->|              |
      \             |\n   |INVITE------------------------------------>| *8\n   |<--200-------------------------------------|
      *9\n   |---ACK------------------------------------>|\n   |             |--REFER------>|
      \             | *10\n   |             |<---202-------|              |\n   |
      \            |<--NOTIFY-----|--INVITE-*11->|\n   |             |------200---->|<----200-*12--|\n
      \  |             |<--NOTIFY-----|-----ACK----->|\n   |             |------200---->|
      \             |\n   |             |---BYE------->|              |\n   |             |<--200--------|
      \             |\n   |             |              |              |\n   |<=========================================>|
      mixes the\n   |             |<===========================>| three sessions\n
      \  |             |              |<============>| together\n   The conversation
      now appears identical to the locally mixed one from\n   the example in the Introduction.
      \ Details of how the Join are\n   implemented are transparent to A.  B could
      have used 3rd party call\n   control instead to move the necessary sessions.\n
      \  Message *1: C -> B\n   INVITE sip:bob@example.org SIP/2.0\n   To: <bob@example.org>\n
      \  From: <carol@example.org>;tag=xyz\n   Call-Id: 7@c.example.org\n   CSeq 1
      INVITE\n   Contact: <sip:carol@c.example.org>\n   Message *2: B -> C\n   SIP/2.0
      200 OK\n   To: <bob@example.org>;tag=pdq\n   From: <carol@example.org>;tag=xyz\n
      \  Call-Id: 7@c.example.org\n   CSeq 1 INVITE\n   Contact: <sip:bob@b.example.org>\n
      \  Message *3: C -> B\n   ACK sip:carol@c.example.org SIP/2.0\n   To: <bob@example.org>;tag=pdq\n
      \  From: <carol@example.org>;tag=xyz\n   Call-Id: 7@c.example.org\n   CSeq 1
      INVITE\n   Message *4: A ->  B\n   INVITE sip:bob@b.example.org SIP/2.0\n   To:
      <sip:bob@example.org>\n   From: <sip:alice@example.org>;tag=iii\n   Call-Id:
      777@a.example.org\n   CSeq: 1 INVITE\n   Contact: <sip:alice@a.example.org>\n
      \  Join: 7@c.example.org;to-tag=xyz;from-tag=pdq\n   Message *5: B -> conf\n
      \  INVITE sip:conf-factory@example.org SIP/2.0\n   To: <sip:conf-factory@example.org>\n
      \  From: <sip:bob@example.org>;tag=abc\n   Call-Id: 999@b.example.org\n   CSeq:
      1INVITE\n   Contact: <sip:bob@b.example.org>\n   Message *6: conf -> B\n   SIP/2.0
      200 OK\n   To: <sip:conf-factory@example.org>;tag=def\n   From: <sip:bob@example.org>;tag=abc\n
      \  Call-Id: 999@b.example.org\n   CSeq: 1INVITE\n   Contact: <sip:conf456@conf-srv2.example.org>;isfocus\n
      \  Message *7: B -> A\n   SIP/2.0 302 Moved Temporarily\n   To: <sip:bob@example.org>\n
      \  From: <sip:alice@example.org>;tag=iii\n   Call-Id: 777@a.example.org\n   CSeq:
      1 INVITE\n   Contact: <sip:conf456@conf-srv2.example.org>;isfocus\n   Message
      *8: A -> conf\n   INVITE sip:conf456@conf-srv2.example.org SIP/2.0\n   To: <sip:bob@example.org>\n
      \  From: <sip:alice@example.org>;tag=iii\n   Call-Id: 777@a.example.org\n   CSeq:
      2 INVITE\n   Contact: <sip:alice@a.example.org>\n   Join: 7@c.example.org;to-tag=xyz;from-tag=pdq\n
      \  Message *9: conf ->A\n   SIP/2.0 200 OK\n   To: <sip:bob@example.org>;tag=jjj\n
      \  From: <sip:alice@example.org>;tag=iii\n   Call-Id: 777@a.example.org\n   CSeq:
      2 INVITE\n   Contact: <sip:conf456@conf-srv2.example.org>;isfocus\n   Message
      *10: B -> C\n   REFER sip:carol@c.example.org SIP/2.0\n   To: <carol@example.org>;tag=xyz\n
      \  From: <bob@example.org>;tag=pdq\n   Call-Id: 7@c.example.org\n   CSeq: 1
      REFER\n   Contact: <sip:bob@b.example.org>\n   Refer-To: <sip:conf456@conf-srv2.example.org>\n
      \  Referred-By: <sip:bob@b.example.org>\n   Message *11: C -> conf\n   INVITE
      sip:conf456@conf-srv2.example.org SIP/2.0\n   To: <sip:conf456@conf-srv2.example.org>\n
      \  From: <carol@example.org>;tag=mmm\n   Call-Id: 34343@c.example.com\n   CSeq:
      1 INVITE\n   Contact: <sip:carol@c.example.com>\n   Referred-By: <sip:bob@b.example.org>\n
      \  Message *12: C -> conf\n   SIP/2.0 200 OK\n   To: <sip:conf456@conf-srv2.example.org>\n
      \  From: <carol@example.org>;tag=mmm\n   Call-Id: 34343@c.example.com\n   CSeq:
      1 INVITE\n   Contact: <sip:conf456@conf-srv2.example.org>;isfocus\n   Referred-By:
      <sip:bob@b.example.org>\n"
    title: 8.1.  Join accepted and transitioned to central conference
  - contents:
    - "8.2.  Join rejected\n   A             B              C\n   |             |
      \ callid: 7@c |\n   |             |              |\n   |             |<============>|\n
      \  |             |              |\n   |INVITE------>|  *1          |\n   |Join:
      7@c    |              |\n   |             |              |\n   |<----486-----|
      \ *2          |\n   |-----ACK---->|              |\n   |             |              |\n
      \  In this example B is Busy (does not want to be disturbed), and\n   therefore
      does not wish to add A.  B could also decline the request\n   with a 603 response.\n
      \  Message *1: A ->  B\n   INVITE sip:bob@b.example.org SIP/2.0\n   To: <sip:bob@example.org>\n
      \  From: <sip:alice@example.org>;tag=iii\n   Call-Id: 777@a.example.org\n   CSeq:
      1 INVITE\n   Contact: <sip:alice@a.example.org>\n   Join: 7@c.example.org;to-tag=xyz;from-tag=pdq\n
      \  Message *2: B -> A\n   SIP/2.0 486 Busy\n   To: <sip:bob@example.org>\n   From:
      <sip:alice@example.org>;tag=iii\n   Call-Id: 777@a.example.org\n   CSeq: 1 INVITE\n"
    title: 8.2.  Join rejected
  title: 8.  Usage Examples
- contents:
  - "9.  Security Considerations\n   The extension specified in this document significantly
    changes the\n   relative security of SIP devices.  Currently in SIP, even if an\n
    \  eavesdropper learns the Call-ID, To, and From headers of a dialog,\n   they
    cannot easily modify or destroy that dialog if Digest\n   authentication or end-to-end
    message integrity are used.\n   This extension can be used to insert or monitor
    potentially sensitive\n   content in a multimedia conversation.  As such, invitations
    with the\n   Join header MUST only be accepted if the peer requesting replacement\n
    \  has been properly authenticated using a standard SIP mechanism\n   (Digest
    or S/MIME), and authorized to be joined with the target\n   dialog.  (All SIP
    implementations are already required to support\n   Digest Authentication.)  Generally
    authorization for joins are\n   configured as a matter of local policy as long-duration
    persistent\n   relationships.\n   For example, the UAs used by call center agents
    might be configured\n   with a list of identities who could join their calls (supervisors
    and\n   any call center monitoring User Agents).  Alternatively the call\n   center
    agents might rely on transitive authorization assertions from\n   a (shorter)
    list of authorized hosts (e.g., a certificate authority).\n   For answering-machine-style
    message screening this is even easier.\n   Presumably the user screening their
    messages already has some\n   credentials with their messaging server.\n   Some
    mechanisms for obtaining the dialog information needed by the\n   Join header
    (Call-ID, to-tag, and from-tag) include URIs on a web\n   page, subscriptions
    to an appropriate event package, and\n   notifications after a REFER request.
    \ Use of end-to-end security\n   mechanisms to integrity protect and encrypt this
    information is also\n   RECOMMENDED.\n   This extension was designed to take advantage
    of future signature or\n   authorization schemes defined by standards track extensions.
    \ In\n   general, call control features would benefit considerably from such\n
    \  work.\n   Section 4 describes specific mechanisms for authorization using\n
    \  Digest Authentication and S/MIME (RFC 3261) and Referred-by [9], the\n   currently
    available capabilities in SIP.\n"
  title: 9.  Security Considerations
- contents:
  - '10.  IANA Considerations

    '
  - contents:
    - "10.1.  Registration of \"Join\" SIP header\n   Name of Header:          Join\n
      \  Short form:              none\n   Normative description:   section 7.1 of
      this document\n"
    title: 10.1.  Registration of "Join" SIP header
  - contents:
    - "10.2.  Registration of \"join\" SIP Option-tag\n   Name of option:          join\n
      \  Description:             Support for the SIP Join header\n   SIP headers
      defined:     Join\n   Normative description:   This document\n"
    title: 10.2.  Registration of "join" SIP Option-tag
  title: 10.  IANA Considerations
- contents:
  - "11.  Acknowledgments\n   Thanks to Robert Sparks, Alan Johnston, and Ben Campbell
    and many\n   other members of the SIP WG for their continued support of the cause\n
    \  of distributed call control in SIP.\n"
  title: 11.  Acknowledgments
- contents:
  - '12.  References

    '
  - contents:
    - "12.1.  Normative References\n   [1]   Rosenberg, J., Schulzrinne, H., Camarillo,
      G., Johnston, A.,\n         Peterson, J., Sparks, R., Handley, M., and E. Schooler,
      \"SIP:\n         Session Initiation Protocol\", RFC 3261, June 2002.\n   [2]
      \  Bradner, S., \"Key words for use in RFCs to Indicate Requirement\n         Levels\",
      BCP 14, RFC 2119, March 1997.\n   [3]   Crocker, D. and P. Overell, \"Augmented
      BNF for Syntax\n         Specifications: ABNF\", RFC 2234, November 1997.\n
      \  [4]   Franks, J., Hallam-Baker, P., Hostetler, J., Lawrence, S.,\n         Leach,
      P., Luotonen, A., and L. Stewart, \"HTTP Authentication:\n         Basic and
      Digest Access Authentication\", RFC 2617, June 1999.\n   [5]   Ramsdell, B.,
      \"Secure/Multipurpose Internet Mail Extensions\n         (S/MIME) Version 3.1
      Message Specification\", RFC 3851, July\n         2004.\n   [6]   Rosenberg,
      J., \"Indicating User Agent Capabilities in the\n         Session Initiation
      Protocol  (SIP)\", RFC 3840, August 2004.\n"
    title: 12.1.  Normative References
  - contents:
    - "12.2.  Informative References\n   [7]   Sparks, R., \"The Session Initiation
      Protocol (SIP) Refer\n         Method\", RFC 3515, April 2003.\n   [8]   Dean,
      R., Biggs, B., and R. Mahy, \"The Session Initiation\n         Protocol (SIP)
      \"Replaces\" Header\", RFC 3891, September 2004.\n   [9]   Sparks, R., \"The
      Session Initiation Protocol (SIP) Referred-By\n         Mechanism\", RFC 3892,
      September 2004.\n   [10]  Peterson, J., \"Session Initiation Protocol (SIP)
      Authenticated\n         Identity Body (AIB) Format\", RFC 3893, September 2004.\n
      \  [11]  Handley, M., Schulzrinne, H., Schooler, E., and J. Rosenberg,\n         \"SIP:
      Session Initiation Protocol\", RFC 2543, March 1999.\n   [12]  Mahy, R., \"A
      Call Control and Multi-party usage framework for\n         the Session  Initiation
      Protocol (SIP)\", Work in Progress,\n         March 2003.\n   [13]  Rosenberg,
      J. and H. Schulzrinne, \"An INVITE Initiated Dialog\n         Event Package
      for the Session Initiation Protocol (SIP)\", Work\n         in Progress, March
      2003.\n   [14]  IAB and IESG, \"IETF Policy on Wiretapping\", RFC 2804, May
      2000.\n   [15]  Rosenberg, J., \"A Framework for Conferencing with the Session\n
      \        Initiation Protocol\", Work in Progress, May 2003.\n   [16]  Johnston,
      A. and O. Levin, \"Session Initiation Protocol Call\n         Control - Conferencing
      for User  Agents\", Work in Progress,\n         April 2003.\n   [17]  Rosenberg,
      J., Peterson, J., Schulzrinne, H., and G. Camarillo,\n         \"Best Current
      Practices for Third Party Call Control (3pcc) in\n         the Session Initiation
      Protocol (SIP)\", BCP 85, RFC 3725, April\n         2004.\n   [18]  Johnston,
      A. and S. Donovan, \"Session Initiation Protocol\n         Service Examples\",
      Work in Progress, March 2003.\n   [19]  Campbell, B., Rosenberg, J., Schulzrinne,
      H., Huitema, C., and\n         D. Gurle, \"Session Initiation Protocol (SIP)
      Extension for\n         Instant Messaging\", RFC 3428, December 2002.\n   [20]
      \ Roach, A., \"Session Initiation Protocol (SIP)-Specific Event\n         Notification\",
      RFC 3265, June 2002.\n   [21]  Donovan, S., \"The SIP INFO Method\", RFC 2976,
      October 2000.\n   [22]  Rosenberg, J., \"The Session Initiation Protocol (SIP)
      UPDATE\n         Method\", RFC 3311, October 2002.\n   [23]  Rosenberg, J. and
      H. Schulzrinne, \"Reliability of Provisional\n         Responses in Session
      Initiation Protocol (SIP)\", RFC 3262, June\n         2002.\n   [24]  Campbell,
      B., \"SIMPLE Presence Publication Mechanism\", Work in\n         Progress, February
      2003.\n"
    title: 12.2.  Informative References
  title: 12.  References
- contents:
  - "13.  Authors' Addresses\n   Rohan Mahy\n   Airespace\n   110 Nortech Parkway\n
    \  San Jose, CA 95134\n   USA\n   EMail: rohan@airespace.com\n   Dan Petrie\n
    \  Pingtel\n   400 West Cummings Park, Suite 2200\n   Woburn, MA  01801\n   USA\n
    \  EMail: dpetrie@pingtel.com\n"
  title: 13.  Authors' Addresses
- contents:
  - "14.  Full Copyright Statement\n   Copyright (C) The Internet Society (2004).\n
    \  This document is subject to the rights, licenses and restrictions\n   contained
    in BCP 78, and except as set forth therein, the authors\n   retain all their rights.\n
    \  This document and the information contained herein are provided on an\n   \"AS
    IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n   OR IS SPONSORED
    BY (IF ANY), THE INTERNET SOCIETY AND THE INTERNET\n   ENGINEERING TASK FORCE
    DISCLAIM ALL WARRANTIES, EXPRESS OR IMPLIED,\n   INCLUDING BUT NOT LIMITED TO
    ANY WARRANTY THAT THE USE OF THE\n   INFORMATION HEREIN WILL NOT INFRINGE ANY
    RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR
    PURPOSE.\n"
  title: 14.  Full Copyright Statement
- contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or
    scope of any\n   Intellectual Property Rights or other rights that might be claimed
    to\n   pertain to the implementation or use of the technology described in\n   this
    document or the extent to which any license under such rights\n   might or might
    not be available; nor does it represent that it has\n   made any independent effort
    to identify any such rights.  Information\n   on the IETF's procedures with respect
    to rights in IETF Documents can\n   be found in BCP 78 and BCP 79.\n   Copies
    of IPR disclosures made to the IETF Secretariat and any\n   assurances of licenses
    to be made available, or the result of an\n   attempt made to obtain a general
    license or permission for the use of\n   such proprietary rights by implementers
    or users of this\n   specification can be obtained from the IETF on-line IPR repository
    at\n   http://www.ietf.org/ipr.\n   The IETF invites any interested party to bring
    to its attention any\n   copyrights, patents or patent applications, or other
    proprietary\n   rights that may cover technology that may be required to implement\n
    \  this standard.  Please address the information to the IETF at ietf-\n   ipr@ietf.org.\n"
  title: Intellectual Property
- contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided
    by the\n   Internet Society.\n"
  title: Acknowledgement
