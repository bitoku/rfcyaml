- contents:
  - '          X.509v3 Certificates for Secure Shell Authentication

    '
  title: __initial_text__
- contents:
  - "Abstract\n   X.509 public key certificates use a signature by a trusted\n   certification
    authority to bind a given public key to a given digital\n   identity.  This document
    specifies how to use X.509 version 3 public\n   key certificates in public key
    algorithms in the Secure Shell\n   protocol.\n"
  title: Abstract
- contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This
    document is a product of the Internet Engineering Task Force\n   (IETF).  It represents
    the consensus of the IETF community.  It has\n   received public review and has
    been approved for publication by the\n   Internet Engineering Steering Group (IESG).
    \ Further information on\n   Internet Standards is available in Section 2 of RFC
    5741.\n   Information about the current status of this document, any errata,\n
    \  and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc6187.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2011 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n
    \  (http://trustee.ietf.org/license-info) in effect on the date of\n   publication
    of this document.  Please review these documents\n   carefully, as they describe
    your rights and restrictions with respect\n   to this document.  Code Components
    extracted from this document must\n   include Simplified BSD License text as described
    in Section 4.e of\n   the Trust Legal Provisions and are provided without warranty
    as\n   described in the Simplified BSD License.\n"
  title: Copyright Notice
- contents:
  - "Table of Contents\n   1.  Introduction . . . . . . . . . . . . . . . . . . .
    . . . . . .  2\n   2.  Public Key Algorithms Using X.509 Version 3 Certificates
    . . .  4\n     2.1.  Public Key Format  . . . . . . . . . . . . . . . . . . .
    .  4\n     2.2.  Certificate Extensions . . . . . . . . . . . . . . . . . .  6\n
    \      2.2.1.  KeyUsage . . . . . . . . . . . . . . . . . . . . . . .  7\n       2.2.2.
    \ ExtendedKeyUsage . . . . . . . . . . . . . . . . . . .  7\n   3.  Signature
    Encoding . . . . . . . . . . . . . . . . . . . . . .  8\n     3.1.  x509v3-ssh-dss
    . . . . . . . . . . . . . . . . . . . . . .  8\n     3.2.  x509v3-ssh-rsa . .
    . . . . . . . . . . . . . . . . . . . .  8\n     3.3.  x509v3-rsa2048-sha256  .
    . . . . . . . . . . . . . . . . .  9\n     3.4.  x509v3-ecdsa-sha2-*  . . . .
    . . . . . . . . . . . . . . .  9\n   4.  Use in Public Key Algorithms . . . .
    . . . . . . . . . . . . . 10\n   5.  Security Considerations  . . . . . . . .
    . . . . . . . . . . . 11\n   6.  IANA Considerations  . . . . . . . . . . . .
    . . . . . . . . . 12\n   7.  References . . . . . . . . . . . . . . . . . . .
    . . . . . . . 12\n     7.1.  Normative References . . . . . . . . . . . . . .
    . . . . . 12\n     7.2.  Informative References . . . . . . . . . . . . . . .
    . . . 14\n   Appendix A.  Example . . . . . . . . . . . . . . . . . . . . . .
    . 15\n   Appendix B.  Acknowledgements  . . . . . . . . . . . . . . . . . . 15\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   There are two Secure Shell (SSH) protocols that use public
    key\n   cryptography for authentication.  The Transport Layer Protocol,\n   described
    in [RFC4253], requires that a digital signature algorithm\n   (called the \"public
    key algorithm\") MUST be used to authenticate the\n   server to the client.  Additionally,
    the User Authentication Protocol\n   described in [RFC4252] allows for the use
    of a digital signature to\n   authenticate the client to the server (\"publickey\"
    authentication).\n   In both cases, the validity of the authentication depends
    upon the\n   strength of the linkage between the public signing key and the\n
    \  identity of the signer.  Digital certificates, such as those in X.509\n   version
    3 (X.509v3) format [RFC5280], are used in many corporate and\n   government environments
    to provide identity management.  They use a\n   chain of signatures by a trusted
    root certification authority and its\n   intermediate certificate authorities
    to bind a given public signing\n   key to a given digital identity.\n   The following
    public key authentication algorithms are currently\n   available for use in SSH:\n
    \                      +--------------+-----------+\n                       |
    \  Algorithm  | Reference |\n                       +--------------+-----------+\n
    \                      |    ssh-dss   | [RFC4253] |\n                       |
    \             |           |\n                       |    ssh-rsa   | [RFC4253]
    |\n                       |              |           |\n                       |
    pgp-sign-dss | [RFC4253] |\n                       |              |           |\n
    \                      | pgp-sign-rsa | [RFC4253] |\n                       |
    \             |           |\n                       | ecdsa-sha2-* | [RFC5656]
    |\n                       +--------------+-----------+\n   Since Pretty Good Privacy
    (PGP) has its own method for binding a\n   public key to a digital identity, this
    document focuses solely upon\n   the non-PGP methods.  In particular, this document
    defines the\n   following public key algorithms, which differ from the above solely\n
    \  in their use of X.509v3 certificates to convey the signer's public\n   key.\n
    \                        +-----------------------+\n                         |
    \      Algorithm       |\n                         +-----------------------+\n
    \                        |     x509v3-ssh-dss    |\n                         |
    \                      |\n                         |     x509v3-ssh-rsa    |\n
    \                        |                       |\n                         |
    x509v3-rsa2048-sha256 |\n                         |                       |\n
    \                        |  x509v3-ecdsa-sha2-*  |\n                         +-----------------------+\n
    \  Public keys conveyed using the x509v3-ecdsa-sha2-* public key\n   algorithms
    can be used with the ecmqv-sha2 key exchange method.\n   Implementation of this
    specification requires familiarity with the\n   Secure Shell protocol [RFC4251]
    [RFC4253] and X.509v3 certificates\n   [RFC5280].  Data types used in describing
    protocol messages are\n   defined in Section 5 of [RFC4251].\n   This document
    is concerned with SSH implementation details;\n   specification of the underlying
    cryptographic algorithms and the\n   handling and structure of X.509v3 certificates
    is left to other\n   standards documents, particularly [RFC3447], [FIPS-186-3],\n
    \  [FIPS-180-2], [FIPS-180-3], [SEC1], and [RFC5280].\n   An earlier proposal
    for the use of X.509v3 certificates in the Secure\n   Shell protocol was introduced
    by O. Saarenmaa and J. Galbraith; while\n   this document is informed in part
    by that earlier proposal, it does\n   not maintain strict compatibility.\n   The
    key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\",
    \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this\n   document
    are to be interpreted as described in RFC 2119 [RFC2119].\n"
  title: 1.  Introduction
- contents:
  - "2.  Public Key Algorithms Using X.509 Version 3 Certificates\n   This document
    defines the following new public key algorithms for use\n   in the Secure Shell
    protocol: x509v3-ssh-dss, x509v3-ssh-rsa,\n   x509v3-rsa2048-sha256, and the family
    of algorithms given by\n   x509v3-ecdsa-sha2-*.  In these algorithms, a public
    key is stored in\n   an X.509v3 certificate.  This certificate, a chain of certificates\n
    \  leading to a trusted certificate authority, and optional messages\n   giving
    the revocation status of the certificates are sent as the\n   public key data
    in the Secure Shell protocol according to the format\n   in this section.\n"
  - contents:
    - "2.1.  Public Key Format\n   The reader is referred to [RFC5280] for a general
      description of\n   X.509 version 3 certificates.  For the purposes of this document,
      it\n   suffices to know that in X.509 a chain or sequence of certificates\n
      \  (possibly of length one) allows a trusted root certificate authority\n   and
      its intermediate certificate authorities to cryptographically\n   bind a given
      public key to a given digital identity using public key\n   signatures.\n   For
      all of the public key algorithms specified in this document, the\n   key format
      consists of a sequence of one or more X.509v3 certificates\n   followed by a
      sequence of 0 or more Online Certificate Status\n   Protocol (OCSP) responses
      as in Section 4.2 of [RFC2560].  Providing\n   OCSP responses directly in this
      data structure can reduce the number\n   of communication rounds required (saving
      the implementation from\n   needing to perform OCSP checking out-of-band) and
      can also allow a\n   client outside of a private network to receive OCSP responses
      from a\n   server behind a firewall.  As with any use of OCSP data,\n   implementations
      SHOULD check that the production time of the OCSP\n   response is acceptable.
      \ It is RECOMMENDED, but not REQUIRED, that\n   implementations reject certificates
      for which the certificate status\n   is revoked.\n   The key format has the
      following specific encoding:\n     string  \"x509v3-ssh-dss\" / \"x509v3-ssh-rsa\"
      /\n             \"x509v3-rsa2048-sha256\" / \"x509v3-ecdsa-sha2-[identifier]\"\n
      \    uint32  certificate-count\n     string  certificate[1..certificate-count]\n
      \    uint32  ocsp-response-count\n     string  ocsp-response[0..ocsp-response-count]\n
      \  In the figure above, the string [identifier] is the identifier of the\n   elliptic
      curve domain parameters.  The format of this string is\n   specified in Section
      6.1 of [RFC5656].  Information on the REQUIRED\n   and RECOMMENDED sets of elliptic
      curve domain parameters for use with\n   this algorithm can be found in Section
      10 of [RFC5656].\n   Each certificate and ocsp-response MUST be encoded as a
      string of\n   octets using the Distinguished Encoding Rules (DER) encoding of\n
      \  Abstract Syntax Notation One (ASN.1) [ASN1].  An example of an SSH\n   key
      exchange involving one of these public key algorithms is given in\n   Appendix
      A.\n   Additionally, the following constraints apply:\n   o  The sender's certificate
      MUST be the first certificate and the\n      public key conveyed by this certificate
      MUST be consistent with\n      the public key algorithm being employed to authenticate
      the\n      sender.\n   o  Each following certificate MUST certify the one preceding
      it.\n   o  The self-signed certificate specifying the root authority MAY be\n
      \     omitted.  All other intermediate certificates in the chain leading\n      to
      a root authority MUST be included.\n   o  To improve the chances that a peer
      can verify certificate chains\n      and OCSP responses, individual certificates
      and OCSP responses\n      SHOULD be signed using only signature algorithms corresponding
      to\n      public key algorithms supported by the peer, as indicated in the\n
      \     server_host_key_algorithms field of the SSH_MSG_KEXINIT packet\n      (see
      Section 7.1 of [RFC4253]).  However, other algorithms MAY be\n      used.  The
      choice of signature algorithm used by any given\n      certificate or OCSP response
      is independent of the signature\n      algorithms chosen by other elements in
      the chain.\n   o  Verifiers MUST be prepared to receive certificate chains and
      OCSP\n      responses that use algorithms not listed in the\n      server_host_key_algorithms
      field of the SSH_MSG_KEXINIT packet,\n      including algorithms that potentially
      have no Secure Shell\n      equivalent.  However, peers sending such chains
      should recognize\n      that such chains are more likely to be unverifiable
      than chains\n      that use only algorithms listed in the server_host_key_algorithms\n
      \     field.\n   o  There is no requirement on the ordering of OCSP responses.
      \ The\n      number of OCSP responses MUST NOT exceed the number of\n      certificates.\n
      \  Upon receipt of a certificate chain, implementations MUST verify the\n   certificate
      chain according to Section 6.1 of [RFC5280] based on a\n   root of trust configured
      by the system administrator or user.\n   Issues associated with the use of certificates
      (such as expiration of\n   certificates and revocation of compromised certificates)
      are\n   addressed in [RFC5280] and are outside the scope of this document.\n
      \  However, compliant implementations MUST comply with [RFC5280].\n   Implementations
      providing and processing OCSP responses MUST comply\n   with [RFC2560].\n   When
      no OCSP responses are provided, it is up to the implementation\n   and system
      administrator to decide whether or not to accept the\n   certificate.  It may
      be possible for the implementation to retrieve\n   OCSP responses based on the
      id-ad-ocsp access description in the\n   certificate's Authority Information
      Access data (Section 4.2.2.1 of\n   [RFC5280]).  However, if the id-ad-ocsp
      access description indicates\n   that the certificate authority employs OCSP,
      and no OCSP response\n   information is available, it is RECOMMENDED that the
      certificate be\n   rejected.\n   [RFC5480] and [RFC5758] describe the structure
      of X.509v3\n   certificates to be used with Elliptic Curve Digital Signature\n
      \  Algorithm (ECDSA) public keys.  [RFC3279] and [RFC5280] describe the\n   structure
      of X.509v3 certificates to be used with RSA and Digital\n   Signature Algorithm
      (DSA) public keys.  [RFC5759] provides additional\n   guidance for ECDSA keys
      in Suite B X.509v3 certificate and\n   certificate revocation list profiles.\n"
    title: 2.1.  Public Key Format
  - contents:
    - "2.2.  Certificate Extensions\n   Certificate extensions allow for the specification
      of additional\n   attributes associated with a public key in an X.509v3 certificate\n
      \  (see Section 4.2 of [RFC5280]).  The KeyUsage and ExtendedKeyUsage\n   extensions
      may be used to restrict the use of X.509v3 certificates in\n   the context of
      the Secure Shell protocol as specified in the\n   following sections.\n"
    - contents:
      - "2.2.1.  KeyUsage\n   The KeyUsage extension MAY be used to restrict a certificate's
        use.\n   In accordance with Section 4.2.1.3 of [RFC5280], if the KeyUsage\n
        \  extension is present, then the certificate MUST be used only for one\n
        \  of the purposes indicated.  There are two relevant keyUsage\n   identifiers
        for the certificate corresponding to the public key\n   algorithm in use:\n
        \  o  If the KeyUsage extension is present in a certificate for the\n      x509v3-ssh-dss,
        x509v3-ssh-rsa, x509v3-rsa2048-sha256, or x509v3-\n      ecdsa-sha2-* public
        key algorithms, then the digitalSignature bit\n      MUST be set.\n   o  If
        the KeyUsage extension is present in a certificate for the\n      ecmqv-sha2
        key exchange method, then the keyAgreement bit MUST be\n      set.\n   For
        the remaining certificates in the certificate chain,\n   implementations MUST
        comply with existing conventions on KeyUsage\n   identifiers and certificates
        as in Section 4.2.1.3 of [RFC5280].\n"
      title: 2.2.1.  KeyUsage
    - contents:
      - "2.2.2.  ExtendedKeyUsage\n   This document defines two ExtendedKeyUsage key
        purpose IDs that MAY\n   be used to restrict a certificate's use: id-kp-secureShellClient,\n
        \  which indicates that the key can be used for a Secure Shell client,\n   and
        id-kp-secureShellServer, which indicates that the key can be used\n   for
        a Secure Shell server.  In accordance with Section 4.2.1.12 of\n   [RFC5280],
        if the ExtendedKeyUsage extension is present, then the\n   certificate MUST
        be used only for one of the purposes indicated.  The\n   object identifiers
        of the two key purpose IDs defined in this\n   document are as follows:\n
        \  o  id-pkix OBJECT IDENTIFIER ::= { iso(1) identified-organization(3)\n
        \     dod(6) internet(1) security(5) mechanisms(5) pkix(7) }\n   o  id-kp
        OBJECT IDENTIFIER ::= { id-pkix 3 } -- extended key purpose\n      identifiers\n
        \  o  id-kp-secureShellClient OBJECT IDENTIFIER ::= { id-kp 21 }\n   o  id-kp-secureShellServer
        OBJECT IDENTIFIER ::= { id-kp 22 }\n"
      title: 2.2.2.  ExtendedKeyUsage
    title: 2.2.  Certificate Extensions
  title: 2.  Public Key Algorithms Using X.509 Version 3 Certificates
- contents:
  - "3.  Signature Encoding\n   Signing and verifying using the X.509v3-based public
    key algorithms\n   specified in this document (x509v3-ssh-dss, x509v3-ssh-rsa,\n
    \  x509v3-ecdsa-sha2-*) is done in the analogous way for the\n   corresponding
    non-X.509v3-based public key algorithms (ssh-dss,\n   ssh-rsa, ecdsa-sha2-*, respectively);
    the x509v3-rsa2048-sha256\n   public key algorithm provides a new mechanism, similar
    to ssh-rsa,\n   but has a different hash function and additional key size\n   constraints.
    \ For concreteness, we specify this explicitly below.\n"
  - contents:
    - "3.1.  x509v3-ssh-dss\n   Signing and verifying using the x509v3-ssh-dss key
      format is done\n   according to the Digital Signature Standard [FIPS-186-3]
      using the\n   SHA-1 hash [FIPS-180-2].\n   The resulting signature is encoded
      as follows:\n     string  \"ssh-dss\"\n     string  dss_signature_blob\n   The
      value for dss_signature_blob is encoded as a string containing r,\n   followed
      by s (which are fixed-length 160-bit integers, without\n   lengths or padding,
      unsigned, and in network byte order).\n   This format is the same as for ssh-dss
      signatures in Section 6.6 of\n   [RFC4253].\n"
    title: 3.1.  x509v3-ssh-dss
  - contents:
    - "3.2.  x509v3-ssh-rsa\n   Signing and verifying using the x509v3-ssh-rsa key
      format is\n   performed according to the RSASSA-PKCS1-v1_5 scheme in [RFC3447]\n
      \  using the SHA-1 hash [FIPS-180-2].\n   The resulting signature is encoded
      as follows:\n     string  \"ssh-rsa\"\n     string  rsa_signature_blob\n   The
      value for rsa_signature_blob is encoded as a string containing s\n   (which
      is an integer, without lengths or padding, unsigned, and in\n   network byte
      order).\n   This format is the same as for ssh-rsa signatures in Section 6.6
      of\n   [RFC4253].\n"
    title: 3.2.  x509v3-ssh-rsa
  - contents:
    - "3.3.  x509v3-rsa2048-sha256\n   Signing and verifying using the x509v3-rsa2048-sha256
      key format is\n   performed according to the RSASSA-PKCS1-v1_5 scheme in [RFC3447]\n
      \  using the SHA-256 hash [FIPS-180-3]; RSA keys conveyed using this\n   format
      MUST have a modulus of at least 2048 bits.\n   The resulting signature is encoded
      as follows:\n     string  \"rsa2048-sha256\"\n     string  rsa_signature_blob\n
      \  The value for rsa_signature_blob is encoded as a string containing s\n   (which
      is an integer, without lengths or padding, unsigned, and in\n   network byte
      order).\n   Unlike the other public key formats specified in this document,
      the\n   x509v3-rsa2048-sha256 public key format does not correspond to any\n
      \  previously existing SSH non-certificate public key format.  The main\n   purpose
      of introducing this public key format is to provide an RSA-\n   based public
      key format that is compatible with current\n   recommendations on key size and
      hash functions.  For example,\n   National Institute of Standards and Technology's
      (NIST's) draft\n   recommendations on cryptographic algorithms and key lengths\n
      \  [SP-800-131] specify that digital signature generation using an RSA\n   key
      with modulus less than 2048 bits or with the SHA-1 hash function\n   is acceptable
      through 2010 and deprecated from 2011 through 2013,\n   whereas an RSA key with
      modulus at least 2048 bits and SHA-256 is\n   acceptable for the indefinite
      future.  The introduction of other non-\n   certificate-based SSH public key
      formats compatible with the above\n   recommendations is outside the scope of
      this document.\n"
    title: 3.3.  x509v3-rsa2048-sha256
  - contents:
    - "3.4.  x509v3-ecdsa-sha2-*\n   Signing and verifying using the x509v3-ecdsa-sha2-*
      key formats is\n   performed according to the ECDSA algorithm in [FIPS-186-3]
      using the\n   SHA2 hash function family [FIPS-180-3].  The choice of hash function\n
      \  from the SHA2 hash function family is based on the key size of the\n   ECDSA
      key as specified in Section 6.2.1 of [RFC5656].\n   The resulting signature
      is encoded as follows:\n     string  \"ecdsa-sha2-[identifier]\"\n     string
      \ ecdsa_signature_blob\n   The string [identifier] is the identifier of the
      elliptic curve\n   domain parameters.  The format of this string is specified
      in Section\n   6.1 of [RFC5656].\n   The ecdsa_signature_blob value has the
      following specific encoding:\n     mpint   r\n     mpint   s\n   The integers
      r and s are the output of the ECDSA algorithm.\n   This format is the same as
      for ecdsa-sha2-* signatures in Section\n   3.1.2 of [RFC5656].\n"
    title: 3.4.  x509v3-ecdsa-sha2-*
  title: 3.  Signature Encoding
- contents:
  - "4.  Use in Public Key Algorithms\n   The public key algorithms and encodings
    defined in this document\n   SHOULD be accepted any place in the Secure Shell
    protocol suite where\n   public keys are used, including, but not limited to,
    the following\n   protocol messages for server authentication and user authentication:\n
    \  o  in the SSH_MSG_USERAUTH_REQUEST message when \"publickey\"\n      authentication
    is used [RFC4252]\n   o  in the SSH_MSG_USERAUTH_REQUEST message when \"hostbased\"\n
    \     authentication is used [RFC4252]\n   o  in the SSH_MSG_KEXDH_REPLY message
    [RFC4253]\n   o  in the SSH_MSG_KEXRSA_PUBKEY message [RFC4432]\n   o  in the
    SSH_MSG_KEXGSS_HOSTKEY message [RFC4462]\n   o  in the SSH_MSG_KEX_ECDH_REPLY
    message [RFC5656]\n   o  in the SSH_MSG_KEX_ECMQV_REPLY message [RFC5656]\n   When
    a public key from this specification is included in the input to\n   a hash algorithm,
    the exact bytes that are transmitted on the wire\n   must be used as input to
    the hash functions.  In particular,\n   implementations MUST NOT omit any of the
    chain certificates or OCSP\n   responses that were included on the wire, nor change
    encoding of the\n   certificate or OCSP data.  Otherwise, hashes that are meant
    to be\n   computed in parallel by both peers will have differing values.\n   For
    the purposes of user authentication, the mapping between\n   certificates and
    user names is left as an implementation and\n   configuration issue for implementers
    and system administrators.\n   For the purposes of server authentication, it is
    RECOMMENDED that\n   implementations support the following mechanism mapping host
    names to\n   certificates.  However, local policy MAY disable the mechanism or
    MAY\n   impose additional constraints before considering a matching\n   successful.
    \ Furthermore, additional mechanisms mapping host names to\n   certificates MAY
    be used and are left as implementation and\n   configuration issues for implementers
    and system administrators.\n   The RECOMMENDED server authentication mechanism
    is as follows.  The\n   subjectAlternativeName X.509v3 extension, as described
    in Section\n   4.2.1.6 of [RFC5280], SHOULD be used to convey the server host
    name,\n   using either dNSName entries or iPAddress entries to convey domain\n
    \  names or IP addresses as appropriate.  Multiple entries MAY be\n   specified.
    \ The following rules apply:\n   o  If the client's reference identifier (e.g.,
    the host name typed by\n      the client) is a DNS domain name, the server's identity
    SHOULD be\n      checked using the rules specified in [RFC6125].  Support for
    the\n      DNS-ID identifier type is RECOMMENDED in client and server\n      software
    implementations.  Certification authorities that issue\n      certificates for
    use by Secure Shell servers SHOULD support the\n      DNS-ID identifier type.
    \ Service providers SHOULD include the\n      DNS-ID identifier type in certificate
    requests.  The DNS-ID MAY\n      contain the wildcard character '*' as the complete
    left-most label\n      within the identifier.\n   o  If the client's reference
    identifier is an IP address as defined\n      by [RFC0791] or [RFC2460], the client
    SHOULD convert that address\n      to the \"network byte order\" octet string
    representation and\n      compare it against a subjectAltName entry of type iPAddress.
    \ A\n      match occurs if the octet strings are identical for the reference\n
    \     identifier and any presented identifier.\n"
  title: 4.  Use in Public Key Algorithms
- contents:
  - "5.  Security Considerations\n   This document provides new public key algorithms
    for the Secure Shell\n   protocol that convey public keys using X.509v3 certificates.
    \ For the\n   most part, the security considerations involved in using the Secure\n
    \  Shell protocol apply, since all of the public key algorithms\n   introduced
    in this document are based on existing algorithms in the\n   Secure Shell protocol.
    \ However, implementers should be aware of\n   security considerations specific
    to the use of X.509v3 certificates\n   in a public key infrastructure, including
    considerations related to\n   expired certificates and certificate revocation
    lists.\n   The reader is directed to the security considerations sections of\n
    \  [RFC5280] for the use of X.509v3 certificates, [RFC2560] for the use\n   of
    OCSP response, [RFC4253] for server authentication, and [RFC4252]\n   for user
    authentication.  Implementations SHOULD NOT use revoked\n   certificates because
    many causes of certificate revocation mean that\n   the critical authentication
    properties needed are no longer true.\n   For example, compromise of a certificate's
    private key or issuance of\n   a certificate to the wrong party are common reasons
    to revoke a\n   certificate.\n   If a party to the SSH exchange attempts to use
    a revoked X.509v3\n   certificate, this attempt along with the date, time, certificate\n
    \  identity, and apparent origin IP address of the attempt SHOULD be\n   logged
    as a security event in the system's audit logs or the system's\n   general event
    logs.  Similarly, if a certificate indicates that OCSP\n   is used and there is
    no response to the OCSP query, the absence of a\n   response along with the details
    of the attempted certificate use (as\n   before) SHOULD be logged.\n   As with
    all specifications involving cryptographic algorithms, the\n   quality of security
    provided by this specification depends on the\n   strength of the cryptographic
    algorithms in use, the security of the\n   keys, the correctness of the implementation,
    and the security of the\n   public key infrastructure and the certificate authorities.\n
    \  Accordingly, implementers are encouraged to use high-assurance\n   methods
    when implementing this specification and other parts of the\n   Secure Shell protocol
    suite.\n"
  title: 5.  Security Considerations
- contents:
  - "6.  IANA Considerations\n   Consistent with Section 8 of [RFC4251] and Section
    4.6 of [RFC4250],\n   this document makes the following registrations:\n   In
    the Public Key Algorithm Names registry:\n   o  The SSH public key algorithm \"x509v3-ssh-dss\".\n
    \  o  The SSH public key algorithm \"x509v3-ssh-rsa\".\n   o  The SSH public key
    algorithm \"x509v3-rsa2048-sha256\".\n   o  The family of SSH public key algorithm
    names beginning with\n      \"x509v3-ecdsa-sha2-\" and not containing the at-sign
    ('@').\n   The two object identifiers used in Section 2.2.2 were assigned from\n
    \  an arc delegated by IANA to the PKIX Working Group.\n"
  title: 6.  IANA Considerations
- contents:
  - '7.  References

    '
  - contents:
    - "7.1.  Normative References\n   [ASN1]        International Telecommunications
      Union, \"Abstract\n                 Syntax Notation One (ASN.1): Specification
      of basic\n                 notation\",  X.680, July 2002.\n   [FIPS-180-2]  National
      Institute of Standards and Technology, \"Secure\n                 Hash Standard\",
      FIPS 180-2, August 2002.\n   [FIPS-180-3]  National Institute of Standards and
      Technology, \"Secure\n                 Hash Standard\", FIPS 180-3, October
      2008.\n   [FIPS-186-3]  National Institute of Standards and Technology,\n                 \"Digital
      Signature Standard (DSS)\", FIPS 186-3,\n                 June 2009.\n   [RFC0791]
      \    Postel, J., \"Internet Protocol\", STD 5, RFC 791,\n                 September
      1981.\n   [RFC2119]     Bradner, S., \"Key words for use in RFCs to Indicate\n
      \                Requirement Levels\", BCP 14, RFC 2119, March 1997.\n   [RFC2460]
      \    Deering, S. and R. Hinden, \"Internet Protocol, Version\n                 6
      (IPv6) Specification\", RFC 2460, December 1998.\n   [RFC2560]     Myers, M.,
      Ankney, R., Malpani, A., Galperin, S., and\n                 C. Adams, \"X.509
      Internet Public Key Infrastructure\n                 Online Certificate Status
      Protocol - OCSP\", RFC 2560,\n                 June 1999.\n   [RFC3279]     Bassham,
      L., Polk, W., and R. Housley, \"Algorithms and\n                 Identifiers
      for the Internet X.509 Public Key\n                 Infrastructure Certificate
      and Certificate Revocation\n                 List (CRL) Profile\", RFC 3279,
      April 2002.\n   [RFC3447]     Jonsson, J. and B. Kaliski, \"Public-Key Cryptography\n
      \                Standards (PKCS) #1: RSA Cryptography Specifications\n                 Version
      2.1\", RFC 3447, February 2003.\n   [RFC4250]     Lehtinen, S. and C. Lonvick,
      \"The Secure Shell (SSH)\n                 Protocol Assigned Numbers\", RFC
      4250, January 2006.\n   [RFC4251]     Ylonen, T. and C. Lonvick, \"The Secure
      Shell (SSH)\n                 Protocol Architecture\", RFC 4251, January 2006.\n
      \  [RFC4252]     Ylonen, T. and C. Lonvick, \"The Secure Shell (SSH)\n                 Authentication
      Protocol\", RFC 4252, January 2006.\n   [RFC4253]     Ylonen, T. and C. Lonvick,
      \"The Secure Shell (SSH)\n                 Transport Layer Protocol\", RFC 4253,
      January 2006.\n   [RFC5280]     Cooper, D., Santesson, S., Farrell, S., Boeyen,
      S.,\n                 Housley, R., and W. Polk, \"Internet X.509 Public Key\n
      \                Infrastructure Certificate and Certificate Revocation\n                 List
      (CRL) Profile\", RFC 5280, May 2008.\n   [RFC5480]     Turner, S., Brown, D.,
      Yiu, K., Housley, R., and T.\n                 Polk, \"Elliptic Curve Cryptography
      Subject Public Key\n                 Information\", RFC 5480, March 2009.\n
      \  [RFC5656]     Stebila, D. and J. Green, \"Elliptic Curve Algorithm\n                 Integration
      in the Secure Shell Transport Layer\",\n                 RFC 5656, December
      2009.\n   [RFC5758]     Dang, Q., Santesson, S., Moriarty, K., Brown, D., and\n
      \                T. Polk, \"Internet X.509 Public Key Infrastructure:\n                 Additional
      Algorithms and Identifiers for DSA and\n                 ECDSA\", RFC 5758,
      January 2010.\n   [RFC6125]     Saint-Andre, P. and J. Hodges, \"Representation
      and\n                 Verification of Domain-Based Application Service\n                 Identity
      within Internet Public Key Infrastructure\n                 Using X.509 (PKIX)
      Certificates in the Context of\n                 Transport Layer Security (TLS)\",
      RFC 6125, March 2011.\n   [SEC1]        Standards for Efficient Cryptography
      Group, \"Elliptic\n                 Curve Cryptography\", SEC 1, September 2000,\n
      \                <http://www.secg.org/download/aid-780/sec1-v2.pdf>.\n"
    title: 7.1.  Normative References
  - contents:
    - "7.2.  Informative References\n   [RFC4432]     Harris, B., \"RSA Key Exchange
      for the Secure Shell\n                 (SSH) Transport Layer Protocol\", RFC
      4432, March 2006.\n   [RFC4462]     Hutzelman, J., Salowey, J., Galbraith, J.,
      and V.\n                 Welch, \"Generic Security Service Application Program\n
      \                Interface (GSS-API) Authentication and Key Exchange for\n                 the
      Secure Shell (SSH) Protocol\", RFC 4462, May 2006.\n   [RFC5759]     Solinas,
      J. and L. Zieglar, \"Suite B Certificate and\n                 Certificate Revocation
      List (CRL) Profile\", RFC 5759,\n                 January 2010.\n   [SP-800-131]
      \ Barker, E. and A. Roginsky, \"DRAFT Recommendation for\n                 the
      Transitioning of Cryptographic Algorithms and Key\n                 Lengths\",
      NIST Special Publication 800-131, June 2010.\n"
    title: 7.2.  Informative References
  title: 7.  References
- contents:
  - "Appendix A.  Example\n   The following example illustrates the use of an X.509v3
    certificate\n   for a public key for the Digital Signature Algorithm when used
    in a\n   Diffie-Hellman key exchange method.  In the example, there is a chain\n
    \  of certificates of length 2, and a single OCSP response is provided.\n     byte
    \   SSH_MSG_KEXDH_REPLY\n     string  0x00 0x00 0xXX 0xXX  -- length of the remaining
    data in\n                                     this string\n             0x00 0x00
    0x00 0x0D  -- length of string \"x509v3-ssh-dss\"\n             \"x509v3-ssh-dss\"\n
    \            0x00 0x00 0x00 0x02  -- there are 2 certificates\n             0x00
    0x00 0xXX 0xXX  -- length of sender certificate\n             DER-encoded sender
    certificate\n             0x00 0x00 0xXX 0xXX  -- length of issuer certificate\n
    \            DER-encoded issuer certificate\n             0x00 0x00 0x00 0x01
    \ -- there is 1 OCSP response\n             0x00 0x00 0xXX 0xXX  -- length of
    OCSP response\n             DER-encoded OCSP response\n     mpint   f\n     string
    \ signature of H\n"
  title: Appendix A.  Example
- contents:
  - "Appendix B.  Acknowledgements\n   The authors gratefully acknowledge helpful
    comments from Ran\n   Atkinson, Samuel Edoho-Eket, Joseph Galbraith, Russ Housley,
    Jeffrey\n   Hutzelman, Jan Pechanec, Peter Saint-Andre, Sean Turner, and Nicolas\n
    \  Williams.\n   O. Saarenmaa and J. Galbraith previously drafted a document on
    a\n   similar topic.\n"
  title: Appendix B.  Acknowledgements
- contents:
  - "Authors' Addresses\n   Kevin M. Igoe\n   National Security Agency\n   NSA/CSS
    Commercial Solutions Center\n   United States of America\n   EMail: kmigoe@nsa.gov\n
    \  Douglas Stebila\n   Queensland University of Technology\n   Information Security
    Institute\n   Level 7, 126 Margaret St\n   Brisbane, Queensland  4000\n   Australia\n
    \  EMail: douglas@stebila.ca\n"
  title: Authors' Addresses
