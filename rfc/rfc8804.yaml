- contents:
  - "    Content Delivery Network Interconnection (CDNI) Request Routing\n                               Extensions\n"
  title: __initial_text__
- contents:
  - "Abstract\n   Open Caching architecture is a use case of Content Delivery Network\n
    \  Interconnection (CDNI) in which the commercial Content Delivery\n   Network
    (CDN) is the upstream CDN (uCDN) and the ISP caching layer\n   serves as the downstream
    CDN (dCDN).  This document defines\n   extensions to the CDNI Metadata Interface
    (MI) and the Footprint &\n   Capabilities Advertisement interface (FCI).  These
    extensions are\n   derived from requirements raised by Open Caching but are also\n
    \  applicable to CDNI use cases in general.\n"
  title: Abstract
- contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This
    document is a product of the Internet Engineering Task Force\n   (IETF).  It represents
    the consensus of the IETF community.  It has\n   received public review and has
    been approved for publication by the\n   Internet Engineering Steering Group (IESG).
    \ Further information on\n   Internet Standards is available in Section 2 of RFC
    7841.\n   Information about the current status of this document, any errata,\n
    \  and how to provide feedback on it may be obtained at\n   https://www.rfc-editor.org/info/rfc8804.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2020 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n
    \  (https://trustee.ietf.org/license-info) in effect on the date of\n   publication
    of this document.  Please review these documents\n   carefully, as they describe
    your rights and restrictions with respect\n   to this document.  Code Components
    extracted from this document must\n   include Simplified BSD License text as described
    in Section 4.e of\n   the Trust Legal Provisions and are provided without warranty
    as\n   described in the Simplified BSD License.\n"
  title: Copyright Notice
- contents:
  - "Table of Contents\n   1.  Introduction\n     1.1.  Terminology\n     1.2.  Requirements
    Language\n   2.  Redirect Target Capability\n     2.1.  DNS Redirect Target\n
    \    2.2.  HTTP Redirect Target\n     2.3.  Properties of Redirect Target Capability
    Object\n     2.4.  DnsTarget Object\n       2.4.1.  DnsTarget Example\n     2.5.
    \ HttpTarget Object\n       2.5.1.  HttpTarget Example\n     2.6.  Usage Example\n
    \  3.  Fallback Target Server Address\n     3.1.  Properties of Fallback Target
    Generic Metadata Object\n     3.2.  Usage Example\n     3.3.  uCDN Addressing
    Considerations\n   4.  IANA Considerations\n     4.1.  CDNI Payload Types\n       4.1.1.
    \ CDNI FCI RedirectTarget Payload Type\n       4.1.2.  CDNI MI FallbackTarget
    Payload Type\n   5.  Security Considerations\n     5.1.  Confidentiality and Privacy\n
    \  6.  References\n     6.1.  Normative References\n     6.2.  Informative References\n
    \  Acknowledgements\n   Authors' Addresses\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   The Streaming Video Alliance [SVA] is a global association
    that works\n   to solve streaming video challenges in an effort to improve end-user\n
    \  experience and adoption.  The Open Caching Working Group [OCWG] of\n   the
    Streaming Video Alliance [SVA] is focused on the delegation of\n   video delivery
    requests from commercial CDNs to a caching layer at\n   the ISP's network.  Open
    Caching architecture is a specific use case\n   of CDNI where the commercial CDN
    is the upstream CDN (uCDN) and the\n   ISP caching layer is the downstream CDN
    (dCDN).  The Open Caching\n   Request Routing Functional Specification [OC-RR]
    defines the Request\n   Routing process and the interfaces that are required for
    its\n   provisioning.  This document defines the CDNI metadata object\n   [RFC8006]
    and the CDNI Footprint and Capabilities object [RFC8008]\n   that are required
    for Open Caching Request Routing:\n   *  Redirect Target Capability (for dCDN
    advertising redirect target\n      address)\n   *  Fallback Target Metadata (for
    uCDN configuring fallback target\n      address)\n   This document also registers
    CDNI Payload Types [RFC7736] for these\n   defined objects.\n   For consistency
    with other CDNI documents, this document follows the\n   CDNI convention of uCDN
    (upstream CDN) and dCDN (downstream CDN) to\n   represent the commercial CDN and
    ISP caching layer, respectively.\n"
  - contents:
    - "1.1.  Terminology\n   The following terms are used throughout this document:\n
      \  FQDN    Fully Qualified Domain Name\n   CDN     Content Delivery Network\n
      \  Additionally, this document reuses the terminology defined in\n   [RFC6707],
      [RFC7336], [RFC8006], [RFC8007], and [RFC8008].\n   Specifically, we use the
      following CDNI acronyms:\n   FCI     Footprint & Capabilities Advertisement
      interface (see\n           [RFC8008])\n   MI      Metadata Interface (see [RFC8006])\n
      \  uCDN    Upstream CDN (see [RFC7336])\n   dCDN    Downstream CDN (see [RFC7336])\n
      \  RT      Redirection Target.  Endpoint for redirection from uCDN to\n           dCDN.\n
      \  RR      Request Router.  An element responsible for routing user\n           requests,
      typically using HTTP redirect or DNS CNAME,\n           depending on the use
      case.\n"
    title: 1.1.  Terminology
  - contents:
    - "1.2.  Requirements Language\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\",
      \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"NOT
      RECOMMENDED\", \"MAY\", and\n   \"OPTIONAL\" in this document are to be interpreted
      as described in\n   BCP 14 [RFC2119] [RFC8174] when, and only when, they appear
      in all\n   capitals, as shown here.\n"
    title: 1.2.  Requirements Language
  title: 1.  Introduction
- contents:
  - "2.  Redirect Target Capability\n   Iterative CDNI Request Redirection is defined
    in Section 1.1 of\n   [RFC7336] and elaborated by examples in Sections 3.2 and
    3.4 of\n   [RFC7336].  A Redirection Target (RT) is defined in Section 2 of\n
    \  [RFC7975] for Recursive Request Redirection as:\n   |  The endpoint to which
    the User Agent is redirected.  In CDNI, an\n   |  RT may point to a number of
    different components, some examples\n   |  include a surrogate in the same CDN
    as the request router, a\n   |  request router in a dCDN, or a surrogate in a
    dCDN.\n   In this document, we adopt the same definition of the RT for the\n   Iterative
    Request Redirect use case.  This use case requires the\n   provisioning of the
    RT address to be used by the uCDN in order to\n   redirect to the dCDN.  RT addresses
    can vary between different\n   footprints (for example, between different regions),
    and they may\n   also change over time (for example, as a result of network problems).\n
    \  Given this variable and dynamic nature of the redirect target\n   address,
    it may not be suitable to advertise it during bootstrap.  A\n   more dynamic and
    footprint-oriented interface is required.\n   Section 4.3 of [RFC7336] suggests
    that it could be one of the roles\n   of the FCI [RFC8008].  Following this suggestion,
    we have therefore\n   chosen to use the CDNI Footprint & Capabilities Advertisement\n
    \  interface for redirect target address advertisement.\n   Use cases:\n   *  Footprint:
    The dCDN may want to have a different target per\n      footprint.  Note that
    a dCDN may spread across multiple\n      geographies.  This makes it easier to
    route client requests to a\n      nearby request router.  Though this can be achieved
    using a single\n      canonical name and \"Geo DNS\", such that in different geographies\n
    \     the same hostname is resolved to different IP address, that\n      approach
    has limitations; for example, a client may be using a\n      third-party DNS resolver,
    making it impossible for the redirector\n      to detect where the client is located,
    or Geo DNS granularity may\n      be too rough for the requirement of the application.\n
    \  *  Scaling: The dCDN may choose to scale its Request Routing service\n      by
    deploying more request routers in new locations and advertise\n      them via
    an updatable interface like the FCI.\n   The Redirect Target capability object
    is used to indicate the target\n   address the uCDN should use in order to redirect
    a client to the\n   dCDN.  A target may be attached to a specific uCDN host, attached
    to\n   a list of uCDN hosts, or used globally for all the hosts of the uCDN.\n
    \  When a dCDN is attaching the redirect target to a specific uCDN host\n   or
    a list of uCDN hosts, the dCDN MUST advertise the hosts within the\n   Redirect
    Target capability object as \"redirecting-hosts\".  In this\n   case, the uCDN
    can redirect to that dCDN address, only if the User\n   Agent request was to one
    of these uCDN hosts.\n   If the Redirect Target capability object does not contain
    a target or\n   the target is empty, the uCDN MUST interpret it as \"no target\n
    \  available for these uCDN hosts for the specified footprint\".  In case\n   such
    a target was already advertised in a previous FCI object, the\n   uCDN MUST interpret
    it as an update that deletes the previous\n   redirect target.\n"
  - contents:
    - "2.1.  DNS Redirect Target\n   A redirect target for DNS redirection is an FQDN
      used as an alias in\n   a CNAME record response (see [RFC1034]) of the uCDN
      DNS router.  Note\n   that DNS routers make routing decisions based on either
      the DNS\n   resolver's IP address or the client IP subnet when EDNS0 client-\n
      \  subnet (ECS) is used (see [RFC7871]).  The dCDN may choose to\n   advertise
      redirect targets and footprints to cover both cases, such\n   that the uCDN
      resolution would route the DNS query to different dCDN\n   CNAMEs according
      to client subnet or dCDN resolver IP address.  This\n   method further allows
      the dCDN DNS to optimize the resolution by\n   localizing the target CNAMEs.
      \ A uCDN implementation SHOULD prefer\n   routing based on client IP subnet
      when the ECS option is present.  A\n   dCDN implementation using the ECS option
      MUST be aware of the privacy\n   drawbacks listed in Section 2 of [RFC7871]
      and SHOULD follow the\n   guidelines provided in Section 11.1 of [RFC7871].\n"
    title: 2.1.  DNS Redirect Target
  - contents:
    - "2.2.  HTTP Redirect Target\n   A redirect target for HTTP redirection is the
      URI to be used as the\n   value for the Location header of an HTTP redirect
      3xx response,\n   typically a 302 (Found) (see Section 7.1.2 of [RFC7231] and\n
      \  Section 6.4 of [RFC7231]).\n"
    title: 2.2.  HTTP Redirect Target
  - contents:
    - "2.3.  Properties of Redirect Target Capability Object\n   The Redirect Target
      capability object consists of the following\n   properties:\n   Property:  redirecting-hosts\n
      \     Description:  One or more uCDN hosts to which this redirect target\n         is
      attached.  A redirecting host SHOULD be a host that was\n         published
      in a HostMatch object by the uCDN as defined in\n         Section 4.1.2 of [RFC8006].\n
      \     Type:  A list of Endpoint objects (see Section 4.3.3 of [RFC8006])\n      Mandatory-to-Specify:
      \ No.  If absent or empty, the redirect\n         target applies to all hosts
      of the redirecting uCDN.\n   Property:  dns-target\n      Description:\n         Target
      CNAME record for DNS redirection.\n      Type:\n         DnsTarget object (see
      Section 2.4)\n      Mandatory-to-Specify:\n         No.  If the dns-target is
      absent or empty, the uCDN MUST\n         interpret it as \"no dns-target available\".\n
      \  Property:  http-target\n      Description:\n         Target URI for an HTTP
      redirect.\n      Type:\n         HttpTarget object (see Section 2.5)\n      Mandatory-to-Specify:\n
      \        No.  If the http-target is absent or empty, the uCDN MUST\n         interpret
      it as \"no http-target available\".\n   The following is an example of a Redirect
      Target capability object\n   serialization that advertises a dCDN target address
      that is attached\n   to a specific list of uCDN \"redirecting-hosts\".  A uCDN
      host that is\n   included in that list can redirect to the advertised dCDN redirect\n
      \  target.  The capabilities object is serialized as a JSON object as\n   defined
      in Section 5.1 of [RFC8008].\n   {\n     \"capabilities\": [\n       {\n         \"capability-type\":
      \"FCI.RedirectTarget\",\n         \"capability-value\": {\n             \"redirecting-hosts\":
      [\n                \"a.service123.ucdn.example.com\",\n                \"b.service123.ucdn.example.com\"\n
      \            ],\n             \"dns-target\": {\n                \"host\": \"service123.ucdn.dcdn.example.com\"\n
      \            },\n             \"http-target\": {\n                 \"host\":
      \"us-east1.dcdn.example.com\",\n                 \"path-prefix\": \"/cache/1/\",\n
      \                \"include-redirecting-host\": true\n             }\n         },\n
      \        \"footprints\": [\n             <Footprint objects>\n         ]\n       }\n
      \    ]\n   }\n"
    title: 2.3.  Properties of Redirect Target Capability Object
  - contents:
    - "2.4.  DnsTarget Object\n   The DnsTarget object gives the target address for
      the DNS response to\n   delegate from the uCDN to the dCDN.\n   Property:  host\n
      \     Description:  The host property is a hostname or an IP address,\n         without
      a port number.\n      Type:  Endpoint object as defined in Section 4.3.3 of
      [RFC8006],\n         with the limitation that it SHOULD NOT include a port number\n
      \        and, in case a port number is present, the uCDN MUST ignore it.\n      Mandatory-to-Specify:
      \ Yes.\n"
    - contents:
      - "2.4.1.  DnsTarget Example\n   The following is an example of the DnsTarget
        object:\n   {\n      \"host\": \"service123.ucdn.dcdn.example.com\"\n   }\n
        \  The following is an example of a DNS query for uCDN address\n   \"a.service123.ucdn.example.com\"
        and the corresponding CNAME\n   redirection response:\n   Query:\n   a.service123.ucdn.example.com:\n
        \  type A, class IN\n   Response:\n   NAME: a.service123.ucdn.example.com,
        TYPE: CNAME, CLASS: IN,\n   TTL: 120, RDATA: service123.ucdn.dcdn.example.com\n"
      title: 2.4.1.  DnsTarget Example
    title: 2.4.  DnsTarget Object
  - contents:
    - "2.5.  HttpTarget Object\n   The HttpTarget object gives the necessary information
      to construct\n   the target Location URI for HTTP redirection.\n   Property:
      \ host\n      Description:  Hostname or IP address and an optional port, i.e.,\n
      \        the host and port of the authority component of the URI as\n         described
      in Section 3.2 of [RFC3986].\n      Type:  Endpoint object as defined in Section
      4.3.3 of [RFC8006].\n      Mandatory-to-Specify:  Yes.\n   Property:  scheme\n
      \     Description:  A URI scheme to be used in the redirect response\n         location
      construction.  When present, the uCDN MUST use the\n         provided scheme
      in for HTTP redirection to the dCDN.\n      Type:  A URI scheme as defined in
      Section 3.1 of [RFC3986],\n         represented as a JSON string.  The scheme
      MUST be either \"http\"\n         or \"https\".\n      Mandatory-to-Specify:
      \ No.  If this property is absent or empty,\n         the uCDN request router
      MUST use the same scheme as was used in\n         the original request before
      redirection.\n   Property:  path-prefix\n      Description:  A path prefix for
      the HTTP redirect Location header.\n         The original path is appended after
      this prefix.\n      Type:  A prefix of a path-absolute as defined in Section
      3.3 of\n         [RFC3986].  The prefix MUST end with a trailing slash to\n
      \        indicate the end of the last path segment in the prefix.\n      Mandatory-to-Specify:
      \ No.  If this property is absent or empty,\n         the uCDN MUST NOT prepend
      a path-prefix to the original content\n         path, i.e., the original path
      MUST appear in the Location URI\n         right after the authority component.\n
      \  Property:  include-redirecting-host\n      Description:  A flag indicating
      whether or not to include the\n         redirecting host as the first path segment
      after the path-\n         prefix.  If set to true and a \"path-prefix\" is used,
      the uCDN\n         redirecting host MUST be added as a separate path segment
      after\n         the path-prefix and before the original URL path.  If set to\n
      \        true and there is no path-prefix, the uCDN redirecting host\n         MUST
      be prepended as the first path segment in the redirect\n         URL.\n      Type:
      \ Boolean.\n      Mandatory-to-Specify:  No.  Default value is False.\n"
    - contents:
      - "2.5.1.  HttpTarget Example\n   The following is an example of the HttpTarget
        object with a \"scheme\",\n   a \"path-prefix\", and \"include-redirecting-host\"
        properties:\n   {\n      \"host\": \"us-east1.dcdn.example.com\",\n      \"scheme\":
        \"https\",\n      \"path-prefix\": \"/cache/1/\",\n      \"include-redirecting-host\":
        true\n   }\n   The following is an example of an HTTP request for content
        at uCDN\n   host \"a.service123.ucdn.example.com\" and the corresponding HTTP\n
        \  response with a Location header, used for redirecting the client to\n   the
        dCDN, constructed according to the HttpTarget object from the\n   above example:\n
        \  Request:\n   GET /vod/1/movie.mp4 HTTP/1.1\n   Host: a.service123.ucdn.example.com\n
        \  Response:\n   HTTP/1.1 302 Found\n   Location: https://us-east1.dcdn.example.com/cache/1/\n
        \  a.service123.ucdn.example.com/vod/1/movie.mp4\n"
      title: 2.5.1.  HttpTarget Example
    title: 2.5.  HttpTarget Object
  - contents:
    - "2.6.  Usage Example\n   Before requests can be routed from the uCDN to the
      dCDN, the CDNs\n   must exchange service configurations between them.  Using
      the MI, the\n   uCDN advertises out-of-band its hosts to the dCDN; each host
      is\n   designated by a hostname and has its own specific metadata (see\n   Section
      4.1.2 of [RFC8006]).  Using the FCI, the dCDN advertises\n   (also out-of-band)
      the redirect target address defined in Section 2.3\n   for the relevant uCDN
      hosts.  The following is a generalized example\n   of the message flow between
      a uCDN and a dCDN.  For simplicity, we\n   focus on the sequence of messages
      between the uCDN and dCDN and not\n   on how they are passed.\n     dCDN                                                    uCDN\n
      \  (1) | MI:  host: s123.ucdn.example.com                      |\n       |      host-metadata:
      < metadata >                      |\n   (2) | FCI:  capability-type: FCI.RedirectTarget
      \            |\n       |       redirecting-hosts: s123.ucdn.example.com        |\n
      \      |       target host: us-east1.dcdn.example.com          |\n              Figure
      1: Redirect Target Address Advertisement\n   Explanation:\n   (1)  The uCDN
      advertises a host (s123.ucdn.example.com) with the host\n        metadata.\n
      \  (2)  The dCDN advertises its FCI objects to the uCDN, including a\n        Redirect
      Target capability object that contains the redirect\n        target address
      (us-east1.dcdn.example.com) specified for that\n        uCDN host.\n   Once
      the redirect target has been set, the uCDN can start redirecting\n   user requests
      to the dCDN.  The following is a generic sequence of\n   redirection using the
      host and redirect target that were advertised\n   in Figure 1.\n   End User
      \                 dCDN                   uCDN RR\n   (1) | Request sent s123.ucdn.example.com
      \           |\n   (2) | Redirect to us-east1.dcdn.example.com         |\n   (3)
      | Request us-east1.dcdn.example.com             |\n   (4) | Response              |
      \                      |\n               Figure 2: Generic Request Redirection
      Sequence\n   Explanation:\n   (1)  The End User sends a request (DNS or HTTP)
      to the uCDN Request\n        Router (RR).\n   (2)  Using the previously advertised
      Redirect Target, the uCDN\n        redirects the request to the dCDN.\n   (3)
      \ The End User sends a request to the dCDN.\n   (4)  The dCDN either sends a
      response or reroutes it, for example, to\n        a dCDN surrogate.\n"
    title: 2.6.  Usage Example
  title: 2.  Redirect Target Capability
- contents:
  - "3.  Fallback Target Server Address\n   Open Caching requires that the uCDN provides
    a fallback target server\n   to the dCDN to be used in cases where the dCDN cannot
    properly handle\n   the request.  To avoid redirect loops, the fallback target
    server's\n   address at the uCDN MUST be different from the original uCDN address\n
    \  from which the client was redirected to the dCDN.  The uCDN MUST\n   avoid
    further redirection when receiving the client request at the\n   fallback target.
    \ The Fallback Target is defined as a generic\n   metadata object (see Section
    3.2 of [RFC8006]).\n   Use cases:\n   *  Failover: A dCDN request router receives
    a request but has no\n      caches to which it can route the request.  This can
    happen in the\n      case of failures or temporary network overload.\n   *  No
    coverage: A dCDN request router receives a request from a\n      client located
    in an area inside the footprint but not covered by\n      the dCDN caches or outside
    the dCDN footprint coverage.  In such\n      cases, the router may choose to redirect
    the request back to the\n      uCDN fallback address.\n   *  Error: A cache may
    receive a request that it cannot properly\n      serve, for example, some of the
    metadata objects for that service\n      were not properly acquired.  In this
    case, the cache's \"default\n      action\" may be to \"redirect back to uCDN\".\n
    \  The Fallback Target metadata object is used to indicate the target\n   address
    the dCDN should redirect a client to when falling back to the\n   uCDN.  The fallback
    target address is represented as an Endpoint\n   object as defined in Section
    4.3.3 of [RFC8006].\n   In DNS redirection, a CNAME record is used as the fallback
    target\n   address.\n   In HTTP redirection, a hostname is used as the fallback
    target\n   address.\n   When using HTTP redirect to route a client request back
    to the uCDN,\n   it is the dCDN's responsibility to use the original URL path
    as the\n   client would have used for the original uCDN request, stripping, if\n
    \  needed, the dCDN path-prefix and/or the uCDN hostname from the\n   redirect
    URL that may have been used to request the content from the\n   dCDN.\n"
  - contents:
    - "3.1.  Properties of Fallback Target Generic Metadata Object\n   The MI.FallbackTarget
      generic metadata object consists of the\n   following two properties:\n   Property:
      \ host\n      Description:  Target address to which the dCDN can redirect the\n
      \        client.\n      Type:  Endpoint object as defined in Section 4.3.3 of
      [RFC8006],\n         with the limitation that in case of DNS delegation, it
      SHOULD\n         NOT include a port number, and in case a port number is\n         present,
      the dCDN MUST ignore it.\n      Mandatory-to-Specify:  Yes.\n   Property:  scheme\n
      \     Description:  A URI scheme to be used in the redirect response\n         location
      construction.  When present, the dCDN MUST use this\n         scheme in case
      of HTTP redirection to the uCDN fallback\n         address.\n      Type:  A
      URI scheme as defined in Section 3.1 of [RFC3986],\n         represented as
      a JSON string.  The scheme MUST be either \"http\"\n         or \"https\".\n
      \     Mandatory-to-Specify:  No.  In case of HTTP redirection to\n         fallback,
      if this property is absent or empty, the dCDN\n         redirecting entity MUST
      use the same scheme as in the request\n         received by the dCDN.\n   The
      following is an example of an MI.FallbackTarget generic metadata\n   object
      that designates the host address the dCDN should use as\n   fallback address
      to redirect back to the uCDN:\n   {\n       \"generic-metadata-type\": \"MI.FallbackTarget\",\n
      \      \"generic-metadata-value\":\n       {\n           \"host\": \"fallback-a.service123.ucdn.example\",\n
      \          \"scheme\": \"https\"\n       }\n   }\n"
    title: 3.1.  Properties of Fallback Target Generic Metadata Object
  - contents:
    - "3.2.  Usage Example\n   The uCDN advertises out-of-band the fallback target
      address to the\n   dCDN, so that the dCDN may redirect a request back to the
      uCDN in\n   case the dCDN cannot serve it.  Using the MI, the uCDN advertises
      its\n   hosts to the dCDN, along with their specific host metadata (see\n   Section
      4.1.2 of [RFC8006]).  The Fallback Target generic metadata\n   object is encapsulated
      within the \"host-metadata\" property of each\n   host.  The following is an
      example of a message flow between a uCDN\n   and a dCDN.  For simplicity, we
      focus on the sequence of messages\n   between the uCDN and dCDN, not on how
      they are passed.\n     dCDN                                                    uCDN\n
      \  (1) | MI:  host: s123.ucdn.example.com                      |\n       |      host-metadata:
      \                                  |\n       |          < metadata objects >
      \                        |\n       |          < MI.FallbackTarget                          |\n
      \      |            host: fallback-a.service123.ucdn.example > |\n       |          <
      metadata objects >                         |\n   (2) | FCI:  capability-type:
      FCI.RedirectTarget             |\n       |       redirecting-hosts: s123.ucdn.example.com
      \       |\n       |       target host: us-east1.dcdn.example.com          |\n
      \      Figure 3: Advertisement of Host Metadata with Fallback Target\n   Explanation:\n
      \  (1)  The uCDN advertises a host (s123.ucdn.example.com) with the host\n        metadata.
      \ The host-metadata property contains an\n        MI.FallbackTarget generic
      metadata object.\n   (2)  The dCDN advertises its FCI objects to the uCDN, including
      a\n        Redirect Target capability object that contains the redirect\n        target
      address (us-east1.dcdn.example.com) specified for that\n        uCDN host.\n
      \  The following is a generic sequence of redirection using the\n   configurations
      that were advertised in Figure 3.  In this case, the\n   dCDN redirects back
      to the uCDN fallback target address.\n   End User              dCDN            uCDN
      fallback          uCDN RR\n   (1) | Request sent s123.ucdn.example.com    |
      \                  |\n   (2) | Redirect to us-east1.dcdn.example.com |                   |\n
      \  (3) | Request us-east1.dcdn.example.com     |                   |\n   (4)
      | Redirect back to fallback-a.service123.ucdn.example       |\n   (5) | Request
      fallback-a.service123.ucdn.example                |\n   (6) | Response          |
      \                  |                   |\n                  Figure 4: Redirection
      to Fallback Target\n   Explanation:\n   (1)  The End User sends a request (DNS
      or HTTP) to the uCDN Request\n        Router (RR).\n   (2)  Using the previously
      advertised Redirect Target, the uCDN\n        redirects the request to the dCDN.\n
      \  (3)  The End User sends a request to the dCDN.\n   (4)  The dCDN cannot handle
      the request and therefore redirects it\n        back to the uCDN fallback target
      address.\n   (5)  The End User sends the request to the uCDN fallback target\n
      \       address.\n   (6)  The uCDN either sends a response or reroutes it, for
      example, to\n        a uCDN surrogate.\n"
    title: 3.2.  Usage Example
  - contents:
    - "3.3.  uCDN Addressing Considerations\n   When advertising fallback addresses
      to the dCDN, the uCDN SHOULD\n   consider the failure use cases that may lead
      the dCDN to route\n   requests to uCDN fallback.  In extreme dCDN network failures
      or under\n   denial-of-service (DoS) attacks, requests coming from a large segment\n
      \  or multiple segments of the dCDN may be routed back to the uCDN.  The\n   uCDN
      SHOULD therefore design its fallback addressing scheme and its\n   available
      resources accordingly.  A favorable approach would be for\n   the uCDN to use
      a different fallback target address for each uCDN\n   host, enabling it to load
      balance the requests using the same methods\n   as it would for its original
      hosts.  See Sections 4.1.2 and 4.1.3 of\n   [RFC8006] for a detailed description
      of how to use GenericMetadata\n   objects within the HostMatch object advertised
      in the HostIndex of\n   the uCDN.\n"
    title: 3.3.  uCDN Addressing Considerations
  title: 3.  Fallback Target Server Address
- contents:
  - '4.  IANA Considerations

    '
  - contents:
    - "4.1.  CDNI Payload Types\n   IANA has registered the following CDNI Payload
      Types in the \"CDNI\n   Payload Types\" registry defined in [RFC7736]:\n                  |
      Payload Type       | Specification |\n                  | FCI.RedirectTarget
      | RFC 8804      |\n                  | MI.FallbackTarget  | RFC 8804      |\n"
    - contents:
      - "4.1.1.  CDNI FCI RedirectTarget Payload Type\n   Purpose:  The purpose of
        this payload type is to distinguish FCI\n      advertisement objects for redirect
        target.\n   Interface:  FCI\n   Encoding:  See Section 2.3.\n"
      title: 4.1.1.  CDNI FCI RedirectTarget Payload Type
    - contents:
      - "4.1.2.  CDNI MI FallbackTarget Payload Type\n   Purpose:  The purpose of
        this payload type is to distinguish\n      FallbackTarget MI objects (and
        any associated capability\n      advertisement).\n   Interface:  MI/FCI\n
        \  Encoding:  See Section 3.1.\n"
      title: 4.1.2.  CDNI MI FallbackTarget Payload Type
    title: 4.1.  CDNI Payload Types
  title: 4.  IANA Considerations
- contents:
  - "5.  Security Considerations\n   This specification defines extensions to the
    CDNI Metadata Interface\n   (MI) and the Footprint & Capabilities Advertisement
    interface (FCI).\n   As such, it is subject to the security and privacy considerations\n
    \  defined in Section 8 of [RFC8006] and in Section 7 of [RFC8008],\n   respectively.\n"
  - contents:
    - "5.1.  Confidentiality and Privacy\n   The Redirect Target capability object
      potentially reveals information\n   about the internal structure of the dCDN
      network.  A third party\n   could intercept the FCI transactions and use the
      information to\n   attack the dCDN.  The same is also true for the Fallback
      Target\n   generic metadata object, as it may reveal information about the\n
      \  internal structure of the uCDN, exposing it to external exploits.\n   Implementations
      of the FCI and MI MUST therefore use strong\n   authentication and encryption
      and strictly follow the directions for\n   securing the interface as defined
      for the Metadata Interface in\n   Section 8.3 of [RFC8006].\n"
    title: 5.1.  Confidentiality and Privacy
  title: 5.  Security Considerations
- contents:
  - '6.  References

    '
  - contents:
    - "6.1.  Normative References\n   [RFC1034]  Mockapetris, P., \"Domain names -
      concepts and facilities\",\n              STD 13, RFC 1034, DOI 10.17487/RFC1034,
      November 1987,\n              <https://www.rfc-editor.org/info/rfc1034>.\n   [RFC2119]
      \ Bradner, S., \"Key words for use in RFCs to Indicate\n              Requirement
      Levels\", BCP 14, RFC 2119,\n              DOI 10.17487/RFC2119, March 1997,\n
      \             <https://www.rfc-editor.org/info/rfc2119>.\n   [RFC3986]  Berners-Lee,
      T., Fielding, R., and L. Masinter, \"Uniform\n              Resource Identifier
      (URI): Generic Syntax\", STD 66,\n              RFC 3986, DOI 10.17487/RFC3986,
      January 2005,\n              <https://www.rfc-editor.org/info/rfc3986>.\n   [RFC6707]
      \ Niven-Jenkins, B., Le Faucheur, F., and N. Bitar, \"Content\n              Distribution
      Network Interconnection (CDNI) Problem\n              Statement\", RFC 6707,
      DOI 10.17487/RFC6707, September\n              2012, <https://www.rfc-editor.org/info/rfc6707>.\n
      \  [RFC7231]  Fielding, R., Ed. and J. Reschke, Ed., \"Hypertext Transfer\n
      \             Protocol (HTTP/1.1): Semantics and Content\", RFC 7231,\n              DOI
      10.17487/RFC7231, June 2014,\n              <https://www.rfc-editor.org/info/rfc7231>.\n
      \  [RFC7336]  Peterson, L., Davie, B., and R. van Brandenburg, Ed.,\n              \"Framework
      for Content Distribution Network\n              Interconnection (CDNI)\", RFC
      7336, DOI 10.17487/RFC7336,\n              August 2014, <https://www.rfc-editor.org/info/rfc7336>.\n
      \  [RFC7975]  Niven-Jenkins, B., Ed. and R. van Brandenburg, Ed.,\n              \"Request
      Routing Redirection Interface for Content\n              Delivery Network (CDN)
      Interconnection\", RFC 7975,\n              DOI 10.17487/RFC7975, October 2016,\n
      \             <https://www.rfc-editor.org/info/rfc7975>.\n   [RFC8006]  Niven-Jenkins,
      B., Murray, R., Caulfield, M., and K. Ma,\n              \"Content Delivery
      Network Interconnection (CDNI)\n              Metadata\", RFC 8006, DOI 10.17487/RFC8006,
      December 2016,\n              <https://www.rfc-editor.org/info/rfc8006>.\n   [RFC8007]
      \ Murray, R. and B. Niven-Jenkins, \"Content Delivery Network\n              Interconnection
      (CDNI) Control Interface / Triggers\",\n              RFC 8007, DOI 10.17487/RFC8007,
      December 2016,\n              <https://www.rfc-editor.org/info/rfc8007>.\n   [RFC8008]
      \ Seedorf, J., Peterson, J., Previdi, S., van Brandenburg,\n              R.,
      and K. Ma, \"Content Delivery Network Interconnection\n              (CDNI)
      Request Routing: Footprint and Capabilities\n              Semantics\", RFC
      8008, DOI 10.17487/RFC8008, December 2016,\n              <https://www.rfc-editor.org/info/rfc8008>.\n
      \  [RFC8174]  Leiba, B., \"Ambiguity of Uppercase vs Lowercase in RFC\n              2119
      Key Words\", BCP 14, RFC 8174, DOI 10.17487/RFC8174,\n              May 2017,
      <https://www.rfc-editor.org/info/rfc8174>.\n"
    title: 6.1.  Normative References
  - contents:
    - "6.2.  Informative References\n   [OC-RR]    Finkelman, O., Ed., Hofmann, J.,
      Klein, E., Mishra, S.,\n              Ma, K., Sahar, D., and B. Zurat, \"Open
      Cache Request\n              Routing Functional Specification\", Version 1.1,
      November\n              2016, <https://www.streamingvideoalliance.org/books/open-\n
      \             cache-request-routing-functional-specification/>.\n   [OCWG]     Streaming
      Video Alliance, \"Open Caching\",\n              <https://www.streamingvideoalliance.org/technical-groups/\n
      \             open-caching/>.\n   [RFC7736]  Ma, K., \"Content Delivery Network
      Interconnection (CDNI)\n              Media Type Registration\", RFC 7736, DOI
      10.17487/RFC7736,\n              December 2015, <https://www.rfc-editor.org/info/rfc7736>.\n
      \  [RFC7871]  Contavalli, C., van der Gaast, W., Lawrence, D., and W.\n              Kumari,
      \"Client Subnet in DNS Queries\", RFC 7871,\n              DOI 10.17487/RFC7871,
      May 2016,\n              <https://www.rfc-editor.org/info/rfc7871>.\n   [SVA]
      \     \"Streaming Video Alliance\",\n              <https://www.streamingvideoalliance.org>.\n"
    title: 6.2.  Informative References
  title: 6.  References
- contents:
  - "Acknowledgements\n   The authors thank Nir B. Sopher for reality checks against
    production\n   use cases; his contribution is significant to this document.  The\n
    \  authors also thank Ben Niven-Jenkins for his review and feedback and\n   Kevin
    J. Ma for his guidance throughout the development of this\n   document, including
    his regular reviews.\n"
  title: Acknowledgements
- contents:
  - "Authors' Addresses\n   Ori Finkelman\n   Qwilt\n   6, Ha'harash\n   Hod HaSharon
    4524079\n   Israel\n   Email: ori.finkelman.ietf@gmail.com\n   Sanjay Mishra\n
    \  Verizon\n   13100 Columbia Pike\n   Silver Spring, MD 20904\n"
  title: Authors' Addresses
