- title: __initial_text__
  contents:
  - '           Group Key Management Protocol (GKMP) Specification

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo defines an Experimental Protocol for the Internet\n\
    \   community.  This memo does not specify an Internet standard of any\n   kind.\
    \  Discussion and suggestions for improvement are requested.\n   Distribution\
    \ of this memo is unlimited.\n"
- title: Table of Contents
  contents:
  - 'Table of Contents

    '
- title: Abstract
  contents:
  - "Abstract\n   This specification proposes a protocol to create grouped symmetric\n\
    \   keys and distribute them amongst communicating peers. This protocol\n   has\
    \ the following advantages: 1) virtually invisible to operator, 2)\n   no central\
    \ key distribution site is needed, 3) only group members\n   have the key, 4)\
    \ sender or receiver oriented operation, 5) can make\n   use of multicast communications\
    \ protocols.\n"
- title: 1 Background
  contents:
  - "1 Background\n   Traditional key management distribution has mimicked the military\n\
    \   paper based key accounting system.  Key was distributed, ordered, and\n  \
    \ accounted physically leading to large lead times and expensive\n   operations.\n\
    \   Cooperative key management algorithms exist that allow pairwise keys\n   to\
    \ be generated between two equipment's.  This gives the a quicker\n   more reliable\
    \ key management structure capable of supporting large\n   numbers of secure communications.\
    \  Unfortunately, only pairwise keys\n   are supported using these methods today.\n\
    \   This document describes a protocol for establishing and rekeying\n   groups\
    \ of cryptographic keys (more than two) on the internet.  We\n   refer to the\
    \ approach as the Group Key Management Protocol (GKMP).\n"
- title: 1.1 Protocol Overview
  contents:
  - "1.1 Protocol Overview\n   The GKMP creates key for cryptographic groups, distributes\
    \ key to the\n   group members, ensures (via peer to peer reviews) rule based\
    \ access\n   control of keys, denies access to known compromised hosts, and allow\n\
    \   hierarchical control of group actions.\n   The key generation concept used\
    \ by the GKMP is cooperative generation\n   between two protocol entities.  There\
    \ are several key generation\n   algorithms viable for use in the GKMP (i.e.,\
    \ RSA, Diffe-Hellman,\n   elliptic curves).  All these algorithms use asymmetric\
    \ key technology\n   to pass information between two entities to create a single\n\
    \   cryptographic key.\n   The GKMP then distributes the group keys to qualified\
    \ GKMP entities.\n   This distribution process is a mutually suspicious process\
    \ (all\n   actions and identities must be verified).\n   The GKMP provides a peer\
    \ to peer review process.  Protocol entities\n   pass permission certificates\
    \ (PC) as part of the group key\n   distribution process.  The PCs contain access\
    \ control information\n   about a particular site.  This access control information\
    \ is assigned\n   by a higher authority which then signs the PC. Therefor each\
    \ entity\n   can verify the permissions of any other GKMP entity but can modify\n\
    \   none.  Each protocol entity checks the permissions and compares them\n   the\
    \ level of service requested.  If the permissions do not exceed or\n   equal the\
    \ request, the service is denied.\n   The GKMP supports compromise recovery. \
    \ A list of compromised GKMP\n   entities is distributed to group members during\
    \ key management\n   actions.  In essence, a Compromise Recovery List (CRL) allows\
    \ group\n   members to drop connections with compromised entities.  The GKMP\n\
    \   delegates control of groups to specific group controllers so it will\n   be\
    \ somewhat easier to distribute the CRL to the most important GKMP\n   entities.\
    \  During each key management action the CRL version number\n   is passed, when\
    \ a CRL update is detected it is downloaded and\n   verified (it is signed by\
    \ a higher authority).\n   The GKMP allows control of group actions.  In certain\
    \ networks it is\n   desirable for a higher authority to strictly control the\
    \ generation\n   of groups.  These networks usually have a central network operations\n\
    \   authority.  The GKMP allows these authorities to remotely order group\n  \
    \ actions.  These orders are signed by that authority and verified by\n   all\
    \ entities involved with the group.\n   The GKMP is an application layer protocol.\
    \  It's independent of the\n   underlying communication protocol.  However, if\
    \ multicast service is\n   available it will speed the rekey of the cryptographic\
    \ groups.\n   Hence, the GKMP does use multicast services if they are available.\n"
- title: '2 Overview:  GKMP Roles'
  contents:
  - "2 Overview:  GKMP Roles\n   Creation and distribution of grouped key require\
    \ assignment of roles.\n   These identify what functions the individual hosts\
    \ perform in the\n   protocol.  The two primary roles are those of key distributor\
    \ and\n   member.  The controller initiates the creation of the key, forms the\n\
    \   key distribution messages, and collects acknowledgment of key receipt\n  \
    \ from the receivers.  The members wait for a distribution message,\n   decrypt,\
    \ validate, and acknowledge the receipt of new key.\n"
- title: 2.1 Group controller
  contents:
  - "2.1 Group controller\n   The group controller (GC) is the a group member with\
    \ authority to\n   perform critical protocol actions (i.e., create key, distribute\
    \ key,\n   create group rekey messages, and report on the progress of these\n\
    \   actions).  All group members have the capability to be a GC and could\n  \
    \ assume this duty upon assignment.\n   The GC helps the cryptographic group reach\
    \ and maintain key\n   synchronization.  A group must operate on the same symmetric\n\
    \   cryptographic key.  If part of the group loses or inappropriately\n   changes\
    \ it's key, it will not be able to send or receive data to\n   another host operating\
    \ on the correct key.  Therefor, it is important\n   that those operations that\
    \ create or change key are unambiguous and\n   controlled (i.e., it would not\
    \ be appropriate for multiple hosts to\n   try to rekey a net simultaneously).\
    \  Hence, someone has to be in\n   charge -- that is the controller.\n"
- title: 2.2 Group member
  contents:
  - "2.2 Group member\n   Simply stated a group member is any group host who is not\
    \ acting as\n   the controller.  The group members will:  assist the controller\
    \ in\n   creating key, validate the controller authorization to perform\n   actions,\
    \ accept key from the controller, request key from the\n   controller, maintain\
    \ local CRL lists, perform peer review of key\n   management actions, and manage\
    \ local key.\n"
- title: 3 Data Item primitives
  contents:
  - '3 Data Item primitives

    '
- title: '3.1 Group members list:'
  contents:
  - "3.1 Group members list:\n   In a sender oriented group, the GC must be given\
    \ a list of net\n   members.  The controller will then initiate contact with these\
    \ net\n   members and create the group.\n"
- title: '3.2 Group Token:'
  contents:
  - "3.2 Group Token:\n   The group token is created by the authority which commands\
    \ a group.\n   The Token contains information the net members need to ensure a\n\
    \   controller is authorized to create a group and exactly what\n   constrains\
    \ are intended to be places on the group.  The group token\n   contains the following\
    \ fields:  Group identification,\n   o  GC ID,\n   o  Group action (create, rekey,\
    \ delete),\n   o  Group permissions (rules to guide access control),\n   o  Rekey\
    \ interval (life span of group key),\n   o  Token version (identifier to identify\
    \ current token),\n   o  Token signature (asymmetric signature using the group\n\
    \      commanders private key),\n   o  Group commanders public key (this public\
    \ key is itself signed by\n      the network security manager to bind the public\
    \ to a specific net\n      member ID).\n"
- title: '3.3 Grp ID:'
  contents:
  - "3.3 Grp ID:\n   The group must be uniquely identified to allow for several different\n\
    \   groups to coexist on a network.\n"
- title: '3.4 GTEK ID:'
  contents:
  - "3.4 GTEK ID:\n   Unique identifier of GTEK (can include state information).\n"
- title: '3.5 GKEK ID:'
  contents:
  - "3.5 GKEK ID:\n   Unique identifier of GKEK (can include state information).\n"
- title: '3.6 GTEK creation field:'
  contents:
  - "3.6 GTEK creation field:\n   In a cooperative key creation protocol each party\
    \ contributes some\n   field used to create the key.\n"
- title: '3.7 GKEK creation field:'
  contents:
  - "3.7 GKEK creation field:\n   In a cooperative key creation protocol each party\
    \ contributes some\n   field used to create the key.\n"
- title: '3.8 Distributor signature:'
  contents:
  - "3.8 Distributor signature:\n   Asymmetric signature using the GCs private key.\n"
- title: '3.9 Distributor public key:'
  contents:
  - "3.9 Distributor public key:\n   Public half of the GCs signature key pair.  (this\
    \ public key is\n   itself signed by the network security manager to bind the\
    \ public to a\n   specific net member ID.\n"
- title: '3.10 Member signature:'
  contents:
  - "3.10 Member signature:\n   Asymmetric signature using the selected members private\
    \ key.\n"
- title: '3.11 Member public:'
  contents:
  - "3.11 Member public:\n   Public half of the selected members signature key pair.\
    \  (this public\n   key is itself signed by the network security manager to bind\
    \ the\n   public to a specific net member ID.\n"
- title: '3.12 Controller permissions:'
  contents:
  - "3.12 Controller permissions:\n   Controller permissions are assigned by the security\
    \ manager.  The\n   security managers signature will bind the permissions to the\n\
    \   controller ID.\n"
- title: '3.13 SKEK ID:'
  contents:
  - "3.13 SKEK ID:\n   This field identifies exactly which SKEK is being created.\
    \  This\n   allows multiple groups to interoperate on a net simultaneously.\n"
- title: '3.14 SKEK creation field:'
  contents:
  - "3.14 SKEK creation field:\n   This field contains the information contributed\
    \ for use in the KEK\n   creation process.\n"
- title: '3.15 Member permissions:'
  contents:
  - "3.15 Member permissions:\n   Member permissions are assigned by the security\
    \ manager.  The\n   security managers signature will bind the permissions to the\n\
    \   controller ID.\n"
- title: '3.16 Encrypted Grp Keys:'
  contents:
  - "3.16 Encrypted Grp Keys:\n   This data item is encrypted in the KEK (session\
    \ or group) created for\n   the download of keys.  It is the GTEK and GKEK created\
    \ for a group.\n   A checksum is also encrypted.  This ensures the confidentiality\
    \ and\n   data integrity of the GTEK and GKEK.\n"
- title: '3.17 Confirmation of decryption:'
  contents:
  - "3.17 Confirmation of decryption:\n   This is a short (byte) field indicating\
    \ decryption of the message and\n   exactly what type of message was decrypted.\n"
- title: '3.18 Request:'
  contents:
  - "3.18 Request:\n   A request field contains the specific request one net member\
    \ may make\n   to another.  The requests range from (group join, CRL update,\n\
    \   pairwise TEK generation, detection, group creation, status).\n   Member delete\
    \ list:\n   A list of group members being administratively deleted from the\n\
    \   group.\n"
- title: 4 Message definitions
  contents:
  - '4 Message definitions

    '
- title: '4.1 Command_Create Group:'
  contents:
  - "4.1 Command_Create Group:\n   This message contains the following data item primitives\
    \ (Group\n   members, Grp ID, Grp controller ID, Grp action, Grp permissions,\n\
    \   Rekey interval, Token version, Token signature, Token public key).\n   This\
    \ message may be confidential due to the group permissions field.\n   In sensitive\
    \ systems it will need encryption prior to transmission.\n"
- title: '4.2 Create Grp Keys_1:'
  contents:
  - "4.2 Create Grp Keys_1:\n   This message passes the information needed to create\
    \ the group keys\n   from the GC to the selected net member.  This message contains\
    \ (Grp\n   ID, Request, GTEK ID, GKEK ID, GTEK creation field, GKEK creation\n\
    \   field, Grp token, Controller signature, Controller public)\n"
- title: '4.3 Create Grp Keys_2:'
  contents:
  - "4.3 Create Grp Keys_2:\n   This message passes the information needed to create\
    \ the group keys\n   from the selected net member to the GC. This message contains:\
    \  (Grp\n   ID, GTEK ID, GKEK ID, GTEK creation field, GKEK creation field,\n\
    \   member signature, member public)\n"
- title: '4.4 Negotiate Grp Keys_1:'
  contents:
  - "4.4 Negotiate Grp Keys_1:\n   This message passes the group token and GCs permissions\
    \ to the\n   selected net member.  This information can be sensitive and needs\
    \ to\n   be protected.  Therefor, this message is encrypted in the GTEK just\n\
    \   created.  This encryption includes the appropriate data integrity\n   checks.\
    \  This message1 contains:  (Grp ID, TEK ID, KEK ID, Group\n   token, Controller\
    \ permissions)\n"
- title: '4.5 Negotiate Grp Keys_2:'
  contents:
  - "4.5 Negotiate Grp Keys_2:\n   This message passes the selected net members permissions\
    \ to the GC.\n   This message1 contains:  (Grp ID, GTEK ID, GKEK ID, Member\n\
    \   permissions).  This information can be sensitive and needs to be\n   protected.\
    \  Therefor, this message is encrypted in the GTEK just\n   created.  This encryption\
    \ includes the appropriate data integrity\n   checks.\n"
- title: '4.6 Create Session KEK_1:'
  contents:
  - "4.6 Create Session KEK_1:\n   This message sends information to create a KEK\
    \ for one time use\n   between the GC and selected net member.\n"
- title: '4.7 Create Session KEK_2:'
  contents:
  - "4.7 Create Session KEK_2:\n   This message sends information to create a KEK\
    \ for one time use\n   between the selected net member and GC.\n"
- title: '4.8 Negotiate Session Keys_1:'
  contents:
  - "4.8 Negotiate Session Keys_1:\n   This message passes the group ID, SKEK ID,\
    \ CRL version number, Group\n   token and GCs permissions to the selected net\
    \ member.  This\n   information can be sensitive and needs to be protected.  Therefor,\n\
    \   this message is encrypted.  If an appropriate pairwise key is\n   available\
    \ then that key should be used.  If not the KEK just created\n   could be used\
    \ to encrypt the message.\n"
- title: '4.9 Negotiate Session Keys_2:'
  contents:
  - "4.9 Negotiate Session Keys_2:\n   This message identifies the group, SKEK, CRL\
    \ version number and the\n   member permissions.  This information can also be\
    \ sensitive and needs\n   protection.\n"
- title: '4.10 Download Grp Keys:'
  contents:
  - "4.10 Download Grp Keys:\n   This message includes a GRP ID and Encrypted Grp\
    \ Keys data items.\n"
- title: '4.11 Key download ack:'
  contents:
  - "4.11 Key download ack:\n   This message contains the GRP ID and Confirmation_decryption\
    \ data\n   items.  It confirms the receipt and verified decryption of the GTEK\n\
    \   and GKEK.\n"
- title: '4.12 Rekey _Multicast:'
  contents:
  - "4.12 Rekey _Multicast:\n   This message contains:  Grp ID, GTEK ID, GKEK ID,\
    \ Group token,\n   Controller permissions.  The rekey message is encrypted in\
    \ the GKEK\n   already resident in all the group member sites.  This leads to\
    \ a\n   single message capable of being accepted by all group members.\n"
- title: '4.13 Request_Group_Join:'
  contents:
  - "4.13 Request_Group_Join:\n   This message contains Request, Grp ID, Member Signature,\
    \ Member\n   Public.\n"
- title: '4.14 Delete_Group_Keys:'
  contents:
  - "4.14 Delete_Group_Keys:\n   This message contains:  grp ID, Request, Member delete\
    \ list,\n   Controller signature, Controllers public.\n"
- title: '4.15 Grp_Keys_Deleted_Ack:'
  contents:
  - "4.15 Grp_Keys_Deleted_Ack:\n   This message contains (grp ID, member ID, member\
    \ signature, member\n   public.\n"
- title: '4.16 Delete_Group_Keys:'
  contents:
  - "4.16 Delete_Group_Keys:\n   This message contains (grp ID, request, member delete\
    \ list,\n   controller signature, controller public).\n"
- title: '4.17 Grp_Keys_Deleted_Ack:'
  contents:
  - "4.17 Grp_Keys_Deleted_Ack:\n   This message contains (grp ID, member ID, member\
    \ signature, member\n   public)\n"
- title: 5 State definitions
  contents:
  - "5 State definitions\n   There are thirteen separate states the in the protocol.\
    \  They are\n   described below:\n"
- title: '5.1 State 1:'
  contents:
  - "5.1 State 1:\n   The source address is checked to ensure it is not on the CRL.\n\
    \   The token field is validated with the public key of the source.\n   The token\
    \ version number is checked to ensure this token is current.\n   The group ID\
    \ is checked to see if this group exists.\n   The controller ID field is then\
    \ read.  If the receiver is listed as\n   the GC, the receiver assumes the role\
    \ of controller.  If not, the\n   role assumed is that of receiver.\n   The GC\
    \ reads the group permission field in the group token.  It then\n   verifies that\
    \ its' personnel permissions exceed or equal those of the\n   group.\n   The GC\
    \ will creates its' portion of the key creation message.\n   The Create Grp Keys_1\
    \ message is completed and transmitted.\n"
- title: '5.2 State 2:'
  contents:
  - "5.2 State 2:\n   The source signature field is validated using the public key\
    \ of the\n   source.\n   The source ID field is compared against the local CRL.\
    \ If the source\n   is on the CRL the association is terminated.\n   The request\
    \ field is read.  The local contributions to the group keys\n   are created.\n\
    \   The Group keys are created and stored pending negotiation.\n   The key table\
    \ is updated to show the group key pending negotiation.\n"
- title: '5.3 State 3:'
  contents:
  - "5.3 State 3:\n   The permission certificate is retrieved and validated using\
    \ the\n   security managers public key.  The permissions of the message source\n\
    \   are checked to verify they meet or exceed those of the group.\n   The group\
    \ token is retrieved and validated using the appropriate\n   public key.\n   The\
    \ token version number is checked to ensure the token is current.\n   The group\
    \ ID specified in the token is compared with the actual group\n   ID. If they\
    \ are different the exchange is terminated.\n   The controller ID specified in\
    \ the token is compared with the GC ID.\n   If they do not match the exchange\
    \ is terminated.\n   The local permissions are compared to the permissions specified\
    \ for\n   the group.  If they do not meet or exceed the group permissions the\n\
    \   exchange is terminated and a report is generated.\n   The rekey interval specified\
    \ in the token is stored locally.\n   The key table is updated to reflect the\
    \ key permissions, rekey\n   interval, group ID and current time.\n"
- title: '5.4 State 4:'
  contents:
  - "5.4 State 4:\n   The permission certificate is retrieved and validated using\
    \ the\n   security members public key.  The permissions of the message source\n\
    \   are checked to verify they meet or exceed those of the group.\n   The key\
    \ table is updated to reflect the key permissions, rekey\n   interval, group ID\
    \ and current time.\n"
- title: '5.5 State 5:'
  contents:
  - "5.5 State 5:\n   The source signature field is validated using the public key\
    \ of the\n   source.\n   The source ID field is compared against the local CRL.\
    \ If the source\n   is on the CRL, the association is terminated.\n   The request\
    \ field is read.  The local contribution to the SKEK are\n   created.  The SKEK\
    \ is created and stored pending negotiation.\n   The key table is updated to show\
    \ the SKEK pending negotiation.\n"
- title: '5.6 State 6:'
  contents:
  - "5.6 State 6:\n   The permission certificate is retrieved and validated using\
    \ the\n   security managers public key.  The permissions of the message source\n\
    \   are checked to verify they meet or exceed those of the group.\n   The group\
    \ token is retrieved and validated using the appropriate\n   public key.\n   The\
    \ token version number is checked to ensure the token is current.\n   The group\
    \ ID specified in the token is stored.\n   The controller ID specified in the\
    \ token is compared with the GC ID.\n   If they do not match the exchange is terminated.\n\
    \   The local permissions are compared to the permissions specified for\n   the\
    \ group.  If they do not meet or exceed the group permissions the\n   exchange\
    \ is terminated and a report is generated.\n   The rekey interval specified in\
    \ the token is stored locally.\n   The key table is updated to reflect the key\
    \ permissions, rekey\n   interval, group ID and current time.\n"
- title: '5.7 State 7:'
  contents:
  - "5.7 State 7:\n   The permission certificate is retrieved and validated using\
    \ the\n   security managers public key.  The permissions of the message source\n\
    \   are checked to verify they meet or exceed those of the group.\n   The key\
    \ table is updated.\n"
- title: '5.8 State 8:'
  contents:
  - "5.8 State 8:\n   The group ID is checked.\n   The group keys are decrypted using\
    \ the SKEK. Data integrity checks\n   are validated to ensure proper decryption.\n\
    \   The key table is updated to reflect the new group keys, key\n   permissions,\
    \ rekey interval, group ID and current time.\n"
- title: '5.9 State 9:'
  contents:
  - "5.9 State 9:\n   Update group management log.\n"
- title: '5.10 State 10:'
  contents:
  - "5.10 State 10:\n   The permission certificate is retrieved and validated using\
    \ the\n   security managers public key.  The permissions of the message source\n\
    \   are checked to verify they meet or exceed those of the group.\n   The group\
    \ token is retrieved and validated using the appropriate\n   public key.\n   The\
    \ token version number is checked to ensure the token is current.\n   The group\
    \ ID specified in the token is checked.\n   The controller ID specified in the\
    \ token is compared with the GC ID.\n   If they do not match the exchange is terminated.\n\
    \   The local permissions are compared to the permissions specified for\n   the\
    \ group.  If they do not meet or exceed the group permissions the\n   exchange\
    \ is terminated and a report is generated.\n   The rekey interval specified in\
    \ the token is stored locally.\n   The new group keys are decrypted with the current\
    \ GKEK. The data\n   integrity field is checked to ensure proper decryption.\n\
    \   The key table is updated to reflect the key permissions, rekey\n   interval,\
    \ group ID and current time.\n"
- title: '5.11 State 11:'
  contents:
  - "5.11 State 11:\n   Validate signature using sources public key.\n   Check to\
    \ see if member initiated group join is available.  If not,\n   ignore.  If so\
    \ begin distribution of group keys.\n"
- title: '5.12 State 12:'
  contents:
  - "5.12 State 12:\n   Validate signature using GCs public.\n   Retrieve delete list.\
    \  Check to see if on delete list, if so\n   continue.\n   Create Grp_Keys_Deleted_Ack\n\
    \   Delete group keys\n"
- title: '5.13 State 13:'
  contents:
  - "5.13 State 13:\n   Validate signature using GCs public.\n   Retrieve delete list.\
    \  If list is global delete, verify alternative\n   key.\n   Switch group operations\
    \ to alternative key.\n   Create Grp_Keys_Deleted_Ack.\n   Delete group keys.\n"
- title: 6 Functional Definitions--Group Key Management Protocol
  contents:
  - "6 Functional Definitions--Group Key Management Protocol\n   The GKMP consists\
    \ of multiple functions necessary to create,\n   distribute, rekey and manage\
    \ groups of symmetric keys.  These\n   functions are:\n   o  Group creation (sender\
    \ initiated group)\n       --  Create Group keys\n       --  Distribute Group\
    \ keys\n   o  Group rekey\n       --  Create Group keys\n       --  Rekey Group\n\
    \   o  Member initiated join\n   o  Group member delete\n   The following sections\
    \ will describe each function, including data\n   primitives and message constructs.\
    \  The associated diagrams will\n   represent the specifics (sequence, location\
    \ and communications\n   sources and destinations) of the messages and processes\
    \ necessary.\n"
- title: 6.1 Group creation
  contents:
  - "6.1 Group creation\n   Member initialization is a three-step function that involves\n\
    \   commanding the creation of the group, creation of the group keys and\n   then\
    \ distribution of those keys to \"other\" group members.  Messages\n   between\
    \ the GC and the first member generate two keys for future\n   group actions:\
    \  the group traffic encryption key (GTEK) and the group\n   key encryption key\
    \ (GKEK). Messages between the GC and the other\n   members are for the purpose\
    \ of distributing the keys.  These\n   functions are described in the following\
    \ sections.\n"
- title: 6.1.1 Group command
  contents:
  - "6.1.1 Group command\n   The very first action is for some entity to command the\
    \ group.  This\n   command is sent to the GC.\n"
- title: 6.1.2 Create group keys
  contents:
  - "6.1.2 Create group keys\n   The first member must cooperate with the GC to create\
    \ future group\n   keys.  Reliance on two separate hosts to create group keys\
    \ maximizes\n   the probability that the resulting key will have the appropriate\n\
    \   cryptographic properties.  A single host could create the key if the\n   randomization\
    \ function were robust and trusted.  Unfortunately this\n   usually requires specialized\
    \ hardware not available at most host\n   sites.  The intent of this protocol\
    \ was to utilize generic hardware\n   to enhance the extendibility of the GKMP.\
    \ Hence, cooperative key\n   generation mechanisms are used.\n   To facilitate\
    \ a well ordered group creation, management information\n   must be passed between\
    \ the controller and the group members.  This\n   information uniquely identifies\
    \ the GC identity, it's permissions,\n   authorization to create keys, the future\
    \ groups permissions, current\n   state of the compromise list, and management\
    \ information pertaining\n   to the keys being created.  All this information\
    \ is protected from\n   forgery by asymmetric signature technologies.  The public\
    \ key used to\n   verify net wide parameters (e.g., individual host permissions)\
    \ are\n   widely held.  The public key to verify locally generated information,\n\
    \   like peer identity, is sent with the messages.  This alleviates the\n   hosts\
    \ public key storage requirements.\n   The goals of the key creation process are:\n\
    \   o  cooperatively generate a GTEK and GKEK,\n   o  allow the key creators to\
    \ verify the identity of the key\n      creation partner by verifying the messages\
    \ signatures.\n   o  share public keys\n   o  allow validation of the GC, by signing\
    \ the group\n      identification, GC identification, and group permissions.\n\
    \   o  send the group identity, GC identity, group member identities,\n      group\
    \ permissions, and group rekey interval to the first member,\n      signed by\
    \ the group commander (when the group was remotely\n      commanded).\n   This\
    \ function consists of four messages between the GC and the first\n   member.\
    \  The initial messages are for the establishment of the GTEK\n   and GKEK. This\
    \ is accomplished by the GC sending a signed\n   Create_Group_Keys_1 message to\
    \ the first member.  This message\n   contains two random values necessary to\
    \ generate the GTEK and GKEK.\n   This message also contains the public key of\
    \ the GC.\n   The first member validates the signed Create_Group_Keys_1 message,\n\
    \   builds and sends a signed Create_Group_Keys_2 message to the GC. He\n   generates\
    \ the GTEK and GKEK, and stores the received public key.  The\n   Create_Group_Keys_2\
    \ message contains the random values necessary for\n   the GC to generate the\
    \ GTEK and GKEK. This message also contains the\n   public key of the first member.\n\
    \   The GC validates the signed Create_Group_Keys_2 message, generates\n   the\
    \ GTEK and GKEK, builds the Negotiate_Group_Keys_1 message for\n   transmission\
    \ to the first member, and stores the received public key.\n   The GC sends the\
    \ Negotiate_Group_Keys_1 message to the first member\n   encrypted in the GTEK\
    \ that was just generated.\n"
- title: '|___Net_Controller___|__________Messages__________|____Net_Member_B____|'
  contents:
  - '|___Net_Controller___|__________Messages__________|____Net_Member_B____|

    '
- title: '|The Create Group    |<---- Command-Create Group  |                    |'
  contents:
  - '|The Create Group    |<---- Command-Create Group  |                    |

    '
- title: '|command is          |                            |                    |'
  contents:
  - '|command is          |                            |                    |

    '
- title: '|received by net     |                            |                    |'
  contents:
  - '|received by net     |                            |                    |

    '
- title: '|member A.           |                            |                    |'
  contents:
  - '|member A.           |                            |                    |

    '
- title: '|State 1             |                            |                    |'
  contents:
  - '|State 1             |                            |                    |

    '
- title: '|                    |Create Grp Keys_1---->      |                    |'
  contents:
  - '|                    |Create Grp Keys_1---->      |                    |

    '
- title: '|                    |                            |State 2             |'
  contents:
  - '|                    |                            |State 2             |

    '
- title: '|                    |<-----Create Grp Keys_2     |                    |'
  contents:
  - '|                    |<-----Create Grp Keys_2     |                    |

    '
- title: '|State 2             |                            |                    |'
  contents:
  - '|State 2             |                            |                    |

    '
- title: '|                    |Negotiate Grp Keys_1------> |                    |'
  contents:
  - '|                    |Negotiate Grp Keys_1------> |                    |

    '
- title: '|                    |                            |State 3             |'
  contents:
  - '|                    |                            |State 3             |

    '
- title: '|                    |<-----Negotiate Grp Keys_2  |                    |'
  contents:
  - '|                    |<-----Negotiate Grp Keys_2  |                    |

    '
- title: '|State 4             |                            |                    |'
  contents:
  - "|State 4             |                            |                    |\n  \
    \            Figure 1:  State Diagram:  Create Group Keys\n   The first member\
    \ decrypts the Negotiate_Group_Keys_1 message and\n   extracts the group identification,\
    \ GC identification, group members,\n   group permissions, key rekey interval,\
    \ CRL version number, and\n   certifying authority signature.  The group identification,\
    \ GC\n   identification, and group permissions fields are validated based on\n\
    \   the extracted group commanders signature (if this is a remotely\n   commanded\
    \ group this signature identifies the remote host).  If these\n   fields validate,\
    \ the first members internal structures are updated.\n"
- title: 6.1.3 Distributing Group Keys to Other Members
  contents:
  - "6.1.3 Distributing Group Keys to Other Members\n   The other group members must\
    \ get the group keys before the group is\n   fully operational.  The purpose of\
    \ other group member initialization\n   is as follows:\n   o  cooperatively generate\
    \ a session key encryption key (SKEK) for the\n      transmission of the GTEK\
    \ and GKEK from the GC,\n   o  allow each member to verify the identify of the\
    \ controller and\n      visa versa,\n   o  allow each member to verify the controllers\
    \ authorization to\n      create the group,\n   o  send the key packet (KP) (consisting\
    \ of the GTEK, GKEK), group\n      identity, GC identity, group member identities,\
    \ group permissions,\n      and group rekey interval to the other members,\n \
    \  This function consists of six messages between the GC and the other\n   members.\
    \  The initial messages are for the establishment of a SKEK.\n   This is accomplished\
    \ by the GC sending a signed Create_Session_KEK_1\n   message to the other member.\
    \  This message contains the random value\n   necessary for the other member to\
    \ generate the SKEK. This message\n   also contains the public key of the GC.\n\
    \   The other member validates the Create_Session_KEK_1 message, builds\n   and\
    \ sends a Create_Session_KEK_2 message to the GC, generates the\n   SKEK, and\
    \ stores the received public key.  The Create_Session_KEK_2\n   message contains\
    \ the random value necessary for the GC to generate\n   the SKEK.  This message\
    \ also contains the public key of the other\n   member.\n   The GC validates the\
    \ Create_Session_KEK_2 message, generates the\n   SKEK, builds the Negotiate_Session_\
    \ KEK_1 message for transmission to\n   the other member, and stores the received\
    \ public key.\n   The GC sends the Negotiate_Session_KEK_1 message to the other\
    \ member\n   encrypted in the SKEK that was just generated.  The\n   Negotiate_Session_KEK_1\
    \ message includes the group ID, group token,\n   controller permissions, and\
    \ CRL version number.\n   The other member decrypts the Negotiate_Session_KEK_1\
    \ message,\n   verifies the authority and identification of the controller, ensures\n\
    \   the local CRL is up to date, and builds a Negotiate_Session_KEK_2\n   message\
    \ for transmission to the GC.\n   The GC receives the Negotiate_Session_KEK_2\
    \ message and builds a\n   Download_Grp_Keys message for transmission to the other\
    \ member.\n   The GC sends the Download_Grp_Keys message to the other member\n\
    \   encrypted in the SKEK that was just generated.  (note:  the key used\n   to\
    \ encrypt the negotiation messages can be combined differently to\n   create the\
    \ KEK.)\n   The other members decrypts the Download_Grp_Keys message and extracts\n\
    \   the KP, group identification, GC identification, group members, group\n  \
    \ permissions, key rekey interval, and group commanders signature.  The\n   group\
    \ identification, GC identification, and group permissions fields\n   are validated\
    \ based on the signature.  If these fields validate, the\n   other members internal\
    \ key storage tables are updated with the new\n   keys.\n"
- title: 6.2 Group Rekey
  contents:
  - "6.2 Group Rekey\n   Rekey is a two-step function that involves message exchange\
    \ between\n   the GC and a \"first member\" and \"other members.\" Messages between\
    \ the\n   GC and the first member are exactly as described for group creation.\n\
    \   Messages between the GC and the other members are for the purpose of\n   distributing\
    \ the new GTEK and the new GKEK. These functions are\n"
- title: '|___Net_Controller___|__________Messages________|Net_members,individual|'
  contents:
  - '|___Net_Controller___|__________Messages________|Net_members,individual|

    '
- title: '|                    |Create Session KEK_1---->  |                     |'
  contents:
  - '|                    |Create Session KEK_1---->  |                     |

    '
- title: '|                    |                           |State 5              |'
  contents:
  - '|                    |                           |State 5              |

    '
- title: '|                    |<-----Create Session KEK_2 |                     |'
  contents:
  - '|                    |<-----Create Session KEK_2 |                     |

    '
- title: '|State 5             |                           |                     |'
  contents:
  - '|State 5             |                           |                     |

    '
- title: '|                    |Negotiate ess. Keys_1----->|                     |'
  contents:
  - '|                    |Negotiate ess. Keys_1----->|                     |

    '
- title: '|                    |                           |State 6              |'
  contents:
  - '|                    |                           |State 6              |

    '
- title: '|                    |<-----NegotiateSess. Keys_2|                     |'
  contents:
  - '|                    |<-----NegotiateSess. Keys_2|                     |

    '
- title: '|State 7             |                           |                     |'
  contents:
  - '|State 7             |                           |                     |

    '
- title: '|                    |Download Grp Keys--------> |                     |'
  contents:
  - '|                    |Download Grp Keys--------> |                     |

    '
- title: '|                    |                           |State 8              |'
  contents:
  - '|                    |                           |State 8              |

    '
- title: '|                    |<----- Key download ack    |                     |'
  contents:
  - '|                    |<----- Key download ack    |                     |

    '
- title: '|State 9             |                           |                     |'
  contents:
  - "|State 9             |                           |                     |\n  \
    \             Figure 2:  State Diagram:  Distribute Keys\n   described in the\
    \ following sections.\n"
- title: 6.2.1 Create Group Keys
  contents:
  - "6.2.1 Create Group Keys\n   The first member function for a rekey operation is\
    \ the same as that\n   for key initialization.  Please refer to the group creation\
    \ section\n   entitled \"2.1 Create group keys\".\n"
- title: 6.2.2 Rekey
  contents:
  - "6.2.2 Rekey\n   The purpose of rekey is as follows:\n   o  send the new GTEK\
    \ and new GKEK to the other members,\n   o  allow each member to verify the identify\
    \ of the controller,\n   o  allow each member to verify the controllers authorization\
    \ to\n      rekey the group, group identification, and GC identification,\n  \
    \ o  send the group identity, GC identity, group member identities,\n      group\
    \ permissions, and group rekey interval to the other members,\n   The messages\
    \ to create and negotiate the group keys are the same as\n   stated during group\
    \ creation.  As such they have been omitted here.\n   The rekey portion of this\
    \ function consists of one message between\n   the GC and the other members. \
    \ The GC builds a signed Rekey_Multicast\n   message for transmission to the other\
    \ member.  As the name implies\n   this\n"
- title: '|___Net_Controller___|__________Messages________|Net_members,individual|'
  contents:
  - '|___Net_Controller___|__________Messages________|Net_members,individual|

    '
- title: '|The Create Group    |<---- Command-Create Group |                     |'
  contents:
  - '|The Create Group    |<---- Command-Create Group |                     |

    '
- title: '|command is          |                           |                     |'
  contents:
  - '|command is          |                           |                     |

    '
- title: '|received by net     |                           |                     |'
  contents:
  - '|received by net     |                           |                     |

    '
- title: '|member A.           |                           |                     |'
  contents:
  - '|member A.           |                           |                     |

    '
- title: '|State 1             |                           |                     |'
  contents:
  - '|State 1             |                           |                     |

    '
- title: '|                    |Create Grp Keys_1---->     |                     |'
  contents:
  - '|                    |Create Grp Keys_1---->     |                     |

    '
- title: '|                    |                           |State 2              |'
  contents:
  - '|                    |                           |State 2              |

    '
- title: '|                    |<-----Create Grp Keys_2    |                     |'
  contents:
  - '|                    |<-----Create Grp Keys_2    |                     |

    '
- title: '|State 2             |                           |                     |'
  contents:
  - '|State 2             |                           |                     |

    '
- title: '|                    |Negotiate Grp Keys_1------>|                     |'
  contents:
  - '|                    |Negotiate Grp Keys_1------>|                     |

    '
- title: '|                    |                           |State 3              |'
  contents:
  - '|                    |                           |State 3              |

    '
- title: '|                    |<-----Negotiate Grp Keys_2 |                     |'
  contents:
  - '|                    |<-----Negotiate Grp Keys_2 |                     |

    '
- title: '|State 4             |                           |                     |'
  contents:
  - '|State 4             |                           |                     |

    '
- title: '|                    |Rekey _Multicast------->   |                     |'
  contents:
  - '|                    |Rekey _Multicast------->   |                     |

    '
- title: '|                    |                           |State 10             |'
  contents:
  - "|                    |                           |State 10             |\n  \
    \                  Figure 3:  State Diagram:  Rekey\n   message can be multicast\
    \ to the entire group.  The GC sends the\n   signed Rekey_Multicast message to\
    \ the other members encrypted in the\n   current GKEK.\n   The other members decrypt\
    \ and validate the signed Rekey_Multicast\n   message and extract the new KP,\
    \ group identification, GC\n   identification, group members, group permissions,\
    \ key rekey interval,\n   and rekey command signature.  The group identification,\
    \ GC\n   identification, and group permissions fields are validated based on\n\
    \   the extracted rekey command signature.  If these fields validate, the\n  \
    \ key database tables are updated.\n"
- title: 6.3 Member Initiated Join
  contents:
  - "6.3 Member Initiated Join\n   The GKMP will support member initiated joins to\
    \ the group.  This type\n   of service is most attractive when the group initiator\
    \ does not need\n   to control group membership other than to verify that all\
    \ members of\n   the group conform to some previously agreed upon rules.\n   One\
    \ example of this type of group is corporations job vacancies.  A\n   corporation\
    \ may want to keep its job vacancies confidential and may\n   decide to encrypt\
    \ the announcements.  The group creator doesn't care\n   who gets the announcements\
    \ as long as they are in the corporation.\n   When an employee tries to access\
    \ the information the GC looks at the\n   employees permissions (signed by some\
    \ higher authority).  If they\n   indicate the employee is part of the corporation\
    \ the controller\n   allows access to the group.\n   Before a potential group\
    \ member can join group operations, they must\n   request the key from the GC,\
    \ unambiguously identify themselves, pass\n   their permissions, and receive the\
    \ keys.  These require several\n   messages to pass between GC and the joining\
    \ member.  The purpose of\n   these messages are as follows:\n   o  Request group\
    \ join from controller\n   o  cooperatively generate a SKEK for the transmission\
    \ of the group\n      traffic encryption and GKEK from the GC,\n   o  allow each\
    \ member to verify the identify of the controller and\n      visa versa,\n   o\
    \  allow each member to verify the controllers authorization to\n      create\
    \ the group,\n   o  send the KP, group identity, GC identity, group member identities,\n\
    \      group permissions, and group rekey interval to the other members,\n   The\
    \ series of messages for a member initiated join is very similar to\n   the series\
    \ of messages to distribute group keys during group\n   creation.  In fact, the\
    \ series are identical except for the addition\n   of a request to join message\
    \ sent from the joining member to the\n   controller when the join is member initiated.\
    \  This message should\n   not require encryption since it probably does not contain\
    \ sensitive\n   information.  However, in some military systems the fact that\
    \ a\n   member wants to join a group maybe sensitive from a traffic analysis\n\
    \   viewpoint.  In these specialized instances, a pairwise TEK may be\n   created,\
    \ if one does not already exist, to hide the service request.\n   This function\
    \ consists of seven messages between the GC and the\n   joining member.  The first\
    \ message is created by the joining member\n   and sent to the GC. It simply request\
    \ membership in the group from\n   the controller.  The controller makes the decision\
    \ whether to respond\n   to the request based on the group parameters - membership\
    \ limits,\n   membership lists.\n   The next messages are for the establishment\
    \ of a SKEK. This is\n   accomplished by the GC sending a signed Create_Session_KEK_1\
    \ message\n   to the other member.  This message contains the random value\n \
    \  necessary for the other member to generate the SKEK. This message\n   also\
    \ contains the public key of the GC.\n   The other member validates the Create_Session_KEK_1\
    \ message, builds\n   and sends a Create_Session_KEK_2 message to the GC, generates\
    \ the\n   SKEK, and stores the received public key.  The Create_Session_KEK_2\n\
    \   message contains the random value necessary for the GC to generate\n   the\
    \ SKEK.  This message also contains the public key of the other\n   member.\n\
    \   The GC validates the Create_Session_KEK_2 message, generates the\n   SKEK,\n"
- title: '|___Net_Controller___|__________Messages________|Net_Members,individual|'
  contents:
  - '|___Net_Controller___|__________Messages________|Net_Members,individual|

    '
- title: '|                    |<------ Request_Group_Join |                     |'
  contents:
  - '|                    |<------ Request_Group_Join |                     |

    '
- title: '|State 11            |                           |                     |'
  contents:
  - '|State 11            |                           |                     |

    '
- title: '|                    |Create Session KEK_1---->  |                     |'
  contents:
  - '|                    |Create Session KEK_1---->  |                     |

    '
- title: '|                    |                           |State 5              |'
  contents:
  - '|                    |                           |State 5              |

    '
- title: '|                    |<-----Create Session KEK_2 |                     |'
  contents:
  - '|                    |<-----Create Session KEK_2 |                     |

    '
- title: '|State 5             |                           |                     |'
  contents:
  - '|State 5             |                           |                     |

    '
- title: '|                    |NegotiateSess. Keys_1----->|                     |'
  contents:
  - '|                    |NegotiateSess. Keys_1----->|                     |

    '
- title: '|                    |                           |State 6              |'
  contents:
  - '|                    |                           |State 6              |

    '
- title: '|                    |<-----NegotiateSess. Keys_2|                     |'
  contents:
  - '|                    |<-----NegotiateSess. Keys_2|                     |

    '
- title: '|State 7             |                           |                     |'
  contents:
  - '|State 7             |                           |                     |

    '
- title: '|                    |Download Grp Keys--------> |                     |'
  contents:
  - '|                    |Download Grp Keys--------> |                     |

    '
- title: '|                    |                           |State 8              |'
  contents:
  - '|                    |                           |State 8              |

    '
- title: '|                    |<----- Key download ack    |                     |'
  contents:
  - '|                    |<----- Key download ack    |                     |

    '
- title: '|State 9             |                           |                     |'
  contents:
  - "|State 9             |                           |                     |\n  \
    \               Figure 4:  State Diagram:  Member Join\n   builds the Negotiate_Session_\
    \ KEK_1 message for transmission to the\n   other member, and stores the received\
    \ public key.\n   The GC sends the Negotiate_Session_KEK_1 message to the other\
    \ member\n   encrypted in the SKEK that was just generated.\n   The other member\
    \ decrypts the Negotiate_Session_KEK_1 message and\n   builds a Negotiate_Session_KEK_2\
    \ message for transmission to the GC.\n   The GC receives the Negotiate_Session_KEK_2\
    \ message and builds a\n   Download_Grp_Keys message for transmission to the other\
    \ member.\n   The GC sends theDownload_Grp_Keys message to the other member\n\
    \   encrypted in the SKEK that was just generated.  (note:  the key used\n   to\
    \ encrypt the negotiation messages can be combined differently to\n   create the\
    \ KEK.)\n   The other members decrypts theDownload_Grp_Keys message and extracts\n\
    \   the KP, group identification, GC identification, group members, group\n  \
    \ permissions, key rekey interval, and group commanders signature.  The\n   group\
    \ identification, GC identification, and group permissions fields\n   are validated\
    \ based on the signature.  If these fields validate, the\n   other members internal\
    \ key storage tables are updated with the new\n   keys.\n"
- title: 6.4 Member Deletion
  contents:
  - "6.4 Member Deletion\n   There are two types of member deletion scenarios - cooperative\
    \ and\n   hostile.  The cooperative deletion scenarios is the removal of a\n \
    \  trusted group member for some management reason (i.e., reduce group\n   size,\
    \ prepare the member for a move).  The hostile deletion usually\n   results in\n"
- title: '|___Net_Controller___|__________Messages__________|_____Net_Members_____|'
  contents:
  - '|___Net_Controller___|__________Messages__________|_____Net_Members_____|

    '
- title: '|                    |Delete_Group_Keys ------>   |                    |'
  contents:
  - '|                    |Delete_Group_Keys ------>   |                    |

    '
- title: '|                    |                            |State 12            |'
  contents:
  - '|                    |                            |State 12            |

    '
- title: '|                    |<------ Grp_Keys_Deleted_Ack|                    |'
  contents:
  - '|                    |<------ Grp_Keys_Deleted_Ack|                    |

    '
- title: '|State 9             |                            |                    |'
  contents:
  - "|State 9             |                            |                    |\n  \
    \           Figure 5:  State Diagram:  Cooperative Delete\n   a loss of secure\
    \ state at the members site (i.e., compromise,\n   equipment breakage).\n   The\
    \ two scenarios present different challenges to the network.\n   Minimization\
    \ of network impact is paramount in the cooperative\n   scenario.  We would like\
    \ to leave the key group intact and have\n   confidence that removing the cooperative\
    \ group member will have no\n   impact on the security of future group operations.\
    \  In the case of a\n   hostile deletion, the goal is to return to a secure operating\
    \ state\n   as fast as possible.  In fact there is a trade-off.  We could\n  \
    \ eliminate the compromised group as soon as the compromise is\n   discovered,\
    \ but this may cripple an important asset.  So security\n   concerns need to be\
    \ balanced with operational concerns.\n"
- title: 6.4.1 Cooperative Deletion
  contents:
  - "6.4.1 Cooperative Deletion\n   The cooperative deletion function occurs between\
    \ a trusted member and\n   the GC. It results in a reliable deletion of the group\
    \ key encryption\n   and GTEKs at the deleted member.  This deletion is intended\
    \ to be an\n   administrative function.\n   This function consists of two messages\
    \ between the GC and the member.\n   The GC sends the Delete_Group_ Keys message\
    \ to the group, encrypted\n   in the GTEK. The message identifies the member(s)\
    \ that need to delete\n   the group keys.  The member(s) decrypt the Delete_Group_Keys\
    \ message,\n   extract the group identification, check the deleted member list,\n\
    \   deletes the group traffic and key encryption keys for that group, and\n  \
    \ build the Group_Keys_Deleted_Ack message for transmission to the GC.\n   The\
    \ Grp_Keys_Deleted_Ack message is encrypted in the group traffic\n   key.  The\
    \ GC receives the Grp_Keys_Deleted_Ack message, decrypts it,\n   and updates the\
    \ group definition.\n"
- title: '|___Net_Controller___|__________Messages____________|_____Net_Members__|'
  contents:
  - '|___Net_Controller___|__________Messages____________|_____Net_Members__|

    '
- title: '|                    |Delete_Group_Keys ------>     |                  |'
  contents:
  - '|                    |Delete_Group_Keys ------>     |                  |

    '
- title: '|                    |                              |State 13          |'
  contents:
  - "|                    |                              |State 13          |\n  \
    \             Figure 6:  State Diagram:  Hostile Delete\n"
- title: 6.4.2 Hostile Deletion (Compromise)
  contents:
  - "6.4.2 Hostile Deletion (Compromise)\n   Hostile deletion occurs when a the group\
    \ losses trust in a member.\n   We assume that all keys resident at the members\
    \ site have been lost.\n   We also assume the member will not cooperate.  Therefor,\
    \ we must\n   essentially create another group, minus the untrusted member, and\n\
    \   transfer group operations to that new group.  When the group losses\n   trust\
    \ in the controller, another controller must be appointed and\n   then the hostile\
    \ deletion process can proceed.\n   There are some security and operational management\
    \ issues surrounding\n   compromise recovery.  The essence of the issues involve\
    \ a tradeoff\n   between operational continuity and security vulnerability.  If\
    \ a\n   member is found to be bad, from a security point of view all traffic\n\
    \   on the network should stop.  However, if that traffic is supporting a\n  \
    \ critical operation, the group may prefer to live with the security\n   leak\
    \ rather than interrupt the group communication.\n   The GKMP provides two mechanisms\
    \ to help restrict access of\n   compromised members.  First, it implements a\
    \ Certificate Revocation\n   List (CRL) which is checked during the group creation\
    \ process.  Thus\n   it will not allow a compromised member to be included in\
    \ a new group.\n   Second, the GKMP facilitates the creation of another group\
    \ (minus the\n   compromised member(s)).  However, it does not dictate whether\
    \ or not\n   the group may continue to operate with a compromised member.\n  \
    \ The mechanism the GKMP uses to remove a compromised member is to key\n   that\
    \ member out.  This entails creating a new group, without the\n   compromised\
    \ member, and switching group operations.  The old group is\n   canceled by several\
    \ multicasts of a group delete message.\n   This function consists of one message\
    \ from the GC to all members.\n   The GC sends the Delete_Group message to all\
    \ members encrypted in the\n   GTEK. This results in the deletion of the group\
    \ traffic and key\n   encryption keys in all group members.  All members decrypt\
    \ the\n   received Delete_Group message, validate the authorization, extracts\n\
    \   the group identification, and delete the group traffic and key\n   encryption\
    \ keys.\n"
- title: 7 Security Conditions
  contents:
  - "7 Security Conditions\n   This document, in entirety, concerns security.\n"
- title: 8 Addresses of Authors
  contents:
  - "8 Addresses of Authors\n   Hugh Harney\n   SPARTA, Inc.\n   Secure Systems Engineering\
    \ Division\n   9861 Broken Land Parkway, Suite 300\n   Columbia, MD 21046-1170\n\
    \   United States\n   Phone:        +1 410 381 9400 (ext.  203)\n   EMail:  hh@columbia.sparta.com\n\
    \   Carl Muckenhirn\n   SPARTA, Inc.\n   Secure Systems Engineering Division\n\
    \   9861 Broken Land Parkway, Suite 300\n   Columbia, MD 21046-1170\n   United\
    \ States\n   Phone:        +1 410 381 9400 (ext.  208)\n   EMail:  cfm@columbia.sparta.com\n"
