- title: __initial_text__
  contents:
  - "        Ipsilon Flow Management Protocol Specification for IPv4\n           \
    \                   Version 1.0\n"
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This document provides information for the Internet community.\
    \  This\n   memo does not specify an Internet standard of any kind.  Distribution\n\
    \   of this memo is unlimited.\n   This memo documents a private protocol for\
    \ IPv4-based flows.  This\n   protocol is NOT the product of an IETF working group\
    \ nor is it a\n   standards track document.  It has not necessarily benefited\
    \ from the\n   widespread and in depth community review that standards track\n\
    \   documents receive.\n"
- title: Abstract
  contents:
  - "Abstract\n   The Ipsilon Flow Management Protocol (IFMP), is a protocol for\n\
    \   allowing a node to instruct an adjacent node to attach a layer 2\n   label\
    \ to a specified IP flow.  The label allows more efficient access\n   to cached\
    \ routing information for that flow.  The label can also\n   enable a node to\
    \ switch further packets belonging to the specified\n   flow at layer 2 rather\
    \ than forwarding them at layer 3.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n       4.5  Error Message............................................17\n\
    \   References........................................................19\n   Security\
    \ Considerations...........................................19\n   Authors' Addresses................................................19\n"
- title: 1. Introduction
  contents:
  - "1. Introduction\n   The Ipsilon Flow Management Protocol (IFMP), is a protocol\
    \ for\n   instructing an adjacent node to attach a layer 2 label to a specified\n\
    \   IP flow. The label allows more efficient access to cached routing\n   information\
    \ for that flow and it allows the flow to be switched\n   rather than routed in\
    \ certain cases.\n   If a network node's upstream and downstream links both redirect\
    \ a\n   flow at the node, then the node can switch the flow at the data link\n\
    \   layer rather than forwarding it at the network layer.  The label\n   space\
    \ is managed at the downstream end of each link and redirection\n   messages are\
    \ sent upstream to associate a particular flow with a\n   given label.  Each direction\
    \ of transmission on a link is treated\n   separately.\n   If the flow is not\
    \ refreshed by the time the lifetime field in the\n   redirect message expires,\
    \ then the association between the flow and\n   the label is discarded.  A flow\
    \ is refreshed by sending a redirect\n   message, identical to the original, before\
    \ the lifetime expires.\n   Several flow types may be specified.  Each flow type\
    \ specifies the\n   set of fields from the packet header that are used to identify\
    \ a\n   flow.  There must be an ordering amongst the different flow types\n  \
    \ such that a most specific match operation may be performed.\n   A particular\
    \ flow is specified by a flow identifier.  The flow\n   identifier for that flow\
    \ gives the contents of the set of fields from\n   the packet header as defined\
    \ for the flow type to which it belongs.\n   This document specifies the IFMP\
    \ protocol for IPv4 on a point-to-\n   point link.  The definition of labels,\
    \ and the encapsulation of\n   flows, are specified in a separate document for\
    \ each specific data\n   link technology.  The specification for ATM data links\
    \ is given in\n   [ENCAP].\n"
- title: 2. Flow Types
  contents:
  - "2. Flow Types\n   A flow is a sequence of packets that are sent from a particular\n\
    \   source to a particular (unicast or multicast) destination and that\n   are\
    \ related in terms of their routing and any logical handling policy\n   they may\
    \ require.\n   A flow is identified by its flow identifier.\n   Several different\
    \ flow types can be defined.  The particular set of\n   fields from the packet\
    \ header used to identify a flow constitutes the\n   flow type.  The values of\
    \ these fields, for a particular flow,\n   constitutes the flow identifier for\
    \ that flow.  The values of these\n   fields must be invariant in all packets\
    \ belonging to the same flow at\n   any point in the network.\n   Flow types are\
    \ sub- or super-sets of each other such that there is a\n   clear hierarchy of\
    \ flow types.  This permits a most specific match\n   operation to be performed.\
    \  (If additional flow types are defined in\n   the future that are not fully\
    \ ordered then the required behavior will\n   be defined.) Each flow type also\
    \ specifies an encapsulation that is\n   to be used after a flow of this type\
    \ is redirected.  The\n   encapsulations for each flow type are specified in a\
    \ separate\n   document for each specific data link technology.  The encapsulations\n\
    \   for flows over ATM data links are given in [ENCAP].\n   Three flow types are\
    \ defined in this version of the protocol:\n   Flow Type 0\n      Flow Type 0\
    \ is used to change the encapsulation of IPv4 packets\n      from the default\
    \ encapsulation.\n      For Flow Type 0: Flow Type = 0 and Flow ID Length = 0.\n\
    \      The Flow Identifier for Flow Type 0 is null (zero length).\n   Flow Type\
    \ 1\n      Flow Type 1 is designed for protocols such as UDP and TCP in which\n\
    \      the first four octets after the IPv4 header specify a Source Port\n   \
    \   number and a Destination Port number.\n      For Flow Type 1, Flow Type =\
    \ 1 and Flow ID Length = 4 (32 bit\n      words).\n      The format of the Flow\
    \ Identifier for Flow Type 1 is:\n       0                   1               \
    \    2                   3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\
    \ 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |Version|  IHL  |Type of Service| Time to Live  |   Protocol    |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \                         Source Address                        |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                      Destination Address                      |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \          Source Port          |       Destination Port        |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   Flow Type 2\n      For Flow Type 2, Flow Type = 2 and Flow ID Length = 3 (32\
    \ bit\n      words).\n      The format of the Flow Identifier for Flow Type 2\
    \ is:\n       0                   1                   2                   3\n\
    \       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n    \
    \  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |Version|\
    \  IHL  |   Reserved    | Time to Live  |   Reserved    |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                         Source Address                        |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \                      Destination Address                      |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      The Reserved fields are unused and should be set to zero by the\n     \
    \ sender and ignored by the receiver.\n"
- title: 3. IFMP Adjacency Protocol
  contents:
  - "3. IFMP Adjacency Protocol\n   The IFMP Adjacency Protocol allows a host or router\
    \ to discover the\n   identity of a peer at the other end of a link.  It is also\
    \ used to\n   synchronize state across the link, to detect when the peer at the\n\
    \   other end of the link changes, and to exchange a list of IP addresses\n  \
    \ assigned to the link.\n"
- title: 3.1 Packet Format
  contents:
  - "3.1 Packet Format\n   All IFMP messages belonging to the Adjacency Protocol must\
    \ be\n   encapsulated within an IPv4 packet and must be sent to the IP limited\n\
    \   broadcast address (255.255.255.255).  The Protocol field in the IP\n   header\
    \ must contain the value 101 (decimal) indicating that the IP\n   packet contains\
    \ an IFMP message.  The Time to Live (TTL) field in the\n   IP header must be\
    \ set to 1.\n   All IFMP messages belonging to the adjacency protocol have the\n\
    \   following structure:\n    0                   1                   2      \
    \             3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8\
    \ 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |    Version    |    Op Code    |           Checksum            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                        Sender Instance                        |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                         Peer Instance                         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                         Peer Identity                         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                    Peer Next Sequence Number                  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |         Reserved              |    Reserved   | Max Ack Intvl |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                                                               |\n   ~  \
    \                        Address List                         ~\n   |        \
    \                                                       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   Version\n             The IFMP protocol version number.  The current Version\
    \ = 1.\n   Op Code\n             Specifies the function of the message.  Four\
    \ Op Codes are\n             defined for the IFMP Adjacency Protocol:\n      \
    \          SYN:    Op Code = 0\n                SYNACK: Op Code = 1\n        \
    \        RSTACK: Op Code = 2\n                ACK:    Op Code = 3\n   Checksum\n\
    \             The 16-bit one's complement of the one's complement sum of\n   \
    \          a pseudo header of information from the IP header and the\n       \
    \      IFMP message itself.  The pseudo header, conceptually\n             prefixed\
    \ to the IFMP message, contains the Source Address,\n             the Destination\
    \ Address, and the Protocol fields from the\n             IPv4 header, and the\
    \ total length of the IFMP message\n             starting with the Version field\
    \ (this is equivalent to the\n             value of the Total Length field from\
    \ the IPv4 header minus\n             the length of the IPv4 header itself).\n\
    \   Sender Instance\n             For the SYN, SYNACK, and ACK messages, is the\
    \ sender's\n             instance number for the link.  The receiver uses this\
    \ to\n             detect when the link comes back up after going down or when\n\
    \             the identity of the peer at the other end of the link\n        \
    \     changes.  The instance number is a 32 bit number that is\n             guaranteed\
    \ to be unique within the recent past and to\n             change when the link\
    \ or node comes back up after going\n             down.  It is used in a similar\
    \ manner to the initial\n             sequence number (ISN) in TCP [RFC 793].\
    \  Zero is not a\n             valid instance number.  For the RSTACK message\
    \ the Sender\n             Instance field is set to the value of the Peer Instance\n\
    \             field from the incoming message that caused an RSTACK\n        \
    \     message to be generated.\n   Peer Instance\n             For the SYN, SYNACK,\
    \ and ACK messages, is what the sender\n             believes is the peer's current\
    \ instance number for the\n             link.  If the sender of the message does\
    \ not know the\n             peer's current instance number for the link, the\
    \ sender\n             must set this field to zero.  For the RSTACK message the\n\
    \             Peer Instance field is set to the value of the Sender\n        \
    \     Instance field from the incoming message that caused an\n             RSTACK\
    \ message to be generated.\n   Peer Identity\n             For the SYN, SYNACK,\
    \ and ACK messages, is the IP address of\n             the peer that the sender\
    \ of the message believes is at the\n             other end of the link.  The\
    \ Peer Identity is taken from the\n             Source IP Address of the IP header\
    \ of a SYN or a SYNACK\n             message.  If the sender of the message does\
    \ not know the IP\n             address of the peer at the other end of the link,\
    \ the\n             sender must set set this field to zero.  For the RSTACK\n\
    \             message, the Peer Identity field is set to the value of the\n  \
    \           Source Address field from the IP header of the incoming\n        \
    \     message that caused an RSTACK message to be generated.\n   Peer Next Sequence\
    \ Number\n             Gives the value of the peer's Sequence Number that the\n\
    \             sender of the IFMP Adjacency Protocol message expects to\n     \
    \        arrive in the next IFMP Redirection Protocol message.  If a\n       \
    \      node is in the ESTAB state, and the value of the Peer Next\n          \
    \   Sequence Number in an incoming ACK message is greater than\n             the\
    \ value of the Sequence Number plus one, from the last\n             IFMP Redirection\
    \ Protocol message transmitted out of the\n             port on which the incoming\
    \ ACK message was received, the\n             link should be reset.  The procedure\
    \ to reset the link is\n             defined in section 3.2.\n   Max Ack Intvl\n\
    \             Maximum Acknowledgement Interval is the maximum amount of\n    \
    \         time the sender of the message will wait until transmitting\n      \
    \       an ACK message.\n   Address List\n             A list of one or more IP\
    \ addresses that are assigned to the\n             link by the sender of the message.\
    \  The list must have at\n             least one entry that is identical to the\
    \ Source Address in\n             the IP header.  The contents of this list are\
    \ not used by\n             the IFMP protocol but can be made available to the\
    \ routing\n             protocol.\n"
- title: 3.2 Procedure
  contents:
  - "3.2 Procedure\n   The IFMP Adjacency Protocol is described by the rules and state\n\
    \   tables given in this section.\n   The rules and state tables use the following\
    \ operations:\n    o The \"Update Peer Verifier\" operation is defined as storing\
    \ the\n      Sender Instance and the Source IP Address from a SYN or SYNACK\n\
    \      message received from the peer on a particular port.\n    o The procedure\
    \ \"Reset the link\" is defined as:\n          1. Generate a new instance number\
    \ for the link\n          2. Delete the peer verifier (set the stored values of\
    \ Sender\n             Instance and Source IP Address of the peer to zero)\n \
    \         3. Set Sequence Number and Peer Next Sequence Number to zero\n     \
    \     4. Send a SYN message\n          5. Enter the SYNSENT state\n    o The state\
    \ tables use the following Boolean terms and operators:\n        A    The Sender\
    \ Instance in the incoming message matches the\n             value stored from\
    \ a previous message by the \"Update Peer\n             Verifier\" operation for\
    \ the port on which the incoming\n             message is received.\n        B\
    \    The Sender Instance and the Source IP Address in the\n             incoming\
    \ message matches the value stored from a previous\n             message by the\
    \ \"Update Peer Verifier\" operation for the\n             port on which the incoming\
    \ message is received.\n        C    The Peer Instance and Peer Identity in the\
    \ incoming message\n             matches the value of the Sender Instance and\
    \ the Source IP\n             Address currently in use for all SYN, SYNACK, and\
    \ ACK\n             messages transmitted out of the port on which the incoming\n\
    \             message was received.\n        \"&&\" Represents the logical AND\
    \ operation\n        \"||\" Represents the logical OR operation\n        \"!\"\
    \ Represents the logical negation (NOT) operation.\n    o A timer is required\
    \ for the periodic generation of SYN, SYNACK,\n      and ACK messages.  The period\
    \ of the timer is unspecified but a\n      value of one second is suggested.\n\
    \      There are two independent events: the timer expires, and a packet\n   \
    \   arrives.  The processing rules for these events are:\n         Timer Expires:\
    \   Reset Timer\n                          If state = SYNSENT Send SYN\n     \
    \                     If state = SYNRCVD Send SYNACK\n                       \
    \   If state = ESTAB   Send ACK\n         Packet Arrives:  If incoming message\
    \ is an RSTACK\n                             If A && C && !SYNSENT\n         \
    \                       Reset the link\n                             Else Discard\
    \ the message\n                          Else the following State Tables.\n  \
    \  o State synchronization across a link is considered to be achieved\n      when\
    \ a node reaches the ESTAB state.\n"
- title: State Tables
  contents:
  - "State Tables\n   State: SYNSENT\n"
- title: +======================================================================+
  contents:
  - '+======================================================================+

    '
- title: '|     Condition      |                Action               | New State |'
  contents:
  - '|     Condition      |                Action               | New State |

    '
- title: +====================+=====================================+===========+
  contents:
  - '+====================+=====================================+===========+

    '
- title: '|    SYNACK && C     |  Update Peer Verifier; Send ACK     |   ESTAB   |'
  contents:
  - '|    SYNACK && C     |  Update Peer Verifier; Send ACK     |   ESTAB   |

    '
- title: +--------------------+-------------------------------------+-----------+
  contents:
  - '+--------------------+-------------------------------------+-----------+

    '
- title: '|    SYNACK && !C    |            Send RSTACK              |  SYNSENT  |'
  contents:
  - '|    SYNACK && !C    |            Send RSTACK              |  SYNSENT  |

    '
- title: +--------------------+-------------------------------------+-----------+
  contents:
  - '+--------------------+-------------------------------------+-----------+

    '
- title: '|        SYN         |  Update Peer Verifier; Send SYNACK  |  SYNRCVD  |'
  contents:
  - '|        SYN         |  Update Peer Verifier; Send SYNACK  |  SYNRCVD  |

    '
- title: +--------------------+-------------------------------------+-----------+
  contents:
  - '+--------------------+-------------------------------------+-----------+

    '
- title: '|        ACK         |            Send RSTACK              |  SYNSENT  |'
  contents:
  - '|        ACK         |            Send RSTACK              |  SYNSENT  |

    '
- title: +======================================================================+
  contents:
  - "+======================================================================+\n  \
    \ State: SYNRCVD\n"
- title: +======================================================================+
  contents:
  - '+======================================================================+

    '
- title: '|     Condition      |                Action               | New State |'
  contents:
  - '|     Condition      |                Action               | New State |

    '
- title: +====================+=====================================+===========+
  contents:
  - '+====================+=====================================+===========+

    '
- title: '|    SYNACK && C     |  Update Peer Verifier; Send ACK     |   ESTAB   |'
  contents:
  - '|    SYNACK && C     |  Update Peer Verifier; Send ACK     |   ESTAB   |

    '
- title: +--------------------+-------------------------------------+-----------+
  contents:
  - '+--------------------+-------------------------------------+-----------+

    '
- title: '|    SYNACK && !C    |            Send RSTACK              |  SYNRCVD  |'
  contents:
  - '|    SYNACK && !C    |            Send RSTACK              |  SYNRCVD  |

    '
- title: +--------------------+-------------------------------------+-----------+
  contents:
  - '+--------------------+-------------------------------------+-----------+

    '
- title: '|        SYN         |  Update Peer Verifier; Send SYNACK  |  SYNRCVD  |'
  contents:
  - '|        SYN         |  Update Peer Verifier; Send SYNACK  |  SYNRCVD  |

    '
- title: +--------------------+-------------------------------------+-----------+
  contents:
  - '+--------------------+-------------------------------------+-----------+

    '
- title: '|    ACK && B && C   |              Send ACK               |   ESTAB   |'
  contents:
  - '|    ACK && B && C   |              Send ACK               |   ESTAB   |

    '
- title: +--------------------+-------------------------------------+-----------+
  contents:
  - '+--------------------+-------------------------------------+-----------+

    '
- title: '|  ACK && !(B && C)  |            Send RSTACK              |  SYNRCVD  |'
  contents:
  - '|  ACK && !(B && C)  |            Send RSTACK              |  SYNRCVD  |

    '
- title: +======================================================================+
  contents:
  - "+======================================================================+\n  \
    \ State: ESTAB\n"
- title: +=======================================================================+
  contents:
  - '+=======================================================================+

    '
- title: '|     Condition       |                Action               | New State
    |'
  contents:
  - '|     Condition       |                Action               | New State |

    '
- title: +=====================+=====================================+===========+
  contents:
  - '+=====================+=====================================+===========+

    '
- title: '|   SYN || SYNACK     |            Send ACK (note 1)        |   ESTAB   |'
  contents:
  - '|   SYN || SYNACK     |            Send ACK (note 1)        |   ESTAB   |

    '
- title: +---------------------+-------------------------------------+-----------+
  contents:
  - '+---------------------+-------------------------------------+-----------+

    '
- title: '|   ACK && B && C     |            Send ACK (note 1)        |   ESTAB   |'
  contents:
  - '|   ACK && B && C     |            Send ACK (note 1)        |   ESTAB   |

    '
- title: +---------------------+-------------------------------------+-----------+
  contents:
  - '+---------------------+-------------------------------------+-----------+

    '
- title: '|  ACK && !(B && C)   |              Send RSTACK            |   ESTAB   |'
  contents:
  - '|  ACK && !(B && C)   |              Send RSTACK            |   ESTAB   |

    '
- title: +=======================================================================+
  contents:
  - "+=======================================================================+\n Note\
    \ 1: No more than one ACK should be sent within any time period of\n        length\
    \ defined by the timer.\n"
- title: 4. IFMP Redirection Protocol
  contents:
  - "4. IFMP Redirection Protocol\n   A sender encapsulates within an IPv4 packet\
    \ all IFMP messages\n   belonging to the Redirection Protocol.  The sender sends\
    \ these\n   messages to the unicast IP address of the peer at the other end of\n\
    \   the link. The IP address of the peer is obtained from the adjacency\n   protocol.\
    \  The Protocol field in the IP header must contain the value\n   101 (decimal)\
    \ indicating that the IP packet contains an IFMP message.\n   The Time to Live\
    \ (TTL) field in the IP header must be set to 1.\n   All IFMP Redirection Protocol\
    \ messages have the following structure:\n    0                   1          \
    \         2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0\
    \ 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |    Version    |    Op Code    |           Checksum            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                        Sender Instance                        |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                         Peer Instance                         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                        Sequence Number                        |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                                                               |\n   ~  \
    \                        Message Body                         ~\n   |        \
    \                                                       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   Version\n             The IFMP protocol version number, currently Version\
    \ = 1.\n   Op Code\n             This field gives the message type.  Five message\
    \ types are\n             currently defined for the IFMP Redirection Protocol:\n\
    \                 REDIRECT:     Op Code = 4\n                 RECLAIM:      Op\
    \ Code = 5\n                 RECLAIM ACK:  Op Code = 6\n                 LABEL\
    \ RANGE:  Op Code = 7\n                 ERROR:        Op Code = 8\n   Checksum\n\
    \             The 16-bit one's complement of the one's complement sum of\n   \
    \          a pseudo header of information from the IP header, and the\n      \
    \       IFMP message itself.  The pseudo header, conceptually\n             prefixed\
    \ to the IFMP message, contains the Source Address,\n             the Destination\
    \ Address, and the Protocol fields from the\n             IPv4 header, and the\
    \ total length of the IFMP message\n             starting with the version field\
    \ (this is equivalent to the\n             value of the Total Length field from\
    \ the IPv4 header minus\n             the length of the IPv4 header itself).\n\
    \   Sender Instance\n             The sender's instance number for the link from\
    \ the IFMP\n             Adjacency Protocol.\n   Peer Instance\n             What\
    \ the sender believes is the peer's current instance\n             number for\
    \ the link from the IFMP Adjacency protocol.\n   Sequence Number\n           \
    \  The sender must increment by one, modulo 2**32, for every\n             IFMP\
    \ Redirection Protocol message sent across a link.  It\n             allows the\
    \ receiver to process IFMP Redirection Protocol\n             messages in order.\
    \  The Sequence Number is set to zero when\n             a node resets the link.\n\
    \   Message Body\n             Contains a list of one or more IFMP Redirection\
    \ Protocol\n             message elements.  All of the message elements in the\
    \ list\n             have the same message type because the Op Code field\n  \
    \           applies to the entire IFMP message.  The number of message\n     \
    \        elements included in a single packet must not cause the\n           \
    \  total size of the IFMP message to exceed the MTU size of\n             the\
    \ underlying data link.  Only a single message element is\n             permitted\
    \ in a Label Range message or in an Error message.\n   No IFMP Redirection Protocol\
    \ messages can be sent across a link until\n   the IFMP Adjacency Protocol has\
    \ achieved state synchronization across\n   that link.  All IFMP Redirection Protocol\
    \ messages received on a link\n   that does not currently have state synchronization\
    \ must be discarded.\n   For every received IFMP Redirection Protocol message\
    \ the receiver\n   must check the Source IP Address from the IP header, the Sender\n\
    \   Instance, and the Peer Instance.  The incoming message must be\n   discarded\
    \ if the Sender Instance and the Source IP Address fields do\n   not match the\
    \ values stored by the \"Update Peer Verifier\" operation\n   of the IFMP Adjacency\
    \ Protocol for the port on which the message is\n   received.  The incoming message\
    \ must also be discarded if the Peer\n   Instance field does not match the current\
    \ value for the Sender\n   Instance of the IFMP Adjacency Protocol.\n"
- title: 4.1 Redirect Message
  contents:
  - "4.1 Redirect Message\n   The Redirect Message element is used to instruct an\
    \ adjacent node to\n   attach one or more given labels to packets belonging to\
    \ one or more\n   specified flows each for a specified period of time.  The Redirect\n\
    \   message is not acknowledged.\n   Each Redirect message element has the following\
    \ structure:\n    0                   1                   2                  \
    \ 3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |   Flow Type   | Flow ID Length|           Lifetime            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                             Label                             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                                                               |\n   ~  \
    \                       Flow Identifier                       ~\n   |        \
    \                                                       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   Flow Type\n             Specifies the Flow Type of the flow identifier contained\
    \ in\n             the Flow Identifier field.\n   Flow ID Length\n           \
    \  Specifies the length of the Flow Identifier field in\n             integer\
    \ multiples of 32 bit words.\n   Lifetime field\n             Specifies the length\
    \ of time, in seconds, for which this\n             redirection is valid.  The\
    \ association of flow identifier\n             and label should be discarded at\
    \ a time no greater than\n             that specified by the Lifetime field. \
    \ A value of zero is\n             not valid.\n   Label field\n             Contains\
    \ a 32 bit label.  The format of the label is\n             dependent upon the\
    \ type of physical link across which the\n             Redirect message is sent.\
    \  (The format of the label for ATM\n             data links is specified in [ENCAP].)\n\
    \   Flow Identifier\n             Identifies the flow with which the specified\
    \ label should\n             be associated.  The length of the Flow Identifier\
    \ field\n             must be an integer multiple of 32 bit words to preserve\
    \ 32\n             bit alignment.\n   A node can send an IFMP message containing\
    \ one or more Redirect\n   message elements across a link to its upstream neighbor.\
    \  Each\n   Redirect message element requests that the upstream neighbor\n   associate\
    \ a given link-level label to packets belonging to a\n   specified flow for up\
    \ to a specified period of time.  A node\n   receiving an IFMP message that contains\
    \ one or more Redirect message\n   elements from an adjacent downstream neighbor\
    \ can choose to ignore\n   any or all of the Redirect message elements.  Neither\
    \ the IFMP\n   message nor any of the Redirect message elements are acknowledged.\n\
    \   If the node chooses to accept a particular Redirect message element\n   and\
    \ to redirect the specified flow, it should attach the label\n   specified in\
    \ the Redirect message element to all further packets sent\n   on that flow until\
    \ it chooses to do so no longer, or until the\n   specified lifetime expires.\
    \  While the flow remains redirected, the\n   encapsulation specified by the definition\
    \ of the Flow Type given in\n   the Redirect message element must be used for\
    \ all packets belonging\n   to that flow.  If the label in a Redirect message\
    \ element is outside\n   the range that can be handled across the relevant link,\
    \ a Label Range\n   message can be returned to the sender.  The Label Range message\n\
    \   informs the sender of the Redirect message of the range of labels\n   that\
    \ can be sent across the link.\n   If a Redirect message element is received specifying\
    \ a flow that is\n   already redirected, the Label field in the received Redirect\
    \ message\n   element must be checked against the label stored for the redirected\n\
    \   flow.  If they agree, the lifetime of the redirected flow is reset to\n  \
    \ that contained in the Redirect message element.  If they disagree,\n   the Redirect\
    \ message element is ignored, and the flow returned to the\n   default state.\
    \  There is a minimum time between Redirect message\n   elements specifying the\
    \ same flow.  The default value is one second.\n   If a receiving node detects\
    \ an error in any of the fields of a\n   Redirect message element, the node must\
    \ discard that message element\n   without affecting any other Redirect message\
    \ elements in the same\n   IFMP message.  The receiver should return an error\
    \ message to the\n   sender only in the case that the receiver does not understand\
    \ the\n   version of the IFMP protocol in the received IFMP message or does not\n\
    \   understand a Flow Type in any of the Redirect message elements.  An\n   Error\
    \ Message should be returned for each Flow Type that is not\n   understood.\n"
- title: 4.2 Reclaim Message
  contents:
  - "4.2 Reclaim Message\n   The Reclaim message element is used by a node to instruct\
    \ an adjacent\n   upstream node to unbind one or more flows from the labels to\
    \ which\n   they are currently bound, and to release the labels.\n   Each Reclaim\
    \ message element has the following structure:\n    0                   1    \
    \               2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7\
    \ 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |   Flow Type   | Flow ID Length|           Reserved            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                             Label                             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                                                               |\n   ~  \
    \                       Flow Identifier                       ~\n   |        \
    \                                                       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   Flow Type\n             Specifies the Flow Type of the Flow Identifier contained\
    \ in\n             the Flow ID field.\n   Flow ID Length\n             Specifies\
    \ the length of the Flow Identifier field in\n             integer multiples of\
    \ 32 bit words.\n   Reserved\n             Field is unused and should be set to\
    \ zero by the sender and\n             ignored by the receiver.\n   Label\n  \
    \           Field contains the label to be released.\n   Flow Identifier\n   \
    \          Field contains the flow identifier to be unbound.\n   A node can send\
    \ a Reclaim message element to instruct an adjacent\n   upstream node to unbind\
    \ a flow from the label to which it is\n   currently bound, return the flow to\
    \ the default forwarding state, and\n   release the label.  Each Reclaim message\
    \ element applies to a single\n   flow and a single label.  When the receiver\
    \ has completed the\n   operation, it must issue a Reclaim Ack message element.\
    \  Reclaim Ack\n   message elements can be grouped together, in any order, into\
    \ one or\n   more IFMP Reclaim Ack messages and returned to the sender as an\n\
    \   acknowledgment that the operation is complete.\n   If a Reclaim message element\
    \ is received indicating an unknown flow,\n   a Reclaim Ack message element must\
    \ be returned containing the same\n   Label and Flow Identifier fields from the\
    \ Reclaim message.\n   If a Reclaim message element is received indicating a known\
    \ flow, but\n   with a Label that is not currently bound to that flow, the flow\
    \ must\n   be unbound and returned to the default forwarding state, and a\n  \
    \ Reclaim Ack message sent containing the actual label to which the\n   flow was\
    \ previously bound.\n   If the receiver detects an error in any of the fields\
    \ of a Reclaim\n   message element, the receiver must discard that message element,\n\
    \   without affecting any other Reclaim message elements in the same\n   message.\
    \  The receiver must return an error message to the sender\n   only in the case\
    \ that the receiver does not understand the version of\n   the IFMP protocol in\
    \ the received message or does not understand a\n   Flow Type in one of the Reclaim\
    \ message elements.\n"
- title: 4.3 Reclaim Ack Message
  contents:
  - "4.3 Reclaim Ack Message\n   The Reclaim Ack message element is used by a receiving\
    \ node to\n   acknowledge the successful release of one or more reclaimed labels.\n\
    \   Each Reclaim Ack message element has the following structure:\n    0     \
    \              1                   2                   3\n    0 1 2 3 4 5 6 7\
    \ 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |   Flow Type   | Flow ID Length|           Reserved            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                             Label                             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                                                               |\n   ~  \
    \                       Flow Identifier                       ~\n   |        \
    \                                                       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   Flow Type\n             Specifies the Flow Type of the Flow Identifier contained\
    \ in\n             the Flow Identifier field.\n   Flow ID Length\n           \
    \  Specifies the length of the Flow Identifier field in\n             integer\
    \ multiples of 32 bit words.\n   Reserved\n             Field is unused and should\
    \ be set to zero by the sender and\n             ignored by the receiver.\n  \
    \ Label\n             Field contains the label released from the flow specified\n\
    \             by the Flow Identifier.\n   Flow Identifier\n             Field\
    \ contains the Flow Identifier from the Reclaim message\n             element\
    \ that requested the release of the label specified\n             in the Label\
    \ field.\n   A Reclaim Ack message element must be sent in response to each\n\
    \   Reclaim message element received.  It is sent to indicate that the\n   requested\
    \ flow is now unbound and that the label is now free.  If\n   possible, each Reclaim\
    \ Ack message element should not be sent until\n   all data queued for transmission\
    \ on the link, using the label\n   specified for release, has been sent.\n   If\
    \ a Reclaim Ack message element is received specifying a flow for\n   which no\
    \ Reclaim message element was issued, that Reclaim Ack message\n   element must\
    \ be ignored, but no other Reclaim Ack message elements in\n   the same message\
    \ must be affected.\n   If a Reclaim Ack message element is received specifying\
    \ a different\n   label from the one sent in the original Reclaim message element\
    \ for\n   that flow, the Reclaim Ack message element should be handled as if\n\
    \   the reclaim operation were successful.\n   If an error is detected in any\
    \ of the fields of a Reclaim Ack message\n   element, that message element must\
    \ be discarded, but no other Reclaim\n   Ack message elements in the same message\
    \ must be affected.\n   The receiver should return an Error message to the sender\
    \ only in the\n   case that the receiver does not understand the version of the\
    \ IFMP\n   protocol in the received message or does not understand a Flow Type\n\
    \   in one of the Reclaim Ack message elements.\n"
- title: 4.4 Label Range Message
  contents:
  - "4.4 Label Range Message\n   The Label Range message element is sent in response\
    \ to a Redirect\n   message if the label requested in one or more of the Redirect\
    \ message\n   elements is outside the range that the receiver of the Redirect\n\
    \   message can handle.  The Label Range message informs the sender of\n   the\
    \ Redirect message of the label range that can be handled on the\n   relevant\
    \ link.\n   Only a single Label Range message element is permitted in a Label\n\
    \   Range message.  The Label Range message element has the following\n   structure:\n\
    \    0                   1                   2                   3\n    0 1 2\
    \ 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                         Minimum Label                         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                         Maximum Label                         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   Minimum Label\n             The minimum value of label that can be specified\
    \ in an IFMP\n             Redirection Protocol message across this link.\n  \
    \ Maximum Label\n             The maximum value of label that can be specified\
    \ in an IFMP\n             Redirection Protocol message across this link.\n  \
    \ All values of label within the range Minimum Label to Maximum Label\n   inclusive\
    \ may be specified in an IFMP Redirection Protocol message\n   across the link.\n"
- title: 4.5 Error Message
  contents:
  - "4.5 Error Message\n   An Error message can be sent by a node in response to any\
    \ IFMP\n   Redirection Protocol message.\n   Only a single Error message element\
    \ is permitted in an Error message.\n   The Error message element has the following\
    \ structure:\n    0                   1                   2                  \
    \ 3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |  Error Code   |                  Parameter                    |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   Error Code\n             Specifies which an error has occurred.\n   Each Error\
    \ message can specify a single Parameter.\n   Two Error message elements are specified:\n\
    \   Bad Version:\n   Error Code = 1. The sender of the Error message cannot process\
    \ the\n             version of the IFMP protocol of the message that caused the\n\
    \             error.  This message must only be sent if the version of\n     \
    \        the message that caused the error is greater than the most\n        \
    \     recent version that the sender of the Error message can\n             process.\
    \  The parameter field of this Error message gives\n             the most recent\
    \ version of the IFMP protocol that the\n             sender can process, right\
    \ justified, with the unused most\n             significant bits of the Parameter\
    \ field set to zero.\n   Bad Flow Type:\n   Error Code = 2. The sender of the\
    \ Error message does not understand a\n             Flow Type that was received\
    \ in the message that caused the\n             error.  The Flow Type that caused\
    \ the error is given in the\n             parameter field, right justified, with\
    \ the unused most\n             significant bits of the Parameter field set to\
    \ zero.\n"
- title: REFERENCES
  contents:
  - "REFERENCES\n      [ENCAP] Newman, P., et. al., \"Transmission of Flow Labelled\
    \ IPv4\n               on ATM Data Links Ipsilon Version 1.0,\" Ipsilon Networks,\n\
    \               RFC 1954, May 1996.\n      [RFC793] Postel, J., \"Transmission\
    \ Control Protocol,\" STD 7, RFC\n               793, September 1981.\n"
- title: SECURITY CONSIDERATIONS
  contents:
  - "SECURITY CONSIDERATIONS\n   Security issues are not discussed in this memo.\n"
- title: AUTHORS' ADDRESSES
  contents:
  - "AUTHORS' ADDRESSES\n   Peter Newman                        Phone: +1 (415) 846-4603\n\
    \   Ipsilon Networks, Inc.              EMail: pn@ipsilon.com\n   W. L. Edwards,\
    \ Chief Scientist      Phone:  +1 (913) 534 5334\n   Sprint                  \
    \            EMail:  texas@sprintcorp.com\n   Robert M. Hinden               \
    \     Phone: +1 (415) 846-4604\n   Ipsilon Networks, Inc.              EMail:\
    \ hinden@ipsilon.com\n   Eric Hoffman                        Phone: +1 (415) 846-4610\n\
    \   Ipsilon Networks, Inc.              EMail: hoffman@ipsilon.com\n   Fong Ching\
    \ Liaw                     Phone: +1 (415) 846-4607\n   Ipsilon Networks, Inc.\
    \              EMail: fong@ipsilon.com\n   Tom Lyon                          \
    \  Phone: +1 (415) 846-4601\n   Ipsilon Networks, Inc.              EMail: pugs@ipsilon.com\n\
    \   Greg Minshall                       Phone: +1 (415) 846-4605\n   Ipsilon Networks,\
    \ Inc.              EMail: minshall@ipsilon.com\n"
- title: 'Ipsilon Networks, Inc. is located at:'
  contents:
  - "Ipsilon Networks, Inc. is located at:\n   2191 East Bayshore Road\n   Suite 100\n\
    \   Palo Alto, CA 94303\n   USA\n"
- title: 'Sprint is located at:'
  contents:
  - "Sprint is located at:\n   Sprint\n   Sprint Technology Services - Long Distance\
    \ Division\n   9300 Metcalf Avenue\n   Mailstop KSOPKB0802\n   Overland Park,\
    \ KS 66212-6333\n   USA\n"
