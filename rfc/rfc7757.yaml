- title: __initial_text__
  contents:
  - '      Explicit Address Mappings for Stateless IP/ICMP Translation

    '
- title: Abstract
  contents:
  - "Abstract\n   This document extends the Stateless IP/ICMP Translation Algorithm\n\
    \   (SIIT) with an Explicit Address Mapping (EAM) algorithm and formally\n   updates\
    \ RFC 6145.  The EAM algorithm facilitates stateless IP/ICMP\n   translation between\
    \ arbitrary (non-IPv4-translatable) IPv6 endpoints\n   and IPv4.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This\
    \ document is a product of the Internet Engineering Task Force\n   (IETF).  It\
    \ represents the consensus of the IETF community.  It has\n   received public\
    \ review and has been approved for publication by the\n   Internet Engineering\
    \ Steering Group (IESG).  Further information on\n   Internet Standards is available\
    \ in Section 2 of RFC 5741.\n   Information about the current status of this document,\
    \ any errata,\n   and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc7757.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2016 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction  . . . . . . . . . . . . . . . . . . .\
    \ . . . . .   2\n     1.1.  Terminology . . . . . . . . . . . . . . . . . . .\
    \ . . . .   3\n   2.  Problem Statement . . . . . . . . . . . . . . . . . . .\
    \ . . .   4\n   3.  Explicit Address Mapping Algorithm  . . . . . . . . . . .\
    \ . .   5\n     3.1.  Explicit Address Mapping Table  . . . . . . . . . . . .\
    \ .   5\n     3.2.  Explicit Address Mapping Specification  . . . . . . . . .\
    \   6\n     3.3.  IP Address Translation Procedure  . . . . . . . . . . . .  \
    \ 6\n       3.3.1.  Address Translation Steps: IPv4 to IPv6 . . . . . . .   7\n\
    \       3.3.2.  Address Translation Steps: IPv6 to IPv4 . . . . . . .   7\n  \
    \ 4.  Hairpinning of IPv6 Traffic . . . . . . . . . . . . . . . . .   8\n    \
    \ 4.1.  Problem Statement . . . . . . . . . . . . . . . . . . . .   8\n     4.2.\
    \  Recommendation  . . . . . . . . . . . . . . . . . . . . .   9\n       4.2.1.\
    \  Simple Hairpinning Support  . . . . . . . . . . . . .   9\n       4.2.2.  Intrinsic\
    \ Hairpinning Support . . . . . . . . . . . .   9\n   5.  Overlapping Explicit\
    \ Address Mappings . . . . . . . . . . . .  10\n   6.  Lack of Checksum Neutrality\
    \ . . . . . . . . . . . . . . . . .  11\n   7.  Security Considerations . . .\
    \ . . . . . . . . . . . . . . . .  11\n   8.  References  . . . . . . . . . .\
    \ . . . . . . . . . . . . . . .  12\n     8.1.  Normative References  . . . .\
    \ . . . . . . . . . . . . . .  12\n     8.2.  Informative References  . . . .\
    \ . . . . . . . . . . . . .  12\n   Appendix A.  Use Cases  . . . . . . . . .\
    \ . . . . . . . . . . . .  14\n     A.1.  464XLAT . . . . . . . . . . . . . .\
    \ . . . . . . . . . . .  14\n     A.2.  IVI . . . . . . . . . . . . . . . . .\
    \ . . . . . . . . . .  14\n     A.3.  SIIT-DC . . . . . . . . . . . . . . . .\
    \ . . . . . . . . .  15\n   Appendix B.  Example IP Address Translations  . .\
    \ . . . . . . . .  15\n     B.1.  Hairpinning Examples  . . . . . . . . . . .\
    \ . . . . . . .  16\n   Acknowledgements  . . . . . . . . . . . . . . . . . .\
    \ . . . . . .  18\n   Authors' Addresses  . . . . . . . . . . . . . . . . . .\
    \ . . . . .  19\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   The Stateless IP/ICMP Translation Algorithm (SIIT) [RFC6145]\n\
    \   specifies that when translating IPv4 addresses to IPv6 and vice\n   versa,\
    \ all addresses must be translated using the algorithm specified\n   in [RFC6052].\
    \  This document specifies an alternative to the\n   algorithm specified in [RFC6052],\
    \ where IP addresses are translated\n   according to a table of Explicit Address\
    \ Mappings configured on the\n   stateless translator.  This removes the previous\
    \ constraint that IPv6\n   nodes that communicate with IPv4 nodes through SIIT\
    \ must be\n   configured with IPv4-translatable IPv6 addresses.\n   Translation\
    \ using the Explicit Address Mapping Table does not replace\n   [RFC6052].  For\
    \ most use cases, it is expected that both algorithms\n   are used in concert.\
    \  The Explicit Address Mapping algorithm is used\n   only when a mapping matching\
    \ the address to be translated exists.  If\n   no matching mapping exists, the\
    \ algorithm specified in [RFC6052] will\n   be used instead.  Thus, when translating\
    \ an individual IP packet, an\n   SIIT implementation might translate one of the\
    \ two IP address fields\n   according to an EAM, while the other IP address field\
    \ is translated\n   according to [RFC6052].\n"
- title: 1.1.  Terminology
  contents:
  - "1.1.  Terminology\n   This document makes use of the following terms:\n   EAM:\n\
    \      An Explicit Address Mapping, as specified in Section 3.2.\n   EAMT:\n \
    \     The Explicit Address Mapping Table, as specified in Section 3.1.\n   Inner\
    \ (header or address):\n      Refers to an IP header located inside the payload\
    \ of an ICMP error\n      packet or to an IP address within that header.  Compare\
    \ with\n      \"Outer\".\n   Outer (header or address):\n      Refers to the first\
    \ IP header in a packet or to an IP address\n      within that header.  In other\
    \ words, an IP header or address that\n      is NOT \"Inner\".  If a reference\
    \ is made to an IP header or address\n      without the \"Inner\" or \"Outer\"\
    \ qualifier, it should be considered\n      as \"Outer\".\n   SIIT:\n      The\
    \ Stateless IP/ICMP Translation Algorithm, as specified in\n      [RFC6145].\n\
    \   XLAT:\n      Short for \"translation\".\n   IPv4-Converted IPv6 Addresses:\n\
    \      As defined in Section 1.3 of [RFC6052].\n   IPv4-Translatable IPv6 Addresses:\n\
    \      As defined in Section 1.3 of [RFC6052].\n   The key words \"MUST\", \"\
    MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\"\
    , \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted\
    \ as described in [RFC2119].\n"
- title: 2.  Problem Statement
  contents:
  - "2.  Problem Statement\n   Section 3.2.1 of [RFC6144] notes that \"stateless translation\n\
    \   mechanisms typically put constraints on what IPv6 addresses can be\n   assigned\
    \ to IPv6 nodes that want to communicate with IPv4\n   destinations using an algorithmic\
    \ mapping.\"  In practice, this means\n   that the IPv6 nodes must be configured\
    \ with IPv4-translatable IPv6\n   addresses.  For the reasons discussed below,\
    \ some environments may\n   find that the use of IPv4-translatable IPv6 addresses\
    \ is not desired\n   or even possible.\n   Limited availability:\n      The number\
    \ of IPv4-translatable IPv6 addresses available to an\n      operator is equal\
    \ to the number of IPv4 addresses that is assigned\n      to the SIIT function.\
    \  IPv4 addresses are scarce, and as a result,\n      an operator might not have\
    \ enough IPv4-translatable IPv6 addresses\n      to number the entire IPv6 infrastructure.\n\
    \   Restricted format:\n      IPv4-translatable IPv6 addresses must conform to\
    \ the format\n      specified in Section 2.2 of [RFC6052].  This format is not\n\
    \      compatible with other common IPv6 address formats, such as the\n      IPv6\
    \ address format based on the 64-bit Extended Unique Identifier\n      (EUI-64)\
    \ and used by IPv6 Stateless Address Autoconfiguration\n      [RFC4862].\n   An\
    \ operator could overcome the above two problems by building an IPv6\n   network\
    \ using regular (non-IPv4-translatable) IPv6 addresses and\n   assigning IPv4-translatable\
    \ IPv6 addresses as secondary addresses on\n   the nodes that want to communicate\
    \ with IPv4 nodes through SIIT only.\n   However, doing so may result in a new\
    \ set of undesired consequences:\n   Routing complexity:\n      The IPv4-translatable\
    \ IPv6 addresses must be routed throughout the\n      IPv6 network separately\
    \ from the primary (non-IPv4-translatable)\n      IPv6 addresses used by the nodes.\
    \  It might be impossible to\n      aggregate these routes, as two adjacent IPv4-translatable\
    \ IPv6\n      addresses might not be assigned to two adjacent IPv6 nodes.  As\
    \ a\n      result, in order to support SIIT, the IPv6 network might need to\n\
    \      carry a large number of extraneous routes.  These routes must be\n    \
    \  separately injected into the IPv6 routing topology somehow.  Any\n      intermediate\
    \ devices in the IPv6 network such as a firewall might\n      require special\
    \ configuration in order to treat the\n      IPv4-translatable IPv6 address the\
    \ same as the primary IPv6\n      address, for example, by requiring that any\
    \ Access Control List\n      (ACL) entries involving the primary IPv6 address\
    \ of a node must be\n      duplicated.\n   Operational complexity:\n      The\
    \ IPv4-translatable IPv6 addresses not only have to be assigned\n      to the\
    \ IPv6 nodes participating in SIIT, but also all applications\n      and services\
    \ on those nodes must be configured to use them.  For\n      example, if the IPv6\
    \ node is a load balancer, it might require a\n      separate virtual server definition\
    \ using the IPv4-translatable\n      IPv6 address in addition to one using the\
    \ service's primary IPv6\n      address.  A web server might require specific\
    \ configuration to\n      listen for connections on both the IPv4-translatable\
    \ and the\n      primary IPv6 address.  A high-availability cluster service must\
    \ be\n      set up to fail over both addresses between cluster nodes, and\n  \
    \    depending on how the IPv6 network learns the location of the\n      IPv4-translatable\
    \ IPv6 address, the fail-over mechanism used for\n      the two addresses might\
    \ be completely different.  Service\n      monitoring must be done for both the\
    \ IPv4-translatable and the\n      primary IPv6 address, and any troubleshooting\
    \ procedures must be\n      extended to involve both addresses.  Finally, the\
    \ Default Address\n      Selection Policy Table [RFC6724] on the IPv6 nodes might\
    \ need to\n      be altered in order to ensure that outbound sessions towards\
    \ the\n      IPv4 Internet are sourced from an IPv4-translatable IPv6 address.\n\
    \   In short, the use of IPv4-translatable IPv6 addresses in parallel\n   with\
    \ regular IPv6 addresses is in many ways analogous to the use of\n   dual stack\
    \ [RFC4213].  While no actual IPv4 packets are used, the\n   IPv4-translatable\
    \ IPv6 addresses create a secondary \"stack\" in the\n   infrastructure that must\
    \ be treated and operated separately from the\n   primary one.  This increases\
    \ the complexity of the overall\n   infrastructure, in turn increasing operational\
    \ overhead and reducing\n   reliability.  An operator who for such reasons finds\
    \ the use of dual\n   stack unappealing might feel the same way about using SIIT\
    \ with\n   IPv4-translatable IPv6 addresses.\n"
- title: 3.  Explicit Address Mapping Algorithm
  contents:
  - "3.  Explicit Address Mapping Algorithm\n   This normative section defines the\
    \ EAM algorithm and formally updates\n   Sections 4.1 and 5.1 of [RFC6145].  Specifically,\
    \ when the EAM\n   algorithm is applied, it supplants the requirement in [RFC6145]\
    \ that\n   states that a translator operating in the stateless mode must\n   translate\
    \ the Source Address and Destination Address IP header fields\n   according to\
    \ Section 2.3 of [RFC6052].\n"
- title: 3.1.  Explicit Address Mapping Table
  contents:
  - "3.1.  Explicit Address Mapping Table\n   An SIIT implementation includes an EAMT,\
    \ a conceptual table in which\n   each row represents an EAM.  Each EAM describes\
    \ a mapping between\n   IPv4 and IPv6 prefixes/addresses.  An operator populates\
    \ the EAMT to\n   provide the mappings between the two address families.\n   The\
    \ EAMT consists of the following columns:\n   o  IPv4 Prefix\n   o  IPv6 Prefix\n\
    \   SIIT implementations MAY include other columns in order to support\n   proprietary\
    \ extensions to the EAM algorithm.\n   Throughout this document, figures representing\
    \ the EAMT contain an\n   Index column using the pound sign as the header.  This\
    \ column is not\n   a required part of this specification; it is included only\
    \ as a\n   convenience to the reader.\n"
- title: 3.2.  Explicit Address Mapping Specification
  contents:
  - "3.2.  Explicit Address Mapping Specification\n   An EAM consists of an IPv4 prefix\
    \ and an IPv6 prefix.  The prefix\n   length MAY be omitted, in which case the\
    \ implementation MUST assume\n   it to be 32 for IPv4 and 128 for IPv6.  Figure\
    \ 1 illustrates an EAMT\n   containing examples of valid EAMs.\n             \
    \  +---+----------------+----------------------+\n               | # |  IPv4 Prefix\
    \   |     IPv6 Prefix      |\n               +---+----------------+----------------------+\n\
    \               | 1 | 192.0.2.1      | 2001:db8:aaaa::      |\n              \
    \ | 2 | 192.0.2.2/32   | 2001:db8:bbbb::b/128 |\n               | 3 | 192.0.2.16/28\
    \  | 2001:db8:cccc::/124  |\n               | 4 | 192.0.2.128/26 | 2001:db8:dddd::/64\
    \   |\n               | 5 | 192.0.2.192/29 | 2001:db8:eeee:8::/62 |\n        \
    \       | 6 | 192.0.2.224/31 | 64:ff9b::/127        |\n               +---+----------------+----------------------+\n\
    \                          Figure 1: Example EAMT\n   An EAM's IPv4 prefix value\
    \ MUST have an identical or smaller number\n   of suffix bits than its corresponding\
    \ IPv6 prefix value.\n   Unless otherwise specified in Section 4, an SIIT implementation\
    \ MUST\n   individually translate each IP address it encounters in the packet's\n\
    \   IP headers (including any IP headers contained within ICMP errors)\n   according\
    \ to Section 3.3.\n"
- title: 3.3.  IP Address Translation Procedure
  contents:
  - "3.3.  IP Address Translation Procedure\n   This section describes step by step\
    \ how an SIIT implementation\n   translates addresses between IPv4 and IPv6. \
    \ Only the outcome of the\n   algorithm described should be considered normative,\
    \ that is, an SIIT\n   implementation may implement the exact procedure differently\
    \ than\n   what is described here, but the outcome of the algorithm MUST be the\n\
    \   same.\n   For concrete examples of IP address translations, refer to\n   Appendix\
    \ B.\n"
- title: '3.3.1.  Address Translation Steps: IPv4 to IPv6'
  contents:
  - "3.3.1.  Address Translation Steps: IPv4 to IPv6\n   1.  The IPv4 prefix column\
    \ of the EAMT is searched for the EAM entry\n       that shares the longest common\
    \ prefix with the IPv4 address being\n       translated.  The IPv4 prefix and\
    \ IPv6 prefix values of the EAM\n       entry found is from now on referred to\
    \ as EAM4 and EAM6,\n       respectively.\n   2.  If no matching EAM entry is\
    \ found, the EAM algorithm is aborted.\n       The SIIT implementation MUST proceed\
    \ to translate the address in\n       accordance with [RFC6145] (and its updates).\n\
    \   3.  The prefix bits of EAM4 are removed from the IPv4 address being\n    \
    \   translated.  The remaining suffix bits from the IPv4 address\n       being\
    \ translated are stored in a temporary buffer.\n   4.  The prefix bits of EAM6\
    \ are prepended to the temporary buffer.\n   5.  If the temporary buffer at this\
    \ point does not contain a 128-bit\n       value, it is padded with trailing zeros\
    \ so that it reaches a\n       length of 128 bits.\n   6.  The contents of the\
    \ temporary buffer is the translated IPv6\n       address.\n"
- title: '3.3.2.  Address Translation Steps: IPv6 to IPv4'
  contents:
  - "3.3.2.  Address Translation Steps: IPv6 to IPv4\n   1.  The IPv6 prefix column\
    \ of the EAMT is searched for the EAM entry\n       that shares the longest common\
    \ prefix with the IPv6 address being\n       translated.  The IPv4 prefix and\
    \ IPv6 prefix values of the EAM\n       entry found is from now on referred to\
    \ as EAM4 and EAM6,\n       respectively.\n   2.  If no matching EAM entry is\
    \ found, the EAM algorithm is aborted.\n       The SIIT implementation MUST proceed\
    \ to translate the address in\n       accordance with [RFC6145] (and its updates).\n\
    \   3.  The prefix bits of EAM6 are removed from the IPv6 address being\n    \
    \   translated.  The remaining suffix bits from the IPv6 address\n       being\
    \ translated are stored in a temporary buffer.\n   4.  The prefix bits of EAM4\
    \ are prepended to the temporary buffer.\n   5.  If the temporary buffer at this\
    \ point does not contain a 32-bit\n       value, any trailing bits are discarded\
    \ so that the buffer is\n       reduced to a length of 32 bits.\n   6.  The contents\
    \ of the temporary buffer is the translated IPv4\n       address.\n"
- title: 4.  Hairpinning of IPv6 Traffic
  contents:
  - '4.  Hairpinning of IPv6 Traffic

    '
- title: 4.1.  Problem Statement
  contents:
  - "4.1.  Problem Statement\n   Two IPv6 nodes that are both covered by EAMs might\
    \ in certain\n   circumstances attempt to communicate through a stateless translator\n\
    \   rather than using native IPv6 directly.  This happens if one of the\n   nodes\
    \ initiates traffic towards the IPv4-converted IPv6 address whose\n   embedded\
    \ IPv4 address matches an EAM that covers the other node.\n   Special consideration\
    \ is required in order to make this communication\n   pattern work in a bidirectional\
    \ fashion.  This is illustrated by the\n   example below.\n   Assume that a stateless\
    \ translator is configured with a translation\n   prefix of 64:ff9b::/96 (per\
    \ [RFC6052]) and the EAMT shown in\n   Figure 1.  The IPv6 node 2001:db8:aaaa::\
    \ transmits an IPv6 packet\n   towards 64:ff9b::192.0.2.2, which reaches the translator\
    \ and is\n   translated into an IPv4 packet with source address 192.0.2.1 and\n\
    \   destination address 192.0.2.2.  This destination address is found in\n   the\
    \ EAMT, so the packet loops back into the translation function and\n   is translated\
    \ back to an IPv6 packet with source address\n   2001:db8:aaaa:: and destination\
    \ address 2001:db8:bbbb::b.\n   While this packet will reach its destination just\
    \ fine, a problem\n   will occur when 2001:db8:bbbb::b responds to it.  The response\
    \ packet\n   will have a source address of 2001:db8:bbbb::b and a destination\n\
    \   address of 2001:db8:aaaa:: and will be routed directly to its\n   destination\
    \ without being subjected to any form of translation.\n   Because the source address\
    \ of this response packet (2001:db8:bbbb::b)\n   is not equal to the destination\
    \ address of the initial outgoing\n   packet (64:ff9b::192.0.2.2), the packet\
    \ will most likely be discarded\n   by 2001:db8:aaaa::, and bidirectional communication\
    \ will most likely\n   fail.\n   The above scenario could be made to work by ensuring\
    \ that the\n   stateless translator is hairpinning the traffic in both directions.\n\
    \   Section 4.2 describes how this is accomplished.  The resulting\n   address\
    \ translations are demonstrated step by step in Appendix B.1.\n"
- title: 4.2.  Recommendation
  contents:
  - "4.2.  Recommendation\n   An SIIT implementation SHOULD include a feature that\
    \ ensures that\n   hairpinned IPv6 traffic is supported.  The feature SHOULD be\
    \ enabled\n   by default.  The following two subsections describe two alternate\n\
    \   ways to implement this feature.  An implementation MAY support both\n   approaches.\n"
- title: 4.2.1.  Simple Hairpinning Support
  contents:
  - "4.2.1.  Simple Hairpinning Support\n   When the simple hairpinning feature is\
    \ enabled, the translator\n   employs the following rules when translating from\
    \ IPv4 to IPv6:\n   1.  If the packet is not an ICMPv4 error: The EAM algorithm\
    \ MUST NOT\n       be used in order to translate the source address in the IPv4\n\
    \       header.\n   2.  If the packet is an ICMPv4 error: The EAM algorithm MUST\
    \ NOT be\n       used when translating the destination address in the inner IPv4\n\
    \       header.\n   3.  If the packet is an ICMPv4 error whose outer IPv4 source\
    \ address\n       is equal to its inner IPv4 destination address: The EAM algorithm\n\
    \       MUST NOT be used in order to translate the source address in the\n   \
    \    outer IPv4 header.\n   Rules #2 and #3 are cumulative.\n   The addresses\
    \ in question MUST instead be translated according to\n   [RFC6145], as if they\
    \ did not match any EAM.\n"
- title: 4.2.2.  Intrinsic Hairpinning Support
  contents:
  - "4.2.2.  Intrinsic Hairpinning Support\n   When the intrinsic hairpinning feature\
    \ is enabled, the translator\n   employs the following rules after having translated\
    \ an IPv6 packet to\n   IPv4:\n   If all the conditions in either of the two sets\
    \ below are true, the\n   packet is to be hairpinned.  The implementation MUST\
    \ immediately\n   (i.e., prior to forwarding it to the IPv4 network) translate\
    \ the\n   packet back to IPv6.  During the second translation pass, the\n   behavior\
    \ specified in Section 4.2.1 MUST be applied, and the Hop\n   Limit field SHOULD\
    \ NOT be decremented.\n   Condition set A:\n      A1.  The packet is not an ICMPv4\
    \ error.\n      A2.  The destination address was translated using the algorithm\
    \ in\n           [RFC6052].\n      A3.  The destination address is found in the\
    \ EAMT.\n   Condition set B:\n      B1.  The packet is an ICMPv4 error.\n    \
    \  B2.  The inner source address was translated using the algorithm\n        \
    \   in [RFC6052].\n      B3.  The inner source address is found in the EAMT.\n"
- title: 5.  Overlapping Explicit Address Mappings
  contents:
  - "5.  Overlapping Explicit Address Mappings\n   The algorithm specified in Section\
    \ 3 relies on making a lookup in the\n   EAMT in order to find the EAM entry that\
    \ shares the longest common\n   prefix with the address being translated.  Operators\
    \ should note that\n   configuring EAMs with overlapping or identical IPv4 or\
    \ IPv6 prefixes\n   in the EAMT may create configurations where the IPv4-to-IPv6\
    \ and\n   IPv6-to-IPv4 address translations will not be symmetric.  This may in\n\
    \   some cases make bidirectional communication impossible.\n   EAM #1 in the\
    \ example EAMT (Figure 2) could be thought of as\n   implementing IVI (Appendix\
    \ A.2), while EAM #2 introduces a single\n   exception in the style of SIIT-DC\
    \ (Appendix A.3).  The IPv4 prefixes\n   of the two EAMs overlap, while the IPv6\
    \ prefixes do not.  This\n   results in a situation where the IPv6 address\n \
    \  2001:db8:ffc6:3364:4000:: will be translated (according to EAM #1) to\n   the\
    \ IPv4 address 198.51.100.64.  However, when this IPv4 address is\n   translated\
    \ back to IPv6, it will be translated (according to EAM #2)\n   to the IPv6 address\
    \ 2001:db8::abcd.  Because the IPv4-to-IPv6\n   translation in this example does\
    \ not mirror the corresponding IPv6-\n   to-IPv4 translation, bidirectional communication\
    \ involving the IPv6\n   address 2001:db8:ffc6:3364:4000:: might fail.  In order\
    \ to help avoid\n   such situations, implementations MAY warn the operator when\
    \ a new EAM\n   that overlaps with a previously existing one is inserted into\
    \ the\n   EAMT.\n               +---+------------------+--------------------+\n\
    \               | # |   IPv4 Prefix    |    IPv6 Prefix     |\n              \
    \ +---+------------------+--------------------+\n               | 1 | 0.0.0.0/0\
    \        | 2001:db8:ff00::/40 |\n               | 2 | 198.51.100.64/32 | 2001:db8::abcd/128\
    \ |\n               +---+------------------+--------------------+\n          \
    \  Figure 2: EAMT Containing Overlapping IPv4 Prefixes\n   In Figure 3, the IPv6\
    \ prefixes of the two EAMs are identical.  The\n   behavior of the stateless translator\
    \ when translating an IPv6 packet\n   that contains the address 2001:db8::1 to\
    \ IPv4 is in this case\n   unspecified.  In order to prevent this situation from\
    \ occurring,\n   implementations MAY refuse to insert a new EAM, whose IPv4 or\
    \ IPv6\n   prefix value is identical to that of an already existing EAM, into\n\
    \   the EAMT.\n                 +---+-----------------+-----------------+\n  \
    \               | # |   IPv4 Prefix   |   IPv6 Prefix   |\n                 +---+-----------------+-----------------+\n\
    \                 | 1 | 198.51.100.8/32 | 2001:db8::1/128 |\n                \
    \ | 2 | 198.51.100.9/32 | 2001:db8::1/128 |\n                 +---+-----------------+-----------------+\n\
    \             Figure 3: EAMT Containing Identical IPv6 Prefixes\n"
- title: 6.  Lack of Checksum Neutrality
  contents:
  - "6.  Lack of Checksum Neutrality\n   When one or both of the address fields in\
    \ an IP/ICMP packet are\n   translated according to the EAM algorithm, the translation\
    \ cannot be\n   relied upon to be checksum neutral, even if the well-known prefix\n\
    \   64:ff9b::/96 is used.  This consideration is discussed in more detail\n  \
    \ in Section 4.1 of [RFC6052].\n"
- title: 7.  Security Considerations
  contents:
  - "7.  Security Considerations\n   The EAM algorithm does not introduce any new\
    \ security issues beyond\n   those that are already discussed in Section 7 of\
    \ [RFC6145].\n"
- title: 8.  References
  contents:
  - '8.  References

    '
- title: 8.1.  Normative References
  contents:
  - "8.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use in\
    \ RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119,\n  \
    \            DOI 10.17487/RFC2119, March 1997,\n              <http://www.rfc-editor.org/info/rfc2119>.\n\
    \   [RFC6052]  Bao, C., Huitema, C., Bagnulo, M., Boucadair, M., and X.\n    \
    \          Li, \"IPv6 Addressing of IPv4/IPv6 Translators\", RFC 6052,\n     \
    \         DOI 10.17487/RFC6052, October 2010,\n              <http://www.rfc-editor.org/info/rfc6052>.\n\
    \   [RFC6145]  Li, X., Bao, C., and F. Baker, \"IP/ICMP Translation\n        \
    \      Algorithm\", RFC 6145, DOI 10.17487/RFC6145, April 2011,\n            \
    \  <http://www.rfc-editor.org/info/rfc6145>.\n"
- title: 8.2.  Informative References
  contents:
  - "8.2.  Informative References\n   [RFC4213]  Nordmark, E. and R. Gilligan, \"\
    Basic Transition Mechanisms\n              for IPv6 Hosts and Routers\", RFC 4213,\n\
    \              DOI 10.17487/RFC4213, October 2005,\n              <http://www.rfc-editor.org/info/rfc4213>.\n\
    \   [RFC4862]  Thomson, S., Narten, T., and T. Jinmei, \"IPv6 Stateless\n    \
    \          Address Autoconfiguration\", RFC 4862,\n              DOI 10.17487/RFC4862,\
    \ September 2007,\n              <http://www.rfc-editor.org/info/rfc4862>.\n \
    \  [RFC6144]  Baker, F., Li, X., Bao, C., and K. Yin, \"Framework for\n      \
    \        IPv4/IPv6 Translation\", RFC 6144, DOI 10.17487/RFC6144,\n          \
    \    April 2011, <http://www.rfc-editor.org/info/rfc6144>.\n   [RFC6219]  Li,\
    \ X., Bao, C., Chen, M., Zhang, H., and J. Wu, \"The\n              China Education\
    \ and Research Network (CERNET) IVI\n              Translation Design and Deployment\
    \ for the IPv4/IPv6\n              Coexistence and Transition\", RFC 6219,\n \
    \             DOI 10.17487/RFC6219, May 2011,\n              <http://www.rfc-editor.org/info/rfc6219>.\n\
    \   [RFC6724]  Thaler, D., Ed., Draves, R., Matsumoto, A., and T. Chown,\n   \
    \           \"Default Address Selection for Internet Protocol Version 6\n    \
    \          (IPv6)\", RFC 6724, DOI 10.17487/RFC6724, September 2012,\n       \
    \       <http://www.rfc-editor.org/info/rfc6724>.\n   [RFC6791]  Li, X., Bao,\
    \ C., Wing, D., Vaithianathan, R., and G.\n              Huston, \"Stateless Source\
    \ Address Mapping for ICMPv6\n              Packets\", RFC 6791, DOI 10.17487/RFC6791,\
    \ November 2012,\n              <http://www.rfc-editor.org/info/rfc6791>.\n  \
    \ [RFC6877]  Mawatari, M., Kawashima, M., and C. Byrne, \"464XLAT:\n         \
    \     Combination of Stateful and Stateless Translation\",\n              RFC\
    \ 6877, DOI 10.17487/RFC6877, April 2013,\n              <http://www.rfc-editor.org/info/rfc6877>.\n\
    \   [RFC7335]  Byrne, C., \"IPv4 Service Continuity Prefix\", RFC 7335,\n    \
    \          DOI 10.17487/RFC7335, August 2014,\n              <http://www.rfc-editor.org/info/rfc7335>.\n\
    \   [RFC7755]  Anderson, T., \"SIIT-DC: Stateless IP/ICMP Translation for\n  \
    \            IPv6 Data Center Environments\", RFC 7755,\n              DOI 10.17487/RFC7755,\
    \ February 2016,\n              <http://www.rfc-editor.org/info/rfc7755>.\n"
- title: Appendix A.  Use Cases
  contents:
  - "Appendix A.  Use Cases\n   The following subsections describe some use cases\
    \ that at the time of\n   writing leverage SIIT with the EAM algorithm.\n"
- title: A.1.  464XLAT
  contents:
  - "A.1.  464XLAT\n   When the customer-side translator (CLAT) component in the 464XLAT\n\
    \   [RFC6877] architecture does not have a dedicated IPv6 prefix\n   assigned,\
    \ it may instead use \"one interface IPv6 address that is\n   claimed by the CLAT.\"\
    \  This IPv6 address might not be\n   IPv4-translatable.  If this is the case,\
    \ the CLAT essentially\n   implements the EAM algorithm using an EAMT as follows\
    \ (assuming the\n   CLAT's IPv4 address is picked from the IPv4 Service Continuity\
    \ Prefix\n   [RFC7335]):\n           +---+--------------+-------------------------------+\n\
    \           | # | IPv4 Prefix  |          IPv6 Prefix          |\n           +---+--------------+-------------------------------+\n\
    \           | 1 | 192.0.0.1/32 | CLAT_claimed_IPv6_address/128 |\n           +---+--------------+-------------------------------+\n\
    \                 Figure 4: Example EAMT for a 464XLAT CLAT\n   In this particular\
    \ use case, the EAM algorithm is used to translate\n   IPv6 destination addresses\
    \ to IPv4, and conversely, IPv4 source\n   addresses to IPv6.  Other addresses\
    \ are translated using [RFC6052].\n"
- title: A.2.  IVI
  contents:
  - "A.2.  IVI\n   IVI [RFC6219] describes a stateless translation model that embeds\n\
    \   IPv4 addresses in a 40-bit translation prefix where bits 33-40 are\n   required\
    \ to be 1.  The embedded IPv4 address is located in bits 41-72\n   of the IPv6\
    \ address.  Bits 73-128 are required to be 0.\n   The location of the eight least\
    \ significant IPv4 address bits makes\n   the IVI address mapping differ from\
    \ [RFC6052].\n                 +---+-------------+--------------------+\n    \
    \             | # | IPv4 Prefix |    IPv6 Prefix     |\n                 +---+-------------+--------------------+\n\
    \                 | 1 | 0.0.0.0/0   | 2001:db8:ff00::/40 |\n                 +---+-------------+--------------------+\n\
    \                      Figure 5: Example EAMT for IVI\n   In this particular use\
    \ case, all addresses are translated according\n   to the EAM algorithm.  In other\
    \ words, [RFC6052] mapping is not used\n   at all.\n"
- title: A.3.  SIIT-DC
  contents:
  - "A.3.  SIIT-DC\n   SIIT-DC [RFC7755] describes the use of SIIT to facilitate\n\
    \   connectivity from the IPv4 Internet to services hosted in an\n   IPv6-only\
    \ data center.  In order to avoid the constraints relating to\n   the use of IPv4-translatable\
    \ IPv6 addresses discussed in Section 2,\n   the stateless IPv4/IPv6 translators\
    \ are provisioned with an EAMT\n   containing one entry per IPv6-only service\
    \ that are to be made\n   available from the IPv4 Internet, for example (assuming\n\
    \   2001:db8:aaaa::1 and 2001:db8:bbbb::1 are assigned to load balancers\n   or\
    \ servers that provide the IPv6-only services in question):\n               +---+----------------+----------------------+\n\
    \               | # |  IPv4 Prefix   |     IPv6 Prefix      |\n              \
    \ +---+----------------+----------------------+\n               | 1 | 203.0.113.1/32\
    \ | 2001:db8:aaaa::1/128 |\n               | 2 | 203.0.113.2/32 | 2001:db8:bbbb::1/128\
    \ |\n               +---+----------------+----------------------+\n          \
    \          Figure 6: Example EAMT for SIIT-DC\n   In this particular use case,\
    \ the EAM algorithm is used to translate\n   IPv4 destination addresses to IPv6,\
    \ and conversely, IPv6 source\n   addresses to IPv4.  Other addresses are translated\
    \ using [RFC6052].\n"
- title: Appendix B.  Example IP Address Translations
  contents:
  - "Appendix B.  Example IP Address Translations\n   Figure 7 demonstrates how a\
    \ set of example IP addresses are\n   translated given the example EAMT in Figure\
    \ 1.  Implementors may use\n   the examples given to develop test cases to validate\
    \ correct\n   operation.  Note that the address translations are bidirectional,\
    \ so\n   a single row in the table describes two address translations: IPv4 to\n\
    \   IPv6 and IPv6 to IPv4.\n   It is also assumed that the translation prefix\
    \ is configured to be\n   64:ff9b::/96 (per [RFC6052]).\n     +--------------+------------------------+-----------------------+\n\
    \     | IPv4 Address |      IPv6 Address      |        Comment        |\n    \
    \ +--------------+------------------------+-----------------------+\n     | 192.0.2.1\
    \    | 2001:db8:aaaa::        | According to EAM #1   |\n     | 192.0.2.2    |\
    \ 2001:db8:bbbb::b       | According to EAM #2   |\n     | 192.0.2.16   | 2001:db8:cccc::\
    \        | According to EAM #3   |\n     | 192.0.2.24   | 2001:db8:cccc::8   \
    \    | According to EAM #3   |\n     | 192.0.2.31   | 2001:db8:cccc::f       |\
    \ According to EAM #3   |\n     | 192.0.2.128  | 2001:db8:dddd::        | According\
    \ to EAM #4   |\n     | 192.0.2.152  | 2001:db8:dddd:0:6000:: | According to EAM\
    \ #4   |\n     | 192.0.2.183  | 2001:db8:dddd:0:dc00:: | According to EAM #4 \
    \  |\n     | 192.0.2.191  | 2001:db8:dddd:0:fc00:: | According to EAM #4   |\n\
    \     | 192.0.2.195  | 2001:db8:eeee:9:8000:: | According to EAM #5   |\n    \
    \ | 192.0.2.225  | 64:ff9b::1             | According to EAM #6   |\n     | 192.0.2.248\
    \  | 64:ff9b::c000:2f8      | According to RFC 6052 |\n     +--------------+------------------------+-----------------------+\n\
    \                 Figure 7: Example IP Address Translations\n"
- title: B.1.  Hairpinning Examples
  contents:
  - "B.1.  Hairpinning Examples\n   The following examples show how hairpinned IPv6\
    \ packets between the\n   IPv6 nodes 2001:db8:aaaa:: and 2001:db8:bbbb::b are\
    \ translated\n   according to Section 4.  As in Appendix B, the EAMT in Figure\
    \ 1 is\n   used, and the translation prefix is 64:ff9b::/96 (per [RFC6052]). \
    \ In\n   addition, the [RFC6791] pool is assumed to contain only the single\n\
    \   address 198.51.100.1.\n        +--------------+--------------------+---------------------+\n\
    \        |  XLAT Stage  |   Source Address   | Destination Address |\n       \
    \ +--------------+--------------------+---------------------+\n        | Initial\
    \      | 2001:db8:aaaa::    | 64:ff9b::192.0.2.2  |\n        +--------------+--------------------+---------------------+\n\
    \        | Intermediate | 192.0.2.1          | 192.0.2.2           |\n       \
    \ +--------------+--------------------+---------------------+\n        | Final\
    \        | 64:ff9b::192.0.2.1 | 2001:db8:bbbb::b    |\n        +--------------+--------------------+---------------------+\n\
    \               Figure 8: Hairpinning of a Normal IPv6 Packet\n   Figure 8 illustrates\
    \ how a normal (i.e., not an ICMP error) IPv6\n   packet sent from 2001:db8:aaaa::\
    \ towards 64:ff9b::192.0.2.2 is\n   hairpinned.  In this example, rule #1 in Section\
    \ 4.2.1 was applied in\n   order to disable the EAM algorithm when translating\
    \ the intermediate\n   IPv4 source address to IPv6.\n   +--------------+-------+-----------------------+--------------------+\n\
    \   |  XLAT Stage  | Loc.  |    Source Address     | Destination Addr.  |\n  \
    \ +--------------+-------+-----------------------+--------------------+\n   |\
    \ Initial      | Outer | 2001:db8::1234        | 64:ff9b::192.0.2.1 |\n   |  \
    \            | Inner | 64:ff9b::192.0.2.1    | 2001:db8:bbbb::b   |\n   +--------------+-------+-----------------------+--------------------+\n\
    \   | Intermediate | Outer | 198.51.100.1          | 192.0.2.1          |\n  \
    \ |              | Inner | 192.0.2.1             | 192.0.2.2          |\n   +--------------+-------+-----------------------+--------------------+\n\
    \   | Final        | Outer | 64:ff9b::198.51.100.1 | 2001:db8:aaaa::    |\n  \
    \ |              | Inner | 2001:db8:aaaa::       | 64:ff9b::192.0.2.2 |\n   +--------------+-------+-----------------------+--------------------+\n\
    \         Figure 9: Hairpinning of a Router-Originated ICMPv6 Error\n   Figure\
    \ 9 illustrates the hairpinning of an ICMPv6 error sent by an\n   arbitrary IPv6\
    \ router (2001:db8::1234) in response to the packet in\n   Figure 8.  In this\
    \ example, rule #2 in Section 4.2.1 was applied in\n   order to disable the EAM\
    \ algorithm when translating the intermediate\n   inner IPv4 destination address\
    \ to IPv6.\n    +--------------+-------+--------------------+--------------------+\n\
    \    |  XLAT Stage  | Loc.  |   Source Address   | Destination Addr.  |\n    +--------------+-------+--------------------+--------------------+\n\
    \    | Initial      | Outer | 2001:db8:bbbb::b   | 64:ff9b::192.0.2.1 |\n    |\
    \              | Inner | 64:ff9b::192.0.2.1 | 2001:db8:bbbb::b   |\n    +--------------+-------+--------------------+--------------------+\n\
    \    | Intermediate | Outer | 192.0.2.2          | 192.0.2.1          |\n    |\
    \              | Inner | 192.0.2.1          | 192.0.2.2          |\n    +--------------+-------+--------------------+--------------------+\n\
    \    | Final        | Outer | 64:ff9b::192.0.2.2 | 2001:db8:aaaa::    |\n    |\
    \              | Inner | 2001:db8:aaaa::    | 64:ff9b::192.0.2.2 |\n    +--------------+-------+--------------------+--------------------+\n\
    \         Figure 10: Hairpinning of a Host-Originated ICMPv6 Error\n   Figure\
    \ 10 illustrates the hairpinning of an ICMPv6 error sent by the\n   original destination\
    \ host itself in response to the packet in\n   Figure 8.  In this example, rules\
    \ #2 and #3 in Section 4.2.1 were\n   both applied in order to disable the EAM\
    \ algorithm when translating\n   the intermediate inner IPv4 destination address\
    \ and the intermediate\n   outer IPv4 source address to IPv6.\n        +--------------+--------------------+---------------------+\n\
    \        |  XLAT Stage  |   Source Address   | Destination Address |\n       \
    \ +--------------+--------------------+---------------------+\n        | Initial\
    \      | 2001:db8:bbbb::b   | 64:ff9b::192.0.2.1  |\n        +--------------+--------------------+---------------------+\n\
    \        | Intermediate | 192.0.2.2          | 192.0.2.1           |\n       \
    \ +--------------+--------------------+---------------------+\n        | Final\
    \        | 64:ff9b::192.0.2.2 | 2001:db8:aaaa::     |\n        +--------------+--------------------+---------------------+\n\
    \             Figure 11: Hairpinning of Normal Response Packet\n   Figure 11 illustrates\
    \ how the response from 2001:db8:bbbb::b to the\n   packet in Figure 8 is hairpinned\
    \ in the exact same fashion as the\n   initial packet.  Again, rule #1 in Section\
    \ 4.2.1 was applied in order\n   to disable the EAM algorithm when translating\
    \ the intermediate IPv4\n   source address to IPv6.  The example is included in\
    \ order to\n   illustrate how the addresses in the packet initially sent by\n\
    \   2001:db8:aaaa:: match those in the translated response packet sent by\n  \
    \ 2001:db8:bbbb::b, thus facilitating bidirectional communication.\n"
- title: Acknowledgements
  contents:
  - "Acknowledgements\n   This document was conceived due to comments made by Dave\
    \ Thaler in\n   the V6OPS session at IETF 91 as well as email discussions between\n\
    \   Fred Baker and the authors.\n   Valuable reviews, suggestions, and other feedback\
    \ was given by Fred\n   Baker, Mohamed Boucadair, Cameron Byrne, Brian E.  Carpenter,\
    \ Brian\n   Haberman, Ray Hunter, Alvaro Retana, Michael Richardson, Dan\n   Romascanu,\
    \ Hemant Singh, and Andrew Yourtchenko.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Tore Anderson\n   Redpill Linpro\n   Vitaminveien 1A\n\
    \   0485 Oslo\n   Norway\n   Phone: +47 959 31 212\n   Email: tore@redpill-linpro.com\n\
    \   URI:   http://www.redpill-linpro.com\n   Alberto Leiva Popper\n   NIC Mexico\n\
    \   Av. Eugenio Garza Sada 427 L4-6\n   Monterrey, Nuevo Leon  64840\n   Mexico\n\
    \   Email: ydahhrk@gmail.com\n   URI:   http://www.nicmexico.mx/\n"
