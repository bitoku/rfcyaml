- title: __initial_text__
  contents:
  - '                        Duplicating RTP Streams

    '
- title: Abstract
  contents:
  - "Abstract\n   Packet loss is undesirable for real-time multimedia sessions but\
    \ can\n   occur due to a variety of reasons including unplanned network\n   outages.\
    \  In unicast transmissions, recovering from such an outage\n   can be difficult\
    \ depending on the outage duration, due to the\n   potentially large number of\
    \ missing packets.  In multicast\n   transmissions, recovery is even more challenging\
    \ as many receivers\n   could be impacted by the outage.  For this challenge,\
    \ one solution\n   that does not incur unbounded delay is to duplicate the packets\
    \ and\n   send them in separate redundant streams, provided that the underlying\n\
    \   network satisfies certain requirements.  This document explains how\n   Real-time\
    \ Transport Protocol (RTP) streams can be duplicated without\n   breaking RTP\
    \ or RTP Control Protocol (RTCP) rules.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This\
    \ document is a product of the Internet Engineering Task Force\n   (IETF).  It\
    \ represents the consensus of the IETF community.  It has\n   received public\
    \ review and has been approved for publication by the\n   Internet Engineering\
    \ Steering Group (IESG).  Further information on\n   Internet Standards is available\
    \ in Section 2 of RFC 5741.\n   Information about the current status of this document,\
    \ any errata,\n   and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc7198.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2014 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction  . . . . . . . . . . . . . . . . . . .\
    \ . . . . .   3\n   2.  Terminology and Requirements Notation . . . . . . . .\
    \ . . . .   4\n   3.  Use Cases for Dual Streaming  . . . . . . . . . . . . .\
    \ . . .   4\n     3.1.  Temporal Redundancy . . . . . . . . . . . . . . . . .\
    \ . .   4\n     3.2.  Spatial Redundancy  . . . . . . . . . . . . . . . . . .\
    \ .   5\n     3.3.  Dual Streaming over a Single Path or Multiple Paths . . .\
    \   5\n     3.4.  Requirements  . . . . . . . . . . . . . . . . . . . . . .  \
    \ 6\n   4.  Use of RTP and RTCP with Temporal Redundancy  . . . . . . . .   7\n\
    \     4.1.  RTCP Considerations . . . . . . . . . . . . . . . . . . .   7\n  \
    \   4.2.  Signaling Considerations  . . . . . . . . . . . . . . . .   7\n   5.\
    \  Use of RTP and RTCP with Spatial Redundancy . . . . . . . . .   8\n     5.1.\
    \  RTCP Considerations . . . . . . . . . . . . . . . . . . .   9\n     5.2.  Signaling\
    \ Considerations  . . . . . . . . . . . . . . . .   9\n   6.  Use of RTP and RTCP\
    \ with Temporal and Spatial Redundancy  . .  10\n   7.  Congestion Control Considerations\
    \ . . . . . . . . . . . . . .  10\n   8.  Security Considerations . . . . . .\
    \ . . . . . . . . . . . . .  11\n   9.  Acknowledgments . . . . . . . . . . .\
    \ . . . . . . . . . . . .  11\n   10. References  . . . . . . . . . . . . . .\
    \ . . . . . . . . . . .  12\n     10.1.  Normative References . . . . . . . .\
    \ . . . . . . . . . .  12\n     10.2.  Informative References . . . . . . . .\
    \ . . . . . . . . .  12\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   The Real-time Transport Protocol (RTP) [RFC3550] is widely\
    \ used today\n   for delivering IPTV traffic and other real-time multimedia sessions.\n\
    \   Many of these applications support very large numbers of receivers\n   and\
    \ rely on intra-domain UDP/IP multicast for efficient distribution\n   of traffic\
    \ within the network.\n   While this combination has proved successful, there\
    \ does exist a\n   weakness.  As [RFC2354] noted, packet loss is not avoidable.\
    \  This\n   loss might be due to congestion; it might also be a result of an\n\
    \   unplanned outage caused by a flapping link, a link or interface\n   failure,\
    \ a software bug, or a maintenance person accidentally cutting\n   the wrong fiber.\
    \  Since UDP/IP flows do not provide any means for\n   detecting loss and retransmitting\
    \ packets, it is left up to the RTP\n   layer and the applications to detect,\
    \ and recover from, packet loss.\n   In a carefully managed network, congestion\
    \ should not normally\n   happen; however, network outages can still happen due\
    \ to the reasons\n   listed above.  In such a managed network, one technique to\
    \ recover\n   from packet loss without incurring unbounded delay is to duplicate\n\
    \   the packets and send them in separate redundant streams.  As\n   described\
    \ later in this document, the probability that two copies of\n   the same packet\
    \ are lost in cases of non-congestive packet loss is\n   quite small.\n   Variations\
    \ on this idea have been implemented and deployed today\n   [IC2011].  However,\
    \ duplication of RTP streams without breaking the\n   RTP and RTCP functionality\
    \ has not been documented properly.  This\n   document discusses the most common\
    \ use cases and explains how\n   duplication can be achieved for RTP streams in\
    \ such use cases to\n   address the immediate market needs.  In the future, if\
    \ there will be\n   a different use case that is not covered by this document,\
    \ a new\n   specification that explains how RTP duplication should be done in\n\
    \   such a scenario may be needed.\n   Stream duplication offers a simple way\
    \ to protect media flows from\n   packet loss.  It has a comparatively high overhead\
    \ in terms of\n   bandwidth, since everything is sent twice, but with a low overhead\
    \ in\n   terms of processing.  It is also very predictable in its overheads.\n\
    \   Alternative approaches, for example, retransmission-based recovery\n   [RFC4588]\
    \ or Forward Error Correction [RFC6363], may be suitable in\n   some other cases.\n"
- title: 2.  Terminology and Requirements Notation
  contents:
  - "2.  Terminology and Requirements Notation\n   The key words \"MUST\", \"MUST\
    \ NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\"\
    , \"RECOMMENDED\", \"NOT RECOMMENDED\", \"MAY\", and\n   \"OPTIONAL\" in this\
    \ document are to be interpreted as described in\n   [RFC2119].\n"
- title: 3.  Use Cases for Dual Streaming
  contents:
  - "3.  Use Cases for Dual Streaming\n   Dual streaming refers to a technique that\
    \ involves transmitting two\n   redundant RTP streams (the original plus its duplicate)\
    \ of the same\n   content, with each stream capable of supporting the playback\
    \ when\n   there is no packet loss.  Therefore, adding an additional RTP stream\n\
    \   provides a protection against packet loss.  The level of protection\n   depends\
    \ on how the packets are sent and transmitted inside the\n   network.\n   It is\
    \ important to note that dual streaming can easily be extended to\n   support\
    \ cases when more than two streams are desired.  However, using\n   three or more\
    \ streams is rare in practice, due to the high overhead\n   that it incurs and\
    \ the little additional protection it provides.\n"
- title: 3.1.  Temporal Redundancy
  contents:
  - "3.1.  Temporal Redundancy\n   From a routing perspective, two streams are considered\
    \ identical if\n   the following two IP header fields are the same (in addition\
    \ to the\n   transport ports), since they will be both routed over the same path:\n\
    \   o  IP Source Address\n   o  IP Destination Address\n   Two routing-plane identical\
    \ RTP streams might carry the same payload\n   but can use different Synchronization\
    \ Sources (SSRCs) to\n   differentiate the RTP packets belonging to each stream.\
    \  In the\n   context of dual RTP streaming, we assume that the sender duplicates\n\
    \   the RTP packets and sends them in separate RTP streams, each with a\n   unique\
    \ SSRC.  All the redundant streams are transmitted in the same\n   RTP session.\n\
    \   For example, one main stream and its duplicate stream can be sent to\n   the\
    \ same IP destination address and UDP destination port with a\n   certain delay\
    \ between them [RFC7197].  The streams carry the same\n   payload in their respective\
    \ RTP packets with identical sequence\n   numbers.  This allows receivers (or\
    \ other nodes responsible for gap\n   filling and duplicate suppression) to identify\
    \ and suppress the\n   duplicate packets, and subsequently produce a hopefully\
    \ loss-free and\n   duplication-free output stream.  This process is commonly\
    \ called\n   \"stream merging\" or \"de-duplication\".\n"
- title: 3.2.  Spatial Redundancy
  contents:
  - "3.2.  Spatial Redundancy\n   An RTP source might be associated with multiple\
    \ network interfaces,\n   allowing it to send two redundant streams from two separate\
    \ source\n   addresses.  Such streams can be routed over diverse or identical\n\
    \   paths, depending on the routing algorithm used inside the network.\n   At\
    \ the receiving end, the node responsible for duplicate suppression\n   can look\
    \ into various RTP header fields, for example, SSRC and\n   sequence number, to\
    \ identify and suppress the duplicate packets.\n   If source-specific multicast\
    \ (SSM) transport is used to carry such\n   redundant streams, there will be a\
    \ separate SSM session for each\n   redundant stream since the streams are sourced\
    \ from different\n   interfaces (i.e., IP addresses).  Thus, the receiving host\
    \ has to\n   join each SSM session separately.\n   Alternatively, the destination\
    \ host could also have multiple IP\n   addresses for an RTP source to send the\
    \ redundant streams to.\n"
- title: 3.3.  Dual Streaming over a Single Path or Multiple Paths
  contents:
  - "3.3.  Dual Streaming over a Single Path or Multiple Paths\n   Having described\
    \ the characteristics of the streams, one can reach\n   the following conclusions:\n\
    \   1.  When two routing-plane identical streams are used, the flow\n       labels\
    \ will be the same.  This makes it impractical to forward\n       the packets\
    \ onto different paths.  In order to minimize packet\n       loss, the packets\
    \ belonging to one stream are often interleaved\n       with packets belonging\
    \ to its duplicate stream, and with a delay,\n       so that if there is a packet\
    \ loss, such a delay would allow the\n       same packet from the duplicate stream\
    \ to reach the receiver\n       because the chances that the same packet is lost\
    \ in transit again\n       are often small.  This is what is also known as \"\
    time-shifted\n       redundancy\", \"temporal redundancy\" or simply \"delayed\n\
    \       duplication\" [RFC7197] [IC2011].  This approach can be used with\n  \
    \     both types of dual streaming, described in Sections 3.1 and 3.2.\n   2.\
    \  If the two streams have different IP headers, an additional\n       opportunity\
    \ arises in that one is able to build a network, with\n       physically diverse\
    \ paths, to deliver the two streams concurrently\n       to the intended receivers.\
    \  This reduces the delay when packet\n       loss occurs and needs to be recovered.\
    \  Additionally, it also\n       further reduces chances for packet loss.  An\
    \ unrecoverable loss\n       happens only when two network failures happen in\
    \ such a way that\n       the same packet is affected on both paths.  This is\
    \ referred to\n       as Spatial Diversity or Spatial Redundancy [IC2011].  The\n\
    \       techniques used to build diverse paths are beyond the scope of\n     \
    \  this document.\n       Note that spatial redundancy often offers less delay\
    \ in\n       recovering from packet loss, provided that the forwarding delay\n\
    \       of the network paths are more or less the same.  (This is often\n    \
    \   ensured through careful network design.)  For both temporal and\n       spatial\
    \ redundancy approaches, packet misordering might still\n       happen and needs\
    \ to be handled using the sequence numbers of some\n       sort (e.g., RTP sequence\
    \ numbers).\n   Temporal and spatial redundancy deal with different patterns of\n\
    \   packet loss.  The former helps with transient loss (within the\n   duplication\
    \ window), while the latter helps with longer-term packet\n   loss that affects\
    \ only one of the two redundant paths.\n   To summarize, dual streaming allows\
    \ an application and a network to\n   work together to provide a near-zero-loss\
    \ transport with a bounded or\n   minimum delay.  The additional advantage includes\
    \ a predictable\n   bandwidth overhead that is proportional to the minimum bandwidth\n\
    \   needed for the multimedia session, but independent of the number of\n   receivers\
    \ experiencing a packet loss and requesting a retransmission.\n   For a survey\
    \ and comparison of similar approaches, refer to [IC2011].\n"
- title: 3.4.  Requirements
  contents:
  - "3.4.  Requirements\n   One of the following conditions is currently REQUIRED\
    \ to hold in\n   applications using this specification:\n   o  The original and\
    \ duplicate RTP streams are carried (with their own\n      SSRCs) in the same\
    \ \"m\" line.  (There could be other RTP streams\n      listed in the same \"\
    m\" line.)\n   o  The original and duplicate RTP streams are carried in separate\
    \ \"m\"\n      lines, and there is no other RTP stream listed in either \"m\"\
    \ line.\n   When the original and duplicate RTP streams are carried in separate\n\
    \   \"m\" lines in a Session Description Protocol (SDP) description and if\n \
    \  the SDP description has one or more other RTP streams listed in\n   either\
    \ \"m\" line, duplication grouping is not trivial and further\n   signaling will\
    \ be needed; this is left for future standardization.\n"
- title: 4.  Use of RTP and RTCP with Temporal Redundancy
  contents:
  - "4.  Use of RTP and RTCP with Temporal Redundancy\n   To achieve temporal redundancy,\
    \ the main and duplicate RTP streams\n   SHOULD be sent using the sample 5-tuple\
    \ of transport protocol, source\n   and destination IP addresses, and source and\
    \ destination transport\n   ports.  Due to the possible presence of network address\
    \ and port\n   translation (NAPT) devices, load balancers, or other middleboxes,\
    \ use\n   of anything other than an identical 5-tuple and flow label might also\n\
    \   cause spatial redundancy (which might introduce an additional delay\n   due\
    \ to the delta between the path delays), and so it is NOT\n   RECOMMENDED unless\
    \ the path is known to be free of such middleboxes.\n   Since the main and duplicate\
    \ RTP streams follow an identical path,\n   they are part of the same RTP session.\
    \  Accordingly, the sender MUST\n   choose a different SSRC for the duplicate\
    \ RTP stream than it chose\n   for the main RTP stream, following the rules in\
    \ Section 8 of\n   [RFC3550].\n"
- title: 4.1.  RTCP Considerations
  contents:
  - "4.1.  RTCP Considerations\n   If RTCP is being sent for the main RTP stream,\
    \ then the sender MUST\n   also generate RTCP for the duplicate RTP stream.  The\
    \ RTCP for the\n   duplicate RTP stream is generated exactly as if the duplicate\
    \ RTP\n   stream were a regular media stream.  The sender MUST NOT duplicate\n\
    \   the RTCP packets sent for the main RTP stream when sending the\n   duplicate\
    \ stream; instead, it MUST generate new RTCP reports for the\n   duplicate stream.\
    \  The sender MUST use the same RTCP CNAME in the\n   RTCP reports it sends for\
    \ both streams, so that the receiver can\n   synchronize them.\n   The main and\
    \ duplicate streams are conceptually synchronized using\n   the standard mechanism\
    \ based on RTCP Sender Reports, deriving a\n   mapping between their timelines.\
    \  However, the RTP timestamps and\n   sequence numbers MUST be identical in the\
    \ main and duplicate streams,\n   making the mapping quite trivial.\n   Both the\
    \ main and duplicate RTP streams, and their corresponding RTCP\n   reports, will\
    \ be received.  If RTCP is used, receivers MUST generate\n   RTCP reports for\
    \ both the main and duplicate streams in the usual\n   way, treating them as entirely\
    \ separate media streams.\n"
- title: 4.2.  Signaling Considerations
  contents:
  - "4.2.  Signaling Considerations\n   Signaling is needed to allow the receiver\
    \ to determine that an RTP\n   stream is a duplicate of another, rather than a\
    \ separate stream that\n   needs to be rendered in parallel.  There are two parts\
    \ to this: an\n   SDP extension is needed in the offer/answer exchange to negotiate\n\
    \   support for temporal redundancy; and signaling is needed to indicate\n   which\
    \ stream is the duplicate.  (The latter can be done in-band using\n   an RTCP\
    \ extension or out-of-band in the SDP description.)\n   Out-of-band signaling\
    \ is needed for both features.  The SDP attribute\n   to signal duplication in\
    \ the SDP offer/answer exchange ('duplication-\n   delay') is defined in [RFC7197].\
    \  The required SDP grouping semantics\n   are defined in [RFC7104].\n   In the\
    \ following SDP example, a video stream is duplicated, and the\n   main and duplicate\
    \ streams are transmitted in two separate SSRCs\n   (1000 and 1010):\n       \
    \ v=0\n        o=ali 1122334455 1122334466 IN IP4 dup.example.com\n        s=Delayed\
    \ Duplication\n        t=0 0\n        m=video 30000 RTP/AVP 100\n        c=IN\
    \ IP4 233.252.0.1/127\n        a=source-filter:incl IN IP4 233.252.0.1 198.51.100.1\n\
    \        a=rtpmap:100 MP2T/90000\n        a=ssrc:1000 cname:ch1a@example.com\n\
    \        a=ssrc:1010 cname:ch1a@example.com\n        a=ssrc-group:DUP 1000 1010\n\
    \        a=duplication-delay:50\n        a=mid:Ch1\n   Section 3.2 of [RFC7104]\
    \ states that it is advisable that the SSRC\n   listed first in the \"a=ssrc-group:\"\
    \ line (i.e., SSRC of 1000) is sent\n   first, with the other SSRC (i.e., SSRC\
    \ of 1010) being the time-\n   delayed duplicate.  This is not critical, however,\
    \ and a receiving\n   host should size its playout buffer based on the 'duplication-delay'\n\
    \   attribute and play the stream that arrives first in preference, with\n   the\
    \ other stream acting as a repair stream, irrespective of the order\n   in which\
    \ they are signaled.\n"
- title: 5.  Use of RTP and RTCP with Spatial Redundancy
  contents:
  - "5.  Use of RTP and RTCP with Spatial Redundancy\n   Assuming the network is structured\
    \ appropriately, when using spatial\n   redundancy, the duplicate RTP stream is\
    \ sent using a different source\n   and/or destination address/port pair.  This\
    \ will be a separate RTP\n   session from the session conveying the main RTP stream.\
    \  Thus, the\n   SSRCs used for the main and duplicate streams MUST be chosen\n\
    \   randomly, following the rules in Section 8 of [RFC3550].\n   Accordingly,\
    \ they will almost certainly not match each other.  The\n   sender MUST, however,\
    \ use the same RTCP CNAME for both the main and\n   duplicate streams.  An \"\
    a=group:DUP\" line or \"a=ssrc-group:DUP\" line\n   is used to indicate duplication.\n"
- title: 5.1.  RTCP Considerations
  contents:
  - "5.1.  RTCP Considerations\n   If RTCP is being sent for the main RTP stream,\
    \ then the sender MUST\n   also generate RTCP for the duplicate RTP stream.  The\
    \ RTCP for the\n   duplicate RTP stream is generated exactly as if the duplicate\
    \ RTP\n   stream were a regular media stream.  The sender MUST NOT duplicate\n\
    \   the RTCP packets sent for the main RTP stream when sending the\n   duplicate\
    \ stream; instead, it MUST generate new RTCP reports for the\n   duplicate stream.\
    \  The sender MUST use the same RTCP CNAME in the\n   RTCP reports it sends for\
    \ both streams, so that the receiver can\n   synchronize them.\n   The main and\
    \ duplicate streams are conceptually synchronized using\n   the standard mechanism\
    \ based on RTCP Sender Reports, deriving a\n   mapping between their timelines.\
    \  However, the RTP timestamps and\n   sequence numbers MUST be identical in the\
    \ main and duplicate streams,\n   making the mapping quite trivial.\n   Both the\
    \ main and duplicate RTP streams, and their corresponding RTCP\n   reports, will\
    \ be received.  If RTCP is used, receivers MUST generate\n   RTCP reports for\
    \ both the main and duplicate streams in the usual\n   way, treating them as entirely\
    \ separate media streams.\n"
- title: 5.2.  Signaling Considerations
  contents:
  - "5.2.  Signaling Considerations\n   The required SDP grouping semantics have been\
    \ defined in [RFC7104].\n   In the following example, the redundant streams have\
    \ different IP\n   destination addresses.  The example shows the same UDP port\
    \ number\n   and IP source address for each stream, but either or both could have\n\
    \   been different for the two streams.\n        v=0\n        o=ali 1122334455\
    \ 1122334466 IN IP4 dup.example.com\n        s=DUP Grouping Semantics\n      \
    \  t=0 0\n        a=group:DUP S1a S1b\n        m=video 30000 RTP/AVP 100\n   \
    \     c=IN IP4 233.252.0.1/127\n        a=source-filter:incl IN IP4 233.252.0.1\
    \ 198.51.100.1\n        a=rtpmap:100 MP2T/90000\n        a=mid:S1a\n        m=video\
    \ 30000 RTP/AVP 101\n        c=IN IP4 233.252.0.2/127\n        a=source-filter:incl\
    \ IN IP4 233.252.0.2 198.51.100.1\n        a=rtpmap:101 MP2T/90000\n        a=mid:S1b\n"
- title: 6.  Use of RTP and RTCP with Temporal and Spatial Redundancy
  contents:
  - "6.  Use of RTP and RTCP with Temporal and Spatial Redundancy\n   This uses the\
    \ same RTP/RTCP mechanisms from Sections 4 and 5, plus a\n   combination of signaling\
    \ provided in each of these sections.\n"
- title: 7.  Congestion Control Considerations
  contents:
  - "7.  Congestion Control Considerations\n   Duplicating RTP streams has several\
    \ considerations in the context of\n   congestion control.  First of all, RTP\
    \ duplication MUST NOT be used\n   in cases where the primary cause of packet\
    \ loss is congestion since\n   duplication can make congestion only worse.  Furthermore,\
    \ RTP\n   duplication SHOULD NOT be used where there is a risk of congestion\n\
    \   upon duplicating an RTP stream.  Duplication is RECOMMENDED only to\n   be\
    \ used for protection against network outages due to a temporary\n   link or network\
    \ element failure and where it is known (e.g., through\n   explicit operator configuration)\
    \ that there is sufficient network\n   capacity to carry the duplicated traffic.\
    \  The capacity requirement\n   constrains the use of duplication to managed networks\
    \ and makes it\n   unsuitable for use on unmanaged public networks.\n   It is\
    \ essential that the nodes responsible for the duplication and\n   de-duplication\
    \ are aware of the original stream's requirements and\n   the available capacity\
    \ inside the network.  If there is an adaptation\n   capability for the original\
    \ stream, these nodes have to assume the\n   same adaptation capability for the\
    \ duplicated stream, too.  For\n   example, if the source doubles the bitrate\
    \ for the original stream,\n   the bitrate of the duplicate stream will also be\
    \ doubled.\n   Depending on where de-duplication takes place, there could be\n\
    \   different scenarios.  When the duplication and de-duplication take\n   place\
    \ inside the network before the ultimate endpoints that will\n   consume the RTP\
    \ media, the whole process is transparent to these\n   endpoints.  Thus, these\
    \ endpoints will apply any congestion control,\n   if applicable, on the de-duplicated\
    \ RTP stream.  This output stream\n   will have fewer losses than either the original\
    \ or duplicated stream\n   will have, and the endpoint will make congestion control\
    \ decisions\n   accordingly.  However, if de-duplication takes place at the ultimate\n\
    \   endpoint, this endpoint MUST consider the aggregate of the original\n   and\
    \ duplicated RTP stream in any congestion control it wants to\n   apply.  The\
    \ endpoint will observe the losses in each stream\n   separately, and this information\
    \ can be used to fine-tune the\n   duplication process.  For example, the duplication\
    \ interval can be\n   adjusted based on the duration of a common packet loss in\
    \ both\n   streams.  In these scenarios, the RTP Monitoring Framework [RFC6792]\n\
    \   can be used to monitor the duplicated streams in the same way an\n   ordinary\
    \ RTP would be monitored.\n"
- title: 8.  Security Considerations
  contents:
  - "8.  Security Considerations\n   The security considerations of [RFC3550], [RFC7104],\
    \ [RFC7197], and\n   any RTP profiles and payload formats in use apply.\n   Duplication\
    \ can be performed end-to-end, with the media sender\n   generating a duplicate\
    \ RTP stream, and the receiver(s) performing de-\n   duplication.  In such cases,\
    \ if the original media stream is to be\n   authenticated (e.g., using Secure\
    \ RTP (SRTP) [RFC3711]), then the\n   duplicate stream also needs to be authenticated,\
    \ and duplicate\n   packets that fail the authentication check need to be discarded.\n\
    \   Stream duplication and de-duplication can also be performed by in-\n   network\
    \ middleboxes.  Such middleboxes will need to rewrite the RTP\n   SSRC such that\
    \ the RTP packets in the duplicate stream have a\n   different SSRC to the original\
    \ stream, and such middleboxes will need\n   to generate and respond to RTCP packets\
    \ corresponding to the\n   duplicate stream.  This sort of in-network duplication\
    \ service has\n   the potential to act as an amplifier for denial-of-service attacks\
    \ if\n   the attacker can cause attack traffic to be duplicated.  To prevent\n\
    \   this, middleboxes providing the duplication service need to\n   authenticate\
    \ the traffic to be duplicated as being from a legitimate\n   source, for example,\
    \ using the SRTP profile [RFC3711].  This requires\n   the middlebox to be part\
    \ of the security context of the media session\n   being duplicated, so it has\
    \ access to the necessary keying material\n   for authentication.  To do this,\
    \ the middlebox will need to be privy\n   to the session setup signaling.  Details\
    \ of how that is done will\n   depend on the type of signaling used (SIP, Real\
    \ Time Streaming\n   Protocol (RTSP), WebRTC, etc.), and is not specified here.\n\
    \   Similarly, to prevent packet injection attacks, a de-duplication\n   middlebox\
    \ needs to authenticate original and duplicate streams, and\n   ought not use\
    \ non-authenticated packets that are received.  Again,\n   this requires the middlebox\
    \ to be part of the security context and to\n   have access to the appropriate\
    \ signaling and keying material.\n   The use of the encryption features of SRTP\
    \ does not affect stream de-\n   duplication middleboxes, since the RTP headers\
    \ are sent in the clear.\n"
- title: 9.  Acknowledgments
  contents:
  - "9.  Acknowledgments\n   Thanks to Magnus Westerlund for his suggestions.\n"
- title: 10.  References
  contents:
  - '10.  References

    '
- title: 10.1.  Normative References
  contents:
  - "10.1.  Normative References\n   [RFC3550]  Schulzrinne, H., Casner, S., Frederick,\
    \ R., and V.\n              Jacobson, \"RTP: A Transport Protocol for Real-Time\n\
    \              Applications\", STD 64, RFC 3550, July 2003.\n   [RFC2119]  Bradner,\
    \ S., \"Key words for use in RFCs to Indicate\n              Requirement Levels\"\
    , BCP 14, RFC 2119, March 1997.\n   [RFC7197]  Begen, A., Cai, Y., and H. Ou,\
    \ \"Duplication Delay\n              Attribute in the Session Description Protocol\"\
    , RFC 7197,\n              April 2014.\n   [RFC7104]  Begen, A., Cai, Y., and\
    \ H. Ou, \"Duplication Grouping\n              Semantics in the Session Description\
    \ Protocol\", RFC 7104,\n              January 2014.\n   [RFC3711]  Baugher, M.,\
    \ McGrew, D., Naslund, M., Carrara, E., and K.\n              Norrman, \"The Secure\
    \ Real-time Transport Protocol (SRTP)\",\n              RFC 3711, March 2004.\n"
- title: 10.2.  Informative References
  contents:
  - "10.2.  Informative References\n   [RFC2354]  Perkins, C. and O. Hodson, \"Options\
    \ for Repair of\n              Streaming Media\", RFC 2354, June 1998.\n   [RFC4588]\
    \  Rey, J., Leon, D., Miyazaki, A., Varsa, V., and R.\n              Hakenberg,\
    \ \"RTP Retransmission Payload Format\", RFC 4588,\n              July 2006.\n\
    \   [RFC6363]  Watson, M., Begen, A., and V. Roca, \"Forward Error\n         \
    \     Correction (FEC) Framework\", RFC 6363, October 2011.\n   [RFC6792]  Wu,\
    \ Q., Hunt, G., and P. Arden, \"Guidelines for Use of the\n              RTP Monitoring\
    \ Framework\", RFC 6792, November 2012.\n   [IC2011]   Evans, J., Begen, A., Greengrass,\
    \ J., and C. Filsfils,\n              \"Toward Lossless Video Transport\", IEEE\
    \ Internet\n              Computing, Vol. 15, No. 6, pp. 48-57, November 2011.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Ali Begen\n   Cisco\n   181 Bay Street\n   Toronto, ON\
    \  M5J 2T3\n   Canada\n   EMail: abegen@cisco.com\n   Colin Perkins\n   University\
    \ of Glasgow\n   School of Computing Science\n   Glasgow  G12 8QQ\n   UK\n   EMail:\
    \ csp@csperkins.org\n   URI:   http://csperkins.org/\n"
