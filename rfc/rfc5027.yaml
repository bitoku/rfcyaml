- title: __initial_text__
  contents:
  - "                      Security Preconditions for\n           Session Description\
    \ Protocol (SDP) Media Streams\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Abstract
  contents:
  - "Abstract\n   This document defines a new security precondition for the Session\n\
    \   Description Protocol (SDP) precondition framework described in RFCs\n   3312\
    \ and 4032.  A security precondition can be used to delay session\n   establishment\
    \ or modification until media stream security for a\n   secure media stream has\
    \ been negotiated successfully.\n"
- title: Table of Contents
  contents:
  - 'Table of Contents

    '
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   The concept of a Session Description Protocol (SDP) [RFC4566]\n\
    \   precondition is defined in [RFC3312] as updated by [RFC4032].  A\n   precondition\
    \ is a condition that has to be satisfied for a given\n   media stream in order\
    \ for session establishment or modification to\n   proceed.  When a (mandatory)\
    \ precondition is not met, session\n   progress is delayed until the precondition\
    \ is satisfied or the\n   session establishment fails.  For example, RFC 3312\
    \ defines the\n   Quality-of-Service precondition, which is used to ensure availability\n\
    \   of network resources prior to establishing (i.e., alerting) a call.\n   Media\
    \ streams can either be provided in cleartext and with no\n   integrity protection,\
    \ or some kind of media security can be applied,\n   e.g., confidentiality and/or\
    \ message integrity.  For example, the\n   Audio/Video profile of the Real-Time\
    \ Transfer Protocol (RTP)\n   [RFC3551] is normally used without any security\
    \ services whereas the\n   Secure Real-time Transport Protocol (SRTP) [SRTP] is\
    \ always used with\n   security services.  When media stream security is being\
    \ negotiated,\n   e.g., using the mechanism defined in SDP Security Descriptions\n\
    \   [SDESC], both the offerer and the answerer [RFC3264] need to know the\n  \
    \ cryptographic parameters being used for the media stream; the offerer\n   may\
    \ provide multiple choices for the cryptographic parameters, or the\n   cryptographic\
    \ parameters selected by the answerer may differ from\n   those of the offerer\
    \ (e.g., the key used in one direction versus the\n   other).  In such cases,\
    \ to avoid media clipping, the offerer needs to\n   receive the answer prior to\
    \ receiving any media packets from the\n   answerer.  This can be achieved by\
    \ using a security precondition,\n   which ensures the successful negotiation\
    \ of media stream security\n   parameters for a secure media stream prior to session\
    \ establishment\n   or modification.\n"
- title: 2.  Notational Conventions
  contents:
  - "2.  Notational Conventions\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\"\
    , \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"\
    MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described\
    \ in [RFC2119].\n"
- title: 3.  Security Precondition Definition
  contents:
  - "3.  Security Precondition Definition\n   The semantics for a security precondition\
    \ are that the relevant\n   cryptographic parameters (cipher, key, etc.) for a\
    \ secure media\n   stream are known to have been negotiated in the direction(s)\n\
    \   required.  If the security precondition is used with a non-secure\n   media\
    \ stream, the security precondition is by definition satisfied.\n   A secure media\
    \ stream is here defined as a media stream that uses\n   some kind of security\
    \ service (e.g., message integrity,\n   confidentiality, or both), regardless\
    \ of the cryptographic strength\n   of the mechanisms being used.\n      As an\
    \ extreme example of this, Secure RTP (SRTP) using the NULL\n      encryption\
    \ algorithm and no message integrity would be considered\n      a secure media\
    \ stream whereas use of plain RTP would not.  Note\n      though, that Section\
    \ 9.5 of [SRTP] discourages the use of SRTP\n      without message integrity.\n\
    \   Security preconditions do not guarantee that an established media\n   stream\
    \ will be secure.  They merely guarantee that the recipient of\n   the media stream\
    \ packets will be able to perform any relevant\n   decryption and integrity checking\
    \ on those media stream packets.\n   Please refer to Section 5 for further security\
    \ considerations.\n   The security precondition type is defined by the string\
    \ \"sec\" and\n   hence we modify the grammar found in RFC 3312 as follows:\n\
    \      precondition-type  =  \"sec\" / \"qos\" / token\n   RFC 3312 defines support\
    \ for two kinds of status types, namely\n   segmented and end-to-end.  The security\
    \ precondition-type defined\n   here MUST be used with the end-to-end status type;\
    \ use of the\n   segmented status type is undefined.\n   A security precondition\
    \ can use the strength-tag \"mandatory\",\n   \"optional\", or \"none\".\n   When\
    \ a security precondition with a strength-tag of \"mandatory\" is\n   received\
    \ in an offer, session establishment or modification MUST be\n   delayed until\
    \ the security precondition has been met, i.e., the\n   relevant cryptographic\
    \ parameters (cipher, key, etc.) for a secure\n   media stream are known to have\
    \ been negotiated in the direction(s)\n   required.  When a mandatory security\
    \ precondition is offered, and the\n   answerer cannot satisfy the security precondition\
    \ (e.g., because the\n   offer was for a secure media stream, but it did not include\
    \ the\n   necessary parameters to establish the secure media stream keying\n \
    \  material for example), the offered media stream MUST be rejected as\n   described\
    \ in RFC 3312.\n   The delay of session establishment defined here implies that\
    \ alerting\n   of the called party MUST NOT occur and media for which security\
    \ is\n   being negotiated MUST NOT be exchanged until the precondition has\n \
    \  been satisfied.  In cases where secure media and other non-media data\n   is\
    \ multiplexed on a media stream (e.g., when Interactive Connectivity\n   Establishment\
    \ [ICE] is being used), the non-media data is allowed to\n   be exchanged prior\
    \ to the security precondition being satisfied.\n   When a security precondition\
    \ with a strength-tag of \"optional\" is\n   received in an offer, the answerer\
    \ MUST generate its answer SDP as\n   soon as possible.  Since session progress\
    \ is not delayed in this\n   case, the answerer does not know when the offerer\
    \ is able to process\n   secure media stream packets and hence clipping may occur.\
    \  If the\n   answerer wants to avoid clipping and delay session progress until\
    \ he\n   knows the offerer has received the answer, the answerer MUST increase\n\
    \   the strength of the security precondition by using a strength-tag of\n   \"\
    mandatory\" in the answer.  Note that use of a mandatory precondition\n   in an\
    \ offer requires the presence of a SIP \"Require\" header field\n   containing\
    \ the option tag \"precondition\": Any SIP UA that does not\n   support a mandatory\
    \ precondition will consequently reject such\n   requests (which also has unintended\
    \ ramifications for SIP forking\n   that are known as the Heterogeneous Error\
    \ Response Forking Problem\n   (see e.g., [HERFP]).  To get around this, an optional\
    \ security\n   precondition and the SIP \"Supported\" header field containing\
    \ the\n   option tag \"precondition\" can be used instead.\n   When a security\
    \ precondition with a strength-tag of \"none\" is\n   received, processing continues\
    \ as usual.  The \"none\" strength-tag\n   merely indicates that the offerer supports\
    \ the following security\n   precondition - the answerer MAY upgrade the strength-tag\
    \ in the\n   answer as described in [RFC3312].\n   The direction tags defined\
    \ in RFC 3312 are interpreted as follows:\n   *  send:  Media stream security\
    \ negotiation is at a stage where it is\n      possible to send media packets\
    \ to the other party and the other\n      party will be able to process them correctly\
    \ from a security point\n      of view, i.e., decrypt and/or integrity check them\
    \ as necessary.\n      The definition of \"media packets\" includes all packets\
    \ that make\n      up the media stream.  In the case of Secure RTP for example,\
    \ it\n      includes SRTP as well as SRTCP.  When media and non-media packets\n\
    \      are multiplexed on a given media stream (e.g., when ICE is being\n    \
    \  used), the requirement applies to the media packets only.\n   *  recv:  Media\
    \ stream security negotiation is at a stage where it is\n      possible to receive\
    \ and correctly process media stream packets\n      sent by the other party from\
    \ a security point of view.\n   The precise criteria for determining when the\
    \ other party is able to\n   correctly process media stream packets from a security\
    \ point of view\n   depend on the secure media stream protocol being used as well\
    \ as the\n   mechanism by which the required cryptographic parameters are\n  \
    \ negotiated.\n   We here provide details for SRTP negotiated through SDP security\n\
    \   descriptions as defined in [SDESC]:\n   *  When the offerer requests the \"\
    send\" security precondition, it\n      needs to receive the answer before the\
    \ security precondition is\n      satisfied.  The reason for this is twofold.\
    \  First, the offerer\n      needs to know where to send the media.  Secondly,\
    \ in the case\n      where alternative cryptographic parameters are offered, the\n\
    \      offerer needs to know which set was selected.  The answerer does\n    \
    \  not know when the answer is actually received by the offerer\n      (which\
    \ in turn will satisfy the precondition), and hence the\n      answerer needs\
    \ to use the confirm-status attribute [RFC3312].\n      This will make the offerer\
    \ generate a new offer showing the\n      updated status of the precondition.\n\
    \   *  When the offerer requests the \"recv\" security precondition, it\n    \
    \  also needs to receive the answer before the security precondition\n      is\
    \ satisfied.  The reason for this is straightforward: The answer\n      contains\
    \ the cryptographic parameters that will be used by the\n      answerer for sending\
    \ media to the offerer; prior to receipt of\n      these cryptographic parameters,\
    \ the offerer is unable to\n      authenticate or decrypt such media.\n   When\
    \ security preconditions are used with the Key Management\n   Extensions for the\
    \ Session Description Protocol (SDP) [KMGMT], the\n   details depend on the actual\
    \ key management protocol being used.\n   After an initial offer/answer exchange\
    \ in which the security\n   precondition is requested, any subsequent offer/answer\
    \ sequence for\n   the purpose of updating the status of the precondition for\
    \ a secure\n   media stream SHOULD use the same key material as the initial\n\
    \   offer/answer exchange.  This means that the key-mgmt attribute lines\n   [KMGMT],\
    \ or crypto attribute lines [SDESC] in SDP offers, that are\n   sent in response\
    \ to SDP answers containing a confirm-status field\n   [RFC3312] SHOULD repeat\
    \ the same data as that sent in the previous\n   SDP offer.  If applicable to\
    \ the key management protocol or SDP\n   security description, the SDP answers\
    \ to these SDP offers SHOULD\n   repeat the same data in the key-mgmt attribute\
    \ lines [KMGMT] or\n   crypto attribute lines [SDESC] as that sent in the previous\
    \ SDP\n   answer.\n   Of course, this duplication of key exchange during precondition\n\
    \   establishment is not to be interpreted as a replay attack.  This\n   issue\
    \ may be solved if, e.g., the SDP implementation recognizes that\n   the key management\
    \ protocol data is identical in the second\n   offer/answer exchange and avoids\
    \ forwarding the information to the\n   security layer for further processing.\n\
    \   Offers with security preconditions in re-INVITEs or UPDATEs follow\n   the\
    \ rules given in Section 6 of RFC 3312, i.e.:\n      \"Both user agents SHOULD\
    \ continue using the old session parameters\n      until all the mandatory preconditions\
    \ are met.  At that moment,\n      the user agents can begin using the new session\
    \ parameters.\"\n   At that moment, we furthermore require that user agents MUST\
    \ start\n   using the new session parameters for media packets being sent.  The\n\
    \   user agents SHOULD be prepared to process media packets received with\n  \
    \ either the old or the new session parameters for a short period of\n   time\
    \ to accommodate media packets in transit.  Note that this may\n   involve iterative\
    \ security processing of the received media packets\n   during that period of\
    \ time.  Section 8 in [RFC3264] lists several\n   techniques to help alleviate\
    \ the problem of determining when a\n   received media packet was generated according\
    \ to the old or new\n   offer/answer exchange.\n"
- title: 4.  Examples
  contents:
  - '4.  Examples

    '
- title: 4.1.  SDP Security Descriptions Example
  contents:
  - "4.1.  SDP Security Descriptions Example\n   The call flow of Figure 1 shows a\
    \ basic session establishment using\n   the Session Initiation Protocol [SIP]\
    \ and SDP security descriptions\n   [SDESC] with security descriptions for the\
    \ secure media stream (SRTP\n   in this case).\n              A              \
    \                              B\n              |                            \
    \                |\n              |-------------(1) INVITE SDP1--------------->|\n\
    \              |                                            |\n              |<------(2)\
    \ 183 Session Progress SDP2--------|\n              |                        \
    \                    |\n              |----------------(3) PRACK SDP3------------->|\n\
    \              |                                            |\n              |<-----------(4)\
    \ 200 OK (PRACK) SDP4---------|\n              |                             \
    \               |\n              |<-------------(5) 180 Ringing---------------|\n\
    \              |                                            |\n              |\
    \                                            |\n              |              \
    \                              |\n            Figure 1: Security Preconditions\
    \ with SDP Security\n                      Descriptions Example\n   The SDP descriptions\
    \ of this example are shown below - we have\n   omitted the details of the SDP\
    \ security descriptions as well as any\n   SIP details for clarity of the security\
    \ precondition described here:\n   SDP1: A includes a mandatory end-to-end security\
    \ precondition for\n   both the send and receive direction in the initial offer\
    \ as well as a\n   \"crypto\" attribute (see [SDESC]), which includes keying material\
    \ that\n   can be used by A to generate media packets.  Since B does not know\n\
    \   any of the security parameters yet, the current status (see RFC 3312)\n  \
    \ is set to \"none\".  A's local status table (see RFC 3312) for the\n   security\
    \ precondition is as follows:\n          Direction |  Current | Desired Strength\
    \ |  Confirm\n         -----------+----------+------------------+----------\n\
    \            send    |    no    |   mandatory      |    no\n            recv \
    \   |    no    |   mandatory      |    no\n   and the resulting offer SDP is:\n\
    \         m=audio 20000 RTP/SAVP 0\n         c=IN IP4 192.0.2.1\n         a=curr:sec\
    \ e2e none\n         a=des:sec mandatory e2e sendrecv\n         a=crypto:foo...\n\
    \   SDP2: When B receives the offer and generates an answer, B knows the\n   (send\
    \ and recv) security parameters of both A and B.  From a security\n   perspective,\
    \ B is now able to receive media from A, so B's \"recv\"\n   security precondition\
    \ is \"yes\".  However, A does not know any of B's\n   SDP information, so B's\
    \ \"send\" security precondition is \"no\".  B's\n   local status table therefore\
    \ looks as follows:\n          Direction |  Current | Desired Strength |  Confirm\n\
    \         -----------+----------+------------------+----------\n            send\
    \    |    no    |   mandatory      |    no\n            recv    |    yes   | \
    \  mandatory      |    no\n   B requests A to confirm when A knows the security\
    \ parameters used in\n   the send and receive direction (it would suffice for\
    \ B to ask for\n   confirmation of A's send direction only) and hence the resulting\n\
    \   answer SDP becomes:\n         m=audio 30000 RTP/SAVP 0\n         c=IN IP4\
    \ 192.0.2.4\n         a=curr:sec e2e recv\n         a=des:sec mandatory e2e sendrecv\n\
    \         a=conf:sec e2e sendrecv\n         a=crypto:bar...\n   SDP3: When A receives\
    \ the answer, A updates its local status table\n   based on the rules in RFC 3312.\
    \  A knows the security parameters of\n   both the send and receive direction\
    \ and hence A's local status table\n   is updated as follows:\n          Direction\
    \ |  Current | Desired Strength |  Confirm\n         -----------+----------+------------------+----------\n\
    \            send    |    yes   |   mandatory      |    yes\n            recv\
    \    |    yes   |   mandatory      |    yes\n   Since B requested confirmation\
    \ of the send and recv security\n   preconditions, and both are now satisfied,\
    \ A immediately sends an\n   updated offer (3) to B showing that the security\
    \ preconditions are\n   satisfied:\n         m=audio 20000 RTP/SAVP 0\n      \
    \   c=IN IP4 192.0.2.1\n         a=curr:sec e2e sendrecv\n         a=des:sec mandatory\
    \ e2e sendrecv\n         a=crypto:foo...\n   Note that we here use PRACK [RFC3262]\
    \ instead of UPDATE [RFC3311]\n   since the precondition is satisfied immediately,\
    \ and the original\n   offer/answer exchange is complete.\n   SDP4:  Upon receiving\
    \ the updated offer, B updates its local status\n   table based on the rules in\
    \ RFC 3312, which yields the following:\n          Direction |  Current | Desired\
    \ Strength |  Confirm\n         -----------+----------+------------------+----------\n\
    \            send    |    yes   |   mandatory      |    no\n            recv \
    \   |    yes   |   mandatory      |    no\n   B responds with an answer (4) that\
    \ contains the current status of the\n   security precondition (i.e., sendrecv)\
    \ from B's point of view:\n         m=audio 30000 RTP/SAVP 0\n         c=IN IP4\
    \ 192.0.2.4\n         a=curr:sec e2e sendrecv\n         a=des:sec mandatory e2e\
    \ sendrecv\n         a=crypto:bar...\n   B's local status table indicates that\
    \ all mandatory preconditions\n   have been satisfied, and hence session establishment\
    \ resumes; B\n   returns a 180 (Ringing) response (5) to indicate alerting.\n"
- title: 4.2.  Key Management Extension for SDP Example
  contents:
  - "4.2.  Key Management Extension for SDP Example\n   The call flow of Figure 2\
    \ shows a basic session establishment using\n   the Session Initiation Protocol\
    \ [SIP] and Key Management Extensions\n   for SDP [KMGMT] with security descriptions\
    \ for the secure media\n   stream (SRTP in this case):\n              A      \
    \                                      B\n              |                    \
    \                        |\n              |-------------(1) INVITE SDP1--------------->|\n\
    \              |                                            |\n              |<------(2)\
    \ 183 Session Progress SDP2--------|\n              |                        \
    \                    |\n              |----------------(3) PRACK SDP3------------->|\n\
    \              |                                            |\n              |<-----------(4)\
    \ 200 OK (PRACK) SDP4---------|\n              |                             \
    \               |\n              |<-------------(5) 180 Ringing---------------|\n\
    \              |                                            |\n              |\
    \                                            |\n              |              \
    \                              |\n            Figure 2: Security Preconditions\
    \ with Key Management\n                      Extensions for SDP Example\n   The\
    \ SDP descriptions of this example are shown below - we show an\n   example use\
    \ of MIKEY [MIKEY] with the Key Management Extensions,\n   however we have omitted\
    \ the details of the MIKEY parameters as well\n   as any SIP details for clarity\
    \ of the security precondition described\n   here:\n   SDP1: A includes a mandatory\
    \ end-to-end security precondition for\n   both the send and receive direction\
    \ in the initial offer as well as a\n   \"key-mgmt\" attribute (see [KMGMT]),\
    \ which includes keying material\n   that can be used by A to generate media packets.\
    \  Since B does not\n   know any of the security parameters yet, the current status\
    \ (see RFC\n   3312) is set to \"none\".  A's local status table (see RFC 3312)\
    \ for\n   the security precondition is as follows:\n          Direction |  Current\
    \ | Desired Strength |  Confirm\n         -----------+----------+------------------+----------\n\
    \            send    |    no    |   mandatory      |    no\n            recv \
    \   |    no    |   mandatory      |    no\n   and the resulting offer SDP is:\n\
    \         m=audio 20000 RTP/SAVP 0\n         c=IN IP4 192.0.2.1\n         a=curr:sec\
    \ e2e none\n         a=des:sec mandatory e2e sendrecv\n         a=key-mgmt:mikey\
    \ AQAFgM0X...\n   SDP2: When B receives the offer and generates an answer, B knows\
    \ the\n   (send and recv) security parameters of both A and B.  B generates\n\
    \   keying material for sending media to A, however, A does not know B's\n   keying\
    \ material, so the current status of B's \"send\" security\n   precondition is\
    \ \"no\".  B does know A's SDP information, so B's \"recv\"\n   security precondition\
    \ is \"yes\".  B's local status table therefore\n   looks as follows:\n      \
    \    Direction |  Current | Desired Strength |  Confirm\n         -----------+----------+------------------+----------\n\
    \            send    |    no    |   mandatory      |    no\n            recv \
    \   |    yes   |   mandatory      |    no\n   B requests A to confirm when A knows\
    \ the security parameters used in\n   the send and receive direction and hence\
    \ the resulting answer SDP\n   becomes:\n         m=audio 30000 RTP/SAVP 0\n \
    \        c=IN IP4 192.0.2.4\n         a=curr:sec e2e recv\n         a=des:sec\
    \ mandatory e2e sendrecv\n         a=conf:sec e2e sendrecv\n         a=key-mgmt:mikey\
    \ AQAFgM0X...\n   Note that the actual MIKEY data in the answer differs from that\
    \ in\n   the offer; however, we have only shown the initial and common part of\n\
    \   the MIKEY value in the above.\n   SDP3: When A receives the answer, A updates\
    \ its local status table\n   based on the rules in RFC 3312.  A now knows all\
    \ the security\n   parameters of both the send and receive direction and hence\
    \ A's local\n   status table is updated as follows:\n          Direction |  Current\
    \ | Desired Strength |  Confirm\n         -----------+----------+------------------+----------\n\
    \            send    |    yes   |   mandatory      |    yes\n            recv\
    \    |    yes   |   mandatory      |    yes\n   Since B requested confirmation\
    \ of the send and recv security\n   preconditions, and both are now satisfied,\
    \ A immediately sends an\n   updated offer (3) to B showing that the security\
    \ preconditions are\n   satisfied:\n         m=audio 20000 RTP/SAVP 0\n      \
    \   c=IN IP4 192.0.2.1\n         a=curr:sec e2e sendrecv\n         a=des:sec mandatory\
    \ e2e sendrecv\n         a=key-mgmt:mikey AQAFgM0X...\n   SDP4: Upon receiving\
    \ the updated offer, B updates its local status\n   table based on the rules in\
    \ RFC 3312, which yields the following:\n          Direction |  Current | Desired\
    \ Strength |  Confirm\n         -----------+----------+------------------+----------\n\
    \            send    |    yes   |   mandatory      |    no\n            recv \
    \   |    yes   |   mandatory      |    no\n   B responds with an answer (4) that\
    \ contains the current status of the\n   security precondition (i.e., sendrecv)\
    \ from B's point of view:\n         m=audio 30000 RTP/SAVP 0\n         c=IN IP4\
    \ 192.0.2.4\n         a=curr:sec e2e sendrecv\n         a=des:sec mandatory e2e\
    \ sendrecv\n         a=key-mgmt:mikey AQAFgM0X...\n   B's local status table indicates\
    \ that all mandatory preconditions\n   have been satisfied, and hence session\
    \ establishment resumes; B\n   returns a 180 (Ringing) response (5) to indicate\
    \ alerting.\n"
- title: 5.  Security Considerations
  contents:
  - "5.  Security Considerations\n   In addition to the general security considerations\
    \ for preconditions\n   provided in RFC 3312, the following security issues should\
    \ be\n   considered.\n   Security preconditions delay session establishment until\n\
    \   cryptographic parameters required to send and/or receive media for a\n   media\
    \ stream have been negotiated.  Negotiation of such parameters\n   can fail for\
    \ a variety of reasons, including policy preventing use of\n   certain cryptographic\
    \ algorithms, keys, and other security\n   parameters.  If an attacker can remove\
    \ security preconditions or\n   downgrade the strength-tag from an offer/answer\
    \ exchange, the\n   attacker can thereby cause user alerting for a session that\
    \ may have\n   no functioning media.  This is likely to cause inconvenience to\
    \ both\n   the offerer and the answerer.  Similarly, security preconditions can\n\
    \   be used to prevent clipping due to race conditions between an\n   offer/answer\
    \ exchange and secure media stream packets based on that\n   offer/answer exchange.\
    \  If an attacker can remove or downgrade the\n   strength-tag of security preconditions\
    \ from an offer/answer exchange,\n   the attacker can cause clipping to occur\
    \ in the associated secure\n   media stream.\n   Conversely, an attacker might\
    \ add security preconditions to offers\n   that do not contain them or increase\
    \ their strength-tag.  This in\n   turn may lead to session failure (e.g., if\
    \ the answerer does not\n   support it), heterogeneous error response forking\
    \ problems, or a\n   delay in session establishment that was not desired.\n  \
    \ Use of signaling integrity mechanisms can prevent all of the above\n   problems.\
    \  Where intermediaries on the signaling path (e.g., SIP\n   proxies) are trusted,\
    \ it is sufficient to use only hop-by-hop\n   integrity protection of signaling,\
    \ e.g., IPSec or TLS.  In all other\n   cases, end-to-end integrity protection\
    \ of signaling (e.g., S/MIME)\n   MUST be used.  Note that the end-to-end integrity\
    \ protection MUST\n   cover not only the message body, which contains the security\n\
    \   preconditions, but also the SIP \"Supported\" and \"Require\" headers,\n \
    \  which may contain the \"precondition\" option tag.  If only the message\n \
    \  body were integrity protected, removal of the \"precondition\" option\n   tag\
    \ could lead to clipping (when a security precondition was\n   otherwise to be\
    \ used), whereas addition of the option tag could lead\n   to session failure\
    \ (if the other side does not support\n   preconditions).\n   As specified in\
    \ Section 3, security preconditions do not guarantee\n   that an established media\
    \ stream will be secure.  They merely\n   guarantee that the recipient of the\
    \ media stream packets will be able\n   to perform any relevant decryption and\
    \ integrity checking on those\n   media stream packets.\n   Current SDP [RFC4566]\
    \ and associated offer/answer procedures\n   [RFC3264] allows only a single type\
    \ of transport protocol to be\n   negotiated for a given media stream in an offer/answer\
    \ exchange.\n   Negotiation of alternative transport protocols (e.g., plain and\n\
    \   secure RTP) is currently not defined.  Thus, if the transport\n   protocol\
    \ offered (e.g., secure RTP) is not supported, the offered\n   media stream will\
    \ simply be rejected.  There is however work in\n   progress to address that.\
    \  For example, the SDP Capability\n   Negotiation framework [SDPCN] defines a\
    \ method for negotiating the\n   use of a secure or a non-secure transport protocol\
    \ by use of SDP and\n   the offer/answer model with various extensions.\n   Such\
    \ a mechanism introduces a number of security considerations in\n   general, however\
    \ use of SDP Security Preconditions with such a\n   mechanism introduces the following\
    \ security precondition specific\n   security considerations:\n   A basic premise\
    \ of negotiating secure and non-secure media streams as\n   alternatives is that\
    \ the offerer's security policy allows for non-\n   secure media.  If the offer\
    \ were to include secure and non-secure\n   media streams as alternative offers,\
    \ and media for either alternative\n   may be received prior to the answer, then\
    \ the offerer may not know if\n   the answerer accepted the secure alternative.\
    \  An active attacker\n   thus may be able to inject malicious media stream packets\
    \ until the\n   answer (indicating the chosen secure alternative) is received.\
    \  From\n   a security point of view, it is important to note that use of\n  \
    \ security preconditions (even with a mandatory strength-tag) would not\n   address\
    \ this vulnerability since security preconditions would\n   effectively apply\
    \ only to the secure media stream alternatives.  If\n   the non-secure media stream\
    \ alternative was selected by the answerer,\n   the security precondition would\
    \ be satisfied by definition, the\n   session could progress and (non-secure)\
    \ media could be received prior\n   to the answer being received.\n"
- title: 6.  IANA Considerations
  contents:
  - "6.  IANA Considerations\n   IANA has registered an RFC 3312 precondition type\
    \ called \"sec\" with\n   the name \"Security precondition\".  The reference for\
    \ this\n   precondition type is the current document.\n"
- title: 7.  Acknowledgements
  contents:
  - "7.  Acknowledgements\n   The security precondition was defined in earlier versions\
    \ of RFC\n   3312.  RFC 3312 contains an extensive list of people who worked on\n\
    \   those earlier versions, which are acknowledged here as well.  The\n   authors\
    \ would additionally like to thank David Black, Mark Baugher,\n   Gonzalo Camarillo,\
    \ Paul Kyzivat, and Thomas Stach for their comments\n   on this document.\n"
- title: 8.  Normative References
  contents:
  - "8.  Normative References\n   [RFC2119] Bradner, S., \"Key words for use in RFCs\
    \ to Indicate\n             Requirement Levels\", BCP 14, RFC 2119, March 1997.\n\
    \   [RFC3312] Camarillo, G., Ed., Marshall, W., Ed., and J. Rosenberg,\n     \
    \        \"Integration of Resource Management and Session Initiation\n       \
    \      Protocol (SIP)\", RFC 3312, October 2002.\n   [RFC4032] Camarillo, G. and\
    \ P. Kyzivat, \"Update to the Session\n             Initiation Protocol (SIP)\
    \ Preconditions Framework\", RFC\n             4032, March 2005.\n   [SIP]   \
    \  Rosenberg, J., Schulzrinne, H., Camarillo, G., Johnston,\n             A.,\
    \ Peterson, J., Sparks, R., Handley, M., and E. Schooler,\n             \"SIP:\
    \ Session Initiation Protocol\", RFC 3261, June 2002.\n   [RFC4566] Handley, M.,\
    \ Jacobson, V., and C. Perkins, \"SDP: Session\n             Description Protocol\"\
    , RFC 4566, July 2006.\n   [RFC3264] Rosenberg, J. and H. Schulzrinne, \"An Offer/Answer\
    \ Model\n             with Session Description Protocol (SDP)\", RFC 3264, June\n\
    \             2002.\n"
- title: 9.  Informative References
  contents:
  - "9.  Informative References\n   [SDESC]   Andreasen, F., Baugher, M., and D. Wing,\
    \ \"Session\n             Description Protocol (SDP) Security Descriptions for\
    \ Media\n             Streams\", RFC 4568, July 2006.\n   [RFC3551] Schulzrinne,\
    \ H. and S. Casner, \"RTP Profile for Audio and\n             Video Conferences\
    \ with Minimal Control\", STD 65, RFC 3551,\n             July 2003.\n   [SRTP]\
    \    Baugher, M., McGrew, D., Naslund, M., Carrara, E., and K.\n             Norrman,\
    \ \"The Secure Real-time Transport Protocol (SRTP)\",\n             RFC 3711,\
    \ March 2004.\n   [ICE]     Rosenberg, J., \"Interactive Connectivity Establishment\n\
    \             (ICE): A Methodology for Network Address Translator (NAT)\n    \
    \         Traversal for Multimedia Session Establishment Protocols\",\n      \
    \       Work in Progress, September 2007.\n   [KMGMT]   Arkko, J., Lindholm, F.,\
    \ Naslund, M., Norrman, K., and E.\n             Carrara, \"Key Management Extensions\
    \ for Session Description\n             Protocol (SDP) and Real Time Streaming\
    \ Protocol (RTSP)\",\n             RFC 4567, July 2006.\n   [MIKEY]   Arkko, J.,\
    \ Carrara, E., Lindholm, F., Naslund, M., and K.\n             Norrman, \"MIKEY:\
    \ Multimedia Internet KEYing\", RFC 3830,\n             August 2004.\n   [RFC3262]\
    \ Rosenberg, J. and H. Schulzrinne, \"Reliability of\n             Provisional\
    \ Responses in Session Initiation Protocol\n             (SIP)\", RFC 3262, June\
    \ 2002.\n   [RFC3311] Rosenberg, J., \"The Session Initiation Protocol (SIP)\n\
    \             UPDATE Method\", RFC 3311, October 2002.\n   [HERFP]   Mahy, R.,\
    \ \"A Solution to the Heterogeneous Error Response\n             Forking Problem\
    \ (HERFP) in the Session Initiation Protocol\n             (SIP)\", Work in Progress,\
    \ March 2006.\n   [SDPCN]   Andreasen, F., \"SDP Capability Negotiation\", Work\
    \ in\n             Progress, July 2007.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Flemming Andreasen\n   Cisco Systems, Inc.\n   499 Thornall\
    \ Street, 8th Floor\n   Edison, New Jersey  08837 USA\n   EMail: fandreas@cisco.com\n\
    \   Dan Wing\n   Cisco Systems, Inc.\n   170 West Tasman Drive\n   San Jose, CA\
    \  95134  USA\n   EMail: dwing@cisco.com\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The IETF Trust (2007).\n   This document\
    \ is subject to the rights, licenses and restrictions\n   contained in BCP 78,\
    \ and except as set forth therein, the authors\n   retain all their rights.\n\
    \   This document and the information contained herein are provided on an\n  \
    \ \"AS IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n  \
    \ OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY, THE IETF TRUST AND\n   THE\
    \ INTERNET ENGINEERING TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS\n   OR IMPLIED,\
    \ INCLUDING BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF\n   THE INFORMATION\
    \ HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY\
    \ OR FITNESS FOR A PARTICULAR PURPOSE.\n"
- title: Intellectual Property
  contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or\
    \ scope of any\n   Intellectual Property Rights or other rights that might be\
    \ claimed to\n   pertain to the implementation or use of the technology described\
    \ in\n   this document or the extent to which any license under such rights\n\
    \   might or might not be available; nor does it represent that it has\n   made\
    \ any independent effort to identify any such rights.  Information\n   on the\
    \ procedures with respect to rights in RFC documents can be\n   found in BCP 78\
    \ and BCP 79.\n   Copies of IPR disclosures made to the IETF Secretariat and any\n\
    \   assurances of licenses to be made available, or the result of an\n   attempt\
    \ made to obtain a general license or permission for the use of\n   such proprietary\
    \ rights by implementers or users of this\n   specification can be obtained from\
    \ the IETF on-line IPR repository at\n   http://www.ietf.org/ipr.\n   The IETF\
    \ invites any interested party to bring to its attention any\n   copyrights, patents\
    \ or patent applications, or other proprietary\n   rights that may cover technology\
    \ that may be required to implement\n   this standard.  Please address the information\
    \ to the IETF at\n   ietf-ipr@ietf.org.\n"
