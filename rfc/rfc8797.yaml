- contents:
  - ''
  title: __initial_text__
- contents:
  - "Remote Direct Memory Access - Connection Manager (RDMA-CM) Private Data\n                      for
    RPC-over-RDMA Version 1\n"
  title: Remote Direct Memory Access - Connection Manager (RDMA-CM) Private Data
- contents:
  - "Abstract\n   This document specifies the format of Remote Direct Memory Access
    -\n   Connection Manager (RDMA-CM) Private Data exchanged between RPC-over-\n
    \  RDMA version 1 peers as part of establishing a connection.  The\n   addition
    of the Private Data payload specified in this document is an\n   optional extension
    that does not alter the RPC-over-RDMA version 1\n   protocol.  This document updates
    RFC 8166.\n"
  title: Abstract
- contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This
    document is a product of the Internet Engineering Task Force\n   (IETF).  It represents
    the consensus of the IETF community.  It has\n   received public review and has
    been approved for publication by the\n   Internet Engineering Steering Group (IESG).
    \ Further information on\n   Internet Standards is available in Section 2 of RFC
    7841.\n   Information about the current status of this document, any errata,\n
    \  and how to provide feedback on it may be obtained at\n   https://www.rfc-editor.org/info/rfc8797.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2020 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n
    \  (https://trustee.ietf.org/license-info) in effect on the date of\n   publication
    of this document.  Please review these documents\n   carefully, as they describe
    your rights and restrictions with respect\n   to this document.  Code Components
    extracted from this document must\n   include Simplified BSD License text as described
    in Section 4.e of\n   the Trust Legal Provisions and are provided without warranty
    as\n   described in the Simplified BSD License.\n"
  title: Copyright Notice
- contents:
  - "Table of Contents\n   1.  Introduction\n   2.  Requirements Language\n   3.  Advertised
    Transport Properties\n     3.1.  Inline Threshold Size\n     3.2.  Remote Invalidation\n
    \  4.  Private Data Message Format\n     4.1.  Using the R Field\n     4.2.  Send
    and Receive Size Values\n   5.  Interoperability Considerations\n     5.1.  Interoperability
    with RPC-over-RDMA Version 1\n           Implementations\n     5.2.  Interoperability
    amongst RDMA Transports\n   6.  Updating the Message Format\n   7.  Security Considerations\n
    \  8.  IANA Considerations\n     8.1.  Guidance for Designated Experts\n   9.
    \ References\n     9.1.  Normative References\n     9.2.  Informative References\n
    \  Acknowledgments\n   Author's Address\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   The RPC-over-RDMA version 1 transport protocol [RFC8166]
    enables\n   payload data transfer using Remote Direct Memory Access (RDMA) for\n
    \  upper-layer protocols based on Remote Procedure Calls (RPCs)\n   [RFC5531].
    \ The terms \"Remote Direct Memory Access\" (RDMA) and\n   \"Direct Data Placement\"
    (DDP) are introduced in [RFC5040].\n   The two most immediate shortcomings of
    RPC-over-RDMA version 1 are as\n   follows:\n   1.  Setting up an RDMA data transfer
    (via RDMA Read or Write) can be\n       costly.  The small default size of messages
    transmitted using\n       RDMA Send forces the use of RDMA Read or Write operations
    even\n       for relatively small messages and data payloads.\n       The original
    specification of RPC-over-RDMA version 1 provided an\n       out-of-band protocol
    for passing inline threshold values between\n       connected peers [RFC5666].
    \ However, [RFC8166] eliminated support\n       for this protocol, making it unavailable
    for this purpose.\n   2.  Unlike most other contemporary RDMA-enabled storage
    protocols,\n       there is no facility in RPC-over-RDMA version 1 that enables
    the\n       use of remote invalidation [RFC5042].\n   Each RPC-over-RDMA version
    1 Transport Header follows the External\n   Data Representation (XDR) definition
    [RFC4506] specified in\n   [RFC8166].  However, RPC-over-RDMA version 1 has no
    means of\n   extending this definition in such a way that interoperability with\n
    \  existing implementations is preserved.  As a result, an out-of-band\n   mechanism
    is needed to help relieve these constraints for existing\n   RPC-over-RDMA version
    1 implementations.\n   This document specifies a simple, non-XDR-based message
    format\n   designed to be passed between RPC-over-RDMA version 1 peers at the\n
    \  time each RDMA transport connection is first established.  The\n   mechanism
    assumes that the underlying RDMA transport has a Private\n   Data field that is
    passed between peers at connection time, such as\n   is present in the Marker
    PDU Aligned Framing (MPA) protocol\n   (described in Section 7.1 of [RFC5044]
    and extended in [RFC6581]) or\n   the InfiniBand Connection Manager [IBA].\n   To
    enable current RPC-over-RDMA version 1 implementations to\n   interoperate with
    implementations that support the message format\n   described in this document,
    implementation of the Private Data\n   exchange is OPTIONAL.  When Private Data
    has been successfully\n   exchanged, peers may choose to perform extended RDMA
    semantics.\n   However, this exchange does not alter the XDR definition specified
    in\n   [RFC8166].\n   The message format is intended to be further extensible
    within the\n   normal scope of such IETF work (see Section 6 for further details).\n
    \  Section 8 of this document defines an IANA registry for this purpose.\n   In
    addition, interoperation between implementations of RPC-over-RDMA\n   version
    1 that present this message format to peers and those that do\n   not recognize
    this message format is guaranteed.\n"
  title: 1.  Introduction
- contents:
  - "2.  Requirements Language\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\",
    \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"NOT
    RECOMMENDED\", \"MAY\", and\n   \"OPTIONAL\" in this document are to be interpreted
    as described in\n   BCP 14 [RFC2119] [RFC8174] when, and only when, they appear
    in all\n   capitals, as shown here.\n"
  title: 2.  Requirements Language
- contents:
  - '3.  Advertised Transport Properties

    '
  - contents:
    - "3.1.  Inline Threshold Size\n   Section 3.3.2 of [RFC8166] defines the term
      \"inline threshold\".  An\n   inline threshold is the maximum number of bytes
      that can be\n   transmitted using one RDMA Send and one RDMA Receive.  There
      are a\n   pair of inline thresholds for a connection: a client-to-server\n   threshold
      and a server-to-client threshold.\n   If an incoming RDMA message exceeds the
      size of a receiver's inline\n   threshold, the Receive operation fails and the
      RDMA provider\n   typically terminates the connection.  To convey an RPC message
      larger\n   than the receiver's inline threshold without risking receive failure,\n
      \  a sender must use explicit RDMA data transfer operations, which are\n   more
      expensive than an RDMA Send.  See Sections 3.3 and 3.5 of\n   [RFC8166] for
      a complete discussion.\n   The default value of inline thresholds for RPC-over-RDMA
      version 1\n   connections is 1024 bytes (as defined in Section 3.3.3 of [RFC8166]).\n
      \  This value is adequate for nearly all NFS version 3 procedures.\n   NFS version
      4 COMPOUND operations [RFC7530] are larger on average\n   than NFS version 3
      procedures [RFC1813], forcing clients to use\n   explicit RDMA operations for
      frequently issued requests such as\n   LOOKUP and GETATTR.  The use of RPCSEC_GSS
      security also increases\n   the average size of RPC messages, due to the larger
      size of\n   RPCSEC_GSS credential material included in RPC headers [RFC7861].\n
      \  If a sender and receiver could somehow agree on larger inline\n   thresholds,
      frequently used RPC transactions avoid the cost of\n   explicit RDMA operations.\n"
    title: 3.1.  Inline Threshold Size
  - contents:
    - "3.2.  Remote Invalidation\n   After an RDMA data transfer operation completes,
      an RDMA consumer can\n   request that its peer's RDMA Network Interface Card
      (RNIC) invalidate\n   the Steering Tag (STag) associated with the data transfer
      [RFC5042].\n   An RDMA consumer requests remote invalidation by posting an RDMA
      Send\n   with Invalidate operation in place of an RDMA Send operation.  Each\n
      \  RDMA Send with Invalidate carries one STag to invalidate.  The\n   receiver
      of an RDMA Send with Invalidate performs the requested\n   invalidation and
      then reports that invalidation as part of the\n   completion of a waiting Receive
      operation.\n   If both peers support remote invalidation, an RPC-over-RDMA responder\n
      \  might use remote invalidation when replying to an RPC request that\n   provided
      chunks.  Because one of the chunks has already been\n   invalidated, finalizing
      the results of the RPC is made simpler and\n   faster.\n   However, there are
      some important caveats that contraindicate the\n   blanket use of remote invalidation:\n
      \  *  Remote invalidation is not supported by all RNICs.\n   *  Not all RPC-over-RDMA
      responder implementations can generate RDMA\n      Send with Invalidate operations.\n
      \  *  Not all RPC-over-RDMA requester implementations can recognize when\n      remote
      invalidation has occurred.\n   *  On one connection in different RPC-over-RDMA
      transactions, or in a\n      single RPC-over-RDMA transaction, an RPC-over-RDMA
      requester can\n      expose a mixture of STags that may be invalidated remotely
      and\n      some that must not be.  No indication is provided at the RDMA\n      layer
      as to which is which.\n   A responder therefore must not employ remote invalidation
      unless it\n   is aware of support for it in its own RDMA stack, and on the\n
      \  requester.  And, without altering the XDR structure of RPC-over-RDMA\n   version
      1 messages, it is not possible to support remote invalidation\n   with requesters
      that include an STag that must not be invalidated\n   remotely in an RPC with
      STags that may be invalidated.  Likewise, it\n   is not possible to support
      remote invalidation with requesters that\n   mix RPCs with STags that may be
      invalidated with RPCs with STags that\n   must not be invalidated on the same
      connection.\n   There are some NFS/RDMA client implementations whose STags are
      always\n   safe to invalidate remotely.  For such clients, indicating to the\n
      \  responder that remote invalidation is always safe can enable such\n   invalidation
      without the need for additional protocol elements to be\n   defined.\n"
    title: 3.2.  Remote Invalidation
  title: 3.  Advertised Transport Properties
- contents:
  - "4.  Private Data Message Format\n   With an InfiniBand lower layer, for example,
    RDMA connection setup\n   uses a Connection Manager (CM) when establishing a Reliable\n
    \  Connection [IBA].  When an RPC-over-RDMA version 1 transport\n   connection
    is established, the client (which actively establishes\n   connections) and the
    server (which passively accepts connections)\n   populate the CM Private Data
    field exchanged as part of CM connection\n   establishment.\n   The transport
    properties exchanged via this mechanism are fixed for\n   the life of the connection.
    \ Each new connection presents an\n   opportunity for a fresh exchange.  An implementation
    of the extension\n   described in this document MUST be prepared for the settings
    to\n   change upon a reconnection.\n   For RPC-over-RDMA version 1, the CM Private
    Data field is formatted\n   as described below.  RPC clients and servers use the
    same format.  If\n   the capacity of the Private Data field is too small to contain
    this\n   message format or the underlying RDMA transport is not managed by a\n
    \  CM, the CM Private Data field cannot be used on behalf of RPC-over-\n   RDMA
    version 1.\n   The first eight octets of the CM Private Data field are to be\n
    \  formatted as follows:\n     0                   1                   2                   3\n
    \    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n    |                       Format
    Identifier                       |\n    |    Version    |  Reserved   |R|   Send
    Size   | Receive Size  |\n   Format Identifier:  This field contains a fixed 32-bit
    value that\n      identifies the content of the Private Data field as an RPC-over-\n
    \     RDMA version 1 CM Private Data message.  In RPC-over-RDMA\n      version
    1 Private Data, the value of this field is always\n      0xf6ab0e18, in network
    byte order.  The use of this field is\n      further expanded upon in Section
    5.2.\n   Version:  This 8-bit field contains a message format version number.\n
    \     The value \"1\" in this field indicates that exactly eight octets\n      are
    present, that they appear in the order described in this\n      section, and that
    each has the meaning defined in this section.\n      Further considerations about
    the use of this field are discussed\n      in Section 6.\n   Reserved:  This 7-bit
    field is unused.  Senders MUST set these bits\n      to zero, and receivers MUST
    ignore their value.\n   R:  This 1-bit field indicates that the sender supports
    remote\n      invalidation.  The field is set and interpreted as described in\n
    \     Section 4.1.\n   Send Size:  This 8-bit field contains an encoded value
    corresponding\n      to the maximum number of bytes this peer is prepared to transmit\n
    \     in a single RDMA Send on this connection.  The value is encoded as\n      described
    in Section 4.2.\n   Receive Size:  This 8-bit field contains an encoded value\n
    \     corresponding to the maximum number of bytes this peer is prepared\n      to
    receive with a single RDMA Receive on this connection.  The\n      value is encoded
    as described in Section 4.2.\n"
  - contents:
    - "4.1.  Using the R Field\n   The R field indicates limited support for remote
      invalidation as\n   described in Section 3.2.  When both connection peers have
      set this\n   bit flag in their CM Private Data, the responder MAY use RDMA Send\n
      \  with Invalidate operations when transmitting RPC Replies.  Each RDMA\n   Send
      with Invalidate MUST invalidate an STag associated only with the\n   Transaction
      ID (XID) in the rdma_xid field of the RPC-over-RDMA\n   Transport Header it
      carries.\n   When either peer on a connection clears this flag, the responder
      MUST\n   use only RDMA Send when transmitting RPC Replies.\n"
    title: 4.1.  Using the R Field
  - contents:
    - "4.2.  Send and Receive Size Values\n   Inline threshold sizes from 1024 to
      262144 octets can be represented\n   in the Send Size and Receive Size fields.
      \ The inline threshold\n   values provide a pair of 1024-octet-aligned maximum
      message lengths\n   that guarantee that Send and Receive operations do not fail
      due to\n   length errors.\n   The minimum inline threshold for RPC-over-RDMA
      version 1 is 1024\n   octets (see Section 3.3.3 of [RFC8166]).  The values in
      the Send Size\n   and Receive Size fields represent the unsigned number of additional\n
      \  kilo-octets of length beyond the first 1024 octets.  Thus, a sender\n   computes
      the encoded value by dividing its actual buffer size, in\n   octets, by 1024
      and subtracting one from the result.  A receiver\n   decodes an incoming Size
      value by performing the inverse set of\n   operations: it adds one to the encoded
      value and then multiplies that\n   result by 1024.\n   The client uses the smaller
      of its own send size and the server's\n   reported receive size as the client-to-server
      inline threshold.  The\n   server uses the smaller of its own send size and
      the client's\n   reported receive size as the server-to-client inline threshold.\n"
    title: 4.2.  Send and Receive Size Values
  title: 4.  Private Data Message Format
- contents:
  - "5.  Interoperability Considerations\n   The extension described in this document
    is designed to allow RPC-\n   over-RDMA version implementations that use CM Private
    Data to\n   interoperate fully with RPC-over-RDMA version 1 implementations that\n
    \  do not exchange this information.  Implementations that use this\n   extension
    must also interoperate fully with RDMA implementations that\n   use CM Private
    Data for other purposes.  Realizing these goals\n   requires that implementations
    of this extension follow the practices\n   described in the rest of this section.\n"
  - contents:
    - "5.1.  Interoperability with RPC-over-RDMA Version 1 Implementations\n   When
      a peer does not receive a CM Private Data message that conforms\n   to Section
      4, it needs to act as if the remote peer supports only the\n   default RPC-over-RDMA
      version 1 settings, as defined in [RFC8166].\n   In other words, the peer MUST
      behave as if a Private Data message was\n   received in which (1) bit 15 of
      the Flags field is zero and (2) both\n   Size fields contain the value zero.\n"
    title: 5.1.  Interoperability with RPC-over-RDMA Version 1 Implementations
  - contents:
    - "5.2.  Interoperability amongst RDMA Transports\n   The Format Identifier field
      defined in Section 4 is provided to\n   enable implementations to distinguish
      the Private Data defined in\n   this document from Private Data inserted at
      other layers, such as the\n   additional Private Data defined by the MPAv2 protocol
      described in\n   [RFC6581], and others.\n   As part of connection establishment,
      the buffer containing the\n   received Private Data is searched for the Format
      Identifier word.\n   The offset of the Format Identifier is not restricted to
      any\n   alignment.  If the RPC-over-RDMA version 1 CM Private Data Format\n
      \  Identifier is not present, an RPC-over-RDMA version 1 receiver MUST\n   behave
      as if no RPC-over-RDMA version 1 CM Private Data has been\n   provided.\n   Once
      the RPC-over-RDMA version 1 CM Private Data Format Identifier is\n   found,
      the receiver parses the subsequent octets as RPC-over-RDMA\n   version 1 CM
      Private Data.  As additional assurance that the content\n   is valid RPC-over-RDMA
      version 1 CM Private Data, the receiver should\n   check that the format version
      number field contains a valid and\n   recognized version number and the size
      of the content does not\n   overrun the length of the buffer.\n"
    title: 5.2.  Interoperability amongst RDMA Transports
  title: 5.  Interoperability Considerations
- contents:
  - "6.  Updating the Message Format\n   Although the message format described in
    this document provides the\n   ability for the client and server to exchange particular
    information\n   about the local RPC-over-RDMA implementation, it is possible that\n
    \  there will be a future need to exchange additional properties.  This\n   would
    make it necessary to extend or otherwise modify the format\n   described in this
    document.\n   Any modification faces the problem of interoperating properly with\n
    \  implementations of RPC-over-RDMA version 1 that are unaware of the\n   existence
    of the new format.  These include implementations that do\n   not recognize the
    exchange of CM Private Data as well as those that\n   recognize only the format
    described in this document.\n   Given the message format described in this document,
    these\n   interoperability constraints could be met by the following sorts of\n
    \  new message formats:\n   *  A format that uses a different value for the first
    four bytes of\n      the format, as provided for in the registry described in\n
    \     Section 8.\n   *  A format that uses the same value for the Format Identifier
    field\n      and a value other than one (1) in the Version field.\n   Although
    it is possible to reorganize the last three of the\n   eight bytes in the existing
    format, extended formats are unlikely to\n   do so.  New formats would take the
    form of extensions of the format\n   described in this document with added fields
    starting at byte eight\n   of the format or changes to the definition of bits
    in the Reserved\n   field.\n"
  title: 6.  Updating the Message Format
- contents:
  - "7.  Security Considerations\n   The reader is directed to the Security Considerations
    section of\n   [RFC8166] for background and further discussion.\n   The RPC-over-RDMA
    version 1 protocol framework depends on the\n   semantics of the Reliable Connected
    (RC) queue pair (QP) type, as\n   defined in Section 9.7.7 of [IBA].  The integrity
    of CM Private Data\n   and the authenticity of its source are ensured by the exclusive
    use\n   of RC QPs.  Any attempt to interfere with or hijack data in transit\n
    \  on an RC connection results in the RDMA provider terminating the\n   connection.\n
    \  The Security Considerations section of [RFC5042] refers the reader to\n   further
    relevant discussion of generic RDMA transport security.  That\n   document recommends
    IPsec as the default transport-layer security\n   solution.  When deployed with
    the Remote Direct Memory Access\n   Protocol (RDMAP) [RFC5040], DDP [RFC5041],
    and MPA [RFC5044], IPsec\n   establishes a protected channel before any operations
    are exchanged;\n   thus, it protects the exchange of Private Data.  However, IPsec
    is\n   not available for InfiniBand or RDMA over Converged Ethernet (RoCE)\n   deployments.
    \ Those fabrics rely on physical security and cyclic\n   redundancy checks to
    protect network traffic.\n   Exchanging the information contained in the message
    format defined in\n   this document does not expose upper-layer payloads to an
    attacker.\n   Furthermore, the behavior changes that occur as a result of\n   exchanging
    the Private Data described in the current document do not\n   introduce any new
    risk of exposure of upper-layer payload data.\n   Improperly setting one of the
    fields in version 1 Private Data can\n   result in an increased risk of disconnection
    (i.e., self-imposed\n   Denial of Service).  A similar risk can arise if non-RPC-over-RDMA
    CM\n   Private Data inadvertently contains the Format Identifier that\n   identifies
    this protocol's data structure.  Additional checking of\n   incoming Private Data,
    as described in Section 5.2, can help reduce\n   this risk.\n   In addition to
    describing the structure of a new format version, any\n   document that extends
    the Private Data format described in the\n   current document must discuss security
    considerations of new data\n   items exchanged between connection peers.  Such
    documents should also\n   explore the risks of erroneously identifying non-RPC-over-RDMA
    CM\n   Private Data as the new format.\n"
  title: 7.  Security Considerations
- contents:
  - "8.  IANA Considerations\n   IANA has created the \"RDMA-CM Private Data Identifiers\"
    subregistry\n   within the \"Remote Direct Data Placement\" protocol category
    group.\n   This is a subregistry of 32-bit numbers that identify the upper-layer\n
    \  protocol associated with data that appears in the application-\n   specific
    RDMA-CM Private Data area.  The fields in this subregistry\n   include the following:
    Format Identifier, Length (format length, in\n   octets), Description, and Reference.\n
    \  The initial contents of this registry are a single entry:\n   | Format Identifier
    | Length | Description           | Reference |\n   | 0xf6ab0e18        | 8      |
    RPC-over-RDMA version | RFC 8797  |\n        Table 1: New \"RDMA-CM Private Data
    Identifiers\" Registry\n   IANA is to assign subsequent new entries in this registry
    using the\n   Specification Required policy as defined in Section 4.6 of [RFC8126].\n"
  - contents:
    - "8.1.  Guidance for Designated Experts\n   The Designated Expert (DE), appointed
      by the IESG, should ascertain\n   the existence of suitable documentation that
      defines the semantics\n   and format of the Private Data, and verify that the
      document is\n   permanently and publicly available.  Documentation produced
      outside\n   the IETF must not conflict with work that is active or already\n
      \  published within the IETF.  The new Reference field should contain a\n   reference
      to that documentation.\n   The Description field should contain the name of
      the upper-layer\n   protocol that generates and uses the Private Data.\n   The
      DE should assign a new Format Identifier so that it does not\n   conflict with
      existing entries in this registry and so that it is not\n   likely to be mistaken
      as part of the payload of other registered\n   formats.\n   The DE shall post
      the request to the NFSV4 Working Group mailing list\n   (or a successor to that
      list, if such a list exists) for comment and\n   review.  The DE shall approve
      or deny the request and publish notice\n   of the decision within 30 days.\n"
    title: 8.1.  Guidance for Designated Experts
  title: 8.  IANA Considerations
- contents:
  - '9.  References

    '
  - contents:
    - "9.1.  Normative References\n   [IBA]      InfiniBand Trade Association, \"InfiniBand
      Architecture\n              Specification Volume 1\", Release 1.3, March 2015,\n
      \             <https://www.infinibandta.org/>.\n   [RFC2119]  Bradner, S., \"Key
      words for use in RFCs to Indicate\n              Requirement Levels\", BCP 14,
      RFC 2119,\n              DOI 10.17487/RFC2119, March 1997,\n              <https://www.rfc-editor.org/info/rfc2119>.\n
      \  [RFC4506]  Eisler, M., Ed., \"XDR: External Data Representation\n              Standard\",
      STD 67, RFC 4506, DOI 10.17487/RFC4506, May\n              2006, <https://www.rfc-editor.org/info/rfc4506>.\n
      \  [RFC5040]  Recio, R., Metzler, B., Culley, P., Hilland, J., and D.\n              Garcia,
      \"A Remote Direct Memory Access Protocol\n              Specification\", RFC
      5040, DOI 10.17487/RFC5040, October\n              2007, <https://www.rfc-editor.org/info/rfc5040>.\n
      \  [RFC5042]  Pinkerton, J. and E. Deleganes, \"Direct Data Placement\n              Protocol
      (DDP) / Remote Direct Memory Access Protocol\n              (RDMAP) Security\",
      RFC 5042, DOI 10.17487/RFC5042, October\n              2007, <https://www.rfc-editor.org/info/rfc5042>.\n
      \  [RFC8126]  Cotton, M., Leiba, B., and T. Narten, \"Guidelines for\n              Writing
      an IANA Considerations Section in RFCs\", BCP 26,\n              RFC 8126, DOI
      10.17487/RFC8126, June 2017,\n              <https://www.rfc-editor.org/info/rfc8126>.\n
      \  [RFC8166]  Lever, C., Ed., Simpson, W., and T. Talpey, \"Remote Direct\n
      \             Memory Access Transport for Remote Procedure Call Version\n              1\",
      RFC 8166, DOI 10.17487/RFC8166, June 2017,\n              <https://www.rfc-editor.org/info/rfc8166>.\n
      \  [RFC8174]  Leiba, B., \"Ambiguity of Uppercase vs Lowercase in RFC\n              2119
      Key Words\", BCP 14, RFC 8174, DOI 10.17487/RFC8174,\n              May 2017,
      <https://www.rfc-editor.org/info/rfc8174>.\n"
    title: 9.1.  Normative References
  - contents:
    - "9.2.  Informative References\n   [RFC1813]  Callaghan, B., Pawlowski, B., and
      P. Staubach, \"NFS\n              Version 3 Protocol Specification\", RFC 1813,\n
      \             DOI 10.17487/RFC1813, June 1995,\n              <https://www.rfc-editor.org/info/rfc1813>.\n
      \  [RFC5041]  Shah, H., Pinkerton, J., Recio, R., and P. Culley, \"Direct\n
      \             Data Placement over Reliable Transports\", RFC 5041,\n              DOI
      10.17487/RFC5041, October 2007,\n              <https://www.rfc-editor.org/info/rfc5041>.\n
      \  [RFC5044]  Culley, P., Elzur, U., Recio, R., Bailey, S., and J.\n              Carrier,
      \"Marker PDU Aligned Framing for TCP\n              Specification\", RFC 5044,
      DOI 10.17487/RFC5044, October\n              2007, <https://www.rfc-editor.org/info/rfc5044>.\n
      \  [RFC5531]  Thurlow, R., \"RPC: Remote Procedure Call Protocol\n              Specification
      Version 2\", RFC 5531, DOI 10.17487/RFC5531,\n              May 2009, <https://www.rfc-editor.org/info/rfc5531>.\n
      \  [RFC5666]  Talpey, T. and B. Callaghan, \"Remote Direct Memory Access\n              Transport
      for Remote Procedure Call\", RFC 5666,\n              DOI 10.17487/RFC5666,
      January 2010,\n              <https://www.rfc-editor.org/info/rfc5666>.\n   [RFC6581]
      \ Kanevsky, A., Ed., Bestler, C., Ed., Sharp, R., and S.\n              Wise,
      \"Enhanced Remote Direct Memory Access (RDMA)\n              Connection Establishment\",
      RFC 6581, DOI 10.17487/RFC6581,\n              April 2012, <https://www.rfc-editor.org/info/rfc6581>.\n
      \  [RFC7530]  Haynes, T., Ed. and D. Noveck, Ed., \"Network File System\n              (NFS)
      Version 4 Protocol\", RFC 7530, DOI 10.17487/RFC7530,\n              March 2015,
      <https://www.rfc-editor.org/info/rfc7530>.\n   [RFC7861]  Adamson, A. and N.
      Williams, \"Remote Procedure Call (RPC)\n              Security Version 3\",
      RFC 7861, DOI 10.17487/RFC7861,\n              November 2016, <https://www.rfc-editor.org/info/rfc7861>.\n"
    title: 9.2.  Informative References
  title: 9.  References
- contents:
  - "Acknowledgments\n   Thanks to Christoph Hellwig and Devesh Sharma for suggesting
    this\n   approach, and to Tom Talpey and David Noveck for their expert\n   comments
    and review.  The author also wishes to thank Bill Baker and\n   Greg Marsden for
    their support of this work.  Also, thanks to expert\n   reviewers Sean Hefty and
    Dave Minturn.\n   Special thanks go to document shepherd Brian Pawlowski, Transport\n
    \  Area Director Magnus Westerlund, NFSV4 Working Group Chairs David\n   Noveck
    and Spencer Shepler, and NFSV4 Working Group Secretary Thomas\n   Haynes.\n"
  title: Acknowledgments
- contents:
  - "Author's Address\n   Charles Lever\n   Oracle Corporation\n"
  title: Author's Address
