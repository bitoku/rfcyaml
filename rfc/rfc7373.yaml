- contents:
  - "      Textual Representation of IP Flow Information Export (IPFIX)\n                          Abstract
    Data Types\n"
  title: __initial_text__
- contents:
  - "Abstract\n   This document defines UTF-8 representations for IP Flow Information\n
    \  Export (IPFIX) abstract data types (ADTs) to support interoperable\n   usage
    of the IPFIX Information Elements with protocols based on\n   textual encodings.\n"
  title: Abstract
- contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This
    document is a product of the Internet Engineering Task Force\n   (IETF).  It represents
    the consensus of the IETF community.  It has\n   received public review and has
    been approved for publication by the\n   Internet Engineering Steering Group (IESG).
    \ Further information on\n   Internet Standards is available in Section 2 of RFC
    5741.\n   Information about the current status of this document, any errata,\n
    \  and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc7373.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2014 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n
    \  (http://trustee.ietf.org/license-info) in effect on the date of\n   publication
    of this document.  Please review these documents\n   carefully, as they describe
    your rights and restrictions with respect\n   to this document.  Code Components
    extracted from this document must\n   include Simplified BSD License text as described
    in Section 4.e of\n   the Trust Legal Provisions and are provided without warranty
    as\n   described in the Simplified BSD License.\n"
  title: Copyright Notice
- contents:
  - "Table of Contents\n   1.  Introduction  . . . . . . . . . . . . . . . . . . .
    . . . . .   2\n   2.  Terminology . . . . . . . . . . . . . . . . . . . . . .
    . . .   3\n   3.  Identifying Information Elements  . . . . . . . . . . . . .
    .   3\n   4.  Data Type Encodings . . . . . . . . . . . . . . . . . . . . .   3\n
    \    4.1.  octetArray  . . . . . . . . . . . . . . . . . . . . . . .   4\n     4.2.
    \ unsigned8, unsigned16, unsigned32, and unsigned64 . . . .   4\n     4.3.  signed8,
    signed16, signed32, and signed64 . . . . . . . .   5\n     4.4.  float32 and float64
    . . . . . . . . . . . . . . . . . . .   6\n     4.5.  boolean . . . . . . . .
    . . . . . . . . . . . . . . . . .   7\n     4.6.  macAddress  . . . . . . . .
    . . . . . . . . . . . . . . .   7\n     4.7.  string  . . . . . . . . . . . .
    . . . . . . . . . . . . .   7\n     4.8.  The dateTime ADTs . . . . . . . . .
    . . . . . . . . . . .   8\n     4.9.  ipv4Address . . . . . . . . . . . . . .
    . . . . . . . . .   8\n     4.10. ipv6Address . . . . . . . . . . . . . . . .
    . . . . . . .   9\n     4.11. basicList, subTemplateList, and subTemplateMultiList
    \ . .   9\n   5.  Security Considerations . . . . . . . . . . . . . . . . . .
    .   9\n   6.  References  . . . . . . . . . . . . . . . . . . . . . . . . .  10\n
    \    6.1.  Normative References  . . . . . . . . . . . . . . . . . .  10\n     6.2.
    \ Informative References  . . . . . . . . . . . . . . . . .  11\n   Appendix A.
    \ Example  . . . . . . . . . . . . . . . . . . . . . .  13\n   Acknowledgments
    . . . . . . . . . . . . . . . . . . . . . . . . .  14\n   Author's Address  .
    . . . . . . . . . . . . . . . . . . . . . . .\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   The IP Flow Information Export (IPFIX) Information Model
    [RFC7012]\n   provides a set of abstract data types (ADTs) for the IANA \"IPFIX\n
    \  Information Elements\" registry [IANA-IPFIX], which contains a rich\n   set
    of Information Elements for description of information about\n   network entities
    and network traffic data, and abstract data types\n   for these Information Elements.
    \ The IPFIX Protocol Specification\n   [RFC7011], in turn, defines a big-endian
    binary encoding for these\n   abstract data types suitable for use with the IPFIX
    protocol.\n   However, present and future operations and management protocols
    and\n   applications may use textual encodings, and generic framing and\n   structure,
    as in JSON [RFC7159] or XML.  A definition of canonical\n   textual encodings
    for the IPFIX abstract data types would allow this\n   set of Information Elements
    to be used for such applications and for\n   these applications to interoperate
    with IPFIX applications at the\n   Information Element definition level.\n   Note
    that templating or other mechanisms used for data description\n   for such applications
    and protocols are application specific and,\n   therefore, out of scope for this
    document: only Information Element\n   identification and value representation
    are defined here.\n   In most cases where a textual representation will be used,
    an\n   explicit tradeoff is made for human readability or manipulability\n   over
    compactness; this assumption is used in defining standard\n   representations
    of IPFIX ADTs.\n"
  title: 1.  Introduction
- contents:
  - "2.  Terminology\n   Capitalized terms defined in the IPFIX Protocol Specification\n
    \  [RFC7011] and the IPFIX Information Model [RFC7012] are used in this\n   document
    as defined in those documents.  The key words \"MUST\", \"MUST\n   NOT\", \"REQUIRED\",
    \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\",\n   \"RECOMMENDED\", \"MAY\",
    and \"OPTIONAL\" in this document are to be\n   interpreted as described in [RFC2119].
    \ In addition, this document\n   defines the following terminology for its own
    use:\n   Enclosing Context\n      A textual representation of Information Element
    values is applied\n      to use the IPFIX Information Model within some existing
    textual\n      format (e.g., XML [W3C-XML] and JSON [RFC7159]).  This outer\n
    \     format is referred to as the Enclosing Context within this\n      document.
    \ Enclosing Contexts define escaping and quoting rules\n      for represented
    values.\n"
  title: 2.  Terminology
- contents:
  - "3.  Identifying Information Elements\n   The \"IPFIX Information Elements\" registry
    [IANA-IPFIX] defines a set\n   of Information Elements numbered by Information
    Element identifiers\n   and named for human readability.  These Information Element\n
    \  identifiers are meant for use with the IPFIX protocol and have little\n   meaning
    when applying the \"IPFIX Information Elements\" registry to\n   textual representations.\n
    \  Instead, applications using textual representations of Information\n   Elements
    use Information Element names to identify them; see\n   Appendix A for examples
    illustrating this principle.\n"
  title: 3.  Identifying Information Elements
- contents:
  - "4.  Data Type Encodings\n   Each subsection of this section defines a textual
    encoding for the\n   abstract data types defined in [RFC7012].  This section uses
    ABNF,\n   including the Core Rules in Appendix B of [RFC5234], to describe the\n
    \  format of textual representations of IPFIX abstract data types.\n   If future
    documents update [RFC7012] to add new abstract data types\n   to the IPFIX Information
    Model, and those abstract data types are\n   generally useful, this document will
    also need to be updated in order\n   to define textual encodings for those abstract
    data types.\n"
  - contents:
    - "4.1.  octetArray\n   If the Enclosing Context defines a representation for
      binary objects,\n   that representation SHOULD be used.\n   Otherwise, since
      the goal of textual representation of Information\n   Elements is human readability
      over compactness, the values of\n   Information Elements of the octetArray data
      type are represented as a\n   string of pairs of hexadecimal digits, one pair
      per byte, in the\n   order the bytes would appear on the wire were the octetArray
      encoded\n   directly in IPFIX per [RFC7011].  Whitespace may occur between any\n
      \  pair of digits to assist in human readability of the string but is\n   not
      necessary.  In ABNF:\n   hex-octet = 2HEXDIG\n   octetarray = hex-octet *([WSP]
      hex-octet)\n"
    title: 4.1.  octetArray
  - contents:
    - "4.2.  unsigned8, unsigned16, unsigned32, and unsigned64\n   If the Enclosing
      Context defines a representation for unsigned\n   integers, that representation
      SHOULD be used.\n   In the special case where the unsigned Information Element
      has\n   identifier semantics and refers to a set of codepoints either in an\n
      \  external registry, in a sub-registry, or directly in the description\n   of
      the Information Element, then the name or short description for\n   that codepoint
      as a string MAY be used to improve readability.\n   Otherwise, the values of
      Information Elements of an unsigned integer\n   type may be represented as either
      unprefixed base-10 (decimal)\n   strings, base-16 (hexadecimal) strings prefixed
      by \"0x\", or base-2\n   (binary) strings prefixed by \"0b\".  In ABNF:\n   unsigned
      = 1*DIGIT / \"0x\" 1*HEXDIG / \"0b\" 1*BIT\n   Leading zeroes are allowed in
      any representation and do not signify\n   base-8 (octal) representation.  Binary
      representation is intended for\n   use with Information Elements with flag semantics,
      but it can be used\n   in any case.\n   The encoded value MUST be in range for
      the corresponding abstract\n   data type or Information Element.  Values that
      are out of range are\n   interpreted as clipped to the implicit range for the
      Information\n   Element as defined by the abstract data type or to the explicit
      range\n   of the Information Element if defined.  Minimum and maximum values\n
      \  for abstract data types are shown in Table 1 below.\n              +------------+---------+----------------------+\n
      \             |       type | minimum |              maximum |\n              +------------+---------+----------------------+\n
      \             |  unsigned8 |       0 |                  255 |\n              |
      unsigned16 |       0 |                65535 |\n              | unsigned32 |
      \      0 |           4294967295 |\n              | unsigned64 |       0 | 18446744073709551615
      |\n              +------------+---------+----------------------+\n       Table
      1: Ranges for Unsigned Abstract Data Types (in Decimal)\n"
    title: 4.2.  unsigned8, unsigned16, unsigned32, and unsigned64
  - contents:
    - "4.3.  signed8, signed16, signed32, and signed64\n   If the Enclosing Context
      defines a representation for signed\n   integers, that representation SHOULD
      be used.\n   Otherwise, the values of Information Elements of signed integer
      types\n   are represented as optionally prefixed base-10 (decimal) strings.
      \ In\n   ABNF:\n   sign = \"+\" / \"-\"\n   signed = [sign] 1*DIGIT\n   If the
      sign is omitted, it is assumed to be positive.  Leading zeroes\n   are allowed
      and do not signify base-8 (octal) encoding.  The\n   representation \"-0\" is
      explicitly allowed and is equal to zero.\n   The encoded value MUST be in range
      for the corresponding abstract\n   data type or Information Element.  Values
      that are out of range are\n   to be interpreted as clipped to the implicit range
      for the\n   Information Element as defined by the abstract data type or to the\n
      \  explicit range of the Information Element if defined.  Minimum and\n   maximum
      values for abstract data types are shown in Table 2 below.\n        +----------+----------------------+----------------------+\n
      \       |     type |              minimum |              maximum |\n        +----------+----------------------+----------------------+\n
      \       |  signed8 |                 -128 |                 +127 |\n        |
      signed16 |               -32768 |               +32767 |\n        | signed32
      |          -2147483648 |          +2147483647 |\n        | signed64 | -9223372036854775808
      | +9223372036854775807 |\n        +----------+----------------------+----------------------+\n
      \       Table 2: Ranges for Signed Abstract Data Types (in Decimal)\n"
    title: 4.3.  signed8, signed16, signed32, and signed64
  - contents:
    - "4.4.  float32 and float64\n   If the Enclosing Context defines a representation
      for floating-point\n   numbers, that representation SHOULD be used.\n   Otherwise,
      the values of Information Elements of float32 or float64\n   types are represented
      as optionally sign-prefixed, optionally base-10\n   exponent-suffixed, floating-point
      decimal numbers, as in\n   [IEEE.754.2008].  The special strings \"NaN\", \"+inf\",
      and \"-inf\"\n   represent \"not a number\", \"positive infinity\", and \"negative\n
      \  infinity\", respectively.\n   In ABNF:\n   sign = \"+\" / \"-\"\n   exponent
      = \"e\" [sign] 1*3DIGIT\n   right-decimal = \".\" 1*DIGIT\n   mantissa = 1*DIGIT
      [right-decimal]\n   num = [sign] mantissa [exponent]\n   naninf = \"NaN\" /
      (sign \"inf\")\n   float = num / naninf\n   The expressed value is ( mantissa
      * 10 ^ exponent ).  If the sign is\n   omitted, it is assumed to be positive.
      \ If the exponent is omitted,\n   it is assumed to be zero.  Leading zeroes
      may appear in the mantissa\n   and/or the exponent.  Values MUST be within range
      for single- or\n   double-precision numbers as defined in [IEEE.754.2008]; finite
      values\n   outside the appropriate range are to be interpreted as clamped to
      be\n   within the range.  Note that no more than three digits are required\n
      \  or allowed for exponents in this encoding due to these ranges.\n   Note that
      since this representation is meant for human readability,\n   writers MAY sacrifice
      precision to use a more human-readable\n   representation of a given value,
      at the expense of the ability to\n   recover the exact bit pattern at the reader.
      \ Therefore, decoders\n   MUST NOT assume that the represented values are exactly
      comparable\n   for equality.\n"
    title: 4.4.  float32 and float64
  - contents:
    - "4.5.  boolean\n   If the Enclosing Context defines a representation for boolean
      values,\n   that representation SHOULD be used.\n   Otherwise, a true boolean
      value is represented by the literal string\n   \"true\" and a false boolean
      value by the literal string \"false\".  In\n   ABNF:\n   boolean-true = \"true\"\n
      \  boolean-false = \"false\"\n   boolean = boolean-true / boolean-false\n"
    title: 4.5.  boolean
  - contents:
    - "4.6.  macAddress\n   Media Access Control (MAC) addresses are represented as
      IEEE 802\n   MAC-48 addresses, hexadecimal bytes with the most significant byte\n
      \  first, separated by colons.  In ABNF:\n   hex-octet = 2HEXDIG\n   macaddress
      = hex-octet 5( \":\" hex-octet )\n"
    title: 4.6.  macAddress
  - contents:
    - "4.7.  string\n   As Information Elements of the string type are simply Unicode
      strings\n   (encoded as UTF-8 when appearing in Data Sets in IPFIX Messages\n
      \  [RFC7011]), they are represented directly, using the Unicode encoding\n   rules
      and quoting and escaping rules of the Enclosing Context.\n   If the Enclosing
      Context cannot natively represent Unicode\n   characters, the escaping facility
      provided by the Enclosing Context\n   MUST be used for nonrepresentable characters.
      \ Additionally, strings\n   containing characters reserved in the Enclosing
      Context (e.g.,\n   control characters, markup characters, and quotes) MUST be
      escaped or\n   quoted according to the rules of the Enclosing Context.\n   It
      is presumed that the Enclosing Context has sufficient restrictions\n   on the
      use of Unicode to prevent the unsafe use of nonprinting and\n   control characters.
      \ As there is no accepted solution for the\n   processing and safe display of
      mixed-direction strings, mixed-\n   direction strings should be avoided using
      this encoding.  Note also\n   that since this document presents no additional
      requirements for the\n   normalization of Unicode strings, care must be taken
      when comparing\n   strings using this encoding; direct byte-pattern comparisons
      are not\n   sufficient for determining whether two strings are equivalent.  See\n
      \  [RFC6885] and [PRECIS] for more on possible unexpected results and\n   related
      risks in comparing Unicode strings.\n"
    title: 4.7.  string
  - contents:
    - "4.8.  The dateTime ADTs\n   Timestamp abstract data types are represented generally
      as in\n   [RFC3339], with two important differences.  First, all IPFIX\n   timestamps
      are expressed in terms of UTC, so textual representations\n   of these Information
      Elements are explicitly in UTC as well.  Time\n   zone offsets are, therefore,
      not required or supported.  Second,\n   there are four timestamp abstract data
      types, separated by the\n   precision that they can express.  Fractional seconds
      are omitted in\n   dateTimeSeconds, expressed in milliseconds in dateTimeMilliseconds,\n
      \  and so on.\n   In ABNF, taken from [RFC3339] and modified as follows:\n   date-fullyear
      \  = 4DIGIT\n   date-month      = 2DIGIT  ; 01-12\n   date-mday       = 2DIGIT
      \ ; 01-28, 01-29, 01-30, 01-31\n   time-hour       = 2DIGIT  ; 00-23\n   time-minute
      \    = 2DIGIT  ; 00-59\n   time-second     = 2DIGIT  ; 00-58, 00-59, 00-60\n
      \  time-msec       = \".\" 3DIGIT\n   time-usec       = \".\" 6DIGIT\n   time-nsec
      \      = \".\" 9DIGIT\n   full-date       = date-fullyear \"-\" date-month \"-\"
      date-mday\n   integer-time    = time-hour \":\" time-minute \":\" time-second\n
      \  datetimeseconds      = full-date \"T\" integer-time\n   datetimemilliseconds
      = full-date \"T\" integer-time \".\" time-msec\n   datetimemicroseconds = full-date
      \"T\" integer-time \".\" time-usec\n   datetimenanoseconds  = full-date \"T\"
      integer-time \".\" time-nsec\n"
    title: 4.8.  The dateTime ADTs
  - contents:
    - "4.9.  ipv4Address\n   IP version 4 addresses are represented in dotted-quad
      format, most\n   significant byte first, as it would be in a Uniform Resource\n
      \  Identifier [RFC3986]; the ABNF for an IPv4 address is taken from\n   [RFC3986]
      and reproduced below:\n   dec-octet   = DIGIT                 ; 0-9\n               /
      %x31-39 DIGIT         ; 10-99\n               / \"1\" 2DIGIT            ; 100-199\n
      \              / \"2\" %x30-34 DIGIT     ; 200-249\n               / \"25\"
      %x30-35          ; 250-255\n   ipv4address = dec-octet 3( \".\" dec-octet )\n"
    title: 4.9.  ipv4Address
  - contents:
    - "4.10.  ipv6Address\n   IP version 6 addresses are represented as in Section
      2.2 of\n   [RFC4291], as updated by Section 4 of [RFC5952].  The ABNF for an\n
      \  IPv6 address is taken from [RFC3986] and reproduced below, using the\n   ipv4address
      production from the previous section:\n   ls32        = ( h16 \":\" h16 ) /
      ipv4address\n               ; least significant 32 bits of address\n   h16         =
      1*4HEXDIG\n               ; 16 bits of address represented in hexadecimal\n
      \              ; zeroes to be suppressed as in RFC 5952\n   ipv6address =                            6(
      h16 \":\" ) ls32\n               /                       \"::\" 5( h16 \":\"
      ) ls32\n               / [               h16 ] \"::\" 4( h16 \":\" ) ls32\n
      \              / [     h16 \":\"   h16 ] \"::\" 3( h16 \":\" ) ls32\n               /
      [ *2( h16 \":\" ) h16 ] \"::\" 2( h16 \":\" ) ls32\n               / [ *3( h16
      \":\" ) h16 ] \"::\"    h16 \":\"   ls32\n               / [ *4( h16 \":\" )
      h16 ] \"::\"              ls32\n               / [ *5( h16 \":\" ) h16 ] \"::\"
      \             h16\n               / [ *6( h16 \":\" ) h16 ] \"::\"\n"
    title: 4.10.  ipv6Address
  - contents:
    - "4.11.  basicList, subTemplateList, and subTemplateMultiList\n   These abstract
      data types, defined for IPFIX Structured Data\n   [RFC6313], do not represent
      actual data types; they are instead\n   designed to provide a mechanism by which
      complex structure can be\n   represented in IPFIX below the template level.
      \ It is assumed that\n   protocols using textual Information Element representation
      will\n   provide their own structure.  Therefore, Information Elements of\n
      \  these data types MUST NOT be used in textual representations.\n"
    title: 4.11.  basicList, subTemplateList, and subTemplateMultiList
  title: 4.  Data Type Encodings
- contents:
  - "5.  Security Considerations\n   The security considerations for the IPFIX protocol
    [RFC7011] apply.\n   Implementations of decoders of Information Element values
    using these\n   representations must take care to correctly handle invalid input,
    but\n   the encodings presented here are not special in that respect.\n   The
    encoding specified in this document, and representations that may\n   be built
    upon it, are specifically not intended for the storage of\n   data.  However,
    since storage of data in the format in which it is\n   exchanged is a very common
    practice, and the ubiquity of tools for\n   indexing and searching text significantly
    increases the ease of\n   searching and the risk of privacy-sensitive data being
    accidentally\n   indexed or searched, the privacy considerations in Section 11.8
    of\n   [RFC7011] are especially important to observe when storing data using\n
    \  the encoding specified in this document that was derived from the\n   measurement
    of network traffic.\n   When using representations based on this encoding to transmit
    or\n   store network traffic data, consider omitting especially privacy-\n   sensitive
    values by not representing the columns or keys containing\n   those values, as
    in black-marker anonymization as discussed in\n   Section 4 of [RFC6235].  Other
    anonymization techniques described in\n   [RFC6235] may also be useful in these
    situations.\n   The encodings for all abstract data types other than 'string'
    are\n   defined in such a way as to be representable in the US-ASCII\n   character
    set and, therefore, should be unproblematic for all\n   Enclosing Contexts.  However,
    the 'string' abstract data type may be\n   vulnerable to problems with ill-formed
    UTF-8 strings as discussed in\n   Section 6.1.6 of [RFC7011]; see [UTF8-EXPLOIT]
    for background.\n"
  title: 5.  Security Considerations
- contents:
  - '6.  References

    '
  - contents:
    - "6.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use
      in RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119, March
      1997,\n              <http://www.rfc-editor.org/info/rfc2119>.\n   [RFC3339]
      \ Klyne, G., Ed. and C. Newman, \"Date and Time on the\n              Internet:
      Timestamps\", RFC 3339, July 2002,\n              <http://www.rfc-editor.org/info/rfc3986>.\n
      \  [RFC3986]  Berners-Lee, T., Fielding, R., and L. Masinter, \"Uniform\n              Resource
      Identifier (URI): Generic Syntax\", STD 66, RFC\n              3986, January
      2005,\n              <http://www.rfc-editor.org/info/rfc3986>.\n   [RFC4291]
      \ Hinden, R. and S. Deering, \"IP Version 6 Addressing\n              Architecture\",
      RFC 4291, February 2006,\n              <http://www.rfc-editor.org/info/rfc4291>.\n
      \  [RFC5234]  Crocker, D. and P. Overell, \"Augmented BNF for Syntax\n              Specifications:
      ABNF\", STD 68, RFC 5234, January 2008,\n              <http://www.rfc-editor.org/info/rfc5234>.\n
      \  [RFC5952]  Kawamura, S. and M. Kawashima, \"A Recommendation for IPv6\n              Address
      Text Representation\", RFC 5952, August 2010,\n              <http://www.rfc-editor.org/info/rfc5952>.\n
      \  [RFC7011]  Claise, B., Trammell, B., and P. Aitken, \"Specification of\n
      \             the IP Flow Information Export (IPFIX) Protocol for the\n              Exchange
      of Flow Information\", STD 77, RFC 7011, September\n              2013, <http://www.rfc-editor.org/info/rfc7011>.\n"
    title: 6.1.  Normative References
  - contents:
    - "6.2.  Informative References\n   [IANA-IPFIX]\n              IANA, \"IPFIX
      Information Elements\",\n              <http://www.iana.org/assignments/ipfix/>.\n
      \  [IEEE.754.2008]\n              Institute of Electrical and Electronics Engineers,
      \"IEEE\n              Standard for Floating-Point Arithmetic\", IEEE Standard\n
      \             754, August 2008.\n   [PRECIS]   Saint-Andre, P. and M. Blanchet,
      \"PRECIS Framework:\n              Preparation and Comparison of Internationalized
      Strings in\n              Application Protocols\", Work in Progress, draft-ietf-\n
      \             precis-framework-18, September 2014.\n   [RFC6235]  Boschi, E.
      and B. Trammell, \"IP Flow Anonymization\n              Support\", RFC 6235,
      May 2011,\n              <http://www.rfc-editor.org/info/rfc6235>.\n   [RFC6313]
      \ Claise, B., Dhandapani, G., Aitken, P., and S. Yates,\n              \"Export
      of Structured Data in IP Flow Information Export\n              (IPFIX)\", RFC
      6313, July 2011,\n              <http://www.rfc-editor.org/info/rfc6313>.\n
      \  [RFC6885]  Blanchet, M. and A. Sullivan, \"Stringprep Revision and\n              Problem
      Statement for the Preparation and Comparison of\n              Internationalized
      Strings (PRECIS)\", RFC 6885, March 2013,\n              <http://www.rfc-editor.org/info/rfc6885>.\n
      \  [RFC7012]  Claise, B. and B. Trammell, \"Information Model for IP Flow\n
      \             Information Export (IPFIX)\", RFC 7012, September 2013,\n              <http://www.rfc-editor.org/info/rfc7012>.\n
      \  [RFC7013]  Trammell, B. and B. Claise, \"Guidelines for Authors and\n              Reviewers
      of IP Flow Information Export (IPFIX)\n              Information Elements\",
      BCP 184, RFC 7013, September 2013,\n              <http://www.rfc-editor.org/info/rfc7013>.\n
      \  [RFC7159]  Bray, T., \"The JavaScript Object Notation (JSON) Data\n              Interchange
      Format\", RFC 7159, March 2014,\n              <http://www.rfc-editor.org/info/rfc7159>.\n
      \  [UTF8-EXPLOIT]\n              Davis, M. and M. Suignard, \"Unicode Technical
      Report #36:\n              Unicode Security Considerations\", The Unicode Consortium,\n
      \             November 2012.\n   [W3C-XML]  Bray, T., Paoli, J., Sperberg-McQueen,
      C., Maler, E., and\n              F. Yergeau, \"Extensible Markup Language (XML)
      1.0 (Fifth\n              Edition)\", W3C Recommendation REC-xml, November 2008.\n"
    title: 6.2.  Informative References
  title: 6.  References
- contents:
  - "Appendix A.  Example\n   In this section, we examine an IPFIX Template and a
    Data Record\n   defined by that Template and show how that Data Record would be\n
    \  represented in JSON according to the specification in this document.\n   Note
    that this is specifically NOT a recommendation for a particular\n   representation
    but merely an illustration of the encodings in this\n   document; the quoting
    and formatting in the example are JSON\n   specific.\n   Figure 1 shows a Template
    in Information Element Specifier (IESpec)\n   format as defined in Section 10.1
    of [RFC7013]; a corresponding JSON\n   object representing a record defined by
    this template in the text\n   format specified in this document is shown in Figure
    2.\n         flowStartMilliseconds(152)<dateTimeMilliseconds>[8]\n         flowEndMilliseconds(153)<dateTimeMilliseconds>[8]\n
    \        octetDeltaCount(1)<unsigned64>[4]\n         packetDeltaCount(2)<unsigned64>[4]\n
    \        sourceIPv6Address(27)<ipv6Address>[16]{key}\n         destinationIPv6Address(28)<ipv6Address>[16]{key}\n
    \        sourceTransportPort(7)<unsigned16>[2]{key}\n         destinationTransportPort(11)<unsigned16>[2]{key}\n
    \        protocolIdentifier(4)<unsigned8>[1]{key}\n         tcpControlBits(6)<unsigned16>[2]\n
    \        flowEndReason(136)<unsigned8>[1]\n              Figure 1: Sample Flow
    Template in IESpec Format\n           {\n               \"flowStartMilliseconds\":
    \"2012-11-05T18:31:01.135\",\n               \"flowEndMilliseconds\": \"2012-11-05T18:31:02.880\",\n
    \              \"octetDeltaCount\": 195383,\n               \"packetDeltaCount\":
    88,\n               \"sourceIPv6Address\": \"2001:db8:c:1337::2\",\n               \"destinationIPv6Address\":
    \"2001:db8:c:1337::3\",\n               \"sourceTransportPort\": 80,\n               \"destinationTransportPort\":
    32991,\n               \"protocolIdentifier\": \"tcp\",\n               \"tcpControlBits\":
    19,\n               \"flowEndReason\": 3\n           }\n               Figure
    2: JSON Object Containing Sample Flow\n"
  title: Appendix A.  Example
- contents:
  - "Acknowledgments\n   Thanks to Paul Aitken, Benoit Claise, Andrew Feren, Juergen
    Quittek,\n   David Black, and the IESG for their reviews and comments.  Thanks
    to\n   Dave Thaler and Stephan Neuhaus for discussions that improved the\n   floating-point
    representation section.  This work is materially\n   supported by the European
    Union Seventh Framework Programme under\n   grant agreement 318627 mPlane.\n"
  title: Acknowledgments
- contents:
  - "Author's Address\n   Brian Trammell\n   Swiss Federal Institute of Technology
    Zurich\n   Gloriastrasse 35\n   8092 Zurich\n   Switzerland\n   Phone: +41 44
    632 70 13\n   EMail: ietf@trammell.ch\n"
  title: Author's Address
