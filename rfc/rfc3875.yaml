- title: __initial_text__
  contents:
  - '             The Common Gateway Interface (CGI) Version 1.1

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard of any kind.  Distribution of\
    \ this\n   memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2004).\n"
- title: IESG Note
  contents:
  - "IESG Note\n   This document is not a candidate for any level of Internet Standard.\n\
    \   The IETF disclaims any knowledge of the fitness of this document for\n   any\
    \ purpose, and in particular notes that it has not had IETF review\n   for such\
    \ things as security, congestion control or inappropriate\n   interaction with\
    \ deployed protocols.  The RFC Editor has chosen to\n   publish this document\
    \ at its discretion.  Readers of this document\n   should exercise caution in\
    \ evaluating its value for implementation\n   and deployment.\n"
- title: Abstract
  contents:
  - "Abstract\n   The Common Gateway Interface (CGI) is a simple interface for running\n\
    \   external programs, software or gateways under an information server\n   in\
    \ a platform-independent manner.  Currently, the supported\n   information servers\
    \ are HTTP servers.\n   The interface has been in use by the World-Wide Web (WWW)\
    \ since 1993.\n   This specification defines the 'current practice' parameters\
    \ of the\n   'CGI/1.1' interface developed and documented at the U.S. National\n\
    \   Centre for Supercomputing Applications.  This document also defines\n   the\
    \ use of the CGI/1.1 interface on UNIX(R) and other, similar\n   systems.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction. . . . . . . . . . . . . . . . . . . .\
    \ . . . . .   4\n       1.1. Purpose  . . . . . . . . . . . . . . . . . . . .\
    \ . . . .   4\n       1.2. Requirements . . . . . . . . . . . . . . . . . . .\
    \ . . .   4\n       1.3. Specifications . . . . . . . . . . . . . . . . . . .\
    \ . .   4\n       1.4. Terminology  . . . . . . . . . . . . . . . . . . . . .\
    \ .   5\n   2.  Notational Conventions and Generic Grammar. . . . . . . . . .\
    \   5\n       2.1. Augmented BNF  . . . . . . . . . . . . . . . . . . . . .  \
    \ 5\n       2.2. Basic Rules  . . . . . . . . . . . . . . . . . . . . . .   6\n\
    \       2.3. URL Encoding . . . . . . . . . . . . . . . . . . . . . .   7\n  \
    \ 3.  Invoking the Script . . . . . . . . . . . . . . . . . . . . .   8\n    \
    \   3.1. Server Responsibilities  . . . . . . . . . . . . . . . .   8\n      \
    \ 3.2. Script Selection . . . . . . . . . . . . . . . . . . . .   9\n       3.3.\
    \ The Script-URI . . . . . . . . . . . . . . . . . . . . .   9\n       3.4. Execution\
    \  . . . . . . . . . . . . . . . . . . . . . . .  10\n   4.  The CGI Request .\
    \ . . . . . . . . . . . . . . . . . . . . . .  10\n       4.1. Request Meta-Variables\
    \ . . . . . . . . . . . . . . . . .  10\n            4.1.1.  AUTH_TYPE. . . .\
    \ . . . . . . . . . . . . . . . .  11\n            4.1.2.  CONTENT_LENGTH . .\
    \ . . . . . . . . . . . . . . .  12\n            4.1.3.  CONTENT_TYPE . . . .\
    \ . . . . . . . . . . . . . .  12\n            4.1.4.  GATEWAY_INTERFACE. . .\
    \ . . . . . . . . . . . . .  13\n            4.1.5.  PATH_INFO. . . . . . . .\
    \ . . . . . . . . . . . .  13\n            4.1.6.  PATH_TRANSLATED. . . . . .\
    \ . . . . . . . . . . .  14\n            4.1.7.  QUERY_STRING . . . . . . . .\
    \ . . . . . . . . . .  15\n            4.1.8.  REMOTE_ADDR. . . . . . . . . .\
    \ . . . . . . . . .  15\n            4.1.9.  REMOTE_HOST. . . . . . . . . . .\
    \ . . . . . . . .  16\n            4.1.10. REMOTE_IDENT . . . . . . . . . . .\
    \ . . . . . . .  16\n            4.1.11. REMOTE_USER. . . . . . . . . . . . .\
    \ . . . . . .  16\n            4.1.12. REQUEST_METHOD . . . . . . . . . . . .\
    \ . . . . .  17\n            4.1.13. SCRIPT_NAME. . . . . . . . . . . . . . .\
    \ . . . .  17\n            4.1.14. SERVER_NAME. . . . . . . . . . . . . . . .\
    \ . . .  17\n            4.1.15. SERVER_PORT. . . . . . . . . . . . . . . . .\
    \ . .  18\n            4.1.16. SERVER_PROTOCOL. . . . . . . . . . . . . . . .\
    \ .  18\n            4.1.17. SERVER_SOFTWARE. . . . . . . . . . . . . . . . .\
    \  19\n            4.1.18. Protocol-Specific Meta-Variables . . . . . . . .  19\n\
    \       4.2. Request Message-Body . . . . . . . . . . . . . . . . . .  20\n  \
    \     4.3. Request Methods  . . . . . . . . . . . . . . . . . . . .  20\n    \
    \        4.3.1.  GET. . . . . . . . . . . . . . . . . . . . . . .  20\n      \
    \      4.3.2.  POST . . . . . . . . . . . . . . . . . . . . . .  21\n        \
    \    4.3.3.  HEAD . . . . . . . . . . . . . . . . . . . . . .  21\n          \
    \  4.3.4.  Protocol-Specific Methods. . . . . . . . . . . .  21\n       4.4. The\
    \ Script Command Line. . . . . . . . . . . . . . . . .  21\n   5.  NPH Scripts\
    \ . . . . . . . . . . . . . . . . . . . . . . . . .  22\n       5.1. Identification\
    \ . . . . . . . . . . . . . . . . . . . . .  22\n       5.2. NPH Response . .\
    \ . . . . . . . . . . . . . . . . . . . .  22\n   6.  CGI Response. . . . . .\
    \ . . . . . . . . . . . . . . . . . . .  23\n       6.1. Response Handling. .\
    \ . . . . . . . . . . . . . . . . . .  23\n       6.2. Response Types . . . .\
    \ . . . . . . . . . . . . . . . . .  23\n            6.2.1.  Document Response.\
    \ . . . . . . . . . . . . . . .  23\n            6.2.2.  Local Redirect Response.\
    \ . . . . . . . . . . . .  24\n            6.2.3.  Client Redirect Response .\
    \ . . . . . . . . . . .  24\n            6.2.4.  Client Redirect Response with\
    \ Document . . . . .  24\n       6.3. Response Header Fields . . . . . . . . .\
    \ . . . . . . . .  25\n            6.3.1.  Content-Type . . . . . . . . . . .\
    \ . . . . . . .  25\n            6.3.2.  Location . . . . . . . . . . . . . .\
    \ . . . . . .  26\n            6.3.3.  Status . . . . . . . . . . . . . . . .\
    \ . . . . .  26\n            6.3.4.  Protocol-Specific Header Fields. . . . .\
    \ . . . .  27\n            6.3.5.  Extension Header Fields. . . . . . . . . .\
    \ . . .  27\n       6.4. Response Message-Body. . . . . . . . . . . . . . . .\
    \ . .  28\n   7.  System Specifications . . . . . . . . . . . . . . . . . . .\
    \ .  28\n       7.1. AmigaDOS . . . . . . . . . . . . . . . . . . . . . . . .\
    \  28\n       7.2. UNIX . . . . . . . . . . . . . . . . . . . . . . . . . .  28\n\
    \       7.3. EBCDIC/POSIX . . . . . . . . . . . . . . . . . . . . . .  29\n  \
    \ 8.  Implementation. . . . . . . . . . . . . . . . . . . . . . . .  29\n    \
    \   8.1. Recommendations for Servers. . . . . . . . . . . . . . .  29\n      \
    \ 8.2. Recommendations for Scripts. . . . . . . . . . . . . . .  30\n   9.  Security\
    \ Considerations . . . . . . . . . . . . . . . . . . .  30\n       9.1. Safe Methods\
    \ . . . . . . . . . . . . . . . . . . . . . .  30\n       9.2. Header Fields Containing\
    \ Sensitive Information . . . . .  31\n       9.3. Data Privacy . . . . . . .\
    \ . . . . . . . . . . . . . . .  31\n       9.4. Information Security Model .\
    \ . . . . . . . . . . . . . .  31\n       9.5. Script Interference with the Server.\
    \ . . . . . . . . . .  31\n       9.6. Data Length and Buffering Considerations\
    \ . . . . . . . .  32\n       9.7. Stateless Processing . . . . . . . . . . .\
    \ . . . . . . .  32\n       9.8. Relative Paths . . . . . . . . . . . . . . .\
    \ . . . . . .  33\n       9.9. Non-parsed Header Output . . . . . . . . . . .\
    \ . . . . .  33\n   10. Acknowledgements. . . . . . . . . . . . . . . . . . .\
    \ . . . .  33\n   11. References. . . . . . . . . . . . . . . . . . . . . . .\
    \ . . .  33\n       11.1. Normative References. . . . . . . . . . . . . . . .\
    \ . .  33\n       11.2. Informative References. . . . . . . . . . . . . . . .\
    \ .  34\n   12. Authors' Addresses. . . . . . . . . . . . . . . . . . . . . .\
    \  35\n   13. Full Copyright Statement. . . . . . . . . . . . . . . . . . .  36\n"
- title: 1.  Introduction
  contents:
  - '1.  Introduction

    '
- title: 1.1.  Purpose
  contents:
  - "1.1.  Purpose\n   The Common Gateway Interface (CGI) [22] allows an HTTP [1],\
    \ [4]\n   server and a CGI script to share responsibility for responding to\n\
    \   client requests.  The client request comprises a Uniform Resource\n   Identifier\
    \ (URI) [11], a request method and various ancillary\n   information about the\
    \ request provided by the transport protocol.\n   The CGI defines the abstract\
    \ parameters, known as meta-variables,\n   which describe a client's request.\
    \  Together with a concrete\n   programmer interface this specifies a platform-independent\
    \ interface\n   between the script and the HTTP server.\n   The server is responsible\
    \ for managing connection, data transfer,\n   transport and network issues related\
    \ to the client request, whereas\n   the CGI script handles the application issues,\
    \ such as data access\n   and document processing.\n"
- title: 1.2.  Requirements
  contents:
  - "1.2.  Requirements\n   The key words 'MUST', 'MUST NOT', 'REQUIRED', 'SHALL',\
    \ 'SHALL NOT',\n   'SHOULD', 'SHOULD NOT', 'RECOMMENDED', 'MAY' and 'OPTIONAL'\
    \ in this\n   document are to be interpreted as described in BCP 14, RFC 2119\
    \ [3].\n   An implementation is not compliant if it fails to satisfy one or more\n\
    \   of the 'must' requirements for the protocols it implements.  An\n   implementation\
    \ that satisfies all of the 'must' and all of the\n   'should' requirements for\
    \ its features is said to be 'unconditionally\n   compliant'; one that satisfies\
    \ all of the 'must' requirements but not\n   all of the 'should' requirements\
    \ for its features is said to be\n   'conditionally compliant'.\n"
- title: 1.3.  Specifications
  contents:
  - "1.3.  Specifications\n   Not all of the functions and features of the CGI are\
    \ defined in the\n   main part of this specification.  The following phrases are\
    \ used to\n   describe the features that are not specified:\n   'system-defined'\n\
    \      The feature may differ between systems, but must be the same for\n    \
    \  different implementations using the same system.  A system will\n      usually\
    \ identify a class of operating systems.  Some systems are\n      defined in section\
    \ 7 of this document.  New systems may be defined\n      by new specifications\
    \ without revision of this document.\n   'implementation-defined'\n      The behaviour\
    \ of the feature may vary from implementation to\n      implementation; a particular\
    \ implementation must document its\n      behaviour.\n"
- title: 1.4.  Terminology
  contents:
  - "1.4.  Terminology\n   This specification uses many terms defined in the HTTP/1.1\n\
    \   specification [4]; however, the following terms are used here in a\n   sense\
    \ which may not accord with their definitions in that document,\n   or with their\
    \ common meaning.\n   'meta-variable'\n      A named parameter which carries information\
    \ from the server to the\n      script.  It is not necessarily a variable in the\
    \ operating\n      system's environment, although that is the most common\n  \
    \    implementation.\n   'script'\n      The software that is invoked by the server\
    \ according to this\n      interface.  It need not be a standalone program, but\
    \ could be a\n      dynamically-loaded or shared library, or even a subroutine\
    \ in the\n      server.  It might be a set of statements interpreted at run-time,\n\
    \      as the term 'script' is frequently understood, but that is not a\n    \
    \  requirement and within the context of this specification the term\n      has\
    \ the broader definition stated.\n   'server'\n      The application program that\
    \ invokes the script in order to\n      service requests from the client.\n"
- title: 2.  Notational Conventions and Generic Grammar
  contents:
  - '2.  Notational Conventions and Generic Grammar

    '
- title: 2.1.  Augmented BNF
  contents:
  - "2.1.  Augmented BNF\n   All of the mechanisms specified in this document are\
    \ described in\n   both prose and an augmented Backus-Naur Form (BNF) similar\
    \ to that\n   used by RFC 822 [13].  Unless stated otherwise, the elements are\n\
    \   case-sensitive.  This augmented BNF contains the following\n   constructs:\n\
    \   name = definition\n      The name of a rule and its definition are separated\
    \ by the equals\n      character ('=').  Whitespace is only significant in that\n\
    \      continuation lines of a definition are indented.\n   \"literal\"\n    \
    \  Double quotation marks (\") surround literal text, except for a\n      literal\
    \ quotation mark, which is surrounded by angle-brackets ('<'\n      and '>').\n\
    \   rule1 | rule2\n      Alternative rules are separated by a vertical bar ('|').\n\
    \   (rule1 rule2 rule3)\n      Elements enclosed in parentheses are treated as\
    \ a single element.\n   *rule\n      A rule preceded by an asterisk ('*') may\
    \ have zero or more\n      occurrences.  The full form is 'n*m rule' indicating\
    \ at least n\n      and at most m occurrences of the rule.  n and m are optional\n\
    \      decimal values with default values of 0 and infinity respectively.\n  \
    \ [rule]\n      An element enclosed in square brackets ('[' and ']') is optional,\n\
    \      and is equivalent to '*1 rule'.\n   N rule\n      A rule preceded by a\
    \ decimal number represents exactly N\n      occurrences of the rule.  It is equivalent\
    \ to 'N*N rule'.\n"
- title: 2.2.  Basic Rules
  contents:
  - "2.2.  Basic Rules\n   This specification uses a BNF-like grammar defined in terms\
    \ of\n   characters.  Unlike many specifications which define the bytes\n   allowed\
    \ by a protocol, here each literal in the grammar corresponds\n   to the character\
    \ it represents.  How these characters are represented\n   in terms of bits and\
    \ bytes within a system are either system-defined\n   or specified in the particular\
    \ context.  The single exception is the\n   rule 'OCTET', defined below.\n   The\
    \ following rules are used throughout this specification to\n   describe basic\
    \ parsing constructs.\n      alpha         = lowalpha | hialpha\n      lowalpha\
    \      = \"a\" | \"b\" | \"c\" | \"d\" | \"e\" | \"f\" | \"g\" | \"h\" |\n   \
    \                   \"i\" | \"j\" | \"k\" | \"l\" | \"m\" | \"n\" | \"o\" | \"\
    p\" |\n                      \"q\" | \"r\" | \"s\" | \"t\" | \"u\" | \"v\" | \"\
    w\" | \"x\" |\n                      \"y\" | \"z\"\n      hialpha       = \"A\"\
    \ | \"B\" | \"C\" | \"D\" | \"E\" | \"F\" | \"G\" | \"H\" |\n                \
    \      \"I\" | \"J\" | \"K\" | \"L\" | \"M\" | \"N\" | \"O\" | \"P\" |\n     \
    \                 \"Q\" | \"R\" | \"S\" | \"T\" | \"U\" | \"V\" | \"W\" | \"X\"\
    \ |\n                      \"Y\" | \"Z\"\n      digit         = \"0\" | \"1\"\
    \ | \"2\" | \"3\" | \"4\" | \"5\" | \"6\" | \"7\" |\n                      \"\
    8\" | \"9\"\n      alphanum      = alpha | digit\n      OCTET         = <any 8-bit\
    \ byte>\n      CHAR          = alpha | digit | separator | \"!\" | \"#\" | \"\
    $\" |\n                      \"%\" | \"&\" | \"'\" | \"*\" | \"+\" | \"-\" | \"\
    .\" | \"`\" |\n                      \"^\" | \"_\" | \"{\" | \"|\" | \"}\" | \"\
    ~\" | CTL\n      CTL           = <any control character>\n      SP           \
    \ = <space character>\n      HT            = <horizontal tab character>\n    \
    \  NL            = <newline>\n      LWSP          = SP | HT | NL\n      separator\
    \     = \"(\" | \")\" | \"<\" | \">\" | \"@\" | \",\" | \";\" | \":\" |\n    \
    \                  \"\\\" | <\"> | \"/\" | \"[\" | \"]\" | \"?\" | \"=\" | \"\
    {\" |\n                      \"}\" | SP | HT\n      token         = 1*<any CHAR\
    \ except CTLs or separators>\n      quoted-string = <\"> *qdtext <\">\n      qdtext\
    \        = <any CHAR except <\"> and CTLs but including LWSP>\n      TEXT    \
    \      = <any printable character>\n   Note that newline (NL) need not be a single\
    \ control character, but\n   can be a sequence of control characters.  A system\
    \ MAY define TEXT to\n   be a larger set of characters than <any CHAR excluding\
    \ CTLs but\n   including LWSP>.\n"
- title: 2.3.  URL Encoding
  contents:
  - "2.3.  URL Encoding\n   Some variables and constructs used here are described\
    \ as being\n   'URL-encoded'.  This encoding is described in section 2 of RFC\
    \ 2396\n   [2].  In a URL-encoded string an escape sequence consists of a\n  \
    \ percent character (\"%\") followed by two hexadecimal digits, where the\n  \
    \ two hexadecimal digits form an octet.  An escape sequence represents\n   the\
    \ graphic character that has the octet as its code within the\n   US-ASCII [9]\
    \ coded character set, if it exists.  Currently there is\n   no provision within\
    \ the URI syntax to identify which character set\n   non-ASCII codes represent,\
    \ so CGI handles this issue on an ad-hoc\n   basis.\n   Note that some unsafe\
    \ (reserved) characters may have different\n   semantics when encoded.  The definition\
    \ of which characters are\n   unsafe depends on the context; see section 2 of\
    \ RFC 2396 [2], updated\n   by RFC 2732 [7], for an authoritative treatment. \
    \ These reserved\n   characters are generally used to provide syntactic structure\
    \ to the\n   character string, for example as field separators.  In all cases,\
    \ the\n   string is first processed with regard to any reserved characters\n \
    \  present, and then the resulting data can be URL-decoded by replacing\n   \"\
    %\" escape sequences by their character values.\n   To encode a character string,\
    \ all reserved and forbidden characters\n   are replaced by the corresponding\
    \ \"%\" escape sequences.  The string\n   can then be used in assembling a URI.\
    \  The reserved characters will\n   vary from context to context, but will always\
    \ be drawn from this set:\n      reserved = \";\" | \"/\" | \"?\" | \":\" | \"\
    @\" | \"&\" | \"=\" | \"+\" | \"$\" |\n                 \",\" | \"[\" | \"]\"\n\
    \   The last two characters were added by RFC 2732 [7].  In any\n   particular\
    \ context, a sub-set of these characters will be reserved;\n   the other characters\
    \ from this set MUST NOT be encoded when a string\n   is URL-encoded in that context.\
    \  Other basic rules used to describe\n   URI syntax are:\n      hex        =\
    \ digit | \"A\" | \"B\" | \"C\" | \"D\" | \"E\" | \"F\" | \"a\" | \"b\"\n    \
    \               | \"c\" | \"d\" | \"e\" | \"f\"\n      escaped    = \"%\" hex\
    \ hex\n      unreserved = alpha | digit | mark\n      mark       = \"-\" | \"\
    _\" | \".\" | \"!\" | \"~\" | \"*\" | \"'\" | \"(\" | \")\"\n"
- title: 3.  Invoking the Script
  contents:
  - '3.  Invoking the Script

    '
- title: 3.1.  Server Responsibilities
  contents:
  - "3.1.  Server Responsibilities\n   The server acts as an application gateway.\
    \  It receives the request\n   from the client, selects a CGI script to handle\
    \ the request, converts\n   the client request to a CGI request, executes the\
    \ script and converts\n   the CGI response into a response for the client.  When\
    \ processing the\n   client request, it is responsible for implementing any protocol\
    \ or\n   transport level authentication and security.  The server MAY also\n \
    \  function in a 'non-transparent' manner, modifying the request or\n   response\
    \ in order to provide some additional service, such as media\n   type transformation\
    \ or protocol reduction.\n   The server MUST perform translations and protocol\
    \ conversions on the\n   client request data required by this specification. \
    \ Furthermore, the\n   server retains its responsibility to the client to conform\
    \ to the\n   relevant network protocol even if the CGI script fails to conform\
    \ to\n   this specification.\n   If the server is applying authentication to the\
    \ request, then it MUST\n   NOT execute the script unless the request passes all\
    \ defined access\n   controls.\n"
- title: 3.2.  Script Selection
  contents:
  - "3.2.  Script Selection\n   The server determines which CGI is script to be executed\
    \ based on a\n   generic-form URI supplied by the client.  This URI includes a\n\
    \   hierarchical path with components separated by \"/\".  For any\n   particular\
    \ request, the server will identify all or a leading part of\n   this path with\
    \ an individual script, thus placing the script at a\n   particular point in the\
    \ path hierarchy.  The remainder of the path,\n   if any, is a resource or sub-resource\
    \ identifier to be interpreted by\n   the script.\n   Information about this split\
    \ of the path is available to the script\n   in the meta-variables, described\
    \ below.  Support for non-hierarchical\n   URI schemes is outside the scope of\
    \ this specification.\n"
- title: 3.3.  The Script-URI
  contents:
  - "3.3.  The Script-URI\n   The mapping from client request URI to choice of script\
    \ is defined by\n   the particular server implementation and its configuration.\
    \  The\n   server may allow the script to be identified with a set of several\n\
    \   different URI path hierarchies, and therefore is permitted to replace\n  \
    \ the URI by other members of this set during processing and generation\n   of\
    \ the meta-variables.  The server\n      1. MAY preserve the URI in the particular\
    \ client request; or\n      2. it MAY select a canonical URI from the set of possible\
    \ values\n         for each script; or\n      3. it can implement any other selection\
    \ of URI from the set.\n   From the meta-variables thus generated, a URI, the\
    \ 'Script-URI', can\n   be constructed.  This MUST have the property that if the\
    \ client had\n   accessed this URI instead, then the script would have been executed\n\
    \   with the same values for the SCRIPT_NAME, PATH_INFO and QUERY_STRING\n   meta-variables.\
    \  The Script-URI has the structure of a generic URI as\n   defined in section\
    \ 3 of RFC 2396 [2], with the exception that object\n   parameters and fragment\
    \ identifiers are not permitted.  The various\n   components of the Script-URI\
    \ are defined by some of the\n   meta-variables (see below);\n      script-URI\
    \ = <scheme> \"://\" <server-name> \":\" <server-port>\n                   <script-path>\
    \ <extra-path> \"?\" <query-string>\n   where <scheme> is found from SERVER_PROTOCOL,\
    \ <server-name>,\n   <server-port> and <query-string> are the values of the respective\n\
    \   meta-variables.  The SCRIPT_NAME and PATH_INFO values, URL-encoded\n   with\
    \ \";\", \"=\" and \"?\"  reserved, give <script-path> and <extra-path>.\n   See\
    \ section 4.1.5 for more information about the PATH_INFO\n   meta-variable.\n\
    \   The scheme and the protocol are not identical as the scheme\n   identifies\
    \ the access method in addition to the application protocol.\n   For example,\
    \ a resource accessed using Transport Layer Security (TLS)\n   [14] would have\
    \ a request URI with a scheme of https when using the\n   HTTP protocol [19].\
    \  CGI/1.1 provides no generic means for the script\n   to reconstruct this, and\
    \ therefore the Script-URI as defined includes\n   the base protocol used.  However,\
    \ a script MAY make use of\n   scheme-specific meta-variables to better deduce\
    \ the URI scheme.\n   Note that this definition also allows URIs to be constructed\
    \ which\n   would invoke the script with any permitted values for the path-info\n\
    \   or query-string, by modifying the appropriate components.\n"
- title: 3.4.  Execution
  contents:
  - "3.4.  Execution\n   The script is invoked in a system-defined manner.  Unless\
    \ specified\n   otherwise, the file containing the script will be invoked as an\n\
    \   executable program.  The server prepares the CGI request as described\n  \
    \ in section 4; this comprises the request meta-variables (immediately\n   available\
    \ to the script on execution) and request message data.  The\n   request data\
    \ need not be immediately available to the script; the\n   script can be executed\
    \ before all this data has been received by the\n   server from the client.  The\
    \ response from the script is returned to\n   the server as described in sections\
    \ 5 and 6.\n   In the event of an error condition, the server can interrupt or\n\
    \   terminate script execution at any time and without warning.  That\n   could\
    \ occur, for example, in the event of a transport failure between\n   the server\
    \ and the client; so the script SHOULD be prepared to handle\n   abnormal termination.\n"
- title: 4.  The CGI Request
  contents:
  - "4.  The CGI Request\n   Information about a request comes from two different\
    \ sources; the\n   request meta-variables and any associated message-body.\n"
- title: 4.1.  Request Meta-Variables
  contents:
  - "4.1.  Request Meta-Variables\n   Meta-variables contain data about the request\
    \ passed from the server\n   to the script, and are accessed by the script in\
    \ a system-defined\n   manner.  Meta-variables are identified by case-insensitive\
    \ names;\n   there cannot be two different variables whose names differ in case\n\
    \   only.  Here they are shown using a canonical representation of\n   capitals\
    \ plus underscore (\"_\").  A particular system can define a\n   different representation.\n\
    \      meta-variable-name = \"AUTH_TYPE\" | \"CONTENT_LENGTH\" |\n           \
    \                \"CONTENT_TYPE\" | \"GATEWAY_INTERFACE\" |\n                \
    \           \"PATH_INFO\" | \"PATH_TRANSLATED\" |\n                          \
    \ \"QUERY_STRING\" | \"REMOTE_ADDR\" |\n                           \"REMOTE_HOST\"\
    \ | \"REMOTE_IDENT\" |\n                           \"REMOTE_USER\" | \"REQUEST_METHOD\"\
    \ |\n                           \"SCRIPT_NAME\" | \"SERVER_NAME\" |\n        \
    \                   \"SERVER_PORT\" | \"SERVER_PROTOCOL\" |\n                \
    \           \"SERVER_SOFTWARE\" | scheme |\n                           protocol-var-name\
    \ | extension-var-name\n      protocol-var-name  = ( protocol | scheme ) \"_\"\
    \ var-name\n      scheme             = alpha *( alpha | digit | \"+\" | \"-\"\
    \ | \".\" )\n      var-name           = token\n      extension-var-name = token\n\
    \   Meta-variables with the same name as a scheme, and names beginning\n   with\
    \ the name of a protocol or scheme (e.g., HTTP_ACCEPT) are also\n   defined. \
    \ The number and meaning of these variables may change\n   independently of this\
    \ specification.  (See also section 4.1.18.)\n   The server MAY set additional\
    \ implementation-defined extension meta-\n   variables, whose names SHOULD be\
    \ prefixed with \"X_\".\n   This specification does not distinguish between zero-length\
    \ (NULL)\n   values and missing values.  For example, a script cannot distinguish\n\
    \   between the two requests http://host/script and http://host/script?\n   as\
    \ in both cases the QUERY_STRING meta-variable would be NULL.\n      meta-variable-value\
    \ = \"\" | 1*<TEXT, CHAR or tokens of value>\n   An optional meta-variable may\
    \ be omitted (left unset) if its value is\n   NULL.  Meta-variable values MUST\
    \ be considered case-sensitive except\n   as noted otherwise.  The representation\
    \ of the characters in the\n   meta-variables is system-defined; the server MUST\
    \ convert values to\n   that representation.\n"
- title: 4.1.1.  AUTH_TYPE
  contents:
  - "4.1.1.  AUTH_TYPE\n   The AUTH_TYPE variable identifies any mechanism used by\
    \ the server to\n   authenticate the user.  It contains a case-insensitive value\
    \ defined\n   by the client protocol or server implementation.\n   For HTTP, if\
    \ the client request required authentication for external\n   access, then the\
    \ server MUST set the value of this variable from the\n   'auth-scheme' token\
    \ in the request Authorization header field.\n      AUTH_TYPE      = \"\" | auth-scheme\n\
    \      auth-scheme    = \"Basic\" | \"Digest\" | extension-auth\n      extension-auth\
    \ = token\n   HTTP access authentication schemes are described in RFC 2617 [5].\n"
- title: 4.1.2.  CONTENT_LENGTH
  contents:
  - "4.1.2.  CONTENT_LENGTH\n   The CONTENT_LENGTH variable contains the size of the\
    \ message-body\n   attached to the request, if any, in decimal number of octets.\
    \  If no\n   data is attached, then NULL (or unset).\n      CONTENT_LENGTH = \"\
    \" | 1*digit\n   The server MUST set this meta-variable if and only if the request\
    \ is\n   accompanied by a message-body entity.  The CONTENT_LENGTH value must\n\
    \   reflect the length of the message-body after the server has removed\n   any\
    \ transfer-codings or content-codings.\n"
- title: 4.1.3.  CONTENT_TYPE
  contents:
  - "4.1.3.  CONTENT_TYPE\n   If the request includes a message-body, the CONTENT_TYPE\
    \ variable is\n   set to the Internet Media Type [6] of the message-body.\n  \
    \    CONTENT_TYPE = \"\" | media-type\n      media-type   = type \"/\" subtype\
    \ *( \";\" parameter )\n      type         = token\n      subtype      = token\n\
    \      parameter    = attribute \"=\" value\n      attribute    = token\n    \
    \  value        = token | quoted-string\n   The type, subtype and parameter attribute\
    \ names are not\n   case-sensitive.  Parameter values may be case sensitive. \
    \ Media types\n   and their use in HTTP are described section 3.7 of the HTTP/1.1\n\
    \   specification [4].\n   There is no default value for this variable.  If and\
    \ only if it is\n   unset, then the script MAY attempt to determine the media\
    \ type from\n   the data received.  If the type remains unknown, then the script\
    \ MAY\n   choose to assume a type of application/octet-stream or it may reject\n\
    \   the request with an error (as described in section 6.3.3).\n   Each media-type\
    \ defines a set of optional and mandatory parameters.\n   This may include a charset\
    \ parameter with a case-insensitive value\n   defining the coded character set\
    \ for the message-body.  If the\n   charset parameter is omitted, then the default\
    \ value should be\n   derived according to whichever of the following rules is\
    \ the first to\n   apply:\n      1. There MAY be a system-defined default charset\
    \ for some\n         media-types.\n      2. The default for media-types of type\
    \ \"text\" is ISO-8859-1 [4].\n      3. Any default defined in the media-type\
    \ specification.\n      4. The default is US-ASCII.\n   The server MUST set this\
    \ meta-variable if an HTTP Content-Type field\n   is present in the client request\
    \ header.  If the server receives a\n   request with an attached entity but no\
    \ Content-Type header field, it\n   MAY attempt to determine the correct content\
    \ type, otherwise it\n   should omit this meta-variable.\n"
- title: 4.1.4.  GATEWAY_INTERFACE
  contents:
  - "4.1.4.  GATEWAY_INTERFACE\n   The GATEWAY_INTERFACE variable MUST be set to the\
    \ dialect of CGI\n   being used by the server to communicate with the script.\
    \  Syntax:\n      GATEWAY_INTERFACE = \"CGI\" \"/\" 1*digit \".\" 1*digit\n  \
    \ Note that the major and minor numbers are treated as separate\n   integers and\
    \ hence each may be incremented higher than a single\n   digit.  Thus CGI/2.4\
    \ is a lower version than CGI/2.13 which in turn\n   is lower than CGI/12.3. \
    \ Leading zeros MUST be ignored by the script\n   and MUST NOT be generated by\
    \ the server.\n   This document defines the 1.1 version of the CGI interface.\n"
- title: 4.1.5.  PATH_INFO
  contents:
  - "4.1.5.  PATH_INFO\n   The PATH_INFO variable specifies a path to be interpreted\
    \ by the CGI\n   script.  It identifies the resource or sub-resource to be returned\
    \ by\n   the CGI script, and is derived from the portion of the URI path\n   hierarchy\
    \ following the part that identifies the script itself.\n   Unlike a URI path,\
    \ the PATH_INFO is not URL-encoded, and cannot\n   contain path-segment parameters.\
    \  A PATH_INFO of \"/\" represents a\n   single void path segment.\n      PATH_INFO\
    \ = \"\" | ( \"/\" path )\n      path      = lsegment *( \"/\" lsegment )\n  \
    \    lsegment  = *lchar\n      lchar     = <any TEXT or CTL except \"/\">\n  \
    \ The value is considered case-sensitive and the server MUST preserve\n   the\
    \ case of the path as presented in the request URI.  The server MAY\n   impose\
    \ restrictions and limitations on what values it permits for\n   PATH_INFO, and\
    \ MAY reject the request with an error if it encounters\n   any values considered\
    \ objectionable.  That MAY include any requests\n   that would result in an encoded\
    \ \"/\" being decoded into PATH_INFO, as\n   this might represent a loss of information\
    \ to the script.  Similarly,\n   treatment of non US-ASCII characters in the path\
    \ is system-defined.\n   URL-encoded, the PATH_INFO string forms the extra-path\
    \ component of\n   the Script-URI (see section 3.3) which follows the SCRIPT_NAME\
    \ part\n   of that path.\n"
- title: 4.1.6.  PATH_TRANSLATED
  contents:
  - "4.1.6.  PATH_TRANSLATED\n   The PATH_TRANSLATED variable is derived by taking\
    \ the PATH_INFO\n   value, parsing it as a local URI in its own right, and performing\
    \ any\n   virtual-to-physical translation appropriate to map it onto the\n   server's\
    \ document repository structure.  The set of characters\n   permitted in the result\
    \ is system-defined.\n      PATH_TRANSLATED = *<any character>\n   This is the\
    \ file location that would be accessed by a request for\n      <scheme> \"://\"\
    \ <server-name> \":\" <server-port> <extra-path>\n   where <scheme> is the scheme\
    \ for the original client request and\n   <extra-path> is a URL-encoded version\
    \ of PATH_INFO, with \";\", \"=\" and\n   \"?\"  reserved.  For example, a request\
    \ such as the following:\n      http://somehost.com/cgi-bin/somescript/this%2eis%2epath%3binfo\n\
    \   would result in a PATH_INFO value of\n      /this.is.the.path;info\n   An\
    \ internal URI is constructed from the scheme, server location and\n   the URL-encoded\
    \ PATH_INFO:\n      http://somehost.com/this.is.the.path%3binfo\n   This would\
    \ then be translated to a location in the server's document\n   repository, perhaps\
    \ a filesystem path something like this:\n      /usr/local/www/htdocs/this.is.the.path;info\n\
    \   The value of PATH_TRANSLATED is the result of the translation.\n   The value\
    \ is derived in this way irrespective of whether it maps to a\n   valid repository\
    \ location.  The server MUST preserve the case of the\n   extra-path segment unless\
    \ the underlying repository supports case-\n   insensitive names.  If the repository\
    \ is only case-aware, case-\n   preserving, or case-blind with regard to document\
    \ names, the server\n   is not required to preserve the case of the original segment\
    \ through\n   the translation.\n   The translation algorithm the server uses to\
    \ derive PATH_TRANSLATED\n   is implementation-defined; CGI scripts which use\
    \ this variable may\n   suffer limited portability.\n   The server SHOULD set\
    \ this meta-variable if the request URI includes\n   a path-info component.  If\
    \ PATH_INFO is NULL, then the\n   PATH_TRANSLATED variable MUST be set to NULL\
    \ (or unset).\n"
- title: 4.1.7.  QUERY_STRING
  contents:
  - "4.1.7.  QUERY_STRING\n   The QUERY_STRING variable contains a URL-encoded search\
    \ or parameter\n   string; it provides information to the CGI script to affect\
    \ or refine\n   the document to be returned by the script.\n   The URL syntax\
    \ for a search string is described in section 3 of RFC\n   2396 [2].  The QUERY_STRING\
    \ value is case-sensitive.\n      QUERY_STRING = query-string\n      query-string\
    \ = *uric\n      uric         = reserved | unreserved | escaped\n   When parsing\
    \ and decoding the query string, the details of the\n   parsing, reserved characters\
    \ and support for non US-ASCII characters\n   depends on the context.  For example,\
    \ form submission from an HTML\n   document [18] uses application/x-www-form-urlencoded\
    \ encoding, in\n   which the characters \"+\", \"&\" and \"=\" are reserved, and\
    \ the ISO\n   8859-1 encoding may be used for non US-ASCII characters.\n   The\
    \ QUERY_STRING value provides the query-string part of the\n   Script-URI.  (See\
    \ section 3.3).\n   The server MUST set this variable; if the Script-URI does\
    \ not include\n   a query component, the QUERY_STRING MUST be defined as an empty\n\
    \   string (\"\").\n"
- title: 4.1.8.  REMOTE_ADDR
  contents:
  - "4.1.8.  REMOTE_ADDR\n   The REMOTE_ADDR variable MUST be set to the network address\
    \ of the\n   client sending the request to the server.\n      REMOTE_ADDR  = hostnumber\n\
    \      hostnumber   = ipv4-address | ipv6-address\n      ipv4-address = 1*3digit\
    \ \".\" 1*3digit \".\" 1*3digit \".\" 1*3digit\n      ipv6-address = hexpart [\
    \ \":\" ipv4-address ]\n      hexpart      = hexseq | ( [ hexseq ] \"::\" [ hexseq\
    \ ] )\n      hexseq       = 1*4hex *( \":\" 1*4hex )\n   The format of an IPv6\
    \ address is described in RFC 3513 [15].\n"
- title: 4.1.9.  REMOTE_HOST
  contents:
  - "4.1.9.  REMOTE_HOST\n   The REMOTE_HOST variable contains the fully qualified\
    \ domain name of\n   the client sending the request to the server, if available,\
    \ otherwise\n   NULL.  Fully qualified domain names take the form as described\
    \ in\n   section 3.5 of RFC 1034 [17] and section 2.1 of RFC 1123 [12].\n   Domain\
    \ names are not case sensitive.\n      REMOTE_HOST   = \"\" | hostname | hostnumber\n\
    \      hostname      = *( domainlabel \".\" ) toplabel [ \".\" ]\n      domainlabel\
    \   = alphanum [ *alphahypdigit alphanum ]\n      toplabel      = alpha [ *alphahypdigit\
    \ alphanum ]\n      alphahypdigit = alphanum | \"-\"\n   The server SHOULD set\
    \ this variable.  If the hostname is not\n   available for performance reasons\
    \ or otherwise, the server MAY\n   substitute the REMOTE_ADDR value.\n"
- title: 4.1.10.  REMOTE_IDENT
  contents:
  - "4.1.10.  REMOTE_IDENT\n   The REMOTE_IDENT variable MAY be used to provide identity\
    \ information\n   reported about the connection by an RFC 1413 [20] request to\
    \ the\n   remote agent, if available.  The server may choose not to support\n\
    \   this feature, or not to request the data for efficiency reasons, or\n   not\
    \ to return available identity data.\n      REMOTE_IDENT = *TEXT\n   The data\
    \ returned may be used for authentication purposes, but the\n   level of trust\
    \ reposed in it should be minimal.\n"
- title: 4.1.11.  REMOTE_USER
  contents:
  - "4.1.11.  REMOTE_USER\n   The REMOTE_USER variable provides a user identification\
    \ string\n   supplied by client as part of user authentication.\n      REMOTE_USER\
    \ = *TEXT\n   If the client request required HTTP Authentication [5] (e.g., the\n\
    \   AUTH_TYPE meta-variable is set to \"Basic\" or \"Digest\"), then the\n   value\
    \ of the REMOTE_USER meta-variable MUST be set to the user-ID\n   supplied.\n"
- title: 4.1.12.  REQUEST_METHOD
  contents:
  - "4.1.12.  REQUEST_METHOD\n   The REQUEST_METHOD meta-variable MUST be set to the\
    \ method which\n   should be used by the script to process the request, as described\
    \ in\n   section 4.3.\n      REQUEST_METHOD   = method\n      method         \
    \  = \"GET\" | \"POST\" | \"HEAD\" | extension-method\n      extension-method\
    \ = \"PUT\" | \"DELETE\" | token\n   The method is case sensitive.  The HTTP methods\
    \ are described in\n   section 5.1.1 of the HTTP/1.0 specification [1] and section\
    \ 5.1.1 of\n   the HTTP/1.1 specification [4].\n"
- title: 4.1.13.  SCRIPT_NAME
  contents:
  - "4.1.13.  SCRIPT_NAME\n   The SCRIPT_NAME variable MUST be set to a URI path (not\
    \ URL-encoded)\n   which could identify the CGI script (rather than the script's\n\
    \   output).  The syntax is the same as for PATH_INFO (section 4.1.5)\n      SCRIPT_NAME\
    \ = \"\" | ( \"/\" path )\n   The leading \"/\" is not part of the path.  It is\
    \ optional if the path\n   is NULL; however, the variable MUST still be set in\
    \ that case.\n   The SCRIPT_NAME string forms some leading part of the path component\n\
    \   of the Script-URI derived in some implementation-defined manner.  No\n   PATH_INFO\
    \ segment (see section 4.1.5) is included in the SCRIPT_NAME\n   value.\n"
- title: 4.1.14.  SERVER_NAME
  contents:
  - "4.1.14.  SERVER_NAME\n   The SERVER_NAME variable MUST be set to the name of\
    \ the server host\n   to which the client request is directed.  It is a case-insensitive\n\
    \   hostname or network address.  It forms the host part of the\n   Script-URI.\n\
    \      SERVER_NAME = server-name\n      server-name = hostname | ipv4-address\
    \ | ( \"[\" ipv6-address \"]\" )\n   A deployed server can have more than one\
    \ possible value for this\n   variable, where several HTTP virtual hosts share\
    \ the same IP address.\n   In that case, the server would use the contents of\
    \ the request's Host\n   header field to select the correct virtual host.\n"
- title: 4.1.15.  SERVER_PORT
  contents:
  - "4.1.15.  SERVER_PORT\n   The SERVER_PORT variable MUST be set to the TCP/IP port\
    \ number on\n   which this request is received from the client.  This value is\
    \ used\n   in the port part of the Script-URI.\n      SERVER_PORT = server-port\n\
    \      server-port = 1*digit\n   Note that this variable MUST be set, even if\
    \ the port is the default\n   port for the scheme and could otherwise be omitted\
    \ from a URI.\n"
- title: 4.1.16.  SERVER_PROTOCOL
  contents:
  - "4.1.16.  SERVER_PROTOCOL\n   The SERVER_PROTOCOL variable MUST be set to the\
    \ name and version of\n   the application protocol used for this CGI request.\
    \  This MAY differ\n   from the protocol version used by the server in its communication\n\
    \   with the client.\n      SERVER_PROTOCOL   = HTTP-Version | \"INCLUDED\" |\
    \ extension-version\n      HTTP-Version      = \"HTTP\" \"/\" 1*digit \".\" 1*digit\n\
    \      extension-version = protocol [ \"/\" 1*digit \".\" 1*digit ]\n      protocol\
    \          = token\n   Here, 'protocol' defines the syntax of some of the information\n\
    \   passing between the server and the script (the 'protocol-specific'\n   features).\
    \  It is not case sensitive and is usually presented in\n   upper case.  The protocol\
    \ is not the same as the scheme part of the\n   script URI, which defines the\
    \ overall access mechanism used by the\n   client to communicate with the server.\
    \  For example, a request that\n   reaches the script with a protocol of \"HTTP\"\
    \ may have used an \"https\"\n   scheme.\n   A well-known value for SERVER_PROTOCOL\
    \ which the server MAY use is\n   \"INCLUDED\", which signals that the current\
    \ document is being included\n   as part of a composite document, rather than\
    \ being the direct target\n   of the client request.  The script should treat\
    \ this as an HTTP/1.0\n   request.\n"
- title: 4.1.17.  SERVER_SOFTWARE
  contents:
  - "4.1.17.  SERVER_SOFTWARE\n   The SERVER_SOFTWARE meta-variable MUST be set to\
    \ the name and version\n   of the information server software making the CGI request\
    \ (and\n   running the gateway).  It SHOULD be the same as the server\n   description\
    \ reported to the client, if any.\n      SERVER_SOFTWARE = 1*( product | comment\
    \ )\n      product         = token [ \"/\" product-version ]\n      product-version\
    \ = token\n      comment         = \"(\" *( ctext | comment ) \")\"\n      ctext\
    \           = <any TEXT excluding \"(\" and \")\">\n"
- title: 4.1.18.  Protocol-Specific Meta-Variables
  contents:
  - "4.1.18.  Protocol-Specific Meta-Variables\n   The server SHOULD set meta-variables\
    \ specific to the protocol and\n   scheme for the request.  Interpretation of\
    \ protocol-specific\n   variables depends on the protocol version in SERVER_PROTOCOL.\
    \  The\n   server MAY set a meta-variable with the name of the scheme to a\n \
    \  non-NULL value if the scheme is not the same as the protocol.  The\n   presence\
    \ of such a variable indicates to a script which scheme is\n   used by the request.\n\
    \   Meta-variables with names beginning with \"HTTP_\" contain values read\n \
    \  from the client request header fields, if the protocol used is HTTP.\n   The\
    \ HTTP header field name is converted to upper case, has all\n   occurrences of\
    \ \"-\" replaced with \"_\" and has \"HTTP_\" prepended to\n   give the meta-variable\
    \ name.  The header data can be presented as\n   sent by the client, or can be\
    \ rewritten in ways which do not change\n   its semantics.  If multiple header\
    \ fields with the same field-name\n   are received then the server MUST rewrite\
    \ them as a single value\n   having the same semantics.  Similarly, a header field\
    \ that spans\n   multiple lines MUST be merged onto a single line.  The server\
    \ MUST,\n   if necessary, change the representation of the data (for example,\
    \ the\n   character set) to be appropriate for a CGI meta-variable.\n   The server\
    \ is not required to create meta-variables for all the\n   header fields that\
    \ it receives.  In particular, it SHOULD remove any\n   header fields carrying\
    \ authentication information, such as\n   'Authorization'; or that are available\
    \ to the script in other\n   variables, such as 'Content-Length' and 'Content-Type'.\
    \  The server\n   MAY remove header fields that relate solely to client-side\n\
    \   communication issues, such as 'Connection'.\n"
- title: 4.2.  Request Message-Body
  contents:
  - "4.2.  Request Message-Body\n   Request data is accessed by the script in a system-defined\
    \ method;\n   unless defined otherwise, this will be by reading the 'standard\n\
    \   input' file descriptor or file handle.\n      Request-Data   = [ request-body\
    \ ] [ extension-data ]\n      request-body   = <CONTENT_LENGTH>OCTET\n      extension-data\
    \ = *OCTET\n   A request-body is supplied with the request if the CONTENT_LENGTH\
    \ is\n   not NULL.  The server MUST make at least that many bytes available\n\
    \   for the script to read.  The server MAY signal an end-of-file\n   condition\
    \ after CONTENT_LENGTH bytes have been read or it MAY supply\n   extension data.\
    \  Therefore, the script MUST NOT attempt to read more\n   than CONTENT_LENGTH\
    \ bytes, even if more data is available.  However,\n   it is not obliged to read\
    \ any of the data.\n   For non-parsed header (NPH) scripts (section 5), the server\
    \ SHOULD\n   attempt to ensure that the data supplied to the script is precisely\n\
    \   as supplied by the client and is unaltered by the server.\n   As transfer-codings\
    \ are not supported on the request-body, the server\n   MUST remove any such codings\
    \ from the message-body, and recalculate\n   the CONTENT_LENGTH.  If this is not\
    \ possible (for example, because of\n   large buffering requirements), the server\
    \ SHOULD reject the client\n   request.  It MAY also remove content-codings from\
    \ the message-body.\n"
- title: 4.3.  Request Methods
  contents:
  - "4.3.  Request Methods\n   The Request Method, as supplied in the REQUEST_METHOD\
    \ meta-variable,\n   identifies the processing method to be applied by the script\
    \ in\n   producing a response.  The script author can choose to implement the\n\
    \   methods most appropriate for the particular application.  If the\n   script\
    \ receives a request with a method it does not support it SHOULD\n   reject it\
    \ with an error (see section 6.3.3).\n"
- title: 4.3.1.  GET
  contents:
  - "4.3.1.  GET\n   The GET method indicates that the script should produce a document\n\
    \   based on the meta-variable values.  By convention, the GET method is\n   'safe'\
    \ and 'idempotent' and SHOULD NOT have the significance of\n   taking an action\
    \ other than producing a document.\n   The meaning of the GET method may be modified\
    \ and refined by\n   protocol-specific meta-variables.\n"
- title: 4.3.2.  POST
  contents:
  - "4.3.2.  POST\n   The POST method is used to request the script perform processing\
    \ and\n   produce a document based on the data in the request message-body, in\n\
    \   addition to meta-variable values.  A common use is form submission in\n  \
    \ HTML [18], intended to initiate processing by the script that has a\n   permanent\
    \ affect, such a change in a database.\n   The script MUST check the value of\
    \ the CONTENT_LENGTH variable before\n   reading the attached message-body, and\
    \ SHOULD check the CONTENT_TYPE\n   value before processing it.\n"
- title: 4.3.3.  HEAD
  contents:
  - "4.3.3.  HEAD\n   The HEAD method requests the script to do sufficient processing\
    \ to\n   return the response header fields, without providing a response\n   message-body.\
    \  The script MUST NOT provide a response message-body\n   for a HEAD request.\
    \  If it does, then the server MUST discard the\n   message-body when reading\
    \ the response from the script.\n"
- title: 4.3.4.  Protocol-Specific Methods
  contents:
  - "4.3.4.  Protocol-Specific Methods\n   The script MAY implement any protocol-specific\
    \ method, such as\n   HTTP/1.1 PUT and DELETE; it SHOULD check the value of SERVER_PROTOCOL\n\
    \   when doing so.\n   The server MAY decide that some methods are not appropriate\
    \ or\n   permitted for a script, and may handle the methods itself or return\n\
    \   an error to the client.\n"
- title: 4.4.  The Script Command Line
  contents:
  - "4.4.  The Script Command Line\n   Some systems support a method for supplying\
    \ an array of strings to\n   the CGI script.  This is only used in the case of\
    \ an 'indexed' HTTP\n   query, which is identified by a 'GET' or 'HEAD' request\
    \ with a URI\n   query string that does not contain any unencoded \"=\" characters.\
    \  For\n   such a request, the server SHOULD treat the query-string as a\n   search-string\
    \ and parse it into words, using the rules\n      search-string = search-word\
    \ *( \"+\" search-word )\n      search-word   = 1*schar\n      schar         =\
    \ unreserved | escaped | xreserved\n      xreserved     = \";\" | \"/\" | \"?\"\
    \ | \":\" | \"@\" | \"&\" | \"=\" | \",\" |\n                      \"$\"\n   After\
    \ parsing, each search-word is URL-decoded, optionally encoded in\n   a system-defined\
    \ manner and then added to the command line argument\n   list.\n   If the server\
    \ cannot create any part of the argument list, then the\n   server MUST NOT generate\
    \ any command line information.  For example,\n   the number of arguments may\
    \ be greater than operating system or\n   server limits, or one of the words may\
    \ not be representable as an\n   argument.\n   The script SHOULD check to see\
    \ if the QUERY_STRING value contains an\n   unencoded \"=\" character, and SHOULD\
    \ NOT use the command line\n   arguments if it does.\n"
- title: 5.  NPH Scripts
  contents:
  - '5.  NPH Scripts

    '
- title: 5.1.  Identification
  contents:
  - "5.1.  Identification\n   The server MAY support NPH (Non-Parsed Header) scripts;\
    \ these are\n   scripts to which the server passes all responsibility for response\n\
    \   processing.\n   This specification provides no mechanism for an NPH script\
    \ to be\n   identified on the basis of its output data alone.  By convention,\n\
    \   therefore, any particular script can only ever provide output of one\n   type\
    \ (NPH or CGI) and hence the script itself is described as an 'NPH\n   script'.\
    \  A server with NPH support MUST provide an implementation-\n   defined mechanism\
    \ for identifying NPH scripts, perhaps based on the\n   name or location of the\
    \ script.\n"
- title: 5.2.  NPH Response
  contents:
  - "5.2.  NPH Response\n   There MUST be a system-defined method for the script to\
    \ send data\n   back to the server or client; a script MUST always return some\
    \ data.\n   Unless defined otherwise, this will be the same as for conventional\n\
    \   CGI scripts.\n   Currently, NPH scripts are only defined for HTTP client requests.\
    \  An\n   (HTTP) NPH script MUST return a complete HTTP response message,\n  \
    \ currently described in section 6 of the HTTP specifications [1], [4].\n   The\
    \ script MUST use the SERVER_PROTOCOL variable to determine the\n   appropriate\
    \ format for a response.  It MUST also take account of any\n   generic or protocol-specific\
    \ meta-variables in the request as might\n   be mandated by the particular protocol\
    \ specification.\n   The server MUST ensure that the script output is sent to\
    \ the client\n   unmodified.  Note that this requires the script to use the correct\n\
    \   character set (US-ASCII [9] and ISO 8859-1 [10] for HTTP) in the\n   header\
    \ fields.  The server SHOULD attempt to ensure that the script\n   output is sent\
    \ directly to the client, with minimal internal and no\n   transport-visible buffering.\n\
    \   Unless the implementation defines otherwise, the script MUST NOT\n   indicate\
    \ in its response that the client can send further requests\n   over the same\
    \ connection.\n"
- title: 6.  CGI Response
  contents:
  - '6.  CGI Response

    '
- title: 6.1.  Response Handling
  contents:
  - "6.1.  Response Handling\n   A script MUST always provide a non-empty response,\
    \ and so there is a\n   system-defined method for it to send this data back to\
    \ the server.\n   Unless defined otherwise, this will be via the 'standard output'\
    \ file\n   descriptor.\n   The script MUST check the REQUEST_METHOD variable when\
    \ processing the\n   request and preparing its response.\n   The server MAY implement\
    \ a timeout period within which data must be\n   received from the script.  If\
    \ a server implementation defines such a\n   timeout and receives no data from\
    \ a script within the timeout period,\n   the server MAY terminate the script\
    \ process.\n"
- title: 6.2.  Response Types
  contents:
  - "6.2.  Response Types\n   The response comprises a message-header and a message-body,\
    \ separated\n   by a blank line.  The message-header contains one or more header\n\
    \   fields.  The body may be NULL.\n      generic-response = 1*header-field NL\
    \ [ response-body ]\n   The script MUST return one of either a document response,\
    \ a local\n   redirect response or a client redirect (with optional document)\n\
    \   response.  In the response definitions below, the order of header\n   fields\
    \ in a response is not significant (despite appearing so in the\n   BNF).  The\
    \ header fields are defined in section 6.3.\n      CGI-Response = document-response\
    \ | local-redir-response |\n                     client-redir-response | client-redirdoc-response\n"
- title: 6.2.1.  Document Response
  contents:
  - "6.2.1.  Document Response\n   The CGI script can return a document to the user\
    \ in a document\n   response, with an optional error code indicating the success\
    \ status\n   of the response.\n      document-response = Content-Type [ Status\
    \ ] *other-field NL\n                          response-body\n   The script MUST\
    \ return a Content-Type header field.  A Status header\n   field is optional,\
    \ and status 200 'OK' is assumed if it is omitted.\n   The server MUST make any\
    \ appropriate modifications to the script's\n   output to ensure that the response\
    \ to the client complies with the\n   response protocol version.\n"
- title: 6.2.2.  Local Redirect Response
  contents:
  - "6.2.2.  Local Redirect Response\n   The CGI script can return a URI path and\
    \ query-string\n   ('local-pathquery') for a local resource in a Location header\
    \ field.\n   This indicates to the server that it should reprocess the request\n\
    \   using the path specified.\n      local-redir-response = local-Location NL\n\
    \   The script MUST NOT return any other header fields or a message-body,\n  \
    \ and the server MUST generate the response that it would have produced\n   in\
    \ response to a request containing the URL\n      scheme \"://\" server-name \"\
    :\" server-port local-pathquery\n"
- title: 6.2.3.  Client Redirect Response
  contents:
  - "6.2.3.  Client Redirect Response\n   The CGI script can return an absolute URI\
    \ path in a Location header\n   field, to indicate to the client that it should\
    \ reprocess the request\n   using the URI specified.\n      client-redir-response\
    \ = client-Location *extension-field NL\n   The script MUST not provide any other\
    \ header fields, except for\n   server-defined CGI extension fields.  For an HTTP\
    \ client request, the\n   server MUST generate a 302 'Found' HTTP response message.\n"
- title: 6.2.4.  Client Redirect Response with Document
  contents:
  - "6.2.4.  Client Redirect Response with Document\n   The CGI script can return\
    \ an absolute URI path in a Location header\n   field together with an attached\
    \ document, to indicate to the client\n   that it should reprocess the request\
    \ using the URI specified.\n      client-redirdoc-response = client-Location Status\
    \ Content-Type\n                                 *other-field NL response-body\n\
    \   The Status header field MUST be supplied and MUST contain a status\n   value\
    \ of 302 'Found', or it MAY contain an extension-code, that is,\n   another valid\
    \ status code that means client redirection.  The server\n   MUST make any appropriate\
    \ modifications to the script's output to\n   ensure that the response to the\
    \ client complies with the response\n   protocol version.\n"
- title: 6.3.  Response Header Fields
  contents:
  - "6.3.  Response Header Fields\n   The response header fields are either CGI or\
    \ extension header fields\n   to be interpreted by the server, or protocol-specific\
    \ header fields\n   to be included in the response returned to the client.  At\
    \ least one\n   CGI field MUST be supplied; each CGI field MUST NOT appear more\
    \ than\n   once in the response.  The response header fields have the syntax:\n\
    \      header-field    = CGI-field | other-field\n      CGI-field       = Content-Type\
    \ | Location | Status\n      other-field     = protocol-field | extension-field\n\
    \      protocol-field  = generic-field\n      extension-field = generic-field\n\
    \      generic-field   = field-name \":\" [ field-value ] NL\n      field-name\
    \      = token\n      field-value     = *( field-content | LWSP )\n      field-content\
    \   = *( token | separator | quoted-string )\n   The field-name is not case sensitive.\
    \  A NULL field value is\n   equivalent to a field not being sent.  Note that\
    \ each header field in\n   a CGI-Response MUST be specified on a single line;\
    \ CGI/1.1 does not\n   support continuation lines.  Whitespace is permitted between\
    \ the \":\"\n   and the field-value (but not between the field-name and the \"\
    :\"), and\n   also between tokens in the field-value.\n"
- title: 6.3.1.  Content-Type
  contents:
  - "6.3.1.  Content-Type\n   The Content-Type response field sets the Internet Media\
    \ Type [6] of\n   the entity body.\n      Content-Type = \"Content-Type:\" media-type\
    \ NL\n   If an entity body is returned, the script MUST supply a Content-Type\n\
    \   field in the response.  If it fails to do so, the server SHOULD NOT\n   attempt\
    \ to determine the correct content type.  The value SHOULD be\n   sent unmodified\
    \ to the client, except for any charset parameter\n   changes.\n   Unless it is\
    \ otherwise system-defined, the default charset assumed by\n   the client for\
    \ text media-types is ISO-8859-1 if the protocol is HTTP\n   and US-ASCII otherwise.\
    \  Hence the script SHOULD include a charset\n   parameter.  See section 3.4.1\
    \ of the HTTP/1.1 specification [4] for a\n   discussion of this issue.\n"
- title: 6.3.2.  Location
  contents:
  - "6.3.2.  Location\n   The Location header field is used to specify to the server\
    \ that the\n   script is returning a reference to a document rather than an actual\n\
    \   document (see sections 6.2.3 and 6.2.4).  It is either an absolute\n   URI\
    \ (optionally with a fragment identifier), indicating that the\n   client is to\
    \ fetch the referenced document, or a local URI path\n   (optionally with a query\
    \ string), indicating that the server is to\n   fetch the referenced document\
    \ and return it to the client as the\n   response.\n      Location        = local-Location\
    \ | client-Location\n      client-Location = \"Location:\" fragment-URI NL\n \
    \     local-Location  = \"Location:\" local-pathquery NL\n      fragment-URI \
    \   = absoluteURI [ \"#\" fragment ]\n      fragment        = *uric\n      local-pathquery\
    \ = abs-path [ \"?\" query-string ]\n      abs-path        = \"/\" path-segments\n\
    \      path-segments   = segment *( \"/\" segment )\n      segment         = *pchar\n\
    \      pchar           = unreserved | escaped | extra\n      extra           =\
    \ \":\" | \"@\" | \"&\" | \"=\" | \"+\" | \"$\" | \",\"\n   The syntax of an absoluteURI\
    \ is incorporated into this document from\n   that specified in RFC 2396 [2] and\
    \ RFC 2732 [7].  A valid absoluteURI\n   always starts with the name of scheme\
    \ followed by \":\"; scheme names\n   start with a letter and continue with alphanumerics,\
    \ \"+\", \"-\" or \".\".\n   The local URI path and query must be an absolute\
    \ path, and not a\n   relative path or NULL, and hence must start with a \"/\"\
    .\n   Note that any message-body attached to the request (such as for a\n   POST\
    \ request) may not be available to the resource that is the target\n   of the\
    \ redirect.\n"
- title: 6.3.3.  Status
  contents:
  - "6.3.3.  Status\n   The Status header field contains a 3-digit integer result\
    \ code that\n   indicates the level of success of the script's attempt to handle\
    \ the\n   request.\n      Status         = \"Status:\" status-code SP reason-phrase\
    \ NL\n      status-code    = \"200\" | \"302\" | \"400\" | \"501\" | extension-code\n\
    \      extension-code = 3digit\n      reason-phrase  = *TEXT\n   Status code 200\
    \ 'OK' indicates success, and is the default value\n   assumed for a document\
    \ response.  Status code 302 'Found' is used\n   with a Location header field\
    \ and response message-body.  Status code\n   400 'Bad Request' may be used for\
    \ an unknown request format, such as\n   a missing CONTENT_TYPE.  Status code\
    \ 501 'Not Implemented' may be\n   returned by a script if it receives an unsupported\
    \ REQUEST_METHOD.\n   Other valid status codes are listed in section 6.1.1 of\
    \ the HTTP\n   specifications [1], [4], and also the IANA HTTP Status Code Registry\n\
    \   [8] and MAY be used in addition to or instead of the ones listed\n   above.\
    \  The script SHOULD check the value of SERVER_PROTOCOL before\n   using HTTP/1.1\
    \ status codes.  The script MAY reject with error 405\n   'Method Not Allowed'\
    \ HTTP/1.1 requests made using a method it does\n   not support.\n   Note that\
    \ returning an error status code does not have to mean an\n   error condition\
    \ with the script itself.  For example, a script that\n   is invoked as an error\
    \ handler by the server should return the code\n   appropriate to the server's\
    \ error condition.\n   The reason-phrase is a textual description of the error\
    \ to be\n   returned to the client for human consumption.\n"
- title: 6.3.4.  Protocol-Specific Header Fields
  contents:
  - "6.3.4.  Protocol-Specific Header Fields\n   The script MAY return any other header\
    \ fields that relate to the\n   response message defined by the specification\
    \ for the SERVER_PROTOCOL\n   (HTTP/1.0 [1] or HTTP/1.1 [4]).  The server MUST\
    \ translate the header\n   data from the CGI header syntax to the HTTP header\
    \ syntax if these\n   differ.  For example, the character sequence for newline\
    \ (such as\n   UNIX's US-ASCII LF) used by CGI scripts may not be the same as\
    \ that\n   used by HTTP (US-ASCII CR followed by LF).\n   The script MUST NOT\
    \ return any header fields that relate to\n   client-side communication issues\
    \ and could affect the server's\n   ability to send the response to the client.\
    \  The server MAY remove\n   any such header fields returned by the client.  It\
    \ SHOULD resolve any\n   conflicts between header fields returned by the script\
    \ and header\n   fields that it would otherwise send itself.\n"
- title: 6.3.5.  Extension Header Fields
  contents:
  - "6.3.5.  Extension Header Fields\n   There may be additional implementation-defined\
    \ CGI header fields,\n   whose field names SHOULD begin with \"X-CGI-\".  The\
    \ server MAY ignore\n   (and delete) any unrecognised header fields with names\
    \ beginning \"X-\n   CGI-\" that are received from the script.\n"
- title: 6.4.  Response Message-Body
  contents:
  - "6.4.  Response Message-Body\n   The response message-body is an attached document\
    \ to be returned to\n   the client by the server.  The server MUST read all the\
    \ data provided\n   by the script, until the script signals the end of the message-body\n\
    \   by way of an end-of-file condition.  The message-body SHOULD be sent\n   unmodified\
    \ to the client, except for HEAD requests or any required\n   transfer-codings,\
    \ content-codings or charset conversions.\n      response-body = *OCTET\n"
- title: 7.  System Specifications
  contents:
  - '7.  System Specifications

    '
- title: 7.1.  AmigaDOS
  contents:
  - "7.1.  AmigaDOS\n   Meta-Variables\n      Meta-variables are passed to the script\
    \ in identically named\n      environment variables.  These are accessed by the\
    \ DOS library\n      routine GetVar().  The flags argument SHOULD be 0.  Case\
    \ is\n      ignored, but upper case is recommended for compatibility with\n  \
    \    case-sensitive systems.\n   The current working directory\n      The current\
    \ working directory for the script is set to the\n      directory containing the\
    \ script.\n   Character set\n      The US-ASCII character set [9] is used for\
    \ the definition of\n      meta-variables, header fields and values; the newline\
    \ (NL)\n      sequence is LF; servers SHOULD also accept CR LF as a newline.\n"
- title: 7.2.  UNIX
  contents:
  - "7.2.  UNIX\n   For UNIX compatible operating systems, the following are defined:\n\
    \   Meta-Variables\n      Meta-variables are passed to the script in identically\
    \ named\n      environment variables.  These are accessed by the C library\n \
    \     routine getenv() or variable environ.\n   The command line\n      This is\
    \ accessed using the argc and argv arguments to main().  The\n      words have\
    \ any characters which are 'active' in the Bourne shell\n      escaped with a\
    \ backslash.\n   The current working directory\n      The current working directory\
    \ for the script SHOULD be set to the\n      directory containing the script.\n\
    \   Character set\n      The US-ASCII character set [9], excluding NUL, is used\
    \ for the\n      definition of meta-variables, header fields and CHAR values;\
    \ TEXT\n      values use ISO-8859-1.  The PATH_TRANSLATED value can contain any\n\
    \      8-bit byte except NUL.  The newline (NL) sequence is LF; servers\n    \
    \  should also accept CR LF as a newline.\n"
- title: 7.3.  EBCDIC/POSIX
  contents:
  - "7.3.  EBCDIC/POSIX\n   For POSIX compatible operating systems using the EBCDIC\
    \ character\n   set, the following are defined:\n   Meta-Variables\n      Meta-variables\
    \ are passed to the script in identically named\n      environment variables.\
    \  These are accessed by the C library\n      routine getenv().\n   The command\
    \ line\n      This is accessed using the argc and argv arguments to main().  The\n\
    \      words have any characters which are 'active' in the Bourne shell\n    \
    \  escaped with a backslash.\n   The current working directory\n      The current\
    \ working directory for the script SHOULD be set to the\n      directory containing\
    \ the script.\n   Character set\n      The IBM1047 character set [21], excluding\
    \ NUL, is used for the\n      definition of meta-variables, header fields, values,\
    \ TEXT strings\n      and the PATH_TRANSLATED value.  The newline (NL) sequence\
    \ is LF;\n      servers should also accept CR LF as a newline.\n   media-type\
    \ charset default\n      The default charset value for text (and other implementation-\n\
    \      defined) media types is IBM1047.\n"
- title: 8.  Implementation
  contents:
  - '8.  Implementation

    '
- title: 8.1.  Recommendations for Servers
  contents:
  - "8.1.  Recommendations for Servers\n   Although the server and the CGI script\
    \ need not be consistent in\n   their handling of URL paths (client URLs and the\
    \ PATH_INFO data,\n   respectively), server authors may wish to impose consistency.\
    \  So the\n   server implementation should specify its behaviour for the following\n\
    \   cases:\n      1. define any restrictions on allowed path segments, in particular\n\
    \         whether non-terminal NULL segments are permitted;\n      2. define the\
    \ behaviour for \".\" or \"..\" path segments; i.e.,\n         whether they are\
    \ prohibited, treated as ordinary path segments\n         or interpreted in accordance\
    \ with the relative URL\n         specification [2];\n      3. define any limits\
    \ of the implementation, including limits on\n         path or search string lengths,\
    \ and limits on the volume of\n         header fields the server will parse.\n"
- title: 8.2.  Recommendations for Scripts
  contents:
  - "8.2.  Recommendations for Scripts\n   If the script does not intend processing\
    \ the PATH_INFO data, then it\n   should reject the request with 404 Not Found\
    \ if PATH_INFO is not\n   NULL.\n   If the output of a form is being processed,\
    \ check that CONTENT_TYPE\n   is \"application/x-www-form-urlencoded\" [18] or\
    \ \"multipart/form-data\"\n   [16].  If CONTENT_TYPE is blank, the script can\
    \ reject the request\n   with a 415 'Unsupported Media Type' error, where supported\
    \ by the\n   protocol.\n   When parsing PATH_INFO, PATH_TRANSLATED or SCRIPT_NAME\
    \ the script\n   should be careful of void path segments (\"//\") and special\
    \ path\n   segments (\".\" and \"..\").  They should either be removed from the\
    \ path\n   before use in OS system calls, or the request should be rejected with\n\
    \   404 'Not Found'.\n   When returning header fields, the script should try to\
    \ send the CGI\n   header fields as soon as possible, and should send them before\
    \ any\n   HTTP header fields.  This may help reduce the server's memory\n   requirements.\n\
    \   Script authors should be aware that the REMOTE_ADDR and REMOTE_HOST\n   meta-variables\
    \ (see sections 4.1.8 and 4.1.9) may not identify the\n   ultimate source of the\
    \ request.  They identify the client for the\n   immediate request to the server;\
    \ that client may be a proxy, gateway,\n   or other intermediary acting on behalf\
    \ of the actual source client.\n"
- title: 9.  Security Considerations
  contents:
  - '9.  Security Considerations

    '
- title: 9.1.  Safe Methods
  contents:
  - "9.1.  Safe Methods\n   As discussed in the security considerations of the HTTP\n\
    \   specifications [1], [4], the convention has been established that the\n  \
    \ GET and HEAD methods should be 'safe' and 'idempotent' (repeated\n   requests\
    \ have the same effect as a single request).  See section 9.1\n   of RFC 2616\
    \ [4] for a full discussion.\n"
- title: 9.2.  Header Fields Containing Sensitive Information
  contents:
  - "9.2.  Header Fields Containing Sensitive Information\n   Some HTTP header fields\
    \ may carry sensitive information which the\n   server should not pass on to the\
    \ script unless explicitly configured\n   to do so.  For example, if the server\
    \ protects the script by using\n   the Basic authentication scheme, then the client\
    \ will send an\n   Authorization header field containing a username and password.\
    \  The\n   server validates this information and so it should not pass on the\n\
    \   password via the HTTP_AUTHORIZATION meta-variable without careful\n   consideration.\
    \  This also applies to the Proxy-Authorization header\n   field and the corresponding\
    \ HTTP_PROXY_AUTHORIZATION meta-variable.\n"
- title: 9.3.  Data Privacy
  contents:
  - "9.3.  Data Privacy\n   Confidential data in a request should be placed in a message-body\
    \ as\n   part of a POST request, and not placed in the URI or message headers.\n\
    \   On some systems, the environment used to pass meta-variables to a\n   script\
    \ may be visible to other scripts or users.  In addition, many\n   existing servers,\
    \ proxies and clients will permanently record the URI\n   where it might be visible\
    \ to third parties.\n"
- title: 9.4.  Information Security Model
  contents:
  - "9.4.  Information Security Model\n   For a client connection using TLS, the security\
    \ model applies between\n   the client and the server, and not between the client\
    \ and the script.\n   It is the server's responsibility to handle the TLS session,\
    \ and thus\n   it is the server which is authenticated to the client, not the\
    \ CGI\n   script.\n   This specification provides no mechanism for the script\
    \ to\n   authenticate the server which invoked it.  There is no enforced\n   integrity\
    \ on the CGI request and response messages.\n"
- title: 9.5.  Script Interference with the Server
  contents:
  - "9.5.  Script Interference with the Server\n   The most common implementation\
    \ of CGI invokes the script as a child\n   process using the same user and group\
    \ as the server process.  It\n   should therefore be ensured that the script cannot\
    \ interfere with the\n   server process, its configuration, documents or log files.\n\
    \   If the script is executed by calling a function linked in to the\n   server\
    \ software (either at compile-time or run-time) then precautions\n   should be\
    \ taken to protect the core memory of the server, or to\n   ensure that untrusted\
    \ code cannot be executed.\n"
- title: 9.6.  Data Length and Buffering Considerations
  contents:
  - "9.6.  Data Length and Buffering Considerations\n   This specification places\
    \ no limits on the length of the message-body\n   presented to the script.  The\
    \ script should not assume that\n   statically allocated buffers of any size are\
    \ sufficient to contain\n   the entire submission at one time.  Use of a fixed\
    \ length buffer\n   without careful overflow checking may result in an attacker\n\
    \   exploiting 'stack-smashing' or 'stack-overflow' vulnerabilities of\n   the\
    \ operating system.  The script may spool large submissions to disk\n   or other\
    \ buffering media, but a rapid succession of large submissions\n   may result\
    \ in denial of service conditions.  If the CONTENT_LENGTH of\n   a message-body\
    \ is larger than resource considerations allow, scripts\n   should respond with\
    \ an error status appropriate for the protocol\n   version; potentially applicable\
    \ status codes include 503 'Service\n   Unavailable' (HTTP/1.0 and HTTP/1.1),\
    \ 413 'Request Entity Too Large'\n   (HTTP/1.1), and 414 'Request-URI Too Large'\
    \ (HTTP/1.1).\n   Similar considerations apply to the server's handling of the\
    \ CGI\n   response from the script.  There is no limit on the length of the\n\
    \   header or message-body returned by the script; the server should not\n   assume\
    \ that statically allocated buffers of any size are sufficient\n   to contain\
    \ the entire response.\n"
- title: 9.7.  Stateless Processing
  contents:
  - "9.7.  Stateless Processing\n   The stateless nature of the Web makes each script\
    \ execution and\n   resource retrieval independent of all others even when multiple\n\
    \   requests constitute a single conceptual Web transaction.  Because of\n   this,\
    \ a script should not make any assumptions about the context of\n   the user-agent\
    \ submitting a request.  In particular, scripts should\n   examine data obtained\
    \ from the client and verify that they are valid,\n   both in form and content,\
    \ before allowing them to be used for\n   sensitive purposes such as input to\
    \ other applications, commands, or\n   operating system services.  These uses\
    \ include (but are not limited\n   to) system call arguments, database writes,\
    \ dynamically evaluated\n   source code, and input to billing or other secure\
    \ processes.  It is\n   important that applications be protected from invalid\
    \ input\n   regardless of whether the invalidity is the result of user error,\n\
    \   logic error, or malicious action.\n   Authors of scripts involved in multi-request\
    \ transactions should be\n   particularly cautious about validating the state\
    \ information;\n   undesirable effects may result from the substitution of dangerous\n\
    \   values for portions of the submission which might otherwise be\n   presumed\
    \ safe.  Subversion of this type occurs when alterations are\n   made to data\
    \ from a prior stage of the transaction that were not\n   meant to be controlled\
    \ by the client (e.g., hidden HTML form\n   elements, cookies, embedded URLs,\
    \ etc.).\n"
- title: 9.8.  Relative Paths
  contents:
  - "9.8.  Relative Paths\n   The server should be careful of \"..\" path segments\
    \ in the request\n   URI.  These should be removed or resolved in the request\
    \ URI before\n   it is split into the script-path and extra-path.  Alternatively,\
    \ when\n   the extra-path is used to find the PATH_TRANSLATED, care should be\n\
    \   taken to avoid the path resolution from providing translated paths\n   outside\
    \ an expected path hierarchy.\n"
- title: 9.9.  Non-parsed Header Output
  contents:
  - "9.9.  Non-parsed Header Output\n   If a script returns a non-parsed header output,\
    \ to be interpreted by\n   the client in its native protocol, then the script\
    \ must address all\n   security considerations relating to that protocol.\n"
- title: 10.  Acknowledgements
  contents:
  - "10.  Acknowledgements\n   This work is based on the original CGI interface that\
    \ arose out of\n   discussions on the 'www-talk' mailing list.  In particular,\
    \ Rob\n   McCool, John Franks, Ari Luotonen, George Phillips and Tony Sanders\n\
    \   deserve special recognition for their efforts in defining and\n   implementing\
    \ the early versions of this interface.\n   This document has also greatly benefited\
    \ from the comments and\n   suggestions made Chris Adie, Dave Kristol and Mike\
    \ Meyer; also David\n   Morris, Jeremy Madea, Patrick McManus, Adam Donahue, Ross\
    \ Patterson\n   and Harald Alvestrand.\n"
- title: 11.  References
  contents:
  - '11.  References

    '
- title: 11.1  Normative References
  contents:
  - "11.1  Normative References\n   [1]  Berners-Lee, T., Fielding, R. and H. Frystyk,\
    \ \"Hypertext\n        Transfer Protocol -- HTTP/1.0\", RFC 1945, May 1996.\n\
    \   [2]  Berners-Lee, T., Fielding, R. and L. Masinter, \"Uniform Resource\n \
    \       Identifiers (URI) : Generic Syntax\", RFC 2396, August 1998.\n   [3] \
    \ Bradner, S., \"Key words for use in RFCs to Indicate Requirements\n        Levels\"\
    , BCP 14, RFC 2119, March 1997.\n   [4]  Fielding, R., Gettys, J., Mogul, J.,\
    \ Frystyk, H., Masinter, L.,\n        Leach, P., and T. Berners-Lee, \"Hypertext\
    \ Transfer Protocol --\n        HTTP/1.1\", RFC 2616, June 1999.\n   [5]  Franks,\
    \ J., Hallam-Baker, P., Hostetler, J., Lawrence, S.,\n        Leach, P., Luotonen,\
    \ A., and L. Stewart, \"HTTP Authentication:\n        Basic and Digest Access\
    \ Authentication\", RFC 2617, June 1999.\n   [6]  Freed, N. and N. Borenstein,\
    \ \"Multipurpose Internet Mail\n        Extensions (MIME) Part Two: Media Types\"\
    , RFC 2046, November\n        1996.\n   [7]  Hinden, R., Carpenter, B., and L.\
    \ Masinter, \"Format for Literal\n        IPv6 Addresses in URL's\", RFC 2732,\
    \ December 1999.\n   [8]  \"HTTP Status Code Registry\",\n        http://www.iana.org/assignments/http-status-codes,\
    \ IANA.\n   [9]  \"Information Systems -- Coded Character Sets -- 7-bit American\n\
    \        Standard Code for Information Interchange (7-Bit ASCII)\", ANSI\n   \
    \     INCITS.4-1986 (R2002).\n   [10] \"Information technology -- 8-bit single-byte\
    \ coded graphic\n        character sets -- Part 1: Latin alphabet No. 1\", ISO/IEC\n\
    \        8859-1:1998.\n"
- title: 11.2.  Informative References
  contents:
  - "11.2.  Informative References\n   [11] Berners-Lee, T., \"Universal Resource\
    \ Identifiers in WWW: A\n        Unifying Syntax for the Expression of Names and\
    \ Addresses of\n        Objects on the Network as used in the World-Wide Web\"\
    , RFC 1630,\n        June 1994.\n   [12] Braden, R., Ed., \"Requirements for Internet\
    \ Hosts -- Application\n        and Support\", STD 3, RFC 1123, October 1989.\n\
    \   [13] Crocker, D., \"Standard for the Format of ARPA Internet Text\n      \
    \  Messages\", STD 11, RFC 822, August 1982.\n   [14] Dierks, T. and C. Allen,\
    \ \"The TLS Protocol Version 1.0\", RFC\n        2246, January 1999.\n   [15]\
    \ Hinden R. and S. Deering, \"Internet Protocol Version 6 (IPv6)\n        Addressing\
    \ Architecture\", RFC 3513, April 2003.\n   [16] Masinter, L., \"Returning Values\
    \ from Forms:\n        multipart/form-data\", RFC 2388, August 1998.\n   [17]\
    \ Mockapetris, P., \"Domain Names - Concepts and Facilities\", STD\n        13,\
    \ RFC 1034, November 1987.\n   [18] Raggett, D., Le Hors, A., and I. Jacobs, Eds.,\
    \ \"HTML 4.01\n        Specification\", W3C Recommendation December 1999,\n  \
    \      http://www.w3.org/TR/html401/.\n   [19] Rescola, E. \"HTTP Over TLS\",\
    \ RFC 2818, May 2000.\n   [20] St. Johns, M., \"Identification Protocol\", RFC\
    \ 1413, February\n        1993.\n   [21] IBM National Language Support Reference\
    \ Manual Volume 2,\n        SE09-8002-01, March 1990.\n   [22] \"The Common Gateway\
    \ Interface\",\n        http://hoohoo.ncsa.uiuc.edu/cgi/, NCSA, University of\
    \ Illinois.\n"
- title: 12.  Authors' Addresses
  contents:
  - "12.  Authors' Addresses\n   David Robinson\n   The Apache Software Foundation\n\
    \   EMail: drtr@apache.org\n   Ken A. L. Coar\n   The Apache Software Foundation\n\
    \   EMail: coar@apache.org\n"
- title: 13.  Full Copyright Statement
  contents:
  - "13.  Full Copyright Statement\n   Copyright (C) The Internet Society (2004).\
    \  This document is subject\n   to the rights, licenses and restrictions contained\
    \ in BCP 78 and at\n   www.rfc-editor.org, and except as set forth therein, the\
    \ authors\n   retain all their rights.\n   This document and the information contained\
    \ herein are provided on an\n   \"AS IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION\
    \ HE/SHE REPRESENTS\n   OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY AND\
    \ THE INTERNET\n   ENGINEERING TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS OR\
    \ IMPLIED,\n   INCLUDING BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF THE\n\
    \   INFORMATION HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES\
    \ OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.\n   Intellectual Property\n\
    \   The IETF takes no position regarding the validity or scope of any\n   Intellectual\
    \ Property Rights or other rights that might be claimed to\n   pertain to the\
    \ implementation or use of the technology described in\n   this document or the\
    \ extent to which any license under such rights\n   might or might not be available;\
    \ nor does it represent that it has\n   made any independent effort to identify\
    \ any such rights.  Information\n   on the ISOC's procedures with respect to rights\
    \ in ISOC Documents can\n   be found in BCP 78 and BCP 79.\n   Copies of IPR disclosures\
    \ made to the IETF Secretariat and any\n   assurances of licenses to be made available,\
    \ or the result of an\n   attempt made to obtain a general license or permission\
    \ for the use of\n   such proprietary rights by implementers or users of this\n\
    \   specification can be obtained from the IETF on-line IPR repository at\n  \
    \ http://www.ietf.org/ipr.\n   The IETF invites any interested party to bring\
    \ to its attention any\n   copyrights, patents or patent applications, or other\
    \ proprietary\n   rights that may cover technology that may be required to implement\n\
    \   this standard.  Please address the information to the IETF at ietf-\n   ipr@ietf.org.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
