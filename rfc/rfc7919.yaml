- title: __initial_text__
  contents:
  - "      Negotiated Finite Field Diffie-Hellman Ephemeral Parameters\n         \
    \          for Transport Layer Security (TLS)\n"
- title: Abstract
  contents:
  - "Abstract\n   Traditional finite-field-based Diffie-Hellman (DH) key exchange\n\
    \   during the Transport Layer Security (TLS) handshake suffers from a\n   number\
    \ of security, interoperability, and efficiency shortcomings.\n   These shortcomings\
    \ arise from lack of clarity about which DH group\n   parameters TLS servers should\
    \ offer and clients should accept.  This\n   document offers a solution to these\
    \ shortcomings for compatible peers\n   by using a section of the TLS \"Supported\
    \ Groups Registry\" (renamed\n   from \"EC Named Curve Registry\" by this document)\
    \ to establish common\n   finite field DH parameters with known structure and\
    \ a mechanism for\n   peers to negotiate support for these groups.\n   This document\
    \ updates TLS versions 1.0 (RFC 2246), 1.1 (RFC 4346),\n   and 1.2 (RFC 5246),\
    \ as well as the TLS Elliptic Curve Cryptography\n   (ECC) extensions (RFC 4492).\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This\
    \ document is a product of the Internet Engineering Task Force\n   (IETF).  It\
    \ represents the consensus of the IETF community.  It has\n   received public\
    \ review and has been approved for publication by the\n   Internet Engineering\
    \ Steering Group (IESG).  Further information on\n   Internet Standards is available\
    \ in Section 2 of RFC 7841.\n   Information about the current status of this document,\
    \ any errata,\n   and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc7919.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2016 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction  . . . . . . . . . . . . . . . . . . .\
    \ . . . . .   4\n     1.1.  Requirements Language . . . . . . . . . . . . . .\
    \ . . . .   5\n     1.2.  Vocabulary  . . . . . . . . . . . . . . . . . . . .\
    \ . . .   5\n   2.  Named Group Overview  . . . . . . . . . . . . . . . . . .\
    \ . .   5\n   3.  Client Behavior . . . . . . . . . . . . . . . . . . . . . .\
    \ .   6\n     3.1.  Client Local Policy on Custom Groups  . . . . . . . . . .\
    \   7\n   4.  Server Behavior . . . . . . . . . . . . . . . . . . . . . . .  \
    \ 8\n   5.  Optimizations . . . . . . . . . . . . . . . . . . . . . . . .   9\n\
    \     5.1.  Checking the Peer's Public Key  . . . . . . . . . . . . .   9\n  \
    \   5.2.  Short Exponents . . . . . . . . . . . . . . . . . . . . .   9\n    \
    \ 5.3.  Table Acceleration  . . . . . . . . . . . . . . . . . . .  10\n   6. \
    \ Operational Considerations  . . . . . . . . . . . . . . . . .  10\n     6.1.\
    \  Preference Ordering . . . . . . . . . . . . . . . . . . .  10\n   7.  IANA\
    \ Considerations . . . . . . . . . . . . . . . . . . . . .  11\n   8.  Security\
    \ Considerations . . . . . . . . . . . . . . . . . . .  12\n     8.1.  Negotiation\
    \ Resistance to Active Attacks  . . . . . . . .  12\n     8.2.  Group Strength\
    \ Considerations . . . . . . . . . . . . . .  13\n     8.3.  Finite Field DHE\
    \ Only . . . . . . . . . . . . . . . . . .  13\n     8.4.  Deprecating Weak Groups\
    \ . . . . . . . . . . . . . . . . .  14\n     8.5.  Choice of Groups  . . . .\
    \ . . . . . . . . . . . . . . . .  14\n     8.6.  Timing Attacks  . . . . . .\
    \ . . . . . . . . . . . . . . .  14\n     8.7.  Replay Attacks from Non-negotiated\
    \ FFDHE  . . . . . . . .  15\n     8.8.  Forward Secrecy . . . . . . . . . . .\
    \ . . . . . . . . . .  15\n     8.9.  False Start . . . . . . . . . . . . . .\
    \ . . . . . . . . .  15\n   9.  Privacy Considerations  . . . . . . . . . . .\
    \ . . . . . . . .  16\n     9.1.  Client Fingerprinting . . . . . . . . . . .\
    \ . . . . . . .  16\n   10. References  . . . . . . . . . . . . . . . . . . .\
    \ . . . . . .  16\n     10.1.  Normative References . . . . . . . . . . . . .\
    \ . . . . .  16\n     10.2.  Informative References . . . . . . . . . . . . .\
    \ . . . .  17\n   Appendix A.  Supported Groups Registry (Formerly \"EC Named\
    \ Curve\n                Registry\") . . . . . . . . . . . . . . . . . . . . .\
    \  19\n     A.1.  ffdhe2048 . . . . . . . . . . . . . . . . . . . . . . . .  19\n\
    \     A.2.  ffdhe3072 . . . . . . . . . . . . . . . . . . . . . . . .  20\n  \
    \   A.3.  ffdhe4096 . . . . . . . . . . . . . . . . . . . . . . . .  22\n    \
    \ A.4.  ffdhe6144 . . . . . . . . . . . . . . . . . . . . . . . .  23\n     A.5.\
    \  ffdhe8192 . . . . . . . . . . . . . . . . . . . . . . . .  26\n   Acknowledgements\
    \  . . . . . . . . . . . . . . . . . . . . . . . .  29\n   Author's Address  .\
    \ . . . . . . . . . . . . . . . . . . . . . . .  29\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   Traditional TLS [RFC5246] offers a Diffie-Hellman Ephemeral\
    \ (DHE) key\n   exchange mode that provides forward secrecy for the connection.\
    \  The\n   client offers a cipher suite in the ClientHello that includes DHE,\n\
    \   and the server offers the client group parameters generator g and\n   modulus\
    \ p.  If the client does not consider the group strong enough\n   (e.g., p is\
    \ too small, p is not prime, or there are small subgroups\n   that cannot be easily\
    \ avoided) or if it is unable to process the\n   group for other reasons, the\
    \ client has no recourse but to terminate\n   the connection.\n   Conversely,\
    \ when a TLS server receives a suggestion for a DHE cipher\n   suite from a client,\
    \ it has no way of knowing what kinds of DH groups\n   the client is capable of\
    \ handling or what the client's security\n   requirements are for this key exchange\
    \ session.  For example, some\n   widely distributed TLS clients are not capable\
    \ of DH groups where p >\n   1024 bits.  Other TLS clients may, by policy, wish\
    \ to use DHE only if\n   the server can offer a stronger group (and are willing\
    \ to use a non-\n   PFS (Perfect Forward Secrecy) key exchange mechanism otherwise).\
    \  The\n   server has no way of knowing which type of client is connecting but\n\
    \   must select DH parameters with insufficient knowledge.\n   Additionally, the\
    \ DH parameters selected by the server may have a\n   known structure that renders\
    \ them secure against a small subgroup\n   attack, but a client receiving an arbitrary\
    \ p and g has no efficient\n   way to verify that the structure of a new group\
    \ is reasonable for\n   use.\n   This modification to TLS solves these problems\
    \ by using a section of\n   the \"Supported Groups Registry\" (renamed from \"\
    EC Named Curve\n   Registry\" by this document) to select common DH groups with\
    \ known\n   structure and defining the use of the \"elliptic_curves(10)\" extension\n\
    \   (described here as the Supported Groups extension) for clients\n   advertising\
    \ support for DHE with these groups.  This document also\n   provides guidance\
    \ for compatible peers to take advantage of the\n   additional security, availability,\
    \ and efficiency offered.\n   The use of this mechanism by one compatible peer\
    \ when interacting\n   with a non-compatible peer should have no detrimental effects.\n\
    \   This document updates TLS versions 1.0 [RFC2246], 1.1 [RFC4346], and\n   1.2\
    \ [RFC5246], as well as the TLS ECC extensions [RFC4492].\n"
- title: 1.1.  Requirements Language
  contents:
  - "1.1.  Requirements Language\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\"\
    , \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"\
    MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described\
    \ in [RFC2119].\n"
- title: 1.2.  Vocabulary
  contents:
  - "1.2.  Vocabulary\n   The terms \"DHE\" or \"FFDHE\" are used in this document\
    \ to refer to the\n   finite-field-based Diffie-Hellman ephemeral key exchange\
    \ mechanism in\n   TLS.  TLS also supports Elliptic Curve Diffie-Hellman Ephemeral\n\
    \   (ECDHE) key exchanges [RFC4492], but this document does not document\n   their\
    \ use.  A registry previously used only by ECDHE-capable\n   implementations is\
    \ expanded in this document to cover FFDHE groups as\n   well.  \"FFDHE cipher\
    \ suites\" is used in this document to refer\n   exclusively to cipher suites\
    \ with FFDHE key exchange mechanisms, but\n   note that these suites are typically\
    \ labeled with a TLS_DHE_ prefix.\n"
- title: 2.  Named Group Overview
  contents:
  - "2.  Named Group Overview\n   We use previously unallocated codepoints within\
    \ the extension\n   currently known as \"elliptic_curves\" (Section 5.1.1. of\
    \ [RFC4492]) to\n   indicate known finite field groups.  The extension's semantics\
    \ are\n   expanded from \"Supported Elliptic Curves\" to \"Supported Groups\"\
    .  The\n   enum datatype used in the extension has been renamed from NamedCurve\n\
    \   to NamedGroup.  Its semantics are likewise expanded from \"named\n   curve\"\
    \ to \"named group\".\n   Additionally, we explicitly relax the requirement about\
    \ when the\n   Supported Groups extension can be sent.  This extension MAY be\
    \ sent\n   by the client when either FFDHE or ECDHE cipher suites are listed.\n\
    \   Codepoints in the \"Supported Groups Registry\" with a high byte of\n   0x01\
    \ (that is, between 256 and 511, inclusive) are set aside for\n   FFDHE groups,\
    \ though only a small number of them are initially\n   defined and we do not expect\
    \ many other FFDHE groups to be added to\n   this range.  No codepoints outside\
    \ of this range will be allocated to\n   FFDHE groups.  The new codepoints for\
    \ the \"Supported Groups Registry\"\n   are:\n           enum {\n           //\
    \ other already defined elliptic curves (see RFC 4492)\n               ffdhe2048(256),\
    \ ffdhe3072(257), ffdhe4096(258),\n               ffdhe6144(259), ffdhe8192(260),\n\
    \           //\n           } NamedGroup;\n   These additions to the \"Supported\
    \ Groups Registry\" are described in\n   detail in Appendix A.  They are all safe\
    \ primes derived from the base\n   of the natural logarithm (\"e\"), with the\
    \ high and low 64 bits set to\n   1 for efficient Montgomery or Barrett reduction.\n\
    \   The use of the base of the natural logarithm here is as a \"nothing-\n   up-my-sleeve\"\
    \ number.  The goal is to guarantee that the bits in the\n   middle of the modulus\
    \ are effectively random, while avoiding any\n   suspicion that the primes have\
    \ secretly been selected to be weak\n   according to some secret criteria.  [RFC3526]\
    \ used pi for this value.\n   See Section 8.5 for reasons that this document does\
    \ not reuse pi.\n"
- title: 3.  Client Behavior
  contents:
  - "3.  Client Behavior\n   A TLS client that is capable of using strong finite field\
    \ Diffie-\n   Hellman groups can advertise its capabilities and its preferences\
    \ for\n   stronger key exchange by using this mechanism.\n   The compatible client\
    \ that wants to be able to negotiate strong FFDHE\n   sends a Supported Groups\
    \ extension (identified by type\n   elliptic_curves(10) in [RFC4492]) in the ClientHello\
    \ and includes a\n   list of known FFDHE groups in the extension data, ordered\
    \ from most\n   preferred to least preferred.  If the client also supports and\
    \ wants\n   to offer ECDHE key exchange, it MUST use a single Supported Groups\n\
    \   extension to include all supported groups (both ECDHE and FFDHE\n   groups).\
    \  The ordering SHOULD be based on client preference, but see\n   Section 6.1\
    \ for more nuance.\n   A client that offers a Supported Groups extension containing\
    \ an FFDHE\n   group SHOULD also include at least one FFDHE cipher suite in the\n\
    \   ClientHello.\n   A client that offers a group MUST be able and willing to\
    \ perform a DH\n   key exchange using that group.\n   A client that offers one\
    \ or more FFDHE groups in the Supported Groups\n   extension and an FFDHE cipher\
    \ suite and that receives an FFDHE cipher\n   suite from the server SHOULD take\
    \ the following steps upon receiving\n   the ServerKeyExchange:\n   o  For non-anonymous\
    \ cipher suites where the offered certificate is\n      valid and appropriate\
    \ for the peer, validate the signature over\n      the ServerDHParams.  If not\
    \ valid, terminate the connection.\n   o  If the signature over ServerDHParams\
    \ is valid, compare the\n      selected dh_p and dh_g with the FFDHE groups offered\
    \ by the\n      client.  If none of the offered groups match, the server is not\n\
    \      compatible with this document.  The client MAY decide to continue\n   \
    \   the connection if the selected group is acceptable under local\n      policy,\
    \ or it MAY decide to terminate the connection with a fatal\n      insufficient_security(71)\
    \ alert.\n   o  If the client continues (either because the server offered a\n\
    \      matching group or because local policy permits the offered custom\n   \
    \   group), the client MUST verify that dh_Ys is in the range 1 <\n      dh_Ys\
    \ < dh_p - 1.  If dh_Ys is not in this range, the client MUST\n      terminate\
    \ the connection with a fatal handshake_failure(40) alert.\n   o  If dh_Ys is\
    \ in range, then the client SHOULD continue with the\n      connection as usual.\n"
- title: 3.1.  Client Local Policy on Custom Groups
  contents:
  - "3.1.  Client Local Policy on Custom Groups\n   Compatible clients that are willing\
    \ to accept FFDHE cipher suites\n   from non-compatible servers may have local\
    \ policy about what custom\n   FFDHE groups they are willing to accept.  This\
    \ local policy presents\n   a risk to clients, who may accept weakly protected\
    \ communications\n   from misconfigured servers.\n   This document cannot enumerate\
    \ all possible safe local policy (the\n   safest may be to simply reject all custom\
    \ groups), but compatible\n   clients that accept some custom groups from the\
    \ server MUST do at\n   least cursory checks on group size and may take other\
    \ properties into\n   consideration as well.\n   A compatible client that accepts\
    \ FFDHE cipher suites using custom\n   groups from non-compatible servers MUST\
    \ reject any group with |dh_p|\n   < 768 bits and SHOULD reject any group with\
    \ |dh_p| < 1024 bits.\n   A compatible client that rejects a non-compatible server's\
    \ custom\n   group may decide to retry the connection while omitting all FFDHE\n\
    \   cipher suites from the ClientHello.  A client SHOULD only use this\n   approach\
    \ if it successfully verified the server's expected signature\n   over the ServerDHParams,\
    \ to avoid being forced by an active attacker\n   into a non-preferred cipher\
    \ suite.\n"
- title: 4.  Server Behavior
  contents:
  - "4.  Server Behavior\n   If a compatible TLS server receives a Supported Groups\
    \ extension from\n   a client that includes any FFDHE group (i.e., any codepoint\
    \ between\n   256 and 511, inclusive, even if unknown to the server), and if none\n\
    \   of the client-proposed FFDHE groups are known and acceptable to the\n   server,\
    \ then the server MUST NOT select an FFDHE cipher suite.  In\n   this case, the\
    \ server SHOULD select an acceptable non-FFDHE cipher\n   suite from the client's\
    \ offered list.  If the extension is present\n   with FFDHE groups, none of the\
    \ client's offered groups are acceptable\n   by the server, and none of the client's\
    \ proposed non-FFDHE cipher\n   suites are acceptable to the server, the server\
    \ MUST end the\n   connection with a fatal TLS alert of type insufficient_security(71).\n\
    \   If at least one FFDHE cipher suite is present in the client cipher\n   suite\
    \ list and the Supported Groups extension is either absent from\n   the ClientHello\
    \ entirely or contains no FFDHE groups (i.e., no\n   codepoints between 256 and\
    \ 511, inclusive), then the server knows\n   that the client is not compatible\
    \ with this document.  In this\n   scenario, a server MAY select a non-FFDHE cipher\
    \ suite, or it MAY\n   select an FFDHE cipher suite and offer an FFDHE group of\
    \ its choice\n   to the client as part of a traditional ServerKeyExchange.\n \
    \  A compatible TLS server that receives the Supported Groups extension\n   with\
    \ FFDHE codepoints in it and that selects an FFDHE cipher suite\n   MUST select\
    \ one of the client's offered groups.  The server indicates\n   the choice of\
    \ group to the client by sending the group's parameters\n   as usual in the ServerKeyExchange\
    \ as described in Section 7.4.3 of\n   [RFC5246].\n   A TLS server MUST NOT select\
    \ a named FFDHE group that was not offered\n   by a compatible client.\n   A TLS\
    \ server MUST NOT select an FFDHE cipher suite if the client did\n   not offer\
    \ one, even if the client offered an FFDHE group in the\n   Supported Groups extension.\n\
    \   If a non-anonymous FFDHE cipher suite is selected and the TLS client\n   has\
    \ used this extension to offer an FFDHE group of comparable or\n   greater strength\
    \ than the server's public key, the server SHOULD\n   select an FFDHE group at\
    \ least as strong as the server's public key.\n   For example, if the server has\
    \ a 3072-bit RSA key and the client\n   offers only ffdhe2048 and ffdhe4096, the\
    \ server SHOULD select\n   ffdhe4096.\n   When an FFDHE cipher suite is selected\
    \ and the client sends a\n   ClientKeyExchange, the server MUST verify that 1\
    \ < dh_Yc < dh_p - 1.\n   If dh_Yc is out of range, the server MUST terminate\
    \ the connection\n   with a fatal handshake_failure(40) alert.\n"
- title: 5.  Optimizations
  contents:
  - "5.  Optimizations\n   In a key exchange with a successfully negotiated known\
    \ FFDHE group,\n   both peers know that the group in question uses a safe prime\
    \ as a\n   modulus and that the group in use is of size p-1 or (p-1)/2.  This\n\
    \   allows at least three optimizations that can be used to improve\n   performance.\n"
- title: 5.1.  Checking the Peer's Public Key
  contents:
  - "5.1.  Checking the Peer's Public Key\n   Peers MUST validate each other's public\
    \ key Y (dh_Ys offered by the\n   server or dh_Yc offered by the client) by ensuring\
    \ that 1 < Y < p-1.\n   This simple check ensures that the remote peer is properly\
    \ behaved\n   and isn't forcing the local system into the 2-element subgroup.\n\
    \   To reach the same assurance with an unknown group, the client would\n   need\
    \ to verify the primality of the modulus, learn the factors of\n   p-1, and test\
    \ both the generator g and Y against each factor to avoid\n   small subgroup attacks.\n"
- title: 5.2.  Short Exponents
  contents:
  - "5.2.  Short Exponents\n   Traditional finite field Diffie-Hellman has each peer\
    \ choose their\n   secret exponent from the range [2, p-2].  Using exponentiation\
    \ by\n   squaring, this means each peer must do roughly 2*log_2(p)\n   multiplications,\
    \ twice (once for the generator and once for the\n   peer's public key).\n   Peers\
    \ concerned with performance may also prefer to choose their\n   secret exponent\
    \ from a smaller range, doing fewer multiplications,\n   while retaining the same\
    \ level of overall security.  Each named group\n   indicates its approximate security\
    \ level and provides a lower bound\n   on the range of secret exponents that should\
    \ preserve it.  For\n   example, rather than doing 2*2*3072 multiplications for\
    \ an ffdhe3072\n   handshake, each peer can choose to do 2*2*275 multiplications\
    \ by\n   choosing their secret exponent from the range [2^274, 2^275] (that\n\
    \   is, an m-bit integer where m is at least 275) and still keep the same\n  \
    \ approximate security level.\n   A similar short-exponent approach is suggested\
    \ in a Secure SHell\n   (SSH) Diffie-Hellman key exchange (see Section 6.2 of\
    \ [RFC4419]).\n"
- title: 5.3.  Table Acceleration
  contents:
  - "5.3.  Table Acceleration\n   Peers wishing to further accelerate FFDHE key exchange\
    \ can also pre-\n   compute a table of powers of the generator of a known group.\
    \  This is\n   a memory vs. time trade-off, and it only accelerates the first\n\
    \   exponentiation of the ephemeral DH exchange (the fixed-base\n   exponentiation).\
    \  The variable-base exponentiation (using the peer's\n   public exponent as a\
    \ base) still needs to be calculated as normal.\n"
- title: 6.  Operational Considerations
  contents:
  - '6.  Operational Considerations

    '
- title: 6.1.  Preference Ordering
  contents:
  - "6.1.  Preference Ordering\n   The ordering of named groups in the Supported Groups\
    \ extension may\n   contain some ECDHE groups and some FFDHE groups.  These SHOULD\
    \ be\n   ranked in the order preferred by the client.\n   However, the ClientHello\
    \ also contains a list of desired cipher\n   suites, also ranked in preference\
    \ order.  This presents the\n   possibility of conflicted preferences.  For example,\
    \ if the\n   ClientHello contains a cipher_suite field with two choices in order\n\
    \   <TLS_DHE_RSA_WITH_AES_128_CBC_SHA,\n   TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA>\
    \ and the Supported Groups\n   extension contains two choices in order <secp256r1,ffdhe3072>,\
    \ then\n   there is a clear contradiction.  Clients SHOULD NOT present such a\n\
    \   contradiction since it does not represent a sensible ordering.  A\n   server\
    \ that encounters such a contradiction when selecting between an\n   ECDHE or\
    \ FFDHE key exchange mechanism while trying to respect client\n   preferences\
    \ SHOULD give priority to the Supported Groups extension\n   (in the example case,\
    \ it should select\n   TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA with secp256r1) but\
    \ MAY resolve\n   the contradiction any way it sees fit.\n   More subtly, clients\
    \ MAY interleave preferences between ECDHE and\n   FFDHE groups; for example,\
    \ if stronger groups are preferred\n   regardless of cost, but weaker groups are\
    \ acceptable, the Supported\n   Groups extension could consist of\n   <ffdhe8192,secp384p1,ffdhe3072,secp256r1>.\
    \  In this example, with the\n   same cipher_suite field offered as the previous\
    \ example, a server\n   configured to respect client preferences and with support\
    \ for all\n   listed groups SHOULD select TLS_DHE_RSA_WITH_AES_128_CBC_SHA with\n\
    \   ffdhe8192.  A server configured to respect client preferences and\n   with\
    \ support for only secp384p1 and ffdhe3072 SHOULD select\n   TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA\
    \ with secp384p1.\n"
- title: 7.  IANA Considerations
  contents:
  - "7.  IANA Considerations\n   This document renames the \"EC Named Curve Registry\"\
    \ (originally\n   defined in [RFC4492] and updated by [RFC7027]) to the \"Supported\n\
    \   Groups Registry\".  See\n   <https://www.iana.org/assignments/tls-parameters>.\n\
    \   This document expands the semantics of this registry to include\n   groups\
    \ based on finite fields in addition to groups based on elliptic\n   curves. \
    \ IANA has added a range designation to the registry,\n   indicating that values\
    \ from 256-511 (inclusive) are set aside for\n   \"Finite Field Diffie-Hellman\
    \ groups\" and that all other entries in\n   the registry are \"Elliptic curve\
    \ groups\".\n   This document allocates five well-defined codepoints in the registry\n\
    \   for specific finite field Diffie-Hellman groups defined in\n   Appendix A.\n\
    \   In addition, the four highest codepoints in the range 508-511,\n   inclusive,\
    \ are designated for Private Use [RFC5226] by peers who have\n   privately developed\
    \ finite field Diffie-Hellman groups that they wish\n   to signal internally.\n\
    \   The updated registry section is as follows:\n   +---------+-------------+---------+-----------+\n\
    \   | Value   | Description | DTLS-OK | Reference |\n   +---------+-------------+---------+-----------+\n\
    \   | 256     | ffdhe2048   | Y       | RFC 7919  |\n   | 257     | ffdhe3072\
    \   | Y       | RFC 7919  |\n   | 258     | ffdhe4096   | Y       | RFC 7919 \
    \ |\n   | 259     | ffdhe6144   | Y       | RFC 7919  |\n   | 260     | ffdhe8192\
    \   | Y       | RFC 7919  |\n   | 508-511 | Private Use | -       | RFC 7919 \
    \ |\n   +---------+-------------+---------+-----------+\n   IANA has also renamed\
    \ the \"elliptic_curves\" extension as\n   \"supported_groups\" and added a reference\
    \ to this document in the\n   \"ExtensionType Values\" registry.  See\n   <http://www.iana.org/assignments/tls-extensiontype-values>.\n"
- title: 8.  Security Considerations
  contents:
  - '8.  Security Considerations

    '
- title: 8.1.  Negotiation Resistance to Active Attacks
  contents:
  - "8.1.  Negotiation Resistance to Active Attacks\n   Because the contents of the\
    \ Supported Groups extension are hashed in\n   the Finished message, an active\
    \ Man in the Middle (MITM) that tries\n   to filter or omit groups will cause\
    \ the handshake to fail, but\n   possibly not before getting the peer to do something\
    \ it would not\n   otherwise have done.\n   An attacker who impersonates the server\
    \ can try to do any of the\n   following:\n   o  Pretend that a non-compatible\
    \ server is actually capable of this\n      extension and select a group from\
    \ the client's list, causing the\n      client to select a group it is willing\
    \ to negotiate.  It is\n      unclear how this would be an effective attack.\n\
    \   o  Pretend that a compatible server is actually non-compatible by\n      negotiating\
    \ a non-FFDHE cipher suite.  This is no different than\n      MITM cipher suite\
    \ filtering.\n   o  Pretend that a compatible server is actually non-compatible\
    \ by\n      negotiating a DHE cipher suite with a custom (perhaps weak) group\n\
    \      selected by the attacker.  This is no worse than the current\n      scenario\
    \ and would require the attacker to be able to sign the\n      ServerDHParams,\
    \ which should not be possible without access to the\n      server's secret key.\n\
    \   An attacker who impersonates the client can try to do the following:\n   o\
    \  Pretend that a compatible client is not compatible (e.g., by not\n      offering\
    \ the Supported Groups extension or by replacing the\n      Supported Groups extension\
    \ with one that includes no FFDHE\n      groups).  This could cause the server\
    \ to negotiate a weaker DHE\n      group during the handshake or to select a non-FFDHE\
    \ cipher suite,\n      but it would fail to complete during the final check of\
    \ the\n      Finished message.\n   o  Pretend that a non-compatible client is\
    \ compatible (e.g., by\n      adding the Supported Groups extension or by adding\
    \ FFDHE groups to\n      the extension).  This could cause the server to select\
    \ a\n      particular named group in the ServerKeyExchange or to avoid\n     \
    \ selecting an FFDHE cipher suite.  The peers would fail to compute\n      the\
    \ final check of the Finished message.\n   o  Change the list of groups offered\
    \ by the client (e.g., by removing\n      the stronger of the set of groups offered).\
    \  This could cause the\n      server to negotiate a weaker group than desired,\
    \ but again, should\n      be caught by the check in the Finished message.\n"
- title: 8.2.  Group Strength Considerations
  contents:
  - "8.2.  Group Strength Considerations\n   TLS implementations using FFDHE key exchange\
    \ should consider the\n   strength of the group they negotiate.  The strength\
    \ of the selected\n   group is one of the factors that define the connection's\
    \ resilience\n   against attacks on the session's confidentiality and integrity,\
    \ since\n   the session keys are derived from the DHE handshake.\n   While attacks\
    \ on integrity must generally happen while the session is\n   in progress, attacks\
    \ against session confidentiality can happen\n   significantly later if the entire\
    \ TLS session is stored for offline\n   analysis.  Therefore, FFDHE groups should\
    \ be selected by clients and\n   servers based on confidentiality guarantees they\
    \ need.  Sessions that\n   need extremely long-term confidentiality should prefer\
    \ stronger\n   groups.\n   [ENISA] provides rough estimates of group resistance\
    \ to attack and\n   recommends that forward-looking implementations (\"future\
    \ systems\")\n   should use FFDHE group sizes of at least 3072 bits.  ffdhe3072\
    \ is\n   intended for use in these implementations.\n   Other sources (e.g., [NIST])\
    \ estimate the security levels of the\n   Discrete Log (DLOG) problem to be slightly\
    \ more difficult than\n   [ENISA].  This document's suggested minimum exponent\
    \ sizes in\n   Appendix A for implementations that use the short-exponent\n  \
    \ optimization (Section 5.2) are deliberately conservative to account\n   for\
    \ the range of these estimates.\n"
- title: 8.3.  Finite Field DHE Only
  contents:
  - "8.3.  Finite Field DHE Only\n   Note that this document specifically targets\
    \ only finite field\n   Diffie-Hellman ephemeral key exchange mechanisms.  It\
    \ does not cover\n   the non-ephemeral DH key exchange mechanisms, nor does it\
    \ address\n   ECDHE key exchange, which is defined in [RFC4492].\n   Measured\
    \ by computational cost to the TLS peers, ECDHE appears today\n   to offer a much\
    \ stronger key exchange mechanism than FFDHE.\n"
- title: 8.4.  Deprecating Weak Groups
  contents:
  - "8.4.  Deprecating Weak Groups\n   Advances in hardware or in finite field cryptanalysis\
    \ may cause some\n   of the negotiated groups to not provide the desired security\
    \ margins,\n   as indicated by the estimated work factor of an adversary to discover\n\
    \   the premaster secret (and may therefore compromise the\n   confidentiality\
    \ and integrity of the TLS session).\n   Revisions of this document should mark\
    \ known weak groups as\n   explicitly deprecated for use in TLS and should update\
    \ the estimated\n   work factor needed to break the group if the cryptanalysis\
    \ has\n   changed.  Implementations that require strong confidentiality and\n\
    \   integrity guarantees should avoid using deprecated groups and should\n   be\
    \ updated when the estimated security margins are updated.\n"
- title: 8.5.  Choice of Groups
  contents:
  - "8.5.  Choice of Groups\n   Other lists of named finite field Diffie-Hellman groups\n\
    \   [STRONGSWAN-IKE] exist.  This document chooses to not reuse them for\n   several\
    \ reasons:\n   o  Using the same groups in multiple protocols increases the value\n\
    \      for an attacker with the resources to crack any single group.\n   o  The\
    \ Internet Key Exchange Protocol (IKE) groups include weak\n      groups like\
    \ MODP768 that are unacceptable for secure TLS traffic.\n   o  Mixing group parameters\
    \ across multiple implementations leaves\n      open the possibility of some sort\
    \ of cross-protocol attack.  This\n      shouldn't be relevant for ephemeral scenarios,\
    \ and even with non-\n      ephemeral keying, services shouldn't share keys; however,\
    \ using\n      different groups avoids these failure modes entirely.\n"
- title: 8.6.  Timing Attacks
  contents:
  - "8.6.  Timing Attacks\n   Any implementation of finite field Diffie-Hellman key\
    \ exchange should\n   use constant-time modular-exponentiation implementations.\
    \  This is\n   particularly true for those implementations that ever reuse DHE\n\
    \   secret keys (so-called \"semi-static\" ephemeral keying) or share DHE\n  \
    \ secret keys across a multiple machines (e.g., in a load-balancer\n   situation).\n"
- title: 8.7.  Replay Attacks from Non-negotiated FFDHE
  contents:
  - "8.7.  Replay Attacks from Non-negotiated FFDHE\n   [SECURE-RESUMPTION], [CROSS-PROTOCOL],\
    \ and [SSL3-ANALYSIS] all show a\n   malicious peer using a bad FFDHE group to\
    \ maneuver a client into\n   selecting a premaster secret of the peer's choice,\
    \ which can be\n   replayed to another server using a non-FFDHE key exchange and\
    \ can\n   then be bootstrapped to replay client authentication.\n   To prevent\
    \ this attack (barring the session hash fix documented in\n   [RFC7627]), a client\
    \ would need not only to implement this document,\n   but also to reject non-negotiated\
    \ FFDHE cipher suites whose group\n   structure it cannot afford to verify.  Such\
    \ a client would need to\n   abort the initial handshake and reconnect to the\
    \ server in question\n   without listing any FFDHE cipher suites on the subsequent\
    \ connection.\n   This trade-off may be too costly for most TLS clients today\
    \ but may\n   be a reasonable choice for clients performing client certificate\n\
    \   authentication or for clients who have other reasons to be concerned\n   about\
    \ server-controlled premaster secrets.\n"
- title: 8.8.  Forward Secrecy
  contents:
  - "8.8.  Forward Secrecy\n   One of the main reasons to prefer FFDHE ciphersuites\
    \ is forward\n   secrecy, the ability to resist decryption even if the endpoint's\n\
    \   long-term secret key (usually RSA) is revealed in the future.\n   This property\
    \ depends on both sides of the connection discarding\n   their ephemeral keys\
    \ promptly.  Implementations should wipe their\n   FFDHE secret key material from\
    \ memory as soon as it is no longer\n   needed and should never store it in persistent\
    \ storage.\n   Forward secrecy also depends on the strength of the Diffie-Hellman\n\
    \   group; using a very strong symmetric cipher like AES256 with a\n   forward-secret\
    \ cipher suite but generating the keys with a much\n   weaker group like dhe2048\
    \ simply moves the adversary's cost from\n   attacking the symmetric cipher to\
    \ attacking the dh_Ys or dh_Yc\n   ephemeral key shares.\n   If the goal is to\
    \ provide forward secrecy, attention should be paid\n   to all parts of the cipher\
    \ suite selection process, both key exchange\n   and symmetric cipher choice.\n"
- title: 8.9.  False Start
  contents:
  - "8.9.  False Start\n   Clients capable of TLS False Start [RFC7918] may receive\
    \ a proposed\n   FFDHE group from a server that is attacker controlled.  In\n\
    \   particular, the attacker can modify the ClientHello to strip the\n   proposed\
    \ FFDHE groups, which may cause the server to offer a weaker\n   FFDHE group than\
    \ it should, and this will not be detected until\n   receipt of the server's Finished\
    \ message.  This could cause a client\n   using the False Start protocol modification\
    \ to send data encrypted\n   under a weak key agreement.\n   Clients should have\
    \ their own classification of FFDHE groups that are\n   \"cryptographically strong\"\
    \ in the same sense described in the\n   description of symmetric ciphers in [RFC7918]\
    \ and SHOULD offer at\n   least one of these in the initial handshake if they\
    \ contemplate using\n   the False Start protocol modification with an FFDHE cipher\
    \ suite.\n   Compatible clients performing a full handshake MUST NOT use the False\n\
    \   Start protocol modification if the server selects an FFDHE cipher\n   suite\
    \ but sends a group that is not cryptographically strong from the\n   client's\
    \ perspective.\n"
- title: 9.  Privacy Considerations
  contents:
  - '9.  Privacy Considerations

    '
- title: 9.1.  Client Fingerprinting
  contents:
  - "9.1.  Client Fingerprinting\n   This extension provides a few additional bits\
    \ of information to\n   distinguish between classes of TLS clients (e.g., see\n\
    \   [PANOPTICLICK]).  To minimize this sort of fingerprinting, clients\n   SHOULD\
    \ support all named groups at or above their minimum security\n   threshold. \
    \ New groups SHOULD NOT be added to the \"Supported Groups\n   Registry\" without\
    \ consideration of the cost of browser\n   fingerprinting.\n"
- title: 10.  References
  contents:
  - '10.  References

    '
- title: 10.1.  Normative References
  contents:
  - "10.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use in\
    \ RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119,\n  \
    \            DOI 10.17487/RFC2119, March 1997,\n              <http://www.rfc-editor.org/info/rfc2119>.\n\
    \   [RFC4492]  Blake-Wilson, S., Bolyard, N., Gupta, V., Hawk, C., and B.\n  \
    \            Moeller, \"Elliptic Curve Cryptography (ECC) Cipher Suites\n    \
    \          for Transport Layer Security (TLS)\", RFC 4492,\n              DOI\
    \ 10.17487/RFC4492, May 2006,\n              <http://www.rfc-editor.org/info/rfc4492>.\n\
    \   [RFC5226]  Narten, T. and H. Alvestrand, \"Guidelines for Writing an\n   \
    \           IANA Considerations Section in RFCs\", BCP 26, RFC 5226,\n       \
    \       DOI 10.17487/RFC5226, May 2008,\n              <http://www.rfc-editor.org/info/rfc5226>.\n\
    \   [RFC5246]  Dierks, T. and E. Rescorla, \"The Transport Layer Security\n  \
    \            (TLS) Protocol Version 1.2\", RFC 5246,\n              DOI 10.17487/RFC5246,\
    \ August 2008,\n              <http://www.rfc-editor.org/info/rfc5246>.\n   [RFC7918]\
    \  Langley, A., Modadugu, N., and B. Moeller, \"Transport\n              Layer\
    \ Security (TLS) False Start\", DOI 10.17487/RFC7918,\n              June 2016,\
    \ <http://www.rfc-editor.org/info/rfc7918>.\n"
- title: 10.2.  Informative References
  contents:
  - "10.2.  Informative References\n   [CROSS-PROTOCOL]\n              Mavrogiannopolous,\
    \ N., Vercauteren, F., Velichkov, V., and\n              B. Preneel, \"A Cross-Protocol\
    \ Attack on the TLS Protocol\",\n              In Proceedings of the 2012 ACM\
    \ Conference on Computer and\n              Communications Security, DOI 10.1145/2382196.2382206,\n\
    \              October 2012, <http://www.cosic.esat.kuleuven.be/\n           \
    \   publications/article-2216.pdf>.\n   [ECRYPTII]\n              European Network\
    \ of Excellence in Cryptology II, \"ECRYPT\n              II Yearly Report on\
    \ Algorithms and Keysizes (2011-2012)\",\n              Revision 1.0, September\
    \ 2012,\n              <http://www.ecrypt.eu.org/ecrypt2/documents/D.SPA.20.pdf>.\n\
    \   [ENISA]    European Union Agency for Network and Information Security\n  \
    \            (ENISA), \"Algorithms, Key Sizes and Parameters Report -\n      \
    \        2014\", November 2014,\n              <https://www.enisa.europa.eu/publications/\n\
    \              algorithms-key-size-and-parameters-report-2014>.\n   [NIST]   \
    \  National Institute of Standards and Technology,\n              \"Recommendation\
    \ for Key Management - Part 1: General\",\n              NIST Special Publication\
    \ 800-57, Revision 4,\n              DOI 10.6028/NIST.SP.800-57pt1r4, January\
    \ 2016,\n              <http://nvlpubs.nist.gov/nistpubs/SpecialPublications/\n\
    \              NIST.SP.800-57pt1r4.pdf>.\n   [PANOPTICLICK]\n              Electronic\
    \ Frontier Foundation, \"Panopticlick: Is your\n              browser safe against\
    \ tracking?\",\n              <https://panopticlick.eff.org/>.\n   [RFC2246] \
    \ Dierks, T. and C. Allen, \"The TLS Protocol Version 1.0\",\n              RFC\
    \ 2246, DOI 10.17487/RFC2246, January 1999,\n              <http://www.rfc-editor.org/info/rfc2246>.\n\
    \   [RFC3526]  Kivinen, T. and M. Kojo, \"More Modular Exponential (MODP)\n  \
    \            Diffie-Hellman groups for Internet Key Exchange (IKE)\",\n      \
    \        RFC 3526, DOI 10.17487/RFC3526, May 2003,\n              <http://www.rfc-editor.org/info/rfc3526>.\n\
    \   [RFC4346]  Dierks, T. and E. Rescorla, \"The Transport Layer Security\n  \
    \            (TLS) Protocol Version 1.1\", RFC 4346,\n              DOI 10.17487/RFC4346,\
    \ April 2006,\n              <http://www.rfc-editor.org/info/rfc4346>.\n   [RFC4419]\
    \  Friedl, M., Provos, N., and W. Simpson, \"Diffie-Hellman\n              Group\
    \ Exchange for the Secure Shell (SSH) Transport Layer\n              Protocol\"\
    , RFC 4419, DOI 10.17487/RFC4419, March 2006,\n              <http://www.rfc-editor.org/info/rfc4419>.\n\
    \   [RFC7027]  Merkle, J. and M. Lochter, \"Elliptic Curve Cryptography\n    \
    \          (ECC) Brainpool Curves for Transport Layer Security\n             \
    \ (TLS)\", RFC 7027, DOI 10.17487/RFC7027, October 2013,\n              <http://www.rfc-editor.org/info/rfc7027>.\n\
    \   [RFC7627]  Bhargavan, K., Ed., Delignat-Lavaud, A., Pironti, A.,\n       \
    \       Langley, A., and M. Ray, \"Transport Layer Security (TLS)\n          \
    \    Session Hash and Extended Master Secret Extension\",\n              RFC 7627,\
    \ DOI 10.17487/RFC7627, September 2015,\n              <http://www.rfc-editor.org/info/rfc7627>.\n\
    \   [SECURE-RESUMPTION]\n              Delignat-Lavaud, A., Bhargavan, K., and\
    \ A. Pironti,\n              \"Triple Handshakes Considered Harmful: Breaking\
    \ and Fixing\n              Authentication over TLS\", 2014 IEEE Symposium on\n\
    \              Security and Privacy, DOI 10.1109/SP.2014.14, March 2014,\n   \
    \           <https://secure-resumption.com/>.\n   [SSL3-ANALYSIS]\n          \
    \    Schneier, B. and D. Wagner, \"Analysis of the SSL 3.0\n              protocol\"\
    , In Proceedings of the Second UNIX Workshop\n              on Electronic Commerce,\
    \ 1996,\n              <https://www.schneier.com/paper-ssl.pdf>.\n   [STRONGSWAN-IKE]\n\
    \              Brunner, T. and A. Steffen, \"IKEv2 Cipher Suites: Diffie\n   \
    \           Hellman Groups\", October 2013,\n              <https://wiki.strongswan.org/projects/strongswan/wiki/\n\
    \              IKEv2CipherSuites#Diffie-Hellman-Groups>.\n"
- title: Appendix A.  Supported Groups Registry (Formerly "EC Named Curve
  contents:
  - "Appendix A.  Supported Groups Registry (Formerly \"EC Named Curve\n         \
    \    Registry\")\n   Each description below indicates the group itself, its derivation,\n\
    \   its expected strength (estimated roughly from guidelines in\n   [ECRYPTII]),\
    \ and whether it is recommended for use in TLS key\n   exchange at the given security\
    \ level.  It is not recommended to add\n   further finite field groups to the\
    \ \"Supported Groups Registry\"; any\n   attempt to do so should consider Section\
    \ 9.1.\n   The primes in these finite field groups are all safe primes; that is,\n\
    \   a prime p is a safe prime when q = (p-1)/2 is also prime.  Where e is\n  \
    \ the base of the natural logarithm and square brackets denote the\n   floor operation,\
    \ the groups that initially populate this registry are\n   derived for a given\
    \ bit length b by finding the lowest positive\n   integer X that creates a safe\
    \ prime p where:\n    p = 2^b - 2^{b-64} + {[2^{b-130} e] + X } * 2^64 - 1\n \
    \  New additions of FFDHE groups to this registry may use this same\n   derivation\
    \ (e.g., with different bit lengths) or may choose their\n   parameters in a different\
    \ way, but they must be clear about how the\n   parameters were derived.\n   New\
    \ additions of FFDHE groups MUST use a safe prime as the modulus to\n   enable\
    \ the inexpensive peer verification described in Section 5.1.\n"
- title: A.1.  ffdhe2048
  contents:
  - "A.1.  ffdhe2048\n   The 2048-bit group has registry value 256 and is calculated\
    \ from the\n   following formula:\n   The modulus is:\n   p = 2^2048 - 2^1984\
    \ + {[2^1918 * e] + 560316 } * 2^64 - 1\n   The hexadecimal representation of\
    \ p is:\n    FFFFFFFF FFFFFFFF ADF85458 A2BB4A9A AFDC5620 273D3CF1\n    D8B9C583\
    \ CE2D3695 A9E13641 146433FB CC939DCE 249B3EF9\n    7D2FE363 630C75D8 F681B202\
    \ AEC4617A D3DF1ED5 D5FD6561\n    2433F51F 5F066ED0 85636555 3DED1AF3 B557135E\
    \ 7F57C935\n    984F0C70 E0E68B77 E2A689DA F3EFE872 1DF158A1 36ADE735\n    30ACCA4F\
    \ 483A797A BC0AB182 B324FB61 D108A94B B2C8E3FB\n    B96ADAB7 60D7F468 1D4F42A3\
    \ DE394DF4 AE56EDE7 6372BB19\n    0B07A7C8 EE0A6D70 9E02FCE1 CDF7E2EC C03404CD\
    \ 28342F61\n    9172FE9C E98583FF 8E4F1232 EEF28183 C3FE3B1B 4C6FAD73\n    3BB5FCBC\
    \ 2EC22005 C58EF183 7D1683B2 C6F34A26 C1B2EFFA\n    886B4238 61285C97 FFFFFFFF\
    \ FFFFFFFF\n   The generator is: g = 2\n   The group size is: q = (p-1)/2\n  \
    \ The hexadecimal representation of q is:\n    7FFFFFFF FFFFFFFF D6FC2A2C 515DA54D\
    \ 57EE2B10 139E9E78\n    EC5CE2C1 E7169B4A D4F09B20 8A3219FD E649CEE7 124D9F7C\n\
    \    BE97F1B1 B1863AEC 7B40D901 576230BD 69EF8F6A EAFEB2B0\n    9219FA8F AF833768\
    \ 42B1B2AA 9EF68D79 DAAB89AF 3FABE49A\n    CC278638 707345BB F15344ED 79F7F439\
    \ 0EF8AC50 9B56F39A\n    98566527 A41D3CBD 5E0558C1 59927DB0 E88454A5 D96471FD\n\
    \    DCB56D5B B06BFA34 0EA7A151 EF1CA6FA 572B76F3 B1B95D8C\n    8583D3E4 770536B8\
    \ 4F017E70 E6FBF176 601A0266 941A17B0\n    C8B97F4E 74C2C1FF C7278919 777940C1\
    \ E1FF1D8D A637D6B9\n    9DDAFE5E 17611002 E2C778C1 BE8B41D9 6379A513 60D977FD\n\
    \    4435A11C 30942E4B FFFFFFFF FFFFFFFF\n   The estimated symmetric-equivalent\
    \ strength of this group is 103\n   bits.\n   Peers using ffdhe2048 that want\
    \ to optimize their key exchange with a\n   short exponent (Section 5.2) should\
    \ choose a secret key of at least\n   225 bits.\n"
- title: A.2.  ffdhe3072
  contents:
  - "A.2.  ffdhe3072\n   The 3072-bit prime has registry value 257 and is calculated\
    \ from the\n   following formula:\n   The modulus is:\n   p = 2^3072 - 2^3008\
    \ + {[2^2942 * e] + 2625351} * 2^64 - 1\n   The hexadecimal representation of\
    \ p is:\n    FFFFFFFF FFFFFFFF ADF85458 A2BB4A9A AFDC5620 273D3CF1\n    D8B9C583\
    \ CE2D3695 A9E13641 146433FB CC939DCE 249B3EF9\n    7D2FE363 630C75D8 F681B202\
    \ AEC4617A D3DF1ED5 D5FD6561\n    2433F51F 5F066ED0 85636555 3DED1AF3 B557135E\
    \ 7F57C935\n    984F0C70 E0E68B77 E2A689DA F3EFE872 1DF158A1 36ADE735\n    30ACCA4F\
    \ 483A797A BC0AB182 B324FB61 D108A94B B2C8E3FB\n    B96ADAB7 60D7F468 1D4F42A3\
    \ DE394DF4 AE56EDE7 6372BB19\n    0B07A7C8 EE0A6D70 9E02FCE1 CDF7E2EC C03404CD\
    \ 28342F61\n    9172FE9C E98583FF 8E4F1232 EEF28183 C3FE3B1B 4C6FAD73\n    3BB5FCBC\
    \ 2EC22005 C58EF183 7D1683B2 C6F34A26 C1B2EFFA\n    886B4238 611FCFDC DE355B3B\
    \ 6519035B BC34F4DE F99C0238\n    61B46FC9 D6E6C907 7AD91D26 91F7F7EE 598CB0FA\
    \ C186D91C\n    AEFE1309 85139270 B4130C93 BC437944 F4FD4452 E2D74DD3\n    64F2E21E\
    \ 71F54BFF 5CAE82AB 9C9DF69E E86D2BC5 22363A0D\n    ABC52197 9B0DEADA 1DBF9A42\
    \ D5C4484E 0ABCD06B FA53DDEF\n    3C1B20EE 3FD59D7C 25E41D2B 66C62E37 FFFFFFFF\
    \ FFFFFFFF\n   The generator is: g = 2\n   The group size is: q = (p-1)/2\n  \
    \ The hexadecimal representation of q is:\n    7FFFFFFF FFFFFFFF D6FC2A2C 515DA54D\
    \ 57EE2B10 139E9E78\n    EC5CE2C1 E7169B4A D4F09B20 8A3219FD E649CEE7 124D9F7C\n\
    \    BE97F1B1 B1863AEC 7B40D901 576230BD 69EF8F6A EAFEB2B0\n    9219FA8F AF833768\
    \ 42B1B2AA 9EF68D79 DAAB89AF 3FABE49A\n    CC278638 707345BB F15344ED 79F7F439\
    \ 0EF8AC50 9B56F39A\n    98566527 A41D3CBD 5E0558C1 59927DB0 E88454A5 D96471FD\n\
    \    DCB56D5B B06BFA34 0EA7A151 EF1CA6FA 572B76F3 B1B95D8C\n    8583D3E4 770536B8\
    \ 4F017E70 E6FBF176 601A0266 941A17B0\n    C8B97F4E 74C2C1FF C7278919 777940C1\
    \ E1FF1D8D A637D6B9\n    9DDAFE5E 17611002 E2C778C1 BE8B41D9 6379A513 60D977FD\n\
    \    4435A11C 308FE7EE 6F1AAD9D B28C81AD DE1A7A6F 7CCE011C\n    30DA37E4 EB736483\
    \ BD6C8E93 48FBFBF7 2CC6587D 60C36C8E\n    577F0984 C289C938 5A098649 DE21BCA2\
    \ 7A7EA229 716BA6E9\n    B279710F 38FAA5FF AE574155 CE4EFB4F 743695E2 911B1D06\n\
    \    D5E290CB CD86F56D 0EDFCD21 6AE22427 055E6835 FD29EEF7\n    9E0D9077 1FEACEBE\
    \ 12F20E95 B363171B FFFFFFFF FFFFFFFF\n   The estimated symmetric-equivalent strength\
    \ of this group is 125\n   bits.\n   Peers using ffdhe3072 that want to optimize\
    \ their key exchange with a\n   short exponent (Section 5.2) should choose a secret\
    \ key of at least\n   275 bits.\n"
- title: A.3.  ffdhe4096
  contents:
  - "A.3.  ffdhe4096\n   The 4096-bit group has registry value 258 and is calculated\
    \ from the\n   following formula:\n   The modulus is:\n   p = 2^4096 - 2^4032\
    \ + {[2^3966 * e] + 5736041} * 2^64 - 1\n   The hexadecimal representation of\
    \ p is:\n    FFFFFFFF FFFFFFFF ADF85458 A2BB4A9A AFDC5620 273D3CF1\n    D8B9C583\
    \ CE2D3695 A9E13641 146433FB CC939DCE 249B3EF9\n    7D2FE363 630C75D8 F681B202\
    \ AEC4617A D3DF1ED5 D5FD6561\n    2433F51F 5F066ED0 85636555 3DED1AF3 B557135E\
    \ 7F57C935\n    984F0C70 E0E68B77 E2A689DA F3EFE872 1DF158A1 36ADE735\n    30ACCA4F\
    \ 483A797A BC0AB182 B324FB61 D108A94B B2C8E3FB\n    B96ADAB7 60D7F468 1D4F42A3\
    \ DE394DF4 AE56EDE7 6372BB19\n    0B07A7C8 EE0A6D70 9E02FCE1 CDF7E2EC C03404CD\
    \ 28342F61\n    9172FE9C E98583FF 8E4F1232 EEF28183 C3FE3B1B 4C6FAD73\n    3BB5FCBC\
    \ 2EC22005 C58EF183 7D1683B2 C6F34A26 C1B2EFFA\n    886B4238 611FCFDC DE355B3B\
    \ 6519035B BC34F4DE F99C0238\n    61B46FC9 D6E6C907 7AD91D26 91F7F7EE 598CB0FA\
    \ C186D91C\n    AEFE1309 85139270 B4130C93 BC437944 F4FD4452 E2D74DD3\n    64F2E21E\
    \ 71F54BFF 5CAE82AB 9C9DF69E E86D2BC5 22363A0D\n    ABC52197 9B0DEADA 1DBF9A42\
    \ D5C4484E 0ABCD06B FA53DDEF\n    3C1B20EE 3FD59D7C 25E41D2B 669E1EF1 6E6F52C3\
    \ 164DF4FB\n    7930E9E4 E58857B6 AC7D5F42 D69F6D18 7763CF1D 55034004\n    87F55BA5\
    \ 7E31CC7A 7135C886 EFB4318A ED6A1E01 2D9E6832\n    A907600A 918130C4 6DC778F9\
    \ 71AD0038 092999A3 33CB8B7A\n    1A1DB93D 7140003C 2A4ECEA9 F98D0ACC 0A8291CD\
    \ CEC97DCF\n    8EC9B55A 7F88A46B 4DB5A851 F44182E1 C68A007E 5E655F6A\n    FFFFFFFF\
    \ FFFFFFFF\n   The generator is: g = 2\n   The group size is: q = (p-1)/2\n  \
    \ The hexadecimal representation of q is:\n    7FFFFFFF FFFFFFFF D6FC2A2C 515DA54D\
    \ 57EE2B10 139E9E78\n    EC5CE2C1 E7169B4A D4F09B20 8A3219FD E649CEE7 124D9F7C\n\
    \    BE97F1B1 B1863AEC 7B40D901 576230BD 69EF8F6A EAFEB2B0\n    9219FA8F AF833768\
    \ 42B1B2AA 9EF68D79 DAAB89AF 3FABE49A\n    CC278638 707345BB F15344ED 79F7F439\
    \ 0EF8AC50 9B56F39A\n    98566527 A41D3CBD 5E0558C1 59927DB0 E88454A5 D96471FD\n\
    \    DCB56D5B B06BFA34 0EA7A151 EF1CA6FA 572B76F3 B1B95D8C\n    8583D3E4 770536B8\
    \ 4F017E70 E6FBF176 601A0266 941A17B0\n    C8B97F4E 74C2C1FF C7278919 777940C1\
    \ E1FF1D8D A637D6B9\n    9DDAFE5E 17611002 E2C778C1 BE8B41D9 6379A513 60D977FD\n\
    \    4435A11C 308FE7EE 6F1AAD9D B28C81AD DE1A7A6F 7CCE011C\n    30DA37E4 EB736483\
    \ BD6C8E93 48FBFBF7 2CC6587D 60C36C8E\n    577F0984 C289C938 5A098649 DE21BCA2\
    \ 7A7EA229 716BA6E9\n    B279710F 38FAA5FF AE574155 CE4EFB4F 743695E2 911B1D06\n\
    \    D5E290CB CD86F56D 0EDFCD21 6AE22427 055E6835 FD29EEF7\n    9E0D9077 1FEACEBE\
    \ 12F20E95 B34F0F78 B737A961 8B26FA7D\n    BC9874F2 72C42BDB 563EAFA1 6B4FB68C\
    \ 3BB1E78E AA81A002\n    43FAADD2 BF18E63D 389AE443 77DA18C5 76B50F00 96CF3419\n\
    \    5483B005 48C09862 36E3BC7C B8D6801C 0494CCD1 99E5C5BD\n    0D0EDC9E B8A0001E\
    \ 15276754 FCC68566 054148E6 E764BEE7\n    C764DAAD 3FC45235 A6DAD428 FA20C170\
    \ E345003F 2F32AFB5\n    7FFFFFFF FFFFFFFF\n   The estimated symmetric-equivalent\
    \ strength of this group is 150\n   bits.\n   Peers using ffdhe4096 that want\
    \ to optimize their key exchange with a\n   short exponent (Section 5.2) should\
    \ choose a secret key of at least\n   325 bits.\n"
- title: A.4.  ffdhe6144
  contents:
  - "A.4.  ffdhe6144\n   The 6144-bit group has registry value 259 and is calculated\
    \ from the\n   following formula:\n   The modulus is:\n   p = 2^6144 - 2^6080\
    \ + {[2^6014 * e] + 15705020} * 2^64 - 1\n   The hexadecimal representation of\
    \ p is:\n    FFFFFFFF FFFFFFFF ADF85458 A2BB4A9A AFDC5620 273D3CF1\n    D8B9C583\
    \ CE2D3695 A9E13641 146433FB CC939DCE 249B3EF9\n    7D2FE363 630C75D8 F681B202\
    \ AEC4617A D3DF1ED5 D5FD6561\n    2433F51F 5F066ED0 85636555 3DED1AF3 B557135E\
    \ 7F57C935\n    984F0C70 E0E68B77 E2A689DA F3EFE872 1DF158A1 36ADE735\n    30ACCA4F\
    \ 483A797A BC0AB182 B324FB61 D108A94B B2C8E3FB\n    B96ADAB7 60D7F468 1D4F42A3\
    \ DE394DF4 AE56EDE7 6372BB19\n    0B07A7C8 EE0A6D70 9E02FCE1 CDF7E2EC C03404CD\
    \ 28342F61\n    9172FE9C E98583FF 8E4F1232 EEF28183 C3FE3B1B 4C6FAD73\n    3BB5FCBC\
    \ 2EC22005 C58EF183 7D1683B2 C6F34A26 C1B2EFFA\n    886B4238 611FCFDC DE355B3B\
    \ 6519035B BC34F4DE F99C0238\n    61B46FC9 D6E6C907 7AD91D26 91F7F7EE 598CB0FA\
    \ C186D91C\n    AEFE1309 85139270 B4130C93 BC437944 F4FD4452 E2D74DD3\n    64F2E21E\
    \ 71F54BFF 5CAE82AB 9C9DF69E E86D2BC5 22363A0D\n    ABC52197 9B0DEADA 1DBF9A42\
    \ D5C4484E 0ABCD06B FA53DDEF\n    3C1B20EE 3FD59D7C 25E41D2B 669E1EF1 6E6F52C3\
    \ 164DF4FB\n    7930E9E4 E58857B6 AC7D5F42 D69F6D18 7763CF1D 55034004\n    87F55BA5\
    \ 7E31CC7A 7135C886 EFB4318A ED6A1E01 2D9E6832\n    A907600A 918130C4 6DC778F9\
    \ 71AD0038 092999A3 33CB8B7A\n    1A1DB93D 7140003C 2A4ECEA9 F98D0ACC 0A8291CD\
    \ CEC97DCF\n    8EC9B55A 7F88A46B 4DB5A851 F44182E1 C68A007E 5E0DD902\n    0BFD64B6\
    \ 45036C7A 4E677D2C 38532A3A 23BA4442 CAF53EA6\n    3BB45432 9B7624C8 917BDD64\
    \ B1C0FD4C B38E8C33 4C701C3A\n    CDAD0657 FCCFEC71 9B1F5C3E 4E46041F 388147FB\
    \ 4CFDB477\n    A52471F7 A9A96910 B855322E DB6340D8 A00EF092 350511E3\n    0ABEC1FF\
    \ F9E3A26E 7FB29F8C 183023C3 587E38DA 0077D9B4\n    763E4E4B 94B2BBC1 94C6651E\
    \ 77CAF992 EEAAC023 2A281BF6\n    B3A739C1 22611682 0AE8DB58 47A67CBE F9C9091B\
    \ 462D538C\n    D72B0374 6AE77F5E 62292C31 1562A846 505DC82D B854338A\n    E49F5235\
    \ C95B9117 8CCF2DD5 CACEF403 EC9D1810 C6272B04\n    5B3B71F9 DC6B80D6 3FDD4A8E\
    \ 9ADB1E69 62A69526 D43161C1\n    A41D570D 7938DAD4 A40E329C D0E40E65 FFFFFFFF\
    \ FFFFFFFF\n   The generator is: g = 2\n   The group size is: q = (p-1)/2\n  \
    \ The hexadecimal representation of q is:\n    7FFFFFFF FFFFFFFF D6FC2A2C 515DA54D\
    \ 57EE2B10 139E9E78\n    EC5CE2C1 E7169B4A D4F09B20 8A3219FD E649CEE7 124D9F7C\n\
    \    BE97F1B1 B1863AEC 7B40D901 576230BD 69EF8F6A EAFEB2B0\n    9219FA8F AF833768\
    \ 42B1B2AA 9EF68D79 DAAB89AF 3FABE49A\n    CC278638 707345BB F15344ED 79F7F439\
    \ 0EF8AC50 9B56F39A\n    98566527 A41D3CBD 5E0558C1 59927DB0 E88454A5 D96471FD\n\
    \    DCB56D5B B06BFA34 0EA7A151 EF1CA6FA 572B76F3 B1B95D8C\n    8583D3E4 770536B8\
    \ 4F017E70 E6FBF176 601A0266 941A17B0\n    C8B97F4E 74C2C1FF C7278919 777940C1\
    \ E1FF1D8D A637D6B9\n    9DDAFE5E 17611002 E2C778C1 BE8B41D9 6379A513 60D977FD\n\
    \    4435A11C 308FE7EE 6F1AAD9D B28C81AD DE1A7A6F 7CCE011C\n    30DA37E4 EB736483\
    \ BD6C8E93 48FBFBF7 2CC6587D 60C36C8E\n    577F0984 C289C938 5A098649 DE21BCA2\
    \ 7A7EA229 716BA6E9\n    B279710F 38FAA5FF AE574155 CE4EFB4F 743695E2 911B1D06\n\
    \    D5E290CB CD86F56D 0EDFCD21 6AE22427 055E6835 FD29EEF7\n    9E0D9077 1FEACEBE\
    \ 12F20E95 B34F0F78 B737A961 8B26FA7D\n    BC9874F2 72C42BDB 563EAFA1 6B4FB68C\
    \ 3BB1E78E AA81A002\n    43FAADD2 BF18E63D 389AE443 77DA18C5 76B50F00 96CF3419\n\
    \    5483B005 48C09862 36E3BC7C B8D6801C 0494CCD1 99E5C5BD\n    0D0EDC9E B8A0001E\
    \ 15276754 FCC68566 054148E6 E764BEE7\n    C764DAAD 3FC45235 A6DAD428 FA20C170\
    \ E345003F 2F06EC81\n    05FEB25B 2281B63D 2733BE96 1C29951D 11DD2221 657A9F53\n\
    \    1DDA2A19 4DBB1264 48BDEEB2 58E07EA6 59C74619 A6380E1D\n    66D6832B FE67F638\
    \ CD8FAE1F 2723020F 9C40A3FD A67EDA3B\n    D29238FB D4D4B488 5C2A9917 6DB1A06C\
    \ 50077849 1A8288F1\n    855F60FF FCF1D137 3FD94FC6 0C1811E1 AC3F1C6D 003BECDA\n\
    \    3B1F2725 CA595DE0 CA63328F 3BE57CC9 77556011 95140DFB\n    59D39CE0 91308B41\
    \ 05746DAC 23D33E5F 7CE4848D A316A9C6\n    6B9581BA 3573BFAF 31149618 8AB15423\
    \ 282EE416 DC2A19C5\n    724FA91A E4ADC88B C66796EA E5677A01 F64E8C08 63139582\n\
    \    2D9DB8FC EE35C06B 1FEEA547 4D6D8F34 B1534A93 6A18B0E0\n    D20EAB86 BC9C6D6A\
    \ 5207194E 68720732 FFFFFFFF FFFFFFFF\n   The estimated symmetric-equivalent strength\
    \ of this group is 175\n   bits.\n   Peers using ffdhe6144 that want to optimize\
    \ their key exchange with a\n   short exponent (Section 5.2) should choose a secret\
    \ key of at least\n   375 bits.\n"
- title: A.5.  ffdhe8192
  contents:
  - "A.5.  ffdhe8192\n   The 8192-bit group has registry value 260 and is calculated\
    \ from the\n   following formula:\n   The modulus is:\n   p = 2^8192 - 2^8128\
    \ + {[2^8062 * e] + 10965728} * 2^64 - 1\n   The hexadecimal representation of\
    \ p is:\n    FFFFFFFF FFFFFFFF ADF85458 A2BB4A9A AFDC5620 273D3CF1\n    D8B9C583\
    \ CE2D3695 A9E13641 146433FB CC939DCE 249B3EF9\n    7D2FE363 630C75D8 F681B202\
    \ AEC4617A D3DF1ED5 D5FD6561\n    2433F51F 5F066ED0 85636555 3DED1AF3 B557135E\
    \ 7F57C935\n    984F0C70 E0E68B77 E2A689DA F3EFE872 1DF158A1 36ADE735\n    30ACCA4F\
    \ 483A797A BC0AB182 B324FB61 D108A94B B2C8E3FB\n    B96ADAB7 60D7F468 1D4F42A3\
    \ DE394DF4 AE56EDE7 6372BB19\n    0B07A7C8 EE0A6D70 9E02FCE1 CDF7E2EC C03404CD\
    \ 28342F61\n    9172FE9C E98583FF 8E4F1232 EEF28183 C3FE3B1B 4C6FAD73\n    3BB5FCBC\
    \ 2EC22005 C58EF183 7D1683B2 C6F34A26 C1B2EFFA\n    886B4238 611FCFDC DE355B3B\
    \ 6519035B BC34F4DE F99C0238\n    61B46FC9 D6E6C907 7AD91D26 91F7F7EE 598CB0FA\
    \ C186D91C\n    AEFE1309 85139270 B4130C93 BC437944 F4FD4452 E2D74DD3\n    64F2E21E\
    \ 71F54BFF 5CAE82AB 9C9DF69E E86D2BC5 22363A0D\n    ABC52197 9B0DEADA 1DBF9A42\
    \ D5C4484E 0ABCD06B FA53DDEF\n    3C1B20EE 3FD59D7C 25E41D2B 669E1EF1 6E6F52C3\
    \ 164DF4FB\n    7930E9E4 E58857B6 AC7D5F42 D69F6D18 7763CF1D 55034004\n    87F55BA5\
    \ 7E31CC7A 7135C886 EFB4318A ED6A1E01 2D9E6832\n    A907600A 918130C4 6DC778F9\
    \ 71AD0038 092999A3 33CB8B7A\n    1A1DB93D 7140003C 2A4ECEA9 F98D0ACC 0A8291CD\
    \ CEC97DCF\n    8EC9B55A 7F88A46B 4DB5A851 F44182E1 C68A007E 5E0DD902\n    0BFD64B6\
    \ 45036C7A 4E677D2C 38532A3A 23BA4442 CAF53EA6\n    3BB45432 9B7624C8 917BDD64\
    \ B1C0FD4C B38E8C33 4C701C3A\n    CDAD0657 FCCFEC71 9B1F5C3E 4E46041F 388147FB\
    \ 4CFDB477\n    A52471F7 A9A96910 B855322E DB6340D8 A00EF092 350511E3\n    0ABEC1FF\
    \ F9E3A26E 7FB29F8C 183023C3 587E38DA 0077D9B4\n    763E4E4B 94B2BBC1 94C6651E\
    \ 77CAF992 EEAAC023 2A281BF6\n    B3A739C1 22611682 0AE8DB58 47A67CBE F9C9091B\
    \ 462D538C\n    D72B0374 6AE77F5E 62292C31 1562A846 505DC82D B854338A\n    E49F5235\
    \ C95B9117 8CCF2DD5 CACEF403 EC9D1810 C6272B04\n    5B3B71F9 DC6B80D6 3FDD4A8E\
    \ 9ADB1E69 62A69526 D43161C1\n    A41D570D 7938DAD4 A40E329C CFF46AAA 36AD004C\
    \ F600C838\n    1E425A31 D951AE64 FDB23FCE C9509D43 687FEB69 EDD1CC5E\n    0B8CC3BD\
    \ F64B10EF 86B63142 A3AB8829 555B2F74 7C932665\n    CB2C0F1C C01BD702 29388839\
    \ D2AF05E4 54504AC7 8B758282\n    2846C0BA 35C35F5C 59160CC0 46FD8251 541FC68C\
    \ 9C86B022\n    BB709987 6A460E74 51A8A931 09703FEE 1C217E6C 3826E52C\n    51AA691E\
    \ 0E423CFC 99E9E316 50C1217B 624816CD AD9A95F9\n    D5B80194 88D9C0A0 A1FE3075\
    \ A577E231 83F81D4A 3F2FA457\n    1EFC8CE0 BA8A4FE8 B6855DFE 72B0A66E DED2FBAB\
    \ FBE58A30\n    FAFABE1C 5D71A87E 2F741EF8 C1FE86FE A6BBFDE5 30677F0D\n    97D11D49\
    \ F7A8443D 0822E506 A9F4614E 011E2A94 838FF88C\n    D68C8BB7 C5C6424C FFFFFFFF\
    \ FFFFFFFF\n   The generator is: g = 2\n   The group size is: q = (p-1)/2\n  \
    \ The hexadecimal representation of q is:\n    7FFFFFFF FFFFFFFF D6FC2A2C 515DA54D\
    \ 57EE2B10 139E9E78\n    EC5CE2C1 E7169B4A D4F09B20 8A3219FD E649CEE7 124D9F7C\n\
    \    BE97F1B1 B1863AEC 7B40D901 576230BD 69EF8F6A EAFEB2B0\n    9219FA8F AF833768\
    \ 42B1B2AA 9EF68D79 DAAB89AF 3FABE49A\n    CC278638 707345BB F15344ED 79F7F439\
    \ 0EF8AC50 9B56F39A\n    98566527 A41D3CBD 5E0558C1 59927DB0 E88454A5 D96471FD\n\
    \    DCB56D5B B06BFA34 0EA7A151 EF1CA6FA 572B76F3 B1B95D8C\n    8583D3E4 770536B8\
    \ 4F017E70 E6FBF176 601A0266 941A17B0\n    C8B97F4E 74C2C1FF C7278919 777940C1\
    \ E1FF1D8D A637D6B9\n    9DDAFE5E 17611002 E2C778C1 BE8B41D9 6379A513 60D977FD\n\
    \    4435A11C 308FE7EE 6F1AAD9D B28C81AD DE1A7A6F 7CCE011C\n    30DA37E4 EB736483\
    \ BD6C8E93 48FBFBF7 2CC6587D 60C36C8E\n    577F0984 C289C938 5A098649 DE21BCA2\
    \ 7A7EA229 716BA6E9\n    B279710F 38FAA5FF AE574155 CE4EFB4F 743695E2 911B1D06\n\
    \    D5E290CB CD86F56D 0EDFCD21 6AE22427 055E6835 FD29EEF7\n    9E0D9077 1FEACEBE\
    \ 12F20E95 B34F0F78 B737A961 8B26FA7D\n    BC9874F2 72C42BDB 563EAFA1 6B4FB68C\
    \ 3BB1E78E AA81A002\n    43FAADD2 BF18E63D 389AE443 77DA18C5 76B50F00 96CF3419\n\
    \    5483B005 48C09862 36E3BC7C B8D6801C 0494CCD1 99E5C5BD\n    0D0EDC9E B8A0001E\
    \ 15276754 FCC68566 054148E6 E764BEE7\n    C764DAAD 3FC45235 A6DAD428 FA20C170\
    \ E345003F 2F06EC81\n    05FEB25B 2281B63D 2733BE96 1C29951D 11DD2221 657A9F53\n\
    \    1DDA2A19 4DBB1264 48BDEEB2 58E07EA6 59C74619 A6380E1D\n    66D6832B FE67F638\
    \ CD8FAE1F 2723020F 9C40A3FD A67EDA3B\n    D29238FB D4D4B488 5C2A9917 6DB1A06C\
    \ 50077849 1A8288F1\n    855F60FF FCF1D137 3FD94FC6 0C1811E1 AC3F1C6D 003BECDA\n\
    \    3B1F2725 CA595DE0 CA63328F 3BE57CC9 77556011 95140DFB\n    59D39CE0 91308B41\
    \ 05746DAC 23D33E5F 7CE4848D A316A9C6\n    6B9581BA 3573BFAF 31149618 8AB15423\
    \ 282EE416 DC2A19C5\n    724FA91A E4ADC88B C66796EA E5677A01 F64E8C08 63139582\n\
    \    2D9DB8FC EE35C06B 1FEEA547 4D6D8F34 B1534A93 6A18B0E0\n    D20EAB86 BC9C6D6A\
    \ 5207194E 67FA3555 1B568026 7B00641C\n    0F212D18 ECA8D732 7ED91FE7 64A84EA1\
    \ B43FF5B4 F6E8E62F\n    05C661DE FB258877 C35B18A1 51D5C414 AAAD97BA 3E499332\n\
    \    E596078E 600DEB81 149C441C E95782F2 2A282563 C5BAC141\n    1423605D 1AE1AFAE\
    \ 2C8B0660 237EC128 AA0FE346 4E435811\n    5DB84CC3 B523073A 28D45498 84B81FF7\
    \ 0E10BF36 1C137296\n    28D5348F 07211E7E 4CF4F18B 286090BD B1240B66 D6CD4AFC\n\
    \    EADC00CA 446CE050 50FF183A D2BBF118 C1FC0EA5 1F97D22B\n    8F7E4670 5D4527F4\
    \ 5B42AEFF 39585337 6F697DD5 FDF2C518\n    7D7D5F0E 2EB8D43F 17BA0F7C 60FF437F\
    \ 535DFEF2 9833BF86\n    CBE88EA4 FBD4221E 84117283 54FA30A7 008F154A 41C7FC46\n\
    \    6B4645DB E2E32126 7FFFFFFF FFFFFFFF\n   The estimated symmetric-equivalent\
    \ strength of this group is 192\n   bits.\n   Peers using ffdhe8192 that want\
    \ to optimize their key exchange with a\n   short exponent (Section 5.2) should\
    \ choose a secret key of at least\n   400 bits.\n"
- title: Acknowledgements
  contents:
  - "Acknowledgements\n   Thanks to Fedor Brunner, Dave Fergemann, Niels Ferguson,\
    \ Sandy\n   Harris, Tero Kivinen, Watson Ladd, Nikos Mavrogiannopolous, Niels\n\
    \   Moeller, Bodo Moeller, Kenny Paterson, Eric Rescorla, Tom Ritter,\n   Rene\
    \ Struik, Martin Thomson, Sean Turner, and other members of the\n   TLS Working\
    \ Group for their comments and suggestions on this\n   document.  Any mistakes\
    \ here are not theirs.\n"
- title: Author's Address
  contents:
  - "Author's Address\n   Daniel Kahn Gillmor\n   ACLU\n   125 Broad Street, 18th\
    \ Floor\n   New York, NY  10004\n   United States of America\n   Email: dkg@fifthhorseman.net\n"
