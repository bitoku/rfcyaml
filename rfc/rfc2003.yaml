- contents:
  - '                       IP Encapsulation within IP

    '
  title: __initial_text__
- contents:
  - "Status of This Memo\n   This document specifies an Internet standards track protocol
    for the\n   Internet community, and requests discussion and suggestions for\n
    \  improvements.  Please refer to the current edition of the \"Internet\n   Official
    Protocol Standards\" (STD 1) for the standardization state\n   and status of this
    protocol.  Distribution of this memo is unlimited.\n"
  title: Status of This Memo
- contents:
  - "Abstract\n   This document specifies a method by which an IP datagram may be\n
    \  encapsulated (carried as payload) within an IP datagram.\n   Encapsulation
    is suggested as a means to alter the normal IP routing\n   for datagrams, by delivering
    them to an intermediate destination that\n   would otherwise not be selected by
    the (network part of the) IP\n   Destination Address field in the original IP
    header.  Encapsulation\n   may serve a variety of purposes, such as delivery of
    a datagram to a\n   mobile node using Mobile IP.\n"
  title: Abstract
- contents:
  - "1. Introduction\n   This document specifies a method by which an IP datagram
    may be\n   encapsulated (carried as payload) within an IP datagram.\n   Encapsulation
    is suggested as a means to alter the normal IP routing\n   for datagrams, by delivering
    them to an intermediate destination that\n   would otherwise not be selected based
    on the (network part of the) IP\n   Destination Address field in the original
    IP header.  Once the\n   encapsulated datagram arrives at this intermediate destination
    node,\n   it is decapsulated, yielding the original IP datagram, which is then\n
    \  delivered to the destination indicated by the original Destination\n   Address
    field.  This use of encapsulation and decapsulation of a\n   datagram is frequently
    referred to as \"tunneling\" the datagram, and\n   the encapsulator and decapsulator
    are then considered to be the\n   \"endpoints\" of the tunnel.\n   In the most
    general tunneling case we have\n      source ---> encapsulator --------> decapsulator
    ---> destination\n   with the source, encapsulator, decapsulator, and destination
    being\n   separate nodes.  The encapsulator node is considered the \"entry\n   point\"
    of the tunnel, and the decapsulator node is considered the\n   \"exit point\"
    of the tunnel.  There in general may be multiple\n   source-destination pairs
    using the same tunnel between the\n   encapsulator and decapsulator.\n"
  title: 1. Introduction
- contents:
  - "2. Motivation\n   The Mobile IP working group has specified the use of encapsulation
    as\n   a way to deliver datagrams from a mobile node's \"home network\" to an\n
    \  agent that can deliver datagrams locally by conventional means to the\n   mobile
    node at its current location away from home [8].  The use of\n   encapsulation
    may also be desirable whenever the source (or an\n   intermediate router) of an
    IP datagram must influence the route by\n   which a datagram is to be delivered
    to its ultimate destination.\n   Other possible applications of encapsulation
    include multicasting,\n   preferential billing, choice of routes with selected
    security\n   attributes, and general policy routing.\n   It is generally true
    that encapsulation and the IP loose source\n   routing option [10] can be used
    in similar ways to affect the routing\n   of a datagram, but there are several
    technical reasons to prefer\n   encapsulation:\n    -  There are unsolved security
    problems associated with the use of\n       the IP source routing options.\n    -
    \ Current Internet routers exhibit performance problems when\n       forwarding
    datagrams that contain IP options, including the IP\n       source routing options.\n
    \   -  Many current Internet nodes process IP source routing options\n       incorrectly.\n
    \   -  Firewalls may exclude IP source-routed datagrams.\n    -  Insertion of
    an IP source route option may complicate the\n       processing of authentication
    information by the source and/or\n       destination of a datagram, depending
    on how the authentication is\n       specified to be performed.\n    -  It is
    considered impolite for intermediate routers to make\n       modifications to
    datagrams which they did not originate.\n   These technical advantages must be
    weighed against the disadvantages\n   posed by the use of encapsulation:\n    -
    \ Encapsulated datagrams typically are larger than source routed\n       datagrams.\n
    \   -  Encapsulation cannot be used unless it is known in advance that\n       the
    node at the tunnel exit point can decapsulate the datagram.\n   Since the majority
    of Internet nodes today do not perform well when\n   IP loose source route options
    are used, the second technical\n   disadvantage of encapsulation is not as serious
    as it might seem at\n   first.\n"
  title: 2. Motivation
- contents:
  - "3. IP in IP Encapsulation\n   To encapsulate an IP datagram using IP in IP encapsulation,
    an outer\n   IP header [10] is inserted before the datagram's existing IP header,\n
    \  as follows:\n                                         +---------------------------+\n
    \                                        |                           |\n                                         |
    \     Outer IP Header      |\n                                         |                           |\n
    \    +---------------------------+       +---------------------------+\n     |
    \                          |       |                           |\n     |         IP
    Header         |       |         IP Header         |\n     |                           |
    \      |                           |\n     +---------------------------+ ====>
    +---------------------------+\n     |                           |       |                           |\n
    \    |                           |       |                           |\n     |
    \        IP Payload        |       |         IP Payload        |\n     |                           |
    \      |                           |\n     |                           |       |
    \                          |\n     +---------------------------+       +---------------------------+\n
    \  The outer IP header Source Address and Destination Address identify\n   the
    \"endpoints\" of the tunnel.  The inner IP header Source Address\n   and Destination
    Addresses identify the original sender and recipient\n   of the datagram, respectively.
    \ The inner IP header is not changed by\n   the encapsulator, except to decrement
    the TTL as noted below, and\n   remains unchanged during its delivery to the tunnel
    exit point.  No\n   change to IP options in the inner header occurs during delivery
    of\n   the encapsulated datagram through the tunnel.  If need be, other\n   protocol
    headers such as the IP Authentication header [1] may be\n   inserted between the
    outer IP header and the inner IP header.  Note\n   that the security options of
    the inner IP header MAY affect the\n   choice of security options for the encapsulating
    (outer) IP header.\n"
  - contents:
    - "3.1. IP Header Fields and Handling\n   The fields in the outer IP header are
      set by the encapsulator as\n   follows:\n      Version\n         4\n      IHL\n
      \        The Internet Header Length (IHL) is the length of the outer IP\n         header
      measured in 32-bit words [10].\n      TOS\n         The Type of Service (TOS)
      is copied from the inner IP header.\n      Total Length\n         The Total
      Length measures the length of the entire encapsulated\n         IP datagram,
      including the outer IP header, the inner IP\n         header, and its payload.\n
      \     Identification, Flags, Fragment Offset\n         These three fields are
      set as specified in [10].  However, if\n         the \"Don't Fragment\" bit
      is set in the inner IP header, it MUST\n         be set in the outer IP header;
      if the \"Don't Fragment\" bit is\n         not set in the inner IP header, it
      MAY be set in the outer IP\n         header, as described in Section 5.1.\n
      \     Time to Live\n         The Time To Live (TTL) field in the outer IP header
      is set to a\n         value appropriate for delivery of the encapsulated datagram
      to\n         the tunnel exit point.\n      Protocol\n         4\n      Header
      Checksum\n         The Internet Header checksum [10] of the outer IP header.\n
      \     Source Address\n         The IP address of the encapsulator, that is,
      the tunnel entry\n         point.\n      Destination Address\n         The IP
      address of the decapsulator, that is, the tunnel exit\n         point.\n      Options\n
      \        Any options present in the inner IP header are in general NOT\n         copied
      to the outer IP header.  However, new options specific\n         to the tunnel
      path MAY be added.  In particular, any supported\n         types of security
      options of the inner IP header MAY affect the\n         choice of security options
      for the outer header.  It is not\n         expected that there be a one-to-one
      mapping of such options to\n         the options or security headers selected
      for the tunnel.\n   When encapsulating a datagram, the TTL in the inner IP header
      is\n   decremented by one if the tunneling is being done as part of\n   forwarding
      the datagram; otherwise, the inner header TTL is not\n   changed during encapsulation.
      \ If the resulting TTL in the inner IP\n   header is 0, the datagram is discarded
      and an ICMP Time Exceeded\n   message SHOULD be returned to the sender.  An
      encapsulator MUST NOT\n   encapsulate a datagram with TTL = 0.\n   The TTL in
      the inner IP header is not changed when decapsulating.\n   If, after decapsulation,
      the inner datagram has TTL = 0, the\n   decapsulator MUST discard the datagram.
      \ If, after decapsulation, the\n   decapsulator forwards the datagram to one
      of its network interfaces,\n   it will decrement the TTL as a result of doing
      normal IP forwarding.\n   See also Section 4.4.\n   The encapsulator may use
      any existing IP mechanisms appropriate for\n   delivery of the encapsulated
      payload to the tunnel exit point.  In\n   particular, use of IP options is allowed,
      and use of fragmentation is\n   allowed unless the \"Don't Fragment\" bit is
      set in the inner IP\n   header.  This restriction on fragmentation is required
      so that nodes\n   employing Path MTU Discovery [7] can obtain the information
      they\n   seek.\n"
    title: 3.1. IP Header Fields and Handling
  - contents:
    - "3.2. Routing Failures\n   Routing loops within a tunnel are particularly dangerous
      when they\n   cause datagrams to arrive again at the encapsulator.  Suppose
      a\n   datagram arrives at a router for forwarding, and the router\n   determines
      that the datagram has to be encapsulated before further\n   delivery.  Then:\n
      \   -  If the IP Source Address of the datagram matches the router's own\n       IP
      address on any of its network interfaces, the router MUST NOT\n       tunnel
      the datagram; instead, the datagram SHOULD be discarded.\n    -  If the IP Source
      Address of the datagram matches the IP address\n       of the tunnel destination
      (the tunnel exit point is typically\n       chosen by the router based on the
      Destination Address in the\n       datagram's IP header), the router MUST NOT
      tunnel the datagram;\n       instead, the datagram SHOULD be discarded.\n   See
      also Section 4.4.\n"
    title: 3.2. Routing Failures
  title: 3. IP in IP Encapsulation
- contents:
  - "4. ICMP Messages from within the Tunnel\n   After an encapsulated datagram has
    been sent, the encapsulator may\n   receive an ICMP [9] message from any intermediate
    router within the\n   tunnel other than the tunnel exit point.  The action taken
    by the\n   encapsulator depends on the type of ICMP message received.  When the\n
    \  received message contains enough information, the encapsulator MAY\n   use
    the incoming message to create a similar ICMP message, to be sent\n   to the originator
    of the original unencapsulated IP datagram (the\n   original sender).  This process
    will be referred to as \"relaying\" the\n   ICMP message from the tunnel.\n   ICMP
    messages indicating an error in processing a datagram include a\n   copy of (a
    portion of) the datagram causing the error.  Relaying an\n   ICMP message requires
    that the encapsulator strip off the outer IP\n   header from this returned copy
    of the original datagram.  For cases\n   in which the received ICMP message does
    not contain enough data to\n   relay the message, see Section 5.\n"
  - contents:
    - "4.1. Destination Unreachable (Type 3)\n   ICMP Destination Unreachable messages
      are handled by the encapsulator\n   depending upon their Code field.  The model
      suggested here allows the\n   tunnel to \"extend\" a network to include non-local
      (e.g., mobile)\n   nodes.  Thus, if the original destination in the unencapsulated\n
      \  datagram is on the same network as the encapsulator, certain\n   Destination
      Unreachable Code values may be modified to conform to the\n   suggested model.\n
      \     Network Unreachable (Code 0)\n         An ICMP Destination Unreachable
      message SHOULD be returned\n         to the original sender.  If the original
      destination in\n         the unencapsulated datagram is on the same network
      as the\n         encapsulator, the newly generated Destination Unreachable\n
      \        message sent by the encapsulator MAY have Code 1 (Host\n         Unreachable),
      since presumably the datagram arrived at the\n         correct network and the
      encapsulator is trying to create the\n         appearance that the original
      destination is local to that\n         network even if it is not.  Otherwise,
      if the encapsulator\n         returns a Destination Unreachable message, the
      Code field MUST\n         be set to 0 (Network Unreachable).\n      Host Unreachable
      (Code 1)\n         The encapsulator SHOULD relay Host Unreachable messages to
      the\n         sender of the original unencapsulated datagram, if possible.\n
      \     Protocol Unreachable (Code 2)\n         When the encapsulator receives
      an ICMP Protocol Unreachable\n         message, it SHOULD send a Destination
      Unreachable message with\n         Code 0 or 1 (see the discussion for Code
      0) to the sender of\n         the original unencapsulated datagram.  Since the
      original\n         sender did not use protocol 4 in sending the datagram, it
      would\n         be meaningless to return Code 2 to that sender.\n      Port
      Unreachable (Code 3)\n         This Code should never be received by the encapsulator,
      since\n         the outer IP header does not refer to any port number.  It MUST\n
      \        NOT be relayed to the sender of the original unencapsulated\n         datagram.\n
      \     Datagram Too Big (Code 4)\n         The encapsulator MUST relay ICMP Datagram
      Too Big messages to\n         the sender of the original unencapsulated datagram.\n
      \     Source Route Failed (Code 5)\n         This Code SHOULD be handled by
      the encapsulator itself.\n         It MUST NOT be relayed to the sender of the
      original\n         unencapsulated datagram.\n"
    title: 4.1. Destination Unreachable (Type 3)
  - contents:
    - "4.2. Source Quench (Type 4)\n   The encapsulator SHOULD NOT relay ICMP Source
      Quench messages to the\n   sender of the original unencapsulated datagram, but
      instead SHOULD\n   activate whatever congestion control mechanisms it implements
      to help\n   alleviate the congestion detected within the tunnel.\n"
    title: 4.2. Source Quench (Type 4)
  - contents:
    - "4.3. Redirect (Type 5)\n   The encapsulator MAY handle the ICMP Redirect messages
      itself.  It\n   MUST NOT not relay the Redirect to the sender of the original\n
      \  unencapsulated datagram.\n"
    title: 4.3. Redirect (Type 5)
  - contents:
    - "4.4. Time Exceeded (Type 11)\n   ICMP Time Exceeded messages report (presumed)
      routing loops within\n   the tunnel itself.  Reception of Time Exceeded messages
      by the\n   encapsulator MUST be reported to the sender of the original\n   unencapsulated
      datagram as Host Unreachable (Type 3, Code 1).  Host\n   Unreachable is preferable
      to Network Unreachable; since the datagram\n   was handled by the encapsulator,
      and the encapsulator is often\n   considered to be on the same network as the
      destination address in\n   the original unencapsulated datagram, then the datagram
      is considered\n   to have reached the correct network, but not the correct destination\n
      \  node within that network.\n"
    title: 4.4. Time Exceeded (Type 11)
  - contents:
    - "4.5. Parameter Problem (Type 12)\n   If the Parameter Problem message points
      to a field copied from the\n   original unencapsulated datagram, the encapsulator
      MAY relay the ICMP\n   message to the sender of the original unencapsulated
      datagram;\n   otherwise, if the problem occurs with an IP option inserted by
      the\n   encapsulator, then the encapsulator MUST NOT relay the ICMP message\n
      \  to the original sender.  Note that an encapsulator following\n   prevalent
      current practice will never insert any IP options into the\n   encapsulated
      datagram, except possibly for security reasons.\n"
    title: 4.5. Parameter Problem (Type 12)
  - contents:
    - "4.6. Other ICMP Messages\n   Other ICMP messages are not related to the encapsulation
      operations\n   described within this protocol specification, and should be acted
      on\n   by the encapsulator as specified in [9].\n"
    title: 4.6. Other ICMP Messages
  title: 4. ICMP Messages from within the Tunnel
- contents:
  - "5. Tunnel Management\n   Unfortunately, ICMP only requires IP routers to return
    8 octets (64\n   bits) of the datagram beyond the IP header.  This is not enough
    to\n   include a copy of the encapsulated (inner) IP header, so it is not\n   always
    possible for the encapsulator to relay the ICMP message from\n   the interior
    of a tunnel back to the original sender.  However, by\n   carefully maintaining
    \"soft state\" about tunnels into which it sends,\n   the encapsulator can return
    accurate ICMP messages to the original\n   sender in most cases.  The encapsulator
    SHOULD maintain at least the\n   following soft state information about each tunnel:\n
    \   - MTU of the tunnel (Section 5.1)\n    - TTL (path length) of the tunnel\n
    \   - Reachability of the end of the tunnel\n   The encapsulator uses the ICMP
    messages it receives from the interior\n   of a tunnel to update the soft state
    information for that tunnel.\n   ICMP errors that could be received from one of
    the routers along the\n   tunnel interior include:\n    - Datagram Too Big\n    -
    Time Exceeded\n    - Destination Unreachable\n    - Source Quench\n   When subsequent
    datagrams arrive that would transit the tunnel, the\n   encapsulator checks the
    soft state for the tunnel.  If the datagram\n   would violate the state of the
    tunnel (for example, the TTL of the\n   new datagram is less than the tunnel \"soft
    state\" TTL) the\n   encapsulator sends an ICMP error message back to the sender
    of the\n   original datagram, but also encapsulates the datagram and forwards
    it\n   into the tunnel.\n   Using this technique, the ICMP error messages sent
    by the\n   encapsulator will not always match up one-to-one with errors\n   encountered
    within the tunnel, but they will accurately reflect the\n   state of the network.\n
    \  Tunnel soft state was originally developed for the IP Address\n   Encapsulation
    (IPAE) specification [4].\n"
  - contents:
    - "5.1. Tunnel MTU Discovery\n   When the Don't Fragment bit is set by the originator
      and copied into\n   the outer IP header, the proper MTU of the tunnel will be
      learned\n   from ICMP Datagram Too Big (Type 3, Code 4) messages reported to
      the\n   encapsulator.  To support sending nodes which use Path MTU Discovery,\n
      \  all encapsulator implementations MUST support Path MTU Discovery [5,\n   7]
      soft state within their tunnels.  In this particular application,\n   there
      are several advantages:\n    -  As a benefit of Path MTU Discovery within the
      tunnel, any\n       fragmentation which occurs because of the size of the\n
      \      encapsulation header is performed only once after encapsulation.\n       This
      prevents multiple fragmentation of a single datagram, which\n       improves
      processing efficiency of the decapsulator and the\n       routers within the
      tunnel.\n    -  If the source of the unencapsulated datagram is doing Path MTU\n
      \      Discovery, then it is desirable for the encapsulator to know\n       the
      MTU of the tunnel.  Any ICMP Datagram Too Big messages from\n       within the
      tunnel are returned to the encapsulator, and as noted\n       in Section 5,
      it is not always possible for the encapsulator to\n       relay ICMP messages
      to the source of the original unencapsulated\n       datagram.  By maintaining
      \"soft state\" about the MTU of the\n       tunnel, the encapsulator can return
      correct ICMP Datagram Too Big\n       messages to the original sender of the
      unencapsulated datagram to\n       support its own Path MTU Discovery.  In this
      case, the MTU that\n       is conveyed to the original sender by the encapsulator
      SHOULD\n       be the MTU of the tunnel minus the size of the encapsulating\n
      \      IP header.  This will avoid fragmentation of the original IP\n       datagram
      by the encapsulator.\n    -  If the source of the original unencapsulated datagram
      is\n       not doing Path MTU Discovery, it is still desirable for the\n       encapsulator
      to know the MTU of the tunnel.  In particular, it is\n       much better to
      fragment the original datagram when encapsulating,\n       than to allow the
      encapsulated datagram to be fragmented.\n       Fragmenting the original datagram
      can be done by the encapsulator\n       without special buffer requirements
      and without the need to\n       keep reassembly state in the decapsulator.  By
      contrast, if\n       the encapsulated datagram is fragmented, then the decapsulator\n
      \      must reassemble the fragmented (encapsulated) datagram before\n       decapsulating
      it, requiring reassembly state and buffer space\n       within the decapsulator.\n
      \  Thus, the encapsulator SHOULD normally do Path MTU Discovery,\n   requiring
      it to send all datagrams into the tunnel with the \"Don't\n   Fragment\" bit
      set in the outer IP header.  However there are problems\n   with this approach.
      \ When the original sender sets the \"Don't\n   Fragment\" bit, the sender can
      react quickly to any returned ICMP\n   Datagram Too Big error message by retransmitting
      the original\n   datagram.  On the other hand, suppose that the encapsulator
      receives\n   an ICMP Datagram Too Big message from within the tunnel.  In that\n
      \  case, if the original sender of the unencapsulated datagram had not\n   set
      the \"Don't Fragment\" bit, there is nothing sensible that the\n   encapsulator
      can do to let the original sender know of the error.\n   The encapsulator MAY
      keep a copy of the sent datagram whenever it\n   tries increasing the tunnel
      MTU, in order to allow it to fragment and\n   resend the datagram if it gets
      a Datagram Too Big response.\n   Alternatively the encapsulator MAY be configured
      for certain types of\n   datagrams not to set the \"Don't Fragment\" bit when
      the original\n   sender of the unencapsulated datagram has not set the \"Don't\n
      \  Fragment\" bit.\n"
    title: 5.1. Tunnel MTU Discovery
  - contents:
    - "5.2. Congestion\n   An encapsulator might receive indications of congestion
      from the\n   tunnel, for example, by receiving ICMP Source Quench messages from\n
      \  nodes within the tunnel.  In addition, certain link layers and\n   various
      protocols not related to the Internet suite of protocols\n   might provide such
      indications in the form of a Congestion\n   Experienced [6] flag.  The encapsulator
      SHOULD reflect conditions of\n   congestion in its \"soft state\" for the tunnel,
      and when subsequently\n   forwarding datagrams into the tunnel, the encapsulator
      SHOULD use\n   appropriate means for controlling congestion [3]; However, the\n
      \  encapsulator SHOULD NOT send ICMP Source Quench messages to the\n   original
      sender of the unencapsulated datagram.\n"
    title: 5.2. Congestion
  title: 5. Tunnel Management
- contents:
  - "6. Security Considerations\n   IP encapsulation potentially reduces the security
    of the Internet,\n   and care needs to be taken in the implementation and deployment
    of IP\n   encapsulation.  For example, IP encapsulation makes it difficult for\n
    \  border routers to filter datagrams based on header fields.  In\n   particular,
    the original values of the Source Address, Destination\n   Address, and Protocol
    fields in the IP header, and the port numbers\n   used in any transport header
    within the datagram, are not located in\n   their normal positions within the
    datagram after encapsulation.\n   Since any IP datagram can be encapsulated and
    passed through a\n   tunnel, such filtering border routers need to carefully examine
    all\n   datagrams.\n"
  - contents:
    - "6.1. Router Considerations\n   Routers need to be aware of IP encapsulation
      protocols in order to\n   correctly filter incoming datagrams.  It is desirable
      that such\n   filtering be integrated with IP authentication [1].  Where IP\n
      \  authentication is used, encapsulated packets might be allowed to\n   enter
      an organization when the encapsulating (outer) packet or the\n   encapsulated
      (inner) packet is sent by an authenticated, trusted\n   source.  Encapuslated
      packets containing no such authentication\n   represent a potentially large
      security risk.\n   IP datagrams which are encapsulated and encrypted [2] might
      also pose\n   a problem for filtering routers.  In this case, the router can
      filter\n   the datagram only if it shares the security association used for
      the\n   encryption.  To allow this sort of encryption in environments in\n   which
      all packets need to be filtered (or at least accounted for), a\n   mechanism
      must be in place for the receiving node to securely\n   communicate the security
      association to the border router.  This\n   might, more rarely, also apply to
      the security association used for\n   outgoing datagrams.\n"
    title: 6.1. Router Considerations
  - contents:
    - "6.2. Host Considerations\n   Host implementations that are capable of receiving
      encapsulated IP\n   datagrams SHOULD admit only those datagrams fitting into
      one or more\n   of the following categories:\n    -  The protocol is harmless:
      \ source address-based authentication is\n       not needed.\n    -  The encapsulating
      (outer) datagram comes from an authentically\n       identified, trusted source.
      \ The authenticity of the source could\n       be established by relying on
      physical security in addition to\n       border router configuration, but is
      more likely to come from use\n       of the IP Authentication header [1].\n
      \   -  The encapuslated (inner) datagram includes an IP Authentication\n       header.\n
      \   -  The encapsulated (inner) datagram is addressed to a network\n       interface
      belonging to the decapsulator, or to a node with which\n       the decapsulator
      has entered into a special relationship for\n       delivering such encapsulated
      datagrams.\n   Some or all of this checking could be done in border routers
      rather\n   than the receiving node, but it is better if border router checks
      are\n   used as backup, rather than being the only check.\n"
    title: 6.2. Host Considerations
  title: 6. Security Considerations
- contents:
  - "7. Acknowledgements\n   Parts of Sections 3 and 5 of this document were taken
    from portions\n   (authored by Bill Simpson) of earlier versions of the Mobile
    IP\n   Internet Draft [8].  The original text for section 6 (Security\n   Considerations)
    was contributed by Bob Smart.  Good ideas have also\n   been included from RFC
    1853 [11], also authored by Bill Simpson.\n   Thanks also to Anders Klemets for
    finding mistakes and suggesting\n   improvements to the draft.  Finally, thanks
    to David Johnson for\n   going over the draft with a fine-toothed comb, finding
    mistakes,\n   improving consistency, and making many other improvements to the\n
    \  draft.\n"
  title: 7. Acknowledgements
- contents:
  - "References\n   [1] Atkinson, R., \"IP Authentication Header\", RFC 1826, August
    1995.\n   [2] Atkinson, R., \"IP Encapsulating Security Payload\", RFC 1827,\n
    \      August 1995.\n   [3] Baker, F., Editor, \"Requirements for IP Version 4
    Routers\", RFC\n       1812, June 1995.\n   [4] Gilligan, R., Nordmark, E., and
    B. Hinden, \"IPAE: The SIPP\n       Interoperability and Transition Mechanism\",
    Work in Progress.\n   [5] Knowles, S., \"IESG Advice from Experience with Path
    MTU\n       Discovery\", RFC 1435, March 1993.\n   [6] Mankin, A., and K. Ramakrishnan,
    \"Gateway Congestion Control\n       Survey\", RFC 1254, August 1991.\n   [7]
    Mogul, J., and S. Deering, \"Path MTU Discovery\", RFC 1191,\n       November
    1990.\n   [8] Perkins, C., Editor, \"IP Mobility Support\", RFC 2002,\n       October
    1996.\n   [9] Postel, J., Editor, \"Internet Control Message Protocol\", STD 5,\n
    \      RFC 792, September 1981.\n   [10] Postel, J., Editor, \"Internet Protocol\",
    STD 5, RFC 791,\n        September 1981.\n   [11] Simpson, W., \"IP in IP Tunneling\",
    RFC 1853, October 1995.\n"
  title: References
- contents:
  - "Author's Address\n   Questions about this memo can be directed to:\n   Charles
    Perkins\n   Room H3-D34\n   T. J. Watson Research Center\n   IBM Corporation\n
    \  30 Saw Mill River Rd.\n   Hawthorne, NY  10532\n   Work:   +1-914-784-7350\n
    \  Fax:    +1-914-784-6205\n   EMail: perk@watson.ibm.com\n   The working group
    can be contacted via the current chair:\n   Jim Solomon\n   Motorola, Inc.\n   1301
    E. Algonquin Rd.\n   Schaumburg, IL  60196\n   Work:   +1-847-576-2753\n   EMail:
    solomon@comm.mot.com\n"
  title: Author's Address
