- title: __initial_text__
  contents:
  - "                    Teredo: Tunneling IPv6 over UDP\n              through Network\
    \ Address Translations (NATs)\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2006).\n"
- title: Abstract
  contents:
  - "Abstract\n   We propose here a service that enables nodes located behind one\
    \ or\n   more IPv4 Network Address Translations (NATs) to obtain IPv6\n   connectivity\
    \ by tunneling packets over UDP; we call this the Teredo\n   service.  Running\
    \ the service requires the help of \"Teredo servers\"\n   and \"Teredo relays\"\
    .  The Teredo servers are stateless, and only have\n   to manage a small fraction\
    \ of the traffic between Teredo clients; the\n   Teredo relays act as IPv6 routers\
    \ between the Teredo service and the\n   \"native\" IPv6 Internet.  The relays\
    \ can also provide interoperability\n   with hosts using other transition mechanisms\
    \ such as \"6to4\".\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n      2.13. Teredo Node Identifier ....................................5\n\
    \      2.14. Teredo IPv6 Address .......................................5\n  \
    \    2.15. Teredo Refresh Interval ...................................5\n    \
    \  2.16. Teredo Secondary Port .....................................6\n      2.17.\
    \ Teredo IPv4 Discovery Address .............................6\n   3. Design Goals,\
    \ Requirements, and Model of Operation ..............6\n      3.1. Hypotheses\
    \ about NAT Behavior ..............................6\n      3.2. IPv6 Provider\
    \ of Last Resort ...............................8\n      3.3. Operational Requirements\
    \ ...................................9\n      3.4. Model of Operation ........................................10\n\
    \   4. Teredo Addresses ...............................................11\n  \
    \ 5. Specification of Clients, Servers, and Relays ..................13\n    \
    \  5.1. Message Formats ...........................................13\n      5.2.\
    \ Teredo Client Specification ...............................16\n      5.3. Teredo\
    \ Server Specification ...............................31\n      5.4. Teredo Relay\
    \ Specification ................................33\n      5.5. Implementation\
    \ of Automatic Sunset ........................36\n   6. Further Study, Use of\
    \ Teredo to Implement a Tunnel Service .....37\n   7. Security Considerations\
    \ ........................................38\n      7.1. Opening a Hole in the\
    \ NAT .................................38\n      7.2. Using the Teredo Service\
    \ for a Man-in-the-Middle Attack ...39\n      7.3. Denial of the Teredo service\
    \ ..............................42\n      7.4. Denial of Service against Non-Teredo\
    \ Nodes ................43\n   8. IAB Considerations .............................................46\n\
    \      8.1. Problem Definition ........................................46\n  \
    \    8.2. Exit Strategy .............................................47\n    \
    \  8.3. Brittleness Introduced by Teredo ..........................48\n      8.4.\
    \ Requirements for a Long-Term Solution .....................50\n   9. IANA Considerations\
    \ ............................................50\n   10. Acknowledgements ..............................................50\n\
    \   11. References ....................................................51\n  \
    \    11.1. Normative References .....................................51\n    \
    \  11.2. Informative References ...................................52\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   Classic tunneling methods envisaged for IPv6 transition\
    \ operate by\n   sending IPv6 packets as payload of IPv4 packets; the 6to4 proposal\n\
    \   [RFC3056] proposes automatic discovery in this context.  A problem\n   with\
    \ these methods is that they don't work when the IPv6 candidate\n   node is isolated\
    \ behind a Network Address Translator (NAT) device:\n   NATs are typically not\
    \ programmed to allow the transmission of\n   arbitrary payload types; even when\
    \ they are, the local address cannot\n   be used in a 6to4 scheme. 6to4 will work\
    \ with a NAT if the NAT and\n   6to4 router functions are in the same box; we\
    \ want to cover the\n   relatively frequent case when the NAT cannot be readily\
    \ upgraded to\n   provide a 6to4 router function.\n   A possible way to solve\
    \ the problem is to rely on a set of \"tunnel\n   brokers\".  However, there are\
    \ limits to any solution that is based on\n   such brokers: the quality of service\
    \ may be limited, since the\n   traffic follows a dogleg route from the source\
    \ to the broker and then\n   the destination; the broker has to provide sufficient\
    \ transmission\n   capacity to relay all packets and thus suffers a high cost.\
    \  For\n   these two reasons, it may be desirable to have solutions that allow\n\
    \   for \"automatic tunneling\", i.e., let the packets follow a direct path\n\
    \   to the destination.\n   The automatic tunneling requirement is indeed at odds\
    \ with some of\n   the specificities of NATs.  Establishing a direct path supposes\
    \ that\n   the IPv6 candidate node can retrieve a \"globally routable\" address\n\
    \   that results from the translation of its local address by one or more\n  \
    \ NATs; it also supposes that we can find a way to bypass the various\n   \"per\
    \ destination protections\" that many NATs implement.  In this\n   memo, we will\
    \ explain how IPv6 candidates located behind NATs use\n   \"Teredo servers\" to\
    \ learn their \"global address\" and to obtain\n   connectivity, how they exchange\
    \ packets with native IPv6 hosts\n   through \"Teredo relays\", and how clients,\
    \ servers, and relays can be\n   organized in Teredo networks.\n   The specification\
    \ is organized as follows.  Section 2 contains the\n   definition of the terms\
    \ used in the memo.  Section 3 presents the\n   hypotheses on NAT behavior used\
    \ in the design, as well as the\n   operational requirements that the design should\
    \ meet.  Section 4\n   presents the IPv6 address format used by Teredo.  Section\
    \ 5 contains\n   the format of the messages and the specification of the protocol.\n\
    \   Section 6 presents guidelines for further work on configured tunnels\n   that\
    \ would be complementary to the current approach.  Section 7\n   contains a security\
    \ discussion, section 8 contains a discussion of\n   the Unilateral Self Address\
    \ Fixing (UNSAF) issues, and section 9\n   contains IANA considerations.\n"
- title: 2.  Definitions
  contents:
  - "2.  Definitions\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\"\
    , \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and\
    \ \"OPTIONAL\" in this\n   document are to be interpreted as described in [RFC2119].\n\
    \   This specification uses the following definitions:\n"
- title: 2.1.  Teredo Service
  contents:
  - "2.1.  Teredo Service\n   The transmission of IPv6 packets over UDP, as defined\
    \ in this memo.\n"
- title: 2.2.  Teredo Client
  contents:
  - "2.2.  Teredo Client\n   A node that has some access to the IPv4 Internet and\
    \ wants to gain\n   access to the IPv6 Internet.\n"
- title: 2.3.  Teredo Server
  contents:
  - "2.3.  Teredo Server\n   A node that has access to the IPv4 Internet through a\
    \ globally\n   routable address, and is used as a helper to provide IPv6\n   connectivity\
    \ to Teredo clients.\n"
- title: 2.4.  Teredo Relay
  contents:
  - "2.4.  Teredo Relay\n   An IPv6 router that can receive traffic destined to Teredo\
    \ clients\n   and forward it using the Teredo service.\n"
- title: 2.5.  Teredo IPv6 Service Prefix
  contents:
  - "2.5.  Teredo IPv6 Service Prefix\n   An IPv6 addressing prefix that is used to\
    \ construct the IPv6 address\n   of Teredo clients.\n"
- title: 2.6.  Global Teredo IPv6 Service Prefix
  contents:
  - "2.6.  Global Teredo IPv6 Service Prefix\n   An IPv6 addressing prefix whose value\
    \ is 2001:0000:/32.\n"
- title: 2.7.  Teredo UDP Port
  contents:
  - "2.7.  Teredo UDP Port\n   The UDP port number at which Teredo servers are waiting\
    \ for packets.\n   The value of this port is 3544.\n"
- title: 2.8.  Teredo Bubble
  contents:
  - "2.8.  Teredo Bubble\n   A Teredo bubble is a minimal IPv6 packet, made of an\
    \ IPv6 header and\n   a null payload.  The payload type is set to 59, No Next\
    \ Header, as\n   per [RFC2460].  The Teredo clients and relays may send bubbles\
    \ in\n   order to create a mapping in a NAT.\n"
- title: 2.9.  Teredo Service Port
  contents:
  - "2.9.  Teredo Service Port\n   The port from which the Teredo client sends Teredo\
    \ packets.  This\n   port is attached to one of the client's IPv4 addresses. \
    \ The IPv4\n   address may or may not be globally routable, as the client may\
    \ be\n   located behind one or more NAT.\n"
- title: 2.10.  Teredo Server Address
  contents:
  - "2.10.  Teredo Server Address\n   The IPv4 address of the Teredo server selected\
    \ by a particular\n   client.\n"
- title: 2.11.  Teredo Mapped Address and Teredo Mapped Port
  contents:
  - "2.11.  Teredo Mapped Address and Teredo Mapped Port\n   A global IPv4 address\
    \ and a UDP port that results from the\n   translation of the IPv4 address and\
    \ UDP port of a client's Teredo\n   service port by one or more NATs.  The client\
    \ learns these values\n   through the Teredo protocol described in this memo.\n"
- title: 2.12.  Teredo IPv6 Client Prefix
  contents:
  - "2.12.  Teredo IPv6 Client Prefix\n   A global scope IPv6 prefix composed of the\
    \ Teredo IPv6 service prefix\n   and the Teredo server address.\n"
- title: 2.13.  Teredo Node Identifier
  contents:
  - "2.13.  Teredo Node Identifier\n   A 64-bit identifier that contains the UDP port\
    \ and IPv4 address at\n   which a client can be reached through the Teredo service,\
    \ as well as\n   a flag indicating the type of NAT through which the client accesses\n\
    \   the IPv4 Internet.\n"
- title: 2.14.  Teredo IPv6 Address
  contents:
  - "2.14.  Teredo IPv6 Address\n   A Teredo IPv6 address obtained by combining a\
    \ Teredo IPv6 client\n   prefix and a Teredo node identifier.\n"
- title: 2.15.  Teredo Refresh Interval
  contents:
  - "2.15.  Teredo Refresh Interval\n   The interval during which a Teredo IPv6 address\
    \ is expected to remain\n   valid in the absence of \"refresh\" traffic.  For\
    \ a client located\n   behind a NAT, the interval depends on configuration parameters\
    \ of the\n   local NAT, or the combination of NATs in the path to the Teredo\n\
    \   server.  By default, clients assume an interval value of 30 seconds;\n   a\
    \ longer value may be determined by local tests, as described in\n   section 5.\n"
- title: 2.16.  Teredo Secondary Port
  contents:
  - "2.16.  Teredo Secondary Port\n   A UDP port used to send or receive packets in\
    \ order to determine the\n   appropriate value of the refresh interval, but not\
    \ used to carry any\n   Teredo traffic.\n"
- title: 2.17.  Teredo IPv4 Discovery Address
  contents:
  - "2.17.  Teredo IPv4 Discovery Address\n   An IPv4 multicast address used to discover\
    \ other Teredo clients on\n   the same IPv4 subnet.  The value of this address\
    \ is 224.0.0.253.\n"
- title: 3.  Design Goals, Requirements, and Model of Operation
  contents:
  - "3.  Design Goals, Requirements, and Model of Operation\n   The proposed solution\
    \ transports IPv6 packets as the payload of UDP\n   packets.  This is based on\
    \ the observation that TCP and UDP are the\n   only protocols guaranteed to cross\
    \ the majority of NAT devices.\n   Tunneling packets over TCP would be possible,\
    \ but would result in a\n   poor quality of service; encapsulation over UDP is\
    \ a better choice.\n   The design of our solution is based on a set of hypotheses\
    \ and\n   observations on the behavior of NATs, our desire to provide an \"IPv6\n\
    \   provider of last resort\", and a list of operational requirements.  It\n \
    \  results in a model of operation in which the Teredo service is\n   enabled\
    \ by a set of servers and relays.\n"
- title: 3.1.  Hypotheses about NAT Behavior
  contents:
  - "3.1.  Hypotheses about NAT Behavior\n   NAT devices typically incorporate some\
    \ support for UDP, in order to\n   enable users in the natted domain to use UDP-based\
    \ applications.  The\n   NAT will typically allocate a \"mapping\" when it sees\
    \ a UDP packet\n   coming through for which there is not yet an existing mapping.\
    \  The\n   handling of UDP \"sessions\" by NAT devices differs by two important\n\
    \   parameters, the type and the duration of the mappings.\n   The type of mappings\
    \ is analyzed in [RFC3489], which distinguishes\n   between \"cone NAT\", \"restricted\
    \ cone NAT\", \"port restricted cone NAT\"\n   and \"symmetric NAT\".  The Teredo\
    \ solution ensures connectivity for\n   clients located behind cone NATs, restricted\
    \ cone NATs, or port-\n   restricted cone NATs.\n   Transmission of regular IPv6\
    \ packets only takes place after an\n   exchange of \"bubbles\" between the parties.\
    \  This exchange would often\n   fail for clients behind symmetric NAT, because\
    \ their peer cannot\n   predict the UDP port number that the NAT expects.\n  \
    \ Clients located behind a symmetric NAT will only be able to use\n   Teredo if\
    \ they can somehow program the NAT and reserve a Teredo\n   service port for each\
    \ client, for example, using the DMZ functions of\n   the NAT.  This is obviously\
    \ an onerous requirement, at odds with the\n   design goal of an automatic solution.\
    \  However, measurement campaigns\n   and studies of documentations have shown\
    \ that, at least in simple\n   \"unmanaged\" networks, symmetric NATs are a small\
    \ minority; moreover,\n   it seems that new NAT models or firmware upgrades avoid\
    \ the\n   \"symmetric\" design.\n   Investigations on the performance of [RFC3489]\
    \ have shown the\n   relative frequency of a particular NAT design, which we might\
    \ call\n   \"port conserving\".  In this design, the NAT tries to keep the same\n\
    \   port number inside and outside, unless the \"outside\" port number is\n  \
    \ already in use for another mapping with the same host.  Port\n   conserving\
    \ NAT appear as \"cone\" or \"restricted cone NAT\" most of the\n   time, but\
    \ they will behave as \"symmetric NAT\" when multiple internal\n   hosts use the\
    \ same port number to communicate to the same server.\n   The Teredo design minimizes\
    \ the risk of encountering the \"symmetric\"\n   behavior by asking multiple hosts\
    \ located behind the same NAT to use\n   different Teredo service ports.\n   Other\
    \ investigation in the behavior of NAT also outlined the\n   \"probabilistic rewrite\"\
    \ behavior.  Some brands of NAT will examine\n   all packets for \"embedded addresses\"\
    , IP addresses, and port numbers\n   present in application payloads.  They will\
    \ systematically replace\n   32-bit values that match a local address by the corresponding\
    \ mapped\n   address.  The Teredo specification includes an \"obfuscation\"\n\
    \   procedure in order to avoid this behavior.\n   Regardless of their types,\
    \ UDP mappings are not kept forever.  The\n   typical algorithm is to remove the\
    \ mapping if no traffic is observed\n   on the specified port for a \"lifetime\"\
    \ period.  The Teredo client\n   that wants to maintain a mapping open in the\
    \ NAT will have to send\n   some \"keep alive\" traffic before the lifetime expires.\
    \  For that, it\n   needs an estimate of the \"lifetime\" parameter used in the\
    \ NAT.  We\n   observed that the implementation of lifetime control can vary in\n\
    \   several ways.\n   Most NATs implement a \"minimum lifetime\", which is set\
    \ as a parameter\n   of the implementation.  Our observations of various boxes\
    \ showed that\n   this parameter can vary between about 45 seconds and several\
    \ minutes.\n   In many NATs, mappings can be kept for a duration that exceeds\
    \ this\n   minimum, even in the absence of traffic.  We suspect that many\n  \
    \ implementation perform \"garbage collection\" of unused mappings on\n   special\
    \ events, e.g., when the overall number of mappings exceeds\n   some limit.\n\
    \   In some cases, e.g., NATs that manage Integrated Services Digital\n   Network\
    \ (ISDN) or dial-up connections, the mappings will be released\n   when the connection\
    \ is released, i.e., when no traffic is observed on\n   the connection for a period\
    \ of a few minutes.\n   Any algorithm used to estimate the lifetime of mapping\
    \ will have to\n   be robust against these variations.\n   In some cases, clients\
    \ are located behind multiple NAT.  The Teredo\n   procedures will ensure communications\
    \ between clients between\n   multiple NATs and clients \"on the other side\"\
    \ of these NATs.  They\n   will also ensure communication when clients are located\
    \ in a single\n   subnet behind the same NAT.\n   The procedures do not make any\
    \ hypothesis about the type of IPv4\n   address used behind a NAT, and in particular\
    \ do not assume that these\n   are private addresses defined in [RFC1918].\n"
- title: 3.2.  IPv6 Provider of Last Resort
  contents:
  - "3.2.  IPv6 Provider of Last Resort\n   Teredo is designed to provide an \"IPv6\
    \ access of last resort\" to\n   nodes that need IPv6 connectivity but cannot\
    \ use any of the other\n   IPv6 transition schemes.  This design objective has\
    \ several\n   consequences on when to use Teredo, how to program clients, and\
    \ what\n   to expect of servers.  Another consequence is that we expect to see\
    \ a\n   point in time at which the Teredo technology ceases to be used.\n"
- title: 3.2.1.  When to Use Teredo
  contents:
  - "3.2.1.  When to Use Teredo\n   Teredo is designed to robustly enable IPv6 traffic\
    \ through NATs, and\n   the price of robustness is a reasonable amount of overhead,\
    \ due to\n   UDP encapsulation and transmission of bubbles.  Nodes that want to\n\
    \   connect to the IPv6 Internet SHOULD only use the Teredo service as a\n   \"\
    last resort\" option: they SHOULD prefer using direct IPv6\n   connectivity if\
    \ it is locally available, if it is provided by a 6to4\n   router co-located with\
    \ the local NAT, or if it is provided by a\n   configured tunnel service; and\
    \ they SHOULD prefer using the less\n   onerous 6to4 encapsulation if they can\
    \ use a global IPv4 address.\n"
- title: 3.2.2.  Autonomous Deployment
  contents:
  - "3.2.2.  Autonomous Deployment\n   In an IPv6-enabled network, the IPv6 service\
    \ is configured\n   automatically, by using mechanisms such as IPv6 Stateless\
    \ Address\n   Autoconfiguration [RFC2462] and Neighbor Discovery [RFC2461].  A\n\
    \   design objective is to configure the Teredo service as automatically\n   as\
    \ possible.  In practice, however, it is required that the client\n   learn the\
    \ IPv4 address of a server that is willing to serve the\n   client; some servers\
    \ may also require some form of access control.\n"
- title: 3.2.3.  Minimal Load on Servers
  contents:
  - "3.2.3.  Minimal Load on Servers\n   During the peak of the transition, there\
    \ will be a requirement to\n   deploy Teredo servers supporting a large number\
    \ of Teredo clients.\n   Minimizing the load on the server is a good way to facilitate\
    \ this\n   deployment.  To achieve this goal, servers should be as stateless as\n\
    \   possible, and they should also not be required to carry any more\n   traffic\
    \ than necessary.  To achieve this objective, we require only\n   that servers\
    \ enable the packet exchange between clients, but we don't\n   require servers\
    \ to carry the actual data packets: these packets will\n   have to be exchanged\
    \ directly between the Teredo clients, or through\n   a destination-selected relay\
    \ for exchanges between Teredo clients and\n   other IPv6 clients.\n"
- title: 3.2.4.  Automatic Sunset
  contents:
  - "3.2.4.  Automatic Sunset\n   Teredo is meant as a short-term solution to the\
    \ specific problem of\n   providing IPv6 service to nodes located behind a NAT.\
    \  The problem is\n   expected to be resolved over time by transforming the \"\
    IPv4 NAT\" into\n   an \"IPv6 router\".  This can be done in one of two ways:\
    \  upgrading\n   the NAT to provide 6to4 functions or upgrading the Internet\n\
    \   connection used by the NAT to a native IPv6 service, and then adding\n   IPv6\
    \ router functionality in the NAT.  In either case, the former NAT\n   can present\
    \ itself as an IPv6 router to the systems behind it.  These\n   systems will start\
    \ receiving the \"router advertisements\"; they will\n   notice that they have\
    \ IPv6 connectivity and will stop using Teredo.\n"
- title: 3.3.  Operational Requirements
  contents:
  - '3.3.  Operational Requirements

    '
- title: 3.3.1.  Robustness Requirement
  contents:
  - "3.3.1.  Robustness Requirement\n   The Teredo service is designed primarily for\
    \ robustness: packets are\n   carried over UDP in order to cross as many NAT implementations\
    \ as\n   possible.  The servers are designed to be stateless, which means that\n\
    \   they can easily be replicated.  We expect indeed to find many such\n   servers\
    \ replicated at multiple Internet locations.\n"
- title: 3.3.2.  Minimal Support Cost
  contents:
  - "3.3.2.  Minimal Support Cost\n   The service requires the support of Teredo servers\
    \ and Teredo relays.\n   In order to facilitate the deployment of these servers\
    \ and relays,\n   the Teredo procedures are designed to minimize the amount of\n\
    \   coordination required between servers and relays.\n   Meeting this objective\
    \ implies that the Teredo addresses will\n   incorporate the IPv4 address and\
    \ UDP port through which a Teredo\n   client can be reached.  This creates an\
    \ implicit limit on the\n   stability of the Teredo addresses, which can only\
    \ remain valid as\n   long as the underlying IPv4 address and UDP port remain\
    \ valid.\n"
- title: 3.3.3.  Protection against Denial of Service Attacks
  contents:
  - "3.3.3.  Protection against Denial of Service Attacks\n   The Teredo clients obtain\
    \ mapped addresses and ports from the Teredo\n   servers.  The service must be\
    \ protected against denial of service\n   attacks in which a third party spoofs\
    \ a Teredo server and sends\n   improper information to the client.\n"
- title: 3.3.4.  Protection against Distributed Denial of Service Attacks
  contents:
  - "3.3.4.  Protection against Distributed Denial of Service Attacks\n   Teredo relays\
    \ will act as a relay for IPv6 packets.  Improperly\n   designed packet relays\
    \ can be used by denial of service attackers to\n   hide their address, making\
    \ the attack untraceable.  The Teredo\n   service must include adequate protection\
    \ against such misuse.\n"
- title: 3.3.5.  Compatibility with Ingress Filtering
  contents:
  - "3.3.5.  Compatibility with Ingress Filtering\n   Routers may perform ingress\
    \ filtering by checking that the source\n   address of the packets received on\
    \ a given interface is \"legitimate\",\n   i.e., belongs to network prefixes from\
    \ which traffic is expected at a\n   network interface.  Ingress filtering is\
    \ a recommended practice, as\n   it thwarts the use of forged source IP addresses\
    \ by malfeasant\n   hackers, notably to cover their tracks during denial of service\n\
    \   attacks.  The Teredo specification must not force networks to disable\n  \
    \ ingress filtering.\n"
- title: 3.4.  Model of Operation
  contents:
  - "3.4.  Model of Operation\n   The operation of Teredo involves four types of nodes:\
    \ Teredo clients,\n   Teredo servers, Teredo relays, and \"plain\" IPv6 nodes.\n\
    \   Teredo clients start operation by interacting with a Teredo server,\n   performing\
    \ a \"qualification procedure\".  During this procedure, the\n   client will discover\
    \ whether it is behind a cone, restricted cone, or\n   symmetric NAT.  If the\
    \ client is not located behind a symmetric NAT,\n   the procedure will be successful\
    \ and the client will configure a\n   \"Teredo address\".\n   The Teredo IPv6\
    \ address embeds the \"mapped address and port\" through\n   which the client\
    \ can receive IPv4/UDP packets encapsulating IPv6\n   packets.  If the client\
    \ is not located behind a cone NAT,\n   transmission of regular IPv6 packets must\
    \ be preceded by an exchange\n   of \"bubbles\" that will install a mapping in\
    \ the NAT.  This document\n   specifies how the bubbles can be exchanged between\
    \ Teredo clients in\n   order to enable transmission along a direct path.\n  \
    \ Teredo clients can exchange IPv6 packets with plain IPv6 nodes (e.g.,\n   native\
    \ nodes or 6to4 nodes) through Teredo relays.  Teredo relays\n   advertise reachability\
    \ of the Teredo prefix to a certain subset of\n   the IPv6 Internet: a relay set\
    \ up by an ISP will typically serve only\n   the IPv6 customers of this ISP; a\
    \ relay set-up for a site will only\n   serve the IPv6 hosts of this site.  Dual-stack\
    \ hosts may implement a\n   \"local relay\", allowing them to communicate directly\
    \ with Teredo\n   hosts by sending IPv6 packets over UDP and IPv4 without having\
    \ to\n   advertise a Teredo IPv6 address.\n   Teredo clients have to discover\
    \ the relay that is closest to each\n   native IPv6 or 6to4 peer.  They have to\
    \ perform this discovery for\n   each native IPv6 or 6to4 peer with which they\
    \ communicate.  In order\n   to prevent spoofing, the Teredo clients perform a\
    \ relay discovery\n   procedure by sending an ICMP echo request to the native\
    \ host.  This\n   message is a regularly formatted IPv6 ICMP packet, which is\n\
    \   encapsulated in UDP and sent by the client to its Teredo server; the\n   server\
    \ decapsulates the IPv6 message and forwards it to the intended\n   IPv6 destination.\
    \  The payload of the echo request contains a large\n   random number.  The echo\
    \ reply is sent by the peer to the IPv6\n   address of the client, and is forwarded\
    \ through standard IPv6 routing\n   mechanisms.  It will naturally reach the Teredo\
    \ relay closest to the\n   native or 6to4 peer, and will be forwarded by this\
    \ relay using the\n   Teredo mechanisms.  The Teredo client will discover the\
    \ IPv4 address\n   and UDP port used by the relay to send the echo reply, and\
    \ will send\n   further IPv6 packets to the peer by encapsulating them in UDP\
    \ packets\n   sent to this IPv4 address and port.  In order to prevent spoofing,\n\
    \   the Teredo client verifies that the payload of the echo reply\n   contains\
    \ the proper random number.\n   The procedures are designed so that the Teredo\
    \ server only\n   participates in the qualification procedure and in the exchange\
    \ of\n   bubbles and ICMP echo requests.  The Teredo server never carries\n  \
    \ actual data traffic.  There are two rationales for this design:\n   reduce the\
    \ load on the server in order to enable scaling, and avoid\n   privacy issues\
    \ that could occur if a Teredo server kept copies of the\n   client's data packets.\n"
- title: 4.  Teredo Addresses
  contents:
  - "4.  Teredo Addresses\n   The Teredo addresses are composed of 5 components:\n\
    \   +-------------+-------------+-------+------+-------------+\n   | Prefix  \
    \    | Server IPv4 | Flags | Port | Client IPv4 |\n   +-------------+-------------+-------+------+-------------+\n\
    \   - Prefix: the 32-bit Teredo service prefix.\n   - Server IPv4: the IPv4 address\
    \ of a Teredo server.\n   - Flags: a set of 16 bits that document type of address\
    \ and NAT.\n   - Port: the obfuscated \"mapped UDP port\" of the Teredo service\
    \ at\n     the client.\n   - Client IPv4: the obfuscated \"mapped IPv4 address\"\
    \ of the client.\n   In this format, both the \"mapped UDP port\" and \"mapped\
    \ IPv4 address\"\n   of the client are obfuscated.  Each bit in the address and\
    \ port\n   number is reversed; this can be done by an exclusive OR of the 16-bit\n\
    \   port number with the hexadecimal value 0xFFFF, and an exclusive OR of\n  \
    \ the 32-bit address with the hexadecimal value 0xFFFFFFFF.\n   The IPv6 addressing\
    \ rules specify that \"for all unicast addresses,\n   except those that start\
    \ with binary value 000, Interface IDs are\n   required to be 64 bits long and\
    \ to be constructed in Modified EUI-64\n   format\".  This dictates the encoding\
    \ of the flags, 16 intermediate\n   bits that should correspond to valid values\
    \ of the most significant\n   16 bits of a Modified EUI-64 ID:\n          0  \
    \     0 0       1\n         |0       7 8       5\n         +----+----+----+----+\n\
    \         |Czzz|zzUG|zzzz|zzzz|\n         +----+----+----+----+\n   In this format:\n\
    \   -  The bits \"UG\" should be set to the value \"00\", indicating a non-\n\
    \      global unicast identifier;\n   -  The bit \"C\" (cone) should be set to\
    \ 1 if the client believes it is\n      behind a cone NAT, to 0 otherwise; these\
    \ values determine\n      different server behavior during the qualification procedure,\
    \ as\n      specified in Section 5.2.1, as well as different bubble processing\n\
    \      by clients and relays.\n   -  The bits indicated with \"z\" must be set\
    \ to zero and ignored on\n      receipt.\n   Thus, there are two currently specified\
    \ values of the Flags field:\n   \"0x0000\" (all null) if the cone bit is set\
    \ to 0, and \"0x8000\" if the\n   cone bit is set to 1.  (Further versions of\
    \ this specification may\n   assign new values to the reserved bits.)\n   In some\
    \ cases, Teredo nodes use link-local addresses.  These\n   addresses contain a\
    \ link-local prefix (FE80::/64) and a 64-bit\n   identifier, constructed using\
    \ the same format as presented above.  A\n   difference between link-local addresses\
    \ and global addresses is that\n   the identifiers used in global addresses MUST\
    \ include a global scope\n   unicast IPv4 address, while the identifiers used\
    \ in link-local\n   addresses MAY include a private IPv4 address.\n"
- title: 5.  Specification of Clients, Servers, and Relays
  contents:
  - "5.  Specification of Clients, Servers, and Relays\n   The Teredo service is realized\
    \ by having clients interact with Teredo\n   servers through the Teredo service\
    \ protocol.  The clients will also\n   receive IPv6 packets through Teredo relays.\
    \  The client behavior is\n   specified in Section 5.2.\n   The Teredo server\
    \ is designed to be stateless.  It waits for Teredo\n   requests and for IPv6\
    \ packets on the Teredo UDP port; it processes\n   the requests by sending a response\
    \ to the appropriate address and\n   port; it forwards some Teredo IPv6 packets\
    \ to the appropriate IPv4\n   address and UDP port, or to native IPv6 peers of\
    \ Teredo clients.  The\n   precise behavior of the server is specified in Section\
    \ 5.3.\n   The Teredo relay advertises reachability of the Teredo service prefix\n\
    \   over IPv6.  The scope of advertisement may be the entire Internet or\n   a\
    \ smaller subset such as an ISP network or an IPv6 site; it may even\n   be as\
    \ small as a single host in the case of \"local relays\".  The\n   relay forwards\
    \ Teredo IPv6 packets to the appropriate IPv4 address\n   and UDP port.  The relay\
    \ behavior is specified in Section 5.4.\n   Teredo clients, servers, and relays\
    \ must implement the sunset\n   procedure defined in Section 5.5.\n"
- title: 5.1.  Message Formats
  contents:
  - '5.1.  Message Formats

    '
- title: 5.1.1.  Teredo IPv6 Packet Encapsulation
  contents:
  - "5.1.1.  Teredo IPv6 Packet Encapsulation\n   Teredo IPv6 packets are transmitted\
    \ as UDP packets [RFC768] within\n   IPv4 [RFC791].  The source and destination\
    \ IP addresses and UDP ports\n   take values that are specified in this section.\
    \  Packets can come in\n   one of two formats, simple encapsulation and encapsulation\
    \ with\n   origin indication.\n   When simple encapsulation is used, the packet\
    \ will have a simple\n   format, in which the IPv6 packet is carried as the payload\
    \ of a UDP\n   datagram:\n   +------+-----+-------------+\n   | IPv4 | UDP | IPv6\
    \ packet |\n   +------+-----+-------------+\n   When relaying some packets received\
    \ from third parties, the server\n   may insert an origin indication in the first\
    \ bytes of the UDP\n   payload:\n   +------+-----+-------------------+-------------+\n\
    \   | IPv4 | UDP | Origin indication | IPv6 packet |\n   +------+-----+-------------------+-------------+\n\
    \   The origin indication encapsulation is an 8-octet element, with the\n   following\
    \ content:\n   +--------+--------+-----------------+\n   |  0x00  | 0x00   | Origin\
    \ port #   |\n   +--------+--------+-----------------+\n   |  Origin IPv4 address\
    \              |\n   +-----------------------------------+\n   The first two octets\
    \ of the origin indication are set to a null\n   value; this is used to discriminate\
    \ between the simple encapsulation,\n   in which the first 4 bits of the packet\
    \ contain the indication of the\n   IPv6 protocol, and the origin indication.\n\
    \   The following 16 bits contain the obfuscated value of the port number\n  \
    \ from which the packet was received, in network byte order.  The next\n   32\
    \ bits contain the obfuscated IPv4 address from which the packet was\n   received,\
    \ in network byte order.  In this format, both the original\n   \"IPv4 address\"\
    \ and \"UDP port\" of the client are obfuscated.  Each bit\n   in the address\
    \ and port number is reversed; this can be done by an\n   exclusive OR of the\
    \ 16-bit port number with the hexadecimal value\n   0xFFFF, and an exclusive OR\
    \ of the 32-bit address with the\n   hexadecimal value 0xFFFFFFFF.\n   For example,\
    \ if the original UDP port number was 337 (hexadecimal\n   0151) and original\
    \ IPv4 address was 1.2.3.4 (hexadecimal 01020304),\n   the origin indication would\
    \ contain the value \"0000FEAEFEFDFCFB\".\n   When exchanging Router Solicitation\
    \ (RS) and Router Advertisement\n   (RA) messages between a client and its server,\
    \ the packets may\n   include an authentication parameter:\n   +------+-----+----------------+-------------+\n\
    \   | IPv4 | UDP | Authentication | IPv6 packet |\n   +------+-----+----------------+-------------+\n\
    \   The authentication encapsulation is a variable-length element,\n   containing\
    \ a client identifier, an authentication value, a nonce\n   value, and a confirmation\
    \ byte.\n   +--------+--------+--------+--------+\n   |  0x00  | 0x01   | ID-len\
    \ | AU-len |\n   +--------+--------+--------+--------+\n   |  Client identifier\
    \ (ID-len        |\n   +-----------------+-----------------+\n   |  octets)  \
    \      |  Authentication |\n   +-----------------+--------+--------+\n   | value\
    \ (AU-len octets)    | Nonce  |\n   +--------------------------+--------+\n  \
    \ | value (8 octets)                  |\n   +--------------------------+--------+\n\
    \   |                          | Conf.  |\n   +--------------------------+--------+\n\
    \   The first octet of the authentication encapsulation is set to a null\n   value,\
    \ and the second octet is set to the value 1; this enables\n   differentiation\
    \ from IPv6 packets and from origin information\n   indication encapsulation.\
    \  The third octet indicates the length in\n   bytes of the client identifier;\
    \ the fourth octet indicates the length\n   in bytes of the authentication value.\
    \  The computation of the\n   authentication value is specified in Section 5.2.2.\
    \ The\n   authentication value is followed by an 8-octet nonce, and by a\n   confirmation\
    \ byte.\n   Both ID-len and AU-len can be set to null values if the server does\n\
    \   not require an explicit authentication of the client.\n   Authentication and\
    \ origin indication encapsulations may sometimes be\n   combined, for example,\
    \ in the RA responses sent by the server.  In\n   this case, the authentication\
    \ encapsulation MUST be the first element\n   in the UDP payload:\n   +------+-----+----------------+--------+-------------+\n\
    \   | IPv4 | UDP | Authentication | Origin | IPv6 packet |\n   +------+-----+----------------+--------+-------------+\n"
- title: 5.1.2.  Maximum Transmission Unit
  contents:
  - "5.1.2.  Maximum Transmission Unit\n   Since Teredo uses UDP as an underlying\
    \ transport, a Teredo Maximum\n   Transmission Unit (MTU) could potentially be\
    \ as large as the payload\n   of the largest valid UDP datagram (65507 bytes).\
    \  However, since\n   Teredo packets can travel on unpredictable paths over the\
    \ Internet,\n   it is best to contain this MTU to a small size, in order to minimize\n\
    \   the effect of IPv4 packet fragmentation and reassembly.  The default\n   link\
    \ MTU assumed by a host, and the link MTU supplied by a Teredo\n   server during\
    \ router advertisement SHOULD normally be set to the\n   minimum IPv6 MTU size\
    \ of 1280 bytes [RFC2460].\n   Teredo implementations SHOULD NOT set the Don't\
    \ Fragment (DF) bit of\n   the encapsulating IPv4 header.\n"
- title: 5.2.  Teredo Client Specification
  contents:
  - "5.2.  Teredo Client Specification\n   Before using the Teredo service, the client\
    \ must be configured with:\n   - the IPv4 address of a server.\n   - a secondary\
    \ IPv4 address of that server.\n   If secure discovery is required, the client\
    \ must also be configured\n   with:\n   - a client identifier,\n   - a secret\
    \ value, shared with the server,\n   - an authentication algorithm, shared with\
    \ the server.\n   A Teredo client expects to exchange IPv6 packets through a UDP\
    \ port,\n   the Teredo service port.  To avoid problems when operating behind\
    \ a\n   \"port conserving\" NAT, different clients operating behind the same\n\
    \   NAT should use different service port numbers.  This can be achieved\n   through\
    \ explicit configuration or, in the absence of configuration,\n   by picking the\
    \ service port number at random.\n   The client will maintain the following variables\
    \ that reflect the\n   state of the Teredo service:\n   - Teredo connectivity\
    \ status,\n   - Mapped address and port number associated with the Teredo service\n\
    \     port,\n   - Teredo IPv6 prefix associated with the Teredo service port,\n\
    \   - Teredo IPv6 address or addresses derived from the prefix,\n   - Link local\
    \ address,\n   - Date and time of the last interaction with the Teredo server,\n\
    \   - Teredo Refresh Interval,\n   - Randomized Refresh Interval,\n   - List of\
    \ recent Teredo peers.\n   Before sending any packets, the client must perform\
    \ the Teredo\n   qualification procedure, which determines the Teredo connectivity\n\
    \   status, the mapped address and port number, and the Teredo IPv6\n   prefix.\
    \  It should then perform the cone NAT determination procedure,\n   which determines\
    \ the cone NAT status and may alter the value of the\n   prefix.  If the qualification\
    \ is successful, the client may use the\n   Teredo service port to transmit and\
    \ receive IPv6 packets, according\n   to the transmission and reception procedures.\
    \  These procedures use\n   the \"list of recent peers\".  For each peer, the\
    \ list contains:\n   - The IPv6 address of the peer,\n   - The mapped IPv4 address\
    \ and mapped UDP port of the peer,\n   - The status of the mapped address, i.e.,\
    \ trusted or not,\n   - The value of the last nonce sent to the peer,\n   - The\
    \ date and time of the last reception from the peer,\n   - The date and time of\
    \ the last transmission to the peer,\n   - The number of bubbles transmitted to\
    \ the peer.\n   The list of peers is used to enable the transmission of IPv6 packets\n\
    \   by using a \"direct path\" for the IPv6 packets.  The list of peers\n   could\
    \ grow over time.  Clients should implement a list management\n   strategy, for\
    \ example, deleting the least recently used entries.\n   Clients should make sure\
    \ that the list has a sufficient size, to\n   avoid unnecessary exchanges of bubbles.\n\
    \   The client must regularly perform the maintenance procedure in order\n   to\
    \ guarantee that the Teredo service port remains usable.  The need\n   to use\
    \ this procedure or not depends on the delay since the last\n   interaction with\
    \ the Teredo server.  The refresh procedure takes as a\n   parameter the \"Teredo\
    \ refresh interval\".  This parameter is initially\n   set to 30 seconds; it can\
    \ be updated as a result of the optional\n   \"interval determination procedure\"\
    .  The randomized refresh interval\n   is set to a value randomly chosen between\
    \ 75% and 100% of the refresh\n   interval.\n   In order to avoid triangle routing\
    \ for stations that are located\n   behind the same NAT, the Teredo clients MAY\
    \ use the optional local\n   client discovery procedure defined in Section 5.2.8.\
    \ Using this\n   procedure will also enhance connectivity when the NAT cannot\
    \ do\n   \"hairpin\" routing, i.e., cannot redirect a packet sent from one\n \
    \  internal host to the mapped address and port of another internal\n   host.\n"
- title: 5.2.1.  Qualification Procedure
  contents:
  - "5.2.1.  Qualification Procedure\n   The purposes of the qualification procedure\
    \ are to establish the\n   status of the local IPv4 connection and to determine\
    \ the Teredo IPv6\n   client prefix of the local Teredo interface.  The procedure\
    \ starts\n   when the service is in the \"initial\" state, and it results in a\n\
    \   \"qualified\" state if successful, and in an \"off-line\" state if\n   unsuccessful.\n\
    \          /---------\\\n          | Initial |\n          \\---------/\n     \
    \          |\n          +----+----------+\n          | Set ConeBit=1 |\n     \
    \     +----+----------+\n               |\n               +<-------------------------------------------+\n\
    \               |                                            |\n          +----+----+\
    \                                       |\n          | Start   |<------+     \
    \                          |\n          +----+----+       |                  \
    \  +----------+----+\n               |            |                    | Set ConeBit=0\
    \ |\n               v            |                    +----------+----+\n    \
    \      /---------\\ Timer | N                             ^\n          |Starting\
    \ |-------+ attempts /----------------\\Yes|\n          \\---------/----------------->|\
    \ ConeBit == 1 ? |---+\n               | Response              \\----------------/\n\
    \               |                              | No\n               V        \
    \                      V\n        /---------------\\ Yes            /----------\\\
    \n        | ConeBit == 1? |-----+          | Off line |\n        \\---------------/\
    \     |          \\----------/\n            No |              v\n            \
    \   |         /----------\\\n               |         | Cone NAT |\n         +-----+-----+\
    \   \\----------/\n         | New Server|\n         +-----+-----+\n          \
    \     |\n          +----+----+\n          | Start   |<------+\n          +----+----+\
    \       |\n               |            |\n               v            |\n    \
    \      /---------\\ Timer |\n          |Starting |-------+ N attempts /----------\\\
    \n          \\---------/------------------->| Off line |\n               | Response\
    \                \\----------/\n               |\n               V\n         /------------\\\
    \ No      /---------------\\\n         | Same port? |-------->| Symmetric NAT\
    \ |\n         \\------------/         \\---------------/\n               | Yes\n\
    \               V\n          /----------------------\\\n          | Restricted\
    \ Cone NAT  |\n          \\----------------------/\n   Initially, the Teredo connectivity\
    \ status is set to \"Initial\".\n   When the interface is initialized, the system\
    \ first performs the\n   \"start action\" by sending a Router Solicitation message,\
    \ as defined\n   in [RFC2461].  The client picks a link-local address and uses\
    \ it as\n   the IPv6 source of the message; the cone bit in the address is set\
    \ to\n   1 (see Section 4 for the address format); the IPv6 destination of the\n\
    \   RS is the all-routers multicast address; the packet will be sent over\n  \
    \ UDP from the service port to the Teredo server's IPv4 address and\n   Teredo\
    \ UDP port.  The connectivity status moves then to \"Starting\".\n   In the starting\
    \ state, the client waits for a router advertisement\n   from the Teredo server.\
    \  If no response comes within a time-out T,\n   the client should repeat the\
    \ start action, by resending the Router\n   Solicitation message.  If no response\
    \ has arrived after N\n   repetitions, the client concludes that it is not behind\
    \ a cone NAT.\n   It sets the cone bit to 0, and repeats the procedure.  If after\
    \ N\n   other timer expirations and retransmissions there is still no\n   response,\
    \ the client concludes that it cannot use UDP, and that the\n   Teredo service\
    \ is not available; the status is set to \"Off-line\".  In\n   accordance with\
    \ [RFC2461], the default time-out value is set to T=4\n   seconds, and the maximum\
    \ number of repetitions is set to N=3.\n   If a response arrives, the client checks\
    \ that the response contains\n   an origin indication and a valid router advertisement\
    \ as defined in\n   [RFC2461], that the IPv6 destination address is equal to the\
    \ link-\n   local address used in the router solicitation, and that the router\n\
    \   advertisement contains exactly one advertised Prefix Information\n   option.\
    \  This prefix should be a valid Teredo IPv6 server prefix: the\n   first 32 bits\
    \ should contain the global Teredo IPv6 service prefix,\n   and the next 32 bits\
    \ should contain the server's IPv4 address.  If\n   this is the case, the client\
    \ learns the Teredo mapped address and\n   Teredo mapped port from the origin\
    \ indication.  The IPv6 source\n   address of the Router Advertisement is a link-local\
    \ server address of\n   the Teredo server.  (Responses that are not valid advertisements\
    \ are\n   simply discarded.)\n   If the client has received an RA with the cone\
    \ bit in the IPv6\n   destination address set to 1, it is behind a cone NAT and\
    \ is fully\n   qualified.  If the RA is received with the cone bit set to 0, the\n\
    \   client does not know whether the local NAT is restricted or\n   symmetric.\
    \  The client selects the secondary IPv4 server address, and\n   repeats the procedure,\
    \ the cone bit remaining to the value zero.  If\n   the client does not receive\
    \ a response, it detects that the service\n   is not usable.  If the client receives\
    \ a response, it compares the\n   mapped address and mapped port in this second\
    \ response to the first\n   received values.  If the values are different, the\
    \ client detects a\n   symmetric NAT: it cannot use the Teredo service.  If the\
    \ values are\n   the same, the client detects a port-restricted or restricted\
    \ cone\n   NAT: the client is qualified to use the service.  (Teredo operates\n\
    \   the same way for restricted and port-restricted NAT.)\n   If the client is\
    \ qualified, it builds a Teredo IPv6 address using the\n   Teredo IPv6 server\
    \ prefix learned from the RA and the obfuscated\n   values of the UDP port and\
    \ IPv4 address learned from the origin\n   indication.  The cone bit should be\
    \ set to the value used to receive\n   the RA, i.e., 1 if the client is behind\
    \ a cone NAT, 0 otherwise.  The\n   client can start using the Teredo service.\n"
- title: 5.2.2.  Secure Qualification
  contents:
  - "5.2.2.  Secure Qualification\n   The client may be required to perform secured\
    \ qualification.  The\n   client will perform exactly the algorithm described\
    \ in Section 5.2.1,\n   but it will incorporate an authentication encapsulation\
    \ in the UDP\n   packet carrying the router solicitation message, and it will\
    \ verify\n   the presence of a valid authentication parameter in the UDP message\n\
    \   that carries the router advertisement provided by the sender.\n   In these\
    \ packets, the nonce value is chosen by the client, and is\n   repeated in the\
    \ response from the server; the client identifier is a\n   value with which the\
    \ client was configured.\n   A first level of protection is provided by just checking\
    \ that the\n   value of the nonce in the response matches the value initially\
    \ sent\n   by the client.  If they don't match, the packet MUST be discarded.\n\
    \   If no other protection is used, the authentication payload does not\n   contain\
    \ any identifier or authentication field; the ID-len and AU-len\n   fields are\
    \ set to a null value.  When stronger protection is\n   required, the authentication\
    \ payload contains the identifier and\n   location fields, as explained in the\
    \ following paragraphs.\n   The confirmation byte is set to 0 by the client. \
    \ A null value\n   returned by the server indicates that the client's key is still\n\
    \   valid; a non-null value indicates that the client should obtain a new\n  \
    \ key.\n   When stronger authentication is provided, the client and the server\n\
    \   are provisioned with a client identifier, a shared secret, and the\n   identification\
    \ of an authentication algorithm.  Before transmission,\n   the authentication\
    \ value is computed according to the specified\n   algorithm; on reception, the\
    \ same algorithm is used to compute a\n   target value from the content of the\
    \ receive packet.  The receiver\n   deems the authentication successful if the\
    \ two values match.  If they\n   don't, the packet MUST be discarded.\n   To maximize\
    \ interoperability, this specification defines a default\n   algorithm in which\
    \ the authentication value is computed according the\n   HMAC specification [RFC2104]\
    \ and the SHA1 function [FIPS-180].\n   Clients and servers may agree to use HMAC\
    \ combined with a different\n   function, or to use a different algorithm altogether,\
    \ such as for\n   example AES-XCBC-MAC-96 [RFC3566].\n   The default authentication\
    \ algorithm is based on the HMAC algorithm\n   according to the following specifications:\n\
    \   - the hash function shall be the SHA1 function [FIPS-180].\n   - the secret\
    \ value shall be the shared secret with which the client\n     was configured.\n\
    \   The clear text to be protected includes:\n   - the nonce value,\n   - the\
    \ confirmation byte,\n   - the origin indication encapsulation, if it is present,\n\
    \   - the IPv6 packet.\n   The HMAC procedure is applied to the concatenation\
    \ of these four\n   components, without any additional padding.\n"
- title: 5.2.3.  Packet Reception
  contents:
  - "5.2.3.  Packet Reception\n   The Teredo client receives packets over the Teredo\
    \ interface.  The\n   role of the packet reception procedure, besides receiving\
    \ packets, is\n   to maintain the date and time of the last interaction with the\
    \ Teredo\n   server and the \"list of recent peers\".\n   When a UDP packet is\
    \ received over the Teredo service port, the\n   Teredo client checks that it\
    \ is encoded according to the packet\n   encoding rules defined in Section 5.1.1,\
    \ and that it contains either\n   a valid IPv6 packet or the combination of a\
    \ valid origin indication\n   encapsulation and a valid IPv6 packet, possibly\
    \ protected by a valid\n   authentication encapsulation.  If this is not the case,\
    \ the packet is\n   silently discarded.\n   An IPv6 packet is deemed valid if\
    \ it conforms to [RFC2460]: the\n   protocol identifier should indicate an IPv6\
    \ packet and the payload\n   length should be consistent with the length of the\
    \ UDP datagram in\n   which the packet is encapsulated.  In addition, the client\
    \ should\n   check that the IPv6 destination address correspond to its own Teredo\n\
    \   address.\n   Then, the Teredo client examines the IPv4 source address and\
    \ UDP port\n   number from which the packet is received.  If these values match\
    \ the\n   IPv4 address of the server and the Teredo port, the client updates\n\
    \   the \"date and time of the last interaction with the Teredo server\" to\n\
    \   the current date and time; if an origin indication is present, the\n   client\
    \ should perform the \"direct IPv6 connectivity test\" described\n   in Section\
    \ 5.2.9.\n   If the IPv4 source address and UDP port number are different from\
    \ the\n   IPv4 address of the server and the Teredo port, the client examines\n\
    \   the IPv6 source address of the packet:\n   1) If there is an entry for the\
    \ source IPv6 address in the list of\n   peers whose status is trusted, the client\
    \ compares the mapped IPv4\n   address and mapped port in the entry with the source\
    \ IPv4 address and\n   source port of the packet.  If the values match, the packet\
    \ is\n   accepted; the date and time of the last reception from the peer is\n\
    \   updated.\n   2) If there is an entry for the source IPv6 address in the list\
    \ of\n   peers whose status is not trusted, the client checks whether the\n  \
    \ packet is an ICMPv6 echo reply.  If this is the case, and if the\n   ICMPv6\
    \ data of the reply matches the nonce stored in the peer entry,\n   the packet\
    \ should be accepted; the status of the entry should be\n   changed to \"trusted\"\
    , the mapped IPv4 and mapped port in the entry\n   should be set to the source\
    \ IPv4 address and source port from which\n   the packet was received, and the\
    \ date and time of the last reception\n   from the peer should be updated.  Any\
    \ packet queued for this IPv6\n   peer (as specified in Section 5.2.4) should\
    \ be de-queued and\n   forwarded to the newly learned IPv4 address and UDP port.\n\
    \   3) If the source IPv6 address is a Teredo address, the client\n   compares\
    \ the mapped IPv4 address and mapped port in the source\n   address with the source\
    \ IPv4 address and source port of the packet.\n   If the values match, the client\
    \ MUST create a peer entry for the IPv6\n   source address in the list of peers;\
    \ it should update the entry if\n   one already existed; the mapped IPv4 address\
    \ and mapped port in the\n   entry should be set to the value from which the packet\
    \ was received,\n   and the status should be set to \"trusted\".  If a new entry\
    \ is\n   created, the last transmission date is set to 30 seconds before the\n\
    \   current date, and the number of bubbles to zero.  If the packet is a\n   bubble,\
    \ it should be discarded after this processing; otherwise, the\n   packet should\
    \ be accepted.  In all cases, the client must de-queue\n   and forward any packet\
    \ queued for that destination.\n   4) If the IPv4 destination address through\
    \ which the packet was\n   received is the Teredo IPv4 Discovery Address, the\
    \ source address is\n   a valid Teredo address, and the destination address is\
    \ the \"all nodes\n   on link\" multicast address, the packet should be treated\
    \ as a local\n   discovery bubble.  If no local entry already existed for the\
    \ source\n   address, a new one is created, but its status is set to \"not\n \
    \  trusted\".  The client SHOULD reply with a unicast Teredo bubble, sent\n  \
    \ to the source IPv4 address and source port of the local discovery\n   bubble;\
    \ the IPv6 source address of the bubble will be set to local\n   Teredo IPv6 address;\
    \ the IPv6 destination address of the bubble\n   should be set to the IPv6 source\
    \ address of the local discovery\n   bubble.  (Clients that do not implement the\
    \ optional local discovery\n   procedure will not process local discovery bubbles.)\n\
    \   5) If the source IPv6 address is a Teredo address, and the mapped\n   IPv4\
    \ address and mapped port in the source address do not match the\n   source IPv4\
    \ address and source port of the packet, the client checks\n   whether there is\
    \ an existing \"local\" entry for that IPv6 address.  If\n   there is such an\
    \ entry, and if the local IPv4 address and local port\n   indicated in that entry\
    \ match the source IPv4 address and source\n   port of the packet, the client\
    \ updates the \"local\" entry, whose\n   status should be set to \"trusted\".\
    \  If the packet is a bubble, it\n   should be discarded after this processing;\
    \ otherwise, the packet\n   should be accepted.  In all cases, the client must\
    \ de-queue and\n   forward any packet queued for that destination.\n   6) In the\
    \ other cases, the packet may be accepted, but the client\n   should be conscious\
    \ that the source address may be spoofed; before\n   processing the packet, the\
    \ client should perform the \"direct IPv6\n   connectivity test\" described in\
    \ Section 5.2.9.\n   Whatever the IPv4 source address and UDP source port, the\
    \ client that\n   receives an IPv6 packet MAY send a Teredo bubble towards that\
    \ target,\n   as specified in Section 5.2.6.\n"
- title: 5.2.4.  Packet Transmission
  contents:
  - "5.2.4.  Packet Transmission\n   When a Teredo client has to transmit a packet\
    \ over a Teredo\n   interface, it examines the destination IPv6 address.  The\
    \ client\n   checks first if there is an entry for this IPv6 address in the list\n\
    \   of recent Teredo peers, and if the entry is still valid: an entry\n   associated\
    \ with a local peer is valid if the last reception date and\n   time associated\
    \ with that list entry is less that 30 seconds from the\n   current time; an entry\
    \ associated with a non-local peer is valid if\n   the last reception date and\
    \ time associated with that list entry is\n   less that 30 seconds from the current\
    \ time.  (Local peer entries can\n   only be present if the client uses the local\
    \ discovery procedure\n   discussed in Section 5.2.8.)\n   The client then performs\
    \ the following:\n   1) If there is an entry for that IPv6 address in the list\
    \ of peers,\n   and if the status of the entry is set to \"trusted\", the IPv6\
    \ packet\n   should be sent over UDP to the IPv4 address and UDP port specified\
    \ in\n   the entry.  The client updates the date of last transmission in the\n\
    \   peer entry.\n   2) If the destination is not a Teredo IPv6 address, the packet\
    \ is\n   queued, and the client performs the \"direct IPv6 connectivity test\"\
    \n   described in Section 5.2.9. The packet will be de-queued and\n   forwarded\
    \ if this procedure completes successfully.  If the direct\n   IPv6 connectivity\
    \ test fails to complete within a 2-second time-out,\n   it should be repeated\
    \ up to 3 times.\n   3) If the destination is the Teredo IPv6 address of a local\
    \ peer\n   (i.e., a Teredo address from which a local discovery bubble has been\n\
    \   received in the last 600 seconds), the packet is queued.  The client\n   sends\
    \ a unicast Teredo bubble to the local IPv4 address and local\n   port specified\
    \ in the entry, and a local Teredo bubble to the Teredo\n   IPv4 discovery address.\n\
    \   4) If the destination is a Teredo IPv6 address in which the cone bit\n   is\
    \ set to 1, the packet is sent over UDP to the mapped IPv4 address\n   and mapped\
    \ UDP port extracted from that IPv6 address.\n   5) If the destination is a Teredo\
    \ IPv6 address in which the cone bit\n   is set to 0, the packet is queued.  If\
    \ the client is not located\n   behind a cone NAT, it sends a direct bubble to\
    \ the Teredo\n   destination, i.e., to the mapped IP address and mapped port of\
    \ the\n   destination.  In all cases, the client sends an indirect bubble to\n\
    \   the Teredo destination, sending it over UDP to the server address and\n  \
    \ to the Teredo port.  The packet will be de-queued and forwarded when\n   the\
    \ client receives a bubble or another packet directly from this\n   Teredo peer.\
    \  If no bubble is received within a 2-second time-out,\n   the bubble transmission\
    \ should be repeated up to 3 times.\n   In cases 4 and 5, before sending a packet\
    \ over UDP, the client MUST\n   check that the IPv4 destination address is in\
    \ the format of a global\n   unicast address; if this is not the case, the packet\
    \ MUST be silently\n   discarded.  (Note that a packet can legitimately be sent\
    \ to a non-\n   global unicast address in case 1, as a result of the local discovery\n\
    \   procedure.)\n   The global unicast address check is designed to thwart a number\
    \ of\n   possible attacks in which an attacker tries to use a Teredo host to\n\
    \   attack either a single local IPv4 target or a set of such targets.\n   For\
    \ the purpose of this specification, and IPv4 address is deemed to\n   be a global\
    \ unicast address if it does not belong to or match:\n   - the \"local\" subnet\
    \ 0.0.0.0/8,\n   - the \"loopback\" subnet 127.0.0.0/8,\n   - the local addressing\
    \ ranges 10.0.0.0/8,\n   - the local addressing ranges 172.16.0.0/12,\n   - the\
    \ local addressing ranges 192.168.0.0/16,\n   - the link local block 169.254.0.0/16,\n\
    \   - the block reserved for 6to4 anycast addresses 192.88.99.0/24,\n   - the\
    \ multicast address block 224.0.0.0/4,\n   - the \"limited broadcast\" destination\
    \ address 255.255.255.255,\n   - the directed broadcast addresses corresponding\
    \ to the subnets to\n     which the host is attached.\n   A list of special-use\
    \ IPv4 addresses is provided in [RFC3330].\n   For reliability reasons, clients\
    \ MAY decide to ignore the value of\n   the cone bit in the flag, skip the \"\
    case 4\" test and always perform\n   the \"case 5\", i.e., treat all Teredo peers\
    \ as if they were located\n   behind non-cone NAT.  This will result in some increase\
    \ in traffic,\n   but may avoid reliability issues if the determination of the\
    \ NAT\n   status was for some reason erroneous.  For the same reason, clients\n\
    \   MAY also decide to always send a direct bubble in case 5, even if\n   they\
    \ do not believe that they are located behind a non-cone NAT.\n"
- title: 5.2.5.  Maintenance
  contents:
  - "5.2.5.  Maintenance\n   The Teredo client must ensure that the mappings that\
    \ it uses remain\n   valid.  It does so by checking that packets are regularly\
    \ received\n   from the Teredo server.\n   At regular intervals, the client MUST\
    \ check the \"date and time of the\n   last interaction with the Teredo server\"\
    \ to ensure that at least one\n   packet has been received in the last Randomized\
    \ Teredo Refresh\n   Interval.  If this is not the case, the client SHOULD send\
    \ a router\n   solicitation message to the server, as specified in Section 5.2.1;\n\
    \   the client should use the same value of the cone bit that resulted in\n  \
    \ the reception of an RA during the qualification procedure.\n   When the router\
    \ advertisement is received, the client SHOULD check\n   its validity as specified\
    \ in Section 5.2.1; invalid advertisements\n   are silently discarded.  If the\
    \ advertisement is valid, the client\n   MUST check that the mapped address and\
    \ port correspond to the current\n   Teredo address.  If this is not the case,\
    \ the mapping has changed;\n   the client must mark the old address as invalid\
    \ and start using the\n   new address.\n"
- title: 5.2.6.  Sending Teredo Bubbles
  contents:
  - "5.2.6.  Sending Teredo Bubbles\n   The Teredo client may have to send a bubble\
    \ towards another Teredo\n   client, either after a packet reception or after\
    \ a transmission\n   attempt, as explained in Sections 5.2.3 and 5.2.4. There\
    \ are two\n   kinds of bubbles: direct bubbles, which are sent directly to the\n\
    \   mapped IPv4 address and mapped UDP port of the peer, and indirect\n   bubbles,\
    \ which are sent through the Teredo server of the peer.\n   When a Teredo client\
    \ attempts to send a direct bubble, it extracts\n   the mapped IPv4 address and\
    \ mapped UDP port from the Teredo IPv6\n   address of the target.  It then checks\
    \ whether there is already an\n   entry for this IPv6 address in the current list\
    \ of peers.  If there\n   is no entry, the client MUST create a new list entry\
    \ for the address,\n   setting the last reception date and the last transmission\
    \ date to 30\n   seconds before the current date, and the number of bubbles to\
    \ zero.\n   When a Teredo client attempts to send an indirect bubble, it extracts\n\
    \   the Teredo server IPv4 address from the Teredo prefix of the IPv6\n   address\
    \ of the target (different clients may be using different\n   servers); the bubble\
    \ will be sent to that IPv4 address and the Teredo\n   UDP port.\n   Bubbles may\
    \ be lost in transit, and it is reasonable to enhance the\n   reliability of the\
    \ Teredo service by allowing multiple transmissions;\n   however, bubbles will\
    \ also be lost systematically in certain NAT\n   configurations.  In order to\
    \ strike a balance between reliability and\n   unnecessary retransmissions, we\
    \ specify the following:\n   - The client MUST NOT send a bubble if the last transmission\
    \ date\n     and time is less than 2 seconds before the current date and time;\n\
    \   - The client MUST NOT send a bubble if it has already sent 4 bubbles\n   \
    \  to the peer in the last 300 seconds without receiving a direct\n     response.\n\
    \   In the other cases, the client MAY proceed with the transmission of\n   the\
    \ bubble.  When transmitting the bubble, the client MUST update the\n   last transmission\
    \ date and time to that peer, and must also increment\n   the number of transmitted\
    \ bubbles.\n"
- title: 5.2.7.  Optional Refresh Interval Determination Procedure
  contents:
  - "5.2.7.  Optional Refresh Interval Determination Procedure\n   In addition to\
    \ the regular client resources described in the\n   beginning of this section,\
    \ the refresh interval determination\n   procedure uses an additional UDP port,\
    \ the Teredo secondary port, and\n   the following variables:\n   - Teredo secondary\
    \ connectivity status,\n   - Mapped address and port number of the Teredo secondary\
    \ port,\n   - Teredo secondary IPv6 prefix associated with the secondary port,\n\
    \   - Teredo secondary IPv6 address derived from this prefix,\n   - Date and time\
    \ of the last interaction on the secondary port,\n   - Maximum Teredo Refresh\
    \ Interval.\n   - Candidate Teredo Refresh Interval.\n   The secondary connectivity\
    \ status, mapped address and prefix are\n   determined by running the qualification\
    \ procedure on the secondary\n   port.  When the client uses the interval determination\
    \ procedure, the\n   qualification procedure MUST be run for the secondary port\n\
    \   immediately after running it on the service port.  If the secondary\n   qualification\
    \ fails, the interval determination procedure will not be\n   used, and the interval\
    \ value will remain to the default value, 30\n   seconds.  If the secondary qualification\
    \ succeeds, the maximum\n   refresh interval is set to 120 seconds, and the candidate\
    \ Teredo\n   refresh interval is set to 60 seconds, i.e., twice the Teredo refresh\n\
    \   interval.  The procedure is then performed at regular intervals,\n   until\
    \ it concludes:\n   1) wait until the candidate refresh interval is elapsed after\
    \ the\n      last interaction on the secondary port.\n   2) send a Teredo bubble\
    \ to the Teredo secondary IPv6 address, through\n      the service port.\n   3)\
    \ wait for reception of the bubble on the secondary port.  If a\n      timer of\
    \ 2 seconds elapses without reception, repeat step 2 at\n      most three times.\
    \  If there is still no reception, the candidate\n      has failed; if there is\
    \ a reception, the candidate has succeeded.\n   4) if the candidate has succeeded,\
    \ set the Teredo refresh interval to\n      the candidate value, and set a new\
    \ candidate value to the minimum\n      of twice the new refresh interval, or\
    \ the average of the refresh\n      interval and the maximum refresh interval.\n\
    \   5) if the candidate has failed, set the maximum refresh interval to\n    \
    \  the candidate value.  If the current refresh interval is larger\n      than\
    \ or equal to 75% of the maximum, the determination procedure\n      has concluded;\
    \ otherwise, set a new candidate value to the average\n      of the refresh interval\
    \ and the maximum refresh interval.\n   6) if the procedure has not concluded,\
    \ perform the maintenance\n      procedure on the secondary port, which will reset\
    \ the date and\n      time of the last interaction on the secondary port, and\
    \ may result\n      in the allocation of a new Teredo secondary IPv6 address;\
    \ this\n      would not affect the values of the refresh interval, candidate\n\
    \      interval, or maximum refresh interval.\n   The secondary port MUST NOT\
    \ be used for any other purpose than the\n   interval determination procedure.\
    \  It should be closed when the\n   procedure ends.\n"
- title: 5.2.8.  Optional Local Client Discovery Procedure
  contents:
  - "5.2.8.  Optional Local Client Discovery Procedure\n   It is desirable to enable\
    \ direct communication between Teredo clients\n   that are located behind the\
    \ same NAT, without forcing a systematic\n   relay through a Teredo server.  It\
    \ is hard to design a general\n   solution to this problem, but we can design\
    \ a partial solution when\n   the Teredo clients are connected through IPv4 to\
    \ the same link.\n   A Teredo client who wishes to enable local discovery SHOULD\
    \ join the\n   IPv4 multicast group identified by Teredo IPv4 Discovery Address.\n\
    \   The client SHOULD wait for discovery bubbles to be received on the\n   Teredo\
    \ IPv4 Discovery Address.  The client SHOULD send local\n   discovery bubbles\
    \ to the Teredo IPv4 Discovery Address at random\n   intervals, uniformly distributed\
    \ between 200 and 300 seconds.  A\n   local Teredo bubble has the following characteristics:\n\
    \   - IPv4 source address: the IPv4 address of the sender\n   - IPv4 destination\
    \ address: the Teredo IPv4 Discovery Address\n   - IPv4 ttl: 1\n   - UDP source\
    \ port: the Teredo service port of the sender\n   - UDP destination port: the\
    \ Teredo UDP port\n   - UDP payload: a minimal IPv6 packet, as follows\n   - IPv6\
    \ source: the global Teredo IPv6 address of the sender\n   - IPv6 destination:\
    \ the all-nodes on-link multicast address\n   - IPv6 payload type: 59 (No Next\
    \ Header, as per [RFC2460])\n   - IPv6 payload length: 0\n   - IPv6 hop limit:\
    \ 1\n   The local discovery procedure carries a denial of service risk, as\n \
    \  malevolent nodes could send fake bubbles to unsuspecting parties, and\n   thus\
    \ capture the traffic originating from these parties.  The risk is\n   mitigated\
    \ by the filtering rules described in Section 5.2.5, and also\n   by \"link only\"\
    \ multicast scope of the Teredo IPv4 Discovery Address,\n   which implies that\
    \ packets sent to this address will not be forwarded\n   across routers.\n   To\
    \ benefit from the \"link only multicast\" protection, the clients\n   should\
    \ silently discard all local discovery bubbles that are received\n   over a unicast\
    \ address.  To further mitigate the denial of service\n   risk, the client MUST\
    \ silently discard all local discovery bubbles\n   whose IPv6 source address is\
    \ not a well-formed Teredo IPv6 address,\n   or whose IPv4 source address does\
    \ not belong to the local IPv4\n   subnet; the client MAY decide to silently discard\
    \ all local discovery\n   bubbles whose Teredo IPv6 address do not include the\
    \ same mapped IPv4\n   address as its own.\n   If the bubble is accepted, the\
    \ client checks whether there is an\n   entry in the list of recent peers that\
    \ correspond to the mapped IPv4\n   address and mapped UDP port associated with\
    \ the source IPv6 address\n   of the bubble.  If there is such an entry, the client\
    \ MUST update the\n   local peer address and local peer port parameters to reflect\
    \ the IPv4\n   source address and UDP source port of the bubble.  If there is\
    \ no\n   entry, the client MUST create one, setting the local peer address and\n\
    \   local peer port parameters to reflect the IPv4 source address and UDP\n  \
    \ source port of the bubble, the last reception date to the current\n   date and\
    \ time, the last transmission date to 30 seconds before the\n   current date,\
    \ and the number of bubbles to zero.  The state of the\n   entry is set to \"\
    not trusted\".\n   Upon reception of a discovery bubble, clients reply with a\
    \ unicast\n   bubble as specified in Section 5.2.3.\n"
- title: 5.2.9.  Direct IPv6 Connectivity Test
  contents:
  - "5.2.9.  Direct IPv6 Connectivity Test\n   The Teredo procedures are designed\
    \ to enable direct connections\n   between a Teredo host and a Teredo relay. \
    \ Teredo hosts located\n   behind a cone NAT will receive packets directly from\
    \ relays; other\n   Teredo hosts will learn the original addresses and UDP ports\
    \ of third\n   parties through the local Teredo server.  In all of these cases,\n\
    \   there is a risk that the IPv6 address of the source will be spoofed\n   by\
    \ a malevolent party.  Teredo hosts must make two decisions, whether\n   to accept\
    \ the packet for local processing and whether to transmit\n   further packets\
    \ to the IPv6 address through the newly\n   learned IPv4 address and UDP port.\
    \  The basic rule is that the hosts\n   should be generous in what they accept\
    \ and careful in what they send.\n   Refusing to accept packets due to spoofing\
    \ concerns would compromise\n   connectivity and should only be done when there\
    \ is a near certainty\n   that the source address is spoofed.  On the other hand,\
    \ sending\n   packets to the wrong address should be avoided.\n   When the client\
    \ wants to send a packet to a native IPv6 node or a\n   6to4 node, it should check\
    \ whether a valid peer entry already exists\n   for the IPv6 address of the destination.\
    \  If this is not the case,\n   the client will pick a random number (a nonce)\
    \ and format an ICMPv6\n   Echo Request message whose source is the local Teredo\
    \ address, whose\n   destination is the address of the IPv6 node, and whose Data\
    \ field is\n   set to the nonce.  (It is recommended to use a random number at\
    \ least\n   64 bits long.)  The nonce value and the date at which the packet was\n\
    \   sent will be documented in a provisional peer entry for the IPV6\n   destination.\
    \  The ICMPv6 packet will then be sent encapsulated in a\n   UDP packet destined\
    \ to the Teredo server IPv4 address and to the\n   Teredo port.  The rules of\
    \ Section 5.2.3 specify how the reply to\n   this packet will be processed.\n"
- title: 5.2.10.  Working around symmetric NAT
  contents:
  - "5.2.10.  Working around symmetric NAT\n   The client procedures are designed\
    \ to enable IPv6 connectivity\n   through the most common types of NAT, which\
    \ are commonly called \"cone\n   NAT\" and \"restricted cone NAT\" [RFC3489].\
    \  Some NATs employ a\n   different design; they are often called \"symmetric\
    \ NAT\".  The\n   qualification algorithm in Section 5.2.1 will not succeed when\
    \ the\n   local NAT is a symmetric NAT.\n   In many cases, it is possible to work\
    \ around the limitations of these\n   NATs by explicitly reserving a UDP port\
    \ for Teredo service on a\n   client, using a function often called \"DMZ\" in\
    \ the NAT's manual.\n   This port will become the \"service port\" used by the\
    \ Teredo hosts.\n   The implementers of Teredo functions in hosts must make sure\
    \ that the\n   value of the service port can be explicitly provisioned, so that\
    \ the\n   user can provision the same value in the host and in the NAT.\n   The\
    \ reservation procedure guarantees that the port mapping will\n   remain the same\
    \ for all destinations.  After the explicit\n   reservation, the qualification\
    \ algorithm in Section 5.2.1 will\n   succeed, and the Teredo client will behave\
    \ as if behind a \"cone NAT\".\n   When different clients use Teredo behind a\
    \ single symmetric NAT, each\n   of these clients must reserve and use a different\
    \ service port.\n"
- title: 5.3.  Teredo Server Specification
  contents:
  - "5.3.  Teredo Server Specification\n   The Teredo server is designed to be stateless.\
    \  The Teredo server\n   waits for incoming UDP packets at the Teredo Port, using\
    \ the IPv4\n   address that has been selected for the service.  In addition, the\n\
    \   server is able to receive and transmit some packets using a different\n  \
    \ IPv4 address and a different port number.\n   The Teredo server acts as an IPv6\
    \ router.  As such, it will receive\n   Router Solicitation messages, to which\
    \ it will respond with Router\n   Advertisement messages as explained in Section\
    \ 5.3.2.  It may also\n   receive other packets, for example, ICMPv6 messages\
    \ and Teredo\n   bubbles, which are processed according to the IPv6 specification.\n\
    \   By default, the routing functions of the Teredo server are limited.\n   Teredo\
    \ servers are expected to relay Teredo bubbles, ICMPv6 Echo\n   requests, and\
    \ ICMPv6 Echo replies, but they are not expected to relay\n   other types of IPv6\
    \ packets.  Operators may, however, decide to\n   combine the functions of \"\
    Teredo server\" and \"Teredo relay\", as\n   explained in Section 5.4.\n"
- title: 5.3.1.  Processing of Teredo IPv6 Packets
  contents:
  - "5.3.1.  Processing of Teredo IPv6 Packets\n   Before processing the packet, the\
    \ Teredo server MUST check the\n   validity of the encapsulated IPv6 source address,\
    \ the IPv4 source\n   address, and the UDP source port:\n   1)  If the UDP content\
    \ is not a well-formed Teredo IPv6 packet, as\n   defined in Section 5.1.1, the\
    \ packet MUST be silently discarded.\n   2)  If the UDP packet is not a Teredo\
    \ bubble or an ICMPv6 message, it\n   SHOULD be discarded.  (The packet may be\
    \ processed if the Teredo\n   server also operates as a Teredo relay, as explained\
    \ in Section 5.4.)\n   3)  If the IPv4 source address is not in the format of\
    \ a global\n   unicast address, the packet MUST be silently discarded (see Section\n\
    \   5.2.4 for a definition of global unicast addresses).\n   4)  If the IPv6 source\
    \ address is an IPv6 link-local address, the\n   IPv6 destination address is the\
    \ link-local scope all routers\n   multicast address (FF02::2), and the packet\
    \ contains an ICMPv6 Router\n   Solicitation message, the packet MUST be accepted.\
    \  It MUST be\n   discarded if the server requires secure qualification and the\n\
    \   authentication encapsulation is absent or verification fails.\n   5)  If the\
    \ IPv6 source address is a Teredo IPv6 address, and if the\n   IPv4 address and\
    \ UDP port embedded in that address match the IPv4\n   source address and UDP\
    \ source port, the packet SHOULD be accepted.\n   6)  If the IPv6 source address\
    \ is not a Teredo IPv6 address, and if\n   the IPv6 destination address is a Teredo\
    \ address allocated through\n   this server, the packet SHOULD be accepted.\n\
    \   7)  In all other cases, the packet MUST be silently discarded.\n   The Teredo\
    \ server will then check the IPv6 destination address of the\n   encapsulated\
    \ IPv6 packet:\n   If the IPv6 destination address is the link-local scope all\
    \ routers\n   multicast address (FF02::2), or the link-local address of the server,\n\
    \   the Teredo server processes the packet; it may have to process Router\n  \
    \ Solicitation messages and ICMPv6 Echo Request messages.\n   If the destination\
    \ IPv6 address is not a global scope IPv6 address,\n   the packet MUST NOT be\
    \ forwarded.\n   If the destination address is not a Teredo IPv6 address, the\
    \ packet\n   should be relayed to the IPv6 Internet using regular IPv6 routing.\n\
    \   If the IPv6 destination address is a valid Teredo IPv6 address as\n   defined\
    \ in Section 2.13, the Teredo Server MUST check that the IPv4\n   address derived\
    \ from this IPv6 address is in the format of a global\n   unicast address; if\
    \ this is not the case, the packet MUST be silently\n   discarded.\n   If the\
    \ address is valid, the Teredo server encapsulates the IPv6\n   packet in a new\
    \ UDP datagram, in which the following parameters are\n   set:\n   - The destination\
    \ IPv4 address is derived from the IPv6 destination.\n   - The source IPv4 address\
    \ is the Teredo server IPv4 address.\n   - The destination UDP port is derived\
    \ from the IPv6 destination.\n   - The source UDP port is set to the Teredo UDP\
    \ Port.\n   If the destination IPv6 address is a Teredo client whose address is\n\
    \   serviced by this specific server, the server should insert an origin\n   indication\
    \ in the first bytes of the UDP payload, as specified in\n   Section 5.1.1.  (To\
    \ verify that the client is served by this server,\n   the server compares bits\
    \ 32-63 of the client's Teredo IPv6 address to\n   the server's IPv4 address.)\n"
- title: 5.3.2.  Processing of Router Solicitations
  contents:
  - "5.3.2.  Processing of Router Solicitations\n   When the Teredo server receives\
    \ a Router Solicitation message (RS,\n   [RFC2461]), it retains the IPv4 address\
    \ and UDP port from which the\n   solicitation was received; these become the\
    \ Teredo mapped address and\n   Teredo mapped port of the client.  The router\
    \ uses these values to\n   compose the origin indication encapsulation that will\
    \ be sent with\n   the response to the solicitation.\n   The Teredo server responds\
    \ to the router solicitation by sending a\n   Router Advertisement message [RFC2461].\
    \  The router advertisement\n   MUST advertise the Teredo IPv6 prefix composed\
    \ from the service\n   prefix and the server's IPv4 address.  The IPv6 source\
    \ address should\n   be set to a Teredo link-local server address associated to\
    \ the local\n   interface; this address is derived from the IPv4 address of the\n\
    \   server and from the Teredo port, as specified in Section 4; the cone\n   bit\
    \ is set to 1.  The IPv6 destination address is set to the IPv6\n   source address\
    \ of the RS.  The Router Advertisement message must be\n   sent over UDP to the\
    \ Teredo mapped address and Teredo mapped port of\n   the client; the IPv4 source\
    \ address and UDP source port should be set\n   to the server's IPv4 address and\
    \ Teredo Port.  If the cone bit of the\n   client's IPv6 address is set to 1,\
    \ the RA must be sent from a\n   different IPv4 source address than the server\
    \ address over which the\n   RS was received; if the cone bit is set to zero,\
    \ the response must be\n   sent back from the same address.\n   Before sending\
    \ the packet, the Teredo server MUST check that the IPv4\n   destination address\
    \ is in the format of a global unicast address; if\n   this is not the case, the\
    \ packet MUST be silently discarded (see\n   Section 5.2.4 for a definition of\
    \ global unicast addresses).\n   If secure qualification is required, the server\
    \ MUST insert a valid\n   authentication parameter in the UDP packet carrying\
    \ the router\n   advertisement.  The client identifier and the nonce value used\
    \ in the\n   authentication parameter MUST be the same identifier and nonce as\n\
    \   received in the router solicitation.  The confirmation byte MUST be\n   set\
    \ to zero if the client identifier is still valid, and a non-null\n   value otherwise;\
    \ the authentication value SHOULD be computed using\n   the secret that corresponds\
    \ to the client identifier.\n"
- title: 5.4.  Teredo Relay Specification
  contents:
  - "5.4.  Teredo Relay Specification\n   Teredo relays are IPv6 routers that advertise\
    \ reachability of the\n   Teredo service IPv6 prefix through the IPv6 routing\
    \ protocols.  (A\n   minimal Teredo relay may serve just a local host, and would\
    \ not\n   advertise the prefix beyond this host.)  Teredo relays will receive\n\
    \   IPv6 packets bound to Teredo clients.  Teredo relays should be able\n   to\
    \ receive packets sent over IPv4 and UDP by Teredo clients; they may\n   apply\
    \ filtering rules, e.g., only accept packets from Teredo clients\n   if they have\
    \ previously sent traffic to these Teredo clients.\n   The receiving and sending\
    \ rules used by Teredo relays are very\n   similar to those of Teredo clients.\
    \  Teredo relays must use a Teredo\n   service port to transmit packets to Teredo\
    \ clients; they must\n   maintain a \"list of peers\", identical to the list of\
    \ peers maintained\n   by Teredo clients.\n"
- title: 5.4.1.  Transmission by Relays to Teredo Clients
  contents:
  - "5.4.1.  Transmission by Relays to Teredo Clients\n   When a Teredo relay has\
    \ to transmit a packet to a Teredo client, it\n   examines the destination IPv6\
    \ address.  By definition, the Teredo\n   relays will only send over UDP IPv6\
    \ packets whose IPv6 destination\n   address is a valid Teredo IPv6 address.\n\
    \   Before processing these packets, the Teredo Relay MUST check that the\n  \
    \ IPv4 destination address embedded in the Teredo IPv6 address is in\n   the format\
    \ of a global unicast address; if this is not the case, the\n   packet MUST be\
    \ silently discarded (see Section 5.2.4 for a definition\n   of global unicast\
    \ addresses).\n   The relay then checks if there is an entry for this IPv6 address\
    \ in\n   the list of recent Teredo peers, and if the entry is still valid.\n \
    \  The relay then performs the following:\n   1) If there is an entry for that\
    \ IPv6 address in the list of peers,\n   and if the status of the entry is set\
    \ to \"trusted\", the IPv6 packet\n   should be sent over UDP to the mapped IPv4\
    \ address and mapped UDP\n   port of the entry.  The relay updates the date of\
    \ last transmission\n   in the peer entry.\n   2) If there is no trusted entry\
    \ in the list of peers, and if the\n   destination is a Teredo IPv6 address in\
    \ which the cone bit is set to\n   1, the packet is sent over UDP to the mapped\
    \ IPv4 address and mapped\n   UDP port extracted from that IPv6 address.\n   3)\
    \ If there is no trusted entry in the list of peers, and if the\n   destination\
    \ is a Teredo IPv6 address in which the cone bit is set to\n   0, the Teredo relay\
    \ creates a bubble whose source address is set to a\n   local IPv6 address, and\
    \ whose destination address is set to the\n   Teredo IPv6 address of the packet's\
    \ destination.  The bubble is sent\n   to the server address corresponding to\
    \ the Teredo destination.  The\n   entry becomes trusted when a bubble or another\
    \ packet is received\n   from this IPv6 address; if no such packet is received\
    \ before a time-\n   out of 2 seconds, the Teredo relay may repeat the bubble,\
    \ up to three\n   times.  If the relay fails to receive a bubble after these\n\
    \   repetitions, the entry is removed from the list of peers.  The relay\n   MAY\
    \ queue packets bound to untrusted entries; the queued packets\n   SHOULD be de-queued\
    \ and forwarded when the entry becomes trusted;\n   they SHOULD be deleted if\
    \ the entry is deleted.  To avoid denial of\n   service attacks, the relays SHOULD\
    \ limit the number of packets in\n   such queues.\n   In cases 2 and 3, the Teredo\
    \ relay should create a peer entry for the\n   IPv6 address; the entry status\
    \ is marked as trusted in case 2 (cone\n   NAT) and not trusted in case 3.  In\
    \ case 3, if the Teredo relay\n   happens to be located behind a non-cone NAT,\
    \ it should also send a\n   bubble directly to the mapped IPv4 address and mapped\
    \ port number of\n   the Teredo destination.  This will \"open the path\" for\
    \ the return\n   bubble from the Teredo client.\n   For reliability reasons, relays\
    \ MAY decide to ignore the value of the\n   cone bit in the flag, and always perform\
    \ the \"case 3\", i.e., treat\n   all Teredo peers as if they were located behind\
    \ a non-cone NAT.  This\n   will result in some increase in traffic, but may avoid\n\
    \   reliability issues if the determination of the NAT status was for\n   some\
    \ reason erroneous.  For the same reason, relays MAY also decide\n   to always\
    \ send a direct bubble to the mapped IPv4 address and mapped\n   port number of\
    \ the Teredo destination, even if they do not believe\n   that they are located\
    \ behind a non-cone NAT.\n"
- title: 5.4.2.  Reception from Teredo Clients
  contents:
  - "5.4.2.  Reception from Teredo Clients\n   The Teredo relay may receive packets\
    \ from Teredo clients; the packets\n   should normally only be sent by clients\
    \ to which the relay previously\n   transmitted packets, i.e., clients whose IPv6\
    \ address is present in\n   the list of peers.  Relays, like clients, use the\
    \ packet reception\n   procedure to maintain the date and time of the last interaction\
    \ with\n   the Teredo server and the \"list of recent peers\".\n   When a UDP\
    \ packet is received over the Teredo service port, the\n   Teredo relay checks\
    \ that it contains a valid IPv6 packet as specified\n   in [RFC2460].  If this\
    \ is not the case, the packet is silently\n   discarded.\n   Then, the Teredo\
    \ relay examines whether the IPv6 source address is a\n   valid Teredo address,\
    \ and if the mapped IPv4 address and mapped port\n   match the IPv4 source address\
    \ and port number from which the packet\n   is received.  If this is not the case,\
    \ the packet is silently\n   discarded.\n   The Teredo relay then examines whether\
    \ there is an entry for the IPv6\n   source address in the list of recent peers.\
    \  If this is not the case,\n   the packet may be silently discarded.  If this\
    \ is the case, the entry\n   status is set to \"trusted\"; the relay updates the\
    \ \"date and time of\n   the last interaction\" to the current date and time.\n\
    \   Finally, the relay examines the destination IPv6 address.  If the\n   destination\
    \ belongs to a range of IPv6 addresses served by the relay,\n   the packet SHOULD\
    \ be accepted and forwarded to the destination.  In\n   the other cases, the packet\
    \ SHOULD be silently discarded.\n"
- title: 5.4.3.  Difference between Teredo Relays and Teredo Servers
  contents:
  - "5.4.3.  Difference between Teredo Relays and Teredo Servers\n   Because Teredo\
    \ servers can relay Teredo packets over IPv6, all Teredo\n   servers must be capable\
    \ of behaving as Teredo relays.  There is,\n   however, no requirement that Teredo\
    \ relays behave as Teredo servers.\n   The dual role of server and relays implies\
    \ an additional complexity\n   for the programming of servers: the processing\
    \ of incoming packets\n   should be a combination of the server processing rules\
    \ defined in\n   Section 5.3.1, and the relay processing rules defined in Section\n\
    \   5.4.2.  (Section 5.3 only specifies the rules implemented by a pure\n   server,\
    \ not a combination relay+server.)\n"
- title: 5.5.  Implementation of Automatic Sunset
  contents:
  - "5.5.  Implementation of Automatic Sunset\n   Teredo is designed as an interim\
    \ transition mechanism, and it is\n   important that it should not be used any\
    \ longer than necessary.  The\n   \"sunset\" procedure will be implemented by\
    \ Teredo clients, servers,\n   and relays, as specified in this section.\n   The\
    \ Teredo-capable nodes MUST NOT behave as Teredo clients if they\n   already have\
    \ IPv6 connectivity through any other means, such as\n   native IPv6 connectivity.\
    \  In particular, nodes that have a global\n   IPv4 address SHOULD obtain connectivity\
    \ through the 6to4 service\n   rather than through the Teredo service.  The classic\
    \ reason why a\n   node that does not need connectivity would still enable the\
    \ Teredo\n   service is to guarantee good performance when interacting with Teredo\n\
    \   clients; however, a Teredo-capable node that has IPv4 connectivity\n   and\
    \ that has obtained IPv6 connectivity outside the Teredo service\n   MAY decide\
    \ to behave as a Teredo relay, and still obtain good\n   performance when interacting\
    \ with Teredo clients.\n   The Teredo servers are expected to participate in the\
    \ sunset\n   procedure by announcing a date at which they will stop providing\
    \ the\n   service.  This date depends on the availability of alternative\n   solutions\
    \ to their clients, such as \"dual-mode\" gateways that behave\n   simultaneously\
    \ as IPv4 NATs and IPv6 routers.  Most Teredo servers\n   will not be expected\
    \ to operate more than a few years.  Teredo relays\n   are expected to have the\
    \ same life span as Teredo servers.\n"
- title: 6.  Further Study, Use of Teredo to Implement a Tunnel Service
  contents:
  - "6.  Further Study, Use of Teredo to Implement a Tunnel Service\n   Teredo defines\
    \ a NAT traversal solution that can be provided using\n   very little resource\
    \ at the server.  Ongoing IETF discussions have\n   outlined the need for both\
    \ a solution like Teredo and a more\n   controlled NAT traversal solution, using\
    \ configured tunnels to a\n   service provider [RFC3904].  This section provides\
    \ a tentative\n   analysis of how Teredo could be extended to also support a configured\n\
    \   tunnel service.\n   It may be possible to design a tunnel server protocol\
    \ that is\n   compatible with Teredo, in the sense that the same client could\
    \ be\n   used either in the Teredo service or with a tunnel service.  In fact,\n\
    \   this could be done by configuring the client with:\n   - The IPv4 address\
    \ of a Teredo server that acts as a tunnel broker\n   - A client identifier\n\
    \   - A shared secret with that server\n   - An agreed-upon authentication algorithm.\n\
    \   The Teredo client would use the secure qualification procedure, as\n   specified\
    \ in Section 5.2.2. Instead of returning a Teredo prefix in\n   the router advertisement,\
    \ the server would return a globally routable\n   IPv6 prefix; this prefix could\
    \ be permanently assigned to the client,\n   which would provide the client with\
    \ a stable address.  The server\n   would have to keep state, i.e., memorize the\
    \ association between the\n   prefix assigned to the client and the mapped IPv4\
    \ address and mapped\n   UDP port of the client.\n   The Teredo server would advertise\
    \ reachability of the client prefix\n   to the IPv6 Internet.  Any packet bound\
    \ to that prefix would be\n   transmitted to the mapped IPv4 address and mapped\
    \ UDP port of the\n   client.\n   The Teredo client, when it receives the prefix,\
    \ would notice that\n   this prefix is a global IPv6 prefix, not in the form of\
    \ a Teredo\n   prefix.  The client would at that point recognize that it should\n\
    \   operate in tunnel mode.  A client that operates in tunnel mode would\n   execute\
    \ a much simpler transmission procedure: it would forward any\n   packet sent\
    \ to the Teredo interface to the IPv4 address and Teredo\n   UDP port of the server.\n\
    \   The Teredo client would have to perform the maintenance procedure\n   described\
    \ in Section 5.2.5. The server would receive the router\n   solicitation, and\
    \ could notice a possible change of mapped IPv4\n   address and mapped UDP port\
    \ that could result from the\n   reconfiguration of the mappings inside the NAT.\
    \  The server should\n   continue advertising the same IPv6 prefix to the client,\
    \ and should\n   update the mapped IPv4 address and mapped UDP port associated\
    \ to this\n   prefix, if necessary.\n   There is as yet no consensus that a tunnel-mode\
    \ extension to Teredo\n   should be developed.  This section is only intended\
    \ to provide\n   suggestions to the future developers of such services.  Many\
    \ details\n   would probably have to be worked out before a tunnel-mode extension\n\
    \   would be agreed upon.\n"
- title: 7.  Security Considerations
  contents:
  - "7.  Security Considerations\n   The main objective of Teredo is to provide nodes\
    \ located behind a NAT\n   with a globally routable IPv6 address.  The Teredo\
    \ nodes can use IP\n   security (IPsec) services such as Internet Key Exchange\
    \ (IKE),\n   Authentication Header (AH), or Encapsulation Security Payload (ESP)\n\
    \   [RFC4306, RFC4302, RFC4303], without the configuration restrictions\n   still\
    \ present in \"Negotiation of NAT-Traversal in the IKE\" [RFC3947].\n   As such,\
    \ we can argue that the service has a positive effect on\n   network security.\
    \  However, the security analysis must also envisage\n   the negative effects\
    \ of the Teredo services, which we can group in\n   four categories: security\
    \ risks of directly connecting a node to the\n   IPv6 Internet, spoofing of Teredo\
    \ servers to enable a man-in-the-\n   middle attack, potential attacks aimed at\
    \ denying the Teredo service\n   to a Teredo client, and denial of service attacks\
    \ against non-Teredo\n   participating nodes that would be enabled by the Teredo\
    \ service.\n   In the following, we review in detail these four types of issues,\
    \ and\n   we present mitigating strategies for each of them.\n"
- title: 7.1.  Opening a Hole in the NAT
  contents:
  - "7.1.  Opening a Hole in the NAT\n   The very purpose of the Teredo service is\
    \ to make a machine reachable\n   through IPv6.  By definition, the machine using\
    \ the service will give\n   up whatever firewall service was available in the\
    \ NAT box, however\n   limited this service may be [RFC2993].  The services that\
    \ listen to\n   the Teredo IPv6 address will become the potential target of attacks\n\
    \   from the entire IPv6 Internet.  This may sound scary, but there are\n   three\
    \ mitigating factors.\n   The first mitigating factor is the possibility to restrict\
    \ some\n   services to only accept traffic from local neighbors, e.g., using\n\
    \   link-local addresses.  Teredo does not support communication using\n   link-local\
    \ addresses.  This implies that link-local services will not\n   be accessed through\
    \ Teredo, and will be restricted to whatever other\n   IPv6 connectivity may be\
    \ available, e.g., direct traffic with\n   neighbors on the local link, behind\
    \ the NAT.\n   The second mitigating factor is the possible use of a \"local\n\
    \   firewall\" solution, i.e., a piece of software that performs locally\n   the\
    \ kind of inspection and filtering that is otherwise performed in a\n   perimeter\
    \ firewall.  Using such software is recommended.\n   The third mitigating factor\
    \ is the availability of IP security\n   (IPsec) services such as IKE, AH, or\
    \ ESP [RFC4306, RFC4302, RFC4303].\n   Using these services in conjunction with\
    \ Teredo is a good policy, as\n   it will protect the client from possible attacks\
    \ in intermediate\n   servers such as the NAT, the Teredo server, or the Teredo\
    \ relay.\n   (However, these services can be used only if the parties in the\n\
    \   communication can negotiate a key, which requires agreeing on some\n   credentials;\
    \ this is known to be a hard problem.)\n"
- title: 7.2.  Using the Teredo Service for a Man-in-the-Middle Attack
  contents:
  - "7.2.  Using the Teredo Service for a Man-in-the-Middle Attack\n   The goal of\
    \ the Teredo service is to provide hosts located behind a\n   NAT with a globally\
    \ reachable IPv6 address.  There is a possible\n   class of attacks against this\
    \ service in which an attacker somehow\n   intercepts the router solicitation,\
    \ responds with a spoofed router\n   advertisement, and provides a Teredo client\
    \ with an incorrect\n   address.  The attacker may have one of two objectives:\
    \ it may try to\n   deny service to the Teredo client by providing it with an\
    \ address\n   that is in fact unreachable, or it may try to insert itself as a\n\
    \   relay for all client communications, effectively enabling a variety\n   of\
    \ \"man-in-the-middle\" attack.\n"
- title: 7.2.1.  Attacker Spoofing the Teredo Server
  contents:
  - "7.2.1.  Attacker Spoofing the Teredo Server\n   The simple nonce verification\
    \ procedure described in Section 5.2.2\n   provides a first level of protection\
    \ against attacks in which a third\n   party tries to spoof the server.  In practice,\
    \ the nonce procedure\n   can be defeated only if the attacker is \"on path\"\
    .\n   If client and server share a secret and agree on an authentication\n   algorithm,\
    \ the secure qualification procedure described in Section\n   5.2.2 provides further\
    \ protection.  To defeat this protection, the\n   attacker could try to obtain\
    \ a copy of the secret shared between\n   client and server.  The most likely\
    \ way to obtain the shared secret\n   is to listen to the traffic and mount an\
    \ offline dictionary attack;\n   to protect against this attack, the secret shared\
    \ between client and\n   server should contain sufficient entropy.  (This probably\
    \ requires\n   some automated procedure for provisioning the shared secret and\
    \ the\n   algorithm.)\n   If the shared secret contains sufficient entropy, the\
    \ attacker would\n   have to defeat the one-way function used to compute the\n\
    \   authentication value.  This specification suggests a default\n   algorithm\
    \ combining HMAC and MD5.  If the protection afforded by MD5\n   was not deemed\
    \ sufficient, clients and servers can agree to use a\n   different algorithm,\
    \ e.g., SHA1.\n   Another way to defeat the protection afforded by the authentication\n\
    \   procedure is to mount a complex attack, as follows:\n   1) Client prepares\
    \ router solicitation, including authentication\n   encapsulation.\n   2) Attacker\
    \ intercepts the solicitation, and somehow manages to\n   prevent it from reaching\
    \ the server, for example, by mounting a\n   short-duration DoS attack against\
    \ the server.\n   3) Attacker replaces the source IPv4 address and source UDP\
    \ port of\n   the request by one of its own addresses and port, and forwards the\n\
    \   modified request to the server.\n   4) Server dutifully notes the IPv4 address\
    \ from which the packet is\n   received, verifies that the Authentication encapsulation\
    \ is correct,\n   prepares a router advertisement, signs it, and sends it back\
    \ to the\n   incoming address, i.e., the attacker.\n   5) Attacker receives the\
    \ advertisement, takes note of the mapping,\n   replaces the IPv4 address and\
    \ UDP port by the original values in the\n   intercepted message, and sends the\
    \ response to the client.\n   6) Client receives the advertisement, notes that\
    \ the authentication\n   header is present and is correct, and uses the proposed\
    \ prefix and\n   the mapped addresses in the origin indication encapsulation.\n\
    \   The root cause of the problem is that the NAT is, in itself, a man-\n   in-the-middle\
    \ attack.  The Authentication encapsulation covers the\n   encapsulated IPv6 packet,\
    \ but does not cover the encapsulating IPv4\n   header and UDP header.  It is\
    \ very hard to devise an effective\n   authentication scheme, since the attacker\
    \ does not do anything else\n   than what the NAT legally does!\n   However, there\
    \ are several mitigating factors that lead us to avoid\n   worrying too much about\
    \ this attack.  In practice, the gain from the\n   attack is either to deny service\
    \ to the client or to obtain a \"man-\n   in-the-middle\" position.  However,\
    \ in order to mount the attack, the\n   attacker must be able to suppress traffic\
    \ originating from the\n   client, i.e., have denial of service capability; the\
    \ attacker must\n   also be able to observe the traffic exchanged between client\
    \ and\n   inject its own traffic in the mix, i.e., have man-in-the-middle\n  \
    \ capacity.  In summary, the attack is very hard to mount, and the gain\n   for\
    \ the attacker in terms of \"elevation of privilege\" is minimal.\n   A similar\
    \ attack is described in detail in the security section of\n   [RFC3489].\n"
- title: 7.2.2.  Attacker Spoofing a Teredo Relay
  contents:
  - "7.2.2.  Attacker Spoofing a Teredo Relay\n   An attacker may try to use Teredo\
    \ either to pass itself for another\n   IPv6 host or to place itself as a man-in-the-middle\
    \ between a Teredo\n   host and a native IPv6 host.  The attacker will mount such\
    \ attacks by\n   spoofing a Teredo relay, i.e., by convincing the Teredo host\
    \ that\n   packets bound to the native IPv6 host should be relayed to the IPv4\n\
    \   address of the attacker.\n   The possibility of the attack derives from the\
    \ lack of any\n   algorithmic relation between the IPv4 address of a relay and\
    \ the\n   native IPv6 addresses served by these relay.  A Teredo host cannot\n\
    \   decide just by looking at the encapsulating IPv4 and UDP header\n   whether\
    \ or not a relay is legitimate.  If a Teredo host decided to\n   simply trust\
    \ the incoming traffic, it would easily fall prey to a\n   relay-spoofing attack.\n\
    \   The attack is mitigated by the \"direct IPv6 connectivity test\"\n   specified\
    \ in Section 5.2.9. The test specifies a relay discovery\n   procedure secured\
    \ by a nonce.  The nonce is transmitted from the\n   Teredo host to the destination\
    \ through Teredo server, which the\n   client normally trusts.  The response arrives\
    \ through the \"natural\"\n   relay, i.e., the relay closest to the IPv6 destination.\
    \  Sending\n   traffic to this relay will place it out of reach of attackers that\n\
    \   are not on the direct path between the Teredo host and its IPv6 peer.\n  \
    \ End-to-end security protections are required to defend against\n   spoofing\
    \ attacks if the attacker is on the direct path between the\n   Teredo host and\
    \ its peer.\n"
- title: 7.2.3.  End-to-End Security
  contents:
  - "7.2.3.  End-to-End Security\n   The most effective line of defense of a Teredo\
    \ client is probably not\n   to try to secure the Teredo service itself: even\
    \ if the mapping can\n   be securely obtained, the attacker would still be able\
    \ to listen to\n   the traffic and send spoofed packets.  Rather, the Teredo client\n\
    \   should realize that, because it is located behind a NAT, it is in a\n   situation\
    \ of vulnerability; it should systematically try to encrypt\n   its IPv6 traffic,\
    \ using IPsec.  Even if the IPv4 and UDP headers are\n   vulnerable, the use of\
    \ IPsec will effectively prevent spoofing and\n   listening of the IPv6 packets\
    \ by third parties.  By providing each\n   client with a global IPv6 address,\
    \ Teredo enables the use of IPsec\n   without the configuration restrictions still\
    \ present in \"Negotiation\n   of NAT-Traversal in the IKE\" [RFC3947] and ultimately\
    \ enhances the\n   security of these clients.\n"
- title: 7.3.  Denial of the Teredo service
  contents:
  - "7.3.  Denial of the Teredo service\n   Our analysis outlines five ways to attack\
    \ the Teredo service.  There\n   are countermeasures for each of these attacks.\n"
- title: 7.3.1.  Denial of Service by a Rogue Relay
  contents:
  - "7.3.1.  Denial of Service by a Rogue Relay\n   An attack can be mounted on the\
    \ IPv6 side of the service by setting\n   up a rogue relay and letting that relay\
    \ advertise a route to the\n   Teredo IPv6 prefix.  This is an attack against\
    \ IPv6 routing, which\n   can also be mitigated by the same kind of procedures\
    \ used to\n   eliminate spurious route advertisements.  Dual-stack nodes that\n\
    \   implement \"host local\" Teredo relays are impervious to this attack.\n"
- title: 7.3.2.  Denial of Service by Server Spoofing
  contents:
  - "7.3.2.  Denial of Service by Server Spoofing\n   In Section 7.2, we discussed\
    \ the use of spoofed router advertisements\n   to insert an attacker in the middle\
    \ of a Teredo conversation.  The\n   spoofed router advertisements can also be\
    \ used to provision a client\n   with an incorrect address, pointing to either\
    \ a non-existing IPv4\n   address or the IPv4 address of a third party.\n   The\
    \ Teredo client will detect the attack when it fails to receive\n   traffic through\
    \ the newly acquired IPv6 address.  The attack can be\n   mitigated by using the\
    \ authentication encapsulation.\n"
- title: 7.3.3.  Denial of Service by Exceeding the Number of Peers
  contents:
  - "7.3.3.  Denial of Service by Exceeding the Number of Peers\n   A Teredo client\
    \ manages a cache of recently used peers, which makes\n   it stateful.  It is\
    \ possible to mount an attack against the client by\n   provoking it to respond\
    \ to packets that appear to come from a large\n   number of Teredo peers, thus\
    \ trashing the cache and effectively\n   denying the use of direct communication\
    \ between peers.  The effect\n   will last only as long as the attack is sustained.\n"
- title: 7.3.4.  Attacks against the Local Discovery Procedure
  contents:
  - "7.3.4.  Attacks against the Local Discovery Procedure\n   There is a possible\
    \ denial of service attack against the local peer\n   discovery procedure, if\
    \ attackers can manage to send spoofed local\n   discovery bubbles to a Teredo\
    \ client.  The checks described in\n   Section 5.2.8 mitigate this attack.  Clients\
    \ who are more interested\n   in security than in performance could decide to\
    \ disable the local\n   discovery procedure; however, if local discovery is disabled,\
    \ traffic\n   between local nodes will end up being relayed through a server\n\
    \   external to the local network, which has questionable security\n   implications.\n"
- title: 7.3.5.  Attacking the Teredo Servers and Relays
  contents:
  - "7.3.5.  Attacking the Teredo Servers and Relays\n   It is possible to mount a\
    \ brute force denial of service attack\n   against the Teredo servers by sending\
    \ them a very large number of\n   packets.  This attack will have to be brute\
    \ force, since the servers\n   are stateless, and can be designed to process all\
    \ the packets that\n   are sent on their access line.\n   The brute force attack\
    \ against the Teredo servers is mitigated if\n   clients are ready to \"failover\"\
    \ to another server.  Bringing down the\n   servers will, however, force the clients\
    \ that change servers to\n   renumber their Teredo address.\n   It is also possible\
    \ to mount a brute force attack against a Teredo\n   relay.  This attack is mitigated\
    \ if the relay under attack stops\n   announcing the reachability of the Teredo\
    \ service prefix to the IPv6\n   network: the traffic will be picked up by the\
    \ next relay.\n   An attack similar to that described in Section 7.3.2 can be\
    \ mounted\n   against a relay.  An IPv6 host can send IPv6 packets to a large\n\
    \   number of Teredo destinations, forcing the relay to establish state\n   for\
    \ each of these destinations.  Teredo relays can obtain some\n   protection by\
    \ limiting the range of IPv6 clients that they serve, and\n   by limiting the\
    \ amount of state used for \"new\" peers.\n"
- title: 7.4.  Denial of Service against Non-Teredo Nodes
  contents:
  - "7.4.  Denial of Service against Non-Teredo Nodes\n   There is a widely expressed\
    \ concern that transition mechanisms such\n   as Teredo can be used to mount denial\
    \ of service attacks, by\n   injecting traffic at locations where it is not expected.\
    \  These\n   attacks fall in three categories: using the Teredo servers as a\n\
    \   reflector in a denial of service attack, using the Teredo server to\n   carry\
    \ a denial of service attack against IPv6 nodes, and using the\n   Teredo relays\
    \ to carry a denial of service attack against IPv4 nodes.\n   The analysis of\
    \ these attacks follows.  A common mitigating factor in\n   all cases is the \"\
    regularity\" of the Teredo traffic, which contains\n   highly specific patterns\
    \ such as the Teredo UDP port, or the Teredo\n   IPv6 prefix.  In case of attacks,\
    \ these patterns can be used to\n   quickly install filters and remove the offending\
    \ traffic.\n   We should also note that none of the listed possibilities offer\
    \ any\n   noticeable amplification.\n"
- title: 7.4.1.  Laundering DoS attacks from IPv4 to IPv4
  contents:
  - "7.4.1.  Laundering DoS attacks from IPv4 to IPv4\n   An attacker can use the\
    \ Teredo servers as reflectors in a denial of\n   service attack aimed at an IPv4\
    \ target.  The attacker can do this in\n   one of two ways.  The first way is\
    \ to construct a Router Solicitation\n   message and post it to a Teredo server,\
    \ using as IPv4 source address\n   the spoofed address of the target; the Teredo\
    \ server will then send a\n   Router advertisement message to the target.  The\
    \ second way is to\n   construct a Teredo IPv6 address using the Teredo prefix,\
    \ the address\n   of a selected server, the IPv4 of the target, and an arbitrary\
    \ UDP\n   port, and to then send packets bound to that address to the selected\n\
    \   Teredo server.\n   Reflector attacks are discussed in [REFLECT], which outlines\
    \ various\n   mitigating techniques against such attacks.  One of these mitigations\n\
    \   is to observe that \"the traffic generated by the reflectors [has]\n   sufficient\
    \ regularity and semantics that it can be filtered out near\n   the victim without\
    \ the filtering itself constituting a denial-of-\n   service to the victim ('collateral\
    \ damage')\".  The traffic reflected\n   by the Teredo servers meets this condition:\
    \ it is clearly\n   recognizable, since it originates from the Teredo UDP port;\
    \ it can be\n   filtered out safely if the target itself is not a Teredo user.\
    \  In\n   addition, the packets relayed by servers will carry an Origin\n   indication\
    \ encapsulation, which will help determine the source of the\n   attack.\n"
- title: 7.4.2.  DoS Attacks from IPv4 to IPv6
  contents:
  - "7.4.2.  DoS Attacks from IPv4 to IPv6\n   An attacker may use the Teredo servers\
    \ to launch a denial of service\n   attack against an arbitrary IPv6 destination.\
    \  The attacker will\n   build an IPv6 packet bound for the target and will send\
    \ that packet\n   to the IPv4 address and UDP port of a Teredo server, to be relayed\n\
    \   from there to the target over IPv6.\n   The address checks specified in Section\
    \ 5.3.1 provide some protection\n   against this attack, as they ensure that the\
    \ IPv6 source address will\n   be consistent with the IPv4 source address and\
    \ UDP source port used\n   by the attacker: if the attacker cannot spoof the IPv4\
    \ source\n   address, the target will be able to determine the origin of the\n\
    \   attack.\n   The address checks ensure that the IPv6 source address of packets\n\
    \   forwarded by servers will start with the IPv6 Teredo prefix.  This is\n  \
    \ a mitigating factor, as sites under attack could use this to filter\n   out\
    \ all packets sourced from that prefix during an attack.  This will\n   result\
    \ in a partial loss of service, as the target will not be able\n   to communicate\
    \ with legitimate Teredo hosts that use the same prefix.\n   However, the communication\
    \ with other IPv6 hosts will remain\n   unaffected, and the communication with\
    \ Teredo hosts will be able to\n   resume when the attack has ceased.\n"
- title: 7.4.3.  DoS Attacks from IPv6 to IPv4
  contents:
  - "7.4.3.  DoS Attacks from IPv6 to IPv4\n   An attacker with IPv6 connectivity\
    \ may use the Teredo relays to\n   launch a denial of service attack against an\
    \ arbitrary IPv4\n   destination.  The attacker will compose a Teredo IPv6 address\
    \ using\n   the Teredo prefix, a \"cone\" flag set to 1, the IPv4 address of the\n\
    \   target, and an arbitrary UDP port.\n   In the simplest variation of this attack,\
    \ the attacker sends IPv6\n   packets to the Teredo destination using regular\
    \ IPv6 routing.  The\n   packets are picked by the nearest relay, which will forward\
    \ them to\n   the IPv4 address of the target.  In a more elaborate variant, the\n\
    \   attacker tricks a Teredo into sending packets to the target, either\n   by\
    \ sending a first packet with a spoofed IPv6 address and letting the\n   Teredo\
    \ host reply or by publishing a spoofed IPv6 address in a name\n   service.\n\
    \   There are three types of IPv4 addresses that an attacker may embed in\n  \
    \ the spoofed Teredo address.  It may embed a multicast or broadcast\n   address,\
    \ an local unicast address, or a global unicast address.\n   With multicast or\
    \ broadcast addresses, the attacker can use the\n   multiplying effect of multicast\
    \ routing.  By sending a single packet,\n   it can affect a large number of hosts,\
    \ in a way reminiscent of the\n   \"smurf\" attack.\n   By using local addresses,\
    \ the attacker can reach hosts that are not\n   normally reachable from the Internet,\
    \ for example, hosts connected to\n   the a Teredo relay by a private subnet.\
    \  This creates an exposure\n   for, at a minimum, a denial of service attack\
    \ against these otherwise\n   protected hosts.  This is similar to attack variants\
    \ using source\n   routing to breach a perimeter.\n   The address checks specified\
    \ in Section 5.2.4, 5.3.1, and 5.4.1\n   verify that packets are relayed only\
    \ to a global IPv4 address.  They\n   are designed to eliminate the possibility\
    \ of using broadcast,\n   multicast or local addresses in denial of service or\
    \ other attacks.\n   In what follows, we will only consider attacks targeting\
    \ globally\n   reachable unicast addresses.\n   The attacks can be targeted at\
    \ arbitrary UDP ports, such as, for\n   example, the DNS port of a server.  The\
    \ UDP payload must be a well-\n   formed IPv6 packet, and is thus unlikely to\
    \ be accepted by any well-\n   written UDP service; in most case, the only effect\
    \ of the attack will\n   be to overload the target with random traffic.\n   A\
    \ special case occurs if the attack is directed to an echo service.\n   The service\
    \ will echo the packets.  Since the echo service sees the\n   request coming from\
    \ the IPv4 address of the relay, the echo replies\n   will be sent back to the\
    \ same relay.  According to the rules\n   specified in Section 5.4, these packets\
    \ will be discarded by the\n   Teredo relay.  This is not a very efficient attack\
    \ against the Teredo\n   relays -- establishing a legitimate session with an actual\
    \ Teredo\n   host would create more traffic.\n   The IPv6 packets sent to the\
    \ target contain the IPv6 address used by\n   the attacker.  If ingress filtering\
    \ is used in the IPv6 network, this\n   address will be hard to spoof.  If ingress\
    \ filtering is not used, the\n   attacker can be traced if the IPv6 routers use\
    \ a mechanism similar to\n   ICMP Traceback.  The ICMP messages will normally\
    \ be collected by the\n   same relays that forward the traffic from the attacker;\
    \ the relays\n   can use these messages to identify the source of an ongoing attack.\n\
    \   The details of this solution will have to be developed in further\n   research.\n"
- title: 8.  IAB Considerations
  contents:
  - "8.  IAB Considerations\n   The IAB has studied the problem of \"Unilateral Self\
    \ Address Fixing\"\n   (UNSAF), which is the general process by which a client\
    \ attempts to\n   determine its address in another realm on the other side of\
    \ a NAT\n   through a collaborative protocol reflection mechanism [RFC3424].\n\
    \   Teredo is an example of a protocol that performs this type of\n   function.\
    \  The IAB has mandated that any protocols developed for this\n   purpose document\
    \ a specific set of considerations.  This section\n   meets those requirements.\n"
- title: 8.1.  Problem Definition
  contents:
  - "8.1.  Problem Definition\n   From [RFC3424], any UNSAF proposal must provide\
    \ a precise definition\n   of a specific, limited-scope problem that is to be\
    \ solved with the\n   UNSAF proposal.  A short-term fix should not be generalized\
    \ to solve\n   other problems; this is why \"short term fixes usually aren't\"\
    .\n   The specific problem being solved by Teredo is the provision of IPv6\n \
    \  connectivity for hosts that cannot obtain IPv6 connectivity natively\n   and\
    \ cannot make use of 6to4 because of the presence of a NAT between\n   them and\
    \ the 6to4 relays.\n"
- title: 8.2.  Exit Strategy
  contents:
  - "8.2.  Exit Strategy\n   From [RFC3424], any UNSAF proposal must provide the description\
    \ of an\n   exit strategy/transition plan.  The better short term fixes are the\n\
    \   ones that will naturally see less and less use as the appropriate\n   technology\
    \ is deployed.\n   Teredo comes with its own built-in exit strategy: as soon as\
    \ a client\n   obtains IPv6 connectivity by other means, either 6to4 or native\
    \ IPv6,\n   it can cease using the Teredo service.  In particular, we expect that\n\
    \   the next generation of home routers will provide an IPv6 service in\n   complement\
    \ to the current IPv4 NAT service, e.g., by relaying\n   connectivity obtained\
    \ from the ISP, or by using a configured or\n   automatic tunnel service.\n  \
    \ As long as Teredo is used, there will be a need to support Teredo\n   relays\
    \ so that the remaining Teredo hosts can communicate with native\n   IPv6 hosts.\
    \  As Teredo usage declines, the traffic load on the relays\n   will decline.\
    \  Over time, managers will observe a reduced traffic\n   load on their relays\
    \ and will turn them off, effectively increasing\n   the pressure on the remaining\
    \ Teredo hosts to upgrade to another form\n   of connectivity.\n   The exit strategy\
    \ is facilitated by the nature of Teredo, which\n   provides an IP-level solution.\
    \  IPv6-aware applications do not have\n   to be updated to use or not use Teredo.\
    \  The absence of impact on the\n   applications makes it easier to migrate out\
    \ of Teredo: network\n   connectivity suffices.\n   There would appear to be reasons\
    \ why a Teredo implementation might\n   decide to continue usage of the Teredo\
    \ service even if it already has\n   obtained connectivity by some other means,\
    \ for example:\n   1. When a client is dual homed, and it wishes to improve the\
    \ service\n   when communicating with other Teredo hosts that are \"nearby\" on\
    \ the\n   IPv4 network.  If the client only used its native IPv6 service, the\n\
    \   Teredo hosts would be reached only through the relay.  By maintaining\n  \
    \ Teredo, the Teredo hosts can be reached by direct transmission over\n   IPv4.\n\
    \   2. If, for some reason, the Teredo link is providing the client with\n   better\
    \ service than the native IPv6 link, in terms of bandwidth,\n   packet loss, etc.\n\
    \   The design of Teredo mitigates the dual-homing reason.  A host that\n   wishes\
    \ to communicate with Teredo peers can implement a \"host-based\n   relay\", which\
    \ is effectively an unnumbered Teredo interface.  As\n   such, the dual-homed\
    \ host will obtain Teredo connectivity with those\n   hosts that must use Teredo,\
    \ but will not inadvertently encourage\n   other dual-homed hosts to keep using\
    \ the Teredo service.\n   The bubbles and the UDP encapsulation used by Teredo\
    \ introduce a\n   significant overhead.  It would take exceptional circumstances\
    \ for\n   native technologies to provide a lesser service than Teredo.  These\n\
    \   exceptional circumstances, or other unforeseen reasons, may induce\n   hosts\
    \ to keep using the Teredo service despite the availability of\n   native IPv6\
    \ connectivity.  However, these circumstances are likely to\n   be rare and transient.\
    \  Moreover, if the primary reason to use Teredo\n   fades away, one can expect\
    \ that Teredo relays will be progressively\n   turned off and that the quality\
    \ of the Teredo service will\n   progressively degrade, reducing the motivation\
    \ to use the Teredo\n   service.\n"
- title: 8.3.  Brittleness Introduced by Teredo
  contents:
  - "8.3.  Brittleness Introduced by Teredo\n   From [RFC3424], any UNSAF proposal\
    \ must provide a discussion of\n   specific issues that may render systems more\
    \ \"brittle\".  For example,\n   approaches that involve using data at multiple\
    \ network layers create\n   more dependencies, increase debugging challenges,\
    \ and make it harder\n   to transition.\n   Teredo introduces brittleness into\
    \ the system in several ways: the\n   discovery process assumes a certain classification\
    \ of devices based\n   on their treatment of UDP; the mappings need to be continuously\n\
    \   refreshed; and addressing structure may cause some hosts located\n   behind\
    \ a common NAT to be unreachable from each other.\n   There are many similarities\
    \ between these points and those introduced\n   by Simple Traversal of the UDP\
    \ Protocol through NAT (STUN) [RFC3489];\n   however, Teredo is probably somewhat\
    \ less brittle than STUN.  The\n   reason is that all Teredo packets are sent\
    \ from the local IPv4 Teredo\n   service port, including discovery, bubbles, and\
    \ actual encapsulated\n   packets.  This is different from STUN, where NAT type\
    \ detection and\n   binding allocation use different local ports (ephemeral, in\
    \ both\n   cases).\n   Teredo assumes a certain classification of devices based\
    \ on their\n   treatment of UDP (e.g., cone, protected cone and symmetric).  There\n\
    \   could be devices that would not fit into one of these molds, and\n   hence\
    \ would be improperly classified by Teredo.\n   The bindings allocated from the\
    \ NAT need to be continuously\n   refreshed.  Since the timeouts for these bindings\
    \ are very\n   implementation specific, the refresh interval cannot easily be\n\
    \   determined.  When the binding is not being actively used to receive\n   traffic,\
    \ but to wait for an incoming message, the binding refresh\n   will needlessly\
    \ consume network bandwidth.\n   The use of the Teredo server as an additional\
    \ network element\n   introduces another point of potential security attack. \
    \ These attacks\n   are largely prevented by the security measures provided by\
    \ Teredo,\n   but not entirely.\n   The use of the Teredo server as an additional\
    \ network element\n   introduces another point of failure.  If the client cannot\
    \ locate a\n   Teredo server, or if the server should be unavailable due to failure,\n\
    \   the Teredo client will not be able to obtain IPv6 connectivity.\n   The communication\
    \ with non-Teredo hosts relies on the availability of\n   Teredo relays.  The\
    \ Teredo design assumes that there are multiple\n   Teredo relays; the Teredo\
    \ service will discover the relay closest to\n   the non-Teredo peer.  If that\
    \ relay becomes unavailable, or is\n   misbehaving, communication between the\
    \ Teredo hosts and the peers\n   close to that relay will fail.  This reliability\
    \ issue is somewhat\n   mitigated by the possibility to deploy many relays, arbitrarily\
    \ close\n   from the native IPv6 hosts that require connectivity with Teredo\n\
    \   peers.\n   Teredo imposes some restrictions on the network topologies for\
    \ proper\n   operation.  In particular, if the same NAT is on the path between\
    \ two\n   clients and the Teredo server, these clients will only be able to\n\
    \   interoperate if they are connected to the same link, or if the common\n  \
    \ NAT is capable of \"hairpinning\", i.e., \"looping\" packets sent by one\n \
    \  client to another.\n   There are also additional points of brittleness that\
    \ are worth\n   mentioning:\n   - Teredo service will not work through NATs of\
    \ the symmetric variety.\n   - Teredo service depends on the Teredo server running\
    \ on a network\n     that is a common ancestor to all Teredo clients; typically,\
    \ this is\n     the public Internet.  If the Teredo server is itself behind a\
    \ NAT,\n     Teredo service will not work to certain peers.\n   - Teredo introduces\
    \ jitter into the IPv6 service it provides, due to\n     the queuing of packets\
    \ while bubble exchanges take place.  This\n     jitter can negatively impact\
    \ applications, particularly latency\n     sensitive ones, such as Voice over\
    \ IP (VoIP).\n"
- title: 8.4.  Requirements for a Long-Term Solution
  contents:
  - "8.4.  Requirements for a Long-Term Solution\n   From [RFC3424], any UNSAF proposal\
    \ must identify requirements for\n   longer-term, sound technical solutions --\
    \ contribute to the process\n   of finding the right longer-term solution.\n \
    \  Our experience with Teredo has led to the following requirements for\n   a\
    \ long-term solution to the NAT problem: the devices that implement\n   the IPv4\
    \ NAT services should in the future also become IPv6 routers.\n"
- title: 9.  IANA Considerations
  contents:
  - "9.  IANA Considerations\n   This memo documents a request to IANA to allocate\
    \ a 32-bit Teredo\n   IPv6 service prefix, as specified in Section 2.6, and a\
    \ Teredo IPv4\n   multicast address, as specified in Section 2.17.\n"
- title: 10.  Acknowledgements
  contents:
  - "10.  Acknowledgements\n   Many of the ideas in this memo are the result of discussions\
    \ between\n   the author and Microsoft colleagues, notably Brian Zill, John Miller,\n\
    \   Mohit Talwar, Joseph Davies, and Rick Rashid.  Several encapsulation\n   details\
    \ are inspired from earlier work by Keith Moore.  The example\n   in Section 5.1\
    \ and a number of security precautions were suggested by\n   Pekka Savola.  The\
    \ local discovery procedure was suggested by Richard\n   Draves and Dave Thaler.\
    \  The document was reviewed by members of the\n   NGTRANS and V6OPS working groups,\
    \ including Brian Carpenter, Cyndi\n   Jung, Keith Moore, Thomas Narten, Anssi\
    \ Porttikivi, Pekka Savola, Eng\n   Soo Guan, and Eiffel Wu.  Eric Klein, Karen\
    \ Nielsen, Francis Dupont,\n   Markku Ala-Vannesluoma, Henrik Levkowetz, and Jonathan\
    \ Rosenberg\n   provided detailed reviews during the IETF last call.\n"
- title: 11.  References
  contents:
  - '11.  References

    '
- title: 11.1.  Normative References
  contents:
  - "11.1.  Normative References\n   [RFC768]   Postel, J., \"User Datagram Protocol\"\
    , STD 6, RFC 768,\n              August 1980.\n   [RFC791]   Postel, J., \"Internet\
    \ Protocol\", STD 5, RFC 791, September\n              1981.\n   [RFC1918]  Rekhter,\
    \ Y., Moskowitz, B., Karrenberg, D., de Groot, G.,\n              and E. Lear,\
    \ \"Address Allocation for Private Internets\",\n              BCP 5, RFC 1918,\
    \ February 1996.\n   [RFC2104]  Krawczyk, H., Bellare, M., and R. Canetti, \"\
    HMAC: Keyed-\n              Hashing for Message Authentication\", RFC 2104, February\n\
    \              1997.\n   [RFC2119]  Bradner, S., \"Key words for use in RFCs to\
    \ Indicate\n              Requirement Levels\", BCP 14, RFC 2119, March 1997.\n\
    \   [RFC2460]  Deering, S. and R. Hinden, \"Internet Protocol, Version 6\n   \
    \           (IPv6) Specification\", RFC 2460, December 1998.\n   [RFC2461]  Narten,\
    \ T., Nordmark, E., and W. Simpson, \"Neighbor\n              Discovery for IP\
    \ Version 6 (IPv6)\", RFC 2461, December\n              1998.\n   [RFC2462]  Thomson,\
    \ S. and T. Narten, \"IPv6 Stateless Address\n              Autoconfiguration\"\
    , RFC 2462, December 1998.\n   [RFC3056]  Carpenter, B. and K. Moore, \"Connection\
    \ of IPv6 Domains\n              via IPv4 Clouds\", RFC 3056, February 2001.\n\
    \   [RFC3424]  Daigle, L. and IAB, \"IAB Considerations for UNilateral\n     \
    \         Self-Address Fixing (UNSAF) Across Network Address\n              Translation\"\
    , RFC 3424, November 2002.\n   [RFC3566]  Frankel, S. and H. Herbert, \"The AES-XCBC-MAC-96\
    \ Algorithm\n              and Its Use With IPsec\", RFC 3566, September 2003.\n\
    \   [FIPS-180] \"Secure Hash Standard\", Computer Systems Laboratory,\n      \
    \        National Institute of Standards and Technology, U.S.\n              Department\
    \ Of Commerce, May 1993.\n"
- title: 11.2.  Informative References
  contents:
  - "11.2.  Informative References\n   [RFC2993]  Hain, T., \"Architectural Implications\
    \ of NAT\", RFC 2993,\n              November 2000.\n   [RFC3330]  IANA, \"Special-Use\
    \ IPv4 Addresses\", RFC 3330, September\n              2002.\n   [RFC3489]  Rosenberg,\
    \ J., Weinberger, J., Huitema, C., and R. Mahy.\n              \"STUN - Simple\
    \ Traversal of User Datagram Protocol (UDP)\n              Through Network Address\
    \ Translators (NATs)\", RFC 3489,\n              March 2003.\n   [RFC3904]  Huitema,\
    \ C., Austein, R., Satapati, S., and R. van der\n              Pol, \"Evaluation\
    \ of IPv6 Transition Mechanisms for\n              Unmanaged Networks\", RFC 3904,\
    \ September 2004.\n   [RFC3947]  Kivinen, T., Swander, B., Huttunen, A., and V.\
    \ Volpe,\n              \"Negotiation of NAT-Traversal in the IKE\", RFC 3947,\n\
    \              January 2005.\n   [RFC4302]  Kent, S., \"IP Authentication Header\"\
    , RFC 4302, December\n              2005.\n   [RFC4303]  Kent, S., \"IP Encapsulating\
    \ Security Payload (ESP)\", RFC\n              4303, December 2005.\n   [RFC4306]\
    \  Kaufman, C., \"Internet Key Exchange (IKEv2) Protocol\", RFC\n            \
    \  4306, December 2005.\n   [REFLECT]  V. Paxson, \"An analysis of using reflectors\
    \ for\n              distributed denial of service attacks\", Computer\n     \
    \         Communication Review, ACM SIGCOMM, Volume 31, Number 3,\n          \
    \    July 2001, pp 38-47.\n"
- title: Author's Address
  contents:
  - "Author's Address\n   Christian Huitema\n   Microsoft Corporation\n   One Microsoft\
    \ Way\n   Redmond, WA 98052-6399\n   EMail: huitema@microsoft.com\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2006).\n   This\
    \ document is subject to the rights, licenses and restrictions\n   contained in\
    \ BCP 78, and except as set forth therein, the authors\n   retain all their rights.\n\
    \   This document and the information contained herein are provided on an\n  \
    \ \"AS IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n  \
    \ OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY AND THE INTERNET\n   ENGINEERING\
    \ TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS OR IMPLIED,\n   INCLUDING BUT NOT\
    \ LIMITED TO ANY WARRANTY THAT THE USE OF THE\n   INFORMATION HEREIN WILL NOT\
    \ INFRINGE ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY OR FITNESS\
    \ FOR A PARTICULAR PURPOSE.\n"
- title: Intellectual Property
  contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or\
    \ scope of any\n   Intellectual Property Rights or other rights that might be\
    \ claimed to\n   pertain to the implementation or use of the technology described\
    \ in\n   this document or the extent to which any license under such rights\n\
    \   might or might not be available; nor does it represent that it has\n   made\
    \ any independent effort to identify any such rights.  Information\n   on the\
    \ procedures with respect to rights in RFC documents can be\n   found in BCP 78\
    \ and BCP 79.\n   Copies of IPR disclosures made to the IETF Secretariat and any\n\
    \   assurances of licenses to be made available, or the result of an\n   attempt\
    \ made to obtain a general license or permission for the use of\n   such proprietary\
    \ rights by implementers or users of this\n   specification can be obtained from\
    \ the IETF on-line IPR repository at\n   http://www.ietf.org/ipr.\n   The IETF\
    \ invites any interested party to bring to its attention any\n   copyrights, patents\
    \ or patent applications, or other proprietary\n   rights that may cover technology\
    \ that may be required to implement\n   this standard.  Please address the information\
    \ to the IETF at\n   ietf-ipr@ietf.org.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is provided by the IETF\n\
    \   Administrative Support Activity (IASA).\n"
