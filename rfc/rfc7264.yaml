- contents:
  - " An Extension to the REsource LOcation And Discovery (RELOAD) Protocol\n                     to
    Support Relay Peer Routing\n"
  title: __initial_text__
- contents:
  - "Abstract\n   This document defines an optional extension to the REsource LOcation\n
    \  And Discovery (RELOAD) protocol to support the relay peer routing\n   mode.
    \ RELOAD recommends symmetric recursive routing for routing\n   messages.  The
    new optional extension provides a shorter route for\n   responses, thereby reducing
    overhead on intermediate peers.  This\n   document also describes potential cases
    where this extension can be\n   used.\n"
  title: Abstract
- contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This
    document is a product of the Internet Engineering Task Force\n   (IETF).  It represents
    the consensus of the IETF community.  It has\n   received public review and has
    been approved for publication by the\n   Internet Engineering Steering Group (IESG).
    \ Further information on\n   Internet Standards is available in Section 2 of RFC
    5741.\n   Information about the current status of this document, any errata,\n
    \  and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc7264.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2014 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n
    \  (http://trustee.ietf.org/license-info) in effect on the date of\n   publication
    of this document.  Please review these documents\n   carefully, as they describe
    your rights and restrictions with respect\n   to this document.  Code Components
    extracted from this document must\n   include Simplified BSD License text as described
    in Section 4.e of\n   the Trust Legal Provisions and are provided without warranty
    as\n   described in the Simplified BSD License.\n"
  title: Copyright Notice
- contents:
  - "Table of Contents\n   1. Introduction ....................................................3\n
    \  2. Terminology .....................................................4\n   3.
    Overview ........................................................5\n      3.1.
    RPR ........................................................5\n      3.2. Scenarios
    Where RPR Can Be Used ............................6\n           3.2.1. Managed
    or Closed P2P Systems .......................6\n           3.2.2. Using Bootstrap
    Nodes as Relay Peers ................7\n           3.2.3. Wireless Scenarios ..................................7\n
    \  4. Relationship between SRR and RPR ................................7\n      4.1.
    How RPR Works ..............................................7\n      4.2. How
    SRR and RPR Work Together ..............................7\n   5. RPR Extensions
    to RELOAD ........................................8\n      5.1. Basic Requirements
    .........................................8\n      5.2. Modification to RELOAD
    Message Structure ...................8\n           5.2.1. Extensive Routing Mode
    ..............................8\n      5.3. Creating a Request .........................................9\n
    \          5.3.1. Creating a Request for RPR ..........................9\n      5.4.
    Request and Response Processing ............................9\n           5.4.1.
    Destination Peer: Receiving a Request and\n                  Sending a Response
    ..................................9\n           5.4.2. Sending Peer: Receiving
    a Response .................10\n           5.4.3. Relay Peer Processing ..............................10\n
    \  6. Overlay Configuration Extension ................................10\n   7.
    Discovery of Relay Peers .......................................11\n   8. Security
    Considerations ........................................11\n   9. IANA Considerations
    ............................................11\n      9.1. A New RELOAD Forwarding
    Option ............................11\n   10. Acknowledgments ...............................................11\n
    \  11. References ....................................................12\n      11.1.
    Normative References .....................................12\n      11.2. Informative
    References ...................................12\n   Appendix A. Optional Methods
    to Investigate Peer Connectivity .....13\n   Appendix B. Comparison of Cost of
    SRR and RPR .....................14\n     B.1. Closed or Managed Networks .................................14\n
    \    B.2. Open Networks ..............................................15\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   The REsource LOcation And Discovery (RELOAD) protocol [RFC6940]\n
    \  recommends symmetric recursive routing (SRR) for routing messages and\n   describes
    the extensions that would be required to support additional\n   routing algorithms.
    \ In addition to SRR, two other routing options --\n   direct response routing
    (DRR) and relay peer routing (RPR) -- are\n   also discussed in Appendix A of
    [RFC6940].  As we show in Section 3,\n   RPR is advantageous over SRR in some
    scenarios in that RPR can reduce\n   load (CPU and link bandwidth) on intermediate
    peers.  RPR works\n   better in a network where relay peers are provisioned in
    advance so\n   that relay peers are publicly reachable in the P2P system.  In
    other\n   scenarios, using a combination of RPR and SRR together is more likely\n
    \  to provide benefits than if SRR is used alone.\n   Note that in this document
    we focus on the RPR mode and its\n   extensions to RELOAD to produce a standalone
    solution.  Please refer\n   to [RFC7263] for details on the DRR mode.\n   We first
    discuss the problem statement in Section 3.  How to combine\n   RPR and SRR is
    presented in Section 4.  An extension to RELOAD to\n   support RPR is defined
    in Section 5.  Discovery of relay peers is\n   introduced in Section 7.  Some
    optional methods to check peer\n   connectivity are introduced in Appendix A.
    \ In Appendix B, we give a\n   comparison of the cost of SRR and RPR in both managed
    and open\n   networks.\n"
  title: 1.  Introduction
- contents:
  - "2.  Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\",
    \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\"
    in this\n   document are to be interpreted as described in RFC 2119 [RFC2119].\n
    \  We use terminology and definitions from the base RELOAD specification\n   [RFC6940]
    extensively in this document.  We also use terms defined in\n   the NAT behavior
    discovery document [RFC5780].  Other terms used in\n   this document are defined
    inline when used and are also defined below\n   for reference.\n      Publicly
    Reachable: A peer is publicly reachable if it can receive\n      unsolicited messages
    from any other peer in the same overlay.\n      Note: \"Publicly\" does not mean
    that the peers must be on the\n      public Internet, because the RELOAD protocol
    may be used in a\n      closed network.\n      Relay Peer: A relay peer is a type
    of publicly reachable peer that\n      can receive unsolicited messages from all
    other peers in the\n      overlay and forward the responses from destination peers
    towards\n      the sender of the request.\n      Relay Peer Routing (RPR): \"RPR\"
    refers to a routing mode in which\n      responses to Peer-to-Peer SIP (P2PSIP)
    requests are sent by the\n      destination peer to a relay peer transport address
    that will\n      forward the responses towards the sending peer.  For simplicity,\n
    \     the abbreviation \"RPR\" is used in the rest of this document.\n      Symmetric
    Recursive Routing (SRR): \"SRR\" refers to a routing mode\n      in which responses
    follow the reverse path of the request to get\n      to the sending peer.  For
    simplicity, the abbreviation \"SRR\" is\n      used in the rest of this document.\n
    \     Direct Response Routing (DRR): \"DRR\" refers to a routing mode in\n      which
    responses to P2PSIP requests are returned to the sending\n      peer directly
    from the destination peer based on the sending\n      peer's own local transport
    address(es).  For simplicity, the\n      abbreviation \"DRR\" is used in the rest
    of this document.\n"
  title: 2.  Terminology
- contents:
  - "3.  Overview\n   RELOAD is expected to work under a great number of application\n
    \  scenarios.  The situations where RELOAD is to be deployed differ\n   greatly.
    \ For instance, some deployments are global, such as a\n   Skype-like system intended
    to provide public service, while others\n   run in small-scale closed networks.
    \ SRR works in any situation, but\n   RPR may work better in some specific scenarios.\n"
  - contents:
    - "3.1.  RPR\n   RELOAD is a simple request-response protocol.  After sending
      a\n   request, a peer waits for a response from a destination peer.  There\n
      \  are several ways for the destination peer to send a response back to\n   the
      source peer.  In this section, we will provide detailed\n   information on RPR.
      \ Note that the same types of illustrative\n   settings can be found in Appendix
      B.1 of [RFC7263].\n   If peer A knows it is behind a NAT or NATs and knows one
      or more\n   relay peers with whom they have had prior connections, peer A can
      try\n   RPR.  Assume that peer A is associated with relay peer R.  When\n   sending
      the request, peer A includes information describing peer R's\n   transport address
      in the request.  When peer X receives the request,\n   peer X sends the response
      to peer R, which forwards it directly to\n   peer A on the existing connection.
      \ Figure 1 illustrates RPR.  Note\n   that RPR also allows a shorter route for
      responses compared to SRR;\n   this means less overhead on intermediate peers.
      \ Establishing a\n   connection to the relay with Transport Layer Security (TLS)
      requires\n   multiple round trips.  Please refer to Appendix B for a cost\n
      \  comparison between SRR and RPR.\n     A            B            C             D
      \          X           R\n     |  Request   |            |            |            |
      \          |\n     |----------->|            |            |            |           |\n
      \    |            | Request    |            |            |           |\n     |
      \           |----------->|            |            |           |\n     |            |
      \           | Request    |            |           |\n     |            |            |----------->|
      \           |           |\n     |            |            |            | Request
      \   |           |\n     |            |            |            |----------->|
      \          |\n     |            |            |            |            | Response
      \ |\n     |            |            |            |            |---------->|\n
      \    |            |            |            |  Response  |           |\n     |<-----------+------------+------------+------------+-----------|\n
      \    |            |            |            |            |           |\n                            Figure
      1: RPR Mode\n   This technique relies on the relative population of peers such
      as\n   peer A that require relay peers, and peers such as peer R that are\n
      \  capable of serving as relay peers.  It also requires a mechanism to\n   enable
      peers to know which peers can be used as their relays.  This\n   mechanism may
      be based on configuration -- for example, as part of\n   the overlay configuration,
      an initial list of relay peers can be\n   supplied.  Another option is a response
      message in which the\n   responding peer can announce that it can serve as a
      relay peer.\n"
    title: 3.1.  RPR
  - contents:
    - "3.2.  Scenarios Where RPR Can Be Used\n   In this section, we will list several
      scenarios where using RPR would\n   improve performance.\n"
    - contents:
      - "3.2.1.  Managed or Closed P2P Systems\n   As described in Section 3.2.1 of
        [RFC7263], many P2P systems run in a\n   closed or managed environment so
        that network administrators can\n   better manage their system.  For example,
        the network administrator\n   can deploy several relay peers that are publicly
        reachable in the\n   system and indicate their presence in the configuration
        file.  After\n   learning where these relay peers are, peers behind NATs can
        use RPR\n   with help from these relay peers.  Peers MUST also support SRR
        in\n   case RPR fails.\n   Another usage is to install relay peers on the
        managed network\n   boundary, allowing external peers to send responses to
        peers inside\n   the managed network.\n"
      title: 3.2.1.  Managed or Closed P2P Systems
    - contents:
      - "3.2.2.  Using Bootstrap Nodes as Relay Peers\n   Bootstrap nodes are typically
        publicly reachable in a RELOAD\n   architecture.  As a result, one possible
        scenario would be to use the\n   bootstrap nodes as relay peers for use with
        RPR.  A relay peer SHOULD\n   be publicly accessible and maintain a direct
        connection with its\n   client.  As such, bootstrap nodes are well suited
        to play the role of\n   relay peers.\n"
      title: 3.2.2.  Using Bootstrap Nodes as Relay Peers
    - contents:
      - "3.2.3.  Wireless Scenarios\n   In some mobile deployments, using RPR may
        help reduce radio battery\n   usage and bandwidth by the intermediate peers.
        \ The service provider\n   may recommend using RPR based on his knowledge
        of the topology.\n"
      title: 3.2.3.  Wireless Scenarios
    title: 3.2.  Scenarios Where RPR Can Be Used
  title: 3.  Overview
- contents:
  - '4.  Relationship between SRR and RPR

    '
  - contents:
    - "4.1.  How RPR Works\n   Peers using RPR MUST maintain a connection with their
      relay peer(s).\n   This can be done in the same way as establishing a neighbor\n
      \  connection between peers using the Attach method [RFC6940].\n   A requirement
      for RPR is that the source peer convey its relay peer's\n   (or peers') transport
      address(es) in the request so the destination\n   peer knows where the relay
      peers are and will send the response to a\n   relay peer first.  The request
      MUST also include the requesting\n   peer's Node-ID or IP address, which enables
      the relay peer to route\n   the response back to the right peer.\n   Note that
      being a relay peer does not require that the relay peer\n   have more functionality
      than an ordinary peer.  Relay peers comply\n   with the same procedure as an
      ordinary peer to forward messages.  The\n   only difference is that there may
      be a larger traffic burden on relay\n   peers.  Relay peers can decide whether
      to accept a new connection\n   based on their current burden.\n"
    title: 4.1.  How RPR Works
  - contents:
    - "4.2.  How SRR and RPR Work Together\n   RPR is not intended to replace SRR.
      \ It is better to use these two\n   modes together to adapt to each peer's specific
      situation.  Note that\n   the informative suggestions for how to transition
      between SRR and RPR\n   are the same as those for DRR.  Please refer to Section
      4.2 of\n   [RFC7263] for more details.  If a relay peer is provided by the\n
      \  service provider, peers SHOULD prefer RPR over SRR.  However, RPR\n   SHOULD
      NOT be used in the open Internet or if the administrator does\n   not feel he
      has enough information about the overlay network\n   topology.  A new overlay
      configuration element specifying the usage\n   of RPR is defined in Section
      6.\n"
    title: 4.2.  How SRR and RPR Work Together
  title: 4.  Relationship between SRR and RPR
- contents:
  - "5.  RPR Extensions to RELOAD\n   Adding support for RPR requires extensions to
    the current RELOAD\n   protocol.  In this section, we define the required extensions,\n
    \  including extensions to message structure and message processing.\n"
  - contents:
    - "5.1.  Basic Requirements\n   All peers MUST be able to process requests for
      routing in SRR and MAY\n   support RPR routing requests.\n"
    title: 5.1.  Basic Requirements
  - contents:
    - "5.2.  Modification to RELOAD Message Structure\n   RELOAD provides an extensible
      framework to accommodate future\n   extensions.  In this section, we define
      an RPR routing option for the\n   extensive routing mode specified in [RFC7263].
      \ The state-keeping\n   flag [RFC7263] is needed to support the RPR mode.\n"
    - contents:
      - "5.2.1.  Extensive Routing Mode\n   The new RouteMode value for RPR is defined
        below for the\n   ExtensiveRoutingModeOption structure:\n   enum {(0),DRR(1),RPR(2),(255)}
        RouteMode;\n   struct {\n           RouteMode               routemode;\n           OverlayLinkType
        \        transport;\n           IpAddressPort           ipaddressport;\n           Destination
        \            destinations<1..2^8-1>;\n   } ExtensiveRoutingModeOption;\n   Note
        that the DRR value in RouteMode is defined in [RFC7263].\n   RouteMode: refers
        to which type of routing mode is indicated to the\n   destination peer.\n
        \  OverlayLinkType: refers to the transport type that is used to deliver\n
        \  responses from the destination peer to the relay peer.\n   IpAddressPort:
        refers to the transport address that the destination\n   peer should use for
        sending responses.  This will be a relay peer\n   address for RPR.\n   Destination:
        refers to the relay peer itself.  If the routing mode is\n   RPR, then the
        destination contains two items: the relay peer's\n   Node-ID and the sending
        peer's Node-ID.\n"
      title: 5.2.1.  Extensive Routing Mode
    title: 5.2.  Modification to RELOAD Message Structure
  - contents:
    - '5.3.  Creating a Request

      '
    - contents:
      - "5.3.1.  Creating a Request for RPR\n   When using RPR for a transaction,
        the sending peer MUST set the\n   IGNORE-STATE-KEEPING flag in the ForwardingHeader.
        \ Additionally, the\n   peer MUST construct and include a ForwardingOption
        structure in the\n   ForwardingHeader.  When constructing the ForwardingOption
        structure,\n   the fields MUST be set as follows:\n   1)  The type MUST be
        set to extensive_routing_mode.\n   2)  The ExtensiveRoutingModeOption structure
        MUST be used for the\n       option field within the ForwardingOption structure.
        \ The fields\n       MUST be defined as follows:\n       2.1)  routemode set
        to 0x02 (RPR).\n       2.2)  transport set as appropriate for the relay peer.\n
        \      2.3)  ipaddressport set to the transport address of the relay\n             peer
        through which the sender wishes the message relayed.\n       2.4)  The destination
        structure MUST contain two values.  The\n             first MUST be defined
        as type \"node\" and set with the\n             values for the relay peer.
        \ The second MUST be defined as\n             type \"node\" and set with the
        sending peer's own values.\n"
      title: 5.3.1.  Creating a Request for RPR
    title: 5.3.  Creating a Request
  - contents:
    - "5.4.  Request and Response Processing\n   This section gives normative text
      for message processing after RPR is\n   introduced.  Here, we only describe
      the additional procedures for\n   supporting RPR.  Please refer to [RFC6940]
      for RELOAD base\n   procedures.\n"
    - contents:
      - "5.4.1.  Destination Peer: Receiving a Request and Sending a Response\n   When
        the destination peer receives a request, it will check the\n   options in
        the forwarding header.  If the destination peer cannot\n   understand the
        extensive_routing_mode option in the request, it MUST\n   attempt to use SRR
        to return an \"Error_Unknown_Extension\" response\n   (defined in Sections
        6.3.3.1 and 14.9 of [RFC6940]) to the sending\n   peer.\n   If the routing
        mode is RPR, the destination peer MUST construct a\n   destination_list for
        the response with two entries as defined in\n   [RFC6940].  The first entry
        MUST be set to the relay peer's Node-ID\n   from the option in the request,
        and the second entry MUST be the\n   sending peer's Node-ID from the option
        in the request.\n   In the event that the routing mode is set to RPR and there
        are not\n   exactly two destinations, the destination peer MUST try to send
        an\n   \"Error_Unknown_Extension\" response (defined in Sections 6.3.3.1 and\n
        \  14.9 of [RFC6940]) to the sending peer using SRR.\n   After the peer constructs
        the destination_list for the response, it\n   sends the response to the transport
        address, which is indicated in\n   the ipaddressport field in the option using
        the specific transport\n   mode in the ForwardingOption.  If the destination
        peer receives a\n   retransmit with SRR preference on the message it is trying
        to respond\n   to now, the responding peer SHOULD abort the RPR response and\n
        \  use SRR.\n"
      title: '5.4.1.  Destination Peer: Receiving a Request and Sending a Response'
    - contents:
      - "5.4.2.  Sending Peer: Receiving a Response\n   Upon receiving a response,
        the peer follows the rules in [RFC6940].\n   If the sender used RPR and did
        not get a response until the timeout,\n   it MAY resend the message using
        either RPR (but with a different\n   relay peer, if available) or SRR.\n"
      title: '5.4.2.  Sending Peer: Receiving a Response'
    - contents:
      - "5.4.3.  Relay Peer Processing\n   Relay peers are designed to forward responses
        to peers who are not\n   publicly reachable.  For the routing of the response,
        this document\n   still uses the destination_list.  The only difference from
        SRR is\n   that the destination_list is not the reverse of the via_list.\n
        \  Instead, it is constructed from the forwarding option as described\n   below.\n
        \  When a relay peer receives a response, it MUST follow the rules in\n   [RFC6940].
        \ It receives the response, validates the message,\n   readjusts the destination_list,
        and forwards the response to the next\n   hop in the destination_list based
        on the connection table.  There is\n   no added requirement for the relay
        peer.\n"
      title: 5.4.3.  Relay Peer Processing
    title: 5.4.  Request and Response Processing
  title: 5.  RPR Extensions to RELOAD
- contents:
  - "6.  Overlay Configuration Extension\n   This document uses the new RELOAD overlay
    configuration element,\n   \"route-mode\", inside each \"configuration\" element,
    as defined in\n   Section 6 of [RFC7263].  The route mode MUST be \"RPR\".\n"
  title: 6.  Overlay Configuration Extension
- contents:
  - "7.  Discovery of Relay Peers\n   There are several ways to distribute information
    about relay peers\n   throughout the overlay.  P2P network providers can deploy
    some relay\n   peers and advertise them in the configuration file.  With the\n
    \  configuration file at hand, peers can get relay peers to try RPR.\n   Another
    way is to consider the relay peer as a service; some service\n   advertisement
    and discovery mechanism can then also be used for\n   discovering relay peers
    -- for example, using the same mechanism as\n   that used in Traversal Using Relays
    around NAT (TURN) server\n   discovery as discussed in [RFC6940].  Another option
    is to let a peer\n   advertise its capability to be a relay in the response to
    an Attach\n   or Join [RFC6940].\n"
  title: 7.  Discovery of Relay Peers
- contents:
  - "8.  Security Considerations\n   The normative security recommendations of Section
    13 of [RFC6940] are\n   applicable to this document.  As a routing alternative,
    the security\n   part of RPR conforms to Section 13.6 of [RFC6940], which describes\n
    \  routing security.  RPR behaves like a DRR requesting node towards the\n   destination
    node.  The RPR relay peer is not necessarily an arbitrary\n   node -- for example,
    a managed network, a bootstrap node, or a\n   configured relay peer; it should
    be a trusted node, because a trusted\n   node will be less of a risk, as outlined
    in Section 13 of [RFC6940].\n   In order to address possible DoS attacks, the
    relay peer SHOULD also\n   limit the number of maximum connections; this is required
    in order to\n   also reduce load on the relay peer, as explained in Section 4.1.\n"
  title: 8.  Security Considerations
- contents:
  - '9.  IANA Considerations

    '
  - contents:
    - "9.1.  A New RELOAD Forwarding Option\n   A new RELOAD Forwarding Option type
      has been added to the \"RELOAD\n   Forwarding Option Registry\" defined in [RFC6940].\n
      \  Code: 2\n   Forwarding Option: extensive_routing_mode\n"
    title: 9.1.  A New RELOAD Forwarding Option
  title: 9.  IANA Considerations
- contents:
  - "10.  Acknowledgments\n   David Bryan helped extensively with this document and
    helped provide\n   some of the text, analysis, and ideas contained here.  The
    authors\n   would like to thank Ted Hardie, Narayanan Vidya, Dondeti Lakshminath,\n
    \  Bruce Lowekamp, Stephane Bryant, Marc Petit-Huguenin, and Carlos\n   Jesus
    Bernardos Cano for their constructive comments.\n"
  title: 10.  Acknowledgments
- contents:
  - '11.  References

    '
  - contents:
    - "11.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use
      in RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119, March
      1997.\n   [RFC6940]  Jennings, C., Lowekamp, B., Rescorla, E., Baset, S., and\n
      \             H. Schulzrinne, \"REsource LOcation And Discovery (RELOAD)\n              Base
      Protocol\", RFC 6940, January 2014.\n   [RFC7263]  Zong, N., Jiang, X., Even,
      R., and Y. Zhang, \"An Extension\n              to the REsource LOcation And
      Discovery (RELOAD) Protocol\n              to Support Direct Response Routing\",
      RFC 7263, June 2014.\n"
    title: 11.1.  Normative References
  - contents:
    - "11.2.  Informative References\n   [RFC3424]  Daigle, L. and IAB, \"IAB Considerations
      for UNilateral\n              Self-Address Fixing (UNSAF) Across Network Address\n
      \             Translation\", RFC 3424, November 2002.\n   [RFC5780]  MacDonald,
      D. and B. Lowekamp, \"NAT Behavior Discovery\n              Using Session Traversal
      Utilities for NAT (STUN)\",\n              RFC 5780, May 2010.\n"
    title: 11.2.  Informative References
  title: 11.  References
- contents:
  - "Appendix A.  Optional Methods to Investigate Peer Connectivity\n   This section
    is for informational purposes only and provides some\n   mechanisms that can be
    used when the configuration information does\n   not specify if RPR can be used.
    \ It summarizes some methods that can\n   be used by a peer to determine its own
    network location compared with\n   NAT.  These methods may help a peer to decide
    which routing mode it\n   may wish to try.  Note that there is no foolproof way
    to determine\n   whether a peer is publicly reachable, other than via out-of-band\n
    \  mechanisms.  This document addresses UNilateral Self-Address Fixing\n   (UNSAF)
    [RFC3424] considerations by specifying a fallback plan to SRR\n   [RFC6940].  SRR
    is not an UNSAF mechanism.  This document does not\n   define any new UNSAF mechanisms.\n
    \  For RPR to function correctly, a peer may attempt to determine\n   whether
    it is publicly reachable.  If it is not, RPR may be chosen to\n   route the response
    with help from relay peers, or the peers should\n   fall back to SRR.  NATs and
    firewalls are two major contributors to\n   preventing RPR from functioning properly.
    \ There are a number of\n   techniques by which a peer can get its reflexive address
    on the\n   public side of the NAT.  After obtaining the reflexive address, a\n
    \  peer can perform further tests to learn whether the reflexive address\n   is
    publicly reachable.  If the address appears to be publicly\n   reachable, the
    peer to which the address belongs can be a candidate\n   to serve as a relay peer.
    \ Peers that are not publicly reachable may\n   still use RPR to shorten the response
    path, with help from relay\n   peers.\n   Some conditions that are unique in P2PSIP
    architecture could be\n   leveraged to facilitate the tests.  In a P2P overlay
    network, each\n   peer has only a partial view of the whole network and knows
    of a few\n   peers in the overlay.  P2P routing algorithms can easily deliver
    a\n   request from a sending peer to a peer with whom the sending peer has\n   no
    direct connection.  This makes it easy for a peer to ask other\n   peers to send
    unsolicited messages back to the requester.\n   The approaches for a peer to get
    the addresses needed for further\n   tests, as well as the test for learning whether
    a peer may be\n   publicly reachable, are the same as those for DRR.  Please refer
    to\n   Appendix A of [RFC7263] for more details.\n"
  title: Appendix A.  Optional Methods to Investigate Peer Connectivity
- contents:
  - "Appendix B.  Comparison of Cost of SRR and RPR\n   The major advantage of using
    RPR is that it reduces the number of\n   intermediate peers traversed by the response.
    \ This reduces the load,\n   such as processing and communication bandwidth, on
    those peers'\n   resources.\n"
  - contents:
    - "B.1.  Closed or Managed Networks\n   As described in Section 3, many P2P systems
      run in a closed or\n   managed environment (e.g., carrier networks), so network\n
      \  administrators would know that they could safely use RPR.\n   The number
      of hops for a response in SRR and in RPR are listed in the\n   following table.
      \ Note that the same types of illustrative settings\n   can be found in Appendix
      B.1 of [RFC7263].\n           Mode       | Success | No. of Hops | No. of Msgs\n
      \          ------------------------------------------------\n           SRR
      \       |  Yes    |     log(N)  |    log(N)\n           RPR        |  Yes    |
      \    2       |    2\n           RPR (DTLS) |  Yes    |     2       |    7+2\n
      \       Table 1: Comparison of SRR and RPR in Closed Networks\n   From the above
      comparison, it is clear that:\n   1)  In most cases when the number of peers
      (N) > 4 (2^2), RPR uses\n       fewer hops than SRR.  Using a shorter route
      means less overhead\n       and resource usage on intermediate peers, which
      is an important\n       consideration for adopting RPR in the cases where such
      resources\n       as CPU and bandwidth are limited, e.g., the case of mobile,\n
      \      wireless networks.\n   2)  In the cases when N > 512 (2^9), RPR also
      uses fewer messages\n       than SRR.\n   3)  In the cases when N < 512, RPR
      uses more messages than SRR (but\n       still uses fewer hops than SRR), so
      the consideration of whether\n       to use RPR or SRR depends on other factors
      such as using less\n       resources (bandwidth and processing) from the intermediate
      peers.\n       Section 4 provides use cases where RPR has a better chance of\n
      \      working or where the considerations of intermediary resources are\n       important.\n"
    title: B.1.  Closed or Managed Networks
  - contents:
    - "B.2.  Open Networks\n   In open networks (e.g., the Internet) where RPR is
      not guaranteed to\n   work, RPR can fall back to SRR if it fails after trial,
      as described\n   in Section 4.2.  Based on the same settings as those listed
      in\n   Appendix B.1, the number of hops, as well as the number of messages\n
      \  for a response in SRR and RPR, are listed in the following table:\n    Mode
      \      |          Success        | No. of Hops | No. of Msgs\n    ----------------------------------------------------------------\n
      \   SRR        |         Yes             |   log(N)    |   log(N)\n    RPR        |
      \        Yes             |   2         |   2\n               | Fail & fall back
      to SRR |   2+log(N)  |   2+log(N)\n    RPR (DTLS) |         Yes             |
      \  2         |   7+2\n               | Fail & fall back to SRR |   2+log(N)
      \ |   9+log(N)\n          Table 2: Comparison of SRR and RPR in Open Networks\n
      \  From the above comparison, it can be observed that trying to first\n   use
      RPR could still provide an overall number of hops lower than\n   directly using
      SRR.  The detailed analysis is the same as that for\n   DRR and can be found
      in [RFC7263].\n"
    title: B.2.  Open Networks
  title: Appendix B.  Comparison of Cost of SRR and RPR
- contents:
  - "Authors' Addresses\n   Ning Zong\n   Huawei Technologies\n   EMail: zongning@huawei.com\n
    \  Xingfeng Jiang\n   Huawei Technologies\n   EMail: jiang.x.f@huawei.com\n   Roni
    Even\n   Huawei Technologies\n   EMail: roni.even@mail01.huawei.com\n   Yunfei
    Zhang\n   CoolPad / China Mobile\n   EMail: hishigh@gmail.com\n"
  title: Authors' Addresses
