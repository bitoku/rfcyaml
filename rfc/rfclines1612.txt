This memo defines a portion of the Management Information Base (MIB) for use with network management protocols in the Internet community.
In particular, it describes a set of extensions which instrument DNS resolver functions.
This memo was produced by the DNS working group.
With the adoption of the Internet standard Network Management Framework [4,5,6,7], and with a large number of vendor implementations of these standards in commercially available products, it became possible to provide a higher level of effective network management in TCP/IP based internets than was previously available.
With the growth in the use of these standards, it has become possible to consider the management of other elements of the infrastructure beyond the basic TCP/IP protocols.
A key element of the TCP/IP infrastructure is the DNS.
Up to this point there has been no mechanism to integrate the management of the DNS with SNMP based managers.
This memo provides the mechanisms by which IP based management stations can effectively manage DNS resolver software in an integrated fashion.
We have defined DNS MIB objects to be used in conjunction with the Internet MIB to allow access to and control of DNS resolver software via SNMP by the Internet community.
The SNMPv2 Network Management Framework
Network Management Framework consists of four major components.
They are:  RFC 1442 which defines the SMI, the mechanisms used for describing and naming objects for the purpose of management.
STD 17, RFC 1213 defines MIB II, the core set of managed objects for the Internet suite of protocols.
RFC 1445 which defines the administrative and other architectural aspects of the framework.
RFC 1448 which defines the protocol used for network access to managed objects.
The Framework permits new objects to be defined for the purpose of experimentation and evaluation.
Object Definitions Managed objects are accessed via a virtual information store, termed the Management Information Base or MIB.
Objects in the MIB are defined using the subset of Abstract Syntax Notation One (ASN.1) defined in the SMI.
In particular, each object object type is named by an OBJECT IDENTIFIER, an administratively assigned name.
The object type together with an object instance serves to uniquely identify a specific instantiation of the object.
For human convenience, we often use a textual string, termed the descriptor, to refer to the object type.
In theory, the DNS world is pretty simple.
There are two kinds of entities: resolvers and name servers.
The real world, however, is not so simple.
Implementors have made widely differing choices about how to divide DNS functions between resolvers and servers.
They have also constructed various sorts of exotic hybrids.
The most difficult task in defining this MIB was to accommodate this wide range of entities without having to come up with a separate MIB for each.
We divided up the various DNS functions into two, non overlapping classes, called "resolver functions" and "name server functions."
A DNS entity that performs what we define as resolver functions contains a resolver, and therefore must implement the MIB groups required of all resolvers which are defined in this module.
Some resolvers also implement "optional" functions such as a cache, in which case they must also implement the cache group contained in this MIB.
A DNS entity which implements name server functions is considered to be a name server, and must implement the MIB groups required for name servers which are defined in a separate module.
If the same piece of software performs both resolver and server functions, we imagine that it contains both a resolver and a server and would thus implement both the DNS Server and DNS Resolver MIBs.
In our model, a resolver is a program (or piece thereof) which obtains resource records from servers.
Normally it does so at the behest of an application, but may also do so as part of its own operation.
A resolver sends DNS protocol queries and receives DNS protocol replies.
neither receives queries nor sends replies.
A full service resolver is one that knows how to resolve queries: it obtains the needed resource records by contacting a server authoritative for the records desired.
A stub resolver does not know how to resolve queries: it sends all queries to a local name server, setting the "recursion desired" flag to indicate that it hopes that the name server will be willing to resolve the query.
A resolver may (optionally) have a cache for remembering previously acquired resource records.
It may also have a negative cache for remembering names or data that have been determined not to exist.
A name server is a program (or piece thereof) that provides resource records to resolvers.
All references in this document to "a name server" imply "the name server's role"; in some cases the name server's role and the resolver's role might be combined into a single program.
A name server receives DNS protocol queries and sends DNS protocol replies.
neither sends queries nor receives replies.
As a consequence, name servers do not have caches.
Normally, a name server would expect to receive only those queries to which it could respond with authoritative information.
However, if a name server receives a query that it cannot respond to with purely authoritative information, it may choose to try to obtain the necessary additional information from a resolver which may or may not be a separate process.
Many of the objects included in this memo have been created from information contained in the DNS specifications [1,2], as amended and clarified by subsequent host requirements documents [3].
Other objects have been created based on experience with existing DNS management tools, expected operational needs, the statistics generated by existing DNS implementations, and the configuration files used by existing DNS implementations.
These objects have been ordered into groups as follows:  Resolver Configuration Group  Resolver Counter Group  Resolver Lame Delegation Group  Resolver Cache Group  Resolver Negative Cache Group  Resolver Optional Counter Group
This information has been converted into a standard form using the SNMPv2 SMI defined in [9].
For the most part, the descriptions are influenced by the DNS related RFCs noted above.
For example, the descriptions for counters used for the various types of queries of DNS records are influenced by the definitions used for the various record types found in [2].
Textual Conventions Several conceptual data types have been introduced as a textual conventions in the DNS Server MIB document and have been imported into this MIB module.
These additions will facilitate the common understanding of information used by the DNS.
No changes to the SMI or the SNMP are necessary to support these conventions.
Readers familiar with MIBs designed to manage entities in the lower layers of the Internet protocol suite may be surprised at the number of non enumerated integers used in this MIB to represent values such as DNS RR class and type numbers.
The reason for this choice is simple: the DNS itself is designed as an extensible protocol, allowing new classes and types of resource records to be added to the protocol without recoding the core DNS software.
non  enumerated integers to represent these data types in this MIB
allows the MIB to accommodate these changes as well.
IMPORTS MODULE IDENTITY, OBJECT TYPE, IpAddress,
SMI TEXTUAL CONVENTION, RowStatus, DisplayString FROM SNMPv2
TC MODULE COMPLIANCE, OBJECT GROUP FROM SNMPv2
CONF dns, DnsName, DnsNameAsIndex, DnsClass, DnsType, DnsQClass, DnsQType, DnsTime, DnsOpCode, DnsRespCode FROM DNS SERVER MIB;
dnsResMIB MODULE IDENTITY LAST UPDATED
Digital Equipment Corporation 110 Spit Brook Road ZKO1 3/H18 Nashua, NH 03062 2698
The MIB module for entities implementing the client (resolver) side of the Domain Name System (DNS) protocol."
groups in the DNS resolver MIB.
{ dnsResConfig 1 } dnsResConfigService OBJECT
"Kind of DNS resolution service provided: recursiveOnly(1) indicates a stub resolver.
iterativeOnly(2) indicates a normal full service resolver.
recursiveAndIterative(3) indicates a full service resolver which performs a mix of recursive and iterative queries."
MAX ACCESS  read write STATUS
"Limit on how many CNAMEs the resolver should allow before deciding that there's a CNAME loop.
Zero means that resolver has no explicit CNAME limit.
REFERENCE "RFC 1035 section 7.1."
current DESCRIPTION "Table of safety belt information used by the resolver when it hasn't got any better idea of where to send a query, such as when the resolver is booting or is a stub resolver."
{ dnsResConfig 4 } dnsResConfigSbeltEntry OBJECT TYPE SYNTAX
An entry in the resolver's Sbelt table.
Rows may be created or deleted at any time by the DNS resolver and by SNMP SET requests.
Whether the values changed via SNMP are saved in stable storage across `reset' operations is implementation specific.
dnsResConfigSbeltStatus RowStatus } dnsResConfigSbeltAddr OBJECT
The IP address of the Sbelt name server identified by this row of the table."
"The DNS name of a Sbelt nameserver identified by this row of the table.
A zero length string indicates that the name is not known by the resolver."
{ dnsResConfigSbeltEntry 2 } dnsResConfigSbeltRecursion OBJECT
recursive(2) indicates that resolver will be directing recursive queries to this name server (RD bit turned on).
recursiveAndIterative(3) indicates that the resolver will be directing both recursive and iterative queries to the server identified in this row of the table."
"This value identifies the preference for the name server identified in this row of the table.
The lower the value, the more desirable the resolver considers this server."
Queries sent to the name server identified by this row of the table are limited to those for names in the name subtree identified by this variable.
If no such limitation applies, the value of this variable is the name of the root domain (a DNS name consisting of a single zero octet)."
Row status column for this row of the Sbelt table."
"If the resolver has a persistent state (e.g., a process), this value will be the time elapsed since it started.
For software without persistant state, this value will be 0."
If the resolver has a persistent state (e.g., a process) and supports a `reset' operation (e.g., can be told to re read configuration files)
, this value will be the time elapsed since the last time the resolver was `reset.'
For software that does not have persistence or does not support a `reset' operation, this value will be zero."
MAX ACCESS  read write STATUS
current DESCRIPTION "Status/action object to reinitialize any persistant resolver state.
When set to reset(2), any persistant resolver state (such as a process) is reinitialized as if the resolver had just been started.
This value will never be returned by a read operation.
When read, one of the following values will be returned: other(1)
resolver in some unknown state; initializing(3)
resolver (re)initializing; running(4) resolver currently running."
SEQUENCE OF DnsResCounterByOpcodeEntry MAX ACCESS
current DESCRIPTION "Table of the current count of resolver queries and answers."
current DESCRIPTION "Entry in the resolver counter table.
Entries are indexed by DNS OpCode.
The index to this table.
The OpCodes that have already been defined are found in RFC 1035.
Total number of queries that have sent out by the resolver since initialization for the OpCode which is the index to this row of the table."
"Total number of responses that have been received by the resolver since initialization for the OpCode which is the index to this row of the table."
SEQUENCE OF DnsResCounterByRcodeEntry MAX ACCESS
current DESCRIPTION "Table of the current count of responses to resolver queries."
dnsResCounter 4 } dnsResCounterByRcodeEntry OBJECT TYPE SYNTAX
current DESCRIPTION "Entry in the resolver response table.
Entries are indexed by DNS response code.
The index to this table.
The Response Codes that have already been defined are found in RFC 1035.
no such data response (empty answer) was received."
the resolver attempted to add an entry to the Lame Delegation table but was unable to for some reason such as space constraints."
current DESCRIPTION "Table of name servers returning lame delegations.
A lame delegation has occured when a parent zone delegates authority for a child zone to a server that appears not to think that it is authoritative for the child zone in question."
current DESCRIPTION "Entry in lame delegation table.
Only the resolver may create rows in this table.
SNMP SET requests may be used to delete rows.
current DESCRIPTION "Source of lame delegation."
current DESCRIPTION "DNS name for which lame delegation was received."
current DESCRIPTION "DNS class of received lame delegation."
"How many times this lame delegation has been received."
"Status column for the lame delegation table.
Since only the agent (DNS resolver) creates rows in this table, the only values that a manager may write to this variable are active(1) and destroy(6)."
Resolver Cache Group dnsResCacheStatus OBJECT TYPE
current DESCRIPTION "Status/action for the resolver's cache.
enabled(1) means that the use of the cache is allowed.
Query operations can return this state.
disabled(2) means that the cache is not being used.
Query operations can return this state.
Setting this variable to clear(3) deletes the entire contents of the resolver's cache, but does not otherwise change the resolver's state.
The status will retain its previous value from before the clear operation (i.e., enabled(1) or disabled(2)).
The value of clear(3) can NOT be returned by a query operation."
current DESCRIPTION "Maximum Time To Live for RRs in this cache.
If the resolver does not implement a TTL ceiling, the value of this field should be zero."
E.g., RRs with suspiciously high TTLs, unsolicited root information, or that just don't appear to be relevant to the question the resolver asked.
"This table contains information about all the resource records currently in the resolver's cache."
An entry in the resolvers's cache.
Rows may be created only by the resolver.
SNMP SET requests may be used to delete rows.
dnsResCacheRRData OCTET STRING, dnsResCacheRRStatus RowStatus, dnsResCacheRRIndex Integer32, dnsResCacheRRPrettyName
current DESCRIPTION "Owner name of the Resource Record in the cache which is identified in this row of the table.
As described in RFC 1034, the owner of the record is the domain name were the RR is found."
REFERENCE "RFC 1034 section 3.6."
current DESCRIPTION "DNS class of the Resource Record in the cache which is identified in this row of the table."
current DESCRIPTION "DNS type of the Resource Record in the cache which is identified in this row of the table."
This is the initial TTL value which was received with the RR when it was originally received."
{ dnsResCacheRREntry 4 } dnsResCacheRRElapsedTTL OBJECT
Elapsed seconds since RR was received."
Host from which RR was received, 0.0.0.0 if unknown."
The value is in the format defined for the particular DNS class and type of the resource record."
REFERENCE "RFC 1035 section 3.2.1."
RowStatus MAX ACCESS  read write
"Status column for the resolver cache table.
Since only the agent (DNS resolver) creates rows in this table, the only values that a manager may write to this variable are active(1) and destroy(6)."
A value which makes entries in the table unique when the other index values (dnsResCacheRRName, dnsResCacheRRClass, and dnsResCacheRRType) do not provide a unique index."
This is identical to the dnsResCacheRRName variable, except that character case is preserved in this variable, per DNS conventions.
REFERENCE "RFC 1035 section 2.3.3."
Resolver Negative Cache Group dnsResNCacheStatus OBJECT TYPE
current DESCRIPTION "Status/action for the resolver's negative response cache.
enabled(1) means that the use of the negative response cache is allowed.
Query operations can return this state.
disabled(2) means that the negative response cache is not being used.
Query operations can return this state.
Setting this variable to clear(3) deletes the entire contents of the resolver's negative response cache.
The status will retain its previous value from before the clear operation (i.e., enabled(1) or disabled(2)).
The value of clear(3) can NOT be returned by a query operation."
current DESCRIPTION "Maximum Time To Live for cached authoritative errors.
If the resolver does not implement a TTL ceiling, the value of this field should be zero."
REFERENCE "RFC 1034 section 4.3.4."
"The resolver's negative response cache.
This table contains information about authoritative errors that have been cached by the resolver."
An entry in the resolver's negative response cache table.
Only the resolver can create rows.
SNMP SET requests may be used to delete rows.
dnsResNCacheErrPrettyName DnsName } dnsResNCacheErrQName OBJECT
"QNAME associated with a cached authoritative error."
REFERENCE "RFC 1034 section 3.7.1."
current DESCRIPTION "DNS QCLASS associated with a cached authoritative error."
current DESCRIPTION "DNS QTYPE associated with a cached authoritative error."
This should be the TTL as copied from the MINIMUM field of the SOA that accompanied the authoritative error, or a smaller value if the resolver implements a ceiling on negative response cache TTLs.
" REFERENCE "RFC 1034 section 4.3.4."
Elapsed seconds since authoritative error was received."
Host which sent the authoritative error, 0.0.0.0 if unknown."
The authoritative error that has been cached: nonexistantName(1) indicates an authoritative name error (RCODE   3).
noData(2) indicates an authoritative response with no error (RCODE   0) and no relevant data.
other(3) indicates some other cached authoritative error.
At present, no such errors are known to exist."
{ dnsResNCacheErrEntry 7 } dnsResNCacheErrStatus OBJECT TYPE SYNTAX
RowStatus MAX ACCESS  read write
"Status column for the resolver negative response cache table.
Since only the agent (DNS resolver) creates rows in this table, the only values that a manager may write to this variable are active(1) and destroy(6)."
This is identical to the dnsResNCacheErrQName variable, except that character case is preserved in this variable, per DNS conventions.
REFERENCE "RFC 1035 section 2.3.3."
"Number requests retransmitted for all reasons."
{ dnsResMIB 2 } dnsResConfigGroup OBJECT GROUP OBJECTS
A collection of objects providing basic configuration information for a DNS resolver implementation."
{ dnsResMIBGroups 1 } dnsResCounterGroup OBJECT GROUP
A collection of objects providing access to and control of a DNS resolver's cache."
{ dnsResMIBGroups 4 } dnsResNCacheGroup OBJECT GROUP OBJECTS
A collection of objects providing access to and control of a DNS resolver's negative response cache."
A collection of objects providing further instrumentation applicable to many but not all DNS resolvers."
"The compliance statement for agents implementing the DNS resolver MIB extensions."
This MIB module MANDATORY GROUPS { dnsResConfigGroup
, dnsResCounterGroup } GROUP   dnsResCacheGroup DESCRIPTION "
The resolver cache group is mandatory for resolvers that implement a cache."
GROUP   dnsResNCacheGroup DESCRIPTION "The resolver negative cache group is mandatory for resolvers that implement a negative response cache."
"The lame delegation group is unconditionally optional."
"The optional counters group is unconditionally optional."
"This object need not be writable."
"This object need not be writable."
"This object need not be writable."
"This object need not be writable."
"This object need not be writable."
"This object need not be writable."
"This object need not be writable."
"This object need not be writable."
"This object need not be writable."
Security Considerations Security issues are not discussed in this memo.
