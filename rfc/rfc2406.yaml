- title: __initial_text__
  contents:
  - '                IP Encapsulating Security Payload (ESP)

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (1998).  All Rights Reserved.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction..................................................2\n\
    \   2. Encapsulating Security Payload Packet Format..................3\n     \
    \ 2.1  Security Parameters Index................................4\n      2.2 \
    \ Sequence Number .........................................4\n      2.3  Payload\
    \ Data.............................................5\n      2.4  Padding (for\
    \ Encryption).................................5\n      2.5  Pad Length...............................................7\n\
    \      2.6  Next Header..............................................7\n     \
    \ 2.7  Authentication Data......................................7\n   3. Encapsulating\
    \ Security Protocol Processing....................7\n      3.1  ESP Header Location......................................7\n\
    \      3.2  Algorithms..............................................10\n     \
    \    3.2.1  Encryption Algorithms..............................10\n         3.2.2\
    \  Authentication Algorithms..........................10\n      3.3  Outbound\
    \ Packet Processing..............................10\n         3.3.1  Security\
    \ Association Lookup........................11\n         3.3.2  Packet Encryption..................................11\n\
    \         3.3.3  Sequence Number Generation.........................12\n     \
    \    3.3.4  Integrity Check Value Calculation..................12\n         3.3.5\
    \  Fragmentation......................................13\n      3.4  Inbound Packet\
    \ Processing...............................13\n         3.4.1  Reassembly.........................................13\n\
    \         3.4.2  Security Association Lookup........................13\n     \
    \    3.4.3  Sequence Number Verification.......................14\n         3.4.4\
    \  Integrity Check Value Verification.................15\n         3.4.5  Packet\
    \ Decryption..................................16\n   4. Auditing.....................................................17\n\
    \   5. Conformance Requirements.....................................18\n   6.\
    \ Security Considerations......................................18\n   7. Differences\
    \ from RFC 1827....................................18\n   Acknowledgements................................................19\n\
    \   References......................................................19\n   Disclaimer......................................................20\n\
    \   Author Information..............................................21\n   Full\
    \ Copyright Statement........................................22\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   The Encapsulating Security Payload (ESP) header is designed\
    \ to\n   provide a mix of security services in IPv4 and IPv6.  ESP may be\n  \
    \ applied alone, in combination with the IP Authentication Header (AH)\n   [KA97b],\
    \ or in a nested fashion, e.g., through the use of tunnel mode\n   (see \"Security\
    \ Architecture for the Internet Protocol\" [KA97a],\n   hereafter referred to\
    \ as the Security Architecture document).\n   Security services can be provided\
    \ between a pair of communicating\n   hosts, between a pair of communicating security\
    \ gateways, or between\n   a security gateway and a host.  For more details on\
    \ how to use ESP\n   and AH in various network environments, see the Security\
    \ Architecture\n   document [KA97a].\n   The ESP header is inserted after the\
    \ IP header and before the upper\n   layer protocol header (transport mode) or\
    \ before  an encapsulated IP\n   header (tunnel mode).  These modes are described\
    \ in more detail\n   below.\n   ESP is used to provide confidentiality, data origin\
    \ authentication,\n   connectionless integrity, an anti-replay service (a form\
    \ of partial\n   sequence integrity), and limited traffic flow confidentiality.\
    \  The\n   set of services provided depends on options selected at the time of\n\
    \   Security Association establishment and on the placement of the\n   implementation.\
    \  Confidentiality may be selected independent of all\n   other services.  However,\
    \ use of confidentiality without\n   integrity/authentication (either in ESP or\
    \ separately in AH) may\n   subject traffic to certain forms of active attacks\
    \ that could\n   undermine the confidentiality service (see [Bel96]).  Data origin\n\
    \   authentication and connectionless integrity are joint services\n   (hereafter\
    \ referred to jointly as \"authentication) and are offered as\n   an option in\
    \ conjunction with (optional) confidentiality.  The anti-\n   replay service may\
    \ be selected only if data origin authentication is\n   selected, and its election\
    \ is solely at the discretion of the\n   receiver.  (Although the default calls\
    \ for the sender to increment\n   the Sequence Number used for anti-replay, the\
    \ service is effective\n   only if the receiver checks the Sequence Number.) \
    \ Traffic flow\n   confidentiality requires selection of tunnel mode, and is most\n\
    \   effective if implemented at a security gateway, where traffic\n   aggregation\
    \ may be able to mask true source-destination patterns.\n   Note that although\
    \ both confidentiality and authentication are\n   optional, at least one of them\
    \ MUST be selected.\n   It is assumed that the reader is familiar with the terms\
    \ and concepts\n   described in the Security Architecture document.  In particular,\
    \ the\n   reader should be familiar with the definitions of security services\n\
    \   offered by ESP and AH, the concept of Security Associations, the ways\n  \
    \ in which ESP can be used in conjunction with the Authentication\n   Header (AH),\
    \ and the different key management options available for\n   ESP and AH.  (With\
    \ regard to the last topic, the current key\n   management options required for\
    \ both AH and ESP are manual keying and\n   automated keying via IKE [HC98].)\n\
    \   The keywords MUST, MUST NOT, REQUIRED, SHALL, SHALL NOT, SHOULD,\n   SHOULD\
    \ NOT, RECOMMENDED, MAY, and OPTIONAL, when they appear in this\n   document,\
    \ are to be interpreted as described in RFC 2119 [Bra97].\n"
- title: 2.  Encapsulating Security Payload Packet Format
  contents:
  - "2.  Encapsulating Security Payload Packet Format\n   The protocol header (IPv4,\
    \ IPv6, or Extension) immediately preceding\n   the ESP header will contain the\
    \ value 50 in its Protocol (IPv4) or\n   Next Header (IPv6, Extension) field [STD-2].\n\
    \ 0                   1                   2                   3\n 0 1 2 3 4 5\
    \ 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n"
- title: +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ ----
  contents:
  - '+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ ----

    '
- title: '|               Security Parameters Index (SPI)                 | ^Auth.'
  contents:
  - '|               Security Parameters Index (SPI)                 | ^Auth.

    '
- title: +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ |Cov-
  contents:
  - '+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ |Cov-

    '
- title: '|                      Sequence Number                          | |erage'
  contents:
  - '|                      Sequence Number                          | |erage

    '
- title: +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | ----
  contents:
  - '+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | ----

    '
- title: '|                    Payload Data* (variable)                   | |   ^'
  contents:
  - '|                    Payload Data* (variable)                   | |   ^

    '
- title: ~                                                               ~ |   |
  contents:
  - '~                                                               ~ |   |

    '
- title: '|                                                               | |Conf.'
  contents:
  - '|                                                               | |Conf.

    '
- title: +               +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ |Cov-
  contents:
  - '+               +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ |Cov-

    '
- title: '|               |     Padding (0-255 bytes)                     | |erage*'
  contents:
  - '|               |     Padding (0-255 bytes)                     | |erage*

    '
- title: +-+-+-+-+-+-+-+-+               +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ |   |
  contents:
  - '+-+-+-+-+-+-+-+-+               +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ |   |

    '
- title: '|                               |  Pad Length   | Next Header   | v   v'
  contents:
  - '|                               |  Pad Length   | Next Header   | v   v

    '
- title: +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ ------
  contents:
  - '+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ ------

    '
- title: '|                 Authentication Data (variable)                |'
  contents:
  - '|                 Authentication Data (variable)                |

    '
- title: ~                                                               ~
  contents:
  - '~                                                               ~

    '
- title: '|                                                               |'
  contents:
  - '|                                                               |

    '
- title: +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
  contents:
  - "+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n        *\
    \ If included in the Payload field, cryptographic\n          synchronization data,\
    \ e.g., an Initialization Vector (IV, see\n          Section 2.3), usually is\
    \ not encrypted per se, although it\n          often is referred to as being part\
    \ of the ciphertext.\n   The following subsections define the fields in the header\
    \ format.\n   \"Optional\" means that the field is omitted if the option is not\n\
    \   selected, i.e., it is present in neither the packet as transmitted\n   nor\
    \ as formatted for computation of an Integrity Check Value (ICV,\n   see Section\
    \ 2.7).  Whether or not an option is selected is defined as\n   part of Security\
    \ Association (SA) establishment.  Thus the format of\n   ESP packets for a given\
    \ SA is fixed, for the duration of the SA.  In\n   contrast, \"mandatory\" fields\
    \ are always present in the ESP packet\n   format, for all SAs.\n"
- title: 2.1  Security Parameters Index
  contents:
  - "2.1  Security Parameters Index\n   The SPI is an arbitrary 32-bit value that,\
    \ in combination with the\n   destination IP address and security protocol (ESP),\
    \ uniquely\n   identifies the Security Association for this datagram.  The set\
    \ of\n   SPI values in the range 1 through 255 are reserved by the Internet\n\
    \   Assigned Numbers Authority (IANA) for future use; a reserved SPI\n   value\
    \ will not normally be assigned by IANA unless the use of the\n   assigned SPI\
    \ value is specified in an RFC.  It is ordinarily selected\n   by the destination\
    \ system upon establishment of an SA (see the\n   Security Architecture document\
    \ for more details).  The SPI field is\n   mandatory.\n   The SPI value of zero\
    \ (0) is reserved for local, implementation-\n   specific use and MUST NOT be\
    \ sent on the wire.  For example, a key\n   management implementation MAY use\
    \ the zero SPI value to mean \"No\n   Security Association Exists\" during the\
    \ period when the IPsec\n   implementation has requested that its key management\
    \ entity establish\n   a new SA, but the SA has not yet been established.\n"
- title: 2.2  Sequence Number
  contents:
  - "2.2  Sequence Number\n   This unsigned 32-bit field contains a monotonically\
    \ increasing\n   counter value (sequence number).  It is mandatory and is always\n\
    \   present even if the receiver does not elect to enable the anti-replay\n  \
    \ service for a specific SA.  Processing of the Sequence Number field\n   is at\
    \ the discretion of the receiver, i.e., the sender MUST always\n   transmit this\
    \ field, but the receiver need not act upon it (see the\n   discussion of Sequence\
    \ Number Verification in the \"Inbound Packet\n   Processing\" section below).\n\
    \   The sender's counter and the receiver's counter are initialized to 0\n   when\
    \ an SA is established. (The first packet sent using a given SA\n   will have\
    \ a Sequence Number of 1; see Section 3.3.3 for more details\n   on how the Sequence\
    \ Number is generated.)  If anti-replay is enabled\n   (the default), the transmitted\
    \ Sequence Number must never be allowed\n   to cycle.  Thus, the sender's counter\
    \ and the receiver's counter MUST\n   be reset (by establishing a new SA and thus\
    \ a new key) prior to the\n   transmission of the 2^32nd packet on an SA.\n"
- title: 2.3  Payload Data
  contents:
  - "2.3  Payload Data\n   Payload Data is a variable-length field containing data\
    \ described by\n   the Next Header field. The Payload Data field is mandatory\
    \ and is an\n   integral number of bytes in length.  If the algorithm used to\
    \ encrypt\n   the payload requires cryptographic synchronization data, e.g., an\n\
    \   Initialization Vector (IV), then this data MAY be carried explicitly\n   in\
    \ the Payload field.  Any encryption algorithm that requires such\n   explicit,\
    \ per-packet synchronization data MUST indicate the length,\n   any structure\
    \ for such data, and the location of this data as part of\n   an RFC specifying\
    \ how the algorithm is used with ESP. If such\n   synchronization data is implicit,\
    \ the algorithm for deriving the data\n   MUST be part of the RFC.\n   Note that\
    \ with regard to ensuring the alignment of the (real)\n   ciphertext in the presence\
    \ of an IV:\n           o For some IV-based modes of operation, the receiver treats\n\
    \             the IV as the start of the ciphertext, feeding it into the\n   \
    \          algorithm directly.  In these modes, alignment of the start\n     \
    \        of the (real) ciphertext is not an issue at the receiver.\n         \
    \  o In some cases, the receiver reads the IV in separately from\n           \
    \  the ciphertext.  In these cases, the algorithm\n             specification\
    \ MUST address how alignment of the (real)\n             ciphertext is to be achieved.\n"
- title: 2.4  Padding (for Encryption)
  contents:
  - "2.4  Padding (for Encryption)\n   Several factors require or motivate use of\
    \ the Padding field.\n           o If an encryption algorithm is employed that\
    \ requires the\n             plaintext to be a multiple of some number of bytes,\
    \ e.g.,\n             the block size of a block cipher, the Padding field is used\n\
    \             to fill the plaintext (consisting of the Payload Data, Pad\n   \
    \          Length and Next Header fields, as well as the Padding) to\n       \
    \      the size required by the algorithm.\n           o Padding also may be required,\
    \ irrespective of encryption\n             algorithm requirements, to ensure that\
    \ the resulting\n             ciphertext terminates on a 4-byte boundary. Specifically,\n\
    \             the Pad Length and Next Header fields must be right aligned\n  \
    \           within a 4-byte word, as illustrated in the ESP packet\n         \
    \    format figure above, to ensure that the Authentication Data\n           \
    \  field (if present) is aligned on a 4-byte boundary.\n           o Padding beyond\
    \ that required for the algorithm or alignment\n             reasons cited above,\
    \ may be used to conceal the actual\n             length of the payload, in support\
    \ of (partial) traffic flow\n             confidentiality.  However, inclusion\
    \ of such additional\n             padding has adverse bandwidth implications\
    \ and thus its use\n             should be undertaken with care.\n   The sender\
    \ MAY add 0-255 bytes of padding.  Inclusion of the Padding\n   field in an ESP\
    \ packet is optional, but all implementations MUST\n   support generation and\
    \ consumption of padding.\n           a. For the purpose of ensuring that the\
    \ bits to be encrypted\n              are a multiple of the algorithm's blocksize\
    \ (first bullet\n              above), the padding computation applies to the\
    \ Payload\n              Data exclusive of the IV, the Pad Length, and Next Header\n\
    \              fields.\n           b. For the purposes of ensuring that the Authentication\
    \ Data\n              is aligned on a 4-byte boundary (second bullet above), the\n\
    \              padding computation applies to the Payload Data inclusive\n   \
    \           of the IV, the Pad Length, and Next Header fields.\n   If Padding\
    \ bytes are needed but the encryption algorithm does not\n   specify the padding\
    \ contents, then the following default processing\n   MUST be used.  The Padding\
    \ bytes are initialized with a series of\n   (unsigned, 1-byte) integer values.\
    \  The first padding byte appended\n   to the plaintext is numbered 1, with subsequent\
    \ padding bytes making\n   up a monotonically increasing sequence: 1, 2, 3, ...\
    \  When this\n   padding scheme is employed, the receiver SHOULD inspect the Padding\n\
    \   field.  (This scheme was selected because of its relative simplicity,\n  \
    \ ease of implementation in hardware, and because it offers limited\n   protection\
    \ against certain forms of \"cut and paste\" attacks in the\n   absence of other\
    \ integrity measures, if the receiver checks the\n   padding values upon decryption.)\n\
    \   Any encryption algorithm that requires Padding other than the default\n  \
    \ described above, MUST define the Padding contents (e.g., zeros or\n   random\
    \ data) and any required receiver processing of these Padding\n   bytes in an\
    \ RFC specifying how the algorithm is used with ESP.  In\n   such circumstances,\
    \ the content of the Padding field will be\n   determined by the encryption algorithm\
    \ and mode selected and defined\n   in the corresponding algorithm RFC.  The relevant\
    \ algorithm RFC MAY\n   specify that a receiver MUST inspect the Padding field\
    \ or that a\n   receiver MUST inform senders of how the receiver will handle the\n\
    \   Padding field.\n"
- title: 2.5  Pad Length
  contents:
  - "2.5  Pad Length\n   The Pad Length field indicates the number of pad bytes immediately\n\
    \   preceding it.  The range of valid values is 0-255, where a value of\n   zero\
    \ indicates that no Padding bytes are present.  The Pad Length\n   field is mandatory.\n"
- title: 2.6  Next Header
  contents:
  - "2.6  Next Header\n   The Next Header is an 8-bit field that identifies the type\
    \ of data\n   contained in the Payload Data field, e.g., an extension header in\n\
    \   IPv6 or an upper layer protocol identifier.  The value of this field\n   is\
    \ chosen from the set of IP Protocol Numbers defined in the most\n   recent \"\
    Assigned Numbers\" [STD-2] RFC from the Internet Assigned\n   Numbers Authority\
    \ (IANA).  The Next Header field is mandatory.\n"
- title: 2.7  Authentication Data
  contents:
  - "2.7  Authentication Data\n   The Authentication Data is a variable-length field\
    \ containing an\n   Integrity Check Value (ICV) computed over the ESP packet minus\
    \ the\n   Authentication Data.  The length of the field is specified by the\n\
    \   authentication function selected.  The Authentication Data field is\n   optional,\
    \ and is included only if the authentication service has been\n   selected for\
    \ the SA in question.  The authentication algorithm\n   specification MUST specify\
    \ the length of the ICV and the comparison\n   rules and processing steps for\
    \ validation.\n"
- title: 3.  Encapsulating Security Protocol Processing
  contents:
  - '3.  Encapsulating Security Protocol Processing

    '
- title: 3.1  ESP Header Location
  contents:
  - "3.1  ESP Header Location\n   Like AH, ESP may be employed in two ways: transport\
    \ mode or tunnel\n   mode.  The former mode is applicable only to host implementations\
    \ and\n   provides protection for upper layer protocols, but not the IP header.\n\
    \   (In this mode, note that for \"bump-in-the-stack\" or \"bump-in-the-\n   wire\"\
    \ implementations, as defined in the Security Architecture\n   document, inbound\
    \ and outbound IP fragments may require an IPsec\n   implementation to perform\
    \ extra IP reassembly/fragmentation in order\n   to both conform to this specification\
    \ and provide transparent IPsec\n   support.  Special care is required to perform\
    \ such operations within\n   these implementations when multiple interfaces are\
    \ in use.)\n   In transport mode, ESP is inserted after the IP header and before\
    \ an\n   upper layer protocol, e.g., TCP, UDP, ICMP, etc. or before any other\n\
    \   IPsec headers that have already been inserted.  In the context of\n   IPv4,\
    \ this translates to placing ESP after the IP header (and any\n   options that\
    \ it contains), but before the upper layer protocol.\n   (Note that the term \"\
    transport\" mode should not be misconstrued as\n   restricting its use to TCP\
    \ and UDP. For example, an ICMP message MAY\n   be sent using either \"transport\"\
    \ mode or \"tunnel\" mode.)  The\n   following diagram illustrates ESP transport\
    \ mode positioning for a\n   typical IPv4 packet, on a \"before and after\" basis.\
    \ (The \"ESP\n   trailer\" encompasses any Padding, plus the Pad Length, and Next\n\
    \   Header fields.)\n                 BEFORE APPLYING ESP\n            ----------------------------\n\
    \      IPv4  |orig IP hdr  |     |      |\n            |(any options)| TCP | Data\
    \ |\n            ----------------------------\n                 AFTER APPLYING\
    \ ESP\n            -------------------------------------------------\n      IPv4\
    \  |orig IP hdr  | ESP |     |      |   ESP   | ESP|\n            |(any options)|\
    \ Hdr | TCP | Data | Trailer |Auth|\n            -------------------------------------------------\n\
    \                                |<----- encrypted ---->|\n                  \
    \        |<------ authenticated ----->|\n   In the IPv6 context, ESP is viewed\
    \ as an end-to-end payload, and thus\n   should appear after hop-by-hop, routing,\
    \ and fragmentation extension\n   headers.  The destination options extension\
    \ header(s) could appear\n   either before or after the ESP header depending on\
    \ the semantics\n   desired.  However, since ESP protects only fields after the\
    \ ESP\n   header, it generally may be desirable to place the destination\n   options\
    \ header(s) after the ESP header.  The following diagram\n   illustrates ESP transport\
    \ mode positioning for a typical IPv6 packet.\n                     BEFORE APPLYING\
    \ ESP\n            ---------------------------------------\n      IPv6  |    \
    \         | ext hdrs |     |      |\n            | orig IP hdr |if present| TCP\
    \ | Data |\n            ---------------------------------------\n            \
    \         AFTER APPLYING ESP\n            ---------------------------------------------------------\n\
    \      IPv6  | orig |hop-by-hop,dest*,|   |dest|   |    | ESP   | ESP|\n     \
    \       |IP hdr|routing,fragment.|ESP|opt*|TCP|Data|Trailer|Auth|\n          \
    \  ---------------------------------------------------------\n               \
    \                          |<---- encrypted ---->|\n                         \
    \            |<---- authenticated ---->|\n                * = if present, could\
    \ be before ESP, after ESP, or both\n   ESP and AH headers can be combined in\
    \ a variety of modes.  The IPsec\n   Architecture document describes the combinations\
    \ of security\n   associations that must be supported.\n   Tunnel mode ESP may\
    \ be employed in either hosts or security gateways.\n   When ESP is implemented\
    \ in a security gateway (to protect subscriber\n   transit traffic), tunnel mode\
    \ must be used.  In tunnel mode, the\n   \"inner\" IP header carries the ultimate\
    \ source and destination\n   addresses, while an \"outer\" IP header may contain\
    \ distinct IP\n   addresses, e.g., addresses of security gateways.  In tunnel\
    \ mode, ESP\n   protects the entire inner IP packet, including the entire inner\
    \ IP\n   header. The position of ESP in tunnel mode, relative to the outer IP\n\
    \   header, is the same as for ESP in transport mode.  The following\n   diagram\
    \ illustrates ESP tunnel mode positioning for typical IPv4 and\n   IPv6 packets.\n\
    \            -----------------------------------------------------------\n   \
    \   IPv4  | new IP hdr* |     | orig IP hdr*  |   |    | ESP   | ESP|\n      \
    \      |(any options)| ESP | (any options) |TCP|Data|Trailer|Auth|\n         \
    \   -----------------------------------------------------------\n            \
    \                    |<--------- encrypted ---------->|\n                    \
    \      |<----------- authenticated ---------->|\n            ------------------------------------------------------------\n\
    \      IPv6  | new* |new ext |   | orig*|orig ext |   |    | ESP   | ESP|\n  \
    \          |IP hdr| hdrs*  |ESP|IP hdr| hdrs *  |TCP|Data|Trailer|Auth|\n    \
    \        ------------------------------------------------------------\n      \
    \                          |<--------- encrypted ----------->|\n             \
    \               |<---------- authenticated ---------->|\n               * = if\
    \ present, construction of outer IP hdr/extensions\n                   and modification\
    \ of inner IP hdr/extensions is\n                   discussed below.\n"
- title: 3.2  Algorithms
  contents:
  - "3.2  Algorithms\n   The mandatory-to-implement algorithms are described in Section\
    \ 5,\n   \"Conformance Requirements\".  Other algorithms MAY be supported.  Note\n\
    \   that although both confidentiality and authentication are optional,\n   at\
    \ least one of these services MUST be selected hence both algorithms\n   MUST\
    \ NOT be simultaneously NULL.\n"
- title: 3.2.1  Encryption Algorithms
  contents:
  - "3.2.1  Encryption Algorithms\n   The encryption algorithm employed is specified\
    \ by the SA.  ESP is\n   designed for use with symmetric encryption algorithms.\
    \  Because IP\n   packets may arrive out of order, each packet must carry any\
    \ data\n   required to allow the receiver to establish cryptographic\n   synchronization\
    \ for decryption.  This data may be carried explicitly\n   in the payload field,\
    \ e.g., as an IV (as described above), or the\n   data may be derived from the\
    \ packet header.  Since ESP makes\n   provision for padding of the plaintext,\
    \ encryption algorithms\n   employed with ESP may exhibit either block or stream\
    \ mode\n   characteristics.  Note that since encryption (confidentiality) is\n\
    \   optional, this algorithm may be \"NULL\".\n"
- title: 3.2.2  Authentication Algorithms
  contents:
  - "3.2.2  Authentication Algorithms\n   The authentication algorithm employed for\
    \ the ICV computation is\n   specified by the SA.  For point-to-point communication,\
    \ suitable\n   authentication algorithms include keyed Message Authentication\
    \ Codes\n   (MACs) based on symmetric encryption algorithms (e.g., DES) or on\n\
    \   one-way hash functions (e.g., MD5 or SHA-1).  For multicast\n   communication,\
    \ one-way hash algorithms combined with asymmetric\n   signature algorithms are\
    \ appropriate, though performance and space\n   considerations currently preclude\
    \ use of such algorithms. Note that\n   since authentication is optional, this\
    \ algorithm may be \"NULL\".\n"
- title: 3.3  Outbound Packet Processing
  contents:
  - "3.3  Outbound Packet Processing\n   In transport mode, the sender encapsulates\
    \ the upper layer protocol\n   information in the ESP header/trailer, and retains\
    \ the specified IP\n   header (and any IP extension headers in the IPv6 context).\
    \  In tunnel\n   mode, the outer and inner IP header/extensions can be inter-related\n\
    \   in a variety of ways.  The construction of the outer IP\n   header/extensions\
    \ during the encapsulation process is described in\n   the Security Architecture\
    \ document.  If there is more than one IPsec\n   header/extension required by\
    \ security policy, the order of the\n   application of the security headers MUST\
    \ be defined by security\n   policy.\n"
- title: 3.3.1  Security Association Lookup
  contents:
  - "3.3.1  Security Association Lookup\n   ESP is applied to an outbound packet only\
    \ after an IPsec\n   implementation determines that the packet is associated with\
    \ an SA\n   that calls for ESP processing.  The process of determining what, if\n\
    \   any, IPsec processing is applied to outbound traffic is described in\n   the\
    \ Security Architecture document.\n"
- title: 3.3.2  Packet Encryption
  contents:
  - "3.3.2  Packet Encryption\n   In this section, we speak in terms of encryption\
    \ always being applied\n   because of the formatting implications.  This is done\
    \ with the\n   understanding that \"no confidentiality\" is offered by using the\
    \ NULL\n   encryption algorithm.  Accordingly, the sender:\n       1. encapsulates\
    \ (into the ESP Payload field):\n               - for transport mode -- just the\
    \ original upper layer\n                 protocol information.\n             \
    \  - for tunnel mode -- the entire original IP datagram.\n       2. adds any necessary\
    \ padding.\n       3. encrypts the result (Payload Data, Padding, Pad Length,\
    \ and\n          Next Header) using the key, encryption algorithm, algorithm\n\
    \          mode indicated by the SA and cryptographic synchronization\n      \
    \    data (if any).\n               - If explicit cryptographic synchronization\
    \ data, e.g.,\n                 an IV, is indicated, it is input to the encryption\n\
    \                 algorithm per the algorithm specification and placed\n     \
    \            in the Payload field.\n               - If implicit cryptographic\
    \ synchronication data, e.g.,\n                 an IV, is indicated, it is constructed\
    \ and input to\n                 the encryption algorithm as per the algorithm\n\
    \                 specification.\n   The exact steps for constructing the outer\
    \ IP header depend on the\n   mode (transport or tunnel) and are described in\
    \ the Security\n   Architecture document.\n   If authentication is selected, encryption\
    \ is performed first, before\n   the authentication, and the encryption does not\
    \ encompass the\n   Authentication Data field.  This order of processing facilitates\n\
    \   rapid detection and rejection of replayed or bogus packets by the\n   receiver,\
    \ prior to decrypting the packet, hence potentially reducing\n   the impact of\
    \ denial of service attacks.  It also allows for the\n   possibility of parallel\
    \ processing of packets at the receiver, i.e.,\n   decryption can take place in\
    \ parallel with authentication.  Note that\n   since the Authentication Data is\
    \ not protected by encryption, a keyed\n   authentication algorithm must be employed\
    \ to compute the ICV.\n"
- title: 3.3.3  Sequence Number Generation
  contents:
  - "3.3.3  Sequence Number Generation\n   The sender's counter is initialized to\
    \ 0 when an SA is established.\n   The sender increments the Sequence Number for\
    \ this SA and inserts the\n   new value into the Sequence Number field.  Thus\
    \ the first packet sent\n   using a given SA will have a Sequence Number of 1.\n\
    \   If anti-replay is enabled (the default), the sender checks to ensure\n   that\
    \ the counter has not cycled before inserting the new value in the\n   Sequence\
    \ Number field.  In other words, the sender MUST NOT send a\n   packet on an SA\
    \ if doing so would cause the Sequence Number to cycle.\n   An attempt to transmit\
    \ a packet that would result in Sequence Number\n   overflow is an auditable event.\
    \ (Note that this approach to Sequence\n   Number management does not require\
    \ use of modular arithmetic.)\n   The sender assumes anti-replay is enabled as\
    \ a default, unless\n   otherwise notified by the receiver (see 3.4.3).  Thus,\
    \ if the counter\n   has cycled, the sender will set up a new SA and key (unless\
    \ the SA\n   was configured with manual key management).\n   If anti-replay is\
    \ disabled, the sender does not need to monitor or\n   reset the counter, e.g.,\
    \ in the case of manual key management (see\n   Section 5).  However, the sender\
    \ still increments the counter and\n   when it reaches the maximum value, the\
    \ counter rolls over back to\n   zero.\n"
- title: 3.3.4  Integrity Check Value Calculation
  contents:
  - "3.3.4  Integrity Check Value Calculation\n   If authentication is selected for\
    \ the SA, the sender computes the ICV\n   over the ESP packet minus the Authentication\
    \ Data.  Thus the SPI,\n   Sequence Number, Payload Data, Padding (if present),\
    \ Pad Length, and\n   Next Header are all encompassed by the ICV computation.\
    \  Note that\n   the last 4 fields will be in ciphertext form, since encryption\
    \ is\n   performed prior to authentication.\n   For some authentication algorithms,\
    \ the byte string over which the\n   ICV computation is performed must be a multiple\
    \ of a blocksize\n   specified by the algorithm.  If the length of this byte string\
    \ does\n   not match the blocksize requirements for the algorithm, implicit\n\
    \   padding MUST be appended to the end of the ESP packet, (after the\n   Next\
    \ Header field) prior to ICV computation.  The padding octets MUST\n   have a\
    \ value of zero.  The blocksize (and hence the length of the\n   padding) is specified\
    \ by the algorithm specification.  This padding\n   is not transmitted with the\
    \ packet.  Note that MD5 and SHA-1 are\n   viewed as having a 1-byte blocksize\
    \ because of their internal padding\n   conventions.\n"
- title: 3.3.5  Fragmentation
  contents:
  - "3.3.5  Fragmentation\n   If necessary, fragmentation is performed after ESP processing\
    \ within\n   an IPsec implementation.  Thus, transport mode ESP is applied only\
    \ to\n   whole IP datagrams (not to IP fragments).  An IP packet to which ESP\n\
    \   has been applied may itself be fragmented by routers en route, and\n   such\
    \ fragments must be reassembled prior to ESP processing at a\n   receiver.  In\
    \ tunnel mode, ESP is applied to an IP packet, the\n   payload of which may be\
    \ a fragmented IP packet.  For example, a\n   security gateway or a \"bump-in-the-stack\"\
    \ or \"bump-in-the-wire\" IPsec\n   implementation (as defined in the Security\
    \ Architecture document) may\n   apply tunnel mode ESP to such fragments.\n  \
    \ NOTE: For transport mode -- As mentioned at the beginning of Section\n   3.1,\
    \ bump-in-the-stack and bump-in-the-wire implementations may have\n   to first\
    \ reassemble a packet fragmented by the local IP layer, then\n   apply IPsec,\
    \ and then fragment the resulting packet.\n   NOTE: For IPv6 -- For bump-in-the-stack\
    \ and bump-in-the-wire\n   implementations, it will be necessary to walk through\
    \ all the\n   extension headers to determine if there is a fragmentation header\
    \ and\n   hence that the packet needs reassembling prior to IPsec processing.\n"
- title: 3.4  Inbound Packet Processing
  contents:
  - '3.4  Inbound Packet Processing

    '
- title: 3.4.1  Reassembly
  contents:
  - "3.4.1  Reassembly\n   If required, reassembly is performed prior to ESP processing.\
    \  If a\n   packet offered to ESP for processing appears to be an IP fragment,\n\
    \   i.e., the OFFSET field is non-zero or the MORE FRAGMENTS flag is set,\n  \
    \ the receiver MUST discard the packet; this is an auditable event. The\n   audit\
    \ log entry for this event SHOULD include the SPI value,\n   date/time received,\
    \ Source Address, Destination Address, Sequence\n   Number, and (in IPv6) the\
    \ Flow ID.\n   NOTE: For packet reassembly, the current IPv4 spec does NOT require\n\
    \   either the zero'ing of the OFFSET field or the clearing of the MORE\n   FRAGMENTS\
    \ flag.  In order for a reassembled packet to be processed by\n   IPsec (as opposed\
    \ to discarded as an apparent fragment), the IP code\n   must do these two things\
    \ after it reassembles a packet.\n"
- title: 3.4.2  Security Association Lookup
  contents:
  - "3.4.2  Security Association Lookup\n   Upon receipt of a (reassembled) packet\
    \ containing an ESP Header, the\n   receiver determines the appropriate (unidirectional)\
    \ SA, based on the\n   destination IP address, security protocol (ESP), and the\
    \ SPI.  (This\n   process is described in more detail in the Security Architecture\n\
    \   document.)  The SA indicates whether the Sequence Number field will\n   be\
    \ checked, whether the Authentication Data field should be present,\n   and it\
    \ will specify the algorithms and keys to be employed for\n   decryption and ICV\
    \ computations (if applicable).\n   If no valid Security Association exists for\
    \ this session (for\n   example, the receiver has no key), the receiver MUST discard\
    \ the\n   packet; this is an auditable event.  The audit log entry for this\n\
    \   event SHOULD include the SPI value, date/time received, Source\n   Address,\
    \ Destination Address, Sequence Number, and (in IPv6) the\n   cleartext Flow ID.\n"
- title: 3.4.3  Sequence Number Verification
  contents:
  - "3.4.3  Sequence Number Verification\n   All ESP implementations MUST support\
    \ the anti-replay service, though\n   its use may be enabled or disabled by the\
    \ receiver on a per-SA basis.\n   This service MUST NOT be enabled unless the\
    \ authentication service\n   also is enabled for the SA, since otherwise the Sequence\
    \ Number field\n   has not been integrity protected.  (Note that there are no\
    \ provisions\n   for managing transmitted Sequence Number values among multiple\n\
    \   senders directing traffic to a single SA (irrespective of whether the\n  \
    \ destination address is unicast, broadcast, or multicast).  Thus the\n   anti-replay\
    \ service SHOULD NOT be used in a multi-sender environment\n   that employs a\
    \ single SA.)\n   If the receiver does not enable anti-replay for an SA, no inbound\n\
    \   checks are performed on the Sequence Number.  However, from the\n   perspective\
    \ of the sender, the default is to assume that anti-replay\n   is enabled at the\
    \ receiver.  To avoid having the sender do\n   unnecessary sequence number monitoring\
    \ and SA setup (see section\n   3.3.3), if an SA establishment protocol such as\
    \ IKE is employed, the\n   receiver SHOULD notify the sender, during SA establishment,\
    \ if the\n   receiver will not provide anti-replay protection.\n   If the receiver\
    \ has enabled the anti-replay service for this SA, the\n   receive packet counter\
    \ for the SA MUST be initialized to zero when\n   the SA is established.  For\
    \ each received packet, the receiver MUST\n   verify that the packet contains\
    \ a Sequence Number that does not\n   duplicate the Sequence Number of any other\
    \ packets received during\n   the life of this SA.  This SHOULD be the first ESP\
    \ check applied to a\n   packet after it has been matched to an SA, to speed rejection\
    \ of\n   duplicate packets.\n   Duplicates are rejected through the use of a sliding\
    \ receive window.\n   (How the window is implemented is a local matter, but the\
    \ following\n   text describes the functionality that the implementation must\n\
    \   exhibit.)  A MINIMUM window size of 32 MUST be supported; but a\n   window\
    \ size of 64 is preferred and SHOULD be employed as the default.\n   Another window\
    \ size (larger than the MINIMUM) MAY be chosen by the\n   receiver.  (The receiver\
    \ does NOT notify the sender of the window\n   size.)\n   The \"right\" edge of\
    \ the window represents the highest, validated\n   Sequence Number value received\
    \ on this SA.  Packets that contain\n   Sequence Numbers lower than the \"left\"\
    \ edge of the window are\n   rejected.  Packets falling within the window are\
    \ checked against a\n   list of received packets within the window.  An efficient\
    \ means for\n   performing this check, based on the use of a bit mask, is described\n\
    \   in the Security Architecture document.\n   If the received packet falls within\
    \ the window and is new, or if the\n   packet is to the right of the window, then\
    \ the receiver proceeds to\n   ICV verification.  If the ICV validation fails,\
    \ the receiver MUST\n   discard the received IP datagram as invalid; this is an\
    \ auditable\n   event.  The audit log entry for this event SHOULD include the\
    \ SPI\n   value, date/time received, Source Address, Destination Address, the\n\
    \   Sequence Number, and (in IPv6) the Flow ID.  The receive window is\n   updated\
    \ only if the ICV verification succeeds.\n   DISCUSSION:\n      Note that if the\
    \ packet is either inside the window and new, or is\n      outside the window\
    \ on the \"right\" side, the receiver MUST\n      authenticate the packet before\
    \ updating the Sequence Number window\n      data.\n"
- title: 3.4.4  Integrity Check Value Verification
  contents:
  - "3.4.4  Integrity Check Value Verification\n   If authentication has been selected,\
    \ the receiver computes the ICV\n   over the ESP packet minus the Authentication\
    \ Data using the specified\n   authentication algorithm and verifies that it is\
    \ the same as the ICV\n   included in the Authentication Data field of the packet.\
    \  Details of\n   the computation are provided below.\n   If the computed and\
    \ received ICV's match, then the datagram is valid,\n   and it is accepted.  If\
    \ the test fails, then the receiver MUST\n   discard the received IP datagram\
    \ as invalid; this is an auditable\n   event.  The log data SHOULD include the\
    \ SPI value, date/time\n   received, Source Address, Destination Address, the\
    \ Sequence Number,\n   and (in IPv6) the cleartext Flow ID.\n   DISCUSSION:\n\
    \      Begin by removing and saving the ICV value (Authentication Data\n     \
    \ field).  Next check the overall length of the ESP packet minus the\n      Authentication\
    \ Data.  If implicit padding is required, based on\n      the blocksize of the\
    \ authentication algorithm, append zero-filled\n      bytes to the end of the\
    \ ESP packet directly after the Next Header\n      field.  Perform the ICV computation\
    \ and compare the result with\n      the saved value, using the comparison rules\
    \ defined by the\n      algorithm specification.  (For example, if a digital signature\
    \ and\n      one-way hash are used for the ICV computation, the matching\n   \
    \   process is more complex.)\n"
- title: 3.4.5  Packet Decryption
  contents:
  - "3.4.5  Packet Decryption\n   As in section 3.3.2, \"Packet Encryption\", we speak\
    \ here in terms of\n   encryption always being applied because of the formatting\n\
    \   implications.  This is done with the understanding that \"no\n   confidentiality\"\
    \ is offered by using the NULL encryption algorithm.\n   Accordingly, the receiver:\n\
    \       1. decrypts the ESP Payload Data, Padding, Pad Length, and Next\n    \
    \      Header using the key, encryption algorithm, algorithm mode,\n         \
    \ and cryptographic synchronization data (if any), indicated by\n          the\
    \ SA.\n               - If explicit cryptographic synchronization data, e.g.,\n\
    \                 an IV, is indicated, it is taken from the Payload\n        \
    \         field and input to the decryption algorithm as per the\n           \
    \      algorithm specification.\n               - If implicit cryptographic synchronization\
    \ data, e.g.,\n                 an IV, is indicated, a local version of the IV\
    \ is\n                 constructed and input to the decryption algorithm as\n\
    \                 per the algorithm specification.\n       2. processes any padding\
    \ as specified in the encryption\n          algorithm specification.  If the default\
    \ padding scheme (see\n          Section 2.4) has been employed, the receiver\
    \ SHOULD inspect\n          the Padding field before removing the padding prior\
    \ to\n          passing the decrypted data to the next layer.\n       3. reconstructs\
    \ the original IP datagram from:\n               - for transport mode -- original\
    \ IP header plus the\n                 original upper layer protocol information\
    \ in the ESP\n                 Payload field\n               - for tunnel mode\
    \ -- tunnel IP header + the entire IP\n                 datagram in the ESP Payload\
    \ field.\n   The exact steps for reconstructing the original datagram depend on\n\
    \   the mode (transport or tunnel) and are described in the Security\n   Architecture\
    \ document.  At a minimum, in an IPv6 context, the\n   receiver SHOULD ensure\
    \ that the decrypted data is 8-byte aligned, to\n   facilitate processing by the\
    \ protocol identified in the Next Header\n   field.\n   If authentication has\
    \ been selected, verification and decryption MAY\n   be performed serially or\
    \ in parallel.  If performed serially, then\n   ICV verification SHOULD be performed\
    \ first.  If performed in\n   parallel, verification MUST be completed before\
    \ the decrypted packet\n   is passed on for further processing.  This order of\
    \ processing\n   facilitates rapid detection and rejection of replayed or bogus\n\
    \   packets by the receiver, prior to decrypting the packet, hence\n   potentially\
    \ reducing the impact of denial of service attacks.  Note:\n   If the receiver\
    \ performs decryption in parallel with authentication,\n   care must be taken\
    \ to avoid possible race conditions with regard to\n   packet access and reconstruction\
    \ of the decrypted packet.\n   Note that there are several ways in which the decryption\
    \ can \"fail\":\n        a. The selected SA may not be correct -- The SA may be\n\
    \           mis-selected due to tampering with the SPI, destination\n        \
    \   address, or IPsec protocol type fields. Such errors, if they\n           map\
    \ the packet to another extant SA, will be\n           indistinguishable from\
    \ a corrupted packet, (case c).\n           Tampering with the SPI can be detected\
    \ by use of\n           authentication.  However, an SA mismatch might still occur\n\
    \           due to tampering with the IP Destination Address or the IPsec\n  \
    \         protocol type field.\n        b. The pad length or pad values could\
    \ be erroneous -- Bad pad\n           lengths or pad values can be detected irrespective\
    \ of the use\n           of authentication.\n        c. The encrypted ESP packet\
    \ could be corrupted -- This can be\n           detected if authentication is\
    \ selected for the SA.,\n   In case (a) or (c), the erroneous result of the decryption\
    \ operation\n   (an invalid IP datagram or transport-layer frame) will not\n \
    \  necessarily be detected by IPsec, and is the responsibility of later\n   protocol\
    \ processing.\n"
- title: 4.  Auditing
  contents:
  - "4.  Auditing\n   Not all systems that implement ESP will implement auditing.\
    \  However,\n   if ESP is incorporated into a system that supports auditing, then\
    \ the\n   ESP implementation MUST also support auditing and MUST allow a system\n\
    \   administrator to enable or disable auditing for ESP.  For the most\n   part,\
    \ the granularity of auditing is a local matter.  However,\n   several auditable\
    \ events are identified in this specification and for\n   each of these events\
    \ a minimum set of information that SHOULD be\n   included in an audit log is\
    \ defined.  Additional information also MAY\n   be included in the audit log for\
    \ each of these events, and additional\n   events, not explicitly called out in\
    \ this specification, also MAY\n   result in audit log entries.  There is no requirement\
    \ for the\n   receiver to transmit any message to the purported sender in response\n\
    \   to the detection of an auditable event, because of the potential to\n   induce\
    \ denial of service via such action.\n"
- title: 5.  Conformance Requirements
  contents:
  - "5.  Conformance Requirements\n   Implementations that claim conformance or compliance\
    \ with this\n   specification MUST implement the ESP syntax and processing described\n\
    \   here and MUST comply with all requirements of the Security\n   Architecture\
    \ document.  If the key used to compute an ICV is manually\n   distributed, correct\
    \ provision of the anti-replay service would\n   require correct maintenance of\
    \ the counter state at the sender, until\n   the key is replaced, and there likely\
    \ would be no automated recovery\n   provision if counter overflow were imminent.\
    \  Thus a compliant\n   implementation SHOULD NOT provide this service in conjunction\
    \ with\n   SAs that are manually keyed.  A compliant ESP implementation MUST\n\
    \   support the following mandatory-to-implement algorithms:\n             - DES\
    \ in CBC mode [MD97]\n             - HMAC with MD5 [MG97a]\n             - HMAC\
    \ with SHA-1 [MG97b]\n             - NULL Authentication algorithm\n         \
    \    - NULL Encryption algorithm\n   Since ESP encryption and authentication are\
    \ optional, support for the\n   2 \"NULL\" algorithms is required to maintain\
    \ consistency with the way\n   these services are negotiated.  NOTE that while\
    \ authentication and\n   encryption can each be \"NULL\", they MUST NOT both be\
    \ \"NULL\".\n"
- title: 6.  Security Considerations
  contents:
  - "6.  Security Considerations\n   Security is central to the design of this protocol,\
    \ and thus security\n   considerations permeate the specification.  Additional\
    \ security-\n   relevant aspects of using the IPsec protocol are discussed in\
    \ the\n   Security Architecture document.\n"
- title: 7.  Differences from RFC 1827
  contents:
  - "7.  Differences from RFC 1827\n   This document differs from RFC 1827 [ATK95]\
    \ in several significant\n   ways.  The major difference is that, this document\
    \ attempts to\n   specify a complete framework and context for ESP, whereas RFC\
    \ 1827\n   provided a \"shell\" that was completed through the definition of\n\
    \   transforms.  The combinatorial growth of transforms motivated the\n   reformulation\
    \ of the ESP specification as a more complete document,\n   with options for security\
    \ services that may be offered in the context\n   of ESP.  Thus, fields previously\
    \ defined in transform documents are\n   now part of this base ESP specification.\
    \  For example, the fields\n   necessary to support authentication (and anti-replay)\
    \ are now defined\n   here, even though the provision of this service is an option.\
    \  The\n   fields used to support padding for encryption, and for next protocol\n\
    \   identification, are now defined here as well.  Packet processing\n   consistent\
    \ with the definition of these fields also is included in\n   the document.\n"
- title: Acknowledgements
  contents:
  - "Acknowledgements\n   Many of the concepts embodied in this specification were\
    \ derived from\n   or influenced by the US Government's SP3 security protocol,\
    \ ISO/IEC's\n   NLSP, or from the proposed swIPe security protocol.  [SDNS89,\
    \ ISO92,\n   IB93].\n   For over 3 years, this document has evolved through multiple\
    \ versions\n   and iterations.  During this time, many people have contributed\n\
    \   significant ideas and energy to the process and the documents\n   themselves.\
    \  The authors would like to thank Karen Seo for providing\n   extensive help\
    \ in the review, editing, background research, and\n   coordination for this version\
    \ of the specification.  The authors\n   would also like to thank the members\
    \ of the IPsec and IPng working\n   groups, with special mention of the efforts\
    \ of (in alphabetic order):\n   Steve Bellovin, Steve Deering, Phil Karn, Perry\
    \ Metzger, David\n   Mihelcic, Hilarie Orman, Norman Shulman, William Simpson\
    \ and Nina\n   Yuan.\n"
- title: References
  contents:
  - "References\n   [ATK95]   Atkinson, R., \"IP Encapsulating Security Payload (ESP)\"\
    ,\n             RFC 1827, August 1995.\n   [Bel96]   Steven M. Bellovin, \"Problem\
    \ Areas for the IP Security\n             Protocols\", Proceedings of the Sixth\
    \ Usenix Unix Security\n             Symposium, July, 1996.\n   [Bra97]   Bradner,\
    \ S., \"Key words for use in RFCs to Indicate\n             Requirement Level\"\
    , BCP 14, RFC 2119, March 1997.\n   [HC98]    Harkins, D., and D. Carrel, \"The\
    \ Internet Key Exchange\n             (IKE)\", RFC 2409, November 1998.\n   [IB93]\
    \    John Ioannidis & Matt Blaze, \"Architecture and\n             Implementation\
    \ of Network-layer Security Under Unix\",\n             Proceedings of the USENIX\
    \ Security Symposium, Santa Clara,\n             CA, October 1993.\n   [ISO92]\
    \   ISO/IEC JTC1/SC6, Network Layer Security Protocol, ISO-IEC\n             DIS\
    \ 11577, International Standards Organisation, Geneva,\n             Switzerland,\
    \ 29 November 1992.\n   [KA97a]   Kent, S., and R. Atkinson, \"Security Architecture\
    \ for the\n             Internet Protocol\", RFC 2401, November 1998.\n   [KA97b]\
    \   Kent, S., and R. Atkinson, \"IP Authentication Header\", RFC\n           \
    \  2402, November 1998.\n   [MD97]    Madson, C., and N. Doraswamy, \"The ESP\
    \ DES-CBC Cipher\n             Algorithm With Explicit IV\", RFC 2405, November\
    \ 1998.\n   [MG97a]   Madson, C., and R. Glenn, \"The Use of HMAC-MD5-96 within\n\
    \             ESP and AH\", RFC 2403, November 1998.\n   [MG97b]   Madson, C.,\
    \ and R. Glenn, \"The Use of HMAC-SHA-1-96 within\n             ESP and AH\",\
    \ RFC 2404, November 1998.\n   [STD-2]   Reynolds, J., and J. Postel, \"Assigned\
    \ Numbers\", STD 2, RFC\n             1700, October 1994.  See also:\n       \
    \      http://www.iana.org/numbers.html\n   [SDNS89]  SDNS Secure Data Network\
    \ System, Security Protocol 3, SP3,\n             Document SDN.301, Revision 1.5,\
    \ 15 May 1989, as published\n             in NIST Publication NIST-IR-90-4250,\
    \ February 1990.\n"
- title: Disclaimer
  contents:
  - "Disclaimer\n   The views and specification here are those of the authors and\
    \ are not\n   necessarily those of their employers.  The authors and their\n \
    \  employers specifically disclaim responsibility for any problems\n   arising\
    \ from correct or incorrect implementation or use of this\n   specification.\n"
- title: Author Information
  contents:
  - "Author Information\n   Stephen Kent\n   BBN Corporation\n   70 Fawcett Street\n\
    \   Cambridge, MA  02140\n   USA\n   Phone: +1 (617) 873-3988\n   EMail: kent@bbn.com\n\
    \   Randall Atkinson\n   @Home Network\n   425 Broadway,\n   Redwood City, CA\
    \  94063\n   USA\n   Phone: +1 (415) 569-5000\n   EMail: rja@corp.home.net\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (1998).  All\
    \ Rights Reserved.\n   This document and translations of it may be copied and\
    \ furnished to\n   others, and derivative works that comment on or otherwise explain\
    \ it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
