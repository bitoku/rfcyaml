- title: __initial_text__
  contents:
  - "        Coexistence between Version 1, Version 2, and Version 3\n         of\
    \ the Internet-standard Network Management Framework\n"
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This document specifies an Internet Best Current Practices\
    \ for the\n   Internet Community, and requests discussion and suggestions for\n\
    \   improvements.  Distribution of this memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2003).  All Rights Reserved.\n"
- title: Abstract
  contents:
  - "Abstract\n   The purpose of this document is to describe coexistence between\n\
    \   version 3 of the Internet-standard Network Management Framework,\n   (SNMPv3),\
    \ version 2 of the Internet-standard Network Management\n   Framework (SNMPv2),\
    \ and the original Internet-standard Network\n   Management Framework (SNMPv1).\
    \  This document also describes how to\n   convert MIB modules from SMIv1 format\
    \ to SMIv2 format.  This document\n   obsoletes RFC 2576.\n"
- title: Table Of Contents
  contents:
  - "Table Of Contents\n   1.  Overview . . . . . . . . . . . . . . . . . . . . .\
    \ . . . . .    3\n       1.1.  SNMPv1 . . . . . . . . . . . . . . . . . . . .\
    \ . . . .    4\n       1.2.  SNMPv2 . . . . . . . . . . . . . . . . . . . . .\
    \ . . .    4\n       1.3.  SNMPv3 . . . . . . . . . . . . . . . . . . . . . .\
    \ . .    5\n   2.  SMI and Management Information Mappings. . . . . . . . . .\
    \ .    5\n       2.1.  MIB Modules. . . . . . . . . . . . . . . . . . . . . .\
    \    6\n             2.1.1.  Object Definitions . . . . . . . . . . . . . .  \
    \  6\n             2.1.2.  Trap and Notification Definitions  . . . . . .    8\n\
    \       2.2.  Compliance Statements. . . . . . . . . . . . . . . . .    9\n  \
    \     2.3.  Capabilities Statements. . . . . . . . . . . . . . . .    9\n   3.\
    \  Translating Notification Parameters. . . . . . . . . . . . .   10\n       3.1.\
    \  Translating  SNMPv1  Notification  Parameters  to\n             SNMPv2 Notification\
    \ Parameters . . . . . . . . . . . .   11\n       3.2.  Translating  SNMPv2  Notification\
    \  Parameters  to\n             SNMPv1 Notification Parameters . . . . . . . .\
    \ . . . .   12\n   4.  Approaches to Coexistence in a Multi-lingual Network .\
    \ . . .   14\n       4.1.  SNMPv1 and SNMPv2 Access to MIB Data . . . . . . .\
    \ . .   14\n       4.2.  Multi-lingual implementations. . . . . . . . . . . .\
    \ .   15\n             4.2.1.  Command Generator. . . . . . . . . . . . . . .\
    \   15\n             4.2.2.  Command Responder. . . . . . . . . . . . . . .  \
    \ 16\n                     4.2.2.1.  Handling Counter64 . . . . . . . . .   16\n\
    \                     4.2.2.2.  Mapping SNMPv2 Exceptions. . . . . .   17\n  \
    \                             4.2.2.2.1. Mapping noSuchObject\n              \
    \                            and noSuchInstance. . . .   18\n                \
    \               4.2.2.2.2. Mapping endOfMibView. . .   18\n                  \
    \   4.2.2.3.  Processing An SNMPv1 GetReques . . .   18\n                    \
    \ 4.2.2.4.  Processing An SNMPv1 GetNextRequest.   19\n                     4.2.2.5.\
    \  Processing An SNMPv1 SetRequest. . .   20\n             4.2.3.  Notification\
    \ Originator. . . . . . . . . . . .   21\n             4.2.4.  Notification Receiver.\
    \ . . . . . . . . . . . .   21\n       4.3.  Proxy Implementations. . . . . .\
    \ . . . . . . . . . . .   22\n             4.3.1.  Upstream Version Greater Than\
    \ Downstream\n                     Version. . . . . . . . . . . . . . . . . .\
    \ . .   22\n             4.3.2.  Upstream Version Less Than Downstream Version.\
    \   23\n       4.4.  Error Status Mappings. . . . . . . . . . . . . . . . .  \
    \ 25\n   5.  Message Processing Models and Security Models. . . . . . . .   26\n\
    \       5.1.  Mappings . . . . . . . . . . . . . . . . . . . . . . .   26\n  \
    \     5.2.  The SNMPv1 MP Model and SNMPv1  Community-based\n             Security\
    \ Model . . . . . . . . . . . . . . . . . . . .   26\n             5.2.1.  Processing\
    \ An Incoming Request . . . . . . . .   27\n             5.2.2.  Generating An\
    \ Outgoing Response. . . . . . . .   29\n             5.2.3.  Generating An Outgoing\
    \ Notification. . . . . .   29\n             5.2.4.  Proxy Forwarding Of Requests\
    \ . . . . . . . . .   30\n       5.3.  The SNMP Community MIB Module. . . . .\
    \ . . . . . . . .   30\n   6.  Intellectual Property Statement. . . . . . . .\
    \ . . . . . . .   42\n   7.  Acknowledgments. . . . . . . . . . . . . . . . .\
    \ . . . . . .   43\n   8.  Security Considerations. . . . . . . . . . . . . .\
    \ . . . . .   43\n   9.  References . . . . . . . . . . . . . . . . . . . . .\
    \ . . . .   44\n       9.1.  Normative References . . . . . . . . . . . . . .\
    \ . . .   44\n       9.2.  Informative References . . . . . . . . . . . . . .\
    \ . .   46\n   Appendix A.  Change Log. . . . . . . . . . . . . . . . . . . .\
    \ .   47\n       A.1. Changes From RFC 2576 . . . . . . . . . . . . . . . . .\
    \   47\n       A.2. Changes Between RFC 1908 and RFC 2576 . . . . . . . . .  \
    \ 49\n   Editors' Addresses . . . . . . . . . . . . . . . . . . . . . . .   50\n\
    \   Full Copyright Statement . . . . . . . . . . . . . . . . . . . .   51\n"
- title: 1.  Overview
  contents:
  - "1.  Overview\n   The purpose of this document is to describe coexistence between\n\
    \   version 3 of the Internet-standard Network Management Framework,\n   termed\
    \ the SNMP version 3 framework (SNMPv3), version 2 of the\n   Internet-standard\
    \ Network Management Framework, termed the SNMP\n   version 2 framework (SNMPv2),\
    \ and the original Internet-standard\n   Network Management Framework (SNMPv1).\n\
    \   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\"\
    ,\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in\
    \ this\n   document are to be interpreted as described in RFC 2119 [RFC2119].\n\
    \   There are four general aspects of coexistence described in this\n   document.\
    \  Each of these is described in a separate section:\n   -  Conversion of MIB\
    \ documents between SMIv1 and SMIv2 formats is\n      documented in section 2.\n\
    \   -  Mapping of notification parameters is documented in section 3.\n   -  Approaches\
    \ to coexistence between entities which support the\n      various versions of\
    \ SNMP in a multi-lingual network is documented\n      in section 4.  This section\
    \ addresses the processing of protocol\n      operations in multi-lingual implementations,\
    \ as well as behaviour\n      of proxy implementations.\n   -  The SNMPv1 Message\
    \ Processing Model and Community-Based Security\n      Model, which provides mechanisms\
    \ for adapting SNMPv1 into the\n      View-Based Access Control Model (VACM) [20],\
    \ is documented in\n      section 5 (this section also addresses the SNMPv2c Message\n\
    \      Processing Model and Community-Based Security Model).\n"
- title: 1.1.  SNMPv1
  contents:
  - "1.1.  SNMPv1\n   SNMPv1 is defined by these documents:\n   -  STD 15, RFC 1157\
    \ [RFC1157] which defines the Simple Network\n      Management Protocol (SNMPv1),\
    \ the protocol used for network access\n      to managed objects.\n   -  STD 16,\
    \ RFC 1155 [RFC1155] which defines the Structure of\n      Management Information\
    \ (SMIv1), the mechanisms used for describing\n      and naming objects for the\
    \ purpose of management.\n   -  STD 16, RFC 1212 [RFC1212] which defines a more\
    \ concise\n      description mechanism, which is wholly consistent with the SMIv1.\n\
    \   -  RFC 1215 [RFC1215] which defines a convention for defining Traps\n    \
    \  for use with the SMIv1.\n   Note that throughout this document, the term 'SMIv1'\
    \ is used.  This\n   term generally refers to the information presented in RFC\
    \ 1155, RFC\n   1212, and RFC 1215.\n"
- title: 1.2.  SNMPv2
  contents:
  - "1.2.  SNMPv2\n   SNMPv2 is defined by these documents:\n   -  STD 58, RFC 2578\
    \ which defines Version 2 of the Structure of\n      Management Information (SMIv2)\
    \ [RFC2578].\n   -  STD 58, RFC 2579 which defines common MIB \"Textual Conventions\"\
    \n      [RFC2579].\n   -  STD 58, RFC 2580 which defines Conformance Statements\
    \ and\n      requirements for defining agent and manager capabilities\n      [RFC2580].\n\
    \   -  STD 62, RFC 3416 which defines the Protocol Operations used in\n      processing\
    \ [RFC3416].\n   -  STD 62, RFC 3417 which defines the Transport Mappings used\
    \ \"on the\n      wire\" [RFC3417].\n   -  STD 62, RFC 3418 which defines the\
    \ basic Management Information\n      Base for monitoring and controlling some\
    \ basic common functions of\n      SNMP entities [RFC3418].\n   Note that SMIv2\
    \ as used throughout this document refers to the first\n   three documents listed\
    \ above (RFCs 2578, 2579, and 2580).\n   The following document augments the definition\
    \ of SNMPv2:\n   -  RFC 1901 [RFC1901] is an Experimental definition for using\
    \ SNMPv2\n      PDUs within a community-based message wrapper.  This is referred\n\
    \      to throughout this document as SNMPv2c.\n"
- title: 1.3.  SNMPv3
  contents:
  - "1.3.  SNMPv3\n   SNMPv3 is defined by these documents:\n   -  STD 62, RFC 3411\
    \ which defines an Architecture for Describing SNMP\n      Management Frameworks\
    \ [RFC3411].\n   -  STD 62, RFC 3412 which defines Message Processing and Dispatching\n\
    \      [RFC3412].\n   -  STD 62, RFC 3413 which defines various SNMP Applications\n\
    \      [RFC3413].\n   -  STD 62, RFC 3414 which defines the User-based Security\
    \ Model\n      (USM), providing for both Authenticated and Private (encrypted)\n\
    \      SNMP messages [RFC3414].\n   -  STD 62, RFC 3415 which defines the View-based\
    \ Access Control Model\n      (VACM), providing the ability to limit access to\
    \ different MIB\n      objects on a per-user basis [RFC3415].\n   SNMPv3 also\
    \ uses the SNMPv2 definitions of RFCs 3416 through 3418 and\n   the SMIv2 definitions\
    \ of 2578 through 2580 described above.  Note\n   that text throughout this document\
    \ that refers to SNMPv2 PDU types\n   and protocol operations applies to both\
    \ SNMPv2c and SNMPv3.\n"
- title: 2.  SMI and Management Information Mappings
  contents:
  - "2.  SMI and Management Information Mappings\n   The SMIv2 approach towards describing\
    \ collections of managed objects\n   is nearly a proper superset of the approach\
    \ defined in the SMIv1.\n   For example, both approaches use an adapted subset\
    \ of ASN.1 [ASN1] as\n   the basis for a formal descriptive notation.  Indeed,\
    \ one might note\n   that the SMIv2 approach largely codifies the existing practice\
    \ for\n   defining MIB modules, based on extensive experience with the SMIv1.\n\
    \   The following sections consider the three areas:  MIB modules,\n   compliance\
    \ statements, and capabilities statements.\n"
- title: 2.1.  MIB Modules
  contents:
  - "2.1.  MIB Modules\n   MIB modules defined using the SMIv1 may continue to be\
    \ used with\n   protocol versions which use SNMPv2 PDUs.  However, for SMIv1 MIB\n\
    \   modules to conform to the SMIv2, the following changes SHALL be made:\n"
- title: 2.1.1.  Object Definitions
  contents:
  - "2.1.1.  Object Definitions\n   In general, conversion of a MIB module does not\
    \ require the\n   deprecation of the objects contained therein.  If the definition\
    \ of\n   an object is truly inadequate for its intended purpose, the object\n\
    \   SHALL be deprecated or obsoleted, otherwise deprecation is not\n   required.\n\
    \   (1)  The IMPORTS statement MUST reference SNMPv2-SMI, instead of\n       \
    \ RFC1155-SMI and RFC-1212.\n   (2)  The MODULE-IDENTITY macro MUST be invoked\
    \ immediately after any\n        IMPORTs statement.\n   (3)  For any object with\
    \ a SYNTAX clause value of Counter, the object\n        MUST have the value of\
    \ its SYNTAX clause changed to Counter32.\n   (4)  For any object with a SYNTAX\
    \ clause value of Gauge, the object\n        MUST have the value of its SYNTAX\
    \ clause changed to Gauge32, or\n        Unsigned32 where appropriate.\n   (5)\
    \  For all objects, the ACCESS clause MUST be replaced by a MAX-\n        ACCESS\
    \ clause.  The value of the MAX-ACCESS clause SHALL be the\n        same as that\
    \ of the ACCESS clause unless some other value makes\n        \"protocol sense\"\
    \ as the maximal level of access for the object.\n        In particular, object\
    \ types for which instances can be\n        explicitly created by a protocol set\
    \ operation, SHALL have a\n        MAX-ACCESS clause of \"read-create\".  If the\
    \ value of the ACCESS\n        clause is \"write-only\", then the value of the\
    \ MAX-ACCESS clause\n        MUST be \"read-write\", and the DESCRIPTION clause\
    \ SHALL note that\n        reading this object will result in implementation-specific\n\
    \        results.  Note that in SMIv1, the ACCESS clause specifies the\n     \
    \   minimal required access, while in SMIv2, the MAX-ACCESS clause\n        specifies\
    \ the maximum allowed access.  This should be considered\n        when converting\
    \ an ACCESS clause to a MAX-ACCESS clause.\n   (6)  For all objects, if the value\
    \ of the STATUS clause is\n        \"mandatory\" or \"optional\", the value MUST\
    \ be replaced with\n        \"current\", \"deprecated\", or \"obsolete\" depending\
    \ on the current\n        usage of such objects.\n   (7)  For any object not containing\
    \ a DESCRIPTION clause, the object\n        MUST have a DESCRIPTION clause defined.\n\
    \   (8)  For any object corresponding to a conceptual row which does not\n   \
    \     have an INDEX clause, the object MUST have either an INDEX\n        clause\
    \ or an AUGMENTS clause defined.\n   (9)  If any INDEX clause contains a reference\
    \ to an object with a\n        syntax of NetworkAddress, then a new object MUST\
    \ be created and\n        placed in this INDEX clause immediately preceding the\
    \ object\n        whose syntax is NetworkAddress.  This new object MUST have a\n\
    \        syntax of INTEGER, it MUST be not-accessible, and its value MUST\n  \
    \      always be 1.  The effect of this, and the preceding bullet, is\n      \
    \  to allow one to convert a MIB module in SMIv1 format to one in\n        SMIv2\
    \ format, and then use it with the SNMPv1 protocol with no\n        impact to\
    \ existing SNMPv1 agents and managers.\n   (10) For any object with a SYNTAX of\
    \ NetworkAddress, the SYNTAX MUST\n        be changed to IpAddress.  Note that\
    \ the use of NetworkAddress in\n        new MIB documents is strongly discouraged\
    \ (in fact, new MIB\n        documents should be written using SMIv2, which does\
    \ not define\n        NetworkAddress).\n   (11) For any object containing a DEFVAL\
    \ clause with an OBJECT\n        IDENTIFIER value which is expressed as a collection\
    \ of sub-\n        identifiers, the value MUST be changed to reference a single\n\
    \        ASN.1 identifier.  This may require defining a series of new\n      \
    \  administrative assignments (OBJECT IDENTIFIERS) in order to\n        define\
    \ the single ASN.1 identifier.\n   (12) One or more OBJECT-GROUPS MUST be defined,\
    \ and related objects\n        MUST be collected into appropriate groups.  Note\
    \ that SMIv2\n        requires all OBJECT-TYPEs to be a member of at least one\n\
    \        OBJECT-GROUP.\n   (13) For any non-columnar object that is instanced\
    \ as if it were\n        immediately subordinate to a conceptual row, the value\
    \ of the\n        STATUS clause of that object MUST be changed to \"obsolete\"\
    .\n   (14) For any conceptual row object that is not immediately\n        subordinate\
    \ to a conceptual table, the value of the STATUS\n        clause of that object\
    \ (and all subordinate objects) MUST be\n        changed to \"obsolete\".\n  \
    \ Other changes are desirable, but not necessary:\n   (1)  Creation and deletion\
    \ of conceptual rows is inconsistent using\n        the SMIv1.  The SMIv2 corrects\
    \ this.  As such, if the MIB module\n        undergoes review early in its lifetime,\
    \ and it contains\n        conceptual tables which allow creation and deletion\
    \ of\n        conceptual rows, then the objects relating to those tables MAY\n\
    \        be deprecated and replaced with objects defined using the new\n     \
    \   approach.  The approach based on SMIv2 can be found in section 7\n       \
    \ of RFC 2578 [RFC2578], and the RowStatus and StorageType\n        TEXTUAL-CONVENTIONs\
    \ are described in section 2 of RFC 2579\n        [RFC2579].\n   (2)  For any\
    \ object with an integer-valued SYNTAX clause, in which\n        the corresponding\
    \ INTEGER does not have a range restriction\n        (i.e., the INTEGER has neither\
    \ a defined set of named-number\n        enumerations nor an assignment of lower-\
    \ and upper-bounds on its\n        value), the object SHOULD have the value of\
    \ its SYNTAX clause\n        changed to Integer32, or have an appropriate range\
    \ specified.\n   (3)  For any object with a string-valued SYNTAX clause, in which\
    \ the\n        corresponding OCTET STRING does not have a size restriction\n \
    \       (i.e., the OCTET STRING has no assignment of lower- and upper-\n     \
    \   bounds on its length), the bounds for the size of the object\n        SHOULD\
    \ be defined.\n   (4)  All textual conventions informally defined in the MIB module\n\
    \        SHOULD be redefined using the TEXTUAL-CONVENTION macro.  Such a\n   \
    \     change would not necessitate deprecating objects previously\n        defined\
    \ using an informal textual convention.\n   (5)  For any object which represents\
    \ a measurement in some kind of\n        units, a UNITS clause SHOULD be added\
    \ to the definition of that\n        object.\n   (6)  For any conceptual row which\
    \ is an extension of another\n        conceptual row, i.e., for which subordinate\
    \ columnar objects\n        both exist and are identified via the same semantics\
    \ as the\n        other conceptual row, an AUGMENTS clause SHOULD be used in place\n\
    \        of the INDEX clause for the object corresponding to the\n        conceptual\
    \ row which is an extension.\n"
- title: 2.1.2.  Trap and Notification Definitions
  contents:
  - "2.1.2.  Trap and Notification Definitions\n   If a MIB module is changed to conform\
    \ to the SMIv2, then each\n   occurrence of the TRAP-TYPE macro MUST be changed\
    \ to a corresponding\n   invocation of the NOTIFICATION-TYPE macro:\n   (1)  The\
    \ IMPORTS statement MUST NOT reference RFC-1215 [RFC1215], and\n        MUST reference\
    \ SNMPv2-SMI instead.\n   (2)  The ENTERPRISE clause MUST be removed.\n   (3)\
    \  The VARIABLES clause MUST be renamed to the OBJECTS clause.\n   (4)  A STATUS\
    \ clause MUST be added, with an appropriate value.\n        Normally the value\
    \ should be 'current', although 'deprecated' or\n        'obsolete' may be used\
    \ as needed.\n   (5)  The value of an invocation of the NOTIFICATION-TYPE macro\
    \ is an\n        OBJECT IDENTIFIER, not an INTEGER, and MUST be changed\n    \
    \    accordingly.  Specifically, if the value of the ENTERPRISE\n        clause\
    \ is not 'snmp' then the value of the invocation SHALL be\n        the value of\
    \ the ENTERPRISE clause extended with two sub-\n        identifiers, the first\
    \ of which has the value 0, and the second\n        has the value of the invocation\
    \ of the TRAP-TYPE.  If the value\n        of the ENTERPRISE clause is 'snmp',\
    \ then the value of the\n        invocation of the NOTIFICATION-TYPE macro SHALL\
    \ be mapped in the\n        same manner as described in section 3.1 in this document.\n\
    \   (6)  A DESCRIPTION clause MUST be added, if not already present.\n   (7) \
    \ One or more NOTIFICATION-GROUPs MUST be defined, and related\n        notifications\
    \ MUST be collected into those groups.  Note that\n        SMIv2 requires that\
    \ all NOTIFICATION-TYPEs be a member of at\n        least one NOTIFICATION-GROUP.\n"
- title: 2.2.  Compliance Statements
  contents:
  - "2.2.  Compliance Statements\n   For those information modules which are \"standards\
    \ track\", a\n   corresponding invocation of the MODULE-COMPLIANCE macro and related\n\
    \   OBJECT-GROUP and/or NOTIFICATION-GROUP macros MUST be included within\n  \
    \ the information module (or in a companion information module), and\n   any commentary\
    \ text in the information module which relates to\n   compliance SHOULD be removed.\
    \  Typically this editing can occur when\n   the information module undergoes\
    \ review.\n   Note that a MODULE-COMPLIANCE statement is not required for a MIB\n\
    \   document that is not on the standards track (for example, an\n   enterprise\
    \ MIB), though it may be useful in some circumstances to\n   define a MODULE-COMPLIANCE\
    \ statement for such a MIB document.\n"
- title: 2.3.  Capabilities Statements
  contents:
  - "2.3.  Capabilities Statements\n   RFC 1303 [RFC1303] uses the MODULE-CONFORMANCE\
    \ macro to describe an\n   agent's capabilities with respect to one or more MIB\
    \ modules.\n   Converting such a description for use with the SMIv2 requires these\n\
    \   changes:\n   (1)  The macro name AGENT-CAPABILITIES MUST be used instead of\n\
    \        MODULE-CONFORMANCE.\n   (2)  The STATUS clause MUST be added, with a\
    \ value of 'current'.\n   (3)  All occurrences of the CREATION-REQUIRES clause\
    \ MUST either be\n        omitted if appropriate, or be changed such that the\
    \ semantics\n        are consistent with RFC 2580 [RFC2580].\n   In order to ease\
    \ coexistence, object groups defined in an SMIv1\n   compliant MIB module may\
    \ be referenced by the INCLUDES clause of an\n   invocation of the AGENT-CAPABILITIES\
    \ macro:  upon encountering a\n   reference to an OBJECT IDENTIFIER subtree defined\
    \ in an SMIv1 MIB\n   module, all leaf objects which are subordinate to the subtree\
    \ and\n   have a STATUS clause value of mandatory are deemed to be INCLUDEd.\n\
    \   (Note that this method is ambiguous when different revisions of an\n   SMIv1\
    \ MIB have different sets of mandatory objects under the same\n   subtree; in\
    \ such cases, the only solution is to rewrite the MIB using\n   the SMIv2 in order\
    \ to define the object groups unambiguously.)\n"
- title: 3.  Translating Notification Parameters
  contents:
  - "3.  Translating Notification Parameters\n   This section describes how parameters\
    \ used for generating\n   notifications are translated between the format used\
    \ for SNMPv1\n   notification protocol operations and the format used for SNMPv2\n\
    \   notification protocol operations.  The parameters used to generate a\n   notification\
    \ are called 'notification parameters'.  The format of\n   parameters used for\
    \ SNMPv1 notification protocol operations is\n   referred to in this document\
    \ as 'SNMPv1 notification parameters'.\n   The format of parameters used for SNMPv2\
    \ notification protocol\n   operations is referred to in this document as 'SNMPv2\
    \ notification\n   parameters'.\n   The situations where notification parameters\
    \ MUST be translated are:\n   -  When an entity generates a set of notification\
    \ parameters in a\n      particular format, and the configuration of the entity\
    \ indicates\n      that the notification must be sent using an SNMP message version\n\
    \      that requires the other format for notification parameters.\n   -  When\
    \ a proxy receives a notification that was sent using an SNMP\n      message version\
    \ that requires one format of notification\n      parameters, and must forward\
    \ the notification using an SNMP\n      message version that requires the other\
    \ format of notification\n      parameters.\n   In addition, it MAY be desirable\
    \ to translate notification parameters\n   in a notification receiver application\
    \ in order to present\n   notifications to the end user in a consistent format.\n\
    \   Note that for the purposes of this section, the set of notification\n   parameters\
    \ is independent of whether the notification is to be sent\n   as a trap or an\
    \ inform.\n   SNMPv1 notification parameters consist of:\n   -  An enterprise\
    \ parameter (OBJECT IDENTIFIER).\n   -  An agent-addr parameter (NetworkAddress).\n\
    \   -  A generic-trap parameter (INTEGER).\n   -  A specific-trap parameter (INTEGER).\n\
    \   -  A time-stamp parameter (TimeTicks).\n   -  A list of variable-bindings\
    \ (VarBindList).\n   SNMPv2 notification parameters consist of:\n   -  A sysUpTime\
    \ parameter (TimeTicks).  This appears in the first\n      variable-binding in\
    \ an SNMPv2-Trap-PDU or InformRequest-PDU.\n   -  An snmpTrapOID parameter (OBJECT\
    \ IDENTIFIER).  This appears in the\n      second variable-binding in an SNMPv2-Trap-PDU\
    \ or InformRequest-\n      PDU, and is equal to the value portion of that variable-binding\n\
    \      (not the name portion, as both the name and value are OBJECT\n      IDENTIFIERs).\n\
    \   -  A list of variable-bindings (VarBindList).  This refers to all but\n  \
    \    the first two variable-bindings in an SNMPv2-Trap-PDU or\n      InformRequest-PDU.\n"
- title: 3.1.  Translating SNMPv1 Notification Parameters to SNMPv2 Notification
  contents:
  - "3.1.  Translating SNMPv1 Notification Parameters to SNMPv2 Notification\n   \
    \   Parameters\n   The following procedure describes how to translate SNMPv1\n\
    \   notification parameters into SNMPv2 notification parameters:\n   (1)  The\
    \ SNMPv2 sysUpTime parameter SHALL be taken directly from the\n        SNMPv1\
    \ time-stamp parameter.\n   (2)  If the SNMPv1 generic-trap parameter is 'enterpriseSpecific(6)',\n\
    \        the SNMPv2 snmpTrapOID parameter SHALL be the concatenation of\n    \
    \    the SNMPv1 enterprise parameter and two additional sub-\n        identifiers,\
    \ '0', and the SNMPv1 specific-trap parameter.\n   (3)  If the SNMPv1 generic-trap\
    \ parameter is not\n        'enterpriseSpecific(6)', the SNMPv2 snmpTrapOID parameter\
    \ SHALL\n        be the corresponding trap as defined in section 2 of RFC 3418\n\
    \        [RFC3418]:\n        generic-trap\n        parameter      snmpTrapOID.0\n\
    \        ============   =============\n        0              1.3.6.1.6.3.1.1.5.1\
    \ (coldStart)\n        1              1.3.6.1.6.3.1.1.5.2 (warmStart)\n      \
    \  2              1.3.6.1.6.3.1.1.5.3 (linkDown)\n        3              1.3.6.1.6.3.1.1.5.4\
    \ (linkUp)\n        4              1.3.6.1.6.3.1.1.5.5 (authenticationFailure)\n\
    \        5              1.3.6.1.6.3.1.1.5.6 (egpNeighborLoss)\n   (4)  The SNMPv2\
    \ variable-bindings SHALL be the SNMPv1 variable-\n        bindings.  In addition,\
    \ if the translation is being performed by\n        a proxy in order to forward\
    \ a received trap, three additional\n        variable-bindings will be appended,\
    \ if these three additional\n        variable-bindings do not already exist in\
    \ the SNMPv1 variable-\n        bindings.  The name portion of the first additional\
    \ variable\n        binding SHALL contain snmpTrapAddress.0, and the value SHALL\n\
    \        contain the SNMPv1 agent-addr parameter.  The name portion of\n     \
    \   the second additional variable binding SHALL contain\n        snmpTrapCommunity.0,\
    \ and the value SHALL contain the value of\n        the community-string field\
    \ from the received SNMPv1 message\n        which contained the SNMPv1 Trap-PDU.\
    \  The name portion of the\n        third additional variable binding SHALL contain\n\
    \        snmpTrapEnterprise.0 [RFC3418], and the value SHALL be the\n        SNMPv1\
    \ enterprise parameter.\n"
- title: 3.2.  Translating SNMPv2 Notification Parameters to SNMPv1 Notification
  contents:
  - "3.2.  Translating SNMPv2 Notification Parameters to SNMPv1 Notification\n   \
    \   Parameters\n   The following procedure describes how to translate SNMPv2\n\
    \   notification parameters into SNMPv1 notification parameters:\n   (1)  The\
    \ SNMPv1 enterprise parameter SHALL be determined as follows:\n      -   If the\
    \ SNMPv2 snmpTrapOID parameter is one of the standard\n          traps as defined\
    \ in RFC 3418 [RFC3418], then the SNMPv1\n          enterprise parameter SHALL\
    \ be set to the value of the\n          variable-binding in the SNMPv2 variable-bindings\
    \ whose name is\n          snmpTrapEnterprise.0 if that variable-binding exists.\
    \  If it\n          does not exist, the SNMPv1 enterprise parameter SHALL be set\n\
    \          to the value 'snmpTraps' as defined in RFC 3418 [RFC3418].\n      -\
    \   If the SNMPv2 snmpTrapOID parameter is not one of the standard\n         \
    \ traps as defined in RFC 3418 [RFC3418], then the SNMPv1\n          enterprise\
    \ parameter SHALL be determined from the SNMPv2\n          snmpTrapOID parameter\
    \ as follows:\n          -  If the next-to-last sub-identifier of the snmpTrapOID\
    \ value\n             is zero, then the SNMPv1 enterprise SHALL be the SNMPv2\n\
    \             snmpTrapOID value with the last 2 sub-identifiers removed,\n   \
    \          otherwise\n          -  If the next-to-last sub-identifier of the snmpTrapOID\
    \ value\n             is non-zero, then the SNMPv1 enterprise SHALL be the SNMPv2\n\
    \             snmpTrapOID value with the last sub-identifier removed.\n   (2)\
    \  The SNMPv1 agent-addr parameter SHALL be determined based on the\n        situation\
    \ in which the translation occurs.\n      -   If the translation occurs within\
    \ a notification originator\n          application, and the notification is to\
    \ be sent over IP, the\n          SNMPv1 agent-addr parameter SHALL be set to\
    \ the IP address of\n          the SNMP entity in which the notification originator\
    \ resides.\n          If the notification is to be sent over some other transport,\n\
    \          the SNMPv1 agent-addr parameter SHALL be set to 0.0.0.0.\n      - \
    \  If the translation occurs within a proxy application, the\n          proxy\
    \ must attempt to extract the original source of the\n          notification from\
    \ the variable-bindings.  If the SNMPv2\n          variable-bindings contains\
    \ a variable binding whose name is\n          snmpTrapAddress.0, the agent-addr\
    \ parameter SHALL be set to\n          the value of that variable binding.  Otherwise,\
    \ the SNMPv1\n          agent-addr parameter SHALL be set to 0.0.0.0.\n   (3)\
    \  If the SNMPv2 snmpTrapOID parameter is one of the standard traps\n        as\
    \ defined in RFC 3418 [RFC3418], the SNMPv1 generic-trap\n        parameter SHALL\
    \ be set as follows:\n        snmpTrapOID.0 parameter               generic-trap\n\
    \        ===============================       ============\n        1.3.6.1.6.3.1.1.5.1\
    \ (coldStart)                  0\n        1.3.6.1.6.3.1.1.5.2 (warmStart)    \
    \              1\n        1.3.6.1.6.3.1.1.5.3 (linkDown)                   2\n\
    \        1.3.6.1.6.3.1.1.5.4 (linkUp)                     3\n        1.3.6.1.6.3.1.1.5.5\
    \ (authenticationFailure)      4\n        1.3.6.1.6.3.1.1.5.6 (egpNeighborLoss)\
    \            5\n        Otherwise, the SNMPv1 generic-trap parameter SHALL be\
    \ set to 6.\n   (4)  If the SNMPv2 snmpTrapOID parameter is one of the standard\
    \ traps\n        as defined in RFC 3418 [RFC3418], the SNMPv1 specific-trap\n\
    \        parameter SHALL be set to zero.  Otherwise, the SNMPv1\n        specific-trap\
    \ parameter SHALL be set to the last sub-identifier\n        of the SNMPv2 snmpTrapOID\
    \ parameter.\n   (5)  The SNMPv1 time-stamp parameter SHALL be taken directly\
    \ from the\n        SNMPv2 sysUpTime parameter.\n   (6)  The SNMPv1 variable-bindings\
    \ SHALL be the SNMPv2 variable-\n        bindings (and note that the SNMPv2 variable-bindings\
    \ do not\n        include the variable-bindings containing sysUpTime.0,\n    \
    \    snmpTrapOID.0).  Note, however, that if the SNMPv2 variable-\n        bindings\
    \ contain any objects whose type is Counter64, the\n        translation to SNMPv1\
    \ notification parameters cannot be\n        performed.  In this case, the notification\
    \ cannot be encoded in\n        an SNMPv1 packet (and so the notification cannot\
    \ be sent using\n        SNMPv1, see section 4.2.3 and section 4.3).\n"
- title: 4.  Approaches to Coexistence in a Multi-lingual Network
  contents:
  - "4.  Approaches to Coexistence in a Multi-lingual Network\n   There are two basic\
    \ approaches to coexistence in a multi-lingual\n   network, multi-lingual implementations\
    \ and proxy implementations.\n   Multi-lingual implementations allow elements\
    \ in a network to\n   communicate with each other using an SNMP version which\
    \ both elements\n   support.  This allows a multi-lingual implementation to communicate\n\
    \   with any mono-lingual implementation, regardless of the SNMP version\n   supported\
    \ by the mono-lingual implementation.\n   Proxy implementations provide a mechanism\
    \ for translating between\n   SNMP versions using a third party network element.\
    \  This allows\n   network elements which support only a single, but different,\
    \ SNMP\n   version to communicate with each other.  Proxy implementations are\n\
    \   also useful for securing communications over an insecure link between\n  \
    \ two locally secure networks.\n"
- title: 4.1.  SNMPv1 and SNMPv2 Access to MIB Data
  contents:
  - "4.1.  SNMPv1 and SNMPv2 Access to MIB Data\n   Throughout section 4., this document\
    \ refers to 'SNMPv1 Access to MIB\n   Data' and 'SNMPv2 Access to MIB Data'. \
    \ These terms refer to the part\n   of an SNMP agent which actually accesses instances\
    \ of MIB objects,\n   and which actually initiates generation of notifications.\n\
    \   Differences between the two types of access to MIB data are:\n   -  Error-status\
    \ values generated.\n   -  Generation of exception codes.\n   -  Use of the Counter64\
    \ data type.\n   -  The format of parameters provided when a notification is\n\
    \      generated.\n   SNMPv1 access to MIB data may generate SNMPv1 error-status\
    \ values,\n   will never generate exception codes nor use the Counter64 data type,\n\
    \   and will provide SNMPv1 format parameters for generating\n   notifications.\
    \  Note also that SNMPv1 access to MIB data will\n   actually never generate a\
    \ readOnly error (a noSuchName error would\n   always occur in the situation where\
    \ one would expect a readOnly\n   error).\n   SNMPv2 access to MIB data may generate\
    \ SNMPv2 error-status values,\n   may generate exception codes, may use the Counter64\
    \ data type, and\n   will provide SNMPv2 format parameters for generating notifications.\n\
    \   Note that SNMPv2 access to MIB data will never generate readOnly,\n   noSuchName,\
    \ or badValue errors.\n   Note that a particular multi-lingual implementation\
    \ may choose to\n   implement all access to MIB data as SNMPv2 access to MIB data,\
    \ and\n   perform the translations described herein for SNMPv1-based\n   transactions.\n\
    \   Further, note that there is no mention of 'SNMPv3 access to MIB data'\n  \
    \ in this document, as SNMPv3 uses SNMPv2 PDU types and protocol\n   operations.\n"
- title: 4.2.  Multi-lingual implementations
  contents:
  - "4.2.  Multi-lingual implementations\n   This approach requires an entity to support\
    \ multiple SNMP message\n   versions.  Typically this means supporting SNMPv1,\
    \ SNMPv2c, and\n   SNMPv3 message versions.  The behaviour of various types of\
    \ SNMP\n   applications which support multiple message versions is described in\n\
    \   the following sections.  This approach allows entities which support\n   multiple\
    \ SNMP message versions to coexist with and communicate with\n   entities which\
    \ support only a single SNMP message version.\n"
- title: 4.2.1.  Command Generator
  contents:
  - "4.2.1.  Command Generator\n   A command generator must select an appropriate\
    \ message version when\n   sending requests to another entity.  One way to achieve\
    \ this is to\n   consult a local database to select the appropriate message version.\n\
    \   In addition, a command generator MUST 'downgrade' GetBulk requests to\n  \
    \ GetNext requests when selecting SNMPv1 as the message version for an\n   outgoing\
    \ request.  This is done by simply changing the operation type\n   to GetNext,\
    \ ignoring any non-repeaters and max-repetitions values,\n   and setting error-status\
    \ and error-index to zero.\n"
- title: 4.2.2.  Command Responder
  contents:
  - "4.2.2.  Command Responder\n   A command responder must be able to deal with both\
    \ SNMPv1 and SNMPv2\n   access to MIB data.  There are three aspects to dealing\
    \ with this.  A\n   command responder must:\n   -  Deal correctly with SNMPv2\
    \ access to MIB data that returns a\n      Counter64 value while processing an\
    \ SNMPv1 message,\n   -  Deal correctly with SNMPv2 access to MIB data that returns\
    \ one of\n      the three exception values while processing an SNMPv1 message,\
    \ and\n   -  Map SNMPv2 error codes returned from SNMPv2 access to MIB data\n\
    \      into SNMPv1 error codes when processing an SNMPv1 message.\n   Note that\
    \ SNMPv1 error codes SHOULD NOT be used without any change\n   when processing\
    \ SNMPv2c or SNMPv3 messages, except in the case of\n   proxy forwarding.  Also,\
    \ SNMPv1 access to MIB data SHOULD NOT be used\n   when processing SNMPv2c or\
    \ SNMPv3 messages.  In the case of proxy\n   forwarding, for backwards compatibility,\
    \ SNMPv1 error codes may be\n   used without any change in a forwarded SNMPv2c\
    \ or SNMPv3 message.\n   The following sections describe the behaviour of a command\
    \ responder\n   application which supports multiple SNMP message versions, and\
    \ which\n   uses SNMPv2 access to MIB data when processing an SNMPv1 message.\n"
- title: 4.2.2.1.  Handling Counter64
  contents:
  - "4.2.2.1.  Handling Counter64\n   The SMIv2 [RFC2578] defines one new syntax that\
    \ is incompatible with\n   SMIv1.  This syntax is Counter64.  All other syntaxes\
    \ defined by\n   SMIv2 are compatible with SMIv1.\n   The impact on multi-lingual\
    \ command responders is that they MUST NOT\n   ever return a variable binding\
    \ containing a Counter64 value in a\n   response to a request that was received\
    \ using the SNMPv1 message\n   version.\n   Multi-lingual command responders SHALL\
    \ take the approach that object\n   instances whose type is Counter64 are implicitly\
    \ excluded from view\n   when processing an SNMPv1 message.  So:\n   -  On receipt\
    \ of an SNMPv1 GetRequest-PDU containing a variable\n      binding whose name\
    \ field points to an object instance of type\n      Counter64, a GetResponsePDU\
    \ SHALL be returned, with an error-\n      status of noSuchName and the error-index\
    \ set to the variable\n      binding that caused this error.\n   -  On an SNMPv1\
    \ GetNextRequest-PDU, any object instance which\n      contains a syntax of Counter64\
    \ SHALL be skipped, and the next\n      accessible object instance that does not\
    \ have the syntax of\n      Counter64 SHALL be retrieved.  If no such object instance\
    \ exists,\n      then an error-status of noSuchName SHALL be returned, and the\n\
    \      error-index SHALL be set to the variable binding that caused this\n   \
    \   error.\n   -  Any SNMPv1 request which contains a variable binding with a\n\
    \      Counter64 value is ill-formed, so the foregoing rules do not\n      apply.\
    \  If that error is detected, a response SHALL NOT be\n      returned, since it\
    \ would contain a copy of the ill-formed variable\n      binding.  Instead, the\
    \ offending PDU SHALL be discarded and the\n      counter snmpInASNParseErrs SHALL\
    \ be incremented.\n"
- title: 4.2.2.2.  Mapping SNMPv2 Exceptions
  contents:
  - "4.2.2.2.  Mapping SNMPv2 Exceptions\n   SNMPv2 provides a feature called exceptions,\
    \ which allow an SNMPv2\n   Response PDU to return as much management information\
    \ as possible,\n   even when an error occurs.  However, SNMPv1 does not support\n\
    \   exceptions, and so an SNMPv1 Response PDU cannot return any\n   management\
    \ information, and can only return an error-status and an\n   error-index value.\n\
    \   When an SNMPv1 request is received, a command responder MUST check\n   any\
    \ variable bindings returned using SNMPv2 access to MIB data for\n   exception\
    \ values, and convert these exception values into SNMPv1\n   error codes.\n  \
    \ The type of exception that can be returned when accessing MIB data\n   and the\
    \ action taken depends on the type of SNMP request.\n   -  For a GetRequest, a\
    \ noSuchObject or noSuchInstance exception may\n      be returned.\n   -  For\
    \ a GetNextRequest, an endOfMibView exception may be returned.\n   -  No exceptions\
    \ will be returned for a SetRequest, and a\n      GetBulkRequest should only be\
    \ received in an SNMPv2c or SNMPv3\n      message, so these request types may\
    \ be ignored when mapping\n      exceptions.\n   Note that when a response contains\
    \ multiple exceptions, it is an\n   implementation choice as to which variable\
    \ binding the error-index\n   should reference.\n"
- title: 4.2.2.2.1.  Mapping noSuchObject and noSuchInstance
  contents:
  - "4.2.2.2.1.  Mapping noSuchObject and noSuchInstance\n   A noSuchObject or noSuchInstance\
    \ exception generated by an SNMPv2\n   access to MIB data indicates that the requested\
    \ object instance can\n   not be returned.  The SNMPv1 error code for this condition\
    \ is\n   noSuchName, and so the error-status field of the response PDU SHALL\n\
    \   be set to noSuchName.  Also, the error-index field SHALL be set to\n   the\
    \ index of the variable binding for which an exception occurred (if\n   there\
    \ is more than one then it is an implementation decision as to\n   which is used),\
    \ and the variable binding list from the original\n   request SHALL be returned\
    \ with the response PDU.\n"
- title: 4.2.2.2.2.  Mapping endOfMibView
  contents:
  - "4.2.2.2.2.  Mapping endOfMibView\n   When an SNMPv2 access to MIB data returns\
    \ a variable binding\n   containing an endOfMibView exception, it indicates that\
    \ there are no\n   object instances available which lexicographically follow the\
    \ object\n   in the request.  In an SNMPv1 agent, this condition normally results\n\
    \   in a noSuchName error, and so the error-status field of the response\n   PDU\
    \ SHALL be set to noSuchName.  Also, the error-index field SHALL be\n   set to\
    \ the index of the variable binding for which an exception\n   occurred (if there\
    \ is more than one then it is an implementation\n   decision as to which is used),\
    \ and the variable binding list from the\n   original request SHALL be returned\
    \ with the response PDU.\n"
- title: 4.2.2.3.  Processing An SNMPv1 GetRequest
  contents:
  - "4.2.2.3.  Processing An SNMPv1 GetRequest\n   When processing an SNMPv1 GetRequest,\
    \ the following procedures MUST\n   be followed when using an SNMPv2 access to\
    \ MIB data.\n   When such an access to MIB data returns response data using SNMPv2\n\
    \   syntax and error-status values, then:\n   (1)  If the error-status is anything\
    \ other than noError,\n        -   The error status SHALL be translated to an\
    \ SNMPv1 error-\n            status using the table in section 4.4, \"Error Status\n\
    \            Mappings\".\n        -   The error-index SHALL be set to the position\
    \ (in the\n            original request) of the variable binding that caused the\n\
    \            error-status.\n        -   The variable binding list of the response\
    \ PDU SHALL be made\n            exactly the same as the variable binding list\
    \ that was\n            received in the original request.\n   (2)  If the error-status\
    \ is noError, the variable bindings SHALL be\n        checked for any SNMPv2 exception\
    \ (noSuchObject or\n        noSuchInstance) or an SNMPv2 syntax that is unknown\
    \ to SNMPv1\n        (Counter64).  If there are any such variable bindings, one\
    \ of\n        those variable bindings SHALL be selected (it is an\n        implementation\
    \ choice as to which is selected), and:\n        -   The error-status SHALL be\
    \ set to noSuchName,\n        -   The error-index SHALL be set to the position\
    \ (in the\n            variable binding list of the original request) of the\n\
    \            selected variable binding, and\n        -   The variable binding\
    \ list of the response PDU SHALL be\n            exactly the same as the variable\
    \ binding list that was\n            received in the original request.\n   (3)\
    \  If there are no such variable bindings, then:\n        -   The error-status\
    \ SHALL be set to noError,\n        -   The error-index SHALL be set to zero,\
    \ and\n        -   The variable binding list of the response SHALL be composed\n\
    \            from the data as it is returned by the access to MIB data.\n"
- title: 4.2.2.4.  Processing An SNMPv1 GetNextRequest
  contents:
  - "4.2.2.4.  Processing An SNMPv1 GetNextRequest\n   When processing an SNMPv1 GetNextRequest,\
    \ the following procedures\n   MUST be followed when SNMPv2 access to MIB data\
    \ is used as part of\n   processing the request.  There may be repetitive accesses\
    \ to MIB data\n   to try to find the first object which lexicographically follows\
    \ each\n   of the objects in the request.  This is implementation specific.\n\
    \   These procedures are followed only for data returned when using\n   SNMPv2\
    \ access to MIB data.  Data returned using SNMPv1 access to MIB\n   data may be\
    \ treated in the normal manner for an SNMPv1 request.\n   First, if the access\
    \ to MIB data returns an error-status of anything\n   other than noError:\n  \
    \ (1)  The error status SHALL be translated to an SNMPv1 error-status\n      \
    \  using the table in section 4.4, \"Error Status Mappings\".\n   (2)  The error-index\
    \ SHALL be set to the position (in the original\n        request) of the variable\
    \ binding that caused the error-status.\n   (3)  The variable binding list of\
    \ the response PDU SHALL be exactly\n        the same as the variable binding\
    \ list that was received in the\n        original request.\n   Otherwise, if the\
    \ access to MIB data returns an error-status of\n   noError:\n   (1)  Any variable\
    \ bindings containing an SNMPv2 syntax of Counter64\n        SHALL be considered\
    \ to be not in view, and MIB data SHALL be\n        accessed as many times as\
    \ is required until either a value other\n        than Counter64 is returned,\
    \ or an error or endOfMibView\n        exception occurs.\n   (2)  If there is\
    \ any variable binding that contains an SNMPv2\n        exception endOfMibView\
    \ (if there is more than one then it is an\n        implementation decision as\
    \ to which is chosen):\n        -   The error-status SHALL be set to noSuchName,\n\
    \        -   The error-index SHALL be set to the position (in the\n          \
    \  variable binding list of the original request) of the\n            variable\
    \ binding that returned such an SNMPv2 exception, and\n        -   The variable\
    \ binding list of the response PDU SHALL be\n            exactly the same as the\
    \ variable binding list that was\n            received in the original request.\n\
    \   (3)  If there are no such variable bindings, then:\n        -   The error-status\
    \ SHALL be set to noError,\n        -   The error-index SHALL be set to zero,\
    \ and\n        -   The variable binding list of the response SHALL be composed\n\
    \            from the data as it is returned by the access to MIB data.\n"
- title: 4.2.2.5.  Processing An SNMPv1 SetRequest
  contents:
  - "4.2.2.5.  Processing An SNMPv1 SetRequest\n   When processing an SNMPv1 SetRequest,\
    \ the following procedures MUST\n   be followed when using SNMPv2 access to MIB\
    \ data.\n   When such MIB access returns response data using SNMPv2 syntax and\n\
    \   error-status values, and the error-status is anything other than\n   noError,\
    \ then:\n   -  The error status SHALL be translated to an SNMPv1 error-status\n\
    \      using the table in section 4.4, \"Error Status Mappings\".\n   -  The error-index\
    \ SHALL be set to the position (in the original\n      request) of the variable\
    \ binding that caused the error-status.\n   -  The variable binding list of the\
    \ response PDU SHALL be made\n      exactly the same as the variable binding list\
    \ that was received in\n      the original request.\n"
- title: 4.2.3.  Notification Originator
  contents:
  - "4.2.3.  Notification Originator\n   A notification originator must be able to\
    \ translate between SNMPv1\n   notification parameters and SNMPv2 notification\
    \ parameters in order\n   to send a notification using a particular SNMP message\
    \ version.  If a\n   notification is generated using SNMPv1 notification parameters,\
    \ and\n   configuration information specifies that notifications be sent using\n\
    \   SNMPv2c or SNMPv3, the notification parameters must be translated to\n   SNMPv2\
    \ notification parameters.  Likewise, if a notification is\n   generated using\
    \ SNMPv2 notification parameters, and configuration\n   information specifies\
    \ that notifications be sent using SNMPv1, the\n   notification parameters must\
    \ be translated to SNMPv1 notification\n   parameters.  In this case, if the notification\
    \ cannot be translated\n   (due to the presence of a Counter64 type), it will\
    \ not be sent using\n   SNMPv1.\n   When a notification originator generates a\
    \ notification, using\n   parameters obtained from the SNMP-TARGET-MIB and SNMP-NOTIFICATION-\n\
    \   MIB, if the SNMP version used to generate the notification is SNMPv1,\n  \
    \ the PDU type used will always be a TrapPDU, regardless of whether the\n   value\
    \ of snmpNotifyType is trap(1) or inform(2).\n   Note also that access control\
    \ and notification filtering are\n   performed in the usual manner for notifications,\
    \ regardless of the\n   SNMP message version to be used when sending a notification.\
    \  The\n   parameters for performing access control are found in the usual\n \
    \  manner (i.e., from inspecting the SNMP-TARGET-MIB and SNMP-\n   NOTIFICATION-MIB).\
    \  In particular, when generating an SNMPv1 Trap, in\n   order to perform the\
    \ access check specified in [RFC3413], section\n   3.3, bullet (3), the notification\
    \ originator may need to generate a\n   value for snmpTrapOID.0 as described in\
    \ section 3.1, bullets (2) and\n   (3) of this document.  If the SNMPv1 notification\
    \ parameters being\n   used were previously translated from a set of SNMPv2 notification\n\
    \   parameters, this value may already be known, in which case it need\n   not\
    \ be generated.\n"
- title: 4.2.4.  Notification Receiver
  contents:
  - "4.2.4.  Notification Receiver\n   There are no special requirements of a notification\
    \ receiver.\n   However, an implementation may find it useful to allow a higher\
    \ level\n   application to request whether notifications should be delivered to\
    \ a\n   higher level application using SNMPv1 notification parameter or\n   SNMPv2\
    \ notification parameters.  The notification receiver would then\n   translate\
    \ notification parameters when required in order to present a\n   notification\
    \ using the desired set of parameters.\n"
- title: 4.3.  Proxy Implementations
  contents:
  - "4.3.  Proxy Implementations\n   A proxy implementation may be used to enable\
    \ communication between\n   entities which support different SNMP message versions.\
    \  This is\n   accomplished in a proxy forwarder application by performing\n \
    \  translations on PDUs.  These translations depend on the PDU type, the\n   SNMP\
    \ version of the packet containing a received PDU, and the SNMP\n   version to\
    \ be used to forward a received PDU.  The following sections\n   describe these\
    \ translations.  In all cases other than those described\n   below, the proxy\
    \ SHALL forward a received PDU without change, subject\n   to size constraints\
    \ as defined in section 5.3 (Community MIB) of this\n   document.  Note that in\
    \ the following sections, the 'Upstream\n   Version' refers to the version used\
    \ between the command generator or\n   notification receiver and the proxy, and\
    \ the 'Downstream Version'\n   refers to the version used between the proxy and\
    \ the command\n   responder or notification originator, regardless of the PDU\
    \ type or\n   direction.\n"
- title: 4.3.1.  Upstream Version Greater Than Downstream Version
  contents:
  - "4.3.1.  Upstream Version Greater Than Downstream Version\n   -  If a GetBulkRequest-PDU\
    \ is received and must be forwarded using\n      the SNMPv1 message version, the\
    \ proxy forwarder SHALL act as if\n      the non-repeaters and max-repetitions\
    \ fields were both set to 0,\n      and SHALL set the tag of the PDU to GetNextRequest-PDU.\n\
    \   -  If a GetResponse-PDU is received whose error-status field has a\n     \
    \ value of 'tooBig', and the message will be forwarded using the\n      SNMPv2c\
    \ or SNMPv3 message version, and the original request\n      received by the proxy\
    \ was not a GetBulkRequest-PDU, the proxy\n      forwarder SHALL remove the contents\
    \ of the variable-bindings field\n      and ensure that the error-index field\
    \ is set to 0 before\n      forwarding the response.\n   -  If a GetResponse-PDU\
    \ is received whose error-status field has a\n      value of 'tooBig', and the\
    \ message will be forwarded using the\n      SNMPv2c or SNMPv3 message version,\
    \ and the original request\n      received by the proxy was a GetBulkRequest-PDU,\
    \ the proxy\n      forwarder SHALL re-send the forwarded request (which would\
    \ have\n      been altered to be a GetNextRequest-PDU) with all but the first\n\
    \      variable-binding removed.  The proxy forwarder SHALL only re-send\n   \
    \   such a request a single time.  If the resulting GetResponse-PDU\n      also\
    \ contains an error-status field with a value of 'tooBig', then\n      the proxy\
    \ forwarder SHALL remove the contents of the variable-\n      bindings field,\
    \ and change the error-status field to 'noError',\n      and ensure that the error-index\
    \ field is set to 0 before\n      forwarding the response.  Note that if the original\
    \ request only\n      contained a single variable-binding, the proxy may skip\
    \ re-sending\n      the request and simply remove the variable-bindings and change\
    \ the\n      error-status to 'noError'.  Further note that, while it might have\n\
    \      been possible to fit more variable bindings if the proxy only re-\n   \
    \   sent the request multiple times, and stripped only a single\n      variable\
    \ binding from the request at a time, this is deemed too\n      expensive.  The\
    \ approach described here preserves the behaviour of\n      a GetBulkRequest as\
    \ closely as possible, without incurring the\n      cost of re-sending the request\
    \ multiple times.\n   -  If a Trap-PDU is received, and will be forwarded using\
    \ the SNMPv2c\n      or SNMPv3 message version, the proxy SHALL apply the translation\n\
    \      rules described in section 3, and SHALL forward the notification\n    \
    \  as an SNMPv2-Trap-PDU.\n      Note that when an SNMPv1 agent generates a message\
    \ containing a\n      Trap-PDU which is subsequently forwarded by one or more\
    \ proxy\n      forwarders using SNMP versions other than SNMPv1, the community\n\
    \      string and agent-addr fields from the original message generated\n    \
    \  by the SNMPv1 agent will be preserved through the use of the\n      snmpTrapAddress\
    \ and snmpTrapCommunity objects.\n"
- title: 4.3.2.  Upstream Version Less Than Downstream Version
  contents:
  - "4.3.2.  Upstream Version Less Than Downstream Version\n   -  If a GetResponse-PDU\
    \ is received in response to a GetRequest-PDU\n      (previously generated by\
    \ the proxy) which contains variable-\n      bindings of type Counter64 or which\
    \ contain an SNMPv2 exception\n      code, and the message would be forwarded\
    \ using the SNMPv1 message\n      version, the proxy MUST generate an alternate\
    \ response PDU\n      consisting of the request-id and variable bindings from\
    \ the\n      original SNMPv1 request, containing a noSuchName error-status\n \
    \     value, and containing an error-index value indicating the position\n   \
    \   of the variable-binding containing the Counter64 type or exception\n     \
    \ code.\n   -  If a GetResponse-PDU is received in response to a GetNextRequest-\n\
    \      PDU (previously generated by the proxy) which contains variable-\n    \
    \  bindings that contain an SNMPv2 exception code, and the message\n      would\
    \ be forwarded using the SNMPv1 message version, the proxy\n      MUST generate\
    \ an alternate response PDU consisting of the\n      request-id and variable bindings\
    \ from the original SNMPv1 request,\n      containing a noSuchName error-status\
    \ value, and containing an\n      error-index value indicating the position of\
    \ the variable-binding\n      containing the exception code.\n   -  If a GetResponse-PDU\
    \ is received in response to a GetNextRequest-\n      PDU (previously generated\
    \ by the proxy) which contains variable-\n      bindings of type Counter64, the\
    \ proxy MUST re-send the entire\n      GetNextRequest-PDU, with the following\
    \ modifications.  For any\n      variable bindings in the received GetResponse\
    \ which contained\n      Counter64 types, the proxy substitutes the object names\
    \ of these\n      variable bindings for the corresponding object names in the\n\
    \      previously-sent GetNextRequest.  The proxy MUST repeat this\n      process\
    \ until no Counter64 objects are returned.  Note that an\n      implementation\
    \ may attempt to optimize this process of skipping\n      Counter64 objects. \
    \ One approach to such an optimization would be\n      to replace the last sub-identifier\
    \ of the object names of varbinds\n      containing a Counter64 type with 65535\
    \ if that sub-identifier is\n      less than 65535, or with 4294967295 if that\
    \ sub-identifier is\n      greater than 65535.  This approach should skip multiple\
    \ instances\n      of the same Counter64 object, while maintaining compatibility\
    \ with\n      some broken agent implementations (which only use 16-bit integers\n\
    \      for sub-identifiers).\n      Deployment Hint:  The process of repeated\
    \ GetNext requests used by\n      a proxy when Counter64 types are returned can\
    \ be expensive.  When\n      deploying a proxy, this can be avoided by configuring\
    \ the target\n      agents to which the proxy forwards requests in a manner such\
    \ that\n      any objects of type Counter64 are in fact not-in-view for the\n\
    \      principal that the proxy is using when communicating with these\n     \
    \ agents.  However, when using such a configuration, one should be\n      careful\
    \ to use a different principal for communicating with the\n      target agent\
    \ when an incoming SNMPv2c or SNMPv3 request is\n      received, to ensure that\
    \ objects of type Counter64 are properly\n      returned.\n   -  If a GetResponse-PDU\
    \ is received which contains an SNMPv2 error-\n      status value of wrongValue,\
    \ wrongEncoding, wrongType, wrongLength,\n      inconsistentValue, noAccess, notWritable,\
    \ noCreation,\n      inconsistentName, resourceUnavailable, commitFailed, undoFailed,\n\
    \      or authorizationError, and the message would be forwarded using\n     \
    \ the SNMPv1 message version, the error-status value is modified\n      using\
    \ the mappings in section 4.4.\n   -  If an SNMPv2-Trap-PDU is received, and will\
    \ be forwarded using the\n      SNMPv1 message version, the proxy SHALL apply\
    \ the translation\n      rules described in section 3, and SHALL forward the notification\n\
    \      as a Trap-PDU.  Note that if the translation fails due to the\n      existence\
    \ of a Counter64 data-type in the received SNMPv2-Trap-\n      PDU, the trap cannot\
    \ be forwarded using SNMPv1.\n   -  If an InformRequest-PDU is received, any configuration\
    \ information\n      indicating that it would be forwarded using the SNMPv1 message\n\
    \      version SHALL be ignored.  An InformRequest-PDU can only be\n      forwarded\
    \ using the SNMPv2c or SNMPv3 message version.  The\n      InformRequest-PDU may\
    \ still be forwarded if there is other\n      configuration information indicating\
    \ that it should be forwarded\n      using SNMPv2c or SNMPv3.\n"
- title: 4.4.  Error Status Mappings
  contents:
  - "4.4.  Error Status Mappings\n   The following tables shows the mappings of SNMPv1\
    \ error-status values\n   into SNMPv2 error-status values, and the mappings of\
    \ SNMPv2 error-\n   status values into SNMPv1 error-status values.\n      SNMPv1\
    \ error-status    SNMPv2 error-status\n      ===================    ===================\n\
    \      noError                noError\n      tooBig                 tooBig\n \
    \     noSuchName             noSuchName\n      badValue               badValue\n\
    \      genErr                 genErr\n      SNMPv2 error-status    SNMPv1 error-status\n\
    \      ===================    ===================\n      noError             \
    \   noError\n      tooBig                 tooBig\n      genErr               \
    \  genErr\n      wrongValue             badValue\n      wrongEncoding        \
    \  badValue\n      wrongType              badValue\n      wrongLength        \
    \    badValue\n      inconsistentValue      badValue\n      noAccess         \
    \      noSuchName\n      notWritable            noSuchName\n      noCreation \
    \            noSuchName\n      inconsistentName       noSuchName\n      resourceUnavailable\
    \    genErr\n      commitFailed           genErr\n      undoFailed           \
    \  genErr\n      authorizationError     noSuchName\n   Whenever the SNMPv2 error-status\
    \ value of authorizationError is\n   translated to an SNMPv1 error-status value\
    \ of noSuchName, the value\n   of snmpInBadCommunityUses MUST be incremented.\n"
- title: 5.  Message Processing Models and Security Models
  contents:
  - "5.  Message Processing Models and Security Models\n   In order to adapt SNMPv1\
    \ (and SNMPv2c) into the SNMP architecture,\n   the following Message Processing\
    \ (MP) models are defined in this\n   document:\n   -  The SNMPv1 Message Processing\
    \ Model\n   -  The SNMPv1 Community-Based Security Model\n   -  The SNMPv2c Message\
    \ Processing Model\n   -  The SNMPv2c Community-Based Security Model\n   In most\
    \ respects, the SNMPv1 Message Processing Model and the SNMPv2c\n   Message Processing\
    \ Model are identical, and so these are not\n   discussed independently in this\
    \ document.  Differences between the\n   two models are described as required.\n\
    \   Similarly, the SNMPv1 Community-Based Security Model and the SNMPv2c\n   Community-Based\
    \ Security Model are nearly identical, and so are not\n   discussed independently.\
    \  Differences between these two models are\n   also described as required.\n"
- title: 5.1.  Mappings
  contents:
  - "5.1.  Mappings\n   The SNMPv1 (and SNMPv2c) Message Processing Model and Security\
    \ Model\n   require mappings between parameters used in SNMPv1 (and SNMPv2c)\n\
    \   messages, and the version independent parameters used in the SNMP\n   architecture\
    \ [RFC3411].  The parameters which MUST be mapped consist\n   of the SNMPv1 (and\
    \ SNMPv2c) community name, and the SNMP securityName\n   and contextEngineID/contextName\
    \ pair.  A MIB module (the SNMP-\n   COMMUNITY-MIB) is provided in this document\
    \ in order to perform these\n   mappings.  This MIB provides mappings in both\
    \ directions, that is, a\n   community name may be mapped to a securityName, contextEngineID,\
    \ and\n   contextName, or the combination of securityName, contextEngineID, and\n\
    \   contextName may be mapped to a community name.\n"
- title: 5.2.  The SNMPv1 MP Model and SNMPv1 Community-based Security Model
  contents:
  - "5.2.  The SNMPv1 MP Model and SNMPv1 Community-based Security Model\n   The SNMPv1\
    \ Message Processing Model handles processing of SNMPv1\n   messages.  The processing\
    \ of messages is handled generally in the\n   same manner as described in RFC\
    \ 1157 [RFC1157], with differences and\n   clarifications as described in the\
    \ following sections.  The\n   SnmpMessageProcessingModel value for SNMPv1 is\
    \ 0 (the value for\n   SNMPv2c is 1).\n"
- title: 5.2.1.  Processing An Incoming Request
  contents:
  - "5.2.1.  Processing An Incoming Request\n   In RFC 1157 [RFC1157], section 4.1,\
    \ item (3) for an entity which\n   receives a message, states that various parameters\
    \ are passed to the\n   \"desired authentication scheme\".  The desired authentication\
    \ scheme\n   in this case is the SNMPv1 Community-Based Security Model, which\
    \ will\n   be called using the processIncomingMsg ASI.  The parameters passed\
    \ to\n   this ASI are:\n   -  The messageProcessingModel, which will be 0 (or\
    \ 1 for SNMPv2c).\n   -  The maxMessageSize, which should be the maximum size\
    \ of a message\n      that the receiving entity can generate (since there is no\
    \ such\n      value in the received message).\n   -  The securityParameters, which\
    \ consist of the community string and\n      the message's source and destination\
    \ transport domains and\n      addresses.\n   -  The securityModel, which will\
    \ be 1 (or 2 for SNMPv2c).\n   -  The securityLevel, which will be noAuthNoPriv.\n\
    \   -  The wholeMsg and wholeMsgLength.\n   The Community-Based Security Model\
    \ will attempt to select a row in\n   the snmpCommunityTable.  This is done by\
    \ performing a search through\n   the snmpCommunityTable in lexicographic order.\
    \  The first entry for\n   which the following matching criteria are satisfied\
    \ will be selected:\n   -  The community string is equal to the snmpCommunityName\
    \ value.\n   -  If the snmpCommunityTransportTag is an empty string, it is ignored\n\
    \      for the purpose of matching.  If the snmpCommunityTransportTag is\n   \
    \   not an empty string, the transportDomain and transportAddress from\n     \
    \ which the message was received must match one of the entries in\n      the snmpTargetAddrTable\
    \ selected by the snmpCommunityTransportTag\n      value.  The snmpTargetAddrTMask\
    \ object is used as described in\n      section 5.3 when checking whether the\
    \ transportDomain and\n      transportAddress matches a entry in the snmpTargetAddrTable.\n\
    \   If no such entry can be found, an authentication failure occurs as\n   described\
    \ in RFC 1157 [RFC1157], and the snmpInBadCommunityNames\n   counter is incremented.\n\
    \   The parameters returned from the Community-Based Security Model are:\n   -\
    \  The securityEngineID, which will always be the local value of\n      snmpEngineID.0.\n\
    \   -  The securityName, which will be the value of\n      snmpCommunitySecurityName\
    \ from the selected row in the\n      snmpCommunityTable.\n   -  The scopedPDU.\
    \  Note that this parameter will actually consist of\n      three values, the\
    \ contextSnmpEngineID (which will be the value of\n      snmpCommunityContextEngineID\
    \ from the selected entry in the\n      snmpCommunityTable), the contextName (which\
    \ will be the value of\n      snmpCommunityContextName from the selected entry\
    \ in the\n      snmpCommunityTable), and the PDU.  These must be separate values,\n\
    \      since the first two do not actually appear in the message.\n   -  The maxSizeResponseScopedPDU,\
    \ which will be derived using the\n      minimum of the maxMessageSize above,\
    \ and the value of\n      snmpTargetAddrMMS of the selected row in the snmpTargetAddrTable.\n\
    \      If no such entry was selected, then this value will be derived\n      from\
    \ the maxMessageSize only.\n   -  The securityStateReference, which MUST contain\
    \ the community\n      string from the original request.\n   The appropriate SNMP\
    \ application will then be called (depending on\n   the value of the contextEngineID\
    \ and the request type in the PDU)\n   using the processPdu ASI.  The parameters\
    \ passed to this ASI are:\n   -  The messageProcessingModel, which will be 0 (or\
    \ 1 for SNMPv2c).\n   -  The securityModel, which will be 1 (or 2 for SNMPv2c).\n\
    \   -  The securityName, which was returned from the call to\n      processIncomingMsg.\n\
    \   -  The securityLevel, which is noAuthNoPriv.\n   -  The contextEngineID, which\
    \ was returned as part of the ScopedPDU\n      from the call to processIncomingMsg.\n\
    \   -  The contextName, which was returned as part of the ScopedPDU from\n   \
    \   the call to processIncomingMsg.\n   -  The pduVersion, which should indicate\
    \ an SNMPv1 version PDU (if\n      the message version was SNMPv2c, this would\
    \ be an SNMPv2 version\n      PDU).\n   -  The PDU, which was returned as part\
    \ of the ScopedPDU from the call\n      to processIncomingMsg.\n   -  The maxSizeResponseScopedPDU\
    \ which was returned from the call to\n      processIncomingMsg.\n   -  The stateReference\
    \ which was returned from the call to\n      processIncomingMsg.\n   The SNMP\
    \ application should process the request as described\n   previously in this document.\
    \  Note that access control is applied by\n   an SNMPv3 command responder application\
    \ as usual.  The parameters as\n   passed to the processPdu ASI will be used in\
    \ calls to the\n   isAccessAllowed ASI.\n"
- title: 5.2.2.  Generating An Outgoing Response
  contents:
  - "5.2.2.  Generating An Outgoing Response\n   There is no special processing required\
    \ for generating an outgoing\n   response.  However, the community string used\
    \ in an outgoing response\n   must be the same as the community string from the\
    \ original request.\n   The original community string MUST be present in the\n\
    \   securityStateReference information of the original request.\n"
- title: 5.2.3.  Generating An Outgoing Notification
  contents:
  - "5.2.3.  Generating An Outgoing Notification\n   In a multi-lingual SNMP entity,\
    \ the parameters used for generating\n   notifications will be obtained by examining\
    \ the SNMP-TARGET-MIB and\n   SNMP-NOTIFICATION-MIB.  These parameters will be\
    \ passed to the SNMPv1\n   Message Processing Model using the sendPdu ASI.  The\
    \ SNMPv1 Message\n   Processing Model will attempt to locate an appropriate community\n\
    \   string in the snmpCommunityTable based on the parameters passed to\n   the\
    \ sendPdu ASI.  This is done by performing a search through the\n   snmpCommunityTable\
    \ in lexicographic order.  The first entry for which\n   the following matching\
    \ criteria are satisfied will be selected:\n   -  The securityName must be equal\
    \ to the snmpCommunitySecurityName\n      value.\n   -  The contextEngineID must\
    \ be equal to the\n      snmpCommunityContextEngineID value.\n   -  The contextName\
    \ must be equal to the snmpCommunityContextName\n      value.\n   -  If the snmpCommunityTransportTag\
    \ is an empty string, it is ignored\n      for the purpose of matching.  If the\
    \ snmpCommunityTransportTag is\n      not an empty string, the transportDomain\
    \ and transportAddress must\n      match one of the entries in the snmpTargetAddrTable\
    \ selected by\n      the snmpCommunityTransportTag value.\n   If no such entry\
    \ can be found, the notification is not sent.\n   Otherwise, the community string\
    \ used in the outgoing notification\n   will be the value of the snmpCommunityName\
    \ column of the selected\n   row.\n"
- title: 5.2.4.  Proxy Forwarding Of Requests
  contents:
  - "5.2.4.  Proxy Forwarding Of Requests\n   In a proxy forwarding application, when\
    \ a received request is to be\n   forwarded using the SNMPv1 Message Processing\
    \ Model, the parameters\n   used for forwarding will be obtained by examining\
    \ the SNMP-PROXY-MIB\n   and the SNMP-TARGET-MIB.  These parameters will be passed\
    \ to the\n   SNMPv1 Message Processing Model using the sendPdu ASI.  The SNMPv1\n\
    \   Message Processing Model will attempt to locate an appropriate\n   community\
    \ string in the snmpCommunityTable based on the parameters\n   passed to the sendPdu\
    \ ASI.  This is done by performing a search\n   through the snmpCommunityTable\
    \ in lexicographic order.  The first\n   entry for which the following matching\
    \ criteria are satisfied will be\n   selected:\n   -  The securityName must be\
    \ equal to the snmpCommunitySecurityName\n      value.\n   -  The contextEngineID\
    \ must be equal to the\n      snmpCommunityContextEngineID value.\n   -  The contextName\
    \ must be equal to the snmpCommunityContextName\n      value.\n   If no such entry\
    \ can be found, the proxy forwarding application\n   should follow the procedure\
    \ described in RFC 3413 [RFC3413], section\n   3.5.1.1, item (2).  This procedure\
    \ states that the snmpProxyDrops\n   counter [RFC3418] is incremented, and that\
    \ a Response-PDU is\n   generated by calling the Dispatcher using the returnResponsePdu\n\
    \   abstract service interface.\n"
- title: 5.3.  The SNMP Community MIB Module
  contents:
  - "5.3.  The SNMP Community MIB Module\n   The SNMP-COMMUNITY-MIB contains objects\
    \ for mapping between community\n   strings and version-independent SNMP message\
    \ parameters.  In\n   addition, this MIB provides a mechanism for performing source\
    \ address\n   validation on incoming requests, and for selecting community strings\n\
    \   based on target addresses for outgoing notifications.  These two\n   features\
    \ are accomplished by providing a tag in the\n   snmpCommunityTable which selects\
    \ sets of entries in the\n   snmpTargetAddrTable [RFC3413].  In addition, the\
    \ SNMP-COMMUNITY-MIB\n   augments the snmpTargetAddrTable with a transport address\
    \ mask value\n   and a maximum message size value.  These values are used only\
    \ where\n   explicitly stated.  In cases where the snmpTargetAddrTable is used\n\
    \   without mention of these augmenting values, the augmenting values\n   should\
    \ be ignored.\n   The mask value, snmpTargetAddrTMask, allows selected entries\
    \ in the\n   snmpTargetAddrTable to specify multiple addresses (rather than just\
    \ a\n   single address per entry).  This would typically be used to specify a\n\
    \   subnet in an snmpTargetAddrTable rather than just a single address.\n   The\
    \ mask value is used to select which bits of a transport address\n   must match\
    \ bits of the corresponding instance of\n   snmpTargetAddrTAddress, in order for\
    \ the transport address to match a\n   particular entry in the snmpTargetAddrTable.\
    \  The value of an\n   instance of snmpTargetAddrTMask must always be an OCTET\
    \ STRING whose\n   length is either zero or the same as that of the corresponding\n\
    \   instance of snmpTargetAddrTAddress.\n   Note that the snmpTargetAddrTMask\
    \ object is only used where\n   explicitly stated.  In particular, it is not used\
    \ when generating\n   notifications (i.e., when generating notifications, entries\
    \ in the\n   snmpTargetAddrTable only specify individual addresses).  If use of\n\
    \   the snmpTargetAddrTMask object is not mentioned in text describing\n   matching\
    \ addresses in the snmpTargetAddrTable, then its value MUST be\n   ignored.\n\
    \   When checking whether a transport address matches an entry in the\n   snmpTargetAddrTable,\
    \ if the value of snmpTargetAddrTMask is a zero-\n   length OCTET STRING, the\
    \ mask value is ignored, and the value of\n   snmpTargetAddrTAddress must exactly\
    \ match a transport address.\n   Otherwise, each bit of each octet in the snmpTargetAddrTMask\
    \ value\n   corresponds to the same bit of the same octet in the\n   snmpTargetAddrTAddress\
    \ value.  For bits that are set in the\n   snmpTargetAddrTMask value (i.e., bits\
    \ equal to 1), the corresponding\n   bits in the snmpTargetAddrTAddress value\
    \ must match the bits in a\n   transport address.  If all such bits match, the\
    \ transport address is\n   matched by that snmpTargetAddrTable entry.  Otherwise,\
    \ the transport\n   address is not matched.\n   The maximum message size value,\
    \ snmpTargetAddrMMS, is used to\n   determine the maximum message size acceptable\
    \ to another SNMP entity\n   when the value cannot be determined from the protocol.\n\
    \      SNMP-COMMUNITY-MIB DEFINITIONS ::= BEGIN\n      IMPORTS\n          IpAddress,\n\
    \          MODULE-IDENTITY,\n          OBJECT-TYPE,\n          Integer32,\n  \
    \        snmpModules\n              FROM SNMPv2-SMI\n          RowStatus,\n  \
    \        StorageType\n              FROM SNMPv2-TC\n          SnmpAdminString,\n\
    \          SnmpEngineID\n              FROM SNMP-FRAMEWORK-MIB\n          SnmpTagValue,\n\
    \          snmpTargetAddrEntry\n              FROM SNMP-TARGET-MIB\n         \
    \ MODULE-COMPLIANCE,\n          OBJECT-GROUP\n              FROM SNMPv2-CONF;\n\
    \      snmpCommunityMIB MODULE-IDENTITY\n          LAST-UPDATED \"200308060000Z\"\
    \        -- 06 Aug 2003, midnight\n    ORGANIZATION \"SNMPv3 Working Group\"\n\
    \    CONTACT-INFO \"WG-email:   snmpv3@lists.tislabs.com\n                  Subscribe:\
    \  majordomo@lists.tislabs.com\n                              In msg body:  subscribe\
    \ snmpv3\n                  Co-Chair:   Russ Mundy\n                         \
    \     SPARTA, Inc\n                  Postal:     7075 Samuel Morse Drive\n   \
    \                           Columbia, MD 21045\n                             \
    \ USA\n                  EMail:      mundy@tislabs.com\n                  Phone:\
    \      +1 410-872-1515\n                  Co-Chair:   David Harrington\n     \
    \                         Enterasys Networks\n                  Postal:     35\
    \ Industrial Way\n                              P. O. Box 5005\n             \
    \                 Rochester, New Hampshire 03866-5005\n                      \
    \        USA\n                  EMail:      dbh@enterasys.com\n              \
    \    Phone:      +1 603-337-2614\n                  Co-editor:  Rob Frye\n   \
    \                           Vibrant Solutions\n                  Postal:     2711\
    \ Prosperity Ave\n                              Fairfax, Virginia 22031\n    \
    \                          USA\n                  E-mail:     rfrye@vibrant-1.com\n\
    \                  Phone:      +1-703-270-2000\n                  Co-editor: \
    \ David B. Levi\n                              Nortel Networks\n             \
    \     Postal:     3505 Kesterwood Drive\n                              Knoxville,\
    \ Tennessee 37918\n                  E-mail:     dlevi@nortelnetworks.com\n  \
    \                Phone:      +1 865 686 0432\n                  Co-editor:  Shawn\
    \ A. Routhier\n                              Wind River Systems, Inc.\n      \
    \            Postal:     500 Wind River Way\n                              Alameda,\
    \ CA 94501\n                  E-mail:     sar@epilogue.com\n                 \
    \ Phone:      +1 510 749 2095\n                  Co-editor:  Bert Wijnen\n   \
    \                           Lucent Technologies\n                  Postal:   \
    \  Schagen 33\n                              3461 GL Linschoten\n            \
    \                  Netherlands\n                  Email:      bwijnen@lucent.com\n\
    \                  Phone:      +31-348-407-775\n                 \"\n        DESCRIPTION\n\
    \            \"This MIB module defines objects to help support\n             coexistence\
    \ between SNMPv1, SNMPv2c, and SNMPv3.\n             Copyright (C) The Internet\
    \ Society (2003) This\n             version of this MIB module is part of RFC\
    \ 3584;\n             see the RFC itself for full legal notices.\"\n        REVISION\
    \ \"200308060000Z\" -- 06 Aug 2003\n        DESCRIPTION\n            \"Updated\
    \ the LAST-UPDATED, CONTACT-INFO, and REVISION\n             clauses and added\
    \ a copyright notice to the\n             DESCRIPTION clause of the MIB module's\n\
    \             MODULE-IDENTITY invocation.\n             Updated the description\
    \ of snmpCommunityTransportTag\n             to make it consistent with the rest\
    \ of the document.\n             Updated the description of `snmpTargetAddrMMS'\
    \ to\n             clarify that a value of 0 means that the maximum\n        \
    \     message size is unknown.\n             Changed the name of 'snmpCommunityGroup'\
    \ to\n             snmpCommunityTableGroup to avoid a name conflict\n        \
    \     with the SNMPv2-MIB.\n             Updated DESCRIPTION of snmpCommunityName.\n\
    \             Updated DESCRIPTION of snmpTrapCommunity.\n             Added snmpCommunityMIBFullCompliance.\n\
    \             This version published as RFC 3584.\"\n        REVISION \"200003060000Z\"\
    \ -- 6 Mar 2000\n        DESCRIPTION \"This version published as RFC 2576.\"\n\
    \    ::= { snmpModules 18 }\n"
- title: -- Administrative assignments ************************************
  contents:
  - '-- Administrative assignments ************************************

    '
- title: snmpCommunityMIBObjects
  contents:
  - "snmpCommunityMIBObjects\n        OBJECT IDENTIFIER ::= { snmpCommunityMIB 1 }\n"
- title: snmpCommunityMIBConformance
  contents:
  - "snmpCommunityMIBConformance\n        OBJECT IDENTIFIER ::= { snmpCommunityMIB\
    \ 2 }\n"
- title: --
  contents:
  - '--

    '
- title: -- The snmpCommunityTable contains a database of community
  contents:
  - '-- The snmpCommunityTable contains a database of community

    '
- title: -- strings.  This table provides mappings between community
  contents:
  - '-- strings.  This table provides mappings between community

    '
- title: -- strings, and the parameters required for View-based Access
  contents:
  - '-- strings, and the parameters required for View-based Access

    '
- title: -- Control.
  contents:
  - '-- Control.

    '
- title: --
  contents:
  - '--

    '
- title: snmpCommunityTable OBJECT-TYPE
  contents:
  - "snmpCommunityTable OBJECT-TYPE\n    SYNTAX       SEQUENCE OF SnmpCommunityEntry\n\
    \    MAX-ACCESS   not-accessible\n    STATUS       current\n    DESCRIPTION\n\
    \        \"The table of community strings configured in the SNMP\n         engine's\
    \ Local Configuration Datastore (LCD).\"\n    ::= { snmpCommunityMIBObjects 1\
    \ }\n"
- title: snmpCommunityEntry OBJECT-TYPE
  contents:
  - "snmpCommunityEntry OBJECT-TYPE\n    SYNTAX       SnmpCommunityEntry\n    MAX-ACCESS\
    \   not-accessible\n    STATUS       current\n    DESCRIPTION\n        \"Information\
    \ about a particular community string.\"\n    INDEX       { IMPLIED snmpCommunityIndex\
    \ }\n    ::= { snmpCommunityTable 1 }\n"
- title: SnmpCommunityEntry ::= SEQUENCE {
  contents:
  - "SnmpCommunityEntry ::= SEQUENCE {\n    snmpCommunityIndex               SnmpAdminString,\n\
    \    snmpCommunityName                OCTET STRING,\n    snmpCommunitySecurityName\
    \        SnmpAdminString,\n    snmpCommunityContextEngineID     SnmpEngineID,\n\
    \    snmpCommunityContextName         SnmpAdminString,\n    snmpCommunityTransportTag\
    \        SnmpTagValue,\n    snmpCommunityStorageType         StorageType,\n  \
    \  snmpCommunityStatus              RowStatus\n"
- title: '}'
  contents:
  - '}

    '
- title: snmpCommunityIndex OBJECT-TYPE
  contents:
  - "snmpCommunityIndex OBJECT-TYPE\n    SYNTAX      SnmpAdminString (SIZE(1..32))\n\
    \    MAX-ACCESS  not-accessible\n    STATUS      current\n    DESCRIPTION\n  \
    \      \"The unique index value of a row in this table.\"\n    ::= { snmpCommunityEntry\
    \ 1 }\n"
- title: snmpCommunityName OBJECT-TYPE
  contents:
  - "snmpCommunityName OBJECT-TYPE\n    SYNTAX       OCTET STRING\n    MAX-ACCESS\
    \   read-create\n    STATUS       current\n    DESCRIPTION\n        \"The community\
    \ string for which a row in this table\n         represents a configuration. \
    \ There is no SIZE constraint\n         specified for this object because RFC\
    \ 1157 does not\n         impose any explicit limitation on the length of community\n\
    \         strings (their size is constrained indirectly by the\n         SNMP\
    \ message size).\"\n    ::= { snmpCommunityEntry 2 }\n"
- title: snmpCommunitySecurityName OBJECT-TYPE
  contents:
  - "snmpCommunitySecurityName OBJECT-TYPE\n    SYNTAX       SnmpAdminString (SIZE(1..32))\n\
    \    MAX-ACCESS   read-create\n    STATUS       current\n    DESCRIPTION\n   \
    \     \"A human readable string representing the corresponding\n         value\
    \ of snmpCommunityName in a Security Model\n         independent format.\"\n \
    \   ::= { snmpCommunityEntry 3 }\n"
- title: snmpCommunityContextEngineID OBJECT-TYPE
  contents:
  - "snmpCommunityContextEngineID OBJECT-TYPE\n    SYNTAX       SnmpEngineID\n   \
    \ MAX-ACCESS   read-create\n    STATUS       current\n    DESCRIPTION\n      \
    \  \"The contextEngineID indicating the location of the\n         context in which\
    \ management information is accessed\n         when using the community string\
    \ specified by the\n         corresponding instance of snmpCommunityName.\n  \
    \       The default value is the snmpEngineID of the entity in\n         which\
    \ this object is instantiated.\"\n    ::= { snmpCommunityEntry 4 }\n"
- title: snmpCommunityContextName OBJECT-TYPE
  contents:
  - "snmpCommunityContextName OBJECT-TYPE\n    SYNTAX       SnmpAdminString (SIZE(0..32))\n\
    \    MAX-ACCESS   read-create\n    STATUS       current\n    DESCRIPTION\n   \
    \     \"The context in which management information is accessed\n         when\
    \ using the community string specified by the\n         corresponding instance\
    \ of snmpCommunityName.\"\n    DEFVAL      { ''H }   -- the empty string\n   \
    \ ::= { snmpCommunityEntry 5 }\n"
- title: snmpCommunityTransportTag OBJECT-TYPE
  contents:
  - "snmpCommunityTransportTag OBJECT-TYPE\n    SYNTAX       SnmpTagValue\n    MAX-ACCESS\
    \   read-create\n    STATUS       current\n    DESCRIPTION\n        \"This object\
    \ specifies a set of transport endpoints\n         which are used in two ways:\n\
    \            - to specify the transport endpoints from which an\n            \
    \  SNMP entity will accept management requests, and\n            - to specify\
    \ the transport endpoints to which a\n              notification may be sent using\
    \ the community\n              string matching the corresponding instance of\n\
    \              snmpCommunityName.\n         In either case, if the value of this\
    \ object has\n         zero-length, transport endpoints are not checked when\n\
    \         either authenticating messages containing this community\n         string,\
    \ nor when generating notifications.\n         The transports identified by this\
    \ object are specified\n         in the snmpTargetAddrTable.  Entries in that\
    \ table\n         whose snmpTargetAddrTagList contains this tag value\n      \
    \   are identified.\n         If a management request containing a community string\n\
    \         that matches the corresponding instance of\n         snmpCommunityName\
    \ is received on a transport endpoint\n         other than the transport endpoints\
    \ identified by this\n         object the request is deemed unauthentic.\n   \
    \      When a notification is to be sent using an entry in\n         this table,\
    \ if the destination transport endpoint of\n         the notification does not\
    \ match one of the transport\n         endpoints selected by this object, the\
    \ notification\n         is not sent.\"\n    DEFVAL      { ''H }   -- the empty\
    \ string\n    ::= { snmpCommunityEntry 6 }\n"
- title: snmpCommunityStorageType OBJECT-TYPE
  contents:
  - "snmpCommunityStorageType OBJECT-TYPE\n    SYNTAX       StorageType\n    MAX-ACCESS\
    \   read-create\n    STATUS       current\n    DESCRIPTION\n        \"The storage\
    \ type for this conceptual row in the\n         snmpCommunityTable.  Conceptual\
    \ rows having the value\n         'permanent' need not allow write-access to any\n\
    \         columnar object in the row.\"\n    ::= { snmpCommunityEntry 7 }\n"
- title: snmpCommunityStatus OBJECT-TYPE
  contents:
  - "snmpCommunityStatus OBJECT-TYPE\n    SYNTAX       RowStatus\n    MAX-ACCESS \
    \  read-create\n    STATUS       current\n    DESCRIPTION\n        \"The status\
    \ of this conceptual row in the\n         snmpCommunityTable.\n         An entry\
    \ in this table is not qualified for activation\n         until instances of all\
    \ corresponding columns have been\n         initialized, either through default\
    \ values, or through\n         Set operations.  The snmpCommunityName and\n  \
    \       snmpCommunitySecurityName objects must be explicitly set.\n         There\
    \ is no restriction on setting columns in this table\n         when the value\
    \ of snmpCommunityStatus is active(1).\"\n    ::= { snmpCommunityEntry 8 }\n"
- title: --
  contents:
  - '--

    '
- title: -- The snmpTargetAddrExtTable
  contents:
  - '-- The snmpTargetAddrExtTable

    '
- title: --
  contents:
  - '--

    '
- title: snmpTargetAddrExtTable OBJECT-TYPE
  contents:
  - "snmpTargetAddrExtTable OBJECT-TYPE\n    SYNTAX       SEQUENCE OF SnmpTargetAddrExtEntry\n\
    \    MAX-ACCESS   not-accessible\n    STATUS       current\n    DESCRIPTION\n\
    \        \"The table of mask and maximum message size (mms) values\n         associated\
    \ with the snmpTargetAddrTable.\n         The snmpTargetAddrExtTable augments\
    \ the\n         snmpTargetAddrTable with a transport address mask value\n    \
    \     and a maximum message size value.  The transport address\n         mask\
    \ allows entries in the snmpTargetAddrTable to define\n         a set of addresses\
    \ instead of just a single address.\n         The maximum message size value allows\
    \ the maximum\n         message size of another SNMP entity to be configured for\n\
    \         use in SNMPv1 (and SNMPv2c) transactions, where the\n         message\
    \ format does not specify a maximum message size.\"\n    ::= { snmpCommunityMIBObjects\
    \ 2 }\n"
- title: snmpTargetAddrExtEntry OBJECT-TYPE
  contents:
  - "snmpTargetAddrExtEntry OBJECT-TYPE\n    SYNTAX       SnmpTargetAddrExtEntry\n\
    \    MAX-ACCESS   not-accessible\n    STATUS       current\n    DESCRIPTION\n\
    \        \"Information about a particular mask and mms value.\"\n    AUGMENTS\
    \       { snmpTargetAddrEntry }\n    ::= { snmpTargetAddrExtTable 1 }\n"
- title: SnmpTargetAddrExtEntry ::= SEQUENCE {
  contents:
  - "SnmpTargetAddrExtEntry ::= SEQUENCE {\n    snmpTargetAddrTMask              OCTET\
    \ STRING,\n    snmpTargetAddrMMS                Integer32\n"
- title: '}'
  contents:
  - '}

    '
- title: snmpTargetAddrTMask OBJECT-TYPE
  contents:
  - "snmpTargetAddrTMask OBJECT-TYPE\n    SYNTAX      OCTET STRING (SIZE (0..255))\n\
    \    MAX-ACCESS  read-create\n    STATUS      current\n    DESCRIPTION\n     \
    \   \"The mask value associated with an entry in the\n         snmpTargetAddrTable.\
    \  The value of this object must\n         have the same length as the corresponding\
    \ instance of\n         snmpTargetAddrTAddress, or must have length 0.  An\n \
    \        attempt to set it to any other value will result in\n         an inconsistentValue\
    \ error.\n         The value of this object allows an entry in the\n         snmpTargetAddrTable\
    \ to specify multiple addresses.\n         The mask value is used to select which\
    \ bits of\n         a transport address must match bits of the corresponding\n\
    \         instance of snmpTargetAddrTAddress, in order for the\n         transport\
    \ address to match a particular entry in the\n         snmpTargetAddrTable.  Bits\
    \ which are 1 in the mask\n         value indicate bits in the transport address\
    \ which\n         must match bits in the snmpTargetAddrTAddress value.\n     \
    \    Bits which are 0 in the mask indicate bits in the\n         transport address\
    \ which need not match.  If the\n         length of the mask is 0, the mask should\
    \ be treated\n         as if all its bits were 1 and its length were equal\n \
    \        to the length of the corresponding value of\n         snmpTargetAddrTable.\n\
    \         This object may not be modified while the value of the\n         corresponding\
    \ instance of snmpTargetAddrRowStatus is\n         active(1).  An attempt to set\
    \ this object in this case\n         will result in an inconsistentValue error.\"\
    \n    DEFVAL { ''H }\n    ::= { snmpTargetAddrExtEntry 1 }\n"
- title: snmpTargetAddrMMS OBJECT-TYPE
  contents:
  - "snmpTargetAddrMMS OBJECT-TYPE\n    SYNTAX      Integer32 (0|484..2147483647)\n\
    \    MAX-ACCESS  read-create\n    STATUS      current\n    DESCRIPTION\n     \
    \   \"The maximum message size value associated with an entry\n         in the\
    \ snmpTargetAddrTable.  Note that a value of 0 means\n         that the maximum\
    \ message size is unknown.\"\n    DEFVAL { 484 }\n    ::= { snmpTargetAddrExtEntry\
    \ 2 }\n"
- title: --
  contents:
  - '--

    '
- title: -- The snmpTrapAddress and snmpTrapCommunity objects are included
  contents:
  - '-- The snmpTrapAddress and snmpTrapCommunity objects are included

    '
- title: -- in notifications that are forwarded by a proxy, which were
  contents:
  - '-- in notifications that are forwarded by a proxy, which were

    '
- title: -- originally received as SNMPv1 Trap messages.
  contents:
  - '-- originally received as SNMPv1 Trap messages.

    '
- title: --
  contents:
  - '--

    '
- title: snmpTrapAddress OBJECT-TYPE
  contents:
  - "snmpTrapAddress OBJECT-TYPE\n    SYNTAX      IpAddress\n    MAX-ACCESS  accessible-for-notify\n\
    \    STATUS      current\n    DESCRIPTION\n        \"The value of the agent-addr\
    \ field of a Trap PDU which\n         is forwarded by a proxy forwarder application\
    \ using\n         an SNMP version other than SNMPv1.  The value of this\n    \
    \     object SHOULD contain the value of the agent-addr field\n         from the\
    \ original Trap PDU as generated by an SNMPv1\n         agent.\"\n    ::= { snmpCommunityMIBObjects\
    \ 3 }\n"
- title: snmpTrapCommunity OBJECT-TYPE
  contents:
  - "snmpTrapCommunity OBJECT-TYPE\n    SYNTAX      OCTET STRING\n    MAX-ACCESS \
    \ accessible-for-notify\n    STATUS      current\n    DESCRIPTION\n        \"\
    The value of the community string field of an SNMPv1\n         message containing\
    \ a Trap PDU which is forwarded by a\n         a proxy forwarder application using\
    \ an SNMP version\n         other than SNMPv1.  The value of this object SHOULD\n\
    \         contain the value of the community string field from\n         the original\
    \ SNMPv1 message containing a Trap PDU as\n         generated by an SNMPv1 agent.\
    \  There is no SIZE\n         constraint specified for this object because RFC\
    \ 1157\n         does not impose any explicit limitation on the length\n     \
    \    of community strings (their size is constrained\n         indirectly by the\
    \ SNMP message size).\"\n    ::= { snmpCommunityMIBObjects 4 }\n"
- title: -- Conformance Information **************************************
  contents:
  - '-- Conformance Information **************************************

    '
- title: snmpCommunityMIBCompliances OBJECT IDENTIFIER
  contents:
  - "snmpCommunityMIBCompliances OBJECT IDENTIFIER\n                            ::=\
    \ { snmpCommunityMIBConformance 1 }\n"
- title: snmpCommunityMIBGroups      OBJECT IDENTIFIER
  contents:
  - "snmpCommunityMIBGroups      OBJECT IDENTIFIER\n                            ::=\
    \ { snmpCommunityMIBConformance 2 }\n"
- title: -- Compliance statements
  contents:
  - '-- Compliance statements

    '
- title: snmpCommunityMIBCompliance MODULE-COMPLIANCE
  contents:
  - "snmpCommunityMIBCompliance MODULE-COMPLIANCE\n    STATUS       current\n    DESCRIPTION\n\
    \        \"The compliance statement for SNMP engines which\n         implement\
    \ the SNMP-COMMUNITY-MIB.\"\n    MODULE       -- this module\n        MANDATORY-GROUPS\
    \ { snmpCommunityTableGroup }\n        OBJECT           snmpCommunityName\n  \
    \      MIN-ACCESS       read-only\n        DESCRIPTION     \"Write access is not\
    \ required.\"\n        OBJECT           snmpCommunitySecurityName\n        MIN-ACCESS\
    \       read-only\n        DESCRIPTION     \"Write access is not required.\"\n\
    \        OBJECT           snmpCommunityContextEngineID\n        MIN-ACCESS   \
    \    read-only\n        DESCRIPTION     \"Write access is not required.\"\n  \
    \      OBJECT           snmpCommunityContextName\n        MIN-ACCESS       read-only\n\
    \        DESCRIPTION     \"Write access is not required.\"\n        OBJECT   \
    \        snmpCommunityTransportTag\n        MIN-ACCESS       read-only\n     \
    \   DESCRIPTION     \"Write access is not required.\"\n        OBJECT        \
    \   snmpCommunityStorageType\n        MIN-ACCESS       read-only\n        DESCRIPTION\
    \     \"Write access is not required.\"\n        OBJECT           snmpCommunityStatus\n\
    \        MIN-ACCESS       read-only\n        DESCRIPTION     \"Write access is\
    \ not required.\"\n    ::= { snmpCommunityMIBCompliances 1 }\n"
- title: snmpProxyTrapForwardCompliance MODULE-COMPLIANCE
  contents:
  - "snmpProxyTrapForwardCompliance MODULE-COMPLIANCE\n    STATUS       current\n\
    \    DESCRIPTION\n        \"The compliance statement for SNMP engines which\n\
    \         contain a proxy forwarding application which is\n         capable of\
    \ forwarding SNMPv1 traps using SNMPv2c\n         or SNMPv3.\"\n    MODULE   \
    \    -- this module\n        MANDATORY-GROUPS { snmpProxyTrapForwardGroup }\n\
    \    ::= { snmpCommunityMIBCompliances 2 }\n"
- title: snmpCommunityMIBFullCompliance MODULE-COMPLIANCE
  contents:
  - "snmpCommunityMIBFullCompliance MODULE-COMPLIANCE\n    STATUS       current\n\
    \    DESCRIPTION\n        \"The compliance statement for SNMP engines which\n\
    \         implement the SNMP-COMMUNITY-MIB with full read-create\n         access.\"\
    \n    MODULE       -- this module\n        MANDATORY-GROUPS { snmpCommunityTableGroup\
    \ }\n    ::= { snmpCommunityMIBCompliances 3 }\n"
- title: snmpCommunityTableGroup OBJECT-GROUP
  contents:
  - "snmpCommunityTableGroup OBJECT-GROUP\n    OBJECTS {\n        snmpCommunityName,\n\
    \        snmpCommunitySecurityName,\n        snmpCommunityContextEngineID,\n \
    \       snmpCommunityContextName,\n        snmpCommunityTransportTag,\n      \
    \  snmpCommunityStorageType,\n        snmpCommunityStatus,\n        snmpTargetAddrTMask,\n\
    \        snmpTargetAddrMMS\n    }\n    STATUS       current\n    DESCRIPTION\n\
    \        \"A collection of objects providing for configuration\n         of community\
    \ strings for SNMPv1 (and SNMPv2c) usage.\"\n    ::= { snmpCommunityMIBGroups\
    \ 1 }\n"
- title: snmpProxyTrapForwardGroup OBJECT-GROUP
  contents:
  - "snmpProxyTrapForwardGroup OBJECT-GROUP\n    OBJECTS {\n        snmpTrapAddress,\n\
    \        snmpTrapCommunity\n    }\n    STATUS       current\n    DESCRIPTION\n\
    \        \"Objects which are used by proxy forwarding applications\n         when\
    \ translating traps between SNMP versions.  These are\n         used to preserve\
    \ SNMPv1-specific information when\n         translating to SNMPv2c or SNMPv3.\"\
    \n    ::= { snmpCommunityMIBGroups 3 }\n"
- title: END
  contents:
  - 'END

    '
- title: 6.  Intellectual Property Statement
  contents:
  - "6.  Intellectual Property Statement\n   The IETF takes no position regarding\
    \ the validity or scope of any\n   intellectual property or other rights that\
    \ might be claimed to\n   pertain to the implementation or use of the technology\
    \ described in\n   this document or the extent to which any license under such\
    \ rights\n   might or might not be available; neither does it represent that it\n\
    \   has made any effort to identify any such rights.  Information on the\n   IETF's\
    \ procedures with respect to rights in standards-track and\n   standards-related\
    \ documentation can be found in BCP-11.  Copies of\n   claims of rights made available\
    \ for publication and any assurances of\n   licenses to be made available, or\
    \ the result of an attempt made to\n   obtain a general license or permission\
    \ for the use of such\n   proprietary rights by implementors or users of this\
    \ specification can\n   be obtained from the IETF Secretariat.\n   The IETF invites\
    \ any interested party to bring to its attention any\n   copyrights, patents or\
    \ patent applications, or other proprietary\n   rights which may cover technology\
    \ that may be required to practice\n   this standard.  Please address the information\
    \ to the IETF Executive\n   Director.\n"
- title: 7.  Acknowledgments
  contents:
  - "7.  Acknowledgments\n   This document is the result of the efforts of the SNMPv3\
    \ Working\n   Group.  The design of the SNMP-COMMUNITY-MIB incorporates work done\n\
    \   by the authors of SNMPv2*:\n      Jeff Case (SNMP Research, Inc.)\n      David\
    \ Harrington (Enterasys Networks)\n      David Levi (Nortel Networks)\n      Brian\
    \ O'Keefe (Hewlett Packard)\n      Jon Saperia (IronBridge Networks, Inc.)\n \
    \     Steve Waldbusser (International Network Services)\n"
- title: 8.  Security Considerations
  contents:
  - "8.  Security Considerations\n   Although SNMPv1 and SNMPv2 do not provide any\
    \ security, allowing\n   community names to be mapped into securityName/contextName\
    \ provides\n   the ability to use view-based access control to limit the access\
    \ of\n   unsecured SNMPv1 and SNMPv2 operations.  In fact, it is important for\n\
    \   network administrators to make use of this capability in order to\n   avoid\
    \ unauthorized access to MIB data that would otherwise be secure.\n   When a proxy\
    \ implementation translates messages between SNMPv1 (or\n   SNMPv2c) and SNMPv3,\
    \ there may be a loss of security.  For example,\n   an SNMPv3 message received\
    \ using authentication and privacy which is\n   subsequently forwarded using SNMPv1\
    \ will lose the security benefits\n   of using authentication and privacy (also\
    \ known as confidentiality).\n   Careful configuration of proxies is required\
    \ to address such\n   situations.  One approach to deal with such situations might\
    \ be to\n   use an encrypted tunnel.\n   There are a number of management objects\
    \ defined in this MIB module\n   with a MAX-ACCESS clause of read-write and/or\
    \ read-create.  Such\n   objects may be considered sensitive or vulnerable in\
    \ some network\n   environments.  The support for SET operations in a non-secure\n\
    \   environment without proper protection can have a negative effect on\n   network\
    \ operations.  These are the tables and objects and their\n   sensitivity/vulnerability:\n\
    \   -  The snmpCommunityTable allows creation and deletion of community\n    \
    \  strings, which is potentially a serious security hole.  Access to\n      this\
    \ table should be greatly restricted, preferably by only\n      allowing write\
    \ access using SNMPv3 VACM and USM, with\n      authentication and privacy.\n\
    \   -  The snmpTargetAddrExtTable contains write-able objects which may\n    \
    \  also be considered sensitive, and so access to it should be\n      restricted\
    \ as well.\n   Some of the readable objects in this MIB module (i.e., objects\
    \ with a\n   MAX-ACCESS other than not-accessible) may be considered sensitive\
    \ or\n   vulnerable in some network environments.  It is thus important to\n \
    \  control even GET and/or NOTIFY access to these objects and possibly\n   to\
    \ even encrypt the values of these objects when sending them over\n   the network\
    \ via SNMP.  These are the tables and objects and their\n   sensitivity/vulnerability:\n\
    \   -  The snmpCommunityTable has the potential to expose community\n      strings\
    \ which provide access to more information than that which\n      is available\
    \ using the usual 'public' community string.  For this\n      reason, a security\
    \ administrator may wish to limit accessibility\n      to objects in the snmpCommunityTable,\
    \ and in particular, to make\n      it inaccessible when using the 'public' community\
    \ string.\n   SNMP versions prior to SNMPv3 did not include adequate security.\n\
    \   Even if the network itself is secure (for example by using IPSec),\n   even\
    \ then, there is no control as to who on the secure network is\n   allowed to\
    \ access and GET/SET (read/change/create/delete) the objects\n   in this MIB module.\n\
    \   It is RECOMMENDED that implementers consider the security features as\n  \
    \ provided by the SNMPv3 framework (see [RFC3410], section 8),\n   including full\
    \ support for the SNMPv3 cryptographic mechanisms (for\n   authentication and\
    \ privacy).\n   Further, deployment of SNMP versions prior to SNMPv3 is NOT\n\
    \   RECOMMENDED.  Instead, it is RECOMMENDED to deploy SNMPv3 and to\n   enable\
    \ cryptographic security.  It is then a customer/operator\n   responsibility to\
    \ ensure that the SNMP entity giving access to an\n   instance of this MIB module\
    \ is properly configured to give access to\n   the objects only to those principals\
    \ (users) that have legitimate\n   rights to indeed GET or SET (change/create/delete)\
    \ them.\n"
- title: 9.  References
  contents:
  - '9.  References

    '
- title: 9.1.  Normative References
  contents:
  - "9.1.  Normative References\n   [RFC1155]   Rose, M. and K. McCloghrie, \"Structure\
    \ and Identification\n               of Management Information for TCP/IP-based\
    \ internets\",\n               STD 16, RFC 1155, May 1990.\n   [RFC1157]   Case,\
    \ J., Fedor, M., Schoffstall, M. and C. Davin,\n               \"Simple Network\
    \ Management Protocol (SNMP)\", STD 15, RFC\n               1157, May 1990.\n\
    \   [RFC1212]   Rose, M. and K. McCloghrie, Eds., \"Concise MIB\n            \
    \   Definitions\", STD 16, RFC 1212, March 1991.\n   [RFC1215]   Rose, M., \"\
    A Convention for Defining Traps for use with\n               the SNMP\", RFC 1215,\
    \ March 1991.\n   [RFC1303]   McCloghrie, K. and M. Rose, \"A Convention for Describing\n\
    \               SNMP-based Agents\", RFC 1303, February 1992.\n   [RFC1901]  \
    \ Case, J., McCloghrie, K., Rose, M. and S. Waldbusser,\n               \"Introduction\
    \ to Community-based SNMPv2\", RFC 1901,\n               January 1996.\n   [RFC2119]\
    \   Bradner, S., \"Key words for use in RFCs to Indicate\n               Requirement\
    \ Levels\", BCP 14, RFC 2119, March 1997.\n   [RFC2578]   McCloghrie, K., Perkins,\
    \ D. and J. Schoenwaelder,\n               \"Structure of Management Information\
    \ Version 2 (SMIv2)\",\n               RFC 2578, STD 58, April 1999.\n   [RFC2579]\
    \   McCloghrie, K., Perkins, D. and J. Schoenwaelder,\n               \"Textual\
    \ Conventions for SMIv2\", STD 58, RFC 2579, April\n               1999.\n   [RFC2580]\
    \   McCloghrie, K., Perkins, D. and J. Schoenwaelder,\n               \"Conformance\
    \ Statements for SMIv2\", STD 58, RFC 2580,\n               April 1999.\n   [RFC3411]\
    \   Harrington, D., Presuhn, R. and B. Wijnen, \"An\n               Architecture\
    \ for Describing Simple Network Management\n               Protocol (SNMP) Management\
    \ Frameworks\", STD 62, RFC 3411,\n               December 2002.\n   [RFC3412]\
    \   Case, J., Harrington, D., Presuhn, R. and B. Wijnen,\n               \"Message\
    \ Processing and Dispatching for the Simple\n               Network Management\
    \ Protocol (SNMP)\", STD 62, RFC 3412,\n               December 2002.\n   [RFC3413]\
    \   Levi, D., Meyer, P. and B. Stewart, \"Simple Network\n               Management\
    \ Protocol (SNMP) Applications\", STD 62, RFC\n               3413, December 2002.\n\
    \   [RFC3414]   Blumenthal, U. and B. Wijnen, \"The User-Based Security\n    \
    \           Model (USM) for Version 3 of the Simple Network\n               Management\
    \ Protocol (SNMP)\", STD 62, RFC 3414, December\n               2002.\n   [RFC3415]\
    \   Wijnen, B., Presuhn, R. and K. McCloghrie, \"View-based\n               Access\
    \ Control Model (VACM) for the Simple Network\n               Management Protocol\
    \ (SNMP)\", STD 62, RFC 3415, December\n               2002.\n   [RFC3416]   Presuhn,\
    \ R., Ed., \"Version 2 of the Protocol Operations\n               for the Simple\
    \ Network Management Protocol (SNMPv2)\", STD\n               62, RFC 3416, December\
    \ 2002.\n   [RFC3417]   Presuhn, R., Ed., \"Transport Mappings for Version 2 of\n\
    \               the Simple Network Management Protocol (SNMPv2)\", STD 62,\n \
    \              RFC 3417, December 2002.\n   [RFC3418]   Presuhn, R., Ed., \"Management\
    \ Information Base (MIB) for\n               Version 2 of the Simple Network Management\
    \ Protocol\n               (SNMP)\", STD 62, RFC 3418, December 2002.\n   [ASN1]\
    \      Information processing systems - Open Systems\n               Interconnection\
    \ - Specification of Abstract Syntax\n               Notation One (ASN.1), International\
    \ Organization for\n               Standardization.  International Standard 8824,\
    \ (December,\n               1987).\n"
- title: 9.2.  Informative References
  contents:
  - "9.2.  Informative References\n   [RFC1908]   Case, J., McCloghrie, K., Rose,\
    \ M. and S. Waldbusser,\n               \"Coexistence between Version 1 and Version\
    \ 2 of the\n               Internet-standard Network Management Framework\", RFC\n\
    \               1908, January 1996.\n   [RFC2089]   Levi, D. and B. Wijnen, \"\
    Mapping SNMPv2 onto SNMPv1\n               within a bilingual SNMP agent\", RFC\
    \ 2089, January 1997.\n   [RFC2576]   Frye, R., Levi, D., Routhier, S. and B.\
    \ Wijnen,\n               \"Coexistence between Version 1, Version 2, and Version\
    \ 3\n               of the Internet-standard Network Management Framework\",\n\
    \               RFC 2576, March 2000.\n   [RFC3410]   Case, J., Mundy, R., Partain,\
    \ D. and B. Stewart,\n               \"Introduction and Applicability Statements\
    \ for Internet-\n               Standard Management Framework\", RFC 3410, December\
    \ 2002.\n"
- title: Appendix A.  Change Log
  contents:
  - 'Appendix A.  Change Log

    '
- title: A.1.  Changes From RFC 2576
  contents:
  - "A.1.  Changes From RFC 2576\n   Section numbers below refer to the old section\
    \ numbers from RFC 2576.\n   Some section numbers have changed since RFC 2576.\n\
    \   -  Added text to abstract about conversion of MIBs from SMIv1 to\n      SMIv2.\n\
    \   -  Added note at end of section 1.3 that all discussion of SNMPv2 PDU\n  \
    \    types and protocol operations applies to both SNMPv2c and SNMPv3.\n   - \
    \ Added text at end of section 1.4 to clarify that there is no such\n      thing\
    \ as 'SNMPv3 access to MIB data', as SNMPv3 just uses SNMPv2\n      PDU types\
    \ and protocol operations.\n   -  Moved section 1.4 to the beginning of section\
    \ 4.\n   -  Changed \"MUST\" to \"SHOULD\" in item (3) of the first list in\n\
    \      Section 2.1.1 to since unconstrained INTEGER is not actually\n      illegal\
    \ in SMIv2.\n   -  Changed \"SHOULD\" to \"MUST\" in item (13) of the first list\
    \ in\n      Section 2.1.1 to clarify that collecting related objects into\n  \
    \    groups is required when translating a MIB module from SMIv1 to\n      SMIv2.\n\
    \   -  Re-organized bullets in section 2.1.1 to improve clarity.\n   -  Changed\
    \ \"SHOULD\" to \"MUST\" in items (1) and (2) of Section 2.3\n      since those\
    \ updates are indeed required when translating a\n      capabilities statement\
    \ from the language defined by RFC 1303 into\n      SMIv2.\n   -  In the second\
    \ bullet of the last part of Section 3 listing the\n      SNMPv2 notification\
    \ parameters, clarified that the snmpTrapOID\n      parameter refers to the value\
    \ portion (not the name portion) of\n      the second variable-binding, and changed\
    \ the wording in the text\n      under bullet (1) of Section 3.2 from \"the snmpTrapOID\"\
    \ to \"the\n      snmpTrapOID value\" to emphasize this point.\n   -  In bullet\
    \ (6) of Section 3.2 emphasized that the SNMPv2 variable-\n      bindings do not\
    \ include sysUpTime.0 an snmpTrapOID.0.\n   -  In Section 4.2 clarified that the\
    \ 'Upstream Version' refers to the\n      version used between the command generator\
    \ or notification\n      receiver and the proxy, and the 'Downstream Version'\
    \ refers to the\n      version used between the proxy and the command responder\
    \ or\n      notification originator.  RFC 2576 neglected to mention the\n    \
    \  notification receiver and notification originator.\n   -  In Section 4.1.2\
    \ added text noting that SNMPv1 access to MIB data\n      SHOULD NOT be used when\
    \ processing SNMPv2c or SNMPv3 messages and\n      re-worded final paragraph to\
    \ note that the sub-sections that\n      follow are concerned solely with command\
    \ responders that use\n      SNMPv2 access to MIB data while processing an SNMPv1\
    \ request.\n   -  Re-worded first bullet, section 4.2.1, to make it more readable.\n\
    \   -  In Section 4.2.1 clarified that the error-index field must be set\n   \
    \   to zero in a translated GetResponse-PDU with an error-status of\n      'tooBig'\
    \ and made explicit the rationale for retrying a\n      GetBulkRequest-PDU only\
    \ once.\n   -  Added text to the Deployment Hint in Section 4.2.2 to clarify that\n\
    \      different principals should be used for SNMPv1 requests and\n      SNMPv2/v3c\
    \ requests if for SNMPv1 requests a principal for which\n      Counter64 objects\
    \ are not-in-view is used.\n   -  In Section 5.2.1 clarified that the securityName\
    \ value and the\n      scopedPDU's contextSnmpEngineID and contextName values\
    \ come from\n      the selected entry in the snmpCommunityTable.  Also clarified\
    \ how\n      maxSizeResponseScopedPDU is determined and that\n      securityStateReference\
    \ must contain the community string of the\n      original request.\n   -  Added\
    \ Section 5.2.4 on Proxy Forwarding Of Requests.\n   -  In Section 5.3 clarified\
    \ that snmpTargetAddrTMask is to be ignored\n      whenever its use is not explicitly\
    \ called for.\n   -  Updated the LAST-UPDATED, CONTACT-INFO, and REVISION clauses\
    \ and\n      added a copyright notice to the DESCRIPTION clause of the MIB\n \
    \     module's MODULE-IDENTITY invocation.\n   -  Added text to DESCRIPTION of\
    \ snmpCommunityName and\n      snmpTrapCommunity to clarify why the object has\
    \ no size\n      restriction.\n   -  Updated the description of snmpCommunityTransportTag\
    \ to make it\n      consistent with the rest of the document.\n   -  Updated the\
    \ description of 'snmpTargetAddrMMS' to clarify that a\n      value of 0 means\
    \ that the maximum message size is unknown.\n   -  Changed the name of 'snmpCommunityGroup'\
    \ to\n      'snmpCommunityTableGroup' in order to resolve a name conflict with\n\
    \      the SNMPv2-MIB.\n   -  Added compliance statement to SNMP-COMMUNITY-MIB\
    \ for full read-\n      create compliance.\n   -  Divided references into Normative\
    \ References and Informative\n      Reference and updated them to point to current\
    \ documents.\n   -  Inserted current year into all copyright notices.\n   -  Corrected\
    \ various typographical and grammatical errors.\n"
- title: A.2.  Changes Between RFC 1908 and RFC 2576
  contents:
  - "A.2.  Changes Between RFC 1908 and RFC 2576\n   -  Editorial changes to comply\
    \ with current RFC requirements.\n   -  Added/updated copyright statements.\n\
    \   -  Added Intellectual Property section.\n   -  Replaced old introduction with\
    \ complete new introduction/overview.\n   -  Added content for the Security Considerations\
    \ Section.\n   -  Updated References to current documents.\n   -  Updated text\
    \ to use current SNMP terminology.\n   -  Added coexistence for/with SNMPv3.\n\
    \   -  Added description for SNMPv1 and SNMPv2c Message Processing Models\n  \
    \    and SNMPv1 and SNMPv2c Community-based Security Models.\n   -  Added snmpCommunityMIB\
    \ so that SNMPv1 and SNMPv2 community strings\n      can be mapped into the SNMP\
    \ Version Independent parameters which\n      can then be used for access control\
    \ using the standard SNMPv3\n      View-based Access Control Model and the snmpVacmMIB.\n\
    \   -  Added two MIB objects such that when an SNMPv1 notification (trap)\n  \
    \    must be converted into an SNMPv2 notification we add those two\n      objects\
    \ in order to preserve information about the address and\n      community of the\
    \ originating SNMPv1 agent.\n   -  Included (and extended) from RFC 2089 the SNMPv2\
    \ to SNMPv1 mapping\n      within a multi-lingual SNMP Engine.\n   -  Use keywords\
    \ from RFC 2119 to describe requirements for\n      compliance.\n   -  Changed/added\
    \ some rules for converting a MIB module from SMIv1 to\n      SMIv2.\n   -  Extended\
    \ and improved the description of Proxy Forwarder behaviour\n      when multiple\
    \ SNMP versions are involved.\n"
- title: Editors' Addresses
  contents:
  - "Editors' Addresses\n   Rob Frye\n   Vibrant Solutions\n   2711 Prosperity Ave\n\
    \   Fairfax, Virginia 22031\n   U.S.A.\n   Phone: +1 703 270 2000\n   EMail: rfrye@vibrant-1.com\n\
    \   David B. Levi\n   Nortel Networks\n   3505 Kesterwood Drive\n   Knoxville,\
    \ TN 37918\n   U.S.A.\n   Phone: +1 865 686 0432\n   EMail: dlevi@nortelnetworks.com\n\
    \   Shawn A. Routhier\n   Wind River Systems, Inc.\n   500 Wind River Way\n  \
    \ Alameda, CA 94501\n   U.S.A.\n   Phone: + 1 510 749 2095\n   EMail: sar@epilogue.com\n\
    \   Bert Wijnen\n   Lucent Technologies\n   Schagen 33\n   3461 GL Linschoten\n\
    \   Netherlands\n   Phone: +31 348 407 775\n   EMail: bwijnen@lucent.com\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2003).  All\
    \ Rights Reserved.\n   This document and translations of it may be copied and\
    \ furnished to\n   others, and derivative works that comment on or otherwise explain\
    \ it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assignees.\n\
    \   This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
