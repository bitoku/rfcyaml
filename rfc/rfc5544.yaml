- title: __initial_text__
  contents:
  - ''
- title: Independent Submission                                        A. Santoni
  contents:
  - "Independent Submission                                        A. Santoni\n  \
    \           Syntax for Binding Documents with Time-Stamps\n"
- title: Abstract
  contents:
  - "Abstract\n   This document describes an envelope that can be used to bind a file\n\
    \   (not necessarily protected by means of cryptographic techniques) with\n  \
    \ one or more time-stamp tokens obtained for that file, where \"time-\n   stamp\
    \ token\" has the meaning defined in RFC 3161 or its successors.\n   Additional\
    \ types of temporal evidence are also allowed.\n   The proposed envelope is based\
    \ on the Cryptographic Message Syntax as\n   defined in RFC 5652.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document is not an Internet Standards Track specification;\
    \ it is\n   published for informational purposes.\n   This is a contribution to\
    \ the RFC Series, independently of any other\n   RFC stream.  The RFC Editor has\
    \ chosen to publish this document at\n   its discretion and makes no statement\
    \ about its value for\n   implementation or deployment.  Documents approved for\
    \ publication by\n   the RFC Editor are not a candidate for any level of Internet\n\
    \   Standard; see Section 2 of RFC 5741.\n   Information about the current status\
    \ of this document, any errata,\n   and how to provide feedback on it may be obtained\
    \ at\n   http://www.rfc-editor.org/info/rfc5544.\n"
- title: IESG Note
  contents:
  - "IESG Note\n   This RFC is not a candidate for any level of Internet Standard.\
    \  The\n   standards track specification RFC 4998, Evidence Record Syntax (ERS),\n\
    \   specifies an alternative mechanism.  Readers are encouraged to also\n   review\
    \ RFC 4998 when evaluating the suitability of this mechanism.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2010 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http:trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................2\n\
    \      1.1. Conventions Used in This Document ..........................3\n  \
    \ 2. Syntax for TimeStampedData ......................................3\n   3.\
    \ Compliance Requirements .........................................6\n   4. Recommended\
    \ Processing ..........................................6\n      4.1. Generating\
    \ a New TimeStampedData Structure .................7\n      4.2. Verifying an\
    \ Existing TimeStampedData Structure ............8\n      4.3. Extending the Validity\
    \ of an Existing\n           TimeStampedData Structure ..................................9\n\
    \   5. Security Considerations .........................................9\n  \
    \ 6. Normative References ...........................................10\n   7.\
    \ Informative References .........................................10\n   Appendix\
    \ A. ASN.1 Module ..........................................11\n   Appendix B.\
    \ Acknowledgments .......................................12\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   Time-stamping has become the standard technique for proving\
    \ the\n   existence of a document before a certain point in time.  Several\n \
    \  legislations around the world embrace the concept and provide for\n   time-stamping\
    \ services, mainly for the purpose of extending the\n   validity of signed documents.\
    \  However, while time-stamping enhances\n   digital signatures, its value does\
    \ not depend on them.  It can\n   clearly be useful to time-stamp a document even\
    \ if it is not signed.\n   And it can also be useful, or even mandatory in some\
    \ cases, to time-\n   stamp a signed document in its entirety, regardless of how\
    \ many\n   signatures it contains.\n   When a time-stamp is related to a digital\
    \ signature, there already\n   exists a way to keep the two pieces together: RFC\
    \ 3161 [TSP]\n   describes how one or more TimeStampTokens can be included in\
    \ a\n   SignerInfo structure as unsigned attributes.  On the other hand,\n   there\
    \ is no standard way to keep together a time-stamped document,\n   whether signed\
    \ or not, and the related time-stamps.\n   In such cases, two approaches are typically\
    \ being adopted:\n   o  time-stamps are kept as separate files (keeping track\
    \ of what\n      time-stamps belong to what documents is up to the user);\n  \
    \ o  an ad hoc solution is adopted for specific applications, e.g., a\n      ZIP\
    \ archive or a proprietary \"envelope\" of some kind.\n   Both solutions impede\
    \ interoperability, which is the objective of\n   this memo.\n   This document\
    \ describes a simple syntax for binding one document\n   (actually, any kind of\
    \ file) to the corresponding temporal evidence;\n   the latter is typically represented\
    \ by one or more RFC 3161\n   TimeStampTokens.  Additional types of temporal evidence,\
    \ e.g., an RFC\n   4998 EvidenceRecord [ERS], are also supported via an \"open\"\
    \ syntax.\n   However, for the sake of interoperability, the emphasis in this\n\
    \   document is on TimeStampTokens.\n   The proposed syntax is broadly based on\
    \ the Cryptographic Message\n   Syntax (CMS) defined in RFC 5652 [CMS].\n"
- title: 1.1.  Conventions Used in This Document
  contents:
  - "1.1.  Conventions Used in This Document\n   The key words \"MUST\", \"MUST NOT\"\
    , \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\"\
    , \"MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described\
    \ in RFC 2119 [KWORDS].\n   The terms \"document\" and \"file\" are used interchangeably.\
    \  The terms\n   \"TimeStampToken\" and \"time-stamp token\" are used interchangeably,\n\
    \   both referring to the data structure defined in RFC 3161.\n"
- title: 2.  Syntax for TimeStampedData
  contents:
  - "2.  Syntax for TimeStampedData\n   The proposed data structure is called TimeStampedData,\
    \ and it is\n   based on the ContentInfo envelope defined in [CMS]:\n      ContentInfo\
    \ ::= SEQUENCE {\n         contentType ContentType,\n         content [0] EXPLICIT\
    \ ANY DEFINED BY contentType }\n      ContentType ::= OBJECT IDENTIFIER\n   While\
    \ CMS defines six content types (data, signed-data, enveloped-\n   data, digested-data,\
    \ encrypted-data, and authenticated-data), this\n   memo defines an additional\
    \ content type, timestamped-data, identified\n   by the following Object Identifier\
    \ (OID):\n      id-ct-timestampedData OBJECT IDENTIFIER ::= {\n              \
    \ iso(1) member-body(2) us(840) rsadsi(113549) pkcs(1)\n               pkcs9(9)\
    \ id-smime(16) id-ct(1) 31 }\n   This particular OID signals that the content\
    \ field of the ContentInfo\n   has the following syntax:\n      TimeStampedData\
    \ ::= SEQUENCE {\n         version              INTEGER { v1(1) },\n         dataUri\
    \              IA5String OPTIONAL,\n         metaData             MetaData OPTIONAL,\n\
    \         content              OCTET STRING OPTIONAL,\n         temporalEvidence\
    \     Evidence\n      }\n      MetaData ::= SEQUENCE {\n         hashProtected\
    \        BOOLEAN,\n         fileName             UTF8String OPTIONAL,\n      \
    \   mediaType            IA5String OPTIONAL,\n         otherMetaData        Attributes\
    \ OPTIONAL\n      }\n      Attributes ::=\n         SET SIZE(1..MAX) OF Attribute\
    \ -- according to RFC 5652\n      Evidence ::= CHOICE {\n         tstEvidence\
    \    [0] TimeStampTokenEvidence,   -- see RFC 3161\n         ersEvidence    [1]\
    \ EvidenceRecord,           -- see RFC 4998\n         otherEvidence  [2] OtherEvidence\n\
    \      }\n      OtherEvidence ::= SEQUENCE {\n         oeType               OBJECT\
    \ IDENTIFIER,\n         oeValue              ANY DEFINED BY oeType }\n      TimeStampTokenEvidence\
    \ ::=\n         SEQUENCE SIZE(1..MAX) OF TimeStampAndCRL\n      TimeStampAndCRL\
    \ ::= SEQUENCE {\n         timeStamp   TimeStampToken,          -- according to\
    \ RFC 3161\n         crl         CertificateList OPTIONAL -- according to RFC\
    \ 5280\n      }\n   The version field contains the version number of the TimeStampedData\n\
    \   syntax.  It SHALL be 1 for this version of the document.\n   The dataUri field\
    \ contains a URI reference conforming to [URI].  When\n   the content field is\
    \ absent, dataUri MUST be present and contain a\n   URI allowing retrieval of\
    \ the document that was time-stamped (unless\n   the document is later moved).\
    \  When the content field is present,\n   this field MAY also be present.\n  \
    \ The metaData field contains metadata related to the document that was\n   time-stamped,\
    \ if applicable.  In particular:\n      The hashProtected field indicates whether\
    \ the metadata have been\n      included in the computation of the digest within\
    \ the first\n      TimeStampToken (see further on).  This makes it possible to\
    \ detect\n      a subsequent alteration of the metadata.\n      The fileName field\
    \ contains the original filename of the document\n      that was time-stamped.\n\
    \      The mediaType field contains a media type/subtype and possible\n      parameters\
    \ for the time-stamped document, according to [MIME].\n      This information\
    \ may help decide how to \"open\" or deal with the\n      time-stamped document.\n\
    \      The otherMetaData field contains further attributes of the time-\n    \
    \  stamped document (e.g., a description, claimed author, etc.),\n      where\
    \ each attribute is specified by an object identifier and a\n      corresponding\
    \ set of values, as described in [CMS].  When this\n      field is present, it\
    \ MUST contain at least one Attribute.\n   Within the metaData field (if present),\
    \ at least one of the fileName,\n   mediaType, and otherMetaData sub-fields MUST\
    \ be present.\n   The Attribute values within the otherMetaData field MUST be\
    \ DER\n   encoded, even if the rest of the structure is BER encoded.\n   The content\
    \ field, when present, carries the entire contents, in its\n   original format\
    \ and encoding, of the document that was time-stamped.\n   This can actually be\
    \ any kind of data, e.g., a text document, an\n   executable, a movie, a message,\
    \ etc.  The omission of the content\n   field makes it possible to bind the temporal\
    \ evidence to external\n   data.  In such a case, the temporal evidence is computed\
    \ as though\n   the content field were present.\n   The temporalEvidence field\
    \ carries the evidence that the time-stamped\n   document did exist before a certain\
    \ point in time.  Several types of\n   evidence are allowed, but compliant applications\
    \ are only required to\n   support the RFC 3161 type -- namely, the tstEvidence\
    \ choice.\n   The TimeStampTokenEvidence sequence MUST contain at least one element\n\
    \   of type TimeStampAndCRL.\n   The elements of the TimeStampTokenEvidence sequence\
    \ MUST conform to\n   the following rule:\n   o  if the metaData field is absent\
    \ or the value of its hashProtected\n      field is FALSE, then the TimeStampToken\
    \ within the first element\n      SHALL be computed over the value octets of the\
    \ content field (if\n      this field is absent, use the octets retrieved via\
    \ the dataUri\n      field);\n   o  otherwise (the metaData field is present and\
    \ the value of its\n      hashProtected field is TRUE), the TimeStampToken within\
    \ the first\n      element SHALL be computed over the concatenation of the following\n\
    \      fields:\n      - the DER encoding of the metaData field;\n      - the value\
    \ octets of the content field (if this field is absent,\n        use the octets\
    \ retrieved via the dataUri field);\n   o  the TimeStampToken within the second\
    \ element SHALL be computed\n      over the first element;\n   o  the TimeStampToken\
    \ within each subsequent element SHALL be\n      computed over its preceding element\
    \ in the sequence.\n   Within the TimeStampAndCRL construct, the optional crl\
    \ field carries\n   a suitable CRL (Certificate Revocation List) demonstrating\
    \ that the\n   certificate of the TSA (Time-Stamping Authority) that issued the\n\
    \   TimeStampToken was not revoked at the time when the subsequent\n   element\
    \ in the TimeStampTokenEvidence sequence was added.  See the\n   Security Considerations\
    \ section for further discussion on this topic.\n"
- title: 3.  Compliance Requirements
  contents:
  - "3.  Compliance Requirements\n   Compliant applications MUST support at least\
    \ the RFC 3161-based type\n   of evidence (i.e., the tstEvidence CHOICE).\n"
- title: 4.  Recommended Processing
  contents:
  - "4.  Recommended Processing\n   This section is focused on the RFC 3161-based\
    \ type of evidence.\n   Processing of the structure for other types of evidence\
    \ would be done\n   in a similar manner.\n"
- title: 4.1.  Generating a New TimeStampedData Structure
  contents:
  - "4.1.  Generating a New TimeStampedData Structure\n   In this case, applications\
    \ are supposed to behave as follows:\n   o  populate the version field with the\
    \ integer value v1(1);\n   o  if a self-contained envelope is to be generated,\
    \ always populate\n      the content field with the content of the file in its\
    \ original\n      format and encoding; depending on the application, the dataUri\n\
    \      field may also be added;\n   o  otherwise (a detached envelope is to be\
    \ generated), always\n      populate the dataUri field with the URI of the time-stamped\n\
    \      document (e.g., http://foo.example.com/Contract12345.pdf); using\n    \
    \  an absolute URI or a relative reference depends on the\n      application;\n\
    \   o  if the metaData field is being added, decide on the value of its\n    \
    \  hashProtected field; set its value to TRUE if the application\n      needs\
    \ the remaining fields of the metaData construct to be hash-\n      protected\
    \ as described in Section 2; otherwise, set it to FALSE;\n   o  if the metaData\
    \ field is being added, optionally populate the\n      fileName field (e.g., \"\
    Contract12345.pdf\"), the mediaType field\n      with a suitable media type/subtype\
    \ and possible parameters\n      according to [MIME], and the otherMetaData field,\
    \ depending on the\n      application;\n   o  select a suitable one-way hash function\
    \ and compute a hash value\n      using that function over the content, or the\
    \ concatenation of the\n      metadata and the content, as described in Section\
    \ 2; this hash\n      value will then be used for requesting the first TimeStampToken;\n\
    \   o  obtain the first temporal evidence from a TSA and add it to the\n     \
    \ temporalEvidence field;\n   o  insert the TimeStampedData into a ContentInfo\
    \ structure, with the\n      id-ct-timestampedData OID in the contentType field;\n\
    \   o  BER-encode the ContentInfo structure (except for the fields that\n    \
    \  are required to be DER encoded) and save it with a reasonable file\n      name\
    \ (e.g., derived from the name of the time-stamped file).\n"
- title: 4.2.  Verifying an Existing TimeStampedData Structure
  contents:
  - "4.2.  Verifying an Existing TimeStampedData Structure\n   In this case, applications\
    \ are supposed to behave as follows:\n   o  check that the contentType field of\
    \ the ContentInfo structure has\n      the expected value (id-ct-timestampedData)\
    \ in its contentType\n      field; then, extract the inner TimeStampedData structure\
    \ and\n      continue processing;\n   o  check the version field (it should be\
    \ v1);\n   o  check that the temporalEvidence field is not empty;\n   o  check\
    \ whether the content is present; if it is not, use the\n      dataUri field to\
    \ retrieve the file;\n   o  open the first element of the TimeStampTokenEvidence\
    \ sequence,\n      open the time-stamp token within it and use the hash function\
    \ that\n      was used to obtain it to re-compute the hash of the fields\n   \
    \   indicated in Section 2; if the re-computed hash value matches the\n      one\
    \ within the time-stamp token, continue processing; otherwise,\n      the TimeStampedData\
    \ structure has been modified;\n   o  validate the temporalEvidence by checking\
    \ that:\n      - each TimeStampToken in the chain does contain the correct digest\n\
    \        value (according to the rule described in Section 2) and it was\n   \
    \     signed by a trusted TSA,\n      - the corresponding TSA signing certificate\
    \ was not revoked at the\n        time when the subsequent TimeStampToken was\
    \ issued, based on the\n        associated CRL;\n   o  depending on the application,\
    \ use the temporal evidence for\n      whatever purpose the application was designed\
    \ for;\n   o  depending on the application, show the dataUri, the fileName, the\n\
    \      mediaType, the otherMetaData, and the temporal evidence to the\n      user;\n\
    \   o  depending on the application, save the content to a separate file;\n  \
    \ o  depending on the application, store at a different place the\n      content\
    \ that has been retrieved using the dataUri field, then\n      update the dataUri\
    \ field accordingly;\n   o  depending on the application, show the time-stamped\
    \ file to the\n      user, possibly by activating a suitable \"viewer\".\n"
- title: 4.3.  Extending the Validity of an Existing TimeStampedData Structure
  contents:
  - "4.3.  Extending the Validity of an Existing TimeStampedData Structure\n   In\
    \ this case, applications are supposed to behave as follows:\n   o  validate the\
    \ TimeStampedData structure as described above;\n   o  select the time-stamp token\
    \ from the last TimeStampAndCRL element\n      in the chain and obtain the latest\
    \ available CRL for the\n      corresponding TSA certificate (if this CRL is not\
    \ fresh enough,\n      wait until the next one is available), then store it in\
    \ the\n      TimeStampAndCRL element;\n   o  instantiate a new TimeStampAndCRL\
    \ element and obtain a new time-\n      stamp token computed over the previous\
    \ one, according to the rule\n      described in Section 2; insert the new time-stamp\
    \ token into the\n      new TimeStampAndCRL element, then append the latter to\
    \ the end of\n      the chain.\n   See the Security Considerations section for\
    \ further discussion on\n   extending the validity of an existing TimeStampedData\
    \ structure.\n"
- title: 5.  Security Considerations
  contents:
  - "5.  Security Considerations\n   When the metaData field is present and the hashProtected\
    \ sub-field is\n   set to TRUE, the metadata are also included in the computation\
    \ of the\n   digest within the first time-stamp token, so that any subsequent\n\
    \   alteration of the metadata will be easily detected.  However, the\n   integrity\
    \ of hash-protected metadata does not imply that the metadata\n   were correct\
    \ at the time when the TimeStampedData object was created.\n   That can only be\
    \ inferred by other means (e.g., from context).  For\n   instance, when TimeStampedData\
    \ objects are created by an archival\n   service provider, it may be reasonable\
    \ to assume that the metadata\n   are correct at creation time.  Instead, when\
    \ a TimeStampedData object\n   is received from an unknown party, the recipient\
    \ cannot safely assume\n   that the metadata are correct, lacking further information.\n\
    \   In general, a time-stamp token should not be considered valid after\n   the\
    \ certificate of the issuing TSA is expired (also, this\n   consideration depends\
    \ on the legislation and the policy under which\n   the TSA operates).  However,\
    \ a time-stamp token can itself be time-\n   stamped to extend the validity of\
    \ the TSA's signature.  By repeatedly\n   applying this technique, a whole chain\
    \ of time-stamp tokens can be\n   grown to extend the validity of the first one\
    \ ad libitum.  Thus, this\n   approach can be adopted to extend the validity of\
    \ a TimeStampedData\n   structure beyond the expiry date of the first TimeStampToken\
    \ within\n   it, by adding further elements to the TimeStampTokenEvidence sequence\n\
    \   according to the rule described in Section 2.  Of course, each\n   additional\
    \ TimeStampToken must be added in a timely manner (before\n   the previous one\
    \ is expired or has been revoked).\n   The validity extension technique described\
    \ above requires that the\n   TSA signing certificates can still be verified long\
    \ after they have\n   expired, typically by checking a CRL.  The CRL must be captured\
    \ at\n   the suitable time, because expired certificates are typically removed\n\
    \   from the CRL regardless of their being revoked.  The TimeStampAndCRL\n   construct\
    \ allows adding a CRL next to the related TimeStampToken, so\n   that the TSA\
    \ certificate will still be verifiable at any later time.\n   The CRL must be\
    \ captured at the time when another element is about to\n   be added to the TimeStampTokenEvidence\
    \ sequence, or even later -- to\n   allow for a last-minute revocation request\
    \ to be processed by the CA\n   (see the discussion about \"grace periods\" in\
    \ [CADES]).\n"
- title: 6.  Normative References
  contents:
  - "6.  Normative References\n   [CMS]     Housley, R., \"Cryptographic Message Syntax\
    \ (CMS)\", RFC\n             5652, September 2009.\n   [ERS]     Gondrom, T.,\
    \ Brandner, R., and U. Pordesch, \"Evidence\n             Record Syntax (ERS)\"\
    , RFC 4998, August 2007.\n   [KWORDS]  Bradner, S., \"Key words for use in RFCs\
    \ to Indicate\n             Requirement Levels\", BCP 14, RFC 2119, March 1997.\n\
    \   [MIME]    Freed, N. and N. Borenstein, \"Multipurpose Internet Mail\n    \
    \         Extensions (MIME) Part One: Format of Internet Message\n           \
    \  Bodies\", RFC 2045, November 1996.\n   [PKIX1]   Cooper, D., Santesson, S.,\
    \ Farrell, S., Boeyen, S.,\n             Housley, R., and W. Polk, \"Internet\
    \ X.509 Public Key\n             Infrastructure Certificate and Certificate Revocation\
    \ List\n             (CRL) Profile\", RFC 5280, May 2008.\n   [TSP]     Adams,\
    \ C., Cain, P., Pinkas, D., and R. Zuccherato,\n             \"Internet X.509\
    \ Public Key Infrastructure Time-Stamp\n             Protocol (TSP)\", RFC 3161,\
    \ August 2001.\n   [URI]     Berners-Lee, T., Fielding, R., and L. Masinter, \"\
    Uniform\n             Resource Identifier (URI): Generic Syntax\", STD 66, RFC\n\
    \             3986, January 2005.\n"
- title: 7.  Informative References
  contents:
  - "7.  Informative References\n   [CADES]   Pinkas, D., Pope, N., and J. Ross, \"\
    CMS Advanced Electronic\n             Signatures (CAdES)\", RFC 5126, March 2008.\n"
- title: Appendix A.  ASN.1 Module
  contents:
  - "Appendix A.  ASN.1 Module\n   The ASN.1 module contained in this appendix defines\
    \ the structures\n   that are needed to implement this specification.  It is expected\
    \ to\n   be used in conjunction with the ASN.1 modules in [CMS], [TSP],\n   [PKIX1],\
    \ and [ERS].\n   TimeStampedDataModule\n      { iso(1) member-body(2) us(840)\
    \ rsadsi(113549) pkcs(1)\n        pkcs-9(9) smime(16) modules(0) 35 }\n      DEFINITIONS\
    \ IMPLICIT TAGS ::=\n      BEGIN\n      IMPORTS\n         -- Imports from RFC\
    \ 5652 [CMS]\n         Attribute\n            FROM CryptographicMessageSyntax2004\n\
    \               { iso(1) member-body(2) us(840) rsadsi(113549)\n             \
    \    pkcs(1) pkcs-9(9) smime(16) modules(0) cms-2004(24) }\n         -- Imports\
    \ from RFC 3161 [TSP]\n         TimeStampToken\n            FROM PKIXTSP\n   \
    \            { iso(1) identified-organization(3) dod(6) internet(1)\n        \
    \         security(5) mechanisms(5) pkix(7) id-mod(0)\n                 id-mod-tsp(13)}\n\
    \         -- Imports from RFC 5280 [PKIX1]\n         CertificateList\n       \
    \     FROM PKIX1Explicit88\n               { iso(1) identified-organization(3)\
    \ dod(6) internet(1)\n                 security(5) mechanisms(5) pkix(7) id-mod(0)\n\
    \                 id-pkix1-explicit-88(18)}\n         -- Imports from RFC 4998\
    \ [ERS]\n         EvidenceRecord\n            FROM ERS\n               { iso(1)\
    \ identified-organization(3) dod(6) internet(1)\n                 security(5)\
    \ mechanisms(5) ltans(11) id-mod(0)\n                 id-mod-ers88(2) id-mod-ers88-v1(1)\
    \ };\n      -- TimeStampedData Content Type and Object Identifier\n      id-ct-timestampedData\
    \ OBJECT IDENTIFIER ::= {\n         iso(1) member-body(2) us(840) rsadsi(113549)\
    \ pkcs(1) pkcs9(9)\n         id-smime(16) id-ct(1) 31 }\n      TimeStampedData\
    \ ::= SEQUENCE {\n         version              INTEGER { v1(1) },\n         dataUri\
    \              IA5String OPTIONAL,\n         metaData             MetaData OPTIONAL,\n\
    \         content              OCTET STRING OPTIONAL,\n         temporalEvidence\
    \     Evidence\n      }\n      MetaData ::= SEQUENCE {\n         hashProtected\
    \        BOOLEAN,\n         fileName             UTF8String OPTIONAL,\n      \
    \   mediaType            IA5String OPTIONAL,\n         otherMetaData        Attributes\
    \ OPTIONAL\n      }\n      Attributes ::=\n         SET SIZE(1..MAX) OF Attribute\
    \ -- according to RFC 5652\n      Evidence ::= CHOICE {\n         tstEvidence\
    \    [0] TimeStampTokenEvidence,   -- see RFC 3161\n         ersEvidence    [1]\
    \ EvidenceRecord,           -- see RFC 4998\n         otherEvidence  [2] OtherEvidence\n\
    \      }\n      OtherEvidence ::= SEQUENCE {\n         oeType            OBJECT\
    \ IDENTIFIER,\n         oeValue           ANY DEFINED BY oeType }\n      TimeStampTokenEvidence\
    \ ::=\n         SEQUENCE SIZE(1..MAX) OF TimeStampAndCRL\n      TimeStampAndCRL\
    \ ::= SEQUENCE {\n         timeStamp   TimeStampToken,          -- according to\
    \ RFC 3161\n         crl         CertificateList OPTIONAL -- according to RFC\
    \ 5280\n      }\n      END\n"
- title: Appendix B.  Acknowledgments
  contents:
  - "Appendix B.  Acknowledgments\n   Thanks to Stephen Kent for encouraging the author\
    \ in the early stages\n   of this work.\n   Thanks to Russ Housley for reviewing\
    \ this memo, suggesting useful\n   amendments and assigning a value to the OIDs\
    \ herein defined.\n   Thanks are also due to other people who reviewed this memo\
    \ and helped\n   improving it, but prefer not to be mentioned.\n"
- title: Author's Address
  contents:
  - "Author's Address\n   Adriano Santoni\n   Actalis S.p.A.\n   Via Taramelli 26\n\
    \   I-20124 Milano\n   Italy\n   EMail: adriano.santoni@actalis.it\n"
