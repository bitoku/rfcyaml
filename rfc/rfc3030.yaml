- contents:
  - ''
  - "Obsolete: 1830                                             December 2000\n                        SMTP
    Service Extensions\n                       for Transmission of Large\n                        and
    Binary MIME Messages\n"
  title: __initial_text__
- contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol
    for the\n   Internet community, and requests discussion and suggestions for\n
    \  improvements.  Please refer to the current edition of the \"Internet\n   Official
    Protocol Standards\" (STD 1) for the standardization state\n   and status of this
    protocol.  Distribution of this memo is unlimited.\n"
  title: Status of this Memo
- contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2000).  All Rights Reserved.\n"
  title: Copyright Notice
- contents:
  - "Abstract\n   This memo defines two extensions to the SMTP (Simple Mail Transfer\n
    \  Protocol) service.  The first extension enables a SMTP client and\n   server
    to negotiate the use of an alternative to the DATA command,\n   called \"BDAT\",
    for efficiently sending large MIME (Multipurpose\n   Internet Mail Extensions)
    messages.  The second extension takes\n   advantage of the BDAT command to permit
    the negotiated sending of\n   MIME messages that employ the binary transfer encoding.
    \ This\n   document is intended to update and obsolete RFC 1830.\n"
  title: Abstract
- contents:
  - "Working Group Summary\n   This protocol is not the product of an IETF working
    group, however\n   the specification resulted from discussions within the ESMTP
    working\n   group.  The resulting protocol documented in RFC 1830 was classified\n
    \  as experimental at that time due to questions about the robustness of\n   the
    Binary Content-Transfer-Encoding deployed in then existent MIME\n   implementations.
    \ As MIME has matured and other uses of the Binary\n   Content-Transfer-Encoding
    have been deployed, these concerns have\n   been allayed.  With this document,
    Binary ESMTP is expected to become\n   standards-track.\n"
  title: Working Group Summary
- contents:
  - "Document Conventions\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\",
    \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\",
    and \"OPTIONAL\" in this\n   document are to be interpreted as described in RFC
    2119 [RFC2119].\n"
  title: Document Conventions
- contents:
  - "Table of Contents\n   1.   Overview ...................................................
    \ 2\n   2.   Framework for the Large Message Extensions .................  3\n
    \  3.   Framework for the Binary Service Extension .................  5\n   4.
    \  Examples ...................................................  8\n     4.1  Simple
    Chunking ..........................................  8\n     4.2  Pipelining BINARYMIME
    ....................................  8\n   5.   Security Considerations ....................................
    \ 9\n   6.   References .................................................  9\n
    \  7.   Author's Address ........................................... 10\n   8.
    \  Appendix A - Changes from RFC 1830 ......................... 11\n   9.   Full
    Copyright Statement ................................... 12\n"
  title: Table of Contents
- contents:
  - "1. Overview\n   The MIME extensions to the Internet message format provides for
    the\n   transmission of many kinds of data that were previously unsupported\n
    \  in Internet mail.  Anticipating the need to transport the new media\n   more
    efficiently, the SMTP protocol has been extended to provide\n   transport for
    new message types.  RFC 1652 defines one such extension\n   for the transmission
    of unencoded 8-bit MIME messages [8BIT].  This\n   service extension permits the
    receiver SMTP to declare support for\n   8-bit body parts and the sender to request
    8-bit transmission of a\n   particular message.\n   One expected result of the
    use of MIME is that the Internet mail\n   system will be expected to carry very
    large mail messages.  In such\n   transactions, there is a performance-based desire
    to eliminate the\n   requirement that the message be scanned for \"CR LF . CR
    LF\" sequences\n   upon sending and receiving to detect the end of message.\n
    \  Independent of the need to send large messages, Internet mail is\n   increasingly
    multimedia.  There is a need to avoid the overhead of\n   base64 and quoted-printable
    encoding of binary objects sent using the\n   MIME message format over SMTP between
    hosts that support binary\n   message processing.\n   This memo uses the mechanism
    defined in [ESMTP] to define two\n   extensions to the SMTP service whereby an
    SMTP server (\"receiver-\n   SMTP\") may declare support for the message chunking
    transmission mode\n   and support for the reception of Binary messages, which
    the SMTP\n   client (\"sender-SMTP\") is then free to use.\n"
  title: 1. Overview
- contents:
  - "2. Framework for the Large Message Extensions\n   The following service extension
    is hereby defined:\n   1) The name of the data chunking service extension is \"CHUNKING\".\n
    \  2) The EHLO keyword value associated with this extension is\n      \"CHUNKING\".\n
    \  3) A new SMTP verb, BDAT, is defined as an alternative to the \"DATA\"\n      command
    of [RFC821].  The BDAT verb takes two arguments.  The\n      first argument indicates
    the length, in octets, of the binary data\n      chunk.  The second optional argument
    indicates that the data chunk\n      is the last.\n      bdat-cmd   ::= \"BDAT\"
    SP chunk-size [ SP end-marker ] CR LF\n      chunk-size ::= 1*DIGIT\n      end-marker
    ::= \"LAST\"\n   4) This extension may be used for SMTP message submission.  [Submit]\n
    \  5) Servers that offer the BDAT extension MUST continue to support the\n      regular
    SMTP DATA command.  Clients are free to use DATA to\n      transfer appropriately
    encoded to servers that support the\n      CHUNKING extension if they wish to
    do so.\n   The CHUNKING service extension enables the use of the BDAT\n   alternative
    to the DATA command.  This extension can be used for any\n   message, whether
    7-bit, 8BITMIME or BINARYMIME.\n   When a sender-SMTP wishes to send (using the
    MAIL command) a large\n   message using the CHUNKING extension, it first issues
    the EHLO\n   command to the receiver-SMTP.  If the receiver-SMTP responds with\n
    \  code 250 to the EHLO command and the response includes the EHLO\n   keyword
    value CHUNKING, then the receiver-SMTP is indicating that it\n   supports the
    BDAT command and will accept the sending of messages in\n   chunks.\n   After
    all MAIL and RCPT responses are collected and processed, the\n   message is sent
    using a series of BDAT commands.  The BDAT command\n   takes one required argument,
    the exact length of the data segment in\n   octets.  The message data is sent
    immediately after the trailing <CR>\n   <LF> of the BDAT command line.  Once the
    receiver-SMTP receives the\n   specified number of octets, it will return a 250
    reply code.\n   The optional LAST parameter on the BDAT command indicates that
    this\n   is the last chunk of message data to be sent.  The last BDAT command\n
    \  MAY have a byte-count of zero indicating there is no additional data\n   to
    be sent.  Any BDAT command sent after the BDAT LAST is illegal and\n   MUST be
    replied to with a 503 \"Bad sequence of commands\" reply code.\n   The state resulting
    from this error is indeterminate.  A RSET command\n   MUST be sent to clear the
    transaction before continuing.\n   A 250 response MUST be sent to each successful
    BDAT data block within\n   a mail transaction.  If a failure occurs after a BDAT
    command is\n   received, the receiver-SMTP MUST accept and discard the associated\n
    \  message data before sending the appropriate 5XX or 4XX code.  If a\n   5XX
    or 4XX code is received by the sender-SMTP in response to a BDAT\n   chunk, the
    transaction should be considered failed and the sender-\n   SMTP MUST NOT send
    any additional BDAT segments.  If the receiver-\n   SMTP has declared support
    for command pipelining [PIPE], the receiver\n   SMTP MUST be prepared to accept
    and discard additional BDAT chunks\n   already in the pipeline after the failed
    BDAT.\n      Note: An error on the receiver-SMTP such as disk full or imminent\n
    \     shutdown can only be reported after the BDAT segment has been\n      received.
    \ It is therefore important to choose a reasonable chunk\n      size given the
    expected end-to-end bandwidth.\n      Note:  Because the receiver-SMTP does not
    acknowledge the BDAT\n      command before the message data is sent, it is important
    to send\n      the BDAT only to systems that have declared their capability to\n
    \     accept BDAT commands.  Illegally sending a BDAT command and\n      associated
    message data to a non-CHUNKING capable system will\n      result in the receiver-SMTP
    parsing the associated message data as\n      if it were a potentially very long,
    ESMTP command line containing\n      binary data.\n   The resulting state from
    a failed BDAT command is indeterminate.  A\n   RSET command MUST be issued to
    clear the transaction before\n   additional commands may be sent.  The RSET command,
    when issued after\n   the first BDAT and before the BDAT LAST, clears all segments
    sent\n   during that transaction and resets the session.\n   DATA and BDAT commands
    cannot be used in the same transaction.  If a\n   DATA statement is issued after
    a BDAT for the current transaction, a\n   503 \"Bad sequence of commands\" MUST
    be issued.  The state resulting\n   from this error is indeterminate.  A RSET
    command MUST be sent to\n   clear the transaction before continuing.  There is
    no prohibition on\n   using DATA and BDAT in the same session, so long as they
    are not\n   mixed in the same transaction.\n   The local storage size of a message
    may not accurately reflect the\n   actual size of the message sent due to local
    storage conventions.  In\n   particular, text messages sent with the BDAT command
    MUST be sent in\n   the canonical MIME format with lines delimited with a <CR><LF>.
    \ It\n   may not be possible to convert the entire message to the canonical\n
    \  format at once.  CHUNKING provides a mechanism to convert the message\n   to
    canonical form, accurately count the bytes, and send the message a\n   single
    chunk at a time.\n      Note: Correct byte counting is essential.  If the sender-SMTP\n
    \     indicates a chunk-size larger than the actual chunk-size, the\n      receiver-SMTP
    will continue to wait for the remainder of the data\n      or when using streaming,
    will read the subsequent command as\n      additional message data.  In the case
    where a portion of the\n      previous command was read as data, the parser will
    return a syntax\n      error when the incomplete command is read.\n      If the
    sender-SMTP indicates a chunk-size smaller than the actual\n      chunk-size,
    the receiver-SMTP will interpret the remainder of the\n      message data as invalid
    commands.  Note that the remainder of the\n      message data may be binary and
    as such lexicographical parsers\n      MUST be prepared to receive, process, and
    reject lines of\n      arbitrary octets.\n"
  title: 2. Framework for the Large Message Extensions
- contents:
  - "3. Framework for the Binary Service Extension\n   The following service extension
    is hereby defined:\n   1) The name of the binary service extension is \"BINARYMIME\".\n
    \  2) The EHLO keyword value associated with this extension is\n      \"BINARYMIME\".\n
    \  3) The BINARYMIME service extension can only be used with the\n      \"CHUNKING\"
    service extension.\n   4) No parameter is used with the BINARYMIME keyword.\n
    \  5) [8BIT] defines the BODY parameter for the MAIL command.  This\n      extension
    defines an additional value for the BODY parameter,\n      \"BINARYMIME\".  The
    value \"BINARYMIME\" associated with this\n      parameter indicates that this
    message is a Binary MIME message (in\n      strict compliance with [MIME]) with
    arbitrary octet content being\n      sent.  The revised syntax of the value is
    as follows, using the\n      ABNF notation of [RFC822]:\n               body-value
    ::= \"7BIT\" / \"8BITMIME\" / \"BINARYMIME\"\n   6) No new verbs are defined for
    the BINARYMIME extension.\n   7) This extension may be used for SMTP message submission.
    \ [Submit]\n   8) The maximum length of a MAIL FROM command line is increased
    by 16\n      characters by the possible addition of the BODY=BINARYMIME keyword\n
    \     and value;.\n   A sender-SMTP may request that a binary MIME message be
    sent without\n   transport encoding by sending a BODY parameter with a value of\n
    \  \"BINARYMIME\" with the MAIL command.  When the receiver-SMTP accepts a\n   MAIL
    command with the BINARYMIME body-value, it agrees to preserve\n   all bits in
    each octet passed using the BDAT command.  Once a\n   receiver-SMTP supporting
    the BINARYMIME service extension accepts a\n   message containing binary material,
    the receiver-SMTP MUST deliver or\n   relay the message in such a way as to preserve
    all bits in each\n   octet.\n   BINARYMIME cannot be used with the DATA command.
    \ If a DATA command\n   is issued after a MAIL command containing the body-value
    of\n   \"BINARYMIME\", a 503 \"Bad sequence of commands\" response MUST be sent.\n
    \  The resulting state from this error condition is indeterminate and\n   the
    transaction MUST be reset with the RSET command.\n   It is especially important
    when using BINARYMIME to ensure that the\n   MIME message itself is properly formed.
    \ In particular, it is\n   essential that text be canonically encoded with each
    line properly\n   terminated with <CR><LF>.  Any transformation of text into non-\n
    \  canonical MIME to observe local storage conventions MUST be reversed\n   before
    sending as BINARYMIME.  Some line-oriented shortcuts will\n   break if used with
    BINARYMIME.  A sender-SMTP MUST use the canonical\n   encoding for a given MIME
    content-type.  In particular, text/* MUST\n   be sent with <CR><LF> terminated
    lines.\n   Note: Although CR and LF do not necessarily represent ends of text\n
    \  lines in BDAT chunks and use of the binary transfer encoding is\n   allowed,
    the RFC 2781 prohibition against using a UTF-16 charset\n   within the text top-level
    media type remains.\n   The syntax of the extended MAIL command is identical to
    the MAIL\n   command in [RFC821], except that a BODY=BINARYMIME parameter and\n
    \  value MUST be added.  The complete syntax of this extended command is\n   defined
    in [ESMTP].\n   If a receiver-SMTP does not indicate support the BINARYMIME message\n
    \  format then the sender-SMTP MUST NOT, under any circumstances, send\n   binary
    data.\n   If the receiver-SMTP does not support BINARYMIME and the message to\n
    \  be sent is a MIME object with a binary encoding, a sender-SMTP has\n   three
    options with which to forward the message.  First, if the\n   receiver-SMTP supports
    the 8bit-MIMEtransport extension [8bit] and\n   the content is amenable to being
    encoded in 8bit, the sender-SMTP may\n   implement a gateway transformation to
    convert the message into valid\n   8bit-encoded MIME.  Second, it may implement
    a gateway transformation\n   to convert the message into valid 7bit-encoded MIME.
    \ Third, it may\n   treat this as a permanent error and handle it in the usual
    manner for\n   delivery failures.  The specifics of MIME content-transfer-encodings,\n
    \  including transformations from Binary MIME to 8bit or 7bit MIME are\n   not
    described by this RFC; the conversion is nevertheless constrained\n   in the following
    ways:\n      1. The conversion MUST cause no loss of information;  MIME\n         transport
    encodings MUST be employed as needed to insure this\n         is the case.\n      2.
    The resulting message MUST be valid 7bit or 8bit MIME.  In\n         particular,
    the transformation MUST NOT result in nested Base-\n         64 or Quoted-Printable
    content-transfer-encodings.\n   Note that at the time of this writing there are
    no mechanisms for\n   converting a binary MIME object into an 8-bit MIME object.
    \ Such a\n   transformation will require the specification of a new MIME content-\n
    \  transfer-encoding.\n   If the MIME message contains a \"Binary\" content-transfer-encoding
    and\n   the BODY parameter does not indicate BINARYMIME, the message MUST be\n
    \  accepted.  The message SHOULD be returned to the sender with an\n   appropriate
    DSN.  The message contents MAY be returned to the sender\n   if the offending
    content can be mangled into a legal DSN structure.\n   \"Fixing\" and forwarding
    the offending content is beyond the scope of\n   this document.\n"
  title: 3. Framework for the Binary Service Extension
- contents:
  - '4. Examples

    '
  title: 4. Examples
- contents:
  - "4.1 Simple Chunking\n   The following simple dialogue illustrates the use of
    the large\n   message extension to send a short pseudo-RFC 822 message to one\n
    \  recipient using the CHUNKING extension:\n   R: <wait for connection on TCP
    port 25>\n   S: <open connection to server>\n   R: 220 cnri.reston.va.us SMTP
    service ready\n   S: EHLO ymir.claremont.edu\n   R: 250-cnri.reston.va.us says
    hello\n   R: 250 CHUNKING\n   S: MAIL FROM:<Sam@Random.com>\n   R: 250 <Sam@Random.com>
    Sender ok\n   S: RCPT TO:<Susan@Random.com>\n   R: 250 <Susan@random.com> Recipient
    ok\n   S: BDAT 86 LAST\n   S: To: Susan@random.com<CR><LF>\n   S: From: Sam@random.com<CR><LF>\n
    \  S: Subject: This is a bodyless test message<CR><LF>\n   R: 250 Message OK,
    86 octets received\n   S: QUIT\n   R: 221 Goodbye\n"
  title: 4.1 Simple Chunking
- contents:
  - "4.2 Pipelining BINARYMIME\n   The following dialogue illustrates the use of the
    large message\n   extension to send a BINARYMIME object to two recipients using
    the\n   CHUNKING and PIPELINING extensions:\n   R: <wait for connection on TCP
    port\n   S: <open connection to server>\n   R: 220 cnri.reston.va.us SMTP service
    ready\n   S: EHLO ymir.claremont.edu\n   R: 250-cnri.reston.va.us says hello\n
    \  R: 250-PIPELINING\n   R: 250-BINARYMIME\n   R: 250 CHUNKING\n   S: MAIL FROM:<ned@ymir.claremont.edu>
    BODY=BINARYMIME\n   S: RCPT TO:<gvaudre@cnri.reston.va.us>\n   S: RCPT TO:<jstewart@cnri.reston.va.us>\n
    \  R: 250 <ned@ymir.claremont.edu>... Sender and BINARYMIME ok\n   R: 250 <gvaudre@cnri.reston.va.us>...
    Recipient ok\n   R: 250 <jstewart@cnri.reston.va.us>... Recipient ok\n   S: BDAT
    100000\n   S: (First 10000 octets of canonical MIME message data)\n   S: BDAT
    324\n   S: (Remaining 324 octets of canonical MIME message data)\n   S: BDAT 0
    LAST\n   R: 250 100000 octets received\n   R: 250 324 octets received\n   R: 250
    Message OK, 100324 octets received\n   S: QUIT\n   R: 221 Goodbye\n"
  title: 4.2 Pipelining BINARYMIME
- contents:
  - "5. Security Considerations\n   This extension is not known to present any additional
    security issues\n   not already endemic to electronic mail and present in fully\n
    \  conforming implementations of [RFC821], or otherwise made possible by\n   [MIME].\n"
  title: 5. Security Considerations
- contents:
  - "6. References\n   [BINARY]  Vaudreuil, G., \"SMTP Service Extensions for Transmission
    of\n             Large and Binary MIME Messages\", RFC 1830, August 1995.\n   [RFC821]
    \ Postel, J., \"Simple Mail Transfer Protocol\", STD 10, RFC\n             821,
    August 1982.\n   [RFC822]  Crocker, D., \"Standard for the Format of ARPA Internet
    Text\n             Messages\", STD 11, RFC 822, August 1982.\n   [MIME]    Borenstein,
    N. and N. Freed, \"Multipurpose Internet Mail\n             Extensions (MIME)
    Part One: Format of Internet Message\n             Bodies\", RFC 2045, November
    1996.\n   [SUBMIT]  Gellens, R. and J. Klensin, \"Message Submission\", RFC 2476,\n
    \            December 1998.\n   [ESMTP]   Klensin, J., Freed, N., Rose, M., Stefferud,
    E. and D.\n             Crocker, \"SMTP Service Extensions\", RFC 1869, November\n
    \            1995.\n   [8BIT]    Klensin, J., Freed, N., Rose, M., Stefferud,
    E. and D.\n             Crocker, \"SMTP Service Extension for 8bit-MIMEtransport\",\n
    \            RFC 1652, July 1994.\n   [PIPE]    Freed, N., \"SMTP Service Extensions
    for Command\n             Pipelining\", RFC 2920, September 2000.\n   [RFC2119]
    Bradner, S., \"Key words for use in RFCs to Indicate\n             Requirement
    Levels\", BCP 14, RFC 2119, March 1997.\n"
  title: 6. References
- contents:
  - "7. Author's Address\n   Gregory M. Vaudreuil\n   Lucent Technologies\n   17080
    Dallas Parkway\n   Dallas, TX 75248-1905\n   Phone/Fax: +1-972-733-2722\n   EMail:
    GregV@ieee.org\n"
  title: 7. Author's Address
- contents:
  - "Appendix A - Changes from RFC 1830\n   Numerous editorial changes including required
    intellectual property\n   boilerplate and revised authors contact information\n
    \  Corrected the simple chunking example to use the correct number of\n   bytes.
    \ Updated the pipelining example to illustrate use of the BDAT\n   0 LAST construct.\n"
  title: Appendix A - Changes from RFC 1830
- contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2000).  All
    Rights Reserved.\n   This document and translations of it may be copied and furnished
    to\n   others, and derivative works that comment on or otherwise explain it\n
    \  or assist in its implementation may be prepared, copied, published\n   and
    distributed, in whole or in part, without restriction of any\n   kind, provided
    that the above copyright notice and this paragraph are\n   included on all such
    copies and derivative works.  However, this\n   document itself may not be modified
    in any way, such as by removing\n   the copyright notice or references to the
    Internet Society or other\n   Internet organizations, except as needed for the
    purpose of\n   developing Internet standards in which case the procedures for\n
    \  copyrights defined in the Internet Standards process must be\n   followed,
    or as required to translate it into languages other than\n   English.\n   The
    limited permissions granted above are perpetual and will not be\n   revoked by
    the Internet Society or its successors or assigns.\n   This document and the information
    contained herein is provided on an\n   \"AS IS\" basis and THE INTERNET SOCIETY
    AND THE INTERNET ENGINEERING\n   TASK FORCE DISCLAIMS ALL WARRANTIES, EXPRESS
    OR IMPLIED, INCLUDING\n   BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF THE
    INFORMATION\n   HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED WARRANTIES
    OF\n   MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.\n"
  title: Full Copyright Statement
- contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided
    by the\n   Internet Society.\n"
  title: Acknowledgement
