Public Key Cryptography for Initial Authentication in Kerberos (PKINIT)
This document describes how to further extend the Public Key Cryptography for Initial Authentication in Kerberos (PKINIT) extension (defined in RFC 4556) to exchange an opaque data blob that a Key Distribution Center (KDC) can validate to ensure that the client is currently in possession of the private key during a PKINIT Authentication Service (AS) exchange.
The Kerberos PKINIT extension [RFC4556] defines two schemes for using asymmetric cryptography in a Kerberos pre authenticator.
One uses Diffie Hellman key exchange and the other depends on public key encryption.
The public key encryption scheme is less commonly used for two reasons:  Elliptic Curve Cryptography (ECC) Support for PKINIT
[RFC5349] only specified Elliptic Curve Diffie Hellman (ECDH) key agreement, so it cannot be used for public key encryption.
Public key encryption requires certificates with an encryption key, which is not deployed on many existing smart cards.
In the Diffie Hellman exchange, the client uses its private key only to sign the AuthPack structure (specified in Section 3.2.1 of [RFC4556]), which is performed before any traffic is sent to the KDC.
Thus, a client can generate requests with future times in the PKAuthenticator, and then send those requests at those future times.
Unless the time is outside the validity period of the client's certificate, the KDC will validate the PKAuthenticator and return a Ticket Granting Ticket (TGT) the client can use without possessing the private key.
As a result, a client performing PKINIT with the Diffie Hellman key exchange does not prove current possession of the private key being used for authentication.
It proves only prior use of that key.
Ensuring that the client has current possession of the private key requires that the signed PKAuthenticator data include information that the client could not have predicted.
Using KRB AS REQ without Pre authentication
Today, password based AS exchanges [RFC4120] often begin with the client sending a KRB AS REQ without pre authentication.
When the principal requires pre authentication, the KDC responds with a KRB ERROR containing information needed to complete an AS exchange, such as the supported encryption types and salt values.
This message flow is illustrated below:
We can use a similar message flow with PKINIT, allowing the KDC to provide a token for the client to include in its KRB AS REQ to ensure that the PA PK AS REQ [RFC4556] was not pre generated.
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in [RFC2119].
The following summarizes the message flow with extensions to [RFC4120] and [RFC4556] required to support a KDC provided freshness token during the initial request for a ticket
The client generates a KRB AS REQ, as specified in Section 2.9.3 of [RFC4120], that contains no PA PK AS REQ and includes a freshness token request.
The KDC generates a KRB ERROR, as specified in Section 3.1.4 of [RFC4120], providing a freshness token.
The client receives the error, as specified in Section 3.1.5 of [RFC4120], extracts the freshness token, and includes it as part of the KRB AS REQ as specified in [RFC4120] and [RFC4556].
The KDC receives and validates the KRB AS REQ, as specified in Section 3.2.2 of [RFC4556], then additionally validates the freshness token.
The KDC and client continue, as specified in [RFC4120] and [RFC4556].
Generation of KRB AS REQ Message
The client indicates support of freshness tokens by adding a padata element with padata type PA AS FRESHNESS and padata value of an empty octet string.
Generation of KRB ERROR Message
The KDC will respond with a KRB ERROR [RFC4120] message with the error code KDC ERR PREAUTH REQUIRED [
RFC4120] adding a padata element with padata type PA AS FRESHNESS and padata value of the freshness token to the METHOD DATA object.
Generation of KRB AS REQ Message
After the client receives the KRB ERROR message containing a freshness token, it extracts the PA AS FRESHNESS padata value field of the PA DATA structure as an opaque data blob.
The PA AS FRESHNESS padata value field of the PA DATA structure SHALL then be added as an opaque blob in the freshnessToken field when the client generates the PKAuthenticator specified in Section 4 for the PA PK AS REQ message.
This ensures that the freshness token value will be included in the signed data portion of the KRB AS REQ value.
Receipt of KRB AS REQ Message
If the realm requires freshness and the PA PK AS REQ message does not contain the freshness token, the KDC MUST return a KRB ERROR [RFC4120] message with the error code KDC ERR PREAUTH FAILED [RFC4120] with a padata element with padata type PA AS FRESHNESS and padata value of the freshness token to the METHOD DATA object.
When the PA PK AS REQ message contains a freshness token, after validating the PA PK AS REQ message normally, the KDC will validate the freshnessToken value in the PKAuthenticator in an implementation  specific way.
If the freshness token is not valid, the KDC MUST return a KRB ERROR [RFC4120] message with the error code KDC ERR PREAUTH EXPIRED [RFC6113].
The e data field of the error contains a METHOD DATA object [RFC4120], which specifies a valid PA AS FRESHNESS padata value.
Since the freshness tokens are validated by KDCs in the same realm, standardizing the contents of the freshness token is not a concern for interoperability.
Receipt of Second KRB ERROR Message
If a client receives a KDC ERR PREAUTH EXPIRED KRB ERROR message that includes a freshness token, it SHOULD retry using the new freshness token.
The PKAuthenticator structure specified in Section 3.2.1 of [RFC4556] is extended to include a new freshnessToken as follows:
[3] OCTET STRING OPTIONAL,   MUST be present.
Contains the SHA1 checksum, performed over   KDC REQ BODY.
[4] OCTET STRING OPTIONAL,   PA AS FRESHNESS padata value as received from the   KDC.
MUST be present if sent by KDC ...
The freshness token SHOULD include signing, encrypting, or sealing data from the KDC to determine authenticity and prevent tampering.
Freshness tokens serve to guarantee that the client had the key when constructing the AS REQ.
They are not required to be single use tokens or bound to specific AS exchanges.
Part of the reason the token is opaque is to allow KDC implementers the freedom to add additional functionality as long as the tokens expire so that the "freshness" guarantee remains.
Interoperability Considerations Since the client treats the KDC provided data blob as opaque, changing the contents will not impact existing clients.
Thus, extensions to the freshness token do not impact client interoperability.
Clients SHOULD NOT reuse freshness tokens across multiple exchanges.
There is no guarantee that a KDC will allow a once valid token to be used again.
Thus, clients that do not retry with a new freshness token may not be compatible with KDCs, depending on how they choose to implement freshness validation.
Since upgrading clients takes time, implementers may consider allowing both freshness token based exchanges and "legacy" exchanges without use of freshness tokens.
However, until freshness tokens are required by the realm, the existing risks of pre generated PKAuthenticators will remain.
