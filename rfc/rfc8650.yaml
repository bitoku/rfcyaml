- contents:
  - '    Dynamic Subscription to YANG Events and Datastores over RESTCONF

    '
  title: __initial_text__
- contents:
  - "Abstract\n   This document provides a RESTCONF binding to the dynamic subscription\n
    \  capability of both subscribed notifications and YANG-Push.\n"
  title: Abstract
- contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This
    document is a product of the Internet Engineering Task Force\n   (IETF).  It represents
    the consensus of the IETF community.  It has\n   received public review and has
    been approved for publication by the\n   Internet Engineering Steering Group (IESG).
    \ Further information on\n   Internet Standards is available in Section 2 of RFC
    7841.\n   Information about the current status of this document, any errata,\n
    \  and how to provide feedback on it may be obtained at\n   https://www.rfc-editor.org/info/rfc8650.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2019 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n
    \  (https://trustee.ietf.org/license-info) in effect on the date of\n   publication
    of this document.  Please review these documents\n   carefully, as they describe
    your rights and restrictions with respect\n   to this document.  Code Components
    extracted from this document must\n   include Simplified BSD License text as described
    in Section 4.e of\n   the Trust Legal Provisions and are provided without warranty
    as\n   described in the Simplified BSD License.\n"
  title: Copyright Notice
- contents:
  - "Table of Contents\n   1.  Introduction\n   2.  Terminology\n   3.  Dynamic Subscriptions\n
    \    3.1.  Transport Connectivity\n     3.2.  Discovery\n     3.3.  RESTCONF RPCs
    and HTTP Status Codes\n     3.4.  Call Flow for Server-Sent Events\n   4.  QoS
    Treatment\n   5.  Notification Messages\n   6.  YANG Tree\n   7.  YANG Module\n
    \  8.  IANA Considerations\n   9.  Security Considerations\n   10. References\n
    \    10.1.  Normative References\n     10.2.  Informative References\n   Appendix
    A.  Examples\n     A.1.  Dynamic Subscriptions\n       A.1.1.  Establishing Dynamic
    Subscriptions\n       A.1.2.  Modifying Dynamic Subscriptions\n       A.1.3.  Deleting
    Dynamic Subscriptions\n     A.2.  Subscription State Notifications\n       A.2.1.
    \ \"subscription-modified\"\n       A.2.2.  \"subscription-completed\", \"subscription-resumed\",
    and\n               \"replay-completed\"\n       A.2.3.  \"subscription-terminated\"
    and \"subscription-suspended\"\n     A.3.  Filter Example\n   Acknowledgments\n
    \  Authors' Addresses\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   Mechanisms to support event subscription and YANG-Push are
    defined in\n   [RFC8639].  Enhancements to [RFC8639] that enable YANG datastore\n
    \  subscription and YANG-Push are defined in [RFC8641].  This document\n   provides
    a transport specification for dynamic subscriptions over\n   RESTCONF [RFC8040].
    \ Requirements for these mechanisms are captured\n   in [RFC7923].\n   The streaming
    of notifications that encapsulate the resulting\n   information push is done via
    the mechanism described in Section 6.3\n   of [RFC8040].\n"
  title: 1.  Introduction
- contents:
  - "2.  Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\",
    \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"NOT RECOMMENDED\",
    \"MAY\", and\n   \"OPTIONAL\" in this document are to be interpreted as described
    in\n   BCP 14 [RFC2119] [RFC8174] when, and only when, they appear in all\n   capitals,
    as shown here.\n   The following terms use the definitions from [RFC8639]: dynamic\n
    \  subscription, event stream, notification message, publisher,\n   receiver,
    subscriber, and subscription.\n   Other terms reused include datastore, which
    is defined in [RFC8342],\n   and HTTP/2 stream, which maps to the definition of
    \"stream\" within\n   [RFC7540], Section 2.\n"
  title: 2.  Terminology
- contents:
  - "3.  Dynamic Subscriptions\n   This section provides specifics on how to establish
    and maintain\n   dynamic subscriptions over RESTCONF [RFC8040].  Subscribing to
    event\n   streams is accomplished in this way via RPCs defined within\n   [RFC8639],
    Section 2.4.  The RPCs are done via RESTCONF POSTs.  YANG\n   datastore subscription
    is accomplished via augmentations to [RFC8639]\n   as described within [RFC8641],
    Section 4.4.\n   As described in Section 6.3 of [RFC8040], a GET needs to be performed\n
    \  on a specific URI on the publisher.  Subscribers cannot predetermine\n   the
    URI against which a subscription might exist on a publisher, as\n   the URI will
    only exist after the \"establish-subscription\" RPC has\n   been accepted.  Therefore,
    the POST for the \"establish-subscription\"\n   RPC replaces the GET request for
    the \"location\" leaf that is used in\n   [RFC8040] to obtain the URI.  The subscription
    URI will be determined\n   and sent as part of the response to the \"establish-subscription\"
    RPC,\n   and a subsequent GET to this URI will be done in order to start the\n
    \  flow of notification messages back to the subscriber.  As specified\n   in
    Section 2.4.1 of [RFC8639], a subscription does not move to the\n   active state
    until the GET is received.\n"
  - contents:
    - "3.1.  Transport Connectivity\n   For a dynamic subscription, when a RESTCONF
      session doesn't already\n   exist, a new RESTCONF session is initiated from
      the subscriber.\n   As stated in Section 2.1 of [RFC8040], a subscriber MUST
      establish\n   the HTTP session over TLS [RFC8446] in order to secure the content
      in\n   transit.\n   Without the involvement of additional protocols, HTTP sessions
      by\n   themselves do not support quick recognition of the loss of the\n   communication
      path to the publisher.  Where quick recognition of the\n   loss of a publisher
      is required, a subscriber SHOULD use a TLS\n   heartbeat [RFC6520], just from
      subscriber to publisher, to track HTTP\n   session continuity.\n   Loss of the
      heartbeat MUST result in the teardown of any\n   subscription-related TCP sessions
      between those endpoints.  A\n   subscriber can then attempt to re-establish
      the dynamic subscription\n   by using the procedure described in Section 3.4.\n"
    title: 3.1.  Transport Connectivity
  - contents:
    - "3.2.  Discovery\n   Subscribers can learn which event streams a RESTCONF server
      supports\n   by querying the \"streams\" container of ietf-subscribed-\n   notifications.yang
      in [RFC8639].  Support for the \"streams\" container\n   of ietf-restconf-monitoring.yang
      in [RFC8040] is not required.  In\n   the case when the RESTCONF binding specified
      by this document is used\n   to convey the \"streams\" container from ietf-restconf-monitoring.yang\n
      \  (i.e., that feature is supported), any event streams contained\n   therein
      are also expected to be present in the \"streams\" container of\n   ietf-restconf-monitoring.yang.\n
      \  Subscribers can learn which datastores a RESTCONF server supports by\n   following
      Section 2 of [RFC8527].\n"
    title: 3.2.  Discovery
  - contents:
    - "3.3.  RESTCONF RPCs and HTTP Status Codes\n   Specific HTTP response codes
      as defined in Section 6 of [RFC7231]\n   will indicate the result of RESTCONF
      RPC requests with the publisher.\n   An HTTP status code of 200 is the proper
      response to any successful\n   RPC defined within [RFC8639] or [RFC8641].\n
      \  If a publisher fails to serve the RPC request for one of the reasons\n   indicated
      in Section 2.4.6 of [RFC8639] or Appendix A of [RFC8641],\n   this will be indicated
      by an appropriate error code, as shown below,\n   transported in the HTTP response.\n
      \  When an HTTP error code is returned, the RPC reply MUST include an\n   <rpc-error>
      element per Section 7.1 of [RFC8040] with the following\n   parameter values:\n
      \  *  an \"error-type\" node of \"application\".\n   *  an \"error-tag\" node
      whose value is a string that corresponds to an\n      identity associated with
      the error.  This \"error-tag\" will come\n      from one of two places and will
      correspond to the error identities\n      either within Section 2.4.6 of [RFC8639]
      for general subscription\n      errors (Table 1) or within Appendix A.1 of [RFC8641]
      for\n      subscription errors specific to YANG datastores (Table 2).\n   *
      \ an \"error-app-tag\" node whose value is a string that corresponds\n      to
      an identity associated with the error, as defined in\n      Section 2.4.6 of
      [RFC8639] for general subscriptions or\n      Appendix A.1 of [RFC8641] for
      subscription errors specific to YANG\n      datastores.  The tag to use depends
      on the RPC for which the error\n      occurred.  Viable errors for different
      RPCs are found in Table 3.\n     | Error identity         | Uses \"error-tag\"
      \       | HTTP code |\n     | dscp-unavailable       | invalid-value           |
      400       |\n     | encoding-unsupported   | invalid-value           | 400       |\n
      \    | filter-unsupported     | invalid-value           | 400       |\n     |
      insufficient-resources | resource-denied         | 409       |\n     | no-such-subscription
      \  | invalid-value           | 404       |\n     | replay-unsupported     |
      operation-not-supported | 501       |\n            Table 1: General Subscription
      Error Identities and\n                        Associated \"error-tag\" Use\n
      \  | Error identity              | Uses \"error-tag\"        | HTTP      |\n
      \  | cant-include                | operation-not-supported | 501       |\n   |
      datastore-not-subscribable  | invalid-value           | 400       |\n   | no-such-subscription-resync
      | invalid-value           | 404       |\n   | on-change-unsupported       |
      operation-not-supported | 501       |\n   | on-change-sync-unsupported  | operation-not-supported
      | 501       |\n   | period-unsupported          | invalid-value           |
      400       |\n   | update-too-big              | too-big                 | 400
      \      |\n   | sync-too-big                | too-big                 | 400       |\n
      \  | unchanging-selection        | operation-failed        | 500       |\n        Table
      2: Datastore-Specific Error Identities and Associated\n                              \"error-tag\"
      Use\n        | RPC                    | Select an identity with a base |\n        |
      establish-subscription | establish-subscription-error   |\n        | modify-subscription
      \   | modify-subscription-error      |\n        | delete-subscription    | delete-subscription-error
      \     |\n        | kill-subscription      | delete-subscription-error      |\n
      \       | resync-subscription    | resync-subscription-error      |\n            Table
      3: RPC Errors and Associated Error Identities\n   Each error identity will be
      inserted as the \"error-app-tag\" using\n   JSON encoding following the form
      <modulename>:<identityname>.  An\n   example of such a valid encoding would
      be \"ietf-subscribed-\n   notifications:no-such-subscription\".\n   In the case
      of error responses to an \"establish-subscription\" or\n   \"modify-subscription\"
      request, there is the option to include an\n   \"error-info\" node.  This node
      may contain hints for parameter\n   settings that might lead to successful RPC
      requests in the future.\n   Tables 4 and 5 show the yang-data structures that
      may be returned.\n      | Target:      | Return hints in yang-data structure
      \        |\n      | event stream | establish-subscription-stream-error-info
      \   |\n      | datastore    | establish-subscription-datastore-error-info |\n
      \            Table 4: Optional \"error-info\" Node Hints for an\n                     \"establish-subscription\"
      Request\n        | Target:      | Returns hints in yang-data structure     |\n
      \       | event stream | modify-subscription-stream-error-info    |\n        |
      datastore    | modify-subscription-datastore-error-info |\n              Table
      5: Optional \"error-info\" Node Hints for an\n                       \"modify-subscription\"
      Request\n   The yang-data included within \"error-info\" SHOULD NOT include
      the\n   optional leaf \"reason\", as such a leaf would be redundant with\n   information
      that is already placed within the \"error-app-tag\".\n   In case of an <rpc-error>
      as a result of a \"delete-subscription\", a\n   \"kill-subscription\", or a
      \"resync-subscription\" request, no \"error-\n   info\" needs to be included,
      as the \"subscription-id\" is the only RPC\n   input parameter, and no hints
      regarding this RPC input parameters\n   need to be provided.\n   Note that \"error-path\"
      [RFC8040] does not need to be included with\n   the <rpc-error> element, as
      subscription errors are generally\n   associated with the choice of RPC input
      parameters.\n"
    title: 3.3.  RESTCONF RPCs and HTTP Status Codes
  - contents:
    - "3.4.  Call Flow for Server-Sent Events\n   The call flow for Server-Sent Events
      (SSE) is defined in Figure 1.\n   The logical connections denoted by (a) and
      (b) can be a TCP\n   connection or an HTTP/2 stream (if HTTP/2 is used, multiple
      HTTP/2\n   streams can be carried in one TCP connection).  Requests to RPCs
      as\n   defined in [RFC8639] or [RFC8641] are sent on a connection indicated\n
      \  by (a).  A successful \"establish-subscription\" will result in an RPC\n
      \  response returned with both a subscription identifier that uniquely\n   identifies
      a subscription, as well as a URI that uniquely identifies\n   the location of
      subscription on the publisher (b).  This URI is\n   defined via the \"uri\"
      leaf in the data model in Section 7.\n   An HTTP GET is then sent on a separate
      logical connection (b) to the\n   URI on the publisher.  This signals the publisher
      to initiate the\n   flow of notification messages that are sent in SSE [W3C-20150203]
      as\n   a response to the GET.  There cannot be two or more simultaneous GET\n
      \  requests on a subscription URI: any GET request received while there\n   is
      a current GET request on the same URI MUST be rejected with HTTP\n   error code
      409.\n   As described in Section 6.4 of [RFC8040], RESTCONF servers SHOULD NOT\n
      \  send the \"event\" or \"id\" fields in the SSE event notifications.\n   |
      \ Subscriber  |                             |   Publisher  |\n   |    Logical
      \  |                             |     Logical  |\n   |  Connection  |                             |
      \  Connection |\n   |  (a)  (b)    |                             |    (a)  (b)
      \ |\n       | RESTCONF POST (RPC:establish-subscription)   |\n       |    |HTTP
      GET (URI)                                |\n       | RESTCONF POST (RPC:modify-subscription)
      \     |    |\n       | RESTCONF POST (RPC:delete-subscription)      |    |\n
      \      (a) (b)                                       (a)  (b)\n          Figure
      1: Dynamic Subscriptions with Server-Sent Events\n   Additional requirements
      for dynamic subscriptions over SSE include:\n   *  A publisher MUST return all
      subscription state notifications in a\n      separate SSE message used by the
      subscription to which the state\n      change refers.\n   *  Subscription RPCs
      MUST NOT use the connection currently providing\n      notification messages
      for that subscription.\n   *  In addition to an RPC response for a \"modify-subscription\"
      RPC\n      traveling over (a), a \"subscription-modified\" state change\n      notification
      MUST be sent within (b).  This allows the receiver to\n      know exactly when,
      within the stream of events, the new terms of\n      the subscription have been
      applied to the notification messages.\n      See arrow (c).\n   *  In addition
      to any required access permissions (e.g., Network\n      Configuration Access
      Control Model (NACM)), the RPCs \"modify-\n      subscription\", \"resync-subscription\",
      and \"delete-subscription\"\n      SHOULD only be allowed by the same RESTCONF
      username [RFC8040]\n      that invoked \"establish-subscription\".  Such a restriction\n
      \     generally serves to preserve users' privacy, but exceptions might\n      be
      made for administrators that may need to modify or delete other\n      users'
      subscriptions.\n   *  The \"kill-subscription\" RPC can be invoked by any RESTCONF\n
      \     username with the required administrative permissions.\n   A publisher
      MUST terminate a subscription in the following cases:\n   *  Receipt of a \"delete-subscription\"
      or a \"kill-subscription\" RPC\n      for that subscription\n   *  Loss of TLS
      heartbeat\n   A publisher MAY terminate a subscription at any time as stated
      in\n   Section 1.3 of [RFC8639].\n"
    title: 3.4.  Call Flow for Server-Sent Events
  title: 3.  Dynamic Subscriptions
- contents:
  - "4.  QoS Treatment\n   Qos treatment for event streams is described in Section
    2.3 of\n   [RFC8639].  In addition, if HTTP/2 is used, the publisher MUST:\n   *
    \ Take the \"weighting\" leaf node in [RFC8639] and copy it into the\n      HTTP/2
    stream weight, Section 5.3 of [RFC7540], and\n   *  Take any existing subscription
    \"dependency\", as specified by the\n      \"dependency\" leaf node in [RFC8639],
    and use the HTTP/2 stream for\n      the parent subscription as the HTTP/2 stream
    dependency (as\n      described in Section 5.3.1 of [RFC7540]) of the dependent\n
    \     subscription.\n   *  Set the exclusive flag (Section 5.3.1 of [RFC7540])
    to 0.\n   For dynamic subscriptions with the same Differentiated Services Code\n
    \  Point (DSCP) value to a specific publisher, it is recommended that\n   the
    subscriber sends all URI GET requests on a common HTTP/2 session\n   (if HTTP/2
    is used).  Conversely, a subscriber cannot use a common\n   HTTP/2 session for
    subscriptions with different DSCP values.\n"
  title: 4.  QoS Treatment
- contents:
  - "5.  Notification Messages\n   Notification messages transported over RESTCONF
    will be encoded\n   according to [RFC8040], Section 6.4.\n"
  title: 5.  Notification Messages
- contents:
  - "6.  YANG Tree\n   The YANG module defined in Section 7 has one leaf that augments
    three\n   nodes of [RFC8639].\n   module: ietf-restconf-subscribed-notifications\n
    \    augment /sn:establish-subscription/sn:output:\n       +--ro uri?   inet:uri\n
    \    augment /sn:subscriptions/sn:subscription:\n       +--ro uri?   inet:uri\n
    \    augment /sn:subscription-modified:\n       +--ro uri?   inet:uri\n"
  title: 6.  YANG Tree
- contents:
  - "7.  YANG Module\n   This module references [RFC8639].\n   <CODE BEGINS>\n     file
    \"ietf-restconf-subscribed-notifications@2019-11-17.yang\"\n   module ietf-restconf-subscribed-notifications
    {\n     yang-version 1.1;\n     namespace \"urn:ietf:params:xml:ns:yang:\"\n             +
    \"ietf-restconf-subscribed-notifications\";\n     prefix rsn;\n     import ietf-subscribed-notifications
    {\n       prefix sn;\n     }\n     import ietf-inet-types {\n       prefix inet;\n
    \    }\n     organization\n       \"IETF NETCONF (Network Configuration) Working
    Group\";\n     contact\n       \"WG Web:   <https://datatracker.ietf.org/wg/netconf/>\n
    \       WG List:  <mailto:netconf@ietf.org>\n        Editor:   Eric Voit\n                  <mailto:evoit@cisco.com>\n
    \       Editor:   Alexander Clemm\n                  <mailto:ludwig@clemm.org>\n
    \       Editor:   Reshad Rahman\n                  <mailto:rrahman@cisco.com>\";\n
    \    description\n       \"Defines RESTCONF as a supported transport for subscribed\n
    \       event notifications.\n        Copyright (c) 2019 IETF Trust and the persons
    identified\n        as authors of the code.  All rights reserved.\n        Redistribution
    and use in source and binary forms, with or\n        without modification, is
    permitted pursuant to, and subject to\n        the license terms contained in,
    the Simplified BSD License set\n        forth in Section 4.c of the IETF Trust's
    Legal Provisions\n        Relating to IETF Documents\n        (https://trustee.ietf.org/license-info).\n
    \       This version of this YANG module is part of RFC 8650; see the\n        RFC
    itself for full legal notices.\";\n     revision 2019-11-17 {\n       description\n
    \        \"Initial version\";\n       reference\n         \"RFC 8650: Dynamic
    Subscription to YANG Events and Datastores\n          over RESTCONF\";\n     }\n
    \    grouping uri {\n       description\n         \"Provides a reusable description
    of a URI.\";\n       leaf uri {\n         type inet:uri;\n         config false;\n
    \        description\n           \"Location of a subscription-specific URI on
    the publisher.\";\n       }\n     }\n     augment \"/sn:establish-subscription/sn:output\"
    {\n       description\n         \"This augmentation allows RESTCONF-specific parameters
    for a\n          response to a publisher's subscription request.\";\n       uses
    uri;\n     }\n     augment \"/sn:subscriptions/sn:subscription\" {\n       description\n
    \        \"This augmentation allows RESTCONF-specific parameters to be\n          exposed
    for a subscription.\";\n       uses uri;\n     }\n     augment \"/sn:subscription-modified\"
    {\n       description\n         \"This augmentation allows RESTCONF-specific parameters
    to be\n          included as part of the notification that a subscription has\n
    \         been modified.\";\n       uses uri;\n     }\n   }\n   <CODE ENDS>\n"
  title: 7.  YANG Module
- contents:
  - "8.  IANA Considerations\n   This document registers the following namespace URI
    in the \"ns\"\n   subregistry of the \"IETF XML Registry\" [RFC3688]:\n   URI:\n
    \     urn:ietf:params:xml:ns:yang:ietf-restconf-subscribed-notifications\n   Registrant
    Contact:  The IESG.\n   XML:  N/A; the requested URI is an XML namespace.\n   This
    document registers the following YANG module in the \"YANG Module\n   Names\"
    registry [RFC6020]:\n   Name:  ietf-restconf-subscribed-notifications\n   Namespace:\n
    \     urn:ietf:params:xml:ns:yang:ietf-restconf-subscribed-notifications\n   Prefix:
    \ rsn\n   Reference:  RFC 8650\n"
  title: 8.  IANA Considerations
- contents:
  - "9.  Security Considerations\n   The YANG module specified in this document defines
    a schema for data\n   that is designed to be accessed via network management transports\n
    \  such as NETCONF [RFC6241] or RESTCONF [RFC8040].  The lowest NETCONF\n   layer
    is the secure transport layer, and the mandatory-to-implement\n   secure transport
    is Secure Shell (SSH) [RFC6242].  The lowest\n   RESTCONF layer is HTTPS, and
    the mandatory-to-implement secure\n   transport is TLS [RFC8446].\n   The Network
    Configuration Access Control Model (NACM) [RFC8341]\n   provides the means to
    restrict access for particular NETCONF or\n   RESTCONF users to a preconfigured
    subset of all available NETCONF or\n   RESTCONF protocol operations and content.\n
    \  The one new data node introduced in this YANG module may be\n   considered
    sensitive or vulnerable in some network environments.  It\n   is thus important
    to control read access (e.g., via get, get-config,\n   or notification) to this
    data node.  These are the subtrees and data\n   nodes and their sensitivity/vulnerability:\n
    \  Container: \"/subscriptions\"\n   *  \"uri\": leaf will show where subscribed
    resources might be located\n      on a publisher.  Access control must be set
    so that only someone\n      with proper access permissions, i.e., the same RESTCONF
    [RFC8040]\n      user credentials that invoked the corresponding \"establish-\n
    \     subscription\", has the ability to access this resource.\n   The subscription
    URI is implementation specific and is encrypted via\n   the use of TLS.  Therefore,
    even if an attacker succeeds in guessing\n   the subscription URI, a RESTCONF
    username [RFC8040] with the required\n   administrative permissions must be used
    to be able to access or\n   modify that subscription.  It is recommended that
    the subscription\n   URI values not be easily predictable.\n   The access permission
    considerations for the RPCs \"modify-\n   subscription\", \"resync-subscription\",
    \"delete-subscription\", and\n   \"kill-subscription\" are described in Section
    3.4.\n   If a buggy or compromised RESTCONF subscriber sends a number of\n   \"establish-subscription\"
    requests, then these subscriptions\n   accumulate and may use up system resources.
    \ In such a situation, the\n   publisher MAY also suspend or terminate a subset
    of the active\n   subscriptions from that RESTCONF subscriber in order to reclaim\n
    \  resources and preserve normal operation for the other subscriptions.\n"
  title: 9.  Security Considerations
- contents:
  - '10.  References

    '
  - contents:
    - "10.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use
      in RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119,\n
      \             DOI 10.17487/RFC2119, March 1997,\n              <https://www.rfc-editor.org/info/rfc2119>.\n
      \  [RFC3688]  Mealling, M., \"The IETF XML Registry\", BCP 81, RFC 3688,\n              DOI
      10.17487/RFC3688, January 2004,\n              <https://www.rfc-editor.org/info/rfc3688>.\n
      \  [RFC6020]  Bjorklund, M., Ed., \"YANG - A Data Modeling Language for\n              the
      Network Configuration Protocol (NETCONF)\", RFC 6020,\n              DOI 10.17487/RFC6020,
      October 2010,\n              <https://www.rfc-editor.org/info/rfc6020>.\n   [RFC6241]
      \ Enns, R., Ed., Bjorklund, M., Ed., Schoenwaelder, J., Ed.,\n              and
      A. Bierman, Ed., \"Network Configuration Protocol\n              (NETCONF)\",
      RFC 6241, DOI 10.17487/RFC6241, June 2011,\n              <https://www.rfc-editor.org/info/rfc6241>.\n
      \  [RFC6242]  Wasserman, M., \"Using the NETCONF Protocol over Secure\n              Shell
      (SSH)\", RFC 6242, DOI 10.17487/RFC6242, June 2011,\n              <https://www.rfc-editor.org/info/rfc6242>.\n
      \  [RFC6520]  Seggelmann, R., Tuexen, M., and M. Williams, \"Transport\n              Layer
      Security (TLS) and Datagram Transport Layer Security\n              (DTLS) Heartbeat
      Extension\", RFC 6520,\n              DOI 10.17487/RFC6520, February 2012,\n
      \             <https://www.rfc-editor.org/info/rfc6520>.\n   [RFC7540]  Belshe,
      M., Peon, R., and M. Thomson, Ed., \"Hypertext\n              Transfer Protocol
      Version 2 (HTTP/2)\", RFC 7540,\n              DOI 10.17487/RFC7540, May 2015,\n
      \             <https://www.rfc-editor.org/info/rfc7540>.\n   [RFC8040]  Bierman,
      A., Bjorklund, M., and K. Watsen, \"RESTCONF\n              Protocol\", RFC
      8040, DOI 10.17487/RFC8040, January 2017,\n              <https://www.rfc-editor.org/info/rfc8040>.\n
      \  [RFC8174]  Leiba, B., \"Ambiguity of Uppercase vs Lowercase in RFC\n              2119
      Key Words\", BCP 14, RFC 8174, DOI 10.17487/RFC8174,\n              May 2017,
      <https://www.rfc-editor.org/info/rfc8174>.\n   [RFC8341]  Bierman, A. and M.
      Bjorklund, \"Network Configuration\n              Access Control Model\", STD
      91, RFC 8341,\n              DOI 10.17487/RFC8341, March 2018,\n              <https://www.rfc-editor.org/info/rfc8341>.\n
      \  [RFC8342]  Bjorklund, M., Schoenwaelder, J., Shafer, P., Watsen, K.,\n              and
      R. Wilton, \"Network Management Datastore Architecture\n              (NMDA)\",
      RFC 8342, DOI 10.17487/RFC8342, March 2018,\n              <https://www.rfc-editor.org/info/rfc8342>.\n
      \  [RFC8446]  Rescorla, E., \"The Transport Layer Security (TLS) Protocol\n
      \             Version 1.3\", RFC 8446, DOI 10.17487/RFC8446, August 2018,\n
      \             <https://www.rfc-editor.org/info/rfc8446>.\n   [RFC8639]  Voit,
      E., Clemm, A., Gonzalez Prieto, A., Nilsen-Nygaard,\n              E., and A.
      Tripathy, \"Subscription to YANG Notifications\",\n              RFC 8639, DOI
      10.17487/RFC8639, September 2019,\n              <https://www.rfc-editor.org/info/rfc8639>.\n
      \  [RFC8641]  Clemm, A. and E. Voit, \"Subscription to YANG Notifications\n
      \             for Datastore Updates\", RFC 8641, DOI 10.17487/RFC8641,\n              September
      2019, <https://www.rfc-editor.org/info/rfc8641>.\n   [W3C-20150203]\n              Hickson,
      I., \"Server-Sent Events\", W3C Recommendation, 3\n              February 2015,\n
      \             <https://www.w3.org/TR/2015/REC-eventsource-20150203/>.\n              Latest
      version available at <https://www.w3.org/TR/\n              eventsource/>.\n"
    title: 10.1.  Normative References
  - contents:
    - "10.2.  Informative References\n   [RFC7231]  Fielding, R., Ed. and J. Reschke,
      Ed., \"Hypertext Transfer\n              Protocol (HTTP/1.1): Semantics and
      Content\", RFC 7231,\n              DOI 10.17487/RFC7231, June 2014,\n              <https://www.rfc-editor.org/info/rfc7231>.\n
      \  [RFC7923]  Voit, E., Clemm, A., and A. Gonzalez Prieto, \"Requirements\n
      \             for Subscription to YANG Datastores\", RFC 7923,\n              DOI
      10.17487/RFC7923, June 2016,\n              <https://www.rfc-editor.org/info/rfc7923>.\n
      \  [RFC7951]  Lhotka, L., \"JSON Encoding of Data Modeled with YANG\",\n              RFC
      7951, DOI 10.17487/RFC7951, August 2016,\n              <https://www.rfc-editor.org/info/rfc7951>.\n
      \  [RFC8347]  Liu, X., Ed., Kyparlis, A., Parikh, R., Lindem, A., and M.\n              Zhang,
      \"A YANG Data Model for the Virtual Router\n              Redundancy Protocol
      (VRRP)\", RFC 8347,\n              DOI 10.17487/RFC8347, March 2018,\n              <https://www.rfc-editor.org/info/rfc8347>.\n
      \  [RFC8527]  Bjorklund, M., Schoenwaelder, J., Shafer, P., Watsen, K.,\n              and
      R. Wilton, \"RESTCONF Extensions to Support the Network\n              Management
      Datastore Architecture\", RFC 8527,\n              DOI 10.17487/RFC8527, March
      2019,\n              <https://www.rfc-editor.org/info/rfc8527>.\n   [RFC8640]
      \ Voit, E., Clemm, A., Gonzalez Prieto, A., Nilsen-Nygaard,\n              E.,
      and A. Tripathy, \"Dynamic Subscription to YANG Events\n              and Datastores
      over NETCONF\", RFC 8640,\n              DOI 10.17487/RFC8640, September 2019,\n
      \             <https://www.rfc-editor.org/info/rfc8640>.\n   [XPATH]    Clark,
      J. and S. DeRose, \"XML Path Language (XPath)\n              Version 1.0\",
      W3C Recommendation, 16 November 1999,\n              <http://www.w3.org/TR/1999/REC-xpath-19991116>.
      \ Latest\n              version available at <https://www.w3.org/TR/ xpath/>.\n"
    title: 10.2.  Informative References
  title: 10.  References
- contents:
  - "Appendix A.  Examples\n   This section is non-normative.  To allow easy comparison,
    this\n   section mirrors the functional examples shown with NETCONF over XML\n
    \  within [RFC8640].  In addition, HTTP/2 vs HTTP/1.1 headers are not\n   shown
    as the contents of the JSON encoded objects are identical\n   within.\n   The
    subscription URI values used in the examples in this section are\n   purely illustrative,
    and are not indicative of the expected usage\n   that is described in Section
    9.\n   The DSCP values are only for example purposes and are all indicated\n   in
    decimal since the encoding is JSON [RFC7951].\n"
  - contents:
    - 'A.1.  Dynamic Subscriptions

      '
    - contents:
      - "A.1.1.  Establishing Dynamic Subscriptions\n   The following figure shows
        two successful \"establish-subscription\"\n   RPC requests as per [RFC8639].
        \ The first request is given a\n   subscription identifier of 22, and the
        second, an identifier of 23.\n      | Subscriber |                  | Publisher
        |\n            |establish-subscription         |\n            |     HTTP 200
        OK, id#22, URI#1 |\n            |GET (URI#1)                    |\n            |
        HTTP 200 OK,notif-mesg (id#22)|\n            |establish-subscription         |\n
        \           |      HTTP 200 OK, id#23, URI#2|\n            |GET (URI#2)                    |\n
        \           |             notif-mesg (id#22)|\n            | HTTP 200 OK,notif-mesg
        (id#23)|\n            Figure 2: Multiple Subscriptions over RESTCONF/HTTP\n
        \  To provide examples of the information being transported, example\n   messages
        for interactions in Figure 2 are detailed below:\n   POST /restconf/operations\n
        \       /ietf-subscribed-notifications:establish-subscription\n   {\n      \"ietf-subscribed-notifications:input\":
        {\n         \"stream-xpath-filter\": \"/example-module:foo/\",\n         \"stream\":
        \"NETCONF\",\n         \"dscp\": 10\n      }\n   }\n               Figure
        3: \"establish-subscription\" Request (a)\n   As the publisher was able to
        fully satisfy the request, the publisher\n   sends the subscription identifier
        of the accepted subscription and\n   the URI:\n   HTTP status code - 200\n
        \  {\n      \"id\": 22,\n      \"uri\": \"https://example.com/restconf/subscriptions/22\"\n
        \  }\n               Figure 4: \"establish-subscription\" Success (b)\n   Upon
        receipt of the successful response, the subscriber does a GET to\n   the provided
        URI to start the flow of notification messages.  When\n   the publisher receives
        this, the subscription is moved to the active\n   state (c).\n   GET /restconf/subscriptions/22\n
        \            Figure 5: \"establish-subscription\" Subsequent POST\n   While
        not shown in Figure 2, if the publisher had not been able to\n   fully satisfy
        the request, or the subscriber has no authorization to\n   establish the subscription,
        the publisher would have sent an RPC\n   error response.  For instance, if
        the \"dscp\" value of 10 asserted by\n   the subscriber in Figure 3 proved
        unacceptable, the publisher may\n   have returned:\n   HTTP status code -
        400\n   { \"ietf-restconf:errors\" : {\n       \"error\" : [\n         {\n
        \          \"error-type\": \"application\",\n           \"error-tag\": \"invalid-value\",\n
        \          \"error-severity\": \"error\",\n           \"error-app-tag\":\n
        \              \"ietf-subscribed-notifications:dscp-unavailable\"\n         }\n
        \      ]\n     }\n   }\n             Figure 6: An Unsuccessful \"establish-subscription\"\n
        \  The subscriber can use this information in future attempts to\n   establish
        a subscription.\n"
      title: A.1.1.  Establishing Dynamic Subscriptions
    - contents:
      - "A.1.2.  Modifying Dynamic Subscriptions\n   An existing subscription may
        be modified.  The following exchange\n   shows a negotiation of such a modification
        via several exchanges\n   between a subscriber and a publisher.  This negotiation
        consists of a\n   failed RPC modification request/response followed by a successful\n
        \  one.\n      | Subscriber |                 | Publisher |\n            |
        \ notification message (id#23)|\n            |modify-subscription (id#23)
        \  |\n            |    HTTP 400 error (with hint)|\n            |modify-subscription
        (id#23)   |\n            |                  HTTP 200 OK |\n            |            notif-mesg
        (id#23)|\n    Figure 7: Interaction Model for Successful Subscription Modification\n
        \  If the subscription being modified in Figure 7 is a datastore\n   subscription
        as per [RFC8641], the modification request made in (d)\n   may look like that
        shown in Figure 8.  As can be seen, the\n   modifications being attempted
        are the application of a new XML Path\n   Language (XPath) filter as well
        as the setting of a new periodic time\n   interval.\n   POST /restconf/operations\n
        \       /ietf-subscribed-notifications:modify-subscription\n   {\n    \"ietf-subscribed-notifications:input\":
        {\n       \"id\": 23,\n       \"ietf-yang-push:datastore-xpath-filter\":\n
        \         \"/example-module:foo/example-module:bar\",\n       \"ietf-yang-push:periodic\":
        {\n          \"ietf-yang-push:period\": 500\n       }\n     }\n   }\n              Figure
        8: Subscription Modification Request (c)\n   If the publisher can satisfy
        both changes, the publisher sends a\n   positive result for the RPC.  If the
        publisher cannot satisfy either\n   of the proposed changes, the publisher
        sends an RPC error response\n   (e).  The following is an example RPC error
        response for (e) that\n   includes a hint.  This hint is an alternative time
        period value that\n   might have resulted in a successful modification:\n
        \  HTTP status code - 400\n   { \"ietf-restconf:errors\" : {\n       \"error\"
        : [\n         \"error-type\": \"application\",\n         \"error-tag\": \"invalid-value\",\n
        \        \"error-severity\": \"error\",\n         \"error-app-tag\": \"ietf-yang-push:period-unsupported\",\n
        \        \"error-info\": {\n           \"ietf-yang-push\":\n           \"modify-subscription-datastore-error-info\":
        {\n              \"period-hint\": 3000\n           }\n         }\n       ]\n
        \    }\n   }\n           Figure 9: \"modify-subscription\" Failure with Hint
        (e)\n"
      title: A.1.2.  Modifying Dynamic Subscriptions
    - contents:
      - "A.1.3.  Deleting Dynamic Subscriptions\n   The following demonstrates deleting
        a subscription.  This\n   subscription may have been to either a stream or
        a datastore.\n   POST /restconf/operations\n        /ietf-subscribed-notifications:delete-subscription\n
        \  {\n    \"delete-subscription\": {\n       \"id\": \"22\"\n    }\n   }\n
        \                 Figure 10: \"delete-subscription\" Request\n   If the publisher
        can satisfy the request, the publisher replies with\n   success to the RPC
        request.\n   If the publisher cannot satisfy the request, the publisher sends
        an\n   <rpc-error> element indicating the modification didn't work.\n   Figure
        11 shows a valid response for an existing valid subscription\n   identifier,
        but that subscription identifier was created on a\n   different transport
        session:\n   HTTP status code - 404\n   {\n     \"ietf-restconf:errors\" :
        {\n       \"error\" : [\n         \"error-type\": \"application\",\n         \"error-tag\":
        \"invalid-value\",\n         \"error-severity\": \"error\",\n         \"error-app-tag\":\n
        \           \"ietf-subscribed-notifications:no-such-subscription\"\n       ]\n
        \    }\n   }\n               Figure 11: Unsuccessful \"delete-subscription\"\n"
      title: A.1.3.  Deleting Dynamic Subscriptions
    title: A.1.  Dynamic Subscriptions
  - contents:
    - "A.2.  Subscription State Notifications\n   A publisher will send subscription
      state notifications according to\n   the definitions within [RFC8639].\n"
    - contents:
      - "A.2.1.  \"subscription-modified\"\n   A \"subscription-modified\" encoded
        in JSON would look like:\n   {\n     \"ietf-restconf:notification\" : {\n
        \      \"eventTime\": \"2007-09-01T10:00:00Z\",\n       \"ietf-subscribed-notifications:subscription-modified\":
        {\n         \"id\": 39,\n         \"uri\": \"https://example.com/restconf/subscriptions/22\"\n
        \        \"stream-xpath-filter\": \"/example-module:foo\",\n         \"stream\":
        {\n            \"ietf-netconf-subscribed-notifications\" : \"NETCONF\"\n         }\n
        \      }\n     }\n   }\n     Figure 12: \"subscription-modified\" Subscription
        State Notification\n"
      title: A.2.1.  "subscription-modified"
    - contents:
      - "A.2.2.  \"subscription-completed\", \"subscription-resumed\", and \"replay-\n
        \       completed\"\n   A \"subscription-completed\" notification would look
        like:\n   {\n     \"ietf-restconf:notification\" : {\n       \"eventTime\":
        \"2007-09-01T10:00:00Z\",\n       \"ietf-subscribed-notifications:subscription-completed\":
        {\n         \"id\": 39,\n       }\n     }\n   }\n          Figure 13: \"subscription-completed\"
        Notification in JSON\n   The \"subscription-resumed\" and \"replay-complete\"
        are virtually\n   identical, with \"subscription-completed\" simply being
        replaced by\n   \"subscription-resumed\" and \"replay-complete\".\n"
      title: A.2.2.  "subscription-completed", "subscription-resumed", and "replay-
    - contents:
      - "A.2.3.  \"subscription-terminated\" and \"subscription-suspended\"\n   A
        \"subscription-terminated\" would look like:\n   {\n     \"ietf-restconf:notification\"
        : {\n       \"eventTime\": \"2007-09-01T10:00:00Z\",\n       \"ietf-subscribed-notifications:subscription-terminated\":
        {\n         \"id\": 39,\n         \"error-id\": \"suspension-timeout\"\n       }\n
        \    }\n   }\n    Figure 14: \"subscription-terminated\" Subscription State
        Notification\n   The \"subscription-suspended\" is virtually identical, with\n
        \  \"subscription-terminated\" simply being replaced by \"subscription-\n
        \  suspended\".\n"
      title: A.2.3.  "subscription-terminated" and "subscription-suspended"
    title: A.2.  Subscription State Notifications
  - contents:
    - "A.3.  Filter Example\n   This section provides an example that illustrates
      the method of\n   filtering event record contents.  The example is based on
      the YANG\n   notification \"vrrp-protocol-error-event\" as defined per the ietf-\n
      \  vrrp.yang module within [RFC8347].  Event records based on this\n   specification
      that are generated by the publisher might appear as:\n   data: {\n   data:   \"ietf-restconf:notification\"
      : {\n   data:     \"eventTime\" : \"2018-09-14T08:22:33.44Z\",\n   data:     \"ietf-vrrp:vrrp-protocol-error-event\"
      : {\n   data:       \"protocol-error-reason\" : \"checksum-error\"\n   data:
      \    }\n   data:   }\n   data: }\n             Figure 15: RFC 8347 (VRRP) -
      Example Notification\n   Suppose a subscriber wanted to establish a subscription
      that only\n   passes instances of event records where there is a \"checksum-error\"\n
      \  as part of a Virtual Router Redundancy Protocol (VRRP) protocol\n   event.
      \ Also assume the publisher places such event records into the\n   NETCONF stream.
      \ To get a continuous series of matching event\n   records, the subscriber might
      request the application of an XPath\n   filter against the NETCONF stream.  An
      \"establish-subscription\" RPC\n   to meet this objective might be:\n   POST
      /restconf/operations\n        /ietf-subscribed-notifications:establish-subscription\n
      \  {\n      \"ietf-subscribed-notifications:input\": {\n         \"stream\":
      \"NETCONF\",\n         \"stream-xpath-filter\":\n           \"/ietf-vrrp:vrrp-protocol-error-event[\n
      \            protocol-error-reason='checksum-error']/\",\n      }\n   }\n       Figure
      16: Establishing a Subscription Error Reason via XPath\n   For more examples
      of XPath filters, see [XPATH].\n   Suppose the \"establish-subscription\" in
      Figure 16 was accepted.  And\n   suppose later a subscriber decided they wanted
      to broaden this\n   subscription cover to all VRRP protocol events (i.e., not
      just those\n   with a \"checksum error\").  The subscriber might attempt to
      modify the\n   subscription in a way that replaces the XPath filter with a subtree\n
      \  filter that sends all VRRP protocol events to a subscriber.  Such a\n   \"modify-subscription\"
      RPC might look like:\n   POST /restconf/operations\n        /ietf-subscribed-notifications:modify-subscription\n
      \  {\n      \"ietf-subscribed-notifications:input\": {\n         \"stream\":
      \"NETCONF\",\n         \"stream-subtree-filter\": {\n           \"/ietf-vrrp:vrrp-protocol-error-event\"
      : {}\n         }\n      }\n   }\n                Figure 17: Example \"modify-subscription\"
      RPC\n   For more examples of subtree filters, see [RFC6241], Section 6.4.\n"
    title: A.3.  Filter Example
  title: Appendix A.  Examples
- contents:
  - "Acknowledgments\n   We wish to acknowledge the helpful contributions, comments,
    and\n   suggestions that were received from Ambika Prasad Tripathy, Alberto\n
    \  Gonzalez Prieto, Susan Hares, Tim Jenkins, Balazs Lengyel, Kent\n   Watsen,
    Michael Scharf, Guangying Zheng, Martin Bjorklund, Qin Wu,\n   and Robert Wilton.\n"
  title: Acknowledgments
- contents:
  - "Authors' Addresses\n   Eric Voit\n   Cisco Systems\n   Email: evoit@cisco.com\n
    \  Reshad Rahman\n   Cisco Systems\n   Email: rrahman@cisco.com\n   Einar Nilsen-Nygaard\n
    \  Cisco Systems\n   Email: einarnn@cisco.com\n   Alexander Clemm\n   Futurewei\n
    \  Email: ludwig@clemm.org\n   Andy Bierman\n"
  title: Authors' Addresses
