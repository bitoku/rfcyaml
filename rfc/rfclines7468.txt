Abstract This document describes and discusses the textual encodings of the Public Key Infrastructure X.509 (PKIX), Public Key Cryptography Standards (PKCS), and Cryptographic Message Syntax (CMS).
The textual encodings are well known, are implemented by several applications and libraries, and are widely deployed.
This document articulates the de facto rules by which existing implementations operate and defines them so that future implementations can interoperate.
Introduction Several security related standards used on the Internet define ASN.1 data formats that are normally encoded using the Basic Encoding Rules (BER) or Distinguished Encoding Rules (DER) [X.690], which are binary, octet oriented encodings.
This document is about the textual encodings of the following formats: 1.
Certificates, Certificate Revocation Lists (CRLs), and Subject Public Key Info structures in the Internet X.509 Public Key Infrastructure Certificate and Certificate Revocation List (CRL) Profile [RFC5280].
#7: Cryptographic Message Syntax [RFC2315].
Private Key Information Syntax [RFC5208], renamed to One Asymmetric Key in Asymmetric Key Package [RFC5958], and Encrypted Private Key Information Syntax in the same documents.
Attribute Certificates in An Internet Attribute Certificate Profile for Authorization
A disadvantage of a binary data format is that it cannot be interchanged in textual transports, such as email or text documents.
One advantage with text based encodings is that they are easy to modify using common text editors; for example, a user may concatenate several certificates to form a certificate chain with copy and paste operations.
The tradition within the RFC series can be traced back to Privacy  Enhanced Mail (PEM) [RFC1421], based on a proposal by Marshall Rose in Message Encapsulation [RFC934].
Originally called "PEM encapsulation mechanism", "encapsulated PEM message", or (arguably) "PEM printable encoding", today the format is sometimes referred to as "PEM encoding".
Variations include OpenPGP ASCII armor [RFC4880] and OpenSSH key file format [RFC4716].
For reasons that basically boil down to non coordination or inattention, many PKIX, PKCS, and CMS libraries implement a text  based encoding that is similar to   but not identical with   PEM encoding.
This document specifies the  textual encoding  format, articulates the de facto rules that most implementations operate by, and provides recommendations that will promote interoperability going forward.
This document also provides common nomenclature for syntax elements, reflecting the evolution of this de facto standard format.
Peter Gutmann's "X.509 Style Guide" [X.509SG] contains a section "base64 Encoding" that describes the formats and contains suggestions similar to what is in this document.
All figures are real, functional examples, with key lengths and inner contents chosen to be as small as practicable.
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in RFC 2119
Between these lines, or "encapsulation boundaries", are base64 encoded data according to Section 4 of [RFC4648].
(PEM [RFC1421] referred to this data as the "encapsulated text portion".)
Data before the encapsulation boundaries are permitted, and parsers MUST NOT malfunction when processing such data.
Furthermore, parsers SHOULD ignore whitespace and other non  base64 characters and MUST handle different newline conventions.
The type of data encoded is labeled depending on the type label in the " BEGIN " line (pre encapsulation boundary).
For example, the line may be " BEGIN CERTIFICATE " to indicate that the content is a PKIX certificate (see further below).
Generators MUST put the same label on the " END " line (post encapsulation boundary) as the corresponding " BEGIN " line.
Labels are formally case sensitive, uppercase, and comprised of zero or more characters; they do not contain consecutive spaces or hyphen minuses, nor do they contain spaces or hyphen minuses at either end.
Parsers MAY disregard the label in the post encapsulation boundary instead of signaling an error if there is a label mismatch: some extant implementations require the labels to match; others do not.
There is exactly one space character (SP) separating the "BEGIN" or "END" from the label.
The label type implies that the encoded data follows the specified syntax.
Parsers MUST handle non conforming data gracefully.
However, not all parsers or generators prior to this document behave consistently.
MAY interpret the contents as another label type but ought to be aware of the security implications discussed in the Security Considerations section.
The labels described in this document identify container formats that are not specific to any particular cryptographic algorithm, a property consistent with algorithm agility.
These formats use the ASN.1 AlgorithmIdentifier structure as described in Section 4.1.1.2 of [RFC5280].
Unlike legacy PEM encoding [RFC1421], OpenPGP ASCII armor, and the OpenSSH key file format, textual encoding does  not  define or permit headers to be encoded alongside the data.
Empty space can appear between the pre encapsulation boundary and the base64, but generators SHOULD NOT emit such any such spacing.
(The provision for this empty area is a throwback to PEM, which defined an "encapsulated header portion".)
Implementers need to be aware that extant parsers diverge considerably on the handling of whitespace.
In this document, "whitespace" means any character or series of characters that represent horizontal or vertical space in typography.
In US ASCII, whitespace means HT (0x09), VT (0x0B), FF (0x0C), SP (0x20), CR (0x0D), and LF (0x0A); "blank" means HT and SP; lines are divided with CRLF, CR, or LF.
The common ABNF production WSP is congruent with "blank"; a new production W is used for "whitespace".
The ABNF in Section 3 is specific to US ASCII.
As these textual encodings can be used on many different systems as well as on long term archival storage media such as paper or engravings, an implementer ought to use the spirit rather than the letter of the rules when generating or parsing these formats in environments that are not strictly limited to US ASCII.
Most extant parsers ignore blanks at the ends of lines; blanks at the beginnings of lines or in the middle of the base64 encoded data are far less compatible.
These observations are codified in Figure 1.
The most lax parser implementations are not line oriented at all and will accept any mixture of whitespace outside of the encapsulation boundaries (see Figure 2).
Such lax parsing may run the risk of accepting text that was not intended to be accepted in the first place (e.g., because the text was a snippet or sample).
Generators MUST wrap the base64 encoded lines so that each line consists of exactly 64 characters except for the final line, which will encode the remainder of the data (within the 64 character line boundary), and they MUST NOT emit extraneous whitespace.
Parsers MAY handle other line sizes.
These requirements are consistent with PEM [RFC1421].
Files MAY contain multiple textual encoding instances.
This is used, for example, when a file contains several certificates.
Whether the instances are ordered or unordered depends on the context.
The ABNF [RFC5234] of the textual encoding is:
WSP eol base64pad /  2base64pad)
(4base64char / 3base64char base64pad / 2base64char 2base64pad) eol base64fullline
New implementations SHOULD emit the strict format (Figure 3) specified above.
The choice of parsing strategy depends on the context of use.
Guide For convenience, these figures summarize the structures, encodings, and references in the following sections: Sec.
id pkix1 e 7  CERTIFICATE REQUEST
id pkix1 e Figure 4:
This OID does not actually appear in PKCS #7 v1.5
It was defined in the ASN.1 module to PKCS #7 v1.6 [P7v1.6], and has been carried forward through PKCS #12 [RFC7292].
ASN.1 Module Object Identifier Value Assignments 5.
Textual Encoding of Certificates 5.1.
Encoding Public key certificates are encoded using the "CERTIFICATE" label.
The encoded data MUST be a BER (DER strongly preferred; see Appendix B) encoded ASN.1 Certificate structure as described in Section 4 of [RFC5280].
CQYDVQQGEwJCRTEPMA0GA1UEChMGR251VExTMSUwIwYDVQQLExxHbnVUTFMgY2Vy dGlmaWNhdGUgYXV0aG9yaXR5MQ8wDQYDVQQIEwZMZXV2ZW4xJTAjBgNVBAMTHEdu dVRMUyBjZXJ0aWZpY2F0ZSBhdXRob3JpdHkwWTATBgcqhkjOPQIBBggqhkjOPQMB BwNCAARS2I0jiuNn14Y2sSALCX3IybqiIJUvxUpj oNfzngvj/Niyv2394BWnW4X
Certificate Example Historically, the label "X509 CERTIFICATE" and also less commonly "X.509 CERTIFICATE" have been used.
Generators conforming to this document MUST generate "CERTIFICATE" labels and MUST NOT generate "X509 CERTIFICATE" or "X.509 CERTIFICATE" labels.
Parsers SHOULD NOT treat "X509 CERTIFICATE" or "X.509 CERTIFICATE" as equivalent to "CERTIFICATE", but a valid exception may be for backwards compatibility (potentially together with a warning).
Many tools are known to emit explanatory text before the BEGIN and after the END lines for PKIX certificates, more than any other type.
If emitted, such text SHOULD be related to the certificate, such as providing a textual representation of key data elements in the certificate.
CN Atlantis Issuer: CN Atlantis Validity: from 7/9/2012 3:10:38 AM UTC to 7/9/2013 3:10:37 AM UTC  BEGIN CERTIFICATE
MIIBmTCCAUegAwIBAgIBKjAJBgUrDgMCHQUAMBMxETAPBgNVBAMTCEF0bGFudGlz MB4XDTEyMDcwOTAzMTAzOFoXDTEzMDcwOTAzMTAzN1owEzERMA8GA1UEAxMIQXRs YW50aXMwXDANBgkqhkiG9w0BAQEFAANLADBIAkEAu BXo miabDIHHx
/BBYwFDAOMAwGCisGAQQB gjcCARUDAgeAMB0GA1UdJQQWMBQGCCsGAQUFBwMCBggrBgEFBQcDAzA1BgNVHQEE LjAsgBA0jOnSSuIHYmnVryHAdywMoRUwEzERMA8GA1UEAxMIQXRsYW50aXOCASow CQYFKw4DAh0FAANBAKi6HRBaNEL5R0n56nvfclQNaXiDT174uf lojzA4lhVInc0 ILwpnZ1izL4MlI9eCSHhVQBHEp2uQdXJB
: Certificate Example with Explanatory Text 5.3.
Although textual encodings of PKIX structures can occur anywhere, many tools are known to offer an option to output this encoding when serializing PKIX structures.
To promote interoperability and to separate DER encodings from textual encodings, the extension ".crt
" SHOULD be used for the textual encoding of a certificate.
Implementations should be aware that in spite of this recommendation, many tools still default to encode certificates in this textual encoding with the extension ".cer".
This section does not disturb the official application/pkix cert registration [RFC2585] in any way (which states that "each '.cer' file contains exactly one certificate, encoded in DER format"), but merely articulates a widespread, de facto alternative.
Textual Encoding of Certificate Revocation Lists Certificate Revocation Lists (CRLs) are encoded using the "X509 CRL" label.
The encoded data MUST be a BER (DER strongly preferred; see Appendix B) encoded ASN.1 CertificateList structure as described in Section 5 of [RFC5280].
IEluYy4xHzAdBgNVBAsTFlZlcmlTaWduIFRydXN0IE5ldHdvcmsxRjBEBgNVBAsT PXd3dy52ZXJpc2lnbi5jb20vcmVwb3NpdG9yeS9SUEEgSW5jb3JwLiBieSBSZWYu LExJQUIuTFREKGMpOTgxHjAcBgNVBAsTFVBlcnNvbmEgTm90IFZhbGlkYXRlZDEm MCQGA1UECxMdRGlnaXRhbCBJRCBDbGFzcyAxIC0gTmV0c2NhcGUxGDAWBgNVBAMU D1NpbW9uIEpvc2Vmc3NvbjEiMCAGCSqGSIb3DQEJARYTc2ltb25Aam9zZWZzc29u Lm9yZxcNMDYxMjI3MDgwMjM0WhcNMDcwMjA3MDgwMjM1WjAjMCECEC4QNwPfRoWd elUNpllhhTgXDTA2MTIyNzA4MDIzNFowCwYJKoZIhvcNAQEFA4GBAD0zX
CRL Example Historically, the label "CRL" has rarely been used.
Today, it is not common and many popular tools do not understand the label.
Therefore, this document standardizes "X509 CRL" in order to promote interoperability and backwards compatibility.
Generators conforming to this document MUST generate "X509 CRL" labels and MUST NOT generate "CRL" labels.
Parsers SHOULD NOT treat "CRL" as equivalent to "X509 CRL".
Textual Encoding of PKCS #10 Certification Request Syntax PKCS
#10 Certification Requests are encoded using the "CERTIFICATE REQUEST" label.
The encoded data MUST be a BER (DER strongly preferred; see Appendix B) encoded ASN.1 CertificationRequest structure as described in [RFC2986].
The label "NEW CERTIFICATE REQUEST" is also in wide use.
Generators conforming to this document MUST generate "CERTIFICATE REQUEST" labels.
Parsers MAY treat "NEW CERTIFICATE REQUEST" as equivalent to "CERTIFICATE REQUEST".
Textual Encoding of PKCS #7 Cryptographic Message Syntax PKCS
#7 Cryptographic Message Syntax structures are encoded using the "PKCS7" label.
The encoded data MUST be a BER encoded ASN.1 ContentInfo structure as described in [RFC2315].
The label "CERTIFICATE CHAIN" has been in use to denote a degenerate PKCS #7 structure that contains only a list of certificates (see Section 9 of [RFC2315]).
Several modern tools do not support this label.
Generators MUST NOT generate the "CERTIFICATE CHAIN" label.
Parsers SHOULD NOT treat "CERTIFICATE CHAIN" as equivalent to "PKCS7".
#7 is an old specification that has long been superseded by CMS [RFC5652].
Implementations SHOULD NOT generate PKCS #7 when CMS is an alternative.
Textual Encoding of Cryptographic Message Syntax Cryptographic Message Syntax structures are encoded using the "CMS" label.
The encoded data MUST be a BER encoded ASN.1 ContentInfo structure as described in [RFC5652].
dvb05OXi5XLPLEtViMwvLVLwSE0sKlFIVHAqSk3MBkkBAJv0Fx0   END CMS  Figure 11:
CMS Example CMS is the IETF successor to PKCS #7.
Section 1.1.1 of [RFC5652] describes the changes since PKCS #7 v1.5.
Implementations SHOULD generate CMS when it is an alternative, promoting interoperability and forwards compatibility.
One Asymmetric Key and the Textual Encoding of PKCS #8
#8 Private Key Information Syntax structures (PrivateKeyInfo), renamed to Asymmetric Key Packages (OneAsymmetricKey), are encoded using the "PRIVATE KEY" label.
The encoded data MUST be a BER (DER preferred; see Appendix B) encoded ASN.1 PrivateKeyInfo structure as described in PKCS #8
[RFC5208], or a OneAsymmetricKey structure as described in [RFC5958].
The two are semantically identical and can be distinguished by version number.
Private Key Info Encrypted PKCS
#8 Private Key Information Syntax structures (EncryptedPrivateKeyInfo), called the same in [RFC5958], are encoded using the "ENCRYPTED PRIVATE KEY" label.
The encoded data MUST be a BER (DER preferred; see Appendix B) encoded ASN.1 EncryptedPrivateKeyInfo structure as described in PKCS #8
PKCS #8 EncryptedPrivateKeyInfo Example 12.
Textual Encoding of Attribute Certificates Attribute certificates are encoded using the "ATTRIBUTE CERTIFICATE" label.
The encoded data MUST be a BER (DER strongly preferred; see Appendix B) encoded ASN.1 AttributeCertificate structure as described in [RFC5755].
ATTRIBUTE CERTIFICATE  MIICKzCCAZQCAQEwgZeggZQwgYmkgYYwgYMxCzAJBgNVBAYTAlVTMREwDwYDVQQI DAhOZXcgWW9yazEUMBIGA1UEBwwLU3RvbnkgQnJvb2sxDzANBgNVBAoMBkNTRTU5 MjE6MDgGA1UEAwwxU2NvdHQgU3RhbGxlci9lbWFpbEFkZHJlc3M9c3N0YWxsZXJA aWMuc3VueXNiLmVkdQIGARWrgUUSoIGMMIGJpIGGMIGDMQswCQYDVQQGEwJVUzER
END ATTRIBUTE CERTIFICATE  Figure 14:
Textual Encoding of Subject Public Key Info Public keys are encoded using the "PUBLIC KEY" label.
The encoded data MUST be a BER (DER preferred; see Appendix B) encoded ASN.1 SubjectPublicKeyInfo structure as described in Section 4.1.2.7 of [RFC5280].
Subject Public Key Info Example 14.
Security Considerations Data in this format often originates from untrusted sources, thus parsers must be prepared to handle unexpected data without causing security vulnerabilities.
Implementers building implementations that rely on canonical representation or the ability to fingerprint a particular data object need to understand that this document does not define canonical encodings.
The first ambiguity is introduced by permitting the text  encoded representation instead of the binary BER or DER encodings, but further ambiguities arise when multiple labels are treated as similar.
Variations of whitespace and non base64
alphabetic characters can create further ambiguities.
Data encoding ambiguities also create opportunities for side channels.
If canonical encodings are desired, the encoded structure must be decoded and processed into a canonical form (namely, DER encoding).
This appendix contains examples for the non recommended label variants described earlier in this document.
As discussed earlier, supporting these is not required and is sometimes discouraged.
Still, they can be useful for interoperability testing and for easy reference.
NnY/OKgBex6MIEAv2AIhAI2GdvfL mGvhyPZE JxRxWChmggb5/9eHdUcmW/jkOH  END X509 CERTIFICATE  Figure 16:
Non standard 'X509' Certificate Example  BEGIN
NnY/OKgBex6MIEAv2AIhAI2GdvfL mGvhyPZE JxRxWChmggb5/9eHdUcmW/jkOH  END X.509 CERTIFICATE
Certificate Example  BEGIN NEW CERTIFICATE REQUEST
END NEW CERTIFICATE REQUEST  Figure 18:
Non standard 'NEW' PKCS #10 Example
hvcNAQkQAw8wJDAUBggqhkiG9w0DBwQI0tCBcU09nxEwDAYIKwYBBQUIAQIFAIAQ OsYGYUFdAH0RNc1p4VbKEAQUM2Xo8PMHBoYdqEcsbTodlCFAZH4   END CERTIFICATE CHAIN
Non standard 'CERTIFICATE CHAIN' Example Appendix B.  DER Expectations
Consult the respective standards for the normative rules.
DER is a restricted profile of BER [X.690]; thus, all DER encodings of data values are BER encodings, but just one of the BER encodings is the DER encoding for a data value.
Canonical encoding matters when performing cryptographic operations; additionally, canonical encoding has certain efficiency advantages for parsers.
There are three principal reasons to encode with DER: 1.
A digital signature is (supposed to be) computed over the DER encoding of the semantic content, so providing anything other than the DER encoding is senseless.
(In practice, an implementer might choose to have an implementation parse and digest the data as is, but this practice amounts to guesswork.)
In practice, cryptographic hashes are computed over the DER encoding for identification.
In practice, the content is small.
DER always encodes data values in definite length form (where the length is stated at the beginning of the encoding); thus, a parser can anticipate memory or resource usage up front.
Figure 20 matches the structures in this document with the particular reasons for DER encoding:
Cryptographic Message Syntax is designed for content of any length; indefinite length encoding enables one pass processing (streaming) when generating the encoding.
Only certain parts   namely, signed and authenticated attributes   need to be DER encoded.
Although not always "small", these encoded structures should not be particularly "large" (e.g., more than 16 kilobytes).
The parser ought to be informed of large things up front in any event; this is yet another reason to DER encode these things in the first place.
Figure 20: Guide for DER Encoding
