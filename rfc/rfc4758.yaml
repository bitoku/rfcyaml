- title: __initial_text__
  contents:
  - "       Cryptographic Token Key Initialization Protocol (CT-KIP)\n           \
    \              Version 1.0 Revision 1\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard of any kind.  Distribution of\
    \ this\n   memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The IETF Trust (2006).\n"
- title: Abstract
  contents:
  - "Abstract\n   This document constitutes Revision 1 of Cryptographic Token Key\n\
    \   Initialization Protocol (CT-KIP) Version 1.0 from RSA Laboratories'\n   One-Time\
    \ Password Specifications (OTPS) series.  The body of this\n   document, except\
    \ for the intellectual property considerations\n   section, is taken from the\
    \ CT-KIP Version 1.0 document, but comments\n   received during the IETF review\
    \ are reflected; hence, the status of a\n   revised version.  As no \"bits-on-the-wire\"\
    \ have changed, the protocol\n   specified herein is compatible with CT-KIP Version\
    \ 1.0.\n   CT-KIP is a client-server protocol for initialization (and\n   configuration)\
    \ of cryptographic tokens.  The protocol requires\n   neither private-key capabilities\
    \ in the cryptographic tokens, nor an\n   established public-key infrastructure.\
    \  Provisioned (or generated)\n   secrets will only be available to the server\
    \ and the cryptographic\n   token itself.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................4\n\
    \      1.1. Scope ......................................................4\n  \
    \    1.2. Background .................................................4\n    \
    \  1.3. Document Organization ......................................5\n   2. Acronyms\
    \ and Notation ...........................................5\n      2.1. Acronyms\
    \ ...................................................5\n      2.2. Notation ...................................................5\n\
    \   3. CT-KIP ..........................................................6\n  \
    \    3.1. Overview ...................................................6\n    \
    \  3.2. Entities ...................................................7\n      3.3.\
    \ Principles of Operation ....................................7\n      3.4. The\
    \ CT-KIP One-Way Pseudorandom Function, CT-KIP-PRF ......10\n           3.4.1.\
    \ Introduction .......................................10\n           3.4.2. Declaration\
    \ ........................................11\n      3.5. Generation of Cryptographic\
    \ Keys for Tokens ...............11\n      3.6. Encryption of Pseudorandom Nonces\
    \ Sent from the\n           CT-KIP Client .............................................12\n\
    \      3.7. CT-KIP Schema Basics ......................................13\n  \
    \         3.7.1. Introduction .......................................13\n    \
    \       3.7.2. General XML Schema Requirements ....................13\n      \
    \     3.7.3. The AbstractRequestType Type .......................13\n        \
    \   3.7.4. The AbstractResponseType type ......................14\n          \
    \ 3.7.5. The StatusCode Type ................................14\n           3.7.6.\
    \ The IdentifierType Type ............................16\n           3.7.7. The\
    \ NonceType Type .................................16\n           3.7.8. The ExtensionsType\
    \ and the\n                  AbstractExtensionType Types ........................17\n\
    \      3.8. CT-KIP Messages ...........................................17\n  \
    \         3.8.1. Introduction .......................................17\n    \
    \       3.8.2. CT-KIP Initialization ..............................17\n      \
    \     3.8.3. The CT-KIP Client's Initial PDU ....................18\n        \
    \   3.8.4. The CT-KIP server's initial PDU ....................20\n          \
    \ 3.8.5. The CT-KIP Client's Second PDU .....................23\n           3.8.6.\
    \ The CT-KIP Server's Final PDU ......................24\n      3.9. Protocol\
    \ Extensions .......................................27\n           3.9.1. The\
    \ ClientInfoType Type ............................27\n           3.9.2. The ServerInfoType\
    \ Type ............................28\n           3.9.3. The OTPKeyConfigurationDataType\
    \ Type ...............28\n   4. Protocol Bindings ..............................................29\n\
    \      4.1. General Requirement .......................................29\n  \
    \    4.2. HTTP/1.1 binding for CT-KIP ...............................29\n    \
    \       4.2.1. Introduction .......................................29\n      \
    \     4.2.2. Identification of CT-KIP Messages ..................29\n        \
    \   4.2.3. HTTP Headers .......................................29\n          \
    \ 4.2.4. HTTP Operations ....................................30\n           4.2.5.\
    \ HTTP Status Codes ..................................30\n           4.2.6. HTTP\
    \ Authentication ................................31\n           4.2.7. Initialization\
    \ of CT-KIP ...........................31\n           4.2.8. Example Messages\
    \ ...................................31\n   5. Security considerations ........................................32\n\
    \      5.1. General ...................................................32\n  \
    \    5.2. Active Attacks ............................................32\n    \
    \       5.2.1. Introduction .......................................32\n      \
    \     5.2.2. Message Modifications ..............................32\n        \
    \   5.2.3. Message Deletion ...................................34\n          \
    \ 5.2.4. Message Insertion ..................................34\n           5.2.5.\
    \ Message Replay .....................................34\n           5.2.6. Message\
    \ Reordering .................................35\n           5.2.7. Man in the\
    \ Middle ..................................35\n      5.3. Passive Attacks ...........................................35\n\
    \      5.4. Cryptographic Attacks .....................................35\n  \
    \    5.5. Attacks on the Interaction between CT-KIP and User\n           Authentication\
    \ ............................................36\n   6. Intellectual Property\
    \ Considerations ...........................36\n   7. References .....................................................37\n\
    \      7.1. Normative References ......................................37\n  \
    \    7.2. Informative References ....................................37\n   Appendix\
    \ A. CT-KIP Schema .........................................39\n   Appendix B.\
    \ Examples of CT-KIP Messages ...........................46\n      B.1. Introduction\
    \ ..............................................46\n      B.2. Example of a CT-KIP\
    \ Initialization (Trigger) Message ......46\n      B.3. Example of a <ClientHello>\
    \ Message ........................46\n      B.4. Example of a <ServerHello> Message\
    \ ........................47\n      B.5. Example of a <ClientNonce> Message ........................47\n\
    \      B.6. Example of a <ServerFinished> Message .....................48\n  \
    \ Appendix C. Integration with PKCS #11 .............................48\n   Appendix\
    \ D. Example CT-KIP-PRF Realizations .......................48\n      D.1. Introduction\
    \ ..............................................48\n      D.2. CT-KIP-PRF-AES\
    \ ............................................48\n           D.2.1. Identification\
    \ .....................................48\n           D.2.2. Definition .........................................49\n\
    \           D.2.3. Example ............................................50\n  \
    \    D.3. CT-KIP-PRF-SHA256 .........................................50\n    \
    \       D.3.1. Identification .....................................50\n      \
    \     D.3.2. Definition .........................................51\n        \
    \   D.3.3. Example ............................................52\n   Appendix\
    \ E. About OTPS ............................................53\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   Note: This document is Revision 1 of CT-KIP Version 1.0\
    \ [12] from RSA\n   Laboratories' OTPS series.\n"
- title: 1.1.  Scope
  contents:
  - "1.1.  Scope\n   This document describes a client-server protocol for initialization\n\
    \   (and configuration) of cryptographic tokens.  The protocol requires\n   neither\
    \ private-key capabilities in the cryptographic tokens, nor an\n   established\
    \ public-key infrastructure.\n   The objectives of this protocol are:\n   o  To\
    \ provide a secure method of initializing cryptographic tokens\n      with secret\
    \ keys without exposing generated, secret material to\n      any other entities\
    \ than the server and the cryptographic token\n      itself,\n   o  To avoid,\
    \ as much as possible, any impact on existing\n      cryptographic token manufacturing\
    \ processes,\n   o  To provide a solution that is easy to administer and scales\
    \ well.\n   The mechanism is intended for general use within computer and\n  \
    \ communications systems employing connected cryptographic tokens (or\n   software\
    \ emulations thereof).\n"
- title: 1.2.  Background
  contents:
  - "1.2.  Background\n   A cryptographic token may be a handheld hardware device,\
    \ a hardware\n   device connected to a personal computer through an electronic\n\
    \   interface such as USB, or a software module resident on a personal\n   computer,\
    \ which offers cryptographic functionality that may be used,\n   e.g., to authenticate\
    \ a user towards some service.  Increasingly,\n   these tokens work in a connected\
    \ fashion, enabling their programmatic\n   initialization as well as programmatic\
    \ retrieval of their output\n   values.  This document intends to meet the need\
    \ for an open and\n   interoperable mechanism to programmatically initialize and\
    \ configure\n   connected cryptographic tokens.  A companion document entitled\
    \ \"A\n   PKCS #11 Mechanism for the Cryptographic Token Key Initialization\n\
    \   Protocol\" [2] describes an application-programming interface suitable\n \
    \  for use with this mechanism.\n"
- title: 1.3.  Document Organization
  contents:
  - "1.3.  Document Organization\n   The organization of this document is as follows:\n\
    \   o  Section 1 is an introduction.\n   o  Section 2 defines some notation used\
    \ in this document.\n   o  Section 3 defines the protocol mechanism in detail.\n\
    \   o  Section 4 defines a binding of the protocol to transports.\n   o  Section\
    \ 5 provides security considerations.\n   o  Appendix A defines the XML schema\
    \ for the protocol mechanism,\n      Appendix B gives example messages, and Appendix\
    \ C discusses\n      integration with PKCS #11 [3].\n   o  Appendix D provides\
    \ example realizations of an abstract\n      pseudorandom function defined in\
    \ Section 3.\n   o  Appendix E provides general information about the One-Time\n\
    \      Password Specifications.\n"
- title: 2.  Acronyms and Notation
  contents:
  - '2.  Acronyms and Notation

    '
- title: 2.1.  Acronyms
  contents:
  - "2.1.  Acronyms\n   MAC      Message Authentication Code\n   PDU      Protocol\
    \ Data Unit\n   PRF      Pseudo-Random Function\n   CT-KIP   Cryptographic Token\
    \ Key Initialization Protocol (the\n            protocol mechanism described herein)\n"
- title: 2.2.  Notation
  contents:
  - "2.2.  Notation\n   ||       String concatenation\n   [x]      Optional element\
    \ x\n   A ^ B    Exclusive-or operation on strings A and B (A and B of equal\n\
    \            length)\n   K_AUTH   Secret key used for authentication purposes\n\
    \   K_TOKEN  Secret key used for token computations, generated in CT-KIP\n   K_SERVER\
    \ Public key of CT-KIP server\n   K_SHARED Secret key shared between the cryptographic\
    \ token and the\n            CT-KIP server\n   K        Key used to encrypt R_C\
    \ (either K_SERVER or K_SHARED)\n   R        Pseudorandom value chosen by the\
    \ cryptographic token and\n            used for MAC computations\n   R_C     \
    \ Pseudorandom value chosen by the cryptographic token\n   R_S      Pseudorandom\
    \ value chosen by the CT-KIP server\n   The following typographical convention\
    \ is used in the body of the\n   text: <XMLElement>.\n"
- title: 3.  CT-KIP
  contents:
  - '3.  CT-KIP

    '
- title: 3.1.  Overview
  contents:
  - "3.1.  Overview\n   The CT-KIP is a client-server protocol for the secure initialization\n\
    \   of cryptographic tokens.  The protocol is meant to provide high\n   assurance\
    \ for both the server and the client (cryptographic token)\n   that generated\
    \ keys have been correctly and randomly generated and\n   not exposed to other\
    \ entities.  The protocol does not require the\n   existence of a public-key infrastructure.\n\
    \   +---------------+                            +---------------+\n   |     \
    \          |                            |               |\n   | CT-KIP client\
    \ |                            | CT-KIP server |\n   |               |       \
    \                     |               |\n   +---------------+                \
    \            +---------------+\n           |                                 \
    \           |\n           |        [ <---- CT-KIP trigger ---- ]       |\n   \
    \        |                                            |\n           |        -------\
    \ Client Hello ------->       |\n           |                                \
    \            |\n           |        <------ Server Hello --------       |\n  \
    \         |                                            |\n           |       \
    \ ------- Client Nonce ------->       |\n           |                        \
    \                    |\n           |        <----- Server Finished ------    \
    \   |\n   Figure 1: The 4-pass CT-KIP protocol (with optional preceding\n   trigger)\n"
- title: 3.2.  Entities
  contents:
  - "3.2.  Entities\n   In principle, the protocol involves a CT-KIP client and a\
    \ CT-KIP\n   server.\n   It is assumed that a desktop/laptop or a wireless device\
    \ (e.g., a\n   mobile phone or a PDA) will host an application communicating with\n\
    \   the CT-KIP server as well as the cryptographic token, and\n   collectively,\
    \ the cryptographic token and the communicating\n   application form the CT-KIP\
    \ client.  When there is a need to point\n   out if an action is to be performed\
    \ by the communicating application\n   or by the token the text will make this\
    \ explicit.\n   The manner in which the communicating application will transfer\
    \ CT-\n   KIP protocol elements to and from the cryptographic token is\n   transparent\
    \ to the CT-KIP server.  One method for this transfer is\n   described in [2].\n"
- title: 3.3.  Principles of Operation
  contents:
  - "3.3.  Principles of Operation\n   To initiate a CT-KIP session, a user may use\
    \ a browser to connect to\n   a web server running on some host.  The user may\
    \ then identify (and\n   authenticate) herself (through some means that essentially\
    \ are out of\n   scope for this document) and possibly indicate how the CT-KIP\
    \ client\n   shall contact the CT-KIP server.  There are also other alternatives\n\
    \   for CT-KIP session initiation, such as the CT-KIP client being pre-\n   configured\
    \ to contact a certain CT-KIP server, or the user being\n   informed out-of-band\
    \ about the location of the CT-KIP server.  In any\n   event, once the location\
    \ of the CT-KIP server is known, the CT-KIP\n   client and the CT-KIP server engage\
    \ in a 4-pass protocol in which:\n   a.  The CT-KIP client provides information\
    \ to the CT-KIP server about\n       the cryptographic token's identity, supported\
    \ CT-KIP versions,\n       cryptographic algorithms supported by the token and\
    \ for which\n       keys may be generated using this protocol, and encryption\
    \ and MAC\n       algorithms supported by the cryptographic token for the purposes\n\
    \       of this protocol.\n   b.  Based on this information, the CT-KIP server\
    \ provides a random\n       nonce, R_S, to the CT-KIP client, along with information\
    \ about\n       the type of key to generate, the encryption algorithm chosen to\n\
    \       protect sensitive data sent in the protocol.  In addition, it\n      \
    \ provides either information about a shared secret key to use for\n       encrypting\
    \ the cryptographic token's random nonce (see below), or\n       its own public\
    \ key.  The length of the nonce R_S may depend on\n       the selected key type.\n\
    \   c.  The cryptographic token generates a random nonce R_C and encrypts\n  \
    \     it using the selected encryption algorithm and with a key K that\n     \
    \  is either the CT-KIP server's public key K_SERVER, or a shared\n       secret\
    \ key K_SHARED as indicated by the CT-KIP server.  The\n       length of the nonce\
    \ R_C may depend on the selected key type.  The\n       CT-KIP client then sends\
    \ the encrypted random nonce to the CT-KIP\n       server.  The token also calculates\
    \ a cryptographic key K_TOKEN of\n       the selected type from the combination\
    \ of the two random nonces\n       R_S and R_C, the encryption key K, and possibly\
    \ some other data,\n       using the CT-KIP-PRF function defined herein.\n   d.\
    \  The CT-KIP server decrypts R_C, calculates K_TOKEN from the\n       combination\
    \ of the two random nonces R_S and R_C, the encryption\n       key K, and possibly\
    \ some other data, using the CT-KIP-PRF\n       function defined herein.  The\
    \ server then associates K_TOKEN with\n       the cryptographic token in a server-side\
    \ data store.  The intent\n       is that the data store later on will be used\
    \ by some service that\n       needs to verify or decrypt data produced by the\
    \ cryptographic\n       token and the key.\n   e.  Once the association has been\
    \ made, the CT-KIP server sends a\n       confirmation message to the CT-KIP client.\
    \  The confirmation\n       message includes an identifier for the generated key\
    \ and may also\n       contain additional configuration information, e.g., the\
    \ identity\n       of the CT-KIP server.\n   f.  Upon receipt of the CT-KIP server's\
    \ confirmation message, the\n       cryptographic token associates the provided\
    \ key identifier with\n       the generated key K_TOKEN, and stores the provided\
    \ configuration\n       data, if any.\n   Note: Conceptually, although R_C is\
    \ one pseudorandom string, it may\n   be viewed as consisting of two components,\
    \ R_C1 and R_C2, where R_C1\n   is generated during the protocol run, and R_C2\
    \ can be generated at\n   the cryptographic token manufacturing time and stored\
    \ in the\n   cryptographic token.  In that case, the latter string, R_C2, should\n\
    \   be unique for each cryptographic token for a given manufacturer.\n   +----------------------+\
    \    +-------+     +----------------------+\n   |    +------------+    |    |\
    \       |     |                      |\n   |    | Server key |    |    |     \
    \  |     |                      |\n   | +<-|  Public    |------>------------->-------------+---------+\
    \ |\n   | |  |  Private   |    |    |       |     |          |         | |\n \
    \  | |  +------------+    |    |       |     |          |         | |\n   | |\
    \        |           |    |       |     |          |         | |\n   | V     \
    \   V           |    |       |     |          V         V |\n   | |   +---------+\
    \      |    |       |     |        +---------+ | |\n   | |   | Decrypt |<-------<-------------<-----------|\
    \ Encrypt | | |\n   | |   +---------+      |    |       |     |        +---------+\
    \ | |\n   | |      |  +--------+ |    |       |     |            ^       | |\n\
    \   | |      |  | Server | |    |       |     |            |       | |\n   | |\
    \      |  | Random |--->------------->------+  +----------+  | |\n   | |     \
    \ |  +--------+ |    |       |     |   |  | Client   |  | |\n   | |      |   \
    \   |      |    |       |     |   |  | Random   |  | |\n   | |      |      | \
    \     |    |       |     |   |  +----------+  | |\n   | |      |      |      |\
    \    |       |     |   |        |       | |\n   | |      V      V      |    |\
    \       |     |   V        V       | |\n   | |   +------------+   |    |     \
    \  |     | +------------+     | |\n   | +-->| CT-KIP PRF |   |    |       |  \
    \   | | CT-KIP PRF |<----+ |\n   |     +------------+   |    |       |     | +------------+\
    \       |\n   |           |          |    |       |     |       |            \
    \  |\n   |           V          |    |       |     |       V              |\n\
    \   |       +-------+      |    |       |     |   +-------+          |\n   | \
    \      |  Key  |      |    |       |     |   |  Key  |          |\n   |      \
    \ +-------+      |    |       |     |   +-------+          |\n   |       +-------+\
    \      |    |       |     |   +-------+          |\n   |       |Key Id |-------->------------->------|Key\
    \ Id |          |\n   |       +-------+      |    |       |     |   +-------+\
    \          |\n   +----------------------+    +-------+     +----------------------+\n\
    \        CT-KIP Server        CT-KIP Client     CT-KIP Client (Token)\n      \
    \                         (PC Host)\n   Figure 2: Principal data flow for CT-KIP\
    \ key generation - using\n   public server key\n   The inclusion of the two random\
    \ nonces R_S and R_C in the key\n   generation provides assurance to both sides\
    \ (the token and the CT-KIP\n   server) that they have contributed to the key's\
    \ randomness and that\n   the key is unique.  The inclusion of the encryption\
    \ key K ensures\n   that no man-in-the-middle may be present, or else the cryptographic\n\
    \   token will end up with a key different from the one stored by the\n   legitimate\
    \ CT-KIP server.\n   Note: A man-in-the middle (in the form of corrupt client\
    \ software or\n   a mistakenly contacted server) may present his own public key\
    \ to the\n   token.  This will enable the attacker to learn the client's version\n\
    \   of K_TOKEN.  However, the attacker is not able to persuade the\n   legitimate\
    \ server to derive the same value for K_TOKEN, since K_TOKEN\n   is a function\
    \ of the public key involved, and the attacker's public\n   key must be different\
    \ than the correct server's (or else the attacker\n   would not be able to decrypt\
    \ the information received from the\n   client).  Therefore, once the attacker\
    \ is no longer \"in the middle\",\n   the client and server will detect that they\
    \ are \"out of synch\" when\n   they try to use their keys.  Therefore, in the\
    \ case of encrypting R_C\n   with K_SERVER, it is important to verify that K_SERVER\
    \ really is the\n   legitimate server's key.  One way to do this is to independently\n\
    \   validate a newly generated K_TOKEN against some validation service at\n  \
    \ the server (e.g., by using a connection independent from the one used\n   for\
    \ the key generation).\n   The CT-KIP server may couple an initial user authentication\
    \ to the\n   CT-KIP execution in several ways to ensure that a generated K_TOKEN\n\
    \   ends up associated with the correct token and user.  One way is to\n   provide\
    \ a one-time value to the user or CT-KIP client after\n   successful user authentication\
    \ and require this value to be used when\n   contacting the CT-KIP service (in\
    \ effect coupling the user\n   authentication with the subsequent CT-KIP protocol\
    \ run).  This value\n   could, for example, be placed in a <TriggerNonce> element\
    \ of the CT-\n   KIP initialization trigger (if triggers are used; see Section\
    \ 4.2.7).\n   Another way is for the user to provide a token identifier which\
    \ will\n   later be used in the CT-KIP protocol to the server during the\n   authentication\
    \ phase.  The server may then include this token\n   identifier in the CT-KIP\
    \ initialization trigger.  It is also\n   legitimate for a CT-KIP client to initiate\
    \ a CT-KIP protocol run\n   without having received an initialization message\
    \ from a server, but\n   in this case any provided token identifier shall not\
    \ be accepted by\n   the server unless the server has access to a unique token\
    \ key for the\n   identified token and that key will be used in the protocol.\
    \  Whatever\n   the method, the CT-KIP server must ensure that a generated key\
    \ is\n   associated with the correct token and, if applicable, the correct\n \
    \  user.  For a further discussion of this and threats related to man-\n   in-the-middle\
    \ attacks in this context, see Section 5.5.\n"
- title: 3.4.  The CT-KIP One-Way Pseudorandom Function, CT-KIP-PRF
  contents:
  - '3.4.  The CT-KIP One-Way Pseudorandom Function, CT-KIP-PRF

    '
- title: 3.4.1.  Introduction
  contents:
  - "3.4.1.  Introduction\n   The general requirements on CT-KIP-PRF are the same\
    \ as on keyed hash\n   functions: It shall take an arbitrary length input, and\
    \ be one-way\n   and collision-free (for a definition of these terms, see, e.g.,\
    \ [4]).\n   Further, the CT-KIP-PRF function shall be capable of generating a\n\
    \   variable-length output, and its output shall be unpredictable even if\n  \
    \ other outputs for the same key are known.\n   It is assumed that any realization\
    \ of CT-KIP-PRF takes three input\n   parameters: A secret key k, some combination\
    \ of variable data, and\n   the desired length of the output.  Examples of the\
    \ variable data\n   include, but are not limited to, a current token counter value,\
    \ the\n   current token time, and a challenge.  The combination of variable\n\
    \   data can, without loss of generalization, be considered as a salt\n   value\
    \ (see PKCS #5 Version 2.0 [5], Section 4), and this\n   characterization of CT-KIP-PRF\
    \ should fit all actual PRF algorithms\n   implemented by tokens.  From the point\
    \ of view of this specification,\n   CT-KIP-PRF is a \"black-box\" function that,\
    \ given the inputs,\n   generates a pseudorandom value.\n   Separate specifications\
    \ may define the implementation of CT-KIP-PRF\n   for various types of cryptographic\
    \ tokens.  Appendix D contains two\n   example realizations of CT-KIP-PRF.\n"
- title: 3.4.2.  Declaration
  contents:
  - "3.4.2.  Declaration\n   CT-KIP-PRF (k, s, dsLen)\n   Input:\n   k     secret\
    \ key in octet string format\n   s     octet string of varying length consisting\
    \ of variable data\n         distinguishing the particular string being derived\n\
    \   dsLen desired length of the output\n   Output:\n   DS    pseudorandom string,\
    \ dsLen-octets long\n   For the purposes of this document, the secret key k shall\
    \ be 16\n   octets long.\n"
- title: 3.5.  Generation of Cryptographic Keys for Tokens
  contents:
  - "3.5.  Generation of Cryptographic Keys for Tokens\n   In CT-KIP, keys are generated\
    \ using the CT-KIP-PRF function, a secret\n   random value R_C chosen by the CT-KIP\
    \ client, a random value R_S\n   chosen by the CT-KIP server, and the key k used\
    \ to encrypt R_C.  The\n   input parameter s of CT-KIP-PRF is set to the concatenation\
    \ of the\n   (ASCII) string \"Key generation\", k, and R_S, and the input parameter\n\
    \   dsLen is set to the desired length of the key, K_TOKEN (the length of\n  \
    \ K_TOKEN is given by the key's type):\n   dsLen = (desired length of K_TOKEN)\n\
    \   K_TOKEN = CT-KIP-PRF (R_C, \"Key generation\" || k || R_S, dsLen)\n   When\
    \ computing K_TOKEN above, the output of CT-KIP-PRF may be subject\n   to an algorithm-dependent\
    \ transform before being adopted as a key of\n   the selected type.  One example\
    \ of this is the need for parity in DES\n   keys.\n"
- title: 3.6.  Encryption of Pseudorandom Nonces Sent from the CT-KIP Client
  contents:
  - "3.6.  Encryption of Pseudorandom Nonces Sent from the CT-KIP Client\n   CT-KIP\
    \ client random nonce(s) are either encrypted with the public\n   key provided\
    \ by the CT-KIP server or by a shared secret key.  For\n   example, in the case\
    \ of a public RSA key, an RSA encryption scheme\n   from PKCS #1 [6] may be used.\n\
    \   In the case of a shared secret key, to avoid dependence on other\n   algorithms,\
    \ the CT-KIP client may use the CT-KIP-PRF function\n   described herein with\
    \ the shared secret key K_SHARED as input\n   parameter k (in this case, K_SHARED\
    \ should be used solely for this\n   purpose), the concatenation of the (ASCII)\
    \ string \"Encryption\" and\n   the server's nonce R_S as input parameter s, and\
    \ dsLen set to the\n   length of R_C:\n   dsLen = len(R_C)\n   DS = CT-KIP-PRF(K_SHARED,\
    \ \"Encryption\" || R_S, dsLen)\n   This will produce a pseudorandom string DS\
    \ of length equal to R_C.\n   Encryption of R_C may then be achieved by XOR-ing\
    \ DS with R_C:\n   Enc-R_C = DS ^ R_C\n   The CT-KIP server will then perform\
    \ the reverse operation to extract\n   R_C from Enc-R_C.\n   Note: It may appear\
    \ that an attacker, who learns a previous value of\n   R_C, may be able to replay\
    \ the corresponding R_S and, hence, learn a\n   new R_C as well.  However, this\
    \ attack is mitigated by the\n   requirement for a server to show knowledge of\
    \ K_AUTH (see below) in\n   order to successfully complete a key re-generation.\n"
- title: 3.7.  CT-KIP Schema Basics
  contents:
  - '3.7.  CT-KIP Schema Basics

    '
- title: 3.7.1.  Introduction
  contents:
  - "3.7.1.  Introduction\n   Core parts of the XML schema for CT-KIP, found in Appendix\
    \ A, are\n   explained in this section.  Specific protocol message elements are\n\
    \   defined in Section 3.8.  Examples can be found in Appendix B.\n   The XML\
    \ format for CT-KIP messages have been designed to be\n   extensible.  However,\
    \ it is possible that the use of extensions will\n   harm interoperability; therefore,\
    \ any use of extensions should be\n   carefully considered.  For example, if a\
    \ particular implementation\n   relies on the presence of a proprietary extension,\
    \ then it may not be\n   able to interoperate with independent implementations\
    \ that have no\n   knowledge of this extension.\n   XML types defined in this\
    \ sub-section are not CT-KIP messages; rather\n   they provide building blocks\
    \ that are used by CT-KIP messages.\n"
- title: 3.7.2.  General XML Schema Requirements
  contents:
  - "3.7.2.  General XML Schema Requirements\n   Some CT-KIP elements rely on the\
    \ parties being able to compare\n   received values with stored values.  Unless\
    \ otherwise noted, all\n   elements in this document that have the XML Schema\
    \ \"xs:string\" type,\n   or a type derived from it, must be compared using an\
    \ exact binary\n   comparison.  In particular, CT-KIP implementations must not\
    \ depend on\n   case-insensitive string comparisons, normalization or trimming\
    \ of\n   white space, or conversion of locale-specific formats such as\n   numbers.\n\
    \   Implementations that compare values that are represented using\n   different\
    \ character encodings must use a comparison method that\n   returns the same result\
    \ as converting both values to the Unicode\n   character encoding, Normalization\
    \ Form C [1], and then performing an\n   exact binary comparison.\n   No collation\
    \ or sorting order for attributes or element values is\n   defined.  Therefore,\
    \ CT-KIP implementations must not depend on\n   specific sorting orders for values.\n"
- title: 3.7.3.  The AbstractRequestType Type
  contents:
  - "3.7.3.  The AbstractRequestType Type\n   All CT-KIP requests are defined as extensions\
    \ to the abstract\n   AbstractRequestType type.  The elements of the AbstractRequestType,\n\
    \   therefore, apply to all CT-KIP requests.  All CT-KIP requests must\n   contain\
    \ a Version attribute.  For this version of this specification,\n   Version shall\
    \ be set to \"1.0\".\n   <xs:complexType name=\"AbstractRequestType\" abstract=\"\
    true\">\n     <xs:attribute name=\"Version\" type=\"VersionType\"\n      use=\"\
    required\"/>\n   </xs:complexType>\n"
- title: 3.7.4.  The AbstractResponseType type
  contents:
  - "3.7.4.  The AbstractResponseType type\n   All CT-KIP responses are defined as\
    \ extensions to the abstract\n   AbstractResponseType type.  The elements of the\
    \ AbstractResponseType,\n   therefore, apply to all CT-KIP responses.  All CT-KIP\
    \ responses\n   contain a Version attribute indicating the version that was used.\
    \  A\n   Status attribute, which indicates whether the preceding request was\n\
    \   successful or not must also be present.  Finally, all responses may\n   contain\
    \ a SessionID attribute identifying the particular CT-KIP\n   session.  The SessionID\
    \ attribute needs only be present if more than\n   one roundtrip is required for\
    \ a successful protocol run (this is the\n   case with the protocol version described\
    \ herein).\n   <xs:complexType name=\"AbstractResponseType\" abstract=\"true\"\
    >\n     <xs:attribute name=\"Version\" type=\"VersionType\" use=\"required\"/>\n\
    \     <xs:attribute name=\"SessionID\" type=\"IdentifierType\"/>\n     <xs:attribute\
    \ name=\"Status\" type=\"StatusCode\" use=\"required\"/>\n   </xs:complexType>\n"
- title: 3.7.5.  The StatusCode Type
  contents:
  - "3.7.5.  The StatusCode Type\n   The StatusCode type enumerates all possible return\
    \ codes:\n   <xs:simpleType name=\"StatusCode\">\n     <xs:restriction base=\"\
    xs:string\">\n       <xs:enumeration value=\"Continue\"/>\n       <xs:enumeration\
    \ value=\"Success\"/>\n       <xs:enumeration value=\"Abort\"/>\n       <xs:enumeration\
    \ value=\"AccessDenied\"/>\n       <xs:enumeration value=\"MalformedRequest\"\
    />\n       <xs:enumeration value=\"UnknownRequest\"/>\n       <xs:enumeration\
    \ value=\"UnknownCriticalExtension\"/>\n       <xs:enumeration value=\"UnsupportedVersion\"\
    />\n       <xs:enumeration value=\"NoSupportedKeyTypes\"/>\n       <xs:enumeration\
    \ value=\"NoSupportedEncryptionAlgorithms\"/>\n       <xs:enumeration value=\"\
    NoSupportedMACAlgorithms\"/>\n       <xs:enumeration value=\"InitializationFailed\"\
    />\n     </xs:restriction>\n   </xs:simpleType>\n   Upon transmission or receipt\
    \ of a message for which the Status\n   attribute's value is not \"Success\" or\
    \ \"Continue\", the default\n   behavior, unless explicitly stated otherwise below,\
    \ is that both the\n   CT-KIP server and the CT-KIP client shall immediately terminate\
    \ the\n   CT-KIP session.  CT-KIP servers and CT-KIP clients must delete any\n\
    \   secret values generated as a result of failed runs of the CT-KIP\n   protocol.\
    \  Session identifiers may be retained from successful or\n   failed protocol\
    \ runs for replay detection purposes, but such retained\n   identifiers shall\
    \ not be reused for subsequent runs of the protocol.\n   When possible, the CT-KIP\
    \ client should present an appropriate error\n   message to the user.\n   These\
    \ status codes are valid in all CT-KIP-Response messages unless\n   explicitly\
    \ stated otherwise.\n   o  \"Continue\" indicates that the CT-KIP server is ready\
    \ for a\n      subsequent request from the CT-KIP client.  It cannot be sent in\n\
    \      the server's final message.\n   o  \"Success\" indicates successful completion\
    \ of the CT-KIP session.\n      It can only be sent in the server's final message.\n\
    \   o  \"Abort\" indicates that the CT-KIP server rejected the CT-KIP\n      client's\
    \ request for unspecified reasons.\n   o  \"AccessDenied\" indicates that the\
    \ CT-KIP client is not authorized\n      to contact this CT-KIP server.\n   o\
    \  \"MalformedRequest\" indicates that the CT-KIP server failed to\n      parse\
    \ the CT-KIP client's request.\n   o  \"UnknownRequest\" indicates that the CT-KIP\
    \ client made a request\n      that is unknown to the CT-KIP server.\n   o  \"\
    UnknownCriticalExtension\" indicates that a critical CT-KIP\n      extension (see\
    \ below) used by the CT-KIP client was not supported\n      or recognized by the\
    \ CT-KIP server.\n   o  \"UnsupportedVersion\" indicates that the CT-KIP client\
    \ used a CT-\n      KIP protocol version not supported by the CT-KIP server. \
    \ This\n      error is only valid in the CT-KIP server's first response message.\n\
    \   o  \"NoSupportedKeyTypes\" indicates that the CT-KIP client only\n      suggested\
    \ key types that are not supported by the CT-KIP server.\n      This error is\
    \ only valid in the CT-KIP server's first response\n      message.  Note that\
    \ the error will only occur if the CT-KIP server\n      does not support any of\
    \ the CT-KIP client's suggested key types.\n   o  \"NoSupportedEncryptionAlgorithms\"\
    \ indicates that the CT-KIP client\n      only suggested encryption algorithms\
    \ that are not supported by the\n      CT-KIP server.  This error is only valid\
    \ in the CT-KIP server's\n      first response message.  Note that the error will\
    \ only occur if\n      the CT-KIP server does not support any of the CT-KIP client's\n\
    \      suggested encryption algorithms.\n   o  \"NoSupportedMACAlgorithms\" indicates\
    \ that the CT-KIP client only\n      suggested MAC algorithms that are not supported\
    \ by the CT-KIP\n      server.  This error is only valid in the CT-KIP server's\
    \ first\n      response message.  Note that the error will only occur if the CT-\n\
    \      KIP server does not support any of the CT-KIP client's suggested\n    \
    \  MAC algorithms.\n   o  \"InitializationFailed\" indicates that the CT-KIP server\
    \ could not\n      generate a valid key given the provided data.  When this status\n\
    \      code is received, the CT-KIP client should try to restart CT-KIP,\n   \
    \   as it is possible that a new run will succeed.\n"
- title: 3.7.6.  The IdentifierType Type
  contents:
  - "3.7.6.  The IdentifierType Type\n   The IdentifierType type is used to identify\
    \ various CT-KIP elements,\n   such as sessions, users, and services.  Identifiers\
    \ must not be\n   longer than 128 octets.\n   <xs:simpleType name=\"IdentifierType\"\
    >\n     <xs:restriction base=\"xs:string\">\n       <xs:maxLength value=\"128\"\
    />\n     </xs:restriction>\n   </xs:simpleType>\n"
- title: 3.7.7.  The NonceType Type
  contents:
  - "3.7.7.  The NonceType Type\n   The NonceType type is used to carry pseudorandom\
    \ values in CT-KIP\n   messages.  A nonce, as the name implies, must be used only\
    \ once.  For\n   each CT-KIP message that requires a nonce element to be sent,\
    \ a fresh\n   nonce shall be generated each time.  Nonce values must be at least\
    \ 16\n   octets long.\n   <xs:simpleType name=\"NonceType\">\n     <xs:restriction\
    \ base=\"xs:base64Binary\">\n       <xs:minLength value=\"16\"/>\n     </xs:restriction>\n\
    \   </xs:simpleType>\n"
- title: 3.7.8.  The ExtensionsType and the AbstractExtensionType Types
  contents:
  - "3.7.8.  The ExtensionsType and the AbstractExtensionType Types\n   The ExtensionsType\
    \ type is a list of type-value pairs that define\n   optional CT-KIP features\
    \ supported by a CT-KIP client or server.\n   Extensions may be sent with any\
    \ CT-KIP message.  Please see the\n   description of individual CT-KIP messages\
    \ in Section 3.8 of this\n   document for applicable extensions.  Unless an extension\
    \ is marked as\n   Critical, a receiving party need not be able to interpret it.\
    \  A\n   receiving party is always free to disregard any (non-critical)\n   extensions.\n\
    \   <xs:complexType name=\"AbstractExtensionsType\">\n     <xs:sequence maxOccurs=\"\
    unbounded\">\n       <xs:element name=\"Extension\" type=\"AbstractExtensionType\"\
    />\n     </xs:sequence>\n   </xs:complexType>\n   <xs:complexType name=\"AbstractExtensionType\"\
    \ abstract=\"true\">\n     <xs:attribute name=\"Critical\" type=\"xs:boolean\"\
    />\n   </xs:complexType>\n"
- title: 3.8.  CT-KIP Messages
  contents:
  - '3.8.  CT-KIP Messages

    '
- title: 3.8.1.  Introduction
  contents:
  - "3.8.1.  Introduction\n   In this section, CT-KIP messages, including their parameters,\n\
    \   encodings and semantics are defined.\n"
- title: 3.8.2.  CT-KIP Initialization
  contents:
  - "3.8.2.  CT-KIP Initialization\n   The CT-KIP server may initialize the CT-KIP\
    \ protocol by sending a\n   <CT-KIPTrigger> message.  This message may, e.g.,\
    \ be sent in response\n   to a user requesting token initialization in a browsing\
    \ session.\n   <xs:complexType name=\"InitializationTriggerType\">\n     <xs:sequence>\n\
    \       <xs:element name=\"TokenID\" type=\"xs:base64Binary\" minOccurs=\"0\"\
    />\n       <xs:element name=\"KeyID\" type=\"xs:base64Binary\" minOccurs=\"0\"\
    />\n       <xs:element name=\"TokenPlatformInfo\"\n         type=\"TokenPlatformInfoType\"\
    \ minOccurs=\"0\"/>\n       <xs:element name=\"TriggerNonce\" type=\"NonceType\"\
    />\n       <xs:element name=\"CT-KIPURL\" type=\"xs:anyURI\" minOccurs=\"0\"/>\n\
    \       <xs:any namespace=\"##other\" processContents=\"strict\"\n         minOccurs=\"\
    0\"/>\n     </xs:sequence>\n     <xs:attribute name=\"id\" type=\"xs:ID\"/>\n\
    \   </xs:complexType>\n   <xs:element name=\"CT-KIPTrigger\" type=\"CT-KIPTriggerType\"\
    />\n   <xs:complexType name=\"CT-KIPTriggerType\">\n     <xs:annotation>\n   \
    \    <xs:documentation xml:lang=\"en\">\n          Message used to trigger the\
    \ device to initiate a\n          CT-KIP run.\n       </xs:documentation>\n  \
    \   </xs:annotation>\n     <xs:sequence>\n       <xs:choice>\n         <xs:element\
    \ name=\"InitializationTrigger\"\n           type=\"InitializationTriggerType\"\
    />\n         <xs:any nameSpace=\"##other\" processContents=\"strict\"/>\n    \
    \   </xs:choice>\n     </xs:sequence>\n     <xs:attribute name=\"Version\" type=\"\
    ct-kip:VersionType\"/>\n   </xs:complexType>\n   The <CT-KIPTrigger> element is\
    \ intended for the CT-KIP client and may\n   inform the CT-KIP client about the\
    \ identifier for the token that is\n   to be initialized, and, optionally, of\
    \ the identifier for the key on\n   that token.  The latter would apply when re-seeding.\
    \  The trigger\n   always contains a nonce to allow the server to couple the trigger\n\
    \   with a later CT-KIP <ClientHello> request.  Finally, the trigger may\n   contain\
    \ a URL to use when contacting the CT-KIP server.  The <xs:any>\n   elements are\
    \ for future extensibility.  Any provided <TokenID> or\n   <KeyID> values shall\
    \ be used by the CT-KIP client in the subsequent\n   <ClientHello> request.  The\
    \ optional <TokenPlatformInfo> element\n   informs the CT-KIP client about the\
    \ characteristics of the intended\n   token platform, and applies in the public-key\
    \ variant of CT-KIP in\n   situations when the client potentially needs to decide\
    \ which one of\n   several tokens to initialize.\n   The Version attribute shall\
    \ be set to \"1.0\" for this version of CT-\n   KIP.\n"
- title: 3.8.3.  The CT-KIP Client's Initial PDU
  contents:
  - "3.8.3.  The CT-KIP Client's Initial PDU\n   This message is the initial message\
    \ sent from the CT-KIP client to\n   the CT-KIP server.\n   <xs:element name=\"\
    ClientHello\" type=\"ClientHelloPDU\"/>\n   <xs:complexType name=\"ClientHelloPDU\"\
    >\n     <xs:annotation>\n       <xs:documentation xml:lang=\"en\">\n         \
    \ Message sent from CT-KIP client to CT-KIP server to\n          initiate a CT-KIP\
    \ session.\n       </xs:documentation>\n     </xs:annotation>\n     <xs:complexContent>\n\
    \       <xs:extension base=\"AbstractRequestType\">\n         <xs:sequence>\n\
    \           <xs:element name=\"TokenID\"\n             type=\"xs:base64Binary\"\
    \ minOccurs=\"0\"/>\n           <xs:element name=\"KeyID\"\n             type=\"\
    xs:base64Binary\" minOccurs=\"0\"/>\n           <xs:element name=\"ClientNonce\"\
    \n             type=\"NonceType\" minOccurs=\"0\"/>\n           <xs:element name=\
    \ \"TriggerNonce\"\n             type=\"NonceType\" minOccurs=\"0\"/>\n      \
    \     <xs:element name=\"SupportedKeyTypes\"\n             type=\"AlgorithmsType\"\
    />\n           <xs:element name=\"SupportedEncryptionAlgorithms\"\n          \
    \   type=\"AlgorithmsType\"/>\n           <xs:element name=\"SupportedMACAlgorithms\"\
    \n             type=\"AlgorithmsType\"/>\n           <xs:element name=\"Extensions\"\
    \n             type=\"ExtensionsType\" minOccurs=\"0\"/>\n         </xs:sequence>\n\
    \       </xs:extension>\n     </xs:complexContent>\n   </xs:complexType>\n   The\
    \ components of this message have the following meaning:\n   o  Version: (attribute\
    \ inherited from the AbstractRequestType type)\n      The highest version of this\
    \ protocol the client supports.  Only\n      version one (\"1.0\") is currently\
    \ specified.\n   o  <TokenID>: An identifier for the cryptographic token (allows\
    \ the\n      server to find, e.g., a correct shared secret for MACing\n      purposes).\
    \  The identifier shall only be present if such shared\n      secrets exist or\
    \ if the identifier was provided by the server in a\n      <CT-KIPTrigger> element\
    \ (see Section 4.2.7 below).  In the latter\n      case, it must have the same\
    \ value as the identifier provided in\n      that element.\n   o  <KeyID>: An\
    \ identifier for the key that will be overwritten if the\n      protocol run is\
    \ successful.  The identifier shall only be present\n      if the key exists or\
    \ was provided by the server in a\n      <CT-KIPTrigger> element (see Section\
    \ 4.2.7 below).  In the latter\n      case, it must have the same value as the\
    \ identifier provided in\n      that element.\n   o  <ClientNonce>: This is the\
    \ nonce R, which, when present, shall be\n      used by the server when calculating\
    \ MAC values (see below).  It is\n      recommended that clients include this\
    \ element whenever the <KeyID>\n      element is present.\n   o  <TriggerNonce>:\
    \ This optional element shall be present if and only\n      if the CT-KIP run\
    \ was initialized with a <CT-KIPTrigger> message\n      (see Section 4.2.7 below),\
    \ and shall, in that case, have the same\n      value as the <TriggerNonce> child\
    \ of that message.  A server using\n      nonces in this way must verify that\
    \ the nonce is valid and that\n      any token or key identifier values provided\
    \ in the <CT-KIPTrigger>\n      message match the corresponding identifier values\
    \ in the\n      <ClientHello> message.\n   o  <SupportedKeyTypes>: A sequence\
    \ of URIs indicating the key types\n      for which the token is willing to generate\
    \ keys through CT-KIP.\n   o  <SupportedEncryptionAlgorithms>: A sequence of URIs\
    \ indicating the\n      encryption algorithms supported by the cryptographic token\
    \ for the\n      purposes of CT-KIP.  The CT-KIP client may indicate the same\n\
    \      algorithm both as a supported key type and as an encryption\n      algorithm.\n\
    \   o  <SupportedMACAlgorithms>: A sequence of URIs indicating the MAC\n     \
    \ algorithms supported by the cryptographic token for the purposes\n      of CT-KIP.\
    \  The CT-KIP client may indicate the same algorithm both\n      as an encryption\
    \ algorithm and as a MAC algorithm (e.g., http://\n      www.rsasecurity.com/rsalabs/otps/schemas/2005/12/\n\
    \      ct-kip#ct-kip-prf-aes defined in Appendix D)\n   o  <Extensions>: A sequence\
    \ of extensions.  One extension is defined\n      for this message in this version\
    \ of CT-KIP: the ClientInfoType\n      (see Section 3.9.1).\n"
- title: 3.8.4.  The CT-KIP server's initial PDU
  contents:
  - "3.8.4.  The CT-KIP server's initial PDU\n   This message is the first message\
    \ sent from the CT-KIP server to the\n   CT-KIP client (assuming a trigger message\
    \ has not been sent to\n   initiate the protocol, in which case, this message\
    \ is the second\n   message sent from the CT-KIP server to the CT-KIP client).\
    \  It is\n   sent upon reception of a <ClientHello> message.\n   <xs:element name=\"\
    ServerHello\" type=\"ServerHelloPDU\"/>\n   <xs:complexType name=\"ServerHelloPDU\"\
    >\n     <xs:annotation>\n       <xs:documentation xml:lang=\"en\">\n         Message\
    \ sent from CT-KIP server to CT-KIP\n         client in response to a received\
    \ ClientHello\n         PDU.\n       </xs:documentation>\n     </xs:annotation>\n\
    \     <xs:complexContent>\n       <xs:extension base=\"AbstractResponseType\"\
    >\n         <xs:sequence minOccurs=\"0\">\n           <xs:element name=\"KeyType\"\
    \n             type=\"AlgorithmType\"/>\n           <xs:element name=\"EncryptionAlgorithm\"\
    \n             type=\"AlgorithmType\"/>\n           <xs:element name=\"MacAlgorithm\"\
    \n             type=\"AlgorithmType\"/>\n           <xs:element name=\"EncryptionKey\"\
    \n             type=\"ds:KeyInfoType\"/>\n           <xs:element name=\"Payload\"\
    \n             type=\"PayloadType\"/>\n           <xs:element name=\"Extensions\"\
    \n             type=\"ExtensionsType\" minOccurs=\"0\"/>\n           <xs:element\
    \ name=\"Mac\" type=\"MacType\"\n             minOccurs=\"0\"/>\n         </xs:sequence>\n\
    \       </xs:extension>\n     </xs:complexContent>\n   </xs:complexType>\n   <xs:complexType\
    \ name=\"PayloadType\">\n     <xs:annotation>\n       <xs:documentation xml:lang=\"\
    en\">\n         Currently, only the nonce is defined.  In future versions,\n \
    \        other payloads may be defined, e.g., for one-roundtrip\n         initialization\
    \ protocols.\n       </xs:documentation>\n     </xs:annotation>\n     <xs:choice>\n\
    \       <xs:element name=\"Nonce\" type=\"NonceType\"/>\n       <any namespace=\"\
    ##other\" processContents=\"strict\"/>\n     </xs:choice>\n   </xs:complexType>\n\
    \   <xs:complexType name=\"MacType\">\n     <xs:simpleContent>\n       <xs:extension\
    \ base=\"xs:base64Binary\">\n         <xs:attribute name=\"MacAlgorithm\" type=\"\
    xs:anyURI\"/>\n       </xs:extension>\n     </xs:simpleContent>\n   </xs:complexType>\n\
    \   The components of this message have the following meaning:\n   o  Version:\
    \ (attribute inherited from the AbstractResponseType type)\n      The version\
    \ selected by the CT-KIP server.  May be lower than the\n      version indicated\
    \ by the CT-KIP client, in which case, local\n      policy at the client will\
    \ determine whether or not to continue the\n      session.\n   o  SessionID: (attribute\
    \ inherited from the AbstractResponseType\n      type) An identifier for this\
    \ session.\n   o  Status: (attribute inherited from the abstract\n      AbstractResponseType\
    \ type) Return code for the <ClientHello>.  If\n      Status is not \"Continue\"\
    , only the Status and Version attributes\n      will be present; otherwise, all\
    \ the other elements must be present\n      as well.\n   o  <KeyType>: The type\
    \ of the key to be generated.\n   o  <EncryptionAlgorithm>: The encryption algorithm\
    \ to use when\n      protecting R_C.\n   o  <MacAlgorithm>: The MAC algorithm\
    \ to be used by the CT-KIP server.\n   o  <EncryptionKey>: Information about the\
    \ key to use when encrypting\n      R_C.  It will either be the server's public\
    \ key (the <ds:KeyValue>\n      alternative of ds:KeyInfoType) or an identifier\
    \ for a shared\n      secret key (the <ds:KeyName> alternative of ds:KeyInfoType).\n\
    \   o  <Payload>: The actual payload.  For this version of the protocol,\n   \
    \   only one payload is defined: the pseudorandom string R_S.\n   o  <Extensions>:\
    \ A list of server extensions.  Two extensions are\n      defined for this message\
    \ in this version of CT-KIP: the\n      ClientInfoType and the ServerInfoType\
    \ (see Section 3.9).\n   o  <Mac>: The MAC must be present if the CT-KIP run will\
    \ result in\n      the replacement of an existing token key with a new one (i.e.,\
    \ if\n      the <KeyID> element was present in the <ClientHello> message).  In\n\
    \      this case, the CT-KIP server must prove to the cryptographic token\n  \
    \    that it is authorized to replace it.  The MAC value shall be\n      computed\
    \ on the (ASCII) string \"MAC 1 computation\", the client's\n      nonce R (if\
    \ sent), and the server's nonce R_S using an\n      authentication key K_AUTH\
    \ that should be a special authentication\n      key used only for this purpose\
    \ but may be the current K_TOKEN.\n      The MAC value may be computed by using\
    \ the CT-KIP-PRF function of\n      Section 3.4, in which case the input parameter\
    \ s shall be set to\n      the concatenation of the (ASCII) string \"MAC 1 computation\"\
    , R (if\n      sent by the client), and R_S, and k shall be set to K_AUTH.  The\n\
    \      input parameter dsLen shall be set to the length of R_S:\n      dsLen =\
    \ len(R_S)\n      MAC = CT-KIP-PRF (K_AUTH, \"MAC 1 computation\" || [R ||] R_S,\n\
    \      dsLen)\n      The CT-KIP client must verify the MAC if the successful execution\n\
    \      of the protocol will result in the replacement of an existing\n      token\
    \ key with a newly generated one.  The CT-KIP client must\n      terminate the\
    \ CT-KIP session if the MAC does not verify, and must\n      delete any nonces,\
    \ keys, and/or secrets associated with the failed\n      run of the CT-KIP protocol.\n\
    \      The MacType's MacAlgorithm attribute shall, when present, identify\n  \
    \    the negotiated MAC algorithm.\n"
- title: 3.8.5.  The CT-KIP Client's Second PDU
  contents:
  - "3.8.5.  The CT-KIP Client's Second PDU\n   This message contains the nonce chosen\
    \ by the cryptographic token,\n   R_C, encrypted by the specified encryption key\
    \ and encryption\n   algorithm.\n   <xs:element name=\"ClientNonce\" type=\"ClientNoncePDU\"\
    />\n   <xs:complexType name=\"ClientNoncePDU\">\n     <xs:annotation>\n      \
    \ <xs:documentation xml:lang=\"en\">\n         Second message sent from CT-KIP\
    \ client to\n         CT-KIP server in a CT-KIP session.\n       </xs:documentation>\n\
    \     </xs:annotation>\n     <xs:complexContent>\n       <xs:extension base=\"\
    AbstractRequestType\">\n         <xs:sequence>\n           <xs:element name=\"\
    EncryptedNonce\"\n             type=\"xs:base64Binary\"/>\n           <xs:element\
    \ name=\"Extensions\"\n             type=\"ExtensionsType\" minOccurs=\"0\"/>\n\
    \         </xs:sequence>\n         <xs:attribute name=\"SessionID\" type=\"IdentifierType\"\
    \n           use=\"required\"/>\n       </xs:extension>\n     </xs:complexContent>\n\
    \   </xs:complexType>\n   The components of this message have the following meaning:\n\
    \   o  Version: (inherited from the AbstractRequestType type) Shall be\n     \
    \ the same version as in the <ServerHello> message.\n   o  SessionID: Shall have\
    \ the same value as the SessionID attribute in\n      the received <ServerHello>\
    \ message.\n   o  <EncryptedNonce>: The nonce generated and encrypted by the token.\n\
    \      The encryption shall be made using the selected encryption\n      algorithm\
    \ and identified key, and as specified in Section 3.4.\n   o  <Extensions>: A\
    \ list of extensions.  Two extensions are defined\n      for this message in this\
    \ version of CT-KIP: the ClientInfoType and\n      the ServerInfoType (see Section\
    \ 3.9).\n"
- title: 3.8.6.  The CT-KIP Server's Final PDU
  contents:
  - "3.8.6.  The CT-KIP Server's Final PDU\n   This message is the last message of\
    \ a two roundtrip CT-KIP exchange.\n   The CT-KIP server sends this message to\
    \ the CT-KIP client in response\n   to the <ClientNonce> message.\n   <xs:element\
    \ name=\"ServerFinished\" type=\"ServerFinishedPDU\"/>\n   <xs:complexType name=\"\
    ServerFinishedPDU\">\n     <xs:annotation>\n       <xs:documentation xml:lang=\"\
    en\">\n         Final message sent from CT-KIP server to\n         CT-KIP client\
    \ in a CT-KIP session.\n       </xs:documentation>\n     </xs:annotation>\n  \
    \   <xs:complexContent>\n       <xs:extension base=\"AbstractResponseType\">\n\
    \         <xs:sequence minOccurs=\"0\">\n           <xs:element name=\"TokenID\"\
    \n             type=\"xs:base64Binary\"/>\n           <xs:element name=\"KeyID\"\
    \n             type=\"xs:base64Binary\"/>\n           <xs:element name=\"KeyExpiryDate\"\
    \n             type=\"xs:dateTime\" minOccurs=\"0\"/>\n           <xs:element\
    \ name=\"ServiceID\"\n             type=\"IdentifierType\" minOccurs=\"0\"/>\n\
    \           <xs:element name=\"ServiceLogo\"\n             type=\"LogoType\" minOccurs=\"\
    0\"/>\n           <xs:element name=\"UserID\"\n             type=\"IdentifierType\"\
    \ minOccurs=\"0\"/>\n           <xs:element name=\"Extensions\"\n            \
    \ type=\"ExtensionsType\" minOccurs=\"0\"/>\n           <xs:element name=\"Mac\"\
    \n             type=\"MacType\"/>\n         </xs:sequence>\n       </xs:extension>\n\
    \     </xs:complexContent>\n   </xs:complexType>\n   The components of this message\
    \ have the following meaning:\n   o  Version: (inherited from the AbstractResponseType\
    \ type) The CT-KIP\n      version used in this session.\n   o  SessionID: (inherited\
    \ from the AbstractResponseType type) The\n      previously established identifier\
    \ for this session.\n   o  Status: (inherited from the AbstractResponseType type)\
    \ Return code\n      for the <ServerFinished> message.  If Status is not \"Success\"\
    ,\n      only the Status, SessionID, and Version attributes will be present\n\
    \      (the presence of the SessionID attribute is dependent on the type\n   \
    \   of reported error); otherwise, all the other elements must be\n      present\
    \ as well.  In this latter case, the <ServerFinished>\n      message can be seen\
    \ as a \"Commit\" message, instructing the\n      cryptographic token to store\
    \ the generated key and associate the\n      given key identifier with this key.\n\
    \   o  <TokenID>: An identifier for the token carrying the generated key.\n  \
    \    Must have the same value as the <TokenID> element of the\n      <ClientHello>\
    \ message, if one was provided.  When assigned by the\n      CT-KIP server, the\
    \ <TokenID> element shall be unique within the\n      domain of the CT-KIP server.\n\
    \   o  <KeyID>: An identifier for the newly generated key.  The\n      identifier\
    \ shall be globally unique.  Must have the same value as\n      any key identifier\
    \ provided by the CT-KIP client in the\n      <ClientHello> message.\n      The\
    \ reason for requiring globally unique key identifiers is that\n      it avoids\
    \ potential conflicts when associating key holders with\n      key identifiers.\
    \  One way of achieving global uniqueness with\n      reasonable certainty is\
    \ to hash the combination of the issuer's\n      fully qualified domain name with\
    \ an (issuer-specific) serial\n      number, assuming that each issuer makes sure\
    \ their serial numbers\n      never repeat.\n      CT-KIP clients must support\
    \ key identifiers at least 64 octets\n      long.  CT-KIP servers should not generate\
    \ key identifiers longer\n      than 64 octets.\n   o  <KeyExpiryDate>: This optional\
    \ element provides the date and time\n      after which the generated key should\
    \ be treated as expired and\n      invalid.\n   o  <ServiceID>: An optional identifier\
    \ for the service that has\n      stored the generated key.  The cryptographic\
    \ token may store this\n      identifier associated with the key in order to simplify\
    \ later\n      lookups.  The identifier shall be a printable string.\n   o  <ServiceLogo>:\
    \ This optional element provides a graphical logo\n      image for the service\
    \ that can be displayed in user interfaces,\n      e.g., to help a user select\
    \ a certain key.  The logo should\n      contain an image within the size range\
    \ of 60 pixels wide by 45\n      pixels high, and 200 pixels wide by 150 pixels\
    \ high.  The required\n      MimeType attribute of this type provides information\
    \ about the\n      MIME type of the image.  This specification supports both the\
    \ JPEG\n      and GIF image formats (with MIME types of \"image/jpeg\" and \"\
    image/\n      gif\").\n   o  <UserID>: An optional identifier for the user associated\
    \ with the\n      generated key in the authentication service.  The cryptographic\n\
    \      token may store this identifier associated with the generated key\n   \
    \   in order to enhance later user experiences.  The identifier shall\n      be\
    \ a printable string.\n   o  <Extensions>: A list of extensions chosen by the\
    \ CT-KIP server.\n      For this message, this version of CT-KIP defines two extensions,\n\
    \      the OTPKeyConfigurationDataType and the ClientInfoType (see\n      Section\
    \ 3.9).\n   o  <Mac>: To avoid a false \"Commit\" message causing the token to\
    \ end\n      up in an initialized state for which the server does not know the\n\
    \      stored key, <ServerFinished> messages must always be authenticated\n  \
    \    with a MAC.  The MAC shall be made using the already established\n      MAC\
    \ algorithm.  The MAC value shall be computed on the (ASCII)\n      string \"\
    MAC 2 computation\" and R_C using an authentication key\n      K_AUTH.  Again,\
    \ this should be a special authentication key used\n      only for this purpose,\
    \ but may also be an existing K_TOKEN.  (In\n      this case, implementations\
    \ must protect against attacks where\n      K_TOKEN is used to pre-compute MAC\
    \ values.)  If no authentication\n      key is present in the token, and no K_TOKEN\
    \ existed before the CT-\n      KIP run, K_AUTH shall be the newly generated K_TOKEN.\n\
    \      If CT-KIP-PRF is used as the MAC algorithm, then the input\n      parameter\
    \ s shall consist of the concatenation of the (ASCII)\n      string \"MAC 2 computation\"\
    \ and R_C, and the parameter dsLen shall\n      be set to the length of R_C:\n\
    \      dsLen = len(R_C)\n      MAC = CT-KIP-PRF (K_AUTH, \"MAC 2 computation\"\
    \ || R_C, dsLen)\n      When receiving a <ServerFinished> message with Status\
    \ = \"Success\"\n      for which the MAC verifies, the CT-KIP client shall associate\
    \ the\n      generated key K_TOKEN with the provided key identifier and store\n\
    \      this data permanently.  After this operation, it shall not be\n      possible\
    \ to overwrite the key unless knowledge of an authorizing\n      key is proven\
    \ through a MAC on a later <ServerHello> (and\n      <ServerFinished>) message.\n\
    \      The CT-KIP client must verify the MAC.  The CT-KIP client must\n      terminate\
    \ the CT-KIP session if the MAC does not verify, and must,\n      in this case,\
    \ also delete any nonces, keys, and/or secrets\n      associated with the failed\
    \ run of the CT-KIP protocol.\n      The MacType's MacAlgorithm attribute shall,\
    \ when present, identify\n      the negotiated MAC algorithm.\n"
- title: 3.9.  Protocol Extensions
  contents:
  - '3.9.  Protocol Extensions

    '
- title: 3.9.1.  The ClientInfoType Type
  contents:
  - "3.9.1.  The ClientInfoType Type\n   When present in a <ClientHello> or a <ClientNonce>\
    \ message, the\n   optional ClientInfoType extension contains CT-KIP client-specific\n\
    \   information.  CT-KIP servers must support this extension.  CT-KIP\n   servers\
    \ must not attempt to interpret the data it carries and, if\n   received, must\
    \ include it unmodified in the current protocol run's\n   next server response.\
    \  Servers need not retain the ClientInfoType's\n   data after that response has\
    \ been generated.\n   <xs:complexType name=\"ClientInfoType\">\n     <xs:complexContent>\n\
    \       <xs:extension base=\"AbstractExtensionType\">\n         <xs:sequence>\n\
    \           <xs:element name=\"Data\"\n             type=\"xs:base64Binary\"/>\n\
    \         </xs:sequence>\n       </xs:extension>\n     </xs:complexContent>\n\
    \   </xs:complexType>\n"
- title: 3.9.2.  The ServerInfoType Type
  contents:
  - "3.9.2.  The ServerInfoType Type\n   When present, the optional ServerInfoType\
    \ extension contains CT-KIP\n   server-specific information.  This extension is\
    \ only valid in\n   <ServerHello> messages for which Status = \"Continue\".  CT-KIP\
    \ clients\n   must support this extension.  CT-KIP clients must not attempt to\n\
    \   interpret the data it carries and, if received, must include it\n   unmodified\
    \ in the current protocol run's next client request (i.e.,\n   the <ClientNonce>\
    \ message).  CT-KIP clients need not retain the\n   ServerInfoType's data after\
    \ that request has been generated.  This\n   extension may be used, e.g., for\
    \ state management in the CT-KIP\n   server.\n   <xs:complexType name=\"ServerInfoType\"\
    >\n     <xs:complexContent>\n       <xs:extension base=\"AbstractExtensionType\"\
    >\n         <xs:sequence>\n           <xs:element name=\"Data\"\n            \
    \ type=\"xs:base64Binary\"/>\n         </xs:sequence>\n       </xs:extension>\n\
    \     </xs:complexContent>\n   </xs:complexType>\n"
- title: 3.9.3.  The OTPKeyConfigurationDataType Type
  contents:
  - "3.9.3.  The OTPKeyConfigurationDataType Type\n   The optional OTPKeyConfigurationDataType\
    \ extension contains\n   additional key configuration data for OTP keys:\n   <xs:complexType\
    \ name=\"OTPKeyConfigurationDataType\">\n     <xs:annotation>\n       <xs:documentation\
    \ xml:lang=\"en\">\n         This extension is only valid in ServerFinished\n\
    \         PDUs.  It carries additional configuration data\n         that an OTP\
    \ token should use (subject to local\n         policy) when generating OTP values\
    \ with a newly\n         generated OTP key.\n       </xs:documentation>\n    \
    \ </xs:annotation>\n     <xs:complexContent>\n       <xs:extension base=\"ExtensionType\"\
    >\n         <xs:sequence>\n           <xs:element name=\"OTPFormat\"\n       \
    \      type=\"OTPFormatType\"/>\n           <xs:element name=\"OTPLength\"\n \
    \            type=\"xs:positiveInteger\"/>\n           <xs:element name=\"OTPMode\"\
    \n             type=\"OTPModeType\" minOccurs=\"0\"/>\n         </xs:sequence>\n\
    \       </xs:extension>\n     </xs:complexContent>\n   </xs:complexType>\n   This\
    \ extension is only valid in <ServerFinished> messages.  It\n   carries additional\
    \ configuration data that the cryptographic token\n   should use (subject to local\
    \ policy) when generating OTP values from\n   the newly generated OTP key.  The\
    \ components of this extension have\n   the following meaning:\n   o  OTPFormat:\
    \ The default format of OTPs produced with this key.\n   o  OTPLength: The default\
    \ length of OTPs produced with this key.\n   o  OTPMode: The default mode of operation\
    \ when producing OTPs with\n      this key.\n"
- title: 4.  Protocol Bindings
  contents:
  - '4.  Protocol Bindings

    '
- title: 4.1.  General Requirement
  contents:
  - "4.1.  General Requirement\n   CT-KIP assumes a reliable transport.\n"
- title: 4.2.  HTTP/1.1 binding for CT-KIP
  contents:
  - '4.2.  HTTP/1.1 binding for CT-KIP

    '
- title: 4.2.1.  Introduction
  contents:
  - "4.2.1.  Introduction\n   This section presents a binding of the previous messages\
    \ to HTTP/1.1\n   [7].  Note that the HTTP client normally will be different from\
    \ the\n   CT-KIP client, i.e., the HTTP client will only exist to \"proxy\" CT-\n\
    \   KIP messages from the CT-KIP client to the CT-KIP server.  Likewise,\n   on\
    \ the HTTP server side, the CT-KIP server may receive CT-KIP PDUs\n   from a \"\
    front-end\" HTTP server.\n"
- title: 4.2.2.  Identification of CT-KIP Messages
  contents:
  - "4.2.2.  Identification of CT-KIP Messages\n   The MIME-type for all CT-KIP messages\
    \ shall be\n   application/vnd.otps.ct-kip+xml\n"
- title: 4.2.3.  HTTP Headers
  contents:
  - "4.2.3.  HTTP Headers\n   HTTP proxies must not cache responses carrying CT-KIP\
    \ messages.  For\n   this reason, the following holds:\n   o  When using HTTP/1.1,\
    \ requesters should:\n      *  Include a Cache-Control header field set to \"\
    no-cache,\n         no-store\".\n      *  Include a Pragma header field set to\
    \ \"no-cache\".\n   o  When using HTTP/1.1, responders should:\n      *  Include\
    \ a Cache-Control header field set to \"no-cache,\n         no-must-revalidate,\
    \ private\".\n      *  Include a Pragma header field set to \"no-cache\".\n  \
    \    *  NOT include a Validator, such as a Last-Modified or ETag\n         header.\n\
    \   There are no other restrictions on HTTP headers, besides the\n   requirement\
    \ to set the Content-Type header value to application/\n   vnd.otps.ct-kip+xml.\n"
- title: 4.2.4.  HTTP Operations
  contents:
  - "4.2.4.  HTTP Operations\n   Persistent connections as defined in HTTP/1.1 are\
    \ assumed but not\n   required.  CT-KIP requests are mapped to HTTP POST operations.\
    \  CT-\n   KIP responses are mapped to HTTP responses.\n"
- title: 4.2.5.  HTTP Status Codes
  contents:
  - "4.2.5.  HTTP Status Codes\n   A CT-KIP HTTP responder that refuses to perform\
    \ a message exchange\n   with a CT-KIP HTTP requester should return a 403 (Forbidden)\n\
    \   response.  In this case, the content of the HTTP body is not\n   significant.\
    \  In the case of an HTTP error while processing a CT-KIP\n   request, the HTTP\
    \ server must return a 500 (Internal Server Error)\n   response.  This type of\
    \ error should be returned for HTTP-related\n   errors detected before control\
    \ is passed to the CT-KIP processor, or\n   when the CT-KIP processor reports\
    \ an internal error (for example, the\n   CT-KIP XML namespace is incorrect, or\
    \ the CT-KIP schema cannot be\n   located).  If the type of a CT-KIP request cannot\
    \ be determined, the\n   CT-KIP responder must return a 400 (Bad request) response.\n\
    \   In these cases (i.e., when the HTTP response code is 4xx or 5xx), the\n  \
    \ content of the HTTP body is not significant.\n   Redirection status codes (3xx)\
    \ apply as usual.\n   Whenever the HTTP POST is successfully invoked, the CT-KIP\
    \ HTTP\n   responder must use the 200 status code and provide a suitable CT-KIP\n\
    \   message (possibly with CT-KIP error information included) in the HTTP\n  \
    \ body.\n"
- title: 4.2.6.  HTTP Authentication
  contents:
  - "4.2.6.  HTTP Authentication\n   No support for HTTP/1.1 authentication is assumed.\n"
- title: 4.2.7.  Initialization of CT-KIP
  contents:
  - "4.2.7.  Initialization of CT-KIP\n   The CT-KIP server may initialize the CT-KIP\
    \ protocol by sending an\n   HTTP response with Content-Type set to application/\n\
    \   vnd.otps.ct-kip+xml and response code set to 200 (OK).  This message\n   may,\
    \ e.g., be sent in response to a user requesting token\n   initialization in a\
    \ browsing session.  The initialization message may\n   carry data in its body.\
    \  If this is the case, the data shall be a\n   valid instance of a <CT-KIPTrigger>\
    \ element.\n"
- title: 4.2.8.  Example Messages
  contents:
  - "4.2.8.  Example Messages\n   a.  Initialization from CT-KIP server:\n   HTTP/1.1\
    \ 200 OK\n   Cache-Control: no-store\n   Content-Type: application/vnd.otps.ct-kip+xml\n\
    \   Content-Length: <some value>\n   CT-KIP initialization data in XML form...\n\
    \   b.  Initial request from CT-KIP client:\n   POST http://example.com/cgi-bin/CT-KIP-server\
    \ HTTP/1.1\n   Cache-Control: no-store\n   Pragma: no-cache\n   Host: example.com\n\
    \   Content-Type: application/vnd.otps.ct-kip+xml\n   Content-Length: <some value>\n\
    \   CT-KIP data in XML form (supported version, supported algorithms...)\n   c.\
    \  Initial response from CT-KIP server:\n   HTTP/1.1 200 OK\n   Cache-Control:\
    \ no-store\n   Content-Type: application/vnd.otps.ct-kip+xml\n   Content-Length:\
    \ <some other value>\n   CT-KIP data in XML form (server random nonce, server\
    \ public key, ...)\n"
- title: 5.  Security considerations
  contents:
  - '5.  Security considerations

    '
- title: 5.1.  General
  contents:
  - "5.1.  General\n   CT-KIP is designed to protect generated key material from exposure.\n\
    \   No other entities than the CT-KIP server and the cryptographic token\n   will\
    \ have access to a generated K_TOKEN if the cryptographic\n   algorithms used\
    \ are of sufficient strength and, on the CT-KIP client\n   side, generation and\
    \ encryption of R_C and generation of K_TOKEN take\n   place as specified and\
    \ in the token.  This applies even if malicious\n   software is present in the\
    \ CT-KIP client.  However, as discussed in\n   the following, CT-KIP does not\
    \ protect against certain other threats\n   resulting from man-in-the-middle attacks\
    \ and other forms of attacks.\n   CT-KIP should, therefore, be run over a transport\
    \ providing privacy\n   and integrity, such as HTTP over Transport Layer Security\
    \ (TLS) with\n   a suitable ciphersuite, when such threats are a concern.  Note\
    \ that\n   TLS ciphersuites with anonymous key exchanges are not suitable in\n\
    \   those situations.\n"
- title: 5.2.  Active Attacks
  contents:
  - '5.2.  Active Attacks

    '
- title: 5.2.1.  Introduction
  contents:
  - "5.2.1.  Introduction\n   An active attacker may attempt to modify, delete, insert,\
    \ replay or\n   reorder messages for a variety of purposes including service denial\n\
    \   and compromise of generated key material.  Sections 5.2.2 through\n   5.2.7\
    \ analyze these attack scenarios.\n"
- title: 5.2.2.  Message Modifications
  contents:
  - "5.2.2.  Message Modifications\n   Modifications to a <CT-KIPTrigger> message\
    \ will either cause denial-\n   of-service (modifications of any of the identifiers\
    \ or the nonce) or\n   the CT-KIP client to contact the wrong CT-KIP server. \
    \ The latter is\n   in effect a man-in-the-middle attack and is discussed further\
    \ in\n   Section 5.2.7.\n   An attacker may modify a <ClientHello> message.  This\
    \ means that the\n   attacker could indicate a different key or token than the\
    \ one\n   intended by the CT-KIP client, and could also suggest other\n   cryptographic\
    \ algorithms than the ones preferred by the CT-KIP\n   client, e.g., cryptographically\
    \ weaker ones.  The attacker could also\n   suggest earlier versions of the CT-KIP\
    \ protocol, in case these\n   versions have been shown to have vulnerabilities.\
    \  These\n   modifications could lead to an attacker succeeding in initializing\
    \ or\n   modifying another token than the one intended (i.e., the server\n   assigning\
    \ the generated key to the wrong token), or gaining access to\n   a generated\
    \ key through the use of weak cryptographic algorithms or\n   protocol versions.\
    \  CT-KIP implementations may protect against the\n   latter by having strict\
    \ policies about what versions and algorithms\n   they support and accept.  The\
    \ former threat (assignment of a\n   generated key to the wrong token) is not\
    \ possible when the shared-key\n   variant of CT-KIP is employed (assuming existing\
    \ shared keys are\n   unique per token) but is possible in the public-key variant.\n\
    \   Therefore, CT-KIP servers must not accept unilaterally provided token\n  \
    \ identifiers in the public-key variant.  This is also indicated in the\n   protocol\
    \ description.  In the shared-key variant, however, an\n   attacker may be able\
    \ to provide the wrong identifier (possibly also\n   leading to the incorrect\
    \ user being associated with the generated\n   key) if the attacker has real-time\
    \ access to the token with the\n   identified key.  In other words, the generated\
    \ key is associated with\n   the correct token but the token is associated with\
    \ the incorrect\n   user.  See further Section 5.5 for a discussion of this threat\
    \ and\n   possible countermeasures.\n   An attacker may also modify a <ServerHello>\
    \ message.  This means that\n   the attacker could indicate different key types,\
    \ algorithms, or\n   protocol versions than the legitimate server would, e.g.,\n\
    \   cryptographically weaker ones.  The attacker could also provide a\n   different\
    \ nonce than the one sent by the legitimate server.  Clients\n   will protect\
    \ against the former through strict adherence to policies\n   regarding permissible\
    \ algorithms and protocol versions.  The latter\n   (wrong nonce) will not constitute\
    \ a security problem, as a generated\n   key will not match the key generated\
    \ on the legitimate server.  Also,\n   whenever the CT-KIP run would result in\
    \ the replacement of an\n   existing key, the <Mac> element protects against modifications\
    \ of\n   R_S.\n   Modifications of <ClientNonce> messages are also possible. \
    \ If an\n   attacker modifies the SessionID attribute, then, in effect, a switch\n\
    \   to another session will occur at the server, assuming the new\n   SessionID\
    \ is valid at that time on the server.  It still will not\n   allow the attacker\
    \ to learn a generated K_TOKEN since R_C has been\n   wrapped for the legitimate\
    \ server.  Modifications of the\n   <EncryptedNonce> element, e.g., replacing\
    \ it with a value for which\n   the attacker knows an underlying R'C, will not\
    \ result in the client\n   changing its pre-CT-KIP state, since the server will\
    \ be unable to\n   provide a valid MAC in its final message to the client.  The\
    \ server\n   may, however, end up storing K'TOKEN rather than K_TOKEN.  If the\n\
    \   token has been associated with a particular user, then this could\n   constitute\
    \ a security problem.  For a further discussion about this\n   threat, and a possible\
    \ countermeasure, see Section 5.5 below.  Note\n   that use of Secure Socket Layer\
    \ (SSL) or TLS does not protect against\n   this attack if the attacker has access\
    \ to the CT-KIP client (e.g.,\n   through malicious software, \"trojans\").\n\
    \   Finally, attackers may also modify the <ServerFinished> message.\n   Replacing\
    \ the <Mac> element will only result in denial-of-service.\n   Replacement of\
    \ any other element may cause the CT-KIP client to\n   associate, e.g., the wrong\
    \ service with the generated key.  CT-KIP\n   should be run over a transport providing\
    \ privacy and integrity when\n   this is a concern.\n"
- title: 5.2.3.  Message Deletion
  contents:
  - "5.2.3.  Message Deletion\n   Message deletion will not cause any other harm than\
    \ denial-of-\n   service, since a token shall not change its state (i.e., \"commit\"\
    \ to\n   a generated key) until it receives the final message from the CT-KIP\n\
    \   server and successfully has processed that message, including\n   validation\
    \ of its MAC.  A deleted <ServerFinished> message will not\n   cause the server\
    \ to end up in an inconsistent state vis-a-vis the\n   token if the server implements\
    \ the suggestions in Section 5.5.\n"
- title: 5.2.4.  Message Insertion
  contents:
  - "5.2.4.  Message Insertion\n   An active attacker may initiate a CT-KIP run at\
    \ any time, and suggest\n   any token identifier.  CT-KIP server implementations\
    \ may receive some\n   protection against inadvertently initializing a token or\n\
    \   inadvertently replacing an existing key or assigning a key to a token\n  \
    \ by initializing the CT-KIP run by use of the <CT-KIPTrigger>.  The\n   <TriggerNonce>\
    \ element allows the server to associate a CT-KIP\n   protocol run with, e.g.,\
    \ an earlier user-authenticated session.  The\n   security of this method, therefore,\
    \ depends on the ability to protect\n   the <TriggerNonce> element in the CT-KIP\
    \ initialization message.  If\n   an eavesdropper is able to capture this message,\
    \ he may race the\n   legitimate user for a key initialization.  CT-KIP over a\
    \ transport\n   providing privacy and integrity, coupled with the recommendations\
    \ in\n   Section 5.5, is recommended when this is a concern.\n   Insertion of\
    \ other messages into an existing protocol run is seen as\n   equivalent to modification\
    \ of legitimately sent messages.\n"
- title: 5.2.5.  Message Replay
  contents:
  - "5.2.5.  Message Replay\n   Attempts to replay a previously recorded CT-KIP message\
    \ will be\n   detected, as the use of nonces ensures that both parties are live.\n"
- title: 5.2.6.  Message Reordering
  contents:
  - "5.2.6.  Message Reordering\n   An attacker may attempt to re-order messages but\
    \ this will be\n   detected, as each message is of a unique type.\n"
- title: 5.2.7.  Man in the Middle
  contents:
  - "5.2.7.  Man in the Middle\n   In addition to other active attacks, an attacker\
    \ posing as a man in\n   the middle may be able to provide his own public key\
    \ to the CT-KIP\n   client.  This threat and countermeasures to it are discussed\
    \ in\n   Section 3.3.  An attacker posing as a man-in-the-middle may also be\n\
    \   acting as a proxy and, hence, may not interfere with CT-KIP runs but\n   still\
    \ learn valuable information; see Section 5.3.\n"
- title: 5.3.  Passive Attacks
  contents:
  - "5.3.  Passive Attacks\n   Passive attackers may eavesdrop on CT-KIP runs to learn\
    \ information\n   that later on may be used to impersonate users, mount active\
    \ attacks,\n   etc.\n   If CT-KIP is not run over a transport providing privacy,\
    \ a passive\n   attacker may learn:\n   o  What tokens a particular user is in\
    \ possession of;\n   o  The identifiers of keys on those tokens and other attributes\n\
    \      pertaining to those keys, e.g., the lifetime of the keys; and\n   o  CT-KIP\
    \ versions and cryptographic algorithms supported by a\n      particular CT-KIP\
    \ client or server.\n   Whenever the above is a concern, CT-KIP should be run\
    \ over a\n   transport providing privacy.  If man-in-the-middle attacks for the\n\
    \   purposes described above are a concern, the transport should also\n   offer\
    \ server-side authentication.\n"
- title: 5.4.  Cryptographic Attacks
  contents:
  - "5.4.  Cryptographic Attacks\n   An attacker with unlimited access to an initialized\
    \ token may use the\n   token as an \"oracle\" to pre-compute values that later\
    \ on may be used\n   to impersonate the CT-KIP server.  Sections 3.6 and 3.8 contain\n\
    \   discussions of this threat and steps recommended to protect against\n   it.\n"
- title: 5.5.  Attacks on the Interaction between CT-KIP and User Authentication
  contents:
  - "5.5.  Attacks on the Interaction between CT-KIP and User Authentication\n   If\
    \ keys generated in CT-KIP will be associated with a particular user\n   at the\
    \ CT-KIP server (or a server trusted by, and communicating with\n   the CT-KIP\
    \ server), then in order to protect against threats where an\n   attacker replaces\
    \ a client-provided encrypted R_C with his own R'C\n   (regardless of whether\
    \ the public-key variant or the shared-secret\n   variant of CT-KIP is employed\
    \ to encrypt the client nonce), the\n   server should not commit to associate\
    \ a generated K_TOKEN with the\n   given token (user) until the user simultaneously\
    \ has proven both\n   possession of a token containing K_TOKEN and some out-of-band\n\
    \   provided authenticating information (e.g., a temporary password).\n   For\
    \ example, if the token is a one-time password token, the user\n   could be required\
    \ to authenticate with both a one-time password\n   generated by the token and\
    \ an out-of-band provided temporary PIN in\n   order to have the server \"commit\"\
    \ to the generated token value for\n   the given user.  Preferably, the user should\
    \ perform this operation\n   from another host than the one used to initialize\
    \ the token, in order\n   to minimize the risk of malicious software on the client\
    \ interfering\n   with the process.\n   Another threat arises when an attacker\
    \ is able to trick a user to\n   authenticate to the attacker rather than to the\
    \ legitimate service\n   before the CT-KIP protocol run.  If successful, the attacker\
    \ will\n   then be able to impersonate the user towards the legitimate service,\n\
    \   and subsequently receive a valid CT-KIP trigger.  If the public-key\n   variant\
    \ of CT-KIP is used, this may result in the attacker being able\n   to (after\
    \ a successful CT-KIP protocol run) impersonate the user.\n   Ordinary precautions\
    \ must, therefore, be in place to ensure that\n   users authenticate only to legitimate\
    \ services.\n"
- title: 6.  Intellectual Property Considerations
  contents:
  - "6.  Intellectual Property Considerations\n   RSA and SecurID are registered trademarks\
    \ or trademarks of RSA\n   Security Inc. in the United States and/or other countries.\
    \  The names\n   of other products and services mentioned may be the trademarks\
    \ of\n   their respective owners.\n"
- title: 7.  References
  contents:
  - '7.  References

    '
- title: 7.1.  Normative References
  contents:
  - "7.1.  Normative References\n   [1]   Davis, M. and M. Duerst, \"Unicode Normalization\
    \ Forms\",\n         March 2001,\n         <http://www.unicode.org/unicode/reports/tr15/tr15-21.html>.\n"
- title: 7.2.  Informative References
  contents:
  - "7.2.  Informative References\n   [2]   RSA Laboratories, \"PKCS #11 Mechanisms\
    \ for the Cryptographic\n         Token Key Initialization Protocol\", PKCS #11\
    \ Version 2.20\n         Amendment 2, December 2005, <ftp://ftp.rsasecurity.com/pub/\n\
    \         pkcs/pkcs-11/v2-20/pkcs-11v2-20a2.pdf>.\n   [3]   RSA Laboratories,\
    \ \"Cryptographic Token Interface Standard\",\n         PKCS #11 Version 2.20,\
    \ June 2004, <ftp://ftp.rsasecurity.com/\n         pub/pkcs/pkcs-11/v2-20/pkcs-11v2-20.pdf>.\n\
    \   [4]   RSA Laboratories, \"Frequently Asked Questions About Today's\n     \
    \    Cryptography. Version 4.1\", 2000, <http://www.rsasecurity.com/\n       \
    \  rsalabs/faq/files/rsalabs_faq41.pdf>.\n   [5]   RSA Laboratories, \"Password-Based\
    \ Cryptography Standard\",\n         PKCS #5 Version 2.0, March 1999,\n      \
    \   <ftp://ftp.rsasecurity.com/pub/pkcs/pkcs-5v2/pkcs5v2-0.pdf>.\n   [6]   RSA\
    \ Laboratories, \"RSA Cryptography Standard\", PKCS #1 Version\n         2.1,\
    \ June 2002,\n         <ftp://ftp.rsasecurity.com/pub/pkcs/pkcs-1/pkcs-1v2-1.pdf>.\n\
    \   [7]   Fielding, R., Gettys, J., Mogul, J., Frystyk, H., Masinter, L.,\n  \
    \       Leach, P., and T. Berners-Lee, \"Hypertext Transfer Protocol --\n    \
    \     HTTP/1.1\", RFC 2616, June 1999.\n   [8]   National Institute of Standards\
    \ and Technology, \"Specification\n         for the Advanced Encryption Standard\
    \ (AES)\", FIPS 197,\n         November 2001,\n         <http://csrc.nist.gov/publications/fips/fips197/fips-197.pdf>.\n\
    \   [9]   Krawzcyk, H., Bellare, M., and R. Canetti, \"HMAC: Keyed-Hashing\n \
    \        for Message Authentication\", RFC 2104, February 1997.\n   [10]  Iwata,\
    \ T. and K. Kurosawa, \"OMAC: One-Key CBC MAC.  In Fast\n         Software Encryption,\
    \ FSE 2003, pages 129 - 153.\n         Springer-Verlag\", 2003,\n         <http://crypt.cis.ibaraki.ac.jp/omac/docs/omac.pdf>.\n\
    \   [11]  National Institute of Standards and Technology, \"Secure Hash\n    \
    \     Standard\", FIPS 197, February 2004, <http://csrc.nist.gov/\n         publications/fips/fips180-2/fips180-2withchangenotice.pdf>.\n\
    \   [12]  RSA Laboratories, \"Cryptographic Token Key Initialization\n       \
    \  Protocol\", OTPS Version 1.0, December 2005,\n         <ftp://ftp.rsasecurity.com/pub/otps/ct-kip/ct-kip-v1-0.pdf>.\n"
- title: Appendix A.  CT-KIP Schema
  contents:
  - "Appendix A.  CT-KIP Schema\n   <xs:schema\n     targetNamespace=\n     \"http://www.rsasecurity.com/rsalabs/otps/schemas/2005/12/ct-kip#\"\
    \n     xmlns:xs=\"http://www.w3.org/2001/XMLSchema\"\n     xmlns:ds=\"http://www.w3.org/2000/09/xmldsig#\"\
    \n     xmlns=\n     \"http://www.rsasecurity.com/rsalabs/otps/schemas/2005/12/ct-kip#\"\
    >\n   <xs:import namespace=\"http://www.w3.org/2000/09/xmldsig#\"\n     schemaLocation=\n\
    \     \"http://www.w3.org/TR/2002/REC-xmldsig-core-20020212/\n   xmldsig-core-schema.xsd\"\
    />\n   <!-- Basic types -->\n   <xs:complexType name=\"AbstractRequestType\" abstract=\"\
    true\">\n     <xs:attribute name=\"Version\" type=\"VersionType\" use=\"required\"\
    />\n   </xs:complexType>\n   <xs:complexType name=\"AbstractResponseType\" abstract=\"\
    true\">\n     <xs:attribute name=\"Version\" type=\"VersionType\" use=\"required\"\
    />\n     <xs:attribute name=\"SessionID\" type=\"IdentifierType\"/>\n     <xs:attribute\
    \ name=\"Status\" type=\"StatusCode\" use=\"required\"/>\n   </xs:complexType>\n\
    \   <xs:simpleType name=\"StatusCode\">\n     <xs:restriction base=\"xs:string\"\
    >\n       <xs:enumeration value=\"Continue\"/>\n       <xs:enumeration value=\"\
    Success\"/>\n       <xs:enumeration value=\"Abort\"/>\n       <xs:enumeration\
    \ value=\"AccessDenied\"/>\n       <xs:enumeration value=\"MalformedRequest\"\
    />\n       <xs:enumeration value=\"UnknownRequest\"/>\n       <xs:enumeration\
    \ value=\"UnknownCriticalExtension\"/>\n       <xs:enumeration value=\"UnsupportedVersion\"\
    />\n       <xs:enumeration value=\"NoSupportedKeyTypes\"/>\n       <xs:enumeration\
    \ value=\"NoSupportedEncryptionAlgorithms\"/>\n       <xs:enumeration value=\"\
    NoSupportedMACAlgorithms\"/>\n       <xs:enumeration value=\"InitializationFailed\"\
    />\n     </xs:restriction>\n   </xs:simpleType>\n   <xs:simpleType name=\"VersionType\"\
    >\n     <xs:restriction base=\"xs:string\">\n       <xs:pattern value=\"\\d{1,2}\\\
    .\\d{1,3}\"/>\n     </xs:restriction>\n   </xs:simpleType>\n   <xs:simpleType\
    \ name=\"IdentifierType\">\n     <xs:restriction base=\"xs:string\">\n       <xs:maxLength\
    \ value=\"128\"/>\n     </xs:restriction>\n   </xs:simpleType>\n   <xs:simpleType\
    \ name=\"NonceType\">\n     <xs:restriction base=\"xs:base64Binary\">\n      \
    \ <xs:length value=\"16\"/>\n     </xs:restriction>\n   </xs:simpleType>\n   <xs:complexType\
    \ name=\"LogoType\">\n     <xs:simpleContent>\n       <xs:extension base=\"xs:base64Binary\"\
    >\n         <xs:attribute name=\"MimeType\" type=\"MimeTypeType\"\n         use=\"\
    required\"/>\n       </xs:extension>\n     </xs:simpleContent>\n   </xs:complexType>\n\
    \   <xs:simpleType name=\"MimeTypeType\">\n     <xs:restriction base=\"xs:string\"\
    >\n       <xs:enumeration value=\"image/jpeg\"/>\n       <xs:enumeration value=\"\
    image/gif\"/>\n     </xs:restriction>\n   </xs:simpleType>\n   <!-- Algorithms\
    \ are identified through URIs -->\n   <xs:complexType name=\"AlgorithmsType\"\
    >\n     <xs:sequence maxOccurs=\"unbounded\">\n       <xs:element name=\"Algorithm\"\
    \ type=\"AlgorithmType\"/>\n     </xs:sequence>\n   </xs:complexType>\n   <xs:simpleType\
    \ name=\"AlgorithmType\">\n     <xs:restriction base=\"xs:anyURI\"/>\n   </xs:simpleType>\n\
    \   <xs:complexType name=\"MacType\">\n     <xs:simpleContent>\n       <xs:extension\
    \ base=\"xs:base64Binary\">\n         <xs:attribute name=\"MacAlgorithm\"\n  \
    \       type=\"xs:anyURI\"/>\n       </xs:extension>\n     </xs:simpleContent>\n\
    \   </xs:complexType>\n   <!-- CT-KIP extensions (for future use) -->\n   <xs:complexType\
    \ name=\"ExtensionsType\">\n     <xs:sequence maxOccurs=\"unbounded\">\n     \
    \  <xs:element name=\"Extension\" type=\"AbstractExtensionType\"/>\n     </xs:sequence>\n\
    \   </xs:complexType>\n   <xs:complexType name=\"AbstractExtensionType\" abstract=\"\
    true\">\n     <xs:attribute name=\"Critical\" type=\"xs:boolean\"/>\n   </xs:complexType>\n\
    \   <xs:complexType name=\"ClientInfoType\">\n     <xs:complexContent>\n     \
    \  <xs:extension base=\"AbstractExtensionType\">\n         <xs:sequence>\n   \
    \        <xs:element name=\"Data\" type=\"xs:base64Binary\"/>\n         </xs:sequence>\n\
    \       </xs:extension>\n     </xs:complexContent>\n   </xs:complexType>\n   <xs:complexType\
    \ name=\"ServerInfoType\">\n     <xs:complexContent>\n       <xs:extension base=\"\
    AbstractExtensionType\">\n         <xs:sequence>\n           <xs:element name=\"\
    Data\" type=\"xs:base64Binary\"/>\n         </xs:sequence>\n       </xs:extension>\n\
    \     </xs:complexContent>\n   </xs:complexType>\n   <xs:complexType name=\"OTPKeyConfigurationDataType\"\
    >\n     <xs:annotation>\n       <xs:documentation xml:lang=\"en\">\n         This\
    \ extension is only valid in ServerFinished PDUs.  It\n         carries additional\
    \ configuration data that an OTP token should\n         use (subject to local\
    \ policy) when generating OTP values from a\n         newly generated OTP key.\n\
    \       </xs:documentation>\n     </xs:annotation>\n     <xs:complexContent>\n\
    \       <xs:extension base=\"AbstractExtensionType\">\n         <xs:sequence>\n\
    \           <xs:element name=\"OTPFormat\" type=\"OTPFormatType\"/>\n        \
    \   <xs:element name=\"OTPLength\" type=\"xs:positiveInteger\"/>\n           <xs:element\
    \ name=\"OTPMode\" type=\"OTPModeType\" minOccurs=\"0\"/>\n         </xs:sequence>\n\
    \       </xs:extension>\n     </xs:complexContent>\n   </xs:complexType>\n   <xs:simpleType\
    \ name=\"OTPFormatType\">\n     <xs:restriction base=\"xs:string\">\n       <xs:enumeration\
    \ value=\"Decimal\"/>\n       <xs:enumeration value=\"Hexadecimal\"/>\n      \
    \ <xs:enumeration value=\"Alphanumeric\"/>\n       <xs:enumeration value=\"Binary\"\
    />\n     </xs:restriction>\n   </xs:simpleType>\n   <xs:complexType name=\"OTPModeType\"\
    >\n     <xs:choice maxOccurs=\"unbounded\">\n       <xs:element name=\"Time\"\
    \ type=\"TimeType\"/>\n       <xs:element name=\"Counter\"/>\n       <xs:element\
    \ name=\"Challenge\"/>\n       <xs:any namespace=\"##other\" processContents=\"\
    strict\"/>\n     </xs:choice>\n   </xs:complexType>\n   <xs:complexType name=\"\
    TimeType\">\n     <xs:complexContent>\n       <xs:restriction base=\"xs:anyType\"\
    >\n         <xs:attribute name=\"TimeInterval\" type=\"xs:positiveInteger\"/>\n\
    \       </xs:restriction>\n     </xs:complexContent>\n   </xs:complexType>\n \
    \  <xs:complexType name=\"PayloadType\">\n     <xs:annotation>\n       <xs:documentation\
    \ xml:lang=\"en\">\n       </xs:documentation>\n     </xs:annotation>\n     <xs:choice>\n\
    \       <xs:element name=\"Nonce\" type=\"NonceType\"/>\n       <xs:any namespace=\"\
    ##other\" processContents=\"strict\"/>\n     </xs:choice>\n   </xs:complexType>\n\
    \   <xs:simpleType name=\"PlatformType\">\n     <xs:restriction base=\"xs:string\"\
    >\n       <xs:enumeration value=\"Hardware\"/>\n       <xs:enumeration value=\"\
    Software\"/>\n       <xs:enumeration value=\"Unspecified\"/>\n     </xs:restriction>\n\
    \   </xs:simpleType>\n   <xs:complexType name=\"TokenPlatformInfoType\">\n   \
    \  <xs:annotation>\n       <xs:documentation xml:lang=\"en\">\n         Carries\
    \ token platform information helping the client to select\n         a suitable\
    \ token.\n       </xs:documentation>\n     </xs:annotation>\n     <xs:attribute\
    \ name=\"KeyLocation\" type=\"PlatformType\"/>\n     <xs:attribute name=\"AlgorithmLocation\"\
    \ type=\"PlatformType\"/>\n   </xs:complexType>\n   <xs:complexType name=\"InitializationTriggerType\"\
    >\n     <xs:sequence>\n       <xs:element name=\"TokenID\" type=\"xs:base64Binary\"\
    \ minOccurs=\"0\"/>\n       <xs:element name=\"KeyID\" type=\"xs:base64Binary\"\
    \ minOccurs=\"0\"/>\n       <xs:element name=\"TokenPlatformInfo\" type=\"TokenPlatformInfoType\"\
    \n         minOccurs=\"0\"/>\n       <xs:element name=\"TriggerNonce\" type=\"\
    NonceType\"/>\n       <xs:element name=\"CT-KIPURL\" type=\"xs:anyURI\" minOccurs=\"\
    0\"/>\n       <xs:any namespace=\"##other\" processContents=\"strict\"\n     \
    \    minOccurs=\"0\"/>\n     </xs:sequence>\n   </xs:complexType>\n   <!-- CT-KIP\
    \ PDUs -->\n   <!-- CT-KIP trigger -->\n   <xs:element name=\"CT-KIPTrigger\"\
    \ type=\"CT-KIPTriggerType\"/>\n   <xs:complexType name=\"CT-KIPTriggerType\"\
    >\n     <xs:annotation>\n       <xs:documentation xml:lang=\"en\">\n         Message\
    \ used to trigger the device to initiate a CT-KIP run.\n       </xs:documentation>\n\
    \     </xs:annotation>\n     <xs:sequence>\n       <xs:choice>\n         <xs:element\
    \ name=\"InitializationTrigger\"\n         type=\"InitializationTriggerType\"\
    />\n         <xs:any namespace=\"##other\" processContents=\"strict\"/>\n    \
    \   </xs:choice>\n     </xs:sequence>\n     <xs:attribute name=\"Version\" type=\"\
    VersionType\"/>\n   </xs:complexType>\n   <!-- ClientHello PDU -->\n   <xs:element\
    \ name=\"ClientHello\" type=\"ClientHelloPDU\"/>\n   <xs:complexType name=\"ClientHelloPDU\"\
    >\n     <xs:annotation>\n       <xs:documentation xml:lang=\"en\">\n         Message\
    \ sent from CT-KIP client to CT-KIP server to initiate an\n         CT-KIP session.\n\
    \       </xs:documentation>\n     </xs:annotation>\n     <xs:complexContent>\n\
    \       <xs:extension base=\"AbstractRequestType\">\n         <xs:sequence>\n\
    \           <xs:element name=\"TokenID\" type=\"xs:base64Binary\"\n          \
    \   minOccurs=\"0\"/>\n           <xs:element name=\"KeyID\" type=\"xs:base64Binary\"\
    \n             minOccurs=\"0\"/>\n           <xs:element name=\"ClientNonce\"\
    \ type=\"NonceType\"\n             minOccurs=\"0\"/>\n           <xs:element name=\"\
    TriggerNonce\" type=\"NonceType\"\n             minOccurs=\"0\"/>\n          \
    \ <xs:element name=\"SupportedKeyTypes\" type=\"AlgorithmsType\"/>\n         \
    \  <xs:element name=\"SupportedEncryptionAlgorithms\"\n             type=\"AlgorithmsType\"\
    />\n           <xs:element name=\"SupportedMACAlgorithms\"\n             type=\"\
    AlgorithmsType\"/>\n           <xs:element name=\"Extensions\" type=\"ExtensionsType\"\
    \n             minOccurs=\"0\"/>\n         </xs:sequence>\n       </xs:extension>\n\
    \     </xs:complexContent>\n   </xs:complexType>\n   <!-- ServerHello PDU -->\n\
    \   <xs:element name=\"ServerHello\" type=\"ServerHelloPDU\"/>\n   <xs:complexType\
    \ name=\"ServerHelloPDU\">\n     <xs:annotation>\n       <xs:documentation xml:lang=\"\
    en\">\n         Message sent from CT-KIP server to CT-KIP client in response to\n\
    \         a received ClientHello PDU.\n       </xs:documentation>\n     </xs:annotation>\n\
    \     <xs:complexContent>\n       <xs:extension base=\"AbstractResponseType\"\
    >\n         <xs:sequence minOccurs=\"0\">\n           <xs:element name=\"KeyType\"\
    \ type=\"AlgorithmType\"/>\n           <xs:element name=\"EncryptionAlgorithm\"\
    \ type=\"AlgorithmType\"/>\n           <xs:element name=\"MacAlgorithm\" type=\"\
    AlgorithmType\"/>\n           <xs:element name=\"EncryptionKey\" type=\"ds:KeyInfoType\"\
    />\n           <xs:element name=\"Payload\" type=\"PayloadType\"/>\n         \
    \  <xs:element name=\"Extensions\" type=\"ExtensionsType\"\n             minOccurs=\"\
    0\"/>\n           <xs:element name=\"Mac\" type=\"MacType\" minOccurs=\"0\"/>\n\
    \         </xs:sequence>\n       </xs:extension>\n     </xs:complexContent>\n\
    \   </xs:complexType>\n   <!-- ClientNonce PDU -->\n   <xs:element name=\"ClientNonce\"\
    \ type=\"ClientNoncePDU\"/>\n   <xs:complexType name=\"ClientNoncePDU\">\n   \
    \  <xs:annotation>\n       <xs:documentation xml:lang=\"en\">\n         Second\
    \ message sent from CT-KIP client to CT-KIP server to\n         convey the client's\
    \ chosen secret.\n       </xs:documentation>\n     </xs:annotation>\n     <xs:complexContent>\n\
    \       <xs:extension base=\"AbstractRequestType\">\n         <xs:sequence>\n\
    \           <xs:element name=\"EncryptedNonce\" type=\"xs:base64Binary\"/>\n \
    \          <xs:element name=\"Extensions\" type=\"ExtensionsType\"\n         \
    \    minOccurs=\"0\"/>\n         </xs:sequence>\n         <xs:attribute name=\"\
    SessionID\" type=\"IdentifierType\"\n           use=\"required\"/>\n       </xs:extension>\n\
    \     </xs:complexContent>\n   </xs:complexType>\n   <!-- ServerFinished PDU -->\n\
    \   <xs:element name=\"ServerFinished\" type=\"ServerFinishedPDU\"/>\n   <xs:complexType\
    \ name=\"ServerFinishedPDU\">\n     <xs:annotation>\n       <xs:documentation\
    \ xml:lang=\"en\">\n         Final message sent from CT-KIP server to CT-KIP client\
    \ in an\n         CT-KIP session.\n       </xs:documentation>\n     </xs:annotation>\n\
    \     <xs:complexContent>\n       <xs:extension base=\"AbstractResponseType\"\
    >\n         <xs:sequence minOccurs=\"0\">\n           <xs:element name=\"TokenID\"\
    \ type=\"xs:base64Binary\"/>\n           <xs:element name=\"KeyID\" type=\"xs:base64Binary\"\
    />\n           <xs:element name=\"KeyExpiryDate\" type=\"xs:dateTime\"\n     \
    \        minOccurs=\"0\"/>\n           <xs:element name=\"ServiceID\" type=\"\
    IdentifierType\"\n             minOccurs=\"0\"/>\n           <xs:element name=\"\
    ServiceLogo\" type=\"LogoType\"\n             minOccurs=\"0\"/>\n           <xs:element\
    \ name=\"UserID\" type=\"IdentifierType\"\n             minOccurs=\"0\"/>\n  \
    \         <xs:element name=\"Extensions\" type=\"ExtensionsType\"\n          \
    \   minOccurs=\"0\"/>\n           <xs:element name=\"Mac\" type=\"MacType\"/>\n\
    \         </xs:sequence>\n       </xs:extension>\n     </xs:complexContent>\n\
    \   </xs:complexType>\n   </xs:schema>\n"
- title: Appendix B.  Examples of CT-KIP Messages
  contents:
  - 'Appendix B.  Examples of CT-KIP Messages

    '
- title: B.1.  Introduction
  contents:
  - "B.1.  Introduction\n   All examples are syntactically correct.  MAC and cipher\
    \ values are\n   fictitious, however.  The examples illustrate a complete CT-KIP\n\
    \   exchange, starting with an initialization (trigger) message from the\n   server.\n"
- title: B.2.  Example of a CT-KIP Initialization (Trigger) Message
  contents:
  - "B.2.  Example of a CT-KIP Initialization (Trigger) Message\n   <CT-KIPTrigger\n\
    \     xmlns=\n     \"http://www.rsasecurity.com/rsalabs/otps/schemas/2005/12/ct-kip#\"\
    \n     xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n     Version=\"\
    1.0\">\n     <InitializationTrigger>\n       <TokenID>12345678</TokenID>\n   \
    \    <TriggerNonce>112dsdfwf312asder394jw==</TriggerNonce>\n     </InitializationTrigger>\n\
    \   </CT-KIPTrigger>\n"
- title: B.3.  Example of a <ClientHello> Message
  contents:
  - "B.3.  Example of a <ClientHello> Message\n   <?xml version=\"1.0\" encoding=\"\
    UTF-8\"?>\n   <ClientHello\n     xmlns=\n     \"http://www.rsasecurity.com/rsalabs/otps/schemas/2005/12/ct-kip#\"\
    \n     xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n     Version=\"\
    1.0\">\n     <TokenID>12345678</TokenID>\n    <TriggerNonce>112dsdfwf312asder394jw==</TriggerNonce>\n\
    \     <SupportedKeyTypes>\n       <Algorithm>http://www.rsasecurity.com/rsalabs/otps/schemas\n\
    \   /2005/09/otps-wst#SecurID-AES</Algorithm>\n     </SupportedKeyTypes>\n   \
    \  <SupportedEncryptionAlgorithms>\n       <Algorithm>http://www.w3.org/2001/04/xmlenc#rsa-1_5</Algorithm>\n\
    \       <Algorithm>http://www.rsasecurity.com/rsalabs/otps/schemas/\n   2005/12/ct-kip#ct-kip-prf-aes</Algorithm>\n\
    \     </SupportedEncryptionAlgorithms>\n     <SupportedMACAlgorithms>\n      \
    \ <Algorithm>http://www.rsasecurity.com/rsalabs/otps/schemas/\n   2005/12/ct-kip#ct-kip-prf-aes</Algorithm>\n\
    \     </SupportedMACAlgorithms>\n   </ClientHello>\n"
- title: B.4.  Example of a <ServerHello> Message
  contents:
  - "B.4.  Example of a <ServerHello> Message\n   <?xml version=\"1.0\" encoding=\"\
    UTF-8\"?>\n   <ServerHello\n     xmlns=\n   \"http://www.rsasecurity.com/rsalabs/otps/schemas/2005/12/ct-kip#\"\
    \n     xmlns:ds=\"http://www.w3.org/2000/09/xmldsig#\"\n     xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\
    \n     Version=\"1.0\" SessionID=\"4114\" Status=\"Success\">\n     <KeyType>http://www.rsasecurity.com/rsalabs/otps/schemas/2005/09/\n\
    \   otps-wst#SecurID-AES</KeyType>\n     <EncryptionAlgorithm>http://www.rsasecurity.com/rsalabs/otps/\n\
    \   schemas/2005/12/ct-kip#ct-kip-prf-aes</EncryptionAlgorithm>\n     <MacAlgorithm>http://www.rsasecurity.com/rsalabs/otps/schemas/\n\
    \   2005/12/ct-kip#ct-kip-prf-aes</MacAlgorithm>\n     <EncryptionKey>\n     \
    \  <ds:KeyName>KEY-1</ds:KeyName>\n     </EncryptionKey>\n     <Payload>\n   \
    \    <Nonce>qw2ewasde312asder394jw==</Nonce>\n     </Payload>\n   </ServerHello>\n"
- title: B.5.  Example of a <ClientNonce> Message
  contents:
  - "B.5.  Example of a <ClientNonce> Message\n   <?xml version=\"1.0\" encoding=\"\
    UTF-8\"?>\n   <ClientNonce\n     xmlns=\"http://www.rsasecurity.com/rsalabs/otps/schemas/\n\
    \   2005/12/ct-kip#\"\n     xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\
    \n     Version=\"1.0\" SessionID=\"4114\">\n     <EncryptedNonce>vXENc+Um/9/NvmYKiHDLaErK0gk=</EncryptedNonce>\n\
    \   </ClientNonce>\n"
- title: B.6.  Example of a <ServerFinished> Message
  contents:
  - "B.6.  Example of a <ServerFinished> Message\n   <?xml version=\"1.0\" encoding=\"\
    UTF-8\"?>\n   <ServerFinished\n     xmlns=\"http://www.rsasecurity.com/rsalabs/otps/schemas/\n\
    \   2005/12/ct-kip#\"\n     xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\
    \n     Version=\"1.0\" SessionID=\"4114\" Status=\"Success\">\n     <TokenID>12345678</TokenID>\n\
    \     <KeyExpiryDate>2009-09-16T03:02:00Z</KeyExpiryDate>\n     <KeyID>43212093</KeyID>\n\
    \     <ServiceID>Example Enterprise Name</ServiceID>\n     <UserID>exampleLoginName</UserID>\n\
    \     <Extensions>\n       <Extension xsi:type=\"OTPKeyConfigurationDataType\"\
    >\n         <OTPFormat>Decimal</OTPFormat>\n         <OTPLength>6</OTPLength>\n\
    \         <OTPMode><Time/></OTPMode>\n       </Extension>\n     </Extensions>\n\
    \     <Mac>miidfasde312asder394jw==</Mac>\n   </ServerFinished>\n"
- title: 'Appendix C.  Integration with PKCS #11'
  contents:
  - "Appendix C.  Integration with PKCS #11\n   A CT-KIP client that needs to communicate\
    \ with a connected\n   cryptographic token to perform a CT-KIP exchange may use\
    \ PKCS #11 [3]\n   as a programming interface.  When performing CT-KIP with a\n\
    \   cryptographic token using the PKCS #11 programming interface, the\n   procedure\
    \ described in [2], Appendix B, is recommended.\n"
- title: Appendix D.  Example CT-KIP-PRF Realizations
  contents:
  - 'Appendix D.  Example CT-KIP-PRF Realizations

    '
- title: D.1.  Introduction
  contents:
  - "D.1.  Introduction\n   This example appendix defines CT-KIP-PRF in terms of AES\
    \ [8] and HMAC\n   [9].\n"
- title: D.2.  CT-KIP-PRF-AES
  contents:
  - 'D.2.  CT-KIP-PRF-AES

    '
- title: D.2.1.  Identification
  contents:
  - "D.2.1.  Identification\n   For tokens supporting this realization of CT-KIP-PRF,\
    \ the following\n   URI may be used to identify this algorithm in CT-KIP:\n  \
    \ http://www.rsasecurity.com/rsalabs/otps/schemas/2005/12/\n   ct-kip#ct-kip-prf-aes\n\
    \   When this URI is used to identify the encryption algorithm to use,\n   the\
    \ method for encryption of R_C values described in Section 3.6\n   shall be used.\n"
- title: D.2.2.  Definition
  contents:
  - "D.2.2.  Definition\n   CT-KIP-PRF-AES (k, s, dsLen)\n   Input:\n   k     encryption\
    \ key to use\n   s     octet string consisting of randomizing material.  The length\
    \ of\n         the string s is sLen.\n   dsLen desired length of the output\n\
    \   Output:\n   DS    a pseudorandom string, dsLen-octets long\n   Steps:\n  \
    \ 1.  Let bLen be the output block size of AES in octets:\n       bLen = (AES\
    \ output block length in octets)\n       (normally, bLen = 16)\n   2.  If dsLen\
    \ > (2**32 - 1) * bLen, output \"derived data too long\" and\n       stop\n  \
    \ 3.  Let n be the number of bLen-octet blocks in the output data,\n       rounding\
    \ up, and let j be the number of octets in the last block:\n       n = ROUND(\
    \ dsLen / bLen )\n       j = dsLen - (n - 1) * bLen\n   4.  For each block of\
    \ the pseudorandom string DS, apply the function\n       F defined below to the\
    \ key k, the string s and the block index to\n       compute the block:\n    \
    \   B1 = F (k, s, 1) ,\n       B2 = F (k, s, 2) ,\n       ...\n       Bn = F (k,\
    \ s, n)\n   The function F is defined in terms of the OMAC1 construction from\n\
    \   [10], using AES as the block cipher:\n   F (k, s, i) = OMAC1-AES (k, INT (i)\
    \ || s)\n   where INT (i) is a four-octet encoding of the integer i, most\n  \
    \ significant octet first, and the output length of OMAC1 is set to\n   bLen.\n\
    \   Concatenate the blocks and extract the first dsLen octets to produce\n   the\
    \ desired data string DS:\n   DS = B1 || B2 || ... || Bn<0..j-1>\n   Output the\
    \ derived data DS.\n"
- title: D.2.3.  Example
  contents:
  - "D.2.3.  Example\n   If we assume that dsLen = 16, then:\n   n = 16 / 16 = 1\n\
    \   j = 16 - (1 - 1) * 16 = 16\n   DS = B1 = F (k, s, 1) = OMAC1-AES (k, INT (1)\
    \ || S)\n"
- title: D.3.  CT-KIP-PRF-SHA256
  contents:
  - 'D.3.  CT-KIP-PRF-SHA256

    '
- title: D.3.1.  Identification
  contents:
  - "D.3.1.  Identification\n   For tokens supporting this realization of CT-KIP-PRF,\
    \ the following\n   URI may be used to identify this algorithm in CT-KIP:\n  \
    \ http://www.rsasecurity.com/rsalabs/otps/schemas/2005/12/\n   ct-kip#ct-kip-prf-sha256\n\
    \   When this URI is used to identify the encryption algorithm to use,\n   the\
    \ method for encryption of R_C values described in Section 3.6\n   shall be used.\n"
- title: D.3.2.  Definition
  contents:
  - "D.3.2.  Definition\n   CT-KIP-PRF-SHA256 (k, s, dsLen)\n   Input:\n   k     encryption\
    \ key to use\n   s     octet string consisting of randomizing material.  The length\
    \ of\n         the string s is sLen\n   dsLen desired length of the output\n \
    \  Output:\n   DS    a pseudorandom string, dsLen-octets long\n   Steps:\n   1.\
    \  Let bLen be the output size in octets of SHA-256 [11] (no\n       truncation\
    \ is done on the HMAC output):\n       bLen = 32\n   2.  If dsLen > (2**32 - 1)\
    \ bLen, output \"derived data too long\" and\n       stop\n   3.  Let n be the\
    \ number of bLen-octet blocks in the output data,\n       rounding up, and let\
    \ j be the number of octets in the last block:\n       n = ROUND ( dsLen / bLen\
    \ )\n       j = dsLen - (n - 1) * bLen\n   4.  For each block of the pseudorandom\
    \ string DS, apply the function\n       F defined below to the key k, the string\
    \ s and the block index to\n       compute the block:\n       B1 = F (k, s, 1)\
    \ ,\n       B2 = F (k, s, 2) ,\n       ...\n       Bn = F (k, s, n)\n   The function\
    \ F is defined in terms of the HMAC construction from [9],\n   using SHA-256 as\
    \ the digest algorithm:\n   F (k, s, i) = HMAC-SHA256 (k, INT (i) || s)\n   where\
    \ INT (i) is a four-octet encoding of the integer i, most\n   significant octet\
    \ first, and the output length of HMAC is set to\n   bLen.\n   Concatenate the\
    \ blocks and extract the first dsLen octets to produce\n   the desired data string\
    \ DS:\n   DS = B1 || B2 || ... || Bn<0..j-1>\n   Output the derived data DS.\n"
- title: D.3.3.  Example
  contents:
  - "D.3.3.  Example\n   If we assume that sLen = 256 (two 128-octet long values)\
    \ and dsLen =\n   16, then:\n   n = ROUND ( 16 / 32 ) = 1\n   j = 16 - (1 - 1)\
    \ * 32 = 16\n   B1 = F (k, s, 1) = HMAC-SHA256 (k, INT (1) || s )\n   DS = B1<0\
    \ ... 15>\n   That is, the result will be the first 16 octets of the HMAC output.\n"
- title: Appendix E.  About OTPS
  contents:
  - "Appendix E.  About OTPS\n   The One-Time Password Specifications are documents\
    \ produced by RSA\n   Laboratories in cooperation with secure systems developers\
    \ for the\n   purpose of simplifying integration and management of strong\n  \
    \ authentication technology into secure applications, and to enhance\n   the user\
    \ experience of this technology.\n   Further development of the OTPS series will\
    \ occur through mailing\n   list discussions and occasional workshops, and suggestions\
    \ for\n   improvement are welcome.  As for our PKCS documents, results may also\n\
    \   be submitted to standards forums.  For more information, contact:\n   OTPS\
    \ Editor\n   RSA Laboratories\n   174 Middlesex Turnpike\n   Bedford, MA  01730\
    \ USA\n   otps-editor@rsasecurity.com\n   http://www.rsasecurity.com/rsalabs/\n"
- title: Author's Address
  contents:
  - "Author's Address\n   Magnus Nystroem\n   RSA Security\n   EMail: magnus@rsasecurity.com\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The IETF Trust (2006).\n   This document\
    \ is subject to the rights, licenses and restrictions\n   contained in BCP 78,\
    \ and except as set forth therein, the authors\n   retain all their rights.\n\
    \   This document and the information contained herein are provided on an\n  \
    \ \"AS IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n  \
    \ OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY, THE IETF TRUST,\n   AND THE\
    \ INTERNET ENGINEERING TASK FORCE DISCLAIM ALL WARRANTIES,\n   EXPRESS OR IMPLIED,\
    \ INCLUDING BUT NOT LIMITED TO ANY WARRANTY THAT\n   THE USE OF THE INFORMATION\
    \ HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY\n   IMPLIED WARRANTIES OF MERCHANTABILITY\
    \ OR FITNESS FOR A PARTICULAR\n   PURPOSE.\n"
- title: Intellectual Property
  contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or\
    \ scope of any\n   Intellectual Property Rights or other rights that might be\
    \ claimed to\n   pertain to the implementation or use of the technology described\
    \ in\n   this document or the extent to which any license under such rights\n\
    \   might or might not be available; nor does it represent that it has\n   made\
    \ any independent effort to identify any such rights.  Information\n   on the\
    \ procedures with respect to rights in RFC documents can be\n   found in BCP 78\
    \ and BCP 79.\n   Copies of IPR disclosures made to the IETF Secretariat and any\n\
    \   assurances of licenses to be made available, or the result of an\n   attempt\
    \ made to obtain a general license or permission for the use of\n   such proprietary\
    \ rights by implementers or users of this\n   specification can be obtained from\
    \ the IETF on-line IPR repository at\n   http://www.ietf.org/ipr.\n   The IETF\
    \ invites any interested party to bring to its attention any\n   copyrights, patents\
    \ or patent applications, or other proprietary\n   rights that may cover technology\
    \ that may be required to implement\n   this standard.  Please address the information\
    \ to the IETF at\n   ietf-ipr@ietf.org.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
