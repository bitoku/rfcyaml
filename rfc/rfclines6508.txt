Abstract In this document, the Sakai Kasahara Key Encryption (SAKKE) algorithm is described.
This uses Identity Based Encryption to exchange a shared secret from a Sender to a Receiver.
This document defines an efficient use of Identity Based Encryption (IBE) based on bilinear pairings.
The Sakai Kasahara IBE cryptosystem [S K] is described for establishment of a shared secret value.
This document adds to the IBE options available in [RFC5091], providing an efficient primitive and an additional family of curves.
This document is restricted to a particular family of curves (see Section 2.1) that have the benefit of a simple and efficient method of calculating the pairing on which the Sakai Kasahara IBE cryptosystem is based.
IBE schemes allow public and private keys to be derived from Identifiers.
In fact, the Identifier can itself be viewed as corresponding to a public key or certificate in a traditional public key system.
However, in IBE, the Identifier can be formed by both Sender and Receiver, which obviates the necessity of providing public keys through a third party or of transmitting certified public keys during each session establishment.
Furthermore, in an IBE system, calculation of keys can occur as needed, and indeed, messages can be sent to users who are yet to enroll.
The Sakai Kasahara primitive described in this document supports simplex transmission of messages from a Sender to a Receiver.
The choice of elliptic curve pairing on which the primitive is based allows simple and efficient implementations.
The Sakai Kasahara Key Encryption scheme described in this document is drawn from the Sakai Kasahara Key Encapsulation Mechanism
(SK KEM) scheme (as modified to support multi party communications) submitted to the IEEE P1363 Working Group in [SK KEM].
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in [RFC2119].
2.  Notation and Definitions 2.1.
A security parameter; the size of symmetric keys in bits to be exchanged by SAKKE.
A prime, which is the order of the finite field F p.
In this document, p is always congruent to 3 modulo 4.
The finite field of order p. F
The multiplicative group of the non zero elements in the field F; e.g., (F p)  is the multiplicative group of the finite field F p. q
An odd prime that divides p   1.
To provide the desired level of security, lg(q) MUST be greater than 2 n.
An elliptic curve defined over F p, having a subgroup of order q.
In this document, we use supersingular curves with equation y^2   x^3 3
This curve is chosen because of the efficiency and simplicity advantages it offers.
The choice of  3 for the coefficient of x provides advantages for elliptic curve arithmetic that are explained in [P1363].
A further reason for this choice of curve is that Barreto's trick [Barreto] of eliminating the computation of the denominators when calculating the pairing applies.
The coordinates of P are given by P   (P x,P y).
These coordinates are in F p, and they satisfy the curve equation.
The null element of any additive group of points on an elliptic curve, also called the point at infinity.
The extension field of degree 2 of the field F p.
In this document, we use a particular instantiation of this field; F p^2   F p[i], where i^2   1   0.
The projectivization of F p.
We define this to be (F p^2) /(F
Note that PF p is cyclic and has order p   1, which is divisible by q. G[q]
The q torsion of a group G.
A version of the Tate Lichtenbaum pairing.
In this document, this is a bilinear map from E(F p)[q]
x E(F p)[q] onto the subgroup of order q in PF p.
A full definition is given in Section 3.2.
The base 2 logarithm of the real value
The following conventions are assumed for curve operations: Point addition
If A and B are two points on a curve E, their sum is denoted as A   B. Scalar multiplication If A is a point on a curve, and k an integer, the result of adding A to itself a total of k times is denoted [k]A.
We assume that the following concrete representations of mathematical objects are used: Elements of F p The p elements of F p are represented directly using the integers from 0 to p 1.
The elements of F p^2   F p[i] are represented as x 1
x 2, where x 1 and x 2 are elements of F p. Elements of PF p Elements of PF p
are cosets of (F p)  in (F p^2) .
Every element of F p^2 can be written unambiguously in the form x
x 2, where x 1 and x 2 are elements of F p.
Thus, elements of PF p (except the unique element of order 2) can be represented unambiguously by x 2
x 1 in F p.
Since q is odd, every element of PF p[q] can be represented by an element of F p in this manner.
This representation of elements in PF p[q] allows efficient implementation of PF p[q] group operations, as these can be defined using arithmetic in F p.
If a and b are elements of F p representing elements A and B of PF p[q],
respectively, then A   B in PF p[q] is represented by (a   b)/(1 a   b) in F p. 2.2.
Definitions Identifier Each user of an IBE system MUST have a unique, unambiguous identifying string that can be easily derived by all valid communicants.
This string is the user's Identifier.
An Identifier is an integer in the range 2 to q 1.
The method by which Identifiers are formed MUST be defined for each application.
The Key Management Service is a trusted third party for the IBE system.
It derives system secrets and distributes key material to those authorized to obtain it.
Applications MAY support mutual communication between the users of multiple KMSs.
We denote KMSs by KMS T, KMS S, etc.
The public parameters are a set of parameters that are held by all users of an IBE system.
Such a system MAY contain multiple KMSs.
Each application of SAKKE MUST define the set of public parameters to be used.
The parameters needed are p, q, E, P, g <P,P>, Hash, and n. Master Secret (z T)
The Master Secret z T is the master key generated and privately kept by KMS T and is used by KMS T to generate the private keys of the users that it provisions; it is an integer in the range 2 to q 1.
The KMS Public Key Z T is used to form Public Key Establishment Keys for all users provisioned by KMS T; it is a point of order q in E(F p).
It MUST be provisioned by KMS T to all who are authorized to send messages to users of the IBE system.
Each user enrolled in an IBE system is provisioned with a Receiver Secret Key by its KMS.
The RSK provided to a user with Identifier 'a' by KMS T is denoted K (a,T).
In SAKKE, the RSK is a point of order q in E(F p).
The aim of the SAKKE scheme is for the Sender to securely transmit a shared secret value to the Receiver.
The SSV is an integer in the range 0 to (2^n)
The Encapsulated Data are used to transmit secret information securely to the Receiver.
They can be computed directly from the Receiver's Identifier, the public parameters, the KMS Public Key, and the SSV to be transmitted.
In SAKKE, the Encapsulated Data are a point of order q in E(F p) and an integer in the range 0 to (2^n)
They are formatted as described in Section 4. 2.3.
Parameters to Be Defined or Negotiated
In order for an application to make use of the SAKKE algorithm, the communicating hosts MUST agree on values for several of the parameters described above.
For the following parameters, each application MUST either define an application specific constant value or define a mechanism for hosts to negotiate a value:
Elliptic Curves and Pairings E is a supersingular elliptic curve (of j invariant 1728).
E(F p) contains a cyclic subgroup of order q, denoted E(F p)[q], whereas the larger object E(F p^2) contains the direct product of two cyclic subgroups of order q, denoted E(F p^2)[q].
P is a generator of E(F p)[q].
It is specified by the (affine) coordinates (P x,P y) in F p, satisfying the curve equation.
Routines for point addition and doubling on E(F p) can be found in Appendix A.10 of [P1363].
E(F p^2) and the Distortion Map
If (Q x,Q y) are (affine) coordinates in F p for some point (denoted Q) on E(F p)[q], then
( Q x,iQ y) are (affine) coordinates in F p^2 for some point on E(F p^2)[q].
This latter point is denoted [i]Q, by analogy with the definition for scalar multiplication.
The two points P and
[i]P together generate E(F p^2)[q].
The map [i]: E(F p)
E(F p^2) is sometimes termed the distortion map.
We will need to evaluate polynomials f R that depend on points on E(F p)[q].
Miller's algorithm [Miller] provides a method for evaluation of f R(X), where X is some element of E(F p^2)[q] and R is some element of E(F p)[q] and f R is some polynomial over F p whose divisor is (q)(R)
Note that f R is defined only up to scalars of F p.
The version of the Tate Lichtenbaum pairing used in this document is given by <R,Q>   f R([i]Q)^c / (F p) .
It satisfies the bilinear relation <[x]R,Q
<R,Q>^x for all Q, R in E(F p)[q], for all integers x.  Note that the domain of definition is restricted to E(F p)[q]
x E(F p)[q] so that certain optimizations are natural.
We provide pseudocode for computing <R,Q>, with elliptic curve arithmetic expressed in affine coordinates.
We make use of Barreto's trick [Barreto] for avoiding the calculation of denominators.
Note that this section does not fully describe the most efficient way of computing the pairing
; it is possible to compute the pairing without any explicit reference to the extension field F p^2.
This reduces the number and complexity of the operations needed to compute the pairing.
Copyright (c) 2012 IETF Trust and the persons identified as authors of the code.
Redistribution and use in source and binary forms, with or without modification, is permitted pursuant to, and subject to the license terms contained in, the Simplified BSD License set forth in Section 4.c of the IETF Trust's Legal Provisions Relating to IETF Documents (http://trustee.ietf.org/license info).
An element of E(F p)[q]
An integer for bits of q 1, starting with the second most significant bit, ending with the least significant bit, do //
gradient of line through C, C, [ 2]C. l   3
( C x^2 1 )
( l ( Q x   C x )
( C y R y )
( l ( Q x   C x )
; return representative in F p of t; End of routine; Routine for computing representative in F p of elements of PF p:
Input t, in F p^2, representing an element of PF p; Represent t as a   i b, with a,b in F p; return b/a
; End of routine; <CODE ENDS> 4.
This section provides canonical representations of values that MUST be used to ensure interoperability of implementations.
The following representations MUST be used for input into hash functions and for transmission.
To achieve this, the integer is represented most significant bit first, and padded with zero bits on the left until an octet string of the necessary length is obtained.
This is the octet string representation described in Section 6 of [RFC6090].
Such octet strings MUST have length L   Ceiling(lg(p)/8).
They are therefore represented as octet strings as defined above and are L octets in length.
Representation of the unique element of order 2 in PF p will not be required.
For an elliptic curve point (x,y) with x and
, this representation is given by 0x04
x, y' is the octet string representing y, and    denotes concatenation.
The representation is 2 L 1 octets in length.
The Encapsulated Data MUST be represented as an elliptic curve point concatenated with an integer in the range 0 to (2 ^ n)
Since the length of the representation of elements of F p is well defined given p, these data can be unambiguously parsed to retrieve their components.
The Encapsulated Data is 2 L
Hashing to an Integer Range
We use the function HashToIntegerRange( s, n, hashfn ) to hash strings to an integer range.
Given a string (s), a hash function (hashfn), and an integer (n), this function returns a value between 0 and n 1.
(2^hashlen)^hashlen   a hash function, hashfn, with output length hashlen bits Output:   an integer, v, in the range 0 to n 1 Method: 1)
Let A   hashfn( s ) 2) Let h
...00, a string of null bits of length hashlen bits 3) Let l   Ceiling(lg(n)/hashlen) 4)
For each i in 1 to l, do: a)
) Let v   v' mod n 6.
This section describes the Sakai Kasahara Key Encryption algorithm.
It draws from the cryptosystem first described in [S K].
All users share a set of public parameters with a KMS.
In most circumstances, it is expected that a system will only use a single KMS.
However, it is possible for users provisioned by different KMSs to interoperate, provided that they use a common set of public parameters and that they each possess the necessary KMS Public Keys.
In order to facilitate this interoperation, it is anticipated that parameters will be published in application specific standards.
KMS T chooses its KMS Master Secret, z
It MUST randomly select a value in the range 2 to q 1, and assigns this value to z T.
It MUST derive its KMS Public Key, Z T, by performing the calculation Z T   [z
The KMS derives each RSK from an Identifier and its KMS Master Secret.
It MUST derive a RSK for each user that it provisions.
For Identifier 'a', the RSK K (a,T) provided by KMS T MUST be derived by KMS T as K (a,T)
[(a   z T)^ 1]P, where 'a' is interpreted as an integer, and the inversion is performed modulo q. 6.1.2.
The KMS MUST provide its KMS Public Key to all users through an authenticated channel.
RSKs MUST be supplied to all users through a channel that provides confidentiality and mutual authentication.
The mechanisms that provide security for these channels are beyond the scope of this document: they are application specific.
Upon receipt of key material, each user MUST verify its RSK.
a', RSKs from KMS T are verified by checking that the following equation holds:
< [a]P   Z, K (a,T)
g, where 'a' is interpreted as an integer.
Key Exchange A Sender forms Encapsulated Data and sends it to the Receiver, who processes it.
The result is a shared secret that can be used as keying material for securing further communications.
We denote the Sender A with Identifier '
a'; we denote the Receiver B with Identifier 'b'; Identifiers are to be interpreted as integers in the algorithms below.
Let A be provisioned by KMS T and B be provisioned by KMS S. 6.2.1.
In order to form Encapsulated Data to send to device B who is provisioned by KMS S, A needs to hold Z S.
It is anticipated that this will have been provided to A by KMS T along with its User Private Keys.
The Sender MUST carry out the following steps
: 1) Select a random ephemeral integer value for the SSV in the range 0 to 2^n 1; 2)
HashToIntegerRange( SSV    b, q, Hash ); 3) Compute R (b,S)
[r]([b]P   Z S) in E(F p); 4) Compute the Hint, H; a) Compute g^r.
Note that g is an element of PF p[q] represented by an element of F p.
Thus, in order to calculate g^r, the operation defined in Section 2.1 for calculation of A   B in PF p[q] is to be used as part of a square and multiply (or similar) exponentiation algorithm, rather than the regular F p operations
; b) Compute H :
( g^r, 2^n, Hash ); 5) Form the Encapsulated Data ( R (b,S), H ), and transmit it to B;
6) Output SSV for use to derive key material for the application to be keyed.
Receiver Device B receives Encapsulated Data from device A.
In order to process this, it requires its RSK, K (b,S), which will have been provisioned in advance by KMS S.
The method by which keys are provisioned by the KMS is application specific.
The Receiver MUST carry out the following steps to derive and verify the SSV
: 1) Parse the Encapsulated Data ( R (b,S), H ), and extract R (b,S) and H; 2)
Note that by bilinearity, w   g^r; 3) Compute SSV
( w, 2^n, Hash ); 4) Compute r
HashToIntegerRange( SSV    b, q, Hash ); 5)
[r]([b]P   Z S) in E(F p).
If TEST does not equal R (b,S), then B MUST NOT use the SSV to derive key material;
6) Output SSV for use to derive key material for the application to be keyed.
The SAKKE scheme can be used to exchange SSVs for group communications.
To provide a shared secret to multiple Receivers, a Sender MUST form Encapsulated Data for each of their Identifiers and transmit the appropriate data to each Receiver.
Any party possessing the group SSV MAY extend the group by forming Encapsulated Data for a new group member.
While the Sender needs to form multiple Encapsulated Data, the fact that the sending operation avoids pairings means that the extension to multiple Receivers can be carried out more efficiently than for alternative IBE schemes that require the Sender to compute a pairing.
This document describes the SAKKE cryptographic algorithm.
We assume that the security provided by this algorithm depends entirely on the secrecy of the secret keys it uses, and that for an adversary to defeat this security, he will need to perform computationally intensive cryptanalytic attacks to recover a secret key.
Note that a security proof exists for SAKKE in the Random Oracle Model [SK KEM].
When defining public parameters, guidance on parameter sizes from [SP800 57] SHOULD be followed.
Note that the size of the F p^2 discrete logarithm on which the security rests is 2 lg(p).
Table 1 shows bits of security afforded by various sizes of p.
If k bits of security are needed, then lg(q) SHOULD be chosen to be at least 2 k.
Similarly, if k bits of security are needed, then a hash with output size
at least 2 k SHOULD be chosen.
The KMS Master Secret provides the security for each device provisioned by the KMS.
It MUST NOT be revealed to any other entity.
Each user's RSK protects the SAKKE communications it receives.
This key MUST NOT be revealed to any entity other than the trusted KMS and the authorized user.
In order to ensure that the RSK is received only by an authorized device, it MUST be provided through a secure channel.
The security offered by this system is no greater than the security provided by this delivery channel.
Note that IBE systems have different properties than other asymmetric cryptographic schemes with regard to key recovery.
The KMS (and hence any administrator with appropriate privileges) can create RSKs for arbitrary Identifiers, and procedures to monitor the creation of RSKs, such as logging of administrator actions, SHOULD be defined by any functioning implementation of SAKKE.
Identifiers MUST be defined unambiguously by each application of SAKKE.
Note that it is not necessary to hash the data in a format for Identifiers (except in the case where its size would be greater than that of q).
In this way, any weaknesses that might be caused by collisions in hash functions can be avoided without reliance on the structure of the Identifier format.
Applications of SAKKE MAY include a time/date component in their Identifier format to ensure that Identifiers (and hence RSKs) are only valid for a fixed period of time.
The randomness of values stipulated to be selected at random in SAKKE, as described in this document, is essential to the security provided by SAKKE.
If the ephemeral value r selected by the Sender is not chosen at random, then the SSV, which is used to provide key material for further communications, could be predictable.
Guidance on the generation of random values for security can be found in [RFC4086].
This appendix provides test data for SAKKE with the public parameters defined in Appendix A of [RFC6509].
'b' represents the Identifier of the Responder.
The value "mask" is the value used to mask the SSV and is defined to be HashToIntegerRange( g^r, 2^n, Hash ).
HashToIntegerRange( 12345678 9ABCDEF0 12345678 9ABCDEF0 32303131 2D303200 74656C3A
2B343437 37303039 30303132 3300, q, SHA 256 )
AB8592A6 A5A3DDCA 5CF896C7 18043606 A01D650D EF37A01F 37C228C3
8C6721D5 2C3AD103 A10EBD29 59248B4E F006836B
ABC78A13 A760C0BF 3F77E63D 0DF3F1A3 41A41B88 11DF197F
53FB182C 68F09CF6 CD9C4A53 DA6C74AD 007AF36B
HashToIntegerRange( 7D2A8438 E6291C64 9B6579EB 3B79EAE9 48B1DE9E 5F7D1F40 70A08F8D
ABC78A13 A760C0BF 3F77E63D 0DF3F1A3 41A41B88 11DF197F
53FB182C 68F09CF6 CD9C4A53 DA6C74AD 007AF36B
ABC78A13 A760C0BF 3F77E63D 0DF3F1A3 41A41B88 11DF197F
53FB182C 68F09CF6 CD9C4A53 DA6C74AD 007AF36B
F6FE0EB6 5337A63F 9CC97728 B8E5AD04 60FADE14
AB8592A6 A5A3DDCA 5CF896C7 18043606 A01D650D EF37A01F 37C228C3
D893793A 41FF5C49 B87E79F2 BE4D56CE TESTy
D85BB1D4 B9CE4F8B E4B08A12 BABF55B1 D6F1D7A6 38019EA2
8C6721D5 2C3AD103 A10EBD29 59248B4E F006836B
( M, q, SHA 256 )
3B0A61EA C56DB078 v mod q
F6FE0EB6 5337A63F 9CC97728 B8E5AD04 60FADE14 4369AA5B 21662132 47712096 //
