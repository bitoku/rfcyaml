- title: __initial_text__
  contents:
  - '                 Multiprotocol Interoperability In IPng

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo provides information for the Internet community.\
    \  This memo\n   does not specify an Internet standard of any kind.  Distribution\
    \ of\n   this memo is unlimited.\n"
- title: Abstract
  contents:
  - "Abstract\n   This document was submitted to the IETF IPng area in response to\
    \ RFC\n   1550.  Publication of this document does not imply acceptance by the\n\
    \   IPng area of any ideas expressed within.  Comments should be\n   submitted\
    \ to the big-internet@munnari.oz.au mailing list.\n"
- title: 1.  Executive Summary
  contents:
  - "1.  Executive Summary\n   The two most commonly cited issues motivating the introduction\
    \ of\n   IPng are address depletion and routing table growth in IPv4.  Further\n\
    \   motivation is the fact that the Internet is witnessing an increasing\n   diversity\
    \ in the protocols and services found in the network.  When\n   evaluating alternatives\
    \ for IPng, we should consider how well each\n   alternative addresses the problems\
    \ arising from this diversity.  In\n   this document, we identify several features\
    \ that affect a protocol's\n   ability to operate in a multiprotocol environment\
    \ and propose the\n   incorporation of these features into IPng.\n   Our thesis,\
    \ succinctly stated, is:  The next generation Internet\n   Protocol should have\
    \ features that support its use with a variety of\n   protocol architectures.\n"
- title: 2.  Introduction
  contents:
  - "2.  Introduction\n   The Internet is not a single protocol network [4].  While\
    \ TCP/IP\n   remains the primary protocol suite, other protocols (e.g., IPX,\n\
    \   AppleTalk, OSI) exist either natively or encapsulated as data within\n   IP.\
    \ As new protocols continue to be developed, we are likely to find\n   that a\
    \ significant portion of the traffic in future networks is not\n   from single-protocol\
    \ communications.  It is important to recognize\n   that multiprotocol networking\
    \ is not just a transition issue.  For\n   instance, we will continue to see tunneling\
    \ used to carry IPX traffic\n   over the Internet between two Novell networks.\
    \  Furthermore, the\n   introduction of IPng is not going to result in a near\
    \ term\n   elimination of IPv4.  Even when IPng becomes the primary protocol\n\
    \   used in the Internet, there will still be IPv4 systems in use.  We\n   should\
    \ consider such multiprotocol uses of the network as we design\n   future protocols\
    \ that can efficiently handle mixed protocol traffic.\n   We have identified several\
    \ issues related to the way in which\n   protocols operate in a multiprotocol\
    \ environment.  Many of these\n   issues have traditionally been deemed \"less\
    \ important\" by protocol\n   designers since their goal was to optimize for the\
    \ case where all\n   systems supported the same protocol.  With the increasing\
    \ diversity\n   of network protocols, this approach is no longer practical.  By\n\
    \   addressing the issues outlined in this paper, we can simplify the\n   introduction\
    \ of IPng to the Internet and reduce the risk for network\n   managers faced with\
    \ the prospect of supporting a new protocol.  This\n   will result in a faster,\
    \ wider acceptance of IPng and increased\n   interoperability between Internet\
    \ hosts.  In addition, by designing\n   IPng to address these issues, we will\
    \ make the introduction of future\n   protocols (IPng2) even easier.\n   The outline\
    \ for this document is as follows.  In Section 3 we\n   motivate the issues of\
    \ multiprotocol networking with a discussion of\n   an example system.  In Section\
    \ 4 we describe three main techniques\n   for dealing with multiple protocols.\
    \  This is followed in Section 5\n   by a description of the various protocol\
    \ features that are important\n   for implementing these three techniques.  We\
    \ conclude in Section 6\n   with a summary of the issues raised.\n"
- title: 3.  Multiprotocol Systems
  contents:
  - "3.  Multiprotocol Systems\n   Consider the multiprotocol architecture depicted\
    \ in Figure 1.  A\n   system supporting this architecture provides a generic file-transfer\n\
    \   service using either the Internet or OSI protocol stacks.  The\n   generic\
    \ service presents the user with a consistent interface,\n   regardless of the\
    \ actual protocols used.  The user can transfer files\n   between this host and\
    \ hosts supporting either of the single protocol\n   stacks presented in Figures\
    \ 2a and 2b.  To carry out this file\n   transfer, the user is not required to\
    \ decide which protocols to use\n   or to adjust between different application\
    \ interfaces.\n             +-----------------------------------+\n          \
    \   |       File Transfer Service       |\n             +-----------+-----------------------+\n\
    \             |           |         FTAM          |\n             |          \
    \ +-----------------------+\n             |   FTP     |       ISO 8823       \
    \ |\n             |           +-----------------------+\n             |      \
    \     |       ISO 8327        |\n             |           +-----------+-----------+\n\
    \             |           |TP0/RFC1006|   TP4     |\n             +-----------+-----------+\
    \           |\n             |          TCP          |           |\n          \
    \   +-----------+-----------+-----------+\n             |    IP     |        \
    \ CLNP          |\n             +-----------+-----------------------+\n Figure\
    \ 1:  Multiprotocol architecture providing file-transfer service\n   +-----------+\
    \     +-----------+     +-----------+     +-----------+\n   |   FTP     |    \
    \ |   FTAM    |     |   FTAM    |     |   FTP     |\n   +-----------+     +-----------+\
    \     +-----------+     +-----------+\n   |   TCP     |     | ISO 8823  |    \
    \ | ISO 8823  |     |   TCP     |\n   +-----------+     +-----------+     +-----------+\
    \     +-----------+\n   |    IP     |     | ISO 8327  |     | ISO 8327  |    \
    \ |   CLNP    |\n   +-----------+     +-----------+     +-----------+     +-----------+\n\
    \                     |   TP4     |     |TP0/RFC1006|\n                     +-----------+\
    \     +-----------+\n                     |   CLNP    |     |   TCP     |\n  \
    \                   +-----------+     +-----------+\n                        \
    \               |    IP     |\n                                       +-----------+\n\
    \    a) TCP/IP         b) OSI            c) RFC 1006       d) TUBA\n      Figure\
    \ 2:  Protocol stacks providing file-transfer service.\n   Figure 2c depicts a\
    \ mixed stack architecture that provides the upper\n   layer OSI services using\
    \ the Internet protocols.  This is an example\n   of a \"transition architecture\"\
    \ for providing OSI applications without\n   requiring a full OSI implementation.\
    \  Figure 2d depicts a mixed stack\n   architecture that provides the upper layer\
    \ Internet applications\n   using the OSI network protocol.  In addition to communicating\
    \ with\n   the two previous simple protocol stacks, the multiprotocol system of\n\
    \   Figure 1 includes all the protocols necessary to communicate with\n   these\
    \ two new, mixed protocol stacks.\n   It is likely that many future network systems\
    \ will be configured to\n   support multiple protocols including IPng.  As the\
    \ IPng protocol is\n   deployed, it is unreasonable to expect that users will\
    \ be willing to\n   give up any aspect of their current connectivity for the promise\
    \ of a\n   better future.  In reality, most IPng installations will be made \"\
    in\n   addition to\" the current protocols.  The resulting systems will\n   resemble\
    \ Figure 1 in that they will be able to communicate with\n   systems supporting\
    \ several different protocols.\n   Unfortunately, in most current examples, the\
    \ architecture of Figure 1\n   is implemented as independent protocol stacks.\
    \  This means that even\n   though both TCP and CLNP exist on the system, there\
    \ is no way to use\n   TCP and CLNP in the same communication.  The problem with\
    \ current\n   implementations of architectures like Figure 1 is that they are\n\
    \   designed as co-existence architectures and are not integrated\n   interoperability\
    \ systems.  We believe future systems should include\n   mechanisms to overcome\
    \ this traditional limitation.  By integrating\n   the components of multiple\
    \ protocol stacks in a systematic way, we\n   can interoperate with hosts supporting\
    \ any of the individual stacks\n   as well as those supporting various combinations\
    \ of the stacks.\n   In order to effectively use multiple protocols, a system\
    \ must\n   identify which of the available protocols to use for a given\n   communication\
    \ task.  We call this the Protocol Determination [2]\n   task.  In performing\
    \ this task, a system determines the combination\n   of protocols necessary to\
    \ provide the needed service.  For achieving\n   interoperability, protocols are\
    \ selected from the intersection of\n   those supported on the systems that must\
    \ communicate.\n"
- title: 4.  Multiprotocol Techniques
  contents:
  - "4.  Multiprotocol Techniques\n   In this section we identify three main techniques\
    \ to dealing with\n   multiprotocol networks that are in use today and will continue\
    \ to be\n   used in the Internet.  The first two techniques, tunneling and\n \
    \  conversion, are categorized as intermediate-system techniques in that\n   they\
    \ are designed to achieve multiprotocol support without changing\n   the end-systems.\
    \  The third technique explicitly calls for the\n   support of multiple protocols\
    \ in end-systems.  By describing these\n   techniques here, we can motivate the\
    \ need for the specific protocol\n   features described in Section 5.\n"
- title: 4.1  Encapsulation/Tunneling
  contents:
  - "4.1  Encapsulation/Tunneling\n   Encapsulation or tunneling is commonly used\
    \ when two networks that\n   support a common protocol must be connected using\
    \ a third\n   intermediate network running a different protocol.  Protocol packets\n\
    \   from the two end networks are carried as data within the protocol of\n   the\
    \ intermediate network.  This technique is only appropriate when\n   both end-systems\
    \ support the same protocol stack.  It does not\n   provide interoperability between\
    \ these end systems and systems that\n   only support the protocol stack in the\
    \ intermediate network.  Some\n   examples of this technique are:  a mechanism\
    \ for providing the OSI\n   transport services on top of the Internet protocols\
    \ [13],\n   encapsulating IEEE 802.2 frames in IPX network packets [5], tunneling\n\
    \   IPX [10] and AppleTalk traffic over the Internet backbone.  We expect\n  \
    \ IPng to be used for tunneling other network protocols over IPng and\n   to be\
    \ encapsulated.\n"
- title: 4.2  Translation/Conversion
  contents:
  - "4.2  Translation/Conversion\n   Despite their known limitations [8], translation\
    \ or conversion\n   gateways are another technique for handling multiple protocols\
    \ [11,\n   12].  These gateways perform direct conversion of network traffic\n\
    \   from one protocol to another.  The most common examples of conversion\n  \
    \ gateways are the many electronic mail gateways now in use in the\n   Internet.\
    \  In certain cases it may also be feasible to perform\n   conversion of lower\
    \ layer protocols such as the network layer.  This\n   technique has been suggested\
    \ as part of the transition plan for some\n   of the current IPng proposals [3,\
    \ 15].\n"
- title: 4.3  Multiprotocol End-Systems
  contents:
  - "4.3  Multiprotocol End-Systems\n   We expect that IPng will be introduced as\
    \ an additional protocol in\n   many network systems.  This means that IPng should\
    \ be able to coexist\n   with other protocols on both end- and intermediate-systems.\n\
    \   Specifically, IPng should be designed to support the Protocol\n   Determination\
    \ task described in Section 3.\n   One technique that we consider for solving\
    \ the Protocol Determination\n   problem is to employ a directory service in distributing\
    \ system\n   protocol configuration information.  We have developed and\n   implemented\
    \ mechanism for using the Internet Domain Name System (DNS)\n   [6, 7] to distribute\
    \ this protocol information [2].  Using this\n   mechanism, a multiprotocol host\
    \ can determine the protocol\n   configuration of a desired host when it retrieves\
    \ the network address\n   for that host.  Then the multiprotocol host can match\
    \ the\n   configuration of the desired host to its own configuration and\n   determine\
    \ which protocols should be used to carry out the requested\n   communication\
    \ service.\n   Another alternative to determining protocol information about another\n\
    \   host is Protocol Discovery.  Using this approach, a host determines\n   which\
    \ protocols to use by trial-and-error with the protocols\n   currently available.\
    \  The initiating host monitors successive\n   attempts to communicate and uses\
    \ the information gained from that\n   monitoring to build a knowledge base of\
    \ the possible protocols of the\n   remote system.\n   This knowledge is used\
    \ to determine whether or not a communication\n   link can be established and\
    \ if it can, which protocol should be used.\n   An important aspect of the Protocol\
    \ Discovery approach is that it\n   requires an error and control feedback system\
    \ similar to ICMP [9],\n   but with additional functionality (See Section 5).\n"
- title: 5.  Protocol Features
  contents:
  - "5.  Protocol Features\n   In this section we identify features that affect a\
    \ protocol's ability\n   to support the multiprotocol techniques described in\
    \ the previous\n   section.  These features indicate specific areas that should\
    \ be\n   considered when comparing proposed protocols.  We present two\n   different\
    \ types of protocol features:  those that should be included\n   as part of the\
    \ IPng protocol standard, and those that should be\n   considered as part of the\
    \ implementation and deployment requirements\n   for IPng.\n"
- title: 5.1  Protocol Standard Features
  contents:
  - "5.1  Protocol Standard Features\n   o Addressing\n      A significant problem\
    \ in dealing with multiprotocol networks is\n      that most of the popular network\
    \ protocols use different\n      addressing mechanisms.  The problem is not just\
    \ with different\n      lengths but also with different semantics (e.g., hierarchical\
    \ vs.\n      flat addresses).  In order to accommodate these multiple formats,\n\
    \      IPng should have the flexibility to incorporate many address\n      formats\
    \ within its addressing mechanism.\n      A specific example might be for IPng\
    \ to have the ability to\n      include an IPv4 or IPX address as a subfield of\
    \ the IPng address.\n      This would reduce the complexity of performing address\
    \ conversion\n      by limiting the number of external mechanisms (e.g., lookup\n\
    \      tables) needed to convert an address.  This reduction in\n      complexity\
    \ would facilitate both tunneling and conversion.  It\n      would also simplify\
    \ the task of using IPng with legacy\n      applications which rely on a particular\
    \ address format.\n   o Header Option Handling\n      In any widely used protocol,\
    \ it is advantageous to define option\n      mechanisms for including header information\
    \ that is not required\n      in all packets or is not yet defined.  This is especially\
    \ true in\n      multiprotocol networks where there is wide variation in the\n\
    \      requirements of protocol users.  IPng should provide efficient,\n     \
    \ flexible support for future header options.  This will better\n      accommodate\
    \ the different user needs and will facilitate\n      conversion between IPng\
    \ and other protocols with different\n      standard features.\n      As part\
    \ of the support for protocol options, IPng should include a\n      mechanism\
    \ for specifying how a system should handle unsupported\n      options.  If a\
    \ network system adds an option header, it should be\n      able to specify whether\
    \ another system that does not support the\n      option should drop the packet,\
    \ drop the packet and return an\n      error, forward it as is, or forward it\
    \ without the option header.\n      The ability to request the \"forward as is\"\
    \ option is important\n      when conversion is used.  When two protocols have\
    \ different\n      features, a converter may introduce an option header that is\
    \ not\n      understood by an intermediate node but may be required for\n    \
    \  interpretation of the packet at the ultimate destination.  On the\n      other\
    \ hand, consider the case where a source is using IPng with a\n      critical\
    \ option like encryption.  In this situation the user would\n      not want a\
    \ conversion to be performed where the option was not\n      understood by the\
    \ converter.  The \"drop the packet\" or \"drop and\n      return error\" options\
    \ would likely be used in this scenario.\n   o Multiplexing\n      The future\
    \ Internet protocol should support the ability to\n      distinguish between multiple\
    \ users of the network.  This includes\n      the ability to handle traditional\
    \ \"transport layer\" protocols like\n      TCP and UDP, as well as other payload\
    \ types such as encapsulated\n      AppleTalk packets or future real-time protocols.\
    \  This kind of\n      protocol multiplexing can be supported with an explicit\
    \ header\n      field as in IPv4 or by reserving part of the address format as\
    \ is\n      done with OSI NSEL's.\n      In a multiprotocol network there will\
    \ likely be a large number of\n      different protocols running atop IPng.  It\
    \ should not be necessary\n      to use a transport layer protocol for the sole\
    \ purpose of\n      providing multiplexing for the various network users.  The\
    \ cost of\n      this additional multiplexing is prohibitive for future high-speed\n\
    \      networks [14].  In order to avoid the need for an additional level\n  \
    \    of multiplexing, the IPng should either use a payload selector\n      larger\
    \ than the 8-bits used in IPv4 or provide an option for\n      including additional\
    \ payload type information within the header.\n   o Status/Control Feedback\n\
    \      With multiple protocols, the correct transmission of a packet\n      might\
    \ include encapsulation in another protocol and/or multiple\n      conversions\
    \ to different protocols before the packet finally\n      reaches its destination.\
    \  This means that there are many different\n      places the transmission can\
    \ fail and determining what went wrong\n      will be a challenge.\n      In order\
    \ to handle this situation, a critical protocol feature in\n      multiprotocol\
    \ networks is a powerful error reporting mechanism.\n      In addition to reporting\
    \ traditional network level errors, such as\n      those reported by ICMP [9],\
    \ the IPng error mechanism should\n      include feedback on tunneling and conversion\
    \ failures.  Also,\n      since it is impossible to know exactly which part of\
    \ a packet is\n      an encapsulated header, it is important that the feedback\n\
    \      mechanism include as much of the failed packet as possible in the\n   \
    \   returned error message.\n      In addition to providing new types of feedback,\
    \ this mechanism\n      should support variable resolution such that a transmitting\
    \ system\n      can request limited feedback or complete information about the\n\
    \      communication process.  This level of control would greatly\n      facilitate\
    \ the Protocol Discovery process described in Section\n      4.3.  For example,\
    \ a multiprotocol system could request maximal\n      feedback when it sends packets\
    \ to a destination it has not\n      communicated with for some time.  After the\
    \ first few packets to\n      this \"new\" destination, the system would revert\
    \ back to limited\n      feedback, freeing up the resources used by the network\
    \ feedback\n      mechanisms.\n      Finally, it is important that the information\
    \ provided by the\n      feedback mechanism be available outside the IPng implementation.\n\
    \      In multiprotocol networks it is often the case that the solution\n    \
    \  to a communication problem requires an adjustment in one of the\n      protocols\
    \ outside the network layer.  In order for this to happen,\n      the other protocols\
    \ must be able to access and interpret these\n      feedback messages.\n   o MTU\
    \ Discovery or Fragmentation\n      A form of multiprotocol support that has long\
    \ been a part of\n      networking is the use of diverse data link and physical\
    \ layers.\n      One aspect of this support that affects the network layer is\
    \ the\n      different Maximum Transmission Units (MTU) used by various media\n\
    \      formats.  For efficiency, many protocols will attempt to avoid\n      fragmentation\
    \ at intermediate nodes by using the largest packet\n      size possible, without\
    \ exceeding the minimum MTU along the route.\n      To achieve this, a network\
    \ protocol performs MTU discovery to find\n      the smallest MTU on a path.\n\
    \      The choice of mechanism for dealing with differing MTUs is also\n     \
    \ important when doing conversion or tunneling with multiple\n      protocols.\
    \  When tunneling is performed by an intermediate node,\n      the resulting packets\
    \ may be too large to meet the MTU\n      requirements.  Similarly, if conversion\
    \ at an intermediate node\n      results in a larger protocol header, the new\
    \ packets may also be\n      too large.  In both cases, it may be desirable to\
    \ have the source\n      host reduce the transmission size used in order to prevent\
    \ the\n      need for additional fragmentation.  This information could be sent\n\
    \      to the source host as part of the previously described feedback\n     \
    \ mechanism or as an additional MTU discovery message.\n"
- title: 5.2  Implementation/Deployment Features
  contents:
  - "5.2  Implementation/Deployment Features\n   o Switching\n      We define switching\
    \ in a protocol as the capability to\n      simultaneously use more than one different\
    \ underlying protocol\n      [1].  In network layer protocols, this implies using\
    \ different\n      datalink layers.  For example, it may be necessary to select\n\
    \      between the 802.3 LLC and traditional Ethernet interfaces when\n      connecting\
    \ a host to an \"ethernet\" network.  Additionally, in some\n      systems IPng\
    \ will not be used directly over a datalink layer but\n      will be encapsulated\
    \ within another network protocol before being\n      transmitted.  It is important\
    \ that IPng be designed to support\n      different underlying datalink services\
    \ and that it provide\n      mechanisms allowing IPng users to specify which of\
    \ the available\n      services should be used.\n   o Directory Service Requirements\n\
    \      While not specifically a part of the IPng protocol, it is clear\n     \
    \ that the future Internet will include a directory service for\n      obtaining\
    \ address information for IPng.  In light of this, there\n      are some features\
    \ of the directory service that should be\n      considered vis-a-vis their support\
    \ for multiple protocols.\n      First, the directory service should be able to\
    \ distribute address\n      formats for several different protocol families, not\
    \ just IPng and\n      IPv4.  This is necessary for the use of tunneling, conversion,\
    \ and\n      the support of multiprotocol systems.  Second, the directory\n  \
    \    service should include support for distributing protocol\n      configuration\
    \ information in addition to addressing information\n      for the network hosts.\
    \  This feature will support the protocol\n      determination task to be carried\
    \ out by multiprotocol systems [2].\n"
- title: 6.  Conclusion
  contents:
  - "6.  Conclusion\n   Future networks will incorporate multiple protocols to meet\
    \ diverse\n   user requirements.  Because of this, we are likely to find that\
    \ a\n   significant portion of the traffic in the Internet will not be from\n\
    \   single-protocol communications (e.g., TCPng/IPng).  This will not\n   just\
    \ be true of near term, transitional networks but will remain as a\n   reality\
    \ for most of the Internet.  As we pursue the selection of\n   IPng, we should\
    \ consider the special needs of multiprotocol networks.\n   In particular, IPng\
    \ should include mechanisms to handle mixed\n   protocol traffic that includes\
    \ tunneling, conversion, and\n   multiprotocol end-systems.\n"
- title: 7.  Acknowledgments
  contents:
  - "7.  Acknowledgments\n   The authors would like to acknowledge the support for\
    \ this work by a\n   grant from the National Science Foundation (NCR-9305115)\
    \ and the\n   TRANSOPEN project of the Army Research Lab (formerly AIRMICS) under\n\
    \   contract number DAKF11-91-D-0004.\n"
- title: 8.  References
  contents:
  - "8.  References\n   [1] Clark, R., Ammar, M., and K. Calvert, \"Multi-protocol\n\
    \       architectures as a paradigm for achieving inter-operability\", In\n  \
    \     Proceedings of IEEE INFOCOM, April 1993.\n   [2] Clark, R., Calvert, K.\
    \ and M. Ammar, \"On the use of directory\n       services to support multiprotocol\
    \ interoperability\", To appear in\n       proceedings of IEEE INFOCOM, 1994.\
    \ Technical Report GIT-CC-93/56,\n       College of Computing, Georgia Institute\
    \ of Technology, ATLANTA,\n       GA 30332-0280, August 1993.\n   [3] Gilligan,\
    \ R., Nordmark, E., and B. Hinden, \"IPAE: the SIPP\n       Interoperability and\
    \ Transition Mechanism, Work in Progress,\n       November 1993.\n   [4] Leiner,\
    \ B., and Y. Rekhter, \"The Multiprotocol Internet\", RFC\n       1560, USRA,\
    \ IBM, December 1993.\n   [5] McLaughlin, L., \"Standard for the Transmission\
    \ of 802.2 Packets\n       over IPX Networks\", RFC 1132, The Wollongong Group,\
    \ November\n       1989.\n   [6] Mockapetris, P., \"Domain Names - Concepts and\
    \ Facilities\", STD\n       13, RFC 1034, USC/Information Sciences Institute,\
    \ November 1987.\n   [7] Mockapetris, P., \"Domain Names - Implementation and\n\
    \       Specification.  STD 13, RFC 1035, USC/Information Sciences\n       Institute,\
    \ November 1987.\n   [8] Padlipsky, M., Gateways, Architectures, and Heffalumps\"\
    , RFC 875,\n       MITRE, September 1982.\n   [9] Postel, J., \"Internet Control\
    \ Message Protocol\", STD 5, RFC 792,\n       USC/Information Sciences Institute,\
    \ September 1981.\n  [10] Provan, D., \"Tunneling IPX Traffic Through IP Networks\"\
    , RFC\n       1234, Novell, Inc., June 1991.\n  [11] Rose, M., \"The Open Book\"\
    , Prentice-Hall, Englewood Cliffs, New\n       Jersey, 1990.\n  [12] Rose, M.,\
    \ \"The ISO Development Environment User's Manual -\n       Version 7.0.\", Performance\
    \ Systems International, July 1991.\n  [13] Rose, M., and D. Cass, \"ISO Transport\
    \ Services on top of the\n       TCP\", STD 35, RFC 1006, Northrop Research and\
    \ Technology Center,\n       May 1987.\n  [14] Tennenhouse, D., \"Layered multiplexing\
    \ considered harmful\", In\n       IFIP Workshop on Protocols for High-Speed Networks.\
    \ Elsevier, May\n       1989.\n  [15] Ullmann, R., \"CATNIP: Common architecture\
    \ technology for next-\n       generation internet protocol\", Work in Progress,\
    \ October 1993.\n"
- title: 9.  Security Considerations
  contents:
  - "9.  Security Considerations\n   Security issues are not discussed in this memo.\n"
- title: 10.  Authors' Addresses
  contents:
  - "10.  Authors' Addresses\n   Russell J. Clark\n   College of Computing Georgia\
    \ Institute of Technology\n   Atlanta, GA 30332-0280\n   EMail: rjc@cc.gatech.edu\n\
    \   Mostafa H. Ammar\n   College of Computing Georgia Institute of Technology\n\
    \   Atlanta, GA 30332-0280\n   EMail: ammar@cc.gatech.edu\n   Kenneth L. Calvert\n\
    \   College of Computing Georgia Institute of Technology\n   Atlanta, GA 30332-0280\n\
    \   EMail: calvert@cc.gatech.edu\n"
