- title: __initial_text__
  contents:
  - '              Delegation Signer (DS) Resource Record (RR)

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2003).  All Rights Reserved.\n"
- title: Abstract
  contents:
  - "Abstract\n   The delegation signer (DS) resource record (RR) is inserted at a\
    \ zone\n   cut (i.e., a delegation point) to indicate that the delegated zone\
    \ is\n   digitally signed and that the delegated zone recognizes the indicated\n\
    \   key as a valid zone key for the delegated zone.  The DS RR is a\n   modification\
    \ to the DNS Security Extensions definition, motivated by\n   operational considerations.\
    \  The intent is to use this resource\n   record as an explicit statement about\
    \ the delegation, rather than\n   relying on inference.\n   This document defines\
    \ the DS RR, gives examples of how it is used and\n   describes the implications\
    \ on resolvers.  This change is not\n   backwards compatible with RFC 2535.  This\
    \ document updates RFC 1035,\n   RFC 2535, RFC 3008 and RFC 3090.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction. . . . . . . . . . . . . . . . . . . .\
    \ . . . . .   3\n       1.2.  Reserved Words. . . . . . . . . . . . . . . . .\
    \ . . . .   4\n   2.  Specification of the Delegation key Signer. . . . . . .\
    \ . . .   4\n       2.1.  Delegation Signer Record Model. . . . . . . . . . .\
    \ . .   4\n       2.2.  Protocol Change . . . . . . . . . . . . . . . . . . .\
    \ .   5\n             2.2.1.  RFC 2535 2.3.4 and 3.4: Special Considerations\n\
    \                     at Delegation Points  . . . . . . . . . . . . .   6\n  \
    \                   2.2.1.1. Special processing for DS queries. . .   6\n    \
    \                 2.2.1.2. Special processing when child and an\n            \
    \                  ancestor share nameserver. . . . . . .   7\n              \
    \       2.2.1.3. Modification on use of KEY RR in the\n                      \
    \        construction of Responses. . . . . . .   8\n             2.2.2.  Signer's\
    \ Name (replaces RFC3008 section 2.7). .   9\n             2.2.3.  Changes to\
    \ RFC 3090 . . . . . . . . . . . . . .   9\n                     2.2.3.1. RFC\
    \ 3090: Updates to section 1:\n                              Introduction . .\
    \ . . . . . . . . . . .   9\n                     2.2.3.2. RFC 3090 section 2.1:\
    \ Globally\n                              Secured. . . . . . . . . . . . . . .\
    \ .  10\n                     2.2.3.3. RFC 3090 section 3: Experimental\n    \
    \                          Status . . . . . . . . . . . . . . . .  10\n      \
    \       2.2.4.  NULL KEY elimination. . . . . . . . . . . . . .  10\n       2.3.\
    \  Comments on Protocol Changes. . . . . . . . . . . . . .  10\n       2.4.  Wire\
    \ Format of the DS record. . . . . . . . . . . . . .  11\n             2.4.1.\
    \  Justifications for Fields . . . . . . . . . . .  12\n       2.5.  Presentation\
    \ Format of the DS Record. . . . . . . . . .  12\n       2.6.  Transition Issues\
    \ for Installed Base. . . . . . . . . .  12\n             2.6.1.  Backwards compatibility\
    \ with RFC 2535 and\n                     RFC 1035. . . . . . . . . . . . . .\
    \ . . . . . .  12\n       2.7.  KEY and corresponding DS record example . . .\
    \ . . . . .  13\n   3.  Resolver. . . . . . . . . . . . . . . . . . . . . . .\
    \ . . . .  14\n       3.1.  DS Example\" . . . . . . . . . . . . . . . . . . .\
    \ . . .  14\n       3.2.  Resolver Cost Estimates for DS Records\" . . . . . .\
    \ . .  15\n   4.  Security Considerations . . . . . . . . . . . . . . . . . .\
    \ .  15\n   5.  IANA Considerations . . . . . . . . . . . . . . . . . . . . .\
    \  16\n   6.  Intellectual Property Statement . . . . . . . . . . . . . . .  16\n\
    \   7.  Acknowledgments . . . . . . . . . . . . . . . . . . . . . . .  17\n  \
    \ 8.  References. . . . . . . . . . . . . . . . . . . . . . . . . .  17\n    \
    \   8.1.  Normative References. . . . . . . . . . . . . . . . . .  17\n      \
    \ 8.2.  Informational References. . . . . . . . . . . . . . . .  17\n   9.  Author's\
    \ Address. . . . . . . . . . . . . . . . . . . . . . .  18\n   10. Full Copyright\
    \ Statement. . . . . . . . . . . . . . . . . . .  19\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   Familiarity with the DNS system [RFC1035], DNS security\
    \ extensions\n   [RFC2535], and DNSSEC terminology [RFC3090] is important.\n \
    \  Experience shows that when the same data can reside in two\n   administratively\
    \ different DNS zones, the data frequently gets out of\n   sync.  The presence\
    \ of an NS RRset in a zone anywhere other than at\n   the apex indicates a zone\
    \ cut or delegation.  The RDATA of the NS\n   RRset specifies the authoritative\
    \ nameservers for the delegated or\n   \"child\" zone.  Based on actual measurements,\
    \ 10-30% of all\n   delegations on the Internet have differing NS RRsets at parent\
    \ and\n   child.  There are a number of reasons for this, including a lack of\n\
    \   communication between parent and child and bogus name servers being\n   listed\
    \ to meet registry requirements.\n   DNSSEC [RFC2535, RFC3008, RFC3090] specifies\
    \ that a child zone needs\n   to have its KEY RRset signed by its parent to create\
    \ a verifiable\n   chain of KEYs.  There has been some debate on where the signed\
    \ KEY\n   RRset should reside, whether at the child [RFC2535] or at the parent.\n\
    \   If the KEY RRset resides at the child, maintaining the signed KEY\n   RRset\
    \ in the child requires frequent two-way communication between\n   the two parties.\
    \  First, the child transmits the KEY RRset to the\n   parent and then the parent\
    \ sends the signature(s) to the child.\n   Storing the KEY RRset at the parent\
    \ was thought to simplify the\n   communication.\n   DNSSEC [RFC2535] requires\
    \ that the parent store a NULL KEY record for\n   an unsecure child zone to indicate\
    \ that the child is unsecure.  A\n   NULL KEY record is a waste: an entire signed\
    \ RRset is used to\n   communicate effectively one bit of information - that the\
    \ child is\n   unsecure. Chasing down NULL KEY RRsets complicates the resolution\n\
    \   process in many cases, because nameservers for both parent and child\n   need\
    \ to be queried for the KEY RRset if the child nameserver does not\n   return\
    \ it.  Storing the KEY RRset only in the parent zone simplifies\n   this and would\
    \ allow the elimination of the NULL KEY RRsets entirely.\n   For large delegation\
    \ zones, the cost of NULL keys is a significant\n   barrier to deployment.\n \
    \  Prior to the restrictions imposed by RFC 3445 [RFC3445], another\n   implication\
    \ of the DNSSEC key model is that the KEY record could be\n   used to store public\
    \ keys for other protocols in addition to DNSSEC\n   keys.  There are a number\
    \ of potential problems with this, including:\n   1. The KEY RRset can become\
    \ quite large if many applications and\n      protocols store their keys at the\
    \ zone apex.  Possible protocols\n      are IPSEC, HTTP, SMTP, SSH and others\
    \ that use public key\n      cryptography.\n   2. The KEY RRset may require frequent\
    \ updates.\n   3. The probability of compromised or lost keys, which trigger\n\
    \      emergency key roll-over procedures, increases.\n   4. The parent may refuse\
    \ to sign KEY RRsets with non-DNSSEC zone\n      keys.\n   5. The parent may not\
    \ meet the child's expectations of turnaround\n      time for resigning the KEY\
    \ RRset.\n   Given these reasons, SIG@parent isn't any better than SIG/KEY@Child.\n"
- title: 1.2.  Reserved Words
  contents:
  - "1.2.  Reserved Words\n   The key words \"MAY\", \"MAY NOT\", \"MUST\", \"MUST\
    \ NOT\", \"REQUIRED\",\n   \"RECOMMENDED\", \"SHOULD\", and \"SHOULD NOT\" in\
    \ this document are to be\n   interpreted as described in BCP 14, RFC 2119 [RFC2119].\n"
- title: 2.  Specification of the Delegation key Signer
  contents:
  - "2.  Specification of the Delegation key Signer\n   This section defines the Delegation\
    \ Signer (DS) RR type (type code\n   43) and the changes to DNS to accommodate\
    \ it.\n"
- title: 2.1.  Delegation Signer Record Model
  contents:
  - "2.1.  Delegation Signer Record Model\n   This document presents a replacement\
    \ for the DNSSEC KEY record chain\n   of trust [RFC2535] that uses a new RR that\
    \ resides only at the\n   parent.  This record identifies the key(s) that the\
    \ child uses to\n   self-sign its own KEY RRset.\n   Even though DS identifies\
    \ two roles for KEYs, Key Signing Key (KSK)\n   and Zone Signing Key (ZSK), there\
    \ is no requirement that zone uses\n   two different keys for these roles.  It\
    \ is expected that many small\n   zones will only use one key, while larger zones\
    \ will be more likely\n   to use multiple keys.\n   The chain of trust is now\
    \ established by verifying the parent KEY\n   RRset, the DS RRset from the parent\
    \ and the KEY RRset at the child.\n   This is cryptographically equivalent to\
    \ using just KEY records.\n   Communication between the parent and child is greatly\
    \ reduced, since\n   the child only needs to notify the parent about changes in\
    \ keys that\n   sign its apex KEY RRset.  The parent is ignorant of all other\
    \ keys in\n   the child's apex KEY RRset.  Furthermore, the child maintains full\n\
    \   control over the apex KEY RRset and its content.  The child can\n   maintain\
    \ any policies regarding its KEY usage for DNSSEC with minimal\n   impact on the\
    \ parent.  Thus, if the child wants to have frequent key\n   roll-over for its\
    \ DNS zone keys, the parent does not need to be aware\n   of it.  The child can\
    \ use one key to sign only its apex KEY RRset and\n   a different key to sign\
    \ the other RRsets in the zone.\n   This model fits well with a slow roll out\
    \ of DNSSEC and the islands\n   of security model.  In this model, someone who\
    \ trusts \"good.example.\"\n   can preconfigure a key from \"good.example.\" as\
    \ a trusted key, and\n   from then on trusts any data signed by that key or that\
    \ has a chain\n   of trust to that key.  If \"example.\" starts advertising DS\
    \ records,\n   \"good.example.\" does not have to change operations by suspending\n\
    \   self-signing.  DS records can be used in configuration files to\n   identify\
    \ trusted keys instead of KEY records.  Another significant\n   advantage is that\
    \ the amount of information stored in large\n   delegation zones is reduced: rather\
    \ than the NULL KEY record at every\n   unsecure delegation demanded by RFC 2535,\
    \ only secure delegations\n   require additional information in the form of a\
    \ signed DS RRset.\n   The main disadvantage of this approach is that verifying\
    \ a zone's KEY\n   RRset requires two signature verification operations instead\
    \ of the\n   one in RFC 2535 chain of trust.  There is no impact on the number\
    \ of\n   signatures verified for other types of RRsets.\n"
- title: 2.2.  Protocol Change
  contents:
  - "2.2.  Protocol Change\n   All DNS servers and resolvers that support DS MUST\
    \ support the OK bit\n   [RFC3225] and a larger message size [RFC3226].  In order\
    \ for a\n   delegation to be considered secure the delegation MUST contain a DS\n\
    \   RRset.  If a query contains the OK bit, a nameserver returning a\n   referral\
    \ for the delegation MUST include the following RRsets in the\n   authority section\
    \ in this order:\n   If DS RRset is present:\n      parent's copy of child's NS\
    \ RRset\n      DS and SIG(DS)\n   If no DS RRset is present:\n      parent's copy\
    \ of child's NS RRset\n      parent's zone NXT and SIG(NXT)\n   This increases\
    \ the size of referral messages, possibly causing some\n   or all glue to be omitted.\
    \  If the DS or NXT RRsets with signatures\n   do not fit in the DNS message,\
    \ the TC bit MUST be set.  Additional\n   section processing is not changed.\n\
    \   A DS RRset accompanying a NS RRset indicates that the child zone is\n   secure.\
    \  If a NS RRset exists without a DS RRset, the child zone is\n   unsecure (from\
    \ the parents point of view).  DS RRsets MUST NOT appear\n   at non-delegation\
    \ points or at a zone's apex.\n   Section 2.2.1 defines special considerations\
    \ related to authoritative\n   nameservers responding to DS queries and replaces\
    \ RFC 2535 sections\n   2.3.4 and 3.4.  Section 2.2.2 replaces RFC 3008 section\
    \ 2.7, and\n   section 2.2.3 updates RFC 3090.\n"
- title: '2.2.1.  RFC 2535 2.3.4 and 3.4: Special Considerations at Delegation'
  contents:
  - "2.2.1.  RFC 2535 2.3.4 and 3.4: Special Considerations at Delegation\n      \
    \  Points\n   DNS security views each zone as a unit of data completely under\
    \ the\n   control of the zone owner with each entry (RRset) signed by a special\n\
    \   private key held by the zone manager.  But the DNS protocol views the\n  \
    \ leaf nodes in a zone that are also the apex nodes of a child zone\n   (i.e.,\
    \ delegation points) as \"really\" belonging to the child zone.\n   The corresponding\
    \ domain names appear in two master files and might\n   have RRsets signed by\
    \ both the parent and child zones' keys.  A\n   retrieval could get a mixture\
    \ of these RRsets and SIGs, especially\n   since one nameserver could be serving\
    \ both the zone above and below a\n   delegation point [RFC2181].\n   Each DS\
    \ RRset stored in the parent zone MUST be signed by at least\n   one of the parent\
    \ zone's private keys.  The parent zone MUST NOT\n   contain a KEY RRset at any\
    \ delegation point.  Delegations in the\n   parent MAY contain only the following\
    \ RR types: NS, DS, NXT and SIG.\n   The NS RRset MUST NOT be signed.  The NXT\
    \ RRset is the exceptional\n   case: it will always appear differently and authoritatively\
    \ in both\n   the parent and child zones, if both are secure.\n   A secure zone\
    \ MUST contain a self-signed KEY RRset at its apex.  Upon\n   verifying the DS\
    \ RRset from the parent, a resolver MAY trust any KEY\n   identified in the DS\
    \ RRset as a valid signer of the child's apex KEY\n   RRset.  Resolvers configured\
    \ to trust one of the keys signing the KEY\n   RRset MAY now treat any data signed\
    \ by the zone keys in the KEY RRset\n   as secure.  In all other cases, resolvers\
    \ MUST consider the zone\n   unsecure.\n   An authoritative nameserver queried\
    \ for type DS MUST return the DS\n   RRset in the answer section.\n"
- title: 2.2.1.1.  Special processing for DS queries
  contents:
  - "2.2.1.1.  Special processing for DS queries\n   When a nameserver is authoritative\
    \ for the parent zone at a\n   delegation point and receives a query for the DS\
    \ record at that name,\n   it MUST answer based on data in the parent zone, return\
    \ DS or\n   negative answer.  This is true whether or not it is also\n   authoritative\
    \ for the child zone.\n   When the nameserver is authoritative for the child zone\
    \ at a\n   delegation point but not the parent zone, there is no natural\n   response,\
    \ since the child zone is not authoritative for the DS record\n   at the zone's\
    \ apex.  As these queries are only expected to originate\n   from recursive nameservers\
    \ which are not DS-aware, the authoritative\n   nameserver MUST answer with:\n\
    \      RCODE:             NOERROR\n      AA bit:            set\n      Answer\
    \ Section:    Empty\n      Authority Section: SOA [+ SIG(SOA) + NXT + SIG(NXT)]\n\
    \   That is, it answers as if it is authoritative and the DS record does\n   not\
    \ exist.  DS-aware recursive nameservers will query the parent zone\n   at delegation\
    \ points, so will not be affected by this.\n   A nameserver authoritative for\
    \ only the child zone, that is also a\n   caching server MAY (if the RD bit is\
    \ set in the query) perform\n   recursion to find the DS record at the delegation\
    \ point, or MAY\n   return the DS record from its cache.  In this case, the AA\
    \ bit MUST\n   NOT be set in the response.\n"
- title: 2.2.1.2.  Special processing when child and an ancestor share
  contents:
  - "2.2.1.2.  Special processing when child and an ancestor share\n          nameserver\n\
    \   Special rules are needed to permit DS RR aware nameservers to\n   gracefully\
    \ interact with older caches which otherwise might falsely\n   label a nameserver\
    \ as lame because of the placement of the DS RR set.\n   Such a situation might\
    \ arise when a nameserver is authoritative for\n   both a zone and it's grandparent,\
    \ but not the parent.  This sounds\n   like an obscure example, but it is very\
    \ real.  The root zone is\n   currently served on 13 machines, and \"root-servers.net.\"\
    \ is served on\n   4 of the 13, but \"net.\" is severed on different nameservers.\n\
    \   When a nameserver receives a query for (<QNAME>, DS, <QCLASS>), the\n   response\
    \ MUST be determined from reading these rules in order:\n   1) If the nameserver\
    \ is authoritative for the zone that holds the DS\n      RR set (i.e., the zone\
    \ that delegates <QNAME>, a.k.a. the \"parent\"\n      zone), the response contains\
    \ the DS RR set as an authoritative\n      answer.\n   2) If the nameserver is\
    \ offering recursive service and the RD bit is\n      set in the query, the nameserver\
    \ performs the query itself\n      (according to the rules for resolvers described\
    \ below) and returns\n      its findings.\n   3) If the nameserver is authoritative\
    \ for the zone that holds the\n      <QNAME>'s SOA RR set, the response is an\
    \ authoritative negative\n      answer as described in 2.2.1.1.\n   4) If the\
    \ nameserver is authoritative for a zone or zones above the\n      QNAME, a referral\
    \ to the most enclosing (deepest match) zone's\n      servers is made.\n   5)\
    \ If the nameserver is not authoritative for any part of the QNAME,\n      a response\
    \ indicating a lame nameserver for QNAME is given.\n   Using these rules will\
    \ require some special processing on the part of\n   a DS RR aware resolver. \
    \ To illustrate this, an example is used.\n   Assuming a nameserver is authoritative\
    \ for roots.example.net. and for\n   the root zone but not the intervening two\
    \ zones (or the intervening\n   two label deep zone).  Assume that QNAME=roots.example.net.,\n\
    \   QTYPE=DS, and QCLASS=IN.\n   The resolver will issue this request (assuming\
    \ no cached data)\n   expecting a referral to a nameserver for .net.  Instead,\
    \ rule number\n   3 above applies and a negative answer is returned by the nameserver.\n\
    \   The reaction by the resolver is not to accept this answer as final,\n   as\
    \ it can determine from the SOA RR in the negative answer the\n   context within\
    \ which the nameserver has answered.\n   A solution would be to instruct the resolver\
    \ to hunt for the\n   authoritative zone of the data in a brute force manner.\n\
    \   This can be accomplished by taking the owner name of the returned SOA\n  \
    \ RR and striping off enough left-hand labels until a successful NS\n   response\
    \ is obtained.  A successful response here means that the\n   answer has NS records\
    \ in it.  (Entertaining the possibility that a\n   cut point can be two labels\
    \ down in a zone.)\n   Returning to the example, the response will include a negative\
    \ answer\n   with either the SOA RR for \"roots.example.net.\" or \"example.net.\"\
    \n   depending on whether roots.example.net is a delegated domain.  In\n   either\
    \ case, removing the left most label of the SOA owner name will\n   lead to the\
    \ location of the desired data.\n"
- title: 2.2.1.3.  Modification on use of KEY RR in the construction of Responses
  contents:
  - "2.2.1.3.  Modification on use of KEY RR in the construction of Responses\n  \
    \ This section updates RFC 2535 section 3.5 by replacing it with the\n   following:\n\
    \   A query for KEY RR MUST NOT trigger any additional section\n   processing.\
    \  Security aware resolvers will include corresponding SIG\n   records in the\
    \ answer section.\n   KEY records SHOULD NOT be added to the additional records\
    \ section in\n   response to any query.\n   RFC 2535 specified that KEY records\
    \ be added to the additional\n   section when SOA or NS records were included\
    \ in an answer.  This was\n   done to reduce round trips (in the case of SOA)\
    \ and to force out NULL\n   KEYs (in the NS case).  As this document obsoletes\
    \ NULL keys, there\n   is no need for the inclusion of KEYs with NSs.  Furthermore,\
    \ as SOAs\n   are included in the authority section of negative answers, including\n\
    \   the KEYs each time will cause redundant transfers of KEYs.\n   RFC 2535 section\
    \ 3.5 also included a rule for adding the KEY RRset to\n   the response for a\
    \ query for A and AAAA types.  As Restrict KEY\n   [RFC3445] eliminated use of\
    \ KEY RR by all applications, this rule is\n   no longer needed.\n"
- title: 2.2.2.  Signer's Name (replaces RFC 3008 section 2.7)
  contents:
  - "2.2.2.  Signer's Name (replaces RFC 3008 section 2.7)\n   The signer's name field\
    \ of a SIG RR MUST contain the name of the zone\n   to which the data and signature\
    \ belong.  The combination of signer's\n   name, key tag, and algorithm MUST identify\
    \ a zone key if the SIG is\n   to be considered material.  This document defines\
    \ a standard policy\n   for DNSSEC validation; local policy MAY override the standard\
    \ policy.\n   There are no restrictions on the signer field of a SIG(0) record.\
    \ The\n   combination of signer's name, key tag, and algorithm MUST identify a\n\
    \   key if this SIG(0) is to be processed.\n"
- title: 2.2.3.  Changes to RFC 3090
  contents:
  - "2.2.3.  Changes to RFC 3090\n   A number of sections in RFC 3090 need to be updated\
    \ to reflect the DS\n   record.\n"
- title: '2.2.3.1.  RFC 3090: Updates to section 1: Introduction'
  contents:
  - "2.2.3.1.  RFC 3090: Updates to section 1: Introduction\n   Most of the text is\
    \ still relevant but the words \"NULL key\" are to be\n   replaced with \"missing\
    \ DS RRset\".  In section 1.3, the last three\n   paragraphs discuss the confusion\
    \ in sections of RFC 2535 that are\n   replaced in section 2.2.1 above.  Therefore,\
    \ these paragraphs are now\n   obsolete.\n"
- title: '2.2.3.2.  RFC 3090 section 2.1: Globally Secured'
  contents:
  - "2.2.3.2.  RFC 3090 section 2.1: Globally Secured\n   Rule 2.1.b is replaced by\
    \ the following rule:\n   2.1.b. The KEY RRset at a zone's apex MUST be self-signed\
    \ by a\n   private key whose public counterpart MUST appear in a zone signing\n\
    \   KEY RR (2.a) owned by the zone's apex and specifying a mandatory-to-\n   implement\
    \ algorithm.  This KEY RR MUST be identified by a DS RR in a\n   signed DS RRset\
    \ in the parent zone.\n   If a zone cannot get its parent to advertise a DS record\
    \ for it, the\n   child zone cannot be considered globally secured.  The only\
    \ exception\n   to this is the root zone, for which there is no parent zone.\n"
- title: '2.2.3.3.  RFC 3090 section 3: Experimental Status.'
  contents:
  - "2.2.3.3.  RFC 3090 section 3: Experimental Status.\n   The only difference between\
    \ experimental status and globally secured\n   is the missing DS RRset in the\
    \ parent zone.  All locally secured\n   zones are experimental.\n"
- title: 2.2.4.  NULL KEY elimination
  contents:
  - "2.2.4.  NULL KEY elimination\n   RFC 3445 section 3 eliminates the top two bits\
    \ in the flags field of\n   KEY RR.  These two bits were used to indicate NULL\
    \ KEY or NO KEY. RFC\n   3090 defines that zone as either secure or not and these\
    \ rules\n   eliminate the need to put NULL keys in the zone apex to indicate that\n\
    \   the zone is not secured for a algorithm.  Along with this document,\n   these\
    \ other two eliminate all uses for the NULL KEY.  This document\n   obsoletes\
    \ NULL KEY.\n"
- title: 2.3.  Comments on Protocol Changes
  contents:
  - "2.3.  Comments on Protocol Changes\n   Over the years, there have been various\
    \ discussions surrounding the\n   DNS delegation model, declaring it to be broken\
    \ because there is no\n   good way to assert if a delegation exists.  In the RFC\
    \ 2535 version\n   of DNSSEC, the presence of the NS bit in the NXT bit map proves\
    \ there\n   is a delegation at this name.  Something more explicit is required\n\
    \   and the DS record addresses this need for secure delegations.\n   The DS record\
    \ is a major change to DNS: it is the first resource\n   record that can appear\
    \ only on the upper side of a delegation.\n   Adding it will cause interoperability\
    \ problems and requires a flag\n   day for DNSSEC.  Many old nameservers and resolvers\
    \ MUST be upgraded\n   to take advantage of DS.  Some old nameservers will be\
    \ able to be\n   authoritative for zones with DS records but will not add the\
    \ NXT or\n   DS records to the authority section.  The same is true for caching\n\
    \   nameservers; in fact, some might even refuse to pass on the DS or NXT\n  \
    \ records.\n"
- title: 2.4.  Wire Format of the DS record
  contents:
  - "2.4.  Wire Format of the DS record\n   The DS (type=43) record contains these\
    \ fields: key tag, algorithm,\n   digest type, and the digest of a public key\
    \ KEY record that is\n   allowed and/or used to sign the child's apex KEY RRset.\
    \  Other keys\n   MAY sign the child's apex KEY RRset.\n                     \
    \   1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3\n    0 1 2 3 4 5 6 7 8 9 0 1 2\
    \ 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |           key tag             |  algorithm    |  Digest type  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                digest  (length depends on type)               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                (SHA-1 digest is 20 bytes)                     |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                                                               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-|\n\
    \   |                                                               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-|\n\
    \   |                                                               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   The key tag is calculated as specified in RFC 2535.  Algorithm MUST\n   be\
    \ allowed to sign DNS data.  The digest type is an identifier for\n   the digest\
    \ algorithm used.  The digest is calculated over the\n   canonical name of the\
    \ delegated domain name followed by the whole\n   RDATA of the KEY record (all\
    \ four fields).\n      digest = hash( canonical FQDN on KEY RR | KEY_RR_rdata)\n\
    \      KEY_RR_rdata = Flags | Protocol | Algorithm | Public Key\n   Digest type\
    \ value 0 is reserved, value 1 is SHA-1, and reserving\n   other types requires\
    \ IETF standards action.  For interoperability\n   reasons, keeping number of\
    \ digest algorithms low is strongly\n   RECOMMENDED.  The only reason to reserve\
    \ additional digest types is\n   to increase security.\n   DS records MUST point\
    \ to zone KEY records that are allowed to\n   authenticate DNS data.  The indicated\
    \ KEY records protocol field MUST\n   be set to 3; flag field bit 7 MUST be set\
    \ to 1.  The value of other\n   flag bits is not significant for the purposes\
    \ of this document.\n   The size of the DS RDATA for type 1 (SHA-1) is 24 bytes,\
    \ regardless\n   of key size.  New digest types probably will have larger digests.\n"
- title: 2.4.1.  Justifications for Fields
  contents:
  - "2.4.1.  Justifications for Fields\n   The algorithm and key tag fields are present\
    \ to allow resolvers to\n   quickly identify the candidate KEY records to examine.\
    \  SHA-1 is a\n   strong cryptographic checksum: it is computationally infeasible\
    \ for\n   an attacker to generate a KEY record that has the same SHA-1 digest.\n\
    \   Combining the name of the key and the key rdata as input to the\n   digest\
    \ provides stronger assurance of the binding.  Having the key\n   tag in the DS\
    \ record adds greater assurance than the SHA-1 digest\n   alone, as there are\
    \ now two different mapping functions.\n   This format allows concise representation\
    \ of the keys that the child\n   will use, thus keeping down the size of the answer\
    \ for the\n   delegation, reducing the probability of DNS message overflow.  The\n\
    \   SHA-1 hash is strong enough to uniquely identify the key and is\n   similar\
    \ to the PGP key footprint.  The digest type field is present\n   for possible\
    \ future expansion.\n   The DS record is well suited to listing trusted keys for\
    \ islands of\n   security in configuration files.\n"
- title: 2.5.  Presentation Format of the DS Record
  contents:
  - "2.5.  Presentation Format of the DS Record\n   The presentation format of the\
    \ DS record consists of three numbers\n   (key tag, algorithm, and digest type)\
    \ followed by the digest itself\n   presented in hex:\n      example.   DS  12345\
    \ 3 1 123456789abcdef67890123456789abcdef67890\n"
- title: 2.6.  Transition Issues for Installed Base
  contents:
  - "2.6.  Transition Issues for Installed Base\n   No backwards compatibility with\
    \ RFC 2535 is provided.\n   RFC 2535-compliant resolvers will assume that all\
    \ DS-secured\n   delegations are locally secure.  This is bad, but the DNSEXT\
    \ Working\n   Group has determined that rather than dealing with both RFC 2535-\n\
    \   secured zones and DS-secured zones, a rapid adoption of DS is\n   preferable.\
    \  Thus, the only option for early adopters is to upgrade\n   to DS as soon as\
    \ possible.\n"
- title: 2.6.1.  Backwards compatibility with RFC 2535 and RFC 1035
  contents:
  - "2.6.1.  Backwards compatibility with RFC 2535 and RFC 1035\n   This section documents\
    \ how a resolver determines the type of\n   delegation.\n   RFC 1035 delegation\
    \ (in parent) has:\n   RFC 1035           NS\n   RFC 2535 adds the following two\
    \ cases:\n   Secure RFC 2535:   NS + NXT + SIG(NXT)\n                      NXT\
    \ bit map contains: NS SIG NXT\n   Unsecure RFC 2535: NS + KEY + SIG(KEY) + NXT\
    \ + SIG(NXT)\n                      NXT bit map contains: NS SIG KEY NXT\n   \
    \                   KEY must be a NULL key.\n   DNSSEC with DS has the following\
    \ two states:\n   Secure DS:         NS + DS + SIG(DS)\n                     \
    \ NXT bit map contains: NS SIG NXT DS\n   Unsecure DS:       NS + NXT + SIG(NXT)\n\
    \                      NXT bit map contains: NS SIG NXT\n   It is difficult for\
    \ a resolver to determine if a delegation is secure\n   RFC 2535 or unsecure DS.\
    \  This could be overcome by adding a flag to\n   the NXT bit map, but only upgraded\
    \ resolvers would understand this\n   flag, anyway.  Having both parent and child\
    \ signatures for a KEY\n   RRset might allow old resolvers to accept a zone as\
    \ secure, but the\n   cost of doing this for a long time is much higher than just\n\
    \   prohibiting RFC 2535-style signatures at child zone apexes and\n   forcing\
    \ rapid deployment of DS-enabled nameservers and resolvers.\n   RFC 2535 and DS\
    \ can, in theory, be deployed in parallel, but this\n   would require resolvers\
    \ to deal with RFC 2535 configurations forever.\n   This document obsoletes the\
    \ NULL KEY in parent zones, which is a\n   difficult enough change that to cause\
    \ a flag day.\n"
- title: 2.7.  KEY and corresponding DS record example
  contents:
  - "2.7.  KEY and corresponding DS record example\n   This is an example of a KEY\
    \ record and the corresponding DS record.\n   dskey.example. KEY  256 3 1 (\n\
    \                  AQPwHb4UL1U9RHaU8qP+Ts5bVOU1s7fYbj2b3CCbzNdj\n            \
    \      4+/ECd18yKiyUQqKqQFWW5T3iVc8SJOKnueJHt/Jb/wt\n                  ) ; key\
    \ id = 28668\n             DS   28668 1  1  49FD46E6C4B45C55D4AC69CBD3CD34AC1AFE51DE\n"
- title: 3.  Resolver
  contents:
  - '3.  Resolver

    '
- title: 3.1.  DS Example
  contents:
  - "3.1.  DS Example\n   To create a chain of trust, a resolver goes from trusted\
    \ KEY to DS to\n   KEY.\n      Assume the key for domain \"example.\" is trusted.\
    \  Zone \"example.\"\n      contains at least the following records:\n      example.\
    \          SOA     <soa stuff>\n      example.          NS       ns.example.\n\
    \      example.          KEY     <stuff>\n      example.          NXT      secure.example.\
    \ NS SOA KEY SIG NXT\n      example.          SIG(SOA)\n      example.       \
    \   SIG(NS)\n      example.          SIG(NXT)\n      example.          SIG(KEY)\n\
    \      secure.example.   NS      ns1.secure.example.\n      secure.example.  \
    \ DS      tag=12345 alg=3 digest_type=1 <foofoo>\n      secure.example.   NXT\
    \     unsecure.example. NS SIG NXT DS\n      secure.example.   SIG(NXT)\n    \
    \  secure.example.   SIG(DS)\n      unsecure.example  NS      ns1.unsecure.example.\n\
    \      unsecure.example. NXT     example. NS SIG NXT\n      unsecure.example.\
    \ SIG(NXT)\n      In zone \"secure.example.\" following records exist:\n     \
    \ secure.example.   SOA      <soa stuff>\n      secure.example.   NS       ns1.secure.example.\n\
    \      secure.example.   KEY      <tag=12345 alg=3>\n      secure.example.   KEY\
    \      <tag=54321 alg=5>\n      secure.example.   NXT      <nxt stuff>\n     \
    \ secure.example.   SIG(KEY) <key-tag=12345 alg=3>\n      secure.example.   SIG(SOA)\
    \ <key-tag=54321 alg=5>\n      secure.example.   SIG(NS)  <key-tag=54321 alg=5>\n\
    \      secure.example.   SIG(NXT) <key-tag=54321 alg=5>\n   In this example, the\
    \ private key for \"example.\" signs the DS record\n   for \"secure.example.\"\
    , making that a secure delegation.  The DS\n   record states which key is expected\
    \ to sign the KEY RRset at\n   \"secure.example.\".  Here \"secure.example.\"\
    \ signs its KEY RRset with\n   the KEY identified in the DS RRset, thus the KEY\
    \ RRset is validated\n   and trusted.\n   This example has only one DS record\
    \ for the child, but parents MUST\n   allow multiple DS records to facilitate\
    \ key roll-over and multiple\n   KEY algorithms.\n   The resolver determines the\
    \ security status of \"unsecure.example.\" by\n   examining the parent zone's\
    \ NXT record for this name.  The absence of\n   the DS bit indicates an unsecure\
    \ delegation.  Note the NXT record\n   SHOULD only be examined after verifying\
    \ the corresponding signature.\n"
- title: 3.2.  Resolver Cost Estimates for DS Records
  contents:
  - "3.2.  Resolver Cost Estimates for DS Records\n   From a RFC 2535 recursive resolver\
    \ point of view, for each delegation\n   followed to chase down an answer, one\
    \ KEY RRset has to be verified.\n   Additional RRsets might also need to be verified\
    \ based on local\n   policy (e.g., the contents of the NS RRset).  Once the resolver\
    \ gets\n   to the appropriate delegation, validating the answer might require\n\
    \   verifying one or more signatures.  A simple A record lookup requires\n   at\
    \ least N delegations to be verified and one RRset.  For a DS-\n   enabled recursive\
    \ resolver, the cost is 2N+1.  For an MX record,\n   where the target of the MX\
    \ record is in the same zone as the MX\n   record, the costs are N+2 and 2N+2,\
    \ for RFC 2535 and DS,\n   respectively.  In the case of a negative answer, the\
    \ same ratios hold\n   true.\n   The recursive resolver has to do an extra query\
    \ to get the DS record,\n   which will increase the overall cost of resolving\
    \ this question, but\n   it will never be worse than chasing down NULL KEY records\
    \ from the\n   parent in RFC 2535 DNSSEC.\n   DS adds processing overhead on resolvers\
    \ and increases the size of\n   delegation answers, but much less than storing\
    \ signatures in the\n   parent zone.\n"
- title: 4.  Security Considerations
  contents:
  - "4.  Security Considerations\n   This document proposes a change to the validation\
    \ chain of KEY\n   records in DNSSEC.  The change is not believed to reduce security\
    \ in\n   the overall system.  In RFC 2535 DNSSEC, the child zone has to\n   communicate\
    \ keys to its parent and prudent parents will require some\n   authentication\
    \ with that transaction.  The modified protocol will\n   require the same authentication,\
    \ but allows the child to exert more\n   local control over its own KEY RRset.\n\
    \   There is a remote possibility that an attacker could generate a valid\n  \
    \ KEY that matches all the DS fields, of a specific DS set, and thus\n   forge\
    \ data from the child.  This possibility is considered\n   impractical, as on\
    \ average more than\n      2 ^ (160 - <Number of keys in DS set>)\n   keys would\
    \ have to be generated before a match would be found.\n   An attacker that wants\
    \ to match any DS record will have to generate\n   on average at least 2^80 keys.\n\
    \   The DS record represents a change to the DNSSEC protocol and there is\n  \
    \ an installed base of implementations, as well as textbooks on how to\n   set\
    \ up secure delegations.  Implementations that do not understand\n   the DS record\
    \ will not be able to follow the KEY to DS to KEY chain\n   and will consider\
    \ all zones secured that way as unsecure.\n"
- title: 5.  IANA Considerations
  contents:
  - "5.  IANA Considerations\n   IANA has allocated an RR type code for DS from the\
    \ standard RR type\n   space (type 43).\n   IANA has established a new registry\
    \ for the DS RR type for digest\n   algorithms.  Defined types are:\n      0 is\
    \ Reserved,\n      1 is SHA-1.\n   Adding new reservations requires IETF standards\
    \ action.\n"
- title: 6.  Intellectual Property Statement
  contents:
  - "6.  Intellectual Property Statement\n   The IETF takes no position regarding\
    \ the validity or scope of any\n   intellectual property or other rights that\
    \ might be claimed to\n   pertain to the implementation or use of the technology\
    \ described in\n   this document or the extent to which any license under such\
    \ rights\n   might or might not be available; neither does it represent that it\n\
    \   has made any effort to identify any such rights.  Information on the\n   IETF's\
    \ procedures with respect to rights in standards-track and\n   standards-related\
    \ documentation can be found in BCP-11.  Copies of\n   claims of rights made available\
    \ for publication and any assurances of\n   licenses to be made available, or\
    \ the result of an attempt made to\n   obtain a general license or permission\
    \ for the use of such\n   proprietary rights by implementors or users of this\
    \ specification can\n   be obtained from the IETF Secretariat.\n   The IETF invites\
    \ any interested party to bring to its attention any\n   copyrights, patents or\
    \ patent applications, or other proprietary\n   rights which may cover technology\
    \ that may be required to practice\n   this standard.  Please address the information\
    \ to the IETF Executive\n   Director.\n"
- title: 7.  Acknowledgments
  contents:
  - "7.  Acknowledgments\n   Over the last few years a number of people have contributed\
    \ ideas\n   that are captured in this document.  The core idea of using one key\n\
    \   to sign only the KEY RRset comes from discussions with Bill Manning\n   and\
    \ Perry Metzger on how to put in a single root key in all\n   resolvers. Alexis\
    \ Yushin, Brian Wellington, Sam Weiler, Paul Vixie,\n   Jakob Schlyter, Scott\
    \ Rose, Edward Lewis, Lars-Johan Liman, Matt\n   Larson, Mark Kosters, Dan Massey,\
    \ Olaf Kolman, Phillip Hallam-Baker,\n   Miek Gieben, Havard Eidnes, Donald Eastlake\
    \ 3rd., Randy Bush, David\n   Blacka, Steve Bellovin, Rob Austein, Derek Atkins,\
    \ Roy Arends, Mark\n   Andrews, Harald Alvestrand, and others have provided useful\
    \ comments.\n"
- title: 8.  References
  contents:
  - '8.  References

    '
- title: 8.1.  Normative References
  contents:
  - "8.1.  Normative References\n   [RFC1035]  Mockapetris, P., \"Domain Names - Implementation\
    \ and\n              Specification\", STD 13, RFC 1035, November 1987.\n   [RFC2119]\
    \  Bradner, S., \"Key words for use in RFCs to Indicate\n              Requirement\
    \ Levels\", BCP 14, RFC 2119, March 1997.\n   [RFC2535]  Eastlake, D., \"Domain\
    \ Name System Security Extensions\",\n              RFC 2535, March 1999.\n  \
    \ [RFC3008]  Wellington, B., \"Domain Name System Security (DNSSEC)\n        \
    \      Signing Authority\", RFC 3008, November 2000.\n   [RFC3090]  Lewis, E.,\
    \ \"DNS Security Extension Clarification on Zone\n              Status\", RFC\
    \ 3090, March 2001.\n   [RFC3225]  Conrad, D., \"Indicating Resolver Support of\
    \ DNSSEC\", RFC\n              3225, December 2001.\n   [RFC3445]  Massey, D.\
    \ and S. Rose, \"Limiting the scope of the KEY\n              Resource Record\
    \ (RR)\", RFC 3445, December 2002.\n"
- title: 8.2.  Informational References
  contents:
  - "8.2.  Informational References\n   [RFC2181]  Elz, R. and R. Bush, \"Clarifications\
    \ to the DNS\n              Specification\", RFC 2181, July 1997.\n   [RFC3226]\
    \  Gudmundsson, O., \"DNSSEC and IPv6 A6 aware server/resolver\n             \
    \ message size requirements\", RFC 3226, December 2001.\n"
- title: 9.  Author's Address
  contents:
  - "9.  Author's Address\n   Olafur Gudmundsson\n   3821 Village Park Drive\n   Chevy\
    \ Chase, MD,  20815\n   EMail: ds-rfc@ogud.com\n"
- title: 10.  Full Copyright Statement
  contents:
  - "10.  Full Copyright Statement\n   Copyright (C) The Internet Society (2003).\
    \  All Rights Reserved.\n   This document and translations of it may be copied\
    \ and furnished to\n   others, and derivative works that comment on or otherwise\
    \ explain it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assignees.\n\
    \   This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
