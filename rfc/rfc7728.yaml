- title: __initial_text__
  contents:
  - '                      RTP Stream Pause and Resume

    '
- title: Abstract
  contents:
  - "Abstract\n   With the increased popularity of real-time multimedia applications,\n\
    \   it is desirable to provide good control of resource usage, and users\n   also\
    \ demand more control over communication sessions.  This document\n   describes\
    \ how a receiver in a multimedia conversation can pause and\n   resume incoming\
    \ data from a sender by sending real-time feedback\n   messages when using the\
    \ Real-time Transport Protocol (RTP) for real-\n   time data transport.  This\
    \ document extends the Codec Control Message\n   (CCM) RTP Control Protocol (RTCP)\
    \ feedback package by explicitly\n   allowing and describing specific use of existing\
    \ CCMs and adding a\n   group of new real-time feedback messages used to pause\
    \ and resume RTP\n   data streams.  This document updates RFC 5104.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This\
    \ document is a product of the Internet Engineering Task Force\n   (IETF).  It\
    \ represents the consensus of the IETF community.  It has\n   received public\
    \ review and has been approved for publication by the\n   Internet Engineering\
    \ Steering Group (IESG).  Further information on\n   Internet Standards is available\
    \ in Section 2 of RFC 5741.\n   Information about the current status of this document,\
    \ any errata,\n   and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc7728.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2016 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n   This document\
    \ may contain material from IETF Documents or IETF\n   Contributions published\
    \ or made publicly available before November\n   10, 2008.  The person(s) controlling\
    \ the copyright in some of this\n   material may not have granted the IETF Trust\
    \ the right to allow\n   modifications of such material outside the IETF Standards\
    \ Process.\n   Without obtaining an adequate license from the person(s) controlling\n\
    \   the copyright in such materials, this document may not be modified\n   outside\
    \ the IETF Standards Process, and derivative works of it may\n   not be created\
    \ outside the IETF Standards Process, except to format\n   it for publication\
    \ as an RFC or to translate it into languages other\n   than English.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction  . . . . . . . . . . . . . . . . . . .\
    \ . . . . .   4\n   2.  Definitions . . . . . . . . . . . . . . . . . . . . .\
    \ . . . .   5\n     2.1.  Abbreviations . . . . . . . . . . . . . . . . . . .\
    \ . . .   5\n     2.2.  Terminology . . . . . . . . . . . . . . . . . . . . .\
    \ . .   6\n     2.3.  Requirements Language . . . . . . . . . . . . . . . . .\
    \ .   7\n   3.  Use Cases . . . . . . . . . . . . . . . . . . . . . . . . . .\
    \   8\n     3.1.  Point to Point  . . . . . . . . . . . . . . . . . . . . .  \
    \ 8\n     3.2.  RTP Mixer to Media Sender . . . . . . . . . . . . . . . .   9\n\
    \     3.3.  RTP Mixer to Media Sender in Point to Multipoint  . . . .  10\n  \
    \   3.4.  Media Receiver to RTP Mixer . . . . . . . . . . . . . . .  11\n    \
    \ 3.5.  Media Receiver to Media Sender across RTP Mixer . . . . .  11\n   4. \
    \ Design Considerations . . . . . . . . . . . . . . . . . . . .  12\n     4.1.\
    \  Real-Time Nature  . . . . . . . . . . . . . . . . . . . .  12\n     4.2.  Message\
    \ Direction . . . . . . . . . . . . . . . . . . . .  12\n     4.3.  Apply to Individual\
    \ Sources . . . . . . . . . . . . . . .  12\n     4.4.  Consensus . . . . . .\
    \ . . . . . . . . . . . . . . . . . .  13\n     4.5.  Message Acknowledgments\
    \ . . . . . . . . . . . . . . . . .  13\n     4.6.  Request Retransmission  .\
    \ . . . . . . . . . . . . . . . .  14\n     4.7.  Sequence Numbering  . . . .\
    \ . . . . . . . . . . . . . . .  14\n     4.8.  Relation to Other Solutions .\
    \ . . . . . . . . . . . . . .  14\n   5.  Solution Overview . . . . . . . . .\
    \ . . . . . . . . . . . . .  15\n     5.1.  Expressing Capability . . . . . .\
    \ . . . . . . . . . . . .  16\n     5.2.  PauseID . . . . . . . . . . . . . .\
    \ . . . . . . . . . . .  16\n     5.3.  Requesting to Pause . . . . . . . . .\
    \ . . . . . . . . . .  17\n     5.4.  Media Sender Pausing  . . . . . . . . .\
    \ . . . . . . . . .  18\n     5.5.  Requesting to Resume  . . . . . . . . . .\
    \ . . . . . . . .  19\n     5.6.  TMMBR/TMMBN Considerations  . . . . . . . .\
    \ . . . . . . .  20\n   6.  Participant States  . . . . . . . . . . . . . . .\
    \ . . . . . .  22\n     6.1.  Playing State . . . . . . . . . . . . . . . . .\
    \ . . . . .  22\n     6.2.  Pausing State . . . . . . . . . . . . . . . . . .\
    \ . . . .  22\n     6.3.  Paused State  . . . . . . . . . . . . . . . . . . .\
    \ . . .  23\n       6.3.1.  RTCP BYE Message  . . . . . . . . . . . . . . . .\
    \ . .  24\n       6.3.2.  SSRC Time-Out . . . . . . . . . . . . . . . . . . .\
    \ .  24\n     6.4.  Local Paused State  . . . . . . . . . . . . . . . . . . .\
    \  24\n   7.  Message Format  . . . . . . . . . . . . . . . . . . . . . . .  26\n\
    \   8.  Message Details . . . . . . . . . . . . . . . . . . . . . . .  28\n  \
    \   8.1.  PAUSE . . . . . . . . . . . . . . . . . . . . . . . . . .  29\n    \
    \ 8.2.  PAUSED  . . . . . . . . . . . . . . . . . . . . . . . . .  30\n     8.3.\
    \  RESUME  . . . . . . . . . . . . . . . . . . . . . . . . .  31\n     8.4.  REFUSED\
    \ . . . . . . . . . . . . . . . . . . . . . . . . .  32\n     8.5.  Transmission\
    \ Rules  . . . . . . . . . . . . . . . . . . .  32\n   9.  Signaling . . . . .\
    \ . . . . . . . . . . . . . . . . . . . . .  33\n     9.1.  Offer/Answer Use \
    \ . . . . . . . . . . . . . . . . . . . .  37\n     9.2.  Declarative Use . .\
    \ . . . . . . . . . . . . . . . . . . .  39\n   10. Examples  . . . . . . . .\
    \ . . . . . . . . . . . . . . . . . .  39\n     10.1.  Offer/Answer . . . . .\
    \ . . . . . . . . . . . . . . . . .  40\n     10.2.  Point-to-Point Session .\
    \ . . . . . . . . . . . . . . . .  41\n     10.3.  Point to Multipoint Using Mixer\
    \  . . . . . . . . . . . .  45\n     10.4.  Point to Multipoint Using Translator\
    \ . . . . . . . . . .  47\n   11. IANA Considerations . . . . . . . . . . . .\
    \ . . . . . . . . .  50\n   12. Security Considerations . . . . . . . . . . .\
    \ . . . . . . . .  50\n   13. References  . . . . . . . . . . . . . . . . . .\
    \ . . . . . . .  52\n     13.1.  Normative References . . . . . . . . . . . .\
    \ . . . . . .  52\n     13.2.  Informative References . . . . . . . . . . . .\
    \ . . . . .  53\n   Acknowledgments . . . . . . . . . . . . . . . . . . . . .\
    \ . . . .  54\n   Contributors  . . . . . . . . . . . . . . . . . . . . . . .\
    \ . . .  54\n   Authors' Addresses  . . . . . . . . . . . . . . . . . . . . .\
    \ . .  55\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   As real-time communication attracts more people, more applications\n\
    \   are created; multimedia conversation applications is one example.\n   Multimedia\
    \ conversation further exists in many forms, for example,\n   peer-to-peer chat\
    \ application and multiparty video conferencing\n   controlled by central media\
    \ nodes, such as RTP Mixers.\n   Multimedia conferencing may involve many participants;\
    \ each has its\n   own preferences for the communication session, not only at\
    \ the start\n   but also during the session.  This document describes several\n\
    \   scenarios in multimedia communication where a conferencing node or\n   participant\
    \ chooses to temporarily pause an incoming RTP [RFC3550]\n   stream and later\
    \ resume it when needed.  The receiver does not need\n   to terminate or inactivate\
    \ the RTP session and start all over again\n   by negotiating the session parameters,\
    \ for example, using SIP\n   [RFC3261] with the Session Description Protocol (SDP)\
    \ [RFC4566]\n   offer/answer [RFC3264].\n   Centralized nodes, like RTP Mixers\
    \ or Multipoint Control Units (MCUs)\n   that use either logic based on voice\
    \ activity, other measurements, or\n   user input could reduce the resources consumed\
    \ in both the sender and\n   the network by temporarily pausing the RTP streams\
    \ that aren't\n   required by the RTP Mixer.  If the number of conference participants\n\
    \   are greater than what the conference logic has chosen to present\n   simultaneously\
    \ to receiving participants, some participant RTP\n   streams sent to the RTP\
    \ Mixer may not need to be forwarded to any\n   other participant.  Those RTP\
    \ streams could then be temporarily\n   paused.  This becomes especially useful\
    \ when the media sources are\n   provided in multiple encoding versions (Simulcast)\
    \ [SDP-SIMULCAST] or\n   with Multi-Session Transmission (MST) of scalable encoding\
    \ such as\n   Scalable Video Coding (SVC) [RFC6190].  There may be some of the\n\
    \   defined encodings or a combination of scalable layers that are not\n   used\
    \ or cannot be used all of the time.  As an example, a centralized\n   node may\
    \ choose to pause such unused RTP streams without being\n   explicitly requested\
    \ to do so, maybe due to temporarily limited\n   network or processing resources.\
    \  It may then also send an explicit\n   indication that the streams are paused.\n\
    \   As the set of RTP streams required at any given point in time is\n   highly\
    \ dynamic in such scenarios, using the out-of-band signaling\n   channel for pausing,\
    \ and even more importantly resuming, an RTP\n   stream is difficult due to the\
    \ performance requirements.  Instead,\n   the pause and resume signaling should\
    \ be in the media plane and go\n   directly between the affected nodes.  When\
    \ using RTP [RFC3550] for\n   media transport, using \"Extended RTP Profile for\
    \ Real-time Transport\n   Control Protocol (RTCP)-Based Feedback (RTP/AVPF)\"\
    \ [RFC4585] appears\n   appropriate.  No currently existing RTCP feedback message\
    \ explicitly\n   supports pausing and resuming an incoming RTP stream.  As this\n\
    \   affects the generation of packets and may even allow the encoding\n   process\
    \ to be paused, the functionality appears to match Codec\n   Control Messages\
    \ (CCMs) in the RTP Audio-Visual Profile with Feedback\n   (AVPF) [RFC5104]. \
    \ This document defines the solution as a CCM\n   extension.\n   The Temporary\
    \ Maximum Media Bitrate Request (TMMBR) message of CCM is\n   used by video conferencing\
    \ systems for flow control.  It is desirable\n   to be able to use that method\
    \ with a bitrate value of zero for pause,\n   whenever possible.  This specification\
    \ updates RFC 5104 by adding the\n   new pause and resume semantics to the TMMBR\
    \ and Temporary Maximum\n   Media Bitrate Notification (TMMBN) messages.\n"
- title: 2.  Definitions
  contents:
  - '2.  Definitions

    '
- title: 2.1.  Abbreviations
  contents:
  - "2.1.  Abbreviations\n   AVPF:     Audio-Visual Profile with Feedback (RFC 4585)\n\
    \   CCM:      Codec Control Message (RFC 5104)\n   CNAME:    Canonical Name (RTCP\
    \ Source Description)\n   CSRC:     Contributing Source (RTP)\n   FCI:      Feedback\
    \ Control Information (AVPF)\n   FIR:      Full Intra Refresh (CCM)\n   FMT: \
    \     Feedback Message Type (AVPF)\n   MCU:      Multipoint Control Unit\n   MTU:\
    \      Maximum Transfer Unit\n   PT:       Payload Type (RTP)\n   RTP:      Real-time\
    \ Transport Protocol (RFC 3550)\n   RTCP:     RTP Control Protocol (RFC 3550)\n\
    \   RTCP RR:  RTCP Receiver Report\n   RTCP SR:  RTCP Sender Report\n   SDP: \
    \     Session Description Protocol (RFC 4566)\n   SIP:      Session Initiation\
    \ Protocol (RFC 3261)\n   SSRC:     Synchronization Source (RTP)\n   SVC:    \
    \  Scalable Video Coding\n   TMMBR:    Temporary Maximum Media Bitrate Request\
    \ (CCM)\n   TMMBN:    Temporary Maximum Media Bitrate Notification (CCM)\n   UA:\
    \       User Agent (SIP)\n   UDP:      User Datagram Protocol (RFC 768)\n"
- title: 2.2.  Terminology
  contents:
  - "2.2.  Terminology\n   In addition to the following, the definitions from RTP\
    \ [RFC3550],\n   AVPF [RFC4585], CCM [RFC5104], and RTP Taxonomy [RFC7656] also\
    \ apply\n   in this document.\n   Feedback Messages:  CCM [RFC5104] categorized\
    \ different RTCP feedback\n      messages into four types: Request, Command, Indication,\
    \ and\n      Notification.  This document places the PAUSE and RESUME messages\n\
    \      into the Request category, PAUSED as an Indication, and REFUSED as\n  \
    \    a Notification.\n      PAUSE:    Request from an RTP stream receiver to pause\
    \ a stream\n      RESUME:   Request from an RTP stream receiver to resume a paused\n\
    \                stream\n      PAUSED:   Indication from an RTP stream sender\
    \ that a stream is\n                paused\n      REFUSED:  Notification from\
    \ an RTP stream sender that a PAUSE or\n                RESUME request will not\
    \ be honored\n   Mixer:  The intermediate RTP node that receives an RTP stream\
    \ from\n      different endpoints, combines them to make one RTP stream, and\n\
    \      forwards them to destinations, in the sense described for Topo-\n     \
    \ Mixer in \"RTP Topologies\" [RFC7667].\n   Participant:  A member that is part\
    \ of an RTP session, acting as the\n      receiver, sender, or both.\n   Paused\
    \ sender:  An RTP stream sender that has stopped its\n      transmission, i.e.,\
    \ no other participant receives its RTP\n      transmission, based on having received\
    \ either a PAUSE request,\n      defined in this specification, or a local decision.\n\
    \   Pausing receiver:  An RTP stream receiver that sends a PAUSE request,\n  \
    \    defined in this specification, to another participant(s).\n   Stream:  Used\
    \ as a short term for RTP stream, unless otherwise noted.\n   Stream receiver:\
    \  Short for RTP stream receiver; the RTP entity\n      responsible for receiving\
    \ an RTP stream, usually a Media\n      Depacketizer.\n   Stream sender:  Short\
    \ for RTP stream sender; the RTP entity\n      responsible for creating an RTP\
    \ stream, usually a Media\n      Packetizer.\n"
- title: 2.3.  Requirements Language
  contents:
  - "2.3.  Requirements Language\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\"\
    , \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"\
    NOT RECOMMENDED\", \"MAY\", and\n   \"OPTIONAL\" in this document are to be interpreted\
    \ as described in RFC\n   2119 [RFC2119].\n"
- title: 3.  Use Cases
  contents:
  - "3.  Use Cases\n   This section discusses the main use cases for RTP stream pause\
    \ and\n   resume.\n   The RTCWEB WG's use case and requirements document [RFC7478]\
    \ defines\n   the following API requirements in Appendix A, which is also used\
    \ by\n   the W3C WebRTC WG:\n   A8  The web API must provide means for the web\
    \ application to mute/\n       unmute a stream or stream component(s).  When a\
    \ stream is sent to\n       a peer, mute status must be preserved in the stream\
    \ received by\n       the peer.\n   A9  The web API must provide means for the\
    \ web application to cease\n       the sending of a stream to a peer.\n   This\
    \ document provides means to optimize transport usage by stopping\n   the sending\
    \ of muted streams and starting the sending of streams\n   again when unmuted.\
    \  Here, it is assumed that \"mute\" above can be\n   taken to apply also to media\
    \ other than audio.  At the time of\n   publication for this specification, the\
    \ RTCWEB WG did not specify any\n   pause/resume functionality.\n"
- title: 3.1.  Point to Point
  contents:
  - "3.1.  Point to Point\n   This is the most basic use case with an RTP session\
    \ containing two\n   endpoints.  Each endpoint sends one or more streams.\n  \
    \                          +---+         +---+\n                            |\
    \ A |<------->| B |\n                            +---+         +---+\n       \
    \                  Figure 1: Point to Point\n   The usage of RTP stream pause\
    \ in this use case is to temporarily halt\n   delivery of streams that the sender\
    \ provides but the receiver does\n   not currently use.  This can, for example,\
    \ be due to minimized\n   applications where the video stream is not actually\
    \ shown on any\n   display, or it is not used in any other way, such as being\
    \ recorded.\n   In this case, since there is only a single receiver of the stream,\n\
    \   pausing or resuming a stream does not impact anyone else other than\n   the\
    \ sender and the single receiver of that stream.\n"
- title: 3.2.  RTP Mixer to Media Sender
  contents:
  - "3.2.  RTP Mixer to Media Sender\n   One of the most commonly used topologies\
    \ in centralized conferencing\n   is based on the RTP Mixer [RFC7667].  The main\
    \ reason for this is\n   that it provides a very consistent view of the RTP session\
    \ towards\n   each participant.  That is accomplished through the Mixer originating\n\
    \   its own streams, identified by distinct SSRC values, and any RTP\n   streams\
    \ sent to the participants will be sent using those SSRC\n   values.  If the Mixer\
    \ wants to identify the underlying media sources\n   for its conceptual streams,\
    \ it can identify them using CSRC.  The\n   stream the Mixer provides can be an\
    \ actual mix of multiple media\n   sources, but it might also be switching received\
    \ streams as described\n   in Sections 3.6 - 3.8 of \"RTP Topologies\" [RFC7667].\n\
    \                    +---+      +-----------+      +---+\n                   \
    \ | A |<---->|           |<---->| B |\n                    +---+      |      \
    \     |      +---+\n                               |   Mixer   |\n           \
    \         +---+      |           |      +---+\n                    | C |<---->|\
    \           |<---->| D |\n                    +---+      +-----------+      +---+\n\
    \                    Figure 2: RTP Mixer in Unicast Only\n   Which streams from\
    \ clients B, C, and D that are delivered to a given\n   receiver, A, can depend\
    \ on several things:\n   o  The RTP Mixer's own logic and measurements, such as\
    \ voice activity\n      on the incoming audio streams.\n   o  The number of sent\
    \ media sources exceed what is reasonable to\n      present simultaneously at\
    \ any given receiver.\n   o  A human controlling the conference that determines\
    \ how the media\n      should be mixed.  This would be more common in lecture\
    \ or similar\n      applications where regular listeners may be prevented from\n\
    \      breaking into the session unless approved by the moderator.\n   o  The\
    \ streams may also be part of a Simulcast [SDP-SIMULCAST] or\n      scalable encoded\
    \ (for Multi-Session Transmission) [RFC6190], thus\n      providing multiple versions\
    \ that can be delivered by the RTP\n      stream sender.\n   These examples indicate\
    \ that there are numerous reasons why a\n   particular stream would not currently\
    \ be in use but must be available\n   for use at very short notice if any dynamic\
    \ event occurs that causes\n   a different stream selection to be done in the\
    \ Mixer.\n   Because of this, it would be highly beneficial if the Mixer could\n\
    \   request the RTP stream sender to pause a particular stream.  The\n   Mixer\
    \ also needs to be able to request the RTP stream sender to\n   resume delivery\
    \ with minimal delay.\n   In some cases, especially when the Mixer sends multiple\
    \ RTP streams\n   per receiving client, there may be situations that make it desirable\n\
    \   for the Mixer to pause some of its sent RTP streams, even without\n   being\
    \ explicitly asked to do so by the receiving client.  Such\n   situations can,\
    \ for example, be caused by a temporary lack of\n   available Mixer network or\
    \ processing resources.  An RTP stream\n   receiver that no longer receives an\
    \ RTP stream could interpret this\n   as an error condition and try to take action\
    \ to re-establish the RTP\n   stream.  Such action would likely be undesirable\
    \ if the RTP stream\n   was in fact deliberately paused by the Mixer.  Undesirable\
    \ RTP stream\n   receiver actions could be avoided if the Mixer is able to explicitly\n\
    \   indicate that an RTP stream is deliberately paused.\n   Just as for point\
    \ to point (Section 3.1), there is only a single\n   receiver of the stream, the\
    \ RTP Mixer, and pausing or resuming a\n   stream does not affect anyone else\
    \ other than the sender and single\n   receiver of that stream.\n"
- title: 3.3.  RTP Mixer to Media Sender in Point to Multipoint
  contents:
  - "3.3.  RTP Mixer to Media Sender in Point to Multipoint\n   This use case is similar\
    \ to the previous section; however, the RTP\n   Mixer is involved in three domains\
    \ that need to be separated: the\n   Multicast Network (including participants\
    \ A and C), participant B,\n   and participant D.  The difference from above is\
    \ that A and C share a\n   multicast domain, which is depicted below.\n      \
    \                  +-----+\n             +---+     /       \\     +-----------+\
    \      +---+\n             | A |<---/         \\    |           |<---->| B |\n\
    \             +---+   /   Multi-  \\   |           |      +---+\n            \
    \        +    cast     +->|   Mixer   |\n             +---+   \\  Network  / \
    \  |           |      +---+\n             | C |<---\\         /    |         \
    \  |<---->| D |\n             +---+     \\       /     +-----------+      +---+\n\
    \                        +-----+\n                Figure 3: RTP Mixer in Point\
    \ to Multipoint\n   If the RTP Mixer pauses a stream from A, it will not only\
    \ pause the\n   stream towards itself but will also stop the stream from arriving\
    \ to\n   C, which C is heavily impacted by, might not approve of, and should\n\
    \   thus have a say on.\n   If the Mixer resumes a paused stream from A, it will\
    \ be resumed also\n   towards C.  In this case, if C is not interested, it can\
    \ simply\n   ignore the stream and is not impacted as much as above.\n   In this\
    \ use case, there are several receivers of a stream, and the\n   Mixer must take\
    \ special care so as not to pause a stream that is\n   still wanted by some receivers.\n"
- title: 3.4.  Media Receiver to RTP Mixer
  contents:
  - "3.4.  Media Receiver to RTP Mixer\n   In this use case, the direction of the\
    \ request to pause is the\n   opposite compared to the two previous use cases.\
    \  An endpoint in\n   Figure 2 could potentially request to pause the delivery\
    \ of a given\n   stream.  Possible reasons include those in the point-to-point\
    \ case\n   (Section 3.1) above.\n   When the RTP Mixer is only connected to individual\
    \ unicast paths, the\n   use case and any considerations are identical to the\
    \ point-to-point\n   use case.\n   However, when the endpoint requesting stream\
    \ pause is connected to\n   the RTP Mixer through a multicast network, such as\
    \ A or C in\n   Figure 3, the use case instead becomes identical to the one in\n\
    \   Section 3.3, only with reverse direction of the streams and pause/\n   resume\
    \ requests.\n"
- title: 3.5.  Media Receiver to Media Sender across RTP Mixer
  contents:
  - "3.5.  Media Receiver to Media Sender across RTP Mixer\n   An endpoint, like A\
    \ in Figure 2, could potentially request to pause\n   the delivery of a given\
    \ stream, like one of B's, over any of the\n   SSRCs used by the Mixer by sending\
    \ a pause request for the CSRC\n   identifying the stream.  However, the authors\
    \ are of the opinion that\n   this is not a suitable solution for several reasons:\n\
    \   1.  The Mixer might not include CSRC in its stream indications.\n   2.  An\
    \ endpoint cannot rely on the CSRC to correctly identify the\n       stream to\
    \ be paused when the delivered media is some type of mix.\n       A more elaborate\
    \ stream identification solution is needed to\n       support this in the general\
    \ case.\n   3.  The endpoint cannot determine if a given stream is still needed\n\
    \       by the RTP Mixer to deliver to another session participant.\n   Due to\
    \ the above reasons, we exclude this use case from further\n   consideration.\n"
- title: 4.  Design Considerations
  contents:
  - "4.  Design Considerations\n   This section describes the requirements that this\
    \ specification needs\n   to meet.\n"
- title: 4.1.  Real-Time Nature
  contents:
  - "4.1.  Real-Time Nature\n   The first section (Section 1) of this specification\
    \ describes some\n   possible reasons why a receiver may pause an RTP sender.\
    \  Pausing and\n   resuming is time dependent, i.e., a receiver may choose to\
    \ pause an\n   RTP stream for a certain duration, after which the receiver may\
    \ want\n   the sender to resume.  This time dependency means that the messages\n\
    \   related to pause and resume must be transmitted to the sender in a\n   timely\
    \ fashion in order for them to be purposeful.  The pause\n   operation is arguably\
    \ not as time critical as the resume operation,\n   since it mainly provides a\
    \ reduction of resource usage.  Timely\n   handling of the resume operation is,\
    \ however, likely to directly\n   impact the end-user's perceived quality experience,\
    \ since it affects\n   the availability of media that the user expects to receive\
    \ more or\n   less instantly.  It may also be highly desirable for a receiver\
    \ to\n   quickly learn that an RTP stream is intentionally paused on the RTP\n\
    \   sender's own behalf.\n"
- title: 4.2.  Message Direction
  contents:
  - "4.2.  Message Direction\n   It is the responsibility of an RTP stream receiver\
    \ that wants to\n   pause or resume a stream from the sender(s) to transmit PAUSE\
    \ and\n   RESUME messages.  An RTP stream sender that wants to pause itself can\n\
    \   often simply do it, but sometimes this will adversely affect the\n   receiver\
    \ and an explicit indication that the RTP stream is paused may\n   then help.\
    \  Any indication that an RTP stream is paused is the\n   responsibility of the\
    \ RTP stream sender and may in some cases not\n   even be needed by the stream\
    \ receiver.\n"
- title: 4.3.  Apply to Individual Sources
  contents:
  - "4.3.  Apply to Individual Sources\n   The PAUSE and RESUME messages apply to\
    \ single RTP streams identified\n   by their SSRC, which means the receiver targets\
    \ the sender's SSRC in\n   the PAUSE and RESUME requests.  If a paused sender\
    \ starts sending\n   with a new SSRC, the receivers will need to send a new PAUSE\
    \ request\n   in order to pause it.  PAUSED indications refer to a single one\
    \ of\n   the sender's own paused SSRC.\n"
- title: 4.4.  Consensus
  contents:
  - "4.4.  Consensus\n   An RTP stream sender should not pause an SSRC that some receiver\n\
    \   still wishes to receive.\n   The reason is that in RTP topologies where the\
    \ stream is shared\n   between multiple receivers, a single receiver on that shared\
    \ network\n   must not single-handedly cause the stream to be paused without\n\
    \   letting all other receivers voice their opinions on whether or not\n   the\
    \ stream should be paused.  Such shared networks can, for example,\n   be multicast,\
    \ a mesh with a joint RTP session, or a transport\n   Translator-based network.\
    \  A consequence of this is that a newly\n   joining receiver first needs to learn\
    \ the existence of paused streams\n   and secondly should be able to resume any\
    \ paused stream.  A newly\n   joining receiver can, for example, be detected through\
    \ an RTCP\n   Receiver Report containing both a new SSRC and a CNAME that does\
    \ not\n   already occur in the session.  Any single receiver wanting to resume\n\
    \   a stream should also cause it to be resumed.  An important exception\n   to\
    \ this is when the RTP stream sender is aware of conditions that\n   make it desirable\
    \ or even necessary to pause the RTP stream on its\n   own behalf, without being\
    \ explicitly asked to do so.  Such local\n   consideration in the RTP sender takes\
    \ precedence over RTP receiver\n   wishes to receive the stream.\n"
- title: 4.5.  Message Acknowledgments
  contents:
  - "4.5.  Message Acknowledgments\n   RTP and RTCP does not guarantee reliable data\
    \ transmission.  It uses\n   whatever assurance the lower-layer transport protocol\
    \ can provide.\n   However, this is commonly UDP that provides no reliability\n\
    \   guarantees.  Thus, it is possible that a PAUSE and/or RESUME message\n   transmitted\
    \ from an RTP endpoint does not reach its destination,\n   i.e., the targeted\
    \ RTP stream sender.  When PAUSE or RESUME reaches\n   the RTP stream sender and\
    \ is effective, i.e., an active RTP stream\n   sender pauses or a resuming RTP\
    \ stream sender has media data to\n   transmit, it is immediately seen from the\
    \ arrival or non-arrival of\n   RTP packets for that RTP stream.  Thus, no explicit\
    \ acknowledgments\n   are required in this case.\n   In some cases, when a PAUSE\
    \ or RESUME message reaches the RTP stream\n   sender, it will not be able to\
    \ pause or resume the stream due to some\n   local consideration, for example,\
    \ lack of data to transmit.  In this\n   error condition, a negative acknowledgment\
    \ may be needed to avoid\n   unnecessary retransmission of requests (Section 4.6).\n"
- title: 4.6.  Request Retransmission
  contents:
  - "4.6.  Request Retransmission\n   When the stream is not affected as expected\
    \ by a PAUSE or RESUME\n   request, the request may have been lost and the sender\
    \ of the request\n   will need to retransmit it.  The retransmission should take\
    \ the\n   round-trip time into account, and will also need to take the normal\n\
    \   RTCP bandwidth and timing rules applicable to the RTP session into\n   account,\
    \ when scheduling retransmission of feedback.\n   When it comes to resume requests\
    \ or unsolicited paused indications\n   that are more time critical, the best\
    \ performance may be achieved by\n   repeating the message as often as possible\
    \ until a sufficient number\n   have been sent to reach a high probability of\
    \ message delivery or at\n   an explicit indication that the message was delivered.\
    \  For resume\n   requests, such explicit indication can be delivery of the RTP\
    \ stream\n   being requested to be resumed.\n"
- title: 4.7.  Sequence Numbering
  contents:
  - "4.7.  Sequence Numbering\n   A PAUSE request message will need to have a sequence\
    \ number to\n   separate retransmissions from new requests.  A retransmission\
    \ keeps\n   the sequence number unchanged, while it is incremented every time\
    \ a\n   new PAUSE request is transmitted that is not a retransmission of a\n \
    \  previous request.\n   Since RESUME always takes precedence over PAUSE and is\
    \ even allowed\n   to avoid pausing a stream, there is a need to keep strict ordering\
    \ of\n   PAUSE and RESUME.  Thus, RESUME needs to share sequence number space\n\
    \   with PAUSE and implicitly reference which PAUSE it refers to.  For\n   the\
    \ same reasons, the explicit PAUSED indication also needs to share\n   sequence\
    \ number space with PAUSE and RESUME.\n"
- title: 4.8.  Relation to Other Solutions
  contents:
  - "4.8.  Relation to Other Solutions\n   A performance comparison between SIP/SDP\
    \ and RTCP signaling\n   technologies was made and included in draft versions\
    \ of this\n   specification.  Using SIP and SDP to carry pause and resume\n  \
    \ information means that they will need to traverse the entire\n   signaling path\
    \ to reach the signaling destination (either the remote\n   endpoint or the entity\
    \ controlling the RTP Mixer) across any\n   signaling proxies that potentially\
    \ also have to process the SDP\n   content to determine if they are expected to\
    \ act on it.  The amount\n   of bandwidth required for a signaling solution based\
    \ on SIP/SDP is in\n   the order of at least 10 times more than an RTCP-based\
    \ solution.\n   Especially for a UA sitting on mobile wireless access, this will\
    \ risk\n   introducing delays that are too long (Section 4.1) to provide a good\n\
    \   user experience, and the bandwidth cost may also be considered\n   infeasible\
    \ compared to an RTCP-based solution.  RTCP data sent\n   through the media path,\
    \ which is likely shorter (contains fewer\n   intermediate nodes) than the signaling\
    \ path, may have to traverse a\n   few intermediate nodes anyway.  The amount\
    \ of processing and\n   buffering required in intermediate nodes to forward those\
    \ RTCP\n   messages is, however, believed to be significantly less than for\n\
    \   intermediate nodes in the signaling path.  Based on those\n   considerations,\
    \ RTCP is chosen as the signaling protocol for the\n   pause and resume functionality.\n"
- title: 5.  Solution Overview
  contents:
  - "5.  Solution Overview\n   The proposed solution implements pause and resume functionality\
    \ based\n   on sending AVPF RTCP feedback messages from any RTP session\n   participant\
    \ that wants to pause or resume a stream targeted at the\n   stream sender, as\
    \ identified by the sender SSRC.\n   This solution reuses CCM TMMBR and TMMBN\
    \ [RFC5104] to the extent\n   possible and defines a small set of new RTCP feedback\
    \ messages where\n   new semantics is needed.\n   A single feedback message specification\
    \ is used to implement the new\n   messages.  The message consists of a number\
    \ of Feedback Control\n   Information (FCI) blocks, where each block can be a\
    \ PAUSE request, a\n   RESUME request, a PAUSED indication, a REFUSED notification,\
    \ or an\n   extension to this specification.  This structure allows a single\n\
    \   feedback message to handle pause functionality on a number of\n   streams.\n\
    \   The PAUSED functionality is also defined in such a way that it can be\n  \
    \ used as a standalone by the RTP stream sender to indicate a local\n   decision\
    \ to pause, and it can inform any receiver of the fact that\n   halting media\
    \ delivery is deliberate and which RTP packet was the\n   last transmitted.\n\
    \   Special considerations that apply when using TMMBR/TMMBN for pause\n   and\
    \ resume purposes are described in Section 5.6.  This specification\n   applies\
    \ to both the new messages defined herein as well as their\n   TMMBR/TMMBN counterparts,\
    \ except when explicitly stated otherwise.\n   An obvious exception is any reference\
    \ to the message parameters that\n   are only available in the messages defined\
    \ here.  For example, any\n   reference to PAUSE in the text below is equally\
    \ applicable to\n   TMMBR 0, and any reference to PAUSED is equally applicable\
    \ to TMMBN\n   0.  Therefore, and for brevity, TMMBR/TMMBN will not be mentioned\
    \ in\n   the text, unless there is specific reason to do so.\n   This section\
    \ is intended to be explanatory and therefore\n   intentionally contains no mandatory\
    \ statements.  Such statements can\n   instead be found in other parts of this\
    \ specification.\n"
- title: 5.1.  Expressing Capability
  contents:
  - "5.1.  Expressing Capability\n   An endpoint can use an extension to CCM SDP signaling\
    \ to declare\n   capability to understand the messages defined in this specification.\n\
    \   Capability to understand only a subset of messages is possible, to\n   support\
    \ partial implementation, which is specifically believed to be\n   feasible for\
    \ the 'RTP Mixer to Media Sender' use case (Section 3.2).\n   In that use case,\
    \ only the RTP Mixer has capability to request the\n   media sender to pause or\
    \ resume.  Consequently, in that same use\n   case, only the media sender has\
    \ capability to pause and resume its\n   sent streams based on requests from the\
    \ RTP Mixer.  Allowing for\n   partial implementation of this specification is\
    \ not believed to\n   hamper interoperability, as long as the subsets are well\
    \ defined and\n   describe a consistent functionality, including a description\
    \ of how a\n   more capable implementation must perform fallback.\n   For the\
    \ case when TMMBR/TMMBN are used for pause and resume purposes,\n   it is possible\
    \ to explicitly express joint support for TMMBR and\n   TMMBN, but not for TMMBN\
    \ only.\n"
- title: 5.2.  PauseID
  contents:
  - "5.2.  PauseID\n   All messages defined in this specification (Section 8) contain\
    \ a\n   PauseID, satisfying the design consideration on sequence numbering\n \
    \  (Section 4.7).  This PauseID is scoped by and thus a property of the\n   targeted\
    \ RTP stream (SSRC) and is not only a sequence number for\n   individual messages.\
    \  Instead, it numbers an entire \"pause and resume\n   operation\" for the RTP\
    \ stream, typically keeping PauseID constant for\n   multiple, related messages.\
    \  The PauseID value used during such\n   operation is called the current PauseID.\
    \  A new \"pause and resume\n   operation\" is defined to start when the RTP stream\
    \ sender resumes the\n   RTP stream after it was being paused.  The current PauseID\
    \ is then\n   incremented by one in modulo arithmetic.  In the subsequent\n  \
    \ descriptions below, it is sometimes necessary to refer to PauseID\n   values\
    \ that were already used as the current PauseID, which is\n   denoted as the past\
    \ PauseID.  It should be noted that since PauseID\n   uses modulo arithmetic,\
    \ a past PauseID may have a larger value than\n   the current PauseID.  Since\
    \ PauseID uses modulo arithmetic, it is\n   also useful to define what PauseID\
    \ values are considered \"past\" to\n   clearly separate it from what could be\
    \ considered \"future\" PauseID\n   values.  Half of the entire PauseID value\
    \ range is chosen to\n   represent a past PauseID, while a quarter of the PauseID\
    \ value range\n   is chosen to represent future values.  The remaining quarter\
    \ of the\n   PauseID value range is intentionally left undefined in that respect.\n"
- title: 5.3.  Requesting to Pause
  contents:
  - "5.3.  Requesting to Pause\n   An RTP stream receiver can choose to send a PAUSE\
    \ request at any\n   time, subject to AVPF timing rules.\n   The PAUSE request\
    \ contains the current PauseID (Section 5.2).\n   When a non-paused RTP stream\
    \ sender receives the PAUSE request, it\n   continues to send the RTP stream while\
    \ waiting for some time to allow\n   other RTP stream receivers in the same RTP\
    \ session that saw this\n   PAUSE request to disapprove by sending a RESUME (Section\
    \ 5.5) for the\n   same stream and with the same current PauseID as in the PAUSE\
    \ being\n   disapproved.  If such a disapproving RESUME arrives at the RTP stream\n\
    \   sender during the hold-off period before the stream is paused, the\n   pause\
    \ is not performed.  In point-to-point configurations, the hold-\n   off period\
    \ may be set to zero.  Using a hold-off period of zero is\n   also appropriate\
    \ when using TMMBR 0 and is in line with the semantics\n   for that message.\n\
    \   If the RTP stream sender receives further PAUSE requests with the\n   current\
    \ PauseID while waiting as described above, those additional\n   requests are\
    \ ignored.\n   If the PAUSE request is lost before it reaches the RTP stream sender,\n\
    \   it will be discovered by the RTP stream receiver because it continues\n  \
    \ to receive the RTP stream.  It will also not see any PAUSED\n   indication (Section\
    \ 5.4) for the stream.  The same condition can be\n   caused by the RTP stream\
    \ sender having received a disapproving RESUME\n   from stream receiver A for\
    \ a PAUSE request sent by stream sender B,\n   except that the PAUSE sender (B)\
    \ did not receive the RESUME (from A)\n   and may instead think that the PAUSE\
    \ was lost.  In both cases, a\n   PAUSE request can be retransmitted using the\
    \ same current PauseID.\n   If using TMMBR 0, the request MAY be retransmitted\
    \ when the requester\n   fails to receive a TMMBN 0 confirmation.\n   If the pending\
    \ stream pause is aborted due to a disapproving RESUME,\n   the pause and resume\
    \ operation for that PauseID is concluded, the\n   current PauseID is updated,\
    \ and any new PAUSE must therefore use the\n   new current PauseID to be effective.\n\
    \   An RTP stream sender receiving a PAUSE not using the current PauseID\n   informs\
    \ the RTP stream receiver sending the ineffective PAUSE of this\n   condition\
    \ by sending a REFUSED notification that contains the current\n   PauseID value.\n\
    \   A situation where an ineffective PauseID is chosen can appear when a\n   new\
    \ RTP stream receiver joins a session and wants to PAUSE a stream\n   but does\
    \ not yet know the current PauseID to use.  The REFUSED\n   notification will\
    \ then provide sufficient information to create a\n   valid PAUSE.  The required\
    \ extra signaling round trip is not\n   considered harmful, since it is assumed\
    \ that pausing a stream is not\n   time critical (Section 4.1).\n   There may\
    \ be local considerations making it impossible or infeasible\n   to pause the\
    \ stream, and the RTP stream sender can then respond with\n   a REFUSED.  In this\
    \ case, if the used current PauseID would otherwise\n   have been effective, REFUSED\
    \ contains the same current PauseID as in\n   the PAUSE request.  Note that when\
    \ using TMMBR 0 as PAUSE, that\n   request cannot be refused (TMMBN > 0) due to\
    \ the existing restriction\n   in Section 4.2.2.2 of [RFC5104] that TMMBN shall\
    \ contain the current\n   bounding set, and the fact that a TMMBR 0 will always\
    \ be the most\n   restrictive point in any bounding set, regardless of the bounding\
    \ set\n   overhead value.\n   If the RTP stream sender receives several identical\
    \ PAUSE requests\n   for an RTP stream that was already responded to at least\
    \ once with\n   REFUSED and the condition causing REFUSED remains, those additional\n\
    \   REFUSED notifications should be sent with regular RTCP timing.  A\n   single\
    \ REFUSED can respond to several identical PAUSE requests.\n"
- title: 5.4.  Media Sender Pausing
  contents:
  - "5.4.  Media Sender Pausing\n   An RTP stream sender can choose to pause the stream\
    \ at any time.\n   This can be either a result of receiving a PAUSE or based on\
    \ some\n   local sender consideration.  When it does, it sends a PAUSED\n   indication,\
    \ containing the current PauseID.  Note that the current\n   PauseID in an unsolicited\
    \ PAUSED (without having received a PAUSE) is\n   incremented compared to a previously\
    \ sent PAUSED.  It also sends the\n   PAUSED indication in the next two regular\
    \ RTCP reports, given that\n   the pause condition is then still effective.\n\
    \   There is no reply to a PAUSED indication; it is simply an explicit\n   indication\
    \ of the fact that an RTP stream is paused.  This can be\n   helpful for the RTP\
    \ stream receiver, for example, to quickly\n   understand that transmission is\
    \ deliberately and temporarily\n   suspended and no specific corrective action\
    \ is needed.\n   The RTP stream sender may want to apply some local consideration\
    \ to\n   exactly when the RTP stream is paused, for example, completing some\n\
    \   media unit or a forward error correction block, before pausing the\n   stream.\n\
    \   The PAUSED indication also contains information about the RTP\n   extended\
    \ highest sequence number when the pause became effective.\n   This provides RTP\
    \ stream receivers with firsthand information that\n   allows them to know whether\
    \ they lost any packets just before the\n   stream paused or when the stream is\
    \ resumed again.  This allows RTP\n   stream receivers to quickly and safely take\
    \ into account that the\n   stream is paused in, for example, retransmission or\
    \ congestion\n   control algorithms.\n   If the RTP stream sender receives PAUSE\
    \ requests with the current\n   PauseID while the stream is already paused, those\
    \ requests are\n   ignored.\n   As long as the stream is being paused, the PAUSED\
    \ indication MAY be\n   sent together with any regular RTCP Sender Report (SR)\
    \ or Receiver\n   Report (RR).  Including PAUSED in this way allows RTP stream\n\
    \   receivers to join while the stream is paused and to quickly know that\n  \
    \ there is a paused stream, what the last sent extended RTP sequence\n   number\
    \ is, and what the current PauseID is, which enables them to\n   construct valid\
    \ PAUSE and RESUME requests at a later stage.\n   When the RTP stream sender learns\
    \ that a new endpoint has joined the\n   RTP session, for example, by a new SSRC\
    \ and a CNAME that was not\n   previously seen in the RTP session, it should send\
    \ PAUSED indications\n   for all its paused streams at its earliest opportunity.\
    \  In addition,\n   it should continue to include PAUSED indications in at least\
    \ two\n   regular RTCP reports.\n"
- title: 5.5.  Requesting to Resume
  contents:
  - "5.5.  Requesting to Resume\n   An RTP stream receiver can request the RTP stream\
    \ sender to resume a\n   stream with a RESUME request at any time, subject to\
    \ AVPF timing\n   rules.  The RTP stream receiver must include the current PauseID\
    \ in\n   the RESUME request for it to be effective.\n   A pausing RTP stream sender\
    \ that receives a RESUME including the\n   current PauseID resumes the stream\
    \ at the earliest opportunity.\n   Receiving RESUME requests for a stream that\
    \ is not paused does not\n   require any action and can be ignored.\n   There\
    \ may be local considerations at the RTP stream sender, for\n   example, that\
    \ the media device is not ready, making it temporarily\n   impossible to resume\
    \ the stream at that point in time, and the RTP\n   stream sender can then respond\
    \ with a REFUSED containing the current\n   PauseID.  When receiving such REFUSED\
    \ with a current PauseID\n   identical to the one in the sent RESUME, RTP stream\
    \ receivers should\n   avoid sending further RESUME requests for some reasonable\
    \ amount of\n   time to allow the condition to clear.  An RTP stream sender having\n\
    \   sent a REFUSED SHOULD resume the stream through local considerations\n   (see\
    \ below) when the condition that caused the REFUSED is no longer\n   true.\n \
    \  If the RTP stream sender receives several identical RESUME requests\n   for\
    \ an RTP stream that was already at least once responded to with\n   REFUSED and\
    \ the condition causing REFUSED remains, those additional\n   REFUSED notifications\
    \ should be sent with regular RTCP timing.  A\n   single REFUSED can respond to\
    \ several identical RESUME requests.\n   A pausing RTP stream sender can apply\
    \ local considerations and can\n   resume a paused RTP stream at any time.  If\
    \ TMMBR 0 was used to pause\n   the RTP stream, resumption is prevented by protocol,\
    \ even if the RTP\n   sender would like to resume due to local considerations.\
    \  If TMMBR/\n   TMMBN signaling is used, the RTP stream is paused due to local\n\
    \   considerations (Section 5.4), and the RTP stream sender thus owns the\n  \
    \ TMMBN bounding set, the RTP stream can be resumed due to local\n   considerations.\n\
    \   When resuming a paused stream, especially for media that makes use of\n  \
    \ temporal redundancy between samples such as video, it may not be\n   appropriate\
    \ to use such temporal dependency in the encoding between\n   samples taken before\
    \ the pause and at the time instant the stream is\n   resumed.  Should such temporal\
    \ dependency between media samples\n   before and after the media was paused be\
    \ used by the RTP stream\n   sender, it requires the RTP stream receiver to have\
    \ saved the samples\n   from before the pause for successful continued decoding\
    \ when\n   resuming.  The use of this temporal dependency of media samples from\n\
    \   before the pause is left up to the RTP stream sender.  If temporal\n   dependency\
    \ on samples from before the pause is not used when the RTP\n   stream is resumed,\
    \ the first encoded sample after the pause will not\n   contain any temporal dependency\
    \ on samples before the pause (for\n   video it may be a so-called intra picture).\
    \  If temporal dependency\n   on samples from before the pause is used by the\
    \ RTP stream sender\n   when resuming, and if the RTP stream receiver did not\
    \ save any sample\n   from before the pause, the RTP stream receiver can use a\
    \ FIR request\n   [RFC5104] to explicitly ask for a sample without temporal dependency\n\
    \   (for video a so-called intra picture), even at the same time as\n   sending\
    \ the RESUME.\n"
- title: 5.6.  TMMBR/TMMBN Considerations
  contents:
  - "5.6.  TMMBR/TMMBN Considerations\n   As stated above, TMMBR/TMMBN may be used\
    \ to provide pause and resume\n   functionality for the point-to-point case. \
    \ If the topology is not\n   point to point, TMMBR/TMMBN cannot safely be used\
    \ for pause or\n   resume.  This use is expected to be mainly for interworking\
    \ with\n   implementations that don't support the messages defined in this\n \
    \  specification (Section 8) but make use of TMMBR/TMMBN to achieve a\n   similar\
    \ effect.\n   This is a brief summary of what functionality is provided when using\n\
    \   TMMBR/TMMBN:\n   TMMBR 0:  Corresponds to PAUSE, without the requirement for\
    \ any hold-\n      off period to wait for RESUME before pausing the RTP stream.\n\
    \   TMMBR > 0:  Corresponds to RESUME when the RTP stream was previously\n   \
    \   paused with TMMBR 0.  Since there is only a single RTP stream\n      receiver,\
    \ there is no need for the RTP stream sender to delay\n      resuming the stream\
    \ until after sending TMMBN > 0 or to apply the\n      hold-off period specified\
    \ in [RFC5104] before increasing the\n      bitrate from zero.  The bitrate value\
    \ used when resuming after\n      pausing with TMMBR 0 is either according to\
    \ known limitations or\n      based on starting a stream with the configured maximum\
    \ for the\n      stream or session, for example, given by \"b=\" line in SDP.\n\
    \   TMMBN 0:  Corresponds to PAUSED when the RTP stream was paused with\n    \
    \  TMMBR 0 but may, just as PAUSED, also be used unsolicited.  An\n      unsolicited\
    \ RTP stream pause based on local sender considerations\n      uses the RTP stream's\
    \ own SSRC as the TMMBR restriction owner in\n      the TMMBN message bounding\
    \ set.  It also corresponds to a REFUSED\n      notification when a stream is\
    \ requested to be resumed with\n      TMMBR > 0, thus resulting in the stream\
    \ sender becoming the owner\n      of the bounding set in the TMMBN message.\n\
    \   TMMBN > 0:  Cannot be used as a REFUSED notification when a stream is\n  \
    \    requested to be paused with TMMBR 0, for reasons stated in\n      Section\
    \ 5.3.\n"
- title: 6.  Participant States
  contents:
  - "6.  Participant States\n   This document introduces three new states for a stream\
    \ in an RTP\n   sender, according to the figure and subsections below.  Any\n\
    \   references to PAUSE, PAUSED, RESUME, and REFUSED in this section\n   SHALL\
    \ be taken to apply to the extent possible also when TMMBR/TMMBN\n   are used\
    \ (Section 5.6) for this functionality.\n         +------------------------------------------------------+\n\
    \         |                     Received RESUME                  |\n         v\
    \                                                      |\n    +---------+ Received\
    \ PAUSE  +---------+ Hold-off period +--------+\n    | Playing |---------------->|\
    \ Pausing |---------------->| Paused |\n    |         |<----------------|    \
    \     |                 |        |\n    +---------+ Received RESUME +---------+\
    \                 +--------+\n      ^     |                        | PAUSE decision\
    \           |\n      |     |                        v                        \
    \  |\n      |     |  PAUSE decision   +---------+    PAUSE decision   |\n    \
    \  |     +------------------>| Local   |<--------------------+\n      +-------------------------|\
    \ Paused  |\n              RESUME decision   +---------+\n                   Figure\
    \ 4: RTP Pause States in Sender\n"
- title: 6.1.  Playing State
  contents:
  - "6.1.  Playing State\n   This state is not new but is the normal media sending\
    \ state from\n   [RFC3550].  When entering the state, the current PauseID MUST\
    \ be\n   incremented by one in modulo arithmetic.  The RTP sequence number for\n\
    \   the first packet sent after a pause SHALL be incremented by one\n   compared\
    \ to the highest RTP sequence number sent before the pause.\n   The first RTP\
    \ timestamp for the first packet sent after a pause\n   SHOULD be set according\
    \ to capture times at the source, meaning the\n   RTP timestamp difference compared\
    \ to before the pause reflects the\n   time the RTP stream was paused.\n"
- title: 6.2.  Pausing State
  contents:
  - "6.2.  Pausing State\n   In this state, the RTP stream sender has received at\
    \ least one PAUSE\n   message for the stream in question.  The RTP stream sender\
    \ SHALL wait\n   during a hold-off period for the possible reception of RESUME\n\
    \   messages for the RTP stream being paused before actually pausing RTP\n   stream\
    \ transmission.  The hold-off period to wait SHALL be long\n   enough to allow\
    \ another RTP stream receiver to respond to the PAUSE\n   with a RESUME, if it\
    \ determines that it would not like to see the\n   stream paused.  This hold-off\
    \ period is determined by the formula:\n      2 * RTT + T_dither_max,\n   where\
    \ RTT is the longest round trip known to the RTP stream sender\n   and T_dither_max\
    \ is defined in Section 3.4 of [RFC4585].  The hold-\n   off period MAY be set\
    \ to 0 by some signaling (Section 9) means when\n   it can be determined that\
    \ there is only a single receiver, for\n   example, in point to point or some\
    \ unicast situations.\n   If the RTP stream sender has set the hold-off period\
    \ to 0 and\n   receives information that it was an incorrect decision and that\
    \ there\n   are in fact several receivers of the stream, it MUST change the hold-\n\
    \   off period to be based on the above formula instead.\n   An RTP stream sender\
    \ SHOULD use the following criteria to determine\n   if there is only a single\
    \ receiver, unless it has explicit and more\n   reliable information:\n   o  Observing\
    \ only a single CNAME across all received SSRCs (CNAMEs\n      for received CSRCs\
    \ are insignificant), or\n   o  If RTCP reporting groups [MULTI-STREAM-OPT] is\
    \ used, observing\n      only a single, endpoint external RTCP reporting group.\n"
- title: 6.3.  Paused State
  contents:
  - "6.3.  Paused State\n   An RTP stream is in paused state when the sender pauses\
    \ its\n   transmission after receiving at least one PAUSE message and the hold-\n\
    \   off period has passed without receiving any RESUME message for that\n   stream.\
    \  Pausing transmission SHOULD only be done when reaching an\n   appropriate place\
    \ to pause in the stream, like a media boundary that\n   avoids a media receiver\
    \ to trigger repair or concealment actions.\n   When entering the state, the RTP\
    \ stream sender SHALL send a PAUSED\n   indication to all known RTP stream receivers,\
    \ and SHALL also repeat\n   PAUSED in the next two regular RTCP reports, as long\
    \ as it is then\n   still in paused state.\n   Pausing an RTP stream MUST NOT\
    \ affect the sending of RTP keepalive\n   [RFC6263][RFC5245] applicable to that\
    \ RTP stream.\n   The following subsections discuss some potential issues when\
    \ an RTP\n   sender goes into paused state.  These conditions are also valid if\
    \ an\n   RTP Translator is used in the communication.  When an RTP Mixer\n   implementing\
    \ this specification is involved between the participants\n   (which forwards\
    \ the stream by marking the RTP data with its own\n   SSRC), it SHALL be a responsibility\
    \ of the Mixer to control sending\n   PAUSE and RESUME requests to the sender.\
    \  The below conditions also\n   apply to the sender and receiver parts of the\
    \ RTP Mixer,\n   respectively.\n"
- title: 6.3.1.  RTCP BYE Message
  contents:
  - "6.3.1.  RTCP BYE Message\n   When a participant leaves the RTP session, it sends\
    \ an RTCP BYE\n   message.  In addition to the semantics described in Sections\
    \ 6.3.4\n   and 6.3.7 of RTP [RFC3550], the following two conditions MUST also\
    \ be\n   considered when an RTP participant sends an RTCP BYE message:\n   o \
    \ If a paused sender sends an RTCP BYE message, receivers observing\n      this\
    \ SHALL NOT send further PAUSE or RESUME requests to it.\n   o  Since a sender\
    \ pauses its transmission on receiving the PAUSE\n      requests from any receiver\
    \ in a session, the sender MUST keep\n      record of which receiver caused the\
    \ RTP stream to pause.  If that\n      receiver sends an RTCP BYE message observed\
    \ by the sender, the\n      sender SHALL resume the RTP stream.  No receivers\
    \ that were in the\n      RTP session when the stream was paused objected that\
    \ the stream\n      was paused, but if there were so far undetected receivers\
    \ added to\n      the session during pause, those may not have learned about the\n\
    \      existence of the paused stream because either there was no PAUSED\n   \
    \   sent for the paused RTP stream or those receivers did not support\n      PAUSED.\
    \  Resuming the stream when the pausing party leaves the RTP\n      session allows\
    \ those potentially undetected receivers to learn\n      that the stream exists.\n"
- title: 6.3.2.  SSRC Time-Out
  contents:
  - "6.3.2.  SSRC Time-Out\n   Section 6.3.5 in RTP [RFC3550] describes the SSRC time-out\
    \ of an RTP\n   participant.  Every RTP participant maintains a sender and receiver\n\
    \   list in a session.  If a participant does not get any RTP or RTCP\n   packets\
    \ from some other participant for the last five RTCP reporting\n   intervals,\
    \ it removes that participant from the receiver list.  Any\n   streams that were\
    \ paused by that removed participant SSRC SHALL be\n   resumed.\n"
- title: 6.4.  Local Paused State
  contents:
  - "6.4.  Local Paused State\n   This state can be entered at any time, based on\
    \ local decision from\n   the RTP stream sender.  Pausing transmission SHOULD\
    \ only be done when\n   reaching an appropriate place to pause in the stream,\
    \ like a media\n   boundary that avoids a media receiver to trigger repair or\n\
    \   concealment actions.\n   As with paused state (Section 6.3), the RTP stream\
    \ sender SHALL send\n   a PAUSED indication to all known RTP stream receivers,\
    \ when entering\n   the state, unless the stream was already in paused state\n\
    \   (Section 6.3).  Such PAUSED indication SHALL be repeated a sufficient\n  \
    \ number of times to reach a high probability that the message is\n   correctly\
    \ delivered, stopping such repetition whenever leaving the\n   state.\n   When\
    \ using TMMBN 0 as a PAUSED indication and when already in paused\n   state, the\
    \ actions when entering local paused state depends on the\n   bounding set overhead\
    \ value in the received TMMBR 0 that caused the\n   paused state and the bounding\
    \ set overhead value used in (the RTP\n   stream sender's own) TMMBN 0:\n   TMMBN\
    \ 0 overhead <= TMMBR 0 overhead:  The RTP stream sender SHALL\n      NOT send\
    \ any new TMMBN 0 replacing that active (more restrictive)\n      bounding set,\
    \ even if entering local paused state.\n   TMMBN 0 overhead > TMMBR 0 overhead:\
    \  The RTP stream sender SHALL\n      send TMMBN 0 with itself in the TMMBN bounding\
    \ set when entering\n      local paused state.\n   The case above, when using\
    \ TMMBN 0 as a PAUSED indication, being in\n   local paused state, and having\
    \ received a TMMBR 0 with a bounding set\n   overhead value greater than the value\
    \ the RTP stream sender would\n   itself use in a TMMBN 0, requires further consideration\
    \ and is for\n   clarity henceforth referred to as \"restricted local paused state\"\
    .\n   As indicated in Figure 4, local paused state has higher precedence\n   than\
    \ paused state (Section 6.3), and RESUME messages alone cannot\n   resume a paused\
    \ RTP stream as long as the local decision still\n   applies.  An RTP stream sender\
    \ in local paused state is responsible\n   for leaving the state whenever the\
    \ conditions that caused the\n   decision to enter the state no longer apply.\n\
    \   If the RTP stream sender is in restricted local paused state, it\n   cannot\
    \ leave that state until the TMMBR 0 limit causing the state is\n   removed by\
    \ a TMMBR > 0 (RESUME).  If the RTP stream sender then needs\n   to stay in local\
    \ paused state due to local considerations, it MAY\n   continue pausing the RTP\
    \ stream by entering local paused state and\n   MUST then act accordingly, including\
    \ sending a TMMBN 0 with itself in\n   the bounding set.\n   Pausing an RTP stream\
    \ MUST NOT affect the sending of RTP keepalive\n   [RFC6263][RFC5245] applicable\
    \ to that RTP stream.\n   When leaving the local paused state, the stream state\
    \ SHALL become\n   Playing, regardless of whether or not there were any RTP stream\n\
    \   receivers that sent PAUSE for that stream during the local paused\n   state,\
    \ effectively clearing the RTP stream sender's memory for that\n   stream.\n"
- title: 7.  Message Format
  contents:
  - "7.  Message Format\n   Section 6 of AVPF [RFC4585] defines three types of low-delay\
    \ RTCP\n   feedback messages, i.e., transport-layer, payload-specific, and\n \
    \  application-layer feedback messages.  This document defines a new\n   transport-layer\
    \ feedback message, which is further subtyped into\n   either a PAUSE request,\
    \ a RESUME request, a PAUSED indication, or a\n   REFUSED notification.\n   The\
    \ transport-layer feedback messages are identified by having the\n   RTCP payload\
    \ type be RTPFB (205) as defined by AVPF [RFC4585].  This\n   transport-layer\
    \ feedback message, containing one or more of the\n   subtyped messages, is henceforth\
    \ referred to as the PAUSE-RESUME\n   message.  The specific FCI format is identified\
    \ by a Feedback Message\n   Type (FMT) value in a common packet header for the\
    \ feedback message\n   defined in Section 6.1 of AVPF [RFC4585].  The PAUSE-RESUME\n\
    \   transport-layer feedback message FCI is identified by FMT value = 9.\n   The\
    \ Common Packet Format for feedback messages defined by AVPF\n   [RFC4585] is:\n\
    \      0                   1                   2                   3\n      0\
    \ 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     |V=2|P|   FMT   |       PT      |          Length               |\n    \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     |  \
    \                SSRC of packet sender                        |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     |                  SSRC of media source                         |\n    \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     :  \
    \          Feedback Control Information (FCI)                 :\n     :      \
    \                                                         :\n           Figure\
    \ 5: AVPF Common Feedback Message Packet Format\n   For the PAUSE-RESUME message\
    \ defined in this memo, the following\n   interpretations of the packet fields\
    \ apply:\n   FMT:  The FMT value identifying the PAUSE-RESUME FCI: 9\n   PT: \
    \ Payload Type = 205 (RTPFB)\n   Length:  As defined by AVPF, i.e., the length\
    \ of this packet in\n      32-bit words minus one, including the header and any\
    \ padding.\n   SSRC of packet sender:  The SSRC of the RTP session participant\n\
    \      sending the messages in the FCI.  Note, for endpoints that have\n     \
    \ multiple SSRCs in an RTP session, any of its SSRCs MAY be used to\n      send\
    \ any of the pause message types.\n   SSRC of media source:  Not used; SHALL be\
    \ set to 0.  The FCI\n      identifies the SSRC the message is targeted for.\n\
    \   The FCI field consists of one or more PAUSE, RESUME, PAUSED, or\n   REFUSED\
    \ messages or any future extension.  These messages have the\n   following FCI\
    \ format:\n      0                   1                   2                   3\n\
    \      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     |                           Target SSRC                         |\n    \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     | Type\
    \  |  Res  | Parameter Len |           PauseID             |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     :                         Type Specific                         :\n    \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n       Figure\
    \ 6: Syntax of FCI Entry in the PAUSE and RESUME Message\n   The FCI fields have\
    \ the following definitions:\n   Target SSRC (32 bits):  For a PAUSE-RESUME message,\
    \ this value is the\n      SSRC that the request is intended for.  For PAUSED,\
    \ it MUST be the\n      SSRC being paused.  If pausing is the result of a PAUSE\
    \ request,\n      the value in PAUSED is effectively the same as Target SSRC in\
    \ a\n      related PAUSE request.  For REFUSED, it MUST be the Target SSRC of\n\
    \      the PAUSE or RESUME request that cannot change state.  A CSRC MUST\n  \
    \    NOT be used as a target as the interpretation of such a request is\n    \
    \  unclear.\n   Type (4 bits):  The pause feedback type.  The values defined in\
    \ this\n      specification are as follows:\n      0: PAUSE request message.\n\
    \      1: RESUME request message.\n      2: PAUSED indication message.\n     \
    \ 3: REFUSED notification message.\n      4-15:  Reserved for future use.  FCI\
    \ fields with these Type values\n         SHALL be ignored on reception by receivers\
    \ and MUST NOT be used\n         by senders implementing this specification.\n\
    \   Res: (4 bits):  Type Specific reserved.  It SHALL be ignored by\n      receivers\
    \ implementing this specification and MUST be set to 0 by\n      senders implementing\
    \ this specification.\n   Parameter Len (8 bits):  Length of the Type Specific\
    \ field in 32-bit\n      words.  MAY be 0.\n   PauseID (16 bits):  Message sequence\
    \ identification, as described in\n      Section 5.2.  SHALL be incremented by\
    \ one modulo 2^16 for each new\n      PAUSE message, unless the message is retransmitted.\
    \  The initial\n      value SHOULD be 0.  The PauseID is scoped by the Target\
    \ SSRC,\n      meaning that PAUSE, RESUME, and PAUSED messages therefore share\n\
    \      the same PauseID space for a specific Target SSRC.\n   Type Specific (variable):\
    \  Defined per pause feedback type.  MAY be\n      empty.  A receiver implementing\
    \ this specification MUST be able to\n      skip and ignore any unknown Type Specific\
    \ data, even for Type\n      values defined in this specification.\n"
- title: 8.  Message Details
  contents:
  - "8.  Message Details\n   This section contains detailed explanations of each message\
    \ defined\n   in this specification.  All transmissions of requests and indications\n\
    \   are governed by the transmission rules as defined by Section 8.5.\n   Any\
    \ references to PAUSE, PAUSED, RESUME, and REFUSED in this section\n   SHALL be\
    \ taken to apply to the extent possible and also when TMMBR/\n   TMMBN are used\
    \ (Section 5.6) for this functionality.  TMMBR/TMMBN MAY\n   be used instead of\
    \ the messages defined in this specification when\n   the effective topology is\
    \ point to point.  This use is expected to be\n   mainly for interworking with\
    \ implementations that don't support the\n   messages defined in this specification\
    \ but make use of TMMBR/TMMBN to\n   achieve a similar effect.  If either sender\
    \ or receiver learns that\n   the topology is not point to point, TMMBR/TMMBN\
    \ MUST NOT be used for\n   pause/resume functionality.  If the messages defined\
    \ in this\n   specification are supported in addition to TMMBR/TMMBN by all\n\
    \   involved parties, pause/resume signaling MUST use messages from this\n   specification.\
    \  If the topology is not point to point and the\n   messages defined in this\
    \ specification are not supported, pause/\n   resume functionality with TMMBR/TMMBN\
    \ MUST NOT be used.\n   For the scope of this specification, a past PauseID (Section\
    \ 5.2) is\n   defined as having a value between and including (PauseID - 2^15)\
    \ MOD\n   2^16 and (PauseID - 1) MOD 2^16, where \"MOD\" is the modulo operator.\n\
    \   Similarly, a future PauseID is defined as having a value between and\n   including\
    \ (PauseID + 1) MOD 2^16 and (PauseID + 2^14) MOD 2^16.  It\n   is intentional\
    \ that future PauseID is not defined as the entire range\n   outside that of past\
    \ PauseID.  The remaining range of PauseID is\n   simply \"not current\".\n"
- title: 8.1.  PAUSE
  contents:
  - "8.1.  PAUSE\n   An RTP stream receiver MAY schedule PAUSE for transmission at\
    \ any\n   time.\n   PAUSE has no defined Type Specific parameters.\n   PauseID\
    \ SHOULD be the current PauseID, as indicated by PAUSED\n   (Section 8.2), REFUSED\
    \ (Section 8.4), or implicitly determined by\n   previously received PAUSE or\
    \ RESUME (Section 8.3) requests.  A\n   randomly chosen PauseID MAY be used if\
    \ it was not possible to\n   retrieve current PauseID information, in which case\
    \ the PAUSE will\n   either succeed or the current PauseID can be found in the\
    \ returned\n   REFUSED (Section 8.4).\n   It can be noted that as a result of\
    \ what is described in Section 6.1,\n   PauseID is incremented by one, in modulo\
    \ arithmetic, for each PAUSE\n   request that is not a retransmission, compared\
    \ to what was used in\n   the last PAUSED indication sent by the media sender.\
    \  PauseID in the\n   message is supposed to match current PauseID at the RTP\
    \ stream\n   sender.\n   If an RTP stream receiver that sent a PAUSE with a certain\
    \ PauseID\n   for a Target SSRC receives a RESUME or a REFUSED with the same\n\
    \   PauseID for the same Target SSRC, it is RECOMMENDED that it refrains\n   from\
    \ scheduling further PAUSE requests for some appropriate time.\n   This is because\
    \ the RESUME indicates that there are other receivers\n   that still wish to receive\
    \ the stream, and the REFUSED indicates that\n   the RTP stream sender is currently\
    \ not able to pause the stream.\n   What is an appropriate time can vary from\
    \ application to application\n   and will also depend on the importance of achieving\
    \ the bandwidth\n   saving, but 2-5 regular RTCP intervals is expected to be appropriate.\n\
    \   If the targeted RTP stream does not pause, if no PAUSED indication\n   with\
    \ a future PauseID compared to the one used in PAUSE is received,\n   and if no\
    \ REFUSED with the current or a future PauseID is received\n   within 2 * RTT\
    \ + T_dither_max, the PAUSE MAY be scheduled for\n   retransmission, using the\
    \ same current PauseID.  RTT is the observed\n   round trip to the RTP stream\
    \ sender, and T_dither_max is defined in\n   Section 3.4 of [RFC4585].  An RTP\
    \ stream receiver in a bi-directional\n   RTP communication will generally have\
    \ an RTT estimate to the RTP\n   stream sender, e.g., from RTCP SR/RR as described\
    \ in Section 6.4 of\n   [RFC3550].  However, RTP stream receivers that don't send\
    \ any RTP\n   streams will lack an RTT estimate unless they use additional\n \
    \  mechanisms, such as the \"Receiver Reference Time Report Block\" part\n   of\
    \ RTCP XR [RFC3611].  RTP stream receivers that lack an RTT estimate\n   to the\
    \ sender SHOULD use 500 ms as the default value.\n   When an RTP stream sender\
    \ in playing state (Section 6.1) receives a\n   PAUSE with the current PauseID,\
    \ and unless local considerations\n   currently make it impossible to pause the\
    \ stream, it SHALL enter\n   pausing state (Section 6.2) and act accordingly.\n\
    \   If an RTP stream sender receives a PAUSE with the current PauseID\n   while\
    \ in pausing, paused (Section 6.3), or local paused (Section 6.4)\n   states,\
    \ the received PAUSE SHALL be ignored.\n"
- title: 8.2.  PAUSED
  contents:
  - "8.2.  PAUSED\n   The PAUSED indication, if supported, MUST be sent whenever entering\n\
    \   paused state (Section 6.3) or local paused state (Section 6.4).\n   PauseID\
    \ in the PAUSED message MUST contain the current PauseID that\n   can be included\
    \ in a subsequent RESUME (Section 8.3).  For local\n   paused state, this means\
    \ that PauseID in the message is the current\n   PauseID, just as if the RTP stream\
    \ sender had sent a PAUSE to itself.\n   PAUSED SHALL contain a fixed-length 32-bit\
    \ parameter at the start of\n   the Type Specific field with the extended RTP\
    \ sequence number of the\n   last RTP packet sent before the RTP stream was paused,\
    \ in the same\n   format as the extended highest sequence number received\n  \
    \ (Section 6.4.1 of [RFC3550]).\n   After having entered paused or local paused\
    \ state and thus having\n   sent PAUSED once, PAUSED MUST also be included in\
    \ (at least) the next\n   two regular RTCP reports, given that the pause condition\
    \ is then\n   still effective.\n   PAUSED indications MAY be retransmitted, subject\
    \ to transmission\n   rules (Section 8.5), to increase the probability that the\
    \ message\n   reaches the receiver in a timely fashion.  This can be especially\n\
    \   important when entering local paused state.  The number of\n   repetitions\
    \ to use could be tuned to observed loss rate and desired\n   loss probability,\
    \ for example, based on RTCP reports received from\n   the intended message target.\n\
    \   While remaining in paused or local paused states, PAUSED MAY be\n   included\
    \ in all compound RTCP reports, as long as the negotiated RTCP\n   bandwidth is\
    \ not exceeded.\n   When in paused or local paused states, whenever the RTP stream\
    \ sender\n   learns that there are endpoints that did not previously receive the\n\
    \   stream, for example, by RTCP reports with an SSRC and a CNAME that\n   were\
    \ not previously seen in the RTP session, it is RECOMMENDED to\n   send PAUSED\
    \ at the earliest opportunity and also to include it in (at\n   least) the next\
    \ two regular RTCP reports, given that the pause\n   condition is then still effective.\n"
- title: 8.3.  RESUME
  contents:
  - "8.3.  RESUME\n   An RTP stream receiver MAY schedule RESUME for transmission\
    \ whenever\n   it wishes to resume a paused stream or disapprove a stream from\
    \ being\n   paused.\n   PauseID SHOULD be the current PauseID, as indicated by\
    \ PAUSED\n   (Section 8.2) or implicitly determined by previously received PAUSE\n\
    \   (Section 8.1) or RESUME requests.  A randomly chosen PauseID MAY be\n   used\
    \ if it was not possible to retrieve current PauseID information,\n   in which\
    \ case the RESUME will either succeed or the current PauseID\n   can be found\
    \ in a returned REFUSED (Section 8.4).\n   If an RTP stream receiver that sent\
    \ a RESUME with a certain PauseID\n   receives a REFUSED with the same PauseID,\
    \ it is RECOMMENDED that it\n   refrains from scheduling further RESUME requests\
    \ for some appropriate\n   time since the REFUSE indicates that it is currently\
    \ not possible to\n   resume the stream.  What is an appropriate time can vary\
    \ from\n   application to application and will also depend on the importance of\n\
    \   resuming the stream, but 1-2 regular RTCP intervals is expected to be\n  \
    \ appropriate.\n   RESUME requests MAY be retransmitted, subject to transmission\
    \ rules\n   (Section 8.5), to increase the probability that the message reaches\n\
    \   the receiver in a timely fashion.  The number of repetitions to use\n   could\
    \ be tuned to observed loss rate and desired loss probability,\n   for example,\
    \ based on RTCP reports received from the intended message\n   target.  Such retransmission\
    \ SHOULD stop as soon as RTP packets from\n   the targeted stream are received\
    \ or when a REFUSED with the current\n   PauseID for the targeted RTP stream is\
    \ received.\n   RESUME has no defined Type Specific parameters.\n   When an RTP\
    \ stream sender in pausing (Section 6.2), paused\n   (Section 6.3), or local paused\
    \ state (Section 6.4) receives a RESUME\n   with the current PauseID, and unless\
    \ local considerations currently\n   make it impossible to resume the stream,\
    \ it SHALL enter playing state\n   (Section 6.1) and act accordingly.  If the\
    \ RTP stream sender is\n   incapable of honoring a RESUME request with the current\
    \ PauseID, or\n   if it receives a RESUME request with a PauseID that is not the\n\
    \   current PauseID while in paused or pausing state, the RTP stream\n   sender\
    \ SHALL schedule a REFUSED message for transmission as specified\n   below.\n\
    \   If an RTP stream sender in playing state receives a RESUME containing\n  \
    \ either the current PauseID or a past PauseID, the received RESUME\n   SHALL\
    \ be ignored.\n"
- title: 8.4.  REFUSED
  contents:
  - "8.4.  REFUSED\n   If an RTP stream sender receives a PAUSE (Section 8.1) or RESUME\n\
    \   (Section 8.3) request containing the current PauseID, where the\n   requested\
    \ action cannot be fulfilled by the RTP stream sender due to\n   some local consideration,\
    \ it SHALL schedule transmission of a REFUSED\n   notification containing the\
    \ current PauseID from the rejected\n   request.\n   REFUSED has no defined Type\
    \ Specific parameters.\n   If an RTP stream sender receives a PAUSE or RESUME\
    \ request with a\n   PauseID that is not the current PauseID, it SHALL schedule\
    \ a REFUSED\n   notification containing the current PauseID, except if the RTP\
    \ stream\n   sender is in playing state and receives a RESUME with a past PauseID,\n\
    \   in which case the RESUME SHALL be ignored.\n   If several PAUSE or RESUME\
    \ requests that would render identical\n   REFUSED notifications are received\
    \ before the scheduled REFUSED is\n   sent, duplicate REFUSED notifications MUST\
    \ NOT be scheduled for\n   transmission.  This effectively lets a single REFUSED\
    \ respond to\n   several ineffective PAUSE or RESUME requests.\n   An RTP stream\
    \ receiver that sent a PAUSE or RESUME request and\n   receives a REFUSED containing\
    \ the same PauseID as in the request\n   SHOULD refrain from sending an identical\
    \ request for some appropriate\n   time to allow the condition that caused REFUSED\
    \ to clear.  For PAUSE,\n   an appropriate time is suggested in Section 8.1. \
    \ For RESUME, an\n   appropriate time is suggested in Section 8.3.\n   An RTP\
    \ stream receiver that sent a PAUSE or RESUME request and\n   receives a REFUSED\
    \ containing a PauseID different from the request\n   MAY schedule another request\
    \ using the PauseID from the REFUSED\n   notification.\n"
- title: 8.5.  Transmission Rules
  contents:
  - "8.5.  Transmission Rules\n   The transmission of any RTCP feedback messages defined\
    \ in this\n   specification MUST follow the normal AVPF-defined timing rules and\n\
    \   depend on the session's mode of operation.\n   All messages defined in this\
    \ specification, as well as TMMBR/TMMBN\n   used for pause/resume purposes (Section\
    \ 5.6), can use either Regular,\n   Early, or Immediate timings but should make\
    \ a trade-off between\n   timely transmission (Section 4.1) and RTCP bandwidth\
    \ consumption.\n   This can be achieved by taking the following into consideration:\n\
    \   o  It is recommended that PAUSE use Early or Immediate timing, except\n  \
    \    for retransmissions where RTCP bandwidth can motivate the use of\n      Regular\
    \ timing.\n   o  The first transmission of PAUSED for each (non-wrapped) PauseID\
    \ is\n      recommended to be sent with Immediate or Early timing to stop\n  \
    \    unnecessary repetitions of PAUSE.  It is recommended that\n      subsequent\
    \ transmissions of PAUSED for that PauseID use Regular\n      timing to avoid\
    \ excessive PAUSED RTCP bandwidth caused by multiple\n      PAUSE requests.\n\
    \   o  It is recommended that unsolicited PAUSED (sent when entering\n      local\
    \ paused state (Section 6.4)) always use Immediate or Early\n      timing, until\
    \ PAUSED for that PauseID is considered delivered at\n      least once to all\
    \ receivers of the paused RTP stream, to avoid RTP\n      stream receivers that\
    \ take unnecessary corrective action when the\n      RTP stream is no longer received,\
    \ after which it is recommended\n      that PAUSE uses Regular timing (as for\
    \ PAUSED triggered by PAUSE\n      above).\n   o  RESUME is often time critical,\
    \ and it is recommended that it\n      always uses Immediate or Early timing.\n\
    \   o  The first transmission of REFUSED for each (non-wrapped) PauseID\n    \
    \  is recommended to be sent with Immediate or Early timing to stop\n      unnecessary\
    \ repetitions of PAUSE or RESUME.  It is recommended\n      that subsequent REFUSED\
    \ notifications for that PauseID use Regular\n      timing to avoid excessive\
    \ REFUSED RTCP bandwidth caused by\n      multiple unreasonable requests.\n"
- title: 9.  Signaling
  contents:
  - "9.  Signaling\n   The capability of handling messages defined in this specification\
    \ MAY\n   be exchanged at a higher layer such as SDP.  This document extends\n\
    \   the \"rtcp-fb\" attribute defined in Section 4 of AVPF [RFC4585] to\n   include\
    \ the request for pause and resume.  This specification follows\n   all the rules\
    \ defined in AVPF [RFC4585] and CCM [RFC5104] for an\n   \"rtcp-fb\" attribute\
    \ relating to the payload type in a session\n   description.\n   This specification\
    \ defines a new parameter \"pause\" to the \"ccm\"\n   feedback value defined\
    \ in CCM [RFC5104], representing the capability\n   to understand the RTCP feedback\
    \ message and all of the defined FCIs\n   of PAUSE, RESUME, PAUSED, and REFUSED.\n\
    \      Note: When TMMBR 0 / TMMBN 0 are used to implement pause and\n      resume\
    \ functionality (with the restrictions described in this\n      specification),\
    \ signaling the \"rtcp-fb\" attribute with the \"ccm\"\n      and \"tmmbr\" parameters\
    \ is sufficient and no further signaling is\n      necessary.  There is, however,\
    \ no guarantee that TMMBR/TMMBN\n      implementations predating this specification\
    \ work exactly as\n      described here when used with a bitrate value of 0.\n\
    \   The \"pause\" parameter has two optional attributes, which are \"nowait\"\n\
    \   and \"config\":\n   o  \"nowait\" indicates that the hold-off period defined\
    \ in Section 6.2\n      can be set to 0, reducing the latency before the stream\
    \ can be\n      paused after receiving a PAUSE request.  This condition occurs\n\
    \      when there will only be a single receiver per direction in the RTP\n  \
    \    session, for example, in point-to-point sessions.  It is also\n      possible\
    \ to use in scenarios using unidirectional media.  The\n      conditions that\
    \ allow \"nowait\" to be set (Section 6.2) also\n      indicate that it would\
    \ be possible to use CCM TMMBR/TMMBN as\n      pause/resume signaling.\n   o \
    \ \"config\" allows for partial implementation of this specification\n      according\
    \ to the different roles in the use-cases section\n      (Section 3) and takes\
    \ a value that describes what subset is\n      implemented:\n      1  Full implementation\
    \ of this specification.  This is the default\n         configuration.  A missing\
    \ \"config\" pause attribute MUST be\n         treated equivalent to providing\
    \ a \"config\" value of 1.\n      2  The implementation intends to send PAUSE\
    \ and RESUME requests\n         for received RTP streams and is thus also capable\
    \ of receiving\n         PAUSED and REFUSED.  It does not support receiving PAUSE\
    \ and\n         RESUME requests, but it may pause sent RTP streams due to local\n\
    \         considerations and then intend to send PAUSED for them.\n      3  The\
    \ implementation supports receiving PAUSE and RESUME requests\n         targeted\
    \ for RTP streams it sends.  It will send PAUSED and\n         REFUSED as needed.\
    \  The node will not send any PAUSE and RESUME\n         requests but supports\
    \ and desires receiving PAUSED if received\n         RTP streams are paused.\n\
    \      4  The implementation intends to send PAUSE and RESUME requests\n     \
    \    for received RTP streams and is thus also capable of receiving\n        \
    \ PAUSED and REFUSED.  It cannot pause any RTP streams it sends,\n         and\
    \ thus does not support receiving PAUSE and RESUME requests,\n         and it\
    \ also does not support sending PAUSED indications.\n      5  The implementation\
    \ supports receiving PAUSE and RESUME requests\n         targeted for RTP streams\
    \ it sends.  It will send PAUSED and\n         REFUSED as needed.  It does not\
    \ support sending PAUSE and\n         RESUME requests to pause received RTP streams,\
    \ and it also does\n         not support receiving PAUSED indications.\n     \
    \ 6  The implementation supports sent and received RTP streams being\n       \
    \  paused due to local considerations and thus supports sending\n         and\
    \ receiving PAUSED indications.\n      7  The implementation supports and desires\
    \ to receive PAUSED\n         indications for received RTP streams but does not\
    \ pause or send\n         PAUSED indications for sent RTP streams.  It does not\
    \ support\n         any other messages defined in this specification.\n      8\
    \  The implementation supports pausing sent RTP streams and\n         sending\
    \ PAUSED indications for them but does not support\n         receiving PAUSED\
    \ indications for received RTP streams.  It does\n         not support any other\
    \ messages defined in this specification.\n   All implementers of this specification\
    \ are encouraged to include full\n   support for all messages (\"config=1\"),\
    \ but it is recognized that this\n   is sometimes not meaningful for implementations\
    \ operating in an\n   environment where only parts of the functionality provided\
    \ by this\n   specification are needed.  The above defined \"config\" functionality\n\
    \   subsets provide a trade-off between completeness and the need for\n   implementation\
    \ interoperability, achieving at least a level of\n   functionality corresponding\
    \ to what is desired by the least-capable\n   party when used as specified here.\
    \  Implementing any functionality\n   subsets other than those defined above is\
    \ NOT RECOMMENDED.\n   When signaling a \"config\" value other than 1, an implementation\
    \ MUST\n   ignore non-supported messages on reception and SHOULD omit sending\n\
    \   messages not supported by the remote peer.  One example where it can\n   be\
    \ motivated to send messages that some receivers do not support is\n   when there\
    \ are multiple message receivers with different message\n   support (different\
    \ \"config\" values).  That approach avoids letting\n   the least-capable receiver\
    \ limit the functionality provided to\n   others.  The below table summarizes\
    \ per-message send and receive\n   support for the different \"config\" pause\
    \ attribute values (\"X\"\n   indicating support and \"-\" indicating non-support):\n\
    \     +---+-----------------------------+-----------------------------+\n    \
    \ | # | Send                        | Receive                     |\n     |  \
    \ | PAUSE RESUME PAUSED REFUSED | PAUSE RESUME PAUSED REFUSED |\n     +---+-----------------------------+-----------------------------+\n\
    \     | 1 |   X      X      X      X    |   X      X      X      X    |\n    \
    \ | 2 |   X      X      X      -    |   -      -      X      X    |\n     | 3\
    \ |   -      -      X      X    |   X      X      X      -    |\n     | 4 |  \
    \ X      X      -      -    |   -      -      X      X    |\n     | 5 |   -  \
    \    -      X      X    |   X      X      -      -    |\n     | 6 |   -      -\
    \      X      -    |   -      -      X      -    |\n     | 7 |   -      -    \
    \  -      -    |   -      -      X      -    |\n     | 8 |   -      -      X \
    \     -    |   -      -      -      -    |\n     +---+-----------------------------+-----------------------------+\n\
    \        Figure 7: Supported Messages for Different \"config\" Values\n   In the\
    \ above description of partial implementations, \"config\" values\n   2 and 4\
    \ correspond to the RTP Mixer in the 'RTP Mixer to Media\n   Sender' use case\
    \ (Section 3.2), and \"config\" values 3 and 5\n   correspond to the media sender\
    \ in that same use case.  For that use\n   case, it should be clear that an RTP\
    \ Mixer implementing only \"config\"\n   values 3 or 5 will not provide a working\
    \ solution.  Similarly, for\n   that use case, a media sender implementing only\
    \ \"config\" values 2 or\n   4 will not provide a working solution.  Both the\
    \ RTP Mixer and the\n   media sender will of course work when implementing the\
    \ full set of\n   messages, corresponding to \"config=1\".\n   A partial implementation\
    \ is not suitable for pause/resume support\n   between cascaded RTP Mixers, but\
    \ it would require support\n   corresponding to \"config=1\" between such RTP\
    \ Mixers.  This is because\n   an RTP Mixer is then also a media sender towards\
    \ the other RTP Mixer,\n   requiring support for the union of \"config\" values\
    \ 2 and 3 or\n   \"config\" values 4 and 5, which effectively becomes \"config=1\"\
    .\n   As can be seen from Figure 7 above, \"config\" values 2 and 3 differ\n \
    \  from \"config\" values 4 and 5 only in that in the latter, the PAUSE/\n   RESUME\
    \ message sender (e.g., the RTP Mixer side) does not support\n   local pause (Section\
    \ 6.4) for any of its own streams and therefore\n   also does not support sending\
    \ PAUSED.\n   Partial implementations that only support local pause functionality\n\
    \   can declare this capability through \"config\" values 6-8.\n   Viable fallback\
    \ rules between different \"config\" values are described\n   in Section 9.1 and\
    \ Figure 9.\n   This is the resulting ABNF [RFC5234], extending the existing ABNF\
    \ in\n   Section 7.1 of CCM [RFC5104]:\n   rtcp-fb-ccm-param  =/ SP \"pause\"\
    \ *(SP pause-attr)\n   pause-attr         = pause-config ; partial message support\n\
    \                      / \"nowait\"     ; no hold-off period\n               \
    \       / byte-string  ; for future extensions\n   pause-config       = \"config=\"\
    \ pause-config-value\n   pause-config-value = 1*2DIGIT\n   ; byte-string as defined\
    \ in RFC 4566\n                              Figure 8: ABNF\n   An endpoint implementing\
    \ this specification and using SDP to signal\n   capability SHOULD indicate the\
    \ new \"pause\" parameter with \"ccm\"\n   signaling but MAY instead use existing\
    \ \"ccm tmmbr\" signaling\n   [RFC5104] if the limitations in functionality when\
    \ using TMMBR/TMMBN\n   as described in this specification (Section 5.6) are considered\n\
    \   acceptable.  In that case, no partial message support is possible.\n   The\
    \ messages from this specification (Section 8) SHOULD NOT be used\n   towards\
    \ receivers that did not declare capability to receive those\n   messages.\n \
    \  The pause functionality can normally be expected to work\n   independently\
    \ of the payload type.  However, there might exist\n   situations where an endpoint\
    \ needs to restrict or at least configure\n   the capabilities differently depending\
    \ on the payload type carrying\n   the media stream.  Reasons for this might relate\
    \ to capabilities to\n   correctly handle media boundaries and avoid any pause\
    \ or resume\n   operation to occur where it would leave a receiver or decoder\
    \ with no\n   choice than to attempt to repair or discard the media received just\n\
    \   prior to or at the point of resuming.\n   There MUST NOT be more than one\
    \ \"a=rtcp-fb\" line with \"pause\"\n   applicable to a single payload type in\
    \ the SDP, unless the additional\n   line uses \"*\" as the payload type, in which\
    \ case \"*\" SHALL be\n   interpreted as applicable to all listed payload types\
    \ that do not\n   have an explicit \"pause\" specification.  The \"config\" pause\
    \ attribute\n   MUST NOT appear more than once for each \"pause\" CCM parameter.\
    \  The\n   \"nowait\" pause attribute MUST NOT appear more than once for each\n\
    \   \"pause\" CCM parameter.\n"
- title: 9.1.  Offer/Answer Use
  contents:
  - "9.1.  Offer/Answer Use\n   An offerer implementing this specification needs to\
    \ include the\n   \"pause\" CCM parameter with a suitable configuration attribute\n\
    \   (\"config\") in the SDP, according to what messages it intends to send\n \
    \  and desires to receive in the session.\n   In SDP offer/answer, the \"config\"\
    \ pause attribute and its message\n   directions are interpreted based on the\
    \ agent providing the SDP.  The\n   offerer is described in an offer, and the\
    \ answerer is described in an\n   answer.\n   An answerer receiving an offer with\
    \ a \"pause\" CCM line and a \"config\"\n   pause attribute with a certain value,\
    \ describing a certain capability\n   to send and receive messages, MAY change\
    \ the \"config\" pause attribute\n   value in the answer to another configuration.\
    \  The permitted answers\n   are listed in the below table.\n      SDP Offer \"\
    config\" value | Permitted SDP Answer \"config\" values\n      -------------------------+-------------------------------------\n\
    \                   1           | 1, 2, 3, 4, 5, 6, 7, 8\n                   2\
    \           | 3, 4, 5, 6, 7, 8\n                   3           | 2, 4, 5, 6, 7,\
    \ 8\n                   4           | 5, 6, 7, 8\n                   5       \
    \    | 4, 6, 7, 8\n                   6           | 6, 7, 8\n                \
    \   7           | 8\n                   8           | 7\n                 Figure\
    \ 9: \"config\" Values in Offer/Answer\n   An offer or answer omitting the \"\
    config\" pause attribute MUST be\n   interpreted as equivalent to \"config=1\"\
    .  Implementations of this\n   specification MUST NOT use any \"config\" values\
    \ other than those\n   defined above in an offer or answer and MUST remove the\
    \ \"pause\" CCM\n   line in the answer when receiving an offer with a \"config\"\
    \ value it\n   does not understand.  In all cases, the answerer MAY also completely\n\
    \   remove any \"pause\" CCM line to indicate that it does not understand\n  \
    \ or desire to use any pause functionality for the affected payload\n   types.\n\
    \   If the offerer believes that itself and the intended answerer are\n   likely\
    \ the only endpoints in the RTP session, it MAY include the\n   \"nowait\" pause\
    \ attribute on the \"pause\" line in the offer.  If an\n   answerer receives the\
    \ \"nowait\" pause attribute on the \"pause\" line in\n   the SDP, and if it has\
    \ information that the offerer and itself are\n   not the only endpoints in the\
    \ RTP session, it MUST NOT include any\n   \"nowait\" pause attribute on its \"\
    pause\" line in the SDP answer.  The\n   answerer MUST NOT add \"nowait\" on the\
    \ \"pause\" line in the answer\n   unless it is present on the \"pause\" line\
    \ in the offer.  If both offer\n   and answer contain a \"nowait\" pause attribute,\
    \ then the hold-off\n   period is configured to 0 at both the offerer and answerer.\n\
    \   Unknown pause attributes MUST be ignored in the offer and MUST then\n   be\
    \ omitted from the answer.\n   If both \"pause\" and \"tmmbr\" are present in\
    \ the offer, both MAY be\n   included also in the answer, in which case TMMBR/TMMBN\
    \ MUST NOT be\n   used for pause/resume purposes (with a bitrate value of 0),\
    \ to avoid\n   signaling ambiguity.\n"
- title: 9.2.  Declarative Use
  contents:
  - "9.2.  Declarative Use\n   In declarative use, the SDP is used to configure the\
    \ node receiving\n   the SDP.  This has implications on the interpretation of\
    \ the SDP\n   signaling extensions defined in this specification.\n   First, the\
    \ \"config\" pause attribute and its message directions are\n   interpreted based\
    \ on the node receiving the SDP, and it describes the\n   RECOMMENDED level of\
    \ operation.  If the joining client does not\n   support the indicated \"config\"\
    \ value, some RTP session stream\n   optimizations may not be possible in that\
    \ some RTP streams will not\n   be paused by the joining client, and/or the joining\
    \ client may not be\n   able to resume and receive wanted streams because they\
    \ are paused.\n   Second, the \"nowait\" pause attribute, if included, is followed\
    \ as\n   specified.  It is the responsibility of the declarative SDP sender to\n\
    \   determine if a configured node will participate in a session that\n   will\
    \ be point to point, based on the usage.  For example, a\n   conference client\
    \ being configured for an any source multicast\n   session using the Session Announcement\
    \ Protocol (SAP) [RFC2974] will\n   not be in a point-to-point session, thus \"\
    nowait\" cannot be included.\n   A Real-Time Streaming Protocol (RTSP) [RFC2326]\
    \ client receiving a\n   declarative SDP may very well be in a point-to-point\
    \ session,\n   although it is highly doubtful that an RTSP client would need to\n\
    \   support this specification, considering the inherent PAUSE support in\n  \
    \ RTSP.\n   Unknown pause attributes MUST be ignored.\n   If both \"pause\" and\
    \ \"tmmbr\" are present in the SDP, TMMBR/TMMBN MUST\n   NOT be used for pause/resume\
    \ purposes (with a bitrate value of 0) to\n   avoid signaling ambiguity.\n"
- title: 10.  Examples
  contents:
  - "10.  Examples\n   The following examples show use of PAUSE and RESUME messages,\n\
    \   including use of offer/answer:\n   1.  Offer/Answer\n   2.  Point-to-Point\
    \ Session\n   3.  Point to Multipoint using Mixer\n   4.  Point to Multipoint\
    \ using Relay\n"
- title: 10.1.  Offer/Answer
  contents:
  - "10.1.  Offer/Answer\n   The below figures contain an example of how to show support\
    \ for\n   pausing and resuming the streams, as well as indicating whether or\n\
    \   not the hold-off period can be set to 0.\n   v=0\n   o=alice 3203093520 3203093520\
    \ IN IP4 alice.example.com\n   s=Pausing Media\n   t=0 0\n   c=IN IP4 alice.example.com\n\
    \   m=audio 49170 RTP/AVPF 98 99\n   a=rtpmap:98 G719/48000\n   a=rtpmap:99 PCMA/8000\n\
    \   a=rtcp-fb:* ccm pause nowait\n           Figure 10: SDP Offer with Pause and\
    \ Resume Capability\n   The offerer supports all of the messages defined in this\n\
    \   specification, leaving out the optional \"config\" pause attribute.\n   The\
    \ offerer also believes that it will be the sole receiver of the\n   answerer's\
    \ stream as well as that the answerer will be the sole\n   receiver of the offerer's\
    \ stream and thus includes the \"nowait\" pause\n   attribute for the \"pause\"\
    \ parameter.\n   This is the SDP answer:\n   v=0\n   o=bob 293847192 293847192\
    \ IN IP4 bob.example.com\n   s=-\n   t=0 0\n   c=IN IP4 bob.example.com\n   m=audio\
    \ 49202 RTP/AVPF 98\n   a=rtpmap:98 G719/48000\n   a=rtcp-fb:98 ccm pause config=2\n\
    \          Figure 11: SDP Answer with Pause and Resume Capability\n   The answerer\
    \ will not allow its sent streams to be paused or resumed\n   and thus restricts\
    \ the answer to indicate \"config=2\".  It also\n   supports pausing its own RTP\
    \ streams due to local considerations,\n   which is why \"config=2\" is chosen\
    \ rather than \"config=4\".  The\n   answerer somehow knows that it will not be\
    \ a point-to-point RTP\n   session and has therefore removed \"nowait\" from the\
    \ \"pause\" line,\n   meaning that the offerer must use a non-zero hold-off period\
    \ when\n   being requested to pause the stream.\n   When using TMMBR 0 / TMMBN\
    \ 0 to achieve pause and resume\n   functionality, there are no differences in\
    \ SDP compared to CCM\n   [RFC5104]; therefore, no such examples are included\
    \ here.\n"
- title: 10.2.  Point-to-Point Session
  contents:
  - "10.2.  Point-to-Point Session\n   This is the most basic scenario, which involves\
    \ two participants,\n   each acting as a sender and/or receiver.  Any RTP data\
    \ receiver sends\n   PAUSE or RESUME messages to the sender, which pauses or resumes\n\
    \   transmission accordingly.  The hold-off period before pausing a\n   stream\
    \ is 0.\n           +---------------+                   +---------------+\n  \
    \         |  RTP Sender   |                   | RTP Receiver  |\n           +---------------+\
    \                   +---------------+\n                  :           t1: RTP data\
    \           :\n                  | -------------------------------> |\n      \
    \            |           t2: PAUSE(3)           |\n                  | <-------------------------------\
    \ |\n                  |       < RTP data paused >        |\n                \
    \  |           t3: PAUSED(3)          |\n                  | ------------------------------->\
    \ |\n                  :       < Some time passes >       :\n                \
    \  |           t4: RESUME(3)          |\n                  | <-------------------------------\
    \ |\n                  |           t5: RTP data           |\n                \
    \  | -------------------------------> |\n                  :       < Some time\
    \ passes >       :\n                  |           t6: PAUSE(4)           |\n \
    \                 | <------------------------------- |\n                  |  \
    \     < RTP data paused >        |\n                  |           t7: PAUSED(4)\
    \          |\n                  | -------------------------------> |\n       \
    \           :                                  :\n          Figure 12: Pause and\
    \ Resume Operation in Point to Point\n   Figure 12 shows the basic pause and resume\
    \ operation in a\n   point-to-point scenario.  At time t1, an RTP sender sends\
    \ data to a\n   receiver.  At time t2, the RTP receiver requests the sender to\
    \ pause\n   the stream, using PauseID 3 (which it knew since before in this\n\
    \   example).  The sender pauses the data and replies with a PAUSED\n   containing\
    \ the same PauseID.  Some time later (at time t4), the\n   receiver requests the\
    \ sender to resume, which resumes its\n   transmission.  The next PAUSE, sent\
    \ at time t6, contains an updated\n   PauseID (4), with a corresponding PAUSED\
    \ being sent at time t7.\n           +---------------+                   +---------------+\n\
    \           |  RTP Sender   |                   | RTP Receiver  |\n          \
    \ +---------------+                   +---------------+\n                  : \
    \          t1: RTP data           :\n                  | ------------------------------->\
    \ |\n                  |           t2: TMMBR 0            |\n                \
    \  | <------------------------------- |\n                  |       < RTP data\
    \ paused >        |\n                  |           t3: TMMBN 0            |\n\
    \                  | -------------------------------> |\n                  : \
    \      < Some time passes >       :\n                  |           t4: TMMBR 150000\
    \       |\n                  | <------------------------------- |\n          \
    \        |           t5: RTP data           |\n                  | ------------------------------->\
    \ |\n                  :       < Some time passes >       :\n                \
    \  |           t6: TMMBR 0            |\n                  | <-------------------------------\
    \ |\n                  |       < RTP data paused >        |\n                \
    \  |           t7: TMMBN 0            |\n                  | ------------------------------->\
    \ |\n                  :                                  :\n            Figure\
    \ 13: TMMBR Pause and Resume in Point to Point\n   Figure 13 describes the same\
    \ point-to-point scenario as above, but\n   using TMMBR/TMMBN signaling.\n   \
    \        +---------------+                 +----------------+\n           | RTP\
    \ Sender A  |                 | RTP Receiver B |\n           +---------------+\
    \                 +----------------+\n                  :           t1: RTP data\
    \           :\n                  | -------------------------------> |\n      \
    \            |       < RTP data paused >        |\n                  |       \
    \    t2: TMMBN {A:0}        |\n                  | ------------------------------->\
    \ |\n                  :       < Some time passes >       :\n                \
    \  |           t3: TMMBR 0            |\n                  | <-------------------------------\
    \ |\n                  |           t4: TMMBN {A:0,B:0}    |\n                \
    \  | -------------------------------> |\n                  :       < Some time\
    \ passes >       :\n                  |           t5: TMMBN {B:0}        |\n \
    \                 | -------------------------------> |\n                  :  \
    \     < Some time passes >       :\n                  |           t6: TMMBR 80000\
    \        |\n                  | <------------------------------- |\n         \
    \         |           t7: RTP data           |\n                  | ------------------------------->\
    \ |\n                  :                                  :\n                \
    \ Figure 14: Unsolicited PAUSED Using TMMBN\n   Figure 14 describes the case when\
    \ an RTP stream sender (A) chooses to\n   pause an RTP stream due to local considerations.\
    \  Both A and the RTP\n   stream receiver (B) use TMMBR/TMMBN signaling for pause/resume\n\
    \   purposes.  A decides to pause the RTP stream at time t2 and uses\n   TMMBN\
    \ 0 to signal PAUSED, including itself in the TMMBN bounding set.\n   At time\
    \ t3, despite the fact that the RTP stream is still paused, B\n   decides that\
    \ it is no longer interested in receiving the RTP stream\n   and signals PAUSE\
    \ by sending a TMMBR 0.  As a result of that, the\n   bounding set now contains\
    \ both A and B, and A sends out a new TMMBN\n   reflecting that.  After a while,\
    \ at time t5, the local considerations\n   that caused A to pause the RTP stream\
    \ no longer apply, causing it to\n   remove itself from the bounding set and to\
    \ send a new TMMBN\n   indicating this.  At time t6, B decides that it is now\
    \ interested in\n   receiving the RTP stream again and signals RESUME by sending\
    \ a TMMBR\n   containing a bitrate value greater than 0, causing A to resume\n\
    \   sending RTP data.\n         +---------------+                       +---------------+\n\
    \         |  RTP Sender   |                       | RTP Receiver  |\n        \
    \ +---------------+                       +---------------+\n                :\
    \           t1: RTP data                :\n                | ------------------------------------>\
    \ |\n                |                   t2: PAUSE(7), lost  |\n             \
    \   |                   <---X-------------- |\n                |             \
    \                          |\n                |           t3: RTP data       \
    \         |\n                | ------------------------------------> |\n     \
    \           :                                       :\n                |   < Time-out,\
    \ still receiving data >  |\n                |           t4: PAUSE(7)        \
    \        |\n                | <------------------------------------ |\n      \
    \          |          < RTP data paused >          |\n                |      \
    \     t5: PAUSED(7)               |\n                | ------------------------------------>\
    \ |\n                :          < Some time passes >         :\n             \
    \   |                   t6: RESUME(7), lost |\n                |             \
    \      <---X-------------- |\n                |           t7: RESUME(7)      \
    \         |\n                | <------------------------------------ |\n     \
    \           |           t8: RTP data                |\n                | ------------------------------------>\
    \ |\n                |           t9: RESUME(7)               |\n             \
    \   | <------------------------------------ |\n                :             \
    \                          :\n         Figure 15: Pause and Resume Operation with\
    \ Messages Lost\n   Figure 15 describes what happens if a PAUSE message from an\
    \ RTP\n   stream receiver does not reach the RTP stream sender.  After sending\n\
    \   a PAUSE message, the RTP stream receiver waits for a time-out to\n   detect\
    \ if the RTP stream sender has paused the data transmission or\n   has sent a\
    \ PAUSED indication according to the rules discussed in\n   Section 6.3.  As the\
    \ PAUSE message is lost on the way (at time t2),\n   RTP data continues to reach\
    \ to the RTP stream receiver.  When the\n   timer expires, the RTP stream receiver\
    \ schedules a retransmission of\n   the PAUSE message, which is sent at time t4.\
    \  If the PAUSE message\n   now reaches the RTP stream sender, it pauses the RTP\
    \ stream and\n   replies with PAUSED.\n   At time t6, the RTP stream receiver\
    \ wishes to resume the stream again\n   and sends a RESUME, which is lost.  This\
    \ does not cause any severe\n   effect, since there is no requirement to wait\
    \ until further RESUME\n   requests are sent, and another RESUME is sent already\
    \ at time t7,\n   which now reaches the RTP stream sender that consequently resumes\
    \ the\n   stream at time t8.  The time interval between t6 and t7 can vary but\n\
    \   may, for example, be one RTCP feedback transmission interval as\n   determined\
    \ by the AVPF rules.\n   The RTP stream receiver did not realize that the RTP\
    \ stream was\n   resumed in time to stop yet another scheduled RESUME from being\
    \ sent\n   at time t9.  This is, however, harmless since RESUME contains a past\n\
    \   PauseID and will be ignored by the RTP stream sender.  It will also\n   not\
    \ cause the RTP stream to be resumed even if the stream was paused\n   again based\
    \ on a PAUSE from some other receiver before receiving the\n   RESUME, since the\
    \ current PauseID was updated compared to the one in\n   the stray RESUME, which\
    \ contains a past PauseID and will be ignored\n   by the RTP stream sender.\n\
    \            +---------------+                 +---------------+\n           \
    \ |  RTP Sender   |                 | RTP Receiver  |\n            +---------------+\
    \                 +---------------+\n                   :           t1: RTP data\
    \          :\n                   | ------------------------------> |\n       \
    \            |           t2: PAUSE(11)         |\n                   | <------------------------------\
    \ |\n                   |                                 |\n                \
    \   |    < Cannot pause RTP data >    |\n                   |           t3: REFUSED(11)\
    \       |\n                   | ------------------------------> |\n          \
    \         |                                 |\n                   |          \
    \ t4: RTP data          |\n                   | ------------------------------>\
    \ |\n                   :                                 :\n           Figure\
    \ 16: Pause Request is Refused in Point to Point\n   In Figure 16, the receiver\
    \ requests to pause the sender, which\n   refuses to pause due to some consideration\
    \ local to the sender and\n   responds with a REFUSED message.\n"
- title: 10.3.  Point to Multipoint Using Mixer
  contents:
  - "10.3.  Point to Multipoint Using Mixer\n   An RTP Mixer is an intermediate node\
    \ connecting different transport-\n   level clouds.  The Mixer receives streams\
    \ from different RTP sources,\n   selects or combines them based on the application's\
    \ needs, and\n   forwards the generated stream(s) to the destination.  The Mixer\n\
    \   typically puts its own SSRC(s) in RTP data packets instead of the\n   original\
    \ source(s).\n   The Mixer keeps track of all the streams delivered to the Mixer\
    \ and\n   how they are currently used.  In this example, Mixer (M) selects the\n\
    \   video stream to deliver to the RTP stream receiver (R) based on the\n   voice\
    \ activity of the RTP stream senders (S1 and S2).  The video\n   stream will be\
    \ delivered to R using M's SSRC and with a CSRC\n   indicating the original source.\n\
    \   Note that PauseID is not of any significance for the example and is\n   therefore\
    \ omitted in the description.\n     +-----+            +-----+            +-----+\
    \            +-----+\n     |  R  |            |  M  |            | S1  |     \
    \       | S2  |\n     +-----+            +-----+            +-----+          \
    \  +-----+\n        :                  :   t1:RTP(S1)     :                  :\n\
    \        |   t2:RTP(M:S1)   |<-----------------|                  |\n        |<-----------------|\
    \                  |                  |\n        |                  |   t3:RTP(S2)\
    \     |                  |\n        |                  |<------------------------------------|\n\
    \        |                  |   t4: PAUSE(S2)  |                  |\n        |\
    \                  |------------------------------------>|\n        |        \
    \          |                  |  t5: PAUSED(S2)  |\n        |                \
    \  |<------------------------------------|\n        |                  |     \
    \             | <S2:No RTP to M> |\n        |                  |   t6: RESUME(S2)\
    \ |                  |\n        |                  |------------------------------------>|\n\
    \        |                  |                  |  t7: RTP to M    |\n        |\
    \                  |<------------------------------------|\n        |   t8:RTP(M:S2)\
    \   |                  |                  |\n        |<-----------------|    \
    \              |                  |\n        |                  |   t9:PAUSE(S1)\
    \   |                  |\n        |                  |----------------->|    \
    \              |\n        |                  |   t10:PAUSED(S1) |            \
    \      |\n        |                  |<-----------------|                  |\n\
    \        |                  | <S1:No RTP to M> |                  |\n        :\
    \                  :                  :                  :\n     Figure 17: Pause\
    \ and Resume Operation for a Voice-Activated Mixer\n   The session starts at t1\
    \ with S1 being the most active speaker and\n   thus being selected as the single\
    \ video stream to be delivered to R\n   (t2) using M's SSRC but with S1 as the\
    \ CSRC (indicated after the\n   colon in the figure).  Then S2 joins the session\
    \ at t3 and starts\n   delivering an RTP stream to M.  As S2 has less voice activity\
    \ then\n   S1, M decides to pause S2 at t4 by sending S2 a PAUSE request.  At\n\
    \   t5, S2 acknowledges with PAUSED and at the same instant stops\n   delivering\
    \ RTP to M.  At t6, the user at S2 starts speaking and\n   becomes the most active\
    \ speaker and M decides to switch the video\n   stream to S2 and therefore quickly\
    \ sends a RESUME request to S2.  At\n   t7, S2 has received the RESUME request\
    \ and acts on it by resuming RTP\n   stream delivery to M.  When the RTP stream\
    \ from t7 arrives at M, it\n   switches this RTP stream into its SSRC (M) at t8\
    \ and changes the CSRC\n   to S2.  As S1 now becomes unused, M issues a PAUSE\
    \ request to S1 at\n   t9, which is acknowledged at t10 with PAUSED, and the RTP\
    \ stream from\n   S1 stops being delivered.\n"
- title: 10.4.  Point to Multipoint Using Translator
  contents:
  - "10.4.  Point to Multipoint Using Translator\n   A transport Relay in an RTP session\
    \ forwards the message from one\n   peer to all the others.  Unlike Mixer, the\
    \ Relay does not mix the\n   streams or change the SSRC of the messages or RTP\
    \ media.  These\n   examples are to show that the messages defined in this specification\n\
    \   can be safely used also in a transport Relay case.  The parentheses\n   in\
    \ the figures contains (Target SSRC, PauseID) information for the\n   messages\
    \ defined in this specification.\n          +-------------+     +-------------+\
    \     +-------------+\n          |  Sender(S)  |     |    Relay    |     | Receiver(R)\
    \ |\n          +-------------+     +-------------+     +-------------+\n     \
    \            : t1: RTP(S)        :                   :\n                 |------------------>|\
    \                   |\n                 |                   | t2: RTP (S)    \
    \   |\n                 |                   |------------------>|\n          \
    \       |                   | t3: PAUSE(S,3)    |\n                 |        \
    \           |<------------------|\n                 | t4:PAUSE(S,3)     |    \
    \               |\n                 |<------------------|                   |\n\
    \                 : <Sender waiting for possible RESUME>  :\n                \
    \ |          < RTP data paused >          |\n                 | t5: PAUSED(S,3)\
    \   |                   |\n                 |------------------>|            \
    \       |\n                 |                   | t6: PAUSED(S,3)   |\n      \
    \           |                   |------------------>|\n                 :    \
    \               :                   :\n                 |                   |\
    \ t7: RESUME(S,3)   |\n                 |                   |<------------------|\n\
    \                 | t8: RESUME(S,3)   |                   |\n                \
    \ |<------------------|                   |\n                 | t9: RTP (S)  \
    \     |                   |\n                 |------------------>|          \
    \         |\n                 |                   | t10: RTP (S)      |\n    \
    \             |                   |------------------>|\n                 :  \
    \                 :                   :\n   Figure 18: Pause and Resume Operation\
    \ between Two Participants Using\n                                  a Relay\n\
    \   Figure 18 describes how a Relay can help the receiver (R) in pausing\n   and\
    \ resuming the sender (S).  S sends RTP data to R through the\n   Relay, which\
    \ just forwards the data without modifying the SSRCs.  R\n   sends a PAUSE request\
    \ to S which, in this example, knows that there\n   may be more receivers of the\
    \ stream and waits a non-zero hold-off\n   period to see if there is any other\
    \ receiver that wants to receive\n   the data, and when no disapproving RESUME\
    \ messages are received, it\n   pauses itself and replies with PAUSED.  Similarly\
    \ R resumes S by\n   sending a RESUME request through the Relay.  Since this describes\n\
    \   only a single pause and resume operation for a single RTP stream\n   sender,\
    \ all messages use a single PauseID; in this example, it's\n   three.\n     +-----+\
    \            +-----+            +-----+            +-----+\n     |  S  |     \
    \       | Rel |            | R1  |            | R2  |\n     +-----+          \
    \  +-----+            +-----+            +-----+\n        : t1:RTP(S)        :\
    \                  :                  :\n        |----------------->|        \
    \          |                  |\n        |                  | t2:RTP(S)      \
    \  |                  |\n        |                  |----------------->------------------>|\n\
    \        |                  | t3:PAUSE(S,7)    |                  |\n        |\
    \                  |<-----------------|                  |\n        | t4:PAUSE(S,7)\
    \    |                  |                  |\n        |<-----------------|------------------------------------>|\n\
    \        |                  |                  |   t5:RESUME(S,7) |\n        |\
    \                  |<------------------------------------|\n        | t6:RESUME(S,7)\
    \   |                  |                  |\n        |<-----------------|----------------->|\
    \                  |\n        |                  | <RTP stream continues to R1\
    \ and R2> |\n        |                  |                  |   t7: PAUSE(S,8)\
    \ |\n        |                  |<------------------------------------|\n    \
    \    | t8:PAUSE(S,8)    |                  |                  |\n        |<-----------------|----------------->|\
    \                  |\n        :                  :                  :        \
    \          :\n        | < Pauses RTP stream >               |                \
    \  |\n        | t9:PAUSED(S,8)   |                  |                  |\n   \
    \     |----------------->|                  |                  |\n        |  \
    \                | t10:PAUSED(S,8)  |                  |\n        |          \
    \        |----------------->------------------>|\n        :                  :\
    \                  :                  :\n        |                  | t11:RESUME(S,8)\
    \  |                  |\n        |                  |<-----------------|     \
    \             |\n        | t12:RESUME(S,8)  |                  |             \
    \     |\n        |<-----------------|------------------------------------>|\n\
    \        | t13:RTP(S)       |                  |                  |\n        |----------------->|\
    \                  |                  |\n        |                  | t14:RTP(S)\
    \       |                  |\n        |                  |----------------->------------------>|\n\
    \        :                  :                  :                  :\n     Figure\
    \ 19: Pause and Resume Operation between One Sender and Two\n                \
    \          Receivers through Relay\n   Figure 19 explains the pause and resume\
    \ operations when a transport\n   Relay (Rel) is involved between a sender (S)\
    \ and two receivers (R1\n   and R2) in an RTP session.  Each message exchange\
    \ is represented by\n   the time it happens.  At time t1, S starts sending an\
    \ RTP stream to\n   Rel, which forwards it to R1 and R2.  R1 and R2 receives RTP\
    \ data\n   from Rel at t2.  At this point, both R1 and R2 will send RTCP\n   Receiver\
    \ Reports to S informing that they received S's stream.\n   After some time (at\
    \ t3), R1 chooses to pause the stream.  On\n   receiving the PAUSE request from\
    \ R1 at t4, S knows that there is at\n   least one receiver that may still want\
    \ to receive the data and uses a\n   non-zero hold-off period to wait for possible\
    \ RESUME messages.  R2\n   did also receive the PAUSE request at time t4 and since\
    \ it still\n   wants to receive the stream, it sends a RESUME for it at time t5,\n\
    \   which is forwarded to sender S by Rel.  S sees the RESUME at time t6\n   and\
    \ continues to send data to Rel, which forwards it to both R1 and\n   R2.  At\
    \ t7, R2 chooses to pause the stream by sending a PAUSE request\n   with an updated\
    \ PauseID.  S still knows that there is more than one\n   receiver (R1 and R2)\
    \ that may want the stream and again waits a non-\n   zero hold-off period, after\
    \ which, and not having received any\n   disapproving RESUME messages, it concludes\
    \ that the stream must be\n   paused.  S now stops sending the stream and replies\
    \ with PAUSED to R1\n   and R2.  When any of the receivers (R1 or R2) choose to\
    \ resume the\n   stream from S, in this example R1, it sends a RESUME request\
    \ to S\n   (also seen by R2).  S immediately resumes the stream.\n   Consider\
    \ also an RTP session that includes one or more receivers,\n   paused sender(s),\
    \ and a Relay.  Further assume that a new participant\n   joins the session, which\
    \ is not aware of the paused sender(s).  On\n   receiving knowledge about the\
    \ newly joined participant, e.g., any RTP\n   traffic or RTCP report (i.e., either\
    \ SR or RR) from the newly joined\n   participant, the paused sender(s) immediately\
    \ sends PAUSED\n   indications for the paused streams since there is now a receiver\
    \ in\n   the session that did not pause the sender(s) and may want to receive\n\
    \   the streams.  Having this information, the newly joined participant\n   has\
    \ the same possibility as any other participant to resume the\n   paused streams.\n"
- title: 11.  IANA Considerations
  contents:
  - "11.  IANA Considerations\n   Per this specification, IANA has made the following\
    \ registrations:\n   1.  A new value for media stream pause/resume has been registered\
    \ in\n       the \"FMT Values for RTPFB Payload Types\" registry located at the\n\
    \       time of publication at: <http://www.iana.org/assignments/rtp-\n      \
    \ parameters>\n       Value:  9\n       Name:  PAUSE-RESUME\n       Long Name:\
    \  Media Pause/Resume\n       Reference:  RFC 7728\n   2.  A new value \"pause\"\
    \ to be registered with IANA in the \"Codec\n       Control Messages\" registry\
    \ located at the time of publication at:\n       <http://www.iana.org/assignments/sdp-parameters>\n\
    \       Value Name:  pause\n       Long Name:  Media Pause/Resume\n       Usable\
    \ with:  ccm\n       Reference:  RFC 7728\n"
- title: 12.  Security Considerations
  contents:
  - "12.  Security Considerations\n   This document extends CCM [RFC5104] and defines\
    \ new messages, i.e.,\n   PAUSE, RESUME, PAUSED, and REFUSED.  The exchange of\
    \ these new\n   messages has some security implications, which need to be addressed\n\
    \   by the user.\n   The messages defined in this specification can have a substantial\n\
    \   impact on the perceived media quality if used in a malicious way.\n   First\
    \ of all, there is the risk for Denial of Service (DoS) on any\n   RTP session\
    \ that uses the PAUSE-RESUME functionality.  By injecting\n   one or more PAUSE\
    \ requests into the RTP session, an attacker can\n   potentially prevent any media\
    \ from flowing, especially when the hold-\n   off period is zero.  The injection\
    \ of PAUSE messages is quite simple,\n   requiring knowledge of the SSRC and the\
    \ PauseID.  This information is\n   visible to an on-path attacker unless RTCP\
    \ messages are encrypted.\n   Even off-path attacks are possible as signaling\
    \ messages often carry\n   the SSRC value, while the 16-bit PauseID has to be\
    \ guessed or tried.\n   The way of protecting the RTP session from these injections\
    \ is to\n   perform source authentication combined with message integrity to\n\
    \   prevent other than intended session participants from sending these\n   messages.\
    \  The security solution should provide replay protection.\n   Otherwise, if a\
    \ session is long lived enough for the PauseID value to\n   wrap, an attacker\
    \ could replay old messages at the appropriate time\n   to influence the media\
    \ sender state.  There exist several different\n   choices for securing RTP sessions\
    \ to prevent this type of attack.\n   The Secure Real-time Transport Protocol\
    \ (SRTP) is the most common,\n   but also other methods exist as discussed in\
    \ \"Options for Securing\n   RTP Sessions\" [RFC7201].\n   Most of the methods\
    \ for securing RTP, however, do not provide source\n   authentication of each\
    \ individual participant in a multiparty use\n   case.  In case one of the session\
    \ participants is malicious, it can\n   wreck significant havoc within the RTP\
    \ session and similarly cause a\n   DoS on the RTP session from within.  That\
    \ damage can also be\n   attempted to be obfuscated by having the attacker impersonate\
    \ other\n   endpoints within the session.  These attacks can be mitigated by\n\
    \   using a solution that provides true source authentication of all\n   participants'\
    \ RTCP packets.  However, that has other implications.\n   For multiparty sessions\
    \ including a middlebox, that middlebox is\n   RECOMMENDED to perform checks on\
    \ all forwarded RTCP packets so that\n   each participant only uses its set of\
    \ SSRCs to prevent the attacker\n   from utilizing another participant's SSRCs.\
    \  An attacker that can\n   send a PAUSE request that does not reach any participants\
    \ other than\n   the media sender can cause a stream to be paused without providing\n\
    \   opportunity for opposition.  This is mitigated in multiparty\n   topologies\
    \ that ensure that requests are seen by all or most of the\n   RTP session participants,\
    \ enabling these participants to send a\n   RESUME.  In topologies with middleboxes\
    \ that consume and process\n   PAUSE requests, the middlebox can also mitigate\
    \ such behavior as it\n   will commonly not generate or forward a PAUSE message\
    \ if it knows of\n   another participant having use for the media stream.\n  \
    \ The above text has been focused on using the PAUSE message as the\n   tool for\
    \ malicious impact on the RTP session.  That is because of the\n   greater impact\
    \ from denying users access to RTP media streams.  In\n   contrast, if an attacker\
    \ attempts to use RESUME in a malicious\n   purpose, it will result in the media\
    \ streams being delivered.\n   However, such an attack basically prevents the\
    \ use of the pause and\n   resume functionality.  Thus, it potentially forces\
    \ a reduction of the\n   media quality due to limitation in available resources,\
    \ like\n   bandwidth that must be shared.\n   The session establishment signaling\
    \ is also a potential venue of\n   attack, as that can be used to prevent the\
    \ enabling of pause and\n   resume functionality by modifying the signaling messages.\
    \  The above\n   mitigation of attacks based on source authentication also requires\n\
    \   the signaling system to securely handle identities and assert that\n   only\
    \ the intended identities are allowed into the RTP session and\n   provided with\
    \ the relevant security contexts.\n"
- title: 13.  References
  contents:
  - '13.  References

    '
- title: 13.1.  Normative References
  contents:
  - "13.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use in\
    \ RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119,\n  \
    \            DOI 10.17487/RFC2119, March 1997,\n              <http://www.rfc-editor.org/info/rfc2119>.\n\
    \   [RFC3264]  Rosenberg, J. and H. Schulzrinne, \"An Offer/Answer Model\n   \
    \           with Session Description Protocol (SDP)\", RFC 3264,\n           \
    \   DOI 10.17487/RFC3264, June 2002,\n              <http://www.rfc-editor.org/info/rfc3264>.\n\
    \   [RFC3550]  Schulzrinne, H., Casner, S., Frederick, R., and V.\n          \
    \    Jacobson, \"RTP: A Transport Protocol for Real-Time\n              Applications\"\
    , STD 64, RFC 3550, DOI 10.17487/RFC3550,\n              July 2003, <http://www.rfc-editor.org/info/rfc3550>.\n\
    \   [RFC4566]  Handley, M., Jacobson, V., and C. Perkins, \"SDP: Session\n   \
    \           Description Protocol\", RFC 4566, DOI 10.17487/RFC4566,\n        \
    \      July 2006, <http://www.rfc-editor.org/info/rfc4566>.\n   [RFC4585]  Ott,\
    \ J., Wenger, S., Sato, N., Burmeister, C., and J. Rey,\n              \"Extended\
    \ RTP Profile for Real-time Transport Control\n              Protocol (RTCP)-Based\
    \ Feedback (RTP/AVPF)\", RFC 4585,\n              DOI 10.17487/RFC4585, July 2006,\n\
    \              <http://www.rfc-editor.org/info/rfc4585>.\n   [RFC5104]  Wenger,\
    \ S., Chandra, U., Westerlund, M., and B. Burman,\n              \"Codec Control\
    \ Messages in the RTP Audio-Visual Profile\n              with Feedback (AVPF)\"\
    , RFC 5104, DOI 10.17487/RFC5104,\n              February 2008, <http://www.rfc-editor.org/info/rfc5104>.\n\
    \   [RFC5234]  Crocker, D., Ed. and P. Overell, \"Augmented BNF for Syntax\n \
    \             Specifications: ABNF\", STD 68, RFC 5234,\n              DOI 10.17487/RFC5234,\
    \ January 2008,\n              <http://www.rfc-editor.org/info/rfc5234>.\n   [RFC5245]\
    \  Rosenberg, J., \"Interactive Connectivity Establishment\n              (ICE):\
    \ A Protocol for Network Address Translator (NAT)\n              Traversal for\
    \ Offer/Answer Protocols\", RFC 5245,\n              DOI 10.17487/RFC5245, April\
    \ 2010,\n              <http://www.rfc-editor.org/info/rfc5245>.\n   [RFC6263]\
    \  Marjou, X. and A. Sollaud, \"Application Mechanism for\n              Keeping\
    \ Alive the NAT Mappings Associated with RTP / RTP\n              Control Protocol\
    \ (RTCP) Flows\", RFC 6263,\n              DOI 10.17487/RFC6263, June 2011,\n\
    \              <http://www.rfc-editor.org/info/rfc6263>.\n"
- title: 13.2.  Informative References
  contents:
  - "13.2.  Informative References\n   [MULTI-STREAM-OPT]\n              Lennox, J.,\
    \ Westerlund, M., Wu, W., and C. Perkins,\n              \"Sending Multiple Media\
    \ Streams in a Single RTP Session:\n              Grouping RTCP Reception Statistics\
    \ and Other Feedback\",\n              Work in Progress, draft-ietf-avtcore-rtp-multi-stream-\n\
    \              optimisation-11, December 2015.\n   [RFC2326]  Schulzrinne, H.,\
    \ Rao, A., and R. Lanphier, \"Real Time\n              Streaming Protocol (RTSP)\"\
    , RFC 2326,\n              DOI 10.17487/RFC2326, April 1998,\n              <http://www.rfc-editor.org/info/rfc2326>.\n\
    \   [RFC2974]  Handley, M., Perkins, C., and E. Whelan, \"Session\n          \
    \    Announcement Protocol\", RFC 2974, DOI 10.17487/RFC2974,\n              October\
    \ 2000, <http://www.rfc-editor.org/info/rfc2974>.\n   [RFC3261]  Rosenberg, J.,\
    \ Schulzrinne, H., Camarillo, G., Johnston,\n              A., Peterson, J., Sparks,\
    \ R., Handley, M., and E.\n              Schooler, \"SIP: Session Initiation Protocol\"\
    , RFC 3261,\n              DOI 10.17487/RFC3261, June 2002,\n              <http://www.rfc-editor.org/info/rfc3261>.\n\
    \   [RFC3611]  Friedman, T., Ed., Caceres, R., Ed., and A. Clark, Ed.,\n     \
    \         \"RTP Control Protocol Extended Reports (RTCP XR)\",\n             \
    \ RFC 3611, DOI 10.17487/RFC3611, November 2003,\n              <http://www.rfc-editor.org/info/rfc3611>.\n\
    \   [RFC6190]  Wenger, S., Wang, Y., Schierl, T., and A. Eleftheriadis,\n    \
    \          \"RTP Payload Format for Scalable Video Coding\", RFC 6190,\n     \
    \         DOI 10.17487/RFC6190, May 2011,\n              <http://www.rfc-editor.org/info/rfc6190>.\n\
    \   [RFC7201]  Westerlund, M. and C. Perkins, \"Options for Securing RTP\n   \
    \           Sessions\", RFC 7201, DOI 10.17487/RFC7201, April 2014,\n        \
    \      <http://www.rfc-editor.org/info/rfc7201>.\n   [RFC7478]  Holmberg, C.,\
    \ Hakansson, S., and G. Eriksson, \"Web Real-\n              Time Communication\
    \ Use Cases and Requirements\", RFC 7478,\n              DOI 10.17487/RFC7478,\
    \ March 2015,\n              <http://www.rfc-editor.org/info/rfc7478>.\n   [RFC7656]\
    \  Lennox, J., Gross, K., Nandakumar, S., Salgueiro, G., and\n              B.\
    \ Burman, Ed., \"A Taxonomy of Semantics and Mechanisms\n              for Real-Time\
    \ Transport Protocol (RTP) Sources\", RFC 7656,\n              DOI 10.17487/RFC7656,\
    \ November 2015,\n              <http://www.rfc-editor.org/info/rfc7656>.\n  \
    \ [RFC7667]  Westerlund, M. and S. Wenger, \"RTP Topologies\", RFC 7667,\n   \
    \           DOI 10.17487/RFC7667, November 2015,\n              <http://www.rfc-editor.org/info/rfc7667>.\n\
    \   [SDP-SIMULCAST]\n              Burman, B., Westerlund, M., Nandakumar, S.,\
    \ and M. Zanaty,\n              \"Using Simulcast in SDP and RTP Sessions\", Work\
    \ in\n              Progress, draft-ietf-mmusic-sdp-simulcast-04, February\n \
    \             2016.\n"
- title: Acknowledgments
  contents:
  - "Acknowledgments\n   Daniel Grondal made valuable contributions during the initial\n\
    \   versions of this document.  The authors would also like to thank Emil\n  \
    \ Ivov, Christian Groves, David Mandelberg, Meral Shirazipour, Spencer\n   Dawkins,\
    \ Bernard Aboba, and Ben Campbell, who provided valuable\n   review comments.\n"
- title: Contributors
  contents:
  - "Contributors\n   Daniel Grondal contributed in the creation and writing of early\n\
    \   versions of this specification.  Christian Groves contributed\n   significantly\
    \ to the SDP \"config\" pause attribute and its use in\n   offer/answer.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Bo Burman\n   Ericsson\n   Kistavagen 25\n   SE - 164\
    \ 80 Kista\n   Sweden\n   Email: bo.burman@ericsson.com\n   Azam Akram\n   Ericsson\n\
    \   Farogatan 6\n   SE - 164 80 Kista\n   Sweden\n   Phone: +46107142658\n   Email:\
    \ akram.muhammadazam@gmail.com\n   URI:   www.ericsson.com\n   Roni Even\n   Huawei\
    \ Technologies\n   Tel Aviv\n   Israel\n   Email: roni.even@mail01.huawei.com\n\
    \   Magnus Westerlund\n   Ericsson\n   Farogatan 6\n   SE - 164 80 Kista\n   Sweden\n\
    \   Phone: +46107148287\n   Email: magnus.westerlund@ericsson.com\n"
