- title: __initial_text__
  contents:
  - '              The Blocks Extensible Exchange Protocol Core

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2001).  All Rights Reserved.\n"
- title: Abstract
  contents:
  - "Abstract\n   This memo describes a generic application protocol kernel for\n\
    \   connection-oriented, asynchronous interactions called the BEEP\n   (Blocks\
    \ Extensible Exchange Protocol) core.  BEEP permits\n   simultaneous and independent\
    \ exchanges within the context of a single\n   application user-identity, supporting\
    \ both textual and binary\n   messages.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.      Introduction . . . . . . . . . . . . . . . . .\
    \ . . . . . .  4\n   2.      The BEEP Core  . . . . . . . . . . . . . . . . .\
    \ . . . . .  5\n   2.1     Roles  . . . . . . . . . . . . . . . . . . . . . .\
    \ . . . .  6\n   2.1.1   Exchange Styles  . . . . . . . . . . . . . . . . . .\
    \ . . .  6\n   2.2     Messages and Frames  . . . . . . . . . . . . . . . . .\
    \ . .  7\n   2.2.1   Frame Syntax . . . . . . . . . . . . . . . . . . . . . .\
    \ .  8\n   2.2.1.1 Frame Header . . . . . . . . . . . . . . . . . . . . . . .\
    \  9\n   2.2.1.2 Frame Payload  . . . . . . . . . . . . . . . . . . . . . . 12\n\
    \   2.2.1.3 Frame Trailer  . . . . . . . . . . . . . . . . . . . . . . 13\n  \
    \ 2.2.2   Frame Semantics  . . . . . . . . . . . . . . . . . . . . . 14\n   2.2.2.1\
    \ Poorly-formed Messages . . . . . . . . . . . . . . . . . . 14\n   2.3     Channel\
    \ Management . . . . . . . . . . . . . . . . . . . . 15\n   2.3.1   Message Semantics\
    \  . . . . . . . . . . . . . . . . . . . . 16\n   2.3.1.1 The Greeting Message\
    \ . . . . . . . . . . . . . . . . . . . 16\n   2.3.1.2 The Start Message  . .\
    \ . . . . . . . . . . . . . . . . . . 17\n   2.3.1.3 The Close Message  . . .\
    \ . . . . . . . . . . . . . . . . . 20\n   2.3.1.4 The OK Message . . . . . .\
    \ . . . . . . . . . . . . . . . . 23\n   2.3.1.5 The Error Message  . . . . .\
    \ . . . . . . . . . . . . . . . 23\n   2.4     Session Establishment and Release\
    \  . . . . . . . . . . . . 25\n   2.5     Transport Mappings . . . . . . . . .\
    \ . . . . . . . . . . . 27\n   2.5.1   Session Management . . . . . . . . . .\
    \ . . . . . . . . . . 27\n   2.5.2   Message Exchange . . . . . . . . . . . .\
    \ . . . . . . . . . 27\n   2.6     Asynchrony . . . . . . . . . . . . . . . .\
    \ . . . . . . . . 28\n   2.6.1   Within a Single Channel  . . . . . . . . . .\
    \ . . . . . . . 28\n   2.6.2   Between Different Channels . . . . . . . . . .\
    \ . . . . . . 28\n   2.6.3   Pre-emptive Replies  . . . . . . . . . . . . . .\
    \ . . . . . 29\n   2.6.4   Interference . . . . . . . . . . . . . . . . . . .\
    \ . . . . 29\n   2.7     Peer-to-Peer Behavior  . . . . . . . . . . . . . . .\
    \ . . . 30\n   3.      Transport Security . . . . . . . . . . . . . . . . . .\
    \ . . 31\n   3.1     The TLS Transport Security Profile . . . . . . . . . . .\
    \ . 34\n   3.1.1   Profile Identification and Initialization  . . . . . . . .\
    \ 34\n   3.1.2   Message Syntax . . . . . . . . . . . . . . . . . . . . . . 35\n\
    \   3.1.3   Message Semantics  . . . . . . . . . . . . . . . . . . . . 36\n  \
    \ 3.1.3.1 The Ready Message  . . . . . . . . . . . . . . . . . . . . 36\n   3.1.3.2\
    \ The Proceed Message  . . . . . . . . . . . . . . . . . . . 36\n   4.      User\
    \ Authentication  . . . . . . . . . . . . . . . . . . . 37\n   4.1     The SASL\
    \ Family of Profiles  . . . . . . . . . . . . . . . 38\n   4.1.1   Profile Identification\
    \ and Initialization  . . . . . . . . 39\n   4.1.2   Message Syntax . . . . .\
    \ . . . . . . . . . . . . . . . . . 42\n   4.1.3   Message Semantics  . . . .\
    \ . . . . . . . . . . . . . . . . 43\n   5.      Registration Templates . . .\
    \ . . . . . . . . . . . . . . . 44\n   5.1     Profile Registration Template \
    \ . . . . . . . . . . . . . . 44\n   5.2     Feature Registration Template  .\
    \ . . . . . . . . . . . . . 44\n   6.      Initial Registrations  . . . . . .\
    \ . . . . . . . . . . . . 45\n   6.1     Registration: BEEP Channel Management\
    \  . . . . . . . . . . 45\n   6.2     Registration: TLS Transport Security Profile\
    \ . . . . . . . 45\n   6.3     Registration: SASL Family of Profiles  . . . .\
    \ . . . . . . 46\n   6.4     Registration: application/beep+xml . . . . . . .\
    \ . . . . . 47\n   7.      DTDs . . . . . . . . . . . . . . . . . . . . . . .\
    \ . . . . 48\n   7.1     BEEP Channel Management DTD  . . . . . . . . . . . .\
    \ . . . 48\n   7.2     TLS Transport Security Profile DTD . . . . . . . . . .\
    \ . . 50\n   7.3     SASL Family of Profiles DTD  . . . . . . . . . . . . . .\
    \ . 51\n   8.      Reply Codes  . . . . . . . . . . . . . . . . . . . . . . .\
    \ 52\n   9.      Security Considerations  . . . . . . . . . . . . . . . . . 53\n\
    \           References . . . . . . . . . . . . . . . . . . . . . . . . 54\n  \
    \         Author's Address . . . . . . . . . . . . . . . . . . . . . 55\n   A.\
    \      Acknowledgements . . . . . . . . . . . . . . . . . . . . . 56\n   B.  \
    \    IANA Considerations  . . . . . . . . . . . . . . . . . . . 57\n         \
    \  Full Copyright Statement . . . . . . . . . . . . . . . . . 58\n"
- title: 1. Introduction
  contents:
  - "1. Introduction\n   This memo describes a generic application protocol kernel\
    \ for\n   connection-oriented, asynchronous interactions called BEEP.\n   At BEEP's\
    \ core is a framing mechanism that permits simultaneous and\n   independent exchanges\
    \ of messages between peers.  Messages are\n   arbitrary MIME [1] content, but\
    \ are usually textual (structured using\n   XML [2]).\n   All exchanges occur\
    \ in the context of a channel -- a binding to a\n   well-defined aspect of the\
    \ application, such as transport security,\n   user authentication, or data exchange.\n\
    \   Each channel has an associated \"profile\" that defines the syntax and\n \
    \  semantics of the messages exchanged.  Implicit in the operation of\n   BEEP\
    \ is the notion of channel management.  In addition to defining\n   BEEP's channel\
    \ management profile, this document defines:\n   o  the TLS [3] transport security\
    \ profile; and,\n   o  the SASL [4] family of profiles.\n   Other profiles, such\
    \ as those used for data exchange, are defined by\n   an application protocol\
    \ designer.\n"
- title: 2. The BEEP Core
  contents:
  - "2. The BEEP Core\n   A BEEP session is mapped onto an underlying transport service.\
    \  A\n   separate series of documents describe how a particular transport\n  \
    \ service realizes a BEEP session.  For example, [5] describes how a\n   BEEP\
    \ session is mapped onto a single TCP [6] connection.\n   When a session is established,\
    \ each BEEP peer advertises the profiles\n   it supports.  Later on, during the\
    \ creation of a channel, the client\n   supplies one or more proposed profiles\
    \ for that channel.  If the\n   server creates the channel, it selects one of\
    \ the profiles and sends\n   it in a reply; otherwise, it may indicate that none\
    \ of the profiles\n   are acceptable, and decline creation of the channel.\n \
    \  Channel usage falls into one of two categories:\n   initial tuning: these are\
    \ used by profiles that perform\n      initialization once the BEEP session is\
    \ established (e.g.,\n      negotiating the use of transport security); although\
    \ several\n      exchanges may be required to perform the initialization, these\n\
    \      channels become inactive early in the BEEP session and remain so\n    \
    \  for the duration.\n   continuous: these are used by profiles that support data\
    \ exchange;\n      typically, these channels are created after the initial tuning\n\
    \      channels have gone quiet.\n   Note that because of their special nature,\
    \ only one tuning channel\n   may be established at any given time; in contrast,\
    \ BEEP allows\n   multiple data exchange channels to be simultaneously in use.\n"
- title: 2.1 Roles
  contents:
  - "2.1 Roles\n   Although BEEP is peer-to-peer, it is convenient to label each peer\
    \ in\n   the context of the role it is performing at a given time:\n   o  When\
    \ a BEEP session is established, the peer that awaits new\n      connections is\
    \ acting in the listening role, and the other peer,\n      which establishes a\
    \ connection to the listener, is acting in the\n      initiating role.  In the\
    \ examples which follow, these are referred\n      to as \"L:\" and \"I:\", respectively.\n\
    \   o  A BEEP peer starting an exchange is termed the client; similarly,\n   \
    \   the other BEEP peer is termed the server.  In the examples which\n      follow,\
    \ these are referred to as \"C:\" and \"S:\", respectively.\n   Typically, a BEEP\
    \ peer acting in the server role is also acting in a\n   listening role.  However,\
    \ because BEEP is peer-to-peer in nature, no\n   such requirement exists.\n"
- title: 2.1.1 Exchange Styles
  contents:
  - "2.1.1 Exchange Styles\n   BEEP allows three styles of exchange:\n   MSG/RPY:\
    \ the client sends a \"MSG\" message asking the server to\n      perform some\
    \ task, the server performs the task and replies with a\n      \"RPY\" message\
    \ (termed a positive reply).\n   MSG/ERR: the client sends a \"MSG\" message,\
    \ the server does not\n      perform any task and replies with an \"ERR\" message\
    \ (termed a\n      negative reply).\n   MSG/ANS: the client sends a \"MSG\" message,\
    \ the server, during the\n      course of performing some task, replies with zero\
    \ or more \"ANS\"\n      messages, and, upon completion of the task, sends a \"\
    NUL\" message,\n      which signifies the end of the reply.\n   The first two\
    \ styles are termed one-to-one exchanges, whilst the\n   third style is termed\
    \ a one-to-many exchange.\n"
- title: 2.2 Messages and Frames
  contents:
  - "2.2 Messages and Frames\n   A message is structured according to the rules of\
    \ MIME.  Accordingly,\n   each message may begin with \"entity-headers\" (c.f.,\
    \ MIME's Section 3\n   [1]).  If none, or only some, of the \"entity-headers\"\
    \ are present:\n   o  the default \"Content-Type\" is \"application/octet-stream\"\
    ; and,\n   o  the default \"Content-Transfer-Encoding\" is \"binary\".\n   Normally,\
    \ a message is sent in a single frame.  However, it may be\n   convenient or necessary\
    \ to segment a message into multiple frames\n   (e.g., if only part of a message\
    \ is ready to be sent).\n   Each frame consists of a header, the payload, and\
    \ a trailer.  The\n   header and trailer are each represented using printable\
    \ ASCII\n   characters and are terminated with a CRLF pair.  Between the header\n\
    \   and the trailer is the payload, consisting of zero or more octets.\n   For\
    \ example, here is a message contained in a single frame that\n   contains a payload\
    \ of 120 octets spread over 5 lines (each line is\n   terminated with a CRLF pair):\n\
    \       C: MSG 0 1 . 52 120\n       C: Content-Type: application/beep+xml\n  \
    \     C:\n       C: <start number='1'>\n       C:    <profile uri='http://iana.org/beep/SASL/OTP'\
    \ />\n       C: </start>\n       C: END\n   In this example, note that the entire\
    \ message is represented in a\n   single frame.\n"
- title: 2.2.1 Frame Syntax
  contents:
  - "2.2.1 Frame Syntax\n   The ABNF [7] for a frame is:\n   frame      = data / mapping\n\
    \   data       = header payload trailer\n   header     = msg / rpy / err / ans\
    \ / nul\n   msg        = \"MSG\" SP common          CR LF\n   rpy        = \"\
    RPY\" SP common          CR LF\n   ans        = \"ANS\" SP common SP ansno CR\
    \ LF\n   err        = \"ERR\" SP common          CR LF\n   nul        = \"NUL\"\
    \ SP common          CR LF\n   common     = channel SP msgno SP more SP seqno\
    \ SP size\n   channel    = 0..2147483647\n   msgno      = 0..2147483647\n   more\
    \       = \".\" / \"*\"\n   seqno      = 0..4294967295\n   size       = 0..2147483647\n\
    \   ansno      = 0..2147483647\n   payload    = *OCTET\n   trailer    = \"END\"\
    \ CR LF\n   mapping    = ;; each transport mapping may define additional frames\n"
- title: 2.2.1.1 Frame Header
  contents:
  - "2.2.1.1 Frame Header\n   The frame header consists of a three-character keyword\
    \ (one of:\n   \"MSG\", \"RPY\", \"ERR\", \"ANS\", or \"NUL\"), followed by zero\
    \ or more\n   parameters.  A single space character (decimal code 32, \" \")\n\
    \   separates each component.  The header is terminated with a CRLF pair.\n  \
    \ The channel number (\"channel\") must be a non-negative integer (in the\n  \
    \ range 0..2147483647).\n   The message number (\"msgno\") must be a non-negative\
    \ integer (in the\n   range 0..2147483647) and have a different value than all\
    \ other \"MSG\"\n   messages on the same channel for which a reply has not been\n\
    \   completely received.\n   The continuation indicator (\"more\", one of: decimal\
    \ code 42, \"*\", or\n   decimal code 46, \".\") specifies whether this is the\
    \ final frame of\n   the message:\n      intermediate (\"*\"): at least one other\
    \ frame follows for the\n      message; or,\n      complete (\".\"): this frame\
    \ completes the message.\n   The sequence number (\"seqno\") must be a non-negative\
    \ integer (in the\n   range 0..4294967295) and specifies the sequence number of\
    \ the first\n   octet in the payload, for the associated channel (c.f., Section\n\
    \   2.2.1.2).\n   The payload size (\"size\") must be a non-negative integer (in\
    \ the\n   range 0..2147483647) and specifies the exact number of octets in the\n\
    \   payload.  (This does not include either the header or trailer.)\n   Note that\
    \ a frame may have an empty payload, e.g.,\n       S: RPY 0 1 * 287 20\n     \
    \  S:     ...\n       S:     ...\n       S: END\n       S: RPY 0 1 . 307 0\n \
    \      S: END\n   The answer number (\"ansno\") must be a non-negative integer\
    \ (in the\n   range 0..4294967295) and must have a different value than all other\n\
    \   answers in progress for the message being replied to.\n   There are two kinds\
    \ of frames: data and mapping.  Each transport\n   mapping (c.f., Section 2.5)\
    \ may define its own frames.  For example,\n   [5] defines the SEQ frame.  The\
    \ remainder of this section discusses\n   data frames.\n   When a message is segmented\
    \ and sent as several frames, those frames\n   must be sent sequentially, without\
    \ any intervening frames from other\n   messages on the same channel.  However,\
    \ there are two exceptions:\n   first, no restriction is made with respect to\
    \ the interleaving of\n   frames for other channels; and, second, in a one-to-many\
    \ exchange,\n   multiple answers may be simultaneously in progress.  Accordingly,\n\
    \   frames for \"ANS\" messages may be interleaved on the same channel --\n  \
    \ the answer number is used for collation, e.g.,\n       S: ANS 1 0 * 0 20 0\n\
    \       S:     ...\n       S:     ...\n       S: END\n       S: ANS 1 0 * 20 20\
    \ 1\n       S:     ...\n       S:     ...\n       S: END\n       S: ANS 1 0 .\
    \ 40 10 0\n       S:     ...\n       S: END\n   which shows two \"ANS\" messages\
    \ interleaved on channel 1 as part of a\n   reply to message number 0.  Note that\
    \ the sequence number is advanced\n   for each frame sent on the channel, and\
    \ is independent of the\n   messages sent in those frames.\n   There are several\
    \ rules for identifying poorly-formed frames:\n   o  if the header doesn't start\
    \ with \"MSG\", \"RPY\", \"ERR\", \"ANS\", or\n      \"NUL\";\n   o  if any of\
    \ the parameters in the header cannot be determined or are\n      invalid (i.e.,\
    \ syntactically incorrect);\n   o  if the value of the channel number doesn't\
    \ refer to an existing\n      channel;\n   o  if the header starts with \"MSG\"\
    , and the message number refers to\n      a \"MSG\" message that has been completely\
    \ received but for which a\n      reply has not been completely sent;\n   o  if\
    \ the header doesn't start with \"MSG\", and refers to a message\n      number\
    \ for which a reply has already been completely received;\n   o  if the header\
    \ doesn't start with \"MSG\", and refers to a message\n      number that has never\
    \ been sent (except during session\n      establishment, c.f., Section 2.3.1.1);\n\
    \   o  if the header starts with \"MSG\", \"RPY\", \"ERR\", or \"ANS\", and\n\
    \      refers to a message number for which at least one other frame has\n   \
    \   been received, and the three-character keyword starting this frame\n     \
    \ and the immediately-previous received frame for this message\n      number are\
    \ not identical;\n   o  if the header starts with \"NUL\", and refers to a message\
    \ number\n      for which at least one other frame has been received, and the\n\
    \      keyword of of the immediately-previous received frame for this\n      reply\
    \ isn't \"ANS\";\n   o  if the continuation indicator of the previous frame received\
    \ on\n      the same channel was intermediate (\"*\"), and its message number\n\
    \      isn't identical to this frame's message number;\n   o  if the value of\
    \ the sequence number doesn't correspond to the\n      expected value for the\
    \ associated channel (c.f., Section 2.2.1.2);\n      or,\n   o  if the header\
    \ starts with \"NUL\", and the continuation indicator is\n      intermediate (\"\
    *\") or the payload size is non-zero.\n   If a frame is poorly-formed, then the\
    \ session is terminated without\n   generating a response, and it is recommended\
    \ that a diagnostic entry\n   be logged.\n"
- title: 2.2.1.2 Frame Payload
  contents:
  - "2.2.1.2 Frame Payload\n   The frame payload consists of zero or more octets.\n\
    \   Every payload octet sent in each direction on a channel has an\n   associated\
    \ sequence number.  Numbering of payload octets within a\n   frame is such that\
    \ the first payload octet is the lowest numbered,\n   and the following payload\
    \ octets are numbered consecutively.  (When a\n   channel is created, the sequence\
    \ number associated with the first\n   payload octet of the first frame is 0.)\n\
    \   The actual sequence number space is finite, though very large,\n   ranging\
    \ from 0..4294967295 (2**32 - 1).  Since the space is finite,\n   all arithmetic\
    \ dealing with sequence numbers is performed modulo\n   2**32.  This unsigned\
    \ arithmetic preserves the relationship of\n   sequence numbers as they cycle\
    \ from 2**32 - 1 to 0 again.  Consult\n   Sections 2 through 5 of [8] for a discussion\
    \ of the arithmetic\n   properties of sequence numbers.\n   When receiving a frame,\
    \ the sum of its sequence number and payload\n   size, modulo 4294967296 (2**32),\
    \ gives the expected sequence number\n   associated with the first payload octet\
    \ of the next frame received.\n   Accordingly, when receiving a frame if the sequence\
    \ number isn't the\n   expected value for this channel, then the BEEP peers have\
    \ lost\n   synchronization, then the session is terminated without generating\
    \ a\n   response, and it is recommended that a diagnostic entry be logged.\n"
- title: 2.2.1.3 Frame Trailer
  contents:
  - "2.2.1.3 Frame Trailer\n   The frame trailer consists of \"END\" followed by a\
    \ CRLF pair.\n   When receiving a frame, if the characters immediately following\
    \ the\n   payload don't correspond to a trailer, then the session is terminated\n\
    \   without generating a response, and it is recommended that a\n   diagnostic\
    \ entry be logged.\n"
- title: 2.2.2 Frame Semantics
  contents:
  - "2.2.2 Frame Semantics\n   The semantics of each message is channel-specific.\
    \  Accordingly, the\n   profile associated with a channel must define:\n   o \
    \ the initialization messages, if any, exchanged during channel\n      creation;\n\
    \   o  the messages that may be exchanged in the payload of the channel;\n   \
    \   and,\n   o  the semantics of these messages.\n   A profile registration template\
    \ (Section 5.1) organizes this\n   information.\n"
- title: 2.2.2.1 Poorly-formed Messages
  contents:
  - "2.2.2.1 Poorly-formed Messages\n   When defining the behavior of the profile,\
    \ the template must specify\n   how poorly-formed \"MSG\" messages are replied\
    \ to.  For example, the\n   channel management profile sends a negative reply\
    \ containing an error\n   message (c.f., Section 2.3.1.5).\n   If a poorly-formed\
    \ reply is received on channel zero, the session is\n   terminated without generating\
    \ a response, and it is recommended that\n   a diagnostic entry be logged.\n \
    \  If a poorly-formed reply is received on another channel, then the\n   channel\
    \ must be closed using the procedure in Section 2.3.1.3.\n"
- title: 2.3 Channel Management
  contents:
  - "2.3 Channel Management\n   When a BEEP session starts, only channel number zero\
    \ is defined,\n   which is used for channel management.  Section 6.1 contains\
    \ the\n   profile registration for BEEP channel management.\n   Channel management\
    \ allows each BEEP peer to advertise the profiles\n   that it supports (c.f.,\
    \ Section 2.3.1.1), bind an instance of one of\n   those profiles to a channel\
    \ (c.f., Section 2.3.1.2), and then later\n   close any channels or release the\
    \ BEEP session (c.f., Section\n   2.3.1.3).\n   A BEEP peer should support at\
    \ least 257 concurrent channels.\n"
- title: 2.3.1 Message Semantics
  contents:
  - '2.3.1 Message Semantics

    '
- title: 2.3.1.1 The Greeting Message
  contents:
  - "2.3.1.1 The Greeting Message\n   When a BEEP session is established, each BEEP\
    \ peer signifies its\n   availability by immediately sending a positive reply\
    \ with a message\n   number of zero that contains a \"greeting\" element, e.g.,\n\
    \       L: <wait for incoming connection>\n       I: <open connection>\n     \
    \  L: RPY 0 0 . 0 110\n       L: Content-Type: application/beep+xml\n       L:\n\
    \       L: <greeting>\n       L:    <profile uri='http://iana.org/beep/TLS' />\n\
    \       L: </greeting>\n       L: END\n       I: RPY 0 0 . 0 52\n       I: Content-Type:\
    \ application/beep+xml\n       I:\n       I: <greeting />\n       I: END\n   Note\
    \ that this example implies that the BEEP peer in the initiating\n   role waits\
    \ until the BEEP peer in the listening role sends its\n   greeting -- this is\
    \ an artifact of the presentation; in fact, both\n   BEEP peers send their replies\
    \ independently.\n   The \"greeting\" element has two optional attributes (\"\
    features\" and\n   \"localize\") and zero or more \"profile\" elements, one for\
    \ each profile\n   supported by the BEEP peer acting in a server role:\n   o \
    \ the \"features\" attribute, if present, contains one or more feature\n     \
    \ tokens, each indicating an optional feature of the channel\n      management\
    \ profile supported by the BEEP peer;\n   o  the \"localize\" attribute, if present,\
    \ contains one or more\n      language tokens (defined in [9]), each identifying\
    \ a desirable\n      language tag to be used by the remote BEEP peer when generating\n\
    \      textual diagnostics for the \"close\" and \"error\" elements (the\n   \
    \   tokens are ordered from most to least desirable); and,\n   o  each \"profile\"\
    \ element contained within the \"greeting\" element\n      identifies a profile,\
    \ and unlike the \"profile\" elements that occur\n      within the \"start\" element,\
    \ the content of each \"profile\" element\n      may not contain an optional initialization\
    \ message.\n   Section 5.2 defines a registration template for optional features.\n"
- title: 2.3.1.2 The Start Message
  contents:
  - "2.3.1.2 The Start Message\n   When a BEEP peer wants to create a channel, it\
    \ sends a \"start\"\n   element on channel zero, e.g.,\n       C: MSG 0 1 . 52\
    \ 120\n       C: Content-Type: application/beep+xml\n       C:\n       C: <start\
    \ number='1'>\n       C:    <profile uri='http://iana.org/beep/SASL/OTP' />\n\
    \       C: </start>\n       C: END\n   The \"start\" element has a \"number\"\
    \ attribute, an optional\n   \"serverName\" attribute, and one or more \"profile\"\
    \ elements:\n   o  the \"number\" attribute indicates the channel number (in the\
    \ range\n      1..2147483647) used to identify the channel in future messages;\n\
    \   o  the \"serverName\" attribute, an arbitrary string, indicates the\n    \
    \  desired server name for this BEEP session; and,\n   o  each \"profile\" element\
    \ contained with the \"start\" element has a\n      \"uri\" attribute, an optional\
    \ \"encoding\" attribute, and arbitrary\n      character data as content:\n  \
    \    *  the \"uri\" attribute authoritatively identifies the profile;\n      *\
    \  the \"encoding\" attribute, if present, specifies whether the\n         content\
    \ of the \"profile\" element is represented as a base64-\n         encoded string;\
    \ and,\n      *  the content of the \"profile\" element, if present, must be no\n\
    \         longer than 4K octets in length and specifies an initialization\n  \
    \       message given to the channel as soon as it is created.\n   To avoid conflict\
    \ in assigning channel numbers when requesting the\n   creation of a channel,\
    \ BEEP peers acting in the initiating role use\n   only positive integers that\
    \ are odd-numbered; similarly, BEEP peers\n   acting in the listening role use\
    \ only positive integers that are\n   even-numbered.\n   The \"serverName\" attribute\
    \ for the first successful \"start\" element\n   received by a BEEP peer is meaningful\
    \ for the duration of the BEEP\n   session.  If present, the BEEP peer decides\
    \ whether to operate as the\n   indicated \"serverName\"; if not, an \"error\"\
    \ element is sent in a\n   negative reply.\n   When a BEEP peer receives a \"\
    start\" element on channel zero, it\n   examines each of the proposed profiles,\
    \ and decides whether to use\n   one of them to create the channel.  If so, the\
    \ appropriate \"profile\"\n   element is sent in a positive reply; otherwise,\
    \ an \"error\" element is\n   sent in a negative reply.\n   When creating the\
    \ channel, the value of the \"serverName\" attribute\n   from the first successful\
    \ \"start\" element is consulted to provide\n   configuration information, e.g.,\
    \ the desired server-side certificate\n   when starting the TLS transport security\
    \ profile (Section 3.1).\n   For example, a successful channel creation might\
    \ look like this:\n       C: MSG 0 1 . 52 178\n       C: Content-Type: application/beep+xml\n\
    \       C:\n       C: <start number='1'>\n       C:    <profile uri='http://iana.org/beep/SASL/OTP'\
    \ />\n       C:    <profile uri='http://iana.org/beep/SASL/ANONYMOUS' />\n   \
    \    C: </start>\n       C: END\n       S: RPY 0 1 . 221 87\n       S: Content-Type:\
    \ application/beep+xml\n       S:\n       S: <profile uri='http://iana.org/beep/SASL/OTP'\
    \ />\n       S: END\n   Similarly, an unsuccessful channel creation might look\
    \ like this:\n       C: MSG 0 1 . 52 120\n       C: Content-Type: application/beep+xml\n\
    \       C:\n       C: <start number='2'>\n       C:    <profile uri='http://iana.org/beep/SASL/OTP'\
    \ />\n       C: </start>\n       C: END\n       S: ERR 0 1 . 221 127\n       S:\
    \ Content-Type: application/beep+xml\n       S:\n       S: <error code='501'>number\
    \ attribute\n       S: in &lt;start&gt; element must be odd-valued</error>\n \
    \      S: END\n   Finally, here's an example in which an initialization element\
    \ is\n   exchanged during channel creation:\n       C: MSG 0 1 . 52 158\n    \
    \   C: Content-Type: application/beep+xml\n       C:\n       C: <start number='1'>\n\
    \       C:    <profile uri='http://iana.org/beep/TLS'>\n       C:        <![CDATA[<ready\
    \ />]]>\n       C:    </profile>\n       C: </start>\n       C: END\n       S:\
    \ RPY 0 1 . 110 121\n       S: Content-Type: application/beep+xml\n       S:\n\
    \       S: <profile uri='http://iana.org/beep/TLS'>\n       S:     <![CDATA[<proceed\
    \ />]]>\n       S: </profile>\n       S: END\n"
- title: 2.3.1.3 The Close Message
  contents:
  - "2.3.1.3 The Close Message\n   When a BEEP peer wants to close a channel, it sends\
    \ a \"close\" element\n   on channel zero, e.g.,\n       C: MSG 0 2 . 235 71\n\
    \       C: Content-Type: application/beep+xml\n       C:\n       C: <close number='1'\
    \ code='200' />\n       C: END\n   The \"close\" element has a \"number\" attribute,\
    \ a \"code\" attribute, an\n   optional \"xml:lang\" attribute, and an optional\
    \ textual diagnostic as\n   its content:\n   o  the \"number\" attribute indicates\
    \ the channel number;\n   o  the \"code\" attribute is a three-digit reply code\
    \ meaningful to\n      programs (c.f., Section 8);\n   o  the \"xml:lang\" attribute\
    \ identifies the language that the\n      element's content is written in (the\
    \ value is suggested, but not\n      mandated, by the \"localize\" attribute of\
    \ the \"greeting\" element\n      sent by the remote BEEP peer); and,\n   o  the\
    \ textual diagnostic (which may be multiline) is meaningful to\n      implementers,\
    \ perhaps administrators, and possibly even users, but\n      never programs.\n\
    \   Note that if the textual diagnostic is present, then the \"xml:lang\"\n  \
    \ attribute is absent only if the language indicated as the remote BEEP\n   peer's\
    \ first choice is used.\n   If the value of the \"number\" attribute is zero,\
    \ then the BEEP peer\n   wants to release the BEEP session (c.f., Section 2.4)\
    \ -- otherwise\n   the value of the \"number\" attribute refers to an existing\
    \ channel,\n   and the remainder of this section applies.\n   A BEEP peer may\
    \ send a \"close\" message for a channel whenever all\n   \"MSG\" messages it\
    \ has sent on that channel have been acknowledged.\n   (Acknowledgement consists\
    \ of the first frame of a reply being\n   received by the BEEP peer that sent\
    \ the MSG \"message\".)\n   After sending the \"close\" message, that BEEP peer\
    \ must not send any\n   more \"MSG\" messages on that channel being closed until\
    \ the reply to\n   the \"close\" message has been received (either by an \"error\"\
    \ message\n   rejecting the request to close the channel, or by an \"ok\" message\n\
    \   subsequently followed by the channel being successfully started).\n   NOTE\
    \ WELL: until a positive reply to the request to close the channel\n   is received,\
    \ the BEEP peer must be prepared to process any \"MSG\"\n   messages that it receives\
    \ on that channel.\n   When a BEEP peer receives a \"close\" message for a channel,\
    \ it may, at\n   any time, reject the request to close the channel by sending\
    \ an\n   \"error\" message in a negative reply.\n   Otherwise, before accepting\
    \ the request to close the channel, and\n   sending an \"ok\" message in a positive\
    \ reply, it must:\n   o  finish sending any queued \"MSG\" messages on that channel\
    \ of its\n      own;\n   o  await complete replies to any outstanding \"MSG\"\
    \ messages it has\n      sent on that channel; and,\n   o  finish sending complete\
    \ replies to any outstanding \"MSG\" messages\n      it has received on that channel,\
    \ and ensure that the final frames\n      of those replies have been successfully\
    \ delivered, i.e.,\n      *  for transport mappings that guarantee inter-channel\
    \ ordering of\n         messages, the replies must be sent prior to sending the\
    \ \"ok\"\n         message in a positive reply; otherwise,\n      *  the replies\
    \ must be sent and subsequently acknowledged by the\n         underlying transport\
    \ service prior to sending the \"ok\" message\n         in a positive reply.\n\
    \   Briefly, a successful channel close might look like this:\n       C: MSG 0\
    \ 2 . 235 71\n       C: Content-Type: application/beep+xml\n       C:\n      \
    \ C: <close number='1' code='200' />\n       C: END\n       S: RPY 0 2 . 392 46\n\
    \       S: Content-Type: application/beep+xml\n       S:\n       S: <ok />\n \
    \      S: END\n   Similarly, an unsuccessful channel close might look like this:\n\
    \       C: MSG 0 2 . 235 71\n       C: Content-Type: application/beep+xml\n  \
    \     C:\n       C: <close number='1' code='200' />\n       C: END\n       S:\
    \ ERR 0 2 . 392 79\n       S: Content-Type: application/beep+xml\n       S:\n\
    \       S: <error code='550'>still working</error>\n       S: END\n"
- title: 2.3.1.4 The OK Message
  contents:
  - "2.3.1.4 The OK Message\n   When a BEEP peer agrees to close a channel (or release\
    \ the BEEP\n   session), it sends an \"ok\" element in a positive reply.\n   The\
    \ \"ok\" element has no attributes and no content.\n"
- title: 2.3.1.5 The Error Message
  contents:
  - "2.3.1.5 The Error Message\n   When a BEEP peer declines the creation of a channel,\
    \ it sends an\n   \"error\" element in a negative reply, e.g.,\n       I: MSG\
    \ 0 1 . 52 115\n       I: Content-Type: application/beep+xml\n       I:\n    \
    \   I: <start number='2'>\n       I:    <profile uri='http://iana.org/beep/FOO'\
    \ />\n       I: </start>\n       I: END\n       L: ERR 0 1 . 221 105\n       L:\
    \ Content-Type: application/beep+xml\n       L:\n       L: <error code='550'>all\
    \ requested profiles are\n       L: unsupported</error>\n       L: END\n   The\
    \ \"error\" element has a \"code\" attribute, an optional \"xml:lang\"\n   attribute,\
    \ and an optional textual diagnostic as its content:\n   o  the \"code\" attribute\
    \ is a three-digit reply code meaningful to\n      programs (c.f., Section 8);\n\
    \   o  the \"xml:lang\" attribute identifies the language that the\n      element's\
    \ content is written in (the value is suggested, but not\n      mandated, by the\
    \ \"localize\" attribute of the \"greeting\" element\n      sent by the remote\
    \ BEEP peer); and,\n   o  the textual diagnostic (which may be multiline) is meaningful\
    \ to\n      implementers, perhaps administrators, and possibly even users, but\n\
    \      never programs.\n   Note that if the textual diagnostic is present, then\
    \ the \"xml:lang\"\n   attribute is absent only if the language indicated as the\
    \ remote BEEP\n   peer's first choice is used.\n   In addition, a BEEP peer sends\
    \ an \"error\" element whenever:\n   o  it receives a \"MSG\" message containing\
    \ a poorly-formed or\n      unexpected element;\n   o  it receives a \"MSG\" message\
    \ asking to close a channel (or release\n      the BEEP session) and it declines\
    \ to do so; or\n   o  a BEEP session is established, the BEEP peer is acting in\
    \ the\n      listening role, and that BEEP peer is unavailable (in this case,\n\
    \      the BEEP acting in the listening role does not send a \"greeting\"\n  \
    \    element).\n   In the final case, both BEEP peers terminate the session, and\
    \ it is\n   recommended that a diagnostic entry be logged by both BEEP peers.\n"
- title: 2.4 Session Establishment and Release
  contents:
  - "2.4 Session Establishment and Release\n   When a BEEP session is established,\
    \ each BEEP peer signifies its\n   availability by immediately sending a positive\
    \ reply with a message\n   number of zero on channel zero that contains a \"greeting\"\
    \ element,\n   e.g.,\n       L: <wait for incoming connection>\n       I: <open\
    \ connection>\n       L: RPY 0 0 . 0 110\n       L: Content-Type: application/beep+xml\n\
    \       L:\n       L: <greeting>\n       L:    <profile uri='http://iana.org/beep/TLS'\
    \ />\n       L: </greeting>\n       L: END\n       I: RPY 0 0 . 0 52\n       I:\
    \ Content-Type: application/beep+xml\n       I:\n       I: <greeting />\n    \
    \   I: END\n   Alternatively, if the BEEP peer acting in the listening role is\n\
    \   unavailable, it sends a negative reply, e.g.,\n       L: <wait for incoming\
    \ connection>\n       I: <open connection>\n       L: ERR 0 0 . 0 60\n       L:\
    \ Content-Type: application/beep+xml\n       L:\n       L: <error code='421' />\n\
    \       L: END\n       I: RPY 0 0 . 0 52\n       I: Content-Type: application/beep+xml\n\
    \       I:\n       I: <greeting />\n       I: END\n       I: <close connection>\n\
    \       L: <close connection>\n       L: <wait for next connection>\n   and the\
    \ \"greeting\" element sent by the BEEP peer acting in the\n   initiating role\
    \ is ignored.  It is recommended that a diagnostic\n   entry be logged by both\
    \ BEEP peers.\n   Note that both of these examples imply that the BEEP peer in\
    \ the\n   initiating role waits until the BEEP peer in the listening role sends\n\
    \   its greeting -- this is an artifact of the presentation; in fact,\n   both\
    \ BEEP peers send their replies independently.\n   When a BEEP peer wants to release\
    \ the BEEP session, it sends a\n   \"close\" element with a zero-valued \"number\"\
    \ attribute on channel\n   zero.  The other BEEP peer indicates its willingness\
    \ by sending an\n   \"ok\" element in a positive reply, e.g.,\n       C: MSG 0\
    \ 1 . 52 60\n       C: Content-Type: application/beep+xml\n       C:\n       C:\
    \ <close code='200' />\n       C: END\n       S: RPY 0 1 . 264 46\n       S: Content-Type:\
    \ application/beep+xml\n       S:\n       S: <ok />\n       S: END\n       I:\
    \ <close connection>\n       L: <close connection>\n       L: <wait for next connection>\n\
    \   Alternatively, if the other BEEP doesn't want to release the BEEP\n   session,\
    \ the exchange might look like this:\n       C: MSG 0 1 . 52 60\n       C: Content-Type:\
    \ application/beep+xml\n       C:\n       C: <close code='200' />\n       C: END\n\
    \       S: ERR 0 1 . 264 79\n       S: Content-Type: application/beep+xml\n  \
    \     S:\n       S: <error code='550'>still working</error>\n       S: END\n \
    \  If session release is declined, the BEEP session should not be\n   terminated,\
    \ if possible.\n"
- title: 2.5 Transport Mappings
  contents:
  - "2.5 Transport Mappings\n   All transport interactions occur in the context of\
    \ a session -- a\n   mapping onto a particular transport service.  Accordingly,\
    \ this memo\n   defines the requirements that must be satisfied by any document\n\
    \   describing how a particular transport service realizes a BEEP\n   session.\n"
- title: 2.5.1 Session Management
  contents:
  - "2.5.1 Session Management\n   A BEEP session is connection-oriented.  A mapping\
    \ document must\n   define:\n   o  how a BEEP session is established;\n   o  how\
    \ a BEEP peer is identified as acting in the listening role;\n   o  how a BEEP\
    \ peer is identified as acting in the initiating role;\n   o  how a BEEP session\
    \ is released; and,\n   o  how a BEEP session is terminated.\n"
- title: 2.5.2 Message Exchange
  contents:
  - "2.5.2 Message Exchange\n   A BEEP session is message-oriented.  A mapping document\
    \ must define:\n   o  how messages are reliably sent and received;\n   o  how\
    \ messages on the same channel are received in the same order as\n      they were\
    \ sent; and,\n   o  how messages on different channels are sent without ordering\n\
    \      constraint.\n"
- title: 2.6 Asynchrony
  contents:
  - "2.6 Asynchrony\n   BEEP accommodates asynchronous interactions, both within a\
    \ single\n   channel and between separate channels.  This feature allows\n   pipelining\
    \ (intra-channel) and parallelism (inter-channel).\n"
- title: 2.6.1 Within a Single Channel
  contents:
  - "2.6.1 Within a Single Channel\n   A BEEP peer acting in the client role may send\
    \ multiple \"MSG\"\n   messages on the same channel without waiting to receive\
    \ the\n   corresponding replies.  This provides pipelining within a single\n \
    \  channel.\n   A BEEP peer acting in the server role must process all \"MSG\"\
    \ messages\n   for a given channel in the same order as they are received.  As\
    \ a\n   consequence, the BEEP peer must generate replies in the same order as\n\
    \   the corresponding \"MSG\" messages are received on a given channel.\n   Note\
    \ that in one-to-many exchanges (c.f., Section 2.1.1), the reply\n   to the \"\
    MSG\" message consists of zero or more \"ANS\" messages followed\n   by a \"NUL\"\
    \ message.  In this style of exchange, the \"ANS\" messages\n   comprising the\
    \ reply may be interleaved.  When the BEEP peer acting\n   in the server role\
    \ signifies the end of the reply by generating the\n   \"NUL\" message, it may\
    \ then process the next \"MSG\" message received\n   for that channel.\n"
- title: 2.6.2 Between Different Channels
  contents:
  - "2.6.2 Between Different Channels\n   A BEEP peer acting in the client role may\
    \ send multiple \"MSG\"\n   messages on different channels without waiting to\
    \ receive the\n   corresponding replies.  The channels operate independently,\
    \ in\n   parallel.\n   A BEEP peer acting in the server role may process \"MSG\"\
    \ messages\n   received on different channels in any order it chooses.  As a\n\
    \   consequence, although the replies for a given channel appear to be\n   generated\
    \ in the same order in which the corresponding \"MSG\" messages\n   are received,\
    \ there is no ordering constraint for replies on\n   different channels.\n"
- title: 2.6.3 Pre-emptive Replies
  contents:
  - "2.6.3 Pre-emptive Replies\n   A BEEP peer acting in the server role may send\
    \ a negative reply\n   before it receives the final \"MSG\" frame of a message.\
    \  If it does\n   so, that BEEP peer is obliged to ignore any subsequent \"MSG\"\
    \ frames\n   for that message, up to and including the final \"MSG\" frame.\n\
    \   If a BEEP peer acting in the client role receives a negative reply\n   before\
    \ it sends the final \"MSG\" frame for a message, then it is\n   required to send\
    \ a \"MSG\" frame with a continuation status of complete\n   (\".\") and having\
    \ a zero-length payload.\n"
- title: 2.6.4 Interference
  contents:
  - "2.6.4 Interference\n   If the processing of a particular message has sequencing\
    \ impacts on\n   other messages (either intra-channel or inter-channel), then\
    \ the\n   corresponding profile should define this behavior, e.g., a profile\n\
    \   whose messages alter the underlying transport mapping.\n"
- title: 2.7 Peer-to-Peer Behavior
  contents:
  - "2.7 Peer-to-Peer Behavior\n   BEEP is peer-to-peer -- as such both peers must\
    \ be prepared to\n   receive all messages defined in this memo.  Accordingly,\
    \ an\n   initiating BEEP peer capable of acting only in the client role must\n\
    \   behave gracefully if it receives a \"MSG\" message.  Accordingly, all\n  \
    \ profiles must provide an appropriate error message for replying to\n   unexpected\
    \ \"MSG\" messages.\n   As a consequence of the peer-to-peer nature of BEEP, message\
    \ numbers\n   are unidirectionally-significant.  That is, the message numbers\
    \ in\n   \"MSG\" messages sent by a BEEP peer acting in the initiating role are\n\
    \   unrelated to the message numbers in \"MSG\" messages sent by a BEEP\n   peer\
    \ acting in the listening role.\n   For example, these two messages\n       I:\
    \ MSG 0 1 . 52 120\n       I: Content-Type: application/beep+xml\n       I:\n\
    \       I: <start number='1'>\n       I:    <profile uri='http://iana.org/beep/SASL/OTP'\
    \ />\n       I: </start>\n       I: END\n       L: MSG 0 1 . 221 116\n       L:\
    \ Content-Type: application/beep+xml\n       L:\n       L: <start number='2'>\n\
    \       L:    <profile uri='http://iana.org/beep/APEX' />\n       L: </start>\n\
    \       L: END\n   refer to different messages sent on channel zero.\n"
- title: 3. Transport Security
  contents:
  - "3. Transport Security\n   When a BEEP session is established, plaintext transfer,\
    \ without\n   privacy, is provided.  Accordingly, transport security in BEEP is\n\
    \   achieved using an initial tuning profile.\n   This document defines one profile:\n\
    \   o  the TLS transport security profile, based on TLS version one [3].\n   Other\
    \ profiles may be defined and deployed on a bilateral basis.\n   Note that because\
    \ of their intimate relationship with the transport\n   service, a given transport\
    \ security profile tends to be relevant to a\n   single transport mapping (c.f.,\
    \ Section 2.5).\n   When a channel associated with transport security begins the\n\
    \   underlying negotiation process, all channels (including channel zero)\n  \
    \ are closed on the BEEP session.  Accordingly, upon completion of the\n   negotiation\
    \ process, regardless of its outcome, a new greeting is\n   issued by both BEEP\
    \ peers.  (If the negotiation process fails, then\n   either BEEP peer may instead\
    \ terminate the session, and it is\n   recommended that a diagnostic entry be\
    \ logged.)\n   A BEEP peer may choose to issue different greetings based on whether\n\
    \   privacy is in use, e.g.,\n       L: <wait for incoming connection>\n     \
    \  I: <open connection>\n       L: RPY 0 0 . 0 110\n       L: Content-Type: application/beep+xml\n\
    \       L:\n       L: <greeting>\n       L:    <profile uri='http://iana.org/beep/TLS'\
    \ />\n       L: </greeting>\n       L: END\n       I: RPY 0 0 . 0 52\n       I:\
    \ Content-Type: application/beep+xml\n       I:\n       I: <greeting />\n    \
    \   I: END\n       I: MSG 0 1 . 52 158\n       I: Content-Type: application/beep+xml\n\
    \       I:\n       I: <start number='1'>\n       I:    <profile uri='http://iana.org/beep/TLS'>\n\
    \       I:        <![CDATA[<ready />]]>\n       I:    </profile>\n       I: </start>\n\
    \       I: END\n       L: RPY 0 1 . 110 121\n       L: Content-Type: application/beep+xml\n\
    \       L:\n       L: <profile uri='http://iana.org/beep/TLS'>\n       L:    \
    \ <![CDATA[<proceed />]]>\n       L: </profile>\n       L: END\n           ...\
    \ successful transport security negotiation ...\n       L: RPY 0 0 . 0 221\n \
    \      L: Content-Type: application/beep+xml\n       L:\n       L: <greeting>\n\
    \       L:    <profile uri='http://iana.org/beep/SASL/ANONYMOUS' />\n       L:\
    \    <profile uri='http://iana.org/beep/SASL/OTP' />\n       L:    <profile uri='http://iana.org/beep/APEX'\
    \ />\n       L: </greeting>\n       L: END\n       I: RPY 0 0 . 0 52\n       I:\
    \ Content-Type: application/beep+xml\n       I:\n       I: <greeting />\n    \
    \   I: END\n   Of course, not all BEEP peers need be as single-minded:\n     \
    \  L: <wait for incoming connection>\n       I: <open connection>\n       L: RPY\
    \ 0 0 . 0 268\n       L: Content-Type: application/beep+xml\n       L:\n     \
    \  L: <greeting>\n       L:    <profile uri='http://iana.org/beep/SASL/ANONYMOUS'\
    \ />\n       L:    <profile uri='http://iana.org/beep/SASL/OTP' />\n       L:\
    \    <profile uri='http://iana.org/beep/APEX' />\n       L:    <profile uri='http://iana.org/beep/TLS'\
    \ />\n       L: </greeting>\n       L: END\n       I: RPY 0 0 . 0 52\n       I:\
    \ Content-Type: application/beep+xml\n       I:\n       I: <greeting />\n    \
    \   I: END\n       I: MSG 0 1 . 52 158\n       I: Content-Type: application/beep+xml\n\
    \       I:\n       I: <start number='1'>\n       I:    <profile uri='http://iana.org/beep/TLS'>\n\
    \       I:        <![CDATA[<ready />]]>\n       I:    </profile>\n       I: </start>\n\
    \       I: END\n       L: RPY 0 1 . 268 121\n       L: Content-Type: application/beep+xml\n\
    \       L:\n       L: <profile uri='http://iana.org/beep/TLS'>\n       L:    \
    \ <![CDATA[<proceed />]]>\n       L: </profile>\n       L: END\n           ...\
    \ failed transport security negotiation ...\n       L: RPY 0 0 . 0 268\n     \
    \  L: Content-Type: application/beep+xml\n       L:\n       L: <greeting>\n  \
    \     L:    <profile uri='http://iana.org/beep/SASL/ANONYMOUS' />\n       L: \
    \   <profile uri='http://iana.org/beep/SASL/OTP' />\n       L:    <profile uri='http://iana.org/beep/APEX'\
    \ />\n       L:    <profile uri='http://iana.org/beep/TLS' />\n       L: </greeting>\n\
    \       L: END\n       I: RPY 0 0 . 0 52\n       I: Content-Type: application/beep+xml\n\
    \       I:\n       I: <greeting />\n       I: END\n"
- title: 3.1 The TLS Transport Security Profile
  contents:
  - "3.1 The TLS Transport Security Profile\n   Section 6.2 contains the registration\
    \ for this profile.\n"
- title: 3.1.1 Profile Identification and Initialization
  contents:
  - "3.1.1 Profile Identification and Initialization\n   The TLS transport security\
    \ profile is identified as:\n       http://iana.org/beep/TLS\n   in the BEEP \"\
    profile\" element during channel creation.\n   During channel creation, the corresponding\
    \ \"profile\" element in the\n   BEEP \"start\" element may contain a \"ready\"\
    \ element.  If channel\n   creation is successful, then before sending the corresponding\
    \ reply,\n   the BEEP peer processes the \"ready\" element and includes the\n\
    \   resulting response in the reply, e.g.,\n       C: MSG 0 1 . 52 158\n     \
    \  C: Content-Type: application/beep+xml\n       C:\n       C: <start number='1'>\n\
    \       C:    <profile uri='http://iana.org/beep/TLS'>\n       C:        <![CDATA[<ready\
    \ />]]>\n       C:    </profile>\n       C: </start>\n       C: END\n       S:\
    \ RPY 0 1 . 110 121\n       S: Content-Type: application/beep+xml\n       S:\n\
    \       S: <profile uri='http://iana.org/beep/TLS'>\n       S:     <![CDATA[<proceed\
    \ />]]>\n       S: </profile>\n       S: END\n   Note that it is possible for\
    \ the channel to be created, but for the\n   encapsulated operation to fail, e.g.,\n\
    \       C: MSG 0 1 . 52 173\n       C: Content-Type: application/beep+xml\n  \
    \     C:\n       C: <start number='1'>\n       C:    <profile uri='http://iana.org/beep/TLS'>\n\
    \       C:        <![CDATA[<ready version=\"oops\" />]]>\n       C:    </profile>\n\
    \       C: </start>\n       C: END\n       S: RPY 0 1 . 110 193\n       S: Content-Type:\
    \ application/beep+xml\n       S:\n       S: <profile uri='http://iana.org/beep/TLS'>\n\
    \       S:     <![CDATA[<error code='501'>version attribute\n       S: poorly\
    \ formed in &lt;ready&gt; element</error>]]>\n       S: </profile>\n       S:\
    \ END\n   In this case, a positive reply is sent (as channel creation\n   succeeded),\
    \ but the encapsulated response contains an indication as\n   to why the operation\
    \ failed.\n"
- title: 3.1.2 Message Syntax
  contents:
  - "3.1.2 Message Syntax\n   Section 7.2 defines the messages that are used in the\
    \ TLS transport\n   security profile.\n"
- title: 3.1.3 Message Semantics
  contents:
  - '3.1.3 Message Semantics

    '
- title: 3.1.3.1 The Ready Message
  contents:
  - "3.1.3.1 The Ready Message\n   The \"ready\" element has an optional \"version\"\
    \ attribute and no\n   content:\n   o  the \"version\" element defines the earliest\
    \ version of TLS\n      acceptable for use.\n   When a BEEP peer sends the \"\
    ready\" element, it must not send any\n   further traffic on the underlying transport\
    \ service until a\n   corresponding reply (\"proceed\" or \"error\") is received;\
    \ similarly,\n   the receiving BEEP peer must wait until any pending replies have\
    \ been\n   generated and sent before it processes a \"ready\" element.\n"
- title: 3.1.3.2 The Proceed Message
  contents:
  - "3.1.3.2 The Proceed Message\n   The \"proceed\" element has no attributes and\
    \ no content.  It is sent\n   as a reply to the \"ready\" element.\n   When a\
    \ BEEP peer receives the \"ready\" element, it must not send any\n   further traffic\
    \ on the underlying transport service until it\n   generates a corresponding reply.\
    \  If the BEEP peer decides to allow\n   transport security negotiation, it implicitly\
    \ closes all channels\n   (including channel zero), and sends the \"proceed\"\
    \ element, and awaits\n   the underlying negotiation process for transport security.\n\
    \   When a BEEP peer receives a \"proceed\" element in reply to its \"ready\"\n\
    \   message, it implicitly closes all channels (including channel zero),\n   and\
    \ immediately begins the underlying negotiation process for\n   transport security.\n"
- title: 4. User Authentication
  contents:
  - "4. User Authentication\n   When a BEEP session is established, anonymous access,\
    \ without trace\n   information, is provided.  Accordingly, user authentication\
    \ in BEEP\n   is achieved using an initial tuning profile.\n   This document defines\
    \ a family of profiles based on SASL mechanisms:\n   o  each mechanism in the\
    \ IANA SASL registry [15] has an associated\n      profile.\n   Other profiles\
    \ may be defined and deployed on a bilateral basis.\n   Whenever a successful\
    \ authentication occurs, on any channel, the\n   authenticated identity is updated\
    \ for all existing and future\n   channels on the BEEP session; further, no additional\
    \ attempts at\n   authentication are allowed.\n   Note that regardless of transport\
    \ security and user authentication,\n   authorization is an internal matter for\
    \ each BEEP peer.  As such,\n   each peer may choose to restrict the operations\
    \ it allows based on\n   the authentication credentials provided (i.e., unauthorized\n\
    \   operations might be rejected with error code 530).\n"
- title: 4.1 The SASL Family of Profiles
  contents:
  - "4.1 The SASL Family of Profiles\n   Section 6.3 contains the registration for\
    \ this profile.\n   Note that SASL may provide both user authentication and transport\n\
    \   security.  Once transport security is successfully negotiated for a\n   BEEP\
    \ session, then a SASL security layer must not be negotiated;\n   similarly, once\
    \ any SASL negotiation is successful, a transport\n   security profile must not\
    \ begin its underlying negotiation process.\n   Section 4 of the SASL specification\
    \ [4] requires the following\n   information be supplied by a protocol definition:\n\
    \   service name: \"beep\"\n   initiation sequence: Creating a channel using a\
    \ BEEP profile\n      corresponding to a SASL mechanism starts the exchange. \
    \ An\n      optional parameter corresponding to the \"initial response\" sent\
    \ by\n      the client is carried within a \"blob\" element during channel\n \
    \     creation.\n   exchange sequence: \"Challenges\" and \"responses\" are carried\
    \ in\n      exchanges of the \"blob\" element.  The \"status\" attribute of the\n\
    \      \"blob\" element is used both by a server indicating a successful\n   \
    \   completion of the exchange, and a client aborting the exchange,\n      The\
    \ server indicates failure of the exchange by sending an \"error\"\n      element.\n\
    \   security layer negotiation: When a security layer starts negotiation,\n  \
    \    all channels (including channel zero) are closed on the BEEP\n      session.\
    \  Accordingly, upon completion of the negotiation process,\n      regardless\
    \ of its outcome, a new greeting is issued by both BEEP\n      peers.\n      If\
    \ a security layer is successfully negotiated, it takes effect\n      immediately\
    \ following the message that concludes the server's\n      successful completion\
    \ reply.\n   use of the authorization identity: This is made available to all\n\
    \      channels for the duration of the BEEP session.\n"
- title: 4.1.1 Profile Identification and Initialization
  contents:
  - "4.1.1 Profile Identification and Initialization\n   Each SASL mechanism registered\
    \ with the IANA is identified as:\n       http://iana.org/beep/SASL/mechanism\n\
    \   where \"MECHANISM\" is the token assigned to that mechanism by the\n   IANA.\n\
    \   Note that during channel creation, a BEEP peer may provide multiple\n   profiles\
    \ to the remote peer, e.g.,\n       C: MSG 0 1 . 52 178\n       C: Content-Type:\
    \ application/beep+xml\n       C:\n       C: <start number='1'>\n       C:   \
    \ <profile uri='http://iana.org/beep/SASL/ANONYMOUS' />\n       C:    <profile\
    \ uri='http://iana.org/beep/SASL/OTP' />\n       C: </start>\n       C: END\n\
    \       S: RPY 0 1 . 221 87\n       S: Content-Type: application/beep+xml\n  \
    \     S:\n       S: <profile uri='http://iana.org/beep/SASL/OTP' />\n       S:\
    \ END\n   During channel creation, the corresponding \"profile\" element in the\n\
    \   BEEP \"start\" element may contain a \"blob\" element.  Note that it is\n\
    \   possible for the channel to be created, but for the encapsulated\n   operation\
    \ to fail, e.g.,\n       C: MSG 0 1 . 52 183\n       C: Content-Type: application/beep+xml\n\
    \       C:\n       C: <start number='1'>\n       C:    <profile uri='http://iana.org/beep/SASL/OTP'>\n\
    \       C:        <![CDATA[<blob>AGJsb2NrbWFzdGVy</blob>]]>\n       C:    </profile>\n\
    \       C: </start>\n       C: END\n       S: RPY 0 1 . 221 178\n       S: Content-Type:\
    \ application/beep+xml\n       S:\n       S: <profile uri='http://iana.org/beep/SASL/OTP'>\n\
    \       S:     <![CDATA[<error code='534'>authentication mechanism is\n      \
    \ S: too weak</error>]]>\n       S: </profile>\n       S: END\n   In this case,\
    \ a positive reply is sent (as channel creation\n   succeeded), but the encapsulated\
    \ response contains an indication as\n   to why the operation failed.\n   Otherwise,\
    \ the server sends a challenge (or signifies success), e.g.,\n       C: MSG 0\
    \ 1 . 52 183\n       C: Content-Type: application/beep+xml\n       C:\n      \
    \ C: <start number='1'>\n       C:    <profile uri='http://iana.org/beep/SASL/OTP'>\n\
    \       C:        <![CDATA[<blob>AGJsb2NrbWFzdGVy</blob>]]>\n       C:    </profile>\n\
    \       C: </start>\n       C: END\n       S: RPY 0 1 . 221 171\n       S: Content-Type:\
    \ application/beep+xml\n       S:\n       S: <profile uri='http://iana.org/beep/SASL/OTP'>\n\
    \       S:    <![CDATA[<blob>b3RwLXNoYTEgOTk5NyBwaXh5bWlzYXM4NTgwNSBleHQ=\n  \
    \                                                            </blob>]]>\n    \
    \   S: </profile>\n       S: END\n   Note that this example implies that the \"\
    blob\" element in the\n   server's reply appears on two lines -- this is an artifact\
    \ of the\n   presentation; in fact, only one line is used.\n   If a challenge\
    \ is received, then the client responds and awaits\n   another reply, e.g.,\n\
    \       C: MSG 1 0 . 0 97\n       C: Content-Type: application/beep+xml\n    \
    \   C:\n       C: <blob>d29yZDpmZXJuIGhhbmcgYnJvdyBib25nIGhlcmQgdG9n</blob>\n\
    \       C: END\n       S: RPY 1 0 . 0 66\n       S: Content-Type: application/beep+xml\n\
    \       S:\n       S: <blob status='complete' />\n       S: END\n   Of course,\
    \ the client could abort the authentication process by\n   sending \"<blob status='abort'\
    \ />\" instead.\n   Alternatively, the server might reject the response with an\
    \ error:\n   e.g.,\n       C: MSG 1 0 . 0 97\n       C: Content-Type: application/beep+xml\n\
    \       C:\n       C: <blob>d29yZDpmZXJuIGhhbmcgYnJvdyBib25nIGhlcmQgdG9n</blob>\n\
    \       C: END\n       S: ERR 1 0 . 0 60\n       S: Content-Type: application/beep+xml\n\
    \       S:\n       S: <error code='535' />\n       S: END\n   Finally, depending\
    \ on the SASL mechanism, an initialization element\n   may be exchanged unidirectionally\
    \ during channel creation, e.g.,\n       C: MSG 0 1 . 52 125\n       C: Content-Type:\
    \ application/beep+xml\n       C:\n       C: <start number='1'>\n       C:   \
    \ <profile uri='http://iana.org/beep/SASL/CRAM-MD5' />\n       C: </start>\n \
    \      C: END\n       S: RPY 0 1 . 221 185\n       S: Content-Type: application/beep+xml\n\
    \       S:\n       S: <profile uri='http://iana.org/beep/SASL/CRAM-MD5'>\n   \
    \    S: <![CDATA[<blob>PDE4OTYuNjk3MTcwOTUyQHBvc3RvZmZpY2UucmVzdG9uLm1\n     \
    \                                                jaS5uZXQ+</blob>]]>\n       S:\
    \ </profile>\n       S: END\n   Note that this example implies that the \"blob\"\
    \ element in the\n   server's reply appears on two lines -- this is an artifact\
    \ of the\n   presentation; in fact, only one line is used.\n"
- title: 4.1.2 Message Syntax
  contents:
  - "4.1.2 Message Syntax\n   Section 7.3 defines the messages that are used for each\
    \ profile in\n   the SASL family.\n   Note that because many SASL mechanisms exchange\
    \ binary data, the\n   content of the \"blob\" element is always a base64-encoded\
    \ string.\n"
- title: 4.1.3 Message Semantics
  contents:
  - "4.1.3 Message Semantics\n   The \"blob\" element has an optional \"status\" attribute,\
    \ and arbitrary\n   octets as its content:\n   o  the \"status\" attribute, if\
    \ present, takes one of three values:\n      abort: used by a client to indicate\
    \ that it is aborting the\n         authentication process;\n      complete: used\
    \ by a server to indicate that the exchange is\n         complete and successful;\
    \ or,\n      continue: used by either a client or server, otherwise.\n   Finally,\
    \ note that SASL's EXTERNAL mechanism works with an \"external\n   authentication\"\
    \ service, which is provided by one of:\n   o  a transport security profile, capable\
    \ of providing authentication\n      information (e.g., Section 3.1), being active\
    \ on the connection;\n   o  a network service, capable of providing strong authentication\n\
    \      (e.g., IPSec [12]), underlying the connection; or,\n   o  a locally-defined\
    \ security service.\n   For authentication to succeed, two conditions must hold:\n\
    \   o  an external authentication service must be active; and,\n   o  if present,\
    \ the authentication identity must be consistent with\n      the credentials provided\
    \ by the external authentication service\n      (if the authentication identity\
    \ is empty, then an authorization\n      identity is automatically derived from\
    \ the credentials provided by\n      the external authentication service).\n"
- title: 5. Registration Templates
  contents:
  - '5. Registration Templates

    '
- title: 5.1 Profile Registration Template
  contents:
  - "5.1 Profile Registration Template\n   When a profile is registered, the following\
    \ information is supplied:\n   Profile Identification: specify a URI [10] that\
    \ authoritatively\n      identifies this profile.\n   Message Exchanged during\
    \ Channel Creation: specify the datatypes that\n      may be exchanged during\
    \ channel creation.\n   Messages starting one-to-one exchanges: specify the datatypes\
    \ that\n      may be present when an exchange starts.\n   Messages in positive\
    \ replies: specify the datatypes that may be\n      present in a positive reply.\n\
    \   Messages in negative replies: specify the datatypes that may be\n      present\
    \ in a negative reply.\n   Messages in one-to-many exchanges: specify the datatypes\
    \ that may be\n      present in a one-to-many exchange.\n   Message Syntax: specify\
    \ the syntax of the datatypes exchanged by the\n      profile.\n   Message Semantics:\
    \ specify the semantics of the datatypes exchanged\n      by the profile.\n  \
    \ Contact Information: specify the postal and electronic contact\n      information\
    \ for the author of the profile.\n"
- title: 5.2 Feature Registration Template
  contents:
  - "5.2 Feature Registration Template\n   When a feature for the channel management\
    \ profile is registered, the\n   following information is supplied:\n   Feature\
    \ Identification: specify a string that identifies this\n      feature.  Unless\
    \ the feature is registered with the IANA, the\n      feature's identification\
    \ must start with \"x-\".\n   Feature Semantics: specify the semantics of the\
    \ feature.\n   Contact Information: specify the postal and electronic contact\n\
    \      information for the author of the feature.\n"
- title: 6. Initial Registrations
  contents:
  - '6. Initial Registrations

    '
- title: '6.1 Registration: BEEP Channel Management'
  contents:
  - "6.1 Registration: BEEP Channel Management\n   Profile Identification: not applicable\n\
    \   Messages exchanged during Channel Creation: not applicable\n   Messages starting\
    \ one-to-one exchanges: \"start\" or \"close\"\n   Messages in positive replies:\
    \ \"greeting\", \"profile\", or \"ok\"\n   Messages in negative replies: \"error\"\
    \n   Messages in one-to-many exchanges: none\n   Message Syntax: c.f., Section\
    \ 7.1\n   Message Semantics: c.f., Section 2.3.1\n   Contact Information: c.f.,\
    \ the \"Author's Address\" section of this\n      memo\n"
- title: '6.2 Registration: TLS Transport Security Profile'
  contents:
  - "6.2 Registration: TLS Transport Security Profile\n   Profile Identification:\
    \ http://iana.org/beep/TLS\n   Messages exchanged during Channel Creation: \"\
    ready\"\n   Messages starting one-to-one exchanges: \"ready\"\n   Messages in\
    \ positive replies: \"proceed\"\n   Messages in negative replies: \"error\"\n\
    \   Messages in one-to-many exchanges: none\n   Message Syntax: c.f., Section\
    \ 7.2\n   Message Semantics: c.f., Section 3.1.3\n   Contact Information: c.f.,\
    \ the \"Author's Address\" section of this\n      memo\n"
- title: '6.3 Registration: SASL Family of Profiles'
  contents:
  - "6.3 Registration: SASL Family of Profiles\n   Profile Identification: http://iana.org/beep/SASL/mechanism,\
    \ where\n      \"mechanism\" is a token registered with the IANA\n   Messages\
    \ exchanged during Channel Creation: \"blob\"\n   Messages starting one-to-one\
    \ exchanges: \"blob\"\n   Messages in positive replies: \"blob\"\n   Messages\
    \ in negative replies: \"error\"\n   Messages in one-to-many exchanges: none\n\
    \   Message Syntax: c.f., Section 7.3\n   Message Semantics: c.f., Section 4.1.3\n\
    \   Contact Information: c.f., the \"Author's Address\" section of this\n    \
    \  memo\n"
- title: '6.4 Registration: application/beep+xml'
  contents:
  - "6.4 Registration: application/beep+xml\n   MIME media type name: application\n\
    \   MIME subtype name: beep+xml\n   Required parameters: none\n   Optional parameters:\
    \ charset (defaults to \"UTF-8\" [13])\n   Encoding considerations: This media\
    \ type may contain binary content;\n      accordingly, when used over a transport\
    \ that does not permit\n      binary transfer, an appropriate encoding must be\
    \ applied\n   Security considerations: none, per se; however, any BEEP profile\n\
    \      which uses this media type must describe its relevant security\n      considerations\n\
    \   Interoperability considerations: n/a\n   Published specification: This media\
    \ type is a proper subset of the\n      the XML 1.0 specification [2].  Two restrictions\
    \ are made.\n      First, no entity references other than the five predefined\
    \ general\n      entities references (\"&amp;\", \"&lt;\", \"&gt;\", \"&apos;\"\
    , and\n      \"&quot;\") and numeric entity references may be present.\n     \
    \ Second, neither the \"XML\" declaration (e.g., <?xml version=\"1.0\"\n     \
    \ ?>) nor the \"DOCTYPE\" declaration (e.g., <!DOCTYPE ...>) may be\n      present.\
    \  (Accordingly, if another character set other than UTF-8\n      is desired,\
    \ then the \"charset\" parameter must be present.)\n      All other XML 1.0 instructions\
    \ (e.g., CDATA blocks, processing\n      instructions, and so on) are allowed.\n\
    \   Applications which use this media type: any BEEP profile wishing to\n    \
    \  make use of this XML 1.0 subset\n   Additional Information: none\n   Contact\
    \ for further information: c.f., the \"Author's Address\" section\n      of this\
    \ memo\n   Intended usage: limited use\n   Author/Change controller: the IESG\n"
- title: 7. DTDs
  contents:
  - '7. DTDs

    '
- title: 7.1 BEEP Channel Management DTD
  contents:
  - "7.1 BEEP Channel Management DTD\n   <!--\n     DTD for BEEP Channel Management,\
    \ as of 2000-10-29\n     Refer to this DTD as:\n       <!ENTITY % BEEP PUBLIC\
    \ \"-//IETF//DTD BEEP//EN\"\n                  \"http://xml.resource.org/profiles/BEEP/beep.dtd\"\
    >\n       %BEEP;\n     -->\n   <!--\n     DTD data types:\n           entity \
    \       syntax/reference     example\n           ======        ================\
    \     =======\n       a channel number\n           CHAN          1..2147483647\
    \        1\n       authoritative profile identification\n           URI      \
    \    c.f., [RFC-2396]      http://invisible.net/\n       one or more feature tokens,\
    \ separated by space\n           FTRS         NMTOKENS              \"magic\"\n\
    \       a language tag\n           LANG         c.f., [RFC-1766]      \"en\",\
    \ \"en-US\", etc.\n       zero or more language tags\n           LOCS        \
    \ NMTOKENS              \"en-US\"\n       a 3-digit reply code\n           XYZ\
    \           [1-5][0-9][0-9]      500\n   -->\n   <!ENTITY % CHAN       \"CDATA\"\
    >\n   <!ENTITY % URI        \"CDATA\">\n   <!ENTITY % FTRS       \"NMTOKENS\"\
    >\n   <!ENTITY % LANG       \"NMTOKEN\">\n   <!ENTITY % LOCS       \"NMTOKEN\"\
    >\n   <!ENTITY % XYZ        \"CDATA\">\n   <!--\n     BEEP messages, exchanged\
    \ as application/beep+xml\n        role       MSG         RPY         ERR\n  \
    \     =======     ===         ===         ===\n       I and L                \
    \ greeting    error\n       I or L      start       profile     error\n      \
    \ I or L      close       ok          error\n     -->\n   <!ELEMENT greeting \
    \   (profile)*>\n   <!ATTLIST greeting\n             features    %FTRS;      \
    \      #IMPLIED\n             localize    %LOCS;            \"i-default\">\n \
    \  <!ELEMENT start       (profile)+>\n   <!ATTLIST start\n             number\
    \      %CHAN;             #REQUIRED\n             serverName  CDATA          \
    \    #IMPLIED>\n   <!-- profile element is empty if contained in a greeting -->\n\
    \   <!ELEMENT profile     (#PCDATA)>\n   <!ATTLIST profile\n             uri \
    \        %URI;              #REQUIRED\n             encoding    (none|base64)\
    \      \"none\">\n   <!ELEMENT close       (#PCDATA)>\n   <!ATTLIST close\n  \
    \           number      %CHAN;             \"0\"\n             code        %XYZ;\
    \              #REQUIRED\n             xml:lang    %LANG;             #IMPLIED>\n\
    \   <!ELEMENT ok          EMPTY>\n   <!ELEMENT error       (#PCDATA)>\n   <!ATTLIST\
    \ error\n             code        %XYZ;              #REQUIRED\n             xml:lang\
    \    %LANG;             #IMPLIED>\n"
- title: 7.2 TLS Transport Security Profile DTD
  contents:
  - "7.2 TLS Transport Security Profile DTD\n   <!--\n     DTD for the TLS Transport\
    \ Security Profile, as of 2000-09-04\n     Refer to this DTD as:\n       <!ENTITY\
    \ % TLS PUBLIC \"-//IETF//DTD TLS//EN\"\n                  \"http://xml.resource.org/profiles/TLS/tls.dtd\"\
    >\n       %TLS;\n     -->\n   <!--\n     TLS messages, exchanged as application/beep+xml\n\
    \        role       MSG         RPY         ERR\n       ======      ===      \
    \   ===         ===\n       I or L      ready       proceed     error\n     -->\n\
    \   <!ELEMENT ready       EMPTY>\n   <!ATTLIST ready\n             version   \
    \  CDATA              \"1\">\n   <!ELEMENT proceed     EMPTY>\n"
- title: 7.3 SASL Family of Profiles DTD
  contents:
  - "7.3 SASL Family of Profiles DTD\n   <!--\n     DTD for the SASL Family of Profiles,\
    \ as of 2000-09-04\n     Refer to this DTD as:\n       <!ENTITY % SASL PUBLIC\
    \ \"-//IETF//DTD SASL//EN\"\n                  \"http://xml.resource.org/profiles/sasl/sasl.dtd\"\
    >\n       %SASL;\n     -->\n   <!--\n     SASL messages, exchanged as application/beep+xml\n\
    \        role       MSG         RPY         ERR\n       ======      ===      \
    \   ===         ===\n       I or L      blob        blob        error\n     -->\n\
    \   <!ELEMENT blob        (#PCDATA)>\n   <!ATTLIST blob\n             xml:space\
    \   (default|preserve)\n                                           \"preserve\"\
    \n             status      (abort|complete|continue)\n                       \
    \                     \"continue\">\n"
- title: 8. Reply Codes
  contents:
  - "8. Reply Codes\n   code    meaning\n   ====    =======\n   200     success\n\
    \   421     service not available\n   450     requested action not taken\n   \
    \        (e.g., lock already in use)\n   451     requested action aborted\n  \
    \         (e.g., local error in processing)\n   454     temporary authentication\
    \ failure\n   500     general syntax error\n           (e.g., poorly-formed XML)\n\
    \   501     syntax error in parameters\n           (e.g., non-valid XML)\n   504\
    \     parameter not implemented\n   530     authentication required\n   534  \
    \   authentication mechanism insufficient\n           (e.g., too weak, sequence\
    \ exhausted, etc.)\n   535     authentication failure\n   537     action not authorized\
    \ for user\n   538     authentication mechanism requires encryption\n   550  \
    \   requested action not taken\n           (e.g., no requested profiles are acceptable)\n\
    \   553     parameter invalid\n   554     transaction failed\n           (e.g.,\
    \ policy violation)\n"
- title: 9. Security Considerations
  contents:
  - "9. Security Considerations\n   The BEEP framing mechanism, per se, provides no\
    \ protection against\n   attack; however, judicious use of initial tuning profiles\
    \ provides\n   varying degrees of assurance:\n   1.  If one of the profiles from\
    \ the SASL family is used, refer to\n       [4]'s Section 9 for a discussion of\
    \ security considerations.\n   2.  If the TLS transport security profile is used\
    \ (or if a SASL\n       security layer is negotiated), then:\n       1.  A man-in-the-middle\
    \ may remove the security-related profiles\n           from the BEEP greeting\
    \ or generate a negative reply to the\n           \"ready\" element of the TLS\
    \ transport security profile.  A\n           BEEP peer may be configurable to\
    \ refuse to proceed without an\n           acceptable level of privacy.\n    \
    \   2.  A man-in-the-middle may cause a down-negotiation to the\n           weakest\
    \ cipher suite available. A BEEP peer should be\n           configurable to refuse\
    \ weak cipher suites.\n       3.  A man-in-the-middle may modify any protocol\
    \ exchanges prior\n           to a successful negotiation.  Upon completing the\n\
    \           negotiation, a BEEP peer must discard previously cached\n        \
    \   information about the BEEP session.\n       As different TLS ciphersuites\
    \ provide varying levels of security,\n       administrators should carefully\
    \ choose which ciphersuites are\n       provisioned.\n   As BEEP is peer-to-peer\
    \ in nature, before performing any task\n   associated with a message, each channel\
    \ should apply the appropriate\n   access control based on the authenticated identity\
    \ and privacy level\n   associated with the BEEP session.\n"
- title: References
  contents:
  - "References\n   [1]   Freed, N. and N. Borenstein, \"Multipurpose Internet Mail\n\
    \         Extensions (MIME) Part One: Format of Internet Message Bodies\",\n \
    \        RFC 2045, November 1996.\n   [2]   World Wide Web Consortium, \"Extensible\
    \ Markup Language (XML)\n         1.0\", W3C XML, February 1998, <http://www.w3.org/TR/1998/REC-\n\
    \         xml-19980210>.\n   [3]   Dierks, T., Allen, C., Treese, W., Karlton,\
    \ P., Freier, A. and\n         P. Kocher, \"The TLS Protocol Version 1.0\", RFC\
    \ 2246, January\n         1999.\n   [4]   Myers, J., \"Simple Authentication and\
    \ Security Layer (SASL)\",\n         RFC 2222, October 1997.\n   [5]   Rose, M.,\
    \ \"Mapping the BEEP Core onto TCP\", RFC 3081, March\n         2001.\n   [6]\
    \   Postel, J., \"Transmission Control Protocol\", STD 7, RFC 793,\n         September\
    \ 1981.\n   [7]   Crocker, D. and P. Overell, \"Augmented BNF for Syntax\n   \
    \      Specifications: ABNF\", RFC 2234, November 1997.\n   [8]   Elz, R. and\
    \ R. Bush, \"Serial Number Arithmetic\", RFC 1982,\n         August 1996.\n  \
    \ [9]   Alvestrand, H., \"Tags for the Identification of Languages\", RFC\n  \
    \       BCP 47, RFC 3066, January 2001.\n   [10]  Berners-Lee, T., Fielding, R.\
    \ and L. Masinter, \"Uniform\n         Resource Identifiers (URI): Generic Syntax\"\
    , RFC 2396, August\n         1998.\n   [11]  Newman, C., \"The One-Time-Password\
    \ SASL Mechanism\", RFC 2444,\n         October 1998.\n   [12]  Kent, S. and R.\
    \ Atkinson, \"Security Architecture for the\n         Internet Protocol\", RFC\
    \ 2401, November 1998.\n   [13]  Yergeau, F., \"UTF-8, a transformation format\
    \ of ISO 10646\", RFC\n         2279, January 1998.\n   [14]  Linn, J., \"Generic\
    \ Security Service Application Program\n         Interface, Version 2\", RFC 2078,\
    \ January 1997.\n   [15]  <http://www.isi.edu/in-notes/iana/assignments/sasl-mechanisms>\n"
- title: Author's Address
  contents:
  - "Author's Address\n   Marshall T. Rose\n   Invisible Worlds, Inc.\n   1179 North\
    \ McDowell Boulevard\n   Petaluma, CA  94954-6559\n   US\n   Phone: +1 707 789\
    \ 3700\n   EMail: mrose@invisible.net\n   URI:   http://invisible.net/\n"
- title: Appendix A. Acknowledgements
  contents:
  - "Appendix A. Acknowledgements\n   The author gratefully acknowledges the contributions\
    \ of: David Clark,\n   Dave Crocker, Steve Deering, Wesley Michael Eddy, Huston\
    \ Franklin,\n   Marco Gazzetta, Danny Goodman, Steve Harris, Robert Herriot, Ken\n\
    \   Hirsch, Greg Hudson, Ben Laurie, Carl Malamud, Michael Mealling,\n   Keith\
    \ McCloghrie, Paul Mockapetris, RL 'Bob' Morgan, Frank Morton,\n   Darren New,\
    \ Chris Newman, Joe Touch, Paul Vixie, Gabe Wachob, Daniel\n   Woods, and, James\
    \ Woodyatt.  In particular, Dave Crocker provided\n   helpful suggestions on the\
    \ nature of segmentation in the framing\n   mechanism.\n"
- title: Appendix B. IANA Considerations
  contents:
  - "Appendix B. IANA Considerations\n   The IANA registers \"beep\" as a GSSAPI [14]\
    \ service name, as specified\n   in Section 4.1.\n   The IANA maintains a list\
    \ of:\n   o  standards-track BEEP profiles, c.f., Section 5.1; and,\n   o  standards-track\
    \ features for the channel management profile, c.f.,\n      Section 5.2.\n   For\
    \ each list, the IESG is responsible for assigning a designated\n   expert to\
    \ review the specification prior to the IANA making the\n   assignment.  As a\
    \ courtesy to developers of non-standards track BEEP\n   profiles and channel\
    \ management features, the mailing list\n   bxxpwg@invisible.net may be used to\
    \ solicit commentary.\n   The IANA makes the registrations specified in Section\
    \ 6.2 and Section\n   6.3.  It is recommended that the IANA register these profiles\
    \ using\n   the IANA as a URI-prefix, and populate those URIs with the respective\n\
    \   profile registrations.\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2001).  All\
    \ Rights Reserved.\n   This document and translations of it may be copied and\
    \ furnished to\n   others, and derivative works that comment on or otherwise explain\
    \ it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
