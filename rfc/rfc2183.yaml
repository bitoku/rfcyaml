- title: __initial_text__
  contents:
  - "               Communicating Presentation Information in\n                  \
    \         Internet Messages:\n                  The Content-Disposition Header\
    \ Field\n"
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Abstract
  contents:
  - "Abstract\n   This memo provides a mechanism whereby messages conforming to the\n\
    \   MIME specifications [RFC 2045, RFC 2046, RFC 2047, RFC 2048, RFC\n   2049]\
    \ can convey presentational information.  It specifies the\n   \"Content-Disposition\"\
    \ header field, which is optional and valid for\n   any MIME entity (\"message\"\
    \ or \"body part\").  Two values for this\n   header field are described in this\
    \ memo; one for the ordinary linear\n   presentation of the body part, and another\
    \ to facilitate the use of\n   mail to transfer files.  It is expected that more\
    \ values will be\n   defined in the future, and procedures are defined for extending\
    \ this\n    set of values.\n   This document is intended as an extension to MIME.\
    \  As such, the\n   reader is assumed to be familiar with the MIME specifications,\
    \ and\n   [RFC 822].  The information presented herein supplements but does not\n\
    \   replace that found in those documents.\n   This document is a revision to\
    \ the Experimental protocol defined in\n   RFC 1806.  As compared to RFC 1806,\
    \ this document contains minor\n   editorial updates, adds new parameters needed\
    \ to support the File\n   Transfer Body Part, and references a separate specification\
    \ for the\n   handling of non-ASCII and/or very long parameter values.\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   MIME specifies a standard format for encapsulating multiple\
    \ pieces of\n   data into a single Internet message. That document does not address\n\
    \   the issue of presentation styles; it provides a framework for the\n   interchange\
    \ of message content, but leaves presentation issues solely\n   in the hands of\
    \ mail user agent (MUA) implementors.\n   Two common ways of presenting multipart\
    \ electronic messages are as a\n   main document with a list of separate attachments,\
    \ and as a single\n   document with the various parts expanded (displayed) inline.\
    \ The\n   display of an attachment is generally construed to require positive\n\
    \   action on the part of the recipient, while inline message components\n   are\
    \ displayed automatically when the message is viewed. A mechanism\n   is needed\
    \ to allow the sender to transmit this sort of presentational\n   information\
    \ to the recipient; the Content-Disposition header provides\n   this mechanism,\
    \ allowing each component of a message to be tagged\n   with an indication of\
    \ its desired presentation semantics.\n   Tagging messages in this manner will\
    \ often be sufficient for basic\n   message formatting. However, in many cases\
    \ a more powerful and\n   flexible approach will be necessary. The definition\
    \ of such\n   approaches is beyond the scope of this memo; however, such approaches\n\
    \   can benefit from additional Content-Disposition values and\n   parameters,\
    \ to be defined at a later date.\n   In addition to allowing the sender to specify\
    \ the presentational\n   disposition of a message component, it is desirable to\
    \ allow her to\n   indicate a default archival disposition; a filename. The optional\n\
    \   \"filename\" parameter provides for this.  Further, the creation-date,\n \
    \  modification-date, and read-date parameters allow preservation of\n   those\
    \ file attributes when the file is transmitted over MIME email.\n   NB: The keywords\
    \ MUST, MUST NOT, REQUIRED, SHALL, SHALL NOT, SHOULD,\n   SHOULD NOT, RECOMMENDED,\
    \ MAY, and OPTIONAL, when they appear in this\n   document, are to be interpreted\
    \ as described in [RFC 2119].\n"
- title: 2.  The Content-Disposition Header Field
  contents:
  - "2.  The Content-Disposition Header Field\n   Content-Disposition is an optional\
    \ header field. In its absence, the\n   MUA may use whatever presentation method\
    \ it deems suitable.\n   It is desirable to keep the set of possible disposition\
    \ types small\n   and well defined, to avoid needless complexity. Even so, evolving\n\
    \   usage will likely require the definition of additional disposition\n   types\
    \ or parameters, so the set of disposition values is extensible;\n   see below.\n\
    \   In the extended BNF notation of [RFC 822], the Content-Disposition\n   header\
    \ field is defined as follows:\n     disposition := \"Content-Disposition\" \"\
    :\"\n                    disposition-type\n                    *(\";\" disposition-parm)\n\
    \     disposition-type := \"inline\"\n                       / \"attachment\"\n\
    \                       / extension-token\n                       ; values are\
    \ not case-sensitive\n     disposition-parm := filename-parm\n               \
    \        / creation-date-parm\n                       / modification-date-parm\n\
    \                       / read-date-parm\n                       / size-parm\n\
    \                       / parameter\n     filename-parm := \"filename\" \"=\"\
    \ value\n     creation-date-parm := \"creation-date\" \"=\" quoted-date-time\n\
    \     modification-date-parm := \"modification-date\" \"=\" quoted-date-time\n\
    \     read-date-parm := \"read-date\" \"=\" quoted-date-time\n     size-parm :=\
    \ \"size\" \"=\" 1*DIGIT\n     quoted-date-time := quoted-string\n           \
    \           ; contents MUST be an RFC 822 `date-time'\n                      ;\
    \ numeric timezones (+HHMM or -HHMM) MUST be used\n   NOTE ON PARAMETER VALUE\
    \ LENGHTS: A short (length <= 78 characters)\n   parameter value containing only\
    \ non-`tspecials' characters SHOULD be\n   represented as a single `token'.  A\
    \ short parameter value containing\n   only ASCII characters, but including `tspecials'\
    \ characters, SHOULD\n   be represented as `quoted-string'.  Parameter values\
    \ longer than 78\n   characters, or which contain non-ASCII characters, MUST be\
    \ encoded as\n   specified in [RFC 2184].\n   `Extension-token', `parameter',\
    \ `tspecials' and `value' are defined\n   according to [RFC 2045] (which references\
    \ [RFC 822] in the definition\n   of some of these tokens).  `quoted-string' and\
    \ `DIGIT' are defined in\n   [RFC 822].\n"
- title: 2.1  The Inline Disposition Type
  contents:
  - "2.1  The Inline Disposition Type\n   A bodypart should be marked `inline' if\
    \ it is intended to be\n   displayed automatically upon display of the message.\
    \  Inline\n   bodyparts should be presented in the order in which they occur,\n\
    \   subject to the normal semantics of multipart messages.\n"
- title: 2.2  The Attachment Disposition Type
  contents:
  - "2.2  The Attachment Disposition Type\n   Bodyparts can be designated `attachment'\
    \ to indicate that they are\n   separate from the main body of the mail message,\
    \ and that their\n   display should not be automatic, but contingent upon some\
    \ further\n   action of the user.  The MUA might instead present the user of a\n\
    \   bitmap terminal with an iconic representation of the attachments, or,\n  \
    \ on character terminals, with a list of attachments from which the\n   user could\
    \ select for viewing or storage.\n"
- title: 2.3  The Filename Parameter
  contents:
  - "2.3  The Filename Parameter\n   The sender may want to suggest a filename to\
    \ be used if the entity is\n   detached and stored in a separate file. If the\
    \ receiving MUA writes\n   the entity to a file, the suggested filename should\
    \ be used as a\n   basis for the actual filename, where possible.\n   It is important\
    \ that the receiving MUA not blindly use the suggested\n   filename.  The suggested\
    \ filename SHOULD be checked (and possibly\n   changed) to see that it conforms\
    \ to local filesystem conventions,\n   does not overwrite an existing file, and\
    \ does not present a security\n   problem (see Security Considerations below).\n\
    \   The receiving MUA SHOULD NOT respect any directory path information\n   that\
    \ may seem to be present in the filename parameter.  The filename\n   should be\
    \ treated as a terminal component only.  Portable\n   specification of directory\
    \ paths might possibly be done in the future\n   via a separate Content-Disposition\
    \ parameter, but no provision is\n   made for it in this draft.\n   Current [RFC\
    \ 2045] grammar restricts parameter values (and hence\n   Content-Disposition\
    \ filenames) to US-ASCII.  We recognize the great\n   desirability of allowing\
    \ arbitrary character sets in filenames, but\n   it is beyond the scope of this\
    \ document to define the necessary\n   mechanisms.  We expect that the basic [RFC\
    \ 1521] `value'\n   specification will someday be amended to allow use of non-US-ASCII\n\
    \   characters, at which time the same mechanism should be used in the\n   Content-Disposition\
    \ filename parameter.\n   Beyond the limitation to US-ASCII, the sending MUA may\
    \ wish to bear\n   in mind the limitations of common filesystems.  Many have severe\n\
    \   length and character set restrictions.  Short alphanumeric filenames\n   are\
    \ least likely to require modification by the receiving system.\n   The presence\
    \ of the filename parameter does not force an\n   implementation to write the\
    \ entity to a separate file. It is\n   perfectly acceptable for implementations\
    \ to leave the entity as part\n   of the normal mail stream unless the user requests\
    \ otherwise. As a\n   consequence, the parameter may be used on any MIME entity,\
    \ even\n   `inline' ones. These will not normally be written to files, but the\n\
    \   parameter could be used to provide a filename if the receiving user\n   should\
    \ choose to write the part to a file.\n"
- title: 2.4 The Creation-Date parameter
  contents:
  - "2.4 The Creation-Date parameter\n   The creation-date parameter MAY be used to\
    \ indicate the date at which\n   the file was created.  If this parameter is included,\
    \ the paramter\n   value MUST be a quoted-string which contains a representation\
    \ of the\n   creation date of the file in [RFC 822] `date-time' format.\n   UNIX\
    \ and POSIX implementors are cautioned that the `st_ctime' file\n   attribute\
    \ of the `stat' structure is not the creation time of the\n   file; it is thus\
    \ not appropriate as a source for the creation-date\n   parameter value.\n"
- title: 2.5 The Modification-Date parameter
  contents:
  - "2.5 The Modification-Date parameter\n   The modification-date parameter MAY be\
    \ used to indicate the date at\n   which the file was last modified.  If the modification-date\
    \ parameter\n   is included, the paramter value MUST be a quoted-string which\n\
    \   contains a representation of the last modification date of the file\n   in\
    \ [RFC 822] `date-time' format.\n"
- title: 2.6 The Read-Date parameter
  contents:
  - "2.6 The Read-Date parameter\n   The read-date parameter MAY be used to indicate\
    \ the date at which the\n   file was last read.  If the read-date parameter is\
    \ included, the\n   parameter value MUST be a quoted-string which contains a\n\
    \   representation of the last-read date of the file in [RFC 822] `date-\n   time'\
    \ format.\n"
- title: 2.7 The Size parameter
  contents:
  - "2.7 The Size parameter\n   The size parameter indicates an approximate size of\
    \ the file in\n   octets.  It can be used, for example, to pre-allocate space\
    \ before\n   attempting to store the file, or to determine whether enough space\n\
    \   exists.\n"
- title: 2.8  Future Extensions and Unrecognized Disposition Types
  contents:
  - "2.8  Future Extensions and Unrecognized Disposition Types\n   In the likely event\
    \ that new parameters or disposition types are\n   needed, they should be registered\
    \ with the Internet Assigned Numbers\n   Authority (IANA), in the manner specified\
    \ in Section 9 of this memo.\n   Once new disposition types and parameters are\
    \ defined, there is of\n   course the likelihood that implementations will see\
    \ disposition types\n   and parameters they do not understand.  Furthermore, since\
    \ x-tokens\n   are allowed, implementations may also see entirely unregistered\n\
    \   disposition types and parameters.\n   Unrecognized parameters should be ignored.\
    \ Unrecognized disposition\n   types should be treated as `attachment'. The choice\
    \ of `attachment'\n   for unrecognized types is made because a sender who goes\
    \ to the\n   trouble of producing a Content-Disposition header with a new\n  \
    \ disposition type is more likely aiming for something more elaborate\n   than\
    \ inline presentation.\n   Unless noted otherwise in the definition of a parameter,\
    \ Content-\n   Disposition parameters are valid for all dispositions.  (In contrast\n\
    \   to MIME content-type parameters, which are defined on a per-content-\n   type\
    \ basis.) Thus, for example, the `filename' parameter still means\n   the name\
    \ of the file to which the part should be written, even if the\n   disposition\
    \ itself is unrecognized.\n"
- title: 2.9  Content-Disposition and Multipart
  contents:
  - "2.9  Content-Disposition and Multipart\n   If a Content-Disposition header is\
    \ used on a multipart body part, it\n   applies to the multipart as a whole, not\
    \ the individual subparts.\n   The disposition types of the subparts do not need\
    \ to be consulted\n   until the multipart itself is presented.  When the multipart\
    \ is\n   displayed, then the dispositions of the subparts should be respected.\n\
    \   If the `inline' disposition is used, the multipart should be\n   displayed\
    \ as normal; however, an `attachment' subpart should require\n   action from the\
    \ user to display.\n   If the `attachment' disposition is used, presentation of\
    \ the\n   multipart should not proceed without explicit user action.  Once the\n\
    \   user has chosen to display the multipart, the individual subpart\n   dispositions\
    \ should be consulted to determine how to present the\n   subparts.\n"
- title: 2.10  Content-Disposition and the Main Message
  contents:
  - "2.10  Content-Disposition and the Main Message\n   It is permissible to use Content-Disposition\
    \ on the main body of an\n   [RFC 822] message.\n"
- title: 3.  Examples
  contents:
  - "3.  Examples\n   Here is a an example of a body part containing a JPEG image\
    \ that is\n   intended to be viewed by the user immediately:\n        Content-Type:\
    \ image/jpeg\n        Content-Disposition: inline\n        Content-Description:\
    \ just a small picture of me\n         <jpeg data>\n   The following body part\
    \ contains a JPEG image that should be\n   displayed to the user only if the user\
    \ requests it. If the JPEG is\n   written to a file, the file should be named\
    \ \"genome.jpg\".  The\n   recipient's user might also choose to set the last-modified\
    \ date of\n   the stored file to date in the modification-date parameter:\n  \
    \      Content-Type: image/jpeg\n        Content-Disposition: attachment; filename=genome.jpeg;\n\
    \          modification-date=\"Wed, 12 Feb 1997 16:29:51 -0500\";\n        Content-Description:\
    \ a complete map of the human genome\n        <jpeg data>\n   The following is\
    \ an example of the use of the `attachment'\n   disposition with a multipart body\
    \ part.  The user should see text-\n   part-1 immediately, then take some action\
    \ to view multipart-2.  After\n   taking action to view multipart-2, the user\
    \ will see text-part-2\n   right away, and be required to take action to view\
    \ jpeg-1.  Subparts\n   are indented for clarity; they would not be so indented\
    \ in a real\n   message.\n        Content-Type: multipart/mixed; boundary=outer\n\
    \        Content-Description: multipart-1\n        --outer\n          Content-Type:\
    \ text/plain\n          Content-Disposition: inline\n          Content-Description:\
    \ text-part-1\n          Some text goes here\n        --outer\n          Content-Type:\
    \ multipart/mixed; boundary=inner\n          Content-Disposition: attachment\n\
    \          Content-Description: multipart-2\n          --inner\n            Content-Type:\
    \ text/plain\n            Content-Disposition: inline\n            Content-Description:\
    \ text-part-2\n            Some more text here.\n          --inner\n         \
    \   Content-Type: image/jpeg\n            Content-Disposition: attachment\n  \
    \          Content-Description: jpeg-1\n            <jpeg data>\n          --inner--\n\
    \        --outer--\n"
- title: 4.  Summary
  contents:
  - "4.  Summary\n   Content-Disposition takes one of two values, `inline' and\n \
    \  `attachment'.  `Inline' indicates that the entity should be\n   immediately\
    \ displayed to the user, whereas `attachment' means that\n   the user should take\
    \ additional action to view the entity.\n   The `filename' parameter can be used\
    \ to suggest a filename for\n   storing the bodypart, if the user wishes to store\
    \ it in an external\n   file.\n"
- title: 5.  Security Considerations
  contents:
  - "5.  Security Considerations\n   There are security issues involved any time users\
    \ exchange data.\n   While these are not to be minimized, neither does this memo\
    \ change\n   the status quo in that regard, except in one instance.\n   Since\
    \ this memo provides a way for the sender to suggest a filename,\n   a receiving\
    \ MUA must take care that the sender's suggested filename\n   does not represent\
    \ a hazard. Using UNIX as an example, some hazards\n   would be:\n   +    Creating\
    \ startup files (e.g., \".login\").\n   +    Creating or overwriting system files\
    \ (e.g., \"/etc/passwd\").\n   +    Overwriting any existing file.\n   +    Placing\
    \ executable files into any command search path\n        (e.g., \"~/bin/more\"\
    ).\n   +    Sending the file to a pipe (e.g., \"| sh\").\n   In general, the receiving\
    \ MUA should not name or place the file such\n   that it will get interpreted\
    \ or executed without the user explicitly\n   initiating the action.\n   It is\
    \ very important to note that this is not an exhaustive list; it\n   is intended\
    \ as a small set of examples only.  Implementors must be\n   alert to the potential\
    \ hazards on their target systems.\n"
- title: 6.  References
  contents:
  - "6.  References\n   [RFC 2119]\n        Bradner, S., \"Key words for use in RFCs\
    \ to Indicate Requirement\n        Levels\", RFC 2119, March 1997.\n   [RFC 2184]\n\
    \        Freed, N. and K. Moore, \"MIME Parameter value and Encoded Words:\n \
    \       Character Sets, Lanaguage, and Continuations\", RFC 2184, August\n   \
    \     1997.\n   [RFC 2045]\n        Freed, N. and N. Borenstein, \"MIME (Multipurpose\
    \ Internet Mail\n        Extensions) Part One: Format of Internet Message Bodies\"\
    , RFC\n        2045, December 1996.\n   [RFC 2046]\n        Freed, N. and N. Borenstein,\
    \ \"MIME (Multipurpose Internet Mail\n        Extensions) Part Two: Media Types\"\
    , RFC 2046, December 1996.\n   [RFC 2047]\n        Moore, K., \"MIME (Multipurpose\
    \ Internet Mail Extensions) Part\n        Three: Message Header Extensions for\
    \ non-ASCII Text\", RFC 2047,\n        December 1996.\n   [RFC 2048]\n       \
    \ Freed, N., Klensin, J. and J. Postel, \"MIME (Multipurpose\n        Internet\
    \ Mail Extensions) Part Four: Registration Procedures\",\n        RFC 2048, December\
    \ 1996.\n   [RFC 2049]\n        Freed, N. and N. Borenstein, \"MIME (Multipurpose\
    \ Internet Mail\n        Extensions) Part Five: Conformance Criteria and Examples\"\
    , RFC\n        2049, December 1996.\n   [RFC 822]\n        Crocker, D., \"Standard\
    \ for the Format of ARPA Internet Text\n        Messages\", STD 11, RFC 822, UDEL,\
    \ August 1982.\n"
- title: 7.  Acknowledgements
  contents:
  - "7.  Acknowledgements\n   We gratefully acknowledge the help these people provided\
    \ during the\n   preparation of this draft:\n        Nathaniel Borenstein\n  \
    \      Ned Freed\n        Keith Moore\n        Dave Crocker\n        Dan Pritchett\n"
- title: 8.  Authors' Addresses
  contents:
  - "8.  Authors' Addresses\n   You should blame the editor of this version of the\
    \ document for any\n   changes since RFC 1806:\n        Keith Moore\n        Department\
    \ of Computer Science\n        University of Tennessee, Knoxville\n        107\
    \ Ayres Hall\n        Knoxville TN  37996-1301\n        USA\n        Phone: +1\
    \ (423) 974-5067\n        Fax: +1 (423) 974-8296\n        Email: moore@cs.utk.edu\n\
    \        The authors of RFC 1806 are:\n        Rens Troost\n        New Century\
    \ Systems\n        324 East 41st Street #804\n        New York, NY, 10017 USA\n\
    \        Phone: +1 (212) 557-2050\n        Fax: +1 (212) 557-2049\n        EMail:\
    \ rens@century.com\n        Steve Dorner\n        QUALCOMM Incorporated\n    \
    \    6455 Lusk Boulevard\n        San Diego, CA 92121\n        USA\n        EMail:\
    \ sdorner@qualcomm.com\n"
- title: 9. Registration of New Content-Disposition Values and Parameters
  contents:
  - "9. Registration of New Content-Disposition Values and Parameters\n   New Content-Disposition\
    \ values (besides \"inline\" and \"attachment\")\n   may be defined only by Internet\
    \ standards-track documents, or in\n   Experimental documents approved by the\
    \ Internet Engineering Steering\n   Group.\n   New content-disposition parameters\
    \ may be registered by supplying the\n   information in the following template\
    \ and sending it via electronic\n   mail to IANA@IANA.ORG:\n     To: IANA@IANA.ORG\n\
    \     Subject: Registration of new Content-Disposition parameter\n     Content-Disposition\
    \ parameter name:\n     Allowable values for this parameter:\n          (If the\
    \ parameter can only assume a small number of values,\n          list each of\
    \ those values.  Otherwise, describe the values\n          that the parameter\
    \ can assume.)\n     Description:\n          (What is the purpose of this parameter\
    \ and how is it used?)\n"
- title: 10. Changes since RFC 1806
  contents:
  - "10. Changes since RFC 1806\n   The following changes have been made since the\
    \ earlier version of\n   this document, published in RFC 1806 as an Experimental\
    \ protocol:\n   +    Updated references to MIME documents.  In some cases this\n\
    \        involved substituting a reference to one of the current MIME\n      \
    \  RFCs for a reference to RFC 1521; in other cases, a reference to\n        RFC\
    \ 1521 was simply replaced with the word \"MIME\".\n   +    Added  a section on\
    \ registration procedures, since none of the\n        procedures in RFC 2048 seemed\
    \ to be appropriate.\n   +    Added new parameter types: creation-date, modification-date,\n\
    \        read-date, and size.\n   +    Incorporated a reference to draft-freed-pvcsc-*\
    \ for encoding\n        long or non-ASCII parameter values.\n   +    Added reference\
    \ to RFC 2119 to define MUST, SHOULD, etc.\n        keywords.\n"
