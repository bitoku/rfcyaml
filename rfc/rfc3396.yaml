- contents:
  - "                         Encoding Long Options\n          in the Dynamic Host
    Configuration Protocol (DHCPv4)\n"
  title: __initial_text__
- contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol
    for the\n   Internet community, and requests discussion and suggestions for\n
    \  improvements.  Please refer to the current edition of the \"Internet\n   Official
    Protocol Standards\" (STD 1) for the standardization state\n   and status of this
    protocol.  Distribution of this memo is unlimited.\n"
  title: Status of this Memo
- contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2002).  All Rights Reserved.\n"
  title: Copyright Notice
- contents:
  - "Abstract\n   This document specifies the processing rules for Dynamic Host\n
    \  Configuration Protocol (DHCPv4) options that appear multiple times in\n   the
    same message.  Multiple instances of the same option are\n   generated when an
    option exceeds 255 octets in size (the maximum size\n   of a single option) or
    when an option needs to be split apart in\n   order to take advantage of DHCP
    option overloading.  When multiple\n   instances of the same option appear in
    the options, file and/or sname\n   fields in a DHCP packet, the contents of these
    options are\n   concatenated together to form a single option prior to processing.\n"
  title: Abstract
- contents:
  - "1. Introduction\n   This document updates RFC 2131 [3] by clarifying the rules
    for option\n   concatenation specified in section 4.1.  It is expected that the\n
    \  reader will be familiar with this portion of RFC 2131.  The text in\n   section
    4.1 that reads \"Options may appear only once, unless\n   otherwise specified
    in the options document.\"  should be considered\n   as deleted.\n   The DHCP
    protocol [3] specifies objects called \"options\" that are\n   encoded in the
    DHCPv4 packet to pass information between DHCP\n   protocol agents.  These options
    are encoded as a one-byte type code,\n   a one-byte length, and a buffer consisting
    of the number of bytes\n   specified in the length, from zero to 255.\n   However,
    in some cases it may be useful to send options that are\n   longer than 255 bytes.
    \ RFC 2131 [3] specifies that when more than\n   one option with a given type
    code appears in the DHCP packet, all\n   such options should be concatenated together.
    \ It does not, however,\n   specify the order in which this concatenation should
    occur.\n   We specify here the ordering that MUST be used by DHCP protocol\n   agents
    when sending options with more than 255 bytes.  This method\n   also MUST be used
    for splitting options that are shorter than 255\n   bytes, if for some reason
    the encoding agent needs to do so.  DHCP\n   protocol agents MUST use this method
    whenever they receive a DHCP\n   packet containing more than one occurrence of
    a certain type of\n   option.\n"
  title: 1. Introduction
- contents:
  - "2. Terminology\n   DHCP\n      Throughout this document, the acronym \"DHCP\"
    is used to refer to\n      the Dynamic Host Configuration Protocol as specified
    in RFC 2131\n      [3] and RFC 2132 [4].\n   DHCPv4\n      We have used the term
    \"DHCPv4\" in the abstract for this document\n      to distinguish between the
    DHCP protocol for IPv4 as defined in\n      RFC 2131 and RFC 2132 and the DHCP
    protocol for IPv6, which, at\n      the time that this document was written, was
    still under\n      development.\n   DHCP protocol agents\n      This refers to
    any device on the network that sends or receives\n      DHCP packets - any DHCP
    client, server or relay agent.  The nature\n      of these devices is not important
    to this specification.\n   Encoding agent\n      The DHCP protocol agent that
    is composing a DHCP packet to send.\n   Decoding agent\n      The DHCP protocol
    agent that is processing a DHCP packet it has\n      received.\n   Options\n      DHCP
    options are collections of data with type codes that indicate\n      how the options
    should be used.  Options can specify information\n      that is required for the
    DHCP protocol, IP stack configuration\n      parameters for the client, information
    allowing the client to\n      rendezvous with DHCP servers, and so on.\n   Option
    overload\n      The DHCP packet format is based on the BOOTP packet format defined\n
    \     in RFC 951 [1].  When used by DHCP protocol agents, BOOTP packets\n      have
    three fields that can contain options.  These are the\n      optional parameters
    field, the sname field, and the filename\n      field.  The DHCP options specification
    [4] defines the DHCP\n      Overload option, which specifies which of these three
    fields is\n      actually being used in any given DHCP message to store DHCP\n
    \     options.\n"
  title: 2. Terminology
- contents:
  - "3. Requirements Language\n   In this document, the key words \"MAY\", \"MUST,
    \"MUST NOT\", \"OPTIONAL\",\n   \"RECOMMENDED\", \"SHOULD\", and \"SHOULD NOT\",
    are to be interpreted as\n   described in BCP 14, RFC 2119 [2].\n"
  title: 3. Requirements Language
- contents:
  - "4. Applicability\n   This specification applies when a DHCP agent is encoding
    a packet\n   containing options, where some of those options must be broken into\n
    \  parts.  This need can occur for two reasons.  First, it can occur\n   because
    the value of an option that needs to be sent is longer than\n   255 bytes.  In
    this case, the encoding agent MUST follow the\n   algorithm specified here.  It
    can also occur because there is not\n   sufficient space in the current output
    buffer to store the option,\n   but there is space for part of the option, and
    there is space in\n   another output buffer for the rest.  In this case, the encoding
    agent\n   MUST either use this algorithm or not send the option at all.\n   This
    specification also applies in any case where a DHCP protocol\n   agent has received
    a DHCP packet that contains more than one instance\n   of an option of a given
    type.  In this case, the agent MUST\n   concatenate these separate instances of
    the same option in the way\n   that we specify here.\n   This option updates the
    Dynamic Host Configuration Protocol [3] and\n   DHCP Options and BOOTP vendor
    extensions [4] documents.  However,\n   because many currently-deployed DHCP protocol
    agents do not implement\n   option concatenation, DHCP protocol agents should
    be careful not to\n   transmit split options unless either it will not matter
    if the\n   recipient cannot correctly reassemble the options, or it is certain\n
    \  that the recipient implements concatenation.\n   Let us divide all DHCP options
    into two categories - those that, by\n   definition, require implementation of
    the mechanisms defined in this\n   document, and those that do not.  We will refer
    to the former as\n   concatenation-requiring options, and the latter as non-\n
    \  concatenation-requiring options.  In order for an option to be a\n   concatenation-requiring
    option, the protocol specification that\n   defines that option must require implementation
    of option splitting\n   and option concatenation as described in this document,
    by\n   specifically referencing this document.\n   A DHCP protocol agent SHOULD
    NOT split an option as described in this\n   document unless it has no choice,
    or it knows that its peer can\n   properly handle split options.  A peer is assumed
    to properly handle\n   split options if it has provided or requested at least
    one\n   concatenation-requiring option.  Alternatively, the administrator of\n
    \  the agent generating the option can specifically configure the agent\n   to
    assume that the recipient can correctly concatenate options split\n   as described
    in this document.\n   Some implementors may find it easiest to only split concatenation-\n
    \  requiring options, and never split non-concatenation-requiring\n   options.
    \ This is permissible.  However, an implementation which\n   supports any concatenation-requiring
    option MUST be capable of\n   concatenating received options for both concatenation-requiring
    and\n   non-concatenation-requiring options.\n   No restrictions apply to option
    concatenation when a DHCP agent\n   receives a DHCP message.  Any DHCP protocol
    agent that implements the\n   mechanisms described in this document can assume
    that when it\n   receives two options of the same type, it should concatenate
    them.\n"
  title: 4. Applicability
- contents:
  - "5. The Aggregate Option Buffer\n   DHCP options can be stored in the DHCP packet
    in three separate\n   portions of the packet.  These are the optional parameters
    field, the\n   sname field, and the file field, as described in RFC 2131 [3].
    \ This\n   complicates the description of the option splitting mechanism because\n
    \  there are three separate fields into which split options may be\n   placed.\n
    \  To further complicate matters, an option that doesn't fit into one\n   field
    can't overlap the boundary into another field - the encoding\n   agent must instead
    break the option into two parts and store one part\n   in each buffer.\n   To
    simplify this discussion, we will talk about an aggregate option\n   buffer, which
    will be the aggregate of the three buffers.  This is a\n   logical aggregation
    - the buffers MUST appear in the locations in the\n   DHCP packet described in
    RFC 2131 [3].\n   The aggregate option buffer is made up of the optional parameters\n
    \  field, the file field, and the sname field, in that order.\n   WARNING: This
    is not the physical ordering of these fields in the\n   DHCP packet.\n   Options
    MUST NOT be stored in the aggregate option buffer in such a\n   way that they
    cross either boundary between the three fields in the\n   aggregate buffer.\n
    \  The encoding agent is free to choose to use either or both the sname\n   field
    and file field.  If the encoding agent does not choose to use\n   either or both
    of these two fields, then they MUST NOT be considered\n   part of the aggregate
    option buffer in that case.\n"
  title: 5. The Aggregate Option Buffer
- contents:
  - "6. Encoding Agent Behavior\n   Encoding agents decide to split options based
    on the reasons we have\n   described in the preceding section entitled \"applicability\".\n
    \  Options can be split on any octet boundary.  No split portion of an\n   option
    that has been split can contain more than 255 octets.  The\n   split portions
    of the option MUST be stored in the aggregate option\n   buffer in sequential
    order - the first split portion MUST be stored\n   first in the aggregate option
    buffer, then the second portion, and so\n   on.  The encoding agent MUST NOT attempt
    to specify any semantic\n   information based on how the option is split.\n   Note
    that because the aggregate option buffer does not represent the\n   physical ordering
    of the DHCP packet, if an option were split into\n   three parts and each part
    went into one of the possible option\n   fields, the first part would go into
    the optional parameters field,\n   the second part would go into the file field,
    and the third part\n   would go into the sname field.  This maintains consistency
    with\n   section 4.1 of RFC 2131 [3].\n   Each split portion of an option MUST
    be stored in the aggregate\n   option buffer as if it were a normal variable-length
    option as\n   described in RFC 2132 [4].  The length fields of each split portion\n
    \  of the option MUST add up to the total length of the option data.\n   For any
    given option being split, the option code field in each split\n   portion MUST
    be the same.\n"
  title: 6. Encoding Agent Behavior
- contents:
  - "7. Decoding Agent Behavior\n   When a decoding agent is scanning an incoming
    DHCP packet's option\n   buffer and finds two or more options with the same option
    code, it\n   MUST consider them to be split portions of an option as described
    in\n   the preceding section.\n   In the case that a decoding agent finds a split
    option, it MUST treat\n   the contents of that option as a single option, and
    the contents MUST\n   be reassembled in the order that was described above under
    encoding\n   agent behavior.\n   The decoding agent should ensure that when the
    option's value is\n   used, any alignment issues that are particular to the machine\n
    \  architecture on which the decoding agent is running are accounted for\n   -
    there is no requirement that the encoding agent align the options\n   in any particular
    way.\n   There is no semantic meaning to where an option is split - the\n   encoding
    agent is free to split the option at any point, and the\n   decoding agent MUST
    reassemble the split option parts into a single\n   object, and MUST NOT treat
    each split portion of the option as a\n   separate object.\n"
  title: 7. Decoding Agent Behavior
- contents:
  - "8. Example\n   Consider an option, Bootfile name (option code 67), with a value
    of\n   \"/diskless/foo\".  Normally, this would be encoded as a single option,\n
    \  as follows:\n      +----+----+---+---+---+---+---+---+---+---+---+---+---+---+---+\n
    \     | 67 | 13 | / | d | i | s | k | l | e | s | s | / | f | o | o |\n      +----+----+---+---+---+---+---+---+---+---+---+---+---+---+---+\n
    \  If an encoding agent needed to split the option in order to fit it\n   into
    the option buffer, it could encode it as two separate options,\n   as follows,
    and store it in the aggregate option buffer in the\n   following sequence:\n      +----+---+---+---+---+---+---+---+---+\n
    \     | 67 | 7 | / | d | i | s | k | l | e |\n      +----+---+---+---+---+---+---+---+---+\n
    \     +----+---+---+---+---+---+---+---+\n      | 67 | 6 | s | s | / | f | o |
    o |\n      +----+---+---+---+---+---+---+---+\n"
  title: 8. Example
- contents:
  - "9. Security Considerations\n   This document raises no new security issues.  Potential
    exposures to\n   attack in the DHCP protocol are discussed in section 7 of the
    DHCP\n   protocol specification [3] and in Authentication for DHCP Messages\n
    \  [5].\n   Note that the authentication option itself can be split; in such\n
    \  cases implementations must be careful when setting the authentication\n   field
    to zero (prior to generation or verification of the MAC) as it\n   may be split
    across multiple options.\n"
  title: 9. Security Considerations
- contents:
  - '10. References

    '
  - contents:
    - "10.1. Normative References\n   [1] Croft, W. and J. Gilmore, \"BOOTSTRAP PROTOCOL
      (BOOTP)\", RFC 951,\n       September 1985.\n   [2] Bradner, S., \"Key words
      for use in RFCs to indicate requirement\n       levels\", BCP 14, RFC 2119,
      March 1997.\n   [3] Droms, R., \"Dynamic Host Configuration Protocol\", RFC
      2131, March\n       1997.\n   [4] Alexander, S. and Droms, R., \"DHCP Options
      and BOOTP Vendor\n       Extensions\", RFC 2132, March 1997.\n"
    title: 10.1. Normative References
  - contents:
    - "10.2. Informative References\n   [5] Droms, R. and W. Arbaugh, \"Authentication
      for DHCP Messages\", RFC\n       3118, June 2001.\n"
    title: 10.2. Informative References
  title: 10. References
- contents:
  - "11. Intellectual Property Statement\n   The IETF takes no position regarding
    the validity or scope of any\n   intellectual property or other rights that might
    be claimed to\n   pertain to the implementation or use of the technology described
    in\n   this document or the extent to which any license under such rights\n   might
    or might not be available; neither does it represent that it\n   has made any
    effort to identify any such rights.  Information on the\n   IETF's procedures
    with respect to rights in standards-track and\n   standards-related documentation
    can be found in BCP-11.  Copies of\n   claims of rights made available for publication
    and any assurances of\n   licenses to be made available, or the result of an attempt
    made to\n   obtain a general license or permission for the use of such\n   proprietary
    rights by implementors or users of this specification can\n   be obtained from
    the IETF Secretariat.\n   The IETF invites any interested party to bring to its
    attention any\n   copyrights, patents or patent applications, or other proprietary\n
    \  rights which may cover technology that may be required to practice\n   this
    standard.  Please address the information to the IETF Executive\n   Director.\n"
  title: 11. Intellectual Property Statement
- contents:
  - "12. Authors' Addresses\n   Ted Lemon\n   Nominum, Inc.\n   2385 Bay Road\n   Redwood
    City, CA 94043\n   USA\n   EMail: mellon@nominum.com\n   Stuart Cheshire\n   Apple
    Computer, Inc.\n   1 Infinite Loop\n   Cupertino\n   California 95014\n   USA\n
    \  Phone: +1 408 974 3207\n   EMail: rfc@stuartcheshire.org\n"
  title: 12. Authors' Addresses
- contents:
  - "13. Full Copyright Statement\n   Copyright (C) The Internet Society (2002).  All
    Rights Reserved.\n   This document and translations of it may be copied and furnished
    to\n   others, and derivative works that comment on or otherwise explain it\n
    \  or assist in its implementation may be prepared, copied, published\n   and
    distributed, in whole or in part, without restriction of any\n   kind, provided
    that the above copyright notice and this paragraph are\n   included on all such
    copies and derivative works.  However, this\n   document itself may not be modified
    in any way, such as by removing\n   the copyright notice or references to the
    Internet Society or other\n   Internet organizations, except as needed for the
    purpose of\n   developing Internet standards in which case the procedures for\n
    \  copyrights defined in the Internet Standards process must be\n   followed,
    or as required to translate it into languages other than\n   English.\n   The
    limited permissions granted above are perpetual and will not be\n   revoked by
    the Internet Society or its successors or assigns.\n   This document and the information
    contained herein is provided on an\n   \"AS IS\" basis and THE INTERNET SOCIETY
    AND THE INTERNET ENGINEERING\n   TASK FORCE DISCLAIMS ALL WARRANTIES, EXPRESS
    OR IMPLIED, INCLUDING\n   BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF THE
    INFORMATION\n   HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED WARRANTIES
    OF\n   MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.\n"
  title: 13. Full Copyright Statement
- contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided
    by the\n   Internet Society.\n"
  title: Acknowledgement
