- title: __initial_text__
  contents:
  - "                   Time To Live (TTL) Processing in\n             Multi-Protocol\
    \ Label Switching (MPLS) Networks\n"
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2003).  All Rights Reserved.\n"
- title: Abstract
  contents:
  - "Abstract\n   This document describes Time To Live (TTL) processing in hierarchical\n\
    \   Multi-Protocol Label Switching (MPLS) networks and is motivated by\n   the\
    \ need to formalize a TTL-transparent mode of operation for an MPLS\n   label-switched\
    \ path.  It updates RFC 3032, \"MPLS Label Stack\n   Encoding\".  TTL processing\
    \ in both Pipe and Uniform Model\n   hierarchical tunnels are specified with examples\
    \ for both \"push\" and\n   \"pop\" cases.  The document also complements RFC\
    \ 3270, \"MPLS Support\n   of Differentiated Services\" and ties together the\
    \ terminology\n   introduced in that document with TTL processing in hierarchical\
    \ MPLS\n   networks.\n"
- title: Conventions used in this document
  contents:
  - "Conventions used in this document\n   The key words \"MUST\", \"MUST NOT\", \"\
    REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\"\
    ,  \"MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described\
    \ in [RFC-2119].\n"
- title: 1. Introduction and Motivation
  contents:
  - "1. Introduction and Motivation\n   This document describes Time To Live (TTL)\
    \ processing in hierarchical\n   MPLS networks.  We believe that this document\
    \ adds details that have\n   not been addressed in [MPLS-ARCH, MPLS-ENCAPS], and\
    \ that the methods\n   presented in this document complement [MPLS-DS].\n   In\
    \ particular, a new mode of operation (referred to as the Pipe\n   Model) is introduced\
    \ to support the practice of configuring MPLS LSPs\n   such that packets transiting\
    \ the LSP see the tunnel as a single hop\n   regardless of the number of intermediary\
    \ label switch routers (LSR).\n   The Pipe Model for TTL is currently being used\
    \ in multiple networks\n   and is provided as an option configurable by the network\
    \ operator by\n   several vendors.\n   This document formalizes the TTL processing\
    \ in MPLS networks and ties\n   it with the terminology introduced in [MPLS-DS].\n"
- title: 2. TTL Processing in MPLS Networks
  contents:
  - '2. TTL Processing in MPLS Networks

    '
- title: 2.1. Changes to RFC 3032 [MPLS-ENCAPS]
  contents:
  - "2.1. Changes to RFC 3032 [MPLS-ENCAPS]\n   a) [MPLS-ENCAPS] only covers the Uniform\
    \ Model and does NOT address\n      the Pipe Model or the Short Pipe Model.  This\
    \ document addresses\n      these two models and for completeness will also address\
    \ the\n      Uniform Model.\n   b) [MPLS-ENCAPS] does not cover hierarchical LSPs.\
    \  This document\n      addresses this issue.\n   c) [MPLS-ENCAPS] does not define\
    \ TTL processing in the presence of\n      Penultimate Hop Popping (PHP).  This\
    \ document addresses this\n      issue.\n"
- title: 2.2. Terminology and Background
  contents:
  - "2.2. Terminology and Background\n   As defined in [MPLS-ENCAPS], MPLS packets\
    \ use a MPLS shim header that\n   indicates the following information about a\
    \ packet:\n   a) MPLS Label (20 bits)\n   b) TTL (8 bits)\n   c) Bottom of stack\
    \ (1 bit)\n   d) Experimental bits (3 bits)\n   The experimental bits were later\
    \ redefined in [MPLS-DS] to indicate\n   the scheduling and shaping behavior that\
    \ could be associated with an\n   MPLS packet.\n   [MPLS-DS] also defined two\
    \ models for MPLS tunnel operation: Pipe and\n   Uniform Models.  In the Pipe\
    \ Model, a MPLS network acts like a\n   circuit when MPLS packets traverse the\
    \ network such that only the LSP\n   ingress and egress points are visible to\
    \ nodes that are outside the\n   tunnel.  A Short variation of the Pipe Model\
    \ is also defined in\n   [MPLS-DS] to differentiate between different egress forwarding\
    \ and\n   QoS treatments.  On the other hand, the Uniform Model makes all the\n\
    \   nodes that a LSP traverses visible to nodes outside the tunnel.  We\n   will\
    \ extend the Pipe and Uniform Models to include TTL processing in\n   the following\
    \ sections.  Furthermore, TTL processing, when performing\n   PHP, is also described\
    \ in this document.  For a detailed description\n   of Pipe and Uniform Models,\
    \ please see [MPLS-DS].\n   TTL processing in MPLS networks can be broken down\
    \ into two logical\n   blocks: (i) the incoming TTL determination to take into\
    \ account any\n   tunnel egress due to MPLS Pop operations; (ii) packet processing\
    \ of\n   (possibly) exposed packets and outgoing TTLs.\n   We also note here that\
    \ signaling the LSP type (Pipe, Short Pipe or\n   Uniform Model) is out of the\
    \ scope of this document, and that is also\n   not addressed in the current versions\
    \ of the label distribution\n   protocols, e.g. LDP [MPLS-LDP] and RSVP-TE [MPLS-RSVP].\
    \  Currently,\n   the LSP type is configured by the network operator manually\
    \ by means\n   of either a command line or network management interface.\n"
- title: 2.3. New Terminology
  contents:
  - "2.3. New Terminology\n   iTTL: The TTL value to use as the incoming TTL.  No\
    \ checks are\n   performed on the iTTL.\n   oTTL: This is the TTL value used as\
    \ the outgoing TTL value (see\n   section 3.5 for exception).  It is always (iTTL\
    \ - 1) unless otherwise\n   stated.\n   oTTL Check: Check if oTTL is greater than\
    \ 0.  If the oTTL Check is\n   false, then the packet is not forwarded.  Note\
    \ that the oTTL check is\n   performed only if any outgoing TTL (either IP or\
    \ MPLS) is set to oTTL\n   (see section 3.5 for exception).\n"
- title: 3. TTL Processing in different Models
  contents:
  - "3. TTL Processing in different Models\n   This section describes the TTL processing\
    \ for LSPs conforming to each\n   of the 3 models  (Uniform, Short Pipe and Pipe)\
    \ in the\n   presence/absence of PHP (where applicable).\n"
- title: 3.1. TTL Processing for Uniform Model LSPs (with or without PHP)
  contents:
  - "3.1. TTL Processing for Uniform Model LSPs (with or without PHP)\n      (consistent\
    \ with [MPLS-ENCAPS]):\n             ========== LSP =============================>\n\
    \                 +--Swap--(n-2)-...-swap--(n-i)---+\n                /      \
    \  (outer header)            \\\n              (n-1)                         \
    \       (n-i)\n              /                                      \\\n   >--(n)--Push...............(x).....................Pop--(n-i-1)->\n\
    \            (I)           (inner header)            (E or P)\n   (n) represents\
    \ the TTL value in the corresponding header\n   (x) represents non-meaningful\
    \ TTL information\n   (I) represents the LSP ingress node\n   (P) represents the\
    \ LSP penultimate node\n   (E) represents the LSP Egress node\n   This picture\
    \ shows TTL processing for a Uniform Model MPLS LSP.  Note\n   that the inner\
    \ and outer TTLs of the packets are synchronized at\n   tunnel ingress and egress.\n"
- title: 3.2. TTL Processing for Short Pipe Model LSPs
  contents:
  - '3.2. TTL Processing for Short Pipe Model LSPs

    '
- title: 3.2.1.     TTL Processing for Short Pipe Model LSPs without PHP
  contents:
  - "3.2.1.     TTL Processing for Short Pipe Model LSPs without PHP\n           \
    \  ========== LSP =============================>\n                 +--Swap--(N-1)-...-swap--(N-i)-----+\n\
    \                /        (outer header)              \\\n              (N)  \
    \                                (N-i)\n              /                      \
    \                  \\\n   >--(n)--Push...............(n-1).....................Pop--(n-2)->\n\
    \            (I)           (inner header)                (E)\n   (N) represents\
    \ the TTL value (may have no relationship to n)\n   (n) represents the tunneled\
    \ TTL value in the encapsulated header\n   (I) represents the LSP ingress node\n\
    \   (E) represents the LSP Egress node\n   The Short Pipe Model was introduced\
    \ in [MPLS-DS].  In the Short Pipe\n   Model, the forwarding treatment at the\
    \ egress LSR is based on the\n   tunneled packet, as opposed to the encapsulating\
    \ packet.\n"
- title: '3.2.2.     TTL Processing for Short Pipe Model with PHP:'
  contents:
  - "3.2.2.     TTL Processing for Short Pipe Model with PHP:\n             ==========\
    \ LSP =====================================>\n                 +-Swap-(N-1)-...-swap-(N-i)-+\n\
    \                /       (outer header)        \\\n              (N)         \
    \                   (N-i)\n              /                                \\\n\
    \   >--(n)--Push.............(n-1)............Pop-(n-1)-Decr.-(n-2)->\n      \
    \      (I)           (inner header)       (P)      (E)\n   (N) represents the\
    \ TTL value (may have no relationship to n)\n   (n) represents the tunneled TTL\
    \ value in the encapsulated header\n   (I) represents the LSP ingress node\n \
    \  (P) represents the LSP penultimate node\n   (E) represents the LSP egress node.\n\
    \   Since the label has already been popped by the LSP's penultimate\n   node,\
    \ the LSP egress node just decrements the header TTL.\n   Also note that at the\
    \ end of the Short Pipe Model LSP, the TTL of the\n   tunneled packet has been\
    \ decremented by two, with or without PHP.\n"
- title: '3.3. TTL Processing for Pipe Model LSPs (without PHP only):'
  contents:
  - "3.3. TTL Processing for Pipe Model LSPs (without PHP only):\n             ==========\
    \ LSP =============================>\n                 +--Swap--(N-1)-...-swap--(N-i)-----+\n\
    \                /        (outer header)              \\\n              (N)  \
    \                                (N-i)\n              /                      \
    \                  \\\n   >--(n)--Push...............(n-1)....................Pop--(n-2)->\n\
    \            (I)           (inner header)               (E)\n   (N) represents\
    \ the TTL value (may have no relationship to n)\n   (n) represents the tunneled\
    \ TTL value in the encapsulated header\n   (I) represents the LSP ingress node\n\
    \   (E) represents the LSP Egress node\n   From the TTL perspective, the treatment\
    \ for a Pipe Model LSP is\n   identical to the Short Pipe Model without PHP.\n"
- title: 3.4. Incoming TTL (iTTL) determination
  contents:
  - "3.4. Incoming TTL (iTTL) determination\n   If the incoming packet is an IP packet,\
    \ then the iTTL is the TTL\n   value of the incoming IP packet.\n   If the incoming\
    \ packet is an MPLS packet and we are performing a\n   Push/Swap/PHP, then the\
    \ iTTL is the TTL of the topmost incoming\n   label.\n   If the incoming packet\
    \ is an MPLS packet and we are performing a Pop\n   (tunnel termination), the\
    \ iTTL is based on the tunnel type (Pipe or\n   Uniform) of the LSP that was popped.\
    \  If the popped label belonged to\n   a Pipe Model LSP, then the iTTL is the\
    \ value of the TTL field of the\n   header, exposed after the label was popped\
    \ (note that for the purpose\n   of this document, the exposed header may be either\
    \ an IP header or an\n   MPLS label).  If the popped label belonged to a Uniform\
    \ Model LSP,\n   then the iTTL is equal to the TTL of the popped label.  If multiple\n\
    \   Pop operations are performed sequentially, then the procedure given\n   above\
    \ is repeated with one exception: the iTTL computed during the\n   previous Pop\
    \ is used as the TTL of subsequent labels being popped;\n   i.e. the TTL contained\
    \ in the subsequent label is essentially ignored\n   and replaced with the iTTL\
    \ computed during the previous pop.\n"
- title: 3.5. Outgoing TTL Determination and Packet Processing
  contents:
  - "3.5. Outgoing TTL Determination and Packet Processing\n   After the iTTL computation\
    \ is performed, the oTTL check is performed.\n   If the oTTL check succeeds, then\
    \ the outgoing TTL of the\n   (labeled/unlabeled) packet is calculated and packet\
    \ headers are\n   updated as defined below.\n   If the packet was routed as an\
    \ IP packet, the TTL value of the IP\n   packet is set to oTTL (iTTL - 1).  The\
    \ TTL value(s) for any pushed\n   label(s) is determined as described in section\
    \ 3.6.\n   For packets that are routed as MPLS, we have four cases:\n   1) Swap-only:\
    \ The routed label is swapped with another label and the\n      TTL field of the\
    \ outgoing label is set to oTTL.\n   2) Swap followed by a Push: The swapped operation\
    \ is performed as\n      described in (1).  The TTL value(s) of any pushed label(s)\
    \ is\n      determined as described in section 3.6.\n   3) Penultimate Hop Pop\
    \ (PHP): The routed label is popped.  The oTTL\n      check should be performed\
    \ irrespective of whether the oTTL is used\n      to update the TTL field of the\
    \ outgoing header.  If the PHPed\n      label belonged to a Short Pipe Model LSP,\
    \ then the TTL field of\n      the PHP exposed header is neither checked nor updated.\
    \  If the\n      PHPed label was a Uniform Model LSP, then the TTL field of the\
    \ PHP\n      exposed header is set to the oTTL.  The TTL value(s) of additional\n\
    \      labels are determined as described in section 3.6\n   4) Pop: The pop operation\
    \ happens before routing and hence it is not\n      considered here.\n"
- title: 3.6. Tunnel Ingress Processing (Push)
  contents:
  - "3.6. Tunnel Ingress Processing (Push)\n   For each pushed Uniform Model label,\
    \ the TTL is copied from the\n   label/IP-packet immediately underneath it.\n\
    \   For each pushed Pipe Model or Short Pipe Model label, the TTL field\n   is\
    \ set to a value configured by the network operator.  In most\n   implementations,\
    \ this value is set to 255 by default.\n"
- title: 3.7. Implementation Remarks
  contents:
  - "3.7. Implementation Remarks\n   1) Although iTTL can be decremented by a value\
    \ larger than 1 while it\n      is being updated or oTTL is being determined,\
    \ this feature should\n      be only used for compensating for network nodes that\
    \ are not\n      capable of decrementing TTL values.\n   2) Whenever iTTL is decremented,\
    \ the implementer must make sure that\n      the value does not become negative.\n\
    \   3) In the Short Pipe Model with PHP enabled, the TTL of the tunneled\n   \
    \   packet is unchanged after the PHP operation.\n"
- title: 4. Conclusion
  contents:
  - "4. Conclusion\n   This Internet Document describes how the TTL field can be processed\n\
    \   in an MPLS network.  We clarified the various methods that are\n   applied\
    \ in the presence of hierarchical tunnels and completed the\n   integration of\
    \ Pipe and Uniform Models with TTL processing.\n"
- title: 5. Security Considerations
  contents:
  - "5. Security Considerations\n   This document does not add any new security issues\
    \ other than the\n   ones defined in [MPLS-ENCAPS, MPLS-DS].  In particular, the\
    \ document\n   does not define a new protocol or expand an existing one and does\
    \ not\n   introduce security problems into the existing protocols.  The authors\n\
    \   believe that clarification of TTL handling in MPLS networks benefits\n   service\
    \ providers and their customers since troubleshooting is\n   simplified.\n"
- title: 6. References
  contents:
  - '6. References

    '
- title: 6.1. Normative References
  contents:
  - "6.1. Normative References\n   [RFC-2119]    Bradner, S. \"Key words for use in\
    \ RFC's to Indicate\n                 Requirement Levels\", BCP 14, RFC 2119,\
    \ March 1997.\n   [MPLS-ARCH]   Rosen, E., Viswanathan, A. and  R. Callon,\n \
    \                \"Multiprotocol Label Switching Architecture\", RFC 3031,\n \
    \                January 2001.\n   [MPLS-ENCAPS] Rosen, E., Tappan, D., Fedorkow,\
    \ G., Rekhter, Y.,\n                 Farinacci, D., Li, T. and A. Conta, \"MPLS\
    \ Label Stack\n                 Encoding\", RFC 3032, January 2001.\n   [MPLS-DS]\
    \     Le Faucheur, F., Wu, L., Davie, B., Davari, S.,\n                 Vaananen,\
    \ P., Krishnan, R., Cheval, P. and J. Heinanen,\n                 \"Multi-Protocol\
    \ Label Switching (MPLS) Support of\n                 Differentiated Services\"\
    , RFC 3270, May 2002.\n"
- title: 6.2. Informative References
  contents:
  - "6.2. Informative References\n   [MPLS-LDP]    Andersson, L., Doolan, P., Feldman,\
    \ N., Fredette, A.\n                 and B. Thomas, \"LDP Specification\", RFC\
    \ 3036, January\n                 2001.\n   [MPLS-RSVP]   Awduche, D., Berger,\
    \ L., Gan, D., Li, T., Srinivasan,\n                 V. and  G. Swallow, \"RSVP-TE:\
    \ Extensions to RSVP for\n                 LSP Tunnels\", RFC 3209, December 2001.\n"
- title: 7. Acknowledgements
  contents:
  - "7. Acknowledgements\n   The authors would like to thank the members of the MPLS\
    \ working group\n   for their feedback.  We would especially like to thank Shahram\
    \ Davari\n   and Loa Andersson for their careful review of the document and their\n\
    \   comments.\n"
- title: 8. Author's Addresses
  contents:
  - "8. Author's Addresses\n   Puneet Agarwal\n   Brocade Communications Systems,\
    \ Inc.\n   1745 Technology Drive\n   San Jose, CA 95110\n   EMail: puneet@acm.org\n\
    \   Bora Akyol\n   Cisco Systems\n   170 W. Tasman Drive\n   San Jose, CA 95134\n\
    \   EMail: bora@cisco.com\n"
- title: 9.  Full Copyright Statement
  contents:
  - "9.  Full Copyright Statement\n   Copyright (C) The Internet Society (2003). \
    \ All Rights Reserved.\n   This document and translations of it may be copied\
    \ and furnished to\n   others, and derivative works that comment on or otherwise\
    \ explain it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
