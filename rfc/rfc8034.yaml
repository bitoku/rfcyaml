- title: __initial_text__
  contents:
  - "                 Active Queue Management (AQM) Based on\n          Proportional\
    \ Integral Controller Enhanced (PIE) for\n Data-Over-Cable Service Interface Specifications\
    \ (DOCSIS) Cable Modems\n"
- title: Abstract
  contents:
  - "Abstract\n   Cable modems based on Data-Over-Cable Service Interface\n   Specifications\
    \ (DOCSIS) provide broadband Internet access to over one\n   hundred million users\
    \ worldwide.  In some cases, the cable modem\n   connection is the bottleneck\
    \ (lowest speed) link between the customer\n   and the Internet.  As a result,\
    \ the impact of buffering and\n   bufferbloat in the cable modem can have a significant\
    \ effect on user\n   experience.  The CableLabs DOCSIS 3.1 specification introduces\n\
    \   requirements for cable modems to support an Active Queue Management\n   (AQM)\
    \ algorithm that is intended to alleviate the impact that\n   buffering has on\
    \ latency-sensitive traffic, while preserving bulk\n   throughput performance.\
    \  In addition, the CableLabs DOCSIS 3.0\n   specifications have also been amended\
    \ to contain similar\n   requirements.  This document describes the requirements\
    \ on AQM that\n   apply to DOCSIS equipment, including a description of the\n\
    \   \"DOCSIS-PIE\" algorithm that is required on DOCSIS 3.1 cable modems.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document is not an Internet Standards Track specification;\
    \ it is\n   published for informational purposes.\n   This document is a product\
    \ of the Internet Engineering Task Force\n   (IETF).  It represents the consensus\
    \ of the IETF community.  It has\n   received public review and has been approved\
    \ for publication by the\n   Internet Engineering Steering Group (IESG).  Not\
    \ all documents\n   approved by the IESG are a candidate for any level of Internet\n\
    \   Standard; see Section 2 of RFC 7841.\n   Information about the current status\
    \ of this document, any errata,\n   and how to provide feedback on it may be obtained\
    \ at\n   http://www.rfc-editor.org/info/rfc8034.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2017 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction  . . . . . . . . . . . . . . . . . . .\
    \ . . . . .   3\n   2.  Overview of DOCSIS AQM Requirements . . . . . . . . .\
    \ . . . .   3\n   3.  The DOCSIS MAC Layer and Service Flows  . . . . . . . .\
    \ . . .   4\n   4.  DOCSIS-PIE vs. PIE  . . . . . . . . . . . . . . . . . . .\
    \ . .   5\n     4.1.  Latency Target  . . . . . . . . . . . . . . . . . . . .\
    \ .   5\n     4.2.  Departure Rate Estimation . . . . . . . . . . . . . . . .\
    \   6\n     4.3.  Enhanced Burst Protection . . . . . . . . . . . . . . . .  \
    \ 7\n     4.4.  Expanded Auto-Tuning Range  . . . . . . . . . . . . . . .   7\n\
    \     4.5.  Trigger for Exponential Decay . . . . . . . . . . . . . .   8\n  \
    \   4.6.  Drop Probability Scaling  . . . . . . . . . . . . . . . .   8\n    \
    \ 4.7.  Support for Explicit Congestion Notification  . . . . . .   8\n   5. \
    \ Implementation Guidance . . . . . . . . . . . . . . . . . . .   9\n   6.  Security\
    \ Considerations . . . . . . . . . . . . . . . . . . .   9\n   7.  References\
    \  . . . . . . . . . . . . . . . . . . . . . . . . .  10\n     7.1.  Normative\
    \ References  . . . . . . . . . . . . . . . . . .  10\n     7.2.  Informative\
    \ References  . . . . . . . . . . . . . . . . .  10\n   Appendix A.  DOCSIS-PIE\
    \ Algorithm Definition  . . . . . . . . . .  11\n     A.1.  DOCSIS-PIE AQM Constants\
    \ and Variables  . . . . . . . . .  11\n       A.1.1.  Configuration Parameters\
    \  . . . . . . . . . . . . . .  11\n       A.1.2.  Constant Values . . . . . .\
    \ . . . . . . . . . . . . .  11\n       A.1.3.  Variables . . . . . . . . . .\
    \ . . . . . . . . . . . .  12\n       A.1.4.  Public/System Functions . . . .\
    \ . . . . . . . . . . .  12\n     A.2.  DOCSIS-PIE AQM Control Path . . . . .\
    \ . . . . . . . . . .  13\n     A.3.  DOCSIS-PIE AQM Data Path  . . . . . . .\
    \ . . . . . . . . .  15\n   Authors' Addresses  . . . . . . . . . . . . . . .\
    \ . . . . . . . .  17\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   A recent resurgence of interest in active queue management,\
    \ arising\n   from a recognition of the inadequacies of drop-tail queuing in the\n\
    \   presence of loss-based congestion control algorithms, has resulted in\n  \
    \ the development of new algorithms that appear to provide very good\n   congestion\
    \ feedback to current TCP algorithms, while also having\n   operational simplicity\
    \ and low complexity.  One of these algorithms\n   has been selected as a requirement\
    \ for cable modems built according\n   to the DOCSIS 3.1 specification [DOCSIS_3.1].\
    \  The Data-Over-Cable\n   Service Interface Specifications (DOCSIS) define the\
    \ broadband\n   technology deployed worldwide for Ethernet and IP service over\
    \ hybrid\n   fiber-coaxial cable systems.  The most recent revision of the DOCSIS\n\
    \   technology, version 3.1, was originally published in October 2013 and\n  \
    \ provides support for up to 10 Gbps downstream (toward the customer)\n   and\
    \ 1 Gbps upstream (from the customer) capacity over existing cable\n   networks.\
    \  Previous versions of the DOCSIS technology did not contain\n   requirements\
    \ for AQM.  This document outlines the high-level AQM\n   requirements for DOCSIS\
    \ systems, discusses some of the salient\n   features of the DOCSIS Media Access\
    \ Control (MAC) layer, and\n   describes the DOCSIS-PIE algorithm -- largely by\
    \ comparing it to its\n   progenitor, the PIE algorithm [RFC8033].\n"
- title: 2.  Overview of DOCSIS AQM Requirements
  contents:
  - "2.  Overview of DOCSIS AQM Requirements\n   CableLabs' DOCSIS 3.1 specification\
    \ [DOCSIS_3.1] mandates that cable\n   modems implement a specific variant of\
    \ the Proportional Integral\n   controller Enhanced (PIE) AQM algorithm [RFC8033].\
    \  This specific\n   variant is provided for reference in Appendix A, and simulation\n\
    \   results comparing it to drop-tail queuing and other AQM options are\n   given\
    \ in [CommMag] and [DOCSIS-AQM].  In addition, CableLabs' DOCSIS\n   3.0 specification\
    \ [DOCSIS_3.0] has been amended to recommend that\n   cable modems implement the\
    \ same algorithm.  Both specifications allow\n   that cable modems can optionally\
    \ implement additional algorithms that\n   can then be selected for use by the\
    \ operator via the modem's\n   configuration file.\n   These requirements on the\
    \ cable modem apply to upstream transmissions\n   (i.e., from the customer to\
    \ the Internet).\n   Both specifications also include requirements (mandatory\
    \ in DOCSIS\n   3.1 and recommended in DOCSIS 3.0) that the Cable Modem Termination\n\
    \   System (CMTS) implement AQM for downstream traffic; however, no\n   specific\
    \ algorithm is defined for downstream use.\n"
- title: 3.  The DOCSIS MAC Layer and Service Flows
  contents:
  - "3.  The DOCSIS MAC Layer and Service Flows\n   The DOCSIS Media Access Control\
    \ (sub-)layer provides tools for\n   configuring differentiated Quality of Service\
    \ (QoS) for different\n   applications by the use of Packet Classifiers and Service\
    \ Flows.\n   Each Service Flow has an associated QoS parameter set that defines\n\
    \   the treatment of the packets that traverse the Service Flow.  These\n   parameters\
    \ include, for example, Minimum Reserved Traffic Rate,\n   Maximum Sustained Traffic\
    \ Rate, Peak Traffic Rate, Maximum Traffic\n   Burst, and Traffic Priority.  Each\
    \ upstream Service Flow corresponds\n   to a queue in the cable modem, and each\
    \ downstream Service Flow\n   corresponds to a queue in the CMTS.  The DOCSIS\
    \ AQM requirements\n   mandate that the CM and CMTS implement the AQM algorithm\
    \ (and allow\n   it to be disabled, if needed) on each Service Flow queue\n  \
    \ independently.\n   Packet Classifiers can match packets based upon several fields\
    \ in the\n   packet/frame headers including the Ethernet header, IP header, and\n\
    \   TCP/UDP header.  Matched packets are then queued in the associated\n   Service\
    \ Flow queue.\n   Each cable modem can be configured with multiple Packet Classifiers\n\
    \   and Service Flows.  The maximum number of such entities that a cable\n   modem\
    \ supports is an implementation decision for the manufacturer,\n   but modems\
    \ typically support 16 or 32 upstream Service Flows and at\n   least that many\
    \ Packet Classifiers.  Similarly, the CMTS supports\n   multiple downstream Service\
    \ Flows and multiple Packet Classifiers per\n   cable modem.\n   It is typical\
    \ that upstream and downstream Service Flows used for\n   broadband Internet access\
    \ are configured with a Maximum Sustained\n   Traffic Rate.  This QoS parameter\
    \ rate-shapes the traffic onto the\n   DOCSIS link and is the main parameter that\
    \ defines the service\n   offering.  Additionally, it is common that upstream\
    \ and downstream\n   Service Flows are configured with a Maximum Traffic Burst\
    \ and a Peak\n   Traffic Rate.  These parameters allow the service to burst at\
    \ a\n   higher (sometimes significantly higher) rate than is defined in the\n\
    \   Maximum Sustained Traffic Rate for the amount of bytes configured in\n   Maximum\
    \ Traffic Burst, as long as the long-term average data rate\n   remains at or\
    \ below the Maximum Sustained Traffic Rate.\n   Mathematically, what is enforced\
    \ is that the traffic placed on the\n   DOCSIS link in the time interval (t1,t2)\
    \ complies with the following\n   rate-shaping equations:\n      TxBytes(t1,t2)\
    \ <= (t2-t1)*R/8 + B\n      TxBytes(t1,t2) <= (t2-t1)*P/8 + 1522\n   for all values\
    \ t2>t1, where:\n      R = Maximum Sustained Traffic Rate (bps)\n      P = Peak\
    \ Traffic Rate (bps)\n      B = Maximum Traffic Burst (bytes)\n   The result of\
    \ this configuration is that the link rate available to\n   the Service Flow varies\
    \ based on the pattern of load.  If the load\n   that the Service Flow places\
    \ on the link is less than the Maximum\n   Sustained Traffic Rate, the Service\
    \ Flow \"earns\" credit that it can\n   then use (should the load increase) to\
    \ burst at the Peak Traffic\n   Rate.  This dynamic is important since these rate\
    \ changes\n   (particularly the decrease in data rate once the traffic burst credit\n\
    \   is exhausted) can induce a step increase in buffering latency.\n"
- title: 4.  DOCSIS-PIE vs. PIE
  contents:
  - "4.  DOCSIS-PIE vs. PIE\n   There are a number of differences between the version\
    \ of the PIE\n   algorithm that is mandated for cable modems in the DOCSIS\n \
    \  specifications and the version described in [RFC8033].  These\n   differences\
    \ are described in the following subsections.\n"
- title: 4.1.  Latency Target
  contents:
  - "4.1.  Latency Target\n   The latency target (a.k.a. delay reference) is a key\
    \ parameter that\n   affects, among other things, the trade-off in performance\
    \ between\n   latency-sensitive applications and bulk TCP applications.  Via\n\
    \   simulation studies, a value of 10 ms was identified as providing a\n   good\
    \ balance of performance.  However, it is recognized that there\n   may be service\
    \ offerings for which this value doesn't provide the\n   best performance balance.\
    \  As a result, this is provided as a\n   configuration parameter that the operator\
    \ can set independently on\n   each upstream Service Flow.  If not explicitly\
    \ set by the operator,\n   the modem will use 10 ms as the default value.\n"
- title: 4.2.  Departure Rate Estimation
  contents:
  - "4.2.  Departure Rate Estimation\n   The PIE algorithm utilizes a departure rate\
    \ estimator to track\n   fluctuations in the egress rate for the queue and to\
    \ generate a\n   smoothed estimate of this rate for use in the drop probability\n\
    \   calculation.  This estimator may be well suited to many link\n   technologies\
    \ but is not ideal for DOCSIS upstream links for a number\n   of reasons.\n  \
    \ First, the bursty nature of the upstream transmissions, in which the\n   queue\
    \ drains at line rate (up to ~100 Mbps for DOCSIS 3.0 and ~1 Gbps\n   for DOCSIS\
    \ 3.1) and then is blocked until the next transmit\n   opportunity, results in\
    \ the potential for inaccuracy in measurement,\n   given that the PIE departure\
    \ rate estimator starts each measurement\n   during a transmission burst and ends\
    \ each measurement during a\n   (possibly different) transmission burst.  For\
    \ example, in the case\n   where the start and end of measurement occur within\
    \ a single burst,\n   the PIE estimator will calculate the egress rate to be equal\
    \ to the\n   line rate, rather than the average rate available to the modem.\n\
    \   Second, the latency introduced by the DOCSIS request-grant mechanism\n   can\
    \ result in some further inaccuracy.  In typical conditions, the\n   request-grant\
    \ mechanism can add between ~4 ms and ~8 ms of latency to\n   the forwarding of\
    \ upstream traffic.  Within that range, the amount of\n   additional latency that\
    \ affects any individual data burst is\n   effectively random, being influenced\
    \ by the arrival time of the burst\n   relative to the next request transmit opportunity,\
    \ among other\n   factors.\n   Third, in the significant majority of cases, the\
    \ departure rate,\n   while variable, is controlled by the modem itself via the\
    \ pair of\n   token bucket rate-shaping equations described in Section 3.\n  \
    \ Together, these two equations enforce a Maximum Sustained Traffic\n   Rate,\
    \ a Peak Traffic Rate, and a Maximum Traffic Burst size for the\n   modem's requested\
    \ bandwidth.  The implication of this is that the\n   modem, in the significant\
    \ majority of cases, will know precisely what\n   the departure rate will be and\
    \ can predict exactly when transitions\n   between the Peak Traffic Rate and Maximum\
    \ Sustained Traffic Rate will\n   occur.  Compare this to the PIE estimator, which\
    \ would be simply\n   reacting to (and smoothing its estimate of) those rate transitions\n\
    \   after the fact.\n   Finally, since the modem is already implementing the dual-token\n\
    \   bucket traffic shaper, it contains enough internal state to calculate\n  \
    \ predicted queuing delay with a minimum of computations.  Furthermore,\n   these\
    \ computations only need to be run at every drop probability\n   update interval,\
    \ as opposed to the PIE estimator, which runs a\n   similar number of computations\
    \ on each packet dequeue event.\n   For these reasons, the DOCSIS-PIE algorithm\
    \ utilizes the\n   configuration and state of the dual-token bucket traffic shaper\
    \ to\n   translate queue depth into predicted queuing delay, rather than\n   implementing\
    \ the departure rate estimator defined in PIE.\n"
- title: 4.3.  Enhanced Burst Protection
  contents:
  - "4.3.  Enhanced Burst Protection\n   The PIE algorithm [RFC8033] has two states:\
    \ INACTIVE and ACTIVE.\n   During the INACTIVE state, AQM packet drops are suppressed.\
    \  The\n   algorithm transitions to the ACTIVE state when the queue exceeds 1/3\n\
    \   of the buffer size.  Upon transition to the ACTIVE state, PIE\n   includes\
    \ a burst protection feature in which the AQM packet drops are\n   suppressed\
    \ for the first 150 ms.  Since DOCSIS-PIE is predominantly\n   deployed on consumer\
    \ broadband connections, a more sophisticated\n   burst protection was developed\
    \ to provide better performance in the\n   presence of a single TCP session.\n\
    \   Where the PIE algorithm has two states, DOCSIS-PIE has three.  The\n   INACTIVE\
    \ and ACTIVE states in DOCSIS-PIE are identical to those\n   states in PIE.  The\
    \ QUIESCENT state is a transitional state between\n   INACTIVE and ACTIVE.  The\
    \ DOCSIS-PIE algorithm transitions from\n   INACTIVE to QUIESCENT when the queue\
    \ exceeds 1/3 of the buffer size.\n   In the QUIESCENT state, packet drops are\
    \ immediately enabled, and\n   upon the first packet drop, the algorithm transitions\
    \ to the ACTIVE\n   state (where drop probability is reset to zero for the 150\
    \ ms\n   duration of the burst protection as in PIE).  From the ACTIVE state,\n\
    \   the algorithm transitions to QUIESCENT if the drop probability has\n   decayed\
    \ to zero and the queuing latency has been less than half of\n   the LATENCY_TARGET\
    \ for two update intervals.  The algorithm then\n   fully resets to the INACTIVE\
    \ state if this \"quiet\" condition exists\n   for the duration of the BURST_RESET_TIMEOUT\
    \ (1 second).  One end\n   result of the addition of the QUIESCENT state is that\
    \ a single packet\n   drop can occur relatively early on during an initial burst,\
    \ whereas\n   all drops would be suppressed for at least 150 ms of the burst\n\
    \   duration in PIE.  The other end result is that if traffic stops and\n   then\
    \ resumes within 1 second, DOCSIS-PIE can directly drop a single\n   packet and\
    \ then re-enter burst protection, whereas PIE would require\n   that the buffer\
    \ exceed 1/3 full.\n"
- title: 4.4.  Expanded Auto-Tuning Range
  contents:
  - "4.4.  Expanded Auto-Tuning Range\n   The PIE algorithm scales the Proportional\
    \ and Integral coefficients\n   based on the current drop probability.  The DOCSIS-PIE\
    \ algorithm\n   extends this scaling to cover values of drop probability greater\
    \ than\n   1, which can occur as a result of the drop probability scaling\n  \
    \ function described in Section 4.6.  As an example, if a flood of non-\n   responsive\
    \ 64-byte packets were to arrive at a rate that is twice the\n   departure rate,\
    \ the DOCSIS-PIE steady-state condition would be to\n   drop 50% of these packets,\
    \ which implies that drop probability would\n   have the value of 8.00.\n"
- title: 4.5.  Trigger for Exponential Decay
  contents:
  - "4.5.  Trigger for Exponential Decay\n   The PIE algorithm includes a mechanism\
    \ by which the drop probability\n   is allowed to decay exponentially (rather\
    \ than linearly) when it is\n   detected that the buffer is empty.  In the DOCSIS\
    \ case, recently\n   arrived packets may reside in the buffer due to the request-grant\n\
    \   latency even if the link is effectively idle.  As a result, the\n   buffer\
    \ may not be identically empty in the situations for which the\n   exponential\
    \ decay is intended.  To compensate for this, we trigger\n   exponential decay\
    \ when the buffer occupancy is less than 5 ms * Peak\n   Traffic Rate.\n"
- title: 4.6.  Drop Probability Scaling
  contents:
  - "4.6.  Drop Probability Scaling\n   The DOCSIS-PIE algorithm scales the calculated\
    \ drop probability based\n   on the ratio of the packet size to a constant value\
    \ of 1024 bytes\n   (representing approximate average packet size).  While [RFC7567]\
    \ in\n   general recommends against this type of scaling, we note that DOCSIS-\n\
    \   PIE is expected to be used predominantly to manage upstream queues in\n  \
    \ residential broadband deployments, where we believe the benefits\n   outweigh\
    \ the disadvantages.  As a safeguard to prevent a flood of\n   small packets from\
    \ starving flows that use larger packets, DOCSIS-PIE\n   limits the scaled probability\
    \ to a defined maximum value of 0.85.\n"
- title: 4.7.  Support for Explicit Congestion Notification
  contents:
  - "4.7.  Support for Explicit Congestion Notification\n   DOCSIS-PIE does not include\
    \ support for Explicit Congestion\n   Notification (ECN).  Cable modems are essentially\
    \ IEEE 802.1d\n   Ethernet bridges and so are not designed to modify IP header\
    \ fields.\n   Additionally, the packet-processing pipeline in a cable modem is\n\
    \   commonly implemented in hardware.  As a result, introducing support\n   for\
    \ ECN would engender a significant redesign of cable modem data\n   path hardware,\
    \ and would be difficult or impossible to modify in the\n   future.  At the time\
    \ of the development of DOCSIS-PIE, which\n   coincided with the development of\
    \ modem chip designs, the benefits of\n   ECN marking relative to packet drop\
    \ were considered to be relatively\n   minor; there was considerable discussion\
    \ about differential treatment\n   of ECN-capable packets in the AQM drop/mark\
    \ decision, and there were\n   some initial suggestions that a new ECN approach\
    \ was needed.  Due to\n   this uncertainty, we chose not to include support for\
    \ ECN.\n"
- title: 5.  Implementation Guidance
  contents:
  - "5.  Implementation Guidance\n   The AQM space is an evolving one, and it is expected\
    \ that continued\n   research in this field may result in improved algorithms\
    \ in the\n   future.\n   As part of defining the DOCSIS-PIE algorithm, we split\
    \ the pseudocode\n   definition into two components: a \"data path\" component\
    \ and a\n   \"control path\" component.  The control path component contains the\n\
    \   packet drop probability update functionality, whereas the data path\n   component\
    \ contains the per-packet operations, including the drop\n   decision logic.\n\
    \   It is understood that some aspects of the cable modem implementation\n   may\
    \ be done in hardware, particularly functions that handle packet\n   processing.\n\
    \   While the DOCSIS specifications don't mandate the internal\n   implementation\
    \ details of the cable modem, modem implementers are\n   strongly advised against\
    \ implementing the control path functionality\n   in hardware.  The intent of\
    \ this advice is to retain the possibility\n   that future improvements in AQM\
    \ algorithms can be accommodated via\n   software updates to deployed devices.\n"
- title: 6.  Security Considerations
  contents:
  - "6.  Security Considerations\n   This document describes an active queue management\
    \ algorithm based on\n   [RFC8033] for implementation in DOCSIS cable modem devices.\
    \  This\n   algorithm introduces no specific security exposures.\n"
- title: 7.  References
  contents:
  - '7.  References

    '
- title: 7.1.  Normative References
  contents:
  - "7.1.  Normative References\n   [RFC8033]  Pan, R., Natarajan, P., Baker, F.,\
    \ and G. White,\n              \"Proportional Integral Controller Enhanced (PIE):\
    \ A\n              Lightweight Control Scheme to Address the Bufferbloat\n   \
    \           Problem\", RFC 8033, DOI 10.17487/RFC8033, February 2017,\n      \
    \        <http://www.rfc-editor.org/info/rfc8033>.\n"
- title: 7.2.  Informative References
  contents:
  - "7.2.  Informative References\n   [CommMag]  White, G., \"Active queue management\
    \ in DOCSIS 3.1\n              networks\", IEEE Communications Magazine vol. 53,\
    \ no. 3,\n              pp. 126-132, DOI 10.1109/MCOM.2015.7060493, March 2015.\n\
    \   [DOCSIS-AQM]\n              White, G., \"Active Queue Management in DOCSIS\
    \ 3.x Cable\n              Modems\", May 2014, <http://www.cablelabs.com/\n  \
    \            wp-content/uploads/2014/06/DOCSIS-AQM_May2014.pdf>.\n   [DOCSIS_3.0]\n\
    \              CableLabs, \"MAC and Upper Layer Protocols Interface\n        \
    \      Specification\", DOCSIS 3.0, January 2017,\n              <https://apps.cablelabs.com/specification/\n\
    \              CM-SP-MULPIv3.0>.\n   [DOCSIS_3.1]\n              CableLabs, \"\
    MAC and Upper Layer Protocols Interface\n              Specification\", DOCSIS\
    \ 3.1, January 2017,\n              <https://apps.cablelabs.com/specification/\n\
    \              CM-SP-MULPIv3.1>.\n   [RFC7567]  Baker, F., Ed. and G. Fairhurst,\
    \ Ed., \"IETF\n              Recommendations Regarding Active Queue Management\"\
    ,\n              BCP 197, RFC 7567, DOI 10.17487/RFC7567, July 2015,\n       \
    \       <http://www.rfc-editor.org/info/rfc7567>.\n"
- title: Appendix A.  DOCSIS-PIE Algorithm Definition
  contents:
  - "Appendix A.  DOCSIS-PIE Algorithm Definition\n   PIE defines two functions organized\
    \ here into two design blocks:\n   1.  Control path block -- a periodically running\
    \ algorithm that\n       calculates a drop probability based on the estimated\
    \ queuing\n       latency and queuing latency trend.\n   2.  Data path block,\
    \ a function that occurs on each packet enqueue\n       that implements a per-packet\
    \ drop decision based on the drop\n       probability.\n   It is desirable to\
    \ have the ability to update the control path block\n   based on operational experience\
    \ with PIE deployments.\n"
- title: A.1.  DOCSIS-PIE AQM Constants and Variables
  contents:
  - 'A.1.  DOCSIS-PIE AQM Constants and Variables

    '
- title: A.1.1.  Configuration Parameters
  contents:
  - "A.1.1.  Configuration Parameters\n   o  LATENCY_TARGET.  AQM Latency Target for\
    \ this Service Flow\n   o  PEAK_RATE.  Service Flow configured Peak Traffic Rate,\
    \ expressed\n      in bytes/second\n   o  MSR.  Service Flow configured Maximum\
    \ Sustained Traffic Rate,\n      expressed in bytes/second\n   o  BUFFER_SIZE.\
    \  The size (in bytes) of the buffer for this Service\n      Flow\n"
- title: A.1.2.  Constant Values
  contents:
  - "A.1.2.  Constant Values\n   o  A = 0.25, B = 2.5.  Weights in the drop probability\
    \ calculation\n   o  INTERVAL = 16 ms.  Update interval for drop probability\n\
    \   o  BURST_RESET_TIMEOUT = 1 second\n   o  MAX_BURST = 142 ms (150 ms - 8 ms\
    \ (update error))\n   o  MEAN_PKTSIZE = 1024 bytes\n   o  MIN_PKTSIZE = 64 bytes\n\
    \   o  PROB_LOW = 0.85\n   o  PROB_HIGH = 8.5\n   o  LATENCY_LOW = 5 ms\n   o\
    \  LATENCY_HIGH = 200 ms\n"
- title: A.1.3.  Variables
  contents:
  - "A.1.3.  Variables\n   o  drop_prob_. The current packet drop probability\n  \
    \ o  accu_prob_. Accumulated drop probability since last drop\n   o  qdelay_old_.\
    \ The previous queue delay estimate\n   o  burst_allowance_. Countdown for burst\
    \ protection, initialize to 0\n   o  burst_reset_. Counter to reset burst\n  \
    \ o  aqm_state_. AQM activity state encoding 3 states:\n         INACTIVE - Queue\
    \ staying below 1/3 full, suppress AQM drops\n         QUIESCENT - Transition\
    \ state\n         ACTIVE - Normal AQM drops (after burst protection period)\n\
    \   o  queue_. Holds the pending packets\n"
- title: A.1.4.  Public/System Functions
  contents:
  - "A.1.4.  Public/System Functions\n   o  drop(packet).  Drops/discards a packet\n\
    \   o  random().  Returns a uniform random value in the range 0 ~ 1\n   o  queue_.is_full().\
    \  Returns true if queue_ is full\n   o  queue_.byte_length().  Returns current\
    \ queue_ length in bytes,\n      including all MAC PDU bytes without DOCSIS MAC\
    \ overhead\n   o  queue_.enque(packet).  Adds packet to tail of queue_\n   o \
    \ msrtokens().  Returns current token credits (in bytes) from the\n      Maximum\
    \ Sustained Traffic Rate token bucket\n   o  packet.size().  Returns size of packet\n"
- title: A.2.  DOCSIS-PIE AQM Control Path
  contents:
  - "A.2.  DOCSIS-PIE AQM Control Path\n   The DOCSIS-PIE control path performs the\
    \ following:\n   o  Calls control_path_init() at Service Flow creation\n   o \
    \ Calls calculate_drop_prob() at a regular INTERVAL (16 ms)\n   ================\n\
    \   //  Initialization function\n   control_path_init() {\n       drop_prob_ =\
    \ 0;\n       qdelay_old_ = 0;\n       burst_reset_ = 0;\n       aqm_state_ = INACTIVE;\n\
    \   }\n   //  Background update, occurs every INTERVAL\n   calculate_drop_prob()\
    \ {\n       if (queue_.byte_length() <= msrtokens()) {\n           qdelay = queue_.byte_length()\
    \ / PEAK_RATE;\n       } else {\n           qdelay = ((queue_.byte_length() -\
    \ msrtokens()) / MSR \\\n                     +  msrtokens() / PEAK_RATE);\n \
    \      }\n       if (burst_allowance_ > 0) {\n           drop_prob_ = 0;\n   \
    \        burst_allowance_ = max(0, burst_allowance_ - INTERVAL);\n       } else\
    \ {\n           p = A * (qdelay - LATENCY_TARGET) + \\\n               B * (qdelay\
    \ - qdelay_old_);\n           // Since A=0.25 & B=2.5, can be implemented\n  \
    \         // with shift and add\n           if (drop_prob_ < 0.000001) {\n   \
    \            p /= 2048;\n           } else if (drop_prob_ < 0.00001) {\n     \
    \          p /= 512;\n           } else if (drop_prob_ < 0.0001) {\n         \
    \      p /= 128;\n           } else if (drop_prob_ < 0.001) {\n              \
    \ p /= 32;\n           } else if (drop_prob_ < 0.01) {\n               p /= 8;\n\
    \           } else if (drop_prob_ < 0.1) {\n               p /= 2;\n         \
    \  } else if (drop_prob_ < 1) {\n               p /= 0.5;\n           } else if\
    \ (drop_prob_ < 10) {\n               p /= 0.125;\n           } else {\n     \
    \          p /= 0.03125;\n           }\n           if ((drop_prob_ >= 0.1) &&\
    \ (p > 0.02)) {\n               p = 0.02;\n           }\n           drop_prob_\
    \ += p;\n           /* some special cases */\n           if (qdelay < LATENCY_LOW\
    \ && qdelay_old_ < LATENCY_LOW) {\n               drop_prob_ *= 0.98;    // exponential\
    \ decay\n           } else if (qdelay > LATENCY_HIGH) {\n               drop_prob_\
    \ += 0.02;   // ramp up quickly\n           }\n           drop_prob_ = max(0,\
    \ drop_prob_);\n           drop_prob_ = min(drop_prob_, \\\n                 \
    \       PROB_LOW * MEAN_PKTSIZE/MIN_PKTSIZE);\n       }\n       // Check if all\
    \ is quiet\n       quiet = (qdelay < 0.5 * LATENCY_TARGET)\n               &&\
    \ (qdelay_old_ < 0.5 * LATENCY_TARGET)\n               && (drop_prob_ == 0)\n\
    \               && (burst_allowance_ == 0);\n       // Update AQM state based\
    \ on quiet or !quiet\n       if ((aqm_state_ == ACTIVE) && quiet) {\n        \
    \   aqm_state_ = QUIESCENT;\n           burst_reset_ = 0;\n       } else if (aqm_state_\
    \ == QUIESCENT) {\n           if (quiet) {\n               burst_reset_ += INTERVAL\
    \ ;\n               if (burst_reset_ > BURST_RESET_TIMEOUT) {\n              \
    \     burst_reset_ = 0;\n                   aqm_state_ = INACTIVE;\n         \
    \      }\n           } else {\n               burst_reset_ = 0;\n           }\n\
    \       }\n       qdelay_old_ = qdelay;\n   }\n"
- title: A.3.  DOCSIS-PIE AQM Data Path
  contents:
  - "A.3.  DOCSIS-PIE AQM Data Path\n   The DOCSIS-PIE data path performs the following:\n\
    \   o  Calls enque() in response to an incoming packet from the CMCI\n   ================\n\
    \   enque(packet) {\n       if (queue_.is_full()) {\n           drop(packet);\n\
    \           accu_prob_ = 0;\n       } else if (drop_early(packet, queue_.byte_length()))\
    \ {\n           drop(packet);\n       } else {\n           queue_.enque(packet);\n\
    \       }\n   }\n   ////////////////\n   drop_early(packet, queue_length) {\n\
    \       // if still in burst protection, suppress AQM drops\n       if (burst_allowance_\
    \ > 0) {\n           return FALSE;\n       }\n       // if drop_prob_ goes to\
    \ zero, clear accu_prob_\n       if (drop_prob_ == 0) {\n           accu_prob_\
    \ = 0;\n       }\n       if (aqm_state_ == INACTIVE) {\n           if (queue_.byte_length()\
    \ < BUFFER_SIZE/3) {\n               // if queue is still small, stay in\n   \
    \            // INACTIVE state and suppress AQM drops\n               return FALSE;\n\
    \           } else {\n               // otherwise transition to QUIESCENT state\n\
    \               aqm_state_ = QUIESCENT;\n           }\n       }\n       //The\
    \ CM can quantize packet.size to 64, 128, 256, 512, 768,\n       // 1024, 1280,\
    \ 1536, 2048 in the calculation below\n       p1 = drop_prob_ * packet.size()\
    \ / MEAN_PKTSIZE;\n       p1 = min(p1, PROB_LOW);\n       accu_prob_ += p1;\n\
    \       // Suppress AQM drops in certain situations\n       if ( (qdelay_old_\
    \ < 0.5 * LATENCY_TARGET && drop_prob_ < 0.2)\n             || (queue_.byte_length()\
    \ <= 2 * MEAN_PKTSIZE) ) {\n           return FALSE;\n       }\n       if (accu_prob_\
    \ < PROB_LOW) {  // avoid dropping too fast due\n            return FALSE;   \
    \         // to bad luck of coin tosses...\n       } else if (accu_prob_ >= PROB_HIGH)\
    \ { // ...and avoid dropping\n           drop = TRUE;                      //\
    \ too slowly\n       } else {                        //Random drop\n         \
    \  double u = random();        // 0 ~ 1\n           if (u > p1)\n            \
    \  return FALSE;\n           else\n               drop = TRUE;\n       }\n   \
    \    // At this point, drop == TRUE, so packet will be dropped.\n       // Reset\
    \ accu_prob_\n       accu_prob_ = 0;\n       // If in QUIESCENT state, packet\
    \ drop triggers\n       // ACTIVE state and start of burst protection\n      \
    \ if (aqm_state_ == QUIESCENT) {\n           aqm_state_ = ACTIVE;\n          \
    \ burst_allowance_ = MAX_BURST;\n       }\n       return TRUE;\n   }\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Greg White\n   CableLabs\n   858 Coal Creek Circle\n \
    \  Louisville, CO  80027-9750\n   United States of America\n   Email: g.white@cablelabs.com\n\
    \   Rong Pan\n   Cisco Systems\n   510 McCarthy Blvd\n   Milpitas, CA  95134\n\
    \   United States of America\n   Email: ropan@cisco.com\n"
