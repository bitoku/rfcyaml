- title: __initial_text__
  contents:
  - '   The Address plus Port (A+P) Approach to the IPv4 Address Shortage

    '
- title: Abstract
  contents:
  - "Abstract\n   We are facing the exhaustion of the IANA IPv4 free IP address pool.\n\
    \   Unfortunately, IPv6 is not yet deployed widely enough to fully\n   replace\
    \ IPv4, and it is unrealistic to expect that this is going to\n   change before\
    \ the depletion of IPv4 addresses.  Letting hosts\n   seamlessly communicate in\
    \ an IPv4 world without assigning a unique\n   globally routable IPv4 address\
    \ to each of them is a challenging\n   problem.\n   This document proposes an\
    \ IPv4 address sharing scheme, treating some\n   of the port number bits as part\
    \ of an extended IPv4 address (Address\n   plus Port, or A+P).  Instead of assigning\
    \ a single IPv4 address to a\n   single customer device, we propose to extend\
    \ the address field by\n   using bits from the port number range in the TCP/UDP\
    \ header as\n   additional endpoint identifiers, thus leaving a reduced range\
    \ of\n   ports available to applications.  This means assigning the same IPv4\n\
    \   address to multiple clients (e.g., Customer Premises Equipment (CPE),\n  \
    \ mobile phones), each with its assigned port range.  In the face of\n   IPv4\
    \ address exhaustion, the need for addresses is stronger than the\n   need to\
    \ be able to address thousands of applications on a single\n   host.  If address\
    \ translation is needed, the end-user should be in\n   control of the translation\
    \ process -- not some smart boxes in the\n   core.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document is not an Internet Standards Track specification;\
    \ it is\n   published for examination, experimental implementation, and\n   evaluation.\n\
    \   This document defines an Experimental Protocol for the Internet\n   community.\
    \  This document is a product of the Internet Engineering\n   Task Force (IETF).\
    \  It represents the consensus of the IETF\n   community.  It has received public\
    \ review and has been approved for\n   publication by the Internet Engineering\
    \ Steering Group (IESG).  Not\n   all documents approved by the IESG are a candidate\
    \ for any level of\n   Internet Standard; see Section 2 of RFC 5741.\n   Information\
    \ about the current status of this document, any errata,\n   and how to provide\
    \ feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc6346.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2011 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction . . . . . . . . . . . . . . . . . . .\
    \ . . . . . .  4\n     1.1.  Problems with Carrier Grade NATs . . . . . . . .\
    \ . . . . .  4\n     1.2.  Requirements Language  . . . . . . . . . . . . . .\
    \ . . . .  5\n   2.  Terminology  . . . . . . . . . . . . . . . . . . . . . .\
    \ . . .  5\n   3.  Design Constraints and Functions . . . . . . . . . . . . .\
    \ . .  6\n     3.1.  Design Constraints . . . . . . . . . . . . . . . . . . .\
    \ .  6\n     3.2.  A+P Functions  . . . . . . . . . . . . . . . . . . . . . .\
    \  7\n     3.3.  Overview of the A+P Solution . . . . . . . . . . . . . . .  8\n\
    \       3.3.1.  Signaling  . . . . . . . . . . . . . . . . . . . . . .  9\n  \
    \     3.3.2.  Address Realm  . . . . . . . . . . . . . . . . . . . . 11\n    \
    \   3.3.3.  Reasons for Allowing Multiple A+P Gateways . . . . . . 15\n      \
    \ 3.3.4.  Overall A+P Architecture . . . . . . . . . . . . . . . 16\n     3.4.\
    \  A+P Experiments  . . . . . . . . . . . . . . . . . . . . . 17\n   4.  Stateless\
    \ A+P Mapping Function . . . . . . . . . . . . . . . . 18\n     4.1.  Stateless\
    \ A+P Mapping (SMAP) Gateway Function\n           Description  . . . . . . . .\
    \ . . . . . . . . . . . . . . . 18\n     4.2.  Implementation Mode  . . . . .\
    \ . . . . . . . . . . . . . . 20\n     4.3.  Towards IPv6-Only Networks . . .\
    \ . . . . . . . . . . . . . 22\n     4.4.  PRR: On Stateless and Binding Table\
    \ Modes  . . . . . . . . 22\n     4.5.  General Recommendations on SMAP  . . .\
    \ . . . . . . . . . . 23\n   5.  Deployment Scenarios . . . . . . . . . . . .\
    \ . . . . . . . . . 24\n     5.1.  A+P Deployment Models  . . . . . . . . . .\
    \ . . . . . . . . 24\n       5.1.1.  A+P for Broadband Providers  . . . . . .\
    \ . . . . . . . 24\n       5.1.2.  A+P for Mobile Providers . . . . . . . . .\
    \ . . . . . . 24\n       5.1.3.  A+P from the Provider Network Perspective  .\
    \ . . . . . 25\n     5.2.  Dynamic Allocation of Port Ranges  . . . . . . . .\
    \ . . . . 27\n     5.3.  Example of A+P-Forwarded Packets . . . . . . . . . .\
    \ . . . 28\n       5.3.1.  Forwarding of Standard Packets . . . . . . . . . .\
    \ . . 32\n       5.3.2.  Handling ICMP  . . . . . . . . . . . . . . . . . . .\
    \ . 32\n       5.3.3.  Fragmentation  . . . . . . . . . . . . . . . . . . . .\
    \ 33\n       5.3.4.  Limitations of the A+P Approach  . . . . . . . . . . . 33\n\
    \       5.3.5.  Port Allocation Strategy Agnostic  . . . . . . . . . . 34\n  \
    \ 6.  Security Considerations  . . . . . . . . . . . . . . . . . . . 34\n   7.\
    \  Acknowledgments  . . . . . . . . . . . . . . . . . . . . . . . 35\n   8.  References\
    \ . . . . . . . . . . . . . . . . . . . . . . . . . . 35\n     8.1.  Normative\
    \ References . . . . . . . . . . . . . . . . . . . 35\n     8.2.  Informative\
    \ References . . . . . . . . . . . . . . . . . . 35\n   9.  Contributing Authors\
    \ . . . . . . . . . . . . . . . . . . . . . 37\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   This document describes a technique to deal with the imminent\
    \ IPv4\n   address space exhaustion.  Many large Internet Service Providers\n\
    \   (ISPs) face the problem that their networks' customer edges are so\n   large\
    \ that it will soon not be possible to provide each customer with\n   a unique\
    \ public IPv4 address.  Therefore, although undesirable,\n   address sharing,\
    \ in the same molds as NAT, is inevitable.\n   To allow end-to-end connectivity\
    \ between IPv4-speaking applications,\n   we propose to extend the semantics of\
    \ the IPv4 address with bits from\n   the UDP/TCP header.  Assuming we could limit\
    \ the applications' port\n   addressing to any number of bits lower than 16, we\
    \ can increase the\n   effective size of an IPv4 address by remaining additional\
    \ bits of up\n   to 16.  In this scenario, 1 to 65536 customers could be multiplexed\n\
    \   on the same IPv4 address, while allowing them a fixed or dynamic\n   range\
    \ of 1 to 65536 ports.  Customers could, for example, receive an\n   initial fixed\
    \ port range, defined by the operator, and dynamically\n   request additional\
    \ blocks, depending on their contract.  We call this\n   \"extended addressing\"\
    \ or \"A+P\" (Address plus Port) addressing.  The\n   main advantage of A+P is\
    \ that it preserves the Internet \"end-to-end\"\n   paradigm by not requiring\
    \ translation (at least for some ports) of an\n   IP address.\n"
- title: 1.1.  Problems with Carrier Grade NATs
  contents:
  - "1.1.  Problems with Carrier Grade NATs\n   Various forms of NATs will be installed\
    \ at different levels and\n   places in the IPv4 Internet to achieve address compression.\
    \  This\n   document argues for mechanisms where this happens as close to the\n\
    \   edge of the network as possible, thereby minimizing damage to the\n   End-to-End\
    \ Principle and allowing end-customers to retain control\n   over the address\
    \ and port translation.  Therefore, it is essential to\n   create mechanisms to\
    \ \"bypass\" NATs in the core, when applicable, and\n   keep the control at the\
    \ end-user.\n   With Carrier Grade NATs (CGNs) in the core of the network, the\
    \ user\n   is trapped behind unchangeable application policies, and the\n   deployment\
    \ of new applications is hindered by the need to implement\n   the corresponding\
    \ Application Level Gateways (ALGs) on the CGNs.\n   This is the opposite of the\
    \ \"end-to-end\" model of the Internet.\n   With the smarts at the edges, one\
    \ can easily deploy new applications\n   between consenting endpoints by merely\
    \ tweaking the NATs at the\n   corresponding CPE, or even upgrading them to a\
    \ new version that\n   supports a specific ALG.\n   Today's NATs are typically\
    \ mitigated by offering the customers\n   limited control over them, e.g., port\
    \ forwarding, Universal Plug and\n   Play or the NAT Port Mapping Protocol (UPnP/NAT-PMP).\
    \  However, this\n   is not expected to work with CGNs.  CGN proposals -- other\
    \ than\n   DS-Lite [RFC6333] with A+P or the Port Control Protocol (PCP)\n   [PCP-BASE]\
    \ -- admit that it is not expected that applications that\n   require specific\
    \ port assignment or port mapping from the NAT box\n   will keep working.\n  \
    \ Another issue with CGNs is the trade-off between session state and\n   network\
    \ placement.  The farther from the edge the CGN is placed, the\n   more session\
    \ state needs to be kept due to larger subscriber\n   aggregation and the more\
    \ disruption that occurs in the case of a\n   failure.  In order to reduce the\
    \ state, CGNs would end up somewhere\n   closer to the edge.  Thus, the CGN trades\
    \ scalability for the amount\n   of state that needs to be kept, which makes optimally\
    \ placing a CGN a\n   hard engineering problem.\n   In some deployment scenarios,\
    \ a CGN can be seen as the single point\n   of failure, and therefore the availability\
    \ of delivered services can\n   be impacted by a single CGN device.  Means to\
    \ ensure state\n   synchronization and failover would be required to allow for\
    \ service\n   continuity whenever a failure occurs.\n   Intra-domain paths may\
    \ not be optimal for communications between two\n   nodes connected to the same\
    \ domain deploying CGNs; they may lead to\n   path stretches.\n"
- title: 1.2.  Requirements Language
  contents:
  - "1.2.  Requirements Language\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\"\
    , \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"\
    MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described\
    \ in RFC 2119 [RFC2119].\n"
- title: 2.  Terminology
  contents:
  - "2.  Terminology\n   This document makes use of the following terms:\n      Public\
    \ Realm: This realm contains only public routable IPv4\n      addresses.  Packets\
    \ in this realm are forwarded based on the\n      destination IPv4 address.\n\
    \      A+P Realm: This realm contains both public routable IPv4 and A+P\n    \
    \  addresses.\n      A+P Packet: A regular IPv4 packet is forwarded based on the\n\
    \      destination IPv4 address and the TCP/UDP port numbers.\n      Private Realm:\
    \ This realm contains IPv4 addresses that are not\n      globally routed.  They\
    \ may be taken from the [RFC1918] range.\n      However, this document does not\
    \ make such an assumption.  We\n      regard as private address space any IPv4\
    \ address that needs to be\n      translated in order to gain global connectivity,\
    \ irrespective of\n      whether or not it falls in [RFC1918] space.\n      Port-Range\
    \ Router (PRR): A device that forwards A+P packets.\n      Customer Premises Equipment\
    \ (CPE): cable or DSL modem.\n      Provider Edge (PE) Router: Customer aggregation\
    \ router.\n      Provider Border Router (BR): Provider's edge to other providers.\n\
    \      Network Core Routers (Core): Provider routers that are not at the\n   \
    \   edges.\n"
- title: 3.  Design Constraints and Functions
  contents:
  - "3.  Design Constraints and Functions\n   The problem of address space shortage\
    \ is first felt by providers with\n   a very large end-user customer base, such\
    \ as broadband providers and\n   mobile service providers.  Though the cases and\
    \ requirements are\n   slightly different, they share many commonalities.  In\
    \ the following\n   text, we develop a set of overall design constraints for solutions\n\
    \   addressing the IPv4 address shortage problem.\n"
- title: 3.1.  Design Constraints
  contents:
  - "3.1.  Design Constraints\n   We regard several constraints as important for our\
    \ design:\n   1)  End-to-end is under customer control: Customers shall have the\n\
    \       ability to deploy new application protocols at will.  IPv4\n       address\
    \ shortage should not be a license to break the Internet's\n       end-to-end\
    \ paradigm.\n   2)  Backward compatibility: Approaches should be transparent to\n\
    \       unaware users.  Devices or existing applications should be able\n    \
    \   to work without modification.  Emergence of new applications\n       should\
    \ not be limited.\n   3)  Highly scalable and minimal state core: Minimal state\
    \ should be\n       kept inside the ISP's network.  If the operator is rolling\
    \ out\n       A+P incrementally, it is understood there may be state in the\n\
    \       core in the non-A+P part of such a roll-out.\n   4)  Efficiency versus\
    \ complexity: Operators should have the\n       flexibility to trade off port\
    \ multiplexing efficiency and\n       scalability and end-to-end transparency.\n\
    \   5)  \"Double-NAT\" should be avoided: Multiple gateway devices might be\n\
    \       present in a path, and once one has done some translation, those\n   \
    \    packets should not be retranslated.\n   6)  Legal traceability: ISPs must\
    \ be able to provide the identity of\n       a customer from the knowledge of\
    \ the IPv4 public address and the\n       port.  This should have as low an impact\
    \ as is reasonable on\n       storage by the ISP.  We assume that NATs on customer\
    \ premises do\n       not pose much of a problem, while provider NATs need to\
    \ keep\n       additional logs.\n   7)  IPv6 deployment should be encouraged.\
    \  NAT444 strongly biases the\n       users to the deployment of RFC 1918 addressing.\n\
    \   Constraint 5 is important: while many techniques have been deployed\n   to\
    \ allow applications to work through a NAT, traversing cascaded NATs\n   is crucial\
    \ if NATs are being deployed in the core of a provider\n   network.\n"
- title: 3.2.  A+P Functions
  contents:
  - "3.2.  A+P Functions\n   The A+P architecture can be split into three distinct\
    \ functions:\n   encaps/decaps, NAT, and signaling.\n   Encaps/decaps function:\
    \ is used to forward port-restricted A+P\n   packets over intermediate legacy\
    \ devices.  The encapsulation function\n   takes an IPv4 packet, looks up the\
    \ IP and TCP/UDP headers, and puts\n   the packet into the appropriate tunnel.\
    \  The state needed to perform\n   this action is comparable to a forwarding table.\
    \  The decapsulation\n   device SHOULD check if the source address and port of\
    \ packets coming\n   out of the tunnel are legitimate (e.g., see [BCP38]).  Based\
    \ on the\n   result of such a check, the packet MAY be forwarded untranslated,\
    \ MAY\n   be discarded, or MAY be NATed.  In this document, we refer to a\n  \
    \ device that provides this encaps/decaps functionality as a Port-Range\n   Router\
    \ (PRR).\n   Network Address Translation (NAT) function: is used to connect legacy\n\
    \   end-hosts.  Unless upgraded, end-hosts or end-systems are not aware\n   of\
    \ A+P restrictions and therefore assume a full IP address.  The NAT\n   function\
    \ performs any address or port translation, including\n   Application Level Gateways\
    \ (ALGs) whenever required.  The state that\n   has to be kept to implement this\
    \ function is the mapping for which\n   external addresses and ports have been\
    \ mapped to which internal\n   addresses and ports, just as in CPEs embedding\
    \ NAT today.  A subtle,\n   but very important, difference should be noted here:\
    \ the customer has\n   control over the NATing process or might choose to \"bypass\"\
    \ the NAT.\n   If this is done, we call the NAT a Large-Scale NAT (LSN).  However,\n\
    \   if the NAT does NOT allow the customer to control the translation\n   process,\
    \ we call it a CGN.\n   Signaling function: is used to allow A+P-aware devices\
    \ to get to know\n   which ports are assigned to be passed through untranslated\
    \ and what\n   will happen to packets outside the assigned port range (e.g., could\n\
    \   be NATed or discarded).  Signaling may also be used to learn the\n   encapsulation\
    \ method and any endpoint information needed.  In\n   addition, the signaling\
    \ function may be used to dynamically assign\n   the requested port range.\n"
- title: 3.3.  Overview of the A+P Solution
  contents:
  - "3.3.  Overview of the A+P Solution\n   As mentioned above, the core architectural\
    \ elements of the A+P\n   solution are three separated and independent functions:\
    \ the NAT\n   function, the encaps/decaps function, and the signaling function.\n\
    \   The NAT function is similar to a NAT as we know it today: it performs\n  \
    \ a translation between two different address realms.  When the\n   external realm\
    \ is public IPv4 address space, we assume that the\n   translation is many-to-one,\
    \ in order to multiplex many customers on a\n   single public IPv4 address.  The\
    \ only difference with a traditional\n   NAT (Figure 1) is that the translator\
    \ might only be able to use a\n   restricted range of ports when mapping multiple\
    \ internal addresses\n   onto an external one, e.g., the external address realm\
    \ might be port-\n   restricted.\n                   \"internal-side\"       \
    \   \"external-side\"\n                                   +-----+\n          \
    \            internal     |  N  |     external\n                      address\
    \  <---|  A  |---> address\n                       realm       |  T  |      realm\n\
    \                                   +-----+\n                         Figure 1:\
    \ Traditional NAT\n   The encaps/decaps function, on the other hand, is the ability\
    \ to\n   establish a tunnel with another endpoint providing the same function.\n\
    \   This implies some form of signaling to establish a tunnel.  Such\n   signaling\
    \ can be viewed as integrated with DHCP or as a separate\n   service.  Section\
    \ 3.3.1 discusses the constraints of this signaling\n   function.  The tunnel\
    \ can be an IPv6 or IPv4 encapsulation, a layer-2\n   tunnel, or some other form\
    \ of softwire.  Note that the presence of a\n   tunnel allows unmodified, naive,\
    \ or even legacy devices between the\n   two endpoints.\n   Two or more devices\
    \ that provide the encaps/decaps function are\n   linked by tunnels to form an\
    \ A+P subsystem.  The function of each\n   gateway is to encapsulate and decapsulate,\
    \ respectively.  Figure 2\n   depicts the simplest possible A+P subsystem, that\
    \ is, two devices\n   providing the encaps/decaps function.\n                \
    \      +------------------------------------+\n           Private    | +----------+\
    \  tunnel  +----------+ |   Public\n           address  --|-| gateway  |==========|\
    \ gateway  |-|-- address\n           realm      | +----------+          +----------+\
    \ |    realm\n                      +------------------------------------+\n \
    \                                  A+P subsystem\n                     Figure\
    \ 2: A Simple A+P Subsystem\n   Within an A+P subsystem, the public address realm\
    \ is extended by\n   using bits from the port number when forwarding packets.\
    \  Each device\n   is assigned one address from the external realm and a range\
    \ of port\n   numbers.  Hence, devices that are part of an A+P subsystem can\n\
    \   communicate with the public realm without the need for address\n   translation\
    \ (i.e., preserving end-to-end packet integrity): an A+P\n   packet originated\
    \ from within the A+P subsystem can be simply\n   forwarded over tunnels up to\
    \ the endpoint, where it gets decapsulated\n   and routed in the external realm.\n"
- title: 3.3.1.  Signaling
  contents:
  - "3.3.1.  Signaling\n   The following information needs to be available on all\
    \ the gateways\n   in the A+P subsystem.  It is expected that there will be a\
    \ signaling\n   protocols such as [PR-ADDR-ASSIGN], [SHARED-ADDR-OPT],\n   [PORT-RANGE-OPT],\
    \ or [PCP-BASE].\n   The information that needs to be shared is the following:\n\
    \   o  a set of public IPv4 addresses,\n   o  for each IPv4 address, a starting\
    \ point for the allocated port\n      range,\n   o  the number of delegated ports,\n\
    \   o  the optional key that enables partial or full preservation of\n      entropy\
    \ in port randomization -- see [PR-ADDR-ASSIGN],\n   o  the lifetime for each\
    \ IPv4 address and set of allocated ports,\n   o  the tunneling technology to\
    \ be used (e.g., \"IPv6-encapsulation\"),\n   o  addresses of the tunnel endpoints\
    \ (e.g., IPv6 address of tunnel\n      endpoints),\n   o  whether or not NAT function\
    \ is provided by the gateway,\n   o  a device identification number and some authentication\
    \ mechanisms,\n      and\n   o  a version number and some reserved bits for future\
    \ use.\n   Note that the functions of encapsulation and decapsulation have been\n\
    \   separated from the NAT function.  However, to accommodate legacy\n   hosts,\
    \ NATing is likely to be provided at some point in the path;\n   therefore, the\
    \ availability or absence of NATing MUST be communicated\n   in signaling, as\
    \ A+P is agnostic about NAT placement.\n   The port ranges can be allocated in\
    \ two different ways:\n   o  If applications or end-hosts behind the CPE are not\
    \ UPnPv2/\n      NAT-PMP-aware, then the CPE SHOULD request ports via mechanisms,\n\
    \      e.g., as described in [PR-ADDR-ASSIGN] and [PORT-RANGE-OPT].  Note\n  \
    \    that different port ranges can have different lifetimes, and the\n      CPE\
    \ is not entitled to use them after they expire -- unless it\n      refreshes\
    \ those ranges.  It is up to the ISP to put mechanisms in\n      place (to prevent\
    \ denial-of-service attacks) that determine what\n      percentage of already\
    \ allocated port ranges should be exhausted\n      before a CPE may request additional\
    \ ranges, how often the CPE can\n      request additional ranges, and so on.\n\
    \   o  If applications behind the CPE are UPnPv2/NAT-PMP-aware,\n      additional\
    \ ports MAY be requested through that mechanism.  In this\n      case, the CPE\
    \ should forward those requests to the LSN, and the\n      LSN should reply reporting\
    \ if the requested ports are available or\n      not (and if they are not available,\
    \ some alternatives should be\n      offered).  Here again, to prevent potential\
    \ denial-of-service\n      attacks, mechanisms should be in place to prevent UPnPv2/NAT-PMP\n\
    \      packet storms and fast port allocation.  A detailed description of\n  \
    \    this mechanism, called PCP, is in [PCP-BASE].\n   Whatever signaling mechanism\
    \ is used inside the tunnels -- DHCP, IP\n   Control Protocol (IPCP), or PCP based,\
    \ synchronization between the\n   signaling server and PRR must be established\
    \ in both directions.  For\n   example, if we use DHCP as the signaling mechanism,\
    \ the PRR must\n   communicate to the DHCP server at least its IP range.  The\
    \ DHCP\n   server then starts to allocate IP addresses and port ranges to CPEs\n\
    \   and communicates back to the PRR which IP and port range have been\n   allocated\
    \ to which CPE, so the PRR knows to which tunnel to redirect\n   incoming traffic.\
    \  In addition, DHCP MUST also communicate lifetimes\n   of port ranges assigned\
    \ to CPE via the PRR.  DHCP server may be co-\n   located with the PRR function\
    \ to ease address management and also to\n   avoid the need to introduce a communication\
    \ protocol between the PRR\n   and DHCP.\n   If UPnPv2/NAT-PMP is used as the\
    \ dynamic port allocation mechanism,\n   the PRR must also communicate to the\
    \ DHCP (or IPCP) server to avoid\n   those ports.  The PRR must somehow (e.g.,\
    \ using DHCP or IPCP options)\n   communicate back to CPE that the allocation\
    \ of ports was successful,\n   so CPE adds those ports to existing port ranges.\n\
    \   Note that operation can be even simplified if a fixed length of port\n   ranges\
    \ is assigned to all customers and no differentiation is\n   implemented based\
    \ on port-range length.  In such case, the binding\n   table maintained by the\
    \ PRR can be dynamically built upon the receipt\n   of a first packet from a port-restricted\
    \ device.\n"
- title: 3.3.2.  Address Realm
  contents:
  - "3.3.2.  Address Realm\n   Each gateway within the A+P subsystem manages a certain\
    \ portion of\n   A+P address space; that is, a portion of IPv4 space that is extended\n\
    \   by borrowing bits from the port number.  This address space may be a\n   single,\
    \ port-restricted IPv4 address.  The gateway MAY use its\n   managed A+P address\
    \ space for several purposes:\n   o  Allocation of a sub-portion of the A+P address\
    \ space to other\n      authenticated A+P gateways in the A+P subsystem (referred\
    \ to as\n      delegation).  We call the allocated sub-portion delegated address\n\
    \      space.\n   o  Exchange of (untranslated) packets with the external address\n\
    \      realm.  For this to work, such packets MUST use a source address\n    \
    \  and port belonging to the non-delegated address space.\n   If the gateway is\
    \ also capable of performing the NAT function, it MAY\n   translate packets arriving\
    \ on an internal interface that are outside\n   of its managed A+P address space\
    \ into non-delegated address space.\n   Hence, a provider may have 'islands' of\
    \ A+P as they slowly deploy\n   over time.  The provider does not have to replace\
    \ CPE until they want\n   to provide the A+P function to an island of users or\
    \ even to one\n   particular user in a sea of non-A+P users.\n   An A+P gateway\
    \ (\"A\"), accepts incoming connections from other A+P\n   gateways (\"B\"). \
    \ Upon connection establishment (provided appropriate\n   authentication), B would\
    \ \"ask\" A for delegation of an A+P address.\n   In turn, A will inform B about\
    \ its public IPv4 address and will\n   delegate a portion of its port range to\
    \ B.  In addition, A will also\n   negotiate the encaps/decaps function with B\
    \ (e.g., let B know the\n   address of the decaps device at the endpoint of the\
    \ tunnel).\n   This could be implemented, for example, via a NAT-PMP- or DHCP-like\n\
    \   solution.  In general, the following rule applies: a sub-portion of\n   the\
    \ managed A+P address space is delegated as long as devices below\n   ask for\
    \ it; otherwise, private IPv4 is provided to support legacy\n   hosts.\n   The\
    \ following examples use an IPv4 address from the blocks reserved\n   for documentation\
    \ as defined in [RFC5737].\n              private    +-----+          +-----+\
    \     public\n              address ---|  B  |==========|  A  |---  Internet\n\
    \               realm     +-----+          +-----+\n                         Address\
    \ space realm of A:\n                         public IPv4 address = 192.0.2.1\n\
    \                         port range = 0-65535\n                         Address\
    \ space realm of B:\n                         public IPv4 address = 192.0.2.1\n\
    \                         port range = 2560-3071\n                      Figure\
    \ 3: Configuration Example\n   Figure 3 illustrates a sample configuration.  Note\
    \ that A might\n   actually consist of three different devices: one that handles\n\
    \   signaling requests from B; one that performs encapsulation and\n   decapsulation;\
    \ and, if provided, one device that performs the NATing\n   function (e.g., an\
    \ LSN).  Packet forwarding is assumed to be as\n   follows: in the \"outbound\"\
    \ case, a packet arrives from the private\n   address realm to B.  As stated above,\
    \ B has two options: it can\n   either apply or not apply the NAT function.  The\
    \ decision depends\n   upon the specific configuration and/or the capabilities\
    \ of A and B.\n    Note that NAT functionality is required to support legacy hosts;\n\
    \   however, this can be done at either of the two devices A or B.  The\n   term\
    \ \"NAT\" refers to translating the packet into the managed A+P\n   address (B\
    \ has address 192.0.2.1 and ports 2560-3071 in the example\n   above).  We then\
    \ have two options:\n   1)  B NATs the packet.  The translated packet is then\
    \ tunneled to A.\n       A recognizes that the packet has already been translated\
    \ because\n       the source address and port match the delegated space.  A\n\
    \       decapsulates the packet and releases it in the public Internet.\n   2)\
    \  B does not NAT the packet.  The untranslated packet is then\n       tunneled\
    \ to A.  A recognizes that the packet has not been\n       translated, so A forwards\
    \ the packet to a co-located NATing\n       device, which translates the packet\
    \ and routes it in the public\n       Internet.  This device, e.g., an LSN, has\
    \ to store the mapping\n       between the source port used to NAT and the tunnel\
    \ where the\n       packet came from, in order to correctly route the reply. \
    \ Note\n       that A cannot use a port number from the range that has been\n\
    \       delegated to B.  As a consequence, A has to assign a part of its\n   \
    \    non-delegated address space to the NATing function.\n   \"Inbound\" packets\
    \ are handled in the following way: a packet from the\n   public realm arrives\
    \ at A.  A analyzes the destination port number to\n   understand whether or not\
    \ the packet needs to be NATed.\n   1)  If the destination port number belongs\
    \ to the range that A\n       delegated to B, then A tunnels the packet to B.\
    \  B NATs the\n       packet using its stored mapping and forwards the translated\n\
    \       packet to the private domain.\n   2)  If the destination port number is\
    \ from the address space of the\n       LSN, then A passes the packet on to the\
    \ co-located LSN, which\n       uses its stored mapping to NAT the packet into\
    \ the private\n       address realm of B.  The appropriate tunnel is stored as\
    \ well in\n       the mapping of the initial NAT.  The LSN then encapsulates the\n\
    \       packet to B, which decapsulates it and normally routes it within\n   \
    \    its private realm.\n   3)  Finally, if the destination port number falls\
    \ in neither a\n       delegated range nor the address range of the LSN, A discards\
    \ the\n       packet.  If the packet is passed to the LSN, but no mapping can\n\
    \       be found, the LSN discards the packet.\n   Observe that A must be able\
    \ to receive all IPv4 packets destined to\n   the public IPv4 address (192.0.2.1\
    \ in the example), so that it can\n   make routing decisions according to the\
    \ port number.  On the other\n   hand, B receives IPv4 packets destined to the\
    \ public IPv4 address\n   only via the established tunnel with A.  In other words,\
    \ B uses the\n   public IPv4 address just for translation purposes, but it is\
    \ not used\n   to make routing decisions.  This allows us to keep the routing\
    \ logic\n   at B as simple as described above, while enabling seamless\n   communication\
    \ between A+P devices sharing the same public IPv4\n   address.\n            \
    \  private    +-----+          +-----+     public\n              address ---|\
    \  B  |==========|  A  |---  Internet\n              realm 1    +-----+      \
    \    +-----+\n                                            |\n              private\
    \    +-----+            |\n              address ---|  C  |============/\n   \
    \           realm 2    +-----+\n                         Address space realm of\
    \ A:\n                         public IPv4 address = 192.0.2.1\n             \
    \            port range = 0-65535\n                         Address space realm\
    \ of B:\n                         public IPv4 address = 192.0.2.1\n          \
    \               port range = 2560-3071\n                         Address space\
    \ realm of C:\n                         public IPv4 address = 192.0.2.1\n    \
    \                     port range = 0-2559\n                        Figure 4: Hierarchical\
    \ A+P\n   Consider the example shown in Figure 4.  Here, both B and C use the\n\
    \   encaps/decaps function to establish a tunnel with A, and they are\n   assigned\
    \ the same public IPv4 address with different, non-overlapping\n   port ranges.\
    \  Assume that a host in B's private realm sends a packet\n   destined to address\
    \ 192.0.2.1 and port 2000, and that B has been\n   instructed to NAT all packets\
    \ destined to 192.0.2.1.  Under these\n   assumptions, B receives the packet and\
    \ NATs it using its own public\n   IPv4 address (192.0.2.1) and a port selected\
    \ from its configured port\n   range (e.g., 3000).  B then tunnels the translated\
    \ packet to A.  When\n   A receives the packet via the tunnel, it looks at the\
    \ destination\n   address and port, recognizes C's delegated range, and then tunnels\n\
    \   the packet to C.  Observe that, apart from stripping the tunnel\n   header,\
    \ A handles the packet as if it came from the public Internet.\n   When C receives\
    \ the packet, it NATs the destination address into one\n   address chosen from\
    \ its private address realm, while keeping the\n   source address (192.0.2.1)\
    \ and port (3000) untranslated.  Return\n   traffic is handled the same way. \
    \ Such a mechanism allows hosts\n   behind A+P devices to communicate seamlessly\
    \ even when they share the\n   same public IPv4 address.\n   Please refer to Section\
    \ 4 for a discussion of an alternative A+P\n   mechanism that does not incur path-stretch\
    \ penalties for intra-domain\n   communication.\n"
- title: 3.3.3.  Reasons for Allowing Multiple A+P Gateways
  contents:
  - "3.3.3.  Reasons for Allowing Multiple A+P Gateways\n   Since each device in an\
    \ A+P subsystem provides the encaps/decaps\n   function, new devices can establish\
    \ tunnels and become in turn part\n   of an A+P subsystem.  As noted above, being\
    \ part of an A+P subsystem\n   implies the capability of talking to the external\
    \ address realm\n   without any translation.  In particular, as described in the\
    \ previous\n   section, a device X in an A+P subsystem can be reached from the\n\
    \   external domain by simply using the public IPv4 address and a port\n   that\
    \ has been delegated to X.  Figure 5 shows an example where three\n   devices\
    \ are connected in a chain.  In other words, A+P signaling can\n   be used to\
    \ extend end-to-end connectivity to the devices that are in\n   an A+P subsystem.\
    \  This allows A+P-aware applications (or OSes)\n   running on end-hosts to enter\
    \ an A+P subsystem and exploit\n   untranslated connectivity.\n   There are two\
    \ modes for end-hosts to gain fine-grained control of\n   end-to-end connectivity.\
    \  The first is where actual end-hosts perform\n   the NAT function and the encaps/decaps\
    \ function that is required to\n   join the A+P subsystem.  This option works\
    \ in a similar way to the\n   NAT-in-the-host trick employed by virtualization\
    \ software such as\n   VMware, where the guest operating system is connected via\
    \ a NAT to\n   the host operating system.  The second mode is when applications\n\
    \   autonomously ask for an A+P address and use it to join the A+P\n   subsystem.\
    \  This capability is necessary for some applications that\n   require end-to-end\
    \ connectivity (e.g., applications that need to be\n   contacted from outside).\n\
    \               +---------+      +---------+      +---------+\n     internal \
    \ | gateway |      | gateway |      | gateway |  external\n     realm   --|  \
    \  1    |======|    2    |======|    3    |-- realm\n               +---------+\
    \      +---------+      +---------+\n             Figure 5: An A+P Subsystem with\
    \ Multiple Devices\n   Whatever the reasons might be, the Internet was built on\
    \ a paradigm\n   that end-to-end connectivity is important.  A+P makes this still\n\
    \   possible in a time where address shortage forces ISPs to use NATs at\n   various\
    \ levels.  In that sense, A+P can be regarded as a way to\n   bypass NATs.\n \
    \             +---+          (customer2)\n              |A+P|-.         +---+\n\
    \              +---+  \\     NAT|A+P|-.\n                      \\       +---+\
    \ |\n                       \\            |       forward if in range\n      \
    \        +---+     \\+---+    +---+    /\n              |A+P|------|A+P|----|A+P|----\n\
    \              +---+     /+---+    +---+    \\\n                       /     \
    \               NAT if necessary\n                      / (cust1)   (prov.   \
    \ (e.g., provider NAT)\n              +---+  /            router)\n          \
    \    |A+P|-'\n              +---+\n                     Figure 6: A Complex A+P\
    \ Subsystem\n   Figure 6 depicts a complex scenario, where the A+P subsystem is\n\
    \   composed of multiple devices organized in a hierarchy.  Each A+P\n   gateway\
    \ decapsulates the packet and then re-encapsulates it again to\n   the next tunnel.\n\
    \   A packet can be NATed either when it enters the A+P subsystem, at\n   intermediate\
    \ devices, or when it exits the A+P subsystem.  This could\n   be, for example,\
    \ a gateway installed within the provider's network,\n   together with an LSN.\
    \  Then, each customer operates its own CPE.\n   However, behind the CPE, applications\
    \ might also be A+P-aware and run\n   their own A+P-gateways; this enables them\
    \ to have end-to-end\n   connectivity.\n   One limitation applies when \"delayed\
    \ translation\" is used (e.g.,\n   translation at the LSN instead of the CPE).\
    \  If devices using\n   \"delayed translation\" want to talk to each other, they\
    \ SHOULD use A+P\n   addresses or out-of-band addressing.\n"
- title: 3.3.4.  Overall A+P Architecture
  contents:
  - "3.3.4.  Overall A+P Architecture\n                           A+P architecture\n\
    \         IPv4         Full-A+P          AFTR             CGN\n          |   \
    \           |               |                |\n   <-- Full IPv4 ---- Port range\
    \ ---- Port range  ---- Provider --->\n       allocated      & dynamic       \
    \  & LSN          NAT ONLY\n                      allocation      (NAT on CPE\
    \      (No mechanism)\n       (no NAT)      (NAT on CPE)     and on LSN)     \
    \ for customer to\n                                                       bypass\
    \ CGN)\n                    Figure 7: A+P Overall Architecture\n   The A+P architecture\
    \ defines various deployment options within an\n   ISP.  Figure 7 shows the spectrum\
    \ of deployment options.  On the far\n   left is the common deployment method\
    \ for broadband subscribers today,\n   an IPv4 address unrestricted with full\
    \ port range.  Full-A+P refers\n   to a port-range allocation from the ISP.  The\
    \ customer must operate\n   an A+P-aware CPE device, and no NATing functionality\
    \ is provided by\n   the ISP.  The Address Family Transition Router (AFTR), such\
    \ as\n   DS-Lite [RFC6333], is a hybrid.  There is NAT present in the core (in\n\
    \   this document, referred to as LSN), but the user has the option to\n   \"\
    bypass\" that NAT in one form or an other, for example, via A+P,\n   NAT-PMP,\
    \ etc.  Finally, a service provider that only deploys CGN will\n   place a NAT\
    \ in the provider's core and does not allow the customer to\n   \"bypass\" the\
    \ translation process or modify ALGs on the NAT.  The\n   customer is provider-locked.\
    \  Notice that all options (besides full\n   IPv4) require some form of tunneling\
    \ mechanism (e.g., 4in6) and a\n   signaling mechanism (see Section 3.3.1).\n"
- title: 3.4.  A+P Experiments
  contents:
  - "3.4.  A+P Experiments\n   There are implementations of A+P as well as documented\
    \ experiments.\n   France Telecom did experiments that are described in\n   [A+P-EXPERIMENTS].\
    \  As seen in that experiment, most tested\n   applications are unaffected.  There\
    \ are problems with torrent\n   protocol and applications, as the listening port\
    \ is out of A+P port\n   range and some UPnP may be required to make it work with\
    \ A+P.\n   Problems with BitTorrent have already been experienced in the wild\
    \ by\n   users trapped behind a non-UPnP-capable CPE.  The current workaround\n\
    \   for the end-user is to statically map ports, which can be done in the\n  \
    \ A+P scenario as well.\n   BitTorrent tests and experiments in shared IP and\
    \ port-range\n   environments are well described in [BITTORRENT-ADDR-SHARING].\n\
    \   Conclusions in that document tell us that two limitations were\n   experienced.\
    \  The first occurred when two clients sharing the same IP\n   address tried to\
    \ simultaneously retrieve the SAME file located in a\n   SINGLE remote peer. \
    \ The second limitation occurred when a client\n   tried to download a file located\
    \ on several seeders, when those\n   seeders shared the same IP address.  Mutual\
    \ file sharing between\n   hosts having the same IP address has been checked.\
    \  Indeed, machines\n   having the same IP address can share files with no alteration\n\
    \   compared to current IP architectures.\n   Working implementations of A+P can\
    \ be found in:\n   o  Internet Systems Consortium AFTR\n      (http://www.isc.org/software/aftr),\n\
    \   o  FT Orange opensource A+P (http://opensourceaplusp.weebly.com/)\n      developed\
    \ by Xiaoyu Zhao, Xiaohong Deng, Tao Zheng, and\n   o  4rd (IPv4 Residual Deployment)\
    \ from ipinfusion.com, which is\n      stateless A+P.\n"
- title: 4.  Stateless A+P Mapping Function
  contents:
  - '4.  Stateless A+P Mapping Function

    '
- title: 4.1.  Stateless A+P Mapping (SMAP) Gateway Function Description
  contents:
  - "4.1.  Stateless A+P Mapping (SMAP) Gateway Function Description\n   SMAP stands\
    \ for Stateless A+P Mapping.  This function is responsible\n   for, in a stateless\
    \ scheme, encapsulating IPv4 packets in IPv6 ones\n   as well as decapsulating\
    \ IPv4 packets from IPv6 ones.  An SMAP\n   function may be hosted in a PRR, end-user\
    \ device, etc.\n   As mentioned in Section 4.1 of [RFC6052], the suffix part may\
    \ enclose\n   the port.\n   The Stateless A+P Mapping (SMAP) gateway consists\
    \ in two basic\n   functions as described in Figure 8.\n   1.  SMAP encapsulates\
    \ an IPv4 packet, destined to a shared IPv4\n       address, in an IPv6 one. \
    \ The IPv6 source address is constructed\n       using an IPv4-embedded IPv6 address\
    \ [RFC6052] from the IPv4\n       source address and port number plus the IPv6\
    \ prefix that has been\n       provisioned to the node performing the SMAP function.\
    \  The\n       destination IPv6 address is constructed using the shared IPv4\n\
    \       destination address and port number plus the IPv6 prefix that has\n  \
    \     been provisioned to the SMAP function and that is dedicated to\n       IPv4\
    \ destination addresses.\n   2.  SMAP extracts IPv4 incoming packets from IPv6\
    \ incoming ones that\n       have IPv6 source addresses belonging to the prefix\
    \ of the node\n       performing the SMAP function.  Extracted IPv4 packets are\
    \ then\n       forwarded to the point identified by the IPv4 destination address\n\
    \       and port number.\n                           +-------------------+\n \
    \                          |                   |----IPv6---\\\n              \
    \ ----IPv4---\\|                   |----IPv4---\\\\\n               -----------/|\
    \                   |-----------//\n                           |             \
    \      |-----------/\n                           |       SMAP        |\n     \
    \                      |                   | /--IPv6-----\n               /---IPv4----|\
    \                   |//---IPv4----\n               \\-----------|            \
    \       |\\\\-----------\n                           |                   | \\\
    -----------\n                           +-------------------+\n             Figure\
    \ 8: Stateless A+P Mapping Gateway Function\n   An SMAP-enabled node will perform\
    \ the stateless 6/4 mapping function\n   for all public shared IPv4 addresses\
    \ for which it was designated as a\n   stateless 6/4 mapping gateway.\n   To perform\
    \ the stateless 6/4 mapping function, an SMAP gateway must:\n   o  be provided\
    \ with an IPv6 prefix (i.e., Pref6).  The SMAP gateway\n      uses this prefix\
    \ to construct IPv6 source addresses for all IPv4\n      shared addresses for\
    \ which it was designated as an SMAP gateway.\n      The IPv6 prefix may be provisioned\
    \ statically or dynamically\n      (e.g., DHCP).\n   o  be able to know the IPv6\
    \ prefix of the node serving as another\n      SMAP gateway for IPv4 destination\
    \ addresses.  This prefix may be\n      known in various ways:\n      *  Default\
    \ or Well-Known Prefix (i.e., 64:ff9b::/96) that was\n         provisioned statically\
    \ or dynamically;\n      *  Retained at the reception of incoming IPv4-in-IPv6\
    \ encapsulated\n         packets;\n      *  Discovered at the start of communication,\
    \ thanks to mechanisms\n         such as DNS resolution, for example.\n   When\
    \ the SMAP-enabled node receives IPv4 packets with IPv4 source\n   addresses for\
    \ which it was not designated as an smap gateway, it will\n   not perform stateless\
    \ 6/4 mapping function for those packets.  Those\n   packets will be handled in\
    \ a classical way (i.e., forwarded, dropped,\n   or locally processed).\n   When\
    \ the SMAP-enabled node receives IPv6 packets with IPv6 addresses\n   that do\
    \ not match with its IPv6 prefix, it will not perform the\n   stateless 6/4 mapping\
    \ function for those packets.  Those packets will\n   be handled in a classical\
    \ way (i.e., forwarded, dropped, or locally\n   processed).\n"
- title: 4.2.  Implementation Mode
  contents:
  - "4.2.  Implementation Mode\n   In this configuration, the node A performs the\
    \ stateless mapping\n   function on the received IPv4 traffic (encapsulated in\
    \ IPv6 packets)\n   before forwarding to the node B.  The node B performs the\
    \ stateless\n   mapping function on the received IPv6 traffic (extracting IPv4\n\
    \   packets) before forwarding the IPv4 traffic to the destination\n   identified\
    \ by the IPv4 destination address and port number.  In the\n   opposite direction,\
    \ and as previously, the node B performs the\n   stateless mapping function on\
    \ the received IPv4 traffic\n   (encapsulating in IPv6 packets) before forwarding\
    \ to the node A.  The\n   node A performs the stateless mapping function on the\
    \ received IPv6\n   traffic (extracting IPv4 packets) before forwarding the IPv4\
    \ traffic\n   to the point identified by the IPv4 destination address and port\n\
    \   number.  In this case, only IPv6 traffic is managed in the network\n   segment\
    \ between the nodes A and B.\n                       +------+             +------+\n\
    \                       |      |----IPv6---\\ |      |\n           ----IPv4---\\\
    |      |----IPv4---\\\\|      |----IPv4---\\\n           -----------/|      |-----------//|\
    \      |-----------/\n                       |      |-----------/ |      |\n \
    \                      | SMAP |             | SMAP |\n                       |\
    \      | /----IPv6---|      |\n           /---IPv4----|      |//---IPv4----| \
    \     |/---IPv4----\n           \\-----------|      |\\\\-----------|      |\\\
    -----------\n                       |      | \\-----------|      |\n         \
    \              +------+             +------+\n                        node A \
    \              node B\n                                 Figure 9\n   Several deployment\
    \ scenarios of the SMAP function may be envisaged in\n   the context of port-range-based\
    \ solutions:\n   o  An SMAP function is embedded in a port-restricted device.\
    \  Other\n      SMAP-enabled nodes are deployed in the boundaries between IPv6-\n\
    \      enabled realms and IPv4 ones.  This scenario may be deployed\n      particularly\
    \ for intra-domain communications so as to interconnect\n      heterogeneous realms\
    \ (i.e., IPv6/IPv4) within the same Autonomous\n      System (AS).\n   o  An SMAP\
    \ function is embedded in a port-restricted device.  Other\n      SMAP-enabled\
    \ nodes are deployed in the interconnection segment\n      (with adjacent IPv4-only\
    \ ones) of a given AS.  This deployment\n      scenario is more suitable for service\
    \ providers targeting the\n      deployment of IPv6 since it eases the migration\
    \ to full IPv6.\n      Core nodes are not required to continue to activate both\
    \ IPv4 and\n      IPv6 transfer capabilities.\n   Other considerations regarding\
    \ the interconnection of SMAP-enabled\n   domains should be elaborated.  The following\
    \ provides a non-\n   exhaustive list of interconnection schemes.\n   o  The interconnection\
    \ of two domains implementing the SMAP function\n      may be deployed via IPv4\
    \ Internet (Figure 10): this means that\n      IPv4 packets encapsulated in IPv6\
    \ packets are transferred using\n      IPv6 until reaching the first SMAP-enabled\
    \ node.  Then, these\n      packets are decapsulated and are forwarded using IPv4\
    \ transfer\n      capabilities.  A remote SMAP-enabled node will receive those\n\
    \      packets and proceed to an IPv4-in-IPv6 encapsulation.  These\n      packets\
    \ are then routed normally until reaching the port-\n      restricted devices\
    \ that decapsulate the packets.\n   +------+          +------+   +--------+  \
    \ +------+           +------+\n   |      |--IPv6--\\ |      |   |        |   |\
    \      |---IPv6--\\ |      |\n   |      |--IPv4--\\\\|      |---|-IPv4---|--\\\
    |      |---IPv4--\\\\|      |\n   |      |--------//|      |---|--------|--/|\
    \      |---------//|      |\n   |      |--------/ |      |   |Internet|   |  \
    \    |---------/ |      |\n   | SMAP |          | SMAP |   |  IPv4  |   | SMAP\
    \ |           | SMAP |\n   |      | /--IPv6--|      |   |        |   |      |\
    \ /---IPv6--|      |\n   |      |//--IPv4--|      |/--|-IPv4---|---|      |//--IPv4---|\
    \      |\n   |      |\\\\--------|      |\\--|--------|---|      |\\\\---------|\
    \      |\n   |      | \\--------|      |   |        |   |      | \\---------|\
    \      |\n   +------+          +------+   +--------+   +------+           +------+\n\
    \    Source           node A                  node B          Destination\n  \
    \                  Figure 10: Interconnection Scenario 1\n   o  A second scheme\
    \ is to use IPv6 to interconnect two realms that\n      implement the SMAP function\
    \ (Figure 11).  An IPv6 prefix (i.e.,\n      Pref6) assigned by IANA is used for\
    \ this service.  If appropriate\n      routing configurations have been enforced,\
    \ then the IPv6-\n      encapsulated packets will be routed until the final destination.\n\
    \      In order to implement this model, IPv4-inferred IPv6 prefixes are\n   \
    \   required to be injected in the IPv6 inter-domain routing tables.\n       \
    \ +------+             +------------+              +------+\n        |      |\
    \             |            |              |      |\n        |      |----IPv6-----|----IPv6----|----IPv6----\\\
    \ |      |\n        |      |----IPv4-----|------------|----IPv4----\\\\|     \
    \ |\n        |      |-------------|------------|------------//|      |\n     \
    \   |      |-------------|------------|------------/ |      |\n        | SMAP\
    \ |             | Internet v6|              | SMAP |\n        |      | /-----IPv6--|------------|-----IPv6-----|\
    \      |\n        |      |//---IPv4----|------------|-------IPv4---|      |\n\
    \        |      |\\\\-----------|------------|--------------|      |\n       \
    \ |      | \\-----------|------------|--------------|      |\n        |      |\
    \             |            |              |      |\n        +------+         \
    \    +------------+              +------+\n         Source                   \
    \                         Destination\n                   Figure 11: Interconnection\
    \ Scenario 2\n"
- title: 4.3.  Towards IPv6-Only Networks
  contents:
  - "4.3.  Towards IPv6-Only Networks\n   The deployment of the SMAP function allows\
    \ for smooth migration of\n   networks to an IPv6-only scheme while maintaining\
    \ the delivery of\n   IPv4 connectivity services to customers.  The delivery of\
    \ IPv4\n   connectivity services over an IPv6-only network does not require any\n\
    \   stateful function to be deployed on the core network.  Owing to this\n   A+P\
    \ mode, both the IPv4 service continuity and the migration to an\n   IPv6-only\
    \ deployment model are facilitated.\n"
- title: '4.4.  PRR: On Stateless and Binding Table Modes'
  contents:
  - "4.4.  PRR: On Stateless and Binding Table Modes\n   The SMAP section (Section\
    \ 4) discusses two modes: the binding and the\n   stateless modes.  Dynamic port\
    \ allocation is not a feature of the\n   stateless mode, but it is supported in\
    \ the binding mode.  In the\n   binding mode, distinct external IPv4 addresses\
    \ may be used, but this\n   is not recommended.\n   o  Stateless Mode\n      Complete\
    \ stateless mapping implies that the IPv4 address and the\n      significant bits\
    \ coding the port range are reflected inside the\n      IPv6 prefix assigned to\
    \ the port-restricted device.  This can be\n      achieved either by embedding\
    \ the full IPv4 address and the\n      significant bits in the IPv6 prefix or\
    \ by applying an algorithmic\n      approach.  Two alternatives are offered when\
    \ such a stateless\n      mapping is to be enabled:\n      -  use the IPv6 prefix\
    \ already used for native IPv6 traffic, or\n      -  provide two prefixes to the\
    \ port-restricted device: one for the\n         native IPv6 traffic and one for\
    \ the IPv4 traffic.\n      Note that:\n      -  Providing two IPv6 prefixes has\
    \ the advantages of allowing a\n         /64 prefix for the port-restricted device\
    \ along with another\n         prefix (e.g., a /56 or /64) for native IPv6 traffic.\
    \  This\n         alternative allows the service provider to relate the native\n\
    \         IPv6 traffic addressing plan to the IPv4 addressing plan.  The\n   \
    \      drawback is having to allocate two prefixes to each port-\n         restricted\
    \ device and to route them.  In addition, an address\n         selection issue\
    \ may be encountered.\n      -  Providing one prefix for both needs (e.g., a /56\
    \ or a /64)\n         allows the service provider to handle two types of IPv6\
    \ prefix\n         for the port-restricted device and in routing tables.  But\
    \ the\n         drawback is that it strongly links the IPv4 addressing plan to\n\
    \         the allocated IPv6 prefixes.\n      As mentioned in Section 4.1 of [RFC6052],\
    \ the suffix part may\n      enclose the port.\n   o  Binding Table Mode\n   \
    \   Another alternative is to assign a \"normal\" IPv6 prefix to the\n      port-restricted\
    \ device and to use a binding table, which can be\n      hosted by a service node\
    \ to correlate the (shared IPv4 address,\n      port range) with an IPv6 address\
    \ part of the assigned IPv6 prefix.\n      For scalability reasons, this table\
    \ should be instantiated within\n      PRR-enabled nodes that are close to the\
    \ port-restricted devices.\n      The number of required entries if hosted at\
    \ the interconnection\n      segment would be equal to the amount of subscribed\
    \ users (one per\n      port-restricted device).\n"
- title: 4.5.  General Recommendations on SMAP
  contents:
  - "4.5.  General Recommendations on SMAP\n   If a Stateless A+P Mapping (SMAP) type\
    \ of implementation is deployed\n   over intermediate IPv6-only-capable devices,\
    \ it is recommended that\n   default routes are configured, and the IPv4 routing\
    \ table is not\n   \"leaked\" into the IPv6 routing table in terms of having reachability\n\
    \   for the packets going towards the Internet.\n   One of the stateless A+P variants\
    \ is 4rd [4rd].\n"
- title: 5.  Deployment Scenarios
  contents:
  - '5.  Deployment Scenarios

    '
- title: 5.1.  A+P Deployment Models
  contents:
  - '5.1.  A+P Deployment Models

    '
- title: 5.1.1.  A+P for Broadband Providers
  contents:
  - "5.1.1.  A+P for Broadband Providers\n   Some large broadband providers will not\
    \ have enough public IPv4\n   address space to provide every customer with a single\
    \ IP address.\n   The natural solution is sharing a single IP address among many\n\
    \   customers.  Multiplexing customers is usually accomplished by\n   allocating\
    \ different port numbers to different customers somewhere\n   within the network\
    \ of the provider.\n   It is expected that, when the provider wishes to enable\
    \ A+P for a\n   customer or a range of customers, the CPE can be upgraded or replaced\n\
    \   to support A+P encaps/decaps functionality.  Ideally, the CPE also\n   provides\
    \ NATing functionality.  Further, it is expected that at least\n   another component\
    \ in the ISP network provides the corresponding A+P\n   functionality, and hence\
    \ is able to establish an A+P subsystem with\n   the CPE.  This device is referred\
    \ to as an A+P router or Port-Range\n   Router (PRR), and could be located close\
    \ to PE routers.  The core of\n   the network MUST support the tunneling protocol\
    \ (which SHOULD be\n   IPv6, as per Constraint 7) but MAY be another tunneling\
    \ technology\n   when necessary.  In addition, we do not wish to restrict any\n\
    \   initiative of customers who might want to run an A+P-capable network\n   on\
    \ or behind their CPE.  To satisfy both Constraints 1 and 2,\n   unmodified legacy\
    \ hosts should keep working seamlessly, while\n   upgraded/new end-systems should\
    \ be given the opportunity to exploit\n   enhanced features.\n"
- title: 5.1.2.  A+P for Mobile Providers
  contents:
  - "5.1.2.  A+P for Mobile Providers\n   In the case of mobile service providers,\
    \ the situation is slightly\n   different.  The A+P border is assumed to be the\
    \ gateway (e.g.,\n   Gateway GPRS Support Node (GGSN) / Packet Data Network (PDN)\
    \ gateway\n   (GW) of 3GPP, or Access Service Network (ASN) GW of Worldwide\n\
    \   Interoperability for Microwave Access (WiMAX)).  The need to extend\n   the\
    \ address is not within the provider network, but on the edge\n   between the\
    \ mobile phone devices and the gateway.  While desirable,\n   IPv6 connectivity\
    \ may or may not be provided.\n   For mobile providers, we use the following terms\
    \ and assumptions:\n   1.  provider network (PN)\n   2.  gateway (GW)\n   3. \
    \ mobile phone device (phone)\n   4.  devices behind the phone, e.g., laptop computer\
    \ connecting via\n       phone to Internet\n   We expect that the gateway has\
    \ a pool of IPv4 addresses and is always\n   in the data-path of the packets.\
    \  Transport between the gateway and\n   phone devices is assumed to be an end-to-end\
    \ layer-2 tunnel.  We\n   assume that the phone as well as gateway can be upgraded\
    \ to support\n   A+P.  However, some applications running on the phone or devices\n\
    \   behind the phone (such as laptop computers connecting via the phone)\n   are\
    \ not expected to be upgraded.  Again, while we do not expect that\n   devices\
    \ behind the phone will be A+P-aware or upgraded, we also do\n   not want to hinder\
    \ their evolution.  In this sense, the mobile phone\n   would be comparable to\
    \ the CPE in the broadband provider case; it\n   would be the gateway to the PRR/LSN\
    \ box in the network of the\n   broadband provider.\n"
- title: 5.1.3.  A+P from the Provider Network Perspective
  contents:
  - "5.1.3.  A+P from the Provider Network Perspective\n   ISPs suffering from IPv4\
    \ address space exhaustion are interested in\n   achieving a high address space\
    \ compression ratio.  In this respect,\n   an A+P subsystem allows much more flexibility\
    \ than traditional NATs:\n   the NAT can be placed at the customer and/or in the\
    \ provider network.\n   In addition, hosts or applications can request ports and\
    \ thus have\n   untranslated end-to-end connectivity.\n                   +---------------------------+\n\
    \       private     | +------+  A+P-in  +-----+ |   dual-stacked\n      (RFC 1918)\
    \ --|-| CPE  |==-IPv6-==| PRR |-|-- network\n        space      | +------+  tunnel\
    \  +-----+ |   (public addresses)\n                   |    ^              +-----+\
    \ |\n                   |    |  IPv6-only   | LSN | |\n                   |  \
    \  |   network    +-----+ |\n                   +----+----------------- ^ --+\n\
    \                        |                  |\n                   on customer\
    \        within provider\n              premises and control      network\n  \
    \               Figure 12: A Simple A+P Subsystem Example\n   Consider the deployment\
    \ scenario in Figure 12, where an A+P subsystem\n   is formed by the CPE and a\
    \ PRR within the ISP core network and\n   preferably is close to the customer\
    \ edge.  Inside the subsystem,\n   packets are forwarded based on address and\
    \ port.  The provider MAY\n   deploy an LSN co-located with the PRR to handle\
    \ packets that have not\n   been translated by the CPE.  In such a configuration,\
    \ the ISP allows\n   the customer to freely decide whether the translation is\
    \ done at the\n   CPE or at the LSN.  In order to establish the A+P subsystem,\
    \ the CPE\n   will be configured automatically (e.g., via a signaling protocol\
    \ that\n   conforms to the requirements stated above).\n   Note that the CPE in\
    \ the example above is provisioned with only an\n   IPv6 address on the external\
    \ interface.\n    +------------ IPv6-only transport ------------+\n    | +---------------+\
    \ |              |          |\n    | |A+P-application| |  +--------+  |  +-----+\
    \ |   dual-stacked\n    | | on end-host   |=|==| CPE w/ |==|==| PRR |-|-- network\n\
    \    | +---------------+ |  +--------+  |  +-----+ |   (public addresses)\n  \
    \  +---------------+   |  +--------+  |  +-----+ |\n      private IPv4 <-*--+->|\
    \ NAT    |  |  | LSN | |\n      address space   \\ |  +--------+  |  +-----+ |\n\
    \      for legacy       +|--------------|----------+\n        hosts          \
    \ |              |\n                        |              |\n      end-host with\
    \     |  CPE device  |  provider\n        upgraded        |  on customer |  network\n\
    \       application      |   premises   |\n   Figure 13: An Extended A+P Subsystem\
    \ with End-Host Running A+P-Aware\n                               Applications\n\
    \   Figure 13 shows an example of how an upgraded application running on\n   a\
    \ legacy end-host can connect to another host in the public realm.\n   The legacy\
    \ host is provisioned with a private IPv4 address allocated\n   by the CPE.  Any\
    \ packet sent from the legacy host will be NATed\n   either at the CPE (if configured\
    \ to do so) or at the LSN (if\n   available).\n   An A+P-aware application running\
    \ on the end-host MAY use the\n   signaling described in Section 3.3.1 to connect\
    \ to the A+P subsystem.\n   In this case, the application will be delegated some\
    \ space in the A+P\n   address realm, and will be able to contact the public realm\
    \ (i.e.,\n   the public Internet) without the need for translation.\n   Note that\
    \ part of A+P signaling is that the NATs are optional.\n   However, if neither\
    \ the CPE nor the PRR provides NATing\n   functionality, then it will not be possible\
    \ to connect legacy end-\n   hosts.\n   To enable packet forwarding with A+P,\
    \ the ISP MUST install at its A+P\n   border a PRR that encaps/decaps packets.\
    \  However, to achieve a\n   higher address space compression ratio and/or to\
    \ support CPEs without\n   NATing functionality, the ISP MAY decide to provide\
    \ an LSN as well.\n   If no LSN is installed in some part of the ISP's topology,\
    \ all CPEs\n   in that part of the topology MUST support NAT functionality.  For\n\
    \   reasons of scalability, it is assumed that the PRR is located within\n   the\
    \ access portion of the network.  The CPE would be configured\n   automatically\
    \ (e.g., via an extended DHCP or NAT-PMP, which has the\n   signaling requirements\
    \ stated above) with the address of the PRR and\n   of the LSN (if one is being\
    \ provided).  Figure 12 illustrates a\n   possible deployment scenario.\n"
- title: 5.2.  Dynamic Allocation of Port Ranges
  contents:
  - "5.2.  Dynamic Allocation of Port Ranges\n   Allocating a fixed number of ports\
    \ to all CPEs may lead to exhaustion\n   of ports for high-usage customers.  This\
    \ is a perfect recipe for\n   upsetting more demanding customers.  On the other\
    \ hand, allocating to\n   all customers ports sufficiently to match the needs\
    \ of peak users\n   will not be very efficient.  A mechanism for dynamic allocation\
    \ of\n   port ranges allows the ISP to achieve two goals: a more efficient\n \
    \  compression ratio of the number of customers on one IPv4 address and,\n   on\
    \ the other hand, no limit of the more demanding customers'\n   communication.\n\
    \   Additional allocation of ports or port ranges may be made after an\n   initial\
    \ static allocation of ports.\n   The mechanism would prefer allocations of port\
    \ ranges from the same\n   IP address as the initial allocation.  If it is not\
    \ possible to\n   allocate an additional port range from the same IP, then the\n\
    \   mechanism can allocate a port range from another IP within the same\n   subnet.\
    \  With every additional port range allocation, the PRR updates\n   its routing\
    \ table.  The mechanism for allocating additional port\n   ranges may be part\
    \ of normal signaling that is used to authenticate\n   the CPE to the ISP.\n \
    \  The ISP controls the dynamic allocation of port ranges by the PRR by\n   setting\
    \ the initial allocation size and maximum number of allocations\n   per CPE, or\
    \ the maximum allocations per subscription, depending on\n   subscription level.\
    \  There is a general observation that the more\n   demanding customer uses around\
    \ 1024 ports when heavily communicating.\n   So, for example, a first suggestion\
    \ might be 128 ports initially and\n   then dynamic allocations of ranges of 128\
    \ ports up to 511 more\n   allocations maximum.  A configured maximum number of\
    \ allocations\n   could be used to prevent one customer acting in a destructive\
    \ manner\n   should they become infected.  The maximum number of allocations might\n\
    \   also be more finely grained, with parameters of how many allocations\n   a\
    \ user may request per some time frame.  If this is used, evasive\n   applications\
    \ may need to be limited in their bad behavior; for\n   example, one additional\
    \ allocation per minute would considerably slow\n   a port request storm.\n  \
    \ There is likely no minimum request size.  This is because A+P-aware\n   applications\
    \ running on end-hosts MAY request a single port (or a few\n   ports) for the\
    \ CPE to be contacted on (e.g., Voice over IP (VoIP)\n   clients register a public\
    \ IP and a single delegated port from the\n   CPE, and accept incoming calls on\
    \ that port).  The implementation on\n   the CPE or PRR will dictate how to handle\
    \ such requests for smaller\n   blocks: for example, half of available blocks\
    \ might be used for\n   \"block-allocations\", 1/6 for single port requests, and\
    \ the rest for\n   NATing.\n   Another possible mechanism to allocate additional\
    \ ports is UPnP/\n   NAT-PMP (as defined in Section 3.3.1), if applications behind\
    \ CPE\n   support it.  In the case of the LSN implementation (DS-Lite), as\n \
    \  described in Section 3.3.4 about the A+P overall architecture,\n   signaling\
    \ packets are simply forwarded by the CPE to the LSN and back\n   to the host\
    \ running the application that requested the ports, and the\n   PRR allocates\
    \ the requested port to the appropriate CPE.  The same\n   behavior may be chosen\
    \ with AFTR, if requested ports are outside of\n   the static initial port allocation.\
    \  If a full A+P implementation is\n   selected, then UPnPv2/NAT-PMP packets are\
    \ accepted by the CPE,\n   processed, and the requested port number is communicated\
    \ through the\n   normal signaling mechanism between CPE and PRR tunnel endpoints\n\
    \   (PCP).\n"
- title: 5.3.  Example of A+P-Forwarded Packets
  contents:
  - "5.3.  Example of A+P-Forwarded Packets\n   This section provides a detailed example\
    \ of A+P setup, configuration,\n   and packet flow from an end-host connected\
    \ to an A+P service provider\n   to any host in the IPv4 Internet, and how the\
    \ return packets flow\n   back.  The following example discusses an A+P-unaware\
    \ end-host, where\n   the NATing is done at the CPE.  Figure 14 illustrates how\
    \ the CPE\n   receives an IPv4 packet from the end-user device.  We first describe\n\
    \   the case where the CPE has been configured to provide the NAT\n   functionality\
    \ (e.g., by the customer through interaction with a\n   website or by automatic\
    \ signaling).  In the following, we call a\n   packet that is translated at the\
    \ CPE an \"A+P-forwarded packet\", an\n   analogy with the port-forwarding function\
    \ employed in today's CPEs.\n   Upon receiving a packet from the internal interface,\
    \ the CPE\n   translates, encapsulates, and forwards it to the PRR.  The NAT on\
    \ the\n   CPE is assumed to have a default route to the public realm through\n\
    \   its tunnel interface.\n   When the PRR receives the A+P-forwarded packet,\
    \ it decapsulates the\n   inner IPv4 packet and checks the source address.  If\
    \ the source\n   address does match the range assigned to A+P-enabled CPEs, then\
    \ the\n   PRR simply forwards the decapsulated packet onward.  This is always\n\
    \   the case for A+P-forwarded packets.  Otherwise, the PRR assumes that\n   the\
    \ packet is not A+P-forwarded and passes it to the LSN function,\n   which in\
    \ turn translates and forwards the packet based on the\n   destination address.\
    \  Figure 14 shows the packet flow for an outgoing\n   A+P-forwarded packet.\n\
    \                   +-----------+\n                   |    Host   |\n        \
    \           +-----+-----+\n                      |  |  198.51.100.2\n      IPv4\
    \ datagram 1 |  |\n                      |  |\n                      v  |  198.51.100.1\n\
    \               +---------|---------+\n               |CPE      |         |\n\
    \               +--------|||--------+\n                      | |||     2001:db8::2\n\
    \                      | ||| 192.0.2.3 (100-200)\n       IPv6 datagram 2| |||\n\
    \                      | |||<-IPv4-in-IPv6\n                      | |||\n    \
    \             -----|-|||-------\n               /      | |||        \\\n     \
    \         |  ISP access network |\n               \\      | |||        /\n   \
    \              -----|-|||-------\n                      | |||\n              \
    \        v |||     2001:db8::1\n               +--------|||--------+\n       \
    \        |PRR     |||        |\n               +---------|---------+\n       \
    \               |  |  192.0.2.1\n      IPv4 datagram 3 |  |\n                \
    \ -----|--|--------\n               /      |  |         \\\n              |  \
    \ ISP network /     |\n               \\      Internet     /\n               \
    \  -----|--|--------\n                      |  |\n                      v  | 203.0.113.1\n\
    \                   +-----+-----+\n                   | IPv4 Host |\n        \
    \           +-----------+\n          Figure 14: Forwarding of Outgoing A+P-Forwarded\
    \ Packets\n     +-----------------+--------------+-----------------------------+\n\
    \     |        Datagram | Header field | Contents                    |\n     +-----------------+--------------+-----------------------------+\n\
    \     | IPv4 datagram 1 |     IPv4 Dst | 203.0.113.1                 |\n     |\
    \                 |     IPv4 Src | 198.51.100.2                |\n     |     \
    \            |      TCP Dst | 80                          |\n     |          \
    \       |      TCP Src | 8000                        |\n     | ---------------\
    \ | ------------ | --------------------------- |\n     | IPv6 datagram 2 |   \
    \  IPv6 Dst | 2001:db8::1                 |\n     |                 |     IPv6\
    \ Src | 2001:db8::2                 |\n     |                 |     IPv4 Dst |\
    \ 203.0.113.1                 |\n     |                 |     IPv4 Src | 192.0.2.3\
    \                   |\n     |                 |      TCP Dst | 80            \
    \              |\n     |                 |      TCP Src | 100                \
    \         |\n     | --------------- | ------------ | ---------------------------\
    \ |\n     | IPv4 datagram 3 |     IPv4 Dst | 203.0.113.1                 |\n \
    \    |                 |     IPv4 Src | 192.0.2.3                   |\n     |\
    \                 |      TCP Dst | 80                          |\n     |     \
    \            |      TCP Src | 100                         |\n     +-----------------+--------------+-----------------------------+\n\
    \                         Datagram Header Contents\n   An incoming packet undergoes\
    \ the reverse process.  When the PRR\n   receives an IPv4 packet on an external\
    \ interface, it first checks\n   whether or not the destination address falls\
    \ within the A+P CPE\n   delegated range.  If the address space was delegated,\
    \ then the PRR\n   encapsulates the incoming packet and forwards it through the\n\
    \   appropriate tunnel for that IP/port range.  If the address space was\n   not\
    \ delegated, the packet would be handed to the LSN to check if a\n   mapping is\
    \ available.\n   Figure 15 shows how an incoming packet is forwarded, under the\n\
    \   assumption that the port number matches the port range that was\n   delegated\
    \ to the CPE.\n                   +-----------+\n                   |    Host\
    \   |\n                   +-----+-----+\n                      ^  |  198.51.100.2\n\
    \      IPv4 datagram 3 |  |\n                      |  |\n                    \
    \  |  |  198.51.100.1\n               +---------|---------+\n               |CPE\
    \      |         |\n               +--------|||--------+\n                   \
    \   ^ |||     2001:db8::2\n                      | ||| 192.0.2.3 (100-200)\n \
    \      IPv6 datagram 2| |||\n                      | |||<-IPv4-in-IPv6\n     \
    \                 | |||\n                 -----|-|||-------\n               /\
    \      | |||        \\\n              | ISP access network  |\n              \
    \ \\      | |||        /\n                 -----|-|||-------\n               \
    \       | |||\n                      | |||     2001:db8::1\n               +--------|||--------+\n\
    \               |PRR     |||        |\n               +---------|---------+\n\
    \                      ^  |  192.0.2.1\n      IPv4 datagram 1 |  |\n         \
    \        -----|--|--------\n               /      |  |         \\\n          \
    \    |  ISP network /      |\n               \\      Internet     /\n        \
    \         -----|--|--------\n                      |  |\n                    \
    \  |  | 203.0.113.1\n                   +-----+-----+\n                   | IPv4\
    \ Host |\n                   +-----------+\n          Figure 15: Forwarding of\
    \ Incoming A+P-Forwarded Packets\n     +-----------------+--------------+-----------------------------+\n\
    \     |        Datagram | Header field | Contents                    |\n     +-----------------+--------------+-----------------------------+\n\
    \     | IPv4 datagram 1 |     IPv4 Dst | 198.51.100.3                |\n     |\
    \                 |     IPv4 Src | 203.0.113.1                 |\n     |     \
    \            |      TCP Dst | 100                         |\n     |          \
    \       |      TCP Src | 80                          |\n     | ---------------\
    \ | ------------ | --------------------------- |\n     | IPv6 datagram 2 |   \
    \  IPv6 Dst | 2001:db8::2                 |\n     |                 |     IPv6\
    \ Src | 2001:db8::1                 |\n     |                 |     IPv4 Dst |\
    \ 198.51.100.3                |\n     |                 |       IP Src | 203.0.113.1\
    \                 |\n     |                 |      TCP Dst | 100             \
    \            |\n     |                 |      TCP Src | 80                   \
    \       |\n     | --------------- | ------------ | ---------------------------\
    \ |\n     | IPv4 datagram 3 |     IPv4 Dst | 198.51.100.2                |\n \
    \    |                 |     IPv4 Src | 203.0.113.1                 |\n     |\
    \                 |      TCP Dst | 8000                        |\n     |     \
    \            |      TCP Src | 80                          |\n     +-----------------+--------------+-----------------------------+\n\
    \                         Datagram Header Contents\n   Note that datagram 1 travels\
    \ untranslated up to the CPE; thus, the\n   customer has the same control over\
    \ the translation as he has today --\n   a home gateway with customizable port-forwarding.\n"
- title: 5.3.1.  Forwarding of Standard Packets
  contents:
  - "5.3.1.  Forwarding of Standard Packets\n   Packets for which the CPE does not\
    \ have a corresponding port-\n   forwarding rule are tunneled to the PRR that\
    \ provides the LSN\n   function.  We underline that the LSN MUST NOT use the delegated\
    \ space\n   for NATing.  See [RFC6333] for network diagrams that illustrate the\n\
    \   packet flow in this case.\n"
- title: 5.3.2.  Handling ICMP
  contents:
  - "5.3.2.  Handling ICMP\n   ICMP is problematic for all NATs because it lacks port\
    \ numbers.  A+P\n   routing exacerbates the problem.\n   Most ICMP messages fall\
    \ into one of two categories: error reports or\n   ECHO/ECHO replies (commonly\
    \ known as \"pings\").  For error reports,\n   the offending packet header is\
    \ embedded within the ICMP packet; NAT\n   devices can then rewrite that portion\
    \ and route the packet to the\n   actual destination host.  This functionality\
    \ will remain the same\n   with A+P; however, the PRR will need to examine the\
    \ embedded header\n   to extract the port number, while the A+P gateway will do\
    \ the\n   necessary rewriting.\n   ECHO and ECHO replies are more problematic.\
    \  For ECHO, the A+P\n   gateway device must rewrite the \"Identifier\" and perhaps\
    \ \"Sequence\n   Number\" fields in the ICMP request, treating them as if they\
    \ were\n   port numbers.  This way, the PRR can build the correct A+P address\n\
    \   for the returning ECHO replies, so they can be correctly routed back\n   to\
    \ the appropriate host in the same way as TCP/UDP packets.  Pings\n   originated\
    \ from the public realm (Internet) towards an A+P device are\n   not supported.\n"
- title: 5.3.3.  Fragmentation
  contents:
  - "5.3.3.  Fragmentation\n   In order to deliver a fragmented IP packet to its final\
    \ destination\n   (among those having the same IP address), the PRR should activate\
    \ a\n   dedicated procedure similar to the one used by [RFC6146], Section\n  \
    \ 3.5, in the sense that it should reassemble the fragments in order to\n   look\
    \ at the destination port number.\n   Note that it is recommended to use a Path\
    \ MTU Discovery (PMTUD)\n   mechanism (e.g., [RFC1191]).\n   Security issues related\
    \ to fragmentation are out of scope of this\n   document.  For more details, refer\
    \ to [RFC1858].\n"
- title: 5.3.4.  Limitations of the A+P Approach
  contents:
  - "5.3.4.  Limitations of the A+P Approach\n   One limitation that A+P shares with\
    \ any other IP-address-sharing\n   mechanism is the availability of well-known\
    \ ports.  In fact, services\n   run by customers that share the same IP address\
    \ will be distinguished\n   by the port number.  As a consequence, it will be\
    \ impossible for two\n   customers who share the same IP address to run services\
    \ on the same\n   port (e.g., port 80).  Unfortunately, working around this limitation\n\
    \   usually implies application-specific hacks (e.g., HTTP and HTTPS\n   redirection),\
    \ discussion of which is out of the scope of this\n   document.  Of course, a\
    \ provider might charge more for giving a\n   customer the well-known port range,\
    \ 0..1024, thus allowing the\n   customer to provide externally available services.\
    \  Many applications\n   require the availability of well-known ports.  However,\
    \ those\n   applications are not expected to work in an A+P environment unless\n\
    \   they can adapt to work with different ports.  Such applications do\n   not\
    \ work behind today's NATs either.\n   Another problem that is common to all NATs\
    \ is coexistence with IPsec.\n   In fact, a NAT that also translates port numbers\
    \ prevents the\n   Authentication Header (AH) and Encapsulating Security Payload\
    \ (ESP)\n   from functioning properly, both in tunnel and in transport mode. \
    \ In\n   this respect, we stress that, since an A+P subsystem exhibits the\n \
    \  same external behavior as a NAT, well-known workarounds (such as\n   [RFC3715])\
    \ can be employed.\n   A+P, as all other port-sharing solutions, suffers from\
    \ the issues\n   documented in [RFC6269], but that's something we'll have to live\n\
    \   with.\n   For the host-based A+P, issues related to application conflicts\
    \ when\n   trying to bind to an out-of-range port are to be further assessed.\n\
    \   Note that extensions to the host-based model have been proposed in\n   the\
    \ past (e.g., the Port-Enhanced Address Resolution Protocol (ARP)\n   extension\
    \ documented in http://software.merit.edu/pe-arp/).\n"
- title: 5.3.5.  Port Allocation Strategy Agnostic
  contents:
  - "5.3.5.  Port Allocation Strategy Agnostic\n   Issues raised by [PR-IP-ISSUES]\
    \ have been analyzed in\n   [STATELESS-4v6].  As seen in that document, most of\
    \ the issues apply\n   to host-based port-sharing solutions.  A+P is not intended\
    \ to be a\n   host-based port-sharing solution.\n   The conclusion of [STATELESS-4v6]\
    \ is that the set of issues\n   specifically attributed to A+P either do not apply\
    \ to CPE-based\n   flavors or can be mitigated.  The A+P solution represents a\n\
    \   reasonable trade-off compared to alternatives in areas such as\n   binding\
    \ logging (for data storage purposes) and ease of deployment\n   and operations,\
    \ all of which are actually facilitated by such a\n   solution.\n"
- title: 6.  Security Considerations
  contents:
  - "6.  Security Considerations\n   With CGNs/LSNs, tracing hackers, spammers, and\
    \ other criminals will\n   be difficult, requiring logging, recording, and storing\
    \ of all\n   connection-based mapping information.  The need for storage implies\
    \ a\n   trade-off.  On one hand, the LSNs can manage addresses and ports as\n\
    \   dynamically as possible in order to maximize aggregation.  On the\n   other\
    \ hand, the more quickly the mapping between private and public\n   space changes,\
    \ the more information needs to be recorded.  This would\n   cause concern not\
    \ only for law enforcement services, but also for\n   privacy advocates.\n   A+P\
    \ offers a better set of trade-offs.  All that needs to be logged\n   is the allocation\
    \ of a range of port numbers to a customer.  By\n   design, this will be done\
    \ rarely, improving scalability.  If the NAT\n   functionality is moved further\
    \ up the tree, the logging requirement\n   will be as well, increasing the load\
    \ on one node, but giving it more\n   resources to allocate to a busy customer,\
    \ perhaps decreasing the\n   frequency of allocation requests.\n   The other extreme\
    \ is A+P NAT on the customer premises.  Such a node\n   would be no different\
    \ than today's NAT boxes, which do no such\n   logging.  We thus conclude that\
    \ A+P is no worse than today's\n   situation, while being considerably better\
    \ than CGNs.\n"
- title: 7.  Acknowledgments
  contents:
  - "7.  Acknowledgments\n   The authors wish to especially thank Remi Despres and\
    \ Pierre Levis\n   for their help on the development of the A+P approach.  We\
    \ also thank\n   David Ward for review, constructive criticism, and interminable\n\
    \   questions, and Dave Thaler for useful criticism on \"stackable\" A+P\n   gateways.\
    \  We would also like to thank the following persons for\n   their feedback on\
    \ earlier versions of this work: Rob Austein, Gert\n   Doering, Dino Farinacci,\
    \ Russ Housley, Ruediger Volk, Tina Tsou, and\n   Pasi Sarolahti.\n"
- title: 8.  References
  contents:
  - '8.  References

    '
- title: 8.1.  Normative References
  contents:
  - "8.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use in\
    \ RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119, March\
    \ 1997.\n"
- title: 8.2.  Informative References
  contents:
  - "8.2.  Informative References\n   [4rd]      Despres, R., Matsushima, S., Murakami,\
    \ T., and O. Troan,\n              \"IPv4 Residual Deployment across IPv6-Service\
    \ networks\n              (4rd) ISP-NAT's made optional\", Work in Progress,\n\
    \              March 2011.\n   [A+P-EXPERIMENTS]\n              Deng, X., Boucadair,\
    \ M., and F. Telecom, \"Implementing A+P\n              in the provider's IPv6-only\
    \ network\", Work in Progress,\n              March 2011.\n   [BCP38]    Ferguson,\
    \ P. and D. Senie, \"Network Ingress Filtering:\n              Defeating Denial\
    \ of Service Attacks which employ IP Source\n              Address Spoofing\"\
    , BCP 38, RFC 2827, May 2000.\n   [BITTORRENT-ADDR-SHARING]\n              Boucadair,\
    \ M., Grimault, J., Levis, P., and A.\n              Villefranque, \"Behavior\
    \ of BitTorrent service in an IP\n              Shared Address Environment\",\
    \ Work in Progress, March 2011.\n   [PCP-BASE]\n              Wing, D., Cheshire,\
    \ S., Boucadair, M., Penno, R., and P.\n              Selkirk, \"Port Control\
    \ Protocol (PCP)\", Work in Progress,\n              July 2011.\n   [PORT-RANGE-OPT]\n\
    \              Boucadair, M., Levis, P., Bajko, G., Savolainen, T., and\n    \
    \          T. ZOU), \"Huawei Port Range Configuration Options for PPP\n      \
    \        IPCP\", Work in Progress, June 2011.\n   [PR-ADDR-ASSIGN]\n         \
    \     Bajko, G., Savolainen, T., Boucadair, M., and P. Levis,\n              \"\
    Port Restricted IP Address Assignment\", Work in Progress,\n              September\
    \ 2010.\n   [PR-IP-ISSUES]\n              Thaler, D., \"Issues With Port-Restricted\
    \ IP Addresses\",\n              Work in Progress, February 2010.\n   [RFC1191]\
    \  Mogul, J. and S. Deering, \"Path MTU discovery\", RFC 1191,\n             \
    \ November 1990.\n   [RFC1858]  Ziemba, G., Reed, D., and P. Traina, \"Security\n\
    \              Considerations for IP Fragment Filtering\", RFC 1858,\n       \
    \       October 1995.\n   [RFC1918]  Rekhter, Y., Moskowitz, R., Karrenberg, D.,\
    \ Groot, G., and\n              E. Lear, \"Address Allocation for Private Internets\"\
    ,\n              BCP 5, RFC 1918, February 1996.\n   [RFC3715]  Aboba, B. and\
    \ W. Dixon, \"IPsec-Network Address Translation\n              (NAT) Compatibility\
    \ Requirements\", RFC 3715, March 2004.\n   [RFC5737]  Arkko, J., Cotton, M.,\
    \ and L. Vegoda, \"IPv4 Address Blocks\n              Reserved for Documentation\"\
    , RFC 5737, January 2010.\n   [RFC6052]  Bao, C., Huitema, C., Bagnulo, M., Boucadair,\
    \ M., and X.\n              Li, \"IPv6 Addressing of IPv4/IPv6 Translators\",\
    \ RFC 6052,\n              October 2010.\n   [RFC6146]  Bagnulo, M., Matthews,\
    \ P., and I. van Beijnum, \"Stateful\n              NAT64: Network Address and\
    \ Protocol Translation from IPv6\n              Clients to IPv4 Servers\", RFC\
    \ 6146, April 2011.\n   [RFC6269]  Ford, M., Boucadair, M., Durand, A., Levis,\
    \ P., and P.\n              Roberts, \"Issues with IP Address Sharing\", RFC 6269,\n\
    \              June 2011.\n   [RFC6333]  Durand, A., Droms, R., Woodyatt, J.,\
    \ and Y. Lee, \"Dual-\n              Stack Lite Broadband Deployments Following\
    \ IPv4\n              Exhaustion\", RFC 6333, August 2011.\n   [SHARED-ADDR-OPT]\n\
    \              Boucadair, M., Levis, P., Grimault, J., Savolainen, T.,\n     \
    \         and G. Bajko, \"Dynamic Host Configuration Protocol\n              (DHCPv6)\
    \ Options for Shared IP Addresses Solutions\",\n              Work in Progress,\
    \ December 2009.\n   [STATELESS-4v6]\n              Dec, W., Asati, R., Bao, C.,\
    \ and H. Deng, \"Stateless 4Via6\n              Address Sharing\", Work in Progress,\
    \ July 2011.\n"
- title: 9.  Contributing Authors
  contents:
  - "9.  Contributing Authors\n   This document has nine primary authors.\n   Gabor\
    \ Bajko\n   Nokia\n   EMail: gabor.bajko@nokia.com\n   Mohamed Boucadair\n   France\
    \ Telecom\n   3, Av Francois Chateaux\n   Rennes  35000\n   France\n   EMail:\
    \ mohamed.boucadair@orange-ftgroup.co\n   Steven M. Bellovin\n   Columbia University\n\
    \   1214 Amsterdam Avenue\n   MC 0401\n   New York, NY  10027\n   US\n   Phone:\
    \ +1 212 939 7149\n   EMail: bellovin@acm.org\n   Randy Bush\n   Internet Initiative\
    \ Japan\n   5147 Crystal Springs\n   Bainbridge Island, Washington  98110\n  \
    \ US\n   Phone: +1 206 780 0431 x1\n   EMail: randy@psg.com\n   Luca Cittadini\n\
    \   Universita' Roma Tre\n   via della Vasca Navale, 79\n   Rome,   00146\n  \
    \ Italy\n   Phone: +39 06 5733 3215\n   EMail: luca.cittadini@gmail.com\n   Olaf\
    \ Maennel\n   Loughborough University\n   Department of Computer Science - N.2.03\n\
    \   Loughborough\n   United Kingdom\n   Phone: +44 115 714 0042\n   EMail: o@maennel.net\n\
    \   Reinaldo Penno\n   Juniper Networks\n   1194 North Mathilda Avenue\n   Sunnyvale,\
    \ California  94089\n   US\n   EMail: rpenno@juniper.net\n   Teemu Savolainen\n\
    \   Nokia\n   Hermiankatu 12 D\n   TAMPERE, FI-33720\n   Finland\n   EMail: teemu.savolainen@nokia.com\n\
    \   Jan Zorz\n   Go6 Institute Slovenia\n   Frankovo naselje 165\n   Skofja Loka,\
    \  4220\n   Slovenia\n   EMail: jan@go6.si\n"
- title: Editor's Address
  contents:
  - "Editor's Address\n   Randy Bush (editor)\n   Internet Initiative Japan\n   5147\
    \ Crystal Springs\n   Bainbridge Island, Washington  98110\n   US\n   Phone: +1\
    \ 206 780 0431 x1\n   EMail: randy@psg.com\n"
