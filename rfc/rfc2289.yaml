- contents:
  - '                       A One-Time Password System

    '
  title: __initial_text__
- contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol
    for the\n   Internet community, and requests discussion and suggestions for\n
    \  improvements.  Please refer to the current edition of the \"Internet\n   Official
    Protocol Standards\" (STD 1) for the standardization state\n   and status of this
    protocol.  Distribution of this memo is unlimited.\n"
  title: Status of this Memo
- contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (1998).  All Rights Reserved.\n"
  title: Copyright Notice
- contents:
  - "1.0 ABSTRACT\n   This document describes a one-time password authentication system\n
    \  (OTP). The system provides authentication for system access (login)\n   and
    other applications requiring authentication that is secure\n   against passive
    attacks based on replaying captured reusable\n   passwords. OTP evolved from the
    S/KEY (S/KEY is a trademark of\n   Bellcore) One-Time Password System that was
    released by Bellcore and\n   is described in references [3] and [5].\n"
  title: 1.0 ABSTRACT
- contents:
  - "2.0 OVERVIEW\n   One form of attack on networked computing systems is eavesdropping
    on\n   network connections to obtain authentication information such as the\n
    \  login IDs and passwords of legitimate users. Once this information is\n   captured,
    it can be used at a later time to gain access to the\n   system. One-time password
    systems are designed to counter this type\n   of attack, called a \"replay attack\"
    [4].\n   The authentication system described in this document uses a secret\n
    \  pass-phrase to generate a sequence of one-time (single use)\n   passwords.
    \ With this system, the user's secret pass-phrase never\n   needs to cross the
    network at any time such as during authentication\n   or during pass-phrase changes.
    Thus, it is not vulnerable to replay\n   attacks.  Added security is provided
    by the property that no secret\n   information need be stored on any system, including
    the server being\n   protected.\n   The OTP system protects against external passive
    attacks against the\n   authentication subsystem. It does not prevent a network
    eavesdropper\n   from gaining access to private information and does not provide\n
    \  protection against either \"social engineering\" or active attacks [9].\n"
  title: 2.0 OVERVIEW
- contents:
  - "3.0 INTRODUCTION\n   There are two entities in the operation of the OTP one-time
    password\n   system. The generator must produce the appropriate one-time password\n
    \  from the user's secret pass-phrase and from information provided in\n   the
    challenge from the server. The server must send a challenge that\n   includes
    the appropriate generation parameters to the generator, must\n   verify the one-time
    password received, must store the last valid\n   one-time password it received,
    and must store the corresponding one-\n   time password sequence number. The server
    must also facilitate the\n   changing of the user's secret pass-phrase in a secure
    manner.\n   The OTP system generator passes the user's secret pass-phrase, along\n
    \  with a seed received from the server as part of the challenge,\n   through
    multiple iterations of a secure hash function to produce a\n   one-time password.
    After each successful authentication, the number\n   of secure hash function iterations
    is reduced by one.  Thus, a unique\n   sequence of passwords is generated.  The
    server verifies the one-time\n   password received from the generator by computing
    the secure hash\n   function once and comparing the result with the previously
    accepted\n   one-time password.  This technique was first suggested by Leslie\n
    \  Lamport [1].\n"
  title: 3.0 INTRODUCTION
- contents:
  - "4.0 REQUIREMENTS TERMINOLOGY\n   In this document, the words that are used to
    define the significance\n   of each particular requirement are usually capitalized.
    \ These words\n   are:\n     - MUST\n       This word or the adjective \"REQUIRED\"
    means that the item is an\n       absolute requirement of the specification.\n
    \    - SHOULD\n       This word or the adjective \"RECOMMENDED\" means that there
    might\n       exist valid reasons in particular circumstances to ignore this\n
    \      item, but the full implications should be understood and the case\n       carefully
    weighed before taking a different course.\n     - MAY\n       This word or the
    adjective \"OPTIONAL\" means that this item is\n       truly optional.  One vendor
    might choose to include the item\n       because a particular marketplace requires
    it or because it\n       enhances the product, for example; another vendor may
    omit the\n       same item.\n"
  title: 4.0 REQUIREMENTS TERMINOLOGY
- contents:
  - "5.0 SECURE HASH FUNCTION\n   The security of the OTP system is based on the non-invertability
    of a\n   secure hash function. Such a function must be tractable to compute in\n
    \  the forward direction, but computationally infeasible to invert.\n   The interfaces
    are currently defined for three such hash algorithms,\n   MD4 [2] and MD5 [6]
    by Ronald Rivest, and SHA [7] by NIST.  All\n   conforming implementations of
    both server and generators MUST support\n   MD5.  They SHOULD support SHA and
    MAY also support MD4.  Clearly, the\n   generator and server must use the same
    algorithm in order to\n   interoperate. Other hash algorithms may be specified
    for use with\n   this system by publishing the appropriate interfaces.\n   The
    secure hash algorithms listed above have the property that they\n   accept an
    input that is arbitrarily long and produce a fixed size\n   output. The OTP system
    folds this output to 64 bits using the\n   algorithms in the Appendix A. 64 bits
    is also the length of the one-\n   time passwords. This is believed to be long
    enough to be secure and\n   short enough to be entered manually (see below, Form
    of Output) when\n   necessary.\n"
  title: 5.0 SECURE HASH FUNCTION
- contents:
  - "6.0 GENERATION OF ONE-TIME PASSWORDS\n   This section describes the generation
    of the one-time passwords.\n   This process consists of an initial step in which
    all inputs are\n   combined, a computation step where the secure hash function
    is\n   applied a specified number of times, and an output function where the\n
    \  64 bit one-time password is converted to a human readable form.\n   Appendix
    C contains examples of the outputs given a collection of\n   inputs.  It provides
    implementors with a means of verification the\n   use of these algorithms.\n   Initial
    Step\n   In principle, the user's secret pass-phrase may be of any length. To\n
    \  reduce the risk from techniques such as exhaustive search or\n   dictionary
    attacks, character string pass-phrases MUST contain at\n   least 10 characters
    (see Form of Inputs below).  All implementations\n   MUST support a pass-phrases
    of at least 63 characters.  The secret\n   pass-phrase is frequently, but is not
    required to be, textual\n   information provided by a user.\n   In this step,
    the pass phrase is concatenated with a seed that is\n   transmitted from the server
    in clear text. This non-secret seed\n   allows clients to use the same secret
    pass-phrase on multiple\n   machines (using different seeds) and to safely recycle
    their secret\n   pass-phrases by changing the seed.\n   The result of the concatenation
    is passed through the secure hash\n   function and then is reduced to 64 bits
    using one of the function\n   dependent algorithms shown in Appendix A.\n   Computation
    Step\n   A sequence of one-time passwords is produced by applying the secure\n
    \  hash function multiple times to the output of the initial step\n   (called
    S). That is, the first one-time password to be used is\n   produced by passing
    S through the secure hash function a number of\n   times (N) specified by the
    user. The next one-time password to be\n   used is generated by passing S though
    the secure hash function N-1\n   times. An eavesdropper who has monitored the
    transmission of a one-\n   time password would not be able to generate the next
    required\n   password because doing so would mean inverting the hash function.\n
    \  Form of Inputs\n   The secret pass-phrase is seen only by the OTP generator.
    To allow\n   interchangeability of generators, all generators MUST support a\n
    \  secret pass-phrase of 10 to 63 characters. Implementations MAY\n   support
    a longer pass-phrase, but such implementations risk the loss\n   of interchangeability
    with implementations supporting only the\n   minimum.\n   The seed MUST consist
    of purely alphanumeric characters and MUST be\n   of one to 16 characters in length.
    The seed is a string of characters\n   that MUST not contain any blanks and SHOULD
    consist of strictly\n   alphanumeric characters from the ISO-646 Invariant Code
    Set.  The\n   seed MUST be case insensitive and MUST be internally converted to\n
    \  lower case before it is processed.\n   The sequence number and seed together
    constitute a larger unit of\n   data called the challenge. The challenge gives
    the generator the\n   parameters it needs to calculate the correct one-time password
    from\n   the secret pass-phrase. The challenge MUST be in a standard syntax so\n
    \  that automated generators can recognize the challenge in context and\n   extract
    these parameters. The syntax of the challenge is:\n           otp-<algorithm identifier>
    <sequence integer> <seed>\n   The three tokens MUST be separated by a white space
    (defined as any\n   number of spaces and/or tabs) and the entire challenge string
    MUST be\n   terminated with either a space or a new line. The string \"otp-\"
    MUST\n   be in lower case.  The algorithm identifier is case sensitive (the\n
    \  existing identifiers are all lower case), and the seed is case\n   insensitive
    and converted before use to lower case.  If additional\n   algorithms are defined,
    appropriate identifiers (short, but not\n   limited to three or four characters)
    must be defined. The currently\n   defined algorithm identifiers are:\n       md4
    \       MD4 Message Digest\n       md5        MD5 Message Digest\n       sha1
    \      NIST Secure Hash Algorithm Revision 1\n   An example of an OTP challenge
    is:   otp-md5 487 dog2\n   Form of Output\n   The one-time password generated
    by the above procedure is 64 bits in\n   length. Entering a 64 bit number is a
    difficult and error prone\n   process. Some generators insert this password into
    the input stream\n   and some others make it available for system \"cut and paste.\"
    Still\n   other arrangements require the one-time password to be entered\n   manually.
    The OTP system is designed to facilitate this manual entry\n   without impeding
    automatic methods. The one-time password therefore\n   MAY be converted to, and
    all servers MUST be capable of accepting it\n   as, a sequence of six short (1
    to 4 letter) easily typed words that\n   only use characters from ISO-646 IVCS.
    Each word is chosen from a\n   dictionary of 2048 words; at 11 bits per word,
    all one-time passwords\n   may be encoded.\n   The two extra bits in this encoding
    are used to store a checksum.\n   The 64 bits of key are broken down into pairs
    of bits, then these\n   pairs are summed together. The two least significant bits
    of this sum\n   are encoded in the last two bits of the six word sequence with
    the\n   least significant bit of the sum as the last bit encoded. All OTP\n   generators
    MUST calculate this checksum and all OTP servers MUST\n   verify this checksum
    explicitly as part of the operation of decoding\n   this representation of the
    one-time password.\n   Generators that produce the six-word format MUST present
    the words in\n   upper case with single spaces used as separators. All servers
    MUST\n   accept six-word format without regard to case and white space used as\n
    \  a separator. The two lines below represent the same one-time\n   password.
    \ The first is valid as output from a generator and as input\n   a server, the
    second is valid only as human input to a server.\n            OUST COAT FOAL MUG
    BEAK TOTE\n            oust coat foal  mug  beak  tote\n     Interoperability
    requires that all OTP servers and generators use\n     the same dictionary. The
    standard dictionary was originally\n     specified in the \"S/KEY One Time Password
    System\" that is described\n     in RFC 1760 [5].  This dictionary is included
    in this document as\n     Appendix D.\n     To facilitate the implementation of
    smaller generators, hexadecimal\n     output is an acceptable alternative for
    the presentation of the\n     one-time password. All implementations of the server
    software MUST\n     accept case-insensitive hexadecimal as well as six-word format.
    The\n     hexadecimal digits may be separated by white space so servers are\n
    \    REQUIRED to ignore all white space.  If the representation is\n     partitioned
    by white space, leading zeros must be retained.\n     Examples of hexadecimal
    format are:\n           Representation                Value\n           3503785b369cda8b
    \             0x3503785b369cda8b\n           e5cc a1b8 7c13 096b           0xe5cca1b87c13096b\n
    \          C7 48 90 F4 27 7B A1 CF       0xc74890f4277ba1cf\n           47 9 A68
    28 4C 9D 0 1BC       0x479a68284c9d01bc\n   In addition to accepting six-word
    and hexadecimal encodings of the\n   64 bit one-time password, servers SHOULD
    accept the alternate\n   dictionary encoding described in Appendix B.  The six
    words in this\n   encoding MUST not overlap the set of words in the standard\n
    \  dictionary.  To avoid ambiguity with the hexadecimal representation,\n   words
    in the alternate dictionary MUST not be comprised solely of\n   the letters A-F.
    \ Decoding words thus encoded does not require any\n   knowledge of the alternative
    dictionary used so the acceptance of\n   any alternate dictionary implies the
    acceptance of all alternate\n   dictionaries.  Words in the alternative dictionaries
    are case\n   sensitive.  Generators and servers MUST preserve the case in the\n
    \  processing of these words.\n   In summary, all conforming servers MUST accept
    six-word input that\n   uses the Standard Dictionary (RFC 1760 and Appendix D),
    MUST accept\n   hexadecimal encoding, and SHOULD accept six-word input that uses
    the\n   Alternative Dictionary technique (Appendix B).  As there is a remote\n
    \  possibility that a hexadecimal encoding of a one-time password will\n   look
    like a valid six-word standard dictionary encoding, all\n   implementations MUST
    use the following scheme.  If a six-word\n   encoded one-time password is valid,
    it is accepted.  Otherwise, if\n   the one-time password can be interpreted as
    hexadecimal, and with\n   that decoding it is valid, then it is accepted.\n"
  title: 6.0 GENERATION OF ONE-TIME PASSWORDS
- contents:
  - "7.0 VERIFICATION OF ONE-TIME PASSWORDS\n   An application on the server system
    that requires OTP authentication\n   is expected to issue an OTP challenge as
    described above. Given the\n   parameters from this challenge and the secret pass-phrase,
    the\n   generator can compute (or lookup) the one-time password that is\n   passed
    to the server to be verified.\n   The server system has a database containing,
    for each user, the\n   one-time password from the last successful authentication
    or the\n   first OTP of a newly initialized sequence. To authenticate the user,\n
    \  the server decodes the one-time password received from the generator\n   into
    a 64-bit key and then runs this key through the secure hash\n   function once.
    If the result of this operation matches the stored\n   previous OTP, the authentication
    is successful and the accepted\n   one-time password is stored for future use.\n"
  title: 7.0 VERIFICATION OF ONE-TIME PASSWORDS
- contents:
  - "8.0 PASS-PHRASE CHANGES\n   Because the number of hash function applications
    executed by the\n   generator decreases by one each time, at some point the user
    must\n   reinitialize the system or be unable to authenticate.\n   Although some
    installations may not permit users to initialize\n   remotely, implementations
    MUST provide a means to do so that does\n   not reveal the user's secret pass-phrase.
    \ One way is to provide a\n   means to reinitialize the  sequence through explicit
    specification\n   of the first one-time password.\n   When the sequence of one-time
    passwords is reinitialized,\n   implementations MUST verify that the seed or the
    pass-phrase is\n   changed.  Installations SHOULD discourage any operation that
    sends\n   the secret pass-phrase over a network in clear-text as such practice\n
    \  defeats the concept of a one-time password.\n   Implementations MAY use the
    following technique for\n   [re]initialization:\n      o  The user picks a new
    seed and hash count (default values may\n         be offered).  The user provides
    these, along with the\n         corresponding generated one-time password, to
    the host system.\n      o  The user MAY also provide the corresponding generated
    one\n         time password for count-1 as an error check.\n      o  The user
    SHOULD provide the generated one-time password for\n         the old seed and
    old hash count to protect an idle terminal\n         or workstation (this implies
    that when the count is 1, the\n         user can login but cannot then change
    the seed or count).\n   In the future a specific protocol may be defined for\n
    \  reinitialization that will permit smooth and possibly automated\n   interoperation
    of all hosts and generators.\n"
  title: 8.0 PASS-PHRASE CHANGES
- contents:
  - "9.0 PROTECTION AGAINST RACE ATTACK\n   All conforming server implementations
    MUST protect against the race\n   condition described in this section.  A defense
    against this attack\n   is outlined; implementations MAY use this approach or
    MAY select an\n   alternative defense.\n   It is possible for an attacker to listen
    to most of a one-time\n   password, guess the remainder, and then race the legitimate
    user to\n   complete the authentication.  Multiple guesses against the last word\n
    \  of the six-word format are likely to succeed.\n   One possible defense is to
    prevent a user from starting multiple\n   simultaneous authentication sessions.
    This means that once the\n   legitimate user has initiated authentication, an
    attacker would be\n   blocked until the first authentication process has completed.
    \ In\n   this approach, a timeout is necessary to thwart a denial of service\n
    \  attack.\n"
  title: 9.0 PROTECTION AGAINST RACE ATTACK
- contents:
  - "10.0 SECURITY CONSIDERATIONS\n   This entire document discusses an authentication
    system that\n   improves security by limiting the danger of eavesdropping/replay\n
    \  attacks that have been used against simple password systems [4].\n   The use
    of the OTP system only provides protections against passive\n   eavesdropping/replay
    attacks.  It does not provide for the privacy\n   of transmitted data, and it
    does not provide protection against\n   active attacks such as session hijacking
    that are known to be\n   present in the current Internet [9].  The use of IP Security\n
    \  (IPsec), see [10], [11], and [12] is recommended to protect against\n   TCP
    session hijacking.\n   The success of the OTP system to protect host systems is
    dependent\n   on the non-invertability of the secure hash functions used.  To
    our\n   knowledge, none of the hash algorithms have been broken, but it is\n   generally
    believed [6] that MD4 is not as strong as MD5.  If a\n   server supports multiple
    hash algorithms, it is only as secure as\n   the weakest algorithm.\n"
  title: 10.0 SECURITY CONSIDERATIONS
- contents:
  - "11.0 ACKNOWLEDGMENTS\n   The idea behind OTP authentication was first proposed
    by Leslie\n   Lamport [1]. Bellcore's S/KEY system, from which OTP is derived,
    was\n   proposed by Phil Karn, who also wrote most of the Bellcore reference\n
    \  implementation.\n"
  title: 11.0 ACKNOWLEDGMENTS
- contents:
  - "12.0 REFERENCES\n   [1]  Leslie Lamport, \"Password Authentication with Insecure\n
    \       Communication\", Communications of the ACM 24.11 (November\n        1981),
    770-772\n   [2]  Rivest, R., \"The MD4 Message-Digest Algorithm\", RFC 1320,\n
    \       April 1992.\n   [3]  Neil Haller, \"The S/KEY One-Time Password System\",
    Proceedings\n        of the ISOC Symposium on Network and Distributed System\n
    \       Security, February 1994, San Diego, CA\n   [4]  Haller, N., and R. Atkinson,
    \"On Internet Authentication\",\n        RFC 1704, October 1994.\n   [5]  Haller,
    N., \"The S/KEY One-Time Password System\",\n        RFC 1760, February 1995.\n
    \  [6]  Rivest, R., \"The MD5 Message-Digest Algorithm\", RFC 1321,\n        April
    1992.\n   [7]  National Institute of Standards and Technology (NIST),\n        \"Announcing
    the Secure Hash Standard\", FIPS 180-1, U.S.\n        Department of Commerce,
    April 1995.\n   [8]  International Standard - Information Processing -- ISO 7-bit\n
    \       coded character set for information interchange (Invariant Code\n        Set),
    ISO-646, International Standards Organization, Geneva,\n        Switzerland, 1983\n
    \  [9]  Computer Emergency Response Team (CERT), \"IP Spoofing and\n        Hijacked
    Terminal Connections\", CA-95:01, January 1995.\n        Available via anonymous
    ftp from info.cert.org in\n        /pub/cert_advisories.\n   [10] Atkinson, R.,
    \"Security Architecture for the Internet Protocol\",\n        RFC 1825, August
    1995.\n   [11] Atkinson, R., \"IP Authentication Header\", RFC 1826, August\n
    \       1995.\n   [12] Atkinson, R., \"IP Encapsulating Security Payload (ESP)\",
    RFC\n        1827, August 1995.\n"
  title: 12.0 REFERENCES
- contents:
  - "13.0 AUTHORS' ADDRESSES\n   Neil Haller\n   Bellcore\n   MCC 1C-265B\n   445
    South Street\n   Morristown, NJ, 07960-6438, USA\n   Phone: +1 201 829-4478\n
    \  Fax:   +1 201 829-2504\n   EMail: nmh@bellcore.com\n   Craig Metz\n   Kaman
    Sciences Corporation\n   For NRL Code 5544\n   4555 Overlook Avenue, S.W.\n   Washington,
    DC, 20375-5337, USA\n   Phone: +1 202 404-7122\n   Fax:   +1 202 404-7942\n   EMail:
    cmetz@cs.nrl.navy.mil\n   Philip J. Nesser II\n   Nesser & Nesser Consulting\n
    \  13501 100th Ave NE\n   Suite 5202\n   Kirkland, WA 98034, USA\n   Phone: +1
    206 481 4303\n   EMail: pjnesser@martigny.ai.mit.edu\n   Mike Straw\n   Bellcore\n
    \  RRC 1A-225\n   445 Hoes Lane\n   Piscataway, NJ 08854-4182\n   Phone:  +1 908
    699-5212\n   EMail:  mess@bellcore.com\n"
  title: 13.0 AUTHORS' ADDRESSES
- contents:
  - "Appendix A  -  Interfaces to Secure Hash Algorithms\n   Original interoperability
    tests provided valuable insights into the\n   subtle problems which occur when
    converting protocol specifications\n   into running code.  In particular, the
    manipulation of bit ordered\n   data is dependent on the architecture of the hardware,
    specifically\n   the way in which a computer stores multi-byte data.  The method
    is\n   typically called big or little \"endian.\"  A big endian machine stores\n
    \  data with the most significant byte first, while a little endian\n   machine
    stores the least significant byte first.  Thus, on a big\n   endian machine data
    is stored left to right, while little endian\n   machines store data right to
    left.\n   For example, the four byte value 0x11AABBCC is stored in a big endian\n
    \  machine as the following series of four bytes, \"0x11\", \"0xAA\",\n   \"0xBB\",
    and \"0xCC\", while on a little endian machine the value would\n   be stored as
    \"0xCC\", \"0xBB\", \"0xAA\", and \"0x11\".\n   For historical reasons, and to
    promote interoperability with existing\n   implementations, it was decided that
    ALL hashes incorporated into the\n   OTP protocol MUST store the output of their
    hash function in LITTLE\n   ENDIAN format BEFORE the bit folding to 64 bits occurs.
    \ This is done\n   in the implementations of MD4 and MD5 (see references [2] and
    [6]),\n   while it must be explicitly done for the implementation of SHA1 (see\n
    \  reference [7]).\n   Any future hash functions implemented into the OTP protocol
    SHOULD\n   provide a similar reference fragment of code to allow independent\n
    \  implementations to operate successfully.\n   MD4 Message Digest (see reference
    [2])\n     MD4_CTX md;\n     unsigned char result[16];\n     strcpy(buf, seed);
    \    /* seed must be in lower case */\n     strcat(buf, passwd);\n     MD4Init(&md);\n
    \    MD4Update(&md, (unsigned char *)buf, strlen(buf));\n     MD4Final(result,
    &md);\n     /* Fold the 128 bit result to 64 bits */\n     for (i = 0; i < 8;
    i++)\n             result[i] ^= result[i+8];\n"
  title: Appendix A  -  Interfaces to Secure Hash Algorithms
- contents:
  - "MD5 Message Digest (see reference [6])\n     MD5_CTX md;\n     unsigned char
    result[16];\n     strcpy(buf, seed);     /* seed must be in lower case */\n     strcat(buf,
    passwd);\n     MD5Init(&md);\n     MD5Update(&md, (unsigned char *)buf, strlen(buf));\n
    \    MD5Final(result, &md);\n     /* Fold the 128 bit result to 64 bits */\n     for
    (i = 0; i < 8; i++)\n             result[i] ^= result[i+8];\n"
  title: MD5 Message Digest (see reference [6])
- contents:
  - "SHA Secure Hash Algorithm (see reference [7])\n     SHA_INFO sha;\n     unsigned
    char result[16];\n     strcpy(buf, seed);     /* seed must be in lower case */\n
    \    strcat(buf, passwd);\n     sha_init(&sha);\n     sha_update(&sha, (unsigned
    char *)buf, strlen(buf));\n     sha_final(&sha);       /* NOTE:  no result buffer
    */\n     /* Fold the 160 bit result to 64 bits */\n     sha.digest[0] ^= sha.digest[2];\n
    \    sha.digest[1] ^= sha.digest[3];\n     sha.digest[0] ^= sha.digest[4];\n     /*\n
    \     * copy the resulting 64 bits to the result buffer in little endian\n      *
    fashion (analogous to the way MD4Final() and MD5Final() do).\n      */\n     for
    (i = 0, j = 0; j < 8; i++, j += 4)\n     {\n             result[j]   = (unsigned
    char)(sha.digest[i] & 0xff);\n             result[j+1] = (unsigned char)((sha.digest[i]
    >> 8) & 0xff);\n             result[j+2] = (unsigned char)((sha.digest[i] >> 16)
    & 0xff);\n             result[j+3] = (unsigned char)((sha.digest[i] >> 24) & 0xff);\n
    \    }\n"
  title: SHA Secure Hash Algorithm (see reference [7])
- contents:
  - "Appendix B   -   Alternative Dictionary Algorithm\n   The purpose of alternative
    dictionary encoding of the OTP one-time\n   password is to allow the use of language
    specific or friendly words.\n   As case translation is not always well defined,
    the alternative\n   dictionary encoding is case sensitive.  Servers SHOULD accept
    this\n   encoding in addition to the standard 6-word and hexadecimal\n   encodings.\n
    \  GENERATOR ENCODING USING AN ALTERNATE DICTIONARY\n     The standard 6-word
    encoding uses the placement of a word in the\n     dictionary to represent an
    11-bit number. The 64-bit one-time\n     password can then be represented by six
    words.\n     An alternative dictionary of 2048 words may be created such that\n
    \    each word W and position of the word in the dictionary N obey the\n     relationship:\n
    \            alg( W ) % 2048 == N\n     where\n             alg is the hash algorithm
    used (e.g. MD4, MD5, SHA1).\n     In addition, no words in the standard dictionary
    may be chosen.\n     The generator expands the 64-bit one-time password to 66
    bits by\n     computing parity as with the standard 6-word encoding.  The six
    11-\n     bit numbers are then converted to words using the dictionary that\n
    \    was created such that the above relationship holds.\n   SERVER DECODING OF
    ALTERNATE DICTIONARY ONE-TIME PASSWORDS\n     The server accepting alternative
    dictionary encoding converts each\n     word to an 11-bit number using the above
    encoding. These numbers\n     are then used in the same way as the decoded standard
    dictionary\n     words to form the 66-bit one-time password.\n     The server
    does not need to have access to the alternate dictionary\n     that was used to
    create the one-time password it is authenticating.\n     This is because the decoding
    from word to 11-bit number does not\n     make any use of the dictionary.  As
    a result of the independence of\n     the dictionary, a server accepting one alternate
    dictionary accept\n     all alternate dictionaries.\n"
  title: Appendix B   -   Alternative Dictionary Algorithm
- contents:
  - "Appendix C  -  OTP Verification Examples\n   This appendix provides a series
    of inputs and correct outputs for all\n   three of the defined OTP cryptographic
    hashes, specifically MD4, MD5,\n   and SHA1.  This document is intended to be
    used by developers for\n   interoperability checks when creating generators or
    servers.  Output\n   is provided in both hexadecimal notation and the six word
    encoding\n   documented in Appendix D.\n   GENERAL CHECKS\n   Note that the output
    given for these checks is not intended to be\n   taken literally, but describes
    the type of action that should be\n   taken.\n   Pass Phrase Length\n Input:\n
    \  Pass Phrase: Too_short\n   Seed: iamvalid\n   Count: 99\n   Hash: ANY\n Output:\n
    \  ERROR:  Pass Phrase too short\n Input:\n   Pass Phrase:\n     1234567890123456789012345678901234567890123456789012345678901234\n
    \  Seed: iamvalid\n   Count: 99\n   Hash: ANY\n Output:\n   WARNING: Pass Phrase
    longer than the recommended maximum length of\n"
  - '63

    '
  - "Seed Values\n Input:\n   Pass Phrase:  A_Valid_Pass_Phrase\n   Seed: Length_Okay\n
    \  Count: 99\n   Hash: ANY\n Output:\n   ERROR: Seed must be purely alphanumeric\n
    Input:\n   Pass Phrase:  A_Valid_Pass_Phrase\n   Seed: LengthOfSeventeen\n   Count:
    99\n   Hash: ANY\n Output:\n   ERROR: Seed must be between 1 and 16 characters
    in length\n Input:\n   Pass Phrase:  A_Valid_Pass_Phrase\n   Seed: A Seed\n   Count:
    99\n   Hash: ANY\n Output:\n   ERROR: Seed must not contain any spaces\n"
  - "Parity Calculations\n Input:\n   Pass Phrase: A_Valid_Pass_Phrase\n   Seed: AValidSeed\n
    \  Count: 99\n   Hash: MD5\n Output:\n   Hex: 85c43ee03857765b\n   Six Word(CORRECT):
    \         FOWL KID MASH DEAD DUAL OAF\n   Six Word(INCORRECT PARITY): FOWL KID
    MASH DEAD DUAL NUT\n   Six Word(INCORRECT PARITY): FOWL KID MASH DEAD DUAL O\n
    \  Six Word(INCORRECT PARITY): FOWL KID MASH DEAD DUAL OAK\n"
  - 'MD4 ENCODINGS

    '
  - 'Pass Phrase     Seed    Cnt Hex                 Six Word Format

    '
  - '========================================================================

    '
  - "This is a test. TeSt     0  D185 4218 EBBB 0B51\n                                           ROME
    MUG FRED SCAN LIVE LACE\n"
  - "This is a test. TeSt     1  6347 3EF0 1CD0 B444\n                                           CARD
    SAD MINI RYE COL KIN\n"
  - "This is a test. TeSt    99  C5E6 1277 6E6C 237A\n                                           NOTE
    OUT IBIS SINK NAVE MODE\n"
  - "AbCdEfGhIjK     alpha1   0  5007 6F47 EB1A DE4E\n                                           AWAY
    SEN ROOK SALT LICE MAP\n"
  - "AbCdEfGhIjK     alpha1   1  65D2 0D19 49B5 F7AB\n                                           CHEW
    GRIM WU HANG BUCK SAID\n"
  - "AbCdEfGhIjK     alpha1  99  D150 C82C CE6F 62D1\n                                           ROIL
    FREE COG HUNK WAIT COCA\n"
  - "OTP's are good  correct  0  849C 79D4 F6F5 5388\n                                           FOOL
    STEM DONE TOOL BECK NILE\n"
  - "OTP's are good  correct  1  8C09 92FB 2508 47B1\n                                           GIST
    AMOS MOOT AIDS FOOD SEEM\n"
  - "OTP's are good  correct 99  3F3B F4B4 145F D74B\n                                           TAG
    SLOW NOV MIN WOOL KENO\n"
  - 'MD5 ENCODINGS

    '
  - 'Pass Phrase     Seed    Cnt Hex                 Six Word Format

    '
  - '========================================================================

    '
  - "This is a test. TeSt     0  9E87 6134 D904 99DD\n                                           INCH
    SEA ANNE LONG AHEM TOUR\n"
  - "This is a test. TeSt     1  7965 E054 36F5 029F\n                                           EASE
    OIL FUM CURE AWRY AVIS\n"
  - "This is a test. TeSt    99  50FE 1962 C496 5880\n                                           BAIL
    TUFT BITS GANG CHEF THY\n"
  - "AbCdEfGhIjK     alpha1   0  8706 6DD9 644B F206\n                                           FULL
    PEW DOWN ONCE MORT ARC\n"
  - "AbCdEfGhIjK     alpha1   1  7CD3 4C10 40AD D14B\n                                           FACT
    HOOF AT FIST SITE KENT\n"
  - "AbCdEfGhIjK     alpha1  99  5AA3 7A81 F212 146C\n                                           BODE
    HOP JAKE STOW JUT RAP\n"
  - "OTP's are good  correct  0  F205 7539 43DE 4CF9\n                                           ULAN
    NEW ARMY FUSE SUIT EYED\n"
  - "OTP's are good  correct  1  DDCD AC95 6F23 4937\n                                           SKIM
    CULT LOB SLAM POE HOWL\n"
  - "OTP's are good  correct 99  B203 E28F A525 BE47\n                                           LONG
    IVY JULY AJAR BOND LEE\n"
  - 'SHA1 ENCODINGS

    '
  - 'Pass Phrase     Seed    Cnt Hex                 Six Word Format

    '
  - '========================================================================

    '
  - "This is a test. TeSt     0  BB9E 6AE1 979D 8FF4\n                                           MILT
    VARY MAST OK SEES WENT\n"
  - "This is a test. TeSt     1  63D9 3663 9734 385B\n                                           CART
    OTTO HIVE ODE VAT NUT\n"
  - "This is a test. TeSt    99  87FE C776 8B73 CCF9\n                                           GAFF
    WAIT SKID GIG SKY EYED\n"
  - "AbCdEfGhIjK     alpha1   0  AD85 F658 EBE3 83C9\n                                           LEST
    OR HEEL SCOT ROB SUIT\n"
  - "AbCdEfGhIjK     alpha1   1  D07C E229 B5CF 119B\n                                           RITE
    TAKE GELD COST TUNE RECK\n"
  - "AbCdEfGhIjK     alpha1  99  27BC 7103 5AAF 3DC6\n                                           MAY
    STAR TIN LYON VEDA STAN\n"
  - "OTP's are good  correct  0  D51F 3E99 BF8E 6F0B\n                                           RUST
    WELT KICK FELL TAIL FRAU\n"
  - "OTP's are good  correct  1  82AE B52D 9437 74E4\n                                           FLIT
    DOSE ALSO MEW DRUM DEFY\n"
  - "OTP's are good  correct 99  4F29 6A74 FE15 67EC\n                                           AURA
    ALOE HURL WING BERG WAIT\n"
  title: Appendix C  -  OTP Verification Examples
- contents:
  - "Appendix D   -   Dictionary for Converting Between 6-Word and Binary Formats\n
    \  This dictionary is from the module put.c in the original Bellcore\n   reference
    distribution.\n"
  - '{        "A",     "ABE",   "ACE",   "ACT",   "AD",    "ADA",   "ADD",

    '
  - '"AGO",   "AID",   "AIM",   "AIR",   "ALL",   "ALP",   "AM",    "AMY",

    '
  - '"AN",    "ANA",   "AND",   "ANN",   "ANT",   "ANY",   "APE",   "APS",

    '
  - '"APT",   "ARC",   "ARE",   "ARK",   "ARM",   "ART",   "AS",    "ASH",

    '
  - '"ASK",   "AT",    "ATE",   "AUG",   "AUK",   "AVE",   "AWE",   "AWK",

    '
  - '"AWL",   "AWN",   "AX",   "AYE",   "BAD",   "BAG",   "BAH",   "BAM",

    '
  - '"BAN",   "BAR",   "BAT",   "BAY",   "BE",    "BED",   "BEE",   "BEG",

    '
  - '"BEN",   "BET",   "BEY",   "BIB",   "BID",   "BIG",   "BIN",   "BIT",

    '
  - '"BOB",   "BOG",   "BON",   "BOO",   "BOP",   "BOW",   "BOY",   "BUB",

    '
  - '"BUD",   "BUG",   "BUM",   "BUN",   "BUS",   "BUT",   "BUY",   "BY",

    '
  - '"BYE",   "CAB",   "CAL",   "CAM",   "CAN",   "CAP",   "CAR",   "CAT",

    '
  - '"CAW",   "COD",   "COG",   "COL",   "CON",   "COO",   "COP",   "COT",

    '
  - '"COW",   "COY",   "CRY",   "CUB",   "CUE",   "CUP",   "CUR",   "CUT",

    '
  - '"DAB",   "DAD",   "DAM",   "DAN",   "DAR",   "DAY",   "DEE",   "DEL",

    '
  - '"DEN",   "DES",   "DEW",   "DID",   "DIE",   "DIG",   "DIN",   "DIP",

    '
  - '"DO",    "DOE",   "DOG",   "DON",   "DOT",   "DOW",   "DRY",   "DUB",

    '
  - '"DUD",   "DUE",   "DUG",   "DUN",   "EAR",   "EAT",   "ED",    "EEL",

    '
  - '"EGG",   "EGO",   "ELI",   "ELK",   "ELM",   "ELY",   "EM",    "END",

    '
  - '"EST",   "ETC",   "EVA",   "EVE",   "EWE",   "EYE",   "FAD",   "FAN",

    '
  - '"FAR",   "FAT",   "FAY",   "FED",   "FEE",   "FEW",   "FIB",   "FIG",

    '
  - '"FIN",   "FIR",   "FIT",   "FLO",   "FLY",   "FOE",   "FOG",   "FOR",

    '
  - '"FRY",   "FUM",   "FUN",   "FUR",   "GAB",   "GAD",   "GAG",   "GAL",

    '
  - '"GAM",   "GAP",   "GAS",   "GAY",   "GEE",   "GEL",   "GEM",   "GET",

    '
  - '"GIG",   "GIL",   "GIN",   "GO",    "GOT",   "GUM",   "GUN",   "GUS",

    '
  - '"GUT",   "GUY",   "GYM",   "GYP",   "HA",    "HAD",   "HAL",   "HAM",

    '
  - '"HAN",   "HAP",   "HAS",   "HAT",   "HAW",   "HAY",   "HE",    "HEM",

    '
  - '"HEN",   "HER",   "HEW",   "HEY",   "HI",    "HID",   "HIM",   "HIP",

    '
  - '"HIS",   "HIT",   "HO",   "HOB",   "HOC",   "HOE",   "HOG",   "HOP",

    '
  - '"HOT",   "HOW",   "HUB",   "HUE",   "HUG",   "HUH",   "HUM",   "HUT",

    '
  - '"I",     "ICY",   "IDA",   "IF",    "IKE",   "ILL",   "INK",   "INN",

    '
  - '"IO",    "ION",   "IQ",   "IRA",   "IRE",   "IRK",   "IS",    "IT",

    '
  - '"ITS",   "IVY",   "JAB",   "JAG",   "JAM",   "JAN",   "JAR",   "JAW",

    '
  - '"JAY",   "JET",   "JIG",   "JIM",   "JO",    "JOB",   "JOE",   "JOG",

    '
  - '"JOT",   "JOY",   "JUG",   "JUT",   "KAY",   "KEG",   "KEN",   "KEY",

    '
  - '"KID",   "KIM",   "KIN",   "KIT",   "LA",    "LAB",   "LAC",   "LAD",

    '
  - '"LAG",   "LAM",   "LAP",   "LAW",   "LAY",   "LEA",   "LED",   "LEE",

    '
  - '"LEG",   "LEN",   "LEO",   "LET",   "LEW",   "LID",   "LIE",   "LIN",

    '
  - '"LIP",   "LIT",   "LO",   "LOB",   "LOG",   "LOP",   "LOS",   "LOT",

    '
  - '"LOU",   "LOW",   "LOY",   "LUG",   "LYE",   "MA",    "MAC",   "MAD",

    '
  - '"MAE",   "MAN",   "MAO",   "MAP",   "MAT",   "MAW",   "MAY",   "ME",

    '
  - '"MEG",   "MEL",   "MEN",   "MET",   "MEW",   "MID",   "MIN",   "MIT",

    '
  - '"MOB",   "MOD",   "MOE",   "MOO",   "MOP",   "MOS",   "MOT",   "MOW",

    '
  - '"MUD",   "MUG",   "MUM",   "MY",    "NAB",   "NAG",   "NAN",   "NAP",

    '
  - '"NAT",   "NAY",   "NE",   "NED",   "NEE",   "NET",   "NEW",   "NIB",

    '
  - '"NIL",   "NIP",   "NIT",   "NO",    "NOB",   "NOD",   "NON",   "NOR",

    '
  - '"NOT",   "NOV",   "NOW",   "NU",    "NUN",   "NUT",   "O",     "OAF",

    '
  - '"OAK",   "OAR",   "OAT",   "ODD",   "ODE",   "OF",    "OFF",   "OFT",

    '
  - '"OH",    "OIL",   "OK",   "OLD",   "ON",    "ONE",   "OR",    "ORB",

    '
  - '"ORE",   "ORR",   "OS",   "OTT",   "OUR",   "OUT",   "OVA",   "OW",

    '
  - '"OWE",   "OWL",   "OWN",   "OX",    "PA",    "PAD",   "PAL",   "PAM",

    '
  - '"PAN",   "PAP",   "PAR",   "PAT",   "PAW",   "PAY",   "PEA",   "PEG",

    '
  - '"PEN",   "PEP",   "PER",   "PET",   "PEW",   "PHI",   "PI",    "PIE",

    '
  - '"PIN",   "PIT",   "PLY",   "PO",    "POD",   "POE",   "POP",   "POT",

    '
  - '"POW",   "PRO",   "PRY",   "PUB",   "PUG",   "PUN",   "PUP",   "PUT",

    '
  - '"QUO",   "RAG",   "RAM",   "RAN",   "RAP",   "RAT",   "RAW",   "RAY",

    '
  - '"REB",   "RED",   "REP",   "RET",   "RIB",   "RID",   "RIG",   "RIM",

    '
  - '"RIO",   "RIP",   "ROB",   "ROD",   "ROE",   "RON",   "ROT",   "ROW",

    '
  - '"ROY",   "RUB",   "RUE",   "RUG",   "RUM",   "RUN",   "RYE",   "SAC",

    '
  - '"SAD",   "SAG",   "SAL",   "SAM",   "SAN",   "SAP",   "SAT",   "SAW",

    '
  - '"SAY",   "SEA",   "SEC",   "SEE",   "SEN",   "SET",   "SEW",   "SHE",

    '
  - '"SHY",   "SIN",   "SIP",   "SIR",   "SIS",   "SIT",   "SKI",   "SKY",

    '
  - '"SLY",   "SO",    "SOB",   "SOD",   "SON",   "SOP",   "SOW",   "SOY",

    '
  - '"SPA",   "SPY",   "SUB",   "SUD",   "SUE",   "SUM",   "SUN",   "SUP",

    '
  - '"TAB",   "TAD",   "TAG",   "TAN",   "TAP",   "TAR",   "TEA",   "TED",

    '
  - '"TEE",   "TEN",   "THE",   "THY",   "TIC",   "TIE",   "TIM",   "TIN",

    '
  - '"TIP",   "TO",    "TOE",   "TOG",   "TOM",   "TON",   "TOO",   "TOP",

    '
  - '"TOW",   "TOY",   "TRY",   "TUB",   "TUG",   "TUM",   "TUN",   "TWO",

    '
  - '"UN",    "UP",    "US",   "USE",   "VAN",   "VAT",   "VET",   "VIE",

    '
  - '"WAD",   "WAG",   "WAR",   "WAS",   "WAY",   "WE",    "WEB",   "WED",

    '
  - '"WEE",   "WET",   "WHO",   "WHY",   "WIN",   "WIT",   "WOK",   "WON",

    '
  - '"WOO",   "WOW",   "WRY",   "WU",    "YAM",   "YAP",   "YAW",   "YE",

    '
  - '"YEA",   "YES",   "YET",   "YOU",   "ABED",  "ABEL",  "ABET",  "ABLE",

    '
  - '"ABUT",  "ACHE",  "ACID",  "ACME",  "ACRE",  "ACTA",  "ACTS",  "ADAM",

    '
  - '"ADDS",  "ADEN",  "AFAR",  "AFRO",  "AGEE",  "AHEM",  "AHOY",  "AIDA",

    '
  - '"AIDE",  "AIDS",  "AIRY",  "AJAR",  "AKIN",  "ALAN",  "ALEC",  "ALGA",

    '
  - '"ALIA",  "ALLY",  "ALMA",  "ALOE",  "ALSO",  "ALTO",  "ALUM",  "ALVA",

    '
  - '"AMEN",  "AMES",  "AMID",  "AMMO",  "AMOK",  "AMOS",  "AMRA",  "ANDY",

    '
  - '"ANEW",  "ANNA",  "ANNE",  "ANTE",  "ANTI",  "AQUA",  "ARAB",  "ARCH",

    '
  - '"AREA",  "ARGO",  "ARID",  "ARMY",  "ARTS",  "ARTY",  "ASIA",  "ASKS",

    '
  - '"ATOM",  "AUNT",  "AURA",  "AUTO",  "AVER",  "AVID",  "AVIS",  "AVON",

    '
  - '"AVOW",  "AWAY",  "AWRY",  "BABE",  "BABY",  "BACH",  "BACK",  "BADE",

    '
  - '"BAIL",  "BAIT",  "BAKE",  "BALD",  "BALE",  "BALI",  "BALK",  "BALL",

    '
  - '"BALM",  "BAND",  "BANE",  "BANG",  "BANK",  "BARB",  "BARD",  "BARE",

    '
  - '"BARK",  "BARN",  "BARR",  "BASE",  "BASH",  "BASK",  "BASS",  "BATE",

    '
  - '"BATH",  "BAWD",  "BAWL",  "BEAD",  "BEAK",  "BEAM",  "BEAN",  "BEAR",

    '
  - '"BEAT",  "BEAU",  "BECK",  "BEEF",  "BEEN",  "BEER",  "BEET",  "BELA",

    '
  - '"BELL",  "BELT",  "BEND",  "BENT",  "BERG",  "BERN",  "BERT",  "BESS",

    '
  - '"BEST",  "BETA",  "BETH",  "BHOY",  "BIAS",  "BIDE",  "BIEN",  "BILE",

    '
  - '"BILK",  "BILL",  "BIND",  "BING",  "BIRD",  "BITE",  "BITS",  "BLAB",

    '
  - '"BLAT",  "BLED",  "BLEW",  "BLOB",  "BLOC",  "BLOT",  "BLOW",  "BLUE",

    '
  - '"BLUM",  "BLUR",  "BOAR",  "BOAT",  "BOCA",  "BOCK",  "BODE",  "BODY",

    '
  - '"BOGY",  "BOHR",  "BOIL",  "BOLD",  "BOLO",  "BOLT",  "BOMB",  "BONA",

    '
  - '"BOND",  "BONE",  "BONG",  "BONN",  "BONY",  "BOOK",  "BOOM",  "BOON",

    '
  - '"BOOT",  "BORE",  "BORG",  "BORN",  "BOSE",  "BOSS",  "BOTH",  "BOUT",

    '
  - '"BOWL",  "BOYD",  "BRAD",  "BRAE",  "BRAG",  "BRAN",  "BRAY",  "BRED",

    '
  - '"BREW",  "BRIG",  "BRIM",  "BROW",  "BUCK",  "BUDD",  "BUFF",  "BULB",

    '
  - '"BULK",  "BULL",  "BUNK",  "BUNT",  "BUOY",  "BURG",  "BURL",  "BURN",

    '
  - '"BURR",  "BURT",  "BURY",  "BUSH",  "BUSS",  "BUST",  "BUSY",  "BYTE",

    '
  - '"CADY",  "CAFE",  "CAGE",  "CAIN",  "CAKE",  "CALF",  "CALL",  "CALM",

    '
  - '"CAME",  "CANE",  "CANT",  "CARD",  "CARE",  "CARL",  "CARR",  "CART",

    '
  - '"CASE",  "CASH",  "CASK",  "CAST",  "CAVE",  "CEIL",  "CELL",  "CENT",

    '
  - '"CERN",  "CHAD",  "CHAR",  "CHAT",  "CHAW",  "CHEF",  "CHEN",  "CHEW",

    '
  - '"CHIC",  "CHIN",  "CHOU",  "CHOW",  "CHUB",  "CHUG",  "CHUM",  "CITE",

    '
  - '"CITY",  "CLAD",  "CLAM",  "CLAN",  "CLAW",  "CLAY",  "CLOD",  "CLOG",

    '
  - '"CLOT",  "CLUB",  "CLUE",  "COAL",  "COAT",  "COCA",  "COCK",  "COCO",

    '
  - '"CODA",  "CODE",  "CODY",  "COED",  "COIL",  "COIN",  "COKE",  "COLA",

    '
  - '"COLD",  "COLT",  "COMA",  "COMB",  "COME",  "COOK",  "COOL",  "COON",

    '
  - '"COOT",  "CORD",  "CORE",  "CORK",  "CORN",  "COST",  "COVE",  "COWL",

    '
  - '"CRAB",  "CRAG",  "CRAM",  "CRAY",  "CREW",  "CRIB",  "CROW",  "CRUD",

    '
  - '"CUBA",  "CUBE",  "CUFF",  "CULL",  "CULT",  "CUNY",  "CURB",  "CURD",

    '
  - '"CURE",  "CURL",  "CURT",  "CUTS",  "DADE",  "DALE",  "DAME",  "DANA",

    '
  - '"DANE",  "DANG",  "DANK",  "DARE",  "DARK",  "DARN",  "DART",  "DASH",

    '
  - '"DATA",  "DATE",  "DAVE",  "DAVY",  "DAWN",  "DAYS",  "DEAD",  "DEAF",

    '
  - '"DEAL",  "DEAN",  "DEAR",  "DEBT",  "DECK",  "DEED",  "DEEM",  "DEER",

    '
  - '"DEFT",  "DEFY",  "DELL",  "DENT",  "DENY",  "DESK",  "DIAL",  "DICE",

    '
  - '"DIED",  "DIET",  "DIME",  "DINE",  "DING",  "DINT",  "DIRE",  "DIRT",

    '
  - '"DISC",  "DISH",  "DISK",  "DIVE",  "DOCK",  "DOES",  "DOLE",  "DOLL",

    '
  - '"DOLT",  "DOME",  "DONE",  "DOOM",  "DOOR",  "DORA",  "DOSE",  "DOTE",

    '
  - '"DOUG",  "DOUR",  "DOVE",  "DOWN",  "DRAB",  "DRAG",  "DRAM",  "DRAW",

    '
  - '"DREW",  "DRUB",  "DRUG",  "DRUM",  "DUAL",  "DUCK",  "DUCT",  "DUEL",

    '
  - '"DUET",  "DUKE",  "DULL",  "DUMB",  "DUNE",  "DUNK",  "DUSK",  "DUST",

    '
  - '"DUTY",  "EACH",  "EARL",  "EARN",  "EASE",  "EAST",  "EASY",  "EBEN",

    '
  - '"ECHO",  "EDDY",  "EDEN",  "EDGE",  "EDGY",  "EDIT",  "EDNA",  "EGAN",

    '
  - '"ELAN",  "ELBA",  "ELLA",  "ELSE",  "EMIL",  "EMIT",  "EMMA",  "ENDS",

    '
  - '"ERIC",  "EROS",  "EVEN",  "EVER",  "EVIL",  "EYED",  "FACE",  "FACT",

    '
  - '"FADE",  "FAIL",  "FAIN",  "FAIR",  "FAKE",  "FALL",  "FAME",  "FANG",

    '
  - '"FARM",  "FAST",  "FATE",  "FAWN",  "FEAR",  "FEAT",  "FEED",  "FEEL",

    '
  - '"FEET",  "FELL",  "FELT",  "FEND",  "FERN",  "FEST",  "FEUD",  "FIEF",

    '
  - '"FIGS",  "FILE",  "FILL",  "FILM",  "FIND",  "FINE",  "FINK",  "FIRE",

    '
  - '"FIRM",  "FISH",  "FISK",  "FIST",  "FITS",  "FIVE",  "FLAG",  "FLAK",

    '
  - '"FLAM",  "FLAT",  "FLAW",  "FLEA",  "FLED",  "FLEW",  "FLIT",  "FLOC",

    '
  - '"FLOG",  "FLOW",  "FLUB",  "FLUE",  "FOAL",  "FOAM",  "FOGY",  "FOIL",

    '
  - '"FOLD",  "FOLK",  "FOND",  "FONT",  "FOOD",  "FOOL",  "FOOT",  "FORD",

    '
  - '"FORE",  "FORK",  "FORM",  "FORT",  "FOSS",  "FOUL",  "FOUR",  "FOWL",

    '
  - '"FRAU",  "FRAY",  "FRED",  "FREE",  "FRET",  "FREY",  "FROG",  "FROM",

    '
  - '"FUEL",  "FULL",  "FUME",  "FUND",  "FUNK",  "FURY",  "FUSE",  "FUSS",

    '
  - '"GAFF",  "GAGE",  "GAIL",  "GAIN",  "GAIT",  "GALA",  "GALE",  "GALL",

    '
  - '"GALT",  "GAME",  "GANG",  "GARB",  "GARY",  "GASH",  "GATE",  "GAUL",

    '
  - '"GAUR",  "GAVE",  "GAWK",  "GEAR",  "GELD",  "GENE",  "GENT",  "GERM",

    '
  - '"GETS",  "GIBE",  "GIFT",  "GILD",  "GILL",  "GILT",  "GINA",  "GIRD",

    '
  - '"GIRL",  "GIST",  "GIVE",  "GLAD",  "GLEE",  "GLEN",  "GLIB",  "GLOB",

    '
  - '"GLOM",  "GLOW",  "GLUE",  "GLUM",  "GLUT",  "GOAD",  "GOAL",  "GOAT",

    '
  - '"GOER",  "GOES",  "GOLD",  "GOLF",  "GONE",  "GONG",  "GOOD",  "GOOF",

    '
  - '"GORE",  "GORY",  "GOSH",  "GOUT",  "GOWN",  "GRAB",  "GRAD",  "GRAY",

    '
  - '"GREG",  "GREW",  "GREY",  "GRID",  "GRIM",  "GRIN",  "GRIT",  "GROW",

    '
  - '"GRUB",  "GULF",  "GULL",  "GUNK",  "GURU",  "GUSH",  "GUST",  "GWEN",

    '
  - '"GWYN",  "HAAG",  "HAAS",  "HACK",  "HAIL",  "HAIR",  "HALE",  "HALF",

    '
  - '"HALL",  "HALO",  "HALT",  "HAND",  "HANG",  "HANK",  "HANS",  "HARD",

    '
  - '"HARK",  "HARM",  "HART",  "HASH",  "HAST",  "HATE",  "HATH",  "HAUL",

    '
  - '"HAVE",  "HAWK",  "HAYS",  "HEAD",  "HEAL",  "HEAR",  "HEAT",  "HEBE",

    '
  - '"HECK",  "HEED",  "HEEL",  "HEFT",  "HELD",  "HELL",  "HELM",  "HERB",

    '
  - '"HERD",  "HERE",  "HERO",  "HERS",  "HESS",  "HEWN",  "HICK",  "HIDE",

    '
  - '"HIGH",  "HIKE",  "HILL",  "HILT",  "HIND",  "HINT",  "HIRE",  "HISS",

    '
  - '"HIVE",  "HOBO",  "HOCK",  "HOFF",  "HOLD",  "HOLE",  "HOLM",  "HOLT",

    '
  - '"HOME",  "HONE",  "HONK",  "HOOD",  "HOOF",  "HOOK",  "HOOT",  "HORN",

    '
  - '"HOSE",  "HOST",  "HOUR",  "HOVE",  "HOWE",  "HOWL",  "HOYT",  "HUCK",

    '
  - '"HUED",  "HUFF",  "HUGE",  "HUGH",  "HUGO",  "HULK",  "HULL",  "HUNK",

    '
  - '"HUNT",  "HURD",  "HURL",  "HURT",  "HUSH",  "HYDE",  "HYMN",  "IBIS",

    '
  - '"ICON",  "IDEA",  "IDLE",  "IFFY",  "INCA",  "INCH",  "INTO",  "IONS",

    '
  - '"IOTA",  "IOWA",  "IRIS",  "IRMA",  "IRON",  "ISLE",  "ITCH",  "ITEM",

    '
  - '"IVAN",  "JACK",  "JADE",  "JAIL",  "JAKE",  "JANE",  "JAVA",  "JEAN",

    '
  - '"JEFF",  "JERK",  "JESS",  "JEST",  "JIBE",  "JILL",  "JILT",  "JIVE",

    '
  - '"JOAN",  "JOBS",  "JOCK",  "JOEL",  "JOEY",  "JOHN",  "JOIN",  "JOKE",

    '
  - '"JOLT",  "JOVE",  "JUDD",  "JUDE",  "JUDO",  "JUDY",  "JUJU",  "JUKE",

    '
  - '"JULY",  "JUNE",  "JUNK",  "JUNO",  "JURY",  "JUST",  "JUTE",  "KAHN",

    '
  - '"KALE",  "KANE",  "KANT",  "KARL",  "KATE",  "KEEL",  "KEEN",  "KENO",

    '
  - '"KENT",  "KERN",  "KERR",  "KEYS",  "KICK",  "KILL",  "KIND",  "KING",

    '
  - '"KIRK",  "KISS",  "KITE",  "KLAN",  "KNEE",  "KNEW",  "KNIT",  "KNOB",

    '
  - '"KNOT",  "KNOW",  "KOCH",  "KONG",  "KUDO",  "KURD",  "KURT",  "KYLE",

    '
  - '"LACE",  "LACK",  "LACY",  "LADY",  "LAID",  "LAIN",  "LAIR",  "LAKE",

    '
  - '"LAMB",  "LAME",  "LAND",  "LANE",  "LANG",  "LARD",  "LARK",  "LASS",

    '
  - '"LAST",  "LATE",  "LAUD",  "LAVA",  "LAWN",  "LAWS",  "LAYS",  "LEAD",

    '
  - '"LEAF",  "LEAK",  "LEAN",  "LEAR",  "LEEK",  "LEER",  "LEFT",  "LEND",

    '
  - '"LENS",  "LENT",  "LEON",  "LESK",  "LESS",  "LEST",  "LETS",  "LIAR",

    '
  - '"LICE",  "LICK",  "LIED",  "LIEN",  "LIES",  "LIEU",  "LIFE",  "LIFT",

    '
  - '"LIKE",  "LILA",  "LILT",  "LILY",  "LIMA",  "LIMB",  "LIME",  "LIND",

    '
  - '"LINE",  "LINK",  "LINT",  "LION",  "LISA",  "LIST",  "LIVE",  "LOAD",

    '
  - '"LOAF",  "LOAM",  "LOAN",  "LOCK",  "LOFT",  "LOGE",  "LOIS",  "LOLA",

    '
  - '"LONE",  "LONG",  "LOOK",  "LOON",  "LOOT",  "LORD",  "LORE",  "LOSE",

    '
  - '"LOSS",  "LOST",  "LOUD",  "LOVE",  "LOWE",  "LUCK",  "LUCY",  "LUGE",

    '
  - '"LUKE",  "LULU",  "LUND",  "LUNG",  "LURA",  "LURE",  "LURK",  "LUSH",

    '
  - '"LUST",  "LYLE",  "LYNN",  "LYON",  "LYRA",  "MACE",  "MADE",  "MAGI",

    '
  - '"MAID",  "MAIL",  "MAIN",  "MAKE",  "MALE",  "MALI",  "MALL",  "MALT",

    '
  - '"MANA",  "MANN",  "MANY",  "MARC",  "MARE",  "MARK",  "MARS",  "MART",

    '
  - '"MARY",  "MASH",  "MASK",  "MASS",  "MAST",  "MATE",  "MATH",  "MAUL",

    '
  - '"MAYO",  "MEAD",  "MEAL",  "MEAN",  "MEAT",  "MEEK",  "MEET",  "MELD",

    '
  - '"MELT",  "MEMO",  "MEND",  "MENU",  "MERT",  "MESH",  "MESS",  "MICE",

    '
  - '"MIKE",  "MILD",  "MILE",  "MILK",  "MILL",  "MILT",  "MIMI",  "MIND",

    '
  - '"MINE",  "MINI",  "MINK",  "MINT",  "MIRE",  "MISS",  "MIST",  "MITE",

    '
  - '"MITT",  "MOAN",  "MOAT",  "MOCK",  "MODE",  "MOLD",  "MOLE",  "MOLL",

    '
  - '"MOLT",  "MONA",  "MONK",  "MONT",  "MOOD",  "MOON",  "MOOR",  "MOOT",

    '
  - '"MORE",  "MORN",  "MORT",  "MOSS",  "MOST",  "MOTH",  "MOVE",  "MUCH",

    '
  - '"MUCK",  "MUDD",  "MUFF",  "MULE",  "MULL",  "MURK",  "MUSH",  "MUST",

    '
  - '"MUTE",  "MUTT",  "MYRA",  "MYTH",  "NAGY",  "NAIL",  "NAIR",  "NAME",

    '
  - '"NARY",  "NASH",  "NAVE",  "NAVY",  "NEAL",  "NEAR",  "NEAT",  "NECK",

    '
  - '"NEED",  "NEIL",  "NELL",  "NEON",  "NERO",  "NESS",  "NEST",  "NEWS",

    '
  - '"NEWT",  "NIBS",  "NICE",  "NICK",  "NILE",  "NINA",  "NINE",  "NOAH",

    '
  - '"NODE",  "NOEL",  "NOLL",  "NONE",  "NOOK",  "NOON",  "NORM",  "NOSE",

    '
  - '"NOTE",  "NOUN",  "NOVA",  "NUDE",  "NULL",  "NUMB",  "OATH",  "OBEY",

    '
  - '"OBOE",  "ODIN",  "OHIO",  "OILY",  "OINT",  "OKAY",  "OLAF",  "OLDY",

    '
  - '"OLGA",  "OLIN",  "OMAN",  "OMEN",  "OMIT",  "ONCE",  "ONES",  "ONLY",

    '
  - '"ONTO",  "ONUS",  "ORAL",  "ORGY",  "OSLO",  "OTIS",  "OTTO",  "OUCH",

    '
  - '"OUST",  "OUTS",  "OVAL",  "OVEN",  "OVER",  "OWLY",  "OWNS",  "QUAD",

    '
  - '"QUIT",  "QUOD",  "RACE",  "RACK",  "RACY",  "RAFT",  "RAGE",  "RAID",

    '
  - '"RAIL",  "RAIN",  "RAKE",  "RANK",  "RANT",  "RARE",  "RASH",  "RATE",

    '
  - '"RAVE",  "RAYS",  "READ",  "REAL",  "REAM",  "REAR",  "RECK",  "REED",

    '
  - '"REEF",  "REEK",  "REEL",  "REID",  "REIN",  "RENA",  "REND",  "RENT",

    '
  - '"REST",  "RICE",  "RICH",  "RICK",  "RIDE",  "RIFT",  "RILL",  "RIME",

    '
  - '"RING",  "RINK",  "RISE",  "RISK",  "RITE",  "ROAD",  "ROAM",  "ROAR",

    '
  - '"ROBE",  "ROCK",  "RODE",  "ROIL",  "ROLL",  "ROME",  "ROOD",  "ROOF",

    '
  - '"ROOK",  "ROOM",  "ROOT",  "ROSA",  "ROSE",  "ROSS",  "ROSY",  "ROTH",

    '
  - '"ROUT",  "ROVE",  "ROWE",  "ROWS",  "RUBE",  "RUBY",  "RUDE",  "RUDY",

    '
  - '"RUIN",  "RULE",  "RUNG",  "RUNS",  "RUNT",  "RUSE",  "RUSH",  "RUSK",

    '
  - '"RUSS",  "RUST",  "RUTH",  "SACK",  "SAFE",  "SAGE",  "SAID",  "SAIL",

    '
  - '"SALE",  "SALK",  "SALT",  "SAME",  "SAND",  "SANE",  "SANG",  "SANK",

    '
  - '"SARA",  "SAUL",  "SAVE",  "SAYS",  "SCAN",  "SCAR",  "SCAT",  "SCOT",

    '
  - '"SEAL",  "SEAM",  "SEAR",  "SEAT",  "SEED",  "SEEK",  "SEEM",  "SEEN",

    '
  - '"SEES",  "SELF",  "SELL",  "SEND",  "SENT",  "SETS",  "SEWN",  "SHAG",

    '
  - '"SHAM",  "SHAW",  "SHAY",  "SHED",  "SHIM",  "SHIN",  "SHOD",  "SHOE",

    '
  - '"SHOT",  "SHOW",  "SHUN",  "SHUT",  "SICK",  "SIDE",  "SIFT",  "SIGH",

    '
  - '"SIGN",  "SILK",  "SILL",  "SILO",  "SILT",  "SINE",  "SING",  "SINK",

    '
  - '"SIRE",  "SITE",  "SITS",  "SITU",  "SKAT",  "SKEW",  "SKID",  "SKIM",

    '
  - '"SKIN",  "SKIT",  "SLAB",  "SLAM",  "SLAT",  "SLAY",  "SLED",  "SLEW",

    '
  - '"SLID",  "SLIM",  "SLIT",  "SLOB",  "SLOG",  "SLOT",  "SLOW",  "SLUG",

    '
  - '"SLUM",  "SLUR",  "SMOG",  "SMUG",  "SNAG",  "SNOB",  "SNOW",  "SNUB",

    '
  - '"SNUG",  "SOAK",  "SOAR",  "SOCK",  "SODA",  "SOFA",  "SOFT",  "SOIL",

    '
  - '"SOLD",  "SOME",  "SONG",  "SOON",  "SOOT",  "SORE",  "SORT",  "SOUL",

    '
  - '"SOUR",  "SOWN",  "STAB",  "STAG",  "STAN",  "STAR",  "STAY",  "STEM",

    '
  - '"STEW",  "STIR",  "STOW",  "STUB",  "STUN",  "SUCH",  "SUDS",  "SUIT",

    '
  - '"SULK",  "SUMS",  "SUNG",  "SUNK",  "SURE",  "SURF",  "SWAB",  "SWAG",

    '
  - '"SWAM",  "SWAN",  "SWAT",  "SWAY",  "SWIM",  "SWUM",  "TACK",  "TACT",

    '
  - '"TAIL",  "TAKE",  "TALE",  "TALK",  "TALL",  "TANK",  "TASK",  "TATE",

    '
  - '"TAUT",  "TEAL",  "TEAM",  "TEAR",  "TECH",  "TEEM",  "TEEN",  "TEET",

    '
  - '"TELL",  "TEND",  "TENT",  "TERM",  "TERN",  "TESS",  "TEST",  "THAN",

    '
  - '"THAT",  "THEE",  "THEM",  "THEN",  "THEY",  "THIN",  "THIS",  "THUD",

    '
  - '"THUG",  "TICK",  "TIDE",  "TIDY",  "TIED",  "TIER",  "TILE",  "TILL",

    '
  - '"TILT",  "TIME",  "TINA",  "TINE",  "TINT",  "TINY",  "TIRE",  "TOAD",

    '
  - '"TOGO",  "TOIL",  "TOLD",  "TOLL",  "TONE",  "TONG",  "TONY",  "TOOK",

    '
  - '"TOOL",  "TOOT",  "TORE",  "TORN",  "TOTE",  "TOUR",  "TOUT",  "TOWN",

    '
  - '"TRAG",  "TRAM",  "TRAY",  "TREE",  "TREK",  "TRIG",  "TRIM",  "TRIO",

    '
  - '"TROD",  "TROT",  "TROY",  "TRUE",  "TUBA",  "TUBE",  "TUCK",  "TUFT",

    '
  - '"TUNA",  "TUNE",  "TUNG",  "TURF",  "TURN",  "TUSK",  "TWIG",  "TWIN",

    '
  - '"TWIT",  "ULAN",  "UNIT",  "URGE",  "USED",  "USER",  "USES",  "UTAH",

    '
  - '"VAIL",  "VAIN",  "VALE",  "VARY",  "VASE",  "VAST",  "VEAL",  "VEDA",

    '
  - '"VEIL",  "VEIN",  "VEND",  "VENT",  "VERB",  "VERY",  "VETO",  "VICE",

    '
  - '"VIEW",  "VINE",  "VISE",  "VOID",  "VOLT",  "VOTE",  "WACK",  "WADE",

    '
  - '"WAGE",  "WAIL",  "WAIT",  "WAKE",  "WALE",  "WALK",  "WALL",  "WALT",

    '
  - '"WAND",  "WANE",  "WANG",  "WANT",  "WARD",  "WARM",  "WARN",  "WART",

    '
  - '"WASH",  "WAST",  "WATS",  "WATT",  "WAVE",  "WAVY",  "WAYS",  "WEAK",

    '
  - '"WEAL",  "WEAN",  "WEAR",  "WEED",  "WEEK",  "WEIR",  "WELD",  "WELL",

    '
  - '"WELT",  "WENT",  "WERE",  "WERT",  "WEST",  "WHAM",  "WHAT",  "WHEE",

    '
  - '"WHEN",  "WHET",  "WHOA",  "WHOM",  "WICK",  "WIFE",  "WILD",  "WILL",

    '
  - '"WIND",  "WINE",  "WING",  "WINK",  "WINO",  "WIRE",  "WISE",  "WISH",

    '
  - '"WITH",  "WOLF",  "WONT",  "WOOD",  "WOOL",  "WORD",  "WORE",  "WORK",

    '
  - '"WORM",  "WORN",  "WOVE",  "WRIT",  "WYNN",  "YALE",  "YANG",  "YANK",

    '
  - '"YARD",  "YARN",  "YAWL",  "YAWN",  "YEAH",  "YEAR",  "YELL",  "YOGA",

    '
  - '"YOKE"   };

    '
  title: Appendix D   -   Dictionary for Converting Between 6-Word and Binary Formats
- contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (1998).  All
    Rights Reserved.\n   This document and translations of it may be copied and furnished
    to\n   others, and derivative works that comment on or otherwise explain it\n
    \  or assist in its implementation may be prepared, copied, published\n   and
    distributed, in whole or in part, without restriction of any\n   kind, provided
    that the above copyright notice and this paragraph are\n   included on all such
    copies and derivative works.  However, this\n   document itself may not be modified
    in any way, such as by removing\n   the copyright notice or references to the
    Internet Society or other\n   Internet organizations, except as needed for the
    purpose of\n   developing Internet standards in which case the procedures for\n
    \  copyrights defined in the Internet Standards process must be\n   followed,
    or as required to translate it into languages other than\n   English.\n   The
    limited permissions granted above are perpetual and will not be\n   revoked by
    the Internet Society or its successors or assigns.\n   This document and the information
    contained herein is provided on an\n   \"AS IS\" basis and THE INTERNET SOCIETY
    AND THE INTERNET ENGINEERING\n   TASK FORCE DISCLAIMS ALL WARRANTIES, EXPRESS
    OR IMPLIED, INCLUDING\n   BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF THE
    INFORMATION\n   HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED WARRANTIES
    OF\n   MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.\n"
  title: Full Copyright Statement
