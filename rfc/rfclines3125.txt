Abstract This document defines signature policies for electronic signatures.
A signature policy is a set of rules for the creation and validation of an electronic signature, under which the validity of signature can be determined.
A given legal/contractual context may recognize a particular signature policy as meeting its requirements.
A signature policy has a globally unique reference, which is bound to an electronic signature by the signer as part of the signature calculation.
The signature policy needs to be available in human readable form so that it can be assessed to meet the requirements of the legal and contractual context in which it is being applied.
To allow for the automatic processing of an electronic signature another part of the signature policy specifies the electronic rules for the creation and validation of the electronic signature in a computer processable form.
In the current document the format of the signature policy is defined using ASN.1.
The contents of this document is based on the signature policy defined in ETSI TS 101
Individual copies of this ETSI deliverable can be downloaded from http://www.etsi.org.
This document is intended to cover signature policies which can be used with electronic signatures for various types of transactions, including business transactions (e.g., purchase requisition, contract, and invoice applications).
Electronic signatures can be used for any transaction between an individual and a company, between two companies, between an individual and a governmental body, etc.
This document is independent of any environment.
It can be applied to any environment e.g., smart cards, GSM SIM cards, special programs for electronic signatures etc.
The key words "MUST", "MUST NOT", "REQUIRED", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document (in uppercase, as shown) are to be interpreted as described in [RFC2119].
Service Providers (TSP); The Signature Policy Issuer (which is a Trusted Service Provider (TSP)) issues signatures policies that define the technical and procedural requirements for electronic signature creation, and validation/ verification, in order to meet a particular business need.
The Signer is the entity that creates the electronic signature.
When the signer digitally signs over an signature policy identifier, it represents a commitment on behalf of the signing entity that the data being signed is signed under the rules defined by the signature policy.
The Verifier is the entity that validates the electronic signature, it may be a single entity or multiple entities.
The verifier MUST validate the electronic signature under the rules defined by the electronic signature policy for the signature to be valid.
An arbitrator, is an entity which arbitrates disputes between a signer and a verifier.
It acts as verifier when it verifies the electronic signature after it has been previously validated.
The Trusted Service Providers (TSPs) are one or more entities that help to build trust relationships between the signer and verifier.
Use of TSP specific services MAY be mandated by signature policy.
TSP supporting services include: user certificates, cross  certificates, time stamping tokens,CRLs, ARLs, OCSP responses.
A Trusted Service Providers (TSPs) MAY be a Signature Policy Issuer, as Such, the TSP MUST define the technical and procedural requirements for electronic signature creation and validation, in order to meet a particular business need.
Certification Authorities provide users with public key certificates.
Registration Authorities allows the registration of entities before a CA generates certificates.
Repository Authorities publish CRLs issued by CAs, , cross  certificates (i.e., CA certificates) issued by CAs, signature policies issued by Signature Policy Issuers and optionally public key certificates (i.e., leaf certificates) issued by CAs.
Time Stamping Authorities attest that some data was formed before a given trusted time.
One line Certificate Status Protocol responders (OSCP responders) provide information about the status (i.e., revoked, not revoked, unknown) of a particular certificate.
Attributes Authorities provide users with attributes linked to public key certificates An Arbitrator is an entity that arbitrates disputes between a signer and a verifier.
Signature Policy Specification A signature policy specification includes general information about the policy, the validation policy rules and other signature policy information.
This document defines but does not mandate the form of the signature policy specification.
This document defines an ASN.1 based syntax that may be used to define a structured signature policy.
Future versions of this document may include structured a signature policy specification using XML.
The overall structure of a signature policy defined using ASN.1 is given in this section.
Use of this ASN.1 structure is optional.
This ASN.1 syntax is encoded using the Distinguished Encoding Rules (DER).
In this structure the policy information is preceded by an identifier for the hashing algorithm used to protect the signature policy and followed by the hash value which must be re calculated and checked whenever the signature policy is passed between the issuer and signer/verifier.
The hash is calculated without the outer type and length fields.
The policyIssuerName field identifies the policy issuer in one or more of the general name forms.
The fieldofApplication is a description of the expected application of this policy.
The signature validation policy rules are fully processable to allow the validation of electronic signatures issued under that form of signature policy.
They are described in the rest of this section.
The signPolExtensions is a generic way to extend the definition of any sub component of a signature policy.
The signature validation policy defines for the signer which data elements must be present in the electronic signature he provides and for the verifier which data elements must be present under that signature policy for an electronic signature to be potentially valid.
The signature validation policy is described as follows:
The signingPeriod identifies the date and time before which the signature policy SHOULD NOT be used for creating signatures, and an optional date after which it should not be used for creating signatures.
The CommonRules define rules that are common to all commitment types.
These rules are defined in terms of trust conditions for certificates, time stamps and attributes, along with any constraints on attributes that may be included in the electronic signature.
If a field is present in CommonRules then the equivalent field must not be present in any of the CommitmentRules (see below).
The CommitmentRules consists of the validation rules which apply to given commitment types:
The CommitmentRule for given commitment types are defined in terms of trust conditions for certificates, time stamps and attributes, along with any constraints on attributes that may be included in the electronic signature.
If the SelectedCommitmentTypes indicates "empty" then this rule applied when a commitment type is not present  (i.e., the type of commitment is indicated in the semantics of the message).
Otherwise, the electronic signature must contain a commitment type indication that must fit one of the commitments types that are mentioned in CommitmentType.
A specific commitment type identifier must not appear in more than one commitment rule.
The fieldOfApplication and semantics fields define the specific use and meaning of the commitment within the overall field of application defined for the policy.
3.5  Signer and Verifier Rules
The following rules apply to the format of electronic signatures defined using [ES FORMATS].
the CMS signed attributes that must be provided by the signer under this policy
True if signed data is external to CMS structure
The mandated SignedAttr field must include the object identifier for all those signed attributes required by this document as well as additional attributes required by this policy.
The mandatedUnsignedAttr field must include the object identifier for all those unsigned attributes required by this document as well as additional attributes required by this policy.
For example, if a signature time stamp <see section 1.1) is required by the signer the object identifier for this attribute must be included.
The mandatedCertificateRef identifies whether just the signer's certificate, or all the full certificate path must be provided by the signer.
Only reference to signer cert mandated fullpath (2)
References for full cert path up to a trust point required } The mandatedCertificateInfo field identifies whether a signer's certificate, or all certificates in the certification path to the trust point must be provided by the signer in the certificates field of SignedData.
No mandatory requirements signerOnly (1)  ,
Only reference to signer cert mandated fullpath (2)
References for full cert path up to a   trust point mandated }
CMSAttrs   Mandated CMS unsigned attributed 3.6  Certificate and Revocation Requirement
The SigningCertTrustCondition, TimestampTrustCondition and AttributeTrustCondition (defined in subsequent sub sections) make use of two ASN1 structures which are defined below: CertificateTrustTrees and CertRevReq.
The certificateTrustTrees identifies a set of self signed certificates for the trust points used to start (or end) certificate path processing and the initial conditions for certificate path validation as defined RFC 2459
This ASN1 structure is used to define policy for validating the signing certificate, the TSA's certificate and attribute certificates.
The trustPoint field gives the self signed certificate for the CA that is used as the trust point for the start of certificate path processing.
The pathLenConstraint field gives the maximum number of CA certificates that may be in a certification path following the trustpoint.
A value of zero indicates that only the given trustpoint certificate and an end entity certificate may be used.
If present, the pathLenConstraint field must be greater than or equal to zero.
Where pathLenConstraint is not present, there is no limit to the allowed length of the certification path.
The acceptablePolicySet field identifies the initial set of certificate policies, any of which are acceptable under the signature policy.
The nameConstraints field indicates a name space within which all subject names in subsequent certificates in a certification path must be located.
Restrictions may apply to the subject distinguished name or subject alternative names.
Restrictions apply only when the specified name form is present.
If no name of the type is in the certificate, the certificate is acceptable.
Restrictions are defined in terms of permitted or excluded name subtrees.
Any name matching a restriction in the excludedSubtrees field is invalid regardless of information appearing in the permittedSubtrees.
The policyConstraints extension constrains path processing in two ways.
It can be used to prohibit policy mapping or require that each certificate in a path contain an acceptable policy identifier.
The policyConstraints field, if present specifies requirement for explicit indication of the certificate policy and/or the constraints on policy mapping.
If the inhibitPolicyMapping field is present, the value indicates the number of additional certificates that may appear in the path (including the trustpoint's self certificate) before policy mapping is no longer permitted.
For example, a value of one indicates that policy mapping may be processed in certificates issued by the subject of this certificate, but not in additional certificates in the path.
If the requireExplicitPolicy field is present, subsequent certificates must include an acceptable policy identifier.
The value of requireExplicitPolicy indicates the number of additional certificates that may appear in the path (including the trustpoint's self certificate) before an explicit policy is required.
An acceptable policy identifier is the identifier of a policy required by the user of the certification path or the identifier of a policy which has been declared equivalent through policy mapping.
Revocation Requirements The RevocRequirements field specifies minimum requirements for revocation information, obtained through CRLs and/or OCSP responses, to be used in checking the revocation status of certificates.
This ASN1 structure is used to define policy for validating the signing certificate, the TSA's certificate and attribute certificates.
end certificates (i.e., the signers certificate, the attribute certificate or the time stamping authority certificate).
SEQUENCE  { enuRevReq  EnuRevReq, exRevReq    SignPolExtensions OPTIONAL}
An authority certificate is certificate issued to an authority (e.g., either to a certification authority or to an attribute authority (AA)).
A Time Stamping Authority (TSA) is a trusted third party that creates time stamp tokens in order to indicate that a datum existed at a particular point in time.
The revocation status must be checked   using the Online Certificate Status Protocol   (OCSP),RFC 2450.
At least one of CRL or OCSP checks must be   carried out
Checks must be made against current CRLs (or authority revocation lists);
3.7  Signing Certificate Trust Conditions
The SigningCertTrustCondition field identifies trust conditions for certificate path processing used to validate the signing certificate.
The TimeStampTrustCondition field identifies trust conditions for certificate path processing used to authenticate the timstamping authority and constraints on the name of the time stamping authority.
If ttsCertificateTrustTrees is not present then the same rule as defined in certificateTrustCondition applies to certification of the time stamping authorities public key.
The tstrRevReq specifies minimum requirements for revocation information, obtained through CRLs and/or OCSP responses, to be used in checking the revocation status of the time stamp that must be present in the ES T.
If ttsNameConstraints is not present then there are no additional naming constraints on the trusted time stamping authority other than those implied by the ttsCertificateTrustTrees.
The cautionPeriod field specifies a caution period after the signing time that it is mandated the verifier must wait to get high assurance of the validity of the signer's key and that any relevant revocation has been notified.
The revocation status information forming the ES with Complete validation data must not be collected and used to validate the electronic signature until after this caution period.
The signatureTimestampDelay field specifies a maximum acceptable time between the signing time and the time at which the signature time  stamp, as used to form the ES Time Stamped, is created for the verifier.
If the signature time stamp is later that the time in the signing time attribute by more than the value given in signatureTimestampDelay, the signature must be considered invalid.
If the attributeTrustCondition field is not present then any certified attributes may not considered to be valid under this validation policy.
The AttributeTrustCondition field is defined as follows:
If attributeMandated is true then an attribute, certified within the following constraints, must be present.
If false, then the signature is still valid if no attribute is specified.
The howCertAttribute field specifies whether attributes uncertified attributes "claimed" by the signer, or certified attributes (i.e., Attribute Certificates) or either using the signer attributes attribute defined in [ES FORMATS] section 3.12.3.
The attrCertificateTrustTrees specifies certificate path conditions for any attribute certificate.
If not present the same rules apply as in certificateTrustCondition.
The attrRevReq specifies minimum requirements for revocation information, obtained through CRLs and/or OCSP responses, to be used in checking the revocation status of Attribute Certificates, if any are present.
If the attributeConstraints field is not present then there are no constraints on the attributes that may be validated under this policy.
The attributeConstraints field is defined as follows:
If present, the attributeTypeConstarints field specifies the attribute types which are considered valid under the signature policy.
Any value for that attribute is considered valid.
If present, the attributeTypeConstraints field specifies the specific attribute values which are considered valid under the signature policy.
The algorithmConstrains fields, if present, identifies the signing algorithms (hash, public key cryptography, combined hash and public key cryptography) that may be used for specific purposes and any minimum length.
If this field is not present then the policy applies no constraints.
} The extnID field must contain the object identifier for the extension.
The extnValue field must contain the DER (see ITU T Recommendation X.690 [4]) encoded value of the extension.
The definition of an extension, as identified by extnID must include a definition of the syntax and semantics of the extension.
Security Considerations 4.1  Protection of Private Key
The security of the electronic signature mechanism defined in this document depends on the privacy of the signer's private key.
Implementations must take steps to ensure that private keys cannot be compromised.
Choice of Algorithms Implementers should be aware that cryptographic algorithms become weaker with time.
As new cryptoanalysis techniques are developed and computing performance improves, the work factor to break a particular cryptographic algorithm will reduce.
Therefore, cryptographic algorithm implementations should be modular allowing new algorithms to be readily inserted.
That is, implementers should be prepared for the set of mandatory to implement algorithms to change over time.
Conformance Requirements Signer and verifier systems shall be able to process an electronic signature in accordance with the specification of the signature policy signature policy referenced identifiable by an Object Identifier, see section 3.
This annex provides the reference definition of the ASN.1 syntax signature policies definitions for new syntax defined in this document.
A.1  Definitions Using X.208 (1988)
The ASN.1 Module defined in section A.1 has precedence over that defined in Annex A 2 in the case of any conflict.
{ iso(1) member body(2) us(840)
7} DEFINITIONS EXPLICIT TAGS ::
Public Key Infrastructure Certificate and CRL Profile:
RFC 2560 Certificate, AlgorithmIdentifier, CertificateList, Name, GeneralNames, GeneralName, DirectoryString,Attribute, AttributeTypeAndValue, AttributeType, AttributeValue, PolicyInformation, BMPString, UTF8String FROM PKIX1Explicit88 {iso(1) identified organization(3) dod(6)
DirectoryString OPTIONAL } SignerAndVerifierRules ::
True if signed data is external to CMS structure
(2)   References for full cert path up to a trust point mandated }
SEQUENCE  { enuRevReq  EnuRevReq, exRevReq    SignPolExtensions OPTIONAL}
At least one of CRL or OCSP checks must be carried out
OCTET STRING  } END   ETS ElectronicSignaturePolicies
A.2  Definitions Using X.680 1997 ASN.1
The ASN.1 module defined in section A.1 has precedence over that defined in section A.2 in the case of any conflict.
ETS ElectronicSignaturePolicies 97Syntax { iso(1) member body(2
8} DEFINITIONS EXPLICIT TAGS ::
Public Key Infrastructure   Certificate and CRL Profile:
RFC 2560 Certificate, AlgorithmIdentifier, CertificateList, Name, GeneralNames, GeneralName, DirectoryString, Attribute, AttributeTypeAndValue, AttributeType, AttributeValue, PolicyInformation FROM PKIX1Explicit93 {iso(1) identified organization(3) dod(6)
DirectoryString OPTIONAL } SignerAndVerifierRules ::
True if signed data is external to CMS structure
Only reference to signer cert mandated fullPath
No mandatory requirements signerOnly (1)  ,
Only reference to signer cert mandated fullPath
SEQUENCE  { enuRevReq  EnuRevReq, exRevReq    SignPolExtensions OPTIONAL}
,   Checks must be made against current CRLs   (or authority revocation lists)
At least one of CRL or OCSP checks must be   carried out
The definition of electronic signature mentions: "a commitment has been explicitly endorsed under a "Signature Policy", at a given time, by a signer under an identifier, e.g., a name or a pseudonym, and optionally a role.
" Electronic signatures are commonly applied within the context of a legal or contractual framework.
This establishes the requirements on the electronic signatures and any special semantics (e.g., agreement, intent).
These requirements may be defined in very general abstract terms or in terms of detailed rules.
The specific semantics associated with an electronic signature implied by a legal or contractual framework are outside the scope of this document.
If the signature policy is recognized, within the legal/contractual context, as providing commitment, then the signer explicitly agrees with terms and conditions which are implicitly or explicitly part of the signed data.
When two independent parties want to evaluate an electronic signature, it is fundamental that they get the same result.
It is therefore important that the conditions agreed by the signer at the time of signing are indicated to the verifier and any arbitrator.
An aspect that enables this to be known by all parties is the signature policy.
The technical implications of the signature policy on the electronic signature with all the validation data are called the "Signature Validation Policy".
The signature validation policy specifies the rules used to validate the signature.
This document does not mandate the form and encoding of the specification of the signature policy.
However, for a given signature policy there must be one definitive form that has a unique binary encoded value.
This document includes, as an option, a formal structure for signature validation policy based on the use of Abstract Syntax Notation 1 (ASN.1).
Given the specification of the signature policy and its hash value an implementation of a verification process must obey the rules defined in the specification.
This document places no restriction on how it should be implemented.
Provide the implementation conforms to the conformance requirements as define in section 5 implementation options include:
A validation process that supports a specific signature policy as identified by the signature policy OID.
Such an implementation should conform to a human readable description provided all the processing rules of the signature policy are clearly defined.
However, if additional policies need to be supported, then such an implementation would need to be customized for each additional policy.
This type of implementation may be simpler to implement initially, but can be difficult to enhance to support numerous additional signature policies.
A validation process that is dynamically programmable and able to adapt its validation rules in accordance with a description of the signature policy provided in a computer processable language.
This present document defines such a policy using an ASN.1 structure (see 6.1).
This type of implementation could support multiple signature policies without being modified every time, provided all the validation rules specified as part of the signature policy are known by the implementation.
(i.e., only requires modification if there are additional rules specified).
The precise content of a signature policy is not mandated by the current document.
However, a signature policy must be sufficiently definitive to avoid any ambiguity as to its implementation requirements.
It must be absolutely clear under which conditions an electronic signature should be accepted.
The signature verification policy which includes:  the signing period,  a list of recognized commitment types;  rules for Use of Certification Authorities;  rules for Use of Revocation Status Information;  rules for Use of Roles;  rules for use of Time Stamping and Timing;  signature verification data to be provided by the signer/collected by verifier;
any constraints on signature algorithms and key lengths.
Other signature policy rules required to meet the objectives of the signature.
Variations of the validation policy rules may apply to different commitment types.
B.2  Identification of Signature Policy
When data is signed the signer indicates the signature policy applicable to that electronic signature by including an object identifier for the signature policy with the signature.
The signer and verifier must apply the rules specified by the identified policy.
In addition to the identifier of the signature policy the signer must include the hash of the signature policy, so it can be verified that the policy selected by the signer is the identical to the one being used the verifier.
A signature policy may be qualified by additional information.
A "Signature Policy" will be identifiable by an OID (Object Identifier) and verifiable using a hash of the signature policy.
B.3  General Signature Policy Information General information should be recorded about the signature policy along with the definition of the rules which form the signature policy as described in subsequent subsections.
The "Signature Policy" will be identifiable by an OID (Object Identifier) whose last component (i.e., right most) is an integer that is specific to a particular version issued on the given date.
When the "Signature Policy" was issued.
An identifier for the body responsible for issuing the Signature Policy.
This may be used by the signer or verifying in deciding if a policy is to be trusted, in which case the signer/verifier must authenticate the origin of the signature policy as coming from the identified issuer.
The start time and date, optionally with an end time and date, for the period over which the signature policy may be used to generate electronic signatures.
Field of application: This defines in general terms the general legal/contract/application contexts in which the signature policy is to be used and the specific purposes for which the electronic signature is to be applied.
The signature validation policy may recognize one or more types of commitment as being supported by electronic signatures produced under the security policy.
If an electronic signature does not contain a recognized commitment type then the semantics of the electronic signature is dependent on the data being signed and the context in which it is being used.
Only recognized commitment types are allowed in an electronic signature.
The legal/contractual context will determine the rules applied to the signature, as defined by the signature policy and its recognized commitment types, make it fit for purpose intended.
B.5  Rules for Use of Certification Authorities
The certificate validation process of the verifier, and hence the certificates that may be used by the signer for a valid electronic signature, may be constrained by the combination of the trust point and certificate path constraints in the signature validation policy.
The signature validation policy defines the certification authority trust points that are to be used for signature verification.
Several trust points may be specified under one signature policy.
Specific trust points may be specified for a particular type of commitment defined under the signature policy.
For a signature to be valid a certification path must exists between the Certification Authority that has granted the certificate selected by the signer (i.e., the used user certificate) and one of the trust point of the "Signature Validation Policy".
There may be constraints on the use of certificates issued by one or more CA(s) in the certificate chain and trust points.
The naming constraints limit the forms of names that the CA is allowed to certify.
Name constraints are particularly important when a "Signature policy" identifies more than one trust point.
In this case, a certificate of a particular trusted point may only be used to verify signatures from users with names permitted under the name constraint.
Certificate Authorities may be organized in a tree structure, this tree structure may represent the trust relationship between various CA(s) and the users CA.
Alternatively, a mesh relationship may exist where a combination of tree and peer cross certificates may be used.
The requirement of the certificate path in this document is that it provides the trust relationship between all the CAs and the signers user certificate.
The starting point from a verification point of view, is the "trust point".
A trust point is usually a CA that publishes self certified certificates, is the starting point from which the verifier verifies the certificate chain.
Naming constraints may apply from the trust point, in which case they apply throughout the set of certificates that make up the certificate path down to the signer's user certificate.
Policy constraints can be easier to process but to be effective require the presence of a certificate policy identifier in the certificates used in a certification path.
Certificate path processing, thus generally starts with one of the trust point from the signature policy and ends with the user certificate.
The signature validation policy identifies constraints on these parameters.
The signature policy should defines rules specifying requirements for the use of certificate revocation lists (CRLs) and/or on line certificate status check service to check the validity of a certificate.
These rules specify the mandated minimum checks that must be carried out.
It is expected that in many cases either check may be selected with CRLs checks being carried out for certificate status that are unavailable from OCSP servers.
The verifier may take into account information in the certificate in deciding how best to check the revocation status (e.g., a certificate extension field about authority information access or a CRL distribution point) provided that it does not conflict with the signature policy revocation rules.
B.7  Rules for the Use of Roles Roles can be supported as claimed roles or as certified roles using Attribute Certificates.
When signature under a role is mandated by the signature policy, then either Attribute Certificates may be used or the signer may provide a claimed role attribute.
The acceptable attribute types or values may be dependent on the type of commitment.
For example, a user may have several roles that allow the user to sign data that imply commitments based on one or more of his roles.
B.7.2  Trust Points for Certified Attributes
When a signature under a certified role is mandated by the signature policy, Attribute Authorities are used and need to be validated as part of the overall validation of the electronic signature.
The trust points for Attribute Authorities do not need to be the same as the trust points to evaluate a certificate from the CA of the signer.
Thus the trust point for verifying roles need not be the same as trust point used to validate the certificate path of the user's key.
Naming and certification policy constraints may apply to the AA in similar circumstance to when they apply to CA.
Constraints on the AA and CA need not be exactly the same.
AA(s) may be used when a signer is creating a signature on behalf of an organization, they can be particularly useful when the signature represents an organizational role.
may or may not be the same authority as CA(s).
Thus, the Signature Policy identifies trust points that can be used for Attribute Authorities, either by reference to the same trust points as used for Certification Authorities, or by an independent list.
Certification Path for Certified Attributes Attribute Authorities may be organized in a tree structure in similar way to CA where the AAs are the leafs of such a tree.
Naming and other constraints may be required on attribute certificate paths in a similar manner to other electronic signature certificate paths.
B.8  Rules for the Use of Time Stamping and Timing
The following rules should be used when specifying, constraints on the certificate paths for time stamping authorities, constraints on the time stamping authority names and general timing constraints.
B.8.1  Trust Points and Certificate Paths Signature keys from time stamping authorities will need to be supported by a certification path.
The certification path used for time stamping authorities requires a trustpoint and possibly path constraints in the same way that the certificate path for the signer's key.
Time Stamping Authority Names Restrictions may need to be placed by the validation policy on the named entities that may act a time stamping authorities.
Before an electronic signature may really be valid, the verifier has to be sure that the holder of the private key was really the only one in possession of key at the time of signing.
However, there is an inevitable delay between a compromise or loss of key being noted, and a report of revocation being distributed.
To allow greater confidence in the validity of a signature, a "cautionary period" may be identified before a signature may be said to be valid with high confidence.
A verifier may revalidate a signature after this cautionary signature, or wait for this period before validating a signature.
The validation policy may specify such a cautionary period.
Timing Constraints Time Stamp Delay
There will be some delay between the time that a signature is created and the time the signer's digital signature is time stamped.
However, the longer this elapsed period the greater the risk of the signature being invalidated due to compromise or deliberate revocation of its private signing key by the signer.
Thus the signature policy should specify a maximum acceptable delay between the signing time as claimed by the signer and the time included within the time stamp.
B.9  Rules for Verification Data to be followed By specifying the requirements on the signer and verifier the responsibilities of the two parties can be clearly defined to establish all the necessary information.
B.10  Rules for Algorithm Constraints and Key Lengths
B.11  Other Signature Policy Rules
The signature policy may specify additional policy rules, for example rules that relate to the environment used by the signer.
These additional rules may be defined in computer processable and/or human readable form.
When signer or verifier obtains a copy of the Signature Policy from an issuer, the source should be authenticated (for example by using electronic signatures).
When the signer references a signature policy the Object Identifier (OID) of the policy, the hash value and the hash algorithm OID of that policy must be included in the Electronic Signature.
It is a mandatory requirement of this present document that the signature policy value computes to one, and only one hash value using the specified hash algorithm.
This means that there must be a single binary value of the encoded form of the signature policy for the unique hash value to be calculated.
For example, there may exist a particular file type, length and format on which the hash value is calculated which is fixed and definitive for a particular signature policy.
The hash value may be obtained by: the signer performing his own computation of the hash over the signature policy using his preferred hash algorithm permitted by the signature policy, and the definitive binary encoded form.
the signer, having verified the source of the policy, may use both the hash algorithm and the hash value included in the computer processable form of the policy (see section 6.1).
