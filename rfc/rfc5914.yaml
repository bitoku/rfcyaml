- title: __initial_text__
  contents:
  - '                          Trust Anchor Format

    '
- title: Abstract
  contents:
  - "Abstract\n   This document describes a structure for representing trust anchor\n\
    \   information.  A trust anchor is an authoritative entity represented\n   by\
    \ a public key and associated data.  The public key is used to\n   verify digital\
    \ signatures, and the associated data is used to\n   constrain the types of information\
    \ or actions for which the trust\n   anchor is authoritative.  The structures\
    \ defined in this document are\n   intended to satisfy the format-related requirements\
    \ defined in Trust\n   Anchor Management Requirements.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This\
    \ document is a product of the Internet Engineering Task Force\n   (IETF).  It\
    \ represents the consensus of the IETF community.  It has\n   received public\
    \ review and has been approved for publication by the\n   Internet Engineering\
    \ Steering Group (IESG).  Further information on\n   Internet Standards is available\
    \ in Section 2 of RFC 5741.\n   Information about the current status of this document,\
    \ any errata,\n   and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc5914.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2010 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n   This document\
    \ may contain material from IETF Documents or IETF\n   Contributions published\
    \ or made publicly available before November\n   10, 2008.  The person(s) controlling\
    \ the copyright in some of this\n   material may not have granted the IETF Trust\
    \ the right to allow\n   modifications of such material outside the IETF Standards\
    \ Process.\n   Without obtaining an adequate license from the person(s) controlling\n\
    \   the copyright in such materials, this document may not be modified\n   outside\
    \ the IETF Standards Process, and derivative works of it may\n   not be created\
    \ outside the IETF Standards Process, except to format\n   it for publication\
    \ as an RFC or to translate it into languages other\n   than English.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction . . . . . . . . . . . . . . . . . . .\
    \ . . . . . .  3\n     1.1.  Terminology  . . . . . . . . . . . . . . . . . .\
    \ . . . . .  3\n   2.  Trust Anchor Information Syntax  . . . . . . . . . . .\
    \ . . . .  3\n     2.1.  Version  . . . . . . . . . . . . . . . . . . . . . .\
    \ . . .  3\n     2.2.  Public Key . . . . . . . . . . . . . . . . . . . . . .\
    \ . .  3\n     2.3.  Key Identifier . . . . . . . . . . . . . . . . . . . . .\
    \ .  4\n     2.4.  Trust Anchor Title . . . . . . . . . . . . . . . . . . . .\
    \  4\n     2.5.  Certification Path Controls  . . . . . . . . . . . . . . .  4\n\
    \     2.6.  Extensions . . . . . . . . . . . . . . . . . . . . . . . .  8\n  \
    \ 3.  Trust Anchor List  . . . . . . . . . . . . . . . . . . . . . .  8\n   4.\
    \  Security Considerations  . . . . . . . . . . . . . . . . . . .  9\n   5.  References\
    \ . . . . . . . . . . . . . . . . . . . . . . . . . .  9\n     5.1.  Normative\
    \ References . . . . . . . . . . . . . . . . . . .  9\n     5.2.  Informative\
    \ References . . . . . . . . . . . . . . . . . . 10\n   Appendix A.  ASN.1 Modules\
    \ . . . . . . . . . . . . . . . . . . . . 11\n     A.1.  ASN.1 Module Using 2002\
    \ Syntax . . . . . . . . . . . . . . 11\n     A.2.  ASN.1 Module Using 1988 Syntax\
    \ . . . . . . . . . . . . . . 12\n       A.2.1.  ASN.1 Module . . . . . . . .\
    \ . . . . . . . . . . . . . 12\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   Trust anchors are widely used to verify digital signatures\
    \ and\n   validate certification paths [RFC5280][X.509].  They are required\n\
    \   when validating certification paths.  Though widely used, there is no\n  \
    \ standard format for representing trust anchor information.  This\n   document\
    \ describes the TrustAnchorInfo structure.  This structure is\n   intended to\
    \ satisfy the format-related requirements expressed in\n   Trust Anchor Management\
    \ Requirements [TA-MGMT-REQS] and is expressed\n   using ASN.1 [X.680].  It can\
    \ provide a more compact alternative to\n   X.509 certificates for exchanging\
    \ trust anchor information and\n   provides a means of associating additional\
    \ or alternative constraints\n   with certificates without breaking the signature\
    \ on the certificate.\n"
- title: 1.1.  Terminology
  contents:
  - "1.1.  Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"\
    SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\"\
    , and \"OPTIONAL\" in this\n   document are to be interpreted as described in\
    \ RFC 2119 [RFC2119].\n"
- title: 2.  Trust Anchor Information Syntax
  contents:
  - "2.  Trust Anchor Information Syntax\n   This section describes the TrustAnchorInfo\
    \ structure.\n   TrustAnchorInfo ::= SEQUENCE {\n      version   TrustAnchorInfoVersion\
    \ DEFAULT v1,\n      pubKey    SubjectPublicKeyInfo,\n      keyId     KeyIdentifier,\n\
    \      taTitle   TrustAnchorTitle OPTIONAL,\n      certPath  CertPathControls\
    \ OPTIONAL,\n      exts      [1] EXPLICIT Extensions   OPTIONAL,\n      taTitleLangTag\
    \   [2] UTF8String OPTIONAL }\n   TrustAnchorInfoVersion ::= INTEGER { v1(1) }\n"
- title: 2.1.  Version
  contents:
  - "2.1.  Version\n   version identifies the version of TrustAnchorInfo.  Future\
    \ updates to\n   this document may include changes to the TrustAnchorInfo structure,\n\
    \   in which case the version number should be incremented.  However, the\n  \
    \ default value, v1, cannot be changed.\n"
- title: 2.2.  Public Key
  contents:
  - "2.2.  Public Key\n   pubKey identifies the public key and algorithm associated\
    \ with the\n   trust anchor using the SubjectPublicKeyInfo structure [RFC5280].\
    \  The\n   SubjectPublicKeyInfo structure contains the algorithm identifier\n\
    \   followed by the public key itself.  The algorithm field is an\n   AlgorithmIdentifier,\
    \ which contains an object identifier and OPTIONAL\n   parameters.  The object\
    \ identifier names the public key algorithm and\n   indicates the syntax of the\
    \ parameters, if present, as well as the\n   format of the public key.  The public\
    \ key is encoded as a BIT STRING.\n"
- title: 2.3.  Key Identifier
  contents:
  - "2.3.  Key Identifier\n   keyId contains the public key identifier of the trust\
    \ anchor public\n   key.  See Section 4.2.1.2 of [RFC5280] for a description of\
    \ common\n   key identifier calculation methods.\n"
- title: 2.4.  Trust Anchor Title
  contents:
  - "2.4.  Trust Anchor Title\n    TrustAnchorTitle ::= UTF8String (SIZE (1..64))\n\
    \   taTitle is OPTIONAL.  When it is present, it provides a human-\n   readable\
    \ name for the trust anchor.  The text is encoded in UTF-8\n   [RFC3629], which\
    \ accommodates most of the world's writing systems.\n   The taTitleLangTag field\
    \ identifies the language used to express the\n   taTitle.  When taTitleLangTag\
    \ is absent, English (\"en\" language tag)\n   is used.  The value of the taTitleLangTag\
    \ should be a language tag as\n   described in [RFC5646].\n"
- title: 2.5.  Certification Path Controls
  contents:
  - "2.5.  Certification Path Controls\n    CertPathControls ::= SEQUENCE {\n    \
    \  taName           Name,\n      certificate      [0] Certificate OPTIONAL,\n\
    \      policySet        [1] CertificatePolicies OPTIONAL,\n      policyFlags \
    \     [2] CertPolicyFlags OPTIONAL,\n      nameConstr       [3] NameConstraints\
    \ OPTIONAL,\n      pathLenConstraint[4] INTEGER (0..MAX) OPTIONAL}\n   certPath\
    \ is OPTIONAL.  When it is present, it provides the controls\n   needed to initialize\
    \ an X.509 certification path validation algorithm\n   implementation (see Section\
    \ 6 of [RFC5280]).  When absent, the trust\n   anchor cannot be used to validate\
    \ the signature on an X.509\n   certificate.\n   taName provides the X.500 distinguished\
    \ name associated with the\n   trust anchor, and this distinguished name is used\
    \ to construct and\n   validate an X.509 certification path.  The name MUST NOT\
    \ be an empty\n   sequence.\n   certificate provides an OPTIONAL X.509 certificate,\
    \ which can be used\n   in some environments to represent the trust anchor in\
    \ certification\n   path development and validation.  If the certificate is present,\
    \ the\n   subject name in the certificate MUST exactly match the X.500\n   distinguished\
    \ name provided in the taName field, the public key MUST\n   exactly match the\
    \ public key in the pubKey field, and the\n   subjectKeyIdentifier extension,\
    \ if present, MUST exactly match the\n   key identifier in the keyId field.  The\
    \ complete description of the\n   syntax and semantics of the Certificate are\
    \ provided in [RFC5280].\n   Constraints defined in the policySet, policyFlags,\
    \ nameConstr,\n   pathLenConstraint, and exts fields within TrustAnchorInfo replace\n\
    \   values contained in a certificate or provide values for extensions\n   not\
    \ present in the certificate.  Values defined in these\n   TrustAnchorInfo fields\
    \ are always enforced.  Extensions included in a\n   certificate are enforced\
    \ only if there is no corresponding value in\n   the TrustAnchorInfo.  Correspondence\
    \ between extensions within\n   certificate and TrustAnchorInfo fields is defined\
    \ as follows:\n   o  an id-ce-certificatePolicies certificate extension corresponds\
    \ to\n      the CertPathControls.policySet field.\n   o  an id-ce-policyConstraints\
    \ certificate extension corresponds to\n      the CertPolicyFlags.inhibitPolicyMapping\
    \ and\n      CertPolicyFlags.requireExplicitPolicy fields.\n   o  an id-ce-inhibitAnyPolicy\
    \ certificate extension corresponds to the\n      CertPolicyFlags.inhibitAnyPolicy\
    \ field.\n   o  an id-ce-nameConstraints certificate extension corresponds to\
    \ the\n      CertPathControls.nameConstr field.\n   o  the pathLenConstraint field\
    \ of an id-ce-basicConstraints\n      certificate extension corresponds to the\n\
    \      CertPathControls.pathLenConstraint field (the presence of a\n      CertPathControls\
    \ structure corresponds to a TRUE value in the cA\n      field of a BasicConstraints\
    \ extension).\n   o  any other certificate extension corresponds to the same type\
    \ of\n      extension in the TrustAnchorInfo.exts field.\n    CertificatePolicies\
    \ ::= SEQUENCE SIZE (1..MAX) OF PolicyInformation\n    PolicyInformation ::= SEQUENCE\
    \ {\n      policyIdentifier  CertPolicyId,\n      policyQualifiers  SEQUENCE SIZE\
    \ (1..MAX) OF\n                              PolicyQualifierInfo OPTIONAL }\n\
    \    CertPolicyId ::= OBJECT IDENTIFIER\n   policySet is OPTIONAL.  When present,\
    \ it contains a sequence of\n   certificate policy identifiers to be provided\
    \ as inputs to the\n   certification path validation algorithm.  When absent,\
    \ the special\n   value any-policy is provided as the input to the certification\
    \ path\n   validation algorithm.  The complete description of the syntax and\n\
    \   semantics of the CertificatePolicies are provided in [RFC5280],\n   including\
    \ the syntax for PolicyInformation.  In this context, the\n   OPTIONAL policyQualifiers\
    \ structure MUST NOT be included.\n    CertPolicyFlags ::= BIT STRING {\n    \
    \  inhibitPolicyMapping   (0),\n      requireExplicitPolicy  (1),\n      inhibitAnyPolicy\
    \       (2) }\n   policyFlags is OPTIONAL.  When present, three Boolean values\
    \ for\n   input to the certification path validation algorithm are provided in\n\
    \   a BIT STRING.  When absent, the input to the certification path\n   validation\
    \ algorithm is { FALSE, FALSE, FALSE }, which represents the\n   most liberal\
    \ setting for these flags.  The three bits are used as\n   follows:\n      inhibitPolicyMapping\
    \ indicates if policy mapping is allowed in the\n      certification path.  When\
    \ set to TRUE, policy mapping is not\n      permitted.  This value represents\
    \ the initial-policy-mapping-\n      inhibit input value to the certification\
    \ path validation algorithm\n      described in Section 6.1.1 of [RFC5280].\n\
    \      requireExplicitPolicy indicates if the certification path MUST be\n   \
    \   valid for at least one of the certificate policies in the\n      policySet.\
    \  When set to TRUE, all certificates in the\n      certification path MUST contain\
    \ an acceptable policy identifier in\n      the certificate policies extension.\
    \  This value represents the\n      initial-explicit-policy input value to the\
    \ certification path\n      validation algorithm described in Section 6.1.1 of\
    \ [RFC5280].  An\n      acceptable policy identifier is a member of the policySet\
    \ or the\n      identifier of a policy that is declared to be equivalent through\n\
    \      policy mapping.  This bit MUST be set to FALSE if policySet is\n      absent.\n\
    \      inhibitAnyPolicy indicates whether the special anyPolicy policy\n     \
    \ identifier, with the value { 2 5 29 32 0 }, is considered an\n      explicit\
    \ match for other certificate policies.  This value\n      represents the initial-any-policy-inhibit\
    \ input value to the\n      certification path validation algorithm described\
    \ in Section 6.1.1\n      of [RFC5280].\n    NameConstraints ::= SEQUENCE {\n\
    \      permittedSubtrees  [0] GeneralSubtrees OPTIONAL,\n      excludedSubtrees\
    \   [1] GeneralSubtrees OPTIONAL }\n    GeneralSubtrees ::= SEQUENCE SIZE (1..MAX)\
    \ OF GeneralSubtree\n    GeneralSubtree ::= SEQUENCE {\n      base     GeneralName,\n\
    \      minimum  [0] BaseDistance DEFAULT 0,\n      maximum  [1] BaseDistance OPTIONAL\
    \ }\n    BaseDistance ::= INTEGER (0..MAX)\n   nameConstr is OPTIONAL.  It has\
    \ the same syntax and semantics as the\n   Name Constraints certificate extension\
    \ [RFC5280], which includes a\n   list of permitted names and a list of excluded\
    \ names.  The definition\n   of GeneralName can be found in [RFC5280].  When it\
    \ is present,\n   constraints are provided on names (including alternative names)\
    \ that\n   might appear in subsequent X.509 certificates in a certification\n\
    \   path.  This field is used to set the initial-permitted-subtrees and\n   initial-excluded-subtrees\
    \ input values to the certification path\n   validation algorithm described in\
    \ Section 6.1.1 of [RFC5280].  When\n   this field is absent, the initial-permitted-subtrees\
    \ variable is\n   unbounded and the initial-excluded-subtrees variable is empty.\n\
    \   The pathLenConstraint field gives the maximum number of non-self-\n   issued\
    \ intermediate certificates that may follow this certificate in\n   a valid certification\
    \ path.  (Note: The last certificate in the\n   certification path is not an intermediate\
    \ certificate and is not\n   included in this limit.  Usually, the last certificate\
    \ is an end\n   entity certificate, but it can be a CA certificate.)  A\n   pathLenConstraint\
    \ of zero indicates that no non-self-issued\n   intermediate certification authority\
    \ (CA) certificates may follow in\n   a valid certification path.  Where it appears,\
    \ the pathLenConstraint\n   field MUST be greater than or equal to zero.  Where\
    \ pathLenConstraint\n   does not appear, no limit is imposed.\n   When the trust\
    \ anchor is used to validate a certification path,\n   CertPathControls provides\
    \ limitations on certification paths that\n   will successfully validate.  An\
    \ application that is validating a\n   certification path SHOULD NOT ignore these\
    \ limitations, but the\n   application can impose additional limitations to ensure\
    \ that the\n   validated certification path is appropriate for the intended\n\
    \   application context.  As input to the certification path validation\n   algorithm,\
    \ an application MAY:\n   o  Provide a subset of the certification policies provided\
    \ in the\n      policySet;\n   o  Provide a TRUE value, if appropriate, for any\
    \ of the flags in the\n      policyFlags;\n   o  Provide a subset of the permitted\
    \ names provided in the\n      nameConstr;\n   o  Provide additional excluded\
    \ names to the ones that are provided in\n      the nameConstr;\n   o  Provide\
    \ a smaller value for pathLenConstraint.\n"
- title: 2.6.  Extensions
  contents:
  - "2.6.  Extensions\n   exts is OPTIONAL.  When it is present, it can be used to\
    \ associate\n   additional information with the trust anchor using the standard\n\
    \   Extensions structure.  Extensions that are anticipated to be widely\n   used\
    \ have been included in the CertPathControls structure to avoid\n   overhead associated\
    \ with use of the Extensions structure.  To avoid\n   duplication with the CertPathControls\
    \ field, the following types of\n   extensions MUST NOT appear in the exts field\
    \ and are ignored if they\n   do appear: id-ce-certificatePolicies, id-ce-policyConstraints,\
    \ id-ce-\n   inhibitAnyPolicy, or id-ce-nameConstraints.\n"
- title: 3.  Trust Anchor List
  contents:
  - "3.  Trust Anchor List\n   TrustAnchorInfo allows for the representation of a\
    \ single trust\n   anchor.  In many cases, it is convenient to represent a collection\
    \ of\n   trust anchors.  The TrustAnchorList structure is defined for this\n \
    \  purpose.  TrustAnchorList is defined as a sequence of one or more\n   TrustAnchorChoice\
    \ objects.  TrustAnchorChoice provides three options\n   for representing a trust\
    \ anchor.  The certificate option allows for\n   the use of a certificate with\
    \ no additional associated constraints.\n   The tbsCert option allows for associating\
    \ constraints by removing a\n   signature on a certificate and changing the extensions\
    \ field.  The\n   taInfo option allows for use of the TrustAnchorInfo structure\
    \ defined\n   in this document.\n   TrustAnchorList ::= SEQUENCE SIZE (1..MAX)\
    \ OF TrustAnchorChoice\n   TrustAnchorChoice ::= CHOICE {\n      certificate \
    \ Certificate,\n      tbsCert      [1] EXPLICIT TBSCertificate,\n      taInfo\
    \       [2] EXPLICIT TrustAnchorInfo }\n    trust-anchor-list PKCS7-CONTENT-TYPE\
    \ ::=\n       { TrustAnchorList IDENTIFIED BY id-ct-trustAnchorList }\n   The\
    \ TrustAnchorList structure can be protected using the SignedData\n   structure\
    \ defined in the Cryptographic Message Syntax (CMS)\n   [RFC5652].  The id-ct-trustAnchorList\
    \ object identifier has been\n   defined to represent TrustAnchorList payloads\
    \ with CMS structures.\n"
- title: 4.  Security Considerations
  contents:
  - "4.  Security Considerations\n   Compromise of a trust anchor private key permits\
    \ unauthorized parties\n   to masquerade as the trust anchor, with potentially\
    \ severe\n   consequences.  Where TA-based constraints are enforced, the\n   unauthorized\
    \ holder of the trust anchor private key will be limited\n   by the certification\
    \ path controls associated with the trust anchor,\n   as expressed in the certPath\
    \ and exts fields.  For example, name\n   constraints in the trust anchor will\
    \ determine the name space that\n   will be accepted in certificates that are\
    \ validated using the\n   compromised trust anchor.  Reliance on an inappropriate\
    \ or incorrect\n   trust anchor public key has similar potentially severe consequences.\n\
    \   The compromise of a CA's private key leads to the same type of\n   problems\
    \ as the compromise of a trust anchor private key.  The\n   unauthorized holder\
    \ of the CA private key will be limited by the\n   certification path controls\
    \ associated with the trust anchor, as\n   expressed in the certPath field or\
    \ as an extension.\n   Usage of a certificate independent of the TrustAnchorInfo\
    \ structure\n   that envelopes it must be carefully managed to avoid violating\n\
    \   constraints expressed in the TrustAnchorInfo.  When enveloping a\n   certificate\
    \ in a TrustAnchorInfo structure, values included in the\n   certificate should\
    \ be evaluated to ensure there is no confusion or\n   conflict with values in\
    \ the TrustAnchorInfo structure.\n"
- title: 5.  References
  contents:
  - '5.  References

    '
- title: 5.1.  Normative References
  contents:
  - "5.1.  Normative References\n   [RFC2119]       Bradner, S., \"Key words for use\
    \ in RFCs to Indicate\n                   Requirement Levels\", BCP 14, RFC 2119,\
    \ March 1997.\n   [RFC3629]       Yergeau, F., \"UTF-8, a transformation format\
    \ of ISO\n                   10646\", STD 63, RFC 3629, November 2003.\n   [RFC5652]\
    \       Housley, R., \"Cryptographic Message Syntax (CMS)\",\n               \
    \    RFC 5652, September 2009.\n   [RFC5280]       Cooper, D., Santesson, S.,\
    \ Farrell, S., Boeyen, S.,\n                   Housley, R., and W. Polk, \"Internet\
    \ X.509 Public Key\n                   Infrastructure Certificate and Certificate\
    \ Revocation\n                   List (CRL) Profile\", RFC 5280, May 2008.\n \
    \  [RFC5646]       Phillips, A. and M. Davis, \"Tags for Identifying\n       \
    \            Languages\", BCP 47, RFC 5646, September 2009.\n   [RFC5912]    \
    \   Hoffman, P. and J. Schaad, \"New ASN.1 Modules for the\n                 \
    \  Public Key Infrastructure Using X.509 (PKIX)\",\n                   RFC 5912,\
    \ June 2010.\n   [X.680]         \"ITU-T Recommendation X.680: Information Technology\
    \ -\n                   Abstract Syntax Notation One\", 2002.\n"
- title: 5.2.  Informative References
  contents:
  - "5.2.  Informative References\n   [TA-MGMT-REQS]  Reddy, R. and C. Wallace, \"\
    Trust Anchor Management\n                   Requirements\", Work in Progress,\
    \ March 2010.\n   [X.509]         \"ITU-T Recommendation X.509 - The Directory\
    \ -\n                   Authentication Framework\", 2000.\n"
- title: Appendix A.  ASN.1 Modules
  contents:
  - 'Appendix A.  ASN.1 Modules

    '
- title: A.1.  ASN.1 Module Using 2002 Syntax
  contents:
  - "A.1.  ASN.1 Module Using 2002 Syntax\n   Appendix A.1 provides the normative\
    \ ASN.1 definitions for the\n   structures described in this specification using\
    \ ASN.1 as defined in\n   [X.680].  It includes definitions imported from [RFC5280]\
    \ and\n   [RFC5912].\n   TrustAnchorInfoModule\n   { joint-iso-ccitt(2) country(16)\
    \ us(840) organization(1)\n      gov(101) dod(2) infosec(1) modules(0) 33 }\n\
    \   DEFINITIONS IMPLICIT TAGS ::=\n   BEGIN\n   IMPORTS\n   Certificate, Name,\
    \ SubjectPublicKeyInfo, TBSCertificate\n   FROM PKIX1Explicit-2009 -- from [RFC5912]\n\
    \       {iso(1) identified-organization(3) dod(6) internet(1) security(5)\n  \
    \     mechanisms(5) pkix(7) id-mod(0) id-mod-pkix1-explicit-02(51)}\n   CertificatePolicies,\
    \ KeyIdentifier, NameConstraints\n   FROM PKIX1Implicit-2009 -- from [RFC5912]\n\
    \       {iso(1) identified-organization(3) dod(6) internet(1) security(5)\n  \
    \     mechanisms(5) pkix(7) id-mod(0) id-mod-pkix1-implicit-02(59)}\n   Extensions{}\n\
    \   FROM PKIX-CommonTypes-2009 -- from [RFC5912]\n       { iso(1) identified-organization(3)\
    \ dod(6) internet(1)\n       security(5) mechanisms(5) pkix(7) id-mod(0)\n   \
    \    id-mod-pkixCommon-02(57) }         ;\n   TrustAnchorInfo ::= SEQUENCE {\n\
    \      version   TrustAnchorInfoVersion DEFAULT v1,\n      pubKey    SubjectPublicKeyInfo,\n\
    \      keyId     KeyIdentifier,\n      taTitle   TrustAnchorTitle OPTIONAL,\n\
    \      certPath  CertPathControls OPTIONAL,\n      exts      [1] EXPLICIT Extensions\
    \ {{...}}   OPTIONAL,\n      taTitleLangTag   [2] UTF8String OPTIONAL }\n   TrustAnchorInfoVersion\
    \ ::= INTEGER { v1(1) }\n   TrustAnchorTitle ::= UTF8String (SIZE (1..64))\n \
    \  CertPathControls ::= SEQUENCE {\n     taName           Name,\n     certificate\
    \      [0] Certificate OPTIONAL,\n     policySet        [1] CertificatePolicies\
    \ OPTIONAL,\n     policyFlags      [2] CertPolicyFlags OPTIONAL,\n     nameConstr\
    \       [3] NameConstraints OPTIONAL,\n     pathLenConstraint[4] INTEGER (0..MAX)\
    \ OPTIONAL}\n   CertPolicyFlags ::= BIT STRING {\n     inhibitPolicyMapping  \
    \  (0),\n     requireExplicitPolicy   (1),\n     inhibitAnyPolicy        (2) }\n\
    \   TrustAnchorList ::= SEQUENCE SIZE (1..MAX) OF TrustAnchorChoice\n   TrustAnchorChoice\
    \ ::= CHOICE {\n     certificate  Certificate,\n     tbsCert      [1] EXPLICIT\
    \ TBSCertificate,\n     taInfo       [2] EXPLICIT TrustAnchorInfo }\n   id-ct-trustAnchorList\
    \      OBJECT IDENTIFIER ::= { iso(1)\n       member-body(2) us(840) rsadsi(113549)\
    \ pkcs(1) pkcs9(9)\n       id-smime(16) id-ct(1) 34 }\n   PKCS7-CONTENT-TYPE ::=\
    \ TYPE-IDENTIFIER\n   trust-anchor-list PKCS7-CONTENT-TYPE ::=\n       { TrustAnchorList\
    \ IDENTIFIED BY id-ct-trustAnchorList }\n   END\n"
- title: A.2.  ASN.1 Module Using 1988 Syntax
  contents:
  - "A.2.  ASN.1 Module Using 1988 Syntax\n   Appendix A.2 provides the normative\
    \ ASN.1 definitions for the\n   structures described in this specification using\
    \ ASN.1 as defined in\n   [X.680].\n"
- title: A.2.1.  ASN.1 Module
  contents:
  - "A.2.1.  ASN.1 Module\n   TrustAnchorInfoModule-88\n       { joint-iso-ccitt(2)\
    \ country(16) us(840) organization(1)\n         gov(101) dod(2) infosec(1) modules(0)\
    \ 37 }\n   DEFINITIONS IMPLICIT TAGS ::=\n   BEGIN\n   IMPORTS\n   Certificate,\
    \ Name, Extensions,\n   SubjectPublicKeyInfo, TBSCertificate\n      FROM PKIX1Explicit88\
    \ -- from [RFC5280]\n           { iso(1) identified-organization(3) dod(6) internet(1)\n\
    \             security(5) mechanisms(5) pkix(7) id-mod(0)\n             id-pkix1-explicit(18)\
    \ }\n   CertificatePolicies, KeyIdentifier, NameConstraints\n      FROM PKIX1Implicit88\
    \ -- [RFC5280]\n           { iso(1) identified-organization(3) dod(6) internet(1)\n\
    \             security(5) mechanisms(5) pkix(7) id-mod(0)\n             id-pkix1-implicit(19)\
    \ }\n    ;\n   TrustAnchorInfo ::= SEQUENCE {\n      version   TrustAnchorInfoVersion\
    \ DEFAULT v1,\n      pubKey    SubjectPublicKeyInfo,\n      keyId     KeyIdentifier,\n\
    \      taTitle   TrustAnchorTitle OPTIONAL,\n      certPath  CertPathControls\
    \ OPTIONAL,\n      exts      [1] EXPLICIT Extensions   OPTIONAL,\n      taTitleLangTag\
    \   [2] UTF8String OPTIONAL }\n   TrustAnchorInfoVersion ::= INTEGER { v1(1) }\n\
    \   TrustAnchorTitle ::= UTF8String (SIZE (1..64))\n   CertPathControls ::= SEQUENCE\
    \ {\n     taName           Name,\n     certificate      [0] Certificate OPTIONAL,\n\
    \     policySet        [1] CertificatePolicies OPTIONAL,\n     policyFlags   \
    \   [2] CertPolicyFlags OPTIONAL,\n     nameConstr       [3] NameConstraints OPTIONAL,\n\
    \     pathLenConstraint[4] INTEGER (0..MAX) OPTIONAL}\n   CertPolicyFlags ::=\
    \ BIT STRING {\n     inhibitPolicyMapping    (0),\n     requireExplicitPolicy\
    \   (1),\n     inhibitAnyPolicy        (2) }\n   TrustAnchorList ::= SEQUENCE\
    \ SIZE (1..MAX) OF TrustAnchorChoice\n   TrustAnchorChoice ::= CHOICE {\n    \
    \ certificate  Certificate,\n     tbsCert      [1] EXPLICIT TBSCertificate,\n\
    \     taInfo       [2] EXPLICIT TrustAnchorInfo }\n   id-ct-trustAnchorList  \
    \    OBJECT IDENTIFIER ::= { iso(1)\n       member-body(2) us(840) rsadsi(113549)\
    \ pkcs(1) pkcs9(9)\n       id-smime(16) id-ct(1) 34 }\n   END\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Russ Housley\n   Vigil Security, LLC\n   918 Spring Knoll\
    \ Drive\n   Herndon, VA  20170\n   EMail: housley@vigilsec.com\n   Sam Ashmore\n\
    \   National Security Agency\n   Suite 6751\n   9800 Savage Road\n   Fort Meade,\
    \ MD  20755\n   EMail: srashmo@radium.ncsc.mil\n   Carl Wallace\n   Cygnacom Solutions\n\
    \   Suite 5400\n   7925 Jones Branch Drive\n   McLean, VA  22102\n   EMail: cwallace@cygnacom.com\n"
