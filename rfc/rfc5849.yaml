- title: __initial_text__
  contents:
  - '                         The OAuth 1.0 Protocol

    '
- title: Abstract
  contents:
  - "Abstract\n   OAuth provides a method for clients to access server resources on\n\
    \   behalf of a resource owner (such as a different client or an end-\n   user).\
    \  It also provides a process for end-users to authorize third-\n   party access\
    \ to their server resources without sharing their\n   credentials (typically,\
    \ a username and password pair), using user-\n   agent redirections.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document is not an Internet Standards Track specification;\
    \ it is\n   published for informational purposes.\n   This document is a product\
    \ of the Internet Engineering Task Force\n   (IETF).  It represents the consensus\
    \ of the IETF community.  It has\n   received public review and has been approved\
    \ for publication by the\n   Internet Engineering Steering Group (IESG).  Not\
    \ all documents\n   approved by the IESG are a candidate for any level of Internet\n\
    \   Standard; see Section 2 of RFC 5741.\n   Information about the current status\
    \ of this document, any errata,\n   and how to provide feedback on it may be obtained\
    \ at\n   http://www.rfc-editor.org/info/rfc5849.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2010 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................3\n\
    \      1.1. Terminology ................................................4\n  \
    \    1.2. Example ....................................................5\n    \
    \  1.3. Notational Conventions .....................................7\n   2. Redirection-Based\
    \ Authorization .................................8\n      2.1. Temporary Credentials\
    \ ......................................9\n      2.2. Resource Owner Authorization\
    \ ..............................10\n      2.3. Token Credentials .........................................12\n\
    \   3. Authenticated Requests .........................................14\n  \
    \    3.1. Making Requests ...........................................14\n    \
    \  3.2. Verifying Requests ........................................16\n      3.3.\
    \ Nonce and Timestamp .......................................17\n      3.4. Signature\
    \ .................................................18\n           3.4.1. Signature\
    \ Base String ..............................18\n           3.4.2. HMAC-SHA1 ..........................................25\n\
    \           3.4.3. RSA-SHA1 ...........................................25\n  \
    \         3.4.4. PLAINTEXT ..........................................26\n    \
    \  3.5. Parameter Transmission ....................................26\n      \
    \     3.5.1. Authorization Header ...............................27\n        \
    \   3.5.2. Form-Encoded Body ..................................28\n          \
    \ 3.5.3. Request URI Query ..................................28\n      3.6. Percent\
    \ Encoding ..........................................29\n   4. Security Considerations\
    \ ........................................29\n      4.1. RSA-SHA1 Signature Method\
    \ .................................29\n      4.2. Confidentiality of Requests\
    \ ...............................30\n      4.3. Spoofing by Counterfeit Servers\
    \ ...........................30\n      4.4. Proxying and Caching of Authenticated\
    \ Content .............30\n      4.5. Plaintext Storage of Credentials ..........................30\n\
    \      4.6. Secrecy of the Client Credentials .........................31\n  \
    \    4.7. Phishing Attacks ..........................................31\n    \
    \  4.8. Scoping of Access Requests ................................31\n      4.9.\
    \ Entropy of Secrets ........................................32\n      4.10. Denial-of-Service\
    \ / Resource-Exhaustion Attacks ..........32\n      4.11. SHA-1 Cryptographic\
    \ Attacks ..............................33\n      4.12. Signature Base String\
    \ Limitations ........................33\n      4.13. Cross-Site Request Forgery\
    \ (CSRF) ........................33\n      4.14. User Interface Redress ...................................34\n\
    \      4.15. Automatic Processing of Repeat Authorizations ............34\n  \
    \ 5. Acknowledgments ................................................35\n   Appendix\
    \ A.  Differences from the Community Edition ...............36\n   6. References\
    \ .....................................................37\n      6.1. Normative\
    \ References ......................................37\n      6.2. Informative\
    \ References ....................................38\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   The OAuth protocol was originally created by a small community\
    \ of web\n   developers from a variety of websites and other Internet services\
    \ who\n   wanted to solve the common problem of enabling delegated access to\n\
    \   protected resources.  The resulting OAuth protocol was stabilized at\n   version\
    \ 1.0 in October 2007, and revised in June 2009 (Revision A) as\n   published\
    \ at <http://oauth.net/core/1.0a>.\n   This specification provides an informational\
    \ documentation of OAuth\n   Core 1.0 Revision A, addresses several errata reported\
    \ since that\n   time, and makes numerous editorial clarifications.  While this\n\
    \   specification is not an item of the IETF's OAuth Working Group, which\n  \
    \ at the time of writing is working on an OAuth version that can be\n   appropriate\
    \ for publication on the standards track, it has been\n   transferred to the IETF\
    \ for change control by authors of the original\n   work.\n   In the traditional\
    \ client-server authentication model, the client\n   uses its credentials to access\
    \ its resources hosted by the server.\n   With the increasing use of distributed\
    \ web services and cloud\n   computing, third-party applications require access\
    \ to these server-\n   hosted resources.\n   OAuth introduces a third role to\
    \ the traditional client-server\n   authentication model: the resource owner.\
    \  In the OAuth model, the\n   client (which is not the resource owner, but is\
    \ acting on its behalf)\n   requests access to resources controlled by the resource\
    \ owner, but\n   hosted by the server.  In addition, OAuth allows the server to\
    \ verify\n   not only the resource owner authorization, but also the identity\
    \ of\n   the client making the request.\n   OAuth provides a method for clients\
    \ to access server resources on\n   behalf of a resource owner (such as a different\
    \ client or an end-\n   user).  It also provides a process for end-users to authorize\
    \ third-\n   party access to their server resources without sharing their\n  \
    \ credentials (typically, a username and password pair), using user-\n   agent\
    \ redirections.\n   For example, a web user (resource owner) can grant a printing\
    \ service\n   (client) access to her private photos stored at a photo sharing\n\
    \   service (server), without sharing her username and password with the\n   printing\
    \ service.  Instead, she authenticates directly with the photo\n   sharing service\
    \ which issues the printing service delegation-specific\n   credentials.\n   In\
    \ order for the client to access resources, it first has to obtain\n   permission\
    \ from the resource owner.  This permission is expressed in\n   the form of a\
    \ token and matching shared-secret.  The purpose of the\n   token is to make it\
    \ unnecessary for the resource owner to share its\n   credentials with the client.\
    \  Unlike the resource owner credentials,\n   tokens can be issued with a restricted\
    \ scope and limited lifetime,\n   and revoked independently.\n   This specification\
    \ consists of two parts.  The first part defines a\n   redirection-based user-agent\
    \ process for end-users to authorize\n   client access to their resources, by\
    \ authenticating directly with the\n   server and provisioning tokens to the client\
    \ for use with the\n   authentication method.  The second part defines a method\
    \ for making\n   authenticated HTTP [RFC2616] requests using two sets of credentials,\n\
    \   one identifying the client making the request, and a second\n   identifying\
    \ the resource owner on whose behalf the request is being\n   made.\n   The use\
    \ of OAuth with any transport protocol other than [RFC2616] is\n   undefined.\n"
- title: 1.1.  Terminology
  contents:
  - "1.1.  Terminology\n   client\n         An HTTP client (per [RFC2616]) capable\
    \ of making OAuth-\n         authenticated requests (Section 3).\n   server\n\
    \         An HTTP server (per [RFC2616]) capable of accepting OAuth-\n       \
    \  authenticated requests (Section 3).\n   protected resource\n         An access-restricted\
    \ resource that can be obtained from the\n         server using an OAuth-authenticated\
    \ request (Section 3).\n   resource owner\n         An entity capable of accessing\
    \ and controlling protected\n         resources by using credentials to authenticate\
    \ with the server.\n   credentials\n         Credentials are a pair of a unique\
    \ identifier and a matching\n         shared secret.  OAuth defines three classes\
    \ of credentials:\n         client, temporary, and token, used to identify and\
    \ authenticate\n         the client making the request, the authorization request,\
    \ and\n         the access grant, respectively.\n   token\n         A unique identifier\
    \ issued by the server and used by the client\n         to associate authenticated\
    \ requests with the resource owner\n         whose authorization is requested\
    \ or has been obtained by the\n         client.  Tokens have a matching shared-secret\
    \ that is used by\n         the client to establish its ownership of the token,\
    \ and its\n         authority to represent the resource owner.\n   The original\
    \ community specification used a somewhat different\n   terminology that maps\
    \ to this specifications as follows (original\n   community terms provided on\
    \ left):\n   Consumer:  client\n   Service Provider:  server\n   User:  resource\
    \ owner\n   Consumer Key and Secret:  client credentials\n   Request Token and\
    \ Secret:  temporary credentials\n   Access Token and Secret:  token credentials\n"
- title: 1.2.  Example
  contents:
  - "1.2.  Example\n   Jane (resource owner) has recently uploaded some private vacation\n\
    \   photos (protected resources) to her photo sharing site\n   'photos.example.net'\
    \ (server).  She would like to use the\n   'printer.example.com' website (client)\
    \ to print one of these photos.\n   Typically, Jane signs into 'photos.example.net'\
    \ using her username\n   and password.\n   However, Jane does not wish to share\
    \ her username and password with\n   the 'printer.example.com' website, which\
    \ needs to access the photo in\n   order to print it.  In order to provide its\
    \ users with better\n   service, 'printer.example.com' has signed up for a set\
    \ of\n   'photos.example.net' client credentials ahead of time:\n   Client Identifier\n\
    \         dpf43f3p2l4k3l03\n   Client Shared-Secret:\n         kd94hf93k423kf44\n\
    \   The 'printer.example.com' website has also configured its application\n  \
    \ to use the protocol endpoints listed in the 'photos.example.net' API\n   documentation,\
    \ which use the \"HMAC-SHA1\" signature method:\n   Temporary Credential Request\n\
    \         https://photos.example.net/initiate\n   Resource Owner Authorization\
    \ URI:\n         https://photos.example.net/authorize\n   Token Request URI:\n\
    \         https://photos.example.net/token\n   Before 'printer.example.com' can\
    \ ask Jane to grant it access to the\n   photos, it must first establish a set\
    \ of temporary credentials with\n   'photos.example.net' to identify the delegation\
    \ request.  To do so,\n   the client sends the following HTTPS [RFC2818] request\
    \ to the server:\n     POST /initiate HTTP/1.1\n     Host: photos.example.net\n\
    \     Authorization: OAuth realm=\"Photos\",\n        oauth_consumer_key=\"dpf43f3p2l4k3l03\"\
    ,\n        oauth_signature_method=\"HMAC-SHA1\",\n        oauth_timestamp=\"137131200\"\
    ,\n        oauth_nonce=\"wIjqoS\",\n        oauth_callback=\"http%3A%2F%2Fprinter.example.com%2Fready\"\
    ,\n        oauth_signature=\"74KNZJeDHnMBp0EMJ9ZHt%2FXKycU%3D\"\n   The server\
    \ validates the request and replies with a set of temporary\n   credentials in\
    \ the body of the HTTP response (line breaks are for\n   display purposes only):\n\
    \     HTTP/1.1 200 OK\n     Content-Type: application/x-www-form-urlencoded\n\
    \     oauth_token=hh5s93j4hdidpola&oauth_token_secret=hdhd0244k9j7ao03&\n    \
    \ oauth_callback_confirmed=true\n   The client redirects Jane's user-agent to\
    \ the server's Resource Owner\n   Authorization endpoint to obtain Jane's approval\
    \ for accessing her\n   private photos:\n     https://photos.example.net/authorize?oauth_token=hh5s93j4hdidpola\n\
    \   The server requests Jane to sign in using her username and password\n   and\
    \ if successful, asks her to approve granting 'printer.example.com'\n   access\
    \ to her private photos.  Jane approves the request and her\n   user-agent is\
    \ redirected to the callback URI provided by the client\n   in the previous request\
    \ (line breaks are for display purposes only):\n     http://printer.example.com/ready?\n\
    \     oauth_token=hh5s93j4hdidpola&oauth_verifier=hfdp7dh39dks9884\n   The callback\
    \ request informs the client that Jane completed the\n   authorization process.\
    \  The client then requests a set of token\n   credentials using its temporary\
    \ credentials (over a secure Transport\n   Layer Security (TLS) channel):\n  \
    \   POST /token HTTP/1.1\n     Host: photos.example.net\n     Authorization: OAuth\
    \ realm=\"Photos\",\n        oauth_consumer_key=\"dpf43f3p2l4k3l03\",\n      \
    \  oauth_token=\"hh5s93j4hdidpola\",\n        oauth_signature_method=\"HMAC-SHA1\"\
    ,\n        oauth_timestamp=\"137131201\",\n        oauth_nonce=\"walatlh\",\n\
    \        oauth_verifier=\"hfdp7dh39dks9884\",\n        oauth_signature=\"gKgrFCywp7rO0OXSjdot%2FIHF7IU%3D\"\
    \n   The server validates the request and replies with a set of token\n   credentials\
    \ in the body of the HTTP response:\n     HTTP/1.1 200 OK\n     Content-Type:\
    \ application/x-www-form-urlencoded\n     oauth_token=nnch734d00sl2jdk&oauth_token_secret=pfkkdhi9sl3r4s00\n\
    \   With a set of token credentials, the client is now ready to request\n   the\
    \ private photo:\n     GET /photos?file=vacation.jpg&size=original HTTP/1.1\n\
    \     Host: photos.example.net\n     Authorization: OAuth realm=\"Photos\",\n\
    \        oauth_consumer_key=\"dpf43f3p2l4k3l03\",\n        oauth_token=\"nnch734d00sl2jdk\"\
    ,\n        oauth_signature_method=\"HMAC-SHA1\",\n        oauth_timestamp=\"137131202\"\
    ,\n        oauth_nonce=\"chapoH\",\n        oauth_signature=\"MdpQcU8iPSUjWoN%2FUDMsK2sui9I%3D\"\
    \n   The 'photos.example.net' server validates the request and responds\n   with\
    \ the requested photo. 'printer.example.com' is able to continue\n   accessing\
    \ Jane's private photos using the same set of token\n   credentials for the duration\
    \ of Jane's authorization, or until Jane\n   revokes access.\n"
- title: 1.3.  Notational Conventions
  contents:
  - "1.3.  Notational Conventions\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\"\
    , \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"\
    MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described\
    \ in [RFC2119].\n"
- title: 2.  Redirection-Based Authorization
  contents:
  - "2.  Redirection-Based Authorization\n   OAuth uses tokens to represent the authorization\
    \ granted to the\n   client by the resource owner.  Typically, token credentials\
    \ are\n   issued by the server at the resource owner's request, after\n   authenticating\
    \ the resource owner's identity (usually using a\n   username and password).\n\
    \   There are many ways in which a server can facilitate the provisioning\n  \
    \ of token credentials.  This section defines one such way, using HTTP\n   redirections\
    \ and the resource owner's user-agent.  This redirection-\n   based authorization\
    \ method includes three steps:\n   1.  The client obtains a set of temporary credentials\
    \ from the server\n       (in the form of an identifier and shared-secret).  The\
    \ temporary\n       credentials are used to identify the access request throughout\n\
    \       the authorization process.\n   2.  The resource owner authorizes the server\
    \ to grant the client's\n       access request (identified by the temporary credentials).\n\
    \   3.  The client uses the temporary credentials to request a set of\n      \
    \ token credentials from the server, which will enable it to access\n       the\
    \ resource owner's protected resources.\n   The server MUST revoke the temporary\
    \ credentials after being used\n   once to obtain the token credentials.  It is\
    \ RECOMMENDED that the\n   temporary credentials have a limited lifetime.  Servers\
    \ SHOULD enable\n   resource owners to revoke token credentials after they have\
    \ been\n   issued to clients.\n   In order for the client to perform these steps,\
    \ the server needs to\n   advertise the URIs of the following three endpoints:\n\
    \   Temporary Credential Request\n         The endpoint used by the client to\
    \ obtain a set of temporary\n         credentials as described in Section 2.1.\n\
    \   Resource Owner Authorization\n         The endpoint to which the resource\
    \ owner is redirected to grant\n         authorization as described in Section\
    \ 2.2.\n   Token Request\n         The endpoint used by the client to request\
    \ a set of token\n         credentials using the set of temporary credentials\
    \ as described\n         in Section 2.3.\n   The three URIs advertised by the\
    \ server MAY include a query component\n   as defined by [RFC3986], Section 3,\
    \ but if present, the query MUST\n   NOT contain any parameters beginning with\
    \ the \"oauth_\" prefix, to\n   avoid conflicts with the protocol parameters added\
    \ to the URIs when\n   used.\n   The methods in which the server advertises and\
    \ documents its three\n   endpoints are beyond the scope of this specification.\
    \  Clients should\n   avoid making assumptions about the size of tokens and other\
    \ server-\n   generated values, which are left undefined by this specification.\
    \  In\n   addition, protocol parameters MAY include values that require\n   encoding\
    \ when transmitted.  Clients and servers should not make\n   assumptions about\
    \ the possible range of their values.\n"
- title: 2.1.  Temporary Credentials
  contents:
  - "2.1.  Temporary Credentials\n   The client obtains a set of temporary credentials\
    \ from the server by\n   making an authenticated (Section 3) HTTP \"POST\" request\
    \ to the\n   Temporary Credential Request endpoint (unless the server advertises\n\
    \   another HTTP request method for the client to use).  The client\n   constructs\
    \ a request URI by adding the following REQUIRED parameter\n   to the request\
    \ (in addition to the other protocol parameters, using\n   the same parameter\
    \ transmission method):\n   oauth_callback:  An absolute URI back to which the\
    \ server will\n                    redirect the resource owner when the Resource\
    \ Owner\n                    Authorization step (Section 2.2) is completed.  If\n\
    \                    the client is unable to receive callbacks or a\n        \
    \            callback URI has been established via other means,\n            \
    \        the parameter value MUST be set to \"oob\" (case\n                  \
    \  sensitive), to indicate an out-of-band\n                    configuration.\n\
    \   Servers MAY specify additional parameters.\n   When making the request, the\
    \ client authenticates using only the\n   client credentials.  The client MAY\
    \ omit the empty \"oauth_token\"\n   protocol parameter from the request and MUST\
    \ use the empty string as\n   the token secret value.\n   Since the request results\
    \ in the transmission of plain text\n   credentials in the HTTP response, the\
    \ server MUST require the use of\n   a transport-layer mechanisms such as TLS\
    \ or Secure Socket Layer (SSL)\n   (or a secure channel with equivalent protections).\n\
    \   For example, the client makes the following HTTPS request:\n     POST /request_temp_credentials\
    \ HTTP/1.1\n     Host: server.example.com\n     Authorization: OAuth realm=\"\
    Example\",\n        oauth_consumer_key=\"jd83jd92dhsh93js\",\n        oauth_signature_method=\"\
    PLAINTEXT\",\n        oauth_callback=\"http%3A%2F%2Fclient.example.net%2Fcb%3Fx%3D1\"\
    ,\n        oauth_signature=\"ja893SD9%26\"\n   The server MUST verify (Section\
    \ 3.2) the request and if valid,\n   respond back to the client with a set of\
    \ temporary credentials (in\n   the form of an identifier and shared-secret).\
    \  The temporary\n   credentials are included in the HTTP response body using\
    \ the\n   \"application/x-www-form-urlencoded\" content type as defined by\n \
    \  [W3C.REC-html40-19980424] with a 200 status code (OK).\n   The response contains\
    \ the following REQUIRED parameters:\n   oauth_token\n         The temporary credentials\
    \ identifier.\n   oauth_token_secret\n         The temporary credentials shared-secret.\n\
    \   oauth_callback_confirmed\n         MUST be present and set to \"true\".  The\
    \ parameter is used to\n         differentiate from previous versions of the protocol.\n\
    \   Note that even though the parameter names include the term 'token',\n   these\
    \ credentials are not token credentials, but are used in the next\n   two steps\
    \ in a similar manner to token credentials.\n   For example (line breaks are for\
    \ display purposes only):\n     HTTP/1.1 200 OK\n     Content-Type: application/x-www-form-urlencoded\n\
    \     oauth_token=hdk48Djdsa&oauth_token_secret=xyz4992k83j47x0b&\n     oauth_callback_confirmed=true\n"
- title: 2.2.  Resource Owner Authorization
  contents:
  - "2.2.  Resource Owner Authorization\n   Before the client requests a set of token\
    \ credentials from the\n   server, it MUST send the user to the server to authorize\
    \ the request.\n   The client constructs a request URI by adding the following\
    \ REQUIRED\n   query parameter to the Resource Owner Authorization endpoint URI:\n\
    \   oauth_token\n         The temporary credentials identifier obtained in Section\
    \ 2.1 in\n         the \"oauth_token\" parameter.  Servers MAY declare this\n\
    \         parameter as OPTIONAL, in which case they MUST provide a way\n     \
    \    for the resource owner to indicate the identifier through other\n       \
    \  means.\n   Servers MAY specify additional parameters.\n   The client directs\
    \ the resource owner to the constructed URI using an\n   HTTP redirection response,\
    \ or by other means available to it via the\n   resource owner's user-agent. \
    \ The request MUST use the HTTP \"GET\"\n   method.\n   For example, the client\
    \ redirects the resource owner's user-agent to\n   make the following HTTPS request:\n\
    \     GET /authorize_access?oauth_token=hdk48Djdsa HTTP/1.1\n     Host: server.example.com\n\
    \   The way in which the server handles the authorization request,\n   including\
    \ whether it uses a secure channel such as TLS/SSL is beyond\n   the scope of\
    \ this specification.  However, the server MUST first\n   verify the identity\
    \ of the resource owner.\n   When asking the resource owner to authorize the requested\
    \ access, the\n   server SHOULD present to the resource owner information about\
    \ the\n   client requesting access based on the association of the temporary\n\
    \   credentials with the client identity.  When displaying any such\n   information,\
    \ the server SHOULD indicate if the information has been\n   verified.\n   After\
    \ receiving an authorization decision from the resource owner,\n   the server\
    \ redirects the resource owner to the callback URI if one\n   was provided in\
    \ the \"oauth_callback\" parameter or by other means.\n   To make sure that the\
    \ resource owner granting access is the same\n   resource owner returning back\
    \ to the client to complete the process,\n   the server MUST generate a verification\
    \ code: an unguessable value\n   passed to the client via the resource owner and\
    \ REQUIRED to complete\n   the process.  The server constructs the request URI\
    \ by adding the\n   following REQUIRED parameters to the callback URI query component:\n\
    \   oauth_token\n         The temporary credentials identifier received from the\
    \ client.\n   oauth_verifier\n         The verification code.\n   If the callback\
    \ URI already includes a query component, the server\n   MUST append the OAuth\
    \ parameters to the end of the existing query.\n   For example, the server redirects\
    \ the resource owner's user-agent to\n   make the following HTTP request:\n  \
    \   GET /cb?x=1&oauth_token=hdk48Djdsa&oauth_verifier=473f82d3 HTTP/1.1\n    \
    \ Host: client.example.net\n   If the client did not provide a callback URI, the\
    \ server SHOULD\n   display the value of the verification code, and instruct the\
    \ resource\n   owner to manually inform the client that authorization is completed.\n\
    \   If the server knows a client to be running on a limited device, it\n   SHOULD\
    \ ensure that the verifier value is suitable for manual entry.\n"
- title: 2.3.  Token Credentials
  contents:
  - "2.3.  Token Credentials\n   The client obtains a set of token credentials from\
    \ the server by\n   making an authenticated (Section 3) HTTP \"POST\" request\
    \ to the Token\n   Request endpoint (unless the server advertises another HTTP\
    \ request\n   method for the client to use).  The client constructs a request\
    \ URI\n   by adding the following REQUIRED parameter to the request (in\n   addition\
    \ to the other protocol parameters, using the same parameter\n   transmission\
    \ method):\n   oauth_verifier\n         The verification code received from the\
    \ server in the previous\n         step.\n   When making the request, the client\
    \ authenticates using the client\n   credentials as well as the temporary credentials.\
    \  The temporary\n   credentials are used as a substitute for token credentials\
    \ in the\n   authenticated request and transmitted using the \"oauth_token\"\n\
    \   parameter.\n   Since the request results in the transmission of plain text\n\
    \   credentials in the HTTP response, the server MUST require the use of\n   a\
    \ transport-layer mechanism such as TLS or SSL (or a secure channel\n   with equivalent\
    \ protections).\n   For example, the client makes the following HTTPS request:\n\
    \     POST /request_token HTTP/1.1\n     Host: server.example.com\n     Authorization:\
    \ OAuth realm=\"Example\",\n        oauth_consumer_key=\"jd83jd92dhsh93js\",\n\
    \        oauth_token=\"hdk48Djdsa\",\n        oauth_signature_method=\"PLAINTEXT\"\
    ,\n        oauth_verifier=\"473f82d3\",\n        oauth_signature=\"ja893SD9%26xyz4992k83j47x0b\"\
    \n   The server MUST verify (Section 3.2) the validity of the request,\n   ensure\
    \ that the resource owner has authorized the provisioning of\n   token credentials\
    \ to the client, and ensure that the temporary\n   credentials have not expired\
    \ or been used before.  The server MUST\n   also verify the verification code\
    \ received from the client.  If the\n   request is valid and authorized, the token\
    \ credentials are included\n   in the HTTP response body using the\n   \"application/x-www-form-urlencoded\"\
    \ content type as defined by\n   [W3C.REC-html40-19980424] with a 200 status code\
    \ (OK).\n   The response contains the following REQUIRED parameters:\n   oauth_token\n\
    \         The token identifier.\n   oauth_token_secret\n         The token shared-secret.\n\
    \   For example:\n     HTTP/1.1 200 OK\n     Content-Type: application/x-www-form-urlencoded\n\
    \     oauth_token=j49ddk933skd9dks&oauth_token_secret=ll399dj47dskfjdk\n   The\
    \ server must retain the scope, duration, and other attributes\n   approved by\
    \ the resource owner, and enforce these restrictions when\n   receiving a client\
    \ request made with the token credentials issued.\n   Once the client receives\
    \ and stores the token credentials, it can\n   proceed to access protected resources\
    \ on behalf of the resource owner\n   by making authenticated requests (Section\
    \ 3) using the client\n   credentials together with the token credentials received.\n"
- title: 3.  Authenticated Requests
  contents:
  - "3.  Authenticated Requests\n   The HTTP authentication methods defined by [RFC2617]\
    \ enable clients\n   to make authenticated HTTP requests.  Clients using these\
    \ methods\n   gain access to protected resources by using their credentials\n\
    \   (typically, a username and password pair), which allow the server to\n   verify\
    \ their authenticity.  Using these methods for delegation\n   requires the client\
    \ to assume the role of the resource owner.\n   OAuth provides a method designed\
    \ to include two sets of credentials\n   with each request, one to identify the\
    \ client, and another to\n   identify the resource owner.  Before a client can\
    \ make authenticated\n   requests on behalf of the resource owner, it must obtain\
    \ a token\n   authorized by the resource owner.  Section 2 provides one such method\n\
    \   through which the client can obtain a token authorized by the\n   resource\
    \ owner.\n   The client credentials take the form of a unique identifier and an\n\
    \   associated shared-secret or RSA key pair.  Prior to making\n   authenticated\
    \ requests, the client establishes a set of credentials\n   with the server. \
    \ The process and requirements for provisioning these\n   are outside the scope\
    \ of this specification.  Implementers are urged\n   to consider the security\
    \ ramifications of using client credentials,\n   some of which are described in\
    \ Section 4.6.\n   Making authenticated requests requires prior knowledge of the\n\
    \   server's configuration.  OAuth includes multiple methods for\n   transmitting\
    \ protocol parameters with requests (Section 3.5), as well\n   as multiple methods\
    \ for the client to prove its rightful ownership of\n   the credentials used (Section\
    \ 3.4).  The way in which clients\n   discover the required configuration is outside\
    \ the scope of this\n   specification.\n"
- title: 3.1.  Making Requests
  contents:
  - "3.1.  Making Requests\n   An authenticated request includes several protocol\
    \ parameters.  Each\n   parameter name begins with the \"oauth_\" prefix, and\
    \ the parameter\n   names and values are case sensitive.  Clients make authenticated\n\
    \   requests by calculating the values of a set of protocol parameters\n   and\
    \ adding them to the HTTP request as follows:\n   1.  The client assigns value\
    \ to each of these REQUIRED (unless\n       specified otherwise) protocol parameters:\n\
    \       oauth_consumer_key\n         The identifier portion of the client credentials\
    \ (equivalent to\n         a username).  The parameter name reflects a deprecated\
    \ term\n         (Consumer Key) used in previous revisions of the specification,\n\
    \         and has been retained to maintain backward compatibility.\n       oauth_token\n\
    \         The token value used to associate the request with the resource\n  \
    \       owner.  If the request is not associated with a resource owner\n     \
    \    (no token available), clients MAY omit the parameter.\n       oauth_signature_method\n\
    \         The name of the signature method used by the client to sign the\n  \
    \       request, as defined in Section 3.4.\n       oauth_timestamp\n        \
    \ The timestamp value as defined in Section 3.3.  The parameter\n         MAY\
    \ be omitted when using the \"PLAINTEXT\" signature method.\n       oauth_nonce\n\
    \         The nonce value as defined in Section 3.3.  The parameter MAY\n    \
    \     be omitted when using the \"PLAINTEXT\" signature method.\n       oauth_version\n\
    \         OPTIONAL.  If present, MUST be set to \"1.0\".  Provides the\n     \
    \    version of the authentication process as defined in this\n         specification.\n\
    \   2.  The protocol parameters are added to the request using one of the\n  \
    \     transmission methods listed in Section 3.5.  Each parameter MUST\n     \
    \  NOT appear more than once per request.\n   3.  The client calculates and assigns\
    \ the value of the\n       \"oauth_signature\" parameter as described in Section\
    \ 3.4 and adds\n       the parameter to the request using the same method as in\
    \ the\n       previous step.\n   4.  The client sends the authenticated HTTP request\
    \ to the server.\n   For example, to make the following HTTP request authenticated\
    \ (the\n   \"c2&a3=2+q\" string in the following examples is used to illustrate\n\
    \   the impact of a form-encoded entity-body):\n     POST /request?b5=%3D%253D&a3=a&c%40=&a2=r%20b\
    \ HTTP/1.1\n     Host: example.com\n     Content-Type: application/x-www-form-urlencoded\n\
    \     c2&a3=2+q\n   The client assigns values to the following protocol parameters\
    \ using\n   its client credentials, token credentials, the current timestamp,\
    \ a\n   uniquely generated nonce, and indicates that it will use the\n   \"HMAC-SHA1\"\
    \ signature method:\n     oauth_consumer_key:     9djdj82h48djs9d2\n     oauth_token:\
    \            kkk9d7dh3k39sjv7\n     oauth_signature_method: HMAC-SHA1\n     oauth_timestamp:\
    \        137131201\n     oauth_nonce:            7d8f3e4a\n   The client adds\
    \ the protocol parameters to the request using the\n   OAuth HTTP \"Authorization\"\
    \ header field:\n     Authorization: OAuth realm=\"Example\",\n              \
    \      oauth_consumer_key=\"9djdj82h48djs9d2\",\n                    oauth_token=\"\
    kkk9d7dh3k39sjv7\",\n                    oauth_signature_method=\"HMAC-SHA1\"\
    ,\n                    oauth_timestamp=\"137131201\",\n                    oauth_nonce=\"\
    7d8f3e4a\"\n   Then, it calculates the value of the \"oauth_signature\" parameter\n\
    \   (using client secret \"j49sk3j29djd\" and token secret \"dh893hdasih9\"),\n\
    \   adds it to the request, and sends the HTTP request to the server:\n     POST\
    \ /request?b5=%3D%253D&a3=a&c%40=&a2=r%20b HTTP/1.1\n     Host: example.com\n\
    \     Content-Type: application/x-www-form-urlencoded\n     Authorization: OAuth\
    \ realm=\"Example\",\n                    oauth_consumer_key=\"9djdj82h48djs9d2\"\
    ,\n                    oauth_token=\"kkk9d7dh3k39sjv7\",\n                   \
    \ oauth_signature_method=\"HMAC-SHA1\",\n                    oauth_timestamp=\"\
    137131201\",\n                    oauth_nonce=\"7d8f3e4a\",\n                \
    \    oauth_signature=\"bYT5CMsGcbgUdFHObYMEfcx6bsw%3D\"\n     c2&a3=2+q\n"
- title: 3.2.  Verifying Requests
  contents:
  - "3.2.  Verifying Requests\n   Servers receiving an authenticated request MUST\
    \ validate it by:\n   o  Recalculating the request signature independently as\
    \ described in\n      Section 3.4 and comparing it to the value received from\
    \ the client\n      via the \"oauth_signature\" parameter.\n   o  If using the\
    \ \"HMAC-SHA1\" or \"RSA-SHA1\" signature methods, ensuring\n      that the combination\
    \ of nonce/timestamp/token (if present)\n      received from the client has not\
    \ been used before in a previous\n      request (the server MAY reject requests\
    \ with stale timestamps as\n      described in Section 3.3).\n   o  If a token\
    \ is present, verifying the scope and status of the\n      client authorization\
    \ as represented by the token (the server MAY\n      choose to restrict token\
    \ usage to the client to which it was\n      issued).\n   o  If the \"oauth_version\"\
    \ parameter is present, ensuring its value is\n      \"1.0\".\n   If the request\
    \ fails verification, the server SHOULD respond with the\n   appropriate HTTP\
    \ response status code.  The server MAY include\n   further details about why\
    \ the request was rejected in the response\n   body.\n   The server SHOULD return\
    \ a 400 (Bad Request) status code when\n   receiving a request with unsupported\
    \ parameters, an unsupported\n   signature method, missing parameters, or duplicated\
    \ protocol\n   parameters.  The server SHOULD return a 401 (Unauthorized) status\n\
    \   code when receiving a request with invalid client credentials, an\n   invalid\
    \ or expired token, an invalid signature, or an invalid or used\n   nonce.\n"
- title: 3.3.  Nonce and Timestamp
  contents:
  - "3.3.  Nonce and Timestamp\n   The timestamp value MUST be a positive integer.\
    \  Unless otherwise\n   specified by the server's documentation, the timestamp\
    \ is expressed\n   in the number of seconds since January 1, 1970 00:00:00 GMT.\n\
    \   A nonce is a random string, uniquely generated by the client to allow\n  \
    \ the server to verify that a request has never been made before and\n   helps\
    \ prevent replay attacks when requests are made over a non-secure\n   channel.\
    \  The nonce value MUST be unique across all requests with the\n   same timestamp,\
    \ client credentials, and token combinations.\n   To avoid the need to retain\
    \ an infinite number of nonce values for\n   future checks, servers MAY choose\
    \ to restrict the time period after\n   which a request with an old timestamp\
    \ is rejected.  Note that this\n   restriction implies a level of synchronization\
    \ between the client's\n   and server's clocks.  Servers applying such a restriction\
    \ MAY provide\n   a way for the client to sync with the server's clock; alternatively,\n\
    \   both systems could synchronize with a trusted time service.  Details\n   of\
    \ clock synchronization strategies are beyond the scope of this\n   specification.\n"
- title: 3.4.  Signature
  contents:
  - "3.4.  Signature\n   OAuth-authenticated requests can have two sets of credentials:\
    \ those\n   passed via the \"oauth_consumer_key\" parameter and those in the\n\
    \   \"oauth_token\" parameter.  In order for the server to verify the\n   authenticity\
    \ of the request and prevent unauthorized access, the\n   client needs to prove\
    \ that it is the rightful owner of the\n   credentials.  This is accomplished\
    \ using the shared-secret (or RSA\n   key) part of each set of credentials.\n\
    \   OAuth provides three methods for the client to prove its rightful\n   ownership\
    \ of the credentials: \"HMAC-SHA1\", \"RSA-SHA1\", and\n   \"PLAINTEXT\".  These\
    \ methods are generally referred to as signature\n   methods, even though \"PLAINTEXT\"\
    \ does not involve a signature.  In\n   addition, \"RSA-SHA1\" utilizes an RSA\
    \ key instead of the shared-\n   secrets associated with the client credentials.\n\
    \   OAuth does not mandate a particular signature method, as each\n   implementation\
    \ can have its own unique requirements.  Servers are\n   free to implement and\
    \ document their own custom methods.\n   Recommending any particular method is\
    \ beyond the scope of this\n   specification.  Implementers should review the\
    \ Security\n   Considerations section (Section 4) before deciding on which method\
    \ to\n   support.\n   The client declares which signature method is used via the\n\
    \   \"oauth_signature_method\" parameter.  It then generates a signature\n   (or\
    \ a string of an equivalent value) and includes it in the\n   \"oauth_signature\"\
    \ parameter.  The server verifies the signature as\n   specified for each method.\n\
    \   The signature process does not change the request or its parameters,\n   with\
    \ the exception of the \"oauth_signature\" parameter.\n"
- title: 3.4.1.  Signature Base String
  contents:
  - "3.4.1.  Signature Base String\n   The signature base string is a consistent,\
    \ reproducible concatenation\n   of several of the HTTP request elements into\
    \ a single string.  The\n   string is used as an input to the \"HMAC-SHA1\" and\
    \ \"RSA-SHA1\"\n   signature methods.\n   The signature base string includes the\
    \ following components of the\n   HTTP request:\n   o  The HTTP request method\
    \ (e.g., \"GET\", \"POST\", etc.).\n   o  The authority as declared by the HTTP\
    \ \"Host\" request header field.\n   o  The path and query components of the request\
    \ resource URI.\n   o  The protocol parameters excluding the \"oauth_signature\"\
    .\n   o  Parameters included in the request entity-body if they comply with\n\
    \      the strict restrictions defined in Section 3.4.1.3.\n   The signature base\
    \ string does not cover the entire HTTP request.\n   Most notably, it does not\
    \ include the entity-body in most requests,\n   nor does it include most HTTP\
    \ entity-headers.  It is important to\n   note that the server cannot verify the\
    \ authenticity of the excluded\n   request components without using additional\
    \ protections such as SSL/\n   TLS or other methods.\n"
- title: 3.4.1.1.  String Construction
  contents:
  - "3.4.1.1.  String Construction\n   The signature base string is constructed by\
    \ concatenating together,\n   in order, the following HTTP request elements:\n\
    \   1.  The HTTP request method in uppercase.  For example: \"HEAD\",\n      \
    \ \"GET\", \"POST\", etc.  If the request uses a custom HTTP method, it\n    \
    \   MUST be encoded (Section 3.6).\n   2.  An \"&\" character (ASCII code 38).\n\
    \   3.  The base string URI from Section 3.4.1.2, after being encoded\n      \
    \ (Section 3.6).\n   4.  An \"&\" character (ASCII code 38).\n   5.  The request\
    \ parameters as normalized in Section 3.4.1.3.2, after\n       being encoded (Section\
    \ 3.6).\n   For example, the HTTP request:\n     POST /request?b5=%3D%253D&a3=a&c%40=&a2=r%20b\
    \ HTTP/1.1\n     Host: example.com\n     Content-Type: application/x-www-form-urlencoded\n\
    \     Authorization: OAuth realm=\"Example\",\n                    oauth_consumer_key=\"\
    9djdj82h48djs9d2\",\n                    oauth_token=\"kkk9d7dh3k39sjv7\",\n \
    \                   oauth_signature_method=\"HMAC-SHA1\",\n                  \
    \  oauth_timestamp=\"137131201\",\n                    oauth_nonce=\"7d8f3e4a\"\
    ,\n                    oauth_signature=\"bYT5CMsGcbgUdFHObYMEfcx6bsw%3D\"\n  \
    \   c2&a3=2+q\n   is represented by the following signature base string (line\
    \ breaks\n   are for display purposes only):\n     POST&http%3A%2F%2Fexample.com%2Frequest&a2%3Dr%2520b%26a3%3D2%2520q\n\
    \     %26a3%3Da%26b5%3D%253D%25253D%26c%2540%3D%26c2%3D%26oauth_consumer_\n  \
    \   key%3D9djdj82h48djs9d2%26oauth_nonce%3D7d8f3e4a%26oauth_signature_m\n    \
    \ ethod%3DHMAC-SHA1%26oauth_timestamp%3D137131201%26oauth_token%3Dkkk\n     9d7dh3k39sjv7\n"
- title: 3.4.1.2.  Base String URI
  contents:
  - "3.4.1.2.  Base String URI\n   The scheme, authority, and path of the request\
    \ resource URI [RFC3986]\n   are included by constructing an \"http\" or \"https\"\
    \ URI representing\n   the request resource (without the query or fragment) as\
    \ follows:\n   1.  The scheme and host MUST be in lowercase.\n   2.  The host\
    \ and port values MUST match the content of the HTTP\n       request \"Host\"\
    \ header field.\n   3.  The port MUST be included if it is not the default port\
    \ for the\n       scheme, and MUST be excluded if it is the default.  Specifically,\n\
    \       the port MUST be excluded when making an HTTP request [RFC2616]\n    \
    \   to port 80 or when making an HTTPS request [RFC2818] to port 443.\n      \
    \ All other non-default port numbers MUST be included.\n   For example, the HTTP\
    \ request:\n     GET /r%20v/X?id=123 HTTP/1.1\n     Host: EXAMPLE.COM:80\n   is\
    \ represented by the base string URI: \"http://example.com/r%20v/X\".\n   In another\
    \ example, the HTTPS request:\n     GET /?q=1 HTTP/1.1\n     Host: www.example.net:8080\n\
    \   is represented by the base string URI:\n   \"https://www.example.net:8080/\"\
    .\n"
- title: 3.4.1.3.  Request Parameters
  contents:
  - "3.4.1.3.  Request Parameters\n   In order to guarantee a consistent and reproducible\
    \ representation of\n   the request parameters, the parameters are collected and\
    \ decoded to\n   their original decoded form.  They are then sorted and encoded\
    \ in a\n   particular manner that is often different from their original\n   encoding\
    \ scheme, and concatenated into a single string.\n"
- title: 3.4.1.3.1.  Parameter Sources
  contents:
  - "3.4.1.3.1.  Parameter Sources\n   The parameters from the following sources are\
    \ collected into a single\n   list of name/value pairs:\n   o  The query component\
    \ of the HTTP request URI as defined by\n      [RFC3986], Section 3.4.  The query\
    \ component is parsed into a list\n      of name/value pairs by treating it as\
    \ an\n      \"application/x-www-form-urlencoded\" string, separating the names\n\
    \      and values and decoding them as defined by\n      [W3C.REC-html40-19980424],\
    \ Section 17.13.4.\n   o  The OAuth HTTP \"Authorization\" header field (Section\
    \ 3.5.1) if\n      present.  The header's content is parsed into a list of name/value\n\
    \      pairs excluding the \"realm\" parameter if present.  The parameter\n  \
    \    values are decoded as defined by Section 3.5.1.\n   o  The HTTP request entity-body,\
    \ but only if all of the following\n      conditions are met:\n      *  The entity-body\
    \ is single-part.\n      *  The entity-body follows the encoding requirements\
    \ of the\n         \"application/x-www-form-urlencoded\" content-type as defined\
    \ by\n         [W3C.REC-html40-19980424].\n      *  The HTTP request entity-header\
    \ includes the \"Content-Type\"\n         header field set to \"application/x-www-form-urlencoded\"\
    .\n      The entity-body is parsed into a list of decoded name/value pairs\n \
    \     as described in [W3C.REC-html40-19980424], Section 17.13.4.\n   The \"oauth_signature\"\
    \ parameter MUST be excluded from the signature\n   base string if present.  Parameters\
    \ not explicitly included in the\n   request MUST be excluded from the signature\
    \ base string (e.g., the\n   \"oauth_version\" parameter when omitted).\n   For\
    \ example, the HTTP request:\n       POST /request?b5=%3D%253D&a3=a&c%40=&a2=r%20b\
    \ HTTP/1.1\n       Host: example.com\n       Content-Type: application/x-www-form-urlencoded\n\
    \       Authorization: OAuth realm=\"Example\",\n                      oauth_consumer_key=\"\
    9djdj82h48djs9d2\",\n                      oauth_token=\"kkk9d7dh3k39sjv7\",\n\
    \                      oauth_signature_method=\"HMAC-SHA1\",\n               \
    \       oauth_timestamp=\"137131201\",\n                      oauth_nonce=\"7d8f3e4a\"\
    ,\n                      oauth_signature=\"djosJKDKJSD8743243%2Fjdk33klY%3D\"\n\
    \       c2&a3=2+q\n   contains the following (fully decoded) parameters used in\
    \ the\n   signature base sting:\n               +------------------------+------------------+\n\
    \               |          Name          |       Value      |\n              \
    \ +------------------------+------------------+\n               |           b5\
    \           |       =%3D       |\n               |           a3           |  \
    \       a        |\n               |           c@           |                \
    \  |\n               |           a2           |        r b       |\n         \
    \      |   oauth_consumer_key   | 9djdj82h48djs9d2 |\n               |       oauth_token\
    \      | kkk9d7dh3k39sjv7 |\n               | oauth_signature_method |     HMAC-SHA1\
    \    |\n               |     oauth_timestamp    |     137131201    |\n       \
    \        |       oauth_nonce      |     7d8f3e4a     |\n               |     \
    \      c2           |                  |\n               |           a3      \
    \     |        2 q       |\n               +------------------------+------------------+\n\
    \   Note that the value of \"b5\" is \"=%3D\" and not \"==\".  Both \"c@\" and\n\
    \   \"c2\" have empty values.  While the encoding rules specified in this\n  \
    \ specification for the purpose of constructing the signature base\n   string\
    \ exclude the use of a \"+\" character (ASCII code 43) to\n   represent an encoded\
    \ space character (ASCII code 32), this practice\n   is widely used in \"application/x-www-form-urlencoded\"\
    \ encoded values,\n   and MUST be properly decoded, as demonstrated by one of\
    \ the \"a3\"\n   parameter instances (the \"a3\" parameter is used twice in this\n\
    \   request).\n"
- title: 3.4.1.3.2.  Parameters Normalization
  contents:
  - "3.4.1.3.2.  Parameters Normalization\n   The parameters collected in Section\
    \ 3.4.1.3 are normalized into a\n   single string as follows:\n   1.  First, the\
    \ name and value of each parameter are encoded\n       (Section 3.6).\n   2. \
    \ The parameters are sorted by name, using ascending byte value\n       ordering.\
    \  If two or more parameters share the same name, they\n       are sorted by their\
    \ value.\n   3.  The name of each parameter is concatenated to its corresponding\n\
    \       value using an \"=\" character (ASCII code 61) as a separator, even\n\
    \       if the value is empty.\n   4.  The sorted name/value pairs are concatenated\
    \ together into a\n       single string by using an \"&\" character (ASCII code\
    \ 38) as\n       separator.\n   For example, the list of parameters from the previous\
    \ section would\n   be normalized as follows:\n                              \
    \   Encoded:\n               +------------------------+------------------+\n \
    \              |          Name          |       Value      |\n               +------------------------+------------------+\n\
    \               |           b5           |     %3D%253D     |\n              \
    \ |           a3           |         a        |\n               |          c%40\
    \          |                  |\n               |           a2           |   \
    \    r%20b      |\n               |   oauth_consumer_key   | 9djdj82h48djs9d2\
    \ |\n               |       oauth_token      | kkk9d7dh3k39sjv7 |\n          \
    \     | oauth_signature_method |     HMAC-SHA1    |\n               |     oauth_timestamp\
    \    |     137131201    |\n               |       oauth_nonce      |     7d8f3e4a\
    \     |\n               |           c2           |                  |\n      \
    \         |           a3           |       2%20q      |\n               +------------------------+------------------+\n\
    \                                  Sorted:\n               +------------------------+------------------+\n\
    \               |          Name          |       Value      |\n              \
    \ +------------------------+------------------+\n               |           a2\
    \           |       r%20b      |\n               |           a3           |  \
    \     2%20q      |\n               |           a3           |         a      \
    \  |\n               |           b5           |     %3D%253D     |\n         \
    \      |          c%40          |                  |\n               |       \
    \    c2           |                  |\n               |   oauth_consumer_key\
    \   | 9djdj82h48djs9d2 |\n               |       oauth_nonce      |     7d8f3e4a\
    \     |\n               | oauth_signature_method |     HMAC-SHA1    |\n      \
    \         |     oauth_timestamp    |     137131201    |\n               |    \
    \   oauth_token      | kkk9d7dh3k39sjv7 |\n               +------------------------+------------------+\n\
    \                            Concatenated Pairs:\n                  +-------------------------------------+\n\
    \                  |              Name=Value             |\n                 \
    \ +-------------------------------------+\n                  |               a2=r%20b\
    \              |\n                  |               a3=2%20q              |\n\
    \                  |                 a3=a                |\n                 \
    \ |             b5=%3D%253D             |\n                  |               \
    \ c%40=                |\n                  |                 c2=            \
    \     |\n                  | oauth_consumer_key=9djdj82h48djs9d2 |\n         \
    \         |         oauth_nonce=7d8f3e4a        |\n                  |   oauth_signature_method=HMAC-SHA1\
    \  |\n                  |      oauth_timestamp=137131201      |\n            \
    \      |     oauth_token=kkk9d7dh3k39sjv7    |\n                  +-------------------------------------+\n\
    \   and concatenated together into a single string (line breaks are for\n   display\
    \ purposes only):\n     a2=r%20b&a3=2%20q&a3=a&b5=%3D%253D&c%40=&c2=&oauth_consumer_key=9dj\n\
    \     dj82h48djs9d2&oauth_nonce=7d8f3e4a&oauth_signature_method=HMAC-SHA1\n  \
    \   &oauth_timestamp=137131201&oauth_token=kkk9d7dh3k39sjv7\n"
- title: 3.4.2.  HMAC-SHA1
  contents:
  - "3.4.2.  HMAC-SHA1\n   The \"HMAC-SHA1\" signature method uses the HMAC-SHA1 signature\n\
    \   algorithm as defined in [RFC2104]:\n     digest = HMAC-SHA1 (key, text)\n\
    \   The HMAC-SHA1 function variables are used in following way:\n   text    is\
    \ set to the value of the signature base string from\n           Section 3.4.1.1.\n\
    \   key     is set to the concatenated values of:\n           1.  The client shared-secret,\
    \ after being encoded\n               (Section 3.6).\n           2.  An \"&\"\
    \ character (ASCII code 38), which MUST be included\n               even when\
    \ either secret is empty.\n           3.  The token shared-secret, after being\
    \ encoded\n               (Section 3.6).\n   digest  is used to set the value\
    \ of the \"oauth_signature\" protocol\n           parameter, after the result\
    \ octet string is base64-encoded\n           per [RFC2045], Section 6.8.\n"
- title: 3.4.3.  RSA-SHA1
  contents:
  - "3.4.3.  RSA-SHA1\n   The \"RSA-SHA1\" signature method uses the RSASSA-PKCS1-v1_5\
    \ signature\n   algorithm as defined in [RFC3447], Section 8.2 (also known as\n\
    \   PKCS#1), using SHA-1 as the hash function for EMSA-PKCS1-v1_5.  To\n   use\
    \ this method, the client MUST have established client credentials\n   with the\
    \ server that included its RSA public key (in a manner that is\n   beyond the\
    \ scope of this specification).\n   The signature base string is signed using\
    \ the client's RSA private\n   key per [RFC3447], Section 8.2.1:\n     S = RSASSA-PKCS1-V1_5-SIGN\
    \ (K, M)\n   Where:\n   K     is set to the client's RSA private key,\n   M  \
    \   is set to the value of the signature base string from\n         Section 3.4.1.1,\
    \ and\n   S     is the result signature used to set the value of the\n       \
    \  \"oauth_signature\" protocol parameter, after the result octet\n         string\
    \ is base64-encoded per [RFC2045] section 6.8.\n   The server verifies the signature\
    \ per [RFC3447] section 8.2.2:\n     RSASSA-PKCS1-V1_5-VERIFY ((n, e), M, S)\n\
    \   Where:\n   (n, e) is set to the client's RSA public key,\n   M      is set\
    \ to the value of the signature base string from\n          Section 3.4.1.1, and\n\
    \   S      is set to the octet string value of the \"oauth_signature\"\n     \
    \     protocol parameter received from the client.\n"
- title: 3.4.4.  PLAINTEXT
  contents:
  - "3.4.4.  PLAINTEXT\n   The \"PLAINTEXT\" method does not employ a signature algorithm.\
    \  It\n   MUST be used with a transport-layer mechanism such as TLS or SSL (or\n\
    \   sent over a secure channel with equivalent protections).  It does not\n  \
    \ utilize the signature base string or the \"oauth_timestamp\" and\n   \"oauth_nonce\"\
    \ parameters.\n   The \"oauth_signature\" protocol parameter is set to the concatenated\n\
    \   value of:\n   1.  The client shared-secret, after being encoded (Section 3.6).\n\
    \   2.  An \"&\" character (ASCII code 38), which MUST be included even\n    \
    \   when either secret is empty.\n   3.  The token shared-secret, after being\
    \ encoded (Section 3.6).\n"
- title: 3.5.  Parameter Transmission
  contents:
  - "3.5.  Parameter Transmission\n   When making an OAuth-authenticated request,\
    \ protocol parameters as\n   well as any other parameter using the \"oauth_\"\
    \ prefix SHALL be\n   included in the request using one and only one of the following\n\
    \   locations, listed in order of decreasing preference:\n   1.  The HTTP \"Authorization\"\
    \ header field as described in\n       Section 3.5.1.\n   2.  The HTTP request\
    \ entity-body as described in Section 3.5.2.\n   3.  The HTTP request URI query\
    \ as described in Section 3.5.3.\n   In addition to these three methods, future\
    \ extensions MAY define\n   other methods for including protocol parameters in\
    \ the request.\n"
- title: 3.5.1.  Authorization Header
  contents:
  - "3.5.1.  Authorization Header\n   Protocol parameters can be transmitted using\
    \ the HTTP \"Authorization\"\n   header field as defined by [RFC2617] with the\
    \ auth-scheme name set to\n   \"OAuth\" (case insensitive).\n   For example:\n\
    \     Authorization: OAuth realm=\"Example\",\n        oauth_consumer_key=\"0685bd9184jfhq22\"\
    ,\n        oauth_token=\"ad180jjd733klru7\",\n        oauth_signature_method=\"\
    HMAC-SHA1\",\n        oauth_signature=\"wOJIO9A2W5mFwDgiDvZbTSMK%2FPY%3D\",\n\
    \        oauth_timestamp=\"137131200\",\n        oauth_nonce=\"4572616e48616d6d65724c61686176\"\
    ,\n        oauth_version=\"1.0\"\n   Protocol parameters SHALL be included in\
    \ the \"Authorization\" header\n   field as follows:\n   1.  Parameter names and\
    \ values are encoded per Parameter Encoding\n       (Section 3.6).\n   2.  Each\
    \ parameter's name is immediately followed by an \"=\" character\n       (ASCII\
    \ code 61), a \"\"\" character (ASCII code 34), the parameter\n       value (MAY\
    \ be empty), and another \"\"\" character (ASCII code 34).\n   3.  Parameters\
    \ are separated by a \",\" character (ASCII code 44) and\n       OPTIONAL linear\
    \ whitespace per [RFC2617].\n   4.  The OPTIONAL \"realm\" parameter MAY be added\
    \ and interpreted per\n       [RFC2617] section 1.2.\n   Servers MAY indicate\
    \ their support for the \"OAuth\" auth-scheme by\n   returning the HTTP \"WWW-Authenticate\"\
    \ response header field upon\n   client requests for protected resources.  As\
    \ per [RFC2617], such a\n   response MAY include additional HTTP \"WWW-Authenticate\"\
    \ header\n   fields:\n   For example:\n     WWW-Authenticate: OAuth realm=\"http://server.example.com/\"\
    \n   The realm parameter defines a protection realm per [RFC2617], Section\n \
    \  1.2.\n"
- title: 3.5.2.  Form-Encoded Body
  contents:
  - "3.5.2.  Form-Encoded Body\n   Protocol parameters can be transmitted in the HTTP\
    \ request entity-\n   body, but only if the following REQUIRED conditions are\
    \ met:\n   o  The entity-body is single-part.\n   o  The entity-body follows the\
    \ encoding requirements of the\n      \"application/x-www-form-urlencoded\" content-type\
    \ as defined by\n      [W3C.REC-html40-19980424].\n   o  The HTTP request entity-header\
    \ includes the \"Content-Type\" header\n      field set to \"application/x-www-form-urlencoded\"\
    .\n   For example (line breaks are for display purposes only):\n     oauth_consumer_key=0685bd9184jfhq22&oauth_token=ad180jjd733klr\n\
    \     u7&oauth_signature_method=HMAC-SHA1&oauth_signature=wOJIO9A2W5\n     mFwDgiDvZbTSMK%2FPY%3D&oauth_timestamp=137131200&oauth_nonce=4\n\
    \     572616e48616d6d65724c61686176&oauth_version=1.0\n   The entity-body MAY\
    \ include other request-specific parameters, in\n   which case, the protocol parameters\
    \ SHOULD be appended following the\n   request-specific parameters, properly separated\
    \ by an \"&\" character\n   (ASCII code 38).\n"
- title: 3.5.3.  Request URI Query
  contents:
  - "3.5.3.  Request URI Query\n   Protocol parameters can be transmitted by being\
    \ added to the HTTP\n   request URI as a query parameter as defined by [RFC3986],\
    \ Section 3.\n   For example (line breaks are for display purposes only):\n  \
    \   GET /example/path?oauth_consumer_key=0685bd9184jfhq22&\n     oauth_token=ad180jjd733klru7&oauth_signature_method=HM\n\
    \     AC-SHA1&oauth_signature=wOJIO9A2W5mFwDgiDvZbTSMK%2FPY%\n     3D&oauth_timestamp=137131200&oauth_nonce=4572616e48616\n\
    \     d6d65724c61686176&oauth_version=1.0 HTTP/1.1\n   The request URI MAY include\
    \ other request-specific query parameters,\n   in which case, the protocol parameters\
    \ SHOULD be appended following\n   the request-specific parameters, properly separated\
    \ by an \"&\"\n   character (ASCII code 38).\n"
- title: 3.6.  Percent Encoding
  contents:
  - "3.6.  Percent Encoding\n   Existing percent-encoding methods do not guarantee\
    \ a consistent\n   construction of the signature base string.  The following percent-\n\
    \   encoding method is not defined to replace the existing encoding\n   methods\
    \ defined by [RFC3986] and [W3C.REC-html40-19980424].  It is\n   used only in\
    \ the construction of the signature base string and the\n   \"Authorization\"\
    \ header field.\n   This specification defines the following method for percent-encoding\n\
    \   strings:\n   1.  Text values are first encoded as UTF-8 octets per [RFC3629]\
    \ if\n       they are not already.  This does not include binary values that\n\
    \       are not intended for human consumption.\n   2.  The values are then escaped\
    \ using the [RFC3986] percent-encoding\n       (%XX) mechanism as follows:\n \
    \      *  Characters in the unreserved character set as defined by\n         \
    \ [RFC3986], Section 2.3 (ALPHA, DIGIT, \"-\", \".\", \"_\", \"~\") MUST\n   \
    \       NOT be encoded.\n       *  All other characters MUST be encoded.\n   \
    \    *  The two hexadecimal characters used to represent encoded\n          characters\
    \ MUST be uppercase.\n   This method is different from the encoding scheme used\
    \ by the\n   \"application/x-www-form-urlencoded\" content-type (for example,\
    \ it\n   encodes space characters as \"%20\" and not using the \"+\" character).\n\
    \   It MAY be different from the percent-encoding functions provided by\n   web-development\
    \ frameworks (e.g., encode different characters, use\n   lowercase hexadecimal\
    \ characters).\n"
- title: 4.  Security Considerations
  contents:
  - "4.  Security Considerations\n   As stated in [RFC2617], the greatest sources\
    \ of risks are usually\n   found not in the core protocol itself but in policies\
    \ and procedures\n   surrounding its use.  Implementers are strongly encouraged\
    \ to assess\n   how this protocol addresses their security requirements.\n"
- title: 4.1.  RSA-SHA1 Signature Method
  contents:
  - "4.1.  RSA-SHA1 Signature Method\n   Authenticated requests made with \"RSA-SHA1\"\
    \ signatures do not use the\n   token shared-secret, or any provisioned client\
    \ shared-secret.  This\n   means the request relies completely on the secrecy\
    \ of the private key\n   used by the client to sign requests.\n"
- title: 4.2.  Confidentiality of Requests
  contents:
  - "4.2.  Confidentiality of Requests\n   While this protocol provides a mechanism\
    \ for verifying the integrity\n   of requests, it provides no guarantee of request\
    \ confidentiality.\n   Unless further precautions are taken, eavesdroppers will\
    \ have full\n   access to request content.  Servers should carefully consider\
    \ the\n   kinds of data likely to be sent as part of such requests, and should\n\
    \   employ transport-layer security mechanisms to protect sensitive\n   resources.\n"
- title: 4.3.  Spoofing by Counterfeit Servers
  contents:
  - "4.3.  Spoofing by Counterfeit Servers\n   This protocol makes no attempt to verify\
    \ the authenticity of the\n   server.  A hostile party could take advantage of\
    \ this by intercepting\n   the client's requests and returning misleading or otherwise\
    \ incorrect\n   responses.  Service providers should consider such attacks when\n\
    \   developing services using this protocol, and should require\n   transport-layer\
    \ security for any requests where the authenticity of\n   the server or of request\
    \ responses is an issue.\n"
- title: 4.4.  Proxying and Caching of Authenticated Content
  contents:
  - "4.4.  Proxying and Caching of Authenticated Content\n   The HTTP Authorization\
    \ scheme (Section 3.5.1) is optional.  However,\n   [RFC2616] relies on the \"\
    Authorization\" and \"WWW-Authenticate\" header\n   fields to distinguish authenticated\
    \ content so that it can be\n   protected.  Proxies and caches, in particular,\
    \ may fail to adequately\n   protect requests not using these header fields.\n\
    \   For example, private authenticated content may be stored in (and thus\n  \
    \ retrievable from) publicly accessible caches.  Servers not using the\n   HTTP\
    \ \"Authorization\" header field should take care to use other\n   mechanisms,\
    \ such as the \"Cache-Control\" header field, to ensure that\n   authenticated\
    \ content is protected.\n"
- title: 4.5.  Plaintext Storage of Credentials
  contents:
  - "4.5.  Plaintext Storage of Credentials\n   The client shared-secret and token\
    \ shared-secret function the same\n   way passwords do in traditional authentication\
    \ systems.  In order to\n   compute the signatures used in methods other than\
    \ \"RSA-SHA1\", the\n   server must have access to these secrets in plaintext\
    \ form.  This is\n   in contrast, for example, to modern operating systems, which\
    \ store\n   only a one-way hash of user credentials.\n   If an attacker were to\
    \ gain access to these secrets -- or worse, to\n   the server's database of all\
    \ such secrets -- he or she would be able\n   to perform any action on behalf\
    \ of any resource owner.  Accordingly,\n   it is critical that servers protect\
    \ these secrets from unauthorized\n   access.\n"
- title: 4.6.  Secrecy of the Client Credentials
  contents:
  - "4.6.  Secrecy of the Client Credentials\n   In many cases, the client application\
    \ will be under the control of\n   potentially untrusted parties.  For example,\
    \ if the client is a\n   desktop application with freely available source code\
    \ or an\n   executable binary, an attacker may be able to download a copy for\n\
    \   analysis.  In such cases, attackers will be able to recover the\n   client\
    \ credentials.\n   Accordingly, servers should not use the client credentials\
    \ alone to\n   verify the identity of the client.  Where possible, other factors\n\
    \   such as IP address should be used as well.\n"
- title: 4.7.  Phishing Attacks
  contents:
  - "4.7.  Phishing Attacks\n   Wide deployment of this and similar protocols may\
    \ cause resource\n   owners to become inured to the practice of being redirected\
    \ to\n   websites where they are asked to enter their passwords.  If resource\n\
    \   owners are not careful to verify the authenticity of these websites\n   before\
    \ entering their credentials, it will be possible for attackers\n   to exploit\
    \ this practice to steal resource owners' passwords.\n   Servers should attempt\
    \ to educate resource owners about the risks\n   phishing attacks pose, and should\
    \ provide mechanisms that make it\n   easy for resource owners to confirm the\
    \ authenticity of their sites.\n   Client developers should consider the security\
    \ implications of how\n   they interact with a user-agent (e.g., separate window,\
    \ embedded),\n   and the ability of the end-user to verify the authenticity of\
    \ the\n   server website.\n"
- title: 4.8.  Scoping of Access Requests
  contents:
  - "4.8.  Scoping of Access Requests\n   By itself, this protocol does not provide\
    \ any method for scoping the\n   access rights granted to a client.  However,\
    \ most applications do\n   require greater granularity of access rights.  For\
    \ example, servers\n   may wish to make it possible to grant access to some protected\n\
    \   resources but not others, or to grant only limited access (such as\n   read-only\
    \ access) to those protected resources.\n   When implementing this protocol, servers\
    \ should consider the types of\n   access resource owners may wish to grant clients,\
    \ and should provide\n   mechanisms to do so.  Servers should also take care to\
    \ ensure that\n   resource owners understand the access they are granting, as\
    \ well as\n   any risks that may be involved.\n"
- title: 4.9.  Entropy of Secrets
  contents:
  - "4.9.  Entropy of Secrets\n   Unless a transport-layer security protocol is used,\
    \ eavesdroppers\n   will have full access to authenticated requests and signatures,\
    \ and\n   will thus be able to mount offline brute-force attacks to recover the\n\
    \   credentials used.  Servers should be careful to assign shared-secrets\n  \
    \ that are long enough, and random enough, to resist such attacks for\n   at least\
    \ the length of time that the shared-secrets are valid.\n   For example, if shared-secrets\
    \ are valid for two weeks, servers\n   should ensure that it is not possible to\
    \ mount a brute force attack\n   that recovers the shared-secret in less than\
    \ two weeks.  Of course,\n   servers are urged to err on the side of caution,\
    \ and use the longest\n   secrets reasonable.\n   It is equally important that\
    \ the pseudo-random number generator\n   (PRNG) used to generate these secrets\
    \ be of sufficiently high\n   quality.  Many PRNG implementations generate number\
    \ sequences that\n   may appear to be random, but that nevertheless exhibit patterns\
    \ or\n   other weaknesses that make cryptanalysis or brute force attacks\n   easier.\
    \  Implementers should be careful to use cryptographically\n   secure PRNGs to\
    \ avoid these problems.\n"
- title: 4.10.  Denial-of-Service / Resource-Exhaustion Attacks
  contents:
  - "4.10.  Denial-of-Service / Resource-Exhaustion Attacks\n   This specification\
    \ includes a number of features that may make\n   resource exhaustion attacks\
    \ against servers possible.  For example,\n   this protocol requires servers to\
    \ track used nonces.  If an attacker\n   is able to use many nonces quickly, the\
    \ resources required to track\n   them may exhaust available capacity.  And again,\
    \ this protocol can\n   require servers to perform potentially expensive computations\
    \ in\n   order to verify the signature on incoming requests.  An attacker may\n\
    \   exploit this to perform a denial-of-service attack by sending a large\n  \
    \ number of invalid requests to the server.\n   Resource Exhaustion attacks are\
    \ by no means specific to this\n   specification.  However, implementers should\
    \ be careful to consider\n   the additional avenues of attack that this protocol\
    \ exposes, and\n   design their implementations accordingly.  For example, entropy\n\
    \   starvation typically results in either a complete denial of service\n   while\
    \ the system waits for new entropy or else in weak (easily\n   guessable) secrets.\
    \  When implementing this protocol, servers should\n   consider which of these\
    \ presents a more serious risk for their\n   application and design accordingly.\n"
- title: 4.11.  SHA-1 Cryptographic Attacks
  contents:
  - "4.11.  SHA-1 Cryptographic Attacks\n   SHA-1, the hash algorithm used in \"HMAC-SHA1\"\
    \ and \"RSA-SHA1\"\n   signature methods, has been shown to have a number of cryptographic\n\
    \   weaknesses that significantly reduce its resistance to collision\n   attacks.\
    \  While these weaknesses do not seem to affect the use of\n   SHA-1 with the\
    \ Hash-based Message Authentication Code (HMAC) and\n   should not affect the\
    \ \"HMAC-SHA1\" signature method, it may affect the\n   use of the \"RSA-SHA1\"\
    \ signature method.  NIST has announced that it\n   will phase out use of SHA-1\
    \ in digital signatures by 2010\n   [NIST_SHA-1Comments].\n   Practically speaking,\
    \ these weaknesses are difficult to exploit, and\n   by themselves do not pose\
    \ a significant risk to users of this\n   protocol.  They may, however, make more\
    \ efficient attacks possible,\n   and servers should take this into account when\
    \ considering whether\n   SHA-1 provides an adequate level of security for their\
    \ applications.\n"
- title: 4.12.  Signature Base String Limitations
  contents:
  - "4.12.  Signature Base String Limitations\n   The signature base string has been\
    \ designed to support the signature\n   methods defined in this specification.\
    \  Those designing additional\n   signature methods, should evaluated the compatibility\
    \ of the\n   signature base string with their security requirements.\n   Since\
    \ the signature base string does not cover the entire HTTP\n   request, such as\
    \ most request entity-body, most entity-headers, and\n   the order in which parameters\
    \ are sent, servers should employ\n   additional mechanisms to protect such elements.\n"
- title: 4.13.  Cross-Site Request Forgery (CSRF)
  contents:
  - "4.13.  Cross-Site Request Forgery (CSRF)\n   Cross-Site Request Forgery (CSRF)\
    \ is a web-based attack whereby HTTP\n   requests are transmitted from a user\
    \ that the website trusts or has\n   authenticated.  CSRF attacks on authorization\
    \ approvals can allow an\n   attacker to obtain authorization to protected resources\
    \ without the\n   consent of the User.  Servers SHOULD strongly consider best\
    \ practices\n   in CSRF prevention at all the protocol authorization endpoints.\n\
    \   CSRF attacks on OAuth callback URIs hosted by clients are also\n   possible.\
    \  Clients should prevent CSRF attacks on OAuth callback URIs\n   by verifying\
    \ that the resource owner at the client site intended to\n   complete the OAuth\
    \ negotiation with the server.  The methods for\n   preventing such CSRF attacks\
    \ are beyond the scope of this\n   specification.\n"
- title: 4.14.  User Interface Redress
  contents:
  - "4.14.  User Interface Redress\n   Servers should protect the authorization process\
    \ against user\n   interface (UI) redress attacks (also known as \"clickjacking\"\
    ).  As of\n   the time of this writing, no complete defenses against UI redress\
    \ are\n   available.  Servers can mitigate the risk of UI redress attacks using\n\
    \   the following techniques:\n   o  JavaScript frame busting.\n   o  JavaScript\
    \ frame busting, and requiring that browsers have\n      JavaScript enabled on\
    \ the authorization page.\n   o  Browser-specific anti-framing techniques.\n \
    \  o  Requiring password reentry before issuing OAuth tokens.\n"
- title: 4.15.  Automatic Processing of Repeat Authorizations
  contents:
  - "4.15.  Automatic Processing of Repeat Authorizations\n   Servers may wish to\
    \ automatically process authorization requests\n   (Section 2.2) from clients\
    \ that have been previously authorized by\n   the resource owner.  When the resource\
    \ owner is redirected to the\n   server to grant access, the server detects that\
    \ the resource owner\n   has already granted access to that particular client.\
    \  Instead of\n   prompting the resource owner for approval, the server automatically\n\
    \   redirects the resource owner back to the client.\n   If the client credentials\
    \ are compromised, automatic processing\n   creates additional security risks.\
    \  An attacker can use the stolen\n   client credentials to redirect the resource\
    \ owner to the server with\n   an authorization request.  The server will then\
    \ grant access to the\n   resource owner's data without the resource owner's explicit\
    \ approval,\n   or even awareness of an attack.  If no automatic approval is\n\
    \   implemented, an attacker must use social engineering to convince the\n   resource\
    \ owner to approve access.\n   Servers can mitigate the risks associated with\
    \ automatic processing\n   by limiting the scope of token credentials obtained\
    \ through automated\n   approvals.  Tokens credentials obtained through explicit\
    \ resource\n   owner consent can remain unaffected.  Clients can mitigate the\
    \ risks\n   associated with automatic processing by protecting their client\n\
    \   credentials.\n"
- title: 5.  Acknowledgments
  contents:
  - "5.  Acknowledgments\n   This specification is directly based on the OAuth Core\
    \ 1.0 Revision A\n   community specification, which in turn was modeled after\
    \ existing\n   proprietary protocols and best practices that have been independently\n\
    \   implemented by various companies.\n   The community specification was edited\
    \ by Eran Hammer-Lahav and\n   authored by: Mark Atwood, Dirk Balfanz, Darren\
    \ Bounds, Richard M.\n   Conlan, Blaine Cook, Leah Culver, Breno de Medeiros,\
    \ Brian Eaton,\n   Kellan Elliott-McCrea, Larry Halff, Eran Hammer-Lahav, Ben\
    \ Laurie,\n   Chris Messina, John Panzer, Sam Quigley, David Recordon, Eran\n\
    \   Sandler, Jonathan Sergent, Todd Sieling, Brian Slesinsky, and Andy\n   Smith.\n\
    \   The editor would like to thank the following individuals for their\n   invaluable\
    \ contribution to the publication of this edition of the\n   protocol: Lisa Dusseault,\
    \ Justin Hart, Avshalom Houri, Chris Messina,\n   Mark Nottingham, Tim Polk, Peter\
    \ Saint-Andre, Joseph Smarr, and Paul\n   Walker.\n"
- title: Appendix A.  Differences from the Community Edition
  contents:
  - "Appendix A.  Differences from the Community Edition\n   This specification includes\
    \ the following changes made to the\n   original community document [OAuthCore1.0_RevisionA]\
    \ in order to\n   correct mistakes and omissions identified since the document\
    \ was\n   originally published at <http://oauth.net>.\n   o  Changed using TLS/SSL\
    \ when sending or requesting plain text\n      credentials from SHOULD to MUST.\
    \  This change affects any use of\n      the \"PLAINTEXT\" signature method, as\
    \ well as requesting temporary\n      credentials (Section 2.1) and obtaining\
    \ token credentials\n      (Section 2.3).\n   o  Adjusted nonce language to indicate\
    \ it is unique per token/\n      timestamp/client combination.\n   o  Removed\
    \ the requirement for timestamps to be equal to or greater\n      than the timestamp\
    \ used in the previous request.\n   o  Changed the nonce and timestamp parameters\
    \ to OPTIONAL when using\n      the \"PLAINTEXT\" signature method.\n   o  Extended\
    \ signature base string coverage that includes\n      \"application/x-www-form-urlencoded\"\
    \ entity-body parameters when\n      the HTTP method used is other than \"POST\"\
    \ and URI query parameters\n      when the HTTP method used is other than \"GET\"\
    .\n   o  Incorporated corrections to the instructions in each signature\n    \
    \  method to encode the signature value before inserting it into the\n      \"\
    oauth_signature\" parameter, removing errors that would have\n      caused double-encoded\
    \ values.\n   o  Allowed omitting the \"oauth_token\" parameter when empty.\n\
    \   o  Permitted sending requests for temporary credentials with an empty\n  \
    \    \"oauth_token\" parameter.\n   o  Removed the restrictions from defining\
    \ additional \"oauth_\"\n      parameters.\n"
- title: 6.  References
  contents:
  - '6.  References

    '
- title: 6.1.  Normative References
  contents:
  - "6.1.  Normative References\n   [RFC2045]  Freed, N. and N. Borenstein, \"Multipurpose\
    \ Internet Mail\n              Extensions (MIME) Part One: Format of Internet\
    \ Message\n              Bodies\", RFC 2045, November 1996.\n   [RFC2104]  Krawczyk,\
    \ H., Bellare, M., and R. Canetti, \"HMAC: Keyed-\n              Hashing for Message\
    \ Authentication\", RFC 2104,\n              February 1997.\n   [RFC2119]  Bradner,\
    \ S., \"Key words for use in RFCs to Indicate\n              Requirement Levels\"\
    , BCP 14, RFC 2119, March 1997.\n   [RFC2616]  Fielding, R., Gettys, J., Mogul,\
    \ J., Frystyk, H.,\n              Masinter, L., Leach, P., and T. Berners-Lee,\
    \ \"Hypertext\n              Transfer Protocol -- HTTP/1.1\", RFC 2616, June 1999.\n\
    \   [RFC2617]  Franks, J., Hallam-Baker, P., Hostetler, J., Lawrence, S.,\n  \
    \            Leach, P., Luotonen, A., and L. Stewart, \"HTTP\n              Authentication:\
    \ Basic and Digest Access Authentication\",\n              RFC 2617, June 1999.\n\
    \   [RFC2818]  Rescorla, E., \"HTTP Over TLS\", RFC 2818, May 2000.\n   [RFC3447]\
    \  Jonsson, J. and B. Kaliski, \"Public-Key Cryptography\n              Standards\
    \ (PKCS) #1: RSA Cryptography Specifications\n              Version 2.1\", RFC\
    \ 3447, February 2003.\n   [RFC3629]  Yergeau, F., \"UTF-8, a transformation format\
    \ of ISO\n              10646\", STD 63, RFC 3629, November 2003.\n   [RFC3986]\
    \  Berners-Lee, T., Fielding, R., and L. Masinter, \"Uniform\n              Resource\
    \ Identifier (URI): Generic Syntax\", STD 66,\n              RFC 3986, January\
    \ 2005.\n   [W3C.REC-html40-19980424]\n              Hors, A., Raggett, D., and\
    \ I. Jacobs, \"HTML 4.0\n              Specification\", World Wide Web Consortium\n\
    \              Recommendation REC-html40-19980424, April 1998,\n             \
    \ <http://www.w3.org/TR/1998/REC-html40-19980424>.\n"
- title: 6.2.  Informative References
  contents:
  - "6.2.  Informative References\n   [NIST_SHA-1Comments]\n              Burr, W.,\
    \ \"NIST Comments on Cryptanalytic Attacks on\n              SHA-1\",\n      \
    \        <http://csrc.nist.gov/groups/ST/hash/statement.html>.\n   [OAuthCore1.0_RevisionA]\n\
    \              OAuth Community, \"OAuth Core 1.0 Revision A\",\n             \
    \ <http://oauth.net/core/1.0a>.\n"
- title: Author's Address
  contents:
  - "Author's Address\n   Eran Hammer-Lahav (editor)\n   EMail: eran@hueniverse.com\n\
    \   URI:   http://hueniverse.com\n"
