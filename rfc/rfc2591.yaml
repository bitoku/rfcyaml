- title: __initial_text__
  contents:
  - "                   Definitions of Managed Objects for\n                    Scheduling\
    \ Management Operations\n"
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (1999).  All Rights Reserved.\n"
- title: Abstract
  contents:
  - "Abstract\n   This memo defines a portion of the Management Information Base (MIB)\n\
    \   for use with network management protocols in the Internet community.\n   In\
    \ particular, it describes a set of managed objects that are used to\n   schedule\
    \ management operations periodically or at specified dates and\n   times.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................2\n\
    \   2. The SNMP Management Framework....................................2\n  \
    \ 3. Overview ........................................................3\n   3.1\
    \ Periodic Schedules .............................................3\n   3.2 Calendar\
    \ Schedules .............................................4\n   3.3 One-shot Schedules\
    \ .............................................4\n   3.4 Time Transitions ...............................................4\n\
    \   3.5 Actions ........................................................5\n  \
    \ 4. Definitions .....................................................5\n   5.\
    \ Usage Examples .................................................18\n   5.1 Starting\
    \ a script to ping devices every 20 minutes ............18\n   5.2 Starting a\
    \ script at the next Friday the 13th .................18\n   5.3 Turning an interface\
    \ off during weekends ......................19\n   6. Security Considerations\
    \ ........................................21\n   7. Intellectual Property ..........................................22\n\
    \   8. Acknowledgments ................................................22\n  \
    \ 9. References .....................................................22\n   10.\
    \ Editors' Addresses ............................................24\n   11. Full\
    \ Copyright Statement ......................................25\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   This memo defines a portion of the Management Information\
    \ Base (MIB)\n   for use with network management protocols in the Internet community.\n\
    \   In particular, it describes a set of managed objects that are used to\n  \
    \ schedule management operations periodically or at specified dates and\n   times.\n\
    \   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\"\
    ,\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in\
    \ this\n   document are to be interpreted as described in RFC 2119 [19].\n"
- title: 2.  The SNMP Management Framework
  contents:
  - "2.  The SNMP Management Framework\n   The SNMP Management Framework presently\
    \ consists of five major\n   components:\n   o   An overall architecture, described\
    \ in RFC 2271 [1].\n   o   Mechanisms for describing and naming objects and events\
    \ for the\n       purpose of management. The first version of this Structure of\n\
    \       Management Information (SMI) is called SMIv1 and described in STD\n  \
    \     16, RFC 1155 [2], STD 16, RFC 1212 [3] and RFC 1215 [4]. The\n       second\
    \ version, called SMIv2, is described in STD 58, RFC 2578\n       [5], RFC 2579\
    \ [6] and RFC 2580 [7].\n   o   Message protocols for transferring management\
    \ information. The\n       first version of the SNMP message protocol is called\
    \ SNMPv1 and\n       described in RFC 1157 [8]. A second version of the SNMP message\n\
    \       protocol, which is not an Internet standards track protocol, is\n    \
    \   called SNMPv2c and described in RFC 1901 [9] and RFC 1906 [10].\n       The\
    \ third version of the message protocol is called SNMPv3 and\n       described\
    \ in RFC 1906 [10], RFC 2272 [11] and RFC 2274 [12].\n   o   Protocol operations\
    \ for accessing management information. The\n       first set of protocol operations\
    \ and associated PDU formats is\n       described in STD 15, RFC 1157 [8]. A second\
    \ set of protocol\n       operations and associated PDU formats is described in\
    \ RFC 1905\n       [13].\n   o   A set of fundamental applications described in\
    \ RFC 2273 [14] and\n       the view-based access control mechanism described\
    \ in RFC 2275\n       [15].\n   Managed objects are accessed via a virtual information\
    \ store, termed\n   the Management Information Base or MIB.  Objects in the MIB\
    \ are\n   defined using the mechanisms defined in the SMI.\n   This memo specifies\
    \ a MIB module that is compliant to the SMIv2. A\n   MIB conforming to the SMIv1\
    \ can be produced through the appropriate\n   translations. The resulting translated\
    \ MIB must be semantically\n   equivalent, except where objects or events are\
    \ omitted because no\n   translation is possible (use of Counter64). Some machine\
    \ readable\n   information in SMIv2 will be converted into textual descriptions\
    \ in\n   SMIv1 during the translation process. However, this loss of machine\n\
    \   readable information is not considered to change the semantics of the\n  \
    \ MIB.\n"
- title: 3.  Overview
  contents:
  - "3.  Overview\n   The MIB defined in this memo provides scheduling of actions\n\
    \   periodically or at specified dates and times. The actions can be used\n  \
    \ to realize on-duty / off-duty schedules or to trigger management\n   functions\
    \ in a distributed management application.\n   Schedules can be enabled or disabled\
    \ by modifying a control object.\n   This allows pre-configured schedules which\
    \ are activated or de-\n   activated by some other management functions.\n   The\
    \ term `scheduler' is used throughout this memo to refer to the\n   entity which\
    \ implements the scheduling MIB and which invokes the\n   actions at the specified\
    \ points in time.\n"
- title: 3.1.  Periodic Schedules
  contents:
  - "3.1.  Periodic Schedules\n   Periodic schedules are based on fixed time periods\
    \ between the\n   initiation of scheduled actions. Periodic schedules are defined\
    \ by\n   specifying the number of seconds between two initiations. The time\n\
    \   needed to complete the action is usually not known by the scheduler\n   and\
    \ does therefore not influence the next scheduling point.\n   Implementations\
    \ must guarantee that action invocations will not occur\n   before their next\
    \ scheduled time.  However, implementations may be\n   forced to delay invocations\
    \ in the face of local constraints (e.g., a\n   heavy load on higher-priority\
    \ tasks).  An accumulation of such delays\n   would result in a drift of the scheduling\
    \ interval with respect to\n   time, and should be avoided.\n   Scheduled actions\
    \ collecting statistical data should retrieve time\n   stamps from the data source\
    \ and not rely on the accuracy of the\n   periodic scheduler in order to obtain\
    \ accurate statistics.\n"
- title: 3.2.  Calendar Schedules
  contents:
  - "3.2.  Calendar Schedules\n   Calendar schedules trigger scheduled actions at\
    \ specified days of the\n   week and days of the month. Calendar schedules are\
    \ therefore aware of\n   the notion of months, days, weekdays, hours and minutes.\n\
    \   It is possible to specify multiple values for each calendar item.\n   This\
    \ provides a mechanism for defining complex schedules.  For\n   example, a schedule\
    \ could be defined which triggers an action every\n   15 minutes on a given weekday.\n\
    \   Months, days and weekdays are specified using the objects schedMonth,\n  \
    \ schedDay and schedWeekDay of type BITS. Setting multiple bits to one\n   in\
    \ these objects causes an OR operation. For example, setting the\n   bits monday(1)\
    \ and friday(5) in schedWeekDay restricts the schedule\n   to Mondays and Fridays.\n\
    \   The bit fields for schedMonth, schedDay and schedWeekDay are combined\n  \
    \ using an AND operation. For example, setting the bits june(5) and\n   july(6)\
    \ in schedMonth and combining it with the bits monday(1) and\n   friday(5) set\
    \ in schedWeekDay will result in a schedule which is\n   restricted to every Monday\
    \ and Friday in the months June and July.\n   Wildcarding of calendar items is\
    \ achieved by setting all bits to one.\n   It is possible to define calendar schedules\
    \ that will never trigger\n   an action. For example, one can define a calendar\
    \ schedule which\n   should trigger an action on February 31st. Schedules like\
    \ this will\n   simply be ignored by the scheduler.\n   Finally, calendar schedules\
    \ are always expressed in local time. A\n   scalar, schedLocalTime is provided\
    \ so that a manager can retrieve the\n   notion of local time and the offset to\
    \ GMT time.\n"
- title: 3.3.  One-shot Schedules
  contents:
  - "3.3.  One-shot Schedules\n   One-shot Schedules are similar to calendar schedules.\
    \ The difference\n   between a calendar schedule and a one-shot schedule is that\
    \ a one-\n   shot schedule will automatically disable itself once an action has\n\
    \   been invoked.\n"
- title: 3.4.  Time Transitions
  contents:
  - "3.4.  Time Transitions\n   When a system's notion of time is changed for some\
    \ reason,\n   implementations of the Schedule MIB must schedule actions\n   differently.\
    \  One example of a change to a system's notion of time is\n   when a daylight\
    \ savings time transition occurs.\n   There are two possible situations when a\
    \ time transition occurs.\n   First, time may be set backwards, in which case\
    \ particular times will\n   appear to occur twice within the same day.  These\
    \ are called\n   'ambiguous times'.  Second, time may be set forwards, in which\
    \ case\n   particular times will appear to not occur within a day.  This are\n\
    \   called 'nonexistent times'.\n   When an action is configured in the Schedule\
    \ MIB to occur at an\n   ambiguous time during a time transition, the action SHALL\
    \ only be\n   invoked at the first occurence of the ambiguous time.  For example,\n\
    \   if an action is scheduled to occur at 2:00 am, and a time transition\n   occurs\
    \ at 3:00 am which sets the clock back to 2:00 am, the action\n   SHALL only be\
    \ invoked at the first occurence of 2:00 am.\n   When an action is configured\
    \ in the Schedule MIB to occur at a\n   nonexistent time, the action SHOULD be\
    \ invoked immediately upon a\n   time transition. If multiple actions are invoked\
    \ in this way, they\n   SHALL be invoked in the order in which they normally would\
    \ be invoked\n   had the time transition not occured. For example, if an action\
    \ (a) is\n   scheduled at 2:05 am and another action (b) at 2:10 am, then both\n\
    \   actions SHOULD be invoked at 3:00 am in the order (a),(b) if the time\n  \
    \ jumps forward from 2:00 am to 3:00 am.\n"
- title: 3.5.  Actions
  contents:
  - "3.5.  Actions\n   Scheduled actions are modeled by SNMP set operations on local\
    \ MIB\n   variables. Scheduled actions described in this MIB are further\n   restricted\
    \ to objects of type INTEGER. This restriction does not\n   limit the usefulness\
    \ of the MIB.  Simple schedules such as on-duty /\n   off-duty schedules for resources\
    \ that have a status MIB object (e.g.\n   ifAdminStatus) are possible.\n   More\
    \ complex actions can be realized by triggering a management\n   script which\
    \ is responsible for performing complex state transitions.\n   A management script\
    \ can also be used to perform SNMP set operations\n   on remote SNMP engines.\n"
- title: 4.  Definitions
  contents:
  - "4.  Definitions\n    DISMAN-SCHEDULE-MIB DEFINITIONS ::= BEGIN\n    IMPORTS\n\
    \        MODULE-IDENTITY, OBJECT-TYPE, NOTIFICATION-TYPE,\n        Integer32,\
    \ Unsigned32, Counter32, mib-2\n            FROM SNMPv2-SMI\n        TEXTUAL-CONVENTION,\n\
    \        DateAndTime, RowStatus, StorageType, VariablePointer\n            FROM\
    \ SNMPv2-TC\n        MODULE-COMPLIANCE, OBJECT-GROUP, NOTIFICATION-GROUP\n   \
    \         FROM SNMPv2-CONF\n        SnmpAdminString\n            FROM SNMP-FRAMEWORK-MIB;\n\
    \    schedMIB MODULE-IDENTITY\n        LAST-UPDATED \"9811171800Z\"\n        ORGANIZATION\
    \ \"IETF Distributed Management Working Group\"\n        CONTACT-INFO\n      \
    \      \"David B. Levi\n             Nortel Networks\n             4401 Great\
    \ America Parkway\n             Santa Clara, CA 95052-8185\n             U.S.A.\n\
    \             Tel: +1 423 686 0432\n             E-mail: dlevi@nortelnetworks.com\n\
    \             Juergen Schoenwaelder\n             TU Braunschweig\n          \
    \   Bueltenweg 74/75\n             38106 Braunschweig\n             Germany\n\
    \             Tel: +49 531 391-3283\n             E-mail: schoenw@ibr.cs.tu-bs.de\"\
    \n        DESCRIPTION\n            \"This MIB module defines a MIB which provides\
    \ mechanisms\n             to schedule SNMP set operations periodically or at\n\
    \             specific points in time.\"\n        ::= { mib-2 63 }\n    --\n \
    \   -- The various groups defined within this MIB definition:\n    --\n    schedObjects\
    \       OBJECT IDENTIFIER ::= { schedMIB 1 }\n    schedNotifications OBJECT IDENTIFIER\
    \ ::= { schedMIB 2 }\n    schedConformance   OBJECT IDENTIFIER ::= { schedMIB\
    \ 3 }\n    --\n    -- Textual Conventions:\n    --\n    SnmpPduErrorStatus ::=\
    \ TEXTUAL-CONVENTION\n        STATUS       current\n        DESCRIPTION\n    \
    \        \"This TC enumerates the SNMPv1 and SNMPv2 PDU error status\n       \
    \      codes as defined in RFC 1157 and RFC 1905. It also adds a\n           \
    \  pseudo error status code `noResponse' which indicates a\n             timeout\
    \ condition.\"\n        SYNTAX      INTEGER {\n                        noResponse(-1),\n\
    \                        noError(0),\n                        tooBig(1),\n   \
    \                     noSuchName(2),\n                        badValue(3),\n \
    \                       readOnly(4),\n                        genErr(5),\n   \
    \                     noAccess(6),\n                        wrongType(7),\n  \
    \                      wrongLength(8),\n                        wrongEncoding(9),\n\
    \                        wrongValue(10),\n                        noCreation(11),\n\
    \                        inconsistentValue(12),\n                        resourceUnavailable(13),\n\
    \                        commitFailed(14),\n                        undoFailed(15),\n\
    \                        authorizationError(16),\n                        notWritable(17),\n\
    \                        inconsistentName(18)\n                    }\n    --\n\
    \    -- Some scalars which provide information about the local time\n    -- zone.\n\
    \    --\n    schedLocalTime OBJECT-TYPE\n        SYNTAX      DateAndTime (SIZE\
    \ (11))\n        MAX-ACCESS  read-only\n        STATUS      current\n        DESCRIPTION\n\
    \            \"The local time used by the scheduler. Schedules which\n       \
    \      refer to calendar time will use the local time indicated\n            \
    \ by this object. An implementation MUST return all 11 bytes\n             of\
    \ the DateAndTime textual-convention so that a manager\n             may retrieve\
    \ the offset from GMT time.\"\n        ::= { schedObjects 1 }\n    --\n    --\
    \ The schedule table which controls the scheduler.\n    --\n    schedTable OBJECT-TYPE\n\
    \        SYNTAX      SEQUENCE OF SchedEntry\n        MAX-ACCESS  not-accessible\n\
    \        STATUS      current\n        DESCRIPTION\n            \"This table defines\
    \ scheduled actions triggered by\n             SNMP set operations.\"\n      \
    \  ::= { schedObjects 2 }\n    schedEntry OBJECT-TYPE\n        SYNTAX      SchedEntry\n\
    \        MAX-ACCESS  not-accessible\n        STATUS      current\n        DESCRIPTION\n\
    \            \"An entry describing a particular scheduled action.\"\n        INDEX\
    \ { schedOwner, schedName }\n        ::= { schedTable 1 }\n    SchedEntry ::=\
    \ SEQUENCE {\n        schedOwner          SnmpAdminString,\n        schedName\
    \           SnmpAdminString,\n        schedDescr          SnmpAdminString,\n \
    \       schedInterval       Unsigned32,\n        schedWeekDay        BITS,\n \
    \       schedMonth          BITS,\n        schedDay            BITS,\n       \
    \ schedHour           BITS,\n        schedMinute         BITS,\n        schedContextName\
    \    SnmpAdminString,\n        schedVariable       VariablePointer,\n        schedValue\
    \          Integer32,\n        schedType           INTEGER,\n        schedAdminStatus\
    \    INTEGER,\n        schedOperStatus     INTEGER,\n        schedFailures   \
    \    Counter32,\n        schedLastFailure    SnmpPduErrorStatus,\n        schedLastFailed\
    \     DateAndTime,\n        schedStorageType    StorageType,\n        schedRowStatus\
    \      RowStatus\n    }\n    schedOwner OBJECT-TYPE\n        SYNTAX      SnmpAdminString\
    \ (SIZE(0..32))\n        MAX-ACCESS  not-accessible\n        STATUS      current\n\
    \        DESCRIPTION\n            \"The owner of this scheduling entry. The exact\
    \ semantics of\n             this string are subject to the security policy defined\
    \ by\n             the security administrator.\"\n        ::= { schedEntry 1 }\n\
    \    schedName OBJECT-TYPE\n        SYNTAX      SnmpAdminString (SIZE(1..32))\n\
    \        MAX-ACCESS  not-accessible\n        STATUS      current\n        DESCRIPTION\n\
    \            \"The locally-unique, administratively assigned name for this\n \
    \            scheduling entry. This object allows a schedOwner to have\n     \
    \        multiple entries in the schedTable.\"\n        ::= { schedEntry 2 }\n\
    \    schedDescr OBJECT-TYPE\n        SYNTAX      SnmpAdminString\n        MAX-ACCESS\
    \  read-create\n        STATUS      current\n        DESCRIPTION\n           \
    \ \"The human readable description of the purpose of this\n             scheduling\
    \ entry.\"\n        DEFVAL { ''H }\n        ::= { schedEntry 3 }\n    schedInterval\
    \ OBJECT-TYPE\n        SYNTAX      Unsigned32\n        UNITS       \"seconds\"\
    \n        MAX-ACCESS  read-create\n        STATUS      current\n        DESCRIPTION\n\
    \            \"The number of seconds between two action invocations of\n     \
    \        a periodic scheduler. Implementations must guarantee\n             that\
    \ action invocations will not occur before at least\n             schedInterval\
    \ seconds have passed.\n             The scheduler must ignore all periodic schedules\
    \ that\n             have a schedInterval value of 0. A periodic schedule\n  \
    \           with a scheduling interval of 0 seconds will therefore\n         \
    \    never invoke an action.\n             Implementations may be forced to delay\
    \ invocations in the\n             face of local constraints. A scheduled management\
    \ function\n             should therefore not rely on the accuracy provided by\
    \ the\n             scheduler implementation.\"\n        DEFVAL { 0 }\n      \
    \  ::= { schedEntry 4 }\n    schedWeekDay OBJECT-TYPE\n        SYNTAX      BITS\
    \ {\n                        sunday(0),\n                        monday(1),\n\
    \                        tuesday(2),\n                        wednesday(3),\n\
    \                        thursday(4),\n                        friday(5),\n  \
    \                      saturday(6)\n                    }\n        MAX-ACCESS\
    \  read-create\n        STATUS      current\n        DESCRIPTION\n           \
    \ \"The set of weekdays on which the scheduled action should\n             take\
    \ place. Setting multiple bits will include several\n             weekdays in\
    \ the set of possible weekdays for this schedule.\n             Setting all bits\
    \ will cause the scheduler to ignore the\n             weekday.\"\n        DEFVAL\
    \ { {} }\n        ::= { schedEntry 5 }\n    schedMonth OBJECT-TYPE\n        SYNTAX\
    \      BITS {\n                        january(0),\n                        february(1),\n\
    \                        march(2),\n                        april(3),\n      \
    \                  may(4),\n                        june(5),\n               \
    \         july(6),\n                        august(7),\n                     \
    \   september(8),\n                        october(9),\n                     \
    \   november(10),\n                        december(11)\n                    }\n\
    \        MAX-ACCESS  read-create\n        STATUS      current\n        DESCRIPTION\n\
    \            \"The set of months during which the scheduled action should\n  \
    \           take place. Setting multiple bits will include several\n         \
    \    months in the set of possible months for this schedule.\n             Setting\
    \ all bits will cause the scheduler to ignore the\n             month.\"\n   \
    \     DEFVAL { {} }\n        ::= { schedEntry 6 }\n    schedDay OBJECT-TYPE\n\
    \        SYNTAX      BITS {\n                        d1(0),   d2(1),   d3(2),\
    \   d4(3),   d5(4),\n                        d6(5),   d7(6),   d8(7),   d9(8),\
    \   d10(9),\n                        d11(10), d12(11), d13(12), d14(13), d15(14),\n\
    \                        d16(15), d17(16), d18(17), d19(18), d20(19),\n      \
    \                  d21(20), d22(21), d23(22), d24(23), d25(24),\n            \
    \            d26(25), d27(26), d28(27), d29(28), d30(29),\n                  \
    \      d31(30),\n                        r1(31),  r2(32),  r3(33),  r4(34),  r5(35),\n\
    \                        r6(36),  r7(37),  r8(38),  r9(39),  r10(40),\n      \
    \                  r11(41), r12(42), r13(43), r14(44), r15(45),\n            \
    \            r16(46), r17(47), r18(48), r19(49), r20(50),\n                  \
    \      r21(51), r22(52), r23(53), r24(54), r25(55),\n                        r26(56),\
    \ r27(57), r28(58), r29(59), r30(60),\n                        r31(61)\n     \
    \               }\n        MAX-ACCESS  read-create\n        STATUS      current\n\
    \        DESCRIPTION\n            \"The set of days in a month on which a scheduled\
    \ action\n             should take place. There are two sets of bits one can\n\
    \             use to define the day within a month:\n             Enumerations\
    \ starting with the letter 'd' indicate a\n             day in a month relative\
    \ to the first day of a month.\n             The first day of the month can therefore\
    \ be specified\n             by setting the bit d1(0) and d31(30) means the last\n\
    \             day of a month with 31 days.\n             Enumerations starting\
    \ with the letter 'r' indicate a\n             day in a month in reverse order,\
    \ relative to the last\n             day of a month. The last day in the month\
    \ can therefore\n             be specified by setting the bit r1(31) and r31(61)\
    \ means\n             the first day of a month with 31 days.\n             Setting\
    \ multiple bits will include several days in the set\n             of possible\
    \ days for this schedule. Setting all bits will\n             cause the scheduler\
    \ to ignore the day within a month.\n             Setting all bits starting with\
    \ the letter 'd' or the\n             letter 'r' will also cause the scheduler\
    \ to ignore the\n             day within a month.\"\n        DEFVAL { {} }\n \
    \       ::= { schedEntry 7 }\n    schedHour OBJECT-TYPE\n        SYNTAX      BITS\
    \ {\n                        h0(0),   h1(1),   h2(2),   h3(3),   h4(4),\n    \
    \                    h5(5),   h6(6),   h7(7),   h8(8),   h9(9),\n            \
    \            h10(10), h11(11), h12(12), h13(13), h14(14),\n                  \
    \      h15(15), h16(16), h17(17), h18(18), h19(19),\n                        h20(20),\
    \ h21(21), h22(22), h23(23)\n                    }\n        MAX-ACCESS  read-create\n\
    \        STATUS      current\n        DESCRIPTION\n            \"The set of hours\
    \ within a day during which the scheduled\n             action should take place.\"\
    \n        DEFVAL { {} }\n        ::= { schedEntry 8 }\n    schedMinute OBJECT-TYPE\n\
    \        SYNTAX      BITS {\n                        m0(0),   m1(1),   m2(2),\
    \   m3(3),   m4(4),\n                        m5(5),   m6(6),   m7(7),   m8(8),\
    \   m9(9),\n                        m10(10), m11(11), m12(12), m13(13), m14(14),\n\
    \                        m15(15), m16(16), m17(17), m18(18), m19(19),\n      \
    \                  m20(20), m21(21), m22(22), m23(23), m24(24),\n            \
    \            m25(25), m26(26), m27(27), m28(28), m29(29),\n                  \
    \      m30(30), m31(31), m32(32), m33(33), m34(34),\n                        m35(35),\
    \ m36(36), m37(37), m38(38), m39(39),\n                        m40(40), m41(41),\
    \ m42(42), m43(43), m44(44),\n                        m45(45), m46(46), m47(47),\
    \ m48(48), m49(49),\n                        m50(50), m51(51), m52(52), m53(53),\
    \ m54(54),\n                        m55(55), m56(56), m57(57), m58(58), m59(59)\n\
    \                    }\n        MAX-ACCESS  read-create\n        STATUS      current\n\
    \        DESCRIPTION\n            \"The set of minutes within an hour when the\
    \ scheduled action\n             should take place.\"\n        DEFVAL { {} }\n\
    \        ::= { schedEntry 9 }\n    schedContextName OBJECT-TYPE\n        SYNTAX\
    \      SnmpAdminString (SIZE(0..32))\n        MAX-ACCESS  read-create\n      \
    \  STATUS      current\n        DESCRIPTION\n            \"The context which contains\
    \ the local MIB variable pointed\n             to by schedVariable.\"\n      \
    \  ::= { schedEntry 10 }\n    schedVariable OBJECT-TYPE\n        SYNTAX      VariablePointer\n\
    \        MAX-ACCESS  read-create\n        STATUS      current\n        DESCRIPTION\n\
    \            \"An object identifier pointing to a local MIB variable\n       \
    \      which resolves to an ASN.1 primitive type of INTEGER.\"\n        ::= {\
    \ schedEntry 11 }\n    schedValue OBJECT-TYPE\n        SYNTAX      Integer32\n\
    \        MAX-ACCESS  read-create\n        STATUS      current\n        DESCRIPTION\n\
    \            \"The value which is written to the MIB object pointed to by\n  \
    \           schedVariable when the scheduler invokes an action. The\n        \
    \     implementation shall enforce the use of access control\n             rules\
    \ when performing the set operation on schedVariable.\n             This is accomplished\
    \ by calling the isAccessAllowed abstract\n             service interface as defined\
    \ in RFC 2271.\"\n        ::= { schedEntry 12 }\n    schedType OBJECT-TYPE\n \
    \       SYNTAX      INTEGER {\n                        periodic(1),\n        \
    \                calendar(2),\n                        oneshot(3)\n          \
    \          }\n        MAX-ACCESS  read-create\n        STATUS      current\n \
    \       DESCRIPTION\n            \"The type of this schedule. The value periodic(1)\
    \ indicates\n             that this entry specifies a periodic schedule. A periodic\n\
    \             schedule is defined by the value of schedInterval. The\n       \
    \      values of schedWeekDay, schedMonth, schedDay, schedHour\n             and\
    \ schedMinute are ignored.\n             The value calendar(2) indicates that\
    \ this entry describes a\n             calendar schedule. A calendar schedule\
    \ is defined by the\n             values of schedWeekDay, schedMonth, schedDay,\
    \ schedHour and\n             schedMinute. The value of schedInterval is ignored.\
    \ A\n             calendar schedule will trigger on all local times that\n   \
    \          satisfy the bits set in schedWeekDay, schedMonth, schedDay,\n     \
    \        schedHour and schedMinute.\n             The value oneshot(3) indicates\
    \ that this entry describes a\n             one-shot schedule. A one-shot schedule\
    \ is similar to a\n             calendar schedule with the additional feature\
    \ that it\n             disables itself by changing in the `finished'\n      \
    \       schedOperStatus once the schedule triggers an action.\n             Changing\
    \ a schedule's type is equivalent to deleting the\n             old-type schedule\
    \ and creating a new-type one.\"\n        DEFVAL { periodic }\n        ::= { schedEntry\
    \ 13 }\n    schedAdminStatus OBJECT-TYPE\n        SYNTAX      INTEGER {\n    \
    \                    enabled(1),\n                        disabled(2)\n      \
    \              }\n        MAX-ACCESS  read-create\n        STATUS      current\n\
    \        DESCRIPTION\n            \"The desired state of the schedule.\"\n   \
    \     DEFVAL { disabled }\n        ::= { schedEntry 14 }\n    schedOperStatus\
    \ OBJECT-TYPE\n        SYNTAX      INTEGER {\n                        enabled(1),\n\
    \                        disabled(2),\n                        finished(3)\n \
    \                   }\n        MAX-ACCESS  read-only\n        STATUS      current\n\
    \        DESCRIPTION\n            \"The current operational state of this schedule.\
    \ The state\n             enabled(1) indicates this entry is active and that the\n\
    \             scheduler will invoke actions at appropriate times. The\n      \
    \       disabled(2) state indicates that this entry is currently\n           \
    \  inactive and ignored by the scheduler. The finished(3)\n             state\
    \ indicates that the schedule has ended. Schedules\n             in the finished(3)\
    \ state are ignored by the scheduler.\n             A one-shot schedule enters\
    \ the finished(3) state when it\n             deactivates itself.\"\n        ::=\
    \ { schedEntry 15 }\n    schedFailures OBJECT-TYPE\n        SYNTAX      Counter32\n\
    \        MAX-ACCESS  read-only\n        STATUS      current\n        DESCRIPTION\n\
    \            \"This variable counts the number of failures while invoking\n  \
    \           the scheduled action.\"\n        ::= { schedEntry 16 }\n    schedLastFailure\
    \ OBJECT-TYPE\n        SYNTAX      SnmpPduErrorStatus\n        MAX-ACCESS  read-only\n\
    \        STATUS      current\n        DESCRIPTION\n            \"The most recent\
    \ error that occured during the invocation of\n             a scheduled action.\
    \ The value noError(0) is returned\n             if no errors have occurred yet.\"\
    \n        DEFVAL { noError }\n        ::= { schedEntry 17 }\n    schedLastFailed\
    \ OBJECT-TYPE\n        SYNTAX      DateAndTime\n        MAX-ACCESS  read-only\n\
    \        STATUS      current\n        DESCRIPTION\n            \"The date and\
    \ time when the most recent failure occured. The\n             value '0000000000000000'H\
    \ is returned if no failure occured\n             since the last re-initialization\
    \ of the scheduler.\"\n        DEFVAL { '0000000000000000'H }\n        ::= { schedEntry\
    \ 18 }\n    schedStorageType OBJECT-TYPE\n        SYNTAX      StorageType\n  \
    \      MAX-ACCESS  read-create\n        STATUS      current\n        DESCRIPTION\n\
    \            \"This object defines whether this scheduled action is kept\n   \
    \          in volatile storage and lost upon reboot or if this row is\n      \
    \       backed up by non-volatile or permanent storage.\n             Conceptual\
    \ rows having the value `permanent' must allow\n             write access to the\
    \ columnar objects schedDescr,\n             schedInterval, schedContextName,\
    \ schedVariable, schedValue,\n             and schedAdminStatus. If an implementation\
    \ supports the\n             schedCalendarGroup, write access must be also allowed\
    \ to\n             the columnar objects schedWeekDay, schedMonth, schedDay,\n\
    \             schedHour, schedMinute.\"\n        DEFVAL { volatile }\n       \
    \ ::= { schedEntry 19 }\n    schedRowStatus OBJECT-TYPE\n        SYNTAX      RowStatus\n\
    \        MAX-ACCESS  read-create\n        STATUS      current\n        DESCRIPTION\n\
    \            \"The status of this scheduled action. A control that allows\n  \
    \           entries to be added and removed from this table.\n             The\
    \ miminum number of objects that need to be set during\n             row creation\
    \ before a row can be set to `active' are\n             schedContextName, schedVariable\
    \ and schedValue.\"\n        ::= { schedEntry 20 }\n    --\n    -- Notifications\
    \ that are emitted to indicate failures. The\n    -- definition of schedTraps\
    \ makes notification registrations\n    -- reversible (see STD 58, RFC 2578).\n\
    \    --\n    schedTraps OBJECT IDENTIFIER ::= { schedNotifications 0 }\n    schedActionFailure\
    \ NOTIFICATION-TYPE\n        OBJECTS     { schedLastFailure, schedLastFailed }\n\
    \        STATUS      current\n        DESCRIPTION\n            \"This notification\
    \ is generated whenever the invocation of a\n             scheduled action fails.\"\
    \n        ::= { schedTraps 1 }\n    -- conformance information\n    schedCompliances\
    \ OBJECT IDENTIFIER ::= { schedConformance 1 }\n    schedGroups      OBJECT IDENTIFIER\
    \ ::= { schedConformance 2 }\n    -- compliance statements\n    schedCompliance\
    \ MODULE-COMPLIANCE\n        STATUS      current\n        DESCRIPTION\n      \
    \      \"The compliance statement for SNMP entities which implement\n        \
    \     the scheduling MIB.\"\n        MODULE      -- this module\n        MANDATORY-GROUPS\
    \ {\n               schedGroup, schedNotificationsGroup\n        }\n        GROUP\
    \  schedCalendarGroup\n        DESCRIPTION\n            \"The schedCalendarGroup\
    \ is mandatory only for those\n             implementations that support calendar\
    \ based schedules.\"\n        OBJECT schedType\n        DESCRIPTION\n        \
    \    \"The values calendar(2) or oneshot(3) are not valid for\n             implementations\
    \ that do not implement the\n             schedCalendarGroup. Such an implementation\
    \ must return\n             inconsistentValue error responses for attempts to\
    \ set\n             schedAdminStatus to calendar(2) or oneshot(3).\"\n       \
    \ ::= { schedCompliances 1 }\n    schedGroup OBJECT-GROUP\n        OBJECTS {\n\
    \            schedDescr,\n            schedInterval,\n            schedContextName,\n\
    \            schedVariable,\n            schedValue,\n            schedType,\n\
    \            schedAdminStatus,\n            schedOperStatus,\n            schedFailures,\n\
    \            schedLastFailure,\n            schedLastFailed,\n            schedStorageType,\n\
    \            schedRowStatus\n        }\n        STATUS      current\n        DESCRIPTION\n\
    \            \"A collection of objects providing scheduling capabilities.\"\n\
    \        ::= { schedGroups 1 }\n    schedCalendarGroup OBJECT-GROUP\n        OBJECTS\
    \ {\n            schedLocalTime,\n            schedWeekDay,\n            schedMonth,\n\
    \            schedDay,\n            schedHour,\n            schedMinute\n    \
    \    }\n        STATUS      current\n        DESCRIPTION\n            \"A collection\
    \ of objects providing calendar based schedules.\"\n        ::= { schedGroups\
    \ 2 }\n    schedNotificationsGroup NOTIFICATION-GROUP\n        NOTIFICATIONS {\n\
    \            schedActionFailure\n        }\n        STATUS      current\n    \
    \    DESCRIPTION\n            \"The notifications emitted by the scheduler.\"\n\
    \        ::= { schedGroups 3 }\n    END\n"
- title: 5.  Usage Examples
  contents:
  - "5.  Usage Examples\n   This section presents some examples how the scheduling\
    \ MIB can be\n   used to schedule scripts with the Script MIB [17] or to realize\
    \ on-\n   duty/off-duty schedules by modifying status objects of other MIB\n \
    \  modules.\n"
- title: 5.1.  Starting a script to ping devices every 20 minutes
  contents:
  - "5.1.  Starting a script to ping devices every 20 minutes\n   It is assumed that\
    \ the schedule entry is owned by schedOwner = \"joe\"\n   and its name is schedName\
    \ = \"ping\". The instance identifier for the\n   scheduling entry is therefore\
    \ 3.106.111.101.4.112.105.110.103.\n   It is further assumed that the smLaunchTable\
    \ entry is owned by\n   smLaunchOwner = \"joe\" and its name is smLaunchName =\
    \ \"ping-devs\". The\n   complete object identifier for the smLaunchStart object\
    \ is therefore\n   smLaunchStart.3.106.111.101.9.112.105.110.103.45.100.101.118.115.\
    \ The\n   script lives in the context identified by the string \"engine1\".\n\
    \   The configuration of the scheduler entry which launches the script\n   every\
    \ 20 minutes would look as follows:\n      schedInterval.3.106.111.101.4.112.105.110.103\
    \ = 1200\n      schedValue.3.106.111.101.4.112.105.110.103 = 0\n      schedContextName.3.106.111.101.4.112.105.110.103\
    \ = \"engine1\"\n      schedVariable.3.106.111.101.4.112.105.110.103 =\n     \
    \   smLaunchStart.3.106.111.101.9.112.105.110.103.45.100.101.118.115\n      schedType.3.106.111.101.4.112.105.110.103\
    \ = periodic(1)\n      schedAdminStatus.3.106.111.101.4.112.105.110.103 = enabled(1)\n\
    \      schedStorageType.3.106.111.101.4.112.105.110.103 = nonVolatile(3)\n   \
    \   schedRowStatus.3.106.111.101.4.112.105.110.103 = active(1)\n   All the remaining\
    \ columns in the schedTable represent status\n   information and are not shown\
    \ here.\n"
- title: 5.2.  Starting a script at the next Friday the 13th
  contents:
  - "5.2.  Starting a script at the next Friday the 13th\n   It is assumed that the\
    \ schedule entry is owned by schedOwner = \"joe\"\n   and its name is schedName\
    \ = \"13th\". The instance identifier for the\n   scheduling entry is therefore\
    \ 3.106.111.101.4.49.51.116.104.\n   It is further assumed that the smLaunchTable\
    \ entry is owned by\n   smLaunchOwner = \"joe\" and its name is smLaunchName =\
    \ \"ghost\". The\n   complete object identifier for the smLaunchStart object is\
    \ therefore\n   smLaunchStart.3.106.111.101.5.103.104.111.115.116. The script\
    \ lives\n   in the context identified by the string \"engine1\".\n   The configuration\
    \ of the scheduler entry which launches the script on\n   every Friday 13th at\
    \ midnight would look as follows:\n      schedWeekDay.3.106.111.101.4.49.51.116.104\
    \ = { friday }\n      schedMonth.3.106.111.101.4.49.51.116.104 = {\n         \
    \   january, february, march, april, may, june,\n            july, august, september,\
    \ october, november, december\n      }\n      schedDay.3.106.111.101.4.49.51.116.104\
    \ = { d13 }\n      schedHour.3.106.111.101.4.49.51.116.104 = { h0 }\n      schedMinute.3.106.111.101.4.49.51.116.104\
    \ = { m0 }\n      schedValue.3.106.111.101.4.49.51.116.104 = 0\n      schedContextName.3.106.111.101.4.49.51.116.104\
    \ = \"engine1\"\n      schedVariable.3.106.111.101.4.49.51.116.104 =\n       \
    \ smLaunchStart.3.106.111.101.5.103.104.111.115.116\n      schedType.3.106.111.101.4.49.51.116.104\
    \ = oneshot(3)\n      schedAdminStatus.3.106.111.101.4.49.51.116.104 = enabled(2)\n\
    \      schedStorageType.3.106.111.101.4.49.51.116.104 = nonVolatile(3)\n     \
    \ schedRowStatus.3.106.111.101.4.49.51.116.104 = active(1)\n   All the remaining\
    \ columns in the schedTable represent status\n   information and are not shown\
    \ here.\n"
- title: 5.3.  Turning an interface off during weekends
  contents:
  - "5.3.  Turning an interface off during weekends\n   This example assumes that\
    \ a network interface should be taken down\n   during weekends. The interface\
    \ table (ifTable) of the IF-MIB [18] is\n   assumed to exist in the context identified\
    \ by an empty string and the\n   index of the interface is ifIndex = 6.\n   The\
    \ scheduling entry which brings the interface down on every Friday\n   evening\
    \ at 20:30 (8:30 pm) is owned by schedOwner = \"bob\" and its\n   name is schedName\
    \ = \"if-off\". The instance identifier for the\n   scheduling entry is therefore\
    \ 3.98.111.98.6.105.102.45.111.102.102.\n      schedWeekDay.3.98.111.98.6.105.102.45.111.102.102\
    \ = { friday }\n      schedMonth.3.98.111.98.6.105.102.45.111.102.102 = {\n  \
    \          january, february, march, april, may, june,\n            july, august,\
    \ september, october, november, december\n      }\n      schedDay.3.98.111.98.6.105.102.45.111.102.102\
    \ = {\n            d1, d2, d3, d4, d5, d6, d7, d8, d9, d10,\n            d11,\
    \ d12, d13, d14, d15, d16, d17, d18, d19, d20,\n            d21, d22, d23, d24,\
    \ d25, d26, d27, d28, d29, d30, d31\n      }\n      schedHour.3.98.111.98.6.105.102.45.111.102.102\
    \ = { h20 }\n      schedMinute.3.98.111.98.6.105.102.45.111.102.102 = { m30 }\n\
    \      schedValue.3.98.111.98.6.105.102.45.111.102.102 = down(2)\n      schedContextName.3.98.111.98.6.105.102.45.111.102.102\
    \ = \"\"\n      schedVariable.3.98.111.98.6.105.102.45.111.102.102 =\n       \
    \ ifAdminStatus.6\n      schedType.3.98.111.98.6.105.102.45.111.102.102 = calendar(2)\n\
    \      schedAdminStatus.3.98.111.98.6.105.102.45.111.102.102 = enabled(1)\n  \
    \    schedStorageType.3.98.111.98.6.105.102.45.111.102.102 =\n        nonVolatile(3)\n\
    \      schedRowStatus.3.98.111.98.6.105.102.45.111.102.102 = active(1)\n     \
    \ The scheduling entry which brings the interface up on every Monday\n      morning\
    \ at 5:30 is owned by schedOwner = \"bob\" and its name is\n      schedName =\
    \ \"if-on\". The instance identifier for the scheduling\n      entry is therefore\
    \ 3.98.111.98.5.105.102.45.111.110.\n      The entry in the schedTable which brings\
    \ the interface up again on\n      every Monday morning at 5:30 looks as follows:\n\
    \      schedWeekDay.3.98.111.98.5.105.102.45.111.110 = { monday }\n      schedMonth.3.98.111.98.5.105.102.45.111.110\
    \ = {\n            january, february, march, april, may, june,\n            july,\
    \ august, september, october, november, december\n      }\n      schedDay.3.98.111.98.5.105.102.45.111.110\
    \ = {\n            d1, d2, d3, d4, d5, d6, d7, d8, d9, d10,\n            d11,\
    \ d12, d13, d14, d15, d16, d17, d18, d19, d20,\n            d21, d22, d23, d24,\
    \ d25, d26, d27, d28, d29, d30, d31\n      }\n      schedHour.3.98.111.98.5.105.102.45.111.110\
    \ = { h5 }\n      schedMinute.3.98.111.98.5.105.102.45.111.110 = { m30 }\n   \
    \   schedValue.3.98.111.98.5.105.102.45.111.110 = up(1)\n      schedContextName.3.98.111.98.5.105.102.45.111.110\
    \ = \"\"\n      schedVariable.3.98.111.98.5.105.102.45.111.110 = ifAdminStatus.6\n\
    \      schedType.3.98.111.98.5.105.102.45.111.110 = calendar(2)\n      schedAdminStatus.3.98.111.98.5.105.102.45.111.110\
    \ = enabled(1)\n      schedStorageType.3.98.111.98.5.105.102.45.111.110 = nonVolatile(3)\n\
    \      schedRowStatus.3.98.111.98.5.105.102.45.111.110 = active(1)\n   A similar\
    \ configuration could be used to control other schedules. For\n   example, one\
    \ could change the \"if-on\" and \"if-off\" schedules to\n   enable and disable\
    \ the periodic scheduler defined in the first\n   example.\n"
- title: 6.  Security Considerations
  contents:
  - "6.  Security Considerations\n   Scheduled SNMP set operations must use the security\
    \ credentials that\n   were present when the corresponding row in the scheduling\
    \ entry was\n   created.  An implementation must therefore record and maintain\
    \ the\n   credentials for every scheduling entry.\n   An implementation must ensure\
    \ that access control rules are applied\n   when doing the set operation. This\
    \ is accomplished by calling the\n   isAccessAllowed abstract service interface\
    \ defined in RFC 2271 [1]:\n      statusInformation =          -- success or errorIndication\n\
    \        isAccessAllowed(\n        IN   securityModel         -- Security Model\
    \ in use\n        IN   securityName          -- principal who wants to access\n\
    \        IN   securityLevel         -- Level of Security\n        IN   viewType\
    \              -- read, write, or notify view\n        IN   contextName      \
    \     -- context containing variableName\n        IN   variableName          --\
    \ OID for the managed object\n             )\n   The securityModel, securityName\
    \ and securityLevel parameters are set\n   to the values that were recorded when\
    \ the scheduling entry was\n   created. The viewType parameter must select the\
    \ write view and the\n   contextName and variableName parameters are taken from\
    \ the\n   schedContextName and schedVariableName values of the scheduling\n  \
    \ entry.\n   This MIB limits scheduled actions to objects in the local MIB. This\n\
    \   avoids security problems with the delegation of access rights.\n   However,\
    \ it might be possible for a user of this MIB to own some\n   schedules that might\
    \ trigger far in the future. This can cause\n   security risks if the security\
    \ administrator did not properly update\n   the access control lists when a user\
    \ is withdrawn from an SNMP\n   engine. Therefore, entries in the schedTable SHOULD\
    \ be cleaned up\n   whenever a user is removed from an SNMP engine.\n   To facilitate\
    \ the provisioning of access control by a security\n   administrator using the\
    \ View-Based Access Control Model (VACM)\n   defined in RFC 2275 [15] for tables\
    \ in which multiple users may need\n   to independently create or modify entries,\
    \ the initial index is used\n   as an \"owner index\". Such an initial index has\
    \ a syntax of\n   SnmpAdminString, and can thus be trivially mapped to a securityName\n\
    \   or groupName as defined in VACM, in accordance with a security\n   policy.\n\
    \   All entries in related tables belonging to a particular user will\n   have\
    \ the same value for this initial index.  For a given user's\n   entries in a\
    \ particular table, the object identifiers for the\n   information in these entries\
    \ will have the same subidentifiers\n   (except for the \"column\" subidentifier)\
    \ up to the end of the encoded\n   owner index. To configure VACM to permit access\
    \ to this portion of\n   the table, one would create vacmViewTreeFamilyTable entries\
    \ with the\n   value of vacmViewTreeFamilySubtree including the owner index portion,\n\
    \   and vacmViewTreeFamilyMask \"wildcarding\" the column subidentifier.\n   More\
    \ elaborate configurations are possible.\n"
- title: 7.  Intellectual Property
  contents:
  - "7.  Intellectual Property\n   The IETF takes no position regarding the validity\
    \ or scope of any\n   intellectual property or other rights that might be claimed\
    \ to\n   pertain to the implementation or use of the technology described in\n\
    \   this document or the extent to which any license under such rights\n   might\
    \ or might not be available; neither does it represent that it\n   has made any\
    \ effort to identify any such rights.  Information on the\n   IETF's procedures\
    \ with respect to rights in standards-track and\n   standards-related documentation\
    \ can be found in BCP-11.  Copies of\n   claims of rights made available for publication\
    \ and any assurances of\n   licenses to be made available, or the result of an\
    \ attempt made to\n   obtain a general license or permission for the use of such\n\
    \   proprietary rights by implementors or users of this specification can\n  \
    \ be obtained from the IETF Secretariat.\n   The IETF invites any interested party\
    \ to bring to its attention any\n   copyrights, patents or patent applications,\
    \ or other proprietary\n   rights which may cover technology that may be required\
    \ to practice\n   this standard.  Please address the information to the IETF Executive\n\
    \   Director.\n"
- title: 8.  Acknowledgments
  contents:
  - "8.  Acknowledgments\n   This document was produced by the IETF Distributed Management\n\
    \   (DISMAN) working group.\n"
- title: 9.  References
  contents:
  - "9.  References\n   [1]  Harrington, D., Presuhn, R. and B. Wijnen, \"An Architecture\
    \ for\n        Describing SNMP Management Frameworks\", RFC 2271, January 1998.\n\
    \   [2]  Rose, M. and K. McCloghrie, \"Structure and Identification of\n     \
    \   Management Information for TCP/IP-based Internets\", STD 16, RFC\n       \
    \ 1155, May 1990.\n   [3]  Rose, M. and K. McCloghrie, \"Concise MIB Definitions\"\
    , STD 16,\n        RFC 1212, March 1991.\n   [4]  Rose, M., \"A Convention for\
    \ Defining Traps for use with the\n        SNMP\", RFC 1215, March 1991.\n   [5]\
    \  McCloghrie, K., Perkins, D., Schoenwaelder, J., Case, J., Rose,\n        M.\
    \ and S. Waldbusser, \"Structure of Management Information\n        Version 2\
    \ (SMIv2)\", STD 58, RFC 2578, April 1999.\n   [6]  McCloghrie, K., Perkins, D.,\
    \ Schoenwaelder, J., Case, J., Rose,\n        M. and S. Waldbusser, \"Textual\
    \ Conventions for SMIv2\", STD 58,\n        RFC 2579, April 1999.\n   [7]  McCloghrie,\
    \ K., Perkins, D., Schoenwaelder, J., Case, J., Rose,\n        M. and S. Waldbusser,\
    \ \"Conformance Statements for SMIv2\", STD\n        58, RFC 2580, April 1999.\n\
    \   [8]  Case, J., Fedor, M., Schoffstall, M. and J. Davin, \"Simple\n       \
    \ Network Management Protocol\", STD 15, RFC 1157, May 1990.\n   [9]  Case, J.,\
    \ McCloghrie, K., Rose, M. and S. Waldbusser,\n        \"Introduction to Community-based\
    \ SNMPv2\", RFC 1901, January\n        1996.\n   [10] Case, J., McCloghrie, K.,\
    \ Rose, M. and S. Waldbusser, \"Transport\n        Mappings for Version 2 of the\
    \ Simple Network Management Protocol\n        (SNMPv2)\", RFC 1906, January 1996.\n\
    \   [11] Case, J., Harrington D., Presuhn R. and B. Wijnen, \"Message\n      \
    \  Processing and Dispatching for the Simple Network Management\n        Protocol\
    \ (SNMP)\", RFC 2272, January 1998.\n   [12] Blumenthal, U. and B. Wijnen, \"\
    User-based Security Model (USM)\n        for version 3 of the Simple Network Management\
    \ Protocol\n        (SNMPv3)\", RFC 2274, January 1998.\n   [13] Case, J., McCloghrie,\
    \ K., Rose, M. and S. Waldbusser, \"Protocol\n        Operations for Version 2\
    \ of the Simple Network Management\n        Protocol (SNMPv2)\", January 1996.\n\
    \   [14] Levi, D., Meyer, P. and B. Stewart, \"SNMPv3 Applications\", RFC\n  \
    \      2273, January 1998\n   [15] Wijnen, B., Presuhn, R. and K. McCloghrie,\
    \ \"View-based Access\n        Control Model (VACM) for the Simple Network Management\
    \ Protocol\n        (SNMP)\", RFC 2275, January 1998.\n   [16] Hovey, R. and S.\
    \ Bradner, \"The Organizations Involved in the\n        IETF Standards Process\"\
    , BCP 11, RFC 2028, October 1996.\n   [17] Levi, D. and J. Schoenwaelder, \"Definitions\
    \ of Managed Objects\n        for the Delegation of Management Scripts\", RFC\
    \ 2592, May 1999.\n   [18] McCloghrie, K. and F. Kastenholz, \"The Interfaces\
    \ Group MIB\n        using SMIv2\", RFC 2233, November 1997.\n   [19] Bradner,\
    \ S., \"Key words for use in RFCs to Indicate Requirement\n        Levels\", BCP\
    \ 14, RFC 2119, March 1997.\n"
- title: 10.  Editors' Addresses
  contents:
  - "10.  Editors' Addresses\n   David B. Levi\n   Nortel Networks\n   4401 Great\
    \ America Parkway\n   Santa Clara, CA 95052-8185\n   U.S.A.\n   Phone: +1 423\
    \ 686 0432\n   EMail: dlevi@nortelnetworks.com\n   Juergen Schoenwaelder\n   TU\
    \ Braunschweig\n   Bueltenweg 74/75\n   38106 Braunschweig\n   Germany\n   Phone:\
    \ +49 531 391-3283\n   EMail: schoenw@ibr.cs.tu-bs.de\n"
- title: 11.  Full Copyright Statement
  contents:
  - "11.  Full Copyright Statement\n   Copyright (C) The Internet Society (1999).\
    \  All Rights Reserved.\n   This document and translations of it may be copied\
    \ and furnished to\n   others, and derivative works that comment on or otherwise\
    \ explain it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
