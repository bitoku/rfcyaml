- title: __initial_text__
  contents:
  - '             NAT Traversal Practices for Client-Server SIP

    '
- title: Abstract
  contents:
  - "Abstract\n   Traversal of the Session Initiation Protocol (SIP) and the sessions\n\
    \   it establishes through Network Address Translators (NATs) is a\n   complex\
    \ problem.  Currently, there are many deployment scenarios and\n   traversal mechanisms\
    \ for media traffic.  This document provides\n   concrete recommendations and\
    \ a unified method for NAT traversal as\n   well as documents corresponding flows.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document is not an Internet Standards Track specification;\
    \ it is\n   published for informational purposes.\n   This document is a product\
    \ of the Internet Engineering Task Force\n   (IETF).  It represents the consensus\
    \ of the IETF community.  It has\n   received public review and has been approved\
    \ for publication by the\n   Internet Engineering Steering Group (IESG).  Not\
    \ all documents\n   approved by the IESG are a candidate for any level of Internet\n\
    \   Standard; see Section 2 of RFC 5741.\n   Information about the current status\
    \ of this document, any errata,\n   and how to provide feedback on it may be obtained\
    \ at\n   http://www.rfc-editor.org/info/rfc6314.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2011 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction . . . . . . . . . . . . . . . . . . .\
    \ . . . . . .  3\n   2.  Terminology  . . . . . . . . . . . . . . . . . . . .\
    \ . . . . .  4\n   3.  Problem Statement  . . . . . . . . . . . . . . . . . .\
    \ . . . .  4\n   4.  Solution Technology Outline Description  . . . . . . . .\
    \ . . .  8\n     4.1.  SIP Signaling  . . . . . . . . . . . . . . . . . . . .\
    \ . .  8\n       4.1.1.  Symmetric Response . . . . . . . . . . . . . . . . .\
    \ .  8\n       4.1.2.  Client-Initiated Connections . . . . . . . . . . . . .\
    \  9\n     4.2.  Media Traversal  . . . . . . . . . . . . . . . . . . . . . 10\n\
    \       4.2.1.  Symmetric RTP/RTCP . . . . . . . . . . . . . . . . . . 10\n  \
    \     4.2.2.  RTCP . . . . . . . . . . . . . . . . . . . . . . . . . 10\n    \
    \   4.2.3.  STUN/TURN/ICE  . . . . . . . . . . . . . . . . . . . . 11\n   5. \
    \ NAT Traversal Scenarios  . . . . . . . . . . . . . . . . . . . 12\n     5.1.\
    \  Basic NAT SIP Signaling Traversal  . . . . . . . . . . . . 12\n       5.1.1.\
    \  Registration (Registrar/Edge Proxy Co-Located) . . . . 12\n       5.1.2.  Registration(Registrar/Edge\
    \ Proxy Not Co-Located)  . . 16\n       5.1.3.  Initiating a Session . . . . .\
    \ . . . . . . . . . . . . 19\n       5.1.4.  Receiving an Invitation to a Session\
    \ . . . . . . . . . 22\n     5.2.  Basic NAT Media Traversal  . . . . . . . .\
    \ . . . . . . . . 27\n       5.2.1.  Endpoint-Independent NAT . . . . . . . .\
    \ . . . . . . . 28\n       5.2.2.  Address/Port-Dependent NAT . . . . . . . .\
    \ . . . . . . 48\n   6.  IPv4-IPv6 Transition . . . . . . . . . . . . . . . .\
    \ . . . . . 57\n     6.1.  IPv4-IPv6 Transition for SIP Signaling . . . . . .\
    \ . . . . 57\n   7.  Security Considerations  . . . . . . . . . . . . . . . .\
    \ . . . 57\n   8.  Acknowledgments  . . . . . . . . . . . . . . . . . . . . .\
    \ . . 57\n   9.  References . . . . . . . . . . . . . . . . . . . . . . . . .\
    \ . 58\n     9.1.  Normative References . . . . . . . . . . . . . . . . . . .\
    \ 58\n     9.2.  Informative References . . . . . . . . . . . . . . . . . . 59\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   NAT (Network Address Translator) traversal has long been\
    \ identified\n   as a complex problem when considered in the context of the Session\n\
    \   Initiation Protocol (SIP) [RFC3261] and its associated media such as\n   the\
    \ Real-time Transport Protocol (RTP) [RFC3550].  The problem is\n   exacerbated\
    \ by the variety of NATs that are available in the\n   marketplace today and the\
    \ large number of potential deployment\n   scenarios.  Details of different NATs\
    \ behavior can be found in \"NAT\n   Behavioral Requirements for Unicast UDP\"\
    \ [RFC4787].\n   The IETF has been active on many specifications for the traversal\
    \ of\n   NATs, including Session Traversal Utilities for NAT (STUN) [RFC5389],\n\
    \   Interactive Connectivity Establishment (ICE) [RFC5245], symmetric\n   response\
    \ [RFC3581], symmetric RTP [RFC4961], Traversal Using Relay\n   NAT (TURN) [RFC5766],\
    \ SIP Outbound [RFC5626], the Session Description\n   Protocol (SDP) attribute\
    \ for RTP Control Protocol (RTCP) [RFC3605],\n   \"Multiplexing RTP Data and Control\
    \ Packets on a Single Port\"\n   [RFC5761], and others.  Each of these represents\
    \ a part of the\n   solution, but none of them gives the overall context for how\
    \ the NAT\n   traversal problem is decomposed and solved through this collection\
    \ of\n   specifications.  This document serves to meet that need.  It should\n\
    \   be noted that this document intentionally does not invoke 'Best\n   Current\
    \ Practice' machinery as defined in RFC 2026 [RFC2026].\n   The document is split\
    \ into two distinct sections as follows:\n   o  Section 4 provides a definitive\
    \ set of best common practices to\n      demonstrate the traversal of SIP and\
    \ its associated media through\n      NAT devices.\n   o  Section 5 provides non-normative\
    \ examples representing\n      interactions of SIP using various NAT type deployments.\n\
    \   The document does not propose any new functionality but does draw on\n   existing\
    \ solutions for both core SIP signaling and media traversal\n   (as defined in\
    \ Section 4).\n   The best practices described in this document are for traditional\n\
    \   \"client-server\"-style SIP.  This term refers to the traditional use\n  \
    \ of the SIP protocol where User Agents talk to a series of\n   intermediaries\
    \ on a path to connect to a remote User Agent.  It seems\n   likely that other\
    \ groups using SIP, for example, peer-to-peer SIP\n   (P2PSIP), will recommend\
    \ these same practices between a P2PSIP client\n   and a P2PSIP peer, but will\
    \ recommend different practices for use\n   between peers in a peer-to-peer network.\n"
- title: 2.  Terminology
  contents:
  - "2.  Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\"\
    , \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and\
    \ \"OPTIONAL\" in this\n   document are to be interpreted as described in RFC\
    \ 2119 [RFC2119].\n   It should be noted that the use of the term 'Endpoint-Independent\n\
    \   NAT' in this document refers to a NAT that is both Endpoint-\n   Independent\
    \ Filtering and Endpoint-Independent Mapping per the\n   definitions in RFC 4787\
    \ [RFC4787].\n"
- title: 3.  Problem Statement
  contents:
  - "3.  Problem Statement\n   The traversal of SIP through NATs can be split into\
    \ two categories\n   that both require attention: the core SIP signaling and associated\n\
    \   media traversal.  This document assumes NATs that do not contain SIP-\n  \
    \ aware Application Layer Gateways (ALGs), which makes much of the\n   issues\
    \ discussed in the document not applicable.  ALGs have\n   limitations (as per\
    \ RFC 4787 [RFC4787] Section 7, RFC 3424 [RFC3424],\n   and [RFC5245] Section\
    \ 18.6), and experience shows they can have an\n   adverse impact on the functionality\
    \ of SIP.  This includes problems\n   such as requiring the media and signaling\
    \ to traverse the same device\n   and not working with encrypted signaling and/or\
    \ payload.\n   The use of non-TURN-based media intermediaries is not considered\
    \ in\n   this document.  More information can be obtained from [RFC5853] and\n\
    \   [MIDDLEBOXES].\n   The core SIP signaling has a number of issues when traversing\
    \ through\n   NATs.\n   SIP response routing over UDP as defined in RFC 3261 [RFC3261]\n\
    \   without extensions causes the response to be delivered to the source\n   IP\
    \ address specified in the topmost Via header, or the 'received'\n   parameter\
    \ of the topmost 'Via' header.  The port is extracted from\n   the SIP 'Via' header\
    \ to complete the IP address/port combination for\n   returning the SIP response.\
    \  While the destination for the response\n   is correct, the port contained in\
    \ the SIP 'Via' header represents the\n   listening port of the originating client\
    \ and not the port\n   representing the open pinhole on the NAT.  This results\
    \ in responses\n   being sent back to the NAT but to a port that is likely not\
    \ open for\n   SIP traffic.  The SIP response will then be dropped at the NAT.\
    \  This\n   is illustrated in Figure 1, which depicts a SIP response being\n \
    \  returned to port 5060.\n     Private                       NAT            \
    \             Public\n     Network                        |                  \
    \        Network\n                                    |\n                    \
    \                |\n     --------     SIP Request       |open port 10923     \
    \      --------\n    |        |-------------------->--->-----------------------|\
    \        |\n    |        |                      |                         |  \
    \      |\n    | Client |                      |port 5060   SIP Response | Proxy\
    \  |\n    |        |                      x<------------------------|        |\n\
    \    |        |                      |                         |        |\n  \
    \   --------                       |                          --------\n     \
    \                               |\n                                    |\n   \
    \                                 |\n                         Figure 1: Failed\
    \ Response\n   Secondly, there are two cases where new requests reuse existing\n\
    \   connections.  The first is when using a reliable, connection-oriented\n  \
    \ transport protocol such as TCP, SIP has an inherent mechanism that\n   results\
    \ in SIP responses reusing the connection that was created/used\n   for the corresponding\
    \ transactional request.  The SIP protocol does\n   not provide a mechanism that\
    \ allows new requests generated in the\n   reverse direction of the originating\
    \ client to use, for example, the\n   existing TCP connection created between\
    \ the client and the server\n   during registration.  This results in the registered\
    \ contact address\n   not being bound to the \"connection\" in the case of TCP.\
    \  Requests are\n   then blocked at the NAT, as illustrated in Figure 2.  The\
    \ second case\n   is when using an unreliable transport protocol such as UDP where\n\
    \   external NAT mappings need to be reused to reach a SIP entity on the\n   private\
    \ side of the network.\n     Private                       NAT               \
    \          Public\n     Network                        |                     \
    \     Network\n                                    |\n                       \
    \             |\n     -------- (UAC 8023)    REGISTER/Response       (UAS 5060)\
    \ --------\n    |        |-------------------->---<-----------------------|  \
    \      |\n    |        |                      |                         |    \
    \    |\n    | Client |                      |5060  INVITE   (UAC 8015)| Proxy\
    \  |\n    |        |                      x<------------------------|        |\n\
    \    |        |                      |                         |        |\n  \
    \   --------                       |                          --------\n     \
    \                               |\n                                    |\n   \
    \                                 |\n                         Figure 2: Failed\
    \ Request\n   In Figure 2, the original REGISTER request is sent from the client\
    \ on\n   port 8023 and received by the proxy on port 5060, establishing a\n  \
    \ connection and opening a pinhole in the NAT.  The generation of a new\n   request\
    \ from the proxy results in a request destined for the\n   registered entity (contact\
    \ IP address) that is not reachable from the\n   public network.  This results\
    \ in the new SIP request attempting to\n   create a connection to a private network\
    \ address.  This problem would\n   be solved if the original connection were reused.\
    \  While this problem\n   has been discussed in the context of connection-oriented\
    \ protocols\n   such as TCP, the problem exists for SIP signaling using any transport\n\
    \   protocol.  The impact of connection reuse of connection-oriented\n   transports\
    \ (TCP, TLS, etc.) is discussed in more detail in the\n   connection reuse specification\
    \ [RFC5923].  The approach proposed for\n   this problem in Section 4 of this\
    \ document is relevant for all SIP\n   signaling in conjunction with connection\
    \ reuse, regardless of the\n   transport protocol.\n   NAT policy can dictate\
    \ that connections should be closed after a\n   period of inactivity.  This period\
    \ of inactivity may vary from a\n   number of seconds to hours.  SIP signaling\
    \ cannot be relied upon to\n   keep connections alive for the following two reasons.\
    \  Firstly, SIP\n   entities can sometimes have no signaling traffic for long\
    \ periods of\n   time, which has the potential to exceed the inactivity timer,\
    \ and\n   this can lead to problems where endpoints are not available to\n   receive\
    \ incoming requests as the connection has been closed.\n   Secondly, if a low\
    \ inactivity timer is specified, SIP signaling is\n   not appropriate as a keep-alive\
    \ mechanism as it has the potential to\n   add a large amount of traffic to the\
    \ network, which uses up valuable\n   resources and also requires processing at\
    \ a SIP stack, which is also\n   a waste of processing resources.\n   Media associated\
    \ with SIP calls also has problems traversing NAT.\n   RTP [RFC3550] runs over\
    \ UDP and is one of the most common media\n   transport types used in SIP signaling.\
    \  Negotiation of RTP occurs\n   with a SIP session establishment using the Session\
    \ Description\n   Protocol (SDP) [RFC4566] and a SIP offer/answer exchange [RFC3264].\n\
    \   During a SIP offer/answer exchange, an IP address and port\n   combination\
    \ are specified by each client in a session as a means of\n   receiving media\
    \ such as RTP.  The problem arises when a client\n   advertises its address to\
    \ receive media and it exists in a private\n   network that is not accessible\
    \ from outside the NAT.  Figure 3\n   illustrates this problem.\n            \
    \     NAT             Public Network           NAT\n                  |      \
    \                                  |\n                  |                    \
    \                    |\n                  |                                  \
    \      |\n     --------     |            SIP Signaling Session       |   --------\n\
    \    |        |---------------------->Proxy<-------------------|        |\n  \
    \  |        |    |                                        |  |        |\n    |\
    \ Client |    |                                        |  | Client |\n    |  \
    \ A    |>=====>RTP>==Unknown Address==>X             |  |   B    |\n    |    \
    \    |    |             X<==Unknown Address==<RTP<===<|        |\n     --------\
    \     |                                        |   --------\n                \
    \  |                                        |\n                  |           \
    \                             |\n                  |                         \
    \               |\n                          Figure 3: Failed Media\n   The connection\
    \ addresses of the clients behind the NATs will\n   nominally contain a private\
    \ IPv4 address that is not routable across\n   the public Internet.  Exacerbating\
    \ matters even more would be the\n   tendency of Client A to send media to a destination\
    \ address it\n   received in the signaling confirmation message -- an address\
    \ that may\n   actually correspond to a host within the private network who is\n\
    \   suddenly faced with incoming RTP packets (likewise, Client B may send\n  \
    \ media to a host within its private network who did not solicit these\n   packets).\
    \  Finally, to complicate the problem even further, a number\n   of different\
    \ NAT topologies with different default behaviors\n   increases the difficulty\
    \ of arriving at a unified approach.  This\n   problem exists for all media transport\
    \ protocols that might be NATted\n   (e.g., TCP, UDP, the Stream Control Transmission\
    \ Protocol (SCTP), the\n   Datagram Congestion Control Protocol (DCCP)).\n   In\
    \ general, the problems associated with NAT traversal can be\n   categorized as\
    \ follows.\n   For signaling:\n   o  Responses do not reuse the NAT mapping and\
    \ filtering entries\n      created by the request.\n   o  Inbound requests are\
    \ filtered out by the NAT because there is no\n      long-term connection between\
    \ the client and the proxy.\n   For media:\n   o  Each endpoint has a variety\
    \ of addresses that can be used to reach\n      it (e.g., native interface address,\
    \ public NATted address).  In\n      different situations, a different pair of\
    \ (local endpoint, remote\n      endpoint) addresses should be used, and it is\
    \ not clear when to\n      use which pair.\n   o  Many NATs filter inbound packets\
    \ if the local endpoint has not\n      recently sent an outbound packet to the\
    \ sender.\n   o  Classic RTCP usage is to run RTCP on the next highest port.\n\
    \      However, NATs do not necessarily preserve port adjacency.\n   o  Classic\
    \ RTP and RTCP usage is to use different 5-tuples for\n      traffic in each direction.\
    \  Though not really a problem, doing\n      this through NATs is more work than\
    \ using the same 5-tuple in both\n      directions.\n"
- title: 4.  Solution Technology Outline Description
  contents:
  - "4.  Solution Technology Outline Description\n   As mentioned previously, the\
    \ traversal of SIP through existing NATs\n   can be divided into two discrete\
    \ problem areas: getting the SIP\n   signaling across NATs and enabling media\
    \ as specified by SDP in a SIP\n   offer/answer exchange to flow between endpoints.\n"
- title: 4.1.  SIP Signaling
  contents:
  - "4.1.  SIP Signaling\n   SIP signaling has two areas that result in transactional\
    \ failure when\n   traversing through NATs, as described in Section 3 of this\
    \ document.\n   The remaining sub-sections describe appropriate solutions that\
    \ result\n   in SIP signaling traversal through NATs, regardless of transport\n\
    \   protocol.  It is advised that SIP-compliant entities follow the\n   guidelines\
    \ presented in this section to enable traversal of SIP\n   signaling through NATs.\n"
- title: 4.1.1.  Symmetric Response
  contents:
  - "4.1.1.  Symmetric Response\n   As described in Section 3 of this document, when\
    \ using an unreliable\n   transport protocol such as UDP, SIP responses are sent\
    \ to the IP\n   address and port combination contained in the SIP 'Via' header\
    \ field\n   (or default port for the appropriate transport protocol if not\n \
    \  present).  Figure 4 illustrates the response traversal through the\n   open\
    \ pinhole using Symmetric techniques defined in RFC 3581\n   [RFC3581].\n    \
    \ Private                        NAT                       Public\n     Network\
    \                         |                        Network\n                 \
    \                    |\n                                     |\n     --------\
    \                        |                        --------\n    |        |   \
    \                    |                       |        |\n    |        |send request---------------------------------->|\
    \        |\n    | Client |<---------------------------------send response|  SIP\
    \   |\n    |   A    |                       |                       | Proxy  |\n\
    \    |        |                       |                       |        |\n   \
    \  --------                        |                        --------\n       \
    \                              |\n                                     |\n   \
    \                                  |\n                       Figure 4: Symmetric\
    \ Response\n   The outgoing request from Client A opens a pinhole in the NAT.\
    \  The\n   SIP Proxy would normally respond to the port available in the SIP\n\
    \   'Via' header, as illustrated in Figure 1.  The SIP Proxy honors the\n   'rport'\
    \ parameter in the SIP 'Via' header and routes the response to\n   the port from\
    \ which it was sent.  The exact functionality for this\n   method of response\
    \ traversal is called 'Symmetric Response', and the\n   details are documented\
    \ in RFC 3581 [RFC3581].  Additional\n   requirements are imposed on SIP entities\
    \ in RFC 3581 [RFC3581] such\n   as listening and sending SIP requests/responses\
    \ from the same port.\n"
- title: 4.1.2.  Client-Initiated Connections
  contents:
  - "4.1.2.  Client-Initiated Connections\n   The second problem with SIP signaling,\
    \ as defined in Section 3 and\n   illustrated in Figure 2, is to allow incoming\
    \ requests to be properly\n   routed.\n   Guidelines for devices such as User\
    \ Agents that can only generate\n   outbound connections through NATs are documented\
    \ in \"Managing Client-\n   Initiated Connections in the Session Initiation Protocol\
    \ (SIP)\"\n   [RFC5626].  The document provides techniques that use a unique User\n\
    \   Agent instance identifier (instance-id) in association with a flow\n   identifier\
    \ (reg-id).  The combination of the two identifiers provides\n   a key to a particular\
    \ connection (both UDP and TCP) that is stored in\n   association with registration\
    \ bindings.  On receiving an incoming\n   request to a SIP Address-Of-Record (AOR),\
    \ a proxy/registrar routes to\n   the associated flow created by the registration\
    \ and thus a route\n   through NATs.  It also provides a keep-alive mechanism\
    \ for clients to\n   keep NAT bindings alive.  This is achieved by multiplexing\
    \ a ping-\n   pong mechanism over the SIP signaling connection (STUN for UDP and\n\
    \   CRLF/operating system keepalive for reliable transports like TCP).\n   Usage\
    \ of [RFC5626] is RECOMMENDED.  This mechanism is not transport\n   specific and\
    \ should be used for any transport protocol.\n   Even if the SIP Outbound mechanism\
    \ is not used, clients generating\n   SIP requests SHOULD use the same IP address\
    \ and port (i.e., socket)\n   for both transmission and receipt of SIP messages.\
    \  Doing so allows\n   for the vast majority of industry provided solutions to\
    \ properly\n   function (e.g., NAT traversal that is Session Border Control (SBC)\n\
    \   hosted).  Deployments should also consider the mechanism described in\n  \
    \ the Connection Reuse [RFC5923] specification for routing\n   bidirectional messages\
    \ securely between trusted SIP Proxy servers.\n"
- title: 4.2.  Media Traversal
  contents:
  - "4.2.  Media Traversal\n   The issues of media traversal through NATs is not straightforward\
    \ and\n   requires the combination of a number of traversal methodologies.  The\n\
    \   technologies outlined in the remainder of this section provide the\n   required\
    \ solution set.\n"
- title: 4.2.1.  Symmetric RTP/RTCP
  contents:
  - "4.2.1.  Symmetric RTP/RTCP\n   The primary problem identified in Section 3 of\
    \ this document is that\n   internal IP address/port combinations cannot be reached\
    \ from the\n   public side of NATs.  In the case of media such as RTP, this will\n\
    \   result in no audio traversing NATs (as illustrated in Figure 3).  To\n   overcome\
    \ this problem, a technique called 'Symmetric RTP/RTCP'\n   [RFC4961] can be used.\
    \  This involves a SIP endpoint both sending and\n   receiving RTP/RTCP traffic\
    \ from the same IP address/port combination.\n   When operating behind a NAT and\
    \ using the 'latching' technique\n   described in [MIDDLEBOXES], SIP User Agents\
    \ MUST implement Symmetric\n   RTP/RTCP.  This allows traversal of RTP across\
    \ the NAT.\n"
- title: 4.2.2.  RTCP
  contents:
  - "4.2.2.  RTCP\n   Normal practice when selecting a port for defining RTP Control\n\
    \   Protocol (RTCP) [RFC3550] is for consecutive-order numbering (i.e.,\n   select\
    \ an incremented port for RTCP from that used for RTP).  This\n   assumption causes\
    \ RTCP traffic to break when traversing certain types\n   of NATs due to various\
    \ reasons (e.g., already allocated port,\n   randomized port allocation).  To\
    \ combat this problem, a specific\n   address and port need to be specified in\
    \ the SDP rather than relying\n   on such assumptions.  RFC 3605 [RFC3605] defines\
    \ an SDP attribute\n   that is included to explicitly specify transport connection\n\
    \   information for RTCP so a separate, explicit NAT binding can be set\n   up\
    \ for the purpose.  The address details can be obtained using any\n   appropriate\
    \ method including those detailed in this section (e.g.,\n   STUN, TURN, ICE).\n\
    \   A further enhancement to RFC 3605 [RFC3605] is defined in [RFC5761],\n   which\
    \ specifies 'muxing' both RTP and RTCP on the same IP/PORT\n   combination.\n"
- title: 4.2.3.  STUN/TURN/ICE
  contents:
  - "4.2.3.  STUN/TURN/ICE\n   ICE, STUN, and TURN are a suite of 3 inter-related\
    \ protocols that\n   combine to provide a complete media traversal solution for\
    \ NATs.  The\n   following sections provide details of each component part.\n"
- title: 4.2.3.1.  STUN
  contents:
  - "4.2.3.1.  STUN\n   Session Traversal Utilities for NAT or STUN is defined in\
    \ RFC 5389\n   [RFC5389].  STUN is a lightweight tool kit and protocol that provides\n\
    \   details of the external IP address/port combination used by the NAT\n   device\
    \ to represent the internal entity on the public facing side of\n   NATs.  On\
    \ learning of such an external representation, a client can\n   use it accordingly\
    \ as the connection address in SDP to provide NAT\n   traversal.  Using terminology\
    \ defined in \"NAT Behavioral Requirements\n   for Unicast UDP\" [RFC4787], STUN\
    \ does work with Endpoint-Independent\n   Mapping but does not work with either\
    \ Address-Dependent Mapping or\n   Address and Port-Dependent Mapping type NATs.\
    \  Using STUN with either\n   of the previous two NAT mappings to probe for the\
    \ external IP\n   address/port representation will provide a different result\
    \ to that\n   required for traversal by an alternative SIP entity.  The IP address/\n\
    \   port combination deduced for the STUN server would be blocked for RTP\n  \
    \ packets from the remote SIP User Agent.\n   As mentioned in Section 4.1.2, STUN\
    \ is also used as a client-to-\n   server keep-alive mechanism to refresh NAT\
    \ bindings.\n"
- title: 4.2.3.2.  TURN
  contents:
  - "4.2.3.2.  TURN\n   As described in Section 4.2.3.1, the STUN protocol does not\
    \ work for\n   UDP traversal through certain identified NAT mappings.  'Traversal\n\
    \   Using Relays around NAT' is a usage of the STUN protocol for deriving\n  \
    \ (from a TURN server) an address that will be used to relay packets\n   towards\
    \ a client.  TURN provides an external address (globally\n   routable) at a TURN\
    \ server that will act as a media relay that\n   attempts to allow traffic to\
    \ reach the associated internal address.\n   The full details of the TURN specification\
    \ are defined in [RFC5766].\n   A TURN service will almost always provide media\
    \ traffic to a SIP\n   entity, but it is RECOMMENDED that this method would only\
    \ be used as\n   a last resort and not as a general mechanism for NAT traversal.\
    \  This\n   is because using TURN has high performance costs when relaying media\n\
    \   traffic and can lead to unwanted latency.\n"
- title: 4.2.3.3.  ICE
  contents:
  - "4.2.3.3.  ICE\n   Interactive Connectivity Establishment (ICE) is the RECOMMENDED\n\
    \   method for traversal of existing NATs if Symmetric RTP and media\n   latching\
    \ are not sufficient.  ICE is a methodology for using existing\n   technologies\
    \ such as STUN, TURN, and any other protocol compliant\n   with Unilateral Self-Address\
    \ Fixing (NSAF) [RFC3424] to provide a\n   unified solution.  This is achieved\
    \ by obtaining as many\n   representative IP address/port combinations as possible\
    \ using\n   technologies such as STUN/TURN (note: an ICE endpoint can also use\n\
    \   other mechanisms (e.g., the NAT Port Mapping Protocol [NAT-PMP],\n   Universal\
    \ Plug and Play Internet Gateway Device [UPnP-IGD]) to learn\n   public IP addresses\
    \ and ports, and populate a=candidate lines with\n   that information).  Once\
    \ the addresses are accumulated, they are all\n   included in the SDP exchange\
    \ in a new media attribute called\n   'candidate'.  Each candidate SDP attribute\
    \ entry has detailed\n   connection information including a media address, priority,\
    \ and\n   transport protocol.  The appropriate IP address/port combinations are\n\
    \   used in the order specified by the priority.  A client compliant to\n   the\
    \ ICE specification will then locally run STUN servers on all\n   addresses being\
    \ advertised using ICE.  Each instance will undertake\n   connectivity checks\
    \ to ensure that a client can successfully receive\n   media on the advertised\
    \ address.  Only connections that pass the\n   relevant connectivity checks are\
    \ used for media exchange.  The full\n   details of the ICE methodology are in\
    \ [RFC5245].\n"
- title: 5.  NAT Traversal Scenarios
  contents:
  - "5.  NAT Traversal Scenarios\n   This section of the document includes detailed\
    \ NAT traversal\n   scenarios for both SIP signaling and the associated media.\
    \  Signaling\n   NAT traversal is achieved using [RFC5626].\n"
- title: 5.1.  Basic NAT SIP Signaling Traversal
  contents:
  - "5.1.  Basic NAT SIP Signaling Traversal\n   The following sub-sections concentrate\
    \ on SIP signaling traversal of\n   NATs.  The scenarios include traversal for\
    \ both reliable and\n   unreliable transport protocols.\n"
- title: 5.1.1.  Registration (Registrar/Edge Proxy Co-Located)
  contents:
  - "5.1.1.  Registration (Registrar/Edge Proxy Co-Located)\n   The set of scenarios\
    \ in this section document basic signaling\n   traversal of a SIP REGISTER method\
    \ through NATs.\n"
- title: 5.1.1.1.  UDP
  contents:
  - "5.1.1.1.  UDP\n                                               Registrar/\n  \
    \          Bob                NAT             Edge Proxy\n             |     \
    \             |                  |\n             |(1) REGISTER      |        \
    \          |\n             |----------------->|                  |\n         \
    \    |                  |                  |\n             |                 \
    \ |(1) REGISTER      |\n             |                  |----------------->|\n\
    \             |                  |                  |\n             |*************************************|\n\
    \             |  Create Outbound Connection Tuple   |\n             |*************************************|\n\
    \             |                  |                  |\n             |        \
    \          |(2) 200 OK        |\n             |                  |<-----------------|\n\
    \             |                  |                  |\n             |(2) 200 OK\
    \        |                  |\n             |<-----------------|             \
    \     |\n             |                  |                  |\n              \
    \          Figure 5: UDP Registration\n   In this example, the client sends a\
    \ SIP REGISTER request through a\n   NAT.  The client will include an 'rport'\
    \ parameter as described in\n   Section 4.1.1 of this document for allowing traversal\
    \ of UDP\n   responses.  The original request as illustrated in (1) in Figure\
    \ 5 is\n   a standard SIP REGISTER message:\n   Message 1:\n   REGISTER sip:example.com\
    \ SIP/2.0\n   Via: SIP/2.0/UDP 192.168.1.2;rport;branch=z9hG4bKnashds7\n   Max-Forwards:\
    \ 70\n   From: Bob <sip:bob@example.com>;tag=7F94778B653B\n   To: Bob <sip:bob@example.com>\n\
    \   Call-ID: 16CB75F21C70\n   CSeq: 1 REGISTER\n   Supported: path, outbound\n\
    \   Contact: <sip:bob@192.168.1.2 >;reg-id=1\n       ;+sip.instance=\"<urn:uuid:00000000-0000-1000-8000-AABBCCDDEEFF>\"\
    \n   Content-Length: 0\n   This SIP transaction now generates a SIP 200 OK response,\
    \ as depicted\n   in (2) from Figure 5:\n   Message 2:\n   SIP/2.0 200 OK\n  \
    \ Via: SIP/2.0/UDP 192.168.1.2;rport=8050;branch=z9hG4bKnashds7;\n        received=172.16.3.4\n\
    \   From: Bob <sip:bob@example.com>;tag=7F94778B653B\n   To: Bob <sip:bob@example.com>;tag=6AF99445E44A\n\
    \   Call-ID: 16CB75F21C70\n   CSeq: 1 REGISTER\n   Supported: path, outbound\n\
    \   Require: outbound\n   Contact: <sip:bob@192.168.1.2 >;reg-id=1;expires=3600\n\
    \        ;+sip.instance=\"<urn:uuid:00000000-0000-1000-8000-AABBCCDDEEFF>\"\n\
    \   Content-Length: 0\n   The response will be sent to the address appearing in\
    \ the 'received'\n   parameter of the SIP 'Via' header (address 172.16.3.4). \
    \ The response\n   will not be sent to the port deduced from the SIP 'Via' header,\
    \ as\n   per standard SIP operation but will be sent to the value that has\n \
    \  been stamped in the 'rport' parameter of the SIP 'Via' header (port\n   8050).\
    \  For the response to successfully traverse the NAT, all of the\n   conventions\
    \ defined in RFC 3581 [RFC3581] are to be obeyed.  Make\n   note of both the 'reg-id'\
    \ and 'sip.instance' contact header\n   parameters.  They are used to establish\
    \ an outbound connection tuple\n   as defined in [RFC5626].  The connection tuple\
    \ creation is clearly\n   shown in Figure 5.  This ensures that any inbound request\
    \ that causes\n   a registration lookup will result in the reuse of the connection\
    \ path\n   established by the registration.  This removes the need to manipulate\n\
    \   contact header URIs to represent a globally routable address as\n   perceived\
    \ on the public side of a NAT.\n"
- title: 5.1.1.2.  Connection-Oriented Transport
  contents:
  - "5.1.1.2.  Connection-Oriented Transport\n                                   \
    \            Registrar/\n            Bob                NAT             Edge Proxy\n\
    \             |                  |                  |\n             |(1) REGISTER\
    \      |                  |\n             |----------------->|               \
    \   |\n             |                  |                  |\n             |  \
    \                |(1) REGISTER      |\n             |                  |----------------->|\n\
    \             |                  |                  |\n             |*************************************|\n\
    \             |  Create Outbound Connection Tuple   |\n             |*************************************|\n\
    \             |                  |                  |\n             |        \
    \          |(2) 200 OK        |\n             |                  |<-----------------|\n\
    \             |                  |                  |\n             |(2) 200 OK\
    \        |                  |\n             |<-----------------|             \
    \     |\n             |                  |                  |\n              \
    \                   Figure 6\n   Traversal of SIP REGISTER requests/responses\
    \ using a reliable,\n   connection-oriented protocol such as TCP does not require\
    \ any\n   additional core SIP signaling extensions, beyond the procedures\n  \
    \ defined in [RFC5626].  SIP responses will reuse the connection\n   created for\
    \ the initial REGISTER request, (1) from Figure 6:\n   Message 1:\n   REGISTER\
    \ sip:example.com SIP/2.0\n   Via: SIP/2.0/TCP 192.168.1.2;branch=z9hG4bKnashds7\n\
    \   Max-Forwards: 70\n   From: Bob <sip:bob@example.com>;tag=7F94778B653B\n  \
    \ To: Bob <sip:bob@example.com>\n   Call-ID: 16CB75F21C70\n   CSeq: 1 REGISTER\n\
    \   Supported: path, outbound\n   Contact: <sip:bob@192.168.1.2;transport=tcp>;reg-id=1\n\
    \        ;+sip.instance=\"<urn:uuid:00000000-0000-1000-8000-AABBCCDDEEFF>\"\n\
    \   Content-Length: 0\n   Message 2:\n   SIP/2.0 200 OK\n   Via: SIP/2.0/TCP 192.168.1.2;branch=z9hG4bKnashds7\n\
    \   From: Bob <sip:bob@example.com>;tag=7F94778B653B\n   To: Bob <sip:bob@example.com>;tag=6AF99445E44A\n\
    \   Call-ID: 16CB75F21C70\n   CSeq: 1 REGISTER\n   Supported: path, outbound\n\
    \   Require: outbound\n   Contact: <sip:bob@192.168.1.2;transport=tcp>;reg-id=1;expires=3600\n\
    \        ;+sip.instance=\"<urn:uuid:00000000-0000-1000-8000-AABBCCDDEEFF>\"\n\
    \   Content-Length: 0\n   This example was included to show the inclusion of the\
    \ 'sip.instance'\n   contact header parameter as defined in the SIP Outbound specification\n\
    \   [RFC5626].  This creates an association tuple as described in the\n   previous\
    \ example for future inbound requests directed at the newly\n   created registration\
    \ binding with the only difference that the\n   association is with a TCP connection,\
    \ not a UDP pinhole binding.\n"
- title: 5.1.2.  Registration(Registrar/Edge Proxy Not Co-Located)
  contents:
  - "5.1.2.  Registration(Registrar/Edge Proxy Not Co-Located)\n   This section demonstrates\
    \ traversal mechanisms when the Registrar\n   component is not co-located with\
    \ the edge proxy element.  The\n   procedures described in this section are identical,\
    \ regardless of\n   transport protocol, so only one example will be documented\
    \ in the\n   form of TCP.\n      Bob               NAT              Edge Proxy\
    \         Registrar\n       |                  |                  |          \
    \        |\n       |(1) REGISTER      |                  |                  |\n\
    \       |----------------->|                  |                  |\n       | \
    \                 |                  |                  |\n       |          \
    \        |(1) REGISTER      |                  |\n       |                  |----------------->|\
    \                  |\n       |                  |                  |         \
    \         |\n       |                  |                  |(2) REGISTER      |\n\
    \       |                  |                  |----------------->|\n       | \
    \                 |                  |                  |\n       |*************************************|\
    \                  |\n       |  Create Outbound Connection Tuple   |         \
    \         |\n       |*************************************|                  |\n\
    \       |                  |                  |                  |\n       | \
    \                 |                  |(3) 200 OK        |\n       |          \
    \        |                  |<-----------------|\n       |                  |(4)200\
    \ OK         |                  |\n       |                  |<-----------------|\
    \                  |\n       |                  |                  |         \
    \         |\n       |(4)200 OK         |                  |                  |\n\
    \       |<-----------------|                  |                  |\n       | \
    \                 |                  |                  |\n          Figure 7:\
    \ Registration (Registrar/Proxy Not Co-Located)\n   This scenario builds on the\
    \ previous example in Section 5.1.1.2.  The\n   primary difference is that the\
    \ REGISTER request is routed onwards\n   from a proxy server to a separated Registrar.\
    \  The important message\n   to note is (1) in Figure 7.  The edge proxy, on receiving\
    \ a REGISTER\n   request that contains a 'sip.instance' media feature tag, forms\
    \ a\n   unique flow identifier token as discussed in [RFC5626].  At this\n   point,\
    \ the proxy server routes the SIP REGISTER message to the\n   Registrar.  The\
    \ proxy will create the connection tuple as described\n   in SIP Outbound at the\
    \ same moment as the co-located example, but for\n   subsequent messages to arrive\
    \ at the proxy, the proxy needs to\n   indicate its need to remain in the SIP\
    \ signaling path.  To achieve\n   this, the proxy inserts to REGISTER message\
    \ (2) a SIP 'Path'\n   extension header, as defined in RFC 3327 [RFC3327].  The\
    \ previously\n   created flow association token is inserted in a position within\
    \ the\n   Path header where it can easily be retrieved at a later point when\n\
    \   receiving messages to be routed to the registration binding (in this\n   case\
    \ the user part of the SIP URI).  The REGISTER message of (1)\n   includes a SIP\
    \ 'Route' header for the edge proxy.\n   Message 1:\n   REGISTER sip:example.com\
    \ SIP/2.0\n   Via: SIP/2.0/TCP 192.168.1.2;branch=z9hG4bKnashds7\n   Max-Forwards:\
    \ 70\n   From: Bob <sip:bob@example.com>;tag=7F94778B653B\n   To: Bob <sip:bob@example.com>\n\
    \   Call-ID: 16CB75F21C70\n   CSeq: 1 REGISTER\n   Supported: path, outbound\n\
    \   Route: <sip:ep1.example.com;lr>\n   Contact: <sip:bob@192.168.1.2;transport=tcp>;reg-id=1\n\
    \        ;+sip.instance=\"<urn:uuid:00000000-0000-1000-8000-AABBCCDDEEFF>\"\n\
    \   Content-Length: 0\n   When proxied in (2) looks as follows:\n   Message 2:\n\
    \   REGISTER sip:example.com SIP/2.0\n   Via: SIP/2.0/TCP ep1.example.com;branch=z9hG4bKnuiqisi\n\
    \   Via: SIP/2.0/TCP 192.168.1.2;branch=z9hG4bKnashds7\n   Max-Forwards: 69\n\
    \   From: Bob <sip:bob@example.com>;tag=7F94778B653B\n   To: Bob <sip:bob@example.com>\n\
    \   Call-ID: 16CB75F21C70\n   CSeq: 1 REGISTER\n   Supported: path, outbound\n\
    \   Contact: <sip:bob@192.168.1.2;transport=tcp>;reg-id=1\n        ;+sip.instance=\"\
    <urn:uuid:00000000-0000-1000-8000-AABBCCDDEEFF>\"\n   Path: <sip:VskztcQ/S8p4WPbOnHbuyh5iJvJIW3ib@ep1.example.com;lr;ob>\n\
    \   Content-Length: 0\n   This REGISTER request results in the Path header being\
    \ stored along\n   with the AOR and its associated binding at the Registrar. \
    \ The URI\n   contained in the Path header will be inserted as a pre-loaded SIP\n\
    \   'Route' header into any request that arrives at the Registrar and is\n   directed\
    \ towards the associated AOR binding.  This all but guarantees\n   that all requests\
    \ for the new registration will be forwarded to the\n   edge proxy.  In our example,\
    \ the user part of the SIP 'Path' header\n   URI that was inserted by the edge\
    \ proxy contains the unique token\n   identifying the flow to the client.  On\
    \ receiving subsequent\n   requests, the edge proxy will examine the user part\
    \ of the pre-loaded\n   SIP 'Route' header and extract the unique flow token for\
    \ use in its\n   connection tuple comparison, as defined in the SIP Outbound\n\
    \   specification [RFC5626].  An example that builds on this scenario\n   (showing\
    \ an inbound request to the AOR) is detailed in\n   Section 5.1.4.2 of this document.\n"
- title: 5.1.3.  Initiating a Session
  contents:
  - "5.1.3.  Initiating a Session\n   This section covers basic SIP signaling when\
    \ initiating a call from\n   behind a NAT.\n"
- title: 5.1.3.1.  UDP
  contents:
  - "5.1.3.1.  UDP\n   Initiating a call using UDP (the edge proxy and authoritative\
    \ proxy\n   functionality are co-located).\n                                 \
    \         Edge Proxy/\n       Bob                NAT            Auth. Proxy  \
    \        Alice\n        |                  |                  |              \
    \   |\n        |(1) INVITE        |                  |                 |\n   \
    \     |----------------->|                  |                 |\n        |   \
    \               |                  |                 |\n        |            \
    \      |(1) INVITE        |                 |\n        |                  |----------------->|\
    \                 |\n        |                  |                  |         \
    \        |\n        |                  |                  |(2) INVITE       |\n\
    \        |                  |                  |---------------->|\n        |\
    \                  |                  |                 |\n        |         \
    \         |                  |(3)180 RINGING   |\n        |                  |\
    \                  |<----------------|\n        |                  |         \
    \         |                 |\n        |                  |(4)180 RINGING    |\
    \                 |\n        |                  |<-----------------|         \
    \        |\n        |                  |                  |                 |\n\
    \        |(4)180 RINGING    |                  |                 |\n        |<-----------------|\
    \                  |                 |\n        |                  |         \
    \         |                 |\n        |                  |                  |(5)200\
    \ OK        |\n        |                  |                  |<----------------|\n\
    \        |                  |                  |                 |\n        |\
    \                  |(6)200 OK         |                 |\n        |         \
    \         |<-----------------|                 |\n        |                  |\
    \                  |                 |\n        |(6)200 OK         |         \
    \         |                 |\n        |<-----------------|                  |\
    \                 |\n        |                  |                  |         \
    \        |\n        |(7)ACK            |                  |                 |\n\
    \        |----------------->|                  |                 |\n        |\
    \                  |                  |                 |\n        |         \
    \         |(7)ACK            |                 |\n        |                  |----------------->|\
    \                 |\n        |                  |                  |         \
    \        |\n        |                  |                  |(8) ACK          |\n\
    \        |                  |                  |---------------->|\n        |\
    \                  |                  |                 |\n                  \
    \ Figure 8: Initiating a Session - UDP\n   The initiating client generates an\
    \ INVITE request that is to be sent\n   through the NAT to a proxy server.  The\
    \ INVITE message is represented\n   in Figure 8 by (1) and is as follows:\n  \
    \ Message 1:\n   INVITE sip:alice@a.example SIP/2.0\n   Via: SIP/2.0/UDP 192.168.1.2;rport;branch=z9hG4bKnashds7\n\
    \   Max-Forwards: 70\n   From: Bob <sip:bob@example.com>;tag=ldw22z\n   To: Alice\
    \ <sip:alice@a.example>\n   Call-ID: 95KGsk2V/Eis9LcpBYy3\n   CSeq: 1 INVITE\n\
    \   Supported: outbound\n   Route: <sip:ep1.example.com;lr>\n   Contact: <sip:bob@192.168.1.2;ob>\n\
    \   Content-Type: application/sdp\n   Content-Length: ...\n   [SDP not shown]\n\
    \   There are a number of points to note with this message:\n   1.  Firstly, as\
    \ with the registration example in Section 5.1.1.1,\n       responses to this\
    \ request will not automatically pass back\n       through a NAT, so the SIP 'Via'\
    \ header 'rport' is included as\n       described in the Section 4.1.1 (\"Symmetric\
    \ Response\") and defined\n       in RFC 3581 [RFC3581].\n   2.  Secondly, the\
    \ 'ob' parameter is added to the 'Contact' header to\n       ensure that all subsequent\
    \ requests are sent to the same flow;\n       alternatively, a Globally Routable\
    \ User Agent URI (GRUU) might\n       have been used.  See Section 4.3 of [RFC5626].\n\
    \   In (2), the proxy inserts itself in the 'Via' header, adds the\n   'rport'\
    \ port number and the 'received' parameter in the previous\n   'Via' header, removes\
    \ the 'Route' header, and inserts a Record-Route\n   with a token.\n   Message\
    \ 2:\n INVITE sip:alice@172.16.1.4 SIP/2.0\n Via: SIP/2.0/UDP ep1.example.com;branch=z9hG4bKnuiqisi\n\
    \ Via: SIP/2.0/UDP 192.168.1.2;rport=8050;branch=z9hG4bKnashds7;\n      received=172.16.3.4\n\
    \ Max-Forwards: 69\n From: Bob <sip:bob@example.com>;tag=ldw22z\n To: Alice <sip:alice@a.example>\n\
    \ Call-ID: 95KGsk2V/Eis9LcpBYy3\n CSeq: 1 INVITE\n Supported: outbound\n Record-Route:\
    \ <sip:3yJEbr1GYZK9cPYk5Snocez6DzO7w+AX@ep1.example.com;lr>\n Contact: <sip:bob@192.168.1.2;ob>\n\
    \ Content-Type: application/sdp\n Content-Length: ...\n [SDP not shown]\n"
- title: 5.1.3.2.  Connection-Oriented Transport
  contents:
  - "5.1.3.2.  Connection-Oriented Transport\n   When using a reliable transport such\
    \ as TCP, the call flow and\n   procedures for traversing a NAT are almost identical\
    \ to those\n   described in Section 5.1.3.1.  The primary difference when using\n\
    \   reliable transport protocols is that symmetric response [RFC3581] is\n   not\
    \ required for SIP responses to traverse a NAT.  RFC 3261 [RFC3261]\n   defines\
    \ procedures for SIP response messages to be sent back on the\n   same connection\
    \ on which the request arrived.  See Section 9.5 of\n   [RFC5626] for an example\
    \ flow of an outgoing call.\n"
- title: 5.1.4.  Receiving an Invitation to a Session
  contents:
  - "5.1.4.  Receiving an Invitation to a Session\n   This section details scenarios\
    \ where a client behind a NAT receives\n   an inbound request through a NAT. \
    \ These scenarios build on the\n   previous registration scenario from Sections\
    \ 5.1.1 and 5.1.2 in this\n   document.\n"
- title: 5.1.4.1.  Registrar/Proxy Co-Located
  contents:
  - "5.1.4.1.  Registrar/Proxy Co-Located\n   The SIP signaling on the interior of\
    \ the network (behind the user's\n   proxy) is not impacted directly by the transport\
    \ protocol, so only\n   one example scenario is necessary.  The example uses UDP\
    \ and follows\n   on from the registration installed in the example from\n   Section\
    \ 5.1.1.1.\n                                           Edge Proxy\n        Bob\
    \                NAT            Auth. Proxy          Alice\n         |       \
    \           |                  |                 |\n         |*******************************************************|\n\
    \         |           Registration Binding Installed in           |\n        \
    \ |                    Section 5.1.1.1                    |\n         |*******************************************************|\n\
    \         |                  |                  |                 |\n        \
    \ |                  |                  |(1)INVITE        |\n         |      \
    \            |                  |<----------------|\n         |              \
    \    |                  |                 |\n         |                  |(2)INVITE\
    \         |                 |\n         |                  |<-----------------|\
    \                 |\n         |                  |                  |        \
    \         |\n         |(2)INVITE         |                  |                \
    \ |\n         |<-----------------|                  |                 |\n    \
    \     |                  |                  |                 |\n         |  \
    \                |                  |                 |\n              Figure\
    \ 9: Receiving an Invitation to a Session\n   An INVITE request arrives at the\
    \ authoritative proxy with a\n   destination pointing to the AOR of that inserted\
    \ in Section 5.1.1.1.\n   The message is illustrated by (1) in Figure 9 and looks\
    \ as follows:\n   INVITE sip:bob@example.com SIP/2.0\n   Via: SIP/2.0/UDP 172.16.1.4;branch=z9hG4bK74huHJ37d\n\
    \   Max-Forwards: 70\n   From: External Alice <sip:alice@example.com>;tag=02935\n\
    \   To: Bob <sip:bob@example.com>\n   Call-ID: klmvCxVWGp6MxJp2T2mb\n   CSeq:\
    \ 1 INVITE\n   Contact: <sip:alice@172.16.1.4>\n   Content-Type: application/sdp\n\
    \   Content-Length: ..\n   [SDP not shown]\n   The INVITE request matches the\
    \ registration binding previously\n   installed at the Registrar and the INVITE\
    \ Request-URI is rewritten to\n   the selected onward address.  The proxy then\
    \ examines the Request-URI\n   of the INVITE and compares with its list of connection\
    \ tuples.  It\n   uses the incoming AOR to commence the check for associated open\n\
    \   connections/mappings.  Once matched, the proxy checks to see if the\n   unique\
    \ instance identifier (+sip.instance) associated with the\n   binding equals the\
    \ same instance identifier associated with that\n   connection tuple.  The request\
    \ is then dispatched on the appropriate\n   binding.  This is message (2) from\
    \ Figure 9 and is as follows:\n   INVITE sip:bob@192.168.1.2 SIP/2.0\n   Via:\
    \ SIP/2.0/UDP ep1.example.com;branch=z9hG4kmlds893jhsd\n   Via: SIP/2.0/UDP 172.16.1.4;branch=z9hG4bK74huHJ37d\n\
    \   Max-Forwards: 69\n   From: Alice <sip:alice@example.com>;tag=02935\n   To:\
    \ client bob <sip:bob@example.com>\n   Call-ID: klmvCxVWGp6MxJp2T2mb\n   CSeq:\
    \ 1 INVITE\n   Contact: <sip:alice@172.16.1.4>\n   Content-Type: application/sdp\n\
    \   Content-Length: ..\n   [SDP not shown]\n   It is a standard SIP INVITE request\
    \ with no additional functionality.\n   The major difference is that this request\
    \ will not be forwarded to\n   the address specified in the Request-URI, as standard\
    \ SIP rules would\n   enforce, but will be sent on the flow associated with the\n\
    \   registration binding (lookup procedures in RFC 3263 [RFC3263] are\n   overridden\
    \ by RFC 5626 [RFC5626]).  This then allows the original\n   connection/mapping\
    \ from the initial registration process to be\n   reused.\n"
- title: 5.1.4.2.  Edge Proxy/Authoritative Proxy Not Co-Located
  contents:
  - "5.1.4.2.  Edge Proxy/Authoritative Proxy Not Co-Located\n   The core SIP signaling\
    \ associated with this call flow is not impacted\n   directly by the transport\
    \ protocol, so only one example scenario is\n   necessary.  The example uses UDP\
    \ and follows on from the registration\n   installed in the example from Section\
    \ 5.1.2.\n    Bob            NAT         Edge Proxy    Auth. Proxy       Alice\n\
    \     |              |              |              |              |\n     |***********************************************************|\n\
    \     |            Registration Binding Installed in              |\n     |  \
    \                    Section 5.1.2                        |\n     |***********************************************************|\n\
    \     |              |              |              |              |\n     |  \
    \            |              |              |(1)INVITE     |\n     |          \
    \    |              |              |<-------------|\n     |              |   \
    \           |              |              |\n     |              |           \
    \   |(2)INVITE     |              |\n     |              |              |<-------------|\
    \              |\n     |              |              |              |        \
    \      |\n     |              |(3)INVITE     |              |              |\n\
    \     |              |<-------------|              |              |\n     |  \
    \            |              |              |              |\n     |(3)INVITE \
    \    |              |              |              |\n     |<-------------|   \
    \           |              |              |\n     |              |           \
    \   |              |              |\n     |              |              |    \
    \          |              |\n                 Figure 10: Registrar/Proxy Not Co-located\n\
    \   An INVITE request arrives at the authoritative proxy with a\n   destination\
    \ pointing to the AOR of that inserted in Section 5.1.2.\n   The message is illustrated\
    \ by (1) in Figure 10 and looks as follows:\n   INVITE sip:bob@example.com SIP/2.0\n\
    \   Via: SIP/2.0/UDP 172.16.1.4;branch=z9hG4bK74huHJ37d\n   Max-Forwards: 70\n\
    \   From: Alice <sip:alice@example.com>;tag=02935\n   To: Bob <sip:bob@example.com>\n\
    \   Call-ID: klmvCxVWGp6MxJp2T2mb\n   CSeq: 1 INVITE\n   Contact: <sip:external@172.16.1.4>\n\
    \   Content-Type: application/sdp\n   Content-Length: ..\n   [SDP not shown]\n\
    \   The INVITE request matches the registration binding previously\n   installed\
    \ at the Registrar and the INVITE Request-URI is rewritten to\n   the selected\
    \ onward address.  The Registrar also identifies that a\n   SIP 'Path' header\
    \ was associated with the registration and pushes it\n   into the INVITE request\
    \ in the form of a pre-loaded SIP Route header.\n   It then forwards the request\
    \ on to the proxy identified in the SIP\n   Route header as shown in (2) from\
    \ Figure 10:\n   INVITE sip:bob@client.example.com SIP/2.0\n   Via: SIP/2.0/UDP\
    \ proxy.example.com;branch=z9hG4bK74fmljnc\n   Via: SIP/2.0/UDP 172.16.1.4;branch=z9hG4bK74huHJ37d\n\
    \   Route: <sip:VskztcQ/S8p4WPbOnHbuyh5iJvJIW3ib@ep1.example.com;lr;ob>\n   Max-Forwards:\
    \ 69\n   From: Alice <sip:alice@example.net>;tag=02935\n   To: Bob <sip:Bob@example.com>\n\
    \   Call-ID: klmvCxVWGp6MxJp2T2mb\n   CSeq: 1 INVITE\n   Contact: <sip:alice@172.16.1.4>\n\
    \   Content-Type: application/sdp\n   Content-Length: ..\n   [SDP not shown]\n\
    \   The request then arrives at the outbound proxy for the client.  The\n   proxy\
    \ examines the Request-URI of the INVITE in conjunction with the\n   flow token\
    \ that it previously inserted into the user part of the\n   'Path' header SIP\
    \ URI (which now appears in the user part of the\n   Route header in the incoming\
    \ INVITE).  The proxy locates the\n   appropriate flow and sends the message to\
    \ the client, as shown in (3)\n   from Figure 10:\n INVITE sip:bob@192.168.1.2\
    \ SIP/2.0\n Via: SIP/2.0/UDP ep1.example.com;branch=z9hG4nsi30dncmnl\n Via: SIP/2.0/UDP\
    \ proxy.example.com;branch=z9hG4bK74fmljnc\n Via: SIP/2.0/UDP 172.16.1.4;branch=z9hG4bK74huHJ37d\n\
    \ Record-Route: <sip:VskztcQ/S8p4WPbOnHbuyh5iJvJIW3ib@ep1.example.com;lr>\n Max-Forwards:\
    \ 68\n From: Alice <sip:Alice@example.net>;tag=02935\n To: bob <sip:bob@example.com>\n\
    \ Call-ID: klmvCxVWGp6MxJp2T2mb\n CSeq: 1 INVITE\n Contact: <sip:alice@172.16.1.4>\n\
    \ Content-Type: application/sdp\n Content-Length: ..\n [SDP not shown]\n   It\
    \ is a standard SIP INVITE request with no additional functionality\n   at the\
    \ originator.  The major difference is that this request will\n   not follow the\
    \ address specified in the Request-URI when it reaches\n   the outbound proxy,\
    \ as standard SIP rules would enforce, but will be\n   sent on the flow associated\
    \ with the registration binding as\n   indicated in the Route header (lookup procedures\
    \ in RFC 3263\n   [RFC3263] are overridden).  This then allows the original connection/\n\
    \   mapping from the initial registration to the outbound proxy to be\n   reused.\n"
- title: 5.2.  Basic NAT Media Traversal
  contents:
  - "5.2.  Basic NAT Media Traversal\n   This section provides example scenarios to\
    \ demonstrate basic media\n   traversal using the techniques outlined earlier\
    \ in this document.\n   In the flow diagrams, STUN messages have been annotated\
    \ for\n   simplicity as follows:\n   o  The \"Src\" attribute represents the source\
    \ transport address of the\n      message.\n   o  The \"Dest\" attribute represents\
    \ the destination transport address\n      of the message.\n   o  The \"Map\"\
    \ attribute represents the server reflexive (XOR-MAPPED-\n      ADDRESS STUN attribute)\
    \ transport address.\n   o  The \"Rel\" attribute represents the relayed (RELAY-ADDRESS\
    \ STUN\n      attribute) transport address.\n   The meaning of each STUN attribute\
    \ is extensively explained in the\n   core STUN [RFC5389] and TURN [RFC5766] specifications.\n\
    \   A number of ICE SDP attributes have also been included in some of the\n  \
    \ examples.  Detailed information on individual attributes can be\n   obtained\
    \ from the core ICE specification [RFC5245].\n   The examples also contain a mechanism\
    \ for representing transport\n   addresses.  It would be confusing to include\
    \ representations of\n   network addresses in the call flows and would make them\
    \ hard to\n   follow.  For this reason, network addresses will be represented\
    \ using\n   the following annotation.  The first component will contain the\n\
    \   representation of the client responsible for the address.  For\n   example,\
    \ in the majority of the examples \"L\" (left client), \"R\"\n   (right client),\
    \ \"NAT-PUB\" (NAT public), \"PRIV\" (Private), and \"STUN-\n   PUB\" (STUN public)\
    \ are used.  To allow for multiple addresses from\n   the same network element,\
    \ each representation can also be followed by\n   a number.  These can also be\
    \ used in combination.  For example,\n   \"L-NAT-PUB-1\" would represent a public\
    \ network address of the left-\n   hand side NAT while \"R-NAT-PUB-1\" would represent\
    \ a public network\n   address of the right-hand side of the NAT.  \"L-PRIV-1\"\
    \ would\n   represent a private network address of the left-hand side of the NAT\n\
    \   while \"R-PRIV-1\" represents a private address of the right-hand side\n \
    \  of the NAT.\n   It should also be noted that, during the examples, it might\
    \ be\n   appropriate to signify an explicit part of a transport address.  This\n\
    \   is achieved by adding either the '.address' or '.port' tag on the end\n  \
    \ of the representation -- for example, 'L-PRIV-1.address' and 'L-PRIV-\n   1.port'.\n\
    \   The use of '$' signifies variable parts in example SIP messages.\n"
- title: 5.2.1.  Endpoint-Independent NAT
  contents:
  - "5.2.1.  Endpoint-Independent NAT\n   This section demonstrates an example of\
    \ a client both initiating and\n   receiving calls behind an Endpoint-Independent\
    \ NAT.  An example is\n   included for both STUN and ICE with ICE being the RECOMMENDED\n\
    \   mechanism for media traversal.\n   At this time, there is no reliable test\
    \ to determine if a host is\n   behind an Endpoint-Independent Filtering NAT or\
    \ an Endpoint-\n   Independent Mapping NAT [RFC5780], and the sort of failure\
    \ that\n   occurs in this situation is described in Section 5.2.2.1.  For this\n\
    \   reason, ICE is RECOMMENDED over the mechanism described in this\n   section.\n"
- title: 5.2.1.1.  STUN Solution
  contents:
  - "5.2.1.1.  STUN Solution\n   It is possible to traverse media through an Endpoint-Independent\
    \ NAT\n   using STUN.  The remainder of this section provides simplified\n   examples\
    \ of the 'Binding Discovery' STUN as defined in [RFC5389].\n   The STUN messages\
    \ have been simplified and do not include 'Shared\n   Secret' requests used to\
    \ obtain the temporary username and password.\n"
- title: 5.2.1.1.1.  Initiating Session
  contents:
  - "5.2.1.1.1.  Initiating Session\n   The following example demonstrates media traversal\
    \ through a NAT with\n   Endpoint-Independent Mapping properties using the STUN\
    \ 'Binding\n   Discovery' usage.  It is assumed in this example that the STUN\
    \ client\n   and SIP Client are co-located on the same physical machine.  Note\n\
    \   that some SIP signaling messages have been left out for simplicity.\n    \
    \ Client              NAT               STUN                [..]\n           \
    \                               Server\n       |                  |          \
    \        |                  |\n       |(1) BIND Req      |                  |\
    \                  |\n       |Src=L-PRIV-1      |                  |         \
    \         |\n       |Dest=STUN-PUB     |                  |                  |\n\
    \       |----------------->|                  |                  |\n       | \
    \                 |                  |                  |\n       |          \
    \        |(2) BIND Req      |                  |\n       |                  |Src=NAT-PUB-1\
    \     |                  |\n       |                  |Dest=STUN-PUB     |   \
    \               |\n       |                  |----------------->|            \
    \      |\n       |                  |                  |                  |\n\
    \       |                  |(3) BIND Resp     |                  |\n       | \
    \                 |<-----------------|                  |\n       |          \
    \        |Src=STUN-PUB      |                  |\n       |                  |Dest=NAT-PUB-1\
    \    |                  |\n       |                  |Map=NAT-PUB-1     |    \
    \              |\n       |                  |                  |             \
    \     |\n       |(4) BIND Resp     |                  |                  |\n \
    \      |<-----------------|                  |                  |\n       |Src=STUN-PUB\
    \      |                  |                  |\n       |Dest=L-PRIV-1     |  \
    \                |                  |\n       |Map=NAT-PUB-1     |           \
    \       |                  |\n       |                  |                  | \
    \                 |\n       |(5) BIND Req      |                  |          \
    \        |\n       |Src=L-PRIV-2      |                  |                  |\n\
    \       |Dest=STUN-PUB     |                  |                  |\n       |----------------->|\
    \                  |                  |\n       |                  |         \
    \         |                  |\n       |                  |(6) BIND Req      |\
    \                  |\n       |                  |Src=NAT-PUB-2     |         \
    \         |\n       |                  |Dest=STUN-PUB     |                  |\n\
    \       |                  |----------------->|                  |\n       | \
    \                 |                  |                  |\n       |          \
    \        |(7) BIND Resp     |                  |\n       |                  |<-----------------|\
    \                  |\n       |                  |Src=STUN-PUB      |         \
    \         |\n       |                  |Dest=NAT-PUB-2    |                  |\n\
    \       |                  |Map=NAT-PUB-2     |                  |\n       | \
    \                 |                  |                  |\n       |(8) BIND Resp\
    \     |                  |                  |\n       |<-----------------|   \
    \               |                  |\n       |Src=STUN-PUB      |            \
    \      |                  |\n       |Dest=L-PRIV-2     |                  |  \
    \                |\n       |Map=NAT-PUB-2     |                  |           \
    \       |\n       |                  |                  |                  |\n\
    \       |(9)SIP INVITE     |                  |                  |\n       |----------------->|\
    \                  |                  |\n       |                  |         \
    \         |                  |\n       |                  |(10)SIP INVITE    |\
    \                  |\n       |                  |------------------------------------>|\n\
    \       |                  |                  |                  |\n       | \
    \                 |                  |(11)SIP 200 OK    |\n       |          \
    \        |<------------------------------------|\n       |                  |\
    \                  |                  |\n       |(12)SIP 200 OK    |         \
    \         |                  |\n       |<-----------------|                  |\
    \                  |\n       |                  |                  |         \
    \         |\n       |========================================================|\n\
    \       |>>>>>>>>>>>>Outgoing Media sent from L-PRIV-1>>>>>>>>>>>|\n       |========================================================|\n\
    \       |                                                        |\n       |========================================================|\n\
    \       |<<<<<<<<<<<<Incoming Media sent to NAT-PUB-1<<<<<<<<<<<<|\n       |========================================================|\n\
    \       |                                                        |\n       |========================================================|\n\
    \       |>>>>>>>>>>>>Outgoing RTCP sent from L-PRIV-2>>>>>>>>>>>>|\n       |========================================================|\n\
    \       |                                                        |\n       |========================================================|\n\
    \       |<<<<<<<<<<<<Incoming RTCP sent to NAT-PUB-2<<<<<<<<<<<<<|\n       |========================================================|\n\
    \       |                  |                  |                  |\n       |(13)SIP\
    \ ACK       |                  |                  |\n       |----------------->|\
    \                  |                  |\n       |                  |         \
    \         |                  |\n       |                  |(14) SIP ACK      |\
    \                  |\n       |                  |------------------------------------>|\n\
    \       |                  |                  |                  |\n         \
    \    Figure 11: Endpoint-Independent NAT - Initiating\n   o  On deciding to initiate\
    \ a SIP voice session, the client starts a\n      local STUN client on the interface\
    \ and port that is to be used for\n      media (send/receive).  The STUN client\
    \ generates a standard\n      'Binding Discovery' request as indicated in (1)\
    \ from Figure 11\n      that also highlights the source address and port for which\
    \ the\n      client device wishes to obtain a mapping.  The 'Binding Discovery'\n\
    \      request is sent through the NAT towards the public Internet and\n     \
    \ STUN server.\n   o  Message (2) traverses the NAT and breaks out onto the public\n\
    \      Internet towards the public STUN server.  Note that the source\n      address\
    \ of the 'Binding Discovery' request now represents the\n      public address\
    \ and port from the public side of the NAT.\n   o  The STUN server receives the\
    \ request and processes it\n      appropriately.  This results in a successful\
    \ 'Binding Discovery'\n      response being generated and returned (3).  The message\
    \ contains\n      details of the XOR-mapped public address (contained in the STUN\n\
    \      XOR-MAPPED-ADDRESS attribute) that is to be used by the\n      originating\
    \ client to receive media (see 'Map=NAT-PUB-1' from\n      (3)).\n   o  The 'Binding\
    \ Discovery' response traverses back through the NAT\n      using the path created\
    \ by the 'Binding Discovery' request and\n      presents the new XOR-mapped address\
    \ to the client (4).  At this\n      point, the process is repeated to obtain\
    \ a second XOR-mapped\n      address (as shown in (5)-(8)) for a second local\
    \ address (the\n      address has changed from \"L-PRIV-1\" to \"L-PRIV-2\") for\
    \ an RTCP\n      port.\n   o  The client now constructs a SIP INVITE message (9).\
    \  Note that\n      traversal of SIP is not covered in this example and is discussed\n\
    \      in Section 5.1.  The INVITE request will use the addresses it has\n   \
    \   obtained in the previous STUN transactions to populate the SDP of\n      the\
    \ SIP INVITE as shown below:\n      v=0\n      o=test 2890844526 2890842807 IN\
    \ IP4 $L-PRIV-1.address\n      c=IN IP4 $NAT-PUB-1.address\n      t=0 0\n    \
    \  m=audio $NAT-PUB-1.port RTP/AVP 0\n      a=rtcp:$NAT-PUB-2.port\n   o  Note\
    \ that the XOR-mapped address obtained from the 'Binding\n      Discovery' transactions\
    \ are inserted as the connection address for\n      the SDP (c=$NAT-PUB-1.address).\
    \  The Primary port for RTP is also\n      inserted in the SDP (m=audio $NAT-PUB-1.port\
    \ RTP/AVP 0).  Finally,\n      the port gained from the additional 'Binding Discovery'\
    \ is placed\n      in the RTCP attribute (as discussed in Section 4.2.2) for\n\
    \      traversal of RTCP (a=rtcp:$NAT-PUB-2.port).\n   o  The SIP signaling then\
    \ traverses the NAT and sets up the SIP\n      session (9-12).  Note that the\
    \ left-hand client transmits media as\n      soon as the 200 OK to the INVITE\
    \ arrives at the client (12).  Up\n      until this point, the incoming media\
    \ and RTCP to the left-hand\n      client will not pass through the NAT as no\
    \ outbound association\n      has been created with the far-end client.  Two-way\
    \ media\n      communication has now been established.\n"
- title: 5.2.1.1.2.  Receiving Session Invitation
  contents:
  - "5.2.1.1.2.  Receiving Session Invitation\n   Receiving a session for an Endpoint-Independent\
    \ NAT using the STUN\n   'Binding Discovery' usage is very similar to the example\
    \ outlined in\n   Section 5.2.1.1.1.  Figure 12 illustrates the associated flow\
    \ of\n   messages.\n     Client              NAT               STUN          \
    \      [..]\n                                          Server\n       |      \
    \            |                  | (1)SIP INVITE    |\n       |               \
    \   |<------------------------------------|\n       |                  |     \
    \             |                  |\n       |(2) SIP INVITE    |              \
    \    |                  |\n       |<-----------------|                  |    \
    \              |\n       |                  |                  |             \
    \     |\n       |(3) BIND Req      |                  |                  |\n \
    \      |Src=L-PRIV-1      |                  |                  |\n       |Dest=STUN-PUB\
    \     |                  |                  |\n       |----------------->|   \
    \               |                  |\n       |                  |            \
    \      |                  |\n       |                  |(4) BIND Req      |  \
    \                |\n       |                  |Src=NAT-PUB-1     |           \
    \       |\n       |                  |Dest=STUN-PUB     |                  |\n\
    \       |                  |----------------->|                  |\n       | \
    \                 |                  |                  |\n       |          \
    \        |(5) BIND Resp     |                  |\n       |                  |<-----------------|\
    \                  |\n       |                  |Src=STUN-PUB      |         \
    \         |\n       |                  |Dest=NAT-PUB-1    |                  |\n\
    \       |                  |Map=NAT-PUB-1     |                  |\n       | \
    \                 |                  |                  |\n       |(6) BIND Resp\
    \     |                  |                  |\n       |<-----------------|   \
    \               |                  |\n       |Src=STUN-PUB      |            \
    \      |                  |\n       |Dest=L-PRIV-1     |                  |  \
    \                |\n       |Map=NAT-PUB-1     |                  |           \
    \       |\n       |                  |                  |                  |\n\
    \       |(7) BIND Req      |                  |                  |\n       |Src=L-PRIV-2\
    \      |                  |                  |\n       |Dest=STUN-PUB     |  \
    \                |                  |\n       |----------------->|           \
    \       |                  |\n       |                  |                  | \
    \                 |\n       |                  |(8) BIND Req      |          \
    \        |\n       |                  |Src=NAT-PUB-2     |                  |\n\
    \       |                  |Dest=STUN-PUB     |                  |\n       | \
    \                 |----------------->|                  |\n       |          \
    \        |                  |                  |\n       |                  |(9)\
    \ BIND Resp     |                  |\n       |                  |<-----------------|\
    \                  |\n       |                  |Src=STUN-PUB      |         \
    \         |\n       |                  |Dest=NAT-PUB-2    |                  |\n\
    \       |                  |Map=NAT-PUB-2     |                  |\n       | \
    \                 |                  |                  |\n       |(10) BIND Resp\
    \    |                  |                  |\n       |<-----------------|    \
    \              |                  |\n       |Src=STUN-PUB      |             \
    \     |                  |\n       |Dest=L-PRIV-2     |                  |   \
    \               |\n       |Map=NAT-PUB-2     |                  |            \
    \      |\n       |                  |                  |                  |\n\
    \       |(11)SIP 200 OK    |                  |                  |\n       |----------------->|\
    \                  |                  |\n       |                  |(12)SIP 200\
    \ OK    |                  |\n       |                  |------------------------------------>|\n\
    \       |                  |                  |                  |\n       |========================================================|\n\
    \       |>>>>>>>>>>>>Outgoing Media sent from L-PRIV-1>>>>>>>>>>>|\n       |========================================================|\n\
    \       |                  |                  |                  |\n       |========================================================|\n\
    \       |<<<<<<<<<<<<<Incoming Media sent to L-PRIV-1<<<<<<<<<<<<|\n       |========================================================|\n\
    \       |                  |                  |                  |\n       |========================================================|\n\
    \       |>>>>>>>>>>>>Outgoing RTCP sent from L-PRIV-2>>>>>>>>>>>>|\n       |========================================================|\n\
    \       |                  |                  |                  |\n       |========================================================|\n\
    \       |<<<<<<<<<<<<<Incoming RTCP sent to L-PRIV-2<<<<<<<<<<<<<|\n       |========================================================|\n\
    \       |                  |                  |                  |\n       | \
    \                 |                  |(13)SIP ACK       |\n       |          \
    \        |<------------------------------------|\n       |                  |\
    \                  |                  |\n       |(14)SIP ACK       |         \
    \         |                  |\n       |<-----------------|                  |\
    \                  |\n       |                  |                  |         \
    \         |\n              Figure 12: Endpoint-Independent NAT - Receiving\n \
    \  o  On receiving an invitation to a SIP voice session (SIP INVITE\n      request),\
    \ the User Agent starts a local STUN client on the\n      appropriate port on\
    \ which it is to receive media.  The STUN client\n      generates a standard 'Binding\
    \ Discovery' request as indicated in\n      (3) from Figure 12 that also highlights\
    \ the source address and\n      port for which the client device wishes to obtain\
    \ a mapping.  The\n      'Binding Discovery' request is sent through the NAT towards\
    \ the\n      public Internet and STUN server.\n   o  'Binding Discovery' message\
    \ (4) traverses the NAT and breaks out\n      onto the public Internet towards\
    \ the public STUN server.  Note\n      that the source address of the STUN requests\
    \ now represents the\n      public address and port from the public side of the\
    \ NAT.\n   o  The STUN server receives the request and processes it\n      appropriately.\
    \  This results in a successful 'Binding Discovery'\n      response being generated\
    \ and returned (5).  The message contains\n      details of the mapped public\
    \ address (contained in the STUN XOR-\n      MAPPED-ADDRESS attribute) that is\
    \ to be used by the originating\n      client to receive media (see 'Map=NAT-PUB-1'\
    \ from (5)).\n   o  The 'Binding Discovery' response traverses back through the\
    \ NAT\n      using the path created by the outgoing 'Binding Discovery' request\n\
    \      and presents the new XOR-mapped address to the client (6).  At\n      this\
    \ point, the process is repeated to obtain a second XOR-mapped\n      address\
    \ (as shown in (7)-(10)) for a second local address (local\n      port has now\
    \ changed and is represented by L-PRIV-2 in (7)) for an\n      RTCP port.\n  \
    \ o  The client now constructs a SIP 200 OK message (11) in response to\n    \
    \  the original SIP INVITE requests.  Note that traversal of SIP is\n      not\
    \ covered in this example and is discussed in Section 5.1.  SIP\n      Provisional\
    \ responses are also left out for simplicity.  The 200\n      OK response will\
    \ use the addresses it has obtained in the previous\n      STUN transactions to\
    \ populate the SDP of the SIP 200 OK as shown\n      below:\n      v=0\n     \
    \ o=test 2890844526 2890842807 IN IP4 $L-PRIV-1.address\n      c=IN IP4 $NAT-PUB-1.address\n\
    \      t=0 0\n      m=audio $NAT-PUB-1.port RTP/AVP 0\n      a=rtcp:$NAT-PUB-2.port\n\
    \   o  Note that the XOR-mapped address obtained from the initial\n      'Binding\
    \ Discovery' transaction is inserted as the connection\n      address for the\
    \ SDP (c=NAT-PUB-1.address).  The Primary port for\n      RTP is also inserted\
    \ in the SDP (m=audio NAT-PUB-1.port RTP/AVP\n      0).  Finally, the port gained\
    \ from the second 'Binding Discovery'\n      is placed in the RTCP attribute (as\
    \ discussed in Section 4.2.2)\n      for traversal of RTCP (a=rtcp:NAT-PUB-2.port).\n\
    \   o  The SIP signaling then traverses the NAT and sets up the SIP\n      session\
    \ (11-14).  Note that the left-hand client transmits media\n      as soon as the\
    \ 200 OK to the INVITE is sent to the User Agent\n      Client (UAC) (11).  Up\
    \ until this point, the incoming media from\n      the right-hand client will\
    \ not pass through the NAT as no outbound\n      association has been created\
    \ with the far-end client.  Two-way\n      media communication has now been established.\n"
- title: 5.2.1.2.  ICE Solution
  contents:
  - "5.2.1.2.  ICE Solution\n   The preferred solution for media traversal of NAT\
    \ is using ICE, as\n   described in Section 4.2.3.3, regardless of the NAT type.\
    \  The\n   following examples illustrate the traversal of an Endpoint-\n   Independent\
    \ NAT when initiating the session.  The example only covers\n   ICE in association\
    \ with the 'Binding Discovery' and TURN.  It is\n   worth noting that the TURN\
    \ server provides both STUN functions (to\n   learn your public mapping) and TURN\
    \ functions (media relaying).  It\n   is also worth noting that in the example\
    \ described in\n   Section 5.2.1.2.1, both SIP clients L and R are contacting\
    \ the same\n   TURN server.  This is not necessary for ICE, STUN, TURN to function;\n\
    \   all that is necessary is that the STUN and TURN server(s) be in the\n   same\
    \ addressing domain that is accessible on the Internet.\n"
- title: 5.2.1.2.1.  Initiating Session
  contents:
  - "5.2.1.2.1.  Initiating Session\n   The following example demonstrates an initiating\
    \ traversal through an\n   Endpoint-Independent NAT using ICE.\n   L         \
    \      NAT              STUN             NAT               R\n               \
    \                    Server\n   |                |                |          \
    \      |                |\n   |(1) Alloc Req   |                |            \
    \    |                |\n   |Src=L-PRIV-1    |                |              \
    \  |                |\n   |Dest=TURN-PUB-1 |                |                |\
    \                |\n   |--------------->|                |                |  \
    \              |\n   |                |                |                |    \
    \            |\n   |                |(2) Alloc Req   |                |      \
    \          |\n   |                |Src=L-NAT-PUB-1 |                |        \
    \        |\n   |                |Dest=TURN-PUB-1 |                |          \
    \      |\n   |                |--------------->|                |            \
    \    |\n   |                |                |                |              \
    \  |\n   |                |(3) Alloc Resp  |                |                |\n\
    \   |                |<---------------|                |                |\n  \
    \ |                |Src=TURN-PUB-1  |                |                |\n   |\
    \                |Dest=L-NAT-PUB-1|                |                |\n   |  \
    \              |Map=L-NAT-PUB-1 |                |                |\n   |    \
    \            |Rel=TURN-PUB-2  |                |                |\n   |      \
    \          |                |                |                |\n   |(4) Alloc\
    \ Resp  |                |                |                |\n   |<---------------|\
    \                |                |                |\n   |Src=TURN-PUB-1  |  \
    \              |                |                |\n   |Dest=L-PRIV-1   |    \
    \            |                |                |\n   |Map=L-NAT-PUB-1 |      \
    \          |                |                |\n   |Rel=TURN-PUB-2  |        \
    \        |                |                |\n   |                |          \
    \      |                |                |\n   |(5) Alloc Req   |            \
    \    |                |                |\n   |Src=L-PRIV-2    |              \
    \  |                |                |\n   |Dest=TURN-PUB-1 |                |\
    \                |                |\n   |--------------->|                |  \
    \              |                |\n   |                |                |    \
    \            |                |\n   |                |(6) Alloc Req   |      \
    \          |                |\n   |                |Src=L-NAT-PUB-2 |        \
    \        |                |\n   |                |Dest=TURN-PUB-1 |          \
    \      |                |\n   |                |--------------->|            \
    \    |                |\n   |                |                |              \
    \  |                |\n   |                |(7) Alloc Resp  |                |\
    \                |\n   |                |<---------------|                |  \
    \              |\n   |                |Src=TURN-PUB-1  |                |    \
    \            |\n   |                |Dest=NAT-PUB-2  |                |      \
    \          |\n   |                |Map=NAT-PUB-2   |                |        \
    \        |\n   |                |Rel=TURN-PUB-3  |                |          \
    \      |\n   |                |                |                |            \
    \    |\n   |(8) Alloc Resp  |                |                |              \
    \  |\n   |<---------------|                |                |                |\n\
    \   |Src=TURN-PUB-1  |                |                |                |\n  \
    \ |Dest=L-PRIV-2   |                |                |                |\n   |Map=L-NAT-PUB-2\
    \ |                |                |                |\n   |Rel=TURN-PUB-3  |\
    \                |                |                |\n   |                |  \
    \              |                |                |\n   |(9) SIP INVITE  |    \
    \            |                |                |\n   |------------------------------------------------->|\
    \                |\n   |                |                |                |  \
    \              |\n   |                |                |                |(10)\
    \ SIP INVITE |\n   |                |                |                |--------------->|\n\
    \   |                |                |                |                |\n  \
    \ |                |                |                |(11) Alloc Req  |\n   |\
    \                |                |                |<---------------|\n   |  \
    \              |                |                |Src=R-PRIV-1    |\n   |    \
    \            |                |                |Dest=TURN-PUB-1 |\n   |      \
    \          |                |                |                |\n   |        \
    \        |                |(12) Alloc Req  |                |\n   |          \
    \      |                |<---------------|                |\n   |            \
    \    |                |Src=R-NAT-PUB-1 |                |\n   |              \
    \  |                |Dest=TURN-PUB-1 |                |\n   |                |\
    \                |                |                |\n   |                |  \
    \              |(13) Alloc Res  |                |\n   |                |    \
    \            |--------------->|                |\n   |                |      \
    \          |Src=TURN-PUB-1  |                |\n   |                |        \
    \        |Dest=R-NAT-PUB-1|                |\n   |                |          \
    \      |Map=R-NAT-PUB-1 |                |\n   |                |            \
    \    |Rel=TURN-PUB-4  |                |\n   |                |              \
    \  |                |                |\n   |                |                |\
    \                |(14) Alloc Res  |\n   |                |                |  \
    \              |--------------->|\n   |                |                |    \
    \            |Src=TURN-PUB-1  |\n   |                |                |      \
    \          |Dest=R-PRIV-1   |\n   |                |                |        \
    \        |Map=R-NAT-PUB-1 |\n   |                |                |          \
    \      |Rel=TURN-PUB-4  |\n   |                |                |            \
    \    |                |\n   |                |                |              \
    \  |(15) Alloc Req  |\n   |                |                |                |<---------------|\n\
    \   |                |                |                |Src=R-PRIV-2    |\n  \
    \ |                |                |                |Dest=TURN-PUB-1 |\n   |\
    \                |                |                |                |\n   |  \
    \              |                |(16) Alloc Req  |                |\n   |    \
    \            |                |<---------------|                |\n   |      \
    \          |                |Src=R-NAT-PUB-2 |                |\n   |        \
    \        |                |Dest=TURN-PUB-1 |                |\n   |          \
    \      |                |                |                |\n   |            \
    \    |                |(17) Alloc Res  |                |\n   |              \
    \  |                |--------------->|                |\n   |                |\
    \                |Src=TURN-PUB-1  |                |\n   |                |  \
    \              |Dest=R-NAT-PUB-2|                |\n   |                |    \
    \            |Map=R-NAT-PUB-2 |                |\n   |                |      \
    \          |Rel=TURN-PUB-5  |                |\n   |                |        \
    \        |                |                |\n   |                |          \
    \      |                |(18) Alloc Res  |\n   |                |            \
    \    |                |--------------->|\n   |                |              \
    \  |                |Src=TURN-PUB-1  |\n   |                |                |\
    \                |Dest=R-PRIV-2   |\n   |                |                |  \
    \              |Map=R-NAT-PUB-2 |\n   |                |                |    \
    \            |Rel=TURN-PUB-5  |\n   |                |                |      \
    \          |                |\n   |                |                |        \
    \        |(19) SIP 200 OK |\n   |                |<-------------------------------------------------|\n\
    \   |                |                |                |                |\n  \
    \ |(20) SIP 200 OK |                |                |                |\n   |<---------------|\
    \                |                |                |\n   |                |  \
    \              |                |                |\n   |(21) SIP ACK    |    \
    \            |                |                |\n   |------------------------------------------------->|\
    \                |\n   |                |                |                |  \
    \              |\n   |                |                |                |(22)\
    \ SIP ACK    |\n   |                |                |                |--------------->|\n\
    \   |                |                |                |                |\n  \
    \ |(23) Bind Req   |                |                |                |\n   |------------------------>x\
    \       |                |                |\n   |Src=L-PRIV-1    |           \
    \     |                |                |\n   |Dest=R-PRIV-1   |             \
    \   |                |                |\n   |                |               \
    \ |                |                |\n   |(24) Bind Req   |                |\
    \                |                |\n   |--------------->|                |  \
    \              |                |\n   |Src=L-PRIV-1    |                |    \
    \            |                |\n   |Dest=R-NAT-PUB-1|                |      \
    \          |                |\n   |                |                |        \
    \        |                |\n   |                |(25) Bind Req   |          \
    \      |                |\n   |                |-------------------------------->|\
    \                |\n   |                |Src=L-NAT-PUB-1 |                |  \
    \              |\n   |                |Dest=R-NAT-PUB-1|                |    \
    \            |\n   |                |                |                |      \
    \          |\n   |                |                |                |(26) Bind\
    \ Req   |\n   |                |                |                |--------------->|\n\
    \   |                |                |                |Src=L-NAT-PUB-1 |\n  \
    \ |                |                |                |Dest=R-PRIV-1   |\n   |\
    \                |                |                |                |\n   |  \
    \              |                |                |(27) Bind Res   |\n   |    \
    \            |                |                |<---------------|\n   |      \
    \          |                |                |Src=R-PRIV-1    |\n   |        \
    \        |                |                |Dest=L-NAT-PUB-1|\n   |          \
    \      |                |                |Map=L-NAT-PUB-1 |\n   |            \
    \    |                |                |                |\n   |              \
    \  |                |(28) Bind Res   |                |\n   |                |<--------------------------------|\
    \                |\n   |                |                |Src=R-NAT-PUB-1 |  \
    \              |\n   |                |                |Dest=L-NAT-PUB-1|    \
    \            |\n   |                |                |Map=L-NAT-PUB-1 |      \
    \          |\n   |                |                |                |        \
    \        |\n   |(29) Bind Res   |                |                |          \
    \      |\n   |<---------------|                |                |            \
    \    |\n   |Src=R-NAT-PUB-1 |                |                |              \
    \  |\n   |Dest=L-PRIV-1   |                |                |                |\n\
    \   |Map=L-NAT-PUB-1 |                |                |                |\n  \
    \ |                |                |                |                |\n   |===================================================================|\n\
    \   |>>>>>>>>>>>>>>>>>>Outgoing RTP sent from L-PRIV-1 >>>>>>>>>>>>>>>>>|\n  \
    \ |===================================================================|\n   |\
    \                |                |                |                |\n   |  \
    \              |                |                |(30) Bind Req   |\n   |    \
    \            |                |        x<-----------------------|\n   |      \
    \          |                |                |Src=R-PRIV-1    |\n   |        \
    \        |                |                |Dest=L-PRIV-1   |\n   |          \
    \      |                |                |                |\n   |            \
    \    |                |                |(31) Bind Req   |\n   |              \
    \  |                |                |<---------------|\n   |                |\
    \                |                |Src=R-PRIV-1    |\n   |                |  \
    \              |                |Dest=L-NAT-PUB-1|\n   |                |    \
    \            |                |                |\n   |                |      \
    \          |(32) Bind Req   |                |\n   |                |<--------------------------------|\
    \                |\n   |                |                |Src=R-NAT-PUB-1 |  \
    \              |\n   |                |                |Dest=L-NAT-PUB-1|    \
    \            |\n   |                |                |                |      \
    \          |\n   |(33) Bind Req   |                |                |        \
    \        |\n   |<---------------|                |                |          \
    \      |\n   |Src=R-NAT-PUB-1 |                |                |            \
    \    |\n   |Dest=L-PRIV-1   |                |                |              \
    \  |\n   |                |                |                |                |\n\
    \   |(34) Bind Res   |                |                |                |\n  \
    \ |--------------->|                |                |                |\n   |Src=L-PRIV-1\
    \    |                |                |                |\n   |Dest=R-NAT-PUB-1|\
    \                |                |                |\n   |Map=R-NAT-PUB-1 |  \
    \              |                |                |\n   |                |    \
    \            |                |                |\n   |                |(35) Bind\
    \ Res   |                |                |\n   |                |-------------------------------->|\
    \                |\n   |                |Src=L-NAT-PUB-1 |                |  \
    \              |\n   |                |Dest=R-NAT-PUB-1|                |    \
    \            |\n   |                |Map=R-NAT-PUB-1 |                |      \
    \          |\n   |                |                |                |        \
    \        |\n   |                |                |                |(36) Bind Res\
    \   |\n   |                |                |                |--------------->|\n\
    \   |                |                |                |Src=L-NAT-PUB-1 |\n  \
    \ |                |                |                |Dest=R-PRIV-1   |\n   |\
    \                |                |                |Map=R-NAT-PUB-1 |\n   |  \
    \              |                |                |                |\n   |===================================================================|\n\
    \   |<<<<<<<<<<<<<<<<<<Outgoing RTP sent from R-PRIV-1 <<<<<<<<<<<<<<<<<|\n  \
    \ |===================================================================|\n   |(37)\
    \ Bind Req   |                |                |                |\n   |--------------->|\
    \                |                |                |\n   |Src=L-PRIV-1    |  \
    \              |                |                |\n   |Dest=R-NAT-PUB-1|    \
    \            |                |                |\n   |USE-CANDIDATE   |      \
    \          |                |                |\n   |                |        \
    \        |                |                |\n   |                |(38) Bind Req\
    \   |                |                |\n   |                |-------------------------------->|\
    \                |\n   |                |Src=L-NAT-PUB-1 |                |  \
    \              |\n   |                |Dest=R-NAT-PUB-1|                |    \
    \            |\n   |                |USE-CANDIDATE   |                |      \
    \          |\n   |                |                |                |        \
    \        |\n   |                |                |                |(39) Bind Req\
    \   |\n   |                |                |                |--------------->|\n\
    \   |                |                |                |Src=L-NAT-PUB-1 |\n  \
    \ |                |                |                |Dest=R-PRIV-1   |\n   |\
    \                |                |                |USE-CANDIDATE   |\n   |  \
    \              |                |                |                |\n   |    \
    \            |                |                |(40) Bind Res   |\n   |      \
    \          |                |                |<---------------|\n   |        \
    \        |                |                |Src=R-PRIV-1    |\n   |          \
    \      |                |                |Dest=L-NAT-PUB-1|\n   |            \
    \    |                |                |Map=L-NAT-PUB-1 |\n   |              \
    \  |                |                |                |\n   |                |\
    \                |(41) Bind Res   |                |\n   |                |<--------------------------------|\
    \                |\n   |                |                |Src=R-NAT-PUB-1 |  \
    \              |\n   |                |                |Dest=L-NAT-PUB-1|    \
    \            |\n   |                |                |Map=L-NAT-PUB-1 |      \
    \          |\n   |                |                |                |        \
    \        |\n   |(42) Bind Res   |                |                |          \
    \      |\n   |<---------------|                |                |            \
    \    |\n   |Src=R-NAT-PUB-1 |                |                |              \
    \  |\n   |Dest=L-PRIV-1   |                |                |                |\n\
    \   |Map=L-NAT-PUB-1 |                |                |                |\n  \
    \ |                |                |                |                |\n   |(43)\
    \ Bind Req   |                |                |                |\n   |--------------->|\
    \                |                |                |\n   |Src=L-PRIV-2    |  \
    \              |                |                |\n   |Dest=R-NAT-PUB-2|    \
    \            |                |                |\n   |                |      \
    \          |                |                |\n   |                |(44) Bind\
    \ Req   |                |                |\n   |                |-------------------------------->|\
    \                |\n   |                |Src=L-NAT-PUB-2 |                |  \
    \              |\n   |                |Dest=R-NAT-PUB-2|                |    \
    \            |\n   |                |                |                |      \
    \          |\n   |                |                |                |(45) Bind\
    \ Req   |\n   |                |                |                |--------------->|\n\
    \   |                |                |                |Src=L-NAT-PUB-2 |\n  \
    \ |                |                |                |Dest=R-PRIV-2   |\n   |\
    \                |                |                |                |\n   |  \
    \              |                |                |(46) Bind Res   |\n   |    \
    \            |                |                |<---------------|\n   |      \
    \          |                |                |Src=R-PRIV-2    |\n   |        \
    \        |                |                |Dest=L-NAT-PUB-2|\n   |          \
    \      |                |                |Map=L-NAT-PUB-2 |\n   |            \
    \    |                |                |                |\n   |              \
    \  |                |(47) Bind Res   |                |\n   |                |<--------------------------------|\
    \                |\n   |                |                |Src=R-NAT-PUB-2 |  \
    \              |\n   |                |                |Dest=L-NAT-PUB-2|    \
    \            |\n   |                |                |Map=L-NAT-PUB-2 |      \
    \          |\n   |                |                |                |        \
    \        |\n   |(48) Bind Res   |                |                |          \
    \      |\n   |<---------------|                |                |            \
    \    |\n   |Src=R-NAT-PUB-2 |                |                |              \
    \  |\n   |Dest=L-PRIV-2   |                |                |                |\n\
    \   |Map=L-NAT-PUB-2 |                |                |                |\n  \
    \ |                |                |                |                |\n   |===================================================================|\n\
    \   |>>>>>>>>>>>>>>>>>>Outgoing RTCP sent from L-PRIV-2 >>>>>>>>>>>>>>>>|\n  \
    \ |===================================================================|\n   |\
    \                |                |                |                |\n   |  \
    \              |                |                |(49) Bind Req   |\n   |    \
    \            |                |                |<---------------|\n   |      \
    \          |                |                |Src=R-PRIV-2    |\n   |        \
    \        |                |                |Dest=L-NAT-PUB-2|\n   |          \
    \      |                |                |                |\n   |            \
    \    |                |(50) Bind Req   |                |\n   |              \
    \  |<--------------------------------|                |\n   |                |\
    \                |Src=R-NAT-PUB-2 |                |\n   |                |  \
    \              |Dest=L-NAT-PUB-2|                |\n   |                |    \
    \            |                |                |\n   |(51) Bind Req   |      \
    \          |                |                |\n   |<---------------|        \
    \        |                |                |\n   |Src=R-NAT-PUB-2 |          \
    \      |                |                |\n   |Dest=L-PRIV-2   |            \
    \    |                |                |\n   |                |              \
    \  |                |                |\n   |(52) Bind Res   |                |\
    \                |                |\n   |--------------->|                |  \
    \              |                |\n   |Src=L-PRIV-2    |                |    \
    \            |                |\n   |Dest=R-NAT-PUB-2|                |      \
    \          |                |\n   |Map=R-NAT-PUB-2 |                |        \
    \        |                |\n   |                |                |          \
    \      |                |\n   |                |(53) Bind Res   |            \
    \    |                |\n   |                |-------------------------------->|\
    \                |\n   |                |Src=L-NAT-PUB-2 |                |  \
    \              |\n   |                |Dest=R-NAT-PUB-2|                |    \
    \            |\n   |                |Map=R-NAT-PUB-2 |                |      \
    \          |\n   |                |                |                |        \
    \        |\n   |                |                |                |(54) Bind Res\
    \   |\n   |                |                |                |--------------->|\n\
    \   |                |                |                |Src=L-NAT-PUB-2 |\n  \
    \ |                |                |                |Dest=R-PRIV-2   |\n   |\
    \                |                |                |Map=R-NAT-PUB-2 |\n   |  \
    \              |                |                |                |\n   |===================================================================|\n\
    \   |<<<<<<<<<<<<<<<<<<Outgoing RTCP sent from R-PRIV-2<<<<<<<<<<<<<<<<<|\n  \
    \ |===================================================================|\n   |(55)\
    \ Bind Req   |                |                |                |\n   |--------------->|\
    \                |                |                |\n   |Src=L-PRIV-2    |  \
    \              |                |                |\n   |Dest=R-NAT-PUB-2|    \
    \            |                |                |\n   |USE-CANDIDATE   |      \
    \          |                |                |\n   |                |        \
    \        |                |                |\n   |                |(56) Bind Req\
    \   |                |                |\n   |                |-------------------------------->|\
    \                |\n   |                |Src=L-NAT-PUB-2 |                |  \
    \              |\n   |                |Dest=R-NAT-PUB-2|                |    \
    \            |\n   |                |USE-CANDIDATE   |                |      \
    \          |\n   |                |                |                |        \
    \        |\n   |                |                |                |(57) Bind Req\
    \   |\n   |                |                |                |--------------->|\n\
    \   |                |                |                |Src=L-NAT-PUB-2 |\n  \
    \ |                |                |                |Dest=R-PRIV-2   |\n   |\
    \                |                |                |USE-CANDIDATE   |\n   |  \
    \              |                |                |                |\n   |    \
    \            |                |                |(58) Bind Res   |\n   |      \
    \          |                |                |<---------------|\n   |        \
    \        |                |                |Src=R-PRIV-2    |\n   |          \
    \      |                |                |Dest=L-NAT-PUB-2|\n   |            \
    \    |                |                |Map=L-NAT-PUB-2 |\n   |              \
    \  |                |                |                |\n   |                |\
    \                |(59) Bind Res   |                |\n   |                |<--------------------------------|\
    \                |\n   |                |                |Src=R-NAT-PUB-2 |  \
    \              |\n   |                |                |Dest=L-NAT-PUB-2|    \
    \            |\n   |                |                |Map=L-NAT-PUB-2 |      \
    \          |\n   |                |                |                |        \
    \        |\n   |(60) Bind Res   |                |                |          \
    \      |\n   |<---------------|                |                |            \
    \    |\n   |Src=R-NAT-PUB-2 |                |                |              \
    \  |\n   |Dest=L-PRIV-2   |                |                |                |\n\
    \   |Map=L-NAT-PUB-2 |                |                |                |\n  \
    \ |                |                |                |                |\n   |\
    \                |                |                |                |\n   |(61)\
    \ SIP INVITE |                |                |                |\n   |------------------------------------------------->|\
    \                |\n   |                |                |                |  \
    \              |\n   |                |                |                |(62)\
    \ SIP INVITE |\n   |                |                |                |--------------->|\n\
    \   |                |                |                |                |\n  \
    \ |                |                |                |(63) SIP 200 OK |\n   |\
    \                |<-------------------------------------------------|\n   |  \
    \              |                |                |                |\n   |(64)\
    \ SIP 200 OK |                |                |                |\n   |<---------------|\
    \                |                |                |\n   |                |  \
    \              |                |                |\n   |(65) SIP ACK    |    \
    \            |                |                |\n   |------------------------------------------------->|\
    \                |\n   |                |                |                |  \
    \              |\n   |                |                |                |(66)\
    \ SIP ACK    |\n   |                |                |                |--------------->|\n\
    \   |                |                |                |                |\n  \
    \             Figure 13: Endpoint-Independent NAT with ICE\n   o  On deciding\
    \ to initiate a SIP voice session, the SIP client L\n      starts a local STUN\
    \ client.  The STUN client generates a TURN\n      Allocate request as indicated\
    \ in (1) from Figure 13 that also\n      highlights the source address and port\
    \ combination for which the\n      client device wishes to obtain a mapping. \
    \ The Allocate request is\n      sent through the NAT towards the public Internet.\n\
    \   o  The Allocate message (2) traverses the NAT to the public Internet\n   \
    \   towards the public TURN server.  Note that the source address of\n      the\
    \ Allocate request now represents the public address and port\n      from the\
    \ public side of the NAT (L-NAT-PUB-1).\n   o  The TURN server receives the Allocate\
    \ request and processes it\n      appropriately.  This results in a successful\
    \ Allocate response\n      being generated and returned (3).  The message contains\
    \ details of\n      the server reflexive address that is to be used by the originating\n\
    \      client to receive media (see 'Map=L-NAT-PUB-1') from (3)).  It\n      also\
    \ contains an appropriate TURN-relayed address that can be used\n      at the\
    \ STUN server (see 'Rel=TURN-PUB-2').\n   o  The Allocate response traverses back\
    \ through the NAT using the\n      binding created by the initial Allocate request\
    \ and presents the\n      new mapped address to the client (4).  The process is\
    \ repeated and\n      a second STUN derived set of addresses is obtained, as illustrated\n\
    \      in (5)-(8) in Figure 13.  At this point, the User Agent behind the\n  \
    \    NAT has pairs of derived external server reflexive and relayed\n      representations.\
    \  The client can also gather IP addresses and\n      ports via other mechanisms\
    \ (e.g., NAT-PMP [NAT-PMP], UPnP IGD\n      [UPnP-IGD]) or similar.\n   o  The\
    \ client now constructs a SIP INVITE message (9).  The INVITE\n      request will\
    \ use the addresses it has obtained in the previous\n      STUN/TURN interactions\
    \ to populate the SDP of the SIP INVITE.\n      This should be carried out in\
    \ accordance with the semantics\n      defined in the ICE specification [RFC5245],\
    \ as shown below in\n      Figure 14:\n v=0\n o=test 2890844526 2890842807 IN\
    \ IP4 $L-PRIV-1\n c=IN IP4 $L-PRIV-1.address\n t=0 0\n a=ice-pwd:$LPASS\n a=ice-ufrag:$LUNAME\n\
    \ m=audio $L-PRIV-1.port RTP/AVP 0\n a=rtpmap:0 PCMU/8000\n a=rtcp:$L-PRIV-2.port\n\
    \ a=candidate:$L1 1 UDP 2130706431 $L-PRIV-1.address $L-PRIV-1.port\n        \
    \     typ host\n a=candidate:$L1 2 UDP 2130706430 $L-PRIV-2.address $L-PRIV-2.port\n\
    \             typ host\n a=candidate:$L2 1 UDP 1694498815 $L-NAT-PUB-1.address\
    \ $L-NAT-PUB-1.port\n             typ srflx raddr $L-PRIV-1.address rport $L-PRIV-1.port\n\
    \ a=candidate:$L2 2 UDP 1694498814 $L-NAT-PUB-2.address $L-NAT-PUB-2.port\n  \
    \           typ srflx raddr $L-PRIV-1.address rport $L-PRIV-2.port\n a=candidate:$L3\
    \ 1 UDP 16777215 $STUN-PUB-2.address $STUN-PUB-2.port\n             typ relay\
    \ raddr $L-PRIV-1.address rport $L-PRIV-1.port\n a=candidate:$L3 2 UDP 16777214\
    \ $STUN-PUB-3.address $STUN-PUB-3.port\n             typ relay raddr $L-PRIV-1.address\
    \ rport $L-PRIV-2.port\n                         Figure 14: ICE SDP Offer\n  \
    \ o  The SDP has been constructed to include all the available\n      candidates\
    \ that have been assembled.  The first set of candidates\n      (as identified\
    \ by Foundation $L1) contains two local addresses\n      that have the highest\
    \ priority.  They are also encoded into the\n      connection (c=) and media (m=)\
    \ lines of the SDP.  The second set\n      of candidates, as identified by Foundation\
    \ $L2, contains the two\n      server reflexive addresses obtained from the STUN\
    \ server for both\n      RTP and RTCP traffic (identified by candidate-id $L2).\
    \  This entry\n      has been given a priority lower than the pair $L1 by the\
    \ client.\n      The third and final set of candidates represents the relayed\n\
    \      addresses (as identified by $L3) obtained from the STUN server.\n     \
    \ This pair has the lowest priority and will be used as a last\n      resort if\
    \ both $L1 and $L2 fail.\n   o  The SIP signaling then traverses the NAT and sets\
    \ up the SIP\n      session (9)-(10).  On advertising a candidate address, the\
    \ client\n      should have a local STUN server running on each advertised\n \
    \     candidate address.  This is for the purpose of responding to\n      incoming\
    \ STUN connectivity checks.\n   o  On receiving the SIP INVITE request (10) client\
    \ R also starts\n      local STUN servers on appropriate address/port combinations\
    \ and\n      gathers potential candidate addresses to be encoded into the SDP\n\
    \      (as the originating client did).  Steps (11-18) involve client R\n    \
    \  carrying out the same steps as client L. This involves obtaining\n      local,\
    \ server reflexive, and relayed addresses.  Client R is now\n      ready to generate\
    \ an appropriate answer in the SIP 200 OK message\n      (19).  The example answer\
    \ follows in Figure 15:\n v=0\n o=test 3890844516 3890842803 IN IP4 $R-PRIV-1\n\
    \ c=IN IP4 $R-PRIV-1.address\n t=0 0\n a=ice-pwd:$RPASS\n m=audio $R-PRIV-1.port\
    \ RTP/AVP 0\n a=rtpmap:0 PCMU/8000\n a=rtcp:$R-PRIV-2.port\n a=candidate:$L1 1\
    \ UDP 2130706431 $R-PRIV-1.address $R-PRIV-1.port\n             typ host\n a=candidate:$L1\
    \ 2 UDP 2130706430 $R-PRIV-2.address $R-PRIV-2.port\n             typ host\n a=candidate:$L2\
    \ 1 UDP 1694498815 $R-NAT-PUB-1.address $R-NAT-PUB-1.port\n             typ srflx\
    \ raddr $R-PRIV-1.address rport $R-PRIV-1.port\n a=candidate:$L2 2 UDP 1694498814\
    \ $R-NAT-PUB-2.address $R-NAT-PUB-2.port\n             typ srflx raddr $R-PRIV-1.address\
    \ rport $R-PRIV-1.port\n a=candidate:$L3 1 UDP 16777215 $STUN-PUB-2.address $STUN-PUB-4.port\n\
    \             typ relay raddr $R-PRIV-1.address rport $R-PRIV-1.port\n a=candidate:$L3\
    \ 2 UDP 16777214 $STUN-PUB-3.address $STUN-PUB-5.port\n             typ relay\
    \ raddr $R-PRIV-1.address rport $R-PRIV-1.port\n                         Figure\
    \ 15: ICE SDP Answer\n   o  The two clients have now exchanged SDP using offer/answer\
    \ and can\n      now continue with the ICE processing -- User Agent L assuming\
    \ the\n      role controlling agent, as specified by ICE.  The clients are now\n\
    \      required to form their Candidate check lists to determine which\n     \
    \ will be used for the media streams.  In this example, User Agent\n      L's\
    \ Foundation 1 is paired with User Agent R's Foundation 1, User\n      Agent L's\
    \ Foundation 2 is paired with User Agent R's Foundation 2,\n      and finally\
    \ User Agent L's Foundation 3 is paired with User Agent\n      R's Foundation\
    \ 3.  User Agents L and R now have a complete\n      candidate checklist.  Both\
    \ clients now use the algorithm provided\n      in ICE to determine candidate\
    \ pair priorities and sort into a list\n      of decreasing priorities.  In this\
    \ example, both User Agents L and\n      R will have lists that firstly specify\
    \ the host address\n      (Foundation $L1), then the server reflexive address\
    \ (Foundation\n      $L2), and lastly the relayed address (Foundation $L3).  All\n\
    \      candidate pairs have an associate state as specified in ICE.  At\n    \
    \  this stage, all of the candidate pairs for User Agents L and R are\n      initialized\
    \ to the 'Frozen' state.  The User Agents then scan the\n      list and move the\
    \ candidates to the 'Waiting' state.  At this\n      point, both clients will\
    \ periodically, starting with the highest\n      candidate pair priority, work\
    \ their way down the list issuing STUN\n      checks from the local candidate\
    \ to the remote candidate (of the\n      candidate pair).  As a STUN check is\
    \ attempted from each local\n      candidate in the list, the candidate pair state\
    \ transitions to\n      'In-Progress'.  As illustrated in (23), client L constructs\
    \ a STUN\n      connectivity check in an attempt to validate the remote candidate\n\
    \      address received in the SDP of the 200 OK (20) for the highest\n      priority\
    \ in the checklist.  As a private address was specified in\n      the active address\
    \ in the SDP, the STUN connectivity check fails\n      to reach its destination\
    \ causing a STUN failure.  Client L\n      transitions the state for this candidate\
    \ pair to 'Failed'.  In the\n      meantime, client L is attempting a STUN connectivity\
    \ check for the\n      second candidate pair in the returned SDP with the second\
    \ highest\n      priority (24).  As can be seen from messages (24) to (29), the\n\
    \      STUN Bind request is successful and returns a positive outcome for\n  \
    \    the connectivity check.  Client L is now free to send media to the\n    \
    \  peer using the candidate pair.  Immediately after sending its 200\n      OK,\
    \ client R also carries out the same set of binding requests.\n      It firstly\
    \ (in parallel) tries to contact the active address\n      contained in the SDP\
    \ (30) which results in failure.\n   o  In the meantime, a successful response\
    \ to a STUN connectivity\n      check by User Agent R (27) results in a tentative\
    \ check in the\n      reverse direction -- this is illustrated by messages (31)\
    \ to (36).\n      Once this check has succeeded, User Agent R can transition the\n\
    \      state of the appropriate candidate to 'Succeeded', and media can\n    \
    \  be sent (RTP).  The previously (31-36) described check confirm on\n      both\
    \ sides (User Agents L and R) that connectivity can be achieved\n      using the\
    \ appropriate candidate pair.  User Agent L, as the\n      controlling client\
    \ now sends another connectivity check for the\n      candidate pair, this time\
    \ including the 'USE-CANDIDATE' attribute\n      as specified in ICE to signal\
    \ the chosen candidate.  This exchange\n      is illustrated in messages (37)\
    \ to (42).\n   o  As part of the process in this example, both L and R will now\n\
    \      complete the same connectivity checks for part 2 of the component\n   \
    \   named for the favored 'Foundation' selected for use with RTCP.\n      The\
    \ connectivity checks for part 2 of the candidate component are\n      shown in\
    \ L (43-48) and R (49-54).  Once this has succeeded, User\n      Agent L as the\
    \ controlling client sends another connectivity check\n      for the candidate\
    \ pair.  This time the 'USE-CANDIDATE' attribute\n      is again specified to\
    \ signal the chosen candidate for component 2.\n   o  The candidates have now\
    \ been fully verified (and selected), and as\n      they are the highest priority,\
    \ an updated offer (61-62) is now\n      sent from the offerer (client L) to the\
    \ answerer (client R)\n      representing the new active candidates.  The new\
    \ offer would look\n      as follows:\n v=0\n o=test 2890844526 2890842808 IN\
    \ IP4 $L-PRIV-1\n c=IN IP4 $L-NAT-PUB-1.address\n t=0 0\n a=ice-pwd:$LPASS\n a=ice-ufrag:$LUNAME\n\
    \ m=audio $L-NAT-PUB-1.port RTP/AVP 0\n a=rtpmap:0 PCMU/8000\n a=rtcp:$L-NAT-PUB-2.port\n\
    \ a=candidate:$L2 1 UDP 2203948363 $L-NAT-PUB-1.address $L-NAT-PUB-1.port\n  \
    \           typ srflx raddr $L-PRIV-1.address rport $L-PRIV-1.port\n a=candidate:$L2\
    \ 2 UDP 2172635342 $L-NAT-PUB-2.address $L-NAT-PUB-2.port\n             typ srflx\
    \ raddr $L-PRIV-1.address rport $L-PRIV-2.port\n                     Figure 16:\
    \ ICE SDP Updated Offer\n   o  The resulting answer (63-64) for R would look as\
    \ follows:\n v=0\n o=test 3890844516 3890842804 IN IP4 $R-PRIV-1\n c=IN IP4 $R-PRIV-1.address\n\
    \ t=0 0\n a=ice-pwd:$RPASS\n a=ice-ufrag:$RUNAME\n m=audio $R-PRIV-1.port RTP/AVP\
    \ 0\n a=rtpmap:0 PCMU/8000\n a=rtcp:$R-PRIV-2.port\n a=candidate:$L2 1 UDP 2984756463\
    \ $R-NAT-PUB-1.address $R-NAT-PUB-1.port\n             typ srflx raddr $R-PRIV-1.address\
    \ rport $R-PRIV-1.port\n a=candidate:$L2 2 UDP 2605968473 $R-NAT-PUB-2.address\
    \ $R-NAT-PUB-2.port\n             typ srflx raddr $R-PRIV-1.address rport $R-PRIV-2.port\n\
    \                     Figure 17: ICE SDP Updated Answer\n"
- title: 5.2.2.  Address/Port-Dependent NAT
  contents:
  - '5.2.2.  Address/Port-Dependent NAT

    '
- title: 5.2.2.1.  STUN Failure
  contents:
  - "5.2.2.1.  STUN Failure\n   This section highlights that although using STUN techniques\
    \ is the\n   preferred mechanism for traversal of NAT, it does not solve every\n\
    \   case.  The use of basic STUN on its own will not guarantee traversal\n   through\
    \ every NAT type, hence the recommendation that ICE is the\n   preferred option.\n\
    \     Client     ADDRESS/PORT-Dependent     STUN                [..]\n       \
    \                  NAT              Server\n       |                  |      \
    \            |                  |\n       |(1) BIND Req      |               \
    \   |                  |\n       |Src=L-PRIV-1      |                  |     \
    \             |\n       |Dest=STUN-PUB     |                  |              \
    \    |\n       |----------------->|                  |                  |\n  \
    \     |                  |(2) BIND Req      |                  |\n       |   \
    \               |Src=NAT-PUB-1     |                  |\n       |            \
    \      |Dest=STUN-PUB     |                  |\n       |                  |----------------->|\
    \                  |\n       |                  |                  |         \
    \         |\n       |                  |(3) BIND Resp     |                  |\n\
    \       |                  |<-----------------|                  |\n       | \
    \                 |Src=STUN-PUB      |                  |\n       |          \
    \        |Dest=NAT-PUB-1    |                  |\n       |                  |Map=NAT-PUB-1\
    \     |                  |\n       |                  |                  |   \
    \               |\n       |(4) BIND Resp     |                  |            \
    \      |\n       |<-----------------|                  |                  |\n\
    \       |Src=STUN-PUB      |                  |                  |\n       |Dest=L-PRIV-1\
    \     |                  |                  |\n       |Map=NAT-PUB-1     |   \
    \               |                  |\n       |                  |            \
    \      |                  |\n       |(5)SIP INVITE     |                  |  \
    \                |\n       |------------------------------------------------------->|\n\
    \       |                  |                  |                  |\n       | \
    \                 |                  |(6)SIP 200 OK     |\n       |          \
    \        |<------------------------------------|\n       |                  |\
    \                  |                  |\n       |(7)SIP 200 OK     |         \
    \         |                  |\n       |<-----------------|                  |\
    \                  |\n       |                  |                  |         \
    \         |\n       |========================================================|\n\
    \       |>>>>>>>>>>>>>>Outgoing Media sent from L-PRIV-1>>>>>>>>>|\n       |========================================================|\n\
    \       |                  |                  |                  |\n       | \
    \                 x=====================================|\n       |          \
    \        xIncoming Media sent to L-PRIV-1<<<<<<|\n       |                  x=====================================|\n\
    \       |                  |                  |                  |\n       |(8)SIP\
    \ ACK        |                  |                  |\n       |----------------->|\
    \                  |                  |\n       |                  |(9) SIP ACK\
    \       |                  |\n       |                  |------------------------------------>|\n\
    \       |                  |                  |                  |\n         Figure\
    \ 18: Address/Port-Dependent NAT with STUN - Failure\n   The example in Figure\
    \ 18 is conveyed in the context of a client\n   behind the Address/Port-Dependent\
    \ NAT initiating a call.  It should\n   be noted that the same problem applies\
    \ when a client receives a SIP\n   invitation and is behind a Address/Port-Dependent\
    \ NAT.\n   o  In Figure 18, the client behind the NAT obtains a server reflexive\n\
    \      representation using standard STUN mechanisms (1)-(4) that have\n     \
    \ been used in previous examples in this document (e.g.,\n      Section 5.2.1.1.1).\n\
    \   o  The external mapped address (server reflexive) obtained is also\n     \
    \ used in the outgoing SDP contained in the SIP INVITE request (5).\n   o  In\
    \ this example, the client is still able to send media to the\n      external\
    \ client.  The problem occurs when the client outside the\n      NAT tries to\
    \ use the reflexive address supplied in the outgoing\n      INVITE request to\
    \ traverse media back through the Address/\n      Port-Dependent NAT.\n   o  A\
    \ Address/Port-Dependent NAT has differing rules from the\n      Endpoint-Independent\
    \ type of NAT (as defined in RFC 4787\n      [RFC4787]).  For any internal IP\
    \ address and port combination,\n      data sent to a different external destination\
    \ does not provide the\n      same public mapping at the NAT.  In Figure 18, the\
    \ STUN query\n      produced a valid external mapping for receiving media.  This\n\
    \      mapping, however, can only be used in the context of the original\n   \
    \   STUN request that was sent to the STUN server.  Any packets that\n      attempt\
    \ to use the mapped address and that do not originate from\n      the STUN server\
    \ IP address and optionally port will be dropped at\n      the NAT.  Figure 18\
    \ shows the media being dropped at the NAT after\n      (7) and before (8).  This\
    \ then leads to one-way audio.\n"
- title: 5.2.2.2.  TURN Solution
  contents:
  - "5.2.2.2.  TURN Solution\n   As identified in Section 5.2.2.1, STUN provides a\
    \ useful tool for the\n   traversal of the majority of NATs but fails with Address/\n\
    \   Port-Dependent NAT.  The TURN extensions [RFC5766] address this\n   scenario.\
    \  TURN extends STUN to allow a client to request a relayed\n   address at the\
    \ TURN server rather than a reflexive representation.\n   This then introduces\
    \ a media relay in the path for NAT traversal (as\n   described in Section 4.2.3.2).\
    \  The following example explains how\n   TURN solves the previous failure when\
    \ using STUN to traverse a\n   Address/Port-Dependent NAT.  It should be noted\
    \ that TURN works most\n   effectively when used in conjunction with ICE.  Using\
    \ TURN on its own\n   results in all media being relayed through a TURN server;\
    \ this is not\n   efficient.\n       L        Address/Port-Dependent     TURN\
    \                [..]\n                         NAT              Server\n    \
    \   |                  |                  |                  |\n       |(1) Alloc\
    \ Req     |                  |                  |\n       |Src=L-PRIV-1      |\
    \                  |                  |\n       |Dest=STUN-PUB-1   |         \
    \         |                  |\n       |----------------->|                  |\
    \                  |\n       |                  |                  |         \
    \         |\n       |                  |(2) Alloc Req     |                  |\n\
    \       |                  |Src=NAT-PUB-1     |                  |\n       | \
    \                 |Dest=STUN-PUB-1   |                  |\n       |          \
    \        |----------------->|                  |\n       |                  |\
    \                  |                  |\n       |                  |(3) Alloc\
    \ Resp    |                  |\n       |                  |<-----------------|\
    \                  |\n       |                  |Src=STUN-PUB-1    |         \
    \         |\n       |                  |Dest=NAT-PUB-1    |                  |\n\
    \       |                  |Map=NAT-PUB-1     |                  |\n       | \
    \                 |Rel=STUN-PUB-2    |                  |\n       |          \
    \        |                  |                  |\n       |(4) Alloc Resp    |\
    \                  |                  |\n       |<-----------------|         \
    \         |                  |\n       |Src=STUN-PUB-1    |                  |\
    \                  |\n       |Dest=L-PRIV-1     |                  |         \
    \         |\n       |Map=NAT-PUB-1     |                  |                  |\n\
    \       |Rel=STUN-PUB-2    |                  |                  |\n       | \
    \                 |                  |                  |\n       |(5) Alloc Req\
    \     |                  |                  |\n       |Src=L-PRIV-2      |   \
    \               |                  |\n       |Dest=STUN-PUB-1   |            \
    \      |                  |\n       |----------------->|                  |  \
    \                |\n       |                  |                  |           \
    \       |\n       |                  |(6) Alloc Req     |                  |\n\
    \       |                  |Src=NAT-PUB-2     |                  |\n       | \
    \                 |Dest=STUN-PUB-1   |                  |\n       |          \
    \        |----------------->|                  |\n       |                  |\
    \                  |                  |\n       |                  |(7) Alloc\
    \ Resp    |                  |\n       |                  |<-----------------|\
    \                  |\n       |                  |Src=STUN-PUB-1    |         \
    \         |\n       |                  |Dest=NAT-PUB-2    |                  |\n\
    \       |                  |Map=NAT-PUB-2     |                  |\n       | \
    \                 |Rel=STUN-PUB-3    |                  |\n       |          \
    \        |                  |                  |\n       |(8) Alloc Resp    |\
    \                  |                  |\n       |<-----------------|         \
    \         |                  |\n       |Src=STUN-PUB-1    |                  |\
    \                  |\n       |Dest=L-PRIV-2     |                  |         \
    \         |\n       |Map=NAT-PUB-2     |                  |                  |\n\
    \       |Rel=STUN-PUB-3    |                  |                  |\n       | \
    \                 |                  |                  |\n       |(9)SIP INVITE\
    \     |                  |                  |\n       |----------------->|   \
    \               |                  |\n       |                  |            \
    \      |                  |\n       |                  |(10)SIP INVITE    |  \
    \                |\n       |                  |------------------------------------>|\n\
    \       |                  |                  |                  |\n       | \
    \                 |                  |(11)SIP 200 OK    |\n       |          \
    \        |<------------------------------------|\n       |                  |\
    \                  |                  |\n       |(12)SIP 200 OK    |         \
    \         |                  |\n       |<-----------------|                  |\
    \                  |\n       |                  |                  |         \
    \         |\n       |========================================================|\n\
    \       |>>>>>>>>>>>>>Outgoing Media sent from L-PRIV-1>>>>>>>>>>|\n       |========================================================|\n\
    \       |                  |                  |                  |\n       | \
    \                 |                  |==================|\n       |          \
    \        |                  |<<<Media Sent to<<|\n       |                  |\
    \                  |<<<<STUN-PUB-2<<<<|\n       |                  |         \
    \         |==================|\n       |                  |                  |\
    \                  |\n       |=====================================|         \
    \         |\n       |<Incoming Media Relayed to L-PRIV-1<<|                  |\n\
    \       |=====================================|                  |\n       | \
    \                 |                  |                  |\n       |          \
    \        |                  |==================|\n       |                  |\
    \                  |<<<RTCP Sent to<<>|\n       |                  |         \
    \         |<<<<STUN-PUB-3<<<<|\n       |                  |                  |==================|\n\
    \       |                  |                  |                  |\n       |=====================================|\
    \                  |\n       |<<Incoming RTCP Relayed to L-PRIV-2<<|         \
    \         |\n       |=====================================|                  |\n\
    \       |                  |                  |                  |\n       |(13)SIP\
    \ ACK       |                  |                  |\n       |----------------->|\
    \                  |                  |\n       |                  |         \
    \         |                  |\n       |                  |(14) SIP ACK      |\
    \                  |\n       |                  |------------------------------------>|\n\
    \       |                  |                  |                  |\n         Figure\
    \ 19: Address/Port-Dependent NAT with TURN - Success\n   o  In this example, client\
    \ L issues a TURN allocate request (1) to\n      obtained a relay address at the\
    \ STUN server.  The request\n      traverses through the Address/Port-Dependent\
    \ NAT and reaches the\n      STUN server (2).  The STUN server generates an Allocate\
    \ response\n      (3) that contains both a server reflexive address (Map=NAT-PUB-1)\n\
    \      of the client and also a relayed address (Rel=STUN-PUB-2).  The\n     \
    \ relayed address maps to an address mapping on the STUN server that\n      is\
    \ bound to the public pinhole that has been opened on the NAT by\n      the Allocate\
    \ request.  This results in any traffic sent to the\n      TURN server relayed\
    \ address (Rel=STUN-PUB-2) being forwarded to\n      the external representation\
    \ of the pinhole created by the Allocate\n      request (NAT-PUB-1).\n   o  The\
    \ TURN derived address (STUN-PUB-2) arrives back at the\n      originating client\
    \ (4) in an Allocate response.  This address can\n      then be used in the SDP\
    \ for the outgoing SIP INVITE request as\n      shown in the following example\
    \ (note that the example also\n      includes client L obtaining a second relay\
    \ address for use in the\n      RTCP attribute (5-8)):\n      v=0\n      o=test\
    \ 2890844342 2890842164 IN IP4 $L-PRIV-1\n      c=IN IP4 $STUN-PUB-2.address\n\
    \      t=0 0\n      m=audio $STUN-PUB-2.port RTP/AVP 0\n      a=rtcp:$STUN-PUB-3.port\n\
    \   o  On receiving the INVITE request, the User Agent Server (UAS) is\n     \
    \ able to stream media and RTCP to the relay address (STUN-PUB-2 and\n      STUN-PUB-3)\
    \ at the STUN server.  As shown in Figure 19 (between\n      messages (12) and\
    \ (13), the media from the UAS is directed to the\n      relayed address at the\
    \ STUN server.  The STUN server then forwards\n      the traffic to the open pinholes\
    \ in the Address/Port-Dependent NAT\n      (NAT-PUB-1 and NAT-PUB-2).  The media\
    \ traffic is then able to\n      traverse the Address/Port-Dependent NAT and arrives\
    \ back at client\n      L.\n   o  TURN on its own will work for Address/Port-Dependent\
    \ and other\n      types of NAT mentioned in this specification but should only\
    \ be\n      used as a last resort.  The relaying of media through an external\n\
    \      entity is not an efficient mechanism for NAT traversal and comes\n    \
    \  at a high processing cost.\n"
- title: 5.2.2.3.  ICE Solution
  contents:
  - "5.2.2.3.  ICE Solution\n   The previous two examples have highlighted the problem\
    \ with using\n   core STUN for all forms of NAT traversal and a solution using\
    \ TURN\n   for the Address/Port-Dependent NAT case.  The RECOMMENDED mechanism\n\
    \   for traversing all varieties of NAT is using ICE, as detailed in\n   Section\
    \ 4.2.3.3.  ICE makes use of core STUN, TURN and any other\n   mechanism (e.g.,\
    \ NAT-PMP[NAT-PMP], UPnP IGD[UPnP-IGD]) to provide a\n   list of prioritized addresses\
    \ that can be used for media traffic.\n   Detailed examples of ICE can be found\
    \ in Section 5.2.1.2.1.  These\n   examples are associated with an Endpoint-Independent\
    \ type NAT but can\n   be applied to any NAT type variation, including Address/\n\
    \   Port-Dependent type NAT.  The ICE procedures carried out are the\n   same.\
    \  For a list of candidate addresses, a client will choose where\n   to send media\
    \ dependent on the results of the STUN connectivity\n   checks and associated\
    \ priority (highest priority wins).  It should be\n   noted that the inclusion\
    \ of a NAT displaying Address/Port-Dependent\n   properties does not automatically\
    \ result in relayed media.  In fact,\n   ICE processing will avoid use of media\
    \ relay with the exception of\n   two clients that both happen to be behind a\
    \ NAT using Address/\n   Port-Dependent characteristics.  The connectivity checks\
    \ and\n   associated selection algorithm enable traversal in this case.\n   Figure\
    \ 20 and the following description provide a guide as to how\n   this is achieved\
    \ using the ICE connectivity checks.  This is an\n   abbreviated example that\
    \ assumes successful SIP offer/answer exchange\n   and illustrates the connectivity\
    \ check flow.\n       L      Address/Port-Dependent  Endpoint-Independent    \
    \  R\n                        L-NAT               R-NAT\n       |========================================================|\n\
    \       |               SIP OFFER/ANSWER EXCHANGE                |\n       |========================================================|\n\
    \       |                  |                  |                  |\n       | \
    \                 |                  |(1)Bind Req       |\n       |          \
    \        |                  |<-----------------|\n       |                  |\
    \                  |Src=R=PRIV-1      |\n       |                  |         \
    \         |Dest=L-NAT-PUB-1  |\n       |                  |                  |\
    \                  |\n       |                  |(2)Bind Req       |         \
    \         |\n       |                  x<-----------------|                  |\n\
    \       |                  |Src=R-NAT-PUB-1   |                  |\n       | \
    \                 |Dest=L-NAT-PUB-1  |                  |\n       |          \
    \        |                  |                  |\n       |(3)Bind Req       |\
    \                  |                  |\n       |----------------->|         \
    \         |                  |\n       |Src=L-PRIV-1      |                  |\
    \                  |\n       |Dest=R-NAT-PUB-1  |                  |         \
    \         |\n       |                  |                  |                  |\n\
    \       |                  |(4)Bind Req       |                  |\n       | \
    \                 |----------------->|                  |\n       |          \
    \        |Src=L-NAT-PUB-1   |                  |\n       |                  |Dest=R-NAT-PUB-1\
    \  |                  |\n       |                  |                  |      \
    \            |\n       |                  |                  |(5)Bind Req    \
    \   |\n       |                  |                  |----------------->|\n   \
    \    |                  |                  |Src=L-NAT-PUB-1   |\n       |    \
    \              |                  |Dest=R-PRIV-1     |\n       |             \
    \     |                  |                  |\n       |                  |   \
    \               |(6)Bind Resp      |\n       |                  |            \
    \      |<-----------------|\n       |                  |                  |Src=R-PRIV-1\
    \      |\n       |                  |                  |Dest=L-NAT-PUB-1  |\n\
    \       |                  |                  |                  |\n       | \
    \                 |(7)Bind Resp      |                  |\n       |          \
    \        |<-----------------|                  |\n       |                  |Src=R-NAT-PUB-1\
    \   |                  |\n       |                  |Dest=L-NAT-PUB-1  |     \
    \             |\n       |                  |                  |              \
    \    |\n       |(8)Bind Resp      |                  |                  |\n  \
    \     |<-----------------|                  |                  |\n       |Src=R-NAT-PUB-1\
    \   |                  |                  |\n       |Dest=L-PRIV-1     |     \
    \             |                  |\n       |                  |              \
    \    |                  |\n       |                  |                  |(9)Bind\
    \ Req       |\n       |                  |                  |<-----------------|\n\
    \       |                  |                  |Src=R-Priv-1      |\n       | \
    \                 |                  |Dest=L-NAT-PUB-1  |\n       |          \
    \        |(10)Bind Req      |                  |\n       |                  |<-----------------|\
    \                  |\n       |                  |Src=R-NAT-PUB-1   |         \
    \         |\n       |                  |Dest=L-NAT-PUB-1  |                  |\n\
    \       |                  |                  |                  |\n       |(11)Bind\
    \ Req      |                  |                  |\n       |<-----------------|\
    \                  |                  |\n       |Src=R-NAT-PUB-1   |         \
    \         |                  |\n       |Dest=L-PRIV-1     |                  |\
    \                  |\n       |                  |                  |         \
    \         |\n       |(12)Bind Resp     |                  |                  |\n\
    \       |----------------->|                  |                  |\n       |Src=L-PRIV-1\
    \      |                  |                  |\n       |Dest=L-NAT-PUB-1  |  \
    \                |                  |\n       |                  |           \
    \       |                  |\n       |                  |(13)Bind Resp     | \
    \                 |\n       |                  |----------------->|          \
    \        |\n       |                  |Src=L-NAT-PUB-1   |                  |\n\
    \       |                  |Dest=R-NAT-PUB-1  |                  |\n       | \
    \                 |                  |                  |\n       |          \
    \        |                  |(14)Bind Resp     |\n       |                  |\
    \                  |----------------->|\n       |                  |         \
    \         |Src=L-NAT-PUB-1   |\n       |                  |                  |Dest=R-PRIV-1\
    \     |\n       |                  |                  |                  |\n \
    \         Figure 20: Single Address/Port-Dependent NAT - Success\n   In this abbreviated\
    \ example, client R has already received a SIP\n   INVITE request and is starting\
    \ its connectivity checks with client L.\n    Client R generates a connectivity\
    \ check (1) and sends to client L's\n   information as presented in the SDP offer.\
    \  The request arrives at\n   client L's Address/Port-Dependent NAT and fails\
    \ to traverse as there\n   is no NAT binding.  This would then move the connectivity\
    \ check to a\n   failed state.  In the meantime, client L has received the SDP\
    \ answer\n   in the SIP request and will also commence connectivity checks.  A\n\
    \   check is dispatched (3) to client R.  The check is able to traverse\n   the\
    \ NAT due to the association set up in the previously failed check\n   (1).  The\
    \ full Bind request/response is shown in steps (3)-(8).  As\n   part of a candidate\
    \ pair, client R will now successfully be able to\n   complete the checks, as\
    \ illustrated in steps (9)-(14).  The result is\n   a successful pair of candidates\
    \ that can be used without the need to\n   relay any media.\n   In conclusion,\
    \ the only time media needs to be relayed is a result of\n   clients both behind\
    \ Address/Port-Dependent NATs.  As you can see from\n   the example in this section,\
    \ neither side would be able to complete\n   connectivity checks with the exception\
    \ of the Relayed candidates.\n"
- title: 6.  IPv4-IPv6 Transition
  contents:
  - "6.  IPv4-IPv6 Transition\n   This section describes how IPv6-only SIP User Agents\
    \ can communicate\n   with IPv4-only SIP User Agents.  While the techniques discussed\
    \ in\n   this document primarily contain examples of traversing NATs to allow\n\
    \   communications between hosts in private and public networks, they are\n  \
    \ by no means limited to such scenarios.  The same NAT traversal\n   techniques\
    \ can also be used to establish communication in a\n   heterogeneous network environment\
    \ -- e.g., communication between an\n   IPv4 host and an IPv6 host.\n"
- title: 6.1.  IPv4-IPv6 Transition for SIP Signaling
  contents:
  - "6.1.  IPv4-IPv6 Transition for SIP Signaling\n   IPv4-IPv6 translations at the\
    \ SIP level usually take place at dual-\n   stack proxies that have both IPv4\
    \ and IPv6 DNS entries.  Since these\n   translations do not involve NATs that\
    \ are placed in the middle of two\n   SIP entities, they fall outside the scope\
    \ of this document.  A\n   detailed description of this type of translation can\
    \ be found in\n   [RFC6157].\n"
- title: 7.  Security Considerations
  contents:
  - "7.  Security Considerations\n   There are no security considerations beyond the\
    \ ones inherited by\n   reference.\n"
- title: 8.  Acknowledgments
  contents:
  - "8.  Acknowledgments\n   The authors would like to thank the members of the IETF\
    \ SIPPING WG\n   for their comments and suggestions.  Expert review and detailed\n\
    \   contribution including text was provided by Dan Wing, who was\n   supportive\
    \ throughout.\n   Detailed comments were provided by Vijay Gurbani, Kaiduan Xie,\
    \ Remi\n   Denis-Courmont, Hadriel Kaplan, Phillip Matthews, Spencer Dawkins,\n\
    \   and Hans Persson.\n"
- title: 9.  References
  contents:
  - '9.  References

    '
- title: 9.1.  Normative References
  contents:
  - "9.1.  Normative References\n   [RFC2119]      Bradner, S., \"Key words for use\
    \ in RFCs to Indicate\n                  Requirement Levels\", BCP 14, RFC 2119,\
    \ March 1997.\n   [RFC3261]      Rosenberg, J., Schulzrinne, H., Camarillo, G.,\n\
    \                  Johnston, A., Peterson, J., Sparks, R., Handley, M.,\n    \
    \              and E. Schooler, \"SIP: Session Initiation Protocol\",\n      \
    \            RFC 3261, June 2002.\n   [RFC3263]      Rosenberg, J. and H. Schulzrinne,\
    \ \"Session Initiation\n                  Protocol (SIP): Locating SIP Servers\"\
    , RFC 3263,\n                  June 2002.\n   [RFC3264]      Rosenberg, J. and\
    \ H. Schulzrinne, \"An Offer/Answer\n                  Model with Session Description\
    \ Protocol (SDP)\",\n                  RFC 3264, June 2002.\n   [RFC3327]    \
    \  Willis, D. and B. Hoeneisen, \"Session Initiation\n                  Protocol\
    \ (SIP) Extension Header Field for Registering\n                  Non-Adjacent\
    \ Contacts\", RFC 3327, December 2002.\n   [RFC3550]      Schulzrinne, H., Casner,\
    \ S., Frederick, R., and V.\n                  Jacobson, \"RTP: A Transport Protocol\
    \ for Real-Time\n                  Applications\", STD 64, RFC 3550, July 2003.\n\
    \   [RFC3581]      Rosenberg, J. and H. Schulzrinne, \"An Extension to the\n \
    \                 Session Initiation Protocol (SIP) for Symmetric\n          \
    \        Response Routing\", RFC 3581, August 2003.\n   [RFC3605]      Huitema,\
    \ C., \"Real Time Control Protocol (RTCP)\n                  attribute in Session\
    \ Description Protocol (SDP)\",\n                  RFC 3605, October 2003.\n \
    \  [RFC4566]      Handley, M., Jacobson, V., and C. Perkins, \"SDP:\n        \
    \          Session Description Protocol\", RFC 4566, July 2006.\n   [RFC4787]\
    \      Audet, F. and C. Jennings, \"Network Address\n                  Translation\
    \ (NAT) Behavioral Requirements for Unicast\n                  UDP\", BCP 127,\
    \ RFC 4787, January 2007.\n   [RFC4961]      Wing, D., \"Symmetric RTP / RTP Control\
    \ Protocol\n                  (RTCP)\", BCP 131, RFC 4961, July 2007.\n   [RFC5245]\
    \      Rosenberg, J., \"Interactive Connectivity Establishment\n             \
    \     (ICE): A Protocol for Network Address Translator (NAT)\n               \
    \   Traversal for Offer/Answer Protocols\", RFC 5245,\n                  April\
    \ 2010.\n   [RFC5389]      Rosenberg, J., Mahy, R., Matthews, P., and D. Wing,\n\
    \                  \"Session Traversal Utilities for NAT (STUN)\",\n         \
    \         RFC 5389, October 2008.\n   [RFC5626]      Jennings, C., Mahy, R., and\
    \ F. Audet, \"Managing\n                  Client-Initiated Connections in the\
    \ Session Initiation\n                  Protocol (SIP)\", RFC 5626, October 2009.\n\
    \   [RFC5761]      Perkins, C. and M. Westerlund, \"Multiplexing RTP Data\n  \
    \                and Control Packets on a Single Port\", RFC 5761,\n         \
    \         April 2010.\n   [RFC5766]      Mahy, R., Matthews, P., and J. Rosenberg,\
    \ \"Traversal\n                  Using Relays around NAT (TURN): Relay Extensions\
    \ to\n                  Session Traversal Utilities for NAT (STUN)\", RFC 5766,\n\
    \                  April 2010.\n   [RFC5923]      Gurbani, V., Mahy, R., and B.\
    \ Tate, \"Connection Reuse\n                  in the Session Initiation Protocol\
    \ (SIP)\", RFC 5923,\n                  June 2010.\n"
- title: 9.2.  Informative References
  contents:
  - "9.2.  Informative References\n   [MIDDLEBOXES]  Stucker, B. and H. Tschofenig,\
    \ \"Analysis of Middlebox\n                  Interactions for Signaling Protocol\
    \ Communication\n                  along the Media Path\", Work in Progress, July\
    \ 2010.\n   [NAT-PMP]      Cheshire, S., \"NAT Port Mapping Protocol (NAT-PMP)\"\
    ,\n                  Work in Progress, April 2008.\n   [RFC2026]      Bradner,\
    \ S., \"The Internet Standards Process --\n                  Revision 3\", BCP\
    \ 9, RFC 2026, October 1996.\n   [RFC3424]      Daigle, L. and IAB, \"IAB Considerations\
    \ for UNilateral\n                  Self-Address Fixing (UNSAF) Across Network\
    \ Address\n                  Translation\", RFC 3424, November 2002.\n   [RFC5780]\
    \      MacDonald, D. and B. Lowekamp, \"NAT Behavior Discovery\n             \
    \     Using Session Traversal Utilities for NAT (STUN)\",\n                  RFC\
    \ 5780, May 2010.\n   [RFC5853]      Hautakorpi, J., Camarillo, G., Penfield,\
    \ R.,\n                  Hawrylyshen, A., and M. Bhatia, \"Requirements from\n\
    \                  Session Initiation Protocol (SIP) Session Border\n        \
    \          Control (SBC) Deployments\", RFC 5853, April 2010.\n   [RFC6157]  \
    \    Camarillo, G., El Malki, K., and V. Gurbani, \"IPv6\n                  Transition\
    \ in the Session Initiation Protocol (SIP)\",\n                  RFC 6157, April\
    \ 2011.\n   [UPnP-IGD]     UPnP Forum, \"Universal Plug and Play Internet Gateway\n\
    \                  Device v1.0\", 2000,\n                  <http://www.upnp.org/specs/gw/igd1/>.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Chris Boulton\n   NS-Technologies\n   EMail: chris@ns-technologies.com\n\
    \   Jonathan Rosenberg\n   Skype\n   EMail: jdrosen@jdrosen.net\n   Gonzalo Camarillo\n\
    \   Ericsson\n   Hirsalantie 11\n   Jorvas  02420\n   Finland\n   EMail: Gonzalo.Camarillo@ericsson.com\n\
    \   Francois Audet\n   Skype\n   EMail: francois.audet@skype.net\n"
