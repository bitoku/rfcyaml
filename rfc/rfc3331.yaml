- contents:
  - "       Signaling System 7 (SS7) Message Transfer Part 2 (MTP2) -\n                         User
    Adaptation Layer\n"
  title: __initial_text__
- contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol
    for the\n   Internet community, and requests discussion and suggestions for\n
    \  improvements.  Please refer to the current edition of the \"Internet\n   Official
    Protocol Standards\" (STD 1) for the standardization state\n   and status of this
    protocol.  Distribution of this memo is unlimited.\n"
  title: Status of this Memo
- contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2002).  All Rights Reserved.\n"
  title: Copyright Notice
- contents:
  - "Abstract\n   This document defines a protocol for the backhauling of Signaling\n
    \  System 7 Message Transfer Part 2 (SS7 MTP2) User signalling messages\n   over
    IP using the Stream Control Transmission Protocol (SCTP).  This\n   protocol would
    be used between a Signalling Gateway (SG) and Media\n   Gateway Controller (MGC).
    \ It is assumed that the SG receives SS7\n   signalling over a standard SS7 interface
    using the SS7 Message\n   Transfer Part (MTP) to provide transport.  The Signalling
    Gateway\n   would act as a Signalling Link Terminal.\n"
  title: Abstract
- contents:
  - "Table of Contents\n   1.  Introduction..............................................
    2\n     1.1  Scope.................................................. 3\n     1.2
    \ Terminology............................................ 3\n     1.3  M2UA Overview..........................................
    5\n     1.4  Services Provided by the M2UA Adaptation Layer......... 7\n     1.5
    \ Functions Provided by the M2UA Layer................... 9\n     1.6  Definition
    of the M2UA Boundaries..................... 12\n   2.  Conventions..............................................
    16\n   3.  Protocol Elements........................................ 16\n     3.1
    \ Common Message Header................................. 16\n     3.2  M2UA Message
    Header................................... 22\n     3.3  M2UA Messages.........................................
    23\n   4.  Procedures............................................... 58\n     4.1
    \ Procedures to Support the M2UA-User Layer............. 58\n     4.2  Receipt
    of Primitives from the Layer Management....... 59\n     4.3  AS and ASP State
    Maintenance.......................... 61\n     4.4  Link Key Management Procedures........................
    73\n   5.  Examples of MTP2 User Adaptation (M2UA) Procedures....... 75\n     5.1
    \ Establishment of associations between SGP and MGC..... 75\n          examples\n
    \    5.2  ASP Traffic Fail-over Examples........................ 77\n     5.3
    \ SGP to MGC, MTP Level 2 to MTP Level 3 Boundary\n          Procedures............................................
    78\n   6.  Timer Values............................................. 85\n   7.
    \ Security Considerations.................................. 85\n     7.1 Threats................................................
    85\n     7.2 Protecting Confidentiality............................. 86\n   8.
    \ IANA Considerations...................................... 86\n     8.1 SCTP
    Payload Protocol Identifier....................... 86\n     8.2 M2UA Protocol
    Extensions............................... 86\n   9.  Acknowledgements.........................................
    87\n   10. References............................................... 88\n   Appendix
    A: Signalling Network Architecture.................. 90\n   Authors' Addresses...........................................
    92\n   Full Copyright Statement..................................... 94\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   This document defines a protocol for the backhauling of
    SS7 [1] MTP2\n   User [2] [3] [4] (i.e. MTP3) signalling messages over IP using
    the\n   Stream Control Transmission Protocol (SCTP) [8].  This protocol would\n
    \  be used between a Signalling Gateway (SG) and Media Gateway\n   Controller
    (MGC).\n"
  title: 1.  Introduction
- contents:
  - "1.1 Scope\n   There is a need for Switched Circuit Network (SCN) signalling\n
    \  protocol delivery from a Signalling Gateway (SG) to a Media Gateway\n   Controller
    (MGC) [9].  The delivery mechanism addresses the following\n   objectives:\n   *
    \ Support for MTP Level 2 / MTP Level 3 interface boundary\n   *  Support for
    communication between Layer Management modules on SG\n      and MGC\n   *  Support
    for management of SCTP active associations between the SG\n      and MGC\n   The
    SG will terminate up to MTP Level 2 and the MGC will terminate\n   MTP Level 3
    and above.  In other words, the SG will transport MTP\n   Level 3 messages over
    an IP network to a MGC.\n"
  title: 1.1 Scope
- contents:
  - "1.2 Terminology\n   Application Server (AS) - A logical entity serving a specific\n
    \  application instance.  An example of an Application Server is a MGC\n   handling
    the MTP Level 3 and call processing for SS7 links terminated\n   by the Signalling
    Gateways.  Practically speaking, an AS is modeled\n   at the SG as an ordered
    list of one or more related Application\n   Server Processes (e.g., primary, secondary,
    tertiary, ...).\n   Application Server Process (ASP) - A process instance of an\n
    \  Application Server.  Examples of Application Server Processes are\n   active
    or standby MGC instances.\n   Association - An association refers to a SCTP association.
    \ The\n   association will provide the transport for the delivery of protocol\n
    \  data units for one or more interfaces.\n   Backhaul - Refers to the transport
    of signalling from the point of\n   interface for the associated data stream (i.e.,
    SG function in the\n   MGU) back to the point of call processing (i.e., the MGCU),
    if this\n   is not local [9].\n   Fail-over - The capability to reroute signalling
    traffic as required\n   to an alternate Application Server Process within an Application\n
    \  Server in the event of failure or unavailability of a currently used\n   Application
    Server Process.  Fail-back MAY apply upon the return to\n   service of a previously
    unavailable Application Server Process.\n   Host - The computing platform that
    the ASP process is running on.\n   Interface - For the purposes of this document,
    an interface is a SS7\n   signalling link.\n   Interface Identifier - The Interface
    Identifier identifies the\n   physical interface at the SG for which the signalling
    messages are\n   sent/received.  The format of the Interface Identifier parameter
    can\n   be text or integer, the values of which are assigned according to\n   network
    operator policy.  The values used are of local significance\n   only, coordinated
    between the SG and ASP.\n   Layer Management - Layer Management is a nodal function
    in an SG or\n   ASP that handles the inputs and outputs between the M2UA layer
    and a\n   local management entity.\n   Link Key - The link key is a locally unique
    (between ASP and SG)\n   value that identifies a registration request for a particular\n
    \  Signalling Data Link and Signalling Terminal pair.\n   MTP - The Message Transfer
    Part of the SS7 protocol\n   MTP2 - MTP Level 2, the signalling data link layer
    of SS7\n   MTP3 - MTP Level 3, the signalling network layer of SS7\n   MTP2-User
    - A protocol that uses the services of MTP Level 2 (i.e.\n   MTP3).\n   Network
    Byte Order: Most significant byte first, a.k.a Big Endian.\n   Signalling Data
    Link - An SDL refers to a specific communications\n   facility that connects two
    Signalling Link Terminals.\n   Signalling Gateway (SG) - An SG is a signalling
    agent at the edge of\n   the IP network.  An SG appears to the SS7 as one or more
    Signalling\n   Link Terminals that are connected to one or more Signalling Data\n
    \  Links in the SS7 network.  An SG contains a set of one or more unique\n   Signalling
    Gateway Processes, on which one or more is normally\n   actively processing traffic.
    \ Where an SG contains more than one SGP,\n   the SG is a logical entity.\n   Signalling
    Gateway Process (SGP) - A process instance that uses M2UA\n   to communicate to
    and from a Signalling Link Terminal.  It serves as\n   an active, backup or load-sharing
    process of a Signalling Gateway.\n   Signalling Link Terminal (SLT) - Refers to
    the means of performing\n   all of the functions defined at MTP level 2 regardless
    of their\n   implementation [2,3].\n   Stream - A stream refers to an SCTP stream;
    a unidirectional logical\n   channel established from one SCTP endpoint to another
    associated SCTP\n   endpoint, within which all user messages are delivered in-sequence\n
    \  except for those submitted to the unordered delivery service.\n"
  title: 1.2 Terminology
- contents:
  - "1.3  M2UA Overview\n   The framework architecture that has been defined for SCN
    signalling\n   transport over IP [9] uses two components: a signalling common\n
    \  transport protocol and an adaptation module to support the services\n   expected
    by a particular SCN signalling protocol from its underlying\n   protocol layer.\n
    \  Within this framework architecture, this document defines a SCN\n   adaptation
    module that is suitable for the transport of SS7 MTP2 User\n   messages.  The
    only SS7 MTP2 User is MTP3.  The M2UA uses the\n   services of the Stream Control
    Transmission Protocol [8] as the\n   underlying reliable signalling common transport
    protocol.\n   In a Signalling Gateway, it is expected that the SS7 MTP2-User\n
    \  signalling is transmitted and received from the PSTN over a standard\n   SS7
    network interface, using the SS7 Message Transfer Part Level 1\n   and Level 2
    [2,3,4] to provide reliable transport of the MTP3-User\n   signalling messages
    to and from an SS7 Signalling End Point (SEP) or\n   Signalling Transfer Point
    (STP).  The SG then provides an\n   interworking of transport functions with the
    IP transport, in order\n   to transfer the MTP2-User signalling messages to and
    from an\n   Application Server Process where the peer MTP2-User protocol layer\n
    \  exists.\n"
  title: 1.3  M2UA Overview
- contents:
  - "1.3.1  Example - SG to MGC\n   In a Signalling Gateway, it is expected that the
    SS7 signalling is\n   received over a standard SS7 network termination, using
    the SS7\n   Message Transfer Part (MTP) to provide transport of SS7 signalling\n
    \  messages to and from an SS7 Signalling End Point (SEP) or SS7\n   Signalling
    Transfer Point (STP).  In other words, the SG acts as a\n   Signalling Link Terminal
    (SLT) [2,3].  The SG then provides an\n   interworking of transport functions
    with IP Signalling Transport, in\n   order to transport the MTP3 signalling messages
    to the MGC where the\n   peer MTP3 protocol layer exists, as shown below:\n       ******
    \   SS7    ******      IP     *******\n       *SEP *-----------* SG *-------------*
    MGC *\n       ******           ******             *******\n       +----+                              +----+\n
    \      |S7UP|                              |S7UP|\n       +----+                              +----+\n
    \      |MTP +                              |MTP |\n       | L3 |            (NIF)
    \            |L3  |\n       +----+         +----+----+          +----+\n       |MTP
    |         |MTP |M2UA|          |M2UA|\n       |    |         |    +----+          +----+\n
    \      |L2  |         |L2  |SCTP|          |SCTP|\n       |L1  |         |L1  +----+
    \         +----+\n       |    |         |    |IP  |          |IP  |\n       +----+
    \        +---------+          +----+\n       NIF  - Nodal Interworking Function\n
    \      SEP  - SS7 Signalling Endpoint\n       IP   - Internet Protocol\n       SCTP
    - Stream Control Transmission Protocol (Reference [8])\n           Figure 1  M2UA
    in the SG to MGC Application\n   Note: STPs MAY be present in the SS7 path between
    the SEP and the SG.\n   It is recommended that the M2UA use the services of the
    Stream\n   Control Transmission Protocol (SCTP) [8] as the underlying reliable\n
    \  common signalling transport protocol.  The use of SCTP provides the\n   following
    features:\n   -  explicit packet-oriented delivery (not stream-oriented)\n   -
    \ sequenced delivery of user messages within multiple streams, with\n      an
    option for order-of-arrival delivery of individual user\n      messages,\n   -
    \ optional multiplexing of user messages into SCTP datagrams,\n   -  network-level
    fault tolerance through the support of multi-homing\n      at either or both ends
    of an association,\n   -  resistance to flooding and masquerade attacks, and\n
    \  -  data segmentation to conform to discovered path MTU size\n   There are scenarios
    without redundancy requirements and scenarios in\n   which redundancy is supported
    below the transport layer.  In these\n   cases, the SCTP functions above MAY NOT
    be a requirement and TCP can\n   be used as the underlying common transport protocol.\n"
  title: 1.3.1  Example - SG to MGC
- contents:
  - "1.3.2  ASP Fail-over Model and Terminology\n   The M2UA layer supports ASP fail-over
    functions in order to support a\n   high availability of call and transaction
    processing capability.  All\n   MTP2-User messages incoming to a SGP from the
    SS7 network are\n   assigned to the unique Application Server, based on the Interface\n
    \  Identifier of the message.\n   The M2UA layer supports a n+k redundancy model
    (active-standby, load\n   sharing, broadcast) where n is the minimum number of
    redundant ASPs\n   required to handle traffic and k ASPs are available to take
    over for\n   a failed or unavailable ASP.  Note that 1+1 active/standby redundancy\n
    \  is a subset of this model.  A simplex 1+0 model is also supported as\n   a
    subset, with no ASP redundancy.\n"
  title: 1.3.2  ASP Fail-over Model and Terminology
- contents:
  - "1.3.3  Client/Server Model\n   It is recommended that the SGP and ASP be able
    to support both client\n   and server operation.  The peer endpoints using M2UA
    SHOULD be\n   configured so that one always takes on the role of client and the\n
    \  other the role of server for initiating SCTP associations.  The\n   default
    orientation would be for the SGP to take on the role of\n   server while the ASP
    is the client.  In this case, ASPs SHOULD\n   initiate the SCTP association to
    the SGP.\n   The SCTP and TCP Registered User Port Number Assignment for M2UA
    is\n   2904.\n"
  title: 1.3.3  Client/Server Model
- contents:
  - "1.4  Services Provided by the M2UA Adaptation Layer\n   The SS7 MTP3/MTP2(MTP2-User)
    interface is retained at the termination\n   point in the IP network, so that
    the M2UA protocol layer is required\n   to provide the equivalent set of services
    to its users as provided by\n   the MTP Level 2 to MTP Level 3.\n"
  title: 1.4  Services Provided by the M2UA Adaptation Layer
- contents:
  - "1.4.1  Support for MTP Level 2 / MTP Level 3 interface boundary\n   M2UA supports
    a MTP Level 2 / MTP Level 3 interface boundary that\n   enables a seamless, or
    as seamless as possible, operation of the\n   MTP2-User peers in the SS7 and IP
    domains.  An example of the\n   primitives that need to be supported can be found
    in [10].\n"
  title: 1.4.1  Support for MTP Level 2 / MTP Level 3 interface boundary
- contents:
  - "1.4.2  Support for communication between Layer Management modules on SG\n       and
    MGC\n   The M2UA layer needs to provide some messages that will facilitate\n   communication
    between Layer Management modules on the SG and MGC.  To\n   facilitate reporting
    of errors that arise because of the backhauling\n   MTP Level 3 scenario, the
    following primitive is defined:\n   M-ERROR\n   The M-ERROR message is used to
    indicate an error with a received M2UA\n   message (e.g., an interface identifier
    value is not known to the SG).\n"
  title: 1.4.2  Support for communication between Layer Management modules on SG
- contents:
  - "1.4.3  Support for management of active associations between SG and MGC\n   The
    M2UA layer on the SG keeps the state of the configured ASPs.  A\n   set of primitives
    between M2UA layer and the Layer Management are\n   defined below to help the
    Layer Management manage the association(s)\n   between the SG and the MGC.  The
    M2UA layer can be instructed by the\n   Layer Management to establish a SCTP association
    to a peer M2UA node.\n   This procedure can be achieved using the M-SCTP ESTABLISH
    primitive.\n   M-SCTP_ESTABLISH\n   The M-SCTP_ESTABLISH primitive is used to
    request, indicate and\n   confirm the establishment of a SCTP association to a
    peer M2UA node.\n   M-SCTP_RELEASE\n   The M-SCTP_RELEASE primitives are used
    to request, indicate, and\n   confirm the release of a SCTP association to a peer
    M2UA node.\n   The M2UA layer MAY also need to inform the status of the SCTP\n
    \  association(s) to the Layer Management.  This can be achieved using\n   the
    following primitive.\n   M-SCTP_STATUS\n   The M-SCTP_STATUS primitive is used
    to request and indicate the\n   status of underlying SCTP association(s).\n   The
    Layer Management MAY need to inform the M2UA layer of an AS/ASP\n   status (i.e.,
    failure, active, etc.), so that messages can be\n   exchanged between M2UA layer
    peers to stop traffic to the local M2UA\n   user.  This can be achieved using
    the following primitive.\n   M-ASP_STATUS\n   The ASP status is stored inside
    the M2UA layer on both the SG and MGC\n   sides.  The M-ASP_STATUS primitive can
    be used by Layer Management to\n   request the status of the Application Server
    Process from the M2UA\n   layer.  This primitive can also be used to indicate
    the status of the\n   Application Server Process.\n   M-ASP_MODIFY\n   The M-ASP_MODIFY
    primitive can be used by Layer Management to modify\n   the status of the Application
    Server Process.  In other words, the\n   Layer Management on the ASP side uses
    this primitive to initiate the\n   ASPM procedures.\n   M-AS_STATUS\n   The M-AS_STATUS
    primitive can be used by Layer Management to request\n   the status of the Application
    Server.  This primitive can also be\n   used to indicate the status of the Application
    Server.\n"
  title: 1.4.3  Support for management of active associations between SG and MGC
- contents:
  - '1.5  Functions Provided by the M2UA Layer

    '
  title: 1.5  Functions Provided by the M2UA Layer
- contents:
  - "1.5.1  Mapping\n   The M2UA layer MUST maintain a map of an Interface ID to a
    physical\n   interface on the Signalling Gateway.  A physical interface would
    be a\n   V.35 line, T1 line/time slot, E1 line/time slot, etc.  The M2UA layer\n
    \  MUST also maintain a map of the Interface Identifier to SCTP\n   association
    and to the related stream within the association.\n   The SGP maps an Interface
    Identifier to an SCTP association/stream\n   only when an ASP sends an ASP Active
    message for a particular\n   Interface Identifier.  It must be noted, however,
    that this mapping\n   is dynamic and could change at any time due to a change
    of ASP state.\n   This mapping could even temporarily be invalid, for example
    during\n   fail-over of one ASP to another.  Therefore, the SGP MUST maintain\n
    \  the states of AS/ASP and reference them during the routing of any\n   messages
    to an AS/ASP.\n   Note that only one SGP SHOULD provide Signalling Link Terminal\n
    \  services to an SS7 link.  Therefore, within an SG, an Application\n   Server
    SHOULD be active for only one SGP at any given point in time.\n   An example of
    the logical view of the relationship between an SS7\n   link, Interface Identifier,
    AS and ASP in an SGP is shown below:\n               /-------------------------------------------------+\n
    \             /   /----------------------------------------------|--+\n             /
    \  /                                               v  |\n            /   /    +----+
    \            act+-----+   +-------+ -+--+|-+-\n   SS7 link1-------->|IID |-+          +-->|
    ASP |-->| Assoc |      v\n              /      +----+ |  +----+  |   +-----+   +-------+
    -+--+--+-\n             /              +->| AS |--+                        Streams\n
    \           /        +----+ |  +----+   stb+-----+\n   SS7 link2-------->|IID
    |-+              | ASP |\n                     +----+                +-----+\n
    \  where IID = Interface Identifier\n   A SGP MAY support more than one AS.  An
    AS MAY support more than one\n   Interface Identifier.\n"
  title: 1.5.1  Mapping
- contents:
  - "1.5.2  Support for the management of SCTP associations between the SGPs\n       and
    ASPs\n   The M2UA layer at the SG maintains the availability state of all\n   configured
    ASPs, in order to manage the SCTP associations and the\n   traffic between the
    SG and ASPs.  As well, the active/inactive state\n   of remote ASP(s) are also
    maintained.  The Active ASP(s) are the\n   one(s) currently receiving traffic
    from the SG.\n   The M2UA layer MAY be instructed by local management to establish
    an\n   SCTP association to a peer M2UA node.  This can be achieved using the\n
    \  M-SCTP_ESTABLISH primitive to request, indicate and confirm the\n   establishment
    of an SCTP association with a peer M2UA node.\n   The M2UA layer MAY also need
    to inform local management of the status\n   of the underlying SCTP associations
    using the M-SCTP_STATUS request\n   and the indication primitive.  For example,
    the M2UA MAY inform local\n   management of the reason for the release of an SCTP
    association,\n   determined either locally within the M2UA layer or by a primitive\n
    \  from the SCTP.\n   Also the M2UA layer may need to inform the local management
    of the\n   change in status of an ASP or AS.  This may be achieved using the M-\n
    \  ASP STATUS request or M-AS_STATUS request primitives.\n"
  title: 1.5.2  Support for the management of SCTP associations between the SGPs
- contents:
  - "1.5.3 Status of ASPs\n   The M2UA layer on the SG MUST maintain the state of
    the ASPs it is\n   supporting.  The state of an ASP changes because of the reception
    of\n   peer-to-peer messages (ASPM messages as described in Section 3.3.2)\n   or
    the reception of indications from the local SCTP association.  The\n   ASP state
    transition procedures are described in Section 4.3.1.\n   At a SGP, an Application
    Server list MAY contain active and inactive\n   ASPs to support ASP fail-over
    procedures.  When, for example, both a\n   primary and a backup ASP are available,
    the M2UA peer protocol is\n   required to control which ASP is currently active.
    \ The ordered list\n   of ASPs within a logical Application Server is kept updated
    in the\n   SGP to reflect the active Application Server Process.\n   Also the
    M2UA layer MAY need to inform the local management of the\n   change in status
    of an ASP or AS.  This can be achieved using the M-\n   ASP_STATUS or M-AS_STATUS
    primitives.\n"
  title: 1.5.3 Status of ASPs
- contents:
  - '1.5.4  SCTP Specifics

    '
  title: 1.5.4  SCTP Specifics
- contents:
  - "1.5.4.1  SCTP Stream Management\n   SCTP allows a user specified number of streams
    to be opened during\n   initialization of the association.  It is the responsibility
    of the\n   M2UA layer to ensure proper management of these streams.  Because of\n
    \  the unidirectional nature of streams, a M2UA layer is not aware of\n   the
    stream information from its peer M2UA layer.  For this reason,\n   the Interface
    Identifier is in the M2UA message header.\n   The use of SCTP streams within M2UA
    is recommended in order to\n   minimize transmission and buffering delay, thereby,
    improving the\n   overall performance and reliability of the signalling elements.
    \ A\n   separate SCTP stream can be used for each SS7 link.  Or, an\n   implementation
    may choose to split the SS7 link across several\n   streams based on SLS.  This
    method may be of particular interest for\n   high speed SS7 links (MTP3b) since
    high speed links have a 24-bit\n   sequence number and the stream sequence number
    is 16-bits.\n   SCTP Stream '0' SHOULD NOT be used for MTP2 User Adaptation (MAUP)\n
    \  messages (see Section 3) since stream '0' SHOULD only be used for ASP\n   Management
    (ASPM) messages (see Section 4.3.3).\n"
  title: 1.5.4.1  SCTP Stream Management
- contents:
  - "1.5.5  Seamless SS7 Network Management Interworking\n   The M2UA layer on the
    SGP SHOULD pass an indication of unavailability\n   of the M2UA-User (MTP3) to
    the local Layer Management, if the\n   currently active ASP moves from the ACTIVE
    state.  The actions taken\n   by M2UA on the SGP with regards to MTP Level 2 should
    be in\n   accordance with the appropriate MTP specifications.\n"
  title: 1.5.5  Seamless SS7 Network Management Interworking
- contents:
  - "1.5.6  Flow Control / Congestion\n   It is possible for the M2UA layer to be
    informed of the IP network\n   congestion onset and abatement by means of an implementation\n
    \  dependent function (i.e. an indication from the SCTP).  The handling\n   of
    this congestion indication by M2UA is implementation dependent.\n   However, the
    actions taken by the SG should be in accordance with the\n   appropriate MTP specification
    and should enable SS7 functionality\n   (e.g. flow control) to be correctly maintained.\n"
  title: 1.5.6  Flow Control / Congestion
- contents:
  - "1.5.7  Audit of SS7 Link State\n   After a fail-over of one ASP to another ASP,
    it may be necessary for\n   the M2UA on the ASP to audit the current SS7 link
    state to ensure\n   consistency.  The M2UA on the SGP would respond to the audit
    request\n   with information regarding the current state of the SS7 link (i.e.\n
    \  in-service, out-of-service, congestion state, LPO/RPO state).\n"
  title: 1.5.7  Audit of SS7 Link State
- contents:
  - '1.6  Definition of the M2UA Boundaries

    '
  title: 1.6  Definition of the M2UA Boundaries
- contents:
  - "1.6.1  Definition of the M2UA / MTP Level 3 boundary\n   DATA\n   ESTABLISH\n
    \  RELEASE\n   STATE\n   DATA RETRIEVAL\n   DATA RETRIEVAL COMPLETE\n"
  title: 1.6.1  Definition of the M2UA / MTP Level 3 boundary
- contents:
  - "1.6.2  Definition of the M2UA / MTP Level 2 boundary\n   DATA\n   ESTABLISH\n
    \  RELEASE\n   STATE\n   DATA RETRIEVAL\n   DATA RETRIEVAL COMPLETE\n"
  title: 1.6.2  Definition of the M2UA / MTP Level 2 boundary
- contents:
  - "1.6.3  Definition of the Lower Layer Boundary between M2UA and SCTP\n   The upper
    layer and layer management primitives provided by SCTP are\n   provided in Reference
    [8] Section 10.\n"
  title: 1.6.3  Definition of the Lower Layer Boundary between M2UA and SCTP
- contents:
  - "1.6.4  Definition of Layer Management / M2UA Boundary\n   M-SCTP_ESTABLISH request\n
    \  Direction: LM -> M2UA\n   Purpose: LM requests ASP to establish an SCTP association
    with an\n            SGP.\n   M-SCTP_ESTABLISH confirm\n   Direction: M2UA ->
    LM\n   Purpose: ASP confirms to LM that it has established an\n            SCTP
    association with an SGP.\n   M-SCTP_ESTABLISH indication\n   Direction: M2UA ->
    LM\n   Purpose: SGP informs LM that an ASP has established an SCTP\n            association.\n
    \  M-SCTP_RELEASE request\n   Direction: LM -> M2UA\n   Purpose: LM requests ASP
    to release an SCTP association with SGP.\n   M-SCTP_RELEASE confirm\n   Direction:
    M2UA -> LM\n   Purpose: ASP confirms to LM that it has released SCTP association\n
    \           with SGP.\n   M-SCTP_RELEASE indication\n   Direction: M2UA -> LM\n
    \  Purpose: SGP informs LM that ASP has released an SCTP association.\n   M-SCTP_RESTART
    indication\n   Direction: M2UA -> LM\n   Purpose: M2UA informs LM that a SCTP
    Restart indication has\n            been received.\n   M-SCTP_STATUS request\n
    \  Direction: LM -> M2UA\n   Purpose: LM requests M2UA to report status of SCTP
    association.\n   M-SCTP_STATUS indication\n   Direction: M2UA -> LM\n   Purpose:
    M2UA reports status of SCTP association.\n   M-ASP_STATUS request\n   Direction:
    LM -> M2UA\n   Purpose: LM requests SGP to report status of remote ASP.\n   M-ASP_STATUS
    indication\n   Direction: M2UA -> LM\n   Purpose: SGP reports status of remote
    ASP.\n   M-AS_STATUS request\n   Direction: LM -> M2UA\n   Purpose: LM requests
    SG to report status of AS.\n   M-AS_STATUS indication\n   Direction: M2UA -> LM\n
    \  Purpose: SG reports status of AS.\n   M-NOTIFY indication\n   Direction: M2UA
    -> LM\n   Purpose: ASP reports that it has received a NOTIFY message\n            from
    its peer.\n   M-ERROR indication\n   Direction: M2UA -> LM\n   Purpose: ASP or
    SGP reports that it has received an ERROR\n            message from its peer.\n
    \  M-ASP_UP request\n   Direction: LM -> M2UA\n   Purpose: LM requests ASP to
    start its operation and send an ASP UP\n            message to the SGP.\n   M-ASP_UP
    confirm\n   Direction: M2UA -> LM\n   Purpose: ASP reports that it has received
    an ASP UP Acknowledgment\n            message from the SGP.\n   M-ASP_DOWN request\n
    \  Direction: LM -> M2UA\n   Purpose: LM requests ASP to stop its operation and
    send an ASP DOWN\n            message to the SGP.\n   M-ASP_DOWN confirm\n   Direction:
    M2UA -> LM\n   Purpose: ASP reports that is has received an ASP DOWN Acknowledgment\n
    \           message from the SGP.\n   M-ASP_ACTIVE request\n   Direction: LM ->
    M2UA\n   Purpose: LM requests ASP to send an ASP ACTIVE message to the SGP.\n
    \  M-ASP_ACTIVE confirm\n   Direction: M2UA -> LM\n   Purpose: ASP reports that
    is has received an ASP ACTIVE\n            Acknowledgment message from the SGP.\n
    \  M-ASP_INACTIVE request\n   Direction: LM -> M2UA\n   Purpose: LM requests ASP
    to send an ASP INACTIVE message to the SGP.\n   M-ASP_INACTIVE confirm\n   Direction:
    M2UA -> LM\n   Purpose: ASP reports that is has received an ASP INACTIVE\n            Acknowledgment
    message from the SGP.\n   M-LINK_KEY_REG Request\n   Direction:  LM -> M2UA\n
    \  Purpose: LM requests ASP to register Link Key with SG by sending REG\n            REQ
    message.\n   M-LINK_KEY_REG Confirm\n   Direction:   M2UA -> LM\n   Purpose: ASP
    reports to LM that it has successfully received a REG\n            RSP message
    from SG.\n   M-LINK_KEY_REG Indication\n   Direction:  M2UA -> LM\n   Purpose:
    \ SG reports to LM that it has successfully processed an\n             incoming
    REG REQ message from ASP.\n   M-LINK_KEY_DEREG Request\n   Direction:  LM -> M2UA\n
    \  Purpose:  LM requests ASP to de-register Link Key with SG by sending\n             DEREG
    REQ message.\n   M-LINK_KEY_DEREG Confirm\n   Direction:  M2UA -> LM\n   Purpose:
    \ ASP reports to LM that it has successfully received a\n             DEREG RSP
    message from SG.\n   M-LINK_KEY_DEREG  Indication\n   Direction:  M2UA -> LM\n
    \  Purpose:  SG reports to LM that it has successfully processed an\n             incoming
    DEREG REQ message from ASP.\n"
  title: 1.6.4  Definition of Layer Management / M2UA Boundary
- contents:
  - "2.0 Conventions\n   The keywords MUST, MUST NOT, REQUIRED, SHALL, SHALL NOT,
    SHOULD,\n   SHOULD NOT, RECOMMENDED, NOT RECOMMENDED, MAY, and OPTIONAL, when\n
    \  they appear in this document, are to be interpreted as described in\n   [RFC2119].\n"
  title: 2. Conventions
- contents:
  - "3.0  Protocol Elements\n   This section describes the format of various messages
    used in this\n   protocol.\n"
  title: 3.  Protocol Elements
- contents:
  - "3.1  Common Message Header\n   The protocol messages for MTP2-User Adaptation
    require a message\n   structure that contains a version, message class, message
    type,\n   message length, and message contents.  This message header is common\n
    \  among all signalling protocol adaptation layers:\n    0                   1
    \                  2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5
    6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  |    Version    |     Spare     | Message Class | Message Type  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  |                        Message Length                         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \                 Figure 2  Common Message Header\n   All fields in an M2UA message
    MUST be transmitted in the network byte\n   order, unless otherwise stated.\n"
  title: 3.1  Common Message Header
- contents:
  - "3.1.1  Version\n   The version field contains the version of the M2UA adaptation
    layer.\n   The supported versions are:\n         Value    Version\n         -----
    \   -------\n           1      Release 1.0\n"
  title: 3.1.1  Version
- contents:
  - "3.1.2  Spare\n   The Spare field is 8-bits.  It SHOULD be set to all '0's by
    the\n   sender and ignored by the receiver.\n"
  title: 3.1.2  Spare
- contents:
  - "3.1.3  Message Class\n   The following List contains the valid Message Classes:\n
    \  Message Class: 8 bits (unsigned integer)\n     0      Management (MGMT) Message
    [IUA/M2UA/M3UA/SUA]\n     1      Transfer Messages [M3UA]\n     2      SS7 Signalling
    Network Management (SSNM) Messages [M3UA/SUA]\n     3      ASP State Maintenance
    (ASPSM) Messages [IUA/M2UA/M3UA/SUA]\n     4      ASP Traffic Maintenance (ASPTM)
    Messages [IUA/M2UA/M3UA/SUA]\n     5      Q.921/Q.931 Boundary Primitives Transport
    (QPTM)\n            Messages [IUA]\n     6      MTP2 User Adaptation (MAUP) Messages
    [M2UA]\n     7      Connectionless Messages [SUA]\n     8      Connection-Oriented
    Messages [SUA]\n     9      Routing Key Management (RKM) Messages (M3UA)\n    10
    \     Interface Identifier Management (IIM) Messages (M2UA)\n 11 to 127  Reserved
    by the IETF\n"
  - '128 to 255  Reserved for IETF-Defined Message Class extensions

    '
  title: 3.1.3  Message Class
- contents:
  - "3.1.4  Message Type\n   The following List contains the Message Types for the
    valid Message\n   Classes:\n   MTP2 User Adaptation (MAUP) Messages\n        0
    \     Reserved\n        1      Data\n        2      Establish Request\n        3
    \     Establish Confirm\n        4      Release Request\n        5      Release
    Confirm\n        6      Release Indication\n        7      State Request\n        8
    \     State Confirm\n        9      State Indication\n       10      Data Retrieval
    Request\n       11      Data Retrieval Confirm\n       12      Data Retrieval
    Indication\n       13      Data Retrieval Complete Indication\n       14      Congestion
    Indication\n       15      Data Acknowledge\n    16 to 127  Reserved by the IETF\n
    \  128 to 255  Reserved for IETF-Defined MAUP extensions\n   Application Server
    Process State Maintenance (ASPSM) messages\n        0      Reserved\n        1
    \     ASP Up (UP)\n        2      ASP Down (DOWN)\n        3      Heartbeat (BEAT)\n
    \       4      ASP Up Ack (UP ACK)\n        5      ASP Down Ack (DOWN ACK)\n        6
    \     Heartbeat Ack (BEAT ACK)\n     7 to 127  Reserved by the IETF\n   128 to
    255  Reserved for IETF-Defined ASPSM extensions\n   Application Server Process
    Traffic Maintenance (ASPTM) messages\n        0      Reserved\n        1      ASP
    Active (ACTIVE)\n        2      ASP Inactive (INACTIVE)\n        3      ASP Active
    Ack (ACTIVE ACK)\n        4      ASP Inactive Ack (INACTIVE ACK)\n     5 to 127
    \ Reserved by the IETF\n   128 to 255  Reserved for IETF-Defined ASPTM extensions\n
    \  Management (MGMT) Messages\n        0      Error (ERR)\n        1      Notify
    (NTFY)\n     2 to 127  Reserved by the IETF\n   128 to 255  Reserved for IETF-Defined
    MGMT extensions\n   Interface Identifier Management (IIM) Messages\n        0
    \       Reserved\n        1        Registration Request (REG REQ)\n        2        Registration
    Response (REG RSP)\n        3        Deregistration Request (DEREG REQ)\n        4
    \       Deregistration Response (DEREG RSP)\n     5 to 127    Reserved by the
    IETF\n   128 to 255    Reserved for IETF-Defined IIM extensions\n"
  title: 3.1.4  Message Type
- contents:
  - "3.1.5  Message Length\n   The Message Length defines the length of the message
    in octets,\n   including the header.  The Message Length MUST include parameter\n
    \  padding bytes, if any.  The Message Length MUST NOT be longer than a\n   MTP3
    message [2,3,4,5] plus the length of the common and M2UA message\n   headers.\n"
  title: 3.1.5  Message Length
- contents:
  - "3.1.6  Variable-Length Parameter Format\n   M2UA messages consist of a Common
    Header followed by zero or more\n   variable-length parameters, as defined by
    the message type.  The\n   variable-length parameters contained in a message are
    defined in a\n   Tag-Length-Value format as shown below.\n    0                   1
    \                  2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5
    6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  |          Parameter Tag        |       Parameter Length        |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  \\                                                               \\\n   /                       Parameter
    Value                         /\n   \\                                                               \\\n
    \  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   Mandatory
    parameters MUST be placed before optional parameters in a\n   message.\n   Parameter
    Tag: 16 bits (unsigned integer)\n   The Type field is a 16 bit identifier of the
    type of parameter.  It\n   takes a value of 0 to 65534.  The common parameters
    used by the\n   adaptation layers are in the range of 0x00 to 0xff.  The M2UA\n
    \  specific parameters have Tags in the range 0x300 to 0x3ff.\n   The common parameter
    tags (used by all User Adaptation layers) that\n   M2UA uses are defined below:\n
    \     Parameter Value     Parameter Name\n      ---------------     --------------\n
    \           0 (0x00)       Reserved\n            1 (0x01)       Interface Identifier
    (Integer)\n            2 (0x02)       Unused\n            3 (0x03)       Interface
    Identifier (Text)\n            4 (0x04)       Info String\n            5 (0x05)
    \      Unused\n            6 (0x06)       Unused\n            7 (0x07)       Diagnostic
    Information\n            8 (0x08)       Interface Identifier (Integer Range)\n
    \           9 (0x09)       Heartbeat Data\n           10 (0x0a)       Unused\n
    \          11 (0x0b)       Traffic Mode Type\n           12 (0x0c)       Error
    Code\n           13 (0x0d)       Status Type/Information\n           14 (0x0e)
    \      Unused\n           15 (0x0f)       Unused\n           16 (0x10)       Unused\n
    \          17 (0x11)       ASP Identifier\n           18 (0x12)       Unused\n
    \          19 (0x13)       Correlation Id\n          18-255           Reserved\n
    \  The M2UA specific parameter Tags defined are as follows:\n      Parameter Value
    \    Parameter Name\n      ---------------     --------------\n        768 (0x0300)
    \     Protocol Data 1\n        769 (0x0301)      Protocol Data 2 (TTC)\n        770
    (0x0302)      State Request\n        771 (0x0303)      State Event\n        772
    (0x0304)      Congestion Status\n        773 (0x0305)      Discard Status\n        774
    (0x0306)      Action\n        775 (0x0307)      Sequence Number\n        776 (0x0308)
    \     Retrieval Result\n        777 (0x0309)      Link Key\n        778 (0x030a)
    \     Local-LK-Identifier\n        779 (0x030b)      Signalling Data Terminal
    (SDT) Identifier\n        780 (0x030c)      Signalling Data Link (SDL) Identifier\n
    \       781 (0x030d)      Registration Result\n        782 (0x030e)      Registration
    Status\n        783 (0x030f)      De-Registration Result\n        784 (0x0310)
    \     De-Registration Status\n   Parameter Length: 16 bits (unsigned integer)\n
    \  The Parameter Length field contains the size of the parameter in\n   bytes,
    including the Parameter Tag, Parameter Length, and Parameter\n   Value fields.
    \ Thus, a parameter with a zero-length Parameter Value\n   field would have a
    Length field of 4.  The Parameter Length does not\n   include any padding bytes.\n
    \  Parameter Value: variable-length.\n   The Parameter Value field contains the
    actual information to be\n   transferred in the parameter.\n   The total length
    of a parameter (including Tag, Parameter Length and\n   Value fields) MUST be
    a multiple of 4 bytes.  If the length of the\n   parameter is not a multiple of
    4 bytes, the sender pads the Parameter\n   at the end (i.e., after the Parameter
    Value field) with all zero\n   bytes.  The length of the padding is NOT included
    in the parameter\n   length field.  A sender MUST NOT pad with more than 3 bytes.
    \ The\n   receiver MUST ignore the padding bytes.\n"
  title: 3.1.6  Variable-Length Parameter Format
- contents:
  - "3.2  M2UA Message Header\n   In addition to the common message header, there
    will be a M2UA\n   specific message header.  The M2UA specific message header
    will\n   immediately follow the common message header, but will only be used\n
    \  with MAUP messages.\n   This message header will contain the Interface Identifier.
    \ The\n   Interface Identifier identifies the physical interface at the SG for\n
    \  which the signalling messages are sent/received.  The format of the\n   Interface
    Identifier parameter can be text or integer, the values of\n   which are assigned
    according to network operator policy.  The values\n   used are of local significance
    only, coordinated between the SG and\n   ASP.\n   The integer formatted Interface
    Identifier MUST be supported.  The\n   text formatted Interface Identifier MAY
    optionally be supported.\n    0                   1                   2                   3\n
    \   0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  |           Tag (0x1)           |           Length=8            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  |                 Interface Identifier (integer)                |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  Figure 3  M2UA Message Header (Integer-based Interface Identifier)\n   The
    Tag value for the Integer-based Interface Identifier is 0x1.  The\n   length is
    always set to a value of 8.\n    0                   1                   2                   3\n
    \   0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  |           Tag (0x3)           |             Length            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  /                                                               \\\n   \\                   Interface
    Identifier (text)                 /\n   /                                                               \\\n
    \  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    Figure
    4  M2UA Message Header (Text-based Interface Identifier)\n   The Tag value for
    the Text-based Interface Identifier is 0x3.  The\n   encoding of the Identifier
    is ANSI X3.4-1986 [7].  The maximum string\n   length of the text-based Interface
    Identifier is 255 octets.  The tag\n   length is equal to the string length of
    the Interface Identifier name\n   plus four bytes for the Tag and Length fields.\n"
  title: 3.2  M2UA Message Header
- contents:
  - "3.3 M2UA Messages\n   The following section defines the messages and parameter
    contents.\n   The M2UA messages will use the common message header (Figure 2)
    and\n   the M2UA message header (Figure 3 and Figure 4).\n"
  title: 3.3 M2UA Messages
- contents:
  - '3.3.1 MTP2 User Adaptation Messages

    '
  title: 3.3.1 MTP2 User Adaptation Messages
- contents:
  - "3.3.1.1 Data\n   The Data message contains an SS7 MTP2-User Protocol Data Unit
    (PDU).\n   The Data message contains the following parameter:\n      Protocol
    Data (mandatory)\n      Correlation Id (optional)\n   The format for the Data
    Message parameters is as follows:\n    0                   1                   2
    \                  3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5
    6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  |         Tag (0x300)           |            Length             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  /                                                               \\\n   \\                       Protocol
    Data                           /\n   /                                                               \\\n
    \  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |         Tag
    (0x13)            |          Length = 8           |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  |                         Correlation Id                        |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  The Protocol Data field contains the MTP2-User application message in\n   network
    byte order starting with the Signalling Information Octet\n   (SIO).  The Correlation
    Id parameter uniquely identifies the MSU\n   carried in the Protocol Data within
    an AS.  This Correlation Id\n   parameter is assigned by the sending M2UA.  The
    purpose of the\n   Correlation Id is to permit the newly active ASP to synchronize
    its\n   processing of the traffic in each ordered stream with other ASPs in\n
    \  the broadcast group.\n   The format for a Data Message with TTC PDU parameters
    is as follows:\n    0                   1                   2                   3\n
    \   0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  |         Tag (0x301)           |            Length             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  /                                                               \\\n   \\                    TTC
    Protocol Data                          /\n   /                                                               \\\n
    \  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |          Tag
    (0x13)           |          Length = 8           |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  |                         Correlation Id                        |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  The Protocol Data field contains the MTP2-User application message in\n   network
    byte order starting with the Length Indicator (LI) octet.\n   The Japanese TTC
    variant uses the spare bits of the LI octet for\n   priority.\n   The length of
    the Protocol Data and TTC Protocol Data MUST NOT exceed\n   the length of a MTP2-User
    application message [2,3,5].\n"
  title: 3.3.1.1 Data
- contents:
  - "3.3.1.2  Data Acknowledge Message\n   The Data Acknowledge message contains the
    Correlation Id of the Data\n   message that the sending M2UA is acknowledging
    as successfully\n   processed to the peer M2UA.\n   The Data Acknowledge message
    contains the following parameter:\n      Correlation Id       Mandatory\n   The
    following format MUST be used for the Data Ack Message:\n    0                   1
    \                  2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5
    6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  |          Tag (0x13)           |          Length = 8           |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  |                         Correlation Id                        |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  The Correlation Id parameter of the Data message and the Data Ack\n   message
    provide a mechanism, for those SG implementations capable of\n   taking advantage
    of them, to obtain an acknowledgment that the MSU\n   has been transferred to
    the M2UA peer before acknowledging the MSU to\n   the SS7 peer, removing the risk
    of losing messages due to association\n   failure or SCTP congestion.\n   The
    Data Ack message MUST be sent if a Correlation Id parameter is\n   received from
    the peer.  Otherwise, the Data Ack message MUST NOT be\n   sent.\n   If the Data
    Acknowledge is not sent for Correlation Id(s) or is sent\n   with Invalid Correlation
    Id(s), the SS7 link will eventually fail due\n   to lack of MTP Level 2 acknowledgments
    of the SS7 peer's MSUs.\n"
  title: 3.3.1.2  Data Acknowledge Message
- contents:
  - "3.3.1.3  Establish (Request, Confirmation)\n   The Establish Request message
    is used to establish the SS7 link or to\n   indicate that the channel has been
    established.  The MGC controls the\n   state of the SS7 link.  When the MGC desires
    the SS7 link to be in-\n   service, it will send the Establish Request message.
    \ Note that the\n   SGP MAY already have the SS7 link established at its layer.
    \ If so,\n   upon receipt of an Establish Request, the SGP takes no action except\n
    \  to send an Establish Confirm.\n   When the MGC sends an M2UA Establish Request
    message, the MGC MAY\n   start a timer.  This timer would be stopped upon receipt
    of an M2UA\n   Establish Confirm.  If the timer expires, the MGC would resend
    the\n   M2UA Establish Request message and restart the timer.  In other\n   words,
    the MGC MAY continue to request the establishment of the data\n   link on a periodic
    basis until the desired state is achieved or some\n   other action is taken (notify
    the Management Layer).\n   The mode (Normal or Emergency) for bringing the SS7
    link in service\n   is defaulted to Normal.  The State Request (described in Section\n
    \  3.3.1.5 below) can be used to change the mode to Emergency.\n"
  title: 3.3.1.3  Establish (Request, Confirmation)
- contents:
  - "3.3.1.4  Release (Request, Indication, Confirmation)\n   This Release Request
    message is used to release the channel.  The\n   Release Confirm and Indication
    messages are used to indicate that the\n   channel has been released.\n"
  title: 3.3.1.4  Release (Request, Indication, Confirmation)
- contents:
  - "3.3.1.5  State Request\n   The State Request message can be sent from a MGC to
    cause an action\n   on a particular SS7 link supported by the Signalling Gateway
    Process.\n   The SGP sends a State Confirm to the MGC if the action has been\n
    \  successfully completed.  The State Confirm reflects that state value\n   received
    in the State Request message.\n   The State Request message contains the following
    parameter:\n    State (mandatory)\n    0                   1                   2
    \                  3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5
    6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  |         Tag (0x302)           |          Length = 8           |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  |                             State                             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  The valid values for State are shown in the following table.\n            Define
    \          Value        Description\n      STATUS_LPO_SET          0x0      Request
    local processor outage\n      STATUS_LPO_CLEAR        0x1      Request local processor
    outage\n                                       recovered\n      STATUS_EMER_SET
    \        0x2      Request emergency alignment\n      STATUS_EMER_CLEAR       0x3
    \     Request normal alignment (cancel\n                                       emergency)\n
    \     STATUS_FLUSH_BUFFERS    0x4      Flush or clear receive, transmit\n                                       and
    retransmit queues\n      STATUS_CONTINUE         0x5      Continue or Resume\n
    \     STATUS_CLEAR_RTB        0x6      Clear the retransmit queue\n      STATUS_AUDIT
    \           0x7      Audit state of link\n      STATUS_CONG_CLEAR       0x8      Congestion
    cleared\n      STATUS_CONG_ACCEPT      0x9      Congestion accept\n      STATUS_CONG_DISCARD
    \    0xa      Congestion discard\n"
  title: 3.3.1.5  State Request
- contents:
  - "3.3.1.6  State Confirm\n   The State Confirm message will be sent by the SGP
    in response to a\n   State Request from the MGC.  The State Confirm reflects that
    state\n   value received in the State Request message.\n   The State Confirm message
    contains the following parameter:\n    State (mandatory)\n    0                   1
    \                  2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5
    6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  |         Tag (0x302)           |           Length = 8          |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  |                             State                             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  The valid values for State are shown in the following table.  The\n   value
    of the State field SHOULD reflect the value received in the\n   State Request
    message.\n            Define           Value        Description\n      STATUS_LPO_SET
    \         0x0      Request local processor outage\n      STATUS_LPO_CLEAR        0x1
    \     Request local processor outage\n                                       recovered\n
    \     STATUS_EMER_SET         0x2      Request emergency alignment\n      STATUS_EMER_CLEAR
    \      0x3      Request normal alignment (cancel\n                                       emergency)\n
    \     STATUS_FLUSH_BUFFERS    0x4      Flush or clear receive, transmit\n                                       and
    retransmit queues\n      STATUS_CONTINUE         0x5      Continue or Resume\n
    \     STATUS_CLEAR_RTB        0x6      Clear the retransmit queue\n      STATUS_AUDIT
    \           0x7      Audit state of link\n      STATUS_CONG_CLEAR       0x8      Congestion
    cleared\n      STATUS_CONG_ACCEPT      0x9      Congestion accept\n      STATUS_CONG_DISCARD
    \    0xa      Congestion discard\n"
  title: 3.3.1.6  State Confirm
- contents:
  - "3.3.1.7  State Indication\n   The MTP2 State Indication message can be sent from
    a SGP to an ASP to\n   indicate a condition on a SS7 link.\n   The State Indication
    message contains the following parameter:\n    Event (mandatory)\n    0                   1
    \                  2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5
    6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  |         Tag (0x303)           |          Length = 8           |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  |                             Event                             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  The valid values for Event are shown in the following table.\n          Define
    \           Value          Description\n      EVENT_RPO_ENTER        0x1      Remote
    entered processor outage\n      EVENT_RPO_EXIT         0x2      Remote exited
    processor outage\n      EVENT_LPO_ENTER        0x3      Link entered processor
    outage\n      EVENT_LPO_EXIT         0x4      Link exited processor outage\n"
  title: 3.3.1.7  State Indication
- contents:
  - "3.3.1.8  Congestion Indication\n   The Congestion Indication message can be sent
    from a Signalling\n   Gateway Process to an ASP to indicate the congestion status
    and\n   discard status of a SS7 link.  When the MSU buffer fill increases\n   above
    an Onset threshold or decreases below an Abatement threshold or\n   crosses a
    Discard threshold in either direction, the SGP SHALL send a\n   congestion indication
    message when it supports SS7 MTP2 variants that\n   support multiple congestion
    levels.\n   The SGP SHALL send the message only when there is actually a change\n
    \  in either the discard level or the congestion level to report,\n   meaning
    it is different from the previously sent message.  In\n   addition, the SGP SHALL
    use an implementation dependent algorithm to\n   limit the frequency of congestion
    indication messages.\n   An implementation may optionally send Congestion Indication
    messages\n   on a \"high priority\" stream in order to potentially reduce delay.\n
    \  The Congestion Indication message contains the following parameters:\n    Congestion
    Status (mandatory)\n    Discard Status (optional)\n    0                   1                   2
    \                  3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5
    6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  |         Tag (0x304)           |          Length = 8           |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  |                       Congestion Status                       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  |         Tag (0x305)           |          Length = 8           |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  |                         Discard Status                        |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  The valid values for Congestion Status and Discard Status are shown\n   in
    the following table.\n            Define        Value        Description\n          LEVEL_NONE
    \      0x0       No congestion\n          LEVEL_1          0x1       Congestion
    Level 1\n          LEVEL_2          0x2       Congestion Level 2\n          LEVEL_3
    \         0x3       Congestion Level 3\n   For SS7 networks that do not support
    multiple levels of congestion,\n   only the LEVEL_NONE and LEVEL_3 values will
    be used.  For SS7\n   networks that support multiple levels of congestion, it
    is possible\n   for all values to be used.  Refer to [2], [3] and [12] for more\n
    \  details on the Congestion and Discard Status of SS7 signalling links.\n"
  title: 3.3.1.8  Congestion Indication
- contents:
  - "3.3.1.9  Retrieval Request\n   The MTP2 Retrieval Request message is used during
    the MTP Level 3\n   changeover procedure to request the BSN, to retrieve PDUs
    from the\n   transmit and retransmit queues or to flush PDUs from the retransmit\n
    \  queue.  Examples of the use of Retrieval Request for SS7 Link\n   Changeover
    are provided in Section 5.3.6.\n   The Retrieval Request message contains the
    following parameters:\n    Action (mandatory)\n    Sequence Number (optional)\n
    \   0                   1                   2                   3\n    0 1 2 3
    4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  |         Tag (0x306)           |          Length = 8           |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  |                            Action                             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  |         Tag (0x307)           |          Length = 8           |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  |                       Sequence Number                         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  The valid values for Action are shown in the following table.\n           Define
    \        Value       Description\n      ACTION_RTRV_BSN      0x1     Retrieve
    the backward sequence number\n      ACTION_RTRV_MSGS     0x2     Retrieve the
    PDUs from the transmit\n                                   and retransmit queues\n
    \  In the Retrieval Request message, the Sequence Number field SHOULD\n   NOT
    be present if the Action field is ACTION_RTRV_BSN.  The Sequence\n   Number field
    contains the Forward Sequence Number (FSN) of the far\n   end if the Action is
    ACTION_RTRV_MSGS.\n"
  title: 3.3.1.9  Retrieval Request
- contents:
  - "3.3.1.10  Retrieval Confirm\n   The MTP2 Retrieval Confirm message is sent by
    the Signalling Gateway\n   in response to a Retrieval Request message.  Examples
    of the use of\n   the Retrieval Confirm for SS7 Link Changeover are provided in
    Section\n   5.3.6.\n   The Retrieval Confirm message contains the following parameters:\n
    \   Action (mandatory)\n    Result (mandatory)\n    Sequence Number (optional)\n
    \   0                   1                   2                   3\n    0 1 2 3
    4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  |         Tag (0x306)           |          Length = 8           |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  |                            Action                             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  |         Tag (0x308)           |          Length = 8           |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  |                            Result                             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  |         Tag (0x307)           |          Length = 8           |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  |                       Sequence Number                         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  The valid values for Action are the same as in Retrieval Request.\n   The values
    for Result are shown below:\n           Define         Value       Description\n
    \     RESULT_SUCCESS       0x0     Action successful\n      RESULT_FAILURE       0x1
    \    Action failed\n   When the Signalling Gateway Process sends a Retrieval Confirm
    to a\n   Retrieval Request, it echos the Action field.  If the Action was\n   ACTION_RTRV_BSN
    and the SGP successfully retrieved the BSN, the SGP\n   will put the Backward
    Sequence Number (BSN) in the Sequence Number\n   field and will indicate a success
    in the Result field.  If the BSN\n   could not be retrieved, the Sequence Number
    field will not be\n   included and the Result field will indicate failure.\n   For
    a Retrieval Confirm with Action of ACTION_RTRV_MSGS, the value of\n   the Result
    field will indicate success or failure.  A failure means\n   that the buffers
    could not be retrieved.  The Sequence Number field\n   is not used with ACTION_RTRV_MSGS.\n"
  title: 3.3.1.10  Retrieval Confirm
- contents:
  - "3.3.1.11  Retrieval Indication\n   The Retrieval Indication message is sent by
    the Signalling Gateway\n   with a PDU from the transmit or retransmit queue.  The
    Retrieval\n   Indication message does not contain the Action or Sequence Number\n
    \  fields, just a MTP3 Protocol Data Unit (PDU) from the transmit or\n   retransmit
    queue.  Examples of the use of the Retrieval Indication\n   for SS7 Link Changeover
    are provided in Section 5.3.6.\n    0                   1                   2
    \                  3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5
    6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  |          Tag (0x300)          |            Length             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  /                                                               \\\n   \\                       Protocol
    Data                           /\n   /                                                               \\\n
    \  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   For TTC
    Data messages, the following parameter will be used to\n   indicate a TTC PDU
    which starts at LI.\n    0                   1                   2                   3\n
    \   0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  |          Tag (0x301)          |            Length             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  /                                                               \\\n   \\                     TTC
    Protocol Data                         /\n   /                                                               \\\n
    \  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   The M2UA
    implementation MAY consider the use of the bundling feature\n   of SCTP for Retrieval
    Indication messages.\n"
  title: 3.3.1.11  Retrieval Indication
- contents:
  - "3.3.1.12  Retrieval Complete Indication\n   The MTP2 Retrieval Complete Indication
    message is exactly the same as\n   the MTP2 Retrieval Indication message except
    that it also indicates\n   that retrieval is complete.  In addition, it MAY contain
    a PDU (which\n   MUST be the last PDU) from the transmit or retransmit queue.\n"
  title: 3.3.1.12  Retrieval Complete Indication
- contents:
  - "3.3.2  Application Server Process Maintenance (ASPM) Messages\n   The ASPM messages
    will only use the common message header.\n"
  title: 3.3.2  Application Server Process Maintenance (ASPM) Messages
- contents:
  - "3.3.2.1  ASP Up (ASPUP)\n   The ASP Up (ASPUP) message is used to indicate to
    a remote M2UA peer\n   that the Adaptation layer is ready to receive traffic or
    maintenance\n   messages.\n   The ASPUP message contains the following parameters\n
    \     ASP Identifier (optional)\n      Info String (optional)\n   Note: The ASP
    Identifier MUST be used where the SGP cannot\n         identify the ASP by pre-configured
    address/port number\n         information (e.g., where an ASP is resident on a
    Host using\n         dynamic address/port number assignment).\n   The format for
    ASPUP Message parameters is as follows:\n    0                   1                   2
    \                  3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5
    6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  |           Tag (0x11)          |             Length = 8        |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  |                        ASP Identifier*                        |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  |           Tag (0x4)           |             Length            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  /                                                               \\\n   \\                          INFO
    String*                         /\n   /                                                               \\\n
    \  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   The optional
    ASP Identifier parameter would contain a unique value\n   that is locally significant
    among the ASPs that support an AS.  The\n   SGP should save the ASP Identifier
    to be used, if necessary, with the\n   Notify message (see Section 3.3.3.2).\n
    \  The optional INFO String parameter can carry any meaningful UTF-8 [6]\n   character
    string along with the message.  Length of the INFO String\n   parameter is from
    0 to 255 octets.  No procedures are presently\n   identified for its use but the
    INFO String MAY be used for debugging\n   purposes.\n"
  title: 3.3.2.1  ASP Up (ASPUP)
- contents:
  - "3.3.2.2 ASP Up Ack\n   The ASP Up Ack message is used to acknowledge an ASP Up
    message\n   received from a remote M2UA peer.\n   The ASPUP Ack message contains
    the following parameters:\n      INFO String (optional)\n   The format for ASPUP
    Ack Message parameters is as follows:\n    0                   1                   2
    \                  3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5
    6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  |           Tag (0x4)           |             Length            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  /                                                               \\\n   \\                          INFO
    String*                         /\n   /                                                               \\\n
    \  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   The format
    and description of the optional Info String parameter is\n   the same as for the
    ASP UP message (See Section 3.3.2.1).\n"
  title: 3.3.2.2 ASP Up Ack
- contents:
  - "3.3.2.3  ASP Down (ASPDN)\n   The ASP Down (ASPDN) message is used to indicate
    to a remote M2UA\n   peer that the adaptation layer is not ready to receive traffic
    or\n   maintenance messages.\n   The ASPDN message contains the following parameters\n
    \      INFO String (optional)\n   The format for the ASPDN message parameters
    is as follows:\n    0                   1                   2                   3\n
    \   0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  |           Tag (0x4)           |            Length             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  /                                                               \\\n   \\                          INFO
    String*                         /\n   /                                                               \\\n
    \  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   The format
    and description of the optional Info String parameter is\n   the same as for the
    ASP Up message (See Section 3.3.2.1).\n"
  title: 3.3.2.3  ASP Down (ASPDN)
- contents:
  - "3.3.2.4 ASP Down Ack\n   The ASP Down Ack message is used to acknowledge an ASP
    Down message\n   received from a remote M2UA peer.\n   The ASP Down Ack message
    contains the following parameters:\n       INFO String (optional)\n   The format
    for the ASPDN Ack message parameters is as follows:\n    0                   1
    \                  2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5
    6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  |           Tag (0x4)           |            Length             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  /                                                               \\\n   \\                          INFO
    String*                         /\n   /                                                               \\\n
    \  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   The format
    and description of the optional Info String parameter is\n   the same as for the
    ASP UP message (See Section 3.3.2.1).\n"
  title: 3.3.2.4 ASP Down Ack
- contents:
  - "3.3.2.5  Heartbeat (BEAT)\n   The Heartbeat message is optionally used to ensure
    that the M2UA\n   peers are still available to each other.\n   The BEAT message
    contains the following parameter:\n       Heartbeat Data           Optional\n
    \  The format for the BEAT message is as follows:\n    0                   1                   2
    \                  3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5
    6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  |            Tag = 0x0009       |            Length             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  /                       Heartbeat Data                          /\n   \\                                                               \\\n
    \  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   The sending
    node defines the Heartbeat Data field contents.  It may\n   include a Heartbeat
    Sequence Number and/or time stamp, or other\n   implementation specific details.\n
    \  The receiver of a Heartbeat message does not process this field as it\n   is
    only of significance to the sender.  The receiver echoes the\n   content of the
    Heartbeat Data in a BEAT ACK message.\n"
  title: 3.3.2.5  Heartbeat (BEAT)
- contents:
  - "3.3.2.6  Heartbeat Ack (BEAT ACK)\n   The Heartbeat ACK message is sent in response
    to a BEAT message.  A\n   peer MUST send a BEAT ACK in response to a BEAT message.
    \ It includes\n   all the parameters of the received Heartbeat message, without
    any\n   change.\n   The BEAT ACK message contains the following parameter:\n       Heartbeat
    Data           Optional\n   The format for the BEAT ACK message is as follows:\n
    \   0                   1                   2                   3\n    0 1 2 3
    4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  |            Tag = 0x0009       |            Length             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  /                       Heartbeat Data                          /\n   \\                                                               \\\n
    \  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   The sending
    node defines the Heartbeat Data field contents.  It may\n   include a Heartbeat
    Sequence Number and/or time stamp, or other\n   implementation specific details.\n
    \  The receiver of a Heartbeat message does not process this field as it\n   is
    only of significance to the sender.  The receiver echoes the\n   content of the
    Heartbeat Data in a BEAT ACK message.\n"
  title: 3.3.2.6  Heartbeat Ack (BEAT ACK)
- contents:
  - "3.3.2.7  ASP Active (ASPAC)\n   The ASPAC message is sent by an ASP to indicate
    to an SGP that it is\n   Active and ready to be used.\n   The ASPAC message contains
    the following parameters:\n      Traffic Mode Type (optional)\n      Interface
    Identifier (optional)\n         - Combination of integer and integer ranges, OR\n
    \        - string (text formatted)\n      INFO String (optional)\n   The format
    for the ASPAC message using integer formatted Interface\n   Identifiers is as
    follows:\n    0                   1                   2                   3\n
    \   0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  |           Tag (0xb)           |            Length = 8         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  |                     Traffic Mode Type                         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  |     Tag (0x1=integer)         |            Length             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  /                                                               \\\n   \\                     Interface
    Identifiers*                    /\n   /                                                               \\\n
    \  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |    Tag
    (0x8=integer range)    |            Length             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  |                 Interface Identifier Start1*                  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  |                  Interface Identifier Stop1*                  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  |                 Interface Identifier Start2*                  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  |                  Interface Identifier Stop2*                  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \    .                                                            .\n     .                                                            .\n
    \    .                                                            .\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  |                 Interface Identifier StartN*                  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  |                  Interface Identifier StopN*                  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  /                                                               \\\n   \\              Additional
    Interface Identifiers                 /\n   /                    of Tag Type 0x1
    or 0x8                     \\\n   \\                                                               /\n
    \  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |         Tag
    (0x4)             |             Length            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  /                                                               \\\n   \\                          INFO
    String*                         /\n   /                                                               \\\n
    \  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   The format
    for the ASPAC message using text formatted (string)\n   Interface Identifiers
    is as follows:\n    0                   1                   2                   3\n
    \   0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  |           Tag (0xb)           |            Length             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  |                     Traffic Mode Type                         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  |       Tag (0x3=string)        |            Length             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  /                                                               \\\n   \\                     Interface
    Identifier*                     /\n   /                                                               \\\n
    \  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   /                                                               \\\n
    \  \\              Additional Interface Identifiers                 /\n   /                       of
    Tag Type 0x3                         \\\n   \\                                                               /\n
    \  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |         Tag
    (0x4)             |             Length            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  /                                                               \\\n   \\                          INFO
    String*                         /\n   /                                                               \\\n
    \  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   The Traffic
    Mode Type parameter identifies the traffic mode of\n   operation of the ASP within
    an AS.  The valid values for Type are\n   shown in the following table:\n      Value
    \         Description\n       0x1            Override\n       0x2            Load-share\n
    \      0x3            Broadcast\n   Within a particular AS, only one Traffic Mode
    Type can be used.  The\n   Override value indicates that the ASP is operating
    in Override mode,\n   where the ASP takes over all traffic in an Application Server
    (i.e.,\n   primary/backup operation), over-riding any currently active ASPs in\n
    \  the AS.  In Load-share mode, the ASP will share in the traffic\n   distribution
    with any other currently active ASPs.  In Broadcast\n   mode, all of the Active
    ASPs receive all message traffic in the\n   Application Server.\n   The optional
    Interface Identifiers parameter contains a list of\n   Interface Identifier integers
    (Type 0x1 or Type 0x8) or text strings\n   (Type 0x3)indexing the Application
    Server traffic that the sending\n   ASP is configured/registered to receive.  If
    integer formatted\n   Interface Identifiers are being used, the ASP can also send
    ranges of\n   Interface Identifiers (Type 0x8).  Interface Identifier types Integer\n
    \  (0x1) and Integer Range (0x8) are allowed in the same message.  Text\n   formatted
    Interface Identifiers (0x3) cannot be used with either\n   Integer (0x1) or Integer
    Range (0x8) types.\n   If no Interface Identifiers are included, the message is
    for all\n   provisioned Interface Identifiers within the AS(s) in which the ASP\n
    \  is provisioned.  If only a subset of Interface Identifiers for an AS\n   are
    included, the ASP is noted as Active for all the Interface\n   Identifiers provisioned
    for that AS.\n   Note: If the optional Interface Identifier parameter is present,
    the\n         integer formatted Interface Identifier MUST be supported, while\n
    \        the text formatted Interface Identifier MAY be supported.\n   An SGP
    that receives an ASPAC with an incorrect or unsupported\n   Traffic Mode Type
    for a particular Interface Identifier will respond\n   with an Error Message (Cause:
    Unsupported Traffic Handling Mode).\n   The format and description of the optional
    Info String parameter is\n   the same as for the ASP UP message (See Section 3.3.2.1).\n"
  title: 3.3.2.7  ASP Active (ASPAC)
- contents:
  - "3.3.2.8  ASP Active Ack\n   The ASP Active (ASPAC) Ack message is used to acknowledge
    an ASP\n   Active message received from a remote M2UA peer.\n   The ASPAC Ack
    message contains the following parameters:\n      Traffic Mode Type (optional)\n
    \     Interface Identifier (optional)\n         - Combination of integer and integer
    ranges, OR\n         - string (text formatted)\n      INFO String (optional)\n
    \  The format for the ASPAC Ack message with Integer-formatted Interface\n   Identifiers
    is as follows:\n    0                   1                   2                   3\n
    \   0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  |           Tag (0xb)           |            Length = 8         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  |                      Traffic Mode Type                        |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  |     Tag (0x1=integer)         |            Length             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  /                                                               \\\n   \\                     Interface
    Identifiers*                    /\n   /                                                               \\\n
    \  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |    Tag
    (0x8=integer range)    |            Length             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  |                 Interface Identifier Start1*                  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  |                  Interface Identifier Stop1*                  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  |                 Interface Identifier Start2*                  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  |                  Interface Identifier Stop2*                  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \   .                                                            .\n    .                                                            .\n
    \   .                                                            .\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  |                 Interface Identifier StartN*                  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  |                  Interface Identifier StopN*                  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  /                                                               \\\n   \\              Additional
    Interface Identifiers                 /\n   /                    of Tag Type 0x1
    or 0x8                     \\\n   \\                                                               /\n
    \  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |         Tag
    (0x4)             |             Length            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  /                                                               \\\n   \\                          INFO
    String*                         /\n   /                                                               \\\n
    \  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   The format
    for the ASP Active Ack message using text formatted\n   (string) Interface Identifiers
    is as follows:\n    0                   1                   2                   3\n
    \   0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  |           Tag (0xb)           |            Length             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  |                     Traffic Mode Type                         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  |       Tag (0x3=string)        |            Length             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  /                                                               \\\n   \\                     Interface
    Identifier*                     /\n   /                                                               \\\n
    \  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   /                                                               \\\n
    \  \\              Additional Interface Identifiers                 /\n   /                       of
    Tag Type 0x3                         \\\n   \\                                                               /\n
    \  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |         Tag
    (0x4)             |             Length            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  /                                                               \\\n   \\                          INFO
    String*                         /\n   /                                                               \\\n
    \  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   The format
    and description of the optional Info String parameter is\n   the same as for the
    ASP Up message (See Section 3.3.2.1).\n   The format of the optional Interface
    Identifier parameter is the same\n   as for the ASP Active message (See Section
    3.3.2.7).\n   The format and description of the optional Info String parameter
    is\n   the same as for the ASP Up message (See Section 3.3.2.1).\n"
  title: 3.3.2.8  ASP Active Ack
- contents:
  - "3.3.2.9  ASP Inactive (ASPIA)\n   The ASP Inactive (ASPIA) message is sent by
    an ASP to indicate to an\n   SGP that it is no longer an active ASP to be used
    from within a list\n   of ASPs.  The SGP will respond with an ASPIA Ack message
    and either\n   discard incoming messages or buffer for a timed period and then\n
    \  discard.\n   The ASPIA message contains the following parameters:\n      Interface
    Identifiers (optional)\n         - Combination of integer and integer ranges,
    OR\n         - string (text formatted)\n      INFO String (optional)\n   The format
    for the ASP Inactive message parameters using Integer\n   formatted Interface
    Identifiers is as follows:\n    0                   1                   2                   3\n
    \   0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  |     Tag (0x1=integer)         |            Length             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  /                                                               \\\n   \\                     Interface
    Identifiers*                    /\n   /                                                               \\\n
    \  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |    Tag
    (0x8=integer range)    |            Length             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  |                 Interface Identifier Start1*                  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  |                  Interface Identifier Stop1*                  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  |                 Interface Identifier Start2*                  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  |                  Interface Identifier Stop2*                  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \   .                                                            .\n    .                                                            .\n
    \   .                                                            .\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  |                 Interface Identifier StartN*                  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  |                  Interface Identifier StopN*                  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  /                                                               \\\n   \\              Additional
    Interface Identifiers                 /\n   /                    of Tag Type 0x1
    or 0x8                     \\\n   \\                                                               /\n
    \  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |           Tag
    (0x4)           |            Length             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  /                                                               \\\n   \\                          INFO
    String*                         /\n   /                                                               \\\n
    \  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   The format
    for the ASP Inactive message using text formatted (string)\n   Interface Identifiers
    is as follows:\n    0                   1                   2                   3\n
    \   0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  |       Tag (0x3=string)        |            Length             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  /                                                               \\\n   \\                     Interface
    Identifier*                     /\n   /                                                               \\\n
    \  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   /                                                               \\\n
    \  \\              Additional Interface Identifiers                 /\n   /                      of
    Tag Type 0x3                          \\\n   \\                                                               /\n
    \  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |         Tag
    (0x4)             |             Length            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  /                                                               \\\n   \\                          INFO
    String*                         /\n   /                                                               \\\n
    \  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   The format
    of the optional Interface Identifier parameter is the same\n   as for the ASP
    Active message (See Section 3.3.2.7).\n   The format and description of the optional
    Info String parameter is\n   the same as for the ASP Up message (See Section 3.3.2.1).\n
    \  The optional Interface Identifiers parameter contains a list of\n   Interface
    Identifier integers indexing the Application Server traffic\n   that the sending
    ASP is configured/registered to receive, but does\n   not want to receive at this
    time.\n"
  title: 3.3.2.9  ASP Inactive (ASPIA)
- contents:
  - "3.3.2.10 ASP Inactive Ack\n   The ASP Inactive (ASPIA) Ack message is used to
    acknowledge an ASP\n   Inactive message received from a remote M2UA peer.\n   The
    ASPIA Ack message contains the following parameters:\n      Interface Identifiers
    (optional)\n         - Combination of integer and integer ranges, OR\n         -
    string (text formatted)\n      INFO String (optional)\n   The format for the ASPIA
    Ack message is as follows:\n    0                   1                   2                   3\n
    \   0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  |     Tag (0x1=integer)         |            Length             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  /                                                               \\\n   \\                     Interface
    Identifiers*                    /\n   /                                                               \\\n
    \  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |    Tag
    (0x8=integer range)    |            Length             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  |                 Interface Identifier Start1*                  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  |                  Interface Identifier Stop1*                  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  |                 Interface Identifier Start2*                  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  |                  Interface Identifier Stop2*                  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \   .                                                             .\n    .                                                             .\n
    \   .                                                             .\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  |                 Interface Identifier StartN*                  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  |                  Interface Identifier StopN*                  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  /                                                               \\\n   \\              Additional
    Interface Identifiers                 /\n   /                    of Tag Type 0x1
    or 0x8                     \\\n   \\                                                               /\n
    \  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |         Tag
    (0x4)             |             Length            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  /                                                               \\\n   \\                          INFO
    String*                         /\n   /                                                               \\\n
    \  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   The format
    for the ASP Inactive Ack message using text formatted\n   (string) Interface Identifiers
    is as follows:\n    0                   1                   2                   3\n
    \   0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  |       Tag (0x3=string)        |            Length             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  /                                                               \\\n   \\                     Interface
    Identifier*                     /\n   /                                                               \\\n
    \  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   /                                                               \\\n
    \  \\              Additional Interface Identifiers                 /\n   /                      of
    Tag Type 0x3                          \\\n   \\                                                               /\n
    \  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |         Tag
    (0x4)             |             Length            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  /                                                               \\\n   \\                          INFO
    String*                         /\n   /                                                               \\\n
    \  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   The format
    of the optional Interface Identifier parameter is the same\n   as for the ASP
    Active message (See Section 3.3.2.7).\n   The format and description of the optional
    Info String parameter is\n   the same as for the ASP Up message (See Section 3.3.2.1).\n"
  title: 3.3.2.10 ASP Inactive Ack
- contents:
  - '3.3.3  Layer Management (MGMT) Messages

    '
  title: 3.3.3  Layer Management (MGMT) Messages
- contents:
  - "3.3.3.1  Error (ERR)\n   The Error (ERR) message is used to notify a peer of
    an error event\n   associated with an incoming message.  For example, the message
    type\n   might be unexpected given the current state, or a parameter value\n   might
    be invalid.\n   An Error message MUST not be generated in response to other Error\n
    \  messages.\n   The ERR message contains the following parameters:\n      Error
    Code (mandatory)\n      Interface Identifier (optional)\n      Diagnostic Information
    (optional)\n   The format for the ERR message is as follows:\n    0                   1
    \                  2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5
    6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  |           Tag (0xc)           |            Length = 8         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  |                          Error Code                           |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  |     Tag (0x1, 0x3, or 0x8)    |            Length             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  /                                                               \\\n   \\                     Interface
    Identifier(s)*                  /\n   /                                                               \\\n
    \  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |           Tag
    (0x7)           |            Length             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  /                                                               \\\n   \\                     Diagnostic
    Information*                   /\n   /                                                               \\\n
    \  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   The Error
    Code parameter indicates the reason for the Error Message.\n   The Error parameter
    value can be one of the following values:\n      Invalid Version                        0x1\n
    \     Invalid Interface Identifier           0x2\n      Unsupported Message Class
    \             0x3\n      Unsupported Message Type               0x4\n      Unsupported
    Traffic Handling Mode      0x5\n      Unexpected Message                     0x6\n
    \     Protocol Error                         0x7\n      Unsupported Interface
    Identifier Type  0x8\n      Invalid Stream Identifier              0x9\n      Not
    Used in M2UA                       0xa\n      Not Used in M2UA                       0xb\n
    \     Not Used in M2UA                       0xc\n      Refused - Management Blocking
    \         0xd\n      ASP Identifier Required                0xe\n      Invalid
    ASP Identifier                 0xf\n      ASP Active for Interface Identifier(s)
    0x10\n      Invalid Parameter Value                0x11\n      Parameter Field
    Error                  0x12\n      Unexpected Parameter                   0x13\n
    \     Not Used in M2UA                       0x14\n      Not Used in M2UA                       0x15\n
    \     Missing Parameter                      0x16\n   The \"Invalid Version\"
    error would be sent if a message was received\n   with an invalid or unsupported
    version.  The Error message would\n   contain the supported version in the Common
    header.  The Error\n   message could optionally provide the supported version
    in the\n   Diagnostic Information area.\n   The \"Invalid Interface Identifier\"
    error would be sent by a SGP if an\n   ASP sends a message (i.e. an ASP Active
    message) with an invalid (not\n   configured) Interface Identifier value.  One
    of the optional\n   Interface Identifier parameters (Integer-based, text-based
    or integer\n   range) MUST be used with this error code to identify the invalid\n
    \  Interface Identifier(s) received.\n   The \"Unsupported Traffic Handling Mode\"
    error would be sent by a SGP\n   if an ASP sends an ASP Active with an unsupported
    Traffic Handling\n   Mode.  An example would be a case in which the SGP did not
    support\n   load-sharing.  One of the optional Interface Identifier parameters\n
    \  (Integer-based, text-based or integer range) MAY be used with this\n   error
    code to identify the Interface Identifier(s).\n   The \"Unexpected Message\" error
    would be sent by an ASP if it received\n   a MAUP message from an SGP while it
    was in the Inactive state.\n   The \"Protocol Error\" error would be sent for
    any protocol anomaly\n   (i.e. a bogus message).\n   The \"Invalid Stream Identifier\"
    error would be sent if a message was\n   received on an unexpected SCTP stream
    (i.e. a MGMT message was\n   received on a stream other than \"0\").\n   The \"Unsupported
    Interface Identifier Type\" error would be sent by a\n   SGP if an ASP sends a
    Text formatted Interface Identifier and the SGP\n   only supports Integer formatted
    Interface Identifiers.  When the ASP\n   receives this error, it will need to
    resend its message with an\n   Integer formatted Interface Identifier.\n   The
    \"Unsupported Message Class\" error would be sent if a message with\n   an unexpected
    or unsupported Message Class is received.\n   The \"Refused - Management Blocking\"
    error is sent when an ASP Up or\n   ASP Active message is received and the request
    is refused for\n   management reasons (e.g., management lock-out\").\n   The \"ASP
    Identifier Required\" is sent by a SGP in response to an\n   ASPUP message which
    does not contain an ASP Identifier parameter when\n   the SGP requires one.  The
    ASP SHOULD resend the ASPUP message with\n   an ASP Identifier.\n   The \"Invalid
    ASP Identifier\" is sent by a SGP in response to an ASPUP\n   message with an
    invalid (i.e. non-unique) ASP Identifier.\n   The \"ASP Currently Active for Interface
    Identifier(s)\" error is sent\n   by a SGP when a Deregistration request is received
    from an ASP that\n   is active for Interface Identifier(s) specified in the Deregistration\n
    \  request.  One of the optional Interface Identifier parameters\n   (Integer-based,
    text-based or integer range) MAY be used with this\n   error code to identify
    the Interface Identifier(s).\n   The \"Invalid Parameter Value \" error is sent
    if a message is received\n   with an invalid parameter value (e.g., a State Request
    with an an\n   undefined State).\n   The \"Parameter Field Error\" would be sent
    if a message with a\n   parameter has a wrong length field.\n   The \"Unexpected
    Parameter\" error would be sent if a message contains\n   an invalid parameter.\n
    \  The \"Missing Parameter\" error would be sent if a mandatory parameter\n   was
    not included in a message.\n   The optional Diagnostic information can be any
    information germane to\n   the error condition, to assist in the identification
    of the error\n   condition.  In the case of an Invalid Version Error Code the\n
    \  Diagnostic information includes the supported Version parameter.  In\n   the
    other cases, the Diagnostic information SHOULD be the first 40\n   bytes of the
    offending message.\n"
  title: 3.3.3.1  Error (ERR)
- contents:
  - "3.3.3.2  Notify (NTFY)\n   The Notify message is used to provide an autonomous
    indication of\n   M2UA events to an M2UA peer.\n   The NTFY message contains the
    following parameters:\n      Status Type (mandatory)\n      Status Information
    (mandatory)\n      ASP Identifier (optional)\n      Interface Identifiers (optional)\n
    \     INFO String (optional)\n   The format for the Notify message with Integer-formatted
    Interface\n   Identifiers is as follows:\n    0                   1                   2
    \                  3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5
    6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  |           Tag (0xd)           |            Length = 8         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  |        Status Type            |      Status Information       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  |           Tag (0x11)          |            Length             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  |                        ASP Identifier*                        |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  |     Tag (0x1=integer)         |            Length             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  /                                                               \\\n   \\                     Interface
    Identifiers*                    /\n   /                                                               \\\n
    \  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |    Tag
    (0x8=integer range)    |            Length             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  |                 Interface Identifier Start1*                  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  |                  Interface Identifier Stop1*                  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  |                 Interface Identifier Start2*                  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  |                  Interface Identifier Stop2*                  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \   .                                                             .\n    .                                                             .\n
    \   .                                                             .\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  |                 Interface Identifier StartN*                  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  |                  Interface Identifier StopN*                  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  /                                                               \\\n   \\              Additional
    Interface Identifiers                 /\n   /                    of Tag Type 0x1
    or 0x8                     \\\n   \\                                                               /\n
    \  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |         Tag
    (0x4)             |             Length            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  /                                                               \\\n   \\                          INFO
    String*                         /\n   /                                                               \\\n
    \  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   The format
    for the Notify message with Text-formatted Interface\n   Identifiers is as follows:\n
    \   0                   1                   2                   3\n    0 1 2 3
    4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  |           Tag (0xd)           |            Length = 8         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  |        Status Type            |      Status Information       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  |           Tag (0x11)          |            Length             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  |                        ASP Identifier*                        |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  |       Tag (0x3=string)        |            Length             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  /                                                               \\\n   \\                     Interface
    Identifier*                     /\n   /                                                               \\\n
    \  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   /                                                               \\\n
    \  \\              Additional Interface Identifiers                 /\n   /                        of
    Tag Type 0x3                        \\\n   \\                                                               /\n
    \  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |         Tag
    (0x4)             |             Length            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  /                                                               \\\n   \\                          INFO
    String*                         /\n   /                                                               \\\n
    \  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   The Status
    Type parameter identifies the type of the Notify message.\n   The following are
    the valid Status Type values:\n      Value          Description\n       0x1   Application
    Server state change (AS_State_Change)\n       0x2   Other\n   The Status Information
    parameter contains more detailed information\n   for the notification, based on
    the value of the Status Type.  If the\n   Status Type is AS_State_Change the following
    Status Information\n   values are used:\n      Value          Description\n       1
    \     reserved\n       2      Application Server Inactive (AS_Inactive)\n       3
    \     Application Server Active (AS_Active)\n       4      Application Server
    Pending (AS_Pending)\n   These notifications are sent from an SGP to an ASP upon
    a change in\n   status of a particular Application Server.  The value reflects
    the\n   new state of the Application Server.  The Interface Identifiers of\n   the
    AS MAY be placed in the message if desired.\n   If the Status Type is Other, then
    the following Status Information\n   values are defined:\n      Value          Description\n
    \        1       Insufficient ASP resources active in AS\n         2       Alternate
    ASP Active\n         3       ASP Failure\n   In the Insufficient ASP Resources
    case, the SGP is indicating to an\n   ASP-INACTIVE ASP(s) in the AS that another
    ASP is required in order\n   to handle the load of the AS (Load-sharing mode).
    \ For the Alternate\n   ASP Active case, the formerly Active ASP is informed when
    an\n   alternate ASP transitions to the ASP Active state in Override mode.\n   The
    ASP Identifier (if available) of the Alternate ASP MUST be placed\n   in the message.
    \ For the ASP Failure case, the SGP is indicating to\n   ASP(s) in the AS that
    one of the ASPs has transitioned to ASP-DOWN.\n   The ASP Identifier (if available)
    of the failed ASP MUST be placed in\n   the message.\n   For each of the Status
    Information values in Status Type Other, the\n   Interface Identifiers of the
    affected AS MAY be placed in the message\n   if desired.\n   The format of the
    optional Interface Identifier parameter is the same\n   as for the ASP Active
    message (See Section 3.3.2.7).\n   The format and description of the optional
    Info String parameter is\n   the same as for the ASP Up message (See Section 3.3.2.1).\n"
  title: 3.3.3.2  Notify (NTFY)
- contents:
  - "3.3.4  Interface Identifier Management (IIM) Messages\n   The Interface Identifier
    Management messages are optional.  They are\n   used to support the automatic
    allocation of Signalling Terminals or\n   Signalling Data Links [2][3].\n"
  title: 3.3.4  Interface Identifier Management (IIM) Messages
- contents:
  - "3.3.4.1  Registration Request (REG REQ)\n   The REG REQ message is sent by an
    ASP to indicate to a remote M2UA\n   peer that it wishes to register one or more
    given Link Keys with the\n   remote peer.  Typically, an ASP would send this message
    to an SGP,\n   and expect to receive a REG RSP in return with an associated\n
    \  Interface Identifier value.\n   The REG REQ message contains the following
    parameter:\n      Link Key          (mandatory)\n   The format for the REG REQ
    message is as follows\n    0                   1                   2                   3\n
    \   0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  |         Tag = 0x0309          |            Length             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  \\                                                               \\\n   /                           Link
    Key 1                          /\n   \\                                                               \\\n
    \  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   \\                                                               \\\n
    \  /                              ...                              /\n   \\                                                               \\\n
    \  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |         Tag
    = 0x0309          |            Length             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  \\                                                               \\\n   /                           Link
    Key n                          /\n   \\                                                               \\\n
    \  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   Link
    Key:   fixed length\n      The Link Key parameter is mandatory.  The sender of
    this message\n      expects that the receiver of this message will create a Link
    Key\n      entry and assign a unique Interface Identifier value to it, if the\n
    \     Link Key entry does not yet exist.\n      The Link Key parameter may be
    present multiple times in the same\n      message.  This is used to allow the
    registration of multiple Link\n      Keys in a single message.\n   The format
    of the Link Key parameter is as follows:\n    0                   1                   2
    \                  3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5
    6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  |                       Local-LK-Identifier                     |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  |                 Signalling Data Terminal Identifier           |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  |                   Signalling Data Link Identifier             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  Local-LK-Identifier: 32-bit integer\n      The mandatory Local-LK-Identifier
    field is used to uniquely\n      (between ASP and SGP) identify the registration
    request.  The\n      Identifier value is assigned by the ASP, and is used to correlate\n
    \     the response in a REG RSP message with the original registration\n      request.
    \ The Identifier value MUST remain unique until the REG\n      RSP is received.\n
    \     The format of the Local-LK-Identifier field is as follows:\n    0                   1
    \                  2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5
    6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  |         Tag = 0x030a          |         Length = 8            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  |                    Local-LK-Identifier value                  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  Signalling Data Terminal Identifier\n      The Signalling Data Terminal Identifier
    parameter is mandatory.\n      It identifies the Signalling Data Terminal associated
    with the SS7\n      link for which the ASP is registering.  The format is as follows:\n
    \   0                   1                   2                   3\n    0 1 2 3
    4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  |         Tag = 0x030b          |         Length = 8            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  |          Reserved             |        SDT Identifier         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \     The SDT Identifier is a 32-bit unsigned value which may only be\n      significant
    to 12 or 14 bits depending on the SS7 variant which is\n      supported by the
    MTP Level 3 at the ASP.  Insignificant SDT\n      Identifier bits are coded 0.\n
    \  Signalling Data Link Identifier\n      The Signalling Data Link Identifier
    parameter is mandatory.  It\n      identifies the Signalling Data Link Identifier
    associated with the\n      SS7 link for which the ASP is registering.  The format
    is as\n      follows:\n    0                   1                   2                   3\n
    \   0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  |         Tag = 0x030c          |         Length = 8            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  |          Reserved             |        SDL Identifier         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \     The SDL Identifier is a 32-bit unsigned value which may only be\n      significant
    to 12 or 14 bits depending on the SS7 variant which\n      is supported by the
    MTP Level 3 at the ASP.  Insignificant SDLI\n      bits are coded 0.\n"
  title: 3.3.4.1  Registration Request (REG REQ)
- contents:
  - "3.3.4.2  Registration Response (REG RSP)\n   The REG RSP message is used as a
    response to the REG REQ message\n   from a remote M2UA peer.  It contains indications
    of success/failure\n   for registration requests and returns a unique Interface
    Identifier\n   value for successful registration requests, to be used in subsequent\n
    \  M2UA Traffic Management protocol.\n   The REG RSP message contains the following
    parameter:\n      Registration Results   (mandatory)\n   The format for the REG
    RSP message is as follows:\n    0                   1                   2                   3\n
    \   0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  |         Tag = 0x030d          |            Length             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  \\                                                               \\\n   /                    Registration
    Result 1                      /\n   \\                                                               \\\n
    \  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   \\                                                               \\\n
    \  /                              ...                              /\n   \\                                                               \\\n
    \  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |         Tag
    = 0x030d          |            Length             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  \\                                                               \\\n   /                    Registration
    Result n                      /\n   \\                                                               \\\n
    \  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   Registration
    Results:  fixed length\n      The Registration Results parameter contains one
    or more results,\n      each containing the registration status for a single Link
    Key in\n      the REG REQ message.  The number of results in a single REG RSP\n
    \     message MAY match the number of Link Key parameters found in the\n      corresponding
    REG REQ message.  The format of each result is as\n      follows:\n    0                   1
    \                  2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5
    6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  |                      Local-LK-Identifier                      |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  |                      Registration Status                      |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  |                      Interface Identifier                     |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  Local-LK-Identifier:  32-bit integer\n      The Local-LK-Identifier contains
    the same value as found in the\n      matching Link Key parameter found in the
    REG REQ message.  The\n      format of the Local-LK-Identifier is shown in Section
    3.3.4.1.\n   Registration Status:  32-bit integer\n      The Registration Result
    Status field indicates the success or the\n      reason for failure of a registration
    request.\n      Its values may be one of the following:\n            0         Successfully
    Registered\n            1         Error - Unknown\n            2         Error
    - Invalid SDLI\n            3         Error - Invalid SDTI\n            4         Error
    - Invalid Link Key\n            5         Error - Permission Denied\n            6
    \        Error - Overlapping (Non-unique) Link Key\n            7         Error
    - Link Key not Provisioned\n            8         Error - Insufficient Resources\n
    \     The format of the Registration Status field is as follows:\n       0                   1
    \                  2                   3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4
    5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \     |         Tag = 0x030e          |         Length = 8            |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \     |                      Registration Status                      |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  Interface Identifier:  32-bit integer\n      The Interface Identifier field
    contains the Interface Identifier\n      for the associated Link Key if the registration
    is successful.  It\n      is set to \"0\" if the registration was not successful.
    \ The format\n      of integer-based and text-based Interface Identifier parameters\n
    \     are shown in Section 3.2.\n"
  title: 3.3.4.2  Registration Response (REG RSP)
- contents:
  - "3.3.4.3  De-Registration Request (DEREG REQ)\n   The DEREG REQ message is sent
    by an ASP to indicate to a remote M2UA\n   peer that it wishes to de-register
    a given Interface Identifier.\n   Typically, an ASP would send this message to
    an SGP, and expects to\n   receive a DEREG RSP in return reflecting the Interface
    Identifier and\n   containing a de-registration status.\n   The DEREG REQ message
    contains the following parameter:\n      Interface Identifier  (mandatory)\n   The
    format for the DEREG REQ message is as follows:\n    0                   1                   2
    \                  3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5
    6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  |     Tag = 0x1 or 0x3          |            Length             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  \\                                                               \\\n   /                    Interface
    Identifier 1                     /\n   \\                                                               \\\n
    \  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   \\                                                               \\\n
    \  /                              ...                              /\n   \\                                                               \\\n
    \  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |     Tag
    = 0x1 or 0x3          |            Length             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  \\                                                               \\\n   /                    Interface
    Identifier n                     /\n   \\                                                               \\\n
    \  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   Interface
    Identifier\n      The Interface Identifier parameter contains a Interface Identifier\n
    \     indexing the Application Server traffic that the sending ASP is\n      currently
    registered to receive from the SGP but now wishes to\n      de-register.  The
    format of integer-based and text-based Interface\n      Identifier parameters
    are shown in Section 3.2.\n"
  title: 3.3.4.3  De-Registration Request (DEREG REQ)
- contents:
  - "3.3.4.4  De-Registration Response (DEREG RSP)\n   The DEREG RSP message is used
    as a response to the DEREG REQ message\n   from a remote M2UA peer.\n   The DEREG
    RSP message contains the following parameter:\n      De-Registration Results   (mandatory)\n
    \  The format for the DEREG RSP message is as follows:\n    0                   1
    \                  2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5
    6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  |         Tag = 0x030f          |            Length             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  \\                                                               \\\n   /                  De-Registration
    Result 1                     /\n   \\                                                               \\\n
    \  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   \\                                                               \\\n
    \  /                              ...                              /\n   \\                                                               \\\n
    \  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |         Tag
    = 0x030f          |            Length             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  \\                                                               \\\n   /                  De-Registration
    Result n                     /\n   \\                                                               \\\n
    \  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   De-Registration
    Results:  fixed length\n      The De-Registration Results parameter contains one
    or more\n      results, each containing the de-registration status for a single\n
    \     Interface Identifier in the DEREG REQ message.  The number of\n      results
    in a single DEREG RSP message MAY match the number of\n      Interface Identifier
    parameters found in the corresponding DEREG\n      REQ message.  The format of
    each result is as follows:\n    0                   1                   2                   3\n
    \   0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  |                      Interface Identifier                     |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  |                     De-Registration Status                    |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  Interface Identifier:  32-bit integer\n      The Interface Identifier field
    contains the Interface Identifier\n      value of the matching Link Key to de-register,
    as found in the\n      DEREG REQ.  The format of integer-based and text-based
    Interface\n      Identifier parameters are shown in Section 3.2.\n   De-Registration
    Status:  32-bit integer\n      The De-Registration Result Status field indicates
    the success or\n      the reason for failure of the de-registration.\n      Its
    values may be one of the following:\n            0         Successfully De-registered\n
    \           1         Error - Unknown\n            2         Error - Invalid Interface
    Identifier\n            3         Error - Permission Denied\n            4         Error
    - Not Registered\n      The format of the De-Registration Status field is as follows:\n
    \      0                   1                   2                   3\n       0
    1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \     |         Tag = 0x0310          |         Length = 8            |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \     |                    De-Registration Status                     |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"
  title: 3.3.4.4  De-Registration Response (DEREG RSP)
- contents:
  - "4.0  Procedures\n   The M2UA layer needs to respond to various primitives it
    receives\n   from other layers as well as messages it receives from the peer-to-\n
    \  peer messages.  This section describes various procedures involved in\n   response
    to these events.\n"
  title: 4.  Procedures
- contents:
  - "4.1 Procedures to Support the M2UA-User Layer\n   These procedures achieve the
    M2UA layer \"Transport of MTP Level 2 /\n   MTP Level 3 boundary\" service.\n"
  title: 4.1 Procedures to Support the M2UA-User Layer
- contents:
  - "4.1.1  MTP Level 2 / MTP Level 3 Boundary Procedures\n   On receiving a primitive
    from the local upper layer, the M2UA layer\n   will send the corresponding MAUP
    message (see Section 3) to its peer.\n   The M2UA layer MUST fill in various fields
    of the common and specific\n   headers correctly.  In addition the message SHOULD
    be sent on the\n   SCTP stream that corresponds to the SS7 link.\n"
  title: 4.1.1  MTP Level 2 / MTP Level 3 Boundary Procedures
- contents:
  - "4.1.2  MAUP Message Procedures\n   On receiving MAUP messages from a peer M2UA
    layer, the M2UA layer on\n   an SG or MGC needs to invoke the corresponding layer
    primitives to\n   the local MTP Level 2 or MTP Level 3 layer.\n"
  title: 4.1.2  MAUP Message Procedures
- contents:
  - "4.2 Receipt of Primitives from the Layer Management\n   On receiving primitives
    from the local Layer Management, the M2UA\n   layer will take the requested action
    and provide an appropriate\n   response primitive to Layer Management.\n   An
    M-SCTP_ESTABLISH request primitive from Layer Management at an ASP\n   will initiate
    the establishment of an SCTP association.  The M2UA\n   layer will attempt to
    establish an SCTP association with the remote\n   M2UA peer by sending an SCTP-ASSOCIATE
    primitive to the local SCTP\n   layer.\n   When an SCTP association has been successfully
    established, the SCTP\n   will send an SCTP-COMMUNICATION_UP notification primitive
    to the\n   local M2UA layer.  At the SGP that initiated the request, the M2UA\n
    \  layer will send an M-SCTP_ESTABLISH confirm primitive to Layer\n   Management
    when the association setup is complete.  At the peer M2UA\n   layer, an M-SCTP_ESTABLISH
    indication primitive is sent to Layer\n   Management upon successful completion
    of an incoming SCTP association\n   setup.\n   An M-SCTP_RELEASE request primitive
    from Layer Management initiates\n   the shutdown of an SCTP association.  The
    M2UA layer accomplishes a\n   graceful shutdown of the SCTP association by sending
    an SCTP-SHUTDOWN\n   primitive to the SCTP layer.\n   When the graceful shutdown
    of the SCTP association has been\n   accomplished, the SCTP layer returns an SCTP-SHUTDOWN_COMPLETE\n
    \  notification primitive to the local M2UA layer.  At the M2UA Layer\n   that
    initiated the request, the M2UA layer will send an M-\n   SCTP_RELEASE confirm
    primitive to Layer Management when the\n   association shutdown is complete.  At
    the peer M2UA Layer, an M-\n   SCTP_RELEASE indication primitive is sent to Layer
    Management upon\n   abort or successful shutdown of an SCTP association.\n   An
    M-SCTP_STATUS request primitive supports a Layer Management query\n   of the local
    status of a particular SCTP association.  The M2UA layer\n   simply maps the M-SCTP_STATUS
    request primitive to an SCTP-STATUS\n   primitive to the SCTP layer.  When the
    SCTP responds, the M2UA layer\n   maps the association status information to an
    M-SCTP_STATUS confirm\n   primitive.  No peer protocol is invoked.\n   Similar
    LM-to-M2UA-to-SCTP and/or SCTP-to-M2UA-to-LM primitive\n   mappings can be described
    for the various other SCTP Upper Layer\n   primitives in RFC 2960 [8] such as
    INITIALIZE, SET PRIMARY, CHANGE\n   HEARTBEAT, REQUEST HEARTBEAT, GET SRTT REPORT,
    SET FAILURE THRESHOLD,\n   SET PROTOCOL PARAMETERS, DESTROY SCTP INSTANCE, SEND
    FAILURE, AND\n   NETWORK STATUS CHANGE.  Alternatively, these SCTP Upper Layer\n
    \  primitives (and Status as well) can be considered for modeling\n   purposes
    as a Layer Management interaction directly with the SCTP\n   Layer.\n   M-NOTIFY
    indication and M-ERROR indication primitives indicate to\n   Layer Management
    the notification or error information contained in a\n   received M2UA Notify
    or Error message respectively.  These\n   indications can also be generated based
    on local M2UA events.\n   An M-ASP_STATUS request primitive supports a Layer Management
    query\n   of the status of a particular local or remote ASP.  The M2UA layer\n
    \  responds with the status in an M-ASP_STATUS confirm primitive.  No\n   M2UA
    peer protocol is invoked.\n   An M-AS_STATUS request supports a Layer Management
    query of the\n   status of a particular AS.  The M2UA responds with an M-AS_STATUS\n
    \  confirm primitive.  No M2UA peer protocol is invoked.\n   M-ASP_UP request,
    M-ASP_DOWN request, M-ASP_ACTIVE request and M-\n   ASP_INACTIVE request primitives
    allow Layer Management at an ASP to\n   initiate state changes.  Upon successful
    completion, a corresponding\n   confirm primitive is provided by the M2UA layer
    to Layer Management.\n   If an invocation is unsuccessful, an Error indication
    primitive is\n   provided in the primitive.  These requests result in outgoing
    ASP Up,\n   ASP Down, ASP Active and ASP Inactive messages to the remote M2UA\n
    \  peer at an SGP.\n"
  title: 4.2 Receipt of Primitives from the Layer Management
- contents:
  - "4.2.1  Receipt of M2UA Peer Management Messages\n   Upon successful state changes
    resulting from reception of ASP Up, ASP\n   Down, ASP Active and ASP Inactive
    messages from a peer M2UA, the M2UA\n   layer SHOULD invoke corresponding M-ASP_UP,
    M-ASP_DOWN, M-ASP_ACTIVE\n   and M-ASP_INACTIVE, M-AS_ACTIVE, M-AS_INACTIVE, and
    M-AS_DOWN\n   indication primitives to the local Layer Management.\n   M-NOTIFY
    indication and M-ERROR indication primitives indicate to\n   Layer Management
    the notification or error information contained in a\n   received M2UA Notify
    or Error message.  These indications can also be\n   generated based on local
    M2UA events.\n   All MGMT messages, except BEAT and BEAT Ack, SHOULD be sent with\n
    \  sequenced delivery to ensure ordering.  All MGMT messages, with the\n   exception
    of ASPTM, BEAT and BEAT Ack messages, SHOULD be sent on\n   SCTP stream '0'.  All
    ASPTM messages SHOULD be sent on the stream\n   which normally carries the data
    traffic to which the message applies.\n   BEAT and BEAT Ack messages MAY be sent
    using out-of-order delivery,\n   and MAY be sent on any stream.\n"
  title: 4.2.1  Receipt of M2UA Peer Management Messages
- contents:
  - "4.3  AS and ASP State Maintenance\n   The M2UA layer on the SGP maintains the
    state of each remote ASP, in\n   each Application Server that the ASP is configured
    to receive\n   traffic, as input to the M2UA message distribution function.\n"
  title: 4.3  AS and ASP State Maintenance
- contents:
  - "4.3.1  ASP States\n   The state of each remote ASP, in each AS that it is configured
    to\n   operate, is maintained in the M2UA layer in the SGP.  The state of a\n
    \  particular ASP in a particular AS changes due to events.  The events\n   include:\n
    \  *  Reception of messages from the peer M2UA layer at the ASP;\n   *  Reception
    of some messages from the peer M2UA layer at other ASPs\n      in the AS (e.g.,
    ASP Active message indicating \"Override\");\n   *  Reception of indications from
    the SCTP layer; or\n   *  Local Management intervention.\n   The ASP state transition
    diagram is shown in Figure 5.  The possible\n   states of an ASP are:\n   ASP-DOWN:
    The remote M2UA peer at the ASP is unavailable and/or the\n   related SCTP association
    is down.  Initially all ASPs will be in this\n   state.  An ASP in this state
    SHOULD NOT be sent any M2UA messages,\n   with the exception of Heartbeat, ASP
    Down Ack and Error messages.\n   ASP-INACTIVE: The remote M2UA peer at the ASP
    is available (and the\n   related SCTP association is up) but application traffic
    is stopped.\n   In this state the ASP MAY be sent any non-MAUP M2UA messages.\n
    \  ASP-ACTIVE: The remote M2UA peer at the ASP is available and\n   application
    traffic is active (for a particular Interface Identifier\n   or set of Interface
    Identifiers).\n                    Figure 5: ASP State Transition Diagram\n                                      +--------------+\n
    \                                     |  ASP-ACTIVE  |\n               +----------------------|
    \             |\n               |      Other   +-------|              |\n               |
    \  ASP in AS  |       +--------------+\n               |   Overrides  |           ^
    \    |\n               |              |    ASP    |     | ASP\n               |
    \             |    Active |     | Inactive\n               |              |           |
    \    v\n               |              |       +--------------+\n               |
    \             |       |              |\n               |              +------>|
    ASP-INACTIVE |\n               |                      +--------------+\n               |
    \                         ^     |\n     ASP Down/ |                     ASP  |
    \    | ASP Down /\n     SCTP CDI/ |                     Up   |     | SCTP CDI/\n
    \    SCTP RI   |                          |     v SCTP RI\n               |                      +--------------+\n
    \              |                      |              |\n               +--------------------->|
    \  ASP-DOWN   |\n                                      |              |\n                                      +--------------+\n
    \  SCTP CDI: The SCTP CDI denotes the local SCTP layer's Communication\n   Down
    Indication to the Upper Layer Protocol (M2UA) on an SGP.  The\n   local SCTP layer
    will send this indication when it detects the loss\n   of connectivity to the
    ASP's peer SCTP layer.  SCTP CDI is understood\n   as either a SHUTDOWN_COMPLETE
    notification or COMMUNICATION_LOST\n   notification from the SCTP layer.\n   SCTP
    RI: The local SCTP layer's Restart indication to the upper layer\n   protocol
    (M2UA) on an SG.  The local SCTP will send this indication\n   when it detects
    a restart from the ASP's peer SCTP layer.\n"
  title: 4.3.1  ASP States
- contents:
  - "4.3.2  AS States\n   The state of the AS is maintained in the M2UA layer on the
    SGP.  The\n   state of an AS changes due to events.  These events include:\n      *
    \ ASP state transitions\n      *  Recovery timer triggers\n   The possible states
    of an AS are:\n   AS-DOWN: The Application Server is unavailable.  This state
    implies\n   that all related ASPs are in the ASP-DOWN state for this AS.\n   Initially
    the AS will be in this state.  An Application Server MUST\n   be in the AS-DOWN
    state before it can be removed from a\n   configuration.\n   AS-INACTIVE: The
    Application Server is available but no application\n   traffic is active (i.e.,
    one or more related ASPs are in the ASP-\n   INACTIVE state, but none in the ASP-ACTIVE
    state).  The recovery\n   timer T(r) is not running or has expired.\n   AS-ACTIVE:
    The Application Server is available and application\n   traffic is active.  This
    state implies that at least one ASP is in\n   the ASP-ACTIVE state.\n   AS-PENDING:
    An active ASP has transitioned to ASP-INACTIVE or ASP-\n   DOWN and it was the
    last remaining active ASP in the AS.  A recovery\n   timer T(r) SHOULD be started
    and all incoming signalling messages\n   SHOULD be queued by the SGP.  If an ASP
    becomes ASP-ACTIVE before\n   T(r) expires, the AS is moved to the AS-ACTIVE state
    and all the\n   queued messages will be sent to the ASP.\n   If T(r) expires before
    an ASP becomes ASP-ACTIVE, the SGP stops\n   queuing messages and discards all
    previously queued messages.  The AS\n   will move to the AS-INACTIVE state if
    at least one ASP is in the\n   ASP-INACTIVE state, otherwise it will move to the
    AS-DOWN state.\n   Figure 6 shows an example AS state machine for the case where
    the\n   AS/ASP data is pre-configured.  For other cases where the AS/ASP\n   configuration
    data is created dynamically, there would be differences\n   in the state machine,
    especially at the creation of the AS.\n   For example, where the AS/ASP configuration
    data is not created until\n   Registration of the first ASP, the AS-INACTIVE state
    is entered\n   directly upon the first successful REG REQ from an ASP.  Another\n
    \  example is where the AS/ASP configuration data is not created until\n   the
    first ASP successfully enters the ASP-ACTIVE state.  In this case\n   the AS-ACTIVE
    state is entered directly.\n                    Figure 6: AS State Transition
    Diagram\n        +----------+   one ASP trans to ACTIVE   +-------------+\n        |
    \   AS-   |---------------------------->|     AS-     |\n        | INACTIVE |
    \                            |   ACTIVE    |\n        |          |<---                         |
    \            |\n        +----------+    \\                        +-------------+\n
    \          ^   |         \\ Tr Expiry,                ^    |\n           |   |
    \         \\ at least one             |    |\n           |   |           \\ ASP
    in ASP-INACTIVE     |    |\n           |   |            \\                        |
    \   |\n           |   |             \\                       |    |\n           |
    \  |              \\                      |    |\n   one ASP |   | all ASP       \\
    \           one ASP  |    | Last ACTIVE\n   trans   |   | trans to       \\           trans
    to |    | ASP trans to\n   to      |   | ASP-DOWN        -------\\   ASP-     |
    \   | ASP-INACTIVE\n   ASP-    |   |                         \\  ACTIVE   |    |
    or ASP-DOWN\n   INACTIVE|   |                          \\          |    | (start
    Tr)\n           |   |                           \\         |    |\n           |
    \  |                            \\        |    |\n           |   v                             \\
    \      |    v\n        +----------+                          \\  +-------------+\n
    \       |          |                           --|             |\n        | AS-DOWN
    \ |                             | AS-PENDING  |\n        |          |                             |
    \ (queuing)  |\n        |          |<----------------------------|             |\n
    \       +----------+    Tr Expiry and no ASP     +-------------+\n                        in
    ASP-INACTIVE state\n      Tr = Recovery Timer\n"
  title: 4.3.2  AS States
- contents:
  - "4.3.3 M2UA Management Procedures for Primitives\n   Before the establishment
    of an SCTP association the ASP state at both\n   the SGP and ASP is assumed to
    be in the state ASP-DOWN.\n   Once the SCTP association is established (see Section
    4.2.1) and\n   assuming that the local M2UA-User is ready, the local M2UA ASP\n
    \  Maintenance (ASPM) function will initiate the relevant procedures,\n   using
    the ASP Up/ASP Down/ASP Active/ASP Inactive messages to convey\n   the ASP state
    to the SGP (see Section 4.3.4).\n   If the M2UA layer subsequently receives an
    SCTP-COMMUNICATION_DOWN or\n   SCTP-RESTART indication primitive from the underlying
    SCTP layer, it\n   will inform the Layer Management by invoking the M-SCTP_STATUS\n
    \  indication primitive.  The state of the ASP will be moved to ASP-\n   DOWN.\n
    \  In the case of SCTP-COMMUNICATION_DOWN, the SCTP client MAY try to\n   re-establish
    the SCTP association.  This MAY be done by the M2UA\n   layer automatically, or
    Layer Management MAY re-establish using the\n   M-SCTP_ESTABLISH request primitive.\n
    \  In the case of an SCTP-RESTART indication at an ASP, the ASP is now\n   considered
    by its M2UA peer to be in the ASP-DOWN state.  The ASP, if\n   it is to recover,
    must begin any recovery with the ASP-Up procedure.\n"
  title: 4.3.3 M2UA Management Procedures for Primitives
- contents:
  - '4.3.4 ASPM Procedures for Peer-to-Peer Messages

    '
  title: 4.3.4 ASPM Procedures for Peer-to-Peer Messages
- contents:
  - "4.3.4.1 ASP Up Procedures\n   After an ASP has successfully established an SCTP
    association to an\n   SGP, the SGP waits for the ASP to send an ASP Up message,
    indicating\n   that the ASP M2UA peer is available.  The ASP is always the initiator\n
    \  of the ASP Up message.  This action MAY be initiated at the ASP by an\n   M-ASP_UP
    request primitive from Layer Management or MAY be initiated\n   automatically
    by an M2UA management function.\n   When an ASP Up message is received at an SGP
    and internally the\n   remote ASP is in the ASP-DOWN state and not considered
    locked-out for\n   local management reasons, the SGP marks the remote ASP in the
    state\n   ASP-INACTIVE and informs Layer Management with an M-ASP_Up indication\n
    \  primitive.  If the SGP is aware, via current configuration data,\n   which
    Application Servers the ASP is configured to operate in, the\n   SGP updates the
    ASP state to ASP-INACTIVE in each AS that it is a\n   member.\n   Alternatively,
    the SGP may move the ASP into a pool of Inactive ASPs\n   available for future
    configuration within Application Server(s),\n   determined in a subsequent Registration
    Request or ASP Active\n   procedure.  If the ASP Up message contains an ASP Identifier,
    the SGP\n   should save the ASP Identifier for that ASP.  The SGP MUST send an\n
    \  ASP Up Ack message in response to a received ASP Up message even if\n   the
    ASP is already marked as ASP-INACTIVE at the SGP.\n   If for any local reason
    (e.g., management lock-out) the SGP cannot\n   respond with an ASP Up Ack message,
    the SGP responds to an ASP Up\n   message with an Error message with Reason \"Refused
    - Management\n   Blocking\".\n   At the ASP, the ASP Up Ack message received is
    not acknowledged.\n   Layer Management is informed with an M-ASP_UP confirm primitive.\n
    \  When the ASP sends an ASP Up message it starts timer T(ack).  If the\n   ASP
    does not receive a response to an ASP Up message within T(ack),\n   the ASP MAY
    restart T(ack) and resend ASP Up messages until it\n   receives an ASP Up Ack
    message.  T(ack) is provisionable, with a\n   default of 2 seconds.  Alternatively,
    retransmission of ASP Up\n   messages MAY be put under control of Layer Management.
    \ In this\n   method, expiry of T(ack) results in an M-ASP_UP confirm primitive\n
    \  carrying a negative indication.\n   The ASP MUST wait for the ASP Up Ack message
    before sending any other\n   M2UA messages (e.g., ASP Active or REG REQ).  If
    the SGP receives any\n   other M2UA messages before an ASP Up message is received
    (other than\n   ASP Down - see Section 4.3.4.2), the SGP MAY discard them.\n   If
    an ASP Up message is received and internally the remote ASP is in\n   the ASP-ACTIVE
    state, an ASP Up Ack message is returned, as well as\n   an Error message (\"Unexpected
    Message), and the remote ASP state is\n   changed to ASP-INACTIVE in all relevant
    Application Servers.\n   If an ASP Up message is received and internally the remote
    ASP is\n   already in the ASP-INACTIVE state, an ASP Up Ack message is returned\n
    \  and no further action is taken.\n"
  title: 4.3.4.1 ASP Up Procedures
- contents:
  - "4.3.4.1.1  M2UA Version Control\n   If an ASP Up message with an unsupported
    version is received, the\n   receiving end responds with an Error message, indicating
    the version\n   the receiving node supports and notifies Layer Management.\n   This
    is useful when protocol version upgrades are being performed in\n   a network.
    \ A node upgraded to a newer version SHOULD support the\n   older versions used
    on other nodes it is communicating with.  Because\n   ASPs initiate the ASP Up
    procedure it is assumed that the Error\n   message would normally come from the
    SGP.\n"
  title: 4.3.4.1.1  M2UA Version Control
- contents:
  - "4.3.4.2 ASP Down Procedures\n   The ASP will send an ASP Down message to an SGP
    when the ASP wishes\n   to be removed from service in all Application Servers
    that it is a\n   member and no longer receive any MAUP or ASPTM messages.  This
    action\n   MAY be initiated at the ASP by an M-ASP_DOWN request primitive from\n
    \  Layer Management or MAY be initiated automatically by an M2UA\n   management
    function.\n   Whether the ASP is permanently removed from any AS is a function
    of\n   configuration management.  In the case where the ASP previously used\n
    \  the Registration procedures (see Section 4.4) to register within\n   Application
    Servers but has not unregistered from all of them prior\n   to sending the ASP
    Down message, the SGP MUST consider the ASP as\n   unregistered in all Application
    Servers that it is still a member.\n   The SGP marks the ASP as ASP-DOWN, informs
    Layer Management with an\n   M-ASP_Down indication primitive, and returns an ASP
    Down Ack message\n   to the ASP.\n   The SGP MUST send an ASP Down Ack message
    in response to a received\n   ASP Down message from the ASP even if the ASP is
    already marked as\n   ASP-DOWN at the SGP.\n   At the ASP, the ASP Down Ack message
    received is not acknowledged.\n   Layer Management is informed with an M-ASP_DOWN
    confirm primitive.\n   If the ASP receives an ASP Down Ack without having sent
    an ASP Down\n   message, the ASP SHOULD now consider itself as in the ASP-DOWN
    state.\n   If the ASP was previously in the ASP-ACTIVE or ASP_INACTIVE state,\n
    \  the ASP SHOULD then initiate procedures to return itself to its\n   previous
    state.\n   When the ASP sends an ASP Down message it starts timer T(ack).  If\n
    \  the ASP does not receive a response to an ASP Down message within\n   T(ack),
    the ASP MAY restart T(ack) and resend ASP Down messages until\n   it receives
    an ASP Down Ack message.  T(ack) is provisionable, with a\n   default of 2 seconds.
    \ Alternatively, retransmission of ASP Down\n   messages MAY be put under control
    of Layer Management.  In this\n   method, expiry of T(ack) results in an M-ASP_DOWN
    confirm primitive\n   carrying a negative indication.\n"
  title: 4.3.4.2 ASP Down Procedures
- contents:
  - "4.3.4.3 ASP Active Procedures\n   Anytime after the ASP has received an ASP Up
    Ack message from the\n   SGP, the ASP MAY send an ASP Active message to the SGP
    indicating\n   that the ASP is ready to start processing traffic.  This action
    MAY\n   be initiated at the ASP by an M-ASP_ACTIVE request primitive from\n   Layer
    Management or MAY be initiated automatically by a M2UA\n   management function.
    \ In the case where an ASP wishes to process the\n   traffic for more than one
    Application Server across a common SCTP\n   association, the ASP Active message(s)
    SHOULD contain a list of one\n   or more Interface Identifiers to indicate for
    which Application\n   Servers the ASP Active message applies.  It is not necessary
    for the\n   ASP to include any Interface Identifiers of interest in a single ASP\n
    \  Active message, thus requesting to become active in all Interface\n   Identifiers
    at the same time.  Multiple ASP Active messages MAY be\n   used to activate within
    the Application Servers independently, or in\n   sets.  In the case where an ASP
    Active message does not contain a\n   Interface Identifier parameter, the receiver
    must know, via\n   configuration data, of which Application Server(s) the ASP
    is a\n   member.\n   For the Application Servers that the ASP can successfully
    activate,\n   the SGP responds with one or more ASP Active Ack messages, including\n
    \  the associated Interface Identifier(s) and reflecting any Traffic\n   Mode
    Type value present in the related ASP Active message.  The\n   Interface Identifier
    parameter MUST be included in the ASP Active Ack\n   message(s) if the received
    ASP Active message contained any Interface\n   Identifiers.  Depending on any
    Traffic Mode Type request in the ASP\n   Active message or local configuration
    data if there is no request,\n   the SGP moves the ASP to the correct ASP traffic
    state within the\n   associated Application Server(s).  Layer Management is informed
    with\n   an M-ASP_Active indication.  If the SGP receives any Data messages\n
    \  before an ASP Active message is received, the SGP MAY discard them.\n   By
    sending an ASP Active Ack message, the SGP is now ready to receive\n   and send
    traffic for the related Interface Identifier(s).  The ASP\n   SHOULD NOT send
    MAUP messages for the related Interface Identifier(s)\n   before receiving an
    ASP Active Ack message, or it will risk message\n   loss.\n   Multiple ASP Active
    Ack messages MAY be used in response to an ASP\n   Active message containing multiple
    Interface Identifiers, allowing\n   the SGP to independently acknowledge the ASP
    Active message for\n   different (sets of) Interface Identifiers.  The SGP MUST
    send an\n   Error message (\"Invalid Interface Identifier\") for each Interface\n
    \  Identifier value that cannot be successfully activated.\n   In the case where
    an \"out-of-the-blue\" ASP Active message is received\n   (i.e., the ASP has not
    registered with the SG or the SG has no static\n   configuration data for the
    ASP), the message MAY be silently\n   discarded.\n   The SGP MUST send an ASP
    Active Ack message in response to a received\n   ASP Active message from the ASP,
    if the ASP is already marked in the\n   ASP-ACTIVE state at the SGP.\n   At the
    ASP, the ASP Active Ack message received is not acknowledged.\n   Layer Management
    is informed with an M-ASP_ACTIVE confirm primitive.\n   It is possible for the
    ASP to receive Data message(s) before the ASP\n   Active Ack message as the ASP
    Active Ack and Data messages from an SG\n   may be sent on different SCTP streams.
    \ Message loss is possible as\n   the ASP does not consider itself in the ASP-ACTIVE
    state until\n   reception of the ASP Active Ack message.\n   When the ASP sends
    an ASP Active message it starts timer T(ack).  If\n   the ASP does not receive
    a response to an ASP Active message within\n   T(ack), the ASP MAY restart T(ack)
    and resend ASP Active message(s)\n   until it receives an ASP Active Ack message.
    \ T(ack) is\n   provisionable, with a default of 2 seconds.  Alternatively,\n
    \  retransmission of ASP Active messages MAY be put under the control of\n   Layer
    Management.  In this method, expiry of T(ack) results in an M-\n   ASP_ACTIVE
    confirm primitive carrying a negative indication.\n   There are three modes of
    Application Server traffic handling in the\n   SGP M2UA layer: Override, Load
    share and Broadcast.  When included,\n   the Traffic Mode Type parameter in the
    ASP Active message indicates\n   the traffic handling mode to be used in a particular
    Application\n   Server.  If the SGP determines that the mode indicated in an ASP\n
    \  Active message is unsupported or incompatible with the mode currently\n   configured
    for the AS, the SGP responds with an Error message\n   (\"Unsupported / Invalid
    Traffic Handling Mode\").  If the traffic\n   handling mode of the Application
    Server is not already known via\n   configuration data, the traffic handling mode
    indicated in the first\n   ASP Active message causing the transition of the Application
    Server\n   state to AS-ACTIVE MAY be used to set the mode.\n   In the case of
    an Override mode AS, reception of an ASP Active\n   message at an SGP causes the
    (re)direction of all traffic for the AS\n   to the ASP that sent the ASP Active
    message.  Any previously active\n   ASP in the AS is now considered to be in the
    state ASP-INACTIVE and\n   SHOULD no longer receive traffic from the SGP within
    the AS.  The SGP\n   then MUST send a Notify message (\"Alternate ASP Active\")
    to the\n   previously active ASP in the AS, and SHOULD stop traffic to/from that\n
    \  ASP.  The ASP receiving this Notify MUST consider itself now in the\n   ASP-INACTIVE
    state, if it is not already aware of this via inter-ASP\n   communication with
    the Overriding ASP.\n   In the case of a Load-share mode AS, reception of an ASP
    Active\n   message at an SGP causes the direction of traffic to the ASP sending\n
    \  the ASP Active message, in addition to all the other ASPs that are\n   currently
    active in the AS.  The algorithm at the SGP for load-\n   sharing traffic within
    an AS to all the active ASPs is implementation\n   dependent.  The algorithm could,
    for example be round-robin or based\n   on information in the Data message (e.g.,
    such as the SLS in the\n   Routing Label).\n   An SGP, upon reception of an ASP
    Active message for the first ASP in\n   a Load share AS, MAY choose not to direct
    traffic to a newly active\n   ASP until it determines that there are sufficient
    resources to handle\n   the expected load (e.g., until there are \"n\" ASPs in
    state ASP-ACTIVE\n   in the AS).\n   All ASPs within a load-sharing mode AS must
    be able to process any\n   Data message received for the AS, to accommodate any
    potential fail-\n   over or balancing of the offered load.\n   In the case of
    a Broadcast mode AS, reception of an ASP Active\n   message at an SGP causes the
    direction of traffic to the ASP sending\n   the ASP Active message, in addition
    to all the other ASPs that are\n   currently active in the AS.  The algorithm
    at the SGP for\n   broadcasting traffic within an AS to all the active ASPs is
    a simple\n   broadcast algorithm, where every message is sent to each of the\n
    \  active ASPs.\n   An SGP, upon reception of an ASP Active message for the first
    ASP in\n   a Broadcast AS, MAY choose not to direct traffic to a newly active\n
    \  ASP until it determines that there are sufficient resources to handle\n   the
    expected load (e.g., until there are \"n\" ASPs in state ASP-ACTIVE\n   in the
    AS).\n   Whenever an ASP in a Broadcast mode AS becomes ASP-ACTIVE, the SGP\n
    \  MUST tag the first DATA message broadcast in each SCTP stream with a\n   unique
    Correlation Id parameter.  The purpose of this Correlation Id\n   is to permit
    the newly active ASP to synchronize its processing of\n   traffic in each ordered
    stream with the other ASPs in the broadcast\n   group.\n"
  title: 4.3.4.3 ASP Active Procedures
- contents:
  - "4.3.4.4 ASP Inactive Procedures\n   When an ASP wishes to withdraw from receiving
    traffic within an AS,\n   the ASP sends an ASP Inactive message to the SGP.  This
    action MAY be\n   initiated at the ASP by an M-ASP_INACTIVE request primitive
    from\n   Layer Management or MAY be initiated automatically by an M2UA\n   management
    function.  In the case where an ASP is processing the\n   traffic for more than
    one Application Server across a common SCTP\n   association, the ASP Inactive
    message contains one or more Interface\n   Identifiers to indicate for which Application
    Servers the ASP\n   Inactive message applies.  In the case where an ASP Inactive
    message\n   does not contain a Interface Identifier parameter, the receiver must\n
    \  know, via configuration data, of which Application Servers the ASP is\n   a
    member and move the ASP to the ASP-INACTIVE state in all\n   Application Servers.
    \ In the case of an Override mode AS, where\n   another ASP has already taken
    over the traffic within the AS with an\n   ASP Active (\"Override\") message,
    the ASP that sends the ASP Inactive\n   message is already considered by the SGP
    to be in the state ASP-\n   INACTIVE.  An ASP Inactive Ack message is sent to
    the ASP, after\n   ensuring that all traffic is stopped to the ASP.\n   In the
    case of a Load-share mode AS, the SGP moves the ASP to the\n   ASP-INACTIVE state
    and the AS traffic is re-allocated across the\n   remaining ASPs in the state
    ASP-ACTIVE, as per the load-sharing\n   algorithm currently used within the AS.
    \ A Notify message\n   (\"Insufficient ASP resources active in AS\") MAY be sent
    to all\n   inactive ASPs, if required.  An ASP Inactive Ack message is sent to\n
    \  the ASP after all traffic is halted and Layer Management is informed\n   with
    an M-ASP_INACTIVE indication primitive.\n   In the case of a Broadcast mode AS,
    the SGP moves the ASP to the\n   ASP-INACTIVE state and the AS traffic is broadcast
    only to the\n   remaining ASPs in the state ASP-ACTIVE.  A Notify message\n   (\"Insufficient
    ASP resources active in AS\") MAY be sent to all\n   inactive ASPs, if required.
    \ An ASP Inactive Ack message is sent to\n   the ASP after all traffic is halted
    and Layer Management is informed\n   with an M-ASP_INACTIVE indication primitive.\n
    \  Multiple ASP Inactive Ack messages MAY be used in response to an ASP\n   Inactive
    message containing multiple Interface Identifiers, allowing\n   the SGP to independently
    acknowledge for different (sets of)\n   Interface Identifiers.  The SGP sends
    an Error message (\"Invalid\n   Interface Identifier\") for each invalid or not
    configured Interface\n   Identifier value in a received ASP Inactive message.\n
    \  The SGP MUST send an ASP Inactive Ack message in response to a\n   received
    ASP Inactive message from the ASP and the ASP is already\n   marked as ASP-INACTIVE
    at the SGP.\n   At the ASP, the ASP Inactive Ack message received is not\n   acknowledged.
    \ Layer Management is informed with an M-ASP_INACTIVE\n   confirm primitive.  If
    the ASP receives an ASP Inactive Ack without\n   having sent an ASP Inactive message,
    the ASP SHOULD now consider\n   itself as in the ASP-INACTIVE state.  If the ASP
    was previously in\n   the ASP-ACTIVE state, the ASP SHOULD then initiate procedures
    to\n   return itself to its previous state.\n   When the ASP sends an ASP Inactive
    message it starts timer\n    T(ack).  If the ASP does not receive a response to
    an ASP Inactive\n   message within T(ack), the ASP MAY restart T(ack) and resend
    ASP\n   Inactive messages until it receives an ASP Inactive Ack message.\n   T(ack)
    is provisionable, with a default of 2 seconds.  Alternatively,\n   retransmission
    of ASP Inactive messages MAY be put under the control\n   of Layer Management.
    \ In this method, expiry of T(ack) results in a\n   M-ASP_Inactive confirm primitive
    carrying a negative indication.\n   If no other ASPs in the Application Server
    are in the state ASP-\n   ACTIVE, the SGP MUST send a Notify message (\"AS-Pending\")
    to all of\n   the ASPs in the AS which are in the state ASP-INACTIVE.  The SGP\n
    \  SHOULD start buffering the incoming messages for T(r)seconds, after\n   which
    messages MAY be discarded.  T(r) is configurable by the network\n   operator.
    \ If the SGP receives an ASP Active message from an ASP in\n   the AS before expiry
    of T(r), the buffered traffic is directed to\n   that ASP and the timer is canceled.
    \ If T(r) expires, the AS is moved\n   to the AS-INACTIVE state.\n"
  title: 4.3.4.4 ASP Inactive Procedures
- contents:
  - "4.3.4.5 Notify Procedures\n   A Notify message reflecting a change in the AS
    state MUST be sent to\n   all ASPs in the AS, except those in the ASP-DOWN state,
    with\n   appropriate Status Information and any ASP Identifier of the failed\n
    \  ASP.  At the ASP, Layer Management is informed with an M-NOTIFY\n   indication
    primitive.  The Notify message MUST be sent whether the AS\n   state change was
    a result of an ASP failure or reception of an ASP\n   State Management (ASPSM)
    / ASP Traffic Management (ASPTM) message.\n   In the second case, the Notify message
    MUST be sent after any related\n   acknowledgment messages (e.g., ASP Up Ack,
    ASP Down Ack, ASP Active\n   Ack, or ASP Inactive Ack).\n   In the case where
    a Notify (\"AS-PENDING\") message is sent by an SGP\n   that now has no ASPs active
    to service the traffic, or where a Notify\n   (\"Insufficient ASP resources active
    in AS\") message MUST be sent in\n   the Load share or Broadcast mode, the Notify
    message does not\n   explicitly compel the ASP(s) receiving the message to become
    active.\n   The ASPs remain in control of what (and when) traffic action is\n
    \  taken.\n   In the case where a Notify message does not contain a Interface\n
    \  Identifier parameter, the receiver must know, via configuration data,\n   of
    which Application Servers the ASP is a member and take the\n   appropriate action
    in each AS.\n"
  title: 4.3.4.5 Notify Procedures
- contents:
  - "4.3.4.6 Heartbeat Procedures\n   The optional Heartbeat procedures MAY be used
    when operating over\n   transport layers that do not have their own heartbeat
    mechanism for\n   detecting loss of the transport association (i.e., other than
    SCTP).\n   Either M2UA peer may optionally send Heartbeat messages periodically,\n
    \  subject to a provisionable timer T(beat).  Upon receiving a Heartbeat\n   message,
    the M2UA peer MUST respond with a Heartbeat Ack message.\n   If no Heartbeat Ack
    message (or any other M2UA message) is received\n   from the M2UA peer within
    2*T(beat), the remote M2UA peer is\n   considered unavailable.  Transmission of
    Heartbeat messages is\n   stopped and the signalling process SHOULD attempt to
    re-establish\n   communication if it is configured as the client for the disconnected\n
    \  M2UA peer.\n   The Heartbeat message may optionally contain an opaque Heartbeat
    Data\n   parameter that MUST be echoed back unchanged in the related Heartbeat\n
    \  Ack message.  The sender, upon examining the contents of the returned\n   Heartbeat
    Ack message, MAY choose to consider the remote M2UA peer as\n   unavailable.  The
    contents/format of the Heartbeat Data parameter is\n   implementation-dependent
    and only of local interest to the original\n   sender.  The contents may be used,
    for example, to support a\n   Heartbeat sequence algorithm (to detect missing
    Heartbeats), and/or a\n   time stamp mechanism (to evaluate delays).\n   Note:
    Heartbeat related events are not shown in Figure 5 \"ASP state\n         transition
    diagram\".\n"
  title: 4.3.4.6 Heartbeat Procedures
- contents:
  - "4.4  Link Key Management Procedures\n   The Interface Identifier Management procedures
    are optional.  They\n   can be used to support automatic allocation of Signalling
    Terminals\n   or Signalling Data Links [2][3].\n"
  title: 4.4  Link Key Management Procedures
- contents:
  - "4.4.1 Registration\n   An ASP MAY dynamically register with an SGP as an ASP
    within an\n   Application Server for individual Interface Identifier(s) using
    the\n   REG REQ message.  A Link Key parameter in the REG REQ specifies the\n
    \  parameters associated with the Link Key.\n   The SGP examines the contents
    of the received Link Key parameters\n   (SDLI and SDTI) and compares them with
    the currently provisioned\n   Interface Identifiers.  If the received Link Key
    matches an existing\n   SGP Link Key entry, and the ASP is not currently included
    in the list\n   of ASPs for the related Application Server, the SGP MAY authorize
    the\n   ASP to be added to the AS.  Or, if the Link Key does not currently\n   exist
    and the received Link Key data is valid and unique, an SGP\n   supporting dynamic
    configuration MAY authorize the creation of a new\n   Interface Identifier and
    related Application Server and add the ASP\n   to the new AS.  In either case,
    the SGP returns a Registration\n   Response message to the ASP, containing the
    same Local-LK-Identifier\n   as provided in the initial request, a Registration
    Result\n   \"Successfully Registered\" and the Interface Identifier.  A unique\n
    \  method of Interface Identifier valid assignment at the SG/SGP is\n   implementation
    dependent but MUST be guaranteed to be unique for each\n   Application server
    or Link Key served by SGP.\n   If the SGP determines that the received Link Key
    data is invalid, or\n   contains invalid parameter values, the SGP returns a Registration\n
    \  Response message to the ASP, containing a Registration Result \"Error\n   -
    Invalid Link Key\", \"Error - Invalid SDTI\", \"Error - Invalid SDLI\"\n   as
    appropriate.\n   If the SGP determines that the Link Key parameter overlaps with
    an\n   existing Link Key entry, the SGP returns a Registration Response\n   message
    to the ASP, with a Registration Status of \"Error -\n   Overlapping (Non-Unique)
    Link Key\".  An incoming signalling message\n   received at an SGP cannot match
    against more than one Link Key.\n   If the SGP does not authorize the registration
    request, the SGP\n   returns a REG RSP message to the ASP containing the Registration\n
    \  Result \"Error - Permission Denied\".\n   If an SGP determines that a received
    Link Key does not currently\n   exist and the SGP does not support dynamic configuration,
    the SGP\n   returns a Registration Response message to the ASP, containing a\n
    \  Registration Result \"Error - Link Key not Provisioned\".\n   If an SGP determines
    that a received Link Key does not currently\n   exist and the SGP supports dynamic
    reconfiguration but does not have\n   the capacity to add new Link Key and Application
    Server entries, the\n   SGP returns a Registration Response message to the ASP,
    containing a\n   Registration Result \"Error - Insufficient Resources\".\n   An
    ASP MAY register multiple Link Keys at once by including a number\n   of Link
    Key parameters in a single REG REQ message.  The SGP MAY\n   respond to each registration
    request in a single REG RSP message,\n   indicating the success or failure result
    for each Link Key in a\n   separate Registration Result parameter.  Alternatively,
    the SGP MAY\n   respond with multiple REG RSP messages, each with one or more\n
    \  Registration Result parameters.  The ASP uses the Local-LK-Identifier\n   parameter
    to correlate the requests with the responses.\n"
  title: 4.4.1 Registration
- contents:
  - "4.4.2 Deregistration\n   An ASP MAY dynamically de-register with an SGP as an
    ASP within an\n   Application Server for individual Interface Identifier(s) using
    the\n   DEREG REQ message.  A Interface Identifier parameter in the DEREG REQ\n
    \  specifies which Interface Identifier to de-register.\n   The SGP examines the
    contents of the received Interface Identifier\n   parameter and validates that
    the ASP is currently registered in the\n   Application Server(s) related to the
    included Interface\n   Identifier(s).  If validated, the ASP is de-registered
    as an ASP in\n   the related Application Server.\n   The deregistration procedure
    does not necessarily imply the deletion\n   of Link Key and Application Server
    configuration data at the SGP.\n   Other ASPs may continue to be associated with
    the Application Server,\n   in which case the Link Key data CANNOT be deleted.
    \ If a\n   Deregistration results in no more ASPs in an Application Server, an\n
    \  SGP MAY delete the Link Key data.\n   The SGP acknowledges the de-registration
    required by returning a\n   DEREG RSP to the requesting ASP.  The result of the
    de-registration\n   is found in the Deregistration Result parameter, indicating
    success\n   or failure with cause.\n   An ASP MAY de-register multiple Interface
    Identifiers at once by\n   including a number of Interface Identifiers in a single
    DEREG REQ\n   message.  The SGP MUST respond to each deregistration request in
    a\n   single DEREG RSP message, indicating the success or failure result\n   for
    each Interface Identifier in a separate Deregistration Result\n   parameter.\n"
  title: 4.4.2 Deregistration
- contents:
  - '5.0  Examples of MTP2 User Adaptation (M2UA) Procedures

    '
  title: 5.  Examples of MTP2 User Adaptation (M2UA) Procedures
- contents:
  - '5.1  Establishment of associations between SGP and MGC examples

    '
  title: 5.1  Establishment of associations between SGP and MGC examples
- contents:
  - "5.1.1 Single ASP in an Application Server (1+0 sparing)\n   This scenario shows
    the example M2UA message flows for the\n   establishment of traffic between an
    SGP and an ASP, where only one\n   ASP is configured within an AS (no backup).
    \ It is assumed that the\n   SCTP association is already set-up.\n                SGP
    \                      ASP1\n                 |\n                 |<---------ASP
    Up----------|\n                 |--------ASP Up Ack------->|\n                 |
    \                         |\n                 |<-------ASP Active--------|\n                 |------ASP
    Active Ack----->|\n                 |                          |\n                 |------NTFY(AS-ACTIVE)---->|\n"
  title: 5.1.1 Single ASP in an Application Server (1+0 sparing)
- contents:
  - "5.1.2 Single ASP in an Application Server (1+0 sparing) with Dynamic\n      Registration\n
    \  This scenario is the same as the one shown in Section 5.1.1 except\n   with
    a dynamic registration (automatic allocation) of an Interface\n   Identifier(s).\n
    \               SGP                       ASP1\n                 |\n                 |<---------ASP
    Up----------|\n                 |--------ASP Up Ack------->|\n                 |
    \                         |\n                 |<--------REG REQ----------|\n                 |------REG
    REQ RESP------->|\n                 |                          |\n                 |<-------ASP
    Active--------|\n                 |------ASP Active Ack----->|\n                 |
    \                         |\n                 |------NTFY(AS-ACTIVE)---->|\n"
  title: 5.1.2 Single ASP in an Application Server (1+0 sparing) with Dynamic
- contents:
  - "5.1.3 Two ASPs in Application Server (1+1 sparing)\n   This scenario shows the
    example M2UA message flows for the\n   establishment of traffic between an SGP
    and two ASPs in the same\n   Application Server, where ASP1 is configured to be
    active and ASP2 to\n   be standby in the event of communication failure or the
    withdrawal\n   from service of ASP1.  ASP2 MAY act as a hot, warm, or cold standby\n
    \  depending on the extent to which ASP1 and ASP2 share call/transaction\n   state
    or can communicate call state under failure/withdrawal events.\n          SGP
    \                      ASP1                       ASP2\n           |                         |
    \                         |\n           |<--------ASP Up----------|                          |\n
    \          |-------ASP Up Ack------->|                          |\n           |
    \                        |                          |\n           |<-----------------------------ASP
    Up----------------|\n           |----------------------------ASP Up Ack------------->|\n
    \          |                         |                          |\n           |
    \                        |                          |\n           |<-------ASP
    Active-------|                          |\n           |-----ASP Active Ack----->|
    \                         |\n           |                         |                          |\n
    \          |                         |                          |\n           |-----NTFY(AS-ACTIVE)---->|
    \                         |\n           |                         |                          |\n
    \          |------------------NTFY(AS-ACTIVE)------------------>|\n"
  title: 5.1.3 Two ASPs in Application Server (1+1 sparing)
- contents:
  - '5.2 ASP Traffic Fail-over Examples

    '
  title: 5.2 ASP Traffic Fail-over Examples
- contents:
  - "5.2.1 (1+1 Sparing, withdrawal of ASP, backup Override)\n   Following on from
    the example in Section 5.1.2, and ASP withdraws\n   from service:\n         SGP
    \                      ASP1                       ASP2\n           |                         |
    \                         |\n           |<-----ASP Inactive-------|                          |\n
    \          |----ASP Inactive Ack---->|                          |\n           |
    \                        |                          |\n           |----NTFY(AS-PENDING)---->|
    \                         |\n           |------------------NTFY(AS-PENDING)----------------->|\n
    \          |                         |                          |\n           |<------------------------------
    ASP Active----------|\n           |-----------------------------ASP Active Ack-------->|\n
    \          |                         |                          |\n           |-----NTFY(AS-ACTIVE)---->|
    \                         |\n           |------------------NTFY(AS-ACTIVE)------------------>|\n
    \          |                         |                          |\n   In this
    case, the SGP notifies ASP2 that the AS has moved to the AS-\n   PENDING state.
    \ ASP2 sends ASP Active to bring the AS back to the\n   AS-ACTIVE state.  If ASP2
    did not send the ASP Active message before\n   T(r) expired, the SGP would send
    a NOTIFY (AS-DOWN).\n   Note: If the SGP detects loss of the M2UA peer (through
    a detection\n         of SCTP failure), the initial SGP-ASP1 ASP Inactive message\n
    \        exchange would not occur.\n          SGP                       ASP1                       ASP2\n
    \          |                         |                          |\n     (detects
    SCTP failure)\n           |------------------NTFY(AS-PENDING)----------------->|\n
    \          |                         |                          |\n           |<------------------------------
    ASP Active----------|\n           |-----------------------------ASP Active Ack-------->|\n
    \          |                         |                          |\n           |------------------NTFY(AS-ACTIVE)------------------>|\n
    \          |                         |                          |\n"
  title: 5.2.1 (1+1 Sparing, withdrawal of ASP, backup Override)
- contents:
  - "5.2.2 (1+1 Sparing, backup Override)\n   Following on from the example in Section
    5.1.2, and ASP2 wishes to\n   override ASP1 and take over the traffic:\n          SGP
    \                      ASP1                       ASP2\n           |                         |
    \                         |\n           |<-------------------------------ASP Active----------|\n
    \          |-----------------------------ASP Active Ack-------->|\n           |----NTFY(Alt
    ASP-Act)--->|                          |\n           |                         |
    \                         |\n   In this case, the SGP notifies ASP1 that an alternative
    ASP has\n   overridden it.\n"
  title: 5.2.2 (1+1 Sparing, backup Override)
- contents:
  - "5.3  SGP to MGC, MTP Level 2 to MTP Level 3 Boundary Procedures\n   When the
    M2UA layer on the ASP has a MAUP message to send to the SGP,\n   it will do the
    following:\n      -  Determine the correct SGP\n      -  Find the SCTP association
    to the chosen SGP\n      -  Determine the correct stream in the SCTP association
    based on\n         the SS7 link\n      -  Fill in the MAUP message, fill in M2UA
    Message Header, fill in\n         Common Header\n      -  Send the MAUP message
    to the remote M2UA peer in the SGP, over\n         the SCTP association\n   When
    the M2UA layer on the SGP has a MAUP message to send to the ASP,\n   it will do
    the following:\n      -  Determine the AS for the Interface Identifier\n      -
    \ Determine the Active ASP (SCTP association) within the AS\n      -  Determine
    the correct stream in the SCTP association based on\n         the SS7 link\n      -
    \ Fill in the MAUP message, fill in M2UA Message Header, fill in\n         Common
    Header\n      -  Send the MAUP message to the remote M2UA peer in the ASP, over\n
    \        the SCTP association\n"
  title: 5.3  SGP to MGC, MTP Level 2 to MTP Level 3 Boundary Procedures
- contents:
  - "5.3.1  SS7 Link Alignment\n   The MGC can request that a SS7 link be brought
    into alignment using\n   the normal or emergency procedure [2][3].  An example
    of the message\n   flow to bring a SS7 link in-service using the normal alignment\n
    \  procedure is shown below.\n       MTP2            M2UA                  M2UA
    \              MTP3\n        SGP             SGP                   ASP                ASP\n
    \       <----Start Req---|<---Establish Req----|<----Start Req------\n        ---In
    Serv Ind-->|----Establish Cfm--->|----In Serv Ind---->\n   An example of the message
    flow to bring a SS7 link in-service using\n   the emergency alignment procedure.\n
    MTP2            M2UA                               M2UA           MTP3\n  SGP
    \            SGP                                ASP            ASP\n  <----Emer
    Req----|<--State Req (STATUS_EMER_SET)----|<----Emer Req---\n  -----Emer Cfm--->|---State
    Cfm (STATUS_EMER_SET)--->|----Emer Cfm---->\n  <---Start Req----|<-------Establish
    Req-------------|<---Start Req----\n  ---In Serv Ind-->|--------Establish Cfm------------>|---In
    Serv Ind-->\n"
  title: 5.3.1  SS7 Link Alignment
- contents:
  - "5.3.2  SS7 Link Release\n   The MGC can request that a SS7 link be taken out-of-service.
    \ It uses\n   the Release Request message as shown below.\n     MTP2               M2UA
    \                 M2UA                MTP3\n      SGP                SGP                   ASP
    \                ASP\n       <-----Stop Req-----|<---Release Req------|<-----Stop
    Req------\n       --Out of Serv Ind->|----Release Cfm----->|--Out of Serv Ind-->\n
    \  The SGP can autonomously indicate that a SS7 link has gone out-of-\n   service
    as shown below.\n       MTP2           M2UA                  M2UA              MTP3\n
    \       SGP            SGP                   ASP               ASP\n         --Out
    of Serv->|----Release Ind----->|--Out of Serv-->\n"
  title: 5.3.2  SS7 Link Release
- contents:
  - "5.3.3  Set and Clear Local Processor Outage\n   The MGC can set a Local Processor
    Outage condition.  It uses the\n   State Request message as shown below.\n  MTP2
    \           M2UA                               M2UA           MTP3\n   SGP             SGP
    \                               ASP            ASP\n   <----LPO Req----|<---State
    Req (STATUS_LPO_SET)----|<----LPO Req---\n   -----LPO Cfm--->|----State Cfm (STATUS_LPO_SET)--->|----LPO
    Cfm---->\n   The MGC can clear a Local Processor Outage condition.  It uses the\n
    \  State Request message as shown below.\n  MTP2            M2UA                               M2UA
    \         MTP3\n   SGP             SGP                                ASP           ASP\n
    \  <---LPO Req---|<---State Req (STATUS_LPO_CLEAR)----|<----LPO Req---\n   ----LPO
    Cfm-->|----State Cfm (STATUS_LPO_CLEAR)--->|----LPO Cfm---->\n"
  title: 5.3.3  Set and Clear Local Processor Outage
- contents:
  - "5.3.4  Notification of Remote Processor Outage\n   The SGP can indicate that
    Remote has entered or exited the Processor\n   Outage condition for a SS7 link.
    \ It uses the State Indication\n   message as shown below.\n MTP2           M2UA
    \                               M2UA           MTP3\n  SGP            SGP                                 ASP
    \           ASP\n  ----RPO Ind---->|----State Ind (EVENT_RPO_ENTER)-->|-----RPO
    Ind---->\n  -RPO Rcvr Ind-->|----State Ind (EVENT_RPO_EXIT)--->|--RPO Rcvr Ind-->\n"
  title: 5.3.4  Notification of Remote Processor Outage
- contents:
  - "5.3.5  Notification of SS7 Link Congestion\n   The SGP can indicate that a SS7
    link has become congested.  It uses\n   the Congestion Indication message as shown
    below.\n MTP2           M2UA                                M2UA           MTP3\n
    \ SGP            SGP                                 ASP            ASP\n  ----Cong
    Ind---->|--------Cong Ind (STATUS)------->|----Cong Ind---->\n  -Cong Cease Ind->|--------Cong
    Ind (STATUS)------->|-Cong Cease Ind->\n"
  title: 5.3.5  Notification of SS7 Link Congestion
- contents:
  - "5.3.6  SS7 Link Changeover\n   An example of the message flow for an error free
    changeover is shown\n   below.  In this example, there were three messages in
    the\n   retransmission queue that needed to be retrieved.\n  MTP2          M2UA
    \                           M2UA             MTP3\n   SGP           SGP                             ASP
    \             ASP\n   <-Rtrv BSN Req-|<--Rtrv Req (ACTION_RTRV_BSN)--|<--Rtrv
    BSN Req---\n                               (seq_num = 0)\n   -Rtrv BSN Cfm->|---Rtrv
    Cfm (ACTION_RTRV_BSN)->|---Rtrv BSN Cfm-->\n                               (seq_num
    = BSN)\n   <-Rtrv Msg Req-|<-Rtrv Req (ACTION_RTRV_MSGS)--|<--Rtrv Msg Req---\n
    \                              (seq_num = FSN)\n   -Rtrv Msg Cfm->|--Rtrv Cfm
    (ACTION_RTRV_MSGS)->|---Rtrv Msg Cfm-->\n                               (seq_num
    = 0)\n   -Rtrv Msg Ind->|---------Retrieval Ind ------->|---Rtrv Msg Ind-->\n
    \  -Rtrv Msg Ind->|---------Retrieval Ind ------->|---Rtrv Msg Ind-->\n   -Rtrv
    Msg Ind->|---------Retrieval Ind ------->|---Rtrv Msg Ind-->\n   -Rtrv Compl Ind->|----Retrieval
    Compl Ind ---->|-Rtrv Compl Ind-->\n      Note: The number of Retrieval Indication
    is dependent on the\n         number of messages in the retransmit queue that
    have been\n         requested.  Only one Retrieval Complete Indication SHOULD
    be\n         sent.\n   An example of a message flow with an error retrieving the
    BSN is\n   shown below.\n  MTP2          M2UA                            M2UA
    \            MTP3\n   SGP           SGP                             ASP              ASP\n
    \  <-Rtrv BSN Req-|<--Rtrv Req (ACTION_RTRV_BSN)--|<--Rtrv BSN Req---\n   -BSN
    Not Rtrv->|---Rtrv Cfm (ACTION_RTRV_BSN)->|---BSN Not Rtrv-->\n                               (seq_num
    = -1)\n   An example of a message flow with an error retrieving the messages is\n
    \  shown below.\n   <-Rtrv BSN Req-|<--Rtrv Req (ACTION_RTRV_BSN)--|<--Rtrv BSN
    Req---\n   -Rtrv BSN Cfm->|---Rtrv Cfm (ACTION_RTRV_BSN)->|---Rtrv BSN Cfm-->\n
    \                              (seq_num = BSN)\n   <-Rtrv Msg Req-|<-Rtrv Req
    (ACTION_RTRV_MSGS)--|<--Rtrv Msg Req---\n                               (seq_num
    = FSN)\n   -Rtrv Msg Cfm->|--Rtrv Cfm (ACTION_RTRV_MSGS)->|---Rtrv Msg Cfm-->\n
    \                              (seq_num = -1)\n   An example of a message flow
    for a request to drop messages (clear\n   retransmission buffers) is shown below.\n
    \ MTP2          M2UA                            M2UA             MTP3\n   SGP
    \          SGP                             ASP              ASP\n -Clr RTB Req----|<-StateReq
    (STATUS_CLEAR_RTB)--|<--Clr RTB Req-----\n -Clr RTB Req--->|-StateCfm (STATUS_CLEAR_RTB)-->|---Clr
    RTB Req---->\n"
  title: 5.3.6  SS7 Link Changeover
- contents:
  - "5.3.7  Flush and Continue\n   The following message flow shows a request to flush
    buffers.\n  MTP2            M2UA                              M2UA          MTP3\n
    \  SGP             SGP                               ASP           ASP\n   <--Flush
    Req----|<-State Req (STATUS_FLUSH_BUFS)--|<---Flush Req--\n   ---Flush Cfm--->|--State
    Cfm (STATUS_FLUSH_BUFS)->|---Flush Cfm-->\n   The following message flow shows
    a request to continue.\n  MTP2            M2UA                              M2UA
    \         MTP3\n   SGP             SGP                               ASP           ASP\n
    \  <---Cont Req----|<--State Req (STATUS_CONTINUE)---|<---Cont Req---\n   ----Cont
    Cfm--->|---State Cfm (STATUS_CONTINUE)-->|----Cont Cfm-->\n"
  title: 5.3.7  Flush and Continue
- contents:
  - "5.3.8  Auditing of SS7 link state\n   It may be necessary for the ASP to audit
    the current state of a SS7\n   link.  The flows below show an example of the request
    and all the\n   potential responses.\n   Below is an example in which the SS7
    link is out-of-service.\n MTP2           M2UA                              M2UA
    \          MGMT\n  SGP            SGP                               ASP            ASP\n
    \                |<----State Req (STATUS_AUDIT)----|<----Audit-------\n                                                                 MTP3\n
    \                                                                 ASP\n                 |-----------Release
    Ind---------->|-Out of Serv Ind->\n                                                                 MGMT\n
    \                                                                 ASP\n                 |-----State
    Cfm (STATUS_AUDIT)--->|----Audit Cfm--->\n   Below is an example in which the
    SS7 link is in-service.\n MTP2           M2UA                              M2UA
    \          MGMT\n  SGP            SGP                               ASP            ASP\n
    \                |<----State Req (STATUS_AUDIT)----|<----Audit-------\n                                                                 MTP3\n
    \                                                                 ASP\n                 |-----------Establish
    Cfm-------->|---In Serv Ind-->\n                                                                 MGMT\n
    \                                                                 ASP\n                 |-----State
    Cfm (STATUS_AUDIT)--->|----Audit Cfm--->\n   Below is an example in which the
    SS7 link is in-service, but\n   congested.\n MTP2           M2UA                              M2UA
    \          MGMT\n  SGP            SGP                               ASP            ASP\n
    \                |<----State Req (STATUS_AUDIT)----|<----Audit-------\n                                                                 MTP3\n
    \                                                                 ASP\n                 |-----------Establish
    Cfm-------->|---In Serv Ind-->\n                 |----------Congestion Ind-------->|---Cong
    Ind----->\n                                                                 MGMT\n
    \                                                                 ASP\n                 |-----State
    Cfm (STATUS_AUDIT)--->|----Audit Cfm--->\n   Below is an example in which the
    SS7 link is in-service, but in\n   Remote Processor Outage.\n MTP2           M2UA
    \                             M2UA           MGMT\n  SGP            SGP                               ASP
    \           ASP\n                 |<----State Req (STATUS_AUDIT)----|<---Audit
    Req----\n                                                                 MTP3\n
    \                                                                 ASP\n                 |-----------Establish
    Ind-------->|---In Serv Ind-->\n                 |---State Ind (EVENT_RPO_ENTER)-->|----RPO
    Enter--->\n                                                                 MGMT\n
    \                                                                 ASP\n                 |-----State
    Cfm (STATUS_AUDIT)--->|----Audit Cfm--->\n"
  title: 5.3.8  Auditing of SS7 link state
- contents:
  - "6.0 Timer Values\n   The recommended default values for M2UA timers are:\n      T(r)
    \                                   2 seconds\n      T(ack)                                  2
    seconds\n      T(beat)   Heartbeat Timer               30 seconds\n"
  title: 6. Timer Values
- contents:
  - "7.0 Security Considerations\n   M2UA is designed to carry signalling messages
    for telephony services.\n   As such, M2UA MUST involve the security needs of several
    parties: the\n   end users of the services; the network providers and the applications\n
    \  involved.  Additional requirements MAY come from local regulation.\n   While
    having some overlapping security needs, any security solution\n   SHOULD fulfill
    all of the different parties' needs.\n"
  title: 7. Security Considerations
- contents:
  - "7.1 Threats\n   There is no quick fix, one-size-fits-all solution for security.
    \ As a\n   transport protocol, M2UA has the following security objectives:\n      *
    \ Availability of reliable and timely user data transport.\n      *  Integrity
    of user data transport.\n      *  Confidentiality of user data.\n   M2UA runs
    on top of SCTP.  SCTP [8] provides certain transport\n   related security features,
    such as:\n      *  Blind Denial of Service Attacks\n      *  Flooding\n      *
    \ Masquerade\n      * Improper Monopolization of Services\n   When M2UA is running
    in a professionally managed corporate or service\n   provider network, it is reasonable
    to expect that this network\n   includes an appropriate security policy framework.
    \ The \"Site\n   Security Handbook\" [13] SHOULD be consulted for guidance.\n
    \  When the network in which M2UA runs in involves more than one party,\n   it
    MAY NOT be reasonable to expect that all parties have implemented\n   security
    in a sufficient manner.  In such a case, it is recommended\n   that IPSEC is used
    to ensure confidentiality of user payload.\n   Consult [14] for more information
    on configuring IPSEC services.\n"
  title: 7.1 Threats
- contents:
  - "7.2 Protecting Confidentiality\n   Particularly for mobile users, the requirement
    for confidentiality\n   MAY include the masking of IP addresses and ports.  In
    this case\n   application level encryption is not sufficient; IPSEC ESP SHOULD
    be\n   used instead.  Regardless of which level performs the encryption, the\n
    \  IPSEC ISAKMP service SHOULD be used for key management.\n"
  title: 7.2 Protecting Confidentiality
- contents:
  - '8.0 IANA Considerations

    '
  title: 8. IANA Considerations
- contents:
  - "8.1 SCTP Payload Protocol Identifier\n   A request will be made to IANA to assign
    an M2UA value for the\n   Payload Protocol Identifier in SCTP Payload Data chunk.
    \ The\n   following SCTP Payload Protocol Identifier has been registered:\n         M2UA
    \   \"2\"\n   The SCTP Payload Protocol Identifier is included in each SCTP Data\n
    \  chunk, to indicate which protocol the SCTP is carrying.  This Payload\n   Protocol
    Identifier is not directly used by SCTP but MAY be used by\n   certain network
    entities to identify the type of information being\n   carried in a Data chunk.\n
    \  The User Adaptation peer MAY use the Payload Protocol Identifier as a\n   way
    of determining additional information about the data being\n   presented to it
    by SCTP.\n"
  title: 8.1 SCTP Payload Protocol Identifier
- contents:
  - "8.2  M2UA Protocol Extensions\n   This protocol may also be extended through
    IANA in three ways:\n      -- through definition of additional message classes,\n
    \     -- through definition of additional message types, and\n      -- through
    definition of additional message parameters.\n   The definition and use of new
    message classes, types and parameters\n   is an integral part of SIGTRAN adaptation
    layers.  Thus, these\n   extensions are assigned by IANA through an IETF Consensus
    action as\n   defined in [RFC2434].\n   The proposed extension must in no way
    adversely affect the general\n   working of the protocol.\n"
  title: 8.2  M2UA Protocol Extensions
- contents:
  - "8.2.1 IETF Defined Message Classes\n   The documentation for a new message class
    MUST include the following\n   information:\n   (a) A long and short name for
    the message class.\n   (b) A detailed description of the purpose of the message
    class.\n"
  title: 8.2.1 IETF Defined Message Classes
- contents:
  - "8.2.2 IETF Defined Message Types\n   Documentation of the message type MUST contain
    the following\n   information:\n   (a) A long and short name for the new message
    type.\n   (b) A detailed description of the structure of the message.\n   (c)
    A detailed definition and description of intended use of each\n       field within
    the message.\n   (d) A detailed procedural description of the use of the new message\n
    \      type within the operation of the protocol.\n   (e) A detailed description
    of error conditions when receiving this\n       message type.\n   When an implementation
    receives a message type which it does not\n   support, it MUST respond with an
    Error (ERR) message with an Error\n   Code of Unsupported Message Type.\n"
  title: 8.2.2 IETF Defined Message Types
- contents:
  - "8.2.3 IETF-defined TLV Parameter Extension\n   Documentation of the message parameter
    MUST contain the following\n   information:\n   (a) Name of the parameter type.\n
    \  (b) Detailed description of the structure of the parameter field.\n       This
    structure MUST conform to the general type-length-value\n       format described
    in Section 3.1.5.\n   (c) Detailed definition of each component of the parameter
    value.\n   (d) Detailed description of the intended use of this parameter type,\n
    \      and an indication of whether and under what circumstances\n       multiple
    instances of this parameter type may be found within the\n       same message
    type.\n"
  title: 8.2.3 IETF-defined TLV Parameter Extension
- contents:
  - "9.0  Acknowledgments\n   The authors would like to thank Tom George (Alcatel)
    for contribution\n   of text and effort on the specification.\n   The authors
    would like to thank John Loughney, Neil Olson, Michael\n   Tuexen, Nikhil Jain,
    Steve Lorusso, Dan Brendes, Joe Keller, Heinz\n   Prantner, Barry Nagelberg, Naoto
    Makinae, Joyce Archibald, Mark\n   Kobine, Nitin Tomar, Harsh Bhondwe and Karen
    King for their valuable\n   comments and suggestions.\n"
  title: 9.  Acknowledgments
- contents:
  - '10.0  References

    '
  title: 10.  References
- contents:
  - "10.1  Normative\n   [1]  ITU-T Recommendation Q.700, 'Introduction To ITU-T Signalling\n
    \       System No. 7 (SS7)'\n   [2]  ITU-T Recommendation Q.701-Q.705, 'Signalling
    System No. 7 (SS7)\n        - Message Transfer Part (MTP)'\n   [3]  ANSI T1.111
    'Signalling System Number 7 - Message Transfer Part'\n   [4]  Bellcore GR-246-CORE
    'Bell Communications Research Specification\n        of Signalling System Number
    7', Volume 1, December 1995\n   [5]  Telecommunication Technology Committee (TTC)
    Standard JT-Q704,\n        Message Transfer Part Signaling Network Functions,
    April 28,\n        1992.\n   [6]  Yergeau, F., \"UTF-8, a transformation format
    of ISO 10646\", RFC\n        2279, January 1998.\n   [7]  Coded Character Set--7-Bit
    American Standard Code for\n        Information Interchange, ANSI X3.4-1986.\n"
  title: 10.1  Normative
- contents:
  - "10.2  Informative\n   [8]  Stewart, R., Xie, Q., Morneault, K., Sharp, C., Schwarzbauer,\n
    \       H., Taylor, T., Rytina, I., Kalla, M., Zhang, L. and V. Paxson,\n        \"Stream
    Control Transmission Protocol\", RFC 2960, October 2000.\n   [9]  Ong, L., Rytina,
    I., Garcia, M., Schwarzbauer, H., Coene, L.,\n        Lin, H., Juhasz, I., Holdrege,
    M. and C. Sharp, \"Architectural\n        Framework for Signalling Transport\",
    RFC 2719, October 1999.\n   [10] ITU-T Recommendation Q.2140, 'B-ISDN ATM Adaptation
    Layer',\n        February 1995\n   [11] ITU-T Recommendation Q.2210, 'Message
    transfer part level 3\n        functions and messages using the services of ITU-T\n
    \       Recommendation Q.2140', August 1995\n   [12] ITU-T Recommendation Q.751.1,
    'Network Element Management\n        Information Model for the Message Transfer
    Part', October 1995\n   [13] Fraser, B., \"Site Security Handbook\", FYI 8, RFC
    2196, September\n        1997.\n   [14] Kent, S. and R. Atkinson, \"Security Architecture
    for the\n        Internet Protocol\", RFC 2401, November 1998.\n"
  title: 10.2  Informative
- contents:
  - "Appendix A: Signalling Network Architecture\n   A Signalling Gateway will support
    the transport of MTP2-User\n   signalling traffic received from the SS7 network
    to one or more\n   distributed ASPs (e.g., MGCs).  Clearly, the M2UA protocol\n
    \  description cannot in itself meet any performance and reliability\n   requirements
    for such transport.  A physical network architecture is\n   required, with data
    on the availability and transfer performance of\n   the physical nodes involved
    in any particular exchange of\n   information.  However, the M2UA protocol is
    flexible enough to allow\n   its operation and management in a variety of physical
    configurations\n   that will enable Network Operators to meet their performance
    and\n   reliability requirements.\n   To meet the stringent SS7 signalling reliability
    and performance\n   requirements for carrier grade networks, these Network Operators\n
    \  should ensure that there is no single point of failure provisioned in\n   the
    end-to-end network architecture between an SS7 node and an IP\n   ASP.\n   Depending
    of course on the reliability of the SGP and ASP functional\n   elements, this
    can typically be met by spreading SS7 links in a SS7\n   linkset [1] across SGPs
    or SGs, the provision of redundant QoS-\n   bounded IP network paths for SCTP
    Associations between SCTP End\n   Points, and redundant Hosts.  The distribution
    of ASPs within the\n   available Hosts is also important.  For a particular Application\n
    \  Server, the related ASPs MAY be distributed over at least two Hosts.\n   An
    example of logical network architecture relevant to carrier-grade\n   operation
    in the IP network domain is shown in Figure 7 below:\n        **************                              **************\n
    \       *  ********__*______________________________*__********  * Host1\n   SG1
    \ *  * SGP1 *__*________________       _______*__* ASP1 *  *\n        *  ********
    \ *                |     |       *  ********  *\n        *      .     *                |
    \    |       *            *\n        *      .     *                |     |       **************\n
    \       **************                |     |\n                                      |
    \    |\n        **************                |     |\n        *  ********__*______________________|\n
    \  SG2  *  * SGP2 *__*________        |\n        *  ********  *        |       |\n
    \       *      .     *        |       |\n        *      .     *        |       |\n
    \       **************        |       |             **************\n                              |
    \      |_____________*__********  * Host2\n                              |_____________________*__*
    ASP2 *  *\n               .                                    *  ********  *\n
    \              .            SCTP Associations       *            *\n               .
    \                                   **************\n                                                            .\n
    \                                                           .\n                                                            .\n
    \                    Figure 7: Logical Model Example\n   To avoid a single point
    of failure, it is recommended that a minimum\n   of two ASPs be configured in
    an AS list, resident in separate hosts\n   and, therefore, available over different
    SCTP associations.  For\n   example, in the network shown in Figure 7, all messages
    for the\n   Interface Identifiers could be sent to ASP1 in Host1 or ASP2 in\n
    \  Host2.  The AS list at SGP1 might look like the following:\n         Interface
    Identifiers - Application Server #1\n             ASP1/Host1  - State = Active\n
    \            ASP2/Host2  - State = Inactive\n   In this 1+1 redundancy case, ASP1
    in Host1 would be sent any incoming\n   message for the Interface Identifiers
    registered.  ASP2 in Host2\n   would normally be brought to the active state upon
    failure of\n   ASP1/Host1.  In this example, both ASPs are Inactive or Active,\n
    \  meaning that the related SCTP association and far-end M2UA peer is\n   ready.\n
    \  For carrier grade networks, Operators should ensure that under\n   failure
    or isolation of a particular ASP, stable calls or\n   transactions are not lost.
    \ This implies that ASPs need, in some\n   cases, to share the call/-transaction
    state or be able to pass the\n   call/transaction state between each other.  Also,
    in the case of ASPs\n   performing call processing, coordination MAY be required
    with the\n   related Media Gateway to transfer the MGC control for a particular\n
    \  trunk termination.  However, this sharing or communication is outside\n   the
    scope of this document.\n"
  title: 'Appendix A: Signalling Network Architecture'
- contents:
  - "11.0  Authors' Addresses\n   Ken Morneault\n   Cisco Systems Inc.\n   13615 Dulles
    Technology Drive\n   Herndon, VA. 20171\n   USA\n   Phone: +1-703-484-3323\n   EMail:
    kmorneau@cisco.com\n   Ram Dantu, Ph.D.\n   NetRake Corporation\n   3000 Technology
    Drive\n   Plano, TX 75074\n   USA\n   Phone: +1-214-291-1111\n   EMail: rdantu@netrake.com\n
    \  Greg Sidebottom\n   Signatus Technologies\n   Kanata, Ontario, Canada\n   EMail:
    greg@signatustechnologies.com\n   Brian Bidulock\n   OpenSS7 Corporation\n   1469
    Jeffreys Crescent\n   Edmonton, AB  T6L 6T1\n   Canada\n   Phone: +1-780-490-1141\n
    \  EMail: bidulock@openss7.org\n   Jacob Heitz\n   Lucent Technologies\n   1701
    Harbor Bay Parkway\n   Alameda, CA, 94502\n   USA\n   Phone: +1-510-747-2917\n
    \  EMail: jheitz@lucent.com\n"
  title: Authors' Addresses
- contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2002).  All
    Rights Reserved.\n   This document and translations of it may be copied and furnished
    to\n   others, and derivative works that comment on or otherwise explain it\n
    \  or assist in its implementation may be prepared, copied, published\n   and
    distributed, in whole or in part, without restriction of any\n   kind, provided
    that the above copyright notice and this paragraph are\n   included on all such
    copies and derivative works.  However, this\n   document itself may not be modified
    in any way, such as by removing\n   the copyright notice or references to the
    Internet Society or other\n   Internet organizations, except as needed for the
    purpose of\n   developing Internet standards in which case the procedures for\n
    \  copyrights defined in the Internet Standards process must be\n   followed,
    or as required to translate it into languages other than\n   English.\n   The
    limited permissions granted above are perpetual and will not be\n   revoked by
    the Internet Society or its successors or assigns.\n   This document and the information
    contained herein is provided on an\n   \"AS IS\" basis and THE INTERNET SOCIETY
    AND THE INTERNET ENGINEERING\n   TASK FORCE DISCLAIMS ALL WARRANTIES, EXPRESS
    OR IMPLIED, INCLUDING\n   BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF THE
    INFORMATION\n   HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED WARRANTIES
    OF\n   MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.\n"
  title: Full Copyright Statement
- contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided
    by the\n   Internet Society.\n"
  title: Acknowledgement
