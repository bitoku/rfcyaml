- title: __initial_text__
  contents:
  - "               Experiment: Hash Functions with Parameters\n          in the Cryptographic\
    \ Message Syntax (CMS) and S/MIME\nAbstract\n   New hash algorithms are being\
    \ developed that may include parameters.\n   Cryptographic Message Syntax (CMS)\
    \ has not currently defined any hash\n   algorithms with parameters, but anecdotal\
    \ evidence suggests that\n   defining one could cause major problems.  This document\
    \ defines just\n   such an algorithm and describes how to use it so that experiments\
    \ can\n   be run to find out how bad including hash parameters will be.\nStatus\
    \ of This Memo\n   This document is not an Internet Standards Track specification;\
    \ it is\n   published for examination, experimental implementation, and\n   evaluation.\n\
    \   This document defines an Experimental Protocol for the Internet\n   community.\
    \  This document is a product of the Internet Engineering\n   Task Force (IETF).\
    \  It represents the consensus of the IETF\n   community.  It has received public\
    \ review and has been approved for\n   publication by the Internet Engineering\
    \ Steering Group (IESG).  Not\n   all documents approved by the IESG are a candidate\
    \ for any level of\n   Internet Standard; see Section 2 of RFC 5741.\n   Information\
    \ about the current status of this document, any errata,\n   and how to provide\
    \ feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc6210.\n\
    Copyright Notice\n   Copyright (c) 2011 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\nTable of Contents\n\
    \   1.  Introduction . . . . . . . . . . . . . . . . . . . . . . . . .  3\n  \
    \   1.1.  Notation . . . . . . . . . . . . . . . . . . . . . . . . .  5\n   2.\
    \  XOR-MD5 Digest Algorithm . . . . . . . . . . . . . . . . . . .  5\n   3.  ASN.1\
    \ Encoding . . . . . . . . . . . . . . . . . . . . . . . .  6\n   4.  CMS ASN.1\
    \ Handling . . . . . . . . . . . . . . . . . . . . . .  6\n   5.  MIME Handling\
    \  . . . . . . . . . . . . . . . . . . . . . . . .  6\n   6.  IANA Considerations\
    \  . . . . . . . . . . . . . . . . . . . . .  7\n   7.  Security Considerations\
    \  . . . . . . . . . . . . . . . . . . .  7\n   8.  References . . . . . . . .\
    \ . . . . . . . . . . . . . . . . . .  7\n     8.1.  Normative References . .\
    \ . . . . . . . . . . . . . . . . .  7\n     8.2.  Informative References . .\
    \ . . . . . . . . . . . . . . . .  8\n   Appendix A.  Examples  . . . . . . .\
    \ . . . . . . . . . . . . . . .  9\n     A.1.  Encapsulated Signed Data Example\
    \ . . . . . . . . . . . . .  9\n     A.2.  Multipart Signed Message . . . . .\
    \ . . . . . . . . . . . . 10\n     A.3.  Authenticated Data Example . . . . .\
    \ . . . . . . . . . . . 12\n   Appendix B.  2008 ASN.1 Module . . . . . . . .\
    \ . . . . . . . . . . 13\n1.  Introduction\n   At the present time, all hash algorithms\
    \ that are used in\n   Cryptographic Message Syntax (CMS) implementations are\
    \ defined as\n   having no parameters.  Anecdotal evidence suggests that if a\
    \ hash\n   algorithm is defined that does require the presence of parameters,\n\
    \   there may be extensive problems.  This document presents the details\n   needed\
    \ to run an experiment so that the community can find out just\n   how bad the\
    \ situation really is and, if needed, either make drastic\n   changes in implementations\
    \ or make sure that any hash algorithms\n   chosen do not have parameters.\n \
    \  In CMS data structures, hash algorithms currently exist in the\n   following\
    \ locations:\n   o  SignerInfo.digestAlgorithm - holds the digest algorithm used\
    \ to\n      compute the hash value over the content.\n   o  DigestedData.digestAlgorithm\
    \ - holds the digest algorithm used to\n      compute the hash value over the\
    \ content.\n   o  AuthenticatedData.digestAlgorithm - holds the digest algorithm\n\
    \      used to compute the hash value over the content.\n   o  SignedData.digestAlgorithms\
    \ - an optional location to hold the set\n      of digest algorithms used in computing\
    \ the hash value over the\n      content.\n   o  multipart/signed micalg - holds\
    \ a textual indicator of the hash\n      algorithm for multipart signed MIME messages.\n\
    \   The first three locations hold the identification of a single hash,\n   and\
    \ would hold the parameters for that hash.  It's mandatory to fill\n   these fields.\n\
    \   The ASN.1 structures defined for the DigestedData and\n   AuthenticatedData\
    \ types place the digest algorithm field before the\n   encapsulated data field.\
    \  This means that the hash algorithm\n   (including the parameters) is fully\
    \ defined, and therfore can be\n   instantiated, before the hash function would\
    \ start hashing the\n   encapsulated data.\n   In the ASN.1 defined for the SignedData\
    \ type, the value of\n   SignerInfo.digestAlgorithm is not seen until the content\
    \ has been\n   processed.  This is the reason for the existence of the\n   SignedData.digestAlgorithms\
    \ field, so that the set of all digest\n   algorithms used can be seen prior to\
    \ the content being processed.  It\n   is not currently mandatory to fill in this\
    \ field, and the signature\n   validation process is supposed to succeed even\
    \ if this field is\n   absent.  (RFC 5652 says signature validation MAY fail if\
    \ the digest\n   algorithm is absent.)\n   For the case of detached content, the\
    \ ASN.1 structures need to be\n   processed before processing the detached content\
    \ in order to obtain\n   the parameters of the hash function.  The MIME multipart/signature\n\
    \   content type attempts to avoid this problem by defining a micalg\n   field\
    \ that contains the set of hash algorithms (with parameters) so\n   that the hash\
    \ functions can be set up prior to processing the\n   content.\n   When processing\
    \ multipart/signed messages, two paths exists:\n   1.  Process the message content\
    \ before the ASN.1.  The steps involved\n       are:\n       *  Get a set of hash\
    \ functions by looking at the micalg parameter\n          and potentially add\
    \ a set of generic algorithms.\n       *  Create a hasher for each of those algorithms.\n\
    \       *  Hash the message content (the first part of the multipart).\n     \
    \  *  Process the ASN.1 and have a potential failure point if a hash\n       \
    \   algorithm is required but was not computed.\n   2.  Process the message content\
    \ after the ASN.1.  The steps involved\n       are:\n       *  Save the message\
    \ content for later processing.\n       *  Parse the ASN.1 and build a list of\
    \ hash functions based on\n          its content.\n       *  Create a hasher for\
    \ each of those algorithms.\n       *  Hash the saved message content.\n     \
    \  *  Perform the signature validation.\n   The first path allows for single-pass\
    \ processing, but has the\n   potential that a fallback path needs to be added\
    \ in some cases.  The\n   second path does not need a fallback path, but does\
    \ not allow for\n   single-pass processing.\n   The fallback path above may also\
    \ be needed for the encapsulated\n   content case.  Since it is optional to place\
    \ hash algorithms in the\n   SignedData.digestAlgorithms field, the content will\
    \ be completely\n   parsed before the set of hash algorithms used in the various\n\
    \   SignerInfo structures are determined.  It may be that an update to\n   CMS\
    \ is required to make population of the SignedData.digestAlgorithms\n   field\
    \ mandatory, in the event that a parameterized hash algorithm is\n   adopted.\n\
    \   In this document, a new hash function is created that is based on the\n  \
    \ XOR operator and on MD5.  MD5 was deliberately used as the basis of\n   this\
    \ digest algorithm since it is known to be insecure, and I do not\n   want to\
    \ make any statements that the hash algorithm designed here is\n   in any way\
    \ secure.  This hash function MUST NOT be released as\n   shipping code, it is\
    \ designed only for use in experimentation.  An\n   example of a parameterized\
    \ hash algorithm that might be standardized\n   is a scheme developed by Shai\
    \ Halevi and Hugo Krawczyk [RANDOM-HASH].\n1.1.  Notation\n   The key words \"\
    MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\",\
    \ \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this\n   document\
    \ are to be interpreted as described in [RFC2119].\n2.  XOR-MD5 Digest Algorithm\n\
    \   The XOR-MD5 digest algorithm has been designed to use two existing\n   operators,\
    \ XOR and the MD5 hash algorithm [MD5].  The hash algorithm\n   works as follows:\n\
    \   1.  A random XOR string consisting of exactly 64 bytes is created.\n   2.\
    \  The input content is broken up into 64-byte blocks.  The last\n       block\
    \ may be less that 64 bytes.\n   3.  Each block is XOR-ed with the random string.\
    \  The last block uses\n       the same number of bits from the random string\
    \ as it contains.\n   4.  The resulting string is run through the MD5 hash function.\n\
    \   The length of the XOR string was designed to match the barrel size of\n  \
    \ the MD5 hash function.\n3.  ASN.1 Encoding\n   The following ASN.1 is used to\
    \ define the algorithm:\n   mda-xor-md5-EXPERIMENT DIGEST-ALGORITHM ::= {\n  \
    \    IDENTIFIER id-alg-MD5-XOR-EXPERIMENT\n      PARAMS TYPE MD5-XOR-EXPERIMENT\
    \ ARE required\n   }\n   id-alg-MD5-XOR-EXPERIMENT OBJECT IDENTIFIER ::= {\n \
    \     iso(1) member-body(2) us(840) rsadsi(113549)\n      pkcs(1) pkcs-9(9) smime(16)\
    \ id-alg(3) 13\n   }\n   MD5-XOR-EXPERIMENT ::= OCTET STRING (SIZE(64))\n   The\
    \ octet string holds the value of the random XOR string.\n4.  CMS ASN.1 Handling\n\
    \   The algorithm is added to the DigestAlgorithmSet in [CMS].\n   When this algorithm\
    \ is used in a signed message, it is REQUIRED that\n   the algorithm be placed\
    \ in the SignedData.digestAlgorithms sequence.\n   The algorithm MUST appear in\
    \ the sequence at least once for each\n   unique set of parameters.  The algorithm\
    \ SHOULD NOT appear multiple\n   times with the same set of parameters.\n5.  MIME\
    \ Handling\n   This section defines the string that appears in the micalg parameter.\n\
    \   The algorithm is identified by the string xor-md5.  The parameters\n   for\
    \ the algorithm are the hex-encoded Distinguished Encoding Rules\n   (DER) ASN.1\
    \ encoding.  The parameters and the identifier string are\n   separated by a colon.\
    \  One of the issues that needs to be addressed\n   is the fact that this will\
    \ generate very long data values for\n   parameters.  These will be too long for\
    \ many systems to deal with.\n   The issue of how to deal with this has been addressed\
    \ in [RFC2231] by\n   creating a method to fragment values.  An example content-type\
    \ string\n   that has been fragmented is:\n   Content-Type: multipart/signed;\n\
    \     protocol=\"application/pkcs7-signature\";\n     micalg*0=\"sha1, xor-md5:04400102030405060708090a0b0c0d0e0f0011\"\
    ;\n     micalg*1=\"12131415161718191a1b1c1d1e1f102122232425262728292a2b\";\n \
    \    micalg*2=\"2c2d2e2f203132333435363738\";\n     micalg*3=\"393a3b3c3d3e3f30\"\
    ;  boundary=boundar42\n   Arguments could be made that the string should be base64\
    \ encoded\n   rather than hex encoded.  The advantage is that the resulting\n\
    \   encoding is shorter.  This could be significant if there are a\n   substantial\
    \ number of parameters and of a substantial size.  Even\n   with the above example,\
    \ it was necessary to break the encoding across\n   multiple lines.  The downside\
    \ would be the requirement that the\n   micalg parameter always be quoted.\n \
    \  It may be reasonable to require that whitespace be inserted only on\n   encoding\
    \ boundaries, but it seems to be overly restrictive.\n6.  IANA Considerations\n\
    \   All identifiers are assigned out of the S/MIME OID arc.\n7.  Security Considerations\n\
    \   The algorithm XOR-MD5 is not designed for general-purpose use.  The\n   hash\
    \ algorithm included here is designed for running this experiment\n   and nothing\
    \ more.\n   This document makes no representation that XOR-MD5 is a secure digest\n\
    \   algorithm.  I believe that the algorithm is no more secure than MD5,\n   and\
    \ I consider MD5 to be a broken hash algorithm for many purposes.\n   One known\
    \ issue with the algorithm at present is the fact that the\n   XOR pattern is\
    \ always 64 bytes long, even if the data is shorter.\n   This means that there\
    \ is a section of the data than can be\n   manipulated without changing the hash.\
    \  In a real algorithm, this\n   should either be truncated or forced to a known\
    \ value.\n8.  References\n8.1.  Normative References\n   [ASN.1-2008]  ITU-T,\
    \ \"ITU-T Recommendations X.680, X.681, X.682, and\n                 X.683\",\
    \ 2008.\n   [CMS]         Housley, R., \"Cryptographic Message Syntax (CMS)\"\
    ,\n                 RFC 5652, September 2009.\n   [MD5]         Rivest, R., \"\
    The MD5 Message-Digest Algorithm\",\n                 RFC 1321, April 1992.\n\
    \   [RFC2119]     Bradner, S., \"Key words for use in RFCs to Indicate\n     \
    \            Requirement Levels\", BCP 14, RFC 2119, March 1997.\n   [RFC2231]\
    \     Freed, N. and K. Moore, \"MIME Parameter Value and\n                 Encoded\
    \ Word Extensions: Character Sets, Languages, and\n                 Continuations\"\
    , RFC 2231, November 1997.\n   [SMIME-MSG]   Ramsdell, B. and S. Turner, \"Secure/Multipurpose\n\
    \                 Internet Mail Extensions (S/MIME) Version 3.2 Message\n    \
    \             Specification\", RFC 5751, January 2010.\n8.2.  Informative References\n\
    \   [CMS-ASN]     Hoffman, P. and J. Schaad, \"New ASN.1 Modules for\n       \
    \          Cryptographic Message Syntax (CMS) and S/MIME\",\n                \
    \ RFC 5911, June 2010.\n   [RANDOM-HASH] Halevi, S. and H. Krawczyk, \"Strengthening\
    \ Digital\n                 Signatures via Random Hashing\", January 2007,\n \
    \                <http://webee.technion.ac.il/~hugo/rhash/rhash.pdf>.\n   [RFC5912]\
    \     Hoffman, P. and J. Schaad, \"New ASN.1 Modules for the\n               \
    \  Public Key Infrastructure Using X.509 (PKIX)\",\n                 RFC 5912,\
    \ June 2010.\n   [SMIME-EXAMPLES]\n                 Hoffman, P., \"Examples of\
    \ S/MIME Messages\", RFC 4134,\n                 July 2005.\nAppendix A.  Examples\n\
    \   Provided here are a set of simple S/MIME messages [SMIME-MSG] that\n   are\
    \ for testing.  The content used is the same as that found in\n   Section 2.1\
    \ of [SMIME-EXAMPLES].  The certificates and key pairs\n   found in [SMIME-EXAMPLES]\
    \ are also used here.\n   The Perl script in Appendix A of [SMIME-EXAMPLES] can\
    \ be used to\n   extract the binary examples from this file.  The MIME examples\
    \ can be\n   extracted with a standard text editor.\n   Note: The examples presented\
    \ here have not been independently\n   verified.  I was unable to use the Microsoft\
    \ APIs because of the new\n   cryptographic hash algorithm.  However, for the\
    \ purposes of this\n   experiment, I believe that the form of the messages, which\
    \ can be\n   verified visually as correct, is more important than the question\
    \ of\n   the message validating.\nA.1.  Encapsulated Signed Data Example\n   This\
    \ section contains a detached signed data example.  The content\n   was hashed\
    \ with the MD5-XOR algorithm defined in this document.  The\n   signature is performed\
    \ using RSA with MD5.  The signature is wrapped\n   as an embedded signed mime\
    \ message.\n MIME-Version: 1.0\n To: BobRSA@example.com\n From: AliceDss@example.com\n\
    \ Subject: MD5-XOR example message\n Message-Id: <34567809323489fd.esc@example.com>\n\
    \ Date: Wed, 16 Dec 2010 23:13:00 -0500\n Content-Type: application/pkcs7-mime;\
    \ smime-type=signed-data;\n   name=smime.p7m;\n   micalg*0=\"xor-md5: 0440010203405060708090a0b0c0d0e0f10\"\
    ;\n   micalg*1=\"111213415161718191a1b1c1d1e1f20212223425262728292a2b2c\";\n \
    \  micalg*2=\"2d2e2f30313233435363738393a3b3c3d3e3f40\"\n Content-Transfer-Encoding:\
    \ base64\n Content-Disposition: attachment; filename=smime.p7m\n MIIEqAYJKoZIhvcNAQcCoIIEmTCCBJUCAQExUTBPBgsqhkiG9w0BCRADDQRAAQIDBAUGBw\n\
    \ gJCgsMDQ4PEBESEwQVFhcYGRobHB0eHyAhIiMEJSYnKCkqKywtLi8wMTIzBDU2Nzg5Ojs8\n PT4/QDArBgkqhkiG9w0BBwGgHgQcVGhpcyBpcyBzb21lIHNhbXBsZSBjb250ZW50LqCCAi\n\
    \ swggInMIIBkKADAgECAhBGNGvHgABWvBHTbi7NXXHQMA0GCSqGSIb3DQEBBQUAMBIxEDAO\n BgNVBAMTB0NhcmxSU0EwHhcNOTkwOTE5MDEwOTAyWhcNMzkxMjMxMjM1OTU5WjARMQ8wDQ\n\
    \ YDVQQDEwZCb2JSU0EwgZ8wDQYJKoZIhvcNAQEBBQADgY0AMIGJAoGBAKnhZ5g/OdVf8qCT\n QV6meYmFyDVdmpFb+x0B2hlwJhcPvaUi0DWFbXqYZhRBXM+3twg7CcmRuBlpN235ZR572a\n\
    \ kzJKN/O7uvRgGGNjQyywcDWVL8hYsxBLjMGAgUSOZPHPtdYMTgXB9T039T2GkB8QX4enDR\n voPGXzjPHCyqaqfrAgMBAAGjfzB9MAwGA1UdEwEB/wQCMAAwDgYDVR0PAQH/BAQDAgUgMB\n\
    \ 8GA1UdIwQYMBaAFOngkCeseCB6mtNM8kI3TiKunji7MB0GA1UdDgQWBBTo9Lhn2LOWpCrz\n Eaop05Vahha0JDAdBgNVHREEFjAUgRJCb2JSU0FAZXhhbXBsZS5jb20wDQYJKoZIhvcNAQ\n\
    \ EFBQADgYEAe45mxfEQPxAgTIhxq3tAayEz+kqV3p0OW2uUIQXA8uF+Ks2ck4iH+4u3fn1B\n YeHk1m354gRVYUW8ZCdEwKG9WXnZHWQ8IdZFsF1oM5LqrPFX5YF9mOY1kaM53nf06Bw7Kd\n\
    \ x/UQeX8zbwUArdm962XjgRK/tX6oltrcmI2I/PK9MxggHfMIIB2wIBATAmMBIxEDAOBgNV\n BAMTB0NhcmxSU0ECEEY0a8eAAFa8EdNuLs1dcdAwTwYLKoZIhvcNAQkQAw0EQAECAwQFBg\n\
    \ cICQoLDA0ODxAREhMEFRYXGBkaGxwdHh8gISIjBCUmJygpKissLS4vMDEyMwQ1Njc4OTo7\n PD0+P0CggcowGAYJKoZIhvcNAQkDMQsGCSqGSIb3DQEHATAcBgkqhkiG9w0BCQUxDxcNMD\n\
    \ kxMjEwMjMyNTAwWjAfBgkqhkiG9w0BCQQxEgQQlmmuYRtXnoPqECtrSd3A+TBvBgkqhkiG\n 9w0BCTQxYjBgME8GCyqGSIb3DQEJEAMNBEABAgMEBQYHCAkKCwwNDg8QERITBBUWFxgZGh\n\
    \ scHR4fICEiIwQlJicoKSorLC0uLzAxMjMENTY3ODk6Ozw9Pj9AoQ0GCSqGSIb3DQEBBAUA\n MA0GCSqGSIb3DQEBBAUABIGAClMpfG4IL1yAdRxWdvYKbtuFz1XKnFqo9ui7V5PndjlDut\n\
    \ yib02knY7UtGNhg6oVEkiZHxYh/iLuoLOHSFA1P4ZacTYrEKChF4K18dsqvlFip1vn8BG/\n ysFUDfbx5VcTG2Md0/NHV+qj5ihqM+Pye6Urp+5jbqVgpZOXSLfP+pI=\n\
    \ |>sd.bin\n |MIIEqAYJKoZIhvcNAQcCoIIEmTCCBJUCAQExUTBPBgsqhkiG9w0BCRADDQRAAQIDBAUGBw\n\
    \ |gJCgsMDQ4PEBESEwQVFhcYGRobHB0eHyAhIiMEJSYnKCkqKywtLi8wMTIzBDU2Nzg5Ojs8\n |PT4/QDArBgkqhkiG9w0BBwGgHgQcVGhpcyBpcyBzb21lIHNhbXBsZSBjb250ZW50LqCCAi\n\
    \ |swggInMIIBkKADAgECAhBGNGvHgABWvBHTbi7NXXHQMA0GCSqGSIb3DQEBBQUAMBIxEDAO\n |BgNVBAMTB0NhcmxSU0EwHhcNOTkwOTE5MDEwOTAyWhcNMzkxMjMxMjM1OTU5WjARMQ8wDQ\n\
    \ |YDVQQDEwZCb2JSU0EwgZ8wDQYJKoZIhvcNAQEBBQADgY0AMIGJAoGBAKnhZ5g/OdVf8qCT\n |QV6meYmFyDVdmpFb+x0B2hlwJhcPvaUi0DWFbXqYZhRBXM+3twg7CcmRuBlpN235ZR572a\n\
    \ |kzJKN/O7uvRgGGNjQyywcDWVL8hYsxBLjMGAgUSOZPHPtdYMTgXB9T039T2GkB8QX4enDR\n |voPGXzjPHCyqaqfrAgMBAAGjfzB9MAwGA1UdEwEB/wQCMAAwDgYDVR0PAQH/BAQDAgUgMB\n\
    \ |8GA1UdIwQYMBaAFOngkCeseCB6mtNM8kI3TiKunji7MB0GA1UdDgQWBBTo9Lhn2LOWpCrz\n |Eaop05Vahha0JDAdBgNVHREEFjAUgRJCb2JSU0FAZXhhbXBsZS5jb20wDQYJKoZIhvcNAQ\n\
    \ |EFBQADgYEAe45mxfEQPxAgTIhxq3tAayEz+kqV3p0OW2uUIQXA8uF+Ks2ck4iH+4u3fn1B\n |YeHk1m354gRVYUW8ZCdEwKG9WXnZHWQ8IdZFsF1oM5LqrPFX5YF9mOY1kaM53nf06Bw7Kd\n\
    \ |x/UQeX8zbwUArdm962XjgRK/tX6oltrcmI2I/PK9MxggHfMIIB2wIBATAmMBIxEDAOBgNV\n |BAMTB0NhcmxSU0ECEEY0a8eAAFa8EdNuLs1dcdAwTwYLKoZIhvcNAQkQAw0EQAECAwQFBg\n\
    \ |cICQoLDA0ODxAREhMEFRYXGBkaGxwdHh8gISIjBCUmJygpKissLS4vMDEyMwQ1Njc4OTo7\n |PD0+P0CggcowGAYJKoZIhvcNAQkDMQsGCSqGSIb3DQEHATAcBgkqhkiG9w0BCQUxDxcNMD\n\
    \ |kxMjEwMjMyNTAwWjAfBgkqhkiG9w0BCQQxEgQQlmmuYRtXnoPqECtrSd3A+TBvBgkqhkiG\n |9w0BCTQxYjBgME8GCyqGSIb3DQEJEAMNBEABAgMEBQYHCAkKCwwNDg8QERITBBUWFxgZGh\n\
    \ |scHR4fICEiIwQlJicoKSorLC0uLzAxMjMENTY3ODk6Ozw9Pj9AoQ0GCSqGSIb3DQEBBAUA\n |MA0GCSqGSIb3DQEBBAUABIGAClMpfG4IL1yAdRxWdvYKbtuFz1XKnFqo9ui7V5PndjlDut\n\
    \ |yib02knY7UtGNhg6oVEkiZHxYh/iLuoLOHSFA1P4ZacTYrEKChF4K18dsqvlFip1vn8BG/\n |ysFUDfbx5VcTG2Md0/NHV+qj5ihqM+Pye6Urp+5jbqVgpZOXSLfP+pI=\n\
    \ |<sd.bin\nA.2.  Multipart Signed Message\n   This section contains a detached\
    \ signed data example.  The content\n   was hashed with the MD5-XOR algorithm\
    \ defined in this document.  The\n   signature is performed using RSA with MD5.\
    \  The signature is wrapped\n   as a detached signed mime message.\nMIME-Version:\
    \ 1.0\nTo: User2@example.com\nFrom: BobRSA@example.com\nSubject: MD5-XOR signing\
    \ example\nMessage-Id: <091218002550300.249@example.com>\nDate: Fri, 18 Dec 2010\
    \ 00:25:21 -0300\nContent-Type: multipart/signed;\n  micalg*0=\"xor-md5: 0440010203405060708090a0b0c0d0e0f10\"\
    ;\n  micalg*1=\"111213415161718191a1b1c1d1e1f20212223425262728292a2b2c2d2e\";\n\
    \  micalg*2=\"2f30313233435363738393a3b3c3d3e3f40\";\n    boundary=\"----=_NextBoundry____Fri,_18_Dec_2009_00:25:21\"\
    ;\n    protocol=\"application/pkcs7-signature\"\nThis is a multi-part message\
    \ in MIME format.\n------=_NextBoundry____Fri,_18_Dec_2009_00:25:21\nThis is some\
    \ sample content.\n------=_NextBoundry____Fri,_18_Dec_2009_00:25:21\nContent-Type:\
    \ application/pkcs7-signature; name=smime.p7s\nContent-Transfer-Encoding: base64\n\
    Content-Disposition: attachment; filename=smime.p7s\nMIIEiAYJKoZIhvcNAQcCoIIEeTCCBHUCAQExUTBPBgsqhkiG9w0BCRADDQRAAQIDBAUGBw\n\
    gJCgsMDQ4PEBESEwQVFhcYGRobHB0eHyAhIiMEJSYnKCkqKywtLi8wMTIzBDU2Nzg5Ojs8\nPT4/QDALBgkqhkiG9w0BBwGgggIrMIICJzCCAZCgAwIBAgIQRjRrx4AAVrwR024uzV1x0D\n\
    ANBgkqhkiG9w0BAQUFADASMRAwDgYDVQQDEwdDYXJsUlNBMB4XDTk5MDkxOTAxMDkwMloX\nDTM5MTIzMTIzNTk1OVowETEPMA0GA1UEAxMGQm9iUlNBMIGfMA0GCSqGSIb3DQEBAQUAA4\n\
    GNADCBiQKBgQCp4WeYPznVX/Kgk0FepnmJhcg1XZqRW/sdAdoZcCYXD72lItA1hW16mGYU\nQVzPt7cIOwnJkbgZaTdt+WUee9mpMySjfzu7r0YBhjY0MssHA1lS/IWLMQS4zBgIFEjmTx\n\
    z7XWDE4FwfU9N/U9hpAfEF+Hpw0b6Dxl84zxwsqmqn6wIDAQABo38wfTAMBgNVHRMBAf8E\nAjAAMA4GA1UdDwEB/wQEAwIFIDAfBgNVHSMEGDAWgBTp4JAnrHggeprTTPJCN04irp44uz\n\
    AdBgNVHQ4EFgQU6PS4Z9izlqQq8xGqKdOVWoYWtCQwHQYDVR0RBBYwFIESQm9iUlNBQGV4\nYW1wbGUuY29tMA0GCSqGSIb3DQEBBQUAA4GBAHuOZsXxED8QIEyIcat7QGshM/pKld6dDl\n\
    trlCEFwPLhfirNnJOIh/uLt359QWHh5NZt+eIEVWFFvGQnRMChvVl52R1kPCHWRbBdaDOS\n6qzxV+WBfZjmNZGjOd539OgcOyncf1EHl/M28FAK3Zvetl44ESv7V+qJba3JiNiPzyvTMY\n\
    IB3zCCAdsCAQEwJjASMRAwDgYDVQQDEwdDYXJsUlNBAhBGNGvHgABWvBHTbi7NXXHQME8G\nCyqGSIb3DQEJEAMNBEABAgMEBQYHCAkKCwwNDg8QERITBBUWFxgZGhscHR4fICEiIwQlJi\n\
    coKSorLC0uLzAxMjMENTY3ODk6Ozw9Pj9AoIHKMBgGCSqGSIb3DQEJAzELBgkqhkiG9w0B\nBwEwHAYJKoZIhvcNAQkFMQ8XDTEwMTIxMDIzMjUwMFowHwYJKoZIhvcNAQkEMRIEEJZprm\n\
    EbV56D6hAra0ndwPkwbwYJKoZIhvcNAQk0MWIwYDBPBgsqhkiG9w0BCRADDQRAAQIDBAUG\nBwgJCgsMDQ4PEBESEwQVFhcYGRobHB0eHyAhIiMEJSYnKCkqKywtLi8wMTIzBDU2Nzg5Oj\n\
    s8PT4/QKENBgkqhkiG9w0BAQQFADANBgkqhkiG9w0BAQQFAASBgEDMeyAkXMYqg/wW2B3P\ni8HWwGnZVA/4muJJ7+dEPacv3bRqE7n4dP0vXIYR7TJ1eRJk9uB/wry2fRPcnG3Y/Rn0Jy\n\
    CqXsb+dXXfwOGK/rvLvJOloXUCy4+HxQk6eaYIBrjiVIUgZjpZXGJcZg2xq5yH1e4aw5Ov\nfQlfQXPiKp1l\n\
    ------=_NextBoundry____Fri,_18_Dec_2009_00:25:21--\nA.3.  Authenticated Data Example\n\
    \   This section contains an authenticated data example.  The content was\n  \
    \ hashed with the MD5-XOR algorithm defined in this document.  The\n   authentication\
    \ was done with the HMAC-SHA1 algorithm.  The key is\n   transported using RSA\
    \ encryption to BobRSASignByCarl certificate.\nMIME-Version: 1.0\nTo: BobRSA@example.com\n\
    From: AliceDss@example.com\nSubject: MD5-XOR example message\nMessage-Id: <34567809323489fd.esc@example.com>\n\
    Date: Wed, 16 Dec 2010 23:13:00 -0500\nContent-Type: application/pkcs7-mime; smime-type=authenticated-data;\n\
    \  name=smime.p7m;\n  micalg*0=\"xor-md5: 0440010203405060708090a0b0c0d0e0f10\"\
    ;\n  micalg*1=\"111213415161718191a1b1c1d1e1f20212223425262728292a2b2c2d2e\";\n\
    \  micalg*2=\"2f30313233435363738393a3b3c3d3e3f40\"\nContent-Transfer-Encoding:\
    \ base64\nContent-Disposition: attachment; filename=smime.p7m\nMIICRQYLKoZIhvcNAQkQAQKgggI0MIICMAIBADGBwDCBvQIBADAmMBIxEDAOBgNVBAMMB0\n\
    NhcmxSU0ECEEY0a8eAAFa8EdNuLs1dcdAwDQYJKoZIhvcNAQEBBQAEgYCH70EpEikY7deb\n859YJRAWfFondQv1D4NFltw6C1ceheWnlAU0C2WEXr3LUBXZp1/PSte29FnJxu5bXCTn1g\n\
    elMm6zNlZNWNd0KadVBcaxi1n8L52tVM5sWFGJPO5cStOyAka2ucuZM6iAnCSkn1Ju7fgU\n5j2g3bZ/IM8nHTcygjAKBggrBgEFBQgBAqFPBgsqhkiG9w0BCRADDQRAAQIDBAUGBwgJCg\n\
    sMDQ4PEBESEwQVFhcYGRobHB0eHyAhIiMEJSYnKCkqKywtLi8wMTIzBDU2Nzg5Ojs8PT4/\nQDArBgkqhkiG9w0BBwGgHgQcVGhpcyBpcyBzb21lIHNhbXBsZSBjb250ZW50LqKBxzAYBg\n\
    kqhkiG9w0BCQMxCwYJKoZIhvcNAQcBMBwGCSqGSIb3DQEJBTEPFw0wOTEyMTAyMzI1MDBa\nMB8GCSqGSIb3DQEJBDESBBCWaa5hG1eeg+oQK2tJ3cD5MGwGCSqGSIb3DQEJNDFfMF0wTw\n\
    YLKoZIhvcNAQkQAw0EQAECAwQFBgcICQoLDA0ODxAREhMEFRYXGBkaGxwdHh8gISIjBCUm\nJygpKissLS4vMDEyMwQ1Njc4OTo7PD0+P0CiCgYIKwYBBQUIAQIEFLjUxQ9PJFzFnWraxb\n\
    EIbVbg2xql\n|>ad.bin\n|MIICRQYLKoZIhvcNAQkQAQKgggI0MIICMAIBADGBwDCBvQIBADAmMBIxEDAOBgNVBAMMB0\n\
    |NhcmxSU0ECEEY0a8eAAFa8EdNuLs1dcdAwDQYJKoZIhvcNAQEBBQAEgYCH70EpEikY7deb\n|859YJRAWfFondQv1D4NFltw6C1ceheWnlAU0C2WEXr3LUBXZp1/PSte29FnJxu5bXCTn1g\n\
    |elMm6zNlZNWNd0KadVBcaxi1n8L52tVM5sWFGJPO5cStOyAka2ucuZM6iAnCSkn1Ju7fgU\n|5j2g3bZ/IM8nHTcygjAKBggrBgEFBQgBAqFPBgsqhkiG9w0BCRADDQRAAQIDBAUGBwgJCg\n\
    |sMDQ4PEBESEwQVFhcYGRobHB0eHyAhIiMEJSYnKCkqKywtLi8wMTIzBDU2Nzg5Ojs8PT4/\n|QDArBgkqhkiG9w0BBwGgHgQcVGhpcyBpcyBzb21lIHNhbXBsZSBjb250ZW50LqKBxzAYBg\n\
    |kqhkiG9w0BCQMxCwYJKoZIhvcNAQcBMBwGCSqGSIb3DQEJBTEPFw0wOTEyMTAyMzI1MDBa\n|MB8GCSqGSIb3DQEJBDESBBCWaa5hG1eeg+oQK2tJ3cD5MGwGCSqGSIb3DQEJNDFfMF0wTw\n\
    |YLKoZIhvcNAQkQAw0EQAECAwQFBgcICQoLDA0ODxAREhMEFRYXGBkaGxwdHh8gISIjBCUm\n|JygpKissLS4vMDEyMwQ1Njc4OTo7PD0+P0CiCgYIKwYBBQUIAQIEFLjUxQ9PJFzFnWraxb\n\
    |EIbVbg2xql\n|<ad.bin\nAppendix B.  2008 ASN.1 Module\n   The ASN.1 module defined\
    \ uses the 2008 ASN.1 definitions found in\n   [ASN.1-2008].  This module contains\
    \ the ASN.1 module that contains\n   the required definitions for the types and\
    \ values defined in this\n   document.  The module uses the class defined in [CMS-ASN]\
    \ and\n   [RFC5912].\n  MD5-HASH-EXPERIMENT\n    { iso(1) member-body(2) us(840)\
    \ rsadsi(113549)\n      pkcs(1) pkcs-9(9) smime(16) modules(0)\n      id-mod-MD5-XOR-EXPERIMENT(999)\
    \ }\n  DEFINITIONS IMPLICIT TAGS ::=\n  BEGIN\n   IMPORTS\n     -- Cryptographic\
    \ Message Syntax (CMS) [CMS]\n     DigestAlgorithmIdentifier, MessageAuthenticationCodeAlgorithm,\n\
    \     SignatureAlgorithmIdentifier, DIGEST-ALGORITHM\n     FROM  CryptographicMessageSyntax-2009\n\
    \       { iso(1) member-body(2) us(840) rsadsi(113549)\n         pkcs(1) pkcs-9(9)\
    \ smime(16) modules(0) id-mod-cms-2004-02(41) }\n     -- Common PKIX structures\
    \ [RFC5912]\n     ATTRIBUTE\n     FROM PKIX-CommonTypes-2009\n       { iso(1)\
    \ identified-organization(3) dod(6) internet(1)\n         security(5) mechanisms(5)\
    \ pkix(7) id-mod(0)\n         id-mod-pkixCommon-02(57)};\n     mda-xor-md5-EXPERIMENT\
    \ DIGEST-ALGORITHM ::= {\n        IDENTIFIER id-alg-MD5-XOR-EXPERIMENT\n     \
    \   PARAMS TYPE MD5-XOR-EXPERIMENT ARE required\n     }\n     id-alg-MD5-XOR-EXPERIMENT\
    \ OBJECT IDENTIFIER ::= {\n        iso(1) member-body(2) us(840) rsadsi(113549)\n\
    \        pkcs(1) pkcs-9(9) smime(16) id-alg(3) 13\n     }\n     MD5-XOR-EXPERIMENT\
    \ ::= OCTET STRING (SIZE(64))\n  END\nAuthor's Address\n   Jim Schaad\n   Soaring\
    \ Hawk Consulting\n   EMail: ietf@augustcellars.com\n"
