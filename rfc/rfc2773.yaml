- title: __initial_text__
  contents:
  - '                   Encryption using KEA and SKIPJACK

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo defines an Experimental Protocol for the Internet\n\
    \   community.  It does not specify an Internet standard of any kind.\n   Discussion\
    \ and suggestions for improvement are requested.\n   Distribution of this memo\
    \ is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2000).  All Rights Reserved.\n"
- title: Abstract
  contents:
  - "Abstract\n   This document defines a method to encrypt a file transfer using\
    \ the\n   FTP specification STD 9, RFC 959, \"File Transfer Protocol (FTP)\",\n\
    \   (October 1985) [3] and RFC 2228, \"FTP Security Extensions\" (October\n  \
    \ 1997) [1].  This method will use the Key Exchange Algorithm (KEA) to\n   give\
    \ mutual authentication and establish the data encryption keys.\n   SKIPJACK is\
    \ used to encrypt file data and the FTP command channel.\n"
- title: 1.0 Introduction
  contents:
  - "1.0 Introduction\n   The File Transfer Protocol (FTP) provides no protocol security\
    \ except\n   for a user authentication password which is transmitted in the clear.\n\
    \   In addition, the protocol does not protect the file transfer session\n   beyond\
    \ the original authentication phase.\n   The Internet Engineering Task Force (IETF)\
    \ Common Authentication\n   Technology (CAT) Working Group has proposed security\
    \ extensions to\n   FTP.  These extensions allow the protocol to use more flexible\n\
    \   security schemes, and in particular allows for various levels of\n   protection\
    \ for the FTP command and data connections.  This document\n   describes a profile\
    \ for the FTP Security Extensions by which these\n   mechanisms may be provisioned\
    \ using the Key Exchange Algorithm (KEA)\n   in conjunction with the SKIPJACK\
    \ symmetric encryption algorithm.\n   FTP Security Extensions [1] provides:\n\
    \      *  user authentication -- augmenting the normal password\n         mechanism;\n\
    \      *  server authentication -- normally done in conjunction with user\n  \
    \       authentication;\n      *  session parameter negotiation -- in particular,\
    \ encryption keys\n         and attributes;\n      *  command connection protection\
    \ -- integrity, confidentiality, or\n         both;\n      *  data transfer protection\
    \ -- same as for command connection\n         protection.\n   In order to support\
    \ the above security services, the two FTP entities\n   negotiate a mechanism.\
    \  This process is open-ended and completes when\n   both entities agree on an\
    \ acceptable mechanism or when the initiating\n   party (always the client) is\
    \ unable to suggest an agreeable\n   mechanism.  Once the entities agree upon\
    \ a mechanism, they may\n   commence authentication and/or parameter negotiation.\n\
    \   Authentication and parameter negotiation occur within an unbounded\n   series\
    \ of exchanges.  At the completion of the exchanges, the\n   entities will either\
    \ be authenticated (unilateral or mutually), and\n   may, additionally, be ready\
    \ to protect FTP commands and data.\n   Following the exchanges, the entities\
    \ negotiate the size of the\n   buffers they will use in protecting the commands\
    \ and data that\n   follow.  This process is accomplished in two steps: the client\
    \ offers\n   a suggested buffer size and the server may either refuse it, counter\n\
    \   it, or accept it.\n   At this point, the entities may issue protected commands\
    \ within the\n   bounds of the parameters negotiated through the security exchanges.\n\
    \   Protected commands are issued by applying the protection services\n   required\
    \ to the normal commands and Base64 encoding the results. The\n   encoded results\
    \ are sent as the data field within a ENC (integrity\n   and confidentiality)\
    \ command.  Base64 is an encoding for mapping\n   binary data onto a textual character\
    \ set that is able to pass through\n   most 7-bit systems without loss.  The server\
    \ sends back responses in\n   new result codes which allow the identical protections\
    \ and Base64\n   encoding to be applied to the results.  Protection of the data\n\
    \   transfers can be specified via the PROT command which supports the\n   same\
    \ protections as those afforded the other FTP commands.  PROT\n   commands may\
    \ be sent on a transfer-by-transfer basis, however, the\n   session parameters\
    \ may not be changed within a session.\n"
- title: 2.0  Key Exchange Algorithm (KEA) Profile
  contents:
  - "2.0  Key Exchange Algorithm (KEA) Profile\n   This paper profiles KEA with SKIPJACK\
    \ to achieve certain security\n   services when used in conjunction with the FTP\
    \ Security Extensions\n   framework.  FTP entities may use KEA to give mutual\
    \ authentication\n   and establish data encryption keys.  We specify a simple\
    \ token format\n   and set of exchanges to deliver these services.  Functions\
    \ that may\n   be performed by the Fortezza Crypto Card.\n   The reader should\
    \ be familiar with the extensions in order to\n   understand the protocol steps\
    \ that follow.  In the context of the FTP\n   Security Extensions, we suggest\
    \ the usage of KEA with SKIPJACK for\n   authentication, integrity, and confidentiality.\n\
    \   A client may mutually authenticate with a server.  What follows are\n   the\
    \ protocol steps necessary to perform KEA authentication under the\n   FTP Security\
    \ Extensions framework.  Where failure modes are\n   encountered, the return codes\
    \ follow those specified in the\n   Extensions.  They are not enumerated in this\
    \ document as they are\n   invariant among the mechanisms used.  The certificates\
    \ are ASN.1\n   encoded.\n   The exchanges detailed below presume a working knowledge\
    \ of the FTP\n   Security Extensions.  The notation for concatenation is \" ||\
    \ \".\n   Decryption of encrypted data and certification path validation is\n\
    \   implicitly assumed, but is not shown.\n"
- title: '---------------------------------------------------------------------'
  contents:
  - "---------------------------------------------------------------------\n  Client\
    \                             Server\n  AUTH KEA-SKIPJACK              -->\n \
    \                                     <-- 334 ADAT=Base64( Certb || Rb )\n  ADAT\
    \ Base64( Certa || Ra ||\n    WMEK || IV || Encrypt(\n    Label-Type || Label-Length\
    \ ||\n    Label-List || pad || ICV ) ) -->\n                                 \
    \    <-- 235 ADAT=Base64( IV )\n"
- title: '---------------------------------------------------------------------'
  contents:
  - "---------------------------------------------------------------------\n     \
    \                        Figure 1\n   The server and client certificates contain\
    \ KEA public keys.  The\n   client and server use KEA to generate a shared SKIPJACK\
    \ symmetric\n   key, called the TEK.  The client uses the random number generator\
    \ to\n   create a second SKIPJACK key, called the MEK.  The MEK is wrapped in\n\
    \   the TEK for transfer to the server.  An initialization vector (IV)\n   associated\
    \ with the MEK is generated by the client and transferred to\n   the server. \
    \ A list of security labels that the client wants to use\n   for this FTP session\
    \ may be transferred to the server encrypted in\n   the MEK.  As shown in Figure\
    \ 2, the security label data is formatted\n   as a one octet type value, a four\
    \ octet label length, the security\n   label list, padding, followed by an eight\
    \ octet integrity check value\n   (ICV).  Figure 3 lists the label types.  If\
    \ the label type is absent\n   (value of zero length), then the label size must\
    \ be zero.\n   In order to ensure that the length of the plain text is a multiple\
    \ of\n   the cryptographic block size, padding shall be performed as follows.\n\
    \   The input to the SKIPJACK CBC encryption process shall be padded to a\n  \
    \ multiple of 8 octets.  Let n be the length in octets of the input.\n   Pad the\
    \ input by appending 8 - (n mod 8) octets to the end of the\n   message, each\
    \ having the value 8 - (n mod 8), the number of octets\n   being added.  In hexadecimal,\
    \ he possible pad strings are: 01, 0202,\n   030303, 04040404, 0505050505, 060606060606,\
    \ 07070707070707, and\n   0808080808080808.  All input is padded with 1 to 8 octets\
    \ to produce\n   a multiple of 8 octets in length.  This pad technique is used\n\
    \   whenever SKIPJACK CBC encryption is performed.\n   An ICV is calculated over\
    \ the plaintext security label and padding.\n   The ICV algorithm used is the\
    \ 32-bit one's complement addition of\n   each 32-bit block followed by 32 zero\
    \ bits.  This ICV technique is\n   used in conjunction with SKIPJACK CBC encryption\
    \ to provide data\n   integrity.\n   ---------------------------------------------------------------------\n\
    \                 Label Type                1 Octet\n                 Label Length\
    \              4 octets\n                 Label List                variable length\n\
    \                 Pad                       1 to 8 octets\n                 ICV\
    \                       8 octets\n   ---------------------------------------------------------------------\n\
    \                                Figure 2\n   ---------------------------------------------------------------------\n\
    \              Label Type   Label Syntax                Reference\n          \
    \    0            Absent                      Not applicable\n              1\
    \            MSP                         SDN.701[2]\n              2-255     \
    \   Reserved for Future Use     To Be Determined\n   ---------------------------------------------------------------------\n\
    \                                Figure 3\n   FTP command channel operations are\
    \ now confidentiality protected.  To\n   provide integrity, the command sequence\
    \ number, padding, and ICV are\n   appended to each command prior to encryption.\n\
    \   Sequence integrity is provided by using a 16-bit sequence number\n   which\
    \ is incremented for each command.  The sequence number is\n   initialized with\
    \ the least significant 16-bits of Ra.  The server\n   response will include the\
    \ same sequence number as the client command.\n   An ICV is calculated over the\
    \ individual commands (including the\n   carriage return and line feed required\
    \ to terminate commands), the\n   sequence number, and pad.\n   ---------------------------------------------------------------------\n\
    \     Client                             Server\n     ENC Base64(Encrypt(\"PBSZ\
    \ 65535\"\n         || SEQ || pad || ICV ))     -->\n                        \
    \                <-- 632  Base64(Encrypt(\"200\" ||\n                        \
    \                           SEQ || pad || ICV))\n     ENC Base64(Encrypt(\"USER\
    \ yee\"\n           || SEQ || pad || ICV))    -->\n                          \
    \              <-- 632  Base64(Encrypt(\"331\" ||\n                          \
    \                         SEQ || pad || ICV))\n     ENC Base64(Encrypt(\"PASS\n\
    \           fortezza\" || SEQ ||\n           pad || ICV))              -->\n \
    \                                       <-- 631  Base64(Sign(\"230\"))\n   ---------------------------------------------------------------------\n\
    \                                Figure 4\n   After decryption, both parties verifying\
    \ the integrity of the PBSZ\n   commands by checking for the expected sequence\
    \ number and correct\n   ICV.  The correct SKIPJACK key calculation, ICV checking,\
    \ and the\n   validation of the certificates containing the KEA public keys\n\
    \   provides mutual identification and authentication.\n   ---------------------------------------------------------------------\n\
    \     Client                          Server\n     ENC Base64(Encrypt(\"PROT P\"\
    \ ||\n             SEQ || pad || ICV))  -->\n                                \
    \     <-- 632 Base64(Encrypt(\"200\" || SEQ\n                                \
    \                    ||  pad || ICV))\n   ---------------------------------------------------------------------\n\
    \                                Figure 5\n   At this point, files may be sent\
    \ or received with encryption and\n   integrity services in use.  If encryption\
    \ is used, then the first\n   buffer will contain the token followed by enough\
    \ encrypted file\n   octets to completely fill the buffer (unless the file is\
    \ too short to\n   fill the buffer).  Subsequent buffers contain only encrypted\
    \ file\n   octets.  All buffers are completely full except the final buffer.\n\
    \   ---------------------------------------------------------------------\n  \
    \   Client                         Server\n     ENC Base64(Encrypt(\n        (\"\
    RETR foo.bar\") ||\n        SEQ || pad || ICV))    -->\n                     \
    \               <-- 632 Base64(Encrypt(\"150\" ||\n                          \
    \                      SEQ || pad || ICV))\n   ---------------------------------------------------------------------\n\
    \                                Figure 6\n   The next figure shows the header\
    \ information and the file data.\n   ---------------------------------------------------------------------\n\
    \                Plaintext Token IV    24 octets\n                WMEK       \
    \           12 octets\n                Hashvalue             20 octets\n     \
    \           IV                    24 octets\n                Label Type      \
    \      1 octets\n                Label Length          4 octets\n            \
    \    Label                 Label Length octets\n                Pad          \
    \         1 to 8 octets\n                ICV                   8 octets\n   ---------------------------------------------------------------------\n\
    \                                Figure 7\n"
- title: 2.1  Pre-encrypted File Support
  contents:
  - "2.1  Pre-encrypted File Support\n   In order to support both on-the-fly encryption\
    \ and pre-encrypted\n   files, a token is defined for carrying a file encryption\
    \ key (FEK).\n   To prevent truncation and ensure file integrity, the token also\n\
    \   includes a hash computed on the complete file.  The token also\n   contains\
    \ the security label associate with the file.  This FEK is\n   wrapped in the\
    \ session TEK.  The token is encrypted in the session\n   TEK using SKIPJACK CBC\
    \ mode.  The token contains a 12 octet wrapped\n   FEK, a 20 octet file hash,\
    \ a 24 octet file IV, a 1 octet label type,\n   a 4 octet label length, a variable\
    \ length label value, a one to 8\n   octet pad, and an 8 octet ICV.  The first\
    \ 24 octets of the token are\n   the plaintext IV used to encrypt the remainder\
    \ of the token.  The\n   token requires its own encryption IV because it is transmitted\
    \ across\n   the data channel, not the command channel, and ordering between the\n\
    \   channels cannot be guaranteed.  Storage of precomputed keys and\n   hashes\
    \ for files in the file system is a local implementation matter;\n   however,\
    \ it is suggested that if a file is pre-encrypted, then the\n   FEK be wrapped\
    \ in a local storage key.  When the file is needed, the\n   FEK is unwrapped using\
    \ the local storage key, and then rewrapped in\n   the session TEK.  Figure 8\
    \ shows the assembled token.\n   ---------------------------------------------------------------------\n\
    \               Plaintext Token IV            24 octets\n               Wrapped\
    \ FEK                   12 octets\n               Hashvalue                  \
    \   20 octets\n               IV                            24 octets\n      \
    \         Label Type                    1 octet\n               Label Length \
    \                 4 octets\n               Label                         Label\
    \ Length octets\n               Pad                           1 to 8 octets\n\
    \               ICV                           8 octets\n   ---------------------------------------------------------------------\n\
    \                                 Figure 8\n"
- title: 3.0  Table of Key Terminology
  contents:
  - "3.0  Table of Key Terminology\n   In order to clarify the usage of various keys\
    \ in this protocol,\n   Figure 9 summarizes key types and their usage:\n   ---------------------------------------------------------------------\n\
    \                Key Type         Usage\n                TEK              Encryption\
    \ of token at the beginning of\n                                 each file, also\
    \ wraps the MEK and the FEK\n                MEK              Encryption of command\
    \ channel\n                FEK              Encryption of the file itself (may\
    \ be\n                                 done out of scope of FTP)\n   ---------------------------------------------------------------------\n\
    \                                 Figure 9\n"
- title: 4.0  Security Considerations
  contents:
  - "4.0  Security Considerations\n   This entire memo is about security mechanisms.\
    \  For KEA to provide\n   the authentication and key management discussed, the\
    \ implementation\n   must protect the private key from disclosure.  For SKIPJACK\
    \ to\n   provide the confidentiality discussed, the implementation must\n   protect\
    \ the shared symmetric keys from disclosure.\n"
- title: 5.0  Acknowledgements
  contents:
  - "5.0  Acknowledgements\n   We would like to thank Todd Horting for insights gained\
    \ during\n   implementation of this specification.\n"
- title: 6.0  References
  contents:
  - "6.0  References\n   [1]  Horowitz, M. and S. Lunt,  \"FTP Security Extensions\"\
    , RFC 2228,\n        October 1997.\n   [2]  Message Security Protocol 4.0 (MSP),\
    \ Revision A. Secure Data\n        Network System (SDNS) Specification, SDN.701,\
    \ February 6, 1997.\n   [3]  Postel, J. and J. Reynolds, \"File Transfer Protocol\"\
    , STD 9, RFC\n        959, October 1985.\n"
- title: 7.0  Authors' Addresses
  contents:
  - "7.0  Authors' Addresses\n   Russell Housley\n   SPYRUS\n   381 Elden Street\n\
    \   Suite 1120\n   Herndon, VA 20170\n   USA\n   Phone: +1 703 707-0696\n   EMail:\
    \ housley@spyrus.com\n   Peter Yee\n   SPYRUS\n   5303 Betsy Ross Drive\n   Santa\
    \ Clara, CA 95054\n   USA\n   Phone: +1 408 327-1901\n   EMail: yee@spyrus.com\n"
- title: 8.0  Full Copyright Statement
  contents:
  - "8.0  Full Copyright Statement\n   Copyright (C) The Internet Society (2000).\
    \  All Rights Reserved.\n   This document and translations of it may be copied\
    \ and furnished to\n   others, and derivative works that comment on or otherwise\
    \ explain it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
