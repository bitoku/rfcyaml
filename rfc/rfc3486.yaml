- title: __initial_text__
  contents:
  - '           Compressing the Session Initiation Protocol (SIP)

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2003).  All Rights Reserved.\n"
- title: Abstract
  contents:
  - "Abstract\n   This document describes a mechanism to signal that compression is\n\
    \   desired for one or more Session Initiation Protocol (SIP) messages.\n   It\
    \ also states when it is appropriate to send compressed SIP messages\n   to a\
    \ SIP entity.\n"
- title: Table of Contents
  contents:
  - 'Table of Contents

    '
- title: 1.   Introduction
  contents:
  - "1.   Introduction\n   A SIP [1] client sending a request to a SIP server typically\
    \ performs\n   a DNS lookup for the domain name of the server.  When NAPTR [4]\
    \ or\n   SRV [5] records are available for the server, the client can specify\n\
    \   the type of service it wants.  The service in this context is the\n   transport\
    \ protocol to be used by SIP (e.g., UDP, TCP or SCTP).  A SIP\n   server that\
    \ supports, for instance, three different transport\n   protocols, will have three\
    \ different DNS entries.\n   Since it is foreseen that the number of transport\
    \ protocols supported\n   by a particular application layer protocol is not going\
    \ to grow\n   dramatically, having a DNS entry per transport seems like a scalable\n\
    \   enough solution.\n   However, sometimes it is necessary to include new layers\
    \ between the\n   transport protocol and the application layer protocol.  Examples\
    \ of\n   these layers are transport layer security and compression.  If DNS\n\
    \   was used to discover the availability of these layers for a\n   particular\
    \ server, the number of DNS entries needed for that server\n   would grow dramatically.\n\
    \   A server that, for example, supported TCP and SCTP as transports, TLS\n  \
    \ for transport security and SigComp for signaling compression, would\n   need\
    \ the 8 DNS entries listed below:\n      1.   TCP, no security, no compression\n\
    \      2.   TCP, no security, SigComp\n      3.   TCP, TLS, no compression\n \
    \     4.   TCP, TLS, SigComp\n      5.   SCTP, no security, no compression\n \
    \     6.   SCTP, no security, SigComp\n      7.   SCTP, TLS, no compression\n\
    \      8.   SCTP, TLS, SigComp\n   It is clear that this way of using DNS is not\
    \ scalable.  Therefore,\n   an application layer mechanism to express support\
    \ of signalling\n   compression is needed.\n      Note that for historical reasons\
    \ both HTTP and SIP use a different\n      port for TLS on top of TCP than for\
    \ TCP alone, although at\n      present, this solution is not considered scalable\
    \ any longer.\n   A SIP element that supports compression will need to be prepared\
    \ to\n   receive compressed and uncompressed messages on the same port.  It\n\
    \   will perform demultiplexing based on the cookie in the topmost bits\n   of\
    \ every compressed message.\n"
- title: 2.   Overview of operation
  contents:
  - "2.   Overview of operation\n   There are two types of SIP messages; SIP requests\
    \ and SIP responses.\n   Clients send SIP requests to the host part of a URI and\
    \ servers send\n   responses to the host in the sent-by parameter of the Via header\n\
    \   field.\n   We define two parameters, one for SIP URIs and the other for the\
    \ Via\n   header field.  The format of both parameters is the same, as shown in\n\
    \   the examples below:\n   sip:alice@atlanta.com;comp=sigcomp\n   Via: SIP/2.0/UDP\
    \ server1.foo.com:5060;branch=z9hG4bK87a7;comp=sigcomp\n   The presence of this\
    \ parameter (comp=sigcomp) in a URI indicates that\n   the request has to be compressed\
    \ using SigComp, as defined in [2].\n   The presence of comp=sigcomp in a Via\
    \ header field indicates that the\n   response has to be compressed using SigComp.\n\
    \   Therefore, the presence of comp=sigcomp indicates that the SIP entity\n  \
    \ identified by the URI or by the Via header field supports SigComp and\n   is\
    \ willing to receive compressed messages.  Having comp=sigcomp mean\n   \"willingness\"\
    \ as well as \"support\" allows the receiver of a SIP\n   message to influence\
    \ the decision of whether or not to use SigComp at\n   a given time.\n"
- title: 3.   SigComp implementations for SIP
  contents:
  - "3.   SigComp implementations for SIP\n   Every SIP implementation that supports\
    \ SigComp MUST implement the\n   procedures described in this document.\n"
- title: 4.   Sending a Request to a Server
  contents:
  - "4.   Sending a Request to a Server\n   A request is sent to the host part of\
    \ a URI.  This URI, referred to\n   as the next-hop URI, is the Request-URI of\
    \ the request or an entry in\n   the Route header field.\n   If the next-hop URI\
    \ contains the parameter comp=sigcomp, the client\n   SHOULD compress the request\
    \ using SigComp as defined in [2].\n   If the next-hop URI is a SIPS URI, the\
    \ request SHOULD be compressed\n   before it is passed to the TLS layer.\n   A\
    \ client MUST NOT send a compressed request to a server if it does\n   not know\
    \ whether or not the server supports SigComp.\n   Regardless of whether the request\
    \ is sent compressed or not, if a\n   client would like to receive subsequent\
    \ requests within the same\n   dialog in the UAS->UAC direction compressed, this\
    \ client SHOULD add\n   the parameter comp=sigcomp to the URI in the Contact header\
    \ field if\n   it is a user agent client.  If the client is a proxy, it SHOULD\
    \ add\n   the parameter comp=sigcomp to its URI in the Record-Route header\n \
    \  field.\n   If a user agent client sends a compressed request, it SHOULD add\
    \ the\n   parameter comp=sigcomp to the URI in the Contact header field.  If a\n\
    \   proxy that Record-Routes sends a compressed request, it SHOULD add\n   comp=sigcomp\
    \ to its URI in the Record-Route header field.\n   If a client sends a compressed\
    \ request, it SHOULD add the parameter\n   comp=sigcomp to the topmost entry of\
    \ the Via header field.\n   If a client does not know whether or not the server\
    \ supports SigComp,\n   but in case the server supported it, it would like to\
    \ receive\n   compressed responses, this client SHOULD add the parameter\n   comp=sigcomp\
    \ to the topmost entry of the Via header field.  The\n   request, however, as\
    \ stated above, will not be compressed.\n"
- title: 4.1   Obtaining a SIP or SIPS URI with comp=sigcomp
  contents:
  - "4.1   Obtaining a SIP or SIPS URI with comp=sigcomp\n   For requests within a\
    \ dialog, a next-hop URI with the comp=sigcomp\n   parameter is obtained from\
    \ a Record-Route header field when the\n   dialog is established.  A client sending\
    \ a request outside a dialog\n   can also obtain SIP URIs with comp=sigcomp in\
    \ a Contact header field\n   in a 3xx or 485 response to the request.\n   However,\
    \ clients establishing a session will not typically be willing\n   to wait until\
    \ the dialog is established in order to begin compressing\n   messages.  One of\
    \ the biggest gains that SigComp can bring to SIP is\n   the ability to compress\
    \ the initial INVITE of a dialog, when the user\n   is waiting for the session\
    \ to be established.  Therefore, clients\n   need a means to obtain a comp=sigcomp\
    \ URI from their outbound proxy\n   before the user decides to establish a session.\n\
    \   One solution to this problem is manual configuration.  However,\n   sometimes\
    \ it is necessary to have clients configured in an automatic\n   fashion.  Unfortunately,\
    \ current mechanisms for SIP client\n   configuration (e.g., using DHCP [6]) do\
    \ not allow to provide the\n   client with URI parameters.  In this case, the\
    \ client SHOULD send an\n   uncompressed OPTIONS request to its outbound proxy.\
    \  The outbound\n   proxy can provide an alternative SIP URI with the comp=sigcomp\n\
    \   parameter in a Contact header field in a 200 OK response to the\n   OPTIONS.\
    \  The client can use this URI for subsequent requests that\n   are sent through\
    \ the same outbound proxy using compression.\n   RFC 3261 [1] does not define\
    \ how a proxy should respond to an OPTIONS\n   request addressed to itself.  It\
    \ only describes how servers respond\n   to OPTIONS addressed to a particular\
    \ user.  Section 11.2 of RFC 3261\n   says:\n      Contact header fields MAY be\
    \ present in a 200 (OK) response and\n      have the same semantics as in a 3xx\
    \ response.  That is, they may\n      list a set of alternative names and methods\
    \ of reaching the user.\n   We extend this behavior to proxy servers responding\
    \ to OPTIONS\n   addressed to them.  They MAY list a set of alternative URIs to\n\
    \   contact the proxy.\n   Note that receiving incoming requests (even initial\
    \ INVITEs)\n   compressed is not a problem, since user agents can REGISTER a SIP\
    \ URI\n   with comp=sigcomp in their registrar.  All incoming requests for the\n\
    \   user will be sent to this SIP URI using compression.\n"
- title: 5.   Sending a Response to a Client
  contents:
  - "5.   Sending a Response to a Client\n   A response is sent to the host in the\
    \ sent-by parameter of the Via\n   header field.  If the topmost Via header field\
    \ contains the parameter\n   comp=sigcomp, the response SHOULD be compressed.\
    \  Otherwise, the\n   response MUST NOT be compressed.\n   In order to avoid asymmetric\
    \ compression (i.e., two SIP entities\n   exchanging compressed requests in one\
    \ direction and uncompressed\n   requests in the other direction) proxies need\
    \ to rewrite their\n   Record-Route entries in the responses.  A proxy performing\
    \ Record-\n   Route inspects the Record-Route header field in the response and\
    \ the\n   Contact header field in the request that triggered this response (see\n\
    \   example in Section 9).  It looks for the URI of the next upstream\n   (closer\
    \ to the user agent client) hop in the route set.  If this URI\n   contains the\
    \ parameter comp=sigcomp, the proxy SHOULD add\n   comp=sigcomp to its entry in\
    \ the Record-Route header field.  If this\n   URI does not contain the parameter\
    \ comp=sigcomp, the proxy SHOULD\n   remove comp=sigcomp (if it is present) from\
    \ its entry in the Record-\n   Route header field.\n   The same way, a user agent\
    \ server SHOULD add comp=sigcomp to the\n   Contact header field of the response\
    \ if the URI of the next upstream\n   hop in the route set contained the parameter\
    \ comp=sigcomp.\n"
- title: 6.   Double Record-Routing
  contents:
  - "6.   Double Record-Routing\n   Although proxies usually add zero or one Record-Route\
    \ entries to a\n   particular request, some proxies add two of them to avoid Record-\n\
    \   Route rewriting.  A typical example of double Record-Routing is a SIP\n  \
    \ proxy that acts as a firewall between two networks.  Depending on\n   which\
    \ network a request comes from, it will be received on a\n   different interface\
    \ by the proxy.  The proxy adds one Record-Route\n   entry for one interface and\
    \ a second one for the other interface.\n   This way, the proxy does not need\
    \ to rewrite the Record-Route header\n   field on the response.\n   Proxies that\
    \ receive compressed messages from one side of the dialog\n   (e.g., upstream)\
    \ and uncompressed messages from the other side (e.g.,\n   downstream) MAY use\
    \ the mechanism described above.\n   If a proxy detects that the next-hop proxy\
    \ for a request is the proxy\n   itself and that the request will not be sent\
    \ through the network, the\n   proxy MAY choose not to compress the request even\
    \ if the URI contains\n   the comp=sigcomp parameter.\n"
- title: 7.   Error Situations
  contents:
  - "7.   Error Situations\n   If a compressed SIP request arrives to a SIP server\
    \ that does not\n   understand SigComp, the server will not have any means to\
    \ indicate\n   the error to the client.  The message will be impossible to parse,\n\
    \   and there will be no Via header field indicating an address to send\n   an\
    \ error response.\n   If a SIP client sends a compressed request and the client\
    \ transaction\n   times out without having received any response, the client SHOULD\n\
    \   retry the same request without using compression.  If the compressed\n   request\
    \ was sent over a TCP connection, the client SHOULD close that\n   connection\
    \ and open a new one to send the uncompressed request.\n   Otherwise the server\
    \ would not be able to detect the beginning of the\n   new message.\n"
- title: 8.   Augmented BNF
  contents:
  - "8.   Augmented BNF\n   This section provides the augmented Backus-Naur Form (BNF)\
    \ of both\n   parameters described above.\n   The compression URI parameter is\
    \ a \"uri-parameter\", as defined by the\n   SIP ABNF (Section 25.1 of [1]):\n\
    \      compression-param  =  \"comp=\" (\"sigcomp\" / other-compression)\n   \
    \   other-compression  =  token\n   The Via compression parameter is a \"via-extension\"\
    , as defined by the\n   SIP ABNF (Section 25.1 of [1]):\n      via-compression\
    \    =  \"comp\" EQUAL (\"sigcomp\" / other-compression)\n      other-compression\
    \  =  token\n"
- title: 9.   Example
  contents:
  - "9.   Example\n   The following example illustrates the use of the parameters\
    \ defined\n   above.  The call flow of Figure 1 shows an INVITE-200 OK-ACK\n \
    \  handshake between a UAC and a UAS through two proxies.  Proxy P1 does\n   not\
    \ Record-Route but proxy P2 does.  Both proxies support\n   compression, but they\
    \ do not use it by default.\n   UAC            P1            P2           UAS\n\
    \    |(1)INVITE(c) |             |             |\n    |------------>| (2) INVITE\
    \  |             |\n    |             |------------>| (3) INVITE  |\n    |   \
    \          |             |------------>|\n    |             |             | (4)\
    \ 200 OK  |\n    |             | (5) 200 OK  |<------------|\n    |(6)200 OK(c)\
    \ |<------------|             |\n    |<------------|             |           \
    \  |\n    |             |  (7)ACK(c)  |             |\n    |-------------------------->|\
    \   (8) ACK   |\n    |             |             |------------>|\n    |      \
    \       |             |             |\n    |             |             |     \
    \        |\n   Figure 1: INVITE transaction through two proxies\n   Messages (1),\
    \ (6) and (7) are compressed (c).\n   We provide a partial description of the\
    \ messages involved in this\n   call flow below.  Only some parts of each message\
    \ are shown, namely\n   the Method name, the Request-URI and the Via, Route, Record-Route\
    \ and\n   Contact header fields.  We have not used a correct format for these\n\
    \   header fields.  We have rather focus on the contents of the header\n   fields\
    \ and on the presence (or absence) of the \"comp=sigcomp\"\n   parameter.\n  \
    \    (1) INVITE UAS\n          Via: UAC;comp=sigcomp\n          Route: P1;comp=sigcomp\n\
    \          Contact: UAC;comp=sigcomp\n   P1 is the outbound proxy of the UAC,\
    \ and it supports SigComp.  The\n   UAC is configured to send compressed traffic\
    \ to P1, and therefore, it\n   compresses the INVITE (1).  In addition, the UAC\
    \ wants to receive\n   future requests and responses for this dialog compressed.\
    \  Therefore,\n   it adds the comp=Sigcomp parameter to the Via and to the Contact\n\
    \   header fields.\n      (2) INVITE UAS\n          Via: P1\n          Via: UAC;comp=sigcomp\n\
    \          Route: P2\n          Contact: UAC;comp=sigcomp\n   P1 forwards the\
    \ INVITE (2) to P2.  P1 does not use compression by\n   default, so it sends the\
    \ INVITE uncompressed to P2.\n      (3) INVITE UAS\n          Via: P2\n      \
    \    Via: P1\n          Via: UAC;comp=sigcomp\n          Record-Route: P2\n  \
    \        Contact: UAC;comp=sigcomp\n   P2 forwards the INVITE (3) to the UAS.\
    \  P2 supports compression, but\n   it does not use it by default.  Therefore,\
    \ it sends the INVITE\n   uncompressed.  P2 wishes to remain in the signalling\
    \ path and\n   therefore it Record-Routes.\n      (4) 200 OK\n          Via: P2\n\
    \          Via: P1\n          Via: UAC;comp=sigcomp\n          Record-Route: P2\n\
    \          Contact: UAS\n   The UAS generates a 200 OK response and sends it to\
    \ the host in the\n   topmost Via, which is P2.\n      (5) 200 OK\n          Via:\
    \ P1\n          Via: UAC;comp=sigcomp\n          Record-Route: P2;comp=sigcomp\n\
    \          Contact: UAS\n   P2 receives the 200 OK response.  P2 Record-Routed,\
    \ so it inspects\n   the Route set for this dialog.  For requests from the UAS\
    \ towards the\n   UAC (the opposite direction than the first INVITE), the next\
    \ hop will\n   be the Contact header field of the INVITE, because P1 did not\n\
    \   Record-Route.  That Contact identified the UAC:\n      Contact: UAC;comp=sigcomp\n\
    \   Since the UAC wants to receive compressed requests (Contact of the\n   INVITE),\
    \ P2 assumes that the UAC would also like to send compressed\n   requests (Record-Route\
    \ of the 200 OK).  Therefore, P2 modifies its\n   entry in the Record-Route header\
    \ field of the 200 OK (5).  In the\n   INVITE (3), P2 did not used the comp=sigcomp\
    \ parameter.  Now it adds\n   it in the 200 OK (5).  This will allow the UAC sending\
    \ compressed\n   requests within this dialog.\n      (6) 200 OK\n          Via:\
    \ UAC;comp=sigcomp\n          Record-Route: P2;comp=sigcomp\n          Contact:\
    \ UAS\n   P1 sends the 200 OK (6) compressed to the UAC because the Via header\n\
    \   field contained the comp=sigcomp parameter.\n      (7) ACK UAS\n         \
    \ Via: UAC;comp=sigcomp\n          Route: P2;comp=sigcomp\n          Contact:\
    \ UAC;comp=sigcomp\n   The UAC sends the ACK (7) compressed directly to P2 (P1\
    \ did not\n   Record-Route).\n      (8) ACK UAS\n          Via: P2\n         \
    \ Via: UAC;comp=sigcomp\n          Contact: UAC;comp=sigcomp\n   P2 sends the\
    \ ACK (8) uncompressed to the UAS.\n"
- title: 10.   Security Considerations
  contents:
  - "10.   Security Considerations\n   A SIP entity receiving a compressed message\
    \ has to decompress it and\n   to parse it.  This requires slightly more processing\
    \ power than only\n   parsing a message.  This implies that a denial of service\
    \ attack\n   using compressed messages would be slightly worse than an attack\
    \ with\n   uncompressed messages.\n   An attacker inserting the parameter comp=sigcomp\
    \ in a SIP message\n   could make a SIP entity send compressed messages to another\
    \ SIP\n   entity that did not support SigComp.  Appropriate integrity\n   mechanisms\
    \ should be used to avoid this attack.\n"
- title: 11.   IANA Considerations
  contents:
  - "11.   IANA Considerations\n   This document defines the \"comp\" uri-parameter\
    \ and via-extension.\n   New values for \"comp\" are registered by the IANA at\n\
    \   http://www.iana.org/assignments/sip-parameters when new signalling\n   compression\
    \ schemes are published in standards track RFCs.  The IANA\n   Considerations\
    \ section of the RFC MUST include the following\n   information, which appears\
    \ in the IANA registry along with the RFC\n   number of the publication.\n   \
    \   o  Name of the compression scheme.\n      o  Token value to be used. The token\
    \ MAY be of any length, but\n         SHOULD be no more than ten characters long.\n\
    \   The only entry in the registry for the time being is:\n   Compression scheme\
    \      Token      Reference\n   ---------------------   ---------  ---------\n\
    \   Signaling Compression   sigcomp    RFC 3486\n"
- title: 12.   Acknowledgements
  contents:
  - "12.   Acknowledgements\n   Allison Mankin, Jonathan Rosenberg and Miguel Angel\
    \ Garcia-Martin\n   provided valuable comments on this memo.\n"
- title: 13.   Normative References
  contents:
  - "13.   Normative References\n   [1]  Rosenberg, J., Schulzrinne, H., Camarillo,\
    \ G., Johnston, A.,\n        Peterson, J., Sparks, R., Handley, M. and E. Schooler,\
    \ \"SIP:\n        Session Initiation Protocol\", RFC 3261, June 2002.\n   [2]\
    \  Price, R., Bormann, C., Christoffersson, J., Hannu, H., Liu, Z.\n        and\
    \ J. Rosenberg, \"Signaling Compression (SigComp)\", RFC 3320,\n        January\
    \ 2003.\n   [3]  Bradner, S., \"Key words for use in RFCs to indicate requirement\n\
    \        levels\", BCP 14, RFC 2119, March 1997.\n"
- title: 14.   Informative References
  contents:
  - "14.   Informative References\n   [4]  Mealling, M., \"Dynamic Delegation Discovery\
    \ System (DDDS) Part\n        Three: The Domain Name System (DNS) Database\",\
    \ RFC 3403, October\n        2002.\n   [5]  Gulbrandsen, A., Vixie, P. and L.\
    \ Esibov, \"A DNS RR for\n        specifying the location of services (DNS SRV)\"\
    , RFC 2782,\n        February 2000.\n   [6]  Schulzrinne, H., \"DHCP option for\
    \ SIP servers\", Work in\n        Progress.\n"
- title: 15.   Author's Address
  contents:
  - "15.   Author's Address\n   Gonzalo Camarillo\n   Ericsson\n   Advanced Signalling\
    \ Research Lab.\n   FIN-02420 Jorvas\n   Finland\n   EMail:  Gonzalo.Camarillo@ericsson.com\n"
- title: 16.  Full Copyright Statement
  contents:
  - "16.  Full Copyright Statement\n   Copyright (C) The Internet Society (2003).\
    \  All Rights Reserved.\n   This document and translations of it may be copied\
    \ and furnished to\n   others, and derivative works that comment on or otherwise\
    \ explain it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
