- title: __initial_text__
  contents:
  - '                        Multicast Ping Protocol

    '
- title: Abstract
  contents:
  - "Abstract\n   The Multicast Ping Protocol specified in this document allows for\n\
    \   checking whether an endpoint can receive multicast -- both Source-\n   Specific\
    \ Multicast (SSM) and Any-Source Multicast (ASM).  It can also\n   be used to\
    \ obtain additional multicast-related information, such as\n   multicast tree\
    \ setup time.  This protocol is based on an\n   implementation of tools called\
    \ \"ssmping\" and \"asmping\".\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This\
    \ document is a product of the Internet Engineering Task Force\n   (IETF).  It\
    \ represents the consensus of the IETF community.  It has\n   received public\
    \ review and has been approved for publication by the\n   Internet Engineering\
    \ Steering Group (IESG).  Further information on\n   Internet Standards is available\
    \ in Section 2 of RFC 5741.\n   Information about the current status of this document,\
    \ any errata,\n   and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc6450.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2011 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................2\n\
    \      1.1. Requirements Language ......................................2\n  \
    \ 2. Architecture ....................................................3\n   3.\
    \ Protocol Specification ..........................................6\n      3.1.\
    \ Option Format ..............................................7\n      3.2. Defined\
    \ Options ............................................7\n      3.3. Packet Format\
    \ .............................................13\n      3.4. Message Types and\
    \ Options .................................13\n      3.5. Rate Limiting .............................................15\n\
    \           3.5.1. Message Rate Variables .............................16\n  \
    \ 4. Client Behaviour ...............................................16\n   5.\
    \ Server Behaviour ...............................................18\n   6. Recommendations\
    \ for Implementers ...............................19\n   7. IANA Considerations\
    \ ............................................20\n   8. Security Considerations\
    \ ........................................21\n   9. Acknowledgments ................................................22\n\
    \   10. References ....................................................23\n  \
    \    10.1. Normative References .....................................23\n    \
    \  10.2. Informative References ...................................23\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   The Multicast Ping Protocol specified in this document allows\
    \ for\n   checking multicast connectivity.  In addition to checking reception\n\
    \   of multicast (SSM or ASM), the protocol can provide related\n   information,\
    \ such as multicast tree setup time, the number of hops\n   the packets have traveled,\
    \ and packet delay and loss.  This\n   functionality resembles, in part, the ICMP\
    \ Echo Request/Reply\n   mechanism [RFC0792], but uses UDP [RFC0768] and requires\
    \ that both a\n   client and a server implement this protocol.  Intermediate routers\n\
    \   are not required to support this protocol.  They forward protocol\n   messages\
    \ and data traffic as usual.\n   This protocol is based on the current implementation\
    \ of the ssmping\n   and asmping tools [IMPL], which are widely used by the Internet\n\
    \   community to conduct multicast connectivity tests.\n"
- title: 1.1.  Requirements Language
  contents:
  - "1.1.  Requirements Language\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\"\
    , \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"\
    MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described\
    \ in RFC 2119 [RFC2119].\n"
- title: 2.  Architecture
  contents:
  - "2.  Architecture\n   Before describing the protocol in detail, we provide a brief\
    \ overview\n   of how the protocol may be used and what information it may provide.\n\
    \   The protocol is used between clients and servers to check multicast\n   connectivity.\
    \  Servers are multicast sources, and clients are\n   multicast receivers.  A\
    \ server may be configured with a set of ranges\n   of multicast addresses that\
    \ can be used for testing, or it may use\n   some implementation defaults.  Depending\
    \ on the server configuration\n   or the implementation, it may control which\
    \ clients (which unicast\n   addresses) are allowed to use different group ranges,\
    \ and also\n   whether clients can select a group address, or if the group address\n\
    \   is selected by the server.  Whether several clients are allowed to\n   simultaneously\
    \ use the same multicast address also depends on\n   configuration and/or implementation.\n\
    \   In addition to the above state, a server normally has runtime soft\n   state.\
    \  The server must generally perform rate limiting to restrict\n   the number\
    \ of client requests it handles.  This rate limiting is\n   per-client IP address.\
    \  This state need usually only be maintained\n   for a few seconds, depending\
    \ on the limit used.  If the server\n   provides unique multicast addresses to\
    \ clients, it must also have\n   soft state for tracking which multicast addresses\
    \ are used by which\n   client IP address.  This state should expire if the server\
    \ has not\n   received requests within a few minutes.  The exact timeout should\n\
    \   ideally be configurable to cope with different environments.  If a\n   client\
    \ is expected to perform multicast ping checks continuously for\n   a long period\
    \ of time, and to cope with requests not reaching the\n   client for several minutes,\
    \ then this timeout needs to be extended.\n   In order to verify the client IP\
    \ address, the server should perform a\n   return routability check by giving\
    \ the client a non-predictable\n   session ID.  This would then also be part of\
    \ the server soft state\n   for that client.\n   Before it can perform a multicast\
    \ ping test, a client must know the\n   unicast address of a server.  In addition,\
    \ it may be configured with\n   a multicast address or range to use.  In that\
    \ case, the client will\n   tell the server which group or range it wishes to\
    \ use.  If not, the\n   server is left to decide the group.  Normally, a client\
    \ sends\n   Default-Client-Request-Rate requests per second.  It may, however,\
    \ be\n   configured to use another rate.  See the definition of\n   Default-Client-Request-Rate\
    \ in Section 3.5.1.  Note that the value\n   can be less than 1.\n   At runtime,\
    \ a client generates a client ID that is unique for the\n   ping test.  This ID\
    \ is included in all messages sent by the client.\n   Further, if not supplied\
    \ with a specific group address, the client\n   will receive from the server a\
    \ group address that is used for the\n   ping requests.  It may also receive a\
    \ Session ID from the server.\n   The client ID, group address, and Session ID\
    \ (if received) will then\n   be fixed for all ping requests in this session.\
    \  When a client\n   receives replies from a server, it will verify the client\
    \ ID in the\n   reply, and ignore it if not matching what it used in the requests.\n\
    \   For each reply, it may print or record information like round trip\n   time,\
    \ number of hops, etc.  The client may, once a ping session is\n   ended, calculate\
    \ and print or record statistics based on the entire\n   ping session.\n   The\
    \ typical protocol usage is as follows:\n      A server runs continuously to serve\
    \ requests from clients.  A\n      client has somehow learned the unicast address\
    \ of the server and\n      tests the multicast reception from the server.\n  \
    \    The client application will then send a unicast message to the\n      server,\
    \ asking for a group to use.  Optionally, a user may request\n      a specific\
    \ group or scope, in which case the client will ask for a\n      group matching\
    \ the user's request.  The server will respond with a\n      group to use, or\
    \ an error if no group is available.\n      Next, for ASM, the client joins an\
    \ ASM group G, while for SSM it\n      joins a channel (S,G), where G is the multicast\
    \ group address\n      specified by the server, and S is the unicast address used\
    \ to\n      reach the server.\n      After joining the group/channel, the client\
    \ unicasts multicast\n      ping requests to the server.  The requests are sent\
    \ using UDP with\n      the destination port set to the standardised multicast\
    \ ping port\n      (9903).  The requests are sent periodically to the server.\
    \  The\n      rate is by default Default-Client-Request-Rate (Section 3.5.1)\n\
    \      requests per second, but the client may be configured to use\n      another\
    \ rate.  These requests contain a sequence number and,\n      typically, a timestamp.\
    \  The requests are echoed by the server,\n      which may add a few options.\n\
    \      For each request, the server sends two replies.  One reply is\n      unicast\
    \ to the source IP address and source UDP port of the\n      requesting client.\
    \  The other reply is multicast to the requested\n      multicast group G and\
    \ the source UDP port of the requesting\n      client.\n      Both replies are\
    \ sent from the same port on which the request was\n      received.  The server\
    \ should specify the TTL (IPv4 time-to-live or\n      IPv6 hop-count) used for\
    \ both the unicast and multicast messages\n      (TTL of at least 64 is recommended)\
    \ by including a TTL option.\n      This allows the client to compute the number\
    \ of hops.  The client\n      should leave the group/channel when it has finished\
    \ its\n      measurements.\n   By use of this protocol, a client (or a user of\
    \ the client) can\n   obtain information about several multicast delivery characteristics.\n\
    \   First, by receiving unicast replies, the client can verify that the\n   server\
    \ is receiving the unicast requests, and is operational and\n   responding.  Hence,\
    \ provided that the client receives unicast\n   replies, a failure to receive\
    \ multicast indicates either a multicast\n   problem or a multicast administrative\
    \ restriction.  If it does\n   receive multicast, it knows not only that it can\
    \ receive multicast\n   traffic but that it may also estimate the amount of time\
    \ it took to\n   establish the multicast tree (at least if it is in the range\
    \ of\n   seconds), whether there are packet drops, and the length and\n   variation\
    \ of round trip times (RTTs).\n   For unicast, the RTT is the time from when the\
    \ unicast request is\n   sent to the time when the reply is received.  The measured\
    \ multicast\n   RTT also references the client's unicast request.  By specifying\
    \ the\n   TTL of the replies when they are originated, the client can also\n \
    \  determine the number of router hops it is from the source.  Since\n   similar\
    \ information is obtained in the unicast replies, the host may\n   compare its\
    \ multicast and unicast results and is able to check for\n   differences, such\
    \ as the number of hops, and RTT.\n   The number of multicast hops and changes\
    \ in the number of hops over\n   time may reveal details about the multicast tree\
    \ and multicast tree\n   changes.  Provided that the server sends the unicast\
    \ and multicast\n   replies nearly simultaneously, the client may also be able\
    \ to measure\n   the difference in one-way delay for unicast and multicast on\
    \ the path\n   from server to client.\n   Servers may optionally specify a timestamp.\
    \  This may be useful,\n   since the unicast and multicast replies cannot be sent\
    \ simultaneously\n   (the delay is dependent on the host's operating system and\
    \ load).\n"
- title: 3.  Protocol Specification
  contents:
  - "3.  Protocol Specification\n   There are four different message types:\n   o\
    \  Echo Request and Echo Reply messages, which are used for the\n      actual\
    \ measurements.\n   o  An Init message, which SHOULD be used to initialise a ping\
    \ session\n      and negotiate which group to use.\n   o  A Server Response message,\
    \ which is mainly used in response to the\n      Init message.\n   The messages\
    \ MUST always be in network byte order.  UDP checksums\n   MUST always be used.\n\
    \   The messages share a common format: one octet specifying the message\n   type,\
    \ followed by a number of options in TLV (Type, Length, and\n   Value) format.\
    \  This makes the protocol easily extendible.\n   Message types in the range 0-253\
    \ are reserved and available for\n   allocation in an IANA registry.  Message\
    \ types 254 and 255 are freely\n   available for experimental use.  See Section\
    \ 7.\n   The Init message generally contains some prefix options asking the\n\
    \   server for a group from one of the specified prefixes.  The server\n   responds\
    \ with a Server Response message that contains the group\n   address to use, or\
    \ possibly prefix options describing what multicast\n   groups the server may\
    \ be able to provide.\n   For an Echo Request, the client includes a number of\
    \ options, and a\n   server MAY simply echo the contents (only changing the message\
    \ type)\n   without inspecting the options if it does not support any options.\n\
    \   This might be true for a simple Multicast Ping Protocol server, but\n   it\
    \ severely limits what information a client can obtain and hence\n   makes the\
    \ protocol less useful.  However, the server SHOULD add a TTL\n   option (allowing\
    \ the client to determine the number of router hops a\n   reply has traversed),\
    \ and there are other options that a server\n   implementation MAY support; e.g.,\
    \ the client may ask for certain\n   information or a specific behaviour from\
    \ the server.  The Echo Reply\n   messages (one unicast and one multicast) MUST\
    \ first contain the exact\n   options from the request (in the same order), and\
    \ then, immediately\n   following, any options appended by the server.  A server\
    \ MUST NOT\n   process unknown options, but they MUST still be included in the\
    \ Echo\n   Reply.  A client MUST ignore any unknown options.\n   The size of the\
    \ protocol messages is generally smaller than the Path\n   MTU, and fragmentation\
    \ is not a concern.  There may, however, be\n   cases where the Path MTU is really\
    \ small, or where a client sends\n   large requests in order to verify that it\
    \ can receive fragmented\n   multicast datagrams.  This document does not specify\
    \ whether Path MTU\n   Discovery should be performed, etc.  A possible extension\
    \ could be an\n   option where a client requests Path MTU Discovery and receives\
    \ the\n   current Path MTU from the server.\n   This document defines a number\
    \ of different options.  Some options do\n   not require processing by servers\
    \ and are simply returned unmodified\n   in the reply.  There are, however, other\
    \ client options that the\n   server may care about, as well as server options\
    \ that may be\n   requested by a client.  Unless otherwise specified, an option\
    \ MUST\n   NOT be used multiple times in the same message.\n"
- title: 3.1.  Option Format
  contents:
  - "3.1.  Option Format\n   All options are TLVs formatted as below.\n       0  \
    \                 1                   2                   3\n       0 1 2 3 4\
    \ 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |             Type              |           Length              |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \                             Value                             |\n      |   \
    \                            .                               |\n      |      \
    \                         .                               |\n      |         \
    \                      .                               |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   Type (2 octets) specifies the option.\n   Length (2 octets) specifies the\
    \ length of the value field.  Depending\n   on the option type, it can be from\
    \ 0 to 65535.\n   Value must always be of the specified length.  See the respective\n\
    \   option definitions for possible values.  If the length is 0, the\n   value\
    \ field is not included.\n"
- title: 3.2.  Defined Options
  contents:
  - "3.2.  Defined Options\n   This document defines the following options: Version\
    \ (0), Client ID\n   (1), Sequence Number (2), Client Timestamp (3), Multicast\
    \ Group (4),\n   Option Request (5), Server Information (6), TTL (9), Multicast\
    \ Prefix\n   (10), Session ID (11), and Server Timestamp (12).  Option values\
    \ 7\n   and 8 are deprecated and must not be allocated by any future\n   document.\
    \  The options are defined below.\n   Option types in the range 0-65531 are reserved\
    \ and available for\n   allocation in an IANA registry.  Option types in the range\n\
    \   65532-65535 are not registered and are freely available for\n   experimental\
    \ use.  See Section 7.\n      Version, type 0\n         Length MUST be 1.  This\
    \ option MUST always be included in all\n         messages, and for the current\
    \ specified protocol this value\n         MUST be set to 2 (in decimal).  Note\
    \ that there are\n         implementations of older revisions of this protocol\
    \ that only\n         partly follow this specification.  They can be regarded\
    \ as\n         version 1 and do not use this option.  If a server receives a\n\
    \         message with a version other than 2 (or missing), the server\n     \
    \    SHOULD (unless it supports the particular version) send a\n         Server\
    \ Response message back with version set to 2.  This tells\n         the client\
    \ that the server expects version 2 messages.  Client\n         ID and Sequence\
    \ Number options MUST be echoed if present, so\n         that a client can be\
    \ certain it is a response to one of its\n         messages, and to exactly which\
    \ message.  The server SHOULD NOT\n         include any other options.  A client\
    \ receiving a response with\n         a version other than 2 MUST stop sending\
    \ requests to the server\n         (unless it supports the particular version).\n\
    \      Client ID, type 1\n         Length MUST be non-zero.  A client SHOULD always\
    \ include this\n         option in all messages (both Init and Echo Request).\
    \  The\n         client may use any value it likes to detect whether a reply is\n\
    \         a reply to its Init/Echo Request or not.  A server should treat\n  \
    \       this as opaque data, and MUST echo this option back in the\n         reply\
    \ if present (both Server Response and Echo Reply).  The\n         value might\
    \ be a pseudo-random byte string that is likely to be\n         unique, possibly\
    \ combined with the client IP address.\n         Predictability is not a big concern\
    \ here.  This is used by the\n         client to ensure that server messages are\
    \ in response to its\n         requests.  In some cases, a client may receive\
    \ multicast\n         responses to queries from other clients.  It is left to\
    \ the\n         client implementer how to use this option.\n      Sequence Number,\
    \ type 2\n         Length MUST be 4.  A client MUST always include this in Echo\n\
    \         Request messages and MUST NOT include it in Init messages.  A\n    \
    \     server replying to an Echo Request message MUST copy it into\n         the\
    \ Echo Reply (or Server Response message on error).  The\n         sequence number\
    \ is a 32-bit integer.  Values typically start at\n         1 and increase by\
    \ one for each Echo Request in a sequence.\n      Client Timestamp, type 3\n \
    \        Length MUST be 8.  A client SHOULD include this in Echo Request\n   \
    \      messages and MUST NOT include it in Init messages.  A server\n        \
    \ replying to an Echo Request message MUST copy it into the Echo\n         Reply.\
    \  The timestamp specifies the time when the Echo Request\n         message is\
    \ sent.  The first 4 bytes specify the number of\n         seconds since the Epoch\
    \ (0000 UTC Jan 1, 1970).  The next\n         4 bytes specify the number of microseconds\
    \ since the second\n         specified in the first 4 bytes.  This option would\
    \ typically be\n         used by a client to compute round trip times.\n     \
    \    Note that while this protocol uses the above 32-bit format, it\n        \
    \ would have been better to use another format, such as the one\n         defined\
    \ in NTPv4 [RFC5905].  This should be considered for\n         future extensions\
    \ of the protocol.\n      Multicast Group, type 4\n         Length MUST be greater\
    \ than 2.  It MAY be used in Server\n         Response messages to tell the client\
    \ what group to use in\n         subsequent Echo Request messages.  It MUST be\
    \ used in Echo\n         Request messages to tell the server what group address\
    \ to\n         respond to (this group would typically be previously obtained\n\
    \         in a Server Response message).  It MUST be used in Echo Reply\n    \
    \     messages (copied from the Echo Request message).  It MUST NOT\n        \
    \ be used in Init messages.  The format of the option value is as\n         below.\n\
    \        0                   1                   2                   3\n     \
    \   0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \       |        Address Family         |  Multicast group address...   |\n  \
    \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+  ....                         |\n    \
    \     The address family is a value 0-65535 as assigned by IANA for\n        \
    \ Internet address families [ADDRFAMILY].  This is followed by\n         the group\
    \ address.  Length of the option value will be 6 for\n         IPv4, and 18 for\
    \ IPv6.\n      Option Request, type 5\n         Length MUST be greater than 1.\
    \  This option MAY be used in\n         client messages (Init and Echo Request\
    \ messages).  A server\n         MUST NOT send this option, except that if it\
    \ is present in an\n         Echo Request message, the server MUST echo it in\
    \ replies (Echo\n         Reply message) to the Echo Request.  This option contains\
    \ a\n         list of option types for options that the client is requesting\n\
    \         from the server.  Support for this option is OPTIONAL for both\n   \
    \      clients and servers.  The length of this option will be a\n         non-zero\
    \ even number, since it contains one or more option\n         types that are two\
    \ octets each.  The format of the option value\n         is as below.\n      \
    \  0                   1                   2                   3\n        0 1\
    \ 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \       |          Option Type          |          Option Type          |\n  \
    \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    \
    \   |                             .....                             |\n      \
    \   This option might be used by the client to ask the server to\n         include\
    \ options like Server Timestamp or Server Information.  A\n         client MAY\
    \ request Server Information in Init messages; it MUST\n         NOT request it\
    \ in other messages.  A client MAY request a\n         Server Timestamp in Echo\
    \ Request messages; it MUST NOT request\n         it in other messages.  Subject\
    \ to enforcing the above\n         restrictions, a server supporting this option\
    \ SHOULD include\n         the requested options in responses (Echo Reply messages)\
    \ to the\n         Echo Request containing the Option Request option.  The server\n\
    \         may, according to implementation or local configuration, not\n     \
    \    necessarily include all the requested options, or possibly\n         none.\
    \  Any options included are appended to the echoed options,\n         similar\
    \ to other options included by the server.\n      Server Information, type 6\n\
    \         Length MUST be non-zero.  It MAY be used in Server Response\n      \
    \   messages and MUST NOT be used in other messages.  Support for\n         this\
    \ option is OPTIONAL.  A server supporting this option\n         SHOULD add it\
    \ in Server Response messages if and only if\n         requested by the client.\
    \  The value is a UTF-8 [RFC3629] string\n         that might contain vendor and\
    \ version information for the\n         server implementation.  It may also contain\
    \ information on\n         which options the server supports.  An interactive\
    \ client MAY\n         support this option, and SHOULD then allow a user to request\n\
    \         this string and display it.  Although support for this is\n        \
    \ OPTIONAL, we say that a server SHOULD return it if requested,\n         since\
    \ this may be helpful to a user running the client.  It is,\n         however,\
    \ purely informational; it is not needed for the\n         protocol to function.\n\
    \      Deprecated, type 7\n         This option code value was used by implementations\
    \ of version 1\n         of this protocol, and is not used in this version.  Servers\n\
    \         MUST treat it as an unknown option (not process it if received,\n  \
    \       but if received in an Echo Request message, it MUST be echoed\n      \
    \   in the Echo Reply message).\n      Deprecated, type 8\n         This option\
    \ code value was used by implementations of version 1\n         of this protocol,\
    \ and is not used in this version.  Servers\n         MUST treat it as an unknown\
    \ option (not process it if received,\n         but if received in an Echo Request\
    \ message, it MUST be echoed\n         in the Echo Reply message).\n      TTL,\
    \ type 9\n         Length MUST be 1.  This option contains a single octet\n  \
    \       specifying the TTL of an Echo Reply message.  Every time a\n         server\
    \ sends a unicast or multicast Echo Reply message, it\n         SHOULD include\
    \ this option specifying the TTL.  This is used by\n         clients to determine\
    \ the number of hops the messages have\n         traversed.  It MUST NOT be used\
    \ in other messages.  A server\n         SHOULD specify this option if it knows\
    \ what the TTL of the Echo\n         Reply will be.  In general, the server can\
    \ specify a specific\n         TTL to the host stack.  Note that the TTL is not\
    \ necessarily\n         the same for unicast and multicast.  Also note that this\
    \ option\n         SHOULD be included even when not requested by the client. \
    \ The\n         protocol will work even if this option is not included, but it\n\
    \         limits what information a client can obtain.\n         If the server\
    \ did not include this TTL option, there is no\n         reliable way for the\
    \ client to know the initial TTL of the Echo\n         Reply, and therefore the\
    \ client SHOULD NOT attempt to calculate\n         the number of hops the message\
    \ has traversed.\n      Multicast Prefix, type 10\n         Length MUST be greater\
    \ than 2.  It MAY be used in Init messages\n         to request a group within\
    \ the prefix(es), and it MAY be used in\n         Server Response messages to\
    \ tell the client from what\n         prefix(es) it may try to obtain a group.\
    \  It MUST NOT be used\n         in Echo Request/Reply messages.  Note that this\
    \ option MAY be\n         included multiple times to specify multiple prefixes.\n\
    \        0                   1                   2                   3\n     \
    \   0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \       |        Address Family         | Prefix Length |Partial address|\n  \
    \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+     ....      |\n    \
    \     The address family is a value 0-65535 as assigned by IANA for\n        \
    \ Internet address families [ADDRFAMILY].  This is followed by a\n         prefix\
    \ length (4-32 for IPv4, 8-128 for IPv6, or 0 for the\n         special \"wildcard\"\
    \ use discussed below), and finally a group\n         address.  For any family,\
    \ prefix length 0 means that any\n         multicast address from that family\
    \ is acceptable.  This is what\n         we call \"wildcard\".  The group address\
    \ need only contain enough\n         octets to cover the prefix length bits (i.e.,\
    \ the group address\n         would have to be 3 octets long if the prefix length\
    \ is 17-24,\n         and there need be no group address for the wildcard with\
    \ prefix\n         length 0).  Any bits past the prefix length MUST be ignored.\n\
    \         For IPv4, the option value length will be 4-7, while for IPv6,\n   \
    \      it will be 4-19, and for the wildcard, it will be 3.\n      Session ID,\
    \ type 11\n         Length MUST be 4 or larger.  A server SHOULD include this\
    \ in\n         Server Response messages.  If a client receives this option in\n\
    \         a message, the client MUST echo the Session ID option in\n         subsequent\
    \ Echo Request messages, with the exact same value.\n         The Session ID may\
    \ help the server in keeping track of clients\n         and possibly manage per-client\
    \ state.  The value of a new\n         Session ID SHOULD be a pseudo-random byte\
    \ string that is hard\n         to predict; see [RFC4086].  The string MUST be\
    \ at least 4 bytes\n         long.  The Session ID can be used to mitigate spoofing\
    \ of the\n         source address of Echo Request messages.  We say that this\n\
    \         option SHOULD be used, because it is important for security\n      \
    \   reasons.  There may, however, be environments where this is not\n        \
    \ required.  See Section 8, \"Security Considerations\", for\n         details.\n\
    \      Server Timestamp, type 12\n         Length MUST be 8 bytes.  A server supporting\
    \ this option SHOULD\n         include it in Echo Reply messages, if requested\
    \ by the client.\n         The timestamp specifies the time when the Echo Reply\
    \ message is\n         sent.  The first 4 bytes specify the number of seconds\
    \ since\n         the Epoch (0000 UTC Jan 1, 1970).  The next 4 bytes specify\
    \ the\n         number of microseconds since the second specified in the first\n\
    \         4 bytes.  If this option is not included, the protocol will\n      \
    \   still work, but it makes it impossible for a client to compute\n         one-way\
    \ delay.\n         Note that while this protocol uses the above 32-bit format,\
    \ it\n         would have been better to use another format, such as the one\n\
    \         defined in NTPv4 [RFC5905].  This should be considered for\n       \
    \  future extensions of the protocol.\n"
- title: 3.3.  Packet Format
  contents:
  - "3.3.  Packet Format\n   The format of all messages is a one-octet message type,\
    \ followed by a\n   variable number of options.\n       0                   1\
    \                   2                   3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3\
    \ 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |    Type       |          Options ...                          |\n   \
    \   +-+-+-+-+-+-+-+-+            .                                  |\n      |\
    \                            .                                  |\n      |   \
    \                         .                                  |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-\
    \      .....\n   There are four message types defined.  Type 81 (the character\
    \ Q in\n   ASCII) specifies an Echo Request (Query).  Type 65 (the character A\n\
    \   in ASCII) specifies an Echo Reply (Answer).  Type 73 (the character I\n  \
    \ in ASCII) is an Init message.  Type 83 (the character S in ASCII) is\n   a Server\
    \ Response message.\n   The options immediately follow the type octet and are\
    \ not aligned in\n   any way (no spacing or padding); i.e., options might start\
    \ at any\n   octet boundary.  The option format is specified above.\n"
- title: 3.4.  Message Types and Options
  contents:
  - "3.4.  Message Types and Options\n   We will now describe each of the four message\
    \ types and which options\n   they may contain.\n      Init, type 73\n       \
    \  This message is sent by a client to request information from a\n         server.\
    \  It is mainly used for requesting a group address, but\n         it may also\
    \ be used to check which group prefixes the server\n         may provide groups\
    \ from, or other server information.  It MUST\n         include a Version option,\
    \ and SHOULD include a Client ID.  It\n         MAY include Option Request and\
    \ Multicast Prefix options.  This\n         message is a request for a group address\
    \ if and only if it\n         contains Multicast Prefix options.  If multiple\
    \ Prefix options\n         are included, they should be in prioritised order.\
    \  That is,\n         the server will consider the prefixes in the order they\
    \ are\n         specified, and if it finds a group for a prefix, it will only\n\
    \         return that one group, not considering the remaining prefixes.\n   \
    \   Server Response, type 83\n         This message is sent by a server, either\
    \ as a response to an\n         Init, or in response to an Echo Request.  When\
    \ responding to an\n         Init, it may provide the client with a multicast\
    \ group (if\n         requested by the client), or it may provide other server\n\
    \         information.  In response to an Echo Request, the message tells\n  \
    \       the client to stop sending Echo Request messages.  The Version\n     \
    \    option MUST always be included.  Client ID and Sequence Number\n        \
    \ options are echoed if present in the client message.  When\n         providing\
    \ a group to the client, it includes a Multicast Group\n         option.  It SHOULD\
    \ include Server Information and Prefix\n         options if requested.  It SHOULD\
    \ also include the Session ID\n         option.\n      Echo Request, type 81\n\
    \         This message is sent by a client, asking the server to send\n      \
    \   unicast and multicast Echo Reply messages.  It MUST include\n         Version,\
    \ Sequence Number, and Multicast Group options.  If a\n         Session ID was\
    \ received in a Server Response message, then the\n         Session ID MUST be\
    \ included.  It SHOULD include Client ID and\n         Client Timestamp options.\
    \  It MAY include an Option Request\n         option.\n      Echo Reply, type\
    \ 65\n         This message is sent by a server in response to an Echo Request\n\
    \         message.  This message is always sent in pairs, one as unicast\n   \
    \      and one as multicast.  The contents of the messages are mostly\n      \
    \   the same.  The server always echoes all of the options (but\n         never\
    \ the Session ID) from the Echo Request.  Any options in\n         the Echo Request\
    \ that are unsupported by the server are also to\n         be echoed.  The two\
    \ Echo Reply messages SHOULD both always\n         contain a TTL option (not necessarily\
    \ equal).  When requested,\n         both Echo Reply messages SHOULD also contain\
    \ Server Timestamps\n         (not necessarily equal).\n   The matrix below summarises\
    \ what options can go in what messages.\n          \\  Message Type    |  Init\
    \  |  Server  |  Echo   |  Echo  |\n   Option  \\                 |        | Response\
    \ | Request | Reply  |\n   ----------------------   -+--------+----------+---------+--------+\n\
    \   Version (0)               |  MUST  |   MUST   |  MUST   |  ECHO  |\n   Client\
    \ ID (1)             | SHOULD |   ECHO   | SHOULD  |  ECHO  |\n   Sequence Number\
    \ (2)       |  NOT   |   ECHO   |  MUST   |  ECHO  |\n   Client Timestamp (3)\
    \      |  NOT   |   NOT    | SHOULD  |  ECHO  |\n   Multicast Group (4)      \
    \ |  NOT   |   MAY    |  MUST   |  ECHO  |\n   Option Request (5)        |  MAY\
    \   |   NOT    |  MAY    |  ECHO  |\n   Server Information (6)    |  NOT   | \
    \   RQ    |  NOT    |  NOT   |\n   Deprecated (7)            |  NOT   |   NOT\
    \    |  NOT    |  ECHO  |\n   Deprecated (8)            |  NOT   |   NOT    |\
    \  NOT    |  ECHO  |\n   TTL (9)                   |  NOT   |   NOT    |  NOT\
    \    | SHOULD |\n   Multicast Prefix (10)     |  MAY   |   MAY    |  NOT    |\
    \  NOT   |\n   Session ID (11)           |  NOT   |  SHOULD  |  ECHO   |  NOT\
    \   |\n   Server Timestamp (12)     |  NOT   |   NOT    |  NOT    |   RQ   |\n\
    \   ----------------------   -+--------+----------+---------+--------+\n   \"\
    NOT\" means that the option MUST NOT be included.  \"ECHO\" for a\n   server means\
    \ that if the option is specified by the client, then the\n   server MUST echo\
    \ the option in the response, with the exact same\n   option value.  ECHO for\
    \ a client only applies to the Session ID\n   option.  If it is present in the\
    \ Server Response, then it MUST be\n   present with the exact same option value\
    \ in the following Echo\n   Request messages.  \"RQ\" means that the server SHOULD\
    \ include the\n   option in the response, when requested by the client using the\
    \ Option\n   Request option.\n"
- title: 3.5.  Rate Limiting
  contents:
  - "3.5.  Rate Limiting\n   Clients MUST by default send at most Default-Client-Request-Rate\n\
    \   (Section 3.5.1) Echo Request messages per second.  Note that the\n   value\
    \ can be less than 1.  Servers MUST by default perform rate\n   limiting, to guard\
    \ against this protocol being used for denial-of-\n   service (DoS) attacks. \
    \ A server MUST by default limit the number of\n   clients that can be served\
    \ at the same time, and for a given client,\n   a server MUST also by default\
    \ respond to, on average, at most\n   Default-Server-Rate-Limit (see Section 3.5.1)\
    \ Echo Request messages\n   per second.  Note that the value can be less than\
    \ 1.  Server\n   implementations should provide configuration options allowing\
    \ certain\n   clients to perform more rapid rates of Echo Request messages.  If\n\
    \   higher rates are allowed for specific client IP addresses, then Init\n   messages\
    \ and the Session ID option MUST be used to help mitigate\n   spoofing.\n   Implementers\
    \ of applications/tools using this protocol SHOULD\n   consider the UDP guidelines\
    \ [RFC5405], in particular if clients are\n   to send, or servers are to accept,\
    \ Echo Request messages at rates\n   exceeding the defaults given in this document.\
    \  See Section 8,\n   \"Security Considerations\", for additional discussion.\n"
- title: 3.5.1.  Message Rate Variables
  contents:
  - "3.5.1.  Message Rate Variables\n   There are two variables that control message\
    \ rates.  They are defined\n   as follows.\n      Default-Client-Request-Rate\n\
    \         This variable defines the default client echo request rate,\n      \
    \   specifying the number of requests per second.  Note that the\n         value\
    \ may be less than one.  For example, a value of 0.1 means\n         one packet\
    \ per 10 seconds.  The value 1 is RECOMMENDED, but the\n         value might be\
    \ too small or large, depending on the type of\n         network in which the\
    \ client is deployed.  The value 1 is chosen\n         because it should be safe\
    \ in most deployments, and it is\n         similar to what is typically used for\
    \ the common tool \"ping\"\n         for ICMP Echo Request messages.\n      Default-Server-Rate-Limit\n\
    \         This variable defines the default per-client rate limit\n         that\
    \ a server uses for responding to Echo Request messages.\n         The average\
    \ rate of replies MUST NOT exceed\n         Default-Server-Rate-Limit per second.\
    \  Note that the value may\n         be less than one.  For example, a value of\
    \ 0.1 means an average\n         of one packet per 10 seconds.  The value 1 is\
    \ RECOMMENDED, but\n         the value might be too small or large, depending\
    \ on the type of\n         network in which the client is deployed.  The value\
    \ 1 is chosen\n         because it should be safe in most deployments.  This value\n\
    \         SHOULD be high enough to accept the value chosen for the\n         Default-Client-Request-Rate.\n"
- title: 4.  Client Behaviour
  contents:
  - "4.  Client Behaviour\n   We will consider how a typical interactive client using\
    \ the above\n   protocol would behave.\n   A client only requires a user to specify\
    \ the unicast address of the\n   server.  It can then send an Init message with\
    \ a prefix option\n   containing the desired address family and zero prefix length\n\
    \   (wildcard entry).  The server can then decide which group, from the\n   specified\
    \ family, it should return.  A client may also allow the user\n   to specify group\
    \ address(es) or prefix(es) (for IPv6, the user may\n   only be required to specify\
    \ a scope or a Rendezvous Point (RP)\n   address, from which the client can construct\
    \ the desired prefix,\n   possibly embedded-RP).  From this, the client can specify\
    \ one or more\n   prefix options in an Init message to tell the server which address\
    \ it\n   would prefer.  If the user specifies a group address, that can be\n \
    \  encoded as a prefix of maximal length (e.g., 32 for IPv4).  The\n   prefix\
    \ options are in prioritised order; i.e., the client should put\n   the most preferred\
    \ prefix first.\n   If the client receives a Server Response message containing\
    \ a group\n   address, it can start sending Echo Request messages; see the next\n\
    \   paragraph.  If there is no group address option, the client would\n   typically\
    \ exit with an error message.  The server may have included\n   some prefix options\
    \ in the Server Response.  The client may use this\n   to provide the user some\
    \ feedback on what prefixes or scopes are\n   available.\n   Assuming the client\
    \ got a group address in a Server Response, it\n   can start the multicast pings,\
    \ after letting the user know which\n   group is being used.  Normally, a client\
    \ should send at most\n   Default-Client-Request-Rate (Section 3.5.1) Echo Request\
    \ messages per\n   second.\n   When sending the Echo Request messages, the client\
    \ must always\n   include the group option.  If the Server Response contained\
    \ a Session\n   ID option, then it must also include a Session ID option, with\
    \ the\n   exact same value, in the Echo Request messages.  If a client receives\n\
    \   a Server Response message in response to an Echo Request (that is, a\n   Server\
    \ Response message containing a sequence number), this means\n   there is an error,\
    \ and it should stop sending Echo Request messages.\n   This could happen after\
    \ server restart.\n   The client may allow the user to request server information.\
    \  If the\n   user requests server information, the client can send an Init message\n\
    \   with no prefix options, but with an Option Request option, requesting\n  \
    \ that the server return a Server Information option.  The server will\n   return\
    \ server information, if supported, and it may also return a\n   list of prefixes\
    \ it supports.  It will not, however, return a group\n   address.  The client\
    \ may also try to obtain only a list of prefixes\n   by sending an Init message\
    \ with no prefixes and not requesting any\n   specific options.\n   Although this\
    \ technique is not recommended, a client may pick a\n   multicast group and send\
    \ Echo Request messages without first going\n   through the Init - Server Response\
    \ negotiation.  If this is supported\n   by the server and the server is okay\
    \ with the group used, the server\n   can then send Echo Reply messages as usual.\
    \  If the server is not\n   okay with the group used, it will send a Server Response\
    \ telling the\n   client to stop.\n"
- title: 5.  Server Behaviour
  contents:
  - "5.  Server Behaviour\n   We will consider how a typical server using the above\
    \ protocol would\n   behave, first looking at how to respond to Init messages.\n\
    \   If the Init message contains prefix options, the server should look\n   at\
    \ them in order and see if it can assign a multicast address from\n   the given\
    \ prefix.  The server would be configured with a (possibly\n   default) set of\
    \ groups it can offer.  It may have a large pool and\n   pick a group at random,\
    \ or possibly choose a group based on hashing\n   of the client's IP address or\
    \ identifier, or simply use a fixed\n   group.  A server could possibly decide\
    \ whether to include site-scoped\n   group ranges based on the client's IP address.\
    \  It is left to the\n   server to decide whether it should allow the same address\
    \ to be used\n   simultaneously by multiple clients.\n   If the server finds a\
    \ suitable group address, it returns this address\n   in a group option in a Server\
    \ Response message.  The server should\n   additionally include a Session ID.\
    \  This may help the server if it is\n   to keep some state -- for instance, to\
    \ make sure the client uses the\n   group assigned to it.  A good Session ID would\
    \ be a pseudo-random\n   byte string that is hard to predict; see [RFC4086]. \
    \ If the server\n   cannot find a suitable group address, or if there were no\
    \ prefixes in\n   the Init message, it may send a Server Response message containing\n\
    \   prefix options listing what prefixes may be available to the client.\n   Finally,\
    \ if the Init message requests the Server Information option,\n   the server should\
    \ include that option.\n   When the server receives an Echo Request message, it\
    \ must first check\n   that the group address and Session ID (if provided) are\
    \ valid.  If\n   the server is satisfied, it will send a unicast Echo Reply message\n\
    \   back to the client, and also a multicast Echo Reply message to the\n   group\
    \ address.  The Echo Reply messages contain the exact options\n   (but no Session\
    \ ID), and in the same order as in the Echo Request;\n   after that, the server\
    \ adds a TTL option and additional options if\n   needed.  For example, it may\
    \ add a timestamp if requested by the\n   client.  If the server is not happy\
    \ with the Echo Request (such as\n   bad group address or Session ID, or request\
    \ is too large), it may\n   send a Server Response message asking the client to\
    \ stop.  This\n   Server Response must echo the sequence number from the Echo\
    \ Request.\n   This Server Response may contain group prefixes from which a client\n\
    \   can try to request a group address.  The unicast and multicast Echo\n   Reply\
    \ messages have identical UDP payload, apart from possibly TTL\n   and timestamp\
    \ option values.\n   Note that the server may receive Echo Request messages with\
    \ no prior\n   Init message.  This may happen when the server restarts or if a\n\
    \   client sends an Echo Request with no prior Init message.  The server\n   may\
    \ go ahead and respond if it is okay with the group and Session ID\n   (if included)\
    \ used.  If it is not okay with this information, the\n   server sends back a\
    \ Server Response.\n"
- title: 6.  Recommendations for Implementers
  contents:
  - "6.  Recommendations for Implementers\n   The protocol, as specified, is fairly\
    \ flexible and leaves a lot of\n   freedom for implementers.  In this section,\
    \ we present some\n   recommendations.\n   Server administrators should be able\
    \ to configure one group prefix or\n   multiple group prefixes in a server implementation.\
    \  When deploying\n   servers on the Internet and in other environments, the server\n\
    \   administrator should be able to restrict the server to respond to\n   only\
    \ a few multicast groups that should not be currently used by\n   multicast applications.\
    \  A server implementation should also provide\n   flexibility for an administrator\
    \ to apply various policies to provide\n   one group prefix or multiple group\
    \ prefixes to specific clients,\n   e.g., site-scoped addresses for clients that\
    \ are inside the site.\n   As specified in Section 3.5, for a given client, a\
    \ server must\n   by default respond to at most an average rate of\n   Default-Server-Rate-Limit\
    \ Echo Request messages per second.  A leaky\n   bucket algorithm is suggested,\
    \ where the rate can be higher for a few\n   seconds, but the average rate should\
    \ by default be limited to\n   Default-Server-Rate-Limit messages per client per\
    \ second.  Server\n   implementations should provide administrative control of\
    \ which client\n   IP addresses to serve, and may also allow certain clients to\
    \ perform\n   more rapid rates of Echo Request messages.\n   If a server uses\
    \ different policies for different IP addresses, it\n   should require clients\
    \ to send Init messages and return an\n   unpredictable Session ID to help mitigate\
    \ spoofing.  This is an\n   absolute requirement if exceeding the default rate\
    \ limit.  See the\n   specification in Section 3.5.\n"
- title: 7.  IANA Considerations
  contents:
  - "7.  IANA Considerations\n   IANA has assigned UDP user port 9903 (multicast-ping)\
    \ for use by this\n   protocol.  IANA also provides registries for message and\
    \ option\n   types.\n   IANA has created a message types registry.  Message types\
    \ are in the\n   range 0-255.  Message types 0-253 are registered following the\n\
    \   procedures for Specification Required from RFC 5226 [RFC5226], while\n   types\
    \ 254 and 255 are for experimental use.  The registry includes\n   the messages\
    \ defined in Section 3.4.  A message specification MUST\n   describe the behaviour\
    \ with known option types as well as the default\n   behaviour with unknown option\
    \ types.\n   IANA has created an option type registry.  Option types 0-65531 are\n\
    \   registered following the procedures for Specification Required from\n   RFC\
    \ 5226 [RFC5226], while types 65532-65535 are for experimental use.\n   The registry\
    \ should include the options defined in Section 3.2.  An\n   option specification\
    \ must describe how the option may be used with\n   the known message types. \
    \ This includes which message types the\n   option may be used with.\n   The initial\
    \ registry definitions are as follows:\n   Multicast Ping Protocol Parameters:\n\
    \   Registry Name: Multicast Ping Protocol Message Types\n   Reference: RFC 6450\n\
    \   Registration Procedures: Specification Required\n   Registry:\n   Type   \
    \      Name                                  Reference\n   -----------  ------------------------------------\
    \  ----------\n   65           Echo Reply                            RFC 6450\n\
    \   73           Init                                  RFC 6450\n   81       \
    \    Echo Request                          RFC 6450\n   83           Server Response\
    \                       RFC 6450\n   254-255      Experimental\n   Registry Name:\
    \ Multicast Ping Protocol Option Types\n   Reference: RFC 6450\n   Registration\
    \ Procedures: Specification Required\n   Registry:\n   Type         Name     \
    \                             Reference\n   -----------  ------------------------------------\
    \  ----------\n   0            Version                               RFC 6450\n\
    \   1            Client ID                             RFC 6450\n   2        \
    \    Sequence Number                       RFC 6450\n   3            Client Timestamp\
    \                      RFC 6450\n   4            Multicast Group             \
    \          RFC 6450\n   5            Option Request                        RFC\
    \ 6450\n   6            Server Information                    RFC 6450\n   7 \
    \           Deprecated                            RFC 6450\n   8            Deprecated\
    \                            RFC 6450\n   9            TTL                   \
    \                RFC 6450\n   10           Multicast Prefix                  \
    \    RFC 6450\n   11           Session ID                            RFC 6450\n\
    \   12           Server Timestamp                      RFC 6450\n   65532-65535\
    \  Experimental\n"
- title: 8.  Security Considerations
  contents:
  - "8.  Security Considerations\n   There are some security issues to consider. \
    \ One is that a host may\n   send an Echo Request with an IP source address of\
    \ another host, and\n   make an arbitrary multicast ping server on the Internet\
    \ send packets\n   to this other host.  This behaviour is fairly harmless.  The\
    \ worst\n   case is if the host receiving the unicast Echo Reply messages also\n\
    \   happens to be joined to the multicast group used.  This is less of a\n   problem\
    \ for SSM, where also the source address of the server must\n   match the address\
    \ joined.  In this case, there would be an\n   amplification effect, where the\
    \ host receives twice as many replies\n   as there are requests sent.  See below\
    \ for how spoofing can be\n   mitigated.\n   For ASM (Any-Source Multicast), a\
    \ host could also make a multicast\n   ping server send multicast packets to a\
    \ group that is used for\n   something else, possibly disturbing other uses of\
    \ that group.\n   However, server implementations should allow administrators\
    \ to\n   restrict which groups a server responds to.  The administrator should\n\
    \   then try to configure a set of groups that are not used for other\n   purposes.\
    \  Another concern is bandwidth.  To limit the bandwidth\n   used, a server MUST\
    \ by default limit the number of clients that can\n   be served at the same time,\
    \ and a server MUST also by default perform\n   per-client rate limiting.\n  \
    \ In order to help mitigate spoofing, a server SHOULD require that the\n   client\
    \ send an Init message, and return an unpredictable Session ID\n   in the response.\
    \  The ID should be associated with the IP address and\n   have a limited lifetime.\
    \  The server SHOULD then only respond to Echo\n   Request messages that have\
    \ a valid Session ID associated with the\n   source IP address of the Echo Request.\
    \  Note, however, that a server\n   is replying with a Server Response message\
    \ if the Session ID is\n   invalid.  This is used to tell the client that something\
    \ is wrong and\n   that it should stop sending requests, and start over if necessary.\n\
    \   This means, however, that someone may spoof a client request, and\n   have\
    \ the server send a message back to the client address.  One\n   solution here\
    \ would be for the server to have a very low rate limit\n   for the Server Response\
    \ messages.\n   Note that the use of a Session ID only to some degree helps mitigate\n\
    \   spoofing.  An attacker that is on the path between a client and a\n   server\
    \ may eavesdrop the traffic, learn a valid Session ID, and\n   generate Echo Request\
    \ messages using this ID.  The server will\n   respond as long as the Session\
    \ ID remains valid.\n   This protocol may be used to establish a covert channel\
    \ between a\n   multicast ping client and other hosts listening to a multicast\
    \ group.\n   A client can, for instance, send an Echo Request containing an\n\
    \   undefined option with arbitrary data.  The server would echo this\n   back\
    \ in an Echo Reply that may reach other hosts listening to that\n   group.  One\
    \ solution that should be considered for future protocol\n   versions is to reply\
    \ with a hash of the data, rather than simply a\n   copy of the same data.\n"
- title: 9.  Acknowledgments
  contents:
  - "9.  Acknowledgments\n   The ssmping concept was proposed by Pavan Namburi, Kamil\
    \ Sarac, and\n   Kevin C. Almeroth in the paper \"SSM-Ping: A Ping Utility for\
    \ Source\n   Specific Multicast\" (2004) and also \"MPing: A Ping Utility for\
    \ IP\n   Multicast\" (Sarac and Almeroth, 2004).  Mickael Hoerdt contributed\n\
    \   several ideas.  Alexander Gall, Nicholas Humfrey, Nick Lamb, and Dave\n  \
    \ Thaler have contributed in different ways to the implementation of\n   the ssmping\
    \ tools [IMPL].  Many people in communities like the\n   Trans-European Research\
    \ and Education Networking Association\n   (TERENA), Internet2, and the M6Bone\
    \ (IPv6 multicast network) have\n   used early implementations of ssmping and\
    \ provided feedback that\n   influenced the current protocol.  Thanks to Kevin\
    \ Almeroth, Tony\n   Ballardie, Bill Cerveny, Toerless Eckert, Marshall Eubanks,\
    \ Gorry\n   Fairhurst, Alfred Hoenes, Liu Hui, Bharat Joshi, Olav Kvittem, Hugo\n\
    \   Santos, Kamil Sarac, Pekka Savola, Trond Skjesol, and Cao Wei for\n   reviewing\
    \ and providing feedback on this document.  In particular,\n   Hugo, Gorry, and\
    \ Bharat provided lots of input on several revisions\n   of the document.\n"
- title: 10.  References
  contents:
  - '10.  References

    '
- title: 10.1.  Normative References
  contents:
  - "10.1.  Normative References\n   [ADDRFAMILY]\n              IANA, \"Address Family\
    \ Numbers\",\n              <http://www.iana.org/assignments/address-family-numbers>.\n\
    \   [RFC0768]  Postel, J., \"User Datagram Protocol\", STD 6, RFC 768,\n     \
    \         August 1980.\n   [RFC0792]  Postel, J., \"Internet Control Message Protocol\"\
    , STD 5,\n              RFC 792, September 1981.\n   [RFC2119]  Bradner, S., \"\
    Key words for use in RFCs to Indicate\n              Requirement Levels\", BCP\
    \ 14, RFC 2119, March 1997.\n   [RFC3629]  Yergeau, F., \"UTF-8, a transformation\
    \ format of ISO\n              10646\", STD 63, RFC 3629, November 2003.\n   [RFC4086]\
    \  Eastlake 3rd, D., Schiller, J., and S. Crocker,\n              \"Randomness\
    \ Requirements for Security\", BCP 106, RFC 4086,\n              June 2005.\n\
    \   [RFC5226]  Narten, T. and H. Alvestrand, \"Guidelines for Writing an\n   \
    \           IANA Considerations Section in RFCs\", BCP 26, RFC 5226,\n       \
    \       May 2008.\n"
- title: 10.2.  Informative References
  contents:
  - "10.2.  Informative References\n   [IMPL]     Venaas, S., \"ssmping implementation\"\
    ,\n              <http://software.uninett.no/ssmping/>.\n   [RFC5405]  Eggert,\
    \ L. and G. Fairhurst, \"Unicast UDP Usage Guidelines\n              for Application\
    \ Designers\", BCP 145, RFC 5405,\n              November 2008.\n   [RFC5905]\
    \  Mills, D., Martin, J., Ed., Burbank, J., and W. Kasch,\n              \"Network\
    \ Time Protocol Version 4: Protocol and Algorithms\n              Specification\"\
    , RFC 5905, June 2010.\n"
- title: Author's Address
  contents:
  - "Author's Address\n   Stig Venaas\n   Cisco Systems\n   Tasman Drive\n   San Jose,\
    \ CA  95134\n   USA\n   EMail: stig@cisco.com\n"
