- title: __initial_text__
  contents:
  - "                    Towards a Transport Service for\n                  Transaction\
    \ Processing Applications\n"
- title: STATUS OF THIS MEMO
  contents:
  - "STATUS OF THIS MEMO\n   This RFC is concerned with the possible design of one\
    \ or more new\n   protocols for the ARPA-Internet, to support kinds of applications\n\
    \   which are not well supported at present.  The RFC is intended to spur\n  \
    \ discussion in the Internet research community towards the development\n   of\
    \ new protocols and/or concepts, in order to meet these unmet\n   application\
    \ requirements.  It does not represent a standard, nor even\n   a concrete protocol\
    \ proposal.  Distribution of this memo is\n   unlimited.\n"
- title: 1.  INTRODUCTION
  contents:
  - "1.  INTRODUCTION\n   The DoD Internet protocol suite includes two alternative\
    \ transport\n   service [1] protocols, TCP and UDP, which provide virtual circuit\
    \ and\n   datagram service, respectively [RFC-793, RFC-768].  These two\n   protocols\
    \ represent points in the space of possible transport service\n   attributes which\
    \ are quite \"far apart\".  We want to examine an\n   important class of applications,\
    \ those which perform what is often\n   called \"transaction processing\".  We\
    \ will see that the communication\n   needs for these applications fall into the\
    \ gap \"between\" TCP and UDP\n   -- neither protocol is very appropriate.\n \
    \  We will then characterize the attributes of a possible new\n   transport-level\
    \ protocol, appropriate for these ill-served\n   transaction-processing applications.\n\
    \   In writing this memo, the author had in mind several assumptions\n   about\
    \ Internet protocol development.\n      *  Assumption 1: The members of the Internet\
    \ research community\n         now understand a great deal about protocols, and\
    \ given a list\n         of consistent attributes we can probably generate a reasonable\n\
    \         protocol to meet that specification.\n         This is not to suggest\
    \ that design of good protocols is easy.\n         It does reflect an assumption\
    \ (perhaps wrong) that the set of\n         basic protocol techniques we have\
    \ invented so far is sufficient\n         to give a good solution for any point\
    \ in the attribute space,\n         and that we can forsee (at least in a general\
    \ way) many of the\n         consequences of particular protocol design choices.\n"
- title: RFC 955                                                   September 1985
  contents:
  - 'RFC 955                                                   September 1985

    '
- title: Transaction Protocol
  contents:
  - "Transaction Protocol\n      *  Assumption 2: We need to develop appropriate service\n\
    \         requirements for a \"transaction processing protocol\".\n         The\
    \ classifications \"virtual circuit\" and \"datagram\"\n         immediately define\
    \ in our minds the most important attributes\n         of TCP and UDP.  We have\
    \ no such immediate agreement about the\n         services to be provided for\
    \ transaction processing.  The\n         existing and proposed transaction-oriented\
    \ protocols show a\n         number of alternative choices [e.g., Cour81, BiNe84,\
    \ Coop84,\n         Cher85, Crow85, Gurw85, Mill85].\n   Many of the ideas discussed\
    \ here are not new.  For example, Birrell\n   and Nelson [BiNe84] and Watson [Wats81]\
    \ have described\n   transport-level protocols appropriate for transactions. \
    \ Our purpose\n   here is to urge the solution of this problem within the Internet\n\
    \   protocol family.\n"
- title: 2.  TRANSACTION PROCESSING COMMUNICATIONS
  contents:
  - "2.  TRANSACTION PROCESSING COMMUNICATIONS\n   We begin by listing the characteristics\
    \ of the communication patterns\n   typical in \"transaction processing\" applications.\n\
    \      *  Unsymmetrical Model\n         The two end points of the communication\
    \ typically take\n         different roles, generally called \"client\" and \"\
    server\".  This\n         leads to an unsymmetrical communication pattern.\n \
    \        For example, the client always initiates a communication\n         sequence\
    \ or \"transaction\".  Furthermore, an important subclass\n         of applications\
    \ uses only a simple exchange of messages, a\n         \"request\" to the server\
    \ followed by a \"reply\" to the client.\n         Other applications may require\
    \ a continuing exchange of\n         messages, a dialog or \"conversation\". \
    \ For example, a request\n         to read a file from a file server might result\
    \ in a series of\n         messages, one per file block, in reply. More complex\
    \ patterns\n         may occur.\n      *  Simplex Transfers\n         Regardless\
    \ of the pattern, it always consists of a series of\n         SIMPLEX data transfers;\
    \ at no time is it necessary to send data\n         in both directions simultaneously.\n"
- title: RFC 955                                                   September 1985
  contents:
  - 'RFC 955                                                   September 1985

    '
- title: Transaction Protocol
  contents:
  - "Transaction Protocol\n      *  Short Duration\n         Transaction communication\
    \ sequences generally have short\n         duration, typically 100's of milliseconds\
    \ up to 10's of\n         seconds, but never hours.\n      *  Low Delay\n    \
    \     Some applications require minimal communication delay.\n      *  Few Data\
    \ Packets\n         In many applications, the data to be sent can be compressed\n\
    \         into one or a few IP packets.  Applications which have been\n      \
    \   designed with LAN's in mind are typically very careful to\n         minimize\
    \ the number of data packets for each request/reply\n         sequence.\n    \
    \  *  Message Orientation\n         The natural unit of data which is passed in\
    \ a transaction is an\n         entire message (\"record\"), not a stream of bytes.\n"
- title: '3.  EXAMPLE: NAME SERVERS'
  contents:
  - "3.  EXAMPLE: NAME SERVERS\n   To focus our ideas, we will now discuss several\
    \ particular types of\n   distributed applications which are of pressing concern\
    \ to members of\n   the Internet research community, and which require\n   transaction-oriented\
    \ communication.\n   First, consider the name server/name resolver system [RFC-882,\n\
    \   RFC-883] which is currently being introduced into the (research)\n   Internet.\
    \  Name servers must use TCP and/or UDP as their transport\n   protocol.  TCP\
    \ is appropriate for the bulk transfers needed to update\n   a name server's data\
    \ base.  For this case, reliability is essential,\n   and virtual-circuit setup\
    \ overhead is negligible compared to the data\n   transfer itself.  However, the\
    \ choice of a transport protocol for the\n   transaction traffic -- queries and\
    \ responses -- is problematic.\n      *  TCP would provide reliable and flow-controlled\
    \ transfer of\n         arbitrary-sized queries and responses.  However, TCP exacts\
    \ a\n         high cost as a result of its circuit setup and teardown phases.\n\
    \      *  UDP avoids the overhead of TCP connection setup.  However, UDP\n   \
    \      has two potentially-serious problems -- (1) unreliable\n         communication,\
    \ so that packets may be lost, duplicated, and/or\n"
- title: RFC 955                                                   September 1985
  contents:
  - 'RFC 955                                                   September 1985

    '
- title: Transaction Protocol
  contents:
  - "Transaction Protocol\n         reordered; and (2) the limitation of a data object\n\
    \         (query/response) to the 548-byte maximum in a single UDP\n         packet.\n\
    \   At present, name servers are being operated using UDP for transaction\n  \
    \ communication.  Note that name server requests have a special\n   property,\
    \ idempotency; as a result, lost, duplicated, or reordered\n   queries do not\
    \ prevent the name-server system from working.  This\n   would seem to favor the\
    \ use of UDP.\n   However, it seems quite likely that the defects of UDP will\
    \ make it\n   unusable for an increasing fraction of queries.\n      *  The average\
    \ size of individual replies will certainly increase,\n         as the more esoteric\
    \ mail lookup features are used, as the host\n         population explodes (resulting\
    \ in a logarithmic increase in\n         domain name sizes), and as the number\
    \ of alternate acceptable\n         answers increases.  As a result, a single\
    \ response will more\n         often overflow a single UDP packet.\n      *  The\
    \ average end-to-end reliability will decrease as some of the\n         flakier\
    \ paths of the Internet are brought into use by name\n         resolvers.\n  \
    \       This will lead to a serious problem of choosing an appropriate\n     \
    \    retransmission timeout.  A name resolver using UDP cannot\n         distinguish\
    \ packet loss in the Internet from queueing delay in\n         the server.  As\
    \ a result, name servers we have seen have chosen\n         long fixed timeouts\
    \ (e.g., 30 seconds or more).  This will\n         result in long delays in name\
    \ resolution when packets are lost.\n         One might think that delays in name\
    \ resolution might not be an\n         issue since most name lookups are done\
    \ by a mailer daemon.\n         However, ARPANET experience with user mail interfaces\
    \ has shown\n         that it is always desirable to verify the correctness of\
    \ each\n         host name as the user enters the \"To:\" and \"CC:\" addresses\
    \ for\n         a message. Hence, delays due to lost UDP packets will be\n   \
    \      directly visible to users.\n   More generally, the use of UDP violates\
    \ sound communication system\n   design in two important ways:\n      *  The name\
    \ resolver/server applications have to provide timeouts\n         and retransmissions\
    \ to protect against \"errors\" (losses) in the\n         communication system.\
    \  This certainly violates network\n         transparency, and requires the application\
    \ to make decisions\n         for which it is not well-equipped.\n"
- title: RFC 955                                                   September 1985
  contents:
  - 'RFC 955                                                   September 1985

    '
- title: Transaction Protocol
  contents:
  - "Transaction Protocol\n         As a general design principle, it seems that (Inter-)\
    \ network\n         properties, especially bad properties, ought to a large extent\n\
    \         to be hidden below the transport-service boundary [2].\n      *  The\
    \ name resolver/server applications must know the maximum\n         size of a\
    \ UDP datagram.\n         It is clearly wrong for an application program to contain\n\
    \         knowledge of the number 576 or 548!  This does not imply that\n    \
    \     there cannot be a limitation on the size of a message, but any\n       \
    \  such limitation should be imposed by the particular\n         application-level\
    \ protocol, not the transport or internetwork\n         level.\n   It seems that\
    \ the TCP/UDP choice for name servers presents an ugly\n   dilemma.  We suggest\
    \ that the solution should be a new\n   transaction-oriented transport protocol\
    \ with the following features:\n      *  Reliable (\"at-least-once\") Delivery\
    \ of Data;\n      *  No Explicit Connection Setup or Teardown Phases;\n      *\
    \  Fragmentation and Reassembly of Messages;\n      *  Minimal Idle State in both\
    \ Client and Server.\n"
- title: '4.  ANOTHER EXAMPLE: DISTRIBUTED OPERATING SYSTEMS'
  contents:
  - "4.  ANOTHER EXAMPLE: DISTRIBUTED OPERATING SYSTEMS\n   Distributed operating\
    \ systems represent another potential application\n   for a transaction-oriented\
    \ transport service.  A number of examples\n   of distributed operating systems\
    \ have been built using high-speed\n   local area networks (LAN's) for communication\
    \ (e.g, Cronus, Locus,\n   V-System).  Typically, these systems use private communication\n\
    \   protocols above the network layer, and the private transport-level\n   protocol\
    \ is carefully designed to minimize latency across the LAN.\n   They make use\
    \ of the inherent reliability of the LAN and of simple\n   transactions using\
    \ single-packet exchanges.\n   Recently there have been efforts to extend these\
    \ systems to operate\n   across the Internet [Cher85, Shel85].  Since these are\
    \ not \"open\"\n   systems, there is no requirement that they use a standard transport\n\
    \   protocol. However, the availability of a suitable transport protocol\n   for\
    \ transactions could considerably simplify development of future\n   distributed\
    \ systems.\n   The essential requirement here seems to be packet economy.  The\
    \ same\n"
- title: RFC 955                                                   September 1985
  contents:
  - 'RFC 955                                                   September 1985

    '
- title: Transaction Protocol
  contents:
  - "Transaction Protocol\n   minimal two-packet exchange used over the LAN should\
    \ be possible\n   across the Internet.  This leads to two requirements for supporting\n\
    \   distributed operating systems:\n      *  No Explicit Connection Setup or Teardown\
    \ Phases;\n      *  Implicit (\"piggy-backed\") Acknowledgments Whenever Possible.\n\
    \         This implies that the response packet will serve as an implicit\n  \
    \       acknowledgment to the request packet (when timing makes this\n       \
    \  possible).  Similarly, a new request (for the same pair of\n         addressable\
    \ entities) would implicitly acknowledge the previous\n         response, if it\
    \ came soon enough.\n   The nature of the application imposes two other requirements:\n\
    \      *  Reliable (\"at-most-once\"), Ordered Delivery\n         However, it\
    \ should be possible to relax the reliability to take\n         advantage of special\
    \ cases like an idempotent request.\n      *  Multicast Capability\n         The\
    \ transport service should mesh cleanly with the proposed\n         Internet multicast\
    \ facility, using host groups [ChDe85].\n"
- title: 5.  OBJECTIVES FOR A PROTOCOL
  contents:
  - "5.  OBJECTIVES FOR A PROTOCOL\n   We believe that it is possible to design a\
    \ new transport protocol for\n   the Internet which is suitable for a wide variety\
    \ of\n   transaction-oriented applications.  Such a transport protocol would\n\
    \   have the following attributes:\n      *  Reliable Delivery\n         Data\
    \ will be delivered reliably, i.e., exactly once, or the\n         sender will\
    \ be informed.  The protocol must be able to handle\n         loss, duplication,\
    \ and reordering of request and response\n         packets.  In particular, old\
    \ duplicate request packets must not\n         cause erroneous actions.\n    \
    \     It should also be possible for the application programs to\n         request\
    \ that the reliability be relaxed for particular\n         transactions.  This\
    \ would allow communication economies in the\n         case of idempotent requests\
    \ or of notification without reply.\n"
- title: RFC 955                                                   September 1985
  contents:
  - 'RFC 955                                                   September 1985

    '
- title: Transaction Protocol
  contents:
  - "Transaction Protocol\n      *  Minimum Number of Packets in Simple Cases\n  \
    \       In the simplest case (small messages, no packet losses, and the\n    \
    \     interval between requests and replies between the same pair of\n       \
    \  addressable entities shorter than applicable timeouts), a\n         simple\
    \ two-packet exchange should result.\n      *  No Explicit Connection Setup or\
    \ Teardown Phases\n         The protocol will not create virtual circuits, but\
    \ will provide\n         what is sometimes (confusingly) called \"reliable datagram\"\
    \n         service.\n         However, in order to provide a minimum two-packet\
    \ exchange,\n         there must be some implicit state or \"soft\" virtual circuit\n\
    \         between a pair of addressable entities. In recent discussions\n    \
    \     this has been dubbed a \"conversation\", to distinguish it from a\n    \
    \     connection.\n      *  Minimal Idle State\n         When a server is not\
    \ processing a transaction, there will be no\n         state kept (except enough\
    \ to recognize old duplicate packets\n         and to suppress unneeded ACK packets).\n\
    \      *  Fragmentation/Reassembly of Large Messages\n         There is a range\
    \ of possible objectives here. The minimum\n         requirement is that the application\
    \ not have to know the number\n         576, 548, etc. For example, each application\
    \ might establish\n         its own \"natural\" upper limit on the size of a message,\
    \ and\n         always provide a buffer of that size [3].\n         At the other\
    \ extreme, the protocol might allow very large\n         messages (e.g., a megabyte\
    \ or more).  In this case, the\n         proposed protocol would, in the large-message\
    \ limit, be\n         performing the bulk data transfer function of TCP.  It would\
    \ be\n         interesting to know whether this is possible, although it is\n\
    \         not necessarily a requirement.\n         The introduction of multi-packet\
    \ messages leads to the complex\n         issues of window sizes and flow control.\
    \  The challenge is to\n         handle these efficiently in the absence of connection\
    \ setup.\n      *  Message Orientation\n"
- title: RFC 955                                                   September 1985
  contents:
  - 'RFC 955                                                   September 1985

    '
- title: Transaction Protocol
  contents:
  - "Transaction Protocol\n         The basic unit of communication will be an entire\
    \ message, not\n         a stream of bytes.  If a message has to be segmented,\
    \ it will\n         be delivered in units of segments or buffers, not bytes.\n\
    \      *  Multicast Capability\n   Based on this discussion, we can suggest some\
    \ of the key issues and\n   problems in design of this protocol.\n      *  Choice\
    \ of Addressable Entity\n         What will be the addressable entity?  It must\
    \ be unique in\n         space; must it be unique in time (even across system\
    \ crashes) ?\n      *  Timeout Dynamics\n         Timeouts must be the key to\
    \ operation of this protocol.\n         Experience with TCP has shown the need\
    \ for dynamic selection of\n         an appropriate timeout, since Internet delays\
    \ range over four\n         decimal orders of magnitude.\n         However, the\
    \ absence of connection setup and the\n         typically-short duration of a\
    \ single interaction seem to\n         preclude the dynamic measurement of delays.\n\
    \      *  Multi-Packet Messages\n         How can flow control be provided for\
    \ multi-packet messages, to\n         provide reasonable throughput over long-delay\
    \ paths without\n         overrun with short-delay paths, when there is no virtual\n\
    \         circuit setup?\n      *  Implementation Efficiency\n         The protocol\
    \ should lend itself to efficient (which probably\n         implies simple) implementations,\
    \ so that hosts will be willing\n         to use it over LAN's as well as for\
    \ general Internet\n         communication.\n   We believe further study is needed\
    \ on these questions.\n   The reader may wonder: how is the proposed protocol\
    \ related to an RPC\n   (Remote Procedure Call) facility?  The intent is that\
    \ RPC facilities\n   and message-passing IPC facilities will be built on top of\
    \ the\n   proposed transport layer.  These higher-level mechanisms will need to\n\
    \   address a number of additional issues, which are not relevant to the\n   communication\
    \ substrate:\n"
- title: RFC 955                                                   September 1985
  contents:
  - 'RFC 955                                                   September 1985

    '
- title: Transaction Protocol
  contents:
  - "Transaction Protocol\n      1.  Application Interface\n         This includes\
    \ binding and stub generators.\n      2.  Structured Data Encoding\n      3. \
    \ Server Location and Binding\n      4.  Authentication and Access Control\n"
- title: 6.  CONCLUSION
  contents:
  - "6.  CONCLUSION\n   Distributed processing and distributed data bases will underlie\
    \ many\n   of the future computer system research projects and applications\n\
    \   based upon the Internet.  As a result, transaction-based\n   communication\
    \ will be an increasingly important activity on the\n   Internet.  We claim that\
    \ there is a pressing need for an appropriate\n   transport protocol for transaction\
    \ processing.  In this memo, we have\n   given examples to support this claim,\
    \ and have outlined the service\n   which such a new transport protocol would\
    \ provide.\n   This memo is based upon discussions within the New End-to-End\n\
    \   Protocols taskforce, and it is a pleasure to acknowledge the\n   participation\
    \ and sagacity of the members of that group.  I want to\n   thank Dave Clark,\
    \ an ex officio taskforce member, for his\n   contribution to these discussions,\
    \ and Robert Cole for very helpful\n   suggestions.\n"
- title: 'NOTES:'
  contents:
  - "NOTES:\n   [1]  For the purposes of this RFC, in fact, the reader may consider\n\
    \        \"transport service\" to be defined as that protocol layer which\n  \
    \      contains TCP and UDP, as in Figure 1 of RFC-791.  Alternatively,\n    \
    \    we may use the ISO definition -- the transport service is the\n        lowest\
    \ layer providing end-to-end service which is essentially\n        independent\
    \ of the characteristics of the particular (Inter-)\n        network used to support\
    \ the communication.\n   [2]  This idea is implicit in the ISO definition of a\
    \ transport\n        service.\n   [3]  It would be reasonable for the name server\
    \ definition to specify\n        an upper bound on the size of a single query\
    \ or response; e.g.,\n        2K bytes.  This would imply (large) limits on the\
    \ number of RR's\n        that could be returned per response. If that limit is\
    \ exceeded,\n        we are doing something wrong!\n"
- title: RFC 955                                                   September 1985
  contents:
  - 'RFC 955                                                   September 1985

    '
- title: Transaction Protocol
  contents:
  - 'Transaction Protocol

    '
- title: REFERENCES
  contents:
  - "REFERENCES\n   BiNe84   Birrell, Andrew D. and Nelson, Bruce Jay, \"Implementing\n\
    \            Remote Procedure Calls\". ACM TOCS, Vol. 2, No. 1, February\n   \
    \         1984.\n   ChDe85   Cheriton, David R. and Deering, Steven, \"Host Groups:\
    \ a\n            Multicast Extension for Datagram Networks\".  To be presented\n\
    \            to 9th Data Communication Symposium.\n   Cher85   Cheriton, David\
    \ R., \"V Message Transaction Protocol\".\n            Private communication,\
    \ July 1985.\n   Cour81   Xerox Corp., \"Courier: The Remote Procedure Call Protocol\"\
    .\n            XSIS 038112, Xerox Corp., Stamford, Conn., December 1981.\n   Coop84\
    \   Cooper, Eric C., \"Circus: a Replicated Procedure Call\n            Facility\"\
    .  Proc. 4th Symposium on Reliability in\n            Distributed Software and\
    \ Database Systems, October 1984.\n   Crow85   Crowcroft, Jon, \"A Sequential\
    \ Exchange Protocol\".  Internal\n            Note 1688, Computer Science Department,\
    \ University College\n            London, June 1985.\n   Gurw85   Gurwitz, Robert\
    \ F., \"Object Oriented Interprocess\n            Communication in the Internet\"\
    .  Private communication,\n            April 1985.\n   Mill85   Miller, Trudy,\
    \ \"Internet Reliable Transaction Protocol --\n            Functional and Interface\
    \ Specification\".  RFC-938, February\n            1985.\n   Shel85   Sheltzer,\
    \ Alan B. , \"Network Transparency in an Internetwork\n            Environment\"\
    , PhD Thesis, UCLA Department of Computer\n            Science, July 1985.\n \
    \  Wats81   Watson, Richard W., \"Timer-based Mechanisms in Reliable\n       \
    \     Transport Protocol Connection Management\".  Computer\n            Networks,\
    \ Vol. 5, pp47-56, 1981 (also distributed as\n            IEN-193).\n"
