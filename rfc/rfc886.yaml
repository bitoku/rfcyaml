- title: __initial_text__
  contents:
  - "\t     Proposed Standard for Message Header Munging\n\t\t       Thu Dec 15 03:37:52\
    \ 1983\n\t\t\t   Marshall T. Rose\n\t    Department of Information and Computer\
    \ Science\n\t\t   University of California, Irvine\n\t\t\t   Irvine, CA 92717\n\
    \t\t\t MRose.UCI@Rand-Relay\n    This memo proposes a standard for the ARPA Internet\
    \ community. If\n    this proposal is adopted, hosts on the ARPA Internet that\
    \ do message\n    translation would be expected to adopt and implement this standard.\n\
    \t\t\t     Introduction\n    This memo describes the rules that are to be used\
    \ when mail is\n    transformed from one standard format to another.  The scope\
    \ of this\n    memo is limited to text messages (computer network mail, or\n \
    \   electronic mail) that traverse the ARPA Internet.  This memo is not\n    presented\
    \ as a replacement or amendment for the \"Standard for the\n    Format of ARPA\
    \ Internet Text Messages\", RFC822.  Rather, this memo\n    focuses on a particular\
    \ aspect of mail, and provides a conceptual\n    and practical basis for implementors\
    \ of transport agents and user\n    agents which support message munging.\n  \
    \  Although this memo has been specifically prepared for use with the\n    822\
    \ standard, an understanding of the 822 standard is not required\n    to make\
    \ use of this memo.  The remainder of this section reminds\n    the reader of\
    \ some key concepts presented in the 822 standard, and\n    how they relate to\
    \ the perspective of this memo.\n    Messages are viewed as consisting of an envelope\
    \ and contents.  The\n    envelope is manipulated solely by transport agents,\
    \ and contains\n    the information required by the transport agents to deliver\
    \ the\n    message to its recipients.  Although this memo does not address\n \
    \   itself directly to the envelope, we shall see that some of the\n    rules\
    \ discussed later are applicable to the envelope.\n    The contents of the message\
    \ consists of a rigorously structured\n    part, known as the headers, followed\
    \ by a freely formated part,\n    called the body.  The message body is completely\
    \ uninteresting to\n    us.  Our emphasis is strictly on the headers of the message.\
    \  Each\n    header in the message consists of a field, its value, and a\n   \
    \ terminating end-of-line sequence.  The 822 standard discusses,\n    among other\
    \ things, continuation lines, the syntax that is used to\n    distinguish between\
    \ fields and values, and the syntax and semantics\n    of the values of various\
    \ fields.  For our part, we shall concern\n    ourselves only with the notion\
    \ that the headers section consists of\n    one or more headers, which are divided\
    \ into one or more field/value\n    pairs.\n    The term \"message munging\" refers\
    \ to the actions taken by a\n    transport or user agent to transform the contents\
    \ of a message from\n    conformance with one standard format to another.  The\
    \ 822 standard\n    refers to this as \"Network-Specific Transformation\".  Other\
    \ phrases\n    might be \"header munging\" or \"mail filtering\".  Regardless\
    \ of the\n    term used, the key notion is that this action transforms a message\n\
    \    from its current format (the source message) to the structure\n    required\
    \ by the target standard.  A \"munging agent\", for the\n    purposes of this\
    \ memo, is an entity which performs message munging.\n    A munging agent may\
    \ be part of either a transport or user agent.\n\t\t\t      Background\n    As\
    \ more networks connect into the ARPA Internet community, their\n    users will\
    \ exchange computer mail messages with other Internet\n    hosts.  Although the\
    \ 822 standard must be strictly adhered to for\n    mail that traverses the ARPA\
    \ Internet, other networks might not\n    internally adopt this standard.  It\
    \ is nevertheless desirable to\n    permit mail to flow between hosts which internally\
    \ conform to the\n    standard and those which do not.  The 822 standard is very\
    \ clear to\n    indicate that:\n\t \"This standard is NOT intended to dictate\
    \ the internal formats\n\t used by sites, the specific message system features\
    \ that they\n\t are expected to support, or any of the characteristics of user\n\
    \t interface programs that create or read messages.\"\n    This plainly states\
    \ that even hosts within the ARPA Internet, may\n    opt to use a different standard\
    \ than 822 for their internal use,\n    but they are expressly required to use\
    \ the 822 standard when\n    transferring mail to other hosts in the ARPA Internet.\
    \  As such, it\n    is not difficult to imagine message munging becoming a common\n\
    \    activity among transport and user agents.\n    There are other reasons why\
    \ message munging may become a widespread\n    practice.  An example from CSnet\
    \ will serve here.  The CSnet relays\n    provide authorized access for mail services\
    \ to the ARPA Internet\n    for the CSnet phonenet sites.  CSnet sites are not\
    \ registered with\n    the NIC, and hence are often absent from the host tables\
    \ of ARPA\n    Internet sites.  As a result, addresses for mailboxes on CSnet\n\
    \    phonenet sites are unknown to ARPA Internet sites.  From an ARPA\n    Internet\
    \ site, it would be impossible to send messages to these\n    addresses, since\
    \ the local transport agent has no handle on the\n    destination hosts of the\
    \ phonenet mailboxes.  Obviously, even\n    replying to a such a message is simply\
    \ not possible.  To solve this\n    problem, the transport agents on the CSnet\
    \ relays perform message\n    munging on mail destined for the ARPA Internet.\
    \  Phonenet addresses\n    of the form \"mbox@host\" are transformed to \"mbox.host@relay\"\
    , where\n    \"relay\" is the ARPA Internet host name of the relay performing\
    \ the\n    transformation.  Other addresses are left alone.  Agents throughout\n\
    \    the ARPA Internet are now able to process these addresses, since\n    the\
    \ host-part is a known ARPA Internet host.\n    The source-routing solution to\
    \ this problem will hopefully be\n    replaced by domain handling when domains\
    \ are implemented in the ARPA\n    Internet.  When this is the case, phonenet\
    \ addresses of the form\n    \"mbox@host\" will become \"mbox@host.CSNET\".  Despite\
    \ this change,\n    (which cannot help but be for the better, as the use of\n\
    \    source-routing leads to a plethora of problems), message munging\n    will\
    \ still occur as it will most likely be necessary to add domain\n    names during\
    \ message transmission (see section 6.2.2 of the 822\n    standard).\n    For\
    \ an alternate reason, consider that it is not unlikely for users\n    to wish\
    \ to transform mail from their archives which conforms to an\n    older standard\
    \ to the current standard.  There could be many\n    reasons for this, although\
    \ a common one would be that a user wishes\n    to re-introduce the message into\
    \ the transport system.  Although\n    the aged message was perfectly valid when\
    \ it was composed (e.g., in\n    the days of the 733 standard), it might no longer\
    \ conform to the\n    current standard (i.e., 822).  In this case, a user agent\
    \ would\n    have to perform message munging, in order to make the message\n \
    \   acceptable to the local transport agent.\n    To summarize, even under the\
    \ most \"homogeneous\" of environments,\n    message munging will still be required\
    \ on the part of transport and\n    user agents, under certain conditions.\n \
    \   Section 3.4.10 of the 822 standard briefly discusses the topic of\n    \"\
    Network-Specific Transformations\".  In short, the 822 standard\n    envisions\
    \ a message traversing net-A to reach net-B as going\n    through three phases:\n\
    \to Transformation\n\t  The message is made to conform to net-A's standards\n\t\
    o Transformation Reversal\n\t  Net-A's idiosyncrasies are removed and the message\
    \ now\n\t  conforms to the 822 standard\n\to Transformation\n\t  The message is\
    \ made to conform to net-B's standards\n    This memo concerns itself solely with\
    \ this section of the 822\n    standard.  The 822 standard presents end-of-line\
    \ sequences as an\n    example of an area where transformation might occur.  Although\
    \ this\n    is a valid concern, our emphasis deals with constructs of higher\n\
    \    semantics: fields and structured field values.\n\t\t\t\t Scope\n    This\
    \ memo does not specify the particular transformation rules that\n    should be\
    \ used when munging a message from one standard to another.\n    Rather, this\
    \ memo attempts to make clear the policies that are to\n    be followed when implementing\
    \ any munging agent for the ARPA\n    Internet.  The derivation of the formulas\
    \ specific to message\n    munging between two given standards is left to the\
    \ implementors of\n    such munging systems or to the writers of future RFCs.\
    \  As such,\n    this memo can be considered to present the philosophy and\n \
    \   conceptual basis of message munging in the ARPA Internet.\n\t NOTE:  It is\
    \ critical that this position be understood.  The\n\t actual policies used by\
    \ domain-specific munging agents is\n\t completely beyond the scope of this memo.\n\
    \    For ease of explanation, some of the examples in this memo use\n    message\
    \ munging between the ARPA Internet and the USENET\n    distribution network as\
    \ an example.  This memo should NOT be\n    considered to specify how this particular\
    \ munging activity should\n    take place.  Instead, this context has been chosen\
    \ for its\n    familiarity and simplicity.\n\t\t\t Message Decomposition\n   \
    \ A munging agent concerns itself with transforming a message in\n    conformance\
    \ with a source standard to a message in conformance with a\n    target standard.\
    \  This transformation occurs at various levels.  Four\n    of these are presented\
    \ here.\n    o Field Transformation\n\t For two standards, some fields may convey\
    \ identical semantics\n\t but have different names.  As standards progress, for\n\
    \t example, the names of fields may change, but the presence of\n\t those fields\
    \ and their contents continue to have the same\n\t meaning.  For example, prior\
    \ to 822 standard, some mailers\n\t considered the Remailed- prefix to have semantics\
    \ equivalent\n\t to the 822 standard's Resent- prefix.  In this circumstance,\n\
    \t one aspect of message munging would be to simply substitute\n\t the field names.\n\
    \    o Value Transformation\n\t The value of certain fields may be viewed as containing\n\
    \t structured components.  The syntax and semantics of these\n\t components may\
    \ differ significantly between two formats.  In\n\t this circumstance, one aspect\
    \ of message munging would be to\n\t transform components from one representation\
    \ to another.\n    o Field/Value Combination\n\t The semantics of a given header\
    \ in a particular standard may\n\t not be directly expressed using a single header\
    \ from another\n\t standard.  In this circumstance, one aspect of message munging\n\
    \t would be to map the field/value of a header in the source\n\t message to any\
    \ number of headers in the target message (or\n\t vice-versa).  As expected, further\
    \ complication could result\n\t by performing value transformation in addition\
    \ to one-to-many\n\t or many-to-one field transformation.\n    o Header Ordering\n\
    \t Some standards may require that fields appear in a particular\n\t order in\
    \ the headers part of the message.  Others make no\n\t requirements as to the\
    \ order in which the fields appear.  In\n\t this circumstance, one aspect of message\
    \ munging from the\n\t latter to the former standard would be to capture the essential\n\
    \t information from the source message in order to construct the\n\t first field\
    \ of the target message. As expected, further\n\t complication could result by\
    \ requiring several field/values be\n\t consulted in the source message before\
    \ sufficient context is\n\t present to construct the first field of the target\
    \ message.\n\t\t\t    Canonical Forms\n    Fundamental to the activity of transformation\
    \ is the notion of a\n    canonical form.  For a given message standard, each\
    \ field and\n    structured field value may be thought of as an object with a\n\
    \    particular semantics that is representable by one or more strings.\n    That\
    \ is, each of these strings has an identical semantics, as they\n    all refer\
    \ to the same object.  For example, in terms of the 822\n    standard, the two\
    \ strings\n\tThe Protocol Police <NetSer@UCI>\n\tNetSer@UCI\n    are semantically\
    \ equivalent.  For the purposes of this memo, a\n    fully-qualified canonical\
    \ form of an object is thought of as the\n    simplest string that represents\
    \ the full and complete meaning of an\n    object.  The meaning of \"simple\"\
    \ is, of course, open to\n    interpretation.  In some cases, \"simplest\" may\
    \ mean \"shortest\".  In\n    other cases, a longer, but unabbreviated string\
    \ may be \"simpler\"\n    than a shorter string. Regardless of this, a canonical\
    \ form is a\n    representation of an object.  This representation contains the\n\
    \    smallest amount of information required to fully describe the\n    meaning\
    \ of the object.\n    It is not difficult to determine what a canonical form should\n\
    \    describe for different objects.  In terms of the 822 standard, the\n    following\
    \ should be considered as minimal definitions of canonical\n    forms:\n\tobject\t\
    \tspecifies\tcontains\n\t------\t\t---------\t--------\n\tfield\t\tfield-name\t\
    name\n\taddress\t\tmailbox\t\tlocal-part\n\t\t\t\t\tdomain-part\n\tdate\t\tdate-time\
    \ \tdate-part\n\t\t\t\t\ttime-part\n    In terms of USENET, the following might\
    \ be considered as minimal\n    definitions of canonical forms:\n\tobject\t\t\
    specifies\tcontains\n\t------\t\t---------\t--------\n\tfield\t\tfield-name\t\
    name\n\taddress\t\tmailbox\t\tuser\n\t\t\t\t\troute\n\tdate\t\tdate-time \tdate-part\n\
    \t\t\t\t\ttime-part\n\t NOTE:  This memo clearly has no authority to specify the\n\
    \t minimal canonical forms for USENET.  The above table is listed\n\t solely for\
    \ the benefit of the examples which follow.\n    Conceptually, transformation\
    \ of fields and structured field values\n    occurs between canonical forms. \
    \ That is, to transform an address,\n    one reduces the string representing the\
    \ object to its canonical\n    form, to capture the essence of its meaning, and\
    \ this form is then\n    transformed, somehow, to the equivalent canonical form\
    \ for the\n    target standard.  This target canonical form can later be output\n\
    \    using a string representation.\n\t NOTE:  This memo does not require that\
    \ canonical forms be\n\t represented or otherwise implemented as strings.  Nor\
    \ does\n\t this standard require that strings be used during the\n\t transformation\
    \ process. Thinking of a canonical form as a\n\t string is a convenient formalism\
    \ only, not an implementational\n\t requirement.\n\t\t\t Transformation Rules\n\
    \    All of the forms of message decomposition discussed above may now\n    be\
    \ viewed as transformation between canonical forms.  Hence, it now\n    becomes\
    \ necessary to consider how canonical forms should be\n    manipulated during\
    \ transformation.  That is, what rules are to be\n    followed when constructing\
    \ an equivalent canonical form?  There are\n    several guidelines that must be\
    \ followed, that we will characterize\n    in the following fashion:\n    o Preservation\
    \ of information\n\t All attempts must be made to preserve all information\n\t\
    \ contained in the original canonical form.  This information\n\t can be highly\
    \ useful to the recipients of munged messages.\n\t Obviously, for two widely-differing\
    \ formats, this may not be\n\t possible.  For example, some standards may not\
    \ have a group\n\t addressing notation such as the one present in the 822\n\t\
    \ standard, e.g., the notation\n\t\tList: Support@UCI, ZOTnet@UCI;\n\t might not\
    \ be permitted.  If one were to consider membership in\n\t a group as part of\
    \ an address' canonical form, then this\n\t portion of the canonical form could\
    \ not be transformed to the\n\t other standard.\n\t The 822 standard supports\
    \ a liberal commenting convention\n\t which might prove quite useful in preserving\
    \ information.\n\t Implementors may wish to consider capturing the original\n\t\
    \ information in commentary text.  For example, if the USENET\n\t address\n\t\t\
    mark@cbosgd.UUCP (Mark Horton)\n\t had the USENET canonical of\n\t\t user:  mark\n\
    \t        route:  ucbvax!ihnp4!cbosgd\n\t and if the corresponding 822 canonical\
    \ was\n\t   local-part:\tucbvax!ihnp4!cbosgd!mark\n\t  domain-part:\tUSENET.UCI\n\
    \t then it would not be unreasonable for an implementation to\n\t output this\
    \ canonical form as\n\t\t\"mark@cbosgd.UUCP\" <ucbvax!ihnp4!cbosgd!mark@USENET.UCI>\n\
    \t      NOTE:  Implementors should exercise extreme caution in\n\t      using\
    \ a policy such as this.  Information placed between\n\t      commentary delimiters\
    \ must still conform to the target\n\t      standard at the syntactic level.\n\
    \t Note however that in the above example, the commentary\n\t information \"(Mark\
    \ Horton)\" was discarded.  This practice is\n\t strongly discouraged.  Although\
    \ the canonical form for an\n\t object does not rely on commentary information\
    \ as a necessary\n\t part, implementors are encouraged to preserve this information\n\
    \t whenever possible.\n\t Finally, preservation of information requires preservation\
    \ of\n\t case at all costs.  Only under the most restrictive of\n\t circumstances\
    \ should an implementation change the case of the\n\t strings output for a canonical\
    \ form.\n    o Re-Formatting\n\t Ideally, the target message should have the exact\
    \ horizontal\n\t and vertical padding as the source message.  Because a string\n\
    \t representing the source canonical form of an object may not be\n\t of the same\
    \ length as the string representing the target\n\t canonical form, the number\
    \ of characters on each physical and\n\t logical line in the headers may be different.\n\
    \t The 822 standard supports a header folding convention which\n\t permits long\
    \ field/value pairs to be represented on more than\n\t one physical line.  When\
    \ a new canonical form is output to the\n\t target message, it is possible that\
    \ the resulting field/value\n\t pair may be longer than the number of characters\
    \ that\n\t antiquated display devices can present on a single line. The\n\t 822\
    \ standard suggests 65 or 72 characters-per-line as a metric\n\t for this limitation.\
    \  Although not required, message munging\n\t agents may re-fold headers if (and\
    \ only if) this limitation is\n\t exceeded.  Note however that under no circumstances\
    \ should a\n\t header be re-folded if it was not munged.  Refolding without\n\t\
    \ munging may occur on behalf of some transport or user agent,\n\t but it may\
    \ not occur on behalf of a munging agent.  Put more\n\t simply, this memo does\
    \ not authorize or forbid such activity,\n\t although it does discourage it.\n\
    \    o Error Recovery\n\t The preceding discussion has made been under the assumption\n\
    \t that the objects composing the field/value pairs of the source\n\t message\
    \ have conformed to the source standard. It is an\n\t unfortunate reality that\
    \ this may not be the case. In fact,\n\t for those standards which are poorly\
    \ specified (if at all),\n\t determining that an object is improperly constructed\
    \ might be\n\t quite difficult.  In addition, it is possible, though\n\t hopefully\
    \ extremely improbable that a target canonical form\n\t does not exist for a particular\
    \ source canonical form.  In\n\t these cases, munging agents must be able to recover.\n\
    \t At this point, we introduce two extension fields for the 822\n\t standard.\
    \  As such, these fields are hereby designated as\n\t \"reserved\" and may not\
    \ be used for other purposes.  These\n\t fields are:\n\t\tIllegal-Field\n\t\t\
    Illegal-Object\n\t The syntax of these fields is as follows:\n\t\tmunge-field\
    \ =\n\t\t     \"Illegal-Field\"\t\":\" *text\n\t\t  /  \"Illegal-Object\"\t\"\
    :\" *text\n\t\tmunge-object =\n\t\t     <a \"field-name\", the exact field-names\
    \ which are\n\t\t      valid will be presented later>\n\t The semantics of these\
    \ fields are as follows:\n\t An Illegal-Field header should be introduced when\
    \ a\n\t header-line which does not conform to the source standard is\n\t found\
    \ in the source message.  Illegal-Field should be used\n\t only when a header-line\
    \ is so poorly formed as to prevent\n\t recognition of the field in the header-line.\
    \  For example, if\n\t the line lacks a colon, or has a poorly formed field-name,\n\
    \t then it should not be output to the target message and a new\n\t header-line\
    \ should be introduced in its place.  This\n\t header-line has Illegal-Field as\
    \ its field and contains the\n\t offending line as its value.  Illegal-Field should\
    \ not be used\n\t if the field can be identified, but the value is poorly\n\t\
    \ formed.\n\t An Illegal-Object header should be introduced when an object\n\t\
    \ in the source message can not be parsed into a canonical form,\n\t or if the\
    \ canonical form it represents has no corresponding\n\t target canonical form.\
    \  The offending object should not be\n\t output to the target message in the\
    \ header-line in which it\n\t occurs.  If the header-line now contains no objects,\
    \ then the\n\t header-line should not be output to the target message as\n\t well.\
    \  Then, an Illegal-Object field should be introduced into\n\t the target message.\
    \  The value of this Illegal-Object field\n\t should at the very minimum contain\
    \ the name of the field that\n\t contained the object, the object in question,\
    \ and an\n\t explanation as to why the object was illegal.  Alternately,\n\t the\
    \ value of this Illegal-Object field should consist of the\n\t entire header-line\
    \ (field and value) that contained the object\n\t in question along with an explanation\
    \ as to why the object was\n\t illegal.\n\t      NOTE:  In the circumstance where\
    \ multiple objects exist\n\t      in a single header-line in the source message,\
    \ and one of\n\t      those objects is determined to be illegal, the actual\n\t\
    \      policy used in determining how much information can be\n\t      considered\
    \ to be \"uncorrupted\" is left to the\n\t      implementors.  Munging agents\
    \ which use sophisticated\n\t      parsers may attempt to recover in mid-stream\
    \ (so to\n\t      speak) and continue parsing objects on the header-line.\n\t\
    \      Other agents may wish to continue recover with the next\n\t      header-line\
    \ in the source message.  Regardless of the\n\t      policy used, the agent must\
    \ present the contents of the\n\t      entire header-line in the associated Illegal-Object\n\
    \t      header.\n\t Implementations should not take extraordinary measures to\n\
    \t perform syntax/semantics checking of the source message --\n\t only those fields\
    \ which must be examined should be rigorously\n\t checked.  This memo strongly\
    \ discourages any additional\n\t examination.  It is not the intention of this\
    \ memo to suggest\n\t that composing agents should produce messages which do not\n\
    \t conform to the source standard.  A composing agent should not\n\t expect a\
    \ munging agent to enforce adherence to the source\n\t standard.\n    o Introduction\
    \ of Information\n\t Munging agents are authorized to introduce a \"Received\"\
    \ header\n\t into the target message when a message is transformed.\n\t      NOTE:\
    \  Adding a \"Received\" header is entirely optional.\n\t      This memo strongly\
    \ recommends that this header be\n\t      introduced whenever some munging (translation\
    \ of addresses\n\t      and/or dates) occurs.\n\t      NOTE:  Although this memo\
    \ does not specify the position\n\t      that the introduced header should have\
    \ in relation to the\n\t      other fields in the target message, it is strongly\n\
    \t      recommended that the introduced header be grouped with\n\t      the other\
    \ \"Received\" headers, at the very beginning of\n\t      the message.\n\t When\
    \ introducing a \"Received\" field, three phrases, which are\n\t normally optional\
    \ in such a field, should be specified by the\n\t munging agent.  These are:\n\
    \t\t\"from\" domain\t\t# the source domain\n\t\t\"by\"   domain\t\t# the target\
    \ domain\n\t\t\"with\" protocol\t\t# the munging agent's host\n\t For example,\
    \ suppose we have a munging agent on the UCI host,\n\t and that this agent services\
    \ a USENET/ARPA boundary.  When the\n\t UCI host gets a message from the USENET\
    \ domain for the ARPA\n\t domain, the following happens:  First, the UCI mailsystem\
    \ would\n\t prepend the header:\n\t   Received: from nma by UCI with UUCP; 15\
    \ Dec 83 03:53:00 PST\n\t Second, the munging agent, when transforming the message,\n\
    \t would prepend the header:\n\t   Received: from USENET by ARPA with UCI; 15\
    \ Dec 03:54:00 PST\n\t Finally, the UCI mailsystem would then deliver the message\
    \ to\n\t the appropriate ARPA mailsystem, which in turn would prepend\n\t the\
    \ header:\n\t   Received: from UCI by ISIF with SMTP; 15 Dec 83 03:55:00 PST\n\
    \t This example might be a bit clearer if the domains were\n\t qualified a bit\
    \ more.  The first three lines of the message\n\t could look like this:\n\t  \
    \ Received: from UCI.ARPA by ISIF.ARPA; 15 Dec 83 03:55:00 PST\n\t   Received:\
    \ from USENET by ARPA with UCI; 15 Dec 03:54:00 PST\n\t   Received: from nma.USENET\
    \ by UCI.USENET; 15 Dec 83 03:53:00 PST\n\t The key point to notice is that the\
    \ munging agent used the\n\t \"from\" and \"by\" clauses to denote the domain\
    \ boundary that was\n\t crossed, and used the \"with\" clause to denote itself.\
    \  Since\n\t the agent is munging the message according to some set of\n\t transformation\
    \ rules, it is actually using a \"mail protocol\",\n\t and as such is justified\
    \ in identifying itself in the \"with\"\n\t clause.\n\t\t\t  Objects of Interest\n\
    \    At present, only three types of objects are of interest: fields,\n    addresses,\
    \ and dates.  In the context of the 822 standard,\n    header-lines containing\
    \ the following fields are to be viewed as\n    appropriate for transformation:\n\
    \     Address Fields:\tFrom, Sender, Reply-To, To, cc, Bcc,\n\t\t\tand any of\
    \ these fields with the Resent- prefix\n\tDate Fields:\tDate, Resent-Date\n  \
    \  Hence the definition of munge-object, in 822 terms, is:\n\t\tmunge-object =\n\
    \t\t     \"From\"\n\t\t  /  \"Sender\"\n\t\t  /  \"Reply-To\"\n\t\t  /  \"To\"\
    \n\t\t  /  \"cc\"\n\t\t  /  \"Bcc\"\n\t\t  /  \"Resent-From\"\n\t\t  /  \"Resent-Sender\"\
    \n\t\t  /  \"Resent-Reply-To\"\n\t\t  /  \"Resent-To\"\n\t\t  /  \"Resent-cc\"\
    \n\t\t  /  \"Resent-Bcc\"\n\t\t  /  \"Date\"\n\t\t  /  \"Resent-Date\"\n\t NOTE:\
    \  The list of munge-objects is extensible.  For the\n\t purposes of this memo,\
    \ the above fields are defined as the\n\t MINIMUM list of munge-objects for the\
    \ 822 standard.\n\t Implementors are encouraged to introduce other fields to the\n\
    \t list of munge-objects as their munging agents require.  These\n\t additions\
    \ should also be registered with the revisions of this\n\t memo as they gain popularity.\n\
    \    For the purposes of the remainder of this memo, an address\n    header-line\
    \ is defined as any header-line in the source message\n    whose field component\
    \ is one of the fields listed above as an\n    address field.  Further, a date\
    \ header-line is defined as any\n    header-line in the source message whose field\
    \ component is one of\n    the fields listed above as an date field.\n    If address\
    \ munging is performed, then all addresses contained in\n    all address header-lines\
    \ must be munged.  It is expressly forbidden\n    to perform address munging on\
    \ the source message and without\n    performing address munging on every address\
    \ header-line.  Further,\n    it is expressly forbidden to munge some, but not\
    \ all, of the\n    addresses in any address header-line.  All addresses in all\
    \ of the\n    message's address header-lines must be address munged. If address\n\
    \    munging is not performed, then these header-lines need not be\n    considered\
    \ for munging.\n    A similar requirement is made for date munging.  If date munging\
    \ is\n    performed, then all instances of header-lines whose field is Date\n\
    \    or Resent-Date must be fully date munged.\n\t NOTE:  Certain fields are to\
    \ be excluding from munging of any\n\t sort, all munging agents must preserve\
    \ their contents exactly.\n\t At present, there is one such field: \"Received\"\
    .  This contents\n\t of this field should ALWAYS be preserved for trace and\n\t\
    \ debugging purposes.\n\t\t\t     Bibliography\n    D.H. Crocker, \"Standard for\
    \ the Format of ARPA Internet Text\n    Messages\", RFC 822, (August, 1982).\n\
    \    M.R. Horton, \"Standard for the Interchange of USENET Messages\", RFC\n \
    \   850, (June, 1983).\n    M.T. Rose, \"Achieving Interoperability between two\
    \ Domains --\n    Connecting the ZOTnet and UUCP Computer Mail Networks\", Technical\n\
    \    Report Number 201, Department of Information and Computer Science,\n    University\
    \ of California, Irvine, (January, 1983).\n    P.V. Mockapetris, \"Domain Names\
    \ -- Concepts and Facilities\", RFC\n    882, (November, 1983).\n\t\t\t      Appendices\n\
    \t\t\tMinimal Canonical Forms\n    This memo defines the minimal canonical forms\
    \ for the 822 standard.\n    Implementations may wish to augment these forms with\
    \ additional\n    information that may be present in the source message.  An earlier\n\
    \    example suggested that group membership might be part of an\n    address'\
    \ canonical form.  Further, since the 822 standard permits\n    routes to be specified\
    \ in addresses, e.g.,\n\tFred Rated <@ISI-Troll.ARPA,@UCI-750a.UCI: FRated@UCI-750b>\n\
    \    Perhaps they too should be considered part of the 822 address'\n    canonical\
    \ form?\n    This memo makes no such requirement, if implementations wish to\n\
    \    make use of this additional information, then they are free to do\n    so.\
    \  This practice is neither encouraged nor discouraged. In short\n    the spirit\
    \ of this memo is to require those minimal components\n    required by the 822\
    \ standard, nothing more.\n"
