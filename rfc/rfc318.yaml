- title: __initial_text__
  contents:
  - "                            Telnet Protocol\n   At the October 1971 Network Working\
    \ Group Meeting, I promised to\n   promptly produce a document which clearly and\
    \ succinctly specified\n   and explained the Official Telnet Protocol.  This document\
    \ fails to\n   meet any part of that promise.  This document was not produced\n\
    \   promptly.  This document is neither clear nor succinct.  There is NO\n   Official\
    \ Telnet Protocol.\n   The following pages present my understanding of the ad\
    \ hoc Telnet\n   protocol.  There are some who have serious questions about this\n\
    \   protocol.  The proposed changes to the protocol are given in Section\n   IV.\n\
    \   Any comments should be promptly directed to me via the Network\n   Information\
    \ Center (Ident = JBP) or by phone (213) 825-2368 or by\n   mail.\n          \
    \                    Jon Postel\n                              SPADE Group\n \
    \                             3804 Boelter Hall\n                            \
    \  UCLA\n                              Los Angeles, California 90024\n"
- title: I.  DEFINITION OF THE NETWORK VIRTUAL TERMINAL
  contents:
  - "I.  DEFINITION OF THE NETWORK VIRTUAL TERMINAL\n   The Network Virtual Terminal\
    \ (NVT) is a bi-directional character\n   device.  The characters are represented\
    \ by 8 bit codes.  The NVT has\n   no timing characteristics.  The character codes\
    \ 0 through 127 are the\n   USASCII codes.  (Note all code values are given in\
    \ decimal.)  The\n   codes 128 through 255 are used for special control signals.\
    \  The NVT\n   is described as having a printer and a keyboard.  The printer\n\
    \   responds to incoming data and the keyboard produces outgoing data.\n"
- title: The Printer
  contents:
  - "The Printer\n   The NVT printer has an unspecified carriage width (common values\
    \ are\n   40, 72, 80, 120, 128, 132).  The printer can produce representations\n\
    \   of all 95 USASCII graphics (codes 32 through 126).  Of the 33 USASCII\n  \
    \ control codes (0 through 31 and 127) the following 8 have specific\n   meaning\
    \ to the NVT printer.\n   NAME                  CODE    MEANING\n   NULL (NUL)\
    \            0       A no operation.\n   BELL (BEL)            7       Produces\
    \ an audible or visible signal.\n   Back Space (BS)       8       Backspaces the\
    \ printer one character\n                                 position.\n   Horizontal\
    \ Tab (HT)   9       Moves the printer to next horizontal\n                  \
    \               tab stop.\n   Line Feed (LF)        10      Moves the printer\
    \ to next line (keeping\n                                 the same horizontal\
    \ position).\n   Vertical Tab (VT)     11      Moves the printer to the next vertical\n\
    \                                 tab stop.\n   Form Feed (FF)        12     \
    \ Moves the printer to the top of the\n                                 next page.\n\
    \   Carriage Return (CR)  13      Moves the printer to the left margin\n     \
    \                            of the current line.\n   The remaining USASCII codes\
    \ (1 through 6, 14 through 31, and 127) do\n   not cause the NVT printer to take\
    \ any action.\n"
- title: The Keyboard
  contents:
  - "The Keyboard\n   The NVT Keyboard has keys or key combinations or key sequences\
    \ for\n   generating all of the 128 USASCII codes.  Note that although there\n\
    \   are codes which have no effect on the NVT printer, the NVT Keyboard\n   is\
    \ capable of generating these codes.\n"
- title: The End of the Line Convention
  contents:
  - "The End of the Line Convention\n   The end of a line of text shall be indicated\
    \ by the character\n   sequence Carriage Return Line Feed (CR, LF).  This convention\
    \ applies\n   to both the sending (Keyboard) and receiving (Printer)  (virtual)\n\
    \   mechanisms.\n"
- title: Break and Reverse Break
  contents:
  - "Break and Reverse Break\n   The Telnet control signals provide a BREAK signal\
    \ which can be used\n   to simulate the use of the break or attention or interrupt\
    \ button\n   found on most terminals.  This signal has no effect on the NVT. \
    \ When\n   the BREAK Telnet control signal is used from server to user it is\n\
    \   sometimes called \"reverse break\".  Such a reverse break has no effect\n\
    \   on the NVT.\n"
- title: II.  DEFINITION OF TELNET PROTOCOL
  contents:
  - "II.  DEFINITION OF TELNET PROTOCOL\n   The purpose of Telnet Protocol is to provide\
    \ a standard method of\n   interfacing terminals devices at one site to processes\
    \ at another\n   site.\n   The Telnet Protocol is built up from three major substructures,\
    \ first\n   the Initial Connection Protocol (ICP), second the Network Virtual\n\
    \   Terminal (NVT), and third the Telnet control signals described\n   herein.\n\
    \   Telnet user and server processes follow the ICP to establish\n   connections.\
    \  The term \"Logger\" has been associated with the set of\n   processes in the\
    \ serving system which respond to the ICP and perform\n   the initial interactions\
    \ e.g. obtain a name and password.  The ICP is\n   defined and the initial socket\
    \ number and byte size parameters are\n   defined in \"Current Network Protocols\"\
    \ (NIC #7104).\n   The data transmitted between the user and server programs (and\
    \ vice\n   versa) is treated as a character stream with embedded control\n   signals.\n\
    \   Note that all code values are given in decimal.\n"
- title: TELNET CONTROL SIGNALS
  contents:
  - "TELNET CONTROL SIGNALS\n   NAME             CODE    MEANING\n   DATA MARK   \
    \     128     Used to mark a point in the data stream.\n                     \
    \       Used in conjunction with INS.  See SYNCH.\n   BREAK            129   \
    \  User-to-Server:  Has the same meaning to\n                            the server\
    \ as the \"Break,\" \"Interrupt,\" or\n                            \"Attention\"\
    \ button found on many terminals.\n                            Server-to-User:\
    \  Has the same meaning to\n                            to use as the \"reverse\
    \ break\" used with\n                            some terminals.\n   NOP     \
    \         130     No Operation.\n   NO ECHO          131     User-to-Server: \
    \ Asks the server not to\n                            return Echos of the transmitted\
    \ data.\n                            Server-to-User:  States that the server is\n\
    \                            not sending echos of the transmitted data.\n    \
    \                        Sent only as a reply to ECHO or NO ECHO,\n          \
    \                  or to end the hide your input.\n   ECHO             132   \
    \  User-to-Server:  Asks the server to send\n                            Echos\
    \ of the transmitted data.\n                            Server-to User:  States\
    \ that the server is\n                            sending echos of the transmitted\
    \ data.\n                            Sent only as a reply to ECHO or NO ECHO.\n\
    \   Hide your input  133     The intention is that a server will send\n      \
    \                      this signal to a user system which is\n               \
    \             echoing locally (to the user) when the user\n                  \
    \          is about to type something secret (e.g. a\n                       \
    \     password).  In this case, the user system\n                            is\
    \ to suppress local echoing or overprint\n                            the input\
    \ (or something) until the server\n                            sends a NOECHO\
    \ signal.  In situations where\n                            the user system is\
    \ not echoing locally,\n                            this signal must not be sent\
    \ by the server.\n   INS              ---     This is the \"Interrupt on Send\"\
    \ signal,\n                            defined by the Host-to-Host protocol and\n\
    \                            implemented by the Network Control Program\n    \
    \                        (NCP).  See SYNCH.\n   SYNCH            ---     This\
    \ is a condition indicated by the\n                            combination of\
    \ the DATA MARK and the INS.\n                            User-to-Server:  The\
    \ Server is to examine\n                            the input data stream looking\
    \ for a DATA\n                            MARK signal; if a DATA MARK is found,\
    \ the\n                            server must not process further until an\n\
    \                            INS is received.  If the server receives an\n   \
    \                         INS, it is required to examine the data\n          \
    \                  stream at once, taking any appropriate\n                  \
    \          action on \"break type\" characters (e.g.\n                       \
    \     etx, sub, BREAK), up to a DATA MARK signal\n                           \
    \ and thereupon continue its normal processing.\n                            The\
    \ passed over characters may be discarded.\n                            Server-to-User:\
    \  If the user finds a DATA\n                            MARK in the data stream,\
    \ it must wait for\n                            an INS.  If the user receives\
    \ an INS, it\n                            must examine and discard characters\
    \ up to\n                            and including a DATA MARK.\n"
- title: DATA TYPES
  contents:
  - "DATA TYPES\n   Telnet normally deals in ASCII characters, but there are provisions\n\
    \   for escaping to other code sets.  If one of these escapes is used, it\n  \
    \ is undefined (here) whether or not the Telnet signals still have\n   meaning\
    \ or even how to return to the ASCII set:  The Telnet signals\n   used to indicate\
    \ a change of code set are:\n                      CODE          MEANING\n   \
    \                   160           ASCII - Standard Telnet\n                  \
    \    161           Transparent\n                      162           EBCDIC\n"
- title: USER TELNET SIGNALS
  contents:
  - "USER TELNET SIGNALS\n   The following signals are to be available to the human\
    \ user to cause\n   the user Telnet to take the indicated action.\n   Transmit\
    \ Now         -  Transmit all data entered and locally\n                     \
    \      buffered now.  Intended to be used with line\n                        \
    \   mode.\n   Suppress end-of-line -  Transmit all data entered and locally\n\
    \                           buffered now, and do not transmit the\n          \
    \                 end-of-line immediately following this signal.\n"
- title: STANDARD TELNET IMPLEMENTATION
  contents:
  - "STANDARD TELNET IMPLEMENTATION\n   Using Site\n   1)  User is able to enter and\
    \ transmit all ASCII codes\n   2)  User is able to cause the Telnet signals BREAK,\
    \ SYNCH, ECHO and\n       NOECHO to be transmitted.\n   3)  Provides for the User\
    \ Telnet signals, (e.g. Transmit Now).\n   4)  Implements the CR LF end-of-line\
    \ convention.\n   5)  Provides local echo for local user terminals.\n   6)  Correctly\
    \ processes the Telnet signals BREAK, SYNCH, NOP, ECHO,\n       NOECHO, and Hide\
    \ Your Input received from the server.\n   Serving Site:\n   1)  Provides a mapping\
    \ between ASCII and the local character set.\n   2)  Correctly processes the Telnet\
    \ signals BREAK, SYNCH, NOP, NOECHO,\n       and ECHO.\n   3)  Implements the\
    \ CR LF end-of-line convention.\n   4)  Assumes the using site provides echoing.\
    \  May provide a server\n       echo mode.\n"
- title: MINIMUM TELNET IMPLEMENTATION
  contents:
  - "MINIMUM TELNET IMPLEMENTATION\n   Using Site:\n   1)  User must be able to enter\
    \ and transmit all ASCII codes.\n   2)  Ignore and delete all Telnet signals from\
    \ the serving site.\n   3)  Provide local echo for local user terminals.\n   4)\
    \  Implements CR LF end-of-line convention.\n   5)  Provide for the User Telnet\
    \ signals.\n   Serving Site:\n   1)  Provide a mapping between ASCII and the local\
    \ character set.\n   2)  Ignore and Delete all Telnet signals from the using site.\n\
    \   3)  Assume the using site provides echoing.\n   4)  Implements the CR LF end-of-line\
    \ convention.\n"
- title: III.  DISCUSSION OF TELNET PROTOCOL
  contents:
  - "III.  DISCUSSION OF TELNET PROTOCOL\n   The use of a standard, network-wide,\
    \ intermediate representation of\n   terminal code between sites is intended to\
    \ eliminate the need for\n   using and serving sites to keep information about\
    \ the characteristics\n   of each other's terminals and terminal handling conventions.\
    \  This\n   approach can be successful, but only if the user, the using site,\
    \ and\n   the serving site assume certain responsibilities.\n   1.  The serving\
    \ site must specify how the intermediate code will be\n       mapped by it into\
    \ the terminal codes that are expected at that\n       site.\n   2.  The user\
    \ must be familiar with that mapping.\n   3.  The using site must provide some\
    \ means for the user to enter all\n       of the intermediate codes, and as a\
    \ convenience, special Telnet\n       signals, as well as specify for the user\
    \ how the signals from the\n       serving site will be presented at the user\
    \ terminal.\n   Other schemes were considered but rejected.  For example, a proposal\n\
    \   that the using site be responsible for translating to and from the\n   code\
    \ expected by the serving site was rejected since it required that\n   the using\
    \ site keep tables of all serving site codes and provide a\n   mapping for each\
    \ case.  The information would require constant\n   maintenance as new hosts were\
    \ added to the network.\n"
- title: Character Set
  contents:
  - "Character Set\n   Since it is not known how the current or future sites will\
    \ specify\n   the mapping between the network-wide standard code (7 bit ASCII\
    \ in an\n   8 bit field) and the codes expected from their own terminals, it\n\
    \   seems necessary to permit the user to cause transmission of every one\n  \
    \ of the 128 ASCII codes, plus (for full user power) selected signals\n   (either\
    \ of a Telnet control nature, or of a special terminal nature\n   such as break\
    \ or attention).\n   There was strong feeling about the importance of the user/system\n\
    \   interface at the using site, but equally strong feeling that this\n   problem\
    \ is one of local implementation and should reflect the using\n   site installation\
    \ philosophy rather than be subject to network-wide\n   standards.  Some topics\
    \ of consideration in this area are:\n      1.  How to represent special graphics,\
    \ not available at the using\n          site, at the user's terminal.\n      2.\
    \  Treatment of upper/lower case problem on upper case only\n          devices.\n\
    \          a.  Representing lower-case output.\n          b.  Providing users\
    \ with shift and shiftlock signals.\n      3.  Incorporating editing capability\
    \ in Telnet.\n      4.  Extending user options in Network mode not available to\
    \ local\n          users, e.g., hold output or kill print.\n      5.  Permit users\
    \ to specify how keyboard input is to the\n          translated, e.g., let a character\
    \ from the terminal cause a\n          specified string to be sent by the user's\
    \ Telnet.\n   The proposed solution to the Telnet Protocol problem seems to provide\n\
    \   a mechanism for a minimum implementation while providing a basis for\n   developing\
    \ richer sets or protocol for present and future use in\n   terminal applications,\
    \ process-process communications, and use by\n   other conventions to pass data\
    \ or control information.\n   The understanding that ASCII be used as a network-wide\
    \ code has been\n   established for some time.  Its use in Telnet provided a problem\
    \ with\n   respect to the limitation of a maximum character set of 128.  Some\n\
    \   systems provide for more than this number in their operation, and\n   therefore,\
    \ as serving sites, cannot map on a one-for-one basis.\n   Each such serving site\
    \ could probably provide a reasonably useful\n   character set, including all\
    \ system control signals, by mapping 128\n   of its codes and just not provide\
    \ a network user access to the other\n   codes.  However, any character left out\
    \ might later be used in a\n   major application at that site as a special control\
    \ signal.  This\n   could result in denying network users the facility offered\
    \ by that\n   application.  Serving sites are, therefore, encouraged to provide\
    \ a\n   full mapping between the ASCII code and the code used on the serving\n\
    \   system.  This may require that the server specify two character ASCII\n  \
    \ sequences which map to single characters in the servers character\n   set.\n\
    \   Notice that there are some ASCII codes which have no effect on the\n   NVT\
    \ printer.  These codes must be transmitted over the network when\n   output by\
    \ the serving process or by entered by the user.\n"
- title: End of Line Convention
  contents:
  - "End of Line Convention\n   The representation of the end of a physical line at\
    \ a terminal is\n   implemented differently on different network hosts.  For example,\n\
    \   some use a return (or new line) key, the terminal hardware both\n   returns\
    \ the carriage or printer to start of line and feeds the paper\n   to the next\
    \ line.  In other implementations, the user hits carriage\n   return and the hardware\
    \ returns carriage while the software sends the\n   terminal a line feed.  The\
    \ network-wide representation is carriage\n   return followed by line feed.  It\
    \ represents the physical formatting\n   that is being attempted, and is to be\
    \ interpreted and appropriately\n   translated by both using site and serving\
    \ site.\n      EXAMPLE:  A Multics user is working, through the network, on some\n\
    \      serving site host.  In the course of the session the user has\n      numerous\
    \ occasions to hit New Line on his Model 37 TTY.  Each time\n      the Multics\
    \ system is awakened by a New Line interrupt, the line\n      of buffered characters\
    \ is passed to Telnet where it is scanned for\n      special characters.  If none\
    \ is found, carriage return followed by\n      line feed is inserted where New\
    \ Line was entered, and the line is\n      turned over the NCP for transmission.\
    \  Correspondingly, when the\n      Multics Telnet finds the carriage return line\
    \ feed sequence in the\n      data stream coming from the serving site, the two\
    \ characters are\n      replaced with the appropriate New Line code which is sent\
    \ to the\n      terminal.\n   Telnet defines the end of a line to be indicated\
    \ by the ASCII\n   character pair CR LR.  Several of the real devices in the world\
    \ have\n   only a single new line (NL) function.  Several of the computer\n  \
    \ systems have in some programs used the CR and LF functions to have\n   semantic\
    \ meaning larger than the format effect they provide.\n   Further, several computer\
    \ systems allow the CR and LF functions to be\n   used separately (e.g., such\
    \ that a line may be overprinted).  One\n   problem, for those Telnet (user) programs\
    \ required to map the NVT\n   into a device which only has a NL function, is how\
    \ is the CR LF to be\n   dealt with.  One solution is to examine the character\
    \ following the\n   CR.  If an LF is found, then perform the NL function; if anything\n\
    \   else is found then back space to the beginning of the line.  Another\n   problem\
    \ is the case of a computer system which locally uses period,\n   \".\", to cause\
    \ the new line function and which uses, in some programs,\n   CR and LF for semantically\
    \ significant operations.  Suppose the user\n   Telnet sends the sequence CR LF.\
    \  Does this mean \"new line\" or the\n   \"CR operation\" followed by the \"\
    LF operation \"?  A solution to this\n   problem it to require that Telnet programs\
    \ send a CR NOT intended to\n   be part of a CR LF pair as a CR NUL pair.  Then\
    \ the receiving program\n   can always hold a CR and examine the next character\
    \ to determine if a\n   new line function is intended.  This solution is strongly\n\
    \   recommended.\n   One other question arises here,  \"Is it permitted to send\
    \ the Telnet\n   signal NOP (code 130) between a CR and a LF when these are intended\n\
    \   to signify new line?\"  The answer is \"yes, the NOP signal may occur\n  \
    \ anywhere in the data stream.\"\n"
- title: Echoing
  contents:
  - "Echoing\n   The decision to have the assumed condition for echo be that the using\n\
    \   site will provide any echo necessary for its terminals was taken\n   because\
    \ of the difficulties faced by some installations that cannot\n   turn off their\
    \ echo or that have terminals that print locally as a\n   result of key strokes.\
    \  Serving sites could take the position \"have\n   user turn echo off,\" but\
    \ this seems an unnecessary burden on the\n   user.  In addition, some serving\
    \ sites may choose not to supply any\n   echo service, in which case the no echo\
    \ assumption will supply a\n   network-wide condition, while other assumptions\
    \ would give a mixed\n   starting condition.\n   The convention of using \"ECHO,\"\
    \ \"NO ECHO\" signals seems to fill both\n   the requirements for dynamic echo\
    \ control and for a minimum\n   implementation of Telnet Protocol.  Note that\
    \ when the user request\n   ECHO or NO ECHO the server replies by switching to\
    \ the desired mode\n   (and possibly returning the signal for the new mode), or\
    \ by\n   continuing in the current mode and returning the signal for the\n   current\
    \ mode.  The server never spontaneously sends an ECHO or NO\n   ECHO signal. \
    \ Except that a NOECHO may be used to cancel a HIDE YOUR\n   INPUT.\n"
- title: Hide Your Input
  contents:
  - "Hide Your Input\n   The HIDE YOUR INPUT signal presents some difficulty in that\
    \ it is\n   unclear how much is to be hidden.  The server site usually knows how\n\
    \   long the secret is but the user Telnet in general does not.\n   Furthermore,\
    \ if the user site cannot suppress the local echoing,\n   there is a difficult\
    \ implementation problem.  One possibility is for\n   the using site to overprint\
    \ a full line with a mask, then have the\n   user type his secret on the mask.\
    \  If the secret were longer than one\n   line, the use of the mask should be\
    \ repeated.\n   The use of HIDE YOUR INPUT can be avoided altogether by having\
    \ the\n   serving site send a mask (which it knows to be just long enough) on\n\
    \   which the user is to type the secret information.\n      EXAMPLE:\n      \
    \   1.  Default assumption is user site is echoing\n         2.  Server-to User:\
    \  Password Please CR LF\n         3.  Server-to-User:  XXXXCRIIIIICRMMMMCR NUL\n\
    \         4.  User-to-Server:  \"password\" CR LF\n         5.  Server-to-User:\
    \  Ready CR LF\n"
- title: Breaks and Attentions
  contents:
  - "Breaks and Attentions\n   There is a special control signal on some terminals\
    \ that has no\n   corresponding bit pattern in ASCII, but is transmitted by a\
    \ special\n   electrical signal.  This control signal is Attn on a 2741 and Break\n\
    \   on a Teletype.  This signal is represented by the Telnet control\n   signal\
    \ BREAK.  There is a corresponding control signal for use from\n   serving sites\
    \ to using sites for reverse break.  Notice, however,\n   that the NVT is a bi-directional\
    \ character device, thus there is no\n   need to \"turn the line around\".\n \
    \  Some systems treat the Break as an extra code available for use in\n   conjunction\
    \ with the data stream.  For example, one system uses Break\n   as a special editing\
    \ code meaning \"delete the current line to this\n   point.\"  In these cases,\
    \ the code may simply be inserted in the data\n   stream with no special additional\
    \ action by the user.\n   Other systems use Break or Attn in special interrupt\
    \ fashion, to mean\n   stop processing the application and give me the supervisor,\
    \ or cancel\n   the present job, etc.  (Other systems which inspect input on a\n\
    \   character at a time basis use normal characters for this purpose,\n   such\
    \ as <etx>.) In these cases, because of differences in the ways\n   both serving\
    \ and using sites operate, it is necessary to take a route\n   in addition to\
    \ the normal Telnet data stream to indicate that the\n   special control signal\
    \ is embedded in the data stream.\n   Example -- Problem:\n      The PDP-10 normally\
    \ will, when it fills its input buffer, continue\n      to accept characters from\
    \ a terminal examining each to see if it\n      is a control character, then act\
    \ on it if it is or throw it away\n      if it is not.\n      Since the Telnet\
    \ server at the serving site is at the mercy of the\n      NCP with respect to\
    \ controlling the bunching, and therefore,\n      arrival at the Telnet of bursts\
    \ of characters, Telnet\n      implementations might be expected to choke off\
    \ flow to the buffers\n      until they are ready to accept characters without\
    \ throwing them\n      away.\n      Under this condition, the serving process\
    \ might be outputting to\n      the using terminal, the input buffers at the server\
    \ fill up, (with\n      user generated characters) and <etx> get stuck (at the\
    \ user's\n      site) in the data stream that has been choked off.\n   A similar\
    \ problem could occur with Multics or some IBM system as a\n   line at a time\
    \ server.  The user at a using site gets his process at\n   the serving site into\
    \ an output loop and wants to break the process\n   without having to release\
    \ his Telnet connection.  The buffers clog\n   the connection, transmission is\
    \ choked off, and the <etx>, Break, or\n   other user control signal gets stuck\
    \ in the pipeline.\n   Example -- Solution:\n      The user at the using site\
    \ knows he is entering a special control\n      signal (Break, Attn, <etx>, etc.)\
    \ and follows it with a SYNCH.\n      (The local instructions at using sites for\
    \ accomplishing this may\n      differ from site to site.)\n         User to Using\
    \ Site Telnet\n            Send SYNCH.\n         Using Site Telnet to Serving\
    \ Site Telnet:\n            DATA MARK in Data Stream.\n         Using Site Telnet\
    \ to Using Site NCP:\n            Send an INS.\n         Serving Site NCP to Telnet\
    \ Server:\n            Interrupt \"INS received\".\n         Serving Site Telnet:\n\
    \            Examines the input data stream (looking for special control\n   \
    \         signals) until it sees DATA MARK then resumes normal\n            handling.\n\
    \            Thus, depending on the server's local implementation to\n       \
    \     provide adequate service, a special handling of the data\n            stream\
    \ can be invoked whenever an INS is received in order\n            to get to the\
    \ special character.  When it sees DATA MARK, it\n            recognizes it as\
    \ a synchronization point and knowing that\n            the special character\
    \ has been passed on, strips the DATA\n            MARK from the data stream and\
    \ returns to normal mode.\n            If the DATA MARK arrives before the INS,\
    \ the serving site\n            should not process the data stream further until\
    \ an INS is\n            received.\n   This approach to handling selected special\
    \ characters or signals\n   relieves the using Telnet processes from having to\
    \ recognize the\n   special serving site characters, as well as from having to\
    \ know how\n   the serving site wants to handle them.  At the same time, the\n\
    \   procedure requires only a minimum level of user understanding of the\n   serving\
    \ site.  This seems appropriate, since the Telnet ASCII\n   conventions are providing\
    \ a Network Virtual Terminal, not a Network\n   Virtual User.\n   Notice that\
    \ the correct order is (1) special character or signal\n   (e.g. BREAK or <etx>),\
    \ then (2) SYNCH.\n"
- title: User Telnet Signals
  contents:
  - "User Telnet Signals\n   The ability of the user to cause the using site Telnet\
    \ to send any\n   combination of ASCII characters in a string, and only that\n\
    \   combination, is viewed as important to the user utility of the Telnet\n  \
    \ ASCII conventions.  Because of this, some user sites may find it\n   necessary\
    \ to provide special local Telnet signals from the human user\n   to the using\
    \ site Telnet.\n      Example:\n      A user on a line at a time system (Multics,\
    \ System 360, GCOS,\n      etx.), which require an end of line signal before processing\
    \ the\n      user's input, is working through the Network on a serving site\n\
    \      that operates a character at a time.  The application is a\n      debugging\
    \ aid that permits the user to type in \"location=\" to\n      which it will respond\
    \ with n where n represents the current\n      contents of that location.  The\
    \ serving site process does not\n      expect to see the \"location=\" followed\
    \ by a carriage return line\n      feed sequence.  The user at the using site\
    \ should be able to type\n      in the location, follow it with a signal (to the\
    \ user Telnet) to\n      suppress the end of line convention, followed by the\
    \ end of line\n      signal, and expect the \"location=\" to be transmitted immediately\n\
    \      without an end of line sequence being transmitted to the server.\n    \
    \  Example:\n      In another case, a using site has decided that it is convenient\
    \ to\n      accumulate four characters at a time and transmit them to the\n  \
    \    serving site, unless an end of line signal is observed, in which\n      case\
    \ the end of line sequence is sent preceded by whatever number\n      of characters\
    \ have been accumulated (presumably three or less).\n      In the same debugging\
    \ application, the address is such that the\n      end does not correspond with\
    \ the four character buffer\n      demarcation.  The user should have the ability\
    \ to enter a code for\n      \"transmit immediately\" in place of the end of line\
    \ signal in order\n      to preserve neat formatting, and expect the address to\
    \ be sent to\n      the serving site.\n   Telnet Signals have been discussed and\
    \ those introduced to date are\n   probably sufficient for an implementation of\
    \ Telnet ASCII convention.\n"
- title: Terminology
  contents:
  - "Terminology\n   ASCII          - The USASCII character set as defined in NIC\
    \ # 7104.\n                    In Telnet Protocol, where eight bit codes are used\n\
    \                    the lower half of the code set is defined to be\n       \
    \             ASCII.\n   echoing        - The display of a character entered is\
    \ called echoing.\n                    There are two modes in which this happens.\
    \  If\n                    the device used to enter characters displays the\n\
    \                    character before (or as) it transmits the character\n   \
    \                 to the computer the echoing mode is called \"local\n       \
    \             echo.\"  If, on the other hand, the device transmits\n         \
    \           the entered character to the computer without\n                  \
    \  displaying it and the computer then transmits a\n                    character\
    \ to the device for the echo display, this\n                    echoing mode is\
    \ called \"remote echo.\"\n   character mode - In this mode of operation Telnet\
    \ transmits each\n                    character as soon as possible.  Generally\
    \ speaking,\n                    character mode is used when all of the using\
    \ terminal,\n                    using system, and serving system are operating\n\
    \                    in a remote echo mode.  The echos to the user\n         \
    \           entered characters are transmitted from the serving\n            \
    \        system (i.e., over the network).\n   line mode      - In this mode of\
    \ operation Telnet transmits groups\n                    of characters which constitute\
    \ lines.  Generally\n                    speaking, this mode is used when one\
    \ or more of\n                    the using terminal, using system, or serving\n\
    \                    system is operating in a local echo mode.  The\n        \
    \            echos to the user entered characters are not\n                  \
    \  transmitted over the network).\n   full duplex    - This term indicates a transmission\
    \ procedure using\n                    a four wire connection, which permits simultaneous\n\
    \                    transmission in both directions.\n   half duplex    - This\
    \ term indicates a transmission procedure using\n                    a two wire\
    \ connection, which requires that data be\n                    transmitted in\
    \ only one direction at at time.\n   Note that half duplex devices usually are\
    \ also local echo but that\n   full duplex devices may be either local echo or\
    \ remote echo.\n"
- title: IV.  PROPOSED CHANGES TO TELNET PROTOCOL
  contents:
  - "IV.  PROPOSED CHANGES TO TELNET PROTOCOL\n   The changes suggested here are not\
    \ my ideas, thus the presentation may\n   be faulty.  I welcome RFC or other communication\
    \ suggesting other\n   changes or better arguments for and against these changes.\n"
- title: Echoing
  contents:
  - "Echoing\n   It is proposed to delete from Telnet the control signals ECHO, NOECHO,\n\
    \   and HIDE YOUR INPUT.  For Server systems which do not provide echoing,\n \
    \  these commands are useless.  For server systems which do provide\n   echoing\
    \ experience has shown that the control is most effectively\n   provided by server\
    \ system commands.\n"
- title: Data Types
  contents:
  - "Data Types\n   It is proposed to delete all mention of data types from Telnet.\n\
    \   Either the character stream is ASCII or its not a Telnet\n   communication.\
    \  If it is really necessary to change the data type, a\n   command in ASCII could\
    \ be sent in the data stream.\n"
- title: Minimum Implementation
  contents:
  - "Minimum Implementation\n   It is proposed that the minimum implementation require\
    \ the user Telnet\n   to allow the user to send and the server Telnet to correctly\
    \ process\n   all the Telnet control signals.\n   The  work on Telnet Protocol\
    \ has involved many people.  This document\n   is taken from RFC's #139 and #158\
    \ by Tom O'Sullivan.  Others who\n   have served on committees are:\n        \
    \            Bob Bressler           MIT-DMCG\n                    Will Crowther\
    \          BBN\n                    Bob Long               SDC\n             \
    \       Alex McKenzie          BBN\n                    John Melvin          \
    \  SRI-ARC\n                    Bob Metcalfe           MIT-DMCG\n            \
    \        Ed Meyer               MIT-Multics\n                    Tol O'Sullivan\
    \         Raytheon\n                    Mike Padlipsky         Mit-Multics\n \
    \                   Jon Postel             UCLA-NMC\n                    Bob Sundberg\
    \           Harvard\n                    Joel Winett            LL\n         \
    \           Steve Wolfe            UCLA-CCN\n        [This RFC was put into machine\
    \ readable form for entry]\n     [into the online RFC archives by Kelly Tardif,\
    \ Viaginie 10/99]\n"
