- title: __initial_text__
  contents:
  - '         Application-Layer Traffic Optimization (ALTO) Protocol

    '
- title: Abstract
  contents:
  - "Abstract\n   Applications using the Internet already have access to some topology\n\
    \   information of Internet Service Provider (ISP) networks.  For\n   example,\
    \ views to Internet routing tables at Looking Glass servers\n   are available\
    \ and can be practically downloaded to many network\n   application clients. \
    \ What is missing is knowledge of the underlying\n   network topologies from the\
    \ point of view of ISPs.  In other words,\n   what an ISP prefers in terms of\
    \ traffic optimization -- and a way to\n   distribute it.\n   The Application-Layer\
    \ Traffic Optimization (ALTO) services defined in\n   this document provide network\
    \ information (e.g., basic network\n   location structure and preferences of network\
    \ paths) with the goal of\n   modifying network resource consumption patterns\
    \ while maintaining or\n   improving application performance.  The basic information\
    \ of ALTO is\n   based on abstract maps of a network.  These maps provide a simplified\n\
    \   view, yet enough information about a network for applications to\n   effectively\
    \ utilize them.  Additional services are built on top of\n   the maps.\n   This\
    \ document describes a protocol implementing the ALTO services.\n   Although the\
    \ ALTO services would primarily be provided by ISPs, other\n   entities, such\
    \ as content service providers, could also provide ALTO\n   services.  Applications\
    \ that could use the ALTO services are those\n   that have a choice to which end\
    \ points to connect.  Examples of such\n   applications are peer-to-peer (P2P)\
    \ and content delivery networks.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This\
    \ document is a product of the Internet Engineering Task Force\n   (IETF).  It\
    \ represents the consensus of the IETF community.  It has\n   received public\
    \ review and has been approved for publication by the\n   Internet Engineering\
    \ Steering Group (IESG).  Further information on\n   Internet Standards is available\
    \ in Section 2 of RFC 5741.\n   Information about the current status of this document,\
    \ any errata,\n   and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc7285.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2014 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................6\n\
    \      1.1. Problem Statement ..........................................6\n  \
    \         1.1.1. Requirements Language ...............................7\n    \
    \  1.2. Design Overview ............................................7\n   2. Terminology\
    \ .....................................................7\n      2.1. Endpoint\
    \ ...................................................8\n      2.2. Endpoint Address\
    \ ...........................................8\n      2.3. Network Location ...........................................8\n\
    \      2.4. ALTO Information ...........................................8\n  \
    \    2.5. ALTO Information Base ......................................8\n   3.\
    \ Architecture ....................................................8\n      3.1.\
    \ ALTO Services and Protocol Scope ...........................9\n      3.2. ALTO\
    \ Information Reuse and Redistribution .................11\n   4. ALTO Information\
    \ Service Framework .............................11\n      4.1. ALTO Information\
    \ Services .................................12\n           4.1.1. Map Service\
    \ ........................................12\n           4.1.2. Map-Filtering\
    \ Service ..............................12\n           4.1.3. Endpoint Property\
    \ Service ..........................12\n           4.1.4. Endpoint Cost Service\
    \ ..............................13\n   5. Network Map ....................................................13\n\
    \      5.1. Provider-Defined Identifier (PID) .........................13\n  \
    \    5.2. Endpoint Addresses ........................................14\n    \
    \  5.3. Example Network Map .......................................14\n   6. Cost\
    \ Map .......................................................15\n      6.1. Cost\
    \ Types ................................................16\n           6.1.1.\
    \ Cost Metric ........................................16\n           6.1.2. Cost\
    \ Mode ..........................................17\n      6.2. Cost Map Structure\
    \ ........................................18\n      6.3. Network Map and Cost\
    \ Map Dependency .......................18\n      6.4. Cost Map Update ...........................................19\n\
    \   7. Endpoint Properties ............................................19\n  \
    \    7.1. Endpoint Property Type ....................................19\n    \
    \       7.1.1. Endpoint Property Type: pid ........................19\n   8. Protocol\
    \ Specification: General Processing .....................19\n      8.1. Overall\
    \ Design ............................................19\n      8.2. Notation ..................................................20\n\
    \      8.3. Basic Operations ..........................................21\n  \
    \         8.3.1. Client Discovering Information Resources ...........21\n    \
    \       8.3.2. Client Requesting Information Resources ............22\n      \
    \     8.3.3. Server Responding to Information Resource Request ..22\n        \
    \   8.3.4. Client Handling Server Response ....................23\n          \
    \ 8.3.5. Authentication and Encryption ......................23\n           8.3.6.\
    \ Information Refreshing .............................24\n           8.3.7. Parsing\
    \ of Unknown Fields ..........................24\n      8.4. Server Response Encoding\
    \ ..................................24\n           8.4.1. Meta Information ...................................24\n\
    \           8.4.2. Data Information ...................................25\n  \
    \    8.5. Protocol Errors ...........................................25\n    \
    \       8.5.1. Media Type .........................................25\n      \
    \     8.5.2. Response Format and Error Codes ....................25\n        \
    \   8.5.3. Overload Conditions and Server Unavailability ......28\n   9. Protocol\
    \ Specification: Information Resource Directory .........28\n      9.1. Information\
    \ Resource Attributes ...........................29\n           9.1.1. Resource\
    \ ID ........................................29\n           9.1.2. Media Type\
    \ .........................................29\n           9.1.3. Capabilities\
    \ .......................................29\n           9.1.4. Accepts Input Parameters\
    \ ...........................29\n           9.1.5. Dependent Resources ................................30\n\
    \      9.2. Information Resource Directory (IRD) ......................30\n  \
    \         9.2.1. Media Type .........................................30\n    \
    \       9.2.2. Encoding ...........................................30\n      \
    \     9.2.3. Example ............................................32\n        \
    \   9.2.4. Delegation Using IRD ...............................35\n          \
    \ 9.2.5. Considerations of Using IRD ........................37\n   10. Protocol\
    \ Specification: Basic Data Types ......................38\n      10.1. PID Name\
    \ .................................................38\n      10.2. Resource ID\
    \ ..............................................38\n      10.3. Version Tag ..............................................38\n\
    \      10.4. Endpoints ................................................39\n  \
    \         10.4.1. Typed Endpoint Addresses ..........................39\n    \
    \       10.4.2. Address Type ......................................39\n      \
    \     10.4.3. Endpoint Address ..................................40\n        \
    \   10.4.4. Endpoint Prefixes .................................40\n          \
    \ 10.4.5. Endpoint Address Group ............................41\n      10.5. Cost\
    \ Mode ................................................41\n      10.6. Cost Metric\
    \ ..............................................42\n      10.7. Cost Type ................................................42\n\
    \      10.8. Endpoint Property ........................................42\n  \
    \         10.8.1. Resource-Specific Endpoint Properties .............43\n    \
    \       10.8.2. Global Endpoint Properties ........................43\n   11.\
    \ Protocol Specification: Service Information Resources .........43\n      11.1.\
    \ Meta Information .........................................43\n      11.2. Map\
    \ Service ..............................................43\n           11.2.1.\
    \ Network Map .......................................44\n           11.2.2. Mapping\
    \ IP Addresses to PIDs for\n                   'ipv4'/'ipv6' Network Maps ........................46\n\
    \           11.2.3. Cost Map ..........................................47\n  \
    \    11.3. Map-Filtering Service ....................................50\n    \
    \       11.3.1. Filtered Network Map ..............................50\n      \
    \     11.3.2. Filtered Cost Map .................................53\n      11.4.\
    \ Endpoint Property Service ................................57\n           11.4.1.\
    \ Endpoint Property .................................58\n      11.5. Endpoint\
    \ Cost Service ....................................61\n           11.5.1. Endpoint\
    \ Cost .....................................61\n   12. Use Cases .....................................................64\n\
    \      12.1. ALTO Client Embedded in P2P Tracker ......................65\n  \
    \    12.2. ALTO Client Embedded in P2P Client: Numerical Costs ......66\n    \
    \  12.3. ALTO Client Embedded in P2P Client: Ranking ..............67\n   13.\
    \ Discussions ...................................................68\n      13.1.\
    \ Discovery ................................................68\n      13.2. Hosts\
    \ with Multiple Endpoint Addresses ...................68\n      13.3. Network\
    \ Address Translation Considerations ...............69\n      13.4. Endpoint and\
    \ Path Properties .............................69\n   14. IANA Considerations\
    \ ...........................................70\n      14.1. application/alto-*\
    \ Media Types ...........................70\n      14.2. ALTO Cost Metric Registry\
    \ ................................71\n      14.3. ALTO Endpoint Property Type\
    \ Registry .....................73\n      14.4. ALTO Address Type Registry ...............................75\n\
    \      14.5. ALTO Error Code Registry .................................76\n  \
    \ 15. Security Considerations .......................................76\n    \
    \  15.1. Authenticity and Integrity of ALTO Information ...........77\n      \
    \     15.1.1. Risk Scenarios ....................................77\n        \
    \   15.1.2. Protection Strategies .............................77\n          \
    \ 15.1.3. Limitations .......................................77\n      15.2. Potential\
    \ Undesirable Guidance from Authenticated ALTO\n            Information ..............................................78\n\
    \           15.2.1. Risk Scenarios ....................................78\n  \
    \         15.2.2. Protection Strategies .............................78\n    \
    \  15.3. Confidentiality of ALTO Information ......................79\n      \
    \     15.3.1. Risk Scenarios ....................................79\n        \
    \   15.3.2. Protection Strategies .............................79\n          \
    \ 15.3.3. Limitations .......................................80\n      15.4. Privacy\
    \ for ALTO Users ...................................80\n           15.4.1. Risk\
    \ Scenarios ....................................80\n           15.4.2. Protection\
    \ Strategies .............................80\n      15.5. Availability of ALTO\
    \ Services ............................81\n           15.5.1. Risk Scenarios ....................................81\n\
    \           15.5.2. Protection Strategies .............................81\n  \
    \ 16. Manageability Considerations ..................................81\n    \
    \  16.1. Operations ...............................................82\n      \
    \     16.1.1. Installation and Initial Setup ....................82\n        \
    \   16.1.2. Migration Path ....................................82\n          \
    \ 16.1.3. Dependencies on Other Protocols and\n                   Functional Components\
    \ .............................83\n           16.1.4. Impact and Observation on\
    \ Network Operation .......83\n      16.2. Management ...............................................84\n\
    \           16.2.1. Management Interoperability .......................84\n  \
    \         16.2.2. Management Information ............................84\n    \
    \       16.2.3. Fault Management ..................................84\n      \
    \     16.2.4. Configuration Management ..........................84\n        \
    \   16.2.5. Performance Management ............................85\n          \
    \ 16.2.6. Security Management ...............................85\n   17. References\
    \ ....................................................85\n      17.1. Normative\
    \ References .....................................85\n      17.2. Informative\
    \ References ...................................86\n   Appendix A. Acknowledgments\
    \ .......................................89\n   Appendix B. Design History and\
    \ Merged Proposals ...................90\n"
- title: 1.  Introduction
  contents:
  - '1.  Introduction

    '
- title: 1.1.  Problem Statement
  contents:
  - "1.1.  Problem Statement\n   This document defines the ALTO Protocol, which provides\
    \ a solution\n   for the problem stated in [RFC5693].  Specifically, in today's\n\
    \   networks, network information such as network topologies, link\n   availability,\
    \ routing policies, and path costs are hidden from the\n   application layer,\
    \ and many applications benefited from such hiding\n   of network complexity.\
    \  However, new applications, such as\n   application-layer overlays, can benefit\
    \ from information about the\n   underlying network infrastructure.  In particular,\
    \ these new network\n   applications can be adaptive; hence, they can become more\
    \ network\n   efficient (e.g., reduce network resource consumption) and achieve\n\
    \   better application performance (e.g., accelerated download rate), by\n   leveraging\
    \ network-provided information.\n   At a high level, the ALTO Protocol specified\
    \ in this document is an\n   information-publishing interface that allows a network\
    \ to publish its\n   network information such as network locations, costs between\
    \ them at\n   configurable granularities, and endhost properties to network\n\
    \   applications.  The information published by the ALTO Protocol should\n   benefit\
    \ both the network and the applications (i.e., the consumers of\n   the information).\
    \  Either the operator of the network or a third\n   party (e.g., an information\
    \ aggregator) can retrieve or derive\n   related information of the network and\
    \ publish it using the ALTO\n   Protocol.\n   To allow better understanding of\
    \ the goal of the ALTO Protocol, this\n   document provides a short, non-normative\
    \ overview of the benefits of\n   ALTO to both networks and applications:\n  \
    \ o  A network that provides ALTO information can achieve better\n      utilization\
    \ of its networking infrastructure.  For example, by\n      using ALTO as a tool\
    \ to interact with applications, a network is\n      able to provide network information\
    \ to applications so that the\n      applications can better manage traffic on\
    \ more expensive or\n      difficult-to-provision links such as long-distance,\
    \ transit, or\n      backup links.  During the interaction, the network can choose\
    \ to\n      protect its sensitive and confidential network state information,\n\
    \      by abstracting real metric values into non-real numerical scores\n    \
    \  or ordinal ranking.\n   o  An application that uses ALTO information can benefit\
    \ from better\n      knowledge of the network to avoid network bottlenecks.  For\n\
    \      example, an overlay application can use information provided by\n     \
    \ the ALTO services to avoid selecting peers connected via high-\n      delay\
    \ links (e.g., some intercontinental links).  Using ALTO to\n      initialize\
    \ each node with promising (\"better-than-random\") peers,\n      an adaptive\
    \ peer-to-peer overlay may achieve faster, better\n      convergence.\n"
- title: 1.1.1.  Requirements Language
  contents:
  - "1.1.1.  Requirements Language\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\"\
    , \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"\
    MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described\
    \ in RFC 2119 [RFC2119].\n"
- title: 1.2.  Design Overview
  contents:
  - "1.2.  Design Overview\n   The ALTO Protocol specified in this document meets\
    \ the ALTO\n   requirements specified in [RFC5693], and unifies multiple protocols\n\
    \   previously designed with similar intentions.  See Appendix A for a\n   list\
    \ of people and Appendix B for a list of proposals that have made\n   significant\
    \ contributions to this effort.\n   The ALTO Protocol uses a REST-ful (Representational\
    \ State Transfer\n   (REST)) design [Fielding-Thesis], and encodes its requests\
    \ and\n   responses using JSON [RFC7159].  These designs are chosen because of\n\
    \   their flexibility and extensibility.  In addition, these designs make\n  \
    \ it possible for ALTO to be deployed at scale by leveraging existing\n   HTTP\
    \ [RFC7230] implementations, infrastructures and deployment\n   experience.\n\
    \   The ALTO Protocol uses a modular design by dividing ALTO information\n   publication\
    \ into multiple ALTO services (e.g., the Map service, the\n   Map-Filtering Service,\
    \ the Endpoint Property Service, and the\n   Endpoint Cost Service).  Each ALTO\
    \ service provides a given set of\n   functionalities and is realized by a set\
    \ of information resources,\n   which are announced by information resource directories,\
    \ to guide\n   ALTO clients.\n"
- title: 2.  Terminology
  contents:
  - "2.  Terminology\n   This document uses the following terms defined in [RFC5693]:\n\
    \   Application, Overlay Network, Peer, Resource, Resource Identifier,\n   Resource\
    \ Provider, Resource Consumer, Resource Directory, Transport\n   Address, ALTO\
    \ Server, ALTO Client, ALTO Query, ALTO Response, ALTO\n   Transaction, Local\
    \ Traffic, Peering Traffic, and Transit Traffic.\n   This document extends the\
    \ term \"ALTO Service\" defined in [RFC5693].\n   In particular, by adopting a\
    \ modular design, this document allows the\n   ALTO Protocol to provide multiple\
    \ ALTO services.\n   This document also uses the following additional terms: Endpoint\n\
    \   Address, Network Location, ALTO Information, and ALTO Information\n   Base.\n"
- title: 2.1.  Endpoint
  contents:
  - "2.1.  Endpoint\n   An endpoint is an application or host that is capable of\n\
    \   communicating (sending and/or receiving messages) on a network.\n   An endpoint\
    \ is typically either a resource provider or a resource\n   consumer.\n"
- title: 2.2.  Endpoint Address
  contents:
  - "2.2.  Endpoint Address\n   An endpoint address represents the communication address\
    \ of an\n   endpoint.  Common forms of endpoint addresses include IP addresses,\n\
    \   Media Access Control (MAC) addresses, and overlay IDs.  An endpoint\n   address\
    \ can be network-attachment based (e.g., IP address) or\n   network-attachment\
    \ agnostic (e.g., MAC address).\n   Each endpoint address has an associated address\
    \ type, which indicates\n   both its syntax and semantics.\n"
- title: 2.3.  Network Location
  contents:
  - "2.3.  Network Location\n   This document uses network location as a generic term\
    \ to denote a\n   single endpoint or a group of endpoints.  For instance, it can\
    \ be a\n   single IPv4 or IPv6 address, an IPv4 or IPv6 prefix, or a set of\n\
    \   prefixes.\n"
- title: 2.4.  ALTO Information
  contents:
  - "2.4.  ALTO Information\n   This document uses ALTO information as a generic term\
    \ to refer to the\n   network information provided by an ALTO server.\n"
- title: 2.5.  ALTO Information Base
  contents:
  - "2.5.  ALTO Information Base\n   This document uses the term ALTO information\
    \ base to refer to the\n   internal representation of ALTO information maintained\
    \ by an ALTO\n   server.  Note that the structure of this internal representation\
    \ is\n   not defined by this document.\n"
- title: 3.  Architecture
  contents:
  - "3.  Architecture\n   This section defines the ALTO architecture and the ALTO\
    \ Protocol's\n   place in the overall architecture.\n"
- title: 3.1.  ALTO Services and Protocol Scope
  contents:
  - "3.1.  ALTO Services and Protocol Scope\n   Each network region in the global\
    \ Internet can provide its ALTO\n   services, which convey network information\
    \ from the perspective of\n   that network region.  A network region in this context\
    \ can be an\n   Autonomous System (AS), an ISP, a region smaller than an AS or\
    \ ISP,\n   or a set of ISPs.  The specific network region that an ALTO service\n\
    \   represents will depend on the ALTO deployment scenario and ALTO\n   service\
    \ discovery mechanism.\n   The ALTO services specified in this document define\
    \ network endpoints\n   (and aggregations thereof) and generic costs amongst them\
    \ from the\n   region's perspective.  The network endpoints may include all\n\
    \   endpoints in the global Internet.  We say that the network\n   information\
    \ provided by the ALTO services of a network region\n   represents the \"my-Internet\
    \ view\" of the network region.\n   The \"my-Internet view\" defined in this document\
    \ does not specify the\n   internal topology of a network, and hence, it is said\
    \ to provide a\n   \"single-node\" abstract topology.  Extensions to this document\
    \ may\n   provide topology details in \"my-Internet view\".\n   Figure 1 provides\
    \ an overall picture of ALTO's system architecture,\n   so that one can better\
    \ understand the ALTO services and the role of\n   the ALTO Protocol.  In this\
    \ architecture, an ALTO server prepares\n   ALTO information, an ALTO client uses\
    \ ALTO service discovery to\n   identify an appropriate ALTO server, and the ALTO\
    \ client requests\n   available ALTO information from the ALTO server using the\
    \ ALTO\n   Protocol.\n   The ALTO information provided by the ALTO server can\
    \ be updated\n   dynamically based on network conditions, or they can be seen\
    \ as a\n   policy that is updated on a longer time scale.\n   +-------------------------------------------------------------------+\n\
    \   |                         Network Region                            |\n  \
    \ |                                                                   |\n   |\
    \                    +-----------+                                  |\n   |  \
    \                  | Routing   |                                  |\n   |  +--------------+\
    \  | Protocols |                                  |\n   |  | Provisioning |  +-----------+\
    \                                  |\n   |  | Policy       |        |        \
    \                                |\n   |  +--------------+\\       |         \
    \                               |\n   |                   \\      |          \
    \                              |\n   |                    \\     |           \
    \                             |\n   |  +-----------+      \\+---------+      \
    \                +--------+  |\n   |  |Dynamic    |       | ALTO    | ALTO Protocol\
    \        | ALTO   |  |\n   |  |Network    |.......| Server  | ====================\
    \ | Client |  |\n   |  |Information|       +---------+                      +--------+\
    \  |\n   |  +-----------+      /                                /            |\n\
    \   |                    /         ALTO SD Query/Response /             |\n  \
    \ |                   /                                /              |\n   |\
    \          +----------+                  +----------------+         |\n   |  \
    \        | External |                  | ALTO Service   |         |\n   |    \
    \      | Interface|                  | Discovery (SD) |         |\n   |      \
    \    +----------+                  +----------------+         |\n   |        \
    \       |                                                   |\n   +-------------------------------------------------------------------+\n\
    \                   |\n         +------------------+\n         | Third Parties\
    \    |\n         |                  |\n         | Content Providers|\n       \
    \  +------------------+\n                     Figure 1: Basic ALTO Architecture\n\
    \   Figure 1 illustrates that the ALTO information provided by an ALTO\n   server\
    \ may be influenced (at the service provider's discretion) by\n   other systems.\
    \  In particular, the ALTO server can aggregate\n   information from multiple\
    \ systems to provide an abstract and unified\n   view that can be more useful\
    \ to applications.  Examples of other\n   systems include (but are not limited\
    \ to) static network configuration\n   databases, dynamic network information,\
    \ routing protocols,\n   provisioning policies, and interfaces to outside parties.\
    \  These\n   components are shown in the figure for completeness but are outside\n\
    \   the scope of this specification.  Recall that while the ALTO Protocol\n  \
    \ may convey dynamic network information, it is not intended to replace\n   near-real-time\
    \ congestion control protocols.\n   It may also be possible for an ALTO server\
    \ to exchange network\n   information with other ALTO servers (either within the\
    \ same\n   administrative domain or another administrative domain with the\n \
    \  consent of both parties) in order to adjust exported ALTO\n   information.\
    \  Such a protocol is also outside the scope of this\n   specification.\n"
- title: 3.2.  ALTO Information Reuse and Redistribution
  contents:
  - "3.2.  ALTO Information Reuse and Redistribution\n   ALTO information may be useful\
    \ to a large number of applications and\n   users.  At the same time, distributing\
    \ ALTO information must be\n   efficient and not become a bottleneck.\n   The\
    \ design of the ALTO Protocol allows integration with the existing\n   HTTP caching\
    \ infrastructure to redistribute ALTO information.  If\n   caching or redistribution\
    \ is used, the response message to an ALTO\n   client may be returned from a third\
    \ party.\n   Application-dependent mechanisms, such as P2P Distributed Hash Tables\n\
    \   (DHTs) or P2P file sharing, may be used to cache and redistribute\n   ALTO\
    \ information.  This document does not define particular\n   mechanisms for such\
    \ redistribution.\n   Additional protocol mechanisms (e.g., expiration times and\
    \ digital\n   signatures for returned ALTO information) are left for future\n\
    \   investigation.\n"
- title: 4.  ALTO Information Service Framework
  contents:
  - "4.  ALTO Information Service Framework\n   The ALTO Protocol conveys network\
    \ information through ALTO\n   information services (services for short), where\
    \ each service defines\n   a set of related functionalities.  An ALTO client can\
    \ request each\n   service individually.  All of the services defined in ALTO\
    \ are said\n   to form the ALTO service framework and are provided through a common\n\
    \   transport protocol; messaging structure and encoding; and transaction\n  \
    \ model.  Functionalities offered in different services can overlap.\n   The goals\
    \ of the ALTO information services defined in this document\n   are to convey\
    \ (1) network locations, which denote the locations of\n   endpoints at a network,\
    \ (2) provider-defined costs for paths between\n   pairs of network locations,\
    \ and (3) network-related properties of\n   endpoints.  The aforementioned goals\
    \ are achieved by defining the Map\n   Service, which provides the core ALTO information\
    \ to clients, and\n   three additional information services: the Map-Filtering\
    \ Service, the\n   Endpoint Property Service (EPS), and the Endpoint Cost Service\
    \ (ECS).\n   Additional information services can be defined in companion\n   documents.\
    \  Figure 2 gives an overview of the information services.\n   Details of the\
    \ services are presented in subsequent sections.\n        .-----------------------------------------.\n\
    \        | ALTO Information Services               |\n        | .-----------.\
    \ .----------. .----------. |\n        | |    Map-   | | Endpoint | | Endpoint\
    \ | |\n        | | Filtering | | Property | |   Cost   | |\n        | |  Service\
    \  | | Service  | | Service  | |\n        | `-----------' `----------' `----------'\
    \ |\n        | .-------------------------------------. |\n        | |  Map Service\
    \                        | |\n        | |  .-------------.  .--------------. \
    \ | |\n        | |  | Network Map |  |  Cost Map    |  | |\n        | |  `-------------'\
    \  `--------------'  | |\n        | `-------------------------------------' |\n\
    \        `-----------------------------------------'\n      Figure 2: ALTO Information\
    \ Service Framework\n"
- title: 4.1.  ALTO Information Services
  contents:
  - '4.1.  ALTO Information Services

    '
- title: 4.1.1.  Map Service
  contents:
  - "4.1.1.  Map Service\n   The Map Service provides batch information to ALTO clients\
    \ in the\n   forms of ALTO network maps (network maps for short) and ALTO cost\n\
    \   maps (cost maps for short).  An ALTO network map (See Section 5)\n   provides\
    \ a full set of network location groupings defined by the ALTO\n   server and\
    \ the endpoints contained within each grouping.  An ALTO\n   cost map (see Section\
    \ 6) provides costs between defined groupings.\n   These two maps can be thought\
    \ of (and implemented) as simple files\n   with appropriate encoding provided\
    \ by the ALTO server.\n"
- title: 4.1.2.  Map-Filtering Service
  contents:
  - "4.1.2.  Map-Filtering Service\n   Resource-constrained ALTO clients may benefit\
    \ from the filtering of\n   query results at the ALTO server.  This avoids the\
    \ situation in which\n   an ALTO client first spends network bandwidth and CPU\
    \ cycles to\n   collect results and then performs client-side filtering.  The\
    \ Map-\n   Filtering Service allows ALTO clients to query an ALTO server on ALTO\n\
    \   network maps and/or cost maps based on additional parameters.\n"
- title: 4.1.3.  Endpoint Property Service
  contents:
  - "4.1.3.  Endpoint Property Service\n   This service allows ALTO clients to look\
    \ up properties for individual\n   endpoints.  An example property of an endpoint\
    \ is its network\n   location (i.e., its grouping defined by the ALTO server).\
    \  Another\n   example property is its connectivity type such as ADSL (Asymmetric\n\
    \   Digital Subscriber Line), Cable, or FTTH (Fiber To The Home).\n"
- title: 4.1.4.  Endpoint Cost Service
  contents:
  - "4.1.4.  Endpoint Cost Service\n   Some ALTO clients may also benefit from querying\
    \ for costs and\n   rankings based on endpoints.  The Endpoint Cost Service allows\
    \ an\n   ALTO server to return costs directly amongst endpoints.\n"
- title: 5.  Network Map
  contents:
  - "5.  Network Map\n   An ALTO network map defines a grouping of network endpoints.\
    \  This\n   document uses ALTO network map to refer to the syntax and semantics\n\
    \   of how an ALTO server defines the grouping.  This document does not\n   discuss\
    \ the internal representation of this data structure within an\n   ALTO server.\n\
    \   The definition of ALTO network maps is based on the observation that,\n  \
    \ in reality, many endpoints are near by to one another in terms of\n   network\
    \ connectivity.  By treating a group of nearby endpoints\n   together as a single\
    \ entity, an ALTO server indicates aggregation of\n   these endpoints due to their\
    \ proximity.  This aggregation can also\n   lead to greater scalability without\
    \ losing critical information when\n   conveying other network information (e.g.,\
    \ when defining cost maps).\n"
- title: 5.1.  Provider-Defined Identifier (PID)
  contents:
  - "5.1.  Provider-Defined Identifier (PID)\n   One issue is that proximity varies\
    \ depending on the granularity of\n   the ALTO information configured by the provider.\
    \  In one deployment,\n   endpoints on the same subnet may be considered close;\
    \ while in\n   another deployment, endpoints connected to the same Point of Presence\n\
    \   (POP) may be considered close.\n   ALTO introduces provider-defined network\
    \ location identifiers called\n   Provider-defined Identifiers (PIDs) to provide\
    \ an indirect and\n   network-agnostic way to specify an aggregation of network\
    \ endpoints\n   that may be treated similarly, based on network topology, type,\
    \ or\n   other properties.  Specifically, a PID is a string of type PIDName\n\
    \   (see Section 10.1) and its associated set of endpoint addresses.  As\n   discussed\
    \ above, there can be many different ways of grouping the\n   endpoints and assigning\
    \ PIDs.  For example, a PID may denote a\n   subnet, a set of subnets, a metropolitan\
    \ area, a POP, an autonomous\n   system, or a set of autonomous systems.  Interpreting\
    \ the PIDs\n   defined in an ALTO network map using the \"single-node\" abstraction,\n\
    \   one can consider that each PID represents an abstract port (POP) that\n  \
    \ connects a set of endpoints.\n   A key use case of PIDs is to specify network\
    \ preferences (costs)\n   between PIDs instead of individual endpoints.  This\
    \ allows cost\n   information to be more compactly represented and updated at\
    \ a faster\n   time scale than the network aggregations themselves.  For example,\
    \ an\n   ISP may prefer that endpoints associated with the same POP in a P2P\n\
    \   application communicate locally instead of communicating with\n   endpoints\
    \ in other POPs.  The ISP may aggregate endpoints within a\n   POP into a single\
    \ PID in a network map.  The cost may be encoded to\n   indicate that network\
    \ locations within the same PID are preferred;\n   for example, cost(PID_i, PID_i)\
    \ == c and cost(PID_i, PID_j) > c for i\n   != j.  Section 6 provides further\
    \ details on using PIDs to represent\n   costs in an ALTO cost map.\n"
- title: 5.2.  Endpoint Addresses
  contents:
  - "5.2.  Endpoint Addresses\n   The endpoints aggregated into a PID are denoted\
    \ by endpoint\n   addresses.  There are many types of addresses, such as IP addresses,\n\
    \   MAC addresses, or overlay IDs.  This document specifies (in\n   Section 10.4)\
    \ how to specify IPv4/IPv6 addresses or prefixes.\n   Extension documents may\
    \ define further address types; Section 14.4 of\n   this document provides an\
    \ IANA registry for endpoint address types.\n"
- title: 5.3.  Example Network Map
  contents:
  - "5.3.  Example Network Map\n   This document uses the ALTO network map shown in\
    \ Figure 3 in most\n   examples.\n       .------------------------------------------------------------.\n\
    \       | An ALTO Network Map                                        |\n     \
    \  |                                                            |\n       |  .-----------------------------------.\
    \  .----------------. |\n       |  | NetLoc: PID-1                     |  | NetLoc:\
    \ PID-3  | |\n       |  |  .------------------------------. |  |             \
    \   | |\n       |  |  | 192.0.2.0/24                 | |  |  .-----------. | |\n\
    \       |  |  | .--------------------------. | |  |  | 0.0.0.0/0 | | |\n     \
    \  |  |  | | Endpoint: 192.0.2.34     | | |  |  `-----------` | |\n       |  |\
    \  | `--------------------------` | |  |                | |\n       |  |  `------------------------------`\
    \ |  |                | |\n       |  |  .------------------------------. |  |\
    \                | |\n       |  |  | 198.51.100.0/25              | |  |     \
    \           | |\n       |  |  | .--------------------------. | |  |          \
    \      | |\n       |  |  | | Endpoint: 198.51.100.100 | | |  |               \
    \ | |\n       |  |  | `--------------------------` | |  |                | |\n\
    \       |  |  `------------------------------` |  |                | |\n     \
    \  |  `-----------------------------------`  |                | |\n       |  \
    \                                       |                | |\n       |  .-----------------------------------.\
    \  |                | |\n       |  | NetLoc: PID-2                     |  |  \
    \              | |\n       |  |  .------------------------------. |  |       \
    \         | |\n       |  |  | 198.51.100.128/25            | |  |            \
    \    | |\n       |  |  `------------------------------` |  |                |\
    \ |\n       |  `-----------------------------------`  `----------------` |\n \
    \      `------------------------------------------------------------`\n      \
    \                 Figure 3: Example Network Map\n"
- title: 6.  Cost Map
  contents:
  - "6.  Cost Map\n   An ALTO server indicates preferences amongst network locations\
    \ in the\n   form of path costs.  Path costs are generic costs and can be\n  \
    \ internally computed by a network provider according to its own\n   policy.\n\
    \   For a given ALTO network map, an ALTO cost map defines path costs\n   pairwise\
    \ amongst the set of source and destination network locations\n   defined by the\
    \ PIDs contained in the network map.  Each path cost is\n   the end-to-end cost\
    \ when a unit of traffic goes from the source to\n   the destination.\n   Since\
    \ cost is directional from the source to the destination, an\n   application,\
    \ when using ALTO information, may independently determine\n   how the resource\
    \ consumer and resource provider are designated as the\n   source or destination\
    \ in an ALTO query and, hence, how to utilize the\n   path cost provided by ALTO\
    \ information.  For example, if the cost is\n   expected to be correlated with\
    \ throughput, a typical application\n   concerned with bulk data retrieval may\
    \ use the resource provider as\n   the source and the resource consumer as the\
    \ destination.\n   One advantage of separating ALTO information into network maps\
    \ and\n   cost maps is that the two types of maps can be updated at different\n\
    \   time scales.  For example, network maps may be stable for a longer\n   time\
    \ while cost maps may be updated to reflect more dynamic network\n   conditions.\n\
    \   As used in this document, an ALTO cost map refers to the syntax and\n   semantics\
    \ of the information distributed by the ALTO server.  This\n   document does not\
    \ discuss the internal representation of this data\n   structure within the ALTO\
    \ server.\n"
- title: 6.1.  Cost Types
  contents:
  - "6.1.  Cost Types\n   Path costs have attributes:\n   o  Cost Metric: identifies\
    \ what the costs represent;\n   o  Cost Mode: identifies how the costs should\
    \ be interpreted.\n   The combination of a cost metric and a cost mode defines\
    \ an ALTO cost\n   type.  Certain queries for ALTO cost maps allow the ALTO client\
    \ to\n   indicate the desired cost type.  For a given ALTO server, the\n   combination\
    \ of cost type and network map defines a key.  In other\n   words, an ALTO server\
    \ MUST NOT define two ALTO cost maps with the\n   same cost type \\ network map\
    \ pair.\n"
- title: 6.1.1.  Cost Metric
  contents:
  - "6.1.1.  Cost Metric\n   The cost metric attribute indicates what the cost represents.\
    \  For\n   example, an ALTO server could define costs representing air miles,\n\
    \   hop-counts, or generic routing costs.\n   Cost metrics are indicated in protocol\
    \ messages as strings.\n"
- title: '6.1.1.1.  Cost Metric: routingcost'
  contents:
  - "6.1.1.1.  Cost Metric: routingcost\n   An ALTO server MUST offer the \"routingcost\"\
    \ cost metric.\n   This cost metric conveys a generic measure for the cost of\
    \ routing\n   traffic from a source to a destination.  A lower value indicates\
    \ a\n   higher preference for traffic to be sent from a source to a\n   destination.\n\
    \   Note that an ISP may internally compute routing cost using any method\n  \
    \ that it chooses (e.g., air miles or hop-count) as long as it conforms\n   to\
    \ the semantics.\n"
- title: 6.1.2.  Cost Mode
  contents:
  - "6.1.2.  Cost Mode\n   The cost mode attribute indicates how costs should be interpreted.\n\
    \   Specifically, the cost mode attribute indicates whether returned\n   costs\
    \ should be interpreted as numerical values or ordinal rankings.\n   It is important\
    \ to communicate such information to ALTO clients, as\n   certain operations may\
    \ not be valid on certain costs returned by an\n   ALTO server.  For example,\
    \ it is possible for an ALTO server to\n   return a set of IP addresses with costs\
    \ indicating a ranking of the\n   IP addresses.  Arithmetic operations that would\
    \ make sense for\n   numerical values, do not make sense for ordinal rankings.\
    \  ALTO\n   clients may handle such costs differently.\n   Cost modes are indicated\
    \ in protocol messages as strings.\n   An ALTO server MUST support at least one\
    \ of the following modes:\n   numerical and ordinal.  An ALTO client needs to\
    \ be cognizant of\n   operations when its desired cost mode is not supported.\n\
    \   Specifically, an ALTO client desiring numerical costs MAY adjust its\n   behaviors\
    \ if only the ordinal cost mode is available.  Alternatively,\n   an ALTO client\
    \ desiring ordinal costs MAY construct ordinal costs\n   from retrieved numerical\
    \ values, if only the numerical cost mode is\n   available.\n"
- title: '6.1.2.1.  Cost Mode: numerical'
  contents:
  - "6.1.2.1.  Cost Mode: numerical\n   This cost mode is indicated by the string\
    \ \"numerical\".  This mode\n   indicates that it is safe to perform numerical\
    \ operations (e.g.,\n   normalization or computing ratios for weighted load-balancing)\
    \ on the\n   returned costs.  The values are floating-point numbers.\n"
- title: '6.1.2.2.  Cost Mode: ordinal'
  contents:
  - "6.1.2.2.  Cost Mode: ordinal\n   This cost mode is indicated by the string \"\
    ordinal\".  This mode\n   indicates that the cost values in a cost map represent\
    \ ranking\n   (relative to all other values in a cost map), not actual costs.\
    \  The\n   values are non-negative integers, with a lower value indicating a\n\
    \   higher preference.  Ordinal cost values in a cost map need not be\n   unique\
    \ or contiguous.  In particular, it is possible that two entries\n   in a cost\
    \ map have an identical rank (ordinal cost value).  This\n   document does not\
    \ specify any behavior by an ALTO client in this\n   case; an ALTO client may\
    \ decide to break ties by random selection,\n   other application knowledge, or\
    \ some other means.\n"
- title: 6.2.  Cost Map Structure
  contents:
  - "6.2.  Cost Map Structure\n   A request for an ALTO cost map will either explicitly\
    \ or implicitly\n   include a list of source network locations and a list of destination\n\
    \   network locations.  (Recall that a network location can be an\n   endpoint\
    \ address or a PID.)\n   Specifically, assume that a request specifies a list\
    \ of source\n   network locations, say [Src_1, Src_2, ..., Src_m], and a list\
    \ of\n   destination network locations, say [Dst_1, Dst_2, ..., Dst_n].\n   The\
    \ ALTO server will return the path cost for each of the m*n\n   communicating\
    \ pairs (i.e., Src_1 -> Dst_1, ..., Src_1 -> Dst_n, ...,\n   Src_m -> Dst_1, ...,\
    \ Src_m -> Dst_n).  If the ALTO server does not\n   define the path cost for a\
    \ particular pair, that cost may be omitted.\n   This document refers to this\
    \ structure as a cost map.\n   If the cost mode is ordinal, the path cost of each\
    \ communicating pair\n   is relative to the m*n entries.\n"
- title: 6.3.  Network Map and Cost Map Dependency
  contents:
  - "6.3.  Network Map and Cost Map Dependency\n   An ALTO cost map gives path costs\
    \ between the PIDs defined in an ALTO\n   network map.  An ALTO server may modify\
    \ an ALTO network map at any\n   time, say by adding or deleting PIDs, or even\
    \ redefining them.\n   Hence, to effectively use an instance of an ALTO cost map,\
    \ an ALTO\n   client must know which version of the network map defined the PIDs\
    \ in\n   that cost map.  Version tags allow an ALTO client to correlate cost\n\
    \   map instances with the corresponding versions of the network maps.\n   Specifically,\
    \ a version tag is a tuple of (1) an ID for the resource\n   (e.g., an ALTO network\
    \ map) and (2) a tag (an opaque string)\n   associated with the version of that\
    \ resource.  An ALTO network map\n   distributed by an ALTO server includes its\
    \ version tag.  An ALTO cost\n   map referring to PIDs also includes the version\
    \ tag for the network\n   map on which it is based.\n   Two ALTO network maps\
    \ are the same if they have the same version tag.\n   Whenever the content of\
    \ an ALTO network map maintained by an ALTO\n   server changes, the tag MUST also\
    \ be changed.  Possibilities of\n   setting the tag component include the last-modified\
    \ timestamp for the\n   network map, or a hash of its contents, where the collision\n\
    \   probability is considered zero in practical deployment scenarios.\n"
- title: 6.4.  Cost Map Update
  contents:
  - "6.4.  Cost Map Update\n   An ALTO server can update an ALTO cost map at any time.\
    \  Hence, the\n   same cost map retrieved from the same ALTO server but from different\n\
    \   requests can be inconsistent.\n"
- title: 7.  Endpoint Properties
  contents:
  - "7.  Endpoint Properties\n   An endpoint property defines a network-aware property\
    \ of an endpoint.\n"
- title: 7.1.  Endpoint Property Type
  contents:
  - "7.1.  Endpoint Property Type\n   For each endpoint and an endpoint property type,\
    \ there can be a value\n   for the property.  The type of an endpoint property\
    \ is indicated in\n   protocol messages as a string.  The value depends on the\
    \ specific\n   property.  For example, for a property such as whether an endpoint\
    \ is\n   metered, the value is a true or false value.  See Section 10.8 for\n\
    \   more details on specifying endpoint properties.\n"
- title: '7.1.1.  Endpoint Property Type: pid'
  contents:
  - "7.1.1.  Endpoint Property Type: pid\n   An ALTO server MUST define the \"pid\"\
    \ endpoint property type for each\n   ALTO network map that it provides.  Specifically,\
    \ each ALTO network\n   map defines multiple PIDs.  For an \"ipv4\"/\"ipv6\" network\
    \ map, given\n   an endpoint's IP address, the ALTO server uses the algorithm\n\
    \   specified in Section 11.2.2 to look up the PID of the endpoint.  This\n  \
    \ PID is the \"pid\" property of the endpoint for the network map.  See\n   Section\
    \ 11.4.1.7 for an example.\n"
- title: '8.  Protocol Specification: General Processing'
  contents:
  - "8.  Protocol Specification: General Processing\n   This section first specifies\
    \ general client and server processing.\n   The details of specific services will\
    \ be covered in the following\n   sections.\n"
- title: 8.1.  Overall Design
  contents:
  - "8.1.  Overall Design\n   The ALTO Protocol uses a REST-ful design.  There are\
    \ two primary\n   components to this design:\n   o  Information Resources: Each\
    \ ALTO service is realized by a set of\n      network information resources. \
    \ Each information resource has a\n      media type [RFC2046].  An ALTO client\
    \ may construct an HTTP\n      request for a particular information resource (including\
    \ any\n      parameters, if necessary), and the ALTO server returns the\n    \
    \  requested information resource in an HTTP response.\n   o  Information Resource\
    \ Directory (IRD): An ALTO server uses an IRD\n      to inform an ALTO client\
    \ about a list of available information\n      resources and the URI at which\
    \ each can be accessed.  ALTO clients\n      consult the IRDs to determine the\
    \ services provided by ALTO\n      servers.\n"
- title: 8.2.  Notation
  contents:
  - "8.2.  Notation\n   This document uses JSONString, JSONNumber, and JSONBool to\
    \ indicate\n   the JSON string, number, and boolean types, respectively.  The\
    \ type\n   JSONValue indicates a JSON value, as specified in Section 3 of\n  \
    \ [RFC7159].\n   This document uses an adaptation of the C-style struct notation\
    \ to\n   define JSON objects.  A JSON object consists of name/value pairs.\n \
    \  This document refers to each pair as a field.  In some context, this\n   document\
    \ also refers to a field as an attribute.  The name of a\n   field/attribute may\
    \ be referred to as the key.  An optional field is\n   enclosed by [ ].  In the\
    \ definitions, the JSON names of the fields\n   are case sensitive.  An array\
    \ is indicated by two numbers in angle\n   brackets, <m..n>, where m indicates\
    \ the minimal number of values and\n   n is the maximum.  When this document uses\
    \ * for n, it means no upper\n   bound.\n   For example, the definition below\
    \ defines a new type Type4, with\n   three fields named \"name1\", \"name2\",\
    \ and \"name3\", respectively.  The\n   field named \"name3\" is optional, and\
    \ the field named \"name2\" is an\n   array of at least one value.\n    object\
    \ { Type1 name1; Type2 name2<1..*>; [Type3 name3;]\n             } Type4;\n  \
    \ This document also defines dictionary maps (or maps for short) from\n   strings\
    \ to JSON values.  For example, the definition below defines a\n   Type3 object\
    \ as a map.  Type1 must be defined as string, and Type2\n   can be defined as\
    \ any type.\n    object-map { Type1 -> Type2; } Type3;\n   This document uses\
    \ subtyping to denote that one type is derived from\n   another type.  The example\
    \ below denotes that TypeDerived is derived\n   from TypeBase.  TypeDerived includes\
    \ all fields defined in TypeBase.\n   If TypeBase does not have a field named\
    \ \"name1\", TypeDerived will\n   have a new field named \"name1\".  If TypeBase\
    \ already has a field\n   named \"name1\" but with a different type, TypeDerived\
    \ will have a\n   field named \"name1\" with the type defined in TypeDerived (i.e.,\
    \ Type1\n   in the example).\n    object { Type1 name1; } TypeDerived : TypeBase;\n\
    \   Note that, despite the notation, no standard, machine-readable\n   interface\
    \ definition or schema is provided in this document.\n   Extension documents may\
    \ describe these as necessary.\n"
- title: 8.3.  Basic Operations
  contents:
  - "8.3.  Basic Operations\n   The ALTO Protocol employs standard HTTP [RFC7230].\
    \  It is used for\n   discovering available information resources at an ALTO server\
    \ and\n   retrieving Information Resources.  ALTO clients and ALTO servers use\n\
    \   HTTP requests and responses carrying ALTO-specific content with\n   encoding\
    \ as specified in this document, and they MUST be compliant\n   with [RFC7230].\n\
    \   Instead of specifying the generic application/json media type for all\n  \
    \ ALTO request parameters (if any) and responses, ALTO clients and\n   servers\
    \ use multiple, specific JSON-based media types (e.g.,\n   application/alto-networkmap+json,\
    \ application/alto-costmap+json) to\n   indicate content types; see Table 2 for\
    \ a list of media types defined\n   in this document.  This allows easy extensibility\
    \ while maintaining\n   clear semantics and versioning.  For example, a new version\
    \ of a\n   component of the ALTO Protocol (e.g., a new version of ALTO network\n\
    \   maps) can be defined by simply introducing a new media type (e.g.,\n   application/alto-networkmap-v2+json).\n"
- title: 8.3.1.  Client Discovering Information Resources
  contents:
  - "8.3.1.  Client Discovering Information Resources\n   To discover available information\
    \ resources provided by an ALTO\n   server, an ALTO client requests its IRD(s).\n\
    \   Specifically, using an ALTO service discovery protocol, an ALTO\n   client\
    \ obtains a URI through which it can request an information\n   resource directory\
    \ (IRD).  This document refers to this IRD as the\n   Root IRD of the ALTO client.\
    \  Each entry in an IRD indicates a URI at\n   which an ALTO server accepts requests,\
    \ and returns either an\n   information resource or an information resource directory\
    \ that\n   references additional information resources.  Beginning with its Root\n\
    \   IRD and following links to IRDs recursively, an ALTO client can\n   discover\
    \ all information resources available to it.  This set of\n   information resources\
    \ is referred to as the information resource\n   closure of the ALTO client. \
    \ By inspecting its information resource\n   closure, an ALTO client can determine\
    \ whether an ALTO server supports\n   the desired information resource, and if\
    \ it is supported, the URI at\n   which it is available.\n   See Section 9.2 for\
    \ a detailed specification of IRDs.\n"
- title: 8.3.2.  Client Requesting Information Resources
  contents:
  - "8.3.2.  Client Requesting Information Resources\n   Where possible, the ALTO\
    \ Protocol uses the HTTP GET method to request\n   resources.  However, some ALTO\
    \ services provide information resources\n   that are the function of one or more\
    \ input parameters.  Input\n   parameters are encoded in the HTTP request's entity\
    \ body, and the\n   ALTO client MUST use the HTTP POST method to send the parameters.\n\
    \   When requesting an ALTO information resource that requires input\n   parameters\
    \ specified in a HTTP POST request, an ALTO client MUST set\n   the Content-Type\
    \ HTTP header to the media type corresponding to the\n   format of the supplied\
    \ input parameters.\n   An ALTO client MUST NOT assume that the HTTP GET and POST\
    \ methods are\n   interchangeable.  In particular, for an information resource\
    \ that\n   uses the HTTP GET method, an ALTO client MUST NOT assume that the\n\
    \   information resource will accept a POST request as equivalent to a\n   GET\
    \ request.\n"
- title: 8.3.3.  Server Responding to Information Resource Request
  contents:
  - "8.3.3.  Server Responding to Information Resource Request\n   Upon receiving\
    \ a request for an information resource that the ALTO\n   server can provide,\
    \ the ALTO server normally returns the requested\n   information resource.  In\
    \ other cases, to be more informative\n   ([RFC7231]), the ALTO server either\
    \ provides the ALTO client with an\n   information resource directory indicating\
    \ how to reach the desired\n   information resource, or it returns an ALTO error\
    \ object; see\n   Section 8.5 for more details on ALTO error handling.\n   It\
    \ is possible for an ALTO server to leverage caching HTTP\n   intermediaries to\
    \ respond to both GET and POST requests by including\n   explicit freshness information\
    \ (see Section 14 of [RFC7230]).\n   Caching of POST requests is not widely implemented\
    \ by HTTP\n   intermediaries; however, an alternative approach is for an ALTO\n\
    \   server, in response to POST requests, to return an HTTP 303 status\n   code\
    \ (\"See Other\") indicating to the ALTO client that the resulting\n   information\
    \ resource is available via a GET request to an alternate\n   URL.  HTTP intermediaries\
    \ that do not support caching of POST\n   requests could then cache the response\
    \ to the GET request from the\n   ALTO client following the alternate URL in the\
    \ 303 response if the\n   response to the subsequent GET request contains explicit\
    \ freshness\n   information.\n   The ALTO server MUST indicate the type of its\
    \ response using a media\n   type (i.e., the Content-Type HTTP header of the response).\n"
- title: 8.3.4.  Client Handling Server Response
  contents:
  - '8.3.4.  Client Handling Server Response

    '
- title: 8.3.4.1.  Using Information Resources
  contents:
  - "8.3.4.1.  Using Information Resources\n   This specification does not indicate\
    \ any required actions taken by\n   ALTO clients upon successfully receiving an\
    \ information resource from\n   an ALTO server.  Although ALTO clients are suggested\
    \ to interpret the\n   received ALTO information and adapt application behavior,\
    \ ALTO\n   clients are not required to do so.\n"
- title: 8.3.4.2.  Handling Server Response and IRD
  contents:
  - "8.3.4.2.  Handling Server Response and IRD\n   After receiving an information\
    \ resource directory, the client can\n   consult it to determine if any of the\
    \ offered URIs contain the\n   desired information resource.  However, an ALTO\
    \ client MUST NOT\n   assume that the media type returned by the ALTO server for\
    \ a request\n   to a URI is the media type advertised in the IRD or specified\
    \ in its\n   request (i.e., the client must still check the Content-Type header).\n\
    \   The expectation is that the media type returned should normally be\n   the\
    \ media type advertised and requested, but, in some cases, it may\n   legitimately\
    \ not be so.\n   In particular, it is possible for an ALTO client to receive an\n\
    \   information resource directory from an ALTO server as a response to\n   its\
    \ request for a specific information resource.  In this case, the\n   ALTO client\
    \ may ignore the response or still parse the response.  To\n   indicate that an\
    \ ALTO client will always check if a response is an\n   information resource directory,\
    \ the ALTO client can indicate in the\n   \"Accept\" header of a HTTP request\
    \ that it can accept information\n   resource directory; see Section 9.2.1 for\
    \ the media type.\n"
- title: 8.3.4.3.  Handling Error Conditions
  contents:
  - "8.3.4.3.  Handling Error Conditions\n   If an ALTO client does not successfully\
    \ receive a desired information\n   resource from a particular ALTO server (i.e.,\
    \ server response\n   indicates error or there is no response), the client can\
    \ either\n   choose another server (if one is available) or fall back to a default\n\
    \   behavior (e.g., perform peer selection without the use of ALTO\n   information,\
    \ when used in a peer-to-peer system).\n"
- title: 8.3.5.  Authentication and Encryption
  contents:
  - "8.3.5.  Authentication and Encryption\n   ALTO server implementations as well\
    \ as ALTO client implementations\n   MUST support the \"https\" URI scheme [RFC2818]\
    \ and Transport Layer\n   Security (TLS) [RFC5246].  See Section 15.1.2 for security\n\
    \   considerations and Section 16 for manageability considerations\n   regarding\
    \ the usage of HTTPS/TLS.\n   For deployment scenarios where client authentication\
    \ is desired, HTTP\n   Digest Authentication MUST be supported.  TLS Client Authentication\n\
    \   is the preferred mechanism if it is available.\n"
- title: 8.3.6.  Information Refreshing
  contents:
  - "8.3.6.  Information Refreshing\n   An ALTO client can determine the frequency\
    \ at which ALTO information\n   is refreshed based on information made available\
    \ via HTTP.\n"
- title: 8.3.7.  Parsing of Unknown Fields
  contents:
  - "8.3.7.  Parsing of Unknown Fields\n   This document only details object fields\
    \ used by this specification.\n   Extensions may include additional fields within\
    \ JSON objects defined\n   in this document.  ALTO implementations MUST ignore\
    \ unknown fields\n   when processing ALTO messages.\n"
- title: 8.4.  Server Response Encoding
  contents:
  - "8.4.  Server Response Encoding\n   Though each type of ALTO server response (i.e.,\
    \ an information\n   resource directory, an individual information resource, or\
    \ an error\n   message) has its distinct syntax and, hence, its unique media type,\n\
    \   they are designed to have a similar structure: a field named \"meta\"\n  \
    \ to provide meta definitions, and another field named \"data\" to\n   contain\
    \ the data, if needed.\n   Specifically, this document defines the base type of\
    \ each ALTO server\n   response as ResponseEntityBase:\n    object { ResponseMeta\
    \ meta; } ResponseEntityBase;\n   with field:\n   meta:  meta information pertaining\
    \ to the response.\n"
- title: 8.4.1.  Meta Information
  contents:
  - "8.4.1.  Meta Information\n   Meta information is encoded as a map object for\
    \ flexibility.\n   Specifically, ResponseMeta is defined as:\n    object-map {\
    \ JSONString -> JSONValue } ResponseMeta;\n"
- title: 8.4.2.  Data Information
  contents:
  - "8.4.2.  Data Information\n   The data component of the response encodes the response-specific\n\
    \   data.  This document derives five types from ResponseEntityBase to\n   add\
    \ different types of data component: InfoResourceDirectory\n   (Section 9.2.2),\
    \ InfoResourceNetworkMap (Section 11.2.1.6),\n   InfoResourceCostMap (Section\
    \ 11.2.3.6),\n   InfoResourceEndpointProperties (Section 11.4.1.6), and\n   InfoResourceEndpointCostMap\
    \ (Section 11.5.1.6).\n"
- title: 8.5.  Protocol Errors
  contents:
  - "8.5.  Protocol Errors\n   If an ALTO server encounters an error while processing\
    \ a request, the\n   ALTO server SHOULD return additional ALTO-layer information,\
    \ if it is\n   available, in the form of an ALTO error resource encoded in the\
    \ HTTP\n   response' entity body.  If no ALTO-layer information is available,\
    \ an\n   ALTO server may omit the ALTO error resource from the response.\n   With\
    \ or without additional ALTO-layer error information, an ALTO\n   server MUST\
    \ set an appropriate HTTP status code.  It is important to\n   note that the HTTP\
    \ status code and ALTO error resource have distinct\n   roles.  An ALTO error\
    \ resource provides detailed information about\n   why a particular request for\
    \ an ALTO information resource was not\n   successful.  The HTTP status code,\
    \ on the other hand, indicates to\n   HTTP processing elements (e.g., intermediaries\
    \ and clients) how the\n   response should be treated.\n"
- title: 8.5.1.  Media Type
  contents:
  - "8.5.1.  Media Type\n   The media type for an ALTO error response is \"application/\n\
    \   alto-error+json\".\n"
- title: 8.5.2.  Response Format and Error Codes
  contents:
  - "8.5.2.  Response Format and Error Codes\n   An ALTO error response MUST include\
    \ a field named \"code\" in the\n   \"meta\" field of the response.  The value\
    \ MUST be an ALTO error code,\n   encoded in string, defined in Table 1.  Note\
    \ that the ALTO error\n   codes defined in Table 1 are limited to support the\
    \ error conditions\n   needed for purposes of this document.  Additional status\
    \ codes may be\n   defined in companion or extension documents.\n   +-----------------------+-------------------------------------------+\n\
    \   | ALTO Error Code       | Description                               |\n  \
    \ +-----------------------+-------------------------------------------+\n   |\
    \ E_SYNTAX              | Parsing error in request (including       |\n   |  \
    \                     | identifiers)                              |\n   | E_MISSING_FIELD\
    \       | A required JSON field is missing          |\n   | E_INVALID_FIELD_TYPE\
    \  | The type of the value of a JSON field is  |\n   |                       |\
    \ invalid                                   |\n   | E_INVALID_FIELD_VALUE | The\
    \ value of a JSON field is invalid      |\n   +-----------------------+-------------------------------------------+\n\
    \                     Table 1: Defined ALTO Error Codes\n   After an ALTO server\
    \ receives a request, it needs to verify the\n   syntactic and semantic validity\
    \ of the request.  The following\n   paragraphs in this section are intended to\
    \ illustrate the usage of\n   the error codes defined above during the verification.\
    \  An individual\n   implementation may define its message processing in a different\n\
    \   order.\n   In the first step after an ALTO server receives a request, it checks\n\
    \   the syntax of the request body (i.e., whether the JSON structure can\n   be\
    \ parsed), and indicates a syntax error using the error code\n   E_SYNTAX.  For\
    \ an E_SYNTAX error, the ALTO server MAY provide an\n   optional field named \"\
    syntax-error\" in the \"meta\" field of the error\n   response.  The objective\
    \ of providing \"syntax-error\" is to provide\n   technical debugging information\
    \ to developers, not end users.  Hence,\n   it should be a human-readable, free-form\
    \ text describing the syntax\n   error.  If possible, the text should include\
    \ position information\n   about the syntax error, such as line number and offset\
    \ within the\n   line.  If nothing else, the value of the field named \"syntax-error\"\
    \n   could include just the position.  If a syntax error occurs in a\n   production\
    \ environment, the ALTO client could inform the end user\n   that there was an\
    \ error communicating with the ALTO server, and\n   suggest that the user submit\
    \ the error information, which includes\n   \"syntax-error\", to the developers.\n\
    \   A request without syntax errors may still be invalid.  An error case\n   is\
    \ that the request misses a required field.  The server indicates\n   such an\
    \ error using the error code E_MISSING_FIELD.  This document\n   defines required\
    \ fields for Filtered Network Map (Section 11.3.1.3),\n   Filtered Cost Map (Section\
    \ 11.3.2.3), Endpoint Properties\n   (Section 11.4.1.3), and Endpoint Cost (Section\
    \ 11.5.1.3) services.\n   For an E_MISSING_FIELD error, the server may include\
    \ an optional\n   field named \"field\" in the \"meta\" field of the error response,\
    \ to\n   indicate the missing field. \"field\" should be a JSONString indicating\n\
    \   the full path of the missing field.  For example, assume that a\n   Filtered\
    \ Cost Map request (see Section 11.3.2.3) omits the \"cost-\n   metric\" field.\
    \  The error response from the ALTO server may specify\n   the value of \"field\"\
    \ as \"cost-type/cost-metric\".\n   A request with the correct fields might use\
    \ a wrong type for the\n   value of a field.  For example, the value of a field\
    \ could be a\n   JSONString when a JSONNumber is expected.  The server indicates\
    \ such\n   an error using the error code E_INVALID_FIELD_TYPE.  The server may\n\
    \   include an optional field named \"field\" in the \"meta\" field of the\n \
    \  response, to indicate the field that contains the wrong type.\n   A request\
    \ with the correct fields and types of values for the fields\n   may specify a\
    \ wrong value for a field.  For example, a Filtered Cost\n   Map request may specify\
    \ a wrong value for CostMode in the \"cost-type\"\n   field (Section 11.3.2.3).\
    \  The server indicates such an error with\n   the error code E_INVALID_FIELD_VALUE.\
    \  For an E_INVALID_FIELD_VALUE\n   error, the server may include an optional\
    \ field named \"field\" in the\n   \"meta\" field of the response, to indicate\
    \ the field that contains the\n   wrong value.  The server may also include an\
    \ optional field named\n   \"value\" in the \"meta\" field of the response to\
    \ indicate the wrong\n   value that triggered the error.  If the \"value\" field\
    \ is specified,\n   the \"field\" field MUST be specified.  The \"value\" field\
    \ MUST have a\n   JSONString value.  If the invalid value is not a string, the\
    \ ALTO\n   server MUST convert it to a string.  Below are the rules to specify\n\
    \   the \"value\" key:\n   o  If the invalid value is a string, \"value\" is that\
    \ string;\n   o  If the invalid value is a number, \"value\" must be the invalid\n\
    \      number as a string;\n   o  If the invalid value is a subfield, the server\
    \ must set the\n      \"field\" key to the full path of the field name and \"\
    value\" to the\n      invalid subfield value, converting it to a string if needed.\
    \  For\n      example, if the \"cost-mode\" subfield of the \"cost-type\" field\
    \ is\n      an invalid mode \"foo\", the server should set \"value\" to \"foo\"\
    , and\n      \"field\" to \"cost-mode/cost-type\";\n   o  If an element of a JSON\
    \ array has an invalid value, the server\n      sets \"value\" to the value of\
    \ the invalid element, as a string, and\n      \"field\" to the name of the array.\
    \  An array element of the wrong\n      type (e.g., a number in what is supposed\
    \ to be an array of\n      strings) is an invalid value error, not an invalid\
    \ type error.\n      The server sets \"value\" to the string version of the incorrect\n\
    \      element, and \"field\" to the name of the array.\n   If multiple errors\
    \ are present in a single request (e.g., a request\n   uses a JSONString when\
    \ a JSONNumber is expected and a required field\n   is missing), then the ALTO\
    \ server MUST return exactly one of the\n   detected errors.  However, the reported\
    \ error is implementation\n   defined, since specifying a particular order for\
    \ message processing\n   encroaches needlessly on implementation techniques.\n"
- title: 8.5.3.  Overload Conditions and Server Unavailability
  contents:
  - "8.5.3.  Overload Conditions and Server Unavailability\n   If an ALTO server detects\
    \ that it cannot handle a request from an\n   ALTO client due to excessive load,\
    \ technical problems, or system\n   maintenance, it SHOULD do one of the following:\n\
    \   o  Return an HTTP 503 (\"Service Unavailable\") status code to the ALTO\n\
    \      client.  As indicated by [RFC7230], the Retry-After HTTP header\n     \
    \ may be used to indicate when the ALTO client should retry the\n      request.\n\
    \   o  Return an HTTP 307 (\"Temporary Redirect\") status code indicating\n  \
    \    an alternate ALTO server that may be able to satisfy the request.\n     \
    \ Using Temporary Redirect may generate infinite redirection loops.\n      Although\
    \ [RFC7231] Section 6.4 specifies that an HTTP client\n      SHOULD detect infinite\
    \ redirection loops, it is more desirable\n      that multiple ALTO servers be\
    \ configured not to form redirection\n      loops.\n   The ALTO server MAY also\
    \ terminate the connection with the ALTO\n   client.\n   The particular policy\
    \ applied by an ALTO server to determine that it\n   cannot service a request\
    \ is outside of the scope of this document.\n"
- title: '9.  Protocol Specification: Information Resource Directory'
  contents:
  - "9.  Protocol Specification: Information Resource Directory\n   As already discussed,\
    \ an ALTO client starts by retrieving an\n   information resource directory, which\
    \ specifies the attributes of\n   individual information resources that an ALTO\
    \ server provides.\n"
- title: 9.1.  Information Resource Attributes
  contents:
  - "9.1.  Information Resource Attributes\n   In this document, each information\
    \ resource has up to five attributes\n   associated with it, including its assigned\
    \ ID, its response format,\n   its capabilities, its accepted input parameters,\
    \ and other resources\n   on which it may depend.  The function of an information\
    \ resource\n   directory is to publishes these attributes.\n"
- title: 9.1.1.  Resource ID
  contents:
  - "9.1.1.  Resource ID\n   Each information resource that an ALTO client can request\
    \ MUST be\n   assigned a resource ID attribute that is unique amongst all\n  \
    \ information resources in the information resource closure of the\n   client.\
    \  The resource ID SHOULD remain stable even when the data\n   provided by that\
    \ resource changes.  For example, even though the\n   number of PIDs in an ALTO\
    \ network map may be adjusted, its resource\n   ID should remain the same.  Similarly,\
    \ if the entries in an ALTO cost\n   map are updated, its resource ID should remain\
    \ the same.  IDs SHOULD\n   NOT be reused for different resources over time.\n"
- title: 9.1.2.  Media Type
  contents:
  - "9.1.2.  Media Type\n   ALTO uses media types [RFC2046] to uniquely indicate the\
    \ data format\n   used to encode the content to be transmitted between an ALTO\
    \ server\n   and an ALTO client in the HTTP entity body.\n"
- title: 9.1.3.  Capabilities
  contents:
  - "9.1.3.  Capabilities\n   The Capabilities attribute of an information resource\
    \ indicates\n   specific capabilities that the server can provide.  For example,\
    \ if\n   an ALTO server allows an ALTO client to specify cost constraints when\n\
    \   the client requests a cost map information resource, then the server\n   advertises\
    \ the \"cost-constraints\" capability of the cost map\n   information resource.\n"
- title: 9.1.4.  Accepts Input Parameters
  contents:
  - "9.1.4.  Accepts Input Parameters\n   An ALTO server may allow an ALTO client\
    \ to supply input parameters\n   when requesting certain information resources.\
    \  The associated\n   \"accepts\" attribute of such an information resource specifies\
    \ a media\n   type, which indicates how the client specifies the input parameters\n\
    \   as contained in the entity body of the HTTP POST request.\n"
- title: 9.1.5.  Dependent Resources
  contents:
  - "9.1.5.  Dependent Resources\n   The information provided in an information resource\
    \ may use\n   information provided in some other resources (e.g., a cost map uses\n\
    \   the PIDs defined in a network map).  The \"uses\" attribute conveys\n   such\
    \ information.\n"
- title: 9.2.  Information Resource Directory (IRD)
  contents:
  - "9.2.  Information Resource Directory (IRD)\n   An ALTO server uses the information\
    \ resource directory to publish\n   available information resources and their\
    \ aforementioned attributes.\n   Since resource selection happens after consumption\
    \ of the information\n   resource directory, the format of the information resource\
    \ directory\n   is designed to be simple with the intention of future ALTO Protocol\n\
    \   versions maintaining backwards compatibility.  Future extensions or\n   versions\
    \ of the ALTO Protocol SHOULD be accomplished by extending\n   existing media\
    \ types or adding new media types but retaining the same\n   format for the Information\
    \ Resource Directory.\n   An ALTO server MUST make one information resource directory\
    \ available\n   via the HTTP GET method to a URI discoverable by an ALTO client.\n\
    \   Discovery of this URI is out of scope of this document, but it could\n   be\
    \ accomplished by manual configuration or by returning the URI of an\n   information\
    \ resource directory from the ALTO Discovery Protocol\n   [ALTO-SERVER-DISC].\
    \  For recommendations on what the URI may look\n   like, see [ALTO-SERVER-DISC].\n"
- title: 9.2.1.  Media Type
  contents:
  - "9.2.1.  Media Type\n   The media type to indicate an information resource directory\
    \ is\n   \"application/alto-directory+json\".\n"
- title: 9.2.2.  Encoding
  contents:
  - "9.2.2.  Encoding\n   An information resource directory response may include in\
    \ the \"meta\"\n   field the \"cost-types\" field, whose value is of type IRDMetaCostTypes\n\
    \   defined below, where CostType is defined in Section 10.7:\n       object-map\
    \ {\n         JSONString -> CostType;\n       } IRDMetaCostTypes;\n   The function\
    \ of \"cost-types\" is to assign names to a set of CostTypes\n   that can be used\
    \ in one or more \"resources\" entries in the IRD to\n   simplify specification.\
    \  The names defined in \"cost-types\" in an IRD\n   are local to the IRD.\n \
    \  For a Root IRD, \"meta\" MUST include a field named \"default-alto-\n   network-map\"\
    , which value specifies the resource ID of an ALTO\n   network map.  When there\
    \ are multiple network maps defined in an IRD\n   (e.g., with different levels\
    \ of granularity), the \"default-alto-\n   network-map\" field provides a guideline\
    \ to simple clients that use\n   only one network map.\n   The data component\
    \ of an information resource directory response is\n   named \"resources\", which\
    \ is a JSON object of type IRDResourceEntries:\n       object {\n         IRDResourceEntries\
    \ resources;\n       } InfoResourceDirectory : ResponseEntityBase;\n       object-map\
    \ {\n         ResourceID  -> IRDResourceEntry;\n       } IRDResourceEntries;\n\
    \       object {\n         JSONString      uri;\n         JSONString      media-type;\n\
    \         [JSONString     accepts;]\n         [Capabilities   capabilities;]\n\
    \         [ResourceID     uses<0..*>;]\n       } IRDResourceEntry;\n       object\
    \ {\n         ...\n       } Capabilities;\n   An IRDResourceEntries object is\
    \ a dictionary map keyed by\n   ResourceIDs, where ResourceID is defined in Section\
    \ 10.2.  The value\n   of each entry specifies:\n   uri:           A URI at which\
    \ the ALTO server provides one or more\n                  information resources,\
    \ or an information resource\n                  directory indicating additional\
    \ information resources.\n                  URIs can be relative to the URI of\
    \ the IRD and MUST be\n                  resolved according to Section 5 of [RFC3986].\n\
    \   media-type:    The media type of the information resource (see\n         \
    \         Section 9.1.2) available via GET or POST requests to\n             \
    \     the corresponding URI.  A value of \"application/\n                  alto-directory+json\"\
    \ indicates that the response for a\n                  request to the URI will\
    \ be an information resource\n                  directory defining additional\
    \ information resources in\n                  the information resource closure.\n\
    \   accepts:       The media type of input parameters (see Section 9.1.4)\n  \
    \                accepted by POST requests to the corresponding URI.\n       \
    \           If this field is not present, it MUST be assumed to be\n         \
    \         empty.\n   capabilities:  A JSON object enumerating capabilities of\
    \ an ALTO\n                  server in providing the information resource at the\n\
    \                  corresponding URI and information resources\n             \
    \     discoverable via the URI.  If this field is not\n                  present,\
    \ it MUST be assumed to be an empty object.  If\n                  a capability\
    \ for one of the offered information\n                  resources is not explicitly\
    \ listed here, an ALTO\n                  client may either issue an OPTIONS HTTP\
    \ request to the\n                  corresponding URI to determine if the capability\
    \ is\n                  supported or assume its default value documented in\n\
    \                  this specification or an extension document describing\n  \
    \                the capability.\n   uses:          A list of resource IDs, defined\
    \ in the same IRD, that\n                  define the resources on which this\
    \ resource directly\n                  depends.  An ALTO server SHOULD include\
    \ in this list\n                  any resources that the ALTO client would need\
    \ to\n                  retrieve in order to interpret the contents of this\n\
    \                  resource.  For example, an ALTO cost map resource\n       \
    \           should include in this list the network map on which\n           \
    \       it depends.  ALTO clients may wish to consult this\n                 \
    \ list in order to pre-fetch necessary resources.\n   If an entry has an empty\
    \ list for \"accepts\", then the corresponding\n   URI MUST support GET requests.\
    \  If an entry has a non-empty\n   \"accepts\", then the corresponding URI MUST\
    \ support POST requests.  If\n   an ALTO server wishes to support both GET and\
    \ POST on a single URI,\n   it MUST specify two entries in the information resource\
    \ directory.\n"
- title: 9.2.3.  Example
  contents:
  - "9.2.3.  Example\n   The following is an example information resource directory\
    \ returned\n   by an ALTO server to an ALTO client.  Assume it is the Root IRD\
    \ of\n   the client.\n     GET /directory HTTP/1.1\n     Host: alto.example.com\n\
    \     Accept: application/alto-directory+json,application/alto-error+json\n  \
    \    HTTP/1.1 200 OK\n      Content-Length: 2333\n      Content-Type: application/alto-directory+json\n\
    \      {\n        \"meta\" : {\n           \"cost-types\": {\n              \"\
    num-routing\": {\n                 \"cost-mode\"  : \"numerical\",\n         \
    \        \"cost-metric\": \"routingcost\",\n                 \"description\":\
    \ \"My default\"\n              },\n              \"num-hop\":     {\n       \
    \          \"cost-mode\"  : \"numerical\",\n                 \"cost-metric\":\
    \ \"hopcount\"\n              },\n              \"ord-routing\": {\n         \
    \        \"cost-mode\"  : \"ordinal\",\n                 \"cost-metric\": \"routingcost\"\
    \n              },\n              \"ord-hop\":     {\n                 \"cost-mode\"\
    \  : \"ordinal\",\n                 \"cost-metric\": \"hopcount\"\n          \
    \    }\n           },\n           \"default-alto-network-map\" : \"my-default-network-map\"\
    \n        },\n        \"resources\" : {\n           \"my-default-network-map\"\
    \ : {\n              \"uri\" : \"http://alto.example.com/networkmap\",\n     \
    \         \"media-type\" : \"application/alto-networkmap+json\"\n           },\n\
    \           \"numerical-routing-cost-map\" : {\n              \"uri\" : \"http://alto.example.com/costmap/num/routingcost\"\
    ,\n              \"media-type\" : \"application/alto-costmap+json\",\n       \
    \       \"capabilities\" : {\n                 \"cost-type-names\" : [ \"num-routing\"\
    \ ]\n              },\n              \"uses\": [ \"my-default-network-map\" ]\n\
    \           },\n           \"numerical-hopcount-cost-map\" : {\n             \
    \ \"uri\" : \"http://alto.example.com/costmap/num/hopcount\",\n              \"\
    media-type\" : \"application/alto-costmap+json\",\n              \"capabilities\"\
    \ : {\n                 \"cost-type-names\" : [ \"num-hop\" ]\n              },\n\
    \              \"uses\": [ \"my-default-network-map\" ]\n           },\n     \
    \      \"custom-maps-resources\" : {\n              \"uri\" : \"http://custom.alto.example.com/maps\"\
    ,\n              \"media-type\" : \"application/alto-directory+json\"\n      \
    \     },\n           \"endpoint-property\" : {\n              \"uri\" : \"http://alto.example.com/endpointprop/lookup\"\
    ,\n              \"media-type\" : \"application/alto-endpointprop+json\",\n  \
    \            \"accepts\" : \"application/alto-endpointpropparams+json\",\n   \
    \           \"capabilities\" : {\n                \"prop-types\" : [ \"my-default-network-map.pid\"\
    ,\n                                 \"priv:ietf-example-prop\" ]\n           \
    \   },\n           },\n           \"endpoint-cost\" : {\n              \"uri\"\
    \ : \"http://alto.example.com/endpointcost/lookup\",\n              \"media-type\"\
    \ : \"application/alto-endpointcost+json\",\n              \"accepts\" : \"application/alto-endpointcostparams+json\"\
    ,\n              \"capabilities\" : {\n                 \"cost-constraints\" :\
    \ true,\n                 \"cost-type-names\" : [ \"num-routing\", \"num-hop\"\
    ,\n                                       \"ord-routing\", \"ord-hop\"]\n    \
    \          }\n           }\n        }\n      }\n   Specifically, the \"cost-types\"\
    \ field of \"meta\" of the example IRD\n   defines names for four cost types in\
    \ this IRD.  For example,\n   \"num-routing\" in the example is the name that\
    \ refers to a cost type\n   with cost mode being \"numerical\" and cost metric\
    \ being \"routingcost\".\n   This name is used in the second entry of \"resources\"\
    , which defines a\n   cost map.  In particular, the \"cost-type-names\" of its\
    \ \"capabilities\"\n   specifies that this resource supports a cost type named\
    \ as\n   \"num-routing\".  The ALTO client looks up the name \"num-routing\" in\n\
    \   \"cost-types\" of the IRD to obtain the cost type named as\n   \"num-routing\"\
    .  The last entry of \"resources\" uses all four names\n   defined in \"cost-types\"\
    .\n   Another field defined in \"meta\" of the example IRD is\n   \"default-alto-network-map\"\
    , which has value \"my-default-network-map\",\n   which is the resource ID of\
    \ an ALTO network map that will be defined\n   in \"resources\".\n   The \"resources\"\
    \ field of the example IRD defines six information\n   resources.  For example,\
    \ the second entry, which is assigned a\n   resource ID \"numerical-routing-cost-map\"\
    , provides a cost map, as\n   indicated by the media-type \"application/alto-costmap+json\"\
    .  The\n   cost map is based on the network map defined with resource ID\n   \"\
    my-default-network-map\".  As another example, the last entry, which\n   is assigned\
    \ resource ID \"endpoint-cost\", provides the Endpoint Cost\n   Service, which\
    \ is indicated by the media-type \"application/\n   alto-endpointcost+json\".\
    \  An ALTO client should use uri\n   \"http://alto.example.com/endpointcost/lookup\"\
    \ to access the service.\n   The ALTO client should format its request body to\
    \ be the\n   \"application/alto-endpointcostparams+json\" media type, as specified\n\
    \   by the \"accepts\" attribute of the information resource.  The \"cost-\n \
    \  type-names\" field of the \"capabilities\" attribute of the information\n \
    \  resource includes four defined cost types specified in the \"cost-\n   types\"\
    \ field of \"meta\" of the IRD.  Hence, an ALTO client can verify\n   that the\
    \ Endpoint Cost information resource supports both cost\n   metrics \"routingcost\"\
    \ and \"hopcount\", each available for both\n   \"numerical\" and \"ordinal\"\
    \ cost modes.  When requesting the\n   information resource, an ALTO client can\
    \ specify cost constraints, as\n   indicated by the \"cost-constraints\" field\
    \ of the \"capabilities\"\n   attribute.\n"
- title: 9.2.4.  Delegation Using IRD
  contents:
  - "9.2.4.  Delegation Using IRD\n   ALTO IRDs provide the flexibility to define\
    \ a set of information\n   resources that are provided by ALTO servers running\
    \ in multiple\n   domains.  Consider the preceding example.  Assume that the ALTO\n\
    \   server running at alto.example.com wants to delegate some information\n  \
    \ resources to a separate subdomain: \"custom.alto.example.com\".  In\n   particular,\
    \ assume that the maps available via this subdomain are\n   filtered network maps,\
    \ filtered cost maps, and some pre-generated\n   maps for the \"hopcount\" and\
    \ \"routingcost\" cost metrics in the\n   \"ordinal\" cost mode.  The fourth entry\
    \ of \"resources\" in the\n   preceding example IRD implements the delegation.\
    \  The entry has a\n   media-type of \"application/alto-directory+json\", and\
    \ an ALTO client\n   can discover the information resources available at\n   \"\
    custom.alto.example.com\" if its request to\n   \"http://custom.alto.example.com/maps\"\
    \ is successful:\n     GET /maps HTTP/1.1\n     Host: custom.alto.example.com\n\
    \     Accept: application/alto-directory+json,application/alto-error+json\n  \
    \ HTTP/1.1 200 OK\n   Content-Length: 1900\n   Content-Type: application/alto-directory+json\n\
    \   {\n     \"meta\" : {\n        \"cost-types\": {\n           \"num-routing\"\
    : {\n              \"cost-mode\"  : \"numerical\",\n              \"cost-metric\"\
    : \"routingcost\",\n              \"description\": \"My default\"\n          \
    \ },\n           \"num-hop\":     {\n              \"cost-mode\"  : \"numerical\"\
    ,\n              \"cost-metric\": \"hopcount\"\n           },\n           \"ord-routing\"\
    : {\n              \"cost-mode\"  : \"ordinal\",\n              \"cost-metric\"\
    : \"routingcost\"\n           },\n           \"ord-hop\":     {\n            \
    \  \"cost-mode\"  : \"ordinal\",\n              \"cost-metric\": \"hopcount\"\n\
    \           }\n        }\n     },\n     \"resources\" : {\n        \"filtered-network-map\"\
    \ : {\n           \"uri\" : \"http://custom.alto.example.com/networkmap/filtered\"\
    ,\n           \"media-type\" : \"application/alto-networkmap+json\",\n       \
    \    \"accepts\" : \"application/alto-networkmapfilter+json\",\n           \"\
    uses\": [ \"my-default-network-map\" ]\n        },\n        \"filtered-cost-map\"\
    \ : {\n           \"uri\" : \"http://custom.alto.example.com/costmap/filtered\"\
    ,\n           \"media-type\" : \"application/alto-costmap+json\",\n          \
    \ \"accepts\" : \"application/alto-costmapfilter+json\",\n           \"capabilities\"\
    \ : {\n              \"cost-constraints\" : true,\n              \"cost-type-names\"\
    \  : [ \"num-routing\", \"num-hop\",\n                                     \"\
    ord-routing\", \"ord-hop\" ]\n           },\n           \"uses\": [ \"my-default-network-map\"\
    \ ]\n        },\n        \"ordinal-routing-cost-map\" : {\n           \"uri\"\
    \ : \"http://custom.alto.example.com/ord/routingcost\",\n           \"media-type\"\
    \ : \"application/alto-costmap+json\",\n           \"capabilities\" : {\n    \
    \          \"cost-type-names\" : [ \"ord-routing\" ]\n           },\n        \
    \   \"uses\": [ \"my-default-network-map\" ]\n        },\n        \"ordinal-hopcount-cost-map\"\
    \ : {\n           \"uri\" : \"http://custom.alto.example.com/ord/hopcount\",\n\
    \           \"media-type\" : \"application/alto-costmap+json\",\n           \"\
    capabilities\" : {\n              \"cost-type-names\" : [ \"ord-hop\" ]\n    \
    \       },\n           \"uses\": [ \"my-default-network-map\" ]\n        }\n \
    \    }\n   }\n   Note that the subdomain does not define any network maps, and\
    \ uses\n   the network map with resource ID \"my-default-network-map\" defined\
    \ in\n   the Root IRD.\n"
- title: 9.2.5.  Considerations of Using IRD
  contents:
  - '9.2.5.  Considerations of Using IRD

    '
- title: 9.2.5.1.  ALTO client
  contents:
  - "9.2.5.1.  ALTO client\n   This document specifies no requirements or constraints\
    \ on ALTO\n   clients with regard to how they process an information resource\n\
    \   directory to identify the URI corresponding to a desired information\n   resource.\
    \  However, some advice is provided for implementers.\n   It is possible that\
    \ multiple entries in the directory match a desired\n   information resource.\
    \  For instance, in the example in Section 9.2.3,\n   a full cost map with the\
    \ \"numerical\" cost mode and the \"routingcost\"\n   cost metric could be retrieved\
    \ via a GET request to\n   \"http://alto.example.com/costmap/num/routingcost\"\
    \ or via a POST\n   request to \"http://custom.alto.example.com/costmap/filtered\"\
    .\n   In general, it is preferred for ALTO clients to use GET requests\n   where\
    \ appropriate, since it is more likely for responses to be\n   cacheable.  However,\
    \ an ALTO client may need to use POST, for\n   example, to get ALTO costs or properties\
    \ that are for a restricted\n   set of PIDs or endpoints or to update cached information\
    \ previously\n   acquired via GET requests.\n"
- title: 9.2.5.2.  ALTO server
  contents:
  - "9.2.5.2.  ALTO server\n   This document indicates that an ALTO server may or\
    \ may not provide\n   the information resources specified in the Map-Filtering\
    \ Service.  If\n   these resources are not provided, it is indicated to an ALTO\
    \ client\n   by the absence of a network map or cost map with any media types\n\
    \   listed under \"accepts\".\n"
- title: '10.  Protocol Specification: Basic Data Types'
  contents:
  - "10.  Protocol Specification: Basic Data Types\n   This section details the format\
    \ of basic data types.\n"
- title: 10.1.  PID Name
  contents:
  - "10.1.  PID Name\n   A PID Name is encoded as a JSON string.  The string MUST\
    \ be no more\n   than 64 characters, and it MUST NOT contain characters other\
    \ than US-\n   ASCII alphanumeric characters (U+0030-U+0039, U+0041-U+005A, and\n\
    \   U+0061-U+007A), the hyphen ('-', U+002D), the colon (':', U+003A),\n   the\
    \ at sign ('@', code point U+0040), the low line ('_', U+005F), or\n   the '.'\
    \ separator (U+002E).  The '.' separator is reserved for future\n   use and MUST\
    \ NOT be used unless specifically indicated in this\n   document, or an extension\
    \ document.\n   The type PIDName is used in this document to indicate a string\
    \ of\n   this format.\n"
- title: 10.2.  Resource ID
  contents:
  - "10.2.  Resource ID\n   A resource ID uniquely identifies a particular resource\
    \ (e.g., an\n   ALTO network map) within an ALTO server (see Section 9.2).\n \
    \  A resource ID is encoded as a JSON string with the same format as\n   that\
    \ of the type PIDName.\n   The type ResourceID is used in this document to indicate\
    \ a string of\n   this format.\n"
- title: 10.3.  Version Tag
  contents:
  - "10.3.  Version Tag\n   A version tag is defined as:\n       object {\n      \
    \   ResourceID resource-id;\n         JSONString tag;\n       } VersionTag;\n\
    \   As described in Section 6.3, the \"resource-id\" field provides the\n   resource\
    \ ID of a resource (e.g., a network map) defined in the\n   information resource\
    \ directory, and \"tag\" provides an identifier\n   string.\n   Two version tags\
    \ are equal if and only if both the \"resource-id\"\n   fields are byte-for-byte\
    \ equal and the \"tag\" fields are byte-for-byte\n   equal.\n   A string representing\
    \ the \"tag\" field MUST be no more than 64\n   characters, and it MUST NOT contain\
    \ any character below U+0021 or\n   above U+007E.  It is RECOMMENDED that the\
    \ \"tag\" string have a low\n   collision probability with other tags.  One suggested\
    \ mechanism is to\n   compute it using a hash of the data contents of the resource.\n"
- title: 10.4.  Endpoints
  contents:
  - "10.4.  Endpoints\n   This section defines formats used to encode addresses for\
    \ endpoints.\n   In a case that multiple textual representations encode the same\n\
    \   endpoint address or prefix (within the guidelines outlined in this\n   document),\
    \ the ALTO Protocol does not require ALTO clients or ALTO\n   servers to use a\
    \ particular textual representation, nor does it\n   require that ALTO servers\
    \ reply to requests using the same textual\n   representation used by requesting\
    \ ALTO clients.  ALTO clients must be\n   cognizant of this.\n"
- title: 10.4.1.  Typed Endpoint Addresses
  contents:
  - "10.4.1.  Typed Endpoint Addresses\n   When an endpoint address is used, an ALTO\
    \ implementation must be able\n   to determine its type.  For this purpose, the\
    \ ALTO Protocol allows\n   endpoint addresses to also explicitly indicate their\
    \ types.  This\n   document refers to such addresses as \"Typed Endpoint Addresses\"\
    .\n   Typed endpoint addresses are encoded as strings of the format\n   AddressType:EndpointAddr,\
    \ with the ':' character as a separator.  The\n   type TypedEndpointAddr is used\
    \ to indicate a string of this format.\n"
- title: 10.4.2.  Address Type
  contents:
  - "10.4.2.  Address Type\n   The AddressType component of TypedEndPointAddr is defined\
    \ as a string\n   consisting of only US-ASCII alphanumeric characters (U+0030-U+0039,\n\
    \   U+0041-U+005A, and U+0061-U+007A).  The type AddressType is used in\n   this\
    \ document to indicate a string of this format.\n   This document defines two\
    \ values for AddressType: \"ipv4\" to refer to\n   IPv4 addresses and \"ipv6\"\
    \ to refer to IPv6 addresses.  All\n   AddressType identifiers appearing in an\
    \ HTTP request or response with\n   an \"application/alto-*\" media type MUST\
    \ be registered in the \"ALTO\n   Address Type Registry\" (see Section 14.4).\n"
- title: 10.4.3.  Endpoint Address
  contents:
  - "10.4.3.  Endpoint Address\n   The EndpointAddr component of TypedEndPointAddr\
    \ is also encoded as a\n   string.  The exact characters and format depend on\
    \ AddressType.  This\n   document defines EndpointAddr when AddressType is \"\
    ipv4\" or \"ipv6\".\n"
- title: 10.4.3.1.  IPv4
  contents:
  - "10.4.3.1.  IPv4\n   IPv4 Endpoint Addresses are encoded as specified by the IPv4address\n\
    \   rule in Section 3.2.2 of [RFC3986].\n"
- title: 10.4.3.2.  IPv6
  contents:
  - "10.4.3.2.  IPv6\n   IPv6 endpoint addresses are encoded as specified in Section\
    \ 4 of\n   [RFC5952].\n"
- title: 10.4.4.  Endpoint Prefixes
  contents:
  - "10.4.4.  Endpoint Prefixes\n   For efficiency, it is useful to denote a set of\
    \ endpoint addresses\n   using a special notation (if one exists).  This specification\
    \ makes\n   use of the prefix notations for both IPv4 and IPv6 for this purpose.\n\
    \   Endpoint prefixes are encoded as strings.  The exact characters and\n   format\
    \ depend on the type of endpoint address.\n   The type EndpointPrefix is used\
    \ in this document to indicate a string\n   of this format.\n"
- title: 10.4.4.1.  IPv4
  contents:
  - "10.4.4.1.  IPv4\n   IPv4 endpoint prefixes are encoded as specified in Section\
    \ 3.1 of\n   [RFC4632].\n"
- title: 10.4.4.2.  IPv6
  contents:
  - "10.4.4.2.  IPv6\n   IPv6 endpoint prefixes are encoded as specified in Section\
    \ 7 of\n   [RFC5952].\n"
- title: 10.4.5.  Endpoint Address Group
  contents:
  - "10.4.5.  Endpoint Address Group\n   The ALTO Protocol includes messages that\
    \ specify potentially large\n   sets of endpoint addresses.  Endpoint address\
    \ groups provide a more\n   efficient way to encode such sets, even when the set\
    \ contains\n   endpoint addresses of different types.\n   An endpoint address\
    \ group is defined as:\n       object-map {\n         AddressType -> EndpointPrefix<0..*>;\n\
    \       } EndpointAddrGroup;\n   In particular, an endpoint address group is a\
    \ JSON object\n   representing a map, where each key is the string corresponding\
    \ to an\n   address type, and the corresponding value is an array listing\n  \
    \ prefixes of addresses of that type.\n   The following is an example with both\
    \ IPv4 and IPv6 endpoint\n   addresses:\n       {\n         \"ipv4\": [\n    \
    \       \"192.0.2.0/24\",\n           \"198.51.100.0/25\"\n         ],\n     \
    \    \"ipv6\": [\n           \"2001:db8:0:1::/64\",\n           \"2001:db8:0:2::/64\"\
    \n         ]\n       }\n"
- title: 10.5.  Cost Mode
  contents:
  - "10.5.  Cost Mode\n   A cost mode is encoded as a string.  The string MUST have\
    \ a value of\n   either \"numerical\" or \"ordinal\".\n   The type CostMode is\
    \ used in this document to indicate a string of\n   this format.\n"
- title: 10.6.  Cost Metric
  contents:
  - "10.6.  Cost Metric\n   A cost metric is encoded as a string.  The string MUST\
    \ be no more\n   than 32 characters, and it MUST NOT contain characters other\
    \ than US-\n   ASCII alphanumeric characters (U+0030-U+0039, U+0041-U+005A, and\n\
    \   U+0061-U+007A), the hyphen ('-', U+002D), the colon (':', U+003A),\n   the\
    \ low line ('_', U+005F), or the '.' separator (U+002E).  The '.'\n   separator\
    \ is reserved for future use and MUST NOT be used unless\n   specifically indicated\
    \ by a companion or extension document.\n   Identifiers prefixed with \"priv:\"\
    \ are reserved for Private Use\n   [RFC5226] without a need to register with IANA.\
    \  All other\n   identifiers that appear in an HTTP request or response with an\n\
    \   \"application/alto-*\" media type and indicate cost metrics MUST be\n   registered\
    \ in the \"ALTO Cost Metric Registry\" Section 14.2.  For an\n   identifier with\
    \ the \"priv:\" prefix, an additional string (e.g.,\n   company identifier or\
    \ random string) MUST follow (i.e., \"priv:\" only\n   is not a valid identifier)\
    \ to reduce potential collisions.\n   The type CostMetric is used in this document\
    \ to indicate a string of\n   this format.\n"
- title: 10.7.  Cost Type
  contents:
  - "10.7.  Cost Type\n   The combination of CostMetric and CostMode defines the type\
    \ CostType:\n       object {\n         CostMetric cost-metric;\n         CostMode\
    \   cost-mode;\n         [JSONString description;]\n       } CostType;\n   The\
    \ \"description\" field, if present, MUST provide a string value with\n   a human-readable\
    \ description of the cost-metric and cost-mode.  An\n   ALTO client MAY present\
    \ this string to a developer, as part of a\n   discovery process; however, the\
    \ field is not intended to be\n   interpreted by an ALTO client.\n"
- title: 10.8.  Endpoint Property
  contents:
  - "10.8.  Endpoint Property\n   This document distinguishes two types of endpoint\
    \ properties:\n   resource-specific endpoint properties and global endpoint properties.\n\
    \   The type EndpointPropertyType is used in this document to indicate a\n   string\
    \ denoting either a resource-specific endpoint property or a\n   global endpoint\
    \ property.\n"
- title: 10.8.1.  Resource-Specific Endpoint Properties
  contents:
  - "10.8.1.  Resource-Specific Endpoint Properties\n   The name of resource-specific\
    \ endpoint property MUST follow this\n   format: a resource ID, followed by the\
    \ '.' separator (U+002E),\n   followed by a name obeying the same rules as for\
    \ global endpoint\n   property names (Section 10.8.2).\n   This document defines\
    \ only one resource-specific endpoint property:\n   pid.  An example is \"my-default-networkmap.pid\"\
    .\n"
- title: 10.8.2.  Global Endpoint Properties
  contents:
  - "10.8.2.  Global Endpoint Properties\n   A global endpoint property is encoded\
    \ as a string.  The string MUST\n   be no more than 32 characters, and it MUST\
    \ NOT contain characters\n   other than US-ASCII alphanumeric characters (U+0030-U+0039,\n\
    \   U+0041-U+005A, and U+0061-U+007A), the hyphen ('-', U+002D), the\n   colon\
    \ (':', U+003A), or the low line ('_', U+005F).  Note that the\n   '.' separator\
    \ is not allowed so that there is no ambiguity on whether\n   an endpoint property\
    \ is global or resource specific.\n   Identifiers prefixed with \"priv:\" are\
    \ reserved for Private Use\n   [RFC5226] without a need to register with IANA.\
    \  All other\n   identifiers for endpoint properties appearing in an HTTP request\
    \ or\n   response with an \"application/alto-*\" media type MUST be registered\n\
    \   in the \"ALTO Endpoint Property Type Registry\" Section 14.3.  For an\n  \
    \ endpoint property identifier with the \"priv:\" prefix, an additional\n   string\
    \ (e.g., company identifier or random string) MUST follow (i.e.,\n   \"priv:\"\
    \ only is not a valid endpoint property identifier) to reduce\n   potential collisions.\n"
- title: '11.  Protocol Specification: Service Information Resources'
  contents:
  - "11.  Protocol Specification: Service Information Resources\n   This section documents\
    \ the individual information resources defined\n   to provide the services defined\
    \ in this document.\n"
- title: 11.1.  Meta Information
  contents:
  - "11.1.  Meta Information\n   For the \"meta\" field of the response to an individual\
    \ information\n   resource, this document defines two generic fields: the \"vtag\"\
    \ field,\n   which provides the version tag (see Section 10.3) of the current\n\
    \   information resource, and the \"dependent-vtags\" field, which is an\n   array\
    \ of version tags, to indicate the version tags of the resources\n   on which\
    \ this resource depends.\n"
- title: 11.2.  Map Service
  contents:
  - "11.2.  Map Service\n   The Map Service provides batch information to ALTO clients\
    \ in the\n   form of two types of maps: ALTO network maps and ALTO cost maps.\n"
- title: 11.2.1.  Network Map
  contents:
  - "11.2.1.  Network Map\n   An ALTO network map information resource defines a set\
    \ of PIDs, and\n   for each PID, lists the network locations (endpoints) within\
    \ the PID.\n   An ALTO server MUST provide at least one network map.\n"
- title: 11.2.1.1.  Media Type
  contents:
  - "11.2.1.1.  Media Type\n   The media type of ALTO network maps is \"application/alto-\n\
    \   networkmap+json\".\n"
- title: 11.2.1.2.  HTTP Method
  contents:
  - "11.2.1.2.  HTTP Method\n   An ALTO network map resource is requested using the\
    \ HTTP GET method.\n"
- title: 11.2.1.3.  Accept Input Parameters
  contents:
  - "11.2.1.3.  Accept Input Parameters\n   None.\n"
- title: 11.2.1.4.  Capabilities
  contents:
  - "11.2.1.4.  Capabilities\n   None.\n"
- title: 11.2.1.5.  Uses
  contents:
  - "11.2.1.5.  Uses\n   None.\n"
- title: 11.2.1.6.  Response
  contents:
  - "11.2.1.6.  Response\n   The \"meta\" field of an ALTO network map response MUST\
    \ include the\n   \"vtag\" field, which provides the version tag of the retrieved\
    \ network\n   map.\n   The data component of an ALTO network map response is named\
    \ \"network-\n   map\", which is a JSON object of type NetworkMapData:\n     \
    \  object {\n         NetworkMapData network-map;\n       } InfoResourceNetworkMap\
    \ : ResponseEntityBase;\n       object-map {\n         PIDName -> EndpointAddrGroup;\n\
    \       } NetworkMapData;\n   Specifically, a NetworkMapData object is a dictionary\
    \ map keyed by\n   PIDs.  The value of each PID is the associated set of endpoint\n\
    \   addresses for the PID.\n   The returned network map MUST include all PIDs\
    \ known to the ALTO\n   server.\n"
- title: 11.2.1.7.  Example
  contents:
  - "11.2.1.7.  Example\n    GET /networkmap HTTP/1.1\n    Host: alto.example.com\n\
    \    Accept: application/alto-networkmap+json,application/alto-error+json\n  \
    \     HTTP/1.1 200 OK\n       Content-Length: 449\n       Content-Type: application/alto-networkmap+json\n\
    \       {\n         \"meta\" : {\n           \"vtag\": {\n             \"resource-id\"\
    : \"my-default-network-map\",\n              \"tag\": \"da65eca2eb7a10ce8b059740b0b2e3f8eb1d4785\"\
    \n           }\n         },\n         \"network-map\" : {\n           \"PID1\"\
    \ : {\n             \"ipv4\" : [\n               \"192.0.2.0/24\",\n         \
    \      \"198.51.100.0/25\"\n             ]\n           },\n           \"PID2\"\
    \ : {\n             \"ipv4\" : [\n               \"198.51.100.128/25\"\n     \
    \        ]\n           },\n           \"PID3\" : {\n             \"ipv4\" : [\n\
    \               \"0.0.0.0/0\"\n             ],\n             \"ipv6\" : [\n  \
    \             \"::/0\"\n             ]\n           }\n         }\n       }\n \
    \  When parsing an ALTO network map, an ALTO client MUST ignore any\n   EndpointAddressGroup\
    \ whose address type it does not recognize.  If as\n   a result a PID does not\
    \ have any address types known to the client,\n   the client still MUST recognize\
    \ that PID name as valid, even though\n   the PID then contains no endpoints.\n\
    \   Note that the encoding of an ALTO network map response was chosen for\n  \
    \ readability and compactness.  If lookup efficiency at runtime is\n   crucial,\
    \ then the returned network map can be transformed into data\n   structures offering\
    \ more efficient lookup.  For example, one may\n   store an ALTO network map as\
    \ a trie-based data structure, which may\n   allow efficient longest-prefix matching\
    \ of IP addresses.\n"
- title: 11.2.2.  Mapping IP Addresses to PIDs for 'ipv4'/'ipv6' Network Maps
  contents:
  - "11.2.2.  Mapping IP Addresses to PIDs for 'ipv4'/'ipv6' Network Maps\n   A key\
    \ usage of an ALTO network map is to map endpoint addresses to\n   PIDs.  For\
    \ network maps containing the \"ipv4\" and \"ipv6\" address\n   types defined\
    \ in this document, when either an ALTO client or an ALTO\n   server needs to\
    \ compute the mapping from IP addresses to PIDs, the\n   longest-prefix matching\
    \ algorithm (Longest Match in Section 5.2.4.3\n   of [RFC1812]) MUST be used.\n\
    \   To ensure that the longest-prefix matching algorithm yields one and\n   only\
    \ one PID, an ALTO network map containing the \"ipv4\"/\"ipv6\"\n   address types\
    \ MUST satisfy the following two requirements.\n   First, such a network map MUST\
    \ define a PID for each possible address\n   in the IP address space for all of\
    \ the address types contained in the\n   map.  This is defined as the completeness\
    \ property of an ALTO network\n   map.  A RECOMMENDED way to satisfy this property\
    \ is to define a PID\n   with the shortest enclosing prefix of the addresses provided\
    \ in the\n   map.  For a map with full IPv4 reachability, this would mean\n  \
    \ including the 0.0.0.0/0 prefix in a PID; for full IPv6 reachability,\n   this\
    \ would be the ::/0 prefix.\n   Second, such a network map MUST NOT define two\
    \ or more PIDs that\n   contain an identical IP prefix, in order to ensure that\
    \ the longest-\n   prefix matching algorithm maps each IP addresses into exactly\
    \ one\n   PID.  This is defined as the non-overlapping property of an ALTO\n \
    \  network map.  Specifically, to map an IP address to its PID in a non-\n   overlapping\
    \ network map, one considers the set S, which consists of\n   all prefixes defined\
    \ in the network map, applies the longest-prefix\n   mapping algorithm to S to\
    \ identify the longest prefix containing the\n   IP address and assigns that prefix\
    \ the IP address belonging to the\n   PID containing the identified longest prefix.\n\
    \   The following example shows a complete and non-overlapping ALTO\n   network\
    \ map:\n       \"network-map\" : {\n         \"PID0\" : { \"ipv6\" : [ \"::/0\"\
    \ ] },\n         \"PID1\" : { \"ipv4\" : [ \"0.0.0.0/0\" ] },\n         \"PID2\"\
    \ : { \"ipv4\" : [ \"192.0.2.0/24\", \"198.51.100.0/24\" ] },\n         \"PID3\"\
    \ : { \"ipv4\" : [ \"192.0.2.0/25\", \"192.0.2.128/25\" ] }\n       }\n   The\
    \ IP address 192.0.2.1 should be mapped to PID3.\n   If, however, the two adjacent\
    \ prefixes in PID3 were combined as a\n   single prefix, then PID3 was changed\
    \ to:\n         \"PID3\" : { \"ipv4\" : [ \"192.0.2.0/24\" ] }\n   The new map\
    \ is no longer non-overlapping, and 192.0.2.1 could no\n   longer be mapped unambiguously\
    \ to a PID by means of longest-prefix\n   matching.\n   Extension documents may\
    \ define techniques to allow a single IP\n   address being mapped to multiple\
    \ PIDs, when a need is identified.\n"
- title: 11.2.3.  Cost Map
  contents:
  - "11.2.3.  Cost Map\n   An ALTO cost map resource lists the path cost for each\
    \ pair of\n   source/destination PIDs defined by the ALTO server for a given cost\n\
    \   metric and cost mode.  This resource MUST be provided for at least\n   the\
    \ \"routingcost\" cost metric.\n"
- title: 11.2.3.1.  Media Type
  contents:
  - "11.2.3.1.  Media Type\n   The media type of ALTO cost maps is \"application/alto-costmap+json\"\
    .\n"
- title: 11.2.3.2.  HTTP Method
  contents:
  - "11.2.3.2.  HTTP Method\n   An ALTO cost map resource is requested using the HTTP\
    \ GET method.\n"
- title: 11.2.3.3.  Accept Input Parameters
  contents:
  - "11.2.3.3.  Accept Input Parameters\n   None.\n"
- title: 11.2.3.4.  Capabilities
  contents:
  - "11.2.3.4.  Capabilities\n   The capabilities of an ALTO server URI providing\
    \ an unfiltered cost\n   map is a JSON object of type CostMapCapabilities:\n \
    \      object {\n         JSONString cost-type-names<1..1>;\n       } CostMapCapabilities;\n\
    \   with field:\n   cost-type-names:  Note that the array MUST include a single\
    \ CostType\n      name defined by the \"cost-types\" field in the \"meta\" field\
    \ of the\n      IRD.  This is because an unfiltered cost map (accept == \"\")\
    \ is\n      requested via an HTTP GET that accepts no input parameters.  As a\n\
    \      contrast, for filtered cost maps (see Section 11.3.2), the array\n    \
    \  can have multiple elements.\n"
- title: 11.2.3.5.  Uses
  contents:
  - "11.2.3.5.  Uses\n   The resource ID of the network map based on which the cost\
    \ map will\n   be defined.  Recall (Section 6) that the combination of a network\
    \ map\n   and a cost type defines a key.  In other words, an ALTO server MUST\n\
    \   NOT define two cost maps with the same cost type / network map pair.\n"
- title: 11.2.3.6.  Response
  contents:
  - "11.2.3.6.  Response\n   The \"meta\" field of a cost map response MUST include\
    \ the \"dependent-\n   vtags\" field, whose value is a single-element array to\
    \ indicate the\n   version tag of the network map used, where the network map\
    \ is\n   specified in \"uses\" of the IRD.  The \"meta\" MUST also include the\n\
    \   \"cost-type\" field, whose value indicates the cost type (Section 10.7)\n\
    \   of the cost map.\n   The data component of a cost map response is named \"\
    cost-map\", which\n   is a JSON object of type CostMapData:\n       object {\n\
    \         CostMapData cost-map;\n       } InfoResourceCostMap : ResponseEntityBase;\n\
    \       object-map {\n         PIDName -> DstCosts;\n       } CostMapData;\n \
    \      object-map {\n         PIDName -> JSONValue;\n       } DstCosts;\n   Specifically,\
    \ a CostMapData object is a dictionary map object, with\n   each key being the\
    \ PIDName string identifying the corresponding\n   source PID, and value being\
    \ a type of DstCosts, which denotes the\n   associated costs from the source PID\
    \ to a set of destination PIDs\n   (Section 6.2).  An implementation of the protocol\
    \ in this document\n   SHOULD assume that the cost is a JSONNumber and fail to\
    \ parse if it\n   is not, unless the implementation is using an extension to this\n\
    \   document that indicates when and how costs of other data types are\n   signaled.\n\
    \   The returned cost map MUST include the path cost for each (source\n   PID,\
    \ destination PID) pair for which a path cost is defined.  An ALTO\n   server\
    \ MAY omit entries for which path costs are not defined (e.g.,\n   either the\
    \ source or the destination PIDs contain addresses outside\n   of the network\
    \ provider's administrative domain).\n   Similar to the encoding of ALTO network\
    \ maps, the encoding of ALTO\n   cost maps was chosen for readability and compactness.\
    \  If lookup\n   efficiency at runtime is crucial, then the returned cost map\
    \ can be\n   transformed into data structures offering more efficient lookup.\
    \  For\n   example, one may store a cost map as a matrix.\n"
- title: 11.2.3.7.  Example
  contents:
  - "11.2.3.7.  Example\n       GET /costmap/num/routingcost HTTP/1.1\n       Host:\
    \ alto.example.com\n       Accept: application/alto-costmap+json,application/alto-error+json\n\
    \          HTTP/1.1 200 OK\n          Content-Length: 435\n          Content-Type:\
    \ application/alto-costmap+json\n          {\n            \"meta\" : {\n     \
    \         \"dependent-vtags\" : [\n                {\"resource-id\": \"my-default-network-map\"\
    ,\n                 \"tag\": \"3ee2cb7e8d63d9fab71b9b34cbf764436315542e\"\n  \
    \              }\n              ],\n              \"cost-type\" : {\"cost-mode\"\
    \  : \"numerical\",\n                             \"cost-metric\": \"routingcost\"\
    \n              }\n            },\n            \"cost-map\" : {\n            \
    \  \"PID1\": { \"PID1\": 1,  \"PID2\": 5,  \"PID3\": 10 },\n              \"PID2\"\
    : { \"PID1\": 5,  \"PID2\": 1,  \"PID3\": 15 },\n              \"PID3\": { \"\
    PID1\": 20, \"PID2\": 15  }\n            }\n          }\n   Similar to the network\
    \ map case, array-based encoding for \"map\" was\n   considered, but the current\
    \ encoding was chosen for clarity.\n"
- title: 11.3.  Map-Filtering Service
  contents:
  - "11.3.  Map-Filtering Service\n   The Map-Filtering Service allows ALTO clients\
    \ to specify filtering\n   criteria to return a subset of a full map available\
    \ in the Map\n   Service.\n"
- title: 11.3.1.  Filtered Network Map
  contents:
  - "11.3.1.  Filtered Network Map\n   A filtered ALTO network map is an ALTO network\
    \ map information\n   resource (Section 11.2.1) for which an ALTO client may supply\
    \ a list\n   of PIDs to be included.  A filtered ALTO network map MAY be provided\n\
    \   by an ALTO server.\n"
- title: 11.3.1.1.  Media Type
  contents:
  - "11.3.1.1.  Media Type\n   Since a filtered ALTO network map is still an ALTO\
    \ network map, it\n   uses the media type defined for ALTO network maps at\n \
    \  Section 11.2.1.1.\n"
- title: 11.3.1.2.  HTTP Method
  contents:
  - "11.3.1.2.  HTTP Method\n   A filtered ALTO network map is requested using the\
    \ HTTP POST method.\n"
- title: 11.3.1.3.  Accept Input Parameters
  contents:
  - "11.3.1.3.  Accept Input Parameters\n   An ALTO client supplies filtering parameters\
    \ by specifying media type\n   \"application/alto-networkmapfilter+json\" with\
    \ HTTP POST body\n   containing a JSON object of type ReqFilteredNetworkMap, where:\n\
    \       object {\n         PIDName pids<0..*>;\n         [AddressType address-types<0..*>;]\n\
    \       } ReqFilteredNetworkMap;\n   with fields:\n   pids:  Specifies list of\
    \ PIDs to be included in the returned filtered\n      network map.  If the list\
    \ of PIDs is empty, the ALTO server MUST\n      interpret the list as if it contained\
    \ a list of all currently\n      defined PIDs.  The ALTO server MUST interpret\
    \ entries appearing\n      multiple times as if they appeared only once.\n   address-types:\
    \  Specifies a list of address types to be included in\n      the returned filtered\
    \ network map.  If the \"address-types\" field\n      is not specified, or the\
    \ list of address types is empty, the ALTO\n      server MUST interpret the list\
    \ as if it contained a list of all\n      address types known to the ALTO server.\
    \  The ALTO server MUST\n      interpret entries appearing multiple times as if\
    \ they appeared\n      only once.\n"
- title: 11.3.1.4.  Capabilities
  contents:
  - "11.3.1.4.  Capabilities\n   None.\n"
- title: 11.3.1.5.  Uses
  contents:
  - "11.3.1.5.  Uses\n   The resource ID of the network map based on which the filtering\
    \ is\n   performed.\n"
- title: 11.3.1.6.  Response
  contents:
  - "11.3.1.6.  Response\n   The format is the same as unfiltered network maps.  See\n\
    \   Section 11.2.1.6 for the format.\n   The ALTO server MUST only include PIDs\
    \ in the response that were\n   specified (implicitly or explicitly) in the request.\
    \  If the input\n   parameters contain a PID name that is not currently defined\
    \ by the\n   ALTO server, the ALTO server MUST behave as if the PID did not appear\n\
    \   in the input parameters.  Similarly, the ALTO server MUST only\n   enumerate\
    \ addresses within each PID that have types specified\n   (implicitly or explicitly)\
    \ in the request.  If the input parameters\n   contain an address type that is\
    \ not currently known to the ALTO\n   server, the ALTO server MUST behave as if\
    \ the address type did not\n   appear in the input parameters.\n   The version\
    \ tag included in the \"vtag\" field of the response MUST\n   correspond to the\
    \ full (unfiltered) network map information resource\n   from which the filtered\
    \ information is provided.  This ensures that a\n   single, canonical version\
    \ tag is used independent of any filtering\n   that is requested by an ALTO client.\n"
- title: 11.3.1.7.  Example
  contents:
  - "11.3.1.7.  Example\n    POST /networkmap/filtered HTTP/1.1\n    Host: custom.alto.example.com\n\
    \    Content-Length: 33\n    Content-Type: application/alto-networkmapfilter+json\n\
    \    Accept: application/alto-networkmap+json,application/alto-error+json\n  \
    \  {\n      \"pids\": [ \"PID1\", \"PID2\" ]\n    }\n    HTTP/1.1 200 OK\n   \
    \ Content-Length: 342\n    Content-Type: application/alto-networkmap+json\n  \
    \  {\n      \"meta\" : {\n        \"vtag\" : {\n           \"resource-id\": \"\
    my-default-network-map\",\n           \"tag\": \"c0ce023b8678a7b9ec00324673b98e54656d1f6d\"\
    \n        }\n      },\n      \"network-map\" : {\n        \"PID1\" : {\n     \
    \     \"ipv4\" : [\n            \"192.0.2.0/24\",\n            \"198.51.100.0/24\"\
    \n          ]\n        },\n        \"PID2\" : {\n          \"ipv4\": [\n     \
    \       \"198.51.100.128/24\"\n          ]\n        }\n      }\n    }\n"
- title: 11.3.2.  Filtered Cost Map
  contents:
  - "11.3.2.  Filtered Cost Map\n   A filtered ALTO cost map is a cost map information\
    \ resource\n   (Section 11.2.3) for which an ALTO client may supply additional\n\
    \   parameters limiting the scope of the resulting cost map.  A filtered\n   ALTO\
    \ cost map MAY be provided by an ALTO server.\n"
- title: 11.3.2.1.  Media Type
  contents:
  - "11.3.2.1.  Media Type\n   Since a filtered ALTO cost map is still an ALTO cost\
    \ map, it uses the\n   media type defined for ALTO cost maps at Section 11.2.3.1.\n"
- title: 11.3.2.2.  HTTP Method
  contents:
  - "11.3.2.2.  HTTP Method\n   A filtered ALTO cost map is requested using the HTTP\
    \ POST method.\n"
- title: 11.3.2.3.  Accept Input Parameters
  contents:
  - "11.3.2.3.  Accept Input Parameters\n   The input parameters for a filtered cost\
    \ map are supplied in the\n   entity body of the POST request.  This document\
    \ specifies the input\n   parameters with a data format indicated by the media\
    \ type\n   \"application/alto-costmapfilter+json\", which is a JSON object of\
    \ type\n   ReqFilteredCostMap, where:\n       object {\n         CostType   cost-type;\n\
    \         [JSONString constraints<0..*>;]\n         [PIDFilter  pids;]\n     \
    \  } ReqFilteredCostMap;\n       object {\n         PIDName srcs<0..*>;\n    \
    \     PIDName dsts<0..*>;\n       } PIDFilter;\n   with fields:\n   cost-type:\
    \  The CostType (Section 10.7) for the returned costs.  The\n      \"cost-metric\"\
    \ and \"cost-mode\" fields MUST match one of the\n      supported cost types indicated\
    \ in this resource's \"capabilities\"\n      field (Section 11.3.2.4).  The ALTO\
    \ client SHOULD omit the\n      \"description\" field, and if present, the ALTO\
    \ server MUST ignore\n      the \"description\" field.\n   constraints:  Defines\
    \ a list of additional constraints on which\n      elements of the cost map are\
    \ returned.  This parameter MUST NOT be\n      specified if this resource's \"\
    capabilities\" field\n      (Section 11.3.2.4) indicate that constraint support\
    \ is not\n      available.  A constraint contains two entities separated by\n\
    \      whitespace: (1) an operator, \"gt\" for greater than, \"lt\" for less\n\
    \      than, \"ge\" for greater than or equal to, \"le\" for less than or\n  \
    \    equal to, or \"eq\" for equal to and (2) a target cost value.  The\n    \
    \  cost value is a number that MUST be defined in the same units as\n      the\
    \ cost metric indicated by the \"cost-metric\" parameter.  ALTO\n      servers\
    \ SHOULD use at least IEEE 754 double-precision floating\n      point [IEEE.754.2008]\
    \ to store the cost value, and SHOULD perform\n      internal computations using\
    \ double-precision floating-point\n      arithmetic.  If multiple \"constraint\"\
    \ parameters are specified,\n      they are interpreted as being related to each\
    \ other with a logical\n      AND.\n   pids:  A list of source PIDs and a list\
    \ of destination PIDs for which\n      path costs are to be returned.  If a list\
    \ is empty, the ALTO\n      server MUST interpret it as the full set of currently\
    \ defined\n      PIDs.  The ALTO server MUST interpret entries appearing in a\
    \ list\n      multiple times as if they appeared only once.  If the \"pids\" field\n\
    \      is not present, both lists MUST be interpreted by the ALTO server\n   \
    \   as containing the full set of currently defined PIDs.\n"
- title: 11.3.2.4.  Capabilities
  contents:
  - "11.3.2.4.  Capabilities\n   The URI providing this resource supports all capabilities\
    \ documented\n   in Section 11.2.3.4 (with identical semantics), plus additional\n\
    \   capabilities.  In particular, the capabilities are defined by a JSON\n   object\
    \ of type FilteredCostMapCapabilities:\n       object {\n         JSONString cost-type-names<1..*>;\n\
    \         JSONBool cost-constraints;\n       } FilteredCostMapCapabilities;\n\
    \   with fields:\n   cost-type-names:  See Section 11.2.3.4 and note that the\
    \ array can\n      have one to many cost types.\n   cost-constraints:  If true,\
    \ then the ALTO server allows cost\n      constraints to be included in requests\
    \ to the corresponding URI.\n      If not present, this field MUST be interpreted\
    \ as if it specified\n      false.  ALTO clients should be aware that constraints\
    \ may not have\n      the intended effect for cost maps with the ordinal cost\
    \ mode since\n      ordinal costs are not restricted to being sequential integers.\n"
- title: 11.3.2.5.  Uses
  contents:
  - "11.3.2.5.  Uses\n   The resource ID of the network map based on which the cost\
    \ map will\n   be filtered.\n"
- title: 11.3.2.6.  Response
  contents:
  - "11.3.2.6.  Response\n   The format is the same as an unfiltered ALTO cost map.\
    \  See\n   Section 11.2.3.6  for the format.\n   The \"dependent-vtags\" field\
    \ in the \"meta\" field provides an array\n   consisting of a single element,\
    \ which is the version tag of the\n   network map used in filtering.  ALTO clients\
    \ should verify that the\n   version tag included in the response is equal to\
    \ the version tag of\n   the network map used to generate the request (if applicable).\
    \  If it\n   is not, the ALTO client may wish to request an updated network map,\n\
    \   identify changes, and consider requesting a new filtered cost map.\n   The\
    \ returned cost map MUST contain only source/destination pairs that\n   have been\
    \ indicated (implicitly or explicitly) in the input\n   parameters.  If the input\
    \ parameters contain a PID name that is not\n   currently defined by the ALTO\
    \ server, the ALTO server MUST behave as\n   if the PID did not appear in the\
    \ input parameters.\n   If any constraints are specified, source/destination pairs\
    \ for which\n   the path costs do not meet the constraints MUST NOT be included\
    \ in\n   the returned cost map.  If no constraints were specified, then all\n\
    \   path costs are assumed to meet the constraints.\n"
- title: 11.3.2.7.  Example
  contents:
  - "11.3.2.7.  Example\n       POST /costmap/filtered HTTP/1.1\n       Host: custom.alto.example.com\n\
    \       Content-Type: application/alto-costmapfilter+json\n       Content-Length:\
    \ 181\n       Accept: application/alto-costmap+json,application/alto-error+json\n\
    \       {\n         \"cost-type\" : {\"cost-mode\": \"numerical\",\n         \
    \               \"cost-metric\": \"routingcost\"\n         },\n         \"pids\"\
    \ : {\n           \"srcs\" : [ \"PID1\" ],\n           \"dsts\" : [ \"PID1\",\
    \ \"PID2\", \"PID3\" ]\n         }\n       }\n       HTTP/1.1 200 OK\n       Content-Length:\
    \ 341\n       Content-Type: application/alto-costmap+json\n       {\n        \
    \ \"meta\" : {\n           \"dependent-vtags\" : [\n             {\"resource-id\"\
    : \"my-default-network-map\",\n              \"tag\": \"75ed013b3cb58f896e839582504f622838ce670f\"\
    \n             }\n           ],\n           \"cost-type\": {\"cost-mode\" : \"\
    numerical\",\n                         \"cost-metric\" : \"routingcost\"\n   \
    \        }\n         },\n         \"cost-map\" : {\n              \"PID1\": {\
    \ \"PID1\": 0,  \"PID2\": 1,  \"PID3\": 2 }\n         }\n       }\n"
- title: 11.4.  Endpoint Property Service
  contents:
  - "11.4.  Endpoint Property Service\n   The Endpoint Property Service provides information\
    \ about endpoint\n   properties to ALTO clients.\n"
- title: 11.4.1.  Endpoint Property
  contents:
  - "11.4.1.  Endpoint Property\n   An endpoint property resource provides information\
    \ about properties\n   for individual endpoints.  In addition to the required\
    \ \"pid\" endpoint\n   property (see Sections 7.1.1 and 11.4.1.4), further endpoint\n\
    \   properties MAY be provided by an ALTO server.\n"
- title: 11.4.1.1.  Media Type
  contents:
  - "11.4.1.1.  Media Type\n   The media type of an endpoint property resource is\
    \ \"application/\n   alto-endpointprop+json\".\n"
- title: 11.4.1.2.  HTTP Method
  contents:
  - "11.4.1.2.  HTTP Method\n   The endpoint property resource is requested using\
    \ the HTTP POST\n   method.\n"
- title: 11.4.1.3.  Accept Input Parameters
  contents:
  - "11.4.1.3.  Accept Input Parameters\n   The input parameters for an endpoint property\
    \ request are supplied in\n   the entity body of the POST request.  This document\
    \ specifies the\n   input parameters with a data format indicated by the media\
    \ type\n   \"application/alto-endpointpropparams+json\", which is a JSON object\
    \ of\n   type ReqEndpointProp:\n       object {\n         EndpointPropertyType\
    \  properties<1..*>;\n         TypedEndpointAddr     endpoints<1..*>;\n      \
    \ } ReqEndpointProp;\n   with fields:\n   properties:  List of endpoint properties\
    \ to be returned for each\n      endpoint.  Each specified property MUST be included\
    \ in the list of\n      supported properties indicated by this resource's \"capabilities\"\
    \n      field (Section 11.4.1.4).  The ALTO server MUST interpret entries\n  \
    \    appearing multiple times as if they appeared only once.\n   endpoints:  List\
    \ of endpoint addresses for which the specified\n      properties are to be returned.\
    \  The ALTO server MUST interpret\n      entries appearing multiple times as if\
    \ they appeared only once.\n"
- title: 11.4.1.4.  Capabilities
  contents:
  - "11.4.1.4.  Capabilities\n   The capabilities of an ALTO server URI providing\
    \ endpoint properties\n   are defined by a JSON object of type EndpointPropertyCapabilities:\n\
    \       object {\n         EndpointPropertyType prop-types<1..*>;\n       } EndpointPropertyCapabilities;\n\
    \   with field:\n   prop-types:  The endpoint properties (see Section 10.8) supported\
    \ by\n      the corresponding URI.\n   In particular, the information resource\
    \ closure MUST provide the\n   lookup of pid for every ALTO network map defined.\n"
- title: 11.4.1.5.  Uses
  contents:
  - "11.4.1.5.  Uses\n   None.\n"
- title: 11.4.1.6.  Response
  contents:
  - "11.4.1.6.  Response\n   The \"dependent-vtags\" field in the \"meta\" field of\
    \ the response MUST\n   be an array that includes the version tags of all ALTO\
    \ network maps\n   whose \"pid\" is queried.\n   The data component of an endpoint\
    \ properties response is named\n   \"endpoint-properties\", which is a JSON object\
    \ of type\n   EndpointPropertyMapData, where:\n       object {\n         EndpointPropertyMapData\
    \ endpoint-properties;\n       } InfoResourceEndpointProperties : ResponseEntityBase;\n\
    \       object-map {\n         TypedEndpointAddr -> EndpointProps;\n       } EndpointPropertyMapData;\n\
    \       object {\n         EndpointPropertyType -> JSONValue;\n       } EndpointProps;\n\
    \   Specifically, an EndpointPropertyMapData object has one member for\n   each\
    \ endpoint indicated in the input parameters (with the name being\n   the endpoint\
    \ encoded as a TypedEndpointAddr).  The requested\n   properties for each endpoint\
    \ are encoded in a corresponding\n   EndpointProps object, which encodes one name/value\
    \ pair for each\n   requested property, where the property names are encoded as\
    \ strings\n   of type EndpointPropertyType.  An implementation of the protocol\
    \ in\n   this document SHOULD assume that the property value is a JSONString\n\
    \   and fail to parse if it is not, unless the implementation is using an\n  \
    \ extension to this document that indicates when and how property\n   values of\
    \ other data types are signaled.\n   The ALTO server returns the value for each\
    \ of the requested endpoint\n   properties for each of the endpoints listed in\
    \ the input parameters.\n   If the ALTO server does not define a requested property's\
    \ value for a\n   particular endpoint, then it MUST omit that property from the\n\
    \   response for only that endpoint.\n"
- title: 11.4.1.7.  Example
  contents:
  - "11.4.1.7.  Example\n  POST /endpointprop/lookup HTTP/1.1\n  Host: alto.example.com\n\
    \  Content-Length: 181\n  Content-Type: application/alto-endpointpropparams+json\n\
    \  Accept: application/alto-endpointprop+json,application/alto-error+json\n  {\n\
    \    \"properties\" : [ \"my-default-networkmap.pid\",\n                     \"\
    priv:ietf-example-prop\" ],\n    \"endpoints\"  : [ \"ipv4:192.0.2.34\",\n   \
    \                  \"ipv4:203.0.113.129\" ]\n  }\n  HTTP/1.1 200 OK\n  Content-Length:\
    \ 396\n  Content-Type: application/alto-endpointprop+json\n  {\n    \"meta\" :\
    \ {\n      \"dependent-vtags\" : [\n        {\"resource-id\": \"my-default-network-map\"\
    ,\n         \"tag\": \"7915dc0290c2705481c491a2b4ffbec482b3cf62\"\n        }\n\
    \      ]\n    },\n    \"endpoint-properties\": {\n      \"ipv4:192.0.2.34\"  \
    \  : { \"my-default-network-map.pid\": \"PID1\",\n                           \
    \    \"priv:ietf-example-prop\": \"1\" },\n      \"ipv4:203.0.113.129\" : { \"\
    my-default-network-map.pid\": \"PID3\" }\n    }\n  }\n"
- title: 11.5.  Endpoint Cost Service
  contents:
  - "11.5.  Endpoint Cost Service\n   The Endpoint Cost Service provides information\
    \ about costs between\n   individual endpoints.\n   In particular, this service\
    \ allows lists of endpoint prefixes (and\n   addresses, as a special case) to\
    \ be ranked (ordered) by an ALTO\n   server.\n"
- title: 11.5.1.  Endpoint Cost
  contents:
  - "11.5.1.  Endpoint Cost\n   An endpoint cost resource provides information about\
    \ costs between\n   individual endpoints.  It MAY be provided by an ALTO server.\n\
    \   How an ALTO server provides the endpoint cost resource is\n   implementation\
    \ dependent.  An ALTO server may use either fine-grained\n   costs among individual\
    \ endpoints or coarse-grained costs based on the\n   costs between the PIDs corresponding\
    \ to the endpoints.  See\n   Section 15.3 for additional details.\n"
- title: 11.5.1.1.  Media Type
  contents:
  - "11.5.1.1.  Media Type\n   The media type of the endpoint cost resource is \"\
    application/alto-\n   endpointcost+json\".\n"
- title: 11.5.1.2.  HTTP Method
  contents:
  - "11.5.1.2.  HTTP Method\n   The endpoint cost resource is requested using the\
    \ HTTP POST method.\n"
- title: 11.5.1.3.  Accept Input Parameters
  contents:
  - "11.5.1.3.  Accept Input Parameters\n   An ALTO client supplies the endpoint cost\
    \ parameters through a media\n   type \"application/alto-endpointcostparams+json\"\
    , with an HTTP POST\n   entity body of a JSON object of type ReqEndpointCostMap:\n\
    \       object {\n         CostType          cost-type;\n         [JSONString\
    \       constraints<0..*>;]\n         EndpointFilter    endpoints;\n       } ReqEndpointCostMap;\n\
    \       object {\n         [TypedEndpointAddr srcs<0..*>;]\n         [TypedEndpointAddr\
    \ dsts<0..*>;]\n       } EndpointFilter;\n   with fields:\n   cost-type:  The\
    \ cost type (Section 10.7) to use for returned costs.\n      The \"cost-metric\"\
    \ and \"cost-mode\" fields MUST match one of the\n      supported cost types indicated\
    \ in this resource's \"capabilities\"\n      fields (Section 11.5.1.4).  The ALTO\
    \ client SHOULD omit the\n      \"description\" field, and if present, the ALTO\
    \ server MUST ignore\n      the \"description\" field.\n   constraints:  Defined\
    \ equivalently to the \"constraints\" input\n      parameter of a filtered cost\
    \ map (see Section 11.3.2).\n   endpoints:  A list of source endpoints and destination\
    \ endpoints for\n      which path costs are to be returned.  If the list of source\
    \ or\n      destination endpoints is empty (or not included), the ALTO server\n\
    \      MUST interpret it as if it contained the endpoint address\n      corresponding\
    \ to the client IP address from the incoming\n      connection (see Section 13.3\
    \ for discussion and considerations\n      regarding this mode).  The source and\
    \ destination endpoint lists\n      MUST NOT be both empty.  The ALTO server MUST\
    \ interpret entries\n      appearing multiple times in a list as if they appeared\
    \ only once.\n"
- title: 11.5.1.4.  Capabilities
  contents:
  - "11.5.1.4.  Capabilities\n   This document defines EndpointCostCapabilities as\
    \ the same as\n   FilteredCostMapCapabilities.  See Section 11.3.2.4.\n"
- title: 11.5.1.5.  Uses
  contents:
  - "11.5.1.5.  Uses\n   It is important to note that although this resource allows\
    \ an ALTO\n   server to reveal costs between individual endpoints, the ALTO server\n\
    \   is not required to do so.  A simple implementation of ECS may compute\n  \
    \ the cost between two endpoints as the cost between the PIDs\n   corresponding\
    \ to the endpoints, using one of the exposed network and\n   cost maps defined\
    \ by the server.  ECS MUST NOT specify the \"use\"\n   field to indicate a network\
    \ or cost map.  Hence, the ECS cost is the\n   cost from the source endpoint to\
    \ the destination endpoint.  A future\n   extension may allow ECS to state that\
    \ it \"uses\" a network map.  The\n   extension then will need to define the semantics.\n"
- title: 11.5.1.6.  Response
  contents:
  - "11.5.1.6.  Response\n   The \"meta\" field of an endpoint cost response MUST\
    \ include the \"cost-\n   type\" field, to indicate the cost type used.\n   The\
    \ data component of an endpoint cost response is named\n   \"endpoint-cost-map\"\
    , which is a JSON object of type\n   EndpointCostMapData:\n       object {\n \
    \        EndpointCostMapData endpoint-cost-map;\n       } InfoResourceEndpointCostMap\
    \ : ResponseEntityBase;\n       object-map {\n         TypedEndpointAddr -> EndpointDstCosts;\n\
    \       } EndpointCostMapData;\n       object-map {\n         TypedEndpointAddr\
    \ -> JSONValue;\n       } EndpointDstCosts;\n   Specifically, an EndpointCostMapData\
    \ object is a dictionary map with\n   each key representing a TypedEndpointAddr\
    \ string identifying the\n   source endpoint specified in the input parameters.\
    \  For each source\n   endpoint, an EndpointDstCosts dictionary map object denotes\
    \ the\n   associated cost to each destination endpoint specified in input\n  \
    \ parameters.  An implementation of the protocol in this document\n   SHOULD assume\
    \ that the cost value is a JSONNumber and fail to parse\n   if it is not, unless\
    \ the implementation is using an extension to this\n   document that indicates\
    \ when and how costs of other data types are\n   signaled.  If the ALTO server\
    \ does not define a cost value from a\n   source endpoint to a particular destination\
    \ endpoint, it MAY be\n   omitted from the response.\n"
- title: 11.5.1.7.  Example
  contents:
  - "11.5.1.7.  Example\n  POST /endpointcost/lookup HTTP/1.1\n  Host: alto.example.com\n\
    \  Content-Length: 248\n  Content-Type: application/alto-endpointcostparams+json\n\
    \  Accept: application/alto-endpointcost+json,application/alto-error+json\n  {\n\
    \    \"cost-type\": {\"cost-mode\" : \"ordinal\",\n                  \"cost-metric\"\
    \ : \"routingcost\"},\n    \"endpoints\" : {\n      \"srcs\": [ \"ipv4:192.0.2.2\"\
    \ ],\n      \"dsts\": [\n        \"ipv4:192.0.2.89\",\n        \"ipv4:198.51.100.34\"\
    ,\n        \"ipv4:203.0.113.45\"\n      ]\n    }\n  }\n  HTTP/1.1 200 OK\n  Content-Length:\
    \ 274\n  Content-Type: application/alto-endpointcost+json\n  {\n    \"meta\" :\
    \ {\n      \"cost-type\": {\"cost-mode\" : \"ordinal\",\n                    \"\
    cost-metric\" : \"routingcost\"\n      }\n    },\n    \"endpoint-cost-map\" :\
    \ {\n      \"ipv4:192.0.2.2\": {\n        \"ipv4:192.0.2.89\"    : 1,\n      \
    \  \"ipv4:198.51.100.34\" : 2,\n        \"ipv4:203.0.113.45\"  : 3\n      }\n\
    \    }\n  }\n"
- title: 12.  Use Cases
  contents:
  - "12.  Use Cases\n   The sections below depict typical use cases.  While these\
    \ use cases\n   focus on peer-to-peer applications, ALTO can be applied to other\n\
    \   environments such as Content Distribution Networks (CDNs)\n   [ALTO-USE-CASES].\n"
- title: 12.1.  ALTO Client Embedded in P2P Tracker
  contents:
  - "12.1.  ALTO Client Embedded in P2P Tracker\n   Many deployed P2P systems use\
    \ a tracker to manage swarms and perform\n   peer selection.  Such a P2P tracker\
    \ can already use a variety of\n   information to perform peer selection to meet\
    \ application-specific\n   goals.  By acting as an ALTO client, the P2P tracker\
    \ can use ALTO\n   information as an additional information source to enable more\n\
    \   network-efficient traffic patterns and improve application\n   performance.\n\
    \   A particular requirement of many P2P trackers is that they must\n   handle\
    \ a large number of P2P clients.  A P2P tracker can obtain and\n   locally store\
    \ ALTO information (e.g., ALTO network maps and cost\n   maps) from the ISPs containing\
    \ the P2P clients, and benefit from the\n   same aggregation of network locations\
    \ done by ALTO servers.\n       .---------.   (1) Get Network Map    .---------------.\n\
    \       |         | <----------------------> |               |\n       |  ALTO\
    \   |                          |  P2P Tracker  |\n       | Server  |   (2) Get\
    \ Cost Map       | (ALTO client) |\n       |         | <---------------------->\
    \ |               |\n       `---------'                          `---------------'\n\
    \                                               ^     |\n                    \
    \             (3) Get Peers |     | (4) Selected Peer\n                      \
    \                         |     v     List\n                 .---------.     \
    \            .-----------.\n                 | Peer 1  | <-------------- |   P2P\
    \     |\n                 `---------'                 |  Client   |\n        \
    \             .      (5) Connect to   `-----------'\n                     .  \
    \      Selected Peers     /\n                 .---------.                    /\n\
    \                 | Peer 50 | <------------------\n                 `---------'\n\
    \               Figure 4: ALTO Client Embedded in P2P Tracker\n   Figure 4 shows\
    \ an example use case where a P2P tracker is an ALTO\n   client and applies ALTO\
    \ information when selecting peers for its P2P\n   clients.  The example proceeds\
    \ as follows:\n   1.  The P2P tracker requests from the ALTO server a network\
    \ map, so\n       that it locally map P2P clients into PIDs.\n   2.  The P2P tracker\
    \ requests from the ALTO server the cost map\n       amongst all PIDs identified\
    \ in the preceding step.\n   3.  A P2P client joins the swarm, and requests a\
    \ peer list from the\n       P2P tracker.\n   4.  The P2P tracker returns a peer\
    \ list to the P2P client.  The\n       returned peer list is computed based on\
    \ the network map and the\n       cost map returned by the ALTO server, and possibly\
    \ other\n       information sources.  Note that it is possible that a tracker\
    \ may\n       use only the network map to implement hierarchical peer selection\n\
    \       by preferring peers within the same PID and ISP.\n   5.  The P2P client\
    \ connects to the selected peers.\n   Note that the P2P tracker may provide peer\
    \ lists to P2P clients\n   distributed across multiple ISPs.  In such a case,\
    \ the P2P tracker\n   may communicate with multiple ALTO servers.\n"
- title: '12.2.  ALTO Client Embedded in P2P Client: Numerical Costs'
  contents:
  - "12.2.  ALTO Client Embedded in P2P Client: Numerical Costs\n   P2P clients may\
    \ also utilize ALTO information themselves when\n   selecting from available peers.\
    \  It is important to note that not all\n   P2P systems use a P2P tracker for\
    \ peer discovery and selection.\n   Furthermore, even when a P2P tracker is used,\
    \ the P2P clients may\n   rely on other sources, such as peer exchange and DHTs,\
    \ to discover\n   peers.\n   When a P2P client uses ALTO information, it typically\
    \ queries only\n   the ALTO server servicing its own ISP.  The \"my-Internet view\"\
    \n   provided by its ISP's ALTO server can include preferences to all\n   potential\
    \ peers.\n   .---------.   (1) Get Network Map    .---------------.\n   |    \
    \     | <----------------------> |               |\n   |  ALTO   |           \
    \               |  P2P Client   |\n   | Server  |   (2) Get Cost Map       | (ALTO\
    \ client) |\n   |         | <----------------------> |               |    .---------.\n\
    \   `---------'                          `---------------' <- |  P2P    |\n  \
    \           .---------.                 /  |      ^    ^    | Tracker |\n    \
    \         | Peer 1  | <--------------    |      |     \\   `---------'\n     \
    \        `---------'                    |    (3) Gather Peers\n              \
    \   .      (4) Select Peers    |      |       \\\n                 .        and\
    \ Connect      /   .--------.  .--------.\n             .---------.          \
    \        /    |  P2P   |  |  DHT   |\n             | Peer 50 | <----------------\
    \     | Client |  `--------'\n             `---------'                       |\
    \ (PEX)  |\n                                               `--------'\n      \
    \         Figure 5: ALTO Client Embedded in P2P Client\n   Figure 5 shows an example\
    \ use case where a P2P client locally applies\n   ALTO information to select peers.\
    \  The use case proceeds as follows:\n   1.  The P2P client requests the network\
    \ map covering all PIDs from\n       the ALTO server servicing its own ISP.\n\
    \   2.  The P2P client requests the cost map providing path costs amongst\n  \
    \     all PIDs from the ALTO server.  The cost map by default specifies\n    \
    \   numerical costs.\n   3.  The P2P client discovers peers from sources such\
    \ as peer exchange\n       (PEX) from other P2P clients, distributed hash tables\
    \ (DHT), and\n       P2P trackers.\n   4.  The P2P client uses ALTO information\
    \ as part of the algorithm for\n       selecting new peers and connects to the\
    \ selected peers.\n"
- title: '12.3.  ALTO Client Embedded in P2P Client: Ranking'
  contents:
  - "12.3.  ALTO Client Embedded in P2P Client: Ranking\n   It is also possible for\
    \ a P2P client to offload the selection and\n   ranking process to an ALTO server.\
    \  In this use case, the ALTO client\n   embedded in the P2P client gathers a\
    \ list of known peers in the\n   swarm, and asks the ALTO server to rank them.\
    \  This document limits\n   the use case to when the P2P client and the ALTO server\
    \ are deployed\n   by the same entity; hence, the P2P client uses the ranking\
    \ provided\n   by the ALTO server directly.\n   As in the use case using numerical\
    \ costs, the P2P client typically\n   only queries the ALTO server servicing its\
    \ own ISP.\n   .---------.                          .---------------.\n   |  \
    \       |                          |               |\n   |  ALTO   | (2) Get Endpoint\
    \ Ranking |  P2P Client   |\n   | Server  | <----------------------> | (ALTO client)\
    \ |\n   |         |                          |               |    .---------.\n\
    \   `---------'                          `---------------' <- |  P2P    |\n  \
    \           .---------.                 /  |      ^    ^    | Tracker |\n    \
    \         | Peer 1  | <--------------    |      |     \\   `---------'\n     \
    \        `---------'                    |    (1) Gather Peers\n              \
    \   .      (3) Connect to      |      |       \\\n                 .        Selected\
    \ Peers   /   .--------.  .--------.\n             .---------.               \
    \   /    |  P2P   |  |  DHT   |\n             | Peer 50 | <----------------  \
    \   | Client |  `--------'\n             `---------'                       | (PEX)\
    \  |\n                                               `--------'\n           Figure\
    \ 6: ALTO Client Embedded in P2P Client: Ranking\n   Figure 6 shows an example\
    \ of this scenario.  The use case proceeds as\n   follows:\n   1.  The P2P client\
    \ discovers peers from sources such as Peer Exchange\n       (PEX) from other\
    \ P2P clients, Distributed Hash Tables (DHT), and\n       P2P trackers.\n   2.\
    \  The P2P client queries the ALTO server's ranking service (i.e.,\n       the\
    \ ECS Service), by including the discovered peers as the set of\n       destination\
    \ endpoints, and indicating the \"ordinal\" cost mode.\n       The response indicates\
    \ the ranking of the candidate peers.\n   3.  The P2P client connects to the peers\
    \ in the order specified in\n       the ranking.\n"
- title: 13.  Discussions
  contents:
  - '13.  Discussions

    '
- title: 13.1.  Discovery
  contents:
  - "13.1.  Discovery\n   The discovery mechanism by which an ALTO client locates\
    \ an\n   appropriate ALTO server is out of scope for this document.  This\n  \
    \ document assumes that an ALTO client can discover an appropriate ALTO\n   server.\
    \  Once it has done so, the ALTO client may use the information\n   resource directory\
    \ (see Section 9.2) to locate an information\n   resource with the desired ALTO\
    \ information.\n"
- title: 13.2.  Hosts with Multiple Endpoint Addresses
  contents:
  - "13.2.  Hosts with Multiple Endpoint Addresses\n   In practical deployments, a\
    \ particular host can be reachable using\n   multiple addresses (e.g., a wireless\
    \ IPv4 connection, a wireline IPv4\n   connection, and a wireline IPv6 connection).\
    \  In general, the\n   particular network path followed when sending packets to\
    \ the host\n   will depend on the address that is used.  Network providers may\n\
    \   prefer one path over another.  An additional consideration may be how\n  \
    \ to handle private address spaces (e.g., behind carrier-grade NATs).\n   To support\
    \ such behavior, this document allows multiple endpoint\n   addresses and address\
    \ types.  With this support, the ALTO Protocol\n   allows an ALTO service provider\
    \ the flexibility to indicate\n   preferences for paths from an endpoint address\
    \ of one type to an\n   endpoint address of a different type.\n"
- title: 13.3.  Network Address Translation Considerations
  contents:
  - "13.3.  Network Address Translation Considerations\n   In this day and age of\
    \ NAT v4<->v4, v4<->v6 [RFC6144], and possibly\n   v6<->v6 [RFC6296], a protocol\
    \ should strive to be NAT friendly and\n   minimize carrying IP addresses in the\
    \ payload or provide a mode of\n   operation where the source IP address provides\
    \ the information\n   necessary to the server.\n   The protocol specified in this\
    \ document provides a mode of operation\n   where the source network location\
    \ is computed by the ALTO server\n   (i.e., the Endpoint Cost Service) from the\
    \ source IP address found in\n   the ALTO client query packets.  This is similar\
    \ to how some P2P\n   trackers (e.g., BitTorrent trackers -- see \"Tracker HTTP/HTTPS\n\
    \   Protocol\" in [BitTorrent]) operate.\n   There may be cases in which an ALTO\
    \ client needs to determine its own\n   IP address, such as when specifying a\
    \ source endpoint address in the\n   Endpoint Cost Service.  It is possible that\
    \ an ALTO client has\n   multiple network interface addresses, and that some or\
    \ all of them\n   may require NAT for connectivity to the public Internet.\n \
    \  If a public IP address is required for a network interface, the ALTO\n   client\
    \ SHOULD use the Session Traversal Utilities for NAT (STUN)\n   [RFC5389].  If\
    \ using this method, the host MUST use the \"Binding\n   Request\" message and\
    \ the resulting \"XOR-MAPPED-ADDRESS\" parameter\n   that is returned in the response.\
    \  Using STUN requires cooperation\n   from a publicly accessible STUN server.\
    \  Thus, the ALTO client also\n   requires configuration information that identifies\
    \ the STUN server,\n   or a domain name that can be used for STUN server discovery.\
    \  To be\n   selected for this purpose, the STUN server needs to provide the\n\
    \   public reflexive transport address of the host.\n   ALTO clients should be\
    \ cognizant that the network path between\n   endpoints can depend on multiple\
    \ factors, e.g., source address and\n   destination address used for communication.\
    \  An ALTO server provides\n   information based on endpoint addresses (more generally,\
    \ network\n   locations), but the mechanisms used for determining existence of\n\
    \   connectivity or usage of NAT between endpoints are out of scope of\n   this\
    \ document.\n"
- title: 13.4.  Endpoint and Path Properties
  contents:
  - "13.4.  Endpoint and Path Properties\n   An ALTO server could make available many\
    \ properties about endpoints\n   beyond their network location or grouping.  For\
    \ example, connection\n   type, geographical location, and others may be useful\
    \ to\n   applications.  This specification focuses on network location and\n \
    \  grouping, but the protocol may be extended to handle other endpoint\n   properties.\n"
- title: 14.  IANA Considerations
  contents:
  - "14.  IANA Considerations\n   This document defines registries for application/alto-*\
    \ media types,\n   ALTO cost metrics, ALTO endpoint property types, ALTO address\
    \ types,\n   and ALTO error codes.  Initial values for the registries and the\n\
    \   process of future assignments are given below.\n"
- title: 14.1.  application/alto-* Media Types
  contents:
  - "14.1.  application/alto-* Media Types\n   This document registers multiple media\
    \ types, listed in Table 2.\n    +-------------+------------------------------+-------------------+\n\
    \    | Type        | Subtype                      | Specification     |\n    +-------------+------------------------------+-------------------+\n\
    \    | application | alto-directory+json          | Section 9.2.1     |\n    |\
    \ application | alto-networkmap+json         | Section 11.2.1.1  |\n    | application\
    \ | alto-networkmapfilter+json   | Section 11.3.1.1  |\n    | application | alto-costmap+json\
    \            | Section 11.2.3.1  |\n    | application | alto-costmapfilter+json\
    \      | Section 11.3.2.1  |\n    | application | alto-endpointprop+json     \
    \  | Section 11.4.1.1  |\n    | application | alto-endpointpropparams+json | Section\
    \ 11.4.1.1  |\n    | application | alto-endpointcost+json       | Section 11.5.1.1\
    \  |\n    | application | alto-endpointcostparams+json | Section 11.5.1.1  |\n\
    \    | application | alto-error+json              | Section 8.5.1     |\n    +-------------+------------------------------+-------------------+\n\
    \                    Table 2: ALTO Protocol Media Types\n   Type name:  application\n\
    \   Subtype name:  This documents registers multiple subtypes, as listed\n   \
    \   in Table 2.\n   Required parameters:  n/a\n   Optional parameters:  n/a\n\
    \   Encoding considerations:  Encoding considerations are identical to\n     \
    \ those specified for the \"application/json\" media type.  See\n      [RFC7159].\n\
    \   Security considerations:  Security considerations relating to the\n      generation\
    \ and consumption of ALTO Protocol messages are discussed\n      in Section 15.\n\
    \   Interoperability considerations:  This document specifies format of\n    \
    \  conforming messages and the interpretation thereof.\n   Published specification:\
    \  This document is the specification for\n      these media types; see Table\
    \ 2 for the section documenting each\n      media type.\n   Applications that\
    \ use this media type:  ALTO servers and ALTO clients\n      either stand alone\
    \ or are embedded within other applications.\n   Additional information:\n   \
    \   Magic number(s):  n/a\n      File extension(s):  This document uses the mime\
    \ type to refer to\n         protocol messages and thus does not require a file\
    \ extension.\n      Macintosh file type code(s):  n/a\n   Person & email address\
    \ to contact for further information:  See\n      Authors' Addresses section.\n\
    \   Intended usage:  COMMON\n   Restrictions on usage:  n/a\n   Author:  See Authors'\
    \ Addresses section.\n   Change controller:  Internet Engineering Task Force\n\
    \      (mailto:iesg@ietf.org).\n"
- title: 14.2.  ALTO Cost Metric Registry
  contents:
  - "14.2.  ALTO Cost Metric Registry\n   IANA has created and now maintains the \"\
    ALTO Cost Metric Registry\",\n   listed in Table 3.\n                   +-------------+---------------------+\n\
    \                   | Identifier  | Intended Semantics  |\n                  \
    \ +-------------+---------------------+\n                   | routingcost | See\
    \ Section 6.1.1.1 |\n                   | priv:       | Private use         |\n\
    \                   +-------------+---------------------+\n                  \
    \      Table 3: ALTO Cost Metrics\n   This registry serves two purposes.  First,\
    \ it ensures uniqueness of\n   identifiers referring to ALTO cost metrics.  Second,\
    \ it provides\n   references to particular semantics of allocated cost metrics\
    \ to be\n   applied by both ALTO servers and applications utilizing ALTO clients.\n\
    \   New ALTO cost metrics are assigned after IETF Review [RFC5226] to\n   ensure\
    \ that proper documentation regarding ALTO cost metric semantics\n   and security\
    \ considerations has been provided.  The RFCs documenting\n   the new metrics\
    \ should be detailed enough to provide guidance to both\n   ALTO service providers\
    \ and applications utilizing ALTO clients as to\n   how values of the registered\
    \ ALTO cost metric should be interpreted.\n   Updates and deletions of ALTO cost\
    \ metrics follow the same procedure.\n   Registered ALTO cost metric identifiers\
    \ MUST conform to the\n   syntactical requirements specified in Section 10.6.\
    \  Identifiers are\n   to be recorded and displayed as strings.\n   As specified\
    \ in Section 10.6, identifiers prefixed with \"priv:\" are\n   reserved for Private\
    \ Use.\n   Requests to add a new value to the registry MUST include the\n   following\
    \ information:\n   o  Identifier: The name of the desired ALTO cost metric.\n\
    \   o  Intended Semantics: ALTO costs carry with them semantics to guide\n   \
    \   their usage by ALTO clients.  For example, if a value refers to a\n      measurement,\
    \ the measurement units must be documented.  For proper\n      implementation\
    \ of the ordinal cost mode (e.g., by a third-party\n      service), it should\
    \ be documented whether higher or lower values\n      of the cost are more preferred.\n\
    \   o  Security Considerations: ALTO costs expose information to ALTO\n      clients.\
    \  As such, proper usage of a particular cost metric may\n      require certain\
    \ information to be exposed by an ALTO service\n      provider.  Since network\
    \ information is frequently regarded as\n      proprietary or confidential, ALTO\
    \ service providers should be made\n      aware of the security ramifications\
    \ related to usage of a cost\n      metric.\n   This specification requests registration\
    \ of the identifier\n   \"routingcost\".  Semantics for the this cost metric are\
    \ documented in\n   Section 6.1.1.1, and security considerations are documented\
    \ in\n   Section 15.3.\n"
- title: 14.3.  ALTO Endpoint Property Type Registry
  contents:
  - "14.3.  ALTO Endpoint Property Type Registry\n   IANA has created and now maintains\
    \ the \"ALTO Endpoint Property Type\n   Registry\", listed in Table 4.\n     \
    \               +------------+--------------------+\n                    | Identifier\
    \ | Intended Semantics |\n                    +------------+--------------------+\n\
    \                    | pid        | See Section 7.1.1  |\n                   \
    \ | priv:      | Private use        |\n                    +------------+--------------------+\n\
    \                   Table 4: ALTO Endpoint Property Types\n   The maintenance\
    \ of this registry is similar to that of the preceding\n   ALTO cost metrics.\
    \  That is, the registry is maintained by IANA,\n   subject to the description\
    \ in Section 10.8.2.\n   New endpoint property types are assigned after IETF Review\
    \ [RFC5226]\n   to ensure that proper documentation regarding ALTO endpoint property\n\
    \   type semantics and security considerations has been provided.\n   Updates\
    \ and deletions of ALTO endpoint property types follow the same\n   procedure.\n\
    \   Registered ALTO endpoint property type identifiers MUST conform to\n   the\
    \ syntactical requirements specified in Section 10.8.1.\n   Identifiers are to\
    \ be recorded and displayed as strings.\n   As specified in Section 10.8.1, identifiers\
    \ prefixed with \"priv:\" are\n   reserved for Private Use.\n   Requests to add\
    \ a new value to the registry MUST include the\n   following information:\n  \
    \ o  Identifier: The name of the desired ALTO endpoint property type.\n   o  Intended\
    \ Semantics: ALTO endpoint properties carry with them\n      semantics to guide\
    \ their usage by ALTO clients.  Hence, a document\n      defining a new type should\
    \ provide guidance to both ALTO service\n      providers and applications utilizing\
    \ ALTO clients as to how values\n      of the registered ALTO endpoint property\
    \ should be interpreted.\n      For example, if a value refers to a measurement,\
    \ the measurement\n      units must be documented.\n   o  Security Considerations:\
    \ ALTO endpoint properties expose\n      information to ALTO clients.  ALTO service\
    \ providers should be\n      made aware of the security ramifications related\
    \ to the exposure\n      of an endpoint property.\n   In particular, the request\
    \ should discuss the sensitivity of the\n   information, and why such sensitive\
    \ information is required for ALTO-\n   based operations.  It may recommend that\
    \ ISP provide mechanisms for\n   users to grant or deny consent to such information\
    \ sharing.\n   Limitation to a trust domain being a type of consent bounding.\n\
    \   A request defining new endpoint properties should focus on exposing\n   attributes\
    \ of endpoints that are related to the goals of ALTO --\n   optimization of application-layer\
    \ traffic -- as opposed to more\n   general properties of endpoints.  Maintaining\
    \ this focus on\n   technical, network-layer data will also help extension developers\n\
    \   avoid the privacy concerns associated with publishing information\n   about\
    \ endpoints.  For example:\n   o  An extension to indicate the capacity of a server\
    \ would likely be\n      appropriate, since server capacities can be used by a\
    \ client to\n      choose between multiple equivalent servers.  In addition, these\n\
    \      properties are unlikely to be viewed as private information.\n   o  An\
    \ extension to indicate the geolocation of endpoints might be\n      appropriate.\
    \  In some cases, a certain level of geolocation (e.g.,\n      to the country\
    \ level) can be useful for selecting content sources.\n      More precise geolocation,\
    \ however, is not relevant to content\n      delivery, and is typically considered\
    \ private.\n   o  An extension indicating demographic attributes of the owner\
    \ of an\n      endpoint (e.g., age, sex, income) would not be appropriate,\n \
    \     because these attributes are not related to delivery optimization,\n   \
    \   and because they are clearly private data.\n   This specification requests\
    \ registration of the identifier \"pid\".\n   Semantics for this property are\
    \ documented in Section 7.1.1, and\n   security considerations are documented\
    \ in Section 15.4.\n"
- title: 14.4.  ALTO Address Type Registry
  contents:
  - "14.4.  ALTO Address Type Registry\n   IANA has created and now maintains the\
    \ \"ALTO Address Type Registry\",\n   listed in Table 5.\n   +------------+-----------------+-----------------+------------------+\n\
    \   | Identifier | Address         | Prefix Encoding | Mapping to/from  |\n  \
    \ |            | Encoding        |                 | IPv4/v6          |\n   +------------+-----------------+-----------------+------------------+\n\
    \   | ipv4       | See Section     | See Section     | Direct mapping   |\n  \
    \ |            | 10.4.3          | 10.4.4          | to IPv4          |\n   |\
    \ ipv6       | See Section     | See Section     | Direct mapping   |\n   |  \
    \          | 10.4.3          | 10.4.4          | to IPv6          |\n   +------------+-----------------+-----------------+------------------+\n\
    \                        Table 5: ALTO Address Types\n   This registry serves\
    \ two purposes.  First, it ensures uniqueness of\n   identifiers referring to\
    \ ALTO address types.  Second, it states the\n   requirements for allocated address\
    \ type identifiers.\n   New ALTO address types are assigned after IETF Review\
    \ [RFC5226] to\n   ensure that proper documentation regarding the new ALTO address\
    \ types\n   and their security considerations has been provided.  RFCs defining\n\
    \   new address types should indicate how an address of a registered type\n  \
    \ is encoded as an EndpointAddr and, if possible, a compact method\n   (e.g.,\
    \ IPv4 and IPv6 prefixes) for encoding a set of addresses as an\n   EndpointPrefix.\
    \  Updates and deletions of ALTO address types follow\n   the same procedure.\n\
    \   Registered ALTO address type identifiers MUST conform to the\n   syntactical\
    \ requirements specified in Section 10.4.2.  Identifiers\n   are to be recorded\
    \ and displayed as strings.\n   Requests to add a new value to the registry MUST\
    \ include the\n   following information:\n   o  Identifier: The name of the desired\
    \ ALTO address type.\n   o  Endpoint Address Encoding: The procedure for encoding\
    \ an address\n      of the registered type as an EndpointAddr (see Section 10.4.3).\n\
    \   o  Endpoint Prefix Encoding: The procedure for encoding a set of\n      addresses\
    \ of the registered type as an EndpointPrefix (see\n      Section 10.4.4).  If\
    \ no such compact encoding is available, the\n      same encoding used for a singular\
    \ address may be used.  In such a\n      case, it must be documented that sets\
    \ of addresses of this type\n      always have exactly one element.\n   o  Mapping\
    \ to/from IPv4/IPv6 Addresses: If possible, a mechanism to\n      map addresses\
    \ of the registered type to and from IPv4 or IPv6\n      addresses should be specified.\n\
    \   o  Security Considerations: In some usage scenarios, endpoint\n      addresses\
    \ carried in ALTO Protocol messages may reveal information\n      about an ALTO\
    \ client or an ALTO service provider.  Applications\n      and ALTO service providers\
    \ using addresses of the registered type\n      should be made aware of how (or\
    \ if) the addressing scheme relates\n      to private information and network\
    \ proximity.\n   This specification requests registration of the identifiers \"\
    ipv4\"\n   and \"ipv6\", as shown in Table 5.\n"
- title: 14.5.  ALTO Error Code Registry
  contents:
  - "14.5.  ALTO Error Code Registry\n   IANA has created and now maintains the \"\
    ALTO Error Code Registry\".\n   Initial values are listed in Table 1, and recommended\
    \ usage of the\n   error codes is specified in Section 8.5.2.\n   Although the\
    \ error codes defined in Table 1 are already quite\n   complete, future extensions\
    \ may define new error codes.  The \"ALTO\n   Error Code Registry\" ensures the\
    \ uniqueness of error codes when new\n   error codes are added.\n   New ALTO error\
    \ codes are assigned after IETF Review [RFC5226] to\n   ensure that proper documentation\
    \ regarding the new ALTO error codes\n   and their usage has been provided.\n\
    \   A request to add a new ALTO error code to the registry MUST include\n   the\
    \ following information:\n   o  Error Code: A string starting with E_ to indicate\
    \ the error.\n   o  Intended Usage: ALTO error codes carry with them semantics\
    \ to\n      guide their usage by ALTO servers and clients.  In particular, if\n\
    \      a new error code indicates conditions that overlap with those of\n    \
    \  an existing ALTO error code, recommended usage of the new error\n      code\
    \ should be specified.\n"
- title: 15.  Security Considerations
  contents:
  - "15.  Security Considerations\n   Some environments and use cases of ALTO require\
    \ consideration of\n   security attacks on ALTO servers and clients.  In order\
    \ to support\n   those environments interoperably, the ALTO requirements document\n\
    \   [RFC6708] outlines minimum-to-implement authentication and other\n   security\
    \ requirements.  This document considers the following threats\n   and protection\
    \ strategies.\n"
- title: 15.1.  Authenticity and Integrity of ALTO Information
  contents:
  - '15.1.  Authenticity and Integrity of ALTO Information

    '
- title: 15.1.1.  Risk Scenarios
  contents:
  - "15.1.1.  Risk Scenarios\n   An attacker may want to provide false or modified\
    \ ALTO information\n   resources or an information resource directory to ALTO\
    \ clients to\n   achieve certain malicious goals.  As an example, an attacker\
    \ may\n   provide false endpoint properties.  For example, suppose that a\n  \
    \ network supports an endpoint property named \"hasQuota\", which reports\n  \
    \ whether an endpoint has usage quota.  An attacker may want to\n   generate a\
    \ false reply to lead to unexpected charges to the endpoint.\n   An attack may\
    \ also want to provide a false cost map.  For example, by\n   faking a cost map\
    \ that highly prefers a small address range or a\n   single address, the attacker\
    \ may be able to turn a distributed\n   application into a Distributed-Denial-of-Service\
    \ (DDoS) tool.\n   Depending on the network scenario, an attacker can attack\n\
    \   authenticity and integrity of ALTO information resources using\n   various\
    \ techniques, including, but not limited to, sending forged\n   DHCP replies in\
    \ an Ethernet, DNS poisoning, and installing a\n   transparent HTTP proxy that\
    \ does some modifications.\n"
- title: 15.1.2.  Protection Strategies
  contents:
  - "15.1.2.  Protection Strategies\n   ALTO protects the authenticity and integrity\
    \ of ALTO information\n   (both information directory and individual information\
    \ resources) by\n   leveraging the authenticity and integrity mechanisms in TLS\
    \ (see\n   Section 8.3.5).\n   ALTO service providers who request server certificates\
    \ and\n   certification authorities who issue ALTO-specific certificates SHOULD\n\
    \   consider the recommendations and guidelines defined in [RFC6125].\n   Software\
    \ engineers developing and service providers deploying ALTO\n   should make themselves\
    \ familiar with possibly updated standards\n   documents as well as up-to-date\
    \ Best Current Practices on configuring\n   HTTP over TLS.\n"
- title: 15.1.3.  Limitations
  contents:
  - "15.1.3.  Limitations\n   The protection of HTTP over TLS for ALTO depends on\
    \ that the domain\n   name in the URI for the information resources is not comprised.\
    \  This\n   will depend on the protection implemented by service discovery.\n\
    \   A deployment scenario may require redistribution of ALTO information\n   to\
    \ improve scalability.  When authenticity and integrity of ALTO\n   information\
    \ are still required, then ALTO clients obtaining ALTO\n   information through\
    \ redistribution must be able to validate the\n   received ALTO information. \
    \ Support for this validation is not\n   provided in this document, but it may\
    \ be provided by extension\n   documents.\n"
- title: 15.2.  Potential Undesirable Guidance from Authenticated ALTO
  contents:
  - "15.2.  Potential Undesirable Guidance from Authenticated ALTO\n       Information\n"
- title: 15.2.1.  Risk Scenarios
  contents:
  - "15.2.1.  Risk Scenarios\n   The ALTO services make it possible for an ALTO service\
    \ provider to\n   influence the behavior of network applications.  An ALTO service\n\
    \   provider may be hostile to some applications and, hence, try to use\n   ALTO\
    \ information resources to achieve certain goals [RFC5693]:\n      ...redirecting\
    \ applications to corrupted mediators providing\n      malicious content, or applying\
    \ policies in computing cost maps\n      based on criteria other than network\
    \ efficiency.\n   See [ALTO-DEPLOYMENT] for additional discussions on faked ALTO\n\
    \   guidance.\n   A related scenario is that an ALTO server could unintentionally\
    \ give\n   \"bad\" guidance.  For example, if many ALTO clients follow the cost\n\
    \   map or the Endpoint Cost Service guidance without doing additional\n   sanity\
    \ checks or adaptation, more preferable hosts and/or links could\n   get overloaded\
    \ while less preferable ones remain idle; see AR-14 of\n   [RFC6708] for related\
    \ application considerations.\n"
- title: 15.2.2.  Protection Strategies
  contents:
  - "15.2.2.  Protection Strategies\n   To protect applications from undesirable ALTO\
    \ information resources,\n   it is important to note that there is no protocol\
    \ mechanism to\n   require conforming behaviors on how applications use ALTO information\n\
    \   resources.  An application using ALTO may consider including a\n   mechanism\
    \ to detect misleading or undesirable results from using ALTO\n   information\
    \ resources.  For example, if throughput measurements do\n   not show \"better-than-random\"\
    \ results when using an ALTO cost map to\n   select resource providers, the application\
    \ may want to disable ALTO\n   usage or switch to an external ALTO server provided\
    \ by an\n   \"independent organization\" (see AR-20 and AR-21 in [RFC6708]). \
    \ If\n   the first ALTO server is provided by the access network service\n   provider\
    \ and the access network service provider tries to redirect\n   access to the\
    \ external ALTO server back to the provider's ALTO server\n   or try to tamper\
    \ with the responses, the preceding authentication and\n   integrity protection\
    \ can detect such a behavior.\n"
- title: 15.3.  Confidentiality of ALTO Information
  contents:
  - '15.3.  Confidentiality of ALTO Information

    '
- title: 15.3.1.  Risk Scenarios
  contents:
  - "15.3.1.  Risk Scenarios\n   In many cases, although ALTO information resources\
    \ may be regarded as\n   non-confidential information, there are deployment cases\
    \ in which\n   ALTO information resources can be sensitive information that can\
    \ pose\n   risks if exposed to unauthorized parties.  This document discusses\n\
    \   the risks and protection strategies for such deployment scenarios.\n   For\
    \ example, an attacker may infer details regarding the topology,\n   status, and\
    \ operational policies of a network through its ALTO\n   network and cost maps.\
    \  As a result, a sophisticated attacker may be\n   able to infer more fine-grained\
    \ topology information than an ISP\n   hosting an ALTO server intends to disclose.\
    \  The attacker can\n   leverage the information to mount effective attacks such\
    \ as focusing\n   on high-cost links.\n   Revealing some endpoint properties may\
    \ also reveal additional\n   information than the provider intended.  For example,\
    \ when adding the\n   line bitrate as one endpoint property, such information\
    \ may be\n   potentially linked to the income of the habitants at the network\n\
    \   location of an endpoint.\n   In Section 5.2.1 of [RFC6708], three types of\
    \ risks associated with\n   the confidentiality of ALTO information resources\
    \ are identified:\n   risk type (1) Excess disclosure of the ALTO service provider's\
    \ data\n   to an authorized ALTO client; risk type (2) Disclosure of the ALTO\n\
    \   service provider's data (e.g., network topology information or\n   endpoint\
    \ addresses) to an unauthorized third party; and risk type (3)\n   Excess retrieval\
    \ of the ALTO service provider's data by collaborating\n   ALTO clients.  [ALTO-DEPLOYMENT]\
    \ also discusses information leakage\n   from ALTO.\n"
- title: 15.3.2.  Protection Strategies
  contents:
  - "15.3.2.  Protection Strategies\n   To address risk types (1) and (3), the provider\
    \ of an ALTO server\n   must be cognizant that the network topology and provisioning\n\
    \   information provided through ALTO may lead to attacks.  ALTO does not\n  \
    \ require any particular level of details of information disclosure;\n   hence,\
    \ the provider should evaluate how much information is revealed\n   and the associated\
    \ risks.\n   To address risk type (2), the ALTO Protocol needs confidentiality.\n\
    \   Since ALTO requires that HTTP over TLS must be supported, the\n   confidentiality\
    \ mechanism is provided by HTTP over TLS.\n   For deployment scenarios where client\
    \ authentication is desired to\n   address risk type (2), ALTO requires that HTTP\
    \ Digestion\n   Authentication is supported to achieve ALTO client authentication\
    \ to\n   limit the number of parties with whom ALTO information is directly\n\
    \   shared.  TLS client authentication may also be supported.  Depending\n   on\
    \ the use case and scenario, an ALTO server may apply other access\n   control\
    \ techniques to restrict access to its services.  Access\n   control can also\
    \ help to prevent Denial-of-Service attacks by\n   arbitrary hosts from the Internet.\
    \  See [ALTO-DEPLOYMENT] for a more\n   detailed discussion on this issue.\n \
    \  See Section 14.3 on guidelines when registering endpoint properties\n   to\
    \ protect endpoint privacy.\n"
- title: 15.3.3.  Limitations
  contents:
  - "15.3.3.  Limitations\n   ALTO information providers should be cognizant that\
    \ encryption only\n   protects ALTO information until it is decrypted by the intended\
    \ ALTO\n   client.  Digital Rights Management (DRM) techniques and legal\n   agreements\
    \ protecting ALTO information are outside of the scope of\n   this document.\n"
- title: 15.4.  Privacy for ALTO Users
  contents:
  - '15.4.  Privacy for ALTO Users

    '
- title: 15.4.1.  Risk Scenarios
  contents:
  - "15.4.1.  Risk Scenarios\n   The ALTO Protocol provides mechanisms in which the\
    \ ALTO client\n   serving a user can send messages containing network location\n\
    \   identifiers (IP addresses or fine-grained PIDs) to the ALTO server.\n   This\
    \ is particularly true for the Endpoint Property, the Endpoint\n   Cost, and the\
    \ fine-grained Filtered Map services.  The ALTO server or\n   a third party who\
    \ is able to intercept such messages can store and\n   process obtained information\
    \ in order to analyze user behaviors and\n   communication patterns.  The analysis\
    \ may correlate information\n   collected from multiple clients to deduce additional\
    \ application/\n   content information.  Such analysis can lead to privacy risks.\
    \  For a\n   more comprehensive classification of related risk scenarios, see\n\
    \   cases 4, 5, and 6 in [RFC6708], Section 5.2.\n"
- title: 15.4.2.  Protection Strategies
  contents:
  - "15.4.2.  Protection Strategies\n   To protect user privacy, an ALTO client should\
    \ be cognizant about\n   potential ALTO server tracking through client queries,\
    \ e.g., by using\n   HTTP cookies.  The ALTO Protocol as defined by this document\
    \ does not\n   rely on HTTP cookies.  ALTO clients MAY decide not to return cookies\n\
    \   received from the server, in order to make tracking more difficult.\n   However,\
    \ this might break protocol extensions that are beyond the\n   scope of this document.\n\
    \   An ALTO client may consider the possibility of relying only on ALTO\n   network\
    \ maps for PIDs and cost maps amongst PIDs to avoid passing IP\n   addresses of\
    \ other endpoints (e.g., peers) to the ALTO server.  When\n   specific IP addresses\
    \ are needed (e.g., when using the Endpoint Cost\n   Service), an ALTO client\
    \ SHOULD minimize the amount of information\n   sent in IP addresses.  For example,\
    \ the ALTO client may consider\n   obfuscation techniques such as specifying a\
    \ broader address range\n   (i.e., a shorter prefix length) or by zeroing out\
    \ or randomizing the\n   last few bits of IP addresses.  Note that obfuscation\
    \ may yield less\n   accurate results.\n"
- title: 15.5.  Availability of ALTO Services
  contents:
  - '15.5.  Availability of ALTO Services

    '
- title: 15.5.1.  Risk Scenarios
  contents:
  - "15.5.1.  Risk Scenarios\n   An attacker may want to disable the ALTO services\
    \ of a network as a\n   way to disable network guidance to large scale applications.\
    \  In\n   particular, queries that can be generated with low effort but result\n\
    \   in expensive workloads at the ALTO server could be exploited for\n   Denial-of-Service\
    \ attacks.  For instance, a simple ALTO query with n\n   source network locations\
    \ and m destination network locations can be\n   generated fairly easily but results\
    \ in the computation of n*m path\n   costs between pairs by the ALTO server (see\
    \ Section 5.2).\n"
- title: 15.5.2.  Protection Strategies
  contents:
  - "15.5.2.  Protection Strategies\n   The ALTO service provider should be cognizant\
    \ of the workload at the\n   ALTO server generated by certain ALTO Queries, such\
    \ as certain\n   queries to the Map Service, the Map-Filtering Service and the\n\
    \   Endpoint Cost (Ranking) Service.  One way to limit Denial-of-Service\n   attacks\
    \ is to employ access control to the ALTO server.  The ALTO\n   server can also\
    \ indicate overload and reject repeated requests that\n   can cause availability\
    \ problems.  More advanced protection schemes\n   such as computational puzzles\
    \ [SIP] may be considered in an extension\n   document.\n   An ALTO service provider\
    \ should also leverage the fact that the Map\n   Service allows ALTO servers to\
    \ pre-generate maps that can be\n   distributed to many ALTO clients.\n"
- title: 16.  Manageability Considerations
  contents:
  - "16.  Manageability Considerations\n   This section details operations and management\
    \ considerations based\n   on existing deployments and discussions during protocol\
    \ development.\n   It also indicates where extension documents are expected to\
    \ provide\n   appropriate functionality discussed in [RFC5706] as additional\n\
    \   deployment experience becomes available.\n"
- title: 16.1.  Operations
  contents:
  - '16.1.  Operations

    '
- title: 16.1.1.  Installation and Initial Setup
  contents:
  - "16.1.1.  Installation and Initial Setup\n   The ALTO Protocol is based on HTTP.\
    \  Thus, configuring an ALTO server\n   may require configuring the underlying\
    \ HTTP server implementation to\n   define appropriate security policies, caching\
    \ policies, performance\n   settings, etc.\n   Additionally, an ALTO service provider\
    \ will need to configure the\n   ALTO information to be provided by the ALTO server.\
    \  The granularity\n   of the topological map and the cost maps is left to the\
    \ specific\n   policies of the ALTO service provider.  However, a reasonable default\n\
    \   may include two PIDs, one to hold the endpoints in the provider's\n   network\
    \ and the second PID to represent full IPv4 and IPv6\n   reachability (see Section\
    \ 11.2.2), with the cost between each source/\n   destination PID set to 1.  Another\
    \ operational issue that the ALTO\n   service provider needs to consider is that\
    \ the filtering service can\n   degenerate into a full map service when the filtering\
    \ input is empty.\n   Although this choice as the degeneration behavior provides\n\
    \   continuity, the computational and network load of serving full maps\n   to\
    \ a large number of ALTO clients should be considered.\n   Implementers employing\
    \ an ALTO client should attempt to automatically\n   discover an appropriate ALTO\
    \ server.  Manual configuration of the\n   ALTO server location may be used where\
    \ automatic discovery is not\n   appropriate.  Methods for automatic discovery\
    \ and manual\n   configuration are discussed in [ALTO-SERVER-DISC].\n   Specifications\
    \ for underlying protocols (e.g., TCP, HTTP, TLS) should\n   be consulted for\
    \ their available settings and proposed default\n   configurations.\n"
- title: 16.1.2.  Migration Path
  contents:
  - "16.1.2.  Migration Path\n   This document does not detail a migration path for\
    \ ALTO servers since\n   there is no previous standard protocol providing the\
    \ similar\n   functionality.\n   There are existing applications making use of\
    \ network information\n   discovered from other entities such as whois, geo-location\
    \ databases,\n   or round-trip time measurements, etc.  Such applications should\n\
    \   consider using ALTO as an additional source of information; ALTO need\n  \
    \ not be the sole source of network information.\n"
- title: 16.1.3.  Dependencies on Other Protocols and Functional Components
  contents:
  - "16.1.3.  Dependencies on Other Protocols and Functional Components\n   The ALTO\
    \ Protocol assumes that HTTP client and server implementations\n   exist.  It\
    \ also assumes that JSON encoder and decoder implementations\n   exist.\n   An\
    \ ALTO server assumes that it can gather sufficient information to\n   populate\
    \ Network and Cost maps.  \"Sufficient information\" is\n   dependent on the information\
    \ being exposed, but likely includes\n   information gathered from protocols such\
    \ as IGP and EGP Routing\n   Information Bases (see Figure 1).  Specific mechanisms\
    \ have been\n   proposed (e.g., [ALTO-SVR-APIS]) and are expected to be provided\
    \ in\n   extension documents.\n"
- title: 16.1.4.  Impact and Observation on Network Operation
  contents:
  - "16.1.4.  Impact and Observation on Network Operation\n   ALTO presents a new\
    \ opportunity for managing network traffic by\n   providing additional information\
    \ to clients.  In particular, the\n   deployment of an ALTO server may shift network\
    \ traffic patterns, and\n   the potential impact to network operation can be large.\
    \  An ALTO\n   service provider should ensure that appropriate information is\
    \ being\n   exposed.  Privacy implications for ISPs are discussed in\n   Section\
    \ 15.3.\n   An ALTO service provider should consider how to measure impacts on\n\
    \   (or integration with) traffic engineering, in addition to monitoring\n   correctness\
    \ and responsiveness of ALTO servers.  The measurement of\n   impacts can be challenging\
    \ because ALTO-enabled applications may not\n   provide related information back\
    \ to the ALTO service provider.\n   Furthermore, the measurement of an ALTO service\
    \ provider may show\n   that ALTO clients are not bound to ALTO server guidance\
    \ as ALTO is\n   only one source of information.\n   While it can be challenging\
    \ to measure the impact of ALTO guidance,\n   there exist some possible techniques.\
    \  In certain trusted deployment\n   environments, it may be possible to collect\
    \ information directly from\n   ALTO clients.  It may also be possible to vary\
    \ or selectively disable\n   ALTO guidance for a portion of ALTO clients either\
    \ by time,\n   geographical region, or some other criteria to compare the network\n\
    \   traffic characteristics with and without ALTO.\n   Both ALTO service providers\
    \ and those using ALTO clients should be\n   aware of the impact of incorrect\
    \ or faked guidance (see\n   [ALTO-DEPLOYMENT]).\n"
- title: 16.2.  Management
  contents:
  - '16.2.  Management

    '
- title: 16.2.1.  Management Interoperability
  contents:
  - "16.2.1.  Management Interoperability\n   A common management API would be desirable\
    \ given that ALTO servers\n   may typically be configured with dynamic data from\
    \ various sources,\n   and ALTO servers are intended to scale horizontally for\
    \ fault-\n   tolerance and reliability.  A specific API or protocol is outside\
    \ the\n   scope of this document, but may be provided by an extension document.\n\
    \   Logging is an important functionality for ALTO servers and, depending\n  \
    \ on the deployment, ALTO clients.  Logging should be done via syslog\n   [RFC5424].\n"
- title: 16.2.2.  Management Information
  contents:
  - "16.2.2.  Management Information\n   A Management Information Model (see Section\
    \ 3.2 of [RFC5706]) is not\n   provided by this document, but should be included\
    \ or referenced by\n   any extension documenting an ALTO-related management API\
    \ or protocol.\n"
- title: 16.2.3.  Fault Management
  contents:
  - "16.2.3.  Fault Management\n   An ALTO service provider should monitor whether\
    \ any ALTO servers have\n   failed.  See Section 16.2.5 for related metrics that\
    \ may indicate\n   server failures.\n"
- title: 16.2.4.  Configuration Management
  contents:
  - "16.2.4.  Configuration Management\n   Standardized approaches and protocols to\
    \ configuration management for\n   ALTO are outside the scope of this document,\
    \ but this document does\n   outline high-level principles suggested for future\
    \ standardization\n   efforts.\n   An ALTO server requires at least the following\
    \ logical inputs:\n   o  Data sources from which ALTO information resources is\
    \ derived.\n      This can be either raw network information (e.g., from routing\n\
    \      elements) or pre-processed ALTO-level information in the forms of\n   \
    \   network maps, cost maps, etc.\n   o  Algorithms for computing the ALTO information\
    \ returned to clients.\n      These could return either information from a database\
    \ or\n      information customized for each client.\n   o  Security policies mapping\
    \ potential clients to the information\n      that they have privilege to access.\n\
    \   Multiple ALTO servers can be deployed for scalability.  A centralized\n  \
    \ configuration database may be used to ensure they are providing the\n   desired\
    \ ALTO information with appropriate security controls.  The\n   ALTO information\
    \ (e.g., network maps and cost maps) being served by\n   each ALTO server, as\
    \ well as security policies (HTTP authentication,\n   TLS client and server authentication,\
    \ TLS encryption parameters)\n   intended to serve the same information should\
    \ be monitored for\n   consistency.\n"
- title: 16.2.5.  Performance Management
  contents:
  - "16.2.5.  Performance Management\n   An exhaustive list of desirable performance\
    \ information from ALTO\n   servers and ALTO clients are outside of the scope\
    \ of this document.\n   The following is a list of suggested ALTO-specific metrics\
    \ to be\n   monitored based on the existing deployment and protocol development\n\
    \   experience:\n   o  Requests and responses for each service listed in an information\n\
    \      directory (total counts and size in bytes);\n   o  CPU and memory utilization;\n\
    \   o  ALTO map updates;\n   o  Number of PIDs;\n   o  ALTO map sizes (in-memory\
    \ size, encoded size, number of entries).\n"
- title: 16.2.6.  Security Management
  contents:
  - "16.2.6.  Security Management\n   Section 15 documents ALTO-specific security\
    \ considerations.\n   Operators should configure security policies with those\
    \ in mind.\n   Readers should refer to HTTP [RFC7230] and TLS [RFC5246] and related\n\
    \   documents for mechanisms available for configuring security policies.\n  \
    \ Other appropriate security mechanisms (e.g., physical security,\n   firewalls,\
    \ etc.) should also be considered.\n"
- title: 17.  References
  contents:
  - '17.  References

    '
- title: 17.1.  Normative References
  contents:
  - "17.1.  Normative References\n   [RFC1812]  Baker, F., \"Requirements for IP Version\
    \ 4 Routers\", RFC\n              1812, June 1995.\n   [RFC2046]  Freed, N. and\
    \ N. Borenstein, \"Multipurpose Internet Mail\n              Extensions (MIME)\
    \ Part Two: Media Types\", RFC 2046,\n              November 1996.\n   [RFC2119]\
    \  Bradner, S., \"Key words for use in RFCs to Indicate\n              Requirement\
    \ Levels\", BCP 14, RFC 2119, March 1997.\n   [RFC3986]  Berners-Lee, T., Fielding,\
    \ R., and L. Masinter, \"Uniform\n              Resource Identifier (URI): Generic\
    \ Syntax\", STD 66, RFC\n              3986, January 2005.\n   [RFC4632]  Fuller,\
    \ V. and T. Li, \"Classless Inter-domain Routing\n              (CIDR): The Internet\
    \ Address Assignment and Aggregation\n              Plan\", BCP 122, RFC 4632,\
    \ August 2006.\n   [RFC5226]  Narten, T. and H. Alvestrand, \"Guidelines for Writing\
    \ an\n              IANA Considerations Section in RFCs\", BCP 26, RFC 5226,\n\
    \              May 2008.\n   [RFC5246]  Dierks, T. and E. Rescorla, \"The Transport\
    \ Layer Security\n              (TLS) Protocol Version 1.2\", RFC 5246, August\
    \ 2008.\n   [RFC5389]  Rosenberg, J., Mahy, R., Matthews, P., and D. Wing,\n \
    \             \"Session Traversal Utilities for NAT (STUN)\", RFC 5389,\n    \
    \          October 2008.\n   [RFC5424]  Gerhards, R., \"The Syslog Protocol\"\
    , RFC 5424, March 2009.\n   [RFC5952]  Kawamura, S. and M. Kawashima, \"A Recommendation\
    \ for IPv6\n              Address Text Representation\", RFC 5952, August 2010.\n\
    \   [RFC6125]  Saint-Andre, P. and J. Hodges, \"Representation and\n         \
    \     Verification of Domain-Based Application Service Identity\n            \
    \  within Internet Public Key Infrastructure Using X.509\n              (PKIX)\
    \ Certificates in the Context of Transport Layer\n              Security (TLS)\"\
    , RFC 6125, March 2011.\n   [RFC7230]  Fielding, R. and J. Reschke, \"Hypertext\
    \ Transfer Protocol\n              (HTTP/1.1): Message Syntax and Routing\", RFC\
    \ 7230, June\n              2014.\n"
- title: 17.2.  Informative References
  contents:
  - "17.2.  Informative References\n   [ALTO-DEPLOYMENT]\n              Stiemerling,\
    \ M., Ed., Kiesel, S., Ed., Previdi, S., and M.\n              Scharf, \"ALTO\
    \ Deployment Considerations\", Work in\n              Progress, February 2014.\n\
    \   [ALTO-INFOEXPORT]\n              Shalunov, S., Penno, R., and R. Woundy, \"\
    ALTO Information\n              Export Service\", Work in Progress, October 2008.\n\
    \   [ALTO-MULTI-PS]\n              Das, S., Narayanan, V., and L. Dondeti, \"\
    ALTO: A Multi\n              Dimensional Peer Selection Problem\", Work in Progress,\n\
    \              October 2008.\n   [ALTO-QUERYRESPONSE]\n              Das, S. and\
    \ V. Narayanan, \"A Client to Service Query\n              Response Protocol for\
    \ ALTO\", Work in Progress, March 2009.\n   [ALTO-SERVER-DISC]\n             \
    \ Kiesel, S., Stiemerling, M., Schwan, N., Scharf, M., and\n              H. Song,\
    \ \"ALTO Server Discovery\", Work in Progress,\n              September 2013.\n\
    \   [ALTO-SVR-APIS]\n              Medved, J., Ward, D., Peterson, J., Woundy,\
    \ R., and D.\n              McDysan, \"ALTO Network-Server and Server-Server APIs\"\
    ,\n              Work in Progress, March 2011.\n   [ALTO-USE-CASES]\n        \
    \      Niven-Jenkins, B., Watson, G., Bitar, N., Medved, J., and\n           \
    \   S. Previdi, \"Use Cases for ALTO within CDNs\", Work in\n              Progress,\
    \ June 2012.\n   [BitTorrent]\n              \"Bittorrent Protocol Specification\
    \ v1.0\",\n              <http://wiki.theory.org/BitTorrentSpecification>.\n \
    \  [Fielding-Thesis]\n              Fielding, R., \"Architectural Styles and the\
    \ Design of\n              Network-based Software Architectures\", University\
    \ of\n              California, Irvine, Dissertation 2000, 2000.\n   [IEEE.754.2008]\n\
    \              Institute of Electrical and Electronics Engineers,\n          \
    \    \"Standard for Binary Floating-Point Arithmetic\", IEEE\n              Standard\
    \ 754, August 2008.\n   [P4P-FRAMEWORK]\n              Alimi, R., Pasko, D., Popkin,\
    \ L., Wang, Y., and Y. Yang,\n              \"P4P: Provider Portal for P2P Applications\"\
    , Work in\n              Progress, November 2008.\n   [P4P-SIGCOMM08]\n      \
    \        Xie, H., Yang, Y., Krishnamurthy, A., Liu, Y., and A.\n             \
    \ Silberschatz, \"P4P: Provider Portal for (P2P)\n              Applications\"\
    , SIGCOMM 2008, August 2008.\n   [P4P-SPEC] Wang, Y., Alimi, R., Pasko, D., Popkin,\
    \ L., and Y. Yang,\n              \"P4P Protocol Specification\", Work in Progress,\
    \ March\n              2009.\n   [PROXIDOR] Akonjang, O., Feldmann, A., Previdi,\
    \ S., Davie, B., and D.\n              Saucez, \"The PROXIDOR Service\", Work\
    \ in Progress, March\n              2009.\n   [RFC2818]  Rescorla, E., \"HTTP\
    \ Over TLS\", RFC 2818, May 2000.\n   [RFC5693]  Seedorf, J. and E. Burger, \"\
    Application-Layer Traffic\n              Optimization (ALTO) Problem Statement\"\
    , RFC 5693, October\n              2009.\n   [RFC5706]  Harrington, D., \"Guidelines\
    \ for Considering Operations and\n              Management of New Protocols and\
    \ Protocol Extensions\", RFC\n              5706, November 2009.\n   [RFC6144]\
    \  Baker, F., Li, X., Bao, C., and K. Yin, \"Framework for\n              IPv4/IPv6\
    \ Translation\", RFC 6144, April 2011.\n   [RFC6296]  Wasserman, M. and F. Baker,\
    \ \"IPv6-to-IPv6 Network Prefix\n              Translation\", RFC 6296, June 2011.\n\
    \   [RFC6708]  Kiesel, S., Previdi, S., Stiemerling, M., Woundy, R., and\n   \
    \           Y. Yang, \"Application-Layer Traffic Optimization (ALTO)\n       \
    \       Requirements\", RFC 6708, September 2012.\n   [RFC7159]  Bray, T., \"\
    The JavaScript Object Notation (JSON) Data\n              Interchange Format\"\
    , RFC 7159, March 2014.\n   [RFC7231]  Fielding, R. and J. Reschke, \"Hypertext\
    \ Transfer Protocol\n              (HTTP/1.1): Semantics and Content\", RFC 7231,\
    \ June 2014.\n   [SIP]      Jennings, C., \"Computational Puzzles for SPAM Reduction\
    \ in\n              SIP\", Work in Progress, July 2007.\n"
- title: Appendix A.  Acknowledgments
  contents:
  - "Appendix A.  Acknowledgments\n   Thank you to Jan Seedorf (NEC) for substantial\
    \ contributions to the\n   Security Considerations section.  Ben Niven-Jenkins\
    \ (Velocix),\n   Michael Scharf, and Sabine Randriamasy (Alcatel-Lucent) gave\n\
    \   substantial feedback and suggestions on the protocol design.\n   We would\
    \ like to thank the following people whose input and\n   involvement was indispensable\
    \ in achieving this merged proposal:\n      Obi Akonjang (DT Labs/TU Berlin),\n\
    \      Saumitra M.  Das (Qualcomm Inc.),\n      Syon Ding (China Telecom),\n \
    \     Doug Pasko (Verizon),\n      Laird Popkin (Pando Networks),\n      Satish\
    \ Raghunath (Juniper Networks),\n      Albert Tian (Ericsson/Redback),\n     \
    \ Yu-Shun Wang (Microsoft),\n      David Zhang (PPLive),\n      Yunfei Zhang (China\
    \ Mobile).\n   We would also like to thank the following additional people who\
    \ were\n   involved in the projects that contributed to this merged document:\n\
    \   Alex Gerber (ATT), Chris Griffiths (Comcast), Ramit Hora (Pando\n   Networks),\
    \ Arvind Krishnamurthy (University of Washington), Marty\n   Lafferty (DCIA),\
    \ Erran Li (Bell Labs), Jin Li (Microsoft), Y.  Grace\n   Liu (IBM Watson), Jason\
    \ Livingood (Comcast), Michael Merritt (ATT),\n   Ingmar Poese (DT Labs/TU Berlin),\
    \ James Royalty (Pando Networks),\n   Damien Saucez (UCL), Thomas Scholl (ATT),\
    \ Emilio Sepulveda\n   (Telefonica), Avi Silberschatz (Yale University), Hassan\
    \ Sipra (Bell\n   Canada), Georgios Smaragdakis (DT Labs/TU Berlin), Haibin Song\n\
    \   (Huawei), Oliver Spatscheck (ATT), See-Mong Tang (Microsoft), Jia\n   Wang\
    \ (ATT), Hao Wang (Yale University), Ye Wang (Yale University),\n   Haiyong Xie\
    \ (Yale University).\n   Stanislav Shalunov would like to thank BitTorrent, where\
    \ he worked\n   while contributing to ALTO development.\n"
- title: Appendix B.  Design History and Merged Proposals
  contents:
  - "Appendix B.  Design History and Merged Proposals\n   The ALTO Protocol specified\
    \ in this document consists of\n   contributions from\n   o  P4P [P4P-FRAMEWORK],\
    \ [P4P-SIGCOMM08], [P4P-SPEC];\n   o  ALTO Info-Export [ALTO-INFOEXPORT];\n  \
    \ o  Query/Response [ALTO-QUERYRESPONSE], [ALTO-MULTI-PS]; and\n   o  Proxidor\
    \ [PROXIDOR].\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Richard Alimi (editor)\n   Google\n   1600 Amphitheatre\
    \ Parkway\n   Mountain View, CA  94043\n   USA\n   EMail: ralimi@google.com\n\
    \   Reinaldo Penno (editor)\n   Cisco Systems, Inc.\n   170 West Tasman Dr\n \
    \  San Jose, CA  95134\n   USA\n   EMail: repenno@cisco.com\n   Y. Richard Yang\
    \ (editor)\n   Yale University\n   51 Prospect St\n   New Haven, CT  06511\n \
    \  USA\n   EMail: yry@cs.yale.edu\n   Sebastian Kiesel\n   University of Stuttgart\
    \ Information Center\n   Networks and Communication Systems Department\n   Allmandring\
    \ 30\n   Stuttgart  70550\n   Germany\n   EMail: ietf-alto@skiesel.de\n   Stefano\
    \ Previdi\n   Cisco Systems, Inc.\n   Via Del Serafico, 200\n   Rome  00142\n\
    \   Italy\n   EMail: sprevidi@cisco.com\n   Wendy Roome\n   Alcatel-Lucent\n \
    \  600 Mountain Ave.\n   Murray Hill, NJ  07974\n   USA\n   EMail: w.roome@alcatel-lucent.com\n\
    \   Stanislav Shalunov\n   Open Garden\n   751 13th St\n   San Francisco, CA \
    \ 94130\n   USA\n   EMail: shalunov@shlang.com\n   Richard Woundy\n   Comcast\
    \ Cable Communications\n   One Comcast Center\n   1701 John F. Kennedy Boulevard\n\
    \   Philadelphia, PA  19103\n   USA\n   EMail: Richard_Woundy@cable.comcast.com\n"
