- contents:
  - "                  A Lightweight UDP Transfer Protocol\n             for the Internet
    Registry Information Service\n"
  title: __initial_text__
- contents:
  - "Status of This Memo\n   This document specifies an Internet standards track protocol
    for the\n   Internet community, and requests discussion and suggestions for\n
    \  improvements.  Please refer to the current edition of the \"Internet\n   Official
    Protocol Standards\" (STD 1) for the standardization state\n   and status of this
    protocol.  Distribution of this memo is unlimited.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (C) The IETF Trust (2007).\n"
  title: Copyright Notice
- contents:
  - "Abstract\n   This document describes a lightweight UDP transfer protocol for
    the\n   Internet Registry Information Service (IRIS).  This transfer protocol\n
    \  uses a single packet for every request and response, and optionally\n   employs
    compression over the contents of the packet.\n"
  title: Abstract
- contents:
  - "Table of Contents\n   1. Introduction ....................................................3\n
    \  2. Document Terminology ............................................3\n   3.
    Packet Format ...................................................4\n      3.1.
    Payload Descriptor .........................................4\n           3.1.1.
    Payload Request Descriptor ..........................4\n           3.1.2. Payload
    Response Descriptor .........................5\n           3.1.3. Payload Header
    ......................................6\n           3.1.4. Payload Types .......................................6\n
    \          3.1.5. Version Information .................................7\n           3.1.6.
    Size Information ....................................8\n           3.1.7. Other
    Information ...................................8\n   4. Interactions ....................................................9\n
    \  5. Internationalization Considerations ............................10\n   6.
    IRIS Transport Mapping Definitions .............................10\n      6.1.
    URI Scheme ................................................10\n      6.2. Application
    Protocol Label ................................10\n   7. IANA Considerations ............................................10\n
    \     7.1. Registrations .............................................10\n           7.1.1.
    URI Scheme Registration ............................10\n           7.1.2. Well-known
    UDP Port Registration ...................11\n           7.1.3. S-NAPTR Registration
    ...............................11\n   8. Security Considerations ........................................12\n
    \  9. References .....................................................13\n      9.1.
    Normative References ......................................13\n      9.2. Informative
    References ....................................13\n   Appendix A. Examples ..............................................14\n
    \  Appendix B. Contributors ..........................................18\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   Using Straightforward Name Authority Pointers (S-NAPTR)
    [4], IRIS has\n   the ability to define the use of multiple application transports
    or\n   transfer protocols for different types of registry services, all at\n   the
    discretion of the server operator.  The UDP transfer protocol\n   defined in this
    document is completely independent of the registry\n   types for which it can
    carry data.\n   The binding of this UDP transfer protocol to IRIS is called IRIS-LWZ\n
    \  (for IRIS Lightweight using Compression).  Its message exchange\n   pattern
    is simple: a client sends a request in one UDP packet, and a\n   server responds
    with an answer in one UDP packet.\n   IRIS-LWZ packets are composed of two parts,
    a binary payload\n   descriptor and a request/response transaction payload.  The
    request/\n   response transaction payload may be compressed using the DEFLATE
    [1]\n   algorithm.\n"
  title: 1.  Introduction
- contents:
  - "2.  Document Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\",
    \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\",
    and \"OPTIONAL\" in this\n   document are to be interpreted as described in RFC
    2119 [6].\n   Octet fields with numeric values are given according to the\n   conventions
    in RFC 1166 [10]: the leftmost bit of the whole field is\n   the most significant
    bit; when a multi-octet quantity is transmitted\n   the most significant octet
    is transmitted first.  Bits signifying\n   flags in an octet are numbered according
    to the conventions of RFC\n   1166 [10]: bit 0 is the most significant bit and
    bit 7 is the least\n   significant bit.  When a diagram describes a group of octets,
    the\n   order of transmission for the octets starts from the left.\n"
  title: 2.  Document Terminology
- contents:
  - "3.  Packet Format\n   The packet format for IRIS-LWZ is as follows:\n         +------------+---------+\n
    \  field |  payload   | payload |\n         | descriptor |         |\n         +------------+---------+\n
    \  octets 3 or 6..261*    0..n\n     * In request packets, the payload descriptor
    can vary in length\n       from 6 to 261 octets (i.e., 6..261).  In response packets,
    the\n       payload descriptor is always 3 octets.\n                                IRIS-LWZ
    Packet\n       Each IRIS-LWZ query or response is contained in a single UDP\n
    \      packet.  Servers MUST be prepared to accept packets as large as\n       4000
    octets, and clients MUST NOT send packets larger than 4000\n       octets.\n"
  - contents:
    - "3.1.  Payload Descriptor\n       The payload descriptor has two different formats,
      one for a\n       request and one for a response.  However, each format shares
      a\n       common 1-octet payload header described in Section 3.1.3.\n"
    - contents:
      - "3.1.1.  Payload Request Descriptor\n       The payload descriptor for request
        packets varies from 6 to 261\n       octets in length and has the following
        format:\n             +--------+-------------+----------+-----------+-----------+\n
        \      field | header | transaction | maximum  | authority | authority |\n
        \            |        |     ID      | response |  length   |           |\n
        \            |        |             | length   |           |           |\n
        \            +--------+-------------+----------+-----------+-----------+\n
        \      octets    1           2           2           1         0..255\n                          Request
        Payload Descriptor\n       These fields have the following meanings:\n       o
        \ header - as described in Section 3.1.3.\n   o  transaction ID - a 16-bit
        value identifying the transaction.  This\n      value will be returned in
        the payload response descriptor (Section\n      3.1.2) and can be used by
        clients to match requests with\n      responses.  Clients SHOULD NOT use sequential
        values (see Section\n      8).  Clients MUST NOT set all the bits in this
        value to 1 (i.e.,\n      use a value of 0xFFFF).\n   o  maximum response length
        - the total length of the UDP packet\n      (i.e., UDP header length + payload
        descriptor length + XML payload\n      length) that should not be exceeded
        when responding to this\n      request.  If the server cannot provide a response
        that is equal to\n      or less than this value, then it MUST respond with
        size\n      information (Section 3.1.6).\n   o  authority length - the length
        of the authority field in this\n      payload descriptor.\n   o  authority
        - a string of octets describing the authority against\n      which this request
        is to be executed.  See [3] for the definition\n      and description of an
        authority.  The number of octets in this\n      string MUST be no more and
        no less than the number specified by\n      the authority length.\n"
      title: 3.1.1.  Payload Request Descriptor
    - contents:
      - "3.1.2.  Payload Response Descriptor\n   The payload descriptor for response
        packets is always 3 octets and\n   consists of a payload header (Section 3.1.3)
        and a transaction ID.\n         +--------+-------------+\n   field | header
        | transaction |\n         |        |     ID      |\n         +--------+-------------+\n
        \  octets    1           2\n                        Payload Response Descriptor\n
        \  The purpose of the transaction ID is to allow clients to match\n   requests
        to responses.  A value of 0xFFFF is reserved for server use.\n   The value
        of the transaction ID is as follows:\n   1.  If the transaction ID in the
        corresponding request could not be\n       read due to truncation, servers
        MUST use a transaction ID with\n       all bits set to 1 (i.e., a value of
        OxFFFF) and send a descriptor\n       error (see Section 3.1.7).\n   2.  If
        the transaction ID in the corresponding request is a value of\n       0xFFFF,
        servers MUST use a transaction ID of 0xFFFF and send a\n       descriptor
        error (see Section 3.1.7).\n   3.  Otherwise, the transaction ID MUST be the
        value of the\n       transaction ID of the corresponding request.\n"
      title: 3.1.2.  Payload Response Descriptor
    - contents:
      - "3.1.3.  Payload Header\n   The bits of the payload header are ordered according
        to RFC 1166\n   [10], where bit 0 is the most significant and bit 7 is the
        least\n   significant.  Each bit in the 1-octet payload header has the\n   following
        meaning:\n   o  bits 0 and 1 - version number ('V' field) - If 0 (both bits
        are\n      zero), the protocol is the version defined in this document.\n
        \     Otherwise, the rest of the bits in the header and the payload may\n
        \     be interpreted as another version.\n   o  bit 2 - request/response flag
        ('RR' flag) - If 0, this packet is a\n      request (Section 3.1.1) packet.
        \ If 1, this packet is a response\n      (Section 3.1.2) packet.\n   o  bits
        3 - payload deflated ('PD' flag) - If 1, the payload is\n      compressed
        using the DEFLATE [1] algorithm.\n   o  bit 4 - deflate supported ('DS' flag)
        - If 1, the sender of this\n      packet supports compression using the DEFLATE
        algorithm.  When\n      this bit is 0 in a request, the payload of the response
        MUST NOT\n      be compressed with DEFLATE.\n   o  bit 5 - reserved - This
        MUST be 0.\n   o  bits 6 and 7 - The value of these bits indicates payload
        types\n      (Section 3.1.4) ('PT' field).\n"
      title: 3.1.3.  Payload Header
    - contents:
      - "3.1.4.  Payload Types\n   A payload type indicates the type of content in
        the UDP packet\n   following the payload descriptor.  Some payload types have
        no meaning\n   in request packets, and some payload types differ in meaning
        between\n   requests and responses.  Some payload types indicate an empty\n
        \  payload.\n   The payload type values in binary are as follows:\n      00
        - xml payload ('xml' type).  The payload is either an IRIS-\n      based XML
        request or an IRIS-based XML response.\n      01 - version info ('vi' type).
        \ In a request packet, this payload\n      type indicates that the server
        is to respond with version\n      information (Section 3.1.5), and that the
        payload is empty.  In a\n      response packet, this payload type indicates
        that the payload is\n      version information (Section 3.1.5).\n      10
        - size info ('si' type).  This payload type has no meaning in a\n      request
        packet and is a descriptor error.  In a response packet,\n      this payload
        type indicates that the payload is size information\n      (Section 3.1.6).\n
        \     11 - other info ('oi' type).  This payload type has no meaning in\n
        \     a request packet and is a descriptor error.  In a response packet,\n
        \     this payload type indicates that the payload is other information\n
        \     (Section 3.1.7).\n"
      title: 3.1.4.  Payload Types
    - contents:
      - "3.1.5.  Version Information\n   A payload type with version information ('vi')
        MUST be conformant to\n   the XML defined in [8] and use the <versions> element
        as the root\n   element.\n   In the context of IRIS-LWZ, the protocol identifiers
        for these\n   elements are as follows:\n      <transferProtocol> - the value
        \"iris.lwz1\" to indicate the\n      protocol specified in this document.\n
        \     <application> - the XML namespace identifier for IRIS [3].\n      <dataModel>
        - the XML namespace identifier for IRIS registries.\n   This document defines
        no extension identifiers and no authentication\n   mechanism identifiers.\n
        \  Servers SHOULD send version information in the following cases:\n   1.
        \ In response to a version information request (i.e., the PT field\n       is
        set to 'vi').\n   2.  The version in a payload descriptor header does not
        match a\n       version the server supports.\n   3.  The IRIS-based XML payload
        does not match a version the server\n       supports.\n   The protocols identified
        by the <transferProtocol> element MUST only\n   indicate protocols running
        on the same socket as the sender of the\n   corresponding response.  In other
        words, while a server operator may\n   also be running IRIS-XPC [9], this
        XML instance is only intended to\n   describe version negotiation for IRIS-LWZ.\n
        \  The octet size for the 'requestSizeOctets' and 'responseSizeOctets'\n   attributes
        of the <tranferProtocol> element are defined in Section\n   3.1.6.\n"
      title: 3.1.5.  Version Information
    - contents:
      - "3.1.6.  Size Information\n   A payload type with size information ('si')
        MUST be conformant to the\n   XML defined in [8] and use the <size> element
        as the root element.\n   Octet counts provided by this information are defined
        as the total\n   length of the UDP packet (i.e., UDP header length + payload\n
        \  descriptor length + XML payload length).\n"
      title: 3.1.6.  Size Information
    - contents:
      - "3.1.7.  Other Information\n   A payload type with other information ('oi')
        MUST be conformant to\n   the XML defined in [8] and use the <other> element
        as the root\n   element.\n   The values for the 'type' attribute of <other>
        are as follows:\n      'descriptor-error' - indicates there was an error decoding
        the\n      descriptor.  Servers SHOULD send a descriptor error in the\n      following
        cases:\n      1.  When a request is received with a payload type indicating
        size\n          information (i.e., the PT field is 'si').\n      2.  When
        a request is received with a payload type indicating\n          other information
        (i.e., the PT field is 'oi').\n      3.  When a request is sent with a transaction
        ID of 0xFFFF (which\n          is reserved for server use).\n      4.  When
        a request is received with an incomplete or truncated\n          payload descriptor.\n
        \     5.  When reserved bits in the payload descriptor are set to values\n
        \         other than zero.\n      'payload-error' - indicates there was an
        error interpreting the\n      payload.  Servers MUST send a payload error
        if they receive XML\n      (i.e., the PT field is set to 'xml') and the XML
        cannot be parsed.\n      'system-error' - indicates that the receiver cannot
        process the\n      request due to a condition not related to this protocol.
        \ Servers\n      SHOULD send a system-error when they are capable of responding
        to\n      requests but not capable of processing requests.\n      'authority-error'
        - indicates that the intended authority\n      specified in the corresponding
        request is not served by the\n      receiver.  Servers SHOULD send an authority
        error when they\n      receive a request directed to an authority other than
        those they\n      serve.\n      'no-inflation-support-error' - indicates that
        the receiver does\n      not support payloads that have been compressed with
        DEFLATE [1].\n      Servers MUST send this error when they receive a request
        that has\n      been compressed with DEFLATE but they do not support inflation.\n"
      title: 3.1.7.  Other Information
    title: 3.1.  Payload Descriptor
  title: 3.  Packet Format
- contents:
  - "4.  Interactions\n   The intent of IRIS-LWZ is to utilize UDP for IRIS requests
    and\n   responses when UDP is appropriate.  Not all IRIS requests and\n   responses
    will be able to utilize UDP and may require the use of\n   other transfer protocols
    (i.e., IRIS-XPC [9] and/or Blocks Extensible\n   Exchange Protocol (BEEP)).  The
    following strategy SHOULD be used:\n   1.  If a request requires authentication,
    confidentiality, or other\n       security, use another transfer protocol.  IRIS-XPC
    [9] is\n       RECOMMENDED.\n   2.  The maximum packet size should be calculated
    as follows:\n       a.  If the path MTU is unknown, the maximum packet size MUST
    be\n           1500 octets.\n       b.  If the path MTU is known, the maximum
    packet size MUST NOT\n           exceed the path MTU and MUST NOT exceed 4000
    octets.\n   3.  If a request is less than or equal to the maximum packet size,\n
    \      send it uncompressed.\n   4.  If a request can be compressed to a size
    less than or equal to\n       the maximum packet size, send the request using
    compression.\n       Otherwise, use another transfer protocol.  In cases where
    another\n       transfer protocol is needed, IRIS-XPC [9] is RECOMMENDED.\n   5.
    \ If a request yields a size error, send the request with another\n       transfer
    protocol.  IRIS-XPC [9] is RECOMMENDED.\n   For retransmission of requests considered
    to be unanswered, a client\n   SHOULD retransmit using a timeout value initially
    set to 1 second.\n   This timeout value SHOULD be doubled for every retransmission,
    and a\n   client SHOULD NOT retransmit any request once the timeout value has\n
    \  reached 60 seconds.\n   Clients that use timeout values other than the recommendations
    above\n   MUST allocate or have allocated dedicated network resources that will\n
    \  ensure fairness to other network packets and avoid network\n   congestion.\n
    \  Clients MUST NOT have more than one outstanding request (i.e., an\n   unanswered
    request that has not timed out) at a time unless they\n   allocate or have been
    allocated dedicated network bandwidth and\n   resources reserved specifically
    for this purpose.\n   Finally, if a client intends multiple requests to the same
    server in\n   a short amount of time, this protocol offers no real advantage over\n
    \  IRIS-XPC [9].  In such a case, IRIS-XPC is RECOMMENDED to be used as\n   it
    would be similarly or more efficient and would offer greater\n   response sizes
    and allow better security.\n"
  title: 4.  Interactions
- contents:
  - "5.  Internationalization Considerations\n   XML processors are obliged to recognize
    both UTF-8 and UTF-16 [2]\n   encodings.  Use of the XML defined by [8] MUST NOT
    use any other\n   character encodings other than UTF-8 or UTF-16.\n"
  title: 5.  Internationalization Considerations
- contents:
  - "6.  IRIS Transport Mapping Definitions\n   This section lists the definitions
    required by IRIS [3] for transport\n   mappings.\n"
  - contents:
    - "6.1.  URI Scheme\n   See Section 7.1.1.\n"
    title: 6.1.  URI Scheme
  - contents:
    - "6.2.  Application Protocol Label\n   See Section 7.1.3.\n"
    title: 6.2.  Application Protocol Label
  title: 6.  IRIS Transport Mapping Definitions
- contents:
  - '7.  IANA Considerations

    '
  - contents:
    - '7.1.  Registrations

      '
    - contents:
      - "7.1.1.  URI Scheme Registration\n   URL scheme name: iris.lwz\n   Status:
        permanent\n   URL scheme syntax: defined in [3].\n   Character encoding considerations:
        as defined in RFC 3986 [5].\n   Intended usage: identifies an IRIS entity
        made available using XML\n   over UDP\n   Applications using this scheme:
        defined in IRIS [3].\n   Interoperability considerations: n/a\n   Security
        Considerations: defined in Section 8.\n   Relevant Publications: IRIS [3].\n
        \  Contact Information: Andrew Newton <andy@hxr.us>\n   Author/Change controller:
        the IESG\n"
      title: 7.1.1.  URI Scheme Registration
    - contents:
      - "7.1.2.  Well-known UDP Port Registration\n   Protocol Number: UDP\n   UDP
        Port Number: 715\n   Message Formats, Types, Opcodes, and Sequences: defined
        in Sections 3\n   and 3.1.\n   Functions: defined in IRIS [3].\n   Use of
        Broadcast/Multicast: none\n   Proposed Name: IRIS-LWZ\n   Short name: iris.lwz\n
        \  Contact Information: Andrew Newton <andy@hxr.us>\n"
      title: 7.1.2.  Well-known UDP Port Registration
    - contents:
      - "7.1.3.  S-NAPTR Registration\n   Application Protocol Label (see [4]): iris.lwz\n
        \  Intended usage: identifies an IRIS server using XML over UDP\n   Interoperability
        considerations: n/a\n   Security Considerations: defined in Section 8.\n   Relevant
        Publications: IRIS [3].\n   Contact Information: Andrew Newton <andy@hxr.us>\n
        \  Author/Change controller: the IESG\n"
      title: 7.1.3.  S-NAPTR Registration
    title: 7.1.  Registrations
  title: 7.  IANA Considerations
- contents:
  - "8.  Security Considerations\n   IRIS-LWZ is intended for serving public data;
    it provides no in-band\n   mechanisms for authentication or confidentiality.  Any
    application\n   with these needs must provide out-of-band mechanisms (e.g., IPsec),\n
    \  or use the IRIS transfer protocols that provide such capabilities,\n   such
    as IRIS-XPC [9].\n   Due to this lack of security, it is possible for an attacker
    to alter\n   IRIS-LWZ messages sent from the client to the server and from the\n
    \  server to the client.  Such an attack can result in denying usage of\n   an
    IRIS service or in supplying false information to end users and\n   many other
    scenarios.\n   Because IRIS-LWZ is a UDP-based protocol, it is possible for servers\n
    \  using IRIS-LWZ to be used in a type of distributed denial-of-service\n   attack
    known as a reflection attack.  This type of attack affects\n   other types of
    UDP-using protocols, such as DNS.  Server operators\n   should be prepared to
    apply the same methods used for mitigating\n   reflection attacks with other protocols,
    such as DNS, when using\n   IRIS-LWZ.  All operators should follow the advice
    given in BCP 38\n   [7].\n   IRIS-LWZ uses transaction IDs in the payload descriptors
    to better\n   enable a client to match a response to a request.  By randomizing
    the\n   transaction IDs being used (i.e., not using sequential numbers),\n   attackers
    flooding the network with a large amount of spoofed packets\n   have a lesser
    chance of succeeding with the attack.  This measure is\n   not guaranteed to thwart
    any such attack.  Client implementers MUST\n   take appropriate measures when
    ignoring this advice.\n"
  title: 8.  Security Considerations
- contents:
  - '9.  References

    '
  - contents:
    - "9.1.  Normative References\n   [1]   Deutsch, P., \"DEFLATE Compressed Data
      Format Specification\n         version 1.3\", RFC 1951, May 1996.\n   [2]   The
      Unicode Consortium, \"The Unicode Standard, Version 3\", ISBN\n         0-201-61633-5,
      2000, <The Unicode Standard, Version 3>.\n   [3]   Newton, A. and M. Sanz, \"IRIS:
      The Internet Registry\n         Information Service (IRIS) Core Protocol\",
      RFC 3981, January\n         2005.\n   [4]   Daigle, L. and A. Newton, \"Domain-Based
      Application Service\n         Location Using SRV RRs and the Dynamic Delegation
      Discovery\n         Service (DDDS)\", RFC 3958, January 2005.\n   [5]  Berners-Lee,
      T., Fielding, R., and L. Masinter, \"Uniform\n         Resource Identifier (URI):
      Generic Syntax\", STD 66, RFC 3986,\n         January 2005.\n   [6]   Bradner,
      S., \"Key words for use in RFCs to Indicate Requirement\n         Levels\",
      RFC 2119, BCP 14, March 1997.\n   [7]   Ferguson, P. and D. Senie, \"Network
      Ingress Filtering:\n         Defeating Denial of Service Attacks which employ
      IP Source\n         Address Spoofing\", BCP 38, RFC 2827, May 2000.\n   [8]
      \  Newton, A., \"A Common Schema for Internet Registry Information\n         Service
      Transfer Protocols\", RFC 4991, August 2007.\n   [9]   Newton, A., \"XML Pipelining
      with Chunks for the Internet\n         Registry Information Service\", RFC 4992,
      August 2007.\n"
    title: 9.1.  Normative References
  - contents:
    - "9.2.  Informative References\n   [10]  Kirkpatrick, S., Stahl, M., and M. Recker,
      \"Internet numbers\",\n         RFC 1166, July 1990.\n"
    title: 9.2.  Informative References
  title: 9.  References
- contents:
  - "Appendix A.  Examples\n   This section gives examples of IRIS-LWZ exchanges.
    \ Lines beginning\n   with \"C:\" denote data sent by the client to the server,
    and lines\n   beginning with \"S:\" denote data sent by the server to the client.\n
    \  Following the \"C:\" or \"S:\", the line contains either octet values in\n
    \  hexadecimal notation with comments or XML fragments.  No line\n   contains
    both octet values with comments and XML fragments.  Comments\n   are contained
    within parentheses.\n   The following example demonstrates an IRIS client requesting
    a lookup\n   of 'AUP' in the 'local' entity class of a 'dreg1' registry.  The\n
    \  client passes a bag (see [3]) with the search request.  The server\n   responds
    with a 'nameNotFound' response and an explanation.\n   C:           (request packet)\n
    \  C: 0x08      (header: V=0,RR=request,PD=no,DS=yes,PT=xml)\n   C: 0x03 0xA4
    (transaction ID=932)\n   C: 0x05 0xDA (maximum response size=1498)\n   C: 0x09
    \     (authority length=9)\n   C:           (authority=\"localhost\")\n   C: 0x6c
    0x6f 0x63 0x61 0x6c 0x68 0x6f 0x73 0x74\n   C:           (IRIS XML request)\n
    \  C: <request xmlns=\"urn:ietf:params:xml:ns:iris1\"\n   C:    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"
    >\n   C:    <searchSet>\n   C:      <bag>\n   C:        <simpleBag xmlns=\"http://example.com/\">\n
    \  C:          <salt>127.0.0.1:3434</salt>\n   C:          <md5>4LnQ1KdCahzyvwBqJis5rw==</md5>\n
    \  C:        </simpleBag>\n   C:      </bag>\n   C:      <lookupEntity\n   C:
    \       registryType=\"dreg1\"\n   C:        entityClass=\"local\"\n   C:        entityName=\"AUP\"
    />\n   C:    </searchSet>\n   C: </request>\n   S:           (response packet)\n
    \  S: 0x20      (header: V=0,RR=response,PD=no,DS=no,PT=xml)\n   S: 0x03 0xA4
    (transaction ID=932)\n   S:           (IRIS XML response)\n   S: <iris:response
    xmlns:iris=\"urn:ietf:params:xml:ns:iris1\">\n   S: <iris:resultSet><iris:answer></iris:answer>\n
    \  S: <iris:nameNotFound><iris:explanation language=\"en-US\">\n   S: The name
    'AUP' is not found in 'local'.</iris:explanation>\n   S: </iris:nameNotFound></iris:resultSet></iris:response>\n
    \                                Example 1\n   The following example demonstrates
    an IRIS client requesting domain\n   availability information for 'milo.example.com'.
    \ The server responds\n   that the domain is assigned and active.\n   C:           (request
    packet)\n   C: 0x00      (header: V=0,RR=request,PD=no,DS=no,PT=xml)\n   C: 0x0B
    0xE7 (transaction ID=3047)\n   C: 0x0F 0xA0 (maximum response size=4000)\n   C:
    0x0B      (authority length=11)\n   C:           (authority=\"example.com\")\n
    \  C: 0x65 0x78 0x61 0x6D 0x70 0x6C 0x65 0x23 0x63 0x6F 0x6D\n   C:           (IRIS
    XML request)\n   C: <request xmlns=\"urn:ietf:params:xml:ns:iris1\"\n   C:   xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n
    \  C:   xsi:schemaLocation=\"urn:ietf:params:xml:ns:iris1 iris.xsd\" >\n   C:
    \  <searchSet>\n   C:     <lookupEntity\n   C:       registryType=\"urn:ietf:params:xml:ns:dchk1\"\n
    \  C:       entityClass=\"domain-name\"\n   C:       entityName=\"milo.example.com\"
    />\n   C:   </searchSet>\n   C: </request>\n   S:           (response packet)\n
    \  S: 0x20      (header: V=0,RR=response,PD=no,DS=no,PT=xml)\n   S: 0x0B 0xE7
    (transaction ID=3047)\n   S:           (IRIS XML response)\n   S: <iris:response
    xmlns:iris=\"urn:ietf:params:xml:ns:iris1\">\n   S: <iris:resultSet><iris:answer><domain\n
    \  S: authority=\"example.com\" registryType=\"dchk1\"\n   S: entityClass=\"domain-name\"
    entityName=\"tcs-com-1\"\n   S: temporaryReference=\"true\"\n   S: xmlns=\"urn:ietf:params:xml:ns:dchk1\"><domainName>\n
    \  S: milo.example.com</domainName><status><assignedAndActive/>\n   S: </status></domain></iris:answer>\n
    \  S: </iris:resultSet></iris:response>\n                                 Example
    2\n   The following example demonstrates an IRIS client requesting domain\n   availability
    information for felix.example.net, hobbes.example.net,\n   and daffy.example.net.
    \ The client does not support responses\n   compressed with DEFLATE, and the maximum
    UDP packet it can safely\n   receive is 498 octets.  The server responds with
    size information\n   indicating that it would take 1211 octets to provide an answer.\n
    \  C:           (request packet)\n   C: 0x00      (header: V=0,RR=request,PD=no,DS=no,PT=xml)\n
    \  C: 0x7E 0x8A (transaction ID=32394)\n   C: 0x01 0xF2 (maximum response size=498)\n
    \  C: 0x0B      (authority length=11)\n   C:           (authority=\"example.net\")\n
    \  C: 0x65 0x78 0x61 0x6D 0x70 0x6C 0x65 0x23 0x6E 0x65 0x74\n   C:           (IRIS
    XML request)\n   C: <request xmlns=\"urn:ietf:params:xml:ns:iris1\"\n   C:   xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n
    \  C:   xsi:schemaLocation=\"urn:ietf:params:xml:ns:iris1 iris1.xsd\">\n   C:
    \  <searchSet>\n   C:     <lookupEntity registryType=\"dchk1\" entityClass=\"domain-name\"\n
    \  C:       entityName=\"felix.example.net\" />\n   C:   </searchSet>\n   C:   <searchSet>\n
    \  C:     <lookupEntity registryType=\"dchk1\" entityClass=\"domain-name\"\n   C:
    \      entityName=\"hobbes.example.net\" />\n   C:   </searchSet>\n   C:   <searchSet>\n
    \  C:     <lookupEntity registryType=\"dchk1\" entityClass=\"domain-name\"\n   C:
    \      entityName=\"daffy.example.net\" />\n   C:   </searchSet>\n   C: </request>\n
    \  S:           (response packet)\n   S: 0x22      (header: V=0,RR=response,PD=no,DS=no,PT=si)\n
    \  S: 0x7E 0x8A (transaction ID=32394)\n   S:           (Size Information XML
    response)\n   S: <responseSize xmlns=\"urn:ietf:params:xml:ns:iris-transport\">\n
    \  S:   <octets>1211</octets>\n   S: </responseSize>\n                                 Example
    3\n   The following example illustrates an IRIS client requesting the\n   version
    information from a server, and the server returning the\n   version information.\n
    \  C:           (request packet)\n   C: 0x01      (header: V=0,RR=request,PD=no,DS=no,PT=vi)\n
    \  C: 0x2E 0x9C (transaction ID=11932)\n   C: 0x01 0xF2 (maximum response size=498)\n
    \  C: 0x0B      (authority length=11)\n   C:           (authority=\"example.net\")\n
    \  C: 0x65 0x78 0x61 0x6D 0x70 0x6C 0x65 0x23 0x6E 0x65 0x74\n   S:           (response
    packet)\n   S: 0x21      (header: V=0,RR=response,PD=no,DS=no,PT=vi)\n   S: 0x2E
    0x9C (transaction ID=11932)\n   S:           (Version Information XML response)\n
    \  S: <versions xmlns=\"urn:ietf:params:xml:ns:iris-transport\">\n   S:   <transferProtocol
    protocolId=\"iris.lwz1\">\n   S:     <application protocolId=\"urn:ietf:params:xml:ns:iris1\">\n
    \  S:       <dataModel protocolId=\"urn:ietf:params:xml:ns:dchk1\"/>\n   S:       <dataModel
    protocolId=\"urn:ietf:params:xml:ns:dreg1\"/>\n   S:     </application>\n   S:
    \  </transferProtocol>\n   S: </versions>\n                                 Example
    4\n"
  title: Appendix A.  Examples
- contents:
  - "Appendix B.  Contributors\n   Substantive contributions to this document have
    been provided by the\n   members of the IETF's CRISP Working Group, especially
    Milena Caires\n   and David Blacka.\n"
  title: Appendix B.  Contributors
- contents:
  - "Author's Address\n   Andrew L. Newton\n   VeriSign, Inc.\n   21345 Ridgetop Circle\n
    \  Sterling, VA  20166\n   USA\n   Phone: +1 703 948 3382\n   EMail: andy@hxr.us\n
    \  URI:   http://www.verisignlabs.com/\n"
  title: Author's Address
- contents:
  - "Full Copyright Statement\n   Copyright (C) The IETF Trust (2007).\n   This document
    is subject to the rights, licenses and restrictions\n   contained in BCP 78, and
    except as set forth therein, the authors\n   retain all their rights.\n   This
    document and the information contained herein are provided on an\n   \"AS IS\"
    basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n   OR IS SPONSORED
    BY (IF ANY), THE INTERNET SOCIETY, THE IETF TRUST AND\n   THE INTERNET ENGINEERING
    TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS\n   OR IMPLIED, INCLUDING BUT NOT
    LIMITED TO ANY WARRANTY THAT THE USE OF\n   THE INFORMATION HEREIN WILL NOT INFRINGE
    ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR
    PURPOSE.\n"
  title: Full Copyright Statement
- contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or
    scope of any\n   Intellectual Property Rights or other rights that might be claimed
    to\n   pertain to the implementation or use of the technology described in\n   this
    document or the extent to which any license under such rights\n   might or might
    not be available; nor does it represent that it has\n   made any independent effort
    to identify any such rights.  Information\n   on the procedures with respect to
    rights in RFC documents can be\n   found in BCP 78 and BCP 79.\n   Copies of IPR
    disclosures made to the IETF Secretariat and any\n   assurances of licenses to
    be made available, or the result of an\n   attempt made to obtain a general license
    or permission for the use of\n   such proprietary rights by implementers or users
    of this\n   specification can be obtained from the IETF on-line IPR repository
    at\n   http://www.ietf.org/ipr.\n   The IETF invites any interested party to bring
    to its attention any\n   copyrights, patents or patent applications, or other
    proprietary\n   rights that may cover technology that may be required to implement\n
    \  this standard.  Please address the information to the IETF at\n   ietf-ipr@ietf.org.\n"
  title: Intellectual Property
- contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided
    by the\n   Internet Society.\n"
  title: Acknowledgement
