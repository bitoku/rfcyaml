- title: __initial_text__
  contents:
  - "              Datagram Congestion Control Protocol (DCCP)\n   Simultaneous-Open\
    \ Technique to Facilitate NAT/Middlebox Traversal\n"
- title: Abstract
  contents:
  - "Abstract\n   This document specifies an update to the Datagram Congestion Control\n\
    \   Protocol (DCCP), a connection-oriented and datagram-based transport\n   protocol.\
    \  The update adds support for the DCCP-Listen packet.  This\n   assists DCCP\
    \ applications to communicate through middleboxes (e.g., a\n   Network Address\
    \ Port Translator or a DCCP server behind a firewall),\n   where peering endpoints\
    \ need to initiate communication in a near-\n   simultaneous manner to establish\
    \ necessary middlebox state.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Copyright and License Notice
  contents:
  - "Copyright and License Notice\n   Copyright (c) 2009 IETF Trust and the persons\
    \ identified as the\n   document authors.  All rights reserved.\n   This document\
    \ is subject to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF\
    \ Documents\n   (http://trustee.ietf.org/license-info) in effect on the date of\n\
    \   publication of this document.  Please review these documents\n   carefully,\
    \ as they describe your rights and restrictions with respect\n   to this document.\
    \  Code Components extracted from this document must\n   include Simplified BSD\
    \ License text as described in Section 4.e of\n   the Trust Legal Provisions and\
    \ are provided without warranty as\n   described in the BSD License.\n   This\
    \ document may contain material from IETF Documents or IETF\n   Contributions\
    \ published or made publicly available before November\n   10, 2008.  The person(s)\
    \ controlling the copyright in some of this\n   material may not have granted\
    \ the IETF Trust the right to allow\n   modifications of such material outside\
    \ the IETF Standards Process.\n   Without obtaining an adequate license from the\
    \ person(s) controlling\n   the copyright in such materials, this document may\
    \ not be modified\n   outside the IETF Standards Process, and derivative works\
    \ of it may\n   not be created outside the IETF Standards Process, except to format\n\
    \   it for publication as an RFC or to translate it into languages other\n   than\
    \ English.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction . . . . . . . . . . . . . . . . . . .\
    \ . . . . . .  3\n     1.1.  Scope of This Document . . . . . . . . . . . . .\
    \ . . . . .  3\n     1.2.  DCCP NAT Traversal . . . . . . . . . . . . . . . .\
    \ . . . .  4\n     1.3.  Structure of This Document . . . . . . . . . . . . .\
    \ . . .  4\n   2.  Procedure for Near-Simultaneous-Open . . . . . . . . . . .\
    \ . .  5\n     2.1.  Conventions and Terminology  . . . . . . . . . . . . . .\
    \ .  5\n     2.2.  Protocol Method  . . . . . . . . . . . . . . . . . . . . .\
    \  5\n       2.2.1.  DCCP-Listen Packet Format  . . . . . . . . . . . . . .  6\n\
    \       2.2.2.  Protocol Method for DCCP Server Endpoints  . . . . . .  7\n  \
    \     2.2.3.  Protocol Method for DCCP Client Endpoints  . . . . . . 11\n    \
    \   2.2.4.  Processing by Routers and Middleboxes  . . . . . . . . 11\n     2.3.\
    \  Examples of Use  . . . . . . . . . . . . . . . . . . . . . 12\n       2.3.1.\
    \  Repetition of DCCP-Listen  . . . . . . . . . . . . . . 13\n       2.3.2.  Optional\
    \ Triggered Retransmission of DCCP-Request  . . 14\n     2.4.  Backwards Compatibility\
    \ with RFC 4340  . . . . . . . . . . 16\n   3.  Discussion of Design Decisions\
    \ . . . . . . . . . . . . . . . . 16\n     3.1.  Rationale for a New Packet Type\
    \  . . . . . . . . . . . . . 17\n       3.1.1.  Use of Sequence Numbers  . . .\
    \ . . . . . . . . . . . . 18\n     3.2.  Generation of Listen Packets . . . .\
    \ . . . . . . . . . . . 18\n     3.3.  Repetition of DCCP-Listen Packets  . .\
    \ . . . . . . . . . . 18\n   4.  Security Considerations  . . . . . . . . . .\
    \ . . . . . . . . . 19\n   5.  IANA Considerations  . . . . . . . . . . . . .\
    \ . . . . . . . . 20\n   6.  Acknowledgements . . . . . . . . . . . . . . . .\
    \ . . . . . . . 20\n   7.  References . . . . . . . . . . . . . . . . . . . .\
    \ . . . . . . 21\n     7.1.  Normative References . . . . . . . . . . . . . .\
    \ . . . . . 21\n     7.2.  Informative References . . . . . . . . . . . . . .\
    \ . . . . 21\n   Appendix A.  Discussion of Existing NAT Traversal Techniques\
    \ . . . 23\n     A.1.  NAT Traversal Based on a Simultaneous-Request  . . . .\
    \ . . 24\n     A.2.  Role Reversal  . . . . . . . . . . . . . . . . . . . . .\
    \ . 25\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   The Datagram Congestion Control Protocol (DCCP) [RFC4340]\
    \ is both\n   datagram-based and connection-oriented.  According to RFC 4340,\
    \ DCCP\n   servers establish connections by passively listening for incoming\n\
    \   connection requests that are actively transmitted by DCCP clients.\n   These\
    \ asymmetric roles can cause problems when the server is 'inside'\n   a middlebox,\
    \ such as a Network Address Port Translation (NAPT), that\n   only allows connection\
    \ requests to be initiated from inside (e.g.,\n   due to port overloading) [RFC5597].\
    \  Host-based and network firewalls\n   can also implement policies that lead\
    \ to similar problems.  This\n   behaviour is currently the default for many firewalls.\n\
    \   UDP can support middlebox traversal using various techniques\n   [RFC4787]\
    \ that leverage the connectionless nature of UDP and are\n   therefore not suitable\
    \ for DCCP.  TCP supports middlebox traversal\n   through the use of its simultaneous-open\
    \ procedure [RFC5382].  The\n   concepts of the TCP solution are applicable to\
    \ DCCP, but DCCP cannot\n   simply reuse the same methods (see Appendix A).\n\
    \   After discussing the problem space for DCCP, this document specifies\n   an\
    \ update to the DCCP state machine to offer native support that\n   allows a DCCP\
    \ client to establish a connection to a DCCP server that\n   is inside one or\
    \ more middleboxes.  This reduces dependence on\n   external aids such as data\
    \ relay servers [STUN] by explicitly\n   supporting a widely used principle known\
    \ as 'hole punching'.\n   The method requires only a minor change to the standard\
    \ DCCP\n   operational procedure.  The use of a dedicated DCCP packet type ties\n\
    \   usage to a specific condition, ensuring the method is inter-operable\n   with\
    \ hosts that do not implement this update or that choose to\n   disable it (see\
    \ Section 4).\n"
- title: 1.1.  Scope of This Document
  contents:
  - "1.1.  Scope of This Document\n   This method is useful in scenarios when a DCCP\
    \ server is located\n   inside the perimeter controlled by a middlebox.  It is\
    \ relevant to\n   both client/server and peer-to-peer applications, such as Voice\
    \ over\n   IP (VoIP), file sharing, or online gaming, and assists connections\n\
    \   that utilise prior out-of-band signaling (e.g., via a well-known\n   rendezvous\
    \ server ([RFC3261], [H.323])) to notify both endpoints of\n   the connection\
    \ parameters ([RFC3235], [NAT-APP]).\n"
- title: 1.2.  DCCP NAT Traversal
  contents:
  - "1.2.  DCCP NAT Traversal\n   The behavioural requirements for NAT devices supporting\
    \ DCCP are\n   described in [RFC5597].  A \"traditional NAT\" [RFC3022] that directly\n\
    \   maps an IP address to a different IP address does not require the\n   simultaneous-open\
    \ technique described in this document.\n   The method is required when the DCCP\
    \ server is positioned behind one\n   or more NAPT devices in the path (hierarchies\
    \ of nested NAPT devices\n   are possible).  This document refers to DCCP hosts\
    \ located inside the\n   perimeter controlled by one or more NAPT devices as having\
    \ \"private\"\n   addresses, and to DCCP hosts located in the global address realm\
    \ as\n   having \"public\" addresses.\n   DCCP NAT traversal is considered for\
    \ the following scenarios:\n   1.  Private client connects to public server.\n\
    \   2.  Public client connects to private server.\n   3.  Private client connects\
    \ to private server.\n   A defining characteristic of traditional NAT devices\
    \ [RFC3022] is\n   that private hosts can connect to external hosts, but not vice\
    \ versa.\n   Hence, case (1) is possible using the protocol defined in [RFC4340].\n\
    \   A pre-configured, static NAT address map would allow outside hosts to\n  \
    \ establish connections in cases (2) and (3).\n   A DCCP implementation conforming\
    \ to [RFC4340] and a NAT device\n   conforming to [RFC5597] would require a DCCP\
    \ relay server to perform\n   NAT traversal for cases (2) and (3).\n   This document\
    \ describes a method to support cases (2) and (3) without\n   the aid of a DCCP\
    \ relay server.  This method updates RFC 4340 and\n   requires the DCCP server\
    \ to discover the IP address and the DCCP port\n   that correspond to the DCCP\
    \ client.  Such signaling may be performed\n   out-of-band (e.g., using the Session\
    \ Description Protocol (SDP)\n   [RFC4566]).\n"
- title: 1.3.  Structure of This Document
  contents:
  - "1.3.  Structure of This Document\n   For background information on existing NAT\
    \ traversal techniques,\n   please consult Appendix A.\n   The normative specification\
    \ of the update is presented in Section 2.\n   An informative discussion of underlying\
    \ design decisions then follows\n   in Section 3.  Security considerations are\
    \ provided in Section 4 and\n   IANA considerations are provided in the concluding\
    \ Section 5.\n"
- title: 2.  Procedure for Near-Simultaneous-Open
  contents:
  - "2.  Procedure for Near-Simultaneous-Open\n   This section is normative and specifies\
    \ the simultaneous-open\n   technique for DCCP.  It updates the connection-establishment\n\
    \   procedures of [RFC4340].\n"
- title: 2.1.  Conventions and Terminology
  contents:
  - "2.1.  Conventions and Terminology\n   The document uses the terms and definitions\
    \ provided in [RFC4340].\n   Familiarity with this specification is assumed. \
    \ In particular, the\n   following convention from Section 3.2 of [RFC4340] is\
    \ used:\n      Each DCCP connection runs between two hosts, which we often name\n\
    \      DCCP A and DCCP B.  Each connection is actively initiated by one\n    \
    \  of the hosts, which we call the client; the other, initially\n      passive\
    \ host is called the server.\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\"\
    , \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"\
    MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described\
    \ in [RFC2119].\n"
- title: 2.2.  Protocol Method
  contents:
  - "2.2.  Protocol Method\n   The term \"session\" is used as defined in ([RFC2663],\
    \ Section 2.3):\n   DCCP sessions are uniquely identified by the 4-tuple of <source\
    \ IP-\n   address, source port, target IP-address, target port>.\n   DCCP, in\
    \ addition, introduces Service Codes, which can be used to\n   identify different\
    \ services available via the same port [RFC5595].\n"
- title: 2.2.1.  DCCP-Listen Packet Format
  contents:
  - "2.2.1.  DCCP-Listen Packet Format\n   This document adds a new DCCP packet type,\
    \ DCCP-Listen, whose format\n   is shown below.\n    0                   1   \
    \                2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6\
    \ 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |          Source Port          |           Dest Port           |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |  Data Offset  | CCVal | CsCov |           Checksum            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   | Res | Type  |X|   Reserved    |  Sequence Number High Bits    |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                    Sequence Number Low Bits                   |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                         Service Code                          |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                 Figure 1: Format of a DCCP-Listen Packet\n   o  The Source Port\
    \ field indicates the port on which the DCCP server\n      is listening for a\
    \ connection from the IP address that appears as\n      the destination IP address\
    \ in the packet.\n   o  The Destination Port field indicates the port selected\
    \ by a DCCP\n      client to identify the connection.  In this technique, this\
    \ value\n      must be communicated out-of-band to the server.\n   o  The value\
    \ of X MUST be set to 1.  A DCCP-Listen packet is sent\n      before a connection\
    \ is established; therefore, there is no way to\n      negotiate use of short\
    \ sequence numbers ([RFC4340], Section 5.1).\n   o  The value of the Sequence\
    \ Number field in a DCCP-Listen packet is\n      not related to the DCCP sequence\
    \ number used in normal DCCP\n      messages (see Section 3 for a description\
    \ of the use of the DCCP\n      sequence number).  Thus, for DCCP-Listen packets:\n\
    \      *  A DCCP server SHOULD set the high and low bits of the Sequence\n   \
    \      Number field to 0.\n      *  A DCCP client MUST ignore the value of the\
    \ Sequence Number\n         field.\n      *  Middleboxes MUST NOT interpret sequence\
    \ numbers in DCCP-Listen\n         packets.\n   o  The Service Code field contains\
    \ the Service Code value for which\n      the server is listening for a connection\
    \ (Section 8.1.2 of\n      [RFC4340] and [RFC5595]).  This value MUST correspond\
    \ to a Service\n      Code that the server is actually offering for a connection\n\
    \      identified by the same source IP address and the same source port\n   \
    \   as that of the DCCP-Listen packet.  Since the server may use\n      multiple\
    \ Service Codes, the specific value of the Service Code\n      field needs to\
    \ be communicated out-of-band, from client to server,\n      prior to sending\
    \ the DCCP-Listen packet, e.g., described using the\n      Session Description\
    \ Protocol (SDP) [RFC4566].\n   o  At the time of writing, there are no known\
    \ uses of header options\n      ([RFC4340], Section 5.8) with a DCCP-Listen packet.\
    \  Clients MUST\n      ignore all options in received DCCP-Listen packets.  Therefore,\n\
    \      feature values cannot be negotiated using a DCCP-Listen packet.\n   o \
    \ At the time of writing, there are no known uses of payload data\n      with\
    \ a DCCP-Listen packet.  Since DCCP-Listen packets are issued\n      before an\
    \ actual connection is established, endpoints MUST ignore\n      any payload data\
    \ encountered in DCCP-Listen packets.\n   o  The following protocol fields are\
    \ required to have specific\n      values:\n      *  Data Offset MUST have a value\
    \ of five or more (i.e., at least\n         20 bytes).\n      *  CCVal MUST be\
    \ zero (a connection has not been established).\n      *  CsCov MUST be zero (use\
    \ of the CsCov feature cannot be\n         negotiated).\n      *  Type has the\
    \ value 10, assigned by IANA to denote a DCCP-Listen\n         packet.\n     \
    \ *  X MUST be 1 (the generic header must be used).\n   The remaining fields,\
    \ including the \"Res\" and \"Reserved\" fields are\n   specified by [RFC4340]\
    \ and its successors.  The interpretation of\n   these fields is not modified\
    \ by this document.\n"
- title: 2.2.2.  Protocol Method for DCCP Server Endpoints
  contents:
  - "2.2.2.  Protocol Method for DCCP Server Endpoints\n   This document updates Section\
    \ 8.1 of [RFC4340] for the case of a\n   fully specified DCCP server endpoint.\
    \  The update modifies the way\n   the server performs a passive-open.\n   Prior\
    \ to connection setup, it is common for a DCCP server endpoint to\n   not be fully\
    \ specified: before the connection is established, a\n   server usually specifies\
    \ only the destination port and Service Code.\n   (Sometimes the destination address\
    \ is also specified.)  This leaves\n   the source address and source port unspecified.\
    \  The endpoint only\n   becomes fully specified after performing the handshake\
    \ for an\n   incoming connection.  For such cases, this document does not update\n\
    \   Section 8.4 of [RFC4340], i.e., the server adheres to the existing\n   state\
    \ transitions in the left half of Figure 2 (CLOSED => LISTEN =>\n   RESPOND).\n\
    \   A fully specified DCCP server endpoint permits exactly one client,\n   identified\
    \ by source IP-address:port, destination IP-address:port,\n   plus a single Service\
    \ Code, to set up the connection.  Such a server\n   SHOULD perform the actions\
    \ and state transitions shown in the right\n   half of Figure 2 and specified\
    \ below.\n           unspecified remote   +--------+   fully specified remote\n\
    \          +---------------------| CLOSED |---------------------+\n          |\
    \                     +--------+   send DCCP-Listen  |\n          |          \
    \                                          |\n          v                    \
    \                                v\n     +--------+                          \
    \        timeout  +---------+\n     | LISTEN |                           +---+-----------|\
    \ INVITED |\n     +--------+                           |   |           +---------+\n\
    \          |                               |   |  1st / 2nd  ^  |\n          |\
    \                 more than 2   |   |  retransm.  |  | receive\n          |  \
    \             retransmissions |   +-------------+  | Request\n          |    \
    \                           |    resend Listen   v\n          |              \
    \                 |               +---------+\n          |                   \
    \            +-------------->| LISTEN1 |\n          |                        \
    \                       +---------+\n          |                             \
    \                       |\n          |  receive Request   +---------+    receive\
    \ Request* |\n          +------------------->| RESPOND |<--------------------+\n\
    \             send Response     +---------+    send Response\n   * Note: The case\
    \ of a server that responds to a DCCP-Request in\n   the INVITED state, transitions\
    \ to the LISTEN1 state, and then\n   immediately transitions to the RESPOND state\
    \ does not require\n   reception of an additional DCCP-Request packet.\n     \
    \   Figure 2: Updated State Transition Diagram for DCCP-Listen\n   This diagram\
    \ introduces two additional DCCP server states in addition\n   to those listed\
    \ in Section 4.3 of [RFC4340]:\n   INVITED\n      The INVITED state is associated\
    \ with a specific DCCP connection\n      and represents a fully specified server\
    \ socket in the listening\n      state that is generating DCCP-Listen packets\
    \ towards the client.\n   LISTEN1\n      The LISTEN1 state is associated with\
    \ a specific DCCP connection\n      and represents a fully specified server socket\
    \ in the passive\n      listening state that will not generate further DCCP-Listen\
    \ packets\n      towards the client.\n   A fully specified server endpoint performs\
    \ a passive-open from the\n   CLOSED state by inviting the remote client to connect.\
    \  This is\n   performed by sending a single DCCP-Listen packet to the specified\n\
    \   remote IP-address:port, using the format specified in Section 2.2.1.\n   The\
    \ figure below provides pseudocode describing the packet processing\n   in the\
    \ INVITED state.  This processing step follows Step 2 in Section\n   8.5 of [RFC4340]).\n\
    \   The INVITED state is, like LISTEN, a passive state, characterised by\n   waiting\
    \ in the absence of an established connection.  If the server\n   endpoint in\
    \ the INVITED state receives a DCCP-Request that matches\n   the set of bound\
    \ ports and addresses, it transitions to the LISTEN1\n   state and then immediately\
    \ transitions to the RESPOND state, where\n   further processing resumes as specified\
    \ in [RFC4340].\n   The server SHOULD repeat sending a DCCP-Listen packet while\
    \ in the\n   INVITED state, at a 200-millisecond interval with up to at most 2\n\
    \   repetitions (Section 3 discusses this choice of time interval).  If\n   the\
    \ server is still in the INVITED state after a further period of\n   200ms following\
    \ transmission of the third DCCP-Listen packet, it\n   SHOULD progress to the\
    \ LISTEN1 state.\n   Fully specified server endpoints SHOULD treat ICMP error\
    \ messages\n   received in response to a DCCP-Listen packet as \"soft errors\"\
    \ that do\n   not cause a state transition.  Reception of an ICMP error message\
    \ as\n   a result of sending a DCCP-Listen packet does not necessarily\n   indicate\
    \ a failure of the following connection request, and therefore\n   should not\
    \ result in a server state change.  This reaction to soft\n   errors exploits\
    \ the valuable feature of the Internet that, for many\n   network failures, the\
    \ network can be dynamically reconstructed\n   without any disruption of the endpoints.\n\
    \   Server endpoints SHOULD ignore any incoming DCCP-Listen packets.  A\n   DCCP\
    \ server in the LISTEN, INVITED, or LISTEN1 states MAY generate a\n   DCCP-Reset\
    \ packet (Code 7, \"Connection Refused\") in response to a\n   received DCCP-Listen\
    \ packet.  This DCCP-Reset packet is an indication\n   that two servers are simultaneously\
    \ awaiting connections on the same\n   port.\n   Further details on the design\
    \ rationale are discussed in Section 3.\n   The figure below provides pseudocode\
    \ describing the packet processing\n   in the INVITED state.  This processing\
    \ step follows Step 2 in Section\n   8.5 of RFC 4340 [RFC4340].\n    Step 2a:\
    \ Process INVITED state\n      If S.state == INVITED,\n          /* State only\
    \ entered for fully specified server endpoints */\n          /* on entry S will\
    \ have been set to a socket */\n          If P.type == Request\n             /*\
    \ Exit INVITED state and continue to process the packet */\n             S.state\
    \ = LISTEN1\n             Continue with S.state := LISTEN1\n          Otherwise,\n\
    \             If P.type == Listen\n                /* The following line is optional\
    \ */\n                Generate Reset(Connection Refused)\n                /* Otherwise,\
    \ drop packet and return */\n             Otherwise,\n                Generate\
    \ Reset(No Connection) unless P.type == Reset\n    Step 2b: Process LISTEN1 state\n\
    \      If S.state == LISTEN1,\n          /* State only entered for fully specified\
    \ server endpoints */\n          /* Follows receipt of a Response packet */\n\
    \          /* or sending third Listen packet (after timer expiry) */\n       \
    \   If P.type == Request,\n             S.state = RESPOND\n             Choose\
    \ S.ISS (initial seqno) or set from Init Cookies\n             Initialize S.GAR\
    \ := S.ISS\n             Set S.ISR, S.GSR, S.SWL, S.SWH from packet or Init Cookies\n\
    \             Continue with S.state == RESPOND\n             /* A Response packet\
    \ will be generated in Step 11 */\n          Otherwise,\n             If P.type\
    \ == Listen\n                /* The following line is optional */\n          \
    \      Generate Reset(Connection Refused)\n                /* Otherwise, drop\
    \ packet and return */\n             Otherwise,\n                Generate Reset(No\
    \ Connection) unless P.type == Reset\n     Figure 3: Updated DCCP Pseudocode for\
    \ INVITED and LISTEN1 States\n"
- title: 2.2.3.  Protocol Method for DCCP Client Endpoints
  contents:
  - "2.2.3.  Protocol Method for DCCP Client Endpoints\n   This document updates Section\
    \ 8.1.1 of [RFC4340] by adding the\n   following rule for the reception of DCCP-Listen\
    \ packets by clients:\n   Endpoints are required to ignore any header options\
    \ or payload data\n   encountered in DCCP-Listen packets (Section 2.2.1) and hence\
    \ do not\n   provide meaningful communication to a client.  A client in any state\n\
    \   MUST silently discard any received DCCP-Listen packet, unless it\n   implements\
    \ the optional procedure defined in the following section.\n"
- title: 2.2.3.1.  Optional Generation of Triggered Requests
  contents:
  - "2.2.3.1.  Optional Generation of Triggered Requests\n   This section describes\
    \ an optional optimisation at the client that\n   can allow the client to avoid\
    \ having to wait for a timeout following\n   a dropped DCCP-Request.  The operation\
    \ requires clients to respond to\n   reception of DCCP-Listen packets when received\
    \ in the REQUEST state.\n   DCCP-Listen packets MUST be silently discarded in\
    \ all other states.\n   A client implementing this optimisation MAY immediately\
    \ perform a\n   retransmission of a DCCP-Request following the reception of the\
    \ first\n   DCCP-Listen packet.  The retransmission is performed in the same\n\
    \   manner as a timeout in the REQUEST state [RFC4340].  A triggered\n   retransmission\
    \ SHOULD result in the client increasing the\n   exponential-backoff timer interval.\n\
    \   Note that a path delay greater than 200ms will result in multiple\n   DCCP-Listen\
    \ packets arriving at the client before a DCCP-Response is\n   received.  Clients\
    \ MUST therefore perform only one such\n   retransmission for each DCCP connection.\
    \  This requires maintaining\n   local state (e.g., one flag per connection).\n\
    \   Implementors and users of this optional method need to be aware that\n   host\
    \ timing or path reordering can result in a server receiving two\n   DCCP-Requests\
    \ (i.e., the server sending one unnecessary packet).\n   This would, in turn,\
    \ trigger a client to send a second corresponding\n   DCCP-Response (also unnecessary).\
    \  These additional packets are not\n   expected to modify or delay the DCCP open\
    \ procedure [RFC4340].\n   Section 2.3.2 provides examples of the use of triggered\n\
    \   retransmission.\n"
- title: 2.2.4.  Processing by Routers and Middleboxes
  contents:
  - "2.2.4.  Processing by Routers and Middleboxes\n   DCCP-Listen packets do not\
    \ require special treatment and should thus\n   be forwarded end-to-end across\
    \ Internet paths, by routers and\n   middleboxes alike.\n   Middleboxes may utilise\
    \ the connection information (address, port,\n   Service Code) to establish local\
    \ forwarding state.  The DCCP-Listen\n   packet carries the necessary information\
    \ to uniquely identify a DCCP\n   session in combination with the source and destination\
    \ addresses\n   (found in the enclosing IP header), including the DCCP Service\
    \ Code\n   value [RFC5595].  The processing of the DCCP-Listen packet by NAT\n\
    \   devices is specified in [RFC5597].\n"
- title: 2.3.  Examples of Use
  contents:
  - "2.3.  Examples of Use\n   In the examples below, DCCP A is the client and DCCP\
    \ B is the server.\n   A middlebox device (NAT/Firewall), NA, is placed before\
    \ DCCP A, and\n   another middlebox, NB, is placed before DCCP B.  Both NA and\
    \ NB use a\n   policy that permits DCCP packets to traverse the device for outgoing\n\
    \   links, but only permits incoming DCCP packets when a previous packet\n   has\
    \ been sent out for the same connection.\n   In the figure below, DCCP A and DCCP\
    \ B decide to communicate using an\n   out-of-band mechanism (in this case, labelled\
    \ SDP), whereupon the\n   client and server are started.  DCCP B actively indicates\
    \ its\n   listening state by sending a DCCP-Listen message.  This fulfills the\n\
    \   requirement of punching a hole in NB (also creating the binding to\n   the\
    \ external address and port).  This message is dropped by NA since\n   no hole\
    \ exists there yet.  DCCP A initiates a connection by entering\n   the REQUEST\
    \ state and sending a DCCP-Request.  (It is assumed that if\n   NA were a NAT\
    \ device, then this would also result in a binding that\n   maps the pinhole to\
    \ the external address and port.)  The DCCP-Request\n   is received by DCCP B,\
    \ via the binding at NB.  DCCP B transmits the\n   DCCP-Response and connects\
    \ through the bindings now in place at NA\n   and NB.\n    DCCP A            \
    \                            DCCP B\n    ------               NA      NB     \
    \          ------\n    +-----------------+  +-+    +-+  +-----------------+\n\
    \    |                 |  | |    | |  |                 | State = CLOSED\n   \
    \ | SDP -->         |--+-+----+-+->|                 | State = INVITED\n    |\
    \                 |  | |X---+-+--|<-- DCCP-Listen  |\n    |(State=REQUEST)  |\
    \  | |    | |  |                 |\n    |DCCP-Request --> |--+-+----+-+->|   \
    \              |\n    |(State=PARTOPEN) | <+-+----+-+--|<-- DCCP-Response| State\
    \ = RESPOND\n    |DCCP-Ack -->     |--+-+----+-+> |                 |\n    | \
    \                |  | |    | |  |                 |\n    |                 | \
    \ | |    | |  |                 |\n    |DCCP-Data -->    |--+-+----+-+->|    \
    \             | State = OPEN\n    +-----------------+  +-+    +-+  +-----------------+\n\
    \   Figure 4: Event Sequence When the Server Is Started Before the Client\n"
- title: 2.3.1.  Repetition of DCCP-Listen
  contents:
  - "2.3.1.  Repetition of DCCP-Listen\n   This section examines the effect of not\
    \ receiving the DCCP-Request.\n   The figure below shows the sequence of packets\
    \ where the DCCP server\n   enters the INVITED state after reception of out-of-band\
    \ signaling\n   (e.g., SDP).  The key timer operations at the client and server\
    \ are\n   respectively shown on the left and right of the diagram.  It\n   considers\
    \ the case when the server does not receive a DCCP-Request\n   within the first\
    \ 600ms (often the request would be received within\n   this interval).\n   The\
    \ repetition of DCCP-Listen packets may be implemented using a\n   timer.  The\
    \ timer is restarted with an interval of 200ms when sending\n   each DCCP-Listen\
    \ packet.  It is cancelled when the server leaves the\n   INVITED state.  If the\
    \ timer expires after the first and second\n   transmission, it triggers a transmission\
    \ of another DCCP-Listen\n   packet.  If it expires after sending the third DCCP-Listen\
    \ packet,\n   the server leaves the INVITED state to enter the LISTEN1 state (where\n\
    \   it passively waits for a DCCP-Request).\n                DCCP A          \
    \                 DCCP B\n                ------  NA      NB               ------\n\
    \                +----+  +-+    +-+  +-----------------+\n                |  \
    \  |  | |    | |  |                 | State = CLOSED\n                | -->|--+-+----+-+--|-->\
    \ SDP          |\n                |    |  | |    | |  |                 | State\
    \ = INVITED\n                |    |  | |    | |  |                 |\n       \
    \         |    |  | |X---+-+--|<-- DCCP-Listen  | Timer Starts\n             \
    \   |    |  | |    | |  |                 |      |\n   DCCP-Request | -->|--->+--X\
    \ | |  |   (dropped)     |      |\n   Timer Starts |    |  | |    | |  |     \
    \            |      |\n         |      |    |  | |    | |  |                 |\
    \ 1st Timer Expiry\n         |      |    |<-+-+----+++--|<-- DCCP-Listen  |\n\
    \         |      |    |  | |    | |  |                 | Timer Starts\n      \
    \   |      |    |  | |    | |  |                 |       |\n         |      |\
    \    |  | |    | |  |                 | 2nd Timer Expiry\n         |      |  \
    \  |  | |    | |  |                 |\n         |      |    |<-+-+----+-+--|<--\
    \ DCCP-Listen  | Timer Starts\n         |      |    |  | |    | |  |         \
    \        |       |\n         |      |    |  | |    | |  |                 | 3rd\
    \ Timer Expiry\n         |      |    |  | |    | |  |                 |\n    \
    \     |      |    |  | |    | |  |                 | State = LISTEN1\n       \
    \  |      ~    ~  ~ ~    ~ ~  ~                 ~\n         |      |    |  | |\
    \    | |  |                 |\n   Timer Expiry | -->|--+-+----+-+--|--> DCCP-Request\
    \ |\n                |    |  | |    | |  |                 | State = RESPOND\n\
    \                | <--|--+-+----+-+--|<-- DCCP-Response|\n                +----+\
    \  +-+    +-+  +-----------------+\n              Figure 5: Repetition of the\
    \ DCCP-Listen Packet\n"
- title: 2.3.2.  Optional Triggered Retransmission of DCCP-Request
  contents:
  - "2.3.2.  Optional Triggered Retransmission of DCCP-Request\n   The following figure\
    \ illustrates a triggered retransmission.  In this\n   figure, the first DCCP-Listen\
    \ is assumed to be lost in the network\n   (e.g., does not open a pinhole at NB).\
    \  A later DCCP-Request is also\n   not received (perhaps as a side effect of\
    \ the first loss).  After\n   200ms, the DCCP-Listen packet is retransmitted and\
    \ correctly\n   received.  This triggers the retransmission of the DCCP-Request,\n\
    \   which, when received, results in a corresponding DCCP-Response.\n   DCCP A\
    \                                         DCCP B\n   ------               NA \
    \     NB               ------\n   +-----------------+  +-+    +-+  +-----------------+\n\
    \   |                 |  | |    | |  |                 | State = CLOSED\n   |SDP\
    \              |--+-+----+-+->|                 | State = INVITED\n   |(State=\
    \ REQUEST) |  | |    | |  |                 |\n   |                 |  | |   \
    \ | |X-|<-- DCCP-Listen  |\n   |DCCP-Request --> |--+-+---X| |  |            \
    \     |\n   |                 | <+-+----+-+--|<-- DCCP-Listen  |(retransmit)\n\
    \   |                 |  | |    | |  |                 |\n   |DCCP-Request -->\
    \ |--+-+----+-+->|                 | State = RESPOND\n   |  (Triggered)    | \
    \ | |    | |  |                 |\n   |                 |<-+-+----+-+--|<-- DCCP-Response|\n\
    \   |(State= PARTOPEN)|  | |    | |  |                 |\n   |DCCP-Ack -->   \
    \  |--+-+----+-+->|                 | State = OPEN\n   +-----------------+  +-+\
    \    +-+  +-----------------+\n            Figure 6: Example Showing a Triggered\
    \ DCCP-Request\n   The figure below illustrates the sequence of packets exchanged\
    \ when a\n   DCCP-Listen and DCCP-Request are processed out of order.  Reception\n\
    \   of the DCCP-Listen packet by the client triggers retransmission of\n   the\
    \ DCCP-Request.  The server responds to the first DCCP-Request and\n   enters\
    \ the RESPOND state.  The server subsequently responds to the\n   second DCCP-Request\
    \ with another DCCP-Response, which is ignored by\n   the client (already in the\
    \ PARTOPEN state).\n   DCCP A                                        DCCP B\n\
    \   ------                NA     NB              ------\n   +-----------------+\
    \  +-+    +-+  +-----------------+\n   |                 |  | |    | |  |    \
    \             | State = CLOSED\n   |SDP              |--+-+----+-+->|        \
    \         | State = INVITED\n   |(State = REQUEST)|  | |    | |  |           \
    \      |\n   |DCCP-Request --> |--+-+-  -+-+--|<-- DCCP-Listen  |\n   |      \
    \           |  | | \\/ | |  |                 |\n   |                 |  | | /\\\
    \ | |  |                 |\n   |                 |<-+-+-  -+-+->|            \
    \     |\n   |DCCP-Request --> |--+-+-  -+-+--|<-- DCCP-Response| State = RESPOND\n\
    \   |  (Triggered)    |  | | \\/ | |  |                 |\n   |              \
    \   |  | | /\\ | |  |                 |\n   |                 |<-+-+-  -+-+->|\
    \                 |\n   |(State= PARTOPEN)|  | |    | |  |                 |\n\
    \   |DCCP-Ack     --> |--+-+-  -+-+--|<-- DCCP-Response|\n   |  (Triggered)  \
    \  |  | | \\/ | |  |                 |\n   |                 |  | | /\\ | |  |\
    \                 |\n   |  (Ignored)      |<-+-+-  -+-+->|                 | State\
    \ = OPEN\n   |                 |  | |    | |  |                 |\n   +-----------------+\
    \  +-+    +-+  +-----------------+\n      Figure 7: Example Showing an Unnecessary\
    \ Triggered DCCP-Request\n"
- title: 2.4.  Backwards Compatibility with RFC 4340
  contents:
  - "2.4.  Backwards Compatibility with RFC 4340\n   No changes are required if a\
    \ DCCP client conforming to this document\n   communicates with a DCCP server\
    \ conforming to [RFC4340].\n   If a client implements only [RFC4340], an incoming\
    \ DCCP-Listen packet\n   would be ignored due to step 1 in Section 8.1 of [RFC4340],\
    \ which at\n   the same time also conforms to the behaviour specified by this\n\
    \   document.\n   This document further does not modify communication for any\
    \ DCCP\n   server that implements a passive-open without fully binding the\n \
    \  addresses, ports, and Service Codes to be used.  The authors\n   therefore\
    \ do not expect practical deployment problems with existing,\n   conformant DCCP\
    \ implementations.\n"
- title: 3.  Discussion of Design Decisions
  contents:
  - "3.  Discussion of Design Decisions\n   This is an informative section that reviews\
    \ the rationale for the\n   design of this method.\n"
- title: 3.1.  Rationale for a New Packet Type
  contents:
  - "3.1.  Rationale for a New Packet Type\n   The DCCP-Listen packet specified in\
    \ Section 2.2.1 has the same format\n   as the DCCP-Request packet ([RFC4340],\
    \ Section 5.1), the only\n   difference is in the value of the Type field.  The\
    \ usage, however,\n   differs.  The DCCP-Listen packet serves as an advisory message,\
    \ not\n   as part of the actual connection setup: sequence numbers have no\n \
    \  meaning, and no payload can be communicated.\n   A DCCP-Request packet could,\
    \ in theory, also have been used for the\n   same purpose.  The following arguments\
    \ were against this:\n   The first problem was that of semantic overloading: the\
    \ DCCP-Request\n   defined in [RFC4340] serves a well-defined purpose, being the\
    \ initial\n   packet of the 3-way handshake.  Additional use in the manner of\
    \ a\n   DCCP-Listen packet would have required DCCP processors to have two\n \
    \  different processing paths: one where a DCCP-Request was interpreted\n   as\
    \ part of the initial handshake, and another where the same packet\n   was interpreted\
    \ as an indication of an intention to accept a new\n   connection.  This would\
    \ complicate packet processing in hosts and, in\n   particular, stateful middleboxes\
    \ (which may have restricted\n   computational resources).\n   The second problem\
    \ is that a client receiving a DCCP-Request from a\n   server could generate a\
    \ DCCP-Reset packet if it had not yet entered\n   the REQUEST state (step 7 in\
    \ Section 8.5 of [RFC4340]).  The method\n   specified in this document lets client\
    \ endpoints ignore DCCP-Listen\n   packets.  Adding a similar rule for the DCCP-Request\
    \ packet would\n   have been cumbersome: clients would not have been able to distinguish\n\
    \   between a DCCP-Request packet meant to indicate an intention to\n   accept\
    \ a new connection and a genuinely erratic connection\n   initiation.\n   The\
    \ third problem is similar and refers to a client receiving the\n   indication\
    \ after having itself sent a (connection-initiation) DCCP-\n   Request.  Step\
    \ 7 in Section 8.5 of [RFC4340] requires the client to\n   reply to a DCCP-Request\
    \ from the server with a DCCP-Sync packet.\n   Since sequence numbers are ignored\
    \ for this type of message,\n   additional and complex processing would become\
    \ necessary: either to\n   ask the client not to respond to a DCCP-Request when\
    \ the request is\n   used as an indication, or to ask middleboxes and servers\
    \ to ignore\n   DCCP-Sync packets generated in response to DCCP-Request packets\
    \ that\n   are used as indications.  Furthermore, since no initial sequence\n\
    \   numbers have been negotiated at this stage, sending a DCCP-SyncAck\n   would\
    \ not be meaningful.\n   The use of a separate packet type therefore allows simpler\
    \ and\n   clearer processing.\n"
- title: 3.1.1.  Use of Sequence Numbers
  contents:
  - "3.1.1.  Use of Sequence Numbers\n   Although the DCCP-Listen Sequence Number\
    \ fields are ignored, they\n   have been retained in the DCCP-Listen packet header\
    \ to reuse the\n   generic header format from Section 5.1 of [RFC4340].\n   DCCP\
    \ assigns a random initial value to the sequence number when a\n   DCCP connection\
    \ is established [RFC4340].  However, a sender is\n   required to set this value\
    \ to zero for a DCCP-Listen packet.  Both\n   clients and middleboxes are also\
    \ required to ignore this value.\n   The rationale for ignoring the Sequence Number\
    \ fields of DCCP-Listen\n   packets is that, at the time the DCCP-Listen is exchanged,\
    \ the\n   endpoints have not yet entered connection setup: the DCCP-Listen\n \
    \  packet is sent while the server is still in the passive-open\n   (INVITED)\
    \ state, i.e., it has not yet allocated state, other than\n   binding to the client's\
    \ IP-address:port and Service Code.\n"
- title: 3.2.  Generation of Listen Packets
  contents:
  - "3.2.  Generation of Listen Packets\n   A DCCP server should by default permit\
    \ generation of DCCP-Listen\n   packets.  Since DCCP-Listen packets solve a particular\
    \ problem with\n   NAT and/or firewall traversal, the generation of DCCP-Listen\
    \ packets\n   on passive sockets is tied to a condition (binding to a remote\n\
    \   address and Service Code that are both known a priori) to ensure this\n  \
    \ does not interfere with the general case of \"normal\" DCCP connections\n  \
    \ (where client addresses are generally not known in advance).\n   In the TCP\
    \ world, the analogue is a transition from LISTEN to\n   SYN_SENT by virtue of\
    \ sending data: \"A fully specified passive call\n   can be made active by the\
    \ subsequent execution of a SEND\" ([RFC0793],\n   Section 3.8).  Unlike TCP,\
    \ this update does not perform a role change\n   from passive to active.  Like\
    \ TCP, DCCP-Listen packets are only sent\n   by a DCCP-server when the endpoint\
    \ is fully specified (Section 2.2).\n"
- title: 3.3.  Repetition of DCCP-Listen Packets
  contents:
  - "3.3.  Repetition of DCCP-Listen Packets\n   Repetition is a necessary requirement\
    \ to increase robustness and the\n   chance of successful connection establishment\
    \ when a DCCP-Listen\n   packet is lost due to congestion, link loss, or some\
    \ other reason.\n   The decision to recommend a maximum number of 3 timeouts (2\
    \ repeated\n   copies of the original DCCP-Listen packet) results from the following\n\
    \   consideration: the repeated copies need to be spaced sufficiently far\n  \
    \ apart in time to avoid suffering from correlated loss.  The interval\n   of\
    \ 200ms was chosen to accommodate a wide range of wireless and wired\n   network\
    \ paths.\n   Another constraint is given by the retransmission interval for the\n\
    \   DCCP-Request ([RFC4340], Section 8.1.1).  To establish state,\n   intermediate\
    \ systems need to receive a (retransmitted) DCCP-Listen\n   packet before the\
    \ DCCP-Request times out (1 second).  With three\n   timeouts, each spaced 200\
    \ milliseconds apart, the overall time is\n   still below one second.  The sum\
    \ of 600 milliseconds is sufficiently\n   large to provide for longer one-way\
    \ delays, as is the case, e.g., on\n   some wireless links.\n   The rationale\
    \ behind transitioning to the LISTEN1 state after two\n   repetitions is that\
    \ other problems, independent of establishing\n   middlebox state, may occur (such\
    \ as delay or loss of the initial\n   DCCP-Request).  Any late or retransmitted\
    \ DCCP-Request packets will\n   then still reach the server, allowing connection\
    \ establishment to\n   successfully complete.\n"
- title: 4.  Security Considerations
  contents:
  - "4.  Security Considerations\n   General security considerations for DCCP are\
    \ described in [RFC4340].\n   Security considerations for Service Codes are further\
    \ described in\n   [RFC5595].\n   The method specified in this document generates\
    \ a DCCP-Listen packet\n   addressed to a specific DCCP client.  This exposes\
    \ the state of a\n   DCCP server that is in a passive listening state (i.e., waiting\
    \ to\n   accept a connection from a known client).\n   The exposed information\
    \ is not encrypted and therefore could be seen\n   on the network path to the\
    \ DCCP client.  An attacker on this return\n   path could observe a DCCP-Listen\
    \ packet and then exploit this by\n   spoofing a packet (e.g., DCCP-Request or\
    \ DCCP-Reset) with the IP\n   addresses, DCCP ports, and Service Code that correspond\
    \ to the values\n   to be used for the connection.  As in other on-path attacks,\
    \ this\n   could be used to inject data into a connection or to deny a\n   connection\
    \ request.  A similar on-path attack is also possible for\n   any DCCP connection,\
    \ once the session is initiated by the client\n   ([RFC4340], Section 18).\n \
    \  The DCCP-Listen packet is only sent in response to explicit, prior\n   out-of-band\
    \ signaling from a DCCP client to the DCCP server (e.g.,\n   SDP [RFC4566] information\
    \ communicated via the Session Initiation\n   Protocol [RFC3261]) and will normally\
    \ directly precede a DCCP-Request\n   sent by the client (which carries the same\
    \ information).\n   This update does not significantly increase the complexity\
    \ or\n   vulnerability of a DCCP implementation that conforms to [RFC4340].  A\n\
    \   DCCP server SHOULD therefore, by default, permit generation of DCCP-\n   Listen\
    \ packets.  A server that wishes to prevent disclosing this\n   information MAY\
    \ refrain from generating DCCP-Listen packets without\n   impacting subsequent\
    \ DCCP state transitions, but possibly inhibiting\n   middlebox traversal.\n \
    \  The DCCP base specification in RFC 4340 defines an Init Cookie\n   option,\
    \ which lets a DCCP server avoid having to hold any state until\n   the three-way,\
    \ connection-setup handshake has completed.  This\n   specification enables an\
    \ out-of-band mechanism that forces the server\n   to hold state for a connection\
    \ that has not yet been established.\n   This is a change in the security profile\
    \ of DCCP, although the impact\n   is expected to be minimal and depends on the\
    \ security features of the\n   out-of-band mechanism (SIP SDP is one such mechanism\
    \ that provides\n   sufficient security features).\n   The method creates a new\
    \ way for a client to set up a DCCP connection\n   to a server using out-of-band\
    \ data, transported over a signaling\n   connection.  If the signaling connection\
    \ is not encrypted, an\n   eavesdropper could see the client IP address and the\
    \ port for the to-\n   be-established DCCP connection, and generate a DCCP-Listen\
    \ packet\n   towards the client using its own server IP address and port.\n  \
    \ However, a client will only respond to a received DCCP-Listen packet\n   if\
    \ the server IP address and port match an existing DCCP connection\n   that is\
    \ in the REQUEST state (Section 2.3.2).  The method therefore\n   cannot be used\
    \ to redirect the connection to a different server IP\n   address.\n"
- title: 5.  IANA Considerations
  contents:
  - "5.  IANA Considerations\n   The IANA registered a new packet type, \"DCCP-Listen\"\
    , in the IANA\n   DCCP Packet Types Registry.  The decimal value 10 has been assigned\n\
    \   to this type.  This registry entry references this document.\n"
- title: 6.  Acknowledgements
  contents:
  - "6.  Acknowledgements\n   This update was originally co-authored by Dr. Gerrit\
    \ Renker,\n   University of Aberdeen, and the present author acknowledges his\n\
    \   insight in design of the protocol mechanism and in careful review of\n   the\
    \ early revisions of the document text.  Dan Wing assisted on\n   issues relating\
    \ to the use of NAT and NAPT.\n"
- title: 7.  References
  contents:
  - '7.  References

    '
- title: 7.1.  Normative References
  contents:
  - "7.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use in\
    \ RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119, March\
    \ 1997.\n   [RFC4340]  Kohler, E., Handley, M., and S. Floyd, \"Datagram\n   \
    \           Congestion Control Protocol (DCCP)\", RFC 4340, March 2006.\n   [RFC5595]\
    \  Fairhurst, G., \"The DCCP Service Code\", RFC 5595,\n              September\
    \ 2009.\n"
- title: 7.2.  Informative References
  contents:
  - "7.2.  Informative References\n   [Epp05]    Eppinger, J-L., \"TCP Connections\
    \ for P2P Apps: A Software\n              Approach to Solving the NAT Problem\"\
    , Carnegie Mellon\n              University/ISRI Technical Report CMU-ISRI-05-104,\n\
    \              January 2005.\n   [FSK05]    Ford, B., Srisuresh, P., and D. Kegel,\
    \ \"Peer-to-Peer\n              Communication Across Network Address Translators\"\
    ,\n              Proceedings of USENIX-05, pages 179-192, 2005.\n   [GF05]   \
    \  Guha, S. and P. Francis, \"Characterization and Measurement\n             \
    \ of TCP Traversal through NATs and Firewalls\", Proceedings\n              of\
    \ Internet Measurement Conference (IMC-05), pages 199-\n              211, 2005.\n\
    \   [GTF04]    Guha, S., Takeda, Y., and P. Francis, \"NUTSS: A SIP based\n  \
    \            approach to UDP and TCP connectivity\", Proceedings of\n        \
    \      SIGCOMM-04 Workshops, Portland, OR, pages 43-48, 2004.\n   [H.323]    ITU-T,\
    \ \"Packet-based Multimedia Communications Systems\",\n              Recommendation\
    \ H.323, July 2003.\n   [ICE]      Rosenberg, J., \"TCP Candidates with Interactive\n\
    \              Connectivity Establishment (ICE)\", Work in Progress,\n       \
    \       July 2008.\n   [NAT-APP]  Ford, B., \"Application Design Guidelines for\
    \ Traversal\n              through Network Address Translators\", Work in Progress,\n\
    \              March 2007.\n   [RFC0793]  Postel, J., \"Transmission Control Protocol\"\
    , STD 7,\n              RFC 793, September 1981.\n   [RFC2663]  Srisuresh, P.\
    \ and M. Holdrege, \"IP Network Address\n              Translator (NAT) Terminology\
    \ and Considerations\",\n              RFC 2663, August 1999.\n   [RFC3022]  Srisuresh,\
    \ P. and K. Egevang, \"Traditional IP Network\n              Address Translator\
    \ (Traditional NAT)\", RFC 3022,\n              January 2001.\n   [RFC3235]  Senie,\
    \ D., \"Network Address Translator (NAT)-Friendly\n              Application Design\
    \ Guidelines\", RFC 3235, January 2002.\n   [RFC3261]  Rosenberg, J., Schulzrinne,\
    \ H., Camarillo, G., Johnston,\n              A., Peterson, J., Sparks, R., Handley,\
    \ M., and E.\n              Schooler, \"SIP: Session Initiation Protocol\", RFC\
    \ 3261,\n              June 2002.\n   [RFC4566]  Handley, M., Jacobson, V., and\
    \ C. Perkins, \"SDP: Session\n              Description Protocol\", RFC 4566,\
    \ July 2006.\n   [RFC4787]  Audet, F. and C. Jennings, \"Network Address Translation\n\
    \              (NAT) Behavioral Requirements for Unicast UDP\", BCP 127,\n   \
    \           RFC 4787, January 2007.\n   [RFC5382]  Guha, S., Biswas, K., Ford,\
    \ B., Sivakumar, S., and P.\n              Srisuresh, \"NAT Behavioral Requirements\
    \ for TCP\", BCP 142,\n              RFC 5382, October 2008.\n   [RFC5597]  Denis-Courmont,\
    \ R., \"Network Address Translation (NAT)\n              Behavioral Requirements\
    \ for the Datagram Congestion\n              Control Protocol\", BCP 150, RFC\
    \ 5597, September 2009.\n   [STUN]     Rosenberg, J., Mahy, R., and P. Matthews,\
    \ \"Traversal Using\n              Relays around NAT (TURN): Relay Extensions\
    \ to Session\n              Traversal Utilities for NAT (STUN)\", Work in Progress,\n\
    \              June 2009.\n"
- title: Appendix A.  Discussion of Existing NAT Traversal Techniques
  contents:
  - "Appendix A.  Discussion of Existing NAT Traversal Techniques\n   This appendix\
    \ provides a brief review of existing techniques to\n   establish connectivity\
    \ across NAT devices, with the aim of providing\n   background information.  It\
    \ first considers TCP NAT traversal based\n   on simultaneous-open, and then discusses\
    \ a second technique based on\n   role reversal.  Further information can be found\
    \ in [GTF04] and\n   [GF05].\n   A central idea shared by these techniques is\
    \ to make peer-to-peer\n   sessions look like \"outbound\" sessions on each NAT\
    \ device.  Often a\n   rendezvous server, located in the public address realm,\
    \ is used to\n   enable clients to discover their NAT topology and the addresses\
    \ of\n   peers.\n   The term 'hole punching' was coined in [FSK05] and refers\
    \ to creating\n   soft state in a traditional NAT device by initiating an outbound\n\
    \   connection.  A well-behaved NAT can subsequently exploit this to\n   allow\
    \ a reverse connection back to the host in the private address\n   realm.\n  \
    \ UDP and TCP hole punching use nearly the same technique [RFC4787].\n   The adaptation\
    \ of the basic UDP hole punching principle to TCP NAT\n   traversal [RFC5382]\
    \ was introduced in Section 4 of [FSK05] and relies\n   on the simultaneous-open\
    \ feature of TCP [RFC0793].  A further\n   difference between UDP and TCP lies\
    \ in the way the clients perform\n   connectivity checks after obtaining suitable\
    \ address pairs for\n   connection establishment.  Whereas in UDP a single socket\
    \ is\n   sufficient, TCP clients require several sockets for the same address\n\
    \   and port tuple:\n   o  a passive socket to listen for connectivity tests from\
    \ peers, and\n   o  multiple active connections from the same address to test\n\
    \      reachability of other peers.\n   The SYN sent out by client A to its peer\
    \ B creates soft state in A's\n   NAT.  At the same time, B tries to connect to\
    \ A:\n   o  if the SYN from B has left B's NAT before the arrival of A's SYN,\n\
    \      both endpoints perform simultaneous-open (4-way handshake of SYN/\n   \
    \   SYNACK);\n   o  otherwise, A's SYN may not enter B's NAT, which leads to B\n\
    \      performing a normal open (SYN_SENT => ESTABLISHED) and A\n      performing\
    \ a simultaneous-open (SYN_SENT => SYN_RCVD =>\n      ESTABLISHED).\n   In the\
    \ latter case, it is necessary that the NAT does not interfere\n   with a RST\
    \ segment (REQ-4 in [RFC5382]).  The simultaneous-open\n   solution is convenient\
    \ due to its simplicity, and is thus a preferred\n   mode of operation in the\
    \ TCP extension for Interactive Connectivity\n   Establishment (ICE) ([ICE], Section\
    \ 2).\n"
- title: A.1.  NAT Traversal Based on a Simultaneous-Request
  contents:
  - "A.1.  NAT Traversal Based on a Simultaneous-Request\n   Among the various TCP\
    \ NAT traversal approaches, the one using a TCP\n   simultaneous-open suggests\
    \ itself as a candidate for DCCP due to its\n   simplicity ([GF05], [NAT-APP]).\n\
    \   A characteristic of TCP simultaneous-open is that this erases the\n   clear\
    \ distinction between client and server: both sides enter through\n   active (SYN_SENT)\
    \ as well as passive (SYN_RCVD) states.  This\n   characteristic conflicts with\
    \ the DCCP design decision to provide a\n   clear separation between client and\
    \ server functions ([RFC4340],\n   Section 4.6).\n   In DCCP, several mechanisms\
    \ implicitly rely on clearly defined\n   client/server roles:\n   o  Feature Negotiation:\
    \ with few exceptions, almost all of DCCP's\n      negotiable features use the\
    \ \"server-priority\" reconciliation rule\n      ([RFC4340], Section 6.3.1), whereby\
    \ a peer exchanges its\n      preference lists of feature values, and the server\
    \ decides the\n      outcome.\n   o  Closing States: only a server may generate\
    \ DCCP-CloseReq packets\n      (asking the peer to hold timewait state), while\
    \ a client is only\n      permitted to send DCCP-Close or DCCP-Reset packets to\
    \ terminate a\n      connection ([RFC4340], Section 8.3).\n   o  Service Codes\
    \ [RFC5595]: a server may be associated with multiple\n      Service Codes, while\
    \ a client must be associated with exactly one\n      ([RFC4340], Section 8.1.2).\n\
    \   o  Init Cookies: may only be used by a server and on DCCP-Response\n     \
    \ packets ([RFC4340], Section 8.1.4).\n   The latter two points are not obstacles\
    \ per se, but would have\n   hindered the transition from a passive to an active\
    \ socket.  In DCCP,\n   a DCCP-Request is only generated by a client.  The assumption\
    \ that\n   \"all DCCP hosts may be clients\" was dismissed, since it would require\n\
    \   undesirable changes to the state machine and would limit application\n   programming.\
    \  As a consequence, the retro-fitting of a TCP-style\n   simultaneous-open into\
    \ DCCP to allow simultaneous exchange of DCCP-\n   Connect packets was not recommended.\n"
- title: A.2.  Role Reversal
  contents:
  - "A.2.  Role Reversal\n   Another simple TCP NAT traversal scheme uses role traversal\
    \ ([Epp05],\n   [GTF04]), where a peer first opens an active connection for the\n\
    \   single purpose of punching a hole in the firewall, and then reverts\n   to\
    \ a listening socket, accepting connections that arrive via the new\n   path.\n\
    \   This solution would have had several disadvantages if used with DCCP.\n  \
    \ First, a DCCP server would be required to change its role to\n   temporarily\
    \ become a 'client'.  This would have required modification\n   to the state machine\
    \ -- in particular, the treatment of Service Codes\n   and perhaps Init Cookies.\
    \  Further, the method would have needed to\n   follow feature negotiation, since\
    \ an endpoint's choice of initial\n   options can rely on its role (i.e., an endpoint\
    \ that knows it is the\n   server can make a priori assumptions about the preference\
    \ lists of\n   features it is negotiating with the client, thereby enforcing a\n\
    \   particular policy).  Finally, the server would have needed additional\n  \
    \ processing to ensure that the connection arriving at the listening\n   socket\
    \ matches the previously opened active connection.\n   This approach was therefore\
    \ not recommend for DCCP.\n"
- title: Author's Address
  contents:
  - "Author's Address\n   Godred Fairhurst\n   University of Aberdeen\n   School of\
    \ Engineering\n   Fraser Noble Building\n   Aberdeen  AB24 3UE\n   Scotland\n\
    \   EMail: gorry@erg.abdn.ac.uk\n   URI:   http://www.erg.abdn.ac.uk\n"
