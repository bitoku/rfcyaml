- contents:
  - '      EAP Extensions for the EAP Re-authentication Protocol (ERP)

    '
  title: __initial_text__
- contents:
  - "Abstract\n   The Extensible Authentication Protocol (EAP) is a generic framework\n
    \  supporting multiple types of authentication methods.  In systems\n   where
    EAP is used for authentication, it is desirable to avoid\n   repeating the entire
    EAP exchange with another authenticator.  This\n   document specifies extensions
    to EAP and the EAP keying hierarchy to\n   support an EAP method-independent protocol
    for efficient re-\n   authentication between the peer and an EAP re-authentication
    server\n   through any authenticator.  The re-authentication server may be in\n
    \  the home network or in the local network to which the peer is\n   connecting.\n
    \  This memo obsoletes RFC 5296.\n"
  title: Abstract
- contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This
    document is a product of the Internet Engineering Task Force\n   (IETF).  It represents
    the consensus of the IETF community.  It has\n   received public review and has
    been approved for publication by the\n   Internet Engineering Steering Group (IESG).
    \ Further information on\n   Internet Standards is available in Section 2 of RFC
    5741.\n   Information about the current status of this document, any errata,\n
    \  and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc6696.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2012 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n
    \  (http://trustee.ietf.org/license-info) in effect on the date of\n   publication
    of this document.  Please review these documents\n   carefully, as they describe
    your rights and restrictions with respect\n   to this document.  Code Components
    extracted from this document must\n   include Simplified BSD License text as described
    in Section 4.e of\n   the Trust Legal Provisions and are provided without warranty
    as\n   described in the Simplified BSD License.\n"
  title: Copyright Notice
- contents:
  - "Table of Contents\n   1. Introduction ....................................................4\n
    \     1.1. Changes from RFC 5296 ......................................5\n   2.
    Terminology .....................................................5\n   3. ERP
    Description .................................................7\n      3.1. ERP
    with the Home ER Server ...............................10\n      3.2. ERP with
    a Local ER Server ................................11\n   4. ER Key Hierarchy ...............................................13\n
    \     4.1. rRK Derivation ............................................13\n      4.2.
    rRK Properties ............................................14\n      4.3. rIK
    Derivation ............................................14\n      4.4. rIK Properties
    ............................................15\n      4.5. rIK Usage .................................................16\n
    \     4.6. rMSK Derivation ...........................................16\n      4.7.
    rMSK Properties ...........................................17\n   5. Protocol
    Details ...............................................17\n      5.1. ERP Bootstrapping
    .........................................17\n      5.2. Steps in ERP ..............................................20\n
    \          5.2.1. Multiple Simultaneous Runs of ERP ..................23\n           5.2.2.
    ERP Failure Handling ...............................23\n      5.3. EAP Codes .................................................25\n
    \          5.3.1. EAP-Initiate/Re-auth-Start Packet ..................26\n                  5.3.1.1.
    Authenticator Operation ...................27\n                  5.3.1.2. Peer
    Operation ............................27\n           5.3.2. EAP-Initiate/Re-auth
    Packet ........................28\n           5.3.3. EAP-Finish/Re-auth Packet
    ..........................30\n           5.3.4. TV and TLV Attributes ..............................32\n
    \     5.4. Replay Protection .........................................33\n      5.5.
    Channel Binding ...........................................34\n   6. Lower-Layer
    Considerations .....................................35\n   7. AAA Transport of
    ERP Messages ..................................36\n   8. Security Considerations
    ........................................36\n   9. IANA Considerations ............................................41\n
    \  10. Contributors ..................................................41\n   11.
    Acknowledgments ...............................................42\n   12. References
    ....................................................42\n      12.1. Normative
    References .....................................42\n      12.2. Informative References
    ...................................42\n   Appendix A. RFC 5296 Acknowledgments
    ..............................45\n   Appendix B. Sample ERP Exchange ...................................46\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   The Extensible Authentication Protocol (EAP) is an authentication\n
    \  framework that supports multiple authentication methods.  The primary\n   purpose
    is network access authentication, and a key-generating method\n   is used when
    the lower layer wants to enforce access control.  The\n   EAP keying hierarchy
    defines two keys to be derived by all\n   key-generating EAP methods: the Master
    Session Key (MSK) and the\n   Extended MSK (EMSK).  In the most common deployment
    scenario, an EAP\n   peer and an EAP server authenticate each other through a
    third party\n   known as the EAP authenticator.  The EAP authenticator or an entity\n
    \  controlled by the EAP authenticator enforces access control.  After\n   successful
    authentication, the EAP server transports the MSK to the\n   EAP authenticator;
    the EAP authenticator and the EAP peer establish\n   Transient Session Keys (TSKs)
    using the MSK as the authentication\n   key, key derivation key, or a key transport
    key, and use the TSK for\n   per-packet access enforcement.\n   When a peer moves
    from one authenticator to another, it is desirable\n   to avoid a full EAP authentication
    to support fast handovers.  The\n   full EAP exchange with another run of the
    EAP method can take several\n   round trips and significant time to complete,
    causing increased\n   handover times.  Some EAP methods specify the use of state
    from the\n   initial authentication to optimize re-authentications by reducing
    the\n   computational overhead (e.g., EAP Authentication and Key Agreement\n   (EAP-AKA)
    [RFC4187]), but method-specific re-authentication takes at\n   least 2 round trips
    with the original EAP server in most cases.  It\n   is also important to note
    that several methods do not offer support\n   for re-authentication.\n   Key sharing
    across authenticators is sometimes used as a practical\n   solution to lower handover
    times.  In that case, however, the\n   compromise of one authenticator results
    in the compromise of key\n   material established via other authenticators.  Other
    solutions for\n   fast re-authentication exist in the literature: for example,
    see\n   Lopez, et al. [MSKHierarchy]; Clancy, et al. have described the EAP\n
    \  re-authentication problem statement in detail [RFC5169].\n   In conclusion,
    to achieve low latency handovers, there is a need for\n   a method-independent
    re-authentication protocol that completes in\n   less than 2 round trips, preferably
    with a local server.\n   This document specifies EAP Re-authentication Extensions
    (ERXs) for\n   efficient re-authentication using EAP.  The protocol that uses
    these\n   extensions is itself referred to as the EAP Re-authentication\n   Protocol
    (ERP).  It supports EAP method-independent re-authentication\n   for a peer that
    has valid, unexpired key material from a previously\n   performed EAP authentication.
    \ The protocol and the key hierarchy\n   required for EAP re-authentication are
    described in this document.\n   Note that to support ERP, lower-layer specifications
    may need to be\n   revised to allow carrying EAP messages that have a code value
    higher\n   than 4 and to accommodate the peer-initiated nature of ERP.\n   Specifically,
    the Internet Key Exchange (IKE) protocol [RFC5996] must\n   be updated to carry
    ERP messages; work is in progress on this project\n   [IKE-EXT-for-ERP].\n"
  - contents:
    - "1.1.  Changes from RFC 5296\n   This document obsoletes RFC 5296 but is fully
      backward compatible\n   with that document.  The changes introduced in this
      document focus on\n   fixing issues that have surfaced since the publication
      of the\n   original ERP specification [RFC5296].  An overview of some of the\n
      \  major changes is given below.\n   o  Co-location of the home EAP Re-authentication
      (ER) and EAP servers\n      is no longer required (see the \"ER Server\" entry
      in Section 2).\n   o  The behavior of the authenticator and local ER server
      during the\n      bootstrapping process has been clarified (Section 5.1); in\n
      \     particular, the authenticator and/or local ER server is now\n      required
      to check for current possession of the root keys.\n   o  The authenticator is
      now recommended, rather than just allowed, to\n      initiate the ERP conversation
      by means of the EAP-Initiate/\n      Re-auth-Start message (Section 5.3.1.1).\n
      \  In addition, many editorial changes have been made to improve the\n   clarity
      of the document and to eliminate perceived ambiguities.  A\n   comprehensive
      list of changes is not given here for practical\n   reasons.\n"
    title: 1.1.  Changes from RFC 5296
  title: 1.  Introduction
- contents:
  - "2.  Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\",
    \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\"
    in this\n   document are to be interpreted as described in RFC 2119 [RFC2119].\n
    \  This document uses the basic EAP terminology [RFC3748] and EMSK\n   keying
    hierarchy terminology [RFC5295].  In addition, this document\n   uses the following
    terms:\n   ER Peer -  An EAP peer that supports the EAP Re-authentication\n      Protocol.
    \ All references to \"peer\" in this document imply an ER\n      peer, unless
    specifically noted otherwise.\n   ER Authenticator -  An entity that supports
    the authenticator\n      functionality for EAP re-authentication described in
    this\n      document.  All references to \"authenticator\" in this document\n
    \     imply an ER authenticator, unless specifically noted otherwise.\n   ER Server
    -  An entity that performs the server portion of ERP\n      described here.  This
    entity may or may not be an EAP server.  All\n      references to \"server\" in
    this document imply an ER server, unless\n      specifically noted otherwise.
    \ An ER server is a logical entity;\n      it may not necessarily be co-located
    with, or physically part of,\n      a full EAP server.\n   ERX -  EAP re-authentication
    extensions.\n   ERP -  EAP Re-authentication Protocol.  Uses the re-authentication\n
    \     extensions.\n   rRK -  re-authentication Root Key, derived from the EMSK
    or the\n      Domain-Specific Root Key (DSRK).\n   rIK -  re-authentication Integrity
    Key, derived from the rRK.\n   rMSK -  re-authentication MSK.  This is a per-authenticator
    key,\n      derived from the rRK.\n   keyName-NAI -  ERP messages are integrity
    protected with the rIK or\n      the DS-rIK.  The use of rIK or DS-rIK for integrity
    protection of\n      ERP messages is indicated by the EMSKname [RFC5295]; the
    protocol,\n      which is ERP; and the realm, which indicates the domain name
    of\n      the ER server.  The EMSKname is copied into the username part of\n      the
    Network Access Identifier (NAI).\n   Domain -  Refers to a \"key management domain\"
    as defined in Salowey,\n      et al. [RFC5295].  For simplicity, it is referred
    to as \"domain\"\n      in this document.  The terms \"home domain\" and \"local
    domain\" are\n      used to differentiate between the originating key management\n
    \     domain that performs the full EAP exchange with the peer and the\n      local
    domain to which a peer may be attached at a given time.\n"
  title: 2.  Terminology
- contents:
  - "3.  ERP Description\n   ERP allows a peer and server to mutually verify proof
    of possession\n   of key material from an earlier EAP method run and to establish
    a\n   security association between the peer and the authenticator.  The\n   authenticator
    acts as a pass-through entity for the re-authentication\n   protocol in a manner
    similar to that of an EAP authenticator as\n   described in Aboba, et al. [RFC3748].
    \ ERP is a single round-trip\n   exchange between the peer and the server; it
    is independent of the\n   lower layer and the EAP method used during the full
    EAP exchange.\n   The ER server may be in the home domain or in the same (visited)\n
    \  domain as the peer and the authenticator (i.e., the local domain).\n   Figure
    1 shows the protocol exchange.  The first time the peer\n   attaches to any network,
    it performs a full EAP exchange (shown in\n   Figure 2) with the EAP server; as
    a result, an MSK is distributed to\n   the EAP authenticator.  The MSK is then
    used by the authenticator and\n   the peer to establish TSKs as needed.  At the
    time of the initial EAP\n   exchange, the peer and the server also derive an EMSK,
    which is used\n   to derive an rRK.  More precisely, an rRK is derived from the
    EMSK or\n   from a DSRK, which is itself derived from the EMSK.  The rRK is only\n
    \  available to the peer and the ER server and is never handed out to\n   any
    other entity.  Further, an rIK is derived from the rRK; the peer\n   and the ER
    server use the rIK to provide proof of possession while\n   performing an ERP
    exchange.  The rIK is also never handed out to any\n   entity and is only available
    to the peer and server.\n   Peer             ER Authenticator                   ER
    Server\n   ====             ================                   =========\n     <--
    EAP-Initiate/ -----\n        Re-auth-Start\n    [<-- EAP-Request/ ------\n        Identity]\n
    \   ---- EAP-Initiate/ ----> ----AAA(EAP-Initiate/ ---------->\n          Re-auth/
    \                 Re-auth/\n         [Bootstrap]              [Bootstrap])\n    <---
    EAP-Finish/ ------> <---AAA(rMSK,EAP-Finish/---------\n          Re-auth/                   Re-auth/\n
    \       [Bootstrap]                [Bootstrap])\n   Note: [] brackets indicate
    optionality.\n                          Figure 1: ERP Exchange\n   EAP Peer           EAP
    Authenticator                 EAP Server\n   ========           =================
    \                ==========\n    <--- EAP-Request/ ------\n            Identity\n
    \   ----- EAP Response/ --->\n            Identity          ---AAA(EAP Response/Identity)-->\n
    \   <--- EAP Method ------->  <------ AAA(EAP Method -------->\n           exchange
    \                   exchange)\n                              <----AAA(MSK, EAP-Success)------\n
    \   <---EAP-Success---------\n                       Figure 2: EAP Authentication\n
    \  Two EAP codes -- EAP-Initiate and EAP-Finish -- are specified in this\n   document
    for the purpose of EAP re-authentication.  When the peer\n   identifies a target
    authenticator that supports EAP\n   re-authentication, it performs an ERP exchange,
    as shown in Figure 1;\n   the exchange itself may happen when the peer attaches
    to a new\n   authenticator supporting EAP re-authentication, or prior to\n   attachment.
    \ The peer initiates ERP by itself; it may also do so in\n   response to an EAP-Initiate/Re-auth-Start
    message from the new\n   authenticator.  The EAP-Initiate/Re-auth-Start message
    allows the\n   authenticator to trigger the ERP exchange.  The EAP-Finish message\n
    \  also can be used by the authenticator to announce the local domain\n   name.\n
    \  It is plausible that the authenticator does not know whether the peer\n   supports
    ERP and whether the peer has performed a full EAP\n   authentication through another
    authenticator.  The authenticator MAY\n   initiate the ERP exchange by sending
    the EAP-Initiate/Re-auth-Start\n   message and if there is no response MAY send
    the EAP-Request/Identity\n   message.  Note that this avoids having two EAP messages
    in flight at\n   the same time [RFC3748].  The authenticator may send the\n   EAP-Initiate/Re-auth-Start
    message and wait for a short, locally\n   configured amount of time.  This message
    indicates to the peer that\n   the authenticator supports ERP.  In response to
    this trigger from the\n   authenticator, the peer can initiate the ERP exchange
    by sending an\n   EAP-Initiate/Re-auth message.  If there is no response from
    the peer\n   after the necessary number of retransmissions (see Section 6), the\n
    \  authenticator MUST initiate EAP by sending an EAP-Request message,\n   typically
    the EAP-Request/Identity message.  Note that the\n   authenticator may receive
    an EAP-Initiate/Re-auth message after it\n   has sent an EAP-Request/Identity
    message.  If the authenticator\n   supports ERP, it MUST proceed with the ERP
    exchange.  When the\n   EAP-Request/Identity times out, the authenticator MUST
    NOT close the\n   connection if an ERP exchange is in progress or has already
    succeeded\n   in establishing a re-authentication MSK.\n   If the authenticator
    does not support ERP, it will silently discard\n   EAP-Initiate/Re-auth messages
    (Section 5.3.2), since the EAP code of\n   those packets is greater than 4 ([RFC3748],
    Section 4).  An ERP-\n   capable peer will exhaust the EAP-Initiate/Re-auth message\n
    \  retransmissions and fall back to EAP authentication by responding to\n   EAP-Request/Identity
    messages from the authenticator.  If the peer\n   does not support ERP or if it
    does not have unexpired key material\n   from a previous EAP authentication, it
    drops EAP-Initiate/\n   Re-auth-Start messages.  If there is no response to the
    EAP-Initiate/\n   Re-auth-Start message, the authenticator SHALL send an EAP-Request\n
    \  message (typically EAP-Request/Identity) to start EAP authentication.\n   From
    this point onward, RFC 3748 rules apply.  Note that this may\n   introduce some
    delay in starting EAP.  In some lower layers, the\n   delay can be minimized or
    even avoided by the peer initiating EAP by\n   sending messages such as EAPoL-Start
    [IEEE_802.1X].\n   The peer sends an EAP-Initiate/Re-auth message that contains
    the\n   keyName-NAI to identify the ER server's domain and the rIK used to\n   protect
    the message, and a sequence number for replay protection.\n   The EAP-Initiate/Re-auth
    message is integrity protected with the rIK.\n   The authenticator uses the realm
    in the keyName-NAI field to send the\n   message to the appropriate ER server.
    \ The server uses the keyName to\n   look up the rIK.  The server, after verifying
    proof of possession of\n   the rIK and freshness of the message, derives an rMSK
    from the rRK\n   using the sequence number as an input to the key derivation.
    \ The\n   server then updates the expected sequence number to the received\n   sequence
    number plus one.\n   In response to the EAP-Initiate/Re-auth message, the server
    sends an\n   EAP-Finish/Re-auth message; this message is integrity protected with\n
    \  the rIK.  The server transports the rMSK along with this message to\n   the
    authenticator.  The rMSK is transported in a manner similar to\n   that of the
    MSK along with the EAP-Success message in a full EAP\n   exchange.  Hoeper, et
    al. [RFC5749] discuss an additional key\n   distribution protocol that can be
    used to transport the rRK from an\n   EAP server to one of many different ER servers
    that share a trust\n   relationship with the EAP server.\n   The peer MAY request
    the rMSK lifetime from the server.  If so, the\n   ER server sends the rMSK lifetime
    in the EAP-Finish/Re-auth message.\n   In an ERP bootstrap exchange, the peer
    MAY ask the server for the rRK\n   lifetime.  If so, the ER server sends the rRK
    lifetime in the\n   EAP-Finish/Re-auth message.\n   The peer verifies the sequence
    number and the integrity of the\n   message.  It then uses the sequence number
    in the EAP-Finish/Re-auth\n   message to compute the rMSK.  The lower-layer security
    association\n   protocol is ready to be triggered after this point.\n   The ER
    server is located either in the home domain or in the visited\n   domain.  When
    the ER server is in the home domain and there is no\n   local ER server in the
    visited domain, the peer and the server use\n   the rIK and rRK derived from the
    EMSK; and when the ER server is in\n   the local domain, they use the DS-rIK and
    DS-rRK corresponding to the\n   local domain.  The domain of the ER server is
    identified by the realm\n   portion of the keyName-NAI in ERP messages.\n"
  - contents:
    - "3.1.  ERP with the Home ER Server\n   If the peer is in the home domain or
      there is no local server in the\n   same domain as the peer, it SHOULD initiate
      an ERP bootstrap exchange\n   with the home ER server to obtain the domain name.\n
      \  The defined ER extensions allow executing ERP with an ER server in\n   the
      home domain.  The home ER server may be co-located with a home\n   Authentication,
      Authorization, and Accounting (AAA) server.  ERP with\n   the home ER server
      is similar to the ERP exchange described in\n   Figure 1.\n   Peer             ER
      Authenticator                   Home ER Server\n   ====             ================
      \                  ==============\n     <-- EAP-Initiate/ -----\n        Re-auth-Start\n
      \   [<-- EAP-Request/ ------\n        Identity]\n    ---- EAP-Initiate/ ---->
      ----AAA(EAP-Initiate/ ---------->\n          Re-auth/                  Re-auth/\n
      \         Bootstrap                Bootstrap)\n    <--- EAP-Finish/ ------>
      <---AAA(rMSK,EAP-Finish/---------\n          Re-auth/                   Re-auth/\n
      \        Bootstrap                  Bootstrap)\n             Figure 3: ER Explicit
      Bootstrapping Exchange/ERP\n                          with the Home ER Server\n"
    title: 3.1.  ERP with the Home ER Server
  - contents:
    - "3.2.  ERP with a Local ER Server\n   The defined ER extensions allow the execution
      of ERP with an ER\n   server in the local domain (access network) if the peer
      moves out of\n   the home domain and a local ER server is present in the visited\n
      \  domain.  The local ER server may be co-located with a local AAA\n   server.
      \ The peer may learn about the presence of a local ER server\n   in the network
      and the local domain name (or ER server name) either\n   via a lower-layer advertisement
      or by means of an ERP exchange.  The\n   peer uses the domain name and the EMSK
      to compute the DSRK and, from\n   that key, the DS-rRK; the peer also uses the
      domain name in the realm\n   portion of the keyName-NAI for using ERP in the
      local domain.\n   Figure 4 shows the ER implicit bootstrapping exchange through
      a local\n   ER server; Figure 5 shows ERP with a local ER server.\n               EAP
      Authenticator     Local AAA Agent\n   Peer         /ER Authenticator    /Local
      ER Server    Home EAP Server\n   ====        ==================    ================
      \   ===============\n   <-- EAP-Request/ --\n        Identity\n   -- EAP Response/-->\n
      \       Identity      --AAA(EAP Response/-->\n                            Identity,
      \      --AAA(EAP Response/ -->\n                        [domain name])             Identity,\n
      \                                               [DSRK Request,\n                                              domain
      name])\n   <------------------------ EAP Method exchange------------------>\n
      \                                           <---AAA(MSK, DSRK, ----\n                                                   EMSKname,\n
      \                                                EAP-Success)\n                       <---
      \ AAA(MSK,  -----\n                            EAP-Success)\n   <---EAP-Success-----\n
      \   Figure 4: Implicit Bootstrapping ERP Exchange, Initial EAP Exchange\n   Peer
      \               ER Authenticator            Local ER Server\n   ====                ================
      \           ===============\n    <-- EAP-Initiate/ --------\n        Re-auth-Start\n
      \  [<-- EAP-Request/ ---------\n        Identity]\n    ---- EAP-Initiate/ ------->
      ----AAA(EAP-Initiate/ -------->\n          Re-auth                        Re-auth)\n
      \   <--- EAP-Finish/ ---------- <---AAA(rMSK,EAP-Finish/-------\n          Re-auth
      \                       Re-auth)\n                       Figure 5: Local ERP
      Exchange\n   As shown in Figure 4, the local ER server may be present in the
      path\n   of the full EAP exchange (e.g., this may be one of the AAA entities,\n
      \  such as AAA proxies, in the path between the EAP authenticator and\n   the
      home EAP server of the peer).  In that case, the local ER server\n   requests
      the DSRK by sending the domain name to the home EAP server\n   by means of a
      AAA message.  In response, the home EAP server computes\n   the DSRK by following
      the procedure specified in RFC 5295 and sends\n   the DSRK and the key name,
      EMSKname, to the ER server in the claimed\n   domain (i.e., the local ER server).
      \ The local domain is responsible\n   for announcing that same domain name to
      the peer via a lower layer\n   (for example, through DHCP-based local domain
      name discovery\n   [RFC6440] or through the EAP-Initiate/Re-auth-Start message
      with the\n   local ER server).\n   After receiving the DSRK and the EMSKname,
      the local ER server\n   computes the DS-rRK and the DS-rIK from the DSRK as
      defined in\n   Sections 4.1 and 4.3 below.  After receiving the domain name,
      the\n   peer also derives the DSRK, the DS-rRK, and the DS-rIK.  These keys\n
      \  are referred to by a keyName-NAI formed as follows: the username part\n   of
      the NAI is the EMSKname, and the realm portion of the NAI is the\n   domain
      name.  Both parties also maintain a sequence number\n   (initialized to zero)
      corresponding to the specific keyName-NAI.\n   If the peer subsequently attaches
      to an authenticator within the\n   local domain, it may perform an ERP exchange
      with the local ER server\n   to obtain an rMSK for the new authenticator.  ERP
      with the local ER\n   server is similar to the ERP exchange illustrated in Figure
      1.\n"
    title: 3.2.  ERP with a Local ER Server
  title: 3.  ERP Description
- contents:
  - "4.  ER Key Hierarchy\n   Each time the peer re-authenticates to the network,
    the peer and the\n   authenticator establish an rMSK.  The rMSK serves the same
    purposes\n   that an MSK, which is the result of full EAP authentication, serves.\n
    \  To prove possession of the rRK, we specify the derivation of another\n   key,
    the rIK.  These keys are derived from the rRK.  Together they\n   constitute the
    ER key hierarchy.\n   The rRK is derived from either the EMSK or a DSRK as specified
    in\n   Section 4.1.  For the purpose of rRK derivation, this document\n   specifies
    derivation of a Usage-Specific Root Key (USRK) or a Domain-\n   Specific USRK
    (DSUSRK) [RFC5295] for re-authentication.  The USRK\n   designated for re-authentication
    is the rRK.  A DSUSRK designated for\n   re-authentication is the DS-rRK available
    to a local ER server in a\n   particular domain.  For simplicity, the keys are
    referred to without\n   the DS label in the rest of the document.  However, the
    scope of the\n   various keys is limited to just the respective domains for which
    they\n   are derived, in the case of the domain-specific keys.  Based on the\n
    \  ER server with which the peer performs the ERP exchange, it knows the\n   corresponding
    keys that must be used.\n   The rRK is used to derive an rIK and rMSKs for one
    or more\n   authenticators.  The figure below shows the key hierarchy with the\n
    \  rRK, rIK, and rMSKs.\n                            rRK\n                             |\n
    \                   +--------+--------+\n                    |        |        |\n
    \                  rIK     rMSK1 ...rMSKn\n                 Figure 6: Re-authentication
    Key Hierarchy\n   The derivations in this document are from RFC 5295.  Key derivations\n
    \  and field encodings, where unspecified, default to that document.\n"
  - contents:
    - "4.1.  rRK Derivation\n   The rRK may be derived from the EMSK or DSRK.  This
      section provides\n   the relevant key derivations for that purpose.\n   The
      rRK is derived as specified in RFC 5295.\n   rRK = KDF (K, S), where\n      K
      = EMSK or K = DSRK and\n      S = rRK Label | \"\\0\" | length\n   The rRK Label
      is an IANA-assigned 8-bit ASCII string:\n      EAP Re-authentication Root Key@ietf.org\n
      \  assigned from the \"USRK Key Labels\" name space in accordance with the\n
      \  policy stated in RFC 5295.\n   The Key Derivation Function (KDF) and algorithm
      agility for the KDF\n   are as defined in RFC 5295.\n   An rRK derived from
      the DSRK is referred to as a DS-rRK in the rest\n   of the document.  All of
      the key derivation and properties specified\n   in this section remain the same.\n"
    title: 4.1.  rRK Derivation
  - contents:
    - "4.2.  rRK Properties\n   The rRK has the following properties.  These properties
      apply to the\n   rRK regardless of the parent key used to derive it.\n   o  The
      length of the rRK MUST be equal to the length of the parent\n      key used
      to derive it.\n   o  The rRK is to be used only as a root key for re-authentication
      and\n      never used to directly protect any data.\n   o  The rRK is only used
      for the derivation of the rIK and rMSK as\n      specified in this document.\n
      \  o  The rRK MUST remain on the peer and the server that derived it and\n      MUST
      NOT be transported to any other entity.\n   o  The lifetime of the rRK is never
      greater than that of its parent\n      key.  The rRK is expired when the parent
      key expires and MUST be\n      removed from use at that time.\n"
    title: 4.2.  rRK Properties
  - contents:
    - "4.3.  rIK Derivation\n   The rIK is used for integrity protecting the ERP exchange.
      \ This\n   serves as the proof of possession of valid key material from a\n
      \  previous full EAP exchange by the peer to the server.\n   The rIK is derived
      as follows:\n   rIK = KDF (K, S), where\n      K = rRK and\n      S = rIK Label
      | \"\\0\" | cryptosuite | length\n   The rIK Label is the 8-bit ASCII string:\n
      \     Re-authentication Integrity Key@ietf.org\n   The length field refers to
      the length of the rIK in octets and is\n   encoded as specified in RFC 5295.\n
      \  The cryptosuite and length of the rIK are part of the input to the\n   KDF
      to ensure cryptographic separation of keys if different rIKs of\n   different
      lengths (for example, for use with different Message\n   Authentication Code
      (MAC) algorithms) are derived from the same rRK.\n   The cryptosuite is encoded
      as an 8-bit number; see Section 5.3.2 for\n   the cryptosuite specification.\n
      \  The rIK is referred to by the EMSKname-NAI within the context of ERP\n   messages.
      \ The username part of the EMSKname-NAI is the EMSKname; the\n   realm is the
      domain name of the ER server.  In the case of ERP with\n   the home ER server,
      the peer uses the realm from its original NAI; in\n   the case of a local ER
      server, the peer uses the domain name received\n   at the lower layer or through
      an ERP bootstrapping exchange.\n   An rIK derived from a DS-rRK is referred
      to as a DS-rIK in the rest\n   of the document.  All of the key derivation and
      properties specified\n   in this section remain the same.\n"
    title: 4.3.  rIK Derivation
  - contents:
    - "4.4.  rIK Properties\n   The rIK has the following properties:\n   o  The length
      of the rIK MUST be equal to the length of the rRK.\n   o  The rIK is only used
      for authentication of the ERP exchange as\n      specified in this document.\n
      \  o  The rIK MUST NOT be used to derive any other keys.\n   o  The rIK must
      remain on the peer and the server and MUST NOT be\n      transported to any
      other entity.\n   o  The rIK is cryptographically separate from any other keys
      derived\n      from the rRK.\n   o  The lifetime of the rIK is never greater
      than that of its parent\n      key.  The rIK MUST be expired when the EMSK expires
      and MUST be\n      removed from use at that time.\n"
    title: 4.4.  rIK Properties
  - contents:
    - "4.5.  rIK Usage\n   The rIK is the key the possession of which is demonstrated
      by the\n   peer and the ERP server to the other party.  The peer demonstrates\n
      \  possession of the rIK by computing the integrity checksum over the\n   EAP-Initiate/Re-auth
      message.  When the peer uses the rIK for the\n   first time, it can choose the
      integrity algorithm to use with the\n   rIK.  The peer and the server MUST use
      the same integrity algorithm\n   with a given rIK for all ERP messages protected
      with that key.  The\n   peer and the server store the algorithm information
      after the first\n   use, and they employ the same algorithm for all subsequent
      uses of\n   that rIK.\n   If the server's policy does not allow the use of the
      cryptosuite\n   selected by the peer, the server SHALL reject the EAP-Initiate/\n
      \  Re-auth message and SHOULD send a list of acceptable cryptosuites in\n   the
      EAP-Finish/Re-auth message.\n   The rIK length may be different from the key
      length required by an\n   integrity algorithm.  In the case of hash-based MAC
      algorithms, the\n   key is first hashed to the required key length using the
      HMAC\n   algorithm [RFC2104].  In the case of cipher-based MAC algorithms, if\n
      \  the required key length is less than 32 octets, the rIK is hashed\n   using
      HMAC-SHA256 and the first k octets of the output are used,\n   where k is the
      key length required by the algorithm.  If the required\n   key length is more
      than 32 octets, the first k octets of the rIK are\n   used by the cipher-based
      MAC algorithm.\n"
    title: 4.5.  rIK Usage
  - contents:
    - "4.6.  rMSK Derivation\n   The rMSK is derived at the peer and server and delivered
      to the\n   authenticator.  The rMSK is derived following an ERP exchange.\n
      \  The rMSK is derived as follows:\n   rMSK = KDF (K, S), where\n      K = rRK
      and\n      S = rMSK Label | \"\\0\" | SEQ | length\n   The rMSK Label is the
      8-bit ASCII string:\n      Re-authentication Master Session Key@ietf.org\n   The
      length field refers to the length of the rMSK in octets and is\n   encoded as
      specified in RFC 5295.\n   SEQ is the sequence number sent by the peer in the
      EAP-Initiate/\n   Re-auth message.  This field is encoded as a 16-bit number
      in network\n   byte order (see Section 5.3.2).\n   An rMSK derived from a DS-rRK
      is referred to as a DS-rIK in the rest\n   of the document.  The key derivation
      and properties specified in this\n   section remain the same.\n"
    title: 4.6.  rMSK Derivation
  - contents:
    - "4.7.  rMSK Properties\n   The rMSK has the following properties:\n   o  The
      length of the rMSK MUST be equal to the length of the rRK.\n   o  The rMSK is
      delivered to the authenticator and is used for the\n      same purposes that
      an MSK serves when the MSK is used at an\n      authenticator.\n   o  The rMSK
      is cryptographically separate from any other keys derived\n      from the rRK.\n
      \  o  The lifetime of the rMSK is less than or equal to that of the rRK.\n      It
      MUST NOT be greater than the lifetime of the rRK.\n   o  If a new rRK is derived,
      subsequent rMSKs MUST be derived from the\n      new rRK.  Previously delivered
      rMSKs MAY still be used until the\n      expiry of the lifetime.\n   o  A given
      rMSK MUST NOT be shared by multiple authenticators.\n"
    title: 4.7.  rMSK Properties
  title: 4.  ER Key Hierarchy
- contents:
  - '5.  Protocol Details

    '
  - contents:
    - "5.1.  ERP Bootstrapping\n   We identify two types of bootstrapping for ERP:
      explicit and\n   implicit.  In implicit bootstrapping, the ER-capable authenticator
      or\n   local ER server MUST verify whether it has a valid rMSK or rRK\n   corresponding
      to the peer.  If the ER-capable authenticator or the\n   local ER server has
      the key material corresponding to the peer, it\n   MUST be able to respond directly
      in the same way as the home AAA\n   server does without forwarding the DSRK
      Request to the home domain;\n   if not, the ER-capable authenticator or local
      ER server SHOULD\n   include its domain name in the AAA message encapsulating
      the first\n   EAP Response message sent by the peer and request the DSRK from
      the\n   home EAP server during the initial EAP exchange.  If such an EAP\n   exchange
      is successful, the home EAP server sends the DSRK for the\n   specified local
      AAA client or agent (derived using the EMSK and the\n   domain name as specified
      in RFC 5295), EMSKname, and DSRK lifetime\n   along with the EAP-Success message.
      \ The local AAA client or agent\n   MUST extract the DSRK, EMSKname, and DSRK
      lifetime (if present)\n   before forwarding the EAP-Success message to the peer.
      \ Note that the\n   MSK (also present with the EAP-Success message) is extracted
      by the\n   EAP authenticator as usual.  The peer learns the domain name through\n
      \  the EAP-Initiate/Re-auth-Start message or by means of a lower-layer\n   announcement
      (for example, DHCP [RFC6440]).  When the domain name is\n   available to the
      peer during or after the full EAP authentication, it\n   attempts to use ERP
      when it associates with a new authenticator.\n   If the peer knows there is
      no local ER server present in the visited\n   domain, it SHOULD initiate ERP
      explicit bootstrapping (ERP exchange\n   with the bootstrap flag turned on)
      with the home ER server to obtain\n   the rRK.  The peer MAY also initiate bootstrapping
      to fetch\n   information such as the rRK lifetime from the AAA server.\n   The
      following steps describe the ERP explicit bootstrapping process:\n   o  The
      peer sends the EAP-Initiate/Re-auth message with the\n      bootstrapping flag
      set (1).  The bootstrap message is always sent\n      to the home ER server,
      and the keyName-NAI attribute in the\n      bootstrap message is constructed
      as follows: the username portion\n      of the NAI contains the EMSKname, and
      the realm portion contains\n      the home domain name.\n   o  In addition,
      the message MUST contain a sequence number for replay\n      protection, a cryptosuite,
      and an integrity checksum.  The\n      cryptosuite indicates the authentication
      algorithm.  The integrity\n      checksum indicates that the message originated
      at the claimed\n      entity, the peer indicated by the Peer-ID, or the rIKname.\n
      \  o  The peer MAY additionally set the lifetime flag to request the key\n      lifetimes.\n
      \  o  Upon receipt of the EAP-Initiate/Re-auth message from a peer, the\n      ERP-capable
      authenticator verifies whether it has the local domain\n      name and valid
      key material corresponding to the peer.  If it\n      knows the local domain
      name and has valid key material\n      corresponding to the peer, it MUST be
      able to respond directly in\n      the same way as the home ER does, with the
      local domain name\n      included.  If not, it copies the contents of the keyName-NAI
      into\n      the appropriate AAA attribute and may include its domain name in\n
      \     the AAA message encapsulating the EAP-Initiate/Re-auth message\n      sent
      by the peer.\n   o  Upon receipt of an EAP-Initiate/Re-auth message, the home
      ER\n      server verifies whether the message is fresh or is a replay by\n      evaluating
      whether the received sequence number is equal to or\n      greater than the
      expected sequence number for that rIK.  The home\n      ER server then verifies
      that the cryptosuite used by the peer is\n      acceptable.  Next, it verifies
      the integrity of the message by\n      looking up the rIK and checking the integrity
      checksum contained\n      in the Authentication Tag field.  If any of the checks
      fail, the\n      home ER server sends an EAP-Finish/Re-auth message with the
      Result\n      flag set to '1'.  Please refer to Section 5.2.2 for details on\n
      \     failure handling.  This error MUST NOT have any correlation to any\n      EAP-Success
      message that may have been received by the EAP\n      authenticator and the
      peer earlier.  If the EAP-Initiate/Re-auth\n      message is well formed and
      valid, the server prepares the\n      EAP-Finish/Re-auth message.  The bootstrap
      flag MUST be set to\n      indicate that this is a bootstrapping exchange.  The
      message\n      contains the following fields:\n      *  A sequence number for
      replay protection.\n      *  The same keyName-NAI as in the EAP-Initiate/Re-auth
      message.\n      *  If the lifetime flag was set in the EAP-Initiate/Re-auth\n
      \        message, the ER server SHOULD include the rRK lifetime and the\n         rMSK
      lifetime in the EAP-Finish/Re-auth message.  The server\n         may have a
      local policy for the network to maintain and enforce\n         lifetime unilaterally.
      \ In such cases, the server need not\n         respond to the peer's request
      for the lifetime.\n      *  If the bootstrap flag is set, the ER server MUST
      include the\n         domain name to which the DSRK is being sent along with
      the\n         EAP-Finish/Re-auth message.\n      *  If the ER server verifies
      the authorization of a local ER\n         server, it MAY include the Authorization
      Indication TLV to\n         indicate to the peer that the server that received
      the DSRK and\n         that is advertising the domain included in the Domain
      name TLV\n         is authorized.\n      *  An authentication tag MUST be included
      to prove that the\n         EAP-Finish/Re-auth message originates at a server
      that\n         possesses the rIK corresponding to the EMSKname-NAI.\n   o  If
      the home ER server is involved in the ERP exchange and the ERP\n      exchange
      is successful, the home ER server SHOULD request the DSRK\n      from the home
      EAP server; the home EAP server MUST provide the\n      DSRK for the home ER
      server (derived using the EMSK and the domain\n      name as specified in RFC
      5295), EMSKname, and DSRK lifetime for\n      inclusion in the AAA message.
      \ The home ER server SHOULD obtain\n      them before sending the EAP-Finish/Re-auth
      message.\n   o  In addition, the rMSK is sent along with the EAP-Finish/Re-auth\n
      \     message in a AAA attribute (for an example, see Bournelle,\n      et al.
      [DIAMETER-ERP]).\n   o  The authenticator receives the rMSK.\n   o  When the
      peer receives an EAP-Finish/Re-auth message with the\n      bootstrap flag set,
      if a local domain name is present, it MUST use\n      that name to derive the
      appropriate DSRK, DS-rRK, DS-rIK, and\n      keyName-NAI, and initialize the
      replay counter for the DS-rIK.  If\n      not, the peer SHOULD derive the domain-specific
      keys using the\n      domain name it learned via the lower layer or from the\n
      \     EAP-Initiate/Re-auth-Start message.  If the peer does not know the\n      domain
      name, it must assume that there is no local ER server\n      available.\n   o
      \ The peer MAY also verify the Authorization Indication TLV.\n   o  The procedures
      for encapsulating ERP and obtaining relevant keys\n      using Diameter are
      specified in Bournelle, et al. [DIAMETER-ERP].\n   Since the ER bootstrapping
      exchange is typically done immediately\n   following the full EAP exchange,
      it is feasible that the process is\n   completed through the same entity that
      served as the EAP\n   authenticator for the full EAP exchange.  In this case,
      the lower\n   layer may already have established TSKs based on the MSK received\n
      \  earlier.  The lower layer may then choose to ignore the rMSK that was\n   received
      with the ER bootstrapping exchange.  Alternatively, the\n   lower layer may
      choose to establish a new TSK using the rMSK.  In\n   either case, the authenticator
      and the peer know which key is used\n   based on whether or not a TSK establishment
      exchange is initiated.\n   The bootstrapping exchange may also be carried out
      via a new\n   authenticator, in which case, the rMSK received SHOULD trigger
      a\n   lower-layer TSK establishment exchange.\n"
    title: 5.1.  ERP Bootstrapping
  - contents:
    - "5.2.  Steps in ERP\n   When a peer that has an active rRK and rIK associates
      with a new\n   authenticator that supports ERP, it may perform an ERP exchange
      with\n   that authenticator.  ERP is typically a peer-initiated exchange,\n
      \  consisting of an EAP-Initiate/Re-auth and an EAP-Finish/Re-auth\n   message.
      \ The ERP exchange may be performed with a local ER server\n   (when one is
      present) or with the original EAP server.\n   It is plausible for the network
      to trigger the EAP re-authentication\n   process, however.  An ERP-capable authenticator
      SHOULD send an\n   EAP-Initiate/Re-auth-Start message to indicate support for
      ERP.  The\n   peer may or may not wait for these messages to arrive to initiate
      the\n   EAP-Initiate/Re-auth message.\n   The EAP-Initiate/Re-auth-Start message
      SHOULD be sent by an ERP-\n   capable authenticator.  The authenticator may
      retransmit it a few\n   times until it receives an EAP-Initiate/Re-auth message
      in response\n   from the peer.  The EAP-Initiate/Re-auth message from the peer
      may\n   have originated before the peer receives either an EAP-Request/\n   Identity
      or an EAP-Initiate/Re-auth-Start message from the\n   authenticator.  Hence,
      the Identifier value in the EAP-Initiate/\n   Re-auth message is independent
      of the Identifier value in the\n   EAP-Initiate/Re-auth-Start or EAP-Request/Identity
      messages.\n   Operational Considerations at the Peer:\n   ERP requires that
      the peer maintain retransmission timers for\n   reliable transport of EAP re-authentication
      messages.  The\n   reliability considerations of Section 4.3 of RFC 3748 apply
      with the\n   peer as the retransmitting entity.\n   ERP has the following steps:\n
      \  o  The ERP-capable authenticator sends the EAP-Initiate/Re-auth-Start\n      message
      to trigger the ERP exchange.\n   o  The peer sends an EAP-Initiate/Re-auth message.
      \ At a minimum, the\n      message SHALL include the following fields:\n      *
      \ a 16-bit sequence number for replay protection.\n      *  keyName-NAI as a
      TLV attribute to identify the rIK used to\n         integrity protect the message.\n
      \     *  cryptosuite to indicate the authentication algorithm used to\n         compute
      the integrity checksum.\n      *  authentication tag computed over the message.\n
      \  o  When the peer is performing ERP with a local ER server, it MUST\n      use
      the corresponding DS-rIK it shares with the local ER server.\n      The peer
      SHOULD set the lifetime flag to request the key lifetimes\n      from the server.
      \ The peer can use the rRK lifetime to know when\n      to trigger an EAP method
      exchange and the rMSK lifetime to know\n      when to trigger another ERP exchange.\n
      \  o  The authenticator copies the contents of the value field of the\n      keyName-NAI
      TLV into an appropriate attribute (e.g., User-Name\n      [RFC2865]) in the
      AAA message to the ER server.\n   o  The ER server uses the keyName-NAI to look
      up the rIK.  It MUST\n      first verify whether the sequence number is equal
      to or greater\n      than the expected sequence number.  If the ER server supports
      a\n      sequence number window size greater than 1, it MUST verify whether\n
      \     the sequence number falls within the window and has not been\n      received
      before.  The ER server MUST then verify that the\n      cryptosuite used by
      the peer is acceptable.  The ER server then\n      proceeds to verify the integrity
      of the message using the rIK,\n      thereby verifying proof of possession of
      that key by the peer.  If\n      any of these verifications fail, the ER server
      MUST send an\n      EAP-Finish/Re-auth message with the Result flag set to '1'\n
      \     (Failure).  Please refer to Section 5.2.2 for details on failure\n      handling.
      \ Otherwise, it MUST compute an rMSK from the rRK using\n      the sequence
      number as the additional input to the key derivation.\n   o  In response to
      a well-formed EAP-Initiate/Re-auth message, the ER\n      server MUST send an
      EAP-Finish/Re-auth message with the following\n      contents:\n      *  a 16-bit
      sequence number for replay protection, which MUST be\n         the same as the
      received sequence number.  The local copy of\n         the sequence number MUST
      be incremented by 1.  If the ER server\n         supports multiple simultaneous
      ERP exchanges, it MUST instead\n         update the sequence number window.\n
      \     *  keyName-NAI as a TLV attribute to identify the rIK used to\n         integrity
      protect the message.\n      *  cryptosuite to indicate the authentication algorithm
      used to\n         compute the integrity checksum.\n      *  authentication tag
      computed over the message.\n      *  If the lifetime flag was set in the EAP-Initiate/Re-auth\n
      \        message, the ER server SHOULD include the rRK lifetime and the\n         rMSK
      lifetime.\n   o  The ER server causes the rMSK along with this message to be\n
      \     transported to the authenticator.  The rMSK is transported in a\n      manner
      similar to the MSK and the EAP-Success message in a regular\n      EAP exchange.\n
      \  o  The peer looks up the sequence number to verify whether it is\n      expecting
      an EAP-Finish/Re-auth message with that sequence number\n      protected by
      the keyName-NAI.  It then verifies the integrity of\n      the message.  If
      the verifications fail, the peer logs an error\n      and stops the process;
      otherwise, it proceeds to the next step.\n   o  The peer uses the sequence number
      to compute the rMSK.\n   o  The lower-layer security association protocol can
      be triggered at\n      this point.\n"
    - contents:
      - "5.2.1.  Multiple Simultaneous Runs of ERP\n   When a peer is within the range
        of multiple authenticators, it may\n   choose to run ERP via all of them simultaneously
        to the same ER\n   server.  In that case, it is plausible that the ERP messages
        may\n   arrive out of order, resulting in the ER server rejecting legitimate\n
        \  EAP-Initiate/Re-auth messages.\n   To facilitate such operation, an ER
        server MAY allow multiple\n   simultaneous ERP exchanges by accepting all
        EAP-Initiate/Re-auth\n   messages with sequence number values within a window
        of allowed\n   values.  Recall that the sequence number allows replay protection.\n
        \  Replay window maintenance mechanisms are a local matter.\n"
      title: 5.2.1.  Multiple Simultaneous Runs of ERP
    - contents:
      - "5.2.2.  ERP Failure Handling\n   If the processing of the EAP-Initiate/Re-auth
        message results in a\n   failure, the ER server MUST send an EAP-Finish/Re-auth
        message with\n   the Result flag set to '1'.  If the server has a valid rIK
        for the\n   peer, it MUST integrity protect the EAP-Finish/Re-auth failure\n
        \  message.  If the failure is due to an unacceptable cryptosuite, the\n   server
        SHOULD send a list of acceptable cryptosuites (in a TLV of\n   Type 5) along
        with the EAP-Finish/Re-auth message.  In this case, the\n   server MUST indicate
        the cryptosuite used to protect the EAP-Finish/\n   Re-auth message in the
        Cryptosuite field of that message.  The rIK\n   used with the EAP-Finish/Re-auth
        message in this case MUST be\n   computed as specified in Section 4.3 using
        the new cryptosuite.  If\n   the server does not have a valid rIK for the
        peer, the EAP-Finish/\n   Re-auth message indicating a failure will be unauthenticated;
        the\n   server MAY include a list of acceptable cryptosuites in the message.\n
        \  The peer, upon receiving an EAP-Finish/Re-auth message with the\n   Result
        flag set to '1', MUST verify the sequence number and, if\n   possible, the
        authentication tag to determine the validity of the\n   message.  If the peer
        supports the cryptosuite, it MUST verify the\n   integrity of the received
        EAP-Finish/Re-auth message.  If the\n   EAP-Finish message contains a TLV
        of Type 5, the peer SHOULD retry\n   the ERP exchange with a cryptosuite picked
        from the list included by\n   the server.  The peer MUST use the appropriate
        rIK for the subsequent\n   ERP exchange by computing it with the corresponding
        cryptosuite, as\n   specified in Section 4.3.  If the Pseudo-Random Function
        (PRF) in the\n   chosen cryptosuite is different from the PRF originally used
        by the\n   peer, it MUST derive a new DSRK (if required), rRK, and rIK before\n
        \  proceeding with the subsequent ERP exchange.\n   If the peer cannot verify
        the integrity of the received message, it\n   MAY choose to retry the ERP
        exchange with one of the cryptosuites in\n   the list of acceptable cryptosuites
        (in a TLV of Type 5), after a\n   failure has been clearly determined following
        the procedure in the\n   next paragraph.\n   If the replay or integrity checks
        fail, the failure message may have\n   been sent by an attacker.  It may also
        mean that the server and peer\n   do not support the same cryptosuites; however,
        the peer cannot\n   determine if that is the case.  Hence, the peer SHOULD
        continue the\n   ERP exchange per the retransmission timers before declaring
        a\n   failure.\n   When the peer runs explicit bootstrapping (ERP with the
        bootstrapping\n   flag on), there may not be a local ER server available to
        send a DSRK\n   Request and the domain name.  In that case, the server cannot
        send\n   the DSRK and MUST NOT include the Domain name TLV.  When the peer\n
        \  receives a response in the bootstrapping exchange without a Domain\n   name
        TLV, it assumes that there is no local ER server.  The home ER\n   server
        sends an rMSK to the ER authenticator, however, and the peer\n   SHALL run
        the TSK establishment protocol as usual.\n"
      title: 5.2.2.  ERP Failure Handling
    title: 5.2.  Steps in ERP
  - contents:
    - "5.3.  EAP Codes\n   Two EAP codes are defined for the purpose of ERP: EAP-Initiate
      and\n   EAP-Finish.  The packet format for these messages follows the EAP\n
      \  packet format defined in Aboba, et al. [RFC3748].\n    0                   1
      \                  2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4
      5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |     Code      |  Identifier   |            Length             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |     Type      |  Type-Data ...\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-\n
      \                          Figure 7: EAP Packet\n      Code\n         Two code
      values are defined for the purpose of ERP:\n         5 Initiate\n         6
      Finish\n      Identifier\n         The Identifier field is one octet.  The Identifier
      field MUST\n         be the same if an EAP-Initiate packet is retransmitted
      due to a\n         timeout while waiting for an EAP-Finish message.  Any new\n
      \        (non-retransmission) EAP-Initiate message MUST use a new\n         Identifier
      field.\n         The Identifier field of the EAP-Finish message MUST match that\n
      \        of the currently outstanding EAP-Initiate message.  A peer or\n         authenticator
      receiving an EAP-Finish message whose Identifier\n         value does not match
      that of the currently outstanding\n         EAP-Initiate message MUST silently
      discard the packet.\n         In order to avoid confusion between new EAP-Initiate
      messages\n         and retransmissions, the peer must choose an Identifier value\n
      \        that is different from the previous EAP-Initiate message,\n         especially
      if that exchange has not finished.  It is\n         RECOMMENDED that the authenticator
      clear EAP Re-auth state\n         after 300 seconds.\n      Type\n         This
      field indicates that this is an ERP exchange.  Two type\n         values are
      defined in this document for this purpose --\n         Re-auth-Start (Type 1)
      and Re-auth (Type 2).\n      Type-Data\n         The Type-Data field varies
      according to the value of the Type\n         field in the re-authentication
      packet.\n"
    - contents:
      - "5.3.1.  EAP-Initiate/Re-auth-Start Packet\n   The EAP-Initiate/Re-auth-Start
        packet contains the fields shown in\n   Figure 8.\n    0                   1
        \                  2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3
        4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  |     Code      |  Identifier   |            Length             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  |     Type      |   Reserved    |     1 or more TVs or TLVs     ~\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \               Figure 8: EAP-Initiate/Re-auth-Start Packet\n      Type =
        1.\n      Reserved:  MUST be zero.  Set to zero on transmission and ignored\n
        \        on reception.\n      One or more Type/Values (TVs) or TLVs are used
        to convey\n      information to the peer; for instance, the authenticator
        may send\n      the domain name to the peer.\n      TVs or TLVs:  In the TV
        payloads, there is a 1-octet type payload\n         and a value with type-specific
        length.  In the TLV payloads,\n         there is a 1-octet type payload and
        a 1-octet length payload.\n         The length field indicates the length
        of the value expressed in\n         number of octets.\n         Domain name:
        \ This is a TLV payload.  The Type is 4.  The\n            domain name is
        to be used as the realm in an NAI [RFC4282].\n            The Domain name
        TLV SHOULD be present in an EAP-Initiate/\n            Re-auth-Start message.\n
        \        In addition, channel binding information MAY be included; see\n         Section
        5.5 for discussion.  See Figure 12 for parameter\n         specification.\n"
      - contents:
        - "5.3.1.1.  Authenticator Operation\n   In order to minimize ERP failure
          times, the authenticator SHOULD send\n   the EAP-Initiate/Re-auth-Start
          message to indicate support for ERP to\n   the peer and to initiate ERP
          if the peer has already performed full\n   EAP authentication and has unexpired
          key material.  The authenticator\n   SHOULD include the Domain name TLV
          to allow the peer to learn it\n   without requiring either lower-layer support
          or the ERP bootstrapping\n   exchange.\n   The authenticator MAY include
          channel binding information so that the\n   server can verify whether the
          authenticator is claiming the same\n   identity to both parties.\n   The
          authenticator MAY retransmit the EAP-Initiate/Re-auth-Start\n   message
          a few times for reliable transport.\n"
        title: 5.3.1.1.  Authenticator Operation
      - contents:
        - "5.3.1.2.  Peer Operation\n   The peer SHOULD send the EAP-Initiate/Re-auth
          message in response to\n   the EAP-Initiate/Re-auth-Start message from the
          authenticator.  If\n   the peer does not recognize the EAP-Initiate code
          value or if the\n   peer has already sent the EAP-Initiate/Re-auth message
          to begin the\n   ERP exchange, it MUST silently discard the EAP-Initiate/Re-auth-Start\n
          \  message.\n   If the EAP-Initiate/Re-auth-Start message contains the domain
          name,\n   and if the peer does not already have the domain information,
          the\n   peer SHOULD use the domain name contained in the message to compute\n
          \  the DSRK and use the corresponding DS-rIK to send an EAP-Initiate/\n
          \  Re-auth message to start an ERP exchange with the local ER server.\n
          \  If there is a local ER server between the peer and the home ER server\n
          \  and the peer has already initiated an ERP exchange with the local ER\n
          \  server, it SHOULD NOT start an ERP exchange with the home ER server.\n"
        title: 5.3.1.2.  Peer Operation
      title: 5.3.1.  EAP-Initiate/Re-auth-Start Packet
    - contents:
      - "5.3.2.  EAP-Initiate/Re-auth Packet\n   The EAP-Initiate/Re-auth packet contains
        the parameters shown in\n   Figure 9.\n    0                   1                   2
        \                  3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3
        4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  |     Code      |  Identifier   |            Length             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  |     Type      |R|B|L| Reserved|             SEQ               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  |                 1 or more TVs or TLVs                         ~\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  | Cryptosuite  |        Authentication Tag                      ~\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \                  Figure 9: EAP-Initiate/Re-auth Packet\n      Type = 2.\n
        \     Flags\n         'R' -  The R flag is set to 0 and ignored upon reception.\n
        \        'B' -  The B flag is used as the bootstrapping flag.  If the\n                flag
        is turned on, the message is a bootstrap message.\n         'L' -  The L flag
        is used to request the key lifetimes from the\n                server.\n         The
        remaining 5 bits are set to 0 on transmission and ignored\n         on reception.\n
        \     SEQ:  An unsigned 16-bit sequence number is used for replay\n         protection.
        \ The SEQ field is initialized to 0 every time a new\n         rRK is derived.
        \ The field is encoded in network byte order.\n      TVs or TLVs:  In the
        TV payloads, there is a 1-octet type payload\n         and a value with type-specific
        length.  In the TLV payloads,\n         there is a 1-octet type payload and
        a 1-octet length payload.\n         The length field indicates the length
        of the value expressed in\n         number of octets.\n         keyName-NAI:
        \ This is carried in a TLV payload.  The Type is 1.\n            The NAI is
        variable in length, not exceeding 253 octets.\n            The EMSKname is
        in the username part of the NAI and is\n            encoded in hexadecimal
        values.  The EMSKname is 64 bits in\n            length, and so the username
        portion takes up 16 octets.  If\n            the rIK is derived from the EMSK,
        the realm part of the NAI\n            is the home domain name, and if the
        rIK is derived from a\n            DSRK, the realm part of the NAI is the
        domain name used in\n            the derivation of the DSRK.  The NAI syntax
        is specified in\n            Aboba, et al. [RFC4282].  Exactly one keyName-NAI
        attribute\n            SHALL be present in an EAP-Initiate/Re-auth packet.\n
        \        In addition, channel binding information MAY be included; see\n         Section
        5.5 for discussion.  See Figure 12 for parameter\n         specification.\n
        \     Cryptosuite:  This field indicates the integrity algorithm used\n         for
        ERP.  Key lengths and output lengths are either indicated\n         or are
        obvious from the cryptosuite name.  We specify some\n         cryptosuites
        below:\n         *  0 RESERVED\n         *  1 HMAC-SHA256-64\n         *  2
        HMAC-SHA256-128\n         *  3 HMAC-SHA256-256\n      HMAC-SHA256-128 is mandatory
        to implement and SHOULD be enabled in\n      the default configuration.\n
        \     Authentication Tag:  This field contains the integrity checksum\n         over
        the ERP packet, excluding the Authentication Tag field\n         itself.  The
        length of the field is indicated by the\n         cryptosuite.\n"
      title: 5.3.2.  EAP-Initiate/Re-auth Packet
    - contents:
      - "5.3.3.  EAP-Finish/Re-auth Packet\n   The EAP-Finish/Re-auth packet contains
        the parameters shown in\n   Figure 10.\n    0                   1                   2
        \                  3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3
        4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  |     Code      |  Identifier   |            Length             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  |     Type      |R|B|L| Reserved |             SEQ              ~\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  |                 1 or more TVs or TLVs                         ~\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  |  Cryptosuite  |        Authentication Tag                     ~\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \                  Figure 10: EAP-Finish/Re-auth Packet\n      Type = 2.\n
        \     Flags\n         'R' -  The R flag is used as the Result flag.  When
        set to 0,\n                it indicates success, and when set to '1', it indicates\n
        \               a failure.\n         'B' -  The B flag is used as the bootstrapping
        flag.  If the\n                flag is turned on, the message is a bootstrap
        message.\n         'L' -  The L flag is used to indicate the presence of the
        rRK\n                lifetime TLV.\n         The remaining 5 bits are set
        to 0 on transmission and ignored\n         on reception.\n      SEQ:  An unsigned
        16-bit sequence number is used for replay\n         protection.  The SEQ field
        is initialized to 0 every time a new\n         rRK is derived.  The field
        is encoded in network byte order.\n      TVs or TLVs:  In the TV payloads,
        there is a 1-octet type payload\n         and a value with type-specific length.
        \ In the TLV payloads,\n         there is a 1-octet type payload and a 1-octet
        length payload.\n         The length field indicates the length of the value
        expressed in\n         number of octets.\n         keyName-NAI:  This is carried
        in a TLV payload.  The Type is 1.\n            The NAI is variable in length,
        not exceeding 253 octets.\n            EMSKname is in the username part of
        the NAI and is encoded\n            in hexadecimal values.  The EMSKname is
        64 bits in length,\n            and so the username portion takes up 16 octets.
        \ If the rIK\n            is derived from the EMSK, the realm part of the
        NAI is the\n            home domain name, and if the rIK is derived from a
        DSRK, the\n            realm part of the NAI is the domain name used in the\n
        \           derivation of the DSRK.  The NAI syntax is specified in\n            [RFC4282].
        \ Exactly one instance of the keyName-NAI\n            attribute SHALL be
        present in an EAP-Finish/Re-auth message.\n         rRK Lifetime:  This is
        a TV payload.  The Type is 2.  The value\n            field contains an unsigned
        32-bit integer in network byte\n            order representing the lifetime
        of the rRK in seconds.  If\n            the 'L' flag is set, the rRK Lifetime
        attribute SHOULD be\n            present.\n         rMSK Lifetime:  This is
        a TV payload.  The Type is 3.  The\n            value field contains an unsigned
        32-bit integer in network\n            byte order representing the lifetime
        of the rMSK in seconds.\n            If the 'L' flag is set, the rMSK Lifetime
        attribute SHOULD\n            be present.\n         Domain name:  This is
        a TLV payload.  The Type is 4.  The\n            domain name is to be used
        as the realm in an NAI [RFC4282].\n            The Domain name attribute MUST
        be present in an EAP-Finish/\n            Re-auth message if the bootstrapping
        flag is set and if the\n            local ER server sent a DSRK Request.\n
        \        List of cryptosuites:  This is a TLV payload.  The Type is 5.\n            The
        value field contains a list of cryptosuites, each of\n            size 1 octet.
        \ The cryptosuite values are as specified in\n            Figure 9.  The server
        SHOULD include this attribute if the\n            cryptosuite used in the
        EAP-Initiate/Re-auth message was not\n            acceptable and the message
        is being rejected.  The server\n            MAY include this attribute in
        other cases.  The server MAY\n            use this attribute to signal its
        cryptographic algorithm\n            capabilities to the peer.\n         Authorization
        Indication:  This is a TLV payload.  The Type\n            is 6.  This attribute
        MAY be included in the EAP-Finish/\n            Re-auth message when a DSRK
        is delivered to a local ER\n            server and if the home EAP server
        can verify the\n            authorization of the local ER server to advertise
        the domain\n            name included in the domain TLV in the same message.
        \ The\n            value field in the TLV contains an authentication tag\n
        \           computed over the entire packet, starting from the first bit\n
        \           of the code field to the last bit of the Cryptosuite field,\n
        \           with the value field of the Authorization Indication TLV\n            filled
        with all 0s for the computation.  The key used for\n            the computation
        MUST be derived from the EMSK with key label\n            \"DSRK Delivery
        Authorized Key@ietf.org\" and optional data\n            containing an ASCII
        string representing the key management\n            domain for which the DSRK
        is being derived.\n         In addition, channel binding information MAY be
        included: see\n         Section 5.5 for discussion.  See Figure 12 for parameter\n
        \        specification.  The server sends this information so that the\n         peer
        can verify the information seen at the lower layer, if\n         channel binding
        is to be supported.\n      Cryptosuite:  This field indicates the integrity
        algorithm and the\n         PRF used for ERP.  Key lengths and output lengths
        are either\n         indicated or are obvious from the cryptosuite name.\n
        \     Authentication Tag:  This field contains the integrity checksum\n         over
        the ERP packet, excluding the Authentication Tag field\n         itself.  The
        length of the field is indicated by the\n         cryptosuite.\n"
      title: 5.3.3.  EAP-Finish/Re-auth Packet
    - contents:
      - "5.3.4.  TV and TLV Attributes\n   The TV attributes that may be present in
        the EAP-Initiate or\n   EAP-Finish messages are of the following format:\n
        \   0                   1                   2                   3\n    0 1
        2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  |     Type      |              Value ...\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \                     Figure 11: TV Attribute Format\n   The TLV attributes
        that may be present in the EAP-Initiate or\n   EAP-Finish messages are of
        the following format:\n    0                   1                   2                   3\n
        \   0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \  |     Type      |    Length     |            Value ...\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \                     Figure 12: TLV Attribute Format\n   The following Types
        are defined in this document:\n      '1' - keyName-NAI: This is a TLV payload.\n
        \     '2' - rRK Lifetime: This is a TV payload.\n      '3' - rMSK Lifetime:
        This is a TV payload.\n      '4' - Domain name: This is a TLV payload.\n      '5'
        - Cryptosuite list: This is a TLV payload.\n      '6' - Authorization Indication:
        This is a TLV payload.\n      The TLV type range of 128-191 is reserved to
        carry channel binding\n      information in the EAP-Initiate/Re-auth and EAP-Finish/Re-auth\n
        \     messages.  Below are the current assignments (all of them are\n      TLVs):\n
        \        '128' - Called-Station-Id [RFC2865]\n         '129' - Calling-Station-Id
        [RFC2865]\n         '130' - NAS-Identifier [RFC2865]\n         '131' - NAS-IP-Address
        [RFC2865]\n         '132' - NAS-IPv6-Address [RFC3162]\n   The length field
        indicates the length of the value part of the\n   attribute in octets.\n"
      title: 5.3.4.  TV and TLV Attributes
    title: 5.3.  EAP Codes
  - contents:
    - "5.4.  Replay Protection\n   For replay protection, ERP uses sequence numbers.
      \ The sequence\n   number is maintained on a per rIK basis and is initialized
      to zero in\n   both directions.  In the first EAP-Initiate/Re-auth message,
      the peer\n   uses a sequence number value of zero or higher.  Note that when
      the\n   sequence number wraps back to zero, the rIK MUST be changed by\n   running
      a full EAP authentication.  The server expects a sequence\n   number of zero
      or higher.  When the server receives an EAP-Initiate/\n   Re-auth message, it
      uses the same sequence number in the EAP-Finish/\n   Re-auth message.  The server
      then sets the expected sequence number\n   to the received sequence number plus
      1.  The server MUST accept\n   sequence numbers greater than or equal to the
      expected sequence\n   number.\n   If the peer sends an EAP-Initiate/Re-auth
      message but does not\n   receive a response, it retransmits the request (with
      no changes to\n   the message itself) a preconfigured number of times before
      giving up.\n   However, it is plausible that the server itself may have responded
      to\n   the message and the response was lost in transit.  Thus, the peer\n   MUST
      increment the sequence number and use the new sequence number to\n   send subsequent
      EAP re-authentication messages.  The peer SHOULD\n   increment the sequence
      number by 1; however, it may choose to\n   increment by a larger number.  If
      the sequence number wraps back to\n   zero, the peer MUST run full EAP authentication.\n"
    title: 5.4.  Replay Protection
  - contents:
    - "5.5.  Channel Binding\n   ERP provides a protected facility to carry channel
      binding (CB)\n   information, according to the guidelines provided by Aboba,\n
      \  et al. (see Section 7.15 of [RFC3748]).  The TLV type range of\n   128-191
      is reserved to carry CB information in the EAP-Initiate/\n   Re-auth and EAP-Finish/Re-auth
      messages.  Called-Station-Id,\n   Calling-Station-Id, NAS-Identifier, NAS-IP-Address,
      and\n   NAS-IPv6-Address are some examples of channel binding information\n
      \  listed in RFC 3748, and they are assigned values 128-132.  Additional\n   values
      are managed by IANA, based on IETF Review (formerly called\n   \"IETF Consensus\")
      [RFC5226].\n   The authenticator MAY provide CB information to the peer via
      the\n   EAP-Initiate/Re-auth-Start message.  The peer sends the information\n
      \  to the server in the EAP-Initiate/Re-auth message; the server\n   verifies
      whether the authenticator identity available via AAA\n   attributes is the same
      as the identity provided to the peer.\n   If the peer does not include the CB
      information in the EAP-Initiate/\n   Re-auth message, and if the local ER server's
      policy requires channel\n   binding support, it SHALL send the CB attributes
      for the peer's\n   verification.  The peer attempts to verify the CB information
      if the\n   authenticator has sent the CB parameters, and it proceeds with the\n
      \  lower-layer security association establishment if the attributes\n   match.
      \ Otherwise, the peer SHALL NOT proceed with the lower-layer\n   security association
      establishment.\n"
    title: 5.5.  Channel Binding
  title: 5.  Protocol Details
- contents:
  - "6.  Lower-Layer Considerations\n   The authenticator is responsible for retransmission
    of EAP-Initiate/\n   Re-auth-Start messages.  The authenticator MAY retransmit
    the message\n   a few times or until it receives an EAP-Initiate/Re-auth message
    from\n   the peer.  The authenticator might not know if the peer supports ERP;\n
    \  in those cases, the peer could be silently discarding the\n   EAP-Initiate/Re-auth-Start
    packets.  Thus, retransmission of these\n   packets should be kept to a minimum.
    \ The exact number is up to each\n   lower layer.\n   The Identifier value in
    the EAP-Initiate/Re-auth packet is\n   independent of the Identifier value in
    the EAP-Initiate/Re-auth-Start\n   packet.\n   The peer is responsible for retransmission
    of EAP-Initiate/Re-auth\n   messages.\n   Retransmitted packets MUST be sent with
    the same Identifier value in\n   order to distinguish them from new packets.  By
    default, where the\n   EAP-Initiate message is sent over an unreliable lower layer,
    the\n   retransmission timer SHOULD be dynamically estimated.  A maximum of\n
    \  3-5 retransmissions is suggested [RFC3748].  Where the EAP-Initiate\n   message
    is sent over a reliable lower layer, the retransmission timer\n   SHOULD be set
    to an infinite value so that retransmissions do not\n   occur at the EAP layer.
    \ Please refer to RFC 3748 for additional\n   guidance on setting timers.\n   The
    Identifier value in the EAP-Finish/Re-auth packet is the same as\n   the Identifier
    value in the EAP-Initiate/Re-auth packet.\n   If an authenticator receives a valid
    duplicate EAP-Initiate/Re-auth\n   message for which it has already sent an EAP-Finish/Re-auth
    message,\n   it MUST resend the EAP-Finish/Re-auth message without reprocessing\n
    \  the EAP-Initiate/Re-auth message.  To facilitate this, the\n   authenticator
    SHALL store a copy of the EAP-Finish/Re-auth message\n   for a finite amount of
    time.  The actual value of time is a local\n   matter; this specification recommends
    a value of 100 milliseconds.\n   The lower layer may provide facilities for exchanging
    information\n   between the peer and the authenticator about support for ERP,
    for the\n   authenticator to send the domain name information and channel binding\n
    \  information to the peer.\n   Note that to support ERP, lower-layer specifications
    may need to be\n   revised.  Specifically, RFC 5996 must be updated to include
    EAP code\n   values higher than 4 in order to use ERP with Internet Key Exchange\n
    \  Protocol version 2 (IKEv2).  IKEv2 may also be updated to support\n   peer-initiated
    ERP for optimized operation.  Other lower layers may\n   need similar revisions.\n
    \  Our analysis indicates that some EAP implementations are not RFC 3748\n   compliant
    in that instead of silently dropping EAP packets with code\n   values higher than
    4, they may consider it an error.  To accommodate\n   such non-compliant EAP implementations,
    additional guidance has been\n   provided below.  Furthermore, it may not be easy
    to upgrade all the\n   peers in some cases.  In such cases, authenticators may
    be configured\n   to not send EAP-Initiate/Re-auth-Start messages; peers may learn\n
    \  whether an authenticator supports ERP via configuration or from\n   advertisements
    at the lower layer.\n   In order to accommodate implementations that are not compliant
    to\n   RFC 3748, such lower layers SHOULD ensure that both parties support\n   ERP;
    this is trivial, for instance, when using a lower layer that is\n   known to always
    support ERP.  For lower layers where ERP support is\n   not guaranteed, ERP support
    may be indicated through signaling (e.g.,\n   piggybacked on a beacon) or through
    negotiation.  Alternatively,\n   clients may recognize environments where ERP
    is available based on\n   preconfiguration.  Other similar mechanisms may also
    be used.  When\n   ERP support cannot be verified, lower layers may mandate falling
    back\n   to full EAP authentication to accommodate EAP implementations that\n
    \  are not compliant to RFC 3748.\n"
  title: 6.  Lower-Layer Considerations
- contents:
  - "7.  AAA Transport of ERP Messages\n   AAA transport of ERP messages is specified
    by Hoeper,\n   et al. [RFC5749] and Bournelle, et al. [DIAMETER-ERP].\n"
  title: 7.  AAA Transport of ERP Messages
- contents:
  - "8.  Security Considerations\n   This section provides an analysis of the protocol
    in accordance with\n   the AAA key management guidelines described by Housley
    & Aboba\n   [RFC4962].\n      Cryptographic algorithm independence\n         ERP
    satisfies this requirement.  The algorithm chosen by the\n         peer for the
    MAC generation is indicated in the EAP-Initiate/\n         Re-auth message.  If
    the chosen algorithm is unacceptable, the\n         EAP server returns an EAP-Finish/Re-auth
    message indicating a\n         failure.  Algorithm agility for the KDF is specified
    in\n         Salowey, et al. [RFC5295].  Only when the algorithms used are\n         deemed
    acceptable does the server proceed with the derivation\n         of keys and verification
    of the proof of possession of relevant\n         key material presented by the
    peer.  A full-blown negotiation\n         of algorithms cannot be provided in
    a single round-trip\n         protocol.  Hence, while the protocol provides algorithm\n
    \        agility, it does not provide true negotiation.\n      Strong, fresh session
    keys\n         ERP results in the derivation of strong, fresh keys that are\n
    \        unique for the given session.  An rMSK is always derived on\n         demand
    when the peer requires a key with a new authenticator.\n         The derivation
    ensures that the compromise of one rMSK does not\n         result in the compromise
    of another rMSK at any time.\n      Limited key scope\n         The scope of all
    the keys derived by ERP is well defined.  The\n         rRK and rIK are never
    shared with any entity and always remain\n         on the peer and the server.
    \ The rMSK is provided only to the\n         authenticator through which the peer
    performs the ERP exchange.\n         No other authenticator is authorized to use
    that rMSK.\n      Replay detection mechanism\n         For replay protection of
    ERP messages, a sequence number\n         associated with the rIK is used.  The
    sequence number is\n         maintained by the peer and the server and is initialized
    to\n         zero when the rIK is generated.  The peer increments the\n         sequence
    number by one after it sends an ERP message.  The\n         server sets the expected
    sequence number to the received\n         sequence number plus one after verifying
    the validity of the\n         received message and responds to the message.\n
    \     Authenticating all parties\n         ERP provides mutual authentication
    of the peer and the server.\n         Both parties need to possess the key material
    that resulted\n         from a previous EAP exchange in order to successfully
    derive\n         the required keys.  Also, both the EAP re-authentication\n         Response
    and the EAP re-authentication Information messages are\n         integrity protected
    so that the peer and the server can verify\n         each other.  When the ERP
    exchange is executed with a local ER\n         server, the peer and the local
    server mutually authenticate\n         each other via that exchange in the same
    manner.  The peer and\n         the authenticator authenticate each other in the
    secure\n         association protocol executed by the lower layer, just as in\n
    \        the case of a regular EAP exchange.\n      Peer and authenticator authorization\n
    \        The peer and authenticator demonstrate possession of the same\n         key
    material without disclosing it, as part of the lower-layer\n         secure association
    protocol.  Channel binding with ERP may be\n         used to verify consistency
    of the identities exchanged, when\n         the identities used in the lower layer
    differ from those\n         exchanged within the AAA protocol.\n      Key material
    confidentiality\n         The peer and the server derive the keys independently
    using\n         parameters known to each entity.  The AAA server sends the DSRK\n
    \        of a domain to the corresponding local ER server via the AAA\n         protocol.
    \ Likewise, the ER server sends the rMSK to the\n         authenticator via the
    AAA protocol.\n         Note that compromise of the DSRK results in compromise
    of all\n         keys derived from it.  Moreover, there is no forward secrecy\n
    \        within ERP.  Thus, compromise of a DSRK retroactively\n         compromises
    all ERP keys.\n         It is RECOMMENDED that the AAA protocol be protected using\n
    \        IPsec or Transport Layer Security (TLS) so that the keys are\n         protected
    in transit.  Note, however, that keys may be exposed\n         to AAA proxies
    along the way, and compromise of any of those\n         proxies may result in
    compromise of keys being transported\n         through them.\n         The home
    EAP server MUST NOT hand out a given DSRK to a local\n         domain server more
    than once, unless it can verify that the\n         entity receiving the DSRK after
    the first time is the same\n         entity that received the DSRK originally.
    \ If the home EAP\n         server verifies authorization of a local domain server,
    it MAY\n         hand out the DSRK to that domain more than once.  In this case,\n
    \        the home EAP server includes the Authorization Indication TLV\n         to
    assure the peer that DSRK delivery is secure.\n      Confirming cryptosuite selection\n
    \        Cryptographic algorithms for integrity and key derivation in\n         the
    context of ERP MAY be the same as that used by the EAP\n         method.  In that
    case, the EAP method is responsible for\n         confirming the cryptosuite selection.
    \ Furthermore, the\n         cryptosuite is included in the ERP exchange by the
    peer and\n         confirmed by the server.  The protocol allows the server to\n
    \        reject the cryptosuite selected by the peer and provide\n         alternatives.
    \ When a suitable rIK is not available for the\n         peer, the alternatives
    may be sent in an unprotected fashion.\n         The peer is allowed to retry
    the exchange using one of the\n         allowed cryptosuites.  However, in this
    case, any en route\n         modifications to the list sent by the server will
    go\n         undetected.  If the server does have an rIK available for the\n         peer,
    the list will be provided in a protected manner and this\n         issue does
    not apply.\n      Uniquely named keys\n         All keys produced within the context
    of ERP can be referred to\n         uniquely as specified in this document.  Also,
    the key names do\n         not reveal any part of the key material.\n      Preventing
    the domino effect\n         The compromise of one peer does not result in the
    compromise of\n         key material held by any other peer in the system.  Also,
    the\n         rMSK is meant for a single authenticator and is not shared with\n
    \        any other authenticator.  Hence, the compromise of one\n         authenticator
    does not lead to the compromise of sessions or\n         keys held by any other
    authenticator in the system, and ERP\n         thereby allows prevention of the
    domino effect by appropriately\n         defining key scope.\n         However,
    if keys are transported using hop-by-hop protection,\n         compromise of a
    proxy may result in compromise of key material,\n         e.g., the DSRK being
    sent to a local ER server.\n      Binding a key to its context\n         All the
    keys derived for ERP are bound to the appropriate\n         context using appropriate
    key labels.  The lifetime of a child\n         key is less than or equal to that
    of its parent key as\n         specified in RFC 4962 [RFC4962].  The key usage,
    lifetime, and\n         the parties that have access to the keys are specified.\n
    \     Confidentiality of identity\n         Deployments where privacy is a concern
    may find that the use of\n         the rIKname-NAI to route ERP messages serves
    their privacy\n         requirements.  Note that it is plausible to associate
    multiple\n         runs of ERP messages, since the rIKname is not changed as part\n
    \        of ERP.  There was no consensus for that requirement at the\n         time
    of development of this specification.  If the rIKname is\n         not used and
    the Peer-ID is used instead, the ERP exchange will\n         reveal the Peer-ID
    over the wire.\n      Authorization restriction\n         All the derived keys
    are limited in lifetime by that of the\n         parent key or by server policy.
    \ Any domain-specific keys are\n         further restricted for use only in the
    domain for which the\n         keys are derived.  All the keys specified in this
    document are\n         meant for use in ERP only.  Other restrictions on the use
    of\n         session keys may be imposed by the specific lower layer but are\n
    \        out of scope for this specification.\n      Preventing a DoS attack\n
    \        A denial-of-service (DoS) attack on the peer may be possible\n         when
    using the EAP-Initiate/Re-auth message.  An attacker may\n         send a bogus
    EAP-Initiate/Re-auth message, which may be carried\n         by the authenticator
    in a AAA-Request to the server; in\n         response, the server may send in
    a AAA reply an EAP-Finish/\n         Re-auth message indicating failure.  Note
    that such attacks may\n         be possible with the EAPoL-Start capability of
    IEEE 802.11 and\n         other similar facilities in other link layers and where
    the\n         peer can initiate EAP authentication.  An attacker may use such\n
    \        messages to start an EAP method run, which fails and may result\n         in
    the server sending a rejection message, thus resulting in\n         the link-layer
    connections being terminated.\n         To prevent such DoS attacks, an ERP failure
    should not result\n         in deletion of any authorization state established
    by a full\n         EAP exchange.  Alternatively, the lower layers and AAA\n         protocols
    may define mechanisms to allow two link-layer\n         Security Associations
    (SAs) derived from different EAP key\n         material for the same peer to exist
    so that smooth migration\n         from the current link-layer SA to the new one
    is possible\n         during rekey.  These mechanisms prevent the link-layer\n
    \        connections from being terminated when a re-authentication\n         procedure
    fails due to a bogus EAP-Initiate/Re-auth message.\n      Key material transport\n
    \        When a DSRK is sent from the home EAP server to a local domain\n         server
    or when an rMSK is sent from an ER server to an\n         authenticator, in the
    absence of end-to-end security between\n         the entity that is sending the
    key and the entity receiving the\n         key, it is plausible for other entities
    to get access to keys\n         being sent to an ER server in another domain.
    \ This mode of key\n         transport is similar to that of MSK transport in
    the context of\n         EAP authentication.  We further observe that ERP is for
    access\n         authentication and does not support end-to-end data security.\n
    \        In typical implementations, the traffic is in the clear beyond\n         the
    access control enforcement point (the authenticator or an\n         entity delegated
    by the authenticator for access control\n         enforcement).  The model works
    as long as entities in the\n         middle of the network do not use keys intended
    for other\n         parties to steal service from an access network.  If that
    is\n         not achievable, key delivery must be protected in an end-to-end\n
    \        manner.\n"
  title: 8.  Security Considerations
- contents:
  - "9.  IANA Considerations\n   The previous version of this document -- [RFC5296]
    -- performed the\n   following IANA [IANA] actions:\n   1.  It registered Packet
    Codes \"Initiate\" and \"Finish\" in the EAP\n       Registry.  Those codes are
    referred to as \"EAP-Initiate\" and\n       \"EAP-Finish\" throughout this document.\n
    \  2.  It created a Message Types table in the EAP Registry and\n       registered
    several items in that table.  Those items are referred\n       to as \"Re-auth-start\"
    and \"Re-auth\" throughout this document.\n   3.  It created an EAP-Initiate and
    Finish Attributes table in the EAP\n       registry and registered several items
    in that table.  Those items\n       are recorded in this document in Section 5.3.4.\n
    \  4.  It created a Re-authentication Cryptosuites table in the EAP\n       registry
    and registered several items in that table.  Those items\n       are recorded
    in this document at the end of Section 5.3.2.\n   5.  It registered two items
    in the USRK Key Labels registry:\n       *  Re-auth usage label \"EAP Re-authentication
    Root Key@ietf.org\",\n          recorded in this document in Section 4.1.\n       *
    \ DSRK-authorized delivery key \"DSRK Delivery Authorized\n          Key@ietf.org\",
    recorded in this document in the description of\n          \"Authorization Indication\"
    in Section 5.3.3.\n"
  title: 9.  IANA Considerations
- contents:
  - "10.  Contributors\n   Barry Leiba contributed all of the text in Section 9 and,
    as\n   Applications Area Director, insisted upon its inclusion as a\n   condition
    of publication.\n"
  title: 10.  Contributors
- contents:
  - "11.  Acknowledgments\n   This document is largely based upon RFC 5296; thanks
    to all who\n   participated in that effort (see Appendix A).  In addition, thanks
    to\n   Yaron Sheffer, Sebastien Decugis, Ralph Droms, Stephen Farrell,\n   Charlie
    Kaufman, and Yoav Nir for (mostly) useful comments and\n   review.\n"
  title: 11.  Acknowledgments
- contents:
  - '12.  References

    '
  - contents:
    - "12.1.  Normative References\n   [RFC2104]  Krawczyk, H., Bellare, M., and R.
      Canetti, \"HMAC: Keyed-\n              Hashing for Message Authentication\",
      RFC 2104,\n              February 1997.\n   [RFC2119]  Bradner, S., \"Key words
      for use in RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC
      2119, March 1997.\n   [RFC3748]  Aboba, B., Blunk, L., Vollbrecht, J., Carlson,
      J., and H.\n              Levkowetz, Ed., \"Extensible Authentication Protocol\n
      \             (EAP)\", RFC 3748, June 2004.\n   [RFC4282]  Aboba, B., Beadles,
      M., Arkko, J., and P. Eronen, \"The\n              Network Access Identifier\",
      RFC 4282, December 2005.\n   [RFC5295]  Salowey, J., Dondeti, L., Narayanan,
      V., and M. Nakhjiri,\n              \"Specification for the Derivation of Root
      Keys from an\n              Extended Master Session Key (EMSK)\", RFC 5295,\n
      \             August 2008.\n"
    title: 12.1.  Normative References
  - contents:
    - "12.2.  Informative References\n   [DIAMETER-ERP]\n              Bournelle,
      J., Morand, L., Decugis, S., Wu, Q., and G.\n              Zorn, \"Diameter
      Support for the EAP Re-authentication\n              Protocol (ERP)\", Work
      in Progress, June 2012.\n   [IANA]     \"Internet Assigned Numbers Authority\",\n
      \             <http://www.iana.org/>.\n   [IEEE_802.1X]\n              Institute
      of Electrical and Electronics Engineers, \"IEEE\n              Standard for
      Local and Metropolitan Area Networks:\n              Port-Based Network Access
      Control\", IEEE Std 802.1X-2010,\n              February 2010.\n   [IKE-EXT-for-ERP]\n
      \             Nir, Y. and Q. Wu, \"An IKEv2 Extension for Supporting\n              ERP\",
      Work in Progress, May 2012.\n   [MSKHierarchy]\n              Lopez, R., Skarmeta,
      A., Bournelle, J., Laurent-\n              Maknavicus, M., and J. Combes, \"Improved
      EAP keying\n              framework for a secure mobility access service\",\n
      \             IWCMC '06, Proceedings of the 2006 International\n              Conference
      on Wireless Communications and Mobile\n              Computing, New York, NY,
      USA, 2006.\n   [RFC2865]  Rigney, C., Willens, S., Rubens, A., and W. Simpson,\n
      \             \"Remote Authentication Dial In User Service (RADIUS)\",\n              RFC
      2865, June 2000.\n   [RFC3162]  Aboba, B., Zorn, G., and D. Mitton, \"RADIUS
      and IPv6\",\n              RFC 3162, August 2001.\n   [RFC4187]  Arkko, J. and
      H. Haverinen, \"Extensible Authentication\n              Protocol Method for
      3rd Generation Authentication and Key\n              Agreement (EAP-AKA)\",
      RFC 4187, January 2006.\n   [RFC4962]  Housley, R. and B. Aboba, \"Guidance
      for Authentication,\n              Authorization, and Accounting (AAA) Key Management\",\n
      \             BCP 132, RFC 4962, July 2007.\n   [RFC5169]  Clancy, T., Nakhjiri,
      M., Narayanan, V., and L. Dondeti,\n              \"Handover Key Management
      and Re-Authentication Problem\n              Statement\", RFC 5169, March 2008.\n
      \  [RFC5226]  Narten, T. and H. Alvestrand, \"Guidelines for Writing an\n              IANA
      Considerations Section in RFCs\", BCP 26, RFC 5226,\n              May 2008.\n
      \  [RFC5296]  Narayanan, V. and L. Dondeti, \"EAP Extensions for EAP\n              Re-authentication
      Protocol (ERP)\", RFC 5296, August 2008.\n   [RFC5749]  Hoeper, K., Ed., Nakhjiri,
      M., and Y. Ohba, Ed.,\n              \"Distribution of EAP-Based Keys for Handover
      and\n              Re-Authentication\", RFC 5749, March 2010.\n   [RFC5996]
      \ Kaufman, C., Hoffman, P., Nir, Y., and P. Eronen,\n              \"Internet
      Key Exchange Protocol Version 2 (IKEv2)\",\n              RFC 5996, September
      2010.\n   [RFC6440]  Zorn, G., Wu, Q., and Y. Wang, \"The EAP Re-authentication\n
      \             Protocol (ERP) Local Domain Name DHCPv6 Option\", RFC 6440,\n
      \             December 2011.\n"
    title: 12.2.  Informative References
  title: 12.  References
- contents:
  - "Appendix A.  RFC 5296 Acknowledgments\n   In writing this document, we benefited
    from discussing the problem\n   space and the protocol itself with a number of
    folks including\n   Bernard Aboba, Jari Arkko, Sam Hartman, Russ Housley, Joe
    Salowey,\n   Jesse Walker, Charles Clancy, Michaela Vanderveen, Kedar Gaonkar,\n
    \  Parag Agashe, Dinesh Dharmaraju, Pasi Eronen, Dan Harkins, Yoshi\n   Ohba,
    Glen Zorn, Alan DeKok, Katrin Hoeper, and other participants of\n   the HOKEY
    Working Group.  Credit for the idea to use EAP-Initiate/\n   Re-auth-Start goes
    to Charles Clancy, and credit for the idea to use\n   multiple link-layer SAs
    to mitigate DoS attacks goes to Yoshi Ohba.\n   Katrin Hoeper suggested the use
    of the windowing technique to handle\n   multiple simultaneous ER exchanges.  Many
    thanks to Pasi Eronen for\n   the suggestion to use hexadecimal encoding for the
    rIKname when sent\n   as part of the keyName-NAI field.  Thanks to Bernard Aboba
    for\n   suggestions in clarifying the EAP lock-step operation, and to Joe\n   Salowey
    and Glen Zorn for help in specifying AAA transport of ERP\n   messages.  Thanks
    to Sam Hartman for the DSRK Authorization\n   Indication mechanism.\n"
  title: Appendix A.  RFC 5296 Acknowledgments
- contents:
  - "Appendix B.  Sample ERP Exchange\n   0.  Authenticator --> Peer:\n         EAP-Initiate/Re-auth-Start
    [Optional]\n   1.  Peer --> Authenticator:\n         EAP-Initiate/Re-auth(SEQ,
    keyName-NAI, cryptosuite,\n                              Auth-tag*)\n   1a. Authenticator
    --> Re-auth-Server:\n         AAA-Request\n         {\n            Authenticator-Id,\n
    \           EAP-Initiate/Re-auth(SEQ, keyName-NAI, cryptosuite,\n                                  Auth-tag*)\n
    \         }\n   2.  ER-Server --> Authenticator:\n         AAA-Response\n         {\n
    \           rMSK,\n            EAP-Finish/Re-auth(SEQ, keyName-NAI, cryptosuite,
    [CB-Info],\n                                Auth-tag*)\n         }\n   2b. Authenticator
    --> Peer:\n         EAP-Finish/Re-auth(SEQ, keyName-NAI, cryptosuite, [CB-Info],\n
    \                           Auth-tag*)\n   * Auth-tag computation is over the
    entire EAP-Initiate/Finish\n     message; the code values for Initiate and Finish
    are different,\n     and thus reflection attacks are mitigated.\n"
  title: Appendix B.  Sample ERP Exchange
- contents:
  - "Authors' Addresses\n   Zhen Cao\n   China Mobile\n   No. 32, Xuanwumenxi Ave.,
    Xicheng District\n   Beijing  100053\n   P.R. China\n   EMail: caozhen@chinamobile.com\n
    \  Baohong He\n   China Academy of Telecommunication Research\n   Beijing\n   P.R.
    China\n   Phone: +86 10 62300050\n   EMail: hebaohong@catr.cn\n   Yang Shi\n   Huawei
    Technologies Co., Ltd.\n   156 Beiqing Road, Zhongguancun, Haidian District\n
    \  Beijing\n   P.R. China\n   Phone: +86 10 60614043\n   EMail: shiyang1@huawei.com\n
    \  Qin Wu (editor)\n   Huawei Technologies Co., Ltd.\n   101 Software Avenue,
    Yuhua District\n   Nanjing, JiangSu  210012\n   China\n   Phone: +86-25-84565892\n
    \  EMail: bill.wu@huawei.com\n   Glen Zorn (editor)\n   Network Zen\n   227/358
    Thanon Sanphawut\n   Bang Na, Bangkok  10260\n   Thailand\n   Phone: +66 (0) 909
    201060\n   EMail: glenzorn@gmail.com\n"
  title: Authors' Addresses
