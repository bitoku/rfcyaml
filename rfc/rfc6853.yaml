- title: __initial_text__
  contents:
  - '              DHCPv6 Redundancy Deployment Considerations

    '
- title: Abstract
  contents:
  - "Abstract\n   This document provides information for those wishing to use DHCPv6\
    \ to\n   support their deployment of IPv6.  In particular, it discusses the\n\
    \   provision of semi-redundant DHCPv6 services.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This memo documents an Internet Best Current Practice.\n\
    \   This document is a product of the Internet Engineering Task Force\n   (IETF).\
    \  It represents the consensus of the IETF community.  It has\n   received public\
    \ review and has been approved for publication by the\n   Internet Engineering\
    \ Steering Group (IESG).  Further information on\n   BCPs is available in Section\
    \ 2 of RFC 5741.\n   Information about the current status of this document, any\
    \ errata,\n   and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc6853.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2013 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction . . . . . . . . . . . . . . . . . . .\
    \ . . . . . .  2\n   2.  Scope and Assumptions  . . . . . . . . . . . . . . .\
    \ . . . . .  2\n     2.1.  Applicability to Prefix Delegation . . . . . . . .\
    \ . . . .  3\n   3.  Service Provider Deployment  . . . . . . . . . . . . . .\
    \ . . .  3\n   4.  Enterprise Deployment  . . . . . . . . . . . . . . . . . .\
    \ . .  4\n   5.  Protocol Requirements  . . . . . . . . . . . . . . . . . . .\
    \ .  5\n     5.1.  DHCPv6 Servers . . . . . . . . . . . . . . . . . . . . . .\
    \  5\n     5.2.  DHCPv6 Relays  . . . . . . . . . . . . . . . . . . . . . .  5\n\
    \     5.3.  DHCPv6 Clients . . . . . . . . . . . . . . . . . . . . . .  5\n  \
    \ 6.  Deployment Models  . . . . . . . . . . . . . . . . . . . . . .  6\n    \
    \ 6.1.  Split Prefixes . . . . . . . . . . . . . . . . . . . . . .  6\n     6.2.\
    \  Multiple Unique Prefixes . . . . . . . . . . . . . . . . .  8\n     6.3.  Identical\
    \ Prefixes . . . . . . . . . . . . . . . . . . . . 10\n   7.  Challenges and Issues\
    \  . . . . . . . . . . . . . . . . . . . . 12\n   8.  Security Considerations\
    \  . . . . . . . . . . . . . . . . . . . 14\n   9.  Acknowledgements . . . . .\
    \ . . . . . . . . . . . . . . . . . . 14\n   10. References . . . . . . . . .\
    \ . . . . . . . . . . . . . . . . . 15\n     10.1. Normative References . . .\
    \ . . . . . . . . . . . . . . . . 15\n     10.2. Informative References . . .\
    \ . . . . . . . . . . . . . . . 15\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   Redundancy and high availability for many components of\
    \ IPv6\n   infrastructure are desirable and, in some deployments, mandatory.\n\
    \   Unfortunately, for DHCPv6 there is currently no standards-based\n   failover\
    \ or redundancy protocol.  An interim solution is to provide\n   semi-redundant\
    \ services: this document specifies an architecture by\n   which this can be achieved.\n"
- title: 2.  Scope and Assumptions
  contents:
  - "2.  Scope and Assumptions\n   DHCPv6 redundancy may be useful in a wide range\
    \ of scenarios.\n   Although the architecture suggested in this document is able\
    \ to be\n   used in a wide range of networks, just two deployment environments\n\
    \   are discussed here: service provider and enterprise network.  All\n   other\
    \ scenarios may be generalized to one of these two cases.\n   In the rest of the\
    \ document, the following assumptions are made with\n   regards to the existing\
    \ DHCPv6 infrastructure, regardless of the\n   environment being considered:\n\
    \   1.  At least two DHCPv6 servers provide a service to the same\n       clients.\
    \  (The architecture does not limit the number of servers,\n       and more may\
    \ be provided if required.)\n   2.  The existing DHCPv6 servers will not directly\
    \ communicate or\n       interact with one another in the assignment of IPv6 addresses\
    \ and\n       the provision of configuration information to requesting clients.\n\
    \   3.  DHCPv6 clients are instructed to run stateful DHCPv6 to request\n    \
    \   at least one IPv6 address.  Configuration information and other\n       options\
    \ (such as a delegated IPv6 prefix) may also be requested\n       as part of the\
    \ stateful DHCPv6 operation.\n   4.  Clients participating in DHCPv6 configuration\
    \ have to properly\n       handle the preference option, including the processing\
    \ of\n       ADVERTISE messages as required by [RFC3315].\n   5.  A DHCPv6 server\
    \ failure does not imply a failure of any other\n       network service or protocol\
    \ (e.g., TFTP servers).  The redundancy\n       of any additional services configured\
    \ by means of DHCPv6 are\n       outside the scope of this document.  (For example,\
    \ a single\n       DHCPv6 server may configure multiple TFTP servers, with\n \
    \      preference for each TFTP server, as specified in [RFC5970].)\n   While\
    \ the techniques described in this document provide some aspects\n   of redundancy,\
    \ it should be noted that complete redundancy will not\n   be available until\
    \ a DHCPv6 failover protocol is standardized.  The\n   requirements for such a\
    \ protocol are described in [FAILREQ].\n"
- title: 2.1.  Applicability to Prefix Delegation
  contents:
  - "2.1.  Applicability to Prefix Delegation\n   The same approaches discussed in\
    \ this document can potentially be\n   applied to prefix delegation (PD) [RFC3633].\
    \  One obvious drawback of\n   using a split prefix model for PD is that use of\
    \ resources is\n   doubled.  It should be noted that such applicability remains\n\
    \   theoretical and was not investigated thoroughly during work on this\n   document.\
    \  As such, the applicability of presented mechanisms to the\n   prefix delegation\
    \ is outside of the scope of this document.\n"
- title: 3.  Service Provider Deployment
  contents:
  - "3.  Service Provider Deployment\n   The service provider model represents cases\
    \ where the network and\n   end-user devices may be administered by separate entities.\n\
    \   The DHCPv6 clients include cable modems, customer gateways or home\n   routers,\
    \ and end-user devices: these are collectively referred to as\n   Customer Premises\
    \ Equipment (CPE).  In some cases hosts may be\n   configured directly using the\
    \ service provider DHCPv6 infrastructure;\n   in others, configuration may be\
    \ via an intermediate router that is\n   being configured by the provider DHCPv6\
    \ infrastructure.  Either way,\n   the service provider DHCPv6 infrastructure\
    \ may be semi-redundant.\n   In discussing this environment, additional assumptions\
    \ to those\n   listed in Section 2 have been made:\n   1.  The service provider\
    \ edge routers and access routers are IPv6\n       enabled when required.  These\
    \ routers are, for example, CMTS\n       (Cable Modem Termination System) for\
    \ cable or DSLAM/BRAS (Digital\n       Subscriber Link Access Multiplexer / Broadband\
    \ Remote Access\n       Server) for DSL.\n   2.  CPE devices are instructed to\
    \ perform stateful DHCPv6 to request\n       at least one IPv6 address, delegated\
    \ prefix, and/or configuration\n       information.  CPE devices may also be instructed\
    \ to use stateless\n       DHCPv6 [RFC3736] to acquire configuration information\
    \ only, a\n       situation that assumes the IPv6 address and prefix information\n\
    \       has been acquired using other means.\n   3.  The primary application of\
    \ this architecture is for native IPv6\n       services.  (Use and applicability\
    \ to transition mechanisms are\n       out of scope for this document.)\n   4.\
    \  The CPE devices must implement a stateful DHCPv6 client\n       [RFC3315].\
    \  Support for DHCPv6 prefix delegation [RFC3633] or\n       stateless DHCPv6\
    \ [RFC3736] may also be implemented.\n"
- title: 4.  Enterprise Deployment
  contents:
  - "4.  Enterprise Deployment\n   The enterprise deployment environment covers cases\
    \ where end-user\n   devices are direct consumers of the configuration provided\
    \ by the\n   DHCP servers without any intermediate devices (as was the case with\n\
    \   home routers used in the service provider environment).  Although\n   enterprise\
    \ IPv6 environments quite often use or require DHCPv6 relay\n   agents, the relays\
    \ do not influence or process the configuration in\n   any way and merely act\
    \ as a transport mechanism.\n   The additional assumptions made for this model\
    \ beyond those listed in\n   Section 2 are:\n   1.  DHCPv6 clients are hosts and\
    \ are considered end nodes, i.e., they\n       consume provided configuration\
    \ and do not use it to provision\n       other devices.  Examples of such clients\
    \ include desktop\n       computers, laptops, printers, other typical office equipment,\
    \ and\n       some mobile devices.\n   2.  The DHCPv6 clients generally do not\
    \ require the assignment of an\n       IPv6 prefix delegation, and as such they\
    \ typically do not support\n       DHCPv6 prefix delegation [RFC3633].\n"
- title: 5.  Protocol Requirements
  contents:
  - "5.  Protocol Requirements\n   Implementation of the architecture for semi-redundant\
    \ DHCPv6 services\n   using existing protocols requires the component DHCPv6 clients,\n\
    \   relays, and servers to have certain capabilities.  The following\n   sections\
    \ describe the requirements of such devices.\n"
- title: 5.1.  DHCPv6 Servers
  contents:
  - "5.1.  DHCPv6 Servers\n   This interim architecture requires the DHCPv6 servers\
    \ that are\n   [RFC3315] compliant and support the necessary options.  Support\
    \ for\n   stateful DHCPv6 and the DHCPv6 preference option [RFC3315] is\n   essential\
    \ to the architecture.  For deployment scenarios where IPv6\n   prefix delegation\
    \ is needed, DHCPv6 servers must support DHCPv6\n   prefix delegation as defined\
    \ by [RFC3633].  Furthermore, the DHCPv6\n   servers must support [RFC3736] if\
    \ stateless DHCPv6 is used.\n"
- title: 5.2.  DHCPv6 Relays
  contents:
  - "5.2.  DHCPv6 Relays\n   DHCPv6 relay agents must be [RFC3315] compliant and must\
    \ support the\n   ability to relay DHCPv6 messages to more than one destination.\n"
- title: 5.3.  DHCPv6 Clients
  contents:
  - "5.3.  DHCPv6 Clients\n   DHCPv6 clients are required to be compliant with [RFC3315]\
    \ and\n   support the necessary options required to support the solution\n   depending\
    \ on the mode of operations and desired behavior:\n   o  If prefix delegation\
    \ is required, DHCPv6 clients must support\n      DHCPv6 prefix delegation as\
    \ defined in [RFC3633].\n   o  Clients must support the acquisition of at least\
    \ one IPv6 address\n      and configuration information using stateful DHCPv6\
    \ as specified\n      by [RFC3315].\n   o  Stateless DHCPv6 [RFC3736] may also\
    \ be supported.\n   o  DHCPv6 clients must recognize and adhere to the processing\
    \ of the\n      advertised DHCPv6 preference option sent by the DHCPv6 servers.\n"
- title: 6.  Deployment Models
  contents:
  - "6.  Deployment Models\n   At the time of writing, a standards-based DHCPv6 redundancy\
    \ protocol\n   is not available.  In the interim solution presented here, existing\n\
    \   DHCPv6 server implementations are used as-is to provide best effort,\n   semi-redundant\
    \ DHCPv6 services.  The behavior of these services will,\n   in part, be governed\
    \ by the configuration of each of the servers.\n   Various aspects of the DHCPv6\
    \ protocol [RFC3315] are used to yield\n   the desired behavior, although there\
    \ is no inter-server or inter-\n   process communication to coordinate DHCPv6\
    \ events and/or activities.\n   The solution does not impact DHCPv4, so DHCP services\
    \ for both IPv4\n   and IPv6 may operate simultaneously on the same physical server(s)\
    \ or\n   may operate on different ones.\n   This section defines three semi-redundant\
    \ models.  Although /64\n   prefixes are used throughout the following sections\
    \ as examples,\n   other prefix lengths may be used as well.\n"
- title: 6.1.  Split Prefixes
  contents:
  - "6.1.  Split Prefixes\n   In the split prefixes model, each DHCPv6 server is configured\
    \ with a\n   unique, non-overlapping pool derived from the /64 prefix deployed\
    \ for\n   use within an IPv6 network.  For example, distributing an allocated\n\
    \   /64 such as 2001:db8:1:1::/64 between two servers would require that\n   it\
    \ be split into two /65 pools, 2001:db8:1:1:0000::/65 and 2001:db8:\n   1:1:8000::/65.\n\
    \   Both DHCPv6 servers are simultaneously active and operational, and\n   each\
    \ allocates IPv6 addresses from the corresponding pools per device\n   class.\
    \  The address allocation is governed largely through the use of\n   the DHCPv6\
    \ preference option, so the server with the higher\n   preference value is always\
    \ preferred.  Additional proprietary\n   mechanisms can be used to further enforce\
    \ the favoring of one DHCP\n   server over another.  An example of such a scenario\
    \ is presented in\n   Figure 1.\n   It is important to note that, over time, it\
    \ is possible that bindings\n   will be unevenly distributed amongst the DHCPv6\
    \ servers, and no one\n   server will be authoritative for all of them.\n   As\
    \ defined in [RFC3315], a DHCPv6 ADVERTISE message with a preference\n   option\
    \ of 255 is an indicator to a DHCPv6 client to immediately begin\n   a client-initiated\
    \ message exchange by transmitting a REQUEST message\n   to the server that sent\
    \ the ADVERTISE.  Alternatively, a DHCPv6\n   ADVERTISE message with no preference\
    \ option (or one with a value less\n   than 255) is an indicator to the client\
    \ that it must wait for\n   subsequent ADVERTISE messages before choosing the\
    \ server to which is\n   responds, as described in Section 17.1.2 of [RFC3315].\n\
    \   In the event of a DHCPv6 server failure, it is desirable (but not\n   essential)\
    \ for a server other than the server that originally\n   responded to be able\
    \ to rebind the client's lease.  Given the\n   proposed architecture, the remaining\
    \ active DHCPv6 server will have a\n   different address pool configured, making\
    \ it technically incorrect to\n   rebind the client in its current state.  Ultimately,\
    \ the rebinding\n   will fail and the client will acquire a new binding from the\
    \ pool\n   configured in the active server.\n   To reduce the possibility that\
    \ a client or some other element on the\n   network will experience a disruption\
    \ in service or access to relevant\n   binding data, shorter values for T1, T2,\
    \ valid, and preferred\n   lifetimes can be used.  The values for the last three\
    \ can be adjusted\n   or configured to minimize service disruption.  Ideally,\
    \ setting them\n   equal (or nearly equal) can be used to trigger a DHCPv6 client\
    \ to\n   reacquire the IPv6 address, prefix, and/or configuration information\n\
    \   almost immediately after the rebinding fails.  It is important to\n   note,\
    \ however, that shorter values will create an additional load on\n   the DHCPv6\
    \ servers.\n   While using a split prefix configuration model, the dynamic updates\n\
    \   to DNS [RFC2136] can be coordinated to ensure that the DNS is\n   properly\
    \ updated with the current binding information.  Challenges\n   arise with regards\
    \ to the update of the PTR resource record for IPv6\n   addresses since the DNS\
    \ information may need to be overwritten in a\n   failure condition.  The use\
    \ of split prefixes enables the\n   differentiation of bindings and binding timing\
    \ to determine which\n   represents the current state.  This becomes particularly\
    \ important\n   when DHCPv6 Leasequery [RFC5007] and/or DHCPv6 Bulk Leasequery\n\
    \   [RFC5460] are used to determine lease or binding state.\n   Finally, a benefit\
    \ of this scheme is that the use of separate pools\n   per DHCPv6 server makes\
    \ failure conditions more obvious and\n   detectable.\n                 +----------+\
    \                 +-----------+\n                 | Client 1 +-\\            +--+\
    \ Server 1  |\n                 +----------+  \\           |  +-----------+\n\
    \                                \\          |\n                             \
    \    \\         |\n                                  \\        |\n           \
    \      +----------+      \\       |  +-----------+\n                 | Client\
    \ 2 +--------------+--| Server 2  |\n                 +----------+      /    \
    \   |  +-----------+\n                       .          /        .\n         \
    \              .         /         .\n                       .        /      \
    \    .\n                 +----------+  /           .  +-----------+\n        \
    \         | Client N +-/            .--| n+1 Server|\n                 +----------+\
    \                 +-----------+\n                 Server 1\n                 ========\n\
    \                 Prefix = 2001:db8:1:1::/64\n                 Pool = 2001:db8:1:1:0000::/65\n\
    \                 Preference = 255\n                 Server 2\n              \
    \   ========\n                 Prefix = 2001:db8:1:1::/64\n                 Pool\
    \ = 2001:db8:1:1:8000::/65\n                 Preference = 0\n                \
    \ Server n+1\n                 ==========\n                 Prefix, pool, and\
    \ preference would\n                 vary based on prefix definition\n       \
    \              Figure 1: Split prefixes approach\n"
- title: 6.2.  Multiple Unique Prefixes
  contents:
  - "6.2.  Multiple Unique Prefixes\n   In the multiple prefix model, each DHCPv6\
    \ server is configured with a\n   unique, non-overlapping prefix.  A /64 pool\
    \ equal to the prefix is\n   configured on each server.  For example, the 2001:db8:1:1::/64\
    \ pool\n   would be assigned to a single DHCPv6 server for allocation to clients\n\
    \   equal to its parent prefix 2001:db8:1:1::/64.  The second DHCPv6\n   server\
    \ could use 2001:db8:1:5::/64 as both pool and prefix.  This\n   would be repeated\
    \ for each active DHCP server.  An example of this\n   scenario is presented in\
    \ Figure 2.\n   The major difference between the split prefixes approach and the\n\
    \   multiple unique prefixes approach is that the latter does not require\n  \
    \ prefixes to be adjacent.  In fact, the split prefixes approach can be\n   considered\
    \ a special case of the multiple unique prefixes approach.\n   This approach uses\
    \ a unique prefix and ultimately a single pool per\n   DHCPv6 server with the\
    \ corresponding prefixes configured for use in\n   the network.  The corresponding\
    \ network infrastructure must in turn\n   be configured to use multiple prefixes\
    \ on the interface(s) facing the\n   DHCPv6 clients.  The configuration is similar\
    \ on all the servers, but\n   a different prefix and a different preference are\
    \ used for each\n   DHCPv6 server.\n   This approach drastically increases the\
    \ rate of consumption of IPv6\n   prefixes and also yields operational and management\
    \ challenges\n   related to the underlying network since a significantly higher\
    \ number\n   of prefixes need to be configured and routed.  It also does not\n\
    \   provide a clean migration path to the desired solution using a\n   standards-based\
    \ DHCPv6 redundancy or failover protocol (which, of\n   course, has yet to be\
    \ specified).\n   The use of multiple unique prefixes provides benefits related\
    \ to\n   dynamic updates to DNS similar to those referred to in Section 6.1.\n\
    \   The use of multiple unique prefixes enables the differentiation of\n   bindings\
    \ and binding timing to determine which represents the current\n   state.  This\
    \ becomes particularly important when DHCPv6 Leasequery\n   [RFC5007] and/or DHCPv6\
    \ Bulk Leasequery [RFC5460] are used to\n   determine lease or binding state.\
    \  The use of separate prefixes and\n   pools per DHCPv6 server makes failure\
    \ conditions more obvious and\n   detectable.\n                 +----------+ \
    \                +-----------+\n                 | Client 1 +-\\            +--+\
    \ Server 1  |\n                 +----------+  \\           |  +-----------+\n\
    \                                \\          |\n                             \
    \    \\         |\n                                  \\        |\n           \
    \      +----------+      \\       |  +-----------+\n                 | Client\
    \ 2 +--------------+--| Server 2  |\n                 +----------+      /    \
    \   |  +-----------+\n                       .          /        .\n         \
    \              .         /         .\n                       .        /      \
    \    .\n                 +----------+  /           .  +-----------+\n        \
    \         | Client N +-/            .--| n+1 Server|\n                 +----------+\
    \                 +-----------+\n                 Server 1\n                 ========\n\
    \                 Prefix = 2001:db8:1:1::/64\n                 Pool = 2001:db8:1:1::/64\n\
    \                 Preference = 255\n                 Server 2\n              \
    \   ========\n                 Prefix = 2001:db8:1:5::/64\n                 Pool\
    \ = 2001:db8:1:5::/64\n                 Preference = 0\n                 Server\
    \ 3\n                 ========\n                 Prefix = 2001:db8:1:f::/64\n\
    \                 Pool = 2001:db8:1:f::/64\n                 Preference = [1..254]\n\
    \                 Figure 2: Multiple unique prefix approach\n"
- title: 6.3.  Identical Prefixes
  contents:
  - "6.3.  Identical Prefixes\n   In the identical prefix model, each DHCPv6 server\
    \ is configured with\n   the same overlapping prefix and pool deployed for use\
    \ within an IPv6\n   network.  Distribution between two or more servers, for example,\n\
    \   would require that the same /64 prefix and pool be configured on all\n   DHCP\
    \ servers.  For instance, the 2001:db8:1:1::/64 pool would be\n   assigned to\
    \ all the DHCPv6 servers for allocation to clients derived\n   from the 2001:db8:1:1::/64\
    \ prefix.  This would be repeated for each\n   active DHCP server.  An example\
    \ of such a scenario is presented in\n   Figure 3.\n   This approach uses the\
    \ same prefix, length, and pool definition\n   across multiple DHCPv6 servers.\
    \  All other configuration parameters\n   remain the same, with the exception\
    \ of the DHCPv6 preference.  Such\n   an approach conceivably eases the migration\
    \ of DHCPv6 services to\n   fully support a standards-based redundancy or failover\
    \ protocol once\n   such solution becomes available.  Similar to the split prefix\n\
    \   architecture described above, this approach does not place any\n   additional\
    \ addressing requirements on the network infrastructure.\n   The use of identical\
    \ prefixes provides no benefit or advantage\n   related to dynamic DNS updates,\
    \ support of DHCPv6 Leasequery\n   [RFC5007] or DHCPv6 Bulk Leasequery [RFC5460].\
    \  In this case, all\n   DHCP servers will use the same prefix and pool configurations\
    \ making\n   it less obvious that a failure condition or event has occurred.\n\
    \                 +----------+                 +-----------+\n               \
    \  | Client 1 +-\\            +--+ Server 1  |\n                 +----------+\
    \  \\           |  +-----------+\n                                \\         \
    \ |\n                                 \\         |\n                         \
    \         \\        |\n                 +----------+      \\       |  +-----------+\n\
    \                 | Client 2 +--------------+--| Server 2  |\n               \
    \  +----------+      /       |  +-----------+\n                       .      \
    \    /        .\n                       .         /         .\n              \
    \         .        /          .\n                 +----------+  /           .\
    \  +-----------+\n                 | Client N +-/            .--| n+1 Server|\n\
    \                 +----------+                 +-----------+\n               \
    \  Server 1\n                 ========\n                 Prefix = 2001:db8:1:1::/64\n\
    \                 Pool = 2001:db8:1:1::/64\n                 Preference = 255\n\
    \                 Server 2\n                 ========\n                 Prefix\
    \ = 2001:db8:1:1::/64\n                 Pool = 2001:db8:1:1::/64\n           \
    \      Preference = 0\n                 Server 3\n                 ========\n\
    \                 Prefix = 2001:db8:1:1::/64\n                 Pool = 2001:db8:1:1::/64\n\
    \                 Preference = [1..254]\n                    Figure 3: Identical\
    \ prefix approach\n"
- title: 7.  Challenges and Issues
  contents:
  - "7.  Challenges and Issues\n   The lack of interaction between DHCPv6 servers\
    \ introduces a number of\n   challenges related to the operations of the same\
    \ service instances in\n   a production environment.  The following areas are\
    \ of particular\n   concern:\n   o  In the identical prefixes scenario, both servers\
    \ must follow the\n      same address allocation procedure, i.e., they both must\
    \ use the\n      same algorithm and the same policy to determine which address\
    \ is\n      going to be assigned to a specific client.  Otherwise, there is a\n\
    \      distinct chance that each server will assign the same address to\n    \
    \  two different clients.  It is expected that both servers will\n      receive\
    \ each incoming REQUEST message.  Usually, no special action\n      is required\
    \ to achieve this as REQUEST messages are sent to a\n      multicast address by\
    \ clients.  Relays are expected to forward\n      incoming client messages to\
    \ all servers.  The client indicates the\n      chosen server by including its\
    \ DHCP Unique Identifier (DUID) in\n      the Server-ID option.  The chosen server\
    \ assigns the address and\n      other configuration options, while the other\
    \ server discards the\n      incoming request.  In case of a failure of one server,\
    \ the other\n      server will assign the same address by following the same\n\
    \      algorithm and the same policy.\n   o  Interactions with DNS server(s) using\
    \ dynamic update for the same\n      address when one or more DHCPv6 servers have\
    \ become unavailable.\n      This specifically becomes a challenge when (or if)\
    \ nodes that were\n      initially granted a lease:\n      1.  Attempt to renew\
    \ or rebind the lease originally granted, or\n      2.  Attempt to obtain a new\
    \ lease\n      The DHCID resource record [RFC4701] allows identification of the\n\
    \      current owner of the specific DNS data that is the target of an\n     \
    \ update [RFC2136].  [RFC4704] specifies how DHCPv6 servers and/or\n      clients\
    \ may perform updates.  [RFC4703] provides a way to solve\n      conflicts between\
    \ clients.  Although [RFC4703] deals with most\n      cases, it is still possible\
    \ to leave abandoned resource records.\n      Consider the following scenario:\
    \ there are two independent\n      servers, A and B.  Server A assigns a lease\
    \ to a client and\n      updates the DNS with an AAAA record for the assigned\
    \ address.\n      When the client renews, server A is not available and server\
    \ B\n      assigns a different lease.  The DNS is again updated, so now two\n\
    \      AAAA resource records are present for the client: there is no\n      indication\
    \ as to which of the two leases is active.  If server A\n      never recovers,\
    \ its information may never be removed (although it\n      should be noted that\
    \ this case is somewhat similar to that of a\n      single server crashing and\
    \ leaving abandoned resource records).\n   o  Interactions with DHCPv6 servers\
    \ to facilitate the acquisition of\n      IPv6 lease data by way of the DHCPv6\
    \ Leasequery [RFC5007] or\n      DHCPv6 Bulk Leasequery [RFC5460] protocols when\
    \ one or more DHCPv6\n      servers have granted leases to DHCPv6 clients and\
    \ later became\n      unavailable.  If the lease data is required and the granting\n\
    \      server is unavailable, it will not be possible to obtain any\n      information\
    \ about leases granted until one of the following has\n      taken place:\n  \
    \    1.  The granting DHCPv6 server becomes available with all lease\n       \
    \   information restored.\n      2.  The client has renewed or rebound its lease\
    \ against a\n          different DHCPv6 server.\n      It is important to note\
    \ that any exchange of available leases and\n      synchronization between DHCPv6\
    \ servers is not possible until a\n      redundancy or failover protocol is standardized\
    \ or proprietary\n      solutions become available.\n"
- title: 8.  Security Considerations
  contents:
  - "8.  Security Considerations\n   Additional security considerations are created\
    \ through the use of\n   this interim architecture beyond what has been cited\
    \ in Section 23 of\n   [RFC3315].  In particular, the dynamic DNS update using\
    \ the models\n   defined in this document allows for the possibility of not removing\n\
    \   abandoned DNS records even when using the conflict resolution\n   mechanism\
    \ defined in [RFC4703].  However, this is no worse than a\n   case where a single\
    \ deployed server crashes and its lease database\n   cannot be recovered.\n  \
    \ When using the identical prefixes model, care must be taken to ensure\n   that\
    \ all servers use the same lease allocation procedure and are\n   configured with\
    \ the same policy.  If this guidance is not followed,\n   there is a risk of assignment\
    \ of the same lease to two separate\n   clients.  In some cases, that situation\
    \ can be recovered by using\n   Duplicate Address Detection (Neighbor Discovery)\
    \ and the DECLINE\n   mechanism (DHCPv6).\n"
- title: 9.  Acknowledgements
  contents:
  - "9.  Acknowledgements\n   The authors would like to thank Bernie Volz, Kim Kinnear,\
    \ Ralph\n   Droms, David Hankins, Chuck Anderson, Ted Lemon, Stephen Farrel, Pete\n\
    \   McCann, Robert Sparks, Martin Stiemerling, Brian Haberman, and Barry\n   Leiba\
    \ for their input and review.\n   Special thanks to Stephen Morris for his numerous\
    \ spelling, grammar\n   corrections, and proofreading.\n   This work has been\
    \ partially supported by Department of Computer\n   Communications (a division\
    \ of Gdansk University of Technology) and\n   the National Centre for Research\
    \ and Development (Poland) under the\n   European Regional Development Fund, Grant\
    \ No. POIG.01.01.02-00-045/\n   09-00 (Future Internet Engineering Project).\n"
- title: 10.  References
  contents:
  - '10.  References

    '
- title: 10.1.  Normative References
  contents:
  - "10.1.  Normative References\n   [RFC2136]  Vixie, P., Thomson, S., Rekhter, Y.,\
    \ and J. Bound,\n              \"Dynamic Updates in the Domain Name System (DNS\
    \ UPDATE)\",\n              RFC 2136, April 1997.\n   [RFC3315]  Droms, R., Bound,\
    \ J., Volz, B., Lemon, T., Perkins, C.,\n              and M. Carney, \"Dynamic\
    \ Host Configuration Protocol for\n              IPv6 (DHCPv6)\", RFC 3315, July\
    \ 2003.\n   [RFC3633]  Troan, O. and R. Droms, \"IPv6 Prefix Options for Dynamic\n\
    \              Host Configuration Protocol (DHCP) version 6\", RFC 3633,\n   \
    \           December 2003.\n   [RFC3736]  Droms, R., \"Stateless Dynamic Host\
    \ Configuration Protocol\n              (DHCP) Service for IPv6\", RFC 3736, April\
    \ 2004.\n   [RFC4701]  Stapp, M., Lemon, T., and A. Gustafsson, \"A DNS Resource\n\
    \              Record (RR) for Encoding Dynamic Host Configuration\n         \
    \     Protocol (DHCP) Information (DHCID RR)\", RFC 4701,\n              October\
    \ 2006.\n   [RFC4703]  Stapp, M. and B. Volz, \"Resolution of Fully Qualified\n\
    \              Domain Name (FQDN) Conflicts among Dynamic Host\n             \
    \ Configuration Protocol (DHCP) Clients\", RFC 4703,\n              October 2006.\n\
    \   [RFC4704]  Volz, B., \"The Dynamic Host Configuration Protocol for\n     \
    \         IPv6 (DHCPv6) Client Fully Qualified Domain Name (FQDN)\n          \
    \    Option\", RFC 4704, October 2006.\n   [RFC5007]  Brzozowski, J., Kinnear,\
    \ K., Volz, B., and S. Zeng,\n              \"DHCPv6 Leasequery\", RFC 5007, September\
    \ 2007.\n   [RFC5460]  Stapp, M., \"DHCPv6 Bulk Leasequery\", RFC 5460,\n    \
    \          February 2009.\n   [RFC5970]  Huth, T., Freimann, J., Zimmer, V., and\
    \ D. Thaler, \"DHCPv6\n              Options for Network Boot\", RFC 5970, September\
    \ 2010.\n"
- title: 10.2.  Informative References
  contents:
  - "10.2.  Informative References\n   [FAILREQ]  Mrugalski, T. and K. Kinnear, \"\
    DHCPv6 Failover\n              Requirements\", Work in Progress, September 2012.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   John Jason Brzozowski\n   Comcast Cable Communications\n\
    \   1306 Goshen Parkway\n   West Chester, PA  19380\n   USA\n   Phone: +1-609-377-6594\n\
    \   EMail: john_brzozowski@cable.comcast.com\n   Jean-Francois Tremblay\n   Videotron\
    \ G.P.\n   612 Saint-Jacques\n   Montreal, Quebec  H3C 4M8\n   Canada\n   EMail:\
    \ jf@jftremblay.com\n   Jack Chen\n   Time Warner Cable\n   13820 Sunrise Valley\
    \ Drive\n   Herndon, VA  20171\n   USA\n   EMail: jack.chen@twcable.com\n   Tomasz\
    \ Mrugalski\n   Internet Systems Consortium, Inc.\n   950 Charter St.\n   Redwood\
    \ City, CA  94063\n   USA\n   Phone: +1 650 423 1345\n   EMail: tomasz.mrugalski@gmail.com\n"
