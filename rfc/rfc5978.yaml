- title: __initial_text__
  contents:
  - '              Using and Extending the NSIS Protocol Family

    '
- title: Abstract
  contents:
  - "Abstract\n   This document gives an overview of the Next Steps in Signaling (NSIS)\n\
    \   framework and protocol suite created by the NSIS Working Group during\n  \
    \ the period of 2001-2010.  It also includes suggestions on how the\n   industry\
    \ can make use of the new protocols and how the community can\n   exploit the\
    \ extensibility of both the framework and existing\n   protocols to address future\
    \ signaling needs.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document is not an Internet Standards Track specification;\
    \ it is\n   published for informational purposes.\n   This document is a product\
    \ of the Internet Engineering Task Force\n   (IETF).  It represents the consensus\
    \ of the IETF community.  It has\n   received public review and has been approved\
    \ for publication by the\n   Internet Engineering Steering Group (IESG).  Not\
    \ all documents\n   approved by the IESG are a candidate for any level of Internet\n\
    \   Standard; see Section 2 of RFC 5741.\n   Information about the current status\
    \ of this document, any errata,\n   and how to provide feedback on it may be obtained\
    \ at\n   http://www.rfc-editor.org/info/rfc5978.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2010 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction . . . . . . . . . . . . . . . . . . .\
    \ . . . . . .  3\n   2.  The NSIS Architecture  . . . . . . . . . . . . . . .\
    \ . . . . .  3\n   3.  The General Internet Signaling Transport . . . . . . .\
    \ . . . .  6\n   4.  Quality-of-Service NSLP  . . . . . . . . . . . . . . . .\
    \ . . . 11\n   5.  NAT/Firewall Traversal NSLP  . . . . . . . . . . . . . . .\
    \ . . 12\n   6.  Deploying the Protocols  . . . . . . . . . . . . . . . . . .\
    \ . 13\n     6.1.  Deployment Issues Due to Use of RAO  . . . . . . . . . . .\
    \ 14\n     6.2.  Deployment Issues with NATs and Firewalls  . . . . . . . . 15\n\
    \     6.3.  Incremental Deployment and Workarounds . . . . . . . . . . 15\n  \
    \ 7.  Security Features  . . . . . . . . . . . . . . . . . . . . . . 16\n   8.\
    \  Extending the Protocols  . . . . . . . . . . . . . . . . . . . 16\n     8.1.\
    \  Overview of Administrative Actions Needed When\n           Extending NSIS .\
    \ . . . . . . . . . . . . . . . . . . . . . 17\n     8.2.  GIST . . . . . . .\
    \ . . . . . . . . . . . . . . . . . . . . 17\n       8.2.1.  Use of Different\
    \ Message Routing Methods . . . . . . . 18\n       8.2.2.  Use of Different Transport\
    \ Protocols or Security\n               Capabilities . . . . . . . . . . . . .\
    \ . . . . . . . . 18\n       8.2.3.  Use of Alternative Security Services . .\
    \ . . . . . . . 19\n       8.2.4.  Query Mode Packet Interception Schemes . .\
    \ . . . . . . 19\n       8.2.5.  Use of Alternative NAT Traversal Mechanisms \
    \ . . . . . 20\n       8.2.6.  Additional Error Identifiers . . . . . . . . .\
    \ . . . . 20\n       8.2.7.  Defining New Objects To Be Carried in GIST . . .\
    \ . . . 21\n       8.2.8.  Adding New Message Types . . . . . . . . . . . . .\
    \ . . 21\n     8.3.  QoS NSLP . . . . . . . . . . . . . . . . . . . . . . . .\
    \ . 21\n     8.4.  QoS Specifications . . . . . . . . . . . . . . . . . . . .\
    \ 22\n     8.5.  NAT/Firewall NSLP  . . . . . . . . . . . . . . . . . . . . 23\n\
    \     8.6.  New NSLP Protocols . . . . . . . . . . . . . . . . . . . . 23\n  \
    \ 9.  Security Considerations  . . . . . . . . . . . . . . . . . . . 26\n   10.\
    \ Acknowledgements . . . . . . . . . . . . . . . . . . . . . . . 27\n   11. References\
    \ . . . . . . . . . . . . . . . . . . . . . . . . . . 27\n     11.1. Normative\
    \ References . . . . . . . . . . . . . . . . . . . 27\n     11.2. Informative\
    \ References . . . . . . . . . . . . . . . . . . 28\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   The Next Steps in Signaling (NSIS) Working Group was formed\
    \ in\n   November 2001 to develop an Internet signaling protocol suite that\n\
    \   would attempt to remedy some of the perceived shortcomings of\n   solutions\
    \ based on the Resource ReSerVation Protocol (RSVP), e.g.,\n   with respect to\
    \ mobility and Quality-of-Service (QoS)\n   interoperability.  The initial charter\
    \ was focused on QoS signaling\n   as the first use case, taking RSVP as the background\
    \ for the work.\n   In May 2003, middlebox traversal was added as an explicit\
    \ second use\n   case.  The requirements for the new generation of signaling protocols\n\
    \   are documented in [RFC3726], and an analysis of existing signaling\n   protocols\
    \ can be found in [RFC4094].\n   The design of NSIS is based on a two-layer model,\
    \ where a general\n   signaling transport layer provides services to an upper\
    \ signaling\n   application layer.  The design was influenced by Bob Braden's\n\
    \   document entitled \"A Two-Level Architecture for Internet Signaling\"\n  \
    \ [TWO-LEVEL].\n   This document gives an overview of the NSIS framework and protocol\n\
    \   suite at the time of writing (2010), provides an introduction to the\n   use\
    \ cases for which the current version of NSIS was designed,\n   describes how\
    \ to deploy NSIS in existing networks, and summarizes how\n   the protocol suite\
    \ can be enhanced to satisfy new use cases.\n"
- title: 2.  The NSIS Architecture
  contents:
  - "2.  The NSIS Architecture\n   The design of the NSIS protocol suite reuses ideas\
    \ and concepts from\n   RSVP but essentially divides the functionality into two\
    \ layers.  The\n   lower layer, the NSIS Transport Layer Protocol (NTLP), is in\
    \ charge\n   of transporting the higher-layer protocol messages to the next\n\
    \   signaling node on the path.  This includes discovery of the next-hop\n   NSIS\
    \ node, which may not be the next routing hop, and different\n   transport and\
    \ security services depending on the signaling\n   application requirements. \
    \ The General Internet Signaling Transport\n   (GIST) [RFC5971] has been developed\
    \ as the protocol that fulfills the\n   role of the NTLP.  The NSIS protocol suite\
    \ supports both IP protocol\n   versions, IPv4 and IPv6.\n   The actual signaling\
    \ application logic is implemented in the higher\n   layer of the NSIS stack,\
    \ the NSIS Signaling Layer Protocol (NSLP).\n   While GIST is only concerned with\
    \ transporting NSLP messages hop-by-\n   hop between pairs of signaling nodes,\
    \ the end-to-end signaling\n   functionality is provided by the NSLP protocols\
    \ if needed.  Not all\n   NSLP protocols need to perform end-to-end signaling.\
    \  The current\n   protocols have features to confine the signaling to a limited\
    \ part of\n   the path (such as the interior of a domain).  Messages transmitted\
    \ by\n   GIST on behalf of an NSLP are identified by a unique NSLP identifier\n\
    \   (NSLPID) associated with the NSLP.  Two NSLP protocols are currently\n   specified:\
    \ one concerning Quality-of-Service signaling [RFC5974] and\n   one to enable\
    \ NAT/firewall traversal [RFC5973].\n   NSIS is primarily designed to provide\
    \ the signaling needed to install\n   state on nodes that lie on the path that\
    \ will be taken by some end-\n   to-end flow of data packets; the state installed\
    \ should facilitate or\n   enhance some characteristic of the data flow.  This\
    \ is typically\n   achieved by routing signaling messages along the same path\
    \ (known as\n   \"path-coupled signaling\") and intercepting the signaling message\
    \ at\n   NSIS-capable nodes.  However, the NSIS architecture is designed to be\n\
    \   flexible, and the routing of signaling messages is controlled by the\n   Message\
    \ Routing Method (MRM) that is applied to the signaling\n   messages.  The initial\
    \ specifications define two MRMs:\n   o  the basic Path Coupled MRM designed to\
    \ drive signaling along the\n      path that will be followed by the data flow,\
    \ and\n   o  an alternative Loose End MRM, which is applicable for\n      preconditioning\
    \ the state in firewalls and Network Address\n      Translation (NAT) middleboxes\
    \ when data flow destinations lie\n      behind this sort of middlebox.  Without\
    \ preconditioning, these\n      middleboxes will generally reject signaling messages\
    \ originating\n      outside the region 'protected' by the middlebox and where\
    \ the\n      destination is located.\n   Parameters carried by each signaling\
    \ message drive the operation of\n   the relevant transport or signaling application.\
    \  In particular, the\n   messages will carry Message Routing Information (MRI)\
    \ that will allow\n   the NSIS nodes to identify the data flow to which the signaling\n\
    \   applies.  Generally, the intercepted messages will be reinjected into\n  \
    \ the network after processing by the NSIS entities and will be routed\n   further\
    \ towards the destination, possibly being intercepted by\n   additional NSIS-capable\
    \ nodes before arriving at the flow endpoint.\n   As with RSVP, it is expected\
    \ that the signaling message will make a\n   complete round trip either along\
    \ the whole end-to-end path or a part\n   of it if the scope of the signaling\
    \ is limited.  This implements a\n   two-phase strategy in which capabilities\
    \ are assessed and provisional\n   reservations are made on the outbound leg;\
    \ these provisional\n   reservations are then confirmed and operational state\
    \ is installed on\n   the return leg.  Unlike RSVP, signaling is normally initiated\
    \ at the\n   source of the data flow, making it easier to ensure that the\n  \
    \ signaling follows the expected path of the data flow, but can also be\n   receiver\
    \ initiated as in RSVP.\n   A central concept of NSIS is the Session Identifier\
    \ (SID).  Signaling\n   application states are indexed and referred to through\
    \ the SID in all\n   the NSLPs.  This decouples the state information from IP\
    \ addresses,\n   allowing dynamic IP address changes for signaling flows, e.g.,\
    \ due to\n   mobility: changes in IP addresses do not force complete teardown\
    \ and\n   re-initiation of a signaling application state; they force merely an\n\
    \   update of the state parameters in the NSLP(s), especially the MRI.\n   At\
    \ the NTLP (GIST) layer, the SID is not meaningful by itself, but is\n   used\
    \ together with the NSLP identifier (NSLPID) and the Message\n   Routing Information\
    \ (MRI).  This 3-tuple is used by GIST to index and\n   manage the signaling flows.\
    \  Changes of routing or dynamic IP address\n   changes, e.g., due to mobility,\
    \ will require GIST to modify already\n   established Messaging Associations (MAs)\
    \ that are used to channel\n   NSLP messages between adjacent GIST peers in order\
    \ to satisfy the\n   NSLP MRI for each SID.\n   The following design restrictions\
    \ were imposed for the first phase of\n   the protocol suite.  They may be lifted\
    \ in the future, and new\n   functionality may be added into the protocols at\
    \ some later stage.\n   o  Initial focus on MRMs for path-coupled signaling: GIST\
    \ transports\n      messages towards an identified unicast data flow destination\
    \ based\n      on the signaling application request, and does not directly\n \
    \     support path-decoupled signaling, e.g., QoS signaling to a\n      bandwidth\
    \ broker or other off-path resource manager.  The\n      framework also supports\
    \ a Loose End MRM used to discover GIST\n      nodes with particular properties\
    \ in the direction of a given\n      address; for example, the NAT/firewall NSLP\
    \ uses this method to\n      discover a NAT along the upstream data path.\n  \
    \ o  No multicast support: Introducing support for multicast was deemed\n    \
    \  too much overhead, considering the currently limited support for\n      global\
    \ IP multicast.  Thus, the current GIST and the NSLP\n      specifications consider\
    \ unicast flows only.\n   The key documents specifying the NSIS framework are:\n\
    \   o  Requirements for Signaling Protocols [RFC3726]\n   o  Next Steps in Signaling:\
    \ Framework [RFC4080]\n   o  Security Threats for NSIS [RFC4081]\n   The protocols\
    \ making up the suite specified by the NSIS Working Group\n   are documented in:\n\
    \   o  The General Internet Signaling Transport protocol [RFC5971]\n   o  Quality-of-Service\
    \ NSLP (QoS NSLP) [RFC5974]\n   o  The QoS specification template [RFC5975]\n\
    \   o  NAT/firewall traversal NSLP [RFC5973]\n   The next three sections provide\
    \ a brief survey of GIST, the QoS NSLP,\n   and the NAT/firewall NSLP.\n"
- title: 3.  The General Internet Signaling Transport
  contents:
  - "3.  The General Internet Signaling Transport\n   The General Internet Signaling\
    \ Transport (GIST) [RFC5971] provides\n   signaling transport and security services\
    \ to NSIS Signaling Layer\n   Protocols (NSLP) and the associated signaling applications.\
    \  GIST\n   does not define new IP transport protocols or security mechanisms\
    \ but\n   rather makes use of existing protocols, such as TCP, UDP, TLS, and\n\
    \   IPsec.  Applications can indicate the desired transport attributes\n   for\
    \ the signaling flow, e.g., unreliable or reliable, and GIST then\n   chooses\
    \ the most appropriate transport protocol(s) to satisfy the\n   requirements of\
    \ the flow.  GIST will normally use UDP if unreliable\n   signaling is adequate,\
    \ TCP if reliability is required, and TLS over\n   TCP for secure (and reliable)\
    \ signaling flows, but there exist\n   extensibility provisions within GIST that\
    \ will allow alternatives to\n   be specified in the future.  The NSIS layered\
    \ protocol stack is shown\n   in Figure 1.\n               +-----+ +--------+\
    \ +-------+\n               |     | |        | |       |\n               | QoS\
    \ | | NAT/FW | |  ...  |       NSLP\n               |     | |        | |     \
    \  |\n               +-----+ +--------+ +-------+\n   ---------------------------------------------------------------------\n\
    \               +--------------------------+\n               |               \
    \           |\n               |          GIST            |       NTLP\n      \
    \         |                          |\n               +--------------------------+\n\
    \   ---------------------------------------------------------------------\n  \
    \             +------------+-------------+\n               |     TLS    |    DTLS\
    \     |  Security Support*\n               +------------+-------------+\n    \
    \           | TCP | SCTP | UDP | DCCP  |  Transport Protocol*\n              \
    \ +--------------------------+\n               +--------------------------+\n\
    \               |         IPsec            |\n               +--------------------------+\n\
    \               +--------------------------+\n               |    IPv4     | \
    \   IPv6    |\n               +--------------------------+\n    * The Security\
    \ Support and Transport Protocol layers show some\n      possible protocols that\
    \ could be used to transport NSIS messages.\n      To provide authentication and/or\
    \ integrity protection support,\n      the transport protocol has to be paired\
    \ with a suitable security\n      mechanism, e.g., TCP with TLS, or Datagram Congestion\
    \ Control\n      Protocol (DCCP) with DTLS.\n                     Figure 1: The\
    \ NSIS protocol stack\n   GIST divides up the data flow's end-to-end path into\
    \ a number of\n   segments between pairs of NSIS-aware peer nodes located along\
    \ the\n   path.  Not every router or other middlebox on the path needs to be\n\
    \   NSIS aware: each segment of the signaling path may incorporate\n   several\
    \ routing hops.  Also not every NSIS-aware node necessarily\n   implements every\
    \ possible signaling application.  If the signaling\n   for a flow requests services\
    \ from a subset of the applications, then\n   only nodes that implement those\
    \ services are expected to participate\n   as peers, and even some of these nodes\
    \ can decline to operate on a\n   particular flow if, for example, the additional\
    \ load might overload\n   the processing capability of the node.  These characteristics\
    \ mean\n   that incremental deployment of NSIS capabilities is possible both\n\
    \   with the initial protocol suite, and for any future NSLP applications\n  \
    \ that might be developed.  The following paragraphs describe how a\n   signaling\
    \ segment is set up to offer the transport and security\n   characteristics needed\
    \ by a single NSLP.\n   When an NSLP application wants to send a message towards\
    \ a flow\n   endpoint, GIST starts the process of discovering the next signaling\n\
    \   node by sending a Query message towards the destination of the\n   related\
    \ data flow.  This Query carries the NSLP identifier (NSLPID)\n   and Message\
    \ Routing Information (MRI), among others.  The MRI\n   contains enough information\
    \ to control the routing of the signaling\n   message and to identify the associated\
    \ data flow.  The next GIST node\n   on the path receives the message, and if\
    \ it is running the same NSLP,\n   it provides the MRI to the NSLP application\
    \ and requests it to make a\n   decision on whether to peer with the querying\
    \ node.  If the NSLP\n   application chooses to peer, GIST sets up a Message Routing\
    \ State\n   (MRS) between the two nodes for the future exchange of NSLP data.\n\
    \   State setup is performed by a three-way handshake that allows for\n   negotiation\
    \ of signaling flow parameters and provides counter-\n   measures against several\
    \ attacks (like denial-of-service) by using\n   cookie mechanisms and a late state\
    \ installation option.\n   If a transport connection is required and needs to\
    \ provide for\n   reliable or secure signaling, like TCP or TLS/TCP, a Messaging\n\
    \   Association (MA) is established between the two peers.  An MA can be\n   reused\
    \ for signaling messages concerning several different data\n   flows, i.e., signaling\
    \ messages between two nodes are multiplexed\n   over the same transport connection.\
    \  This can be done when the\n   transport requirements (reliability, security)\
    \ of a new flow can be\n   met with an existing MA, i.e., the security and transport\
    \ properties\n   of an existing MA are equivalent or better than what is requested\
    \ for\n   a potential new MA.\n   For path-coupled signaling, we need to find\
    \ the nodes on the data\n   path that should take part in the signaling of an\
    \ NSLP and invoke\n   them to act on the arrival of such NSLP signaling messages.\
    \  The\n   basic concept is that such nodes along a flow's data path intercept\n\
    \   the corresponding signaling packets and are thus discovered\n   automatically.\
    \  GIST places a Router Alert Option (RAO) in Query\n   message packets to ensure\
    \ that they are intercepted by relevant NSIS-\n   aware nodes, as in RSVP.\n \
    \  Late in the development of GIST, serious concerns were raised in the\n   IETF\
    \ about the security risks and performance implications of\n   extensive usage\
    \ of the RAO [RAO-BAD].  Additionally, evidence was\n   discovered indicating\
    \ that several existing implementations of RAO\n   were inconsistent with the\
    \ (intention of the) standards and would not\n   support the NSIS usage.  There\
    \ were also concerns that extending the\n   need for RAO recognition in the fast\
    \ path of routers that are\n   frequently implemented in hardware would delay\
    \ or deter\n   implementation and deployment of NSIS.  Eventually, it was decided\n\
    \   that NSIS would continue to specify RAO as its primary means for\n   triggering\
    \ interception of signaling messages in intermediate nodes\n   on the data path,\
    \ but the protocol suite would be published with\n   Experimental status rather\
    \ than on the Standards Track while\n   deployment experience was gathered.  More\
    \ information about the use\n   of RAO in GIST can be found in [GIST-RAO].  Also,\
    \ the deployment\n   issues that arise from the use of RAO are discussed in Section\
    \ 6.1.\n   Alternative mechanisms have been considered to allow nodes to\n   recognize\
    \ NSIS signaling packets that should be intercepted.  For\n   example, NSIS nodes\
    \ could recognize UDP packets directed to a\n   specific destination port as Query\
    \ messages that need to be\n   intercepted even though they are not addressed\
    \ to the intercepting\n   node.  GIST provides for the use of such alternatives\
    \ as a part of\n   its extensibility design.  NSIS recognizes that the workload\
    \ imposed\n   by intercepting signaling packets could be considerable relative\
    \ to\n   the work needed just to forward such packets.  To keep the necessary\n\
    \   load to a minimum, NSIS provides mechanisms to limit the number of\n   interceptions\
    \ needed by constraining the rate of generation and\n   allowing for intentional\
    \ bypassing of signaling nodes that are not\n   affected by particular signaling\
    \ requests.  This can be accomplished\n   either in GIST or in the NSLP.\n   Since\
    \ GIST carries information about the data flow inside its\n   messages (in the\
    \ MRI), NAT gateways must be aware of GIST in order to\n   let it work correctly.\
    \  GIST provides a special object for NAT\n   traversal so that the actual translation\
    \ is disclosed if a GIST-aware\n   NAT gateway provides this object.\n   As with\
    \ RSVP, all the state installed by NSIS protocols is \"soft-\n   state\" that\
    \ will expire and be automatically removed unless it is\n   periodically refreshed.\
    \  NSIS state is held both at the signaling\n   application layer and in the signaling\
    \ transport layer, and is\n   maintained separately.  NSLPs control the lifetime\
    \ of the state in\n   the signaling application layer by setting a timeout and\
    \ sending\n   periodic \"keep alive\" messages along the signaling path if no\
    \ other\n   messages are required.  The MAs and the routing state are maintained\n\
    \   semi-independently by the transport layer, because MAs may be used by\n  \
    \ multiple NSLP sessions, and can also be recreated \"on demand\" if the\n   node\
    \ needs to reclaim resources.  The transport layer can send its\n   own \"keep\
    \ alive\" messages across a MA if no NSLP messages have been\n   sent, for example,\
    \ if the transport layer decides to maintain a\n   heavily used MA even though\
    \ there is no current NSLP session using\n   it.  Local state can also be deleted\
    \ explicitly when no longer\n   needed.\n   If there is a change in the route\
    \ used by a flow for which NSIS has\n   created state, NSIS needs to detect the\
    \ change in order to determine\n   if the new path contains additional NSIS nodes\
    \ that should have state\n   installed.  GIST may use a range of triggers in order\
    \ to detect a\n   route change.  It probes periodically for the next peer by sending\
    \ a\n   GIST Query, thereby detecting a changed route and GIST peer.  GIST\n \
    \  monitors routing tables and the GIST peer states, and it notifies\n   NSLPs\
    \ of any routing changes.  It is then up to the NSLPs to act\n   appropriately,\
    \ if needed, e.g., by issuing a refresh message.  The\n   periodic queries also\
    \ serve to maintain the soft-state in nodes as\n   long as the route is unchanged.\n\
    \   In summary, GIST provides several services in one package to the\n   upper-layer\
    \ signaling protocols:\n   o  Signaling peer discovery: GIST is able to find the\
    \ next-hop node\n      that runs the NSLP being signaled for.\n   o  Multiplexing:\
    \ GIST reuses already established signaling\n      relationships and messaging\
    \ associations to next-hop peers if the\n      signaling flows require the same\
    \ transport attributes.\n   o  Transport: GIST provides transport with different\
    \ attributes --\n      namely, reliable/unreliable and secure/unsecure.\n   o\
    \  Security: If security is requested, GIST uses TLS to provide an\n      encrypted\
    \ and integrity-protected message transport to the next\n      signaling peer.\n\
    \   o  Routing changes: GIST detects routing changes, but instead of\n      acting\
    \ on its own, it merely sends a notification to the local\n      NSLP.  It is\
    \ then up to the NSLP to act.\n   o  Fragmentation: GIST uses either a known Path\
    \ MTU for the next hop\n      or limits its message size to 576 bytes when using\
    \ UDP or Query\n      mode.  If fragmentation is required, it automatically establishes\n\
    \      an MA and sends the signaling traffic over a reliable protocol,\n     \
    \ e.g., TCP.\n   o  State maintenance: GIST establishes and then maintains the\
    \ soft-\n      state that controls communications through MAs between GIST peers\n\
    \      along the signaling path, according to usage parameters supplied\n    \
    \  by NSLPs and local policies.\n"
- title: 4.  Quality-of-Service NSLP
  contents:
  - "4.  Quality-of-Service NSLP\n   The Quality-of-Service (QoS) NSIS Signaling Layer\
    \ Protocol (NSLP)\n   establishes and maintains state at nodes along the path\
    \ of a data\n   flow for the purpose of providing some forwarding resources for\
    \ that\n   flow.  It is intended to satisfy the QoS-related requirements of RFC\n\
    \   3726 [RFC3726].  No support for QoS architectures based on bandwidth\n   brokers\
    \ or other off-path resource managers is currently included.\n   The design of\
    \ the QoS NSLP is conceptually similar to RSVP, RFC 2205\n   [RFC2205], and uses\
    \ soft-state peer-to-peer refresh messages as the\n   primary state management\
    \ mechanism (i.e., state installation/refresh\n   is performed between pairs of\
    \ adjacent NSLP nodes, rather than in an\n   end-to-end fashion along the complete\
    \ signaling path).  The QoS NSLP\n   extends the set of reservation mechanisms\
    \ to meet the requirements of\n   RFC 3726 [RFC3726], in particular, support of\
    \ sender- or receiver-\n   initiated reservations, as well as, a type of bidirectional\n\
    \   reservation and support of reservations between arbitrary nodes,\n   e.g.,\
    \ edge-to-edge, end-to-access, etc.  On the other hand, there is\n   currently\
    \ no support for IP multicast.\n   A distinction is made between the operation\
    \ of the signaling protocol\n   and the information required for the operation\
    \ of the Resource\n   Management Function (RMF).  RMF-related information is carried\
    \ in the\n   QSPEC (QoS Specification) object in QoS NSLP messages.  This is\n\
    \   similar to the decoupling between RSVP and the IntServ architecture,\n   RFC\
    \ 1633 [RFC1633].  The QSPEC carries information on resources\n   available, resources\
    \ required, traffic descriptions, and other\n   information required by the RMF.\
    \  A template for QSPEC objects is\n   defined in [RFC5975].  This provides a\
    \ number of basic parameter\n   objects that can be used as a common language\
    \ to specify components\n   of concrete QoS models.  The objects defined in [RFC5975]\
    \ provide the\n   building blocks for many existing QoS models such as those associated\n\
    \   with RSVP and Differentiated Services.  The extensibility of the\n   template\
    \ allows new QoS model specifications to extend the template\n   language as necessary\
    \ to support these specifications.\n   The QoS NSLP supports different QoS models\
    \ because it does not define\n   the QoS mechanisms and RMF that have to be used\
    \ in a domain.  As long\n   as a domain knows how to perform admission control\
    \ for a given QSPEC,\n   QoS NSLP actually does not care how the specified constraints\
    \ are\n   enforced and met, e.g., by putting the related data flow in the\n  \
    \ topmost of four Diffserv classes or by putting it into the third\n   highest\
    \ of twelve Diffserv classes.  The particular QoS configuration\n   used is up\
    \ to the network provider of the domain.  The QSPEC can be\n   seen as a common\
    \ language to express QoS requirements between\n   different domains and QoS models.\n\
    \   In short, the functionality of the QoS NSLP includes:\n   o  Conveying resource\
    \ requests for unicast flows\n   o  Resource requests (QSPEC) that are decoupled\
    \ from the signaling\n      protocol (QoS NSLP)\n   o  Sender- and receiver-initiated\
    \ reservations, as well as\n      bidirectional\n   o  Soft-state and reduced\
    \ refresh (keep-alive) signaling\n   o  Session binding, i.e., session X can be\
    \ valid only if session Y is\n      also valid\n   o  Message scoping, end-to-end,\
    \ edge-to-edge, or end-to-edge (proxy\n      mode)\n   o  Protection against message\
    \ re-ordering and duplication\n   o  Group tear, tearing down several sessions\
    \ with a single message\n   o  Support for rerouting, e.g., due to mobility\n\
    \   o  Support for request priorities and preemption\n   o  Stateful and stateless\
    \ nodes: stateless operation is particularly\n      relevant in core networks\
    \ where large amounts of QoS state could\n      easily overwhelm a node\n   o\
    \  Reservation aggregation\n   The protocol also provides for a proxy mode to\
    \ allow the QoS\n   signaling to be implemented without needing all end-hosts\
    \ to be\n   capable of handling NSIS signaling.\n   The QSPEC template supports\
    \ situations where the QoS parameters need\n   to be fine-grained, specifically\
    \ targeted to an individual flow in\n   one part of the network (typically the\
    \ edge or access part) but might\n   need to be more coarse-grained, where the\
    \ flow is part of an\n   aggregate (typically in the core of the network).\n"
- title: 5.  NAT/Firewall Traversal NSLP
  contents:
  - "5.  NAT/Firewall Traversal NSLP\n   The NAT/firewall traversal NSLP [RFC5973]\
    \ lets end-hosts interact\n   with NAT and firewall devices in the data path.\
    \  Basically, it allows\n   for a dynamic configuration of NATs and/or firewalls\
    \ along the data\n   path in order to enable data flows to traverse these devices\
    \ without\n   being obstructed.  For instance, firewall pinholes could be opened\
    \ on\n   demand by authorized hosts.  Furthermore, it is possible to block\n \
    \  unwanted incoming traffic on demand, e.g., if an end-host is under\n   attack.\n\
    \   Configurations to be implemented in NAT and firewall devices signaled\n  \
    \ by the NAT/firewall NSLP take the form of a (pattern, action) pair,\n   where\
    \ the pattern specifies a template for packet header fields to be\n   matched.\
    \  The device is then expected to apply the specified action\n   to any passing\
    \ packet that matches the template.  Actions are\n   currently limited to ALLOW\
    \ (forward the packet) and DENY (drop the\n   packet).  The template specification\
    \ allows for a greater range of\n   packet fields to be matched than those allowed\
    \ for in the GIST MRI.\n   Basically, NAT/firewall signaling starts at the data\
    \ sender (NSIS\n   Initiator) before any actual application data packets are sent.\n\
    \   Signaling messages may pass several middleboxes that are NAT/firewall\n  \
    \ NSLP aware (NSIS Forwarder) on their way downstream and usually hit\n   the\
    \ receiver (being the NSIS Responder).  A proxy mode is also\n   available for\
    \ cases where the NAT/firewall NSLP is not fully\n   supported along the complete\
    \ data path.  NAT/firewall NSLP is based\n   on a soft-state concept, i.e., the\
    \ sender must periodically repeat\n   its request in order to keep it active.\n\
    \   Additionally, the protocol also provides functions for receivers\n   behind\
    \ NATs.  The receiver may request an external address that is\n   reachable from\
    \ outside.  The reserved external address must, however,\n   be communicated to\
    \ the sender out-of-band by other means, e.g., by\n   application level signaling.\
    \  After this step the data sender may\n   initiate a normal NAT/firewall signaling\
    \ in order to create firewall\n   pinholes.\n   The protocol also provides for\
    \ a proxy mode to allow the NAT/firewall\n   signaling to be implemented without\
    \ needing all end-hosts to be\n   capable of handling NSIS signaling.\n"
- title: 6.  Deploying the Protocols
  contents:
  - "6.  Deploying the Protocols\n   The initial version of the NSIS protocol suite\
    \ is being published\n   with the status of Experimental in order to gain deployment\n\
    \   experience.  Concerns over the security, implementation, and\n   administrative\
    \ issues surrounding the use of RAO are likely to mean\n   that initial deployments\
    \ occur in \"walled gardens\" where the\n   characteristics of hardware in use\
    \ are well-known, and there is a\n   high level of trust and control over the\
    \ end nodes that use the\n   protocols.  This section addresses issues that need\
    \ to be considered\n   in a deployment of the NSIS protocol suite.\n   First of\
    \ all, NSIS implementations must be available in at least some\n   of the corresponding\
    \ network nodes (i.e., routers, firewalls, or NAT\n   gateways) and end-hosts.\
    \  That means not only GIST support, but also\n   the NSLPs and their respective\
    \ control functions (such as a resource\n   management function for QoS admission\
    \ control, etc.) must be\n   implemented.  NSIS is capable of incremental deployment\
    \ and an\n   initial deployment does not need to involve every node in a network\n\
    \   domain.  This is discussed further in Section 6.3.  There are a\n   number\
    \ of obstacles that may be encountered due to broken\n   implementations of RAO\
    \ (see Section 6.1) and due to firewalls or NATs\n   that drop NSIS signaling\
    \ packets (see Section 6.2).\n   Another important issue is that applications\
    \ may need to be made\n   NSIS-aware, thereby requiring some effort from the applications'\n\
    \   programmers.  Alternatively, it may be possible to implement separate\n  \
    \ applications to control, e.g., the network QoS requests or firewall\n   pinholes,\
    \ without needing to update the actual applications that will\n   take advantage\
    \ of NSIS capabilities.\n"
- title: 6.1.  Deployment Issues Due to Use of RAO
  contents:
  - "6.1.  Deployment Issues Due to Use of RAO\n   The standardized version of GIST\
    \ depends on routers and other\n   middleboxes correctly recognizing and acting\
    \ on packets containing\n   RAO.  There are a number of problems related to RAO\
    \ that can obstruct\n   a deployment of NSIS:\n   o  Some implementations do not\
    \ respond to RAO at all.\n   o  Some implementations respond but do not distinguish\
    \ between the\n      RAO parameter values in IPv4 packets or reject anything except\
    \ 0\n      (in which case, only the value 0 can be used).\n   o  The response\
    \ to RAO in a GIST Query mode packet, which is sent\n      using the UDP transport,\
    \ is to dispatch the packet to the UDP\n      stack in the intercepting node rather\
    \ than to a function\n      associated with the RAO parameter.  Since the node\
    \ will not\n      normally have a regular UDP receiver for these packets they\
    \ are\n      dropped.\n   o  The major security concern with RAO in NSIS is that\
    \ it provides a\n      new vector for hosts to mount a (distributed) denial-of-service\n\
    \      (DDoS) attack on the control plane of routers on the data path.\n     \
    \ Such attacks have occurred, and it is therefore normal for service\n      providers\
    \ to prohibit \"host-to-router\" signaling packets such as\n      RSVP or NSIS\
    \ from entering their networks from customer networks.\n      This will tend to\
    \ limit the deployment of NSIS to \"walled gardens\"\n      unless a suitable\
    \ mitigation of the DDoS threat can be found and\n      deployed.\n   In order\
    \ to deploy NSIS effectively, routers and other hardware need\n   to be selected\
    \ and correctly configured to respond to RAO and\n   dispatch intercepted packets\
    \ to the NSIS function.\n   A further obstacle results from the likelihood that\
    \ IPv4 packets with\n   IP options of any kind will be filtered and dropped by\
    \ firewalls and\n   NATs.  In many cases, this is the default behavior so that\
    \ explicit\n   configuration is needed to allow packets carrying the RAO to pass\n\
    \   through.  The general inclination of domain administrators is to deny\n  \
    \ access to packets carrying IP options because of the security risks\n   and\
    \ the additional load on the routers in the domain.  The situation\n   with IPv6\
    \ may be easier, as the RAO option in IPv6 is better defined,\n   but the security\
    \ concerns remain.\n   Deployment issues are discussed at more length in Appendix\
    \ C of the\n   GIST specification [RFC5971].\n"
- title: 6.2.  Deployment Issues with NATs and Firewalls
  contents:
  - "6.2.  Deployment Issues with NATs and Firewalls\n   NAT gateways and firewalls\
    \ may also hinder initial deployment of NSIS\n   protocols for several reasons:\n\
    \   o  They may filter and drop signaling traffic (as described in\n      Section\
    \ 6.1) to deny access to packets containing IP options.\n   o  They may not permit\
    \ \"unsolicited\" incoming GIST Query mode\n      packets.  This behavior has\
    \ been anticipated in the design of the\n      protocols but requires additional\
    \ support to ensure that the\n      middleboxes are primed to accept the incoming\
    \ queries (see\n      [RFC5974] and [RFC5973]).\n   o  NATs that are not aware\
    \ of the NSIS protocols will generally\n      perform address translations that\
    \ are not coordinated with the\n      NSIS protocols.  Since NSIS signaling messages\
    \ may be carrying\n      embedded IP addresses affected by these translations,\
    \ it may not\n      be possible to operate NSIS through such legacy NATs.  The\n\
    \      situation and workarounds are discussed in Section 7.2.1 of\n      [RFC5971].\n"
- title: 6.3.  Incremental Deployment and Workarounds
  contents:
  - "6.3.  Incremental Deployment and Workarounds\n   NSIS is specifically designed\
    \ to be incrementally deployable.  It is\n   not required that all nodes on the\
    \ signaling and data path are NSIS\n   aware.  To make any use of NSIS, at least\
    \ two nodes on the path need\n   to be NSIS aware.  However, it is not essential\
    \ that the initiator\n   and receiver of the data flow are NSIS aware.  Both the\
    \ QoS and NAT/\n   firewall NSLPs provide \"proxy modes\" in which nodes adjacent\
    \ to the\n   initiator and/or receiver can act as proxy signaling initiator or\n\
    \   receiver.  An initiator proxy can monitor traffic and, hopefully,\n   detect\
    \ when a data flow of a type needing NSIS support is being\n   initiated.  The\
    \ proxies can act more or less transparently on behalf\n   of the data flow initiator\
    \ and/or receiver to set up the required\n   NSIS state and maintain it while\
    \ the data flow continues.  This\n   capability reduces the immediate need to\
    \ modify all the data flow\n   endpoints before NSIS is viable.\n"
- title: 7.  Security Features
  contents:
  - "7.  Security Features\n   Basic security functions are provided at the GIST layer,\
    \ e.g.,\n   protection against some blind or denial-of-service attacks, but note\n\
    \   that introduction of alternative MRMs may provide attack avenues that\n  \
    \ are not present with the current emphasis on the path-coupled MRM.\n   Conceptually,\
    \ it is difficult to protect against an on-path attacker\n   and man-in-the-middle\
    \ attacks when using path-coupled MRMs, because a\n   basic functionality of GIST\
    \ is to discover as yet unknown signaling\n   peers.  Transport security can be\
    \ requested by signaling applications\n   and is realized by using TLS between\
    \ signaling peers, i.e.,\n   authenticity and confidentiality of signaling messages\
    \ can be assured\n   between peers.  GIST allows for mutual authentication of\
    \ the\n   signaling peers (using TLS means such as certificates) and can verify\n\
    \   the authenticated identity against a database of nodes authorized to\n   take\
    \ part in GIST signaling.  It is, however, a matter of policy that\n   the identity\
    \ of peers is verified and accepted upon establishment of\n   the secure TLS connection.\n\
    \   While GIST is handling authentication of peer nodes, more fine-\n   grained\
    \ authorization may be required in the NSLP protocols.  There\n   is currently\
    \ an ongoing work to specify common authorization\n   mechanisms to be used in\
    \ NSLP protocols [NSIS-AUTH], thus allowing,\n   e.g., per-user and per-service\
    \ authorization.\n"
- title: 8.  Extending the Protocols
  contents:
  - "8.  Extending the Protocols\n   This section discusses the ways that are available\
    \ to extend the NSIS\n   protocol suite.  The Next Steps in Signaling (NSIS) Framework\n\
    \   [RFC4080] describes a two-layer framework for signaling on the\n   Internet,\
    \ comprising a generic transport layer with specific\n   signaling-layer protocols\
    \ to address particular applications running\n   over this transport layer.  The\
    \ model is designed to be highly\n   extensible so that it can be adapted for\
    \ different signaling needs.\n   It is expected that additional signaling requirements\
    \ will be\n   identified in the future.  The two-layer approach allows for NSLP\n\
    \   signaling applications to be developed independently of the transport\n  \
    \ protocol.  Further NSLPs can therefore be developed and deployed to\n   meet\
    \ these new needs using the same GIST infrastructure, thereby\n   providing a\
    \ level of macro-extensibility.  However, the GIST protocol\n   and the two signaling\
    \ applications have been designed so that\n   additional capabilities can be incorporated\
    \ into the design should\n   additional requirements within the general scope\
    \ of these protocols\n   need to be accommodated.\n   The NSIS framework is also\
    \ highly supportive of incremental\n   deployment.  A new NSLP need not be available\
    \ on every NSIS-aware\n   node in a network or along a signaling path in order\
    \ to start using\n   it.  Nodes that do not (yet) support the application will\
    \ forward its\n   signaling messages without complaint until it reaches a node\
    \ where\n   the new NSLP application is deployed.\n   One key functionality of\
    \ parameter objects carried in NSIS protocols\n   is the so-called \"Extensibility\
    \ flags (A/B)\".  All the existing\n   protocols (and any future ones conforming\
    \ to the standards) can carry\n   new experimental objects, where the A/B flags\
    \ can indicate whether a\n   receiving node must interpret the object, or whether\
    \ it can just drop\n   them or pass them along in subsequent messages sent out\
    \ further on\n   the path.  This functionality allows defining new objects without\n\
    \   forcing all network entities to understand them.\n"
- title: 8.1.  Overview of Administrative Actions Needed When Extending NSIS
  contents:
  - "8.1.  Overview of Administrative Actions Needed When Extending NSIS\n   Generally,\
    \ NSIS protocols can be extended in multiple ways, many of\n   which require the\
    \ allocation of unique code point values in\n   registries maintained by IANA\
    \ on behalf of the IETF.  This and the\n   following sections provide an overview\
    \ of the administrative\n   mechanisms that might apply.  The extensibility rules\
    \ defined below\n   are based upon the procedures by which IANA assigns values:\
    \ \"IESG\n   Approval\", \"IETF Review\", \"Expert Review\", and \"Private Use\"\
    \ (as\n   specified in [RFC5226]).  The appropriate procedure for a particular\n\
    \   type of code point is defined in one or other of the NSIS protocol\n   documents,\
    \ mostly [RFC5971].\n   In addition to registered code points, all NSIS protocols\
    \ provide\n   code points that can be used for experimentation, usually within\n\
    \   closed networks, as explained in [RFC3692].  There is no guarantee\n   that\
    \ independent experiments will not be using the same code point!\n"
- title: 8.2.  GIST
  contents:
  - "8.2.  GIST\n   GIST is extensible in several aspects covered in the subsections\n\
    \   below.  In these subsections, there are references to document\n   sections\
    \ in the GIST specification [RFC5971] where more information\n   can be found.\
    \  The bullet points at the end of each subsection\n   specify the formal administrative\
    \ actions that would need to be\n   carried out when a new extension is standardized.\n\
    \   More generally, as asserted in Section 1 of the GIST specification,\n   the\
    \ GIST design could be extended to cater for multicast flows and\n   for situations\
    \ where the signaling is not tied to an end-to-end data\n   flow.  However, it\
    \ is not clear whether this could be done in a\n   totally backwards-compatible\
    \ way, and this is not considered within\n   the extensibility model of NSIS.\n"
- title: 8.2.1.  Use of Different Message Routing Methods
  contents:
  - "8.2.1.  Use of Different Message Routing Methods\n   Currently, only two message\
    \ routing methods are supported (Path\n   Coupled MRM and Loose End MRM), but\
    \ further MRMs may be defined in\n   the future.  See Sections 3.3 and 5.8 of\
    \ the GIST specification\n   [RFC5971].  One possible additional MRM under development\
    \ is\n   documented in [EST-MRM].  This MRM would direct signaling towards an\n\
    \   explicit target address other than the (current) data flow\n   destination\
    \ and is intended to assist setting up of state on a new\n   path during \"make-before-break\"\
    \ handover sequences in mobile\n   operations.  Note that alternative routing\
    \ methods may require\n   modifications to the firewall traversal techniques used\
    \ by GIST and\n   NSLPs.\n   o  New MRMs require allocation of a new MRM-ID either\
    \ by IETF review\n      of a specification or expert review [RFC5971].\n"
- title: 8.2.2.  Use of Different Transport Protocols or Security Capabilities
  contents:
  - "8.2.2.  Use of Different Transport Protocols or Security Capabilities\n   The\
    \ initial handshake between GIST peers allows a negotiation of the\n   transport\
    \ protocols to be used.  Currently, proposals exist to add\n   DCCP [GIST-DCCP]\
    \ and the Stream Control Transmission Protocol (SCTP)\n   [GIST-SCTP] transports\
    \ to GIST; in each case, using Datagram TLS\n   (DTLS) to provide security.  See\
    \ Sections 3.2 and 5.7 of the GIST\n   specification [RFC5971].  GIST expects\
    \ alternative capabilities to be\n   treated as selection of an alternative protocol\
    \ stack.  Within the\n   protocol stack, the individual protocols used are specified\
    \ by MA\n   Protocol IDs that are allocated from an IANA registry if new\n   protocols\
    \ are to be used.  See Sections 5.7 and 9 of the GIST\n   specification [RFC5971].\n\
    \   o  Use of an alternative transport protocol or security capability\n     \
    \ requires allocation of a new MA-Protocol-ID either by IETF review\n      of\
    \ a specification or expert review [RFC5971].\n"
- title: 8.2.3.  Use of Alternative Security Services
  contents:
  - "8.2.3.  Use of Alternative Security Services\n   Currently, only TLS is specified\
    \ for providing secure channels with\n   MAs.  Section 3.9 of the GIST specification\
    \ [RFC5971] suggests that\n   alternative protocols could be used, but the interactions\
    \ with GIST\n   functions would need to be carefully specified.  See also Section\n\
    \   4.4.2 of the GIST specification [RFC5971].\n   o  Use of an alternative security\
    \ service requires allocation of a\n      new MA-Protocol-ID either by IETF review\
    \ of a specification or\n      expert review [RFC5971].\n"
- title: 8.2.4.  Query Mode Packet Interception Schemes
  contents:
  - "8.2.4.  Query Mode Packet Interception Schemes\n   GIST has standardized a scheme\
    \ using RAO mechanisms [GIST-RAO] with\n   UDP packets.  If the difficulties of\
    \ deploying the RAO scheme prove\n   insuperable in particular circumstances,\
    \ alternative interception\n   schemes can be specified.  One proposal that was\
    \ explored for GIST\n   used UDP port recognition in routers (rather than RAO\
    \ mechanisms) to\n   drive the interception of packets.  See Section 5.3.2 of\
    \ the GIST\n   specification [RFC5971].  Each NSLP needs to specify membership\
    \ of an\n   \"interception class\" whenever it sends a message through GIST. \
    \ A\n   packet interception scheme can support one or more interception\n   classes.\
    \  In principle, a GIST instance can support multiple packet\n   interception\
    \ schemes, but each interception class needs to be\n   associated with exactly\
    \ one interception scheme in a GIST instance,\n   and GIST instances that use\
    \ different packet interception schemes for\n   the same interception class will\
    \ not be interoperable.\n   Defining an alternative interception class mechanism\
    \ for\n   incorporation into GIST should be considered as a very radical step,\n\
    \   and all alternatives should be considered before taking this path.\n   The\
    \ main reason for this is that the mechanism will necessarily\n   require additional\
    \ operations on every packet passing through the\n   affected router interfaces.\
    \  A number of considerations should be\n   taken into account:\n   o  Although\
    \ the interception mechanism need only be deployed on\n      routers that actually\
    \ need it (probably for a new NSLP),\n      deployment may be constrained if the\
    \ mechanism requires\n      modification to the hardware of relevant routers and/or\
    \ needs to\n      await modification of the software by the router vendor.\n \
    \  o  Typically, any packet fields to be examined should be near the\n      header\
    \ of the packet so that additional memory accesses are not\n      needed to retrieve\
    \ the values needed for examination.\n   o  The logic required to determine if\
    \ a packet should be intercepted\n      needs to be kept simple to minimize the\
    \ extra per-packet\n      processing.\n   o  The mechanism should be applicable\
    \ to both IPv4 and IPv6 packets.\n   o  Packet interception mechanisms potentially\
    \ provide an attack path\n      for denial-of-service attacks on routers, in that\
    \ packets are\n      diverted into the \"slow path\" and hence can significantly\
    \ increase\n      the load on the general processing capability of the router.\
    \  Any\n      new interception mechanism needs to be carefully designed to\n \
    \     minimize the attack surface.\n   Packet interception mechanisms are identified\
    \ by an \"interception\n   class\" which is supplied to GIST through the Application\
    \ Programming\n   Interface for each message sent.\n   o  New packet interception\
    \ mechanisms will generally require\n      allocation of one or more new Interception-class-IDs.\
    \  This does\n      not necessarily need to be placed in an IANA registry as it\
    \ is\n      primarily used as a parameter in the API between the NSLPs and\n \
    \     GIST and may never appear on the wire, depending on the mechanism\n    \
    \  employed; all that is required is consistent interpretation\n      between\
    \ the NSLPs and GIST in each applicable node.  However, if,\n      as is the case\
    \ with the current RAO mechanism [GIST-RAO], the\n      scheme distinguishes between\
    \ multiple packet interception classes\n      by a value carried on the wire (different\
    \ values of RAO parameter\n      for the RAO mechanism in GIST), an IANA registry\
    \ may be required\n      to provide a mapping between interception classes and\
    \ on-the-wire\n      values as discussed in Section 6 of [GIST-RAO].\n"
- title: 8.2.5.  Use of Alternative NAT Traversal Mechanisms
  contents:
  - "8.2.5.  Use of Alternative NAT Traversal Mechanisms\n   The mechanisms proposed\
    \ for both legacy NAT traversal (Section 7.2.1\n   of the GIST specification [RFC5971])\
    \ and GIST-aware NAT traversal\n   (Section 7.2.2 of the GIST specification [RFC5971])\
    \ can be extended\n   or replaced.  As discussed above, extension of NAT traversal\
    \ may be\n   needed if a new MRM is deployed.  Note that there is extensive\n\
    \   discussion of NAT traversal in the NAT/firewall NSLP specification\n   [RFC5973].\n"
- title: 8.2.6.  Additional Error Identifiers
  contents:
  - "8.2.6.  Additional Error Identifiers\n   Making extensions to any of the above\
    \ items may result in having to\n   create new error modes.  See Section 9 and\
    \ Appendix A.4.1 - A.4.3 of\n   the GIST specification [RFC5971].\n   o  Additional\
    \ error identifiers require allocation of new error\n      code(s) and/or subcode(s)\
    \ and may also require allocation of\n      Additional Information types.  These\
    \ are all allocated on a first-\n      come, first-served basis by IANA [RFC5971].\n"
- title: 8.2.7.  Defining New Objects To Be Carried in GIST
  contents:
  - "8.2.7.  Defining New Objects To Be Carried in GIST\n   The A/B (extensibility)\
    \ flags in each signaling object carried in\n   NSIS protocols enable the community\
    \ to specify new objects applicable\n   to GIST that can be carried inside a signaling\
    \ session without\n   breaking existing implementations.  See Appendix A.2 of\
    \ the GIST\n   specification [RFC5971].  The A/B flags can also be used to indicate\n\
    \   in a controlled fashion that a certain object must be understood by\n   all\
    \ GIST nodes, which makes it possible to probe for the support of\n   an extension.\
    \  One such object already designed is the \"Peering\n   Information Object (PIO)\"\
    \ [PEERING-DATA] that allows a Query message\n   to carry additional peering data\
    \ to be used by the recipient in\n   making the peering decision.\n   o  New objects\
    \ require allocation of a new Object Type ID either by\n      IETF review of a\
    \ specification or through another acceptable\n      published specification [RFC5971].\n"
- title: 8.2.8.  Adding New Message Types
  contents:
  - "8.2.8.  Adding New Message Types\n   Major modifications could be made by adding\
    \ additional GIST message\n   types and defining appropriate processing.  It might\
    \ be necessary to\n   define this as a new version of the protocol.  A field is\
    \ provided in\n   the GIST Common Header containing the version number.  GIST\
    \ currently\n   has no provision for version or capability negotiation that might\
    \ be\n   needed if a new version was defined.\n   o  New GIST Message Types require\
    \ allocation of a new GIST Message\n      Type ID either by IETF review of a specification\
    \ or expert review\n      [RFC5971].\n"
- title: 8.3.  QoS NSLP
  contents:
  - "8.3.  QoS NSLP\n   The QoS NSLP provides signaling for QoS reservations on the\
    \ Internet.\n   The QoS NSLP decouples the resource reservation model or architecture\n\
    \   (QoS model) from the signaling.  The signaling protocol is defined in\n  \
    \ Quality-of-Service NSLP (QoS NSLP) [RFC5974].  The QoS models are\n   defined\
    \ in separate specifications, and the QoS NSLP can operate with\n   one or more\
    \ of these models as required by the environment where it\n   is used.  It is\
    \ anticipated that additional QoS models will be\n   developed to address various\
    \ Internet scenarios in the future.\n   Extensibility of QoS models is considered\
    \ in Section 8.4.\n   The QoS NSLP specifically mentions the possibility of using\n\
    \   alternative Message Routing Methods (MRMs), apart from the general\n   ability\
    \ to extend NSLPs using new objects with the standard A/B\n   extensibility flags\
    \ to allow them to be used in new and old\n   implementations.\n   There is already\
    \ work to extend the base QoS NSLP and GIST to enable\n   new QoS signaling scenarios.\
    \  One such proposal is the Inter-Domain\n   Reservation Aggregation aiming to\
    \ support large-scale deployment of\n   the QoS NSLP [RESV-AGGR].  Another current\
    \ proposal seeks to extend\n   the whole NSIS framework towards path-decoupled\
    \ signaling and QoS\n   reservations [HYPATH].\n"
- title: 8.4.  QoS Specifications
  contents:
  - "8.4.  QoS Specifications\n   The QoS Specification template (QSPEC) is defined\
    \ in [RFC5975].  This\n   provides the language in which the requirements of specific\
    \ QoS\n   models are described.  Introduction of a new QoS model involves\n  \
    \ defining a new QSPEC.  In order to have a new QSPEC allocated by\n   IANA, there\
    \ must be an acceptable published specification that\n   defines the specific\
    \ elements within the QSPEC used in the new model.\n   See [RFC5975] for details.\n\
    \   The introduction of new QoS models is designed to enable deployment\n   of\
    \ NSIS-based QoS control in specific scenarios.  One such example is\n   the Integrated\
    \ Services Controlled Load Service for NSIS [CL].\n   A key feature provided by\
    \ defining the QSPEC template is support of a\n   common language for describing\
    \ QoS requirements and capabilities,\n   which can be reused by any QoS models\
    \ intending to use the QoS NSLP\n   to signal their requirements for traffic flows.\
    \  The commonality of\n   the QSPEC parameters ensures a certain level of interoperability\
    \ of\n   QoS models and reduces the demands on hardware that has to implement\n\
    \   the QoS control.  Optional QSPEC parameters support the extensibility\n  \
    \ of the QoS NSLP to other QoS models in the future; new QSPEC\n   parameters\
    \ can be defined in the document that specifies a new QoS\n   model.  See Sections\
    \ 4.4 and 7 of [RFC5975].\n   The QSPEC consists of a QSPEC version number, QSPEC\
    \ objects, plus\n   specification of processing and procedures that can be used\
    \ to build\n   many QoS models.  The definition of a QSPEC can be revised without\n\
    \   necessarily changing the version if the changes are functionally\n   backwards\
    \ compatible.  If changes are made that are not backwards\n   compatible, then\
    \ a new QSPEC version number has to be assigned.  Note\n   that a new QSPEC version\
    \ number is not needed just because additional\n   QSPEC parameters are specified;\
    \ new versions will be needed only if\n   the existing functionality is modified.\
    \  The template includes\n   version negotiation procedures that allow the originator\
    \ of an NSLP\n   message to retry with a lower QSPEC version if the receiver rejects\
    \ a\n   message because it does not support the QSPEC version signaled in the\n\
    \   message.  See Section 3.2 of [RFC5975].\n   o  Creation of a new, incompatible\
    \ version of an existing QSPEC\n      requires allocation of a new QSPEC version\
    \ number that is\n      documented in a permanent and readily available public\n\
    \      specification.  See [RFC5975].\n   o  Completely new QSPECs can also be\
    \ created.  Such new QSPECs\n      require allocation of a QSPEC type that is\
    \ documented in a\n      permanent and readily available public specification.\
    \  Values are\n      also available for local or experimental use during development.\n\
    \      See [RFC5975].\n   o  Additional QSPEC procedures can be defined requiring\
    \ allocation of\n      a new QSPEC procedure number that is documented in a permanent\
    \ and\n      readily available public specification.  Values are also available\n\
    \      for local or experimental use during development.  See [RFC5975].\n   o\
    \  Additional QSPEC parameters and associated error codes can be\n      defined\
    \ requiring a permanent and readily available public\n      specification document.\
    \  Values are also available for local or\n      experimental use during development.\
    \  See [RFC5975].\n"
- title: 8.5.  NAT/Firewall NSLP
  contents:
  - "8.5.  NAT/Firewall NSLP\n   The NAT/firewall signaling can be extended broadly\
    \ in the same way as\n   the QoS NSLP by defining new parameters to be carried\
    \ in NAT/firewall\n   NSLP messages.  See Section 7 of [RFC5973].  No proposals\
    \ currently\n   exist to fulfill new use cases for the protocol.\n"
- title: 8.6.  New NSLP Protocols
  contents:
  - "8.6.  New NSLP Protocols\n   Designing a new NSLP is both challenging and easy.\n\
    \   New signaling applications with associated NSLPs can be defined to\n   work\
    \ in parallel or replace the applications already defined by the\n   NSIS working\
    \ group.  Applications that fit into the NSIS framework\n   will be expected to\
    \ use GIST to provide transport of signaling\n   messages and appropriate security\
    \ facilities that relieve the\n   application designer of many \"lower-level\"\
    \ problems.  GIST provides\n   many important functions through the API that it\
    \ exposes to the code\n   of the signaling application layer, and allows the signaling\n\
    \   application programmer to offload various tasks to GIST, e.g., the\n   channel\
    \ security, transport characteristics, and signaling node\n   discovery.\n   Yet,\
    \ on the other hand, the signaling application designer must take\n   into account\
    \ that the network environment can be dynamic, both in\n   terms of routing and\
    \ node availability.  The new NSLP designer must\n   take into account at least\
    \ the following issues:\n   o  Routing changes, e.g., due to mobility: GIST sends\
    \ network\n      notifications when something happens in the network, e.g., peers\n\
    \      or routing paths change.  All signaling applications must be able\n   \
    \   to handle these notifications and act appropriately.  GIST does\n      not\
    \ include logic to figure out what the NSLP would want to do due\n      to a certain\
    \ network event.  Therefore, GIST gives the\n      notification to the application,\
    \ and lets it make the right\n      decision.\n   o  GIST indications: GIST will\
    \ also send other notifications, e.g.,\n      if a signaling peer does not reply\
    \ to refresh messages, or a\n      certain NSLP message was not successfully delivered\
    \ to the\n      recipient.  NSLP applications must also be able to handle these\n\
    \      events.  Appendix B in the GIST specification discusses the GIST-\n   \
    \   NSLP API and the various functionality required, but implementing\n      this\
    \ interface can be quite challenging; the multitude of\n      asynchronous notifications\
    \ that can arrive from GIST increases the\n      implementation complexity of\
    \ the NSLP.\n   o  Lifetime of the signaling flow: NSLPs should inform GIST when\
    \ a\n      flow is no longer needed using the SetStateLifetime primitive.\n  \
    \    This reduces bandwidth demands in the network.\n   o  NSLP IDs: NSLP messages\
    \ may be multiplexed over GIST MAs.  The new\n      NSLP needs to use a unique\
    \ NSLPID to ensure that its messages are\n      delivered to the correct application\
    \ by GIST.  A single NSLP could\n      use multiple NSLPIDs, for example, to distinguish\
    \ different\n      classes of signaling nodes that might handle different levels\
    \ of\n      aggregation of requests or alternative processing paths.  Note\n \
    \     that unlike GIST, the NSLPs do not provide a protocol versioning\n     \
    \ mechanism.  If the new NSLP is an upgraded version of an existing\n      NSLP,\
    \ then it should be distinguished by a different NSLPID.\n      *  A new generally\
    \ available NSLP requires IESG approval for the\n         allocation of a new\
    \ NSLP ID [RFC5971]\n   o  Incremental deployment: It would generally be unrealistic\
    \ to\n      expect every node on the signaling path to have a new NSLP\n     \
    \ implemented immediately.  New NSLPs need to allow for this.  The\n      QoS\
    \ and NAT/firewall NSLPs provide examples of techniques such as\n      proxy modes\
    \ that cater for cases where the data flow originator\n      and/or receiver does\
    \ not implement the NSLP.\n   o  Signaling Message Source IP Address: It is sometimes\
    \ challenging\n      for an NSLP originating a signaling message to determine\
    \ the\n      source IP address that should be used in the signaling messages,\n\
    \      which may be different from the data flow source address used in\n    \
    \  the MRI.  This challenge occurs either when a node has multiple\n      interfaces\
    \ or is acting as a proxy for the data flow originator\n      (typically expected\
    \ to occur during the introduction of NSIS when\n      not all nodes are NSIS\
    \ enabled).  A proxy signaling flow\n      originator generally needs to know\
    \ and use the correct data flow\n      source IP address, at least initially.\
    \  As discussed in Section\n      5.8.1.2 of [RFC5971], the signaling flow originator\
    \ may choose to\n      alter the source IP address after the initial Query message\
    \ has\n      established the flow path in order that ICMP messages are directed\n\
    \      to the most appropriate node.  In the proxy case, the data flow\n     \
    \ originator would be unaware of the signaling flow, and ICMP\n      messages\
    \ relating to the signaling would be meaningless if passed\n      on to the data\
    \ flow originator.  Hence, it is essential that an\n      NSLP is aware of the\
    \ position and role of the node on which it is\n      instantiated and has means\
    \ of determining the appropriate source\n      address to be used and ensuring\
    \ that it is used on signaling\n      packets.\n   o  New MRMs: GIST currently\
    \ defines two Message Routing Methods, and\n      leaves the door open for new\
    \ ideas.  Thus, it is possible that a\n      new NSLP also requires a new MRM;\
    \ path-decoupled routing being one\n      example.\n   o  Cooperation with other\
    \ NSLPs: Some applications might need\n      resources from two or more different\
    \ classes in order to operate\n      successfully.  The NSLPs managing these resources\
    \ could operate\n      cooperatively to ensure that such requests were coordinated\
    \ to\n      avoid wasting signaling bandwidth and prevent race conditions.\n \
    \  It is essential that the security considerations of a new NSLP are\n   carefully\
    \ analyzed.  NSIS NSLPs are deployed in routers as well as\n   host systems; a\
    \ poorly designed NSLP could therefore provide an\n   attack vector for network\
    \ resources as well as end systems.  The NSLP\n   must also support authorization\
    \ of users and must allow the use of\n   the GIST authentication and integrity\
    \ protection mechanisms where\n   users deem them to be necessary.\n   The API\
    \ between GIST and NSLPs (see Appendix B in [RFC5971]) is very\n   important to\
    \ understand.  The abstract design in the GIST\n   specification does not specify\
    \ the exact messaging between GIST and\n   the NSLPs but gives an understanding\
    \ of the interactions, especially\n   what kinds of asynchronous notifications\
    \ from GIST the NSLP must be\n   prepared to handle: the actual interface will\
    \ be dependent on each\n   implementation of GIST.\n   Messages transmitted by\
    \ GIST on behalf of an NSLP are identified by a\n   unique NSLP identifier (NSLPID).\
    \  NSLPIDs are 16-bit unsigned numbers\n   taken from a registry managed by IANA\
    \ and defined in Section 9 of the\n   GIST specification [RFC5971].\n   A range\
    \ of values (32704-32767) is available for Private and\n   Experimental use during\
    \ development.  Any new signaling application\n   that expects to be deployed\
    \ generally on the Internet needs to use\n   the registration procedure \"IESG\
    \ Approval\" in order to request\n   allocation of unique NSLPID value(s) from\
    \ the IANA registry.  There\n   is additional discussion of NSLPIDs in Section\
    \ 3.8 of the GIST\n   specification.\n"
- title: 9.  Security Considerations
  contents:
  - "9.  Security Considerations\n   This document provides information to the community.\
    \  It does not\n   itself raise new security concerns.\n   However, any extensions\
    \ that are made to the NSIS protocol suite will\n   need to be carefully assessed\
    \ for any security implications.  This is\n   particularly important because NSIS\
    \ messages are intended to be\n   actively processed by NSIS-capable routers that\
    \ they pass through,\n   rather than simply forwarded as is the case with most\
    \ IP packets.  It\n   is essential that extensions provide means to authorize\
    \ usage of\n   capabilities that might allocate resources and recommend the use\
    \ of\n   appropriate authentication and integrity protection measures in order\n\
    \   to exclude or adequately mitigate any security issues that are\n   identified.\n\
    \   Authors of new extensions for NSIS should review the analysis of\n   security\
    \ threats to NSIS documented in [RFC4081] as well as\n   considering whether the\
    \ new extension opens any new attack paths that\n   need to be mitigated.\n  \
    \ GIST offers facilities to authenticate NSIS messages and to ensure\n   that\
    \ they are delivered reliably.  Extensions must allow these\n   capabilities to\
    \ be used in an appropriate manner to minimize the\n   risks of NSIS messages\
    \ being misused and must recommend their\n   appropriate usage.\n   If additional\
    \ transport protocols are proposed for use in association\n   with GIST, an appropriate\
    \ set of compatible security functions must\n   be made available in conjunction\
    \ with the transport protocol to\n   support the authentication and integrity\
    \ functions expected to be\n   available through GIST.\n"
- title: 10.  Acknowledgements
  contents:
  - "10.  Acknowledgements\n   This document combines work previously published as\
    \ two separate\n   documents: \"What is Next Steps in Signaling anyway - A User's\
    \ Guide\n   to the NSIS Protocol Family\" written by Roland Bless and Jukka\n\
    \   Manner, and \"NSIS Extensibility Model\" written by John Loughney.\n   Max\
    \ Laier, Nuutti Varis and Lauri Liuhto have provided reviews of the\n   \"User's\
    \ Guide\" and valuable input.  Teemu Huovila also provided\n   valuable input\
    \ on the later versions.\n   The \"Extensibility Model\" borrowed some ideas and\
    \ some text from RFC\n   3936 [RFC3936], \"Procedures for Modifying the Resource\
    \ ReSerVation\n   Protocol (RSVP)\".  Robert Hancock provided text for the original\
    \ GIST\n   section, since much modified, and Claudia Keppler has provided\n  \
    \ feedback on this document, while Allison Mankin and Bob Braden\n   suggested\
    \ that this document be worked on.\n"
- title: 11.  References
  contents:
  - '11.  References

    '
- title: 11.1.  Normative References
  contents:
  - "11.1.  Normative References\n   [RFC3726]       Brunner, M., \"Requirements for\
    \ Signaling Protocols\",\n                   RFC 3726, April 2004.\n   [RFC4080]\
    \       Hancock, R., Karagiannis, G., Loughney, J., and S.\n                 \
    \  Van den Bosch, \"Next Steps in Signaling (NSIS):\n                   Framework\"\
    , RFC 4080, June 2005.\n   [RFC4081]       Tschofenig, H. and D. Kroeselberg,\
    \ \"Security Threats\n                   for Next Steps in Signaling (NSIS)\"\
    , RFC 4081,\n                   June 2005.\n   [RFC5226]       Narten, T. and\
    \ H. Alvestrand, \"Guidelines for Writing\n                   an IANA Considerations\
    \ Section in RFCs\", BCP 26,\n                   RFC 5226, May 2008.\n   [RFC5971]\
    \       Schulzrinne, H. and R. Hancock, \"GIST: General\n                   Internet\
    \ Signalling Transport\", RFC 5971,\n                   October 2010.\n   [RFC5973]\
    \       Stiemerling, M., Tschofenig, H., Aoun, C., and E.\n                  \
    \ Davies, \"NAT/Firewall NSIS Signaling Layer Protocol\n                   (NSLP)\"\
    , RFC 5973, October 2010.\n   [RFC5974]       Manner, J., Karagiannis, G., and\
    \ A. McDonald, \"NSIS\n                   Signaling Layer Protocol (NSLP) for\
    \ Quality-of-\n                   Service Signaling\", RFC 5974, October 2010.\n\
    \   [RFC5975]       Ash, G., Bader, A., Kappler, C., and D. Oran, \"QSPEC\n  \
    \                 Template for the Quality-of-Service NSIS Signaling\n       \
    \            Layer Protocol (NSLP)\", RFC 5975, October 2010.\n"
- title: 11.2.  Informative References
  contents:
  - "11.2.  Informative References\n   [CL]            Kappler, C., Fu, X., and B.\
    \ Schloer, \"A QoS Model for\n                   Signaling IntServ Controlled-Load\
    \ Service with NSIS\",\n                   Work in Progress, April 2010.\n   [EST-MRM]\
    \       Bless, R., \"An Explicit Signaling Target Message\n                  \
    \ Routing Method (EST-MRM) for the General Internet\n                   Signaling\
    \ Transport (GIST) Protocol\", Work\n                   in Progress, June 2010.\n\
    \   [GIST-DCCP]     Manner, J., \"Generic Internet Signaling Transport\n     \
    \              over DCCP and DTLS\", Work in Progress, June 2007.\n   [GIST-RAO]\
    \      Hancock, R., \"Using the Router Alert Option for\n                   Packet\
    \ Interception in GIST\", Work in Progress,\n                   November 2008.\n\
    \   [GIST-SCTP]     Fu, X., Dickmann, C., and J. Crowcroft, \"General\n      \
    \             Internet Signaling Transport (GIST) over Stream\n              \
    \     Control Transmission Protocol (SCTP) and Datagram\n                   Transport\
    \ Layer Security (DTLS)\", Work in Progress,\n                   May 2010.\n \
    \  [HYPATH]        Cordeiro, L., Curado, M., Monteiro, E., Bernardo, V.,\n   \
    \                Palma, D., Racaru, F., Diaz, M., and C. Chassot,\n          \
    \         \"GIST Extension for Hybrid On-path Off-path Signaling\n           \
    \        (HyPath)\", Work in Progress, February 2008.\n   [NSIS-AUTH]     Manner,\
    \ J., Stiemerling, M., Tschofenig, H., and R.\n                   Bless, \"Authorization\
    \ for NSIS Signaling Layer\n                   Protocols\", Work in Progress,\
    \ July 2008.\n   [PEERING-DATA]  Manner, J., Liuhto, L., Varis, N., and T. Huovila,\n\
    \                   \"Peering Data for NSIS Signaling Layer Protocols\",\n   \
    \                Work in Progress, February 2008.\n   [RAO-BAD]       Rahman,\
    \ R. and D. Ward, \"Use of IP Router Alert\n                   Considered Dangerous\"\
    , Work in Progress,\n                   October 2008.\n   [RESV-AGGR]     Doll,\
    \ M. and R. Bless, \"Inter-Domain Reservation\n                   Aggregation\
    \ for QoS NSLP\", Work in Progress,\n                   July 2007.\n   [RFC1633]\
    \       Braden, B., Clark, D., and S. Shenker, \"Integrated\n                \
    \   Services in the Internet Architecture: an Overview\",\n                  \
    \ RFC 1633, June 1994.\n   [RFC2205]       Braden, B., Zhang, L., Berson, S.,\
    \ Herzog, S., and S.\n                   Jamin, \"Resource ReSerVation Protocol\
    \ (RSVP) --\n                   Version 1 Functional Specification\", RFC 2205,\n\
    \                   September 1997.\n   [RFC3692]       Narten, T., \"Assigning\
    \ Experimental and Testing\n                   Numbers Considered Useful\", BCP\
    \ 82, RFC 3692,\n                   January 2004.\n   [RFC3936]       Kompella,\
    \ K. and J. Lang, \"Procedures for Modifying\n                   the Resource\
    \ reSerVation Protocol (RSVP)\", BCP 96,\n                   RFC 3936, October\
    \ 2004.\n   [RFC4094]       Manner, J. and X. Fu, \"Analysis of Existing Quality-\n\
    \                   of-Service Signaling Protocols\", RFC 4094, May 2005.\n  \
    \ [TWO-LEVEL]     Braden, R. and B. Lindell, \"A Two-Level Architecture\n    \
    \               for Internet Signaling\", Work in Progress,\n                \
    \   November 2002.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Jukka Manner\n   Aalto University\n   Department of Communications\
    \ and Networking (Comnet)\n   P.O. Box 13000\n   FIN-00076 Aalto\n   Finland\n\
    \   Phone: +358 9 470 22481\n   EMail: jukka.manner@tkk.fi\n   URI:   http://www.netlab.tkk.fi/~jmanner/\n\
    \   Roland Bless\n   Institute of Telematics, Karlsruhe Institute of Technology\
    \ (KIT)\n   Zirkel 2, Building 20.20\n   P.O. Box 6980\n   Karlsruhe  76049\n\
    \   Germany\n   Phone: +49 721 608 6413\n   EMail: bless@kit.edu\n   URI:   http://tm.kit.edu/~bless\n\
    \   John Loughney\n   Nokia\n   955 Page Mill Road\n   Palo Alto, CA  94303\n\
    \   USA\n   Phone: +1 650 283 8068\n   EMail: john.loughney@nokia.com\n   Elwyn\
    \ Davies (editor)\n   Folly Consulting\n   Soham\n   UK\n   EMail: elwynd@folly.org.uk\n\
    \   URI:   http://www.folly.org.uk\n"
