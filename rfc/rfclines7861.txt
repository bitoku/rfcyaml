Abstract This document specifies version 3 of the Remote Procedure Call (RPC) security protocol (RPCSEC GSS).
This protocol provides support for multi principal authentication of client hosts and user principals to a server (constructed by generic composition), security label assertions for multi level security and type enforcement, structured privilege assertions, and channel bindings.
This document updates RFC 5403.
The original Remote Procedure Call (RPC) security protocol (RPCSEC GSS)
[RFC2203] provided for authentication of RPC clients and servers to each other using the Generic Security Service Application Programming Interface (GSS API)
The second version of RPCSEC GSS [RFC5403] added support for channel bindings [RFC5056].
Existing GSS API mechanisms are insufficient for communicating certain authorization and authentication information to a server.
The GSS API and its mechanisms certainly could be extended to address this shortcoming.
However, it is addressed here at the application layer, i.e., in RPCSEC GSS.
A major motivation for version 3 of RPCSEC GSS (RPCSEC GSSv3) is to add support for multi level (labeled) security and server side copy for NFSv4.
Multi Level Security (MLS) is a traditional model where subjects (processes) are given a security level (Unclassified, Secret, Top Secret, etc.)
and objects (files) are given security labels that mandate the access of the subject to the object (see Section 9.1 of [RFC7862]).
Labeled NFS (see Section 9 of [RFC7862]) uses an MLS policy with Mandatory Access Control (MAC) systems as defined in [RFC4949].
Labeled NFS stores MAC file object labels on the NFS server and enables client Guest Mode MAC as described in Section 9.5.3 of [RFC7862].
RPCSEC GSSv3 label assertions assert client MAC process subject labels to enable Full Mode MAC when combined with Labeled NFS as described in Section 9.5.1 of [RFC7862].
A traditional inter server file copy entails the user gaining access to a file on the source, reading it, and writing it to a file on the destination.
In secure NFSv4 inter server server side copy (see Section 4 of [RFC7862]), the user first secures access to both source and destination files and then uses NFSv4.2 defined RPCSEC GSSv3 structured privileges to authorize the destination to copy the file from the source on behalf of the user.
Multi principal authentication can be used to address shared cache poisoning attacks (see Section 9 of [AFS RXGK]) on the client cache by a user.
As described in Section 7 of [AFS RXGK], multi user machines with a single cache manager can fetch and cache data on a user's behalf and re display it for another user from the cache without refetching the data from the server.
The initial data acquisition is authenticated by the first user's credentials, and if only that user's credentials are used, it may be possible for a malicious user or users to "poison" the cache for other users by introducing bogus data into the cache.
Another use of the multi principal assertion is the secure conveyance of privilege information for processes running with more (or even with less) privilege than the user normally would be accorded.
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in RFC 2119
Added Functionality RPCSEC GSS version 3 (RPCSEC GSSv3) is the same as RPCSEC GSSv2 [RFC5403], except that the following assertions of authority have been added:  Security labels for Full Mode security type enforcement, and other labeled security models (see Section 9.5.1 of [RFC7862]).
These allow an RPC application client to pass structured information to the corresponding application code in a server to control the use of the privilege and/or the conditions in which the privilege may be exercised.
For an example, see server side copy as described in [RFC7862].
Multi principal authentication of the client host and user to the server, done by binding two RPCSEC GSS handles.
Assertions of labels and privileges are evaluated by the server, which may then map the asserted values to other values, all according to server side policy.
An option for enumerating server supported Label Format Specifiers (LFSs) is provided.
See Section 9.1 of [RFC7862].
Note that there is no RPCSEC GSS
CREATE payload that is REQUIRED to implement.
RPCSEC GSSv3 implementations are feature driven.
Besides implementing the RPCSEC GSS CREATE operation and payloads for the desired features, all RPCSEC GSSv3 implementations MUST implement:  The new RPCSEC GSS version number (Section 2.2).
The new reply verifier (Section 2.3).
The new auth stat values (Section 2.6).
RPCSEC GSSv3 targets implementing a desired feature MUST also implement the RPCSEC GSS LIST operation, and the RPCSEC GSS CREATE operation replies for unsupported features as follows:  For label assertions, the target indicates no support by returning the new RPCSEC GSS LABEL PROBLEM auth stat value (see Section 2.7.1.3).
For structured privilege assertions, the target indicates no support by returning the new RPCSEC GSS UNKNOWN MESSAGE auth stat value (see Section 2.7.1.4).
For multi principal authentication (Section 2.7.1.1), the target indicates no support by not including an rgss3 gss mp auth value in the rgss3 create res.
For channel bindings (Section 2.7.1.2), the target indicates no support by not including an rgss3 chan binding value in the rgss3 create res.
This document contains the External Data Representation (XDR)
[RFC4506] definitions for the RPCSEC GSSv3 protocol.
The XDR description is provided in this document in a way that makes it simple for the reader to extract it into a form that is ready to compile.
That is, if the above script is stored in a file called "extract.sh" and this document is in a file called "spec.txt", then the reader can do: <CODE BEGINS> sh extract.sh
rpcsec gss v3.x <CODE ENDS
The RPCSEC GSSv3 Protocol RPCSEC GSS version 3 (RPCSEC GSSv3) is very similar to RPCSEC GSS version 2 (RPCSEC GSSv2)
The difference is that the new support for assertions and channel bindings is implemented via a different mechanism.
The entire RPCSEC GSSv3 protocol is not presented here.
Only the differences between RPCSEC GSSv3 and RPCSEC GSSv2 are shown.
RPCSEC GSSv3 is implemented as follows:
A client uses an existing RPCSEC GSSv3 context handle established in the usual manner (see Section 5.2 of [RFC2203]) to protect RPCSEC GSSv3 exchanges; this will be termed the "parent" handle.
The server issues a "child" RPCSEC GSSv3 handle in the RPCSEC GSS CREATE response, which uses the underlying GSS API security context of the parent handle in all subsequent exchanges that use the child handle.
An RPCSEC GSSv3 child handle MUST NOT be used as the parent handle in an RPCSEC GSS3 CREATE control message.
The functionality of RPCSEC GSSv2 [RFC5403] is fully supported by RPCSEC GSSv3, with the exception of the RPCSEC GSS BIND CHANNEL operation, which is not supported when RPCSEC GSSv3 is in use (see Section 2.5).
An initiator that supports version 3 of RPCSEC GSS simply issues an RPCSEC GSS request with the rgc version field set to RPCSEC GSS VERS 3.
If the target does not recognize RPCSEC GSS VERS 3, the target will return an RPC error per Section 5.1 of [RFC2203].
The initiator MUST NOT attempt to use an RPCSEC GSS handle returned by version 3 of a target with version 1 or version 2 of the same target.
The initiator MUST NOT attempt to use an RPCSEC GSS handle returned by version 1 or version 2 of a target with version 3 of the same target.
A new reply verifier is needed for RPCSEC GSSv3 because of a situation that arises from the use of the same GSS context by child and parent handles.
Because the RPCSEC GSSv3 child handle uses the same GSS context as the parent handle, a child and parent RPCSEC GSSv3 handle could have the same RPCSEC GSS sequence numbers.
Since the reply verifier of previous versions of RPCSEC GSS computes a Message Integrity Code (MIC) on just the sequence number, this provides opportunities for man in the middle attacks.
This issue is addressed in RPCSEC GSS version 3 by computing the verifier using exactly the same input as the information used to compute the request verifier, except that the mtype is changed from CALL to REPLY.
binds the RPCSEC GSS handle  / 2.4.
The following code fragment replaces the corresponding preliminary code shown in Figure 1 of [RFC5403].
The values in the code fragment in Section 2.6 are additions to the auth stat enumeration.
Subsequent code fragments are additions to the code for version 2 that support the new procedures defined in version 3.
IS PROVIDED BY THE COPYRIGHT HOLDERS
FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
EVENT SHALL THE COPYRIGHT OWNER
NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
This code was derived from RFC 2203,
Please reproduce this note if possible.
/  Note: The enumerated value for 0 is reserved.
rpc gss svc channel prot
const RPCSEC GSS VERS 2   2
As seen above, the RPCSEC GSSv3 credential has the same format as the RPCSEC GSSv1 [RFC2203] and RPCSEC GSSv2 [RFC5403] credential.
Setting the rgc version field to 3 indicates that the initiator and target support the new RPCSEC GSSv3 control procedures.
RPCSEC GSS BIND CHANNEL Operation RPCSEC GSSv3 provides a channel binding assertion that replaces the RPCSEC GSSv2 RPCSEC GSS BIND CHANNEL operation.
The RPCSEC GSS BIND CHANNEL operation is not supported on RPCSEC GSS version 3 handles.
If a server receives an RPCSEC GSS BIND CHANNEL operation on an RPCSEC GSSv3 handle, it MUST return a reply status of MSG ACCEPTED with an accept stat of PROC UNAVAIL
New auth stat Values RPCSEC GSSv3 requires the addition of several values to the auth
The use of these new auth stat values is explained throughout this document.
/ RPCSEC GSS INNER CREDPROBLEM   15
There are two new RPCSEC GSSv3 control procedures: RPCSEC GSS CREATE and RPCSEC GSS LIST.
The RPCSEC GSS CREATE procedure binds any combination of assertions   multi principal authentication, labels, structured privileges, or channel bindings   to a new RPCSEC GSSv3 context returned in the rgss3 create res rcr handle field.
The RPCSEC GSS LIST procedure queries the target for supported assertions.
RPCSEC GSS version 3 control messages are similar to the RPCSEC GSS version 1 and version 2 RPCSEC GSS DESTROY control message (see Section 5.4 of [RFC2203]) in that the sequence number in the request must be valid and the header checksum in the verifier must be valid.
As in RPCSEC GSS version 1 and version 2, the RPCSEC GSS version 3 control messages may contain call data following the verifier in the body of the NULLPROC procedure.
In other words, they look a lot like an RPCSEC GSS data message with the header procedure set to NULLPROC.
The client MUST use one of the following security services to protect the RPCSEC GSS CREATE or RPCSEC GSS LIST control message:  rpc gss svc integrity  rpc gss svc privacy
Specifically, the client MUST NOT use rpc gss svc none.
RPCSEC GSS LIST can also use rpc gss svc channel prot (see RPCSEC GSSv2 [RFC5403]) if the request is sent using an RPCSEC GSSv3 child handle with channel bindings
enabled as described in Section 2.7.1.2.
New Control Procedure RPCSEC GSS CREATE <CODE
The call data for an RPCSEC GSS CREATE request consists of an rgss3 create args, which binds one or more items of several kinds to the returned rcr
RPCSEC GSSv3 context handle (the child handle):
Multi principal authentication: another RPCSEC GSS context handle
A channel binding  Authorization assertions: labels and/or privileges The reply to this message consists of either an error or an rgss3 create res structure.
As noted in Sections 2.7.1.3 and 2.7.1.4, successful rgss3 assertions are enumerated in rcr assertions and are REQUIRED to be enumerated in the same order as they appeared in the rca assertions argument.
Upon a successful RPCSEC GSS CREATE, both the client and the server need to associate the resultant child rcr handle context handle with the parent context handle in their GSS context caches so as to be able to reference the parent context given the child context handle.
RPCSEC GSSv3 child handles MUST be destroyed upon the destruction of the associated parent handle.
Server implementation and policy MAY result in labels, privileges, and identities being mapped to concepts and values that are local to the server.
Server policies should take into account the identity of the client and/or user as authenticated via the GSS API.
Multi Principal Authentication <CODE BEGINS
struct rgss3 gss mp auth {
> RPCSEC GSSv3 clients MAY assert a multi principal authentication of the RPC client host principal and a user principal.
This feature is needed, for example, when an RPC client host wishes to use authority assertions that the server may only grant if a user and an RPC client host are authenticated together to the server.
Thus, a server may refuse to grant requested authority to a user acting alone (e.g., via an unprivileged user space program) or to an RPC client host acting alone (e.g., when an RPC client host is acting on behalf of a user) but may grant requested authority to an RPC client host acting on behalf of a user if the server identifies the user and trusts the RPC client host.
It is assumed that an unprivileged user space program would not have access to RPC client host credentials needed to establish a GSS API security context authenticating the RPC client host to the server; therefore, an unprivileged user space program could not create an RPCSEC GSSv3 RPCSEC GSS CREATE message that successfully binds an RPC client host and a user security context.
In addition to the parent handle (Section 2), the multi principal authentication call data has an RPCSEC GSS version 3 handle referenced via the rgmp handle field termed the "inner" handle.
Clients using RPCSEC GSSv3 multi principal authentication MUST use an RPCSEC GSSv3 context handle that corresponds to a GSS API security context that authenticates the RPC client host for the parent handle.
The inner context handle of the multi principal authentication assertion MUST use an RPCSEC GSSv3 context handle that corresponds to a GSS API security context that authenticates the user.
The reverse (parent handle authenticates user, inner context handle authenticates an RPC client host) MUST NOT be used.
Other multi principal parent and inner context handle uses might eventually make sense, but they would need to be introduced in a new revision of the RPCSEC GSS protocol.
The child context handle returned by a successful multi principal assertion binds
the inner RPCSEC GSSv3 context handle to the parent RPCSEC GSS context handle and MUST be treated by servers as authenticating the GSS API initiator principal authenticated by the inner context handle's GSS API security context.
This principal may be mapped to a server side notion of user or principal.
Multi principal binding is done by including an assertion of type rgss3 gss mp auth in the RPCSEC GSS CREATE rgss3 create args call data.
The inner context handle is placed in the rgmp handle field.
A MIC of the RPC header, up to and including the credential, is computed using the GSS API security context associated with the inner context handle and is placed in the rgmp rpcheader mic field.
Note that the rgmp rpcheader mic only identifies the client host GSS context by its context handle (the parent context handle) in the RPC header.
An RPCSEC GSS CREATE control procedure with a multi principal authentication payload MUST use the rpc gss svc privacy security service for protection.
This prevents an attacker from intercepting the RPCSEC GSS CREATE control procedure, reassigning the (parent) context handle, and stealing the user's identity.
The target verifies the multi principal authentication by first confirming that the parent context used is an RPC client host context; the target then verifies the rgmp rpcheader mic using the GSS API security context associated with the rgmp handle field.
On successful verification, the rgss3 gss mp auth field in the rgss3 create res reply MUST be filled in with the inner RPCSEC GSSv3 context handle as the rgmp handle and a MIC computed over the RPC reply header (see Section 2.3) using the GSS API security context associated with the inner handle.
On failure, the rgss3 gss mp auth field is not sent (rgss3 gss mp auth is an optional field).
A MSG DENIED reply to the RPCSEC GSS CREATE call is formulated as usual.
As described in Section 5.3.3.3 of [RFC2203], the server maintains a list of contexts for the clients that are currently in session with it.
When a client request comes in, there may not be a context corresponding to its handle.
When this occurs on an RPCSEC GSS3 CREATE request processing of the parent handle, the server rejects the request with a reply status of MSG DENIED with the reject stat of AUTH ERROR and with an auth stat value of RPCSEC GSS CREDPROBLEM.
A new value, RPCSEC GSS INNER CREDPROBLEM, has been added to the auth stat type.
With a multi principal authorization request, the server must also have a context corresponding to the inner context handle.
When the server does not have a context handle corresponding to the inner context handle of a multi principal authorization request, the server sends a reply status of MSG DENIED with the reject stat of AUTH ERROR and with an auth stat value of RPCSEC GSS INNER CREDPROBLEM.
When processing the multi principal authentication request, if the GSS VerifyMIC() call on the rgmp rpcheader mic fails to return GSS S COMPLETE, the server sends a reply status of MSG DENIED with the reject stat of AUTH ERROR and with an auth stat value of RPCSEC GSS INNER CREDPROBLEM.
> RPCSEC GSSv3 provides a different way to do channel binding than RPCSEC GSSv2
RPCSEC GSSv3 builds on RPCSEC GSSv1 by reusing existing, established context handles rather than providing a different RPC security flavor for establishing context handles.
Channel bindings data is not hashed because there is now general agreement that it is the secure channel's responsibility to produce channel bindings data of manageable size.
(a) is useful in keeping RPCSEC GSSv3 simple in general, not just for channel binding.
(b) is useful in keeping RPCSEC GSSv3 simple specifically for channel binding.
Channel binding is accomplished as follows.
The client prefixes the channel bindings data octet string with the channel type as described in [RFC5056]; then, the client calls GSS GetMIC() to get a MIC of the resulting octet string, using the parent
RPCSEC GSSv3 context handle's GSS API security context.
The MIC is then placed in the rca chan bind mic field of RPCSEC GSS CREATE arguments (rgss3 create args).
If the rca chan bind mic field of the arguments of an RPCSEC GSS CREATE control message is set, then the server MUST verify the client's channel binding MIC if the server supports this feature.
If channel binding verification succeeds, then the server MUST generate a new MIC of the same channel bindings and place it in the rcr chan bind mic field of the RPCSEC GSS CREATE rgss3 create res results.
If channel binding verification fails or the server doesn't support channel binding
, then the server MUST indicate this in its reply by not including an rgss3 chan binding value in rgss3 create res (rgss3 chan binding is an optional field).
The client MUST verify the result's rcr chan bind mic value by calling GSS VerifyMIC() with the given MIC and the channel bindings data (including the channel type prefix).
If client side channel  binding verification fails, then the client MUST call RPCSEC GSS DESTROY.
If the client requested channel binding but the server did not include an rcr chan binding mic field in the results, then the client MAY continue to use the resulting context handle as though channel binding had never been requested.
If the client considers channel binding critical, it MUST call RPCSEC GSS DESTROY.
Once a successful [channel binding] procedure has been performed on an [RPCSEC GSSv3] context handle, the initiator's implementation may map application requests for rpc gss svc none and rpc gss svc integrity to rpc gss svc channel prot credentials.
And if the secure channel has privacy enabled, requests for rpc gss svc privacy can also be mapped to rpc gss svc channel prot.
Any RPCSEC GSSv3 child context handle that has been bound to a secure channel in this way SHOULD be used only with the rpc gss svc channel prot and SHOULD NOT be used with rpc gss svc none or rpc gss svc integrity
if the secure channel does not provide privacy protection, then the client MAY use rpc gss svc privacy where privacy protection is needed or desired.
The client discovers, via the RPCSEC GSS LIST control message, which LFSs the server supports.
Full Mode MAC is enabled when an RPCSEC GSS version 3 process subject label assertion is combined with a file object label provided by the NFSv4.2 sec label attribute.
Label encoding is specified to mirror the NFSv4.2 sec label attribute described in Section 12.2.4 of [RFC7862].
The LFS is an identifier used by the client to establish the syntactic format of the security label and the semantic meaning of its components.
The Policy Identifier (PI) is an optional part of the definition of an LFS that allows clients and the server to identify specific security policies.
The opaque label field (rgss3 label) is dependent on the MAC model to interpret and enforce.
If a label itself requires privacy protection (i.e., requires that the user can assert that the label is a secret), then the client MUST use the rpc gss svc privacy protection service for the RPCSEC GSS CREATE request.
RPCSEC GSSv3 clients MAY assert a set of subject security labels in some LFS by binding a label assertion to the RPCSEC GSSv3 child context handle.
This is done by including an assertion of type rgss3 label in the RPCSEC GSS CREATE rgss3 create args rca assertions call data.
The label assertion payload is the set of subject labels asserted by the calling NFS client process.
The resultant child context is used for NFS requests asserting the client process subject labels.
The NFS server process that handles such requests then asserts the (client) process subject label(s) as it attempts to access a file that has associated Labeled NFS object labels.
Servers that support labeling in the requested LFS MAY map the requested subject label to a different subject label as a result of server side policy evaluation.
The labels that are accepted by the target and bound to the RPCSEC GSSv3 context MUST be enumerated in the rcr assertions field of the rgss3 create res RPCSEC GSS CREATE reply.
Servers that do not support labeling or that do not support the requested LFS reject the label assertion with a reply status of MSG DENIED, a reject status of AUTH ERROR, and an auth stat of RPCSEC GSS LABEL PROBLEM.
Structured Privilege Assertions <CODE BEGINS
> A structured privilege is a capability defined by a specific RPC application.
To support the assertion of this privilege, by a client using the application, in a server that also supports the application, the application may define a private data structure that is understood by clients and servers implementing the RPC application.
RPCSEC GSSv3 clients MAY assert a structured privilege by binding the privilege to the RPCSEC GSSv3 context handle.
This is done by including an assertion of type rgss3 privs in the RPCSEC GSS CREATE rgss3 create args rca assertions call data.
The privilege is identified by the description string that is used by RPCSEC GSSv3 to identify the privilege and communicate the private data between the relevant RPC application specific code without needing to be aware of the details of the structure used.
Thus, as far as RPCSEC GSSv3 is concerned, the defined structure is passed between client and server as opaque data encoded in the rpc gss3 privs rp privilege field.
Encoding, server verification, and any server policies for structured privileges are described by the RPC application definition.
The rp name field of rpc gss3 privs carries the description string used to identify and list the privilege.
The utf8str cs definition is from [RFC7530].
A successful structured privilege assertion MUST be enumerated in the rcr assertions field of the rgss3 create res RPCSEC GSS CREATE reply.
If a server receives a structured privilege assertion that it does not recognize, the assertion is rejected with a reply status of MSG DENIED, a reject status of AUTH ERROR, and an auth stat of RPCSEC GSS UNKNOWN MESSAGE.
It is assumed that a client asserting more than one structured privilege to be bound to a context handle would not require all the privilege assertions to succeed.
The server MUST NOT reject RPCSEC GSS CREATE requests containing supported structured privilege assertions, even if some of those assertions are rejected (e.g., for local policy reasons).
If a server receives an RPCSEC GSS CREATE request containing one or more unsupported structured privilege assertions, the request MUST be rejected with a reply status of MSG DENIED, a reject status of AUTH ERROR, and an auth stat of RPCSEC GSS PRIVILEGE PROBLEM.
("Inter Server Copy via ONC RPC with RPCSEC GSSv3") shows an example of structured privilege definition and use.
New Control Procedure RPCSEC GSS LIST <CODE BEGINS
The call data for an RPCSEC GSS LIST request consists of a list of integers (rla list what) indicating what assertions are to be listed, and the reply consists of an error or the requested list.
The result of requesting a list of rgss3 list item LABEL objects is a list of LFSs supported by the server.
The client can then use the LFS list to assert labels via the RPCSEC GSS CREATE label assertions.
Extensibility Assertion types may be added in the future by adding arms to the "rgss3 assertion u" union (Section 2.7.1) and the "rgss3 list item u" union (Section 2.7.2).
Supplementary group memberships of the client/user, including support for specifying deltas to the membership list as seen on the server.
Operational Recommendation for Deployment RPCSEC GSSv3 is a superset of RPCSEC GSSv2 [RFC5403], which in turn is a superset of RPCSEC GSSv1 [RFC2203], and so can be used in all situations where RPCSEC GSSv2 is used, or where RPCSEC GSSv1 is used and channel bindings functionality is not needed.
RPCSEC GSSv3 should be used when the new functionality is needed.
This entire document deals with security issues.
The RPCSEC GSSv3 protocol allows for client side assertions of data that is relevant to server side authorization decisions.
These assertions must be evaluated by the server in the context of whether the client and/or user are authenticated, whether multi principal authentication was used, whether the client is trusted, what ranges of assertions are allowed for the client and the user (separately or together), and any relevant server side policy.
The security semantics of assertions carried by RPCSEC GSSv3 are application protocol specific.
Note that RPCSEC GSSv3 is not a complete solution for labeling: it conveys the labels of actors but not the labels of objects.
RPC application protocols may require extending in order to carry object label information.
There may be interactions with NFSv4's callback security scheme and NFSv4.1's [RFC5661] GSS SSV (Secret State Verifier) mechanisms.
Specifically, the NFSv4 callback scheme requires that the server initiate GSS API security contexts, which does not work well in practice; in the context of client side processes running as the same user but with different privileges and security labels, the NFSv4 callback security scheme seems particularly unlikely to work well.
NFSv4.1 has the server use an existing, client initiated RPCSEC GSS context handle to protect server initiated callback RPCs.
The NFSv4.1 callback security scheme lacks all the problems of the NFSv4 scheme; however, it is important that the server pick an appropriate RPCSEC GSS context handle to protect any callbacks.
Specifically, it is important that the server use RPCSEC GSS context
handles that authenticate the client to protect any callbacks related to server state initiated by RPCs protected by RPCSEC GSSv3 contexts.
As described in Section 2.10.10 of [RFC5661], the client is permitted to associate multiple RPCSEC GSS handles with a single SSV GSS context.
RPCSEC GSSv3 handles will work well with SSV in that the man in the middle attacks described in Section 2.10.10 of [RFC5661] are solved by the new reply verifier (Section 2.3).
Using an RPCSEC GSSv3 handle backed by a GSS SSV mechanism context as a parent handle in an RPCSEC GSS CREATE call, while permitted, is complicated by the lifetime rules of SSV contexts and their associated RPCSEC GSS handles.
This section uses terms that are defined in [RFC5226].
New RPC Authentication Status Numbers
The following new RPC Authentication Status Numbers have been added to the IANA registry:  RPCSEC GSS INNER CREDPROBLEM (15)  "
No credentials for multi principal assertion inner context user".
RPCSEC GSS LABEL PROBLEM (16)  "Problem with label assertion".
RPCSEC GSS PRIVILEGE PROBLEM (17)  "Problem with structured privilege assertion".
RPCSEC GSS UNKNOWN MESSAGE (18)  "Unknown structured privilege assertion".
Structured Privilege Name Definitions IANA has created a registry called the "RPCSEC GSS Structured Privilege Names Registry".
Structured privilege assertions (Section 2.7.1.4) are defined by a specific RPC application.
The namespace identifiers for these assertions (the rp name) are defined as string names.
The RPCSEC GSSv3 protocol does not define the specific assignment of the namespace for these structured privilege assertion names.
The IANA registry promotes interoperability where common interests exist.
While RPC application developers are allowed to define and use structured privileges as needed, they are encouraged to register structured privilege assertion names with IANA.
The registry is to be maintained using the Standards Action policy as defined in Section 4.1 of [RFC5226].
Under the RPCSEC GSS version 3 specification, the name of a structured privilege can in theory be up to 2^32 1 bytes in length, but in practice RPC application clients and servers will be unable to handle a string that long.
IANA should reject any assignment request with a structured privilege name that exceeds 128 UTF 8 characters.
To give the IESG the flexibility to set up bases of assignment of Experimental Use, the prefix "EXPE" is Reserved.
The structured privilege with a zero length name is Reserved.
The prefix "PRIV" is allocated for Private Use.
A site that wants to make use of unregistered named attributes without risk of conflicting with an assignment in IANA's registry should use the prefix "PRIV" in all of its structured privilege assertion names.
Because some RPC application clients and servers have case  insensitive semantics, the fifteen additional lower case and mixed  case permutations of each of "EXPE" and "PRIV" are Reserved (e.g., "expe", "expE", and "exPe" are Reserved).
Similarly, IANA must not allow two assignments that would conflict if both structured privilege names were converted to a common case.
The registry of structured privilege names is a list of assignments, each containing three fields for each assignment.
A US ASCII string name that is the actual name of the structured privilege.
This name must be unique.
This string name can be 1 to 128 UTF 8 characters long.
A reference to the specification of the RPC application defined structured privilege.
The reference can consume up to 256 bytes (or more if IANA permits).
The point of contact of the registrant.
The point of contact can consume up to 256 bytes (or more if IANA permits).
The initial registry consists of the three structured privileges defined in [RFC7862].
: copy to auth, REFERENCE: RFC 7862, CONTACT:
: copy from auth, REFERENCE:
The registrant is always permitted to update the point of contact field.
To make any other change will require Expert Review or IESG Approval.
