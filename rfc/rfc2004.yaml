- title: __initial_text__
  contents:
  - '                    Minimal Encapsulation within IP

    '
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Abstract
  contents:
  - "Abstract\n   This document specifies a method by which an IP datagram may be\n\
    \   encapsulated (carried as payload) within an IP datagram, with less\n   overhead\
    \ than \"conventional\" IP encapsulation that adds a second IP\n   header to each\
    \ encapsulated datagram.  Encapsulation is suggested as\n   a means to alter the\
    \ normal IP routing for datagrams, by delivering\n   them to an intermediate destination\
    \ that would otherwise not be\n   selected by the (network part of the) IP Destination\
    \ Address field in\n   the original IP header.  Encapsulation may be serve a variety\
    \ of\n   purposes, such as delivery of a datagram to a mobile node using\n   Mobile\
    \ IP.\n"
- title: 1. Introduction
  contents:
  - "1. Introduction\n   This document specifies a method by which an IP datagram\
    \ may be\n   encapsulated (carried as payload) within an IP datagram, with less\n\
    \   overhead than \"conventional\" IP encapsulation [4] that adds a second\n \
    \  IP header to each encapsulated datagram.  Encapsulation is suggested\n   as\
    \ a means to alter the normal IP routing for datagrams, by\n   delivering them\
    \ to an intermediate destination that would otherwise\n   not be selected by the\
    \ (network part of the) IP Destination Address\n   field in the original IP header.\
    \  The process of encapsulation and\n   decapsulation of a datagram is frequently\
    \ referred to as \"tunneling\"\n   the datagram, and the encapsulator and decapsulator\
    \ are then\n   considered to be the the \"endpoints\" of the tunnel; the encapsulator\n\
    \   node is refered to as the \"entry point\" of the tunnel, and the\n   decapsulator\
    \ node is refered to as the \"exit point\" of the tunnel.\n"
- title: 2. Motivation
  contents:
  - "2. Motivation\n   The Mobile IP working group has specified the use of encapsulation\
    \ as\n   a way to deliver packets from a mobile node's \"home network\" to an\n\
    \   agent that can deliver datagrams locally by conventional means to the\n  \
    \ mobile node at its current location away from home [5].  The use of\n   encapsulation\
    \ may also be indicated whenever the source (or an\n   intermediate router) of\
    \ an IP datagram must influence the route by\n   which a datagram is to be delivered\
    \ to its ultimate destination.\n   Other possible applications of encapsulation\
    \ include multicasting,\n   preferential billing, choice of routes with selected\
    \ security\n   attributes, and general policy routing.\n   See [4] for a discussion\
    \ concerning the advantages of encapsulation\n   versus use of the IP loose source\
    \ routing option.  Using IP headers\n   to encapsulate IP datagrams requires the\
    \ unnecessary duplication of\n   several fields within the inner IP header; it\
    \ is possible to save\n   some additional space by specifying a new encapsulation\
    \ mechanism\n   that eliminates the duplication.  The scheme outlined here comes\
    \ from\n   the Mobile IP Working Group (in earlier Internet Drafts), and is\n\
    \   similar to that which had been defined in [2].\n"
- title: 3. Minimal Encapsulation
  contents:
  - "3. Minimal Encapsulation\n   A minimal forwarding header is defined for datagrams\
    \ which are not\n   fragmented prior to encapsulation.  Use of this encapsulating\
    \ method\n   is optional.  Minimal encapsulation MUST NOT be used when an original\n\
    \   datagram is already fragmented, since there is no room in the minimal\n  \
    \ forwarding header to store fragmentation information.  To encapsulate\n   an\
    \ IP datagram using minimal encapsulation, the minimal forwarding\n   header is\
    \ inserted into the datagram, as follows:\n     +---------------------------+\
    \       +---------------------------+\n     |                           |    \
    \   |                           |\n     |         IP Header         |       |\
    \     Modified IP Header    |\n     |                           |       |    \
    \                       |\n     +---------------------------+ ====> +---------------------------+\n\
    \     |                           |       | Minimal Forwarding Header |\n    \
    \ |                           |       +---------------------------+\n     |  \
    \       IP Payload        |       |                           |\n     |      \
    \                     |       |                           |\n     |          \
    \                 |       |         IP Payload        |\n     +---------------------------+\
    \       |                           |\n                                      \
    \   |                           |\n                                         +---------------------------+\n\
    \   The IP header of the original datagram is modified, and the minimal\n   forwarding\
    \ header is inserted into the datagram after the IP header,\n   followed by the\
    \ unmodified IP payload of the original datagram (e.g.,\n   transport header and\
    \ transport data).  No additional IP header is\n   added to the datagram.\n  \
    \ In encapsulating the datagram, the original IP header [6] is modified\n   as\
    \ follows:\n    -  The Protocol field in the IP header is replaced by protocol\n\
    \       number 55 for the minimal encapsulation protocol.\n    -  The Destination\
    \ Address field in the IP header is replaced by the\n       IP address of the\
    \ exit point of the tunnel.\n    -  If the encapsulator is not the original source\
    \ of the datagram,\n       the Source Address field in the IP header is replaced\
    \ by the IP\n       address of the encapsulator.\n    -  The Total Length field\
    \ in the IP header is incremented by the\n       size of the minimal forwarding\
    \ header added to the datagram.\n       This incremental size is either 12 or\
    \ 8 octets, depending on\n       whether or not the Original Source Address Present\
    \ (S) bit is set\n       in the forwarding header.\n    -  The Header Checksum\
    \ field in the IP header is recomputed [6] or\n       updated to account for the\
    \ changes in the IP header described\n       here for encapsulation.\n    Note\
    \ that unlike IP-in-IP encapsulation [4], the Time to Live\n    (TTL) field in\
    \ the IP header is not modified during encapsulation;\n    if the encapsulator\
    \ is forwarding the datagram, it will decrement\n    the TTL as a result of doing\
    \ normal IP forwarding.  Also, since\n    the original TTL remains in the IP header\
    \ after encapsulation,\n    hops taken by the datagram within the tunnel are visible,\
    \ for\n    example, to \"traceroute\".\n   The format of the minimal forwarding\
    \ header is as follows:\n    0                   1                   2       \
    \            3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8\
    \ 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |   Protocol    |S|  reserved   |        Header Checksum        |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                 Original Destination Address                  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   :            (if present) Original Source Address               :\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      Protocol\n         Copied from the Protocol field in the original IP header.\n\
    \      Original Source Address Present (S)\n            0  The Original Source\
    \ Address field is not present.  The\n               length of the minimal tunneling\
    \ header in this case is\n               8 octets.\n            1  The Original\
    \ Source Address field is present.  The\n               length of the minimal\
    \ tunneling header in this case is\n               12 octets.\n      reserved\n\
    \         Sent as zero; ignored on reception.\n      Header Checksum\n       \
    \  The 16-bit one's complement of the one's complement sum of all\n         16-bit\
    \ words in the minimal forwarding header.  For purposes of\n         computing\
    \ the checksum, the value of the checksum field is 0.\n         The IP header\
    \ and IP payload (after the minimal forwarding\n         header) are not included\
    \ in this checksum computation.\n      Original Destination Address\n        \
    \ Copied from the Destination Address field in the original IP\n         header.\n\
    \      Original Source Address\n         Copied from the Source Address field\
    \ in the original IP header.\n         This field is present only if the Original\
    \ Source Address\n         Present (S) bit is set.\n   When decapsulating a datagram,\
    \ the fields in the minimal forwarding\n   header are restored to the IP header,\
    \ and the forwarding header is\n   removed from the datagram.  In addition, the\
    \ Total Length field in\n   the IP header is decremented by the size of the minimal\
    \ forwarding\n   header removed from the datagram, and the Header Checksum field\
    \ in\n   the IP header is recomputed [6] or updated to account for the changes\n\
    \   to the IP header described here for decapsulation.\n   The encapsulator may\
    \ use existing IP mechanisms appropriate for\n   delivery of the encapsulated\
    \ payload to the tunnel exit point.  In\n   particular, use of IP options are\
    \ allowed, and use of fragmentation\n   is allowed unless the \"Don't Fragment\"\
    \ bit is set in the IP header.\n   This restriction on fragmentation is required\
    \ so that nodes employing\n   Path MTU Discovery [3] can obtain the information\
    \ they seek.\n"
- title: 4. Routing Failures
  contents:
  - "4. Routing Failures\n   The use of any encapsulation method for routing purposes\
    \ brings with\n   it increased susceptibility to routing loops.  To cut down the\n\
    \   danger, a router should follow the same procedures outlined in [4].\n"
- title: 5. ICMP Messages from within the Tunnel
  contents:
  - "5. ICMP Messages from within the Tunnel\n   ICMP messages are to be handled as\
    \ specified in [4], including the\n   maintenance of tunnel \"soft state\".\n"
- title: 6. Security Considerations
  contents:
  - "6. Security Considerations\n   Security considerations are not addressed in this\
    \ document, but are\n   generally similar to those outlined in [4].\n"
- title: 7. Acknowledgements
  contents:
  - "7. Acknowledgements\n   The original text for much of Section 3 was taken from\
    \ the Mobile IP\n   draft [1].  Thanks to David Johnson for improving consistency\
    \ and\n   making many other improvements to the draft.\n"
- title: References
  contents:
  - "References\n   [1] Perkins, C., Editor, \"IPv4 Mobility Support\", Work in Progress,\n\
    \       May 1995.\n   [2] David B. Johnson.  Scalable and Robust Internetwork\
    \ Routing\n       for Mobile Hosts.  In Proceedings of the 14th International\n\
    \       Conference on Distributed Computing Systems, pages 2--11, June\n     \
    \  1994.\n   [3] Mogul, J.,  and S. Deering, \"Path MTU Discovery\", RFC 1191,\n\
    \       November 1990.\n   [4] Perkins, C., \"IP Encapsulation within IP\", RFC\
    \ 2003,\n       October 1996.\n   [5] Perkins, C., Editor, \"IP Mobility Support\"\
    , RFC 2002,\n       October 1996.\n   [6] Postel, J., Editor, \"Internet Protocol\"\
    , STD 5, RFC 791,\n       September 1981.\n"
- title: Author's Address
  contents:
  - "Author's Address\n   Questions about this memo can be directed to:\n   Charles\
    \ Perkins\n   Room H3-D34\n   T. J. Watson Research Center\n   IBM Corporation\n\
    \   30 Saw Mill River Rd.\n   Hawthorne, NY  10532\n   Work:   +1-914-784-7350\n\
    \   Fax:    +1-914-784-6205\n   EMail: perk@watson.ibm.com\n   The working group\
    \ can be contacted via the current chair:\n   Jim Solomon\n   Motorola, Inc.\n\
    \   1301 E. Algonquin Rd.\n   Schaumburg, IL  60196\n   Work:   +1-847-576-2753\n\
    \   EMail: solomon@comm.mot.com\n"
