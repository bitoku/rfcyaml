- title: __initial_text__
  contents:
  - '                       Testing Eyeball Happiness

    '
- title: Abstract
  contents:
  - "Abstract\n   The amount of time it takes to establish a session using common\n\
    \   transport APIs in dual-stack networks and networks with filtering\n   such\
    \ as proposed in BCP 38 is a barrier to IPv6 deployment.  This\n   note describes\
    \ a test that can be used to determine whether an\n   application can reliably\
    \ establish sessions quickly in a complex\n   environment such as dual-stack (IPv4+IPv6)\
    \ deployment or IPv6\n   deployment with multiple prefixes and upstream ingress\
    \ filtering.\n   This test is not a test of a specific algorithm, but of the external\n\
    \   behavior of the system as a black box.  Any algorithm that has the\n   intended\
    \ external behavior will be accepted by it.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document is not an Internet Standards Track specification;\
    \ it is\n   published for informational purposes.\n   This document is a product\
    \ of the Internet Engineering Task Force\n   (IETF).  It represents the consensus\
    \ of the IETF community.  It has\n   received public review and has been approved\
    \ for publication by the\n   Internet Engineering Steering Group (IESG).  Not\
    \ all documents\n   approved by the IESG are a candidate for any level of Internet\n\
    \   Standard; see Section 2 of RFC 5741.\n   Information about the current status\
    \ of this document, any errata,\n   and how to provide feedback on it may be obtained\
    \ at\n   http://www.rfc-editor.org/info/rfc6556.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2012 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction . . . . . . . . . . . . . . . . . . .\
    \ . . . . . .  2\n     1.1.  Requirements . . . . . . . . . . . . . . . . . .\
    \ . . . . .  3\n   2.  Measuring Eyeball Happiness  . . . . . . . . . . . . .\
    \ . . . .  3\n     2.1.  Happy Eyeballs Test-Bed Configuration  . . . . . . .\
    \ . . .  4\n     2.2.  Happy Eyeballs Test Procedure  . . . . . . . . . . . .\
    \ . .  5\n     2.3.  Metrics for Happy Eyeballs . . . . . . . . . . . . . . .\
    \ .  7\n       2.3.1.  Metric: Session Setup Interval . . . . . . . . . . . .\
    \  7\n       2.3.2.  Metric: Maximum Session Setup Interval . . . . . . . .  8\n\
    \       2.3.3.  Metric: Minimum Session Setup Interval . . . . . . . .  8\n  \
    \     2.3.4.  Descriptive Metric: Attempt Pattern  . . . . . . . . .  9\n   3.\
    \  Security Considerations  . . . . . . . . . . . . . . . . . . .  9\n   4.  Acknowledgements\
    \ . . . . . . . . . . . . . . . . . . . . . . .  9\n   5.  References . . . .\
    \ . . . . . . . . . . . . . . . . . . . . . .  9\n     5.1.  Normative References\
    \ . . . . . . . . . . . . . . . . . . .  9\n     5.2.  Informative References\
    \ . . . . . . . . . . . . . . . . . . 10\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   The Happy Eyeballs [RFC6555] specification notes an issue\
    \ in deployed\n   multi-prefix IPv6-only and dual-stack networks, and proposes\
    \ a\n   correction.  [RFC5461] similarly looks at TCP's response to so-called\n\
    \   \"soft errors\" (ICMP host and network unreachable messages), pointing\n \
    \  out an issue and a set of possible solutions.\n   In a dual-stack network (i.e.,\
    \ one that contains both IPv4 [RFC0791]\n   and IPv6 [RFC2460] prefixes and routes),\
    \ or in an IPv6-only network\n   that uses multiple prefixes allocated by upstream\
    \ providers that\n   implement BCP 38 ingress filtering [RFC2827], the fact that\
    \ two hosts\n   that need to communicate have addresses using the same architecture\n\
    \   does not imply that the network has usable routes connecting them, or\n  \
    \ that those addresses are useful to the applications in question.  In\n   addition,\
    \ the process of establishing a session using the sockets API\n   [RFC3493] is\
    \ generally described in terms of obtaining a list of\n   possible addresses for\
    \ a peer (which will normally include both IPv4\n   and IPv6 addresses) using\
    \ getaddrinfo() and trying them in sequence\n   until one succeeds or all have\
    \ failed.  This naive algorithm, if\n   implemented as described, has the side\
    \ effect of making the worst-\n   case delay in establishing a session far longer\
    \ than human patience\n   normally allows.\n   This has the effect of discouraging\
    \ users from enabling IPv6 in their\n   equipment or content providers from offering\
    \ AAAA records for their\n   services.\n   This note describes a test to determine\
    \ how quickly an application\n   can reliably open sessions in a complex environment,\
    \ such as dual-\n   stack (IPv4+IPv6) deployment or IPv6 deployment with multiple\n\
    \   prefixes and upstream ingress filtering.  This is not a test of a\n   specific\
    \ algorithm, but a measurement of the external behavior of the\n   application\
    \ and its host system as a black box.  The \"happy eyeballs\"\n   question is\
    \ this: how long does it take an application to open a\n   session with a server\
    \ or peer, under best-case and worst-case\n   conditions?\n   The methods defined\
    \ here make the assumption that the initial\n   communication setup of many applications\
    \ can be summarized by the\n   measuring the DNS query/response and transport-layer\
    \ handshaking,\n   because no application-layer communication takes place without\
    \ these\n   steps.\n   The methods and metrics defined in this note are ideally\
    \ suited for\n   laboratory operation, as this affords the greatest degree of\
    \ control\n   to modify configurations quickly and produce consistent results.\n\
    \   However, if the device under test is operated as a single user with\n   limited\
    \ query and stream generation, then there's no concern about\n   overloading production\
    \ network devices with a single \"set of\n   eyeballs\".  Therefore, these procedures\
    \ and metrics MAY be applicable\n   to a production network application, as long\
    \ as the injected traffic\n   represents a single user's typical traffic load,\
    \ and the testers\n   adhere to the precautions of the relevant network with respect\
    \ to re-\n   configuration of devices in production.\n"
- title: 1.1.  Requirements
  contents:
  - "1.1.  Requirements\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"\
    SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\"\
    , and \"OPTIONAL\" in this\n   document are to be interpreted as described in\
    \ [RFC2119].\n"
- title: 2.  Measuring Eyeball Happiness
  contents:
  - "2.  Measuring Eyeball Happiness\n   This measurement determines the amount of\
    \ time it takes an\n   application to establish a session with a peer in the presence\
    \ of at\n   least one IPv4 and multiple IPv6 prefixes and a variety of network\n\
    \   behaviors.  ISPs are reporting that a host (Mac OS X, Windows, Linux,\n  \
    \ FreeBSD, etc.) that has more than one address (an IPv4 and an IPv6\n   address,\
    \ two global IPv6 addresses, etc.) may serially try addresses,\n   allowing each\
    \ TCP setup to expire, taking several seconds for each\n   attempt.  There have\
    \ been reports of lengthy session setup times --\n   in various application and\
    \ OS combinations, anywhere from multi-\n   second to half an hour -- as a result.\
    \  The amount of time necessary\n   to establish communication between two entities\
    \ should be\n   approximately the same regardless of the type of address chosen\
    \ or\n   the viability of routing in the specific network; users will expect\n\
    \   this time to be consistent with their current experience (else,\n   happiness\
    \ is at risk).\n"
- title: 2.1.  Happy Eyeballs Test-Bed Configuration
  contents:
  - "2.1.  Happy Eyeballs Test-Bed Configuration\n   The configuration of equipment\
    \ and applications is as shown in\n   Figure 1.\n            +--------+ |    \
    \                  |198.51.100.0/24\n            |Protocol| |192.0.2.0/24    \
    \      |2001:db8:0:2::/64\n            |Analyzer+-+2001:db8:1:0::/64     |2001:db8:1:4::/64\n\
    \            +--------+ |2001:db8:0:1::/64     |2001:db8:2:4::/64\n          \
    \             |                      |\n               +-----+ |             \
    \         | +-----+\n               |Alice+-+                      +-+ Bob |\n\
    \               +-----+ | +-------+  +-------+ | +-----+\n                   \
    \    +-+Router1|  |Router2+-+\n               +-----+ | +-----+-+  +-+-----+ |\n\
    \               | DNS +-+       |      |       |\n               +-----+ |   \
    \   -+------+-      |\n                       |    203.0.113.0/24    |\n     \
    \                  |    2001:db8:0:3::/64 |\n                    Figure 1: Generic\
    \ Test Environment\n   Alice is the unit being measured, the computer running\
    \ the process\n   that will establish a session with Bob for the application in\n\
    \   question.  DNS is represented in the diagram as a separate system, as\n  \
    \ is the protocol analyzer that will watch Alice's traffic.  This is\n   not absolutely\
    \ necessary; if one computer can run tcpdump and a DNS\n   server process -- and\
    \ for that matter, can subsume the routers --\n   that is acceptable.  The units\
    \ are separated in the test for purposes\n   of clarity.\n   On each test run,\
    \ configuration is performed in Router 1 to permit\n   only one route to work.\
    \  There are various ways this can be\n   accomplished, including but not limited\
    \ to installing:\n   o  a filter that drops datagrams to Bob resulting in an ICMP\n\
    \      \"administratively prohibited\",\n   o  a filter that silently drops datagrams\
    \ to Bob,\n   o  a null route or removing the route to one of Bob's prefixes,\n\
    \      resulting in an ICMP \"destination unreachable\", and\n   o  a middleware\
    \ program that responds with a TCP RST.\n   o  Path MTU issues\n   The Path MTU\
    \ Discovery [RFC1191] [RFC1981] matter requires some\n   explanation.  With IPv6,\
    \ and with IPv4, when \"Do Not Fragment\" is\n   set, a router with a message\
    \ too large for an interface discards it\n   and replies with an ICMPv4 \"Destination\
    \ Unreachable: Datagram Too\n   Big\" or ICMPv6 \"Packet Too Big\".  If this packet\
    \ is lost, the source\n   doesn't know what size to fragment to and has no indication\
    \ that\n   fragmentation is required.  A configuration for this scenario would\n\
    \   set the MTU on 203.0.113.0/24 or 2001:db8:0:3::/64 to the smallest\n   allowed\
    \ by the address family (576 or 1280) and disable generation of\n   the indicated\
    \ ICMP message.  Note that [RFC4821] is intended to\n   address these issues.\n\
    \   The tester should try different methods to determine whether\n   variances\
    \ in this configuration make a difference in the test.  For\n   example, one might\
    \ find that the application under test responds\n   differently to a TCP RST than\
    \ to a silent packet loss.  Each of these\n   scenarios should be tested; if doing\
    \ so is too difficult, the most\n   important is the case of silent packet loss,\
    \ as it is the worst case.\n"
- title: 2.2.  Happy Eyeballs Test Procedure
  contents:
  - "2.2.  Happy Eyeballs Test Procedure\n   Consider a network as described in Section\
    \ 2.1.  Alice and Bob each\n   have a set of one or more IPv4 and two or more\
    \ IPv6 addresses.  Bob's\n   are in DNS, where Alice can find them; Alice's and\
    \ others' may be\n   there as well, but they are not relevant to the test.  Routers\
    \ 1 and\n   2 are configured to route the relevant prefixes.  Different\n   measurement\
    \ trials revise an access list or null route in Router 1\n   that would prevent\
    \ traffic Alice->Bob using each of Bob's addresses.\n   If Bob has a total of\
    \ N addresses, we run the measurement at least N\n   times, permitting exactly\
    \ one of the addresses to enjoy end-to-end\n   communication each time.  If the\
    \ DNS service randomizes the order of\n   the addresses, this may not result in\
    \ a test requiring establishment\n   of a connection to all of the addresses;\
    \ in this case, the test will\n   have to be run repeatedly until in at least\
    \ one instance a TCP SYN or\n   its equivalent is seen for each relevant address.\
    \  The tester either\n   should flush the resolver cache between iterations, to\
    \ force repeated\n   DNS resolution, or should wait for at least the DNS RR TTL\
    \ on each\n   resource record.  In the latter case, the tester should also observe\n\
    \   DNS re-resolving; if not, the application is not correctly using DNS.\n  \
    \ This specification assumes common LAN technology with no competing\n   traffic\
    \ and nominal propagation delays, so that they are not a factor\n   in the measurement.\n\
    \   The objective is to measure the amount of time required to establish\n   a\
    \ session.  This includes the time from Alice's initial DNS request\n   through\
    \ one or more attempts to establish a session to the session\n   being established,\
    \ as seen in the LAN trace.  The simplest way to\n   measure this will be to put\
    \ a traffic analyzer on Alice's point of\n   attachment and capture the messages\
    \ exchanged by Alice.\n    DNS Server                   Alice                \
    \    Bob\n        |                          |                       |\n    1.\
    \  |<--www.example.com A------|                       |\n    2.  |<--www.example.com\
    \ AAAA---|                       |\n    3.  |---198.51.100.1---------->|     \
    \                  |\n    4.  |---2001:db8:0:2::1------->|                   \
    \    |\n    5.  |                          |                       |\n    6. \
    \ |                          |--TCP SYN, IPv6--->X   |<***********\n    7.  |\
    \                          |--TCP SYN, IPv6--->X   |     |\n    8.  |        \
    \                  |--TCP SYN, IPv6--->X   | TCP 3wHS\n    9.  |             \
    \             |                       |   Time\n   10.  |                    \
    \      |--TCP SYN, IPv4------->|(any family)\n   11.  |                      \
    \    |<-TCP SYN+ACK, IPv4----|     |\n   12.  |                          |--TCP\
    \ ACK, IPv4------->|<***********\n                     Figure 2: Message Flow\
    \ Using TCP\n   In a TCP-based application (Figure 2), that would be from the\
    \ DNS\n   request (line 1) through the first completion of a TCP three-way\n \
    \  handshake (line 12), which is abbreviated \"3wHS\" above.\n    DNS Server \
    \                  Alice                    Bob\n         |                  \
    \        |                       |\n     1.  |<--www.example.com A------|    \
    \                   |\n     2.  |<--www.example.com AAAA---|                 \
    \      |\n     3.  |---198.51.100.1---------->|                       |\n    \
    \ 4.  |---2001:db8:0:2::1------->|                       |\n     5.  |       \
    \                   |                       |\n     6.  |                    \
    \      |--UDP Request, IPv6-->X|<---------\n     7.  |                       \
    \   |--UDP Request, IPv6-->X|  first\n     8.  |                          |--UDP\
    \ Request, IPv6-->X|  request/\n     9.  |                          |        \
    \               |  response\n    10.  |                          |--UDP Request,\
    \ IPv4--->|  success\n    11.  |                          |<-UDP Response, IPv4---|<---------\n\
    \                     Figure 3: Message Flow Using UDP\n   In a UDP-based application\
    \ (Figure 3), that would be from the DNS\n   request (line 1) through one or more\
    \ UDP Requests (lines 6-10) until\n   a UDP Response is seen (line 11).\n   When\
    \ using other transports, the methodology will have to be\n   specified in context;\
    \ it should measure the same event.\n"
- title: 2.3.  Metrics for Happy Eyeballs
  contents:
  - "2.3.  Metrics for Happy Eyeballs\n   The measurements taken are the duration\
    \ of the interval from the\n   initial DNS request until the session is seen to\
    \ have been\n   established, as described in Section 2.2.  We are interested in\
    \ the\n   shortest and longest durations (which will most likely be those that\n\
    \   send one SYN and succeed and those that send a SYN to each possible\n   address\
    \ before succeeding in one of the attempts), and the pattern of\n   attempts sent\
    \ to different addresses.  The pattern may be simply to\n   send an attempt every\
    \ <time interval>, or it may be more complex; as\n   a result, this is in part\
    \ descriptive.\n   ALL measurement events on the sending and receiving of messages\
    \ SHALL\n   be observed at Alice's attachment point and timestamps SHOULD be\n\
    \   applied upon reception of the last bit of the IP information field.\n   Use\
    \ of an alternate timing reference SHALL be noted.\n"
- title: '2.3.1.  Metric: Session Setup Interval'
  contents:
  - "2.3.1.  Metric: Session Setup Interval\n   Name:  Session Setup Interval\n  \
    \ Description:  The session setup interval MUST be the time beginning\n      with\
    \ the first DNS query sent (observed at Alice's attachment) and\n      ending\
    \ with successful transport connection establishment (as\n      indicated in line\
    \ 12 of Figure 2 and line 11 of Figure 3).  This\n      interval is defined as\
    \ the session setup interval.\n      This test will be run several times, once\
    \ for each possible\n      combination of destination address (configured on Bob)\
    \ and failure\n      mode (configured on Router 1).\n   Methodology:  In the LAN\
    \ analyzer trace, note the times of the\n      initial DNS request and the confirmation\
    \ that the session is open\n      as described in Section 2.2.  If the session\
    \ is not successfully\n      opened, possibly due to Alice aborting the attempt,\
    \ the Session\n      Setup Interval is considered to be infinite.\n   Units: \
    \ Session setup time is measured in milliseconds.\n   Measurement Point(s):  The\
    \ measurement point is at Alice's LAN\n      interface, both sending and receiving,\
    \ observed using a program\n      such as tcpdump running on Alice or an external\
    \ analyzer.\n   Timing:  The measurement program or external analyzer MUST run\
    \ for a\n      duration sufficient to capture the entire message flow as\n   \
    \   described in Section 2.2.  Measurement precision MUST be\n      sufficient\
    \ to maintain no more than 0.1 ms error over a 60-second\n      interval. 1 part\
    \ per million (ppm) precision would suffice.\n"
- title: '2.3.2.  Metric: Maximum Session Setup Interval'
  contents:
  - "2.3.2.  Metric: Maximum Session Setup Interval\n   Name:  Maximum Session Setup\
    \ Interval\n   Description:  The maximum session setup interval is the longest\n\
    \      period of time observed for the establishment of a session as\n      described\
    \ in Section 2.3.1.\n   Methodology:  See Session Setup Interval.\n   Units: \
    \ Session setup time is measured in milliseconds.\n   Measurement Point(s):  See\
    \ Session Setup Interval.\n   Timing:  The measurement program or external analyzer\
    \ MUST run for a\n      duration sufficient to capture the entire message flow\
    \ as\n      described in Section 2.2.  Measurement precision MUST be\n      sufficient\
    \ to maintain no more than 0.1 ms error over a 60-second\n      interval. 1 ppm\
    \ precision would suffice.\n"
- title: '2.3.3.  Metric: Minimum Session Setup Interval'
  contents:
  - "2.3.3.  Metric: Minimum Session Setup Interval\n   Name:  Minimum Session Setup\
    \ Interval\n   Description:  The minimum session setup interval is the shortest\n\
    \      period of time observed for the establishment of a session.\n   Methodology:\
    \  See Session Setup Interval.\n   Units:  Session setup time is measured in milliseconds.\n\
    \   Measurement Point(s):  See Session Setup Interval.\n   Timing:  The measurement\
    \ program or external analyzer MUST run for a\n      duration sufficient to capture\
    \ the entire message flow as\n      described in Section 2.2.  Measurement precision\
    \ MUST be\n      sufficient to maintain no more than 0.1 ms error over a 60-second\n\
    \      interval. 1 ppm precision would suffice.\n"
- title: '2.3.4.  Descriptive Metric: Attempt Pattern'
  contents:
  - "2.3.4.  Descriptive Metric: Attempt Pattern\n   Name:  Attempt pattern\n   Description:\
    \   The Attempt Pattern is a description of the observed\n      pattern of attempts\
    \ to establish the session.  In simple cases, it\n      may be something like\
    \ \"Initial TCP SYNs to a new address were\n      observed every <so many> milliseconds\"\
    ; in more complex cases, it\n      might be something like \"Initial TCP SYNs\
    \ in IPv6 were observed\n      every <so many> milliseconds, and other TCP SYNs\
    \ using IPv4 were\n      observed every <so many> milliseconds, but the two sequences\
    \ were\n      independent.\"  It may also comment on retransmission patterns if\n\
    \      observed.\n   Methodology:  The traffic trace is analyzed to determine\
    \ the pattern\n      of initiation.\n   Units:  milliseconds.\n   Measurement\
    \ Point(s):  The measurement point is at Alice's LAN\n      interface, observed\
    \ using a program such as tcpdump running on\n      Alice or an external analyzer.\n\
    \   Timing:  The measurement program or external analyzer MUST run for a\n   \
    \   duration sufficient to capture the entire message flow as\n      described\
    \ in Section 2.2.  Measurement precision MUST be\n      sufficient to maintain\
    \ no more than 0.1 ms error over a 60-second\n      interval. 1 ppm precision\
    \ would suffice.\n"
- title: 3.  Security Considerations
  contents:
  - "3.  Security Considerations\n   This note doesn't address security-related issues.\n"
- title: 4.  Acknowledgements
  contents:
  - "4.  Acknowledgements\n   This note was discussed with Dan Wing, Andrew Yourtchenko,\
    \ and\n   Fernando Gont.  In the Benchmark Methodology Working Group, Al\n   Morton,\
    \ David Newman, Sarah Banks, and Tore Anderson made comments.\n"
- title: 5.  References
  contents:
  - '5.  References

    '
- title: 5.1.  Normative References
  contents:
  - "5.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use in\
    \ RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119, March\
    \ 1997.\n   [RFC6555]  Wing, D. and A. Yourtchenko, \"Happy Eyeballs: Success\
    \ with\n              Dual-Stack Hosts\", RFC 6555, April 2012.\n"
- title: 5.2.  Informative References
  contents:
  - "5.2.  Informative References\n   [RFC0791]  Postel, J., \"Internet Protocol\"\
    , STD 5, RFC 791,\n              September 1981.\n   [RFC1191]  Mogul, J. and\
    \ S. Deering, \"Path MTU discovery\", RFC 1191,\n              November 1990.\n\
    \   [RFC1981]  McCann, J., Deering, S., and J. Mogul, \"Path MTU Discovery\n \
    \             for IP version 6\", RFC 1981, August 1996.\n   [RFC2460]  Deering,\
    \ S. and R. Hinden, \"Internet Protocol, Version 6\n              (IPv6) Specification\"\
    , RFC 2460, December 1998.\n   [RFC2827]  Ferguson, P. and D. Senie, \"Network\
    \ Ingress Filtering:\n              Defeating Denial of Service Attacks which\
    \ employ IP Source\n              Address Spoofing\", BCP 38, RFC 2827, May 2000.\n\
    \   [RFC3493]  Gilligan, R., Thomson, S., Bound, J., McCann, J., and W.\n    \
    \          Stevens, \"Basic Socket Interface Extensions for IPv6\",\n        \
    \      RFC 3493, February 2003.\n   [RFC4821]  Mathis, M. and J. Heffner, \"Packetization\
    \ Layer Path MTU\n              Discovery\", RFC 4821, March 2007.\n   [RFC5461]\
    \  Gont, F., \"TCP's Reaction to Soft Errors\", RFC 5461,\n              February\
    \ 2009.\n"
- title: Author's Address
  contents:
  - "Author's Address\n   Fred Baker\n   Cisco Systems\n   Santa Barbara, California\
    \  93117\n   USA\n   EMail: fred@cisco.com\n"
