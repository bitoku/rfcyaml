- contents:
  - '              Common YANG Data Types for the Routing Area

    '
  title: __initial_text__
- contents:
  - "Abstract\n   This document defines a collection of common data types using the\n
    \  YANG data modeling language.  These derived common types are designed\n   to
    be imported by other modules defined in the routing area.\n"
  title: Abstract
- contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This
    document is a product of the Internet Engineering Task Force\n   (IETF).  It represents
    the consensus of the IETF community.  It has\n   received public review and has
    been approved for publication by the\n   Internet Engineering Steering Group (IESG).
    \ Further information on\n   Internet Standards is available in Section 2 of RFC
    7841.\n   Information about the current status of this document, any errata,\n
    \  and how to provide feedback on it may be obtained at\n   https://www.rfc-editor.org/info/rfc8294.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2017 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n
    \  (https://trustee.ietf.org/license-info) in effect on the date of\n   publication
    of this document.  Please review these documents\n   carefully, as they describe
    your rights and restrictions with respect\n   to this document.  Code Components
    extracted from this document must\n   include Simplified BSD License text as described
    in Section 4.e of\n   the Trust Legal Provisions and are provided without warranty
    as\n   described in the Simplified BSD License.\n"
  title: Copyright Notice
- contents:
  - "Table of Contents\n   1. Introduction ....................................................3\n
    \     1.1. Terminology ................................................3\n   2.
    Overview ........................................................3\n   3. IETF
    Routing Types YANG Module ..................................8\n   4. IANA Routing
    Types YANG Module .................................27\n   5. IANA Considerations
    ............................................37\n      5.1. IANA-Maintained iana-routing-types
    Module .................38\n   6. Security Considerations ........................................39\n
    \  7. References .....................................................39\n      7.1.
    Normative References ......................................39\n      7.2. Informative
    References ....................................40\n   Acknowledgements ..................................................42\n
    \  Authors' Addresses ................................................43\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   YANG [RFC6020] [RFC7950] is a data modeling language used
    to model\n   configuration data, state data, Remote Procedure Calls, and\n   notifications
    for network management protocols.  The YANG language\n   supports a small set
    of built-in data types and provides mechanisms\n   to derive other types from
    the built-in types.\n   This document introduces a collection of common data types
    derived\n   from the built-in YANG data types.  The derived types are designed
    to\n   be the common types applicable for modeling in the routing area.\n"
  - contents:
    - "1.1.  Terminology\n   The terminology for describing YANG data models is found
      in\n   [RFC7950].\n"
    title: 1.1.  Terminology
  title: 1.  Introduction
- contents:
  - "2.  Overview\n   This document defines two YANG modules for common routing types:\n
    \  ietf-routing-types and iana-routing-types.  The only module imports\n   (ietf-yang-types
    and ietf-inet-types; see Section 3) are from\n   [RFC6991].  The ietf-routing-types
    module contains common routing\n   types other than those corresponding directly
    to IANA mappings.\n   These include the following:\n   router-id\n      Router
    Identifiers are commonly used to identify nodes in routing\n      and other control-plane
    protocols.  An example usage of router-id\n      can be found in [OSPF-YANG].\n
    \  route-target\n      Route Targets (RTs) are commonly used to control the distribution\n
    \     of Virtual Routing and Forwarding (VRF) information (see\n      [RFC4364])
    in support of BGP/MPLS IP Virtual Private Networks\n      (VPNs) and BGP/MPLS
    Ethernet VPNs [RFC7432].  An example usage can\n      be found in [L2VPN-YANG].\n
    \  ipv6-route-target\n      IPv6 Route Targets are similar to standard Route Targets,
    except\n      that they are IPv6 Address Specific BGP Extended Communities as\n
    \     described in [RFC5701].  An IPv6 Route Target is 20 octets and\n      includes
    an IPv6 address as the global administrator.\n   route-target-type\n      This
    type defines the import and export rules of Route Targets, as\n      described
    in Section 4.3.1 of [RFC4364].\n   route-distinguisher\n      Route Distinguishers
    (RDs) are commonly used to identify separate\n      routes in support of VPNs.
    \ For example, as described in\n      [RFC4364], RDs are commonly used to identify
    independent VPNs and\n      VRFs, and, more generally, to identify multiple routes
    to the same\n      prefix.\n   route-origin\n      A Route Origin is commonly
    used to indicate the Site of Origin for\n      VRF information (see [RFC4364])
    in support of BGP/MPLS IP VPNs and\n      BGP/MPLS Ethernet VPNs [RFC7432].\n
    \  ipv6-route-origin\n      An IPv6 Route Origin would also be used to indicate
    the Site of\n      Origin for VRF information (see [RFC4364]) in support of VPNs.\n
    \     IPv6 Route Origins are IPv6 Address Specific BGP Extended\n      Communities
    as described in [RFC5701].  An IPv6 Route Origin is\n      20 octets and includes
    an IPv6 address as the global\n      administrator.\n   ipv4-multicast-group-address\n
    \     This type defines the representation of an IPv4 multicast group\n      address,
    which is in the range of 224.0.0.0 to 239.255.255.255.\n      An example usage
    can be found in [PIM-YANG].\n   ipv6-multicast-group-address\n      This type
    defines the representation of an IPv6 multicast group\n      address, which is
    in the range of ff00::/8.  An example usage can\n      be found in [PIM-YANG].\n
    \  ip-multicast-group-address\n      This type represents an IP multicast group
    address and is IP\n      version neutral.  The format of the textual representation
    implies\n      the IP version.  An example usage can be found in [PIM-YANG].\n
    \  ipv4-multicast-source-address\n      This represents the IPv4 source address
    type for use in multicast\n      control protocols.  This type also allows the
    indication of\n      wildcard sources, i.e., \"*\".  An example of where this
    type\n      may/will be used is [PIM-YANG].\n   ipv6-multicast-source-address\n
    \     This represents the IPv6 source address type for use in multicast\n      control
    protocols.  This type also allows the indication of\n      wildcard sources, i.e.,
    \"*\".  An example of where this type\n      may/will be used is [PIM-YANG].\n
    \  bandwidth-ieee-float32\n      This represents the bandwidth in IEEE 754 floating-point
    32-bit\n      binary format [IEEE754].  It is commonly used in Traffic\n      Engineering
    control-plane protocols.  An example of where this\n      type may/will be used
    is [OSPF-YANG].\n   link-access-type\n      This type identifies the IGP link
    type.\n   timer-multiplier\n      This type is used in conjunction with a timer-value
    type.  It is\n      generally used to indicate the number of timer-value intervals\n
    \     that may expire before a specific event must occur.  Examples of\n      this
    include the arrival of any Bidirectional Forwarding Detection\n      (BFD) packets
    (see [RFC5880] Section 6.8.4) or hello_interval\n      [RFC3209].\n   timer-value-seconds16\n
    \     This type covers timers that can be set in seconds, not set, or\n      set
    to infinity.  This type supports a range of values that can be\n      represented
    in a uint16 (2 octets).\n   timer-value-seconds32\n      This type covers timers
    that can be set in seconds, not set, or\n      set to infinity.  This type supports
    a range of values that can be\n      represented in a uint32 (4 octets).\n   timer-value-milliseconds\n
    \     This type covers timers that can be set in milliseconds, not set,\n      or
    set to infinity.  This type supports a range of values that can\n      be represented
    in a uint32 (4 octets).\n   percentage\n      This type defines a percentage with
    a range of 0-100%.  An example\n      usage can be found in [BGP-Model].\n   timeticks64\n
    \     This type is based on the timeticks type defined in [RFC6991] but\n      with
    64-bit precision.  It represents the time in hundredths of a\n      second between
    two epochs.  An example usage can be found in\n      [BGP-Model].\n   uint24\n
    \     This type defines a 24-bit unsigned integer.  An example usage can\n      be
    found in [OSPF-YANG].\n   generalized-label\n      This type represents a Generalized
    Label for Generalized\n      Multiprotocol Label Switching (GMPLS) [RFC3471].
    \ The Generalized\n      Label does not identify its type, which is known from
    context.  An\n      example usage can be found in [TE-YANG].\n   mpls-label-special-purpose\n
    \     This type represents the special-purpose MPLS label values\n      [RFC7274].\n
    \  mpls-label-general-use\n      The 20-bit label value in an MPLS label stack
    is specified in\n      [RFC3032].  This label value does not include the encodings
    of\n      Traffic Class and TTL (Time to Live).  The label range specified\n      by
    this type is for general use, with special-purpose MPLS label\n      values excluded.\n
    \  mpls-label\n      The 20-bit label value in an MPLS label stack is specified
    in\n      [RFC3032].  This label value does not include the encodings of\n      Traffic
    Class and TTL.  The label range specified by this type\n      covers the general-use
    values and the special-purpose label\n      values.  An example usage can be found
    in [MPLS-Base-YANG].\n   This document defines the following YANG groupings:\n
    \  mpls-label-stack\n      This grouping defines a reusable collection of schema
    nodes\n      representing an MPLS label stack [RFC3032].\n   vpn-route-targets\n
    \     This grouping defines a reusable collection of schema nodes\n      representing
    Route Target import-export rules used in BGP-enabled\n      VPNs [RFC4364] [RFC4664].
    \ An example usage can be found in\n      [L2VPN-YANG].\n   The iana-routing-types
    module contains common routing types\n   corresponding directly to IANA mappings.
    \ These include the\n   following:\n   address-family\n      This type defines
    values for use in Address Family identifiers.\n      The values are based on the
    IANA \"Address Family Numbers\" registry\n      [IANA-ADDRESS-FAMILY-REGISTRY].
    \ An example usage can be found in\n      [BGP-Model].\n   subsequent-address-family\n
    \     This type defines values for use in Subsequent Address Family\n      Identifiers
    (SAFIs).  The values are based on the IANA \"Subsequent\n      Address Family
    Identifiers (SAFI) Parameters\" registry\n      [IANA-SAFI-REGISTRY].\n"
  title: 2.  Overview
- contents:
  - "3.  IETF Routing Types YANG Module\n   <CODE BEGINS> file \"ietf-routing-types@2017-12-04.yang\"\n
    \  module ietf-routing-types {\n     namespace \"urn:ietf:params:xml:ns:yang:ietf-routing-types\";\n
    \    prefix rt-types;\n     import ietf-yang-types {\n       prefix yang;\n     }\n
    \    import ietf-inet-types {\n       prefix inet;\n     }\n     organization\n
    \      \"IETF RTGWG - Routing Area Working Group\";\n     contact\n       \"WG
    Web:   <https://datatracker.ietf.org/wg/rtgwg/>\n        WG List:  <mailto:rtgwg@ietf.org>\n
    \       Editors:  Xufeng Liu\n                  <mailto:Xufeng_Liu@jabail.com>\n
    \                 Yingzhen Qu\n                  <mailto:yingzhen.qu@huawei.com>\n
    \                 Acee Lindem\n                  <mailto:acee@cisco.com>\n                  Christian
    Hopps\n                  <mailto:chopps@chopps.org>\n                  Lou Berger\n
    \                 <mailto:lberger@labn.com>\";\n     description\n       \"This
    module contains a collection of YANG data types\n        considered generally
    useful for routing protocols.\n        Copyright (c) 2017 IETF Trust and the persons\n
    \       identified as authors of the code.  All rights reserved.\n        Redistribution
    and use in source and binary forms, with or\n        without modification, is
    permitted pursuant to, and subject\n        to the license terms contained in,
    the Simplified BSD License\n        set forth in Section 4.c of the IETF Trust's
    Legal Provisions\n        Relating to IETF Documents\n        (https://trustee.ietf.org/license-info).\n
    \       This version of this YANG module is part of RFC 8294; see\n        the
    RFC itself for full legal notices.\";\n      revision 2017-12-04 {\n        description
    \"Initial revision.\";\n        reference\n          \"RFC 8294: Common YANG Data
    Types for the Routing Area.\n           Section 3.\";\n     }\n     /*** Identities
    related to MPLS/GMPLS ***/\n     identity mpls-label-special-purpose-value {\n
    \      description\n         \"Base identity for deriving identities describing\n
    \         special-purpose Multiprotocol Label Switching (MPLS) label\n          values.\";\n
    \      reference\n         \"RFC 7274: Allocating and Retiring Special-Purpose
    MPLS\n          Labels.\";\n     }\n     identity ipv4-explicit-null-label {\n
    \      base mpls-label-special-purpose-value;\n       description\n         \"This
    identity represents the IPv4 Explicit NULL Label.\";\n       reference\n         \"RFC
    3032: MPLS Label Stack Encoding.  Section 2.1.\";\n     }\n     identity router-alert-label
    {\n       base mpls-label-special-purpose-value;\n       description\n         \"This
    identity represents the Router Alert Label.\";\n       reference\n         \"RFC
    3032: MPLS Label Stack Encoding.  Section 2.1.\";\n     }\n     identity ipv6-explicit-null-label
    {\n       base mpls-label-special-purpose-value;\n       description\n         \"This
    identity represents the IPv6 Explicit NULL Label.\";\n       reference\n         \"RFC
    3032: MPLS Label Stack Encoding.  Section 2.1.\";\n     }\n     identity implicit-null-label
    {\n       base mpls-label-special-purpose-value;\n       description\n         \"This
    identity represents the Implicit NULL Label.\";\n       reference\n         \"RFC
    3032: MPLS Label Stack Encoding.  Section 2.1.\";\n     }\n     identity entropy-label-indicator
    {\n       base mpls-label-special-purpose-value;\n       description\n         \"This
    identity represents the Entropy Label Indicator.\";\n       reference\n         \"RFC
    6790: The Use of Entropy Labels in MPLS Forwarding.\n          Sections 3 and
    10.1.\";\n     }\n     identity gal-label {\n       base mpls-label-special-purpose-value;\n
    \      description\n         \"This identity represents the Generic Associated
    Channel\n          (G-ACh) Label (GAL).\";\n       reference\n         \"RFC 5586:
    MPLS Generic Associated Channel.\n          Sections 4 and 10.\";\n     }\n     identity
    oam-alert-label {\n       base mpls-label-special-purpose-value;\n       description\n
    \        \"This identity represents the OAM Alert Label.\";\n       reference\n
    \        \"RFC 3429: Assignment of the 'OAM Alert Label' for\n          Multiprotocol
    Label Switching Architecture (MPLS)\n          Operation and Maintenance (OAM)
    Functions.\n          Sections 3 and 6.\";\n     }\n     identity extension-label
    {\n       base mpls-label-special-purpose-value;\n       description\n         \"This
    identity represents the Extension Label.\";\n       reference\n         \"RFC
    7274: Allocating and Retiring Special-Purpose MPLS\n          Labels.  Sections
    3.1 and 5.\";\n     }\n     /*** Collection of types related to routing ***/\n
    \    typedef router-id {\n       type yang:dotted-quad;\n       description\n
    \        \"A 32-bit number in the dotted-quad format assigned to each\n          router.
    \ This number uniquely identifies the router within\n          an Autonomous System.\";\n
    \    }\n     /*** Collection of types related to VPNs ***/\n     typedef route-target
    {\n       type string {\n         pattern\n           '(0:(6553[0-5]|655[0-2][0-9]|65[0-4][0-9]{2}|'\n
    \        +     '6[0-4][0-9]{3}|'\n         +     '[1-5][0-9]{4}|[1-9][0-9]{0,3}|0):(429496729[0-5]|'\n
    \        +     '42949672[0-8][0-9]|'\n         +     '4294967[01][0-9]{2}|429496[0-6][0-9]{3}|'\n
    \        +     '42949[0-5][0-9]{4}|'\n         +     '4294[0-8][0-9]{5}|429[0-3][0-9]{6}|'\n
    \        +     '42[0-8][0-9]{7}|4[01][0-9]{8}|'\n         +     '[1-3][0-9]{9}|[1-9][0-9]{0,8}|0))|'\n
    \        + '(1:((([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|'\n         +     '25[0-5])\\.){3}([0-9]|[1-9][0-9]|'\n
    \        +     '1[0-9]{2}|2[0-4][0-9]|25[0-5])):(6553[0-5]|'\n         +     '655[0-2][0-9]|'\n
    \        +     '65[0-4][0-9]{2}|6[0-4][0-9]{3}|'\n         +     '[1-5][0-9]{4}|[1-9][0-9]{0,3}|0))|'\n
    \        + '(2:(429496729[0-5]|42949672[0-8][0-9]|'\n         +     '4294967[01][0-9]{2}|'\n
    \        +     '429496[0-6][0-9]{3}|42949[0-5][0-9]{4}|'\n         +     '4294[0-8][0-9]{5}|'\n
    \        +     '429[0-3][0-9]{6}|42[0-8][0-9]{7}|4[01][0-9]{8}|'\n         +     '[1-3][0-9]{9}|[1-9][0-9]{0,8}|0):'\n
    \        +     '(6553[0-5]|655[0-2][0-9]|65[0-4][0-9]{2}|'\n         +     '6[0-4][0-9]{3}|'\n
    \        +     '[1-5][0-9]{4}|[1-9][0-9]{0,3}|0))|'\n         + '(6(:[a-fA-F0-9]{2}){6})|'\n
    \        + '(([3-57-9a-fA-F]|[1-9a-fA-F][0-9a-fA-F]{1,3}):'\n         +     '[0-9a-fA-F]{1,12})';\n
    \      }\n       description\n         \"A Route Target is an 8-octet BGP extended
    community\n          initially identifying a set of sites in a BGP VPN\n          (RFC
    4364).  However, it has since taken on a more general\n          role in BGP route
    filtering.  A Route Target consists of two\n          or three fields: a 2-octet
    Type field, an administrator\n          field, and, optionally, an assigned number
    field.\n          According to the data formats for types 0, 1, 2, and 6 as\n
    \         defined in RFC 4360, RFC 5668, and RFC 7432, the encoding\n          pattern
    is defined as:\n          0:2-octet-asn:4-octet-number\n          1:4-octet-ipv4addr:2-octet-number\n
    \         2:4-octet-asn:2-octet-number\n          6:6-octet-mac-address\n          Additionally,
    a generic pattern is defined for future\n          Route Target types:\n          2-octet-other-hex-number:6-octet-hex-number\n
    \         Some valid examples are 0:100:100, 1:1.1.1.1:100,\n          2:1234567890:203,
    and 6:26:00:08:92:78:00.\";\n       reference\n         \"RFC 4360: BGP Extended
    Communities Attribute.\n          RFC 4364: BGP/MPLS IP Virtual Private Networks
    (VPNs).\n          RFC 5668: 4-Octet AS Specific BGP Extended Community.\n          RFC
    7432: BGP MPLS-Based Ethernet VPN.\";\n     }\n     typedef ipv6-route-target
    {\n       type string {\n         pattern\n             '((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}'\n
    \            + '((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|'\n             +
    '(((25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9]?[0-9])\\.){3}'\n             + '(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9]?[0-9])))'\n
    \            + ':'\n             + '(6553[0-5]|655[0-2][0-9]|65[0-4][0-9]{2}|'\n
    \            + '6[0-4][0-9]{3}|'\n             + '[1-5][0-9]{4}|[1-9][0-9]{0,3}|0)';\n
    \        pattern '((([^:]+:){6}(([^:]+:[^:]+)|(.*\\..*)))|'\n             + '((([^:]+:)*[^:]+)?::(([^:]+:)*[^:]+)?))'\n
    \            + ':'\n             + '(6553[0-5]|655[0-2][0-9]|65[0-4][0-9]{2}|'\n
    \            + '6[0-4][0-9]{3}|'\n             + '[1-5][0-9]{4}|[1-9][0-9]{0,3}|0)';\n
    \      }\n       description\n         \"An IPv6 Route Target is a 20-octet BGP
    IPv6 Address\n          Specific Extended Community serving the same function\n
    \         as a standard 8-octet Route Target, except that it only\n          allows
    an IPv6 address as the global administrator.\n          The format is <ipv6-address:2-octet-number>.\n
    \         Two valid examples are 2001:db8::1:6544 and\n          2001:db8::5eb1:791:6b37:17958.\";\n
    \      reference\n         \"RFC 5701: IPv6 Address Specific BGP Extended Community\n
    \         Attribute.\";\n     }\n     typedef route-target-type {\n       type
    enumeration {\n         enum import {\n           value 0;\n           description\n
    \            \"The Route Target applies to route import.\";\n         }\n         enum
    export {\n           value 1;\n           description\n             \"The Route
    Target applies to route export.\";\n         }\n         enum both {\n           value
    2;\n           description\n             \"The Route Target applies to both route
    import and\n              route export.\";\n         }\n       }\n       description\n
    \        \"Indicates the role a Route Target takes in route filtering.\";\n       reference\n
    \        \"RFC 4364: BGP/MPLS IP Virtual Private Networks (VPNs).\";\n     }\n
    \    typedef route-distinguisher {\n       type string {\n         pattern\n           '(0:(6553[0-5]|655[0-2][0-9]|65[0-4][0-9]{2}|'\n
    \        +     '6[0-4][0-9]{3}|'\n         +     '[1-5][0-9]{4}|[1-9][0-9]{0,3}|0):(429496729[0-5]|'\n
    \        +     '42949672[0-8][0-9]|'\n         +     '4294967[01][0-9]{2}|429496[0-6][0-9]{3}|'\n
    \        +     '42949[0-5][0-9]{4}|'\n         +     '4294[0-8][0-9]{5}|429[0-3][0-9]{6}|'\n
    \        +     '42[0-8][0-9]{7}|4[01][0-9]{8}|'\n         +     '[1-3][0-9]{9}|[1-9][0-9]{0,8}|0))|'\n
    \        + '(1:((([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|'\n         +     '25[0-5])\\.){3}([0-9]|[1-9][0-9]|'\n
    \        +     '1[0-9]{2}|2[0-4][0-9]|25[0-5])):(6553[0-5]|'\n         +     '655[0-2][0-9]|'\n
    \        +     '65[0-4][0-9]{2}|6[0-4][0-9]{3}|'\n         +     '[1-5][0-9]{4}|[1-9][0-9]{0,3}|0))|'\n
    \        + '(2:(429496729[0-5]|42949672[0-8][0-9]|'\n         +     '4294967[01][0-9]{2}|'\n
    \        +     '429496[0-6][0-9]{3}|42949[0-5][0-9]{4}|'\n         +     '4294[0-8][0-9]{5}|'\n
    \        +     '429[0-3][0-9]{6}|42[0-8][0-9]{7}|4[01][0-9]{8}|'\n         +     '[1-3][0-9]{9}|[1-9][0-9]{0,8}|0):'\n
    \        +     '(6553[0-5]|655[0-2][0-9]|65[0-4][0-9]{2}|'\n         +     '6[0-4][0-9]{3}|'\n
    \        +     '[1-5][0-9]{4}|[1-9][0-9]{0,3}|0))|'\n         + '(6(:[a-fA-F0-9]{2}){6})|'\n
    \        + '(([3-57-9a-fA-F]|[1-9a-fA-F][0-9a-fA-F]{1,3}):'\n         +     '[0-9a-fA-F]{1,12})';\n
    \      }\n       description\n         \"A Route Distinguisher is an 8-octet value
    used to\n          distinguish routes from different BGP VPNs (RFC 4364).\n          A
    Route Distinguisher will have the same format as a\n          Route Target as
    per RFC 4360 and will consist of\n          two or three fields: a 2-octet Type
    field, an administrator\n          field, and, optionally, an assigned number
    field.\n          According to the data formats for types 0, 1, 2, and 6 as\n
    \         defined in RFC 4360, RFC 5668, and RFC 7432, the encoding\n          pattern
    is defined as:\n          0:2-octet-asn:4-octet-number\n          1:4-octet-ipv4addr:2-octet-number\n
    \         2:4-octet-asn:2-octet-number\n          6:6-octet-mac-address\n          Additionally,
    a generic pattern is defined for future\n          route discriminator types:\n
    \         2-octet-other-hex-number:6-octet-hex-number\n          Some valid examples
    are 0:100:100, 1:1.1.1.1:100,\n          2:1234567890:203, and 6:26:00:08:92:78:00.\";\n
    \      reference\n         \"RFC 4360: BGP Extended Communities Attribute.\n          RFC
    4364: BGP/MPLS IP Virtual Private Networks (VPNs).\n          RFC 5668: 4-Octet
    AS Specific BGP Extended Community.\n          RFC 7432: BGP MPLS-Based Ethernet
    VPN.\";\n     }\n     typedef route-origin {\n       type string {\n         pattern\n
    \          '(0:(6553[0-5]|655[0-2][0-9]|65[0-4][0-9]{2}|'\n         +     '6[0-4][0-9]{3}|'\n
    \        +     '[1-5][0-9]{4}|[1-9][0-9]{0,3}|0):(429496729[0-5]|'\n         +
    \    '42949672[0-8][0-9]|'\n         +     '4294967[01][0-9]{2}|429496[0-6][0-9]{3}|'\n
    \        +     '42949[0-5][0-9]{4}|'\n         +     '4294[0-8][0-9]{5}|429[0-3][0-9]{6}|'\n
    \        +     '42[0-8][0-9]{7}|4[01][0-9]{8}|'\n         +     '[1-3][0-9]{9}|[1-9][0-9]{0,8}|0))|'\n
    \        + '(1:((([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|'\n         +     '25[0-5])\\.){3}([0-9]|[1-9][0-9]|'\n
    \        +     '1[0-9]{2}|2[0-4][0-9]|25[0-5])):(6553[0-5]|'\n         +     '655[0-2][0-9]|'\n
    \        +     '65[0-4][0-9]{2}|6[0-4][0-9]{3}|'\n         +     '[1-5][0-9]{4}|[1-9][0-9]{0,3}|0))|'\n
    \        + '(2:(429496729[0-5]|42949672[0-8][0-9]|'\n         +     '4294967[01][0-9]{2}|'\n
    \        +     '429496[0-6][0-9]{3}|42949[0-5][0-9]{4}|'\n         +     '4294[0-8][0-9]{5}|'\n
    \        +     '429[0-3][0-9]{6}|42[0-8][0-9]{7}|4[01][0-9]{8}|'\n         +     '[1-3][0-9]{9}|[1-9][0-9]{0,8}|0):'\n
    \        +     '(6553[0-5]|655[0-2][0-9]|65[0-4][0-9]{2}|'\n         +     '6[0-4][0-9]{3}|'\n
    \        +     '[1-5][0-9]{4}|[1-9][0-9]{0,3}|0))|'\n         + '(6(:[a-fA-F0-9]{2}){6})|'\n
    \        + '(([3-57-9a-fA-F]|[1-9a-fA-F][0-9a-fA-F]{1,3}):'\n         +    '[0-9a-fA-F]{1,12})';\n
    \      }\n       description\n         \"A Route Origin is an 8-octet BGP extended
    community\n          identifying the set of sites where the BGP route\n          originated
    (RFC 4364).  A Route Origin will have the same\n          format as a Route Target
    as per RFC 4360 and will consist\n          of two or three fields: a 2-octet
    Type field, an\n          administrator field, and, optionally, an assigned number\n
    \         field.\n          According to the data formats for types 0, 1, 2, and
    6 as\n          defined in RFC 4360, RFC 5668, and RFC 7432, the encoding\n          pattern
    is defined as:\n          0:2-octet-asn:4-octet-number\n          1:4-octet-ipv4addr:2-octet-number\n
    \         2:4-octet-asn:2-octet-number\n          6:6-octet-mac-address\n          Additionally,
    a generic pattern is defined for future\n          Route Origin types:\n          2-octet-other-hex-number:6-octet-hex-number\n
    \         Some valid examples are 0:100:100, 1:1.1.1.1:100,\n          2:1234567890:203,
    and 6:26:00:08:92:78:00.\";\n       reference\n         \"RFC 4360: BGP Extended
    Communities Attribute.\n          RFC 4364: BGP/MPLS IP Virtual Private Networks
    (VPNs).\n          RFC 5668: 4-Octet AS Specific BGP Extended Community.\n          RFC
    7432: BGP MPLS-Based Ethernet VPN.\";\n     }\n     typedef ipv6-route-origin
    {\n       type string {\n         pattern\n             '((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}'\n
    \            + '((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|'\n             +
    '(((25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9]?[0-9])\\.){3}'\n             + '(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9]?[0-9])))'\n
    \            + ':'\n             + '(6553[0-5]|655[0-2][0-9]|65[0-4][0-9]{2}|'\n
    \            + '6[0-4][0-9]{3}|'\n             + '[1-5][0-9]{4}|[1-9][0-9]{0,3}|0)';\n
    \        pattern '((([^:]+:){6}(([^:]+:[^:]+)|(.*\\..*)))|'\n             + '((([^:]+:)*[^:]+)?::(([^:]+:)*[^:]+)?))'\n
    \            + ':'\n             + '(6553[0-5]|655[0-2][0-9]|65[0-4][0-9]{2}|'\n
    \            + '6[0-4][0-9]{3}|'\n             + '[1-5][0-9]{4}|[1-9][0-9]{0,3}|0)';\n
    \      }\n       description\n         \"An IPv6 Route Origin is a 20-octet BGP
    IPv6 Address\n          Specific Extended Community serving the same function\n
    \         as a standard 8-octet route, except that it only allows\n          an
    IPv6 address as the global administrator.  The format\n          is <ipv6-address:2-octet-number>.\n
    \         Two valid examples are 2001:db8::1:6544 and\n          2001:db8::5eb1:791:6b37:17958.\";\n
    \      reference\n         \"RFC 5701: IPv6 Address Specific BGP Extended Community\n
    \         Attribute.\";\n     }\n     /*** Collection of types common to multicast
    ***/\n     typedef ipv4-multicast-group-address {\n       type inet:ipv4-address
    {\n         pattern '(2((2[4-9])|(3[0-9]))\\.).*';\n       }\n       description\n
    \        \"This type represents an IPv4 multicast group address,\n          which
    is in the range of 224.0.0.0 to 239.255.255.255.\";\n       reference\n         \"RFC
    1112: Host Extensions for IP Multicasting.\";\n     }\n     typedef ipv6-multicast-group-address
    {\n       type inet:ipv6-address {\n         pattern '(([fF]{2}[0-9a-fA-F]{2}):).*';\n
    \      }\n       description\n         \"This type represents an IPv6 multicast
    group address,\n          which is in the range of ff00::/8.\";\n       reference\n
    \        \"RFC 4291: IP Version 6 Addressing Architecture.  Section 2.7.\n          RFC
    7346: IPv6 Multicast Address Scopes.\";\n     }\n     typedef ip-multicast-group-address
    {\n       type union {\n         type ipv4-multicast-group-address;\n         type
    ipv6-multicast-group-address;\n       }\n       description\n         \"This type
    represents a version-neutral IP multicast group\n          address.  The format
    of the textual representation implies\n          the IP version.\";\n     }\n
    \    typedef ipv4-multicast-source-address {\n       type union {\n         type
    enumeration {\n           enum * {\n             description\n               \"Any
    source address.\";\n           }\n         }\n         type inet:ipv4-address;\n
    \      }\n       description\n         \"Multicast source IPv4 address type.\";\n
    \    }\n     typedef ipv6-multicast-source-address {\n       type union {\n         type
    enumeration {\n           enum * {\n             description\n               \"Any
    source address.\";\n           }\n         }\n         type inet:ipv6-address;\n
    \      }\n       description\n         \"Multicast source IPv6 address type.\";\n
    \    }\n     /*** Collection of types common to protocols ***/\n     typedef bandwidth-ieee-float32
    {\n       type string {\n         pattern\n           '0[xX](0((\\.0?)?[pP](\\+)?0?|(\\.0?))|'\n
    \        + '1(\\.([0-9a-fA-F]{0,5}[02468aAcCeE]?)?)?[pP](\\+)?(12[0-7]|'\n         +
    '1[01][0-9]|0?[0-9]?[0-9])?)';\n       }\n       description\n         \"Bandwidth
    in IEEE 754 floating-point 32-bit binary format:\n          (-1)**(S) * 2**(Exponent-127)
    * (1 + Fraction),\n          where Exponent uses 8 bits and Fraction uses 23 bits.\n
    \         The units are octets per second.\n          The encoding format is the
    external hexadecimal-significant\n          character sequences specified in IEEE
    754 and ISO/IEC C99.\n          The format is restricted to be normalized, non-negative,
    and\n          non-fraction: 0x1.hhhhhhp{+}d, 0X1.HHHHHHP{+}D, or 0x0p0,\n          where
    'h' and 'H' are hexadecimal digits and 'd' and 'D' are\n          integers in
    the range of [0..127].\n          When six hexadecimal digits are used for 'hhhhhh'
    or\n          'HHHHHH', the least significant digit must be an even\n          number.
    \ 'x' and 'X' indicate hexadecimal; 'p' and 'P'\n          indicate a power of
    two.  Some examples are 0x0p0, 0x1p10,\n          and 0x1.abcde2p+20.\";\n       reference\n
    \        \"IEEE Std 754-2008: IEEE Standard for Floating-Point\n          Arithmetic.\n
    \         ISO/IEC C99: Information technology - Programming\n          Languages
    - C.\";\n     }\n     typedef link-access-type {\n       type enumeration {\n
    \        enum broadcast {\n           description\n             \"Specify broadcast
    multi-access network.\";\n         }\n         enum non-broadcast-multiaccess
    {\n           description\n             \"Specify Non-Broadcast Multi-Access (NBMA)
    network.\";\n         }\n         enum point-to-multipoint {\n           description\n
    \            \"Specify point-to-multipoint network.\";\n         }\n         enum
    point-to-point {\n           description\n             \"Specify point-to-point
    network.\";\n         }\n       }\n       description\n         \"Link access
    type.\";\n     }\n     typedef timer-multiplier {\n       type uint8;\n       description\n
    \        \"The number of timer value intervals that should be\n          interpreted
    as a failure.\";\n     }\n     typedef timer-value-seconds16 {\n       type union
    {\n         type uint16 {\n           range \"1..65535\";\n         }\n         type
    enumeration {\n           enum infinity {\n             description\n               \"The
    timer is set to infinity.\";\n           }\n           enum not-set {\n             description\n
    \              \"The timer is not set.\";\n           }\n         }\n       }\n
    \      units \"seconds\";\n       description\n         \"Timer value type, in
    seconds (16-bit range).\";\n     }\n     typedef timer-value-seconds32 {\n       type
    union {\n         type uint32 {\n           range \"1..4294967295\";\n         }\n
    \        type enumeration {\n           enum infinity {\n             description\n
    \              \"The timer is set to infinity.\";\n           }\n           enum
    not-set {\n             description\n               \"The timer is not set.\";\n
    \          }\n         }\n       }\n       units \"seconds\";\n       description\n
    \        \"Timer value type, in seconds (32-bit range).\";\n     }\n     typedef
    timer-value-milliseconds {\n       type union {\n         type uint32 {\n           range
    \"1..4294967295\";\n         }\n         type enumeration {\n           enum infinity
    {\n             description\n               \"The timer is set to infinity.\";\n
    \          }\n           enum not-set {\n             description\n               \"The
    timer is not set.\";\n           }\n         }\n       }\n       units \"milliseconds\";\n
    \      description\n         \"Timer value type, in milliseconds.\";\n     }\n
    \    typedef percentage {\n       type uint8 {\n         range \"0..100\";\n       }\n
    \      description\n         \"Integer indicating a percentage value.\";\n     }\n
    \    typedef timeticks64 {\n       type uint64;\n       description\n         \"This
    type is based on the timeticks type defined in\n          RFC 6991, but with 64-bit
    width.  It represents the time,\n          modulo 2^64, in hundredths of a second
    between two epochs.\";\n       reference\n         \"RFC 6991: Common YANG Data
    Types.\";\n     }\n     typedef uint24 {\n       type uint32 {\n         range
    \"0..16777215\";\n       }\n       description\n         \"24-bit unsigned integer.\";\n
    \    }\n     /*** Collection of types related to MPLS/GMPLS ***/\n     typedef
    generalized-label {\n       type binary;\n       description\n         \"Generalized
    Label.  Nodes sending and receiving the\n          Generalized Label are aware
    of the link-specific\n          label context and type.\";\n       reference\n
    \        \"RFC 3471: Generalized Multi-Protocol Label Switching (GMPLS)\n          Signaling
    Functional Description.  Section 3.2.\";\n     }\n     typedef mpls-label-special-purpose
    {\n       type identityref {\n         base mpls-label-special-purpose-value;\n
    \      }\n       description\n         \"This type represents the special-purpose
    MPLS label values.\";\n       reference\n         \"RFC 3032: MPLS Label Stack
    Encoding.\n          RFC 7274: Allocating and Retiring Special-Purpose MPLS\n
    \         Labels.\";\n     }\n     typedef mpls-label-general-use {\n       type
    uint32 {\n         range \"16..1048575\";\n       }\n       description\n         \"The
    20-bit label value in an MPLS label stack as specified\n          in RFC 3032.
    \ This label value does not include the\n          encodings of Traffic Class
    and TTL (Time to Live).\n          The label range specified by this type is for
    general use,\n          with special-purpose MPLS label values excluded.\";\n
    \      reference\n         \"RFC 3032: MPLS Label Stack Encoding.\";\n     }\n
    \    typedef mpls-label {\n       type union {\n         type mpls-label-special-purpose;\n
    \        type mpls-label-general-use;\n       }\n       description\n         \"The
    20-bit label value in an MPLS label stack as specified\n          in RFC 3032.
    \ This label value does not include the\n          encodings of Traffic Class
    and TTL.\";\n       reference\n         \"RFC 3032: MPLS Label Stack Encoding.\";\n
    \    }\n     /*** Groupings **/\n     grouping mpls-label-stack {\n       description\n
    \        \"This grouping specifies an MPLS label stack.  The label\n          stack
    is encoded as a list of label stack entries.  The\n          list key is an identifier
    that indicates the relative\n          ordering of each entry, with the lowest-value
    identifier\n          corresponding to the top of the label stack.\";\n       container
    mpls-label-stack {\n         description\n           \"Container for a list of
    MPLS label stack entries.\";\n         list entry {\n           key \"id\";\n
    \          description\n             \"List of MPLS label stack entries.\";\n
    \          leaf id {\n             type uint8;\n             description\n               \"Identifies
    the entry in a sequence of MPLS label\n                stack entries.  An entry
    with a smaller identifier\n                value precedes an entry with a larger
    identifier\n                value in the label stack.  The value of this ID has\n
    \               no semantic meaning other than relative ordering\n                and
    referencing the entry.\";\n           }\n           leaf label {\n             type
    rt-types:mpls-label;\n             description\n               \"Label value.\";\n
    \          }\n           leaf ttl {\n             type uint8;\n             description\n
    \              \"Time to Live (TTL).\";\n             reference\n               \"RFC
    3032: MPLS Label Stack Encoding.\";\n           }\n           leaf traffic-class
    {\n             type uint8 {\n               range \"0..7\";\n             }\n
    \            description\n               \"Traffic Class (TC).\";\n             reference\n
    \              \"RFC 5462: Multiprotocol Label Switching (MPLS) Label\n                Stack
    Entry: 'EXP' Field Renamed to 'Traffic Class'\n                Field.\";\n           }\n
    \        }\n       }\n     }\n     grouping vpn-route-targets {\n       description\n
    \        \"A grouping that specifies Route Target import-export rules\n          used
    in BGP-enabled VPNs.\";\n       reference\n         \"RFC 4364: BGP/MPLS IP Virtual
    Private Networks (VPNs).\n          RFC 4664: Framework for Layer 2 Virtual Private
    Networks\n          (L2VPNs).\";\n       list vpn-target {\n         key \"route-target\";\n
    \        description\n           \"List of Route Targets.\";\n         leaf route-target
    {\n           type rt-types:route-target;\n           description\n             \"Route
    Target value.\";\n         }\n         leaf route-target-type {\n           type
    rt-types:route-target-type;\n           mandatory true;\n           description\n
    \            \"Import/export type of the Route Target.\";\n         }\n       }\n
    \    }\n   }\n   <CODE ENDS>\n"
  title: 3.  IETF Routing Types YANG Module
- contents:
  - "4.  IANA Routing Types YANG Module\n   <CODE BEGINS> file \"iana-routing-types@2017-12-04.yang\"\n
    \  module iana-routing-types {\n     namespace \"urn:ietf:params:xml:ns:yang:iana-routing-types\";\n
    \    prefix iana-rt-types;\n     organization\n       \"IANA\";\n     contact\n
    \      \"Internet Assigned Numbers Authority\n        Postal: ICANN\n                12025
    Waterfront Drive, Suite 300\n                Los Angeles, CA  90094-2536\n                United
    States of America\n        Tel:    +1 310 301 5800\n        <mailto:iana@iana.org>\";\n
    \    description\n       \"This module contains a collection of YANG data types\n
    \       considered defined by IANA and used for routing\n        protocols.\n
    \       Copyright (c) 2017 IETF Trust and the persons\n        identified as authors
    of the code.  All rights reserved.\n        Redistribution and use in source and
    binary forms, with or\n        without modification, is permitted pursuant to,
    and subject\n        to the license terms contained in, the Simplified BSD License\n
    \       set forth in Section 4.c of the IETF Trust's Legal Provisions\n        Relating
    to IETF Documents\n        (https://trustee.ietf.org/license-info).\n        This
    version of this YANG module is part of RFC 8294; see\n        the RFC itself for
    full legal notices.\";\n      revision 2017-12-04 {\n        description \"Initial
    revision.\";\n        reference\n          \"RFC 8294: Common YANG Data Types
    for the Routing Area.\n           Section 4.\";\n     }\n     /*** Collection
    of IANA types related to routing ***/\n     /*** IANA Address Family enumeration
    ***/\n     typedef address-family {\n       type enumeration {\n         enum
    ipv4 {\n           value 1;\n           description\n             \"IPv4 Address
    Family.\";\n         }\n         enum ipv6 {\n           value 2;\n           description\n
    \            \"IPv6 Address Family.\";\n         }\n         enum nsap {\n           value
    3;\n           description\n             \"OSI Network Service Access Point (NSAP)
    Address Family.\";\n         }\n         enum hdlc {\n           value 4;\n           description\n
    \            \"High-Level Data Link Control (HDLC) Address Family.\";\n         }\n
    \        enum bbn1822 {\n           value 5;\n           description\n             \"Bolt,
    Beranek, and Newman Report 1822 (BBN 1822)\n              Address Family.\";\n
    \        }\n         enum ieee802 {\n           value 6;\n           description\n
    \            \"IEEE 802 Committee Address Family\n              (aka Media Access
    Control (MAC) address).\";\n         }\n         enum e163 {\n           value
    7;\n           description\n             \"ITU-T E.163 Address Family.\";\n         }\n
    \        enum e164 {\n           value 8;\n           description\n             \"ITU-T
    E.164 (Switched Multimegabit Data Service (SMDS),\n              Frame Relay,
    ATM) Address Family.\";\n         }\n         enum f69 {\n           value 9;\n
    \          description\n             \"ITU-T F.69 (Telex) Address Family.\";\n
    \        }\n         enum x121 {\n           value 10;\n           description\n
    \            \"ITU-T X.121 (X.25, Frame Relay) Address Family.\";\n         }\n
    \        enum ipx {\n           value 11;\n           description\n             \"Novell
    Internetwork Packet Exchange (IPX)\n              Address Family.\";\n         }\n
    \        enum appletalk {\n           value 12;\n           description\n             \"Apple
    AppleTalk Address Family.\";\n         }\n         enum decnet-iv {\n           value
    13;\n           description\n             \"Digital Equipment DECnet Phase IV
    Address Family.\";\n         }\n         enum vines {\n           value 14;\n
    \          description\n             \"Banyan Vines Address Family.\";\n         }\n
    \        enum e164-nsap {\n           value 15;\n           description\n             \"ITU-T
    E.164 with NSAP sub-address Address Family.\";\n         }\n         enum dns
    {\n           value 16;\n           description\n             \"Domain Name System
    (DNS) Address Family.\";\n         }\n         enum distinguished-name {\n           value
    17;\n           description\n             \"Distinguished Name Address Family.\";\n
    \        }\n         enum as-num {\n           value 18;\n           description\n
    \            \"Autonomous System (AS) Number Address Family.\";\n         }\n
    \        enum xtp-v4 {\n           value 19;\n           description\n             \"Xpress
    Transport Protocol (XTP) over IPv4\n              Address Family.\";\n         }\n
    \        enum xtp-v6 {\n           value 20;\n           description\n             \"XTP
    over IPv6 Address Family.\";\n         }\n         enum xtp-native {\n           value
    21;\n           description\n             \"XTP native mode Address Family.\";\n
    \        }\n         enum fc-port {\n           value 22;\n           description\n
    \            \"Fibre Channel (FC) World-Wide Port Name Address Family.\";\n         }\n
    \        enum fc-node {\n           value 23;\n           description\n             \"FC
    World-Wide Node Name Address Family.\";\n         }\n         enum gwid {\n           value
    24;\n           description\n             \"ATM Gateway Identifier (GWID) Number
    Address Family.\";\n         }\n         enum l2vpn {\n           value 25;\n
    \          description\n             \"Layer 2 VPN (L2VPN) Address Family.\";\n
    \        }\n         enum mpls-tp-section-eid {\n           value 26;\n           description\n
    \            \"MPLS Transport Profile (MPLS-TP) Section Endpoint\n              Identifier
    Address Family.\";\n         }\n         enum mpls-tp-lsp-eid {\n           value
    27;\n           description\n             \"MPLS-TP Label Switched Path (LSP)
    Endpoint Identifier\n              Address Family.\";\n         }\n         enum
    mpls-tp-pwe-eid {\n           value 28;\n           description\n             \"MPLS-TP
    Pseudowire Endpoint Identifier Address Family.\";\n         }\n         enum mt-v4
    {\n           value 29;\n           description\n             \"Multi-Topology
    IPv4 Address Family.\";\n         }\n         enum mt-v6 {\n           value 30;\n
    \          description\n             \"Multi-Topology IPv6 Address Family.\";\n
    \        }\n         enum eigrp-common-sf {\n           value 16384;\n           description\n
    \            \"Enhanced Interior Gateway Routing Protocol (EIGRP)\n              Common
    Service Family Address Family.\";\n         }\n         enum eigrp-v4-sf {\n           value
    16385;\n           description\n             \"EIGRP IPv4 Service Family Address
    Family.\";\n         }\n         enum eigrp-v6-sf {\n           value 16386;\n
    \          description\n             \"EIGRP IPv6 Service Family Address Family.\";\n
    \        }\n         enum lcaf {\n           value 16387;\n           description\n
    \            \"Locator/ID Separation Protocol (LISP)\n              Canonical
    Address Format (LCAF) Address Family.\";\n         }\n         enum bgp-ls {\n
    \          value 16388;\n           description\n             \"Border Gateway
    Protocol - Link State (BGP-LS)\n              Address Family.\";\n         }\n
    \        enum mac-48 {\n           value 16389;\n           description\n             \"IEEE
    48-bit MAC Address Family.\";\n         }\n         enum mac-64 {\n           value
    16390;\n           description\n             \"IEEE 64-bit MAC Address Family.\";\n
    \        }\n         enum trill-oui {\n           value 16391;\n           description\n
    \            \"Transparent Interconnection of Lots of Links (TRILL)\n              IEEE
    Organizationally Unique Identifier (OUI)\n              Address Family.\";\n         }\n
    \        enum trill-mac-24 {\n           value 16392;\n           description\n
    \            \"TRILL final 3 octets of 48-bit MAC Address Family.\";\n         }\n
    \        enum trill-mac-40 {\n           value 16393;\n           description\n
    \            \"TRILL final 5 octets of 64-bit MAC Address Family.\";\n         }\n
    \        enum ipv6-64 {\n           value 16394;\n           description\n             \"First
    8 octets (64 bits) of IPv6 address\n              Address Family.\";\n         }\n
    \        enum trill-rbridge-port-id {\n           value 16395;\n           description\n
    \            \"TRILL Routing Bridge (RBridge) Port ID Address Family.\";\n         }\n
    \        enum trill-nickname {\n           value 16396;\n           description\n
    \            \"TRILL Nickname Address Family.\";\n         }\n       }\n       description\n
    \        \"Enumeration containing all the IANA-defined\n          Address Families.\";\n
    \    }\n     /*** Subsequent Address Family Identifiers (SAFIs) ***/\n     /***
    for multiprotocol BGP enumeration ***/\n     typedef bgp-safi {\n       type enumeration
    {\n         enum unicast-safi {\n           value 1;\n           description\n
    \            \"Unicast SAFI.\";\n         }\n         enum multicast-safi {\n
    \          value 2;\n           description\n             \"Multicast SAFI.\";\n
    \        }\n         enum labeled-unicast-safi {\n           value 4;\n           description\n
    \            \"Labeled Unicast SAFI.\";\n         }\n         enum multicast-vpn-safi
    {\n           value 5;\n           description\n             \"Multicast VPN SAFI.\";\n
    \        }\n         enum pseudowire-safi {\n           value 6;\n           description\n
    \            \"Multi-segment Pseudowire VPN SAFI.\";\n         }\n         enum
    tunnel-encap-safi {\n           value 7;\n           description\n             \"Tunnel
    Encap SAFI.\";\n         }\n         enum mcast-vpls-safi {\n           value
    8;\n           description\n             \"Multicast Virtual Private LAN Service
    (VPLS) SAFI.\";\n         }\n         enum tunnel-safi {\n           value 64;\n
    \          description\n             \"Tunnel SAFI.\";\n         }\n         enum
    vpls-safi {\n           value 65;\n           description\n             \"VPLS
    SAFI.\";\n         }\n         enum mdt-safi {\n           value 66;\n           description\n
    \            \"Multicast Distribution Tree (MDT) SAFI.\";\n         }\n         enum
    v4-over-v6-safi {\n           value 67;\n           description\n             \"IPv4
    over IPv6 SAFI.\";\n         }\n         enum v6-over-v4-safi {\n           value
    68;\n           description\n             \"IPv6 over IPv4 SAFI.\";\n         }\n
    \        enum l1-vpn-auto-discovery-safi {\n           value 69;\n           description\n
    \            \"Layer 1 VPN Auto-Discovery SAFI.\";\n         }\n         enum
    evpn-safi {\n           value 70;\n           description\n             \"Ethernet
    VPN (EVPN) SAFI.\";\n         }\n         enum bgp-ls-safi {\n           value
    71;\n           description\n             \"BGP-LS SAFI.\";\n         }\n         enum
    bgp-ls-vpn-safi {\n           value 72;\n           description\n             \"BGP-LS
    VPN SAFI.\";\n         }\n         enum sr-te-safi {\n           value 73;\n           description\n
    \            \"Segment Routing - Traffic Engineering (SR-TE) SAFI.\";\n         }\n
    \        enum labeled-vpn-safi {\n           value 128;\n           description\n
    \            \"MPLS Labeled VPN SAFI.\";\n         }\n         enum multicast-mpls-vpn-safi
    {\n           value 129;\n           description\n             \"Multicast for
    BGP/MPLS IP VPN SAFI.\";\n         }\n         enum route-target-safi {\n           value
    132;\n           description\n             \"Route Target SAFI.\";\n         }\n
    \        enum ipv4-flow-spec-safi {\n           value 133;\n           description\n
    \            \"IPv4 Flow Specification SAFI.\";\n         }\n         enum vpnv4-flow-spec-safi
    {\n           value 134;\n           description\n             \"IPv4 VPN Flow
    Specification SAFI.\";\n         }\n         enum vpn-auto-discovery-safi {\n
    \          value 140;\n           description\n             \"VPN Auto-Discovery
    SAFI.\";\n         }\n       }\n       description\n         \"Enumeration for
    BGP SAFI.\";\n       reference\n         \"RFC 4760: Multiprotocol Extensions
    for BGP-4.\";\n     }\n   }\n   <CODE ENDS>\n"
  title: 4.  IANA Routing Types YANG Module
- contents:
  - "5.  IANA Considerations\n   This document registers the following namespace URIs
    in the \"IETF XML\n   Registry\" [RFC3688]:\n   URI: urn:ietf:params:xml:ns:yang:ietf-routing-types\n
    \  Registrant Contact: The IESG.\n   XML: N/A; the requested URI is an XML namespace.\n
    \  URI: urn:ietf:params:xml:ns:yang:iana-routing-types\n   Registrant Contact:
    IANA.\n   XML: N/A; the requested URI is an XML namespace.\n   This document registers
    the following YANG modules in the \"YANG\n   Module Names\" registry [RFC6020]:\n
    \  Name:         ietf-routing-types\n   Namespace:    urn:ietf:params:xml:ns:yang:ietf-routing-types\n
    \  Prefix:       rt-types\n   Reference:    RFC 8294\n   Name:         iana-routing-types\n
    \  Namespace:    urn:ietf:params:xml:ns:yang:iana-routing-types\n   Prefix:       iana-rt-types\n
    \  Reference:    RFC 8294\n"
  - contents:
    - "5.1.  IANA-Maintained iana-routing-types Module\n   This document defines the
      initial version of the IANA-maintained\n   iana-routing-types YANG module (Section
      4).\n   The iana-routing-types YANG module is intended to reflect the\n   \"Address
      Family Numbers\" registry [IANA-ADDRESS-FAMILY-REGISTRY] and\n   the \"Subsequent
      Address Family Identifiers (SAFI) Parameters\"\n   registry [IANA-SAFI-REGISTRY].\n
      \  IANA has added this note to the \"iana-routing-types YANG Module\"\n   registry:\n
      \     Address Families and Subsequent Address Families must not be\n      directly
      added to the iana-routing-types YANG module.  They must\n      instead be respectively
      added to the \"Address Family Numbers\" and\n      \"Subsequent Address Family
      Identifiers (SAFI) Parameters\"\n      registries.\n   When an Address Family
      or Subsequent Address Family is respectively\n   added to the \"Address Family
      Numbers\" registry or the \"Subsequent\n   Address Family Identifiers (SAFI)
      Parameters\" registry, a new \"enum\"\n   statement must be added to the iana-routing-types
      YANG module.  The\n   name of the \"enum\" is the same as the corresponding
      Address Family or\n   SAFI, except that it will be a valid YANG identifier in
      all lowercase\n   and with hyphens separating individual words in compound identifiers.\n
      \  The following \"enum\" statement, and substatements thereof, should be\n
      \  defined:\n      \"enum\": Contains the YANG enum identifier for the \"address-family\"\n
      \             (for Address Families) or \"bgp-safi\" (for Subsequent\n              Address
      Families).  This may be the same as the\n              \"address-family\" or
      \"bgp-safi\", or it may be a shorter\n              version to facilitate YANG
      identifier usage.\n      \"value\": Contains the IANA-assigned value corresponding
      to the\n               \"address-family\" (for Address Families) or \"bgp-safi\"\n
      \              (for Subsequent Address Families).\n      \"status\": Include
      only if a registration has been deprecated (use\n                the value \"deprecated\")
      or obsoleted (use the value\n                \"obsolete\").\n      \"description\":
      Replicate the description from the registry,\n                     if any.  Insert
      line breaks as needed so that the\n                     line does not exceed
      72 characters.\n      \"reference\": Replicate the reference from the registry,
      if any,\n                   and add the title of the document.\n   Unassigned
      or reserved values are not present in these modules.\n   When the iana-routing-types
      YANG module is updated, a new \"revision\"\n   statement must be added in front
      of the existing revision statements.\n   IANA has added this new note to the
      \"Address Family Numbers\" and\n   \"Subsequent Address Family Identifiers (SAFI)
      Parameters\" registries:\n      When this registry is modified, the YANG module
      iana-routing-types\n      must be updated as defined in RFC 8294.\n"
    title: 5.1.  IANA-Maintained iana-routing-types Module
  title: 5.  IANA Considerations
- contents:
  - "6.  Security Considerations\n   This document defines common routing type definitions
    (i.e., typedef\n   statements) using the YANG data modeling language.  The definitions\n
    \  themselves have no security or privacy impact on the Internet, but\n   the
    usage of these definitions in concrete YANG modules might have.\n   The security
    considerations spelled out in the YANG 1.1 specification\n   [RFC7950] apply for
    this document as well.\n"
  title: 6.  Security Considerations
- contents:
  - '7.  References

    '
  - contents:
    - "7.1.  Normative References\n   [RFC3688]  Mealling, M., \"The IETF XML Registry\",
      BCP 81, RFC 3688,\n              DOI 10.17487/RFC3688, January 2004,\n              <https://www.rfc-editor.org/info/rfc3688>.\n
      \  [RFC6020]  Bjorklund, M., Ed., \"YANG - A Data Modeling Language for\n              the
      Network Configuration Protocol (NETCONF)\", RFC 6020,\n              DOI 10.17487/RFC6020,
      October 2010,\n              <https://www.rfc-editor.org/info/rfc6020>.\n   [RFC6991]
      \ Schoenwaelder, J., Ed., \"Common YANG Data Types\",\n              RFC 6991,
      DOI 10.17487/RFC6991, July 2013,\n              <https://www.rfc-editor.org/info/rfc6991>.\n
      \  [RFC7950]  Bjorklund, M., Ed., \"The YANG 1.1 Data Modeling Language\",\n
      \             RFC 7950, DOI 10.17487/RFC7950, August 2016,\n              <https://www.rfc-editor.org/info/rfc7950>.\n
      \  [IANA-ADDRESS-FAMILY-REGISTRY]\n              \"IANA Address Family Numbers
      Registry\",\n              <https://www.iana.org/assignments/\n              address-family-numbers/>.\n
      \  [IANA-SAFI-REGISTRY]\n              \"IANA Subsequent Address Family Identifiers
      (SAFI)\n              Parameters Registry\",\n              <https://www.iana.org/assignments/safi-namespace/>.\n"
    title: 7.1.  Normative References
  - contents:
    - "7.2.  Informative References\n   [IEEE754]  IEEE, \"IEEE Standard for Floating-Point
      Arithmetic\",\n              IEEE 754-2008, DOI 10.1109/IEEESTD.2008.4610935.\n
      \  [BGP-Model]\n              Shaikh, A., Ed., Shakir, R., Ed., Patel, K., Ed.,
      Hares,\n              S., Ed., D'Souza, K., Bansal, D., Clemm, A., Zhdankin,
      A.,\n              Jethanandani, M., and X. Liu, \"BGP Model for Service\n              Provider
      Networks\", Work in Progress,\n              draft-ietf-idr-bgp-model-02, July
      2016.\n   [OSPF-YANG]\n              Yeung, D., Qu, Y., Zhang, J., Chen, I.,
      and A. Lindem,\n              \"Yang Data Model for OSPF Protocol\", Work in
      Progress,\n              draft-ietf-ospf-yang-09, October 2017.\n   [PIM-YANG]
      Liu, X., McAllister, P., Peter, A., Sivakumar, M., Liu,\n              Y., and
      F. Hu, \"A YANG data model for Protocol-Independent\n              Multicast
      (PIM)\", Work in Progress,\n              draft-ietf-pim-yang-12, December 2017.\n
      \  [TE-YANG]  Saad, T., Ed., Gandhi, R., Liu, X., Beeram, V., Shah, H.,\n              and
      I. Bryskin, \"A YANG Data Model for Traffic Engineering\n              Tunnels
      and Interfaces\", Work in Progress,\n              draft-ietf-teas-yang-te-09,
      October 2017.\n   [L2VPN-YANG]\n              Shah, H., Ed., Brissette, P.,
      Ed., Chen, I., Ed., Hussain,\n              I., Ed., Wen, B., Ed., and K. Tiruveedhula,
      Ed., \"YANG\n              Data Model for MPLS-based L2VPN\", Work in Progress,\n
      \             draft-ietf-bess-l2vpn-yang-07, September 2017.\n   [MPLS-Base-YANG]\n
      \             Saad, T., Raza, K., Gandhi, R., Liu, X., Beeram, V., Shah,\n              H.,
      Bryskin, I., Chen, X., Jones, R., and B. Wen, \"A YANG\n              Data Model
      for MPLS Base\", Work in Progress,\n              draft-ietf-mpls-base-yang-05,
      July 2017.\n   [RFC3032]  Rosen, E., Tappan, D., Fedorkow, G., Rekhter, Y.,\n
      \             Farinacci, D., Li, T., and A. Conta, \"MPLS Label Stack\n              Encoding\",
      RFC 3032, DOI 10.17487/RFC3032, January 2001,\n              <https://www.rfc-editor.org/info/rfc3032>.\n
      \  [RFC3209]  Awduche, D., Berger, L., Gan, D., Li, T., Srinivasan, V.,\n              and
      G. Swallow, \"RSVP-TE: Extensions to RSVP for LSP\n              Tunnels\",
      RFC 3209, DOI 10.17487/RFC3209, December 2001,\n              <https://www.rfc-editor.org/info/rfc3209>.\n
      \  [RFC3471]  Berger, L., Ed., \"Generalized Multi-Protocol Label\n              Switching
      (GMPLS) Signaling Functional Description\",\n              RFC 3471, DOI 10.17487/RFC3471,
      January 2003,\n              <https://www.rfc-editor.org/info/rfc3471>.\n   [RFC4364]
      \ Rosen, E. and Y. Rekhter, \"BGP/MPLS IP Virtual Private\n              Networks
      (VPNs)\", RFC 4364, DOI 10.17487/RFC4364,\n              February 2006, <https://www.rfc-editor.org/info/rfc4364>.\n
      \  [RFC4664]  Andersson, L., Ed., and E. Rosen, Ed., \"Framework for\n              Layer
      2 Virtual Private Networks (L2VPNs)\", RFC 4664,\n              DOI 10.17487/RFC4664,
      September 2006,\n              <https://www.rfc-editor.org/info/rfc4664>.\n
      \  [RFC5701]  Rekhter, Y., \"IPv6 Address Specific BGP Extended Community\n
      \             Attribute\", RFC 5701, DOI 10.17487/RFC5701, November 2009,\n
      \             <https://www.rfc-editor.org/info/rfc5701>.\n   [RFC5880]  Katz,
      D. and D. Ward, \"Bidirectional Forwarding Detection\n              (BFD)\",
      RFC 5880, DOI 10.17487/RFC5880, June 2010,\n              <https://www.rfc-editor.org/info/rfc5880>.\n
      \  [RFC7274]  Kompella, K., Andersson, L., and A. Farrel, \"Allocating\n              and
      Retiring Special-Purpose MPLS Labels\", RFC 7274,\n              DOI 10.17487/RFC7274,
      June 2014,\n              <https://www.rfc-editor.org/info/rfc7274>.\n   [RFC7432]
      \ Sajassi, A., Ed., Aggarwal, R., Bitar, N., Isaac, A.,\n              Uttaro,
      J., Drake, J., and W. Henderickx, \"BGP MPLS-Based\n              Ethernet VPN\",
      RFC 7432, DOI 10.17487/RFC7432,\n              February 2015, <https://www.rfc-editor.org/info/rfc7432>.\n"
    title: 7.2.  Informative References
  title: 7.  References
- contents:
  - "Acknowledgements\n   The Routing Area YANG Architecture design team members included
    Acee\n   Lindem, Anees Shaikh, Christian Hopps, Dean Bogdanovic, Ebben Aries,\n
    \  Lou Berger, Qin Wu, Rob Shakir, Xufeng Liu, and Yingzhen Qu.\n   Thanks to
    Martin Bjorklund, Tom Petch, Stewart Bryant, and Radek\n   Krejci for comments
    on the model and document text.  Thanks to Jeff\n   Haas and Robert Raszuk for
    suggestions for additional common routing\n   types.\n"
  title: Acknowledgements
- contents:
  - "Authors' Addresses\n   Xufeng Liu\n   Jabil\n   8281 Greensboro Drive, Suite
    200\n   McLean, VA  22102\n   United States of America\n   Email: Xufeng_Liu@jabil.com\n
    \  Yingzhen Qu\n   Futurewei Technologies, Inc.\n   2330 Central Expressway\n
    \  Santa Clara, CA  95050\n   United States of America\n   Email: yingzhen.qu@huawei.com\n
    \  Acee Lindem\n   Cisco Systems\n   301 Midenhall Way\n   Cary, NC  27513\n   United
    States of America\n   Email: acee@cisco.com\n   Christian Hopps\n   Deutsche Telekom\n
    \  Email: chopps@chopps.org\n   Lou Berger\n   LabN Consulting, L.L.C.\n   Email:
    lberger@labn.net\n"
  title: Authors' Addresses
