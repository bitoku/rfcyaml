- title: __initial_text__
  contents:
  - "   A Session Initiation Protocol (SIP) Event Notification Extension\n       \
    \                    for Resource Lists\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2006).\n"
- title: Abstract
  contents:
  - "Abstract\n   This document presents an extension to the Session Initiation\n\
    \   Protocol (SIP)-Specific Event Notification mechanism for subscribing\n   to\
    \ a homogeneous list of resources.  Instead of sending a SUBSCRIBE\n   for each\
    \ resource individually, the subscriber can subscribe to an\n   entire list and\
    \ then receive notifications when the state of any of\n   the resources in the\
    \ list changes.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................3\n\
    \   2. Terminology .....................................................4\n  \
    \ 3. Overview of Operation ...........................................4\n   4.\
    \ Operation of List Subscriptions .................................5\n      4.1.\
    \ Negotiation of Support for Resource Lists ..................6\n      4.2. Subscription\
    \ Duration ......................................7\n      4.3. NOTIFY Bodies ..............................................7\n\
    \      4.4. RLS Processing of SUBSCRIBE Requests .......................7\n  \
    \    4.5. RLS Generation of NOTIFY Requests ..........................7\n    \
    \  4.6. Subscriber Processing of NOTIFY Requests ...................9\n      4.7.\
    \ Handling of Forked Requests ...............................10\n      4.8. Rate\
    \ of Notifications .....................................10\n   5. Using multipart/related\
    \ to Convey Aggregate State ..............10\n      5.1. XML Syntax ................................................11\n\
    \      5.2. List Attributes ...........................................13\n  \
    \    5.3. Resource Attributes .......................................14\n    \
    \  5.4. Name Attributes ...........................................14\n      5.5.\
    \ Instance Attributes .......................................14\n      5.6. Constructing\
    \ Coherent Resource State ......................16\n           5.6.1. Processing\
    \ Full State Notifications ................17\n           5.6.2. Processing Partial\
    \ State Notifications .............17\n   6. Example ........................................................18\n\
    \   7. Security Considerations ........................................31\n  \
    \    7.1. Authentication ............................................31\n    \
    \       7.1.1. RLS and Subscriber in the Same Domain ..............31\n      \
    \     7.1.2. RLS and Subscriber in Different Domains ............32\n      7.2.\
    \ Risks of Improper Aggregation .............................33\n      7.3. Signing\
    \ and Sealing .......................................33\n      7.4. Infinite Loops\
    \ ............................................34\n   8. IANA Considerations ............................................34\n\
    \      8.1. New SIP Option Tag: eventlist .............................34\n  \
    \    8.2. New MIME type for Resource List Meta-Information ..........34\n    \
    \  8.3. URN Sub-Namespace .........................................35\n   9. Acknowledgements\
    \ ...............................................36\n   10. References ....................................................36\n\
    \      10.1. Normative References .....................................36\n  \
    \    10.2. Informative References ...................................37\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   The SIP-specific event notification mechanism [2] allows\
    \ a user (the\n   subscriber) to request to be notified of changes in the state\
    \ of a\n   particular resource.  This is accomplished by the subscriber\n   generating\
    \ a SUBSCRIBE request for the resource, which is processed\n   by a notifier that\
    \ represents the resource.\n   In many cases, a subscriber has a list of resources\
    \ they are\n   interested in.  Without some aggregating mechanism, this will require\n\
    \   the subscriber to generate a SUBSCRIBE request for each resource\n   about\
    \ which they want information.  For environments in which\n   bandwidth is limited,\
    \ such as wireless networks, subscribing to each\n   resource individually is\
    \ problematic.  Some specific problems are:\n   o  Doing so generates substantial\
    \ message traffic, in the form of the\n      initial SUBSCRIBE requests for each\
    \ resource and the refreshes of\n      each individual subscription.\n   o  The\
    \ notifier may insist on low refresh intervals, in order to\n      avoid a long-lived\
    \ subscription state.  This means that the\n      subscriber may need to generate\
    \ SUBSCRIBE refreshes faster than it\n      would like to or has the capacity\
    \ to.\n   o  The notifier may generate NOTIFY requests more rapidly than the\n\
    \      subscriber desires, causing NOTIFY traffic at a greater volume\n      than\
    \ is desired by the subscriber.\n   To solve these problems, this specification\
    \ defines an extension to\n   RFC 3265 [2] that allows for requesting and conveying\
    \ notifications\n   for lists of resources.  A resource list is identified by\
    \ a URI, and\n   it represents a list of zero or more URIs.  Each of these URIs\
    \ is an\n   identifier for an individual resource for which the subscriber wants\n\
    \   to receive information.  In many cases, the URI used to identify the\n   resource\
    \ list will be a SIP URI [1]; however, the use of other\n   schemes (such as pres:\
    \ [10]) is also foreseen.\n   The notifier for the list is called a \"resource\
    \ list server\", or RLS.\n   In order to determine the state of the entire list,\
    \ the RLS will act\n   as if it has generated a subscription to each resource\
    \ in the list.\n   The resource list is not restricted to be inside the domain\
    \ of the\n   subscriber.  Similarly, the resources in the list are not constrained\n\
    \   to be in the domain of the resource list server.\n"
- title: 2.  Terminology
  contents:
  - "2.  Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\"\
    , \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and\
    \ \"OPTIONAL\" in this\n   document are to be interpreted as described in RFC\
    \ 2119 [5].\n   The following terms are used throughout the remainder of this\n\
    \   document.\n   Back-End Subscription:  Any subscription (SIP or otherwise)\
    \ that an\n      RLS creates to learn of the state of a resource.  An RLS will\n\
    \      create back-end subscriptions to learn of the state of a resource\n   \
    \   about which the RLS is not an authority.  For back-end\n      subscriptions,\
    \ RLSes act as a subscriber.\n   List Subscription:  A subscription to a resource\
    \ list.  In list\n      subscriptions, RLSes act as the notifier.\n   Resource:\
    \  A resource is any logical entity that has a state or\n      states that can\
    \ be subscribed to.  Resources are identified by\n      URIs.\n   Resource List:\
    \  A list of zero or more resources that can have their\n      individual states\
    \ subscribed to with a single subscription.\n   RLMI:  Resource List Meta-Information.\
    \  RLMI is a document that\n      describes the state of the virtual subscriptions\
    \ associated with a\n      list subscription.\n   RLS:  Resource List Server.\
    \  RLSes accept subscriptions to resource\n      lists and send notifications\
    \ to update subscribers of the state of\n      the resources in a resource list.\n\
    \   Virtual Subscription:  A Virtual Subscription is a logical construct\n   \
    \   within an RLS that represents subscriptions to the resources in a\n      resource\
    \ list.  For each list subscription it services, an RLS\n      creates at least\
    \ one virtual subscription for every resource in\n      the resource list being\
    \ subscribed to.  In some cases, such as\n      when the RLS is not the authority\
    \ for the state of the resource,\n      this virtual subscription will be associated\
    \ with a back-end\n      subscription.  In other cases, such as when the RLS is\
    \ the\n      authority for the state of the resource, the virtual subscription\n\
    \      will not have a corresponding back-end subscription.\n"
- title: 3.  Overview of Operation
  contents:
  - "3.  Overview of Operation\n   This section provides an overview of the typical\
    \ mode of operation of\n   this extension.  It is not normative.\n   When users\
    \ wish to subscribe to the resource of a list of resources,\n   they can use the\
    \ mechanisms described in this specification.  The\n   first step is the creation\
    \ of a resource list.  This resource list is\n   represented by a SIP URI.  The\
    \ list contains a set of URIs, each of\n   which represents a resource for which\
    \ the subscriber wants to receive\n   information.  The resource list can exist\
    \ in any domain.  The list\n   could be manipulated through a web page, through\
    \ a voice response\n   system, or through some other protocol.  The specific means\
    \ by which\n   the list is created and maintained is outside the scope of this\n\
    \   specification.\n   To learn the resource state of the set of elements on the\
    \ list, the\n   user sends a single SUBSCRIBE request targeted to the URI of the\n\
    \   list.  This will be routed to an RLS for that URI.  The RLS acts as a\n  \
    \ notifier, authenticates the subscriber, and accepts the subscription.\n   The\
    \ RLS may have direct information about some or all of the\n   resources specified\
    \ by the list.  If it does not, it could subscribe\n   to any non-local resources\
    \ specified by the list resource.\n   Note that subscriptions to non-local resources\
    \ may or may not be SIP\n   subscriptions; any mechanism for determining such\
    \ information may be\n   employed.  This document uses the term \"back-end subscription\"\
    \ to\n   refer to such a subscription, regardless of whether SIP is used to\n\
    \   establish and service it.\n   As the state of resources in the list change,\
    \ the RLS generates\n   notifications to the list subscribers.  The RLS can, at\
    \ its\n   discretion, buffer notifications of resource changes and send the\n\
    \   resource information to the subscriber in batches, rather than\n   individually.\
    \  This allows the RLS to provide rate limiting for the\n   subscriber.\n   The\
    \ list notifications contain a body of type multipart/related.  The\n   root section\
    \ of the multipart/related content is an XML document that\n   provides meta-information\
    \ about each resource present in the list.\n   The remaining sections contain\
    \ the actual state information for each\n   resource.\n"
- title: 4.  Operation of List Subscriptions
  contents:
  - "4.  Operation of List Subscriptions\n   The event list extension acts, in many\
    \ ways, like an event template\n   package.  In particular, any single list subscription\
    \ must be\n   homogeneous with respect to the underlying event package.  In other\n\
    \   words, a single list subscription can apply only one event package to\n  \
    \ all the resources in the resource list.\n   Note that it is perfectly valid\
    \ for an RLS to allow multiple\n   subscriptions to the same list to use differing\
    \ event packages.\n   The key difference between a list subscription and templates\
    \ in\n   general is that support for list subscriptions indicates support for\n\
    \   arbitrary nesting of list subscriptions.  In other words, elements\n   within\
    \ the list may be atomic elements, or they may be lists\n   themselves.\n   The\
    \ consequence of this is that subscription to a URI that represents\n   a list\
    \ actually results in several virtual subscriptions to a tree of\n   resources.\
    \  The leaf nodes of this tree are virtual subscriptions of\n   the event type\
    \ given in the \"Event\" header field; all other nodes in\n   the tree are list\
    \ subscriptions that are serviced as described in\n   this section and its subsections.\n\
    \   Keep in mind that these virtual subscriptions are not literal SIP\n   subscriptions\
    \ (although they may result in SIP subscriptions,\n   depending on the RLS implementation).\n"
- title: 4.1.  Negotiation of Support for Resource Lists
  contents:
  - "4.1.  Negotiation of Support for Resource Lists\n   This specification uses the\
    \ SIP option tag mechanism for negotiating\n   support for the extension defined\
    \ herein.  Refer to RFC 3261 [1] for\n   the normative description of processing\
    \ of the \"Supported\" and\n   \"Require\" header fields and the 421 (Extension\
    \ Required) response\n   code.\n      A non-normative description of the implications\
    \ of the use of\n      option tags follows.\n      Any client that supports the\
    \ event list extension will include an\n      option tag of \"eventlist\" in a\
    \ \"Supported\" header field of every\n      SUBSCRIBE message for a subscription\
    \ for which it is willing to\n      process a list.  If the subscription is made\
    \ to a URI that\n      represents a list, the RLS will include \"eventlist\" in\
    \ a \"Require\"\n      header field of the response to the SUBSCRIBE, and in all\
    \ NOTIFY\n      messages within that subscription.\n      Use of \"Require: eventlist\"\
    \ in NOTIFY messages is applied by the\n      notifier to satisfy the RFC 3261\
    \ requirement that a UAC MUST\n      insert a Require header field into a request\
    \ if the UAC wishes to\n      insist that a UAS understand an extension in order\
    \ to process the\n      request.  Because the NOTIFY would not be usable without\
    \ applying\n      the eventlist option, the notifier is obligated to include it.\n\
    \   Including \"eventlist\" in a \"Require\" header field in a SUBSCRIBE\n   request\
    \ serves no purpose except to break interoperability in certain\n   cases, and\
    \ is consequently NOT RECOMMENDED.\n   Sending of \"Supported: eventlist\" in\
    \ a NOTIFY message is meaningless\n   and silly.  Implementations SHOULD NOT include\
    \ \"Supported: eventlist\"\n   in any requests except for SUBSCRIBE.\n   There\
    \ is nothing in a SIP URI that indicates whether it represents a\n   list of resources\
    \ or a single resource.  Therefore, if a subscriber\n   sends a request to a URI\
    \ that represents a list resource but does not\n   include a Supported header\
    \ field listing the \"eventlist\" token, the\n   notifier will typically return\
    \ a 421 (Extension Required) response\n   code.  RFC 3261 [1] advises that servers\
    \ avoid returning a 421 and\n   instead attempt to process the request without\
    \ the extension.\n   However, in this case, the URI fundamentally represents a\
    \ list\n   resource, and therefore the subscription cannot proceed without this\n\
    \   extension.\n"
- title: 4.2.  Subscription Duration
  contents:
  - "4.2.  Subscription Duration\n   Since the primary benefit of the resource list\
    \ server is to reduce\n   the overall messaging volume to a subscriber, it is\
    \ RECOMMENDED that\n   the subscription duration to a list be reasonably long.\
    \  The default,\n   when no duration is specified, is taken from the underlying\
    \ event\n   package.  Of course, the standard techniques [2] can be used to\n\
    \   increase or reduce this amount.\n"
- title: 4.3.  NOTIFY Bodies
  contents:
  - "4.3.  NOTIFY Bodies\n   An implementation compliant to this specification MUST\
    \ support the\n   multipart/related and application/rlmi+xml MIME types.  These\
    \ types\n   MUST be included in an Accept header sent in a SUBSCRIBE message,\
    \ in\n   addition to any other types supported by the client (including any\n\
    \   types required by the event package being used).\n"
- title: 4.4.  RLS Processing of SUBSCRIBE Requests
  contents:
  - "4.4.  RLS Processing of SUBSCRIBE Requests\n   Once the subscriber is authenticated,\
    \ the RLS performs authorization\n   per its local policy.  In many cases, each\
    \ resource list is\n   associated with a particular user (the one who created\
    \ it and manages\n   the set of elements in it), and only that user will be allowed\
    \ to\n   subscribe.  Of course, this mode of operation is not inherent in the\n\
    \   use of resource lists, and an RLS can use any authorization policy it\n  \
    \ chooses.\n"
- title: 4.5.  RLS Generation of NOTIFY Requests
  contents:
  - "4.5.  RLS Generation of NOTIFY Requests\n   This specification leaves the choice\
    \ about how and when to generate\n   NOTIFY requests at the discretion of the\
    \ implementor.  One of the\n   differentiators between various RLS implementations\
    \ is the means by\n   which they aggregate, rate-limit, or optimize the way in\
    \ which\n   notifications are generated.  As a baseline behavior, the RLS MAY\n\
    \   generate a NOTIFY to the RLS subscriber whenever the state of any\n   resource\
    \ on the list changes.\n   It is important to understand that any given subscription\
    \ is a\n   subscription either to a single resource or to a list of resources.\n\
    \   This nature (single resource versus list of resources) cannot change\n   during\
    \ the duration of a single subscription.  In particular, this\n   means that RLSes\
    \ MUST NOT send NOTIFY messages that do not contain\n   RLMI for a subscription\
    \ if they have previously sent NOTIFY messages\n   in that subscription containing\
    \ RLMI.  Similarly, RLSes MUST NOT send\n   NOTIFY messages that do contain RLMI\
    \ for a subscription if they have\n   previously sent NOTIFY messages in that\
    \ subscription which do not.\n      List representations necessarily contain RLMI\
    \ documents for two\n      reasons.  Importantly, they identify the resource to\
    \ which the\n      event state corresponds.  Many state syntaxes do not fully\n\
    \      identify the resource to which the state applies, or they may\n      identify\
    \ the resource in a different way than it is represented in\n      the list; for\
    \ example, PIDF documents may contain resource URIs\n      that are not identical\
    \ to the URI used to retrieve them.  Further,\n      RLMI documents serve to disambiguate\
    \ multiple instances of a\n      single resource.\n   See Section 5 for a detailed\
    \ definition of the syntax used to convey\n   the state of resource lists.  For\
    \ the purposes of the following\n   discussion, it is important to know that the\
    \ overall list contains\n   zero or more resources, and that the resources contain\
    \ zero or more\n   instances.  Each instance has a state associated with it (pending,\n\
    \   active, or terminating) representing the state of the virtual\n   subscription.\n\
    \   Notifications contain a multipart document, the first part of which\n   always\
    \ contains meta-information about the list (e.g., membership,\n   state of the\
    \ virtual subscription to the resource).  Remaining parts\n   are used to convey\
    \ the actual state of the resources listed in the\n   meta-information.\n   The\
    \ \"state\" attribute of each instance of a resource in the\n   meta-information\
    \ is set according to the state of the virtual\n   subscription.  The meanings\
    \ of the \"state\" attribute are described in\n   RFC 3265 [2].\n   If an instance\
    \ of a resource was previously reported to the\n   subscriber but is no longer\
    \ available (i.e., the virtual subscription\n   to that instance has been terminated),\
    \ the resource list server\n   SHOULD include that resource instance in the meta-information\
    \ in the\n   first NOTIFY message sent to the subscriber following the instance's\n\
    \   unavailability.  The RLS MAY continue to do so for future\n   notifications.\n\
    \   When sending information for a terminated resource instance, the RLS\n   indicates\
    \ a state of \"terminated\" and an appropriate reason value.\n   Valid reason\
    \ values and their meanings are described in RFC 3265 [2].\n   If the RLS will\
    \ attempt to recover the resource state again at some\n   point in the future\
    \ (e.g., when the reason in the meta-information is\n   \"probation\"), then the\
    \ instance of the resource SHOULD remain in the\n   meta-information until the\
    \ instance state is available, or until the\n   RLS gives up on making such state\
    \ available.\n   When the first SUBSCRIBE message for a particular subscription\
    \ is\n   received by an RLS, the RLS will often not know state information for\n\
    \   all the resources specified by the resource list.  For any resource\n   for\
    \ which state information is not known, the corresponding \"uri\"\n   attribute\
    \ will be set appropriately, and no <instance> elements will\n   be present for\
    \ the resource.\n   For an initial notification, sections corresponding to resources\
    \ for\n   which the RLS does have state will be populated with appropriate data\n\
    \   (subject, of course, to local policy decisions).  This will often\n   occur\
    \ if the resource list server is co-located with the server for\n   one or more\
    \ of the resources specified on the list.\n   Immediate notifications triggered\
    \ as a result of subsequent SUBSCRIBE\n   messages SHOULD include an RLMI document\
    \ in which the full state is\n   indicated.  The RLS SHOULD also include state\
    \ information for all\n   resources in the list for which the RLS has state, subject\
    \ to policy\n   restrictions.  This allows the subscriber to refresh their state,\
    \ and\n   to recover from lost notifications.\n"
- title: 4.6.  Subscriber Processing of NOTIFY Requests
  contents:
  - "4.6.  Subscriber Processing of NOTIFY Requests\n   Notifications for a resource\
    \ list can convey information about a\n   subset of the list elements.  This means\
    \ that an explicit algorithm\n   needs to be defined in order to construct coherent\
    \ and consistent\n   state.\n   The XML document present in the root of the multipart/related\n\
    \   document contains a <resource> element for some or all of the\n   resources\
    \ in the list.  Each <resource> element contains a URI that\n   uniquely identifies\
    \ the resource to which that section corresponds.\n   When a NOTIFY arrives, it\
    \ can contain full or partial state (as\n   indicated by the \"fullState\" attribute\
    \ of the top-level <list>\n   element).  If full state is indicated, then the\
    \ recipient replaces\n   all state associated with the list with the entities\
    \ in the NOTIFY\n   body.  If full state is not indicated, the recipient of the\
    \ NOTIFY\n   updates information for each identified resource.  Information for\n\
    \   any resources that are not identified in the NOTIFY is not changed,\n   even\
    \ if they were indicated in previous NOTIFY messages.  See\n   Section 5.6 for\
    \ more information.\n      When full state is indicated, note that it applies\
    \ only to the\n      RLMI document in which it occurs.  In particular, one of\
    \ the\n      <resource> elements in the document may in turn refer to another\n\
    \      list of resources.  Any such sub-lists will be detailed in their\n    \
    \  own RLMI documents, which may or may not have full state\n      indicated.\n\
    \      Further note that the underlying event package may have its own\n     \
    \ rules for compositing partial state notification.  When processing\n      data\
    \ related to those packages, their rules apply (i.e., the fact\n      that they\
    \ were reported as part of a list does not change their\n      partial notification\
    \ semantics).\n      Finally, note that as a consequence of the way in which resource\n\
    \      list subscriptions work, polling of resource state may not be\n      particularly\
    \ useful.  While such polls will retrieve the resource\n      list, they will\
    \ not necessarily contain state for some or all of\n      the resources on the\
    \ list.\n"
- title: 4.7.  Handling of Forked Requests
  contents:
  - "4.7.  Handling of Forked Requests\n   Forking makes little sense with subscriptions\
    \ to event lists, since\n   the whole idea is a centralization of the source of\
    \ notifications.\n   Therefore, a subscriber to a list MUST NOT install multiple\n\
    \   subscriptions when the initial request is forked.  If multiple\n   responses\
    \ are received, they are handled using the techniques\n   described in Section\
    \ 4.4.9 of RFC 3265 [2].\n"
- title: 4.8.  Rate of Notifications
  contents:
  - "4.8.  Rate of Notifications\n   One potential role of the RLS is to perform rate\
    \ limitations on\n   behalf of the subscriber.  As such, this specification does\
    \ not\n   mandate any particular rate limitation, and rather leaves that to the\n\
    \   discretion of the implementation.\n"
- title: 5.  Using multipart/related to Convey Aggregate State
  contents:
  - "5.  Using multipart/related to Convey Aggregate State\n   In order to convey\
    \ the state of multiple resources, the list\n   extension uses the \"multipart/related\"\
    \ mime type.  The syntax for\n   multipart/related is defined in \"The MIME Multipart/Related\
    \ Content-\n   type\" [4].\n"
- title: 5.1.  XML Syntax
  contents:
  - "5.1.  XML Syntax\n   The root document of the multipart/related body MUST be\
    \ a Resource\n   List Meta-Information (RLMI) document.  It is of the type\n \
    \  \"application/rlmi+xml\".  This document contains the meta-information\n  \
    \ for the resources contained in the notification.  The schema for this\n   XML\
    \ document is given below.\n   <?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n \
    \  <xs:schema targetNamespace=\"urn:ietf:params:xml:ns:rlmi\"\n              elementFormDefault=\"\
    qualified\"\n              xmlns=\"urn:ietf:params:xml:ns:rlmi\"\n           \
    \   xmlns:xs=\"http://www.w3.org/2001/XMLSchema\">\n   <xs:import namespace=\"\
    http://www.w3.org/XML/1998/namespace\"\n              schemaLocation=\"http://www.w3.org/2001/xml.xsd\"\
    />\n     <xs:element name=\"list\">\n       <xs:complexType>\n         <xs:sequence>\n\
    \           <xs:element ref=\"name\" minOccurs=\"0\"\n                       maxOccurs=\"\
    unbounded\" />\n           <xs:element ref=\"resource\" minOccurs=\"0\"\n    \
    \                   maxOccurs=\"unbounded\" />\n         </xs:sequence>\n    \
    \     <xs:attribute name=\"uri\" type=\"xs:anyURI\" use=\"required\" />\n    \
    \     <xs:attribute name=\"version\" type=\"xs:unsignedInt\"\n               \
    \        use=\"required\" />\n         <xs:attribute name=\"fullState\" type=\"\
    xs:boolean\"\n                       use=\"required\" />\n         <xs:attribute\
    \ name=\"cid\" type=\"xs:string\" use=\"optional\" />\n         <xs:anyAttribute\
    \ processContents=\"lax\" />\n       </xs:complexType>\n     </xs:element>\n \
    \    <xs:element name=\"resource\">\n       <xs:complexType>\n         <xs:sequence>\n\
    \           <xs:element ref=\"name\" minOccurs=\"0\"\n                       maxOccurs=\"\
    unbounded\" />\n           <xs:element ref=\"instance\" minOccurs=\"0\"\n    \
    \                   maxOccurs=\"unbounded\" />\n         </xs:sequence>\n    \
    \     <xs:attribute name=\"uri\" type=\"xs:anyURI\" use=\"required\" />\n    \
    \     <xs:anyAttribute processContents=\"lax\" />\n       </xs:complexType>\n\
    \     </xs:element>\n     <xs:element name=\"instance\">\n       <xs:complexType>\n\
    \         <xs:sequence>\n           <xs:any minOccurs=\"0\" maxOccurs=\"unbounded\"\
    \n                   processContents=\"lax\" />\n         </xs:sequence>\n   \
    \      <xs:attribute name=\"id\" type=\"xs:string\" use=\"required\" />\n    \
    \     <xs:attribute name=\"state\" use=\"required\">\n           <xs:simpleType>\n\
    \             <xs:restriction base=\"xs:string\">\n               <xs:enumeration\
    \ value=\"active\" />\n               <xs:enumeration value=\"pending\" />\n \
    \              <xs:enumeration value=\"terminated\" />\n             </xs:restriction>\n\
    \           </xs:simpleType>\n         </xs:attribute>\n         <xs:attribute\
    \ name=\"reason\" type=\"xs:string\"\n                       use=\"optional\"\
    \ />\n         <xs:attribute name=\"cid\" type=\"xs:string\" use=\"optional\"\
    \ />\n         <xs:anyAttribute processContents=\"lax\" />\n       </xs:complexType>\n\
    \     </xs:element>\n     <xs:element name=\"name\">\n       <xs:complexType>\n\
    \         <xs:simpleContent>\n           <xs:extension base=\"xs:string\">\n \
    \            <xs:attribute ref=\"xml:lang\" use=\"optional\"/>\n           </xs:extension>\n\
    \         </xs:simpleContent>\n       </xs:complexType>\n     </xs:element>\n\
    \   </xs:schema>\n   An example of a document formatted using this schema follows.\n\
    \   <?xml version=\"1.0\"?>\n   <list xmlns=\"urn:ietf:params:xml:ns:rlmi\"\n\
    \         uri=\"sip:adam-friends@lists.vancouver.example.com\"\n         version=\"\
    7\" fullState=\"true\">\n     <name xml:lang=\"en\">Buddy List</name>\n     <name\
    \ xml:lang=\"fr\">Liste d'amis</name>\n     <resource uri=\"sip:bob@vancouver.example.com\"\
    >\n       <name>Bob Smith</name>\n       <instance id=\"juwigmtboe\" state=\"\
    active\"\n                 cid=\"12345.aaa@vancouver.example.com\"/>\n     </resource>\n\
    \     <resource uri=\"sip:dave@vancouver.example.com\">\n       <name>Dave Jones</name>\n\
    \       <instance id=\"hqzsuxtfyq\" state=\"active\"\n                 cid=\"\
    12345.aab@vancouver.example.com\"/>\n     </resource>\n     <resource uri=\"sip:jim@vancouver.example.com\"\
    >\n       <name>Jim</name>\n       <instance id=\"oflzxqzuvg\" state=\"terminated\"\
    \n                 reason=\"rejected\" />\n     </resource>\n     <resource uri=\"\
    sip:ed@vancouver.example.com\">\n       <name>Ed</name>\n       <instance id=\"\
    grqhzsppxb\" state=\"pending\"/>\n     </resource>\n   </list>\n"
- title: 5.2.  List Attributes
  contents:
  - "5.2.  List Attributes\n   The <list> element present in a list notification MUST\
    \ contain three\n   attributes.\n   The first mandatory <list> attribute is \"\
    uri\", which contains the uri\n   that corresponds to the list.  Typically, this\
    \ is the URI to which\n   the SUBSCRIBE request was sent.\n   The second mandatory\
    \ <list> attribute is \"version\", which contains a\n   number from 0 to 2^32-1.\
    \  This version number MUST be 0 for the first\n   NOTIFY message sent within\
    \ a subscription, and MUST increase by\n   exactly one for each subsequent NOTIFY\
    \ sent within a subscription.\n   The third mandatory attribute is \"fullState\"\
    .  The \"fullState\"\n   attribute indicates whether the NOTIFY message contains\
    \ information\n   for every resource in the list.  If it does, the value of the\n\
    \   attribute is \"true\" (or \"1\"); otherwise, it is \"false\" (or \"0\"). \
    \ The\n   first NOTIFY sent in a subscription MUST contain full state, as must\n\
    \   the first NOTIFY sent after receipt of a SUBSCRIBE request for the\n   subscription.\n\
    \   Finally, <list> elements MAY contain a \"cid\" attribute.  If present,\n \
    \  the \"cid\" attribute identifies a section within the multipart/related\n \
    \  body that contains aggregate state information for the resources\n   contained\
    \ in the list.  The definition of such aggregate information\n   is outside the\
    \ scope of this document and will be defined on a per-\n   package basis, as needed.\
    \  The cid attribute is the Content-ID for\n   the corresponding section in the\
    \ multipart body.\n   The cid attribute MUST refer only to top-level parts of\
    \ the\n   multipart/related document for which the RLMI document in which it\n\
    \   appears is the root.  See Section 5.5 for an example.\n"
- title: 5.3.  Resource Attributes
  contents:
  - "5.3.  Resource Attributes\n   The resource list contains one <resource> element\
    \ for each resource\n   being reported in the notification.  These resource elements\
    \ contain\n   attributes that identify meta-data associated with each resource.\n\
    \   The \"uri\" attribute identifies the resource to which the <resource>\n  \
    \ element corresponds.  Typically, this will be a SIP URI that, if\n   subscribed\
    \ to, would return the state of the resource.  This\n   attribute MUST be present.\n"
- title: 5.4.  Name Attributes
  contents:
  - "5.4.  Name Attributes\n   Each list and resource element contains zero or more\
    \ name elements.\n   These name elements contain human-readable descriptions or\
    \ names for\n   the resource list or resource.  The contents of these elements\
    \ are\n   somewhat analogous to the \"Display Name\" present in the SIP name-addr\n\
    \   element.\n   Name elements optionally contain the standard XML \"xml:lang\"\
    \n   attribute.  The \"xml:lang\" attribute, if present, specifies the\n   language\
    \ of the human-readable name.  If this attribute is present,\n   it MUST contain\
    \ a valid language tag.  Language tags are defined in\n   RFC 3066 [6].  The language\
    \ tag assists applications in determining\n   which of potentially several name\
    \ elements should be rendered to the\n   user.\n"
- title: 5.5.  Instance Attributes
  contents:
  - "5.5.  Instance Attributes\n   Each resource element contains zero or more instance\
    \ elements.  These\n   instance elements are used to represent a single notifier\
    \ for the\n   resource.  For event packages that allow forking, multiple virtual\n\
    \   subscriptions may exist for a given resource.  Multiple virtual\n   subscriptions\
    \ are represented as multiple instance elements in the\n   corresponding resource\
    \ element.  For subscriptions in which forking\n   does not occur, at most one\
    \ instance will be present for a given\n   resource.\n   The \"id\" attribute\
    \ contains an opaque string used to uniquely\n   identify the instance of the\
    \ resource.  The \"id\" attribute is unique\n   only within the context of a resource.\
    \  Construction of this string\n   is an implementation decision.  Any mechanism\
    \ for generating this\n   string is valid, as long as uniqueness within the resource\
    \ is\n   assured.\n   The \"state\" attribute contains the subscription state\
    \ for the\n   identified instance of the resource.  This attribute contains one\
    \ of\n   the values \"active\", \"pending\", or \"terminated\".  The meanings\
    \ for\n   these values are as defined for the \"Subscription-State\" header field\n\
    \   in RFC 3265 [2].\n   If the \"state\" attribute indicates \"terminated\",\
    \ then a \"reason\"\n   attribute MUST also be present.  This \"reason\" attribute\
    \ has the same\n   values and meanings as those given for the \"reason\" parameter\
    \ on the\n   \"Subscription-State\" header field in RFC 3265 [2].  Note that the\n\
    \   \"reason\" attribute is included for informational purposes; the list\n  \
    \ subscriber is not expected to take any automated actions based on the\n   reason\
    \ value.\n   Finally, the \"cid\" attribute, which MUST be present if the \"state\"\
    \n   attribute is \"active\", identifies the section within the\n   multipart/related\
    \ body that contains the actual resource state.  This\n   state is expressed in\
    \ the content type defined by the event package\n   for conveying state.  The\
    \ cid attribute is the Content-ID for the\n   corresponding section in the multipart\
    \ body.\n   The cid attribute MUST refer only to top-level parts of the\n   multipart/related\
    \ document for which the RLMI document in which it\n   appears is the root.\n\
    \      For example, consider a multipart/related document containing\n      three\
    \ parts; we'll label these parts A, B, and C.  Part A is type\n      application/rlmi+xml,\
    \ part B is type multipart/related, and part C\n      is type application/pidf+xml.\
    \  Part B is in turn a document\n      containing three parts: D, E, and F.  Part\
    \ D is of type\n      application/rlmi+xml, and parts E and F are of type\n  \
    \    application/pidf+xml.\n       +-------------------------------------------+\n\
    \       | Top Level Document: multipart/related     |\n       |              \
    \                             |\n       | +---------------------------------------+\
    \ |\n       | | Part A: application/rlmi+xml          | |\n       | +---------------------------------------+\
    \ |\n       | | Part B: multipart/related             | |\n       | |        \
    \                               | |\n       | | +-----------------------------------+\
    \ | |\n       | | | Part D: application/rlmi+xml      | | |\n       | | +-----------------------------------+\
    \ | |\n       | | | Part E: application/pidf+xml      | | |\n       | | +-----------------------------------+\
    \ | |\n       | | | Part F: application/pidf+xml      | | |\n       | | +-----------------------------------+\
    \ | |\n       | |                                       | |\n       | +---------------------------------------+\
    \ |\n       | | Part C: application/pidf+xml          | |\n       | +---------------------------------------+\
    \ |\n       |                                           |\n       +-------------------------------------------+\n\
    \      Any \"cid\" attributes in document A must refer only to parts B or\n  \
    \    C.  Referring to parts D, E, or F would be illegal.  Similarly,\n      any\
    \ \"cid\" attributes in document D must refer only to parts E or\n      F.  Referring\
    \ to any other parts would be illegal.\n      Also note that the subscription\
    \ durations of any back-end\n      subscriptions are not propagated into the meta-information\
    \ state\n      in any way.\n"
- title: 5.6.  Constructing Coherent Resource State
  contents:
  - "5.6.  Constructing Coherent Resource State\n   The resource list subscriber maintains\
    \ a table for each resource\n   list.  The table contains a row for each resource\
    \ in the resource\n   list.  Each row is indexed by the URI for that resource.\
    \  That URI is\n   obtained from the \"uri\" attribute on each <resource> element.\
    \  The\n   contents of each row contain the state of that resource as conveyed\n\
    \   in the resource document.\n   For resources that provide versioning information\
    \ (which is mandated\n   by [2] for any formats that allow partial notification),\
    \ each row\n   also contains a resource state version number.  The version number\
    \ of\n   the row is initialized with the version specified in the first\n   document\
    \ received, as defined by the corresponding event package.\n   This value is used\
    \ when comparing versions of partial notifications\n   for a resource.\n   The\
    \ processing of the resource list notification depends on whether\n   it contains\
    \ full or partial state.\n"
- title: 5.6.1.  Processing Full State Notifications
  contents:
  - "5.6.1.  Processing Full State Notifications\n   If a notification contains full\
    \ state, indicated by the <list>\n   attribute \"fullState\" set to \"true\",\
    \ the notification is used to\n   update the table.  A check is first made to\
    \ ensure that the \"version\"\n   attribute of the <list> attribute in the received\
    \ message is greater\n   than the local version number.  If not, the received\
    \ document is\n   discarded without any further processing.  Otherwise, the contents\
    \ of\n   the resource-list table are flushed and repopulated from the contents\n\
    \   of the document.  A new row in the table is created for each\n   \"resource\"\
    \ element.\n"
- title: 5.6.2.  Processing Partial State Notifications
  contents:
  - "5.6.2.  Processing Partial State Notifications\n   If a notification contains\
    \ partial state, indicated by the <list>\n   attribute \"fullState\" set to \"\
    false\", a check is made to ensure that\n   no list notifications have been lost.\
    \  The value of the local version\n   number (the \"version\" attribute of the\
    \ <list> element) is compared to\n   the version number of the new document.\n\
    \   o  If the value in the new document is exactly one higher than the\n     \
    \ local version number, the local version number is increased by\n      one, and\
    \ the document is processed as described below.\n   o  If the version in the document\
    \ is more than one higher than the\n      local version number, the local version\
    \ number is set to the value\n      in the new document, and the document is processed\
    \ as described\n      below.  The list subscriber SHOULD also generate a refresh\
    \ request\n      to trigger a full state notification.\n   o  If the version in\
    \ the document is less than or equal to the local\n      version, the document\
    \ is discarded without any further processing.\n   For each resource listed in\
    \ the document, the subscriber checks to\n   see whether a row exists for that\
    \ resource.  This check is done by\n   comparing the Resource-URI value with the\
    \ URI associated with the\n   row.  If the resource doesn't exist in the table,\
    \ a row is added, and\n   its state is set to the information from that \"resource\"\
    \ element.  If\n   the resource does exist, its state is updated to be the information\n\
    \   from that \"resource\" element, as described in the definition of the\n  \
    \ event package.  If a row is updated or created such that its state is\n   now\
    \ \"terminated,\" that entry MAY be removed from the table at any\n   time.\n"
- title: 6.  Example
  contents:
  - "6.  Example\n   This section gives an example call flow.  It is not normative.\
    \  If a\n   conflict arises between this call flow and the normative behavior\n\
    \   described in this or any other document, the normative descriptions\n   are\
    \ to be followed.\n   In this particular example, we request a subscription to\
    \ a nested\n   presence list.  The subscriber's address-of-record is\n   \"sip:adam@vancouver.example.com\"\
    , and the name of the nested list\n   resource that we are subscribing to is called\n\
    \   \"sip:adam-buddies@pres.vancouver.example.com\".  The underlying event\n \
    \  package is \"presence\", described by [8].\n   In this example, the RLS has\
    \ information to service some of the\n   resources on the list, but must consult\
    \ other servers to retrieve\n   information for others.  The implementation of\
    \ the RLS in this\n   example uses the SIP SUBSCRIBE/NOTIFY mechanism to retrieve\
    \ such\n   information.\n   Terminal   pres.vancouver.example.com   pres.stockholm.example.org\n\
    \     |                |        pres.dallas.example.net  |\n   1 |---SUBSCRIBE--->|\
    \                |                |\n   2 |<-----200-------|                |\
    \                |\n   3 |<----NOTIFY-----|                |                |\n\
    \   4 |------200------>|                |                |\n   5 |           \
    \     |---SUBSCRIBE--->|                |\n   6 |                |<-----200-------|\
    \                |\n   7 |                |<----NOTIFY-----|                |\n\
    \   8 |                |------200------>|                |\n   9 |           \
    \     |------------SUBSCRIBE----------->|\n   10|                |<--------------200---------------|\n\
    \   11|                |<-------------NOTIFY-------------|\n   12|           \
    \     |---------------200-------------->|\n   13|<----NOTIFY-----|           \
    \     |                |\n   14|------200------>|                |           \
    \     |\n   1.   We initiate the subscription by sending a SUBSCRIBE message to\n\
    \        our local RLS.  (There is no reason that the RLS we contact has\n   \
    \     to be in our domain, of course).  Note that we must advertise\n        support\
    \ for application/rlmi+xml and multipart/related because\n        we support the\
    \ eventlist extension, and that we must advertise\n        application/pidf+xml\
    \ because we are requesting a subscription to\n        presence.\n   Terminal\
    \ -> Local RLS\n   SUBSCRIBE sip:adam-buddies@pres.vancouver.example.com SIP/2.0\n\
    \   Via: SIP/2.0/TCP terminal.vancouver.example.com;\n     branch=z9hG4bKwYb6QREiCL\n\
    \   Max-Forwards: 70\n   To: <sip:adam-buddies@pres.vancouver.example.com>\n \
    \  From: <sip:adam@vancouver.example.com>;tag=ie4hbb8t\n   Call-ID: cdB34qLToC@terminal.vancouver.example.com\n\
    \   CSeq: 322723822 SUBSCRIBE\n   Contact: <sip:terminal.vancouver.example.com>\n\
    \   Event: presence\n   Expires: 7200\n   Supported: eventlist\n   Accept: application/pidf+xml\n\
    \   Accept: application/rlmi+xml\n   Accept: multipart/related\n   Accept: multipart/signed\n\
    \   Accept: application/pkcs7-mime\n   Content-Length: 0\n   2.   The Local RLS\
    \ completes the SUBSCRIBE transaction.  Note that\n        authentication and\
    \ authorization would normally take place at\n        this point in the call flow.\
    \  Those steps are omitted for\n        brevity.\n   Local RLS -> Terminal\n \
    \  SIP/2.0 200 OK\n   Via: SIP/2.0/TCP terminal.vancouver.example.com;\n     branch=z9hG4bKwYb6QREiCL\n\
    \   To: <sip:adam-buddies@pres.vancouver.example.com>;tag=zpNctbZq\n   From: <sip:adam@vancouver.example.com>;tag=ie4hbb8t\n\
    \   Call-ID: cdB34qLToC@terminal.vancouver.example.com\n   CSeq: 322723822 SUBSCRIBE\n\
    \   Contact: <sip:pres.vancouver.example.com>\n   Expires: 7200\n   Require: eventlist\n\
    \   Content-Length: 0\n   3.   As is required by RFC 3265 [2], the RLS sends a\
    \ NOTIFY\n        immediately upon accepting the subscription.  In this example,\n\
    \        we are assuming that the local RLS is also an authority for\n       \
    \ presence information for the users in the\n        \"vancouver.example.com\"\
    \ domain.  The NOTIFY contains an RLMI\n        document describing the entire\
    \ buddy list (initial notifies\n        require full state), as well as presence\
    \ information for the\n        users about which it already knows.  Note that,\
    \ since the RLS\n        has not yet retrieved information for some of the entries\
    \ on the\n        list, those <resource> elements contain no <instance> elements.\n\
    \   Local RLS -> Terminal\n   NOTIFY sip:terminal.vancouver.example.com SIP/2.0\n\
    \   Via: SIP/2.0/TCP pres.vancouver.example.com;\n     branch=z9hG4bKMgRenTETmm\n\
    \   Max-Forwards: 70\n   From: <sip:adam-buddies@pres.vancouver.example.com>;tag=zpNctbZq\n\
    \   To: <sip:adam@vancouver.example.com>;tag=ie4hbb8t\n   Call-ID: cdB34qLToC@terminal.vancouver.example.com\n\
    \   CSeq: 997935768 NOTIFY\n   Contact: <sip:pres.vancouver.example.com>\n   Event:\
    \ presence\n   Subscription-State: active;expires=7200\n   Require: eventlist\n\
    \   Content-Type: multipart/related;type=\"application/rlmi+xml\";\n       start=\"\
    <nXYxAE@pres.vancouver.example.com>\";\n       boundary=\"50UBfW7LSCVLtggUPe5z\"\
    \n   Content-Length: 1560\n   --50UBfW7LSCVLtggUPe5z\n   Content-Transfer-Encoding:\
    \ binary\n   Content-ID: <nXYxAE@pres.vancouver.example.com>\n   Content-Type:\
    \ application/rlmi+xml;charset=\"UTF-8\"\n   <?xml version=\"1.0\" encoding=\"\
    UTF-8\"?>\n   <list xmlns=\"urn:ietf:params:xml:ns:rlmi\"\n         uri=\"sip:adam-friends@pres.vancouver.example.com\"\
    \n         version=\"1\" fullState=\"true\">\n     <name xml:lang=\"en\">Buddy\
    \ List at COM</name>\n     <name xml:lang=\"de\">Liste der Freunde an COM</name>\n\
    \     <resource uri=\"sip:bob@vancouver.example.com\"\">\n       <name>Bob Smith</name>\n\
    \       <instance id=\"juwigmtboe\" state=\"active\"\n                 cid=\"\
    bUZBsM@pres.vancouver.example.com\"/>\n     </resource>\n     <resource uri=\"\
    sip:dave@vancouver.example.com\">\n       <name>Dave Jones</name>\n       <instance\
    \ id=\"hqzsuxtfyq\" state=\"active\"\n                 cid=\"ZvSvkz@pres.vancouver.example.com\"\
    />\n     </resource>\n     <resource uri=\"sip:ed@dallas.example.net\">\n    \
    \   <name>Ed at NET</name>\n     </resource>\n     <resource uri=\"sip:adam-friends@stockholm.example.org\"\
    >\n       <name xml:lang=\"en\">My Friends at ORG</name>\n       <name xml:lang=\"\
    de\">Meine Freunde an ORG</name>\n     </resource>\n   </list>\n   --50UBfW7LSCVLtggUPe5z\n\
    \   Content-Transfer-Encoding: binary\n   Content-ID: <bUZBsM@pres.vancouver.example.com>\n\
    \   Content-Type: application/pidf+xml;charset=\"UTF-8\"\n   <?xml version=\"\
    1.0\" encoding=\"UTF-8\"?>\n   <presence xmlns=\"urn:ietf:params:xml:ns:pidf\"\
    \n       entity=\"sip:bob@vancouver.example.com\">\n     <tuple id=\"sg89ae\"\
    >\n       <status>\n         <basic>open</basic>\n       </status>\n       <contact\
    \ priority=\"1.0\">sip:bob@vancouver.example.com</contact>\n     </tuple>\n  \
    \ </presence>\n   --50UBfW7LSCVLtggUPe5z\n   Content-Transfer-Encoding: binary\n\
    \   Content-ID: <ZvSvkz@pres.vancouver.example.com>\n   Content-Type: application/pidf+xml;charset=\"\
    UTF-8\"\n   <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n   <presence xmlns=\"\
    urn:ietf:params:xml:ns:pidf\"\n       entity=\"sip:dave@vancouver.example.com\"\
    >\n     <tuple id=\"slie74\">\n       <status>\n         <basic>closed</basic>\n\
    \       </status>\n     </tuple>\n   </presence>\n   --50UBfW7LSCVLtggUPe5z--\n\
    \   4.   The terminal completes the transaction.\n   Terminal -> Local RLS\n \
    \  SIP/2.0 200 OK\n   Via: SIP/2.0/TCP pres.vancouver.example.com;\n     branch=z9hG4bKMgRenTETmm\n\
    \   From: <sip:adam-buddies@pres.vancouver.example.com>;tag=zpNctbZq\n   To: <sip:adam@vancouver.example.com>;tag=ie4hbb8t\n\
    \   Call-ID: cdB34qLToC@terminal.vancouver.example.com\n   CSeq: 997935768 NOTIFY\n\
    \   Contact: <sip:terminal.vancouver.example.com>\n   Content-Length: 0\n   5.\
    \   In order to service the subscription, the local RLS subscribes\n        to\
    \ the state of the resources.  In this step, the RLS attempts\n        to subscribe\
    \ to the presence state of the resource\n        \"sip:ed@dallas.example.net\"\
    .  Since the local RLS knows how to\n        receive notifications for list subscriptions,\
    \ it includes the\n        \"Supported: eventlist\" header field in its request.\
    \  Although\n        the linkage between this subscription and the one sent by\
    \ the\n        terminal is left up to the application, this message\n        demonstrates\
    \ some reasonable behavior by including \"Accept\"\n        header fields for\
    \ all the body types it knows the subscriber\n        (Terminal) supports.  This\
    \ is safe to do, since the local RLS\n        will only pass these formats through\
    \ to the subscriber and does\n        not need to actually understand them.\n\
    \   Local RLS -> Presence Server in dallas.example.net\n   SUBSCRIBE sip:ed@dallas.example.net\
    \ SIP/2.0\n   Via: SIP/2.0/TCP pres.vancouver.example.com;\n     branch=z9hG4bKMEyGjdG1LH\n\
    \   Max-Forwards: 70\n   To: <sip:ed@dallas.example.net>\n   From: <sip:adam@vancouver.example.com>;tag=aM5icQu9\n\
    \   Call-ID: Ugwz5ARxNw@pres.vancouver.example.com\n   CSeq: 870936068 SUBSCRIBE\n\
    \   Contact: <sip:pres.vancouver.example.com>\n   Identity: Tm8sIHRoaXMgaXNuJ3QgYSByZWFsIGNlcnQuIFlvdSBvn\n\
    \             Zpb3VzbHkgaGF2ZSB0aW1lIHRvIGtpbGwuIEkKc3VnZ2V\n             zdCBodHRwOi8vd3d3LmhvbWVzdGFycnVubmVyLmNvbS8K\n\
    \   Identity-Info: https://vancouver.example.com/cert\n   Event: presence\n  \
    \ Expires: 3600\n   Supported: eventlist\n   Accept: application/pidf+xml\n  \
    \ Accept: application/rlmi+xml\n   Accept: multipart/related\n   Accept: multipart/signed\n\
    \   Accept: application/pkcs7-mime\n   Content-Length: 0\n   6.   The Presence\
    \ Server in dallas.example.net completes the\n        SUBSCRIBE transaction. \
    \ Note that authentication would normally\n        take place at this point in\
    \ the call flow.  This step is omitted\n        for brevity.\n   Presence Server\
    \ in dallas.example.net -> Local RLS\n   SIP/2.0 200 OK\n   Via: SIP/2.0/TCP pres.vancouver.example.com;\n\
    \     branch=z9hG4bKMEyGjdG1LH\n   To: <sip:ed@dallas.example.net>;tag=e45TmHTh\n\
    \   From: <sip:adam@vancouver.example.com>;tag=aM5icQu9\n   Call-ID: Ugwz5ARxNw@pres.vancouver.example.com\n\
    \   CSeq: 870936068 SUBSCRIBE\n   Contact: <sip:dallas.example.net>\n   Expires:\
    \ 3600\n   Content-Length: 0\n   7.   In this example, we assume that the server\
    \ at dallas.example.net\n        doesn't have enough authorization information\
    \ to reject or\n        accept our subscription.  The initial notify, therefore,\n\
    \        contains a \"Subscription-State\" of \"pending\".  Presumably, the\n\
    \        party responsible for accepting or denying authorization for the\n  \
    \      resource is notified of this change; however, those steps are\n       \
    \ not included in this call flow for brevity.\n   Presence Server in dallas.example.net\
    \ -> Local RLS\n   NOTIFY sip:pres.vancouver.example.com SIP/2.0\n   Via: SIP/2.0/TCP\
    \ pres.dallas.example.net;\n     branch=z9hG4bKfwpklPxmrW\n   Max-Forwards: 70\n\
    \   From: <sip:ed@dallas.example.net>;tag=e45TmHTh\n   To: <sip:adam@vancouver.example.com>;tag=aM5icQu9\n\
    \   Call-ID: Ugwz5ARxNw@pres.vancouver.example.com\n   CSeq: 1002640632 NOTIFY\n\
    \   Contact: <sip:dallas.example.net>\n   Subscription-State: pending;expires=3600\n\
    \   Event: presence\n   Require: eventlist\n   Content-Length: 0\n   8.   The\
    \ local RLS completes the NOTIFY transaction.  Note that, at\n        this point,\
    \ the Local RLS has new information to report to the\n        subscriber.  Whether\
    \ it chooses to report the information\n        immediately or spool it up for\
    \ later delivery is completely up\n        to the application.  For this example,\
    \ we assume that the RLS\n        will wait for a short period of time before\
    \ doing so, in order\n        to allow the subscriptions it sent out sufficient\
    \ time to\n        provide useful data.\n   Local RLS -> Presence Server in dallas.example.net\n\
    \   SIP/2.0 200 OK\n   Via: SIP/2.0/TCP pres.dallas.example.net;\n     branch=z9hG4bKfwpklPxmrW\n\
    \   From: <sip:ed@dallas.example.net>;tag=e45TmHTh\n   To: <sip:adam@vancouver.example.com>;tag=aM5icQu9\n\
    \   Call-ID: Ugwz5ARxNw@pres.vancouver.example.com\n   CSeq: 1002640632 NOTIFY\n\
    \   Contact: <sip:pres.vancouver.example.com>\n   Content-Length: 0\n   9.   The\
    \ Local RLS subscribes to the state of the other non-local\n        resource.\n\
    \   Local RLS -> RLS in stockholm.example.org\n   SUBSCRIBE sip:adam-friends@stockholm.example.org\
    \ SIP/2.0\n   Via: SIP/2.0/TCP pres.vancouver.example.com;\n     branch=z9hG4bKFSrAF8CZFL\n\
    \   Max-Forwards: 70\n   To: <sip:adam-friends@stockholm.example.org>\n   From:\
    \ <sip:adam@vancouver.example.com>;tag=a12eztNf\n   Call-ID: kBq5XhtZLN@pres.vancouver.example.com\n\
    \   CSeq: 980774491 SUBSCRIBE\n   Contact: <sip:pres.vancouver.example.com>\n\
    \   Identity: Tm90IGEgcmVhbCBzaWduYXR1cmUsIGVpdGhlci4gQ2VydGFp\n             bmx5IHlvdSBoYXZlIGJldHRlcgp0aGluZ3MgdG8gYmUgZG9p\n\
    \             bmcuIEhhdmUgeW91IGZpbmlzaGVkIHlvdXIgUkxTIHlldD8K\n   Identity-Info:\
    \ https://vancouver.example.com/cert\n   Event: presence\n   Expires: 3600\n \
    \  Supported: eventlist\n   Accept: application/pidf+xml\n   Accept: application/rlmi+xml\n\
    \   Accept: multipart/related\n   Accept: multipart/signed\n   Accept: application/pkcs7-mime\n\
    \   Content-Length: 0\n   10.  The RLS in stockholm.example.org completes the\
    \ SUBSCRIBE\n        transaction.  Note that authentication would normally take\
    \ place\n        at this point in the call flow.  This step is omitted for\n \
    \       brevity.\n   RLS in stockholm.example.org -> Local RLS\n   SIP/2.0 200\
    \ OK\n   Via: SIP/2.0/TCP pres.vancouver.example.com;\n     branch=z9hG4bKFSrAF8CZFL\n\
    \   To: <sip:adam-friends@stockholm.example.org>;tag=JenZ40P3\n   From: <sip:adam@vancouver.example.com>;tag=a12eztNf\n\
    \   Call-ID: kBq5XhtZLN@pres.vancouver.example.com\n   CSeq: 980774491 SUBSCRIBE\n\
    \   Contact: <sip:stockholm.example.org>\n   Expires: 3600\n   Content-Length:\
    \ 0\n   11.  In this example, we assume that the RLS in stockholm.example.org\n\
    \        is also an authority for presence information for the users in\n    \
    \    the \"stockholm.example.org\" domain.  The NOTIFY contains an RLMI\n    \
    \    document describing the contained buddy list, as well as\n        presence\
    \ information for those users.  In this particular case,\n        the RLS in stockholm.example.org\
    \ has chosen to sign [14] the\n        body of the NOTIFY message.  As described\
    \ in RFC 3851, signing\n        is performed by creating a multipart/signed document\
    \ that has\n        two parts.  The first part is the document to be signed (in\
    \ this\n        example, the multipart/related document that describes the list\n\
    \        resource states), while the second part is the actual signature.\n  \
    \ RLS in stockholm.example.org -> Local RLS\n   NOTIFY sip:pres.vancouver.example.com\
    \ SIP/2.0\n   Via: SIP/2.0/TCP pres.stockholm.example.org;\n     branch=z9hG4bKmGL1nyZfQI\n\
    \   Max-Forwards: 70\n   From: <sip:adam-friends@stockholm.example.org>;tag=JenZ40P3\n\
    \   To: <sip:adam@vancouver.example.com>;tag=a12eztNf\n   Call-ID: kBq5XhtZLN@pres.vancouver.example.com\n\
    \   CSeq: 294444656 NOTIFY\n   Contact: <sip:stockholm.example.org>\n   Event:\
    \ presence\n   Subscription-State: active;expires=3600\n   Require: eventlist\n\
    \   Content-Type: multipart/signed;\n       protocol=\"application/pkcs7-signature\"\
    ;\n       micalg=sha1;boundary=\"l3WMZaaL8NpQWGnQ4mlU\"\n   Content-Length: 2038\n\
    \   --l3WMZaaL8NpQWGnQ4mlU\n   Content-Transfer-Encoding: binary\n   Content-ID:\
    \ <ZPvJHL@stockholm.example.org>\n   Content-Type: multipart/related;type=\"application/rlmi+xml\"\
    ;\n       start=\"<Cvjpeo@stockholm.example.org>\";\n       boundary=\"tuLLl3lDyPZX0GMr2YOo\"\
    \n   --tuLLl3lDyPZX0GMr2YOo\n   Content-Transfer-Encoding: binary\n   Content-ID:\
    \ <Cvjpeo@stockholm.example.org>\n   Content-Type: application/rlmi+xml;charset=\"\
    UTF-8\"\n   <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n   <list xmlns=\"urn:ietf:params:xml:ns:rlmi\"\
    \n         uri=\"sip:adam-friends@stockholm.example.org\" version=\"1\"\n    \
    \     fullState=\"true\">\n     <name xml:lang=\"en\">Buddy List at COM</name>\n\
    \     <name xml:lang=\"de\">Liste der Freunde an COM</name>\n     <resource uri=\"\
    sip:joe@stockholm.example.org\">\n       <name>Joe Thomas</name>\n       <instance\
    \ id=\"1\" state=\"active\"\n                 cid=\"mrEakg@stockholm.example.org\"\
    />\n     </resource>\n     <resource uri=\"sip:mark@stockholm.example.org\">\n\
    \       <name>Mark Edwards</name>\n       <instance id=\"1\" state=\"active\"\n\
    \                 cid=\"KKMDmv@stockholm.example.org\"/>\n     </resource>\n \
    \  </list>\n   --tuLLl3lDyPZX0GMr2YOo\n   Content-Transfer-Encoding: binary\n\
    \   Content-ID: <mrEakg@stockholm.example.org>\n   Content-Type: application/pidf+xml;charset=\"\
    UTF-8\"\n   <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n   <presence xmlns=\"\
    urn:ietf:params:xml:ns:pidf\"\n       entity=\"sip:joe@stockholm.example.org\"\
    >\n     <tuple id=\"x823a4\">\n       <status>\n         <basic>open</basic>\n\
    \       </status>\n       <contact priority=\"1.0\">sip:joe@stockholm.example.org</contact>\n\
    \     </tuple>\n   </presence>\n   --tuLLl3lDyPZX0GMr2YOo\n   Content-Transfer-Encoding:\
    \ binary\n   Content-ID: <KKMDmv@stockholm.example.org>\n   Content-Type: application/pidf+xml;charset=\"\
    UTF-8\"\n   <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n   <presence xmlns=\"\
    urn:ietf:params:xml:ns:pidf\"\n       entity=\"sip:mark@stockholm.example.org\"\
    >\n     <tuple id=\"z98075\">\n       <status>\n         <basic>closed</basic>\n\
    \       </status>\n     </tuple>\n   </presence>\n   --tuLLl3lDyPZX0GMr2YOo--\n\
    \   --l3WMZaaL8NpQWGnQ4mlU\n   Content-Transfer-Encoding: binary\n   Content-ID:\
    \ <K9LB7k@stockholm.example.org>\n   Content-Type: application/pkcs7-signature\n\
    \   [PKCS #7 signature here]\n   --l3WMZaaL8NpQWGnQ4mlU--\n   12.  The Local RLS\
    \ completes the NOTIFY transaction.\n   Local RLS -> RLS in stockholm.example.org\n\
    \   SIP/2.0 200 OK\n   Via: SIP/2.0/TCP pres.stockholm.example.org;\n     branch=z9hG4bKmGL1nyZfQI\n\
    \   From: <sip:adam-friends@stockholm.example.org>;tag=JenZ40P3\n   To: <sip:adam@vancouver.example.com>;tag=a12eztNf\n\
    \   Call-ID: kBq5XhtZLN@pres.vancouver.example.com\n   CSeq: 294444656 NOTIFY\n\
    \   Contact: <sip:pres.vancouver.example.com>\n   Content-Length: 0\n   13.  At\
    \ this point, the Local RLS decides it has collected enough\n        additional\
    \ information to warrant sending a new notification to\n        the user.  Although\
    \ sending a full notification would be\n        perfectly acceptable, the RLS\
    \ decides to send a partial\n        notification instead.  The RLMI document\
    \ contains only\n        information for the updated resources, as indicated by\
    \ setting\n        the \"fullState\" parameter to \"false\".  To avoid corrupting\
    \ the\n        S/MIME signature on the data received from the RLS in\n       \
    \ stockholm.example.org, the local RLS copies the entire\n        multipart/signed\
    \ body as-is into the notification that it sends.\n   Local RLS -> Terminal\n\
    \   NOTIFY sip:terminal.vancouver.example.com SIP/2.0\n   Via: SIP/2.0/TCP pres.vancouver.example.com;\n\
    \     branch=z9hG4bK4EPlfSFQK1\n   Max-Forwards: 70\n   From: <sip:adam-buddies@pres.vancouver.example.com>;tag=zpNctbZq\n\
    \   To: <sip:adam@vancouver.example.com>;tag=ie4hbb8t\n   Call-ID: cdB34qLToC@terminal.vancouver.example.com\n\
    \   CSeq: 997935769 NOTIFY\n   Contact: <sip:pres.vancouver.example.com>\n   Event:\
    \ presence\n   Subscription-State: active;expires=7200\n   Require: eventlist\n\
    \   Content-Type: multipart/related;type=\"application/rlmi+xml\";\n       start=\"\
    <2BEI83@pres.vancouver.example.com>\";\n       boundary=\"TfZxoxgAvLqgj4wRWPDL\"\
    \n   Content-Length: 2862\n   --TfZxoxgAvLqgj4wRWPDL\n   Content-Transfer-Encoding:\
    \ binary\n   Content-ID: <2BEI83@pres.vancouver.example.com>\n   Content-Type:\
    \ application/rlmi+xml;charset=\"UTF-8\"\n   <?xml version=\"1.0\" encoding=\"\
    UTF-8\"?>\n   <list xmlns=\"urn:ietf:params:xml:ns:rlmi\"\n         uri=\"sip:adam-friends@pres.vancouver.example.com\"\
    \ version=\"2\"\n         fullState=\"false\">\n     <name xml:lang=\"en\">Buddy\
    \ List at COM</name>\n     <name xml:lang=\"de\">Liste der Freunde an COM</name>\n\
    \     <resource uri=\"sip:ed@dallas.example.net\">\n       <name>Ed at NET</name>\n\
    \       <instance id=\"sdlkmeopdf\" state=\"pending\"/>\n     </resource>\n  \
    \   <resource uri=\"sip:adam-friends@stockholm.example.org\">\n       <name xml:lang=\"\
    en\">My Friends at ORG</name>\n       <name xml:lang=\"de\">Meine Freunde an ORG</name>\n\
    \       <instance id=\"cmpqweitlp\" state=\"active\"\n                 cid=\"\
    1KQhyE@pres.vancouver.example.com\"/>\n     </resource>\n   </list>\n   --TfZxoxgAvLqgj4wRWPDL\n\
    \   Content-Transfer-Encoding: binary\n   Content-ID: <1KQhyE@pres.vancouver.example.com>\n\
    \   Content-Type: multipart/signed;\n       protocol=\"application/pkcs7-signature\"\
    ;\n       micalg=sha1;boundary=\"l3WMZaaL8NpQWGnQ4mlU\"\n   --l3WMZaaL8NpQWGnQ4mlU\n\
    \   Content-Transfer-Encoding: binary\n   Content-ID: <ZPvJHL@stockholm.example.org>\n\
    \   Content-Type: multipart/related;type=\"application/rlmi+xml\";\n       start=\"\
    <Cvjpeo@stockholm.example.org>\";\n       boundary=\"tuLLl3lDyPZX0GMr2YOo\"\n\
    \   --tuLLl3lDyPZX0GMr2YOo\n   Content-Transfer-Encoding: binary\n   Content-ID:\
    \ <Cvjpeo@stockholm.example.org>\n   Content-Type: application/rlmi+xml;charset=\"\
    UTF-8\"\n   <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n   <list xmlns=\"urn:ietf:params:xml:ns:rlmi\"\
    \n         uri=\"sip:adam-friends@stockholm.example.org\" version=\"1\"\n    \
    \     fullState=\"true\">\n     <name xml:lang=\"en\">Buddy List at ORG</name>\n\
    \     <name xml:lang=\"de\">Liste der Freunde an ORG</name>\n     <resource uri=\"\
    sip:joe@stockholm.example.org\">\n       <name>Joe Thomas</name>\n       <instance\
    \ id=\"1\" state=\"active\"\n                 cid=\"mrEakg@stockholm.example.org\"\
    />\n     </resource>\n     <resource uri=\"sip:mark@stockholm.example.org\">\n\
    \       <name>Mark Edwards</name>\n       <instance id=\"1\" state=\"active\"\n\
    \                 cid=\"KKMDmv@stockholm.example.org\"/>\n     </resource>\n \
    \  </list>\n   --tuLLl3lDyPZX0GMr2YOo\n   Content-Transfer-Encoding: binary\n\
    \   Content-ID: <mrEakg@stockholm.example.org>\n   Content-Type: application/pidf+xml;charset=\"\
    UTF-8\"\n   <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n   <presence xmlns=\"\
    urn:ietf:params:xml:ns:pidf\"\n       entity=\"sip:joe@stockholm.example.org\"\
    >\n     <tuple id=\"x823a4\">\n       <status>\n         <basic>open</basic>\n\
    \       </status>\n       <contact priority=\"1.0\">sip:joe@stockholm.example.org</contact>\n\
    \     </tuple>\n   </presence>\n   --tuLLl3lDyPZX0GMr2YOo\n   Content-Transfer-Encoding:\
    \ binary\n   Content-ID: <KKMDmv@stockholm.example.org>\n   Content-Type: application/pidf+xml;charset=\"\
    UTF-8\"\n   <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n   <presence xmlns=\"\
    urn:ietf:params:xml:ns:pidf\"\n       entity=\"sip:mark@stockholm.example.org\"\
    >\n     <tuple id=\"z98075\">\n       <status>\n         <basic>closed</basic>\n\
    \       </status>\n     </tuple>\n   </presence>\n   --tuLLl3lDyPZX0GMr2YOo--\n\
    \   --l3WMZaaL8NpQWGnQ4mlU\n   Content-Transfer-Encoding: binary\n   Content-ID:\
    \ <K9LB7k@stockholm.example.org>\n   Content-Type: application/pkcs7-signature\n\
    \   [PKCS #7 signature here]\n   --l3WMZaaL8NpQWGnQ4mlU--\n   --TfZxoxgAvLqgj4wRWPDL--\n\
    \   14.  The terminal completes the NOTIFY transaction.\n   Terminal -> Local\
    \ RLS\n   SIP/2.0 200 OK\n   Via: SIP/2.0/TCP pres.vancouver.example.com;\n  \
    \   branch=z9hG4bK4EPlfSFQK1\n   From: <sip:adam-buddies@pres.vancouver.example.com>;tag=zpNctbZq\n\
    \   To: <sip:adam@vancouver.example.com>;tag=ie4hbb8t\n   Call-ID: cdB34qLToC@terminal.vancouver.example.com\n\
    \   CSeq: 997935769 NOTIFY\n   Contact: <sip:terminal.vancouver.example.com>\n\
    \   Content-Length: 0\n"
- title: 7.  Security Considerations
  contents:
  - "7.  Security Considerations\n   Note that the mechanisms for obtaining state\
    \ information for\n   resources in a list are generally left to the RLS implementor.\
    \  Some\n   of the security issues below are specific to the circumstance in\n\
    \   which a SIP back-end subscription is used for such a purpose.  Non-\n   SIP\
    \ mechanisms for obtaining state information of resources in a list\n   will typically\
    \ have their own security issues associated with doing\n   so; however, exhaustively\
    \ enumerating such access methods is not\n   possible in this document.  Implementors\
    \ using such mechanisms must\n   analyze their chosen access methods for relevant\
    \ security issues.\n"
- title: 7.1.  Authentication
  contents:
  - "7.1.  Authentication\n   If back-end subscriptions are required to retrieve resource\
    \ state\n   information, the end user is no longer the direct subscriber to the\n\
    \   state of the resource.  This means that direct authentication of the\n   user\
    \ is no longer possible.\n"
- title: 7.1.1.  RLS and Subscriber in the Same Domain
  contents:
  - "7.1.1.  RLS and Subscriber in the Same Domain\n   It is expected that the most\
    \ common deployment of RLSes entails that\n   the subscribers to the RLS will\
    \ be in the same domain as the RLS.\n   When this is the case, the RLS then has\
    \ the ability to act as an\n   authentication service.  The role of authentication\
    \ service is\n   defined in \"Enhancements for Authenticated Identity Management\
    \ in the\n   Session Initiation Protocol (SIP)\" [7].\n   At a high level, under\
    \ this system, the RLS authenticates the\n   subscriber and then includes an \"\
    Identity\" header field in all of the\n   back-end subscriptions performed on\
    \ behalf of that authenticated\n   user.  This \"Identity\" header field cryptographically\
    \ asserts that\n   the request has been authorized to be made on behalf of the\
    \ user\n   indicated in the \"From\" header field.\n   Because the ability to\
    \ authenticate requests is central to the proper\n   functioning of the network,\
    \ any RLS that uses SIP back-end\n   subscriptions to acquire information about\
    \ the resources in a\n   resource list MUST be able to act as an authentication\
    \ service as\n   defined in [7], provided that local administrative policy allows\
    \ it\n   to do so.\n      In other words, all RLS implementations that support\
    \ back-end SIP\n      subscriptions also must include the ability to be configured\
    \ to\n      act as an authentication service.  Whether any given administrator\n\
    \      chooses to activate such a feature is completely up to them.  Of\n    \
    \  course, lacking the ability to act as an identity server, any RLS\n      so\
    \ configured will behave as described in the following section,\n      since it\
    \ is effectively acting as if it were in a different domain\n      than the user.\n"
- title: 7.1.2.  RLS and Subscriber in Different Domains
  contents:
  - "7.1.2.  RLS and Subscriber in Different Domains\n   In the general case, the\
    \ SIP Authenticated Identity extensions do not\n   provide a means for the RLS\
    \ to securely assert that subscriptions are\n   being performed on the end user's\
    \ behalf.  Specifically, when the\n   subscriber and the RLS are in different\
    \ domains, the RLS will have no\n   means by which it can vouch for the user's\
    \ identity.  Mechanisms by\n   which back-end subscriptions in such circumstances\
    \ can be\n   authenticated are left for future study.\n   Until such general solutions\
    \ are developed, RLSes that are in a\n   different domain than the subscriber\
    \ on whose behalf they are\n   creating back-end subscriptions SHOULD subscribe\
    \ to the resources\n   using their own identity.  By doing so, the RLS will generally\
    \ obtain\n   only the resource information that is made publicly available.\n\
    \   Absent such general solutions, implementations of subscriber user\n   agents\
    \ MAY attempt direct subscriptions to resources in the resource\n   list when\
    \ subscribing to an RLS outside of their domain (either\n   directly or by way\
    \ of another resource list subscription).  The\n   resources to be subscribed\
    \ to will be those indicated in the \"uri\"\n   attribute of the <resource> elements\
    \ present in the RLMI document\n   returned by the RLS.  Directly subscribing\
    \ to the resources allows\n   proper authentication of the user to take place,\
    \ which will generally\n   authorize them to receive more complete state information.\n\
    \   Implementations that choose to perform such direct subscriptions\n   SHOULD\
    \ use the data retrieved instead of any information about the\n   resource obtained\
    \ via the list subscription.\n"
- title: 7.2.  Risks of Improper Aggregation
  contents:
  - "7.2.  Risks of Improper Aggregation\n   A resource list server typically serves\
    \ information to multiple\n   subscribers at once.  In many cases, resources may\
    \ be present in\n   several lists; additionally, it is quite possible that resource\
    \ list\n   servers will have two users subscribe to the same list.\n   In these\
    \ cases, misguided RLS implementations may attempt to minimize\n   network load\
    \ by maintaining only one back-end subscription to a\n   resource in a list and\
    \ presenting the result of such a subscription\n   to more than one user.  Of\
    \ course, doing so circumvents any\n   authorization policy that the notifier\
    \ for the resource maintains.\n   Keep in mind that authorization is often much\
    \ more than a simple\n   binary \"allowed/not allowed\" decision; resources may\
    \ render very\n   different -- and even conflicting -- resource states, depending\
    \ on\n   the identity of the subscribing user.\n   To prevent the transmission\
    \ of event information to anyone other than\n   the intended recipient, implementations\
    \ MUST NOT present the result\n   of one back-end subscription to more than one\
    \ user, unless:\n   a.  The RLS has adequate access to the complete authorization\
    \ policy\n       associated with the resource to which the back-end subscription\n\
    \       has been made, AND\n   b.  The RLS can and has determined that presenting\
    \ the information to\n       more than one user does not violate such policy.\n\
    \   Note that this is a very difficult problem to solve correctly.  Even\n   in\
    \ the cases where such access is believed possible, this mode of\n   operation\
    \ is NOT RECOMMENDED.\n"
- title: 7.3.  Signing and Sealing
  contents:
  - "7.3.  Signing and Sealing\n   Implementors should keep in mind that any section\
    \ of the MIME body\n   may be signed and/or encrypted as necessary.  Resource\
    \ List Servers\n   should take care not to modify any MIME bodies they receive\
    \ from any\n   back-end subscriptions, and should not generally rely on being\
    \ able\n   to read them.\n   In order to facilitate security, resource list servers\
    \ SHOULD pass\n   along indication for support of \"multipart/signed\" and \"\
    application/\n   pkcs7-mime\" content types to any SIP back-end subscriptions,\
    \ if the\n   subscriber includes them in the initial SUBSCRIBE message.  Not doing\n\
    \   so may actually result in resources refusing to divulge state (if\n   notifier\
    \ policy requires encryption, but the RLS fails to convey\n   support), or subscribers\
    \ discarding valid state (if subscriber policy\n   requires a signature, but the\
    \ RLS fails to convey support).\n   Note that actual implementation of encryption\
    \ and signing by the RLS\n   is not necessary to be able to pass through signed\
    \ and/or encrypted\n   bodies.\n"
- title: 7.4.  Infinite Loops
  contents:
  - "7.4.  Infinite Loops\n   One risk introduced by the ability to nest resource\
    \ lists is the\n   possibility of creating lists that ultimately contain themselves\
    \ as a\n   sub-list.  Detection and handling of such a case is trivial when the\n\
    \   RLS services all the virtual subscriptions internally.  When back-end\n  \
    \ subscriptions are created to service virtual subscriptions, however,\n   detection\
    \ of such situations becomes a more difficult problem.\n   Implementors of RLSes\
    \ that create back-end subscriptions MUST\n   implement safeguards to prevent\
    \ such nestings from creating an\n   infinite loop of subscriptions.  Typically,\
    \ such mechanisms will\n   require support in the back-end subscription protocol.\
    \  In\n   particular, applying filters to the back-end subscriptions can be an\n\
    \   effective way to preclude such problems.\n"
- title: 8.  IANA Considerations
  contents:
  - '8.  IANA Considerations

    '
- title: '8.1.  New SIP Option Tag: eventlist'
  contents:
  - "8.1.  New SIP Option Tag: eventlist\n   This section defines a new option tag\
    \ for the registry established by\n   Section 27.1 of RFC 3261[1].\n   Option\
    \ Tag Name:  eventlist\n   Description:  Extension to allow subscriptions to lists\
    \ of resources.\n   Published specification:  RFC 4662\n"
- title: 8.2.  New MIME type for Resource List Meta-Information
  contents:
  - "8.2.  New MIME type for Resource List Meta-Information\n   MIME Media Type Name:\
    \  application\n   MIME subtype name:  rlmi+xml\n   Required parameters:  None\n\
    \   Optional parameters:  charset\n      See RFC 3023 [12] for a discussion of\
    \ the charset parameter on\n      XML-derived MIME types.  Since this MIME type\
    \ is used exclusively\n      in SIP, the use of UTF-8 encoding is strongly encouraged.\n\
    \   Encoding considerations:  8-bit text\n   Security considerations:  Security\
    \ considerations specific to uses of\n      this MIME type are discussed in RFC\
    \ 4662.  RFC 1874 [11] and RFC\n      3023 [12] discuss security issues common\
    \ to all uses of XML.\n   Interoperability considerations:  The use of this MIME\
    \ body is\n      intended to be generally interoperable.  No unique considerations\n\
    \      have been identified.\n   Published specification:  RFC 4662\n   Applications\
    \ that use this media type:  This media type is used to\n      convey meta-information\
    \ for the state of lists of resources within\n      a Session Initiation Protocol\
    \ (SIP) subscription.\n   Additional information:\n      Magic Number(s):  None.\n\
    \      File Extension(s):  None.\n      Macintosh File Type Code(s):  None.\n\
    \      Object Identifier(s) or OID(s):  None.\n   Intended usage:  Limited Use\n\
    \   Other Information/General Comment:  None.\n   Person to contact for further\
    \ information:\n      Name:  Adam Roach\n      E-Mail:  adam@estacado.net\n  \
    \    Author/Change Controller:  The specification of this MIME type is\n     \
    \    a work product of the SIMPLE working group and was authored by\n        \
    \ Adam Roach, Jonathan Rosenberg, and Ben Campbell.  The IETF has\n         change\
    \ control over its specification.\n"
- title: 8.3.  URN Sub-Namespace
  contents:
  - "8.3.  URN Sub-Namespace\n   URI:  urn:ietf:params:xml:ns:rlmi\n   Description:\
    \  This is the XML namespace URI for XML elements defined\n      by RFC 4662 to\
    \ describe information about subscriptions when such\n      subscriptions are\
    \ aggregated within a single SIP subscription.  It\n      is used in the application/rlmi+xml\
    \ body type.\n   Registrant Contact:\n      Name:  Adam Roach\n      E-Mail: \
    \ adam@estacado.net\n      Author/Change Controller:  The specification of this\
    \ MIME type is\n         a work product of the SIMPLE working group and was authored\
    \ by\n         Adam Roach, Jonathan Rosenberg, and Ben Campbell.  The IETF has\n\
    \         change control over its specification.\n   XML:\n      BEGIN\n     \
    \   <?xml version=\"1.0\"?>\n        <!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML\
    \ Basic 1.0//EN\"\n            \"http://www.w3.org/TR/xhtml-basic/xhtml-basic10.dtd\"\
    >\n        <html xmlns=\"http://www.w3.org/1999/xhtml\">\n        <head>\n   \
    \       <meta http-equiv=\"content-type\"\n             content=\"text/html;charset=utf-8\"\
    />\n          <title>Namespace for SIP Event Resource List\n                 Meta-Information</title>\n\
    \        </head>\n        <body>\n          <h1>Namespace for SIP Event Resource\
    \ List\n              Meta-Information</h1>\n          <h2>application/rlmi+xml</h2>\n\
    \          <p>See <a href=\"[http://www.rfc-editor.org/rfc/rfc4662.txt]\">\n \
    \            RFC4662</a>.</p>\n        </body>\n        </html>\n      END\n"
- title: 9.  Acknowledgements
  contents:
  - "9.  Acknowledgements\n   Thanks to Sean Olson for a review of and corrections\
    \ to the usage of\n   XML in this protocol.\n   Thanks also to Hisham Khartabil,\
    \ Paul Kyzivat, Keith Drage, and\n   Robert Sparks for their careful reviews of\
    \ and comments on this\n   document.\n"
- title: 10.  References
  contents:
  - '10.  References

    '
- title: 10.1.  Normative References
  contents:
  - "10.1.  Normative References\n   [1]  Rosenberg, J., Schulzrinne, H., Camarillo,\
    \ G., Johnston, A.,\n        Peterson, J., Sparks, R., Handley, M., and E. Schooler,\
    \ \"SIP:\n        Session Initiation Protocol\", RFC 3261, June 2002.\n   [2]\
    \  Roach, A. B., \"Session Initiation Protocol (SIP)-Specific Event\n        Notification\"\
    , RFC 3265, June 2002.\n   [3]   Freed, N. and N. Borenstein, \"Multipurpose Internet\
    \ Mail\n        Extensions (MIME) Part One: Format of Internet Message Bodies\"\
    ,\n        RFC 2045, November 1996.\n   [4]  Levinson, E., \"The MIME Multipart/Related\
    \ Content-type\", RFC\n        2387, August 1998.\n   [5]  Bradner, S., \"Key\
    \ words for use in RFCs to Indicate Requirement\n        Levels\", BCP 14, RFC\
    \ 2119, March 1997.\n   [6]  Alvestrand, H., \"Tags for the Identification of\
    \ Languages\", BCP\n        47, RFC 3066, January 2001.\n   [7]  Peterson, J.\
    \ and C. Jennings, \"Enhancements for Authenticated\n        Identity Management\
    \ in the Session Initiation Protocol (SIP)\",\n        RFC 4474, August 2006.\n"
- title: 10.2.  Informative References
  contents:
  - "10.2.  Informative References\n   [8]   Rosenberg, J., \"A Presence Event Package\
    \ for the Session\n         Initiation Protocol (SIP)\", RFC 3856, August 2004.\n\
    \   [9]   Burger, E., \"A Mechanism for Content Indirection in Session\n     \
    \    Initiation Protocol (SIP) Messages\", RFC 4483, May 2006.\n   [10]  Peterson,\
    \ J., \"Common Profile for Presence (CPP)\", RFC 3859,\n         August 2004.\n\
    \   [11]  Levinson, E., \"SGML Media Types\", RFC 1874, December 1995.\n   [12]\
    \  Murata, M., St. Laurent, S., and D. Kohn, \"XML Media Types\",\n         RFC\
    \ 3023, January 2001.\n   [13]  Ramsdell, B., \"Secure/Multipurpose Internet Mail\
    \ Extensions\n         (S/MIME) Version 3.1 Message Specification\", RFC 3851,\
    \ July\n         2004.\n   [14]  Galvin, J., Murphy, S., Crocker, S., and N. Freed,\
    \ \"Security\n         Multiparts for MIME: Multipart/Signed and Multipart/Encrypted\"\
    ,\n         RFC 1847, October 1995.\n   [15]  Rescorla, E., \"HTTP Over TLS\"\
    , RFC 2818, May 2000.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Adam Roach\n   Estacado Systems\n   US\n   EMail: adam@estacado.net\n\
    \   Ben Campbell\n   Estacado Systems\n   US\n   EMail: ben@estacado.net\n   Jonathan\
    \ Rosenberg\n   Cisco Systems\n   600 Lanidex Plaza\n   Parsippany, NJ  07054-2711\n\
    \   US\n   EMail: jdrosen@cisco.com\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2006).\n   This\
    \ document is subject to the rights, licenses and restrictions\n   contained in\
    \ BCP 78, and except as set forth therein, the authors\n   retain all their rights.\n\
    \   This document and the information contained herein are provided on an\n  \
    \ \"AS IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n  \
    \ OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY AND THE INTERNET\n   ENGINEERING\
    \ TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS OR IMPLIED,\n   INCLUDING BUT NOT\
    \ LIMITED TO ANY WARRANTY THAT THE USE OF THE\n   INFORMATION HEREIN WILL NOT\
    \ INFRINGE ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY OR FITNESS\
    \ FOR A PARTICULAR PURPOSE.\n"
- title: Intellectual Property
  contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or\
    \ scope of any\n   Intellectual Property Rights or other rights that might be\
    \ claimed to\n   pertain to the implementation or use of the technology described\
    \ in\n   this document or the extent to which any license under such rights\n\
    \   might or might not be available; nor does it represent that it has\n   made\
    \ any independent effort to identify any such rights.  Information\n   on the\
    \ procedures with respect to rights in RFC documents can be\n   found in BCP 78\
    \ and BCP 79.\n   Copies of IPR disclosures made to the IETF Secretariat and any\n\
    \   assurances of licenses to be made available, or the result of an\n   attempt\
    \ made to obtain a general license or permission for the use of\n   such proprietary\
    \ rights by implementers or users of this\n   specification can be obtained from\
    \ the IETF on-line IPR repository at\n   http://www.ietf.org/ipr.\n   The IETF\
    \ invites any interested party to bring to its attention any\n   copyrights, patents\
    \ or patent applications, or other proprietary\n   rights that may cover technology\
    \ that may be required to implement\n   this standard.  Please address the information\
    \ to the IETF at\n   ietf-ipr@ietf.org.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is provided by the IETF\n\
    \   Administrative Support Activity (IASA).\n"
