- title: __initial_text__
  contents:
  - " DCCP-UDP: A Datagram Congestion Control Protocol UDP Encapsulation for\n   \
    \                          NAT Traversal\n"
- title: Abstract
  contents:
  - "Abstract\n   This document specifies an alternative encapsulation of the Datagram\n\
    \   Congestion Control Protocol (DCCP), referred to as DCCP-UDP.  This\n   encapsulation\
    \ allows DCCP to be carried through the current\n   generation of Network Address\
    \ Translation (NAT) middleboxes without\n   modification of those middleboxes.\
    \  This document also updates the\n   Session Description Protocol (SDP) information\
    \ for DCCP defined in\n   RFC 5762.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This\
    \ document is a product of the Internet Engineering Task Force\n   (IETF).  It\
    \ represents the consensus of the IETF community.  It has\n   received public\
    \ review and has been approved for publication by the\n   Internet Engineering\
    \ Steering Group (IESG).  Further information on\n   Internet Standards is available\
    \ in Section 2 of RFC 5741.\n   Information about the current status of this document,\
    \ any errata,\n   and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc6773.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2012 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction . . . . . . . . . . . . . . . . . . .\
    \ . . . . . .  3\n   2.  Terminology  . . . . . . . . . . . . . . . . . . . .\
    \ . . . . .  4\n   3.  DCCP-UDP . . . . . . . . . . . . . . . . . . . . . . .\
    \ . . . .  4\n     3.1.  The UDP Header . . . . . . . . . . . . . . . . . . .\
    \ . . .  5\n     3.2.  The DCCP Generic Header  . . . . . . . . . . . . . . .\
    \ . .  5\n     3.3.  DCCP-UDP Checksum Procedures . . . . . . . . . . . . . .\
    \ .  6\n       3.3.1.  Partial Checksums and the Minimum Checksum\n          \
    \     Coverage Feature . . . . . . . . . . . . . . . . . . .  7\n     3.4.  Network-Layer\
    \ Options  . . . . . . . . . . . . . . . . . .  8\n     3.5.  Explicit Congestion\
    \ Notification . . . . . . . . . . . . .  8\n     3.6.  ICMP Handling for Messages\
    \ Relating to DCCP-UDP  . . . . .  8\n     3.7.  Path Maximum Transmission Unit\
    \ Discovery . . . . . . . . .  9\n     3.8.  Usage of the UDP Port by DCCP-UDP\
    \  . . . . . . . . . . . .  9\n     3.9.  Service Codes and the DCCP Port Registry\
    \ . . . . . . . . . 11\n   4.  DCCP-UDP and Higher-Layer Protocols  . . . . .\
    \ . . . . . . . . 11\n     5.1.  Protocol Identification  . . . . . . . . . .\
    \ . . . . . . . 12\n     5.2.  Signalling Encapsulated DCCP Ports . . . . . .\
    \ . . . . . . 13\n     5.3.  Connection Management  . . . . . . . . . . . . .\
    \ . . . . . 14\n     5.4.  Negotiating the DCCP-UDP Encapsulation versus Native\n\
    \           DCCP . . . . . . . . . . . . . . . . . . . . . . . . . . . 14\n  \
    \   5.5.  Example of SDP Use . . . . . . . . . . . . . . . . . . . . 15\n   6.\
    \  Security Considerations  . . . . . . . . . . . . . . . . . . . 16\n   7.  IANA\
    \ Considerations  . . . . . . . . . . . . . . . . . . . . . 17\n     7.1.  UDP\
    \ Port Allocation  . . . . . . . . . . . . . . . . . . . 17\n     7.2.  DCCP Reset\
    \ . . . . . . . . . . . . . . . . . . . . . . . . 17\n     7.3.  SDP Attribute\
    \ Allocation . . . . . . . . . . . . . . . . . 17\n   8.  Acknowledgments  . .\
    \ . . . . . . . . . . . . . . . . . . . . . 18\n   9.  References . . . . . .\
    \ . . . . . . . . . . . . . . . . . . . . 18\n     9.1.  Normative References\
    \ . . . . . . . . . . . . . . . . . . . 18\n     9.2.  Informative References\
    \ . . . . . . . . . . . . . . . . . . 18\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   The Datagram Congestion Control Protocol (DCCP) [RFC4340]\
    \ is a\n   transport-layer protocol that provides upper layers with the ability\n\
    \   to use non-reliable congestion-controlled flows.  The current\n   specification\
    \ for DCCP [RFC4340] specifies a direct native\n   encapsulation in IPv4 or IPv6\
    \ packets.\n   DCCP support has been specified for devices that use Network Address\n\
    \   Translation (NAT) or Network Address and Port Translation (NAPT)\n   [RFC5597].\
    \  However, there is a significant installed base of NAT/\n   NAPT devices that\
    \ do not support [RFC5597].  It is therefore useful\n   to have an encapsulation\
    \ for DCCP that is compatible with this\n   installed base of NAT/NAPT devices\
    \ that support [RFC4787] but do not\n   support [RFC5597].  This document specifies\
    \ that encapsulation, which\n   is referred to as DCCP-UDP.  For convenience,\
    \ the standard\n   encapsulation for DCCP [RFC4340] (including [RFC5596] as required)\
    \ is\n   referred to as DCCP-STD.\n   The encapsulation described in this document\
    \ may also be used as a\n   transition mechanism to enable support for DCCP in\
    \ devices that\n   support UDP but do not yet natively support DCCP.  This also\
    \ allows\n   the DCCP transport to be implemented within an application using\n\
    \   DCCP-UDP.\n   This document also updates the SDP specification for DCCP [RFC5762]\n\
    \   to convey the encapsulation type.  In this respect only, it updates\n   the\
    \ method in [RFC5762].\n   The DCCP-UDP encapsulation specified in this document\
    \ supports all of\n   the features contained in DCCP-STD, but with limited functionality\n\
    \   for partial checksums.\n   Network optimisations for DCCP-STP and UDP may\
    \ need to be updated to\n   allow these optimisations to take advantage of DCCP-UDP.\n\
    \   Encapsulation with an additional UDP protocol header can complicate\n   or\
    \ prevent inspection of DCCP header fields by equipment along the\n   network\
    \ path in the case where multiple DCCP connections share the\n   same UDP 4-tuple,\
    \ for example, routers that wish to identify DCCP\n   ports to perform Equal-Cost\
    \ Multi-Path (ECMP) routing, network\n   devices that wish to inspect DCCP ports\
    \ to inform algorithms for\n   sharing the network load across multiple links,\
    \ firewalls that wish\n   to inspect DCCP ports and service codes to inform algorithms\
    \ that\n   implement access rules, media gateways that inspect SDP information\n\
    \   to derive characteristics of the transport and session, etc.\n"
- title: 2.  Terminology
  contents:
  - "2.  Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\"\
    , \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and\
    \ \"OPTIONAL\" in this\n   document are to be interpreted as described in [RFC2119].\n"
- title: 3.  DCCP-UDP
  contents:
  - "3.  DCCP-UDP\n   The basic approach is to insert a UDP [RFC0768] header between\
    \ the IP\n   header and the DCCP packet.  Note that this is not a tunneling\n\
    \   approach.  The IP addresses of the communicating end systems are\n   carried\
    \ in the IP header.  The method does not embed additional IP\n   addresses.\n\
    \   The method is designed to support use when these addresses are\n   modified\
    \ by a device that implements NAT/NAPT.  A NAT translates the\n   IP addresses,\
    \ which impacts the transport-layer checksum.  A NAPT\n   device may also translate\
    \ the port values (usually the source port).\n   In both cases, the outer transport\
    \ header that includes these values\n   would need to be updated by the NAT/NAPT.\n\
    \   A device offering or using DCCP services via DCCP-UDP encapsulation\n   listens\
    \ on a UDP port (default port, 6511) or may bind to a specified\n   port utilising\
    \ out-of-band signalling, such as the Session\n   Description Protocol (SDP).\
    \  The DCCP-UDP server accepts incoming\n   packets over the UDP transport and\
    \ passes the received packets to the\n   DCCP protocol module, after removing\
    \ the UDP encapsulation.\n   A DCCP implementation endpoint may simultaneously\
    \ provide services\n   over any or all combinations of DCCP-STD and/or DCCP-UDP\n\
    \   encapsulations with IPv4 and/or IPv6.\n   The basic format of a DCCP-UDP packet\
    \ is:\n    +-----------------------------------+\n    |     IP Header (IPv4 or\
    \ IPv6)      |  Variable length\n    +-----------------------------------+\n \
    \   |            UDP Header             |  8 bytes\n    +-----------------------------------+\n\
    \    |       DCCP Generic Header         |  12 or 16 bytes\n    +-----------------------------------+\n\
    \    | Additional (type-specific) Fields |  Variable length (could be 0)\n   \
    \ +-----------------------------------+\n    |           DCCP Options        \
    \    |  Variable length (could be 0)\n    +-----------------------------------+\n\
    \    |      Application Data Area        |  Variable length (could be 0)\n   \
    \ +-----------------------------------+\n   Section 3.8 describes usage of UDP\
    \ ports.  This includes\n   implementation of a DCCP-UDP encapsulation service\
    \ as a daemon that\n   listens on a well-known port, allowing multiplexing of\
    \ different DCCP\n   applications over the same port.\n"
- title: 3.1.  The UDP Header
  contents:
  - "3.1.  The UDP Header\n   The format of the UDP header is specified in [RFC0768]:\n\
    \       0                   1                   2                   3\n      \
    \ 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |          Source Port          |           Dest Port           |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \             Length            |           Checksum            |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   For DCCP-UDP, the fields are interpreted as follows:\n   Source and Dest(ination)\
    \ Ports: 16 bits each\n      These fields identify the UDP ports on which the\
    \ source and\n      destination (respectively) of the packet are listening for\n\
    \      incoming DCCP-UDP packets.  The UDP port values do not identify\n     \
    \ the DCCP source and destination ports.\n   Length: 16 bits\n      This field\
    \ is the length of the UDP datagram, including the UDP\n      header and the payload\
    \ (for DCCP-UDP, the payload is a DCCP-UDP\n      datagram).\n   Checksum: 16\
    \ bits\n      This field is the Internet checksum of a network-layer\n      pseudoheader\
    \ and Length bytes of the UDP packet [RFC0768].  The\n      UDP checksum MUST\
    \ NOT be zero for a UDP packet that carries DCCP-\n      UDP.\n"
- title: 3.2.  The DCCP Generic Header
  contents:
  - "3.2.  The DCCP Generic Header\n   The DCCP Generic Header [RFC4340] takes two\
    \ forms, one with long\n   sequence numbers (48 bits) and the other with short\
    \ sequence numbers\n   (24 bits).\n       0                   1              \
    \     2                   3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0\
    \ 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |          Source Port          |           Dest Port           |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \  Data Offset  | CCVal | CsCov |           Checksum            |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |     |       |X|               |                               .\n   \
    \   | Res | Type  |=|   Reserved    |  Sequence Number (high bits)  .\n      |\
    \     |       |1|               |                               .\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                  Sequence Number (low bits)                   |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      \
    \ The Generic DCCP Header with Long Sequence Numbers [RFC4340]\n       0     \
    \              1                   2                   3\n       0 1 2 3 4 5 6\
    \ 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |          Source Port          |           Dest Port           |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \  Data Offset  | CCVal | CsCov |           Checksum            |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |     |       |X|                                               |\n   \
    \   | Res | Type  |=|   Sequence Number (low bits)                  |\n      |\
    \     |       |0|                                               |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \       The Generic DCCP Header with Short Sequence Numbers [RFC4340]\n   All\
    \ generic header fields, except for the Checksum field, have the\n   meaning specified\
    \ in [RFC4340], updated by [RFC5596].\n   Section 3.8 describes how a DCCP-UDP\
    \ implementation treats UDP and\n   DCCP ports.\n"
- title: 3.3.  DCCP-UDP Checksum Procedures
  contents:
  - "3.3.  DCCP-UDP Checksum Procedures\n   DCCP-UDP employs a checksum at the UDP\
    \ level and eliminates the use\n   of the DCCP checksum.  This approach was chosen\
    \ to enable use of\n   current NAT/NATP traversal methods developed for UDP. \
    \ Such methods\n   will generally be unaware whether DCCP is being encapsulated\
    \ and\n   hence do not update the inner checksum in the DCCP header.  Standard\n\
    \   DCCP requires protection of the DCCP header fields; this justifies\n   any\
    \ processing overhead incurred from calculating the UDP checksum.\n   In addition,\
    \ UDP NAT traversal does not support partial checksums.\n   Although this is still\
    \ permitted end-to-end in the encapsulated DCCP\n   datagram, links along the\
    \ path will treat these as UDP packets and\n   can not enable special partial\
    \ checksum processing.\n   DCCP-UDP does not update or modify the operation of\
    \ UDP.  The UDP\n   transport protocol is used in the following way:\n   For DCCP-UDP,\
    \ the function of the DCCP Checksum field is performed by\n   the UDP Checksum\
    \ field.  On transmission, the DCCP Checksum field\n   SHOULD be set to zero.\
    \  On receipt, the DCCP Checksum field MUST be\n   ignored.\n   The UDP checksum\
    \ MUST NOT be zero for a UDP packet that is sent using\n   DCCP-UDP.  If the received\
    \ UDP Checksum field is zero, the packet\n   MUST be dropped.\n   If the UDP Length\
    \ field of a received packet is less than 20 (the UDP\n   header length and minimum\
    \ DCCP-UDP header length), the packet MUST be\n   dropped.\n   If the UDP Checksum\
    \ field, computed using standard UDP methods, is\n   invalid, the received packet\
    \ MUST be dropped.\n   If the UDP Length field in a received packet is less than\
    \ the length\n   of the UDP header plus the entire DCCP-UDP header (including\
    \ the\n   generic header and type-specific fields and options, if present) or\n\
    \   if the UDP Length field is greater than the length of the packet from\n  \
    \ the beginning of the UDP header to the end of the packet, the packet\n   MUST\
    \ be dropped.\n"
- title: 3.3.1.  Partial Checksums and the Minimum Checksum Coverage Feature
  contents:
  - "3.3.1.  Partial Checksums and the Minimum Checksum Coverage Feature\n   This\
    \ document requires the UDP checksum to be enabled when using\n   DCCP-UDP.  This\
    \ checksum provides coverage of the entire encapsulated\n   DCCP datagram.\n \
    \  DCCP-UDP supports the syntax of partial checksums.  It also supports\n   negotiation\
    \ of the Minimum Checksum Coverage feature and settings of\n   the CsCov field.\
    \  However, the UDP Checksum field in DCCP-UDP always\n   covers the entire DCCP\
    \ datagram, and the DCCP checksum is ignored on\n   receipt.  An application that\
    \ enables the partial checksums feature\n   in the DCCP module will therefore\
    \ experience a service that is\n   functionally identical to using full DCCP checksum\
    \ coverage.  This is\n   also the service that the application would have received\
    \ if it had\n   used a network path that did not provide optimised processing\
    \ for\n   DCCP partial checksums.\n"
- title: 3.4.  Network-Layer Options
  contents:
  - "3.4.  Network-Layer Options\n   A DCCP-UDP implementation MAY transfer network-layer\
    \ options intended\n   for DCCP to the network-layer header of the encapsulating\
    \ UDP packet.\n   A DCCP-UDP endpoint that receives IP-options for the encapsulating\n\
    \   UDP packet MAY forward these to the DCCP protocol module.  If the\n   endpoint\
    \ forwards a specific network-layer option to the DCCP module,\n   it MUST also\
    \ forward all subsequent packets with this option.\n   Consistent forwarding is\
    \ essential for correct operation of many end-\n   to-end options.\n"
- title: 3.5.  Explicit Congestion Notification
  contents:
  - "3.5.  Explicit Congestion Notification\n   A DCCP-UDP endpoint SHOULD follow\
    \ the procedures of DCCP-STD in\n   [RFC4340], Section 12 by setting the Explicit\
    \ Congestion Notification\n   (ECN) in the IP headers of outgoing packets and\
    \ examining the values\n   received in the ECN fields of incoming IP packets,\
    \ relaying any\n   packet markings to the DCCP module.\n   Implementations that\
    \ do not support ECN MUST follow the procedures of\n   DCCP-STD in [RFC4340],\
    \ Section 12.1 with regard to implementations\n   that are not ECN capable.\n"
- title: 3.6.  ICMP Handling for Messages Relating to DCCP-UDP
  contents:
  - "3.6.  ICMP Handling for Messages Relating to DCCP-UDP\n   To allow ICMP messages\
    \ to be demultiplexed by the receiving endpoint,\n   part of the original packet\
    \ that resulted in the message is included\n   in the payload of the ICMP error\
    \ message.  The receiving endpoint can\n   therefore use this information to associate\
    \ the ICMP error with the\n   transport protocol instance that resulted in the\
    \ ICMP message.  When\n   DCCP-UDP is used, the error message and the payload\
    \ of the ICMP error\n   message relate to the UDP transport.\n   DCCP-UDP endpoints\
    \ SHOULD forward ICMP messages relating to a UDP\n   packet that carries a DCCP-UDP\
    \ to the DCCP module.  This may imply\n   translation of the payload of the ICMP\
    \ message into a form that is\n   recognised by the DCCP stack.  [RFC5927] describes\
    \ precautions that\n   are desirable before TCP acts on the receipt of an ICMP\
    \ message.\n   Similar precautions are desirable prior to forwarding by DCCP-UDP\
    \ to\n   the DCCP module.\n   The minimal length ICMP error message generated\
    \ in response to\n   processing a UDP datagram only identifies the UDP source\
    \ port and UDP\n   destination port.  This ICMP message does not carry sufficient\n\
    \   information to discover the encapsulated DCCP Port values.  A DCCP-\n   UDP\
    \ endpoint that supports multiple DCCP connections over the same\n   pair of UDP\
    \ ports (see Section 3.8) may not therefore be able to\n   associate an ICMP message\
    \ with a unique DCCP-UDP connection.\n"
- title: 3.7.  Path Maximum Transmission Unit Discovery
  contents:
  - "3.7.  Path Maximum Transmission Unit Discovery\n   DCCP-UDP implementations MUST\
    \ follow DCCP-STD [RFC4340], Section 14\n   with regard to determining the maximum\
    \ packet size and the use of\n   Path Maximum Transmission Unit Discovery (PMTUD).\
    \  This requires the\n   processing of ICMP Destination Unreachable messages with\
    \ a code that\n   indicates that an unfragmentable packet was too large to be\
    \ forwarded\n   (a \"Datagram Too Big\" message), as defined in RFC 4340.\n  \
    \ An effect of encapsulation is to incur additional datagram overhead.\n   This\
    \ will reduce the Maximum Packet Size (MPS) at the DCCP level.\n"
- title: 3.8.  Usage of the UDP Port by DCCP-UDP
  contents:
  - "3.8.  Usage of the UDP Port by DCCP-UDP\n   A DCCP-UDP server (that is, an initially\
    \ passive endpoint that wishes\n   to receive DCCP-Request packets [RFC4340] over\
    \ DCCP-UDP) listens for\n   connections on one or more UDP ports.  UDP port number\
    \ 6511 has been\n   allocated as the default listening UDP port for a DCCP-UDP\
    \ server.\n   Some NAT/NAPT topologies may require using a non-default listening\n\
    \   port.\n   The purpose of this IANA-assigned port is for the operating system\
    \ or\n   a framework to receive and process DCCP-UDP datagrams for delivery to\n\
    \   the DCCP module (e.g., to support a system-wide DCCP-UDP daemon\n   serving\
    \ multiple DCCP applications or a DCCP-UDP server placed behind\n   a firewall).\n\
    \   An application-specific implementation SHOULD use an ephemeral port\n   and\
    \ advertise this port using outside means, e.g., SDP.  This method\n   of implementation\
    \ SHOULD NOT use the IANA-assigned port to listen for\n   incoming DCCP-UDP packets.\n\
    \   A DCCP-UDP client provides UDP source and destination ports as well\n   as\
    \ DCCP source and destination ports at connection initiation time.\n   A client\
    \ SHOULD ensure that each DCCP connection maps to a single\n   DCCP-UDP connection\
    \ by setting the UDP source port.  Choosing a\n   distinct UDP source port for\
    \ each distinct DCCP connection ensures\n   that UDP-based flow identifiers differ\
    \ whenever DCCP-based flow\n   identifiers differ.  Specifically, two connections\
    \ with different\n   <source IP address, source DCCP port, destination IP address,\n\
    \   destination DCCP port> DCCP 4-tuples will have different <source IP\n   address,\
    \ source UDP port, destination IP address, destination UDP\n   port> UDP 4-tuples.\n\
    \   A DCCP-UDP server SHOULD accept datagrams from any UDP source port.\n   There\
    \ is a risk that the same DCCP source port number could be used\n   by two endpoints,\
    \ each behind a NAPT.  A DCCP-UDP server MUST\n   therefore demultiplex a DCCP-UDP\
    \ flow using both the UDP source and\n   destination port numbers and the encapsulated\
    \ DCCP ports.  This\n   ensures than an active DCCP connection is uniquely identified\
    \ by the\n   6-tuple <source IP address, source UDP port, source DCCP port,\n\
    \   destination IP address, destination UDP port, destination DCCP port>.\n  \
    \ (The active state of a DCCP connection is defined in Section 3.8: a\n   DCCP\
    \ connection becomes active following transmission of a DCCP-\n   Request and\
    \ becomes inactive after sending a DCCP-Close.)\n   This demultiplexing at a DCCP-UDP\
    \ endpoint occurs in two stages:\n   1.  In the first stage, DCCP-UDP packets\
    \ are demultiplexed using the\n       UDP 4-tuple: <source IP address, source\
    \ UDP port, destination IP\n       address, destination UDP port>.\n   2.  In\
    \ the second stage, a receiving endpoint MUST ensure that two\n       independent\
    \ DCCP connections that were multiplexed to the same\n       UDP 4-tuple are not\
    \ associated with the same connection in the\n       DCCP module.  The endpoint\
    \ therefore needs to keep state for the\n       set of active DCCP-UDP endpoints\
    \ using each combination of a UDP\n       4-tuple: <source IP address, source\
    \ UDP port, destination IP\n       address, destination UDP port>.  Two DCCP endpoint\
    \ methods are\n       specified.  A DCCP-UDP implementation MUST implement exactly\
    \ one\n       of these:\n       *  The DCCP server may accept only one active\
    \ 6-tuple at any one\n          time for a given UDP 4-tuple.  In this method,\
    \ DCCP-UDP\n          packets that do not match an active 6-tuple MUST NOT be\
    \ passed\n          to the DCCP module and the DCCP Server SHOULD send a DCCP-\n\
    \          Reset with Reset Code 12, \"Encapsulated Port Reuse\".  An\n      \
    \    endpoint that receives a DCCP-Reset with this reset code will\n         \
    \ clear its connection state but MAY immediately try again using\n          a\
    \ different 4-tuple.  This provides protection should the same\n          UDP\
    \ 4-tuple be re-used by multiple DCCP connections, ensuring\n          that only\
    \ one DCCP connection is established at one time.\n       *  The DCCP server may\
    \ support multiple DCCP connections over the\n          same UDP 4-tuple.  In\
    \ this method, the endpoint MUST then\n          associate each 6-tuple with a\
    \ single DCCP connection.  If an\n          endpoint is unable to demultiplex\
    \ the 6-tuple (e.g., due to\n          internal resource limits), it MUST discard\
    \ DCCP-UDP packets\n          that do not match an active 6-tuple instead of forwarding\
    \ them\n          to the DCCP module.  The DCCP endpoint MAY send a DCCP-Reset\n\
    \          with Reset Code 12, \"Encapsulated Port Reuse\", indicating the\n \
    \         connection has been closed but may be retried using a\n          different\
    \ UDP 4-tuple.\n"
- title: 3.9.  Service Codes and the DCCP Port Registry
  contents:
  - "3.9.  Service Codes and the DCCP Port Registry\n   This section clarifies the\
    \ usage of DCCP Service Codes and the\n   registration of server ports by DCCP-UDP.\
    \  The section is not\n   intended to update the procedures for allocating Service\
    \ Codes or\n   server ports.\n   There is one Service Code registry and one DCCP\
    \ port registration\n   that apply to all combinations of encapsulation and IP\
    \ version.  A\n   DCCP Service Code specifies an application using DCCP regardless\
    \ of\n   the combination of DCCP encapsulation and IP version.  An application\n\
    \   may choose not to support some combinations of encapsulation and IP\n   version,\
    \ but its Service Code will remain registered for those\n   combinations, and\
    \ the Service Code must not be used by other\n   applications.  An application\
    \ should not register different Service\n   Codes for different combinations of\
    \ encapsulation and IP version.\n   [RFC5595] provides additional information\
    \ about DCCP Service Codes.\n   Similarly, a DCCP port registration is applicable\
    \ to all combinations\n   of encapsulation and IP version.  Again, an application\
    \ may choose\n   not to support some combinations of encapsulation and IP version\
    \ on\n   its registered DCCP port, although the port will remain registered\n\
    \   for those combinations.  Applications should not register different\n   DCCP\
    \ ports just for the purpose of using different combinations of\n   encapsulation.\n"
- title: 4.  DCCP-UDP and Higher-Layer Protocols
  contents:
  - "4.  DCCP-UDP and Higher-Layer Protocols\n   The encapsulation of a higher-layer\
    \ protocol within DCCP MUST be the\n   same for both DCCP-STD and DCCP-UDP.  Encapsulation\
    \ of Datagram\n   Transport Layer Security (DTLS) over DCCP is defined in [RFC5238]\
    \ and\n   RTP over DCCP is defined in [RFC5762].  This document therefore does\n\
    \   not update these encapsulations when using DCCP-UDP.\n"
- title: 5.  Signalling the Use of DCCP-UDP
  contents:
  - "5.  Signalling the Use of DCCP-UDP\n   Applications often signal transport connection\
    \ parameters through\n   outside means, such as SDP.  Applications that define\
    \ such methods\n   for DCCP MUST define how the DCCP encapsulation is chosen and\
    \ MUST\n   allow either encapsulation to be signalled.  Where DCCP-STD and DCCP-\n\
    \   UDP are both supported, DCCP-STD SHOULD be preferred.\n   The Session Description\
    \ Protocol (SDP) [RFC4566] and the offer/answer\n   model [RFC3264] can be used\
    \ to negotiate DCCP sessions, and [RFC5762]\n   defines SDP extensions for signalling\
    \ the use of an RTP session\n   running over DCCP connections.  However, since\
    \ [RFC5762] predates\n   this document, it does not define a mechanism for signalling\
    \ that the\n   DCCP-UDP encapsulation is to be used.  This section updates [RFC5762]\n\
    \   to describe how SDP can be used to signal RTP sessions running over\n   the\
    \ DCCP-UDP encapsulation.\n   The new SDP support specified in this section is\
    \ expected to be\n   useful when the offering party is on the public Internet\
    \ or in the\n   same private addressing realm as the answering party.  In this\
    \ case,\n   the DCCP-UDP server has a public address.  The client may either have\n\
    \   a public address or be behind a NAT/NAPT.  This scenario has the\n   potential\
    \ to be an important use case.  Some other NAT/NAPT\n   topologies may result\
    \ in the advertised port being unreachable via\n   the NAT/NAPT.\n"
- title: 5.1.  Protocol Identification
  contents:
  - "5.1.  Protocol Identification\n   SDP uses a media (\"m=\") line to convey details\
    \ of the media format\n   and transport protocol used.  The ABNF syntax [RFC5234]\
    \ of a media\n   line for DCCP is as follows (from [RFC4566]):\n      media-field\
    \ =         %x6d \"=\" media SP port [\"/\" integer]\n                       \
    \     SP proto 1*(SP fmt) CRLF\n   The proto field denotes the transport protocol\
    \ used for the media,\n   while the port indicates the transport port to which\
    \ the media is\n   sent, following [RFC5762].  This document defines the following\
    \ five\n   values of the proto field to indicate media transported using DCCP-\n\
    \   UDP encapsulation:\n      UDP/DCCP\n      UDP/DCCP/RTP/AVP\n      UDP/DCCP/RTP/SAVP\n\
    \      UDP/DCCP/RTP/AVPF\n      UDP/DCCP/RTP/SAVPF\n   The \"UDP/DCCP\" protocol\
    \ identifier is similar to the \"DCCP\" protocol\n   identifier defined in [RFC5762]\
    \ and denotes the DCCP transport\n   protocol encapsulated in UDP, but not its\
    \ upper-layer protocol.\n   The \"UDP/DCCP/RTP/AVP\" protocol identifier refers\
    \ to RTP using the\n   RTP Profile for Audio and Video Conferences with Minimal\
    \ Control\n   [RFC3551] running over the DCCP-UDP encapsulation.\n   The \"UDP/DCCP/RTP/SAVP\"\
    \ protocol identifier refers to RTP using the\n   Secure Real-time Transport Protocol\
    \ [RFC3711] running over the DCCP-\n   UDP encapsulation.\n   The \"UDP/DCCP/RTP/AVPF\"\
    \ protocol identifier refers to RTP using the\n   Extended RTP Profile for RTCP-based\
    \ Feedback [RFC4585] running over\n   the DCCP-UDP encapsulation.\n   The \"UDP/DCCP/RTP/SAVPF\"\
    \ protocol identifier refers to RTP using the\n   Extended Secure RTP Profile\
    \ for RTCP-based Feedback [RFC5124] running\n   over the DCCP-UDP encapsulation.\n\
    \   The fmt value in the \"m=\" line is used as described in [RFC5762].\n   The\
    \ port number specified in the \"m=\" line indicates the UDP port\n   that is\
    \ used for the DCCP-UDP encapsulation service.  The DCCP port\n   number MUST\
    \ be sent using an associated \"a=dccp-port:\" attribute, as\n   described in\
    \ Section 5.2.\n   The use of ports with DCCP-UDP encapsulation is described further\
    \ in\n   Section 3.8.\n"
- title: 5.2.  Signalling Encapsulated DCCP Ports
  contents:
  - "5.2.  Signalling Encapsulated DCCP Ports\n   When using DCCP-UDP, the UDP port\
    \ used for the encapsulation is\n   signalled using the SDP \"m=\" line.  The\
    \ DCCP ports MUST NOT be\n   included in the \"m=\" line but are instead signalled\
    \ using a new SDP\n   attribute (\"dccp-port\") defined according to the following\
    \ ABNF:\n          dccp-port-attr = %x61 \"=dccp-port:\" dccp-port\n         \
    \ dccp-port = 1*DIGIT\n   where DIGIT is as defined in [RFC5234].  This is a media-level\n\
    \   attribute that is not subject to the charset attribute.  The\n   \"a=dccp-port:\"\
    \ attribute MUST be included when the protocol\n   identifiers described in Section\
    \ 5.1 are used.\n   The use of ports with DCCP-UDP encapsulation is described\
    \ further in\n   Section 3.8.\n   o  If the \"a=rtcp:\" attribute [RFC3605] is\
    \ used, then the signalled\n      port is the DCCP port used for RTCP.\n   o \
    \ If the \"a=rtcp-mux\" attribute [RFC5761] is negotiated, then RTP\n      and\
    \ RTCP are multiplexed onto a single DCCP port; otherwise,\n      separate DCCP\
    \ ports are used for RTP and RTCP [RFC5762].\n      NOTE: In each case, only a\
    \ single UDP port is used for the DCCP-\n      UDP encapsulation.\n   o  If the\
    \ \"a=rtcp-mux\" attribute is not present, then the second of\n      the two demultiplexing\
    \ methods described in Section 3.8 MUST be\n      implemented; otherwise, the\
    \ second DCCP connection for the RTCP\n      flow will be rejected.  For this\
    \ reason, using \"a=rtcp-mux\" is\n      RECOMMENDED when using RTP over DCCP-UDP.\n"
- title: 5.3.  Connection Management
  contents:
  - "5.3.  Connection Management\n   The \"a=setup:\" attribute is used in a manner\
    \ compatible with\n   [RFC5762], Section 5.3 to indicate which of the DCCP-UDP\
    \ endpoints\n   should initiate the DCCP-UDP connection establishment.\n"
- title: 5.4.  Negotiating the DCCP-UDP Encapsulation versus Native DCCP
  contents:
  - "5.4.  Negotiating the DCCP-UDP Encapsulation versus Native DCCP\n   An endpoint\
    \ that supports both native DCCP and the DCCP-UDP\n   encapsulation may wish to\
    \ signal support for both options in an SDP\n   offer, allowing the answering\
    \ party the option of using native DCCP\n   where possible, while falling back\
    \ to the DCCP-UDP encapsulation\n   otherwise.\n   An approach to doing this might\
    \ be to include candidates for the\n   DCCP-UDP encapsulation and native DCCP\
    \ into an Interactive\n   Connectivity Establishment (ICE) [RFC5245] exchange.\
    \  Since DCCP is\n   connection-oriented, these candidates would need to be encoded\
    \ into\n   ICE in a manner analogous to TCP candidates defined in [RFC6544].\n\
    \   Both active and passive candidates could be supported for native DCCP\n  \
    \ and DCCP-UDP encapsulation, as may DCCP simultaneous-open candidates\n   [RFC5596].\
    \  In choosing local preference values, it may make sense to\n   prefer DCCP-UDP\
    \ over native DCCP in cases where low connection setup\n   time is important and\
    \ to prioritise native DCCP in cases where low\n   overhead is preferred (on the\
    \ assumption that DCCP-UDP is more likely\n   to work through legacy NAT but has\
    \ higher overhead).  The details of\n   this encoding into ICE are left for future\
    \ study.\n   While ICE is appropriate for selecting basic use of DCCP-UDP versus\n\
    \   DCCP-STD, it may not be appropriate for negotiating different RTP\n   profiles\
    \ with each transport encapsulation.  The SDP Capability\n   Negotiation framework\
    \ [RFC5939] may be more suitable.  Section 3.7 of\n   RFC 5939 specifies how to\
    \ provide attributes and transport protocols\n   as capabilities and negotiate\
    \ them using the framework.  The details\n   of the use of SDP Capability Negotiation\
    \ with DCCP are left for\n   future study.\n"
- title: 5.5.  Example of SDP Use
  contents:
  - "5.5.  Example of SDP Use\n   The example below shows an SDP offer, where an application\
    \ signals\n   support for DCCP-UDP:\n          v=0\n          o=alice 1129377363\
    \ 1 IN IP4 192.0.2.47\n          s=-\n          c=IN IP4 192.0.2.47\n        \
    \  t=0 0\n          m=video 50234 UDP/DCCP/RTP/AVP 99\n          a=rtpmap:99 h261/90000\n\
    \          a=dccp-service-code:SC=x52545056\n          a=dccp-port:5004\n    \
    \      a=rtcp:5005\n          a=setup:passive\n          a=connection:new\n  \
    \ The answering party at 192.0.2.128 receives this offer and responds\n   with\
    \ the following answer:\n          v=0\n          o=bob 1129377364 1 IN IP4 192.0.2.128\n\
    \          s=-\n          c=IN IP4 192.0.2.128\n          t=0 0\n          m=video\
    \ 40123 UDP/DCCP/RTP/AVP 99\n          a=rtpmap:99 h261/90000\n          a=dccp-service-code:SC:RTPV\n\
    \          a=dccp-port:9\n          a=setup:active\n          a=connection:new\n\
    \   Note that the \"m=\" line in the answer includes the UDP port number of\n\
    \   the encapsulation service.  The DCCP service code is set to \"RTPV\",\n  \
    \ signalled using the \"a=dccp-service-code\" attribute [RFC5762].  The\n   \"\
    a=dccp-port:\" attribute in the answer is set to 9 (the discard port)\n   in the\
    \ usual manner for an active connection-oriented endpoint.\n   The answering party\
    \ will then attempt to establish a DCCP-UDP\n   connection to the offering party.\
    \  The connection request will use an\n   ephemeral DCCP source port and DCCP\
    \ destination port 5004.  The UDP\n   packet encapsulating that request will have\
    \ UDP source port 40123 and\n   UDP destination port 50234.\n"
- title: 6.  Security Considerations
  contents:
  - "6.  Security Considerations\n   DCCP-UDP provides all of the security risk-mitigation\
    \ measures\n   present in DCCP-STD and also all of the security risks.  It does\
    \ not\n   maintain additional state at the encapsulation layer.\n   The tunnel\
    \ encapsulation recommends processing of ICMP messages\n   received for packets\
    \ sent using DCCP-UDP and translation to allow use\n   by DCCP.  [RFC5927] describes\
    \ precautions that are desirable before\n   TCP acts on receipt of ICMP messages.\
    \  Similar precautions are\n   desirable for endpoints processing ICMP for DCCP-UDP.\
    \  The purpose of\n   DCCP-UDP is to allow DCCP to pass through NAT/NAPT devices;\n\
    \   therefore, it exposes DCCP to the risks associated with passing\n   through\
    \ NAT devices.  It does not create any new risks with regard to\n   NAT/NAPT devices.\n\
    \   DCCP-UDP may also allow DCCP applications to pass through existing\n   firewall\
    \ devices using rules for UDP, if the administrators of the\n   devices so choose.\
    \  A simple use may either allow all DCCP\n   applications or allow none.\n  \
    \ A firewall that interprets this specification could inspect the\n   encapsulated\
    \ DCCP header to filter based on the inner DCCP header\n   information.  Full\
    \ control of DCCP connections by applications will\n   require enhancements to\
    \ firewalls, as discussed in [RFC4340] and\n   related RFCs (e.g., [RFC5595]).\n\
    \   Datagram Transport Layer Security (DTLS) provides mechanisms that can\n  \
    \ be used to provide security protection for the encapsulated DCCP\n   packets.\
    \  DTLS may be used in two ways:\n   o  Individual DCCP connections may be protected\
    \ in the same way that\n      DTLS is used with native DCCP [RFC5595].  This does\
    \ not encrypt\n      the UDP transport header added by DCCP-UDP.\n   o  This specification\
    \ also permits the use of DTLS with the UDP\n      transport that encapsulates\
    \ DCCP packets.  When DTLS is used at\n      the encapsulation layer, this protects\
    \ the DCCP headers.  This\n      prevents the headers from being inspected or\
    \ updated by network\n      middleboxes (such as firewalls and NAPT).  It also\
    \ eliminates the\n      need for a separate DTLS handshake for each DCCP connection.\n"
- title: 7.  IANA Considerations
  contents:
  - "7.  IANA Considerations\n   IANA has made the allocations described in the following\
    \ sections.\n"
- title: 7.1.  UDP Port Allocation
  contents:
  - "7.1.  UDP Port Allocation\n   IANA has allocated a UDP port (6511) for the DCCP-UDP\
    \ service.  This\n   port is allocated for use by a transport service rather than\
    \ an\n   application.  In this case, the name of the transport should\n   explicitly\
    \ appear in the registry.  Use of this port is defined in\n   Section 3.8\n"
- title: 7.2.  DCCP Reset
  contents:
  - "7.2.  DCCP Reset\n   IANA has assigned a new DCCP reset code (12) in the DCCP\
    \ Reset Codes\n   Registry, with the short description \"Encapsulated Port Reuse\"\
    .  This\n   code applies to all DCCP congestion control IDs.  Use of this reset\n\
    \   code is defined in Section 3.8.  Section 5.6 of [RFC4340] defines\n   three\
    \ \"Data\" bytes that are carried by a DCCP Reset.  For this reset\n   code, these\
    \ are defined as follows:\n   o  Data byte 1: The DCCP Packet Type of the DCCP\
    \ datagram that\n      resulted in the error message.\n   o  Data bytes 2 & 3:\
    \ The encapsulated UDP source port from the DCCP-\n      UDP datagram that triggered\
    \ the ICMP message, in network order.\n"
- title: 7.3.  SDP Attribute Allocation
  contents:
  - "7.3.  SDP Attribute Allocation\n   IANA has allocated the following new SDP attribute\
    \ (\"att-field\"):\n      Contact name: DCCP Working Group\n      Attribute name:\
    \ dccp-port\n      Long-form attribute name in English: Encapsulated DCCP Port\n\
    \      Type of attribute: Media level only\n      Subject to charset attribute?\
    \  No\n      Purpose of the attribute: See this document, Section 5.1\n      Allowed\
    \ attribute values: See this document, Section 5.1\n"
- title: 8.  Acknowledgments
  contents:
  - "8.  Acknowledgments\n   This document was produced by the DCCP WG.  The following\
    \ individuals\n   contributed during the working group last call: Andrew Lentvorski,\n\
    \   Lloyd Wood, Pasi Sarolahti, Gerrit Renker, Eddie Kohler, and Dan\n   Wing.\n"
- title: 9.  References
  contents:
  - '9.  References

    '
- title: 9.1.  Normative References
  contents:
  - "9.1.  Normative References\n   [RFC0768]  Postel, J., \"User Datagram Protocol\"\
    , STD 6, RFC 768,\n              August 1980.\n   [RFC2119]  Bradner, S., \"Key\
    \ words for use in RFCs to Indicate\n              Requirement Levels\", BCP 14,\
    \ RFC 2119, March 1997.\n   [RFC3605]  Huitema, C., \"Real Time Control Protocol\
    \ (RTCP) attribute\n              in Session Description Protocol (SDP)\", RFC\
    \ 3605,\n              October 2003.\n   [RFC4340]  Kohler, E., Handley, M., and\
    \ S. Floyd, \"Datagram\n              Congestion Control Protocol (DCCP)\", RFC\
    \ 4340, March 2006.\n   [RFC5234]  Crocker, D. and P. Overell, \"Augmented BNF\
    \ for Syntax\n              Specifications: ABNF\", STD 68, RFC 5234, January\
    \ 2008.\n   [RFC5762]  Perkins, C., \"RTP and the Datagram Congestion Control\n\
    \              Protocol (DCCP)\", RFC 5762, April 2010.\n"
- title: 9.2.  Informative References
  contents:
  - "9.2.  Informative References\n   [RFC3264]  Rosenberg, J. and H. Schulzrinne,\
    \ \"An Offer/Answer Model\n              with Session Description Protocol (SDP)\"\
    , RFC 3264,\n              June 2002.\n   [RFC3551]  Schulzrinne, H. and S. Casner,\
    \ \"RTP Profile for Audio and\n              Video Conferences with Minimal Control\"\
    , STD 65, RFC 3551,\n              July 2003.\n   [RFC3711]  Baugher, M., McGrew,\
    \ D., Naslund, M., Carrara, E., and K.\n              Norrman, \"The Secure Real-time\
    \ Transport Protocol (SRTP)\",\n              RFC 3711, March 2004.\n   [RFC4566]\
    \  Handley, M., Jacobson, V., and C. Perkins, \"SDP: Session\n              Description\
    \ Protocol\", RFC 4566, July 2006.\n   [RFC4585]  Ott, J., Wenger, S., Sato, N.,\
    \ Burmeister, C., and J. Rey,\n              \"Extended RTP Profile for Real-time\
    \ Transport Control\n              Protocol (RTCP)-Based Feedback (RTP/AVPF)\"\
    , RFC 4585,\n              July 2006.\n   [RFC4787]  Audet, F. and C. Jennings,\
    \ \"Network Address Translation\n              (NAT) Behavioral Requirements for\
    \ Unicast UDP\", BCP 127,\n              RFC 4787, January 2007.\n   [RFC5124]\
    \  Ott, J. and E. Carrara, \"Extended Secure RTP Profile for\n              Real-time\
    \ Transport Control Protocol (RTCP)-Based Feedback\n              (RTP/SAVPF)\"\
    , RFC 5124, February 2008.\n   [RFC5238]  Phelan, T., \"Datagram Transport Layer\
    \ Security (DTLS) over\n              the Datagram Congestion Control Protocol\
    \ (DCCP)\",\n              RFC 5238, May 2008.\n   [RFC5245]  Rosenberg, J., \"\
    Interactive Connectivity Establishment\n              (ICE): A Protocol for Network\
    \ Address Translator (NAT)\n              Traversal for Offer/Answer Protocols\"\
    , RFC 5245,\n              April 2010.\n   [RFC5595]  Fairhurst, G., \"The Datagram\
    \ Congestion Control Protocol\n              (DCCP) Service Codes\", RFC 5595,\
    \ September 2009.\n   [RFC5596]  Fairhurst, G., \"Datagram Congestion Control\
    \ Protocol\n              (DCCP) Simultaneous-Open Technique to Facilitate NAT/\n\
    \              Middlebox Traversal\", RFC 5596, September 2009.\n   [RFC5597]\
    \  Denis-Courmont, R., \"Network Address Translation (NAT)\n              Behavioral\
    \ Requirements for the Datagram Congestion\n              Control Protocol\",\
    \ BCP 150, RFC 5597, September 2009.\n   [RFC5761]  Perkins, C. and M. Westerlund,\
    \ \"Multiplexing RTP Data and\n              Control Packets on a Single Port\"\
    , RFC 5761, April 2010.\n   [RFC5927]  Gont, F., \"ICMP Attacks against TCP\"\
    , RFC 5927, July 2010.\n   [RFC5939]  Andreasen, F., \"Session Description Protocol\
    \ (SDP)\n              Capability Negotiation\", RFC 5939, September 2010.\n \
    \  [RFC6544]  Rosenberg, J., Keranen, A., Lowekamp, B., and A. B. Roach,\n   \
    \           \"TCP Candidates with Interactive Connectivity\n              Establishment\
    \ (ICE)\", RFC 6544, March 2012.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Tom Phelan\n   Sonus Networks\n   7 Technology Dr.\n \
    \  Westford, MA  01886\n   US\n   Phone: +1 978 614 8456\n   EMail: tphelan@sonusnet.com\n\
    \   Godred Fairhurst\n   University of Aberdeen\n   School of Engineering\n  \
    \ Fraser Noble Building\n   Aberdeen, Scotland  AB24 3UE\n   UK\n   EMail: gorry@erg.abdn.ac.uk\n\
    \   URI:   http://www.erg.abdn.ac.uk\n   Colin Perkins\n   University of Glasgow\n\
    \   School of Computing Science\n   Glasgow, Scotland  G12 8QQ\n   UK\n   EMail:\
    \ csp@csperkins.org\n   URI:   http://csperkins.org/\n"
