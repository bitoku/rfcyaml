- title: __initial_text__
  contents:
  - '             COPS Usage for Policy Provisioning (COPS-PR)

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2001).  All Rights Reserved.\n"
- title: Abstract
  contents:
  - "Abstract\n   This document describes the use of the Common Open Policy Service\n\
    \   (COPS) protocol for support of policy provisioning (COPS-PR).  This\n   specification\
    \ is independent of the type of policy being provisioned\n   (QoS, Security, etc.)\
    \ but focuses on the mechanisms and conventions\n   used to communicate provisioned\
    \ information between PDPs and PEPs.\n   The protocol extensions described in\
    \ this document do not make any\n   assumptions about the policy data model being\
    \ communicated, but\n   describe the message formats and objects that carry the\
    \ modeled\n   policy data.\n"
- title: Conventions used in this document
  contents:
  - "Conventions used in this document\n   The key words \"MUST\", \"MUST NOT\", \"\
    REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\"\
    , \"MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described\
    \ in [RFC-2119].\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   Glossary...........................................................\
    \ 3\n   1. Introduction.................................................... 3\n\
    \   1.1. Why COPS for Provisioning?.................................... 5\n  \
    \ 1.2. Interaction between the PEP and PDP........................... 5\n   2.\
    \ Policy Information Base (PIB)................................... 6\n   2.1.\
    \ Rules for Modifying and Extending PIBs........................ 7\n   2.2. Adding\
    \ PRCs to, or deprecating from, a PIB.................... 7\n   2.2.1. Adding\
    \ or Deprecating Attributes of a BER Encoded PRC....... 8\n   2.3. COPS Operations\
    \ Supported for a Provisioning Instance......... 8\n   3. Message Content.................................................\
    \ 9\n   3.1. Request (REQ)  PEP -> PDP..................................... 9\n\
    \   3.2. Decision (DEC)  PDP -> PEP....................................10\n  \
    \ 3.3. Report State (RPT)  PEP -> PDP................................12\n   4.\
    \ COPS-PR Protocol Objects........................................13\n   4.1.\
    \ Complete Provisioning Instance Identifier (PRID)..............14\n   4.2. Prefix\
    \ PRID (PPRID)...........................................15\n   4.3. Encoded Provisioning\
    \ Instance Data (EPD)......................16\n   4.4. Global Provisioning Error\
    \ Object (GPERR)......................21\n   4.5. PRC Class Provisioning Error\
    \ Object (CPERR)...................22\n   4.6. Error PRID Object (ErrorPRID).................................23\n\
    \   5. COPS-PR Client-Specific Data Formats............................23\n  \
    \ 5.1. Named Decision Data...........................................23\n   5.2.\
    \ ClientSI Request Data.........................................24\n   5.3. Policy\
    \ Provisioning Report Data...............................24\n   5.3.1. Success\
    \ and Failure Report-Type Data Format.................24\n   5.3.2. Accounting\
    \ Report-Type Data Format..........................25\n   6. Common Operation................................................26\n\
    \   7. Fault Tolerance.................................................28\n  \
    \ 8. Security Considerations.........................................29\n   9.\
    \ IANA Considerations.............................................29\n   10. Acknowledgements...............................................30\n\
    \   11. References.....................................................30\n  \
    \ 12. Authors' Addresses.............................................32\n   13.\
    \ Full Copyright Statement.......................................34\n"
- title: Glossary
  contents:
  - "Glossary\n      PRC     Provisioning Class.  A type of policy data.\n      PRI\
    \     Provisioning Instance.  An instance of a PRC.\n      PIB     Policy Information\
    \ Base.  The database of policy\n              information.\n      PDP     Policy\
    \ Decision Point.  See [RAP].\n      PEP     Policy Enforcement Point.  See [RAP].\n\
    \      PRID    Provisioning Instance Identifier.  Uniquely identifies an\n   \
    \           instance of a PRC.\n"
- title: 1. Introduction
  contents:
  - "1. Introduction\n   The IETF Resource Allocation Protocol (RAP) WG has defined\
    \ the COPS\n   (Common Open Policy Service) protocol [COPS] as a scalable protocol\n\
    \   that allows policy servers (PDPs) to communicate policy decisions to\n   network\
    \ devices (PEPs).  COPS was designed to support multiple types\n   of policy clients.\n\
    \   COPS is a query/response protocol that supports two common models for\n  \
    \ policy control: Outsourcing and Configuration.\n   The Outsourcing model addresses\
    \ the kind of events at the PEP that\n   require an instantaneous policy decision\
    \ (authorization).  In the\n   outsourcing scenario, the PEP delegates responsibility\
    \ to an external\n   policy server (PDP) to make decisions on its behalf.  For\
    \ example, in\n   COPS Usage for RSVP [COPRSVP] when a RSVP reservation message\n\
    \   arrives, the PEP must decide whether to admit or reject the request.\n   It\
    \ can outsource this decision by sending a specific query to its\n   PDP, waiting\
    \ for its decision before admitting the outstanding\n   reservation.\n   The COPS\
    \ Configuration model (herein described as the Provisioning\n   model), on the\
    \ other hand, makes no assumptions of such direct 1:1\n   correlation between\
    \ PEP events and PDP decisions.  The PDP may\n   proactively provision the PEP\
    \ reacting to external events (such as\n   user input), PEP events, and any combination\
    \ thereof (N:M\n   correlation).  Provisioning may be performed in bulk (e.g.,\
    \ entire\n   router QoS configuration) or in portions (e.g., updating a DiffServ\n\
    \   marking filter).\n   Network resources are often provisioned based on relatively\
    \ static\n   SLAs (Service Level Agreements) at network boundaries.  While the\n\
    \   Outsourcing model is dynamically paced by the PEP in real-time, the\n   Provisioning\
    \ model is paced by the PDP in somewhat flexible timing\n   over a wide range\
    \ of configurable aspects of the PEP.\n       Edge Device               Policy\
    \ Server\n       +--------------+          +-----------+     +-----------+\n \
    \      |              |          |           |     | External  |\n       |   \
    \           |  COPS    |           |     | Events    |\n       |   +-----+   \
    \ |  REQ()   |  +-----+  |     +---+-------+\n       |   |     |----|----------|->|\
    \     |  |         |\n       |   | PEP |    |          |  | PDP |<-|---------+\n\
    \       |   |     |<---|----------|--|     |  |\n       |   +-----+    |   COPS\
    \   |  +-----+  |\n       |              |   DEC()  |           |\n       +--------------+\
    \          +-----------+\n                    Figure 1: COPS Provisioning Model\n\
    \   In COPS-PR, policy requests describe the PEP and its configurable\n   parameters\
    \ (rather than an operational event).  If a change occurs\n   in these basic parameters,\
    \ an updated request is sent.  Hence,\n   requests are issued quite infrequently.\
    \  Decisions are not\n   necessarily mapped directly to requests, and are issued\
    \ mostly\n   when the PDP responds to external events or PDP events (policy/SLA\n\
    \   updates).\n   This document describes the use of the COPS protocol [COPS]\
    \ for\n   support of policy provisioning.  This specification is independent\n\
    \   of the type of policy being provisioned (QoS, Security, etc.).\n   Rather,\
    \ it focuses on the mechanisms and conventions used to\n   communicate provisioned\
    \ information between PDPs and PEPs.  The\n   data model assumed in this document\
    \ is based on the concept of\n   Policy Information Bases (PIBs) that define the\
    \ policy data.  There\n   may be one or more PIBs for given area of policy and\
    \ different\n   areas of policy may have different sets of PIBs.\n   In order\
    \ to support a model that includes multiple PDPs\n   controlling non-overlapping\
    \ areas of policy on a single PEP, the\n   client-type specified by the PEP to\
    \ the PDP is unique for the area\n   of policy being managed.  A single client-type\
    \ for a given area of\n   policy (e.g., QoS) will be used for all PIBs that exist\
    \ in that\n   area.  The client should treat all the COPS-PR client-types it\n\
    \   supports as non-overlapping and independent namespaces where\n   instances\
    \ MUST NOT be shared.\n   The examples used in this document are biased toward\
    \ QoS Policy\n   Provisioning in a Differentiated Services (DiffServ) environment.\n\
    \   However, COPS-PR can be used for other types of provisioning\n   policies\
    \ under the same framework.\n"
- title: 1.1. Why COPS for Provisioning?
  contents:
  - "1.1. Why COPS for Provisioning?\n   COPS-PR has been designed within a framework\
    \ that is optimized for\n   efficiently provisioning policies across devices,\
    \ based on the\n   requirements defined in [RAP].  First, COPS-PR allows for efficient\n\
    \   transport of attributes, large atomic transactions of data, and\n   efficient\
    \ and flexible error reporting.  Second, as it has a single\n   connection between\
    \ the policy client and server per area of policy\n   control identified by a\
    \ COPS Client-Type, it guarantees only one\n   server updates a particular policy\
    \ configuration at any given\n   time.  Such a policy configuration is effectively\
    \ locked, even from\n   local console configuration, while the PEP is connected\
    \ to a PDP\n   via COPS.  COPS uses reliable TCP transport and, thus, uses a state\n\
    \   sharing/synchronization mechanism and exchanges differential\n   updates only.\
    \  If either the server or client are rebooted (or\n   restarted) the other would\
    \ know about it quickly.  Last, it is\n   defined as a real-time event-driven\
    \ communications mechanism,\n   never requiring polling between the PEP and PDP.\n"
- title: 1.2. Interaction between the PEP and PDP
  contents:
  - "1.2. Interaction between the PEP and PDP\n   When a device boots, it opens a\
    \ COPS connection to its Primary\n   PDP.  When the connection is established,\
    \ the PEP sends information\n   about itself to the PDP in the form of a configuration\
    \ request.\n   This information includes client specific information (e.g.,\n\
    \   hardware type, software release, configuration information).\n   During this\
    \ phase the client may also specify the maximum COPS-PR\n   message size supported.\n\
    \   In response, the PDP downloads all provisioned policies that are\n   currently\
    \ relevant to that device.  On receiving the provisioned\n   policies, the device\
    \ maps them into its local QoS mechanisms, and\n   installs them.  If conditions\
    \ change at the PDP such that the PDP\n   detects that changes are required in\
    \ the provisioned policies\n   currently in effect, then the PDP sends the changes\
    \ (installs,\n   updates, and/or deletes) in policy to the PEP, and the PEP updates\n\
    \   its local configuration appropriately.\n   If, subsequently, the configuration\
    \ of the device changes (board\n   removed, board added, new software installed,\
    \ etc.) in ways not\n   covered by policies already known to the PEP, then the\
    \ PEP\n   asynchronously sends this unsolicited new information to the PDP\n \
    \  in an updated configuration request.  On receiving this new\n   information,\
    \ the PDP sends to the PEP any additional provisioned\n   policies now needed\
    \ by the PEP, or removes those policies that are\n   no longer required.\n"
- title: 2. Policy Information Base (PIB)
  contents:
  - "2. Policy Information Base (PIB)\n   The data carried by COPS-PR is a set of\
    \ policy data.  The protocol\n   assumes a named data structure, known as a Policy\
    \ Information Base\n   (PIB), to identify the type and purpose of unsolicited\
    \ policy\n   information that is \"pushed\" from the PDP to the PEP for\n   provisioning\
    \ policy or sent to the PDP from the PEP as a\n   notification.  The PIB name\
    \ space is common to both the PEP and the\n   PDP and data instances within this\
    \ space are unique within the\n   scope of a given Client-Type and Request-State\
    \ per TCP connection\n   between a PEP and PDP.  Note that given a device might\
    \ implement\n   multiple COPS Client-Types, a unique instance space is to be\n\
    \   provided for each separate Client-Type.  There is no sharing of\n   instance\
    \ data across the Client-Types implemented by a PEP, even\n   if the classes being\
    \ instantiated are of the same type and share\n   the same instance identifier.\n\
    \   The PIB can be described as a conceptual tree namespace where the\n   branches\
    \ of the tree represent structures of data or Provisioning\n   Classes (PRCs),\
    \ while the leaves represent various instantiations\n   of Provisioning Instances\
    \ (PRIs).  There may be multiple data\n   instances (PRIs) for any given data\
    \ structure (PRC).  For example,\n   if one wanted to install multiple access\
    \ control filters, the PRC\n   might represent a generic access control filter\
    \ type and each PRI\n   might represent an individual access control filter to\
    \ be applied.\n   The tree might be represented as follows:\n             -------+-------+----------+---PRC--+--PRI\n\
    \                    |       |          |        +--PRI\n                    |\
    \       |          |\n                    |       |          +---PRC-----PRI\n\
    \                    |       |\n                    |       +---PRC--+--PRI\n\
    \                    |                +--PRI\n                    |          \
    \      +--PRI\n                    |                +--PRI\n                 \
    \   |                +--PRI\n                    |\n                    +---PRC---PRI\n\
    \                          Figure 2: The PIB Tree\n   Instances of the policy\
    \ classes (PRIs) are each identified by a\n   Provisioning Instance Identifier\
    \ (PRID).  A PRID is a name, carried\n   in a COPS <Named ClientSI> or <Named\
    \ Decision Data> object, which\n   identifies a particular instance of a class.\n"
- title: 2.1. Rules for Modifying and Extending PIBs
  contents:
  - "2.1. Rules for Modifying and Extending PIBs\n   As experience is gained with\
    \ policy based management, and as new\n   requirements arise, it will be necessary\
    \ to make changes to PIBs.\n   Changes to an existing PIB can be made in several\
    \ ways.\n    (1) Additional PRCs can be added to a PIB or an existing one\n  \
    \      deprecated.\n    (2) Attributes can be added to, or deprecated from, an\
    \ existing\n        PRC.\n    (3) An existing PRC can be extended or augmented\
    \ with a new PRC\n        defined in another (perhaps enterprise specific) PIB.\n\
    \   The rules for each of these extension mechanisms is described in this\n  \
    \ sub-section.  All of these mechanisms for modifying a PIB allow for\n   interoperability\
    \ between PDPs and PEPs even when one party is using a\n   new version of the\
    \ PIB while the other is using an old version.\n   Note that the SPPI [SPPI] provides\
    \ the authoritative rules for\n   updating BER encoded PIBs.  It is the purpose\
    \ of the following\n   section to explain how such changes affect senders and\
    \ receivers of\n   COPS messages.\n"
- title: 2.2. Adding PRCs to, or deprecating from, a PIB
  contents:
  - "2.2. Adding PRCs to, or deprecating from, a PIB\n   A published PIB can be extended\
    \ with new PRCs by simply revising the\n   document and adding additional PRCs.\
    \  These additional PRCs are\n   easily identified with new PRIDs under the module's\
    \ PRID Prefix.\n   In the event that a PEP implementing the new PIB is being configured\n\
    \   by a PDP implementing the old PIB, the PEP will simply not receive\n   any\
    \ instances of the new PRC.  In the event that the PEP is\n   implementing the\
    \ old PIB and the PDP the new one, the PEP may receive\n   PRIs for the new PRC.\
    \  Under such conditions, the PEP MUST return an\n   error to the PDP, and rollback\
    \ to its previous (good) state.\n   Similarly, existing PRCs can be deprecated\
    \ from a PIB.  In this case,\n   the PEP ignores any PRIs sent to it by a PDP\
    \ implementing the old\n   (non-deprecated) version of the PIB.  A PDP implementing\
    \ the new\n   version of the PIB simply does not send any instances of the\n \
    \  deprecated class.\n"
- title: 2.2.1. Adding or Deprecating Attributes of a BER Encoded PRC
  contents:
  - "2.2.1. Adding or Deprecating Attributes of a BER Encoded PRC\n   A PIB can be\
    \ modified to deprecate existing attributes of a PRC or\n   add new ones.\n  \
    \ When deprecating the attributes of a PRC, it must be remembered that,\n   with\
    \ the COPS-PR protocol, the attributes of the PRC are identified\n   by their\
    \ order in the sequence rather than an explicit label (or\n   attribute OID).\
    \  Consequently, an ASN.1 value MUST be sent even for\n   deprecated attributes\
    \ so that a PDP and PEP implementing different\n   versions of the PIB are inter-operable.\n\
    \   For a deprecated attribute, if the PDP is using a BER encoded PIB,\n   the\
    \ PDP MUST send either an ASN.1 value of the correct type, or it\n   may send\
    \ an ASN.1 NULL value.  A PEP that receives an ASN.1 NULL for\n   an attribute\
    \ that is not deprecated SHOULD substitute a default\n   value.  If it has no\
    \ default value to substitute it MUST return an\n   error to the PDP.\n   When\
    \ adding new attributes to a PIB, these new attributes must be\n   added in sequence\
    \ after the existing ones.  A PEP that receives a PRI\n   with more attributes\
    \ than it is expecting MUST ignore the additional\n   attributes and send a warning\
    \ back to the PDP.\n   A PEP that receives a PRI with fewer attributes than it\
    \ is expecting\n   SHOULD assume default values for the missing attributes. It\
    \ MAY send\n   a warning back to the PDP.  If the missing attributes are required\n\
    \   and there is no suitable default, the PEP MUST send an error back to\n   the\
    \ PDP.  In all cases the missing attributes are assumed to\n   correspond to the\
    \ last attributes of the PRC.\n"
- title: 2.3. COPS Operations Supported for a Provisioning Instance
  contents:
  - "2.3. COPS Operations Supported for a Provisioning Instance\n   A Provisioning\
    \ Instance (PRI) typically contains a value for each\n   attribute defined for\
    \ the PRC of which it is an instance and is\n   identified uniquely, within the\
    \ scope of a given COPS Client-Type and\n   Request-State on a PEP, by a Provisioning\
    \ Instance Identifier (PRID).\n   The following COPS operations are supported\
    \ on a PRI:\n   o Install - This operation creates or updates a named instance\
    \ of a\n     PRC.  It includes two parameters: a PRID object to name the PRI and\n\
    \     an Encoded Provisioning Instance Data (EPD) object with the\n     new/updated\
    \ values.  The PRID value MUST uniquely identify a single\n     PRI (i.e., PRID\
    \ prefix or PRC values are illegal).  Updates to an\n     existing PRI are achieved\
    \ by simply reinstalling the same PRID with\n     the updated EPD data.\n   o\
    \ Remove - This operation is used to delete an instance of a PRC. It\n     includes\
    \ one parameter, a PRID object, which names either the\n     individual PRI to\
    \ be deleted or a PRID prefix naming one or more\n     complete classes of PRIs.\
    \  Prefix-based deletion supports efficient\n     bulk policy removal.  The removal\
    \ of an unknown/non-existent PRID\n     SHOULD result in a warning to the PDP\
    \ (no error).\n"
- title: 3. Message Content
  contents:
  - "3. Message Content\n   The COPS protocol provides for different COPS clients\
    \ to define their\n   own \"named\", i.e., client-specific, information for various\
    \ messages.\n   This section describes the messages exchanged between a COPS server\n\
    \   (PDP) and COPS Policy Provisioning clients (PEP) that carry client-\n   specific\
    \ data objects.  All the COPS messages used by COPS-PR conform\n   to the message\
    \ specifications defined in the COPS base protocol\n   [COPS].\n   Note: The use\
    \ of the '*' character represented throughout this\n   document is consistent\
    \ with the ABNF [RFC2234] and means 0 or more of\n   the following entities.\n"
- title: 3.1. Request (REQ)  PEP -> PDP
  contents:
  - "3.1. Request (REQ)  PEP -> PDP\n   The REQ message is sent by policy provisioning\
    \ clients to issue a\n   'configuration request' to the PDP as specified in the\
    \ COPS Context\n   Object.  The Client Handle associated with the REQ message\
    \ originated\n   by a provisioning client MUST be unique for that client.  The\
    \ Client\n   Handle is used to identify a specific request state.  Thus, one\n\
    \   client can potentially open several configuration request states,\n   each\
    \ uniquely identified by its handle.  Different request states are\n   used to\
    \ isolate similarly named configuration information into non-\n   overlapping\
    \ contexts (or logically isolated namespaces).  Thus, an\n   instance of named\
    \ information is unique relative to a particular\n   client-type and is unique\
    \ relative to a particular request state for\n   that client-type, even if the\
    \ information was similarly identified in\n   other request states (i.e., uses\
    \ the same PRID).  Thus, the Client\n   Handle is also part of the instance identification\
    \ of the\n   communicated configuration information.\n   The configuration request\
    \ message serves as a request from the PEP to\n   the PDP for provisioning policy\
    \ data that the PDP may have for the\n   PEP, such as access control lists, etc.\
    \  This includes policy the PDP\n   may have at the time the REQ is received as\
    \ well as any future policy\n   data or updates to this data.\n   The configuration\
    \ request message should include provisioning client\n   information to provide\
    \ the PDP with client-specific configuration or\n   capability information about\
    \ the PEP.  The information provided by\n   the PEP should include client resources\
    \ (e.g., queuing capabilities)\n   and default policy configuration (e.g., default\
    \ role combinations)\n   information as well as incarnation data on existing policy.\
    \  This\n   information typically does not include all the information previously\n\
    \   installed by a PDP but rather should include checksums or shortened\n   references\
    \ to previously installed information for synchronization\n   purposes.  This\
    \ information from the client assists the server in\n   deciding what types of\
    \ policy the PEP can install and enforce.  The\n   format of the information encapsulated\
    \ in one or more of the COPS\n   Named ClientSI objects is described in section\
    \ 5.  Note that the\n   configuration request message(s) is generated and sent\
    \ to the PDP in\n   response to the receipt of a Synchronize State Request (SSQ)\
    \ message\n   from the PDP.  Likewise, an updated configuration request message\n\
    \   (using the same Client Handle value as the original request now being\n  \
    \ updated) may also be generated by the PEP and sent to the PDP at any\n   time\
    \ due to local modifications of the PEP's internal state.  In this\n   way, the\
    \ PDP will be synchronized with the PEP's relevant internal\n   state at all times.\n\
    \   The policy information supplied by the PDP MUST be consistent with\n   the\
    \ named decision data defined for the policy provisioning client.\n   The PDP\
    \ responds to the configuration request with a DEC message\n   containing any\
    \ available provisioning policy data.\n   The REQ message has the following format:\n\
    \               <Request> ::= <Common Header>\n                              <Client\
    \ Handle>\n                              <Context = config request>\n        \
    \                      *(<Named ClientSI>)\n                              [<Integrity>]\n\
    \   Note that the COPS objects IN-Int, OUT-Int and LPDPDecisions are not\n   included\
    \ in a COPS-PR Request.\n"
- title: 3.2. Decision (DEC)  PDP -> PEP
  contents:
  - "3.2. Decision (DEC)  PDP -> PEP\n   The DEC message is sent from the PDP to a\
    \ policy provisioning client\n   in response to the REQ message received from\
    \ the PEP.  The Client\n   Handle MUST be the same Handle that was received in\
    \ the corresponding\n   REQ message.\n   The DEC message is sent as an immediate\
    \ response to a configuration\n   request with the solicited message flag set\
    \ in the COPS message\n   header.  Subsequent DEC messages may also be sent at\
    \ any time after\n   the original DEC message to supply the PEP with additional/updated\n\
    \   policy information without the solicited message flag set in the COPS\n  \
    \ message header (as they are unsolicited decisions).\n   Each DEC message may\
    \ contain multiple decisions.  This means a single\n   message can install some\
    \ policies and delete others.  In general a\n   single COPS-PR DEC message MUST\
    \ contain any required remove decisions\n   first, followed by any required install\
    \ decisions.  This is used to\n   solve a precedence issue, not a timing issue:\
    \ the remove decision\n   deletes what it specifies, except those items that are\
    \ installed in\n   the same message.\n   The DEC message can also be used by the\
    \ PDP to command the PEP to\n   open a new Request State or Delete an existing\
    \ Request-State as\n   identified by the Client-Handle.  To accomplish this, COPS-PR\
    \ defines\n   a new flag for the COPS Decision Flags object.  The flag 0x02 is\
    \ to\n   be used by COPS-PR client-types and is hereafter referred to as the\n\
    \   \"Request-State\" flag.  An Install decision (Decision Flags: Command-\n \
    \  Code=Install) with the Request-State flag set in the COPS Decision\n   Flags\
    \ object will cause the PEP to issue a new Request with a new\n   Client Handle\
    \ or else specify the appropriate error in a COPS Report\n   message.  A Remove\
    \ decision (Decision Flags: Command-Code=Remove)\n   with the Request-State flag\
    \ set in the COPS Decision Flags object\n   will cause the PEP to send a COPS\
    \ Delete Request State (DRQ) message\n   for the Request-State identified by the\
    \ Client Handle in the DEC\n   message.  Whenever the Request-State flag is set\
    \ in the COPS Decision\n   Flags object in the DEC message, no COPS Named Decision\
    \ Data object\n   can be included in the corresponding decision (as it serves\
    \ no\n   purpose for this decision flag).  Note that only one decision with\n\
    \   the Request-State flag can be present per DEC message, and, if\n   present,\
    \ this MUST be the only decision in that message.  As\n   described below, the\
    \ PEP MUST respond to each and every DEC with a\n   corresponding solicited RPT.\n\
    \   A COPS-PR DEC message MUST be treated as a single \"transaction\",\n   i.e.,\
    \ either all the decisions in a DEC message succeed or they all\n   fail.  If\
    \ they fail, the PEP will rollback to its previous good\n   state, which is the\
    \ last successful DEC transaction, if any.  This\n   allows the PDP to delete\
    \ some policies only if other policies can be\n   installed in their place.  The\
    \ DEC message has the following format:\n   <Decision Message> ::= <Common Header>\n\
    \                          <Client Handle>\n                          *(<Decision>)\
    \ | <Error>\n                          [<Integrity>]\n   <Decision> ::= <Context>\n\
    \                  <Decision: Flags>\n                  [<Named Decision Data:\
    \ Provisioning >]\n   Note that the Named Decision Data (Provisioning) object\
    \ is included\n   in a COPS-PR Decision when it is an Install or Remove decision\
    \ with\n   no Decision Flags set.  Other types of COPS decision data objects\n\
    \   (e.g., Stateless, Replacement) are not supported by COPS-PR client-\n   types.\
    \  The Named Decision Data object MUST NOT be included in the\n   decision if\
    \ the Decision Flags object Command-Code is NULL (meaning\n   there is no configuration\
    \ information to install at this time) or if\n   the Request-State flag is set\
    \ in the Decision Flags object.\n   For each decision in the DEC message, the\
    \ PEP performs the operation\n   specified in the Command-Code and Flags field\
    \ in the Decision Flags\n   object on the Named Decision Data.  For the policy\
    \ provisioning\n   clients, the format for this data is defined in the context\
    \ of the\n   Policy Information Base (see section 5).  In response to a DEC\n\
    \   message, the policy provisioning client MUST send a RPT message, with\n  \
    \ the solicited message flag set, back to the PDP to inform the PDP of\n   the\
    \ action taken.\n"
- title: 3.3. Report State (RPT)  PEP -> PDP
  contents:
  - "3.3. Report State (RPT)  PEP -> PDP\n   The RPT message is sent from the policy\
    \ provisioning clients to the\n   PDP to report accounting information associated\
    \ with the provisioned\n   policy, or to notify the PDP of changes in the PEP\
    \ (Report-Type = '\n   Accounting') related to the provisioning client.\n   RPT\
    \ is also used as a mechanism to inform the PDP about the action\n   taken at\
    \ the PEP in response to a DEC message.  For example, in\n   response to an 'Install'\
    \ decision, the PEP informs the PDP if the\n   policy data is installed (Report-Type\
    \ = 'Success') or not (Report-\n   Type = 'Failure').  Reports that are in response\
    \ to a DEC message\n   MUST set the solicited message flag in their COPS message\
    \ header.\n   Each solicited RTP MUST be sent for its corresponding DEC in the\n\
    \   order the DEC messages were received.  In case of a solicited\n   failure,\
    \ the PEP is expected to rollback to its previous (good) state\n   as if the erroneous\
    \ DEC transaction did not occur.  The PEP MUST\n   always respond to a DEC with\
    \ a solicited RPT even in response to a\n   NULL DEC, in which case the Report-Type\
    \ will be 'Success'.\n   Reports can also be unsolicited and all unsolicited Reports\
    \ MUST NOT\n   set the solicited message flag in their COPS message header. Examples\n\
    \   of unsolicited reports include 'Accounting' Report-Types, which were\n   not\
    \ triggered by a specific DEC messages, or 'Failure' Report-Types,\n   which indicate\
    \ a failure in a previously successfully installed\n   configuration (note that,\
    \ in the case of such unsolicited failures,\n   the PEP cannot rollback to a previous\
    \ \"good\" state as it becomes\n   ambiguous under these asynchronous conditions\
    \ what the correct state\n   might be).\n   The RPT message may contain provisioning\
    \ client information such as\n   accounting parameters or errors/warnings related\
    \ to a decision. The\n   data format for this information is defined in the context\
    \ of the\n   policy information base (see section 5).  The RPT message has the\n\
    \   following format:\n               <Report State> ::= <Common Header>\n   \
    \                               <Client Handle>\n                            \
    \      <Report Type>\n                                  *(<Named ClientSI>)\n\
    \                                  [<Integrity>]\n"
- title: 4. COPS-PR Protocol Objects
  contents:
  - "4. COPS-PR Protocol Objects\n   The COPS Policy Provisioning clients encapsulate\
    \ several new objects\n   within the existing COPS Named Client-specific information\
    \ object and\n   Named Decision Data object.  This section defines the format\
    \ of these\n   new objects.\n   COPS-PR classifies policy data according to \"\
    bindings\", where a\n   binding consists of a Provisioning Instance Identifier\
    \ and the\n   Provisioning Instance data, encoded within the context of the\n\
    \   provisioning policy information base (see section 5).\n   The format for these\
    \ new objects is as follows:\n           0                1               2  \
    \               3\n   +---------------+---------------+---------------+---------------+\n\
    \   |             Length            |     S-Num     |     S-Type    |\n   +---------------+---------------+---------------+---------------+\n\
    \   |                   32 bit unsigned integer                     |\n   +---------------+---------------+---------------+---------------+\n\
    \   S-Num and S-Type are similar to the C-Num and C-Type used in the base\n  \
    \ COPS objects.  The difference is that S-Num and S-Type are used only\n   for\
    \ COPS-PR clients and are encapsulated within the existing COPS\n   Named ClientSI\
    \ or Named Decision Data objects.  The S-Num identifies\n   the general purpose\
    \ of the object, and the S-Type describes the\n   specific encoding used for the\
    \ object.  All the object descriptions\n   and examples in this document use the\
    \ Basic Encoding Rules as the\n   encoding type (S-Type = 1).  Additional encodings\
    \ can be defined for\n   the remaining S-Types in the future (for example, an\
    \ additional S-\n   Type could be used to carry XML string based encodings [XML]\
    \ as an\n   EPD of PRI instance data, where URNs identify PRCs [URN] and\n   XPointers\
    \ would be used for PRIDs).\n   Length is a two-octet value that describes the\
    \ number of octets\n   (including the header) that compose the object.  If the\
    \ length in\n   octets does not fall on a 32-bit word boundary, padding MUST be\
    \ added\n   to the end of the object so that it is aligned to the next 32-bit\n\
    \   boundary before the object can be sent on the wire.  On the receiving\n  \
    \ side, a subsequent object boundary can be found by simply rounding up\n   the\
    \ stated object length of the current object to the next 32-bit\n   boundary.\
    \  The values for the padding MUST be all zeros.\n"
- title: 4.1. Complete Provisioning Instance Identifier (PRID)
  contents:
  - "4.1. Complete Provisioning Instance Identifier (PRID)\n   S-Num = 1 (Complete\
    \ PRID), S-Type = 1 (BER), Length = variable.\n   This object is used to carry\
    \ the identifier, or PRID, of a\n   Provisioning Instance.  The identifier is\
    \ encoded following the rules\n   that have been defined for encoding SNMP Object\
    \ Identifier (OID)\n   values.  Specifically, PRID values are encoded using the\n\
    \   Type/Length/Value (TLV) format and initial sub-identifier packing\n   that\
    \ is specified by the binary encoding rules [BER] used for Object\n   Identifiers\
    \ in an SNMP PDU.\n           0                1               2             \
    \    3\n   +---------------+---------------+---------------+---------------+\n\
    \   |              Length           | S-Num = PRID  | S-Type = BER  |\n   +---------------+---------------+---------------+---------------+\n\
    \   |                     Instance Identifier                       |\n   +---------------+---------------+---------------+---------------+\n\
    \   For example, a (fictitious) PRID equal to 1.3.6.1.2.2.8.1 would be\n   encoded\
    \ as follows (values in hex):\n         06 07 2B 06 01 02 02 08 01\n   The entire\
    \ PRID object would be encoded as follows:\n         00 0D                   \
    \     - Length\n         01                           - S-Num\n         01   \
    \                        - S-Type (Complete PRID)\n         06 07 2B 06 01 02\
    \ 02 08 01   - Encoded PRID\n         00 00 00                     - Padding\n\
    \   NOTE: When encoding an xxxTable's xxxEntry Object-Type as defined by\n   the\
    \ SMI [V2SMI] and SPPI [SPPI], the OID will contain all the sub-\n   identifiers\
    \ up to and including the xxxEntry OID but not the columnar\n   identifiers for\
    \ the attributes within the xxxEntry's SEQUENCE.  The\n   last (suffix) identifier\
    \ is the INDEX of an instance of an entire\n   xxxEntry including its SEQUENCE\
    \ of attributes encoded in the EPD\n   (defined below).  This constitutes an instance\
    \ (PRI) of a class (PRC)\n   in terms of the SMI.\n   A PRID for a scalar (non-columnar)\
    \ value's OID is encoded directly as\n   the PRC where the instance identifier\
    \ suffix is always zero as there\n   will be only one instance of a scalar value.\
    \  The EPD will then be\n   used to convey the scalar value.\n"
- title: 4.2. Prefix PRID (PPRID)
  contents:
  - "4.2. Prefix PRID (PPRID)\n   Certain operations, such as decision removal, can\
    \ be optimized by\n   specifying a PRID prefix with the intent that the requested\
    \ operation\n   be applied to all PRIs matching the prefix (for example, all\n\
    \   instances of the same PRC).  PRID prefix objects MUST only be used in\n  \
    \ the COPS protocol <Remove Decision> operation where it may be more\n   optimal\
    \ to perform bulk decision removal using class prefixes instead\n   of a sequence\
    \ of individual <Remove Decision> operations.  Other COPS\n   operations, e.g.,\
    \ <Install Decision> operations always require\n   individual PRID specification.\n\
    \   S-Num = 2 (Prefix PRID), S-Type = 1 (BER), Length = variable.\n          \
    \    0                1               2                 3\n    +---------------+---------------+---------------+---------------+\n\
    \    |              Length           | S-Num = PPRID | S-Type = BER  |\n    +---------------+---------------+---------------+---------------+\n\
    \    ...                                                           ...\n    |\
    \                          Prefix PRID                          |\n    ...   \
    \                                                        ...\n    +---------------+---------------+---------------+---------------+\n\
    \   Continuing with the previous example, a prefix PRID that is equal to\n   1.3.6.1.2.2\
    \ would be encoded as follows (values in hex):\n         06 05 2B 06 01 02 02\n\
    \      The entire PPRID object would be encoded as follows:\n         00 0B  \
    \                      - Length\n         02                           - S-Num\
    \ = Prefix PRID\n         01                           - S-Type = BER\n      \
    \   06 05 2B 06 01 02 02         - Encoded Prefix PRID\n         00          \
    \                 - Padding\n"
- title: 4.3. Encoded Provisioning Instance Data (EPD)
  contents:
  - "4.3. Encoded Provisioning Instance Data (EPD)\n   S-Num = 3 (EPD), S-Type = 1\
    \ (BER), Length = variable.\n   This object is used to carry the encoded value\
    \ of a Provisioning\n   Instance.  The PRI value, which contains all of the individual\
    \ values\n   of the attributes that comprise the class (which corresponds to the\n\
    \   SMI's xxxEntry Object-Type defining the SEQUENCE of attributes\n   comprising\
    \ a table [V2SMI][SPPI]), is encoded as a series of TLV\n   sub-components.  Each\
    \ sub-component represents the value of a single\n   attribute and is encoded\
    \ following the BER.  Note that the ordering\n   of non-scalar (multiple) attributes\
    \ within the EPD is dictated by\n   their respective columnar OID suffix when\
    \ defined in [V2SMI].  Thus,\n   the attribute with the smallest columnar OID\
    \ suffix will appear first\n   and the attribute with the highest number columnar\
    \ OID suffix will be\n   last.\n           0                1               2\
    \                 3\n   +---------------+---------------+---------------+---------------+\n\
    \   |             Length            | S-Num = EPD   | S-Type = BER  |\n   +---------------+---------------+---------------+---------------+\n\
    \   |                     BER Encoded PRI Value                     |\n   +---------------+---------------+---------------+---------------+\n\
    \   As an example, a fictional definition of an IPv4 packet filter class\n   could\
    \ be described using the SMI as follows:\n   ipv4FilterIpFilter OBJECT IDENTIFIER\
    \ ::= { someExampleOID 1 }\n   -- The IP Filter Table\n   ipv4FilterTable OBJECT-TYPE\n\
    \       SYNTAX         SEQUENCE OF Ipv4FilterEntry\n       MAX-ACCESS     not-accessible\n\
    \       STATUS         current\n       DESCRIPTION\n           \"Filter definitions.\
    \  A packet has to match all fields in\n           a filter.  Wildcards may be\
    \ specified for those fields\n           that are not relevant.\"\n       ::=\
    \ { ipv4FilterIpFilter 1 }\n   ipv4FilterEntry OBJECT-TYPE\n       SYNTAX    \
    \     Ipv4FilterEntry\n       MAX-ACCESS     not-accessible\n       STATUS   \
    \      current\n       DESCRIPTION\n           \"An instance of the filter class.\"\
    \n       INDEX { ipv4FilterIndex }\n       ::= { ipv4FilterTable 1 }\n   Ipv4FilterEntry\
    \ ::= SEQUENCE {\n           ipv4FilterIndex        Unsigned32,\n           ipv4FilterDstAddr\
    \      IpAddress,\n           ipv4FilterDstAddrMask  IpAddress,\n           ipv4FilterSrcAddr\
    \      IpAddress,\n           ipv4FilterSrcAddrMask  IpAddress,\n           ipv4FilterDscp\
    \         Integer32,\n           ipv4FilterProtocol     Integer32,\n         \
    \  ipv4FilterDstL4PortMin Integer32,\n           ipv4FilterDstL4PortMax Integer32,\n\
    \           ipv4FilterSrcL4PortMin Integer32,\n           ipv4FilterSrcL4PortMax\
    \ Integer32,\n           ipv4FilterPermit       TruthValue\n   }\n   ipv4FilterIndex\
    \ OBJECT-TYPE\n       SYNTAX         Unsigned32\n       MAX-ACCESS     read-write\n\
    \       STATUS         current\n       DESCRIPTION\n        \"An integer index\
    \ to uniquely identify this filter among all\n         the filters.\"\n      \
    \ ::= { ipv4FilterEntry 1 }\n   ipv4FilterDstAddr OBJECT-TYPE\n       SYNTAX \
    \        IpAddress\n       MAX-ACCESS     read-write\n       STATUS         current\n\
    \       DESCRIPTION\n        \"The IP address to match against the packet's destination\
    \ IP\n        address.\"\n       ::= { ipv4FilterEntry 2 }\n   ipv4FilterDstAddrMask\
    \ OBJECT-TYPE\n       SYNTAX         IpAddress\n       MAX-ACCESS     read-write\n\
    \       STATUS         current\n       DESCRIPTION\n        \"A mask for the matching\
    \ of the destination IP address.\n        A zero bit in the mask means that the\
    \ corresponding bit in\n        the address always matches.\"\n       ::= { ipv4FilterEntry\
    \ 3 }\n   ipv4FilterSrcAddr OBJECT-TYPE\n       SYNTAX         IpAddress\n   \
    \    MAX-ACCESS     read-write\n       STATUS         current\n       DESCRIPTION\n\
    \           \"The IP address to match against the packet's source IP\n       \
    \    address.\"\n       ::= { ipv4FilterEntry 4 }\n   ipv4FilterSrcAddrMask OBJECT-TYPE\n\
    \       SYNTAX         IpAddress\n       MAX-ACCESS     read-write\n       STATUS\
    \         current\n       DESCRIPTION\n           \"A mask for the matching of\
    \ the source IP address.\"\n       ::= { ipv4FilterEntry 5 }\n   ipv4FilterDscp\
    \ OBJECT-TYPE\n       SYNTAX         Integer32 (-1 | 0..63)\n       MAX-ACCESS\
    \     read-write\n       STATUS         current\n       DESCRIPTION\n        \
    \   \"The value that the DSCP in the packet can have and\n           match.  A\
    \ value of -1 indicates that a specific\n           DSCP value has not been defined\
    \ and thus all DSCP values\n           are considered a match.\"\n       ::= {\
    \ ipv4FilterEntry 6 }\n   ipv4FilterProtocol OBJECT-TYPE\n       SYNTAX      \
    \   Integer32 (0..255)\n       MAX-ACCESS     read-write\n       STATUS      \
    \   current\n       DESCRIPTION\n           \"The IP protocol to match against\
    \ the packet's protocol.\n           A value of zero means match all.\"\n    \
    \   ::= { ipv4FilterEntry 7 }\n   ipv4FilterDstL4PortMin OBJECT-TYPE\n       SYNTAX\
    \         Integer32 (0..65535)\n       MAX-ACCESS     read-write\n       STATUS\
    \         current\n       DESCRIPTION\n           \"The minimum value that the\
    \ packet's layer 4 destination\n           port number can have and match this\
    \ filter.\"\n       ::= { ipv4FilterEntry 8 }\n   ipv4FilterDstL4PortMax OBJECT-TYPE\n\
    \       SYNTAX         Integer32 (0..65535)\n       MAX-ACCESS     read-write\n\
    \       STATUS         current\n       DESCRIPTION\n           \"The maximum value\
    \ that the packet's layer 4 destination\n           port number can have and match\
    \ this filter.\"\n       ::= { ipv4FilterEntry 9 }\n   ipv4FilterSrcL4PortMin\
    \ OBJECT-TYPE\n       SYNTAX         Integer32 (0..65535)\n       MAX-ACCESS \
    \    read-write\n       STATUS         current\n       DESCRIPTION\n         \
    \  \"The minimum value that the packet's layer 4 source port\n           number\
    \ can have and match this filter.\"\n       ::= { ipv4FilterEntry 10 }\n   ipv4FilterSrcL4PortMax\
    \ OBJECT-TYPE\n       SYNTAX         Integer32 (0..65535)\n       MAX-ACCESS \
    \    read-write\n       STATUS         current\n       DESCRIPTION\n         \
    \  \"The maximum value that the packet's layer 4 source port\n           number\
    \ can have and match this filter.\"\n       ::= { ipv4FilterEntry 11 }\n   ipv4FilterPermit\
    \ OBJECT-TYPE\n       SYNTAX         TruthValue\n       MAX-ACCESS     read-write\n\
    \       STATUS         current\n       DESCRIPTION\n           \"If false, the\
    \ evaluation is negated.  That is, a\n           valid match will be evaluated\
    \ as not a match and vice\n           versa.\"\n       ::= { ipv4FilterEntry 12\
    \ }\n   A fictional instance of the filter class defined above might then\n  \
    \ be encoded as follows:\n   02 01 08          :ipv4FilterIndex/Unsigned32/Value\
    \ = 8\n   40 04 C0 39 01 05 :ipv4FilterDstAddr/IpAddress/Value = 192.57.1.5\n\
    \   40 04 FF FF FF FF :ipv4FilterDstMask/IpAddress/Value=255.255.255.255\n   40\
    \ 04 00 00 00 00 :ipv4FilterSrcAddr/IpAddress/Value = 0.0.0.0\n   40 04 00 00\
    \ 00 00 :ipv4FilterSrcMask/IpAddress/Value = 0.0.0.0\n   02 01 FF          :ipv4FilterDscp/Integer32/Value\
    \ = -1 (not used)\n   02 01 06          :ipv4FilterProtocol/Integer32/Value =\
    \ 6 (TCP)\n   05 00             :ipv4FilterDstL4PortMin/NULL/not supported\n \
    \  05 00             :ipv4FilterDstL4PortMax/NULL/not supported\n   05 00    \
    \         :ipv4FilterSrcL4PortMin/NULL/not supported\n   05 00             :ipv4FilterSrcL4PortMax/NULL/not\
    \ supported\n   02 01 01          :ipv4FilterPermit/TruthValue/Value = 1 (true)\n\
    \   The entire EPD object for this instance would then be encoded as\n   follows:\n\
    \   00 30                        - Length\n   03                           - S-Num\
    \ = EPD\n   01                           - S-Type = BER\n   02 01 08         \
    \            - ipv4FilterIndex\n   40 04 C0 39 01 05            - ipv4FilterDstAddr\n\
    \   40 04 FF FF FF FF            - ipv4FilterDstMask\n   40 04 00 00 00 00   \
    \         - ipv4FilterSrcAddr\n   40 04 00 00 00 00            - ipv4FilterSrcMask\n\
    \   02 01 FF                     - ipv4FilterDscp\n   02 01 06               \
    \      - ipv4FilterProtocol\n   05 00                        - ipv4FilterDstL4PortMin\n\
    \   05 00                        - ipv4FilterDstL4PortMax\n   05 00          \
    \              - ipv4FilterSrcL4PortMin\n   05 00                        - ipv4FilterSrcL4PortMax\n\
    \   02 01 01                     - ipv4FilterPermit\n   Note that attributes not\
    \ supported within a class are still returned\n   in the EPD for a PRI.  By convention,\
    \ a NULL value is returned for\n   attributes that are not supported.  In the\
    \ previous example, source\n   and destination port number attributes are not\
    \ supported.\n"
- title: 4.4. Global Provisioning Error Object (GPERR)
  contents:
  - "4.4. Global Provisioning Error Object (GPERR)\n   S-Num = 4 (GPERR), S-Type =\
    \ 1 (for BER), Length = 8.\n            0                1               2   \
    \              3\n   +---------------+---------------+---------------+---------------+\n\
    \   |              Length           | S-Num = GPERR | S-Type = BER  |\n   +---------------+---------------+---------------+---------------+\n\
    \   |           Error-Code          |       Error Sub-code          |\n   +---------------+---------------+---------------+---------------+\n\
    \   The global provisioning error object has the same format as the Error\n  \
    \ object in COPS [COPS], except with C-Num and C-Type replaced by the\n   S-Num\
    \ and S-Type values shown.  The global provision error object is\n   used to communicate\
    \ general errors that do not map to a specific PRC.\n   The following global error\
    \ codes are defined:\n     availMemLow(1)\n     availMemExhausted(2)\n     unknownASN.1Tag(3)\
    \     - The erroneous tag type SHOULD be\n                              specified\
    \ in the Error Sub-Code field.\n     maxMsgSizeExceeded(4)  - COPS message (transaction)\
    \ was too big.\n     unknownError(5)\n     maxRequestStatesOpen(6)- No more Request-States\
    \ can be created\n                              by the PEP (in response to a DEC\n\
    \                              message attempting to open a new\n            \
    \                  Request-State).\n     invalidASN.1Length(7)  - An ASN.1 object\
    \ length was incorrect.\n     invalidObjectPad(8)    - Object was not properly\
    \ padded.\n     unknownPIBData(9)      - Some of the data supplied by the PDP\
    \ is\n                              unknown/unsupported by the PEP (but\n    \
    \                          otherwise formatted correctly).  PRC\n            \
    \                  specific error codes are to be used to\n                  \
    \            provide more information.\n     unknownCOPSPRObject(10)- Sub-code\
    \ (octet 2) contains unknown\n                              object's S-Num and\
    \ (octet 3) contains\n                              unknown object's S-Type.\n\
    \     malformedDecision(11)  - Decision could not be parsed.\n"
- title: 4.5. PRC Class Provisioning Error Object (CPERR)
  contents:
  - "4.5. PRC Class Provisioning Error Object (CPERR)\n   S-Num = 5 (CPERR), S-Type\
    \ = 1 (for BER), Length = 8.\n            0                1               2 \
    \                3\n   +---------------+---------------+---------------+---------------+\n\
    \   |              Length           | S-Num = CPERR | S-Type = BER  |\n   +---------------+---------------+---------------+---------------+\n\
    \   |           Error-Code          |       Error Sub-code          |\n   +---------------+---------------+---------------+---------------+\n\
    \   The class-specific provisioning error object has the same format as\n   the\
    \ Error object in COPS [COPS], except with C-Num and C-Type\n   replaced by the\
    \ S-Num and S-Type values shown.  The class-specific\n   error object is used\
    \ to communicate errors relating to specific PRCs\n   and MUST have an associated\
    \ Error PRID Object.\n   The following Generic Class-Specific errors are defined:\n\
    \     priSpaceExhausted(1) -     no more instances may currently be\n        \
    \                        installed in the given class.\n     priInstanceInvalid(2)\
    \ -    the specified class instance is\n                                currently\
    \ invalid prohibiting\n                                installation or removal.\n\
    \     attrValueInvalid(3) -      the specified value for identified\n        \
    \                        attribute is illegal.\n     attrValueSupLimited(4) -\
    \   the specified value for the identified\n                                attribute\
    \ is legal but not currently\n                                supported by the\
    \ device.\n     attrEnumSupLimited(5) -    the specified enumeration for the\n\
    \                                identified attribute is legal but not\n     \
    \                           currently supported by the device.\n     attrMaxLengthExceeded(6)\
    \ - the overall length of the specified\n                                value\
    \ for the identified attribute\n                                exceeds device\
    \ limitations.\n     attrReferenceUnknown(7) -  the class instance specified by\
    \ the\n                                policy instance identifier does not\n \
    \                               exist.\n     priNotifyOnly(8) -         the class\
    \ is currently only supported\n                                for use by request\
    \ or report messages\n                                prohibiting decision installation.\n\
    \     unknownPrc(9) -            attempt to install a PRI of a class not\n   \
    \                             supported by PEP.\n     tooFewAttrs(10) -      \
    \    recvd PRI has fewer attributes than\n                                required.\n\
    \     invalidAttrType(11) -      recvd PRI has an attribute of the wrong\n   \
    \                             type.\n     deletedInRef(12)  -        deleted PRI\
    \ is still referenced by\n                                other (non) deleted\
    \ PRIs\n     priSpecificError(13) -     the Error Sub-code field contains the\n\
    \                                PRC specific error code\n     Where appropriate\
    \ (errors 3, 4, 5, 6, 7 above) the error sub-code\n      SHOULD identify the OID\
    \ sub-identifier of the attribute\n      associated with the error.\n"
- title: 4.6. Error PRID Object (ErrorPRID)
  contents:
  - "4.6. Error PRID Object (ErrorPRID)\n   S-Num = 6 (ErrorPRID), S-Type = 1 (BER),\
    \ Length = variable.\n   This object is used to carry the identifier, or PRID,\
    \ of a\n   Provisioning Instance that caused an installation error or could not\n\
    \   be installed or removed.  The identifier is encoded and formatted\n   exactly\
    \ as in the PRID object as described in section 4.1.\n"
- title: 5. COPS-PR Client-Specific Data Formats
  contents:
  - "5. COPS-PR Client-Specific Data Formats\n   This section describes the format\
    \ of the named client specific\n   information for the COPS policy provisioning\
    \ client.  ClientSI\n   formats are defined for Decision message's Named Decision\
    \ Data\n   object, the Request message's Named ClientSI object and Report\n  \
    \ message's Named ClientSI object.  The actual content of the data is\n   defined\
    \ by the policy information base for a specific provisioning\n   client-type (see\
    \ below).\n"
- title: 5.1. Named Decision Data
  contents:
  - "5.1. Named Decision Data\n   The formats encapsulated by the Named Decision Data\
    \ object for the\n   policy provisioning client-types depends on the type of decision.\n\
    \   Install and Remove are the two types of decisions that dictate the\n   internal\
    \ format of the COPS Named Decision Data object and require\n   its presence.\
    \  Install and Remove refer to the 'Install' and 'Remove'\n   Command-Code, respectively,\
    \ specified in the COPS Decision Flags\n   Object when no Decision Flags are set.\
    \  The data, in general, is\n   composed of one or more bindings.  Each binding\
    \ associates a PRID\n   object and a EPD object.  The PRID object is always present\
    \ in both\n   install and remove decisions, the EPD object MUST be present in\
    \ the\n   case of an install decision and MUST NOT be present in the case of a\n\
    \   remove decision.\n   The format for this data is encapsulated within the COPS\
    \ Named\n   Decision Data object as follows:\n     <Named Decision Data> ::= <<Install\
    \ Decision> |\n                                 <Remove Decision>>\n     <Install\
    \ Decision>    ::= *(<PRID> <EPD>)\n     <Remove Decision>     ::= *(<PRID>|<PPRID>)\n\
    \   Note that PRID objects in a Remove Decision may specify PRID prefix\n   values.\
    \  Explicit and implicit deletion of installed policies is\n   supported by a\
    \ client.  Install Decision data MUST be explicit (i.e.,\n   PRID prefix values\
    \ are illegal and MUST be rejected by a client).\n"
- title: 5.2. ClientSI Request Data
  contents:
  - "5.2. ClientSI Request Data\n   The provisioning client request data will use\
    \ same bindings as\n   described above.  The format for this data is encapsulated\
    \ in the\n   COPS Named ClientSI object as follows:\n   <Named ClientSI: Request>\
    \ ::= <*(<PRID> <EPD>)>\n"
- title: 5.3. Policy Provisioning Report Data
  contents:
  - "5.3. Policy Provisioning Report Data\n   The COPS Named ClientSI object is used\
    \ in the RPT message in\n   conjunction with the accompanying COPS Report Type\
    \ object to\n   encapsulate COPS-PR report information from the PEP to the PDP.\n\
    \   Report types can be 'Success' or 'Failure', indicating to the PDP\n   that\
    \ a particular set of provisioning policies has been either\n   successfully or\
    \ unsuccessfully installed/removed on the PEP, or\n   'Accounting'.\n"
- title: 5.3.1. Success and Failure Report-Type Data Format
  contents:
  - "5.3.1. Success and Failure Report-Type Data Format\n   Report-types can be 'Success'\
    \ or 'Failure' indicating to the PDP that\n   a particular set of provisioning\
    \ policies has been either\n   successfully or unsuccessfully installed/removed\
    \ on the PEP.  The\n   provisioning report data consists of the bindings described\
    \ above and\n   global and specific error/warning information. Specific errors\
    \ are\n   associated with a particular instance.  For a 'Success' Report-Type,\n\
    \   a specific error is an indication of a warning related to a specific\n   policy\
    \ that has been installed, but that is not fully implemented\n   (e.g., its parameters\
    \ have been approximated) as identified by the\n   ErrorPRID object.  For a 'Failure'\
    \ Report-Type, this is an error code\n   specific to a binding, again, identified\
    \ by the ErrorPRID object.\n   Specific errors may also include regular <PRID><EPD>\
    \ bindings to\n   carry additional information in a generic manner so that the\
    \ specific\n   errors/warnings may be more verbosely described and associated\
    \ with\n   the erroneous ErrorPRID object.\n   Global errors are not tied to a\
    \ specific ErrorPRID.  In a 'Success'\n   RPT message, a global error is an indication\
    \ of a general warning at\n   the PEP level (e.g., memory low).  In a 'Failure'\
    \ RPT message, this\n   is an indication of a general error at the PEP level (e.g.,\
    \ memory\n   exhausted).\n   In the case of a 'Failure' Report-Type the PEP MUST\
    \ report at least\n   the first error and SHOULD report as many errors as possible.\
    \  In\n   this case the PEP MUST roll-back its configuration to the last good\n\
    \   transaction before the erroneous Decision message was received.\n   The format\
    \ for this data is encapsulated in the COPS Named ClientSI\n   object as follows:\n\
    \   <Named ClientSI: Report> ::= <[<GPERR>] *(<report>)>\n   <report> ::= <ErrorPRID>\
    \ <CPERR> *(<PRID><EPD>)\n"
- title: 5.3.2. Accounting Report-Type Data Format
  contents:
  - "5.3.2. Accounting Report-Type Data Format\n   Additionally, reports can be used\
    \ to carry accounting information\n   when specifying the 'Accounting' Report-Type.\
    \  This accounting report\n   message will typically carry statistical or event\
    \ information related\n   to the installed configuration for use at the PDP. \
    \ This information\n   is encoded as one or more <PRID><EPD> bindings that generally\n\
    \   describe the accounting information being reported from the PEP to\n   the\
    \ PDP.\n   The format for this data is encapsulated in the COPS Named ClientSI\n\
    \   object as follows:\n   <Named ClientSI: Report> ::= <*(<PRID><EPD>)>\n   NOTE:\
    \ RFC 2748 defines an optional Accounting-Timer (AcctTimer)\n   object for use\
    \ in the COPS Client-Accept message.  Periodic\n   accounting reports for COPS-PR\
    \ clients are also obligated to be paced\n   by this timer.  Periodic accounting\
    \ reports SHOULD NOT be generated\n   by the PEP more frequently than the period\
    \ specified by the COPS\n   AcctTimer.  Thus, the period between new accounting\
    \ reports SHOULD be\n   greater-than or equal-to the period specified (if specified)\
    \ in the\n   AcctTimer.  If no AcctTimer object is specified by the PDP, then\n\
    \   there are no constraints imposed on the PEP's accounting interval.\n"
- title: 6. Common Operation
  contents:
  - "6. Common Operation\n   This section describes, in general, typical exchanges\
    \ between a PDP\n   and Policy Provisioning COPS client.\n   First, a TCP connection\
    \ is established between the client and server\n   and the PEP sends a Client-Open\
    \ message specifying a COPS- PR\n   client-type (use of the ClientSI object within\
    \ the Client-Open\n   message is currently undefined for COPS-PR clients). If\
    \ the PDP\n   supports the specified provisioning client-type, the PDP responds\n\
    \   with a Client-Accept (CAT) message.  If the client-type is not\n   supported,\
    \ a Client-Close (CC) message is returned by the PDP to the\n   PEP, possibly\
    \ identifying an alternate server that is known to\n   support the policy for\
    \ the provisioning client-type specified.\n   After receiving the CAT message,\
    \ the PEP can send requests to the\n   server.  The REQ from a policy provisioning\
    \ client contains a COPS\n   'Configuration Request' context object and, optionally,\
    \ any relevant\n   named client specific information from the PEP.  The information\n\
    \   provided by the PEP should include available client resources (e.g.,\n   supported\
    \ classes/attributes) and default policy configuration\n   information as well\
    \ as incarnation data on existing policy.  The\n   configuration request message\
    \ from a provisioning client serves two\n   purposes.  First, it is a request\
    \ to the PDP for any provisioning\n   configuration data which the PDP may currently\
    \ have that is suitable\n   for the PEP, such as access control filters, etc.,\
    \ given the\n   information the PEP specified in its REQ.  Also, the configuration\n\
    \   request effectively opens a channel that will allow the PDP to\n   asynchronously\
    \ send policy data to the PEP, as the PDP decides is\n   necessary, as long as\
    \ the PEP keeps its request state open (i.e., as\n   long as the PEP does not\
    \ send a DRQ with the request state's Client\n   Handle).  This asynchronous data\
    \ may be new policy data or an update\n   to policy data sent previously.  Any\
    \ relevant changes to the PEP's\n   internal state can be communicated to the\
    \ PDP by the PEP sending an\n   updated REQ message.  The PEP is free to send\
    \ such updated REQ\n   messages at any time after a CAT message to communicate\
    \ changes in\n   its local state.\n   After the PEP sends a REQ, if the PDP has\
    \ Policy Provisioning policy\n   configuration information for the client, that\
    \ information is\n   returned to the client in a DEC message containing the Policy\n\
    \   Provisioning client policy data within the COPS Named Decision Data\n   object\
    \ and specifying an \"Install\" Command-Code in the Decision Flags\n   object.\
    \  If no filters are defined, the DEC message will simply\n   specify that there\
    \ are no filters using the \"NULL Decision\" Command-\n   Code in the Decision\
    \ Flags object.  As the PEP MUST specify a Client\n   Handle in the request message,\
    \ the PDP MUST process the Client Handle\n   and copy it in the corresponding\
    \ decision message.  A DEC message\n   MUST be issued by the PDP with the Solicited\
    \ Message Flag set in the\n   COPS message header, regardless of whether or not\
    \ the PDP has any\n   configuration information for the PEP at the time of the\
    \ request.\n   This is to prevent the PEP from timing out the REQ and deleting\
    \ the\n   Client Handle.\n   The PDP can then add new policy data or update/delete\
    \ existing\n   configurations by sending subsequent unsolicited DEC message(s)\
    \ to\n   the PEP, with the same Client Handle.  Previous configurations\n   installed\
    \ on the PEP are updated by the PDP by simply re-installing\n   the same instance\
    \ of configuration information again (effectively\n   overwriting the old data).\
    \  The PEP is responsible for removing the\n   Client handle when it is no longer\
    \ needed, for example when an\n   interface goes down, and informing the PDP that\
    \ the Client Handle is\n   to be deleted via the COPS DRQ message.\n   For Policy\
    \ Provisioning purposes, access state, and access requests\n   to the policy server\
    \ can be initiated by other sources besides the\n   PEP.  Examples of other sources\
    \ include attached users requesting\n   network services via a web interface into\
    \ a central management\n   application, or H.323 servers requesting resources\
    \ on behalf of a\n   user for a video conferencing application.  When such a request\
    \ is\n   accepted, the edge device affected by the decision (the point where\n\
    \   the flow is to enter the network) needs to be informed of the\n   decision.\
    \  Since the PEP in the edge device did not initiate the\n   request, the specifics\
    \ of the request, e.g., flowspec, packet filter,\n   and PHB to apply, needs to\
    \ be communicated to the PEP by the PDP.\n   This information is sent to the PEP\
    \ using the Decision message\n   containing Policy Provisioning Named Decision\
    \ Data objects in the\n   COPS Decision object as specified.  Any updates to the\
    \ state\n   information, for example in the case of a policy change or call tear\n\
    \   down, is communicated to the PEP by subsequent unsolicited DEC\n   messages\
    \ containing the same Client Handle and the updated Policy\n   Provisioning request\
    \ state.  Updates can specify that policy data is\n   to be installed, deleted,\
    \ or updated (re-installed).\n   PDPs may also command the PEP to open a new Request\
    \ State or delete\n   an exiting one by issuing a decision with the Decision Flags\
    \ object's\n   Request-State flag set.  If the command-code is \"install\", then\
    \ the\n   PDP is commanding the PEP to create a new Request State, and\n   therefore\
    \ issue a new REQ message specifying a new Client Handle or\n   otherwise issue\
    \ a \"Failure\" RPT specifying the appropriate error\n   condition.  Each request\
    \ state represents an independent and\n   logically non-overlapping namespace,\
    \ identified by the Client Handle,\n   on which transactions (a.k.a., configuration\
    \ installations,\n   deletions, updates) may be performed.  Other existing Request\
    \ States\n   will be unaffected by the new request state as they are independent\n\
    \   (thus, no instances of configuration data within one Request State\n   can\
    \ be affected by DECs for another Request State as identified by\n   the Client\
    \ Handle).  If the command-code is \"Remove\", then the PDP is\n   commanding\
    \ the PEP to delete the existing Request-State specified by\n   the DEC message's\
    \ Client Handle, thereby causing the PEP to issue a\n   DRQ message for this Handle.\n\
    \   The PEP MUST acknowledge a DEC message and specify what action was\n   taken\
    \ by sending a RPT message with a \"Success\" or \"Failure\" Report-\n   Type\
    \ object with the Solicited Message Flag set in the COPS message\n   header. \
    \ This serves as an indication to the PDP that the requestor\n   (e.g., H.323\
    \ server) can be notified whether the request has been\n   accepted by the network\
    \ or not.  If the PEP needs to reject the DEC\n   operation for any reason, a\
    \ RPT message is sent with a Report-Type\n   with the value \"Failure\" and optionally\
    \ a Client Specific Information\n   object specifying the policy data that was\
    \ rejected.  Under such\n   solicited report failure conditions, the PEP MUST\
    \ always rollback to\n   its previously installed (good) state as if the DEC never\
    \ occurred.\n   The PDP is then free to modify its decision and try again.\n \
    \  The PEP can report to the PDP the current status of any installed\n   request\
    \ state when appropriate.  This information is sent in a\n   Report-State (RPT)\
    \ message with the \"Accounting\" flag set.  The\n   request state that is being\
    \ reported is identified via the associated\n   Client Handle in the report message.\n\
    \   Finally, Client-Close (CC) messages are used to cancel the\n   corresponding\
    \ Client-Open message.  The CC message informs the other\n   side that the client-type\
    \ specified is no longer supported.\n"
- title: 7. Fault Tolerance
  contents:
  - "7. Fault Tolerance\n   When communication is lost between PEP and PDP, the PEP\
    \ attempts to\n   re-establish the TCP connection with the PDP it was last connected\n\
    \   to.  If that server cannot be reached, then the PEP attempts to\n   connect\
    \ to a secondary PDP, assumed to be manually configured (or\n   otherwise known)\
    \ at the PEP.\n   When a connection is finally re-established with a PDP, the\
    \ PEP sends\n   a OPN message with a <LastPDPAddr> object providing the address\
    \ of\n   the most recent PDP for which it is still caching decisions.  If no\n\
    \   decisions are being cached on the PEP (due to reboot or TTL timeout\n   of\
    \ state) the PEP MUST NOT include the last PDP address information.\n   Based\
    \ on this object, the PDP may request the PEP to re-synch its\n   current state\
    \ information (by issuing a COPS SSQ message).  If, after\n   re-connecting, the\
    \ PDP does not request synchronization, the client\n   can assume the server recognizes\
    \ it and the current state at the PEP\n   is correct, so a REQ message need not\
    \ be sent.  Still, any state\n   changes which occurred at the PEP that the PEP\
    \ could not communicate\n   to the PDP due to communication having been lost,\
    \ MUST be reported to\n   the PDP via the PEP sending an updated REQ message.\
    \  Whenever re-\n   synchronization is requested, the PEP MUST reissue any REQ\
    \ messages\n   for all known Request-States and the PDP MUST issue DEC messages\
    \ to\n   delete either individual PRIDs or prefixes as appropriate to ensure a\n\
    \   consistent known state at the PEP.\n   While the PEP is disconnected from\
    \ the PDP, the active request-state\n   at the PEP is to be used for policy decisions.\
    \  If the PEP cannot\n   re-connect in some pre-specified period of time, all\
    \ installed\n   Request-States are to be deleted and their associated Handles\n\
    \   removed.  The same holds true for the PDP; upon detecting a failed\n   TCP\
    \ connection, the time-out timer is started for all Request-States\n   associated\
    \ with the PEP and these states are removed after the\n   administratively specified\
    \ period without a connection.\n"
- title: 8. Security Considerations
  contents:
  - "8. Security Considerations\n   The COPS protocol [COPS], from which this document\
    \ derives, describes\n   the mandatory security mechanisms that MUST be supported\
    \ by all COPS\n   implementations.  These mandatory security mechanisms are used\
    \ by the\n   COPS protocol to transfer opaque information from PEP to PDP and\
    \ vice\n   versa in an authenticated and secure manner.  COPS for Policy\n   Provisioning\
    \ simply defines a structure for this opaque information\n   already carried by\
    \ the COPS protocol.  As such, the security\n   mechanisms described for the COPS\
    \ protocol will also be deployed in a\n   COPS-PR environment, thereby ensuring\
    \ the integrity of the COPS-PR\n   information being communicated.  Furthermore,\
    \ in order to fully\n   describe a practical set of structured data for use with\
    \ COPS-PR, a\n   PIB (Policy Information Base) will likely be written in a separate\n\
    \   document.  The authors of such a PIB document need to be aware of the\n  \
    \ security concerns associated with the specific data they have\n   defined. \
    \ These concerns MUST be fully specified in the security\n   considerations section\
    \ of the PIB document along with the required\n   security mechanisms for  transporting\
    \ this newly defined data.\n"
- title: 9. IANA Considerations
  contents:
  - "9. IANA Considerations\n   COPS for Policy Provisioning follows the same IANA\
    \ considerations for\n   COPS objects as the base COPS protocol [COPS].  COPS-PR\
    \ has defined\n   one additional Decision Flag value of 0x02, extending the COPS\
    \ base\n   protocol only by this one value.  No new COPS Client- Types are\n \
    \  defined by this document.\n   COPS-PR also introduces a new object number space\
    \ with each object\n   being identified by its S-Num and S-Type value pair.  These\
    \ objects\n   are encapsulated within the existing COPS Named ClientSI or Named\n\
    \   Decision Data objects [COPS] and, therefore, do not conflict with any\n  \
    \ assigned numbers in the COPS base protocol.  Additional S-Num and S-\n   Type\
    \ pairs can only be added to COPS-PR using the IETF Consensus rule\n   as defined\
    \ in [IANA].  These two numbers are always to be treated as\n   a pair, with one\
    \ or more S-Types defined per each S-Num.  This\n   document defines the S-Num\
    \ values 1-6 and the S-Type 1 for each of\n   these six values (note that the\
    \ S-Type value of 2 is reserved for\n   transport of XML encoded data).  A listing\
    \ of all the S-Num and S-\n   Type pairs defined by this document can be found\
    \ in sections 4.1-4.6.\n   Likewise, additional Global Provisioning error codes\
    \ and Class-\n   Specific Provisioning error codes defined for COPS-PR can only\
    \ be\n   added with IETF Consensus.  This document defines the Global\n   Provisioning\
    \ error code values 1-11 in section 4.4 for the Global\n   Provisioning Error\
    \ Object (GPERR).  This document also defines the\n   Class-Specific error code\
    \ values 1-13 in section 4.5 for the Class\n   Provisioning Error Object (CPERR).\n"
- title: 10. Acknowledgements
  contents:
  - "10. Acknowledgements\n   This document has been developed with active involvement\
    \ from a\n   number of sources.  The authors would specifically like to\n   acknowledge\
    \ the valuable input given by Michael Fine, Scott Hahn, and\n   Carol Bell.\n"
- title: 11. References
  contents:
  - "11. References\n   [COPS]    Boyle, J., Cohen, R., Durham, D., Herzog, S., Raja,\
    \ R. and\n             A. Sastry, \"The COPS (Common Open Policy Service)\n  \
    \           Protocol\", RFC 2748, January 2000.\n   [RAP]     Yavatkar, R., Pendarakis,\
    \ D. and R. Guerin, \"A Framework\n             for Policy Based Admission Control\"\
    , RFC 2753, January\n             2000.\n   [COPRSVP] Boyle, J., Cohen, R., Durham,\
    \ D., Herzog, S., Raja, R. and\n             A. Sastry, \"COPS usage for RSVP\"\
    , RFC 2749, January 2000.\n   [ASN1]    Information processing systems - Open\
    \ Systems\n             Interconnection, \"Specification of Abstract Syntax Notation\n\
    \             One (ASN.1)\", International Organization for\n             Standardization,\
    \ International Standard 8824, December\n             1987.\n   [BER]     Information\
    \ processing systems - Open Systems\n             Interconnection - Specification\
    \ of Basic Encoding Rules for\n             Abstract Syntax Notation One (ASN.1),\
    \ International\n             Organization for Standardization. International\
    \ Standard\n             8825, (December, 1987).\n   [RFC2475] Blake, S., Black,\
    \ D., Carlson, M., Davies, E., Wang, Z. and\n             W. Weiss, \"An Architecture\
    \ for Differentiated Service,\" RFC\n             2475, December 1998.\n   [SPPI]\
    \    McCloghrie, K., Fine, M., Seligson, J., Chan, K., Hahn, S.,\n           \
    \  Sahita, R., Smith, A. and F. Reichmeyer, \"Structure of\n             Policy\
    \ Provisioning Information SPPI\", Work in Progress.\n   [V2SMI]   McCloghrie,\
    \ K., Perkins, D., Schoenwaelder, J., Case, J.,\n             Rose, M. and S.\
    \ Waldbusser, \"Structure of Management\n             Information Version 2(SMIv2)\"\
    , STD 58, RFC 2578, April\n             1999.\n   [RFC2234] Crocker, D. and P.\
    \ Overell, \"Augmented BNF for Syntax\n             Specifications: ABNF\", RFC\
    \ 2234, November 1997.\n   [IANA]    Alvestrand, H. and T. Narten, \"Guidelines\
    \ for writing an\n             IANA Considerations Section in RFCs\", BCP 26,\
    \ RFC 2434,\n             October 1998.\n   [URN]     Moats, R., \"Uniform Resource\
    \ Names (URN) Syntax\", RFC 2141,\n             May 1997.\n   [XML]     World\
    \ Wide Web Consortium (W3C), \"Extensible Markup\n             Language (XML),\"\
    \ W3C Recommendation, February, 1998,\n             http://www.w3.org/TR/1998/REC-xml-19980210.\n"
- title: 12. Authors' Addresses
  contents:
  - "12. Authors' Addresses\n   Kwok Ho Chan\n   Nortel Networks, Inc.\n   600 Technology\
    \ Park Drive\n   Billerica, MA 01821\n   Phone: (978) 288-8175\n   EMail: khchan@nortelnetworks.com\n\
    \   David Durham\n   Intel\n   2111 NE 25th Avenue\n   Hillsboro, OR 97124\n \
    \  Phone: (503) 264-6232\n   Email: david.durham@intel.com\n   Silvano Gai\n \
    \  Cisco Systems, Inc.\n   170 Tasman Dr.\n   San Jose, CA 95134-1706\n   Phone:\
    \ (408) 527-2690\n   EMail: sgai@cisco.com\n   Shai Herzog\n   IPHighway Inc.\n\
    \   69 Milk Street, Suite 304\n   Westborough, MA 01581\n   Phone: (914) 654-4810\n\
    \   EMail: Herzog@iphighway.com\n   Keith McCloghrie\n   Phone: (408) 526-5260\n\
    \   EMail: kzm@cisco.com\n   Francis Reichmeyer\n   PFN, Inc.\n   University Park\
    \ at MIT\n   26 Landsdowne Street\n   Cambridge, MA 02139\n   Phone: (617) 494\
    \ 9980\n   EMail: franr@pfn.com\n   John Seligson\n   Nortel Networks, Inc.\n\
    \   4401 Great America Parkway\n   Santa Clara, CA 95054\n   Phone: (408) 495-2992\n\
    \   Email: jseligso@nortelnetworks.com\n   Raj Yavatkar\n   Phone: (503) 264-9077\n\
    \   EMail: raj.yavatkar@intel.com\n   Andrew Smith\n   Allegro Networks\n   6399\
    \ San Ignacio Ave.\n   San Jose, CA 95119, USA\n   EMail: andrew@allegronetworks.com\n"
- title: 13. Full Copyright Statement
  contents:
  - "13. Full Copyright Statement\n   Copyright (C) The Internet Society (2001). \
    \ All Rights Reserved.\n   This document and translations of it may be copied\
    \ and furnished to\n   others, and derivative works that comment on or otherwise\
    \ explain it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
