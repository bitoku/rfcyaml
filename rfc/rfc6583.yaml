- title: __initial_text__
  contents:
  - '                Operational Neighbor Discovery Problems

    '
- title: Abstract
  contents:
  - "Abstract\n   In IPv4, subnets are generally small, made just large enough to\
    \ cover\n   the actual number of machines on the subnet.  In contrast, the\n \
    \  default IPv6 subnet size is a /64, a number so large it covers\n   trillions\
    \ of addresses, the overwhelming number of which will be\n   unassigned.  Consequently,\
    \ simplistic implementations of Neighbor\n   Discovery (ND) can be vulnerable\
    \ to deliberate or accidental denial\n   of service (DoS), whereby they attempt\
    \ to perform address resolution\n   for large numbers of unassigned addresses.\
    \  Such denial-of-service\n   attacks can be launched intentionally (by an attacker)\
    \ or result from\n   legitimate operational tools or accident conditions.  As\
    \ a result of\n   these vulnerabilities, new devices may not be able to \"join\"\
    \ a\n   network, it may be impossible to establish new IPv6 flows, and\n   existing\
    \ IPv6 transported flows may be interrupted.\n   This document describes the potential\
    \ for DoS in detail and suggests\n   possible implementation improvements as well\
    \ as operational\n   mitigation techniques that can, in some cases, be used to\
    \ protect\n   against or at least alleviate the impact of such attacks.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document is not an Internet Standards Track specification;\
    \ it is\n   published for informational purposes.\n   This document is a product\
    \ of the Internet Engineering Task Force\n   (IETF).  It represents the consensus\
    \ of the IETF community.  It has\n   received public review and has been approved\
    \ for publication by the\n   Internet Engineering Steering Group (IESG).  Not\
    \ all documents\n   approved by the IESG are a candidate for any level of Internet\n\
    \   Standard; see Section 2 of RFC 5741.\n   Information about the current status\
    \ of this document, any errata,\n   and how to provide feedback on it may be obtained\
    \ at\n   http://www.rfc-editor.org/info/rfc6583.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2012 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................3\n\
    \      1.1. Applicability ..............................................3\n  \
    \ 2. The Problem .....................................................3\n   3.\
    \ Terminology .....................................................4\n   4. Background\
    \ ......................................................5\n   5. Neighbor Discovery\
    \ Overview .....................................6\n   6. Operational Mitigation\
    \ Options ..................................7\n      6.1. Filtering of Unused\
    \ Address Space ..........................7\n      6.2. Minimal Subnet Sizing\
    \ ......................................7\n      6.3. Routing Mitigation .........................................8\n\
    \      6.4. Tuning of the NDP Queue Rate Limit .........................8\n  \
    \ 7. Recommendations for Implementors ................................8\n    \
    \  7.1. Prioritize NDP Activities ..................................9\n      7.2.\
    \ Queue Tuning ..............................................10\n   8. Security\
    \ Considerations ........................................11\n   9. Acknowledgements\
    \ ...............................................11\n   10. References ....................................................11\n\
    \      10.1. Normative References .....................................11\n  \
    \    10.2. Informative References ...................................11\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   This document describes implementation issues with IPv6's\
    \ Neighbor\n   Discovery protocol that can result in vulnerabilities when a network\n\
    \   is scanned, either by an intruder or through the use of scanning\n   tools\
    \ that perform network inventory, security audits, etc. (e.g.,\n   \"nmap\").\n\
    \   This document describes the problem in detail, suggests possible\n   implementation\
    \ improvements, as well as operational mitigation\n   techniques, that can, in\
    \ some cases, protect against such attacks.\n   The RFCs generally describe the\
    \ behavior of protocols, that is,\n   \"what\" is to be done by a protocol, but\
    \ not exactly \"how\" it is to be\n   implemented.  The exact details of how best\
    \ to implement a protocol\n   will depend on the overall hardware and software\
    \ architecture of a\n   particular device.  The actual \"how\" decisions are (correctly)\
    \ left\n   in the hands of implementors, so long as implementation differences\n\
    \   will generally produce proper on-the-wire behavior.\n   While reading this\
    \ document, it is important to keep in mind that\n   discussions of how things\
    \ have been implemented beyond basic\n   compliance with the specification is\
    \ not within the scope of the\n   Neighbor Discovery RFCs.\n"
- title: 1.1.  Applicability
  contents:
  - "1.1.  Applicability\n   This document is primarily intended for operators of\
    \ IPV6 networks\n   and implementors of [RFC4861].  The document provides some\n\
    \   operational considerations as well as recommendations to increase the\n  \
    \ resilience of the Neighbor Discovery protocol.\n"
- title: 2.  The Problem
  contents:
  - "2.  The Problem\n   In IPv4, subnets are generally small, made just large enough\
    \ to cover\n   the actual number of machines on the subnet.  For example, an IPv4\n\
    \   /20 contains only 4096 address.  In contrast, the default IPv6 subnet\n  \
    \ size is a /64, a number so large it covers literally billions of\n   billions\
    \ of addresses, the overwhelming majority of which will be\n   unassigned.  Consequently,\
    \ simplistic implementations of Neighbor\n   Discovery may fail to perform as\
    \ desired when they perform address\n   resolution of large numbers of unassigned\
    \ addresses.  Such failures\n   can be triggered either intentionally by an attacker\
    \ launching a\n   denial-of-service attack (DoS) [RFC4732] to exploit this\n \
    \  vulnerability or unintentionally due to the use of legitimate\n   operational\
    \ tools that scan networks for inventory and other\n   purposes.  As a result\
    \ of these failures, new devices may not be able\n   to \"join\" a network, it\
    \ may be impossible to establish new IPv6\n   flows, and existing IPv6 transport\
    \ flows may be interrupted.\n   Network scans attempt to find and probe devices\
    \ on a network.\n   Typically, scans are performed on a range of target addresses,\
    \ or all\n   the addresses on a particular subnet.  When such probes are directed\n\
    \   via a router, and the target addresses are on a directly attached\n   network,\
    \ the router will attempt to perform address resolution on a\n   large number\
    \ of destinations (i.e., some fraction of the 2^64\n   addresses on the subnet).\
    \  The router's process of testing for the\n   (non)existence of neighbors can\
    \ induce a denial-of-service condition,\n   where the number of necessary Neighbor\
    \ Discovery requests overwhelms\n   the implementation's capacity to process them,\
    \ exhausts available\n   memory and replaces existing in-use mappings with incomplete\
    \ entries\n   that will never be completed.  A directed DoS attack may seek to\n\
    \   intentionally create similar conditions to those created\n   unintentionally\
    \ by a network scan.  The resulting network disruption\n   may impact existing\
    \ traffic, and devices that join the network may\n   find that address resolution\
    \ attempts fail.  The DoS as a consequence\n   of network scanning was previously\
    \ described in [RFC5157].\n   In order to mitigate risk associated with this DoS\
    \ threat, some\n   router implementations have taken steps to rate-limit the processing\n\
    \   rate of Neighbor Solicitations (NS).  While these mitigations do\n   help,\
    \ they do not fully address the issue and may introduce their own\n   set of issues\
    \ to the Neighbor Discovery process.\n"
- title: 3.  Terminology
  contents:
  - "3.  Terminology\n   Address Resolution:  Address resolution is the process through\
    \ which\n      a node determines the link-layer address of a neighbor given only\n\
    \      its IP address.  In IPv6, address resolution is performed as part\n   \
    \   of Neighbor Discovery [RFC4861], Section 7.2.\n   Forwarding Plane:  The part\
    \ of a router responsible for forwarding\n      packets.  In higher-end routers,\
    \ the forwarding plane is typically\n      implemented in specialized hardware\
    \ optimized for performance.\n      Steps in the forwarding process include determining\
    \ the correct\n      outgoing interface for a packet, decrementing its Time To\
    \ Live\n      (TTL), verifying and updating the checksum, placing the correct\n\
    \      link-layer header on the packet, and forwarding it.\n   Control Plane:\
    \  The part of the router implementation that maintains\n      the data structures\
    \ that determine where packets should be\n      forwarded.  The control plane\
    \ is typically implemented as a\n      \"slower\" software process running on\
    \ a general purpose processor\n      and is responsible for such functions as\
    \ communicating network\n      status changes via routing protocols, maintaining\
    \ the forwarding\n      table, performing management, and resolving the correct\
    \ link-layer\n      address for adjacent neighbors.  The control plane \"controls\"\
    \ the\n      forwarding plane by programming it with the information needed for\n\
    \      packet forwarding.\n   Neighbor Cache:  As described in [RFC4861], the\
    \ data structure that\n      holds the cache of (amongst other things) IP address\
    \ to link-layer\n      address mappings for connected nodes.  As the information\
    \ in the\n      Neighbor Cache is needed by the forwarding plane every time it\n\
    \      forwards a packet, it is usually implemented in an Application-\n     \
    \ specific Integrated Circuit (ASIC).\n   Neighbor Discovery Process:  The Neighbor\
    \ Discovery Process (NDP) is\n      that part of the control plane that implements\
    \ the Neighbor\n      Discovery protocol.  NDP is responsible for performing address\n\
    \      resolution and maintaining the Neighbor Cache.  When forwarding\n     \
    \ packets, the forwarding plane accesses entries within the Neighbor\n      Cache.\
    \  When the forwarding plane processes a packet for which the\n      corresponding\
    \ Neighbor Cache Entry (NCE) is missing or incomplete,\n      it notifies NDP\
    \ to take appropriate action (typically via a shared\n      queue).  NDP picks\
    \ up requests from the shared queue and performs\n      any necessary discovery\
    \ action.  In many implementations, the NDP\n      is also responsible for responding\
    \ to router solicitation\n      messages, Neighbor Unreachability Detection (NUD),\
    \ etc.\n"
- title: 4.  Background
  contents:
  - "4.  Background\n   Modern router architectures separate the forwarding of packets\n\
    \   (forwarding plane) from the decisions needed to decide where the\n   packets\
    \ should go (control plane).  In order to deal with the high\n   number of packets\
    \ per second, the forwarding plane is generally\n   implemented in hardware and\
    \ is highly optimized for the task of\n   forwarding packets.  In contrast, the\
    \ NDP control plane is mostly\n   implemented in software processes running on\
    \ a general purpose\n   processor.\n   When a router needs to forward an IP packet,\
    \ the forwarding plane\n   logic performs the longest match lookup to determine\
    \ where to send\n   the packet and what outgoing interface to use.  To deliver\
    \ the packet\n   to an adjacent node, the forwarding plane encapsulates the packet\
    \ in\n   a link-layer frame (which contains a header with the link-layer\n   destination\
    \ address).  The forwarding plane logic checks the Neighbor\n   Cache to see if\
    \ it already has a suitable link-layer destination, and\n   if not, places the\
    \ request for the required information into a queue,\n   and signals the control\
    \ plane (i.e., NDP) that it needs the link-\n   layer address resolved.\n   In\
    \ order to protect NDP specifically and the control plane generally\n   from being\
    \ overwhelmed with these requests, appropriate steps must be\n   taken.  For example,\
    \ the size and fill rate of the queue might be\n   limited.  NDP running in the\
    \ control plane of the router dequeues\n   requests and performs the address resolution\
    \ function (by performing\n   a neighbor solicitation and listening for a neighbor\
    \ advertisement).\n   This process is usually also responsible for other activities\
    \ needed\n   to maintain link-layer information, such as Neighbor Unreachability\n\
    \   Detection (NUD).\n   By sending appropriate packets to addresses on a given\
    \ subnet, an\n   attacker can cause the router to queue attempts to resolve so\
    \ many\n   addresses that it crowds out attempts to resolve \"legitimate\"\n \
    \  addresses (and in many cases becomes unable to perform maintenance of\n   existing\
    \ entries in the Neighbor Cache, and unable to answer Neighbor\n   Solicitation).\
    \  This condition can result in the inability to resolve\n   new neighbors and\
    \ loss of reachability to neighbors with existing\n   NCEs.  During testing, it\
    \ was concluded that four simultaneous nmap\n   sessions from a low-end computer\
    \ were sufficient to make a router's\n   Neighbor Discovery process unusable;\
    \ therefore, forwarding became\n   unavailable to the destination subnets.\n \
    \  The failure to maintain proper NDP behavior whilst under attack has\n   been\
    \ observed across multiple platforms and implementations,\n   including the largest\
    \ modern router platforms available (at the\n   inception of work on this document).\n"
- title: 5.  Neighbor Discovery Overview
  contents:
  - "5.  Neighbor Discovery Overview\n   When a packet arrives at (or is generated\
    \ by) a router for a\n   destination on an attached link, the router needs to\
    \ determine the\n   correct link-layer address to use in the destination field\
    \ of the\n   Layer 2 encapsulation.  The router checks the Neighbor Cache for\
    \ an\n   existing Neighbor Cache Entry for the neighbor, and if none exists,\n\
    \   invokes the address resolution portions of the IPv6 Neighbor\n   Discovery\
    \ [RFC4861] protocol to determine the link-layer address of\n   the neighbor.\n\
    \   [RFC4861], Section 5.2, outlines how this process works.  A very\n   high-level\
    \ summary is that the device creates a new Neighbor Cache\n   Entry for the neighbor,\
    \ sets the state to INCOMPLETE, queues the\n   packet, and initiates the actual\
    \ address resolution process.  The\n   device then sends out one or more Neighbor\
    \ Solicitations, and when it\n   receives a corresponding Neighbor Advertisement,\
    \ completes the\n   Neighbor Cache Entry and sends the queued packet.\n"
- title: 6.  Operational Mitigation Options
  contents:
  - "6.  Operational Mitigation Options\n   This section provides some feasible mitigation\
    \ options that can be\n   employed today by network operators in order to protect\
    \ network\n   availability while vendors implement more effective protection\n\
    \   measures.  It can be stated that some of these options are \"kludges\",\n\
    \   and can be operationally difficult to manage.  They are presented, as\n  \
    \ they represent options we currently have.  It is each operator's\n   responsibility\
    \ to evaluate and understand the impact of changes to\n   their network due to\
    \ these measures.\n"
- title: 6.1.  Filtering of Unused Address Space
  contents:
  - "6.1.  Filtering of Unused Address Space\n   The DoS condition is induced by making\
    \ a router try to resolve\n   addresses on the subnet at a high rate.  By carefully\
    \ addressing\n   machines into a small portion of a subnet (such as the lowest\n\
    \   numbered addresses), it is possible to filter access to addresses not\n  \
    \ in that assigned portion of address space using Access Control Lists\n   (ACLs),\
    \ or by null routing, features which are available on most\n   existing platforms.\
    \  This will prevent the attacker from making the\n   router attempt to resolve\
    \ unused addresses.  For example, if there\n   are only 50 hosts connected to\
    \ an interface, you may be able to\n   filter any address above the first 64 addresses\
    \ of that subnet by\n   null-routing the subnet carrying a more specific /122\
    \ route or by\n   applying ACLs on the WAN link to prevent the attack traffic\
    \ reaching\n   the vulnerable device.\n   As mentioned at the beginning of this\
    \ section, it is fully understood\n   that this is ugly (and difficult to manage);\
    \ but failing other\n   options, it may be a useful technique especially when\
    \ responding to\n   an attack.\n   This solution requires that the hosts be statically\
    \ or statefully\n   addressed (as is often done in a datacenter), and they may\
    \ not\n   interact well with networks using [RFC4862].\n"
- title: 6.2.  Minimal Subnet Sizing
  contents:
  - "6.2.  Minimal Subnet Sizing\n   By sizing subnets to reflect the number of addresses\
    \ actually in use,\n   the problem can be avoided.  For example, [RFC6164] recommends\
    \ sizing\n   the subnets for inter-router links so they only have two addresses\
    \ (a\n   /127).  It is worth noting that this practice is common in IPv4\n   networks,\
    \ in part to protect against the harmful effects of Address\n   Resolution Protocol\
    \ (ARP) request flooding.\n   Subnet prefixes longer than a /64 are not able to\
    \ use stateless auto-\n   configuration [RFC4862], so this approach is not suitable\
    \ for use\n   with hosts that are not statically configured.\n"
- title: 6.3.  Routing Mitigation
  contents:
  - "6.3.  Routing Mitigation\n   One very effective technique is to route the subnet\
    \ to a discard\n   interface (most modern router platforms can discard traffic\
    \ in\n   hardware / the forwarding plane) and then have individual hosts\n   announce\
    \ routes for their IP addresses into the network (or use some\n   method to inject\
    \ much more specific addresses into the local routing\n   domain).  For example,\
    \ the network 2001:db8:1:2:3::/64 could be\n   routed to a discard interface on\
    \ \"border\" routers, and then\n   individual hosts could announce 2001:db8:1:2:3::10/128,\
    \ 2001:db8:1:2:\n   3::66/128 into the IGP.  This is typically done by having\
    \ the IP\n   address bound to a virtual interface on the host (for example, the\n\
    \   loopback interface), enabling IP forwarding on the host and having it\n  \
    \ run a routing daemon.  For obvious reasons, host participation in the\n   IGP\
    \ makes many operators uncomfortable, but it can be a very powerful\n   technique\
    \ if used in a disciplined and controlled manner.  One method\n   to help address\
    \ these concerns is to have the hosts participate in a\n   different IGP (or difference\
    \ instance of the same IGP) and carefully\n   redistribute into the main IGP.\n"
- title: 6.4.  Tuning of the NDP Queue Rate Limit
  contents:
  - "6.4.  Tuning of the NDP Queue Rate Limit\n   Many implementations provide a means\
    \ to control the rate of\n   resolution of unknown addresses.  By tuning this\
    \ rate, it may be\n   possible to ameliorate the issue, as with most tuning knobs\n\
    \   (especially those that deal with rate-limiting), the attack may be\n   completed\
    \ more quickly due to the lower threshold.  By excessively\n   lowering this rate,\
    \ you may negatively impact how long the device\n   takes to learn new addresses\
    \ under normal conditions (for example,\n   after clearing the Neighbor Cache\
    \ or when the router first boots).\n   Under attack conditions, you may be unable\
    \ to resolve \"legitimate\"\n   addresses sooner than if you had just left the\
    \ parameter untouched.\n   It is worth noting that this technique is worth investigating\
    \ only if\n   the device has separate queues for resolution of unknown addresses\n\
    \   and the maintenance of existing entries.\n"
- title: 7.  Recommendations for Implementors
  contents:
  - "7.  Recommendations for Implementors\n   This section provides some recommendations\
    \ to implementors of IPv6\n   Neighbor Discovery.\n   At a high-level, implementors\
    \ should program defensively.  That is,\n   they should assume that attackers\
    \ will attempt to exploit\n   implementation weaknesses, and they should ensure\
    \ that\n   implementations are robust to various attacks.  In the case of\n  \
    \ Neighbor Discovery, the following general considerations apply:\n   Manage Resources\
    \ Explicitly:  Resources such as processor cycles,\n      memory, etc., are never\
    \ infinite, yet with IPv6's large subnets,\n      it is easy to cause NDP to generate\
    \ large numbers of address\n      resolution requests for nonexistent destinations.\
    \  Implementations\n      need to limit resources devoted to processing Neighbor\
    \ Discovery\n      requests in a thoughtful manner.\n   Prioritize:  Some NDP\
    \ requests are more important than others.  For\n      example, when resources\
    \ are limited, responding to Neighbor\n      Solicitations for one's own address\
    \ is more important than\n      initiating address resolution requests that create\
    \ new entries.\n      Likewise, performing Neighbor Unreachability Detection,\
    \ which by\n      definition is only invoked on destinations that are actively\
    \ being\n      used, is more important than creating new entries for possibly\n\
    \      nonexistent neighbors.\n"
- title: 7.1.  Prioritize NDP Activities
  contents:
  - "7.1.  Prioritize NDP Activities\n   Not all Neighbor Discovery activities are\
    \ equally important.\n   Specifically, requests to perform large numbers of address\n\
    \   resolutions on non-existent Neighbor Cache Entries should not come at\n  \
    \ the expense of servicing requests related to keeping existing, in-use\n   entries\
    \ properly up to date.  Thus, implementations should divide\n   work activities\
    \ into categories having different priorities.  The\n   following gives examples\
    \ of different activities and their importance\n   in rough priority order.  If\
    \ implemented, the operation and priority\n   of these should be configurable\
    \ by the operator.\n   1.  It is critical to respond to Neighbor Solicitations\
    \ for one's own\n       address, especially for a router.  Whether for address\
    \ resolution\n       or Neighbor Unreachability Detection, failure to respond\
    \ to\n       Neighbor Solicitations results in immediate problems.  Failure to\n\
    \       respond to NS requests that are part of NUD can cause neighbors\n    \
    \   to delete the NCE for that address and will result in follow-up\n       NS\
    \ messages using multicast.  Once an entry has been flushed,\n       existing\
    \ traffic for destinations using that entry can no longer\n       be forwarded\
    \ until address resolution completes successfully.  In\n       other words, not\
    \ responding to NS messages further increases the\n       NDP load and causes\
    \ ongoing communication to fail.\n   2.  It is critical to revalidate one's own\
    \ existing NCEs in need of\n       refresh.  As part of NUD, ND is required to\
    \ frequently revalidate\n       existing, in-use entries.  Failure to do so can\
    \ result in the\n       entry being discarded.  For in-use entries, discarding\
    \ the entry\n       will almost certainly result in a subsequent request to perform\n\
    \       address resolution on the entry, but this time using multicast.\n    \
    \   As above, once the entry has been flushed, existing traffic for\n       destinations\
    \ using that entry can no longer be forwarded until\n       address resolution\
    \ completes successfully.\n   3.  To maintain the stability of the control plane,\
    \ Neighbor\n       Discovery activity related to traffic sourced by the router\
    \ (as\n       opposed to traffic being forwarded by the router) should be given\n\
    \       high priority.  Whenever network problems occur, debugging and\n     \
    \  making other operational changes requires being able to query and\n       access\
    \ the router.  In addition, routing protocols dependent on\n       Neighbor Discovery\
    \ for connectivity may begin to react\n       (negatively) to perceived connectivity\
    \ problems, causing\n       additional undesirable ripple effects.\n   4.  Traffic\
    \ to unknown addresses should be given lowest priority.\n       Indeed, it may\
    \ be useful to distinguish between \"never seen\"\n       addresses and those\
    \ that have been seen before, but that do not\n       have a corresponding NCE.\
    \  Specifically, the conceptual\n       processing algorithm in IPv6 Neighbor\
    \ Discovery [RFC4861] calls\n       for deleting NCEs under certain conditions.\
    \  Rather than delete\n       them completely, however, it might be useful to\
    \ at least keep\n       track of the fact that an entry at one time existed, in\
    \ order to\n       prioritize address resolution requests for such neighbors\n\
    \       compared with neighbors that have never been seen before.\n"
- title: 7.2.  Queue Tuning
  contents:
  - "7.2.  Queue Tuning\n   On implementations in which requests to NDP are submitted\
    \ via a\n   single queue, router vendors should provide operators with means to\n\
    \   control both the rate of link-layer address resolution requests\n   placed\
    \ into the queue and the size of the queue.  This will allow\n   operators to\
    \ tune Neighbor Discovery for their specific environment.\n   The ability to set,\
    \ or have per-interface or per-prefix queue limits\n   at a rate below that of\
    \ the global queue limit might restrict the\n   damage to the Neighbor Discovery\
    \ processing to the network targeted\n   by the attack.\n   Setting those values\
    \ must be a very careful balancing act -- the\n   lower the rate of entry into\
    \ the queue, the less load there will be\n   on the ND process; however, it will\
    \ take the router longer to learn\n   legitimate destinations as a result.  In\
    \ a datacenter with 6,000\n   hosts attached to a single router, setting that\
    \ value to be under\n   1000 would mean that resolving all of the addresses from\
    \ an initial\n   state (or something that invalidates the address cache, such\
    \ as a\n   Spanning Tree Protocol (STP) Topology Change Notification (TCN)) may\n\
    \   take over 6 seconds.  Similarly, the lower the size of the queue, the\n  \
    \ higher the likelihood of an attack being able to knock out legitimate\n   traffic\
    \ (but less memory utilization on the router).\n"
- title: 8.  Security Considerations
  contents:
  - "8.  Security Considerations\n   This document outlines mitigation options that\
    \ operators can use to\n   protect themselves from denial-of-service attacks.\
    \  Implementation\n   advice to router vendors aimed at ameliorating known problems\
    \ carries\n   the risk of previously unforeseen consequences.  It is not believed\n\
    \   that these mitigation techniques or the implementation of finer-\n   grained\
    \ queuing of NDP activity create additional security risks or\n   DoS exposure.\n"
- title: 9.  Acknowledgements
  contents:
  - "9.  Acknowledgements\n   The authors would like to thank Ron Bonica, Troy Bonin,\
    \ John Jason\n   Brzozowski, Randy Bush, Vint Cerf, Tassos Chatzithomaoglou, Jason\n\
    \   Fesler, Wes George, Erik Kline, Jared Mauch, Chris Morrow, and Suran\n   De\
    \ Silva.  Special thanks to Thomas Narten and Ray Hunter for\n   detailed review\
    \ and (even more so) for providing text!\n   Apologies for anyone we may have\
    \ missed; it was not intentional.\n"
- title: 10.  References
  contents:
  - '10.  References

    '
- title: 10.1.  Normative References
  contents:
  - "10.1.  Normative References\n   [RFC4861]  Narten, T., Nordmark, E., Simpson,\
    \ W., and H. Soliman,\n              \"Neighbor Discovery for IP version 6 (IPv6)\"\
    , RFC 4861,\n              September 2007.\n   [RFC4862]  Thomson, S., Narten,\
    \ T., and T. Jinmei, \"IPv6 Stateless\n              Address Autoconfiguration\"\
    , RFC 4862, September 2007.\n   [RFC6164]  Kohno, M., Nitzan, B., Bush, R., Matsuzaki,\
    \ Y., Colitti,\n              L., and T. Narten, \"Using 127-Bit IPv6 Prefixes\
    \ on Inter-\n              Router Links\", RFC 6164, April 2011.\n"
- title: 10.2.  Informative References
  contents:
  - "10.2.  Informative References\n   [RFC4732]  Handley, M., Rescorla, E., and IAB,\
    \ \"Internet Denial-of-\n              Service Considerations\", RFC 4732, December\
    \ 2006.\n   [RFC5157]  Chown, T., \"IPv6 Implications for Network Scanning\",\n\
    \              RFC 5157, March 2008.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Igor Gashinsky\n   Yahoo!\n   45 W 18th St\n   New York,\
    \ NY\n   USA\n   EMail: igor@yahoo-inc.com\n   Joel Jaeggli\n   Zynga\n   111\
    \ Evelyn\n   Sunnyvale, CA\n   USA\n   EMail: jjaeggli@zynga.com\n   Warren Kumari\n\
    \   Google, Inc.\n   1600 Amphitheatre Parkway\n   Mountain View, CA\n   USA\n\
    \   EMail: warren@kumari.net\n"
