- title: __initial_text__
  contents:
  - "    The DNS-Based Authentication of Named Entities (DANE) Protocol:\n       \
    \             Updates and Operational Guidance\n"
- title: Abstract
  contents:
  - "Abstract\n   This document clarifies and updates the DNS-Based Authentication\
    \ of\n   Named Entities (DANE) TLSA specification (RFC 6698), based on\n   subsequent\
    \ implementation experience.  It also contains guidance for\n   implementers,\
    \ operators, and protocol developers who want to use DANE\n   records.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This\
    \ document is a product of the Internet Engineering Task Force\n   (IETF).  It\
    \ represents the consensus of the IETF community.  It has\n   received public\
    \ review and has been approved for publication by the\n   Internet Engineering\
    \ Steering Group (IESG).  Further information on\n   Internet Standards is available\
    \ in Section 2 of RFC 5741.\n   Information about the current status of this document,\
    \ any errata,\n   and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc7671.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2015 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................3\n\
    \      1.1. Terminology ................................................4\n  \
    \ 2. DANE TLSA Record Overview .......................................5\n    \
    \  2.1. Example TLSA Record ........................................6\n   3. DANE\
    \ TLS Requirements ...........................................6\n   4. DANE Certificate\
    \ Usage Selection Guidelines .....................7\n      4.1. Opportunistic\
    \ Security and PKIX Usages .....................7\n      4.2. Interaction with\
    \ Certificate Transparency ..................8\n      4.3. Switching from/to PKIX-TA/EE\
    \ to/from DANE-TA/EE ............9\n   5. Certificate-Usage-Specific DANE Updates\
    \ and Guidelines ..........9\n      5.1. Certificate Usage DANE-EE(3) ...............................9\n\
    \      5.2. Certificate Usage DANE-TA(2) ..............................11\n  \
    \    5.3. Certificate Usage PKIX-EE(1) ..............................15\n    \
    \  5.4. Certificate Usage PKIX-TA(0) ..............................15\n   6. Service\
    \ Provider and TLSA Publisher Synchronization ............16\n   7. TLSA Base\
    \ Domain and CNAMEs ....................................18\n   8. TLSA Publisher\
    \ Requirements ....................................19\n      8.1. Key Rollover\
    \ with Fixed TLSA Parameters ...................20\n      8.2. Switching to DANE-TA(2)\
    \ from DANE-EE(3) ...................21\n      8.3. Switching to New TLSA Parameters\
    \ ..........................22\n      8.4. TLSA Publisher Requirements: Summary\
    \ ......................23\n   9. Digest Algorithm Agility .......................................23\n\
    \   10. General DANE Guidelines .......................................25\n  \
    \    10.1. DANE DNS Record Size Guidelines ..........................25\n    \
    \  10.2. Certificate Name Check Conventions .......................26\n      10.3.\
    \ Design Considerations for Protocols Using DANE ...........27\n   11. Note on\
    \ DNSSEC Security .......................................28\n   12. Summary of\
    \ Updates to RFC 6698 ................................29\n   13. Operational Considerations\
    \ ....................................29\n   14. Security Considerations .......................................30\n\
    \   15. References ....................................................30\n  \
    \    15.1. Normative References .....................................30\n    \
    \  15.2. Informative References ...................................32\n   Acknowledgements\
    \ ..................................................33\n   Authors' Addresses\
    \ ................................................33\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   The DNS-Based Authentication of Named Entities (DANE) specification\n\
    \   [RFC6698] introduces the DNS \"TLSA\" resource record (RR) type (\"TLSA\"\n\
    \   is not an acronym).  TLSA records associate a certificate or a public\n  \
    \ key of an end-entity or a trusted issuing authority with the\n   corresponding\
    \ Transport Layer Security (TLS) [RFC5246] or Datagram\n   Transport Layer Security\
    \ (DTLS) [RFC6347] transport endpoint.  DANE\n   relies on the DNS Security Extensions\
    \ (DNSSEC) [RFC4033].  DANE TLSA\n   records validated by DNSSEC can be used to\
    \ augment or replace the use\n   of trusted public Certification Authorities (CAs).\n\
    \   The TLS and DTLS protocols provide secured TCP and UDP communication,\n  \
    \ respectively, over IP.  In the context of this document, channel\n   security\
    \ is assumed to be provided by TLS or DTLS.  By convention,\n   \"TLS\" will be\
    \ used throughout this document; unless otherwise\n   specified, the text applies\
    \ equally well to DTLS over UDP.  Used\n   without authentication, TLS provides\
    \ protection only against\n   eavesdropping through its use of encryption.  With\
    \ authentication,\n   TLS also protects the transport against man-in-the-middle\
    \ (MITM)\n   attacks.\n   [RFC6698] defines three TLSA record fields: the first\
    \ with four\n   possible values, the second with two, and the third with three.\n\
    \   These yield 24 distinct combinations of TLSA record types.  This\n   document\
    \ recommends a smaller set of best-practice combinations of\n   these fields to\
    \ simplify protocol design, implementation, and\n   deployment.\n   This document\
    \ explains and recommends DANE-specific strategies to\n   simplify \"virtual hosting\"\
    , where a single Service Provider transport\n   endpoint simultaneously supports\
    \ multiple hosted Customer Domains.\n   Other related documents that build on\
    \ [RFC6698] are [RFC7673] and\n   [RFC7672].\n   Section 12 summarizes the normative\
    \ updates this document makes to\n   [RFC6698].\n"
- title: 1.1.  Terminology
  contents:
  - "1.1.  Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"\
    SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"NOT\
    \ RECOMMENDED\", \"MAY\", and\n   \"OPTIONAL\" in this document are to be interpreted\
    \ as described in\n   [RFC2119].\n   The following terms are used throughout this\
    \ document:\n   Web PKI:  The Public Key Infrastructure (PKI) model employed by\n\
    \      browsers to authenticate web servers.  This employs a set of\n      trusted\
    \ public CAs to vouch for the authenticity of public keys\n      associated with\
    \ a particular party (the subject).\n   Service Provider:  A company or organization\
    \ that offers to host a\n      service on behalf of the owner of a Customer Domain.\
    \  The original\n      domain name associated with the service often remains under\
    \ the\n      control of the customer.  Connecting applications may be directed\n\
    \      to the Service Provider via a redirection RR.  Example redirection\n  \
    \    records include MX, SRV, and CNAME.  The Service Provider\n      frequently\
    \ provides services for many customers and needs to\n      ensure that the TLS\
    \ credentials presented to connecting\n      applications authenticate it as a\
    \ valid server for the requested\n      domain.\n   Customer Domain:  As described\
    \ above, a TLS client may be interacting\n      with a service that is hosted\
    \ by a third party.  This document\n      refers to the domain name used to locate\
    \ the service (prior to any\n      redirection) as the \"Customer Domain\".\n\
    \   TLSA Publisher:  The entity responsible for publishing a TLSA record\n   \
    \   within a DNS zone.  This zone will be assumed DNSSEC-signed and\n      validatable\
    \ to a trust anchor (TA), unless otherwise specified.\n      If the Customer Domain\
    \ is not outsourcing its DNS service, the\n      TLSA Publisher will be the customer\
    \ itself.  Otherwise, the TLSA\n      Publisher may be the operator of the outsourced\
    \ DNS service.\n   Public key:  The term \"public key\" is shorthand for the\n\
    \      subjectPublicKeyInfo component of a PKIX [RFC5280] certificate.\n   SNI:\
    \  The Server Name Indication (SNI) TLS protocol extension allows\n      a TLS\
    \ client to request a connection to a particular service name\n      of a TLS\
    \ server ([RFC6066], Section 3).  Without this TLS\n      extension, a TLS server\
    \ has no choice but to offer a certificate\n      with a default list of server\
    \ names, making it difficult to host\n      multiple Customer Domains at the same\
    \ IP-address-based TLS service\n      endpoint (i.e., provide \"secure virtual\
    \ hosting\").\n   TLSA parameters:  In [RFC6698], the TLSA record is defined to\
    \ consist\n      of four fields.  The first three of these are numeric parameters\n\
    \      that specify the meaning of the data in the fourth and final\n      field.\
    \  This document refers to the first three fields as \"TLSA\n      parameters\"\
    , or sometimes just \"parameters\" when obvious from\n      context.\n   TLSA\
    \ base domain:  Per Section 3 of [RFC6698], TLSA records are\n      stored at\
    \ a DNS domain name that is a combination of a port and\n      protocol prefix\
    \ and a \"base domain\".  In [RFC6698], the \"base\n      domain\" is the fully\
    \ qualified domain name of the TLS server.\n      This document modifies the TLSA\
    \ record lookup strategy to prefer\n      the fully CNAME-expanded name of the\
    \ TLS server, provided that\n      expansion is \"secure\" (DNSSEC validated)\
    \ at each stage of the\n      expansion, and TLSA records are published for this\
    \ fully expanded\n      name.  Thus, the \"TLSA base domain\" is either the fully\n\
    \      CNAME-expanded TLS server name or otherwise the initial fully\n      qualified\
    \ TLS server name, whichever is used in combination with a\n      port and protocol\
    \ prefix to obtain the TLSA RRset.\n"
- title: 2.  DANE TLSA Record Overview
  contents:
  - "2.  DANE TLSA Record Overview\n   DANE TLSA [RFC6698] specifies a protocol for\
    \ publishing TLS server\n   certificate associations via DNSSEC [RFC4033] [RFC4034]\
    \ [RFC4035].\n   DANE TLSA records consist of four fields.  The record type is\n\
    \   determined by the values of the first three fields, which this\n   document\
    \ refers to as the \"TLSA parameters\" to distinguish them from\n   the fourth\
    \ and last field.  The numeric values of these parameters\n   were given symbolic\
    \ names in [RFC7218].  The four fields are as\n   follows:\n   The Certificate\
    \ Usage field:  Section 2.1.1 of [RFC6698] specifies\n      four values: PKIX-TA(0),\
    \ PKIX-EE(1), DANE-TA(2), and DANE-EE(3).\n      There is an additional private-use\
    \ value: PrivCert(255), which,\n      given its private scope, shall not be considered\
    \ further in this\n      document.  All other values are reserved for use by future\n\
    \      specifications.\n   The Selector field:  Section 2.1.2 of [RFC6698] specifies\
    \ two values:\n      Cert(0) and SPKI(1).  There is an additional private-use\
    \ value:\n      PrivSel(255).  All other values are reserved for use by future\n\
    \      specifications.\n   The Matching Type field:  Section 2.1.3 of [RFC6698]\
    \ specifies three\n      values: Full(0), SHA2-256(1), and SHA2-512(2).  There\
    \ is an\n      additional private-use value: PrivMatch(255).  All other values\n\
    \      are reserved for use by future specifications.\n   The Certificate Association\
    \ Data field:  See Section 2.1.4 of\n      [RFC6698].  This field stores the full\
    \ value or digest of the\n      certificate or subject public key as determined\
    \ by the matching\n      type and selector, respectively.\n   In the Matching\
    \ Type field, of the two digest algorithms --\n   SHA2-256(1) and SHA2-512(2)\
    \ -- as of the time of this writing, only\n   SHA2-256(1) is mandatory to implement.\
    \  Clients SHOULD implement\n   SHA2-512(2), but servers SHOULD NOT exclusively\
    \ publish SHA2-512(2)\n   digests.  The digest algorithm agility protocol defined\
    \ in Section 9\n   SHOULD be used by clients to decide how to process TLSA RRsets\
    \ that\n   employ multiple digest algorithms.  Server operators MUST publish\n\
    \   TLSA RRsets that are compatible (see Section 8) with digest algorithm\n  \
    \ agility (Section 9).\n"
- title: 2.1.  Example TLSA Record
  contents:
  - "2.1.  Example TLSA Record\n   In the example TLSA record below, the TLSA certificate\
    \ usage is\n   DANE-TA(2), the selector is Cert(0), and the matching type is\n\
    \   SHA2-256(1).  The last field is the Certificate Association Data\n   field,\
    \ which in this case contains the SHA2-256 digest of the server\n   certificate.\n\
    \   _25._tcp.mail.example.com. IN TLSA 2 0 1 (\n                             \
    \ E8B54E0B4BAA815B06D3462D65FBC7C0\n                              CF556ECCF9F5303EBFBB77D022F834C0\
    \ )\n"
- title: 3.  DANE TLS Requirements
  contents:
  - "3.  DANE TLS Requirements\n   [RFC6698] does not discuss what versions of TLS\
    \ are required when\n   using DANE records.  This document specifies that TLS\
    \ clients that\n   support DANE/TLSA MUST support at least TLS 1.0 and SHOULD\
    \ support\n   TLS 1.2 or later.\n   TLS clients using DANE MUST support the SNI\
    \ extension of TLS\n   [RFC6066].  Servers MAY support SNI and respond with a\
    \ matching\n   certificate chain but MAY also ignore SNI and respond with a default\n\
    \   certificate chain.  When a server supports SNI but is not configured\n   with\
    \ a certificate chain that exactly matches the client's SNI\n   extension, the\
    \ server SHOULD respond with another certificate chain\n   (a default or closest\
    \ match).  This is because clients might support\n   more than one server name\
    \ but can only put a single name in the SNI\n   extension.\n"
- title: 4.  DANE Certificate Usage Selection Guidelines
  contents:
  - "4.  DANE Certificate Usage Selection Guidelines\n   As mentioned in Section 2,\
    \ the TLSA Certificate Usage field takes one\n   of four possible values.  With\
    \ PKIX-TA(0) and PKIX-EE(1), the\n   validation of peer certificate chains requires\
    \ additional\n   preconfigured CA TAs that are mutually trusted by the operators\
    \ of\n   the TLS server and client.  With DANE-TA(2) and DANE-EE(3), no\n   preconfigured\
    \ CA TAs are required and the published DANE TLSA records\n   are sufficient to\
    \ verify the peer's certificate chain.\n   Standards for application protocols\
    \ that employ DANE TLSA can specify\n   more specific guidance than [RFC6698]\
    \ or this document.  Such\n   application-specific standards need to carefully\
    \ consider which set\n   of DANE certificate usages to support.  Simultaneous\
    \ support for all\n   four usages is NOT RECOMMENDED for DANE clients.  When all\
    \ four\n   usages are supported, an attacker capable of compromising the\n   integrity\
    \ of DNSSEC needs only to replace the server's TLSA RRset\n   with one that lists\
    \ suitable DANE-EE(3) or DANE-TA(2) records,\n   effectively bypassing any added\
    \ verification via public CAs.  In\n   other words, when all four usages are supported,\
    \ PKIX-TA(0) and\n   PKIX-EE(1) offer only illusory incremental security over\
    \ DANE-TA(2)\n   and DANE-EE(3).\n   Designs in which clients support just the\
    \ DANE-TA(2) and DANE-EE(3)\n   certificate usages are RECOMMENDED.  With DANE-TA(2)\
    \ and DANE-EE(3),\n   clients don't need to track a large changing list of X.509\
    \ TAs in\n   order to successfully authenticate servers whose certificates are\n\
    \   issued by a CA that is brand new or not widely trusted.\n   The DNSSEC TLSA\
    \ records for servers MAY include both sets of usages\n   if the server needs\
    \ to support a mixture of clients, some supporting\n   one pair of usages and\
    \ some the other.\n"
- title: 4.1.  Opportunistic Security and PKIX Usages
  contents:
  - "4.1.  Opportunistic Security and PKIX Usages\n   When the client's protocol design\
    \ is based on \"Opportunistic\n   Security\" (OS) [RFC7435] and the use of authentication\
    \ is based on\n   the presence of server TLSA records, it is especially important\
    \ to\n   avoid the PKIX-EE(1) and PKIX-TA(0) certificate usages.\n   When authenticated\
    \ TLS is used opportunistically based on the\n   presence of DANE TLSA records\
    \ and no secure TLSA records are present,\n   unauthenticated TLS is used if possible,\
    \ and if TLS is not possible,\n   perhaps even cleartext.  However, if usable\
    \ secure TLSA records are\n   published, then authentication MUST succeed.  Also,\
    \ outside the\n   browser space, there is no preordained canon of trusted CAs,\
    \ and in\n   any case there is no security advantage in using PKIX-TA(0) or\n\
    \   PKIX-EE(1) when the DANE-TA(2) and DANE-EE(3) usages are also\n   supported\
    \ (as an attacker who can compromise DNS can replace the\n   former with the latter).\n\
    \   Authentication via the PKIX-TA(0) and PKIX-EE(1) certificate usages\n   is\
    \ more brittle; the client and server need to happen to agree on a\n   mutually\
    \ trusted CA, but with OS the client is just trying to protect\n   the communication\
    \ channel at the request of the server and would\n   otherwise be willing to use\
    \ cleartext or unauthenticated TLS.  The\n   use of fragile mechanisms (like public\
    \ CA authentication for some\n   unspecified set of trusted CAs) is not sufficiently\
    \ reliable for an\n   OS client to honor the server's request for authentication.\
    \  OS needs\n   to be non-intrusive and to require few, if any, workarounds for\
    \ valid\n   but mismatched peers.\n   Because the PKIX-TA(0) and PKIX-EE(1) usages\
    \ offer no more security\n   and are more prone to failure, they are a poor fit\
    \ for OS and\n   SHOULD NOT be used in that context.\n"
- title: 4.2.  Interaction with Certificate Transparency
  contents:
  - "4.2.  Interaction with Certificate Transparency\n   Certificate Transparency\
    \ (CT) [RFC6962] defines an experimental\n   approach that could be used to mitigate\
    \ the risk of rogue or\n   compromised public CAs issuing unauthorized certificates.\
    \  This\n   section clarifies the interaction of the experimental CT and DANE.\n\
    \   This section may need to be revised in light of any future Standards\n   Track\
    \ version of CT.\n   When a server is authenticated via a DANE TLSA RR with TLSA\n\
    \   certificate usage DANE-EE(3), the domain owner has directly specified\n  \
    \ the certificate associated with the given service without reference\n   to any\
    \ public CA.  Therefore, when a TLS client authenticates the TLS\n   server via\
    \ a TLSA record with usage DANE-EE(3), CT checks SHOULD NOT\n   be performed.\
    \  Publication of the server certificate or public key\n   (digest) in a TLSA\
    \ record in a DNSSEC-signed zone by the domain owner\n   assures the TLS client\
    \ that the certificate is not an unauthorized\n   certificate issued by a rogue\
    \ CA without the domain owner's consent.\n   When a server is authenticated via\
    \ a DANE TLSA record with TLSA usage\n   DANE-TA(2) and the server certificate\
    \ does not chain to a known\n   public root CA, CT cannot apply (CT logs only\
    \ accept chains that\n   start with a known public root).  Since TLSA certificate\
    \ usage\n   DANE-TA(2) is generally intended to support non-public TAs, TLS\n\
    \   clients SHOULD NOT perform CT checks with usage DANE-TA(2).\n   With certificate\
    \ usages PKIX-TA(0) and PKIX-EE(1), CT applies just as\n   it would without DANE.\
    \  TLSA records of this type only constrain\n   which CAs are acceptable in PKIX\
    \ validation.  All checks used in the\n   absence of DANE still apply when validating\
    \ certificate chains with\n   DANE PKIX-TA(0) and PKIX-EE(1) constraints.\n"
- title: 4.3.  Switching from/to PKIX-TA/EE to/from DANE-TA/EE
  contents:
  - "4.3.  Switching from/to PKIX-TA/EE to/from DANE-TA/EE\n   The choice of preferred\
    \ certificate usages may need to change as an\n   application protocol evolves.\
    \  When transitioning between PKIX-TA/\n   PKIX-EE and DANE-TA/DANE-EE, clients\
    \ begin to enable support for the\n   new certificate usage values.  If the new\
    \ preferred certificate\n   usages are PKIX-TA/EE, this requires installing and\
    \ managing the\n   appropriate set of CA TAs.  During this time, servers will\
    \ publish\n   both types of TLSA records.  At some later time, when the vast\n\
    \   majority of servers have published the new preferred TLSA records,\n   clients\
    \ can stop supporting the legacy certificate usages.\n   Similarly, servers can\
    \ stop publishing legacy TLSA records once the\n   vast majority of clients support\
    \ the new certificate usages.\n"
- title: 5.  Certificate-Usage-Specific DANE Updates and Guidelines
  contents:
  - "5.  Certificate-Usage-Specific DANE Updates and Guidelines\n   The four certificate\
    \ usage values from the TLSA record -- DANE-EE(3),\n   DANE-TA(2), PKIX-EE(1),\
    \ and PKIX-TA(0) -- are discussed below.\n"
- title: 5.1.  Certificate Usage DANE-EE(3)
  contents:
  - "5.1.  Certificate Usage DANE-EE(3)\n   In this section, the meaning of DANE-EE(3)\
    \ is updated from [RFC6698]\n   to specify that peer identity matching and validity\
    \ period\n   enforcement are based solely on the TLSA RRset properties.  This\n\
    \   document also extends [RFC6698] to cover the use of DANE\n   authentication\
    \ of raw public keys [RFC7250] via TLSA records with\n   certificate usage DANE-EE(3)\
    \ and selector SPKI(1).\n   Authentication via certificate usage DANE-EE(3) TLSA\
    \ records involves\n   simply checking that the server's leaf certificate matches\
    \ the TLSA\n   record.  In particular, the binding of the server public key to\
    \ its\n   name is based entirely on the TLSA record association.  The server\n\
    \   MUST be considered authenticated even if none of the names in the\n   certificate\
    \ match the client's reference identity for the server.\n   This simplifies the\
    \ operation of servers that host multiple Customer\n   Domains, as a single certificate\
    \ can be associated with multiple\n   domains without having to match each of\
    \ the corresponding reference\n   identifiers.\n   ; Multiple Customer Domains\
    \ hosted by an example.net\n   ; Service Provider:\n   ;\n   www.example.com.\
    \              IN CNAME ex-com.example.net.\n   www.example.org.             \
    \ IN CNAME ex-org.example.net.\n   ;\n   ; In the provider's DNS zone, a single\
    \ certificate and TLSA\n   ; record support multiple Customer Domains, greatly\
    \ simplifying\n   ; \"virtual hosting\".\n   ;\n   ex-com.example.net.       \
    \    IN A 192.0.2.1\n   ex-org.example.net.           IN A 192.0.2.1\n   _443._tcp.ex-com.example.net.\
    \ IN CNAME tlsa._dane.example.net.\n   _443._tcp.ex-org.example.net. IN CNAME\
    \ tlsa._dane.example.net.\n   tlsa._dane.example.net.       IN TLSA 3 1 1 e3b0c44298fc1c14...\n\
    \   Also, with DANE-EE(3), the expiration date of the server certificate\n   MUST\
    \ be ignored.  The validity period of the TLSA record key binding\n   is determined\
    \ by the validity period of the TLSA record DNSSEC\n   signatures.  Validity is\
    \ reaffirmed on an ongoing basis by continuing\n   to publish the TLSA record\
    \ and signing the zone in which the record\n   is contained, rather than via dates\
    \ \"set in stone\" in the\n   certificate.  The expiration becomes a reminder\
    \ to the administrator\n   that it is likely time to rotate the key, but missing\
    \ the date no\n   longer causes an outage.  When keys are rotated (for whatever\n\
    \   reason), it is important to follow the procedures outlined in\n   Section\
    \ 8.\n   If a server uses just DANE-EE(3) TLSA records and all its clients are\n\
    \   DANE clients, the server need not employ SNI (i.e., it may ignore the\n  \
    \ client's SNI message) even when the server is known via multiple\n   domain\
    \ names that would otherwise require separate certificates.  It\n   is instead\
    \ sufficient for the TLSA RRsets for all the domain names in\n   question to match\
    \ the server's default certificate.  For application\n   protocols where the server\
    \ name is obtained indirectly via SRV\n   records, MX records, or similar records,\
    \ it is simplest to publish a\n   single hostname as the target server name for\
    \ all the hosted domains.\n   In organizations where it is practical to make coordinated\
    \ changes in\n   DNS TLSA records before server key rotation, it is generally\
    \ best to\n   publish end-entity DANE-EE(3) certificate associations in preference\n\
    \   to other choices of certificate usage.  DANE-EE(3) TLSA records\n   support\
    \ multiple server names without SNI, don't suddenly stop\n   working when leaf\
    \ or intermediate certificates expire, and don't fail\n   when a server operator\
    \ neglects to include all the required issuer\n   certificates in the server certificate\
    \ chain.\n   More specifically, it is RECOMMENDED that at most sites TLSA records\n\
    \   published for DANE servers be \"DANE-EE(3) SPKI(1) SHA2-256(1)\"\n   records.\
    \  Selector SPKI(1) is chosen because it is compatible with\n   raw public keys\
    \ [RFC7250] and the resulting TLSA record need not\n   change across certificate\
    \ renewals with the same key.  Matching type\n   SHA2-256(1) is chosen because\
    \ all DANE implementations are required\n   to support SHA2-256.  This TLSA record\
    \ type easily supports hosting\n   arrangements with a single certificate matching\
    \ all hosted domains.\n   It is also the easiest to implement correctly in the\
    \ client.\n   Clients that support raw public keys can use DANE TLSA records with\n\
    \   certificate usage DANE-EE(3) and selector SPKI(1) to authenticate\n   servers\
    \ that negotiate the use of raw public keys.  Provided the\n   server adheres\
    \ to the requirements of Section 8, the fact that raw\n   public keys are not\
    \ compatible with any other TLSA record types will\n   not get in the way of successful\
    \ authentication.  Clients that employ\n   DANE to authenticate the peer server\
    \ SHOULD NOT negotiate the use of\n   raw public keys unless the server's TLSA\
    \ RRset includes \"DANE-EE(3)\n   SPKI(1)\" TLSA records.\n   While it is, in\
    \ principle, also possible to authenticate raw public\n   keys via \"DANE-EE(3)\
    \ Cert(0) Full(0)\" records by extracting the\n   public key from the certificate\
    \ in DNS, extracting just the public\n   key from a \"3 0 0\" TLSA record requires\
    \ extra logic on clients that\n   not all implementations are expected to provide.\
    \  Servers that wish\n   to support [RFC7250] raw public keys need to publish\
    \ TLSA records\n   with a certificate usage of DANE-EE(3) and a selector of SPKI(1).\n\
    \   While DANE-EE(3) TLSA records are expected to be by far the most\n   prevalent,\
    \ as explained in Section 5.2, DANE-TA(2) records are a\n   valid alternative\
    \ for sites with many DANE services.  Note, however,\n   that virtual hosting\
    \ is more complex with DANE-TA(2).  Also, with\n   DANE-TA(2), server operators\
    \ MUST ensure that the server is\n   configured with a sufficiently complete certificate\
    \ chain and need to\n   remember to replace certificates prior to their expiration\
    \ dates.\n"
- title: 5.2.  Certificate Usage DANE-TA(2)
  contents:
  - "5.2.  Certificate Usage DANE-TA(2)\n   This section updates [RFC6698] by specifying\
    \ a new operational\n   requirement for servers publishing TLSA records with a\
    \ usage of\n   DANE-TA(2): such servers MUST include the TA certificate in their\
    \ TLS\n   server certificate message unless all such TLSA records are \"2 0 0\"\
    \n   records that publish the server certificate in full.\n   Some domains may\
    \ prefer to avoid the operational complexity of\n   publishing unique TLSA RRs\
    \ for each TLS service.  If the domain\n   employs a common issuing CA to create\
    \ certificates for multiple TLS\n   services, it may be simpler to publish the\
    \ issuing authority as a TA\n   for the certificate chains of all relevant services.\
    \  The TLSA query\n   domain (TLSA base domain with port and protocol prefix labels)\
    \ for\n   each service issued by the same TA may then be set to a CNAME alias\n\
    \   that points to a common TLSA RRset that matches the TA.  For example:\n  \
    \ ; Two servers, each with its own certificate, that share\n   ; a common issuer\
    \ (TA).\n   ;\n   www1.example.com.            IN A 192.0.2.1\n   www2.example.com.\
    \            IN A 192.0.2.2\n   _443._tcp.www1.example.com.  IN CNAME tlsa._dane.example.com.\n\
    \   _443._tcp.www2.example.com.  IN CNAME tlsa._dane.example.com.\n   tlsa._dane.example.com.\
    \      IN TLSA 2 0 1 e3b0c44298fc1c14...\n   The above configuration simplifies\
    \ server key rotation, because while\n   the servers continue to receive new certificates\
    \ from a CA matched by\n   the shared (target of the CNAMEs) TLSA record, server\
    \ certificates\n   can be updated without making any DNS changes.  As the list\
    \ of active\n   issuing CAs changes, the shared TLSA record will be updated (much\n\
    \   less frequently) by the administrators who manage the CAs.  Those\n   administrators\
    \ still need to perform TLSA record updates with care,\n   as described in Section\
    \ 8.\n   With usage DANE-TA(2), the server certificates will need to have\n  \
    \ names that match one of the client's reference identifiers (see\n   [RFC6125]).\
    \  When hosting multiple unrelated Customer Domains (that\n   can't all appear\
    \ in a single certificate), such a server SHOULD\n   employ SNI to select the\
    \ appropriate certificate to present to the\n   client.\n"
- title: 5.2.1.  Recommended Record Combinations
  contents:
  - "5.2.1.  Recommended Record Combinations\n   TLSA records with a matching type\
    \ of Full(0) are NOT RECOMMENDED.\n   While these potentially obviate the need\
    \ to transmit the TA\n   certificate in the TLS server certificate message, client\n\
    \   implementations may not be able to augment the server certificate\n   chain\
    \ with the data obtained from DNS, especially when the TLSA\n   record supplies\
    \ a bare key (selector SPKI(1)).  Since the server will\n   need to transmit the\
    \ TA certificate in any case, server operators\n   SHOULD publish TLSA records\
    \ with a matching type other than Full(0)\n   and avoid potential DNS interoperability\
    \ issues with large TLSA\n   records containing full certificates or keys (see\
    \ Section 10.1.1).\n   TLSA Publishers employing DANE-TA(2) records SHOULD publish\
    \ records\n   with a selector of Cert(0).  Such TLSA records are associated with\n\
    \   the whole TA certificate, not just with the TA public key.  In\n   particular,\
    \ when authenticating the peer certificate chain via such a\n   TLSA record, the\
    \ client SHOULD apply any relevant constraints from\n   the TA certificate, such\
    \ as, for example, path length constraints.\n   While a selector of SPKI(1) may\
    \ also be employed, the resulting TLSA\n   record will not specify the full TA\
    \ certificate content, and elements\n   of the TA certificate other than the public\
    \ key become mutable.  This\n   may, for example, enable a subsidiary CA to issue\
    \ a chain that\n   violates the TA's path length or name constraints.\n"
- title: 5.2.2.  Trust Anchor Digests and Server Certificate Chain
  contents:
  - "5.2.2.  Trust Anchor Digests and Server Certificate Chain\n   With DANE-TA(2),\
    \ a complication arises when the TA certificate is\n   omitted from the server's\
    \ certificate chain, perhaps on the basis of\n   Section 7.4.2 of [RFC5246]:\n\
    \      The sender's certificate MUST come first in the list.  Each\n      following\
    \ certificate MUST directly certify the one preceding it.\n      Because certificate\
    \ validation requires that root keys be\n      distributed independently, the\
    \ self-signed certificate that\n      specifies the root certificate authority\
    \ MAY be omitted from the\n      chain, under the assumption that the remote end\
    \ must already\n      possess it in order to validate it in any case.\n   With\
    \ TLSA certificate usage DANE-TA(2), there is no expectation that\n   the client\
    \ is preconfigured with the TA certificate.  In fact, client\n   implementations\
    \ are free to ignore all locally configured TAs when\n   processing usage DANE-TA(2)\
    \ TLSA records and may rely exclusively on\n   the certificates provided in the\
    \ server's certificate chain.  But,\n   with a digest in the TLSA record, the\
    \ TLSA record contains neither\n   the full TA certificate nor the full public\
    \ key.  If the TLS server's\n   certificate chain does not contain the TA certificate,\
    \ DANE clients\n   will be unable to authenticate the server.\n   TLSA Publishers\
    \ that publish TLSA certificate usage DANE-TA(2)\n   associations with a selector\
    \ of SPKI(1) or with a digest-based\n   matching type (not Full(0)) MUST ensure\
    \ that the corresponding server\n   is configured to also include the TA certificate\
    \ in its TLS handshake\n   certificate chain, even if that certificate is a self-signed\
    \ root CA\n   and would have been optional in the context of the existing public\n\
    \   CA PKI.\n   Only when the server TLSA record includes a \"DANE-TA(2) Cert(0)\n\
    \   Full(0)\" TLSA record containing a full TA certificate is the TA\n   certificate\
    \ optional in the server's TLS certificate message.  This\n   is also the only\
    \ type of DANE-TA(2) record for which the client MUST\n   be able to verify the\
    \ server's certificate chain even if the TA\n   certificate appears only in DNS\
    \ and is absent from the TLS handshake\n   server certificate message.\n"
- title: 5.2.3.  Trust Anchor Public Keys
  contents:
  - "5.2.3.  Trust Anchor Public Keys\n   TLSA records with TLSA certificate usage\
    \ DANE-TA(2), selector\n   SPKI(1), and a matching type of Full(0) publish the\
    \ full public key\n   of a TA via DNS.  In Section 6.1.1 of [RFC5280], the definition\
    \ of a\n   TA consists of the following four parts:\n   1.  the trusted issuer\
    \ name,\n   2.  the trusted public key algorithm,\n   3.  the trusted public key,\
    \ and\n   4.  optionally, the trusted public key parameters associated with the\n\
    \       public key.\n   Items 2-4 are precisely the contents of the subjectPublicKeyInfo\n\
    \   published in the TLSA record.  The issuer name is not included in the\n  \
    \ subjectPublicKeyInfo.\n   With TLSA certificate usage DANE-TA(2), the client\
    \ may not have the\n   associated TA certificate and cannot generally verify whether\
    \ or not\n   a particular certificate chain is \"issued by\" the TA described\
    \ in the\n   TLSA record.\n   When the server certificate chain includes a CA\
    \ certificate whose\n   public key matches the TLSA record, the client can match\
    \ that CA as\n   the intended issuer.  Otherwise, the client can only check that\
    \ the\n   topmost certificate in the server's chain is \"signed by\" the TA's\n\
    \   public key in the TLSA record.  Such a check may be difficult to\n   implement\
    \ and cannot be expected to be supported by all clients.\n   Thus, servers cannot\
    \ rely on \"DANE-TA(2) SPKI(1) Full(0)\" TLSA\n   records to be sufficient to\
    \ authenticate chains issued by the\n   associated public key in the absence of\
    \ a corresponding certificate\n   in the server's TLS certificate message.  Servers\
    \ employing \"2 1 0\"\n   TLSA records MUST include the corresponding TA certificate\
    \ in their\n   certificate chain.\n   If none of the server's certificate chain\
    \ elements match a public key\n   specified in a TLSA record, and at least one\
    \ \"DANE-TA(2) SPKI(1)\n   Full(0)\" TLSA record is available, it is RECOMMENDED\
    \ that clients\n   check to see whether or not the topmost certificate in the\
    \ chain is\n   signed by the provided public key and has not expired, and in that\n\
    \   case consider the server authenticated, provided the rest of the\n   chain\
    \ passes validation, including leaf certificate name checks.\n"
- title: 5.3.  Certificate Usage PKIX-EE(1)
  contents:
  - "5.3.  Certificate Usage PKIX-EE(1)\n   This certificate usage is similar to DANE-EE(3);\
    \ but, in addition,\n   PKIX verification is required.  Therefore, name checks,\
    \ certificate\n   expiration, CT, etc. apply as they would without DANE.\n"
- title: 5.4.  Certificate Usage PKIX-TA(0)
  contents:
  - "5.4.  Certificate Usage PKIX-TA(0)\n   This section updates [RFC6698] by specifying\
    \ new client\n   implementation requirements.  Clients that trust intermediate\n\
    \   certificates MUST be prepared to construct longer PKIX chains than\n   would\
    \ be required for PKIX alone.\n   TLSA certificate usage PKIX-TA(0) allows a domain\
    \ to publish\n   constraints on the set of PKIX CAs trusted to issue certificates\
    \ for\n   its TLS servers.  A PKIX-TA(0) TLSA record matches PKIX-verified\n \
    \  trust chains that contain an issuer certificate (root or\n   intermediate)\
    \ that matches its Certificate Association Data field\n   (typically a certificate\
    \ or digest).\n   PKIX-TA(0) requires more complex coordination (than with DANE-TA(2)\n\
    \   or DANE-EE(3)) between the Customer Domain and the Service Provider\n   in\
    \ hosting arrangements.  Thus, this certificate usage is\n   NOT RECOMMENDED when\
    \ the Service Provider is not also the TLSA\n   Publisher (at the TLSA base domain\
    \ obtained via CNAMEs, SRV records,\n   or MX records).\n   TLSA Publishers who\
    \ publish TLSA records for a particular public root\n   CA will expect that clients\
    \ will only accept chains anchored at that\n   root.  It is possible, however,\
    \ that the client's trusted certificate\n   store includes some intermediate CAs,\
    \ either with or without the\n   corresponding root CA.  When a client constructs\
    \ a trust chain\n   leading from a trusted intermediate CA to the server leaf\n\
    \   certificate, such a \"truncated\" chain might not contain the trusted\n  \
    \ root published in the server's TLSA record.\n   If the omitted root is also\
    \ trusted, the client may erroneously\n   reject the server chain if it fails\
    \ to determine that the shorter\n   chain it constructed extends to a longer trusted\
    \ chain that matches\n   the TLSA record.  Thus, when matching a usage PKIX-TA(0)\
    \ TLSA record,\n   so long as no matching certificate has yet been found, a client\
    \ MUST\n   continue extending the chain even after any locally trusted\n   certificate\
    \ is found.  If no TLSA records have matched any of the\n   elements of the chain\
    \ and the trusted certificate found is not\n   self-issued, the client MUST attempt\
    \ to build a longer chain in case\n   a certificate closer to the root matches\
    \ the server's TLSA record.\n"
- title: 6.  Service Provider and TLSA Publisher Synchronization
  contents:
  - "6.  Service Provider and TLSA Publisher Synchronization\n   Whenever possible,\
    \ the TLSA Publisher and the Service Provider should\n   be the same entity. \
    \ Otherwise, they need to coordinate changes to\n   ensure that TLSA records published\
    \ by the TLSA Publisher don't fall\n   out of sync with the server certificate\
    \ used by the Service Provider.\n   Such coordination is difficult, and service\
    \ outages will result when\n   coordination fails.\n   Publishing the TLSA record\
    \ in the Service Provider's zone avoids the\n   complexity of bilateral coordination\
    \ of server certificate\n   configuration and TLSA record management.  Even when\
    \ the TLSA RRset\n   has to be published in the Customer Domain's DNS zone (perhaps\
    \ the\n   client application does not \"chase\" CNAMEs to the TLSA base domain),\n\
    \   it is possible to employ CNAME records to delegate the content of the\n  \
    \ TLSA RRset to a domain operated by the Service Provider.\n   Only certificate\
    \ usages DANE-EE(3) and DANE-TA(2) work well with TLSA\n   CNAMEs across organizational\
    \ boundaries.  With PKIX-TA(0) or\n   PKIX-EE(1), the Service Provider would need\
    \ to obtain certificates in\n   the name of the Customer Domain from a suitable\
    \ public CA (securely\n   impersonate the customer), or the customer would need\
    \ to provision\n   the relevant private keys and certificates at the Service Provider's\n\
    \   systems.\n   Certificate Usage DANE-EE(3):  In this case, the Service Provider\
    \ can\n      publish a single TLSA RRset that matches the server certificate or\n\
    \      public key digest.  The same RRset works for all Customer Domains\n   \
    \   because name checks do not apply with DANE-EE(3) TLSA records (see\n     \
    \ Section 5.1).  A Customer Domain can create a CNAME record\n      pointing to\
    \ the TLSA RRset published by the Service Provider.\n   Certificate Usage DANE-TA(2):\
    \  When the Service Provider operates a\n      private CA, the Service Provider\
    \ is free to issue a certificate\n      bearing any customer's domain name.  Without\
    \ DANE, such a\n      certificate would not pass trust verification, but with\
    \ DANE, the\n      customer's TLSA RRset that is aliased to the provider's TLSA\
    \ RRset\n      can delegate authority to the provider's CA for the corresponding\n\
    \      service.  The Service Provider can generate appropriate\n      certificates\
    \ for each customer and use the SNI information\n      provided by clients to\
    \ select the right certificate chain to\n      present to each client.\n   Below\
    \ are example DNS records (assumed \"secure\" and shown without the\n   associated\
    \ DNSSEC information, such as record signatures) that\n   illustrate both of the\
    \ above models in the case of an HTTPS service\n   whose clients all support DANE\
    \ TLS.  These examples work even with\n   clients that don't \"chase\" CNAMEs\
    \ when constructing the TLSA base\n   domain (see Section 7 below).\n   ; The\
    \ hosted web service is redirected via a CNAME alias.\n   ; The associated TLSA\
    \ RRset is also redirected via a CNAME alias.\n   ;\n   ; Certificate usage DANE-EE(3)\
    \ makes it possible to deploy\n   ; a single provider certificate for all Customer\
    \ Domains.\n   ;\n   www1.example.com.            IN CNAME w1.example.net.\n \
    \  _443._tcp.www1.example.com.  IN CNAME _443._tcp.w1.example.net.\n   _443._tcp.w1.example.net.\
    \    IN TLSA 3 1 1 (\n                                   8A9A70596E869BED72C69D97A8895DFA\n\
    \                                   D86F300A343FECEFF19E89C27C896BC9 )\n   ;\n\
    \   ; A CA at the provider can also issue certificates for each Customer\n   ;\
    \ Domain and employ the DANE-TA(2) certificate usage to\n   ; designate the provider's\
    \ CA as a TA.\n   ;\n   www2.example.com.            IN CNAME w2.example.net.\n\
    \   _443._tcp.www2.example.com.  IN CNAME _443._tcp.w2.example.net.\n   _443._tcp.w2.example.net.\
    \    IN TLSA 2 0 1 (\n                                   C164B2C3F36D068D42A6138E446152F5\n\
    \                                   68615F28C69BD96A73E354CAC88ED00C )\n   With\
    \ protocols that support explicit transport redirection via DNS MX\n   records,\
    \ SRV records, or other similar records, the TLSA base domain\n   is based on\
    \ the redirected transport endpoint rather than the origin\n   domain.  With SMTP,\
    \ for example, when an email service is hosted by a\n   Service Provider, the\
    \ Customer Domain's MX hostnames will point at\n   the Service Provider's SMTP\
    \ hosts.  When the Customer Domain's DNS\n   zone is signed, the MX hostnames\
    \ can be securely used as the base\n   domains for TLSA records that are published\
    \ and managed by the\n   Service Provider.  For example (without the required\
    \ DNSSEC\n   information, such as record signatures):\n   ; Hosted SMTP service.\n\
    \   ;\n   example.com.               IN MX 0 mx1.example.net.\n   example.com.\
    \               IN MX 0 mx2.example.net.\n   _25._tcp.mx1.example.net.  IN TLSA\
    \ 3 1 1 (\n                                 8A9A70596E869BED72C69D97A8895DFA\n\
    \                                 D86F300A343FECEFF19E89C27C896BC9 )\n   _25._tcp.mx2.example.net.\
    \  IN TLSA 3 1 1 (\n                                 C164B2C3F36D068D42A6138E446152F5\n\
    \                                 68615F28C69BD96A73E354CAC88ED00C )\n   If redirection\
    \ to the Service Provider's domain (via MX records, SRV\n   records, or any similar\
    \ mechanism) is not possible and aliasing of\n   the TLSA record is not an option,\
    \ then more complex coordination\n   between the Customer Domain and Service Provider\
    \ will be required.\n   Either the Customer Domain periodically provides private\
    \ keys and a\n   corresponding certificate chain to the provider (after making\n\
    \   appropriate changes in its TLSA records), or the Service Provider\n   periodically\
    \ generates the keys and certificates and needs to wait\n   for matching TLSA\
    \ records to be published by its Customer Domains\n   before deploying newly generated\
    \ keys and certificate chains.\n   Section 7 below describes an approach that\
    \ employs CNAME \"chasing\" to\n   avoid the difficulties of coordinating key\
    \ management across\n   organizational boundaries.\n   For further information\
    \ about combining DANE and SRV, please see\n   [RFC7673].\n"
- title: 7.  TLSA Base Domain and CNAMEs
  contents:
  - "7.  TLSA Base Domain and CNAMEs\n   When the application protocol does not support\
    \ service location\n   indirection via MX, SRV, or similar DNS records, the service\
    \ may be\n   redirected via a CNAME.  A CNAME is a more blunt instrument for this\n\
    \   purpose because, unlike an MX or SRV record, it remaps the entire\n   origin\
    \ domain to the target domain for all protocols.\n   The complexity of coordinating\
    \ key management is largely eliminated\n   when DANE TLSA records are found in\
    \ the Service Provider's domain, as\n   discussed in Section 6.  Therefore, DANE\
    \ TLS clients connecting to a\n   server whose domain name is a CNAME alias SHOULD\
    \ follow the CNAME\n   \"hop by hop\" to its ultimate target host (noting at each\
    \ step whether\n   or not the CNAME is DNSSEC validated).  If at each stage of\
    \ CNAME\n   expansion the DNSSEC validation status is \"secure\", the final target\n\
    \   name SHOULD be the preferred base domain for TLSA lookups.\n   Implementations\
    \ failing to find a TLSA record using a base name of\n   the final target of a\
    \ CNAME expansion SHOULD issue a TLSA query using\n   the original destination\
    \ name.  That is, the preferred TLSA base\n   domain SHOULD be derived from the\
    \ fully expanded name and, failing\n   that, SHOULD be the initial domain name.\n\
    \   When the TLSA base domain is the result of \"secure\" CNAME expansion,\n \
    \  the resulting domain name MUST be used as the HostName in the\n   client's\
    \ SNI extension and MUST be the primary reference identifier\n   for peer certificate\
    \ matching with certificate usages other than\n   DANE-EE(3).\n   Protocol-specific\
    \ TLSA specifications may provide additional guidance\n   or restrictions when\
    \ following CNAME expansions.\n   Though CNAMEs are illegal on the right-hand\
    \ side of most indirection\n   records, such as MX and SRV records, they are supported\
    \ by some\n   implementations.  For example, if the MX or SRV host is a CNAME\n\
    \   alias, some implementations may \"chase\" the CNAME.  If they do, they\n \
    \  SHOULD use the target hostname as the preferred TLSA base domain as\n   described\
    \ above (and, if the TLSA records are found there, also use\n   the CNAME-expanded\
    \ domain in SNI and certificate name checks).\n"
- title: 8.  TLSA Publisher Requirements
  contents:
  - "8.  TLSA Publisher Requirements\n   This section updates [RFC6698] by specifying\
    \ that the TLSA Publisher\n   MUST ensure that each combination of certificate\
    \ usage, selector, and\n   matching type in the server's TLSA RRset includes at\
    \ least one record\n   that matches the server's current certificate chain.  TLSA\
    \ records\n   that match recently retired or yet-to-be-deployed certificate chains\n\
    \   will be present during key rollover.  Such past or future records\n   MUST\
    \ NOT at any time be the only records published for any given\n   combination\
    \ of usage, selector, and matching type.  The TLSA record\n   update process described\
    \ below ensures that this requirement is met.\n   While a server is to be considered\
    \ authenticated when its certificate\n   chain is matched by any of the published\
    \ TLSA records, not all\n   clients support all combinations of TLSA record parameters.\
    \  Some\n   clients may not support some digest algorithms; others may either\
    \ not\n   support or exclusively support the PKIX certificate usages.  Some\n\
    \   clients may prefer to negotiate [RFC7250] raw public keys, which are\n   only\
    \ compatible with TLSA records whose certificate usage is\n   DANE-EE(3) with\
    \ selector SPKI(1).  The only other TLSA record type\n   that is potentially compatible\
    \ with raw public keys is \"DANE-EE(3)\n   Cert(0) Full(0)\", but support for\
    \ raw public keys with that TLSA\n   record type is not expected to be broadly\
    \ implemented.\n   A consequence of the above uncertainty as to which TLSA parameters\n\
    \   are supported by any given client is that servers need to ensure that\n  \
    \ each and every parameter combination that appears in the TLSA RRset\n   is,\
    \ on its own, sufficient to match the server's current certificate\n   chain.\
    \  In particular, when deploying new keys or new parameter\n   combinations, some\
    \ care is required to not generate parameter\n   combinations that only match\
    \ past or future certificate chains (or\n   raw public keys).  The rest of this\
    \ section explains how to update\n   the TLSA RRset in a manner that ensures that\
    \ the above requirement\n   is met.\n"
- title: 8.1.  Key Rollover with Fixed TLSA Parameters
  contents:
  - "8.1.  Key Rollover with Fixed TLSA Parameters\n   The simplest case is key rollover\
    \ while retaining the same set of\n   published parameter combinations.  In this\
    \ case, TLSA records\n   matching the existing server certificate chain (or raw\
    \ public keys)\n   are first augmented with corresponding records matching the\
    \ future\n   keys, at least two Times to Live (TTLs) or longer before the new\n\
    \   chain is deployed.  This allows the obsolete RRset to age out of\n   client\
    \ caches before the new chain is used in TLS handshakes.  Once\n   sufficient\
    \ time has elapsed and all clients performing DNS lookups\n   are retrieving the\
    \ updated TLSA records, the server administrator may\n   deploy the new certificate\
    \ chain, verify that it works, and then\n   remove any obsolete records matching\
    \ the chain that is no longer\n   active:\n   ; Initial TLSA RRset.\n   ;\n  \
    \ _443._tcp.www.example.org. IN TLSA 3 1 1 01d09d19c2139a46...\n   ; Transitional\
    \ TLSA RRset published at least two TTLs before\n   ; the actual key change.\n\
    \   ;\n   _443._tcp.www.example.org. IN TLSA 3 1 1 01d09d19c2139a46...\n   _443._tcp.www.example.org.\
    \ IN TLSA 3 1 1 7aa7a5359173d05b...\n   ; Final TLSA RRset after the key change.\n\
    \   ;\n   _443._tcp.www.example.org. IN TLSA 3 1 1 7aa7a5359173d05b...\n   The\
    \ next case to consider is adding or switching to a new combination\n   of TLSA\
    \ parameters.  In this case, publish the new parameter\n   combinations for the\
    \ server's existing certificate chain first, and\n   only then deploy new keys\
    \ if desired:\n   ; Initial TLSA RRset.\n   ;\n   _443._tcp.www.example.org. IN\
    \ TLSA 1 1 1 01d09d19c2139a46...\n   ; New TLSA RRset, same key re-published as\
    \ DANE-EE(3).\n   ;\n   _443._tcp.www.example.org. IN TLSA 3 1 1 01d09d19c2139a46...\n"
- title: 8.2.  Switching to DANE-TA(2) from DANE-EE(3)
  contents:
  - "8.2.  Switching to DANE-TA(2) from DANE-EE(3)\n   This section explains how to\
    \ migrate to a new certificate chain and\n   TLSA record with usage DANE-TA(2)\
    \ from a self-signed server\n   certificate and a \"DANE-EE(3) SPKI(1) SHA2-256(1)\"\
    \ TLSA record.  This\n   example assumes that a new private key is generated in\
    \ conjunction\n   with transitioning to a new certificate issued by the desired\
    \ TA.\n   The original \"3 1 1\" TLSA record supports [RFC7250] raw public keys,\n\
    \   and clients may choose to negotiate their use.  The use of raw public\n  \
    \ keys rules out the possibility of certificate chain verification.\n   Therefore,\
    \ the transitional TLSA record for the planned DANE-TA(2)\n   certificate chain\
    \ is a \"3 1 1\" record that works even when raw public\n   keys are used.  The\
    \ TLSA RRset is updated to use DANE-TA(2) only\n   after the new chain is deployed\
    \ and the \"3 1 1\" record matching the\n   original key is dropped.\n   This\
    \ process follows the requirement that each combination of\n   parameters present\
    \ in the RRset is always sufficient to validate the\n   server.  It avoids publishing\
    \ a transitional TLSA RRset in which\n   \"3 1 1\" matches only the current key\
    \ and \"2 0 1\" matches only the\n   future certificate chain, because these might\
    \ not work reliably\n   during the initial deployment of the new keys.\n   ; Initial\
    \ TLSA RRset.\n   ;\n   _443._tcp.www.example.org. IN TLSA 3 1 1 01d09d19c2139a46...\n\
    \   ; Transitional TLSA RRset, published at least two TTLs before the\n   ; actual\
    \ key change.  The new keys are issued by a DANE-TA(2) CA\n   ; but are initially\
    \ specified via a DANE-EE(3) association.\n   ;\n   _443._tcp.www.example.org.\
    \ IN TLSA 3 1 1 01d09d19c2139a46...\n   _443._tcp.www.example.org. IN TLSA 3 1\
    \ 1 7aa7a5359173d05b...\n   ; The final TLSA RRset after the key change.  Now\
    \ that the old\n   ; self-signed EE key is out of the picture, publish the issuing\n\
    \   ; TA of the new chain.\n   ;\n   _443._tcp.www.example.org. IN TLSA 2 0 1\
    \ c57bce38455d9e3d...\n"
- title: 8.3.  Switching to New TLSA Parameters
  contents:
  - "8.3.  Switching to New TLSA Parameters\n   When employing a new digest algorithm\
    \ in the TLSA RRset, for\n   compatibility with digest algorithm agility as specified\
    \ in Section 9\n   below, administrators SHOULD publish the new digest algorithm\
    \ with\n   each combination of certificate usage and selector for each\n   associated\
    \ key or chain used with any other digest algorithm.  When\n   removing an algorithm,\
    \ remove it entirely.  Each digest algorithm\n   employed SHOULD match the same\
    \ set of chains (or raw public keys).\n   ; Initial TLSA RRset with \"DANE-EE(3)\
    \ SHA2-256(1)\" associations\n   ; for two keys.\n   ;\n   _443._tcp.www.example.org.\
    \ IN TLSA 3 1 1 01d09d19c2139a46...\n   _443._tcp.www.example.org. IN TLSA 3 1\
    \ 1 7aa7a5359173d05b...\n   ; New TLSA RRset, also with SHA2-512(2) associations\n\
    \   ; for each key.\n   ;\n   _443._tcp.www.example.org. IN TLSA 3 1 1 01d09d19c2139a46...\n\
    \   _443._tcp.www.example.org. IN TLSA 3 1 2 d9947c35089310bc...\n   _443._tcp.www.example.org.\
    \ IN TLSA 3 1 1 7aa7a5359173d05b...\n   _443._tcp.www.example.org. IN TLSA 3 1\
    \ 2 89a7486a4b6ae714...\n"
- title: '8.4.  TLSA Publisher Requirements: Summary'
  contents:
  - "8.4.  TLSA Publisher Requirements: Summary\n   In summary, server operators updating\
    \ TLSA records should make one\n   change at a time.  The individual safe changes\
    \ are as follows:\n   o  Pre-publish new certificate associations that employ\
    \ the same TLSA\n      parameters (usage, selector, and matching type) as existing\
    \ TLSA\n      records, but match certificate chains that will be deployed in the\n\
    \      near future.\n   o  Wait for stale TLSA RRsets to expire from DNS caches\
    \ before\n      configuring servers to use the new certificate chain.\n   o  Remove\
    \ TLSA records matching any certificate chains that are no\n      longer deployed.\n\
    \   o  Publish TLSA RRsets in which all parameter combinations\n      (certificate\
    \ usage, selector, and matching type) present in the\n      RRset match the same\
    \ set of current and planned certificate\n      chains.\n   The above steps are\
    \ intended to ensure that at all times, and for\n   each combination of usage,\
    \ selector, and matching type, at least one\n   TLSA record corresponds to the\
    \ server's current certificate chain.\n   Each combination of certificate usage,\
    \ selector, and matching type in\n   a server's TLSA RRset SHOULD NOT at any time\
    \ (including unexpired\n   RRsets in client caches) match only some combination\
    \ of future or\n   past certificate chains.  As a result, no matter what combinations\
    \ of\n   usage, selector, and matching type may be supported by a given\n   client,\
    \ they will be sufficient to authenticate the server.\n"
- title: 9.  Digest Algorithm Agility
  contents:
  - "9.  Digest Algorithm Agility\n   While [RFC6698] specifies multiple digest algorithms,\
    \ it does not\n   specify a protocol by which the client and TLSA record publisher\
    \ can\n   agree on the strongest shared algorithm.  Such a protocol would allow\n\
    \   the client and server to avoid exposure to deprecated weaker\n   algorithms\
    \ that are published for compatibility with less capable\n   clients but that\
    \ SHOULD be avoided when possible.  Such a protocol is\n   specified below.\n\
    \   This section defines a protocol for avoiding deprecated digest\n   algorithms\
    \ when these are published in a peer's TLSA RRset alongside\n   stronger digest\
    \ algorithms.  Note that this protocol never avoids RRs\n   with a DANE matching\
    \ type of Full(0), as these do not employ a digest\n   algorithm that might someday\
    \ be weakened by cryptanalysis.\n   Client implementations SHOULD implement a\
    \ default order of digest\n   algorithms by strength.  This order SHOULD be configurable\
    \ by the\n   administrator or user of the client software.  If possible, a\n \
    \  configurable mapping from numeric DANE TLSA matching types to\n   underlying\
    \ digest algorithms provided by the cryptographic library\n   SHOULD be implemented\
    \ to allow new matching types to be used with\n   software that predates their\
    \ introduction.  Configurable ordering of\n   digest algorithms SHOULD be extensible\
    \ to any new digest algorithms.\n   To make digest algorithm agility possible,\
    \ all published DANE TLSA\n   RRsets MUST conform to the requirements of Section\
    \ 8.  Clients SHOULD\n   use digest algorithm agility when processing the peer's\
    \ DANE TLSA\n   records.  Algorithm agility is to be applied after first discarding\n\
    \   any unusable or malformed records (unsupported digest algorithm, or\n   incorrect\
    \ digest length).  For each usage and selector, the client\n   SHOULD process\
    \ only any usable records with a matching type of\n   Full(0) and the usable records\
    \ whose digest algorithm is considered\n   by the client to be the strongest among\
    \ usable records with the given\n   usage and selector.\n   Example: a client\
    \ implements digest algorithm agility and prefers\n   SHA2-512(2) over SHA2-256(1),\
    \ while the server publishes an RRset\n   that employs both digest algorithms\
    \ as well as a Full(0) record.\n   _25._tcp.mail.example.com. IN TLSA 3 1 1 (\n\
    \                                 3FE246A848798236DD2AB78D39F0651D\n         \
    \                        6B6E7CA8E2984012EB0A2E1AC8A87B72 )\n   _25._tcp.mail.example.com.\
    \ IN TLSA 3 1 2 (\n                                 D4F5AF015B46C5057B841C7E7BAB759C\n\
    \                                 BF029526D29520C5BE6A32C67475439E\n         \
    \                        54AB3A945D80C743347C9BD4DADC9D8D\n                  \
    \               57FAB78EAA835362F3CA07CCC19A3214 )\n   _25._tcp.mail.example.com.\
    \ IN TLSA 3 1 0 (\n                                 3059301306072A8648CE3D020106082A\n\
    \                                 8648CE3D0301070342000471CB1F504F\n         \
    \                        9E4B33971376C005445DACD33CD79A28\n                  \
    \               81C3DED1981F18E7AAA76609DD0E4EF2\n                           \
    \      8265C82703030AD60C5DBA6FB8A9397A\n                                 C0FCF06D424C885D484887\
    \ )\n   In this case, the client SHOULD accept a server public key that\n   matches\
    \ either the \"3 1 0\" record or the \"3 1 2\" record, but it\n   SHOULD NOT accept\
    \ keys that match only the weaker \"3 1 1\" record.\n"
- title: 10.  General DANE Guidelines
  contents:
  - "10.  General DANE Guidelines\n   These guidelines provide guidance for using\
    \ or designing protocols\n   for DANE.\n"
- title: 10.1.  DANE DNS Record Size Guidelines
  contents:
  - "10.1.  DANE DNS Record Size Guidelines\n   Selecting a combination of TLSA parameters\
    \ to use requires careful\n   thought.  One important consideration to take into\
    \ account is the\n   size of the resulting TLSA record after its parameters are\
    \ selected.\n"
- title: 10.1.1.  UDP and TCP Considerations
  contents:
  - "10.1.1.  UDP and TCP Considerations\n   Deployments SHOULD avoid TLSA record\
    \ sizes that cause UDP\n   fragmentation.\n   Although DNS over TCP would provide\
    \ the ability to more easily\n   transfer larger DNS records between clients and\
    \ servers, it is not\n   universally deployed and is still prohibited by some\
    \ firewalls.\n   Clients that request DNS records via UDP typically only use TCP\
    \ upon\n   receipt of a truncated response in the DNS response message sent over\n\
    \   UDP.  Setting the Truncation (TC) bit (Section 4.1.1 of [RFC1035])\n   alone\
    \ will be insufficient if the response containing the TC bit is\n   itself fragmented.\n"
- title: 10.1.2.  Packet Size Considerations for TLSA Parameters
  contents:
  - "10.1.2.  Packet Size Considerations for TLSA Parameters\n   Server operators\
    \ SHOULD NOT publish TLSA records using both a TLSA\n   selector of Cert(0) and\
    \ a TLSA matching type of Full(0), as even a\n   single certificate is generally\
    \ too large to be reliably delivered\n   via DNS over UDP.  Furthermore, two TLSA\
    \ records containing full\n   certificates will need to be published simultaneously\
    \ during a\n   certificate rollover, as discussed in Section 8.1.\n   While TLSA\
    \ records using a TLSA selector of SPKI(1) and a TLSA\n   matching type of Full(0)\
    \ (which publish the bare public keys, i.e.,\n   without the overhead of encapsulating\
    \ the keys in an X.509\n   certificate) are generally more compact, these are\
    \ also best avoided\n   when significantly larger than their digests.  Rather,\
    \ servers SHOULD\n   publish digest-based TLSA matching types in their TLSA records,\
    \ in\n   which case the complete corresponding certificate MUST be transmitted\n\
    \   to the client in-band during the TLS handshake.  The certificate (or\n   raw\
    \ public key) can be easily verified using the digest value.\n   In summary, the\
    \ use of a TLSA matching type of Full(0) is\n   NOT RECOMMENDED, and a digest-based\
    \ matching type, such as\n   SHA2-256(1), SHOULD be used instead.\n"
- title: 10.2.  Certificate Name Check Conventions
  contents:
  - "10.2.  Certificate Name Check Conventions\n   Certificates presented by a TLS\
    \ server will generally contain a\n   subjectAltName (SAN) extension or a Common\
    \ Name (CN) element within\n   the subject Distinguished Name (DN).  The TLS server's\
    \ DNS domain\n   name is normally published within these elements, ideally within\
    \ the\n   SAN extension.  (The use of the CN field for this purpose is\n   deprecated.)\n\
    \   When a server hosts multiple domains at the same transport endpoint,\n   the\
    \ server's ability to respond with the right certificate chain is\n   predicated\
    \ on correct SNI information from the client.  DANE clients\n   MUST send the\
    \ SNI extension with a HostName value of the base domain\n   of the TLSA RRset.\n\
    \   With the exception of TLSA certificate usage DANE-EE(3), where name\n   checks\
    \ are not applicable (see Section 5.1), DANE clients MUST verify\n   that the\
    \ client has reached the correct server by checking that the\n   server name is\
    \ listed in the server certificate's SAN or CN (when\n   still supported).  The\
    \ primary server name used for this comparison\n   MUST be the TLSA base domain;\
    \ however, additional acceptable names\n   may be specified by protocol-specific\
    \ DANE standards.  For example,\n   with SMTP, both the destination domain name\
    \ and the MX hostname are\n   acceptable names to be found in the server certificate\
    \ (see\n   [RFC7672]).\n   It is the responsibility of the service operator, in\
    \ coordination\n   with the TLSA Publisher, to ensure that at least one of the\
    \ TLSA\n   records published for the service will match the server's certificate\n\
    \   chain (either the default chain or the certificate that was selected\n   based\
    \ on the SNI information provided by the client).\n   Given the DNSSEC-validated\
    \ DNS records below:\n   example.com.               IN MX 0 mail.example.com.\n\
    \   mail.example.com.          IN A 192.0.2.1\n   _25._tcp.mail.example.com. IN\
    \ TLSA 2 0 1 (\n                                 E8B54E0B4BAA815B06D3462D65FBC7C0\n\
    \                                 CF556ECCF9F5303EBFBB77D022F834C0 )\n   The TLSA\
    \ base domain is \"mail.example.com\" and is required to be the\n   HostName in\
    \ the client's SNI extension.  The server certificate chain\n   is required to\
    \ be signed by a TA with the above certificate SHA2-256\n   digest.  Finally,\
    \ one of the DNS names in the server certificate is\n   required to be either\
    \ \"mail.example.com\" or \"example.com\" (this\n   additional name is a concession\
    \ to compatibility with prior practice;\n   see [RFC7672] for details).\n   [RFC6125]\
    \ specifies the semantics of wildcards in server certificates\n   for various\
    \ application protocols.  DANE does not change how\n   wildcards are treated by\
    \ any given application.\n"
- title: 10.3.  Design Considerations for Protocols Using DANE
  contents:
  - "10.3.  Design Considerations for Protocols Using DANE\n   When a TLS client goes\
    \ to the trouble of authenticating a certificate\n   chain presented by a TLS\
    \ server, it will typically not continue to\n   use that server in the event of\
    \ authentication failure, or else\n   authentication serves no purpose.  Some\
    \ clients may, at times,\n   operate in an \"audit\" mode, where authentication\
    \ failure is reported\n   to the user or in logs as a potential problem, but the\
    \ connection\n   proceeds despite the failure.  Nevertheless, servers publishing\
    \ TLSA\n   records MUST be configured to allow correctly configured clients to\n\
    \   successfully authenticate their TLS certificate chains.\n   A service with\
    \ DNSSEC-validated TLSA records implicitly promises TLS\n   support.  When all\
    \ the TLSA records for a service are found\n   \"unusable\" due to unsupported\
    \ parameter combinations or malformed\n   certificate association data, DANE clients\
    \ cannot authenticate the\n   service certificate chain.  When authenticated TLS\
    \ is mandatory, the\n   client MUST NOT connect to the associated server.\n  \
    \ If, on the other hand, the use of TLS and DANE is \"opportunistic\"\n   [RFC7435],\
    \ then when all TLSA records are unusable, the client SHOULD\n   connect to the\
    \ server via an unauthenticated TLS connection, and if\n   TLS encryption cannot\
    \ be established, the client MUST NOT connect to\n   the server.\n   Standards\
    \ for opportunistic DANE TLS specific to a particular\n   application protocol\
    \ may modify the above requirements.  The key\n   consideration is whether or\
    \ not mandating the use of\n   (unauthenticated) TLS even with unusable TLSA records\
    \ is asking for\n   more security than one can realistically expect.  If expecting\
    \ TLS\n   support when unusable TLSA records are published is realistic for the\n\
    \   application in question, then the application MUST avoid cleartext.\n   If\
    \ not realistic, then mandating TLS would cause clients (even in the\n   absence\
    \ of active attacks) to run into problems with various peers\n   that do not interoperate\
    \ \"securely enough\".  That would create strong\n   incentives to just disable\
    \ Opportunistic Security and stick with\n   cleartext.\n"
- title: 11.  Note on DNSSEC Security
  contents:
  - "11.  Note on DNSSEC Security\n   Clearly, the security of the DANE TLSA PKI rests\
    \ on the security of\n   the underlying DNSSEC infrastructure.  While this document\
    \ is not a\n   guide to DNSSEC security, a few comments may be helpful to TLSA\n\
    \   implementers.\n   With the existing public CA Web PKI, name constraints are\
    \ rarely\n   used, and a public root CA can issue certificates for any domain\
    \ of\n   its choice.  With DNSSEC, under the Registry/Registrar/Registrant\n \
    \  model, the situation is different: only the registrar of record can\n   update\
    \ a domain's DS record [RFC4034] in the registry parent zone (in\n   some cases,\
    \ however, the registry is the sole registrar).  With many\n   Generic Top-Level\
    \ Domains (gTLDs) for which multiple registrars\n   compete to provide domains\
    \ in a single registry, it is important to\n   make sure that rogue registrars\
    \ cannot easily initiate an\n   unauthorized domain transfer and thus take over\
    \ DNSSEC for the\n   domain.  DNS operators are advised to set a registrar lock\
    \ on their\n   domains to offer some protection against this possibility.\n  \
    \ When the registrar is also the DNS operator for the domain, one needs\n   to\
    \ consider whether or not the registrar will allow orderly migration\n   of the\
    \ domain to another registrar or DNS operator in a way that will\n   maintain\
    \ DNSSEC integrity.  TLSA Publishers are advised to seek out a\n   DNS hosting\
    \ registrar that makes it possible to transfer domains to\n   another hosting\
    \ provider without disabling DNSSEC.\n   DNSSEC-signed RRsets cannot be securely\
    \ revoked before they expire.\n   Operators need to plan accordingly and not generate\
    \ signatures of\n   excessively long duration.  For domains publishing high-value\
    \ keys, a\n   signature lifetime (length of the \"signature validity period\"\
    \ as\n   described in Section 8.1 of [RFC4033]) of a few days is reasonable,\n\
    \   and the zone can be re-signed daily.  For domains with less critical\n   data,\
    \ a reasonable signature lifetime is a couple of weeks to a\n   month, and the\
    \ zone can be re-signed weekly.\n   Short signature lifetimes require tighter\
    \ synchronization of primary\n   and secondary nameservers, to make sure that\
    \ secondary servers never\n   serve records with expired signatures.  They also\
    \ limit the maximum\n   time for which a primary server that signs the zone can\
    \ be down.\n   Therefore, short signature lifetimes are more appropriate for sites\n\
    \   with dedicated operations staff, who can restore service quickly in\n   case\
    \ of a problem.\n   Monitoring is important.  If a DNS zone is not re-signed in\
    \ a timely\n   manner, a major outage is likely, as the entire domain and all\
    \ its\n   sub-domains become \"bogus\".\n"
- title: 12.  Summary of Updates to RFC 6698
  contents:
  - "12.  Summary of Updates to RFC 6698\n   o  Section 3 updates [RFC6698] to specify\
    \ a requirement for clients\n      to support at least TLS 1.0 and to support\
    \ SNI.\n   o  Section 4 explains that application support for all four\n     \
    \ certificate usages is NOT RECOMMENDED.  The recommended design is\n      to\
    \ support just DANE-EE(3) and DANE-TA(2).\n   o  Section 5.1 updates [RFC6698]\
    \ to specify that peer identity\n      matching and validity period enforcement\
    \ are based solely on the\n      TLSA RRset properties.  It also specifies DANE\
    \ authentication of\n      raw public keys [RFC7250] via TLSA records with certificate\
    \ usage\n      DANE-EE(3) and selector SPKI(1).\n   o  Section 5.2 updates [RFC6698]\
    \ to require that servers publishing\n      digest TLSA records with a usage of\
    \ DANE-TA(2) MUST include the\n      TA certificate in their TLS server certificate\
    \ message.  This\n      extends to the case of \"2 1 0\" TLSA records that publish\
    \ a full\n      public key.\n   o  Section 5.4 observes that with usage PKIX-TA(0),\
    \ clients may need\n      to process extended trust chains beyond the first trusted\
    \ issuer\n      when that issuer is not self-signed.\n   o  Section 7 recommends\
    \ that DANE application protocols specify that,\n      when possible, securely\
    \ CNAME-expanded names be used to derive the\n      TLSA base domain.\n   o  Section\
    \ 8 specifies a strategy for managing TLSA records that\n      interoperates with\
    \ DANE clients regardless of what subset of the\n      possible TLSA record types\
    \ (combinations of TLSA parameters) is\n      supported by the client.\n   o \
    \ Section 9 specifies a digest algorithm agility protocol.\n   o  Section 10.1\
    \ recommends against the use of Full(0) TLSA records,\n      as digest records\
    \ are generally much more compact.\n"
- title: 13.  Operational Considerations
  contents:
  - "13.  Operational Considerations\n   The DNS TTL of TLSA records needs to be chosen\
    \ with care.  When an\n   unplanned change in the server's certificate chain and\
    \ TLSA RRset is\n   required, such as when keys are compromised or lost, clients\
    \ that\n   cache stale TLSA records will fail to validate the certificate chain\n\
    \   of the updated server.  Publish TLSA RRsets with TTLs that are short\n   enough\
    \ to limit unplanned service disruption to an acceptable\n   duration.\n   The\
    \ signature lifetime (length of the signature validity period) for\n   TLSA records\
    \ SHOULD NOT be too long.  Signed DNSSEC records can be\n   replayed by an MITM\
    \ attacker, provided the signatures have not yet\n   expired.  Shorter signature\
    \ validity periods allow for faster\n   invalidation of compromised keys.  Zone\
    \ refresh and expiration times\n   for secondary nameservers often imply a lower\
    \ bound on the signature\n   validity period (Section 11).  See Section 4.4.1\
    \ of [RFC6781].\n"
- title: 14.  Security Considerations
  contents:
  - "14.  Security Considerations\n   Application protocols that cannot use the existing\
    \ public CA Web PKI\n   may choose to not implement certain TLSA record types\
    \ defined in\n   [RFC6698].  If such records are published despite not being supported\n\
    \   by the application protocol, they are treated as \"unusable\".  When\n   TLS\
    \ is opportunistic, the client MAY proceed to use the server with\n   mandatory\
    \ unauthenticated TLS.  This is stronger than opportunistic\n   TLS without DANE,\
    \ since in that case the client may also proceed with\n   a cleartext connection.\
    \  When TLS is not opportunistic, the client\n   MUST NOT connect to the server.\n\
    \   Thus, when TLSA records are used with opportunistic protocols where\n   PKIX-TA(0)\
    \ and PKIX-EE(1) do not apply, the recommended protocol\n   design is for servers\
    \ to not publish such TLSA records, and for\n   opportunistic TLS clients to use\
    \ them to only enforce the use of\n   (albeit unauthenticated) TLS but otherwise\
    \ treat them as unusable.\n   Of course, when PKIX-TA(0) and PKIX-EE(1) are supported\
    \ by the\n   application protocol, clients MUST implement these certificate usages\n\
    \   as described in [RFC6698] and this document.\n"
- title: 15.  References
  contents:
  - '15.  References

    '
- title: 15.1.  Normative References
  contents:
  - "15.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use in\
    \ RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119,\n  \
    \            DOI 10.17487/RFC2119, March 1997,\n              <http://www.rfc-editor.org/info/rfc2119>.\n\
    \   [RFC4033]  Arends, R., Austein, R., Larson, M., Massey, D., and S.\n     \
    \         Rose, \"DNS Security Introduction and Requirements\",\n            \
    \  RFC 4033, DOI 10.17487/RFC4033, March 2005,\n              <http://www.rfc-editor.org/info/rfc4033>.\n\
    \   [RFC4034]  Arends, R., Austein, R., Larson, M., Massey, D., and S.\n     \
    \         Rose, \"Resource Records for the DNS Security Extensions\",\n      \
    \        RFC 4034, DOI 10.17487/RFC4034, March 2005,\n              <http://www.rfc-editor.org/info/rfc4034>.\n\
    \   [RFC4035]  Arends, R., Austein, R., Larson, M., Massey, D., and S.\n     \
    \         Rose, \"Protocol Modifications for the DNS Security\n              Extensions\"\
    , RFC 4035, DOI 10.17487/RFC4035, March 2005,\n              <http://www.rfc-editor.org/info/rfc4035>.\n\
    \   [RFC5246]  Dierks, T. and E. Rescorla, \"The Transport Layer Security\n  \
    \            (TLS) Protocol Version 1.2\", RFC 5246,\n              DOI 10.17487/RFC5246,\
    \ August 2008,\n              <http://www.rfc-editor.org/info/rfc5246>.\n   [RFC5280]\
    \  Cooper, D., Santesson, S., Farrell, S., Boeyen, S.,\n              Housley,\
    \ R., and W. Polk, \"Internet X.509 Public Key\n              Infrastructure Certificate\
    \ and Certificate Revocation List\n              (CRL) Profile\", RFC 5280, DOI\
    \ 10.17487/RFC5280, May 2008,\n              <http://www.rfc-editor.org/info/rfc5280>.\n\
    \   [RFC6066]  Eastlake 3rd, D., \"Transport Layer Security (TLS)\n          \
    \    Extensions: Extension Definitions\", RFC 6066,\n              DOI 10.17487/RFC6066,\
    \ January 2011,\n              <http://www.rfc-editor.org/info/rfc6066>.\n   [RFC6125]\
    \  Saint-Andre, P. and J. Hodges, \"Representation and\n              Verification\
    \ of Domain-Based Application Service Identity\n              within Internet\
    \ Public Key Infrastructure Using X.509\n              (PKIX) Certificates in\
    \ the Context of Transport Layer\n              Security (TLS)\", RFC 6125, DOI\
    \ 10.17487/RFC6125,\n              March 2011, <http://www.rfc-editor.org/info/rfc6125>.\n\
    \   [RFC6347]  Rescorla, E. and N. Modadugu, \"Datagram Transport Layer\n    \
    \          Security Version 1.2\", RFC 6347, DOI 10.17487/RFC6347,\n         \
    \     January 2012, <http://www.rfc-editor.org/info/rfc6347>.\n   [RFC6698]  Hoffman,\
    \ P. and J. Schlyter, \"The DNS-Based Authentication\n              of Named Entities\
    \ (DANE) Transport Layer Security (TLS)\n              Protocol: TLSA\", RFC 6698,\
    \ DOI 10.17487/RFC6698,\n              August 2012, <http://www.rfc-editor.org/info/rfc6698>.\n\
    \   [RFC7218]  Gudmundsson, O., \"Adding Acronyms to Simplify\n              Conversations\
    \ about DNS-Based Authentication of Named\n              Entities (DANE)\", RFC\
    \ 7218, DOI 10.17487/RFC7218,\n              April 2014, <http://www.rfc-editor.org/info/rfc7218>.\n\
    \   [RFC7250]  Wouters, P., Ed., Tschofenig, H., Ed., Gilmore, J.,\n         \
    \     Weiler, S., and T. Kivinen, \"Using Raw Public Keys in\n              Transport\
    \ Layer Security (TLS) and Datagram Transport\n              Layer Security (DTLS)\"\
    , RFC 7250, DOI 10.17487/RFC7250,\n              June 2014, <http://www.rfc-editor.org/info/rfc7250>.\n"
- title: 15.2.  Informative References
  contents:
  - "15.2.  Informative References\n   [RFC1035]  Mockapetris, P., \"Domain names\
    \ - implementation and\n              specification\", STD 13, RFC 1035, DOI 10.17487/RFC1035,\n\
    \              November 1987, <http://www.rfc-editor.org/info/rfc1035>.\n   [RFC6781]\
    \  Kolkman, O., Mekking, W., and R. Gieben, \"DNSSEC\n              Operational\
    \ Practices, Version 2\", RFC 6781,\n              DOI 10.17487/RFC6781, December\
    \ 2012,\n              <http://www.rfc-editor.org/info/rfc6781>.\n   [RFC6962]\
    \  Laurie, B., Langley, A., and E. Kasper, \"Certificate\n              Transparency\"\
    , RFC 6962, DOI 10.17487/RFC6962, June 2013,\n              <http://www.rfc-editor.org/info/rfc6962>.\n\
    \   [RFC7435]  Dukhovni, V., \"Opportunistic Security: Some Protection\n     \
    \         Most of the Time\", RFC 7435, DOI 10.17487/RFC7435,\n              December\
    \ 2014, <http://www.rfc-editor.org/info/rfc7435>.\n   [RFC7672]  Dukhovni, V.\
    \ and W. Hardaker, \"SMTP Security via\n              Opportunistic DNS-Based\
    \ Authentication of Named Entities\n              (DANE) Transport Layer Security\
    \ (TLS)\", RFC 7672,\n              DOI 10.17487/RFC7672, October 2015,\n    \
    \          <http://www.rfc-editor.org/info/rfc7672>.\n   [RFC7673]  Finch, T.,\
    \ Miller, M., and P. Saint-Andre, \"Using\n              DNS-Based Authentication\
    \ of Named Entities (DANE) TLSA\n              Records with SRV Records\", RFC\
    \ 7673, DOI 10.17487/RFC7673,\n              October 2015, <http://www.rfc-editor.org/info/rfc7673>.\n"
- title: Acknowledgements
  contents:
  - "Acknowledgements\n   The authors would like to thank Phil Pennock for his comments\
    \ and\n   advice on this document.\n   Acknowledgements from Viktor: Thanks to\
    \ Tony Finch, who finally\n   prodded me into participating in DANE working group\
    \ discussions.\n   Thanks to Paul Hoffman, who motivated me to produce this document\
    \ and\n   provided feedback on early draft versions of it.  Thanks also to\n \
    \  Samuel Dukhovni for editorial assistance.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Viktor Dukhovni\n   Two Sigma\n   Email: ietf-dane@dukhovni.org\n\
    \   Wes Hardaker\n   Parsons\n   P.O. Box 382\n   Davis, CA  95617\n   United\
    \ States\n   Email: ietf@hardakers.net\n"
