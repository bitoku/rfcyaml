- title: __initial_text__
  contents:
  - '             Session Initiation Protocol (SIP) Rate Control

    '
- title: Abstract
  contents:
  - "Abstract\n   The prevalent use of the Session Initiation Protocol (SIP) in Next\n\
    \   Generation Networks necessitates that SIP networks provide adequate\n   control\
    \ mechanisms to maintain transaction throughput by preventing\n   congestion collapse\
    \ during traffic overloads.  A loss-based solution\n   to remedy known vulnerabilities\
    \ of the SIP 503 (Service Unavailable)\n   overload control mechanism has already\
    \ been proposed.  Using the same\n   signaling, this document proposes a rate-based\
    \ control scheme to\n   complement the loss-based control scheme.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This\
    \ document is a product of the Internet Engineering Task Force\n   (IETF).  It\
    \ represents the consensus of the IETF community.  It has\n   received public\
    \ review and has been approved for publication by the\n   Internet Engineering\
    \ Steering Group (IESG).  Further information on\n   Internet Standards is available\
    \ in Section 2 of RFC 5741.\n   Information about the current status of this document,\
    \ any errata,\n   and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc7415.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2015 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................2\n\
    \   2. Terminology .....................................................3\n  \
    \ 3. Rate-Based Algorithm Scheme .....................................3\n    \
    \  3.1. Overview ...................................................3\n      3.2.\
    \ Via Header Field Parameters for Overload Control ...........4\n      3.3. Client\
    \ and Server Rate-Based Control Algorithm Selection ...4\n      3.4. Server Operation\
    \ ...........................................5\n      3.5. Client Operation ...........................................6\n\
    \           3.5.1. Default Algorithm ...................................6\n  \
    \         3.5.2. Priority Treatment ..................................9\n    \
    \       3.5.3. Optional Enhancement: Avoidance of Resonance .......10\n   4. Example\
    \ ........................................................12\n   5. Syntax .........................................................13\n\
    \   6. Security Considerations ........................................13\n  \
    \ 7. IANA Considerations ............................................13\n   8.\
    \ References .....................................................14\n      8.1.\
    \ Normative References ......................................14\n      8.2. Informative\
    \ References ....................................14\n   Acknowledgments ...................................................14\n\
    \   Contributors ......................................................14\n  \
    \ Authors' Addresses ................................................15\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   The use of SIP [RFC3261] in large-scale Next Generation\
    \ Networks\n   requires that SIP-based networks provide adequate control mechanisms\n\
    \   for handling traffic growth.  In particular, SIP networks must be\n   able\
    \ to handle traffic overloads gracefully, maintaining transaction\n   throughput\
    \ by preventing congestion collapse.\n   A promising SIP-based overload control\
    \ solution has been proposed in\n   [RFC7339].  That solution provides a communication\
    \ scheme for\n   overload control algorithms.  It also includes a default loss-based\n\
    \   overload control algorithm that makes it possible for a set of\n   clients\
    \ to limit offered load towards an overloaded server.  However,\n   such a loss\
    \ control algorithm is sensitive to variations in load so\n   that any increase\
    \ in load would be directly reflected by the clients\n   in the offered load presented\
    \ to the overloaded servers.  More\n   importantly, a loss-based control scheme\
    \ cannot guarantee an upper\n   bound on the load from the clients towards an\
    \ overloaded server and\n   requires frequent updates that may have implications\
    \ for stability.\n   In accordance with the framework defined in [RFC7339], this\
    \ document\n   proposes an alternate overload control scheme: the rate-based\n\
    \   overload control scheme.  The rate-based control algorithm guarantees\n  \
    \ an upper bound on the rate, constant between server updates, of\n   requests\
    \ sent by clients towards an overloaded server.  The trade-off\n   is in terms\
    \ of algorithmic complexity, since the overloaded server is\n   more likely to\
    \ use a different target (maximum rate) for each client\n   than the loss-based\
    \ approach.\n   The proposed rate-based overload control algorithm mitigates\n\
    \   congestion in SIP networks while adhering to the overload signaling\n   scheme\
    \ in [RFC7339] and presenting a rate-based control scheme as an\n   optional alternative\
    \ to the default loss-based control scheme in\n   [RFC7339].\n"
- title: 2.  Terminology
  contents:
  - "2.  Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\"\
    , \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and\
    \ \"OPTIONAL\" in this\n   document are to be interpreted as described in [RFC2119].\n\
    \   Unless otherwise specified, all SIP entities described in this\n   document\
    \ are assumed to support this specification.\n"
- title: 3.  Rate-Based Algorithm Scheme
  contents:
  - '3.  Rate-Based Algorithm Scheme

    '
- title: 3.1.  Overview
  contents:
  - "3.1.  Overview\n   The server is the one protected by the overload control algorithm\n\
    \   defined here, and the client is the one that throttles traffic\n   towards\
    \ the server.\n   Following the procedures defined in [RFC7339], the server and\
    \ clients\n   signal one another support for rate-based overload control.\n  \
    \ Then, periodically, the server relies on internal measurements (e.g.,\n   CPU\
    \ utilization or queueing delay) to evaluate its overload state and\n   estimate\
    \ a target maximum SIP request rate in number of requests per\n   second (as opposed\
    \ to target percent loss in the case of loss-based\n   control).\n   When in overload,\
    \ the server uses the \"oc\" parameter in the Via\n   header field [RFC7339] of\
    \ SIP responses in order to inform clients of\n   its overload state and of the\
    \ target maximum SIP request rate for\n   that client.\n   Upon receiving the\
    \ \"oc\" parameter with a target maximum SIP request\n   rate, each client throttles\
    \ new SIP requests towards the overloaded\n   server.\n"
- title: 3.2. Via Header Field Parameters for Overload Control
  contents:
  - "3.2. Via Header Field Parameters for Overload Control\n   Four Via header parameters\
    \ are defined in [RFC7339] and are\n   summarized below:\n   o  oc: Used by clients\
    \ in SIP requests to indicate support for\n      overload control per [RFC7339]\
    \ and by servers to indicate the load\n      reduction amount in the loss-based\
    \ algorithm and the maximum rate,\n      in messages per second, for the rate-based\
    \ algorithm described\n      here.\n   o  oc-algo: Used by clients in SIP requests\
    \ to advertise supported\n      overload control algorithms and by servers to\
    \ notify clients of\n      the algorithm in effect.  Supported values are loss\
    \ (default) and\n      rate (optional).\n   o  oc-validity: Used by servers in\
    \ SIP responses to indicate an\n      interval of time (in milliseconds) that\
    \ the load reduction should\n      be in effect.  A value of 0 is reserved for\
    \ the server to stop\n      overload control.  A non-zero value is required in\
    \ all other\n      cases.\n   o  oc-seq: A sequence number associated with the\
    \ \"oc\" parameter.\n   Consult Section 4 for an illustration of the usage of\
    \ the \"oc\"\n   parameter in the Via header field.\n"
- title: 3.3.  Client and Server Rate-Based Control Algorithm Selection
  contents:
  - "3.3.  Client and Server Rate-Based Control Algorithm Selection\n   Per [RFC7339],\
    \ new clients indicate supported overload control\n   algorithms to servers by\
    \ inserting \"oc\" and \"oc-algo\", with the names\n   of the supported algorithms,\
    \ in the Via header field of SIP requests\n   destined to servers.  The inclusion\
    \ by the client of the token \"rate\"\n   indicates that the client supports a\
    \ rate-based algorithm.\n   Conversely, servers notify clients of the selected\
    \ overload control\n   algorithm through the \"oc-algo\" parameter in the Via\
    \ header field of\n   SIP responses to clients.  The inclusion by the server of\
    \ the token\n   \"rate\" in the \"oc-algo\" parameter indicates that the rate-based\n\
    \   algorithm has been selected by the server.\n   Support of rate-based control\
    \ MUST be indicated by clients including\n   the token \"rate\" in the \"oc-algo\"\
    \ list.  Selection of rate-based\n   control MUST be indicated by servers by setting\
    \ \"oc-algo\" to the\n   token \"rate\".\n"
- title: 3.4.  Server Operation
  contents:
  - "3.4.  Server Operation\n   The actual algorithm used by the server to determine\
    \ its overload\n   state and estimate a target maximum SIP request rate is beyond\
    \ the\n   scope of this document.\n   However, the server MUST periodically evaluate\
    \ its overload state and\n   estimate a target SIP request rate beyond which it\
    \ would become\n   overloaded.  The server must determine how it will allocate\
    \ the\n   target SIP request rate among its client.  The server may set the\n\
    \   same rate for every client or may set different rates for different\n   clients.\n\
    \   The maximum rate determined by the server for a client applies to the\n  \
    \ entire stream of SIP requests, even though throttling may only affect\n   a\
    \ particular subset of the requests, since as per [RFC7339] and REQ\n   13 of\
    \ [RFC5390], request prioritization is a client's responsibility.\n   When setting\
    \ the maximum rate for a particular client, the server may\n   need to take into\
    \ account the workload (e.g., CPU load per request)\n   of the distribution of\
    \ message types from that client.  Furthermore,\n   because the client may prioritize\
    \ the specific types of messages it\n   sends while under overload restriction,\
    \ this distribution of message\n   types may be different from the message distribution\
    \ for that client\n   under non-overload conditions (e.g., it could have either\
    \ higher or\n   lower CPU load).\n   Note that the \"oc\" parameter for the rate-based\
    \ algorithm is an upper\n   bound (in messages per second) on the traffic sent\
    \ by the client to\n   the server.  The client may send traffic at a rate significantly\n\
    \   lower than the upper bound for a variety of reasons.\n   In other words, when\
    \ multiple clients are being controlled by an\n   overloaded server, at any given\
    \ time, some clients may receive\n   requests at a rate below their target (maximum)\
    \ SIP request rate\n   while others above that target rate.  But the resulting\
    \ request rate\n   presented to the overloaded server will converge towards the\
    \ target\n   SIP request rate.\n   Upon detection of overload and the determination\
    \ to invoke overload\n   controls, the server MUST follow the specifications in\
    \ [RFC7339] to\n   notify its clients of the allocated target SIP request rate\
    \ and to\n   notify them that rate-based control is in effect.\n   The server\
    \ MUST use the \"oc\" parameter defined in [RFC7339] to send a\n   target SIP\
    \ request rate to each of its clients.\n   When a client supports the default\
    \ loss-based algorithm and not the\n   rate-based algorithm, the client would\
    \ be handled in the same way as\n   in Section 5.10.2 of [RFC7339].\n"
- title: 3.5.  Client Operation
  contents:
  - '3.5.  Client Operation

    '
- title: 3.5.1.  Default Algorithm
  contents:
  - "3.5.1.  Default Algorithm\n   In determining whether or not to transmit a specific\
    \ message, the\n   client may use any algorithm that limits the message rate to\
    \ the \"oc\"\n   parameter in units of messages per second.  For ease of discussion,\n\
    \   we define T = 1/[\"oc\" parameter] as the target inter-SIP request\n   interval.\
    \  The algorithm may be strictly deterministic, or it may be\n   probabilistic.\
    \  It may, or may not, have a tolerance factor to allow\n   for short bursts,\
    \ as long as the long-term rate remains below 1/T.\n   The algorithm may have\
    \ provisions for prioritizing traffic in\n   accordance with REQ 13 of [RFC5390].\n\
    \   If the algorithm requires other parameters (in addition to \"T\", which\n\
    \   is 1/[\"oc\" parameter]), they may be set autonomously by the client,\n  \
    \ or they may be negotiated between client and server independently of\n   the\
    \ SIP-based overload control solution.\n   In either case, the coordination is\
    \ out of the scope of this\n   document.  The default algorithms presented here\
    \ (one with and one\n   without provisions for prioritizing traffic) are only\
    \ examples.\n   To throttle new SIP requests at the rate specified by the \"oc\"\
    \n   parameter sent by the server to its clients, the client MAY use the\n   proposed\
    \ default algorithm for rate-based control or any other\n   equivalent algorithm\
    \ that forward messages in conformance with the\n   upper bound of 1/T messages\
    \ per second.\n   The default leaky bucket algorithm presented here is based on\n\
    \   [ITU-T-I.371], Appendix A.2.  The algorithm makes it possible for\n   clients\
    \ to deliver SIP requests at a rate specified by the \"oc\"\n   parameter with\
    \ the tolerance parameter TAU (preferably configurable).\n   Conceptually, the\
    \ leaky bucket algorithm can be viewed as a finite\n   capacity bucket whose real-valued\
    \ content drains out at a continuous\n   rate of 1 unit of content per time unit\
    \ and whose content increases\n   by the increment T for each forwarded SIP request.\
    \  T is computed as\n   the inverse of the rate specified by the \"oc\" parameter,\
    \ namely\n   T = 1 / [\"oc\" parameter].\n   Note that when the \"oc\" parameter\
    \ is 0 with a non-zero \"oc-validity\",\n   then the client should reject 100%\
    \ of SIP requests destined to the\n   overload server.  However, when the \"oc-validity\"\
    \ value is 0, the\n   client should immediately stop throttling.\n   If, at a\
    \ new SIP request arrival, the content of the bucket is less\n   than or equal\
    \ to the limit value TAU, then the SIP request is\n   forwarded to the server;\
    \ otherwise, the SIP request is rejected.\n   Note that the capacity of the bucket\
    \ (the upper bound of the counter)\n   is (T + TAU).\n   The tolerance parameter\
    \ TAU determines how close the long-term\n   admitted rate is to an ideal control\
    \ that would admit all SIP\n   requests for arrival rates less than 1/T and then\
    \ admit SIP requests\n   precisely at the rate of 1/T for arrival rates above\
    \ 1/T.  In\n   particular, at mean arrival rates close to 1/T, it determines the\n\
    \   tolerance to deviation of the inter-arrival time from T (the larger\n   TAU,\
    \ the more tolerance to deviations from the inter-departure\n   interval T).\n\
    \   This deviation from the inter-departure interval influences the\n   admitted\
    \ rate burstiness or the number of consecutive SIP requests\n   forwarded to the\
    \ server (burst size proportional to TAU over the\n   difference between 1/T and\
    \ the arrival rate).\n   In situations where clients are configured with some\
    \ knowledge about\n   the server (e.g., operator pre-provisioning), it can be\
    \ beneficial to\n   choose a value of TAU based on how many clients will be sending\n\
    \   requests to the server.\n   Servers with a very large number of clients, each\
    \ with a relatively\n   small arrival rate, will generally benefit from a smaller\
    \ value for\n   TAU in order to limit queuing (and hence response times) at the\n\
    \   server when subjected to a sudden surge of traffic from all clients.\n   Conversely,\
    \ a server with a relatively small number of clients, each\n   with a proportionally\
    \ larger arrival rate, will benefit from a larger\n   value of TAU.\n   Once the\
    \ control has been activated, at the arrival time of the k-th\n   new SIP request,\
    \ ta(k), the content of the bucket is provisionally\n   updated to the value\n\
    \   X' = X - (ta(k) - LCT)\n   where X is the value of the leaky bucket counter\
    \ after arrival of the\n   last forwarded SIP request, and LCT is the time at\
    \ which the last SIP\n   request was forwarded.\n   If X' is less than or equal\
    \ to the limit value TAU, then the new SIP\n   request is forwarded, the leaky\
    \ bucket counter X is set to X' (or to\n   0 if X' is negative) plus the increment\
    \ T, and LCT is set to the\n   current time ta(k).  If X' is greater than the\
    \ limit value TAU, then\n   the new SIP request is rejected, and the values of\
    \ X and LCT are\n   unchanged.\n   When the first response from the server has\
    \ been received indicating\n   control activation (oc-validity>0), LCT is set\
    \ to the time of\n   activation, and the leaky bucket counter is initialized to\
    \ the\n   parameter TAU0 (preferably configurable), which is 0 or larger but\n\
    \   less than or equal to TAU.\n   TAU can assume any positive real number value\
    \ and is not necessarily\n   bounded by T.\n   TAU=4*T is a reasonable compromise\
    \ between burst size and throttled\n   rate adaptation at low offered rates.\n\
    \   Note that specification of a value for TAU and any communication or\n   coordination\
    \ between servers are beyond the scope of this document.\n   A reference algorithm\
    \ is shown below.\n   No priority case:\n   // T: inter-transmission interval,\
    \ set to 1 / [\"oc\" parameter]\n   // TAU: tolerance parameter\n   // ta: arrival\
    \ time of the most recent arrival received by the\n   //     client\n   // LCT:\
    \ arrival time of last SIP request that was sent to the server\n   //      (initialized\
    \ to the first arrival time)\n   // X: current value of the leaky bucket counter\
    \ (initialized to\n   //    TAU0)\n   // After most recent arrival, calculate\
    \ auxiliary variable Xp\n   Xp = X - (ta - LCT);\n   if (Xp <= TAU) {\n     //\
    \ Transmit SIP request\n     // Update X and LCT\n     X = max (0, Xp) + T;\n\
    \     LCT = ta;\n   } else {\n     // Reject SIP request\n     // Do not update\
    \ X and LCT\n   }\n"
- title: 3.5.2.  Priority Treatment
  contents:
  - "3.5.2.  Priority Treatment\n   As with the loss-based algorithm in [RFC7339],\
    \ a client implementing\n   the rate-based algorithm also prioritizes messages\
    \ into two or more\n   categories of requests, for example, requests that are\
    \ candidates for\n   reduction and requests that are not subject to reduction\
    \ (except\n   under extenuating circumstances when there aren't any messages in\
    \ the\n   first category that can be reduced).\n   Accordingly, the proposed leaky\
    \ bucket implementation is modified to\n   support priority using two thresholds\
    \ for SIP requests that are\n   candidates for reduction.  With two priorities,\
    \ the proposed leaky\n   bucket requires two thresholds: TAU1 and TAU2 (where\
    \ TAU1 < TAU2):\n   o  All new requests would be admitted when the leaky bucket\
    \ counter\n      is at or below TAU1.\n   o  Only higher-priority requests would\
    \ be admitted when the leaky\n      bucket counter is between TAU1 and TAU2.\n\
    \   o  All requests would be rejected when the bucket counter is at or\n     \
    \ above TAU2.\n   This can be generalized to n priorities using n thresholds for\
    \ n>2 in\n   the obvious way.\n   With a priority scheme that relies on two tolerance\
    \ parameters (TAU2\n   influences the priority traffic, and TAU1 influences the\
    \ non-priority\n   traffic), always set TAU1 < TAU2 (TAU is replaced by TAU1 and\
    \ TAU2).\n   Setting both tolerance parameters to the same value is equivalent\
    \ to\n   having no priority.  TAU1 influences the admitted rate the same way\n\
    \   as TAU does when no priority is set.  The larger the difference\n   between\
    \ TAU1 and TAU2, the closer the control is to strict priority\n   queueing.\n\
    \   TAU1 and TAU2 can assume any positive real number value and are not\n   necessarily\
    \ bounded by T.\n   Reasonable values for TAU0, TAU1, and TAU2 are:\n   o  TAU0\
    \ = 0,\n   o  TAU1 = 1/2 * TAU2, and\n   o  TAU2 = 10 * T.\n   Note that specification\
    \ of a value for TAU1 and TAU2 and any\n   communication or coordination between\
    \ servers are beyond the scope of\n   this document.\n   A reference algorithm\
    \ is shown below.\n   Priority case:\n   // T: inter-transmission interval, set\
    \ to 1 / [\"oc\" parameter]\n   // TAU1: tolerance parameter of no-priority SIP\
    \ requests\n   // TAU2: tolerance parameter of priority SIP requests\n   // ta:\
    \ arrival time of the most recent arrival received by the\n   //     client\n\
    \   // LCT: arrival time of last SIP request that was sent to the server\n   //\
    \      (initialized to the first arrival time)\n   // X: current value of the\
    \ leaky bucket counter (initialized to\n   //    TAU0)\n   // After most recent\
    \ arrival, calculate auxiliary variable Xp\n   Xp = X - (ta - LCT);\n   if (AnyRequestReceived\
    \ && Xp <= TAU1) || (PriorityRequestReceived &&\n   Xp <= TAU2 && Xp > TAU1) {\n\
    \     // Transmit SIP request\n     // Update X and LCT\n     X = max (0, Xp)\
    \ + T;\n     LCT = ta;\n   } else {\n     // Reject SIP request\n     // Do not\
    \ update X and LCT\n   }\n"
- title: '3.5.3.  Optional Enhancement: Avoidance of Resonance'
  contents:
  - "3.5.3.  Optional Enhancement: Avoidance of Resonance\n   As the number of client\
    \ sources of traffic increases or the\n   throughput of the server decreases,\
    \ the maximum rate admitted by each\n   client needs to decrease; therefore, the\
    \ value of T becomes larger.\n   Under some circumstances (e.g., if the traffic\
    \ arises very quickly\n   simultaneously at many sources), the occupancies of\
    \ each bucket can\n   become synchronized, resulting in the admissions from each\
    \ source\n   being close in time and batched or having very 'peaky' arrivals at\n\
    \   the server, which gives rise not only to control instability but also\n  \
    \ to very poor delays and even lost messages.  An appropriate term for\n   this\
    \ is 'resonance' [Erramilli].\n   If the network topology is such that resonance\
    \ can occur, then a\n   simple way to avoid resonance is to randomize the bucket\
    \ occupancy at\n   two appropriate points -- at the activation of control and\
    \ whenever\n   the bucket empties -- as described below.\n   After updating the\
    \ value of the leaky bucket to X', generate a value\n   u as follows:\n     if\
    \ X' > 0, then u = 0\n     else if X' <= 0, then let u be set to a random value\
    \ uniformly\n                      distributed between -1/2 and +1/2\n   Then,\
    \ only if the arrival is admitted, increase the bucket by an\n   amount T + uT,\
    \ which will therefore be just T if the bucket hadn't\n   emptied or lie between\
    \ T/2 and 3T/2 if it had.\n   This randomization should also be done when control\
    \ is activated,\n   i.e., instead of simply initializing the leaky bucket counter\
    \ to\n   TAU0, initialize it to TAU0 + uT, where u is uniformly distributed as\n\
    \   above.  Since activation would have been a result of response to a\n   request\
    \ sent by the client, the second term in this expression can be\n   interpreted\
    \ as being the bucket increment following that admission.\n   This method has\
    \ the following characteristics:\n   o  If TAU0 is chosen to be equal to TAU and\
    \ all sources activate\n      control at the same time due to an extremely high\
    \ request rate,\n      then the time until the first request admitted by each\
    \ client\n      would be uniformly distributed over [0,T].\n   o  The maximum\
    \ occupancy is TAU + (3/2)T, rather than TAU + T without\n      randomization.\n\
    \   o  For the special case of 'classic gapping' where TAU=0, then the\n     \
    \ minimum time between admissions is uniformly distributed over\n      [T/2, 3T/2],\
    \ and the mean time between admissions is the same,\n      i.e., T+1/R where R\
    \ is the request arrival rate.\n   o  As high load randomization rarely occurs,\
    \ there is no loss of\n      precision of the admitted rate, even though the randomized\n\
    \      'phasing' of the buckets remains.\n"
- title: 4.  Example
  contents:
  - "4.  Example\n   The example in this section adapts the example in Section 6 of\n\
    \   [RFC7339], where client P1 sends requests to a downstream server P2:\n   \
    \         INVITE sips:user@example.com SIP/2.0\n            Via: SIP/2.0/TLS p1.example.net;\n\
    \             branch=z9hG4bK2d4790.1;received=192.0.2.111;\n             oc;oc-algo=\"\
    loss,rate\"\n            ...\n            SIP/2.0 100 Trying\n            Via:\
    \ SIP/2.0/TLS p1.example.net;\n             branch=z9hG4bK2d4790.1;received=192.0.2.111;\n\
    \             oc=0;oc-algo=\"rate\";oc-validity=0;\n             oc-seq=1282321615.781\n\
    \            ...\n   The first message above is sent by P1 to P2.  This message\
    \ is a SIP\n   request; because P1 supports overload control, it inserts the \"\
    oc\"\n   parameter in the topmost Via header field that it created.  P1\n   supports\
    \ two overload control algorithms: loss and rate.\n   The second message, a SIP\
    \ response, shows the topmost Via header\n   field amended by P2 according to\
    \ this specification and sent to P1.\n   Because P2 also supports overload control,\
    \ it chooses the rate-based\n   scheme and sends that back to P1 in the \"oc-algo\"\
    \ parameter.  It uses\n   oc-validity=0 to indicate no overload control.  In this\
    \ example,\n   \"oc=0\", but \"oc\" could be any value as \"oc\" is ignored when\n\
    \   \"oc-validity=0\".\n   At some later time, P2 starts to experience overload.\
    \  It sends the\n   following SIP message indicating P1 should send SIP requests\
    \ at a\n   rate no greater than or equal to 150 SIP requests per second and for\n\
    \   a duration of 1,000 milliseconds.\n            SIP/2.0 180 Ringing\n     \
    \       Via: SIP/2.0/TLS p1.example.net;\n             branch=z9hG4bK2d4790.1;received=192.0.2.111;\n\
    \             oc=150;oc-algo=\"rate\";oc-validity=1000;\n             oc-seq=1282321615.782\n\
    \             ...\n"
- title: 5.  Syntax
  contents:
  - "5.  Syntax\n   This specification extends the existing definition of the Via\
    \ header\n   field parameters of [RFC7339] as follows:\n   algo-list =/ \"rate\"\
    \n"
- title: 6.  Security Considerations
  contents:
  - "6.  Security Considerations\n   Aside from the resonance concerns discussed in\
    \ Section 3.5.3, this\n   mechanism does not introduce any security concerns beyond\
    \ the general\n   overload control security issues discussed in [RFC7339].  Methods\
    \ to\n   mitigate the risk of resonance are discussed in Section 3.5.3.\n"
- title: 7.  IANA Considerations
  contents:
  - "7.  IANA Considerations\n   IANA has registered the \"oc-algo\" parameter of\
    \ the Via header field\n   in the \"Header Field Parameters and Parameter Values\"\
    \ subregistry of\n   the \"Session Initiation Protocol (SIP) Parameters\" registry.\
    \  The\n   entry appears as follows:\n   Header     Parameter     Predefined \
    \    References\n   Field      Name          Values\n   ___________________________________________________________\n\
    \   Via        oc-algo       Yes            [RFC7339] [RFC7415]\n"
- title: 8.  References
  contents:
  - '8.  References

    '
- title: 8.1.  Normative References
  contents:
  - "8.1.  Normative References\n   [RFC2119]     Bradner, S., \"Key words for use\
    \ in RFCs to Indicate\n                 Requirement Levels\", BCP 14, RFC 2119,\
    \ March 1997,\n                 <http://www.rfc-editor.org/info/rfc2119>.\n  \
    \ [RFC3261]     Rosenberg, J., Schulzrinne, H., Camarillo, G.,\n             \
    \    Johnston, A., Peterson, J., Sparks, R., Handley, M.,\n                 and\
    \ E. Schooler, \"SIP: Session Initiation Protocol\",\n                 RFC 3261,\
    \ June 2002,\n                 <http://www.rfc-editor.org/info/rfc3261>.\n   [RFC5390]\
    \     Rosenberg, J., \"Requirements for Management of Overload\n             \
    \    in the Session Initiation Protocol\", RFC 5390, December\n              \
    \   2008, <http://www.rfc-editor.org/info/rfc5390>.\n   [RFC7339]     Gurbani,\
    \ V., Ed., Hilt, V., and H. Schulzrinne,\n                 \"Session Initiation\
    \ Protocol (SIP) Overload Control\",\n                 RFC 7339, September 2014,\n\
    \                 <http://www.rfc-editor.org/info/rfc7339>.\n"
- title: 8.2.  Informative References
  contents:
  - "8.2.  Informative References\n   [ITU-T-I.371] ITU-T, \"Traffic control and congestion\
    \ control in\n                 B-ISDN\", ITU-T Recommendation I.371, March 2004.\n\
    \   [Erramilli]   Erramilli, A., and L. Forys, \"Traffic Synchronization\n   \
    \              Effects In Teletraffic Systems\", ITC-13, 1991.\n"
- title: Acknowledgments
  contents:
  - "Acknowledgments\n   Many thanks to the following individuals for comments and\
    \ feedback on\n   this document: Richard Barnes, Keith Drage, Vijay Gurbany, Volker\n\
    \   Hilt, Christer Holmberg, Winston Hong, Peter Yee, and James Yu.\n"
- title: Contributors
  contents:
  - "Contributors\n   Significant contributions to this document were made by Janet\
    \ Gunn.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Eric Noel\n   AT&T Labs\n   200 S Laurel Avenue\n   Middletown,\
    \ NJ 07747\n   United States\n   EMail: eric.noel@att.com\n   Philip M. Williams\n\
    \   BT Innovate & Design\n   Ipswich, IP5 3RE\n   United Kingdom\n   EMail: phil.m.williams@bt.com\n"
