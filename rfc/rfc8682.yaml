- title: __initial_text__
  contents:
  - '             TinyMT32 Pseudorandom Number Generator (PRNG)

    '
- title: Abstract
  contents:
  - "Abstract\n   This document describes the TinyMT32 Pseudorandom Number Generator\n\
    \   (PRNG), which produces 32-bit pseudorandom unsigned integers and aims\n  \
    \ at having a simple-to-use and deterministic solution.  This PRNG is a\n   small-sized\
    \ variant of the Mersenne Twister (MT) PRNG.  The main\n   advantage of TinyMT32\
    \ over MT is the use of a small internal state,\n   compatible with most target\
    \ platforms that include embedded devices,\n   while keeping reasonably good randomness\
    \ that represents a\n   significant improvement compared to the Park-Miller Linear\n\
    \   Congruential PRNG.  However, neither the TinyMT nor MT PRNG is meant\n   to\
    \ be used for cryptographic applications.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This\
    \ document is a product of the Internet Engineering Task Force\n   (IETF).  It\
    \ represents the consensus of the IETF community.  It has\n   received public\
    \ review and has been approved for publication by the\n   Internet Engineering\
    \ Steering Group (IESG).  Further information on\n   Internet Standards is available\
    \ in Section 2 of RFC 7841.\n   Information about the current status of this document,\
    \ any errata,\n   and how to provide feedback on it may be obtained at\n   https://www.rfc-editor.org/info/rfc8682.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2020 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (https://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction\n     1.1.  Requirements Language\n  \
    \ 2.  TinyMT32 PRNG Specification\n     2.1.  TinyMT32 Source Code\n     2.2.\
    \  TinyMT32 Usage\n     2.3.  Specific Implementation Validation and Deterministic\n\
    \           Behavior\n   3.  Security Considerations\n   4.  IANA Considerations\n\
    \   5.  References\n     5.1.  Normative References\n     5.2.  Informative References\n\
    \   Acknowledgments\n   Authors' Addresses\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   This document specifies the TinyMT32 PRNG as a specialization\
    \ of the\n   reference implementation version 1.1 (2015/04/24) by Mutsuo Saito\
    \ and\n   Makoto Matsumoto from Hiroshima University, which can be found at\n\
    \   [TinyMT-web] (the TinyMT website) and [TinyMT-dev] (the GitHub site).\n  \
    \ This specialization aims at having a simple-to-use and deterministic\n   PRNG,\
    \ as explained below.  However, the TinyMT32 PRNG is not meant to\n   be used\
    \ for cryptographic applications.\n   TinyMT is a new, small-sized variant of\
    \ the Mersenne Twister (MT)\n   PRNG introduced in 2011 [MT98].  This document\
    \ focuses on the\n   TinyMT32 variant (rather than TinyMT64) of the TinyMT PRNG,\
    \ which\n   outputs 32-bit unsigned integers.\n   The purpose of TinyMT is not\
    \ to replace the Mersenne Twister: TinyMT\n   has a far shorter period (2^(127)\
    \ - 1) than MT.  The merit of TinyMT\n   is in the small size of the 127-bit internal\
    \ state, far smaller than\n   the 19937 bits of MT.  The outputs of TinyMT satisfy\
    \ several\n   statistical tests for non-cryptographic randomness, including\n\
    \   BigCrush in TestU01 [TestU01] and AdaptiveCrush [AdaptiveCrush],\n   leaving\
    \ it well placed for non-cryptographic usage, especially given\n   the small size\
    \ of its internal state (see [TinyMT-web]).  From this\n   point of view, TinyMT32\
    \ represents a major improvement with respect\n   to the Park-Miller Linear Congruential\
    \ PRNG (e.g., as specified in\n   [RFC5170]), which suffers from several known\
    \ limitations (see, for\n   instance, [PTVF92], Section 7.1, p. 279 and [RFC8681],\
    \ Appendix B).\n   The TinyMT32 PRNG initialization depends, among other things,\
    \ on a\n   parameter set, namely (mat1, mat2, tmat).  In order to facilitate the\n\
    \   use of this PRNG and to make the sequence of pseudorandom numbers\n   depend\
    \ only on the seed value, this specification requires the use of\n   a specific\
    \ parameter set (see Section 2.1).  This is a major\n   difference with respect\
    \ to the implementation version 1.1\n   (2015/04/24), which leaves this parameter\
    \ set unspecified.\n   Finally, the determinism of this PRNG for a given seed\
    \ has been\n   carefully checked (see Section 2.3).  This means that the same\n\
    \   sequence of pseudorandom numbers should be generated, no matter the\n   target\
    \ execution platform and compiler, for a given initial seed\n   value.  This determinism\
    \ can be a key requirement, as is the case\n   with [RFC8681], which normatively\
    \ depends on this specification.\n"
- title: 1.1.  Requirements Language
  contents:
  - "1.1.  Requirements Language\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\"\
    , \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"\
    NOT RECOMMENDED\", \"MAY\", and\n   \"OPTIONAL\" in this document are to be interpreted\
    \ as described in\n   BCP 14 [RFC2119] [RFC8174] when, and only when, they appear\
    \ in all\n   capitals, as shown here.\n"
- title: 2.  TinyMT32 PRNG Specification
  contents:
  - '2.  TinyMT32 PRNG Specification

    '
- title: 2.1.  TinyMT32 Source Code
  contents:
  - "2.1.  TinyMT32 Source Code\n   The TinyMT32 PRNG must be initialized with a parameter\
    \ set that needs\n   to be well chosen.  In this specification, for the sake of\n\
    \   simplicity, the following parameter set MUST be used:\n   *  mat1 = 0x8f7011ee\
    \ = 2406486510\n   *  mat2 = 0xfc78ff1f = 4235788063\n   *  tmat = 0x3793fdff\
    \ = 932445695\n   This parameter set is the first entry of the precalculated parameter\n\
    \   sets in tinymt32dc/tinymt32dc.0.1048576.txt by Kenji Rikitake,\n   available\
    \ at [TinyMT-params].  This is also the parameter set used in\n   [KR12].\n  \
    \ The TinyMT32 PRNG reference implementation is reproduced in Figure 1.\n   This\
    \ is a C language implementation written for C99 [C99].  This\n   reference implementation\
    \ differs from the original source code as\n   follows:\n   *  The original authors,\
    \ who are coauthors of this document, have\n      granted IETF the rights to publish\
    \ this version with a license and\n      copyright that are in accordance with\
    \ BCP 78 and the IETF Trust's\n      Legal Provisions Relating to IETF Documents\n\
    \      (http://trustee.ietf.org/license-info).\n   *  The source code initially\
    \ spread over the tinymt32.h and\n      tinymt32.c files has been merged.\n  \
    \ *  The unused parts of the original source code have been removed.\n      This\
    \ is the case of the tinymt32_init_by_array() alternative\n      initialization\
    \ function.  This is also the case of the\n      period_certification() function\
    \ after having checked it is not\n      required with the chosen parameter set.\n\
    \   *  The unused constants TINYMT32_MEXP and TINYMT32_MUL have been\n      removed.\n\
    \   *  The appropriate parameter set has been added to the initialization\n  \
    \    function.\n   *  The function order has been changed.\n   *  Certain internal\
    \ variables have been renamed for compactness\n      purposes.\n   *  The const\
    \ qualifier has been added to the constant definitions.\n   *  The code that was\
    \ dependent on the representation of negative\n      integers by 2's complements\
    \ has been replaced by a more portable\n      version.\n   <CODE BEGINS>\n   /**\n\
    \    * Tiny Mersenne Twister: only 127-bit internal state.\n    * Derived from\
    \ the reference implementation version 1.1 (2015/04/24)\n    * by Mutsuo Saito\
    \ (Hiroshima University) and Makoto Matsumoto\n    * (Hiroshima University).\n\
    \    */\n   #include <stdint.h>\n   /**\n    * tinymt32 internal state vector\
    \ and parameters\n    */\n   typedef struct {\n       uint32_t status[4];\n  \
    \     uint32_t mat1;\n       uint32_t mat2;\n       uint32_t tmat;\n   } tinymt32_t;\n\
    \   static void tinymt32_next_state (tinymt32_t* s);\n   static uint32_t tinymt32_temper\
    \ (tinymt32_t* s);\n   /**\n    * Parameter set to use for this IETF specification.\
    \ Don't change.\n    * This parameter set is the first entry of the precalculated\n\
    \    * parameter sets in tinymt32dc/tinymt32dc.0.1048576.txt by\n    * Kenji Rikitake,\
    \ available at:\n    *    https://github.com/jj1bdx/tinymtdc-longbatch/.\n   \
    \ * It is also the parameter set used in:\n    *    Rikitake, K., \"TinyMT pseudo\
    \ random number generator for\n    *    Erlang\", Proceedings of the 11th ACM\
    \ SIGPLAN Erlang Workshop,\n    *    September 2012.\n    */\n   const uint32_t\
    \  TINYMT32_MAT1_PARAM = UINT32_C(0x8f7011ee);\n   const uint32_t  TINYMT32_MAT2_PARAM\
    \ = UINT32_C(0xfc78ff1f);\n   const uint32_t  TINYMT32_TMAT_PARAM = UINT32_C(0x3793fdff);\n\
    \   /**\n    * This function initializes the internal state array with a\n   \
    \ * 32-bit unsigned integer seed.\n    * @param s     pointer to tinymt internal\
    \ state.\n    * @param seed  a 32-bit unsigned integer used as a seed.\n    */\n\
    \   void tinymt32_init (tinymt32_t* s, uint32_t seed)\n   {\n       const uint32_t\
    \    MIN_LOOP = 8;\n       const uint32_t    PRE_LOOP = 8;\n       s->status[0]\
    \ = seed;\n       s->status[1] = s->mat1 = TINYMT32_MAT1_PARAM;\n       s->status[2]\
    \ = s->mat2 = TINYMT32_MAT2_PARAM;\n       s->status[3] = s->tmat = TINYMT32_TMAT_PARAM;\n\
    \       for (int i = 1; i < MIN_LOOP; i++) {\n           s->status[i & 3] ^= i\
    \ + UINT32_C(1812433253)\n               * (s->status[(i - 1) & 3]\n         \
    \         ^ (s->status[(i - 1) & 3] >> 30));\n       }\n       /*\n        * NB:\
    \ The parameter set of this specification warrants\n        * that none of the\
    \ possible 2^^32 seeds leads to an\n        * all-zero 127-bit internal state.\
    \ Therefore, the\n        * period_certification() function of the original\n\
    \        * TinyMT32 source code has been safely removed. If\n        * another\
    \ parameter set is used, this function will\n        * have to be reintroduced\
    \ here.\n        */\n       for (int i = 0; i < PRE_LOOP; i++) {\n           tinymt32_next_state(s);\n\
    \       }\n   }\n   /**\n    * This function outputs a 32-bit unsigned integer\
    \ from\n    * the internal state.\n    * @param s     pointer to tinymt internal\
    \ state.\n    * @return      32-bit unsigned integer r (0 <= r < 2^32).\n    */\n\
    \   uint32_t tinymt32_generate_uint32 (tinymt32_t* s)\n   {\n       tinymt32_next_state(s);\n\
    \       return tinymt32_temper(s);\n   }\n   /**\n    * Internal tinymt32 constants\
    \ and functions.\n    * Users should not call these functions directly.\n    */\n\
    \   const uint32_t  TINYMT32_SH0 = 1;\n   const uint32_t  TINYMT32_SH1 = 10;\n\
    \   const uint32_t  TINYMT32_SH8 = 8;\n   const uint32_t  TINYMT32_MASK = UINT32_C(0x7fffffff);\n\
    \   /**\n    * This function changes the internal state of tinymt32.\n    * @param\
    \ s     pointer to tinymt internal state.\n    */\n   static void tinymt32_next_state\
    \ (tinymt32_t* s)\n   {\n       uint32_t x;\n       uint32_t y;\n       y = s->status[3];\n\
    \       x = (s->status[0] & TINYMT32_MASK)\n           ^ s->status[1]\n      \
    \     ^ s->status[2];\n       x ^= (x << TINYMT32_SH0);\n       y ^= (y >> TINYMT32_SH0)\
    \ ^ x;\n       s->status[0] = s->status[1];\n       s->status[1] = s->status[2];\n\
    \       s->status[2] = x ^ (y << TINYMT32_SH1);\n       s->status[3] = y;\n  \
    \     /*\n        * The if (y & 1) {...} block below replaces:\n        *    \
    \ s->status[1] ^= -((int32_t)(y & 1)) & s->mat1;\n        *     s->status[2] ^=\
    \ -((int32_t)(y & 1)) & s->mat2;\n        * The adopted code is equivalent to\
    \ the original code\n        * but does not depend on the representation of negative\n\
    \        * integers by 2's complements. It is therefore more\n        * portable\
    \ but includes an if branch, which may slow\n        * down the generation speed.\n\
    \        */\n       if (y & 1) {\n            s->status[1] ^= s->mat1;\n     \
    \       s->status[2] ^= s->mat2;\n        }\n   }\n   /**\n    * This function\
    \ outputs a 32-bit unsigned integer from\n    * the internal state.\n    * @param\
    \ s     pointer to tinymt internal state.\n    * @return      32-bit unsigned\
    \ pseudorandom number.\n    */\n   static uint32_t tinymt32_temper (tinymt32_t*\
    \ s)\n   {\n       uint32_t t0, t1;\n       t0 = s->status[3];\n       t1 = s->status[0]\
    \ + (s->status[2] >> TINYMT32_SH8);\n       t0 ^= t1;\n       /*\n        * The\
    \ if (t1 & 1) {...} block below replaces:\n        *     t0 ^= -((int32_t)(t1\
    \ & 1)) & s->tmat;\n        * The adopted code is equivalent to the original code\n\
    \        * but does not depend on the representation of negative\n        * integers\
    \ by 2's complements. It is therefore more\n        * portable but includes an\
    \ if branch, which may slow\n        * down the generation speed.\n        */\n\
    \       if (t1 & 1) {\n           t0 ^= s->tmat;\n       }\n       return t0;\n\
    \   }\n   <CODE ENDS>\n                Figure 1: TinyMT32 Reference Implementation\n"
- title: 2.2.  TinyMT32 Usage
  contents:
  - "2.2.  TinyMT32 Usage\n   This PRNG MUST first be initialized with the following\
    \ function:\n      void tinymt32_init (tinymt32_t* s, uint32_t seed);\n   It takes\
    \ as input a 32-bit unsigned integer used as a seed (note that\n   value 0 is\
    \ permitted by TinyMT32).  This function also takes as input\n   a pointer to\
    \ an instance of a tinymt32_t structure that needs to be\n   allocated by the\
    \ caller but is left uninitialized.  This structure\n   will then be updated by\
    \ the various TinyMT32 functions in order to\n   keep the internal state of the\
    \ PRNG.  The use of this structure\n   admits several instances of this PRNG to\
    \ be used in parallel, each of\n   them having its own instance of the structure.\n\
    \   Then, each time a new 32-bit pseudorandom unsigned integer between 0\n   and\
    \ 2^(32) - 1 inclusive is needed, the following function is used:\n      uint32_t\
    \ tinymt32_generate_uint32 (tinymt32_t * s);\n   Of course, the tinymt32_t structure\
    \ must be left unchanged by the\n   caller between successive calls to this function.\n"
- title: 2.3.  Specific Implementation Validation and Deterministic Behavior
  contents:
  - "2.3.  Specific Implementation Validation and Deterministic Behavior\n   For a\
    \ given seed, PRNG determinism can be a requirement (e.g., with\n   [RFC8681]).\
    \  Consequently, any implementation of the TinyMT32 PRNG in\n   line with this\
    \ specification MUST have the same output as that\n   provided by the reference\
    \ implementation of Figure 1.  In order to\n   increase the compliancy confidence,\
    \ this document proposes the\n   following criteria.  Using a seed value of 1,\
    \ the first 50 values\n   returned by tinymt32_generate_uint32(s) as 32-bit unsigned\
    \ integers\n   are equal to the values provided in Figure 2, which are to be read\n\
    \   line by line.  Note that these values come from the tinymt/\n   check32.out.txt\
    \ file provided by the PRNG authors to validate\n   implementations of TinyMT32\
    \ as part of the MersenneTwister-Lab/TinyMT\n   GitHub repository.\n   2545341989\
    \  981918433 3715302833 2387538352 3591001365\n   3820442102 2114400566 2196103051\
    \ 2783359912  764534509\n    643179475 1822416315  881558334 4207026366 3690273640\n\
    \   3240535687 2921447122 3984931427 4092394160   44209675\n   2188315343 2908663843\
    \ 1834519336 3774670961 3019990707\n   4065554902 1239765502 4035716197 3412127188\
    \  552822483\n    161364450  353727785  140085994  149132008 2547770827\n   4064042525\
    \ 4078297538 2057335507  622384752 2041665899\n   2193913817 1080849512   33160901\
    \  662956935  642999063\n   3384709977 1723175122 3866752252  521822317 2292524454\n\
    \    Figure 2: First 50 decimal values (to be read per line) returned by\n   \
    \ tinymt32_generate_uint32(s) as 32-bit unsigned integers, with a seed\n   In\
    \ particular, the deterministic behavior of the Figure 1 source code\n   has been\
    \ checked across several platforms: high-end laptops running\n   64-bit Mac OS\
    \ X and Linux/Ubuntu; a board featuring a 32-bit ARM\n   Cortex-A15 and running\
    \ 32-bit Linux/Ubuntu; several embedded cards\n   featuring either an ARM Cortex-M0+,\
    \ a Cortex-M3, or a Cortex-M4\n   32-bit microcontroller, all of them running\
    \ RIOT [Baccelli18]; two\n   low-end embedded cards featuring either a 16-bit\
    \ microcontroller (TI\n   MSP430) or an 8-bit microcontroller (Arduino ATMEGA2560),\
    \ both of\n   them running RIOT.\n   This specification only outputs 32-bit unsigned\
    \ pseudorandom numbers\n   and does not try to map this output to a smaller integer\
    \ range (e.g.,\n   between 10 and 49 inclusive).  If a specific use case needs\
    \ such a\n   mapping, it will have to provide its own function.  In that case,\
    \ if\n   PRNG determinism is also required, the use of a floating point\n   (single\
    \ or double precision) to perform this mapping should probably\n   be avoided,\
    \ as these calculations may lead to different rounding\n   errors across different\
    \ target platforms.  Great care should also be\n   taken to not introduce biases\
    \ in the randomness of the mapped output\n   (which may be the case with some\
    \ mapping algorithms) incompatible\n   with the use-case requirements.  The details\
    \ of how to perform such a\n   mapping are out of scope of this document.\n"
- title: 3.  Security Considerations
  contents:
  - "3.  Security Considerations\n   The authors do not believe the present specification\
    \ generates\n   specific security risks per se.  However, the TinyMT and MT PRNG\
    \ must\n   not be used for cryptographic applications.\n"
- title: 4.  IANA Considerations
  contents:
  - "4.  IANA Considerations\n   This document has no IANA actions.\n"
- title: 5.  References
  contents:
  - '5.  References

    '
- title: 5.1.  Normative References
  contents:
  - "5.1.  Normative References\n   [C99]      International Organization for Standardization,\n\
    \              \"Programming languages - C: C99, correction 3:2007\", ISO/\n \
    \             IEC 9899:1999/Cor 3:2007, November 2007.\n   [RFC2119]  Bradner,\
    \ S., \"Key words for use in RFCs to Indicate\n              Requirement Levels\"\
    , BCP 14, RFC 2119,\n              DOI 10.17487/RFC2119, March 1997,\n       \
    \       <https://www.rfc-editor.org/info/rfc2119>.\n   [RFC8174]  Leiba, B., \"\
    Ambiguity of Uppercase vs Lowercase in RFC\n              2119 Key Words\", BCP\
    \ 14, RFC 8174, DOI 10.17487/RFC8174,\n              May 2017, <https://www.rfc-editor.org/info/rfc8174>.\n"
- title: 5.2.  Informative References
  contents:
  - "5.2.  Informative References\n   [AdaptiveCrush]\n              Haramoto, H.,\
    \ \"Automation of Statistical Tests on\n              Randomness to Obtain Clearer\
    \ Conclusion\", Monte Carlo and\n              Quasi-Monte Carlo Methods 2008,\n\
    \              DOI 10.1007/978-3-642-04107-5_26, November 2009,\n            \
    \  <http://www.math.sci.hiroshima-u.ac.jp/~m-mat/MT/\n              ADAPTIVE>.\n\
    \   [Baccelli18]\n              Baccelli, E., Gundogan, C., Hahm, O., Kietzmann,\
    \ P.,\n              Lenders, M. S., Petersen, H., Schleiser, K., Schmidt, T.\n\
    \              C., and M. Wahlisch, \"RIOT: An Open Source Operating\n       \
    \       System for Low-End Embedded Devices in the IoT\", IEEE\n             \
    \ Internet of Things Journal, Volume 5, Issue 6,\n              DOI 10.1109/JIOT.2018.2815038,\
    \ December 2018,\n              <https://doi.org/10.1109/JIOT.2018.2815038>.\n\
    \   [KR12]     Rikitake, K., \"TinyMT pseudo random number generator for\n   \
    \           Erlang\", Proceedings of the 11th ACM SIGPLAN Erlang\n           \
    \   Workshop, pp. 67-72, DOI 10.1145/2364489.2364504,\n              September\
    \ 2012, <https://doi.org/10.1145/2364489.2364504>.\n   [MT98]     Matsumoto, M.\
    \ and T. Nishimura, \"Mersenne twister: A\n              623-dimensionally equidistributed\
    \ uniform pseudo-random\n              number generator\", ACM Transactions on\
    \ Modeling and\n              Computer Simulation (TOMACS), Volume 8, Issue 1,\
    \ pp. 3-30,\n              DOI 10.1145/272991.272995, January 1998,\n        \
    \      <https://doi.org/10.1145/272991.272995>.\n   [PTVF92]   Press, W., Teukolsky,\
    \ S., Vetterling, W., and B. Flannery,\n              \"Numerical recipes in C\
    \ (2nd ed.): the art of scientific\n              computing\", Cambridge University\
    \ Press,\n              ISBN 0-521-43108-5, 1992.\n   [RFC5170]  Roca, V., Neumann,\
    \ C., and D. Furodet, \"Low Density Parity\n              Check (LDPC) Staircase\
    \ and Triangle Forward Error\n              Correction (FEC) Schemes\", RFC 5170,\
    \ DOI 10.17487/RFC5170,\n              June 2008, <https://www.rfc-editor.org/info/rfc5170>.\n\
    \   [RFC8681]  Roca, V. and B. Teibi, \"Sliding Window Random Linear Code\n  \
    \            (RLC) Forward Erasure Correction (FEC) Schemes for\n            \
    \  FECFRAME\", RFC 8681, DOI 10.17487/RFC8681, January 2020,\n              <https://www.rfc-editor.org/info/rfc8681>.\n\
    \   [TestU01]  L'Ecuyer, P. and R. Simard, \"TestU01: A C library for\n      \
    \        empirical testing of random number generators\", ACM\n              Transactions\
    \ on Mathematical Software (TOMS), Volume 33,\n              Issue 4, Article\
    \ 22, DOI 10.1145/1268776.1268777, August\n              2007, <http://simul.iro.umontreal.ca/testu01/tu01.html>.\n\
    \   [TinyMT-dev]\n              \"Tiny Mersenne Twister (TinyMT)\", commit 9d7ca3c,\
    \ March\n              2018, <https://github.com/MersenneTwister-Lab/TinyMT>.\n\
    \   [TinyMT-params]\n              \"TinyMT pre-calculated parameter list\", commit\
    \ 30079eb,\n              March 2013,\n              <https://github.com/jj1bdx/tinymtdc-longbatch>.\n\
    \   [TinyMT-web]\n              Saito, M. and M. Matsumoto, \"Tiny Mersenne Twister\n\
    \              (TinyMT)\",\n              <http://www.math.sci.hiroshima-u.ac.jp/~m-mat/MT/TINYMT/>.\n"
- title: Acknowledgments
  contents:
  - "Acknowledgments\n   The authors would like to thank Belkacem Teibi, with whom\
    \ we explored\n   TinyMT32 specificities when looking to an alternative to the\
    \ Park-\n   Miller Linear Congruential PRNG.  The authors would also like to\n\
    \   thank Carl Wallace; Stewart Bryant; Greg Skinner; Mike Heard; the\n   three\
    \ TSVWG chairs, Wesley Eddy (our shepherd), David Black, and\n   Gorry Fairhurst;\
    \ as well as Spencer Dawkins and Mirja Kuehlewind.\n   Last but not least, the\
    \ authors are really grateful to the IESG\n   members, in particular Benjamin\
    \ Kaduk, Eric Rescorla, Adam Roach,\n   Roman Danyliw, Barry Leiba, Martin Vigoureux,\
    \ and Eric Vyncke for\n   their highly valuable feedback that greatly contributed\
    \ to improving\n   this specification.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Mutsuo Saito\n   Hiroshima University\n   Japan\n   Email:\
    \ saito@math.sci.hiroshima-u.ac.jp\n   Makoto Matsumoto\n   Hiroshima University\n\
    \   Japan\n   Email: m-mat@math.sci.hiroshima-u.ac.jp\n   Vincent Roca (editor)\n\
    \   INRIA\n   Univ. Grenoble Alpes\n   France\n   Email: vincent.roca@inria.fr\n\
    \   Emmanuel Baccelli\n   INRIA\n"
