- title: __initial_text__
  contents:
  - '                         Diameter Base Protocol

    '
- title: Abstract
  contents:
  - "Abstract\n   The Diameter base protocol is intended to provide an Authentication,\n\
    \   Authorization, and Accounting (AAA) framework for applications such\n   as\
    \ network access or IP mobility in both local and roaming\n   situations.  This\
    \ document specifies the message format, transport,\n   error reporting, accounting,\
    \ and security services used by all\n   Diameter applications.  The Diameter base\
    \ protocol as defined in this\n   document obsoletes RFC 3588 and RFC 5719, and\
    \ it must be supported by\n   all new Diameter implementations.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This\
    \ document is a product of the Internet Engineering Task Force\n   (IETF).  It\
    \ represents the consensus of the IETF community.  It has\n   received public\
    \ review and has been approved for publication by the\n   Internet Engineering\
    \ Steering Group (IESG).  Further information on\n   Internet Standards is available\
    \ in Section 2 of RFC 5741.\n   Information about the current status of this document,\
    \ any errata,\n   and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc6733.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2012 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n   This document\
    \ may contain material from IETF Documents or IETF\n   Contributions published\
    \ or made publicly available before November\n   10, 2008.  The person(s) controlling\
    \ the copyright in some of this\n   material may not have granted the IETF Trust\
    \ the right to allow\n   modifications of such material outside the IETF Standards\
    \ Process.\n   Without obtaining an adequate license from the person(s) controlling\n\
    \   the copyright in such materials, this document may not be modified\n   outside\
    \ the IETF Standards Process, and derivative works of it may\n   not be created\
    \ outside the IETF Standards Process, except to format\n   it for publication\
    \ as an RFC or to translate it into languages other\n   than English.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................7\n\
    \      1.1. Diameter Protocol ..........................................9\n  \
    \         1.1.1. Description of the Document Set ....................10\n    \
    \       1.1.2. Conventions Used in This Document ..................11\n      \
    \     1.1.3. Changes from RFC 3588 ..............................11\n      1.2.\
    \ Terminology ...............................................12\n      1.3. Approach\
    \ to Extensibility .................................17\n           1.3.1. Defining\
    \ New AVP Values ............................18\n           1.3.2. Creating New\
    \ AVPs ..................................18\n           1.3.3. Creating New Commands\
    \ ..............................18\n           1.3.4. Creating New Diameter Applications\
    \ .................19\n   2. Protocol Overview ..............................................20\n\
    \      2.1. Transport .................................................22\n  \
    \         2.1.1. SCTP Guidelines ....................................23\n    \
    \  2.2. Securing Diameter Messages ................................24\n      2.3.\
    \ Diameter Application Compliance ...........................24\n      2.4. Application\
    \ Identifiers ...................................24\n      2.5. Connections vs.\
    \ Sessions ..................................25\n      2.6. Peer Table ................................................26\n\
    \      2.7. Routing Table .............................................27\n  \
    \    2.8. Role of Diameter Agents ...................................28\n    \
    \       2.8.1. Relay Agents .......................................30\n      \
    \     2.8.2. Proxy Agents .......................................31\n        \
    \   2.8.3. Redirect Agents ....................................31\n          \
    \ 2.8.4. Translation Agents .................................32\n      2.9. Diameter\
    \ Path Authorization ...............................33\n   3. Diameter Header\
    \ ................................................34\n      3.1. Command Codes\
    \ .............................................37\n      3.2. Command Code Format\
    \ Specification .........................38\n      3.3. Diameter Command Naming\
    \ Conventions .......................40\n   4. Diameter AVPs ..................................................40\n\
    \      4.1. AVP Header ................................................41\n  \
    \         4.1.1. Optional Header Elements ...........................42\n    \
    \  4.2. Basic AVP Data Formats ....................................43\n      4.3.\
    \ Derived AVP Data Formats ..................................44\n           4.3.1.\
    \ Common Derived AVP Data Formats ....................44\n      4.4. Grouped AVP\
    \ Values ........................................51\n           4.4.1. Example\
    \ AVP with a Grouped Data Type ...............52\n      4.5. Diameter Base Protocol\
    \ AVPs ...............................55\n   5. Diameter Peers .................................................58\n\
    \      5.1. Peer Connections ..........................................58\n  \
    \    5.2. Diameter Peer Discovery ...................................59\n    \
    \  5.3. Capabilities Exchange .....................................60\n      \
    \     5.3.1. Capabilities-Exchange-Request ......................62\n        \
    \   5.3.2. Capabilities-Exchange-Answer .......................63\n          \
    \ 5.3.3. Vendor-Id AVP ......................................63\n           5.3.4.\
    \ Firmware-Revision AVP ..............................64\n           5.3.5. Host-IP-Address\
    \ AVP ................................64\n           5.3.6. Supported-Vendor-Id\
    \ AVP ............................64\n           5.3.7. Product-Name AVP ...................................64\n\
    \      5.4. Disconnecting Peer Connections ............................64\n  \
    \         5.4.1. Disconnect-Peer-Request ............................65\n    \
    \       5.4.2. Disconnect-Peer-Answer .............................65\n      \
    \     5.4.3. Disconnect-Cause AVP ...............................66\n      5.5.\
    \ Transport Failure Detection ...............................66\n           5.5.1.\
    \ Device-Watchdog-Request ............................67\n           5.5.2. Device-Watchdog-Answer\
    \ .............................67\n           5.5.3. Transport Failure Algorithm\
    \ ........................67\n           5.5.4. Failover and Failback Procedures\
    \ ...................67\n      5.6. Peer State Machine ........................................68\n\
    \           5.6.1. Incoming Connections ...............................71\n  \
    \         5.6.2. Events .............................................71\n    \
    \       5.6.3. Actions ............................................72\n      \
    \     5.6.4. The Election Process ...............................74\n   6. Diameter\
    \ Message Processing ....................................74\n      6.1. Diameter\
    \ Request Routing Overview .........................74\n           6.1.1. Originating\
    \ a Request ..............................75\n           6.1.2. Sending a Request\
    \ ..................................76\n           6.1.3. Receiving Requests .................................76\n\
    \           6.1.4. Processing Local Requests ..........................76\n  \
    \         6.1.5. Request Forwarding .................................77\n    \
    \       6.1.6. Request Routing ....................................77\n      \
    \     6.1.7. Predictive Loop Avoidance ..........................77\n        \
    \   6.1.8. Redirecting Requests ...............................78\n          \
    \ 6.1.9. Relaying and Proxying Requests .....................79\n      6.2. Diameter\
    \ Answer Processing ................................80\n           6.2.1. Processing\
    \ Received Answers ........................81\n           6.2.2. Relaying and\
    \ Proxying Answers ......................81\n      6.3. Origin-Host AVP ...........................................81\n\
    \      6.4. Origin-Realm AVP ..........................................82\n  \
    \    6.5. Destination-Host AVP ......................................82\n    \
    \  6.6. Destination-Realm AVP .....................................82\n      6.7.\
    \ Routing AVPs ..............................................83\n           6.7.1.\
    \ Route-Record AVP ...................................83\n           6.7.2. Proxy-Info\
    \ AVP .....................................83\n           6.7.3. Proxy-Host AVP\
    \ .....................................83\n           6.7.4. Proxy-State AVP ....................................83\n\
    \      6.8. Auth-Application-Id AVP ...................................83\n  \
    \    6.9. Acct-Application-Id AVP ...................................84\n    \
    \  6.10. Inband-Security-Id AVP ...................................84\n      6.11.\
    \ Vendor-Specific-Application-Id AVP .......................84\n      6.12. Redirect-Host\
    \ AVP ........................................85\n      6.13. Redirect-Host-Usage\
    \ AVP ..................................85\n      6.14. Redirect-Max-Cache-Time\
    \ AVP ..............................87\n   7. Error Handling .................................................87\n\
    \      7.1. Result-Code AVP ...........................................89\n  \
    \         7.1.1. Informational ......................................90\n    \
    \       7.1.2. Success ............................................90\n      \
    \     7.1.3. Protocol Errors ....................................90\n        \
    \   7.1.4. Transient Failures .................................92\n          \
    \ 7.1.5. Permanent Failures .................................92\n      7.2. Error\
    \ Bit .................................................95\n      7.3. Error-Message\
    \ AVP .........................................96\n      7.4. Error-Reporting-Host\
    \ AVP ..................................96\n      7.5. Failed-AVP AVP ............................................96\n\
    \      7.6. Experimental-Result AVP ...................................97\n  \
    \    7.7. Experimental-Result-Code AVP ..............................97\n   8.\
    \ Diameter User Sessions .........................................98\n      8.1.\
    \ Authorization Session State Machine .......................99\n      8.2. Accounting\
    \ Session State Machine .........................104\n      8.3. Server-Initiated\
    \ Re-Auth .................................110\n           8.3.1. Re-Auth-Request\
    \ ...................................110\n           8.3.2. Re-Auth-Answer ....................................110\n\
    \      8.4. Session Termination ......................................111\n  \
    \         8.4.1. Session-Termination-Request .......................112\n    \
    \       8.4.2. Session-Termination-Answer ........................113\n      8.5.\
    \ Aborting a Session .......................................113\n           8.5.1.\
    \ Abort-Session-Request .............................114\n           8.5.2. Abort-Session-Answer\
    \ ..............................114\n      8.6. Inferring Session Termination\
    \ from Origin-State-Id .......115\n      8.7. Auth-Request-Type AVP ....................................116\n\
    \      8.8. Session-Id AVP ...........................................116\n  \
    \    8.9. Authorization-Lifetime AVP ...............................117\n    \
    \  8.10. Auth-Grace-Period AVP ...................................118\n      8.11.\
    \ Auth-Session-State AVP ..................................118\n      8.12. Re-Auth-Request-Type\
    \ AVP ................................118\n      8.13. Session-Timeout AVP .....................................119\n\
    \      8.14. User-Name AVP ...........................................119\n  \
    \    8.15. Termination-Cause AVP ...................................120\n    \
    \  8.16. Origin-State-Id AVP .....................................120\n      8.17.\
    \ Session-Binding AVP .....................................120\n      8.18. Session-Server-Failover\
    \ AVP .............................121\n      8.19. Multi-Round-Time-Out AVP ................................122\n\
    \      8.20. Class AVP ...............................................122\n  \
    \    8.21. Event-Timestamp AVP .....................................122\n   9.\
    \ Accounting ....................................................123\n      9.1.\
    \ Server Directed Model ....................................123\n      9.2. Protocol\
    \ Messages ........................................124\n      9.3. Accounting\
    \ Application Extension and Requirements ........124\n      9.4. Fault Resilience\
    \ .........................................125\n      9.5. Accounting Records\
    \ .......................................125\n      9.6. Correlation of Accounting\
    \ Records ........................126\n      9.7. Accounting Command Codes .................................127\n\
    \           9.7.1. Accounting-Request ................................127\n  \
    \         9.7.2. Accounting-Answer .................................128\n    \
    \  9.8. Accounting AVPs ..........................................129\n      \
    \     9.8.1. Accounting-Record-Type AVP ........................129\n        \
    \   9.8.2. Acct-Interim-Interval AVP .........................130\n          \
    \ 9.8.3. Accounting-Record-Number AVP ......................131\n           9.8.4.\
    \ Acct-Session-Id AVP ...............................131\n           9.8.5. Acct-Multi-Session-Id\
    \ AVP .........................131\n           9.8.6. Accounting-Sub-Session-Id\
    \ AVP .....................131\n           9.8.7. Accounting-Realtime-Required\
    \ AVP ..................132\n   10. AVP Occurrence Tables ........................................132\n\
    \      10.1. Base Protocol Command AVP Table .........................133\n  \
    \    10.2. Accounting AVP Table ....................................134\n   11.\
    \ IANA Considerations ..........................................135\n      11.1.\
    \ AVP Header ..............................................135\n           11.1.1.\
    \ AVP Codes ........................................136\n           11.1.2. AVP\
    \ Flags ........................................136\n      11.2. Diameter Header\
    \ .........................................136\n           11.2.1. Command Codes\
    \ ....................................136\n           11.2.2. Command Flags ....................................137\n\
    \      11.3. AVP Values ..............................................137\n  \
    \         11.3.1. Experimental-Result-Code AVP .....................137\n    \
    \       11.3.2. Result-Code AVP Values ...........................137\n      \
    \     11.3.3. Accounting-Record-Type AVP Values ................137\n        \
    \   11.3.4. Termination-Cause AVP Values .....................137\n          \
    \ 11.3.5. Redirect-Host-Usage AVP Values ...................137\n           11.3.6.\
    \ Session-Server-Failover AVP Values ...............137\n           11.3.7. Session-Binding\
    \ AVP Values .......................137\n           11.3.8. Disconnect-Cause AVP\
    \ Values ......................138\n           11.3.9. Auth-Request-Type AVP Values\
    \ .....................138\n           11.3.10. Auth-Session-State AVP Values\
    \ ...................138\n           11.3.11. Re-Auth-Request-Type AVP Values\
    \ .................138\n           11.3.12. Accounting-Realtime-Required AVP Values\
    \ .........138\n           11.3.13. Inband-Security-Id AVP (code 299) ...............138\n\
    \      11.4. _diameters Service Name and Port Number Registration ....138\n  \
    \    11.5. SCTP Payload Protocol Identifiers .......................139\n    \
    \  11.6. S-NAPTR Parameters ......................................139\n   12.\
    \ Diameter Protocol-Related Configurable Parameters ............139\n   13. Security\
    \ Considerations ......................................140\n      13.1. TLS/TCP\
    \ and DTLS/SCTP Usage .............................140\n      13.2. Peer-to-Peer\
    \ Considerations .............................141\n      13.3. AVP Considerations\
    \ ......................................141\n   14. References ...................................................142\n\
    \      14.1. Normative References ....................................142\n  \
    \    14.2. Informative References ..................................144\n   Appendix\
    \ A. Acknowledgements .....................................147\n     A.1. This\
    \ Document .............................................147\n     A.2. RFC 3588\
    \ ..................................................148\n   Appendix B. S-NAPTR\
    \ Example ......................................148\n   Appendix C. Duplicate\
    \ Detection ..................................149\n   Appendix D. Internationalized\
    \ Domain Names .......................151\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   Authentication, Authorization, and Accounting (AAA) protocols\
    \ such as\n   TACACS [RFC1492] and RADIUS [RFC2865] were initially deployed to\n\
    \   provide dial-up PPP [RFC1661] and terminal server access.  Over time,\n  \
    \ AAA support was needed on many new access technologies, the scale and\n   complexity\
    \ of AAA networks grew, and AAA was also used on new\n   applications (such as\
    \ voice over IP).  This led to new demands on AAA\n   protocols.\n   Network access\
    \ requirements for AAA protocols are summarized in\n   Aboba, et al. [RFC2989].\
    \  These include:\n   Failover\n      [RFC2865] does not define failover mechanisms\
    \ and, as a result,\n      failover behavior differs between implementations.\
    \  In order to\n      provide well-defined failover behavior, Diameter supports\n\
    \      application-layer acknowledgements and defines failover algorithms\n  \
    \    and the associated state machine.\n   Transmission-level security\n     \
    \ RADIUS [RFC2865] defines an application-layer authentication and\n      integrity\
    \ scheme that is required only for use with response\n      packets.  While [RFC2869]\
    \ defines an additional authentication and\n      integrity mechanism, use is\
    \ only required during Extensible\n      Authentication Protocol (EAP) [RFC3748]\
    \ sessions.  While attribute\n      hiding is supported, [RFC2865] does not provide\
    \ support for per-\n      packet confidentiality.  In accounting, [RFC2866] assumes\
    \ that\n      replay protection is provided by the backend billing server rather\n\
    \      than within the protocol itself.\n      While [RFC3162] defines the use\
    \ of IPsec with RADIUS, support for\n      IPsec is not required.  In order to\
    \ provide universal support for\n      transmission-level security, and enable\
    \ both intra- and inter-\n      domain AAA deployments, Diameter provides support\
    \ for TLS/TCP and\n      DTLS/SCTP.  Security is discussed in Section 13.\n  \
    \ Reliable transport\n      RADIUS runs over UDP, and does not define retransmission\
    \ behavior;\n      as a result, reliability varies between implementations.  As\n\
    \      described in [RFC2975], this is a major issue in accounting, where\n  \
    \    packet loss may translate directly into revenue loss.  In order to\n    \
    \  provide well-defined transport behavior, Diameter runs over\n      reliable\
    \ transport mechanisms (TCP, Stream Control Transmission\n      Protocol (SCTP))\
    \ as defined in [RFC3539].\n   Agent support\n      RADIUS does not provide for\
    \ explicit support for agents, including\n      proxies, redirects, and relays.\
    \  Since the expected behavior is\n      not defined, it varies between implementations.\
    \  Diameter defines\n      agent behavior explicitly; this is described in Section\
    \ 2.8.\n   Server-initiated messages\n      While server-initiated messages are\
    \ defined in RADIUS [RFC5176],\n      support is optional.  This makes it difficult\
    \ to implement\n      features such as unsolicited disconnect or re-authentication/\n\
    \      re-authorization on demand across a heterogeneous deployment.  To\n   \
    \   address this issue, support for server-initiated messages is\n      mandatory\
    \ in Diameter.\n   Transition support\n      While Diameter does not share a common\
    \ protocol data unit (PDU)\n      with RADIUS, considerable effort has been expended\
    \ in enabling\n      backward compatibility with RADIUS so that the two protocols\
    \ may\n      be deployed in the same network.  Initially, it is expected that\n\
    \      Diameter will be deployed within new network devices, as well as\n    \
    \  within gateways enabling communication between legacy RADIUS\n      devices\
    \ and Diameter agents.  This capability enables Diameter\n      support to be\
    \ added to legacy networks, by addition of a gateway\n      or server speaking\
    \ both RADIUS and Diameter.\n   In addition to addressing the above requirements,\
    \ Diameter also\n   provides support for the following:\n   Capability negotiation\n\
    \      RADIUS does not support error messages, capability negotiation, or\n  \
    \    a mandatory/non-mandatory flag for attributes.  Since RADIUS\n      clients\
    \ and servers are not aware of each other's capabilities,\n      they may not\
    \ be able to successfully negotiate a mutually\n      acceptable service or, in\
    \ some cases, even be aware of what\n      service has been implemented.  Diameter\
    \ includes support for error\n      handling (Section 7), capability negotiation\
    \ (Section 5.3), and\n      mandatory/non-mandatory Attribute-Value Pairs (AVPs)\n\
    \      (Section 4.1).\n   Peer discovery and configuration\n      RADIUS implementations\
    \ typically require that the name or address\n      of servers or clients be manually\
    \ configured, along with the\n      corresponding shared secrets.  This results\
    \ in a large\n      administrative burden and creates the temptation to reuse\
    \ the\n      RADIUS shared secret, which can result in major security\n      vulnerabilities\
    \ if the Request Authenticator is not globally and\n      temporally unique as\
    \ required in [RFC2865].  Through DNS, Diameter\n      enables dynamic discovery\
    \ of peers (see Section 5.2).  Derivation\n      of dynamic session keys is enabled\
    \ via transmission-level\n      security.\n   Over time, the capabilities of Network\
    \ Access Server (NAS) devices\n   have increased substantially.  As a result,\
    \ while Diameter is a\n   considerably more sophisticated protocol than RADIUS,\
    \ it remains\n   feasible to implement it within embedded devices.\n"
- title: 1.1.  Diameter Protocol
  contents:
  - "1.1.  Diameter Protocol\n   The Diameter base protocol provides the following\
    \ facilities:\n   o  Ability to exchange messages and deliver AVPs\n   o  Capabilities\
    \ negotiation\n   o  Error notification\n   o  Extensibility, required in [RFC2989],\
    \ through addition of new\n      applications, commands, and AVPs\n   o  Basic\
    \ services necessary for applications, such as the handling of\n      user sessions\
    \ or accounting\n   All data delivered by the protocol is in the form of AVPs.\
    \  Some of\n   these AVP values are used by the Diameter protocol itself, while\n\
    \   others deliver data associated with particular applications that\n   employ\
    \ Diameter.  AVPs may be arbitrarily added to Diameter messages,\n   the only\
    \ restriction being that the Command Code Format (CCF)\n   specification (Section\
    \ 3.2) be satisfied.  AVPs are used by the base\n   Diameter protocol to support\
    \ the following required features:\n   o  Transporting of user authentication\
    \ information, for the purposes\n      of enabling the Diameter server to authenticate\
    \ the user\n   o  Transporting of service-specific authorization information,\n\
    \      between client and servers, allowing the peers to decide whether a\n  \
    \    user's access request should be granted\n   o  Exchanging resource usage\
    \ information, which may be used for\n      accounting purposes, capacity planning,\
    \ etc.\n   o  Routing, relaying, proxying, and redirecting of Diameter messages\n\
    \      through a server hierarchy\n   The Diameter base protocol satisfies the\
    \ minimum requirements for a\n   AAA protocol, as specified by [RFC2989].  The\
    \ base protocol may be\n   used by itself for accounting purposes only, or it\
    \ may be used with a\n   Diameter application, such as Mobile IPv4 [RFC4004],\
    \ or network\n   access [RFC4005].  It is also possible for the base protocol\
    \ to be\n   extended for use in new applications, via the addition of new\n  \
    \ commands or AVPs.  The initial focus of Diameter was network access\n   and\
    \ accounting applications.  A truly generic AAA protocol used by\n   many applications\
    \ might provide functionality not provided by\n   Diameter.  Therefore, it is\
    \ imperative that the designers of new\n   applications understand their requirements\
    \ before using Diameter.\n   See Section 1.3.4 for more information on Diameter\
    \ applications.\n   Any node can initiate a request.  In that sense, Diameter\
    \ is a peer-\n   to-peer protocol.  In this document, a Diameter client is a device\
    \ at\n   the edge of the network that performs access control, such as a\n   Network\
    \ Access Server (NAS) or a Foreign Agent (FA).  A Diameter\n   client generates\
    \ Diameter messages to request authentication,\n   authorization, and accounting\
    \ services for the user.  A Diameter\n   agent is a node that does not provide\
    \ local user authentication or\n   authorization services; agents include proxies,\
    \ redirects, and relay\n   agents.  A Diameter server performs authentication\
    \ and/or\n   authorization of the user.  A Diameter node may act as an agent for\n\
    \   certain requests while acting as a server for others.\n   The Diameter protocol\
    \ also supports server-initiated messages, such\n   as a request to abort service\
    \ to a particular user.\n"
- title: 1.1.1.  Description of the Document Set
  contents:
  - "1.1.1.  Description of the Document Set\n   The Diameter specification consists\
    \ of an updated version of the base\n   protocol specification (this document)\
    \ and the Transport Profile\n   [RFC3539].  This document obsoletes both RFC 3588\
    \ and RFC 5719.  A\n   summary of the base protocol updates included in this document\
    \ can be\n   found in Section 1.1.3.\n   This document defines the base protocol\
    \ specification for AAA, which\n   includes support for accounting.  There are\
    \ also a myriad of\n   applications documents describing applications that use\
    \ this base\n   specification for Authentication, Authorization, and Accounting.\n\
    \   These application documents specify how to use the Diameter protocol\n   within\
    \ the context of their application.\n   The Transport Profile document [RFC3539]\
    \ discusses transport layer\n   issues that arise with AAA protocols and recommendations\
    \ on how to\n   overcome these issues.  This document also defines the Diameter\n\
    \   failover algorithm and state machine.\n   \"Clarifications on the Routing\
    \ of Diameter Request Based on the\n   Username and the Realm\" [RFC5729] defines\
    \ specific behavior on how to\n   route requests based on the content of the User-Name\
    \ AVP (Attribute\n   Value Pair).\n"
- title: 1.1.2.  Conventions Used in This Document
  contents:
  - "1.1.2.  Conventions Used in This Document\n   The key words \"MUST\", \"MUST\
    \ NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\"\
    , \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted\
    \ as described in [RFC2119].\n"
- title: 1.1.3.  Changes from RFC 3588
  contents:
  - "1.1.3.  Changes from RFC 3588\n   This document obsoletes RFC 3588 but is fully\
    \ backward compatible\n   with that document.  The changes introduced in this\
    \ document focus on\n   fixing issues that have surfaced during the implementation\
    \ of\n   Diameter (RFC 3588).  An overview of some the major changes are given\n\
    \   below.\n   o  Deprecated the use of the Inband-Security AVP for negotiating\n\
    \      Transport Layer Security (TLS) [RFC5246].  It has been generally\n    \
    \  considered that bootstrapping of TLS via Inband-Security AVP\n      creates\
    \ certain security risks because it does not completely\n      protect the information\
    \ carried in the CER/CEA (Capabilities-\n      Exchange-Request/Capabilities-Exchange-Answer).\
    \  This version of\n      Diameter adopts the common approach of defining a well-known\n\
    \      secured port that peers should use when communicating via TLS/TCP\n   \
    \   and DTLS/SCTP.  This new approach augments the existing in-band\n      security\
    \ negotiation, but it does not completely replace it.  The\n      old method is\
    \ kept for backward compatibility reasons.\n   o  Deprecated the exchange of CER/CEA\
    \ messages in the open state.\n      This feature was implied in the peer state\
    \ machine table of RFC\n      3588, but it was not clearly defined anywhere else\
    \ in that\n      document.  As work on this document progressed, it became clear\n\
    \      that the multiplicity of meaning and use of Application-Id AVPs in\n  \
    \    the CER/CEA messages (and the messages themselves) is seen as an\n      abuse\
    \ of the Diameter extensibility rules and thus required\n      simplification.\
    \  Capabilities exchange in the open state has been\n      re-introduced in a\
    \ separate specification [RFC6737], which clearly\n      defines new commands\
    \ for this feature.\n   o  Simplified security requirements.  The use of a secured\
    \ transport\n      for exchanging Diameter messages remains mandatory.  However,\
    \ TLS/\n      TCP and DTLS/SCTP have become the primary methods of securing\n\
    \      Diameter with IPsec as a secondary alternative.  See Section 13\n     \
    \ for details.  The support for the End-to-End security framework\n      (E2E-Sequence\
    \ AVP and 'P'-bit in the AVP header) has also been\n      deprecated.\n   o  Changed\
    \ Diameter extensibility.  This includes fixes to the\n      Diameter extensibility\
    \ description (Section 1.3 and others) to\n      better aid Diameter application\
    \ designers; in addition, the new\n      specification relaxes the policy with\
    \ respect to the allocation of\n      Command Codes for vendor-specific uses.\n\
    \   o  Clarified Application Id usage.  Clarify the proper use of\n      Application\
    \ Id information, which can be found in multiple places\n      within a Diameter\
    \ message.  This includes correlating Application\n      Ids found in the message\
    \ headers and AVPs.  These changes also\n      clearly specify the proper Application\
    \ Id value to use for\n      specific base protocol messages (ASR/ASA, STR/STA)\
    \ as well as\n      clarify the content and use of Vendor-Specific-Application-Id.\n\
    \   o  Clarified routing fixes.  This document more clearly specifies\n      what\
    \ information (AVPs and Application Ids) can be used for making\n      general\
    \ routing decisions.  A rule for the prioritization of\n      redirect routing\
    \ criteria when multiple route entries are found\n      via redirects has also\
    \ been added (see Section 6.13).\n   o  Simplified Diameter peer discovery.  The\
    \ Diameter discovery\n      process now supports only widely used discovery schemes;\
    \ the rest\n      have been deprecated (see Section 5.2 for details).\n   There\
    \ are many other miscellaneous fixes that have been introduced in\n   this document\
    \ that may not be considered significant, but they have\n   value nonetheless.\
    \  Examples are removal of obsolete types, fixes to\n   the state machine, clarification\
    \ of the election process, message\n   validation, fixes to Failed-AVP and Result-Code\
    \ AVP values, etc.  All\n   of the errata filed against RFC 3588 prior to the\
    \ publication of this\n   document have been addressed.  A comprehensive list\
    \ of changes is not\n   shown here for practical reasons.\n"
- title: 1.2.  Terminology
  contents:
  - "1.2.  Terminology\n   AAA\n      Authentication, Authorization, and Accounting.\n\
    \   ABNF\n      Augmented Backus-Naur Form [RFC5234].  A metalanguage with its\
    \ own\n      formal syntax and rules.  It is based on the Backus-Naur Form and\n\
    \      is used to define message exchanges in a bi-directional\n      communications\
    \ protocol.\n   Accounting\n      The act of collecting information on resource\
    \ usage for the\n      purpose of capacity planning, auditing, billing, or cost\n\
    \      allocation.\n   Accounting Record\n      An accounting record represents\
    \ a summary of the resource\n      consumption of a user over the entire session.\
    \  Accounting servers\n      creating the accounting record may do so by processing\
    \ interim\n      accounting events or accounting events from several devices\n\
    \      serving the same user.\n   Authentication\n      The act of verifying the\
    \ identity of an entity (subject).\n   Authorization\n      The act of determining\
    \ whether a requesting entity (subject) will\n      be allowed access to a resource\
    \ (object).\n   Attribute-Value Pair (AVP)\n      The Diameter protocol consists\
    \ of a header followed by one or more\n      Attribute-Value-Pairs (AVPs).  An\
    \ AVP includes a header and is\n      used to encapsulate protocol-specific data\
    \ (e.g., routing\n      information) as well as authentication, authorization,\
    \ or\n      accounting information.\n   Command Code Format (CCF)\n      A modified\
    \ form of ABNF used to define Diameter commands (see\n      Section 3.2).\n  \
    \ Diameter Agent\n      A Diameter Agent is a Diameter node that provides relay,\
    \ proxy,\n      redirect, or translation services.\n   Diameter Client\n     \
    \ A Diameter client is a Diameter node that supports Diameter client\n      applications\
    \ as well as the base protocol.  Diameter clients are\n      often implemented\
    \ in devices situated at the edge of a network and\n      provide access control\
    \ services for that network.  Typical\n      examples of Diameter clients include\
    \ the Network Access Server\n      (NAS) and the Mobile IP Foreign Agent (FA).\n\
    \   Diameter Node\n      A Diameter node is a host process that implements the\
    \ Diameter\n      protocol and acts as either a client, an agent, or a server.\n\
    \   Diameter Peer\n      Two Diameter nodes sharing a direct TCP or SCTP transport\n\
    \      connection are called Diameter peers.\n   Diameter Server\n      A Diameter\
    \ server is a Diameter node that handles authentication,\n      authorization,\
    \ and accounting requests for a particular realm.  By\n      its very nature,\
    \ a Diameter server must support Diameter server\n      applications in addition\
    \ to the base protocol.\n   Downstream\n      Downstream is used to identify the\
    \ direction of a particular\n      Diameter message from the home server towards\
    \ the Diameter client.\n   Home Realm\n      A Home Realm is the administrative\
    \ domain with which the user\n      maintains an account relationship.\n   Home\
    \ Server\n      A Diameter server that serves the Home Realm.\n   Interim Accounting\n\
    \      An interim accounting message provides a snapshot of usage during\n   \
    \   a user's session.  Typically, it is implemented in order to\n      provide\
    \ for partial accounting of a user's session in case a\n      device reboot or\
    \ other network problem prevents the delivery of a\n      session summary message\
    \ or session record.\n   Local Realm\n      A local realm is the administrative\
    \ domain providing services to a\n      user.  An administrative domain may act\
    \ as a local realm for\n      certain users while being a home realm for others.\n\
    \   Multi-session\n      A multi-session represents a logical linking of several\
    \ sessions.\n      Multi-sessions are tracked by using the Acct-Multi-Session-Id.\
    \  An\n      example of a multi-session would be a Multi-link PPP bundle.  Each\n\
    \      leg of the bundle would be a session while the entire bundle would\n  \
    \    be a multi-session.\n   Network Access Identifier\n      The Network Access\
    \ Identifier, or NAI [RFC4282], is used in the\n      Diameter protocol to extract\
    \ a user's identity and realm.  The\n      identity is used to identify the user\
    \ during authentication and/or\n      authorization while the realm is used for\
    \ message routing\n      purposes.\n   Proxy Agent or Proxy\n      In addition\
    \ to forwarding requests and responses, proxies make\n      policy decisions relating\
    \ to resource usage and provisioning.\n      Typically, this is accomplished by\
    \ tracking the state of NAS\n      devices.  While proxies usually do not respond\
    \ to client requests\n      prior to receiving a response from the server, they\
    \ may originate\n      Reject messages in cases where policies are violated. \
    \ As a\n      result, proxies need to understand the semantics of the messages\n\
    \      passing through them, and they may not support all Diameter\n      applications.\n\
    \   Realm\n      The string in the NAI that immediately follows the '@' character.\n\
    \      NAI realm names are required to be unique and are piggybacked on\n    \
    \  the administration of the DNS namespace.  Diameter makes use of\n      the\
    \ realm, also loosely referred to as domain, to determine\n      whether messages\
    \ can be satisfied locally or whether they must be\n      routed or redirected.\
    \  In RADIUS, realm names are not necessarily\n      piggybacked on the DNS namespace\
    \ but may be independent of it.\n   Real-Time Accounting\n      Real-time accounting\
    \ involves the processing of information on\n      resource usage within a defined\
    \ time window.  Typically, time\n      constraints are imposed in order to limit\
    \ financial risk.  The\n      Diameter Credit-Control Application [RFC4006] is\
    \ an example of an\n      application that defines real-time accounting functionality.\n\
    \   Relay Agent or Relay\n      Relays forward requests and responses based on\
    \ routing-related\n      AVPs and routing table entries.  Since relays do not\
    \ make policy\n      decisions, they do not examine or alter non-routing AVPs.\
    \  As a\n      result, relays never originate messages, do not need to understand\n\
    \      the semantics of messages or non-routing AVPs, and are capable of\n   \
    \   handling any Diameter application or message type.  Since relays\n      make\
    \ decisions based on information in routing AVPs and realm\n      forwarding tables,\
    \ they do not keep state on NAS resource usage or\n      sessions in progress.\n\
    \   Redirect Agent\n      Rather than forwarding requests and responses between\
    \ clients and\n      servers, redirect agents refer clients to servers and allow\
    \ them\n      to communicate directly.  Since redirect agents do not sit in the\n\
    \      forwarding path, they do not alter any AVPs transiting between\n      client\
    \ and server.  Redirect agents do not originate messages and\n      are capable\
    \ of handling any message type, although they may be\n      configured only to\
    \ redirect messages of certain types, while\n      acting as relay or proxy agents\
    \ for other types.  As with relay\n      agents, redirect agents do not keep state\
    \ with respect to sessions\n      or NAS resources.\n   Session\n      A session\
    \ is a related progression of events devoted to a\n      particular activity.\
    \  Diameter application documents provide\n      guidelines as to when a session\
    \ begins and ends.  All Diameter\n      packets with the same Session-Id are considered\
    \ to be part of the\n      same session.\n   Stateful Agent\n      A stateful\
    \ agent is one that maintains session state information,\n      by keeping track\
    \ of all authorized active sessions.  Each\n      authorized session is bound\
    \ to a particular service, and its state\n      is considered active either until\
    \ it is notified otherwise or\n      until expiration.\n   Sub-session\n     \
    \ A sub-session represents a distinct service (e.g., QoS or data\n      characteristics)\
    \ provided to a given session.  These services may\n      happen concurrently\
    \ (e.g., simultaneous voice and data transfer\n      during the same session)\
    \ or serially.  These changes in sessions\n      are tracked with the Accounting-Sub-Session-Id.\n\
    \   Transaction State\n      The Diameter protocol requires that agents maintain\
    \ transaction\n      state, which is used for failover purposes.  Transaction\
    \ state\n      implies that upon forwarding a request, the Hop-by-Hop Identifier\n\
    \      is saved; the field is replaced with a locally unique identifier,\n   \
    \   which is restored to its original value when the corresponding\n      answer\
    \ is received.  The request's state is released upon receipt\n      of the answer.\
    \  A stateless agent is one that only maintains\n      transaction state.\n  \
    \ Translation Agent\n      A translation agent (TLA in Figure 4) is a stateful\
    \ Diameter node\n      that performs protocol translation between Diameter and\
    \ another\n      AAA protocol, such as RADIUS.\n   Upstream\n      Upstream is\
    \ used to identify the direction of a particular\n      Diameter message from\
    \ the Diameter client towards the home server.\n   User\n      The entity or device\
    \ requesting or using some resource, in support\n      of which a Diameter client\
    \ has generated a request.\n"
- title: 1.3.  Approach to Extensibility
  contents:
  - "1.3.  Approach to Extensibility\n   The Diameter protocol is designed to be extensible,\
    \ using several\n   mechanisms, including:\n   o  Defining new AVP values\n  \
    \ o  Creating new AVPs\n   o  Creating new commands\n   o  Creating new applications\n\
    \   From the point of view of extensibility, Diameter authentication,\n   authorization,\
    \ and accounting applications are treated in the same\n   way.\n   Note: Protocol\
    \ designers should try to reuse existing functionality,\n   namely AVP values,\
    \ AVPs, commands, and Diameter applications.  Reuse\n   simplifies standardization\
    \ and implementation.  To avoid potential\n   interoperability issues, it is important\
    \ to ensure that the semantics\n   of the reused features are well understood.\
    \  Given that Diameter can\n   also carry RADIUS attributes as Diameter AVPs,\
    \ such reuse\n   considerations also apply to existing RADIUS attributes that\
    \ may be\n   useful in a Diameter application.\n"
- title: 1.3.1.  Defining New AVP Values
  contents:
  - "1.3.1.  Defining New AVP Values\n   In order to allocate a new AVP value for\
    \ AVPs defined in the Diameter\n   base protocol, the IETF needs to approve a\
    \ new RFC that describes the\n   AVP value.  IANA considerations for these AVP\
    \ values are discussed in\n   Section 11.3.\n   The allocation of AVP values for\
    \ other AVPs is guided by the IANA\n   considerations of the document that defines\
    \ those AVPs.  Typically,\n   allocation of new values for an AVP defined in an\
    \ RFC would require\n   IETF Review [RFC5226], whereas values for vendor-specific\
    \ AVPs can be\n   allocated by the vendor.\n"
- title: 1.3.2.  Creating New AVPs
  contents:
  - "1.3.2.  Creating New AVPs\n   A new AVP being defined MUST use one of the data\
    \ types listed in\n   Sections 4.2 or 4.3.  If an appropriate derived data type\
    \ is already\n   defined, it SHOULD be used instead of a base data type to encourage\n\
    \   reusability and good design practice.\n   In the event that a logical grouping\
    \ of AVPs is necessary, and\n   multiple \"groups\" are possible in a given command,\
    \ it is recommended\n   that a Grouped AVP be used (see Section 4.4).\n   The\
    \ creation of new AVPs can happen in various ways.  The recommended\n   approach\
    \ is to define a new general-purpose AVP in a Standards Track\n   RFC approved\
    \ by the IETF.  However, as described in Section 11.1.1,\n   there are other mechanisms.\n"
- title: 1.3.3.  Creating New Commands
  contents:
  - "1.3.3.  Creating New Commands\n   A new Command Code MUST be allocated when required\
    \ AVPs (those\n   indicated as {AVP} in the CCF definition) are added to, deleted\
    \ from,\n   or redefined in (for example, by changing a required AVP into an\n\
    \   optional one) an existing command.\n   Furthermore, if the transport characteristics\
    \ of a command are\n   changed (for example, with respect to the number of round\
    \ trips\n   required), a new Command Code MUST be registered.\n   A change to\
    \ the CCF of a command, such as described above, MUST\n   result in the definition\
    \ of a new Command Code.  This subsequently\n   leads to the need to define a\
    \ new Diameter application for any\n   application that will use that new command.\n\
    \   The IANA considerations for Command Codes are discussed in\n   Section 3.1.\n"
- title: 1.3.4.  Creating New Diameter Applications
  contents:
  - "1.3.4.  Creating New Diameter Applications\n   Every Diameter application specification\
    \ MUST have an IANA-assigned\n   Application Id (see Section 2.4).  The managed\
    \ Application ID space\n   is flat, and there is no relationship between different\
    \ Diameter\n   applications with respect to their Application Ids.  As such, there\n\
    \   is no versioning support provided by these Application Ids\n   themselves;\
    \ every Diameter application is a standalone application.\n   If the application\
    \ has a relationship with other Diameter\n   applications, such a relationship\
    \ is not known to Diameter.\n   Before describing the rules for creating new Diameter\
    \ applications,\n   it is important to discuss the semantics of the AVP occurrences\
    \ as\n   stated in the CCF and the M-bit flag (Section 4.1) for an AVP.  There\n\
    \   is no relationship imposed between the two; they are set\n   independently.\n\
    \   o  The CCF indicates what AVPs are placed into a Diameter command by\n   \
    \   the sender of that command.  Often, since there are multiple modes\n     \
    \ of protocol interactions, many of the AVPs are indicated as\n      optional.\n\
    \   o  The M-bit allows the sender to indicate to the receiver whether or\n  \
    \    not understanding the semantics of an AVP and its content is\n      mandatory.\
    \  If the M-bit is set by the sender and the receiver\n      does not understand\
    \ the AVP or the values carried within that AVP,\n      then a failure is generated\
    \ (see Section 7).\n   It is the decision of the protocol designer when to develop\
    \ a new\n   Diameter application rather than extending Diameter in other ways.\n\
    \   However, a new Diameter application MUST be created when one or more\n   of\
    \ the following criteria are met:\n   M-bit Setting\n      An AVP with the M-bit\
    \ in the MUST column of the AVP flag table is\n      added to an existing Command/Application.\
    \  An AVP with the M-bit\n      in the MAY column of the AVP flag table is added\
    \ to an existing\n      Command/Application.\n      Note: The M-bit setting for\
    \ a given AVP is relevant to an\n      Application and each command within that\
    \ application that includes\n      the AVP.  That is, if an AVP appears in two\
    \ commands for\n      application Foo and the M-bit settings are different in\
    \ each\n      command, then there should be two AVP flag tables describing when\n\
    \      to set the M-bit.\n   Commands\n      A new command is used within the\
    \ existing application because\n      either an additional command is added, an\
    \ existing command has\n      been modified so that a new Command Code had to\
    \ be registered, or\n      a command has been deleted.\n   AVP Flag bits\n   \
    \   If an existing application changes the meaning/semantics of its\n      AVP\
    \ Flags or adds new flag bits, then a new Diameter application\n      MUST be\
    \ created.\n   If the CCF definition of a command allows it, an implementation\
    \ may\n   add arbitrary optional AVPs with the M-bit cleared (including vendor-\n\
    \   specific AVPs) to that command without needing to define a new\n   application.\
    \  Please refer to Section 11.1.1 for details.\n"
- title: 2.  Protocol Overview
  contents:
  - "2.  Protocol Overview\n   The base Diameter protocol concerns itself with establishing\n\
    \   connections to peers, capabilities negotiation, how messages are sent\n  \
    \ and routed through peers, and how the connections are eventually torn\n   down.\
    \  The base protocol also defines certain rules that apply to all\n   message\
    \ exchanges between Diameter nodes.\n   Communication between Diameter peers begins\
    \ with one peer sending a\n   message to another Diameter peer.  The set of AVPs\
    \ included in the\n   message is determined by a particular Diameter application.\
    \  One AVP\n   that is included to reference a user's session is the Session-Id.\n\
    \   The initial request for authentication and/or authorization of a user\n  \
    \ would include the Session-Id AVP.  The Session-Id is then used in all\n   subsequent\
    \ messages to identify the user's session (see Section 8 for\n   more information).\
    \  The communicating party may accept the request or\n   reject it by returning\
    \ an answer message with the Result-Code AVP set\n   to indicate that an error\
    \ occurred.  The specific behavior of the\n   Diameter server or client receiving\
    \ a request depends on the Diameter\n   application employed.\n   Session state\
    \ (associated with a Session-Id) MUST be freed upon\n   receipt of the Session-Termination-Request,\
    \ Session-Termination-\n   Answer, expiration of authorized service time in the\
    \ Session-Timeout\n   AVP, and according to rules established in a particular\
    \ Diameter\n   application.\n   The base Diameter protocol may be used by itself\
    \ for accounting\n   applications.  For authentication and authorization, it is\
    \ always\n   extended for a particular application.\n   Diameter clients MUST\
    \ support the base protocol, which includes\n   accounting.  In addition, they\
    \ MUST fully support each Diameter\n   application that is needed to implement\
    \ the client's service, e.g.,\n   Network Access Server Requirements (NASREQ)\
    \ [RFC2881] and/or Mobile\n   IPv4.  A Diameter client MUST be referred to as\
    \ \"Diameter X Client\"\n   where X is the application that it supports and not\
    \ a \"Diameter\n   Client\".\n   Diameter servers MUST support the base protocol,\
    \ which includes\n   accounting.  In addition, they MUST fully support each Diameter\n\
    \   application that is needed to implement the intended service, e.g.,\n   NASREQ\
    \ and/or Mobile IPv4.  A Diameter server MUST be referred to as\n   \"Diameter\
    \ X Server\" where X is the application that it supports, and\n   not a \"Diameter\
    \ Server\".\n   Diameter relays and redirect agents are transparent to the Diameter\n\
    \   applications, but they MUST support the Diameter base protocol, which\n  \
    \ includes accounting, and all Diameter applications.\n   Diameter proxies MUST\
    \ support the base protocol, which includes\n   accounting.  In addition, they\
    \ MUST fully support each Diameter\n   application that is needed to implement\
    \ proxied services, e.g.,\n   NASREQ and/or Mobile IPv4.  A Diameter proxy MUST\
    \ be referred to as\n   \"Diameter X Proxy\" where X is the application which\
    \ it supports, and\n   not a \"Diameter Proxy\".\n"
- title: 2.1.  Transport
  contents:
  - "2.1.  Transport\n   The Diameter Transport profile is defined in [RFC3539].\n\
    \   The base Diameter protocol is run on port 3868 for both TCP [RFC0793]\n  \
    \ and SCTP [RFC4960].  For TLS [RFC5246] and Datagram Transport Layer\n   Security\
    \ (DTLS) [RFC6347], a Diameter node that initiates a\n   connection prior to any\
    \ message exchanges MUST run on port 5658.  It\n   is assumed that TLS is run\
    \ on top of TCP when it is used, and DTLS is\n   run on top of SCTP when it is\
    \ used.\n   If the Diameter peer does not support receiving TLS/TCP and DTLS/SCTP\n\
    \   connections on port 5658 (i.e., the peer complies only with RFC\n   3588),\
    \ then the initiator MAY revert to using TCP or SCTP on port\n   3868.  Note that\
    \ this scheme is kept only for the purpose of backward\n   compatibility and that\
    \ there are inherent security vulnerabilities\n   when the initial CER/CEA messages\
    \ are sent unprotected (see\n   Section 5.6).\n   Diameter clients MUST support\
    \ either TCP or SCTP; agents and servers\n   SHOULD support both.\n   A Diameter\
    \ node MAY initiate connections from a source port other\n   than the one that\
    \ it declares it accepts incoming connections on, and\n   it MUST always be prepared\
    \ to receive connections on port 3868 for\n   TCP or SCTP and port 5658 for TLS/TCP\
    \ and DTLS/SCTP connections.\n   When DNS-based peer discovery (Section 5.2) is\
    \ used, the port numbers\n   received from SRV records take precedence over the\
    \ default ports\n   (3868 and 5658).\n   A given Diameter instance of the peer\
    \ state machine MUST NOT use more\n   than one transport connection to communicate\
    \ with a given peer,\n   unless multiple instances exist on the peer, in which,\
    \ case a\n   separate connection per process is allowed.\n   When no transport\
    \ connection exists with a peer, an attempt to\n   connect SHOULD be made periodically.\
    \  This behavior is handled via\n   the Tc timer (see Section 12 for details),\
    \ whose recommended value is\n   30 seconds.  There are certain exceptions to\
    \ this rule, such as when\n   a peer has terminated the transport connection stating\
    \ that it does\n   not wish to communicate.\n   When connecting to a peer and\
    \ either zero or more transports are\n   specified, TLS SHOULD be tried first,\
    \ followed by DTLS, then by TCP,\n   and finally by SCTP.  See Section 5.2 for\
    \ more information on peer\n   discovery.\n   Diameter implementations SHOULD\
    \ be able to interpret ICMP protocol\n   port unreachable messages as explicit\
    \ indications that the server is\n   not reachable, subject to security policy\
    \ on trusting such messages.\n   Further guidance regarding the treatment of ICMP\
    \ errors can be found\n   in [RFC5927] and [RFC5461].  Diameter implementations\
    \ SHOULD also be\n   able to interpret a reset from the transport and timed-out\
    \ connection\n   attempts.  If Diameter receives data from the lower layer that\
    \ cannot\n   be parsed or identified as a Diameter error made by the peer, the\n\
    \   stream is compromised and cannot be recovered.  The transport\n   connection\
    \ MUST be closed using a RESET call (send a TCP RST bit) or\n   an SCTP ABORT\
    \ message (graceful closure is compromised).\n"
- title: 2.1.1.  SCTP Guidelines
  contents:
  - "2.1.1.  SCTP Guidelines\n   Diameter messages SHOULD be mapped into SCTP streams\
    \ in a way that\n   avoids head-of-the-line (HOL) blocking.  Among different ways\
    \ of\n   performing the mapping that fulfill this requirement it is\n   RECOMMENDED\
    \ that a Diameter node send every Diameter message (request\n   or response) over\
    \ stream zero with the unordered flag set.  However,\n   Diameter nodes MAY select\
    \ and implement other design alternatives for\n   avoiding HOL blocking such as\
    \ using multiple streams with the\n   unordered flag cleared (as originally instructed\
    \ in RFC 3588).  On\n   the receiving side, a Diameter entity MUST be ready to\
    \ receive\n   Diameter messages over any stream, and it is free to return responses\n\
    \   over a different stream.  This way, both sides manage the available\n   streams\
    \ in the sending direction, independently of the streams chosen\n   by the other\
    \ side to send a particular Diameter message.  These\n   messages can be out-of-order\
    \ and belong to different Diameter\n   sessions.\n   Out-of-order delivery has\
    \ special concerns during a connection\n   establishment and termination.  When\
    \ a connection is established, the\n   responder side sends a CEA message and\
    \ moves to R-Open state as\n   specified in Section 5.6.  If an application message\
    \ is sent shortly\n   after the CEA and delivered out-of-order, the initiator\
    \ side, still\n   in Wait-I-CEA state, will discard the application message and\
    \ close\n   the connection.  In order to avoid this race condition, the receiver\n\
    \   side SHOULD NOT use out-of-order delivery methods until the first\n   message\
    \ has been received from the initiator, proving that it has\n   moved to I-Open\
    \ state.  To trigger such a message, the receiver side\n   could send a DWR immediately\
    \ after sending a CEA.  Upon reception of\n   the corresponding DWA, the receiver\
    \ side should start using out-of-\n   order delivery methods to counter the HOL\
    \ blocking.\n   Another race condition may occur when DPR and DPA messages are\
    \ used.\n   Both DPR and DPA are small in size; thus, they may be delivered to\n\
    \   the peer faster than application messages when an out-of-order\n   delivery\
    \ mechanism is used.  Therefore, it is possible that a DPR/DPA\n   exchange completes\
    \ while application messages are still in transit,\n   resulting in a loss of\
    \ these messages.  An implementation could\n   mitigate this race condition, for\
    \ example, using timers, and wait for\n   a short period of time for pending application\
    \ level messages to\n   arrive before proceeding to disconnect the transport connection.\n\
    \   Eventually, lost messages are handled by the retransmission mechanism\n  \
    \ described in Section 5.5.4.\n   A Diameter agent SHOULD use dedicated payload\
    \ protocol identifiers\n   (PPIDs) for clear text and encrypted SCTP DATA chunks\
    \ instead of only\n   using the unspecified payload protocol identifier (value\
    \ 0).  For\n   this purpose, two PPID values are allocated: the PPID value 46\
    \ is for\n   Diameter messages in clear text SCTP DATA chunks, and the PPID value\n\
    \   47 is for Diameter messages in protected DTLS/SCTP DATA chunks.\n"
- title: 2.2.  Securing Diameter Messages
  contents:
  - "2.2.  Securing Diameter Messages\n   Connections between Diameter peers SHOULD\
    \ be protected by TLS/TCP and\n   DTLS/SCTP.  All Diameter base protocol implementations\
    \ MUST support\n   the use of TLS/TCP and DTLS/SCTP.  If desired, alternative\
    \ security\n   mechanisms that are independent of Diameter, such as IPsec [RFC4301],\n\
    \   can be deployed to secure connections between peers.  The Diameter\n   protocol\
    \ MUST NOT be used without one of TLS, DTLS, or IPsec.\n"
- title: 2.3.  Diameter Application Compliance
  contents:
  - "2.3.  Diameter Application Compliance\n   Application Ids are advertised during\
    \ the capabilities exchange phase\n   (see Section 5.3).  Advertising support\
    \ of an application implies\n   that the sender supports the functionality specified\
    \ in the\n   respective Diameter application specification.\n   Implementations\
    \ MAY add arbitrary optional AVPs with the M-bit\n   cleared (including vendor-specific\
    \ AVPs) to a command defined in an\n   application, but only if the command's\
    \ CCF syntax specification\n   allows for it.  Please refer to Section 11.1.1\
    \ for details.\n"
- title: 2.4.  Application Identifiers
  contents:
  - "2.4.  Application Identifiers\n   Each Diameter application MUST have an IANA-assigned\
    \ Application ID.\n   The base protocol does not require an Application Id since\
    \ its\n   support is mandatory.  During the capabilities exchange, Diameter\n\
    \   nodes inform their peers of locally supported applications.\n   Furthermore,\
    \ all Diameter messages contain an Application Id, which\n   is used in the message\
    \ forwarding process.\n   The following Application Id values are defined:\n \
    \        Diameter common message       0\n         Diameter base accounting  \
    \    3\n         Relay                         0xffffffff\n   Relay and redirect\
    \ agents MUST advertise the Relay Application ID,\n   while all other Diameter\
    \ nodes MUST advertise locally supported\n   applications.  The receiver of a\
    \ Capabilities Exchange message\n   advertising relay service MUST assume that\
    \ the sender supports all\n   current and future applications.\n   Diameter relay\
    \ and proxy agents are responsible for finding an\n   upstream server that supports\
    \ the application of a particular\n   message.  If none can be found, an error\
    \ message is returned with the\n   Result-Code AVP set to DIAMETER_UNABLE_TO_DELIVER.\n"
- title: 2.5.  Connections vs. Sessions
  contents:
  - "2.5.  Connections vs. Sessions\n   This section attempts to provide the reader\
    \ with an understanding of\n   the difference between \"connection\" and \"session\"\
    , which are terms\n   used extensively throughout this document.\n   A connection\
    \ refers to a transport-level connection between two peers\n   that is used to\
    \ send and receive Diameter messages.  A session is a\n   logical concept at the\
    \ application layer that exists between the\n   Diameter client and the Diameter\
    \ server; it is identified via the\n   Session-Id AVP.\n             +--------+\
    \          +-------+          +--------+\n             | Client |          | Relay\
    \ |          | Server |\n             +--------+          +-------+          +--------+\n\
    \                      <---------->       <---------->\n                   peer\
    \ connection A   peer connection B\n                      <----------------------------->\n\
    \                              User session x\n                Figure 1: Diameter\
    \ Connections and Sessions\n   In the example provided in Figure 1, peer connection\
    \ A is established\n   between the client and the relay.  Peer connection B is\
    \ established\n   between the relay and the server.  User session X spans from\
    \ the\n   client via the relay to the server.  Each \"user\" of a service causes\n\
    \   an auth request to be sent, with a unique session identifier.  Once\n   accepted\
    \ by the server, both the client and the server are aware of\n   the session.\n\
    \   It is important to note that there is no relationship between a\n   connection\
    \ and a session, and that Diameter messages for multiple\n   sessions are all\
    \ multiplexed through a single connection.  Also, note\n   that Diameter messages\
    \ pertaining to the session, both application-\n   specific and those that are\
    \ defined in this document such as ASR/ASA,\n   RAR/RAA, and STR/STA, MUST carry\
    \ the Application Id of the\n   application.  Diameter messages pertaining to\
    \ peer connection\n   establishment and maintenance such as CER/CEA, DWR/DWA,\
    \ and DPR/DPA\n   MUST carry an Application Id of zero (0).\n"
- title: 2.6.  Peer Table
  contents:
  - "2.6.  Peer Table\n   The Diameter peer table is used in message forwarding and\
    \ is\n   referenced by the routing table.  A peer table entry contains the\n \
    \  following fields:\n   Host Identity\n      Following the conventions described\
    \ for the DiameterIdentity-\n      derived AVP data format in Section 4.3.1, this\
    \ field contains the\n      contents of the Origin-Host (Section 6.3) AVP found\
    \ in the CER or\n      CEA message.\n   StatusT\n      This is the state of the\
    \ peer entry, and it MUST match one of the\n      values listed in Section 5.6.\n\
    \   Static or Dynamic\n      Specifies whether a peer entry was statically configured\
    \ or\n      dynamically discovered.\n   Expiration Time\n      Specifies the time\
    \ at which dynamically discovered peer table\n      entries are to be either refreshed\
    \ or expired.  If public key\n      certificates are used for Diameter security\
    \ (e.g., with TLS), this\n      value MUST NOT be greater than the expiry times\
    \ in the relevant\n      certificates.\n   TLS/TCP and DTLS/SCTP Enabled\n   \
    \   Specifies whether TLS/TCP and DTLS/SCTP is to be used when\n      communicating\
    \ with the peer.\n   Additional security information, when needed (e.g., keys,\n\
    \   certificates).\n"
- title: 2.7.  Routing Table
  contents:
  - "2.7.  Routing Table\n   All Realm-Based routing lookups are performed against\
    \ what is\n   commonly known as the routing table (see Section 12).  Each routing\n\
    \   table entry contains the following fields:\n   Realm Name\n      This is the\
    \ field that MUST be used as a primary key in the\n      routing table lookups.\
    \  Note that some implementations perform\n      their lookups based on longest-match-from-the-right\
    \ on the realm\n      rather than requiring an exact match.\n   Application Identifier\n\
    \      An application is identified by an Application Id.  A route entry\n   \
    \   can have a different destination based on the Application Id in\n      the\
    \ message header.  This field MUST be used as a secondary key\n      field in\
    \ routing table lookups.\n   Local Action\n      The Local Action field is used\
    \ to identify how a message should be\n      treated.  The following actions are\
    \ supported:\n      1.  LOCAL - Diameter messages that can be satisfied locally\
    \ and do\n          not need to be routed to another Diameter entity.\n      2.\
    \  RELAY - All Diameter messages that fall within this category\n          MUST\
    \ be routed to a next-hop Diameter entity that is indicated\n          by the\
    \ identifier described below.  Routing is done without\n          modifying any\
    \ non-routing AVPs.  See Section 6.1.9 for\n          relaying guidelines.\n \
    \     3.  PROXY - All Diameter messages that fall within this category\n     \
    \     MUST be routed to a next Diameter entity that is indicated by\n        \
    \  the identifier described below.  The local server MAY apply\n          its\
    \ local policies to the message by including new AVPs to the\n          message\
    \ prior to routing.  See Section 6.1.9 for proxying\n          guidelines.\n \
    \     4.  REDIRECT - Diameter messages that fall within this category\n      \
    \    MUST have the identity of the home Diameter server(s)\n          appended,\
    \ and returned to the sender of the message.  See\n          Section 6.1.8 for\
    \ redirection guidelines.\n   Server Identifier\n      The identity of one or\
    \ more servers to which the message is to be\n      routed.  This identity MUST\
    \ also be present in the Host Identity\n      field of the peer table (Section\
    \ 2.6).  When the Local Action is\n      set to RELAY or PROXY, this field contains\
    \ the identity of the\n      server(s) to which the message MUST be routed.  When\
    \ the Local\n      Action field is set to REDIRECT, this field contains the identity\n\
    \      of one or more servers to which the message MUST be redirected.\n   Static\
    \ or Dynamic\n      Specifies whether a route entry was statically configured\
    \ or\n      dynamically discovered.\n   Expiration Time\n      Specifies the time\
    \ at which a dynamically discovered route table\n      entry expires.  If public\
    \ key certificates are used for Diameter\n      security (e.g., with TLS), this\
    \ value MUST NOT be greater than the\n      expiry time in the relevant certificates.\n\
    \   It is important to note that Diameter agents MUST support at least\n   one\
    \ of the LOCAL, RELAY, PROXY, or REDIRECT modes of operation.\n   Agents do not\
    \ need to support all modes of operation in order to\n   conform with the protocol\
    \ specification, but they MUST follow the\n   protocol compliance guidelines in\
    \ Section 2.  Relay agents and\n   proxies MUST NOT reorder AVPs.\n   The routing\
    \ table MAY include a default entry that MUST be used for\n   any requests not\
    \ matching any of the other entries.  The routing\n   table MAY consist of only\
    \ such an entry.\n   When a request is routed, the target server MUST have advertised\
    \ the\n   Application Id (see Section 2.4) for the given message or have\n   advertised\
    \ itself as a relay or proxy agent.  Otherwise, an error is\n   returned with\
    \ the Result-Code AVP set to DIAMETER_UNABLE_TO_DELIVER.\n"
- title: 2.8.  Role of Diameter Agents
  contents:
  - "2.8.  Role of Diameter Agents\n   In addition to clients and servers, the Diameter\
    \ protocol introduces\n   relay, proxy, redirect, and translation agents, each\
    \ of which is\n   defined in Section 1.2.  Diameter agents are useful for several\n\
    \   reasons:\n   o  They can distribute administration of systems to a configurable\n\
    \      grouping, including the maintenance of security associations.\n   o  They\
    \ can be used for concentration of requests from a number of\n      co-located\
    \ or distributed NAS equipment sets to a set of like user\n      groups.\n   o\
    \  They can do value-added processing to the requests or responses.\n   o  They\
    \ can be used for load balancing.\n   o  A complex network will have multiple\
    \ authentication sources, they\n      can sort requests and forward towards the\
    \ correct target.\n   The Diameter protocol requires that agents maintain transaction\n\
    \   state, which is used for failover purposes.  Transaction state\n   implies\
    \ that upon forwarding a request, its Hop-by-Hop Identifier is\n   saved; the\
    \ field is replaced with a locally unique identifier, which\n   is restored to\
    \ its original value when the corresponding answer is\n   received.  The request's\
    \ state is released upon receipt of the\n   answer.  A stateless agent is one\
    \ that only maintains transaction\n   state.\n   The Proxy-Info AVP allows stateless\
    \ agents to add local state to a\n   Diameter request, with the guarantee that\
    \ the same state will be\n   present in the answer.  However, the protocol's failover\
    \ procedures\n   require that agents maintain a copy of pending requests.\n  \
    \ A stateful agent is one that maintains session state information by\n   keeping\
    \ track of all authorized active sessions.  Each authorized\n   session is bound\
    \ to a particular service, and its state is considered\n   active until either\
    \ the agent is notified otherwise or the session\n   expires.  Each authorized\
    \ session has an expiration, which is\n   communicated by Diameter servers via\
    \ the Session-Timeout AVP.\n   Maintaining session state may be useful in certain\
    \ applications, such\n   as:\n   o  Protocol translation (e.g., RADIUS <-> Diameter)\n\
    \   o  Limiting resources authorized to a particular user\n   o  Per-user or per-transaction\
    \ auditing\n   A Diameter agent MAY act in a stateful manner for some requests\
    \ and\n   be stateless for others.  A Diameter implementation MAY act as one\n\
    \   type of agent for some requests and as another type of agent for\n   others.\n"
- title: 2.8.1.  Relay Agents
  contents:
  - "2.8.1.  Relay Agents\n   Relay agents are Diameter agents that accept requests\
    \ and route\n   messages to other Diameter nodes based on information found in\
    \ the\n   messages (e.g., the value of the Destination-Realm AVP Section 6.6).\n\
    \   This routing decision is performed using a list of supported realms\n   and\
    \ known peers.  This is known as the routing table, as is defined\n   further\
    \ in Section 2.7.\n   Relays may, for example, be used to aggregate requests from\
    \ multiple\n   Network Access Servers (NASes) within a common geographical area\n\
    \   (Point of Presence, POP).  The use of relays is advantageous since it\n  \
    \ eliminates the need for NASes to be configured with the necessary\n   security\
    \ information they would otherwise require to communicate with\n   Diameter servers\
    \ in other realms.  Likewise, this reduces the\n   configuration load on Diameter\
    \ servers that would otherwise be\n   necessary when NASes are added, changed,\
    \ or deleted.\n   Relays modify Diameter messages by inserting and removing routing\n\
    \   information, but they do not modify any other portion of a message.\n   Relays\
    \ SHOULD NOT maintain session state but MUST maintain\n   transaction state.\n\
    \       +------+    --------->     +------+     --------->    +------+\n     \
    \  |      |    1. Request     |      |     2. Request    |      |\n       | NAS\
    \  |                   | DRL  |                   | HMS  |\n       |      |  \
    \  4. Answer      |      |     3. Answer     |      |\n       +------+    <---------\
    \     +------+     <---------    +------+\n    example.net                example.net\
    \                example.com\n                  Figure 2: Relaying of Diameter\
    \ messages\n   The example provided in Figure 2 depicts a request issued from\
    \ a NAS,\n   which is an access device, for the user bob@example.com.  Prior to\n\
    \   issuing the request, the NAS performs a Diameter route lookup, using\n   \"\
    example.com\" as the key, and determines that the message is to be\n   relayed\
    \ to a DRL, which is a Diameter relay.  The DRL performs the\n   same route lookup\
    \ as the NAS, and relays the message to the HMS,\n   which is example.com's home\
    \ server.  The HMS identifies that the\n   request can be locally supported (via\
    \ the realm), processes the\n   authentication and/or authorization request, and\
    \ replies with an\n   answer, which is routed back to the NAS using saved transaction\n\
    \   state.\n   Since relays do not perform any application-level processing, they\n\
    \   provide relaying services for all Diameter applications; therefore,\n   they\
    \ MUST advertise the Relay Application Id.\n"
- title: 2.8.2.  Proxy Agents
  contents:
  - "2.8.2.  Proxy Agents\n   Similar to relays, proxy agents route Diameter messages\
    \ using the\n   Diameter routing table.  However, they differ since they modify\n\
    \   messages to implement policy enforcement.  This requires that proxies\n  \
    \ maintain the state of their downstream peers (e.g., access devices)\n   to enforce\
    \ resource usage, provide admission control, and provide\n   provisioning.\n \
    \  Proxies may, for example, be used in call control centers or access\n   ISPs\
    \ that provide outsourced connections; they can monitor the number\n   and type\
    \ of ports in use and make allocation and admission decisions\n   according to\
    \ their configuration.\n   Since enforcing policies requires an understanding\
    \ of the service\n   being provided, proxies MUST only advertise the Diameter\
    \ applications\n   they support.\n"
- title: 2.8.3.  Redirect Agents
  contents:
  - "2.8.3.  Redirect Agents\n   Redirect agents are useful in scenarios where the\
    \ Diameter routing\n   configuration needs to be centralized.  An example is a\
    \ redirect\n   agent that provides services to all members of a consortium, but\
    \ does\n   not wish to be burdened with relaying all messages between realms.\n\
    \   This scenario is advantageous since it does not require that the\n   consortium\
    \ provide routing updates to its members when changes are\n   made to a member's\
    \ infrastructure.\n   Since redirect agents do not relay messages, and only return\
    \ an\n   answer with the information necessary for Diameter agents to\n   communicate\
    \ directly, they do not modify messages.  Since redirect\n   agents do not receive\
    \ answer messages, they cannot maintain session\n   state.\n   The example provided\
    \ in Figure 3 depicts a request issued from the\n   access device, NAS, for the\
    \ user bob@example.com.  The message is\n   forwarded by the NAS to its relay,\
    \ DRL, which does not have a routing\n   entry in its Diameter routing table for\
    \ example.com.  The DRL has a\n   default route configured to DRD, which is a\
    \ redirect agent that\n   returns a redirect notification to DRL, as well as the\
    \ HMS' contact\n   information.  Upon receipt of the redirect notification, the\
    \ DRL\n   establishes a transport connection with the HMS, if one doesn't\n  \
    \ already exist, and forwards the request to it.\n                           \
    \       +------+\n                                  |      |\n               \
    \                   | DRD  |\n                                  |      |\n   \
    \                               +------+\n                                   ^\
    \    |\n                       2. Request  |    | 3. Redirection\n           \
    \                        |    |    Notification\n                            \
    \       |    v\n       +------+    --------->     +------+     --------->    +------+\n\
    \       |      |    1. Request     |      |     4. Request    |      |\n     \
    \  | NAS  |                   | DRL  |                   | HMS  |\n       |  \
    \    |    6. Answer      |      |     5. Answer     |      |\n       +------+\
    \    <---------     +------+     <---------    +------+\n      example.net   \
    \             example.net               example.com\n                 Figure 3:\
    \ Redirecting a Diameter Message\n   Since redirect agents do not perform any\
    \ application-level\n   processing, they provide relaying services for all Diameter\n\
    \   applications; therefore, they MUST advertise the Relay Application\n   ID.\n"
- title: 2.8.4.  Translation Agents
  contents:
  - "2.8.4.  Translation Agents\n   A translation agent is a device that provides\
    \ translation between two\n   protocols (e.g., RADIUS<->Diameter, TACACS+<->Diameter).\
    \  Translation\n   agents are likely to be used as aggregation servers to communicate\n\
    \   with a Diameter infrastructure, while allowing for the embedded\n   systems\
    \ to be migrated at a slower pace.\n   Given that the Diameter protocol introduces\
    \ the concept of long-lived\n   authorized sessions, translation agents MUST be\
    \ session stateful and\n   MUST maintain transaction state.\n   Translation of\
    \ messages can only occur if the agent recognizes the\n   application of a particular\
    \ request; therefore, translation agents\n   MUST only advertise their locally\
    \ supported applications.\n       +------+    --------->     +------+     --------->\
    \    +------+\n       |      |  RADIUS Request   |      |  Diameter Request |\
    \      |\n       | NAS  |                   | TLA  |                   | HMS \
    \ |\n       |      |  RADIUS Answer    |      |  Diameter Answer  |      |\n \
    \      +------+    <---------     +------+     <---------    +------+\n      example.net\
    \                example.net               example.com\n                Figure\
    \ 4: Translation of RADIUS to Diameter\n"
- title: 2.9.  Diameter Path Authorization
  contents:
  - "2.9.  Diameter Path Authorization\n   As noted in Section 2.2, Diameter provides\
    \ transmission-level\n   security for each connection using TLS/TCP and DTLS/SCTP.\
    \  Therefore,\n   each connection can be authenticated and can be replay and integrity\n\
    \   protected.\n   In addition to authenticating each connection, the entire session\n\
    \   MUST also be authorized.  Before initiating a connection, a Diameter\n   peer\
    \ MUST check that its peers are authorized to act in their roles.\n   For example,\
    \ a Diameter peer may be authentic, but that does not mean\n   that it is authorized\
    \ to act as a Diameter server advertising a set\n   of Diameter applications.\n\
    \   Prior to bringing up a connection, authorization checks are performed\n  \
    \ at each connection along the path.  Diameter capabilities negotiation\n   (CER/CEA)\
    \ also MUST be carried out, in order to determine what\n   Diameter applications\
    \ are supported by each peer.  Diameter sessions\n   MUST be routed only through\
    \ authorized nodes that have advertised\n   support for the Diameter application\
    \ required by the session.\n   As noted in Section 6.1.9, a relay or proxy agent\
    \ MUST append a\n   Route-Record AVP to all requests forwarded.  The AVP contains\
    \ the\n   identity of the peer from which the request was received.\n   The home\
    \ Diameter server, prior to authorizing a session, MUST check\n   the Route-Record\
    \ AVPs to make sure that the route traversed by the\n   request is acceptable.\
    \  For example, administrators within the home\n   realm may not wish to honor\
    \ requests that have been routed through an\n   untrusted realm.  By authorizing\
    \ a request, the home Diameter server\n   is implicitly indicating its willingness\
    \ to engage in the business\n   transaction as specified by any contractual relationship\
    \ between the\n   server and the previous hop.  A DIAMETER_AUTHORIZATION_REJECTED\
    \ error\n   message (see Section 7.1.5) is sent if the route traversed by the\n\
    \   request is unacceptable.\n   A home realm may also wish to check that each\
    \ accounting request\n   message corresponds to a Diameter response authorizing\
    \ the session.\n   Accounting requests without corresponding authorization responses\n\
    \   SHOULD be subjected to further scrutiny, as should accounting\n   requests\
    \ indicating a difference between the requested and provided\n   service.\n  \
    \ Forwarding of an authorization response is considered evidence of a\n   willingness\
    \ to take on financial risk relative to the session.  A\n   local realm may wish\
    \ to limit this exposure, for example, by\n   establishing credit limits for intermediate\
    \ realms and refusing to\n   accept responses that would violate those limits.\
    \  By issuing an\n   accounting request corresponding to the authorization response,\
    \ the\n   local realm implicitly indicates its agreement to provide the service\n\
    \   indicated in the authorization response.  If the service cannot be\n   provided\
    \ by the local realm, then a DIAMETER_UNABLE_TO_COMPLY error\n   message MUST\
    \ be sent within the accounting request; a Diameter client\n   receiving an authorization\
    \ response for a service that it cannot\n   perform MUST NOT substitute an alternate\
    \ service and then send\n   accounting requests for the alternate service instead.\n"
- title: 3.  Diameter Header
  contents:
  - "3.  Diameter Header\n   A summary of the Diameter header format is shown below.\
    \  The fields\n   are transmitted in network byte order.\n       0           \
    \        1                   2                   3\n       0 1 2 3 4 5 6 7 8 9\
    \ 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |    Version    |                 Message Length                |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \ Command Flags |                  Command Code                 |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                         Application-ID                        |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \                      Hop-by-Hop Identifier                    |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                      End-to-End Identifier                    |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \  AVPs ...\n      +-+-+-+-+-+-+-+-+-+-+-+-+-\n   Version\n      This Version\
    \ field MUST be set to 1 to indicate Diameter Version\n      1.\n    Message Length\n\
    \      The Message Length field is three octets and indicates the length\n   \
    \   of the Diameter message including the header fields and the padded\n     \
    \ AVPs.  Thus, the Message Length field is always a multiple of 4.\n   Command\
    \ Flags\n      The Command Flags field is eight bits.  The following bits are\n\
    \      assigned:\n          0 1 2 3 4 5 6 7\n         +-+-+-+-+-+-+-+-+\n    \
    \     |R P E T r r r r|\n         +-+-+-+-+-+-+-+-+\n      R(equest)\n       \
    \  If set, the message is a request.  If cleared, the message is\n         an\
    \ answer.\n      P(roxiable)\n         If set, the message MAY be proxied, relayed,\
    \ or redirected.  If\n         cleared, the message MUST be locally processed.\n\
    \      E(rror)\n         If set, the message contains a protocol error, and the\
    \ message\n         will not conform to the CCF described for this command.\n\
    \         Messages with the 'E' bit set are commonly referred to as error\n  \
    \       messages.  This bit MUST NOT be set in request messages (see\n       \
    \  Section 7.2).\n      T(Potentially retransmitted message)\n         This flag\
    \ is set after a link failover procedure, to aid the\n         removal of duplicate\
    \ requests.  It is set when resending\n         requests not yet acknowledged,\
    \ as an indication of a possible\n         duplicate due to a link failure.  This\
    \ bit MUST be cleared when\n         sending a request for the first time; otherwise,\
    \ the sender\n         MUST set this flag.  Diameter agents only need to be concerned\n\
    \         about the number of requests they send based on a single\n         received\
    \ request; retransmissions by other entities need not be\n         tracked.  Diameter\
    \ agents that receive a request with the T\n         flag set, MUST keep the T\
    \ flag set in the forwarded request.\n         This flag MUST NOT be set if an\
    \ error answer message (e.g., a\n         protocol error) has been received for\
    \ the earlier message.  It\n         can be set only in cases where no answer\
    \ has been received from\n         the server for a request, and the request has\
    \ been sent again.\n         This flag MUST NOT be set in answer messages.\n \
    \     r(eserved)\n         These flag bits are reserved for future use; they MUST\
    \ be set\n         to zero and ignored by the receiver.\n   Command Code\n   \
    \   The Command Code field is three octets and is used in order to\n      communicate\
    \ the command associated with the message.  The 24-bit\n      address space is\
    \ managed by IANA (see Section 3.1).  Command Code\n      values 16,777,214 and\
    \ 16,777,215 (hexadecimal values FFFFFE-\n      FFFFFF) are reserved for experimental\
    \ use (see Section 11.2).\n   Application-ID\n      Application-ID is four octets\
    \ and is used to identify for which\n      application the message is applicable.\
    \  The application can be an\n      authentication application, an accounting\
    \ application, or a\n      vendor-specific application.\n      The value of the\
    \ Application-ID field in the header MUST be the\n      same as any relevant Application-Id\
    \ AVPs contained in the message.\n   Hop-by-Hop Identifier\n      The Hop-by-Hop\
    \ Identifier is an unsigned 32-bit integer field (in\n      network byte order)\
    \ that aids in matching requests and replies.\n      The sender MUST ensure that\
    \ the Hop-by-Hop Identifier in a request\n      is unique on a given connection\
    \ at any given time, and it MAY\n      attempt to ensure that the number is unique\
    \ across reboots.  The\n      sender of an answer message MUST ensure that the\
    \ Hop-by-Hop\n      Identifier field contains the same value that was found in\
    \ the\n      corresponding request.  The Hop-by-Hop Identifier is normally a\n\
    \      monotonically increasing number, whose start value was randomly\n     \
    \ generated.  An answer message that is received with an unknown\n      Hop-by-Hop\
    \ Identifier MUST be discarded.\n   End-to-End Identifier\n      The End-to-End\
    \ Identifier is an unsigned 32-bit integer field (in\n      network byte order)\
    \ that is used to detect duplicate messages.\n      Upon reboot, implementations\
    \ MAY set the high order 12 bits to\n      contain the low order 12 bits of current\
    \ time, and the low order\n      20 bits to a random value.  Senders of request\
    \ messages MUST\n      insert a unique identifier on each message.  The identifier\
    \ MUST\n      remain locally unique for a period of at least 4 minutes, even\n\
    \      across reboots.  The originator of an answer message MUST ensure\n    \
    \  that the End-to-End Identifier field contains the same value that\n      was\
    \ found in the corresponding request.  The End-to-End Identifier\n      MUST NOT\
    \ be modified by Diameter agents of any kind.  The\n      combination of the Origin-Host\
    \ AVP (Section 6.3) and this field is\n      used to detect duplicates.  Duplicate\
    \ requests SHOULD cause the\n      same answer to be transmitted (modulo the Hop-by-Hop\
    \ Identifier\n      field and any routing AVPs that may be present), and they\
    \ MUST NOT\n      affect any state that was set when the original request was\n\
    \      processed.  Duplicate answer messages that are to be locally\n      consumed\
    \ (see Section 6.2) SHOULD be silently discarded.\n   AVPs\n      AVPs are a method\
    \ of encapsulating information relevant to the\n      Diameter message.  See Section\
    \ 4 for more information on AVPs.\n"
- title: 3.1.  Command Codes
  contents:
  - "3.1.  Command Codes\n   Each command Request/Answer pair is assigned a Command\
    \ Code, and the\n   sub-type (i.e., request or answer) is identified via the 'R'\
    \ bit in\n   the Command Flags field of the Diameter header.\n   Every Diameter\
    \ message MUST contain a Command Code in its header's\n   Command Code field,\
    \ which is used to determine the action that is to\n   be taken for a particular\
    \ message.  The following Command Codes are\n   defined in the Diameter base protocol:\n\
    \                                                   Section\n    Command Name\
    \             Abbrev.    Code       Reference\n      --------------------------------------------------------\n\
    \      Abort-Session-Request     ASR       274           8.5.1\n      Abort-Session-Answer\
    \      ASA       274           8.5.2\n      Accounting-Request        ACR    \
    \   271           9.7.1\n      Accounting-Answer         ACA       271       \
    \    9.7.2\n      Capabilities-Exchange-    CER       257           5.3.1\n  \
    \       Request\n      Capabilities-Exchange-    CEA       257           5.3.2\n\
    \         Answer\n      Device-Watchdog-Request   DWR       280           5.5.1\n\
    \      Device-Watchdog-Answer    DWA       280           5.5.2\n      Disconnect-Peer-Request\
    \   DPR       282           5.4.1\n      Disconnect-Peer-Answer    DPA       282\
    \           5.4.2\n      Re-Auth-Request           RAR       258           8.3.1\n\
    \      Re-Auth-Answer            RAA       258           8.3.2\n      Session-Termination-\
    \      STR       275           8.4.1\n         Request\n      Session-Termination-\
    \      STA       275           8.4.2\n         Answer\n"
- title: 3.2.  Command Code Format Specification
  contents:
  - "3.2.  Command Code Format Specification\n   Every Command Code defined MUST include\
    \ a corresponding Command Code\n   Format (CCF) specification, which is used to\
    \ define the AVPs that\n   MUST or MAY be present when sending the message.  The\
    \ following ABNF\n   specifies the CCF used in the definition:\n   command-def\
    \      = \"<\" command-name \">\" \"::=\" diameter-message\n   command-name  \
    \   = diameter-name\n   diameter-name    = ALPHA *(ALPHA / DIGIT / \"-\")\n  \
    \ diameter-message = header   *fixed  *required *optional\n   header         \
    \  = \"<Diameter-Header:\" command-id\n                         [r-bit] [p-bit]\
    \ [e-bit] [application-id]\">\"\n   application-id   = 1*DIGIT\n   command-id\
    \       = 1*DIGIT\n                      ; The Command Code assigned to the command.\n\
    \   r-bit            = \", REQ\"\n                      ; If present, the 'R'\
    \ bit in the Command\n                      ; Flags is set, indicating that the\
    \ message\n                      ; is a request as opposed to an answer.\n   p-bit\
    \            = \", PXY\"\n                      ; If present, the 'P' bit in the\
    \ Command\n                      ; Flags is set, indicating that the message\n\
    \                      ; is proxiable.\n   e-bit            = \", ERR\"\n    \
    \                  ; If present, the 'E' bit in the Command\n                \
    \      ; Flags is set, indicating that the answer\n                      ; message\
    \ contains a Result-Code AVP in\n                      ; the \"protocol error\"\
    \ class.\n   fixed            = [qual] \"<\" avp-spec \">\"\n                \
    \      ; Defines the fixed position of an AVP.\n   required         = [qual] \"\
    {\" avp-spec \"}\"\n                      ; The AVP MUST be present and can appear\n\
    \                      ; anywhere in the message.\n   optional         = [qual]\
    \ \"[\" avp-name \"]\"\n                      ; The avp-name in the 'optional'\
    \ rule cannot\n                      ; evaluate to any AVP Name that is included\n\
    \                      ; in a fixed or required rule.  The AVP can\n         \
    \             ; appear anywhere in the message.\n                      ;\n   \
    \                   ; NOTE:  \"[\" and \"]\" have a slightly different\n     \
    \                 ; meaning than in ABNF.  These braces\n                    \
    \  ; cannot be used to express optional fixed rules\n                      ; (such\
    \ as an optional ICV at the end).  To do\n                      ; this, the convention\
    \ is '0*1fixed'.\n   qual             = [min] \"*\" [max]\n                  \
    \    ; See ABNF conventions, RFC 5234, Section 4.\n                      ; The\
    \ absence of any qualifier depends on\n                      ; whether it precedes\
    \ a fixed, required, or\n                      ; optional rule.  If a fixed or\
    \ required rule has\n                      ; no qualifier, then exactly one such\
    \ AVP MUST\n                      ; be present.  If an optional rule has no\n\
    \                      ; qualifier, then 0 or 1 such AVP may be\n            \
    \          ; present.  If an optional rule has a qualifier,\n                \
    \      ; then the value of min MUST be 0 if present.\n   min              = 1*DIGIT\n\
    \                      ; The minimum number of times the element may\n       \
    \               ; be present.  If absent, the default value is 0\n           \
    \           ; for fixed and optional rules and 1 for\n                      ;\
    \ required rules.  The value MUST be at least 1\n                      ; for required\
    \ rules.\n   max              = 1*DIGIT\n                      ; The maximum number\
    \ of times the element may\n                      ; be present.  If absent, the\
    \ default value is\n                      ; infinity.  A value of 0 implies the\
    \ AVP MUST\n                      ; NOT be present.\n   avp-spec         = diameter-name\n\
    \                      ; The avp-spec has to be an AVP Name, defined\n       \
    \               ; in the base or extended Diameter\n                      ; specifications.\n\
    \   avp-name         = avp-spec / \"AVP\"\n                      ; The string\
    \ \"AVP\" stands for *any* arbitrary AVP\n                      ; Name, not otherwise\
    \ listed in that Command Code\n                      ; definition.  The inclusion\
    \ of this string\n                      ; is recommended for all CCFs to allow\
    \ for\n                      ; extensibility.\n   The following is a definition\
    \ of a fictitious Command Code:\n   Example-Request ::= < Diameter Header: 9999999,\
    \ REQ, PXY >\n                       { User-Name }\n                    1* { Origin-Host\
    \ }\n                     * [ AVP ]\n"
- title: 3.3.  Diameter Command Naming Conventions
  contents:
  - "3.3.  Diameter Command Naming Conventions\n   Diameter command names typically\
    \ includes one or more English words\n   followed by the verb \"Request\" or \"\
    Answer\".  Each English word is\n   delimited by a hyphen.  A three-letter acronym\
    \ for both the request\n   and answer is also normally provided.\n   An example\
    \ is a message set used to terminate a session.  The command\n   name is Session-Terminate-Request\
    \ and Session-Terminate-Answer, while\n   the acronyms are STR and STA, respectively.\n\
    \   Both the request and the answer for a given command share the same\n   Command\
    \ Code.  The request is identified by the R(equest) bit in the\n   Diameter header\
    \ set to one (1), to ask that a particular action be\n   performed, such as authorizing\
    \ a user or terminating a session.  Once\n   the receiver has completed the request,\
    \ it issues the corresponding\n   answer, which includes a result code that communicates\
    \ one of the\n   following:\n   o  The request was successful\n   o  The request\
    \ failed\n   o  An additional request has to be sent to provide information the\n\
    \      peer requires prior to returning a successful or failed answer.\n   o \
    \ The receiver could not process the request, but provides\n      information\
    \ about a Diameter peer that is able to satisfy the\n      request, known as redirect.\n\
    \   Additional information, encoded within AVPs, may also be included in\n   answer\
    \ messages.\n"
- title: 4.  Diameter AVPs
  contents:
  - "4.  Diameter AVPs\n   Diameter AVPs carry specific authentication, accounting,\n\
    \   authorization, and routing information as well as configuration\n   details\
    \ for the request and reply.\n   Each AVP of type OctetString MUST be padded to\
    \ align on a 32-bit\n   boundary, while other AVP types align naturally.  A number\
    \ of zero-\n   valued bytes are added to the end of the AVP Data field until a\
    \ word\n   boundary is reached.  The length of the padding is not reflected in\n\
    \   the AVP Length field.\n"
- title: 4.1.  AVP Header
  contents:
  - "4.1.  AVP Header\n   The fields in the AVP header MUST be sent in network byte\
    \ order.  The\n   format of the header is:\n       0                   1     \
    \              2                   3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6\
    \ 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                           AVP Code                            |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |V\
    \ M P r r r r r|                  AVP Length                   |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                        Vendor-ID (opt)                        |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \    Data ...\n      +-+-+-+-+-+-+-+-+\n   AVP Code\n      The AVP Code, combined\
    \ with the Vendor-Id field, identifies the\n      attribute uniquely.  AVP numbers\
    \ 1 through 255 are reserved for\n      reuse of RADIUS attributes, without setting\
    \ the Vendor-Id field.\n      AVP numbers 256 and above are used for Diameter,\
    \ which are\n      allocated by IANA (see Section 11.1.1).\n   AVP Flags\n   \
    \   The AVP Flags field informs the receiver how each attribute must\n      be\
    \ handled.  New Diameter applications SHOULD NOT define\n      additional AVP\
    \ Flag bits.  However, note that new Diameter\n      applications MAY define additional\
    \ bits within the AVP header, and\n      an unrecognized bit SHOULD be considered\
    \ an error.  The sender of\n      the AVP MUST set 'R' (reserved) bits to 0 and\
    \ the receiver SHOULD\n      ignore all 'R' (reserved) bits.  The 'P' bit has\
    \ been reserved for\n      future usage of end-to-end security.  At the time of\
    \ writing,\n      there are no end-to-end security mechanisms specified; therefore,\n\
    \      the 'P' bit SHOULD be set to 0.\n      The 'M' bit, known as the Mandatory\
    \ bit, indicates whether the\n      receiver of the AVP MUST parse and understand\
    \ the semantics of the\n      AVP including its content.  The receiving entity\
    \ MUST return an\n      appropriate error message if it receives an AVP that has\
    \ the M-bit\n      set but does not understand it.  An exception applies when\
    \ the AVP\n      is embedded within a Grouped AVP.  See Section 4.4 for details.\n\
    \      Diameter relay and redirect agents MUST NOT reject messages with\n    \
    \  unrecognized AVPs.\n      The 'M' bit MUST be set according to the rules defined\
    \ in the\n      application specification that introduces or reuses this AVP.\n\
    \      Within a given application, the M-bit setting for an AVP is\n      defined\
    \ either for all command types or for each command type.\n      AVPs with the\
    \ 'M' bit cleared are informational only; a receiver\n      that receives a message\
    \ with such an AVP that is not supported, or\n      whose value is not supported,\
    \ MAY simply ignore the AVP.\n      The 'V' bit, known as the Vendor-Specific\
    \ bit, indicates whether\n      the optional Vendor-ID field is present in the\
    \ AVP header.  When\n      set, the AVP Code belongs to the specific vendor code\
    \ address\n      space.\n   AVP Length\n      The AVP Length field is three octets,\
    \ and indicates the number of\n      octets in this AVP including the AVP Code\
    \ field, AVP Length field,\n      AVP Flags field, Vendor-ID field (if present),\
    \ and the AVP Data\n      field.  If a message is received with an invalid attribute\
    \ length,\n      the message MUST be rejected.\n"
- title: 4.1.1.  Optional Header Elements
  contents:
  - "4.1.1.  Optional Header Elements\n   The AVP header contains one optional field.\
    \  This field is only\n   present if the respective bit-flag is enabled.\n   Vendor-ID\n\
    \      The Vendor-ID field is present if the 'V' bit is set in the AVP\n     \
    \ Flags field.  The optional four-octet Vendor-ID field contains the\n      IANA-assigned\
    \ \"SMI Network Management Private Enterprise Codes\"\n      [ENTERPRISE] value,\
    \ encoded in network byte order.  Any vendors or\n      standardization organizations\
    \ that are also treated like vendors\n      in the IANA-managed \"SMI Network\
    \ Management Private Enterprise\n      Codes\" space wishing to implement a vendor-specific\
    \ Diameter AVP\n      MUST use their own Vendor-ID along with their privately\
    \ managed\n      AVP address space, guaranteeing that they will not collide with\n\
    \      any other vendor's vendor-specific AVP(s) or with future IETF\n      AVPs.\n\
    \      A Vendor-ID value of zero (0) corresponds to the IETF-adopted AVP\n   \
    \   values, as managed by IANA.  Since the absence of the Vendor-ID\n      field\
    \ implies that the AVP in question is not vendor specific,\n      implementations\
    \ MUST NOT use the value of zero (0) for the\n      Vendor-ID field.\n"
- title: 4.2.  Basic AVP Data Formats
  contents:
  - "4.2.  Basic AVP Data Formats\n   The Data field is zero or more octets and contains\
    \ information\n   specific to the Attribute.  The format and length of the Data\
    \ field\n   is determined by the AVP Code and AVP Length fields.  The format of\n\
    \   the Data field MUST be one of the following base data types or a data\n  \
    \ type derived from the base data types.  In the event that a new Basic\n   AVP\
    \ Data Format is needed, a new version of this RFC MUST be created.\n   OctetString\n\
    \      The data contains arbitrary data of variable length.  Unless\n      otherwise\
    \ noted, the AVP Length field MUST be set to at least 8\n      (12 if the 'V'\
    \ bit is enabled).  AVP values of this type that are\n      not a multiple of\
    \ 4 octets in length are followed by the necessary\n      padding so that the\
    \ next AVP (if any) will start on a 32-bit\n      boundary.\n   Integer32\n  \
    \    32-bit signed value, in network byte order.  The AVP Length field\n     \
    \ MUST be set to 12 (16 if the 'V' bit is enabled).\n   Integer64\n      64-bit\
    \ signed value, in network byte order.  The AVP Length field\n      MUST be set\
    \ to 16 (20 if the 'V' bit is enabled).\n   Unsigned32\n      32-bit unsigned\
    \ value, in network byte order.  The AVP Length\n      field MUST be set to 12\
    \ (16 if the 'V' bit is enabled).\n   Unsigned64\n      64-bit unsigned value,\
    \ in network byte order.  The AVP Length\n      field MUST be set to 16 (20 if\
    \ the 'V' bit is enabled).\n   Float32\n      This represents floating point values\
    \ of single precision as\n      described by [FLOATPOINT].  The 32-bit value is\
    \ transmitted in\n      network byte order.  The AVP Length field MUST be set\
    \ to 12 (16 if\n      the 'V' bit is enabled).\n   Float64\n      This represents\
    \ floating point values of double precision as\n      described by [FLOATPOINT].\
    \  The 64-bit value is transmitted in\n      network byte order.  The AVP Length\
    \ field MUST be set to 16 (20 if\n      the 'V' bit is enabled).\n   Grouped\n\
    \      The Data field is specified as a sequence of AVPs.  These AVPs are\n  \
    \    concatenated -- including their headers and padding -- in the\n      order\
    \ in which they are specified and the result encapsulated in\n      the Data field.\
    \  The AVP Length field is set to 8 (12 if the 'V'\n      bit is enabled) plus\
    \ the total length of all included AVPs,\n      including their headers and padding.\
    \  Thus, the AVP Length field\n      of an AVP of type Grouped is always a multiple\
    \ of 4.\n"
- title: 4.3.  Derived AVP Data Formats
  contents:
  - "4.3.  Derived AVP Data Formats\n   In addition to using the Basic AVP Data Formats,\
    \ applications may\n   define data formats derived from the Basic AVP Data Formats.\
    \  An\n   application that defines new Derived AVP Data Formats MUST include\n\
    \   them in a section titled \"Derived AVP Data Formats\", using the same\n  \
    \ format as the definitions below.  Each new definition MUST be either\n   defined\
    \ or listed with a reference to the RFC that defines the\n   format.\n"
- title: 4.3.1.  Common Derived AVP Data Formats
  contents:
  - "4.3.1.  Common Derived AVP Data Formats\n   The following are commonly used Derived\
    \ AVP Data Formats.\n   Address\n      The Address format is derived from the\
    \ OctetString Basic AVP\n      Format.  It is a discriminated union representing,\
    \ for example, a\n      32-bit (IPv4) [RFC0791] or 128-bit (IPv6) [RFC4291] address,\
    \ most\n      significant octet first.  The first two octets of the Address AVP\n\
    \      represent the AddressType, which contains an Address Family,\n      defined\
    \ in [IANAADFAM].  The AddressType is used to discriminate\n      the content\
    \ and format of the remaining octets.\n   Time\n      The Time format is derived\
    \ from the OctetString Basic AVP Format.\n      The string MUST contain four octets,\
    \ in the same format as the\n      first four bytes are in the NTP timestamp format.\
    \  The NTP\n      timestamp format is defined in Section 3 of [RFC5905].\n   \
    \   This represents the number of seconds since 0h on 1 January 1900\n      with\
    \ respect to the Coordinated Universal Time (UTC).\n      On 6h 28m 16s UTC, 7\
    \ February 2036, the time value will overflow.\n      Simple Network Time Protocol\
    \ (SNTP) [RFC5905] describes a\n      procedure to extend the time to 2104.  This\
    \ procedure MUST be\n      supported by all Diameter nodes.\n   UTF8String\n \
    \     The UTF8String format is derived from the OctetString Basic AVP\n      Format.\
    \  This is a human-readable string represented using the\n      ISO/IEC IS 10646-1\
    \ character set, encoded as an OctetString using\n      the UTF-8 transformation\
    \ format [RFC3629].\n      Since additional code points are added by amendments\
    \ to the 10646\n      standard from time to time, implementations MUST be prepared\
    \ to\n      encounter any code point from 0x00000001 to 0x7fffffff.  Byte\n  \
    \    sequences that do not correspond to the valid encoding of a code\n      point\
    \ into UTF-8 charset or are outside this range are prohibited.\n      The use\
    \ of control codes SHOULD be avoided.  When it is necessary\n      to represent\
    \ a new line, the control code sequence CR LF SHOULD be\n      used.\n      The\
    \ use of leading or trailing white space SHOULD be avoided.\n      For code points\
    \ not directly supported by user interface hardware\n      or software, an alternative\
    \ means of entry and display, such as\n      hexadecimal, MAY be provided.\n \
    \     For information encoded in 7-bit US-ASCII, the UTF-8 charset is\n      identical\
    \ to the US-ASCII charset.\n      UTF-8 may require multiple bytes to represent\
    \ a single character /\n      code point; thus, the length of a UTF8String in\
    \ octets may be\n      different from the number of characters encoded.\n    \
    \  Note that the AVP Length field of an UTF8String is measured in\n      octets\
    \ not characters.\n   DiameterIdentity\n      The DiameterIdentity format is derived\
    \ from the OctetString Basic\n      AVP Format.\n                        DiameterIdentity\
    \  = FQDN/Realm\n   The DiameterIdentity value is used to uniquely identify either:\n\
    \      *  A Diameter node for purposes of duplicate connection and\n         routing\
    \ loop detection.\n      *  A Realm to determine whether messages can be satisfied\
    \ locally\n         or whether they must be routed or redirected.\n      When\
    \ a DiameterIdentity value is used to identify a Diameter node,\n      the contents\
    \ of the string MUST be the Fully Qualified Domain Name\n      (FQDN) of the Diameter\
    \ node.  If multiple Diameter nodes run on\n      the same host, each Diameter\
    \ node MUST be assigned a unique\n      DiameterIdentity.  If a Diameter node\
    \ can be identified by several\n      FQDNs, a single FQDN should be picked at\
    \ startup and used as the\n      only DiameterIdentity for that node, whatever\
    \ the connection on\n      which it is sent.  In this document, note that DiameterIdentity\
    \ is\n      in ASCII form in order to be compatible with existing DNS\n      infrastructure.\
    \  See Appendix D for interactions between the\n      Diameter protocol and Internationalized\
    \ Domain Names (IDNs).\n   DiameterURI\n      The DiameterURI MUST follow the\
    \ Uniform Resource Identifiers (RFC\n      3986) syntax [RFC3986] rules specified\
    \ below:\n      \"aaa://\" FQDN [ port ] [ transport ] [ protocol ]\n        \
    \              ; No transport security\n      \"aaas://\" FQDN [ port ] [ transport\
    \ ] [ protocol ]\n                      ; Transport security used\n      FQDN\
    \               = < Fully Qualified Domain Name >\n      port               =\
    \ \":\" 1*DIGIT\n                      ; One of the ports used to listen for\n\
    \                      ; incoming connections.\n                      ; If absent,\
    \ the default Diameter port\n                      ; (3868) is assumed if no transport\n\
    \                      ; security is used and port 5658 when\n               \
    \       ; transport security (TLS/TCP and DTLS/SCTP)\n                      ;\
    \ is used.\n      transport          = \";transport=\" transport-protocol\n  \
    \                    ; One of the transports used to listen\n                \
    \      ; for incoming connections.  If absent,\n                      ; the default\
    \ protocol is assumed to be TCP.\n                      ; UDP MUST NOT be used\
    \ when the aaa-protocol\n                      ; field is set to diameter.\n \
    \     transport-protocol = ( \"tcp\" / \"sctp\" / \"udp\" )\n      protocol  \
    \         = \";protocol=\" aaa-protocol\n                      ; If absent, the\
    \ default AAA protocol\n                      ; is Diameter.\n      aaa-protocol\
    \       = ( \"diameter\" / \"radius\" / \"tacacs+\" )\n      The following are\
    \ examples of valid Diameter host identities:\n      aaa://host.example.com;transport=tcp\n\
    \      aaa://host.example.com:6666;transport=tcp\n      aaa://host.example.com;protocol=diameter\n\
    \      aaa://host.example.com:6666;protocol=diameter\n      aaa://host.example.com:6666;transport=tcp;protocol=diameter\n\
    \      aaa://host.example.com:1813;transport=udp;protocol=radius\n   Enumerated\n\
    \      The Enumerated format is derived from the Integer32 Basic AVP\n      Format.\
    \  The definition contains a list of valid values and their\n      interpretation\
    \ and is described in the Diameter application\n      introducing the AVP.\n \
    \  IPFilterRule\n      The IPFilterRule format is derived from the OctetString\
    \ Basic AVP\n      Format and uses the ASCII charset.  The rule syntax is a modified\n\
    \      subset of ipfw(8) from FreeBSD.  Packets may be filtered based on\n   \
    \   the following information that is associated with it:\n            Direction\
    \                          (in or out)\n            Source and destination IP\
    \ address  (possibly masked)\n            Protocol\n            Source and destination\
    \ port        (lists or ranges)\n            TCP flags\n            IP fragment\
    \ flag\n            IP options\n            ICMP types\n   Rules for the appropriate\
    \ direction are evaluated in order, with the\n   first matched rule terminating\
    \ the evaluation.  Each packet is\n   evaluated once.  If no rule matches, the\
    \ packet is dropped if the\n   last rule evaluated was a permit, and passed if\
    \ the last rule was a\n   deny.\n   IPFilterRule filters MUST follow the format:\n\
    \         action dir proto from src to dst [options]\n         action       permit\
    \ - Allow packets that match the rule.\n                      deny   - Drop packets\
    \ that match the rule.\n         dir          \"in\" is from the terminal, \"\
    out\" is to the\n                      terminal.\n         proto        An IP\
    \ protocol specified by number.  The \"ip\"\n                      keyword means\
    \ any protocol will match.\n         src and dst  <address/mask> [ports]\n   \
    \                   The <address/mask> may be specified as:\n                \
    \      ipno       An IPv4 or IPv6 number in dotted-\n                        \
    \         quad or canonical IPv6 form.  Only\n                               \
    \  this exact IP number will match the\n                                 rule.\n\
    \                      ipno/bits  An IP number as above with a mask\n        \
    \                         width of the form 192.0.2.10/24.  In\n             \
    \                    this case, all IP numbers from\n                        \
    \         192.0.2.0 to 192.0.2.255 will match.\n                             \
    \    The bit width MUST be valid for the\n                                 IP\
    \ version, and the IP number MUST\n                                 NOT have bits\
    \ set beyond the mask.\n                                 For a match to occur,\
    \ the same IP\n                                 version must be present in the\n\
    \                                 packet that was used in describing\n       \
    \                          the IP address.  To test for a\n                  \
    \               particular IP version, the bits part\n                       \
    \          can be set to zero.  The keyword\n                                \
    \ \"any\" is 0.0.0.0/0 or the IPv6\n                                 equivalent.\
    \  The keyword \"assigned\"\n                                 is the address or\
    \ set of addresses\n                                 assigned to the terminal.\
    \  For IPv4,\n                                 a typical first rule is often \"\
    deny\n                                 in ip! assigned\".\n                  \
    \    The sense of the match can be inverted by\n                      preceding\
    \ an address with the not modifier (!),\n                      causing all other\
    \ addresses to be matched\n                      instead.  This does not affect\
    \ the selection of\n                      port numbers.\n                    \
    \  With the TCP, UDP, and SCTP protocols, optional\n                      ports\
    \ may be specified as:\n                         {port/port-port}[,ports[,...]]\n\
    \                       The '-' notation specifies a range of ports\n        \
    \              (including boundaries).\n                      Fragmented packets\
    \ that have a non-zero offset\n                      (i.e., not the first fragment)\
    \ will never match\n                      a rule that has one or more port\n \
    \                     specifications.  See the frag option for\n             \
    \         details on matching fragmented packets.\n         options:\n       \
    \     frag    Match if the packet is a fragment and this is not\n            \
    \        the first fragment of the datagram.  frag may not\n                 \
    \   be used in conjunction with either tcpflags or\n                    TCP/UDP\
    \ port specifications.\n            ipoptions spec\n                    Match\
    \ if the IP header contains the comma-separated\n                    list of options\
    \ specified in spec.  The\n                    supported IP options are:\n   \
    \                 ssrr (strict source route), lsrr (loose source\n           \
    \         route), rr (record packet route), and ts\n                    (timestamp).\
    \  The absence of a particular option\n                    may be denoted with\
    \ a '!'.\n            tcpoptions spec\n                    Match if the TCP header\
    \ contains the comma-separated\n                    list of options specified\
    \ in spec.  The\n                    supported TCP options are:\n            \
    \        mss (maximum segment size), window (tcp window\n                    advertisement),\
    \ sack (selective ack), ts (rfc1323\n                    timestamp), and cc (rfc1644\
    \ t/tcp connection\n                    count).  The absence of a particular option\
    \ may\n                    be denoted with a '!'.\n            established\n \
    \                   TCP packets only.  Match packets that have the RST\n     \
    \               or ACK bits set.\n            setup   TCP packets only.  Match\
    \ packets that have the SYN\n                    bit set but no ACK bit.\n   \
    \         tcpflags spec\n                    TCP packets only.  Match if the TCP\
    \ header\n                    contains the comma-separated list of flags\n   \
    \                 specified in spec.  The supported TCP flags are:\n         \
    \           fin, syn, rst, psh, ack, and urg.  The absence of a\n            \
    \        particular flag may be denoted with a '!'.  A rule\n                \
    \    that contains a tcpflags specification can never\n                    match\
    \ a fragmented packet that has a non-zero\n                    offset.  See the\
    \ frag option for details on\n                    matching fragmented packets.\n\
    \            icmptypes types\n                    ICMP packets only.  Match if\
    \ the ICMP type is in\n                    the list types.  The list may be specified\
    \ as any\n                    combination of ranges or individual types\n    \
    \                separated by commas.  Both the numeric values and\n         \
    \           the symbolic values listed below can be used.  The\n             \
    \       supported ICMP types are:\n                    echo reply (0), destination\
    \ unreachable (3),\n                    source quench (4), redirect (5), echo\
    \ request\n                    (8), router advertisement (9), router\n       \
    \             solicitation (10), time-to-live exceeded (11), IP\n            \
    \        header bad (12), timestamp request (13),\n                    timestamp\
    \ reply (14), information request (15),\n                    information reply\
    \ (16), address mask request (17),\n                    and address mask reply\
    \ (18).\n   There is one kind of packet that the access device MUST always\n \
    \  discard, that is an IP fragment with a fragment offset of one.  This\n   is\
    \ a valid packet, but it only has one use, to try to circumvent\n   firewalls.\n\
    \   An access device that is unable to interpret or apply a deny rule\n   MUST\
    \ terminate the session.  An access device that is unable to\n   interpret or\
    \ apply a permit rule MAY apply a more restrictive rule.\n   An access device\
    \ MAY apply deny rules of its own before the supplied\n   rules, for example to\
    \ protect the access device owner's\n   infrastructure.\n"
- title: 4.4.   Grouped AVP Values
  contents:
  - "4.4.   Grouped AVP Values\n   The Diameter protocol allows AVP values of type\
    \ 'Grouped'.  This\n   implies that the Data field is actually a sequence of AVPs.\
    \  It is\n   possible to include an AVP with a Grouped type within a Grouped type,\n\
    \   that is, to nest them.  AVPs within an AVP of type Grouped have the\n   same\
    \ padding requirements as non-Grouped AVPs, as defined in\n   Section 4.4.\n \
    \  The AVP Code numbering space of all AVPs included in a Grouped AVP is\n   the\
    \ same as for non-Grouped AVPs.  Receivers of a Grouped AVP that\n   does not\
    \ have the 'M' (mandatory) bit set and one or more of the\n   encapsulated AVPs\
    \ within the group has the 'M' (mandatory) bit set\n   MAY simply be ignored if\
    \ the Grouped AVP itself is unrecognized.  The\n   rule applies even if the encapsulated\
    \ AVP with its 'M' (mandatory)\n   bit set is further encapsulated within other\
    \ sub-groups, i.e., other\n   Grouped AVPs embedded within the Grouped AVP.\n\
    \   Every Grouped AVP definition MUST include a corresponding grammar,\n   using\
    \ ABNF [RFC5234] (with modifications), as defined below.\n         grouped-avp-def\
    \  = \"<\" name \">\" \"::=\" avp\n         name-fmt         = ALPHA *(ALPHA /\
    \ DIGIT / \"-\")\n         name             = name-fmt\n                     \
    \       ; The name has to be the name of an AVP,\n                           \
    \ ; defined in the base or extended Diameter\n                            ; specifications.\n\
    \         avp              = header *fixed *required *optional\n         header\
    \           = \"<\" \"AVP-Header:\" avpcode [vendor] \">\"\n         avpcode \
    \         = 1*DIGIT\n                            ; The AVP Code assigned to the\
    \ Grouped AVP.\n         vendor           = 1*DIGIT\n                        \
    \    ; The Vendor-ID assigned to the Grouped AVP.\n                          \
    \  ; If absent, the default value of zero is\n                            ; used.\n"
- title: 4.4.1.  Example AVP with a Grouped Data Type
  contents:
  - "4.4.1.  Example AVP with a Grouped Data Type\n   The Example-AVP (AVP Code 999999)\
    \ is of type Grouped and is used to\n   clarify how Grouped AVP values work. \
    \ The Grouped Data field has the\n   following CCF grammar:\n         Example-AVP\
    \  ::= < AVP Header: 999999 >\n                          { Origin-Host }\n   \
    \                     1*{ Session-Id }\n                         *[ AVP ]\n  \
    \    An Example-AVP with Grouped Data follows.\n      The Origin-Host AVP (Section\
    \ 6.3) is required.  In this case:\n         Origin-Host = \"example.com\".\n\
    \      One or more Session-Ids must follow.  Here there are two:\n         Session-Id\
    \ =\n           \"grump.example.com:33041;23432;893;0AF3B81\"\n         Session-Id\
    \ =\n           \"grump.example.com:33054;23561;2358;0AF3B82\"\n      optional\
    \ AVPs included are\n         Recovery-Policy = <binary>\n            2163bc1d0ad82371f6bc09484133c3f09ad74a0dd5346d54195a7cf0b35\n\
    \            2cabc881839a4fdcfbc1769e2677a4c1fb499284c5f70b48f58503a45c5\n   \
    \         c2d6943f82d5930f2b7c1da640f476f0e9c9572a50db8ea6e51e1c2c7bd\n      \
    \      f8bb43dc995144b8dbe297ac739493946803e1cee3e15d9b765008a1b2a\n         \
    \   cf4ac777c80041d72c01e691cf751dbf86e85f509f3988e5875dc905119\n            26841f00f0e29a6d1ddc1a842289d440268681e052b30fb638045f7779c\n\
    \            1d873c784f054f688f5001559ecff64865ef975f3e60d2fd7966b8c7f92\n   \
    \      Futuristic-Acct-Record = <binary>\n            fe19da5802acd98b07a5b86cb4d5d03f0314ab9ef1ad0b67111ff3b90a0\n\
    \            57fe29620bf3585fd2dd9fcc38ce62f6cc208c6163c008f4258d1bc88b8\n   \
    \         17694a74ccad3ec69269461b14b2e7a4c111fb239e33714da207983f58c\n      \
    \      41d018d56fe938f3cbf089aac12a912a2f0d1923a9390e5f789cb2e5067\n         \
    \   d3427475e49968f841\n   The data for the optional AVPs is represented in hexadecimal\
    \ form\n   since the format of these AVPs is not known at the time of definition\n\
    \   of the Example-AVP group nor (likely) at the time when the example\n   instance\
    \ of this AVP is interpreted -- except by Diameter\n   implementations that support\
    \ the same set of AVPs.  The encoding\n   example illustrates how padding is used\
    \ and how length fields are\n   calculated.  Also, note that AVPs may be present\
    \ in the Grouped AVP\n   value that the receiver cannot interpret (here, the Recover-Policy\n\
    \   and Futuristic-Acct-Record AVPs).  The length of the Example-AVP is\n   the\
    \ sum of all the length of the member AVPs, including their\n   padding, plus\
    \ the Example-AVP header size.\n   This AVP would be encoded as follows:\n   \
    \      0       1       2       3       4       5       6       7\n      +-------+-------+-------+-------+-------+-------+-------+-------+\n\
    \   0  |     Example AVP Header (AVP Code = 999999), Length = 496      |\n   \
    \   +-------+-------+-------+-------+-------+-------+-------+-------+\n   8  |\
    \     Origin-Host AVP Header (AVP Code = 264), Length = 19      |\n      +-------+-------+-------+-------+-------+-------+-------+-------+\n\
    \   16 |  'e'  |  'x'  |  'a'  |  'm'  |  'p'  |  'l'  |  'e'  |  '.'  |\n   \
    \   +-------+-------+-------+-------+-------+-------+-------+-------+\n   24 |\
    \  'c'  |  'o'  |  'm'  |Padding|     Session-Id AVP Header     |\n      +-------+-------+-------+-------+-------+-------+-------+-------+\n\
    \   32 | (AVP Code = 263), Length = 49 |  'g'  |  'r'  |  'u'  |  'm'  |\n   \
    \   +-------+-------+-------+-------+-------+-------+-------+-------+\n      \
    \                              . . .\n      +-------+-------+-------+-------+-------+-------+-------+-------+\n\
    \   72 |  'F'  |  '3'  |  'B'  |  '8'  |  '1'  |Padding|Padding|Padding|\n   \
    \   +-------+-------+-------+-------+-------+-------+-------+-------+\n   80 |\
    \     Session-Id AVP Header (AVP Code = 263), Length = 50       |\n      +-------+-------+-------+-------+-------+-------+-------+-------+\n\
    \   88 |  'g'  |  'r'  |  'u'  |  'm'  |  'p'  |  '.'  |  'e'  |  'x'  |\n   \
    \   +-------+-------+-------+-------+-------+-------+-------+-------+\n      \
    \                             . . .\n      +-------+-------+-------+-------+-------+-------+-------+-------+\n\
    \   120|  '5'  |  '8'  |  ';'  |  '0'  |  'A'  |  'F'  |  '3'  |  'B'  |\n   \
    \   +-------+-------+-------+-------+-------+-------+-------+-------+\n   128|\
    \  '8'  |  '2'  |Padding|Padding|  Recovery-Policy Header (AVP  |\n      +-------+-------+-------+-------+-------+-------+-------+-------+\n\
    \   136|  Code = 8341), Length = 223   | 0x21  | 0x63  | 0xbc  | 0x1d  |\n   \
    \   +-------+-------+-------+-------+-------+-------+-------+-------+\n   144|\
    \  0x0a | 0xd8  | 0x23  | 0x71  | 0xf6  | 0xbc  | 0x09  | 0x48  |\n      +-------+-------+-------+-------+-------+-------+-------+-------+\n\
    \                                    . . .\n      +-------+-------+-------+-------+-------+-------+-------+-------+\n\
    \   352|  0x8c | 0x7f  | 0x92  |Padding| Futuristic-Acct-Record Header |\n   \
    \   +-------+-------+-------+-------+-------+-------+-------+-------+\n   328|(AVP\
    \ Code = 15930),Length = 137| 0xfe  | 0x19  | 0xda  | 0x58  |\n      +-------+-------+-------+-------+-------+-------+-------+-------+\n\
    \   336|  0x02 | 0xac  | 0xd9  | 0x8b  | 0x07  | 0xa5  | 0xb8  | 0xc6  |\n   \
    \   +-------+-------+-------+-------+-------+-------+-------+-------+\n      \
    \                              . . .\n      +-------+-------+-------+-------+-------+-------+-------+-------+\n\
    \   488|  0xe4 | 0x99  | 0x68  | 0xf8  | 0x41  |Padding|Padding|Padding|\n   \
    \   +-------+-------+-------+-------+-------+-------+-------+-------+\n"
- title: 4.5.  Diameter Base Protocol AVPs
  contents:
  - "4.5.  Diameter Base Protocol AVPs\n   The following table describes the Diameter\
    \ AVPs defined in the base\n   protocol, their AVP Code values, types, and possible\
    \ flag values.\n   Due to space constraints, the short form DiamIdent is used\
    \ to\n   represent DiameterIdentity.\n                                       \
    \     +----------+\n                                            | AVP Flag |\n\
    \                                            |  rules   |\n                  \
    \                          |----+-----|\n                   AVP  Section     \
    \        |    |MUST |\n   Attribute Name  Code Defined  Data Type  |MUST| NOT\
    \ |\n   -----------------------------------------|----+-----|\n   Acct-      \
    \       85  9.8.2   Unsigned32 | M  |  V  |\n     Interim-Interval           \
    \            |    |     |\n   Accounting-      483  9.8.7   Enumerated | M  |\
    \  V  |\n     Realtime-Required                      |    |     |\n   Acct-  \
    \          50   9.8.5   UTF8String | M  |  V  |\n     Multi-Session-Id       \
    \                |    |     |\n   Accounting-      485  9.8.3   Unsigned32 | M\
    \  |  V  |\n     Record-Number                          |    |     |\n   Accounting-\
    \      480  9.8.1   Enumerated | M  |  V  |\n     Record-Type                \
    \            |    |     |\n   Acct-             44  9.8.4   OctetString| M  |\
    \  V  |\n    Session-Id                              |    |     |\n   Accounting-\
    \      287  9.8.6   Unsigned64 | M  |  V  |\n     Sub-Session-Id             \
    \            |    |     |\n   Acct-            259  6.9     Unsigned32 | M  |\
    \  V  |\n     Application-Id                         |    |     |\n   Auth-  \
    \          258  6.8     Unsigned32 | M  |  V  |\n     Application-Id         \
    \                |    |     |\n   Auth-Request-    274  8.7     Enumerated | M\
    \  |  V  |\n      Type                                  |    |     |\n   Authorization-\
    \   291  8.9     Unsigned32 | M  |  V  |\n     Lifetime                      \
    \         |    |     |\n   Auth-Grace-      276  8.10    Unsigned32 | M  |  V\
    \  |\n     Period                                 |    |     |\n   Auth-Session-\
    \    277  8.11    Enumerated | M  |  V  |\n     State                        \
    \          |    |     |\n   Re-Auth-Request- 285  8.12    Enumerated | M  |  V\
    \  |\n     Type                                   |    |     |\n   Class     \
    \        25  8.20    OctetString| M  |  V  |\n   Destination-Host 293  6.5   \
    \  DiamIdent  | M  |  V  |\n   Destination-     283  6.6     DiamIdent  | M  |\
    \  V  |\n     Realm                                  |    |     |\n   Disconnect-Cause\
    \ 273  5.4.3   Enumerated | M  |  V  |\n   Error-Message    281  7.3     UTF8String\
    \ |    | V,M |\n   Error-Reporting- 294  7.4     DiamIdent  |    | V,M |\n   \
    \  Host                                   |    |     |\n   Event-Timestamp   55\
    \  8.21    Time       | M  |  V  |\n   Experimental-    297  7.6     Grouped \
    \   | M  |  V  |\n      Result                                |    |     |\n \
    \  -----------------------------------------|----+-----|\n                   \
    \                         +----------+\n                                     \
    \       | AVP Flag |\n                                            |  rules   |\n\
    \                                            |----+-----|\n                  \
    \ AVP  Section             |    |MUST |\n   Attribute Name  Code Defined  Data\
    \ Type  |MUST| NOT |\n   -----------------------------------------|----+-----|\n\
    \   Experimental-    298  7.7     Unsigned32 | M  |  V  |\n      Result-Code \
    \                          |    |     |\n   Failed-AVP       279  7.5     Grouped\
    \    | M  |  V  |\n   Firmware-        267  5.3.4   Unsigned32 |    | V,M |\n\
    \     Revision                               |    |     |\n   Host-IP-Address\
    \  257  5.3.5   Address    | M  |  V  |\n   Inband-Security                  \
    \        | M  |  V  |\n      -Id           299  6.10    Unsigned32 |    |    \
    \ |\n   Multi-Round-     272  8.19    Unsigned32 | M  |  V  |\n     Time-Out \
    \                              |    |     |\n   Origin-Host      264  6.3    \
    \ DiamIdent  | M  |  V  |\n   Origin-Realm     296  6.4     DiamIdent  | M  |\
    \  V  |\n   Origin-State-Id  278  8.16    Unsigned32 | M  |  V  |\n   Product-Name\
    \     269  5.3.7   UTF8String |    | V,M |\n   Proxy-Host       280  6.7.3   DiamIdent\
    \  | M  |  V  |\n   Proxy-Info       284  6.7.2   Grouped    | M  |  V  |\n  \
    \ Proxy-State       33  6.7.4   OctetString| M  |  V  |\n   Redirect-Host    292\
    \  6.12    DiamURI    | M  |  V  |\n   Redirect-Host-   261  6.13    Enumerated\
    \ | M  |  V  |\n      Usage                                 |    |     |\n   Redirect-Max-\
    \    262  6.14    Unsigned32 | M  |  V  |\n      Cache-Time                  \
    \          |    |     |\n   Result-Code      268  7.1     Unsigned32 | M  |  V\
    \  |\n   Route-Record     282  6.7.1   DiamIdent  | M  |  V  |\n   Session-Id\
    \       263  8.8     UTF8String | M  |  V  |\n   Session-Timeout   27  8.13  \
    \  Unsigned32 | M  |  V  |\n   Session-Binding  270  8.17    Unsigned32 | M  |\
    \  V  |\n   Session-Server-  271  8.18    Enumerated | M  |  V  |\n     Failover\
    \                               |    |     |\n   Supported-       265  5.3.6 \
    \  Unsigned32 | M  |  V  |\n     Vendor-Id                              |    |\
    \     |\n   Termination-     295  8.15    Enumerated | M  |  V  |\n      Cause\
    \                                 |    |     |\n   User-Name          1  8.14\
    \    UTF8String | M  |  V  |\n   Vendor-Id        266  5.3.3   Unsigned32 | M\
    \  |  V  |\n   Vendor-Specific- 260  6.11    Grouped    | M  |  V  |\n      Application-Id\
    \                        |    |     |\n   -----------------------------------------|----+-----|\n"
- title: 5.  Diameter Peers
  contents:
  - "5.  Diameter Peers\n   This section describes how Diameter nodes establish connections\
    \ and\n   communicate with peers.\n"
- title: 5.1.  Peer Connections
  contents:
  - "5.1.  Peer Connections\n   Connections between diameter peers are established\
    \ using their valid\n   DiameterIdentity.  A Diameter node initiating a connection\
    \ to a peer\n   MUST know the peer's DiameterIdentity.  Methods for discovering\
    \ a\n   Diameter peer can be found in Section 5.2.\n   Although a Diameter node\
    \ may have many possible peers with which it\n   is able to communicate, it may\
    \ not be economical to have an\n   established connection to all of them.  At\
    \ a minimum, a Diameter node\n   SHOULD have an established connection with two\
    \ peers per realm, known\n   as the primary and secondary peers.  Of course, a\
    \ node MAY have\n   additional connections, if it is deemed necessary.  Typically,\
    \ all\n   messages for a realm are sent to the primary peer but, in the event\n\
    \   that failover procedures are invoked, any pending requests are sent\n   to\
    \ the secondary peer.  However, implementations are free to load\n   balance requests\
    \ between a set of peers.\n   Note that a given peer MAY act as a primary for\
    \ a given realm while\n   acting as a secondary for another realm.\n   When a\
    \ peer is deemed suspect, which could occur for various reasons,\n   including\
    \ not receiving a DWA within an allotted time frame, no new\n   requests should\
    \ be forwarded to the peer, but failover procedures are\n   invoked.  When an\
    \ active peer is moved to this mode, additional\n   connections SHOULD be established\
    \ to ensure that the necessary number\n   of active connections exists.\n   There\
    \ are two ways that a peer is removed from the suspect peer list:\n   1.  The\
    \ peer is no longer reachable, causing the transport connection\n       to be\
    \ shut down.  The peer is moved to the closed state.\n   2.  Three watchdog messages\
    \ are exchanged with accepted round-trip\n       times, and the connection to\
    \ the peer is considered stabilized.\n   In the event the peer being removed is\
    \ either the primary or\n   secondary, an alternate peer SHOULD replace the deleted\
    \ peer and\n   assume the role of either primary or secondary.\n"
- title: 5.2.  Diameter Peer Discovery
  contents:
  - "5.2.  Diameter Peer Discovery\n   Allowing for dynamic Diameter agent discovery\
    \ makes possible simpler\n   and more robust deployment of Diameter services.\
    \  In order to promote\n   interoperable implementations of Diameter peer discovery,\
    \ the\n   following mechanisms (manual configuration and DNS) are described.\n\
    \   These are based on existing IETF standards.  Both mechanisms MUST be\n   supported\
    \ by all Diameter implementations; either MAY be used.\n   There are two cases\
    \ where Diameter peer discovery may be performed.\n   The first is when a Diameter\
    \ client needs to discover a first-hop\n   Diameter agent.  The second case is\
    \ when a Diameter agent needs to\n   discover another agent for further handling\
    \ of a Diameter operation.\n   In both cases, the following 'search order' is\
    \ recommended:\n   1.  The Diameter implementation consults its list of statically\n\
    \       (manually) configured Diameter agent locations.  These will be\n     \
    \  used if they exist and respond.\n   2.  The Diameter implementation performs\
    \ a NAPTR query for a server\n       in a particular realm.  The Diameter implementation\
    \ has to know,\n       in advance, in which realm to look for a Diameter agent.\
    \  This\n       could be deduced, for example, from the 'realm' in an NAI on\n\
    \       which a Diameter implementation needed to perform a Diameter\n       operation.\n\
    \       The NAPTR usage in Diameter follows the S-NAPTR DDDS application\n   \
    \    [RFC3958] in which the SERVICE field includes tags for the\n       desired\
    \ application and supported application protocol.  The\n       application service\
    \ tag for a Diameter application is 'aaa' and\n       the supported application\
    \ protocol tags are 'diameter.tcp',\n       'diameter.sctp', 'diameter.dtls',\
    \ or 'diameter.tls.tcp'\n       [RFC6408].\n       The client can follow the resolution\
    \ process defined by the\n       S-NAPTR DDDS [RFC3958] application to find a\
    \ matching SRV, A, or\n       AAAA record of a suitable peer.  The domain suffixes\
    \ in the NAPTR\n       replacement field SHOULD match the domain of the original\
    \ query.\n       An example can be found in Appendix B.\n   3.  If no NAPTR records\
    \ are found, the requester directly queries for\n       one of the following SRV\
    \ records: for Diameter over TCP, use\n       \"_diameter._tcp.realm\"; for Diameter\
    \ over TLS, use\n       \"_diameters._tcp.realm\"; for Diameter over SCTP, use\n\
    \       \"_diameter._sctp.realm\"; for Diameter over DTLS, use\n       \"_diameters._sctp.realm\"\
    .  If SRV records are found, then the\n       requester can perform address record\
    \ query (A RR's and/or AAAA\n       RR's) for the target hostname specified in\
    \ the SRV records\n       following the rules given in [RFC2782].  If no SRV records\
    \ are\n       found, the requester gives up.\n   If the server is using a site\
    \ certificate, the domain name in the\n   NAPTR query and the domain name in the\
    \ replacement field MUST both be\n   valid based on the site certificate handed\
    \ out by the server in the\n   TLS/TCP and DTLS/SCTP or Internet Key Exchange\
    \ Protocol (IKE)\n   exchange.  Similarly, the domain name in the SRV query and\
    \ the domain\n   name in the target in the SRV record MUST both be valid based\
    \ on the\n   same site certificate.  Otherwise, an attacker could modify the DNS\n\
    \   records to contain replacement values in a different domain, and the\n   client\
    \ could not validate whether this was the desired behavior or\n   the result of\
    \ an attack.\n   Also, the Diameter peer MUST check to make sure that the discovered\n\
    \   peers are authorized to act in its role.  Authentication via IKE or\n   TLS/TCP\
    \ and DTLS/SCTP, or validation of DNS RRs via DNSSEC is not\n   sufficient to\
    \ conclude this.  For example, a web server may have\n   obtained a valid TLS/TCP\
    \ and DTLS/SCTP certificate, and secured RRs\n   may be included in the DNS, but\
    \ this does not imply that it is\n   authorized to act as a Diameter server.\n\
    \   Authorization can be achieved, for example, by the configuration of a\n  \
    \ Diameter server Certification Authority (CA).  The server CA issues a\n   certificate\
    \ to the Diameter server, which includes an Object\n   Identifier (OID) to indicate\
    \ the subject is a Diameter server in the\n   Extended Key Usage extension [RFC5280].\
    \  This certificate is then\n   used during TLS/TCP, DTLS/SCTP, or IKE security\
    \ negotiation.\n   However, note that, at the time of writing, no Diameter server\n\
    \   Certification Authorities exist.\n   A dynamically discovered peer causes\
    \ an entry in the peer table (see\n   Section 2.6) to be created.  Note that entries\
    \ created via DNS MUST\n   expire (or be refreshed) within the DNS Time to Live\
    \ (TTL).  If a\n   peer is discovered outside of the local realm, a routing table\
    \ entry\n   (see Section 2.7) for the peer's realm is created.  The routing table\n\
    \   entry's expiration MUST match the peer's expiration value.\n"
- title: 5.3.  Capabilities Exchange
  contents:
  - "5.3.  Capabilities Exchange\n   When two Diameter peers establish a transport\
    \ connection, they MUST\n   exchange the Capabilities Exchange messages, as specified\
    \ in the peer\n   state machine (see Section 5.6).  This message allows the discovery\n\
    \   of a peer's identity and its capabilities (protocol version number,\n   the\
    \ identifiers of supported Diameter applications, security\n   mechanisms, etc.).\n\
    \   The receiver only issues commands to its peers that have advertised\n   support\
    \ for the Diameter application that defines the command.  A\n   Diameter node\
    \ MUST cache the supported Application Ids in order to\n   ensure that unrecognized\
    \ commands and/or AVPs are not unnecessarily\n   sent to a peer.\n   A receiver\
    \ of a Capabilities-Exchange-Request (CER) message that does\n   not have any\
    \ applications in common with the sender MUST return a\n   Capabilities-Exchange-Answer\
    \ (CEA) with the Result-Code AVP set to\n   DIAMETER_NO_COMMON_APPLICATION and\
    \ SHOULD disconnect the transport\n   layer connection.  Note that receiving a\
    \ CER or CEA from a peer\n   advertising itself as a relay (see Section 2.4) MUST\
    \ be interpreted\n   as having common applications with the peer.\n   The receiver\
    \ of the Capabilities-Exchange-Request (CER) MUST\n   determine common applications\
    \ by computing the intersection of its\n   own set of supported Application Ids\
    \ against all of the\n   Application-Id AVPs (Auth-Application-Id, Acct-Application-Id,\
    \ and\n   Vendor-Specific-Application-Id) present in the CER.  The value of the\n\
    \   Vendor-Id AVP in the Vendor-Specific-Application-Id MUST NOT be used\n   during\
    \ computation.  The sender of the Capabilities-Exchange-Answer\n   (CEA) SHOULD\
    \ include all of its supported applications as a hint to\n   the receiver regarding\
    \ all of its application capabilities.\n   Diameter implementations SHOULD first\
    \ attempt to establish a TLS/TCP\n   and DTLS/SCTP connection prior to the CER/CEA\
    \ exchange.  This\n   protects the capabilities information of both peers.  To\
    \ support\n   older Diameter implementations that do not fully conform to this\n\
    \   document, the transport security MAY still be negotiated via an\n   Inband-Security\
    \ AVP.  In this case, the receiver of a Capabilities-\n   Exchange-Request (CER)\
    \ message that does not have any security\n   mechanisms in common with the sender\
    \ MUST return a Capabilities-\n   Exchange-Answer (CEA) with the Result-Code AVP\
    \ set to\n   DIAMETER_NO_COMMON_SECURITY and SHOULD disconnect the transport layer\n\
    \   connection.\n   CERs received from unknown peers MAY be silently discarded,\
    \ or a CEA\n   MAY be issued with the Result-Code AVP set to DIAMETER_UNKNOWN_PEER.\n\
    \   In both cases, the transport connection is closed.  If the local\n   policy\
    \ permits receiving CERs from unknown hosts, a successful CEA\n   MAY be returned.\
    \  If a CER from an unknown peer is answered with a\n   successful CEA, the lifetime\
    \ of the peer entry is equal to the\n   lifetime of the transport connection.\
    \  In case of a transport\n   failure, all the pending transactions destined to\
    \ the unknown peer\n   can be discarded.\n   The CER and CEA messages MUST NOT\
    \ be proxied, redirected, or relayed.\n   Since the CER/CEA messages cannot be\
    \ proxied, it is still possible\n   that an upstream agent will receive a message\
    \ for which it has no\n   available peers to handle the application that corresponds\
    \ to the\n   Command Code.  In such instances, the 'E' bit is set in the answer\n\
    \   message (Section 7) with the Result-Code AVP set to\n   DIAMETER_UNABLE_TO_DELIVER\
    \ to inform the downstream agent to take\n   action (e.g., re-routing request\
    \ to an alternate peer).\n   With the exception of the Capabilities-Exchange-Request\
    \ message, a\n   message of type Request that includes the Auth-Application-Id\
    \ or\n   Acct-Application-Id AVPs, or a message with an application-specific\n\
    \   Command Code MAY only be forwarded to a host that has explicitly\n   advertised\
    \ support for the application (or has advertised the Relay\n   Application Id).\n"
- title: 5.3.1.  Capabilities-Exchange-Request
  contents:
  - "5.3.1.  Capabilities-Exchange-Request\n   The Capabilities-Exchange-Request (CER),\
    \ indicated by the Command\n   Code set to 257 and the Command Flags' 'R' bit\
    \ set, is sent to\n   exchange local capabilities.  Upon detection of a transport\
    \ failure,\n   this message MUST NOT be sent to an alternate peer.\n   When Diameter\
    \ is run over SCTP [RFC4960] or DTLS/SCTP [RFC6083],\n   which allow for connections\
    \ to span multiple interfaces and multiple\n   IP addresses, the Capabilities-Exchange-Request\
    \ message MUST contain\n   one Host-IP-Address AVP for each potential IP address\
    \ that MAY be\n   locally used when transmitting Diameter messages.\n      Message\
    \ Format\n         <CER> ::= < Diameter Header: 257, REQ >\n                 \
    \  { Origin-Host }\n                   { Origin-Realm }\n                1* {\
    \ Host-IP-Address }\n                   { Vendor-Id }\n                   { Product-Name\
    \ }\n                   [ Origin-State-Id ]\n                 * [ Supported-Vendor-Id\
    \ ]\n                 * [ Auth-Application-Id ]\n                 * [ Inband-Security-Id\
    \ ]\n                 * [ Acct-Application-Id ]\n                 * [ Vendor-Specific-Application-Id\
    \ ]\n                   [ Firmware-Revision ]\n                 * [ AVP ]\n"
- title: 5.3.2.  Capabilities-Exchange-Answer
  contents:
  - "5.3.2.  Capabilities-Exchange-Answer\n   The Capabilities-Exchange-Answer (CEA),\
    \ indicated by the Command Code\n   set to 257 and the Command Flags' 'R' bit\
    \ cleared, is sent in\n   response to a CER message.\n   When Diameter is run\
    \ over SCTP [RFC4960] or DTLS/SCTP [RFC6083],\n   which allow connections to span\
    \ multiple interfaces, hence, multiple\n   IP addresses, the Capabilities-Exchange-Answer\
    \ message MUST contain\n   one Host-IP-Address AVP for each potential IP address\
    \ that MAY be\n   locally used when transmitting Diameter messages.\n   Message\
    \ Format\n         <CEA> ::= < Diameter Header: 257 >\n                   { Result-Code\
    \ }\n                   { Origin-Host }\n                   { Origin-Realm }\n\
    \                1* { Host-IP-Address }\n                   { Vendor-Id }\n  \
    \                 { Product-Name }\n                   [ Origin-State-Id ]\n \
    \                  [ Error-Message ]\n                   [ Failed-AVP ]\n    \
    \             * [ Supported-Vendor-Id ]\n                 * [ Auth-Application-Id\
    \ ]\n                 * [ Inband-Security-Id ]\n                 * [ Acct-Application-Id\
    \ ]\n                 * [ Vendor-Specific-Application-Id ]\n                 \
    \  [ Firmware-Revision ]\n                 * [ AVP ]\n"
- title: 5.3.3.  Vendor-Id AVP
  contents:
  - "5.3.3.  Vendor-Id AVP\n   The Vendor-Id AVP (AVP Code 266) is of type Unsigned32\
    \ and contains\n   the IANA \"SMI Network Management Private Enterprise Codes\"\
    \n   [ENTERPRISE] value assigned to the Diameter Software vendor.  It is\n   envisioned\
    \ that the combination of the Vendor-Id, Product-Name\n   (Section 5.3.7), and\
    \ Firmware-Revision (Section 5.3.4) AVPs may\n   provide useful debugging information.\n\
    \   A Vendor-Id value of zero in the CER or CEA message is reserved and\n   indicates\
    \ that this field is ignored.\n"
- title: 5.3.4.  Firmware-Revision AVP
  contents:
  - "5.3.4.  Firmware-Revision AVP\n   The Firmware-Revision AVP (AVP Code 267) is\
    \ of type Unsigned32 and is\n   used to inform a Diameter peer of the firmware\
    \ revision of the\n   issuing device.\n   For devices that do not have a firmware\
    \ revision (general-purpose\n   computers running Diameter software modules, for\
    \ instance), the\n   revision of the Diameter software module may be reported\
    \ instead.\n"
- title: 5.3.5.  Host-IP-Address AVP
  contents:
  - "5.3.5.  Host-IP-Address AVP\n   The Host-IP-Address AVP (AVP Code 257) is of\
    \ type Address and is used\n   to inform a Diameter peer of the sender's IP address.\
    \  All source\n   addresses that a Diameter node expects to use with SCTP [RFC4960]\
    \ or\n   DTLS/SCTP [RFC6083] MUST be advertised in the CER and CEA messages by\n\
    \   including a Host-IP-Address AVP for each address.\n"
- title: 5.3.6.  Supported-Vendor-Id AVP
  contents:
  - "5.3.6.  Supported-Vendor-Id AVP\n   The Supported-Vendor-Id AVP (AVP Code 265)\
    \ is of type Unsigned32 and\n   contains the IANA \"SMI Network Management Private\
    \ Enterprise Codes\"\n   [ENTERPRISE] value assigned to a vendor other than the\
    \ device vendor\n   but including the application vendor.  This is used in the\
    \ CER and\n   CEA messages in order to inform the peer that the sender supports\
    \ (a\n   subset of) the Vendor-Specific AVPs defined by the vendor identified\n\
    \   in this AVP.  The value of this AVP MUST NOT be set to zero.\n   Multiple\
    \ instances of this AVP containing the same value SHOULD NOT\n   be sent.\n"
- title: 5.3.7.  Product-Name AVP
  contents:
  - "5.3.7.  Product-Name AVP\n   The Product-Name AVP (AVP Code 269) is of type UTF8String\
    \ and\n   contains the vendor-assigned name for the product.  The Product-Name\n\
    \   AVP SHOULD remain constant across firmware revisions for the same\n   product.\n"
- title: 5.4.  Disconnecting Peer Connections
  contents:
  - "5.4.  Disconnecting Peer Connections\n   When a Diameter node disconnects one\
    \ of its transport connections,\n   its peer cannot know the reason for the disconnect\
    \ and will most\n   likely assume that a connectivity problem occurred or that\
    \ the peer\n   has rebooted.  In these cases, the peer may periodically attempt\
    \ to\n   reconnect, as stated in Section 2.1.  In the event that the\n   disconnect\
    \ was a result of either a shortage of internal resources or\n   simply that the\
    \ node in question has no intentions of forwarding any\n   Diameter messages to\
    \ the peer in the foreseeable future, a periodic\n   connection request would\
    \ not be welcomed.  The Disconnection-Reason\n   AVP contains the reason the Diameter\
    \ node issued the Disconnect-Peer-\n   Request message.\n   The Disconnect-Peer-Request\
    \ message is used by a Diameter node to\n   inform its peer of its intent to disconnect\
    \ the transport layer and\n   that the peer shouldn't reconnect unless it has\
    \ a valid reason to do\n   so (e.g., message to be forwarded).  Upon receipt of\
    \ the message, the\n   Disconnect-Peer-Answer message is returned, which SHOULD\
    \ contain an\n   error if messages have recently been forwarded, and are likely\
    \ in\n   flight, which would otherwise cause a race condition.\n   The receiver\
    \ of the Disconnect-Peer-Answer message initiates the\n   transport disconnect.\
    \  The sender of the Disconnect-Peer-Answer\n   message should be able to detect\
    \ the transport closure and clean up\n   the connection.\n"
- title: 5.4.1.  Disconnect-Peer-Request
  contents:
  - "5.4.1.  Disconnect-Peer-Request\n   The Disconnect-Peer-Request (DPR), indicated\
    \ by the Command Code set\n   to 282 and the Command Flags' 'R' bit set, is sent\
    \ to a peer to\n   inform it of its intentions to shut down the transport connection.\n\
    \   Upon detection of a transport failure, this message MUST NOT be sent\n   to\
    \ an alternate peer.\n      Message Format\n         <DPR>  ::= < Diameter Header:\
    \ 282, REQ >\n                    { Origin-Host }\n                    { Origin-Realm\
    \ }\n                    { Disconnect-Cause }\n                  * [ AVP ]\n"
- title: 5.4.2.   Disconnect-Peer-Answer
  contents:
  - "5.4.2.   Disconnect-Peer-Answer\n   The Disconnect-Peer-Answer (DPA), indicated\
    \ by the Command Code set\n   to 282 and the Command Flags' 'R' bit cleared, is\
    \ sent as a response\n   to the Disconnect-Peer-Request message.  Upon receipt\
    \ of this\n   message, the transport connection is shut down.\n      Message Format\n\
    \         <DPA>  ::= < Diameter Header: 282 >\n                    { Result-Code\
    \ }\n                    { Origin-Host }\n                    { Origin-Realm }\n\
    \                    [ Error-Message ]\n                    [ Failed-AVP ]\n \
    \                 * [ AVP ]\n"
- title: 5.4.3.   Disconnect-Cause AVP
  contents:
  - "5.4.3.   Disconnect-Cause AVP\n   The Disconnect-Cause AVP (AVP Code 273) is\
    \ of type Enumerated.  A\n   Diameter node MUST include this AVP in the Disconnect-Peer-Request\n\
    \   message to inform the peer of the reason for its intention to shut\n   down\
    \ the transport connection.  The following values are supported:\n      REBOOTING\
    \                         0\n         A scheduled reboot is imminent.  A receiver\
    \ of a DPR with\n         above result code MAY attempt reconnection.\n      BUSY\
    \                              1\n         The peer's internal resources are constrained,\
    \ and it has\n         determined that the transport connection needs to be closed.\n\
    \         A receiver of a DPR with above result code SHOULD NOT attempt\n    \
    \     reconnection.\n      DO_NOT_WANT_TO_TALK_TO_YOU        2\n         The peer\
    \ has determined that it does not see a need for the\n         transport connection\
    \ to exist, since it does not expect any\n         messages to be exchanged in\
    \ the near future.  A receiver of a\n         DPR with above result code SHOULD\
    \ NOT attempt reconnection.\n"
- title: 5.5.  Transport Failure Detection
  contents:
  - "5.5.  Transport Failure Detection\n   Given the nature of the Diameter protocol,\
    \ it is recommended that\n   transport failures be detected as soon as possible.\
    \  Detecting such\n   failures will minimize the occurrence of messages sent to\
    \ unavailable\n   agents, resulting in unnecessary delays, and will provide better\n\
    \   failover performance.  The Device-Watchdog-Request and Device-\n   Watchdog-Answer\
    \ messages, defined in this section, are used to pro-\n   actively detect transport\
    \ failures.\n"
- title: 5.5.1.  Device-Watchdog-Request
  contents:
  - "5.5.1.  Device-Watchdog-Request\n   The Device-Watchdog-Request (DWR), indicated\
    \ by the Command Code set\n   to 280 and the Command Flags' 'R' bit set, is sent\
    \ to a peer when no\n   traffic has been exchanged between two peers (see Section\
    \ 5.5.3).\n   Upon detection of a transport failure, this message MUST NOT be\
    \ sent\n   to an alternate peer.\n      Message Format\n         <DWR>  ::= <\
    \ Diameter Header: 280, REQ >\n                    { Origin-Host }\n         \
    \           { Origin-Realm }\n                    [ Origin-State-Id ]\n      \
    \            * [ AVP ]\n"
- title: 5.5.2.  Device-Watchdog-Answer
  contents:
  - "5.5.2.  Device-Watchdog-Answer\n   The Device-Watchdog-Answer (DWA), indicated\
    \ by the Command Code set\n   to 280 and the Command Flags' 'R' bit cleared, is\
    \ sent as a response\n   to the Device-Watchdog-Request message.\n      Message\
    \ Format\n         <DWA>  ::= < Diameter Header: 280 >\n                    {\
    \ Result-Code }\n                    { Origin-Host }\n                    { Origin-Realm\
    \ }\n                    [ Error-Message ]\n                    [ Failed-AVP ]\n\
    \                    [ Origin-State-Id ]\n                  * [ AVP ]\n"
- title: 5.5.3.   Transport Failure Algorithm
  contents:
  - "5.5.3.   Transport Failure Algorithm\n   The transport failure algorithm is defined\
    \ in [RFC3539].  All\n   Diameter implementations MUST support the algorithm defined\
    \ in that\n   specification in order to be compliant to the Diameter base protocol.\n"
- title: 5.5.4.  Failover and Failback Procedures
  contents:
  - "5.5.4.  Failover and Failback Procedures\n   In the event that a transport failure\
    \ is detected with a peer, it is\n   necessary for all pending request messages\
    \ to be forwarded to an\n   alternate agent, if possible.  This is commonly referred\
    \ to as\n   \"failover\".\n   In order for a Diameter node to perform failover\
    \ procedures, it is\n   necessary for the node to maintain a pending message queue\
    \ for a\n   given peer.  When an answer message is received, the corresponding\n\
    \   request is removed from the queue.  The Hop-by-Hop Identifier field\n   is\
    \ used to match the answer with the queued request.\n   When a transport failure\
    \ is detected, if possible, all messages in\n   the queue are sent to an alternate\
    \ agent with the T flag set.  On\n   booting a Diameter client or agent, the T\
    \ flag is also set on any\n   remaining records in non-volatile storage that are\
    \ still waiting to\n   be transmitted.  An example of a case where it is not possible\
    \ to\n   forward the message to an alternate server is when the message has a\n\
    \   fixed destination, and the unavailable peer is the message's final\n   destination\
    \ (see Destination-Host AVP).  Such an error requires that\n   the agent return\
    \ an answer message with the 'E' bit set and the\n   Result-Code AVP set to DIAMETER_UNABLE_TO_DELIVER.\n\
    \   It is important to note that multiple identical requests or answers\n   MAY\
    \ be received as a result of a failover.  The End-to-End Identifier\n   field\
    \ in the Diameter header along with the Origin-Host AVP MUST be\n   used to identify\
    \ duplicate messages.\n   As described in Section 2.1, a connection request should\
    \ be\n   periodically attempted with the failed peer in order to re-establish\n\
    \   the transport connection.  Once a connection has been successfully\n   established,\
    \ messages can once again be forwarded to the peer.  This\n   is commonly referred\
    \ to as \"failback\".\n"
- title: 5.6.  Peer State Machine
  contents:
  - "5.6.  Peer State Machine\n   This section contains a finite state machine that\
    \ MUST be observed by\n   all Diameter implementations.  Each Diameter node MUST\
    \ follow the\n   state machine described below when communicating with each peer.\n\
    \   Multiple actions are separated by commas, and may continue on\n   succeeding\
    \ lines, as space requires.  Similarly, state and next state\n   may also span\
    \ multiple lines, as space requires.\n   This state machine is closely coupled\
    \ with the state machine\n   described in [RFC3539], which is used to open, close,\
    \ failover,\n   probe, and reopen transport connections.  In particular, note\
    \ that\n   [RFC3539] requires the use of watchdog messages to probe connections.\n\
    \   For Diameter, DWR and DWA messages are to be used.\n   The I- prefix is used\
    \ to represent the initiator (connecting)\n   connection, while the R- prefix\
    \ is used to represent the responder\n   (listening) connection.  The lack of\
    \ a prefix indicates that the\n   event or action is the same regardless of the\
    \ connection on which the\n   event occurred.\n   The stable states that a state\
    \ machine may be in are Closed, I-Open,\n   and R-Open; all other states are intermediate.\
    \  Note that I-Open and\n   R-Open are equivalent except for whether the initiator\
    \ or responder\n   transport connection is used for communication.\n   A CER message\
    \ is always sent on the initiating connection immediately\n   after the connection\
    \ request is successfully completed.  In the case\n   of an election, one of the\
    \ two connections will shut down.  The\n   responder connection will survive if\
    \ the Origin-Host of the local\n   Diameter entity is higher than that of the\
    \ peer; the initiator\n   connection will survive if the peer's Origin-Host is\
    \ higher.  All\n   subsequent messages are sent on the surviving connection. \
    \ Note that\n   the results of an election on one peer are guaranteed to be the\n\
    \   inverse of the results on the other.\n   For TLS/TCP and DTLS/SCTP usage,\
    \ a TLS/TCP and DTLS/SCTP handshake\n   SHOULD begin when both ends are in the\
    \ closed state prior to any\n   Diameter message exchanges.  The TLS/TCP and DTLS/SCTP\
    \ connection\n   SHOULD be established before sending any CER or CEA message to\
    \ secure\n   and protect the capabilities information of both peers.  The TLS/TCP\n\
    \   and DTLS/SCTP connection SHOULD be disconnected when the state\n   machine\
    \ moves to the closed state.  When connecting to responders\n   that do not conform\
    \ to this document (i.e., older Diameter\n   implementations that are not prepared\
    \ to received TLS/TCP and DTLS/\n   SCTP connections in the closed state), the\
    \ initial TLS/TCP and DTLS/\n   SCTP connection attempt will fail.  The initiator\
    \ MAY then attempt to\n   connect via TCP or SCTP and initiate the TLS/TCP and\
    \ DTLS/SCTP\n   handshake when both ends are in the open state.  If the handshake\
    \ is\n   successful, all further messages will be sent via TLS/TCP and DTLS/\n\
    \   SCTP.  If the handshake fails, both ends move to the closed state.\n   The\
    \ state machine constrains only the behavior of a Diameter\n   implementation\
    \ as seen by Diameter peers through events on the wire.\n   Any implementation\
    \ that produces equivalent results is considered\n   compliant.\n      state \
    \           event              action         next state\n      -----------------------------------------------------------------\n\
    \      Closed           Start            I-Snd-Conn-Req   Wait-Conn-Ack\n    \
    \                   R-Conn-CER       R-Accept,        R-Open\n               \
    \                         Process-CER,\n                                     \
    \   R-Snd-CEA\n      Wait-Conn-Ack    I-Rcv-Conn-Ack   I-Snd-CER        Wait-I-CEA\n\
    \                       I-Rcv-Conn-Nack  Cleanup          Closed\n           \
    \            R-Conn-CER       R-Accept,        Wait-Conn-Ack/\n              \
    \                          Process-CER      Elect\n                       Timeout\
    \          Error            Closed\n      Wait-I-CEA       I-Rcv-CEA        Process-CEA\
    \      I-Open\n                       R-Conn-CER       R-Accept,        Wait-Returns\n\
    \                                        Process-CER,\n                      \
    \                  Elect\n                       I-Peer-Disc      I-Disc     \
    \      Closed\n                       I-Rcv-Non-CEA    Error            Closed\n\
    \                       Timeout          Error            Closed\n      Wait-Conn-Ack/\
    \   I-Rcv-Conn-Ack   I-Snd-CER,Elect  Wait-Returns\n      Elect            I-Rcv-Conn-Nack\
    \  R-Snd-CEA        R-Open\n                       R-Peer-Disc      R-Disc   \
    \        Wait-Conn-Ack\n                       R-Conn-CER       R-Reject     \
    \    Wait-Conn-Ack/\n                                                        \
    \ Elect\n                       Timeout          Error            Closed\n   \
    \   Wait-Returns     Win-Election     I-Disc,R-Snd-CEA R-Open\n              \
    \         I-Peer-Disc      I-Disc,          R-Open\n                         \
    \               R-Snd-CEA\n                       I-Rcv-CEA        R-Disc    \
    \       I-Open\n                       R-Peer-Disc      R-Disc           Wait-I-CEA\n\
    \                       R-Conn-CER       R-Reject         Wait-Returns\n     \
    \                  Timeout          Error            Closed\n      R-Open    \
    \       Send-Message     R-Snd-Message    R-Open\n                       R-Rcv-Message\
    \    Process          R-Open\n                       R-Rcv-DWR        Process-DWR,\
    \     R-Open\n                                        R-Snd-DWA\n            \
    \           R-Rcv-DWA        Process-DWA      R-Open\n                       R-Conn-CER\
    \       R-Reject         R-Open\n                       Stop             R-Snd-DPR\
    \        Closing\n                       R-Rcv-DPR        R-Snd-DPA        Closing\n\
    \                       R-Peer-Disc      R-Disc           Closed\n      I-Open\
    \           Send-Message     I-Snd-Message    I-Open\n                       I-Rcv-Message\
    \    Process          I-Open\n                       I-Rcv-DWR        Process-DWR,\
    \     I-Open\n                                        I-Snd-DWA\n            \
    \           I-Rcv-DWA        Process-DWA      I-Open\n                       R-Conn-CER\
    \       R-Reject         I-Open\n                       Stop             I-Snd-DPR\
    \        Closing\n                       I-Rcv-DPR        I-Snd-DPA        Closing\n\
    \                       I-Peer-Disc      I-Disc           Closed\n      Closing\
    \          I-Rcv-DPA        I-Disc           Closed\n                       R-Rcv-DPA\
    \        R-Disc           Closed\n                       Timeout          Error\
    \            Closed\n                       I-Peer-Disc      I-Disc          \
    \ Closed\n                       R-Peer-Disc      R-Disc           Closed\n"
- title: 5.6.1.  Incoming Connections
  contents:
  - "5.6.1.  Incoming Connections\n   When a connection request is received from a\
    \ Diameter peer, it is\n   not, in the general case, possible to know the identity\
    \ of that peer\n   until a CER is received from it.  This is because host and\
    \ port\n   determine the identity of a Diameter peer; the source port of an\n\
    \   incoming connection is arbitrary.  Upon receipt of a CER, the\n   identity\
    \ of the connecting peer can be uniquely determined from the\n   Origin-Host.\n\
    \   For this reason, a Diameter peer must employ logic separate from the\n   state\
    \ machine to receive connection requests, accept them, and await\n   the CER.\
    \  Once the CER arrives on a new connection, the Origin-Host\n   that identifies\
    \ the peer is used to locate the state machine\n   associated with that peer,\
    \ and the new connection and CER are passed\n   to the state machine as an R-Conn-CER\
    \ event.\n   The logic that handles incoming connections SHOULD close and discard\n\
    \   the connection if any message other than a CER arrives or if an\n   implementation-defined\
    \ timeout occurs prior to receipt of CER.\n   Because handling of incoming connections\
    \ up to and including receipt\n   of a CER requires logic, separate from that\
    \ of any individual state\n   machine associated with a particular peer, it is\
    \ described separately\n   in this section rather than in the state machine above.\n"
- title: 5.6.2.  Events
  contents:
  - "5.6.2.  Events\n   Transitions and actions in the automaton are caused by events.\
    \  In\n   this section, we will ignore the I- and R- prefixes, since the actual\n\
    \   event would be identical, but it would occur on one of two possible\n   connections.\n\
    \   Start          The Diameter application has signaled that a\n            \
    \      connection should be initiated with the peer.\n   R-Conn-CER     An acknowledgement\
    \ is received stating that the\n                  transport connection has been\
    \ established, and the\n                  associated CER has arrived.\n   Rcv-Conn-Ack\
    \   A positive acknowledgement is received confirming that\n                 \
    \ the transport connection is established.\n   Rcv-Conn-Nack  A negative acknowledgement\
    \ was received stating that\n                  the transport connection was not\
    \ established.\n   Timeout        An application-defined timer has expired while\
    \ waiting\n                  for some event.\n   Rcv-CER        A CER message\
    \ from the peer was received.\n   Rcv-CEA        A CEA message from the peer was\
    \ received.\n   Rcv-Non-CEA    A message, other than a CEA, from the peer was\n\
    \                  received.\n   Peer-Disc      A disconnection indication from\
    \ the peer was received.\n   Rcv-DPR        A DPR message from the peer was received.\n\
    \   Rcv-DPA        A DPA message from the peer was received.\n   Win-Election\
    \   An election was held, and the local node was the\n                  winner.\n\
    \   Send-Message   A message is to be sent.\n   Rcv-Message    A message other\
    \ than CER, CEA, DPR, DPA, DWR, or DWA\n                  was received.\n   Stop\
    \           The Diameter application has signaled that a\n                  connection\
    \ should be terminated (e.g., on system\n                  shutdown).\n"
- title: 5.6.3.  Actions
  contents:
  - "5.6.3.  Actions\n   Actions in the automaton are caused by events and typically\
    \ indicate\n   the transmission of packets and/or an action to be taken on the\n\
    \   connection.  In this section, we will ignore the I- and R- prefixes,\n   since\
    \ the actual action would be identical, but it would occur on one\n   of two possible\
    \ connections.\n   Snd-Conn-Req   A transport connection is initiated with the\
    \ peer.\n   Accept         The incoming connection associated with the R-Conn-CER\n\
    \                  is accepted as the responder connection.\n   Reject       \
    \  The incoming connection associated with the R-Conn-CER\n                  is\
    \ disconnected.\n   Process-CER    The CER associated with the R-Conn-CER is processed.\n\
    \   Snd-CER        A CER message is sent to the peer.\n   Snd-CEA        A CEA\
    \ message is sent to the peer.\n   Cleanup        If necessary, the connection\
    \ is shut down, and any\n                  local resources are freed.\n   Error\
    \          The transport layer connection is disconnected,\n                 \
    \ either politely or abortively, in response to\n                  an error condition.\
    \  Local resources are freed.\n   Process-CEA    A received CEA is processed.\n\
    \   Snd-DPR        A DPR message is sent to the peer.\n   Snd-DPA        A DPA\
    \ message is sent to the peer.\n   Disc           The transport layer connection\
    \ is disconnected,\n                  and local resources are freed.\n   Elect\
    \          An election occurs (see Section 5.6.4 for more\n                  information).\n\
    \   Snd-Message    A message is sent.\n   Snd-DWR        A DWR message is sent.\n\
    \   Snd-DWA        A DWA message is sent.\n   Process-DWR    The DWR message is\
    \ serviced.\n   Process-DWA    The DWA message is serviced.\n   Process      \
    \  A message is serviced.\n"
- title: 5.6.4.  The Election Process
  contents:
  - "5.6.4.  The Election Process\n   The election is performed on the responder.\
    \  The responder compares\n   the Origin-Host received in the CER with its own\
    \ Origin-Host as two\n   streams of octets.  If the local Origin-Host lexicographically\n\
    \   succeeds the received Origin-Host, a Win-Election event is issued\n   locally.\
    \  Diameter identities are in ASCII form; therefore, the\n   lexical comparison\
    \ is consistent with DNS case insensitivity, where\n   octets that fall in the\
    \ ASCII range 'a' through 'z' MUST compare\n   equally to their uppercase counterparts\
    \ between 'A' and 'Z'.  See\n   Appendix D for interactions between the Diameter\
    \ protocol and\n   Internationalized Domain Name (IDNs).\n   The winner of the\
    \ election MUST close the connection it initiated.\n   Historically, maintaining\
    \ the responder side of a connection was more\n   efficient than maintaining the\
    \ initiator side.  However, current\n   practices makes this distinction irrelevant.\n"
- title: 6.  Diameter Message Processing
  contents:
  - "6.  Diameter Message Processing\n   This section describes how Diameter requests\
    \ and answers are created\n   and processed.\n"
- title: 6.1.  Diameter Request Routing Overview
  contents:
  - "6.1.  Diameter Request Routing Overview\n   A request is sent towards its final\
    \ destination using one of the\n   following three combinations of the Destination-Realm\
    \ and\n   Destination-Host AVPs:\n   o  A request that is not able to be proxied\
    \ (such as a CER) MUST NOT\n      contain either Destination-Realm or Destination-Host\
    \ AVPs.\n   o  A request that needs to be sent to a home server serving a\n  \
    \    specific realm, but not to a specific server (such as the first\n      request\
    \ of a series of round trips), MUST contain a Destination-\n      Realm AVP but\
    \ MUST NOT contain a Destination-Host AVP.  For\n      Diameter clients, the value\
    \ of the Destination-Realm AVP MAY be\n      extracted from the User-Name AVP,\
    \ or other methods.\n   o  Otherwise, a request that needs to be sent to a specific\
    \ home\n      server among those serving a given realm MUST contain both the\n\
    \      Destination-Realm and Destination-Host AVPs.\n   The Destination-Host AVP\
    \ is used as described above when the\n   destination of the request is fixed,\
    \ which includes:\n   o  Authentication requests that span multiple round trips.\n\
    \   o  A Diameter message that uses a security mechanism that makes use\n    \
    \  of a pre-established session key shared between the source and the\n      final\
    \ destination of the message.\n   o  Server-initiated messages that MUST be received\
    \ by a specific\n      Diameter client (e.g., access device), such as the Abort-Session-\n\
    \      Request message, which is used to request that a particular user's\n  \
    \    session be terminated.\n   Note that an agent can only forward a request\
    \ to a host described in\n   the Destination-Host AVP if the host in question\
    \ is included in its\n   peer table (see Section 2.6).  Otherwise, the request\
    \ is routed based\n   on the Destination-Realm only (see Section 6.1.6).\n   When\
    \ a message is received, the message is processed in the following\n   order:\n\
    \   o  If the message is destined for the local host, the procedures\n      listed\
    \ in Section 6.1.4 are followed.\n   o  If the message is intended for a Diameter\
    \ peer with whom the local\n      host is able to directly communicate, the procedures\
    \ listed in\n      Section 6.1.5 are followed.  This is known as \"Request\n \
    \     Forwarding\".\n   o  The procedure listed in Section 6.1.6 is followed,\
    \ which is known\n      as \"Request Routing\".\n   o  If none of the above are\
    \ successful, an answer is returned with\n      the Result-Code set to DIAMETER_UNABLE_TO_DELIVER,\
    \ with the 'E'\n      bit set.\n   For routing of Diameter messages to work within\
    \ an administrative\n   domain, all Diameter nodes within the realm MUST be peers.\n\
    \   The overview contained in this section (6.1) is intended to provide\n   general\
    \ guidelines to Diameter developers.  Implementations are free\n   to use different\
    \ methods than the ones described here as long as they\n   conform to the requirements\
    \ specified in Sections 6.1.1 through\n   6.1.9.  See Section 7 for more details\
    \ on error handling.\n"
- title: 6.1.1.  Originating a Request
  contents:
  - "6.1.1.  Originating a Request\n   When creating a request, in addition to any\
    \ other procedures\n   described in the application definition for that specific\
    \ request,\n   the following procedures MUST be followed:\n   o  the Command Code\
    \ is set to the appropriate value;\n   o  the 'R' bit is set;\n   o  the End-to-End\
    \ Identifier is set to a locally unique value;\n   o  the Origin-Host and Origin-Realm\
    \ AVPs MUST be set to the\n      appropriate values, used to identify the source\
    \ of the message;\n      and\n   o  the Destination-Host and Destination-Realm\
    \ AVPs MUST be set to the\n      appropriate values, as described in Section 6.1.\n"
- title: 6.1.2.  Sending a Request
  contents:
  - "6.1.2.  Sending a Request\n   When sending a request, originated either locally\
    \ or as the result of\n   a forwarding or routing operation, the following procedures\
    \ SHOULD be\n   followed:\n   o  The Hop-by-Hop Identifier SHOULD be set to a\
    \ locally unique value.\n   o  The message SHOULD be saved in the list of pending\
    \ requests.\n   Other actions to perform on the message based on the particular\
    \ role\n   the agent is playing are described in the following sections.\n"
- title: 6.1.3.  Receiving Requests
  contents:
  - "6.1.3.  Receiving Requests\n   A relay or proxy agent MUST check for forwarding\
    \ loops when receiving\n   requests.  A loop is detected if the server finds its\
    \ own identity in\n   a Route-Record AVP.  When such an event occurs, the agent\
    \ MUST answer\n   with the Result-Code AVP set to DIAMETER_LOOP_DETECTED.\n"
- title: 6.1.4.  Processing Local Requests
  contents:
  - "6.1.4.  Processing Local Requests\n   A request is known to be for local consumption\
    \ when one of the\n   following conditions occurs:\n   o  The Destination-Host\
    \ AVP contains the local host's identity;\n   o  The Destination-Host AVP is not\
    \ present, the Destination-Realm AVP\n      contains a realm the server is configured\
    \ to process locally, and\n      the Diameter application is locally supported;\
    \ or\n   o  Both the Destination-Host and the Destination-Realm are not\n    \
    \  present.\n   When a request is locally processed, the rules in Section 6.2\
    \ should\n   be used to generate the corresponding answer.\n"
- title: 6.1.5.  Request Forwarding
  contents:
  - "6.1.5.  Request Forwarding\n   Request forwarding is done using the Diameter\
    \ peer table.  The\n   Diameter peer table contains all of the peers with which\
    \ the local\n   node is able to directly communicate.\n   When a request is received,\
    \ and the host encoded in the Destination-\n   Host AVP is one that is present\
    \ in the peer table, the message SHOULD\n   be forwarded to the peer.\n"
- title: 6.1.6.  Request Routing
  contents:
  - "6.1.6.  Request Routing\n   Diameter request message routing is done via realms\
    \ and Application\n   Ids. A Diameter message that may be forwarded by Diameter\
    \ agents\n   (proxies, redirect agents, or relay agents) MUST include the target\n\
    \   realm in the Destination-Realm AVP.  Request routing SHOULD rely on\n   the\
    \ Destination-Realm AVP and the Application Id present in the\n   request message\
    \ header to aid in the routing decision.  The realm MAY\n   be retrieved from\
    \ the User-Name AVP, which is in the form of a\n   Network Access Identifier (NAI).\
    \  The realm portion of the NAI is\n   inserted in the Destination-Realm AVP.\n\
    \   Diameter agents MAY have a list of locally supported realms and\n   applications,\
    \ and they MAY have a list of externally supported realms\n   and applications.\
    \  When a request is received that includes a realm\n   and/or application that\
    \ is not locally supported, the message is\n   routed to the peer configured in\
    \ the routing table (see Section 2.7).\n   Realm names and Application Ids are\
    \ the minimum supported routing\n   criteria, additional information may be needed\
    \ to support redirect\n   semantics.\n"
- title: 6.1.7.  Predictive Loop Avoidance
  contents:
  - "6.1.7.  Predictive Loop Avoidance\n   Before forwarding or routing a request,\
    \ Diameter agents, in addition\n   to performing the processing described in Section\
    \ 6.1.3, SHOULD check\n   for the presence of a candidate route's peer identity\
    \ in any of the\n   Route-Record AVPs.  In the event of the agent detecting the\
    \ presence\n   of a candidate route's peer identity in a Route-Record AVP, the\
    \ agent\n   MUST ignore such a route for the Diameter request message and attempt\n\
    \   alternate routes if any exist.  In case all the candidate routes are\n   eliminated\
    \ by the above criteria, the agent SHOULD return a\n   DIAMETER_UNABLE_TO_DELIVER\
    \ message.\n"
- title: 6.1.8.  Redirecting Requests
  contents:
  - "6.1.8.  Redirecting Requests\n   When a redirect agent receives a request whose\
    \ routing entry is set\n   to REDIRECT, it MUST reply with an answer message with\
    \ the 'E' bit\n   set, while maintaining the Hop-by-Hop Identifier in the header,\
    \ and\n   include the Result-Code AVP to DIAMETER_REDIRECT_INDICATION.  Each of\n\
    \   the servers associated with the routing entry are added in a separate\n  \
    \ Redirect-Host AVP.\n                     +------------------+\n            \
    \         |     Diameter     |\n                     |  Redirect Agent  |\n  \
    \                   +------------------+\n                      ^    |    2. command\
    \ + 'E' bit\n       1. Request     |    |    Result-Code =\n      joe@example.com\
    \ |    |    DIAMETER_REDIRECT_INDICATION +\n                      |    |    Redirect-Host\
    \ AVP(s)\n                      |    v\n                  +-------------+  3.\
    \ Request  +-------------+\n                  | example.com |------------->| example.net\
    \ |\n                  |    Relay    |              |   Diameter  |\n        \
    \          |    Agent    |<-------------|    Server   |\n                  +-------------+\
    \  4. Answer   +-------------+\n                     Figure 5: Diameter Redirect\
    \ Agent\n   The receiver of an answer message with the 'E' bit set and the\n \
    \  Result-Code AVP set to DIAMETER_REDIRECT_INDICATION uses the Hop-by-\n   Hop\
    \ Identifier in the Diameter header to identify the request in the\n   pending\
    \ message queue (see Section 5.5.4) that is to be redirected.\n   If no transport\
    \ connection exists with the new peer, one is created,\n   and the request is\
    \ sent directly to it.\n   Multiple Redirect-Host AVPs are allowed.  The receiver\
    \ of the answer\n   message with the 'E' bit set selects exactly one of these\
    \ hosts as\n   the destination of the redirected message.\n   When the Redirect-Host-Usage\
    \ AVP included in the answer message has a\n   non-zero value, a route entry for\
    \ the redirect indications is created\n   and cached by the receiver.  The redirect\
    \ usage for such a route\n   entry is set by the value of Redirect-Host-Usage\
    \ AVP and the lifetime\n   of the cached route entry is set by Redirect-Max-Cache-Time\
    \ AVP\n   value.\n   It is possible that multiple redirect indications can create\
    \ multiple\n   cached route entries differing only in their redirect usage and\
    \ the\n   peer to forward messages to.  As an example, two(2) route entries\n\
    \   that are created by two(2) redirect indications results in two(2)\n   cached\
    \ routes for the same realm and Application Id.  However, one\n   has a redirect\
    \ usage of ALL_SESSION, where matching requests will be\n   forwarded to one peer;\
    \ the other has a redirect usage of ALL_REALM,\n   where request are forwarded\
    \ to another peer.  Therefore, an incoming\n   request that matches the realm\
    \ and Application Id of both routes will\n   need additional resolution.  In such\
    \ a case, a routing precedence\n   rule MUST be used against the redirect usage\
    \ value to resolve the\n   contention.  The precedence rule can be found in Section\
    \ 6.13.\n"
- title: 6.1.9.  Relaying and Proxying Requests
  contents:
  - "6.1.9.  Relaying and Proxying Requests\n   A relay or proxy agent MUST append\
    \ a Route-Record AVP to all requests\n   forwarded.  The AVP contains the identity\
    \ of the peer from which the\n   request was received.\n   The Hop-by-Hop Identifier\
    \ in the request is saved and replaced with a\n   locally unique value.  The source\
    \ of the request is also saved, which\n   includes the IP address, port, and protocol.\n\
    \   A relay or proxy agent MAY include the Proxy-Info AVP in requests if\n   it\
    \ requires access to any local state information when the\n   corresponding response\
    \ is received.  The Proxy-Info AVP has security\n   implications as state information\
    \ is distributed to other entities.\n   As such, it is RECOMMENDED that the content\
    \ of the Proxy-Info AVP be\n   protected with cryptographic mechanisms, for example,\
    \ by using a\n   keyed message digest such as HMAC-SHA1 [RFC2104].  Such a mechanism,\n\
    \   however, requires the management of keys, although only locally at\n   the\
    \ Diameter server.  Still, a full description of the management of\n   the keys\
    \ used to protect the Proxy-Info AVP is beyond the scope of\n   this document.\
    \  Below is a list of common recommendations:\n   o  The keys should be generated\
    \ securely following the randomness\n      recommendations in [RFC4086].\n   o\
    \  The keys and cryptographic protection algorithms should be at\n      least\
    \ 128 bits in strength.\n   o  The keys should not be used for any other purpose\
    \ than generating\n      and verifying instances of the Proxy-Info AVP.\n   o\
    \  The keys should be changed regularly.\n   o  The keys should be changed if\
    \ the AVP format or cryptographic\n      protection algorithms change.\n   The\
    \ message is then forwarded to the next hop, as identified in the\n   routing\
    \ table.\n   Figure 6 provides an example of message routing using the procedures\n\
    \   listed in these sections.\n       (Origin-Host=nas.example.net)    (Origin-Host=nas.example.net)\n\
    \       (Origin-Realm=example.net)       (Origin-Realm=example.net)\n       (Destination-Realm=example.com)\
    \  (Destination-Realm=example.com)\n                                        (Route-Record=nas.example.net)\n\
    \      +------+      ------>      +------+      ------>      +------+\n      |\
    \      |     (Request)     |      |      (Request)    |      |\n      | NAS  +-------------------+\
    \ DRL  +-------------------+ HMS  |\n      |      |                   |      |\
    \                   |      |\n      +------+     <------       +------+     <------\
    \       +------+\n     example.net    (Answer)   example.net     (Answer)   example.com\n\
    \          (Origin-Host=hms.example.com)   (Origin-Host=hms.example.com)\n   \
    \       (Origin-Realm=example.com)      (Origin-Realm=example.com)\n         \
    \         Figure 6: Routing of Diameter messages\n   Relay and proxy agents are\
    \ not required to perform full inspection of\n   incoming messages.  At a minimum,\
    \ validation of the message header\n   and relevant routing AVPs has to be done\
    \ when relaying messages.\n   Proxy agents may optionally perform more in-depth\
    \ message validation\n   for applications in which it is interested.\n"
- title: 6.2.  Diameter Answer Processing
  contents:
  - "6.2.  Diameter Answer Processing\n   When a request is locally processed, the\
    \ following procedures MUST be\n   applied to create the associated answer, in\
    \ addition to any\n   additional procedures that MAY be discussed in the Diameter\n\
    \   application defining the command:\n   o  The same Hop-by-Hop Identifier in\
    \ the request is used in the\n      answer.\n   o  The local host's identity is\
    \ encoded in the Origin-Host AVP.\n   o  The Destination-Host and Destination-Realm\
    \ AVPs MUST NOT be\n      present in the answer message.\n   o  The Result-Code\
    \ AVP is added with its value indicating success or\n      failure.\n   o  If\
    \ the Session-Id is present in the request, it MUST be included\n      in the\
    \ answer.\n   o  Any Proxy-Info AVPs in the request MUST be added to the answer\n\
    \      message, in the same order they were present in the request.\n   o  The\
    \ 'P' bit is set to the same value as the one in the request.\n   o  The same\
    \ End-to-End identifier in the request is used in the\n      answer.\n   Note\
    \ that the error messages (see Section 7) are also subjected to\n   the above\
    \ processing rules.\n"
- title: 6.2.1.   Processing Received Answers
  contents:
  - "6.2.1.   Processing Received Answers\n   A Diameter client or proxy MUST match\
    \ the Hop-by-Hop Identifier in an\n   answer received against the list of pending\
    \ requests.  The\n   corresponding message should be removed from the list of\
    \ pending\n   requests.  It SHOULD ignore answers received that do not match a\n\
    \   known Hop-by-Hop Identifier.\n"
- title: 6.2.2.  Relaying and Proxying Answers
  contents:
  - "6.2.2.  Relaying and Proxying Answers\n   If the answer is for a request that\
    \ was proxied or relayed, the agent\n   MUST restore the original value of the\
    \ Diameter header's Hop-by-Hop\n   Identifier field.\n   If the last Proxy-Info\
    \ AVP in the message is targeted to the local\n   Diameter server, the AVP MUST\
    \ be removed before the answer is\n   forwarded.\n   If a relay or proxy agent\
    \ receives an answer with a Result-Code AVP\n   indicating a failure, it MUST\
    \ NOT modify the contents of the AVP.\n   Any additional local errors detected\
    \ SHOULD be logged but not\n   reflected in the Result-Code AVP.  If the agent\
    \ receives an answer\n   message with a Result-Code AVP indicating success, and\
    \ it wishes to\n   modify the AVP to indicate an error, it MUST modify the Result-Code\n\
    \   AVP to contain the appropriate error in the message destined towards\n   the\
    \ access device as well as include the Error-Reporting-Host AVP; it\n   MUST also\
    \ issue an STR on behalf of the access device towards the\n   Diameter server.\n\
    \   The agent MUST then send the answer to the host that it received the\n   original\
    \ request from.\n"
- title: 6.3.  Origin-Host AVP
  contents:
  - "6.3.  Origin-Host AVP\n   The Origin-Host AVP (AVP Code 264) is of type DiameterIdentity,\
    \ and\n   it MUST be present in all Diameter messages.  This AVP identifies the\n\
    \   endpoint that originated the Diameter message.  Relay agents MUST NOT\n  \
    \ modify this AVP.\n   The value of the Origin-Host AVP is guaranteed to be unique\
    \ within a\n   single host.\n   Note that the Origin-Host AVP may resolve to more\
    \ than one address as\n   the Diameter peer may support more than one address.\n\
    \   This AVP SHOULD be placed as close to the Diameter header as\n   possible.\n"
- title: 6.4.  Origin-Realm AVP
  contents:
  - "6.4.  Origin-Realm AVP\n   The Origin-Realm AVP (AVP Code 296) is of type DiameterIdentity.\n\
    \   This AVP contains the Realm of the originator of any Diameter message\n  \
    \ and MUST be present in all messages.\n   This AVP SHOULD be placed as close\
    \ to the Diameter header as\n   possible.\n"
- title: 6.5.  Destination-Host AVP
  contents:
  - "6.5.  Destination-Host AVP\n   The Destination-Host AVP (AVP Code 293) is of\
    \ type DiameterIdentity.\n   This AVP MUST be present in all unsolicited agent\
    \ initiated messages,\n   MAY be present in request messages, and MUST NOT be\
    \ present in answer\n   messages.\n   The absence of the Destination-Host AVP\
    \ will cause a message to be\n   sent to any Diameter server supporting the application\
    \ within the\n   realm specified in Destination-Realm AVP.\n   This AVP SHOULD\
    \ be placed as close to the Diameter header as\n   possible.\n"
- title: 6.6.  Destination-Realm AVP
  contents:
  - "6.6.  Destination-Realm AVP\n   The Destination-Realm AVP (AVP Code 283) is of\
    \ type DiameterIdentity\n   and contains the realm to which the message is to\
    \ be routed.  The\n   Destination-Realm AVP MUST NOT be present in answer messages.\n\
    \   Diameter clients insert the realm portion of the User-Name AVP.\n   Diameter\
    \ servers initiating a request message use the value of the\n   Origin-Realm AVP\
    \ from a previous message received from the intended\n   target host (unless it\
    \ is known a priori).  When present, the\n   Destination-Realm AVP is used to\
    \ perform message routing decisions.\n   The CCF for a request message that includes\
    \ the Destination-Realm AVP\n   SHOULD list the Destination-Realm AVP as a required\
    \ AVP (an AVP\n   indicated as {AVP}); otherwise, the message is inherently a\
    \ non-\n   routable message.\n   This AVP SHOULD be placed as close to the Diameter\
    \ header as\n   possible.\n"
- title: 6.7.  Routing AVPs
  contents:
  - "6.7.  Routing AVPs\n   The AVPs defined in this section are Diameter AVPs used\
    \ for routing\n   purposes.  These AVPs change as Diameter messages are processed\
    \ by\n   agents.\n"
- title: 6.7.1.  Route-Record AVP
  contents:
  - "6.7.1.  Route-Record AVP\n   The Route-Record AVP (AVP Code 282) is of type DiameterIdentity.\
    \  The\n   identity added in this AVP MUST be the same as the one received in\n\
    \   the Origin-Host of the Capabilities Exchange message.\n"
- title: 6.7.2.  Proxy-Info AVP
  contents:
  - "6.7.2.  Proxy-Info AVP\n   The Proxy-Info AVP (AVP Code 284) is of type Grouped.\
    \  This AVP\n   contains the identity and local state information of the Diameter\n\
    \   node that creates and adds it to a message.  The Grouped Data field\n   has\
    \ the following CCF grammar:\n         Proxy-Info ::= < AVP Header: 284 >\n  \
    \                      { Proxy-Host }\n                        { Proxy-State }\n\
    \                      * [ AVP ]\n"
- title: 6.7.3.  Proxy-Host AVP
  contents:
  - "6.7.3.  Proxy-Host AVP\n   The Proxy-Host AVP (AVP Code 280) is of type DiameterIdentity.\
    \  This\n   AVP contains the identity of the host that added the Proxy-Info AVP.\n"
- title: 6.7.4.  Proxy-State AVP
  contents:
  - "6.7.4.  Proxy-State AVP\n   The Proxy-State AVP (AVP Code 33) is of type OctetString.\
    \  It\n   contains state information that would otherwise be stored at the\n \
    \  Diameter entity that created it.  As such, this AVP MUST be treated\n   as\
    \ opaque data by other Diameter entities.\n"
- title: 6.8.  Auth-Application-Id AVP
  contents:
  - "6.8.  Auth-Application-Id AVP\n   The Auth-Application-Id AVP (AVP Code 258)\
    \ is of type Unsigned32 and\n   is used in order to advertise support of the Authentication\
    \ and\n   Authorization portion of an application (see Section 2.4).  If\n   present\
    \ in a message other than CER and CEA, the value of the Auth-\n   Application-Id\
    \ AVP MUST match the Application Id present in the\n   Diameter message header.\n"
- title: 6.9.  Acct-Application-Id AVP
  contents:
  - "6.9.  Acct-Application-Id AVP\n   The Acct-Application-Id AVP (AVP Code 259)\
    \ is of type Unsigned32 and\n   is used in order to advertise support of the accounting\
    \ portion of an\n   application (see Section 2.4).  If present in a message other\
    \ than\n   CER and CEA, the value of the Acct-Application-Id AVP MUST match the\n\
    \   Application Id present in the Diameter message header.\n"
- title: 6.10.  Inband-Security-Id AVP
  contents:
  - "6.10.  Inband-Security-Id AVP\n   The Inband-Security-Id AVP (AVP Code 299) is\
    \ of type Unsigned32 and\n   is used in order to advertise support of the security\
    \ portion of the\n   application.  The use of this AVP in CER and CEA messages\
    \ is NOT\n   RECOMMENDED.  Instead, discovery of a Diameter entity's security\n\
    \   capabilities can be done either through static configuration or via\n   Diameter\
    \ Peer Discovery as described in Section 5.2.\n   The following values are supported:\n\
    \   NO_INBAND_SECURITY 0\n      This peer does not support TLS/TCP and DTLS/SCTP.\
    \  This is the\n      default value, if the AVP is omitted.\n   TLS 1\n      This\
    \ node supports TLS/TCP [RFC5246] and DTLS/SCTP [RFC6083]\n      security.\n"
- title: 6.11.  Vendor-Specific-Application-Id AVP
  contents:
  - "6.11.  Vendor-Specific-Application-Id AVP\n   The Vendor-Specific-Application-Id\
    \ AVP (AVP Code 260) is of type\n   Grouped and is used to advertise support of\
    \ a vendor-specific\n   Diameter application.  Exactly one instance of either\
    \ Auth-\n   Application-Id or Acct-Application-Id AVP MUST be present.  The\n\
    \   Application Id carried by either Auth-Application-Id or Acct-\n   Application-Id\
    \ AVP MUST comply with vendor-specific Application Id\n   assignment described\
    \ in Section 11.3.  It MUST also match the\n   Application Id present in the Diameter\
    \ header except when used in a\n   CER or CEA message.\n   The Vendor-Id AVP is\
    \ an informational AVP pertaining to the vendor\n   who may have authorship of\
    \ the vendor-specific Diameter application.\n   It MUST NOT be used as a means\
    \ of defining a completely separate\n   vendor-specific Application Id space.\n\
    \   The Vendor-Specific-Application-Id AVP SHOULD be placed as close to\n   the\
    \ Diameter header as possible.\n      AVP Format\n      <Vendor-Specific-Application-Id>\
    \ ::= < AVP Header: 260 >\n                                           { Vendor-Id\
    \ }\n                                           [ Auth-Application-Id ]\n    \
    \                                       [ Acct-Application-Id ]\n   A Vendor-Specific-Application-Id\
    \ AVP MUST contain exactly one of\n   either Auth-Application-Id or Acct-Application-Id.\
    \  If a Vendor-\n   Specific-Application-Id is received without one of these two\
    \ AVPs,\n   then the recipient SHOULD issue an answer with a Result-Code set to\n\
    \   DIAMETER_MISSING_AVP.  The answer SHOULD also include a Failed-AVP,\n   which\
    \ MUST contain an example of an Auth-Application-Id AVP and an\n   Acct-Application-Id\
    \ AVP.\n   If a Vendor-Specific-Application-Id is received that contains both\n\
    \   Auth-Application-Id and Acct-Application-Id, then the recipient MUST\n   issue\
    \ an answer with Result-Code set to\n   DIAMETER_AVP_OCCURS_TOO_MANY_TIMES.  The\
    \ answer MUST also include a\n   Failed-AVP, which MUST contain the received Auth-Application-Id\
    \ AVP\n   and Acct-Application-Id AVP.\n"
- title: 6.12.  Redirect-Host AVP
  contents:
  - "6.12.  Redirect-Host AVP\n   The Redirect-Host AVP (AVP Code 292) is of type\
    \ DiameterURI.  One or\n   more instances of this AVP MUST be present if the answer\
    \ message's\n   'E' bit is set and the Result-Code AVP is set to\n   DIAMETER_REDIRECT_INDICATION.\n\
    \   Upon receiving the above, the receiving Diameter node SHOULD forward\n   the\
    \ request directly to one of the hosts identified in these AVPs.\n   The server\
    \ contained in the selected Redirect-Host AVP SHOULD be used\n   for all messages\
    \ matching the criteria set by the Redirect-Host-Usage\n   AVP.\n"
- title: 6.13.  Redirect-Host-Usage AVP
  contents:
  - "6.13.  Redirect-Host-Usage AVP\n   The Redirect-Host-Usage AVP (AVP Code 261)\
    \ is of type Enumerated.\n   This AVP MAY be present in answer messages whose\
    \ 'E' bit is set and\n   the Result-Code AVP is set to DIAMETER_REDIRECT_INDICATION.\n\
    \   When present, this AVP provides hints about how the routing entry\n   resulting\
    \ from the Redirect-Host is to be used.  The following values\n   are supported:\n\
    \   DONT_CACHE 0\n      The host specified in the Redirect-Host AVP SHOULD NOT\
    \ be cached.\n      This is the default value.\n   ALL_SESSION 1\n      All messages\
    \ within the same session, as defined by the same value\n      of the Session-ID\
    \ AVP SHOULD be sent to the host specified in the\n      Redirect-Host AVP.\n\
    \   ALL_REALM 2\n      All messages destined for the realm requested SHOULD be\
    \ sent to\n      the host specified in the Redirect-Host AVP.\n   REALM_AND_APPLICATION\
    \ 3\n      All messages for the application requested to the realm specified\n\
    \      SHOULD be sent to the host specified in the Redirect-Host AVP.\n   ALL_APPLICATION\
    \ 4\n      All messages for the application requested SHOULD be sent to the\n\
    \      host specified in the Redirect-Host AVP.\n   ALL_HOST 5\n      All messages\
    \ that would be sent to the host that generated the\n      Redirect-Host SHOULD\
    \ be sent to the host specified in the\n      Redirect-Host AVP.\n   ALL_USER\
    \ 6\n      All messages for the user requested SHOULD be sent to the host\n  \
    \    specified in the Redirect-Host AVP.\n   When multiple cached routes are created\
    \ by redirect indications and\n   they differ only in redirect usage and peers\
    \ to forward requests to\n   (see Section 6.1.8), a precedence rule MUST be applied\
    \ to the\n   redirect usage values of the cached routes during normal routing\
    \ to\n   resolve contentions that may occur.  The precedence rule is the order\n\
    \   that dictate which redirect usage should be considered before any\n   other\
    \ as they appear.  The order is as follows:\n   1.  ALL_SESSION\n   2.  ALL_USER\n\
    \   3.  REALM_AND_APPLICATION\n   4.  ALL_REALM\n   5.  ALL_APPLICATION\n   6.\
    \  ALL_HOST\n"
- title: 6.14.  Redirect-Max-Cache-Time AVP
  contents:
  - "6.14.  Redirect-Max-Cache-Time AVP\n   The Redirect-Max-Cache-Time AVP (AVP Code\
    \ 262) is of type Unsigned32.\n   This AVP MUST be present in answer messages\
    \ whose 'E' bit is set,\n   whose Result-Code AVP is set to DIAMETER_REDIRECT_INDICATION,\
    \ and\n   whose Redirect-Host-Usage AVP set to a non-zero value.\n   This AVP\
    \ contains the maximum number of seconds the peer and route\n   table entries,\
    \ created as a result of the Redirect-Host, SHOULD be\n   cached.  Note that once\
    \ a host is no longer reachable, any associated\n   cache, peer, and routing table\
    \ entries MUST be deleted.\n"
- title: 7.  Error Handling
  contents:
  - "7.  Error Handling\n   There are two different types of errors in Diameter; protocol\
    \ errors\n   and application errors.  A protocol error is one that occurs at the\n\
    \   base protocol level and MAY require per-hop attention (e.g., a\n   message\
    \ routing error).  Application errors, on the other hand,\n   generally occur\
    \ due to a problem with a function specified in a\n   Diameter application (e.g.,\
    \ user authentication, missing AVP).\n   Result-Code AVP values that are used\
    \ to report protocol errors MUST\n   only be present in answer messages whose\
    \ 'E' bit is set.  When a\n   request message is received that causes a protocol\
    \ error, an answer\n   message is returned with the 'E' bit set, and the Result-Code\
    \ AVP is\n   set to the appropriate protocol error value.  As the answer is sent\n\
    \   back towards the originator of the request, each proxy or relay agent\n  \
    \ MAY take action on the message.\n                          1. Request      \
    \  +---------+ Link Broken\n                +-------------------------->|Diameter\
    \ |----///----+\n                |     +---------------------|         |     \
    \      v\n         +------+--+  | 2. answer + 'E' set | Relay 2 |     +--------+\n\
    \         |Diameter |<-+ (Unable to Forward) +---------+     |Diameter|\n    \
    \     |         |                                        |  Home  |\n        \
    \ | Relay 1 |--+                     +---------+     | Server |\n         +---------+\
    \  |   3. Request        |Diameter |     +--------+\n                      +-------------------->|\
    \         |           ^\n                                            | Relay 3\
    \ |-----------+\n                                            +---------+\n   \
    \     Figure 7: Example of Protocol Error Causing Answer Message\n   Figure 7\
    \ provides an example of a message forwarded upstream by a\n   Diameter relay.\
    \  When the message is received by Relay 2, and it\n   detects that it cannot\
    \ forward the request to the home server, an\n   answer message is returned with\
    \ the 'E' bit set and the Result-Code\n   AVP set to DIAMETER_UNABLE_TO_DELIVER.\
    \  Given that this error falls\n   within the protocol error category, Relay 1\
    \ would take special\n   action, and given the error, attempt to route the message\
    \ through its\n   alternate Relay 3.\n            +---------+ 1. Request  +---------+\
    \ 2. Request  +---------+\n            | Access  |------------>|Diameter |------------>|Diameter\
    \ |\n            |         |             |         |             |  Home   |\n\
    \            | Device  |<------------|  Relay  |<------------| Server  |\n   \
    \         +---------+  4. Answer  +---------+  3. Answer  +---------+\n      \
    \                 (Missing AVP)           (Missing AVP)\n           Figure 8:\
    \ Example of Application Error Answer Message\n   Figure 8 provides an example\
    \ of a Diameter message that caused an\n   application error.  When application\
    \ errors occur, the Diameter\n   entity reporting the error clears the 'R' bit\
    \ in the Command Flags\n   and adds the Result-Code AVP with the proper value.\
    \  Application\n   errors do not require any proxy or relay agent involvement;\n\
    \   therefore, the message would be forwarded back to the originator of\n   the\
    \ request.\n   In the case where the answer message itself contains errors, any\n\
    \   related session SHOULD be terminated by sending an STR or ASR\n   message.\
    \  The Termination-Cause AVP in the STR MAY be filled with the\n   appropriate\
    \ value to indicate the cause of the error.  An application\n   MAY also send\
    \ an application-specific request instead of an STR or\n   ASR message to signal\
    \ the error in the case where no state is\n   maintained or to allow for some\
    \ form of error recovery with the\n   corresponding Diameter entity.\n   There\
    \ are certain Result-Code AVP application errors that require\n   additional AVPs\
    \ to be present in the answer.  In these cases, the\n   Diameter node that sets\
    \ the Result-Code AVP to indicate the error\n   MUST add the AVPs.  Examples are\
    \ as follows:\n   o  A request with an unrecognized AVP is received with the 'M'\
    \ bit\n      (Mandatory bit) set causes an answer to be sent with the Result-\n\
    \      Code AVP set to DIAMETER_AVP_UNSUPPORTED and the Failed-AVP AVP\n     \
    \ containing the offending AVP.\n   o  A request with an AVP that is received\
    \ with an unrecognized value\n      causes an answer to be returned with the Result-Code\
    \ AVP set to\n      DIAMETER_INVALID_AVP_VALUE, with the Failed-AVP AVP containing\
    \ the\n      AVP causing the error.\n   o  A received command that is missing\
    \ AVPs that are defined as\n      required in the commands CCF; examples are AVPs\
    \ indicated as\n      {AVP}.  The receiver issues an answer with the Result-Code\
    \ set to\n      DIAMETER_MISSING_AVP and creates an AVP with the AVP Code and\n\
    \      other fields set as expected in the missing AVP.  The created AVP\n   \
    \   is then added to the Failed-AVP AVP.\n   The Result-Code AVP describes the\
    \ error that the Diameter node\n   encountered in its processing.  In case there\
    \ are multiple errors,\n   the Diameter node MUST report only the first error\
    \ it encountered\n   (detected possibly in some implementation-dependent order).\
    \  The\n   specific errors that can be described by this AVP are described in\n\
    \   the following section.\n"
- title: 7.1.  Result-Code AVP
  contents:
  - "7.1.  Result-Code AVP\n   The Result-Code AVP (AVP Code 268) is of type Unsigned32\
    \ and\n   indicates whether a particular request was completed successfully or\n\
    \   an error occurred.  All Diameter answer messages in IETF-defined\n   Diameter\
    \ application specifications MUST include one Result-Code AVP.\n   A non-successful\
    \ Result-Code AVP (one containing a non-2xxx value\n   other than DIAMETER_REDIRECT_INDICATION)\
    \ MUST include the Error-\n   Reporting-Host AVP if the host setting the Result-Code\
    \ AVP is\n   different from the identity encoded in the Origin-Host AVP.\n   The\
    \ Result-Code data field contains an IANA-managed 32-bit address\n   space representing\
    \ errors (see Section 11.3.2).  Diameter provides\n   the following classes of\
    \ errors, all identified by the thousands\n   digit in the decimal notation:\n\
    \   o  1xxx (Informational)\n   o  2xxx (Success)\n   o  3xxx (Protocol Errors)\n\
    \   o  4xxx (Transient Failures)\n   o  5xxx (Permanent Failure)\n   An unrecognized\
    \ class (one whose first digit is not defined in this\n   section) MUST be handled\
    \ as a permanent failure.\n"
- title: 7.1.1.  Informational
  contents:
  - "7.1.1.  Informational\n   Errors that fall within this category are used to inform\
    \ the\n   requester that a request could not be satisfied, and additional\n  \
    \ action is required on its part before access is granted.\n   DIAMETER_MULTI_ROUND_AUTH\
    \ 1001\n      This informational error is returned by a Diameter server to\n \
    \     inform the access device that the authentication mechanism being\n     \
    \ used requires multiple round trips, and a subsequent request needs\n      to\
    \ be issued in order for access to be granted.\n"
- title: 7.1.2.  Success
  contents:
  - "7.1.2.  Success\n   Errors that fall within the Success category are used to\
    \ inform a\n   peer that a request has been successfully completed.\n   DIAMETER_SUCCESS\
    \ 2001\n      The request was successfully completed.\n   DIAMETER_LIMITED_SUCCESS\
    \ 2002\n      When returned, the request was successfully completed, but\n   \
    \   additional processing is required by the application in order to\n      provide\
    \ service to the user.\n"
- title: 7.1.3.  Protocol Errors
  contents:
  - "7.1.3.  Protocol Errors\n   Errors that fall within the Protocol Error category\
    \ SHOULD be treated\n   on a per-hop basis, and Diameter proxies MAY attempt to\
    \ correct the\n   error, if it is possible.  Note that these errors MUST only\
    \ be used\n   in answer messages whose 'E' bit is set.\n   DIAMETER_COMMAND_UNSUPPORTED\
    \ 3001\n      This error code is used when a Diameter entity receives a message\n\
    \      with a Command Code that it does not support.\n   DIAMETER_UNABLE_TO_DELIVER\
    \ 3002\n      This error is given when Diameter cannot deliver the message to\n\
    \      the destination, either because no host within the realm\n      supporting\
    \ the required application was available to process the\n      request or because\
    \ the Destination-Host AVP was given without the\n      associated Destination-Realm\
    \ AVP.\n   DIAMETER_REALM_NOT_SERVED 3003\n      The intended realm of the request\
    \ is not recognized.\n   DIAMETER_TOO_BUSY 3004\n      When returned, a Diameter\
    \ node SHOULD attempt to send the message\n      to an alternate peer.  This error\
    \ MUST only be used when a\n      specific server is requested, and it cannot\
    \ provide the requested\n      service.\n   DIAMETER_LOOP_DETECTED 3005\n    \
    \  An agent detected a loop while trying to get the message to the\n      intended\
    \ recipient.  The message MAY be sent to an alternate peer,\n      if one is available,\
    \ but the peer reporting the error has\n      identified a configuration problem.\n\
    \   DIAMETER_REDIRECT_INDICATION 3006\n      A redirect agent has determined that\
    \ the request could not be\n      satisfied locally, and the initiator of the\
    \ request SHOULD direct\n      the request directly to the server, whose contact\
    \ information has\n      been added to the response.  When set, the Redirect-Host\
    \ AVP MUST\n      be present.\n   DIAMETER_APPLICATION_UNSUPPORTED 3007\n    \
    \  A request was sent for an application that is not supported.\n   DIAMETER_INVALID_HDR_BITS\
    \ 3008\n      A request was received whose bits in the Diameter header were set\n\
    \      either to an invalid combination or to a value that is\n      inconsistent\
    \ with the Command Code's definition.\n   DIAMETER_INVALID_AVP_BITS 3009\n   \
    \   A request was received that included an AVP whose flag bits are\n      set\
    \ to an unrecognized value or that is inconsistent with the\n      AVP's definition.\n\
    \   DIAMETER_UNKNOWN_PEER 3010\n      A CER was received from an unknown peer.\n"
- title: 7.1.4.  Transient Failures
  contents:
  - "7.1.4.  Transient Failures\n   Errors that fall within the transient failures\
    \ category are used to\n   inform a peer that the request could not be satisfied\
    \ at the time it\n   was received but MAY be able to satisfy the request in the\
    \ future.\n   Note that these errors MUST be used in answer messages whose 'E'\
    \ bit\n   is not set.\n   DIAMETER_AUTHENTICATION_REJECTED 4001\n      The authentication\
    \ process for the user failed, most likely due to\n      an invalid password used\
    \ by the user.  Further attempts MUST only\n      be tried after prompting the\
    \ user for a new password.\n   DIAMETER_OUT_OF_SPACE 4002\n      A Diameter node\
    \ received the accounting request but was unable to\n      commit it to stable\
    \ storage due to a temporary lack of space.\n   ELECTION_LOST 4003\n      The\
    \ peer has determined that it has lost the election process and\n      has therefore\
    \ disconnected the transport connection.\n"
- title: 7.1.5.  Permanent Failures
  contents:
  - "7.1.5.  Permanent Failures\n   Errors that fall within the permanent failures\
    \ category are used to\n   inform the peer that the request failed and should\
    \ not be attempted\n   again.  Note that these errors SHOULD be used in answer\
    \ messages\n   whose 'E' bit is not set.  In error conditions where it is not\n\
    \   possible or efficient to compose application-specific answer grammar,\n  \
    \ answer messages with the 'E' bit set and which comply to the grammar\n   described\
    \ in Section 7.2 MAY also be used for permanent errors.\n   DIAMETER_AVP_UNSUPPORTED\
    \ 5001\n      The peer received a message that contained an AVP that is not\n\
    \      recognized or supported and was marked with the 'M' (Mandatory)\n     \
    \ bit.  A Diameter message with this error MUST contain one or more\n      Failed-AVP\
    \ AVPs containing the AVPs that caused the failure.\n   DIAMETER_UNKNOWN_SESSION_ID\
    \ 5002\n      The request contained an unknown Session-Id.\n   DIAMETER_AUTHORIZATION_REJECTED\
    \ 5003\n      A request was received for which the user could not be authorized.\n\
    \      This error could occur if the service requested is not permitted\n    \
    \  to the user.\n   DIAMETER_INVALID_AVP_VALUE 5004\n      The request contained\
    \ an AVP with an invalid value in its data\n      portion.  A Diameter message\
    \ indicating this error MUST include\n      the offending AVPs within a Failed-AVP\
    \ AVP.\n   DIAMETER_MISSING_AVP 5005\n      The request did not contain an AVP\
    \ that is required by the Command\n      Code definition.  If this value is sent\
    \ in the Result-Code AVP, a\n      Failed-AVP AVP SHOULD be included in the message.\
    \  The Failed-AVP\n      AVP MUST contain an example of the missing AVP complete\
    \ with the\n      Vendor-Id if applicable.  The value field of the missing AVP\n\
    \      should be of correct minimum length and contain zeroes.\n   DIAMETER_RESOURCES_EXCEEDED\
    \ 5006\n      A request was received that cannot be authorized because the user\n\
    \      has already expended allowed resources.  An example of this error\n   \
    \   condition is when a user that is restricted to one dial-up PPP\n      port\
    \ attempts to establish a second PPP connection.\n   DIAMETER_CONTRADICTING_AVPS\
    \ 5007\n      The Home Diameter server has detected AVPs in the request that\n\
    \      contradicted each other, and it is not willing to provide service\n   \
    \   to the user.  The Failed-AVP AVP MUST be present, which contain\n      the\
    \ AVPs that contradicted each other.\n   DIAMETER_AVP_NOT_ALLOWED 5008\n     \
    \ A message was received with an AVP that MUST NOT be present.  The\n      Failed-AVP\
    \ AVP MUST be included and contain a copy of the\n      offending AVP.\n   DIAMETER_AVP_OCCURS_TOO_MANY_TIMES\
    \ 5009\n      A message was received that included an AVP that appeared more\n\
    \      often than permitted in the message definition.  The Failed-AVP\n     \
    \ AVP MUST be included and contain a copy of the first instance of\n      the\
    \ offending AVP that exceeded the maximum number of occurrences.\n   DIAMETER_NO_COMMON_APPLICATION\
    \ 5010\n      This error is returned by a Diameter node that receives a CER\n\
    \      whereby no applications are common between the CER sending peer\n     \
    \ and the CER receiving peer.\n   DIAMETER_UNSUPPORTED_VERSION 5011\n      This\
    \ error is returned when a request was received, whose version\n      number is\
    \ unsupported.\n   DIAMETER_UNABLE_TO_COMPLY 5012\n      This error is returned\
    \ when a request is rejected for unspecified\n      reasons.\n   DIAMETER_INVALID_BIT_IN_HEADER\
    \ 5013\n      This error is returned when a reserved bit in the Diameter header\n\
    \      is set to one (1) or the bits in the Diameter header are set\n      incorrectly.\n\
    \   DIAMETER_INVALID_AVP_LENGTH 5014\n      The request contained an AVP with\
    \ an invalid length.  A Diameter\n      message indicating this error MUST include\
    \ the offending AVPs\n      within a Failed-AVP AVP.  In cases where the erroneous\
    \ AVP length\n      value exceeds the message length or is less than the minimum\
    \ AVP\n      header length, it is sufficient to include the offending AVP\n  \
    \    header and a zero filled payload of the minimum required length\n      for\
    \ the payloads data type.  If the AVP is a Grouped AVP, the\n      Grouped AVP\
    \ header with an empty payload would be sufficient to\n      indicate the offending\
    \ AVP.  In the case where the offending AVP\n      header cannot be fully decoded\
    \ when the AVP length is less than\n      the minimum AVP header length, it is\
    \ sufficient to include an\n      offending AVP header that is formulated by padding\
    \ the incomplete\n      AVP header with zero up to the minimum AVP header length.\n\
    \   DIAMETER_INVALID_MESSAGE_LENGTH 5015\n      This error is returned when a\
    \ request is received with an invalid\n      message length.\n   DIAMETER_INVALID_AVP_BIT_COMBO\
    \ 5016\n      The request contained an AVP with which is not allowed to have the\n\
    \      given value in the AVP Flags field.  A Diameter message indicating\n  \
    \    this error MUST include the offending AVPs within a Failed-AVP\n      AVP.\n\
    \   DIAMETER_NO_COMMON_SECURITY 5017\n      This error is returned when a CER\
    \ message is received, and there\n      are no common security mechanisms supported\
    \ between the peers.  A\n      Capabilities-Exchange-Answer (CEA) message MUST\
    \ be returned with\n      the Result-Code AVP set to DIAMETER_NO_COMMON_SECURITY.\n"
- title: 7.2.  Error Bit
  contents:
  - "7.2.  Error Bit\n   The 'E' (Error Bit) in the Diameter header is set when the\
    \ request\n   caused a protocol-related error (see Section 7.1.3).  A message\
    \ with\n   the 'E' bit MUST NOT be sent as a response to an answer message.\n\
    \   Note that a message with the 'E' bit set is still subjected to the\n   processing\
    \ rules defined in Section 6.2.  When set, the answer\n   message will not conform\
    \ to the CCF specification for the command;\n   instead, it and will conform to\
    \ the following CCF:\n      Message Format\n      <answer-message> ::= < Diameter\
    \ Header: code, ERR [, PXY] >\n                        0*1< Session-Id >\n   \
    \                        { Origin-Host }\n                           { Origin-Realm\
    \ }\n                           { Result-Code }\n                           [\
    \ Origin-State-Id ]\n                           [ Error-Message ]\n          \
    \                 [ Error-Reporting-Host ]\n                           [ Failed-AVP\
    \ ]\n                           [ Experimental-Result ]\n                    \
    \     * [ Proxy-Info ]\n                         * [ AVP ]\n   Note that the code\
    \ used in the header is the same than the one found\n   in the request message,\
    \ but with the 'R' bit cleared and the 'E' bit\n   set.  The 'P' bit in the header\
    \ is set to the same value as the one\n   found in the request message.\n"
- title: 7.3.  Error-Message AVP
  contents:
  - "7.3.  Error-Message AVP\n   The Error-Message AVP (AVP Code 281) is of type UTF8String.\
    \  It MAY\n   accompany a Result-Code AVP as a human-readable error message. \
    \ The\n   Error-Message AVP is not intended to be useful in an environment\n \
    \  where error messages are processed automatically.  It SHOULD NOT be\n   expected\
    \ that the content of this AVP be parsed by network entities.\n"
- title: 7.4.  Error-Reporting-Host AVP
  contents:
  - "7.4.  Error-Reporting-Host AVP\n   The Error-Reporting-Host AVP (AVP Code 294)\
    \ is of type\n   DiameterIdentity.  This AVP contains the identity of the Diameter\n\
    \   host that sent the Result-Code AVP to a value other than 2001\n   (Success),\
    \ only if the host setting the Result-Code is different from\n   the one encoded\
    \ in the Origin-Host AVP.  This AVP is intended to be\n   used for troubleshooting\
    \ purposes, and it MUST be set when the\n   Result-Code AVP indicates a failure.\n"
- title: 7.5.  Failed-AVP AVP
  contents:
  - "7.5.  Failed-AVP AVP\n   The Failed-AVP AVP (AVP Code 279) is of type Grouped\
    \ and provides\n   debugging information in cases where a request is rejected\
    \ or not\n   fully processed due to erroneous information in a specific AVP. \
    \ The\n   value of the Result-Code AVP will provide information on the reason\n\
    \   for the Failed-AVP AVP.  A Diameter answer message SHOULD contain an\n   instance\
    \ of the Failed-AVP AVP that corresponds to the error\n   indicated by the Result-Code\
    \ AVP.  For practical purposes, this\n   Failed-AVP would typically refer to the\
    \ first AVP processing error\n   that a Diameter node encounters.\n   The possible\
    \ reasons for this AVP are the presence of an improperly\n   constructed AVP,\
    \ an unsupported or unrecognized AVP, an invalid AVP\n   value, the omission of\
    \ a required AVP, the presence of an explicitly\n   excluded AVP (see tables in\
    \ Section 10) or the presence of two or\n   more occurrences of an AVP that is\
    \ restricted to 0, 1, or 0-1\n   occurrences.\n   A Diameter message SHOULD contain\
    \ one Failed-AVP AVP, containing the\n   entire AVP that could not be processed\
    \ successfully.  If the failure\n   reason is omission of a required AVP, an AVP\
    \ with the missing AVP\n   code, the missing Vendor-Id, and a zero-filled payload\
    \ of the minimum\n   required length for the omitted AVP will be added.  If the\
    \ failure\n   reason is an invalid AVP length where the reported length is less\n\
    \   than the minimum AVP header length or greater than the reported\n   message\
    \ length, a copy of the offending AVP header and a zero-filled\n   payload of\
    \ the minimum required length SHOULD be added.\n   In the case where the offending\
    \ AVP is embedded within a Grouped AVP,\n   the Failed-AVP MAY contain the grouped\
    \ AVP, which in turn contains\n   the single offending AVP.  The same method MAY\
    \ be employed if the\n   grouped AVP itself is embedded in yet another grouped\
    \ AVP and so on.\n   In this case, the Failed-AVP MAY contain the grouped AVP\
    \ hierarchy up\n   to the single offending AVP.  This enables the recipient to\
    \ detect\n   the location of the offending AVP when embedded in a group.\n   AVP\
    \ Format\n         <Failed-AVP> ::= < AVP Header: 279 >\n                    \
    \   1* {AVP}\n"
- title: 7.6.  Experimental-Result AVP
  contents:
  - "7.6.  Experimental-Result AVP\n   The Experimental-Result AVP (AVP Code 297)\
    \ is of type Grouped, and\n   indicates whether a particular vendor-specific request\
    \ was completed\n   successfully or whether an error occurred.  This AVP has the\n\
    \   following structure:\n   AVP Format\n         Experimental-Result ::= < AVP\
    \ Header: 297 >\n                                 { Vendor-Id }\n            \
    \                     { Experimental-Result-Code }\n   The Vendor-Id AVP (see\
    \ Section 5.3.3) in this grouped AVP identifies\n   the vendor responsible for\
    \ the assignment of the result code that\n   follows.  All Diameter answer messages\
    \ defined in vendor-specific\n   applications MUST include either one Result-Code\
    \ AVP or one\n   Experimental-Result AVP.\n"
- title: 7.7.  Experimental-Result-Code AVP
  contents:
  - "7.7.  Experimental-Result-Code AVP\n   The Experimental-Result-Code AVP (AVP\
    \ Code 298) is of type Unsigned32\n   and contains a vendor-assigned value representing\
    \ the result of\n   processing the request.\n   It is recommended that vendor-specific\
    \ result codes follow the same\n   conventions given for the Result-Code AVP regarding\
    \ the different\n   types of result codes and the handling of errors (for non-2xxx\n\
    \   values).\n"
- title: 8.  Diameter User Sessions
  contents:
  - "8.  Diameter User Sessions\n   In general, Diameter can provide two different\
    \ types of services to\n   applications.  The first involves authentication and\
    \ authorization,\n   and it can optionally make use of accounting.  The second\
    \ only makes\n   use of accounting.\n   When a service makes use of the authentication\
    \ and/or authorization\n   portion of an application, and a user requests access\
    \ to the network,\n   the Diameter client issues an auth request to its local\
    \ server.  The\n   auth request is defined in a service-specific Diameter application\n\
    \   (e.g., NASREQ).  The request contains a Session-Id AVP, which is used\n  \
    \ in subsequent messages (e.g., subsequent authorization, accounting,\n   etc.)\
    \ relating to the user's session.  The Session-Id AVP is a means\n   for the client\
    \ and servers to correlate a Diameter message with a\n   user session.\n   When\
    \ a Diameter server authorizes a user to implement network\n   resources for a\
    \ finite amount of time, and it is willing to extend\n   the authorization via\
    \ a future request, it MUST add the\n   Authorization- Lifetime AVP to the answer\
    \ message.  The\n   Authorization-Lifetime AVP defines the maximum number of seconds\
    \ a\n   user MAY make use of the resources before another authorization\n   request\
    \ is expected by the server.  The Auth-Grace-Period AVP\n   contains the number\
    \ of seconds following the expiration of the\n   Authorization-Lifetime, after\
    \ which the server will release all state\n   information related to the user's\
    \ session.  Note that if payment for\n   services is expected by the serving realm\
    \ from the user's home realm,\n   the Authorization-Lifetime AVP, combined with\
    \ the Auth-Grace-Period\n   AVP, implies the maximum length of the session for\
    \ which the home\n   realm is willing to be fiscally responsible.  Services provided\
    \ past\n   the expiration of the Authorization-Lifetime and Auth-Grace-Period\n\
    \   AVPs are the responsibility of the access device.  Of course, the\n   actual\
    \ cost of services rendered is clearly outside the scope of the\n   protocol.\n\
    \   An access device that does not expect to send a re-authorization or a\n  \
    \ session termination request to the server MAY include the Auth-\n   Session-State\
    \ AVP with the value set to NO_STATE_MAINTAINED as a hint\n   to the server. \
    \ If the server accepts the hint, it agrees that since\n   no session termination\
    \ message will be received once service to the\n   user is terminated, it cannot\
    \ maintain state for the session.  If the\n   answer message from the server contains\
    \ a different value in the\n   Auth-Session-State AVP (or the default value if\
    \ the AVP is absent),\n   the access device MUST follow the server's directives.\
    \  Note that the\n   value NO_STATE_MAINTAINED MUST NOT be set in subsequent re-\n\
    \   authorization requests and answers.\n   The base protocol does not include\
    \ any authorization request\n   messages, since these are largely application-specific\
    \ and are\n   defined in a Diameter application document.  However, the base\n\
    \   protocol does define a set of messages that are used to terminate\n   user\
    \ sessions.  These are used to allow servers that maintain state\n   information\
    \ to free resources.\n   When a service only makes use of the accounting portion\
    \ of the\n   Diameter protocol, even in combination with an application, the\n\
    \   Session-Id is still used to identify user sessions.  However, the\n   session\
    \ termination messages are not used, since a session is\n   signaled as being\
    \ terminated by issuing an accounting stop message.\n   Diameter may also be used\
    \ for services that cannot be easily\n   categorized as authentication, authorization,\
    \ or accounting (e.g.,\n   certain Third Generation Partnership Project Internet\
    \ Multimedia\n   System (3GPP IMS) interfaces).  In such cases, the finite state\n\
    \   machine defined in subsequent sections may not be applicable.\n   Therefore,\
    \ the application itself MAY need to define its own finite\n   state machine.\
    \  However, such application-specific state machines\n   SHOULD follow the general\
    \ state machine framework outlined in this\n   document such as the use of Session-Id\
    \ AVPs and the use of STR/STA,\n   ASR/ASA messages for stateful sessions.\n"
- title: 8.1.  Authorization Session State Machine
  contents:
  - "8.1.  Authorization Session State Machine\n   This section contains a set of\
    \ finite state machines, which represent\n   the life cycle of Diameter sessions\
    \ and which MUST be observed by all\n   Diameter implementations that make use\
    \ of the authentication and/or\n   authorization portion of a Diameter application.\
    \  The term \"Service-\n   Specific\" below refers to a message defined in a Diameter\
    \ application\n   (e.g., Mobile IPv4, NASREQ).\n   There are four different authorization\
    \ session state machines\n   supported in the Diameter base protocol.  The first\
    \ two describe a\n   session in which the server is maintaining session state,\
    \ indicated\n   by the value of the Auth-Session-State AVP (or its absence). \
    \ One\n   describes the session from a client perspective, the other from a\n\
    \   server perspective.  The second two state machines are used when the\n   server\
    \ does not maintain session state.  Here again, one describes\n   the session\
    \ from a client perspective, the other from a server\n   perspective.\n   When\
    \ a session is moved to the Idle state, any resources that were\n   allocated\
    \ for the particular session must be released.  Any event not\n   listed in the\
    \ state machines MUST be considered an error condition,\n   and an answer, if\
    \ applicable, MUST be returned to the originator of\n   the message.\n   In the\
    \ case that an application does not support re-auth, the state\n   transitions\
    \ related to server-initiated re-auth, when both client and\n   server sessions\
    \ maintain state (e.g., Send RAR, Pending, Receive\n   RAA), MAY be ignored.\n\
    \   In the state table, the event \"Failure to send X\" means that the\n   Diameter\
    \ agent is unable to send command X to the desired\n   destination.  This could\
    \ be due to the peer being down or due to the\n   peer sending back a transient\
    \ failure or temporary protocol error\n   notification DIAMETER_TOO_BUSY or DIAMETER_LOOP_DETECTED\
    \ in the\n   Result-Code AVP of the corresponding Answer command.  The event 'X\n\
    \   successfully sent' is the complement of 'Failure to send X'.\n   The following\
    \ state machine is observed by a client when state is\n   maintained on the server:\n\
    \                              CLIENT, STATEFUL\n      State     Event       \
    \                   Action       New State\n      ---------------------------------------------------------------\n\
    \      Idle      Client or device requests      Send         Pending\n       \
    \         access                         service-\n                          \
    \                     specific\n                                             \
    \  auth req\n      Idle      ASR Received                   Send ASA     Idle\n\
    \                for unknown session            with\n                       \
    \                        Result-Code =\n                                     \
    \          UNKNOWN_\n                                               SESSION_ID\n\
    \      Idle      RAR Received                   Send RAA     Idle\n          \
    \      for unknown session            with\n                                 \
    \              Result-Code =\n                                               UNKNOWN_\n\
    \                                               SESSION_ID\n      Pending   Successful\
    \ service-specific    Grant        Open\n                authorization answer\
    \           Access\n                received with default\n                Auth-Session-State\
    \ value\n      Pending   Successful service-specific    Sent STR     Discon\n\
    \                authorization answer received,\n                but service not\
    \ provided\n      Pending   Error processing successful    Sent STR     Discon\n\
    \                service-specific authorization\n                answer\n    \
    \  Pending   Failed service-specific        Clean up     Idle\n              \
    \  authorization answer received\n      Open      User or client device      \
    \    Send         Open\n                requests access to service     service-\n\
    \                                               specific\n                   \
    \                            auth req\n      Open      Successful service-specific\
    \    Provide      Open\n                authorization answer received  service\n\
    \      Open      Failed service-specific        Discon.      Idle\n          \
    \      authorization answer           user/device\n                received.\n\
    \      Open      RAR received and client will   Send RAA     Open\n          \
    \      perform subsequent re-auth     with\n                                 \
    \              Result-Code =\n                                               SUCCESS\n\
    \      Open      RAR received and client will   Send RAA     Idle\n          \
    \      not perform subsequent         with\n                re-auth          \
    \              Result-Code !=\n                                              \
    \ SUCCESS,\n                                               Discon.\n         \
    \                                      user/device\n      Open      Session-Timeout\
    \ expires on     Send STR     Discon\n                access device\n      Open\
    \      ASR received,                  Send ASA     Discon\n                client\
    \ will comply             with\n                with request to end the      \
    \  Result-Code =\n                session                        = SUCCESS,\n\
    \                                               Send STR.\n      Open      ASR\
    \ Received,                  Send ASA     Open\n                client will not\
    \ comply         with\n                with request to end the        Result-Code\
    \ !=\n                session                        != SUCCESS\n      Open  \
    \    Authorization-Lifetime +       Send STR     Discon\n                Auth-Grace-Period\
    \ expires on\n                access device\n      Discon    ASR received    \
    \               Send ASA     Discon\n      Discon    STA received            \
    \       Discon.      Idle\n                                               user/device\n\
    \   The following state machine is observed by a server when it is\n   maintaining\
    \ state for the session:\n                             SERVER, STATEFUL\n    \
    \  State     Event                          Action       New State\n      ---------------------------------------------------------------\n\
    \      Idle      Service-specific authorization Send         Open\n          \
    \      request received, and          successful\n                user is authorized\
    \             service-\n                                               specific\n\
    \                                               answer\n      Idle      Service-specific\
    \ authorization Send         Idle\n                request received, and     \
    \     failed\n                user is not authorized         service-\n      \
    \                                         specific\n                         \
    \                      answer\n      Open      Service-specific authorization\
    \ Send         Open\n                request received, and user     successful\n\
    \                is authorized                  service-\n                   \
    \                            specific\n                                      \
    \         answer\n      Open      Service-specific authorization Send        \
    \ Idle\n                request received, and user     failed\n              \
    \  is not authorized              service-\n                                 \
    \              specific\n                                               answer,\n\
    \                                               Clean up\n      Open      Home\
    \ server wants to confirm   Send RAR     Pending\n                authentication\
    \ and/or\n                authorization of the user\n      Pending   Received\
    \ RAA with a failed     Clean up     Idle\n                Result-Code\n     \
    \ Pending   Received RAA with Result-Code  Update       Open\n               \
    \ = SUCCESS                      session\n      Open      Home server wants to\
    \           Send ASR     Discon\n                terminate the service\n     \
    \ Open      Authorization-Lifetime (and    Clean up     Idle\n               \
    \ Auth-Grace-Period) expires\n                on home server\n      Open     \
    \ Session-Timeout expires on     Clean up     Idle\n                home server\n\
    \      Discon    Failure to send ASR            Wait,        Discon\n        \
    \                                       resend ASR\n      Discon    ASR successfully\
    \ sent and      Clean up     Idle\n                ASA Received with Result-Code\n\
    \      Not       ASA Received                   None         No Change\n     \
    \ Discon\n      Any       STR Received                   Send STA,    Idle\n \
    \                                              Clean up\n   The following state\
    \ machine is observed by a client when state is not\n   maintained on the server:\n\
    \                              CLIENT, STATELESS\n      State     Event      \
    \                    Action       New State\n      ---------------------------------------------------------------\n\
    \      Idle      Client or device requests      Send         Pending\n       \
    \         access                         service-\n                          \
    \                     specific\n                                             \
    \  auth req\n      Pending   Successful service-specific    Grant        Open\n\
    \                authorization answer           access\n                received\
    \ with Auth-Session-\n                State set to\n                NO_STATE_MAINTAINED\n\
    \      Pending   Failed service-specific        Clean up     Idle\n          \
    \      authorization answer\n                received\n      Open      Session-Timeout\
    \ expires on     Discon.      Idle\n                access device            \
    \      user/device\n      Open      Service to user is terminated  Discon.   \
    \   Idle\n                                               user/device\n   The following\
    \ state machine is observed by a server when it is not\n   maintaining state for\
    \ the session:\n                              SERVER, STATELESS\n      State \
    \    Event                          Action       New State\n      ---------------------------------------------------------------\n\
    \      Idle      Service-specific authorization Send         Idle\n          \
    \      request received, and          service-\n                successfully processed\
    \         specific\n                                               answer\n"
- title: 8.2.  Accounting Session State Machine
  contents:
  - "8.2.  Accounting Session State Machine\n   The following state machines MUST\
    \ be supported for applications that\n   have an accounting portion or that require\
    \ only accounting services.\n   The first state machine is to be observed by clients.\n\
    \   See Section 9.7 for Accounting Command Codes and Section 9.8 for\n   Accounting\
    \ AVPs.\n   The server side in the accounting state machine depends in some cases\n\
    \   on the particular application.  The Diameter base protocol defines a\n   default\
    \ state machine that MUST be followed by all applications that\n   have not specified\
    \ other state machines.  This is the second state\n   machine in this section\
    \ described below.\n   The default server side state machine requires the reception\
    \ of\n   accounting records in any order and at any time, and it does not\n  \
    \ place any standards requirement on the processing of these records.\n   Implementations\
    \ of Diameter may perform checking, ordering,\n   correlation, fraud detection,\
    \ and other tasks based on these records.\n   AVPs may need to be inspected as\
    \ a part of these tasks.  The tasks\n   can happen either immediately after record\
    \ reception or in a post-\n   processing phase.  However, as these tasks are typically\
    \ application\n   or even policy dependent, they are not standardized by the Diameter\n\
    \   specifications.  Applications MAY define requirements on when to\n   accept\
    \ accounting records based on the used value of Accounting-\n   Realtime-Required\
    \ AVP, credit-limit checks, and so on.\n   However, the Diameter base protocol\
    \ defines one optional server side\n   state machine that MAY be followed by applications\
    \ that require\n   keeping track of the session state at the accounting server.\
    \  Note\n   that such tracking is incompatible with the ability to sustain long\n\
    \   duration connectivity problems.  Therefore, the use of this state\n   machine\
    \ is recommended only in applications where the value of the\n   Accounting-Realtime-Required\
    \ AVP is DELIVER_AND_GRANT; hence,\n   accounting connectivity problems are required\
    \ to cause the serviced\n   user to be disconnected.  Otherwise, records produced\
    \ by the client\n   may be lost by the server, which no longer accepts them after\
    \ the\n   connectivity is re-established.  This state machine is the third\n \
    \  state machine in this section.  The state machine is supervised by a\n   supervision\
    \ session timer Ts, whose value should be reasonably higher\n   than the Acct_Interim_Interval\
    \ value.  Ts MAY be set to two times the\n   value of the Acct_Interim_Interval\
    \ so as to avoid the accounting\n   session in the Diameter server to change to\
    \ Idle state in case of\n   short transient network failure.\n   Any event not\
    \ listed in the state machines MUST be considered as an\n   error condition, and\
    \ a corresponding answer, if applicable, MUST be\n   returned to the originator\
    \ of the message.\n   In the state table, the event \"Failure to send\" means\
    \ that the\n   Diameter client is unable to communicate with the desired\n   destination.\
    \  This could be due to the peer being down, or due to the\n   peer sending back\
    \ a transient failure or temporary protocol error\n   notification DIAMETER_OUT_OF_SPACE,\
    \ DIAMETER_TOO_BUSY, or\n   DIAMETER_LOOP_DETECTED in the Result-Code AVP of the\
    \ Accounting\n   Answer command.\n   The event \"Failed answer\" means that the\
    \ Diameter client received a\n   non-transient failure notification in the Accounting\
    \ Answer command.\n   Note that the action \"Disconnect user/dev\" MUST also have\
    \ an effect\n   on the authorization session state table, e.g., cause the STR\
    \ message\n   to be sent, if the given application has both authentication/\n\
    \   authorization and accounting portions.\n   The states PendingS, PendingI,\
    \ PendingL, PendingE, and PendingB stand\n   for pending states to wait for an\
    \ answer to an accounting request\n   related to a Start, Interim, Stop, Event,\
    \ or buffered record,\n   respectively.\n                            CLIENT, ACCOUNTING\n\
    \      State     Event                          Action       New State\n     \
    \ ---------------------------------------------------------------\n      Idle\
    \      Client or device requests      Send         PendingS\n                access\
    \                         accounting\n                                       \
    \        start req.\n      Idle      Client or device requests      Send     \
    \    PendingE\n                a one-time service             accounting\n   \
    \                                            event req\n      Idle      Records\
    \ in storage             Send         PendingB\n                             \
    \                  record\n      PendingS  Successful accounting             \
    \          Open\n                start answer received\n      PendingS  Failure\
    \ to send and buffer     Store        Open\n                space available and\
    \ real time  Start\n                not equal to DELIVER_AND_GRANT Record\n  \
    \    PendingS  Failure to send and no buffer               Open\n            \
    \    space available and real time\n                equal to GRANT_AND_LOSE\n\
    \      PendingS  Failure to send and no         Disconnect   Idle\n          \
    \      buffer space available and     user/dev\n                real time not\
    \ equal to\n                GRANT_AND_LOSE\n      PendingS  Failed accounting\
    \ start answer              Open\n                received and real time equal\n\
    \                to GRANT_AND_LOSE\n      PendingS  Failed accounting start answer\
    \ Disconnect   Idle\n                received and real time not     user/dev\n\
    \                equal to GRANT_AND_LOSE\n      PendingS  User service terminated\
    \        Store        PendingS\n                                             \
    \  stop\n                                               record\n      Open   \
    \   Interim interval elapses       Send         PendingI\n                   \
    \                            accounting\n                                    \
    \           interim\n                                               record\n \
    \     Open      User service terminated        Send         PendingL\n       \
    \                                        accounting\n                        \
    \                       stop req.\n      PendingI  Successful accounting interim\
    \               Open\n                answer received\n      PendingI  Failure\
    \ to send and (buffer    Store        Open\n                space available or\
    \ old         interim\n                record can be overwritten)     record\n\
    \                and real time not equal to\n                DELIVER_AND_GRANT\n\
    \      PendingI  Failure to send and no buffer               Open\n          \
    \      space available and real time\n                equal to GRANT_AND_LOSE\n\
    \      PendingI  Failure to send and no         Disconnect   Idle\n          \
    \      buffer space available and     user/dev\n                real time not\
    \ equal to\n                GRANT_AND_LOSE\n      PendingI  Failed accounting\
    \ interim                   Open\n                answer received and real time\n\
    \                equal to GRANT_AND_LOSE\n      PendingI  Failed accounting interim\
    \      Disconnect   Idle\n                answer received and            user/dev\n\
    \                real time not equal to\n                GRANT_AND_LOSE\n    \
    \  PendingI  User service terminated        Store        PendingI\n          \
    \                                     stop\n                                 \
    \              record\n      PendingE  Successful accounting                 \
    \      Idle\n                event answer received\n      PendingE  Failure to\
    \ send and buffer     Store        Idle\n                space available     \
    \           event\n                                               record\n   \
    \   PendingE  Failure to send and no buffer               Idle\n             \
    \   space available\n      PendingE  Failed accounting event answer          \
    \    Idle\n                received\n      PendingB  Successful accounting answer\
    \   Delete       Idle\n                received                       record\n\
    \      PendingB  Failure to send                             Idle\n      PendingB\
    \  Failed accounting answer       Delete       Idle\n                received\
    \                       record\n      PendingL  Successful accounting        \
    \               Idle\n                stop answer received\n      PendingL  Failure\
    \ to send and buffer     Store        Idle\n                space available  \
    \              stop\n                                               record\n \
    \     PendingL  Failure to send and no buffer               Idle\n           \
    \     space available\n      PendingL  Failed accounting stop answer         \
    \      Idle\n                received\n                       SERVER, STATELESS\
    \ ACCOUNTING\n      State     Event                          Action       New\
    \ State\n      ---------------------------------------------------------------\n\
    \      Idle      Accounting start request       Send         Idle\n          \
    \      received and successfully      accounting\n                processed. \
    \                    start\n                                               answer\n\
    \      Idle      Accounting event request       Send         Idle\n          \
    \      received and successfully      accounting\n                processed. \
    \                    event\n                                               answer\n\
    \      Idle      Interim record received        Send         Idle\n          \
    \      and successfully processed.    accounting\n                           \
    \                    interim\n                                               answer\n\
    \      Idle      Accounting stop request        Send         Idle\n          \
    \      received and successfully      accounting\n                processed  \
    \                    stop answer\n      Idle      Accounting request received;\
    \   Send         Idle\n                no space left to store         accounting\n\
    \                records                        answer;\n                    \
    \                           Result-Code =\n                                  \
    \             OUT_OF_\n                                               SPACE\n\
    \                            SERVER, STATEFUL ACCOUNTING\n      State     Event\
    \                          Action       New State\n      ---------------------------------------------------------------\n\
    \      Idle      Accounting start request       Send         Open\n          \
    \      received and successfully      accounting\n                processed. \
    \                    start\n                                               answer;\n\
    \                                               Start Ts\n      Idle      Accounting\
    \ event request       Send         Idle\n                received and successfully\
    \      accounting\n                processed.                     event\n    \
    \                                           answer\n      Idle      Accounting\
    \ request received;   Send         Idle\n                no space left to store\
    \         accounting\n                records                        answer;\n\
    \                                               Result-Code =\n              \
    \                                 OUT_OF_\n                                  \
    \             SPACE\n      Open      Interim record received        Send     \
    \    Open\n                and successfully processed.    accounting\n       \
    \                                        interim\n                           \
    \                    answer;\n                                               Restart\
    \ Ts\n      Open      Accounting stop request        Send         Idle\n     \
    \           received and successfully      accounting\n                processed\
    \                      stop answer;\n                                        \
    \       Stop Ts\n      Open      Accounting request received;   Send         Idle\n\
    \                no space left to store         accounting\n                records\
    \                        answer;\n                                           \
    \    Result-Code =\n                                               OUT_OF_\n \
    \                                              SPACE;\n                      \
    \                         Stop Ts\n      Open      Session supervision timer Ts\
    \   Stop Ts      Idle\n                expired\n"
- title: 8.3.  Server-Initiated Re-Auth
  contents:
  - "8.3.  Server-Initiated Re-Auth\n   A Diameter server may initiate a re-authentication\
    \ and/or re-\n   authorization service for a particular session by issuing a Re-Auth-\n\
    \   Request (RAR).\n   For example, for prepaid services, the Diameter server\
    \ that\n   originally authorized a session may need some confirmation that the\n\
    \   user is still using the services.\n   An access device that receives an RAR\
    \ message with the Session-Id\n   equal to a currently active session MUST initiate\
    \ a re-auth towards\n   the user, if the service supports this particular feature.\
    \  Each\n   Diameter application MUST state whether server-initiated re-auth is\n\
    \   supported, since some applications do not allow access devices to\n   prompt\
    \ the user for re-auth.\n"
- title: 8.3.1.  Re-Auth-Request
  contents:
  - "8.3.1.  Re-Auth-Request\n   The Re-Auth-Request (RAR), indicated by the Command\
    \ Code set to 258\n   and the message flags' 'R' bit set, may be sent by any server\
    \ to the\n   access device that is providing session service, to request that\
    \ the\n   user be re-authenticated and/or re-authorized.\n    Message Format\n\
    \         <RAR>  ::= < Diameter Header: 258, REQ, PXY >\n                    <\
    \ Session-Id >\n                    { Origin-Host }\n                    { Origin-Realm\
    \ }\n                    { Destination-Realm }\n                    { Destination-Host\
    \ }\n                    { Auth-Application-Id }\n                    { Re-Auth-Request-Type\
    \ }\n                    [ User-Name ]\n                    [ Origin-State-Id\
    \ ]\n                  * [ Proxy-Info ]\n                  * [ Route-Record ]\n\
    \                  * [ AVP ]\n"
- title: 8.3.2.  Re-Auth-Answer
  contents:
  - "8.3.2.  Re-Auth-Answer\n   The Re-Auth-Answer (RAA), indicated by the Command\
    \ Code set to 258\n   and the message flags' 'R' bit clear, is sent in response\
    \ to the RAR.\n   The Result-Code AVP MUST be present, and it indicates the disposition\n\
    \   of the request.\n   A successful RAA message MUST be followed by an application-specific\n\
    \   authentication and/or authorization message.\n    Message Format\n       \
    \  <RAA>  ::= < Diameter Header: 258, PXY >\n                    < Session-Id\
    \ >\n                    { Result-Code }\n                    { Origin-Host }\n\
    \                    { Origin-Realm }\n                    [ User-Name ]\n   \
    \                 [ Origin-State-Id ]\n                    [ Error-Message ]\n\
    \                    [ Error-Reporting-Host ]\n                    [ Failed-AVP\
    \ ]\n                  * [ Redirect-Host ]\n                    [ Redirect-Host-Usage\
    \ ]\n                    [ Redirect-Max-Cache-Time ]\n                  * [ Proxy-Info\
    \ ]\n                  * [ AVP ]\n"
- title: 8.4.  Session Termination
  contents:
  - "8.4.  Session Termination\n   It is necessary for a Diameter server that authorized\
    \ a session, for\n   which it is maintaining state, to be notified when that session\
    \ is no\n   longer active, both for tracking purposes as well as to allow\n  \
    \ stateful agents to release any resources that they may have provided\n   for\
    \ the user's session.  For sessions whose state is not being\n   maintained, this\
    \ section is not used.\n   When a user session that required Diameter authorization\
    \ terminates,\n   the access device that provided the service MUST issue a Session-\n\
    \   Termination-Request (STR) message to the Diameter server that\n   authorized\
    \ the service, to notify it that the session is no longer\n   active.  An STR\
    \ MUST be issued when a user session terminates for any\n   reason, including\
    \ user logoff, expiration of Session-Timeout,\n   administrative action, termination\
    \ upon receipt of an Abort-Session-\n   Request (see below), orderly shutdown\
    \ of the access device, etc.\n   The access device also MUST issue an STR for\
    \ a session that was\n   authorized but never actually started.  This could occur,\
    \ for\n   example, due to a sudden resource shortage in the access device, or\n\
    \   because the access device is unwilling to provide the type of service\n  \
    \ requested in the authorization, or because the access device does not\n   support\
    \ a mandatory AVP returned in the authorization, etc.\n   It is also possible\
    \ that a session that was authorized is never\n   actually started due to action\
    \ of a proxy.  For example, a proxy may\n   modify an authorization answer, converting\
    \ the result from success to\n   failure, prior to forwarding the message to the\
    \ access device.  If\n   the answer did not contain an Auth-Session-State AVP\
    \ with the value\n   NO_STATE_MAINTAINED, a proxy that causes an authorized session\
    \ not to\n   be started MUST issue an STR to the Diameter server that authorized\n\
    \   the session, since the access device has no way of knowing that the\n   session\
    \ had been authorized.\n   A Diameter server that receives an STR message MUST\
    \ clean up\n   resources (e.g., session state) associated with the Session-Id\n\
    \   specified in the STR and return a Session-Termination-Answer.\n   A Diameter\
    \ server also MUST clean up resources when the Session-\n   Timeout expires, or\
    \ when the Authorization-Lifetime and the Auth-\n   Grace-Period AVPs expire without\
    \ receipt of a re-authorization\n   request, regardless of whether an STR for\
    \ that session is received.\n   The access device is not expected to provide service\
    \ beyond the\n   expiration of these timers; thus, expiration of either of these\n\
    \   timers implies that the access device may have unexpectedly shut\n   down.\n"
- title: 8.4.1.  Session-Termination-Request
  contents:
  - "8.4.1.  Session-Termination-Request\n   The Session-Termination-Request (STR),\
    \ indicated by the Command Code\n   set to 275 and the Command Flags' 'R' bit\
    \ set, is sent by a Diameter\n   client or by a Diameter proxy to inform the Diameter\
    \ server that an\n   authenticated and/or authorized session is being terminated.\n\
    \    Message Format\n        <STR>  ::= < Diameter Header: 275, REQ, PXY >\n \
    \                  < Session-Id >\n                   { Origin-Host }\n      \
    \             { Origin-Realm }\n                   { Destination-Realm }\n   \
    \                { Auth-Application-Id }\n                   { Termination-Cause\
    \ }\n                   [ User-Name ]\n                   [ Destination-Host ]\n\
    \                 * [ Class ]\n                   [ Origin-State-Id ]\n      \
    \           * [ Proxy-Info ]\n                 * [ Route-Record ]\n          \
    \       * [ AVP ]\n"
- title: 8.4.2.  Session-Termination-Answer
  contents:
  - "8.4.2.  Session-Termination-Answer\n   The Session-Termination-Answer (STA),\
    \ indicated by the Command Code\n   set to 275 and the message flags' 'R' bit\
    \ clear, is sent by the\n   Diameter server to acknowledge the notification that\
    \ the session has\n   been terminated.  The Result-Code AVP MUST be present, and\
    \ it MAY\n   contain an indication that an error occurred while servicing the\
    \ STR.\n   Upon sending or receipt of the STA, the Diameter server MUST release\n\
    \   all resources for the session indicated by the Session-Id AVP.  Any\n   intermediate\
    \ server in the Proxy-Chain MAY also release any\n   resources, if necessary.\n\
    \    Message Format\n         <STA> ::= < Diameter Header: 275, PXY >\n      \
    \              < Session-Id >\n                    { Result-Code }\n         \
    \           { Origin-Host }\n                    { Origin-Realm }\n          \
    \          [ User-Name ]\n                  * [ Class ]\n                    [\
    \ Error-Message ]\n                    [ Error-Reporting-Host ]\n            \
    \        [ Failed-AVP ]\n                    [ Origin-State-Id ]\n           \
    \       * [ Redirect-Host ]\n                    [ Redirect-Host-Usage ]\n   \
    \                 [ Redirect-Max-Cache-Time ]\n                  * [ Proxy-Info\
    \ ]\n                  * [ AVP ]\n"
- title: 8.5.  Aborting a Session
  contents:
  - "8.5.  Aborting a Session\n   A Diameter server may request that the access device\
    \ stop providing\n   service for a particular session by issuing an Abort-Session-Request\n\
    \   (ASR).\n   For example, the Diameter server that originally authorized the\n\
    \   session may be required to cause that session to be stopped for lack\n   of\
    \ credit or other reasons that were not anticipated when the session\n   was first\
    \ authorized.\n   An access device that receives an ASR with Session-ID equal\
    \ to a\n   currently active session MAY stop the session.  Whether the access\n\
    \   device stops the session or not is implementation and/or\n   configuration\
    \ dependent.  For example, an access device may honor\n   ASRs from certain agents\
    \ only.  In any case, the access device MUST\n   respond with an Abort-Session-Answer,\
    \ including a Result-Code AVP to\n   indicate what action it took.\n"
- title: 8.5.1.  Abort-Session-Request
  contents:
  - "8.5.1.  Abort-Session-Request\n   The Abort-Session-Request (ASR), indicated\
    \ by the Command Code set to\n   274 and the message flags' 'R' bit set, may be\
    \ sent by any Diameter\n   server or any Diameter proxy to the access device that\
    \ is providing\n   session service, to request that the session identified by\
    \ the\n   Session-Id be stopped.\n    Message Format\n         <ASR>  ::= < Diameter\
    \ Header: 274, REQ, PXY >\n                    < Session-Id >\n              \
    \      { Origin-Host }\n                    { Origin-Realm }\n               \
    \     { Destination-Realm }\n                    { Destination-Host }\n      \
    \              { Auth-Application-Id }\n                    [ User-Name ]\n  \
    \                  [ Origin-State-Id ]\n                  * [ Proxy-Info ]\n \
    \                 * [ Route-Record ]\n                  * [ AVP ]\n"
- title: 8.5.2.  Abort-Session-Answer
  contents:
  - "8.5.2.  Abort-Session-Answer\n   The Abort-Session-Answer (ASA), indicated by\
    \ the Command Code set to\n   274 and the message flags' 'R' bit clear, is sent\
    \ in response to the\n   ASR.  The Result-Code AVP MUST be present and indicates\
    \ the\n   disposition of the request.\n   If the session identified by Session-Id\
    \ in the ASR was successfully\n   terminated, the Result-Code is set to DIAMETER_SUCCESS.\
    \  If the\n   session is not currently active, the Result-Code is set to\n   DIAMETER_UNKNOWN_SESSION_ID.\
    \  If the access device does not stop the\n   session for any other reason, the\
    \ Result-Code is set to\n   DIAMETER_UNABLE_TO_COMPLY.\n    Message Format\n \
    \        <ASA>  ::= < Diameter Header: 274, PXY >\n                    < Session-Id\
    \ >\n                    { Result-Code }\n                    { Origin-Host }\n\
    \                    { Origin-Realm }\n                    [ User-Name ]\n   \
    \                 [ Origin-State-Id ]\n                    [ Error-Message ]\n\
    \                    [ Error-Reporting-Host ]\n                    [ Failed-AVP\
    \ ]\n                  * [ Redirect-Host ]\n                    [ Redirect-Host-Usage\
    \ ]\n                    [ Redirect-Max-Cache-Time ]\n                  * [ Proxy-Info\
    \ ]\n                  * [ AVP ]\n"
- title: 8.6.  Inferring Session Termination from Origin-State-Id
  contents:
  - "8.6.  Inferring Session Termination from Origin-State-Id\n   The Origin-State-Id\
    \ is used to allow detection of terminated sessions\n   for which no STR would\
    \ have been issued, due to unanticipated\n   shutdown of an access device.\n \
    \  A Diameter client or access device increments the value of the\n   Origin-State-Id\
    \ every time it is started or powered up.  The new\n   Origin-State-Id is then\
    \ sent in the CER/CEA message immediately upon\n   connection to the server. \
    \ The Diameter server receiving the new\n   Origin-State-Id can determine whether\
    \ the sending Diameter client had\n   abruptly shut down by comparing the old\
    \ value of the Origin-State-Id\n   it has kept for that specific client is less\
    \ than the new value and\n   whether it has un-terminated sessions originating\
    \ from that client.\n   An access device can also include the Origin-State-Id\
    \ in request\n   messages other than the CER if there are relays or proxies in\
    \ between\n   the access device and the server.  In this case, however, the server\n\
    \   cannot discover that the access device has been restarted unless and\n   until\
    \ it receives a new request from it.  Therefore, this mechanism\n   is more opportunistic\
    \ across proxies and relays.\n   The Diameter server may assume that all sessions\
    \ that were active\n   prior to detection of a client restart have been terminated.\
    \  The\n   Diameter server MAY clean up all session state associated with such\n\
    \   lost sessions, and it MAY also issue STRs for all such lost sessions\n   that\
    \ were authorized on upstream servers, to allow session state to\n   be cleaned\
    \ up globally.\n"
- title: 8.7.  Auth-Request-Type AVP
  contents:
  - "8.7.  Auth-Request-Type AVP\n   The Auth-Request-Type AVP (AVP Code 274) is of\
    \ type Enumerated and is\n   included in application-specific auth requests to\
    \ inform the peers\n   whether a user is to be authenticated only, authorized\
    \ only, or both.\n   Note any value other than both MAY cause RADIUS interoperability\n\
    \   issues.  The following values are defined:\n   AUTHENTICATE_ONLY 1\n     \
    \ The request being sent is for authentication only, and it MUST\n      contain\
    \ the relevant application-specific authentication AVPs that\n      are needed\
    \ by the Diameter server to authenticate the user.\n   AUTHORIZE_ONLY 2\n    \
    \  The request being sent is for authorization only, and it MUST\n      contain\
    \ the application-specific authorization AVPs that are\n      necessary to identify\
    \ the service being requested/offered.\n   AUTHORIZE_AUTHENTICATE 3\n      The\
    \ request contains a request for both authentication and\n      authorization.\
    \  The request MUST include both the relevant\n      application-specific authentication\
    \ information and authorization\n      information necessary to identify the service\
    \ being requested/\n      offered.\n"
- title: 8.8.  Session-Id AVP
  contents:
  - "8.8.  Session-Id AVP\n   The Session-Id AVP (AVP Code 263) is of type UTF8String\
    \ and is used\n   to identify a specific session (see Section 8).  All messages\n\
    \   pertaining to a specific session MUST include only one Session-Id\n   AVP,\
    \ and the same value MUST be used throughout the life of a\n   session.  When\
    \ present, the Session-Id SHOULD appear immediately\n   following the Diameter\
    \ header (see Section 3).\n   The Session-Id MUST be globally and eternally unique,\
    \ as it is meant\n   to uniquely identify a user session without reference to\
    \ any other\n   information, and it may be needed to correlate historical\n  \
    \ authentication information with accounting information.  The\n   Session-Id\
    \ includes a mandatory portion and an implementation-defined\n   portion; a recommended\
    \ format for the implementation-defined portion\n   is outlined below.\n   The\
    \ Session-Id MUST begin with the sender's identity encoded in the\n   DiameterIdentity\
    \ type (see Section 4.3.1).  The remainder of the\n   Session-Id is delimited\
    \ by a \";\" character, and it MAY be any\n   sequence that the client can guarantee\
    \ to be eternally unique;\n   however, the following format is recommended, (square\
    \ brackets []\n   indicate an optional element):\n      <DiameterIdentity>;<high\
    \ 32 bits>;<low 32 bits>[;<optional value>]\n   <high 32 bits> and <low 32 bits>\
    \ are decimal representations of the\n   high and low 32 bits of a monotonically\
    \ increasing 64-bit value.  The\n   64-bit value is rendered in two part to simplify\
    \ formatting by 32-bit\n   processors.  At startup, the high 32 bits of the 64-bit\
    \ value MAY be\n   initialized to the time in NTP format [RFC5905], and the low\
    \ 32 bits\n   MAY be initialized to zero.  This will for practical purposes\n\
    \   eliminate the possibility of overlapping Session-Ids after a reboot,\n   assuming\
    \ the reboot process takes longer than a second.\n   Alternatively, an implementation\
    \ MAY keep track of the increasing\n   value in non-volatile memory.\n   <optional\
    \ value> is implementation specific, but it may include a\n   modem's device Id,\
    \ a Layer 2 address, timestamp, etc.\n   Example, in which there is no optional\
    \ value:\n      accesspoint7.example.com;1876543210;523\n   Example, in which\
    \ there is an optional value:\n     accesspoint7.example.com;1876543210;523;mobile@200.1.1.88\n\
    \   The Session-Id is created by the Diameter application initiating the\n   session,\
    \ which, in most cases, is done by the client.  Note that a\n   Session-Id MAY\
    \ be used for both the authentication, authorization,\n   and accounting commands\
    \ of a given application.\n"
- title: 8.9.  Authorization-Lifetime AVP
  contents:
  - "8.9.  Authorization-Lifetime AVP\n   The Authorization-Lifetime AVP (AVP Code\
    \ 291) is of type Unsigned32\n   and contains the maximum number of seconds of\
    \ service to be provided\n   to the user before the user is to be re-authenticated\
    \ and/or re-\n   authorized.  Care should be taken when the Authorization-Lifetime\n\
    \   value is determined, since a low, non-zero value could create\n   significant\
    \ Diameter traffic, which could congest both the network\n   and the agents.\n\
    \   A value of zero (0) means that immediate re-auth is necessary by the\n   access\
    \ device.  The absence of this AVP, or a value of all ones\n   (meaning all bits\
    \ in the 32-bit field are set to one) means no re-\n   auth is expected.\n   If\
    \ both this AVP and the Session-Timeout AVP are present in a\n   message, the\
    \ value of the latter MUST NOT be smaller than the\n   Authorization-Lifetime\
    \ AVP.\n   An Authorization-Lifetime AVP MAY be present in re-authorization\n\
    \   messages, and it contains the number of seconds the user is\n   authorized\
    \ to receive service from the time the re-auth answer\n   message is received\
    \ by the access device.\n   This AVP MAY be provided by the client as a hint of\
    \ the maximum\n   lifetime that it is willing to accept.  The server MUST return\
    \ a\n   value that is equal to, or smaller than, the one provided by the\n   client.\n"
- title: 8.10.  Auth-Grace-Period AVP
  contents:
  - "8.10.  Auth-Grace-Period AVP\n   The Auth-Grace-Period AVP (AVP Code 276) is\
    \ of type Unsigned32 and\n   contains the number of seconds the Diameter server\
    \ will wait\n   following the expiration of the Authorization-Lifetime AVP before\n\
    \   cleaning up resources for the session.\n"
- title: 8.11.  Auth-Session-State AVP
  contents:
  - "8.11.  Auth-Session-State AVP\n   The Auth-Session-State AVP (AVP Code 277) is\
    \ of type Enumerated and\n   specifies whether state is maintained for a particular\
    \ session.  The\n   client MAY include this AVP in requests as a hint to the server,\
    \ but\n   the value in the server's answer message is binding.  The following\n\
    \   values are supported:\n   STATE_MAINTAINED 0\n      This value is used to\
    \ specify that session state is being\n      maintained, and the access device\
    \ MUST issue a session termination\n      message when service to the user is\
    \ terminated.  This is the\n      default value.\n   NO_STATE_MAINTAINED 1\n \
    \     This value is used to specify that no session termination messages\n   \
    \   will be sent by the access device upon expiration of the\n      Authorization-Lifetime.\n"
- title: 8.12.  Re-Auth-Request-Type AVP
  contents:
  - "8.12.  Re-Auth-Request-Type AVP\n   The Re-Auth-Request-Type AVP (AVP Code 285)\
    \ is of type Enumerated and\n   is included in application-specific auth answers\
    \ to inform the client\n   of the action expected upon expiration of the Authorization-Lifetime.\n\
    \   If the answer message contains an Authorization-Lifetime AVP with a\n   positive\
    \ value, the Re-Auth-Request-Type AVP MUST be present in an\n   answer message.\
    \  The following values are defined:\n   AUTHORIZE_ONLY 0\n      An authorization\
    \ only re-auth is expected upon expiration of the\n      Authorization-Lifetime.\
    \  This is the default value if the AVP is\n      not present in answer messages\
    \ that include the Authorization-\n      Lifetime.\n   AUTHORIZE_AUTHENTICATE\
    \ 1\n      An authentication and authorization re-auth is expected upon\n    \
    \  expiration of the Authorization-Lifetime.\n"
- title: 8.13.  Session-Timeout AVP
  contents:
  - "8.13.  Session-Timeout AVP\n   The Session-Timeout AVP (AVP Code 27) [RFC2865]\
    \ is of type Unsigned32\n   and contains the maximum number of seconds of service\
    \ to be provided\n   to the user before termination of the session.  When both\
    \ the\n   Session-Timeout and the Authorization-Lifetime AVPs are present in an\n\
    \   answer message, the former MUST be equal to or greater than the value\n  \
    \ of the latter.\n   A session that terminates on an access device due to the\
    \ expiration\n   of the Session-Timeout MUST cause an STR to be issued, unless\
    \ both\n   the access device and the home server had previously agreed that no\n\
    \   session termination messages would be sent (see Section 8).\n   A Session-Timeout\
    \ AVP MAY be present in a re-authorization answer\n   message, and it contains\
    \ the remaining number of seconds from the\n   beginning of the re-auth.\n   A\
    \ value of zero, or the absence of this AVP, means that this session\n   has an\
    \ unlimited number of seconds before termination.\n   This AVP MAY be provided\
    \ by the client as a hint of the maximum\n   timeout that it is willing to accept.\
    \  However, the server MAY return\n   a value that is equal to, or smaller than,\
    \ the one provided by the\n   client.\n"
- title: 8.14.  User-Name AVP
  contents:
  - "8.14.  User-Name AVP\n   The User-Name AVP (AVP Code 1) [RFC2865] is of type\
    \ UTF8String, which\n   contains the User-Name, in a format consistent with the\
    \ NAI\n   specification [RFC4282].\n"
- title: 8.15.  Termination-Cause AVP
  contents:
  - "8.15.  Termination-Cause AVP\n   The Termination-Cause AVP (AVP Code 295) is\
    \ of type Enumerated, and\n   is used to indicate the reason why a session was\
    \ terminated on the\n   access device.  The currently assigned values for this\
    \ AVP can be\n   found in the IANA registry for Termination-Cause AVP Values\n\
    \   [IANATCV].\n"
- title: 8.16.  Origin-State-Id AVP
  contents:
  - "8.16.  Origin-State-Id AVP\n   The Origin-State-Id AVP (AVP Code 278), of type\
    \ Unsigned32, is a\n   monotonically increasing value that is advanced whenever\
    \ a Diameter\n   entity restarts with loss of previous state, for example, upon\n\
    \   reboot.  Origin-State-Id MAY be included in any Diameter message,\n   including\
    \ CER.\n   A Diameter entity issuing this AVP MUST create a higher value for\n\
    \   this AVP each time its state is reset.  A Diameter entity MAY set\n   Origin-State-Id\
    \ to the time of startup, or it MAY use an incrementing\n   counter retained in\
    \ non-volatile memory across restarts.\n   The Origin-State-Id, if present, MUST\
    \ reflect the state of the entity\n   indicated by Origin-Host.  If a proxy modifies\
    \ Origin-Host, it MUST\n   either remove Origin-State-Id or modify it appropriately\
    \ as well.\n   Typically, Origin-State-Id is used by an access device that always\n\
    \   starts up with no active sessions; that is, any session active prior\n   to\
    \ restart will have been lost.  By including Origin-State-Id in a\n   message,\
    \ it allows other Diameter entities to infer that sessions\n   associated with\
    \ a lower Origin-State-Id are no longer active.  If an\n   access device does\
    \ not intend for such inferences to be made, it MUST\n   either not include Origin-State-Id\
    \ in any message or set its value to\n   0.\n"
- title: 8.17.  Session-Binding AVP
  contents:
  - "8.17.  Session-Binding AVP\n   The Session-Binding AVP (AVP Code 270) is of type\
    \ Unsigned32, and it\n   MAY be present in application-specific authorization\
    \ answer messages.\n   If present, this AVP MAY inform the Diameter client that\
    \ all future\n   application-specific re-auth and Session-Termination-Request\
    \ messages\n   for this session MUST be sent to the same authorization server.\n\
    \   This field is a bit mask, and the following bits have been defined:\n   RE_AUTH\
    \ 1\n      When set, future re-auth messages for this session MUST NOT\n     \
    \ include the Destination-Host AVP.  When cleared, the default\n      value, the\
    \ Destination-Host AVP MUST be present in all re-auth\n      messages for this\
    \ session.\n   STR 2\n      When set, the STR message for this session MUST NOT\
    \ include the\n      Destination-Host AVP.  When cleared, the default value, the\n\
    \      Destination-Host AVP MUST be present in the STR message for this\n    \
    \  session.\n   ACCOUNTING 4\n      When set, all accounting messages for this\
    \ session MUST NOT\n      include the Destination-Host AVP.  When cleared, the\
    \ default\n      value, the Destination-Host AVP, if known, MUST be present in\
    \ all\n      accounting messages for this session.\n"
- title: 8.18.  Session-Server-Failover AVP
  contents:
  - "8.18.  Session-Server-Failover AVP\n   The Session-Server-Failover AVP (AVP Code\
    \ 271) is of type Enumerated\n   and MAY be present in application-specific authorization\
    \ answer\n   messages that either do not include the Session-Binding AVP or\n\
    \   include the Session-Binding AVP with any of the bits set to a zero\n   value.\
    \  If present, this AVP MAY inform the Diameter client that if a\n   re-auth or\
    \ STR message fails due to a delivery problem, the Diameter\n   client SHOULD\
    \ issue a subsequent message without the Destination-Host\n   AVP.  When absent,\
    \ the default value is REFUSE_SERVICE.\n   The following values are supported:\n\
    \   REFUSE_SERVICE 0\n      If either the re-auth or the STR message delivery\
    \ fails, terminate\n      service with the user and do not attempt any subsequent\
    \ attempts.\n   TRY_AGAIN 1\n      If either the re-auth or the STR message delivery\
    \ fails, resend\n      the failed message without the Destination-Host AVP present.\n\
    \   ALLOW_SERVICE 2\n      If re-auth message delivery fails, assume that re-authorization\n\
    \      succeeded.  If STR message delivery fails, terminate the session.\n   TRY_AGAIN_ALLOW_SERVICE\
    \ 3\n      If either the re-auth or the STR message delivery fails, resend\n \
    \     the failed message without the Destination-Host AVP present.  If\n     \
    \ the second delivery fails for re-auth, assume re-authorization\n      succeeded.\
    \  If the second delivery fails for STR, terminate the\n      session.\n"
- title: 8.19.  Multi-Round-Time-Out AVP
  contents:
  - "8.19.  Multi-Round-Time-Out AVP\n   The Multi-Round-Time-Out AVP (AVP Code 272)\
    \ is of type Unsigned32 and\n   SHOULD be present in application-specific authorization\
    \ answer\n   messages whose Result-Code AVP is set to DIAMETER_MULTI_ROUND_AUTH.\n\
    \   This AVP contains the maximum number of seconds that the access\n   device\
    \ MUST provide the user in responding to an authentication\n   request.\n"
- title: 8.20.  Class AVP
  contents:
  - "8.20.  Class AVP\n   The Class AVP (AVP Code 25) is of type OctetString and is\
    \ used by\n   Diameter servers to return state information to the access device.\n\
    \   When one or more Class AVPs are present in application-specific\n   authorization\
    \ answer messages, they MUST be present in subsequent re-\n   authorization, session\
    \ termination and accounting messages.  Class\n   AVPs found in a re-authorization\
    \ answer message override the ones\n   found in any previous authorization answer\
    \ message.  Diameter server\n   implementations SHOULD NOT return Class AVPs that\
    \ require more than\n   4096 bytes of storage on the Diameter client.  A Diameter\
    \ client that\n   receives Class AVPs whose size exceeds local available storage\
    \ MUST\n   terminate the session.\n"
- title: 8.21.  Event-Timestamp AVP
  contents:
  - "8.21.  Event-Timestamp AVP\n   The Event-Timestamp (AVP Code 55) is of type Time\
    \ and MAY be included\n   in an Accounting-Request and Accounting-Answer messages\
    \ to record the\n   time that the reported event occurred, in seconds since January\
    \ 1,\n   1900 00:00 UTC.\n"
- title: 9.  Accounting
  contents:
  - "9.  Accounting\n   This accounting protocol is based on a server directed model\
    \ with\n   capabilities for real-time delivery of accounting information.\n  \
    \ Several fault resilience methods [RFC2975] have been built into the\n   protocol\
    \ in order minimize loss of accounting data in various fault\n   situations and\
    \ under different assumptions about the capabilities of\n   the used devices.\n"
- title: 9.1.  Server Directed Model
  contents:
  - "9.1.  Server Directed Model\n   The server directed model means that the device\
    \ generating the\n   accounting data gets information from either the authorization\
    \ server\n   (if contacted) or the accounting server regarding the way accounting\n\
    \   data shall be forwarded.  This information includes accounting record\n  \
    \ timeliness requirements.\n   As discussed in [RFC2975], real-time transfer of\
    \ accounting records\n   is a requirement, such as the need to perform credit-limit\
    \ checks and\n   fraud detection.  Note that batch accounting is not a requirement,\n\
    \   and is therefore not supported by Diameter.  Should batched\n   accounting\
    \ be required in the future, a new Diameter application will\n   need to be created,\
    \ or it could be handled using another protocol.\n   Note, however, that even\
    \ if at the Diameter layer, accounting\n   requests are processed one by one;\
    \ transport protocols used under\n   Diameter typically batch several requests\
    \ in the same packet under\n   heavy traffic conditions.  This may be sufficient\
    \ for many\n   applications.\n   The authorization server (chain) directs the\
    \ selection of proper\n   transfer strategy, based on its knowledge of the user\
    \ and\n   relationships of roaming partnerships.  The server (or agents) uses\n\
    \   the Acct-Interim-Interval and Accounting-Realtime-Required AVPs to\n   control\
    \ the operation of the Diameter peer operating as a client.\n   The Acct-Interim-Interval\
    \ AVP, when present, instructs the Diameter\n   node acting as a client to produce\
    \ accounting records continuously\n   even during a session.  Accounting-Realtime-Required\
    \ AVP is used to\n   control the behavior of the client when the transfer of accounting\n\
    \   records from the Diameter client is delayed or unsuccessful.\n   The Diameter\
    \ accounting server MAY override the interim interval or\n   the real-time requirements\
    \ by including the Acct-Interim-Interval or\n   Accounting-Realtime-Required AVP\
    \ in the Accounting-Answer message.\n   When one of these AVPs is present, the\
    \ latest value received SHOULD\n   be used in further accounting activities for\
    \ the same session.\n"
- title: 9.2.  Protocol Messages
  contents:
  - "9.2.  Protocol Messages\n   A Diameter node that receives a successful authentication\
    \ and/or\n   authorization message from the Diameter server SHOULD collect\n \
    \  accounting information for the session.  The Accounting-Request\n   message\
    \ is used to transmit the accounting information to the\n   Diameter server, which\
    \ MUST reply with the Accounting-Answer message\n   to confirm reception.  The\
    \ Accounting-Answer message includes the\n   Result-Code AVP, which MAY indicate\
    \ that an error was present in the\n   accounting message.  The value of the Accounting-Realtime-Required\n\
    \   AVP received earlier for the session in question may indicate that\n   the\
    \ user's session has to be terminated when a rejected Accounting-\n   Request\
    \ message was received.\n"
- title: 9.3.  Accounting Application Extension and Requirements
  contents:
  - "9.3.  Accounting Application Extension and Requirements\n   Each Diameter application\
    \ (e.g., NASREQ, Mobile IP) SHOULD define its\n   service-specific AVPs that MUST\
    \ be present in the Accounting-Request\n   message in a section titled \"Accounting\
    \ AVPs\".  The application MUST\n   assume that the AVPs described in this document\
    \ will be present in\n   all Accounting messages, so only their respective service-specific\n\
    \   AVPs need to be defined in that section.\n   Applications have the option\
    \ of using one or both of the following\n   accounting application extension models:\n\
    \   Split Accounting Service\n      The accounting message will carry the Application\
    \ Id of the\n      Diameter base accounting application (see Section 2.4).\n \
    \     Accounting messages may be routed to Diameter nodes other than the\n   \
    \   corresponding Diameter application.  These nodes might be\n      centralized\
    \ accounting servers that provide accounting service for\n      multiple different\
    \ Diameter applications.  These nodes MUST\n      advertise the Diameter base\
    \ accounting Application Id during\n      capabilities exchange.\n   Coupled Accounting\
    \ Service\n      The accounting message will carry the Application Id of the\n\
    \      application that is using it.  The application itself will process\n  \
    \    the received accounting records or forward them to an accounting\n      server.\
    \  There is no accounting application advertisement required\n      during capabilities\
    \ exchange, and the accounting messages will be\n      routed the same way as\
    \ any of the other application messages.\n   In cases where an application does\
    \ not define its own accounting\n   service, it is preferred that the split accounting\
    \ model be used.\n"
- title: 9.4.  Fault Resilience
  contents:
  - "9.4.  Fault Resilience\n   Diameter base protocol mechanisms are used to overcome\
    \ small message\n   loss and network faults of a temporary nature.\n   Diameter\
    \ peers acting as clients MUST implement the use of failover\n   to guard against\
    \ server failures and certain network failures.\n   Diameter peers acting as agents\
    \ or related off-line processing\n   systems MUST detect duplicate accounting\
    \ records caused by the\n   sending of the same record to several servers and\
    \ duplication of\n   messages in transit.  This detection MUST be based on the\
    \ inspection\n   of the Session-Id and Accounting-Record-Number AVP pairs.  Appendix\
    \ C\n   discusses duplicate detection needs and implementation issues.\n   Diameter\
    \ clients MAY have non-volatile memory for the safe storage of\n   accounting\
    \ records over reboots or extended network failures, network\n   partitions, and\
    \ server failures.  If such memory is available, the\n   client SHOULD store new\
    \ accounting records there as soon as the\n   records are created and until a\
    \ positive acknowledgement of their\n   reception from the Diameter server has\
    \ been received.  Upon a reboot,\n   the client MUST start sending the records\
    \ in the non-volatile memory\n   to the accounting server with the appropriate\
    \ modifications in\n   termination cause, session length, and other relevant information\
    \ in\n   the records.\n   A further application of this protocol may include AVPs\
    \ to control\n   the maximum number of accounting records that may be stored in\
    \ the\n   Diameter client without committing them to the non-volatile memory or\n\
    \   transferring them to the Diameter server.\n   The client SHOULD NOT remove\
    \ the accounting data from any of its\n   memory areas before the correct Accounting-Answer\
    \ has been received.\n   The client MAY remove the oldest, undelivered, or as\
    \ yet\n   unacknowledged accounting data if it runs out of resources such as\n\
    \   memory.  It is an implementation-dependent matter for the client to\n   accept\
    \ new sessions under this condition.\n"
- title: 9.5.  Accounting Records
  contents:
  - "9.5.  Accounting Records\n   In all accounting records, the Session-Id AVP MUST\
    \ be present; the\n   User-Name AVP MUST be present if it is available to the\
    \ Diameter\n   client.\n   Different types of accounting records are sent depending\
    \ on the\n   actual type of accounted service and the authorization server's\n\
    \   directions for interim accounting.  If the accounted service is a\n   one-time\
    \ event, meaning that the start and stop of the event are\n   simultaneous, then\
    \ the Accounting-Record-Type AVP MUST be present and\n   set to the value EVENT_RECORD.\n\
    \   If the accounted service is of a measurable length, then the AVP MUST\n  \
    \ use the values START_RECORD, STOP_RECORD, and possibly,\n   INTERIM_RECORD.\
    \  If the authorization server has not directed interim\n   accounting to be enabled\
    \ for the session, two accounting records MUST\n   be generated for each service\
    \ of type session.  When the initial\n   Accounting-Request for a given session\
    \ is sent, the Accounting-\n   Record-Type AVP MUST be set to the value START_RECORD.\
    \  When the last\n   Accounting-Request is sent, the value MUST be STOP_RECORD.\n\
    \   If the authorization server has directed interim accounting to be\n   enabled,\
    \ the Diameter client MUST produce additional records between\n   the START_RECORD\
    \ and STOP_RECORD, marked INTERIM_RECORD.  The\n   production of these records\
    \ is directed by Acct-Interim-Interval as\n   well as any re-authentication or\
    \ re-authorization of the session.\n   The Diameter client MUST overwrite any\
    \ previous interim accounting\n   records that are locally stored for delivery,\
    \ if a new record is\n   being generated for the same session.  This ensures that\
    \ only one\n   pending interim record can exist on an access device for any given\n\
    \   session.\n   A particular value of Accounting-Sub-Session-Id MUST appear only\
    \ in\n   one sequence of accounting records from a Diameter client, except for\n\
    \   the purposes of retransmission.  The one sequence that is sent MUST\n   be\
    \ either one record with Accounting-Record-Type AVP set to the value\n   EVENT_RECORD\
    \ or several records starting with one having the value\n   START_RECORD, followed\
    \ by zero or more INTERIM_RECORDs and a single\n   STOP_RECORD.  A particular\
    \ Diameter application specification MUST\n   define the type of sequences that\
    \ MUST be used.\n"
- title: 9.6.  Correlation of Accounting Records
  contents:
  - "9.6.  Correlation of Accounting Records\n   If an application uses accounting\
    \ messages, it can correlate\n   accounting records with a specific application\
    \ session by using the\n   Session-Id of the particular application session in\
    \ the accounting\n   messages.  Accounting messages MAY also use a different Session-Id\n\
    \   from that of the application sessions, in which case, other session-\n   related\
    \ information is needed to perform correlation.\n   In cases where an application\
    \ requires multiple accounting sub-\n   sessions, an Accounting-Sub-Session-Id\
    \ AVP is used to differentiate\n   each sub-session.  The Session-Id would remain\
    \ constant for all sub-\n   sessions and is used to correlate all the sub-sessions\
    \ to a\n   particular application session.  Note that receiving a STOP_RECORD\n\
    \   with no Accounting-Sub-Session-Id AVP when sub-sessions were\n   originally\
    \ used in the START_RECORD messages implies that all sub-\n   sessions are terminated.\n\
    \   There are also cases where an application needs to correlate multiple\n  \
    \ application sessions into a single accounting record; the accounting\n   record\
    \ may span multiple different Diameter applications and sessions\n   used by the\
    \ same user at a given time.  In such cases, the Acct-\n   Multi-Session-Id AVP\
    \ is used.  The Acct-Multi-Session-Id AVP SHOULD\n   be signaled by the server\
    \ to the access device (typically, during\n   authorization) when it determines\
    \ that a request belongs to an\n   existing session.  The access device MUST then\
    \ include the Acct-\n   Multi-Session-Id AVP in all subsequent accounting messages.\n\
    \   The Acct-Multi-Session-Id AVP MAY include the value of the original\n   Session-Id.\
    \  Its contents are implementation specific, but the MUST\n   be globally unique\
    \ across other Acct-Multi-Session-Ids and MUST NOT\n   change during the life\
    \ of a session.\n   A Diameter application document MUST define the exact concept\
    \ of a\n   session that is being accounted, and it MAY define the concept of a\n\
    \   multi-session.  For instance, the NASREQ DIAMETER application treats\n   a\
    \ single PPP connection to a Network Access Server as one session and\n   a set\
    \ of Multilink PPP sessions as one multi-session.\n"
- title: 9.7.  Accounting Command Codes
  contents:
  - "9.7.  Accounting Command Codes\n   This section defines Command Code values that\
    \ MUST be supported by\n   all Diameter implementations that provide accounting\
    \ services.\n"
- title: 9.7.1.  Accounting-Request
  contents:
  - "9.7.1.  Accounting-Request\n   The Accounting-Request (ACR) command, indicated\
    \ by the Command Code\n   field set to 271 and the Command Flags' 'R' bit set,\
    \ is sent by a\n   Diameter node, acting as a client, in order to exchange accounting\n\
    \   information with a peer.\n   In addition to the AVPs listed below, Accounting-Request\
    \ messages\n   SHOULD include service-specific accounting AVPs.\n      Message\
    \ Format\n         <ACR> ::= < Diameter Header: 271, REQ, PXY >\n            \
    \       < Session-Id >\n                   { Origin-Host }\n                 \
    \  { Origin-Realm }\n                   { Destination-Realm }\n              \
    \     { Accounting-Record-Type }\n                   { Accounting-Record-Number\
    \ }\n                   [ Acct-Application-Id ]\n                   [ Vendor-Specific-Application-Id\
    \ ]\n                   [ User-Name ]\n                   [ Destination-Host ]\n\
    \                   [ Accounting-Sub-Session-Id ]\n                   [ Acct-Session-Id\
    \ ]\n                   [ Acct-Multi-Session-Id ]\n                   [ Acct-Interim-Interval\
    \ ]\n                   [ Accounting-Realtime-Required ]\n                   [\
    \ Origin-State-Id ]\n                   [ Event-Timestamp ]\n                \
    \ * [ Proxy-Info ]\n                 * [ Route-Record ]\n                 * [\
    \ AVP ]\n"
- title: 9.7.2.  Accounting-Answer
  contents:
  - "9.7.2.  Accounting-Answer\n   The Accounting-Answer (ACA) command, indicated\
    \ by the Command Code\n   field set to 271 and the Command Flags' 'R' bit cleared,\
    \ is used to\n   acknowledge an Accounting-Request command.  The Accounting-Answer\n\
    \   command contains the same Session-Id as the corresponding request.\n   Only\
    \ the target Diameter server, known as the home Diameter server,\n   SHOULD respond\
    \ with the Accounting-Answer command.\n   In addition to the AVPs listed below,\
    \ Accounting-Answer messages\n   SHOULD include service-specific accounting AVPs.\n\
    \      Message Format\n         <ACA> ::= < Diameter Header: 271, PXY >\n    \
    \               < Session-Id >\n                   { Result-Code }\n         \
    \          { Origin-Host }\n                   { Origin-Realm }\n            \
    \       { Accounting-Record-Type }\n                   { Accounting-Record-Number\
    \ }\n                   [ Acct-Application-Id ]\n                   [ Vendor-Specific-Application-Id\
    \ ]\n                   [ User-Name ]\n                   [ Accounting-Sub-Session-Id\
    \ ]\n                   [ Acct-Session-Id ]\n                   [ Acct-Multi-Session-Id\
    \ ]\n                   [ Error-Message ]\n                   [ Error-Reporting-Host\
    \ ]\n                   [ Failed-AVP ]\n                   [ Acct-Interim-Interval\
    \ ]\n                   [ Accounting-Realtime-Required ]\n                   [\
    \ Origin-State-Id ]\n                   [ Event-Timestamp ]\n                \
    \ * [ Proxy-Info ]\n                 * [ AVP ]\n"
- title: 9.8.  Accounting AVPs
  contents:
  - "9.8.  Accounting AVPs\n   This section contains AVPs that describe accounting\
    \ usage information\n   related to a specific session.\n"
- title: 9.8.1.  Accounting-Record-Type AVP
  contents:
  - "9.8.1.  Accounting-Record-Type AVP\n   The Accounting-Record-Type AVP (AVP Code\
    \ 480) is of type Enumerated\n   and contains the type of accounting record being\
    \ sent.  The following\n   values are currently defined for the Accounting-Record-Type\
    \ AVP:\n   EVENT_RECORD 1\n      An Accounting Event Record is used to indicate\
    \ that a one-time\n      event has occurred (meaning that the start and end of\
    \ the event\n      are simultaneous).  This record contains all information relevant\n\
    \      to the service, and it is the only record of the service.\n   START_RECORD\
    \ 2\n      Accounting Start, Interim, and Stop Records are used to indicate\n\
    \      that a service of a measurable length has been given.  An\n      Accounting\
    \ Start Record is used to initiate an accounting session\n      and contains accounting\
    \ information that is relevant to the\n      initiation of the session.\n   INTERIM_RECORD\
    \ 3\n      An Interim Accounting Record contains cumulative accounting\n     \
    \ information for an existing accounting session.  Interim\n      Accounting Records\
    \ SHOULD be sent every time a re-authentication\n      or re-authorization occurs.\
    \  Further, additional interim record\n      triggers MAY be defined by application-specific\
    \ Diameter\n      applications.  The selection of whether to use INTERIM_RECORD\n\
    \      records is done by the Acct-Interim-Interval AVP.\n   STOP_RECORD 4\n \
    \     An Accounting Stop Record is sent to terminate an accounting\n      session\
    \ and contains cumulative accounting information relevant to\n      the existing\
    \ session.\n"
- title: 9.8.2.  Acct-Interim-Interval AVP
  contents:
  - "9.8.2.  Acct-Interim-Interval AVP\n   The Acct-Interim-Interval AVP (AVP Code\
    \ 85) is of type Unsigned32 and\n   is sent from the Diameter home authorization\
    \ server to the Diameter\n   client.  The client uses information in this AVP\
    \ to decide how and\n   when to produce accounting records.  With different values\
    \ in this\n   AVP, service sessions can result in one, two, or two+N accounting\n\
    \   records, based on the needs of the home organization.  The following\n   accounting\
    \ record production behavior is directed by the inclusion of\n   this AVP:\n \
    \  1.  The omission of the Acct-Interim-Interval AVP or its inclusion\n      \
    \ with Value field set to 0 means that EVENT_RECORD, START_RECORD,\n       and\
    \ STOP_RECORD are produced, as appropriate for the service.\n   2.  The inclusion\
    \ of the AVP with Value field set to a non-zero value\n       means that INTERIM_RECORD\
    \ records MUST be produced between the\n       START_RECORD and STOP_RECORD records.\
    \  The Value field of this\n       AVP is the nominal interval between these records\
    \ in seconds.\n       The Diameter node that originates the accounting information,\n\
    \       known as the client, MUST produce the first INTERIM_RECORD record\n  \
    \     roughly at the time when this nominal interval has elapsed from\n      \
    \ the START_RECORD, the next one again as the interval has elapsed\n       once\
    \ more, and so on until the session ends and a STOP_RECORD\n       record is produced.\n\
    \       The client MUST ensure that the interim record production times\n    \
    \   are randomized so that large accounting message storms are not\n       created\
    \ either among records or around a common service start\n       time.\n"
- title: 9.8.3.   Accounting-Record-Number AVP
  contents:
  - "9.8.3.   Accounting-Record-Number AVP\n   The Accounting-Record-Number AVP (AVP\
    \ Code 485) is of type Unsigned32\n   and identifies this record within one session.\
    \  As Session-Id AVPs\n   are globally unique, the combination of Session-Id and\
    \ Accounting-\n   Record-Number AVPs is also globally unique and can be used in\n\
    \   matching accounting records with confirmations.  An easy way to\n   produce\
    \ unique numbers is to set the value to 0 for records of type\n   EVENT_RECORD\
    \ and START_RECORD and set the value to 1 for the first\n   INTERIM_RECORD, 2\
    \ for the second, and so on until the value for\n   STOP_RECORD is one more than\
    \ for the last INTERIM_RECORD.\n"
- title: 9.8.4.  Acct-Session-Id AVP
  contents:
  - "9.8.4.  Acct-Session-Id AVP\n   The Acct-Session-Id AVP (AVP Code 44) is of type\
    \ OctetString is only\n   used when RADIUS/Diameter translation occurs.  This\
    \ AVP contains the\n   contents of the RADIUS Acct-Session-Id attribute.\n"
- title: 9.8.5.  Acct-Multi-Session-Id AVP
  contents:
  - "9.8.5.  Acct-Multi-Session-Id AVP\n   The Acct-Multi-Session-Id AVP (AVP Code\
    \ 50) is of type UTF8String,\n   following the format specified in Section 8.8.\
    \  The Acct-Multi-\n   Session-Id AVP is used to link multiple related accounting\
    \ sessions,\n   where each session would have a unique Session-Id but the same\
    \ Acct-\n   Multi-Session-Id AVP.  This AVP MAY be returned by the Diameter\n\
    \   server in an authorization answer, and it MUST be used in all\n   accounting\
    \ messages for the given session.\n"
- title: 9.8.6.  Accounting-Sub-Session-Id AVP
  contents:
  - "9.8.6.  Accounting-Sub-Session-Id AVP\n   The Accounting-Sub-Session-Id AVP (AVP\
    \ Code 287) is of type\n   Unsigned64 and contains the accounting sub-session\
    \ identifier.  The\n   combination of the Session-Id and this AVP MUST be unique\
    \ per sub-\n   session, and the value of this AVP MUST be monotonically increased\
    \ by\n   one for all new sub-sessions.  The absence of this AVP implies no\n \
    \  sub-sessions are in use, with the exception of an Accounting-Request\n   whose\
    \ Accounting-Record-Type is set to STOP_RECORD.  A STOP_RECORD\n   message with\
    \ no Accounting-Sub-Session-Id AVP present will signal the\n   termination of\
    \ all sub-sessions for a given Session-Id.\n"
- title: 9.8.7.   Accounting-Realtime-Required AVP
  contents:
  - "9.8.7.   Accounting-Realtime-Required AVP\n   The Accounting-Realtime-Required\
    \ AVP (AVP Code 483) is of type\n   Enumerated and is sent from the Diameter home\
    \ authorization server to\n   the Diameter client or in the Accounting-Answer\
    \ from the accounting\n   server.  The client uses information in this AVP to\
    \ decide what to do\n   if the sending of accounting records to the accounting\
    \ server has\n   been temporarily prevented due to, for instance, a network problem.\n\
    \   DELIVER_AND_GRANT 1\n      The AVP with Value field set to DELIVER_AND_GRANT\
    \ means that the\n      service MUST only be granted as long as there is a connection\
    \ to\n      an accounting server.  Note that the set of alternative accounting\n\
    \      servers are treated as one server in this sense.  Having to move\n    \
    \  the accounting record stream to a backup server is not a reason to\n      discontinue\
    \ the service to the user.\n   GRANT_AND_STORE 2\n      The AVP with Value field\
    \ set to GRANT_AND_STORE means that service\n      SHOULD be granted if there\
    \ is a connection, or as long as records\n      can still be stored as described\
    \ in Section 9.4.\n      This is the default behavior if the AVP isn't included\
    \ in the\n      reply from the authorization server.\n   GRANT_AND_LOSE 3\n  \
    \    The AVP with Value field set to GRANT_AND_LOSE means that service\n     \
    \ SHOULD be granted even if the records cannot be delivered or\n      stored.\n"
- title: 10.  AVP Occurrence Tables
  contents:
  - "10.  AVP Occurrence Tables\n   The following tables present the AVPs defined\
    \ in this document and\n   specify in which Diameter messages they MAY or MAY\
    \ NOT be present.\n   AVPs that occur only inside a Grouped AVP are not shown\
    \ in these\n   tables.\n   The tables use the following symbols:\n   0     The\
    \ AVP MUST NOT be present in the message.\n   0+    Zero or more instances of\
    \ the AVP MAY be present in the\n         message.\n   0-1   Zero or one instance\
    \ of the AVP MAY be present in the message.\n         It is considered an error\
    \ if there are more than one instance\n         of the AVP.\n   1     One instance\
    \ of the AVP MUST be present in the message.\n   1+    At least one instance of\
    \ the AVP MUST be present in the\n         message.\n"
- title: 10.1.  Base Protocol Command AVP Table
  contents:
  - "10.1.  Base Protocol Command AVP Table\n   The table in this section is limited\
    \ to the non-Accounting Command\n   Codes defined in this specification.\n   \
    \                    +-----------------------------------------------+\n     \
    \                  |                  Command Code                 |\n       \
    \                +---+---+---+---+---+---+---+---+---+---+---+---+\n   Attribute\
    \ Name      |CER|CEA|DPR|DPA|DWR|DWA|RAR|RAA|ASR|ASA|STR|STA|\n   --------------------+---+---+---+---+---+---+---+---+---+---+---+---+\n\
    \   Acct-Interim-       |0  |0  |0  |0  |0  |0  |0-1|0  |0  |0  |0  |0  |\n  \
    \   Interval          |   |   |   |   |   |   |   |   |   |   |   |   |\n   Accounting-Realtime-|0\
    \  |0  |0  |0  |0  |0  |0-1|0  |0  |0  |0  |0  |\n     Required          |   |\
    \   |   |   |   |   |   |   |   |   |   |   |\n   Acct-Application-Id |0+ |0+\
    \ |0  |0  |0  |0  |0  |0  |0  |0  |0  |0  |\n   Auth-Application-Id |0+ |0+ |0\
    \  |0  |0  |0  |1  |0  |1  |0  |1  |0  |\n   Auth-Grace-Period   |0  |0  |0  |0\
    \  |0  |0  |0  |0  |0  |0  |0  |0  |\n   Auth-Request-Type   |0  |0  |0  |0  |0\
    \  |0  |0  |0  |0  |0  |0  |0  |\n   Auth-Session-State  |0  |0  |0  |0  |0  |0\
    \  |0  |0  |0  |0  |0  |0  |\n   Authorization-      |0  |0  |0  |0  |0  |0  |0\
    \  |0  |0  |0  |0  |0  |\n     Lifetime          |   |   |   |   |   |   |   |\
    \   |   |   |   |   |\n   Class               |0  |0  |0  |0  |0  |0  |0  |0 \
    \ |0  |0  |0+ |0+ |\n   Destination-Host    |0  |0  |0  |0  |0  |0  |1  |0  |1\
    \  |0  |0-1|0  |\n   Destination-Realm   |0  |0  |0  |0  |0  |0  |1  |0  |1  |0\
    \  |1  |0  |\n   Disconnect-Cause    |0  |0  |1  |0  |0  |0  |0  |0  |0  |0  |0\
    \  |0  |\n   Error-Message       |0  |0-1|0  |0-1|0  |0-1|0  |0-1|0  |0-1|0  |0-1|\n\
    \   Error-Reporting-Host|0  |0  |0  |0  |0  |0  |0  |0-1|0  |0-1|0  |0-1|\n  \
    \ Failed-AVP          |0  |0-1|0  |0-1|0  |0-1|0  |0-1|0  |0-1|0  |0-1|\n   Firmware-Revision\
    \   |0-1|0-1|0  |0  |0  |0  |0  |0  |0  |0  |0  |0  |\n   Host-IP-Address    \
    \ |1+ |1+ |0  |0  |0  |0  |0  |0  |0  |0  |0  |0  |\n   Inband-Security-Id  |0\
    \  |0  |0  |0  |0  |0  |0  |0  |0  |0  |0  |0  |\n   Multi-Round-Time-Out|0  |0\
    \  |0  |0  |0  |0  |0  |0  |0  |0  |0  |0  |\n   Origin-Host         |1  |1  |1\
    \  |1  |1  |1  |1  |1  |1  |1  |1  |1  |\n   Origin-Realm        |1  |1  |1  |1\
    \  |1  |1  |1  |1  |1  |1  |1  |1  |\n   Origin-State-Id     |0-1|0-1|0  |0  |0-1|0-1|0-1|0-1|0-1|0-1|0-1|0-1|\n\
    \   Product-Name        |1  |1  |0  |0  |0  |0  |0  |0  |0  |0  |0  |0  |\n  \
    \ Proxy-Info          |0  |0  |0  |0  |0  |0  |0+ |0+ |0+ |0+ |0+ |0+ |\n   Redirect-Host\
    \       |0  |0  |0  |0  |0  |0  |0  |0+ |0  |0+ |0  |0+ |\n   Redirect-Host-Usage\
    \ |0  |0  |0  |0  |0  |0  |0  |0-1|0  |0-1|0  |0-1|\n   Redirect-Max-Cache- |0\
    \  |0  |0  |0  |0  |0  |0  |0-1|0  |0-1|0  |0-1|\n     Time              |   |\
    \   |   |   |   |   |   |   |   |   |   |   |\n   Result-Code         |0  |1 \
    \ |0  |1  |0  |1  |0  |1  |0  |1  |0  |1  |\n   Re-Auth-Request-Type|0  |0  |0\
    \  |0  |0  |0  |1  |0  |0  |0  |0  |0  |\n   Route-Record        |0  |0  |0  |0\
    \  |0  |0  |0+ |0  |0+ |0  |0+ |0  |\n   Session-Binding     |0  |0  |0  |0  |0\
    \  |0  |0  |0  |0  |0  |0  |0  |\n   Session-Id          |0  |0  |0  |0  |0  |0\
    \  |1  |1  |1  |1  |1  |1  |\n   Session-Server-     |0  |0  |0  |0  |0  |0  |0\
    \  |0  |0  |0  |0  |0  |\n     Failover          |   |   |   |   |   |   |   |\
    \   |   |   |   |   |\n   Session-Timeout     |0  |0  |0  |0  |0  |0  |0  |0 \
    \ |0  |0  |0  |0  |\n   Supported-Vendor-Id |0+ |0+ |0  |0  |0  |0  |0  |0  |0\
    \  |0  |0  |0  |\n   Termination-Cause   |0  |0  |0  |0  |0  |0  |0  |0  |0  |0\
    \  |1  |0  |\n   User-Name           |0  |0  |0  |0  |0  |0  |0-1|0-1|0-1|0-1|0-1|0-1|\n\
    \   Vendor-Id           |1  |1  |0  |0  |0  |0  |0  |0  |0  |0  |0  |0  |\n  \
    \ Vendor-Specific-    |0+ |0+ |0  |0  |0  |0  |0  |0  |0  |0  |0  |0  |\n    \
    \ Application-Id    |   |   |   |   |   |   |   |   |   |   |   |   |\n   --------------------+---+---+---+---+---+---+---+---+---+---+---+---+\n"
- title: 10.2.  Accounting AVP Table
  contents:
  - "10.2.  Accounting AVP Table\n   The table in this section is used to represent\
    \ which AVPs defined in\n   this document are to be present in the Accounting\
    \ messages.  These\n   AVP occurrence requirements are guidelines, which may be\
    \ expanded,\n   and/or overridden by application-specific requirements in the\n\
    \   Diameter applications documents.\n                                    +-----------+\n\
    \                                    |  Command  |\n                         \
    \           |    Code   |\n                                    +-----+-----+\n\
    \      Attribute Name                | ACR | ACA |\n      ------------------------------+-----+-----+\n\
    \      Acct-Interim-Interval         | 0-1 | 0-1 |\n      Acct-Multi-Session-Id\
    \         | 0-1 | 0-1 |\n      Accounting-Record-Number      | 1   | 1   |\n \
    \     Accounting-Record-Type        | 1   | 1   |\n      Acct-Session-Id     \
    \          | 0-1 | 0-1 |\n      Accounting-Sub-Session-Id     | 0-1 | 0-1 |\n\
    \      Accounting-Realtime-Required  | 0-1 | 0-1 |\n      Acct-Application-Id\
    \           | 0-1 | 0-1 |\n      Auth-Application-Id           | 0   | 0   |\n\
    \      Class                         | 0+  | 0+  |\n      Destination-Host   \
    \           | 0-1 | 0   |\n      Destination-Realm             | 1   | 0   |\n\
    \      Error-Reporting-Host          | 0   | 0+  |\n      Event-Timestamp    \
    \           | 0-1 | 0-1 |\n      Failed-AVP                    | 0   | 0-1 |\n\
    \      Origin-Host                   | 1   | 1   |\n      Origin-Realm       \
    \           | 1   | 1   |\n      Proxy-Info                    | 0+  | 0+  |\n\
    \      Route-Record                  | 0+  | 0   |\n      Result-Code        \
    \           | 0   | 1   |\n      Session-Id                    | 1   | 1   |\n\
    \      Termination-Cause             | 0   | 0   |\n      User-Name          \
    \           | 0-1 | 0-1 |\n      Vendor-Specific-Application-Id| 0-1 | 0-1 |\n\
    \      ------------------------------+-----+-----+\n"
- title: 11.  IANA Considerations
  contents:
  - "11.  IANA Considerations\n   This section provides guidance to the Internet Assigned\
    \ Numbers\n   Authority (IANA) regarding registration of values related to the\n\
    \   Diameter protocol, in accordance with [RFC5226].  Existing IANA\n   registries\
    \ and assignments put in place by RFC 3588 remain the same\n   unless explicitly\
    \ updated or deprecated in this section.\n"
- title: 11.1.  AVP Header
  contents:
  - "11.1.  AVP Header\n   As defined in Section 4, the AVP header contains three\
    \ fields that\n   require IANA namespace management: the AVP Code, Vendor-ID,\
    \ and Flags\n   fields.\n"
- title: 11.1.1.  AVP Codes
  contents:
  - "11.1.1.  AVP Codes\n   There are multiple namespaces.  Vendors can have their\
    \ own AVP Codes\n   namespace that will be identified by their Vendor-ID (also\
    \ known as\n   Enterprise-Number), and they control the assignments of their vendor-\n\
    \   specific AVP Codes within their own namespace.  The absence of a\n   Vendor-ID\
    \ or a Vendor-ID value of zero (0) identifies the IETF AVP\n   Codes namespace,\
    \ which is under IANA control.  The AVP Codes and\n   sometimes possible values\
    \ in an AVP are controlled and maintained by\n   IANA.  AVP Code 0 is not used.\
    \  AVP Codes 1-255 are managed\n   separately as RADIUS Attribute Types.  Where\
    \ a Vendor-Specific AVP is\n   implemented by more than one vendor, allocation\
    \ of global AVPs should\n   be encouraged instead.\n   AVPs may be allocated following\
    \ Expert Review (by a Designated\n   Expert) with Specification Required [RFC5226].\
    \  A block allocation\n   (release of more than three AVPs at a time for a given\
    \ purpose)\n   requires IETF Review [RFC5226].\n"
- title: 11.1.2.  AVP Flags
  contents:
  - "11.1.2.  AVP Flags\n   Section 4.1 describes the existing AVP Flags.  The remaining\
    \ bits can\n   only be assigned via a Standards Action [RFC5226].\n"
- title: 11.2.  Diameter Header
  contents:
  - '11.2.  Diameter Header

    '
- title: 11.2.1.  Command Codes
  contents:
  - "11.2.1.  Command Codes\n   For the Diameter header, the Command Code namespace\
    \ allocation has\n   changed.  The new allocation rules are as follows:\n    \
    \  The Command Code values 256 - 8,388,607 (0x100 to 0x7fffff) are\n      for\
    \ permanent, standard commands, allocated by IETF Review\n      [RFC5226].\n \
    \     The values 8,388,608 - 16,777,213 (0x800000 - 0xfffffd) are\n      reserved\
    \ for vendor-specific Command Codes, to be allocated on a\n      First Come, First\
    \ Served basis by IANA [RFC5226].  The request to\n      IANA for a Vendor-Specific\
    \ Command Code SHOULD include a reference\n      to a publicly available specification\
    \ that documents the command\n      in sufficient detail to aid in interoperability\
    \ between\n      independent implementations.  If the specification cannot be\
    \ made\n      publicly available, the request for a vendor-specific Command Code\n\
    \      MUST include the contact information of persons and/or entities\n     \
    \ responsible for authoring and maintaining the command.\n      The values 16,777,214\
    \ and 16,777,215 (hexadecimal values 0xfffffe\n      - 0xffffff) are reserved\
    \ for experimental commands.  As these\n      codes are only for experimental\
    \ and testing purposes, no guarantee\n      is made for interoperability between\
    \ Diameter peers using\n      experimental commands.\n"
- title: 11.2.2.  Command Flags
  contents:
  - "11.2.2.  Command Flags\n   Section 3 describes the existing Command Flags field.\
    \  The remaining\n   bits can only be assigned via a Standards Action [RFC5226].\n"
- title: 11.3.  AVP Values
  contents:
  - "11.3.  AVP Values\n   For AVP values, the Experimental-Result-Code AVP value\
    \ allocation has\n   been added; see Section 11.3.1.  The old AVP value allocation\
    \ rule,\n   IETF Consensus, has been updated to IETF Review as per [RFC5226],\
    \ and\n   affected AVPs are listed as reminders.\n"
- title: 11.3.1.  Experimental-Result-Code AVP
  contents:
  - "11.3.1.  Experimental-Result-Code AVP\n   Values for this AVP are purely local\
    \ to the indicated vendor, and no\n   IANA registry is maintained for them.\n"
- title: 11.3.2.  Result-Code AVP Values
  contents:
  - "11.3.2.  Result-Code AVP Values\n   New values are available for assignment via\
    \ IETF Review [RFC5226].\n"
- title: 11.3.3.  Accounting-Record-Type AVP Values
  contents:
  - "11.3.3.  Accounting-Record-Type AVP Values\n   New values are available for assignment\
    \ via IETF Review [RFC5226].\n"
- title: 11.3.4.  Termination-Cause AVP Values
  contents:
  - "11.3.4.  Termination-Cause AVP Values\n   New values are available for assignment\
    \ via IETF Review [RFC5226].\n"
- title: 11.3.5.  Redirect-Host-Usage AVP Values
  contents:
  - "11.3.5.  Redirect-Host-Usage AVP Values\n   New values are available for assignment\
    \ via IETF Review [RFC5226].\n"
- title: 11.3.6.  Session-Server-Failover AVP Values
  contents:
  - "11.3.6.  Session-Server-Failover AVP Values\n   New values are available for\
    \ assignment via IETF Review [RFC5226].\n"
- title: 11.3.7.  Session-Binding AVP Values
  contents:
  - "11.3.7.  Session-Binding AVP Values\n   New values are available for assignment\
    \ via IETF Review [RFC5226].\n"
- title: 11.3.8.  Disconnect-Cause AVP Values
  contents:
  - "11.3.8.  Disconnect-Cause AVP Values\n   New values are available for assignment\
    \ via IETF Review [RFC5226].\n"
- title: 11.3.9.  Auth-Request-Type AVP Values
  contents:
  - "11.3.9.  Auth-Request-Type AVP Values\n   New values are available for assignment\
    \ via IETF Review [RFC5226].\n"
- title: 11.3.10.  Auth-Session-State AVP Values
  contents:
  - "11.3.10.  Auth-Session-State AVP Values\n   New values are available for assignment\
    \ via IETF Review [RFC5226].\n"
- title: 11.3.11.  Re-Auth-Request-Type AVP Values
  contents:
  - "11.3.11.  Re-Auth-Request-Type AVP Values\n   New values are available for assignment\
    \ via IETF Review [RFC5226].\n"
- title: 11.3.12.  Accounting-Realtime-Required AVP Values
  contents:
  - "11.3.12.  Accounting-Realtime-Required AVP Values\n   New values are available\
    \ for assignment via IETF Review [RFC5226].\n"
- title: 11.3.13.  Inband-Security-Id AVP (code 299)
  contents:
  - "11.3.13.  Inband-Security-Id AVP (code 299)\n   The use of this AVP has been\
    \ deprecated.\n"
- title: 11.4.  _diameters Service Name and Port Number Registration
  contents:
  - "11.4.  _diameters Service Name and Port Number Registration\n   IANA has registered\
    \ the \"_diameters\" service name and assigned port\n   numbers for TLS/TCP and\
    \ DTLS/SCTP according to the guidelines given\n   in [RFC6335].\n      Service\
    \ Name:         _diameters\n      Transport Protocols:  TCP, SCTP\n      Assignee:\
    \             IESG <iesg@ietf.org>\n      Contact:              IETF Chair <chair@ietf.org>\n\
    \      Description:          Diameter over TLS/TCP and DTLS/SCTP\n      Reference:\
    \            RFC 6733\n      Port  Number:         5868, from the User Range\n"
- title: 11.5.  SCTP Payload Protocol Identifiers
  contents:
  - "11.5.  SCTP Payload Protocol Identifiers\n   Two SCTP payload protocol identifiers\
    \ have been registered in the\n   SCTP Payload Protocol Identifiers registry:\n\
    \    Value | SCTP Payload Protocol Identifier\n   -------|-----------------------------------\n\
    \     46   | Diameter in a SCTP DATA chunk\n     47   | Diameter in a DTLS/SCTP\
    \ DATA chunk\n"
- title: 11.6.  S-NAPTR Parameters
  contents:
  - "11.6.  S-NAPTR Parameters\n   The following tag has been registered in the S-NAPTR\
    \ Application\n   Protocol Tags registry:\n   Tag                | Protocol\n\
    \   -------------------|---------\n   diameter.dtls.sctp | DTLS/SCTP\n"
- title: 12.  Diameter Protocol-Related Configurable Parameters
  contents:
  - "12.  Diameter Protocol-Related Configurable Parameters\n   This section contains\
    \ the configurable parameters that are found\n   throughout this document:\n \
    \  Diameter Peer\n      A Diameter entity MAY communicate with peers that are\
    \ statically\n      configured.  A statically configured Diameter peer would require\n\
    \      that either the IP address or the fully qualified domain name\n      (FQDN)\
    \ be supplied, which would then be used to resolve through\n      DNS.\n   Routing\
    \ Table\n      A Diameter proxy server routes messages based on the realm portion\n\
    \      of a Network Access Identifier (NAI).  The server MUST have a\n      table\
    \ of Realm Names, and the address of the peer to which the\n      message must\
    \ be forwarded.  The routing table MAY also include a\n      \"default route\"\
    , which is typically used for all messages that\n      cannot be locally processed.\n\
    \   Tc timer\n      The Tc timer controls the frequency that transport connection\n\
    \      attempts are done to a peer with whom no active transport\n      connection\
    \ exists.  The recommended value is 30 seconds.\n"
- title: 13.  Security Considerations
  contents:
  - "13.  Security Considerations\n   The Diameter base protocol messages SHOULD be\
    \ secured by using TLS\n   [RFC5246] or DTLS/SCTP [RFC6083].  Additional security\
    \ mechanisms\n   such as IPsec [RFC4301] MAY also be deployed to secure connections\n\
    \   between peers.  However, all Diameter base protocol implementations\n   MUST\
    \ support the use of TLS/TCP and DTLS/SCTP, and the Diameter\n   protocol MUST\
    \ NOT be used without one of TLS, DTLS, or IPsec.\n   If a Diameter connection\
    \ is to be protected via TLS/TCP and DTLS/SCTP\n   or IPsec, then TLS/TCP and\
    \ DTLS/SCTP or IPsec/IKE SHOULD begin prior\n   to any Diameter message exchange.\
    \  All security parameters for TLS/\n   TCP and DTLS/SCTP or IPsec are configured\
    \ independent of the Diameter\n   protocol.  All Diameter messages will be sent\
    \ through the TLS/TCP and\n   DTLS/SCTP or IPsec connection after a successful\
    \ setup.\n   For TLS/TCP and DTLS/SCTP connections to be established in the open\n\
    \   state, the CER/CEA exchange MUST include an Inband-Security-ID AVP\n   with\
    \ a value of TLS/TCP and DTLS/SCTP.  The TLS/TCP and DTLS/SCTP\n   handshake will\
    \ begin when both ends successfully reach the open\n   state, after completion\
    \ of the CER/CEA exchange.  If the TLS/TCP and\n   DTLS/SCTP handshake is successful,\
    \ all further messages will be sent\n   via TLS/TCP and DTLS/SCTP.  If the handshake\
    \ fails, both ends MUST\n   move to the closed state.  See Section 13.1 for more\
    \ details.\n"
- title: 13.1.  TLS/TCP and DTLS/SCTP Usage
  contents:
  - "13.1.  TLS/TCP and DTLS/SCTP Usage\n   Diameter nodes using TLS/TCP and DTLS/SCTP\
    \ for security MUST mutually\n   authenticate as part of TLS/TCP and DTLS/SCTP\
    \ session establishment.\n   In order to ensure mutual authentication, the Diameter\
    \ node acting as\n   the TLS/TCP and DTLS/SCTP server MUST request a certificate\
    \ from the\n   Diameter node acting as TLS/TCP and DTLS/SCTP client, and the\n\
    \   Diameter node acting as the TLS/TCP and DTLS/SCTP client MUST be\n   prepared\
    \ to supply a certificate on request.\n   Diameter nodes MUST be able to negotiate\
    \ the following TLS/TCP and\n   DTLS/SCTP cipher suites:\n         TLS_RSA_WITH_RC4_128_MD5\n\
    \         TLS_RSA_WITH_RC4_128_SHA\n         TLS_RSA_WITH_3DES_EDE_CBC_SHA\n \
    \  Diameter nodes SHOULD be able to negotiate the following TLS/TCP and\n   DTLS/SCTP\
    \ cipher suite:\n         TLS_RSA_WITH_AES_128_CBC_SHA\n   Note that it is quite\
    \ possible that support for the\n   TLS_RSA_WITH_AES_128_CBC_SHA cipher suite\
    \ will be REQUIRED at some\n   future date.  Diameter nodes MAY negotiate other\
    \ TLS/TCP and DTLS/\n   SCTP cipher suites.\n   If public key certificates are\
    \ used for Diameter security (for\n   example, with TLS), the value of the expiration\
    \ times in the routing\n   and peer tables MUST NOT be greater than the expiry\
    \ time in the\n   relevant certificates.\n"
- title: 13.2.  Peer-to-Peer Considerations
  contents:
  - "13.2.  Peer-to-Peer Considerations\n   As with any peer-to-peer protocol, proper\
    \ configuration of the trust\n   model within a Diameter peer is essential to\
    \ security.  When\n   certificates are used, it is necessary to configure the\
    \ root\n   certificate authorities trusted by the Diameter peer.  These root CAs\n\
    \   are likely to be unique to Diameter usage and distinct from the root\n   CAs\
    \ that might be trusted for other purposes such as Web browsing.\n   In general,\
    \ it is expected that those root CAs will be configured so\n   as to reflect the\
    \ business relationships between the organization\n   hosting the Diameter peer\
    \ and other organizations.  As a result, a\n   Diameter peer will typically not\
    \ be configured to allow connectivity\n   with any arbitrary peer.  With certificate\
    \ authentication, Diameter\n   peers may not be known beforehand and therefore\
    \ peer discovery may be\n   required.\n"
- title: 13.3.  AVP Considerations
  contents:
  - "13.3.  AVP Considerations\n   Diameter AVPs often contain security-sensitive\
    \ data; for example,\n   user passwords and location data, network addresses and\
    \ cryptographic\n   keys.  The following AVPs defined in this document are considered\
    \ to\n   be security-sensitive:\n   o  Acct-Interim-Interval\n   o  Accounting-Realtime-Required\n\
    \   o  Acct-Multi-Session-Id\n   o  Accounting-Record-Number\n   o  Accounting-Record-Type\n\
    \   o  Accounting-Session-Id\n   o  Accounting-Sub-Session-Id\n   o  Class\n \
    \  o  Session-Id\n   o  Session-Binding\n   o  Session-Server-Failover\n   o \
    \ User-Name\n   Diameter messages containing these or any other AVPs considered\
    \ to be\n   security-sensitive MUST only be sent protected via mutually\n   authenticated\
    \ TLS or IPsec.  In addition, those messages MUST NOT be\n   sent via intermediate\
    \ nodes unless there is end-to-end security\n   between the originator and recipient\
    \ or the originator has locally\n   trusted configuration that indicates that\
    \ end-to-end security is not\n   needed.  For example, end-to-end security may\
    \ not be required in the\n   case where an intermediary node is known to be operated\
    \ as part of\n   the same administrative domain as the endpoints so that an ability\
    \ to\n   successfully compromise the intermediary would imply a high\n   probability\
    \ of being able to compromise the endpoints as well.  Note\n   that no end-to-end\
    \ security mechanism is specified in this document.\n"
- title: 14.  References
  contents:
  - '14.  References

    '
- title: 14.1.  Normative References
  contents:
  - "14.1.  Normative References\n   [FLOATPOINT]\n              Institute of Electrical\
    \ and Electronics Engineers, \"IEEE\n              Standard for Binary Floating-Point\
    \ Arithmetic, ANSI/IEEE\n              Standard 754-1985\", August 1985.\n   [IANAADFAM]\n\
    \              IANA, \"Address Family Numbers\",\n              <http://www.iana.org/assignments/address-family-numbers>.\n\
    \   [RFC0791]  Postel, J., \"Internet Protocol\", STD 5, RFC 791,\n          \
    \    September 1981.\n   [RFC0793]  Postel, J., \"Transmission Control Protocol\"\
    , STD 7,\n              RFC 793, September 1981.\n   [RFC2119]  Bradner, S., \"\
    Key words for use in RFCs to Indicate\n              Requirement Levels\", BCP\
    \ 14, RFC 2119, March 1997.\n   [RFC3492]  Costello, A., \"Punycode: A Bootstring\
    \ encoding of Unicode\n              for Internationalized Domain Names in Applications\n\
    \              (IDNA)\", RFC 3492, March 2003.\n   [RFC3539]  Aboba, B. and J.\
    \ Wood, \"Authentication, Authorization and\n              Accounting (AAA) Transport\
    \ Profile\", RFC 3539, June 2003.\n   [RFC3629]  Yergeau, F., \"UTF-8, a transformation\
    \ format of ISO\n              10646\", STD 63, RFC 3629, November 2003.\n   [RFC3958]\
    \  Daigle, L. and A. Newton, \"Domain-Based Application\n              Service\
    \ Location Using SRV RRs and the Dynamic Delegation\n              Discovery Service\
    \ (DDDS)\", RFC 3958, January 2005.\n   [RFC3986]  Berners-Lee, T., Fielding,\
    \ R., and L. Masinter, \"Uniform\n              Resource Identifier (URI): Generic\
    \ Syntax\", STD 66,\n              RFC 3986, January 2005.\n   [RFC4004]  Calhoun,\
    \ P., Johansson, T., Perkins, C., Hiller, T., and\n              P. McCann, \"\
    Diameter Mobile IPv4 Application\", RFC 4004,\n              August 2005.\n  \
    \ [RFC4005]  Calhoun, P., Zorn, G., Spence, D., and D. Mitton,\n             \
    \ \"Diameter Network Access Server Application\", RFC 4005,\n              August\
    \ 2005.\n   [RFC4006]  Hakala, H., Mattila, L., Koskinen, J-P., Stura, M., and\
    \ J.\n              Loughney, \"Diameter Credit-Control Application\", RFC 4006,\n\
    \              August 2005.\n   [RFC4086]  Eastlake, D., Schiller, J., and S.\
    \ Crocker, \"Randomness\n              Requirements for Security\", BCP 106, RFC\
    \ 4086, June 2005.\n   [RFC4282]  Aboba, B., Beadles, M., Arkko, J., and P. Eronen,\
    \ \"The\n              Network Access Identifier\", RFC 4282, December 2005.\n\
    \   [RFC4291]  Hinden, R. and S. Deering, \"IP Version 6 Addressing\n        \
    \      Architecture\", RFC 4291, February 2006.\n   [RFC4960]  Stewart, R., \"\
    Stream Control Transmission Protocol\",\n              RFC 4960, September 2007.\n\
    \   [RFC5226]  Narten, T. and H. Alvestrand, \"Guidelines for Writing an\n   \
    \           IANA Considerations Section in RFCs\", BCP 26, RFC 5226,\n       \
    \       May 2008.\n   [RFC5234]  Crocker, D. and P. Overell, \"Augmented BNF for\
    \ Syntax\n              Specifications: ABNF\", STD 68, RFC 5234, January 2008.\n\
    \   [RFC5246]  Dierks, T. and E. Rescorla, \"The Transport Layer Security\n  \
    \            (TLS) Protocol Version 1.2\", RFC 5246, August 2008.\n   [RFC5280]\
    \  Cooper, D., Santesson, S., Farrell, S., Boeyen, S.,\n              Housley,\
    \ R., and W. Polk, \"Internet X.509 Public Key\n              Infrastructure Certificate\
    \ and Certificate Revocation List\n              (CRL) Profile\", RFC 5280, May\
    \ 2008.\n   [RFC5729]  Korhonen, J., Jones, M., Morand, L., and T. Tsou,\n   \
    \           \"Clarifications on the Routing of Diameter Requests Based\n     \
    \         on the Username and the Realm\", RFC 5729, December 2009.\n   [RFC5890]\
    \  Klensin, J., \"Internationalized Domain Names for\n              Applications\
    \ (IDNA): Definitions and Document Framework\",\n              RFC 5890, August\
    \ 2010.\n   [RFC5891]  Klensin, J., \"Internationalized Domain Names in\n    \
    \          Applications (IDNA): Protocol\", RFC 5891, August 2010.\n   [RFC6083]\
    \  Tuexen, M., Seggelmann, R., and E. Rescorla, \"Datagram\n              Transport\
    \ Layer Security (DTLS) for Stream Control\n              Transmission Protocol\
    \ (SCTP)\", RFC 6083, January 2011.\n   [RFC6347]  Rescorla, E. and N. Modadugu,\
    \ \"Datagram Transport Layer\n              Security Version 1.2\", RFC 6347,\
    \ January 2012.\n   [RFC6408]  Jones, M., Korhonen, J., and L. Morand, \"Diameter\n\
    \              Straightforward-Naming Authority Pointer (S-NAPTR) Usage\",\n \
    \             RFC 6408, November 2011.\n"
- title: 14.2.  Informative References
  contents:
  - "14.2.  Informative References\n   [ENTERPRISE]  IANA, \"SMI Network Management\
    \ Private Enterprise\n                 Codes\",\n                 <http://www.iana.org/assignments/enterprise-numbers>.\n\
    \   [IANATCV]     IANA, \"Termination-Cause AVP Values (code 295)\",\n       \
    \          <http://www.iana.org/assignments/aaa-parameters/\n                \
    \ aaa-parameters.xml#aaa-parameters-16>.\n   [RFC1492]     Finseth, C., \"An Access\
    \ Control Protocol, Sometimes\n                 Called TACACS\", RFC 1492, July\
    \ 1993.\n   [RFC1661]     Simpson, W., \"The Point-to-Point Protocol (PPP)\",\n\
    \                 STD 51, RFC 1661, July 1994.\n   [RFC2104]     Krawczyk, H.,\
    \ Bellare, M., and R. Canetti, \"HMAC:\n                 Keyed-Hashing for Message\
    \ Authentication\", RFC 2104,\n                 February 1997.\n   [RFC2782] \
    \    Gulbrandsen, A., Vixie, P., and L. Esibov, \"A DNS RR\n                 for\
    \ specifying the location of services (DNS SRV)\",\n                 RFC 2782,\
    \ February 2000.\n   [RFC2865]     Rigney, C., Willens, S., Rubens, A., and W.\
    \ Simpson,\n                 \"Remote Authentication Dial In User Service (RADIUS)\"\
    ,\n                 RFC 2865, June 2000.\n   [RFC2866]     Rigney, C., \"RADIUS\
    \ Accounting\", RFC 2866, June 2000.\n   [RFC2869]     Rigney, C., Willats, W.,\
    \ and P. Calhoun, \"RADIUS\n                 Extensions\", RFC 2869, June 2000.\n\
    \   [RFC2881]     Mitton, D. and M. Beadles, \"Network Access Server\n       \
    \          Requirements Next Generation (NASREQNG) NAS Model\",\n            \
    \     RFC 2881, July 2000.\n   [RFC2975]     Aboba, B., Arkko, J., and D. Harrington,\
    \ \"Introduction\n                 to Accounting Management\", RFC 2975, October\
    \ 2000.\n   [RFC2989]     Aboba, B., Calhoun, P., Glass, S., Hiller, T., McCann,\n\
    \                 P., Shiino, H., Walsh, P., Zorn, G., Dommety, G.,\n        \
    \         Perkins, C., Patil, B., Mitton, D., Manning, S.,\n                 Beadles,\
    \ M., Chen, X., Sivalingham, S., Hameed, A.,\n                 Munson, M., Jacobs,\
    \ S., Lim, B., Hirschman, B., Hsu,\n                 R., Koo, H., Lipford, M.,\
    \ Campbell, E., Xu, Y., Baba,\n                 S., and E. Jaques, \"Criteria\
    \ for Evaluating AAA\n                 Protocols for Network Access\", RFC 2989,\
    \ November 2000.\n   [RFC3162]     Aboba, B., Zorn, G., and D. Mitton, \"RADIUS\
    \ and IPv6\",\n                 RFC 3162, August 2001.\n   [RFC3748]     Aboba,\
    \ B., Blunk, L., Vollbrecht, J., Carlson, J., and\n                 H. Levkowetz,\
    \ \"Extensible Authentication Protocol\n                 (EAP)\", RFC 3748, June\
    \ 2004.\n   [RFC4301]     Kent, S. and K. Seo, \"Security Architecture for the\n\
    \                 Internet Protocol\", RFC 4301, December 2005.\n   [RFC4690]\
    \     Klensin, J., Faltstrom, P., Karp, C., and IAB, \"Review\n              \
    \   and Recommendations for Internationalized Domain Names\n                 (IDNs)\"\
    , RFC 4690, September 2006.\n   [RFC5176]     Chiba, M., Dommety, G., Eklund,\
    \ M., Mitton, D., and B.\n                 Aboba, \"Dynamic Authorization Extensions\
    \ to Remote\n                 Authentication Dial In User Service (RADIUS)\",\n\
    \                 RFC 5176, January 2008.\n   [RFC5461]     Gont, F., \"TCP's\
    \ Reaction to Soft Errors\", RFC 5461,\n                 February 2009.\n   [RFC5905]\
    \     Mills, D., Martin, J., Burbank, J., and W. Kasch,\n                 \"Network\
    \ Time Protocol Version 4: Protocol and\n                 Algorithms Specification\"\
    , RFC 5905, June 2010.\n   [RFC5927]     Gont, F., \"ICMP Attacks against TCP\"\
    , RFC 5927,\n                 July 2010.\n   [RFC6335]     Cotton, M., Eggert,\
    \ L., Touch, J., Westerlund, M., and\n                 S. Cheshire, \"Internet\
    \ Assigned Numbers Authority\n                 (IANA) Procedures for the Management\
    \ of the Service\n                 Name and Transport Protocol Port Number Registry\"\
    ,\n                 BCP 165, RFC 6335, August 2011.\n   [RFC6737]     Kang, J.\
    \ and G. Zorn, \"The Diameter Capabilities Update\n                 Application\"\
    , RFC 6737, October 2012.\n"
- title: Appendix A.  Acknowledgements
  contents:
  - 'Appendix A.  Acknowledgements

    '
- title: A.1.  This Document
  contents:
  - "A.1.  This Document\n   The authors would like to thank the following people\
    \ that have\n   provided proposals and contributions to this document:\n   To\
    \ Vishnu Ram and Satendra Gera for their contributions on\n   capabilities updates,\
    \ predictive loop avoidance, as well as many\n   other technical proposals.  To\
    \ Tolga Asveren for his insights and\n   contributions on almost all of the proposed\
    \ solutions incorporated\n   into this document.  To Timothy Smith for helping\
    \ on the capabilities\n   Update and other topics.  To Tony Zhang for providing\
    \ fixes to\n   loopholes on composing Failed-AVPs as well as many other issues\
    \ and\n   topics.  To Jan Nordqvist for clearly stating the usage of\n   Application\
    \ Ids.  To Anders Kristensen for providing needed technical\n   opinions.  To\
    \ David Frascone for providing invaluable review of the\n   document.  To Mark\
    \ Jones for providing clarifying text on vendor\n   command codes and other vendor-specific\
    \ indicators.  To Victor\n   Pascual and Sebastien Decugis for new text and recommendations\
    \ on\n   SCTP/DTLS.  To Jouni Korhonen for taking over the editing task and\n\
    \   resolving last bits from versions 27 through 29.\n   Special thanks to the\
    \ Diameter extensibility design team, which\n   helped resolve the tricky question\
    \ of mandatory AVPs and ABNF\n   semantics.  The members of this team are as follows:\n\
    \   Avi Lior, Jari Arkko, Glen Zorn, Lionel Morand, Mark Jones, Tolga\n   Asveren,\
    \ Jouni Korhonen, and Glenn McGregor.\n   Special thanks also to people who have\
    \ provided invaluable comments\n   and inputs especially in resolving controversial\
    \ issues:\n   Glen Zorn, Yoshihiro Ohba, Marco Stura, Stephen Farrel, Pete Resnick,\n\
    \   Peter Saint-Andre, Robert Sparks, Krishna Prasad, Sean Turner, Barry\n   Leiba,\
    \ and Pasi Eronen.\n   Finally, we would like to thank the original authors of\
    \ this\n   document:\n   Pat Calhoun, John Loughney, Jari Arkko, Erik Guttman,\
    \ and Glen Zorn.\n   Their invaluable knowledge and experience has given us a\
    \ robust and\n   flexible AAA protocol that many people have seen great value\
    \ in\n   adopting.  We greatly appreciate their support and stewardship for\n\
    \   the continued improvements of Diameter as a protocol.  We would also\n   like\
    \ to extend our gratitude to folks aside from the authors who have\n   assisted\
    \ and contributed to the original version of this document.\n   Their efforts\
    \ significantly contributed to the success of Diameter.\n"
- title: A.2.  RFC 3588
  contents:
  - "A.2.  RFC 3588\n   The authors would like to thank Nenad Trifunovic, Tony Johansson\
    \ and\n   Pankaj Patel for their participation in the pre-IETF Document Reading\n\
    \   Party.  Allison Mankin, Jonathan Wood, and Bernard Aboba provided\n   invaluable\
    \ assistance in working out transport issues and this was\n   also the case with\
    \ Steven Bellovin in the security area.\n   Paul Funk and David Mitton were instrumental\
    \ in getting the Peer\n   State Machine correct, and our deep thanks go to them\
    \ for their time.\n   Text in this document was also provided by Paul Funk, Mark\
    \ Eklund,\n   Mark Jones, and Dave Spence.  Jacques Caron provided many great\n\
    \   comments as a result of a thorough review of the spec.\n   The authors would\
    \ also like to acknowledge the following people for\n   their contribution in\
    \ the development of the Diameter protocol:\n   Allan C. Rubens, Haseeb Akhtar,\
    \ William Bulley, Stephen Farrell,\n   David Frascone, Daniel C. Fox, Lol Grant,\
    \ Ignacio Goyret, Nancy\n   Greene, Peter Heitman, Fredrik Johansson, Mark Jones,\
    \ Martin Julien,\n   Bob Kopacz, Paul Krumviede, Fergal Ladley, Ryan Moats, Victor\
    \ Muslin,\n   Kenneth Peirce, John Schnizlein, Sumit Vakil, John R. Vollbrecht,\
    \ and\n   Jeff Weisberg.\n   Finally, Pat Calhoun would like to thank Sun Microsystems\
    \ since most\n   of the effort put into this document was done while he was in\
    \ their\n   employ.\n"
- title: Appendix B.  S-NAPTR Example
  contents:
  - "Appendix B.  S-NAPTR Example\n   As an example, consider a client that wishes\
    \ to resolve aaa:\n   ex1.example.com.  The client performs a NAPTR query for\
    \ that domain,\n   and the following NAPTR records are returned:\n    ;;     \
    \   order pref flags service   regexp replacement\n    IN NAPTR  50    50   \"\
    s\"   \"aaa:diameter.tls.tcp\" \"\"\n                 _diameter._tls.ex1.example.com\n\
    \    IN NAPTR  100   50   \"s\"   \"aaa:diameter.tcp\"     \"\"\n            \
    \     _aaa._tcp.ex1.example.com\n    IN NAPTR  150   50   \"s\"   \"aaa:diameter.sctp\"\
    \    \"\"\n                 _diameter._sctp.ex1.example.com\n   This indicates\
    \ that the server supports TLS, TCP, and SCTP in that\n   order.  If the client\
    \ supports TLS, TLS will be used, targeted to a\n   host determined by an SRV\
    \ lookup of _diameter._tls.ex1.example.com.\n   That lookup would return:\n  \
    \  ;;       Priority  Weight  Port    Target\n    IN SRV   0         1       5060\
    \    server1.ex1.example.com\n    IN SRV   0         2       5060    server2.ex1.example.com\n\
    \   As an alternative example, a client that wishes to resolve aaa:\n   ex2.example.com.\
    \  The client performs a NAPTR query for that domain,\n   and the following NAPTR\
    \ records are returned:\n    ;;        order pref flags service   regexp replacement\n\
    \    IN NAPTR  150   50   \"a\"   \"aaa:diameter.tls.tcp\"  \"\"\n           \
    \      server1.ex2.example.com\n    IN NAPTR  150   50   \"a\"   \"aaa:diameter.tls.tcp\"\
    \  \"\"\n                 server2.ex2.example.com\n   This indicates that the\
    \ server supports TCP available at the returned\n   host names.\n"
- title: Appendix C.  Duplicate Detection
  contents:
  - "Appendix C.  Duplicate Detection\n   As described in Section 9.4, accounting\
    \ record duplicate detection is\n   based on session identifiers.  Duplicates\
    \ can appear for various\n   reasons:\n   o  Failover to an alternate server.\
    \  Where close to real-time\n      performance is required, failover thresholds\
    \ need to be kept low.\n      This may lead to an increased likelihood of duplicates.\
    \  Failover\n      can occur at the client or within Diameter agents.\n   o  Failure\
    \ of a client or agent after sending a record from non-\n      volatile memory,\
    \ but prior to receipt of an application-layer ACK\n      and deletion of the\
    \ record to be sent.  This will result in\n      retransmission of the record\
    \ soon after the client or agent has\n      rebooted.\n   o  Duplicates received\
    \ from RADIUS gateways.  Since the\n      retransmission behavior of RADIUS is\
    \ not defined within [RFC2865],\n      the likelihood of duplication will vary\
    \ according to the\n      implementation.\n   o  Implementation problems and misconfiguration.\n\
    \   The T flag is used as an indication of an application-layer\n   retransmission\
    \ event, e.g., due to failover to an alternate server.\n   It is defined only\
    \ for request messages sent by Diameter clients or\n   agents.  For instance,\
    \ after a reboot, a client may not know whether\n   it has already tried to send\
    \ the accounting records in its non-\n   volatile memory before the reboot occurred.\
    \  Diameter servers MAY use\n   the T flag as an aid when processing requests\
    \ and detecting duplicate\n   messages.  However, servers that do this MUST ensure\
    \ that duplicates\n   are found even when the first transmitted request arrives\
    \ at the\n   server after the retransmitted request.  It can be used only in cases\n\
    \   where no answer has been received from the server for a request and\n   the\
    \ request is sent again, (e.g., due to a failover to an alternate\n   peer, due\
    \ to a recovered primary peer or due to a client re-sending a\n   stored record\
    \ from non-volatile memory such as after reboot of a\n   client or agent).\n \
    \  In some cases, the Diameter accounting server can delay the duplicate\n   detection\
    \ and accounting record processing until a post-processing\n   phase takes place.\
    \  At that time records are likely to be sorted\n   according to the included\
    \ User-Name and duplicate elimination is easy\n   in this case.  In other situations,\
    \ it may be necessary to perform\n   real-time duplicate detection, such as when\
    \ credit limits are imposed\n   or real-time fraud detection is desired.\n   In\
    \ general, only generation of duplicates due to failover or re-\n   sending of\
    \ records in non-volatile storage can be reliably detected\n   by Diameter clients\
    \ or agents.  In such cases, the Diameter client or\n   agents can mark the message\
    \ as a possible duplicate by setting the T\n   flag.  Since the Diameter server\
    \ is responsible for duplicate\n   detection, it can choose whether or not to\
    \ make use of the T flag, in\n   order to optimize duplicate detection.  Since\
    \ the T flag does not\n   affect interoperability, and it may not be needed by\
    \ some servers,\n   generation of the T flag is REQUIRED for Diameter clients\
    \ and agents,\n   but it MAY be implemented by Diameter servers.\n   As an example,\
    \ it can be usually be assumed that duplicates appear\n   within a time window\
    \ of longest recorded network partition or device\n   fault, perhaps a day.  So\
    \ only records within this time window need\n   to be looked at in the backward\
    \ direction.  Secondly, hashing\n   techniques or other schemes, such as the use\
    \ of the T flag in the\n   received messages, may be used to eliminate the need\
    \ to do a full\n   search even in this set except for rare cases.\n   The following\
    \ is an example of how the T flag may be used by the\n   server to detect duplicate\
    \ requests.\n      A Diameter server MAY check the T flag of the received message\
    \ to\n      determine if the record is a possible duplicate.  If the T flag is\n\
    \      set in the request message, the server searches for a duplicate\n     \
    \ within a configurable duplication time window backward and\n      forward. \
    \ This limits database searching to those records where\n      the T flag is set.\
    \  In a well-run network, network partitions and\n      device faults will presumably\
    \ be rare events, so this approach\n      represents a substantial optimization\
    \ of the duplicate detection\n      process.  During failover, it is possible\
    \ for the original record\n      to be received after the T-flag-marked record,\
    \ due to differences\n      in network delays experienced along the path by the\
    \ original and\n      duplicate transmissions.  The likelihood of this occurring\n\
    \      increases as the failover interval is decreased.  In order to be\n    \
    \  able to detect duplicates that are out of order, the Diameter\n      server\
    \ should use backward and forward time windows when\n      performing duplicate\
    \ checking for the T-flag-marked request.  For\n      example, in order to allow\
    \ time for the original record to exit\n      the network and be recorded by the\
    \ accounting server, the Diameter\n      server can delay processing records with\
    \ the T flag set until a\n      time period TIME_WAIT + RECORD_PROCESSING_TIME\
    \ has elapsed after\n      the closing of the original transport connection. \
    \ After this time\n      period, it may check the T-flag-marked records against\
    \ the\n      database with relative assurance that the original records, if\n\
    \      sent, have been received and recorded.\n"
- title: Appendix D.  Internationalized Domain Names
  contents:
  - "Appendix D.  Internationalized Domain Names\n   To be compatible with the existing\
    \ DNS infrastructure and simplify\n   host and domain name comparison, Diameter\
    \ identities (FQDNs) are\n   represented in ASCII form.  This allows the Diameter\
    \ protocol to fall\n   in-line with the DNS strategy of being transparent from\
    \ the effects\n   of Internationalized Domain Names (IDNs) by following the\n\
    \   recommendations in [RFC4690] and [RFC5890].  Applications that\n   provide\
    \ support for IDNs outside of the Diameter protocol but\n   interacting with it\
    \ SHOULD use the representation and conversion\n   framework described in [RFC5890],\
    \ [RFC5891], and [RFC3492].\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Victor Fajardo (editor)\n   Telcordia Technologies\n \
    \  One Telcordia Drive, 1S-222\n   Piscataway, NJ  08854\n   USA\n   Phone: +1-908-421-1845\n\
    \   EMail: vf0213@gmail.com\n   Jari Arkko\n   Ericsson Research\n   02420 Jorvas\n\
    \   Finland\n   Phone: +358 40 5079256\n   EMail: jari.arkko@ericsson.com\n  \
    \ John Loughney\n   Nokia Research Center\n   955 Page Mill Road\n   Palo Alto,\
    \ CA  94304\n   US\n   Phone: +1-650-283-8068\n   EMail: john.loughney@nokia.com\n\
    \   Glen Zorn (editor)\n   Network Zen\n   227/358 Thanon Sanphawut\n   Bang Na,\
    \ Bangkok  10260\n   Thailand\n   Phone: +66 (0) 87-0404617\n   EMail: glenzorn@gmail.com\n"
