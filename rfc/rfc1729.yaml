- title: __initial_text__
  contents:
  - "            Using the Z39.50 Information Retrieval Protocol\n               \
    \       in the Internet Environment\n"
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo provides information for the Internet community.\
    \  This memo\n   does not specify an Internet standard of any kind.  Distribution\
    \ of\n   this memo is unlimited.\n"
- title: Summary
  contents:
  - "Summary\n   This memo describes an approach to the implementation of the\n  \
    \ ANSI/NISO Z39.50-1992 Standard for Information Retrieval in the\n   TCP/IP environment\
    \ which is currently in wide use by the Z39.50\n   implementor community.\n"
- title: Introduction
  contents:
  - "Introduction\n   Z39.50 is a US national standard defining a protocol for computer-\n\
    \   to-computer information retrieval that was first adopted in 1988 [1]\n   and\
    \ extensively revised in 1992 [2]. It was developed by the National\n   Information\
    \ Standards Organization (NISO), an ANSI-accredited\n   standards development\
    \ body that serves the publishing, library, and\n   information services communities.\
    \ The closely related international\n   standard, ISO 10162 (service definition)\
    \ [3] and 10163 (protocol)\n   [4], colloquially known as Search and Retrieve\
    \ or SR, reached full\n   International Standard (IS) status in 1991. Work is\
    \ ongoing within\n   ISO Technical Committee 46 Working Group 4 Subgroup 4 to\
    \ progress\n   various extensions to SR through the international standards process.\n\
    \   The international standard is essentially a compatible subset of the\n   current\
    \ US Z39.50-1992 standard. Z39.50 is an applications layer\n   protocol within\
    \ the OSI reference model, which assumes the presence\n   of lower-level OSI services\
    \ (in particular, the presentation layer\n   [5]) and of the OSI Association Control\
    \ Service Element (ACSE) [6]\n   within the application layer.\n   Many institutions\
    \ implementing this protocol chose, for various\n   reasons, to layer the protocol\
    \ directly over TCP/IP rather than to\n   implement it in an OSI environment or\
    \ to use the existing techniques\n   that provide full OSI services at and above\
    \ the OSI Transport layer\n   on top of TCP connections (as defined in RFC 1006\
    \ [7] and\n   implemented, for example, in the ISO Development Environment\n \
    \  software). These reasons included concerns about the size and\n   complexity\
    \ of OSI implementations, the lack of availability of mature\n   OSI software\
    \ for the full range of computing environments in use at\n   these institutions,\
    \ and the perception of relative instability of the\n   architectural structures\
    \ within the OSI applications layer (as\n   opposed to specific application layer\
    \ protocols such as Z39.50\n   itself). Most importantly, some of these institutions\
    \ were concerned\n   that the complexity introduced by the OSI upper layers would\
    \ outweigh\n   the relatively meager return in functionality that they were likely\n\
    \   to gain. Thus, for better or worse, the decision was taken to\n   implement\
    \ the Z39.50 protocol directly on top of TCP (with the\n   understanding that\
    \ this decision might be revisited at some point in\n   the future).\n   During\
    \ 1991-1993, a group of implementing institutions agreed to\n   participate in\
    \ the Z39.50 Interoperability Testbed project (sometimes\n   referred to by the\
    \ acronym \"ZIT\") under the auspices of the Coalition\n   for Networked Information\
    \ (CNI). Their primary objective was to\n   encourage the development of many\
    \ interoperable Z39.50\n   implementations running over TCP/IP on the Internet.\
    \ By mid-1993, a\n   number of independent Z39.50 implementations were operational\
    \ and\n   able to interoperate across the Internet.\n   The Library of Congress,\
    \ in its role as the Z39.50 Maintenance Agency\n   for NISO, maintains a registry\
    \ of the implementors [8], which\n   includes members of the Z39.50 interoperability\
    \ testbed.\n   This document describes implementation decisions by current\n \
    \  implementors of Z39.50 in the Internet environment. These have been\n   proven\
    \ within the ZIT project and are being used by most of the\n   members of the\
    \ Z39.50 Implementors' Group (ZIG), an informal group\n   that meets quarterly\
    \ to discuss implementation and interoperability\n   issues and to develop extensions\
    \ to the Z39.50 protocol targeted for\n   inclusion in future versions of the\
    \ standard. Intended as a guide for\n   other implementors who seek to develop\
    \ interoperable Z39.50\n   implementations running over TCP/IP, this document\
    \ focuses on issues\n   related to TCP/IP, and it does not address other potential\n\
    \   interoperability problems or agreements that have been reached among\n   the\
    \ implementors to address these problems. It does include a few\n   notes about\
    \ extensions to the existing Version 2 protocol that are\n   being used in the\
    \ implementor community which have interoperability\n   implications.  Potential\
    \ implementors of Z39.50 should subscribe to\n   the Z3950IW LISTSERV [9] to obtain\
    \ information specific to the Z39.50\n   protocol and extensions under development\
    \ as well as details of\n   current implementations.\n   Except where otherwise\
    \ noted, the version of Z39.50 discussed here is\n   ANSI/NISO Z39.50-1992, sometimes\
    \ called Z39.50 Version 2 (the\n   obsolete original version is referred to as\
    \ Z39.50-1988 or Z39.50\n   Version 1). The approach defined should also be applicable,\
    \ perhaps\n   with some minor changes, to future versions of the Z39.50 protocol,\n\
    \   and specifically to Version 3 which is currently under development.\n   This\
    \ document will probably be updated to address new versions of the\n   base Z39.50\
    \ protocol as they become stable.\n"
- title: Encoding
  contents:
  - "Encoding\n   The Z39.50 standard specifies its application protocol data units\n\
    \   (APDUs) in Abstract Syntax Notation One (ASN.1) [10]. These APDUs\n   include\
    \ EXTERNAL references to other ASN.1 and non-ASN.1 objects such\n   as those defining\
    \ record transfer syntaxes to be used in a given\n   application association.\n\
    \   The standard Basic Encoding Rules (BER) [11] are applied to the ASN.1\n  \
    \ structures defined by the Z39.50 protocol to produce a byte stream\n   that\
    \ can be transmitted across a TCP/IP connection. The only\n   restriction on the\
    \ use of BER to produce this byte stream is that\n   direct, rather than indirect,\
    \ references must be used for EXTERNAL\n   objects. This is necessary because\
    \ there is no presentation context\n   in the TCP/IP environment to support indirect\
    \ reference. A Z39.50\n   implementation developed according to this specification\
    \ and running\n   over TCP/IP should produce a valid byte stream according to\
    \ the\n   Z39.50 standard, in the sense that the same byte stream could be\n \
    \  passed to an OSI implementation. However, not all byte streams that\n   can\
    \ be produced by applying BER to the APDUs specified in the Z39.50\n   standard\
    \ in an OSI environment will be legitimate under this\n   specification for the\
    \ TCP/IP environment; this specification defines\n   a subset of the possible\
    \ byte streams valid in a pure OSI environment\n   which excludes those using\
    \ indirect reference for EXTERNAL objects.\n   All other BER features should be\
    \ tolerated by Z39.50 implementations\n   running over TCP/IP, including the ability\
    \ to accept indefinite\n   length encodings, although it is preferable that implementations\
    \ do\n   not generate such encodings since they have caused problems for some\n\
    \   ASN.1/BER parsers.  It should also be noted that at least to the best\n  \
    \ of the author's knowledge, there are no implementations at present\n   that\
    \ use ASN.1/BER representations of floating point numbers;\n   instead, integers\
    \ with scaling factors have been used for these\n   purposes. It should also be\
    \ noted that Z39.50 version 2 does not\n   really address character set encoding\
    \ issues; these questions, and\n   their interactions with ASN.1/BER support for\
    \ multiple character\n   sets, are under active discussion as part of the effort\
    \ to develop\n   Z39.50 version 3.\n"
- title: Connection
  contents:
  - "Connection\n   In the Internet environment, TCP Port 210 has been assigned to\
    \ Z39.50\n   by the Internet Assigned Numbers Authority [12]. To initiate a Z39.50\n\
    \   connection to a server in the TCP/IP environment, a client simply\n   opens\
    \ a TCP connection to port 210 on the server and then, as soon as\n   the TCP\
    \ connection is established, transmits a Z39.50 INIT APDU using\n   the BER encoding\
    \ of that INIT APDU as described above.\n   Implementors should be aware that\
    \ there is a substantial installed\n   base of implementations of the Wide Area\
    \ Information Server (WAIS)\n   system. The original versions of this software\
    \ employed Z39.50\n   Version 1 with some extensions. Z39.50 Version 1 did not\
    \ use BER\n   encoding and Z39.50 Version 1 INIT APDUs look very different from\
    \ the\n   INIT APDUs of Z39.50 Version 2.  Implementations of Z39.50 should at\n\
    \   least be prepared to reject gracefully WAIS-type INIT APDUs. Some\n   implementations\
    \ recognize such INIT APDUs and revert to the Z39.50\n   Version 1 variant used\
    \ in WAIS upon encountering them, thus providing\n   backwards compatibility with\
    \ the existing base of WAIS clients and;\n   the usual means of checking for a\
    \ WAIS, as opposed to Z39.50 Version\n   2, client is to see if the first byte\
    \ sent on the connection is an\n   ASCII zero, which indicates a WAIS client.\
    \ (In version 1 of WAIS,\n   bytes 0-9 of the first PDU contain an ASCII packet\
    \ length; the lower\n   case ASCII string \"wais\" appears starting at byte 12.)\
    \ Work is\n   currently underway to specify a WAIS profile for use with Z39.50\n\
    \   version 2 [13]; it is expected that this will be issued as a Z39.50\n   Applications\
    \ Profile through the NIST OIW Library Automation Special\n   Interest Group.\
    \ This profile is expected to be compatible with the\n   layering defined in this\
    \ RFC.\n"
- title: Service Mappings
  contents:
  - "Service Mappings\n   The Z39.50 standard maps Z39.50 services onto a variety\
    \ of\n   association control and presentation layer services. Connection\n   establishment\
    \ has already been discussed. The other two association\n   control services that\
    \ are relevant to Z39.50 are ABORT and RELEASE.\n   The mapping of the RELEASE\
    \ service to a standard TCP CLOSE is\n   straightforward. The Z39.50 protocol\
    \ itself does not, in the current\n   version, include a Z39.50 CLOSE APDU. When\
    \ the client has completed\n   its interaction with the server, it calls the IR-RELEASE\
    \ service,\n   which is directly mapped to association control's orderly association\n\
    \   release. In the TCP/IP environment, the client should simply initiate\n  \
    \ a TCP CLOSE. The mapping for association abort is more complex,\n   partially\
    \ because some TCP/IP implementations cannot distinguish a\n   TCP reset from\
    \ the other side of the connection from other events. To\n   accomplish an abort\
    \ (that is, a mapping of the IR-ABORT service in\n   the Z39.50 protocol) in the\
    \ TCP/IP environment, client or server need\n   only terminate the TCP connection\
    \ either via TCP ABORT or TCP CLOSE.\n   Real-world implementations need to be\
    \ prepared to deal with both TCP\n   ABORT and CLOSE anyway, so this approach\
    \ presents no additional\n   problems, other than the somewhat ambiguous nature\
    \ of the type of\n   association termination.\n   It is expected that Z39.50 Version\
    \ 3 will include a termination\n   service which will involve an exchange of Z39.50\
    \ CLOSE APDUs,\n   followed by an association RELEASE (which would presumably,\
    \ in the\n   Internet environment, be mapped to a TCP CLOSE). This new termination\n\
    \   service is expected to support both graceful and abrupt termination.\n   Of\
    \ course, robust implementations will still need to be prepared to\n   encounter\
    \ TCP CLOSE or ABORT.\n   Service mappings for the transmission of data by client\
    \ and server\n   (to the presentation layer P-DATA service) are trivial: They\
    \ are\n   simply mapped to TCP transmit and receive operations. TCP facilities\n\
    \   such as expedited data are not used by Z39.50 in a TCP environment.\n"
- title: Contexts
  contents:
  - "Contexts\n   At the point when the TCP connection is established on TCP port\
    \ 210,\n   client and server should both assume that the application context\n\
    \   given in Appendices A and B of the Z39.50-1992 standard are in place.\n  \
    \ These are the ASN.1 definitions of the Z39.50 APDUs and the transfer\n   syntax\
    \ defined by applying the BER to these APDUs.\n   Implementations can reasonably\
    \ expect that the diagnostic set BIB-1\n   is supported, and, if resource control\
    \ is being used, the resource\n   report format BIB-1 is supported as well.\n\
    \   In the absence of a presentation negotiation mechanism, clients and\n   servers\
    \ should be cautious about using alternative attribute sets,\n   diagnostic record\
    \ formats, resource report formats, or other objects\n   defined by optional EXTERNALs\
    \ within the Z39.50 ASN.1, such as\n   authentication parameters, unless there\
    \ is known to be prior\n   agreement to support them. Of course, either participant\
    \ in an\n   association can reference such an object by object ID in an APDU,\
    \ but\n   there is no guarantee that the other partner in the association will\n\
    \   be able to understand it. Robust implementations should be prepared\n   to\
    \ encounter unknown or unsupported object IDs and generate\n   appropriate diagnostics.\
    \ Over time, the default, commonly known pool\n   of object IDs may be expanded\
    \ (for example, to support authentication\n   parameters).\n   Implementors should\
    \ refer to the document [14] issued by the Z39.50\n   maintenance agency in June\
    \ 1992 for more details on the assumed\n   contexts and object identifiers.\n\
    \   Record syntaxes present a serious practical problem. In the OSI\n   environment,\
    \ the partners in a Z39.50 association are assumed to\n   agree, either through\
    \ presentation negotiation as part of association\n   establishment, or later,\
    \ dynamically, as part of the PRESENT process\n   (through the use of the alter\
    \ presentation context function at the\n   presentation layer), on which record\
    \ syntaxes the two entities\n   commonly know. There is a preferred record syntax\
    \ parameter that can\n   be supplied by the client to guide this negotiation.\
    \ A number of\n   registered record syntaxes exist; some are based on ASN.1 and\
    \ others\n   use formats such as the MARC standard for the interchange of machine\n\
    \   readable cataloging records which predate ASN.1, but are widely\n   implemented.\
    \  In the TCP/IP environment, if the server cannot supply\n   the record in the\
    \ preferred syntax, it has no guarantee that the\n   client will understand any\
    \ other syntax in which it might transmit\n   the record back to the client, and\
    \ has no means of negotiating such\n   syntaxes.\n   Several proposals have been\
    \ suggested to solve this problem. One,\n   which will likely be part of Z39.50\
    \ Version 3, is to replace the\n   preferred record syntax parameter with a list\
    \ of prioritized\n   preferred syntaxes supplied by the client, plus a flag indicating\n\
    \   whether the server is allowed to substitute a record syntax not on\n   the\
    \ list provided by the client. The currently proposed ASN.1 for\n   this extension\
    \ is upwards compatible with Z39.50 Version 2, although\n   the details are still\
    \ under discussion within the Z39.50\n   Implementor's Group. As the Version 3\
    \ ASN.1 becomes stable in this\n   area, Z39.50 servers are encouraged to accept\
    \ the extended ASN.1 for\n   generalized preferred record syntax. The extensibility\
    \ rules for\n   Z39.50 negotiation let clients and servers negotiate the use of\n\
    \   Z39.50 Version 2 plus the generalized preferred syntax feature from\n   Version\
    \ 3. Thus, a client could support the generalized preferred\n   record syntax,\
    \ propose its use to any server, and, if the server\n   rejects the proposal,\
    \ revert to the Version 2 preferred syntax\n   feature.\n   A second alternative\
    \ (not incompatible with the Version 3 extension)\n   would be to adopt a convention\
    \ for TCP/IP implementations that the\n   server not return a record in a syntax\
    \ not on the preferred record\n   syntax list provided by the client. Instead,\
    \ it would return a\n   diagnostic record indicating that a suitable record transfer\
    \ syntax\n   was not available. This strategy could be viewed as simply\n   implementing\
    \ a subset of the Version 3 solution, and should be\n   considered by implementors\
    \ of servers as a possible interim measure.\n"
- title: Other Interoperability Issues
  contents:
  - "Other Interoperability Issues\n   Version 3 will include an \"other\" data field\
    \ in each APDU, which can\n   be used to carry implementation-specific extensions\
    \ to the protocol.\n   A number of implementations are already employing this\
    \ field, and\n   interoperable implementations might be wise to include code which\
    \ at\n   least ignores the presence of such fields rather than considering\n \
    \  their presence an error (in contravention of the standard).\n"
- title: References
  contents:
  - "References\n   [1] National Information Standards Organization (NISO). American\n\
    \       National Standard Z39.50, Information Retrieval Service\n       Definition\
    \ and Protocol Specifications for Library Applications\n       (New Brunswick,\
    \ NJ: Transaction Publishers; 1988).\n   [2] ANSI/NISO Z39.50-1992 (version 2)\
    \ Information Retrieval Service\n       and Protocol: American National Standard,\
    \ Information Retrieval\n       Application Service Definition and Protocol Specification\
    \ for\n       Open Systems Interconnection, 1992.\n   [3] ISO 10162 International\
    \ Organization for Standardization (ISO).\n       Documentation -- Search and\
    \ Retrieve Service Definition, 1992.\n   [4] ISO 10163 International Organization\
    \ for Standardization (ISO).\n       Documentation -- Search and Retrieve Protocol\
    \ Definition. 1992.\n   [5] ISO 8822 - Information Processing Systems - Open Systems\n\
    \       Interconnection - Connection Oriented Presentation Service\n       Definition,\
    \ 1988.\n   [6] ISO 8649 - Information Processing Systems - Open Systems\n   \
    \    Interconnection - Service Definition for the Association Control\n      \
    \ Service Element, 1987. See also ISO 8650 - Information Processing\n       Systems\
    \ - Open Systems Interconnection - Protocol Specification\n       for the Association\
    \ Control Service Element, 1987.\n   [7] Rose, M., and D. Cass, \"ISO Transport\
    \ Layer Services on Top of\n       the TCP, Version 3\", STD 35, RFC 1006, Northrop\
    \ Research and\n       Technology Center, May 1987.\n   [8] Registry of Z39.50\
    \ Implementors, available from the Z39.50\n       Maintenance Agency (Ray Denenberg,\
    \ ray@rden.loc.gov)\n   [9] To subscribe to the Z39.50 Implementor's Workshop\
    \ list send the\n       message: SUB Z3950IW yourname to: LISTSERV@NERVM.NERDC.UFL.EDU\n\
    \       (or NERVM.BITNET).  Current drafts of the Version 3 Protocol\n       document\
    \ are available through the Library of Congress GOPHER\n       server, MARVEL.LOC.GOV.\n\
    \  [10] ISO 8824 - Information Processing Systems - Open Systems\n       Interconnection\
    \ - Specifications for Abstract Syntax Notation One\n       (ASN.1), 1987\n  [11]\
    \ ISO 8825 Information Processing Systems - Open Systems\n       Interconnection\
    \ - Specification of Basic Encoding Rules for\n       Abstract Syntax Notation\
    \ One (ASN.1) 1987\n  [12] Reynolds, J., and J. Postel, \"Assigned Numbers\",\
    \ STD 2, RFC 1700,\n       USC/Information Sciences Institute, October 1994.\n\
    \  [13] WAIS Profile of Z39.50 Version 2, Revision 1.4, April 26, 1994,\n    \
    \   available from WAIS Inc.\n  [14] Registration of Z39.50 OSI Object Identifiers\
    \ (Z39.50-MA-024),\n       available from the Z39.50 Maintenance Agency (Ray Denenberg,\n\
    \       ray@rden.loc.gov).\n"
- title: Security Considerations
  contents:
  - "Security Considerations\n   This document does not discuss security considerations.\
    \ However, it\n   should be noted that the Z39.50 protocol includes mechanisms\
    \ for\n   authentication and security that implementors should review.\n"
- title: Author's Address
  contents:
  - "Author's Address\n   Clifford A. Lynch\n   University of California, Office of\
    \ the President\n   300 Lakeside Drive, 8th Floor\n   Oakland, CA 94612-3550\n\
    \   Phone: (510) 987-0522\n   EMail: clifford.lynch@ucop.edu\n"
