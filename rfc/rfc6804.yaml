- title: __initial_text__
  contents:
  - ''
- title: Independent Submission                                        B. Manning
  contents:
  - "Independent Submission                                        B. Manning\n  \
    \             DISCOVER: Supporting Multicast DNS Queries\n"
- title: Abstract
  contents:
  - "Abstract\n   This document describes the DISCOVER opcode, an experimental\n \
    \  extension to the Domain Name System (DNS) to use multicast queries\n   for\
    \ resource discovery.  This opcode was tested in experiments run\n   during 1995\
    \ and 1996 for the Topology Based Domain Search (TBDS)\n   project.  This project\
    \ is no longer active and there are no current\n   plans to restart it.  TBDS\
    \ was the first known use of multicast\n   transport for DNS.  A client multicasts\
    \ a DNS query using the\n   DISCOVER opcode and processes the multiple responses\
    \ that may result.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document is not an Internet Standards Track specification;\
    \ it is\n   published for the historical record.\n   This document defines a Historic\
    \ Document for the Internet community.\n   This is a contribution to the RFC Series,\
    \ independently of any other\n   RFC stream.  The RFC Editor has chosen to publish\
    \ this document at\n   its discretion and makes no statement about its value for\n\
    \   implementation or deployment.  Documents approved for publication by\n   the\
    \ RFC Editor are not a candidate for any level of Internet\n   Standard; see Section\
    \ 2 of RFC 5741.\n   Information about the current status of this document, any\
    \ errata,\n   and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc6804.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2012 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   The TBDS project developed extensions to existing network\
    \ services to\n   enable software for clients and servers of an application to\
    \ become\n   more resilient to changes in topology by dynamically sensing changes\n\
    \   and switching between client/server and peer-peer methods for both\n   end-system-to-server\
    \ and server-to-server communications.\n   The first existing network service\
    \ to be investigated was the Domain\n   Name Systems (DNS), which is used to map\
    \ symbolic Internet names to\n   numeric Internet addresses.  Based upon a hierarchical\
    \ tree\n   structure, the DNS relies upon uninterrupted connectivity of nodes\
    \ to\n   a special set of static, manually configured root servers.  To\n   improve\
    \ the robustness and availability of the DNS service, TBDS\n   developed and defined\
    \ enhancements that enable nodes to map names to\n   numbers without the need\
    \ for uninterrupted connectivity to the\n   Internet root servers.  These techniques\
    \ were automated, allowing\n   transition between connected and unconnected operations\
    \ to be done\n   without direct human intervention.\n   These enhancements to\
    \ the DNS server code are based on the open\n   source BIND to support reception\
    \ and processing of multicast packets.\n   Proof-of-concept modifications to BIND\
    \ 8.1.2 were made to show that\n   multicast awareness could be added to BIND.\
    \  An analysis was made of\n   the existing DNS code deployment and the schedule\
    \ of new feature\n   deployment so that we could synchronize TBDS with a more\
    \ appropriate\n   code base.  Testing identified a race condition due to overloading\n\
    \   the semantics of the DNS opcode that was used to communicate to\n   servers.\n\
    \   This race condition was explored within the IETF regarding use of\n   existing\
    \ DNS opcodes.  Discussion within the team and with others in\n   the IETF led\
    \ to the idea that we needed a new opcode that would not\n   overload the semantics\
    \ of existing opcodes.  The original DNS design\n   specification presumes that\
    \ few clients exist that would share common\n   DNS data.  To correct this problem,\
    \ a new opcode was designed to\n   disambiguate TBDS requests from normal nameserver\
    \ requests.\n   In the standard Domain Name System (DNS) [1] [2], queries are\
    \ always\n   unicast using the QUERY opcode.  The TBDS research project [5],\n\
    \   funded under DARPA grant F30602-99-1-0523, explored the use of\n   multicast\
    \ DNS [1] [2] queries for resource discovery by autonomous,\n   mobile nodes in\
    \ disconnected networks.  The operations model is\n   covered in the TBDS documentation.\
    \  Multicast queries may return\n   multiple replies, while the standard DNS QUERY\
    \ operation (see\n   Sections 3.7, 4.3, and 5 of RFC 1034 [1]; and Section 4.1.1\
    \ of RFC\n   1035 [2]) expects a single reply.  Instead of extending the QUERY\n\
    \   opcode, the project developed and tested a new query operation,\n   DISCOVER,\
    \ that was designed to accommodate multiple responses from a\n   multicast query.\
    \  The ability to accept multiple replies provides a\n   basis for discrimination\
    \ of man-in-the-middle attacks, which succeed\n   by being the first to respond.\
    \  Use of DISCOVER requires the use of\n   caching in the receiver, so the ephemeral\
    \ nature of stub resolvers is\n   precluded.\n   This memo documents the processing\
    \ rules for DISCOVER, for possible\n   incorporation in a future revision of the\
    \ DNS specification.\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"\
    SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\",  \"MAY\"\
    , and \"OPTIONAL\" in this\n   document are to be interpreted as described in\
    \ BCP 14, RFC 2119 [3].\n"
- title: 2.  DISCOVER Processing Rules
  contents:
  - "2.  DISCOVER Processing Rules\n   A requester will send a DISCOVER query message\
    \ to a multicast\n   destination address, with some particular multicast scope.\
    \  The\n   requester must be prepared to receive multiple replies from multiple\n\
    \   responders, although we expect that there will be a single reply per\n   responder.\n\
    \   DISCOVER responses (i.e., response messages from DISCOVER queries)\n   have\
    \ standard Answer, Authority, and Additional sections.  For\n   example, the DISCOVER\
    \ response is the same as the response to a QUERY\n   operation.  Zero-content\
    \ answers should not be sent, to avoid badly\n   formed or unfulfilled requests.\
    \  Responses should be sent to the\n   unicast address of the requester, and the\
    \ source address should\n   reflect the unicast address of the responder.  DISCOVER\
    \ responses may\n   echo the request's Question section or leave it blank, just\
    \ as for\n   QUERY.\n   DISCOVER works like QUERY, with the following exceptions:\n\
    \      1. The Question section of a DISCOVER operation contains\n         <QNAME=zonename,QTYPE=SOA>\
    \ tuples, if the section is present.\n         Within TBDS, this structure was\
    \ augmented with:\n         <QNAME=service,QTYPE=SRV>.  While this worked, it\
    \ would be\n         cleaner to ask the SRV question in a separate pass; any future\n\
    \         work should take this into consideration.\n      2. If QDCOUNT equals\
    \ 0, then only servers willing to do recursion\n         should answer; other\
    \ servers must silently discard a DISCOVER\n         request with QDCOUNT equals\
    \ 0.\n      3. If QDCOUNT is not equal to 0, then only servers that are\n    \
    \     authoritative for the zones named by some QNAME should answer.\n      Hence,\
    \ replies to DISCOVER queries will always be authoritative or\n      else have\
    \ RA (Recursion Available) set.\n"
- title: 3.  Using DISCOVER Queries
  contents:
  - '3.  Using DISCOVER Queries

    '
- title: 3.1.  Performing Host Lookups
  contents:
  - "3.1.  Performing Host Lookups\n   To perform a hostname lookup using DISCOVER,\
    \ a node could:\n      o  Compute the zone name of the enclosing in-addr.arpa,\
    \ ip6.int,\n         or ip6.arpa domain.\n      o  DISCOVER whether any in-scope\
    \ server(s) are authoritative for\n         this zone.\n            If so, query\
    \ these authoritative servers for local\n            in-addr/ip6 names.\n    \
    \  o  If not, DISCOVER whether there are recursive servers available.\n      \
    \      If so, query these recursive servers for local in-addr/ip6\n          \
    \  names.\n         The requester can determine from the replies whether there\
    \ are\n         any DNS servers that are authoritative (or support recursion)\n\
    \         for the zone.\n      o  Once the host's Fully Qualified Domain Name\
    \ (FQDN) is known,\n         repeat the process to discover the closest enclosing\n\
    \         authoritative server for this local name.\n      o  Cache all NS and\
    \ A data learned in this process, respecting\n         Times To Live (TTLs).\n"
- title: 3.2.  Performing Service Lookups
  contents:
  - "3.2.  Performing Service Lookups\n   To lookup a service name using DISCOVER,\
    \ the following steps may be\n   used:\n      o  Use DISCOVER as outlined in Section\
    \ 3.1 to perform\n         gethostbyaddr() and then gethostbyname() on one's own\
    \ link-\n         local address.  This gives a list of local authoritative\n \
    \        servers.\n      o  Assume that the closest enclosing zone for which an\n\
    \         authoritative server responds to an in-scope DISCOVER message\n    \
    \     is this host's \"parent domain\", and compute the SRV name as\n        \
    \       _service._transport.*.parentdomain.\n         This is a change to the\
    \ definition provided in RFC 1034 [1].  A\n         wildcard label (\"*\") in\
    \ the QNAME used in a DNS message with\n         the opcode DISCOVER should be\
    \ evaluated with special rules: the\n         wildcard should match any label\
    \ for which the DNS server data\n         is authoritative.  For example 'x.*.example.com.'\
    \ would match\n         'x.y.example.com.' and 'x.yy.example.com.', provided that\
    \ the\n         server was authoritative for 'example.com.'\n      o  Finally,\
    \ send an SRV query for this SRV name to the discovered\n         local authoritative\
    \ servers to complete the getservbyname()\n         call.\n         This call\
    \ returns a structure that can be populated by response\n         values, as follows:\n\
    \         s_name    The name of the service, \"_service\" without the\n      \
    \             preceding underscore.\n         s_aliases The names returned in\
    \ the SRV Resource Records (RRs)\n                   in replies to the query.\n\
    \         s_port    The port number in the SRV RRs replies to the query.\n   \
    \                If these port numbers do not match, one of the port\n       \
    \            numbers is chosen, and only those names that\n                  \
    \ correspond are returned.\n         s_proto   The transport protocol passed from\
    \ the DNS process\n                   using the \"_transport\" label, without\
    \ the preceding\n                   underscore.\n"
- title: 3.3.  Using DISCOVER for Disconnected Names
  contents:
  - "3.3.  Using DISCOVER for Disconnected Names\n   DISCOVER allows discovery of\
    \ a host (for example, a printer offering\n   LPD services) whose DNS server answers\
    \ authoritatively for a domain\n   name that hasn't been delegated to it, but\
    \ is defined within some\n   local scope.  Since DISCOVER is explicitly defined\
    \ to discover\n   undelegated zones for tightly scoped queries, this behavior\
    \ isn't a\n   violation of DNS's coherency principles.  Note that a responder\
    \ to\n   DISCOVER might not be traditional DNS software, it could be special-\n\
    \   purpose software.\n   DISCOVER usage for disconnected networks with no authoritative\n\
    \   servers can be achieved using the following conditions:\n      o  Hosts run\
    \ a \"stub authoritative server\" that acts as though its\n         FQDN were\
    \ a zone name.\n      o  The computed SOA gives the host's FQDN as the MNAME,\
    \ \".\" as the\n         ANAME, seconds-since-1Jan2000 as the SERIAL, and low\
    \ constants\n         for EXPIRE and the other SOA timers.\n      o  NS is used\
    \ as the host's FQDN.\n      o  The glue is computed as the host's link-local\
    \ address, or hosts\n         may run a \"DNS stub server\" that acts as though\
    \ its FQDN were a\n         zone name.\n   The rules governing the behavior of\
    \ this server consist of a single\n   change to the method of use, and no change\
    \ whatsoever to the current\n   format of DNS packets.  Specifically, this extension\
    \ allows UDP DNS\n   queries, as documented in RFC 1035, Sections 4.1.1, 4.1.2,\
    \ and 4.2.1,\n   to be addressed to port 53 of statically assigned relative offset\
    \ -4\n   within the range of multicast addresses defined as \"administratively\n\
    \   scoped\" by Section 9 of RFC 2365 [6].  Within the full /8 of\n   administratively\
    \ scoped addresses, this corresponds to the\n   destination address 239.255.255.251.\
    \  Until the Multicast-Scope Zone\n   Announcement Protocol (MZAP) or a similar\
    \ protocol is implemented to\n   allow hosts to discover the extent of the local\
    \ multicast scopes that\n   enclose them, it is anticipated that implementations\
    \ will simply\n   utilize the destination address 239.255.255.251.  Queries sent\
    \ via\n   multicast MUST NOT request recursion.\n   In order to receive multicasted\
    \ queries, DNS server implementations\n   MUST listen on the -4 offset to their\
    \ local scope (as above, in the\n   absence of a method of determining the scope,\
    \ this will be assumed to\n   be relative to the full /8 allocated for administratively\
    \ scoped\n   multicast use, or 239.255.255.251) and respond via ordinary unicast\n\
    \   UDP to ONLY those queries for which they have a positive answer that\n   originated\
    \ within a locally-configured zone file.  That is, a server\n   MUST NOT answer\
    \ a multicasted query with cached information that it\n   received from another\
    \ server, nor may it request further resolution\n   from other servers on behalf\
    \ of a multicasted query.  A multicast-\n   capable server may, however, utilize\
    \ multicast queries to perform\n   further resolution on behalf of queries received\
    \ via ordinary\n   unicast.  This is referred to as \"proxy\" operation.  Multicast-\n\
    \   enabled DNS servers MUST answer multicasted queries non-\n   authoritatively.\
    \  That is, when responding to a query that was\n   received via multicast, they\
    \ MUST NOT include an NS record that\n   contains data that resolves back to their\
    \ own IP address and MUST NOT\n   set the AA bit.\n   Resolvers MUST anticipate\
    \ receiving no replies to some multicasted\n   queries, in the event that no multicast-enabled\
    \ DNS server\n   implementations are active within the local scope, or in the\
    \ event\n   that no positive responses exist to the transmitted query.  That is,\n\
    \   a query for the MX record for host.domain.com would go unanswered if\n   no\
    \ local server was able to resolve that request, if no MX record\n   exists for\
    \ host.domain.com, or if no local servers were capable of\n   receiving multicast\
    \ queries.  The resolver that initiated the query\n   MUST treat such non-response\
    \ as a non-cacheable negative response.\n   Since this multicast transmission\
    \ does not provide reliable delivery,\n   resolvers MAY repeat the transmission\
    \ of a query in order to assure\n   themselves that is has been received by any\
    \ hosts capable of\n   answering; however, any resolvers that repeat a query MUST\
    \ increase\n   the interval by a factor of two between each repetition.  It is\
    \ more\n   likely, however, that any repeated queries will be performed under\n\
    \   the explicit direction of the application driving the query, rather\n   than\
    \ autonomously by the resolver implementation.\n   It will often be the case that\
    \ multicast queries will result in\n   responses from multiple servers.  In the\
    \ event that the multicast\n   query was generated via a current API such as gethostbyname,\
    \ or as\n   the result of a proxy operation, the first response received must\
    \ be\n   passed to the requesting application or host, and all subsequently\n\
    \   received responses must be discarded.  Future multicast-aware APIs\n   that\
    \ use DISCOVER should anticipate receiving multiple independent RR\n   sets in\
    \ response to queries and using external heuristics for\n   selecting the most\
    \ appropriate RR set.\n   Such servers should answer DISCOVER packets for its\
    \ zone, and will be\n   found by the iterative \"discover closest enclosing authority\
    \ server\"\n   by DISCOVER clients, in either the gethostbyname() or SRV cases\n\
    \   described above.  Note that stub servers answer only with zone names\n   that\
    \ exactly match QNAME's, not with zone names that are owned by\n   QNAME's.\n"
- title: 4.  IANA Considerations
  contents:
  - "4.  IANA Considerations\n   At such time as this idea might be considered for\
    \ a future addition\n   to the DNS protocol, IANA would need to assign a value\
    \ for the\n   opcode.\n"
- title: 5.  Security Considerations
  contents:
  - "5.  Security Considerations\n   The following paragraph on security considerations\
    \ was written very\n   early in the use and exploration of IP multicast and, as\
    \ such,\n   represents a fairly naive view on the type and scope of exploits that\n\
    \   are enabled through the use of IP multicast.  A more up-to-date\n   understanding\
    \ of multicast security considerations may be found in\n   RFC 5294 [4].\n   No\
    \ new security considerations are known to be introduced with a new\n   DNS query\
    \ operation.  However, using multicast for service discovery\n   has the potential\
    \ for denial of service from flooding attacks.  How\n   to scope multicast is\
    \ not part of the DISCOVER processing rules.  It\n   may also be possible to enable\
    \ deliberate misconfiguration of clients\n   simply by running a malicious DNS\
    \ server that falsely claims to be\n   authoritative for delegations.  One possible\
    \ way to mitigate this\n   threat is to use credentials, such as CERT resource\
    \ records within an\n   RR set.  The TBDS project took this approach.  TBDS did\
    \ not directly\n   utilize DNS Security (DNSSEC), so possible interactions with\
    \ DNSSEC-\n   aware/-capable servers are unknown.\n"
- title: 6.  Acknowledgments
  contents:
  - "6.  Acknowledgments\n   This material was generated in discussions on the mdns\
    \ mailing list\n   hosted by Zocalo in March 2000 and updated by discussions in\n\
    \   September/October 2003 on a closed mailing list.  David Lawrence,\n   Scott\
    \ Rose, Stuart Cheshire, Bill Woodcock, and Erik Guttman were\n   active contributors.\
    \  Suzanne Woolf was part of the original\n   implementation team and an invaluable\
    \ sanity checker.  Funding for\n   the RFC Editor function is currently provided\
    \ by the Internet\n   Society.\n"
- title: 7.  References
  contents:
  - '7.  References

    '
- title: 7.1.  Normative References
  contents:
  - "7.1.  Normative References\n   [1]  Mockapetris, P., \"DOMAIN NAMES - CONCEPTS\
    \ AND FACILITIES\", STD\n        13, RFC 1034, November 1987.\n   [2]  Mockapetris,\
    \ P., \"DOMAIN NAMES - IMPLEMENTATION AND\n        SPECIFICATION\", STD 13, RFC\
    \ 1035, November 1987.\n   [3]  Bradner, S., \"Key words for use in RFCs to Indicate\
    \ Requirement\n        Levels\", BCP 14, RFC 2119, March 1997.\n   [4]  Savola,\
    \ P. and J. Lingard, \"Host Threats to Protocol Independent\n        Multicast\
    \ (PIM)\", RFC 5294, August 2008.\n"
- title: 7.2.  Informative References
  contents:
  - "7.2.  Informative References\n   [5]  Manning, B., \"Topology Based Domain Search\
    \ (TBDS)\", Final\n        Report, June 2002,\n        <http://www.dtic.mil/docs/citations/ADA407598>.\n\
    \   [6]  Meyer, D., \"Administratively Scoped IP Multicast\", BCP 23, RFC\n  \
    \      2365, July 1998.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Bill Manning\n   PO 12317\n   Marina del Rey, CA. 90295\n\
    \   United States\n   EMail: bmanning@sfc.keio.ac.jp\n"
