- title: __initial_text__
  contents:
  - "             DSA and RSA Key and Signature Encoding for the\n               \
    \     KeyNote Trust Management System\n"
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard of any kind.  Distribution of\
    \ this\n   memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2000).  All Rights Reserved.\n"
- title: Abstract
  contents:
  - "Abstract\n   This memo describes RSA and DSA key and signature encoding, and\n\
    \   binary key encoding for version 2 of the KeyNote trust-management\n   system.\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   KeyNote is a simple and flexible trust-management system\
    \ designed to\n   work well for a variety of large- and small-scale Internet-based\n\
    \   applications.  It provides a single, unified language for both local\n   policies\
    \ and credentials.  KeyNote policies and credentials, called\n   `assertions',\
    \ contain predicates that describe the trusted actions\n   permitted by the holders\
    \ of specific public keys.  KeyNote assertions\n   are essentially small, highly-structured\
    \ programs.  A signed\n   assertion, which can be sent over an untrusted network,\
    \ is also\n   called a `credential assertion'.  Credential assertions, which also\n\
    \   serve the role of certificates, have the same syntax as policy\n   assertions\
    \ but are also signed by the principal delegating the trust.\n   For more details\
    \ on KeyNote, see [BFIK99].  This document assumes\n   reader familiarity with\
    \ the KeyNote system.\n   Cryptographic keys may be used in KeyNote to identify\
    \ principals.  To\n   facilitate interoperation between different implementations\
    \ and to\n   allow for maximal flexibility, keys must be converted to a normalized\n\
    \   canonical form (depended on the public key algorithm used) for the\n   purposes\
    \ of any internal comparisons between keys.  For example, an\n   RSA [RSA78] key\
    \ may be encoded in base64 ASCII in one credential, and\n   in hexadecimal ASCII\
    \ in another.  A KeyNote implementation must\n   internally convert the two encodings\
    \ to a normalized form that allows\n   for comparison between them.  Furthermore,\
    \ the internal structure of\n   an encoded key must be known for an implementation\
    \ to correctly\n   decode it.\n   In some applications, other types of values,\
    \ such as a passphrase or\n   a random nonce, may be used as principal identifiers.\
    \  When these\n   identifiers contain characters that may not appear in a string\
    \ (as\n   defined in [BFIK99]), a simple ASCII encoding is necessary to allow\n\
    \   their use inside KeyNote assertions.  Note that if the identifier\n   only\
    \ contains characters that can appear in a string, it may be used\n   as-is. \
    \ Naturally, such identifiers may not be used to sign an\n   assertion, and thus\
    \ no related signature encoding is defined.\n   This document specifies RSA and\
    \ DSA [DSA94] key and signature\n   encodings, and binary key encodings for use\
    \ in KeyNote.\n"
- title: 2.  Key Normalized Forms
  contents:
  - '2.  Key Normalized Forms

    '
- title: 2.1  DSA Key Normalized Form
  contents:
  - "2.1  DSA Key Normalized Form\n   DSA keys in KeyNote are identified by four values:\n\
    \   - the public value, y\n   - the p parameter\n   - the q parameter\n   - the\
    \ g parameter\n   Where the y, p, q, and g are the DSA parameters corresponding\
    \ to the\n   notation of [Sch96]. These four values together make up the DSA key\n\
    \   normalized form used in KeyNote.  All DSA key comparisons in KeyNote\n   occur\
    \ between normalized forms.\n"
- title: 2.2  RSA Key Normalized Form
  contents:
  - "2.2  RSA Key Normalized Form\n   RSA keys in KeyNote are identified by two values:\n\
    \   - the public exponent\n   - the modulus\n   These two values together make\
    \ up the RSA key normalized form used in\n   KeyNote.  All RSA key comparisons\
    \ in KeyNote occur between normalized\n   forms.\n"
- title: 2.3  Binary Identifier Normalized Form
  contents:
  - "2.3  Binary Identifier Normalized Form\n   The normalized form of a Binary Identifier\
    \ is the binary identifier's\n   data.  Thus, Binary Identifier comparisons are\
    \ essentially binary-\n   string comparisons of the Identifier values.\n"
- title: 3.  Key Encoding
  contents:
  - '3.  Key Encoding

    '
- title: 3.1  DSA Key Encoding
  contents:
  - "3.1  DSA Key Encoding\n   DSA keys in KeyNote are encoded as an ASN1 SEQUENCE\
    \ of four ASN1\n   INTEGER objects.  The four INTEGER objects are the public value\
    \ and\n   the p, q, and g parameters of the DSA key, in that order.\n   For use\
    \ in KeyNote credentials, the ASN1 SEQUENCE is then ASCII-\n   encoded (e.g.,\
    \ as a string of hex digits or base64 characters).\n   DSA keys encoded in this\
    \ way in KeyNote must be identified by the\n   \"dsa-XXX:\" algorithm name, where\
    \ XXX is an ASCII encoding (\"hex\" or\n   \"base64\").  Other ASCII encoding\
    \ schemes may be defined in the\n   future.\n"
- title: 3.2  RSA Key Encoding
  contents:
  - "3.2  RSA Key Encoding\n   RSA keys in KeyNote are encoded as an ASN1 SEQUENCE\
    \ of two ASN1\n   INTEGER objects.  The two INTEGER objects are the public exponent\
    \ and\n   the modulus of the DSA key, in that order.\n   For use in KeyNote credentials,\
    \ the ASN1 SEQUENCE is then ASCII-\n   encoded (e.g., as a string of hex digits\
    \ or base64 characters).\n   RSA keys encoded in this way in KeyNote must be identified\
    \ by the\n   \"rsa-XXX:\" algorithm name, where XXX is an ASCII encoding (\"hex\"\
    \ or\n   \"base64\").  Other ASCII encoding schemes may be defined in the\n  \
    \ future.\n"
- title: 3.3  Binary Identifier Encoding
  contents:
  - "3.3  Binary Identifier Encoding\n   Binary Identifiers in KeyNote are assumed\
    \ to have no internal\n   encoding, and are treated as a sequence of binary digits.\
    \  The Binary\n   Identifiers are ASCII-encoded, similarly to RSA or DSA keys.\n\
    \   Binary Identifiers encoded in this way in KeyNote must be identified\n   by\
    \ the \"binary-XXX:\" algorithm name, where XXX is an ASCII encoding\n   (\"hex\"\
    \ or \"base64\").  Other ASCII encoding schemes may be defined in\n   the future.\n"
- title: 4.  Signature Computation and Encoding
  contents:
  - '4.  Signature Computation and Encoding

    '
- title: 4.1  DSA Signature Computation and Encoding
  contents:
  - "4.1  DSA Signature Computation and Encoding\n   DSA signatures in KeyNote are\
    \ computed over the assertion body\n   (starting from the beginning of the first\
    \ keyword, up to and\n   including the newline character immediately before the\
    \ \"Signature:\"\n   keyword) and the signature algorithm name (including the\
    \ trailing\n   colon character, e.g., \"sig-dsa-sha1-base64:\")\n   DSA signatures\
    \ are then encoded as an ASN1 SEQUENCE of two ASN1\n   INTEGER objects.  The two\
    \ INTEGER objects are the r and s values of a\n   DSA signature [Sch96], in that\
    \ order.\n   For use in KeyNote credentials, the ASN1 SEQUENCE is then ASCII-\n\
    \   encoded (as a string of hex digits or base64 characters).\n   DSA signatures\
    \ encoded in this way in KeyNote must be identified by\n   the \"sig-dsa-XXX-YYY:\"\
    \ algorithm name, where XXX is a hash function\n   name (\"sha1\", for the SHA1\
    \ [SHA1-95] hash function is currently the\n   only hash function that may be\
    \ used with DSA) and YYY is an ASCII\n   encoding (\"hex\" or \"base64\").\n"
- title: 4.2  RSA Signature Computation and Encoding
  contents:
  - "4.2  RSA Signature Computation and Encoding\n   RSA signatures in KeyNote are\
    \ computed over the assertion body\n   (starting from the beginning of the first\
    \ keyword, up to and\n   including the newline character immediately before the\
    \ \"Signature:\"\n   keyword) and the signature algorithm name (including the\
    \ trailing\n   colon character, e.g., \"sig-rsa-sha1-base64:\")\n   RSA signatures\
    \ are then encoded as an ASN1 OCTET STRING object,\n   containing the signature\
    \ value.\n   For use in KeyNote credentials, the ASN1 OCTET STRING is then ASCII-\n\
    \   encoded (as a string of hex digits or base64 characters).\n   RSA signatures\
    \ encoded in this way in KeyNote must be identified by\n   the \"sig-rsa-XXX-YYY:\"\
    \ algorithm name, where XXX is a hash function\n   name (\"md5\" or \"sha1\",\
    \ for the MD5 [Riv92] and SHA1 [SHA1-95] hash\n   algorithms respectively, may\
    \ be used with RSA) and YYY is an ASCII\n   encoding (\"hex\" or \"base64\").\n"
- title: 4.3  Binary Signature Computation and Encoding
  contents:
  - "4.3  Binary Signature Computation and Encoding\n   Binary Identifiers are unstructured\
    \ sequences of binary digits, and\n   are not associated with any cryptographic\
    \ algorithm.  Thus, they may\n   not be used to validate an assertion.\n"
- title: 5.  Security Considerations
  contents:
  - "5.  Security Considerations\n   This document discusses the format of RSA and\
    \ DSA keys and signatures\n   and of Binary principal identifiers as used in KeyNote.\
    \  The security\n   of KeyNote credentials utilizing such keys and credentials\
    \ is\n   directly dependent on the strength of the related public key\n   algorithms.\
    \  On the security of KeyNote itself, see [BFIK99].\n"
- title: 6.  IANA Considerations
  contents:
  - "6.  IANA Considerations\n   Per [BFIK99], IANA should provide a registry of reserved\
    \ algorithm\n   identifiers.  The following identifiers are reserved by this document\n\
    \   as public key and binary identifier encodings:\n   - \"rsa-hex\"\n   - \"\
    rsa-base64\"\n   - \"dsa-hex\"\n   - \"dsa-base64\"\n   - \"binary-hex\"\n   -\
    \ \"binary-base64\"\n   The following identifiers are reserved by this document\
    \ as signature\n   encodings:\n   - \"sig-rsa-md5-hex\"\n   - \"sig-rsa-md5-base64\"\
    \n   - \"sig-rsa-sha1-hex\"\n   - \"sig-rsa-sha1-base64\"\n   - \"sig-dsa-sha1-hex\"\
    \n   - \"sig-dsa-sha1-base64\"\n   Note that the double quotes are not part of\
    \ the algorithm\n   identifiers.\n"
- title: 7.  Acknowledgments
  contents:
  - "7.  Acknowledgments\n   This work was sponsored by the DARPA Information Assurance\
    \ and\n   Survivability (IA&S) program, under BAA 98-34.\n"
- title: References
  contents:
  - "References\n   [Sch96]   Bruce Schneier, Applied Cryptography 2nd Edition, John\n\
    \             Wiley & Sons, New York, NY, 1996.\n   [BFIK99]  Blaze, M., Feigenbaum,\
    \ J., Ioannidis, J. and A. Keromytis,\n             \"The KeyNote Trust-Management\
    \ System Version 2\", RFC 2704,\n             September 1999.\n   [DSA94]   NIST,\
    \ FIPS PUB 186, \"Digital Signature Standard\", May 1994.\n   [Riv92]   Rivest,\
    \ R., \"The MD5 Message-Digest Algorithm\", RFC 1321,\n             April 1992.\n\
    \   [RSA78]   R. L. Rivest, A. Shamir, L. M. Adleman, \"A Method for\n       \
    \      Obtaining Digital Signatures and Public-Key Cryptosystems\",\n        \
    \     Communications of the ACM, v21n2. pp 120-126, February\n             1978.\n\
    \   [SHA1-95] NIST, FIPS PUB 180-1, \"Secure Hash Standard\", April 1995.\n  \
    \           http://csrc.nist.gov/fips/fip180-1.txt (ascii)\n             http://csrc.nist.gov/fips/fip180-1.ps\
    \  (postscript)\n"
- title: Contacts
  contents:
  - "Contacts\n   Comments about this document should be discussed on the\n   keynote-users@nsa.research.att.com\
    \ mailing list.\n   Questions about this document can also be directed to the\
    \ authors as\n   a group at the keynote@research.att.com alias, or to the individual\n\
    \   authors at:\n   Matt Blaze\n   AT&T Labs - Research\n   180 Park Avenue\n\
    \   Florham Park, New Jersey 07932-0000\n   EMail: mab@research.att.com\n   John\
    \ Ioannidis\n   AT&T Labs - Research\n   180 Park Avenue\n   Florham Park, New\
    \ Jersey 07932-0000\n   EMail: ji@research.att.com\n   Angelos D. Keromytis\n\
    \   Distributed Systems Lab\n   CIS Department, University of Pennsylvania\n \
    \  200 S. 33rd Street\n   Philadelphia, Pennsylvania  19104-6389\n   EMail: angelos@cis.upenn.edu\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2000).  All\
    \ Rights Reserved.\n   This document and translations of it may be copied and\
    \ furnished to\n   others, and derivative works that comment on or otherwise explain\
    \ it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
