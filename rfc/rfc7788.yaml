- title: __initial_text__
  contents:
  - '                    Home Networking Control Protocol

    '
- title: Abstract
  contents:
  - "Abstract\n   This document describes the Home Networking Control Protocol (HNCP),\n\
    \   an extensible configuration protocol, and a set of requirements for\n   home\
    \ network devices.  HNCP is described as a profile of and\n   extension to the\
    \ Distributed Node Consensus Protocol (DNCP).  HNCP\n   enables discovery of network\
    \ borders, automated configuration of\n   addresses, name resolution, service\
    \ discovery, and the use of any\n   routing protocol that supports routing based\
    \ on both the source and\n   destination address.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This\
    \ document is a product of the Internet Engineering Task Force\n   (IETF).  It\
    \ represents the consensus of the IETF community.  It has\n   received public\
    \ review and has been approved for publication by the\n   Internet Engineering\
    \ Steering Group (IESG).  Further information on\n   Internet Standards is available\
    \ in Section 2 of RFC 5741.\n   Information about the current status of this document,\
    \ any errata,\n   and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc7788.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2016 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction  . . . . . . . . . . . . . . . . . . .\
    \ . . . . .   3\n     1.1.  Applicability . . . . . . . . . . . . . . . . . .\
    \ . . . .   4\n   2.  Terminology . . . . . . . . . . . . . . . . . . . . . .\
    \ . . .   5\n     2.1.  Requirements Language . . . . . . . . . . . . . . . .\
    \ . .   7\n   3.  DNCP Profile  . . . . . . . . . . . . . . . . . . . . . . .\
    \ .   7\n   4.  HNCP Versioning and Router Capabilities . . . . . . . . . . .\
    \   9\n   5.  Interface Classification  . . . . . . . . . . . . . . . . . .  \
    \ 9\n     5.1.  Interface Categories  . . . . . . . . . . . . . . . . . .   9\n\
    \     5.2.  DHCP-Aided Auto-Detection . . . . . . . . . . . . . . . .  10\n  \
    \   5.3.  Algorithm for Border Discovery  . . . . . . . . . . . . .  11\n   6.\
    \  Autonomous Address Configuration  . . . . . . . . . . . . . .  12\n     6.1.\
    \  Common Link . . . . . . . . . . . . . . . . . . . . . . .  12\n     6.2.  External\
    \ Connections  . . . . . . . . . . . . . . . . . .  13\n     6.3.  Prefix Assignment\
    \ . . . . . . . . . . . . . . . . . . . .  14\n       6.3.1.  Prefix Assignment\
    \ Algorithm Parameters  . . . . . . .  14\n       6.3.2.  Making New Assignments\
    \  . . . . . . . . . . . . . . .  16\n       6.3.3.  Applying Assignments  . .\
    \ . . . . . . . . . . . . . .  17\n       6.3.4.  DHCPv6 Prefix Delegation  .\
    \ . . . . . . . . . . . . .  17\n     6.4.  Node Address Assignment . . . . .\
    \ . . . . . . . . . . . .  17\n     6.5.  Local IPv4 and ULA Prefixes . . . .\
    \ . . . . . . . . . . .  18\n   7.  Configuration of Hosts and Non-HNCP Routers\
    \ . . . . . . . . .  19\n     7.1.  IPv6 Addressing and Configuration . . . .\
    \ . . . . . . . .  19\n     7.2.  DHCPv6 for Prefix Delegation  . . . . . . .\
    \ . . . . . . .  20\n     7.3.  DHCPv4 for Addressing and Configuration . . .\
    \ . . . . . .  20\n     7.4.  Multicast DNS Proxy . . . . . . . . . . . . . .\
    \ . . . . .  21\n   8.  Naming and Service Discovery  . . . . . . . . . . . .\
    \ . . . .  21\n   9.  Securing Third-Party Protocols  . . . . . . . . . . . .\
    \ . . .  22\n   10. Type-Length-Value Objects . . . . . . . . . . . . . . . .\
    \ . .  23\n     10.1.  HNCP-Version TLV . . . . . . . . . . . . . . . . . . .\
    \ .  23\n     10.2.  External-Connection TLV  . . . . . . . . . . . . . . . .\
    \  24\n       10.2.1.  Delegated-Prefix TLV . . . . . . . . . . . . . . . .  25\n\
    \       10.2.2.  DHCPv6-Data TLV  . . . . . . . . . . . . . . . . . .  27\n  \
    \     10.2.3.  DHCPv4-Data TLV  . . . . . . . . . . . . . . . . . .  27\n    \
    \ 10.3.  Assigned-Prefix TLV  . . . . . . . . . . . . . . . . . .  28\n     10.4.\
    \  Node-Address TLV . . . . . . . . . . . . . . . . . . . .  29\n     10.5.  DNS-Delegated-Zone\
    \ TLV . . . . . . . . . . . . . . . . .  30\n     10.6.  Domain-Name TLV  . .\
    \ . . . . . . . . . . . . . . . . . .  31\n     10.7.  Node-Name TLV  . . . .\
    \ . . . . . . . . . . . . . . . . .  31\n     10.8.  Managed-PSK TLV  . . . .\
    \ . . . . . . . . . . . . . . . .  32\n   11. General Requirements for HNCP Nodes\
    \ . . . . . . . . . . . . .  32\n   12. Security Considerations . . . . . . .\
    \ . . . . . . . . . . . .  34\n     12.1.  Interface Classification . . . . .\
    \ . . . . . . . . . . .  34\n     12.2.  Security of Unicast Traffic  . . . .\
    \ . . . . . . . . . .  35\n     12.3.  Other Protocols in the Home  . . . . .\
    \ . . . . . . . . .  35\n   13. IANA Considerations . . . . . . . . . . . . .\
    \ . . . . . . . .  36\n   14. References  . . . . . . . . . . . . . . . . . .\
    \ . . . . . . .  37\n     14.1.  Normative References . . . . . . . . . . . .\
    \ . . . . . .  37\n     14.2.  Informative References . . . . . . . . . . . .\
    \ . . . . .  39\n   Acknowledgments . . . . . . . . . . . . . . . . . . . . .\
    \ . . . .  40\n   Authors' Addresses  . . . . . . . . . . . . . . . . . . . .\
    \ . . .  40\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   The Home Networking Control Protocol (HNCP) is designed\
    \ to facilitate\n   the sharing of state among home routers to fulfill the needs\
    \ of the\n   IPv6 homenet architecture [RFC7368], which assumes zero-configuration\n\
    \   operation, multiple subnets, multiple home routers, and (potentially)\n  \
    \ multiple upstream service providers providing (potentially) multiple\n   prefixes\
    \ to the home network.  While RFC 7368 sets no requirements\n   for IPv4 support,\
    \ HNCP aims to support the dual-stack mode of\n   operation, and therefore the\
    \ functionality is designed with that in\n   mind.  The state is shared as TLVs\
    \ transported in the DNCP node state\n   among the routers (and potentially advanced\
    \ hosts) to enable:\n   o  Autonomic discovery of network borders (Section 5.3)\
    \ based on\n      Distributed Node Consensus Protocol (DNCP) topology.\n   o \
    \ Automated portioning of prefixes delegated by the service\n      providers as\
    \ well as assigned prefixes to both HNCP and non-HNCP\n      routers (Section\
    \ 6.3) using [RFC7695].  Prefixes assigned to HNCP\n      routers are used to:\n\
    \      *  Provide addresses to non-HNCP aware nodes (using Stateless\n       \
    \  Address Autoconfiguration (SLAAC) and DHCP).\n      *  Provide space in which\
    \ HNCP nodes assign their own addresses\n         (Section 6.4).\n   o  Internal\
    \ and external name resolution, as well as multi-link\n      service discovery\
    \ (Section 8).\n   o  Other services not defined in this document that do need\
    \ to share\n      state among homenet nodes and do not cause rapid and constant\
    \ TLV\n      changes (see the following applicability section).\n   HNCP is a\
    \ protocol based on DNCP [RFC7787] and includes a DNCP\n   profile that defines\
    \ transport and synchronization details for\n   sharing state across nodes defined\
    \ in Section 3.  The rest of the\n   document defines behavior of the services\
    \ noted above, how the\n   required TLVs are encoded (Section 10), as well as\
    \ additional\n   requirements on how HNCP nodes should behave (Section 11).\n"
- title: 1.1.  Applicability
  contents:
  - "1.1.  Applicability\n   While HNCP does not deal with routing protocols directly\
    \ (except\n   potentially informing them about internal and external interfaces\
    \ if\n   classification specified in Section 5.3 is used), in homenet\n   environments\
    \ where multiple IPv6 source prefixes can be present,\n   routing based on the\
    \ source and destination address is necessary\n   [RFC7368].  Ideally, the routing\
    \ protocol is also zero configuration\n   (e.g., no need to configure identifiers\
    \ or metrics), although HNCP\n   can also be used with a manually configured routing\
    \ protocol.\n   As HNCP uses DNCP as the actual state synchronization protocol,\
    \ the\n   applicability statement of DNCP applies here as well; HNCP should not\n\
    \   be used for any data that changes rapidly and constantly.  If such\n   data\
    \ needs to be published in an HNCP network, 1) a more applicable\n   protocol\
    \ should be used for those portions, and 2) locators to a\n   server of said protocol\
    \ should be announced using HNCP instead.  An\n   example for this is naming and\
    \ service discovery (Section 8) for\n   which HNCP only transports DNS server\
    \ addresses and no actual per-\n   name or per-service data of hosts.\n   HNCP\
    \ TLVs specified within this document, in steady state, stay\n   constant, with\
    \ one exception: as Delegated-Prefix TLVs\n   (Section 10.2.1) do contain lifetimes,\
    \ they force republishing of\n   that data every time the valid or preferred lifetimes\
    \ of prefixes are\n   updated (significantly).  Therefore, it is desirable for\
    \ ISPs to\n   provide large enough valid and preferred lifetimes to avoid\n  \
    \ unnecessary HNCP state churn in homes, but even given non-cooperating\n   ISPs,\
    \ the state churn is proportional only to the number of\n   externally received\
    \ delegated prefixes and not to the home network\n   size, and it should therefore\
    \ be relatively low.\n   HNCP assumes a certain level of control over host configuration\n\
    \   servers (e.g., DHCP [RFC2131]) on links that are managed by its\n   routers.\
    \  Some HNCP functionality (such as border discovery or some\n   aspects of naming)\
    \ might be affected by existing DHCP servers that\n   are not aware of the HNCP-managed\
    \ network and thus might need to be\n   reconfigured to not result in unexpected\
    \ behavior.\n   While HNCP routers can provide configuration to and receive\n\
    \   configuration from non-HNCP routers, they are not able to traverse\n   such\
    \ devices based solely on the protocol as defined in this\n   document, i.e.,\
    \ HNCP routers that are connected only by different\n   interfaces of a non-HNCP\
    \ router will not be part of the same HNCP\n   network.\n   While HNCP is designed\
    \ to be used by (home) routers, it can also be\n   used by advanced hosts that\
    \ want to do, e.g., their own address\n   assignment and routing.\n   HNCP is\
    \ link-layer agnostic; if a link supports IPv6 (link-local)\n   multicast and\
    \ unicast, HNCP will work on it.  Trickle retransmissions\n   and keep-alives\
    \ will handle both packet loss and non-transitive\n   connectivity, ensuring eventual\
    \ convergence.\n"
- title: 2.  Terminology
  contents:
  - "2.  Terminology\n   The following terms are used as they are defined in [RFC7695]:\n\
    \   o  Advertised Prefix Priority\n   o  Advertised Prefix\n   o  Assigned Prefix\n\
    \   o  Delegated Prefix\n   o  Prefix Adoption\n   o  Private Link\n   o  Published\
    \ Assigned Prefix\n   o  Applied Assigned Prefix\n   o  Shared Link\n   The following\
    \ terms are used as they are defined in [RFC7787]:\n   o  DNCP profile\n   o \
    \ Node identifier\n   o  Link\n   o  Interface\n   (HNCP) node       a device\
    \ implementing this specification.\n   (HNCP) router     a device implementing\
    \ this specification, which\n                     forwards traffic on behalf of\
    \ other devices.\n   Greatest node     when comparing the DNCP node identifiers\
    \ of\n   identifier        multiple nodes, the one that has the greatest value\n\
    \                     in a bitwise comparison.\n   Border            separation\
    \ point between administrative domains; in\n                     this case, between\
    \ the home network and any other\n                     network, i.e., usually\
    \ an ISP network.\n   Internal link     a link that does not cross borders.\n\
    \   Internal          an interface that is connected to an internal link.\n  \
    \ interface\n   External          an interface that is connected to a link that\
    \ is\n   interface         not an internal link.\n   Interface         a local\
    \ configuration denoting the use of a\n   category          particular interface.\
    \  The Interface category\n                     determines how an HNCP node should\
    \ treat the\n                     particular interface.  The External and Internal\n\
    \                     categories mark the interface as out of or within\n    \
    \                 the network border; there are also a number of\n           \
    \          subcategories of Internal that further affect local\n             \
    \        node behavior.  See Section 5.1 for a list of\n                     interface\
    \ categories and how they behave.  The\n                     Internal or External\
    \ category may also be auto-\n                     detected (Section 5.3).\n \
    \  Border router     a router announcing external connectivity and\n         \
    \            forwarding traffic across the network border.\n   Common Link   \
    \    a set of nodes on a link that share a common view\n                     of\
    \ it, i.e., they see each other's traffic and the\n                     same set\
    \ of hosts.  Unless configured otherwise,\n                     transitive connectivity\
    \ is assumed.\n   DHCPv4            refers to the Dynamic Host Configuration Protocol\n\
    \                     [RFC2131] in this document.\n   DHCPv6            refers\
    \ to the Dynamic Host Configuration Protocol\n                     for IPv6 (DHCPv6)\
    \ [RFC3315] in this document.\n   DHCP              refers to cases that apply\
    \ to both DHCPv4 and\n                     DHCPv6 in this document.\n"
- title: 2.1.  Requirements Language
  contents:
  - "2.1.  Requirements Language\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\"\
    , \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"\
    NOT RECOMMENDED\", \"MAY\", and\n   \"OPTIONAL\" in this document are to be interpreted\
    \ as described in RFC\n   2119 [RFC2119].\n"
- title: 3.  DNCP Profile
  contents:
  - "3.  DNCP Profile\n   The DNCP profile for HNCP is defined as follows:\n   o \
    \ HNCP uses UDP datagrams on port 8231 as a transport over link-\n      local\
    \ scoped IPv6, using unicast and multicast\n      (FF02:0:0:0:0:0:0:11 is the\
    \ HNCP group address).  Received\n      datagrams where either or both of the\
    \ IPv6 source or destination\n      addresses are not link-local scoped MUST be\
    \ ignored.  Replies to\n      multicast and unicast messages MUST be sent to the\
    \ IPv6 source\n      address and port of the original message.  Each node MUST\
    \ be able\n      to receive (and potentially reassemble) UDP datagrams with a\n\
    \      payload of at least 4000 bytes.\n   o  HNCP operates on multicast-capable\
    \ interfaces only.  HNCP nodes\n      MUST assign a non-zero 32-bit endpoint identifier\
    \ to each\n      interface for which HNCP is enabled.  The value 0 is not used\
    \ in\n      DNCP TLVs but has a special meaning in HNCP TLVs (see Sections 6.4\n\
    \      and 10.3).  These identifiers MUST be locally unique within the\n     \
    \ scope of the node, and using values equivalent to the IPv6 link-\n      local\
    \ scope identifiers for the given interfaces are RECOMMENDED.\n   o  HNCP uses\
    \ opaque 32-bit node identifiers\n      (DNCP_NODE_IDENTIFIER_LENGTH = 32).  A\
    \ node implementing HNCP\n      SHOULD use a random node identifier.  If there\
    \ is a node\n      identifier collision (as specified in the Node-State TLV handling\n\
    \      of Section 4.4 of [RFC7787]), the node MUST immediately generate\n    \
    \  and use a new random node identifier that is not used by any other\n      node\
    \ at the time, based on the current DNCP network state.\n   o  HNCP nodes MUST\
    \ use the leading 64 bits of the MD5 message digest\n      [RFC1321] as the DNCP\
    \ hash function H(x) used in building the DNCP\n      hash tree.\n   o  HNCP nodes\
    \ MUST use DNCP's per-endpoint keep-alive extension on\n      all endpoints. \
    \ The following parameters are suggested:\n      *  Default keep-alive interval\
    \ (DNCP_KEEPALIVE_INTERVAL): 20\n         seconds.\n      *  Multiplier (DNCP_KEEPALIVE_MULTIPLIER):\
    \ 2.1 on virtually\n         lossless links works fine, as it allows for one lost\
    \ keep-\n         alive.  If used on a lossy link, a considerably higher\n   \
    \      multiplier, such as 15, should be used instead.  In that case,\n      \
    \   an implementation might prefer shorter keep-alive intervals on\n         that\
    \ link as well to ensure that the timeout (equal to\n         DNCP_KEEPALIVE_INTERVAL\
    \ * DNCP_KEEPALIVE_MULTIPLIER) after\n         which entirely lost nodes time\
    \ out is low enough.\n   o  HNCP nodes use the following Trickle parameters for\
    \ the per-\n      interface Trickle instances:\n      *  k SHOULD be 1, as the\
    \ timer reset when data is updated, and\n         further retransmissions should\
    \ handle packet loss.  Even on a\n         non-transitive lossy link, the eventual\
    \ per-endpoint keep-\n         alives should ensure status synchronization occurs.\n\
    \      *  Imin SHOULD be 200 milliseconds but MUST NOT be lower.  Note:\n    \
    \     earliest transmissions may occur at Imin / 2.\n      *  Imax SHOULD be 7\
    \ doublings of Imin [RFC6206] but MUST NOT be\n         lower.\n   o  HNCP unicast\
    \ traffic SHOULD be secured using Datagram Transport\n      Layer Security (DTLS)\
    \ [RFC6347] as described in DNCP if exchanged\n      over unsecured links.  UDP\
    \ on port 8232 is used for this purpose.\n      A node implementing HNCP security\
    \ MUST support the DNCP Pre-Shared\n      Key (PSK) method, SHOULD support the\
    \ PKI-based trust method, and\n      MAY support the DNCP certificate-based trust\
    \ consensus method.\n      [RFC7525] provides guidance on how to securely utilize\
    \ DTLS.\n   o  HNCP nodes MUST ignore all Node-State TLVs received via multicast\n\
    \      on a link that has DNCP security enabled in order to prevent\n      spoofing\
    \ of node state changes.\n"
- title: 4.  HNCP Versioning and Router Capabilities
  contents:
  - "4.  HNCP Versioning and Router Capabilities\n   Multiple versions of HNCP based\
    \ on compatible DNCP profiles may be\n   present in the same network when transitioning\
    \ between HNCP versions,\n   and for troubleshooting purposes, it might be beneficial\
    \ to identify\n   the HNCP agent version running.  Therefore, each node MUST include\
    \ an\n   HNCP-Version TLV (Section 10.1) indicating the currently supported\n\
    \   version in its node data and MUST ignore (except for DNCP\n   synchronization\
    \ purposes) any TLVs that have a type greater than 32\n   and that are published\
    \ by nodes that didn't also publish an HNCP-\n   Version TLV.\n   HNCP routers\
    \ may also have different capabilities regarding\n   interactions with hosts,\
    \ e.g., for configuration or service\n   discovery.  These are indicated by M,\
    \ P, H, and L values.  The\n   combined \"capability value\" is a metric indicated\
    \ by interpreting the\n   bits as an integer, i.e., (M << 12 | P << 8 | H << 4\
    \ | L).  These\n   values are used to elect certain servers on a Common Link,\
    \ as\n   described in Section 7.  Nodes that are not routers MUST announce the\n\
    \   value 0 for all capabilities.  Any node announcing the value 0 for a\n   capability\
    \ is considered to not advertise said capability and thus\n   does not take part\
    \ in the respective election.\n"
- title: 5.  Interface Classification
  contents:
  - '5.  Interface Classification

    '
- title: 5.1.  Interface Categories
  contents:
  - "5.1.  Interface Categories\n   HNCP specifies the following categories that interfaces\
    \ can be\n   configured to be in:\n   Internal category:  This declares an interface\
    \ to be internal, i.e.,\n      within the borders of the HNCP network.  The interface\
    \ MUST\n      operate as a DNCP endpoint.  Routers MUST forward traffic with\n\
    \      appropriate source addresses between their internal interfaces and\n  \
    \    allow internal traffic to reach external networks.  All nodes MUST\n    \
    \  implement this category, and nodes not implementing any other\n      category\
    \ implicitly use it as a fixed default.\n   External category:  This declares\
    \ an interface to be external, i.e.,\n      not within the borders of the HNCP\
    \ network.  The interface MUST\n      NOT operate as a DNCP endpoint.  Accessing\
    \ internal resources from\n      external interfaces is restricted, i.e., the\
    \ use of Recommended\n      Simple Security Capabilities in Customer Premises\
    \ Equipments\n      (CPEs) [RFC6092] is RECOMMENDED.  HNCP routers SHOULD announce\n\
    \      acquired configuration information for use in the network as\n      described\
    \ in Section 6.2, if the interface appears to be connected\n      to an external\
    \ network.  HNCP routers MUST implement this\n      category.\n   Leaf category:\
    \  This declares an interface used by client devices\n      only.  Such an interface\
    \ uses the Internal category with the\n      exception that it MUST NOT operate\
    \ as a DNCP endpoint.  This\n      category SHOULD be supported by HNCP routers.\n\
    \   Guest category:  This declares an interface used by untrusted client\n   \
    \   devices only.  In addition to the restrictions of the Leaf\n      category,\
    \ HNCP routers MUST filter traffic from and to the\n      interface such that\
    \ connected devices are unable to reach other\n      devices inside the HNCP network\
    \ or query services advertised by\n      them unless explicitly allowed.  This\
    \ category SHOULD be supported\n      by HNCP routers.\n   Ad Hoc category:  This\
    \ configures an interface to use the Internal\n      category, but no assumption\
    \ is made about the link's transitivity.\n      All other interface categories\
    \ assume transitive connectivity.\n      This affects the Common Link (Section\
    \ 6.1) definition.  Support\n      for this category is OPTIONAL.\n   Hybrid category:\
    \  This declares an interface to use the Internal\n      category while still\
    \ trying to acquire (external) configuration\n      information on it, e.g., by\
    \ running DHCP clients.  This is useful,\n      e.g., if the link is shared with\
    \ a non-HNCP router under control\n      and still within the borders of the same\
    \ network.  Detection of\n      this category automatically in addition to manual\
    \ configuration is\n      out of scope of this document.  Support for this category\
    \ is\n      OPTIONAL.\n"
- title: 5.2.  DHCP-Aided Auto-Detection
  contents:
  - "5.2.  DHCP-Aided Auto-Detection\n   Auto-detection of interface categories is\
    \ possible based on\n   interaction with DHCPv4 [RFC2131] and DHCPv6 Prefix Delegation\n\
    \   (DHCPv6-PD) [RFC3633] servers on connected links.  HNCP defines\n   special\
    \ DHCP behavior to differentiate its internal servers from\n   external ones in\
    \ order to achieve this.  Therefore, all internal\n   devices (including HNCP\
    \ nodes) running DHCP servers on links where\n   auto-detection is used by any\
    \ HNCP node MUST use the following\n   mechanism based on \"The User Class Option\
    \ for DHCP\" [RFC3004] and its\n   DHCPv6 counterpart [RFC3315]:\n   o  The device\
    \ MUST ignore or reject DHCP-Requests containing a DHCP\n      user class consisting\
    \ of the ASCII string \"HOMENET\".\n   Not following this rule (e.g., running\
    \ unmodified DHCP servers) might\n   lead to false positives when auto-detection\
    \ is used, i.e., HNCP nodes\n   assume an interface to not be internal, even though\
    \ it was intended\n   to be.\n"
- title: 5.3.  Algorithm for Border Discovery
  contents:
  - "5.3.  Algorithm for Border Discovery\n   This section defines the interface classification\
    \ algorithm.  It is\n   suitable for both IPv4 and IPv6 (single or dual stack)\
    \ and detects\n   the category of an interface either automatically or based on\
    \ a fixed\n   configuration.  By determining the category for all interfaces,\
    \ the\n   network borders are implicitly defined, i.e., all interfaces not\n \
    \  belonging to the External category are considered to be within the\n   borders\
    \ of the network; all others are not.\n   The following algorithm MUST be implemented\
    \ by any node implementing\n   HNCP.  However, if the node does not implement\
    \ auto-detection, only\n   the first and last step are required.  The algorithm\
    \ works as\n   follows, with evaluation stopping at first match:\n   1.  If a\
    \ fixed category is configured for an interface, it is used.\n   2.  If a delegated\
    \ prefix could be acquired by running a DHCPv6\n       client, it is considered\
    \ external.  The DHCPv6 client MUST have\n       included a DHCPv6 user class\
    \ consisting of the ASCII string\n       \"HOMENET\" in all of its requests.\n\
    \   3.  If an IPv4 address could be acquired by running a DHCPv4 client\n    \
    \   on the interface, it is considered external.  The DHCPv4 client\n       MUST\
    \ have included a DHCP user class consisting of the ASCII\n       string \"HOMENET\"\
    \ in all of its requests.\n   4.  The interface is considered internal.\n   Note\
    \ that as other HNCP nodes will ignore the client due to the User\n   Class option,\
    \ any server that replies is clearly external (or a\n   malicious internal node).\n\
    \   An HNCP router SHOULD allow setting the fixed category for each\n   interface\
    \ that may be connected to either an internal or external\n   device (e.g., an\
    \ Ethernet port that can be connected to a modem,\n   another HNCP router, or\
    \ a client).  Note that all fixed categories\n   except internal and external\
    \ cannot be auto-detected and can only be\n   selected using manual configuration.\n\
    \   An HNCP router using auto-detection on an interface MUST run the\n   appropriately\
    \ configured DHCP clients as long as the interface\n   without a fixed category\
    \ is active (including states where auto-\n   detection considers it to be internal)\
    \ and rerun the algorithm above\n   to react to conditions resulting in a different\
    \ interface category.\n   The router SHOULD wait for a reasonable time period\
    \ (5 seconds as a\n   default), during which the DHCP clients can acquire a lease,\
    \ before\n   treating a newly activated or previously external interface as\n\
    \   internal.\n"
- title: 6.  Autonomous Address Configuration
  contents:
  - "6.  Autonomous Address Configuration\n   This section specifies how HNCP nodes\
    \ configure host and node\n   addresses.  At first, border routers share information\
    \ obtained from\n   service providers or local configuration by publishing one\
    \ or more\n   External-Connection TLVs (Section 10.2).  These contain other TLVs\n\
    \   such as Delegated-Prefix TLVs (Section 10.2.1) that are then used for\n  \
    \ prefix assignment.  Finally, HNCP nodes obtain addresses either\n   statelessly\
    \ or using a specific stateful mechanism (Section 6.4).\n   Hosts and non-HNCP\
    \ routers are configured using SLAAC, DHCP, or\n   DHCPv6-PD.\n"
- title: 6.1.  Common Link
  contents:
  - "6.1.  Common Link\n   HNCP uses the concept of Common Link both in autonomic\
    \ address\n   configuration and naming and service discovery (Section 8).  A Common\n\
    \   Link refers to the set of interfaces of nodes that see each other's\n   traffic\
    \ and presumably also the traffic of all hosts that may use the\n   nodes to,\
    \ e.g., forward traffic.  Common Links are used, e.g., to\n   determine where\
    \ prefixes should be assigned or which peers\n   participate in the election of\
    \ a DHCP server.  The Common Link is\n   computed separately for each local internal\
    \ interface, and it always\n   contains the local interface.  Additionally, if\
    \ the local interface\n   is not set to the Ad Hoc category (see Section 5.1),\
    \ it also contains\n   the set of interfaces that are bidirectionally reachable\
    \ from the\n   given local interface; that is, every remote interface of a remote\n\
    \   node meeting all of the following requirements:\n   o  The local node publishes\
    \ a Peer TLV with:\n      *  Peer Node Identifier = remote node's node identifier\n\
    \      *  Peer Endpoint Identifier = remote interface's endpoint\n         identifier\n\
    \      *  Endpoint Identifier = local interface's endpoint identifier\n   o  The\
    \ remote node publishes a Peer TLV with:\n      *  Peer Node Identifier = local\
    \ node's node identifier\n      *  Peer Endpoint Identifier = local interface's\
    \ endpoint\n         identifier\n      *  Endpoint Identifier = remote interface's\
    \ endpoint identifier\n   A node MUST be able to detect whether two of its local\
    \ internal\n   interfaces are connected, e.g., by detecting an identical remote\n\
    \   interface being part of the Common Links of both local interfaces.\n"
- title: 6.2.  External Connections
  contents:
  - "6.2.  External Connections\n   Each HNCP router MAY obtain external connection\
    \ information such as\n   address prefixes, DNS server addresses, and DNS search\
    \ paths from one\n   or more sources, e.g., DHCPv6-PD [RFC3633], NETCONF [RFC6241],\
    \ or\n   static configuration.  Each individual external connection to be\n  \
    \ shared in the network is represented by one External-Connection TLV\n   (Section\
    \ 10.2).\n   Announcements of individual external connections can consist of the\n\
    \   following components:\n   Delegated Prefixes:   Address space available for\
    \ assignment to\n      internal links announced using Delegated-Prefix TLVs\n\
    \      (Section 10.2.1).  Some address spaces might have special\n      properties\
    \ that are necessary to understand in order to handle\n      them (e.g., information\
    \ similar to [RFC6603]).  This information\n      is encoded using DHCPv6-Data\
    \ TLVs (Section 10.2.2) inside the\n      respective Delegated-Prefix TLVs.\n\
    \   Auxiliary Information:   Information about services such as DNS or\n     \
    \ time synchronization regularly used by hosts in addition to\n      addressing\
    \ and routing information.  This information is encoded\n      using DHCPv6-Data\
    \ TLVs (Section 10.2.2) and DHCPv4-Data TLVs\n      (Section 10.2.3).\n   Whenever\
    \ information about reserved parts (e.g., as specified in\n   [RFC6603]) is received\
    \ for a delegated prefix, the reserved parts\n   MUST be advertised using Assigned-Prefix\
    \ TLVs (Section 10.3) with the\n   greatest priority (i.e., 15), as if they were\
    \ assigned to a Private\n   Link.\n   Some connections or delegated prefixes may\
    \ have a special meaning and\n   are not regularly used for internal or Internet\
    \ connectivity;\n   instead, they may provide access to special services like\
    \ VPNs,\n   sensor networks, Voice over IP (VoIP), IPTV, etc.  Care must be taken\n\
    \   that these prefixes are properly integrated and dealt with in the\n   network,\
    \ in order to avoid breaking connectivity for devices who are\n   not aware of\
    \ their special characteristics or to only selectively\n   allow certain devices\
    \ to use them.  Such prefixes are distinguished\n   using Prefix-Policy TLVs (Section\
    \ 10.2.1.1).  Their contents MAY be\n   partly opaque to HNCP nodes, and their\
    \ identification and usage\n   depends on local policy.  However, the following\
    \ general rules MUST\n   be adhered to:\n      Special rules apply when making\
    \ address assignments for prefixes\n      with Prefix-Policy TLVs with type 131,\
    \ as described in\n      Section 6.3.2.\n      In the presence of any type 1 to\
    \ 128 Prefix-Policy TLV, the prefix\n      is specialized to reach destinations\
    \ denoted by any such Prefix-\n      Policy TLV, i.e., in absence of a type 0\
    \ Prefix-Policy TLV, it is\n      not usable for general Internet connectivity.\
    \  An HNCP router MAY\n      enforce this restriction with appropriate packet\
    \ filter rules.\n"
- title: 6.3.  Prefix Assignment
  contents:
  - "6.3.  Prefix Assignment\n   HNCP uses the prefix assignment algorithm [RFC7695]\
    \ in order to\n   assign prefixes to HNCP internal links and uses some of the\n\
    \   terminology (Section 2) defined there.  HNCP furthermore defines the\n   Assigned-Prefix\
    \ TLV (Section 10.3), which MUST be used to announce\n   Published Assigned Prefixes.\n"
- title: 6.3.1.  Prefix Assignment Algorithm Parameters
  contents:
  - "6.3.1.  Prefix Assignment Algorithm Parameters\n   All HNCP nodes running the\
    \ prefix assignment algorithm use the\n   following values for its parameters:\n\
    \   Node IDs:   HNCP node identifiers are used.  The comparison operation\n  \
    \    is defined as bitwise comparison.\n   Set of Delegated Prefixes:   The set\
    \ of prefixes encoded in\n      Delegated-Prefix TLVs that are not strictly included\
    \ in prefixes\n      encoded in other Delegated-Prefix TLVs.  Note that Delegated-\n\
    \      Prefix TLVs included in ignored External-Connection TLVs are not\n    \
    \  considered.  It is dynamically updated as Delegated-Prefix TLVs\n      are\
    \ added or removed.\n   Set of Shared Links:   The set of Common Links associated\
    \ with\n      interfaces with the Internal, Leaf, Guest, or Ad Hoc category. \
    \ It\n      is dynamically updated as interfaces are added, removed, or\n    \
    \  switched from one category to another.  When multiple interfaces\n      are\
    \ detected as belonging to the same Common Link, prefix\n      assignment is disabled\
    \ on all of these interfaces except one.\n   Set of Private Links:   This document\
    \ defines Private Links as\n      representing DHCPv6-PD clients or as a mean\
    \ to advertise prefixes\n      included in the DHCPv6 Exclude Prefix option. \
    \ Other\n      implementation-specific Private Links may be defined whenever a\n\
    \      prefix needs to be assigned for a purpose that does not require a\n   \
    \   consensus with other HNCP nodes.\n   Set of Advertised Prefixes:   The set\
    \ of prefixes included in\n      Assigned-Prefix TLVs advertised by other HNCP\
    \ nodes (prefixes\n      advertised by the local node are not in this set).  The\
    \ associated\n      Advertised Prefix Priority is the priority specified in the\
    \ TLV.\n      The associated Shared Link is determined as follows:\n      *  If\
    \ the Link Identifier is 0, the Advertised Prefix is not\n         assigned on\
    \ a Shared Link.\n      *  If the other node's interface identified by the Link\
    \ Identifier\n         is included in one of the Common Links used for prefix\n\
    \         assignment, it is considered as assigned on the given Common\n     \
    \    Link.\n      *  Otherwise, the Advertised Prefix is not assigned on a Shared\n\
    \         Link.\n      Advertised Prefixes as well as their associated priorities\
    \ and\n      associated Shared Links MUST be updated as Assigned-Prefix TLVs\n\
    \      are added, updated, or removed, and as Common Links are modified.\n   ADOPT_MAX_DELAY:\
    \   The default value is 0 seconds (i.e., prefix\n      adoption is done instantly).\n\
    \   BACKOFF_MAX_DELAY:   The default value is 4 seconds.\n   RANDOM_SET_SIZE:\
    \   The default value is 64.\n   Flooding Delay:   The default value is 5 seconds.\n\
    \   Default Advertised Prefix Priority:   When a new assignment is\n      created\
    \ or an assignment is adopted -- as specified in the prefix\n      assignment\
    \ algorithm routine -- the default Advertised Prefix\n      Priority to be used\
    \ is 2.\n"
- title: 6.3.2.  Making New Assignments
  contents:
  - "6.3.2.  Making New Assignments\n   Whenever the prefix assignment algorithm subroutine\
    \ (Section 4.1 of\n   [RFC7695]) is run on a Common Link, and whenever a new prefix\
    \ may be\n   assigned (case 1 of the subroutine: no Best Assignment and no Current\n\
    \   Assignment), the decision of whether the assignment of a new prefix\n   is\
    \ desired MUST follow these rules in order:\n      If the Delegated-Prefix TLV\
    \ contains a DHCPv6-Data TLV, and the\n      meaning of one of the DHCP options\
    \ is not understood by the HNCP\n      node, the creation of a new prefix is not\
    \ desired.  This rule\n      applies to TLVs inside Delegated-Prefix TLVs but\
    \ not to those\n      inside External-Connection TLVs.\n      If the remaining\
    \ preferred lifetime of the prefix is 0 and there\n      is another delegated\
    \ prefix of the same IP version used for prefix\n      assignment with a non-zero\
    \ preferred lifetime, the creation of a\n      new prefix is not desired.\n  \
    \    If the Delegated-Prefix TLV does not include a Prefix-Policy TLV\n      indicating\
    \ restrictive assignment (type 131) or if local policy\n      exists to identify\
    \ it based on, e.g., other Prefix-Policy TLV\n      values and allows assignment,\
    \ the creation of a new prefix is\n      desired.\n      Otherwise, the creation\
    \ of a new prefix is not desired.\n   If the considered delegated prefix is an\
    \ IPv6 prefix, and whenever\n   there is at least one available prefix of length\
    \ 64, a prefix of\n   length 64 MUST be selected unless configured otherwise.\
    \  In case no\n   prefix of length 64 would be available, a longer prefix MAY\
    \ be\n   selected even without configuration.\n   If the considered delegated\
    \ prefix is an IPv4 prefix (Section 6.5\n   details how IPv4-delegated prefixes\
    \ are generated), a prefix of\n   length 24 SHOULD be preferred.\n   In any case,\
    \ an HNCP router making an assignment MUST support a\n   mechanism suitable to\
    \ distribute addresses from the considered prefix\n   if the link is intended\
    \ to be used by clients.  In this case, a\n   router assigning an IPv4 prefix\
    \ MUST announce the L-capability, and a\n   router assigning an IPv6 prefix with\
    \ a length greater than 64 MUST\n   announce the H-capability as defined in Section\
    \ 4.\n"
- title: 6.3.3.  Applying Assignments
  contents:
  - "6.3.3.  Applying Assignments\n   The prefix assignment algorithm indicates when\
    \ a prefix is applied to\n   the respective Common Link.  When that happens, each\
    \ router connected\n   to said link:\n      MUST forward traffic destined to said\
    \ prefix to the respective\n      link.\n      MUST participate in the client\
    \ configuration election as described\n      in Section 7, if the link is intended\
    \ to be used by clients.\n      MAY add an address from said prefix to the respective\
    \ network\n      interface as described in Section 6.4, e.g., if it is to be used\n\
    \      as source for locally originating traffic.\n"
- title: 6.3.4.  DHCPv6 Prefix Delegation
  contents:
  - "6.3.4.  DHCPv6 Prefix Delegation\n   When an HNCP router announcing the P-Capability\
    \ (Section 4) receives\n   a DHCPv6-PD request from a client, it SHOULD assign\
    \ one prefix per\n   delegated prefix in the network.  This set of assigned prefixes\
    \ is\n   then delegated to the client, after it has been applied as described\n\
    \   in the prefix assignment algorithm.  Each DHCPv6-PD client MUST be\n   considered\
    \ as an independent Private Link, and delegation MUST be\n   based on the same\
    \ set of delegated prefixes as the one used for\n   Common Link prefix assignments;\
    \ however, the prefix length to be\n   delegated MAY be smaller than 64.\n   The\
    \ assigned prefixes MUST NOT be given to DHCPv6-PD clients before\n   they are\
    \ applied and MUST be withdrawn whenever they are destroyed.\n   As an exception\
    \ to this rule, in order to shorten delays of processed\n   requests, a router\
    \ MAY prematurely give out a prefix that is\n   advertised but not yet applied\
    \ if it does so with a valid lifetime of\n   not more than 30 seconds and ensures\
    \ removal or correction of\n   lifetimes as soon as possible.\n"
- title: 6.4.  Node Address Assignment
  contents:
  - "6.4.  Node Address Assignment\n   This section specifies how HNCP nodes reserve\
    \ addresses for their own\n   use.  Nodes MAY, at any time, try to reserve a new\
    \ address from any\n   Applied Assigned Prefix.  Each HNCP node SHOULD announce\
    \ an IPv6\n   address and -- if it supports IPv4 -- MUST announce an IPv4 address,\n\
    \   whenever matching prefixes are assigned to at least one of its Common\n  \
    \ Links.  These addresses are published using Node-Address TLVs and\n   used to\
    \ locally reach HNCP nodes for other services.  Nodes SHOULD\n   NOT create and\
    \ announce more than one assignment per IP version to\n   avoid cluttering the\
    \ node data with redundant information unless a\n   special use case requires\
    \ it.\n   Stateless assignment based on Semantically Opaque Interface\n   Identifiers\
    \ [RFC7217] SHOULD be used for address assignment whenever\n   possible (e.g.,\
    \ the prefix length is 64), otherwise (e.g., for IPv4\n   if supported) the following\
    \ method MUST be used instead: For any\n   assigned prefix for which stateless\
    \ assignment is not used, the first\n   quarter of the addresses are reserved\
    \ for HNCP-based address\n   assignments, whereas the last three quarters are\
    \ left to the DHCP\n   elected router (Section 4 specifies the DHCP server election\n\
    \   process).  For example, if the prefix 192.0.2.0/24 is assigned and\n   applied\
    \ to a Common Link, addresses included in 192.0.2.0/26 are\n   reserved for HNCP\
    \ nodes, and the remaining addresses are reserved for\n   the elected DHCPv4 server.\n\
    \   HNCP nodes assign addresses to themselves and then (to ensure\n   eventual\
    \ lack of conflicting assignments) publish the assignments\n   using the Node-Address\
    \ TLV (Section 10.4).\n   The process of obtaining addresses is specified as follows:\n\
    \   o  A node MUST NOT start advertising an address if it is already\n      advertised\
    \ by another node.\n   o  An assigned address MUST be part of an assigned prefix\
    \ currently\n      applied on a Common Link that includes the interface specified\
    \ by\n      the endpoint identifier.\n   o  An address MUST NOT be used unless\
    \ it has been advertised for at\n      least ADDRESS_APPLY_DELAY consecutive seconds\
    \ and is still\n      currently being advertised.  The default value for\n   \
    \   ADDRESS_APPLY_DELAY is 3 seconds.\n   o  Whenever the same address is advertised\
    \ by more than one node, all\n      but the one advertised by the node with the\
    \ greatest node\n      identifier MUST be removed.\n"
- title: 6.5.  Local IPv4 and ULA Prefixes
  contents:
  - "6.5.  Local IPv4 and ULA Prefixes\n   HNCP routers can create a Unique Local\
    \ Address (ULA) or private IPv4\n   prefix to enable connectivity between local\
    \ devices.  These prefixes\n   are inserted in HNCP as if they were delegated\
    \ prefixes of a\n   (virtual) external connection (Section 6.2).  The following\
    \ rules\n   apply:\n      An HNCP router SHOULD create a ULA prefix if there is\
    \ no other\n      IPv6 prefix with a preferred time greater than 0 in the network.\n\
    \      It MAY also do so if there are other delegated IPv6 prefixes, but\n   \
    \   none of which is locally generated (i.e., without any Prefix-\n      Policy\
    \ TLV) and has a preferred time greater than 0.  However, it\n      MUST NOT do\
    \ so otherwise.  In case multiple locally generated ULA\n      prefixes are present,\
    \ only the one published by the node with the\n      greatest node identifier\
    \ is kept among those with a preferred time\n      greater than 0 -- if there\
    \ is any.\n      An HNCP router MUST create a private IPv4 prefix [RFC1918]\n\
    \      whenever it wishes to provide IPv4 Internet connectivity to the\n     \
    \ network and no other private IPv4 prefix with Internet\n      connectivity currently\
    \ exists.  It MAY also enable local IPv4\n      connectivity by creating a private\
    \ IPv4 prefix if no IPv4 prefix\n      exists but MUST NOT do so otherwise.  In\
    \ case multiple IPv4\n      prefixes are announced, only the one published by\
    \ the node with\n      the greatest node identifier is kept among those with a\
    \ Prefix-\n      Policy TLV of type 0 -- if there is any.  The router publishing\
    \ a\n      prefix with Internet connectivity MUST forward IPv4 traffic to the\n\
    \      Internet and perform NAT on behalf of the network as long as it\n     \
    \ publishes the prefix; other routers in the network MAY choose not\n      to.\n\
    \   Creation of such ULA and IPv4 prefixes MUST be delayed by a random\n   time\
    \ span between 0 and 10 seconds in which the router MUST scan for\n   others trying\
    \ to do the same.\n   When a new ULA prefix is created, the prefix is selected\
    \ based on the\n   configuration, using the last non-deprecated ULA prefix, or\
    \ generated\n   based on [RFC4193].\n"
- title: 7.  Configuration of Hosts and Non-HNCP Routers
  contents:
  - "7.  Configuration of Hosts and Non-HNCP Routers\n   HNCP routers need to ensure\
    \ that hosts and non-HNCP downstream\n   routers on internal links are configured\
    \ with addresses and routes.\n   Since DHCP clients can usually only bind to one\
    \ server at a time, a\n   per-link and per-service election takes place.\n   HNCP\
    \ routers may have different capabilities for configuring\n   downstream devices\
    \ and providing naming services.  Each router MUST\n   therefore indicate its\
    \ capabilities as specified in Section 4 in\n   order to participate as a candidate\
    \ in the election.\n"
- title: 7.1.  IPv6 Addressing and Configuration
  contents:
  - "7.1.  IPv6 Addressing and Configuration\n   In general, Stateless Address Autoconfiguration\
    \ [RFC4861] is used for\n   client configuration for its low overhead and fast\
    \ renumbering\n   capabilities.  Therefore, each HNCP router sends Router\n  \
    \ Advertisements on interfaces that are intended to be used by clients\n   and\
    \ MUST at least include a Prefix Information Option for each\n   Applied Assigned\
    \ Prefix that it assigned to the respective link in\n   every such advertisement.\
    \  However, stateful DHCPv6 can be used in\n   addition by administrative choice\
    \ to, e.g., collect hostnames and use\n   them to provide naming services or whenever\
    \ stateless configuration\n   is not applicable.\n   The designated stateful DHCPv6\
    \ server for a Common Link (Section 6.1)\n   is elected based on the capabilities\
    \ described in Section 4.  The\n   winner is the router (connected to the Common\
    \ Link) advertising the\n   greatest H-capability.  In case of a tie, Capability\
    \ Values\n   (Section 4) are compared, and the router with the greatest value\
    \ is\n   elected.  In case of another tie, the router with the greatest node\n\
    \   identifier is elected among the routers with tied Capability Values.\n   The\
    \ elected router MUST serve stateful DHCPv6 and SHOULD provide\n   naming services\
    \ for acquired hostnames as outlined in Section 8; all\n   other nodes MUST NOT.\
    \  Stateful addresses SHOULD be assigned in a way\n   that does not hinder fast\
    \ renumbering even if the DHCPv6 server or\n   client do not support the DHCPv6\
    \ reconfigure mechanism, e.g., by only\n   handing out leases from locally generated\
    \ (ULA) prefixes and prefixes\n   with a length different from 64 and by using\
    \ low renew and rebind\n   times (i.e., not longer than 5 minutes).  In case no\
    \ router was\n   elected, stateful DHCPv6 is not provided.  Routers that cease\
    \ to be\n   elected DHCP servers SHOULD -- when applicable -- invalidate\n   remaining\
    \ existing bindings in order to trigger client\n   reconfiguration.\n"
- title: 7.2.  DHCPv6 for Prefix Delegation
  contents:
  - "7.2.  DHCPv6 for Prefix Delegation\n   The designated DHCPv6 server for prefix\
    \ delegation on a Common Link\n   is elected based on the capabilities described\
    \ in Section 4.  The\n   winner is the router (connected to the Common Link) advertising\
    \ the\n   greatest P-capability.  In case of a tie, Capability Values\n   (Section\
    \ 4) are compared, and the router with the greatest value is\n   elected.  In\
    \ case of another tie, the router with the greatest node\n   identifier is elected\
    \ among the routers with tied Capability Values.\n   The elected router MUST provide\
    \ prefix delegation services [RFC3633]\n   on the given link (and follow the rules\
    \ in Section 6.3.4); all other\n   nodes MUST NOT.\n"
- title: 7.3.  DHCPv4 for Addressing and Configuration
  contents:
  - "7.3.  DHCPv4 for Addressing and Configuration\n   The designated DHCPv4 server\
    \ on a Common Link (Section 6.1) is\n   elected based on the capabilities described\
    \ in Section 4.  The winner\n   is the router (connected to the Common Link) advertising\
    \ the greatest\n   L-capability.  In case of a tie, Capability Values (Section\
    \ 4) are\n   compared, and the router with the greatest value is elected.  In\
    \ case\n   of another tie, the router with the greatest node identifier is\n \
    \  elected among the routers with tied Capability Values.\n   The elected router\
    \ MUST provide DHCPv4 services on the given link;\n   all other nodes MUST NOT.\
    \  The elected router MUST provide IP\n   addresses from the pool defined in Section\
    \ 6.4 and MUST announce\n   itself as router [RFC2132] to clients.\n   DHCPv4\
    \ lifetimes renew and rebind times (T1 and T2) SHOULD be short\n   (i.e., not\
    \ longer than 5 minutes) in order to provide reasonable\n   response times to\
    \ changes.  Routers that cease to be elected DHCP\n   servers SHOULD -- when applicable\
    \ -- invalidate remaining existing\n   bindings in order to trigger client reconfiguration.\n"
- title: 7.4.  Multicast DNS Proxy
  contents:
  - "7.4.  Multicast DNS Proxy\n   The designated Multicast DNS (mDNS) [RFC6762] proxy\
    \ on a Common Link\n   is elected based on the capabilities described in Section\
    \ 4.  The\n   winner is the router (connected to the Common Link) advertising\
    \ the\n   greatest M-capability.  In case of a tie, Capability Values\n   (Section\
    \ 4) are compared, and the router with the greatest value is\n   elected.  In\
    \ case of another tie, the router with the greatest node\n   identifier is elected\
    \ among the routers with tied Capability Values.\n   The elected router MUST provide\
    \ an mDNS proxy on the given link and\n   announce it as described in Section\
    \ 8.\n"
- title: 8.  Naming and Service Discovery
  contents:
  - "8.  Naming and Service Discovery\n   Network-wide naming and service discovery\
    \ can greatly improve the\n   user friendliness of a network.  The following mechanism\
    \ provides\n   means to setup and delegate naming and service discovery across\n\
    \   multiple HNCP routers.\n   Each HNCP router SHOULD provide and advertise a\
    \ recursive name\n   resolving server to clients that honor the announcements\
    \ made in\n   Delegated-Zone TLVs (Section 10.5), Domain-Name TLVs (Section 10.6),\n\
    \   and Node-Name TLVs (Section 10.7), i.e., delegate queries to the\n   designated\
    \ name servers and hand out appropriate A, AAAA, and PTR\n   records according\
    \ to the mentioned TLVs.\n   Each HNCP router SHOULD provide and announce an auto-generated\
    \ or\n   user-configured name for each internal Common Link (Section 6.1) for\n\
    \   which it is the designated DHCPv4, stateful DHCPv6 server, mDNS\n   proxy,\
    \ or for which it provides forward or reverse DNS services on\n   behalf of connected\
    \ devices.  This announcement is done using\n   Delegated-Zone TLVs (Section 10.5)\
    \ and MUST be unique in the whole\n   network.  In case of a conflict, the announcement\
    \ of the node with\n   the greatest node identifier takes precedence, and all\
    \ other nodes\n   MUST cease to announce the conflicting TLV.  HNCP routers providing\n\
    \   recursive name resolving services MUST use the included DNS server\n   address\
    \ within the TLV to resolve names belonging to the zone as if\n   there was an\
    \ NS record.\n   Each HNCP node SHOULD announce a node name for itself to be easily\n\
    \   reachable and MAY announce names on behalf of other devices.\n   Announcements\
    \ are made using Node-Name TLVs (Section 10.7), and the\n   announced names MUST\
    \ be unique in the whole network.  In case of a\n   conflict, the announcement\
    \ of the node with the greatest node\n   identifier takes precedence, and all\
    \ other nodes MUST cease to\n   announce the conflicting TLV.  HNCP routers providing\
    \ recursive name\n   resolving services as described above MUST resolve such announced\n\
    \   names to their respective IP addresses as if there were corresponding\n  \
    \ A/AAAA records.\n   Names and unqualified zones are used in an HNCP network\
    \ to provide\n   naming and service discovery with local significance.  A network-wide\n\
    \   zone is appended to all single labels or unqualified zones in order\n   to\
    \ qualify them. \".home\" is the default; however, an administrator\n   MAY configure\
    \ the announcement of a Domain-Name TLV (Section 10.6)\n   for the network to\
    \ use a different one.  In case multiple are\n   announced, the domain of the\
    \ node with the greatest node identifier\n   takes precedence.\n"
- title: 9.  Securing Third-Party Protocols
  contents:
  - "9.  Securing Third-Party Protocols\n   PSKs are often required to secure (for\
    \ example) IGPs and other\n   protocols that lack support for asymmetric security.\
    \  The following\n   mechanism manages PSKs using HNCP to enable bootstrapping\
    \ of such\n   third-party protocols.  The scheme SHOULD NOT be used unless it's\
    \ in\n   conjunction with secured HNCP unicast transport (i.e., DTLS), as\n  \
    \ transferring the PSK in plaintext anywhere in the network is a\n   potential\
    \ risk, especially as the originator may not know about\n   security (and use\
    \ of DNCP security) on all links.  The following\n   rules define how such a PSK\
    \ is managed and used:\n   o  If no Managed-PSK TLV (Section 10.8) is currently\
    \ being announced,\n      an HNCP node using this mechanism MUST create one after\
    \ a random\n      delay of 0 to 10 seconds with a 32 bytes long random key and\
    \ add\n      it to its node data.\n   o  In case multiple nodes announce such\
    \ a TLV at the same time, all\n      but the one with the greatest node identifier\
    \ stop advertising it\n      and adopt the remaining one.\n   o  The node currently\
    \ advertising the Managed-PSK TLV MUST generate\n      and advertise a new random\
    \ one whenever an unreachable node is\n      removed from the DNCP topology as\
    \ described in Section 4.6 of\n      [RFC7787].\n   PSKs for individual protocols\
    \ SHOULD be derived from the random PSK\n   using a suitable one-way hashing algorithm\
    \ (e.g., by using the HMAC-\n   based Key Derivation Function (HKDF) based on\
    \ HMAC-SHA256 [RFC6234]\n   with the particular protocol name in the info field)\
    \ so that\n   disclosure of any derived key does not impact other users of the\n\
    \   managed PSK.  Furthermore, derived PSKs MUST be updated whenever the\n   managed\
    \ PSK changes.\n"
- title: 10.  Type-Length-Value Objects
  contents:
  - "10.  Type-Length-Value Objects\n   HNCP defines the following TLVs in addition\
    \ to those defined by DNCP.\n   The same general rules and defaults for encoding\
    \ as noted in\n   Section 7 of [RFC7787] apply.  Note that most HNCP variable-length\n\
    \   TLVs also support optional nested TLVs, and they are encoded after\n   the\
    \ variable-length content, followed by the zero padding of the\n   variable-length\
    \ content to the next 32-bit boundary.\n   TLVs defined here are only valid when\
    \ appearing in their designated\n   context, i.e., only directly within container\
    \ TLVs mentioned in their\n   definition or -- absent any mentions -- only as\
    \ top-level TLVs within\n   the node data set.  TLVs appearing outside their designated\
    \ context\n   MUST be ignored.\n   TLVs encoding IP addresses or prefixes allow\
    \ encoding both IPv6 and\n   IPv4 addresses and prefixes.  IPv6 information is\
    \ encoded as is,\n   whereas for IPv4, the IPv4-mapped IPv6 addresses format [RFC4291]\
    \ is\n   used, and prefix lengths are encoded as the original IPv4 prefix\n  \
    \ length increased by 96.\n"
- title: 10.1.  HNCP-Version TLV
  contents:
  - "10.1.  HNCP-Version TLV\n    0                   1                   2      \
    \             3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8\
    \ 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |    Type: HNCP-Version (32)    |         Length: >= 5          |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |           Reserved            |   M   |   P   |   H   |   L   |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                          User-agent                           |\n   This\
    \ TLV is used to indicate the supported version and router\n   capabilities of\
    \ an HNCP node as described in Section 4.\n   Reserved:  Bits are reserved for\
    \ future use.  They MUST be set to 0\n      when creating this TLV, and their\
    \ value MUST be ignored when\n      processing the TLV.\n   M-capability:  Priority\
    \ value used for electing the on-link mDNS\n      [RFC6762] proxy.  It MUST be\
    \ set to 0 if the router is not capable\n      of proxying mDNS, otherwise it\
    \ SHOULD be set to 4 but MAY be set\n      to any value from 1 to 7 to indicate\
    \ a non-default priority.  The\n      values 8-15 are reserved for future use.\n\
    \   P-capability:  Priority value used for electing the on-link DHCPv6-PD\n  \
    \    server.  It MUST be set to 0 if the router is not capable of\n      providing\
    \ prefixes through DHCPv6-PD (Section 6.3.4), otherwise it\n      SHOULD be set\
    \ to 4 but MAY be set to any value from 1 to 7 to\n      indicate a non-default\
    \ priority.  The values 8-15 are reserved for\n      future use.\n   H-capability:\
    \  Priority value used for electing the on-link DHCPv6\n      server offering\
    \ non-temporary addresses.  It MUST be set to 0 if\n      the router is not capable\
    \ of providing such addresses, otherwise\n      it SHOULD be set to 4 but MAY\
    \ be set to any value from 1 to 7 to\n      indicate a non-default priority. \
    \ The values 8-15 are reserved for\n      future use.\n   L-capability:  Priority\
    \ value used for electing the on-link DHCPv4\n      server.  It MUST be set to\
    \ 0 if the router is not capable of\n      running a legacy DHCPv4 server offering\
    \ IPv4 addresses to clients,\n      otherwise it SHOULD be set to 4 but MAY be\
    \ set to any value from 1\n      to 7 to indicate a non-default priority.  The\
    \ values 8-15 are\n      reserved for future use.\n   User-Agent:  The user-agent\
    \ is a human-readable UTF-8 string that\n      describes the name and version\
    \ of the current HNCP implementation.\n"
- title: 10.2.  External-Connection TLV
  contents:
  - "10.2.  External-Connection TLV\n    0                   1                   2\
    \                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5\
    \ 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   | Type: External-Connection (33)|             Length            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                     (Optional nested TLVs)                    |\n   An External-Connection\
    \ TLV is a container TLV used to gather network\n   configuration information\
    \ associated with a single external\n   connection (Section 6.2) to be shared\
    \ across the HNCP network.  A\n   node MAY publish an arbitrary number of instances\
    \ of this TLV to\n   share the desired number of external connections.  Upon reception,\n\
    \   the information transmitted in any nested TLVs is used for the\n   purposes\
    \ of prefix assignment (Section 6.3) and host configuration\n   (Section 7).\n"
- title: 10.2.1.  Delegated-Prefix TLV
  contents:
  - "10.2.1.  Delegated-Prefix TLV\n    0                   1                   2\
    \                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5\
    \ 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |  Type: Delegated-Prefix (34)  |          Length: >= 9         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                Valid Lifetime Since Origination               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |              Preferred Lifetime Since Origination             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   | Prefix Length |                                               |\n   +-+-+-+-+-+-+-+-+\
    \            Prefix                             +\n   ...\n   |              \
    \                                 | 0-pad if any  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                     (Optional nested TLVs)                    |\n   The\
    \ Delegated-Prefix TLV is used by HNCP routers to advertise\n   prefixes that\
    \ are allocated to the whole network and can be used for\n   prefix assignment.\
    \  Delegated-Prefix TLVs are only valid inside\n   External-Connection TLVs, and\
    \ their prefixes MUST NOT overlap with\n   those of other such TLVs in the same\
    \ container.\n   Valid Lifetime Since Origination:   The time in seconds the delegated\n\
    \      prefix was valid for at the origination time of the node data\n      containing\
    \ this TLV.  The value MUST be updated whenever the node\n      republishes its\
    \ Node-State TLV.\n   Preferred Lifetime Since Origination:   The time in seconds\
    \ the\n      delegated prefix was preferred for at the origination time of the\n\
    \      node data containing this TLV.  The value MUST be updated whenever\n  \
    \    the node republishes its Node-State TLV.\n   Prefix Length:   The number\
    \ of significant bits in the prefix.\n   Prefix:   Significant bits of the prefix\
    \ padded with zeros up to the\n      next byte boundary.\n"
- title: 10.2.1.1.  Prefix-Policy TLV
  contents:
  - "10.2.1.1.  Prefix-Policy TLV\n    0                   1                   2 \
    \                  3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5\
    \ 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |    Type: Prefix-Policy (43)   |          Length: >= 1         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |  Policy Type  |                                               |\n   +-+-+-+-+-+-+-+-+\
    \                    Value                      +\n   |                      \
    \                                         |\n   The Prefix-Policy TLV contains\
    \ information about the policy or\n   applicability of a delegated prefix.  This\
    \ information can be used to\n   determine whether prefixes for a certain use\
    \ case (e.g., local\n   reachability, Internet connectivity) do exist or are to\
    \ be acquired\n   and to make decisions about assigning prefixes to certain links\
    \ or to\n   fine-tune border firewalls.  See Section 6.2 for a more in-depth\n\
    \   discussion.  This TLV is only valid inside a Delegated-Prefix TLV.\n   Policy\
    \ Type:   The type of the policy identifier.\n      0:        Internet connectivity\
    \ (no value).\n      1-128:    Explicit destination prefix with the Policy Type\
    \ being\n                the actual length of the prefix and the value containing\n\
    \                significant bits of the destination prefix padded with\n    \
    \            zeros up to the next byte boundary.\n      129:      DNS domain.\
    \  The value contains a DNS label sequence\n                encoded per [RFC1035].\
    \  Compression MUST NOT be used.\n                The label sequence MUST end\
    \ with an empty label.\n      130:      Opaque UTF-8 string (e.g., for administrative\
    \ purposes).\n      131:      Restrictive assignment (no value).\n      132-255:\
    \  Reserved for future additions.\n   Value:   A variable-length identifier of\
    \ the given type.\n"
- title: 10.2.2.  DHCPv6-Data TLV
  contents:
  - "10.2.2.  DHCPv6-Data TLV\n    0                   1                   2     \
    \              3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7\
    \ 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |    Type: DHCPv6-Data (37)     |          Length: > 0          |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                      DHCPv6 option stream                     |\n   This\
    \ TLV is used to encode auxiliary IPv6 configuration information\n   (e.g., recursive\
    \ DNS servers) encoded as a stream of DHCPv6 options.\n   It is only valid in\
    \ an External-Connection TLV or a Delegated-Prefix\n   TLV encoding an IPv6 prefix\
    \ and MUST NOT occur more than once in any\n   single container.  When included\
    \ in an External-Connection TLV, it\n   contains DHCPv6 options relevant to the\
    \ external connection as a\n   whole.  When included in a delegated prefix, it\
    \ contains options\n   mandatory to handle said prefix.\n   DHCPv6 option stream:\
    \   DHCPv6 options encoded as specified in\n      [RFC3315].\n"
- title: 10.2.3.  DHCPv4-Data TLV
  contents:
  - "10.2.3.  DHCPv4-Data TLV\n    0                   1                   2     \
    \              3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7\
    \ 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |     Type: DHCPv4-Data (38)    |          Length: > 0          |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                       DHCPv4 option stream                    |\n   This\
    \ TLV is used to encode auxiliary IPv4 configuration information\n   (e.g., recursive\
    \ DNS servers) encoded as a stream of DHCPv4 options.\n   It is only valid in\
    \ an External-Connection TLV and MUST NOT occur\n   more than once in any single\
    \ container.  It contains DHCPv4 options\n   relevant to the external connection\
    \ as a whole.\n   DHCPv4 option stream:   DHCPv4 options encoded as specified\
    \ in\n      [RFC2131].\n"
- title: 10.3.  Assigned-Prefix TLV
  contents:
  - "10.3.  Assigned-Prefix TLV\n    0                   1                   2   \
    \                3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6\
    \ 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |  Type: Assigned-Prefix (35)   |          Length: >= 6         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                      Endpoint Identifier                      |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |  Rsv. | Prty. | Prefix Length |                               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\
    \            Prefix             +\n   ...\n   |                              \
    \                 | 0-pad if any  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                     (Optional nested TLVs)                    |\n   This\
    \ TLV is used to announce Published Assigned Prefixes for the\n   purposes of\
    \ prefix assignment (Section 6.3).\n   Endpoint Identifier:   The endpoint identifier\
    \ of the local interface\n      the prefix is assigned to, or 0 if it is assigned\
    \ to a Private\n      Link (e.g., when the prefix is assigned for downstream prefix\n\
    \      delegation).\n   Rsv.:   Bits are reserved for future use.  They MUST be\
    \ set to 0 when\n      creating this TLV, and their value MUST be ignored when\
    \ processing\n      the TLV.\n   Prty:   The Advertised Prefix Priority from 0\
    \ to 15.\n      0-1:    Low priorities.\n      2:      Default priority.\n   \
    \   3-7:    High priorities.\n      8-11:   Administrative priorities.  MUST NOT\
    \ be used unless\n              configured otherwise.\n      12-14:  Reserved\
    \ for future use.\n      15:     Provider priorities.  MAY only be used by the\
    \ router\n              advertising the corresponding delegated prefix and based\n\
    \              on static or dynamic configuration (e.g., for excluding a\n   \
    \           prefix based on the DHCPv6-PD Prefix Exclude Option\n            \
    \  [RFC6603]).\n   Prefix Length:   The number of significant bits in the Prefix\
    \ field.\n   Prefix:   The significant bits of the prefix padded with zeros up\
    \ to\n      the next byte boundary.\n"
- title: 10.4.  Node-Address TLV
  contents:
  - "10.4.  Node-Address TLV\n    0                   1                   2      \
    \             3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8\
    \ 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |    Type: Node-Address (36)    |           Length: 20          |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                      Endpoint Identifier                      |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                                                               |\n   |  \
    \                         IP Address                          |\n   |        \
    \                                                       |\n   |              \
    \                                                 |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                     (Optional nested TLVs)                    |\n   This\
    \ TLV is used to announce addresses assigned to an HNCP node as\n   described\
    \ in Section 6.4.\n   Endpoint Identifier:   The endpoint identifier of the local\
    \ interface\n      the prefix is assigned to, or 0 if it is not assigned on an\
    \ HNCP\n      enabled link.\n   IP Address:   The globally scoped IPv6 address,\
    \ or the IPv4 address\n      encoded as an IPv4-mapped IPv6 address [RFC4291].\n"
- title: 10.5.  DNS-Delegated-Zone TLV
  contents:
  - "10.5.  DNS-Delegated-Zone TLV\n    0                   1                   2\
    \                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5\
    \ 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   | Type: DNS-Delegated-Zone (39) |        Length: >= 17          |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                                                               |\n   |  \
    \                         IP Address                          |\n   |        \
    \                                                       |\n   |              \
    \                                                 |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |Reserved |L|B|S|                                               |\n   +-+-+-+-+-+-+-+-+\
    \  Zone  (DNS label sequence - variable length) |\n   ...\n   |              \
    \                                 | 0-pad if any  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                     (Optional nested TLVs)                    |\n   This\
    \ TLV is used to announce a forward or reverse DNS zone delegation\n   in the\
    \ HNCP network.  Its meaning is roughly equivalent to specifying\n   an NS and\
    \ A/AAAA record for said zone.  Details are specified in\n   Section 8.\n   IP\
    \ Address:  The IPv6 address of the authoritative DNS server for the\n      zone;\
    \ IPv4 addresses are represented as IPv4-mapped addresses\n      [RFC4291].  The\
    \ special value of :: (all zeros) means the\n      delegation is available in\
    \ the global DNS hierarchy.\n   Reserved:  Those bits MUST be set to 0 when creating\
    \ the TLV and\n      ignored when parsing it unless defined in a later specification.\n\
    \   L-bit:  (DNS-based Service Discovery (DNS-SD) [RFC6763] Legacy-\n      Browse)\
    \ indicates that this delegated zone SHOULD be included in\n      the network's\
    \ DNS-SD legacy browse list of domains at\n      lb._dns-sd._udp.(DOMAIN-NAME).\
    \  Local forward zones SHOULD have\n      this bit set; reverse zones SHOULD NOT.\n\
    \   B-bit:  (DNS-SD [RFC6763] Browse) indicates that this delegated zone\n   \
    \   SHOULD be included in the network's DNS-SD browse list of domains\n      at\
    \ b._dns-sd._udp.(DOMAIN-NAME).  Local forward zones SHOULD have\n      this bit\
    \ set; reverse zones SHOULD NOT.\n   S-bit:  (Fully qualified DNS-SD [RFC6763]\
    \ domain) indicates that this\n      delegated zone consists of a fully qualified\
    \ DNS-SD domain, which\n      should be used as the base for DNS-SD domain enumeration,\
    \ i.e.,\n      _dns-sd._udp.(Zone) exists.  Forward zones MAY have this bit set;\n\
    \      reverse zones MUST NOT.  This can be used to provision a DNS\n      search\
    \ path to hosts for non-local services (such as those\n      provided by an ISP\
    \ or other manually configured service\n      providers).  Zones with this flag\
    \ SHOULD be added to the search\n      domains advertised to clients.\n   Zone:\
    \  The label sequence encoded according to [RFC1035].\n      Compression MUST\
    \ NOT be used.  The label sequence MUST end with an\n      empty label.\n"
- title: 10.6.  Domain-Name TLV
  contents:
  - "10.6.  Domain-Name TLV\n    0                   1                   2       \
    \            3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8\
    \ 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |    Type: Domain-Name (40)     |         Length: > 0           |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |        Domain (DNS label sequence - variable length)          |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   This TLV is used to indicate the base domain name for the network as\n   specified\
    \ in Section 8.  This TLV MUST NOT be announced unless the\n   domain name was\
    \ explicitly configured by an administrator.\n   Domain:   The label sequence\
    \ encoded according to [RFC1035].\n      Compression MUST NOT be used.  The label\
    \ sequence MUST end with an\n      empty label.\n"
- title: 10.7.  Node-Name TLV
  contents:
  - "10.7.  Node-Name TLV\n    0                   1                   2         \
    \          3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9\
    \ 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |     Type: Node-Name (41)      |         Length: > 17          |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                                                               |\n   |  \
    \                         IP Address                          |\n   |        \
    \                                                       |\n   |              \
    \                                                 |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |     Length    |       Name                                    |\n    ...\n\
    \   | (not null-terminated, variable length)        | 0-pad if any  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                     (Optional nested TLVs)                    |\n   This\
    \ TLV is used to assign the name of a node in the network to a\n   certain IP\
    \ address as specified in Section 8.\n   IP Address:   The IP address associated\
    \ with the name.  IPv4\n      addresses are encoded using IPv4-mapped IPv6 addresses.\n\
    \   Length:   The length of the name (0-63).\n   Name:   The name of the node\
    \ as a single DNS label.\n"
- title: 10.8.  Managed-PSK TLV
  contents:
  - "10.8.  Managed-PSK TLV\n    0                   1                   2       \
    \            3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8\
    \ 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |    Type: Managed-PSK (42)     |          Length: 32           |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                                                               |\n   |  \
    \                                                             |\n   |        \
    \                                                       |\n   |              \
    \        Random 256-bit PSK                       |\n   |                    \
    \                                           |\n   |                          \
    \                                     |\n   |                                \
    \                               |\n   |                                      \
    \                         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                     (Optional nested TLVs)                    |\n   This\
    \ TLV is used to announce a PSK for securing third-party protocols\n   exclusively\
    \ supporting symmetric cryptography as specified in\n   Section 9.\n"
- title: 11.  General Requirements for HNCP Nodes
  contents:
  - "11.  General Requirements for HNCP Nodes\n   Each node implementing HNCP is subject\
    \ to the following requirements:\n   o  It MUST implement HNCP versioning (Section\
    \ 4) and interface\n      classification (Section 5).\n   o  It MUST implement\
    \ and run the method for securing third-party\n      protocols (Section 9) whenever\
    \ it uses the security mechanism of\n      HNCP.\n   If the node is acting as\
    \ a router, then the following requirements\n   apply in addition:\n   o  It MUST\
    \ support Autonomous Address Configuration (Section 6) and\n      configuration\
    \ of hosts and non-HNCP routers (Section 7).\n   o  It SHOULD implement support\
    \ for naming and service discovery\n      (Section 8) as defined in this document.\n\
    \   o  It MAY be able to provide connectivity to IPv4 devices using\n      DHCPv4.\n\
    \   o  It SHOULD be able to delegate prefixes to legacy IPv6 routers\n      using\
    \ DHCPv6-PD (Section 6.3.4).\n   o  In addition, the normative language of \"\
    Basic Requirements for\n      IPv6 Customer Edge Routers\" [RFC7084] applies with\
    \ the following\n      adjustments:\n      *  The generic requirements G-4 and\
    \ G-5 are relaxed such that any\n         known default router on any interface\
    \ is sufficient for a\n         router to announce itself as the default router;\
    \ similarly,\n         only the loss of all such default routers results in self-\n\
    \         invalidation.\n      *  \"WAN-Side Configuration\" (Section 4.2) applies\
    \ to interfaces\n         classified as external.\n      *  If the Customer Edge\
    \ (CE) sends a size hint as indicated in\n         WPD-2, the hint MUST NOT be\
    \ determined by the number of LAN\n         interfaces of the CE but SHOULD instead\
    \ be large enough to at\n         least accommodate prefix assignments announced\
    \ for existing\n         delegated or ULA prefixes, if such prefixes exist and\
    \ unless\n         explicitly configured otherwise.\n      *  The dropping of\
    \ packets with a destination address belonging to\n         a delegated prefix\
    \ mandated in WPD-5 MUST NOT be applied to\n         destinations that are part\
    \ of any prefix announced using an\n         Assigned-Prefix TLV by any HNCP router\
    \ in the network.\n      *  \"LAN-Side Configuration\" (Section 4.3) applies to\
    \ interfaces\n         not classified as external.\n      *  The requirement L-2\
    \ to assign a separate /64 to each LAN\n         interface is replaced by the\
    \ participation in the prefix\n         assignment mechanism (Section 6.3) for\
    \ each such interface.\n      *  The requirement L-9 is modified, in that the\
    \ M flag MUST be set\n         if and only if a router connected to the respective\
    \ Common Link\n         is advertising a non-zero H-capability.  The O flag SHOULD\n\
    \         always be set.\n      *  The requirement L-12 to make DHCPv6 options\
    \ available is\n         adapted, in that Canonical Encoding Rules (CER) SHOULD\
    \ publish\n         the subset of options using the DHCPv6-Data TLV in an External-\n\
    \         Connection TLV.  Similarly, it SHOULD do the same for DHCPv4\n     \
    \    options in a DHCPv4-Data TLV.  DHCPv6 options received inside\n         an\
    \ OPTION_IAPREFIX [RFC3633] MUST be published using a\n         DHCPv6-Data TLV\
    \ inside the respective Delegated-Prefix TLV.\n         HNCP routers SHOULD make\
    \ relevant DHCPv6 and DHCPv4 options\n         available to clients, i.e., options\
    \ contained in External-\n         Connection TLVs that also include delegated\
    \ prefixes from which\n         a subset is assigned to the respective link.\n\
    \      *  The requirement L-13 to deprecate prefixes is applied to all\n     \
    \    delegated prefixes in the network from which assignments have\n         been\
    \ made on the respective interface.  Furthermore, the Prefix\n         Information\
    \ Options indicating deprecation MUST be included in\n         Router Advertisements\
    \ for the remainder of the prefixes'\n         respective valid lifetime but MAY\
    \ be omitted after at least 2\n         hours have passed.\n"
- title: 12.  Security Considerations
  contents:
  - "12.  Security Considerations\n   HNCP enables self-configuring networks, requiring\
    \ as little user\n   intervention as possible.  However, this zero-configuration\
    \ goal\n   usually conflicts with security goals and introduces a number of\n\
    \   threats.\n   General security issues for existing home networks are discussed\
    \ in\n   [RFC7368].  The protocols used to set up addresses and routes in such\n\
    \   networks to this day rarely have security enabled within the\n   configuration\
    \ protocol itself.  However, these issues are out of\n   scope for the security\
    \ of HNCP itself.\n   HNCP is a DNCP-based state synchronization mechanism carrying\n\
    \   information with varying threat potential.  For this consideration,\n   the\
    \ payloads defined in DNCP and this document are reviewed:\n   o  Network topology\
    \ information such as HNCP nodes and their common\n      links.\n   o  Address\
    \ assignment information such as delegated and assigned\n      prefixes for individual\
    \ links.\n   o  Naming and service discovery information such as auto-generated\
    \ or\n      customized names for individual links and nodes.\n"
- title: 12.1.  Interface Classification
  contents:
  - "12.1.  Interface Classification\n   As described in Section 5.3, an HNCP node\
    \ determines the internal or\n   external state on a per-interface basis.  A firewall\
    \ perimeter is set\n   up for the external interfaces, and for internal interfaces,\
    \ HNCP\n   traffic is allowed, with the exception of the Leaf and Guest\n   subcategories.\n\
    \   Threats concerning automatic interface classification cannot be\n   mitigated\
    \ by encrypting or authenticating HNCP traffic itself since\n   external routers\
    \ do not participate in the protocol and often cannot\n   be authenticated by\
    \ other means.  These threats include propagation\n   of forged uplinks in the\
    \ homenet in order to, e.g., redirect traffic\n   destined to external locations\
    \ and forged internal status by external\n   routers to, e.g., circumvent the\
    \ perimeter firewall.\n   It is therefore imperative to either secure individual\
    \ links on the\n   physical or link layer or preconfigure the adjacent interfaces\
    \ of\n   HNCP routers to an appropriate fixed category in order to secure the\n\
    \   homenet border.  Depending on the security of the external link,\n   eavesdropping,\
    \ man-in-the-middle, and similar attacks on external\n   traffic can still happen\
    \ between a homenet border router and the ISP;\n   however, these cannot be mitigated\
    \ from inside the homenet.  For\n   example, DHCPv4 has defined [RFC3118] to authenticate\
    \ DHCPv4\n   messages, but this is very rarely implemented in large or small\n\
    \   networks.  Further, while PPP can provide secure authentication of\n   both\
    \ sides of a point-to-point link, it is most often deployed with\n   one-way authentication\
    \ of the subscriber to the ISP, not the ISP to\n   the subscriber.\n"
- title: 12.2.  Security of Unicast Traffic
  contents:
  - "12.2.  Security of Unicast Traffic\n   Once the homenet border has been established,\
    \ there are several ways\n   to secure HNCP against internal threats like manipulation\
    \ or\n   eavesdropping by compromised devices on a link that is enabled for\n\
    \   HNCP traffic.  If left unsecured, attackers may perform arbitrary\n   traffic\
    \ redirection, eavesdropping, spoofing, or denial-of-service\n   attacks on HNCP\
    \ services such as address assignment or service\n   discovery, and the protocols\
    \ are secured using HNCP-derived keys such\n   as routing protocols.\n   Detailed\
    \ interface categories like \"Leaf\" or \"Guest\" can be used to\n   integrate\
    \ not fully trusted devices to various degrees into the\n   homenet by not exposing\
    \ them to HNCP traffic or by using firewall\n   rules to prevent them from reaching\
    \ homenet-internal resources.\n   On links where this is not practical and lower\
    \ layers do not provide\n   adequate protection from attackers, DTLS-based secure\
    \ unicast\n   transport MUST be used to secure traffic.\n"
- title: 12.3.  Other Protocols in the Home
  contents:
  - "12.3.  Other Protocols in the Home\n   IGPs and other protocols are usually run\
    \ alongside HNCP; therefore,\n   the individual security aspects of the respective\
    \ protocols must be\n   considered.  It can, however, be summarized that many\
    \ protocols to be\n   run in the home (like IGPs) provide -- to a certain extent\
    \ -- similar\n   security mechanisms.  Most of these protocols do not support\n\
    \   encryption and only support authentication based on Pre-Shared Keys\n   natively.\
    \  This influences the effectiveness of any encryption-based\n   security mechanism\
    \ deployed by HNCP as homenet routing information is\n   thus usually not encrypted.\n"
- title: 13.  IANA Considerations
  contents:
  - "13.  IANA Considerations\n   IANA has set up a registry for the (decimal values\
    \ within range\n   32-511) \"HNCP TLV Types\" under \"Distributed Node Consensus\
    \ Protocol\n   (DNCP)\".  The registration procedures is 'RFC Required' [RFC5226].\n\
    \   The initial contents are:\n      32: HNCP-Version\n      33: External-Connection\n\
    \      34: Delegated-Prefix\n      35: Assigned-Prefix\n      36: Node-Address\n\
    \      37: DHCPv4-Data\n      38: DHCPv6-Data\n      39: DNS-Delegated-Zone\n\
    \      40: Domain-Name\n      41: Node-Name\n      42: Managed-PSK\n      43:\
    \ Prefix-Policy\n      44-511: Unassigned.\n      768-1023: Reserved for Private\
    \ Use.  This range is used by HNCP\n      for per-implementation experimentation.\
    \  How collisions are\n      avoided is outside the scope of this document.\n\
    \   IANA has registered the UDP port numbers 8231 (service name: hncp-\n   udp-port,\
    \ description: HNCP) and 8232 (service name: hncp-dtls-port,\n   description:\
    \ HNCP over DTLS), as well as an IPv6 link-local multicast\n   address FF02:0:0:0:0:0:0:11\
    \ (description: All-Homenet-Nodes).\n"
- title: 14.  References
  contents:
  - '14.  References

    '
- title: 14.1.  Normative References
  contents:
  - "14.1.  Normative References\n   [RFC1321]  Rivest, R., \"The MD5 Message-Digest\
    \ Algorithm\", RFC 1321,\n              DOI 10.17487/RFC1321, April 1992,\n  \
    \            <http://www.rfc-editor.org/info/rfc1321>.\n   [RFC2119]  Bradner,\
    \ S., \"Key words for use in RFCs to Indicate\n              Requirement Levels\"\
    , BCP 14, RFC 2119,\n              DOI 10.17487/RFC2119, March 1997,\n       \
    \       <http://www.rfc-editor.org/info/rfc2119>.\n   [RFC2131]  Droms, R., \"\
    Dynamic Host Configuration Protocol\",\n              RFC 2131, DOI 10.17487/RFC2131,\
    \ March 1997,\n              <http://www.rfc-editor.org/info/rfc2131>.\n   [RFC2132]\
    \  Alexander, S. and R. Droms, \"DHCP Options and BOOTP Vendor\n             \
    \ Extensions\", RFC 2132, DOI 10.17487/RFC2132, March 1997,\n              <http://www.rfc-editor.org/info/rfc2132>.\n\
    \   [RFC3004]  Stump, G., Droms, R., Gu, Y., Vyaghrapuri, R., Demirtjis,\n   \
    \           A., Beser, B., and J. Privat, \"The User Class Option for\n      \
    \        DHCP\", RFC 3004, DOI 10.17487/RFC3004, November 2000,\n            \
    \  <http://www.rfc-editor.org/info/rfc3004>.\n   [RFC3315]  Droms, R., Ed., Bound,\
    \ J., Volz, B., Lemon, T., Perkins,\n              C., and M. Carney, \"Dynamic\
    \ Host Configuration Protocol\n              for IPv6 (DHCPv6)\", RFC 3315, DOI\
    \ 10.17487/RFC3315, July\n              2003, <http://www.rfc-editor.org/info/rfc3315>.\n\
    \   [RFC3633]  Troan, O. and R. Droms, \"IPv6 Prefix Options for Dynamic\n   \
    \           Host Configuration Protocol (DHCP) version 6\", RFC 3633,\n      \
    \        DOI 10.17487/RFC3633, December 2003,\n              <http://www.rfc-editor.org/info/rfc3633>.\n\
    \   [RFC4193]  Hinden, R. and B. Haberman, \"Unique Local IPv6 Unicast\n     \
    \         Addresses\", RFC 4193, DOI 10.17487/RFC4193, October 2005,\n       \
    \       <http://www.rfc-editor.org/info/rfc4193>.\n   [RFC4291]  Hinden, R. and\
    \ S. Deering, \"IP Version 6 Addressing\n              Architecture\", RFC 4291,\
    \ DOI 10.17487/RFC4291, February\n              2006, <http://www.rfc-editor.org/info/rfc4291>.\n\
    \   [RFC4861]  Narten, T., Nordmark, E., Simpson, W., and H. Soliman,\n      \
    \        \"Neighbor Discovery for IP version 6 (IPv6)\", RFC 4861,\n         \
    \     DOI 10.17487/RFC4861, September 2007,\n              <http://www.rfc-editor.org/info/rfc4861>.\n\
    \   [RFC5226]  Narten, T. and H. Alvestrand, \"Guidelines for Writing an\n   \
    \           IANA Considerations Section in RFCs\", BCP 26, RFC 5226,\n       \
    \       DOI 10.17487/RFC5226, May 2008,\n              <http://www.rfc-editor.org/info/rfc5226>.\n\
    \   [RFC6092]  Woodyatt, J., Ed., \"Recommended Simple Security\n            \
    \  Capabilities in Customer Premises Equipment (CPE) for\n              Providing\
    \ Residential IPv6 Internet Service\", RFC 6092,\n              DOI 10.17487/RFC6092,\
    \ January 2011,\n              <http://www.rfc-editor.org/info/rfc6092>.\n   [RFC6206]\
    \  Levis, P., Clausen, T., Hui, J., Gnawali, O., and J. Ko,\n              \"\
    The Trickle Algorithm\", RFC 6206, DOI 10.17487/RFC6206,\n              March\
    \ 2011, <http://www.rfc-editor.org/info/rfc6206>.\n   [RFC6347]  Rescorla, E.\
    \ and N. Modadugu, \"Datagram Transport Layer\n              Security Version\
    \ 1.2\", RFC 6347, DOI 10.17487/RFC6347,\n              January 2012, <http://www.rfc-editor.org/info/rfc6347>.\n\
    \   [RFC6603]  Korhonen, J., Ed., Savolainen, T., Krishnan, S., and O.\n     \
    \         Troan, \"Prefix Exclude Option for DHCPv6-based Prefix\n           \
    \   Delegation\", RFC 6603, DOI 10.17487/RFC6603, May 2012,\n              <http://www.rfc-editor.org/info/rfc6603>.\n\
    \   [RFC6763]  Cheshire, S. and M. Krochmal, \"DNS-Based Service\n           \
    \   Discovery\", RFC 6763, DOI 10.17487/RFC6763, February 2013,\n            \
    \  <http://www.rfc-editor.org/info/rfc6763>.\n   [RFC7217]  Gont, F., \"A Method\
    \ for Generating Semantically Opaque\n              Interface Identifiers with\
    \ IPv6 Stateless Address\n              Autoconfiguration (SLAAC)\", RFC 7217,\n\
    \              DOI 10.17487/RFC7217, April 2014,\n              <http://www.rfc-editor.org/info/rfc7217>.\n\
    \   [RFC7695]  Pfister, P., Paterson, B., and J. Arkko, \"Distributed\n      \
    \        Prefix Assignment Algorithm\", RFC 7695,\n              DOI 10.17487/RFC7695,\
    \ November 2015,\n              <http://www.rfc-editor.org/info/rfc7695>.\n  \
    \ [RFC7787]  Stenberg, M. and S. Barth, \"Distributed Node Consensus\n       \
    \       Protocol\", RFC 7787, DOI 10.17487/RFC7787, April 2016,\n            \
    \  <http://www.rfc-editor.org/info/rfc7787>.\n"
- title: 14.2.  Informative References
  contents:
  - "14.2.  Informative References\n   [RFC1035]  Mockapetris, P., \"Domain names\
    \ - implementation and\n              specification\", STD 13, RFC 1035, DOI 10.17487/RFC1035,\n\
    \              November 1987, <http://www.rfc-editor.org/info/rfc1035>.\n   [RFC1918]\
    \  Rekhter, Y., Moskowitz, B., Karrenberg, D., de Groot, G.,\n              and\
    \ E. Lear, \"Address Allocation for Private Internets\",\n              BCP 5,\
    \ RFC 1918, DOI 10.17487/RFC1918, February 1996,\n              <http://www.rfc-editor.org/info/rfc1918>.\n\
    \   [RFC3118]  Droms, R., Ed. and W. Arbaugh, Ed., \"Authentication for\n    \
    \          DHCP Messages\", RFC 3118, DOI 10.17487/RFC3118, June 2001,\n     \
    \         <http://www.rfc-editor.org/info/rfc3118>.\n   [RFC6234]  Eastlake 3rd,\
    \ D. and T. Hansen, \"US Secure Hash Algorithms\n              (SHA and SHA-based\
    \ HMAC and HKDF)\", RFC 6234,\n              DOI 10.17487/RFC6234, May 2011,\n\
    \              <http://www.rfc-editor.org/info/rfc6234>.\n   [RFC6241]  Enns,\
    \ R., Ed., Bjorklund, M., Ed., Schoenwaelder, J., Ed.,\n              and A. Bierman,\
    \ Ed., \"Network Configuration Protocol\n              (NETCONF)\", RFC 6241,\
    \ DOI 10.17487/RFC6241, June 2011,\n              <http://www.rfc-editor.org/info/rfc6241>.\n\
    \   [RFC6762]  Cheshire, S. and M. Krochmal, \"Multicast DNS\", RFC 6762,\n  \
    \            DOI 10.17487/RFC6762, February 2013,\n              <http://www.rfc-editor.org/info/rfc6762>.\n\
    \   [RFC7084]  Singh, H., Beebee, W., Donley, C., and B. Stark, \"Basic\n    \
    \          Requirements for IPv6 Customer Edge Routers\", RFC 7084,\n        \
    \      DOI 10.17487/RFC7084, November 2013,\n              <http://www.rfc-editor.org/info/rfc7084>.\n\
    \   [RFC7368]  Chown, T., Ed., Arkko, J., Brandt, A., Troan, O., and J.\n    \
    \          Weil, \"IPv6 Home Networking Architecture Principles\",\n         \
    \     RFC 7368, DOI 10.17487/RFC7368, October 2014,\n              <http://www.rfc-editor.org/info/rfc7368>.\n\
    \   [RFC7525]  Sheffer, Y., Holz, R., and P. Saint-Andre,\n              \"Recommendations\
    \ for Secure Use of Transport Layer\n              Security (TLS) and Datagram\
    \ Transport Layer Security\n              (DTLS)\", BCP 195, RFC 7525, DOI 10.17487/RFC7525,\
    \ May\n              2015, <http://www.rfc-editor.org/info/rfc7525>.\n"
- title: Acknowledgments
  contents:
  - "Acknowledgments\n   Thanks to Ole Troan, Mark Baugher, Mark Townsley, Juliusz\
    \ Chroboczek,\n   and Thomas Clausen for their contributions to the document.\n\
    \   Thanks to Eric Kline for the original border discovery work.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Markus Stenberg\n   Independent\n   Helsinki  00930\n\
    \   Finland\n   Email: markus.stenberg@iki.fi\n   Steven Barth\n   Independent\n\
    \   Halle  06114\n   Germany\n   Email: cyrus@openwrt.org\n   Pierre Pfister\n\
    \   Cisco Systems\n   Paris\n   France\n   Email: pierre.pfister@darou.fr\n"
