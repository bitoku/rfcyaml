- title: __initial_text__
  contents:
  - '                    Increasing TCP''s Initial Window

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2002).  All Rights Reserved.\n"
- title: Abstract
  contents:
  - "Abstract\n   This document specifies an optional standard for TCP to increase\
    \ the\n   permitted initial window from one or two segment(s) to roughly 4K\n\
    \   bytes, replacing RFC 2414.  It discusses the advantages and\n   disadvantages\
    \ of the higher initial window, and includes discussion\n   of experiments and\
    \ simulations showing that the higher initial window\n   does not lead to congestion\
    \ collapse.  Finally, this document\n   provides guidance on implementation issues.\n"
- title: Terminology
  contents:
  - "Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\"\
    , \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and\
    \ \"OPTIONAL\" in this\n   document are to be interpreted as described in RFC\
    \ 2119 [RFC2119].\n"
- title: 1.  TCP Modification
  contents:
  - "1.  TCP Modification\n   This document obsoletes [RFC2414] and updates [RFC2581]\
    \ and specifies\n   an increase in the permitted upper bound for TCP's initial\
    \ window\n   from one or two segment(s) to between two and four segments.  In\
    \ most\n   cases, this change results in an upper bound on the initial window\
    \ of\n   roughly 4K bytes (although given a large segment size, the permitted\n\
    \   initial window of two segments may be significantly larger than 4K\n   bytes).\n\
    \   The upper bound for the initial window is given more precisely in\n   (1):\n\
    \         min (4*MSS, max (2*MSS, 4380 bytes))                        (1)\n  \
    \ Note: Sending a 1500 byte packet indicates a maximum segment size\n   (MSS)\
    \ of 1460 bytes (assuming no IP or TCP options).  Therefore,\n   limiting the\
    \ initial window's MSS to 4380 bytes allows the sender to\n   transmit three segments\
    \ initially in the common case when using 1500\n   byte packets.\n   Equivalently,\
    \ the upper bound for the initial window size is based on\n   the MSS, as follows:\n\
    \       If (MSS <= 1095 bytes)\n           then win <= 4 * MSS;\n       If (1095\
    \ bytes < MSS < 2190 bytes)\n           then win <= 4380;\n       If (2190 bytes\
    \ <= MSS)\n           then win <= 2 * MSS;\n   This increased initial window is\
    \ optional: a TCP MAY start with a\n   larger initial window.  However, we expect\
    \ that most general-purpose\n   TCP implementations would choose to use the larger\
    \ initial congestion\n   window given in equation (1) above.\n   This upper bound\
    \ for the initial window size represents a change from\n   RFC 2581 [RFC2581],\
    \ which specified that the congestion window be\n   initialized to one or two\
    \ segments.\n   This change applies to the initial window of the connection in\
    \ the\n   first round trip time (RTT) of data transmission following the TCP\n\
    \   three-way handshake.  Neither the SYN/ACK nor its acknowledgment\n   (ACK)\
    \ in the three-way handshake should increase the initial window\n   size above\
    \ that outlined in equation (1).  If the SYN or SYN/ACK is\n   lost, the initial\
    \ window used by a sender after a correctly\n   transmitted SYN MUST be one segment\
    \ consisting of MSS bytes.\n   TCP implementations use slow start in as many as\
    \ three different\n   ways: (1) to start a new connection (the initial window);\
    \ (2) to\n   restart transmission after a long idle period (the restart window);\n\
    \   and (3) to restart transmission after a retransmit timeout (the loss\n   window).\
    \  The change specified in this document affects the value of\n   the initial\
    \ window.  Optionally, a TCP MAY set the restart window to\n   the minimum of\
    \ the value used for the initial window and the current\n   value of cwnd (in\
    \ other words, using a larger value for the restart\n   window should never increase\
    \ the size of cwnd).  These changes do NOT\n   change the loss window, which must\
    \ remain 1 segment of MSS bytes (to\n   permit the lowest possible window size\
    \ in the case of severe\n   congestion).\n"
- title: 2.  Implementation Issues
  contents:
  - "2.  Implementation Issues\n   When larger initial windows are implemented along\
    \ with Path MTU\n   Discovery [RFC1191], and the MSS being used is found to be\
    \ too large,\n   the congestion window `cwnd' SHOULD be reduced to prevent large\n\
    \   bursts of smaller segments.  Specifically, `cwnd' SHOULD be reduced\n   by\
    \ the ratio of the old segment size to the new segment size.\n   When larger initial\
    \ windows are implemented along with Path MTU\n   Discovery [RFC1191], alternatives\
    \ are to set the \"Don't Fragment\"\n   (DF) bit in all segments in the initial\
    \ window, or to set the \"Don't\n   Fragment\" (DF) bit in one of the segments.\
    \  It is an open question as\n   to which of these two alternatives is best; we\
    \ would hope that\n   implementation experiences will shed light on this question.\
    \  In the\n   first case of setting the DF bit in all segments, if the initial\n\
    \   packets are too large, then all of the initial packets will be\n   dropped\
    \ in the network.  In the second case of setting the DF bit in\n   only one segment,\
    \ if the initial packets are too large, then all but\n   one of the initial packets\
    \ will be fragmented in the network.  When\n   the second case is followed, setting\
    \ the DF bit in the last segment\n   in the initial window provides the least\
    \ chance for needless\n   retransmissions when the initial segment size is found\
    \ to be too\n   large, because it minimizes the chances of duplicate ACKs triggering\n\
    \   a Fast Retransmit.  However, more attention needs to be paid to the\n   interaction\
    \ between larger initial windows and Path MTU Discovery.\n   The larger initial\
    \ window specified in this document is not intended\n   as encouragement for web\
    \ browsers to open multiple simultaneous TCP\n   connections, all with large initial\
    \ windows.  When web browsers open\n   simultaneous TCP connections to the same\
    \ destination, they are\n   working against TCP's congestion control mechanisms\
    \ [FF99],\n   regardless of the size of the initial window.  Combining this\n\
    \   behavior with larger initial windows further increases the unfairness\n  \
    \ to other traffic in the network.  We suggest the use of HTTP/1.1\n   [RFC2068]\
    \ (persistent TCP connections and pipelining) as a way to\n   achieve better performance\
    \ of web transfers.\n"
- title: 3.  Advantages of Larger Initial Windows
  contents:
  - "3.  Advantages of Larger Initial Windows\n   1.  When the initial window is one\
    \ segment, a receiver employing\n       delayed ACKs [RFC1122] is forced to wait\
    \ for a timeout before\n       generating an ACK.  With an initial window of at\
    \ least two\n       segments, the receiver will generate an ACK after the second\
    \ data\n       segment arrives.  This eliminates the wait on the timeout (often\n\
    \       up to 200 msec, and possibly up to 500 msec [RFC1122]).\n   2.  For connections\
    \ transmitting only a small amount of data, a\n       larger initial window reduces\
    \ the transmission time (assuming at\n       most moderate segment drop rates).\
    \  For many email (SMTP [Pos82])\n       and web page (HTTP [RFC1945, RFC2068])\
    \ transfers that are less\n       than 4K bytes, the larger initial window would\
    \ reduce the data\n       transfer time to a single RTT.\n   3.  For connections\
    \ that will be able to use large congestion\n       windows, this modification\
    \ eliminates up to three RTTs and a\n       delayed ACK timeout during the initial\
    \ slow-start phase.  This\n       will be of particular benefit for high-bandwidth\
    \ large-\n       propagation-delay TCP connections, such as those over satellite\n\
    \       links.\n"
- title: 4.  Disadvantages of Larger Initial Windows for the Individual
  contents:
  - "4.  Disadvantages of Larger Initial Windows for the Individual\n    Connection\n\
    \   In high-congestion environments, particularly for routers that have a\n  \
    \ bias against bursty traffic (as in the typical Drop Tail router\n   queues),\
    \ a TCP connection can sometimes be better off starting with\n   an initial window\
    \ of one segment.  There are scenarios where a TCP\n   connection slow-starting\
    \ from an initial window of one segment might\n   not have segments dropped, while\
    \ a TCP connection starting with an\n   initial window of four segments might\
    \ experience unnecessary\n   retransmits due to the inability of the router to\
    \ handle small\n   bursts.  This could result in an unnecessary retransmit timeout.\
    \  For\n   a large-window connection that is able to recover without a\n   retransmit\
    \ timeout, this could result in an unnecessarily-early\n   transition from the\
    \ slow-start to the congestion-avoidance phase of\n   the window increase algorithm.\
    \  These premature segment drops are\n   unlikely to occur in uncongested networks\
    \ with sufficient buffering\n   or in moderately-congested networks where the\
    \ congested router uses\n   active queue management (such as Random Early Detection\
    \ [FJ93,\n   RFC2309]).\n   Some TCP connections will receive better performance\
    \ with the larger\n   initial window even if the burstiness of the initial window\
    \ results\n   in premature segment drops.  This will be true if (1) the TCP\n\
    \   connection recovers from the segment drop without a retransmit\n   timeout,\
    \ and (2) the TCP connection is ultimately limited to a small\n   congestion window\
    \ by either network congestion or by the receiver's\n   advertised window.\n"
- title: 5.  Disadvantages of Larger Initial Windows for the Network
  contents:
  - "5.  Disadvantages of Larger Initial Windows for the Network\n   In terms of the\
    \ potential for congestion collapse, we consider two\n   separate potential dangers\
    \ for the network.  The first danger would\n   be a scenario where a large number\
    \ of segments on congested links\n   were duplicate segments that had already\
    \ been received at the\n   receiver.  The second danger would be a scenario where\
    \ a large number\n   of segments on congested links were segments that would be\
    \ dropped\n   later in the network before reaching their final destination.\n\
    \   In terms of the negative effect on other traffic in the network, a\n   potential\
    \ disadvantage of larger initial windows would be that they\n   increase the general\
    \ packet drop rate in the network.  We discuss\n   these three issues below.\n\
    \   Duplicate segments:\n       As described in the previous section, the larger\
    \ initial window\n       could occasionally result in a segment dropped from the\
    \ initial\n       window, when that segment might not have been dropped if the\n\
    \       sender had slow-started from an initial window of one segment.\n     \
    \  However, Appendix A shows that even in this case, the larger\n       initial\
    \ window would not result in the transmission of a large\n       number of duplicate\
    \ segments.\n   Segments dropped later in the network:\n       How much would\
    \ the larger initial window for TCP increase the\n       number of segments on\
    \ congested links that would be dropped\n       before reaching their final destination?\
    \  This is a problem that\n       can only occur for connections with multiple\
    \ congested links,\n       where some segments might use scarce bandwidth on the\
    \ first\n       congested link along the path, only to be dropped later along\
    \ the\n       path.\n       First, many of the TCP connections will have only\
    \ one congested\n       link along the path.  Segments dropped from these connections\
    \ do\n       not \"waste\" scarce bandwidth, and do not contribute to congestion\n\
    \       collapse.\n       However, some network paths will have multiple congested\
    \ links,\n       and segments dropped from the initial window could use scarce\n\
    \       bandwidth along the earlier congested links before ultimately\n      \
    \ being dropped on subsequent congested links.  To the extent that\n       the\
    \ drop rate is independent of the initial window used by TCP\n       segments,\
    \ the problem of congested links carrying segments that\n       will be dropped\
    \ before reaching their destination will be similar\n       for TCP connections\
    \ that start by sending four segments or one\n       segment.\n   An increased\
    \ packet drop rate:\n       For a network with a high segment drop rate, increasing\
    \ the TCP\n       initial window could increase the segment drop rate even further.\n\
    \       This is in part because routers with Drop Tail queue management\n    \
    \   have difficulties with bursty traffic in times of congestion.\n       However,\
    \ given uncorrelated arrivals for TCP connections, the\n       larger TCP initial\
    \ window should not significantly increase the\n       segment drop rate.  Simulation-based\
    \ explorations of these issues\n       are discussed in Section 7.2.\n   These\
    \ potential dangers for the network are explored in simulations\n   and experiments\
    \ described in the section below.  Our judgment is that\n   while there are dangers\
    \ of congestion collapse in the current\n   Internet (see [FF99] for a discussion\
    \ of the dangers of congestion\n   collapse from an increased deployment of UDP\
    \ connections without\n   end-to-end congestion control), there is no such danger\
    \ to the\n   network from increasing the TCP initial window to 4K bytes.\n"
- title: 6.  Interactions with the Retransmission Timer
  contents:
  - "6.  Interactions with the Retransmission Timer\n   Using a larger initial burst\
    \ of data can exacerbate existing problems\n   with spurious retransmit timeouts\
    \ on low-bandwidth paths, assuming\n   the standard algorithm for determining\
    \ the TCP retransmission timeout\n   (RTO) [RFC2988].  The problem is that across\
    \ low-bandwidth network\n   paths on which the transmission time of a packet is\
    \ a large portion\n   of the round-trip time, the small packets used to establish\
    \ a TCP\n   connection do not seed the RTO estimator appropriately.  When the\n\
    \   first window of data packets is transmitted, the sender's retransmit\n   timer\
    \ could expire before the acknowledgments for those packets are\n   received.\
    \  As each acknowledgment arrives, the retransmit timer is\n   generally reset.\
    \  Thus, the retransmit timer will not expire as long\n   as an acknowledgment\
    \ arrives at least once a second, given the one-\n   second minimum on the RTO\
    \ recommended in RFC 2988.\n   For instance, consider a 9.6 Kbps link.  The initial\
    \ RTT measurement\n   will be on the order of 67 msec, if we simply consider the\n\
    \   transmission time of 2 packets (the SYN and SYN-ACK), each consisting\n  \
    \ of 40 bytes.  Using the RTO estimator given in [RFC2988], this yields\n   an\
    \ initial RTO of 201 msec (67 + 4*(67/2)).  However, we round the\n   RTO to 1\
    \ second as specified in RFC 2988.  Then assume we send an\n   initial window\
    \ of one or more 1500-byte packets (1460 data bytes plus\n   overhead).  Each\
    \ packet will take on the order of 1.25 seconds to\n   transmit.  Therefore, the\
    \ RTO will fire before the ACK for the first\n   packet returns, causing a spurious\
    \ timeout.  In this case, a larger\n   initial window of three or four packets\
    \ exacerbates the problems\n   caused by this spurious timeout.\n   One way to\
    \ deal with this problem is to make the RTO algorithm more\n   conservative. \
    \ During the initial window of data, for instance, the\n   RTO could be updated\
    \ for each acknowledgment received.  In addition,\n   if the retransmit timer\
    \ expires for some packet lost in the first\n   window of data, we could leave\
    \ the exponential-backoff of the\n   retransmit timer engaged until at least one\
    \ valid RTT measurement,\n   that involves a data packet, is received.\n   Another\
    \ method would be to refrain from taking an RTT sample during\n   connection establishment,\
    \ leaving the default RTO in place until TCP\n   takes a sample from a data segment\
    \ and the corresponding ACK.  While\n   this method likely helps prevent spurious\
    \ retransmits, it also may\n   slow the data transfer down if loss occurs before\
    \ the RTO is seeded.\n   The use of limited transmit [RFC3042] to aid a TCP connection\
    \ in\n   recovering from loss using fast retransmit rather than the RTO timer\n\
    \   mitigates the performance degradation caused by using the high\n   default\
    \ RTO during the initial window of data transmission.\n   This specification leaves\
    \ the decision about what to do (if anything)\n   with regards to the RTO, when\
    \ using a larger initial window, to the\n   implementer.  However, the RECOMMENDED\
    \ approach is to refrain from\n   sampling the RTT during the three-way handshake,\
    \ keeping the default\n   RTO in place until an RTT sample involving a data packet\
    \ is taken.\n   In addition, it is RECOMMENDED that TCPs use limited transmit\n\
    \   [RFC3042].\n"
- title: 7.  Typical Levels of Burstiness for TCP Traffic.
  contents:
  - "7.  Typical Levels of Burstiness for TCP Traffic.\n   Larger TCP initial windows\
    \ would not dramatically increase the\n   burstiness of TCP traffic in the Internet\
    \ today, because such traffic\n   is already fairly bursty.  Bursts of two and\
    \ three segments are\n   already typical of TCP [Flo97]; a delayed ACK (covering\
    \ two\n   previously unacknowledged segments) received during congestion\n   avoidance\
    \ causes the congestion window to slide and two segments to\n   be sent.  The\
    \ same delayed ACK received during slow start causes the\n   window to slide by\
    \ two segments and then be incremented by one\n   segment, resulting in a three-segment\
    \ burst.  While not necessarily\n   typical, bursts of four and five segments\
    \ for TCP are not rare.\n   Assuming delayed ACKs, a single dropped ACK causes\
    \ the subsequent ACK\n   to cover four previously unacknowledged segments.  During\
    \ congestion\n   avoidance this leads to a four-segment burst, and during slow\
    \ start a\n   five-segment burst is generated.\n   There are also changes in progress\
    \ that reduce the performance\n   problems posed by moderate traffic bursts. \
    \ One such change is the\n   deployment of higher-speed links in some parts of\
    \ the network, where\n   a burst of 4K bytes can represent a small quantity of\
    \ data.  A second\n   change, for routers with sufficient buffering, is the deployment\
    \ of\n   queue management mechanisms such as RED, which is designed to be\n  \
    \ tolerant of transient traffic bursts.\n"
- title: 8.  Simulations and Experimental Results
  contents:
  - '8.  Simulations and Experimental Results

    '
- title: 8.1 Studies of TCP Connections using that Larger Initial Window
  contents:
  - "8.1 Studies of TCP Connections using that Larger Initial Window\n   This section\
    \ surveys simulations and experiments that explore the\n   effect of larger initial\
    \ windows on TCP connections.  The first set\n   of experiments explores performance\
    \ over satellite links.  Larger\n   initial windows have been shown to improve\
    \ the performance of TCP\n   connections over satellite channels [All97b].  In\
    \ this study, an\n   initial window of four segments (512 byte MSS) resulted in\
    \ throughput\n   improvements of up to 30% (depending upon transfer size).  [KAGT98]\n\
    \   shows that the use of larger initial windows results in a decrease in\n  \
    \ transfer time in HTTP tests over the ACTS satellite system.  A study\n   involving\
    \ simulations of a large number of HTTP transactions over\n   hybrid fiber coax\
    \ (HFC) indicates that the use of larger initial\n   windows decreases the time\
    \ required to load WWW pages [Nic98].\n   A second set of experiments explored\
    \ TCP performance over dialup\n   modem links.  In experiments over a 28.8 bps\
    \ dialup channel [All97a,\n   AHO98], a four-segment initial window decreased\
    \ the transfer time of\n   a 16KB file by roughly 10%, with no accompanying increase\
    \ in the drop\n   rate.  A simulation study [RFC2416] investigated the effects\
    \ of using\n   a larger initial window on a host connected by a slow modem link\
    \ and\n   a router with a 3 packet buffer.  The study concluded that for the\n\
    \   scenario investigated, the use of larger initial windows was not\n   harmful\
    \ to TCP performance.\n   Finally, [All00] illustrates that the percentage of\
    \ connections at a\n   particular web server that experience loss in the initial\
    \ window of\n   data transmission increases with the size of the initial congestion\n\
    \   window.  However, the increase is in line with what would be expected\n  \
    \ from sending a larger burst into the network.\n"
- title: 8.2 Studies of Networks using Larger Initial Windows
  contents:
  - "8.2 Studies of Networks using Larger Initial Windows\n   This section surveys\
    \ simulations and experiments investigating the\n   impact of the larger window\
    \ on other TCP connections sharing the\n   path.  Experiments in [All97a, AHO98]\
    \ show that for 16 KB transfers\n   to 100 Internet hosts, four-segment initial\
    \ windows resulted in a\n   small increase in the drop rate of 0.04 segments/transfer.\
    \  While the\n   drop rate increased slightly, the transfer time was reduced by\n\
    \   roughly 25% for transfers using the four-segment (512 byte MSS)\n   initial\
    \ window when compared to an initial window of one segment.\n   A simulation study\
    \ in [RFC2415] explores the impact of a larger\n   initial window on competing\
    \ network traffic.  In this investigation,\n   HTTP and FTP flows share a single\
    \ congested gateway (where the number\n   of HTTP and FTP flows varies from one\
    \ simulation set to another).\n   For each simulation set, the paper examines\
    \ aggregate link\n   utilization and packet drop rates, median web page delay,\
    \ and network\n   power for the FTP transfers.  The larger initial window generally\n\
    \   resulted in increased throughput, slightly-increased packet drop\n   rates,\
    \ and an increase in overall network power.  With the exception\n   of one scenario,\
    \ the larger initial window resulted in an increase in\n   the drop rate of less\
    \ than 1% above the loss rate experienced when\n   using a one-segment initial\
    \ window; in this scenario, the drop rate\n   increased from 3.5% with one-segment\
    \ initial windows, to 4.5% with\n   four-segment initial windows.  The overall\
    \ conclusions were that\n   increasing the TCP initial window to three packets\
    \ (or 4380 bytes)\n   helps to improve perceived performance.\n   Morris [Mor97]\
    \ investigated larger initial windows in a highly\n   congested network with transfers\
    \ of 20K in size.  The loss rate in\n   networks where all TCP connections use\
    \ an initial window of four\n   segments is shown to be 1-2% greater than in a\
    \ network where all\n   connections use an initial window of one segment.  This\
    \ relationship\n   held in scenarios where the loss rates with one-segment initial\n\
    \   windows ranged from 1% to 11%.  In addition, in networks where\n   connections\
    \ used an initial window of four segments, TCP connections\n   spent more time\
    \ waiting for the retransmit timer (RTO) to expire to\n   resend a segment than\
    \ was spent using an initial window of one\n   segment.  The time spent waiting\
    \ for the RTO timer to expire\n   represents idle time when no useful work was\
    \ being accomplished for\n   that connection.  These results show that in a very\
    \ congested\n   environment, where each connection's share of the bottleneck\n\
    \   bandwidth is close to one segment, using a larger initial window can\n   cause\
    \ a perceptible increase in both loss rates and retransmit\n   timeouts.\n"
- title: 9.  Security Considerations
  contents:
  - "9.  Security Considerations\n   This document discusses the initial congestion\
    \ window permitted for\n   TCP connections.  Changing this value does not raise\
    \ any known new\n   security issues with TCP.\n"
- title: 10. Conclusion
  contents:
  - "10. Conclusion\n   This document specifies a small change to TCP that will likely\
    \ be\n   beneficial to short-lived TCP connections and those over links with\n\
    \   long RTTs (saving several RTTs during the initial slow-start phase).\n"
- title: 11. Acknowledgments
  contents:
  - "11. Acknowledgments\n   We would like to acknowledge Vern Paxson, Tim Shepard,\
    \ members of the\n   End-to-End-Interest Mailing List, and members of the IETF\
    \ TCP\n   Implementation Working Group for continuing discussions of these\n \
    \  issues and for feedback on this document.\n"
- title: 12. References
  contents:
  - "12. References\n   [AHO98]   Mark Allman, Chris Hayes, and Shawn Ostermann, An\n\
    \             Evaluation of TCP with Larger Initial Windows, March 1998.\n   \
    \          ACM Computer Communication Review, 28(3), July 1998.  URL\n       \
    \      \"http://roland.lerc.nasa.gov/~mallman/papers/initwin.ps\".\n   [All97a]\
    \  Mark Allman.  An Evaluation of TCP with Larger Initial\n             Windows.\
    \  40th IETF Meeting -- TCP Implementations WG.\n             December, 1997.\
    \  Washington, DC.\n   [All97b]  Mark Allman.  Improving TCP Performance Over\
    \ Satellite\n             Channels.  Master's thesis, Ohio University, June 1997.\n\
    \   [All00]   Mark Allman. A Web Server's View of the Transport Layer.\n     \
    \        ACM Computer Communication Review, 30(5), October 2000.\n   [FF96]  \
    \  Fall, K., and Floyd, S., Simulation-based Comparisons of\n             Tahoe,\
    \ Reno, and SACK TCP.  Computer Communication Review,\n             26(3), July\
    \ 1996.\n   [FF99]    Sally Floyd, Kevin Fall.  Promoting the Use of End-to-End\n\
    \             Congestion Control in the Internet.  IEEE/ACM Transactions\n   \
    \          on Networking, August 1999.  URL\n             \"http://www.icir.org/floyd/end2end-paper.html\"\
    .\n   [FJ93]    Floyd, S., and Jacobson, V., Random Early Detection\n        \
    \     gateways for Congestion Avoidance. IEEE/ACM Transactions on\n          \
    \   Networking, V.1 N.4, August 1993, p. 397-413.\n   [Flo94]   Floyd, S., TCP\
    \ and Explicit Congestion Notification.\n             Computer Communication Review,\
    \ 24(5):10-23, October 1994.\n   [Flo96]   Floyd, S., Issues of TCP with SACK.\
    \ Technical report,\n             January 1996.  Available from http://www-\n\
    \             nrg.ee.lbl.gov/floyd/.\n   [Flo97]   Floyd, S., Increasing TCP's\
    \ Initial Window.  Viewgraphs,\n             40th IETF Meeting - TCP Implementations\
    \ WG. December, 1997.\n             URL \"ftp://ftp.ee.lbl.gov/talks/sf-tcp-ietf97.ps\"\
    .\n   [KAGT98]  Hans Kruse, Mark Allman, Jim Griner, Diepchi Tran.  HTTP\n   \
    \          Page Transfer Rates Over Geo-Stationary Satellite Links.\n        \
    \     March 1998.  Proceedings of the Sixth International\n             Conference\
    \ on Telecommunication Systems.  URL\n             \"http://roland.lerc.nasa.gov/~mallman/papers/nash98.ps\"\
    .\n   [Mor97]   Robert Morris.  Private communication, 1997.  Cited for\n    \
    \         acknowledgement purposes only.\n   [Nic98]   Kathleen Nichols. Improving\
    \ Network Simulation With\n             Feedback, Proceedings of LCN 98, October\
    \ 1998. URL\n             \"http://www.computer.org/proceedings/lcn/8810/8810toc.htm\"\
    .\n   [Pos82]   Postel, J., \"Simple Mail Transfer Protocol\", STD 10, RFC\n \
    \            821, August 1982.\n   [RFC1122] Braden, R., \"Requirements for Internet\
    \ Hosts --\n             Communication Layers\", STD 3, RFC 1122, October 1989.\n\
    \   [RFC1191] Mogul, J. and S. Deering, \"Path MTU Discovery\", RFC 1191,\n  \
    \           November 1990.\n   [RFC1945] Berners-Lee, T., Fielding, R. and H.\
    \ Nielsen, \"Hypertext\n             Transfer Protocol -- HTTP/1.0\", RFC 1945,\
    \ May 1996.\n   [RFC2068] Fielding, R., Mogul, J., Gettys, J., Frystyk, H. and\
    \ T.\n             Berners-Lee, \"Hypertext Transfer Protocol -- HTTP/1.1\", RFC\n\
    \             2616, January 1997.\n   [RFC2119] Bradner, S., \"Key words for use\
    \ in RFCs to Indicate\n             Requirement Levels\", BCP 14, RFC 2119, March\
    \ 1997.\n   [RFC2309] Braden, B., Clark, D., Crowcroft, J., Davie, B., Deering,\n\
    \             S., Estrin, D., Floyd, S., Jacobson, V., Minshall, G.,\n       \
    \      Partridge, C., Peterson, L., Ramakrishnan, K., Shenker, S.,\n         \
    \    Wroclawski, J. and L.  Zhang, \"Recommendations on Queue\n             Management\
    \ and Congestion Avoidance in the Internet\", RFC\n             2309, April 1998.\n\
    \   [RFC2414] Allman, M., Floyd, S. and C. Partridge, \"Increasing TCP's\n   \
    \          Initial Window\", RFC 2414, September 1998.\n   [RFC2415] Poduri, K.\
    \ and K. Nichols, \"Simulation Studies of Increased\n             Initial TCP\
    \ Window Size\", RFC 2415, September 1998.\n   [RFC2416] Shepard, T. and C. Partridge,\
    \ \"When TCP Starts Up With Four\n             Packets Into Only Three Buffers\"\
    , RFC 2416, September 1998.\n   [RFC2581] Allman, M., Paxson, V. and W. Stevens,\
    \ \"TCP Congestion\n             Control\", RFC 2581, April 1999.\n   [RFC2821]\
    \ Klensin, J., \"Simple Mail Transfer Protocol\", RFC 2821,\n             April\
    \ 2001.\n   [RFC2988] Paxson, V. and M. Allman, \"Computing TCP's Retransmission\n\
    \             Timer\", RFC 2988, November 2000.\n   [RFC3042] Allman, M., Balakrishnan,\
    \ H. and S. Floyd, \"Enhancing TCP's\n             Loss Recovery Using Limited\
    \ Transmit\", RFC 3042, January\n             2001.\n   [RFC3168] Ramakrishnan,\
    \ K.K., Floyd, S. and D. Black, \"The Addition\n             of Explicit Congestion\
    \ Notification (ECN) to IP\", RFC 3168,\n             September 2001.\n"
- title: Appendix A - Duplicate Segments
  contents:
  - "Appendix A - Duplicate Segments\n   In the current environment (without Explicit\
    \ Congestion Notification\n   [Flo94] [RFC2481]), all TCPs use segment drops as\
    \ indications from\n   the network about the limits of available bandwidth.  We\
    \ argue here\n   that the change to a larger initial window should not result\
    \ in the\n   sender retransmitting a large number of duplicate segments that have\n\
    \   already arrived at the receiver.\n   If one segment is dropped from the initial\
    \ window, there are three\n   different ways for TCP to recover: (1) Slow-starting\
    \ from a window of\n   one segment, as is done after a retransmit timeout, or\
    \ after Fast\n   Retransmit in Tahoe TCP; (2) Fast Recovery without selective\n\
    \   acknowledgments (SACK), as is done after three duplicate ACKs in Reno\n  \
    \ TCP; and (3) Fast Recovery with SACK, for TCP where both the sender\n   and\
    \ the receiver support the SACK option [MMFR96].  In all three\n   cases, if a\
    \ single segment is dropped from the initial window, no\n   duplicate segments\
    \ (i.e., segments that have already been received at\n   the receiver) are transmitted.\
    \  Note that for a TCP sending four\n   512-byte segments in the initial window,\
    \ a single segment drop will\n   not require a retransmit timeout, but can be\
    \ recovered by using the\n   Fast Retransmit algorithm (unless the retransmit\
    \ timer expires\n   prematurely).  In addition, a single segment dropped from\
    \ an initial\n   window of three segments might be repaired using the fast retransmit\n\
    \   algorithm, depending on which segment is dropped and whether or not\n   delayed\
    \ ACKs are used.  For example, dropping the first segment of a\n   three segment\
    \ initial window will always require waiting for a\n   timeout, in the absence\
    \ of Limited Transmit [RFC3042].  However,\n   dropping the third segment will\
    \ always allow recovery via the fast\n   retransmit algorithm, as long as no ACKs\
    \ are lost.\n   Next we consider scenarios where the initial window contains two\
    \ to\n   four segments, and at least two of those segments are dropped.  If\n\
    \   all segments in the initial window are dropped, then clearly no\n   duplicate\
    \ segments are retransmitted, as the receiver has not yet\n   received any segments.\
    \  (It is still a possibility that these dropped\n   segments used scarce bandwidth\
    \ on the way to their drop point; this\n   issue was discussed in Section 5.)\n\
    \   When two segments are dropped from an initial window of three\n   segments,\
    \ the sender will only send a duplicate segment if the first\n   two of the three\
    \ segments were dropped, and the sender does not\n   receive a packet with the\
    \ SACK option acknowledging the third\n   segment.\n   When two segments are dropped\
    \ from an initial window of four\n   segments, an examination of the six possible\
    \ scenarios (which we\n   don't go through here) shows that, depending on the\
    \ position of the\n   dropped packets, in the absence of SACK the sender might\
    \ send one\n   duplicate segment.  There are no scenarios in which the sender\
    \ sends\n   two duplicate segments.\n   When three segments are dropped from an\
    \ initial window of four\n   segments, then, in the absence of SACK, it is possible\
    \ that one\n   duplicate segment will be sent, depending on the position of the\n\
    \   dropped segments.\n   The summary is that in the absence of SACK, there are\
    \ some scenarios\n   with multiple segment drops from the initial window where\
    \ one\n   duplicate segment will be transmitted.  There are no scenarios in\n\
    \   which more than one duplicate segment will be transmitted.  Our\n   conclusion\
    \ is than the number of duplicate segments transmitted as a\n   result of a larger\
    \ initial window should be small.\n"
- title: Author's Addresses
  contents:
  - "Author's Addresses\n   Mark Allman\n   BBN Technologies/NASA Glenn Research Center\n\
    \   21000 Brookpark Rd\n   MS 54-5\n   Cleveland, OH 44135\n   EMail: mallman@bbn.com\n\
    \   http://roland.lerc.nasa.gov/~mallman/\n   Sally Floyd\n   ICSI Center for\
    \ Internet Research\n   1947 Center St, Suite 600\n   Berkeley, CA 94704\n   Phone:\
    \ +1 (510) 666-2989\n   EMail: floyd@icir.org\n   http://www.icir.org/floyd/\n\
    \   Craig Partridge\n   BBN Technologies\n   10 Moulton St\n   Cambridge, MA 02138\n\
    \   EMail: craig@bbn.com\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2002).  All\
    \ Rights Reserved.\n   This document and translations of it may be copied and\
    \ furnished to\n   others, and derivative works that comment on or otherwise explain\
    \ it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
