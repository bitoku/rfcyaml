Abstract The Network Time Protocol (NTP), as described in RFC 5905, states that NTP packets should be authenticated by appending NTP data to a 128 bit key and hashing the result with MD5 to obtain a 128 bit tag.
This document deprecates MD5 based authentication, which is considered too weak, and recommends the use of AES CMAC as described in RFC 4493 as a replacement.
The Network Time Protocol [RFC5905] states that NTP packets should be authenticated by appending NTP data to a 128 bit key and hashing the result with MD5 to obtain a 128 bit tag.
This document deprecates MD5 based authentication, which is considered too weak, and recommends the use of AES CMAC [RFC4493] as a replacement.
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in BCP 14
when, and only when, they appear in all capitals, as shown here.
Deprecating the Use of MD5 RFC 5905
[RFC5905] defines how the MD5 digest algorithm described in RFC 1321
[RFC1321] can be used as a Message Authentication Code (MAC) for authenticating NTP packets.
However, as discussed in [BCK] and RFC 6151
, this is not a secure MAC and therefore MUST be deprecated.
If NTP authentication is implemented, then AES CMAC as specified in RFC 4493
[RFC4493] MUST be computed over all fields in the NTP header and any extension fields that are present in the NTP packet as described in RFC 5905
The MAC key for NTP MUST be an AES 128 key that is 128 bits in length, and the resulting MAC tag MUST be at least 128 bits in length, as stated in Section 2.4 of RFC 4493
NTP makes this transition possible as it supports algorithm agility as described in Section 2.1 of RFC 7696 [RFC7696].
The hosts that wish to use NTP authentication share a symmetric key out of band.
So they MUST implement AES CMAC and share the corresponding symmetric key.
A symmetric key is a triplet of ID, type (e.g., MD5 and AES CMAC) and the key itself.
All three have to match in order to successfully authenticate packets between two hosts.
Old implementations that don't support AES CMAC will not accept and will not send packets authenticated with such a key.
Motivation AES CMAC is recommended for the following reasons: 1.
It is an IETF specification that is supported in many open source implementations.
It is immune to nonce reuse vulnerabilities (e.g., [Joux]) because it does not use a nonce.
It has fine performance in terms of latency and throughput.
It benefits from native hardware support, for instance
, Intel's New Instruction set GUE [GUE].
Test Vectors For test vectors and their outputs, refer to Section 4 of RFC 4493
This document has no IANA actions.
Security Considerations Refer to Appendices A, B, and C of the NIST document [NIST] for a recommendation for the CMAC mode of authentication; see the Security Considerations of RFC 4493 [RFC4493] for discussion on security guarantees of AES CMAC.
