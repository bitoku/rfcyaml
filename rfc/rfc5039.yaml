- title: __initial_text__
  contents:
  - '             The Session Initiation Protocol (SIP) and Spam

    '
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard of any kind.  Distribution of\
    \ this\n   memo is unlimited.\n"
- title: Abstract
  contents:
  - "Abstract\n   Spam, defined as the transmission of bulk unsolicited messages,\
    \ has\n   plagued Internet email.  Unfortunately, spam is not limited to email.\n\
    \   It can affect any system that enables user-to-user communications.\n   The\
    \ Session Initiation Protocol (SIP) defines a system for user-to-\n   user multimedia\
    \ communications.  Therefore, it is susceptible to\n   spam, just as email is.\
    \  In this document, we analyze the problem of\n   spam in SIP.  We first identify\
    \ the ways in which the problem is the\n   same and the ways in which it is different\
    \ from email.  We then\n   examine the various possible solutions that have been\
    \ discussed for\n   email and consider their applicability to SIP.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction . . . . . . . . . . . . . . . . . . .\
    \ . . . . . .  3\n   2.  Problem Definition . . . . . . . . . . . . . . . . .\
    \ . . . . .  3\n     2.1.  Call Spam  . . . . . . . . . . . . . . . . . . . .\
    \ . . . .  4\n     2.2.  IM Spam  . . . . . . . . . . . . . . . . . . . . . .\
    \ . . .  7\n     2.3.  Presence Spam  . . . . . . . . . . . . . . . . . . . .\
    \ . .  7\n   3.  Solution Space . . . . . . . . . . . . . . . . . . . . . . .\
    \ .  8\n     3.1.  Content Filtering  . . . . . . . . . . . . . . . . . . . .\
    \  8\n     3.2.  Black Lists  . . . . . . . . . . . . . . . . . . . . . . .  9\n\
    \     3.3.  White Lists  . . . . . . . . . . . . . . . . . . . . . . .  9\n  \
    \   3.4.  Consent-Based Communications . . . . . . . . . . . . . . . 10\n    \
    \ 3.5.  Reputation Systems . . . . . . . . . . . . . . . . . . . . 12\n     3.6.\
    \  Address Obfuscation  . . . . . . . . . . . . . . . . . . . 14\n     3.7.  Limited-Use\
    \ Addresses  . . . . . . . . . . . . . . . . . . 14\n     3.8.  Turing Tests .\
    \ . . . . . . . . . . . . . . . . . . . . . . 15\n     3.9.  Computational Puzzles\
    \  . . . . . . . . . . . . . . . . . . 17\n     3.10. Payments at Risk . . . .\
    \ . . . . . . . . . . . . . . . . . 17\n     3.11. Legal Action . . . . . . .\
    \ . . . . . . . . . . . . . . . . 18\n     3.12. Circles of Trust . . . . . .\
    \ . . . . . . . . . . . . . . . 19\n     3.13. Centralized SIP Providers  . .\
    \ . . . . . . . . . . . . . . 19\n   4.  Authenticated Identity in Email  . .\
    \ . . . . . . . . . . . . . 20\n     4.1.  Sender Checks  . . . . . . . . . .\
    \ . . . . . . . . . . . . 21\n     4.2.  Signature-Based Techniques . . . . .\
    \ . . . . . . . . . . . 21\n   5.  Authenticated Identity in SIP  . . . . . .\
    \ . . . . . . . . . . 22\n   6.  Framework for Anti-Spam in SIP . . . . . . .\
    \ . . . . . . . . . 23\n   7.  Additional Work  . . . . . . . . . . . . . . .\
    \ . . . . . . . . 24\n   8.  Security Considerations  . . . . . . . . . . . .\
    \ . . . . . . . 24\n   9.  Acknowledgements . . . . . . . . . . . . . . . . .\
    \ . . . . . . 24\n   10. Informative References . . . . . . . . . . . . . . .\
    \ . . . . . 25\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   Spam, defined as the transmission of bulk unsolicited email,\
    \ has been\n   a plague on the Internet email system.  Many solutions have been\n\
    \   documented and deployed to counter the problem.  None of these\n   solutions\
    \ is ideal.  However, one thing is clear: the spam problem\n   would be much less\
    \ significant had solutions been deployed\n   ubiquitously before the problem\
    \ became widespread.\n   The Session Initiation Protocol (SIP) [2] is used for\
    \ multimedia\n   communications between users, including voice, video, instant\n\
    \   messaging, and presence.  Consequently, it can be just as much of a\n   target\
    \ for spam as email.  To deal with this, solutions need to be\n   defined and\
    \ recommendations put into place for dealing with spam as\n   soon as possible.\n\
    \   This document serves to meet those goals by defining the problem\n   space\
    \ more concretely, analyzing the applicability of solutions used\n   in the email\
    \ space, identifying protocol mechanisms that have been\n   defined for SIP that\
    \ can help the problem, and making recommendations\n   for implementors.\n"
- title: 2.  Problem Definition
  contents:
  - "2.  Problem Definition\n   The spam problem in email is well understood, and\
    \ we make no attempt\n   to further elaborate on it here.  The question, however,\
    \ is what is\n   the meaning of spam when applied to SIP?  Since SIP covers a\
    \ broad\n   range of functionality, there appear to be three related but\n   different\
    \ manifestations:\n   Call Spam:  This type of spam is defined as a bulk unsolicited\
    \ set of\n      session initiation attempts (i.e., INVITE requests), attempting\
    \ to\n      establish a voice, video, instant messaging [1], or other type of\n\
    \      communications session.  If the user should answer, the spammer\n     \
    \ proceeds to relay their message over the real-time media.  This is\n      the\
    \ classic telemarketer spam, applied to SIP.  This is often\n      called SPam\
    \ over Ip Telephony, or SPIT.\n   IM Spam:  This type of spam is similar to email.\
    \  It is defined as a\n      bulk unsolicited set of instant messages, whose content\
    \ contains\n      the message that the spammer is seeking to convey.  IM spam\
    \ is\n      most naturally sent using the SIP MESSAGE [3] request.  However,\n\
    \      any other request that causes content to automatically appear on\n    \
    \  the user's display will also suffice.  That might include INVITE\n      requests\
    \ with large Subject headers (since the Subject is\n      sometimes rendered to\
    \ the user), or INVITE requests with text or\n      HTML bodies.  This is often\
    \ called SPam over Instant Messaging, or\n      SPIM.\n   Presence Spam:  This\
    \ type of spam is similar to IM spam.  It is\n      defined as a bulk unsolicited\
    \ set of presence requests (i.e.,\n      SUBSCRIBE requests [4] for the presence\
    \ event package [6]), in an\n      attempt to get on the \"buddy list\" or \"\
    white list\" of a user in\n      order to send them IM or initiate other forms\
    \ of communications.\n      This is occasionally called SPam over Presence Protocol,\
    \ or SPPP.\n   There are many other SIP messages that a spammer might send.\n\
    \   However, most of the other ones do not result in content being\n   delivered\
    \ to a user, nor do they seek input from a user.  Rather,\n   they are answered\
    \ by automata.  OPTIONS is a good example of this.\n   There is little value for\
    \ a spammer in sending an OPTIONS request,\n   since it is answered automatically\
    \ by the User Agent Server (UAS).\n   No content is delivered to the user, and\
    \ they are not consulted.\n   In the sections below, we consider the likelihood\
    \ of these various\n   forms of SIP spam.  This is done in some cases by a rough\
    \ cost\n   analysis.  It should be noted that all of these analyses are\n   approximate,\
    \ and serve only to give a rough sense of the order of\n   magnitude of the problem.\n"
- title: 2.1.  Call Spam
  contents:
  - "2.1.  Call Spam\n   Will call spam occur?  That is an important question to answer.\n\
    \   Clearly, it does occur in the existing telephone network, in the form\n  \
    \ of telemarketer calls.  Although these calls are annoying, they do\n   not arrive\
    \ in the same kind of volume as email spam.  The difference\n   is cost; it costs\
    \ more for the spammer to make a phone call than it\n   does to send email.  This\
    \ cost manifests itself in terms of the cost\n   for systems that can perform\
    \ telemarketer call, and in cost per call.\n   Both of these costs are substantially\
    \ reduced by SIP.  A SIP call\n   spam application is easy to write.  It is just\
    \ a SIP User Agent that\n   initiates, in parallel, a large number of calls. \
    \ If a call connects,\n   the spam application generates an ACK and proceeds to\
    \ play out a\n   recorded announcement, and then it terminates the call.  This\
    \ kind of\n   application can be built entirely in software, using readily\n \
    \  available (and indeed, free) off-the-shelf software components.  It\n   can\
    \ run on a low-end PC and requires no special expertise to execute.\n   The cost\
    \ per call is also substantially reduced.  A normal\n   residential phone line\
    \ allows only one call to be placed at a time.\n   If additional lines are required,\
    \ a user must purchase more expensive\n   connectivity.  Typically, a T1 or T3\
    \ would be required for a large-\n   volume telemarketing service.  That kind\
    \ of access is very expensive\n   and well beyond the reach of an average user.\
    \  A T1 line is\n   approximately US $250 per month, and about 1.5 cents per minute\
    \ for\n   calls.  T1 lines used only for outbound calls (such as in this case)\n\
    \   are even more expensive than inbound trunks due to the reciprocal\n   termination\
    \ charges that a provider pays and receives.\n   There are two aspects to the\
    \ capacity: the call attempt rate, and the\n   number of simultaneous successful\
    \ calls that can be in progress.  A\n   T1 would allow a spammer, at most, 24\
    \ simultaneous calls, and\n   assuming about 10 seconds for each call attempt,\
    \ about 2.4 call\n   attempts per second.  At high-volume calling, the per-minute\
    \ rates\n   far exceed the flat monthly fee for the T1.  The result is a cost\
    \ of\n   250,000 microcents for each successful spam delivery, assuming 10\n \
    \  seconds of content.\n   With SIP, this cost is much reduced.  Consider a spammer\
    \ using a\n   typical broadband Internet connection that provides 500 Kbps of\n\
    \   upstream bandwidth.  Initiating a call requires just a single INVITE\n   message.\
    \  Assuming, for simplicity's sake, that this is 1 KB, a 500\n   Kbps upstream\
    \ DSL or cable modem connection will allow about 62 call\n   attempts per second.\
    \  A successful call requires enough bandwidth to\n   transmit a message to the\
    \ receiver.  Assuming a low compression codec\n   (say, G.723.1 at 5.3 Kbps),\
    \ this requires approximately 16 Kbps after\n   RTP, UDP, and IP overheads.  With\
    \ 500 Kbps upstream bandwidth, this\n   means as many as 31 simultaneous calls\
    \ can be in progress.  With 10\n   seconds of content per call, that allows for\
    \ 3.1 successful call\n   attempts per second.  If broadband access is around\
    \ $50/month, the\n   cost per successful voice spam is about 6.22 microcents each.\
    \  This\n   assumes that calls can be made 24 hours a day, 30 days a month, which\n\
    \   may or may not be the case.\n   These figures indicate that SIP call spam\
    \ is roughly four orders of\n   magnitude cheaper to send than traditional circuit-based\
    \ telemarketer\n   calls.  This low cost is certainly going to be very attractive\
    \ to\n   spammers.  Indeed, many spammers utilize computational and bandwidth\n\
    \   resources provided by others, by infecting their machines with\n   viruses\
    \ that turn them into \"zombies\" that can be used to generate\n   spam.  This\
    \ can reduce the cost of call spam to nearly zero.\n   Even ignoring the zombie\
    \ issue, this reduction in cost is even more\n   amplified for international calls.\
    \  Currently, there are few\n   telemarketing calls across international borders,\
    \ largely due to the\n   large cost of making international calls.  This is one\
    \ of the reasons\n   why the \"do not call list\", a United States national list\
    \ of numbers\n   that telemarketers cannot call -- has been effective.  The law\
    \ only\n   affects U.S. companies, but since most telemarketing calls are\n  \
    \ domestic, it has been effective.  Unfortunately (and fortunately),\n   the IP\
    \ network provides no boundaries of these sorts, and calls to\n   any SIP URI\
    \ are possible from anywhere in the world.  This will allow\n   for international\
    \ spam at a significantly reduced cost.\n   International spam is likely to be\
    \ even more annoying than national\n   spam, since it may arrive in languages\
    \ that the recipient doesn't\n   even speak.\n   These figures assume that the\
    \ primary limitation is the access\n   bandwidth and not CPU, disk, or termination\
    \ costs.  Termination costs\n   merit further discussion.  Currently, most Voice\
    \ over IP (VoIP) calls\n   terminate on the Public Switched Telephone Network\
    \ (PSTN), and this\n   termination costs the originator of the call money.  These\
    \ costs are\n   similar to the per-minute rates of a T1.  It ranges anywhere from\n\
    \   half a cent to three cents per minute, depending on volume and other\n   factors.\
    \  However, equipment costs, training, and other factors are\n   much lower for\
    \ SIP-based termination than a T1, making the cost still\n   lower than circuit\
    \ connectivity.  Furthermore, the current trend in\n   VoIP systems is to make\
    \ termination free for calls that never touch\n   the PSTN, that is, calls to\
    \ actual SIP endpoints.  Thus, as more and\n   more SIP endpoints come online,\
    \ termination costs will probably drop.\n   Until then, SIP spam can be used in\
    \ concert with termination services\n   for a lower-cost form of traditional telemarketer\
    \ calls, made to\n   normal PSTN endpoints.\n   It is useful to compare these\
    \ figures with email.  VoIP can deliver\n   approximately 3.1 successful call\
    \ attempts per second.  Email spam\n   can, of course, deliver more.  Assuming\
    \ 1 KB per email, and an\n   upstream link of 500 Kbps, a spammer can generate\
    \ 62.5 messages per\n   second.  This number goes down with larger messages of\
    \ course.\n   Interestingly, spam filters delete large numbers of these mails,\
    \ so\n   the cost per viewed message is likely to be much higher.  In that\n \
    \  sense, call spam is much more attractive, since its content is much\n   more\
    \ likely to be examined by a user if a call attempt is successful.\n   Another\
    \ part of the cost of spamming is collecting addresses.\n   Spammers have, over\
    \ time, built up immense lists of email addresses,\n   each of the form user@domain,\
    \ to which spam is directed.  SIP uses\n   the same form of addressing, making\
    \ it likely that email addresses\n   can easily be turned into valid SIP addresses.\
    \  Telephone numbers\n   also represent valid SIP addresses; in concert with a\
    \ termination\n   provider, a spammer can direct SIP calls at traditional PSTN\
    \ devices.\n   It is not clear whether email spammers have also been collecting\n\
    \   phone numbers as they perform their Web sweeps, but it is probably\n   not\
    \ hard to do so.  Furthermore, unlike email addresses, phone\n   numbers are a\
    \ finite address space and one that is fairly densely\n   packed.  As a result,\
    \ going sequentially through phone numbers is\n   likely to produce a fairly high\
    \ hit rate.  Thus, it seems like the\n   cost is relatively low for a spammer\
    \ to obtain large numbers of SIP\n   addresses to which spam can be directed.\n"
- title: 2.2.  IM Spam
  contents:
  - "2.2.  IM Spam\n   IM spam is very much like email, in terms of the costs for\
    \ deploying\n   and generating spam.  Assuming, for the sake of argument, a 1KB\n\
    \   message to be sent and 500 Kbps of upstream bandwidth, that is 62.5\n   messages\
    \ per second.  At $50/month, the result is .31 microcents per\n   message.  This\
    \ is less than voice spam, but not substantially less.\n   The cost is probably\
    \ on par with email spam.  However, IM is much\n   more intrusive than email.\
    \  In today's systems, IMs automatically pop\n   up and present themselves to\
    \ the user.  Email, of course, must be\n   deliberately selected and displayed.\
    \  However, most popular IM\n   systems employ white lists, which only allow IM\
    \ to be delivered if\n   the sender is on the white list.  Thus, whether or not\
    \ IM spam will\n   be useful seems to depend a lot on the nature of the systems\
    \ as the\n   network is opened up.  If they are ubiquitously deployed with white-\n\
    \   list access, the value of IM spam is likely to be low.\n   It is important\
    \ to point out that there are two different types of IM\n   systems: page mode\
    \ and session mode.  Page mode IM systems work much\n   like email, with each\
    \ IM being sent as a separate message.  In\n   session mode IM, there is signaling\
    \ in advance of communication to\n   establish a session, and then IMs are exchanged,\
    \ perhaps point-to-\n   point, as part of the session.  The modality impacts the\
    \ types of\n   spam techniques that can be applied.  Techniques for email can\
    \ be\n   applied identically to page mode IM, but session mode IM is more like\n\
    \   telephony, and many techniques (such as content filtering) are harder\n  \
    \ to apply.\n"
- title: 2.3.  Presence Spam
  contents:
  - "2.3.  Presence Spam\n   As defined above, presence spam is the generation of\
    \ bulk unsolicited\n   SUBSCRIBE messages.  The cost of this is within a small\
    \ constant\n   factor of IM spam so the same cost estimates can be used here.\
    \  What\n   would be the effect of such spam?  Most presence systems provide some\n\
    \   kind of consent framework.  A watcher that has not been granted\n   permission\
    \ to see the user's presence will not gain access to their\n   presence.  However,\
    \ the presence request is usually noted and\n   conveyed to the user, allowing\
    \ them to approve or deny the request.\n   In SIP, this is done using the watcherinfo\
    \ event package [7].  This\n   package allows a user to learn the identity of\
    \ the watcher, in order\n   to make an authorization decision.\n   Interestingly,\
    \ this provides a vehicle for conveying information to a\n   user.  By generating\
    \ SUBSCRIBE requests from identities such as\n   sip:please-buy-my-product@spam.example.com,\
    \ brief messages can be\n   conveyed to the user, even though the sender does\
    \ not have, and never\n   will receive, permission to access presence.  As such,\
    \ presence spam\n   can be viewed as a form of IM spam, where the amount of content\
    \ to be\n   conveyed is limited.  The limit is equal to the amount of information\n\
    \   generated by the watcher that gets conveyed to the user through the\n   permission\
    \ system.\n   This type of spam also shows up in consent frameworks used to prevent\n\
    \   call spam, as discussed in Section 3.4.\n"
- title: 3.  Solution Space
  contents:
  - "3.  Solution Space\n   In this section, we consider the various solutions that\
    \ might be\n   possible to deal with SIP spam.  We primarily consider techniques\n\
    \   that have been employed to deal with email spam.  It is important to\n   note\
    \ that the solutions documented below are not meant to be an\n   exhaustive study\
    \ of the spam solutions used for email but rather just\n   a representative set.\
    \  We also consider some solutions that appear to\n   be SIP-specific.\n"
- title: 3.1.  Content Filtering
  contents:
  - "3.1.  Content Filtering\n   The most common form of spam protection used in email\
    \ is based on\n   content filtering.  Spam filters analyze the content of the\
    \ email,\n   and look for clues that the email is spam.  Bayesian spam filters\
    \ are\n   in this category.\n   Unfortunately, this type of spam filtering, while\
    \ successful for\n   email spam, is completely useless for call spam.  There are\
    \ two\n   reasons.  First, in the case where the user answers the call, the\n\
    \   call is already established and the user is paying attention before\n   the\
    \ content is delivered.  The spam cannot be analyzed before the\n   user sees\
    \ it.  Second, if the content is stored before the user\n   accesses it (e.g.,\
    \ with voicemail), the content will be in the form\n   of recorded audio or video.\
    \  Speech and video recognition technology\n   is not likely to be good enough\
    \ to analyze the content and determine\n   whether or not it is spam.  Indeed,\
    \ if a system tried to perform\n   speech recognition on a recording in order\
    \ to perform such an\n   analysis, it would be easy for the spammers to make calls\
    \ with\n   background noises, poor grammar, and varied accents, all of which\n\
    \   will throw off recognition systems.  Video recognition is even harder\n  \
    \ to do and remains primarily an area of research.\n   IM spam, due to its similarity\
    \ to email, can be countered with\n   content analysis tools.  Indeed, the same\
    \ tools and techniques used\n   for email will directly work for IM spam.\n"
- title: 3.2.  Black Lists
  contents:
  - "3.2.  Black Lists\n   Black listing is an approach whereby the spam filter maintains\
    \ a list\n   of addresses that identify spammers.  These addresses include both\n\
    \   usernames (spammer@example.com) and entire domains (example.com).\n   Pure\
    \ blacklists are not very effective in email for two reasons.\n   First, email\
    \ addresses are easy to spoof, making it easy for the\n   sender to pretend to\
    \ be someone else.  If the sender varies the\n   addresses they send from, the\
    \ black list becomes almost completely\n   useless.  The second problem is that,\
    \ even if the sender doesn't\n   forge the From address, email addresses are in\
    \ almost limitless\n   supply.  Each domain contains an infinite supply of email\
    \ addresses,\n   and new domains can be obtained for very low cost.  Furthermore,\n\
    \   there will always be public providers that will allow users to obtain\n  \
    \ identities for almost no cost (for example, Yahoo or AOL mail\n   accounts).\
    \  The entire domain cannot be blacklisted because it\n   contains so many valid\
    \ users.  Blacklisting needs to be for\n   individual users.  Those identities\
    \ are easily changed.\n   As a result, as long as identities are easy to manufacture,\
    \ or\n   zombies are used, black lists will have limited effectiveness for\n \
    \  email.\n   Blacklists are also likely to be ineffective for SIP spam.\n   Mechanisms\
    \ for inter-domain authenticated identity for email and SIP\n   are discussed\
    \ in Section 4 and Section 5.  Assuming these mechanisms\n   are used and enabled\
    \ in inter-domain communications, it becomes\n   difficult to forge sender addresses.\
    \  However, it still remains cheap\n   to obtain a nearly infinite supply of addresses.\n"
- title: 3.3.  White Lists
  contents:
  - "3.3.  White Lists\n   White lists are the opposite of black lists.  It is a list\
    \ of valid\n   senders that a user is willing to accept email from.  Unlike black\n\
    \   lists, a spammer cannot change identities to get around the white\n   list.\
    \  White lists are susceptible to address spoofing, but a strong\n   identity\
    \ authentication mechanism can prevent that problem.  As a\n   result, the combination\
    \ of white lists and strong identity, as\n   described in Section 4.2 and Section\
    \ 5, are a good form of defense\n   against spam.\n   However, they are not a\
    \ complete solution, since they would prohibit\n   a user from ever being able\
    \ to receive email from someone who was not\n   explicitly put on the white list.\
    \  As a result, white lists require a\n   solution to the \"introduction problem\"\
    \ - how to meet someone for the\n   first time, and decide whether they should\
    \ be placed in the white\n   list.  In addition to the introduction problem, white\
    \ lists demand\n   time from the user to manage.\n   In IM systems, white lists\
    \ have proven exceptionally useful at\n   preventing spam.  This is due, in no\
    \ small part, to the fact that the\n   white list exists naturally in the form\
    \ of the buddy list.  Users\n   don't have to manage this list just for the purposes\
    \ of spam\n   prevention; it provides general utility, and assists in spam\n \
    \  prevention for free.  Many popular IM systems also have strong\n   identity\
    \ mechanisms since they do not allow communications with IM\n   systems in other\
    \ administrative domains.  The introduction problem in\n   these systems is solved\
    \ with a consent framework, described below.\n   The success of white lists in\
    \ IM systems has applicability to SIP as\n   well.  This is because SIP also provides\
    \ a buddy list concept and has\n   an advanced presence system as part of its\
    \ specifications.  The\n   introduction problem remains.  In email, techniques\
    \ like Turing tests\n   have been employed to address the introduction problem.\
    \  Turing tests\n   are considered further in the sections below.  As with email,\
    \ a\n   technique for solving the introduction problem would need to be\n   applied\
    \ in conjunction with a white list.\n   If a user's computer is compromised and\
    \ used a zombie, that computer\n   can usually be used to send spam to anyone\
    \ that has put the user on\n   their white list.\n"
- title: 3.4.  Consent-Based Communications
  contents:
  - "3.4.  Consent-Based Communications\n   A consent-based solution is used in conjunction\
    \ with white or black\n   lists.  That is, if user A is not on user B's white\
    \ or black list,\n   and user A attempts to communicate with user B, user A's\
    \ attempt is\n   initially rejected, and they are told that consent is being\n\
    \   requested.  Next time user B connects, user B is informed that user A\n  \
    \ had attempted communications.  User B can then authorize or reject\n   user\
    \ A.\n   These kinds of consent-based systems are used widely in presence and\n\
    \   IM.  Since most of today's popular IM systems only allow\n   communications\
    \ within a single administrative domain, sender\n   identities can be authenticated.\
    \  Email often uses similar consent-\n   based systems for mailing lists.  They\
    \ use a form of authentication\n   based on sending cookies to an email address\
    \ to verify that a user\n   can receive mail at that address.\n   This kind of\
    \ consent-based communications has been standardized in\n   SIP for presence,\
    \ using the watcher information event package [7] and\n   data format [8], which\
    \ allow a user to find out that someone has\n   subscribed.  Then, the XML Configuration\
    \ Access Protocol (XCAP) [10]\n   is used, along with the XML format for presence\
    \ authorization [11] to\n   provide permission for the user to communicate.\n\
    \   A consent framework has also been developed that is applicable to\n   other\
    \ forms of SIP communications [12].  However, this framework\n   focuses on authorizing\
    \ the addition of users to \"mailing lists\",\n   known as exploders in SIP terminology.\
    \  Though spammers typically use\n   such exploder functions, presumably one run\
    \ by a spammer would not\n   use this technique.  Consequently, this consent framework\
    \ is not\n   directly applicable to the spam problem.  It is, however, useful\
    \ as a\n   tool for managing a white list.  Through the PUBLISH mechanism, it\n\
    \   allows a user to upload a permission document [13] that indicates\n   that\
    \ they will only accept incoming calls from a particular sender.\n   Can a consent\
    \ framework, like the ones used for presence, help solve\n   call spam?  At first\
    \ glance, it would seem to help a lot.  However,\n   it might just change the\
    \ nature of the spam.  Instead of being\n   bothered with content, in the form\
    \ of call spam or IM spam, users are\n   bothered with consent requests.  A user's\
    \ \"communications inbox\"\n   might instead be filled with requests for communications\
    \ from a\n   multiplicity of users.  Those requests for communications don't\n\
    \   convey much useful content to the user, but they can convey some.  At\n  \
    \ the very least, they will convey the identity of the requester.  The\n   user\
    \ part of the SIP URI allows for limited free form text, and thus\n   could be\
    \ used to convey brief messages.  One can imagine receiving\n   consent requests\
    \ with identities like\n   \"sip:please-buy-my-product-at-this-website@spam.example.com\"\
    , for\n   example.  Fortunately, it is possible to apply traditional content\n\
    \   filtering systems to the header fields in the SIP messages, thus\n   reducing\
    \ these kinds of consent request attacks.\n   In order for the spammer to convey\
    \ more extensive content to the\n   user, the user must explicitly accept the\
    \ request, and only then can\n   the spammer convey the full content.  This is\
    \ unlike email spam,\n   where, even though much spam is automatically deleted,\
    \ some\n   percentage of the content does get through, and is seen by users,\n\
    \   without their explicit consent that they want to see it.  Thus, if\n   consent\
    \ is required first, the value in sending spam is reduced, and\n   perhaps it\
    \ will cease for those spam cases where consent is not given\n   to spammers.\n\
    \   As such, the real question is whether or not the consent system would\n  \
    \ make it possible for a user to give consent to non-spammers and\n   reject spammers.\
    \  Authenticated identity can help.  A user in an\n   enterprise would know to\
    \ give consent to senders in other enterprises\n   in the same industry, for example.\
    \  However, in the consumer space,\n   if sip:bob@example.com tries to communicate\
    \ with a user, how does\n   that user determine whether Bob is a spammer or a\
    \ long-lost friend\n   from high school?  There is no way based on the identity\
    \ alone.  In\n   such a case, a useful technique is to grant permission for Bob\
    \ to\n   communicate but to ensure that the permission is extremely limited.\n\
    \   In particular, Bob may be granted permission to send no more than 200\n  \
    \ words of text in a single IM, which he can use to identify himself,\n   so that\
    \ the user can determine whether or not more permissions are\n   appropriate.\
    \  It may even be possible that an automated system could\n   do some form of\
    \ content analysis on this initial short message.\n   However, this 200 words\
    \ of text may be enough for a spammer to convey\n   their message, in much the\
    \ same way they might convey it in the user\n   part of the SIP URI.\n   Thus,\
    \ it seems that a consent-based framework, along with white lists\n   and black\
    \ lists, cannot fully solve the problem for SIP, although it\n   does appear to\
    \ help.\n"
- title: 3.5.  Reputation Systems
  contents:
  - "3.5.  Reputation Systems\n   A reputation system is also used in conjunction\
    \ with white or black\n   lists.  Assume that user A is not on user B's white\
    \ list, and A\n   attempts to contact user B.  If a consent-based system is used,\
    \ B is\n   prompted to consent to communications from A, and along with the\n\
    \   consent, a reputation score might be displayed in order to help B\n   decide\
    \ whether or not they should accept communications from A.\n   Traditionally,\
    \ reputation systems are implemented in highly\n   centralized messaging architectures;\
    \ the most widespread reputation\n   systems in messaging today have been deployed\
    \ by monolithic instant\n   messaging providers (though many Web sites with a\
    \ high degree of\n   interactivity employ very similar concepts of reputation).\n\
    \   Reputation is calculated based on user feedback.  For example, a\n   button\
    \ on the user interface of the messaging client might empower\n   users to inform\
    \ the system that a particular user is abusive.  Of\n   course, the input of any\
    \ single user has to be insufficient to ruin\n   one's reputation, but consistent\
    \ negative feedback would give the\n   abusive user a negative reputation score.\n\
    \   Reputation systems have been successful in systems where\n   centralization\
    \ of resources (user identities, authentication, etc.)\n   and monolithic control\
    \ dominate.  Examples of these include the large\n   instant messaging providers\
    \ that run IM systems that do not exchange\n   messages with other administrative\
    \ domains.  That control, first of\n   all, provides a relatively strong identity\
    \ assertion for users (since\n   all users trust a common provider, and the common\
    \ provider is the\n   arbiter of authentication and identity).  Secondly, it provides\
    \ a\n   single place where reputation can be managed.\n   Reputation systems based\
    \ on negative reputation scores suffer from\n   many of the same problems as black\
    \ lists, since effectively the\n   consequence of having a negative reputation\
    \ is that you are\n   blacklisted.  If identities are very easy to acquire, a\
    \ user with a\n   negative reputation will simply acquire a new identity.  Moreover,\n\
    \   negative reputation is generated by tattling, which requires users to\n  \
    \ be annoyed enough to click the warning button -- a process that can\n   be abused.\
    \  In some reputation systems, \"reputation mafias\"\n   consisting of large numbers\
    \ of users routinely bully or extort\n   victims by threatening collectively to\
    \ give victims a negative\n   reputation.\n   Reputation systems based on positive\
    \ reputation, where users praise\n   each other for being good, rather than tattling\
    \ on each other for\n   being bad, have some similar drawbacks.  Collectives of\
    \ spammers, or\n   just one spammer who acquires a large number identities, could\
    \ praise\n   one another in order to create an artificial positive reputation.\n\
    \   Users similarly have to overcome the inertia required to press the\n   \"\
    praise\" button.  Unlike negative reputation systems, however,\n   positive reputation\
    \ is not circumvented when users acquire a new\n   identity, since basing authorization\
    \ decisions on positive reputation\n   is essentially a form of white listing.\n\
    \   So, while positive reputation systems are superior to negative\n   reputation\
    \ systems, they are far from perfect.  Intriguingly, though,\n   combining presence-based\
    \ systems with reputation systems leads to an\n   interesting fusion.  The \"\
    buddy-list\" concept of presence is, in\n   effect, a white list - and one can\
    \ infer that the users on one's\n   buddy list are people whom you are \"praising\"\
    .  This eliminates the\n   problem of user inertia in the use of the \"praise\"\
    \ button, and\n   automates the initial establishment of reputation.\n   And of\
    \ course, your buddies in turn have buddies.  Collectively, you\n   and your buddies\
    \ (and their buddies, and so on) constitute a social\n   network of reputation.\
    \  If there were a way to leverage this social\n   network, it would eliminate\
    \ the need for centralization of the\n   reputation system.  Your perception of\
    \ a particular user's reputation\n   might be dependent on your relationship to\
    \ them in the social\n   network: are they one buddy removed (strong reputation),\
    \ four buddies\n   removed (weaker reputation), three buddies removed but connected\
    \ to\n   you through several of your buddies, etc.  This web of trust\n   furthermore\
    \ would have the very desirable property that circles of\n   spammers adding one\
    \ another to their own buddy lists would not affect\n   your perception of their\
    \ reputation unless their circle linked to\n   your own social network.\n   If\
    \ a users machine is compromised and turned into a zombie, this\n   allows SPAM\
    \ to be sent and may impact their reputation in a negative\n   way.  Once their\
    \ reputation decreases, it becomes extremely difficult\n   to reestablish a positive\
    \ reputation.\n"
- title: 3.6.  Address Obfuscation
  contents:
  - "3.6.  Address Obfuscation\n   Spammers build up their spam lists by gathering\
    \ email addresses from\n   Web sites and other public sources of information.\
    \  One way to\n   minimize spam is to make your address difficult or impossible\
    \ to\n   gather.  Spam bots typically look for text in pages of the form\n   \"\
    user@domain\", and assume that anything of that form is an email\n   address.\
    \  To hide from such spam bots, many Web sites have recently\n   begun placing\
    \ email addresses in an obfuscated form, usable to humans\n   but difficult for\
    \ an automata to read as an email address.  Examples\n   include forms such as,\
    \ \"user at example dot com\" or \"j d r o s e n a\n   t e x a m p l e d o t c\
    \ o m\".\n   These techniques are equally applicable to prevention of SIP spam,\n\
    \   and are likely to be as equally effective or ineffective in its\n   prevention.\n\
    \   It is worth mentioning that the source of addresses need not be a Web\n  \
    \ site - any publicly accessible service containing addresses will\n   suffice.\
    \  As a result, ENUM [9] has been cited as a potential gold\n   mine for spammers.\
    \  It would allow a spammer to collect SIP and other\n   URIs by traversing the\
    \ tree in e164.arpa and mining it for data.\n   This problem is mitigated in part\
    \ if only number prefixes, as opposed\n   to actual numbers, appear in the DNS.\
    \  Even in that case, however, it\n   provides a technique for a spammer to learn\
    \ which phone numbers are\n   reachable through cheaper direct SIP connectivity.\n"
- title: 3.7.  Limited-Use Addresses
  contents:
  - "3.7.  Limited-Use Addresses\n   A related technique to address obfuscation is\
    \ limited-use addresses.\n   In this technique, a user has a large number of email\
    \ addresses at\n   their disposal, each of which has constraints on its applicability.\n\
    \   A limited-use address can be time-bound, so that it expires after a\n   fixed\
    \ period.  Or, a different email address can be given to each\n   correspondent.\
    \  When spam arrives from that correspondent, the\n   limited-use address they\
    \ were given is terminated.  In another\n   variation, the same limited-use address\
    \ is given to multiple users\n   that share some property; for example, all work\
    \ colleagues, all\n   coworkers from different companies, all retailers, and so\
    \ on.  Should\n   spam begin arriving on one of the addresses, it is invalidated,\n\
    \   preventing communications from anyone else that received the limited\n   use\
    \ address.\n   This technique is equally applicable to SIP.  One of the drawbacks\
    \ of\n   the approach is that it can make it hard for people to reach you; if\n\
    \   an email address you hand out to a friend becomes spammed, changing\n   it\
    \ requires you to inform your friend of the new address.  SIP can\n   help solve\
    \ this problem in part, by making use of presence [6].\n   Instead of handing\
    \ out your email address to your friends, you would\n   hand out your presence\
    \ URI.  When a friend wants to send you an\n   email, they subscribe to your presence\
    \ (indeed, they are likely to be\n   continuously subscribed from a buddy list\
    \ application).  The presence\n   data can include an email address where you\
    \ can be reached.  This\n   email address can be obfuscated and be of single use,\
    \ different for\n   each buddy who requests your presence.  They can also be constantly\n\
    \   changed, as these changes are pushed directly to your buddies.  In a\n   sense,\
    \ the buddy list represents an automatically updated address\n   book, and would\
    \ therefore eliminate the problem.\n   Another approach is to give a different\
    \ address to each and every\n   correspondent, so that it is never necessary to\
    \ tell a \"good\" user\n   that an address needs to be changed.  This is an extreme\
    \ form of\n   limited-use addresses, which can be called a single-use address.\n\
    \   Mechanisms are available in SIP for the generation of [16] an\n   infinite\
    \ supply of single use addresses.  However, the hard part\n   remains a useful\
    \ mechanism for distribution and management of those\n   addresses.\n"
- title: 3.8.  Turing Tests
  contents:
  - "3.8.  Turing Tests\n   In email, Turing tests are mechanisms whereby the sender\
    \ of the\n   message is given some kind of puzzle or challenge, which only a human\n\
    \   can answer (since Turing tests rely on video or audio puzzles, they\n   sometimes\
    \ cannot be solved by individuals with handicaps).  These\n   tests are also known\
    \ as captchas (Completely Automated Public Turing\n   test to tell Computers and\
    \ Humans Apart).  If the puzzle is answered\n   correctly, the sender is placed\
    \ on the user's white list.  These\n   puzzles frequently take the form of recognizing\
    \ a word or sequence of\n   numbers in an image with a lot of background noise.\
    \  The tests need\n   to be designed such that automata cannot easily perform\
    \ the image\n   recognition needed to extract the word or number sequence, but\
    \ a\n   human user usually can.  Designing such tests is not easy, since\n   ongoing\
    \ advances in image processing and artificial intelligence\n   continually raise\
    \ the bar.  Consequently, the effectiveness of\n   captchas are tied to whether\
    \ spammers can come up with or obtain\n   algorithms for automatically solving\
    \ them.\n   Like many of the other email techniques, Turing tests are dependent\n\
    \   on sender identity, which cannot easily be authenticated in email.\n   Turing\
    \ tests can be used to prevent IM spam in much the same way they\n   can be used\
    \ to prevent email spam.\n   Turing tests can be applied to call spam as well,\
    \ although not\n   directly, because call spam does not usually involve the transfer\
    \ of\n   images and other content that can be used to verify that a human is\n\
    \   on the other end.  If most of the calls are voice, the technique\n   needs\
    \ to be adapted to voice.  This is not that difficult to do.\n   Here is how it\
    \ could be done.  User A calls user B and is not on user\n   B's white or black\
    \ list.  User A is transferred to an Interactive\n   Voice Response (IVR) system.\
    \  The IVR system tells the user that they\n   are going to hear a series of numbers\
    \ (say 5 of them), and that they\n   have to enter those numbers on the keypad.\
    \  The IVR system reads out\n   the numbers while background music is playing,\
    \ making it difficult\n   for an automated speech recognition system to be applied\
    \ to the\n   media.  The user then enters the numbers on their keypad.  If they\n\
    \   are entered correctly, the user is added to the white list.\n   This kind\
    \ of voice-based Turing test is easily extended to a variety\n   of media, such\
    \ as video and text, and user interfaces by making use\n   of the SIP application\
    \ interaction framework [14].  This framework\n   allows client devices to interact\
    \ with applications in the network,\n   where such interaction is done with stimulus\
    \ signaling, including\n   keypads (supported with the Keypad Markup Language\
    \ [15]), but also\n   including Web browsers, voice recognition, and so on.  The\
    \ framework\n   allows the application to determine the media capabilities of\
    \ the\n   device (or user, in cases where they are handicapped) and interact\n\
    \   with them appropriately.\n   In the case of voice, the Turing test would need\
    \ to be made to run in\n   the language of the caller.  This is possible in SIP,\
    \ using the\n   Accept-Language header field, though this is not widely used at\
    \ the\n   moment, and meant for languages of SIP message components, not the\n\
    \   media streams.\n   The primary problem with the voice Turing test is the same\
    \ one that\n   email tests have: instead of having an automata process the test,\
    \ a\n   spammer can pay cheap workers to take the tests.  Assuming cheap\n   labor\
    \ in a poor country can be obtained for about 60 cents per hour,\n   and assuming\
    \ a Turing test of a 30-second duration, this is about\n   0.50 cents per test\
    \ and thus 0.50 cents per message to send an IM\n   spam.  Lower labor rates would\
    \ reduce this further; the number quoted\n   here is based on real online bids\
    \ in September of 2006 made for\n   actual work of this type.\n   As an alternative\
    \ to paying cheap workers to take the tests, the\n   tests can be taken by human\
    \ users that are tricked into completing\n   the tests in order to gain access\
    \ to what they believe is a\n   legitimate resource.  This was done by a spambot\
    \ that posted the\n   tests on a pornography site, and required users to complete\
    \ the tests\n   in order to gain access to content.\n   Due to these limitations,\
    \ Turing tests may never completely solve the\n   problem.\n"
- title: 3.9.  Computational Puzzles
  contents:
  - "3.9.  Computational Puzzles\n   This technique is similar to Turing tests.  When\
    \ user A tries to\n   communicate with user B, user B asks user A to perform a\
    \ computation\n   and pass the result back.  This computation has to be something\
    \ a\n   human user cannot perform and something expensive enough to increase\n\
    \   user A's cost to communicate.  This cost increase has to be high\n   enough\
    \ to make it prohibitively expensive for spammers but\n   inconsequential for\
    \ legitimate users.\n   One of the problems with the technique is that there is\
    \ wide\n   variation in the computational power of the various clients that\n\
    \   might legitimately communicate.  The CPU speed on a low-end cell\n   phone\
    \ is around 50 MHz, while a high-end PC approaches 5 GHz.  This\n   represents\
    \ almost two orders of magnitude difference.  Thus, if the\n   test is designed\
    \ to be reasonable for a cell phone to perform, it is\n   two orders of magnitude\
    \ cheaper to perform for a spammer on a high-\n   end machine.  Recent research\
    \ has focused on defining computational\n   puzzles that challenge the CPU/memory\
    \ bandwidth, as opposed to just\n   the CPU [26].  It seems that there is less\
    \ variety in the CPU/memory\n   bandwidth across devices, roughly a single order\
    \ of magnitude.\n   Recent work [28] suggests that, due to the ability of spammers\
    \ to use\n   virus-infected machines (also known as zombies) to generate the spam,\n\
    \   the amount of computational power available to the spammers is\n   substantial,\
    \ and it may be impossible to have them compute a puzzle\n   that is sufficiently\
    \ hard that will not also block normal emails.  If\n   combined with white listing,\
    \ computational puzzles would only be\n   utilized for new communications partners.\
    \  Of course, if the partner\n   on the white list is a zombie, spam will come\
    \ from that source.  The\n   frequency of communications with new partners is\
    \ arguably higher for\n   email than for multimedia, and thus the computational\
    \ puzzle\n   techniques may be more effective for SIP than for email in dealing\n\
    \   with the introduction problem.\n   These techniques are an active area of\
    \ research right now, and any\n   results for email are likely to be usable for\
    \ SIP.\n"
- title: 3.10.  Payments at Risk
  contents:
  - "3.10.  Payments at Risk\n   This approach has been proposed for email [27]. \
    \ When user A sends\n   email to user B, user A deposits a small amount of money\
    \ (say, one\n   dollar) into user B's account.  If user B decides that the message\
    \ is\n   not spam, user B refunds this money back to user A.  If the message\n\
    \   is spam, user B keeps the money.  This technique requires two\n   transactions\
    \ to complete: a transfer from A to B, and a transfer from\n   B back to A. The\
    \ first transfer has to occur before the message can\n   be received in order\
    \ to avoid reuse of \"pending payments\" across\n   several messages, which would\
    \ eliminate the utility of the solution.\n   The second one then needs to occur\
    \ when the message is found not to\n   be spam.\n   This technique appears just\
    \ as applicable to call spam and IM spam as\n   it is to email spam.  Like many\
    \ of the other techniques, this\n   exchange would only happen the first time\
    \ you talk to people.  Its\n   proper operation therefore requires a good authenticated\
    \ identity\n   infrastructure.\n   This technique has the potential to make it\
    \ arbitrarily expensive to\n   send spam of any sort.  However, it relies on cheap\
    \ micro-payment\n   techniques on the Internet.  Traditional costs for Internet\
    \ payments\n   are around 25 cents per transaction, which would probably be\n\
    \   prohibitive.  However, recent providers have been willing to charge\n   15%\
    \ of the transaction for small transactions, as small as one cent.\n   This cost\
    \ would have to be shouldered by users of the system.  The\n   cost that would\
    \ need to be shouldered per user is equal to the number\n   of messages from unknown\
    \ senders (that is, senders not on the white\n   list) that are received.  For\
    \ a busy user, assume about 10 new\n   senders per day.  If the deposit is 5 cents,\
    \ the transaction provider\n   would take 0.75 cents and deliver 4.25 cents. \
    \ If the sender is\n   allowed, the recipient returns 4.25 cents, the provider\
    \ takes 0.64\n   cents, and returns 3.6 cents.  This costs the sender 0.65 cents\
    \ on\n   each transaction, if it was legitimate.  If there are ten new\n   recipients\
    \ per day, that is US $1.95 per month, which is relatively\n   inexpensive.\n\
    \   Assuming a micro-payment infrastructure exists, another problem with\n   payment-at-risk\
    \ is that it loses effectiveness when there are strong\n   inequities in the value\
    \ of currency between sender and recipient.\n   For example, a poor person in\
    \ a Third World country might keep the\n   money in each mail message, regardless\
    \ of whether it is spam.\n   Similarly, a poor person might not be willing to\
    \ include money in an\n   email, even if legitimate, for fear that the recipient\
    \ might keep it.\n   If the amount of money is lowered to help handle these problems,\
    \ it\n   might become sufficiently small that spammers can just afford to\n  \
    \ spend it.\n"
- title: 3.11.  Legal Action
  contents:
  - "3.11.  Legal Action\n   In this solution, countries pass laws that prohibit spam.\
    \  These laws\n   could apply to IM or call spam just as easily as they could\
    \ apply to\n   email spam.  There is a lot of debate about whether these laws\
    \ would\n   really be effective in preventing spam.\n   As a recent example in\
    \ the US, \"do not call\" lists seem to be\n   effective.  However, due to the\
    \ current cost of long-distance phone\n   calls, the telemarketing is coming from\
    \ companies within the US.  As\n   such, calls from such telemarketers can be\
    \ traced.  If a telemarketer\n   violates the \"do not call\" list, the trace\
    \ allows legal action to be\n   taken against them.  A similar \"do not irritate\"\
    \ list for VoIP or for\n   email would be less likely to work because the spam\
    \ is likely to come\n   from international sources.  This problem could be obviated\
    \ if there\n   was a strong way to identify the sender's legal entity, and then\n\
    \   determine whether it was in a jurisdiction where it was practical to\n   take\
    \ legal action against them.  If the spammer is not in such a\n   jurisdiction,\
    \ the SIP spam could be rejected.\n   There are also schemes that cause laws other\
    \ than anti-spam laws to\n   be broken if spam is sent.  This does not inherently\
    \ reduce SPAM, but\n   it allows more legal options to be brought to bear against\
    \ the\n   spammer.  For example, Habeas <http://www.habeas.com> inserts\n   material\
    \ in the header that, if it was inserted by a spammer without\n   an appropriate\
    \ license, would allegedly causes the spammer to violate\n   US copyright and\
    \ trademark laws, possibly reciprocal laws, and\n   similar laws in many countries.\n"
- title: 3.12.  Circles of Trust
  contents:
  - "3.12.  Circles of Trust\n   In this model, a group of domains (e.g., a set of\
    \ enterprises) all\n   get together.  They agree to exchange SIP calls amongst\
    \ each other,\n   and they also agree to introduce a fine should any one of them\
    \ be\n   caught spamming.  Each company would then enact measures to terminate\n\
    \   employees who spam from their accounts.\n   This technique relies on secure\
    \ inter-domain authentication - that\n   is, domain B can know that messages are\
    \ received from domain A.  In\n   SIP, this is readily provided by usage of the\
    \ mutually authenticated\n   Transport Level Security (TLS)[22] between providers\
    \ or SIP Identity\n   [17].\n   This kind of technique works well for small domains\
    \ or small sets of\n   providers, where these policies can be easily enforced.\
    \  However, it\n   is unclear how well it scales up.  Could a very large domain\
    \ truly\n   prevent its users from spamming?  At what point would the network\
    \ be\n   large enough that it would be worthwhile to send spam and just pay\n\
    \   the fine?  How would the pricing be structured to allow both small\n   and\
    \ large domains alike to participate?\n"
- title: 3.13.  Centralized SIP Providers
  contents:
  - "3.13.  Centralized SIP Providers\n   This technique is a variation on the circles\
    \ of trust described in\n   Section 3.12.  A small number of providers get established\
    \ as \"inter-\n   domain SIP providers\".  These providers act as a SIP-equivalent\
    \ to\n   the interexchange carriers in the PSTN.  Every enterprise, consumer\n\
    \   SIP provider, or other SIP network (call these the local SIP\n   providers)\
    \ connects to one of these inter-domain providers.  The\n   local SIP providers\
    \ only accept SIP messages from their chosen inter-\n   domain provider.  The\
    \ inter-domain provider charges the local\n   provider, per SIP message, for the\
    \ delivery of SIP messages to other\n   local providers.  The local provider can\
    \ choose to pass on this cost\n   to its own customers if it so chooses.\n   The\
    \ inter-domain SIP providers then form bi-lateral agreements with\n   each other,\
    \ exchanging SIP messages according to strict contracts.\n   These contracts require\
    \ that each of the inter-domain providers be\n   responsible for charging a minimum\
    \ per-message fee to their own\n   customers.  Extensive auditing procedures can\
    \ be put into place to\n   verify this.  Besides such contracts, there may or\
    \ may not be a flow\n   of funds between the inter-domain providers.\n   The result\
    \ of such a system is that a fixed cost can be associated\n   with sending a SIP\
    \ message, and that this cost does not require\n   micro-payments to be exchanged\
    \ between local providers, as it does in\n   Section 3.10.  Since all of the relationships\
    \ are pre-established and\n   negotiated, cheaper techniques for monetary transactions\
    \ (such as\n   monthly post-paid transactions) can be used.\n   This technique\
    \ can be made to work in SIP, whereas it cannot in\n   email, because inter-domain\
    \ SIP connectivity has not yet been broadly\n   established.  In email, there\
    \ already exists a no-cost form of inter-\n   domain connectivity that cannot\
    \ be eliminated without destroying the\n   utility of email.  If, however, SIP\
    \ inter-domain communications get\n   established from the start using this structure,\
    \ there is a path to\n   deployment.\n   This structure is more or less the same\
    \ as the one in place for the\n   PSTN today, and since there is relatively little\
    \ spam on the PSTN\n   (compared to email!), there is some proof that this kind\
    \ of\n   arrangement can work.  However, centralized architectures as these\n\
    \   are deliberately eschewed because they put back into SIP much of the\n   complexity\
    \ and monopolistic structures that the protocol aims to\n   eliminate.\n"
- title: 4.  Authenticated Identity in Email
  contents:
  - "4.  Authenticated Identity in Email\n   Though not a form of anti-spam in and\
    \ of itself, authenticated or\n   verifiable identities are a key part of making\
    \ other anti-spam\n   mechanisms work.  Many of the techniques described above\
    \ are most\n   effective when combined with a white or black list, which itself\n\
    \   requires a strong form of identity.\n   In email, two types of authenticated\
    \ identity have been developed -\n   sender checks and signature-based solutions.\n"
- title: 4.1.  Sender Checks
  contents:
  - "4.1.  Sender Checks\n   In email, DNS resource records have been defined that\
    \ will allow a\n   domain that receives a message to verify that the sender is\
    \ a valid\n   Message Transfer Agent (MTA) for the sending domain [18] [19] [20]\n\
    \   [21].  They don't prevent spam by themselves, but may help in\n   preventing\
    \ spoofed emails.  As has been mentioned several times, a\n   form of strong authenticated\
    \ identity is key in making many other\n   anti-spam techniques work.\n   Are\
    \ these techniques useful for SIP?  They can be used for SIP but\n   are not necessary.\
    \  In SIP, TLS with mutual authentication can be\n   used inter-domain.  A provider\
    \ receiving a message can then reject\n   any message coming from a domain that\
    \ does not match the asserted\n   identity of the sender of the message.  Such\
    \ a policy only works in\n   the \"trapezoid\" model of SIP, whereby there are\
    \ only two domains in\n   any call - the sending domain, which is where the originator\
    \ resides,\n   and the receiving domain.  These techniques are discussed in Section\n\
    \   26.3.2.2 of RFC 3261 [2].  In forwarding situations, the assumption\n   no\
    \ longer holds and these techniques no longer work.  However, the\n   authenticated\
    \ identity mechanism for SIP, discussed in Section 5,\n   does work in more complex\
    \ network configurations and provides fairly\n   strong assertion of identity.\n"
- title: 4.2.  Signature-Based Techniques
  contents:
  - "4.2.  Signature-Based Techniques\n   Domain Keys Identified Mail (DKIM) Signatures\
    \ [23] (and several non-\n   standard techniques that preceded it) provide strong\
    \ identity\n   assertions by allowing the sending domain to sign an email, and\
    \ then\n   providing mechanisms by which the receiving MTA or Mail User Agent\n\
    \   (MUA) can validate the signature.\n   Unfortunately, when used with blacklists,\
    \ this kind of authenticated\n   identity is only as useful as the fraction of\
    \ the emails that utilize\n   it.  This is partly true for white lists as well;\
    \ if any\n   unauthenticated email is accepted for an address on a white list,\
    \ a\n   spammer can spoof that address.  However, a white list can be\n   effective\
    \ with limited deployment of DKIM if all the people on the\n   white list are\
    \ those whose domains are utilizing the mechanism, and\n   the users on that white\
    \ list aren't zombies.\n   This kind of identity mechanism is also applicable\
    \ to SIP, and is in\n   fact, exactly what is defined by SIP's authenticated identity\n\
    \   mechanism [17].\n   Other signature-based approaches for email include S/MIME[24]\
    \ and\n   OpenPGP[25].\n"
- title: 5.  Authenticated Identity in SIP
  contents:
  - "5.  Authenticated Identity in SIP\n   One of the key parts of many of the solutions\
    \ described above is the\n   ability to securely identify the sender of a SIP\
    \ message.  SIP\n   provides a secure solution for this problem, called SIP Identity\n\
    \   [17], and it is important to discuss it here.\n   The solution starts by having\
    \ each domain authenticate its own users.\n   SIP provides HTTP digest authentication\
    \ as part of the core SIP\n   specification, and all clients and servers are required\
    \ to support\n   it.  Indeed, digest is widely deployed for SIP.  However, digest\n\
    \   alone has many known vulnerabilities, most notably offline dictionary\n  \
    \ attacks.  These vulnerabilities are all resolved by having each\n   client maintain\
    \ a persistent TLS connection to the server.  The\n   client verifies the server\
    \ identity using TLS, and then authenticates\n   itself to the server using a\
    \ digest exchange over TLS.  This\n   technique, which is also documented in RFC\
    \ 3261, is very secure but\n   not widely deployed yet.  In the long term, this\
    \ approach will be\n   necessary for the security properties needed to prevent\
    \ SIP spam.\n   Once a domain has authenticated the identity of a user, when it\n\
    \   relays a message from that user to another domain, the sending domain\n  \
    \ can assert the identity of the sender, and include a signature to\n   validate\
    \ that assertion.  This is done using the SIP identity\n   mechanism [17].\n \
    \  A weaker form of identity assertion is possible using the P-Asserted-\n   Identity\
    \ header field [5], but this technique requires mutual trust\n   among all domains.\
    \  Unfortunately, this becomes exponentially harder\n   to provide as the number\
    \ of interconnected domains grows.  As that\n   happens, the value of the identity\
    \ assertion becomes equal to the\n   trustworthiness of the least trustworthy\
    \ domain.  Since spam is a\n   consequence of the receiving domain not being able\
    \ to trust the\n   sending domains to disallow the hosts in the sending to send\
    \ spam,\n   the P-Asserted-Identity technique becomes ineffective at exactly the\n\
    \   same levels of interconnectedness that introduce spam.\n   Consider the following\
    \ example to help illustrate this fact.  A\n   malicious domain -- let us call\
    \ them spam.example.com, would like to\n   send SIP INVITE requests with false\
    \ P-Asserted-Identity, indicating\n   users outside of its own domain. spam.example.com\
    \ finds a regional\n   SIP provider in a small country who, due to its small size\
    \ and\n   disinterest in spam, accepts any P-Asserted-Identity from its\n   customers\
    \ without verification.  This provider, in turn, connects to\n   a larger, interconnect\
    \ provider.  They do ask each of their customers\n   to verify P-Asserted-Identity\
    \ but have no easy way of enforcing it.\n   This provider, in turn, connects to\
    \ everyone else.  As a consequence,\n   the spam.example.com domain is able to\
    \ inject calls with a spoofed\n   caller ID.  This request can be directed to\
    \ any recipient reachable\n   through the network (presumably everyone due to\
    \ the large size of the\n   root provider).  There is no way for a recipient to\
    \ know that this\n   particular P-Asserted-Identity came from this bad spam.example.com\n\
    \   domain.  As the example shows, even though the central provider's\n   policy\
    \ is good, the overall effectiveness of P-Asserted-Identity is\n   still only\
    \ as good as the policies of the weakest link in the chain.\n   SIP also defines\
    \ the usage of TLS between domains, using mutual\n   authentication, as part of\
    \ the base specification.  This technique\n   provides a way for one domain to\
    \ securely determine that it is\n   talking to a server that is a valid representative\
    \ of another domain.\n"
- title: 6.  Framework for Anti-Spam in SIP
  contents:
  - "6.  Framework for Anti-Spam in SIP\n   Unfortunately, there is no magic bullet\
    \ for preventing SIP spam, just\n   as there is none for email spam.  However,\
    \ the combination of several\n   techniques can provide a framework for dealing\
    \ with spam in SIP.\n   This section provides recommendations for network designers\
    \ in order\n   to help mitigate the risk of spam.\n   There are four core recommendations\
    \ that can be made:\n   Strong Identity:  Firstly, in almost all of the solutions\
    \ discussed\n      above, there is a dependency on the ability to authenticate\
    \ the\n      sender of a SIP message inter-domain.  Consent, reputation\n    \
    \  systems, computational puzzles, and payments at risk, amongst\n      others,\
    \ all work best when applied only to new requests, and\n      successful completion\
    \ of an introduction results in the placement\n      of a user on a white list.\
    \  However, usage of white lists depends\n      on strong identity assertions.\
    \  Consequently, any network that\n      interconnects with others should make\
    \ use of strong SIP identity\n      as described in RFC 4474.  P-Asserted-Identity\
    \ is not strong\n      enough.\n   White Lists:  Secondly, with a strong identity\
    \ system in place,\n      networks are recommended to make use of white lists.\
    \  These are\n      ideally built off existing buddy lists, if present.  If not,\n\
    \      separate white lists can be managed for spam.  Placement on these\n   \
    \   lists can be manual or based on the successful completion of one\n      or\
    \ more introduction mechanisms.\n   Solve the Introduction Problem:  This in turn\
    \ leads to the final\n      recommendation to be made.  Network designers should\
    \ make use of\n      one or more mechanisms meant to solve the introduction problem.\n\
    \      Indeed, it is possible to use more than one and combine the\n      results\
    \ through some kind of weight.  A user that successfully\n      completes the\
    \ introduction mechanism can be automatically added to\n      the white list.\
    \  Of course, that can only be done usefully if\n      their identity is verified\
    \ by SIP Identity.  The set of mechanisms\n      for solving the introduction\
    \ problem, as described in this\n      document, are based on some (but not all)\
    \ of the techniques known\n      and used at the time of writing.  Providers of\
    \ SIP services should\n      keep tabs on solutions in email as they evolve, and\
    \ utilize the\n      best of what those techniques have to offer.\n   Don't Wait\
    \ Until It's Too Late:  But perhaps most importantly,\n      providers should\
    \ not ignore the spam problem until it happens!  As\n      soon as a provider\
    \ inter-connects with other providers, or allows\n      SIP messages from the\
    \ open Internet, that provider must consider\n      how they will deal with spam.\n"
- title: 7.  Additional Work
  contents:
  - "7.  Additional Work\n   Though the above framework serves as a good foundation\
    \ on which to\n   deal with spam in SIP, there are gaps, some of which can be\
    \ addressed\n   by additional work that has yet to be undertaken.\n   One of the\
    \ difficulties with the strong identity techniques is that a\n   receiver of a\
    \ SIP request without an authenticated identity cannot\n   know whether the request\
    \ lacked such an identity because the\n   originating domain didn't support it,\
    \ or because a man-in-the-middle\n   removed it.  As a result, transition mechanisms\
    \ should be put in\n   place to allow these to be differentiated.  Without it,\
    \ the value of\n   the identity mechanism is much reduced.\n"
- title: 8.  Security Considerations
  contents:
  - "8.  Security Considerations\n   This document is entirely devoted to issues relating\
    \ to spam in SIP\n   and references a variety of security mechanisms in support\
    \ of that\n   goal.\n"
- title: 9.  Acknowledgements
  contents:
  - "9.  Acknowledgements\n   The authors would like to thank Rohan Mahy for providing\
    \ information\n   on Habeas, Baruch Sterman for providing costs on VoIP termination\n\
    \   services, and Gonzalo Camarillo and Vijay Gurbani for their reviews.\n   Useful\
    \ comments and feedback were provided by Nils Ohlmeir, Tony\n   Finch, Randy Gellens,\
    \ Lisa Dusseault, Sam Hartman, Chris Newman, Tim\n   Polk, Donald Eastlake, and\
    \ Yakov Shafranovich.  Jon Peterson wrote\n   some of the text in this document\
    \ and has contributed to the work as\n   it has moved along.\n"
- title: 10.  Informative References
  contents:
  - "10.  Informative References\n   [1]   Campbell, B., Mahy, R., and C. Jennings,\
    \ \"The Message Session\n         Relay Protocol (MSRP)\", RFC 4975, September\
    \ 2007.\n   [2]   Rosenberg, J., Schulzrinne, H., Camarillo, G., Johnston, A.,\n\
    \         Peterson, J., Sparks, R., Handley, M., and E. Schooler, \"SIP:\n   \
    \      Session Initiation Protocol\", RFC 3261, June 2002.\n   [3]   Campbell,\
    \ B., Rosenberg, J., Schulzrinne, H., Huitema, C., and\n         D. Gurle, \"\
    Session Initiation Protocol (SIP) Extension for\n         Instant Messaging\"\
    , RFC 3428, December 2002.\n   [4]   Roach, A., \"Session Initiation Protocol\
    \ (SIP)-Specific Event\n         Notification\", RFC 3265, June 2002.\n   [5]\
    \   Jennings, C., Peterson, J., and M. Watson, \"Private Extensions\n        \
    \ to the Session Initiation Protocol (SIP) for Asserted Identity\n         within\
    \ Trusted Networks\", RFC 3325, November 2002.\n   [6]   Rosenberg, J., \"A Presence\
    \ Event Package for the Session\n         Initiation Protocol (SIP)\", RFC 3856,\
    \ August 2004.\n   [7]   Rosenberg, J., \"A Watcher Information Event Template-Package\n\
    \         for the Session Initiation Protocol (SIP)\", RFC 3857,\n         August\
    \ 2004.\n   [8]   Rosenberg, J., \"An Extensible Markup Language (XML) Based\n\
    \         Format for Watcher Information\", RFC 3858, August 2004.\n   [9]   Faltstrom,\
    \ P. and M. Mealling, \"The E.164 to Uniform Resource\n         Identifiers (URI)\
    \ Dynamic Delegation Discovery System (DDDS)\n         Application (ENUM)\", RFC\
    \ 3761, April 2004.\n   [10]  Rosenberg, J., \"The Extensible Markup Language\
    \ (XML)\n         Configuration Access Protocol (XCAP)\", RFC 4825, May 2007.\n\
    \   [11]  Rosenberg, J., \"Presence Authorization Rules\", RFC 5025,\n       \
    \  October 2007.\n   [12]  Rosenberg, J., \"A Framework for Consent-Based Communications\
    \ in\n         the Session Initiation  Protocol (SIP)\", Work in Progress,\n \
    \        October 2007.\n   [13]  Camarillo, G., \"A Document Format for Requesting\
    \ Consent\", Work\n         in Progress, October 2007.\n   [14]  Rosenberg, J.,\
    \ \"A Framework for Application Interaction in the\n         Session Initiation\
    \ Protocol  (SIP)\", Work in Progress,\n         October 2005.\n   [15]  Burger,\
    \ E. and M. Dolly, \"A Session Initiation Protocol (SIP)\n         Event Package\
    \ for Key Press Stimulus (KPML)\", RFC 4730,\n         November 2006.\n   [16]\
    \  Rosenberg, J., \"Applying Loose Routing to Session Initiation\n         Protocol\
    \ (SIP) User Agents  (UA)\", Work in Progress, June 2007.\n   [17]  Peterson,\
    \ J. and C. Jennings, \"Enhancements for Authenticated\n         Identity Management\
    \ in the Session Initiation Protocol (SIP)\",\n         RFC 4474, August 2006.\n\
    \   [18]  Allman, E. and H. Katz, \"SMTP Service Extension for Indicating\n  \
    \       the Responsible Submitter of an E-Mail Message\", RFC 4405,\n        \
    \ April 2006.\n   [19]  Lyon, J. and M. Wong, \"Sender ID: Authenticating E-Mail\"\
    ,\n         RFC 4406, April 2006.\n   [20]  Lyon, J., \"Purported Responsible\
    \ Address in E-Mail Messages\",\n         RFC 4407, April 2006.\n   [21]  Wong,\
    \ M. and W. Schlitt, \"Sender Policy Framework (SPF) for\n         Authorizing\
    \ Use of Domains in E-Mail, Version 1\", RFC 4408,\n         April 2006.\n   [22]\
    \  Dierks, T. and E. Rescorla, \"The Transport Layer Security (TLS)\n        \
    \ Protocol Version 1.1\", RFC 4346, April 2006.\n   [23]  Allman, E., Callas,\
    \ J., Delany, M., Libbey, M., Fenton, J., and\n         M. Thomas, \"DomainKeys\
    \ Identified Mail (DKIM) Signatures\",\n         RFC 4871, May 2007.\n   [24]\
    \  Ramsdell, B., \"Secure/Multipurpose Internet Mail Extensions\n         (S/MIME)\
    \ Version 3.1 Message Specification\", RFC 3851,\n         July 2004.\n   [25]\
    \  Elkins, M., Del Torto, D., Levien, R., and T. Roessler, \"MIME\n         Security\
    \ with OpenPGP\", RFC 3156, August 2001.\n   [26]  Abadi, M., Burrows, M., Manasse,\
    \ M., and T. Wobber, \"Moderately\n         Hard, Memory Bound Functions, NDSS\
    \ 2003\", February 2003.\n   [27]  Abadi, M., Burrows, M., Birrell, A., Dabek,\
    \ F., and T. Wobber,\n         \"Bankable Postage for Network Services, Proceedings\
    \ of the 8th\n         Asian Computing Science Conference, Mumbai, India\",\n\
    \         December 2003.\n   [28]  Clayton, R. and B. Laurie, \"Proof of Work\
    \ Proves not to Work,\n         Third Annual Workshop on Economics and Information\
    \ Security\",\n         May 2004.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Jonathan Rosenberg\n   Cisco\n   Edison, NJ\n   US\n \
    \  EMail: jdrosen@cisco.com\n   URI:   http://www.jdrosen.net\n   Cullen Jennings\n\
    \   Cisco\n   170 West Tasman Dr.\n   San Jose, CA  95134\n   US\n   Phone: +1\
    \ 408 421-9990\n   EMail: fluffy@cisco.com\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The IETF Trust (2008).\n   This document\
    \ is subject to the rights, licenses and restrictions\n   contained in BCP 78,\
    \ and except as set forth therein, the authors\n   retain all their rights.\n\
    \   This document and the information contained herein are provided on an\n  \
    \ \"AS IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n  \
    \ OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY, THE IETF TRUST AND\n   THE\
    \ INTERNET ENGINEERING TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS\n   OR IMPLIED,\
    \ INCLUDING BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF\n   THE INFORMATION\
    \ HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY\
    \ OR FITNESS FOR A PARTICULAR PURPOSE.\n"
- title: Intellectual Property
  contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or\
    \ scope of any\n   Intellectual Property Rights or other rights that might be\
    \ claimed to\n   pertain to the implementation or use of the technology described\
    \ in\n   this document or the extent to which any license under such rights\n\
    \   might or might not be available; nor does it represent that it has\n   made\
    \ any independent effort to identify any such rights.  Information\n   on the\
    \ procedures with respect to rights in RFC documents can be\n   found in BCP 78\
    \ and BCP 79.\n   Copies of IPR disclosures made to the IETF Secretariat and any\n\
    \   assurances of licenses to be made available, or the result of an\n   attempt\
    \ made to obtain a general license or permission for the use of\n   such proprietary\
    \ rights by implementers or users of this\n   specification can be obtained from\
    \ the IETF on-line IPR repository at\n   http://www.ietf.org/ipr.\n   The IETF\
    \ invites any interested party to bring to its attention any\n   copyrights, patents\
    \ or patent applications, or other proprietary\n   rights that may cover technology\
    \ that may be required to implement\n   this standard.  Please address the information\
    \ to the IETF at\n   ietf-ipr@ietf.org.\n"
