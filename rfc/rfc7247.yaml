- title: __initial_text__
  contents:
  - "   Interworking between the Session Initiation Protocol (SIP) and the\n     \
    \      Extensible Messaging and Presence Protocol (XMPP):\n              Architecture,\
    \ Addresses, and Error Handling\n"
- title: Abstract
  contents:
  - "Abstract\n   As a foundation for the definition of bidirectional protocol mappings\n\
    \   between the Session Initiation Protocol (SIP) and the Extensible\n   Messaging\
    \ and Presence Protocol (XMPP), this document specifies the\n   architectural\
    \ assumptions underlying such mappings as well as the\n   mapping of addresses\
    \ and error conditions.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This\
    \ document is a product of the Internet Engineering Task Force\n   (IETF).  It\
    \ represents the consensus of the IETF community.  It has\n   received public\
    \ review and has been approved for publication by the\n   Internet Engineering\
    \ Steering Group (IESG).  Further information on\n   Internet Standards is available\
    \ in Section 2 of RFC 5741.\n   Information about the current status of this document,\
    \ any errata,\n   and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc7247.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2014 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................3\n\
    \   2. Intended Audience ...............................................3\n  \
    \ 3. Terminology .....................................................4\n   4.\
    \ Architectural Assumptions .......................................4\n   5. Interdomain\
    \ Federation ..........................................6\n   6. Address Mapping\
    \ .................................................7\n      6.1. Overview ...................................................7\n\
    \      6.2. Local Part Mapping .........................................9\n  \
    \    6.3. Instance-Specific Mapping .................................11\n    \
    \  6.4. SIP to XMPP ...............................................11\n      6.5.\
    \ XMPP to SIP ...............................................12\n   7. Error Mapping\
    \ ..................................................14\n      7.1. XMPP to SIP\
    \ ...............................................15\n      7.2. SIP to XMPP ...............................................17\n\
    \   8. Security Considerations ........................................20\n  \
    \ 9. References .....................................................21\n    \
    \  9.1. Normative References ......................................21\n      9.2.\
    \ Informative References ....................................22\n   Appendix A.\
    \ Acknowledgements ......................................24\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   The IETF has worked on two signaling technologies that can\
    \ be used\n   for multimedia session negotiation, instant messaging, presence,\n\
    \   capabilities discovery, notifications, and other functions served by\n   real-time\
    \ communication applications:\n   o  The Session Initiation Protocol [RFC3261],\
    \ along with various SIP\n      extensions developed within the SIP for Instant\
    \ Messaging and\n      Presence Leveraging Extensions (SIMPLE) Working Group.\n\
    \   o  The Extensible Messaging and Presence Protocol [RFC6120], along\n     \
    \ with various XMPP extensions developed by the IETF as well as by\n      the\
    \ XMPP Standards Foundation (XSF).\n   Because these technologies are widely deployed,\
    \ it is important to\n   clearly define mappings between them for the sake of\
    \ interworking.\n   This document provides the basis for a series of SIP-XMPP\n\
    \   interworking specifications by defining architectural assumptions,\n   address\
    \ translation methods, and error condition mappings.  Other\n   documents in this\
    \ series define mappings for presence, messaging, and\n   media sessions.\n  \
    \ The guidelines in this series are based on implementation and\n   deployment\
    \ experience, and they describe techniques that have worked\n   well in the field\
    \ with existing systems.  In practice, interworking\n   has been achieved through\
    \ direct protocol mappings, not through\n   mapping to an abstract model as described\
    \ in, for example, [RFC3859]\n   and [RFC3860].  Therefore, this series describes\
    \ the direct mapping\n   approach in enough detail for developers of new implementations\
    \ to\n   achieve practical interworking between SIP systems and XMPP systems.\n"
- title: 2.  Intended Audience
  contents:
  - "2.  Intended Audience\n   The documents in this series are intended for use by\
    \ software\n   developers who have an existing system based on one of these\n\
    \   technologies (e.g., SIP) and would like to enable communication from\n   that\
    \ existing system to systems based on the other technology (e.g.,\n   XMPP). \
    \ With regard to this document, we assume that readers are\n   familiar with the\
    \ core specifications for both SIP and XMPP; with\n   regard to the other documents\
    \ in this series, we assume that readers\n   are familiar with this document as\
    \ well as with the relevant SIP and\n   XMPP extensions.\n"
- title: 3.  Terminology
  contents:
  - "3.  Terminology\n   A number of terms used here are explained in [RFC3261] and\
    \ [RFC6120].\n   Several examples use the \"XML Notation\" from the Internationalized\n\
    \   Resource Identifier (IRI) specification [RFC3987] to represent\n   Unicode\
    \ characters outside the ASCII range (e.g., the string \"ue\"\n   stands for the\
    \ Unicode character [UNICODE] LATIN SMALL LETTER U WITH\n   DIAERESIS, U+00FC).\n\
    \   In architectural diagrams, SIP traffic is shown using arrows such as\n   \"\
    ***>\", whereas XMPP traffic is shown using arrows such as \"...>\".\n   The key\
    \ words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"\
    SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"NOT RECOMMENDED\", \"MAY\", and\n\
    \   \"OPTIONAL\" in this document are to be interpreted as described in\n   [RFC2119].\n"
- title: 4.  Architectural Assumptions
  contents:
  - "4.  Architectural Assumptions\n   Protocol translation between SIP and XMPP could\
    \ occur in a number of\n   different entities, depending on the architecture of\
    \ real-time\n   communication deployments.  For example, protocol translation\
    \ could\n   occur within a multiprotocol server (which uses protocol-specific\n\
    \   connection managers to initiate traffic to and accept traffic from\n   clients\
    \ or other servers natively using SIP/SIMPLE, XMPP, etc.),\n   within a multiprotocol\
    \ client (which enables a user to establish\n   connections natively with various\
    \ servers using SIP/SIMPLE, XMPP,\n   etc.), or within a gateway that acts as\
    \ a dedicated protocol\n   translator (which takes one protocol as input and provides\
    \ another\n   protocol as output).\n   This document assumes that the protocol\
    \ translation will occur within\n   a gateway, specifically:\n   o  When information\
    \ needs to flow from an XMPP-based system to a SIP-\n      based system, protocol\
    \ translation will occur within an \"XMPP-to-\n      SIP gateway\" that translates\
    \ XMPP syntax and semantics on behalf\n      of an \"XMPP server\" (together,\
    \ these two logical functions\n      comprise an \"XMPP service\").\n   o  When\
    \ information needs to flow from a SIP-based system to an XMPP-\n      based system,\
    \ protocol translation will occur within a \"SIP-to-\n      XMPP gateway\" that\
    \ translates SIP syntax and semantics on behalf\n      of a \"SIP server\" (together,\
    \ these two logical functions comprise\n      a \"SIP service\").\n   Naturally,\
    \ these logical functions could occur in one and the same\n   actual entity; we\
    \ differentiate between them mainly for explanatory\n   purposes (although, in\
    \ practice, such gateways are indeed fairly\n   common).\n      Note: This assumption\
    \ is not meant to discourage protocol\n      translation within multiprotocol\
    \ clients or servers; instead, this\n      assumption is followed mainly to clarify\
    \ the discussion and\n      examples so that the protocol translation principles\
    \ can be more\n      easily understood and can be applied by client and server\n\
    \      implementors with appropriate modifications to the examples and\n     \
    \ terminology.\n   This document assumes that a gateway will translate directly\
    \ from one\n   protocol to the other.  For the sake of the examples, we further\n\
    \   assume that protocol translation will occur within a gateway in the\n   source\
    \ domain, so that information generated by the user of an XMPP\n   system will\
    \ be translated by a gateway within the trust domain of\n   that XMPP system,\
    \ and information generated by the user of a SIP\n   system will be translated\
    \ by a gateway within the trust domain of\n   that SIP system.  However, nothing\
    \ in this document ought to be taken\n   as recommending against protocol translation\
    \ at the destination\n   domain.\n   An architectural diagram for a possible gateway\
    \ deployment is shown\n   below, where the entities have the following significance\
    \ and the \"#\"\n   character is used to show the boundary of a trust domain:\n\
    \   o  romeo@example.net -- a SIP user.\n   o  example.net -- a SIP server with\
    \ an associated gateway (\"S2X GW\")\n      to XMPP.\n   o  juliet@example.com\
    \ -- an XMPP user.\n   o  example.com -- an XMPP server with an associated gateway\
    \ (\"X2S\n      GW\") to SIP.\n        #########################################################\n\
    \        #                                                       #\n        #\
    \                 +-----+                               #\n        #         \
    \        | S2X |                               #\n        #   +-------------+\
    \ GW  |<...........>+-------------+   #\n        #   | SIP Server  +-----+   \
    \          | XMPP Server |   #\n        #   | example.net |             +-----+\
    \ example.com |   #\n        #   +-------------+<***********>| X2S +-------------+\
    \   #\n        #         *                     | GW  |  :              #\n   \
    \     #         *                     +-----+  :              #\n        #   \
    \      *                              :              #\n        #    romeo@example.net\
    \             juliet@example.com   #\n        #                              \
    \                         #\n        #########################################################\n\
    \            Legend:\n              XMPP = ... or :\n               SIP = *\n\
    \            Figure 1: Possible Gateway Deployment Architecture\n   Note that\
    \ bidirectional communication between the SIP server and the\n   XMPP server can\
    \ be established over either SIP or XMPP.  If the XMPP\n   user initiates the\
    \ interaction, then the XMPP server would invoke its\n   XMPP-to-SIP gateway;\
    \ thus, the communication would occur over SIP.\n   If the SIP user initiates\
    \ the interaction, then the SIP server would\n   invoke its SIP-to-XMPP gateway;\
    \ thus, the communication would occur\n   over XMPP.\n"
- title: 5.  Interdomain Federation
  contents:
  - "5.  Interdomain Federation\n   The architectural assumptions underlying this\
    \ document imply that\n   communication between a SIP system and an XMPP system\
    \ will take place\n   using interdomain federation: the SIP server invokes its\
    \ associated\n   SIP-to-XMPP gateway, which communicates with the XMPP server\
    \ using\n   native XMPP server-to-server methods; similarly, the XMPP server\n\
    \   invokes its associated XMPP-to-SIP gateway, which communicates with\n   the\
    \ SIP server using native SIP server-to-server methods.\n   When an XMPP server\
    \ receives an XMPP stanza whose 'to' address\n   specifies or includes a domain\
    \ other than the domain of the XMPP\n   server, it needs to determine whether\
    \ the destination domain\n   communicates via XMPP or SIP.  To do so, it performs\
    \ one or more DNS\n   SRV lookups [RFC2782] for \"_xmpp-server\" records as specified\
    \ in\n   [RFC6120].  If the response returns a hostname, the XMPP server can\n\
    \   attempt XMPP communication.  If not, it can determine the appropriate\n  \
    \ location for SIP communication at the target domain using the\n   procedures\
    \ specified in [RFC3263].\n   Similarly, when a SIP server receives a SIP message\
    \ whose Request-URI\n   or To header specifies or includes a domain other than\
    \ the domain of\n   the SIP server, it needs to determine whether the destination\
    \ domain\n   communicates via SIP or XMPP.  To do so, it uses the procedures\n\
    \   specified in [RFC3263].  If that response returns a hostname, the SIP\n  \
    \ server can attempt SIP communication.  If not, it can perform one or\n   more\
    \ DNS SRV lookups [RFC2782] for \"_xmpp-server\" records as\n   specified in [RFC6120].\n\
    \   In both cases, the server in question might have previously\n   determined\
    \ that the foreign domain communicates via SIP or XMPP, in\n   which case it would\
    \ not need to perform the relevant DNS lookups.\n   The caching of such information\
    \ is a matter of implementation and\n   local service policy and is therefore\
    \ out of scope for this document.\n   Existing SIP and XMPP server implementations\
    \ do not typically include\n   the ability to communicate using the other technology\
    \ (XMPP for SIP\n   implementations, SIP for XMPP implementations).  One common\n\
    \   architectural pattern is to associate a gateway with the core server\n   implementation\
    \ (e.g., in XMPP such a gateway might be called a\n   \"connection manager\").\
    \  How exactly such a gateway interacts with the\n   core server to complete tasks\
    \ such as address lookups and\n   communication with systems that use the other\
    \ technology is a matter\n   of implementation (e.g., the gateway might be an\
    \ add-on module that\n   is trusted by the core server to act as a fallback delivery\
    \ mechanism\n   if the remote domain does not support the server's native\n  \
    \ communication technology).\n   Because [RFC6120] specifies a binding of XMPP\
    \ to TCP, a gateway from\n   SIP to XMPP will need to support TCP as the underlying\
    \ transport\n   protocol.  By contrast, as specified in [RFC3261], either TCP\
    \ or UDP\n   can be used as the underlying transport for SIP messages, and a given\n\
    \   SIP deployment might support only UDP; therefore, a gateway from XMPP\n  \
    \ to SIP might need to communicate with a SIP server using either TCP\n   or UDP.\n"
- title: 6.  Address Mapping
  contents:
  - '6.  Address Mapping

    '
- title: 6.1.  Overview
  contents:
  - "6.1.  Overview\n   The basic SIP address format is a 'sip' or 'sips' URI as specified\
    \ in\n   [RFC3261].  When a SIP entity supports extensions for instant\n   messaging\
    \ it might be identified by an 'im' URI as specified in the\n   Common Profile\
    \ for Instant Messaging [RFC3860] (see [RFC3428]), and\n   when a SIP entity supports\
    \ extensions for presence it might be\n   identified by a 'pres' URI as specified\
    \ in the Common Profile for\n   Presence [RFC3859] (see [RFC3856]).  SIP entities\
    \ typically also\n   support the 'tel' URI scheme [RFC3966] and might support\
    \ other URI\n   schemes as well.\n   The XMPP address format is specified in [RFC6122]\
    \ (although note that\n   XMPP URIs [RFC5122] are not used natively on the XMPP\
    \ network); in\n   addition, [RFC6121] encourages instant messaging and presence\n\
    \   applications of XMPP to also support 'im' and 'pres' URIs as\n   specified\
    \ in [RFC3860] and [RFC3859], respectively, although such\n   support might simply\
    \ involve leaving resolution of such addresses up\n   to an XMPP server.\n   In\
    \ this document we primarily describe mappings for addresses of the\n   form <user@domain>;\
    \ however, we also provide guidelines for mapping\n   the addresses of specific\
    \ user agent instances, which take the form\n   of Globally Routable User Agent\
    \ URIs (GRUUs) in SIP and\n   \"resourceparts\" in XMPP.  Mapping of protocol-specific\
    \ identifiers\n   (such as telephone numbers) is out of scope for this specification.\n\
    \   In addition, we have ruled the mapping of domain names as out of\n   scope\
    \ for now, since that is a matter for the Domain Name System;\n   specifically,\
    \ the issue for interworking between SIP and XMPP relates\n   to the translation\
    \ of fully internationalized domain names (IDNs)\n   into non-internationalized\
    \ domain names (IDNs are not allowed in the\n   SIP address format but are allowed\
    \ in the XMPP address via\n   Internationalized Domain Names in Applications;\
    \ see [RFC6122] and\n   [XMPP-ADDRESS-FORMAT]).  Therefore, in the following sections\
    \ we\n   focus primarily on the local part of an address (these are called\n \
    \  variously \"usernames\", \"instant inboxes\", \"presentities\", and\n   \"\
    localparts\" in the protocols at issue), secondarily on the instance-\n   specific\
    \ part of an address, and not at all on the domain-name part\n   of an address.\n\
    \   The 'sip'/'sips', 'im'/'pres', and XMPP address schemes allow\n   different\
    \ sets of characters (although all three allow alphanumeric\n   characters and\
    \ disallow both spaces and control characters).  In some\n   cases, characters\
    \ allowed in one scheme are disallowed in others;\n   these characters need to\
    \ be mapped appropriately in order to ensure\n   interworking across systems.\n"
- title: 6.2.  Local Part Mapping
  contents:
  - "6.2.  Local Part Mapping\n   The local part of a 'sip'/'sips' URI inherits from\
    \ the \"userinfo\"\n   rule in [RFC3986] with several changes; here we discuss\
    \ the SIP\n   \"user\" rule only (using ABNF as defined in [RFC5234]):\n     \
    \ user             =  1*( unreserved / escaped / user-unreserved )\n      user-unreserved\
    \  =  \"&\" / \"=\" / \"+\" / \"$\" / \",\" / \";\" / \"?\" / \"/\"\n      unreserved\
    \       =  alphanum / mark\n      mark             =  \"-\" / \"_\" / \".\" /\
    \ \"!\" / \"~\" / \"*\" / \"'\"\n                          / \"(\" / \")\"\n \
    \  Here we make the simplifying assumption that the local part of an\n   'im'/'pres'\
    \ URI inherits from the \"dot-atom-text\" rule in [RFC5322]\n   rather than the\
    \ more complicated \"local-part\" rule:\n      dot-atom-text =  1*atext *(\".\"\
    \ 1*atext)\n      atext         =  ALPHA / DIGIT /    ; Any character except\n\
    \                       \"!\" / \"#\" / \"$\" /  ; controls, SP, and\n       \
    \                \"%\" / \"&\" / \"'\" /  ; specials.  Used for\n            \
    \           \"*\" / \"+\" / \"-\" /  ; atoms.\n                       \"/\" /\
    \ \"=\" / \"?\" /\n                       \"^\" / \"_\" / \"`\" /\n          \
    \             \"{\" / \"|\" / \"}\" /\n                       \"~\"\n   The local\
    \ part of an XMPP address allows any ASCII character except\n   space, controls,\
    \ and the \" & ' / : < > @ characters.\n   To summarize the foregoing information,\
    \ the following table lists the\n   allowed and disallowed characters in the local\
    \ part of identifiers\n   for each protocol (aside from the alphanumeric, space,\
    \ and control\n   characters), in order by hexadecimal character number (where\
    \ each \"A\"\n   row shows the allowed characters and each \"D\" row shows the\n\
    \   disallowed characters).\n                 +---+----------------------------------+\n\
    \                 | SIP/SIPS CHARACTERS                  |\n                 +---+----------------------------------+\n\
    \                 | A | !  $ &'()*+,-./ ; = ?     _    ~ |\n                 |\
    \ D |  \"# %          : < > @[\\]^ `{|}  |\n                 +---+----------------------------------+\n\
    \                 | IM/PRES CHARACTERS                   |\n                 +---+----------------------------------+\n\
    \                 | A | ! #$%&'  *+ - /   = ?    ^_`{|}~ |\n                 |\
    \ D |  \"     ()  , . :;< > @[\\]        |\n                 +---+----------------------------------+\n\
    \                 | XMPP CHARACTERS                      |\n                 +---+----------------------------------+\n\
    \                 | A | ! #$%  ()*+,-.  ; = ? [\\]^_`{|}~ |\n                \
    \ | D |  \"   &'       /: < > @           |\n                 +---+----------------------------------+\n\
    \                Table 1: Allowed and Disallowed Characters\n   When transforming\
    \ the local part of an address from one address\n   format to another, an application\
    \ SHOULD proceed as follows:\n   1.  Unescape any escaped characters in the source\
    \ address (e.g., from\n       SIP to XMPP unescape \"%23\" to \"#\" per [RFC3986],\
    \ and from XMPP to\n       SIP unescape \"\\27\" to \"'\" per [XEP-0106]).\n \
    \  2.  Leave unmodified any characters that are allowed in the\n       destination\
    \ scheme.\n   3.  Escape any characters that are allowed in the source scheme\
    \ but\n       reserved in the destination scheme, as escaping is defined for\n\
    \       the destination scheme.  In particular:\n       *  Where the destination\
    \ scheme is a URI (i.e., an 'im', 'pres',\n          'sip', or 'sips' URI), each\
    \ reserved character MUST be\n          percent-encoded to \"%hexhex\" as specified\
    \ in Section 2.5 of\n          [RFC3986] (e.g., when transforming from XMPP to\
    \ SIP, encode\n          \"#\" as \"%23\").\n       *  Where the destination scheme\
    \ is a native XMPP address, each\n          reserved character MUST be encoded\
    \ to \"\\hexhex\" as specified\n          in [XEP-0106] (e.g., when transforming\
    \ from SIP to XMPP,\n          encode \"'\" as \"\\27\").\n"
- title: 6.3.  Instance-Specific Mapping
  contents:
  - "6.3.  Instance-Specific Mapping\n   The meaning of a resourcepart in XMPP (i.e.,\
    \ the portion of a Jabber\n   ID (JID) after the slash character, such as \"foo\"\
    \ in\n   \"user@example.com/foo\") matches that of a Globally Routable User\n\
    \   Agent URI (GRUU) in SIP [RFC5627].  In both cases, these constructs\n   identify\
    \ a particular device associated with the bare JID\n   (\"localpart@domainpart\"\
    ) of an XMPP entity or with the Address of\n   Record (AOR) of a SIP entity. \
    \ Therefore, it is reasonable to map the\n   value of a \"gr\" URI parameter to\
    \ an XMPP resourcepart and vice versa.\n   The mapping described here does not\
    \ apply to temporary GRUUs -- only\n   to GRUUs associated with an Address of\
    \ Record.\n   The \"gr\" URI parameter in SIP can contain only characters from\
    \ the\n   ASCII range (although characters outside the ASCII range can be\n  \
    \ percent-encoded in accordance with [RFC3986]), whereas an XMPP\n   resourcepart\
    \ can contain nearly any Unicode character [UNICODE].\n   Therefore, Unicode characters\
    \ outside the ASCII range need to be\n   mapped to characters in the ASCII range,\
    \ as described below.\n"
- title: 6.4.  SIP to XMPP
  contents:
  - "6.4.  SIP to XMPP\n   The following is a high-level algorithm for mapping a 'sip',\
    \ 'sips',\n   'im', or 'pres' URI to an XMPP address:\n   1.  Remove URI scheme.\n\
    \   2.  Split at the first '@' character into local part and hostname\n      \
    \ (mapping the latter is out of scope).\n   3.  Translate any percent-encoded\
    \ strings (\"%hexhex\") to percent-\n       decoded octets.\n   4.  Treat result\
    \ as a UTF-8 string.\n   5.  Translate \"&\" to \"\\26\", \"'\" to \"\\27\", and\
    \ \"/\" to \"\\2f\",\n       respectively in order to properly handle the characters\n\
    \       disallowed in XMPP addresses but allowed in 'sip'/'sips' URIs and\n  \
    \     'im'/'pres' URIs as shown in Table 1 above (this is consistent\n       with\
    \ [XEP-0106]).\n   6.  Apply Nodeprep profile of stringprep [RFC3454] or its replacement\n\
    \       (see [RFC6122] and [XMPP-ADDRESS-FORMAT]) for canonicalization\n     \
    \  (OPTIONAL).\n   7.  Recombine local part with mapped hostname to form a bare\
    \ JID\n       (\"localpart@domainpart\").\n   8.  If the (SIP) address contained\
    \ a \"gr\" URI parameter, append a\n       slash character \"/\" and the \"gr\"\
    \ value to the bare JID to form a\n       full JID (\"localpart@domainpart/resourcepart\"\
    ).\n   Several examples follow, illustrating steps 3, 5, and 8 described\n   above.\n\
    \      +----------------------------+--------------------------+\n      | SIP\
    \ URI                    |  XMPP Address            |\n      +----------------------------+--------------------------+\n\
    \      | sip:f%C3%BC@sip.example    |  f&#xFC;@sip.example     |\n      +----------------------------+--------------------------+\n\
    \      | sip:o'malley@sip.example   |  o\\27malley@sip.example  |\n      +----------------------------+--------------------------+\n\
    \      | sip:foo@sip.example;gr=bar |  foo@sip.example/bar     |\n      +----------------------------+--------------------------+\n\
    \   In the first example, the string \"%C3%BC\" is a percent-encoded\n   representation\
    \ of the UTF-8-encoded Unicode character LATIN SMALL\n   LETTER U WITH DIAERESIS\
    \ (U+00FC), whereas the string \"&#xFC;\" is the\n   same character shown for\
    \ documentation purposes using the XML\n   Notation defined in [RFC3987] (in XMPP,\
    \ it would be sent directly as\n   a UTF-8-encoded Unicode character and not percent-encoded\
    \ as in a SIP\n   URI to comply with the URI syntax defined in [RFC3986]).\n"
- title: 6.5.  XMPP to SIP
  contents:
  - "6.5.  XMPP to SIP\n   The following is a high-level algorithm for mapping an\
    \ XMPP address\n   to a 'sip', 'sips', 'im', or 'pres' URI:\n   1.  Split XMPP\
    \ address into localpart (mapping described in remaining\n       steps), domainpart\
    \ (hostname; mapping is out of scope), and\n       resourcepart (specifier for\
    \ particular device or connection, for\n       which an OPTIONAL mapping is described\
    \ below).\n   2.  Apply Nodeprep profile of stringprep [RFC3454] or its replacement\n\
    \       (see [RFC6122] and [XMPP-ADDRESS-FORMAT]) for canonicalization of\n  \
    \     the XMPP localpart (OPTIONAL).\n   3.  Translate \"\\26\" to \"&\", \"\\\
    27\" to \"'\", and \"\\2f\" to \"/\",\n       respectively (this is consistent\
    \ with [XEP-0106]).\n   4.  Determine if the foreign domain supports 'im' and\
    \ 'pres' URIs\n       (discovered via [RFC2782] lookup as specified in [RFC6121]),\
    \ else\n       assume that the foreign domain supports 'sip'/'sips' URIs.\n  \
    \ 5.  If converting into 'im' or 'pres' URI, for each byte, if the byte\n    \
    \   is in the set (),.;[\\] or is a UTF-8 character outside the ASCII\n      \
    \ range, then percent-encode that byte to \"%hexhex\" format.  If\n       converting\
    \ into 'sip' or 'sips' URI, for each byte, if the byte\n       is in the set #%[\\\
    ]^`{|} or is a UTF-8 character outside the\n       ASCII range, then percent-encode\
    \ that byte to \"%hexhex\" format.\n   6.  Combine resulting local part with mapped\
    \ hostname to form\n       local@domain address.\n   7.  Prepend with the string\
    \ 'im:' (for XMPP <message/> stanzas) or\n       'pres:' (for XMPP <presence/>\
    \ stanzas) if foreign domain supports\n       these, else prepend with the string\
    \ 'sip:' or 'sips:' according\n       to local service policy.\n   8.  If the\
    \ XMPP address included a resourcepart and the destination\n       URI scheme\
    \ is 'sip' or 'sips', optionally append the slash\n       character '/' and then\
    \ append the resourcepart (making sure to\n       percent-encode any UTF-8 characters\
    \ outside the ASCII range) as\n       the \"gr\" URI parameter.\n   Several examples\
    \ follow, illustrating steps 3, 5, and 8 described\n   above.\n      +---------------------------+---------------------------------+\n\
    \      | XMPP Address              |  SIP URI                        |\n     \
    \ +---------------------------+---------------------------------+\n      | m\\\
    26m@xmpp.example        |  sip:m&m@xmpp.example           |\n      | tsch&#xFC;ss@xmpp.example\
    \ |  sip:tsch%C3%BCss@xmpp.example  |\n      | baz@xmpp.example/qux      |  sip:baz@xmpp.example;gr=qux\
    \    |\n      +---------------------------+---------------------------------+\n\
    \   As above, in the first example the string \"&#xFC;\" is the Unicode\n   character\
    \ LATIN SMALL LETTER U WITH DIAERESIS (U+00FC) shown for\n   documentation purposes\
    \ using the XML Notation defined in [RFC3987]\n   (in XMPP, it would be sent directly\
    \ as a UTF-8-encoded Unicode\n   character and not percent-encoded, whereas the\
    \ string \"%C3%BC\" is a\n   percent-encoded representation of the same character.\n"
- title: 7.  Error Mapping
  contents:
  - "7.  Error Mapping\n   Various differences between XMPP error conditions and SIP\
    \ response\n   codes make it hard to provide a comprehensive and consistent mapping\n\
    \   between the protocols:\n   o  Whereas the set of XMPP error conditions is\
    \ fixed in the core XMPP\n      specification (and supplemented where needed by\
    \ application-\n      specific extensions), the set of SIP response codes is more\
    \ open\n      to change, as evidenced by the IANA registry of SIP response\n \
    \     codes.\n   o  XMPP has defined fewer error conditions related to stanza\
    \ handling\n      (22 are defined in [RFC6120]) than SIP has defined response\
    \ codes\n      related to message handling (at the date of this writing, 71 SIP\n\
    \      response codes are registered with IANA as defined in [RFC3261]\n     \
    \ and numerous SIP extensions).\n   o  In many cases, the SIP response codes are\
    \ more specific than the\n      XMPP error conditions (e.g., from an XMPP perspective\
    \ the SIP\n      codes \"413 Request Entity Too Large\" and \"414 Request-URI\
    \ Too\n      Long\" are simply two different types of response to the same bad\n\
    \      request, and the SIP codes \"415 Unsupported Media Type\" and \"416\n \
    \     Unsupported URI Scheme\" are two different responses to a request\n    \
    \  that is not acceptable).\n   o  SIP differentiates between responses about\
    \ a particular endpoint\n      or resource (the 4xx series) and responses about\
    \ a user, i.e., all\n      of a user's endpoints or resources (the 6xx series).\
    \  There is no\n      such distinction in XMPP, since the same error condition\
    \ can be\n      returned in relation to the \"bare JID\" (localpart@domainpart)\
    \ of a\n      user or the \"full JID\" (localpart@domainpart/resourcepart) of\
    \ a\n      particular endpoint or resource, depending on the 'to' address of\n\
    \      the original request.\n   As a result of these and other factors, the mapping\
    \ of error\n   conditions and response codes is more of an art than a science.\
    \  This\n   document provides suggested mappings, but implementations are free\
    \ to\n   deviate from these mappings if needed.  Also, because no XMPP error\n\
    \   conditions are equivalent to the provisional (1xx) and successful\n   (2xx)\
    \ response codes in SIP, this document suggests mappings only for\n   the SIP\
    \ redirection (3xx), request failure (4xx), server failure\n   (5xx), and global\
    \ failure (6xx) response code families.\n   Supplementary information about SIP\
    \ response codes can be expressed\n   in the \"Reason-Phrase\" in the Status-Line\
    \ header, and detailed\n   information about XMPP error conditions can be expressed\
    \ in the\n   <text/> child of the <error/> element.  Although the semantics of\n\
    \   these constructs are specified in a slightly different way, it is\n   reasonable\
    \ for a gateway to map these constructs to each other if\n   they are found in\
    \ a SIP response or XMPP error stanza.\n"
- title: 7.1.  XMPP to SIP
  contents:
  - "7.1.  XMPP to SIP\n   The mapping of specific XMPP error conditions to SIP response\
    \ codes\n   SHOULD be as described in the following table.\n         +------------------------------+---------------------+\n\
    \         |  XMPP Error Condition        |  SIP Response Code  |\n         +------------------------------+---------------------+\n\
    \         |  <bad-request/>              | 400                 |\n         +------------------------------+---------------------+\n\
    \         |  <conflict/>                 | 400                 |\n         +------------------------------+---------------------+\n\
    \         |  <feature-not-implemented/>  | 405 or 501 (1)      |\n         +------------------------------+---------------------+\n\
    \         |  <forbidden/>                | 403 or 603 (2)      |\n         +------------------------------+---------------------+\n\
    \         |  <gone/>                     | 301 or 410 (3)      |\n         +------------------------------+---------------------+\n\
    \         |  <internal-server-error/>    | 500                 |\n         +------------------------------+---------------------+\n\
    \         |  <item-not-found/>           | 404 or 604 (2)      |\n         +------------------------------+---------------------+\n\
    \         |  <jid-malformed/>            | 400                 |\n         +------------------------------+---------------------+\n\
    \         |  <not-acceptable/>           | 406 or 606 (2)      |\n         +------------------------------+---------------------+\n\
    \         |  <not-allowed/>              | 403                 |\n         +------------------------------+---------------------+\n\
    \         |  <not-authorized/>           | 401                 |\n         +------------------------------+---------------------+\n\
    \         |  <policy-violation/>         | 403                 |\n         +------------------------------+---------------------+\n\
    \         |  <recipient-unavailable/>    | 480 or 600 (2)      |\n         +------------------------------+---------------------+\n\
    \         |  <redirect/>                 | 302                 |\n         +------------------------------+---------------------+\n\
    \         |  <registration-required/>    | 407                 |\n         +------------------------------+---------------------+\n\
    \         |  <remote-server-not-found/>  | 404 or 408 (4)      |\n         +------------------------------+---------------------+\n\
    \         |  <remote-server-timeout/>    | 408                 |\n         +------------------------------+---------------------+\n\
    \         +------------------------------+---------------------+\n         | \
    \ <resource-constraint/>      | 500                 |\n         +------------------------------+---------------------+\n\
    \         |  <service-unavailable/>      | see note (5) below  |\n         +------------------------------+---------------------+\n\
    \         |  <subscription-required/>    | 400                 |\n         +------------------------------+---------------------+\n\
    \         |  <undefined-condition/>      | 400                 |\n         +------------------------------+---------------------+\n\
    \         |  <unexpected-request/>       | 491 or 400          |\n         +------------------------------+---------------------+\n\
    \     Table 2: Mapping of XMPP Error Conditions to SIP Response Codes\n   (1)\
    \  If the error relates to a \"full JID\" (localpart@domainpart/\n        resourcepart),\
    \ the SIP 405 response code is RECOMMENDED.  If the\n        error relates to\
    \ a \"bare JID\" (localpart@domainpart), the SIP\n        501 response code is\
    \ RECOMMENDED.\n   (2)  If the error relates to a \"full JID\" (localpart@domainpart/\n\
    \        resourcepart), the SIP response code from the 4xx series is\n       \
    \ RECOMMENDED.  If the error relates to a \"bare JID\"\n        (localpart@domainpart),\
    \ the SIP response code from the 6xx\n        series is RECOMMENDED.\n   (3) \
    \ If the <gone/> element includes XML character data specifying\n        the new\
    \ address, the error MUST be mapped to SIP 301; if not, it\n        MUST be mapped\
    \ to SIP 410.\n   (4)  The XMPP <remote-server-not-found/> error can mean that\
    \ the\n        remote server either (a) does not exist or (b) cannot be\n    \
    \    resolved.  SIP has two different response codes here: 404 to\n        cover\
    \ (a) and 408 to cover (b).\n   (5)  The XMPP <service-unavailable/> error condition\
    \ is widely used\n        to inform the requesting entity that the intended recipient\
    \ does\n        not support the relevant feature, to signal that a server cannot\n\
    \        perform the requested service either generally or in relation to\n  \
    \      a particular user, and to avoid disclosing whether a given\n        account\
    \ exists at all.  This is quite different from the\n        semantics of the SIP\
    \ 503 Service Unavailable response code,\n        which is used to signal that\
    \ communication with a server is\n        impossible (e.g., even if the XMPP <service-unavailable/>\
    \ error\n        condition is returned in relation to a specific user, the SIP\n\
    \        503 response code will be interpreted as applying to all future\n   \
    \     requests to this server, not just requests for the specific\n        user).\
    \  Therefore, mapping the XMPP <service-unavailable/> error\n        condition\
    \ to the SIP 503 Service Unavailable response code is\n        NOT RECOMMENDED.\
    \  Although no precise mapping is available, the\n        SIP 403 Forbidden and\
    \ 405 Method Not Allowed response codes are\n        closest in meaning to the\
    \ XMPP <service-unavailable/> error\n        condition.\n"
- title: 7.2.  SIP to XMPP
  contents:
  - "7.2.  SIP to XMPP\n   The mapping of SIP response codes to XMPP error conditions\
    \ SHOULD be\n   as described in the following table.  If a gateway encounters\
    \ a SIP\n   response code that is not listed below, it SHOULD map a 3xx-series\n\
    \   code to <redirect/>, a 4xx-series code to <bad-request/>, a 5xx-\n   series\
    \ code to <internal-server-error>, and a 6xx-series code to\n   <recipient-unavailable/>.\n\
    \        +---------------------+---------------------------------+\n        |\
    \  SIP Response Code  |  XMPP Error Condition           |\n        +---------------------+---------------------------------+\n\
    \        |  3xx                |  <redirect/>                    |\n        +---------------------+---------------------------------+\n\
    \        |  300                |  <redirect/>                    |\n        +---------------------+---------------------------------+\n\
    \        |  301                |  <gone/> (1)                    |\n        +---------------------+---------------------------------+\n\
    \        |  302                |  <redirect/>                    |\n        +---------------------+---------------------------------+\n\
    \        |  305                |  <redirect/>                    |\n        +---------------------+---------------------------------+\n\
    \        |  380                |  <not-acceptable/>              |\n        +---------------------+---------------------------------+\n\
    \        |  4xx                |  <bad-request/>                 |\n        +---------------------+---------------------------------+\n\
    \        |  400                |  <bad-request/>                 |\n        +---------------------+---------------------------------+\n\
    \        |  401                |  <not-authorized/>              |\n        +---------------------+---------------------------------+\n\
    \        |  402                |  <bad-request/> (2)             |\n        +---------------------+---------------------------------+\n\
    \        |  403                |  <forbidden/> (3)               |\n        +---------------------+---------------------------------+\n\
    \        |  404                |  <item-not-found/> (4)          |\n        +---------------------+---------------------------------+\n\
    \        |  405                |  <feature-not-implemented/>     |\n        +---------------------+---------------------------------+\n\
    \        |  406                |  <not-acceptable/>              |\n        +---------------------+---------------------------------+\n\
    \        |  407                |  <registration-required/>       |\n        +---------------------+---------------------------------+\n\
    \        +---------------------+---------------------------------+\n        |\
    \  408                |  <remote-server-timeout/> (5)   |\n        +---------------------+---------------------------------+\n\
    \        |  410                |  <gone/> (1)                    |\n        +---------------------+---------------------------------+\n\
    \        |  413                |  <policy-violation/>            |\n        +---------------------+---------------------------------+\n\
    \        |  414                |  <policy-violation/>            |\n        +---------------------+---------------------------------+\n\
    \        |  415                |  <not-acceptable/>              |\n        +---------------------+---------------------------------+\n\
    \        |  416                |  <not-acceptable/>              |\n        +---------------------+---------------------------------+\n\
    \        |  420                |  <feature-not-implemented/>     |\n        +---------------------+---------------------------------+\n\
    \        |  421                |  <not-acceptable/>              |\n        +---------------------+---------------------------------+\n\
    \        |  423                |  <resource-constraint/>         |\n        +---------------------+---------------------------------+\n\
    \        |  430                |  <recipient-unavailable/> (6)   |\n        +---------------------+---------------------------------+\n\
    \        |  439                |  <feature-not-implemented/> (6) |\n        +---------------------+---------------------------------+\n\
    \        |  440                |  <policy-violation/> (7)        |\n        +---------------------+---------------------------------+\n\
    \        |  480                |  <recipient-unavailable/>       |\n        +---------------------+---------------------------------+\n\
    \        |  481                |  <item-not-found/>              |\n        +---------------------+---------------------------------+\n\
    \        |  482                |  <not-acceptable/>              |\n        +---------------------+---------------------------------+\n\
    \        |  483                |  <not-acceptable/>              |\n        +---------------------+---------------------------------+\n\
    \        |  484                |  <item-not-found/>              |\n        +---------------------+---------------------------------+\n\
    \        |  485                |  <item-not-found/>              |\n        +---------------------+---------------------------------+\n\
    \        |  486                |  <recipient-unavailable/>       |\n        +---------------------+---------------------------------+\n\
    \        |  487                |  <recipient-unavailable/>       |\n        +---------------------+---------------------------------+\n\
    \        |  488                |  <not-acceptable/>              |\n        +---------------------+---------------------------------+\n\
    \        |  489                |  <policy-violation/> (8)        |\n        +---------------------+---------------------------------+\n\
    \        |  491                |  <unexpected-request/>          |\n        +---------------------+---------------------------------+\n\
    \        +---------------------+---------------------------------+\n        |\
    \  493                |  <bad-request/>                 |\n        +---------------------+---------------------------------+\n\
    \        |  5xx                |  <internal-server-error/>       |\n        +---------------------+---------------------------------+\n\
    \        |  500                |  <internal-server-error/>       |\n        +---------------------+---------------------------------+\n\
    \        |  501                |  <feature-not-implemented/>     |\n        +---------------------+---------------------------------+\n\
    \        |  502                |  <remote-server-not-found/>     |\n        +---------------------+---------------------------------+\n\
    \        |  503                |  <internal-server-error/> (9)   |\n        +---------------------+---------------------------------+\n\
    \        |  504                |  <remote-server-timeout/>       |\n        +---------------------+---------------------------------+\n\
    \        |  505                |  <not-acceptable/>              |\n        +---------------------+---------------------------------+\n\
    \        |  513                |  <policy-violation/>            |\n        +---------------------+---------------------------------+\n\
    \        |  6xx                |  <recipient-unavailable/>       |\n        +---------------------+---------------------------------+\n\
    \        |  600                |  <recipient-unavailable/>       |\n        +---------------------+---------------------------------+\n\
    \        |  603                |  <recipient-unavailable/>       |\n        +---------------------+---------------------------------+\n\
    \        |  604                |  <item-not-found/>              |\n        +---------------------+---------------------------------+\n\
    \        |  606                |  <not-acceptable/>              |\n        +---------------------+---------------------------------+\n\
    \     Table 3: Mapping of SIP Response Codes to XMPP Error Conditions\n   (1)\
    \  When mapping SIP 301 to XMPP <gone/>, the <gone/> element MUST\n        include\
    \ XML character data specifying the new address.  When\n        mapping SIP 410\
    \ to XMPP <gone/>, the <gone/> element MUST NOT\n        include XML character\
    \ data specifying a new address.\n   (2)  The XMPP <payment-required/> error condition\
    \ was removed in\n        [RFC6120].  Therefore, a mapping to XMPP <bad-request/>\
    \ is\n        suggested instead.\n   (3)  Depending on the scenario, other possible\
    \ translations for\n        SIP 403 are <not-allowed/> and <policy-violation/>.\n\
    \   (4)  Depending on the scenario, another possible translation for\n       \
    \ SIP 404 is <remote-server-not-found/>.\n   (5)  Depending on the scenario, another\
    \ possible translation for\n        SIP 408 is <remote-server-not-found/>.\n \
    \  (6)  Codes 430 and 439 are defined in [RFC5626].\n   (7)  Code 440 is defined\
    \ in [RFC5393].\n   (8)  Code 489 is defined in [RFC6665].\n   (9)  Regarding\
    \ the semantic mismatch between XMPP\n        <service-unavailable/> and SIP code\
    \ 503, see note (5) in\n        Section 7.1 of this document.\n"
- title: 8.  Security Considerations
  contents:
  - "8.  Security Considerations\n   Detailed security considerations for SIP and\
    \ XMPP are given in\n   [RFC3261] and [RFC6120], respectively.\n   To protect\
    \ information sent between SIP and XMPP systems, deployed\n   gateways SHOULD\
    \ use Transport Layer Security (TLS) [RFC5246] when\n   communicating over TCP\
    \ and Datagram Transport Layer Security (DTLS)\n   [RFC6347] when communicating\
    \ over UDP.\n   As specified in Section 26.4.4 of [RFC3261] and updated by [RFC5630],\n\
    \   a To header or a Request-URI containing a Session Initiation Protocol\n  \
    \ Secure (SIPS) URI is used to indicate that all hops in a\n   communication path\
    \ need to be protected using TLS.  Because XMPP\n   lacks a way to signal that\
    \ all hops need to be protected, if the To\n   header or Request-URI of a SIP\
    \ message is a SIPS URI then the SIP-to-\n   XMPP gateway MUST NOT translate the\
    \ SIP message into an XMPP stanza\n   and MUST NOT route it to the destination\
    \ XMPP server (there might be\n   exceptions to such a policy, such as explicit\
    \ agreement among two\n   operators to enforce per-hop security, but currently\
    \ they are quite\n   rare).\n   A gateway between SIP and XMPP (in either direction)\
    \ effectively acts\n   as a SIP back-to-back user agent (\"B2BUA\").  The amplification\n\
    \   vulnerability described in [RFC5393] can manifest itself with B2BUAs\n   (see\
    \ also [B2BUA-LOOP-DETECT]), and a gateway SHOULD implement the\n   loop-detection\
    \ methods defined in that specification to help mitigate\n   the possibility of\
    \ amplification attacks.  Note that although it\n   would be possible to signal\
    \ the Max-Forwards and Max-Breadth SIP\n   headers over XMPP using the Stanza\
    \ Headers and Internet Metadata\n   (SHIM) extension [XEP-0131], that extension\
    \ is not widely\n   implemented; therefore, defenses against excessive looping\
    \ and\n   amplification attacks when messages pass back and forth through SIP\n\
    \   and XMPP networks are out of scope for this document.  However, it\n   ought\
    \ to be addressed in the future, and implementations are strongly\n   encouraged\
    \ to incorporate appropriate countermeasures wherever\n   possible.\n   The ability\
    \ to use a wide range of Unicode characters [UNICODE] can\n   lead to security\
    \ issues, especially the possibility of user confusion\n   over identifiers containing\
    \ visually similar characters (also called\n   \"confusable characters\" or \"\
    confusables\").  The PRECIS framework\n   specification [PRECIS] describes some\
    \ of these security issues, and\n   additional guidance can be found in [UTS39].\n"
- title: 9.  References
  contents:
  - '9.  References

    '
- title: 9.1.  Normative References
  contents:
  - "9.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use in\
    \ RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119, March\
    \ 1997.\n   [RFC3261]  Rosenberg, J., Schulzrinne, H., Camarillo, G., Johnston,\n\
    \              A., Peterson, J., Sparks, R., Handley, M., and E.\n           \
    \   Schooler, \"SIP: Session Initiation Protocol\", RFC 3261,\n              June\
    \ 2002.\n   [RFC3263]  Rosenberg, J. and H. Schulzrinne, \"Session Initiation\n\
    \              Protocol (SIP): Locating SIP Servers\", RFC 3263,\n           \
    \   June 2002.\n   [RFC3986]  Berners-Lee, T., Fielding, R., and L. Masinter,\
    \ \"Uniform\n              Resource Identifier (URI): Generic Syntax\", STD 66,\n\
    \              RFC 3986, January 2005.\n   [RFC3987]  Duerst, M. and M. Suignard,\
    \ \"Internationalized Resource\n              Identifiers (IRIs)\", RFC 3987,\
    \ January 2005.\n   [RFC5234]  Crocker, D. and P. Overell, \"Augmented BNF for\
    \ Syntax\n              Specifications: ABNF\", STD 68, RFC 5234, January 2008.\n\
    \   [RFC5246]  Dierks, T. and E. Rescorla, \"The Transport Layer Security\n  \
    \            (TLS) Protocol Version 1.2\", RFC 5246, August 2008.\n   [RFC5393]\
    \  Sparks, R., Lawrence, S., Hawrylyshen, A., and B. Campen,\n              \"\
    Addressing an Amplification Vulnerability in Session\n              Initiation\
    \ Protocol (SIP) Forking Proxies\", RFC 5393,\n              December 2008.\n\
    \   [RFC5627]  Rosenberg, J., \"Obtaining and Using Globally Routable User\n \
    \             Agent URIs (GRUUs) in the Session Initiation Protocol\n        \
    \      (SIP)\", RFC 5627, October 2009.\n   [RFC5630]  Audet, F., \"The Use of\
    \ the SIPS URI Scheme in the Session\n              Initiation Protocol (SIP)\"\
    , RFC 5630, October 2009.\n   [RFC6120]  Saint-Andre, P., \"Extensible Messaging\
    \ and Presence\n              Protocol (XMPP): Core\", RFC 6120, March 2011.\n\
    \   [RFC6122]  Saint-Andre, P., \"Extensible Messaging and Presence\n        \
    \      Protocol (XMPP): Address Format\", RFC 6122, March 2011.\n   [RFC6347]\
    \  Rescorla, E. and N. Modadugu, \"Datagram Transport Layer\n              Security\
    \ Version 1.2\", RFC 6347, January 2012.\n   [UNICODE]  The Unicode Consortium,\
    \ \"The Unicode Standard,\n              Version 6.3\", 2013,\n              <http://www.unicode.org/versions/Unicode6.3.0/>.\n"
- title: 9.2.  Informative References
  contents:
  - "9.2.  Informative References\n   [B2BUA-LOOP-DETECT]\n              Kaplan, H.\
    \ and V. Pascual, \"Loop Detection Mechanisms for\n              Session Initiation\
    \ Protocol (SIP) Back-to-Back User Agents\n              (B2BUAs)\", Work in Progress,\
    \ February 2014.\n   [PRECIS]   Saint-Andre, P. and M. Blanchet, \"PRECIS Framework:\n\
    \              Preparation and Comparison of Internationalized Strings in\n  \
    \            Application Protocols\", Work in Progress, April 2014.\n   [RFC2782]\
    \  Gulbrandsen, A., Vixie, P., and L. Esibov, \"A DNS RR for\n              specifying\
    \ the location of services (DNS SRV)\", RFC 2782,\n              February 2000.\n\
    \   [RFC3428]  Campbell, B., Rosenberg, J., Schulzrinne, H., Huitema, C.,\n  \
    \            and D. Gurle, \"Session Initiation Protocol (SIP) Extension\n   \
    \           for Instant Messaging\", RFC 3428, December 2002.\n   [RFC3454]  Hoffman,\
    \ P. and M. Blanchet, \"Preparation of\n              Internationalized Strings\
    \ (\"stringprep\")\", RFC 3454,\n              December 2002.\n   [RFC3856]  Rosenberg,\
    \ J., \"A Presence Event Package for the Session\n              Initiation Protocol\
    \ (SIP)\", RFC 3856, August 2004.\n   [RFC3859]  Peterson, J., \"Common Profile\
    \ for Presence (CPP)\",\n              RFC 3859, August 2004.\n   [RFC3860]  Peterson,\
    \ J., \"Common Profile for Instant Messaging\n              (CPIM)\", RFC 3860,\
    \ August 2004.\n   [RFC3966]  Schulzrinne, H., \"The tel URI for Telephone Numbers\"\
    ,\n              RFC 3966, December 2004.\n   [RFC5122]  Saint-Andre, P., \"Internationalized\
    \ Resource Identifiers\n              (IRIs) and Uniform Resource Identifiers\
    \ (URIs) for the\n              Extensible Messaging and Presence Protocol (XMPP)\"\
    ,\n              RFC 5122, February 2008.\n   [RFC5322]  Resnick, P., Ed., \"\
    Internet Message Format\", RFC 5322,\n              October 2008.\n   [RFC5626]\
    \  Jennings, C., Mahy, R., and F. Audet, \"Managing Client-\n              Initiated\
    \ Connections in the Session Initiation Protocol\n              (SIP)\", RFC 5626,\
    \ October 2009.\n   [RFC6121]  Saint-Andre, P., \"Extensible Messaging and Presence\n\
    \              Protocol (XMPP): Instant Messaging and Presence\",\n          \
    \    RFC 6121, March 2011.\n   [RFC6665]  Roach, A., \"SIP-Specific Event Notification\"\
    , RFC 6665,\n              July 2012.\n   [UTS39]    The Unicode Consortium, \"\
    Unicode Technical Standard #39:\n              Unicode Security Mechanisms\",\
    \ November 2013,\n              <http://unicode.org/reports/tr39/>.\n   [XEP-0106]\
    \ Hildebrand, J. and P. Saint-Andre, \"JID Escaping\",\n              XSF XEP\
    \ 0106, June 2007,\n              <http://www.xmpp.org/extensions/xep-0106.html>.\n\
    \   [XEP-0131] Saint-Andre, P. and J. Hildebrand, \"Stanza Headers and\n     \
    \         Internet Metadata\", XSF XEP 0131, July 2006,\n              <http://xmpp.org/extensions/xep-0131.html>.\n\
    \   [XMPP-ADDRESS-FORMAT]\n              Saint-Andre, P., \"Extensible Messaging\
    \ and Presence\n              Protocol (XMPP): Address Format\", Work in Progress,\n\
    \              March 2014.\n"
- title: Appendix A.  Acknowledgements
  contents:
  - "Appendix A.  Acknowledgements\n   The authors wish to thank the following individuals\
    \ for their\n   feedback: Mary Barnes, Dave Cridland, Dave Crocker, Mike De Vries,\n\
    \   Fabio Forno, Adrian Georgescu, Philipp Hancke, Saul Ibarra Corretge,\n   Markus\
    \ Isomaki, Olle Johansson, Paul Kyzivat, Salvatore Loreto,\n   Daniel-Constantin\
    \ Mierla, Tory Patnoe, and Robert Sparks.\n   Dan Romascanu reviewed the document\
    \ on behalf of the General Area\n   Review Team.\n   During IESG review, Stephen\
    \ Farrell, Ted Lemon, Pete Resnick, and\n   Sean Turner caught several issues\
    \ that needed to be addressed.\n   The authors gratefully acknowledge the assistance\
    \ of Markus Isomaki\n   and Yana Stamcheva as the working group chairs and Gonzalo\
    \ Camarillo\n   as the sponsoring Area Director.\n   Peter Saint-Andre wishes\
    \ to acknowledge Cisco Systems, Inc., for\n   employing him during his work on\
    \ earlier versions of this document.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Peter Saint-Andre\n   &yet\n   EMail: ietf@stpeter.im\n\
    \   Avshalom Houri\n   IBM\n   Rorberg Building, Pekris 3\n   Rehovot  76123\n\
    \   Israel\n   EMail: avshalom@il.ibm.com\n   Joe Hildebrand\n   Cisco Systems,\
    \ Inc.\n   1899 Wynkoop Street, Suite 600\n   Denver, CO  80202\n   USA\n   EMail:\
    \ jhildebr@cisco.com\n"
