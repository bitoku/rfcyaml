- title: __initial_text__
  contents:
  - "        Profile for Datagram Congestion Control Protocol (DCCP)\n          Congestion\
    \ Control ID 2: TCP-like Congestion Control\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2006).\n"
- title: Abstract
  contents:
  - "Abstract\n   This document contains the profile for Congestion Control Identifier\n\
    \   2 (CCID 2), TCP-like Congestion Control, in the Datagram Congestion\n   Control\
    \ Protocol (DCCP).  CCID 2 should be used by senders who would\n   like to take\
    \ advantage of the available bandwidth in an environment\n   with rapidly changing\
    \ conditions, and who are able to adapt to the\n   abrupt changes in the congestion\
    \ window typical of TCP's Additive\n   Increase Multiplicative Decrease (AIMD)\
    \ congestion control.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................2\n\
    \   2. Conventions and Notation ........................................2\n  \
    \ 3. Usage ...........................................................3\n    \
    \  3.1. Relationship with TCP ......................................3\n      3.2.\
    \ Half-Connection Example ....................................4\n   4. Connection\
    \ Establishment ........................................5\n   5. Congestion Control\
    \ on Data Packets ..............................5\n      5.1. Response to Idle\
    \ and Application-Limited Periods ...........8\n      5.2. Response to Data Dropped\
    \ and Slow Receiver .................8\n      5.3. Packet Size ................................................8\n\
    \   6. Acknowledgements ................................................9\n  \
    \    6.1. Congestion Control on Acknowledgements .....................9\n    \
    \       6.1.1. Detecting Lost and Marked Acknowledgements .........10\n      \
    \     6.1.2. Changing Ack Ratio .................................10\n      6.2.\
    \ Acknowledgements of Acknowledgements ......................11\n           6.2.1.\
    \ Determining Quiescence .............................12\n   7. Explicit Congestion\
    \ Notification ...............................12\n   8. Options and Features ...........................................12\n\
    \   9. Security Considerations ........................................13\n  \
    \ 10. IANA Considerations ...........................................13\n    \
    \  10.1. Reset Codes ..............................................13\n      10.2.\
    \ Option Types .............................................13\n      10.3. Feature\
    \ Numbers ..........................................14\n   11. Thanks ........................................................14\n\
    \   A.  Appendix: Derivation of Ack Ratio Decrease ....................15\n  \
    \ B.  Appendix: Cost of Loss Inference Mistakes to Ack Ratio ........15\n   Normative\
    \ References ..............................................17\n   Informative\
    \ References ............................................18\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   This document contains the profile for Congestion Control\
    \ Identifier\n   2 (CCID 2), TCP-like Congestion Control, in the Datagram Congestion\n\
    \   Control Protocol (DCCP) [RFC4340].  DCCP uses Congestion Control\n   Identifiers,\
    \ or CCIDs, to specify the congestion control mechanism in\n   use on a half-connection.\n\
    \   The TCP-like Congestion Control CCID sends data using a close variant\n  \
    \ of TCP's congestion control mechanisms, incorporating a variant of\n   selective\
    \ acknowledgements (SACK) [RFC2018, RFC3517].  CCID 2 is\n   suitable for senders\
    \ who can adapt to the abrupt changes in\n   congestion window typical of TCP's\
    \ Additive Increase Multiplicative\n   Decrease (AIMD) congestion control, and\
    \ particularly useful for\n   senders who would like to take advantage of the\
    \ available bandwidth\n   in an environment with rapidly changing conditions.\
    \  See Section 3\n   for more on application requirements.\n"
- title: 2.  Conventions and Notation
  contents:
  - "2.  Conventions and Notation\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\"\
    , \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"\
    MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described\
    \ in [RFC2119].\n   A DCCP half-connection consists of the application data sent\
    \ by one\n   endpoint and the corresponding acknowledgements sent by the other\n\
    \   endpoint.  The terms \"HC-Sender\" and \"HC-Receiver\" denote the\n   endpoints\
    \ sending application data and acknowledgements,\n   respectively.  Since CCIDs\
    \ apply at the level of half-connections, we\n   abbreviate HC-Sender to \"sender\"\
    \ and HC-Receiver to \"receiver\" in\n   this document.  See [RFC4340] for more\
    \ discussion.\n   For simplicity, we say that senders send DCCP-Data packets and\n\
    \   receivers send DCCP-Ack packets.  Both of these categories are meant\n   to\
    \ include DCCP-DataAck packets.\n   The phrases \"ECN-marked\" and \"marked\"\
    \ refer to packets marked ECN\n   Congestion Experienced unless otherwise noted.\n"
- title: 3.  Usage
  contents:
  - "3.  Usage\n   CCID 2, TCP-like Congestion Control, is appropriate for DCCP flows\n\
    \   that would like to receive as much bandwidth as possible over the\n   long\
    \ term, consistent with the use of end-to-end congestion control.\n   CCID 2 flows\
    \ must also tolerate the large sending rate variations\n   characteristic of AIMD\
    \ congestion control, including halving of the\n   congestion window in response\
    \ to a congestion event.\n   Applications that simply need to transfer as much\
    \ data as possible in\n   as short a time as possible should use CCID 2.  This\
    \ contrasts with\n   CCID 3, TCP-Friendly Rate Control (TFRC) [RFC4342], which\
    \ is\n   appropriate for flows that would prefer to minimize abrupt changes in\n\
    \   the sending rate.  For example, CCID 2 is recommended over CCID 3 for\n  \
    \ streaming media applications that buffer a considerable amount of\n   data at\
    \ the application receiver before playback time, insulating the\n   application\
    \ somewhat from abrupt changes in the sending rate.  Such\n   applications could\
    \ easily choose DCCP's CCID 2 over TCP itself,\n   possibly adding some form of\
    \ selective reliability at the application\n   layer.  CCID 2 is also recommended\
    \ over CCID 3 for applications where\n   halving the sending rate in response\
    \ to congestion is not likely to\n   interfere with application-level performance.\n\
    \   An additional advantage of CCID 2 is that its TCP-like congestion\n   control\
    \ mechanisms are reasonably well understood, with traffic\n   dynamics quite similar\
    \ to those of TCP.  While the network research\n   community is still learning\
    \ about the dynamics of TCP after 15 years\n   of its being the dominant transport\
    \ protocol in the Internet, some\n   applications might prefer the more well-known\
    \ dynamics of TCP-like\n   congestion control over those of newer congestion control\
    \ mechanisms,\n   which haven't yet met the test of widespread Internet deployment.\n"
- title: 3.1.  Relationship with TCP
  contents:
  - "3.1.  Relationship with TCP\n   The congestion control mechanisms described here\
    \ closely follow\n   mechanisms standardized by the IETF for use in SACK-based\
    \ TCP, and we\n   rely partially on existing TCP documentation, such as [RFC793],\n\
    \   [RFC2581], [RFC3465], and [RFC3517].  TCP congestion control\n   continues\
    \ to evolve, but CCID 2 implementations SHOULD wait for\n   explicit updates to\
    \ CCID 2 rather than track TCP's evolution\n   directly.\n   Differences between\
    \ CCID 2 and straight TCP congestion control\n   include the following:\n   o\
    \  CCID 2 applies congestion control to acknowledgements, a mechanism\n      not\
    \ currently standardized for use in TCP.\n   o  DCCP is a datagram protocol, so\
    \ several parameters whose units are\n      specified in bytes in TCP, such as\
    \ the congestion window cwnd,\n      have units of packets in DCCP.\n   o  As\
    \ an unreliable protocol, DCCP never retransmits a packet, so\n      congestion\
    \ control mechanisms that distinguish retransmissions\n      from new packets\
    \ have been redesigned for the DCCP context.\n"
- title: 3.2.  Half-Connection Example
  contents:
  - "3.2.  Half-Connection Example\n   This example shows the typical progress of\
    \ a half-connection using\n   CCID 2's TCP-like Congestion Control, not including\
    \ connection\n   initiation and termination.  The example is informative, not\n\
    \   normative.\n   1. The sender sends DCCP-Data packets, where the number of\
    \ packets\n      sent is governed by a congestion window, cwnd, as in TCP.  Each\n\
    \      DCCP-Data packet uses a sequence number.  The sender also sends an\n  \
    \    Ack Ratio feature option specifying the number of data packets to\n     \
    \ be covered by an Ack packet from the receiver; Ack Ratio defaults\n      to\
    \ two.  The DCCP header's CCVal field is set to zero.\n      Assuming that the\
    \ half-connection is Explicit Congestion\n      Notification (ECN) capable (the\
    \ ECN Incapable feature is zero, the\n      default), each DCCP-Data packet is\
    \ sent as ECN Capable with either\n      the ECT(0) or the ECT(1) codepoint set,\
    \ as described in [RFC3540].\n   2. The receiver sends a DCCP-Ack packet acknowledging\
    \ the data\n      packets for every Ack Ratio data packets transmitted by the\n\
    \      sender.  Each DCCP-Ack packet uses a sequence number and contains\n   \
    \   an Ack Vector.  The sequence number acknowledged in a DCCP-Ack\n      packet\
    \ is that of the received packet with the highest sequence\n      number; it is\
    \ not a TCP-like cumulative acknowledgement.\n      The receiver returns the sum\
    \ of received ECN Nonces via Ack Vector\n      options, allowing the sender to\
    \ probabilistically verify that the\n      receiver is not misbehaving.  DCCP-Ack\
    \ packets from the receiver\n      are also sent as ECN Capable, since the sender\
    \ will control the\n      acknowledgement rate in a roughly TCP-friendly way using\
    \ the Ack\n      Ratio feature.  There is little need for the receiver to verify\n\
    \      the nonces of its DCCP-Ack packets, since the sender cannot get\n     \
    \ significant benefit from misreporting the ack mark rate.\n   3. The sender continues\
    \ sending DCCP-Data packets as controlled by\n      the congestion window.  Upon\
    \ receiving DCCP-Ack packets, the\n      sender examines their Ack Vectors to\
    \ learn about marked or dropped\n      data packets and adjusts its congestion\
    \ window accordingly.\n      Because this is unreliable transfer, the sender does\
    \ not\n      retransmit dropped packets.\n   4. Because DCCP-Ack packets use sequence\
    \ numbers, the sender has some\n      information about lost or marked DCCP-Ack\
    \ packets.  The sender\n      responds to lost or marked DCCP-Ack packets by modifying\
    \ the Ack\n      Ratio sent to the receiver.\n   5. The sender acknowledges the\
    \ receiver's acknowledgements at least\n      once per congestion window.  If\
    \ both half-connections are active,\n      the sender's acknowledgement of the\
    \ receiver's acknowledgements is\n      included in the sender's acknowledgement\
    \ of the receiver's data\n      packets.  If the reverse-path half-connection\
    \ is quiescent, the\n      sender sends at least one DCCP-DataAck packet per congestion\n\
    \      window.\n   6. The sender estimates round-trip times, either through keeping\n\
    \      track of acknowledgement round-trip times as TCP does or through\n    \
    \  explicit Timestamp options, and calculates a TimeOut (TO) value\n      much\
    \ as the RTO (Retransmit Timeout) is calculated in TCP.  The TO\n      determines\
    \ when a new DCCP-Data packet can be transmitted when the\n      sender has been\
    \ limited by the congestion window and no feedback\n      has been received from\
    \ the receiver.\n"
- title: 4.  Connection Establishment
  contents:
  - "4.  Connection Establishment\n   Use of the Ack Vector is MANDATORY on CCID 2\
    \ half-connections, so the\n   sender MUST send a \"Change R(Send Ack Vector,\
    \ 1)\" option to the\n   receiver as part of connection establishment.  The sender\
    \ SHOULD NOT\n   send data until it has received the corresponding \"Confirm L(Send\
    \ Ack\n   Vector, 1)\" from the receiver, except that it MAY send data on DCCP-\n\
    \   Request packets.\n"
- title: 5.  Congestion Control on Data Packets
  contents:
  - "5.  Congestion Control on Data Packets\n   CCID 2's congestion control mechanisms\
    \ are based on those for SACK-\n   based TCP [RFC3517], since the Ack Vector provides\
    \ all the\n   information that might be transmitted in SACK options.\n   A CCID\
    \ 2 data sender maintains three integer parameters measured in\n   packets.\n\
    \   1. The congestion window \"cwnd\", which equals the maximum number of\n  \
    \    data packets allowed in the network at any time.  (\"Data packet\"\n    \
    \  means any DCCP packet that contains user data: DCCP-Data, DCCP-\n      DataAck,\
    \ and occasionally DCCP-Request and DCCP-Response.)\n   2. The slow-start threshold\
    \ \"ssthresh\", which controls adjustments to\n      cwnd.\n   3. The pipe value\
    \ \"pipe\", which is the sender's estimate of the\n      number of data packets\
    \ outstanding in the network.\n   These parameters are manipulated, and their\
    \ initial values\n   determined, according to SACK-based TCP's behavior, except\
    \ that they\n   are measured in packets, not bytes.  The rest of this section\n\
    \   provides more specific guidance.\n   The sender MAY send a data packet when\
    \ pipe < cwnd but MUST NOT send\n   a data packet when pipe >= cwnd.  Every data\
    \ packet sent increases\n   pipe by 1.\n   The sender reduces pipe as it infers\
    \ that data packets have left the\n   network, either by being received or by\
    \ being dropped.  In\n   particular:\n   1. Acked data packets.  The sender reduces\
    \ pipe by 1 for each data\n      packet newly acknowledged as received (Ack Vector\
    \ State 0 or State\n      1) by some DCCP-Ack.\n   2. Dropped data packets.  The\
    \ sender reduces pipe by 1 for each data\n      packet it can infer as lost due\
    \ to the DCCP equivalent of TCP's\n      \"duplicate acknowledgements\".  This\
    \ depends on the NUMDUPACK\n      parameter, the number of duplicate acknowledgements\
    \ needed to\n      infer a loss.  The NUMDUPACK parameter is set to three, as\
    \ is\n      currently the case in TCP.  A packet P is inferred to be lost,\n \
    \     rather than delayed, when at least NUMDUPACK packets transmitted\n     \
    \ after P have been acknowledged as received (Ack Vector State 0 or\n      1)\
    \ by the receiver.  Note that the acknowledged packets following\n      the hole\
    \ may be DCCP-Acks or other non-data packets.\n   3. Transmit timeouts.  Finally,\
    \ the sender needs transmit timeouts,\n      handled like TCP's retransmission\
    \ timeouts, in case an entire\n      window of packets is lost.  The sender estimates\
    \ the round-trip\n      time at most once per window of data and uses the TCP\
    \ algorithms\n      for maintaining the average round-trip time, mean deviation,\
    \ and\n      timeout value [RFC2988].  (If more than one measurement per\n   \
    \   round-trip time was used for these calculations, then the weights\n      of\
    \ the averagers would have to be adjusted to ensure that the\n      average round-trip\
    \ time is effectively derived from measurements\n      over multiple round-trip\
    \ times.)  Because DCCP does not retransmit\n      data, DCCP does not require\
    \ TCP's recommended minimum timeout of\n      one second.  The exponential backoff\
    \ of the timer is exactly as in\n      TCP.  When a transmit timeout occurs, the\
    \ sender sets pipe to\n      zero.  The adjustments to cwnd and ssthresh are described\
    \ below.\n   The sender MUST NOT decrement pipe more than once per data packet.\n\
    \   True duplicate acknowledgements, for example, MUST NOT affect pipe.\n   The\
    \ sender also MUST NOT decrement pipe again upon receiving\n   acknowledgement\
    \ of a packet previously inferred as lost.\n   Furthermore, the sender MUST NOT\
    \ decrement pipe for non-data packets,\n   such as DCCP-Acks, even though the\
    \ Ack Vector will contain\n   information about them.\n   Congestion events cause\
    \ CCID 2 to reduce its congestion window.  A\n   congestion event contains at\
    \ least one lost or marked packet.  As in\n   TCP, two losses or marks are considered\
    \ part of a single congestion\n   event when the second packet was sent before\
    \ the loss or mark of the\n   first packet was detected.  As an approximation,\
    \ a sender can\n   consider two losses or marks to be part of a single congestion\
    \ event\n   when the packets were sent within one RTT estimate of one another,\n\
    \   using an RTT estimate current at the time the packets were sent.  For\n  \
    \ each congestion event, either indicated explicitly as an Ack Vector\n   State\
    \ 1 (ECN-marked) acknowledgement or inferred via \"duplicate\n   acknowledgements\"\
    , cwnd is halved, then ssthresh is set to the new\n   cwnd.  Cwnd is never reduced\
    \ below one packet.  After a timeout, the\n   slow-start threshold is set to cwnd/2,\
    \ then cwnd is set to one\n   packet.  When halved, cwnd and ssthresh have their\
    \ values rounded\n   down, except that cwnd is never less than one and ssthresh\
    \ is never\n   less than two.\n   When cwnd < ssthresh, meaning that the sender\
    \ is in slow-start, the\n   congestion window is increased by one packet for every\
    \ two newly\n   acknowledged data packets with Ack Vector State 0 (not ECN-marked),\n\
    \   up to a maximum of Ack Ratio/2 packets per acknowledgement.  This is\n   a\
    \ modified form of Appropriate Byte Counting [RFC3465] that is\n   consistent\
    \ with TCP's current standard (which does not include byte\n   counting), but\
    \ allows CCID 2 to increase as aggressively as TCP when\n   CCID 2's Ack Ratio\
    \ is greater than the default value of two.  When\n   cwnd >= ssthresh, the congestion\
    \ window is increased by one packet\n   for every window of data acknowledged\
    \ without lost or marked packets.\n   The cwnd parameter is initialized to at\
    \ most four packets for new\n   connections, following the rules from [RFC3390];\
    \ the ssthresh\n   parameter is initialized to an arbitrarily high value.\n  \
    \ Senders MAY use a form of rate-based pacing when sending multiple\n   data packets\
    \ liberated by a single ack packet, rather than sending\n   all liberated data\
    \ packets in a single burst.\n"
- title: 5.1.  Response to Idle and Application-Limited Periods
  contents:
  - "5.1.  Response to Idle and Application-Limited Periods\n   CCID 2 is designed\
    \ to follow TCP's congestion control mechanisms to\n   the extent possible, but\
    \ TCP does not have complete standardization\n   for its congestion control response\
    \ to idle periods (when no data\n   packets are sent) or to application-limited\
    \ periods (when the sending\n   rate is less than that allowed by cwnd).  This\
    \ section is a brief\n   guide to the standards for TCP in this area.\n   For\
    \ idle periods, [RFC2581] recommends that the TCP sender SHOULD\n   slow-start\
    \ after an idle period, where an idle period is defined as a\n   period exceeding\
    \ the timeout interval.  [RFC2861], currently\n   Experimental, suggests a slightly\
    \ more moderate mechanism where the\n   congestion window is halved for every\
    \ round-trip time that the sender\n   has remained idle.\n   There are currently\
    \ no standards governing TCP's use of the\n   congestion window during an application-limited\
    \ period.  In\n   particular, it is possible for TCP's congestion window to grow\
    \ quite\n   large during a long uncongested period when the sender is application\n\
    \   limited, sending at a low rate.  [RFC2861] essentially suggests that\n   TCP's\
    \ congestion window not be increased during application-limited\n   periods when\
    \ the congestion window is not being fully utilized.\n"
- title: 5.2.  Response to Data Dropped and Slow Receiver
  contents:
  - "5.2.  Response to Data Dropped and Slow Receiver\n   DCCP's Data Dropped option\
    \ lets a receiver declare that a packet was\n   dropped at the end host before\
    \ delivery to the application -- for\n   instance, because of corruption or receive\
    \ buffer overflow.  DCCP's\n   Slow Receiver option lets a receiver declare that\
    \ it is having\n   trouble keeping up with the sender's packets, although nothing\
    \ has\n   yet been dropped.  CCID 2 senders respond to these options as\n   described\
    \ in [RFC4340], with the following further clarifications.\n   o  Drop Code 2\
    \ (\"receive buffer drop\").  The congestion window \"cwnd\"\n      is reduced\
    \ by one for each packet newly acknowledged as Drop Code\n      2, except that\
    \ it is never reduced below one.\n   o  Exiting slow start.  The sender MUST exit\
    \ slow start whenever it\n      receives a relevant Data Dropped or Slow Receiver\
    \ option.\n"
- title: 5.3.  Packet Size
  contents:
  - "5.3.  Packet Size\n   CCID 2 is optimized for applications that generally use\
    \ a fixed\n   packet size and vary their sending rate in packets per second in\n\
    \   response to congestion.  CCID 2 is not appropriate for applications\n   that\
    \ require a fixed interval of time between packets and vary their\n   packet size\
    \ instead of their packet rate in response to congestion.\n   CCID 2 maintains\
    \ a congestion window in packets and does not increase\n   the congestion window\
    \ in response to a decrease in the packet size.\n   However, some attention might\
    \ be required for applications using CCID\n   2 that vary their packet size not\
    \ in response to congestion, but in\n   response to other application-level requirements.\n\
    \   CCID 2 implementations MAY check for applications that appear to be\n   manipulating\
    \ the packet size inappropriately.  For example, an\n   application might send\
    \ small packets for a while, building up a fast\n   rate, then switch to large\
    \ packets to take advantage of the fast\n   rate.  (Preliminary simulations indicate\
    \ that applications may not be\n   able to increase their overall transfer rates\
    \ this way, so it is not\n   clear that this manipulation will occur in practice\
    \ [V03].)\n"
- title: 6.  Acknowledgements
  contents:
  - "6.  Acknowledgements\n   CCID 2 acknowledgements are generally paced by the sender's\
    \ data\n   packets.  Each required acknowledgement MUST contain Ack Vector\n \
    \  options that declare exactly which packets arrived and whether those\n   packets\
    \ were ECN-marked.  Acknowledgement data in the Ack Vector\n   options SHOULD\
    \ generally cover the receiver's entire Acknowledgement\n   Window; see [RFC4340],\
    \ Section 11.4.2.  Any Data Dropped options\n   SHOULD likewise cover the receiver's\
    \ entire Acknowledgement Window.\n   CCID 2 senders use DCCP's Ack Ratio feature\
    \ to influence the rate at\n   which receivers generate DCCP-Ack packets, thus\
    \ controlling reverse-\n   path congestion.  This differs from TCP, which presently\
    \ has no\n   congestion control for pure acknowledgement traffic.  CCID 2's\n\
    \   reverse-path congestion control does not try to be TCP friendly; it\n   just\
    \ tries to avoid congestion collapse, and to be somewhat better\n   than TCP is\
    \ in the presence of a high packet loss or mark rate on the\n   reverse path.\
    \  The default Ack Ratio is two, and CCID 2 with this Ack\n   Ratio behaves like\
    \ TCP with delayed acks.  [RFC4340], Section 11.3,\n   describes the Ack Ratio\
    \ in more detail, including its relationship to\n   acknowledgement pacing and\
    \ DCCP-DataAck packets.  This document's\n   Section 6.1.1 describes how a CCID\
    \ 2 sender detects lost or marked\n   acknowledgements, and Section 6.1.2 describes\
    \ how it changes the Ack\n   Ratio.\n"
- title: 6.1.  Congestion Control on Acknowledgements
  contents:
  - "6.1.  Congestion Control on Acknowledgements\n   When Ack Ratio is R, the receiver\
    \ sends one DCCP-Ack packet per R\n   data packets, more or less.  Since the sender\
    \ sends cwnd data packets\n   per round-trip time, the acknowledgement rate equals\
    \ cwnd/R DCCP-Acks\n   per round-trip time.  The sender keeps the acknowledgement\
    \ rate\n   roughly TCP friendly by monitoring the acknowledgement stream for\n\
    \   lost and marked DCCP-Ack packets and modifying R accordingly.  For\n   every\
    \ RTT containing a DCCP-Ack congestion event (that is, a lost or\n   marked DCCP-Ack),\
    \ the sender halves the acknowledgement rate by\n   doubling Ack Ratio; for every\
    \ RTT containing no DCCP-Ack congestion\n   event, it additively increases the\
    \ acknowledgement rate through\n   gradual decreases in Ack Ratio.\n"
- title: 6.1.1.  Detecting Lost and Marked Acknowledgements
  contents:
  - "6.1.1.  Detecting Lost and Marked Acknowledgements\n   All packets from the receiver\
    \ contain sequence numbers, so the sender\n   can detect both losses and marks\
    \ on the receiver's packets.  The\n   sender infers receiver packet loss in the\
    \ same way that it infers\n   losses of its data packets: a packet from the receiver\
    \ is considered\n   lost after at least NUMDUPACK packets with greater sequence\
    \ numbers\n   have been received.\n   DCCP-Ack packets are generally small, so\
    \ they might impose less load\n   on congested network links than DCCP-Data and\
    \ DCCP-DataAck packets.\n   For this reason, Ack Ratio depends on losses and marks\
    \ on the\n   receiver's non-data packets, not on aggregate losses and marks on\
    \ all\n   of the receiver's packets.  The non-data packet category consists of\n\
    \   those packet types that cannot carry application data: DCCP-Ack,\n   DCCP-Close,\
    \ DCCP-CloseReq, DCCP-Reset, DCCP-Sync, and DCCP-SyncAck.\n   The sender can easily\
    \ distinguish non-data marks from other marks.\n   This is harder for losses,\
    \ though, since the sender can't always know\n   whether a lost packet carried\
    \ data.  Unless it has better\n   information, the sender SHOULD assume, for the\
    \ purpose of Ack Ratio\n   calculation, that every lost packet was a non-data\
    \ packet.  Better\n   information is available via DCCP's NDP Count option, if\
    \ necessary.\n   (Appendix B discusses the costs of mistaking data packet loss\
    \ for\n   non-data packet loss.)\n   A receiver that implements its own acknowledgement\
    \ congestion control\n   independent of Ack Ratio SHOULD NOT reduce its DCCP-Ack\n\
    \   acknowledgement rate due to losses or marks on its data packets.\n"
- title: 6.1.2.  Changing Ack Ratio
  contents:
  - "6.1.2.  Changing Ack Ratio\n   Ack Ratio always meets three constraints: (1)\
    \ Ack Ratio is an\n   integer.  (2) Ack Ratio does not exceed cwnd/2, rounded\
    \ up, except\n   that Ack Ratio 2 is always acceptable.  (3) Ack Ratio is two\
    \ or more\n   for a congestion window of four or more packets.\n   The sender\
    \ changes Ack Ratio within those constraints as follows.\n   For each congestion\
    \ window of data with lost or marked DCCP-Ack\n   packets, Ack Ratio is doubled;\
    \ and for each cwnd/(R^2 - R)\n   consecutive congestion windows of data with\
    \ no lost or marked DCCP-\n   Ack packets, Ack Ratio is decreased by 1.  (See\
    \ Appendix A for the\n   derivation.)  Changes in Ack Ratio are signalled through\
    \ feature\n   negotiation; see [RFC4340], Section 11.3.\n   For a constant congestion\
    \ window, this gives an Ack sending rate that\n   is roughly TCP friendly.  Of\
    \ course, cwnd usually varies over time;\n   the dynamics will be rather complex,\
    \ but roughly TCP friendly.  We\n   recommend that the sender use the most recent\
    \ value of cwnd when\n   determining whether to decrease Ack Ratio by 1.\n   The\
    \ sender need not keep Ack Ratio completely up to date.  For\n   instance, it\
    \ MAY rate-limit Ack Ratio renegotiations to once every\n   four or five round-trip\
    \ times, or to once every second or two.  The\n   sender SHOULD NOT attempt to\
    \ renegotiate the Ack Ratio more than once\n   per round-trip time.  Additionally,\
    \ it MAY enforce a minimum Ack\n   Ratio of two, or it MAY set Ack Ratio to one\
    \ for half-connections\n   with persistent congestion windows of 1 or 2 packets.\n\
    \   Putting it all together, the receiver always sends at least one\n   acknowledgement\
    \ per window of data when cwnd = 1, and at least two\n   acknowledgements per\
    \ window of data otherwise.  Thus, the receiver\n   could be sending two ack packets\
    \ per window of data even in the face\n   of very heavy congestion on the reverse\
    \ path.  We would note,\n   however, that if congestion is sufficiently heavy,\
    \ all the ack\n   packets are dropped, and then the sender falls back on an\n\
    \   exponentially backed-off timeout, as in TCP.  Thus, if congestion is\n   sufficiently\
    \ heavy on the reverse path, then the sender reduces its\n   sending rate on the\
    \ forward path, which reduces the rate on the\n   reverse path as well.\n"
- title: 6.2.  Acknowledgements of Acknowledgements
  contents:
  - "6.2.  Acknowledgements of Acknowledgements\n   An active sender DCCP A MUST occasionally\
    \ acknowledge its peer DCCP\n   B's acknowledgements so that DCCP B can free up\
    \ Ack Vector state.\n   When both half-connections are active, A's acknowledgements\
    \ of B's\n   acknowledgements are automatically contained in A's acknowledgements\n\
    \   of B's data.  If the B-to-A half-connection is quiescent, however,\n   DCCP\
    \ A must occasionally send acknowledgements proactively, such as\n   by sending\
    \ a DCCP-DataAck packet that includes an Acknowledgement\n   Number in the header.\n\
    \   An active sender SHOULD acknowledge the receiver's acknowledgements\n   at\
    \ least once per congestion window.  Of course, the sender's\n   application might\
    \ fall silent.  This is no problem; when neither side\n   is sending data, a sender\
    \ can wait arbitrarily long before sending an\n   ack.\n"
- title: 6.2.1.  Determining Quiescence
  contents:
  - "6.2.1.  Determining Quiescence\n   This section describes how a CCID 2 receiver\
    \ determines that the\n   corresponding sender is not sending any data and therefore\
    \ has gone\n   quiescent.  See [RFC4340], Section 11.1, for general information\
    \ on\n   quiescence.\n   Let T equal the greater of 0.2 seconds and two round-trip\
    \ times.\n   (The receiver may know the round-trip time in its role as the sender\n\
    \   for the other half-connection.  If it does not, it should use a\n   default\
    \ RTT of 0.2 seconds, as described in [RFC4340], Section 3.4.)\n   Once the sender\
    \ acknowledges the receiver's Ack Vectors and the\n   sender has not sent additional\
    \ data for at least T seconds, the\n   receiver can infer that the sender is quiescent.\
    \  More precisely, the\n   receiver infers that the sender has gone quiescent\
    \ when at least T\n   seconds have passed without receiving any data from the\
    \ sender, and\n   when the sender has acknowledged receiver Ack Vectors covering\
    \ all\n   data packets received at the receiver.\n"
- title: 7.  Explicit Congestion Notification
  contents:
  - "7.  Explicit Congestion Notification\n   CCID 2 supports Explicit Congestion\
    \ Notification (ECN) [RFC3168].\n   The sender will use the ECN Nonce for data\
    \ packets, and the receiver\n   will echo those nonces in its Ack Vectors, as\
    \ specified in [RFC4340],\n   Section 12.2.  Information about marked packets\
    \ is also returned in\n   the Ack Vector.  Because the information in the Ack\
    \ Vector is\n   reliably transferred, DCCP does not need the TCP flags of ECN-Echo\n\
    \   and Congestion Window Reduced.\n   For unmarked data packets, the receiver\
    \ computes the ECN Nonce Echo\n   as in [RFC3540] and returns it as part of its\
    \ Ack Vector options.\n   The sender SHOULD check these ECN Nonce Echoes against\
    \ the expected\n   values, thus protecting against the accidental or malicious\n\
    \   concealment of marked packets.\n   Because CCID 2 acknowledgements are congestion\
    \ controlled, ECN may\n   also be used for its acknowledgements.  In this case\
    \ we do not make\n   use of the ECN Nonce, because it would not be easy to provide\n\
    \   protection against the concealment of marked ack packets by the\n   sender,\
    \ and because the sender does not have much motivation for\n   lying about the\
    \ mark rate on acknowledgements.\n"
- title: 8.  Options and Features
  contents:
  - "8.  Options and Features\n   DCCP's Ack Vector option, and its ECN Capable, Ack\
    \ Ratio, and Send\n   Ack Vector features, are relevant for CCID 2.\n"
- title: 9.  Security Considerations
  contents:
  - "9.  Security Considerations\n   Security considerations for DCCP have been discussed\
    \ in [RFC4340],\n   and security considerations for TCP have been discussed in\
    \ [RFC2581].\n   [RFC2581] discusses ways in which an attacker could impair the\n\
    \   performance of a TCP connection by dropping packets, or by forging\n   extra\
    \ duplicate acknowledgements or acknowledgements for new data.\n   We are not\
    \ aware of any new security considerations created by this\n   document in its\
    \ use of TCP-like congestion control.\n"
- title: 10.  IANA Considerations
  contents:
  - "10.  IANA Considerations\n   This specification defines the value 2 in the DCCP\
    \ CCID namespace\n   managed by IANA.  This assignment is also mentioned in [RFC4340].\n\
    \   CCID 2 also introduces three sets of numbers whose values should be\n   allocated\
    \ by IANA; namely, CCID 2-specific Reset Codes, option types,\n   and feature\
    \ numbers.  These ranges will prevent any future CCID\n   2-specific allocations\
    \ from polluting DCCP's corresponding global\n   namespaces; see [RFC4340], Section\
    \ 10.3.  However, this document\n   makes no particular allocations from any range,\
    \ except for\n   experimental and testing use [RFC3692].  We refer to the Standards\n\
    \   Action policy outlined in [RFC2434].\n"
- title: 10.1.  Reset Codes
  contents:
  - "10.1.  Reset Codes\n   Each entry in the DCCP CCID 2 Reset Code registry contains\
    \ a CCID\n   2-specific Reset Code, which is a number in the range 128-255; a\n\
    \   short description of the Reset Code; and a reference to the RFC\n   defining\
    \ the Reset Code.  Reset Codes 184-190 and 248-254 are\n   permanently reserved\
    \ for experimental and testing use.  The remaining\n   Reset Codes -- 128-183,\
    \ 191-247, and 255 -- are currently reserved\n   and should be allocated with\
    \ the Standards Action policy, which\n   requires IESG review and approval and\
    \ standards-track IETF RFC\n   publication.\n"
- title: 10.2.  Option Types
  contents:
  - "10.2.  Option Types\n   Each entry in the DCCP CCID 2 option type registry contains\
    \ a CCID\n   2-specific option type, which is a number in the range 128-255; the\n\
    \   name of the option; and a reference to the RFC defining the option\n   type.\
    \  Option types 184-190 and 248-254 are permanently reserved for\n   experimental\
    \ and testing use.  The remaining option types -- 128-183,\n   191-247, and 255\
    \ -- are currently reserved and should be allocated\n   with the Standards Action\
    \ policy, which requires IESG review and\n   approval and standards-track IETF\
    \ RFC publication.\n"
- title: 10.3.  Feature Numbers
  contents:
  - "10.3.  Feature Numbers\n   Each entry in the DCCP CCID 2 feature number registry\
    \ contains a CCID\n   2-specific feature number, which is a number in the range\
    \ 128-255;\n   the name of the feature; and a reference to the RFC defining the\n\
    \   feature number.  Feature numbers 184-190 and 248-254 are permanently\n   reserved\
    \ for experimental and testing use.  The remaining feature\n   numbers -- 128-183,\
    \ 191-247, and 255 -- are currently reserved and\n   should be allocated with\
    \ the Standards Action policy, which requires\n   IESG review and approval and\
    \ standards-track IETF RFC publication.\n"
- title: 11.  Thanks
  contents:
  - "11.  Thanks\n   We thank Mark Handley and Jitendra Padhye for their help in defining\n\
    \   CCID 2.  We also thank Mark Allman, Aaron Falk, Nils-Erik Mattsson,\n   Greg\
    \ Minshall, Arun Venkataramani, Magnus Westerlund, and members of\n   the DCCP\
    \ Working Group for feedback on this document.\n"
- title: 'A.  Appendix: Derivation of Ack Ratio Decrease'
  contents:
  - "A.  Appendix: Derivation of Ack Ratio Decrease\n   This section justifies the\
    \ algorithm for increasing and decreasing\n   the Ack Ratio given in Section 6.1.2.\n\
    \   The congestion avoidance phase of TCP halves the cwnd for every\n   window\
    \ with congestion.  Similarly, CCID 2 doubles Ack Ratio for\n   every window with\
    \ congestion on the return path, roughly halving the\n   DCCP-Ack sending rate.\n\
    \   The congestion avoidance phase of TCP increases cwnd by one MSS for\n   every\
    \ congestion-free window.  When this congestion avoidance\n   behavior is applied\
    \ to acknowledgement traffic, this would correspond\n   to increasing the number\
    \ of DCCP-Ack packets per window by one after\n   every congestion-free window\
    \ of DCCP-Ack packets.  We cannot achieve\n   this exactly using Ack Ratio, since\
    \ it is an integer.  Instead, we\n   must decrease Ack Ratio by one after K windows\
    \ have been sent without\n   a congestion event on the reverse path, where K is\
    \ chosen so that the\n   long-term number of DCCP-Ack packets per congestion window\
    \ is roughly\n   TCP friendly, following AIMD congestion control.\n   In CCID\
    \ 2, rough TCP-friendliness for the ack traffic can be\n   accomplished by setting\
    \ K to cwnd/(R^2 - R), where R is the current\n   Ack Ratio.\n   This result was\
    \ calculated as follows:\n         R = Ack Ratio = # data packets / ack packets,\
    \ and\n         W = Congestion Window = # data packets / window, so\n        \
    \ W/R = # ack packets / window.\n      Requirement: Increase W/R by 1 per congestion-free\
    \ window.  Since\n      we can only reduce R by increments of one, we find K so\
    \ that,\n      after K congestion-free windows, W/R + K would equal W/(R-1).\n\
    \         (W/R) + K = W/(R-1), so\n                 K = W/(R-1) - W/R = W/(R^2\
    \ - R).\n"
- title: 'B.  Appendix: Cost of Loss Inference Mistakes to Ack Ratio'
  contents:
  - "B.  Appendix: Cost of Loss Inference Mistakes to Ack Ratio\n   As discussed in\
    \ Section 6.1.1, the sender often cannot determine\n   whether lost packets carried\
    \ data.  This hinders its ability to\n   separate non-data loss events from other\
    \ loss events.  In the absence\n   of better information, the sender assumes,\
    \ for the purpose of Ack\n   Ratio calculation, that all lost packets were non-data\
    \ packets.  This\n   may overestimate the non-data loss event rate, which can\
    \ lead to a\n   too-high Ack Ratio, and thus to a too-slow acknowledgement rate.\
    \  All\n   acknowledgement information will still get through -- DCCP\n   acknowledgements\
    \ are reliable -- but acknowledgement information will\n   arrive in a burstier\
    \ fashion.  Absent some form of rate-based pacing,\n   this could lead to increased\
    \ burstiness for the sender's data\n   traffic.\n   There are several cases when\
    \ the problem of an overly-high Ack Ratio,\n   and the resulting increased burstiness\
    \ of the data traffic, will not\n   arise.  In particular, call the receiver DCCP\
    \ B and the sender DCCP\n   A:\n   o  The problem won't arise unless DCCP B is\
    \ sending a significant\n      amount of data itself.  When the B-to-A half-connection\
    \ is\n      quiescent or low rate, most packets sent by DCCP B will, in fact,\n\
    \      be pure acknowledgements, and DCCP A's estimate of the DCCP-Ack\n     \
    \ loss rate will be reasonably accurate.\n   o  The problem won't arise if DCCP\
    \ B habitually piggybacks\n      acknowledgement information on its data packets.\
    \  The piggybacked\n      acknowledgements are not limited by Ack Ratio, so they\
    \ can arrive\n      frequently enough to prevent burstiness.\n   o  The problem\
    \ won't arise if DCCP A's sending rate is low, since\n      burstiness isn't a\
    \ problem at low rates.\n   o  The problem won't arise if DCCP B's sending rate\
    \ is high relative\n      to DCCP A's sending rate, since the B-to-A loss rate\
    \ must be low\n      to support DCCP B's sending rate.  This bounds the Ack Ratio\
    \ to\n      reasonable values even when DCCP A labels every loss as a DCCP-\n\
    \      Ack loss.\n   o  The problem won't arise if DCCP B sends NDP Count options\
    \ when\n      appropriate (the Send NDP Count/B feature is true).  Then the\n\
    \      sender can use the receiver's NDP Count options to detect, in most\n  \
    \    cases, whether lost packets were data packets or DCCP-Acks.\n   o  Finally,\
    \ the problem won't arise if DCCP A rate-paces its data\n      packets.\n   This\
    \ leaves the case when DCCP B is sending roughly the same amount\n   of data packets\
    \ and non-data packets, without NDP Count options, and\n   with all acknowledgement\
    \ information in DCCP-Ack packets.  We now\n   quantify the potential cost, in\
    \ terms of a too-large Ack Ratio, due\n   to the sender's misclassifying data\
    \ packet losses as DCCP-Ack losses.\n   For simplicity, we assume an environment\
    \ of large-scale statistical\n   multiplexing where the packet drop rate is independent\
    \ of the sending\n   rate of any individual connection.\n   Assume that when DCCP\
    \ A correctly counts non-data losses, Ack Ratio\n   is set so that B-to-A data\
    \ and acknowledgement traffic both have a\n   sending rate of D packets per second.\
    \  Then when DCCP A incorrectly\n   counts data losses as non-data losses, the\
    \ sending rate for the\n   B-to-A data traffic is still D pps, but the reduced\
    \ sending rate for\n   the B-to-A acknowledgement traffic is f*D pps, with f <\
    \ 1.  Let the\n   packet loss rate be p.  The sender incorrectly estimates the\
    \ non-data\n   loss rate as (pD+pfD)/fD, or, equivalently, as p(1 + 1/f).  Because\n\
    \   the congestion control mechanism for acknowledgement traffic is\n   roughly\
    \ TCP friendly, and therefore the non-data sending rate and the\n   data sending\
    \ rate both grow as 1/sqrt(x) for x the packet drop rate,\n   we have\n      \
    \   fD/D = sqrt(p)/sqrt(p(1 + 1/f)),\n   so\n         f^2 = 1/(1 + 1/f).\n   Solving,\
    \ we get f = 0.62.  If the sender incorrectly counts lost data\n   packets as\
    \ non-data in this scenario, the acknowledgement rate is\n   decreased by a factor\
    \ of 0.62.  This would result in a moderate\n   increase in burstiness for the\
    \ A-to-B data traffic, which could be\n   mitigated by sending NDP Count options\
    \ or piggybacked\n   acknowledgements, or by rate-pacing out the data.\n"
- title: Normative References
  contents:
  - "Normative References\n   [RFC793]       Postel, J., \"Transmission Control Protocol\"\
    , STD 7,\n                  RFC 793, September 1981.\n   [RFC2018]      Mathis,\
    \ M., Mahdavi, J., Floyd, S., and A. Romanow,\n                  \"TCP Selective\
    \ Acknowledgement Options\", RFC 2018,\n                  October 1996.\n   [RFC2119]\
    \      Bradner, S., \"Key words for use in RFCs to Indicate\n                \
    \  Requirement Levels\", BCP 14, RFC 2119, March 1997.\n   [RFC2434]      Narten,\
    \ T. and H. Alvestrand, \"Guidelines for Writing\n                  an IANA Considerations\
    \ Section in RFCs\", BCP 26, RFC\n                  2434, October 1998.\n   [RFC2581]\
    \      Allman, M., Paxson, V., and W. Stevens, \"TCP\n                  Congestion\
    \ Control\", RFC 2581, April 1999.\n   [RFC2988]      Paxson, V. and M. Allman,\
    \ \"Computing TCP's\n                  Retransmission Timer\", RFC 2988, November\
    \ 2000.\n   [RFC3168]      Ramakrishnan, K., Floyd, S., and D. Black, \"The\n\
    \                  Addition of Explicit Congestion Notification (ECN) to\n   \
    \               IP\", RFC 3168, September 2001.\n   [RFC3390]      Allman, M.,\
    \ Floyd, S., and C. Partridge, \"Increasing\n                  TCP's Initial Window\"\
    , RFC 3390, October 2002.\n   [RFC3517]      Blanton, E., Allman, M., Fall, K.,\
    \ and L. Wang, \"A\n                  Conservative Selective Acknowledgment (SACK)-based\n\
    \                  Loss Recovery Algorithm for TCP\", RFC 3517, April\n      \
    \            2003.\n   [RFC3692]      Narten, T., \"Assigning Experimental and\
    \ Testing\n                  Numbers Considered Useful\", BCP 82, RFC 3692, January\n\
    \                  2004.\n   [RFC4340]      Kohler, E., Handley, M., and S. Floyd,\
    \ \"Datagram\n                  Congestion Control Protocol (DCCP)\", RFC 4340,\
    \ March\n                  2006.\n"
- title: Informative References
  contents:
  - "Informative References\n   [RFC2861]      Handley, M., Padhye, J., and S. Floyd,\
    \ \"TCP Congestion\n                  Window Validation\", RFC 2861, June 2000.\n\
    \   [RFC3465]      Allman, M., \"TCP Congestion Control with Appropriate\n   \
    \               Byte Counting (ABC)\", RFC 3465, February 2003.\n   [RFC3540]\
    \      Spring, N., Wetherall, D., and D. Ely, \"Robust\n                  Explicit\
    \ Congestion Notification (ECN) Signaling with\n                  Nonces\", RFC\
    \ 3540, June 2003.\n   [RFC4342]      Floyd, S., Kohler, E., and J. Padhye, \"\
    Profile for\n                  Datagram Congestion Control Protocol (DCCP) Congestion\n\
    \                  Control ID 3: TCP-Friendly Rate Control (TFRC)\", RFC\n   \
    \               4342, March 2006.\n   [V03]          Arun Venkataramani, August\
    \ 2003.  Citation for\n                  acknowledgement purposes only.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Sally Floyd\n   ICSI Center for Internet Research\n  \
    \ 1947 Center Street, Suite 600\n   Berkeley, CA 94704\n   USA\n   EMail: floyd@icir.org\n\
    \   Eddie Kohler\n   4531C Boelter Hall\n   UCLA Computer Science Department\n\
    \   Los Angeles, CA 90095\n   USA\n   EMail: kohler@cs.ucla.edu\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2006).\n   This\
    \ document is subject to the rights, licenses and restrictions\n   contained in\
    \ BCP 78, and except as set forth therein, the authors\n   retain all their rights.\n\
    \   This document and the information contained herein are provided on an\n  \
    \ \"AS IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n  \
    \ OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY AND THE INTERNET\n   ENGINEERING\
    \ TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS OR IMPLIED,\n   INCLUDING BUT NOT\
    \ LIMITED TO ANY WARRANTY THAT THE USE OF THE\n   INFORMATION HEREIN WILL NOT\
    \ INFRINGE ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY OR FITNESS\
    \ FOR A PARTICULAR PURPOSE.\n"
- title: Intellectual Property
  contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or\
    \ scope of any\n   Intellectual Property Rights or other rights that might be\
    \ claimed to\n   pertain to the implementation or use of the technology described\
    \ in\n   this document or the extent to which any license under such rights\n\
    \   might or might not be available; nor does it represent that it has\n   made\
    \ any independent effort to identify any such rights.  Information\n   on the\
    \ procedures with respect to rights in RFC documents can be\n   found in BCP 78\
    \ and BCP 79.\n   Copies of IPR disclosures made to the IETF Secretariat and any\n\
    \   assurances of licenses to be made available, or the result of an\n   attempt\
    \ made to obtain a general license or permission for the use of\n   such proprietary\
    \ rights by implementers or users of this\n   specification can be obtained from\
    \ the IETF on-line IPR repository at\n   http://www.ietf.org/ipr.\n   The IETF\
    \ invites any interested party to bring to its attention any\n   copyrights, patents\
    \ or patent applications, or other proprietary\n   rights that may cover technology\
    \ that may be required to implement\n   this standard.  Please address the information\
    \ to the IETF at ietf-\n   ipr@ietf.org.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is provided by the IETF\n\
    \   Administrative Support Activity (IASA).\n"
