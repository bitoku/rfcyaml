- contents:
  - '             Cryptographic Message Syntax (CMS) Algorithms

    '
  title: __initial_text__
- contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol
    for the\n   Internet community, and requests discussion and suggestions for\n
    \  improvements.  Please refer to the current edition of the \"Internet\n   Official
    Protocol Standards\" (STD 1) for the standardization state\n   and status of this
    protocol.  Distribution of this memo is unlimited.\n"
  title: Status of this Memo
- contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2002).  All Rights Reserved.\n"
  title: Copyright Notice
- contents:
  - "Abstract\n   This document describes the conventions for using several\n   cryptographic
    algorithms with the Cryptographic Message Syntax (CMS).\n   The CMS is used to
    digitally sign, digest, authenticate, or encrypt\n   arbitrary message contents.\n"
  title: Abstract
- contents:
  - "Table of Contents\n   1     Introduction ...............................................
    \ 2\n   1.1   Changes Since RFC 2630 .....................................  2\n
    \  1.2   Terminology ................................................  2\n   2
    \    Message Digest Algorithms ..................................  3\n   2.1   SHA-1
    ......................................................  3\n   2.2   MD5 ........................................................
    \ 3\n   3     Signature Algorithms .......................................  4\n
    \  3.1   DSA ........................................................  4\n   3.2
    \  RSA ........................................................  5\n   4     Key
    Management Algorithms ..................................  6\n   4.1   Key Agreement
    Algorithms ...................................  6\n   4.1.1 X9.42 Ephemeral-Static
    Diffie-Hellman ......................  7\n   4.1.2 X9.42 Static-Static Diffie-Hellman
    .........................  8\n   4.2   Key Transport Algorithms ...................................
    \ 9\n   4.2.1 RSA (PKCS #1 v1.5) ......................................... 10\n
    \  4.3   Symmetric Key-Encryption Key Algorithms .................... 10\n   4.3.1
    Triple-DES Key Wrap ........................................ 11\n   4.3.2 RC2
    Key Wrap ............................................... 12\n   4.4   Key Derivation
    Algorithms .................................. 12\n   4.4.1 PBKDF2 .....................................................
    13\n   5     Content Encryption Algorithms .............................. 13\n
    \  5.1   Triple-DES CBC ............................................. 14\n   5.2
    \  RC2 CBC .................................................... 14\n   6     Message
    Authentication Code (MAC) Algorithms ............... 15\n   6.1   HMAC with SHA-1
    ............................................ 15\n   7     ASN.1 Module ...............................................
    16\n   8     References ................................................. 18\n
    \  9     Security Considerations .................................... 20\n   10
    \   Acknowledgments ............................................ 22\n   11    Author's
    Address ........................................... 23\n   12    Full Copyright
    Statement ................................... 24\n"
  title: Table of Contents
- contents:
  - "1  Introduction\n   The Cryptographic Message Syntax (CMS) [CMS] is used to digitally\n
    \  sign, digest, authenticate, or encrypt arbitrary message contents.\n   This
    companion specification describes the use of common\n   cryptographic algorithms
    with the CMS.  Implementations of the CMS\n   may support these algorithms; implementations
    of the CMS may also\n   support other algorithms as well.  However, if an implementation\n
    \  chooses to support one of the algorithms discussed in this document,\n   then
    the implementation MUST do so as described in this document.\n   The CMS values
    are generated using ASN.1 [X.208-88], using BER-\n   encoding [X.209-88].  Algorithm
    identifiers (which include ASN.1\n   object identifiers) identify cryptographic
    algorithms, and some\n   algorithms require additional parameters.  When needed,
    parameters\n   are specified with an ASN.1 structure.  The algorithm identifier
    for\n   each algorithm is specified, and when needed, the parameter structure\n
    \  is specified.  The fields in the CMS employed by each algorithm are\n   identified.\n"
  - contents:
    - "1.1  Changes Since RFC 2630\n   This document obsoletes section 12 of RFC 2630
      [OLDCMS].  RFC 3369\n   [CMS] obsoletes the rest of RFC 2630.  Separation of
      the protocol and\n   algorithm specifications allows each one to be updated
      without\n   impacting the other.  However, the conventions for using additional\n
      \  algorithms with the CMS are likely to be specified in separate\n   documents.\n"
    title: 1.1  Changes Since RFC 2630
  - contents:
    - "1.2  Terminology\n   In this document, the key words MUST, MUST NOT, REQUIRED,
      SHOULD,\n   SHOULD NOT, RECOMMENDED, and MAY are to be interpreted as described\n
      \  in [STDWORDS].\n"
    title: 1.2  Terminology
  title: 1  Introduction
- contents:
  - "2  Message Digest Algorithms\n   This section specifies the conventions employed
    by CMS\n   implementations that support SHA-1 or MD5.\n   Digest algorithm identifiers
    are located in the SignedData\n   digestAlgorithms field, the SignerInfo digestAlgorithm
    field, the\n   DigestedData digestAlgorithm field, and the AuthenticatedData\n
    \  digestAlgorithm field.\n   Digest values are located in the DigestedData digest
    field and the\n   Message Digest authenticated attribute.  In addition, digest
    values\n   are input to signature algorithms.\n"
  - contents:
    - "2.1  SHA-1\n   The SHA-1 message digest algorithm is defined in FIPS Pub 180-1\n
      \  [SHA1].  The algorithm identifier for SHA-1 is:\n      sha-1 OBJECT IDENTIFIER
      ::= { iso(1) identified-organization(3)\n          oiw(14) secsig(3) algorithm(2)
      26 }\n   There are two possible encodings for the SHA-1 AlgorithmIdentifier\n
      \  parameters field.  The two alternatives arise from the fact that when\n   the
      1988 syntax for AlgorithmIdentifier was translated into the 1997\n   syntax,
      the OPTIONAL associated with the AlgorithmIdentifier\n   parameters got lost.
      \ Later the OPTIONAL was recovered via a defect\n   report, but by then many
      people thought that algorithm parameters\n   were mandatory.  Because of this
      history some implementations encode\n   parameters as a NULL element and others
      omit them entirely.  The\n   correct encoding is to omit the parameters field;
      however,\n   implementations MUST also handle a SHA-1 AlgorithmIdentifier\n
      \  parameters field which contains a NULL.\n   The AlgorithmIdentifier parameters
      field is OPTIONAL.  If present,\n   the parameters field MUST contain a NULL.
      \ Implementations MUST\n   accept SHA-1 AlgorithmIdentifiers with absent parameters.\n
      \  Implementations MUST accept SHA-1 AlgorithmIdentifiers with NULL\n   parameters.
      \ Implementations SHOULD generate SHA-1\n   AlgorithmIdentifiers with absent
      parameters.\n"
    title: 2.1  SHA-1
  - contents:
    - "2.2  MD5\n   The MD5 digest algorithm is defined in RFC 1321 [MD5].  The algorithm\n
      \  identifier for MD5 is:\n      md5 OBJECT IDENTIFIER ::= { iso(1) member-body(2)
      us(840)\n          rsadsi(113549) digestAlgorithm(2) 5 }\n   The AlgorithmIdentifier
      parameters field MUST be present, and the\n   parameters field MUST contain
      NULL.  Implementations MAY accept the\n   MD5 AlgorithmIdentifiers with absent
      parameters as well as NULL\n   parameters.\n"
    title: 2.2  MD5
  title: 2  Message Digest Algorithms
- contents:
  - "3  Signature Algorithms\n   This section specifies the conventions employed by
    CMS\n   implementations that support DSA or RSA (PKCS #1 v1.5).\n   Signature
    algorithm identifiers are located in the SignerInfo\n   signatureAlgorithm field
    of SignedData.  Also, signature algorithm\n   identifiers are located in the SignerInfo
    signatureAlgorithm field of\n   countersignature attributes.\n   Signature values
    are located in the SignerInfo signature field of\n   SignedData.  Also, signature
    values are located in the SignerInfo\n   signature field of countersignature attributes.\n"
  - contents:
    - "3.1  DSA\n   The DSA signature algorithm is defined in FIPS Pub 186 [DSS].
      \ DSA\n   MUST be used with the SHA-1 message digest algorithm.\n   The algorithm
      identifier for DSA subject public keys in certificates\n   is:\n      id-dsa
      OBJECT IDENTIFIER ::= { iso(1) member-body(2)\n          us(840) x9-57 (10040)
      x9cm(4) 1 }\n   DSA signature validation requires three parameters, commonly
      called\n   p, q, and g.  When the id-dsa algorithm identifier is used, the\n
      \  AlgorithmIdentifier parameters field is optional.  If present, the\n   AlgorithmIdentifier
      parameters field MUST contain the three DSA\n   parameter values encoded using
      the Dss-Parms type.  If absent, the\n   subject DSA public key uses the same
      DSA parameters as the\n   certificate issuer.\n      Dss-Parms ::= SEQUENCE
      {\n        p INTEGER,\n        q INTEGER,\n        g INTEGER  }\n   When the
      id-dsa algorithm identifier is used, the DSA public key,\n   commonly called
      Y, MUST be encoded as an INTEGER.  The output of this\n   encoding is carried
      in the certificate subject public key.\n      Dss-Pub-Key ::= INTEGER  -- Y\n
      \  The algorithm identifier for DSA with SHA-1 signature values is:\n      id-dsa-with-sha1
      OBJECT IDENTIFIER ::= { iso(1) member-body(2)\n          us(840) x9-57 (10040)
      x9cm(4) 3 }\n   When the id-dsa-with-sha1 algorithm identifier is used, the\n
      \  AlgorithmIdentifier parameters field MUST be absent.\n   When signing, the
      DSA algorithm generates two values, commonly called\n   r and s.  To transfer
      these two values as one signature, they MUST be\n   encoded using the Dss-Sig-Value
      type:\n      Dss-Sig-Value ::= SEQUENCE {\n        r INTEGER,\n        s INTEGER
      }\n"
    title: 3.1  DSA
  - contents:
    - "3.2  RSA\n   The RSA (PKCS #1 v1.5) signature algorithm is defined in RFC 2437\n
      \  [NEWPKCS#1].  RFC 2437 specifies the use of the RSA signature\n   algorithm
      with the SHA-1 and MD5 message digest algorithms.\n   The algorithm identifier
      for RSA subject public keys in certificates\n   is:\n      rsaEncryption OBJECT
      IDENTIFIER ::= { iso(1) member-body(2)\n          us(840) rsadsi(113549) pkcs(1)
      pkcs-1(1) 1 }\n   When the rsaEncryption algorithm identifier is used, the\n
      \  AlgorithmIdentifier parameters field MUST contain NULL.\n   When the rsaEncryption
      algorithm identifier is used, the RSA public\n   key, which is composed of a
      modulus and a public exponent, MUST be\n   encoded using the RSAPublicKey type.
      \ The output of this encoding is\n   carried in the certificate subject public
      key.\n      RSAPublicKey ::= SEQUENCE {\n         modulus INTEGER, -- n\n         publicExponent
      INTEGER } -- e\n   CMS implementations that include the RSA (PKCS #1 v1.5) signature\n
      \  algorithm MUST also implement the SHA-1 message digest algorithm.\n   Such
      implementations SHOULD also support the MD5 message digest\n   algorithm.\n
      \  The rsaEncryption algorithm identifier is used to identify RSA (PKCS\n   #1
      v1.5) signature values regardless of the message digest algorithm\n   employed.
      \ CMS implementations that include the RSA (PKCS #1 v1.5)\n   signature algorithm
      MUST support the rsaEncryption signature value\n   algorithm identifier, and
      CMS implementations MAY support RSA (PKCS\n   #1 v1.5) signature value algorithm
      identifiers that specify both the\n   RSA (PKCS #1 v1.5) signature algorithm
      and the message digest\n   algorithm.\n   The algorithm identifier for RSA (PKCS
      #1 v1.5) with SHA-1 signature\n   values is:\n      sha1WithRSAEncryption OBJECT
      IDENTIFIER ::= { iso(1)\n          member-body(2) us(840) rsadsi(113549) pkcs(1)
      pkcs-1(1) 5 }\n   The algorithm identifier for RSA (PKCS #1 v1.5) with MD5 signature\n
      \  values is:\n      md5WithRSAEncryption OBJECT IDENTIFIER ::= { iso(1)\n          member-body(2)
      us(840) rsadsi(113549) pkcs(1) pkcs-1(1) 4 }\n   When the rsaEncryption, sha1WithRSAEncryption,
      or\n   md5WithRSAEncryption signature value algorithm identifiers are used,\n
      \  the AlgorithmIdentifier parameters field MUST be NULL.\n   When signing,
      the RSA algorithm generates a single value, and that\n   value is used directly
      as the signature value.\n"
    title: 3.2  RSA
  title: 3  Signature Algorithms
- contents:
  - "4  Key Management Algorithms\n   CMS accommodates the following general key management
    techniques: key\n   agreement, key transport, previously distributed symmetric
    key-\n   encryption keys, and passwords.\n"
  - contents:
    - "4.1  Key Agreement Algorithms\n   This section specifies the conventions employed
      by CMS\n   implementations that support key agreement using X9.42 Ephemeral-\n
      \  Static Diffie-Hellman (X9.42 E-S D-H) and X9.42 Static-Static\n   Diffie-Hellman
      (X9.42 S-S D-H).\n   When a key agreement algorithm is used, a key-encryption
      algorithm is\n   also needed.  Therefore, when key agreement is supported, a
      key-\n   encryption algorithm MUST be provided for each content-encryption\n
      \  algorithm.  The key wrap algorithms for Triple-DES and RC2 are\n   described
      in RFC 3217 [WRAP].\n   For key agreement of RC2 key-encryption keys, 128 bits
      MUST be\n   generated as input to the key expansion process used to compute
      the\n   RC2 effective key [RC2].\n   Key agreement algorithm identifiers are
      located in the EnvelopedData\n   RecipientInfos KeyAgreeRecipientInfo keyEncryptionAlgorithm
      and\n   AuthenticatedData RecipientInfos KeyAgreeRecipientInfo\n   keyEncryptionAlgorithm
      fields.\n   Key wrap algorithm identifiers are located in the KeyWrapAlgorithm\n
      \  parameters within the EnvelopedData RecipientInfos\n   KeyAgreeRecipientInfo
      keyEncryptionAlgorithm and AuthenticatedData\n   RecipientInfos KeyAgreeRecipientInfo
      keyEncryptionAlgorithm fields.\n   Wrapped content-encryption keys are located
      in the EnvelopedData\n   RecipientInfos KeyAgreeRecipientInfo RecipientEncryptedKeys\n
      \  encryptedKey field.  Wrapped message-authentication keys are located\n   in
      the AuthenticatedData RecipientInfos KeyAgreeRecipientInfo\n   RecipientEncryptedKeys
      encryptedKey field.\n"
    - contents:
      - "4.1.1  X9.42 Ephemeral-Static Diffie-Hellman\n   Ephemeral-Static Diffie-Hellman
        key agreement is defined in RFC 2631\n   [DH-X9.42].  When using Ephemeral-Static
        Diffie-Hellman, the\n   EnvelopedData RecipientInfos KeyAgreeRecipientInfo
        field is used as\n   follows:\n      version MUST be 3.\n      originator
        MUST be the originatorKey alternative.  The\n      originatorKey algorithm
        field MUST contain the dh-public-number\n      object identifier with absent
        parameters.  The originatorKey\n      publicKey field MUST contain the sender's
        ephemeral public key.\n      The dh-public-number object identifier is:\n
        \        dh-public-number OBJECT IDENTIFIER ::= { iso(1) member-body(2)\n
        \            us(840) ansi-x942(10046) number-type(2) 1 }\n      ukm may be
        present or absent.  CMS implementations MUST support\n      ukm being absent,
        and CMS implementations SHOULD support ukm being\n      present.  When present,
        the ukm is used to ensure that a different\n      key-encryption key is generated
        when the ephemeral private key\n      might be used more than once.\n      keyEncryptionAlgorithm
        MUST be the id-alg-ESDH algorithm\n      identifier.  The algorithm identifier
        parameter field for id-alg-\n      ESDH is KeyWrapAlgorithm, and this parameter
        MUST be present.  The\n      KeyWrapAlgorithm denotes the symmetric encryption
        algorithm used\n      to encrypt the content-encryption key with the pairwise
        key-\n      encryption key generated using the X9.42 Ephemeral-Static Diffie-\n
        \     Hellman key agreement algorithm. Triple-DES and RC2 key wrap\n      algorithms
        are described in RFC 3217 [WRAP].  The id-alg-ESDH\n      algorithm identifier
        and parameter syntax is:\n         id-alg-ESDH OBJECT IDENTIFIER ::= { iso(1)
        member-body(2)\n             us(840) rsadsi(113549) pkcs(1) pkcs-9(9) smime(16)\n
        \            alg(3) 5 }\n         KeyWrapAlgorithm ::= AlgorithmIdentifier\n
        \     recipientEncryptedKeys contains an identifier and an encrypted key\n
        \     for each recipient.  The RecipientEncryptedKey\n      KeyAgreeRecipientIdentifier
        MUST contain either the\n      issuerAndSerialNumber identifying the recipient's
        certificate or\n      the RecipientKeyIdentifier containing the subject key
        identifier\n      from the recipient's certificate.  In both cases, the recipient's\n
        \     certificate contains the recipient's static public key.\n      RecipientEncryptedKey
        EncryptedKey MUST contain the\n      content-encryption key encrypted with
        the X9.42 Ephemeral-Static\n      Diffie-Hellman generated pairwise key-encryption
        key using the\n      algorithm specified by the KeyWrapAlgorithm.\n"
      title: 4.1.1  X9.42 Ephemeral-Static Diffie-Hellman
    - contents:
      - "4.1.2  X9.42 Static-Static Diffie-Hellman\n   Static-Static Diffie-Hellman
        key agreement is defined in RFC 2631\n   [DH-X9.42].  When using Static-Static
        Diffie-Hellman, the\n   EnvelopedData RecipientInfos KeyAgreeRecipientInfo
        and\n   AuthenticatedData RecipientInfos KeyAgreeRecipientInfo fields are\n
        \  used as follows:\n      version MUST be 3.\n      originator MUST be either
        the issuerAndSerialNumber or\n      subjectKeyIdentifier alternative.  In
        both cases, the originator's\n      certificate contains the sender's static
        public key.  RFC 3279\n      [CERTALGS] specifies the AlgorithmIdentifier
        parameters syntax and\n      values that are included in the originator's
        certificate.  The\n      originator's certificate subject public key information
        field MUST\n      contain the dh-public-number object identifier:\n         dh-public-number
        OBJECT IDENTIFIER ::= { iso(1) member-body(2)\n             us(840) ansi-x942(10046)
        number-type(2) 1 }\n      ukm MUST be present.  The ukm ensures that a different
        key-\n      encryption key is generated for each message between the same\n
        \     sender and recipient.\n      keyEncryptionAlgorithm MUST be the id-alg-SSDH
        algorithm\n      identifier.  The algorithm identifier parameter field for
        id-alg-\n      SSDH is KeyWrapAlgorihtm, and this parameter MUST be present.
        \ The\n      KeyWrapAlgorithm denotes the symmetric encryption algorithm used\n
        \     to encrypt the content-encryption key with the pairwise key-\n      encryption
        key generated using the X9.42 Static-Static Diffie-\n      Hellman key agreement
        algorithm.  Triple-DES and RC2 key wrap\n      algorithms are described in
        RFC 3217 [WRAP].  The id-alg-SSDH\n      algorithm identifier and parameter
        syntax is:\n         id-alg-SSDH OBJECT IDENTIFIER ::= { iso(1) member-body(2)\n
        \            us(840) rsadsi(113549) pkcs(1) pkcs-9(9) smime(16)\n             alg(3)
        10 }\n         KeyWrapAlgorithm ::= AlgorithmIdentifier\n      recipientEncryptedKeys
        contains an identifier and an encrypted key\n      for each recipient.  The
        RecipientEncryptedKey\n      KeyAgreeRecipientIdentifier MUST contain either
        the\n      issuerAndSerialNumber identifying the recipient's certificate or\n
        \     the RecipientKeyIdentifier containing the subject key identifier\n      from
        the recipient's certificate.  In both cases, the recipient's\n      certificate
        contains the recipient's static public key.\n      RecipientEncryptedKey EncryptedKey
        MUST contain the content-\n      encryption key encrypted with the X9.42 Static-Static
        Diffie-\n      Hellman generated pairwise key-encryption key using the algorithm\n
        \     specified by the KeyWrapAlgortihm.\n"
      title: 4.1.2  X9.42 Static-Static Diffie-Hellman
    title: 4.1  Key Agreement Algorithms
  - contents:
    - "4.2  Key Transport Algorithms\n   This section specifies the conventions employed
      by CMS\n   implementations that support key transport using RSA (PKCS #1 v1.5).\n
      \  Key transport algorithm identifiers are located in the EnvelopedData\n   RecipientInfos
      KeyTransRecipientInfo keyEncryptionAlgorithm field.\n   Key transport encrypted
      content-encryption keys are located in the\n   EnvelopedData RecipientInfos
      KeyTransRecipientInfo encryptedKey\n   field.\n"
    - contents:
      - "4.2.1  RSA (PKCS #1 v1.5)\n   The RSA key transport algorithm is the RSA
        encryption scheme defined\n   in RFC 2313 [PKCS#1], block type is 02, where
        the message to be\n   encrypted is the content-encryption key.  The algorithm
        identifier\n   for RSA (PKCS #1 v1.5) is:\n      rsaEncryption OBJECT IDENTIFIER
        ::= { iso(1) member-body(2)\n          us(840) rsadsi(113549) pkcs(1) pkcs-1(1)
        1 }\n   The AlgorithmIdentifier parameters field MUST be present, and the\n
        \  parameters field MUST contain NULL.\n   When using a Triple-DES content-encryption
        key, CMS implementations\n   MUST adjust the parity bits for each DES key
        comprising the Triple-\n   DES key prior to RSA encryption.\n   The use of
        RSA (PKCS #1 v1.5) encryption, as defined in RFC 2313\n   [PKCS#1], to provide
        confidentiality has a known vulnerability.  The\n   vulnerability is primarily
        relevant to usage in interactive\n   applications rather than to store-and-forward
        environments.  Further\n   information and proposed countermeasures are discussed
        in the\n   Security Considerations section of this document and RFC 3218 [MMA].\n
        \  Note that the same RSA encryption scheme is also defined in RFC 2437\n
        \  [NEWPKCS#1].  Within RFC 2437, this RSA encryption scheme is called\n   RSAES-PKCS1-v1_5.\n"
      title: '4.2.1  RSA (PKCS #1 v1.5)'
    title: 4.2  Key Transport Algorithms
  - contents:
    - "4.3  Symmetric Key-Encryption Key Algorithms\n   This section specifies the
      conventions employed by CMS\n   implementations that support symmetric key-encryption
      key management\n   using Triple-DES or RC2 key-encryption keys.  When RC2 is
      supported,\n   RC2 128-bit keys MUST be used as key-encryption keys, and they
      MUST\n   be used with the RC2ParameterVersion parameter set to 58.  A CMS\n
      \  implementation MAY support mixed key-encryption and content-\n   encryptionalgorithms.
      \ For example, a 40-bit RC2 content-encryption\n   key MAY be wrapped with a
      168-bit Triple-DES key-encryption key or\n   with a 128-bit RC2 key-encryption
      key.\n   Key wrap algorithm identifiers are located in the EnvelopedData\n   RecipientInfos
      KEKRecipientInfo keyEncryptionAlgorithm and\n   AuthenticatedData RecipientInfos
      KEKRecipientInfo\n   keyEncryptionAlgorithm fields.\n   Wrapped content-encryption
      keys are located in the EnvelopedData\n   RecipientInfos KEKRecipientInfo encryptedKey
      field.  Wrapped\n   message-authentication keys are located in the AuthenticatedData\n
      \  RecipientInfos KEKRecipientInfo encryptedKey field.\n   The output of a key
      agreement algorithm is a key-encryption key, and\n   this key-encryption key
      is used to encrypt the content-encryption\n   key.  To support key agreement,
      key wrap algorithm identifiers are\n   located in the KeyWrapAlgorithm parameter
      of the EnvelopedData\n   RecipientInfos KeyAgreeRecipientInfo keyEncryptionAlgorithm
      and\n   AuthenticatedData RecipientInfos KeyAgreeRecipientInfo\n   keyEncryptionAlgorithm
      fields.  However, only key agreement\n   algorithms that inherently provide
      authentication ought to be used\n   with AuthenticatedData.  Wrapped content-encryption
      keys are located\n   in the EnvelopedData RecipientInfos KeyAgreeRecipientInfo\n
      \  RecipientEncryptedKeys encryptedKey field, wrapped message-\n   authentication
      keys are located in the AuthenticatedData\n   RecipientInfos KeyAgreeRecipientInfo
      RecipientEncryptedKeys\n   encryptedKey field.\n"
    - contents:
      - "4.3.1  Triple-DES Key Wrap\n   A CMS implementation MAY support mixed key-encryption
        and content-\n   encryption algorithms.  For example, a 128-bit RC2 content-encryption\n
        \  key MAY be wrapped with a 168-bit Triple-DES key-encryption key.\n   Triple-DES
        key encryption has the algorithm identifier:\n      id-alg-CMS3DESwrap OBJECT
        IDENTIFIER ::= { iso(1) member-body(2)\n          us(840) rsadsi(113549) pkcs(1)
        pkcs-9(9) smime(16) alg(3) 6 }\n   The AlgorithmIdentifier parameter field
        MUST be NULL.\n   The key wrap algorithm used to encrypt a Triple-DES content-\n
        \  encryption key with a Triple-DES key-encryption key is specified in\n   section
        3.1 of RFC 3217 [WRAP].  The corresponding key unwrap\n   algorithm is specified
        in section 3.2 of RFC 3217 [WRAP].\n   Out-of-band distribution of the Triple-DES
        key-encryption key used to\n   encrypt the Triple-DES content-encryption key
        is beyond the scope of\n   this document.\n"
      title: 4.3.1  Triple-DES Key Wrap
    - contents:
      - "4.3.2  RC2 Key Wrap\n   A CMS implementation MAY support mixed key-encryption
        and content-\n   encryption algorithms.  For example, a 128-bit RC2 content-encryption\n
        \  key MAY be wrapped with a 168-bit Triple-DES key-encryption key.\n   Similarly,
        a 40-bit RC2 content-encryption key MAY be wrapped with a\n   128-bit RC2
        key-encryption key.\n   RC2 key encryption has the algorithm identifier:\n
        \     id-alg-CMSRC2wrap OBJECT IDENTIFIER ::= { iso(1) member-body(2)\n          us(840)
        rsadsi(113549) pkcs(1) pkcs-9(9) smime(16) alg(3) 7 }\n   The AlgorithmIdentifier
        parameter field MUST be RC2wrapParameter:\n      RC2wrapParameter ::= RC2ParameterVersion\n
        \     RC2ParameterVersion ::= INTEGER\n   The RC2 effective-key-bits (key
        size) greater than 32 and less than\n   256 is encoded in the RC2ParameterVersion.
        \ For the effective-key-\n   bits of 40, 64, and 128, the rc2ParameterVersion
        values are 160, 120,\n   and 58 respectively.  These values are not simply
        the RC2 key length.\n   Note that the value 160 must be encoded as two octets
        (00 A0),\n   because the one octet (A0) encoding represents a negative number.\n
        \  RC2 128-bit keys MUST be used as key-encryption keys, and they MUST\n   be
        used with the RC2ParameterVersion parameter set to 58.\n   The key wrap algorithm
        used to encrypt a RC2 content-encryption key\n   with a RC2 key-encryption
        key is specified in section 4.1 of RFC 3217\n   [WRAP].  The corresponding
        key unwrap algorithm is specified 4.2 of\n   RFC 3217 [WRAP].\n   Out-of-band
        distribution of the RC2 key-encryption key used to\n   encrypt the RC2 content-encryption
        key is beyond of the scope of this\n   document.\n"
      title: 4.3.2  RC2 Key Wrap
    title: 4.3  Symmetric Key-Encryption Key Algorithms
  - contents:
    - "4.4  Key Derivation Algorithms\n   This section specifies the conventions employed
      by CMS\n   implementations that support password-based key management using\n
      \  PBKDF2.\n   Key derivation algorithms are used to convert a password into
      a key-\n   encryption key as part of the password-based key management\n   technique.\n
      \  Key derivation algorithm identifiers are located in the EnvelopedData\n   RecipientInfos
      PasswordRecipientInfo keyDerivationAlgorithm and\n   AuthenticatedData RecipientInfos
      PasswordRecipientInfo\n   keyDerivationAlgorithm fields.\n   The key-encryption
      key that is derived from the password is used to\n   encrypt the content-encryption
      key.\n   The content-encryption keys encrypted with password-derived key-\n
      \  encryption keys are located in the EnvelopedData RecipientInfos\n   PasswordRecipientInfo
      encryptedKey field.  The message-authentication\n   keys encrypted with password-derived
      key-encryption keys are located\n   in the AuthenticatedData RecipientInfos
      PasswordRecipientInfo\n   encryptedKey field.\n"
    - contents:
      - "4.4.1  PBKDF2\n   The PBKDF2 key derivation algorithm is specified in RFC
        2898\n   [PKCS#5].  The KeyDerivationAlgorithmIdentifer identifies the key-\n
        \  derivation algorithm, and any associated parameters used to derive\n   the
        key-encryption key from the user-supplied password.  The\n   algorithm identifier
        for the PBKDF2 key derivation algorithm is:\n      id-PBKDF2 OBJECT IDENTIFIER
        ::= { iso(1) member-body(2) us(840)\n          rsadsi(113549) pkcs(1) pkcs-5(5)
        12 }\n   The AlgorithmIdentifier parameter field MUST be PBKDF2-params:\n
        \     PBKDF2-params ::= SEQUENCE {\n        salt CHOICE {\n          specified
        OCTET STRING,\n          otherSource AlgorithmIdentifier },\n        iterationCount
        INTEGER (1..MAX),\n        keyLength INTEGER (1..MAX) OPTIONAL,\n        prf
        AlgorithmIdentifier\n          DEFAULT { algorithm hMAC-SHA1, parameters NULL
        } }\n   Within the PBKDF2-params, the salt MUST use the specified OCTET\n
        \  STRING.\n"
      title: 4.4.1  PBKDF2
    title: 4.4  Key Derivation Algorithms
  title: 4  Key Management Algorithms
- contents:
  - "5  Content Encryption Algorithms\n   This section specifies the conventions employed
    by CMS\n   implementations that support content encryption using Three-Key\n   Triple-DES
    in CBC mode, Two-Key Triple-DES in CBC mode, or RC2 in CBC\n   mode.\n   Content
    encryption algorithm identifiers are located in the\n   EnvelopedData EncryptedContentInfo
    contentEncryptionAlgorithm and the\n   EncryptedData EncryptedContentInfo contentEncryptionAlgorithm
    fields.\n   Content encryption algorithms are used to encipher the content\n   located
    in the EnvelopedData EncryptedContentInfo encryptedContent\n   field and the EncryptedData
    EncryptedContentInfo encryptedContent\n   field.\n"
  - contents:
    - "5.1  Triple-DES CBC\n   The Triple-DES algorithm is described in ANSI X9.52
      [3DES].  The\n   Triple-DES is composed from three sequential DES [DES] operations:\n
      \  encrypt, decrypt, and encrypt.  Three-Key Triple-DES uses a different\n   key
      for each DES operation.  Two-Key Triple-DES uses one key for the\n   two encrypt
      operations and a different key for the decrypt operation.\n   The same algorithm
      identifiers are used for Three-Key Triple-DES and\n   Two-Key Triple-DES.  The
      algorithm identifier for Triple-DES in\n   Cipher Block Chaining (CBC) mode
      is:\n      des-ede3-cbc OBJECT IDENTIFIER ::= { iso(1) member-body(2)\n          us(840)
      rsadsi(113549) encryptionAlgorithm(3) 7 }\n   The AlgorithmIdentifier parameters
      field MUST be present, and the\n   parameters field must contain a CBCParameter:\n
      \     CBCParameter ::= IV\n      IV ::= OCTET STRING  -- exactly 8 octets\n"
    title: 5.1  Triple-DES CBC
  - contents:
    - "5.2  RC2 CBC\n   The RC2 algorithm is described in RFC 2268 [RC2].  The algorithm\n
      \  identifier for RC2 in CBC mode is:\n      rc2-cbc OBJECT IDENTIFIER ::= {
      iso(1) member-body(2) us(840)\n          rsadsi(113549) encryptionAlgorithm(3)
      2 }\n   The AlgorithmIdentifier parameters field MUST be present, and the\n
      \  parameters field MUST contain a RC2CBCParameter:\n      RC2CBCParameter ::=
      SEQUENCE {\n        rc2ParameterVersion INTEGER,\n        iv OCTET STRING  }
      \ -- exactly 8 octets\n   The RC2 effective-key-bits (key size) greater than
      32 and less than\n   256 is encoded in the rc2ParameterVersion.  For the effective-key-\n
      \  bits of 40, 64, and 128, the rc2ParameterVersion values are 160, 120,\n   and
      58 respectively.  These values are not simply the RC2 key length.\n   Note that
      the value 160 must be encoded as two octets (00 A0), since\n   the one octet
      (A0) encoding represents a negative number.\n"
    title: 5.2  RC2 CBC
  title: 5  Content Encryption Algorithms
- contents:
  - "6  Message Authentication Code Algorithms\n   This section specifies the conventions
    employed by CMS\n   implementations that support the HMAC with SHA-1 message\n
    \  authentication code (MAC).\n   MAC algorithm identifiers are located in the
    AuthenticatedData\n   macAlgorithm field.\n   MAC values are located in the AuthenticatedData
    mac field.\n"
  - contents:
    - "6.1  HMAC with SHA-1\n   The HMAC with SHA-1 algorithm is described in RFC
      2104 [HMAC].  The\n   algorithm identifier for HMAC with SHA-1 is:\n      hMAC-SHA1
      OBJECT IDENTIFIER ::= { iso(1)\n         identified-organization(3) dod(6) internet(1)
      security(5)\n         mechanisms(5) 8 1 2 }\n   There are two possible encodings
      for the HMAC with SHA-1\n   AlgorithmIdentifier parameters field.  The two alternatives
      arise\n   from the fact that when the 1988 syntax for the AlgorithmIdentifier\n
      \  type was translated into the 1997 syntax, the OPTIONAL associated\n   with
      the AlgorithmIdentifier parameters got lost.  Later the OPTIONAL\n   was recovered
      via a defect report, but by then many people thought\n   that algorithm parameters
      were mandatory.  Because of this history\n   some implementations may encode
      parameters as a NULL while others\n   omit them entirely.\n   The AlgorithmIdentifier
      parameters field is OPTIONAL.  If present,\n   the parameters field MUST contain
      a NULL.  Implementations MUST\n   accept HMAC with SHA-1 AlgorithmIdentifiers
      with absent parameters.\n   Implementations MUST accept HMAC with SHA-1 AlgorithmIdentifiers
      with\n   NULL parameters.  Implementations SHOULD generate HMAC with SHA-1\n
      \  AlgorithmIdentifiers with absent parameters.\n"
    title: 6.1  HMAC with SHA-1
  title: 6  Message Authentication Code Algorithms
- contents:
  - "7  ASN.1 Module\n   CryptographicMessageSyntaxAlgorithms\n       { iso(1) member-body(2)
    us(840) rsadsi(113549)\n         pkcs(1) pkcs-9(9) smime(16) modules(0) cmsalg-2001(16)
    }\n   DEFINITIONS IMPLICIT TAGS ::=\n   BEGIN\n   -- EXPORTS All\n   -- The types
    and values defined in this module are exported for use\n   -- in the other ASN.1
    modules.  Other applications may use them for\n   -- their own purposes.\n   IMPORTS\n
    \    -- Imports from RFC 3280 [PROFILE], Appendix A.1\n           AlgorithmIdentifier\n
    \             FROM PKIX1Explicit88 { iso(1)\n                   identified-organization(3)
    dod(6) internet(1)\n                   security(5) mechanisms(5) pkix(7) mod(0)\n
    \                  pkix1-explicit(18) } ;\n   -- Algorithm Identifiers\n   sha-1
    OBJECT IDENTIFIER ::= { iso(1) identified-organization(3)\n       oiw(14) secsig(3)
    algorithm(2) 26 }\n   md5 OBJECT IDENTIFIER ::= { iso(1) member-body(2) us(840)\n
    \      rsadsi(113549) digestAlgorithm(2) 5 }\n   id-dsa OBJECT IDENTIFIER ::=
    \ { iso(1) member-body(2) us(840)\n       x9-57(10040) x9cm(4) 1 }\n   id-dsa-with-sha1
    OBJECT IDENTIFIER ::=  { iso(1) member-body(2)\n       us(840) x9-57(10040) x9cm(4)
    3 }\n   rsaEncryption OBJECT IDENTIFIER ::= { iso(1) member-body(2)\n       us(840)
    rsadsi(113549) pkcs(1) pkcs-1(1) 1 }\n   md5WithRSAEncryption OBJECT IDENTIFIER
    ::= { iso(1)\n       member-body(2) us(840) rsadsi(113549) pkcs(1) pkcs-1(1) 4
    }\n   sha1WithRSAEncryption OBJECT IDENTIFIER ::= { iso(1)\n       member-body(2)
    us(840) rsadsi(113549) pkcs(1) pkcs-1(1) 5 }\n   dh-public-number OBJECT IDENTIFIER
    ::= { iso(1) member-body(2)\n       us(840) ansi-x942(10046) number-type(2) 1
    }\n   id-alg-ESDH OBJECT IDENTIFIER ::= { iso(1) member-body(2) us(840)\n       rsadsi(113549)
    pkcs(1) pkcs-9(9) smime(16) alg(3) 5 }\n   id-alg-SSDH OBJECT IDENTIFIER ::= {
    iso(1) member-body(2) us(840)\n       rsadsi(113549) pkcs(1) pkcs-9(9) smime(16)
    alg(3) 10 }\n   id-alg-CMS3DESwrap OBJECT IDENTIFIER ::= { iso(1) member-body(2)\n
    \      us(840) rsadsi(113549) pkcs(1) pkcs-9(9) smime(16) alg(3) 6 }\n   id-alg-CMSRC2wrap
    OBJECT IDENTIFIER ::= { iso(1) member-body(2)\n       us(840) rsadsi(113549) pkcs(1)
    pkcs-9(9) smime(16) alg(3) 7 }\n   des-ede3-cbc OBJECT IDENTIFIER ::= { iso(1)
    member-body(2)\n       us(840) rsadsi(113549) encryptionAlgorithm(3) 7 }\n   rc2-cbc
    OBJECT IDENTIFIER ::= { iso(1) member-body(2) us(840)\n       rsadsi(113549) encryptionAlgorithm(3)
    2 }\n   hMAC-SHA1 OBJECT IDENTIFIER ::= { iso(1) identified-organization(3)\n
    \      dod(6) internet(1) security(5) mechanisms(5) 8 1 2 }\n   id-PBKDF2 OBJECT
    IDENTIFIER ::= { iso(1) member-body(2) us(840)\n       rsadsi(113549) pkcs(1)
    pkcs-5(5) 12 }\n   -- Public Key Types\n   Dss-Pub-Key ::= INTEGER  -- Y\n   RSAPublicKey
    ::= SEQUENCE {\n     modulus INTEGER,  -- n\n     publicExponent INTEGER }  --
    e\n   DHPublicKey ::= INTEGER  -- y = g^x mod p\n   -- Signature Value Types\n
    \  Dss-Sig-Value ::= SEQUENCE {\n     r INTEGER,\n     s INTEGER }\n   -- Algorithm
    Identifier Parameter Types\n   Dss-Parms ::= SEQUENCE {\n     p INTEGER,\n     q
    INTEGER,\n     g INTEGER }\n   DHDomainParameters ::= SEQUENCE {\n     p INTEGER,
    \ -- odd prime, p=jq +1\n     g INTEGER,  -- generator, g\n     q INTEGER,  --
    factor of p-1\n     j INTEGER OPTIONAL,  -- subgroup factor\n     validationParms
    ValidationParms OPTIONAL }\n   ValidationParms ::= SEQUENCE {\n     seed BIT STRING,\n
    \    pgenCounter INTEGER }\n   KeyWrapAlgorithm ::= AlgorithmIdentifier\n   RC2wrapParameter
    ::= RC2ParameterVersion\n   RC2ParameterVersion ::= INTEGER\n   CBCParameter ::=
    IV\n   IV ::= OCTET STRING  -- exactly 8 octets\n   RC2CBCParameter ::= SEQUENCE
    {\n     rc2ParameterVersion INTEGER,\n     iv OCTET STRING  }  -- exactly 8 octets\n
    \  PBKDF2-params ::= SEQUENCE {\n     salt CHOICE {\n       specified OCTET STRING,\n
    \      otherSource AlgorithmIdentifier },\n     iterationCount INTEGER (1..MAX),\n
    \    keyLength INTEGER (1..MAX) OPTIONAL,\n     prf AlgorithmIdentifier\n       DEFAULT
    { algorithm hMAC-SHA1, parameters NULL } }\n   END -- of CryptographicMessageSyntaxAlgorithms\n"
  title: 7  ASN.1 Module
- contents:
  - "8  References\n   [3DES]      American National Standards Institute.  ANSI X9.52-1998,\n
    \              Triple Data Encryption Algorithm Modes of Operation.\n               1998.\n
    \  [CERTALGS]  Bassham, L., Housley, R. and W. Polk, \"Algorithms and\n               Identifiers
    for the Internet X.509 Public Key\n               Infrastructure Certificate and
    Certificate Revocation\n               List (CRL) Profile\", RFC 3279, April 2002.\n
    \  [CMS]       Housley, R., \"Cryptographic Message Syntax\", RFC 3269,\n               August
    2002.\n   [DES]       American National Standards Institute.  ANSI X3.106,\n               \"American
    National Standard for Information Systems -\n               Data Link Encryption\".
    \ 1983.\n   [DH-X9.42]  Rescorla, E., \"Diffie-Hellman Key Agreement Method\",
    RFC\n               2631, June 1999.\n   [DSS]       National Institute of Standards
    and Technology.  FIPS Pub\n               186: Digital Signature Standard.  19
    May 1994.\n   [HMAC]      Krawczyk, H., \"HMAC: Keyed-Hashing for Message\n               Authentication\",
    RFC 2104, February 1997.\n   [MD5]       Rivest, R., \"The MD5 Message-Digest
    Algorithm\", RFC 1321,\n               April 1992.\n   [MMA]       Rescorla, E.,
    \"Preventing the Million Message Attack on\n               CMS\", RFC 3218, January
    2002.\n   [MODES]     National Institute of Standards and Technology.  FIPS Pub\n
    \              81: DES Modes of Operation.  2 December 1980.\n   [NEWPKCS#1] Kaliski,
    B. and J. Staddon, \"PKCS #1: RSA Encryption,\n               Version 2.0, RFC
    2437, October 1998.\n   [OLDCMS]    Housley, R., \"Cryptographic Message Syntax\",
    RFC 2630,\n               June 1999.\n   [PKCS#1]    Kaliski, B, \"PKCS #1: RSA
    Encryption, Version 2.0\", RFC\n               2437, October, 1998.\n   [PKCS#5]
    \   Kaliski, B., \"PKCS #5: Password-Based Cryptography\n               Specification\",
    RFC 2898, September 2000.\n   [PROFILE]   Housley, R., Ford, W., Polk, W. and
    D. Solo, \"Internet\n               X.509 Public Key Infrastructure Certificate
    and\n               Certificate Revocation List (CRL) Profile\", RFC 3280,\n               April
    2002.\n   [RANDOM]    Eastlake, D., Crocker, S. and J. Schiller, \"Randomness\n
    \              Recommendations for Security, RFC 1750, December 1994.\n   [RC2]
    \      Rivest, R., \"A Description of the RC2 (r) Encryption\n               Algorithm\",
    RFC 2268, March 1998.\n   [SHA1]      National Institute of Standards and Technology.
    \ FIPS Pub\n               180-1: Secure Hash Standard.  17 April 1995.\n   [STDWORDS]
    \ Bradner, S., \"Key Words for Use in RFCs to Indicate\n               Requirement
    Levels\", BCP 14, RFC 2119, March 1997.\n   [WRAP]      Housley, R., \"Triple-DES
    and RC2 Key Wrapping\", RFC 3217,\n               December 2001.\n   [X.208-88]
    \ CCITT.  Recommendation X.208: Specification of Abstract\n               Syntax
    Notation One (ASN.1).  1988.\n   [X.209-88]  CCITT.  Recommendation X.209: Specification
    of Basic\n               Encoding Rules for Abstract Syntax Notation One (ASN.1).\n
    \              1988.\n"
  title: 8  References
- contents:
  - "9  Security Considerations\n   The CMS provides a method for digitally signing
    data, digesting data,\n   encrypting data, and authenticating data.  This document
    identifies\n   the conventions for using several cryptographic algorithms for
    use\n   with the CMS.\n   Implementations must protect the signer's private key.
    \ Compromise of\n   the signer's private key permits masquerade.\n   Implementations
    must protect the key management private key, the\n   key-encryption key, and the
    content-encryption key.  Compromise of\n   the key management private key or the
    key-encryption key may result\n   in the disclosure of all contents protected
    with that key.\n   Similarly, compromise of the content-encryption key may result
    in\n   disclosure of the associated encrypted content.\n   Implementations must
    protect the key management private key and the\n   message-authentication key.
    \ Compromise of the key management private\n   key permits masquerade of authenticated
    data.  Similarly, compromise\n   of the message-authentication key may result
    in undetectable\n   modification of the authenticated content.\n   The key management
    technique employed to distribute message-\n   authentication keys must itself
    provide authentication, otherwise the\n   content is delivered with integrity
    from an unknown source.  Neither\n   RSA [PKCS#1, NEWPKCS#1] nor Ephemeral-Static
    Diffie-Hellman [DH-\n   X9.42] provide the necessary data origin authentication.
    \ Static-\n   Static Diffie-Hellman [DH-X9.42] does provide the necessary data\n
    \  origin authentication when both the originator and recipient public\n   keys
    are bound to appropriate identities in X.509 certificates\n   [PROFILE].\n   When
    more than two parties share the same message-authentication key,\n   data origin
    authentication is not provided.  Any party that knows the\n   message-authentication
    key can compute a valid MAC, therefore the\n   content could originate from any
    one of the parties.\n   Implementations must randomly generate content-encryption
    keys,\n   message-authentication keys, initialization vectors (IVs), one-time\n
    \  values (such as the k value when generating a DSA signature), and\n   padding.
    \ Also, the generation of public/private key pairs relies on\n   a random numbers.
    \ The use of inadequate pseudo-random number\n   generators (PRNGs) to generate
    cryptographic such values can result\n   in little or no security.  An attacker
    may find it much easier to\n   reproduce the PRNG environment that produced the
    keys, searching the\n   resulting small set of possibilities, rather than brute
    force\n   searching the whole key space.  The generation of quality random\n   numbers
    is difficult.  RFC 1750 [RANDOM] offers important guidance in\n   this area, and
    Appendix 3 of FIPS Pub 186 [DSS] provides one quality\n   PRNG technique.\n   When
    using key agreement algorithms or previously distributed\n   symmetric key-encryption
    keys, a key-encryption key is used to\n   encrypt the content-encryption key.
    \ If the key-encryption and\n   content-encryption algorithms are different, the
    effective security\n   is determined by the weaker of the two algorithms.  If,
    for example,\n   content is encrypted with 168-bit Triple-DES and the Triple-DES\n
    \  content-encryption key is wrapped with a 40-bit RC2 key, then at most\n   40
    bits of protection is provided.  A trivial search to determine the\n   value of
    the 40-bit RC2 key can recover Triple-DES key, and then the\n   Triple-DES key
    can be used to decrypt the content.  Therefore,\n   implementers must ensure that
    key-encryption algorithms are as strong\n   or stronger than content-encryption
    algorithms.\n   RFC 3217 [WRAP] specifies key wrap algorithms used to encrypt
    a\n   Triple-DES content-encryption key with a Triple-DES key-encryption\n   key
    [3DES] or to encrypt a RC2 content-encryption key with a RC2\n   key-encryption
    key [RC2].  The key wrap algorithms makes use of CBC\n   mode [MODES].  These
    key wrap algorithms have been reviewed for use\n   with Triple-DES and RC2.  They
    have not been reviewed for use with\n   other cryptographic modes or other encryption
    algorithms.  Therefore,\n   if a CMS implementation wishes to support ciphers
    in addition to\n   Triple-DES or RC2, then additional key wrap algorithms need
    to be\n   defined to support the additional ciphers.\n   Implementers should be
    aware that cryptographic algorithms become\n   weaker with time.  As new cryptanalysis
    techniques are developed and\n   computing performance improves, the work factor
    to break a particular\n   cryptographic algorithm will reduce.  Therefore, cryptographic\n
    \  algorithm implementations should be modular allowing new algorithms\n   to
    be readily inserted.  That is, implementers should be prepared to\n   regularly
    update the set of algorithms in their implementations.\n   Users of the CMS, particularly
    those employing the CMS to support\n   interactive applications, should be aware
    that RSA (PKCS #1 v1.5), as\n   specified in RFC 2313 [PKCS#1], is vulnerable
    to adaptive chosen\n   ciphertext attacks when applied for encryption purposes.\n
    \  Exploitation of this identified vulnerability, revealing the result\n   of
    a particular RSA decryption, requires access to an oracle which\n   will respond
    to a large number of ciphertexts (based on currently\n   available results, hundreds
    of thousands or more), which are\n   constructed adaptively in response to previously-received
    replies\n   providing information on the successes or failures of attempted\n
    \  decryption operations.  As a result, the attack appears significantly\n   less
    feasible to perpetrate for store-and-forward S/MIME environments\n   than for
    directly interactive protocols.  Where the CMS constructs\n   are applied as an
    intermediate encryption layer within an interactive\n   request-response communications
    environment, exploitation could be\n   more feasible.\n   An updated version of
    PKCS #1 has been published, PKCS #1 Version 2.0\n   [NEWPKCS#1].  This updated
    document supersedes RFC 2313.  PKCS #1\n   Version 2.0 preserves support for the
    encryption padding format\n   defined in PKCS #1 Version 1.5 [PKCS#1], and it
    also defines a new\n   alternative.  To resolve the adaptive chosen ciphertext\n
    \  vulnerability, the PKCS #1 Version 2.0 specifies and recommends use\n   of
    Optimal Asymmetric Encryption Padding (OAEP) when RSA encryption\n   is used to
    provide confidentiality.  Designers of protocols and\n   systems employing CMS
    for interactive environments should either\n   consider usage of OAEP, or should
    ensure that information which could\n   reveal the success or failure of attempted
    PKCS #1 Version 1.5\n   decryption operations is not provided.  Support for OAEP
    will likely\n   be added to a future version of the CMS algorithm specification.\n
    \  See RFC 3218 [MMA] for more information about thwarting the adaptive\n   chosen
    ciphertext vulnerability in PKCS #1 Version 1.5\n   implementations.\n"
  title: 9  Security Considerations
- contents:
  - "10 Acknowledgments\n   This document is the result of contributions from many
    professionals.\n   I appreciate the hard work of all members of the IETF S/MIME
    Working\n   Group.  I extend a special thanks to Rich Ankney, Simon Blake-Wilson,\n
    \  Tim Dean, Steve Dusse, Carl Ellison, Peter Gutmann, Bob Jueneman,\n   Stephen
    Henson, Paul Hoffman, Scott Hollenbeck, Don Johnson, Burt\n   Kaliski, John Linn,
    John Pawling, Blake Ramsdell, Francois Rousseau,\n   Jim Schaad, and Dave Solo
    for their efforts and support.\n"
  title: 10 Acknowledgments
- contents:
  - "11 Author Address\n   Russell Housley\n   RSA Laboratories\n   918 Spring Knoll
    Drive\n   Herndon, VA 20170\n   EMail: rhousley@rsasecurity.com\n"
  title: 11 Author Address
- contents:
  - "12.  Full Copyright Statement\n   Copyright (C) The Internet Society (2002).
    \ All Rights Reserved.\n   This document and translations of it may be copied
    and furnished to\n   others, and derivative works that comment on or otherwise
    explain it\n   or assist in its implementation may be prepared, copied, published\n
    \  and distributed, in whole or in part, without restriction of any\n   kind,
    provided that the above copyright notice and this paragraph are\n   included on
    all such copies and derivative works.  However, this\n   document itself may not
    be modified in any way, such as by removing\n   the copyright notice or references
    to the Internet Society or other\n   Internet organizations, except as needed
    for the purpose of\n   developing Internet standards in which case the procedures
    for\n   copyrights defined in the Internet Standards process must be\n   followed,
    or as required to translate it into languages other than\n   English.\n   The
    limited permissions granted above are perpetual and will not be\n   revoked by
    the Internet Society or its successors or assigns.\n   This document and the information
    contained herein is provided on an\n   \"AS IS\" basis and THE INTERNET SOCIETY
    AND THE INTERNET ENGINEERING\n   TASK FORCE DISCLAIMS ALL WARRANTIES, EXPRESS
    OR IMPLIED, INCLUDING\n   BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF THE
    INFORMATION\n   HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED WARRANTIES
    OF\n   MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.\n"
  title: 12.  Full Copyright Statement
- contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided
    by the\n   Internet Society.\n"
  title: Acknowledgement
