Abstract This document specifies the algorithms, algorithm parameters, asymmetric key formats, asymmetric key sizes, and signature formats used in BGPsec (Border Gateway Protocol Security).
This document updates RFC 7935 ("The Profile for Algorithms and Key Sizes for Use in the Resource Public Key Infrastructure").
This document also includes example BGPsec UPDATE messages as well as the private keys used to generate the messages and the certificates necessary to validate those signatures.
This document specifies the following:  the digital signature algorithm and parameters,  the hash algorithm and parameters,  the public and private key formats, and  the signature formats used by Resource Public Key Infrastructure (RPKI)
Certification Authorities (CAs) and BGPsec (Border Gateway Protocol Security)
CAs use these algorithms when processing requests for BGPsec Router Certificates [RFC8209].
Examples of when BGPsec routers use these algorithms include requesting BGPsec certificates [RFC8209], signing BGPsec UPDATE messages [RFC8205], and verifying signatures on BGPsec UPDATE messages [RFC8205].
This document updates [RFC7935] to add support for a) a different algorithm for BGPsec certificate requests, which are issued only by BGPsec speakers; b) a different Subject Public Key Info format for BGPsec certificates, which is needed for the specified BGPsec signature algorithm; and c) different signature formats for BGPsec signatures, which are needed for the specified BGPsec signature algorithm.
The BGPsec certificates are differentiated from other RPKI certificates by the use of the BGPsec Extended Key Usage as defined in [RFC8209].
BGPsec uses a different algorithm [RFC6090]
[DSS] as compared to the rest of the RPKI to minimize the size of the protocol exchanged between routers.
BGPsec UPDATE messages as well as the private keys used to generate the messages and the certificates necessary to validate the signatures.
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in BCP 14
when, and only when, they appear in all capitals, as shown here.
The algorithms used to compute signatures on CA certificates, BGPsec Router Certificates, and Certificate Revocation Lists (CRLs)
are as specified in Section 2 of [RFC7935].
This section addresses BGPsec algorithms; for example, these algorithms are used by BGPsec routers to request BGPsec certificates, by RPKI CAs to verify BGPsec certification requests, by BGPsec routers to generate BGPsec UPDATE messages, and by BGPsec routers to verify BGPsec UPDATE messages:  The signature algorithm used MUST be the Elliptic Curve Digital Signature Algorithm (ECDSA) with curve P 256 [RFC6090] [DSS].
The hash algorithm used MUST be SHA 256 [SHS].
Hash algorithms are not identified by themselves in certificates or BGPsec UPDATE messages.
They are represented by an OID that combines the hash algorithm with the digital signature algorithm as follows:
The ecdsa with SHA256 OID [RFC5480] MUST appear in the Public Key Cryptography Standards #10 (PKCS #10)
signatureAlgorithm field [RFC2986] or in the Certificate Request Message Format (CRMF) POPOSigningKey algorithm field [RFC4211]; where the OID is placed depends on the certificate request format generated.
In BGPsec UPDATE messages, the ECDSA with SHA 256 algorithm suite identifier value 0x1 (see Section 7) is included in the Signature Block List's Algorithm Suite Identifier field.
The key formats used to compute signatures on CA certificates, BGPsec Router Certificates, and CRLs are as specified in Section 3 of [RFC7935].
This section addresses key formats found in the BGPsec Router Certificate requests and in BGPsec Router Certificates.
The ECDSA private keys used to compute signatures for certificate requests and BGPsec UPDATE messages MUST come from the P 256 curve [RFC5480].
The public key pair MUST use the uncompressed form.
The Subject's public key is included in subjectPublicKeyInfo [RFC5280].
It has two sub fields: algorithm and subjectPublicKey.
The values for the structures and their sub structures follow:  algorithm (an AlgorithmIdentifier type):
ecPublicKey OID MUST be used in the algorithm field, as specified in Section 2.1.1 of [RFC5480].
The value for the associated parameters MUST be secp256r1, as specified in Section 2.1.1.1 of [RFC5480].
subjectPublicKey: ECPoint MUST be used to encode the certificate's subjectPublicKey field, as specified in Section 2.2 of [RFC5480].
Private Key Format Local policy determines private key format.
The structure for the certificate's and CRL's signature field MUST be as specified in Section 4 of [RFC7935]; this is the same format used by other RPKI certificates.
The structure for the certification request's and BGPsec UPDATE message's signature field MUST be as specified in Section 2.2.3 of [RFC3279].
It is anticipated that BGPsec will require the adoption of updated key sizes and a different set of signature and hash algorithms over time, in order to maintain an acceptable level of cryptographic security.
This profile should be updated to specify such future requirements, when appropriate.
The recommended procedures to implement such a transition of key sizes and algorithms are specified in [RFC6916].
The security considerations of [RFC3279], [RFC5480], [RFC6090], [RFC7935], and [RFC8209] apply to certificates.
The security considerations of [RFC3279], [RFC6090], [RFC7935], and [RFC8209] apply to certification requests.
The security considerations of [RFC3279], [RFC6090], and [RFC8205] apply to BGPsec UPDATE messages.
No new security considerations are introduced as a result of this specification.
The Internet Assigned Numbers Authority (IANA) has created the "BGPsec Algorithm Suite Registry" in the Resource Public Key Infrastructure (RPKI) group.
The one octet "BGPsec Algorithm Suite Registry"
identifiers assigned by IANA identify the digest algorithm and signature algorithm used in the BGPsec Signature Block List's Algorithm Suite Identifier field.
IANA has registered a single algorithm suite identifier for the digest algorithm SHA 256 [SHS] and for the signature algorithm ECDSA on the P 256 curve [RFC6090] [DSS].
Future assignments are to be made using the Standards Action process defined in [RFC8126].
Assignments consist of the one octet algorithm suite identifier value and the associated digest algorithm name and signature algorithm name.
Topology and Experiment Description Topology: AS(64496)
Prefix Announcement: AS(64496), 192.0.2.0/24, 2001:
For this example, the ECDSA algorithm was provided with a static k to make the result deterministic.
The k used for all signature operations was taken from [RFC6979], Appendix A.2.5, "Signatures With SHA 256, message   'sample'".
k   A6E3C57DD01ABE90086538398355DD4C 3B17AA873382B0F24D6129493D8AAD60 Keys of AS64496:
Router Key Certificate example using OpenSSL
1.0.1e fips 11 Feb 2013
Jan  1 05:00:00 2017 GMT
Not After : Jul  1 05:00:00 2018
GMT Subject: CN ROUTER 0000FBF0
B5:EE:C1:54 X509v3 Extended Key Usage:
1.3.6.1.5.5.7.3.30 sbgp autonomousSysNum: critical Autonomous System Numbers: 64496 Routing Domain Identifiers:
END CERTIFICATE  Keys of AS(65536):
Router Key Certificate example using OpenSSL
1.0.1e fips 11 Feb 2013
Jan  1 05:00:00 2017 GMT
Not After : Jul  1 05:00:00 2018
GMT Subject: CN ROUTER 00010000
X509v3 Subject Key Identifier: 47:
EC X509v3 Extended Key Usage:
1.3.6.1.5.5.7.3.30 sbgp autonomousSysNum: critical Autonomous System Numbers: 65536 Routing Domain Identifiers: inherit Signature Algorithm: ecdsa with SHA256 30:45:02:21:00:8c:d9:f8:12:96:88:82:74:03
/wQPMA2gBzAFAgMBAAChAgUAMAoGCCqGSM49BAMCA0gAMEUCIQCM2fgS loiCdAOhgoIYxTEA7jU46Pqucgn mGcBeGl3jAIgX 46vxBmvijTsxaha9tmIZnt puStZDy6v0T7y7dQkXQ
BGPsec IPv4 UPDATE from AS(65536) to AS(65537):
Binary Form of BGPsec UPDATE
FF FF FF FF FF FF FF FF  FF FF FF FF FF FF FF FF 01 03
EC 40  01 01 02 80 04 04 00 00 00 00 80 0E 0D 00 01
04 C6 33 64 64 00 18 C0 00 02
90 1E 00 CD 00 0E
FB F0 00 BF 01
F2 3B F1 AB 2F 8A 9D
26 86 4E BB D8 DF 27 11 C7
44 06 EC 00 48 30 46 02 21 00 EF D4 8B 2A AC B6  A8 FD 11 40 DD 9C D4 5E 81 D6 9D 2C 87 7B 56 AA  F9 91 C3 4D 0E A8 4E AF 37 16 02 21
29 AB B2 F3 9B 6A 07 96 3B D5 55 A8 7A B2 B7 33
91 F1 66 8F D8 61 8C 83 FA C3 F1 AB 4D 91
0F 55 CA E7 1A 21 5E
F3 CA FE 3A CC 45 B5 EE C1
21 00 EF D4 8B 2A AC B6 A8 FD
11 40 DD 9C D4 5E 81 D6 9D 2C
87 7B 56 AA F9 91  C3 4D 0E A8 4E AF 37 16 02
21 00 8E 21 F6 0E 44  C6
06 6C 8B 8A 95 A3 C0 9D 3A D4
A2 D7  28 EE AD 07 A1 7E D7 AA 05 5E CA Signature from AS(64496) to AS(65536):
21 33 E5 CA A0 26 BE 07
3D 9C 1B 4E FE B9 B9 77 9F
20 F8 F5 DE 29 FA 98
9F 60 47 D0 81 54
Signature: 30 46 02 21 00 EF D4 8B
2A AC B6 A8 FD 11 40 DD 9C D4 5E 81 D6 9D 2C 87
AA F9 91 C3 4D 0E A8 4E AF
02 21 00   8E 21 F6 0E 44 C6
06 6C 8B 8A 95 A3 C0 9D 3A D4
37 95 85 A2 D7 28 EE AD 07 A1 7E D7 AA 05 5E CA Signature from AS(65536) to AS(65537):
5D B0 63 54 22 3E 93 BA 41
36 52 0C 5F 84 Signature:
30 46 02 21 00 EF D4 8B
2A AC B6 A8 FD 11 40 DD 9C D4 5E 81 D6 9D 2C 87
AA F9 91 C3 4D 0E A8 4E AF
90 F2 C1 29 AB B2 F3 9B 6A 07 96 3B D5 55 A8 7A
B2 B7 33 3B 7B
91 F1 66 8F D8 61 8C 83 FA C3 F1
The human readable output is produced using bgpsec io, a bgpsec traffic generator that uses a wireshark like printout.
Send UPDATE Message  marker: FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
Flags: 0x80 (Optional, Non transitive, Complete)
MP REACH NLRI (16 bytes)
Flags: 0x80 (Optional, Non transitive, Complete)
Subsequent address family identifier: Unicast (1)
Next hop network address: (4 bytes)
MP Reach NLRI prefix length:
192.0.2.0  BGPSEC Path Attribute (209 bytes)
0x90 (Optional, Complete, Extended Length)
Length: 205 bytes  Secure Path (14 bytes)
Algo ID: 1  Signature Segment: (94 bytes)
8FD8618C83FAC3F1  Signature Segment: (94 bytes)
IPv6 UPDATE from AS(65536) to AS(65537):
Binary Form of BGP/BGPsec UPDATE (TCP DUMP): FF FF FF FF FF FF FF FF  FF FF FF FF FF FF FF FF 01
02 80 04 04 00 00 00 00 80 0E 1A 00
20 01 00 10 00 00 00 00 00 00
00 20 20 01 0D B8 90 1E 00
FB F0 00 BF 01
47 F2 3B F1  AB 2F 8A 9D
26 86 4E BB D8 DF 27 11 C7 44 06
21 00 EF D4 8B 2A AC B6 A8 FD 11  40 DD 9C D4 5E 81 D6 9D 2C 87 7B 56 AA F9 91 C3
4D 0E A8 4E AF
21 00 D1 B9 4F 62 51 04  6D 21 36 A1 05 B0 F4 72 7C C5 BC D6 74 D9 7D 28  E6 1B 8F
43 BD DE 91 C3 06 26 AB 4D 91 0F 55 CA  E7 1A 21 5E
F3 CA FE 3A CC 45 B5 EE C1 54 00 48
21 00 EF D4 8B 2A AC B6 A8 FD 11 40 DD  9C D4 5E 81 D6 9D 2C
87 7B 56 AA F9 91 C3 4D 0E
02 21 00 E2 A0 2C 68 FE 53 CB 96  93 4C
78 1F 5A 14 A2 97 19 79 20 0C 91 56 ED F8
55 05 8E 80 53 F4 AC D3 Signature from AS(64496) to AS(65536):
80 46 01 D6 55 FC 52 11 89
AC FC 77 55 6D 06 C7 Signature:
30 46 02 21 00 EF D4 8B
2A AC B6 A8 FD 11 40 DD 9C D4 5E 81 D6 9D 2C 87
AA F9 91 C3 4D 0E A8 4E AF
02 21 00   E2 A0 2C 68 FE 53 CB 96
93 4C 78 1F 5A 14 A2 97
19 79 20 0C 91 56 ED F8 55 05 8E 80 53 F4 AC D3 Signature from AS(65536) to AS(65537):
49 EC 70 8D EC 5C 85
C2 17 8C 72 FE 4C 79 FF A9 3C 95
EE 7E EE 05 46 AF 5F D0 Signature: 30 46 02 21 00 EF D4 8B   2A AC B6 A8 FD 11 40 DD 9C D4 5E 81 D6 9D 2C 87
7B 56 AA F9 91 C3 4D 0E A8 4E AF 37 16 02
D1 B9 4F 62 51 04
6D 21 36 A1 05 B0 F4 72 7C C5   BC D6 74 D9 7D 28 E6 1B 8F
43 BD DE 91 C3 06 26
The human readable output is produced using bgpsec io, a bgpsec traffic generator that uses a wireshark like printout.
Send UPDATE Message  marker: FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
Flags: 0x80 (Optional, Non transitive, Complete)
MP REACH NLRI (29 bytes)
Flags: 0x80 (Optional, Non transitive, Complete)
Subsequent address family identifier: Unicast (1)
Next hop network address: (16 bytes)
db8::  BGPSEC Path Attribute (209 bytes)
0x90 (Optional, Complete, Extended Length)
Length: 205 bytes  Secure Path (14 bytes)
Algo ID: 1  Signature Segment: (94 bytes)
