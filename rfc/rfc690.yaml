- title: __initial_text__
  contents:
  - "           Comments on the proposed Host/IMP Protocol Change\nThis is a set of\
    \ comments on Dave Walden's RFC 687 suggesting a set of\nchanges to the host--imp\
    \ protocol.  Dave's points are reproduced here\nwith my comments underneath.\n\
    1. Expanded Leader Size.  The leader will be expanded from two to five\n16-bit\
    \ words.  This will provide space for necessary field expansions\nand additions.\n\
    \    The existing protocols set the host header at 40 bits so that taken\n   \
    \ together with the leader the length was 72 bits; a nice boundary for\n    both\
    \ 8 bit and 36 bit machines.  This suggestion would result in a\n    prefix of\
    \ 80 + 40 = 120 bits, not so nice (unless the host header is\n    extended to\
    \ 64 bits for a total prefix of 144 bits).\n2. Expanded Address Field.  The address\
    \ field will be expanded to 24\nbit, 16 bits of IMP address and 8 bits of host\
    \ address.  This expansion\nis more than adequate for any foreseeable ARPA Network\
    \ growth.\n    Just a few years ago 256 seemed like a lot of hosts, perhaps, a\n\
    \    extensible scheme might be more appropriate. (I concede 16,777,216,\n   \
    \ is big)\n3. New Message Length Field.  A new field will be added which will\
    \ allow\nthe source host to optionally specify the message length (in bits) to\n\
    the IMP subnetwork.  The IMP subnetwork may be able to use this\ninformation (when\
    \ available) to better utilize network buffer storage.\nThe destination host may\
    \ also be able to use this information to better\nutilize its buffer storage.\
    \  This field will be 13 bits wide.\n    This sound very useful, but if we every\
    \ want to have longer messages\n    than now the field should be wider, say 16\
    \ bits.\n4. Expanded Handling Type Field.  The handling type field which now is\n\
    used to distinguish between priority and non-priority message streams,\netc.,\
    \ will be expanded to eight bits.  This expanded field will provide\nfor the possibility\
    \ of a number of parallel message streams having\ndifferent handling characteristics\
    \ between pairs of hosts; e.g.,\npriority, non-priority, varying numbers of packets\
    \ per message (see\nbelow), unordered messages (i.e. the present type-3 messages),\
    \ a message\nstream requiring guaranteed capacity, etc, Note that only some of\
    \ these\nfacilities will be available in the near term.\n    This sounds like\
    \ a good extension.\n5. Source Host Control of Packets per Message.  The possibility\
    \ will\nexist for the source host to specify a message stream which will use a\n\
    given number of packets per multi-packet message (e.g. two packets per\nmessage\
    \ or five packets per message).  Since the IMP network will not\nhave to use eight\
    \ packet-buffers for reassembly purposes, as at present,\nthis may result in better\
    \ services for such messages.  This will help\nusers who need both low delay and\
    \ high throughput.\n    This seems strange, why not use the message length (as\
    \ provided in 3\n    above) to determine the number of packets needed for this\
    \ message.\n6. Unordered (type-3) Message Change.  Unordered messages will be\n\
    indicated by a handling type rather than by a message type as at\npresent.  This\
    \ is compatible with the need to check the host access\ncontrol capabilities of\
    \ all messages.  This will provide a slight\nbackward incompatibility for the\
    \ three or so hosts which presently use\ntype-3 messages in their research.\n\
    \    Good, a current special case becomes a general facility.\n7. Change in Format\
    \ of Fake Host Addresses.  The For/From IMP bit will\nbe eliminated.  The fake\
    \ host addresses will be the four highest host\nnumbers (e.g. IMP Teletype will\
    \ be host 252).\n    Another change for the better.\n8. Addition of a Parameter\
    \ to the IMP to Host NOP.  The IMP to host NOP\nwill have added to it a parameter\
    \ specifying the address (IMP and host\nnumber) of the host.\n    Ah, a clever\
    \ touch, very handy.\n9. Backward Compatibility.  The old and new formats will\
    \ be supported in\nparallel in the IMPs for the foreseeable future to allow gradual\n\
    phaseover of host software.   A host will be able to specify to its IMP\nwhether\
    \ the old or new formats are to be used; thus, it will be possible\nfor the host\
    \ to specify switching back and forth between the two modes\nfor debugging purposes.\
    \  The specification of the mode to be used will\nbe possible via a proper choice\
    \ of format in the host to IMP NOP\nmessage;  The IMP will use the mode of the\
    \ Host to IMP NOP message the\nIMP has received.  Further, a host may select to\
    \ use either the old or\nnew format without needing to know more about the other\
    \ format message\nthan to discard them should they arrive.  The IMP will initialize\
    \ by\nsending several NOP messages of each type to give the hosts its choice.\n\
    Although a host not implementing the new format will not be able to\naddress hosts\
    \ on IMPs with IMP-number greater than 63, the IMPs will\nwherever possible do\
    \ the conversion necessary to permit hosts using the\nold format to communicate\
    \ with hosts using the new format and the\nreverse.  Finally, it will be possible\
    \ to convert the leader format from\nold to new or the reverse without knowledge\
    \ of the message type.\n    This sounds difficult to implement, but it is all\
    \ in the imp, so\n    fine.  Of course, something along these lines is crucial\
    \ in an\n    operating environment.  But I am beginning to get concerned about\n\
    \    changes to host--host protocol and network control programs.\n[What happened\
    \ to 10?]\n11. Non-blocking Host Interface.  A mechanism will be provided which\n\
    allows the IMP to refuse a message from a host without blocking the host\ninterface.\
    \  This mechanism will permit the IMP to gather the necessary\nresources to send\
    \ the refused message and then ask the host to resend\nthe message.  Finally,\
    \ the host will be permitted to ask to be able to\nsend a message and be notified\
    \ when it is possible without requiring the\nmessage to actually be sent and refused.\n\
    \    This is another welcome addition.\n12. Maximum Message Length.  The maximum\
    \ number of bits of data in a\nmessage may be reduced by a few bits.\n    I don't\
    \ see why, but it doesn't matter much.\nOn the whole a fine set of suggestion,\
    \ though I am concerned about\nchanges to host--host protocol implied here or\
    \ made more desirable by\nthese suggestions.  A rough guess is that there is easily\
    \ a couple of\nperson-months of system programmer time for each operating system\
    \ on the\nnet implied here.  Say 24 systems times 2 person-months each equals\
    \ 48\nperson-months equals 4 person-years.  And this may be the lower bound.\n\
    \       [ This RFC was put into machine readable form for entry ]\n       [ into\
    \ the online RFC archives by Alex McKenzie with    ]\n       [ support from GTE,\
    \ formerly BBN Corp.            11/99 ]\n"
