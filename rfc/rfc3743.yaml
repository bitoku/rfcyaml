- title: __initial_text__
  contents:
  - "              Joint Engineering Team (JET) Guidelines for\n         Internationalized\
    \ Domain Names (IDN) Registration and\n            Administration for Chinese,\
    \ Japanese, and Korean\n"
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard of any kind.  Distribution of\
    \ this\n   memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2004).  All Rights Reserved.\n"
- title: IESG Note
  contents:
  - "IESG Note\n   The IESG congratulates the Joint Engineering Team (JET) on developing\n\
    \   mechanisms to enforce their desired policy.  The Language Variant\n   Table\
    \ mechanisms described here allow JET to enforce language-based\n   character\
    \ variant preferences, and they set an example for those who\n   might want to\
    \ use variant tables for their own policy enforcement.\n   The IESG encourages\
    \ those following this example to take JET's\n   diligence as an example, as well\
    \ as its technical work.  To follow\n   their example, registration authorities\
    \ may need to articulate\n   policy, develop appropriate procedures and mechanisms\
    \ for\n   enforcement, and document the relationship between the two.  JET's\n\
    \   LVT mechanism should be adaptable to different policies, and can be\n   considered\
    \ during that development process.\n   The IETF does not, of course, dictate policy\
    \ or require the use of\n   any particular mechanisms for the implementation of\
    \ these policies,\n   as these are matters of sovereignty and contract.\n"
- title: Abstract
  contents:
  - "Abstract\n   Achieving internationalized access to domain names raises many\n\
    \   complex issues.  These are associated not only with basic protocol\n   design,\
    \ such as how names are represented on the network, compared,\n   and converted\
    \ to appropriate forms, but also with issues and options\n   for deployment, transition,\
    \ registration, and administration.\n   The IETF Standards for Internationalized\
    \ Domain Names, known as\n   \"IDNA\", focuses on access to domain names in a\
    \ range of scripts that\n   is broader in scope than the original ASCII.  The\
    \ development process\n   made it clear that use of characters with similar appearances\
    \ and/or\n   interpretations created potential for confusion, as well as\n   difficulties\
    \ in deployment and transition.  The conclusion was that,\n   while those issues\
    \ were important, they could best be addressed\n   administratively rather than\
    \ through restrictions embedded in the\n   protocols.  This document defines a\
    \ set of guidelines for applying\n   restrictions of that type for Chinese, Japanese\
    \ and Korean (CJK)\n   scripts and the zones that use them and, perhaps, the beginning\
    \ of a\n   framework for thinking about other zones, languages, and scripts.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction . . . . . . . . . . . . . . . . . . .\
    \ . . . . . .  3\n   2.  Definitions, Context, and Notation . . . . . . . . .\
    \ . . . . .  5\n       2.1.  Definitions and Context. . . . . . . . . . . . .\
    \ . . . .  5\n       2.2.  Notation for Ideographs and Other Non-ASCII CJK\n \
    \            Characters . . . . . . . . . . . . . . . . . . . . . . .  9\n   3.\
    \  Scope of the Administrative Guidelines . . . . . . . . . . . .  9\n       3.1.\
    \  Principles Underlying These Guidelines . . . . . . . . . 10\n       3.2.  Registration\
    \ of IDL. . . . . . . . . . . . . . . . . . . 13\n             3.2.1.  Using the\
    \ Language Variant Table . . . . . . . . 13\n             3.2.2.  IDL Package.\
    \ . . . . . . . . . . . . . . . . . . 14\n             3.2.3.  Procedure for Registering\
    \ IDLs . . . . . . . . . 14\n       3.3.  Deletion and Transfer of IDL and IDL\
    \ Package . . . . . . 19\n       3.4.  Activation and Deactivation of IDL Variants\
    \  . . . . . . 19\n             3.4.1.  Activation Algorithm . . . . . . . . .\
    \ . . . . . 19\n             3.4.2.  Deactivation Algorithm . . . . . . . . .\
    \ . . . . 20\n       3.5.  Managing Changes in Language Associations. . . . .\
    \ . . . 21\n       3.6.  Managing Changes to Language Variant Tables. . . . .\
    \ . . 21\n   4.  Examples of Guideline Use in Zones . . . . . . . . . . . . .\
    \ . 21\n   5.  Syntax Description for the Language Variant Table. . . . . . .\
    \ 25\n       5.1.  ABNF Syntax. . . . . . . . . . . . . . . . . . . . . . . 25\n\
    \       5.2.  Comments and Explanation of Syntax . . . . . . . . . . . 25\n  \
    \ 6.  Security Considerations. . . . . . . . . . . . . . . . . . . . 27\n   7.\
    \  Index to Terminology . . . . . . . . . . . . . . . . . . . . . 27\n   8.  Acknowledgments.\
    \ . . . . . . . . . . . . . . . . . . . . . . . 28\n   9.  References . . . .\
    \ . . . . . . . . . . . . . . . . . . . . . . 29\n       9.1.  Normative References\
    \ . . . . . . . . . . . . . . . . . . 29\n       9.2.  Informative References\
    \ . . . . . . . . . . . . . . . . . 30\n   10. Contributors . . . . . . . . .\
    \ . . . . . . . . . . . . . . . . 30\n       10.1. Authors' Addresses . . . .\
    \ . . . . . . . . . . . . . . . 31\n       10.2. Editors' Addresses . . . . .\
    \ . . . . . . . . . . . . . . 32\n   11. Full Copyright Statement . . . . . .\
    \ . . . . . . . . . . . . . 33\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   Domain names form the fundamental naming architecture of\
    \ the\n   Internet.  Countless Internet protocols and applications rely on\n \
    \  them, not just for stability and continuity, but also to avoid\n   ambiguity.\
    \  They were designed to be identifiers without any language\n   context.  However,\
    \ as domain names have become visible to end users\n   through Web URLs and e-mail\
    \ addresses, the strings in domain-name\n   labels are being increasingly interpreted\
    \ as names, words, or\n   phrases.  It is likely that users will do the same with\
    \ languages of\n   differing character sets, such as Chinese, Japanese and Korean\
    \ (CJK),\n   in which many words or concepts are represented using short sequences\n\
    \   of characters.\n   The introduction of what are called Internationalized Domain\
    \ Names\n   (IDN) amplifies both the difficulty of putting names into identifiers\n\
    \   and the confusion that exists between scripts and languages.\n   Character\
    \ symbols that appear (or actually are) identical, or that\n   have similar or\
    \ identical semantics but that are assigned the\n   different code points, further\
    \ increase the potential for confusion.\n   DNS internationalization also affects\
    \ a number of Internet protocols\n   and applications and creates additional layers\
    \ of complexity in terms\n   of technical administration and services.  Given\
    \ the added\n   complications of using a much broader range of characters than\
    \ the\n   original small ASCII subset, precautions are necessary in the\n   deployment\
    \ of IDNs in order to minimize confusion and fraud.\n   The IETF IDN Working Group\
    \ [IDN-WG] addressed the problem of handling\n   the encoding and decoding of\
    \ Unicode strings into and out of Domain\n   Name System (DNS) labels with the\
    \ goal that its solution would not\n   put the operational DNS at any risk.  Its\
    \ work resulted in one\n   primary protocol and three supporting ones, respectively:\n\
    \      1. Internationalizing Host Names in Applications [IDNA]\n      2. Preparation\
    \ of Internationalized Strings [STRINGPREP]\n      3. A Stringprep Profile for\
    \ Internationalized Domain Names\n         [NAMEPREP]\n      4. Punycode [PUNYCODE]\n\
    \   IDNA, which calls on the others, normalizes and transforms strings\n   that\
    \ are intended to be used as IDNs.  In combination, the four\n   provide the minimum\
    \ functions required for internationalization, such\n   as performing case mappings,\
    \ eliminating character differences that\n   would cause severe problems, and\
    \ specifying matching (equality).\n   They also convert between the resulting\
    \ Unicode code points and an\n   ASCII-based form that is more suitable for storing\
    \ in actual DNS\n   labels.  In this way, the IDNA transformations improve a user's\n\
    \   chances of getting to the correct IDN.\n   Addressing the issues around differing\
    \ character sets, a primary\n   consideration and administrative challenge involves\
    \ region-specific\n   definitions, interpretations, and the semantics of strings\
    \ to be used\n   in IDNs.  A Unicode string may have a specific meaning as a name,\n\
    \   word, or phrase in a particular language but that meaning could vary\n   depending\
    \ on the country, region, culture, or other context in which\n   the string is\
    \ used.  It might also have different interpretations in\n   different languages\
    \ that share some or all of the same characters.\n   Therefore, individual zones\
    \ and zone administrators may find it\n   necessary to impose restrictions and\
    \ procedures to reduce the\n   likelihood of confusion, and instabilities of reference,\
    \ within their\n   own environments.\n   Over the centuries, the evolution of\
    \ CJK characters, and the\n   differences in their use in different languages\
    \ and even in different\n   regions where the same language is spoken, has given\
    \ rise to the idea\n   of \"variants\", wherein one conceptual character can be\
    \ identified\n   with several different Code Points in character sets for computer\n\
    \   use.  This document provides a framework for handling such variants\n   while\
    \ minimizing the possibility of serious user confusion in the\n   obtaining or\
    \ using of domain names.  However, the concept of variants\n   is complex and\
    \ may require many different layers of solutions. This\n   guideline offers only\
    \ one of those solution components.  It is not\n   sufficient by itself to solve\
    \ the whole problem, even with zone-\n   specific tables as described below.\n\
    \   Additionally, because of local language or writing-system\n   differences,\
    \ it is impossible to create universally accepted\n   definitions for which potential\
    \ variants are the same and which are\n   not the same.  It is even more difficult\
    \ to define a technical\n   algorithm to generate variants that are linguistically\
    \ accurate.\n   That is, that the variant forms produced make as much sense in\
    \ the\n   language as the originally specified forms.  It is also possible that\n\
    \   variants generated may have no meaning in the associated language or\n   languages.\
    \  The intention is not to generate meaningful \"words\" but\n   to generate similar\
    \ variants to be reserved.  So even though the\n   method described in this document\
    \ may not always be linguistically\n   accurate, nor does it need to be, it increases\
    \ the chances of getting\n   the right variants while accepting the inherent limitations\
    \ of the\n   DNS and the complexities of human language.\n   This document outlines\
    \ a model for such conventions for zones in\n   which labels that contain CJK\
    \ characters are to be registered and a\n   system for implementing that model.\
    \  It provides a mechanism that\n   allows each zone to define its own local rules\
    \ for permitted\n   characters and sequences and the handling of IDNs and their\
    \ variants.\n   The document is an effort of the Joint Engineering Team (JET),\
    \ a\n   group composed of members of CNNIC, TWNIC, KRNIC, and JPNIC as well\n\
    \   as other individual experts.  It offers guidelines for zone\n   administrators,\
    \ including but not limited to registry operators and\n   registrars and information\
    \ for all domain names holders on the\n   administration of domain names that\
    \ contain characters drawn from\n   Chinese, Japanese, and Korean scripts.  Other\
    \ language groups are\n   encouraged to develop their own guidelines as needed,\
    \ based on these\n   guidelines if that is helpful.\n"
- title: 2.  Definitions, Context, and Notation
  contents:
  - '2.  Definitions, Context, and Notation

    '
- title: 2.1.  Definitions and Context
  contents:
  - "2.1.  Definitions and Context\n   This document uses a number of special terms.\
    \  In this section,\n   definitions and explanations are grouped topically.  Some\
    \ readers may\n   prefer to skip over this material, returning, perhaps via the\
    \ index\n   to terminology in section 7, when needed.\n"
- title: 2.1.1.  IDN
  contents:
  - "2.1.1.  IDN\n   IDN: The term \"IDN\" has a number of different uses: (a) as\
    \ an\n   abbreviation for \"Internationalized Domain Name\"; (b) as a fully\n\
    \   qualified domain name that contains at least one label that contains\n   characters\
    \ not appearing in ASCII, specifically not in the subset of\n   ASCII recommended\
    \ for domain names (the so-called \"hostname\" or \"LDH\"\n   subset, see RFC1035\
    \ [STD13]); (c) as a label of a domain name that\n   contains at least one character\
    \ beyond ASCII; (d) as a Unicode string\n   to be processed by Nameprep; (e) as\
    \ a string that is an output from\n   Nameprep; (f) as a string that is the result\
    \ of processing through\n   both Nameprep and conversion into Punycode; (g) as\
    \ the abbreviation\n   of an IDN (more properly, IDL) Package, in the terminology\
    \ of this\n   document; (h) as the abbreviation of the IETF IDN Working Group;\
    \ (g)\n   as the abbreviation of the ICANN IDN Committee; and (h) as standing\n\
    \   for other IDN activities in other companies/organizations.\n   Because of\
    \ the potential confusion, this document uses the term \"IDN\"\n   as an abbreviation\
    \ for Internationalized Domain Name and,\n   specifically, in the second sense\
    \ described in (b) above.  It uses\n   \"IDL,\" defined immediately below, to\
    \ refer to Internationalized\n   Domain Labels.\n"
- title: 2.1.2.  IDL
  contents:
  - "2.1.2.  IDL\n   IDL: This document provides a guideline to be applied on a per-zone\n\
    \   basis, one label at a time.  Therefore, the term \"Internationalized\n   Domain\
    \ Label\" or \"IDL\" will be used instead of the more general term\n   \"IDN\"\
    \ or its equivalents.  The processing specifications of this\n   document may\
    \ be applied, in some zones, to ASCII characters also, if\n   those characters\
    \ are specified as valid in a Language Variant Table\n   (see below).  Hence,\
    \ in some zones, an IDL may contain or consist\n   entirely of \"LDH\" characters.\n"
- title: 2.1.3.  FQDN
  contents:
  - "2.1.3.  FQDN\n   FQDN: A fully qualified domain name, one that explicitly contains\
    \ all\n   labels, including a Top-Level Domain (TLD) name.  In this context, a\n\
    \   TLD name is one whose label appears in a nameserver record in the\n   root\
    \ zone.  The term \"Domain Name Label\" refers to any label of a\n   FQDN.\n"
- title: 2.1.4.  Registrations
  contents:
  - "2.1.4.  Registrations\n   Registration: In this document, the term \"registration\"\
    \ refers to the\n   process by which a potential domain name holder requests that\
    \ a label\n   be placed in the DNS either as an individual name within a domain\
    \ or\n   as a subdomain delegation from another domain name holder.  In the\n\
    \   case of a successful registration, the label or delegation records\n   are\
    \ placed in the relevant zone file, or, more specifically, they are\n   \"activated\"\
    \ or made \"active\" and additional IDLs may be reserved as\n   part of an \"\
    IDL Package\" (see below).  The guidelines presented here\n   are recommended\
    \ for all zones, at any hierarchy level, in which CJK\n   characters are to appear\
    \ and not just domains at the first or second\n   level.\n"
- title: 2.1.5.  RFC3066
  contents:
  - "2.1.5.  RFC3066\n   RFC3066: A system, widely used in the Internet, for coding\
    \ and\n   representing names of languages [RFC3066].  It is based on an\n   International\
    \ Organization for Standardization (ISO) standard for\n   coding language names\
    \ [ISO639], but expands it to provide additional\n   precision.\n"
- title: 2.1.6.  ISO/IEC 10646
  contents:
  - "2.1.6.  ISO/IEC 10646\n   ISO/IEC 10646: The international standard universal\
    \ multiple-octet\n   coded character set (\"UCS\") [IS10646].  The Code Point\
    \ definitions of\n   this standard are identical to those of corresponding versions\
    \ of the\n   Unicode standard (see below).  Consequently, the characters and their\n\
    \   coding are often referred to as \"Unicode characters.\"\n"
- title: 2.1.7.  Unicode Character
  contents:
  - "2.1.7.  Unicode Character\n   Unicode Character: The term \"Unicode character\"\
    \ is used here in\n   reference to characters chosen from the Unicode Standard\
    \ Version 3.2\n   [UNICODE] (and hence from ISO/IEC 10646).  In this document,\
    \ the\n   characters are identified by their positions, or \"Code Points.\" The\n\
    \   notation U+12AB, for example, indicates the character at the position\n  \
    \ 12AB (hexadecimal) in the Unicode 3.2 table.  For characters in\n   positions\
    \ above FFFF, i.e., requiring more than sixteen bits to\n   represent, a five\
    \ to eight-character string is used, such as U+112AB\n   for the character in\
    \ position 12AB of plane 1.\n"
- title: 2.1.8.  Unicode String
  contents:
  - "2.1.8.  Unicode String\n   Unicode String: \"Unicode string\" refers to a string\
    \ of Unicode\n   characters.  The Unicode string is identified by the sequence\
    \ of the\n   Unicode characters regardless of the encoding scheme.\n"
- title: 2.1.9.  CJK Characters
  contents:
  - "2.1.9.  CJK Characters\n   CJK Characters: CJK characters are characters commonly\
    \ used in the\n   Chinese, Japanese, or Korean languages, including but not limited\
    \ to\n   those defined in the Unicode Standard as ASCII (U+0020 to U+007F),\n\
    \   Han ideographs (U+3400 to U+9FAF and U+20000 to U+2A6DF), Bopomofo\n   (U+3100\
    \ to U+312F and U+31A0 to U+31BF), Kana (U+3040 to U+30FF),\n   Jamo (U+1100 to\
    \ 11FF and U+3130 to U+318F), Hangul (U+AC00 to U+D7AF\n   and U+3130 to U+318F),\
    \ and the respective compatibility forms.  The\n   particular characters that\
    \ are permitted in a given zone are\n   specified in the Language Variant Table(s)\
    \ for that zone.\n"
- title: 2.1.10.  Label String
  contents:
  - "2.1.10.  Label String\n   Label String: A generic term referring to a string\
    \ of characters that\n   is a candidate for registration in the DNS or such a\
    \ string, once\n   registered.  A label string may or may not be valid according\
    \ to the\n   rules of this specification and may even be invalid for IDNA use.\n\
    \   The term \"label\", by itself, refers to a string that has been\n   validated\
    \ and may be formatted to appear in a DNS zone file.\n"
- title: 2.1.11.  Language Variant Table
  contents:
  - "2.1.11.  Language Variant Table\n   Language Variant Table: The key mechanisms\
    \ of this specification\n   utilize a three-column table, called a Language Variant\
    \ Table, for\n   each language permitted to be registered in the zone.  Those\
    \ columns\n   are known, respectively, as \"Valid Code Point\", \"Preferred Variant\"\
    ,\n   and \"Character Variant\", which are defined separately below.  The\n  \
    \ Language Variant Tables are critical to the success of the guideline\n   described\
    \ in this document.  However, the principles to be used to\n   generate the tables\
    \ are not within the scope of this document and\n   should be worked out by each\
    \ registry separately (perhaps by adopting\n   or adapting the work of some other\
    \ registry).  In this document,\n   \"Table\" and \"Variant Table\" are used as\
    \ short forms for Language\n   Variant Table.\n"
- title: 2.1.12.  Valid Code Point
  contents:
  - "2.1.12.  Valid Code Point\n   Valid Code Point: In a Language Variant Table,\
    \ the list of Code\n   Points that is permitted for that language.  Any other\
    \ Code Points,\n   or any string containing them, will be rejected by this\n \
    \  specification.  The Valid Code Point list appears as the first column\n   of\
    \ the Language Variant Table.\n"
- title: 2.1.13.  Preferred Variant
  contents:
  - "2.1.13.  Preferred Variant\n   Preferred Variant: In a Language Variant Table,\
    \ a list of Code Points\n   corresponding to each Valid Code Point and providing\
    \ possible\n   substitutions for it.  These substitutions are \"preferred\" in\
    \ the\n   sense that the variant labels generated using them are normally\n  \
    \ registered in the zone file, or \"activated.\"  The Preferred Code\n   Points\
    \ appear in column 2 of the Language Variant Table.  \"Preferred\n   Code Point\"\
    \ is used interchangeably with this term.\n"
- title: 2.1.14.  Character Variant
  contents:
  - "2.1.14.  Character Variant\n   Character Variant: In a Language Variant Table,\
    \ a second list of Code\n   Points corresponding to each Valid Code Point and\
    \ providing possible\n   substitutions for it.  Unlike the Preferred Variants,\
    \ substitutions\n   based on Character Variants are normally reserved but not\
    \ actually\n   registered (or \"activated\").  Character Variants appear in column\
    \ 3\n   of the Language Variant Table.  The term \"Code Point Variants\" is\n\
    \   used interchangeably with this term.\n"
- title: 2.1.15.  Preferred Variant Label
  contents:
  - "2.1.15.  Preferred Variant Label\n   Preferred Variant Label: A label generated\
    \ by use of Preferred\n   Variants (or Preferred Code Points).\n"
- title: 2.1.16.  Character Variant Label
  contents:
  - "2.1.16.  Character Variant Label\n   Character Variant Label: A label generated\
    \ by use of Character\n   Variants.\n"
- title: 2.1.17.  Zone Variant
  contents:
  - "2.1.17.  Zone Variant\n   Zone Variant: A Preferred or Character Variant Label\
    \ that is actually\n   to be entered (registered) into the DNS.  That is, into\
    \ the zone file\n   for the relevant zone.  Zone Variants are also referred to\
    \ as Zone\n   Variant Labels or Active (or Activated) Labels.\n"
- title: 2.1.18.  IDL Package
  contents:
  - "2.1.18.  IDL Package\n   IDL Package: A collection of IDLs as determined by these\
    \ Guidelines.\n   All labels in the package are \"reserved\", meaning they cannot\
    \ be\n   registered by anyone other than the holder of the Package.  These\n \
    \  reserved IDLs may be \"activated\", meaning they are actually entered\n   into\
    \ a zone file as a \"Zone Variant\".  The IDL Package also contains\n   identification\
    \ of the language(s) associated with the registration\n   process.  The IDL and\
    \ its variant labels form a single, atomic unit.\n"
- title: 2.2.  Notation for Ideographs and Other Non-ASCII CJK Characters.
  contents:
  - "2.2.  Notation for Ideographs and Other Non-ASCII CJK Characters.\n   For purposes\
    \ of clarity, particularly in regard to examples, Han\n   ideographs appear in\
    \ several places in this document.  However, they\n   do not appear in the ASCII\
    \ version of this document.  For the\n   convenience of readers of the ASCII version,\
    \ and some readers not\n   familiar with recognizing and distinguishing Chinese\
    \ characters, most\n   uses of these characters will be associated with both their\
    \ Unicode\n   Code Points and an \"asterisk tag\" with its corresponding Chinese\n\
    \   Romanization [ISO7098], with the tone mark represented by a number\n   from\
    \ 1 to 4.  Those tags have no meaning outside this document; they\n   are a quick\
    \ visual and reading reference to help facilitate the\n   combinations and transformations\
    \ of characters in the guideline and\n   table excerpts.\n"
- title: 3.  Scope of the Administrative Guidelines
  contents:
  - "3.  Scope of the Administrative Guidelines\n   Zone administrators are responsible\
    \ for the administration of the\n   domain name labels under their control.  A\
    \ zone administrator might\n   be responsible for a large zone, such as a top-level\
    \ domain (TLD),\n   whether generic or country code, or a smaller one, such as\
    \ a typical\n   second- or third-level domain.  A large zone is often more complex\n\
    \   than its smaller counterpart.  However, actual technical\n   administrative\
    \ tasks, such as addition, deletion, delegation, and\n   transfer of zones between\
    \ domain name holders, are similar for all\n   zones.\n   This document provides\
    \ guidelines for the ways CJK characters should\n   be handled within a zone,\
    \ for how language issues should be\n   considered and incorporated, and for how\
    \ Domain Name Labels\n   containing CJK characters should be administered (including\n\
    \   registration, deletion, and transfer of labels).\n   Other IDN policies, such\
    \ as the creation of new top-level domains\n   (TLDs), the cost structure for\
    \ registrations, and how the processes\n   described here get allocated between\
    \ registrar and registry if the\n   zone makes that distinction, also are outside\
    \ the scope of this\n   document.\n   Technical implementation issues are not\
    \ discussed here either.  For\n   example, deciding which guidelines should be\
    \ implemented as registry\n   actions and which should be registrar actions is\
    \ left to zone\n   administrators, with the possibility that it will differ from\
    \ zone to\n   zone.\n"
- title: 3.1.  Principles Underlying These Guidelines
  contents:
  - "3.1.  Principles Underlying These Guidelines\n   In many places, in the event\
    \ of a dispute over rights to a name (or,\n   more accurately, DNS label string),\
    \ this document assumes \"first-\n   come, first-served\" (FCFS) as a resolution\
    \ policy even though FCFS is\n   not listed below as one of the principles for\
    \ this document.  If\n   policies are already in place governing priorities and\
    \ \"rights\", one\n   can use the guidelines here by replacing uses of FCFS in\
    \ this\n   document with policies specific to the zone.  Some of the guidelines\n\
    \   here may not be applicable to other policies for determining rights\n   to\
    \ labels.  Still other alternatives, such as use of UDRP [UDRP] or\n   mutual\
    \ exclusion, might have little impact on other aspects of these\n   guidelines.\n\
    \   (a) Although some Unicode strings may be pure identifiers made up of\n   an\
    \ assortment of characters from many languages and scripts, IDLs are\n   likely\
    \ to be \"words\" or \"names\" or \"phrases\" that have specific\n   meaning in\
    \ a language.  While a zone administration might or might\n   not require \"meaning\"\
    \ as a registration criterion, meaning could\n   prove to be a useful tool for\
    \ avoiding user confusion.\n      Each IDL to be registered should be associated\
    \ administratively\n      with one or more languages.\n   Language associations\
    \ should either be predetermined by the zone\n   administrator and applied to\
    \ the entire zone or be chosen by the\n   registrants on a per-IDL basis.  The\
    \ latter may be necessary for some\n   zones, but it will make administration\
    \ more difficult and will\n   increase the likelihood of conflicts in variant\
    \ forms.\n   A given zone might have multiple languages associated with it or\
    \ it\n   may have no language specified at all.  Omitting specification of a\n\
    \   language may provide additional opportunities for user confusion and\n   is\
    \ therefore NOT recommended.\n   (b) Each language uses only a subset of Unicode\
    \ characters.\n   Therefore, if an IDL is associated with a language, it is not\n\
    \   permitted to contain any Unicode character that is not within the\n   valid\
    \ subset for that language.\n      Each IDL to be registered must be verified\
    \ against the valid\n      subset of Unicode for the language(s) associated with\
    \ the IDL.\n      That subset is specified by the list of characters appearing\
    \ in\n      the first column of the language and zone-specific tables as\n   \
    \   described later in this document.\n   If the IDL fails this test for any of\
    \ its associated languages, the\n   IDL is not valid for registration.\n   Note\
    \ that this verification is not necessarily linguistically\n   accurate, because\
    \ some languages have special rules.  For example,\n   some languages impose restrictions\
    \ on the order in which particular\n   combinations of characters may appear.\
    \  Characters that are valid for\n   the language, and hence permitted by this\
    \ specification, might still\n   not form valid words or even strings in the language.\n\
    \   (c) When an IDL is associated with a language, it may have Character\n   Variants\
    \ that depend on that language associated with it in addition\n   to any Preferred\
    \ Variants.  These variants are potential sources of\n   confusion with the Code\
    \ Points in the original label string.\n   Consequently, the labels generated\
    \ from them should be unavailable to\n   registrants of other names, words, or\
    \ phrases.\n      During registration, all labels generated from the Character\n\
    \      Variants for the associated language(s) of the IDL should be\n      reserved.\n\
    \   IDL reservations of the type described here normally do not appear in\n  \
    \ the distributed DNS zone file.  In other words, these reserved IDLs\n   may\
    \ not resolve.  Domain name holders could request that these\n   reserved IDLs\
    \ be placed in the zone file and made active and\n   resolvable.\n   Zones will\
    \ need to establish local policies about how they are to be\n   made active. \
    \ Specifically, many zones, especially at the top level,\n   have prohibited or\
    \ restricted the use of \"CNAME\"s DNS aliases,\n   especially CNAMEs that point\
    \ to nameserver delegation records (NS\n   records).  And long-term use of long-term\
    \ aliases for domain\n   hierarchies, rather than single names (\"DNAME records\"\
    ) are\n   considered problematic because of the recursion they can introduce\n\
    \   into DNS lookups.\n   (d) When an IDL is a \"name\", \"word\", or \"phrase\"\
    , it will have\n   Character Variants depending on the associated language.\n\
    \   Furthermore, one or more of those Character Variants will be used\n   more\
    \ often than others for linguistic, political, or other reasons.\n   These more\
    \ commonly used variants are distinguished from ordinary\n   Character Variants\
    \ and are known as Preferred Variant(s) for the\n   particular language.\n   \
    \   To increase the likelihood of correct and predictable resolution\n      of\
    \ the IDN by end users, all labels generated from the Preferred\n      Variants\
    \ for the associated language(s) should be resolvable.\n   In other words, the\
    \ Preferred Variant Labels should appear in the\n   distributed DNS zone file.\n\
    \   (e) IDLs associated with one or more languages may have a large\n   number\
    \ of Character Variant Labels or Preferred Variant Labels.  Some\n   of these\
    \ labels may include combinations of characters that are\n   meaningless or invalid\
    \ linguistically.  It may therefore be\n   appropriate for a zone to adopt procedures\
    \ that include only\n   linguistically acceptable labels in the IDL Package.\n\
    \      A zone administrator may impose additional rules and other\n      processing\
    \ activities to limit the number of Character Variant\n      Labels or Preferred\
    \ Variant Labels that are actually reserved or\n      registered.\n   These additional\
    \ rules and other processing activities are based on\n   policies and/or procedures\
    \ imposed on a per-zone basis and therefore\n   are not within the scope of this\
    \ document.  Such policies or\n   procedures might be used, for example, to restrict\
    \ the number of\n   Preferred Variant Labels actually reserved or to prevent certain\n\
    \   words from being registered at all.\n   (f) There are some Character Variant\
    \ Labels and Preferred Variant\n   Labels that are associated with each IDL. \
    \ These labels are\n   considered \"equivalent\" to each another.  To avoid confusion,\
    \ they\n   all should be assigned to a single domain name holder.\n      The IDL\
    \ and its variant labels should be grouped together into a\n      single atomic\
    \ unit, known in this document as an \"IDL Package\".\n   The IDL Package is created\
    \ upon registration and is atomic: Transfer\n   and deletion of an IDL is performed\
    \ on the IDL Package as a whole.\n   That is, an IDL within the IDL Package may\
    \ not be transferred or\n   deleted individually; any re-registration, transfers,\
    \ or other\n   actions that impact the IDL should also affect the other variants.\n\
    \   The name-conflict resolution policy associated with this zone could\n   result\
    \ in a conflict with the principle of IDL Package atomicity.  In\n   such a case,\
    \ the policy must be defined to make the precedence clear.\n"
- title: 3.2.  Registration of IDL
  contents:
  - "3.2.  Registration of IDL\n   To conform to the principles described in 3.1,\
    \ this document\n   introduces two concepts: the Language Variant Table and the\
    \ IDL\n   Package.  These are described in the next two subsections, followed\n\
    \   by a description of the algorithm that is used to interpret the table\n  \
    \ and generate variant labels.\n"
- title: 3.2.1.  Using the Language Variant Table
  contents:
  - "3.2.1.  Using the Language Variant Table\n   For each zone that uses a given\
    \ language, each language should have\n   its own Language Variant Table.  The\
    \ table consists of a header\n   section that identifies references and version\
    \ information, followed\n   by a section with one row for each Code Point that\
    \ is valid for the\n   language and three columns.\n      (1) The first column\
    \ contains the subset of Unicode characters\n          that is valid to be registered\
    \ (\"Valid Code Point\").  This is\n          used to verify the IDL to be registered\
    \ (see 3.1b).  As in the\n          registration procedure described later, this\
    \ column is used as\n          an index to examine characters that appear in a\
    \ proposed IDL\n          to be processed.  The collection of Valid Code Points\
    \ in the\n          table for a particular language can be thought of as defining\n\
    \          the script for that language, although the normal definition\n    \
    \      of a script would not include, for example, ASCII characters\n        \
    \  with CJK ones.\n      (2) The second column contains the Preferred Variant(s)\
    \ of the\n          corresponding Unicode character in column one (\"Valid Code\n\
    \          Point\").  These variant characters are used to generate the\n    \
    \      Preferred Variant Labels for the IDL.  Those labels should be\n       \
    \   resolvable (see 3.1d).  Under normal circumstances, all of\n          those\
    \ Preferred Variant Labels will be activated in the\n          relevant zone file\
    \ so that they will resolve when the DNS is\n          queried for them.\n   \
    \   (3) The third column contains the Character Variant(s) for the\n         \
    \ corresponding Valid Code Point.  These are used to generate\n          the Character\
    \ Variant Labels of the IDL, which are then to be\n          reserved (see 3.1c).\
    \  Registration, or activation, of labels\n          generated from Character\
    \ Variants will normally be a\n          registrant decision, subject to local\
    \ policy.\n   Each entry in a column consists of one or more Code Points, expressed\n\
    \   as a numeric character number in the Unicode table and optionally\n   followed\
    \ by a parenthetical reference.  The first column, or Valid\n   Code Point, may\
    \ have only one Code Point specified in a given row.\n   The other columns may\
    \ have more than one.\n   Any row may be terminated with an optional comment,\
    \ starting with\n   \"#\".\n   The formal syntax of the table and more-precise\
    \ definitions of some\n   of its organization appear in Section 5.\n   The Language\
    \ Variant Table should be provided by a relevant group,\n   organization, or body.\
    \  However, the question of who is relevant or\n   has the authority to create\
    \ this table and the rules that define it\n   is beyond the scope of this document.\n"
- title: 3.2.2.  IDL Package
  contents:
  - "3.2.2.  IDL Package\n   The IDL Package is created on successful registration\
    \ and consists\n   of:\n      (1) the IDL registered\n      (2) the language(s)\
    \ associated with the IDL\n      (3) the version of the associated character variant\
    \ table\n      (4) the reserved IDLs\n      (5) active IDLs, that is, \"Zone Variant\
    \ Labels\" that are to appear\n          in the DNS zone file\n"
- title: 3.2.3.  Procedure for Registering IDLs
  contents:
  - "3.2.3.  Procedure for Registering IDLs\n   An explanation follows each step.\n\
    \   Step 1.    IN <= IDL to be registered and\n              {L} <= Set of languages\
    \ associated with IN\n   Start the process with the label string (prospective\
    \ IDL) to be\n   registered and the associated language(s) as input.\n   Step\
    \ 2.    Generate the Nameprep-processed version of the IN,\n              applying\
    \ all mappings and canonicalization required by\n              IDNA.\n   The prospective\
    \ IDL is processed by using Nameprep to apply the\n   normalizations and exclusions\
    \ globally required to use IDNA.  If the\n   Nameprep processing fails, then the\
    \ IDL is invalid and the\n   registration process must stop.\n   Step 2.1.  NP(IN)\
    \ <= Nameprep processed IN\n   Step 2.2.  Check availability of NP(IN).  If not\
    \ available, route to\n              conflict policy.\n   The Nameprep-processed\
    \ IDL is then checked against the contents of\n   the zone file and previously\
    \ created IDL Packages.  If it is already\n   registered or reserved, then a conflict\
    \ exists that must be resolved\n   by applying whatever policy is applicable for\
    \ the zone.  For example,\n   if FCFS is used, the registration process terminates\
    \ unless the\n   conflict resolution policy provides another alternative.\n  \
    \ Step 3.    Process each language.\n              For each language (AL) in {L}\n\
    \   Step 3 goes through all languages associated with the proposed IDL\n   and\
    \ checks each character (after Nameprep has been applied) for\n   validity in\
    \ each of them.  It then applies the Preferred Variants\n   (column 2 values)\
    \ and the Character Variants (column 3 values) to\n   generate candidate labels.\n\
    \   Step 3.1.  Check validity of NP(IN) in AL.  If failed, stop\n            \
    \  processing.\n   In step 3.1, IDL validation is done by checking that every\
    \ Code Point\n   in the Nameprep-processed IDL is a Code Point allowed by the\
    \ \"Valid\n   Code Point\" column of the Character Variant Table for the language.\n\
    \   This is then repeated for any other languages (and hence, Language\n   Variant\
    \ Tables) specified in the registration.  If one or more Code\n   Points are not\
    \ valid, the registration process terminates.\n   Step 3.2.  PV(IN,AL) <= Set\
    \ of available Nameprep-processed Preferred\n                           Variants\
    \ of NP(IN) in AL\n   Step 3.2 generates the list of Preferred Variant Labels\
    \ of the IDL by\n   doing a combination (see Step 3.2A below) of all possible\
    \ variants\n   listed in the \"Preferred Variant(s)\" column for each Code Point\
    \ in\n   the Nameprep-processed IDL.  The generated Preferred Variant Labels\n\
    \   must be processed through Nameprep.  If the Nameprep processing fails\n  \
    \ for any Preferred Variant Label (this is unlikely to occur if the\n   Preferred\
    \ Variants are processed through Nameprep before being placed\n   in the table),\
    \ then that variant label will be removed from the list.\n   The remaining Preferred\
    \ Variant Labels in the list are then checked\n   to see whether they are already\
    \ registered or reserved.  If any are\n   registered or reserved, then the conflict\
    \ resolution policy will\n   apply.  In general, this will not prevent the originally\
    \ requested\n   IDL from being registered unless the policy prevents such\n  \
    \ registration.  For example, if FCFS is applied, then the conflicting\n   variants\
    \ will be removed from the list, but the originally requested\n   IDL and any\
    \ remaining variants will be registered (see steps 5 and 8\n   below).\n   Step\
    \ 3.2A Generating variant labels from Variant Code Points.\n   Steps 3.2 and 3.3\
    \ require that the Preferred Variants and Character\n   Variants be combined with\
    \ the original IDL to form sets of variant\n   labels.  Conceptually, one starts\
    \ with the original, Nameprep-\n   processed, IDL and examines each of its characters\
    \ in turn.  If a\n   character is encountered for which there is a corresponding\
    \ Preferred\n   Variant or Character Variant, a new variant label is produced\
    \ with\n   the Variant Code Point substituted for the original one.  If variant\n\
    \   labels already exist as the result of the processing of characters\n   that\
    \ appeared earlier in the original IDL, then the substitutions are\n   made in\
    \ them as well, resulting in additional generated variant\n   labels.  This operation\
    \ is repeated separately for the Preferred\n   Variants (in Step 3.2) and Character\
    \ Variants (in Step 3.3).  Of\n   course, equivalent results could be achieved\
    \ by processing the\n   original IDL's characters in order, building the Preferred\
    \ Variant\n   Label set and Character Variant Label set in parallel.\n   This\
    \ process will sometimes generate a very large number of labels.\n   For example,\
    \ if only two of the characters in the original IDL are\n   associated with Preferred\
    \ Variants and if the first of those\n   characters has three Preferred Variants\
    \ and the second has two, one\n   ends up with 12 variant labels to be placed\
    \ in the IDL Package and,\n   normally, in the zone file.  Repeating the process\
    \ for Character\n   Variants, if any exist, would further increase the number\
    \ of labels.\n   And if more than one language is specified for the original IDL,\
    \ then\n   repetition of the process for additional languages (see step 4,\n \
    \  below) might further increase the size of the set.\n   For illustrative purposes,\
    \ the \"combination\" process could be\n   achieved by a recursive function similar\
    \ to the following pseudocode:\n        Function Combination(Str)\n          F\
    \ <= first codepoint of Str\n          SStr <= Substring of Str, without the first\
    \ code point\n          NSC <= {}\n          If SStr is empty then\n         \
    \  for each V in (Variants of code point F)\n             NSC = NSC set-union\
    \ (the string with the code point V)\n           End of Loop\n          Else\n\
    \            SubCom = Combination(SStr)\n            For each V in (Variants of\
    \ code point F)\n              For each SC in SubCom\n                NSC = NSC\
    \ set-union (the string with the\n                    first code point V followed\
    \ by the string SC)\n              End of Loop\n            End of Loop\n    \
    \      Endif\n          Return NSC\n   Step 3.3.  CV(IN,AL) <= Set of available\
    \ Nameprep-processed Character\n                           Variants of NP(IN)\
    \ in AL\n   This step generates the list of Character Variant Labels by doing\
    \ a\n   combination (see Step 3.2A above) of all the possible variants listed\n\
    \   in the \"Character Variant(s)\" column for each Code Point in the\n   Nameprep-processed\
    \ original IDL.  As with the Preferred Variant\n   Labels, the generated Character\
    \ Variant Labels must be processed by,\n   and acceptable to, Nameprep.  If the\
    \ Nameprep processing fails for a\n   Character Variant Label, then that variant\
    \ label will be removed from\n   the list.  The remaining Character Variant Labels\
    \ are then checked to\n   be sure they are not registered or reserved.  If one\
    \ or more are,\n   then the conflict resolution policy is applied.  As with Preferred\n\
    \   Variant Labels, a conflict that is resolved in favor of the earlier\n   registrant\
    \ does not, in general, prevent the IDL from being\n   registered, nor the remaining\
    \ variants from being reserved in step 6\n   below.\n   Step 3.4.  End of Loop\n\
    \   Step 4.    Let PVall be the set-union of all PV(IN,AL)\n   Step 4 generates\
    \ the Preferred Variants Label for all languages.  In\n   this step, and again\
    \ in step 6 below, the zone administrator may\n   impose additional rules and\
    \ processing activities to restrict the\n   number of Preferred (tentatively to\
    \ be reserved and activated) and\n   Character (tentatively to be reserved) Label\
    \ Variants.  These\n   additional rules and processing activities are zone policy\
    \ specific\n   and therefore are not specified in this document.\n   Step 5. \
    \   {ZV} <= PVall set-union NP(IN)\n   Step 5 generates the initial Zone Variants.\
    \  The set includes all\n   Preferred Variants for all languages and the original\
    \ Nameprep-\n   processed IDL.  Unless excluded by further processing, these Zone\n\
    \   Variants will be activated.  That is, placed into the DNS zone.  Note\n  \
    \ that the \"set-union\" operation will eliminate any duplicates.\n   Step 6.\
    \    Let CVall be the set-union of all CV(IN,AL), set-minus\n              {ZV}\n\
    \   Step 6 generates the Reserved Label Variants (the Character Variant\n   Label\
    \ set).  These labels are normally reserved but not activated.\n   The set includes\
    \ all Character Variant Labels for all languages, but\n   not the Zone Variants\
    \ defined in the previous step.  The set-union\n   and set-minus operations eliminate\
    \ any duplicates.\n   Step 7.    Create IDL Package for IN using IN, {L}, {ZV}\
    \ and CVall\n   In Step 7, the \"IDL Package\" is created using the original IDL,\
    \ the\n   associated language(s), the Zone Variant Labels, and the Reserved\n\
    \   Variant Labels.  If zone-specific additional processing or filtering\n   is\
    \ to be applied to eliminate linguistically inappropriate or other\n   forms,\
    \ it should be applied before the IDL Package is actually\n   assembled.\n   Step\
    \ 8.    Put {ZV} into zone file\n   The activated IDLs are converted via ToASCII\
    \ with UseSTD13ASCIIRules\n   [IDNA] before being placed into the zone file. \
    \ This conversion\n   results in the IDLs being in the actual IDNA (\"Punycode\"\
    ) form used\n   in zone files, while the IDLs have been carried in Unicode form\
    \ up to\n   this point.  If ToASCII fails for any of the activated IDLs, that\
    \ IDL\n   must not be placed into the zone file.  If the IDL is a subdomain\n\
    \   name, it will be delegated.\n"
- title: 3.3.  Deletion and Transfer of IDL and IDL Package
  contents:
  - "3.3.  Deletion and Transfer of IDL and IDL Package\n   In traditional domain\
    \ administration, every Domain Name Label is\n   independent of all other Domain\
    \ Name Labels.  Registration, deletion,\n   and transfer of labels is done on\
    \ a per-label basis.  However, with\n   the guidelines discussed here, each IDL\
    \ is associated with specific\n   languages, with all label variants, both active\
    \ (zone) and reserved,\n   together in an IDL Package.  This quite deliberately\
    \ prohibits labels\n   that contain sufficient mixtures of characters from different\
    \ scripts\n   to make them impossible as words in any given language.  If a zone\n\
    \   chooses to not impose that restriction--that is, to permit labels to\n   be\
    \ constructed by picking characters from several different languages\n   and scripts--then\
    \ the guidelines described here would be\n   inappropriate.\n   As stated earlier,\
    \ the IDL package should be treated as a single\n   atomic unit and all variants\
    \ of the IDL should belong to a single\n   domain-name holder.  If the local policy\
    \ related to the handling of\n   disagreements requires a particular IDL to be\
    \ transferred and deleted\n   independently of the IDL Package, the conflict policy\
    \ would take\n   precedence.  In such an event, the conflict policy should include\
    \ a\n   transfer or delete procedure that takes the nature of IDL Packages\n \
    \  into consideration.\n   When an IDL Package is deleted, all of the Zone and\
    \ Reserved Label\n   Variants again become available.  The deletion of one IDL\
    \ Package\n   does not change any other IDL Packages.\n"
- title: 3.4.  Activation and Deactivation of IDL variants
  contents:
  - "3.4.  Activation and Deactivation of IDL variants\n   Because there are active\
    \ (registered) IDLs and inactive (reserved but\n   not registered) IDLs within\
    \ an IDL package, processes are required to\n   activate or deactivate IDL variants\
    \ within an IDL Package.\n"
- title: 3.4.1.  Activation Algorithm
  contents:
  - "3.4.1.  Activation Algorithm\n   Step 1.  IN <= IDL to be activated and PA <=\
    \ IDL Package\n   Start with the IDL to be activated and the IDL Package of which\
    \ it is\n   a member.\n   Step 2.  NP(IN) <= Nameprep processed IN\n   Process\
    \ the IDL through Nameprep.  This step should never cause a\n   problem, or even\
    \ a change, since all labels that become part of the\n   IDL Package are processed\
    \ through Nameprep in Step 3.2 or 3.3 of the\n   Registration procedure (section\
    \ 3.2.3).\n   Step 3.  If NP(IN) not in CVall then stop\n   Verify that the Nameprep-processed\
    \ version of the IDL appears as a\n   still-unactivated label in the IDL Package,\
    \ i.e., in the list of\n   Reserved Label Variants, CVall.  It might be a useful\
    \ \"sanity check\"\n   to also verify that it does not already appear in the zone\
    \ file.\n   Step 4. CVall <= CVall set-minus NP(IN) and {ZV} <= {ZV} set-union\n\
    \           NP(IN)\n   Within the IDL Package, remove the Nameprep-processed version\
    \ of the\n   IDL from the list of Reserved Label Variants and add it to the list\n\
    \   of active (zone) label variants.\n   Step 5.  Put {ZV} into the zone file\n\
    \   Actually register (activate) the Zone Variant Labels.\n"
- title: 3.4.2.  Deactivation Algorithm
  contents:
  - "3.4.2.  Deactivation Algorithm\n   Step 1.  IN <= IDL to be deactivated and PA\
    \ <= IDL Package\n   As with activation, start with the IDL to be deactivated\
    \ and the IDL\n   Package of which it is a member.\n   Step 2.  NP(IN) <= Nameprep\
    \ processed IN\n   Get the Nameprep-processed version of the name (see discussion\
    \ in the\n   previous section).\n   Step 3.  If NP(IN) not in {ZV} then stop\n\
    \   Verify that the Nameprep-processed version of the IDL appears as an\n   activated\
    \ (zone) label variant in the IDL Package.  It might be a\n   useful \"sanity\
    \ check\" at this point to also verify that it actually\n   appears in the zone\
    \ file.\n   Step 4. CVall <= CVall set-union NP(IN) and {ZV} <= {ZV} set-minus\n\
    \           NP(IN)\n   Within the IDL Package, remove the Nameprep-processed version\
    \ of the\n   IDL from the list of Active (Zone) Label Variants and add it to the\n\
    \   list of Reserved (but inactive) Label Variants.\n   Step 5.  Put {ZV} into\
    \ the zone file\n"
- title: 3.5.  Managing Changes in Language Associations
  contents:
  - "3.5.  Managing Changes in Language Associations\n   Since the IDL package is\
    \ an atomic unit and the associated list of\n   variants must not be changed after\
    \ creation, this document does not\n   include a mechanism for adding and deleting\
    \ language associations\n   within the IDL package.  Instead, it recommends deleting\
    \ the IDL\n   package entirely, followed by a registration with the new set of\n\
    \   languages.  Zone administrators may find it desirable to devise\n   procedures\
    \ that prevent other parties from capturing the labels in\n   the IDL Package\
    \ during these operations.\n"
- title: 3.6.  Managing Changes to the Language Variant Tables
  contents:
  - "3.6.  Managing Changes to the Language Variant Tables\n   Language Variant Tables\
    \ are subject to changes over time, and these\n   changes may or may not be backward\
    \ compatible.  It is possible that\n   updated Language Variant Tables may produce\
    \ a different set of\n   Preferred Variants and Reserved Variants.\n   In order\
    \ to preserve the atomicity of the IDL Package, when the\n   Language Variant\
    \ Table is changed, IDL Packages created using the\n   previous version of the\
    \ Language Variant Table must not be updated or\n   affected.\n"
- title: 4.  Examples of Guideline Use in Zones
  contents:
  - "4.  Examples of Guideline Use in Zones\n   To provide a meaningful example, some\
    \ Language Variant Tables must be\n   defined.  Assume, then, for the purpose\
    \ of giving examples, that the\n   following four Language Variant Tables are\
    \ defined:\n   Note: these tables are not a representation of the actual tables,\
    \ and\n   they do not contain sufficient entries to be used in any actual\n  \
    \ implementation.  IANA maintains a voluntary registry of actual tables\n   [IANA-LVTABLES]\
    \ which may be consulted for complete examples.\n   a) Language Variant Table\
    \ for zh-cn and zh-sg\n"
- title: Reference 1 CP936 (commonly known as GBK)
  contents:
  - 'Reference 1 CP936 (commonly known as GBK)

    '
- title: Reference 2 zVariant, zTradVariant, zSimpVariant in Unihan.txt [UNIHAN]
  contents:
  - 'Reference 2 zVariant, zTradVariant, zSimpVariant in Unihan.txt [UNIHAN]

    '
- title: Reference 3 List of Simplified character Table (Simplified column)
  contents:
  - 'Reference 3 List of Simplified character Table (Simplified column)

    '
- title: Reference 4 zSimpVariant in Unihan.txt [UNIHAN]
  contents:
  - 'Reference 4 zSimpVariant in Unihan.txt [UNIHAN]

    '
- title: Reference 5 variant that exists in GB2312, common simplified hanzi
  contents:
  - "Reference 5 variant that exists in GB2312, common simplified hanzi\n   Version\
    \ 1 20020701 # July 2002\n   56E2(1);56E2(5);5718(2)           # sphere, ball,\
    \ circle; mass, lump\n   5718(1);56E2(4);56E2(2),56E3(2)   # sphere, ball, circle;\
    \ mass, lump\n   60F3(1);60F3(5);                  # think, speculate, plan, consider\n\
    \   654E(1);6559(5);6559(2)           # teach\n   6559(1);6559(5);654E(2)    \
    \       # teach, class\n   6DF8(1);6E05(5);6E05(2)           # clear\n   6E05(1);6E05(5);6DF8(2)\
    \           # clear, pure, clean; peaceful\n   771E(1);771F(5);771F(2)       \
    \    # real, actual, true, genuine\n   771F(1);771F(5);771E(2)           # real,\
    \ actual, true, genuine\n   8054(1);8054(3);806F(2)           # connect, join;\
    \ associate, ally\n   806F(1);8054(3);8054(2),8068(2)   # connect, join; associate,\
    \ ally\n   96C6(1);96C6(5);                  # assemble, collect together\n  \
    \ b) Language Variant Table for zh-tw\n   Reference 1 CP950 (commonly known as\
    \ BIG5)\n   Reference 2 zVariant, zTradVariant, zSimpVariant in Unihan.txt\n \
    \  Reference 3 List of Simplified Character Table (Traditional column)\n   Reference\
    \ 4 zTradVariant in Unihan.txt\n   Version 1 20020701 # July 2002\n   5718(1);5718(4);56E2(2),56E3(2)\
    \   # sphere, ball, circle; mass, lump\n   60F3(1);60F3(1);                  #\
    \ think, speculate, plan, consider\n   6559(1);6559(1);654E(2)           # teach,\
    \ class\n   6E05(1);6E05(1);6DF8(2)           # clear, pure, clean; peaceful\n\
    \   771F(1);771F(1);771E(2)           # real, actual, true, genuine\n   806F(1);806F(3);8054(2),8068(2)\
    \   # connect, join; associate, ally\n   96C6(1);96C6(1);                  # assemble,\
    \ collect together\n   c) Language Variant Table for ja\n   Reference 1 CP932\
    \ (commonly known as Shift-JIS)\n   Reference 2 zVariant in Unihan.txt\n   Reference\
    \ 3 variant that exists in JIS X0208, commonly used Kanji\n   Version 1 20020701\
    \ # July 2002\n   5718(1);5718(3);56E3(2)           # sphere, ball, circle; mass,\
    \ lump\n   60F3(1);60F3(3);                  # think, speculate, plan, consider\n\
    \   654E(1);6559(3);6559(2)           # teach\n   6559(1);6559(3);654E(2)    \
    \       # teach, class\n   6DF8(1);6E05(3);6E05(2)           # clear\n   6E05(1);6E05(3);6DF8(2)\
    \           # clear, pure, clean; peaceful\n   771E(1);771E(1);771F(2)       \
    \    # real, actual, true, genuine\n   771F(1);771F(1);771E(2)           # real,\
    \ actual, true, genuine\n   806F(1);806F(1);8068(2)           # connect, join;\
    \ associate, ally\n   96C6(1);96C6(3);                  # assemble, collect together\n\
    \   d) Language Variant Table for ko\n   Reference 1 CP949 (commonly known as\
    \ EUC-KR)\n   Reference 2 zVariant and K-source in Unihan.txt\n   Version 1 20020701\
    \ # July 2002\n   5718(1);5718(1);56E3(2)           # sphere, ball, circle; mass,\
    \ lump\n   60F3(1);60F3(1);                  # think, speculate, plan, consider\n\
    \   654E(1);654E(1);6559(2)           # teach\n   6DF8(1);6DF8(1);6E05(2)    \
    \       # clear\n   771E(1);771E(1);771F(2)           # real, actual, true, genuine\n\
    \   806F(1);806F(1);8068(2)           # connect, join; associate, ally\n   96C6(1);96C6(1);\
    \                  # assemble, collect together\n   Example 1: IDL = (U+6E05 U+771F\
    \ U+6559) *qing2 zhen1 jiao4*\n              {L} = {zh-cn, zh-sg, zh-tw}\n   NP(IN)\
    \ = (U+6E05 U+771F U+6559)\n   PV(IN,zh-cn) = (U+6E05 U+771F U+6559)\n   PV(IN,zh-sg)\
    \ = (U+6E05 U+771F U+6559)\n   PV(IN,zh-tw) = (U+6E05 U+771F U+6559)\n   {ZV}\
    \ = {(U+6E05 U+771F U+6559)}\n   CVall = {(U+6E05 U+771E U+6559),\n          \
    \ (U+6E05 U+771E U+654E),\n           (U+6E05 U+771F U+654E),\n           (U+6DF8\
    \ U+771E U+6559),\n           (U+6DF8 U+771E U+654E),\n           (U+6DF8 U+771F\
    \ U+6559),\n           (U+6DF8 U+771F U+654E)}\n   Example 2: IDL = (U+6E05 U+771F\
    \ U+6559) *qing2 zhen1 jiao4*\n              {L} = {ja}\n   NP(IN) = (U+6E05 U+771F\
    \ U+6559)\n   PV(IN,ja) = (U+6E05 U+771F U+6559)\n   {ZV} = {(U+6E05 U+771F U+6559)}\n\
    \   CVall = {(U+6E05 U+771E U+6559),\n           (U+6E05 U+771E U+654E),\n   \
    \        (U+6E05 U+771F U+654E),\n           (U+6DF8 U+771E U+6559),\n       \
    \    (U+6DF8 U+771E U+654E),\n           (U+6DF8 U+771F U+6559),\n           (U+6DF8\
    \ U+771F U+654E)}\n   Example 3: IDL = (U+6E05 U+771F U+6559) *qing2 zhen1 jiao4*\n\
    \              {L} = {zh-cn, zh-sg, zh-tw, ja, ko}\n   NP(IN) = (U+6E05 U+771F\
    \ U+6559) *qing2 zhen1 jiao4*\n   Invalid registration because U+6E05 is invalid\
    \ in L = ko\n   Example 4: IDL = (U+806F U+60F3 U+96C6 U+5718)\n             \
    \       *lian2 xiang3 ji2 tuan2*\n             {L} = {zh-cn, zh-sg, zh-tw}\n \
    \  NP(IN) = (U+806F U+60F3 U+96C6 U+5718)\n   PV(IN,zh-cn) = (U+8054 U+60F3 U+96C6\
    \ U+56E2)\n   PV(IN,zh-sg) = (U+8054 U+60F3 U+96C6 U+56E2)\n   PV(IN,zh-tw) =\
    \ (U+806F U+60F3 U+96C6 U+5718)\n   {ZV} = {(U+8054 U+60F3 U+96C6 U+56E2),\n \
    \         (U+806F U+60F3 U+96C6 U+5718)}\n   CVall = {(U+8054 U+60F3 U+96C6 U+56E3),\n\
    \           (U+8054 U+60F3 U+96C6 U+5718),\n           (U+806F U+60F3 U+96C6 U+56E2),\n\
    \           (U+806f U+60F3 U+96C6 U+56E3),\n           (U+8068 U+60F3 U+96C6 U+56E2),\n\
    \           (U+8068 U+60F3 U+96C6 U+56E3),\n           (U+8068 U+60F3 U+96C6 U+5718)\n\
    \   Example 5: IDL = (U+8054 U+60F3 U+96C6 U+56E2)\n                  *lian2 xiang3\
    \ ji2 tuan2*\n             {L} = {zh-cn, zh-sg}\n   NP(IN) = (U+8054 U+60F3 U+96C6\
    \ U+56E2)\n   PV(IN,zh-cn) = (U+8054 U+60F3 U+96C6 U+56E2)\n   PV(IN,zh-sg) =\
    \ (U+8054 U+60F3 U+96C6 U+56E2)\n   {ZV} = {(U+8054 U+60F3 U+96C6 U+56E2)}\n \
    \  CVall = {(U+8054 U+60F3 U+96C6 U+56E3),\n           (U+8054 U+60F3 U+96C6 U+5718),\n\
    \           (U+806F U+60F3 U+96C6 U+56E2),\n           (U+806f U+60F3 U+96C6 U+56E3),\n\
    \           (U+806F U+60F3 U+96C6 U+5718),\n           (U+8068 U+60F3 U+96C6 U+56E2),\n\
    \           (U+8068 U+60F3 U+96C6 U+56E3),\n           (U+8068 U+60F3 U+96C6 U+5718)}\n\
    \   Example 6: IDL = (U+8054 U+60F3 U+96C6 U+56E2)\n                  *lian2 xiang3\
    \ ji2 tuan2*\n              {L} = {zh-cn, zh-sg, zh-tw}\n   NP(IN) = (U+8054 U+60F3\
    \ U+96C6 U+56E2)\n   Invalid registration because U+8054 is invalid in L = zh-tw\n\
    \   Example 7: IDL = (U+806F U+60F3 U+96C6 U+5718)\n                  *lian2 xiang3\
    \ ji2 tuan2*\n              {L} = {ja,ko}\n   NP(IN) = (U+806F U+60F3 U+96C6 U+5718)\n\
    \   PV(IN,ja) = (U+806F U+60F3 U+96C6 U+5718)\n   PV(IN,ko) = (U+806F U+60F3 U+96C6\
    \ U+5718)\n   {ZV} = {(U+806F U+60F3 U+96C6 U+5718)}\n   CVall = {(U+806F U+60F3\
    \ U+96C6 U+56E3),\n           (U+8068 U+60F3 U+96C6 U+5718),\n           (U+8068\
    \ U+60F3 U+96C6 U+56E3)}\n"
- title: 5.  Syntax Description for the Language Variant Table
  contents:
  - "5.  Syntax Description for the Language Variant Table\n   The formal syntax for\
    \ the Language Variant Table is as follows, using\n   the IETF \"ABNF\" metalanguage\
    \ [ABNF].  Some comments on this syntax\n   appear immediately after it.\n"
- title: 5.1.  ABNF Syntax
  contents:
  - '5.1.  ABNF Syntax

    '
- title: LanguageVariantTable = 1*ReferenceLine VersionLine 1*EntryLine
  contents:
  - 'LanguageVariantTable = 1*ReferenceLine VersionLine 1*EntryLine

    '
- title: ReferenceLine = "Reference" SP RefNo SP RefDesciption [ Comment ] CRLF
  contents:
  - 'ReferenceLine = "Reference" SP RefNo SP RefDesciption [ Comment ] CRLF

    '
- title: RefNo = 1*DIGIT
  contents:
  - 'RefNo = 1*DIGIT

    '
- title: RefDesciption = *[VCHAR]
  contents:
  - 'RefDesciption = *[VCHAR]

    '
- title: VersionLine = "Version" SP VersionNo SP VersionDate [ Comment ] CRLF
  contents:
  - 'VersionLine = "Version" SP VersionNo SP VersionDate [ Comment ] CRLF

    '
- title: VersionNo = 1*DIGIT
  contents:
  - 'VersionNo = 1*DIGIT

    '
- title: VersionDate = YYYYMMDD
  contents:
  - 'VersionDate = YYYYMMDD

    '
- title: EntryLine = VariantEntry/Comment CRLF
  contents:
  - 'EntryLine = VariantEntry/Comment CRLF

    '
- title: VariantEntry = ValidCodePoint  ";"
  contents:
  - "VariantEntry = ValidCodePoint  \";\"\n               PreferredVariant \";\" CharacterVariant\
    \ [ Comment ]\n"
- title: ValidCodePoint = CodePoint
  contents:
  - 'ValidCodePoint = CodePoint

    '
- title: RefList = RefNo  0*( "," RefNo )
  contents:
  - 'RefList = RefNo  0*( "," RefNo )

    '
- title: PreferredVariant = CodePointSet 0*( "," CodePointSet )
  contents:
  - 'PreferredVariant = CodePointSet 0*( "," CodePointSet )

    '
- title: CharacterVariant = CodePointSet 0*( "," CodePointSet )
  contents:
  - 'CharacterVariant = CodePointSet 0*( "," CodePointSet )

    '
- title: CodePointSet = CodePoint 0*( SP CodePoint )
  contents:
  - 'CodePointSet = CodePoint 0*( SP CodePoint )

    '
- title: CodePoint = 4*8DIGIT  [ "(" Reflist ")" ]
  contents:
  - 'CodePoint = 4*8DIGIT  [ "(" Reflist ")" ]

    '
- title: Comment = "#" *VCHAR
  contents:
  - "Comment = \"#\" *VCHAR\n   YYYYMMDD is an integer, in alphabetic form, representing\
    \ a date,\n   where YYYY is the 4-digit year, MM is the 2-digit month, and DD\
    \ is\n   the 2-digit day.\n"
- title: 5.2.  Comments and Explanation of Syntax
  contents:
  - "5.2.  Comments and Explanation of Syntax\n   Any lines starting with, or portions\
    \ of lines after, the hash\n   symbol(\"#\") are treated as comments.  Comments\
    \ have no significance\n   in the processing of the tables; nor are there any\
    \ syntax\n   requirements between the hash symbol and the end of the line.  Blank\n\
    \   lines in the tables are ignored completely.\n   Every language should have\
    \ its own Language Variant Table provided by\n   a relevant group, organization,\
    \ or other body.  That table will\n   normally be based on some established standard\
    \ or standards.  The\n   group that defines a Language Variant Table should document\n\
    \   references to the appropriate standards at the beginning of the\n   table,\
    \ tagged with the word \"Reference\" followed by an integer (the\n   reference\
    \ number) followed by the description of the reference.  For\n   example:\n  \
    \ Reference 1 CP936 (commonly known as GBK)\n   Reference 2 zVariant, zTradVariant,\
    \ zSimpVariant in Unihan.txt\n   Reference 3 List of Simplified Character Table\
    \ (Simplified column)\n   Reference 4 zSimpVariant in Unihan.txt\n   Reference\
    \ 5 Variant that exists in GB2312, common simplified Hanzi\n   Each Language Variant\
    \ Table must have a version number and its\n   release date.  This is tagged with\
    \ the word \"Version\" followed by an\n   integer then followed by the date in\
    \ the format YYYYMMDD, where YYYY\n   is the 4-digit year, MM is the 2-digit month,\
    \ and DD is the 2-digit\n   day of the publication date of the table.\n   Version\
    \ 1 20020701     # July 2002 Version 1\n   The table has three columns, separated\
    \ by semicolons: \"Valid Code\n   Point\"; \"Preferred Variant(s)\"; and \"Character\
    \ Variant(s)\".\n   The \"Valid Code Point\" is the subset of Unicode characters\
    \ that are\n   valid to be registered.\n   There can be more than one Preferred\
    \ Variant; hence there could be\n   multiple entries in the \"Preferred Variant(s)\"\
    \ column.  If the\n   \"Preferred Variant(s)\" column is empty, then there is\
    \ no\n   corresponding Preferred Variant; in other words, the Preferred\n   Variant\
    \ is null, there is no corresponding preferred variant\n   codepoint, and no processing\
    \ to add labels for preferred variants\n   occurs.\"  Unless local policy dictates\
    \ otherwise, the procedures\n   above will result in only those labels that reflect\
    \ the valid code\n   point being activated (registered) into the zone file.\n\
    \   The \"Character Variant(s)\" column contains all Character Variants of\n \
    \  the Code Point.  Since the Code Point is always a variant of itself,\n   to\
    \ avoid redundancy, the Code Point is assumed to be part of the\n   \"Character\
    \ Variant(s)\" and need not be repeated in the \"Character\n   Variant(s)\" column.\n\
    \   If the variant in the \"Preferred Variant(s)\" or the \"Character\n   Variant(s)\"\
    \ column is composed of a sequence of Code Points, then\n   sequence of Code Points\
    \ is listed separated by a space.\n   If there are multiple variants in the \"\
    Preferred Variant(s)\" or the\n   \"Character Variant(s)\" column, then each variant\
    \ is separated by a\n   comma.\n   Any Code Point listed in the \"Preferred Variant(s)\"\
    \ column must be\n   allowed by the rules for the relevant language to be registered.\n\
    \   However, this is not a requirement for the entries in the \"Character\n  \
    \ Variant(s)\" column; it is possible that some of those entries may not\n   be\
    \ allowed to be registered.\n   Every Code Point in the table should have a corresponding\
    \ reference\n   number (associated with the references) specified to justify the\n\
    \   entry.  The reference number is placed in parentheses after the Code\n   Point.\
    \  If there is more than one reference, then the numbers are\n   placed within\
    \ a single set of parentheses and separated by commas.\n"
- title: 6.  Security Considerations
  contents:
  - "6.  Security Considerations\n   As discussed in the Introduction, substantially-unrestricted\
    \ use of\n   international (non-ASCII) characters in domain name labels may cause\n\
    \   user confusion and invite various types of attacks.  In particular,\n   in\
    \ the case of CJK languages, an attacker has an opportunity to\n   divert or confuse\
    \ users as a result of different characters (or, more\n   specifically, assigned\
    \ code points) with identical or similar\n   semantics.  These Guidelines provide\
    \ a partial remedy for those risks\n   by supplying a framework for prohibiting\
    \ inappropriate characters\n   from being registered at all and for permitting\
    \ \"variant\" characters\n   to be grouped together and reserved, so that they\
    \ can only be\n   registered in the DNS by the same owner.  However, the system\
    \ it\n   suggests is no better or worse than the per-zone and per-language\n \
    \  tables whose format and use this document specifies.  Specific\n   tables,\
    \ and any additional local processing, will reflect per-zone\n   decisions about\
    \ the balance between risk and flexibility of\n   registrations.   And, of course,\
    \ errors in construction of those\n   tables may significantly reduce the quality\
    \ of protection provided.\n"
- title: 7.  Index to Terminology
  contents:
  - "7.  Index to Terminology\n   As a convenience to the reader, this section lists\
    \ all of the special\n   terminology used in this document, with a pointer to\
    \ the section in\n   which it is defined.\n        Activated Label           \
    \      2.1.17\n        Activation                      2.1.4\n        Active Label\
    \                    2.1.17\n        Character Variant               2.1.14\n\
    \        Character Variant Label         2.1.16\n        CJK Characters      \
    \            2.1.9\n        Code point                      2.1.7\n        Code\
    \ Point Variant              2.1.14\n        FQDN                            2.1.3\n\
    \        Hostname                        2.1.1\n        IDL                  \
    \           2.1.2\n        IDL Package                     2.1.18\n        IDN\
    \                             2.1.1\n        Internationalized Domain Label  2.1.2\n\
    \        ISO/IEC 10646                   2.1.6\n        Label String         \
    \           2.1.10\n        Language name codes             2.1.5\n        Language\
    \ Variant Table          2.1.11\n        LDH Subset                      2.1.1\n\
    \        Preferred Code Point            2.1.13\n        Preferred Variant   \
    \            2.1.13\n        Preferred Variant Label         2.1.15\n        Registration\
    \                    2.1.4\n        Reserved                        2.1.18\n \
    \       RFC3066                         2.1.5\n        Table                 \
    \          2.1.11\n        UCS                             2.1.6\n        Unicode\
    \ Character               2.1.7\n        Unicode String                  2.1.8\n\
    \        Valid Code Point                2.1.12\n        Variant Table       \
    \            2.1.11\n        Zone Variant                    2.1.17\n"
- title: 8. Acknowledgments
  contents:
  - "8. Acknowledgments\n   The authors gratefully acknowledge the contributions of:\n\
    \   -  V. CHEN, N. HSU, H. HOTTA, S. TASHIRO, Y. YONEYA, and other Joint\n   \
    \   Engineering Team members at the JET meeting in Bangkok, Thailand.\n   -  Yves\
    \ Arrouye, an observer at the JET meeting in Bangkok, for his\n      contribution\
    \ on the IDL Package.\n   -  Those who commented on, and made suggestions about,\
    \ earlier\n      versions, including Harald ALVESTRAND, Erin CHEN, Patrik\n  \
    \    FALTSTROM, Paul HOFFMAN, Soobok LEE, LEE Xiaodong, MAO Wei, Erik\n      NORDMARK,\
    \ and L.M. TSENG.\n"
- title: 9.  References
  contents:
  - '9.  References

    '
- title: 9.1.  Normative References
  contents:
  - "9.1.  Normative References\n   [ABNF]          Crocker, D. and P. Overell, Eds.,\
    \ \"Augmented BNF for\n                   Syntax Specifications: ABNF\", RFC 2234,\
    \ November\n                   1997.\n   [STD13]         Mockapetris, P., \"Domain\
    \ names concepts and\n                   facilities\" STD 13, RFC 1034, November\
    \ 1987.\n                   Mockapetris, P.,  \"Domain names implementation and\n\
    \                   specification\", STD 13, RFC 1035, November 1987.\n   [RFC3066]\
    \       Alvestrand, H., \"Tags for the Identification of\n                   Languages,\"\
    \ BCP 47, RFC 3066, January 2001.\n   [IDNA]          Faltstrom, P., Hoffman,\
    \ P. and A. M. Costello,\n                   \"Internationalizing Domain Names\
    \ in Applications\n                   (IDNA)\", RFC 3490, March 2003.\n   [PUNYCODE]\
    \      Costello, A.M., \"Punycode: A Bootstring encoding of\n                \
    \   Unicode for Internationalized Domain Names in\n                   Applications\
    \ (IDNA)\", RFC 3492, March 2003.\n   [STRINGPREP]    Hoffman, P. and M. Blanchet,\
    \ \"Preparation of\n                   Internationalized Strings (\"stringprep\"\
    )\", RFC 3454,\n                   December 2002.\n   [NAMEPREP]      Hoffman,\
    \ P. and M. Blanchet, \"Nameprep: A Stringprep\n                   Profile for\
    \ Internationalized Domain Names (IDN)\",\n                   RFC 3491, March\
    \ 2003.\n   [IS10646]       A product of ISO/IEC JTC1/SC2/WG2, Work Item\n   \
    \                JTC1.02.18 (ISO/IEC 10646).  It is a multipart\n            \
    \       standard: Part 1, published as ISO/IEC 10646-\n                   1:2000(E),\
    \ covers the Architecture and Basic\n                   Multilingual Plane, and\
    \ Part 2, published as ISO/IEC\n                   10646-2:2001(E), covers the\
    \ supplementary\n                   (additional) planes.\n   [UNIHAN]        Unicode\
    \ Han Database, Unicode Consortium\n                   ftp://ftp.unicode.org/Public/UNIDATA/Unihan.txt.\n\
    \   [UNICODE]       The Unicode Consortium, \"The Unicode Standard Version\n \
    \                  3.0,\" ISBN 0-201-61633-5.  Unicode Standard Annex #28\n  \
    \                 (http://www.unicode.org/unicode/reports/tr28/)\n           \
    \        defines Version 3.2 of the Unicode Standard, which is\n             \
    \      definitive for IDNA and this document.\n   [ISO7098]       ISO 7098;1991\
    \ Information and documentation\n                   Romanization of Chinese, ISO/TC46/SC2.\n"
- title: 9.2.  Informative References
  contents:
  - "9.2.  Informative References\n   [IANA-LVTABLES] Internet Assigned Numbers Authority\
    \ (IANA), IDN\n                   Character Registry.\n                   http://www.iana.org/assignments/idn/\n\
    \   [IDN-WG]        IETF Internationalized Domain Names Working Group,\n     \
    \              now concluded,idn@ops.ietf.org, James Seng, Marc\n            \
    \       Blanchet, co-chairs, http://www.i-d-n.net/.\n   [UDRP]          ICANN,\
    \ \"Uniform Domain Name Dispute Resolution\n                   Policy\", October\
    \ 1999,\n                   http://www.icann.org/udrp/udrp-policy-24oct99.htm\n\
    \   [ISO639]     \"ISO 639:1988 (E/F) Code for the representation of names\n \
    \                  of languages\", International Organization for\n          \
    \         Standardization, 1st edition, 1988-04-01.\n"
- title: 10.  Contributors
  contents:
  - "10.  Contributors\n   The formal responsibility for this document and the ideas\
    \ it contains\n   lie with K. Koniski, K. Huang, H. Qian, and Y. Ko.  These authors\
    \ are\n   listed on the first page as authors of record, and they are the\n  \
    \ appropriate the long-term contacts for questions and comments on this\n   RFC.\
    \  On the other hand, J. Seng, J. Klensin, and W. Rickard served\n   as editors\
    \ of the document, transcribing and translating the ideas of\n   the four authors\
    \ and the teams they represented into the current\n   written form.  They were\
    \ the primary contacts during the editing\n   process, but not in the long term.\n"
- title: 10.1.  Authors' Addresses
  contents:
  - "10.1.  Authors' Addresses\n   Kazunori KONISHI\n   JPNIC\n   Kokusai-Kougyou-Kanda\
    \ Bldg 6F\n   2-3-4 Uchi-Kanda, Chiyoda-ku\n   Tokyo 101-0047\n   Japan\n   Phone:\
    \ +81 49-278-7313\n   EMail: konishi@jp.apan.net\n   Kenny HUANG\n   TWNIC\n \
    \  3F, 16, Kang Hwa Street, Taipei\n   Taiwan\n   Phone: 886-2-2658-6510\n   EMail:\
    \ huangk@alum.sinica.edu\n   QIAN Hualin\n   CNNIC\n   No.6 Branch-box of No.349\
    \ Mailbox, Beijing 100080\n   Peoples Republic of China\n   EMail: Hlqian@cnnic.net.cn\n\
    \   KO YangWoo\n   PeaceNet\n   Yangchun P.O. Box 81 Seoul 158-600\n   Korea\n\
    \   EMail: yw@mrko.pe.kr\n"
- title: 10.2.  Editors' Addresses
  contents:
  - "10.2.  Editors' Addresses\n   James SENG\n   180 Lompang Road\n   #22-07 Singapore\
    \ 670180\n   Phone: +65 9638-7085\n   EMail: jseng@pobox.org.sg\n   John C KLENSIN\n\
    \   1770 Massachusetts Avenue, No. 322\n   Cambridge, MA 02140\n   U.S.A.\n  \
    \ EMail: Klensin+ietf@jck.com\n   Wendy RICKARD\n   The Rickard Group\n   16 Seminary\
    \ Ave\n   Hopewell, NJ  08525\n   USA\n   EMail: rickard@rickardgroup.com\n"
- title: 11.  Full Copyright Statement
  contents:
  - "11.  Full Copyright Statement\n   Copyright (C) The Internet Society (2004).\
    \  This document is subject\n   to the rights, licenses and restrictions contained\
    \ in BCP 78 and\n   except as set forth therein, the authors retain all their\
    \ rights.\n   This document and the information contained herein are provided\
    \ on an\n   \"AS IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n\
    \   OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY AND THE INTERNET\n   ENGINEERING\
    \ TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS OR IMPLIED,\n   INCLUDING BUT NOT\
    \ LIMITED TO ANY WARRANTY THAT THE USE OF THE\n   INFORMATION HEREIN WILL NOT\
    \ INFRINGE ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY OR FITNESS\
    \ FOR A PARTICULAR PURPOSE.\n"
- title: Intellectual Property
  contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or\
    \ scope of any\n   Intellectual Property Rights or other rights that might be\
    \ claimed to\n   pertain to the implementation or use of the technology described\
    \ in\n   this document or the extent to which any license under such rights\n\
    \   might or might not be available; nor does it represent that it has\n   made\
    \ any independent effort to identify any such rights.  Information\n   on the\
    \ procedures with respect to rights in RFC documents can be\n   found in BCP 78\
    \ and BCP 79.\n   Copies of IPR disclosures made to the IETF Secretariat and any\n\
    \   assurances of licenses to be made available, or the result of an\n   attempt\
    \ made to obtain a general license or permission for the use of\n   such proprietary\
    \ rights by implementers or users of this\n   specification can be obtained from\
    \ the IETF on-line IPR repository at\n   http://www.ietf.org/ipr.\n   The IETF\
    \ invites any interested party to bring to its attention any\n   copyrights, patents\
    \ or patent applications, or other proprietary\n   rights that may cover technology\
    \ that may be required to implement\n   this standard.  Please address the information\
    \ to the IETF at ietf-\n   ipr@ietf.org.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
