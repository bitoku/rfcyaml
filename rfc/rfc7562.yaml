- title: __initial_text__
  contents:
  - ''
- title: Independent Submission                                        D. Thakore
  contents:
  - "Independent Submission                                        D. Thakore\n  \
    \         Transport Layer Security (TLS) Authorization Using\n      Digital Transmission\
    \ Content Protection (DTCP) Certificates\n"
- title: Abstract
  contents:
  - "Abstract\n   This document specifies the use of Digital Transmission Content\n\
    \   Protection (DTCP) certificates as an authorization data type in the\n   authorization\
    \ extension for the Transport Layer Security (TLS)\n   protocol.  This is in accordance\
    \ with the guidelines for\n   authorization extensions as specified in RFC 5878.\
    \  As with other TLS\n   extensions, this authorization data can be included in\
    \ the client and\n   server hello messages to confirm that both parties support\
    \ the\n   desired authorization data types.  If supported by both the client\n\
    \   and the server, DTCP certificates are exchanged in the supplemental\n   data\
    \ TLS handshake message as specified in RFC 4680.  This\n   authorization data\
    \ type extension is in support of devices containing\n   DTCP certificates issued\
    \ by the Digital Transmission Licensing\n   Administrator (DTLA).\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document is not an Internet Standards Track specification;\
    \ it is\n   published for informational purposes.\n   This is a contribution to\
    \ the RFC Series, independently of any other\n   RFC stream.  The RFC Editor has\
    \ chosen to publish this document at\n   its discretion and makes no statement\
    \ about its value for\n   implementation or deployment.  Documents approved for\
    \ publication by\n   the RFC Editor are not a candidate for any level of Internet\n\
    \   Standard; see Section 2 of RFC 5741.\n   Information about the current status\
    \ of this document, any errata,\n   and how to provide feedback on it may be obtained\
    \ at\n   http://www.rfc-editor.org/info/rfc7562.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2015 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................3\n\
    \      1.1. Applicability Statement ....................................3\n  \
    \    1.2. Conventions ................................................4\n   2.\
    \ Overview ........................................................4\n      2.1.\
    \ Overview of DTCP Certificates ..............................4\n      2.2. Overview\
    \ of SupplementalData Handshake .....................5\n      2.3. Overview of\
    \ Authorization Extensions .......................5\n      2.4. Overview of SupplementalData\
    \ Usage for Authorization .......6\n   3. DTCP Authorization Data Format ..................................6\n\
    \      3.1. DTCP Authorization Type ....................................6\n  \
    \    3.2. DTCP Authorization Data ....................................6\n    \
    \  3.3. Usage Rules for Clients to Exchange DTCP\n           Authorization Data\
    \ .........................................7\n      3.4. Usage Rules for Servers\
    \ to Exchange DTCP\n           Authorization Data .........................................8\n\
    \      3.5. TLS Message Exchange with dtcp_authz_data ..................8\n  \
    \    3.6. Alert Messages .............................................9\n   4.\
    \ IANA Considerations ............................................10\n   5. Security\
    \ Considerations ........................................10\n   6. References\
    \ .....................................................11\n      6.1. Normative\
    \ References ......................................11\n      6.2. Informative\
    \ References ....................................12\n   Appendix A. Alternate\
    \ Double Handshake Example ....................13\n   Acknowledgements ..................................................15\n\
    \   Author's Address ..................................................15\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   The Transport Layer Security (TLS) protocol (see TLS 1.0\
    \ [RFC2246],\n   TLS 1.1 [RFC4346], and TLS1 .2 [RFC5246]) is being used in an\
    \ ever\n   increasing variety of operational environments, the most common among\n\
    \   which is its use in securing HTTP traffic [RFC2818].  [RFC5878]\n   introduces\
    \ extensions that enable TLS to operate in environments\n   where authorization\
    \ information needs to be exchanged between the\n   client and the server before\
    \ any protected data is exchanged.  The\n   use of these TLS authorization extensions\
    \ is especially attractive\n   since it allows the client and server to determine\
    \ the type of\n   protected data to exchange based on the authorization information\n\
    \   received in the extensions.\n   A substantial number of deployed consumer\
    \ electronics devices, such\n   as televisions, tablets, game consoles, set-top\
    \ boxes, and other\n   multimedia devices, contain Digital Transmission Content\
    \ Protection\n   [DTCP] certificates issued by [DTLA].  These DTCP certificates\
    \ enable\n   secure transmission of premium audiovisual content between devices\n\
    \   over various types of links (e.g., DTCP over IP [DTCP-IP]).  These\n   DTCP\
    \ certificates can also be used to verify device functionality\n   (e.g., supported\
    \ device features).\n   This document describes the format and necessary identifiers\
    \ to\n   exchange DTCP certificates within the supplemental data message (see\n\
    \   [RFC4680]) while negotiating a TLS session.  The DTCP certificates\n   are\
    \ then used independent of their use for content protection (e.g.,\n   to verify\
    \ supported features) and the corresponding DTCP\n   Authentication and Key Exchange\
    \ (AKE) protocol.  This communication\n   allows either the client, the server,\
    \ or both to perform certain\n   actions or provide specific services.  The actual\
    \ semantics of the\n   authorization decision by the client/server are beyond\
    \ the scope of\n   this document.  The DTCP certificate, which is not an X.509\n\
    \   certificate, can be cryptographically tied to the X.509 certificate\n   being\
    \ used during the TLS tunnel establishment by an Elliptic Curve\n   Digital Signature\
    \ Algorithm (EC-DSA) [DTCP] signature.\n"
- title: 1.1.  Applicability Statement
  contents:
  - "1.1.  Applicability Statement\n   DTCP-enabled consumer electronics devices (e.g.,\
    \ televisions, game\n   consoles) use DTCP certificates for secure transmission\
    \ of\n   audiovisual content.  The AKE protocol defined in [DTCP] is used to\n\
    \   exchange DTCP certificates and allows a device to be identified and\n   authenticated\
    \ based on the information in the DTCP certificate.\n   However, these DTCP-enabled\
    \ devices offer additional functionality\n   (e.g., via HTML5 User Agents or web-enabled\
    \ applications) that is\n   distinct from its capability to transmit and play\
    \ audiovisual\n   content.  The mechanism outlined in this document allows a DTCP-\n\
    \   enabled consumer electronics device to authenticate and authorize\n   using\
    \ its DTCP certificate when accessing services over the internet;\n   for example,\
    \ web applications on televisions that can enable value-\n   added services. \
    \ This is anticipated to be very valuable since there\n   are a considerable number\
    \ of such devices.  The reuse of well-known\n   web security will also keep such\
    \ communication consistent with\n   existing standards and best practices.\n"
- title: 1.2.  Conventions
  contents:
  - "1.2.  Conventions\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"\
    SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\"\
    , and \"OPTIONAL\" in this\n   document are to be interpreted as described in\
    \ [RFC2119].\n"
- title: 2.  Overview
  contents:
  - '2.  Overview

    '
- title: 2.1.  Overview of DTCP Certificates
  contents:
  - "2.1.  Overview of DTCP Certificates\n   DTCP certificates issued by [DTLA] to\
    \ DTLA-compliant devices come in\n   three general variations (see Section 4.2.3.1\
    \ of [DTCP]):\n   o  Restricted Authentication device certificate format (Format\
    \ 0):\n      Typically issued to devices with limited computation resources.\n\
    \   o  Baseline Full Authentication device certificate format (Format 1):\n  \
    \    This is the most commonly issued certificate format.  Format 1\n      certificates\
    \ include a unique DeviceID and device EC-DSA public/\n      private key pair\
    \ generated by the DTLA.  (See Section 4.3 of\n      [DTCP]).\n   o  Extended\
    \ Full Authentication device certificate format (Format 2):\n      This is issued\
    \ to devices that possess additional functions (e.g.,\n      additional channel\
    \ ciphers, specific device properties).  The\n      presence of these additional\
    \ functions is indicated by the device\n      capability mask as specified in\
    \ Section 4.2.3.2 of [DTCP].  Format\n      2 certificates also include a unique\
    \ DeviceID and device EC-DSA\n      public/private key pair generated by the DTLA\
    \ (see Section 4.3 of\n      [DTCP]).\n   The mechanism specified in this document\
    \ allows only Formats 1 and 2\n   DTCP certificates to be exchanged in the supplemental\
    \ data message\n   since it requires the use of the EC-DSA private key associated\
    \ with\n   the certificate.\n"
- title: 2.2.  Overview of SupplementalData Handshake
  contents:
  - "2.2.  Overview of SupplementalData Handshake\n   Figure 1 illustrates the exchange\
    \ of the SupplementalData message\n   during the TLS handshake as specified in\
    \ [RFC4680] (repeated here for\n   convenience):\n        Client             \
    \                                  Server\n        ClientHello (with extensions)\
    \ -------->\n                                       ServerHello(with extensions)\n\
    \                                                  SupplementalData*\n       \
    \                                                Certificate*\n              \
    \                                   ServerKeyExchange*\n                     \
    \                           CertificateRequest*\n                            \
    \         <--------      ServerHelloDone\n        SupplementalData*\n        Certificate*\n\
    \        ClientKeyExchange\n        CertificateVerify*\n        [ChangeCipherSpec]\n\
    \        Finished                     -------->\n                            \
    \                     [ChangeCipherSpec]\n                                   \
    \  <--------             Finished\n        Application Data             <------->\
    \     Application Data\n        *  Indicates optional or situation-dependent messages\
    \ that are\n           not always sent.\n        [] Indicates that ChangeCipherSpec\
    \ is an independent TLS\n           protocol content type; it is not a TLS handshake\
    \ message.\n      Figure 1: TLS Handshake Message Exchange with SupplementalData\n"
- title: 2.3.  Overview of Authorization Extensions
  contents:
  - "2.3.  Overview of Authorization Extensions\n   [RFC5878] defines two authorization\
    \ extension types that are used in\n   the ClientHello and ServerHello messages\
    \ and are repeated below for\n   convenience:\n         enum {\n           client_authz(7),\
    \ server_authz(8), (65535)\n         } ExtensionType;\n   A client uses the client_authz\
    \ and server_authz extensions in the\n   ClientHello message to indicate that\
    \ it will send client\n   authorization data and receive server authorization\
    \ data,\n   respectively, in the SupplementalData messages.  A server uses the\n\
    \   extensions in a similar manner in its ServerHello message.  [RFC5878]\n  \
    \ also establishes a registry that is maintained by IANA to register\n   authorization\
    \ data formats.  This document defines a new\n   authorization data type for both\
    \ the client_authz and server_authz\n   extensions and allows the client and server\
    \ to exchange DTCP\n   certificates in the SupplementalData message.\n"
- title: 2.4.  Overview of SupplementalData Usage for Authorization
  contents:
  - "2.4.  Overview of SupplementalData Usage for Authorization\n   Section 3 of [RFC5878]\
    \ specifies the syntax of the supplemental data\n   message when carrying the\
    \ authz_data message that is negotiated in\n   the client_authz and/or server_authz\
    \ types.  This document defines a\n   new authorization data format that is used\
    \ in the authz_data message\n   when sending DTCP Authorization Data.\n"
- title: 3.  DTCP Authorization Data Format
  contents:
  - '3.  DTCP Authorization Data Format

    '
- title: 3.1.  DTCP Authorization Type
  contents:
  - "3.1.  DTCP Authorization Type\n   The DTCP Authorization type definition in the\
    \ TLS Authorization Data\n   Formats registry is:\n          dtcp_authorization(66);\n"
- title: 3.2.  DTCP Authorization Data
  contents:
  - "3.2.  DTCP Authorization Data\n   The DTCP Authorization Data is used when the\
    \ AuthzDataFormat type is\n   dtcp_authorization.  The syntax of the authorization\
    \ data is:\n         struct {\n             opaque random_bytes[32];\n       \
    \  } RandomNonce;\n         struct {\n             opaque RandomNonce nonce;\n\
    \             opaque DTCPCert<0..2^24-1>;\n             opaque ASN.1Cert<0..2^24-1>;\n\
    \             opaque signature<0..2^16-1>;\n         } dtcp_authz_data;\n   RandomNonce\
    \ is generated by the server and consists of 32 bytes\n   generated by a high-quality,\
    \ secure random number generator.  The\n   client always sends back the server-generated\
    \ RandomNonce in its\n   dtcp_authz_data structure.  The RandomNonce helps the\
    \ server in\n   detecting replay attacks.  A client can detect replay attacks\
    \ by\n   associating the ASN.1 certificate in the dtcp_authz_data structure\n\
    \   with the certificate received in the Certificate message of the TLS\n   handshake,\
    \ so a separate nonce for the client is not required.\n   DTCPCert is the sender's\
    \ DTCP certificate.  See Section 4.2.3.1 of\n   the DTCP Specification [DTCP].\n\
    \   ASN.1Cert is the sender's certificate used to establish the TLS\n   session,\
    \ i.e., it is sent in the Certificate or ClientCertificate\n   message using the\
    \ Certificate structure defined in Section 7.4.2 of\n   [RFC5246].\n   The DTCPCert\
    \ and ASN.1Cert are variable-length vectors as specified\n   in Section 4.3 of\
    \ [RFC5246].  Hence, the actual length precedes the\n   vector's contents in the\
    \ byte stream.  If the ASN.1Cert is not being\n   sent, the ASN.1Cert_length MUST\
    \ be zero.\n   dtcp_authz_data contains the RandomNonce, the DTCP certificate,\
    \ and\n   the optional ASN.1 certificate.  This is then followed by the digital\n\
    \   signature covering the RandomNonce, the DTCP certificate, and the\n   ASN.1\
    \ certificate (if present).  The signature is generated using the\n   private\
    \ key associated with the DTCP certificate and using the\n   Signature Algorithm\
    \ and Hash Algorithm as specified in Section 4.4 of\n   [DTCP].  This signature\
    \ provides proof of the possession of the\n   private key by the sender.  A sender\
    \ sending its own DTCP certificate\n   MUST populate this field.  The length of\
    \ the signature field is\n   determined by the Signature Algorithm and Hash Algorithm\
    \ as specified\n   in Section 4.4 of [DTCP], and so it is not explicitly encoded\
    \ in the\n   dtcp_authz_data structure (e.g., the length will be 40 bytes for\
    \ a\n   SHA1+ECDSA algorithm combination).\n"
- title: 3.3.  Usage Rules for Clients to Exchange DTCP Authorization Data
  contents:
  - "3.3.  Usage Rules for Clients to Exchange DTCP Authorization Data\n   A client\
    \ includes both the client_authz and server_authz extensions\n   in the extended\
    \ client hello message when indicating its desire to\n   exchange dtcp_authorization\
    \ data with the server.  Additionally, the\n   client includes the AuthzDataFormat\
    \ type specified in Section 3.1 in\n   the extension_data field to specify the\
    \ format of the authorization\n   data.\n   A client will receive the server's\
    \ dtcp_authz_data before it sends\n   its own dtcp_authz_data.  When sending its\
    \ own dtcp_authz_data\n   message, the client includes the same RandomNonce that\
    \ it receives in\n   the server's dtcp_authz_data message.  Clients MUST include\
    \ its DTCP\n   certificate in the dtcp_authz_data message.  A client MAY include\
    \ its\n   ASN.1 certificate (certificate in the ClientCertificate message) in\n\
    \   the ASN.1Cert field of the dtcp_authz_data to cryptographically tie\n   the\
    \ dtcp_authz_data with its ASN.1Cert being used to establish the\n   TLS session\
    \ (i.e., sent in the ClientCertificate message).\n"
- title: 3.4.  Usage Rules for Servers to Exchange DTCP Authorization Data
  contents:
  - "3.4.  Usage Rules for Servers to Exchange DTCP Authorization Data\n   A server\
    \ responds with both the client_authz and server_authz\n   extensions in the extended\
    \ server hello message when indicating its\n   desire to exchange dtcp_authorization\
    \ data with the client.\n   Additionally, the server includes the AuthzDataFormat\
    \ type specified\n   in Section 3.1 in the extension_data field to specify the\
    \ format of\n   the dtcp_authorization data.  A client may or may not include\
    \ an\n   ASN.1 certificate during the TLS handshake.  However, the server will\n\
    \   not know that at the time of sending the SupplementalData message.\n   Hence,\
    \ a server MUST generate and populate the RandomNonce in the\n   dtcp_authz_data\
    \ message.  If the client's hello message does not\n   contain both the client_authz\
    \ and server_authz extensions with\n   dtcp_authorization type, the server MUST\
    \ NOT include support for\n   dtcp_authorization data in its hello message.  A\
    \ server MAY include\n   its DTCP certificate in the dtcp_authz_data message.\
    \  If the server\n   does not send a DTCP certificate, it will send only the RandomNonce\n\
    \   in its dtcp_authz_data message.  If the server includes its DTCP\n   certificate,\
    \ it MUST also include its server certificate (sent in the\n   TLS Certificate\
    \ message) in the certs field to cryptographically tie\n   its dtcp_authz_data\
    \ with the ASN.1 certificate used in the TLS\n   session being established.  This\
    \ also helps the client in detecting\n   replay attacks.\n"
- title: 3.5.  TLS Message Exchange with dtcp_authz_data
  contents:
  - "3.5.  TLS Message Exchange with dtcp_authz_data\n   Based on the usage rules\
    \ in the sections above, Figure 2 provides one\n   possible TLS message exchange\
    \ where the client sends its DTCP\n   certificate to the server within the dtcp_authz_data\
    \ message.\n        Client                                               Server\n\
    \        ClientHello (with extensions) -------->\n                           \
    \            ServerHello(with extensions)\n                                  \
    \  SupplementalData(with Nonce N1)\n                                         \
    \               Certificate\n                                                \
    \ ServerKeyExchange*\n                                                 CertificateRequest\n\
    \                                     <--------      ServerHelloDone\n       \
    \ SupplementalData(with Data D1)\n        Certificate\n        ClientKeyExchange\n\
    \        CertificateVerify\n        [ChangeCipherSpec]\n        Finished     \
    \                -------->\n                                                 [ChangeCipherSpec]\n\
    \                                     <--------             Finished\n       \
    \ Application Data             <------->     Application Data\n      N1 Indicates\
    \ a Random nonce generated by server\n      D1 Contains dtcp_authz_data populated\
    \ with the following\n        {(N1, DTCP Cert, Client X.509 Cert) Signature over\
    \ all elements}\n      *  Indicates optional or situation-dependent messages that\
    \ are\n         not always sent.\n      [] Indicates that ChangeCipherSpec is\
    \ an independent TLS\n         protocol content type; it is not a TLS handshake\
    \ message.\n                 Figure 2: DTCP SupplementalData Exchange\n"
- title: 3.6.  Alert Messages
  contents:
  - "3.6.  Alert Messages\n   This document reuses TLS Alert messages for any errors\
    \ that arise\n   during authorization processing and reuses the AlertLevels as\n\
    \   specified in [RFC5878].  Additionally, the following AlertDescription\n  \
    \ values are used to report errors in dtcp_authorization processing:\n   unsupported_extension:\n\
    \      During processing of dtcp_authorization, a client uses this when\n    \
    \  it receives a server hello message that includes support for\n      dtcp_authorization\
    \ in only one of client_authz or server_authz but\n      not in both the extensions.\
    \  This message is always fatal.  Note:\n      Completely omitting the dtcp_authorization\
    \ extension and/or\n      omitting the client_authz and server_authz completely\
    \ is allowed\n      and should not constitute the reason that this alert is sent.\n\
    \   certificate_unknown:\n      During processing of dtcp_authorization, a client\
    \ or server uses\n      this when it has received an X.509 certificate in the\n\
    \      dtcp_authorization data and that X.509 certificate does not match\n   \
    \   the certificate sent in the corresponding ClientCertificate or\n      Certificate\
    \ message.\n"
- title: 4.  IANA Considerations
  contents:
  - "4.  IANA Considerations\n   This document includes an entry registered in the\
    \ IANA-maintained\n   \"TLS Authorization Data Formats\" registry for dtcp_authorization(66).\n\
    \   This registry is defined in [RFC5878] and defines two ranges: one is\n   IETF\
    \ Review, and the other is Specification Required.  The value for\n   dtcp_authorization\
    \ should be assigned via [RFC5226] Specification\n   Required.  The extension\
    \ defined in this document is compatible with\n   Data Transport Layer Security\
    \ (DTLS) [RFC6347], and the registry\n   assignment has been marked \"Y\" for\
    \ DTLS-OK.\n"
- title: 5.  Security Considerations
  contents:
  - "5.  Security Considerations\n   The dtcp_authorization data, as specified in\
    \ this document, carries\n   the DTCP certificate that identifies the associated\
    \ device.\n   Inclusion of the X.509 certificate being used to establish a TLS\n\
    \   Session in the dtcp_authorization data allows an application to\n   cryptographically\
    \ tie them.  However, a TLS Client is not required to\n   use (and may not possess)\
    \ an X.509 certificate.  In this case, the\n   dtcp_authorization data exchange\
    \ is prone to a man-in-the-middle\n   (MITM) attack.  In such situations, a TLS\
    \ server MUST deny access to\n   the application features dependent on the DTCP\
    \ certificate or use a\n   double handshake.  The double handshake mechanism is\
    \ also vulnerable\n   to the TLS MITM Renegotiation exploit as explained in [RFC5746].\
    \  In\n   order to address this vulnerability, clients and servers MUST use the\n\
    \   secure_renegotiation extension as specified in [RFC5746] when\n   exchanging\
    \ dtcp_authorization data.  Additionally, the renegotiation\n   is also vulnerable\
    \ to the Triple Handshake exploit.  To mitigate\n   this, servers MUST use the\
    \ same ASN.1 certificate during\n   renegotiation as the one used in the initial\
    \ handshake.\n   It should be noted that for the double handshake to succeed,\
    \ any\n   extension (e.g., TLS Session Ticket [RFC5077]) that results in the\n\
    \   TLS handshake sequence being modified may result in failure to\n   exchange\
    \ SupplementalData.\n   Additionally, the security considerations specified in\
    \ [RFC5878] and\n   [RFC5246] apply to the extension specified in this document.\
    \  In\n   addition, the dtcp_authorization data may be carried along with other\n\
    \   supplemental data or some other authorization data and that\n   information\
    \ may require additional protection.  Finally, implementers\n   should also reference\
    \ [DTCP] and [DTCP-IP] for more information\n   regarding DTCP certificates, their\
    \ usage, and associated security\n   considerations.\n"
- title: 6.  References
  contents:
  - '6.  References

    '
- title: 6.1.  Normative References
  contents:
  - "6.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use in\
    \ RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119,\n  \
    \            DOI 10.17487/RFC2119, March 1997,\n              <http://www.rfc-editor.org/info/rfc2119>.\n\
    \   [RFC2246]  Dierks, T. and C. Allen, \"The TLS Protocol Version 1.0\",\n  \
    \            RFC 2246, DOI 10.17487/RFC2246, January 1999,\n              <http://www.rfc-editor.org/info/rfc2246>.\n\
    \   [RFC4346]  Dierks, T. and E. Rescorla, \"The Transport Layer Security\n  \
    \            (TLS) Protocol Version 1.1\", RFC 4346,\n              DOI 10.17487/RFC4346,\
    \ April 2006,\n              <http://www.rfc-editor.org/info/rfc4346>.\n   [RFC5246]\
    \  Dierks, T. and E. Rescorla, \"The Transport Layer Security\n              (TLS)\
    \ Protocol Version 1.2\", RFC 5246,\n              DOI 10.17487/RFC5246, August\
    \ 2008,\n              <http://www.rfc-editor.org/info/rfc5246>.\n   [RFC5746]\
    \  Rescorla, E., Ray, M., Dispensa, S., and N. Oskov,\n              \"Transport\
    \ Layer Security (TLS) Renegotiation Indication\n              Extension\", RFC\
    \ 5746, DOI 10.17487/RFC5746, February 2010,\n              <http://www.rfc-editor.org/info/rfc5746>.\n\
    \   [RFC4680]  Santesson, S., \"TLS Handshake Message for Supplemental\n     \
    \         Data\", RFC 4680, DOI 10.17487/RFC4680, October 2006,\n            \
    \  <http://www.rfc-editor.org/info/rfc4680>.\n   [RFC5878]  Brown, M. and R. Housley,\
    \ \"Transport Layer Security (TLS)\n              Authorization Extensions\",\
    \ RFC 5878, DOI 10.17487/RFC5878,\n              May 2010, <http://www.rfc-editor.org/info/rfc5878>.\n\
    \   [RFC6347]  Rescorla, E. and N. Modadugu, \"Datagram Transport Layer\n    \
    \          Security Version 1.2\", RFC 6347, DOI 10.17487/RFC6347,\n         \
    \     January 2012, <http://www.rfc-editor.org/info/rfc6347>.\n   [DTCP]     Digital\
    \ Transmission Licensing Administrator, \"Digital\n              Transmission\
    \ Content Protection Specification\", Volume 1,\n              Informational Version,\n\
    \              <http://www.dtcp.com/documents/dtcp/\n              info-20130605-dtcp-v1-rev-1-7-ed2.pdf>.\n\
    \   [DTCP-IP]  Digital Transmission Licensing Administrator, \"Mapping\n     \
    \         DTCP to IP\", Volume 1, Supplement E, Informational\n              Version,\
    \ <http://www.dtcp.com/documents/dtcp/\n              info-20130605-dtcp-v1se-ip-rev-1-4-ed3.pdf>.\n"
- title: 6.2.  Informative References
  contents:
  - "6.2.  Informative References\n   [RFC5226]  Narten, T. and H. Alvestrand, \"\
    Guidelines for Writing an\n              IANA Considerations Section in RFCs\"\
    , BCP 26, RFC 5226,\n              DOI 10.17487/RFC5226, May 2008,\n         \
    \     <http://www.rfc-editor.org/info/rfc5226>.\n   [DTLA]     Digital Transmission\
    \ Licensing Administrator, \"DTLA\",\n              <http://www.dtcp.com>.\n \
    \  [RFC2818]  Rescorla, E., \"HTTP Over TLS\", RFC 2818,\n              DOI 10.17487/RFC2818,\
    \ May 2000,\n              <http://www.rfc-editor.org/info/rfc2818>.\n   [RFC5077]\
    \  Salowey, J., Zhou, H., Eronen, P., and H. Tschofenig,\n              \"Transport\
    \ Layer Security (TLS) Session Resumption without\n              Server-Side State\"\
    , RFC 5077, DOI 10.17487/RFC5077,\n              January 2008, <http://www.rfc-editor.org/info/rfc5077>.\n\
    \   [RFC6042]  Keromytis, A., \"Transport Layer Security (TLS)\n             \
    \ Authorization Using KeyNote\", RFC 6042,\n              DOI 10.17487/RFC6042,\
    \ October 2010,\n              <http://www.rfc-editor.org/info/rfc6042>.\n"
- title: Appendix A.  Alternate Double Handshake Example
  contents:
  - "Appendix A.  Alternate Double Handshake Example\n   This document specifies a\
    \ TLS authorization data extension that\n   allows TLS clients and servers to\
    \ exchange DTCP certificates during a\n   TLS handshake exchange.  In cases where\
    \ the supplemental data\n   contains sensitive information, the double handshake\
    \ technique\n   described in [RFC4680] can be used to provide protection for the\n\
    \   supplemental data information.  The double handshake specified in\n   [RFC4680]\
    \ assumes that the client knows the context of the TLS\n   session that is being\
    \ set up and uses the authorization extensions as\n   needed.  Figure 3 illustrates\
    \ a variation of the double handshake\n   that addresses the case where the client\
    \ may not have a priori\n   knowledge that it will be communicating with a server\
    \ capable of\n   exchanging dtcp_authz_data (typical for https connections; see\n\
    \   [RFC2818]).  In Figure 3, the client's hello messages includes the\n   client_authz\
    \ and server_authz extensions.  The server simply\n   establishes an encrypted\
    \ TLS session with the client in the first\n   handshake by not indicating support\
    \ for any authz extensions.  The\n   server initiates a second handshake by sending\
    \ a HelloRequest.  The\n   second handshake will include the server's support\
    \ for authz\n   extensions, which will result in SupplementalData being exchanged.\n\
    \   Alternately, it is also possible to do a double handshake where the\n   server\
    \ sends the authorization extensions during both the first and\n   the second\
    \ handshake.  Depending on the information received in the\n   first handshake,\
    \ the server can decide whether or not a second\n   handshake is needed.\n   \
    \  Client                                                   Server\n     ClientHello\
    \ (w/ extensions) -------->                            |0\n                  \
    \                 ServerHello (no authz extensions)  |0\n                    \
    \                                    Certificate*  |0\n                      \
    \                            ServerKeyExchange*  |0\n                        \
    \                         CertificateRequest*  |0\n                          \
    \       <--------           ServerHelloDone  |0\n     Certificate*           \
    \                                          |0\n     ClientKeyExchange        \
    \                                        |0\n     CertificateVerify*         \
    \                                      |0\n     [ChangeCipherSpec]           \
    \                                    |0\n     Finished                    -------->\
    \                            |1\n                                            \
    \      [ChangeCipherSpec]  |0\n                                 <--------    \
    \              Finished  |1\n                                 <--------      \
    \        HelloRequest  |1\n     ClientHello (w/ extensions) -------->        \
    \                    |1\n                                         ServerHello\
    \ (w/ extensions)  |1\n                                                   SupplementalData*\
    \  |1\n                                                        Certificate*  |1\n\
    \                                                  ServerKeyExchange*  |1\n  \
    \                                               CertificateRequest*  |1\n    \
    \                             <--------           ServerHelloDone  |1\n     SupplementalData*\
    \                                                |1\n     Certificate*       \
    \                                              |1\n     ClientKeyExchange    \
    \                                            |1\n     CertificateVerify*     \
    \                                          |1\n     [ChangeCipherSpec]       \
    \                                        |1\n     Finished                   \
    \ -------->                            |2\n                                  \
    \                [ChangeCipherSpec]  |1\n                                 <--------\
    \                  Finished  |2\n     Application Data            <------->  \
    \        Application Data  |2\n     *  Indicates optional or situation-dependent\
    \ messages.\n          Figure 3: Double Handshake to Protect SupplementalData\n"
- title: Acknowledgements
  contents:
  - "Acknowledgements\n   The author wishes to thank Mark Brown, Sean Turner, Sumanth\n\
    \   Channabasappa, and the Chairs (EKR, Joe Saloway) and members of the\n   TLS\
    \ Working Group who provided feedback and comments on one or more\n   revisions\
    \ of this document.\n   This document derives its structure and much of its content\
    \ from\n   [RFC4680], [RFC5878], and [RFC6042].\n"
- title: Author's Address
  contents:
  - "Author's Address\n   D. Thakore\n   Cable Television Laboratories, Inc.\n   858\
    \ Coal Creek Circle\n   Louisville, CO  80023\n   United States\n   Email: d.thakore@cablelabs.com\n"
