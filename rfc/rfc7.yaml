- contents:
  - "                           Host-Imp Interface\n      G. Deloche      -->  Prof.\
    \ J. Estrin\n                           Prof. L. Kleinrock\n                 \
    \          Prof. B Bussel\n                           D. Mandell\n           \
    \                S. Crocker\n                           L. Bonamy\n   Object:\
    \ Arpa Network - Specification Outlines for Host-IMP (HI)\n   Interface Programs.\n\
    \   I.  Introduction\n   II.  Scope of the software organization.\n          \
    \ II-1    Network program\n           II-2    Handler program\n   III.  Questions\n\
    \   [The original of RFC 7 was hand-written, and only partially illegible\n  \
    \ copies exist.  RFC 7 was later typed int NLS by the Augmentation\n   Research\
    \ Center (ARC) at SRI.  The following is the best\n   reconstruction we could\
    \ do.  RFC Editor.]\n"
  title: I.  Introduction
- contents:
  - "   This paper is concerned with the preliminary software design of the\n   Host\
    \ IMP interface.  Its main purpose is on the one hand to define\n   functions\
    \ that will be implemented, and on the other hand to provide\n   a base for discussions\
    \ and ...(unreadable).\n   This study is based upon a study of the BBN Report\
    \ No. 763.\n"
  title: II.  Scope of the software organization.
- contents:
  - "   The system is based upon two main programs: the Handler program that\n   drives\
    \ the channel hardware unit, and the Network program which\n   carries out the\
    \ user's transmission requests.\n   As the communication is full duplex, each\
    \ of these programs can be\n   viewed as divided into two parts: one is concerned\
    \ with the output\n   data, the other with the input. (See Fig. 1)\n   These two\
    \ programs exchange data through a pool of buffers, and\n   logical information\
    \ through an interface table.\n   In the following we only focus on the output\
    \ part of each program\n   (See Fig. 2).  The input part would be very similar.\n"
  title: II-1.   Network program.
- contents:
  - ''
  title: II-1-1. Multiplex function.
- contents:
  - "   This program multiplexes the outgoing messages (and distributes the\n   incoming\
    \ messages).  The multiplexing consists in stacking up all the\n   user's (or\
    \ caller, or party) requests and filling up the pool of\n   buffers so as to keep\
    \ the handler busy emitting.\n   Multiplexing (and distribution) is based on the\
    \ link identification\n   numbers.  (Link = logical connection between two users).\
    \  The\n   multiplexing problem is closely related to the interface between a\n\
    \   user's program and the network program, that is in\n   fact...(unreadable)\
    \ operating system (See below: Questions).\n"
  title: II-1-2.  Output message processing.
- contents:
  - "   When a user's program wants to send out text it should indicate the\n   following\
    \ information (through a macro, or as call parameters): text\n   location, text\
    \ length in bytes, and destination.\n   Using these data the Network program:\n\
    \      *  prepares a 16 bit Host heading (1 bit: trace, 2 bits: spares, 8\n  \
    \       bits: link identification no., 5 bits: destination host)\n      *  inserts\
    \ a 16 bits marking between the header and the text so as\n         to start the\
    \ text at a word boundary.  This marking consists of\n         a one preceding\
    \ the first bit of the text and, in turn,\n         preceded by fifteen zeros\
    \ to fill up the gap.\n      *  checks the length of the user's text - if it exceeds\
    \ 1006 bytes\n          +-                                                   \
    \  -+\n          |8080 (max host message length) - 32 (heading + marking)|\n \
    \         |-------------------------------------------------------|\n        \
    \  |                8 (byte = 8 bits)                      |\n          +-   \
    \                                                  -+\n   the program breaks down\
    \ the text into a sequence of messages whose\n   maximum length is 1006 bytes\
    \ - Each of these messages is preceded by\n   a heading as explained above.\n\
    \   Remark: in that case one of the heading space bits could be used for\n   indicating\
    \ that several messages belong to the same text.\n      *  _transcodes_ the EBCDIC\
    \ characters constituting the messages\n         into ASCII characters.\n    \
    \  *  _fills_ the buffers of the pool with the content of the\n         messages.\n\
    \      *  _updates_ the content of the interface table and moves the\n       \
    \  filling pointers (see below).\n"
  title: II-2.  Handler program.
- contents:
  - "   This program is initiated either by the network program, or by the\n   I/O\
    \ interrupt.\n   This program will be very short.  It will be coded in master\
    \ mode\n   (privileged instructions) and should be integrated in the I/O\n   supervisor\
    \ of the operating system.\n   This program:\n      *  _controls_ the channel\
    \ hardware unit.  It initiates the\n         emission, eventually provides data\
    \ chaining between the\n         buffers, tests the different device status upon\
    \ receiving an\n         interrupt.\n      *  _empties_ the buffers that are filled\
    \ up by the network\n         program.\n      *  _explores_ and _updates_ the\
    \ interface table (see below).\n      *  can eventually insure a control transmission\
    \ procedure with the\n         IMP (See Questions).\n"
  title: II-3  Buffers and Interface Table.
- contents:
  - ''
  title: II-3-1  Buffers.
- contents:
  - "   They should be large enough for containing the maximum host message\n   text\
    \ + heading and marking (1006 + 4 = 1010 bytes).\n   Consequently the buffer size\
    \ could be chosen equal to 256 words (1024\n   bytes).  As for the buffer number\
    \ it will determine the link\n   utilization frequency -\n"
  title: II-3-2  Interface table.
- contents:
  - "   It is through this table that the network program informs the handler\n  \
    \ with the location and length of the emitting data.\n   This table could be a\
    \ ring table with 2 pointers: one for filling,\n   the other for extracting. \
    \ They are respectively updated by the\n   network and the handler program.\n\
    \                      [Length] of the message\n                           contained\n\
    \                           in the buffer\n                               ^\n\
    \                               |\n           +--------------+----------+\n  \
    \         | Buffer addr. | nb bytes |\n           +--------------+----------+\n\
    \           |              |          | <== Filling pointer\n           +--------------+----------+\
    \         |\n           |                         |         V\n           |  \
    \                       |\n           //                        //\n         \
    \  |                         |\n           |                         |\n     \
    \      |                         |\n           +--------------+----------+\n \
    \          | Buffer addr. | nb bytes | <== eEtracting pointer\n           +--------------+----------+\
    \         |\n           | Buffer addr. | nb bytes |         V\n           +--------------+----------+\n"
  title: III.  Questions.
- contents:
  - ''
  title: III-1.  Why is there not a simple control procedure between the HOST and
- contents:
  - "        the IMP?  What happens if a message, issued from the HOST,\n        reaches\
    \ the IMP with an error due to the transmission?\n   From the BBN specifications\
    \ it appears that this error will be\n   transmitted as far [as] the receiving\
    \ HOST.\n   In that case must an HOST-HOST control procedure be provided?\n"
  title: III-2.  Where will the special channel hardware unit be connected
- contents:
  - "        (MIOP/SIOP)?\n   How will this device be notified of an outgoing message\
    \ end in order\n   to start the padding?\n   (The program will provide to the\
    \ MIOP SIOP the number of bytes of the\n   outgoing message, and will receive\
    \ back an interrupt when the last\n   byte is sent out.  Is it that signal which\
    \ will be also sent to the\n   special device?)\n   Vice versa how does the Handler\
    \ know the length of the incoming\n   message?  From the contents of the previous\
    \ one or should this\n   program always ready to receive a message of maximum\
    \ length?  (Then\n   an interrupt should be triggered when the real end is detected\
    \ by the\n   hardware).\n"
  title: III-3.  When does the Gordo documentation will be available in order to
