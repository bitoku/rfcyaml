- title: __initial_text__
  contents:
  - '          Mapping between X.400(1988) / ISO 10021 and RFC 822

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This RFC suggests an electronic mail protocol mapping\
    \ for the\n   Internet community and UK Academic Community, and requests discussion\n\
    \   and suggestions for improvements.  This memo does not specify an\n   Internet\
    \ standard.  Distribution of this memo is unlimited.\n   This document describes\
    \ a set of mappings which will enable\n   interworking between systems operating\
    \ the CCITT X.400 (1988)\n   Recommendations on Message Handling Systems / ISO\
    \ IEC 10021 Message\n   Oriented Text Interchange Systems (MOTIS) [CCITT/ISO88a],\
    \ and systems\n   using the RFC 822 mail protocol [Crocker82a] or protocols derived\n\
    \   from RFC 822.  The approach aims to maximise the services offered\n   across\
    \ the boundary, whilst not requiring unduly complex mappings.\n   The mappings\
    \ should not require any changes to end systems.\n   This document is based on\
    \ RFC 987 and RFC 1026 [Kille86a, Kille87a],\n   which define a similar mapping\
    \ for X.400 (1984).  This document does\n   not obsolete the earlier ones, as\
    \ its domain of application is\n   different.\n"
- title: Specification
  contents:
  - "Specification\n   This document specifies a mapping between two protocols.  This\n\
    \   specification should be used when this mapping is performed on the\n   Internet\
    \ or in the UK Academic Community.  This specification may be\n   modified in\
    \ the light of implementation experience, but no\n   substantial changes are expected.\n\
    \                             Table of Contents\n   1.10  Acknowledgements .....................................\
    \   10\n   2.  Service Elements .......................................   10\n\
    \   2.1  The Notion of Service Across a Gateway ................   10\n   2.2\
    \  RFC 822 ...............................................   11\n   2.3  X.400\
    \ .................................................   15\n   3.   Basic Mappings\
    \ ........................................   24\n   3.1  Notation ..............................................\
    \   24\n   3.2  ASCII and IA5 .........................................   25\n\
    \   3.3  Standard Types ........................................   25\n   3.4\
    \  Encoding ASCII in Printable String ....................   28\n   4.  Addressing\
    \ .............................................   29\n   4.1  A textual representation\
    \ of MTS.ORAddress .............   30\n   4.2  Basic Representation ..................................\
    \   30\n   4.3  EBNF.822-address <-> MTS.ORAddress ....................   34\n\
    \   4.4  Repeated Mappings .....................................   43\n   4.5\
    \  Directory Names .......................................   45\n   4.6  MTS Mappings\
    \ ..........................................   45\n   4.7  IPMS Mappings .......\
    \ .................................   48\n   5.  Detailed Mappings ......................................\
    \   52\n   5.1  RFC 822 -> X.400 ......................................   52\n\
    \   5.2  Return of Contents ....................................   59\n   5.3\
    \  X.400 -> RFC 822 ......................................   60\n   Appendix A\
    \  Differences with RFC 987 .......................   78\n   1.  Introduction\
    \ ...........................................   78\n   2.  Service Elements .......................................\
    \   78\n   3.  Basic Mappings .........................................   78\n\
    \   4.  Addressing .............................................   78\n   5. \
    \ Detailed Mappings ......................................   79\n   6.  Appendices\
    \ .............................................   79\n   Appendix B  Mappings\
    \ specific to the JNT Mail ..............   79\n   1.  Introduction ...........................................\
    \   79\n   2.  Domain Ordering ........................................   79\n\
    \   3.  Acknowledge-To: ........................................   79\n   4. \
    \ Trace ..................................................   80\n   5.  Timezone\
    \ specification .................................   80\n   6.  Lack of 822-MTS\
    \ originator specification ...............   80\n   Appendix C  Mappings specific\
    \ to UUCP Mail .................   81\n   Appendix D  Object Identifier Assignment\
    \ ...................   82\n   Appendix E  BNF Summary ....................................\
    \   82\n   Appendix F  Format of address mapping tables ...............   89\n\
    \   References .................................................   91\n"
- title: Chapter 1 -- Overview
  contents:
  - 'Chapter 1 -- Overview

    '
- title: 1.1.  X.400
  contents:
  - "1.1.  X.400\n   This document relates to the CCITT 1988 X.400 Series Recommendations\n\
    \   / ISO IEC 10021 on the Message Oriented Text Interchange Service\n   (MOTIS).\
    \  This ISO/CCITT standard is referred to in this document as\n   \"X.400\", which\
    \ is a convenient shorthand.  Any reference to the 1984\n   CCITT Recommendations\
    \ will be explicit.  X.400 defines an\n   Interpersonal Messaging System (IPMS),\
    \ making use of a store and\n   forward Message Transfer System.  This document\
    \ relates to the IPMS,\n   and not to wider application of X.400.  It is expected\
    \ that X.400\n   will be implemented very widely.\n"
- title: 1.2.  RFC 822
  contents:
  - "1.2.  RFC 822\n   RFC 822 is the current specification of the messaging standard\
    \ on the\n   Internet.  This standard evolved with the evolution of the network\n\
    \   from the ARPANET (created by the Defense Advanced Research Projects\n   Agency)\
    \ to the Internet, which now involves over 1000 networks and is\n   sponsored\
    \ by DARPA, NSF, DOE, NASA, and NIH.  It specifies an end to\n   end message format.\
    \  It is used in conjunction with a number of\n   different message transfer protocol\
    \ environments.\n      SMTP Networks\n         On the Internet and other TCP/IP\
    \ networks, RFC 822 is used in\n         conjunction with two other standards:\
    \ RFC 821, also known as\n         Simple Mail Transfer Protocol (SMTP) [Postel82a],\
    \ and RFC 1034\n         which is a Specification for domains and a distributed\
    \ name\n         service [Mockapetris87a].\n      UUCP Networks\n         UUCP\
    \ is the UNIX to UNIX CoPy protocol, which is usually used\n         over dialup\
    \ telephone networks to provide a simple message\n         transfer mechanism.\
    \  There are some extensions to RFC 822,\n         particularly in the addressing.\
    \  They use domains which conform\n         to RFC 1034, but not the corresponding\
    \ domain nameservers\n         [Horton86a].\n      Csnet\n         Some portions\
    \ of Csnet follow the Internet protocols.  The\n         dialup portion of Csnet\
    \ uses the Phonenet protocols as a\n         replacement for RFC 821.  This portion\
    \ uses domains which\n         conform to RFC 1034, but not the corresponding\
    \ domain\n         nameservers.\n      Bitnet\n         Some parts of Bitnet and\
    \ related networks use RFC 822 related\n         protocols, with EBCDIC encoding.\n\
    \      JNT Mail Networks\n         A number of X.25 networks, particularly those\
    \ associated with\n         the UK Academic Community, use the JNT (Joint Network\
    \ Team)\n         Mail Protocol, also known as Greybook [Kille84a].  This is used\n\
    \         with domains and name service specified by the JNT NRS (Name\n     \
    \    Registration Scheme) [Larmouth83a].\n         The mappings specified here\
    \ are appropriate for all of these\n         networks.\n"
- title: 1.3.  The need for conversion
  contents:
  - "1.3.  The need for conversion\n   There is a large community using RFC 822 based\
    \ protocols for mail\n   services, who will wish to communicate with users of\
    \ the IPMS\n   provided by X.400 systems.  This will also be a requirement in\
    \ cases\n   where communities intend to make a transition to use of an X.400\n\
    \   IPMS, as conversion will be needed to ensure a smooth service\n   transition.\
    \  It is expected that there will be more than one gateway,\n   and this specification\
    \ will enable them to behave in a consistent\n   manner.  Note that the term gateway\
    \ is used to describe a component\n   performing the protocol mappings between\
    \ RFC 822 and X.400.  This is\n   standard usage amongst mail implementors, but\
    \ should be noted\n   carefully by transport and network service implementors.\n\
    \   Consistency between gateways is desirable to provide:\n      1.   Consistent\
    \ service to users.\n      2.   The best service in cases where a message passes\
    \ through\n           multiple gateways.\n"
- title: 1.4.  General approach
  contents:
  - "1.4.  General approach\n   There are a number of basic principles underlying\
    \ the details of the\n   specification.  These principles are goals, and are not\
    \ achieved in\n   all aspects of the specification.\n      1.   The specification\
    \ should be pragmatic.  There should not be\n           a requirement for complex\
    \ mappings for \"Academic\" reasons.\n           Complex mappings should not be\
    \ required to support trivial\n           additional functionality.\n      2.\
    \   Subject to 1), functionality across a gateway should be as\n           high\
    \ as possible.\n      3.   It is always a bad idea to lose information as a result\
    \ of\n           any transformation.  Hence, it is a bad idea for a gateway\n\
    \           to discard information in the objects it processes.  This\n      \
    \     includes requested services which cannot be fully mapped.\n      4.   All\
    \ mail gateways actually operate at exactly one level\n           above the layer\
    \ on which they conceptually operate.  This\n           implies that the gateway\
    \ must not only be cognisant of the\n           semantics of objects at the gateway\
    \ level, but also be\n           cognisant of higher level semantics.  If meaningful\n\
    \           transformation of the objects that the gateway operates on\n     \
    \      is to occur, then the gateway needs to understand more than\n         \
    \  the objects themselves.\n      5.   The specification should be reversible.\
    \  That is, a double\n           transformation should bring you back to where\
    \ you started.\n"
- title: 1.5.  Gatewaying Model
  contents:
  - '1.5.  Gatewaying Model

    '
- title: 1.5.1.  X.400
  contents:
  - "1.5.1.  X.400\n   X.400 defines the IPMS Abstract Service in X.420/ISO 10021-7,\n\
    \   [CCITT/ISO88b] which comprises of three basic services:\n      1.   Origination\n\
    \      2.   Reception\n      3.   Management\n   Management is a local interaction\
    \ between the user and the IPMS, and\n   is therefore not relevant to gatewaying.\
    \  The first two services\n   consist of operations to originate and receive the\
    \ following two\n   objects:\n      1.   IPM (Interpersonal Message).  This has\
    \ two components: a\n           heading, and a body.  The body is structured as\
    \ a sequence\n           of body parts, which may be basic components (e.g., IA5\n\
    \           text, or G3 fax), or IP Messages.  The heading consists of\n     \
    \      fields containing end to end user information, such as\n           subject,\
    \ primary recipients (To:), and importance.\n      2.   IPN (Inter Personal Notification).\
    \  A notification  about\n           receipt of a given IPM at the UA level.\n\
    \   The Origination service also allows for origination of a probe, which\n  \
    \ is an object to test whether a given IPM could be correctly received.\n   The\
    \ Reception service also allows for receipt of Delivery Reports\n   (DR), which\
    \ indicate delivery success or failure.\n   These IPMS Services utilise the Message\
    \ Transfer (MT) Abstract\n   Service [CCITT/ISO88c].  The MT Abstract Service\
    \ provides the\n   following three basic services:\n      1.   Submission (used\
    \ by IPMS Origination)\n      2.   Delivery (used by IPMS Reception)\n      3.\
    \   Administration (used by IPMS Management)\n   Administration is a local issue,\
    \ and so does not affect this\n   standard.  Submission and delivery relate primarily\
    \ to the MTS\n   Message (comprising Envelope and Content), which carries an IPM\
    \ or\n   IPN (or other uninterpreted contents).  There is also an Envelope,\n\
    \   which includes an ID, an originator, and a list of recipients.\n   Submission\
    \ also includes the probe service, which supports the IPMS\n   Probe.  Delivery\
    \ also includes Reports, which indicate whether a\n   given MTS Message has been\
    \ delivered or not.\n   The MTS is REFINED into the MTA (Message Transfer Agent)\
    \ Service,\n   which define the interaction between MTAs, along with the procedures\n\
    \   for distributed operation.  This service provides for transfer of MTS\n  \
    \ Messages, Probes, and Reports.\n"
- title: 1.5.2.  RFC 822
  contents:
  - "1.5.2.  RFC 822\n   RFC 822 is based on the assumption that there is an underlying\n\
    \   service, which is here called the 822-MTS service.  The 822-MTS\n   service\
    \ provides three basic functions:\n      1.   Identification of a list of recipients.\n\
    \      2.   Identification of an error return address.\n      3.   Transfer of\
    \ an RFC 822 message.\n   It is possible to achieve 2) within the RFC 822 header.\
    \  Some 822-MTS\n   protocols, in particular SMTP, can provide additional functionality,\n\
    \   but as these are neither mandatory in SMTP, nor available in other\n   822-MTS\
    \ protocols, they are not considered here.  Details of aspects\n   specific to\
    \ two 822-MTS protocols are given in Appendices B and C.\n   An RFC 822 message\
    \ consists of a header, and content which is\n   uninterpreted ASCII text.  The\
    \ header is divided into fields, which\n   are the protocol elements.  Most of\
    \ these fields are analogous to P2\n   heading fields, although some are analogous\
    \ to MTS Service Elements\n   or MTA Service Elements.\n"
- title: 1.5.3.  The Gateway
  contents:
  - "1.5.3.  The Gateway\n   Given this functional description of the two services,\
    \ the functional\n   nature of a gateway can now be considered.  It would be elegant\
    \ to\n   consider the 822-MTS service mapping onto the MTS Service Elements\n\
    \   and RFC 822 mapping onto an IPM, but reality just does not fit.\n   Another\
    \ elegant approach would be to treat this document as the\n   definition of an\
    \ X.400 Access Unit (AU).  Again, reality does not\n   fit.  It is necessary to\
    \ consider that the IPM format definition, the\n   IPMS Service Elements, the\
    \ MTS Service Elements, and MTA Service\n   Elements on one side are mapped into\
    \ RFC 822 + 822-MTS on the other\n   in a slightly tangled manner.  The details\
    \ of the tangle will be made\n   clear in Chapter 5.  Access to the MTA Service\
    \ Elements is minimised.\n   The following basic mappings are thus defined.  When\
    \ going from RFC\n   822 to X.400, an RFC 822 message and the associated 822-MTS\n\
    \   information is always mapped into an IPM (MTA, MTS, and IPMS\n   Services).\
    \  Going from X.400 to RFC 822, an RFC 822 message and the\n   associated 822-MTS\
    \ information may be derived from:\n      1.   A Report (MTA, and MTS Services)\n\
    \      2.   An IPN (MTA, MTS, and IPMS Services)\n      3.   An IPM (MTA, MTS,\
    \ and IPMS Services)\n   Probes (MTA Service) must be processed by the gateway,\
    \ as discussed\n   in Chapter 5.  MTS Messages containing Content Types other\
    \ than those\n   defined by the IPMS are not mapped by the gateway, and should\
    \ be\n   rejected at the gateway.\n"
- title: 1.5.4.  Repeated Mappings
  contents:
  - "1.5.4.  Repeated Mappings\n   The mappings specified here are designed to work\
    \ where a message\n   traverses multiple times between X.400 and RFC 822.  This\
    \ is often\n   essential, particularly in the case of distribution lists.  However,\n\
    \   in general, this will lead to a level of service which is the lowest\n   common\
    \ denominator (approximately the services offered by RFC 822).\n   In particular,\
    \ there is no expectation of additional X.400 services\n   being mapped - although\
    \ this may be possible in some cases.\n"
- title: 1.6.  RFC 987
  contents:
  - "1.6.  RFC 987\n   Much of this work is based on the initial specification of\
    \ RFC 987\n   and in its addendum RFC 1026.  A basic decision is that the mapping\n\
    \   will be to the full 1988 version of X.400, and not to a 1984\n   compatible\
    \ subset.  This is important, to give good support to\n   communities which will\
    \ utilise full X.400 at an early date.  This has\n   the following implications:\n\
    \      -    This document does not obsolete RFC 987, as it has a\n           different\
    \ domain of application.\n      -    If a gatewayed message is being transferred\
    \ to a 1984\n           system, then RFC 987 should be used.  If the X.400 side\
    \ of\n           the gateway is a 1988 system, then it should be operated in\n\
    \           1984 compatibility mode.  There is no advantage and some\n       \
    \    disadvantage in using the new mapping, and later on applying\n          \
    \ X.400 downgrading rules.  Note that in an environment where\n           RFC\
    \ 822 is of major importance, it may be desirable for\n           downgrading\
    \ to consider the case where the message was\n           originated in an RFC\
    \ 822 system, and mapped according to\n           this specification.\n      -\
    \    New features of X.400 can be used to provide a much cleaner\n           mapping\
    \ than that defined in RFC 987.\n   Unnecessary change is usually a bad idea.\
    \  Changes on the RFC 822\n   side are avoided as far as possible, so that RFC\
    \ 822 users do not see\n   arbitrary differences between systems conforming to\
    \ this\n   specification, and those following RFC 987.  Changes on the X.400\n\
    \   side are minimised, but are more acceptable, due to the mapping onto\n   a\
    \ new set of services and protocols.\n   A summary of changes made is given in\
    \ Appendix A.\n"
- title: 1.7.  Aspects not covered
  contents:
  - "1.7.  Aspects not covered\n   There have been a number of cases where RFC 987\
    \ was used in a manner\n   which was not intended.  This section is to make clear\
    \ some\n   limitations of scope.  In particular, this specification does not\n\
    \   specify:\n      -    Extensions of RFC 822 to provide access to all X.400\n\
    \           services\n      -    X.400 user interface definition\n   These are\
    \ really coupled.  To map the X.400 services, this\n   specification defines a\
    \ number of extensions to RFC 822.  As a side\n   effect, these give the 822 user\
    \ access to SOME X.400 services.\n   However, the aim on the RFC 822 side is to\
    \ preserve current service,\n   and it is intentional that access is not given\
    \ to all X.400 services.\n   Thus, it will be a poor choice for X.400 implementors\
    \ to use RFC\n   987(88) as an interface - there are too many aspects of X.400\
    \ which\n   cannot be accessed through it.  If a text interface is desired, a\n\
    \   specification targeted at X.400, without RFC 822 restrictions, would\n   be\
    \ more appropriate.\n"
- title: 1.8.  Subsetting
  contents:
  - "1.8.  Subsetting\n   This proposal specifies a mapping which is appropriate to\
    \ preserve\n   services in existing RFC 822 communities.  Implementations and\n\
    \   specifications which subset this specification are strongly\n   discouraged.\n"
- title: 1.9.  Document Structure
  contents:
  - "1.9.  Document Structure\n   This document has five chapters:\n      1.   Overview\
    \ - this chapter.\n      2.   Service Elements - This describes the (end user)\
    \ services\n           mapped by a gateway.\n      3.   Basic mappings - This\
    \ describes some basic notation used in\n           Chapters 3-5, the mappings\
    \ between character sets, and some\n           fundamental protocol elements.\n\
    \      4.   Addressing - This considers the mapping between X.400 O/R\n      \
    \     names and RFC 822 addresses, which is a fundamental gateway\n          \
    \ component.\n      5.   Detailed Mappings - This describes the details of all\
    \ other\n           mappings.\n   There are also six appendices:\n      A.   Differences\
    \ with RFC 987\n      B.   Mappings Specific to JNT Mail\n      C.   Mappings\
    \ Specific to UUCP Mail\n      D.   Object Identifier Assignment\n      E.   BNF\
    \ Summary\n      F.   Format of Address Tables\n   WARNING:\n      THE REMAINDER\
    \ OF THIS SPECIFICATION IS TECHNICALLY DETAILED.\n      IT WILL NOT MAKE SENSE,\
    \ EXCEPT IN THE CONTEXT OF RFC 822 AND\n      X.400 (1988).  DO NOT ATTEMPT TO\
    \ READ THIS DOCUMENT UNLESS\n      YOU ARE FAMILIAR WITH THESE SPECIFICATIONS.\n"
- title: 1.10.  Acknowledgements
  contents:
  - "1.10.  Acknowledgements\n   This work was partly sponsored by the Joint Network\
    \ Team.  The\n   workshop at UCL in June 1989 to work on this specification was\
    \ also\n   an IFIP WG 6.5 meeting.\n   The work in this specification was substantially\
    \ based on RFC 987,\n   which had input from many people.\n   Useful comments\
    \ and suggestions were made by Pete Cowen (Nottingham\n   Univ), Jim Craigie (JNT),\
    \ Christian Huitema (Inria), Peter Lynch\n   (Prime), Julian Onions (Nottingham\
    \ Univ), Sandy Shaw (Edinburgh\n   Univ), Einar Stefferud (NMA), and Peter Sylvester\
    \ (GMD).\n"
- title: Chapter 2 -- Service Elements
  contents:
  - "Chapter 2 -- Service Elements\n   This chapter considers the services offered\
    \ across a gateway built\n   according to this specification.  It gives a view\
    \ of the\n   functionality provided by such a gateway for communication with users\n\
    \   in the opposite domain.  This chapter considers service mappings in\n   the\
    \ context of SINGLE transfers only, and not repeated mappings\n   through multiple\
    \ gateways.\n"
- title: 2.1.  The Notion of Service Across a Gateway
  contents:
  - "2.1.  The Notion of Service Across a Gateway\n   RFC 822 and X.400 provide a\
    \ number of services to the end user.  This\n   chapter describes the extent to\
    \ which each service can be supported\n   across an X.400 <-> RFC 822 gateway.\
    \  The cases considered are single\n   transfers across such a gateway, although\
    \ the problems of multiple\n   crossings are noted where appropriate.\n"
- title: 2.1.1.  Origination of Messages
  contents:
  - "2.1.1.  Origination of Messages\n   When a user originates a message, a number\
    \ of services are available.\n   Some of these imply actions (e.g., delivery to\
    \ a recipient), and some\n   are insertion of known data (e.g., specification\
    \ of a subject field).\n   This chapter describes, for each offered service, to\
    \ what extent it\n   is supported for a recipient accessed through a gateway.\
    \  There are\n   three levels of support:\n      Supported\n         The corresponding\
    \ protocol elements map well, and so the\n         service can be fully provided.\n\
    \      Not Supported\n         The service cannot be provided, as there is a complete\n\
    \         mismatch.\n      Partial Support\n         The service can be partially\
    \ fulfilled.\n   In the first two cases, the service is simply marked as \"Supported\"\
    \n   or \"Not Supported\".  Some explanation may be given if there are\n   additional\
    \ implications, or the (non) support is not intuitive.  For\n   partial support,\
    \ the level of partial support is summarised.  Where\n   partial support is good,\
    \ this will be described by a phrase such as\n   \"Supported by use of.....\"\
    .  A common case of this is where the\n   service is mapped onto a non- standard\
    \ service on the other side of\n   the gateway, and this would have lead to support\
    \ if it had been a\n   standard service.  In many cases, this is equivalent to\
    \ support.  For\n   partial support, an indication of the mechanism is given,\
    \ in order to\n   give a feel for the level of support provided.  Note that this\
    \ is not\n   a replacement for Chapter 5, where the mapping is fully specified.\n\
    \   If a service is described as supported, this implies:\n      -    Semantic\
    \ correspondence.\n      -    No (significant) loss of information.\n      - \
    \   Any actions required by the service element.\n   An example of a service gaining\
    \ full support: If an RFC 822\n   originator specifies a Subject: field, this\
    \ is considered to be\n   supported, as an X.400 recipient will get a subject\
    \ indication.\n   All RFC 822 services are supported or partially supported for\n\
    \   origination.  The implications of non-supported X.400 services is\n   described\
    \ under X.400.\n"
- title: 2.1.2.  Reception of Messages
  contents:
  - "2.1.2.  Reception of Messages\n   For reception, the list of service elements\
    \ required to support this\n   mapping is specified.  This is really an indication\
    \ of what a\n   recipient might expect to see in a message which has been remotely\n\
    \   originated.\n"
- title: 2.2.  RFC 822
  contents:
  - "2.2.  RFC 822\n   RFC 822 does not explicitly define service elements, as distinct\
    \ from\n   protocol elements.  However, all of the RFC 822 header fields, with\n\
    \   the exception of trace, can be regarded as corresponding to implicit\n   RFC\
    \ 822 service elements.\n"
- title: 2.2.1.  Origination in RFC 822
  contents:
  - "2.2.1.  Origination in RFC 822\n   A mechanism of mapping, used in several cases,\
    \ is to map the RFC 822\n   header into a heading extension in the IPM (InterPersonal\
    \ Message).\n   This can be regarded as partial support, as it makes the information\n\
    \   available to any X.400 implementations which are interested in these\n   services.\
    \ Communities which require significant RFC 822 interworking\n   should require\
    \ that their X.400 User Agents are able to display these\n   heading extensions.\
    \  Support for the various service elements\n   (headers) is now listed.\n   \
    \   Date:\n           Supported.\n      From:\n           Supported.  For messages\
    \ where there is also a sender field,\n           the mapping is to \"Authorising\
    \ Users Indication\", which has\n           subtly different semantics to the\
    \ general RFC 822 usage of\n           From:.\n      Sender:\n           Supported.\n\
    \      Reply-To:\n           Supported.\n      To:  Supported.\n      Cc:  Supported.\n\
    \      Bcc: Supported.\n      Message-Id:\n           Supported.\n      In-Reply-To:\n\
    \           Supported, for a single reference.  Where multiple\n           references\
    \ are given, partial support is given by mapping to\n           \"Cross Referencing\
    \ Indication\".  This gives similar\n           semantics.\n      References:\n\
    \           Supported.\n      Keywords:\n           Supported by use of a heading\
    \ extension.\n      Subject:\n           Supported.\n      Comments:\n       \
    \    Supported by use of an extra body part.\n      Encrypted:\n           Supported\
    \ by use of a heading extension.\n      Resent-*\n           Supported by use\
    \ of a heading extension.  Note that\n           addresses in these fields are\
    \ mapped onto text, and so are\n           not accessible to the X.400 user as\
    \ addresses.  In\n           principle, fuller support would be possible by mapping\
    \ onto\n           a forwarded IP Message, but this is not suggested.\n      Other\
    \ Fields\n           In particular X-* fields, and \"illegal\" fields in common\n\
    \           usage (e.g., \"Fruit-of-the-day:\") are supported by use of\n    \
    \       heading extensions.\n"
- title: 2.2.2.  Reception by RFC 822
  contents:
  - "2.2.2.  Reception by RFC 822\n   This considers reception by an RFC 822 User\
    \ Agent of a message\n   originated in an X.400 system and transferred across\
    \ a gateway.  The\n   following standard services (headers) may be present in\
    \ such a\n   message:\n      Date:\n      From:\n      Sender:\n      Reply-To:\n\
    \      To:\n      Cc:\n      Bcc:\n      Message-Id:\n      In-Reply-To:\n   \
    \   References:\n      Subject:\n   The following non-standard services (headers)\
    \ may be present.  These\n   are defined in more detail in Chapter 5 (5.3.4, 5.3.6,\
    \ 5.3.7):\n      Autoforwarded:\n      Content-Identifier:\n      Conversion:\n\
    \      Conversion-With-Loss:\n      Delivery-Date:\n      Discarded-X400-IPMS-Extensions:\n\
    \      Discarded-X400-MTS-Extensions:\n      DL-Expansion-History:\n      Deferred-Delivery:\n\
    \      Expiry-Date:\n      Importance:\n      Incomplete-Copy:\n      Language:\n\
    \      Latest-Delivery-Time:\n      Message-Type:\n      Obsoletes:\n      Original-Encoded-Information-Types:\n\
    \      Originator-Return-Address:\n      Priority:\n      Redirection-History:\n\
    \      Reply-By:\n      Requested-Delivery-Method:\n      Sensitivity:\n     \
    \ X400-Content-Type:\n      X400-MTS-Identifier:\n      X400-Originator:\n   \
    \   X400-Received:\n      X400-Recipients:\n"
- title: 2.3.  X.400
  contents:
  - '2.3.  X.400

    '
- title: 2.3.1.  Origination in X.400
  contents:
  - "2.3.1.  Origination in X.400\n   When mapping services from X.400 to RFC 822\
    \ which are not supported\n   by RFC 822, new RFC 822 headers are defined.  It\
    \ is intended that\n   these fields will be registered, and that co-operating\
    \ RFC 822\n   systems may use them.  Where these new fields are used, and no system\n\
    \   action is implied, the service can be regarded as being partially\n   supported.\
    \  Chapter 5 describes how to map X.400 services onto these\n   new headers. \
    \ Other elements are provided, in part, by the gateway as\n   they cannot be provided\
    \ by RFC 822.\n   Some service elements are marked N/A (not applicable).  There\
    \ are\n   five cases, which are marked with different comments:\n      N/A (local)\n\
    \           These elements are only applicable to User Agent / Message\n     \
    \      Transfer Agent interaction and so they cannot apply to RFC\n          \
    \ 822 recipients.\n      N/A (PDAU)\n           These service elements are only\
    \ applicable where the\n           recipient is reached by use of a Physical Delivery\
    \ Access\n           Unit (PDAU), and so do not need to be mapped by the gateway.\n\
    \      N/A (reception)\n           These services  are only applicable for reception.\n\
    \      N/A (prior)\n           If requested, this service must be performed prior\
    \ to the\n           gateway.\n      N/A (MS)\n           These services are only\
    \ applicable to Message Store (i.e., a\n           local service).\n   Finally,\
    \ some service elements are not supported.  In particular, the\n   new security\
    \ services are not mapped onto RFC 822.  Unless otherwise\n   indicated, the behaviour\
    \ of service elements marked as not supported\n   will depend on the criticality\
    \ marking supplied by the user.  If the\n   element is marked as critical for\
    \ transfer or delivery, a non-\n   delivery notification will be generated.  Otherwise,\
    \ the service\n   request will be ignored.\n"
- title: 2.3.1.1.  Basic Interpersonal Messaging Service
  contents:
  - "2.3.1.1.  Basic Interpersonal Messaging Service\n   These are the mandatory IPM\
    \ services as listed in Section 19.8 of\n   X.400 / ISO/IEC 10021-1, listed here\
    \ in the order given.  Section\n   19.8 has cross references to short definitions\
    \ of each service.\n      Access management\n           N/A (local).\n      Content\
    \ Type Indication\n           Supported by a new RFC 822 header (Content-Type:).\n\
    \      Converted Indication\n           Supported by a new RFC 822 header (X400-Received:).\n\
    \      Delivery Time Stamp Indication\n           N/A (reception).\n      IP Message\
    \ Identification\n           Supported.\n      Message Identification\n      \
    \     Supported, by use of a new RFC 822 header\n           (X400-MTS-Identifier).\
    \  This new header is required, as\n           X.400 has two message-ids whereas\
    \ RFC 822 has only one (see\n           previous service).\n      Non-delivery\
    \ Notification\n           Not supported, although in general an RFC 822 system\
    \ will\n           return error reports by use of IP messages.  In other\n   \
    \        service elements, this pragmatic result can be treated as\n         \
    \  effective support of this service element.\n      Original Encoded Information\
    \ Types Indication\n           Supported as a new RFC 822 header\n           \
    \  (Original-Encoded-Information-Types:).\n      Submission Time Stamp Indication\n\
    \           Supported.\n      Typed Body\n           Some types supported.  IA5\
    \ is fully supported.\n           ForwardedIPMessage is supported, with some loss\
    \ of\n           information.  Other types get some measure of support,\n    \
    \       dependent on X.400 facilities for conversion to IA5.  This\n         \
    \  will only be done where content conversion is not\n           prohibited.\n\
    \      User Capabilities Registration\n           N/A (local).\n"
- title: 2.3.1.2.  IPM Service Optional User Facilities
  contents:
  - "2.3.1.2.  IPM Service Optional User Facilities\n   This section describes support\
    \ for the optional (user selectable) IPM\n   services as listed in Section 19.9\
    \ of X.400 / ISO/IEC 10021- 1,\n   listed here in the order given.  Section 19.9\
    \ has cross references to\n   short definitions of each service.\n      Additional\
    \ Physical Rendition\n           N/A (PDAU).\n      Alternate Recipient Allowed\n\
    \           Not supported.  There is no RFC 822 service equivalent to\n      \
    \     prohibition of alternate recipient assignment (e.g., an RFC\n          \
    \ 822 system may freely send an undeliverable message to a\n           local postmaster).\
    \  Thus, the gateway cannot prevent\n           assignment of alternative recipients\
    \ on the RFC 822 side.\n           This service really means giving the user control\
    \ as to\n           whether or not an alternate recipient is allowed.  This\n\
    \           specification requires transfer of messages to RFC 822\n         \
    \  irrespective of this service request, and so this service is\n           not\
    \ supported.\n      Authorising User's Indication\n           Supported.\n   \
    \   Auto-forwarded Indication\n           Supported as new RFC 822 header (Auto-Forwarded:).\n\
    \      Basic Physical Rendition\n           N/A (PDAU).\n      Blind Copy Recipient\
    \ Indication\n           Supported.\n      Body Part Encryption Indication\n \
    \          Supported by use of a new RFC 822 header\n           (Original-Encoded-Information-Types:),\
    \ although in most\n           cases it will not be possible to map the body part\
    \ in\n           question.\n      Content Confidentiality\n           Not supported.\n\
    \      Content Integrity\n           Not supported.\n      Conversion Prohibition\n\
    \           Supported.  In this case, only messages with IA5 body parts,\n   \
    \        other body parts which contain only IA5, and Forwarded IP\n         \
    \  Messages (subject recursively to the same restrictions),\n           will be\
    \ mapped.\n      Conversion Prohibition in Case of Loss of Information\n     \
    \      Supported.\n      Counter Collection\n           N/A (PDAU).\n      Counter\
    \ Collection with Advice\n           N/A (PDAU).\n      Cross Referencing Indication\n\
    \           Supported.\n      Deferred Delivery\n           N/A (prior).  This\
    \ service should always be provided by the\n           MTS prior to the gateway.\
    \  A new RFC 822 header\n           (Deferred-Delivery:) is provided to transfer\
    \ information on\n           this service to the recipient.\n      Deferred Delivery\
    \ Cancellation\n           N/A (local).\n      Delivery Notification\n       \
    \    Supported.  This is performed at the gateway.  Thus, a\n           notification\
    \ is sent by the gateway to the originator.  If\n           the 822-MTS protocol\
    \ is JNT Mail, a notification may also be\n           sent by the recipient UA.\n\
    \      Delivery via Bureaufax Service\n           N/A (PDAU).\n      Designation\
    \ of Recipient by Directory Name\n           N/A (local).\n      Disclosure of\
    \ Other Recipients\n           Supported by use of a new RFC 822 header (X400-Recipients:).\n\
    \           This is descriptive information for the RFC 822 recipient,\n     \
    \      and is not reverse mappable.\n      DL Expansion History Indication\n \
    \          Supported by use of a new RFC 822 header\n           (DL-Expansion-History:).\n\
    \      DL Expansion Prohibited\n           Distribution List means MTS supported\
    \ distribution list, in\n           the manner of X.400.  This service does not\
    \ exist in the RFC\n           822 world.  RFC 822 distribution lists should be\
    \ regarded as\n           an informal redistribution mechanism, beyond the scope\
    \ of\n           this control.  Messages will be sent to RFC 822,\n          \
    \ irrespective of whether this service is requested.\n           Theoretically\
    \ therefore, this service is supported, although\n           in practice it may\
    \ appear that it is not supported.\n      Express Mail Service\n            N/A\
    \ (PDAU).\n      Expiry Date Indication\n            Supported as new RFC 822\
    \ header (Expiry-Date:).  In general,\n            no automatic action can be\
    \ expected.\n      Explicit Conversion\n            N/A (prior).\n      Forwarded\
    \ IP Message Indication\n            Supported, with some loss of information.\
    \  The message is\n            forwarded in an RFC 822 body, and so can only be\
    \ interpreted\n            visually.\n      Grade of Delivery Selection\n    \
    \        N/A (PDAU)\n      Importance Indication\n            Supported as new\
    \ RFC 822 header (Importance:).\n      Incomplete Copy Indication\n          \
    \  Supported as new RFC 822 header (Incomplete-Copy:).\n      Language Indication\n\
    \            Supported as new RFC 822 header (Language:).\n      Latest Delivery\
    \ Designation\n            Not supported.  A new RFC 822 header (Latest-Delivery-Time:)\n\
    \            is provided, which may be used by the recipient.\n      Message Flow\
    \ Confidentiality\n            Not supported.\n      Message Origin Authentication\n\
    \            N/A (reception).\n      Message Security Labelling\n            Not\
    \ supported.\n      Message Sequence Integrity\n            Not supported.\n \
    \     Multi-Destination Delivery\n            Supported.\n      Multi-part Body\n\
    \            Supported, with some loss of information, in that the\n         \
    \   structuring cannot be formalised in RFC 822.\n      Non Receipt Notification\
    \ Request\n            Not supported.\n      Non Repudiation of Delivery\n   \
    \         Not supported.\n      Non Repudiation of Origin\n            N/A (reception).\n\
    \      Non Repudiation of Submission\n            N/A (local).\n      Obsoleting\
    \ Indication\n            Supported as new RFC 822 header (Obsoletes:).\n    \
    \  Ordinary Mail\n            N/A (PDAU).\n      Originator Indication\n     \
    \       Supported.\n      Originator Requested Alternate Recipient\n         \
    \   Not supported, but is placed as comment next to address\n            (X400-Recipients:).\n\
    \      Physical Delivery Notification by MHS\n            N/A (PDAU).\n      Physical\
    \ Delivery Notification by PDS\n            N/A (PDAU).\n      Physical Forwarding\
    \ Allowed\n            Supported by use of a comment in a new RFC 822 header\n\
    \            (X400-Recipients:), associated with the recipient in\n          \
    \  question.\n      Physical Forwarding Prohibited\n            Supported by use\
    \ of a comment in a new RFC 822 header\n            (X400-Recipients:), associated\
    \ with the recipient in\n            question.\n      Prevention of Non-delivery\
    \ notification\n            Supported, as delivery notifications cannot be generated\
    \ by\n            RFC 822.  In practice, errors will be returned as IP\n     \
    \       Messages, and so this service may appear not to be supported\n       \
    \     (see Non-delivery Notification).\n      Primary and Copy Recipients Indication\n\
    \            Supported.\n      Probe\n            Supported at the gateway (i.e.,\
    \ the gateway services the\n            probe).\n      Probe Origin Authentication\n\
    \            N/A (reception).\n      Proof of Delivery\n            Not supported.\n\
    \      Proof of Submission\n            N/A (local).\n      Receipt Notification\
    \ Request Indication\n            Not supported.\n      Redirection Allowed by\
    \ Originator\n            Redirection means MTS supported redirection, in the\
    \ manner\n            of X.400.  This service does not exist in the RFC 822 world.\n\
    \            RFC 822 redirection (e.g., aliasing) should be regarded as\n    \
    \        an informal redirection mechanism, beyond the scope of this\n       \
    \     control.  Messages will be sent to RFC 822, irrespective of\n          \
    \  whether this service is requested.  Theoretically therefore,\n            this\
    \ service is supported, although in practice it may\n            appear that it\
    \ is not supported.\n      Registered Mail\n            N/A (PDAU).\n      Registered\
    \ Mail to Addressee in Person\n            N/A (PDAU).\n      Reply Request Indication\n\
    \            Supported as comment next to address.\n      Replying IP Message\
    \ Indication\n            Supported.\n      Report Origin Authentication\n   \
    \         N/A (reception).\n      Request for Forwarding Address\n           \
    \ N/A (PDAU).\n      Requested Delivery Method\n            N/A (local).  The\
    \ services required must be dealt with at\n            submission time.  Any such\
    \ request is made available through\n            the gateway by use of a comment\
    \ associated with the\n            recipient in question.\n      Return of Content\n\
    \            In principle, this is N/A, as non-delivery notifications are\n  \
    \          not supported.  In practice, most RFC 822 systems will\n          \
    \  return part or all of the content along with the IP Message\n            indicating\
    \ an error (see Non-delivery Notification).\n      Sensitivity Indication\n  \
    \          Supported as new RFC 822 header (Sensitivity:).\n      Special Delivery\n\
    \            N/A (PDAU).\n      Stored Message Deletion\n            N/A (MS).\n\
    \      Stored Message Fetching\n            N/A (MS).\n      Stored Message Listing\n\
    \            N/A (MS).\n      Stored Message Summary\n            N/A (MS).\n\
    \      Subject Indication\n            Supported.\n      Undeliverable Mail with\
    \ Return of Physical Message\n            N/A (PDAU).\n      Use of Distribution\
    \ List\n            In principle this applies only to X.400 supported\n      \
    \      distribution lists (see DL Expansion Prohibited).\n            Theoretically,\
    \ this service is N/A (prior).  In practice,\n            because of informal\
    \ RFC 822 lists, this service can be\n            regarded as supported.\n"
- title: 2.3.2.  Reception by X.400
  contents:
  - '2.3.2.  Reception by X.400

    '
- title: 2.3.2.1.  Standard Mandatory Services
  contents:
  - "2.3.2.1.  Standard Mandatory Services\n   The following standard IPM mandatory\
    \ user facilities may be required\n   for reception of RFC 822 originated mail\
    \ by an X.400 UA.\n      Content Type Indication\n      Delivery Time Stamp Indication\n\
    \      IP Message Identification\n      Message Identification\n      Non-delivery\
    \ Notification\n      Original Encoded Information Types Indication\n      Submission\
    \ Time Stamp Indication\n      Typed Body\n"
- title: 2.3.2.2.  Standard Optional Services
  contents:
  - "2.3.2.2.  Standard Optional Services\n   The following standard IPM optional\
    \ user facilities may be required\n   for reception of RFC 822 originated mail\
    \ by an X.400 UA.\n      Authorising User's Indication\n      Blind Copy Recipient\
    \ Indication\n      Cross Referencing Indication\n      Originator Indication\n\
    \      Primary and Copy Recipients Indication\n      Replying IP Message Indication\n\
    \      Subject Indication\n"
- title: 2.3.2.3.  New Services
  contents:
  - "2.3.2.3.  New Services\n   A new service \"RFC 822 Header Field\" is defined\
    \ using the extension\n   facilities.  This allows for any RFC 822 header field\
    \ to be\n   represented.  It may be present in RFC 822 originated messages, which\n\
    \   are received by an X.400 UA.\n"
- title: Chapter 3 -- Basic Mappings
  contents:
  - 'Chapter 3 -- Basic Mappings

    '
- title: 3.1.  Notation
  contents:
  - "3.1.  Notation\n   The X.400 protocols are encoded in a structured manner according\
    \ to\n   ASN.1, whereas RFC 822 is text encoded.  To define a detailed\n   mapping,\
    \ it is necessary to refer to detailed protocol elements in\n   each format. \
    \ A notation to achieve this is described in this\n   section.\n"
- title: 3.1.1.  RFC 822
  contents:
  - "3.1.1.  RFC 822\n   Structured text is defined according to the Extended Backus\
    \ Naur Form\n   (EBNF) defined in Section 2 of RFC 822 [Crocker82a].  In the EBNF\n\
    \   definitions used in this specification, the syntax rules given in\n   Appendix\
    \ D of RFC 822 are assumed.  When these EBNF tokens are\n   referred to outside\
    \ an EBNF definition, they are identified by the\n   string \"822.\" appended\
    \ to the beginning of the string (e.g.,\n   822.addr-spec).  Additional syntax\
    \ rules, to be used throughout this\n   specification, are defined in this chapter.\n\
    \   The EBNF is used in two ways.\n      1.   To describe components of RFC 822\
    \ messages (or of 822-MTS\n           components).  In this case, the lexical\
    \ analysis defined in\n           Section 3 of RFC 822 should be used.  When these\
    \ new EBNF\n           tokens are referred to outside an EBNF definition, they\
    \ are\n           identified by the string \"EBNF.\" appended to the beginning\n\
    \           of the string (e.g., EBNF.bilateral-info).\n      2.   To describe\
    \ the structure of IA5 or ASCII information not in\n           an RFC 822 message.\
    \  In these cases, tokens will either be\n           self delimiting, or be delimited\
    \ by self delimiting tokens.\n           Comments and LWSP are not used as delimiters.\n"
- title: 3.1.2.  ASN.1
  contents:
  - "3.1.2.  ASN.1\n   An element is referred to with the following syntax, defined\
    \ in EBNF:\n      element         = service \".\" definition *( \".\" definition\
    \ )\n      service         = \"IPMS\" / \"MTS\" / \"MTA\"\n      definition  \
    \    = identifier / context\n      identifier      = ALPHA *< ALPHA or DIGIT or\
    \ \"-\" >\n      context         = \"[\" 1*DIGIT \"]\"\n   The EBNF.service keys\
    \ are shorthand for the following service\n   specifications:\n      IPMS IPMSInformationObjects\
    \ defined in Annex E of X.420 / ISO\n           10021-7.\n      MTS  MTSAbstractService\
    \ defined in Section 9 of X.411 / ISO\n           10021-4.\n      MTA  MTAAbstractService\
    \ defined in Section 13 of X.411 / ISO\n          10021-4.\n   The first EBNF.identifier\
    \ identifies a type or value key in the\n   context of the defined service specification.\
    \   Subsequent\n   EBNF.identifiers identify a value label or type in the context\
    \ of the\n   first identifier (SET or SEQUENCE).  EBNF.context indicates a context\n\
    \   tag, and is used where there is no label or type to uniquely identify\n  \
    \ a component.  The special EBNF.identifier keyword \"value\" is used to\n   denote\
    \ an element of a sequence.\n   For example, IPMS.Heading.subject defines the\
    \ subject element of the\n   IPMS heading.  The same syntax is also used to refer\
    \ to element\n   values.  For example, MTS.EncodedInformationTypes.[0].g3Fax refers\
    \ to\n   a value of MTS.EncodedInformationTypes.[0].\n"
- title: 3.2.  ASCII and IA5
  contents:
  - "3.2.  ASCII and IA5\n   A gateway will interpret all IA5 as ASCII.  Thus, mapping\
    \ between\n   these forms is conceptual.\n"
- title: 3.3.  Standard Types
  contents:
  - "3.3.  Standard Types\n   There is a need to convert between ASCII text, and some\
    \ of the types\n   defined in ASN.1 [CCITT/ISO88d].  For each case, an EBNF syntax\n\
    \   definition is given, for use in all of this specification, which\n   leads\
    \ to a mapping between ASN.1, and an EBNF construct.\n   All EBNF syntax definitions\
    \ of ASN.1 types are in lower case, whereas\n   ASN.1 types are referred to with\
    \ the first letter in upper case.\n   Except as noted, all mappings are symmetrical.\n"
- title: 3.3.1.  Boolean
  contents:
  - "3.3.1.  Boolean\n   Boolean is encoded as:\n      boolean = \"TRUE\" / \"FALSE\"\
    \n"
- title: 3.3.2.  NumericString
  contents:
  - "3.3.2.  NumericString\n   NumericString is encoded as:\n      numericstring =\
    \ *DIGIT\n"
- title: 3.3.3.  PrintableString
  contents:
  - "3.3.3.  PrintableString\n   PrintableString is a restricted IA5String defined\
    \ as:\n      printablestring  = *( ps-char )\n      ps-restricted-char      =\
    \ 1DIGIT /  1ALPHA / \" \" / \"'\" / \"+\"\n                         / \",\" /\
    \ \"-\" / \".\" / \"/\" / \":\" / \"=\" / \"?\"\n      ps-delim         = \"(\"\
    \ / \")\"\n      ps-char          = ps-delim / ps-restricted-char\n   This can\
    \ be used to represent real printable strings in EBNF.\n"
- title: 3.3.4.  T.61String
  contents:
  - "3.3.4.  T.61String\n   In cases where T.61 strings are only used for conveying\
    \ human\n   interpreted information, the aim of a mapping should be to render\
    \ the\n   characters appropriately in the remote character set, rather than to\n\
    \   maximise reversibility.  For these cases, the mappings to IA5 defined\n  \
    \ in CCITT Recommendation X.408 (1988) should be used [CCITT/ISO88a].\n   These\
    \ will then be encoded in ASCII.\n   There is also a need to represent Teletex\
    \ Strings in ASCII, for some\n   aspects of O/R Address.  For these, the following\
    \ encoding is used:\n      teletex-string   = *( ps-char / t61-encoded )\n   \
    \   t61-encoded      = \"{\" 1* t61-encoded-char \"}\"\n      t61-encoded-char\
    \ = 3DIGIT\n   Common characters are mapped simply.  Other octets are mapped using\
    \ a\n   quoting mechanism similar to the printable string mechanism.  Each\n \
    \  octet is represented as 3 decimal digits.\n   There are a number of places\
    \ where a string may have a Teletex and/or\n   Printable String representation.\
    \  The following BNF is used to\n   represent this.\n   teletex-and-or-ps = [\
    \ printablestring ] [ \"*\" teletex-string ]\n   The natural mapping is restricted\
    \ to EBNF.ps-char, in order to make\n   the full BNF easier to parse.\n"
- title: 3.3.5.  UTCTime
  contents:
  - "3.3.5.  UTCTime\n   Both UTCTime and the RFC 822 822.date-time syntax contain:\
    \  Year\n   (lowest two digits), Month, Day of Month, hour, minute, second\n \
    \  (optional), and Timezone.  822.date-time also contains an optional\n   day\
    \ of the week, but this is redundant.  Therefore a symmetrical\n   mapping can\
    \ be made between these constructs.\n   Note:\n        In practice, a gateway\
    \ will need to parse various illegal\n        variants on 822.date-time.  In cases\
    \ where 822.date-time\n        cannot be parsed, it is recommended that the derived\
    \ UTCTime\n        is set to the value at the time of translation.\n   The UTCTime\
    \ format which specifies the timezone offset should be\n   used.\n"
- title: 3.3.6.  Integer
  contents:
  - "3.3.6.  Integer\n   A basic ASN.1 Integer will be mapped onto EBNF.numericstring.\
    \  In many\n   cases ASN.1 will enumerate Integer values or use ENUMERATED.  An\
    \ EBNF\n   encoding labelled-integer is provided. When mapping from EBNF to\n\
    \   ASN.1, only the integer value is mapped, and the associated text is\n   discarded.\
    \  When mapping from ASN.1 to EBNF, addition of an\n   appropriate text label\
    \ is strongly encouraged.\n      labelled-integer ::= [ key-string ] \"(\" numericstring\
    \ \")\"\n      key-string      = *key-char\n      key-char        = <a-z, A-Z,\
    \ 1-9, and \"-\">\n"
- title: 3.3.7.  Object Identifier
  contents:
  - "3.3.7.  Object Identifier\n   Object identifiers are represented in a form similar\
    \ to that\n   given in ASN.1.  The numbers are mandatory, to ease encoding.\n\
    \   It is recommended that as many strings as possible are used, to\n   facilitate\
    \ user recognition.\n      object-identifier ::= [ defined-value ] oid-comp-list\n\
    \      oid-comp-list ::= oid-comp oid-comp-list\n                      | oid-comp\n\
    \      defined-value ::= key-string\n      oid-comp ::= [ key-string ] \"(\" numericstring\
    \ \")\"\n"
- title: 3.4.  Encoding ASCII in Printable String
  contents:
  - "3.4.  Encoding ASCII in Printable String\n   Some information in RFC 822 is represented\
    \ in ASCII, and needs to be\n   mapped into X.400 elements encoded as printable\
    \ string.  For this\n   reason, a mechanism to represent ASCII encoded as PrintableString\
    \ is\n   needed.\n   A structured subset of EBNF.printablestring is now defined.\
    \  This can\n   be used to encode ASCII in the PrintableString character set.\n\
    \      ps-encoded       = *( ps-restricted-char / ps-encoded-char )\n      ps-encoded-char\
    \  = \"(a)\"               ; (@)\n                       / \"(p)\"           \
    \    ; (%)\n                       / \"(b)\"               ; (!)\n           \
    \            / \"(q)\"               ; (\")\n                       / \"(u)\"\
    \               ; (_)\n                       / \"(l)\"               ; \"(\"\n\
    \                       / \"(r)\"               ; \")\"\n                    \
    \   / \"(\" 3DIGIT \")\"\n   The 822.3DIGIT in EBNF.ps-encoded-char must have\
    \ range 0-127, and is\n   interpreted in decimal as the corresponding ASCII character.\
    \  Special\n   encodings are given for: at sign (@), percent (%), exclamation\n\
    \   mark/bang (!), double quote (\"), underscore (_), left bracket ((),\n   and\
    \ right bracket ()).  These characters, with the exception of round\n   brackets,\
    \ are not included in PrintableString, but are common in RFC\n   822 addresses.\
    \  The abbreviations will ease specification of RFC 822\n   addresses from an\
    \ X.400 system.  These special encodings should be\n   mapped in a case insensitive\
    \ manner, but always be generated in lower\n   case.\n   A reversible mapping\
    \ between PrintableString and ASCII can now be\n   defined.  The reversibility\
    \ means that some values of printable\n   string (containing round braces) cannot\
    \ be generated from ASCII.\n   Therefore, this mapping must only be used in cases\
    \ where the\n   printable strings may only be derived from ASCII (and will therefore\n\
    \   have a restricted domain).  For example, in this specification, it is\n  \
    \ only applied to a Domain defined attribute which will have been\n   generated\
    \ by use of this specification and a value such as \"(\" would\n   not be possible.\n\
    \   To encode ASCII as PrintableString, the EBNF.ps-encoded syntax is\n   used,\
    \ with all EBNF.ps-restricted-char mapped directly.  All other\n   822.CHAR are\
    \ encoded as EBNF.ps-encoded-char.\n   To encode PrintableString as ASCII, parse\
    \ PrintableString as\n   EBNF.ps-encoded, and then reverse the previous mapping.\
    \  If the\n   PrintableString cannot be parsed, then the mapping is being applied\n\
    \   in to an inappropriate value, and an error should be given to the\n   procedure\
    \ doing the mapping. In some cases, it may be preferable to\n   pass the printable\
    \ string through unaltered.\n   Some examples are now given.  Note the arrows\
    \ which indicate\n   asymmetrical mappings:\n                   PrintableString\
    \           ASCII\n                   'a demo.'         <->   'a demo.'\n    \
    \               foo(a)bar         <->   foo@bar\n                   (q)(u)(p)(q)\
    \      <->   \"_%\"\n                   (a)               <->   @\n          \
    \         (A)               <->   @\n                   (l)a(r)           <->\
    \   (a)\n                   (126)             <->   ~\n                   (  \
    \                ->   (\n                   (l)               <->   (\n"
- title: Chapter 4 -- Addressing
  contents:
  - "Chapter 4 -- Addressing\n   Addressing is probably the trickiest problem of an\
    \ X.400 <-> RFC 822\n   gateway.  Therefore it is given a separate chapter.  This\
    \ chapter, as\n   a side effect, also defines a textual representation of an X.400\
    \ O/R\n   Address.\n   Initially, we consider an address in the (human) mail user\
    \ sense of\n   \"what is typed at the mailsystem to reference a mail user\". \
    \ A basic\n   RFC 822 address is defined by the EBNF EBNF.822-address:\n     \
    \           822-address     = [ route ] addr-spec\n   In an 822-MTS protocol,\
    \ the originator and each recipient should be\n   considered to be defined by\
    \ such a construct.  In an RFC 822 header,\n   the EBNF.822-address is encapsulated\
    \ in the 822.address syntax rule,\n   and there may also be associated comments.\
    \  None of this extra\n   information has any semantics, other than to the end\
    \ user.\n   The basic X.400 O/R Address, used by the MTS for routing, is defined\n\
    \   by MTS.ORAddress.  In IPMS, the MTS.ORAddress is encapsulated within\n   IPMS.ORDescriptor.\n\
    \   It can be seen that RFC 822 822.address must be mapped with\n   IPMS.ORDescriptor,\
    \ and that RFC 822 EBNF.822-address must be mapped\n   with MTS.ORAddress.\n"
- title: 4.1.  A textual representation of MTS.ORAddress
  contents:
  - "4.1.  A textual representation of MTS.ORAddress\n   MTS.ORAddress is structured\
    \ as a set of attribute value pairs.  It is\n   clearly necessary to be able to\
    \ encode this in ASCII for gatewaying\n   purposes.  All aspects should be encoded,\
    \ in order to guarantee\n   return of error messages, and to optimise third party\
    \ replies.\n"
- title: 4.2.  Basic Representation
  contents:
  - "4.2.  Basic Representation\n   An O/R Address has a number of structured and\
    \ unstructured\n   attributes.  For each unstructured attribute, a key and an\
    \ encoding\n   is specified.  For structured attributes, the X.400 attribute is\n\
    \   mapped onto one or more attribute value pairs.  For domain defined\n   attributes,\
    \ each element of the sequence will be mapped onto a triple\n   (key and two values),\
    \ with each value having the same encoding.  The\n   attributes are as follows,\
    \ with 1984 attributes given in the first\n   part of the table.  For each attribute,\
    \ a reference is given,\n   consisting of the relevant sections in X.402 / ISO\
    \ 10021-2, and the\n   extension identifier for 88 only attributes:\n"
- title: Attribute (Component)               Key            Enc     Ref       Id
  contents:
  - 'Attribute (Component)               Key            Enc     Ref       Id

    '
- title: 84/88 Attributes
  contents:
  - '84/88 Attributes

    '
- title: MTS.CountryName                     C              P       18.3.3
  contents:
  - 'MTS.CountryName                     C              P       18.3.3

    '
- title: MTS.AdministrationDomainName        ADMD           P       18.3.1
  contents:
  - 'MTS.AdministrationDomainName        ADMD           P       18.3.1

    '
- title: MTS.PrivateDomainName               PRMD           P       18.3.21
  contents:
  - 'MTS.PrivateDomainName               PRMD           P       18.3.21

    '
- title: MTS.NetworkAddress                  X121           N       18.3.7
  contents:
  - 'MTS.NetworkAddress                  X121           N       18.3.7

    '
- title: MTS.TerminalIdentifier              T-ID           N       18.3.23
  contents:
  - 'MTS.TerminalIdentifier              T-ID           N       18.3.23

    '
- title: MTS.OrganizationName                O              P/T     18.3.9
  contents:
  - 'MTS.OrganizationName                O              P/T     18.3.9

    '
- title: MTS.OrganizationalUnitNames.value   OU             P/T     18.3.10
  contents:
  - 'MTS.OrganizationalUnitNames.value   OU             P/T     18.3.10

    '
- title: MTS.NumericUserIdentifier           UA-ID          N       18.3.8
  contents:
  - 'MTS.NumericUserIdentifier           UA-ID          N       18.3.8

    '
- title: MTS.PersonalName                    PN             P/T     18.3.12
  contents:
  - 'MTS.PersonalName                    PN             P/T     18.3.12

    '
- title: MTS.PersonalName.surname            S              P/T     18.3.12
  contents:
  - 'MTS.PersonalName.surname            S              P/T     18.3.12

    '
- title: MTS.PersonalName.given-name         G              P/T     18.3.12
  contents:
  - 'MTS.PersonalName.given-name         G              P/T     18.3.12

    '
- title: MTS.PersonalName.initials           I              P/T     18.3.12
  contents:
  - 'MTS.PersonalName.initials           I              P/T     18.3.12

    '
- title: MTS.PersonalName
  contents:
  - "MTS.PersonalName\n   .generation-qualifier            GQ             P/T    \
    \ 18.3.12\n"
- title: MTS.DomainDefinedAttribute.value    DD             P/T     18.1
  contents:
  - 'MTS.DomainDefinedAttribute.value    DD             P/T     18.1

    '
- title: 88 Attributes
  contents:
  - '88 Attributes

    '
- title: MTS.CommonName                      CN             P/T     18.3.2    1
  contents:
  - 'MTS.CommonName                      CN             P/T     18.3.2    1

    '
- title: MTS.TeletexCommonName               CN             P/T     18.3.2    2
  contents:
  - 'MTS.TeletexCommonName               CN             P/T     18.3.2    2

    '
- title: MTS.TeletexOrganizationName         O              P/T     18.3.9    3
  contents:
  - 'MTS.TeletexOrganizationName         O              P/T     18.3.9    3

    '
- title: MTS.TeletexPersonalName             PN             P/T     18.3.12   4
  contents:
  - 'MTS.TeletexPersonalName             PN             P/T     18.3.12   4

    '
- title: MTS.TeletexPersonalName.surname     S              P/T     18.3.12   4
  contents:
  - 'MTS.TeletexPersonalName.surname     S              P/T     18.3.12   4

    '
- title: MTS.TeletexPersonalName.given-name  G              P/T     18.3.12   4
  contents:
  - 'MTS.TeletexPersonalName.given-name  G              P/T     18.3.12   4

    '
- title: MTS.TeletexPersonalName.initials    I              P/T     18.3.12   4
  contents:
  - 'MTS.TeletexPersonalName.initials    I              P/T     18.3.12   4

    '
- title: MTS.TeletexPersonalName
  contents:
  - "MTS.TeletexPersonalName\n   .generation-qualifier            GQ             P/T\
    \     18.3.12   4\n"
- title: MTS.TeletexOrganizationalUnitNames
  contents:
  - "MTS.TeletexOrganizationalUnitNames\n   .value                           OU  \
    \           P/T     18.3.10   5\n"
- title: MTS.TeletexDomainDefinedAttribute
  contents:
  - "MTS.TeletexDomainDefinedAttribute\n   .value                           DD   \
    \          P/T     18.1      6\n"
- title: MTS.PDSName                         PD-SYSTEM      P       18.3.11   7
  contents:
  - 'MTS.PDSName                         PD-SYSTEM      P       18.3.11   7

    '
- title: MTS.PhysicalDeliveryCountryName     PD-C           P       18.3.13   8
  contents:
  - 'MTS.PhysicalDeliveryCountryName     PD-C           P       18.3.13   8

    '
- title: MTS.PostalCode                      POSTCODE       P       18.3.19   9
  contents:
  - 'MTS.PostalCode                      POSTCODE       P       18.3.19   9

    '
- title: MTS.PhysicalDeliveryOfficeName      PD-OFFICE      P/T     18.3.14  10
  contents:
  - 'MTS.PhysicalDeliveryOfficeName      PD-OFFICE      P/T     18.3.14  10

    '
- title: MTS.PhysicalDeliveryOfficeNumber    PD-OFFICE-NUM  P/T     18.3.15  11
  contents:
  - 'MTS.PhysicalDeliveryOfficeNumber    PD-OFFICE-NUM  P/T     18.3.15  11

    '
- title: MTS.ExtensionORAddressComponents    PD-EXT-D       P/T     18.3.4   12
  contents:
  - 'MTS.ExtensionORAddressComponents    PD-EXT-D       P/T     18.3.4   12

    '
- title: MTS.PhysicalDeliveryPersonName      PD-PN          P/T     18.3.17  13
  contents:
  - 'MTS.PhysicalDeliveryPersonName      PD-PN          P/T     18.3.17  13

    '
- title: MTS.PhysicalDelivery                PD-O           P/T     18.3.16  14
  contents:
  - "MTS.PhysicalDelivery                PD-O           P/T     18.3.16  14\n   OrganizationName\n"
- title: MTS.ExtensionPhysicalDelivery
  contents:
  - "MTS.ExtensionPhysicalDelivery\n   AddressComponents                PD-EXT-LOC\
    \     P/T     18.3.5   15\n"
- title: MTS.UnformattedPostalAddress        PD-ADDRESS     P/T     18.3.25  16
  contents:
  - 'MTS.UnformattedPostalAddress        PD-ADDRESS     P/T     18.3.25  16

    '
- title: MTS.StreetAddress                   STREET         P/T     18.3.22  17
  contents:
  - 'MTS.StreetAddress                   STREET         P/T     18.3.22  17

    '
- title: MTS.PostOfficeBoxAddress            PO-BOX         P/T     18.3.18  18
  contents:
  - 'MTS.PostOfficeBoxAddress            PO-BOX         P/T     18.3.18  18

    '
- title: MTS.PosteRestanteAddress            POSTE-RESTANTE P/T     18.3.20  19
  contents:
  - 'MTS.PosteRestanteAddress            POSTE-RESTANTE P/T     18.3.20  19

    '
- title: MTS.UniquePostalName                PD-UNIQUE      P/T     18.3.26  20
  contents:
  - 'MTS.UniquePostalName                PD-UNIQUE      P/T     18.3.26  20

    '
- title: MTS.LocalPostalAttributes           PD-LOCAL       P/T     18.3.6   21
  contents:
  - 'MTS.LocalPostalAttributes           PD-LOCAL       P/T     18.3.6   21

    '
- title: MTS.ExtendedNetworkAddress
  contents:
  - "MTS.ExtendedNetworkAddress\n   .e163-4-address.number           NET-NUM     \
    \   N       18.3.7   22\n"
- title: MTS.ExtendedNetworkAddress
  contents:
  - "MTS.ExtendedNetworkAddress\n   .e163-4-address.sub-address      NET-SUB     \
    \   N       18.3.7   22\n"
- title: MTS.ExtendedNetworkAddress
  contents:
  - "MTS.ExtendedNetworkAddress\n  .psap-address                     NET-PSAP    \
    \   X       18.3.7   22\n"
- title: MTS.TerminalType                    NET-TTYPE      I       18.3.24  23
  contents:
  - "MTS.TerminalType                    NET-TTYPE      I       18.3.24  23\n   The\
    \ following keys identify different EBNF encodings, which are\n   associated with\
    \ the ASCII representation of MTS.ORAddress.\n                 Key         Encoding\n\
    \                 P     printablestring\n                 N     numericstring\n\
    \                 T     teletex-string\n                 P/T   teletex-and-or-ps\n\
    \                 I     labelled-integer\n                 X     presentation-address\n\
    \   The BNF for presentation-address is taken from the specification \"A\n   String\
    \ Encoding of Presentation Address\" [Kille89a].\n   In most cases, the EBNF encoding\
    \ maps directly to the ASN.1 encoding\n   of the attribute.  There are a few exceptions.\
    \ In cases where an\n   attribute can be encoded as either a PrintableString or\
    \ NumericString\n   (Country, ADMD, PRMD), either form should be mapped into the\
    \ BNF.\n   When generating ASN.1, the NumericString encoding should be used if\n\
    \   the string contains only digits.\n   There are a number of cases where the\
    \ P/T (teletex-and-or-ps)\n   representation is used.  Where the key maps to a\
    \ single attribute,\n   this choice is reflected in the encoding of the attribute\
    \ (attributes\n   10-21).  For most of the 1984 attributes and common name, there\
    \ is a\n   printablestring and a teletex variant.   This pair of attributes is\n\
    \   mapped onto the single component here.  This will give a clean\n   mapping\
    \ for the common cases where only one form of the name is used.\n"
- title: 4.2.1.  Encoding of Personal Name
  contents:
  - "4.2.1.  Encoding of Personal Name\n   Handling of Personal Name and Teletex Personal\
    \ Name based purely on\n   the EBNF.standard-type syntax defined above is likely\
    \ to be clumsy.\n   It seems desirable to utilise the \"human\" conventions for\
    \ encoding\n   these components.  A syntax is defined, which is designed to provide\n\
    \   a clean encoding for the common cases of O/R address specification\n   where:\n\
    \      1.   There is no generational qualifier\n      2.   Initials contain only\
    \ letters\n      3.   Given Name does not contain full stop (\".\"), and is at\
    \ least\n           two characters long.\n      4.   If Surname contains full\
    \ stop, then it may not be in the\n           first two characters, and either\
    \ initials or given name is\n           present.\n   The following EBNF is defined:\n\
    \                encoded-pn      = [ given \".\" ] *( initial \".\" ) surname\n\
    \                given           = 2*<ps-char not including \".\">\n         \
    \       initial         = ALPHA\n                surname         = printablestring\n\
    \   This can be used to map from any string containing only printable\n   string\
    \ characters to an O/R address personal name. Parse the string\n   according to\
    \ the EBNF.  The given name and surname are assigned\n   directly.  All EBNF.initial\
    \ tokens are concatenated without\n   intervening full stops to generate the initials.\n\
    \   For an O/R address which follows the above restrictions, a string can\n  \
    \ be derived in the natural manner.  In this case, the mapping will be\n   reversible.\n\
    \        For example:\n                GivenName       = \"Marshall\"\n      \
    \          Surname         = \"Rose\"\n                Maps with  \"Marshall.Rose\"\
    \n                Initials        = \"MT\"\n                Surname         =\
    \ \"Rose\"\n                Maps with  \"M.T.Rose\"\n                GivenName\
    \       = \"Marshall\"\n                Initials        = \"MT\"\n           \
    \     Surname         = \"Rose\"\n                Maps with  \"Marshall.M.T.Rose\"\
    \n   Note that X.400 suggest that Initials is used to encode ALL initials.\n \
    \  Therefore, the proposed encoding is \"natural\" when either GivenName\n   or\
    \ Initials, but not both, are present.  The case where both are\n   present can\
    \ be encoded, but this appears to be contrived!\n"
- title: 4.2.2.  Standard Encoding of MTS.ORAddress
  contents:
  - "4.2.2.  Standard Encoding of MTS.ORAddress\n   Given this structure, we can specify\
    \ a BNF representation of an O/R\n   Address.\n                std-or-address\
    \  = 1*( \"/\" attribute \"=\" value ) \"/\"\n                attribute      \
    \ = standard-type\n                                / \"RFC-822\"\n           \
    \                     / registered-dd-type\n                                /\
    \ dd-key \".\" std-printablestring\n                standard-type   = key-string\n\
    \                registered-dd-type\n                                = key-string\n\
    \                dd-key          = key-string\n                value         \
    \  = std-printablestring\n                std-printablestring\n              \
    \                  = *( std-char / std-pair )\n                std-char      \
    \  = <\"{\", \"}\", \"*\", and any ps-char\n                                 \
    \               except \"/\" and \"=\">\n                std-pair        = \"\
    $\" ps-char\n   The standard-type is any key defined in the table in Section 4.2,\n\
    \   except PN, and DD.  The value, after quote removal, should be\n   interpreted\
    \ according to the defined encoding.\n   If the standard-type is PN, the value\
    \ is interpreted according to\n   EBNF.encoded-pn, and the components of MTS.PersonalName\
    \ and/or\n   MTS.TeletexPersonalName derived accordingly.\n   If dd-key is the\
    \ recognised Domain Defined string (DD), then the type\n   and value should be\
    \ interpreted according to the syntax implied from\n   the encoding, and aligned\
    \ to either the teletex or printable string\n   form.  Key and value should have\
    \ the same encoding.\n   If value is \"RFC-822\", then the (printable string)\
    \ Domain Defined\n   Type of \"RFC-822\" is assumed.  This is an optimised encoding\
    \ of the\n   domain defined type defined by this specification.\n   The matching\
    \ of all keywords should be done in a case- independent\n   manner.\n   If the\
    \ value is registered-dd-type, the value is registered with the\n   IANA and will\
    \ be listed in the Assigned Numbers RFC, then the value\n   should be interpreted\
    \ accordingly.  This restriction maximises the\n   syntax checking which can be\
    \ done at a gateway.\n"
- title: 4.3.  EBNF.822-address <-> MTS.ORAddress
  contents:
  - "4.3.  EBNF.822-address <-> MTS.ORAddress\n   Ideally, the mapping specified would\
    \ be entirely symmetrical and\n   global, to enable addresses to be referred to\
    \ transparently in the\n   remote system, with the choice of gateway being left\
    \ to the Message\n   Transfer Service.  There are two fundamental reasons why\
    \ this is not\n   possible:\n      1.   The syntaxes are sufficiently different\
    \ to make this\n           awkward.\n      2.   In the general case, there would\
    \ not be the necessary\n           administrative co-operation between the X.400\
    \ and RFC 822\n           worlds, which would be needed for this to work.\n  \
    \ Therefore, an asymmetrical mapping is defined, which can be\n   symmetrical\
    \ where there is appropriate administrative control.\n"
- title: 4.3.1.  X.400 encoded in RFC 822
  contents:
  - "4.3.1.  X.400 encoded in RFC 822\n   The std-or-address syntax is  used to encode\
    \ O/R Address information\n   in the 822.local-part of EBNF.822-address.  Further\
    \ O/R Address\n   information may be associated with the 822.domain component.\
    \  This\n   cannot be used in the general case, basically due to character set\n\
    \   problems, and lack of order in X.400 O/R Addresses.  The only way to\n   encode\
    \ the full PrintableString character set in a domain is by use\n   of the 822.domain-ref\
    \ syntax (i.e., 822.atom).  This is likely to\n   cause problems on many systems.\
    \  The effective character set of\n   domains is in practice reduced from the\
    \ RFC 822 set, by restrictions\n   imposed by domain conventions and policy.\n\
    \   A generic 822.address consists of a 822.local-part and a sequence of\n   822.domains\
    \ (e.g., <@domain1,@domain2:user@domain3>).  All except the\n   822.domain associated\
    \ with the 822.local-part (domain3 in this case)\n   should be considered to specify\
    \ routing within the RFC 822 world, and\n   will not be interpreted by the gateway\
    \ (although they may have\n   identified the gateway from within the RFC 822 world).\n\
    \      This form of source routing is now discouraged in the Internet\n      (Host\
    \ Requirements, page 58 [Braden89a]).\n   The 822.domain associated with the 822.local-part\
    \ may also identify\n   the gateway from within the RFC 822 world.  This final\
    \ 822.domain may\n   be used to determine some number of O/R Address attributes.\
    \  The\n   following O/R Address attributes are considered as a hierarchy, and\n\
    \   may be specified by the domain.  They are (in order of hierarchy):\n     \
    \ Country, ADMD, PRMD, Organisation, Organisational Unit\n      There may be multiple\
    \ Organisational Units.\n      Associations may be defined between domain specifications,\
    \ and\n      some set of attributes.  This association proceeds hierarchically.\n\
    \      For example, if a domain implies ADMD, it also implies country.\n     \
    \ Subdomains under this are associated according to the O/R Address\n      hierarchy.\
    \  For example:\n      => \"AC.UK\" might be associated with\n      C=\"GB\",\
    \ ADMD=\"GOLD 400\", PRMD=\"UK.AC\"\n      then domain \"R-D.Salford.AC.UK\" maps\
    \ with\n      C=\"GB\", ADMD=\"GOLD 400\", PRMD=\"UK.AC\", O=\"Salford\", OU=\"\
    R-D\"\n      There are three basic reasons why a domain/attribute mapping might\n\
    \      be maintained, as opposed to using simply subdomains:\n      1.   As a\
    \ shorthand to avoid redundant X.400 information.  In\n           particular,\
    \ there will often be only one ADMD per country,\n           and so it does not\
    \ need to be given explicitly.\n      2.   To deal with cases where attribute\
    \ values do not fit the\n           syntax:\n              domain-syntax   = alphanum\
    \ [ *alphanumhyphen alphanum ]\n              alphanum        = <ALPHA or DIGIT>\n\
    \              alphanumhyphen  = <ALPHA or DIGIT or HYPHEN>\n           Although\
    \ RFC 822 allows for a more general syntax, this\n           restricted syntax\
    \ is chosen as it is the one chosen by the\n           various domain service\
    \ administrations.\n      3.   To deal with missing elements in the hierarchy.\
    \  A domain\n           may be associated with an omitted attribute in conjunction\n\
    \           with several present ones.  When performing the algorithmic\n    \
    \       insertion of components lower in the hierarchy, the omitted\n        \
    \   value should be skipped.  For example, if \"HNE.EGM\" is\n           associated\
    \ with \"C=TC\", \"ADMD=ECQ\", \"PRMD=HNE\", and omitted\n           organisation,\
    \ then \"ZI.HNE.EGM\" is mapped with \"C=TC\",\n           \"ADMD=ECQ\", \"PRMD=HNE\"\
    , \"OU=ZI\". It should be noted that\n           attributes may have null values,\
    \ and that this is treated\n           separately from omitted attributes (whilst\
    \ it would be bad\n           practice to treat these two cases differently, they\
    \ must be\n           allowed for).\n   This set of mappings need only be known\
    \ by the gateways relaying\n   between the RFC 822 world, and the O/R Address\
    \ space associated with\n   the mapping in question.  However, it is desirable\
    \ (for the optimal\n   mapping of third party addresses) for all gateways to know\
    \ these\n   mappings.  A format for the exchange of this information is defined\n\
    \   in Appendix F.\n   The remaining attributes are encoded on the LHS, using\
    \ the EBNF.std-\n   or-address syntax.  For example:\n                /I=J/S=Linnimouth/GQ=5/@Marketing.Widget.COM\n\
    \   encodes the MTS.ORAddress consisting of:\n                MTS.CountryName\
    \                       = \"TC\"\n                MTS.AdministrationDomainName\
    \          = \"BTT\"\n                MTS.OrganizationName                  =\
    \ \"Widget\"\n                MTS.OrganizationalUnitNames.value     = \"Marketing\"\
    \n                MTS.PersonalName.surname              = \"Linnimouth\"\n   \
    \             MTS.PersonalName.initials             = \"J\"\n                MTS.PersonalName.generation-qualifier\
    \ = \"5\"\n   The first three attributes are determined by the domain Widget.COM.\n\
    \   Then, the first element of OrganizationalUnitNames is determined\n   systematically,\
    \ and the remaining attributes are encoded on the LHS.\n   In an extreme case,\
    \ all of the attributes will be on the LHS.  As the\n   domain cannot be null,\
    \ the RHS will simply be a domain indicating the\n   gateway.\n   The RHS (domain)\
    \ encoding is designed to deal cleanly with common\n   addresses, and so the amount\
    \ of information on the RHS should be\n   maximised.  In particular, it covers\
    \ the Mnemonic O/R Address using a\n   1984 compatible encoding.  This is seen\
    \ as the dominant form of O/R\n   Address.  Use of other forms of O/R Address,\
    \ and teletex encoded\n   attributes will require an LHS encoding.\n   There is\
    \ a further mechanism to simplify the encoding of common\n   cases, where the\
    \ only attributes to be encoded on the LHS is a (non-\n   Teletex) Personal Name\
    \ attributes which comply with the restrictions\n   of 4.2.1.  To achieve this,\
    \ the 822.local-part shall be encoded as\n   EBNF.encoded-pn.  In the previous\
    \ example, if the GenerationQualifier\n   was not present, the encoding J.Linnimouth@Marketing.Widget.COM\
    \ would\n   result.\n   From the standpoint of the RFC 822 Message Transfer System,\
    \ the\n   domain specification is simply used to route the message in the\n  \
    \ standard manner.  The standard domain mechanisms are are used to\n   select\
    \ appropriate gateways for the corresponding O/R Address space.\n   In most cases,\
    \ this will be done by registering the higher levels,\n   and assuming that the\
    \ gateway can handle the lower levels.\n"
- title: 4.3.2.  RFC 822 encoded in X.400
  contents:
  - "4.3.2.  RFC 822 encoded in X.400\n   In some cases, the encoding defined above\
    \ may be reversed, to give a\n   \"natural\" encoding of genuine RFC 822 addresses.\
    \  This depends\n   largely on the allocation of appropriate management domains.\n\
    \   The general case is mapped by use of domain defined attributes.  A\n   Domain\
    \ defined type \"RFC-822\" is defined.  The associated attribute\n   value is\
    \ an ASCII string encoded according to Section 3.3.3 of this\n   specification.\
    \  The interpretation of the ASCII string depends on the\n   context of the gateway.\n\
    \      1.   In the context of RFC 822, and RFC 1034\n           [Crocker82a, Mockapetris87a],\
    \ the string can be used\n           directly.\n      2.   In the context of the\
    \ JNT Mail protocol, and the NRS\n           [Kille84a, Larmouth83a], the string\
    \ should be interpreted\n           according to Mailgroup Note 15 [Kille84b].\n\
    \      3.   In the context of UUCP based systems, the string should be\n     \
    \      interpreted as defined in [Horton86a].\n   Other O/R Address attributes\
    \ will be used to identify a context in\n   which the O/R Address will be interpreted.\
    \  This might be a\n   Management Domain, or some part of a Management Domain\
    \ which\n   identifies a gateway MTA.  For example:\n                C       \
    \        = \"GB\"\n                ADMD            = \"GOLD 400\"\n          \
    \      PRMD            = \"UK.AC\"\n                O               = \"UCL\"\n\
    \                OU              = \"CS\"\n                \"RFC-822\"      =\
    \  \"Jimmy(a)WIDGET-LABS.CO.UK\"\n        OR\n                C              \
    \ = \"TC\"\n                ADMD            = \"Wizz.mail\"\n                PRMD\
    \            = \"42\"\n                \"rfc-822\"       = \"Postel(a)venera.isi.edu\"\
    \n   Note in each case the PrintableString encoding of \"@\" as \"(a)\".  In\n\
    \   the second example, the \"RFC-822\" domain defined attribute is\n   interpreted\
    \ everywhere within the (Private) Management Domain.  In\n   the first example,\
    \ further attributes are needed within the\n   Management Domain to identify a\
    \ gateway.  Thus, this scheme can be\n   used with varying levels of Management\
    \ Domain co-operation.\n"
- title: 4.3.3.  Component Ordering
  contents:
  - "4.3.3.  Component Ordering\n   In most cases, ordering of O/R Address components\
    \ is not significant\n   for the mappings specified.  However, Organisational\
    \ Units (printable\n   string and teletex forms) and Domain Defined Attributes\
    \ are specified\n   as SEQUENCE in MTS.ORAddress, and so their order may be significant.\n\
    \   This specification needs to take account of this:\n      1.   To allow consistent\
    \ mapping into the domain hierarchy\n      2.   To ensure preservation of order\
    \ over multiple mappings.\n   There are three places where an order must be specified:\n\
    \      1.   The text encoding (std-or-address) of MTS.ORAddress as used\n    \
    \       in the local-part of an RFC 822 address.  An order is needed\n       \
    \    for those components which may have multiple values\n           (Organisational\
    \ Unit, and Domain Defined Attributes). When\n           generating an 822.std-or-address,\
    \ components of a given type\n           shall be in hierarchical order with the\
    \ most significant\n           component on the RHS.  If there is an Organisation\n\
    \           Attribute, it shall be to the right of any Organisational\n      \
    \     Unit attributes.  These requirements are for the following\n           reasons:\n\
    \           -    Alignment to the hierarchy of other components in RFC\n     \
    \           822 addresses (thus, Organisational Units will appear\n          \
    \      in the same order, whether encoded on the RHS or LHS).\n              \
    \  Note the differences of JNT Mail as described in\n                Appendix\
    \ B.\n           -    Backwards compatibility with RFC 987/1026.\n           -\
    \    To ensure that gateways generate consistent addresses.\n                This\
    \ is both to help end users, and to generate\n                identical message\
    \ ids.\n           Further, it is recommended that all other attributes are\n\
    \           generated according to this ordering, so that all attributes\n   \
    \        so encoded follow a consistent hierarchy.\n           There will be some\
    \ cases where an X.400 O/R address of this\n           encoding will be generated\
    \ by an end user from external\n           information.  The ordering of attributes\
    \ may be inverted or\n           mixed.  For this reason, the following heuristics\
    \ may be\n           applied:\n           -    If there is an Organisation attribute\
    \ to the left of\n                any Org Unit attribute, assume that the hierarchy\
    \ is\n                inverted.\n           -    If an inversion of the Org Unit\
    \ hierarchy generates a\n                valid address, when the preferred order\
    \ does not,\n                assume that the hierarchy is inverted.\n      2.\
    \   For the Organisational Units (OU) in MTS.ORAddress, the\n           first\
    \ OU in the SEQUENCE is the most significant, as\n           specified in X.400.\n\
    \      3.   For the Domain Defined Attributes in MTS.ORAddress, the\n        \
    \   First Domain Defined Attribute in the SEQUENCE is the most\n           significant.\n\
    \           Note that although this ordering is mandatory for this\n         \
    \  mapping, there are NO implications on ordering significance\n           within\
    \ X.400, where this is a Management Domain issue.\n"
- title: 4.3.4.  RFC 822 -> X.400
  contents:
  - "4.3.4.  RFC 822 -> X.400\n   There are two basic cases:\n      1.   X.400 addresses\
    \ encoded in RFC 822.  This will also include\n           RFC 822 addresses which\
    \ are given reversible encodings.\n      2.   \"Genuine\" RFC 822 addresses.\n\
    \   The mapping should proceed as follows, by first assuming case 1).\n   STAGE\
    \ I.\n   1.   If the 822-address is not of the form:\n                local-part\
    \ \"@\" domain\n        Go to stage II.\n   NOTE:It may be appropriate to reduce\
    \ a source route address\n        to this form by removal of all bar the last\
    \ domain.  In\n        terms of the design intentions of RFC 822, this would\n\
    \        be an incorrect action.  However, in most real cases,\n        it will\
    \ do the \"right\" thing and provide a better\n        service to the end user.\
    \  This is a reflection on the\n        excessive and inappropriate use of source\
    \ routing in\n        RFC 822 based systems.  Either approach, or the\n      \
    \  intermediate approach of stripping only domain\n        references which reference\
    \ the local gateway are\n        conformant to this specification.\n   2.   Attempt\
    \ to parse EBNF.domain as:\n                *( domain-syntax \".\" ) known-domain\n\
    \        Where EBNF.known-domain is the longest possible match in a\n        list\
    \ of supported mappings (see Appendix F).  If this fails,\n        and the EBNF.domain\
    \ does not explicitly identify the local\n        gateway, go to stage II.  If\
    \ it succeeds, allocate the\n        attributes associated with EBNF.known-domain,\
    \ and\n        systematically allocate the attributes implied by each\n      \
    \  EBNF.domain-syntax component.  If the domain explicitly\n        identifies\
    \ the gateway, allocate no attributes.\n   3.   If the local-part contains any\
    \ characters not in\n        PrintableString, go to stage II.\n   4.   If the\
    \ 822.local-part uses the 822.quoted-string encoding,\n        remove this quoting.\
    \  Parse the (unquoted) 822.local-part\n        according to the EBNF EBNF.std-or-address.\
    \  If this parse\n        fails, parse the local-part according to the EBNF\n\
    \        EBNF.encoded-pn.  The result is a set of type/value pairs.\n        If\
    \ the values generated conflict with those derived in step\n        2 (e.g., a\
    \ duplicated country attribute), the domain should\n        be assumed to be an\
    \ RFC 987 gateway.  In this case, take\n        only the LHS derived attributes.\
    \  Otherwise add LHS and RHS\n        derived attributes together.\n   5.   Associate\
    \ the EBNF.attribute-value syntax (determined from\n        the identified type)\
    \ with each value, and check that it\n        conforms.  If not, go to stage II.\n\
    \   6.   Ensure that the set of attributes conforms both to the\n        MTS.ORAddress\
    \ specification and to the restrictions on this\n        set given in X.400. \
    \ If not go to stage II.\n   7.   Build the O/R Address from this information.\n\
    \   STAGE II.\n   This will only be reached if the RFC 822 EBNF.822-address is\
    \ not\n   a valid X.400 encoding.  If the address is an 822-MTS recipient\n  \
    \ address, it must be rejected, as there is a need to interpret\n   such an address\
    \ in X.400.  For the 822-MTS return address, and\n   any addresses in the RFC\
    \ 822 header, they should now be encoded\n   as RFC 822 addresses in an X.400\
    \ O/R Name:\n   1.   Convert the EBNF.822-address to PrintableString, as\n   \
    \     specified in Chapter 3.\n   2.   The \"RFC-822\" domain defined attribute\
    \ should be generated\n        from this string.\n   3.   Build the rest of the\
    \ O/R Address in the local Management\n        Domain agreed manner, so that the\
    \ O/R Address will receive a\n        correct global interpretation.\n   Note\
    \ that the domain defined attribute value has a maximum length\n   of MTS.ub-domain-defined-attribute-value-length\
    \ (128).  If this\n   is exceeded by a mapping at the MTS level, then the gateway\n\
    \   should reject the message in question.  If this occurs at the\n   IPMS level,\
    \ then the action should depend on the policy being\n   taken, which is discussed\
    \ in Section 5.1.3.\n"
- title: 4.3.5.  X.400 -> RFC 822
  contents:
  - "4.3.5.  X.400 -> RFC 822\n   There are two basic cases:\n   1.   RFC 822 addresses\
    \ encoded in X.400.\n   2.   \"Genuine\" X.400 addresses.  This may include symmetrically\n\
    \        encoded RFC 822 addresses.\n   When a MTS Recipient O/R Address is interpreted,\
    \ gatewaying will be\n   selected if there a single \"RFC-822\" domain defined\
    \ attribute\n   present.  In this case, use mapping A.  For other O/R Addresses\n\
    \   which:\n   1.   Contain the special attribute.\n        AND\n   2.   Identifies\
    \ the local gateway or any other known gateway with\n        the other attributes.\n\
    \   Use mapping A.  In other cases, use mapping B.\n   NOTE:\n        A pragmatic\
    \ approach would be to assume that any O/R\n        Address with the special domain\
    \ defined attribute identifies\n        an RFC 822 address.  This will usually\
    \ work correctly, but is\n        in principle not correct.\n   Mapping A\n  \
    \ 1.   Map the domain defined attribute value to ASCII, as defined\n        in\
    \ Chapter 3.\n   Mapping B\n   This will be used for X.400 addresses which do\
    \ not use the explicit\n   RFC 822 encoding.\n   1.   For all string encoded attributes,\
    \ remove any leading or\n        trailing spaces, and replace adjacent spaces\
    \ with a single\n        space.\n   2.   Noting the hierarchy specified in 4.3.1,\
    \ determine the\n        maximum set of attributes which have an associated domain\n\
    \        specification.  If no match is found, allocate the domain as\n      \
    \  the domain specification of the local gateway, and go to\n        step 4.\n\
    \   3.   Following the 4.3.1 hierarchy and noting any omitted\n        components\
    \ implied by the mapping tables (see Appendix F),\n        if each successive\
    \ component exists, and conforms to the\n        syntax EBNF.domain-syntax (as\
    \ defined in 4.3.1), allocate\n        the next subdomain.  At least one attribute\
    \ of the X.400\n        address should not be mapped onto subdomain, as\n    \
    \    822.local-part cannot be null.\n   4.   If the remaining components are personal-name\
    \ components,\n        conforming to the restrictions of 4.2.1, then EBNF.encoded-\n\
    \        pn should be derived to form 822.local-part.  In other cases\n      \
    \  the remaining components should simply be encoded as a\n        822.local-part\
    \ using the EBNF.std-or-address syntax.  If\n        necessary, the 822.quoted-string\
    \ encoding should be used.\n        If the derived 822.local-part can only be\
    \ encoded by use of\n        822.quoted-string, then use of the mapping defined\n\
    \        in [Kille89b] may be appropriate.  Use of this mapping is\n        discouraged.\n"
- title: 4.4.  Repeated Mappings
  contents:
  - "4.4.  Repeated Mappings\n   The mappings defined are symmetrical and reversible\
    \ across a single\n   gateway.  The symmetry is particularly useful in cases of\
    \ (mail\n   exploder type) distribution list expansion.  For example, an X.400\n\
    \   user sends to a list on an RFC 822 system which he belongs to.  The\n   received\
    \ message will have the originator and any 3rd party X.400 O/R\n   Addresses in\
    \ correct format (rather than doubly encoded).  In cases\n   (X.400 or RFC 822)\
    \ where there is common agreement on gateway\n   identification, then this will\
    \ apply to multiple gateways.\n   When a message traverses multiple gateways,\
    \ the mapping will always\n   be reversible, in that a reply can be generated\
    \ which will correctly\n   reverse the path.  In many cases, the mapping will\
    \ also be\n   symmetrical, which will appear clean to the end user.  For example,\n\
    \   if countries \"AB\" and \"XY\" have RFC 822 networks, but are\n   interconnected\
    \ by X.400, the following may happen:  The originator\n   specifies:\n       \
    \    Joe.Soap@Widget.PTT.XY\n   This is routed to a gateway, which generates:\n\
    \                C               = \"XY\"\n                ADMD            = \"\
    PTT\"\n                PRMD            = \"Griddle MHS Providers\"\n         \
    \       Organisation    = \"Widget Corporation\"\n                Surname    \
    \     = \"Soap\"\n                Given Name      = \"Joe\"\n   This is then routed\
    \ to another gateway where the mapping is reversed\n   to give:\n            \
    \    Joe.Soap@Widget.PTT.XY\n   Here, use of the gateway is transparent.\n   Mappings\
    \ will only be symmetrical where mapping tables are defined.\n   In other cases,\
    \ the reversibility is more important, due to the (far\n   too frequent) cases\
    \ where RFC 822 and X.400 services are partitioned.\n   The syntax may be used\
    \ to source route.  THIS IS STRONGLY\n   DISCOURAGED.  For example:\n      X.400\
    \ -> RFC 822  -> X.400\n      C             = \"UK\"\n      ADMD          = \"\
    Gold 400\"\n      PRMD          = \"UK.AC\"\n      \"RFC-822\"     = \"/PN=Duval/DD.Title=Manager/(a)Inria.ATLAS.FR\"\
    \n   This will be sent to an arbitrary UK Academic Community gateway by\n   X.400.\
    \  Then it will be sent by JNT Mail to another gateway\n   determined by the domain\
    \ Inria.ATLAS.FR (FR.ATLAS.Inria).  This will\n   then derive the X.400 O/R Address:\n\
    \      C             = \"FR\"\n      ADMD          = \"ATLAS\"\n      PRMD   \
    \       = \"Inria\"\n      PN.S          = \"Duval\"\n      \"Title\"       =\
    \ \"Manager\"\n   Similarly:\n   RFC 822 -> X.400 -> RFC 822\n   \"/C=UK/ADMD=BT/PRMD=AC/RFC-822=jj(a)seismo.css.gov/\"\
    \n                                                  @monet.berkeley.edu\n   This\
    \ will be sent to monet.berkeley.edu by RFC 822, then to the AC\n   PRMD by X.400,\
    \ and then to jj@seismo.css.gov by RFC 822.\n"
- title: 4.5.  Directory Names
  contents:
  - "4.5.  Directory Names\n   Directory Names are an optional part of O/R Name, along\
    \ with O/R\n   Address.  The RFC 822 addresses are mapped onto the O/R Address\n\
    \   component.  As there is no functional mapping for the Directory Name\n   on\
    \ the RFC 822 side, a textual mapping should be used.  There is no\n   requirement\
    \ for reversibility in terms of the goals of this\n   specification.  There may\
    \ be some loss of functionality in terms of\n   third party recipients where only\
    \ a directory name is given, but this\n   seems preferable to the significant\
    \ extra complexity of adding a full\n   mapping for Directory Names.\n"
- title: 4.6.  MTS Mappings
  contents:
  - "4.6.  MTS Mappings\n   The basic mappings at the MTS level are:\n      1) 822-MTS\
    \ originator ->\n                    MTS.PerMessageSubmissionFields.originator-name\n\
    \         MTS.OtherMessageDeliveryFields.originator-name ->\n                \
    \    822-MTS originator\n      2) 822-MTS recipient ->\n                    MTS.PerRecipientMessageSubmissionFields\n\
    \      MTS.OtherMessageDeliveryFields.this-recipient-name ->\n               \
    \     822-MTS recipient\n   822-MTS recipients and return addresses are encoded\
    \ as EBNF.822-\n   address.\n   The MTS Originator is always encoded as MTS.OriginatorName,\
    \ which\n   maps onto MTS.ORAddressAndOptionalDirectoryName, which in turn maps\n\
    \   onto MTS.ORName.\n"
- title: 4.6.1.  RFC 822 -> X.400
  contents:
  - "4.6.1.  RFC 822 -> X.400\n   From the 822-MTS Originator, use the basic ORAddress\
    \ mapping, to\n   generate MTS.PerMessageSubmissionFields.originator-name (MTS.ORName),\n\
    \   without a DirectoryName.\n   For recipients, the following settings should\
    \ be made for each\n   component of MTS.PerRecipientMessageSubmissionFields.\n\
    \        recipient-name\n             This should be derived from the 822-MTS\
    \ recipient by the\n             basic ORAddress mapping.\n        originator-report-request\n\
    \             This should be set according to content return policy, as\n    \
    \         discussed in Section 5.2.\n        explicit-conversion\n           \
    \  This optional component should be omitted, as this service\n             is\
    \ not needed.\n        extensions\n             The default value (no extensions)\
    \ should be used.\n"
- title: 4.6.2.  X.400 -> RFC 822
  contents:
  - "4.6.2.  X.400 -> RFC 822\n   The basic functionality is to generate the 822-MTS\
    \ originator and\n   recipients.  There is information present on the X.400 side,\
    \ which\n   cannot be mapped into analogous 822-MTS services.  For this reason,\n\
    \   new RFC 822 fields are added for the MTS Originator and Recipients.\n   The\
    \ information discarded at the 822-MTS level should be present in\n   these fields.\
    \  There may also be the need to generate a delivery\n   report.\n"
- title: 4.6.2.1.  822-MTS Mappings
  contents:
  - "4.6.2.1.  822-MTS Mappings\n   Use the basic ORAddress mapping, to generate the\
    \ 822-MTS originator\n   (return address) from MTS.OtherMessageDeliveryFields.originator-name\n\
    \   (MTS.ORName).  If MTS.ORName.directory-name is present, it should be\n   discarded.\n\
    \   The 822-MTS recipient is conceptually generated from\n   MTS.OtherMessageDeliveryFields.this-recipient-name.\
    \  This is done by\n   taking MTS.OtherMessageDeliveryFields.this-recipient-name,\
    \ and\n   generating an 822-MTS recipient according to the basic ORAddress\n \
    \  mapping, discarding MTS.ORName.directory-name if present.  However,\n   if\
    \ this model was followed exactly, there would be no possibility to\n   have multiple\
    \ 822-MTS recipients on a single message.  This is\n   unacceptable, and so layering\
    \ is violated.  The mapping needs to use\n   the MTA level information, and map\
    \ each value of\n   MTA.PerRecipientMessageTransferFields.recipient-name, where\
    \ the\n   responsibility bit is set, onto an 822-MTS recipient.\n"
- title: 4.6.2.2.  Generation of RFC 822 Headers
  contents:
  - "4.6.2.2.  Generation of RFC 822 Headers\n   Not all per-recipient information\
    \ can be passed at the 822-MTS level.\n   For this reason, two new RFC 822 headers\
    \ are created, in order to\n   carry this information to the RFC 822 recipient.\
    \  These fields are\n   \"X400-Originator:\"  and \"X400-Recipients:\".\n   The\
    \ \"X400-Originator:\" field should be set to the same value as the\n   822-MTS\
    \ originator.  In addition, if\n   MTS.OtherMessageDeliveryFields.originator-name\
    \ (MTS.ORName) contains\n   MTS.ORName.directory-name then this Directory Name\
    \ should be\n   represented in an 822.comment.\n   Recipient names, taken from\
    \ each value of\n   MTS.OtherMessageDeliveryFields.this-recipient-name and\n \
    \  MTS.OtherMessageDeliveryFields.other-recipient-names should  be made\n   available\
    \ to the RFC 822 user by use of the \"X400-Recipients:\" field.\n   By taking\
    \ the recipients at the MTS level, disclosure of recipients\n   will be dealt\
    \ with correctly.  If any MTS.ORName.directory-name is\n   present, it should\
    \ be represented in an 822.comment.  If\n   MTS.OtherMessageDeliveryFields.orignally-intended-recipient-name\
    \ is\n   present, then it should be represented in an associated 822.comment,\n\
    \   starting with the string \"Originally Intended Recipient\".\n   In addition,\
    \ the following per-recipient services from\n   MTS.OtherMessageDeliveryFields.extensions\
    \ should be represented in\n   comments if they are used.  None of these services\
    \ can be provided on\n   RFC 822 networks, and so in general these will be informative\
    \ strings\n   associated with other MTS recipients. In some cases, string values\n\
    \   are defined.  For the remainder, the string value may be chosen by\n   the\
    \ implementor.   If the parameter has a default value, then no\n   comment should\
    \ be inserted.\n        requested-delivery-method\n        physical-forwarding-prohibited\n\
    \             \"(Physical Forwarding Prohibited)\".\n        physical-forwarding-address-request\n\
    \             \"(Physical Forwarding Address Requested)\".\n        physical-delivery-modes\n\
    \        registered-mail-type\n        recipient-number-for-advice\n        physical-rendition-attributes\n\
    \        physical-delivery-report-request\n             \"(Physical Delivery Report\
    \ Requested)\".\n        proof-of-delivery-request\n             \"(Proof of Delivery\
    \ Requested)\".\n"
- title: 4.6.2.3.  Delivery Report Generation
  contents:
  - "4.6.2.3.  Delivery Report Generation\n   If MTA.PerRecipientMessageTransferFields.per-recipient-indicators\n\
    \   requires a positive delivery notification, this should be\n   generated by\
    \ the gateway.  Supplementary Information should be\n   set to indicate that the\
    \ report is gateway generated.\n"
- title: 4.6.3.  Message IDs (MTS)
  contents:
  - "4.6.3.  Message IDs (MTS)\n   A mapping from 822.msg-id to MTS.MTSIdentifier\
    \ is defined.  The\n   reverse mapping is not needed, as MTS.MTSIdentifier is\
    \ always\n   mapped onto new RFC 822 fields.  The value of\n   MTS.MTSIdentifier.local-part\
    \ will facilitate correlation of\n   gateway errors.\n   To map from 822.msg-id,\
    \ apply the standard mapping to\n   822.msg-id, in order to generate an MTS.ORAddress.\
    \  The Country,\n   ADMD, and PRMD components of this should be used to generate\n\
    \   MTS.MTSIdentifier.global-domain-identifier.\n   MTS.MTSIdentifier.local-identifier\
    \ should be set to the\n   822.msg-id, including the braces \"<\" and \">\". \
    \ If this string is\n   longer than MTS.ub-local-id-length (32), then it should\
    \ be\n   truncated to this length.\n   The reverse mapping is not used in this\
    \ specification.  It\n   would be applicable where MTS.MTSIdentifier.local-identifier\
    \ is\n   of syntax 822.msg-id, and it algorithmically identifies\n   MTS.MTSIdentifier.\n"
- title: 4.7.  IPMS Mappings
  contents:
  - "4.7.  IPMS Mappings\n   All RFC 822 addresses are assumed to use the 822.mailbox\
    \ syntax.\n   This should include all 822.comments associated with the lexical\n\
    \   tokens of the 822.mailbox.  In the IPMS O/R Names are encoded as\n   MTS.ORName.\
    \  This is used within the  IPMS.ORDescriptor,\n   IPMS.RecipientSpecifier, and\
    \ IPMS.IPMIdentifier.  An asymmetrical\n   mapping is defined between these components.\n"
- title: 4.7.1.  RFC 822 -> X.400
  contents:
  - "4.7.1.  RFC 822 -> X.400\n   To derive IPMS.ORDescriptor from an RFC 822 address.\n\
    \      1.   Take the address, and extract an EBNF.822-address.  This can\n   \
    \        be derived trivially from either the 822.addr-spec or\n           822.route-addr\
    \ syntax.  This is mapped to MTS.ORName as\n           described above, and used\
    \ as IMPS.ORDescriptor.formal-name.\n      2.   A string should be built consisting\
    \ of (if present):\n           - The 822.phrase component if the 822.address is\
    \ an\n             822.phrase 822.route-addr construct.\n           - Any 822.comments,\
    \ in order, retaining the parentheses.\n      This string should then be encoded\
    \ into T.61 us a human\n      oriented mapping (as described in Chapter 3).  If\
    \ the string\n      is not null, it should be assigned to\n      IPMS.ORDescriptor.free-form-name.\n\
    \      3.   IPMS.ORDescriptor.telephone-number should be omitted.\n   If IPMS.ORDescriptor\
    \ is being used in IPMS.RecipientSpecifier,\n   IPMS.RecipientSpecifier.reply-request\
    \ and\n   IPMS.RecipientSpecifier.notification-requests should be set to\n   default\
    \ values (none and false).\n   If the 822.group construct is present, any included\
    \ 822.mailbox\n   should be encoded as above to generate a separate IPMS.ORDescriptor.\n\
    \   The 822.group should be mapped to T.61, and a IPMS.ORDescriptor with\n   only\
    \ an free-form-name component built from it.\n"
- title: 4.7.2.  X.400 -> RFC 822
  contents:
  - "4.7.2.  X.400 -> RFC 822\n   Mapping from IPMS.ORDescriptor to RFC 822 address.\
    \  In the basic\n   case, where IPMS.ORDescriptor.formal-name is present, proceed\
    \ as\n   follows.\n      1.   Encode IPMS.ORDescriptor.formal-name (MTS.ORName)\
    \ as\n           EBNF.822-address.\n      2a.  If IPMS.ORDescriptor.free-form-name\
    \ is present, convert it\n           to ASCII (Chapter 3), and use this as the\
    \ 822.phrase\n           component of 822.mailbox using the 822.phrase 822.route-addr\n\
    \           construct.\n      2b.  If IPMS.ORDescriptor.free-form-name is absent.\
    \  If\n           EBNF.822-address is parsed as 822.addr-spec use this as the\n\
    \           encoding of 822.mailbox.  If EBNF.822-address is parsed as\n     \
    \      822.route 822.addr-spec, then a 822.phrase taken from\n           822.local-part\
    \ should be added.\n      3.   If IPMS.ORDescriptor.telephone-number is present,\
    \ this\n           should be placed in an 822.comment, with the string \"Tel \"\
    .\n           The normal international form of number should be used.  For\n \
    \          example:\n                  (Tel +44-1-387-7050)\n      4.   If IPMS.ORDescriptor.formal-name.directory-name\
    \ is present,\n           then a text representation should be placed in a trailing\n\
    \           822.comment.\n      5.   If IPMS.RecipientSpecifier.report-request\
    \ has any non-\n           default values, then an 822.comment \"(Receipt Notification\n\
    \           Requested)\", and/or \"(Non Receipt Notification Requested)\",\n \
    \          and/or \"(IPM Return Requested)\" should be appended to the\n     \
    \      address.  The effort of correlating P1 and P2 information is\n        \
    \   too great to justify the gateway sending Receipt\n           Notifications.\n\
    \      6.   If IPMS.RecipientSpecifier.reply-request is True, an\n           822.comment\
    \ \"(Reply requested)\" should be appended to the\n           address.\n   If\
    \ IPMS.ORDescriptor.formal-name is absent, IPMS.ORDescriptor.free-\n   form-name\
    \ should be converted to ASCII, and used as 822.phrase within\n   the RFC 822\
    \ 822.group syntax.  For example:\n      Free Form Name \":\" \";\"\n   Steps\
    \ 3-6 should then be followed.\n"
- title: 4.7.3.  IP Message IDs
  contents:
  - "4.7.3.  IP Message IDs\n   There is a need to map both ways between 822.msg-id\
    \ and\n   IPMS.IPMIdentifier.  This allows for X.400 Receipt Notifications,\n\
    \   Replies, and Cross References to reference an RFC 822 Message ID,\n   which\
    \ is preferable to a gateway generated ID.  A reversible and\n   symmetrical mapping\
    \ is defined.  This allows for good things to\n   happen when messages pass multiple\
    \ times across the X.400/RFC 822\n   boundary.\n   An important issue with messages\
    \ identifiers is mapping to the exact\n   form, as many systems use these ids\
    \ as uninterpreted keys.  The use\n   of table driven mappings is not always symmetrical,\
    \ particularly in\n   the light of alternative domain names, and alternative management\n\
    \   domains.  For this reason, a purely algorithmic mapping is used.  A\n   mapping\
    \ which is simpler than that for addresses can be used for two\n   reasons:\n\
    \        -    There is no major requirement to make message IDs \"natural\"\n\
    \        -    There is no issue about being able to reply to message IDs.\n  \
    \           (For addresses, creating a return path which works is more\n     \
    \        important than being symmetrical).\n   The mapping works by defining\
    \ a way in which message IDs generated on\n   one side of the gateway can be represented\
    \ on the other side in a\n   systematic manner.  The mapping is defined so that\
    \ the possibility of\n   clashes is is low enough to be treated as impossible.\n"
- title: 4.7.3.1.  822.msg-id represented in X.400
  contents:
  - "4.7.3.1.  822.msg-id represented in X.400\n   IPMS.IPMIdentifier.user is omitted.\
    \  The IPMS.IPMIdentifier.user-\n   relative-identifier is set to a printable\
    \ string encoding of the\n   822.msg-id with the angle braces (\"<\" and \">\"\
    ) removed.\n"
- title: 4.7.3.2.  IPMS.IPMIdentifier represented in RFC 822
  contents:
  - "4.7.3.2.  IPMS.IPMIdentifier represented in RFC 822\n   The 822.domain of 822.msg-id\
    \ is set to the value \"MHS\".  The\n   822.local-part of 822.msg-id is built\
    \ as:\n                [ printablestring ] \"*\"  [ std-or-address ]\n   with\
    \ EBNF.printablestring being the IPMS.IPMIdentifier.user-\n   relative-identifier,\
    \ and std-or-address being an encoding of the\n   IPMS.IPMIdentifier.user.  If\
    \ necessary, the 822.quoted-string\n   encoding is used.  For example:\n     \
    \   <\"147*/S=Dietrich/O=Siemens/ADMD=DBP/C=DE/\"@MHS>\n"
- title: 4.7.3.3.  822.msg-id -> IPMS.IPMIdentifier
  contents:
  - "4.7.3.3.  822.msg-id -> IPMS.IPMIdentifier\n   If the 822.local-part can be parsed\
    \ as:\n                [ printablestring ] \"*\"  [ std-or-address ]\n   and the\
    \ 822.domain is \"MHS\", then this ID was X.400 generated.  If\n   EBNF.printablestring\
    \ is present, the value is assigned to\n   IPMS.IPMIdentifier.user-relative-identifier.\
    \  If EBNF.std-or-address\n   is present, the O/R Address components derived from\
    \ it are used to\n   set IPMS.IPMIdentifier.user.\n   Otherwise, this is an RFC\
    \ 822 generated ID.  In this case, set\n   IPMS.IPMIdentifier.user-relative-identifier\
    \ to a printable string\n   encoding of the 822.msg-id without the angle braces.\n"
- title: 4.7.3.4.  IPMS.IPMIdentifier -> 822.msg-id
  contents:
  - "4.7.3.4.  IPMS.IPMIdentifier -> 822.msg-id\n   If IPMS.IPMIdentifier.user is\
    \ absent, and IPMS.IPMIdentifier.user-\n   relative-identifier mapped to ASCII\
    \ and angle braces added parses as\n   822.msg-id, then this is an RFC 822 generated\
    \ ID.\n   Otherwise, the ID is X.400 generated.  Use the\n   IPMS.IPMIdentifier.user\
    \ to generate an EBNF.std-or-address form\n   string.  Build the 822.local-part\
    \ of the 822.msg-id with the syntax:\n                [ printablestring ] \"*\"\
    \  [ std-or-address ]\n   The printablestring is taken from IPMS.IPMIdentifier.user-relative-\n\
    \   identifier.  Use 822.quoted-string if necessary.  The 822.msg-id is\n   generated\
    \ with this 822.local-part, and \"MHS\" as the 822.domain.\n"
- title: 4.7.3.5.  Phrase form
  contents:
  - "4.7.3.5.  Phrase form\n   In \"Reply-To:\" and \"References:\", the encoding\
    \ 822.phrase may be used\n   as an alternative to 822.msg-id.  To map from 822.phrase\
    \ to\n   IPMS.IPMIdentifier, assign IPMS.IPMIdentifier.user-relative-\n   identifier\
    \ to the phrase.  When mapping from IPMS.IPMIdentifier for\n   \"Reply-To:\" and\
    \ \"References:\", if IPMS.IPMIdentifier.user is absent\n   and IPMS.IPMIdentifier.user-relative-identifier\
    \ does not parse as\n   822.msg-id, generate an 822.phrase rather than adding\
    \ the domain MHS.\n"
- title: 4.7.3.6.  RFC 987 backwards compatibility
  contents:
  - "4.7.3.6.  RFC 987 backwards compatibility\n   The mapping proposed here is different\
    \ to that used in RFC 987, as\n   the RFC 987 mapping lead to changed message\
    \ IDs in many cases.\n   Fixing the problems is preferable to retaining backwards\n\
    \   compatibility.  An implementation of this standard is encouraged to\n   recognise\
    \ message IDs generated by RFC 987.\n"
- title: Chapter 5 -- Detailed Mappings
  contents:
  - "Chapter 5 -- Detailed Mappings\n   This chapter gives detailed mappings for the\
    \ functions outlined in\n   Chapters 1 and 2.  It makes extensive use of the notations\
    \ and\n   mappings defined in Chapters 3 and 4.\n"
- title: 5.1.  RFC 822 -> X.400
  contents:
  - '5.1.  RFC 822 -> X.400

    '
- title: 5.1.1.  Basic Approach
  contents:
  - "5.1.1.  Basic Approach\n   A single IP Message is generated.  The RFC 822 headers\
    \ are used to\n   generate the IPMS.Heading.  The IP Message will have one IA5\n\
    \   IPMS.BodyPart containing the RFC 822 message body.\n   Some RFC 822 fields\
    \ cannot be mapped onto a standard IPM Heading\n   field, and so an extended field\
    \ is defined in Section 5.1.2.  This is\n   then used for fields which cannot\
    \ be mapped onto existing services.\n   The message is submitted to the MTS, and\
    \ the services required can be\n   defined by specifying MTS.MessageSubmissionEnvelope.\
    \  A few\n   parameters of the MTA Abstract service are also specified, which\
    \ are\n   not in principle available to the MTS User.  Use of these services\n\
    \   allows RFC 822 MTA level parameters to be carried in the analogous\n   X.400\
    \ service elements.  The advantages of this mapping far outweigh\n   the layering\
    \ violation.\n"
- title: 5.1.2.  X.400 Extension Field
  contents:
  - "5.1.2.  X.400 Extension Field\n   An IPMS Extension is defined:\n           \
    \     rfc-822-field HEADING-EXTENSION\n                        VALUE RFC822Field\n\
    \                        ::= id-rfc-822-field\n                RFC822Field ::=\
    \ IA5String\n   The Object Identifier id-rfc-822-field is defined in Appendix\
    \ D.\n   To encode any RFC 822 Header using this extension, the RFC822Field\n\
    \   should be set to the  822.field omitting the trailing CRLF (e.g.,\n   \"Fruit-Of-The-Day:\
    \ Kiwi Fruit\"). Structured fields should be\n   unfolded.  There should be no\
    \ space before the \":\".  The reverse\n   mapping builds the RFC 822 field in\
    \ a straightforward manner.\n"
- title: 5.1.3.  Generating the IPM
  contents:
  - "5.1.3.  Generating the IPM\n   The IPM (IPMS Service Request) is generated according\
    \ to the rules of\n   this section.  The IPMS.IPM.body usually consists of one\n\
    \   IPMS.BodyPart of type IPMS.IA5TextbodyPart with\n   IPMS.IA5TextBodyPart.parameters.repertoire\
    \ set to the default (ia5)\n   which contains the body of the RFC 822 message.\
    \  The exception is\n   where there is a \"Comments:\" field in the RFC 822 header.\n\
    \   If no specific 1988 features are used, the IPM generated should be\n   encoded\
    \ as content type 2.  Otherwise, it should be encoded as\n   content type 22.\
    \  The latter will always be the case if extension\n   heading fields are generated.\n\
    \   When generating the IPM, the issue of upper bounds must be\n   considered.\
    \  At the MTS and MTA level, this specification is strict\n   about enforcing\
    \ upper bounds.  Three options are available at the IPM\n   level.  Use of any\
    \ of these options conforms to this standard.\n      1.   Ignore upper bounds,\
    \ and generate messages in the natural\n           manner.  This assumes that\
    \ if any truncation is done, it\n           will happen at the recipient UA. \
    \ This will maximise\n           transfer of information, but may break some recipient\
    \ UAs.\n      2.   Reject any inbound message which would cause a message\n  \
    \         violating constraints to be generated.  This will be robust,\n     \
    \      but may prevent useful communication.\n      3.   Truncate fields to the\
    \ upper bounds specified in X.400.\n           This will prevent problems with\
    \ UAs which enforce upper\n           bounds, but will sometimes discard useful\
    \ information.\n   These choices have different advantages and disadvantages,\
    \ and the\n   choice will depend on the exact application of the gateway.\n  \
    \ The rest of this section concerns IPMS.IPM.heading (IPMS.Heading).\n   The only\
    \ mandatory component of IPMS.Heading is the\n   IPMS.Heading.this-IPM (IPMS.IPMIdentifier).\
    \  A default should be\n   generated by the gateway.  With the exception of \"\
    Received:\", the\n   values of multiple fields should be merged (e.g., If there\
    \ are two\n   \"To:\" fields, then the mailboxes of both should be used).\n  \
    \ Information should be generated from the standard RFC 822 Headers as\n   follows:\n\
    \        Date:\n             Ignore (Handled at MTS level)\n        Received:\n\
    \             Ignore (Handled at MTA level)\n        Message-Id:\n           \
    \  Mapped to IPMS.Heading.this-IPM.  For these, and all other\n             fields\
    \ containing 822.msg-id the mappings of Chapter 4 are\n             used for each\
    \ 822.msg-id.\n        From:\n             If Sender: is present, this is mapped\
    \ to\n             IPMS.Heading.authorizing-users.  If not, it is mapped to\n\
    \             IPMS.Heading.originator.  For this, and other components\n     \
    \        containing addresses, the mappings of Chapter 4 are used\n          \
    \   for each address.\n        Sender:\n             Mapped to IPMS.Heading.originator.\n\
    \        Reply-To:\n             Mapped to IPMS.Heading.reply-recipients.\n  \
    \      To:  Mapped to IPMS.Heading.primary-recipients\n        Cc:  Mapped to\
    \ IPMS.Heading.copy-recipients.\n        Bcc: Mapped to IPMS.Heading.blind-copy-recipients.\n\
    \        In-Reply-To:\n             If there is one value, it is mapped to\n \
    \            IPMS.Heading.replied-to-IPM, using the 822.phrase or\n          \
    \   822.msg-id mapping as appropriate.  If there are several\n             values,\
    \ they are mapped to IPMS.Heading.related-IPMs, along\n             with any values\
    \ from a \"References:\" field.\n        References:\n             Mapped to IPMS.Heading.related-IPMs.\n\
    \        Keywords:\n             Mapped onto a heading extension.\n        Subject:\n\
    \             Mapped to IPMS.Heading.subject.  The field-body uses the\n     \
    \        human oriented mapping referenced in Chapter 3 from ASCII to\n      \
    \       T.61.\n        Comments:\n             Generate an IPMS.BodyPart of type\
    \ IPMS.IA5TextbodyPart with\n             IPMS.IA5TextBodyPart.parameters.repertoire\
    \ set to the\n             default (ia5), containing the value of the fields,\
    \ preceded\n             by the string \"Comments: \".  This body part should\
    \ precede\n             the other one.\n        Encrypted:\n             Mapped\
    \ onto a heading extension.\n        Resent-*\n             Mapped onto a heading\
    \ extension.\n             Note that it would be possible to use a ForwardedIPMessage\n\
    \             for these fields, but the semantics are (arguably) slightly\n  \
    \           different, and it is probably not worth the effort.\n        Other\
    \ Fields\n             In particular X-* fields, and \"illegal\" fields in common\n\
    \             usage (e.g., \"Fruit-of-the-day:\") are mapped onto a heading\n\
    \             extension, unless covered by another section or appendix of\n  \
    \           this specification.  The same treatment should be applied to\n   \
    \          RFC 822 fields where the content of the field does not\n          \
    \   conform to RFC 822 (e.g., a Date: field with unparsable\n             syntax).\n"
- title: 5.1.4.  Mappings to the MTS Abstract Service
  contents:
  - "5.1.4.  Mappings to the MTS Abstract Service\n   The MTS.MessageSubmissionEnvelope\
    \ comprises\n   MTS.PerMessageSubmissionFields, and\n   MTS.PerRecipientMessageSubmissionFields.\
    \  The mandatory parameters\n   should be defaulted as follows.\n        MTS.PerMessageSubmissionFields.originator-name\n\
    \             This is always generated from 822-MTS, as defined in\n         \
    \    Chapter 4.\n        MTS.PerMessageSubmissionFields.content-type\n       \
    \      Set to the value implied by the encoding of the IPM (2 or\n           \
    \  22).\n        MTS.PerRecipientMessageSubmissionFields.recipient-name\n    \
    \         These will always be supplied from 822-MTS, as defined in\n        \
    \     Chapter 4.\n   Optional components should be left out, and default components\n\
    \   defaulted, with two exceptions.  For\n   MTS.PerMessageSubmissionFields.per-message-indicators,\
    \ the following\n   settings should be made:\n   -    Alternate recipient should\
    \ be allowed, as it seems desirable\n        to maximise the opportunity for (reliable)\
    \ delivery.\n   -    Content return request should be set according to the issues\n\
    \        discussed in Section 5.2.\n   MTS.PerMessageSubmissionFields.original-encoded-information-types\n\
    \   should be made a set of one element\n   BuiltInEncodedInformationTypes.ia5-text.\n\
    \   The MTS.PerMessageSubmissionFields.content-correlator should be\n   encoded\
    \ as IA5String, and contain the Subject:, Message-ID:, Date:,\n   and To: fields\
    \ (if present).  This should include the strings\n   \"Subject:\", \"Date:\",\
    \ \"To:\", \"Message-ID:\", and appropriate folding.\n   This should be truncated\
    \ to MTS.ub-content-correlator-length (512)\n   characters.  In addition, if there\
    \ is a \"Subject:\" field, the\n   MTS.PerMessageSubmissionFields.content-identifier,\
    \ should be set to a\n   printable string representation of the contents of it,\
    \ truncated to\n   MTS.ub-content-id-length (16).  Both are used, due to the much\
    \ larger\n   upper bound of the content correlator, and that the content id is\n\
    \   available in X.400(1984).\n"
- title: 5.1.5.  Mappings to the MTA Abstract Service
  contents:
  - "5.1.5.  Mappings to the MTA Abstract Service\n   There is a need to map directly\
    \ onto some aspects of the MTA Abstract\n   service, for the following reasons:\n\
    \   -    So the the MTS Message Identifier can be generated from the\n       \
    \ RFC 822 Message-ID:.\n   -    So that the submission date can be generated from\
    \ the\n        822.Date.\n   -    To prevent loss of trace information.\n   -\
    \    To prevent RFC 822/X.400 looping caused by distribution\n        lists or\
    \ redirects.\n   The following mappings are defined.\n   Message-Id:\n       \
    \ If this is present, the\n        MTA.PerMessageTransferFields.message-identifier\
    \ should be\n        generated from it, using the mappings described in\n    \
    \    Chapter 4.\n   Date:\n        This is used to set the first component of\n\
    \        MTA.PerMessageTransferFields.trace-information\n        (MTA.TraceInformationElement).\
    \  The 822-MTS originator\n        should be mapped into an MTS.ORAddress, and\
    \ used to derive\n        MTA.TraceInformationElement.global-domain-identifier.\
    \  The\n        optional components of\n        MTA.TraceInformationElement.domain-supplied-information\
    \ are\n        omitted, and the mandatory components are set as follows:\n   \
    \       MTA.DomainSuppliedInformation.arrival-time\n             This is set to\
    \ the date derived from Date:\n          MTA.DomainSuppliedInformation.routing-action\n\
    \             Set to relayed.\n        The first element of\n        MTA.PerMessageTransferFields.internal-trace-information\n\
    \        should be generated in an analogous manner, although this\n        may\
    \ later be dropped (see the procedures for \"Received:\").\n   Received:\n   \
    \     All RFC 822 trace is used to derive\n        MTA.PerMessageTransferFields.trace-information\
    \ and\n        MTA.PerMessageTransferFields.internal-trace-information.\n    \
    \    Processing of Received: lines should follow processing of\n        Date:,\
    \ and should be done from the the bottom to the top of\n        the RFC 822 header\
    \ (i.e., in chronological order).  If other\n        trace elements are processed\
    \ (Via:, X400-Received:), care\n        should be taken to keep the relative ordering\
    \ correct.  The\n        initial element of\n        MTA.PerMessageTransferFields.trace-information\
    \ will be\n        generated already (from Date:).\n        Consider the Received:\
    \ field in question.  If the \"by\"  part\n        of the received is present,\
    \ use it to derive an\n        MTS.GlobalDomainIdentifier.  If this is different\
    \ from the\n        one in the last element of\n        MTA.PerMessageTransferFields.trace-information\n\
    \        (MTA.TraceInformationElement.global-domain-identifier)\n        create\
    \ a new MTA.TraceInformationElement, and optionally\n        remove\n        MTA.PerMessageTransferFields.internal-trace-information.\n\
    \        This removal should be done in cases where the message is\n        being\
    \ transferred to another MD where there is no bilateral\n        agreement to\
    \ preserve internal trace beyond the local MD.\n        The trace creation is\
    \ as for internal trace described below,\n        except that no MTA field is\
    \ needed.\n        Then add a new element (MTA.InternalTraceInformationElement)\n\
    \        to MTA.PerMessageTransferFields.internal-trace-information,\n       \
    \ creating this if needed.  This shall be done, even if\n        inter-MD trace\
    \ is created.  The\n        MTA.InternalTraceInformationElement.global-domain-identifier\n\
    \        should be set to the value derived.  The\n        MTA.InternalTraceInformationElement.mta-supplied-information\n\
    \        (MTA.MTASuppliedInformation) should be set as follows:\n          MTA.MTASuppliedInformation.arrival-time\n\
    \             Derived from the date of the Received: line\n          MTA.MTASuppliedInformation.routing-action\n\
    \             Set to relayed\n        The MTA.InternalTraceInformationElement.mta-name\
    \ should be\n        taken from the \"by\" component of the \"Received:\" field,\n\
    \        truncated to MTS.ub-mta-name-length (32).  For example:\n           Received:\
    \ from computer-science.nottingham.ac.uk by\n              vs6.Cs.Ucl.AC.UK via\
    \ Janet with NIFTP  id aa03794;\n              28 Mar 89 16:38 GMT\n   Generates\
    \ the string:\n           vs6.Cs.Ucl.AC.UK\n   Note that before transferring the\
    \ message to some ADMDs, additional\n   trace stripping may be required, as the\
    \ implied path through multiple\n   MDs would violate ADMD policy.\n   Two extended\
    \ fields must be mapped, in order to prevent looping.\n   \"DL-Expansion-History:\"\
    \ is mapped to\n   MTA.PerMessageTransferFields.extensions.dl-expansion-history.\n\
    \   \"Redirection-History:\" is mapped to\n   MTA.PerRecipientMessageTransferFields.extensions.redirection-history.\n"
- title: 5.1.6.  Mapping New Fields
  contents:
  - "5.1.6.  Mapping New Fields\n   This specification defines a number of new fields\
    \ for Reports,\n   Notifications and IP Messages in Section 5.3.  As this specification\n\
    \   only aims to preserve existing services, a gateway conforming to this\n  \
    \ specification does not need to map these fields to X.400, with the\n   exception\
    \ of \"DL-Expansion-History\" and \"Redirection-History\"\n   described in the\
    \ previous section.  However, it is usually desirable\n   and beneficial to do\
    \ so, particularly to facilitate support of a\n   message traversing multiple\
    \ gateways.  These mappings may be onto\n   MTA, MTS, or IPMS services.\n"
- title: 5.2.  Return of Contents
  contents:
  - "5.2.  Return of Contents\n   It is not clear how widely supported the X.400 return\
    \ of contents\n   service will be.  Experience with X.400(1984) suggests that\
    \ support\n   of this service may not be universal.  As this service is expected\
    \ in\n   the RFC 822 world, two approaches are specified.  The choice will\n \
    \  depend on the use of X.400 return of contents withing the X.400\n   community\
    \ being serviced by the gateway.\n   In environments where return of contents\
    \ is widely supported, content\n   return can be requested as a service.  The\
    \ content return service can\n   then be passed back to the end (RFC 822) user\
    \ in a straightforward\n   manner.\n   In environments where return of contents\
    \ is not widely supported, a\n   gateway must make special provision to handle\
    \ return of contents.\n   For every message passing from RFC 822 -> X.400, content\
    \ return\n   request will not be requested, and report request always will be.\n\
    \   When the delivery report comes back, the gateway can note that the\n   message\
    \ has been delivered to the recipient(s) in question.  If a\n   non-delivery report\
    \ is received, a meaningful report (containing some\n   or all of the original\
    \ message) can be sent to the 822-MTS\n   originator.  If no report is received\
    \ for a recipient, a (timeout)\n   failure notice should be sent to the 822-MTS\
    \ originator.  The gateway\n   may retransmit the X.400 message if it wishes.\
    \  When this approach is\n   taken, routing must be set up so that error reports\
    \ are returned\n   through the same MTA.  This approach may be difficult to use\
    \ in\n   conjunction with some routing strategies.\n"
- title: 5.3.  X.400 -> RFC 822
  contents:
  - '5.3.  X.400 -> RFC 822

    '
- title: 5.3.1.  Basic Approach
  contents:
  - "5.3.1.  Basic Approach\n   A single RFC 822 message is generated from the incoming\
    \ IP Message,\n   Report, or IP Notification.   All IPMS.BodyParts are mapped\
    \ onto a\n   single RFC 822 body.  Other services are mapped onto RFC 822 header\n\
    \   fields.  Where there is no appropriate existing field, new fields are\n  \
    \ defined for IPMS, MTS and MTA services.\n   The gateway mechanisms will correspond\
    \ to MTS Delivery.  As with\n   submission, there are aspects where the MTA (transfer)\
    \ services are\n   also used. In particular, there is an optimisation to allow\
    \ for\n   multiple 822-MTS recipients.\n"
- title: 5.3.2.  RFC 822 Settings
  contents:
  - "5.3.2.  RFC 822 Settings\n   An RFC 822 Service requires to have a number of\
    \ mandatory fields in\n   the RFC 822 Header.  Some 822-MTS services mandate specification\
    \ of\n   an 822-MTS Originator.  Even in cases where this is optional, it is\n\
    \   usually desirable to specify a value.  The following defaults are\n   defined,\
    \ which should be used if the mappings specified do not derive\n   a value:\n\
    \   822-MTS Originator\n        If this is not generated by the mapping (e.g.,\
    \ for a\n        Delivery Report), a value pointing at a gateway\n        administrator\
    \ should be assigned.\n   Date:\n        A value will always be generated\n  \
    \ From:If this is not generated by the mapping, it should be\n        assigned\
    \ equal to the 822-MTS Originator.  If this is\n        gateway generated, an\
    \ appropriate 822.phrase should be\n        added.\n   At least one recipient\
    \ field\n        If no recipient fields are generated, a field \"To: list:;\"\
    ,\n        should be added.\n   This will ensure minimal RFC 822 compliance. \
    \ When generating RFC\n   822 headers, folding should be used in an appropriate\
    \ manner.\n"
- title: 5.3.3.  Basic Mappings
  contents:
  - '5.3.3.  Basic Mappings

    '
- title: 5.3.3.1.  Encoded Information Types
  contents:
  - "5.3.3.1.  Encoded Information Types\n   This mapping from MTS.EncodedInformationTypes\
    \ is needed in\n   several disconnected places.  EBNF is defined as follows:\n\
    \                encoded-info    = 1#encoded-type\n                encoded-type\
    \    = built-in-eit / object-identifier\n                built-in-eit    = \"\
    Undefined\"         ; undefined (0)\n                                / \"Telex\"\
    \             ; tLX (1)\n                                / \"IA5-Text\"      \
    \    ; iA5Text (2)\n                                / \"G3-Fax\"            ;\
    \ g3Fax (3)\n                                / \"TIF0\"              ; tIF0 (4)\n\
    \                                / \"Teletex\"           ; tTX (5)\n         \
    \                       / \"Videotex\"          ; videotex (6)\n             \
    \                   / \"Voice\"             ; voice (7)\n                    \
    \            / \"SFD\"               ; sFD (8)\n                             \
    \   / \"TIF1\"              ; tIF1 (9)\n   MTS.EncodedInformationTypes is mapped\
    \ onto EBNF.encoded-info.\n   MTS.EncodedInformationTypes.non-basic-parameters\
    \ is ignored.  Built\n   in types are mapped onto fixed strings (compatible with\
    \ X.400(1984)\n   and RFC 987), and other types are mapped onto EBNF.object-identifier.\n"
- title: 5.3.3.2.  Global Domain Identifier
  contents:
  - "5.3.3.2.  Global Domain Identifier\n   The following simple EBNF is used to represent\n\
    \   MTS.GlobalDomainIdentifier:\n                global-id = std-or-address\n\
    \   This is encoded using the std-or-address syntax, for the attributes\n   within\
    \ the Global Domain Identifier.\n"
- title: 5.3.4.  Mappings from the IP Message
  contents:
  - "5.3.4.  Mappings from the IP Message\n   Consider that an IPM has to be mapped\
    \ to RFC 822.  The IPMS.IPM\n   comprises an IPMS.IPM.heading and IPMS.IPM.body.\
    \   The heading is\n   considered first.  Some EBNF for new fields is defined:\n\
    \                ipms-field = \"Obsoletes\" \":\" 1#msg-id\n                 \
    \          / \"Expiry-Date\" \":\" date-time\n                           / \"\
    Reply-By\" \":\" date-time\n                           / \"Importance\" \":\"\
    \ importance\n                           / \"Sensitivity\" \":\" sensitivity\n\
    \                           / \"Autoforwarded\" \":\" boolean\n              \
    \             / \"Incomplete-Copy\" \":\"\n                           / \"Language\"\
    \ \":\" language\n                           / \"Message-Type\" \":\" message-type\n\
    \                           / \"Discarded-X400-IPMS-Extensions\" \":\" 1#oid\n\
    \                importance      = \"low\" / \"normal\" / \"high\"\n         \
    \       sensitivity     = \"Personal\" / \"Private\" /\n                     \
    \                  \"Company-Confidential\"\n                language        =\
    \ 2*ALPHA [ language-description ]\n                language-description = printable-string\n\
    \                message-type    = \"Delivery Report\"\n                     \
    \           / \"InterPersonal Notification\"\n                               \
    \ / \"Multiple Part\"\n   The mappings and actions for the IPMS.Heading is now\
    \ specified for\n   each element.  Addresses, and Message Identifiers are mapped\n\
    \   according to Chapter 4.  Other mappings are explained, or are\n   straightforward\
    \ (algorithmic).\n   IPMS.Heading.this-IPM\n        Mapped to \"Message-ID:\"\
    .\n   IPMS.Heading.originator\n        If IPMS.Heading.authorizing-users is present\
    \ this is mapped\n        to Sender:, if not to \"From:\".\n   IPMS.Heading.authorizing-users\n\
    \        Mapped to \"From:\".\n   IPMS.Heading.primary-recipients\n        Mapped\
    \ to \"To:\".\n   IPMS.Heading.copy-recipients\n        Mapped to \"Cc:\".\n \
    \  IPMS.Heading.blind-copy-recipients\n        Mapped to \"Bcc:\".\n   IPMS.Heading.replied-to-ipm\n\
    \        Mapped to \"In-Reply-To:\".\n   IPMS.Heading.obsoleted-IPMs\n       \
    \ Mapped to the extended RFC 822 field \"Obsoletes:\"\n   IPMS.Heading.related-IPMs\n\
    \        Mapped to \"References:\".\n   IPMS.Heading.subject\n        Mapped to\
    \ \"Subject:\".  The contents are converted to ASCII\n        (as defined in Chapter\
    \ 3).  Any CRLF are not mapped, but\n        are used as points at which the subject\
    \ field must be\n        folded.\n   IPMS.Heading.expiry-time\n        Mapped\
    \ to the extended RFC 822 field \"Expiry-Date:\".\n   IPMS.Heading.reply-time\n\
    \        Mapped to the extended RFC 822 field \"Reply-By:\".\n   IPMS.Heading.reply-recipients\n\
    \        Mapped to \"Reply-To:\".\n   IPMS.Heading.importance\n        Mapped\
    \ to the extended RFC 822 field \"Importance:\".\n   IPMS.Heading.sensitivity\n\
    \        Mapped to the extended RFC 822 field \"Sensitivity:\".\n   IPMS.Heading.autoforwarded\n\
    \        Mapped to the extended RFC 822 field \"Autoforwarded:\".\n   The standard\
    \ extensions (Annex H of X.420 / ISO 10021-7) are mapped\n   as follows:\n   incomplete-copy\n\
    \        Mapped to the extended RFC 822 field \"Incomplete-Copy:\".\n   language\n\
    \        Mapped to the extended RFC 822 field \"Language:\", filling in\n    \
    \    the two letter code. If possible, the language-description\n        should\
    \ be filled in with a human readable description of the\n        language.\n \
    \  If the RFC 822 extended header is found, this should be mapped onto\n   an\
    \ RFC 822 header, as described in Section 5.1.2.\n   If a non-standard extension\
    \ is found, it should be discarded, unless\n   the gateway understands the extension\
    \ and can perform an appropriate\n   mapping onto an RFC 822 header field.  If\
    \ extensions are discarded,\n   the list should be indicated in the extended RFC\
    \ 822 field\n   \"Discarded-X400-IPMS-Extensions:\".\n   The IPMS.Body is mapped\
    \ into the RFC 822 message body.  Each\n   IPMS.BodyPart is converted to ASCII\
    \ as follows:\n   IPMS.IA5Text\n        The mapping is straightforward (see Chapter\
    \ 3).\n   IPMS.MessageBodyPart\n        The X.400 -> RFC 822 mapping  should be\
    \ recursively applied,\n        to generate an RFC 822 Message.  If present, the\n\
    \        IPMS.MessageBodyPart.parameters.delivery-envelope should be\n       \
    \ used for the MTS Abstract Service Mappings.  If present, the\n        IPMS.MessageBodyPart.parameters.delivery-time\
    \ should be\n        mapped to the extended RFC 822 field \"Delivery-Date:\".\n\
    \   Other\n        If other body parts can be mapped to IA5, either by use of\n\
    \        mappings defined in X.408 [CCITT88a], or by other reasonable\n      \
    \  mappings, this should be done unless content conversion is\n        prohibited.\n\
    \   If some or all of the body parts cannot be converted there are three\n   options.\
    \  All of these conform to this standard.  A different choice\n   may be made\
    \ for the case where no body part can be converted:\n   1.   The first option\
    \ is to reject the message, and send a non-\n        delivery notification.  This\
    \ must always be done if\n        conversion is prohibited.\n   2.   The second\
    \ option is to map a missing body part to something\n        of the style:\n \
    \               *********************************\n                There was a\
    \ foobar here\n                The widget gateway ate it\n                *********************************\n\
    \        This will allow some useful information to be transferred.\n        As\
    \ the recipient is a human (IPMS), then suitable action\n        should be available.\n\
    \   3.   Finally both can be done.  In this case, the supplementary\n        information\
    \ in the (positive) Delivery Report should make\n        clear that something\
    \ was sent on to the recipient with\n        substantial loss of information.\n\
    \   Where there is more than one IPMS.BodyPart, the mapping defined by\n   Rose\
    \ and Stefferud in [Rose85a], should be used to map the separate\n   IPMS.BodyParts\
    \ in the single RFC 822 message body.  If this is done,\n   a \"Message-Type:\"\
    \ field with value \"Multiple part\" should be added,\n   which will indicate\
    \ to a receiving gateway that the message may be\n   unfolded according to RFC\
    \ 934.\n   For backwards compatibility with RFC 987, the following procedures\n\
    \   should also be followed.  If there are two IA5 body parts, and the\n   first\
    \ starts with the string \"RFC-822-Headers:\" as the first line,\n   then the\
    \ remainder of this body part should be appended to the RFC\n   822 header.\n"
- title: 5.3.5.  Mappings from an IP Notification
  contents:
  - "5.3.5.  Mappings from an IP Notification\n   A message is generated, with the\
    \ following fields:\n   From:\n        Set to the MTS.MessageDeliveryEnvelope.other-\n\
    \        fields.originator-name.\n   To:  Set to the IPMS.IPN.ipm-originator.\n\
    \   Subject:\n        Set to something of the form \"X.400 Inter-Personal Receipt\n\
    \        Notification\".\n   Message-Type:\n        Set to \"InterPersonal Notification\"\
    \n   References:\n        Set to IPMS.IPN.subject-ipm\n   The following EBNF is\
    \ defined for the body of the Message.  This\n   format is defined to ensure that\
    \ all information from an\n   interpersonal notification is available to the end\
    \ user in a uniform\n   manner.\n           ipn-body-format = ipn-description\
    \ <CRLF>\n                           [ ipn-extra-information <CRLF> ]\n      \
    \                     ipn-content-return\n           ipn-description = ipn-receipt\
    \ / ipn-non-receipt\n           ipn-receipt = \"Your message to:\" preferred-recipient\
    \ <CRLF>\n                    \"was received at\" receipt-time <CRLF> <CRLF>\n\
    \                    \"This notification was generated\"\n                   \
    \ acknowledgement-mode <CRLF>\n                    \"The following extra information\
    \ was given:\" <CRLF>\n                    ipn-suppl <CRLF>\n           ipn-non-receipt\
    \ \"Your message to:\"\n                   preferred-recipient <CRLF>\n      \
    \             ipn-reason\n           ipn-reason = ipn-discarded / ipn-auto-forwarded\n\
    \           ipn-discarded = \"was discarded for the following reason:\"\n    \
    \                       discard-reason <CRLF>\n           ipn-auto-forwarded =\
    \ \"was automatically forwarded.\" <CRLF>\n                           [ \"The\
    \ following comment was made:\"\n                                   auto-comment\
    \ ]\n           ipn-extra-information =\n                    \"The following information\
    \ types were converted:\"\n                    encoded-info\n           ipn-content-return\
    \ = \"The Original Message is not available\"\n                           / \"\
    The Original Message follows:\"\n                             <CRLF> <CRLF> message\n\
    \           preferred-recipient = mailbox\n           receipt-time        = date-time\n\
    \           auto-comment        = printablestring\n           ipn-suppl      \
    \     = printablestring\n           non-receipt-reason = \"Discarded\" / \"Auto-Forwarded\"\
    \n           discard-reason     = \"Expired\" / \"Obsoleted\" /\n            \
    \                       \"User Subscription Terminated\"\n           acknowledgement-mode\
    \ = \"Manually\" / \"Automatically\"\n   The mappings for elements of the common\
    \ fields of IPMS.IPN\n   (IPMS.CommonFields) onto this structure and the message\
    \ header are:\n        subject-ipm\n             Mapped to \"References:\"\n \
    \       ipm-originator\n             Mapped  to \"To:\".\n        ipm-preferred-recipient\n\
    \             Mapped to EBNF.preferred-recipient\n        conversion-eits\n  \
    \           Mapped to EBNF.encoded-info in EBNF.ipn-extra-information\n      \
    \  The mappings for elements of IPMS.IPN.non-receipt-fields\n        (IPMS.NonReceiptFields)\
    \ are:\n        non-receipt-reason\n             Used to select between EBNF.ipn-discarded\
    \ and\n             EBNF.ipn-auto-forwarded\n        discard-reason\n        \
    \     Mapped to EBNF.discard-reason\n        auto-forward-comment\n          \
    \   Mapped to EBNF.auto-comment\n        returned-ipm\n             If present,\
    \ the second option of EBNF.ipn-content-return\n             should be chosen,\
    \ and an RFC 822 mapping of the message\n             included.  Otherwise the\
    \ first option should be chosen.\n        The mappings for elements of IPMS.IPN.receipt-fields\n\
    \        (IPMS.ReceiptFields) are:\n        receipt-time\n             Mapped\
    \ to EBNF.receipt-time\n        acknowledgement-mode\n             Mapped to EBNF.acknowledgement-mode\n\
    \        suppl-receipt-info\n             Mapped to EBNF.ipn-suppl\n   An example\
    \ notification is:\n      From: Steve Kille <steve@cs.ucl.ac.uk>\n      To: Julian\
    \ Onions <jpo@computer-science.nottingham.ac.uk>\n      Subject: X400 Inter-personal\
    \ Receipt Notification\n      Message-Type: InterPersonal Notification\n     \
    \ References: <1229.614418325@UK.AC.NOTT.CS>\n      Date: Wed, 21 Jun 89 08:45:25\
    \ +0100\n      Your message to: Steve Kille <steve@cs.ucl.ac.uk>\n      was automatically\
    \ forwarded.\n      The following comment was made:\n      Sent on to a random\
    \ destination\n      The following information types were converted: g3fax\n \
    \     The Original Message is not available\n"
- title: 5.3.6.  Mappings from the MTS Abstract Service
  contents:
  - "5.3.6.  Mappings from the MTS Abstract Service\n   This section describes the\
    \ MTS mappings for User Messages (IPM and\n   IPN).  This mapping is defined by\
    \ specifying the mapping of\n   MTS.MessageDeliveryEnvelope.  The following extensions\
    \ to RFC 822 are\n   defined to support this mapping:\n      mts-field = \"X400-MTS-Identifier\"\
    \ \":\" mts-msg-id\n                / \"X400-Originator\" \":\" mailbox\n    \
    \            / \"X400-Recipients\" \":\" 1#mailbox\n                / \"Original-Encoded-Information-Types\"\
    \ \":\"\n                                encoded-info\n                / \"X400-Content-Type\"\
    \ \":\" mts-content-type\n                / \"Content-Identifier\" \":\" printablestring\n\
    \                / \"Priority\" \":\" priority\n                / \"Originator-Return-Address\"\
    \ \":\" 1#mailbox\n                / \"DL-Expansion-History\" \":\" mailbox \"\
    ;\" date-time \";\"\n                / \"Redirection-History\" \":\" redirection\n\
    \                / \"Conversion\" \":\" prohibition\n                / \"Conversion-With-Loss\"\
    \ \":\" prohibition\n                / \"Requested-Delivery-Method\" \":\"\n \
    \                               1*( labelled-integer )\n                / \"Delivery-Date\"\
    \ \":\" date-time\n                / \"Discarded-X400-MTS-Extensions\" \":\"\n\
    \                                1#( oid / labelled-integer )\n      prohibition\
    \     = \"Prohibited\" / \"Allowed\"\n      mts-msg-id       = \"[\" global-id\
    \ \";\" *text \"]\"\n      mts-content-type = \"P2\" /  labelled-integer\n   \
    \                   / object-identifer\n      priority        = \"normal\" / \"\
    non-urgent\" / \"urgent\"\n      redirection     = mailbox \";\" \"reason\" \"\
    =\"\n                              redirection-reason\n                      \
    \        \";\" date-time\n      redirection-reason =\n                      \"\
    Recipient Assigned Alternate Recipient\"\n                    / \"Originator Requested\
    \ Alternate Recipient\"\n                    / \"Recipient MD Assigned Alternate\
    \ Recipient\"\n      These elements are only appropriate for physical delivery.\
    \  They\n      are represented as comments in the \"X400-Recipients:\" field,\
    \ as\n      described in Section 4.6.2.2.\n   originator-certificate\n   message-token\n\
    \   content-confidentiality-algorithm-identifier\n   content-integrity-check\n\
    \   message-origin-authentication-check\n   message-security-label\n   proof-of-delivery-request\n\
    \      These elements imply use of security services not available in the\n  \
    \    RFC 822 environment.  If they are marked as critical for transfer\n     \
    \ or delivery, then the message should be rejected.  Otherwise they\n      should\
    \ be discarded.\n   redirection-history\n        Each element is mapped to an\
    \ extended RFC 822 field\n        \"Redirection-History:\".  They should be ordered\
    \ in the\n        message header, so that the most recent redirection comes\n\
    \        first (same order as trace).\n   dl-expansion-history\n        Each element\
    \ is mapped to the extended RFC 822 field\n        \"DL-Expansion-History:\".\
    \  They should be ordered in the\n        message header, so that the most recent\
    \ expansion comes\n        first (same order as trace).\n   If any MTS (or MTA)\
    \ Extensions not specified in X.400 are present,\n   and they are marked as critical\
    \ for transfer or delivery, then the\n   message should be rejected.  If they\
    \ are not so marked, they can\n   safely be discarded.  The list of discarded\
    \ fields should be\n   indicated in the extended header \"Discarded-X400-MTS-Extensions:\"\
    .\n"
- title: 5.3.7.  Mappings from the MTA Abstract Service
  contents:
  - "5.3.7.  Mappings from the MTA Abstract Service\n   There are some mappings at\
    \ the MTA Abstract Service level which are\n   done for IPM and IPN.  These can\
    \ be derived from\n   MTA.MessageTransferEnvelope.  The reasons for the mappings\
    \ at this\n   level, and the violation of layering are:\n   -    Allowing for\
    \ multiple recipients to share a single RFC 822\n        message.\n   -    Making\
    \ the X.400 trace information available on the RFC 822\n        side.\n   -  \
    \  Making any information on deferred delivery available.\n   The 822-MTS recipients\
    \ should be calculated from the full list of\n   X.400 recipients.  This is all\
    \ of the members of\n   MTA.MessageTransferEnvelope.per-recipient-fields being\
    \ passed\n   through the gateway, where the responsibility bit is set.  In\n \
    \  some cases, a different RFC 822 message would be calculated for\n   each recipient.\
    \  If this is due to differing service requests for\n   each recipient, then a\
    \ different message should be generated.\n   If it is due only to the request\
    \ for non-disclosure of\n   recipients, then the \"X400-Recipients:\" field should\
    \ be omitted,\n   and only one message sent.\n   The following EBNF is defined\
    \ for extended RFC 822 headers:\n      mta-field       = \"X400-Received\" \"\
    :\" x400-trace\n                      / \"Deferred-Delivery\" \":\" date-time\n\
    \                      / \"Latest-Delivery-Time\" \":\" date-time\n      x400-trace\
    \       = \"by\" md-and-mta \";\"\n                       [ \"deferred until\"\
    \ date-time \";\" ]\n                       [ \"converted\" \"(\" encoded-info\
    \ \")\" \";\" ]\n                       [ \"attempted\" md-and-mta \";\"  ]\n\
    \                          action-list\n                          \";\" arrival-time\n\
    \      md-and-mta       = [ \"mta\" mta \"in\" ]  global-id\n      mta       \
    \       = word\n      arrival-time     = date-time\n      action-list      = 1#action\n\
    \      action           = \"Redirected\"\n                       / \"Expanded\"\
    \n                       / \"Relayed\"\n                       / \"Rerouted\"\n\
    \   If MTA.PerMessageTransferFields.deferred-delivery-time is present,\n   use\
    \ it to generate a Deferred-Delivery: field.  For some reason,\n   X.400 does\
    \ not make this information available at the MTS level on\n   delivery.  X.400\
    \ profiles, and in particular the CEN/CENELEC profile\n   for X.400(1984) [Systems85a],\
    \ specify that this element must be\n   supported at the first MTA.  If it is\
    \ not, the function may\n   optionally be implemented by the gateway: that is,\
    \ the gateway should\n   hold the message until the time specified in the protocol\
    \ element.\n   Thus, it is expected that the value of this element will often\
    \ be in\n   the past.  For this reason, the extended RFC 822 field is primarily\n\
    \   for information.\n   Merge MTA.PerMessageTransferFields.trace-information,\
    \ and\n   MTA.PerMessageTransferFields.internal-trace-information to produce a\n\
    \   single ordered trace list.  If Internal trace from other management\n   domains\
    \ has not been stripped, this may require complex interleaving.\n   Use this to\
    \ generate a sequence of \"X400-Received:\" fields.  The only\n   difference between\
    \ external trace and internal trace will be the\n   extra MTA information in internal\
    \ trace elements.\n   When generating an RFC 822 message all trace fields (X400-\
    \ Received\n   and Received) should be at the beginning of the header, before\
    \ any\n   other fields.  Trace should be in chronological order, with the most\n\
    \   recent element at the front of the message.  A simple example trace\n   (external)\
    \ is:\n   X400-Received: by /PRMD=UK.AC/ADMD=Gold 400/C=GB/ ; Relayed ;\n    \
    \       Tue, 20 Jun 89 19:25:11 +0100\n   A more complex example (internal):\n\
    \   X400-Received: by mta UK.AC.UCL.CS in\n                                  \
    \    /PRMD=UK.AC/ADMD=Gold 400/C=GB/ ;\n           deferred until  Tue, 20 Jun\
    \ 89 14:24:22 +0100 ;\n           converted (undefined, g3fax) \";\" attempted\
    \ /ADMD=Foo/C=GB/ ;\n           Relayed, Expanded, Redirected ; Tue, 20 Jun 89\
    \ 19:25:11 +0100\n"
- title: 5.3.8.  Mappings from Report Delivery
  contents:
  - "5.3.8.  Mappings from Report Delivery\n   Delivery reports are mapped at the\
    \ MTS service level.  This means\n   that only reports destined for the MTS user\
    \ will be mapped.  Some\n   additional services are also taken from the MTA service.\n"
- title: 5.3.8.1.  MTS Mappings
  contents:
  - "5.3.8.1.  MTS Mappings\n   A Delivery Report service will be represented as\n\
    \   MTS.ReportDeliveryEnvelope, which comprises of per-report-fields\n   (MTS.PerReportDeliveryFields)\
    \ and per-recipient-fields.\n   A message should be generated with the following\
    \ fields:\n   From:\n        An administrator at the gateway system.  This is\
    \ also the\n        822-MTS originator.\n   To:  A mapping of the\n        MTA.ReportTransferEnvelope.report-destination-name.\
    \  This is\n        also the 822-MTS recipient.\n   Message-Type:\n        Set\
    \ to \"Delivery Report\".\n   Subject:\n        Something of the form \"X.400\
    \ Delivery Report\".\n   The format of the body of the message is defined to ensure\
    \ that all\n   information is conveyed to the RFC 822 user in a consistent manner.\n\
    \   This gives a summary of critical information, and then a full listing\n  \
    \ of all parameters:\n   dr-body-format = dr-summary <CRLF>\n                \
    \    dr-recipients <CRLF>\n                    dr-extra-information <CRLF>\n \
    \                   dr-content-return\n   dr-content-return = \"The Original Message\
    \ is not available\"\n                   / \"The Original Message follows:\"\n\
    \                     <CRLF> <CRLF> message\n   dr-summary = \"This report relates\
    \ to your message:\" <CRLF>\n                content-correlator <CRLF> <CRLF>\n\
    \                \"of\" date-time <CRLF> <CRLF>\n                \"It was generated\
    \ by:\" report-point <CRLF>\n                \"at\" date-time <CRLF> <CRLF>\n\
    \                \"It was later converted to RFC 822 by:\" mailbox <CRLF>\n  \
    \              \"at\" date-time <CRLF> <CRLF>\n   dr-recipients = *(dr-recipient\
    \ <CRLF> <CRLF>)\n   dr-recipient = dr-recip-success / dr-recip-failure\n   dr-recip-success\
    \ =\n                   \"Your message was successfully delivered to:\"\n    \
    \               mailbox \"at\" date-time\n   dr-recip-failure = \"Your message\
    \ was not delivered to:\"\n                   mailbox <CRLF>\n               \
    \    \"for the following reason:\" *word\n   dr-extra-information =\n    \"-----------------------------------------------\"\
    \ <CRLF> <CRLF>\n    \"The following information is derived from the Report\"\
    \ <CRLF>\n    \"It may be useful for problem diagnosis:\" <CRLF> <CRLF>\n    drc-field-list\n\
    \   drc-field-list       = *(drc-field <CRLF>)\n   drc-field = \"Subject-Submission-Identifier\"\
    \ \":\"\n                           mts-msg-id\n             / \"Content-Identifier\"\
    \ \":\" printablestring\n             / \"Content-Type\" \":\" mts-content-type\n\
    \             / \"Original-Encoded-Information-Types\" \":\"\n               \
    \            encoded-info\n             / \"Originator-and-DL-Expansion-History\"\
    \ \":\"\n                           dl-history\n             / \"Reporting-DL-Name\"\
    \ \":\" mailbox\n             / \"Content-Correlator\" \":\" content-correlator\n\
    \             / \"Recipient-Info\" \":\" recipient-info\n             / \"Subject-Intermediate-Trace-Information\"\
    \ \":\"\n                           x400-trace\n   recipient-info  = mailbox \"\
    ,\" std-or \";\"\n                   report-type\n                   [ \"converted\
    \ eits\" encoded-info \";\" ]\n                   [ \"originally intended recipient\"\
    \n                            mailbox \",\" std-or \";\" ]\n                 \
    \  [ \"last trace\" [ encoded-info ] date-time \";\" ]\n                   [ \"\
    supplementary info\" <\"> printablestring <\"> \";\" ]\n                   [ \"\
    redirection history\" 1#redirection \";\"\n                   [ \"physical forwarding\
    \ address\"\n                                         printablestring \";\" ]\n\
    \   report-type     = \"SUCCESS\" drc-success\n                   / \"FAILURE\"\
    \ drc-failure\n   drc-success     = \"delivered at\" date-time \";\"\n       \
    \            [ \"type of MTS user\" labelled-integer \";\" ]\n   drc-failure \
    \    = \"reason\" labelled-integer \";\"\n                   [ \"diagnostic\"\
    \ labelled-integer \";\" ]\n   report-point = [ \"mta\" word \"in\" ] global-id\n\
    \   content-correlator = *word\n   dl-history = 1#( mailbox \"(\" date-time \"\
    )\")\n   The format is defined as a fixed definition.  The only exception is\n\
    \   that the EBNF.drc-fields should follow RFC 822 folding rules.\n   The elements\
    \ of MTS.ReportDeliveryEnvelope.per-report-fields are\n   mapped as follows onto\
    \ extended RFC 822 fields:\n   subject-submission-identifier\n        Mapped to\
    \ EBNF.drc-field (Subject-Submission-Identifier)\n   content-identifier\n    \
    \    Mapped to EBNF.drc-field (Content-Identifier)\n   content-type\n        Mapped\
    \ to EBNF.drc-field (Content-Type)\n   original-encoded-information-types\n  \
    \      Mapped to EBNF.drc-field (Encoded-Info)\n   The extensions from\n   MTS.ReportDeliveryEnvelope.per-report-fields.extensions\
    \ are\n   mapped as follows:\n   originator-and-DL-expansion-history\n       \
    \ Mapped to EBNF.drc-field (Originator-and-DL-Expansion-\n        History)\n \
    \  reporting-DL-name\n        Mapped to EBNF.drc-field (Reporting-DL-Name)\n \
    \  content-correlator\n        Mapped to EBNF.content-correlator, provided that\
    \ the\n        encoding is IA5String (this should always be the case).\n     \
    \   This is used in EBNF.dr-summary and EBNF.drc-field-list.\n        In the former,\
    \ LWSP may be added, in order to improve the\n        layout of the message.\n\
    \   message-security-label\n   reporting-MTA-certificate\n   report-origin-authentication-check\n\
    \      These security parameters should not be present.  If they are,\n      they\
    \ should be discarded in preference to discarding the whole\n      report.\n \
    \  For each element of MTS.ReportDeliveryEnvelope.per-recipient-fields,\n   a\
    \ value of EBNF.dr-recipient, and an EBNF.drc-field (Recipient-Info)\n   should\
    \ be generated.  The components are mapped as follows.\n   actual-recipient-name\n\
    \        Used to generate the first EBNF.mailbox and EBNF.std-or in\n        EBNF.recipient-info.\
    \  Both RFC 822 and X.400 forms are\n        given, as there may be a problem\
    \ in the mapping tables.  It\n        also generates the EBNF.mailbox in EBNF.dr-recip-success\
    \ or\n        EBNF.dr-recip-failure.\n   report\n        If it is MTS.Report.delivery,\
    \ then set EBNF.dr-recipient to\n        EBNF.dr-recip-success, and similarly\
    \ set EBNF.report-type,\n        filling in EBNF.drc-success.  If it is a failure,\
    \ set\n        EBNF.dr-recipient to EBNF.dr-recip-failure, making a human\n  \
    \      interpretation of the reason and diagnostic codes, and\n        including\
    \ any supplementary information.  EBNF.drc-failure\n        should be filled in\
    \ systematically.\n   converted-encoded-information-types\n        Set EBNF.drc-field\
    \ (\"converted eits\")\n   originally-intended-recipient\n        Set the second\
    \ (\"originally intended recipient\") mailbox\n        and\n        std-or in\
    \ EBNF.drc-field.\n   supplementary-info\n        Set EBNF.drc-field (\"supplementary\
    \ info\"), and include this\n        information in EBNF.dr-recip-failure.\n \
    \  redirection-history\n        Set EBNF.drc-field (\"redirection history\")\n\
    \   physical-forwarding-address\n        Set ENBF.drc-field (\"physical forwarding\
    \ address\")\n   recipient-certificate\n        Discard\n   proof-of-delivery\n\
    \        Discard\n   Any unknown extensions should be discarded, irrespective\
    \ of\n   criticality.\n   The original message should be included in the delivery\
    \ port.  The\n   original message will usually be available at the gateway, as\n\
    \   discussed in Section 5.2.\n"
- title: 5.3.8.2.  MTA Mappings
  contents:
  - "5.3.8.2.  MTA Mappings\n   The single 822-MTS recipient is constructed from\n\
    \   MTA.ReportTransferEnvelope.report-destination-name, using the\n   mappings\
    \ of Chapter 4.  Unlike with a user message, this information\n   is not available\
    \ at the MTS level.\n   The following additional mappings should be made:\n  \
    \ MTA.ReportTransferEnvelope.report-destination-name\n        This should be used\
    \ to generate the To: field.\n   MTA.ReportTransferEnvelope.identifier\n     \
    \   Mapped to the extended RFC 822 field \"X400-MTS-Identifier:\".\n        It\
    \ may also be used to derive a \"Message-Id:\" field.\n   MTA.ReportTransferEnvelope.trace-information\n\
    \        and\n   MTA.ReportTransferEnvelope.internal-trace-information\n     \
    \   Mapped onto the extended RFC 822 field \"X400-Received:\", as\n        described\
    \ in Section 5.3.7.  The first element should also\n        be used to generate\
    \ the \"Date:\" field, and the\n        EBNF.failure-point.\n      MTA.PerRecipientReportTransferFields.last-trace-information\n\
    \      Mapped to EBNF.recipient-info (last trace)\n      MTA.PerReportTransferFields.subject-intermediate-trace-information\n\
    \      Mapped to EBNF.drc-field (subject-Intermediate-Trace-Information).\n  \
    \    These fields should be ordered so that the most recent trace element\n  \
    \    comes first.\n"
- title: 5.3.8.3.  Example Delivery Report
  contents:
  - "5.3.8.3.  Example Delivery Report\n   This is an example, of a moderately complex\
    \ report.\n   From: The Postmaster <postmaster@cs.ucl.ac.uk>\n   To: jpo@computer-science.nottingham.ac.uk\n\
    \   Subject: X.400 Delivery Report\n   Message-Type: Delivery Report\n   Date:\
    \ Wed, 21 Jun 89 08:45:25 +0100\n   X400-MTS-Identifier: /PRMD=UK.AC/ADMD=Gold\
    \ 400/C=GB/;13412345235\n   This report relates to your message:\n     Date: Wed,\
    \ 21 Jun 89 06:15:43 +0000\n     Message-ID:  <8907140715.aa09015@CS.Nott.AC.UK>\n\
    \     Subject: Now it's the fine tuning .... !\n     To: Piete Brooks (Postmaster)\
    \ <pb@computer-lab.cambridge.ac.uk>\n   of Wed, 21 Jun 89 06:15:43 +0000\n   It\
    \ was generated by mta PK in /PRMD=UK/ADMD=DBP/C=DE/\n   at Wed, 21 Jun 89 08:45:25\
    \ +0100\n   It was later converted to RFC 822 by: Mail-Gateway@oxbridge.ac.uk\n\
    \   at Wed, 21 Jun 89 08:45:26 +0100\n   Your message was not delivered to: bad-user@nowhere\n\
    \   for the following reason: Rendition problem with punctuation\n           (Umlaut\
    \ failure)\n   -----------------------------------------------\n   The following\
    \ information is derived from the Report\n   It may be useful for problem diagnosis:\n\
    \   Subject-Submission-Identifier:\n                          [/PRMD=UK.AC/ADMD=Gold\
    \ 400/C=GB/;148996]\n   Content-Identifier:  X.400 Delivery Report\n   Content-Type:\
    \ P2-1988 (22)\n   Original-Encoded-Information-Types: ia5\n   Content-Correlator:\
    \ Date: Wed, 21 Jun 89 06:15:43 +0000\n       Message-ID:  <8907140715.aa09015@CS.Nott.AC.UK>\n\
    \       Subject: Now it's the fine tuning .... !\n       To: Piete Brooks (Postmaster)\
    \ <pb@computer-lab.cambridge.ac.uk>\n   Recipient-Info:\n       bad-user@nowhere,\
    \ /S=bad-user/PRMD=nowhere/ADMD=DBP/C=DE/ ;\n       FAILURE reason Physical-Rendition-Not-Performed\
    \ (3) ;\n       diagnostic Punctuation-Symbol-Loss (23) ;\n       supplementary\
    \ info Umlaut failure\n   The Original Message follows:\n   Subject: Now it's\
    \ the fine tuning .... !\n   Date: Wed, 21 Jun 89 06:15:43 +0000\n   From: Julian\
    \ Onions <jpo@computer-science.nottingham.ac.uk>\n   To: Piete Brooks (Postmaster)\
    \ <pb@computer-lab.cambridge.ac.uk>\n   Cc: bad-user@nowhere\n   Message-ID: \
    \ <8907140715.aa09015@CS.Nott.AC.UK>\n   A short test\n"
- title: 5.3.9.  Probe
  contents:
  - "5.3.9.  Probe\n   This is an MTS internal issue.  Any probe should be serviced\
    \ by the\n   gateway, as there is no equivalent RFC 822 functionality.  The value\n\
    \   of the reply is dependent on whether the gateway could service an MTS\n  \
    \ Message with the values specified in the probe.  The reply should\n   make use\
    \ of MTS.SupplementaryInformation to indicate that the probe\n   was serviced\
    \ by the gateway.\n"
- title: Appendix A - Differences with RFC 987
  contents:
  - "Appendix A - Differences with RFC 987\n   This appendix summarises changes between\
    \ this document and RFC\n   987/RFC 1026.\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   The model has shifted from a protocol based mapping to a\
    \ service\n   based mapping.  This has increased the generality of the\n   specification,\
    \ and improved the model.  This change affects the\n   entire document.\n   A\
    \ restriction on scope has been added.\n"
- title: 2.  Service Elements
  contents:
  - "2.  Service Elements\n      -    The new service elements of X.400 are dealt\
    \ with.\n      -    A clear distinction is made between origination and\n    \
    \       reception.\n"
- title: 3.  Basic Mappings
  contents:
  - "3.  Basic Mappings\n      -    Add teletex support.\n      -    Add object identifier\
    \ support.\n      -    Add labelled integer support.\n      -    Make PrintableString\
    \ <-> ASCII mapping reversible.\n      -    The printable string mapping is aligned\
    \ to the NBS mapping\n           derived from RFC 987.\n"
- title: 4.  Addressing
  contents:
  - "4.  Addressing\n      -    Support for new addressing attributes.\n      -  \
    \  The message ID mapping is changed to not be table driven.\n"
- title: 5.  Detailed Mappings
  contents:
  - "5.  Detailed Mappings\n      -    Define extended IPM Header, and use instead\
    \ of second body\n           part for RFC 822 extensions.\n      -    Realignment\
    \ of element names.\n      -    New syntax for reports, simplifying the header\
    \ and\n           introducing a mandatory body format (the RFC 987 header\n  \
    \         format was unusable).\n      -    Drop complex autoforwarded mapping.\n\
    \      -    Add full mapping for IP Notifications, defining a body\n         \
    \  format.\n      -    Adopt an MTS Identifier syntax in line with the O/R Address\n\
    \           syntax.\n      -    A new format for X400 Trace representation on\
    \ the RFC 822\n           side.\n"
- title: 6.  Appendices
  contents:
  - "6.  Appendices\n      -    Move Appendix on restricted 822 mappings to a separate\
    \ RFC.\n      -    Delete Phonenet and SMTP Appendixes.\n"
- title: Appendix B - Mappings specific to the JNT Mail
  contents:
  - "Appendix B - Mappings specific to the JNT Mail\n   This Appendix is specific\
    \ to the JNT Mail Protocol.  It describes\n   specific changes in the context\
    \ of this protocol.\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   There are five aspects of a gateway which are JNT Mail Specific.\n\
    \   These are each given a section of this appendix.\n"
- title: 2.  Domain Ordering
  contents:
  - "2.  Domain Ordering\n   When interpreting and generating domains, the UK NRS\
    \ domain ordering\n   must be used.\n"
- title: '3.  Acknowledge-To:'
  contents:
  - "3.  Acknowledge-To:\n   This field has no direct functional equivalent in X.400.\
    \  However, it\n   can be supported to an extent, and can be used to improve X.400\n\
    \   support.\n   If an Acknowledge-To: field is present when going from JNT Mail\
    \ to\n   X.400, MTS.PerRecipientSubmissionFields.originator-request-\n   report.report\
    \ shall be set for each recipient.  If there is more that\n   one address in the\
    \ Acknowledge-To: field, or if the one address is\n   not equivalent to the 822-MTS\
    \ return address, then:\n      1.   Acknowledgement(s) should be generated by\
    \ the gateway.  The\n           text of these acknowledgements should indicate\
    \ that they are\n           generated by the gateway.\n      2.   The Acknowledge-To:\
    \ field should also be passed as an\n           extension heading.\n   When going\
    \ from X.400 to JNT Mail, in cases where\n   MTA.PerRecipientMessageTransferFields.per-recipient-indicators.\n\
    \   originator-report is set, the copy of the message to that recipient\n   should\
    \ have an Acknowledge-To: field containing the\n   MTS.OtherMessageDeliveryFields.originator-name.\
    \  No special treatment\n   should be given when MTA.PerRecipientMessageTransferFields.per-\n\
    \   recipient-indicators.  originating-MTA-report is set.  No attempt\n   should\
    \ be made to map Receipt notification requests onto\n   Acknowledge-To:, as no\
    \ association can be guaranteed between IPMS and\n   MTS level addressing information.\n"
- title: 4.  Trace
  contents:
  - "4.  Trace\n   JNT Mail trace uses the Via: syntax.  When going from JNT Mail\
    \ to\n   X.400, a mapping similar to that for Received:  is used. No\n   MTS.GlobalDomainIdentifier\
    \ of the site making the trace can be\n   derived from the Via:, so a value for\
    \ the gateway should be used.\n   The trace text, including the \"Via:\", should\
    \ be unfolded, truncated\n   to MTS.ub-mta-name-length (32), and mapped to\n \
    \  MTA.InternalTraceInformationElement.mta-name.  There is no JNT Mail\n   specific\
    \ mapping for the reverse direction.\n"
- title: 5.  Timezone specification
  contents:
  - "5.  Timezone specification\n   The extended syntax of zone defined in the JNT\
    \ Mail Protocol should\n   be used in the mapping of UTCTime defined in Chapter\
    \ 3.\n"
- title: 6.  Lack of 822-MTS originator specification
  contents:
  - "6.  Lack of 822-MTS originator specification\n   In JNT Mail the default mapping\
    \ of the\n   MTS.OtherMessageDeliveryFields.originator-name is to the Sender:\n\
    \   field.  This can cause a problem when going from X.400 to JNT Mail if\n  \
    \ the mapping of IPMS.Heading has already generated a Sender: field.\n   To overcome\
    \ this, new extended JNT Mail field is defined.  This is\n   chosen to align with\
    \ the JNT recommendation for interworking with\n   full RFC 822 systems [Kille84b].\n\
    \      original-sender     = \"Original-Sender\" \":\" mailbox\n   If an IPM has\
    \ no IPMS.Heading.authorising-users component and\n   IPMS.Heading.originator.formal-name\
    \ is different from\n   MTS.OtherMessageDeliveryFields.originator-name, map\n\
    \   MTS.OtherMessageDeliveryFields.originator-name, onto the Sender:\n   field.\n\
    \   If an IPM has a IPMS.Heading.authorising-users component, and\n   IPMS.Heading.originator.formal-name\
    \ is different from\n   MTS.OtherMessageDeliveryFields.originator-name,\n   MTS.OtherMessageDeliveryFields.originator-name\
    \ should be mapped onto\n   the Sender: field, and IPMS.Heading.originator mapped\
    \ onto the\n   Original-Sender: field.\n   In other cases the MTS.OtherMessageDeliveryFields.originator-name,\
    \ is\n   already correctly represented.\n"
- title: Appendix C - Mappings specific to UUCP Mail
  contents:
  - "Appendix C - Mappings specific to UUCP Mail\n   Gatewaying of UUCP and X.400\
    \ is handled by first gatewaying the UUCP\n   address into RFC 822 syntax (using\
    \ RFC 976) and then gatewaying the\n   resulting RFC 822 address into X.400. \
    \ For example, an X.400 address:\n      Country         US\n      Organisation\
    \    Xerox\n      Personal Name   John Smith\n   might be expressed from UUCP\
    \ as\n      inthop!gate!gatehost.COM!/C=US/O=Xerox/PN=John.Smith/\n   (assuming\
    \ gate is a UUCP-Internet gateway and gatehost.COM is an\n   Internet-X.400 gateway)\
    \ or\n      inthop!gate!Xerox.COM!John.Smith\n   (assuming that Xerox.COM and\
    \ /C=US/O=Xerox/ are equivalent.)\n   In the other direction, a UUCP address Smith@ATT.COM,\
    \ integrated into\n   822, would be handled as any other 822 address.  A non-integrated\n\
    \   address such as inthop!dest!user might be handled through a pair of\n   gateways:\n\
    \      Country         US\n      ADMD            ATT\n      PRMD            Internet\n\
    \      Organisation    GateOrg\n      RFC-822         inthop!dest!user@gatehost.COM\n\
    \   or through a single X.400 to UUCP gateway:\n      Country         US\n   \
    \   ADMD            ATT\n      PRMD            UUCP\n      Organisation    GateOrg\n\
    \      RFC-822         inthop!dest!user\n"
- title: Appendix D - Object Identifier Assignment
  contents:
  - "Appendix D - Object Identifier Assignment\n   An object identifier is needed\
    \ for the extension IPMS element.  The\n   following value should be used.\n \
    \     rfc-987-88 OBJECT IDENTIFIER ::=\n          {ccitt data(9) pss(2342) ucl(234219200300)\
    \ rfc-987-88(200)}\n      id-rfc-822-field OBJECT IDENTIFIER ::= {rfc987-88 field(0)}\n"
- title: Appendix E - BNF Summary
  contents:
  - "Appendix E - BNF Summary\n   boolean = \"TRUE\" / \"FALSE\"\n   numericstring\
    \ = *DIGIT\n   printablestring  = *( ps-char )\n   ps-restricted-char      = 1DIGIT\
    \ /  1ALPHA / \" \" / \"'\" / \"+\"\n                      / \",\" / \"-\" / \"\
    .\" / \"/\" / \":\" / \"=\" / \"?\"\n   ps-delim         = \"(\" / \")\"\n   ps-char\
    \          = ps-delim / ps-restricted-char\n   ps-encoded       = *( ps-restricted-char\
    \ / ps-encoded-char )\n   ps-encoded-char  = \"(a)\"               ; (@)\n   \
    \                  / \"(p)\"               ; (%)\n                     / \"(b)\"\
    \               ; (!)\n                     / \"(q)\"               ; (\")\n \
    \                    / \"(u)\"               ; (_)\n                     / \"\
    (l)\"               ; \"(\"\n                     / \"(r)\"               ; \"\
    )\"\n                     / \"(\" 3DIGIT \")\"\n   teletex-string   = *( ps-char\
    \ / t61-encoded )\n   t61-encoded      = \"{\" 1* t61-encoded-char \"}\"\n   t61-encoded-char\
    \ = 3DIGIT\n   teletex-and-or-ps = [ printablestring ] [ \"*\" teletex-string\
    \ ]\n   labelled-integer ::= [ key-string ] \"(\" numericstring \")\"\n   key-string\
    \      = *key-char\n   key-char        = <a-z, A-Z, 1-9, and \"-\">\n   object-identifier\
    \ ::= [ defined-value ] oid-comp-list\n   oid-comp-list ::= oid-comp oid-comp-list\n\
    \                   | oid-comp\n   defined-value ::= key-string\n   oid-comp ::=\
    \ [ key-string ] \"(\" numericstring \")\"\n   encoded-info    = 1#encoded-type\n\
    \   encoded-type    = built-in-eit / object-identifier\n   built-in-eit    = \"\
    Undefined\"         ; undefined (0)\n                   / \"Telex\"          \
    \   ; tLX (1)\n                   / \"IA5-Text\"          ; iA5Text (2)\n    \
    \               / \"G3-Fax\"            ; g3Fax (3)\n                   / \"TIF0\"\
    \              ; tIF0 (4)\n                   / \"Teletex\"           ; tTX (5)\n\
    \                   / \"Videotex\"          ; videotex (6)\n                 \
    \  / \"Voice\"             ; voice (7)\n                   / \"SFD\"         \
    \      ; sFD (8)\n                   / \"TIF1\"              ; tIF1 (9)\n   encoded-pn\
    \      = [ given \".\" ] *( initial \".\" ) surname\n   given           = 2*<ps-char\
    \ not including \".\">\n   initial         = ALPHA\n   surname         = printablestring\n\
    \   std-or-address  = 1*( \"/\" attribute \"=\" value ) \"/\"\n   attribute  \
    \     = standard-type\n                   / \"RFC-822\"\n                   /\
    \ registered-dd-type\n                   / dd-key \".\" std-printablestring\n\
    \   standard-type   = key-string\n   registered-dd-type\n                   =\
    \ key-string\n   dd-key          = key-string\n   value           = std-printablestring\n\
    \   std-printablestring\n                   = *( std-char / std-pair )\n   std-char\
    \        = <\"{\", \"}\", \"*\", and any ps-char\n                           \
    \      except \"/\" and \"=\">\n   std-pair        = \"$\" ps-char\n   dmn-or-address\
    \  = dmn-part *( \".\" dmn-part )\n   dmn-part        = attribute \"$\" value\n\
    \   attribute       = standard-type\n                   / \"~\" dmn-printablestring\n\
    \   value           = dmn-printablestring\n                   / \"@\"\n   dmn-printablestring\
    \ =\n                   = *( dmn-char / dmn-pair )\n   dmn-char        = <\"{\"\
    , \"}\", \"*\", and any ps-char\n                                         except\
    \ \".\">\n   dmn-pair        = \".\"\n   global-id = std-or-address\n   mta-field\
    \       = \"X400-Received\" \":\" x400-trace\n                   / \"Deferred-Delivery\"\
    \ \":\" date-time\n                   / \"Latest-Delivery-Time\" \":\" date-time\n\
    \   x400-trace       = \"by\" md-and-mta \";\"\n                    [ \"deferred\
    \ until\" date-time \";\" ]\n                    [ \"converted\" \"(\" encoded-info\
    \ \")\" \";\" ]\n                    [ \"attempted\" md-and-mta \";\"  ]\n   \
    \                    action-list\n                       \";\" arrival-time\n\
    \   md-and-mta       = [ \"mta\" mta \"in\" ]  global-id\n   mta             \
    \ = word\n   arrival-time     = date-time\n   action-list      = 1#action\n  \
    \ action           = \"Redirected\"\n                    / \"Expanded\"\n    \
    \                / \"Relayed\"\n                    / \"Rerouted\"\n   dr-body-format\
    \ = dr-summary <CRLF>\n                    dr-recipients <CRLF>\n            \
    \        dr-extra-information <CRLF>\n                    dr-content-return\n\
    \   dr-content-return = \"The Original Message is not available\"\n          \
    \         / \"The Original Message follows:\"\n                     <CRLF> <CRLF>\
    \ message\n   dr-summary = \"This report relates to your message:\" <CRLF>\n \
    \                  content-correlator <CRLF> <CRLF>\n                \"of\" date-time\
    \ <CRLF> <CRLF>\n                \"It was generated by:\" report-point <CRLF>\n\
    \                \"at\" date-time <CRLF> <CRLF>\n                \"It was later\
    \ converted to RFC 822 by:\" mailbox <CRLF>\n                \"at\" date-time\
    \ <CRLF> <CRLF>\n   dr-recipients = *(dr-recipient <CRLF> <CRLF>)\n   dr-recipient\
    \ = dr-recip-success / dr-recip-failure\n   dr-recip-success =\n             \
    \      \"Your message was successfully delivered to:\"\n                   mailbox\
    \ \"at\" date-time\n   dr-recip-failure = \"Your message was not delivered to:\"\
    \n                           mailbox <CRLF>\n                      \"for the following\
    \ reason:\" *word\n   dr-extra-information =\n    \"-----------------------------------------------\"\
    \ <CRLF> <CRLF>\n    \"The following information is derived from the Report\"\
    \ <CRLF>\n    \"It may be useful for problem diagnosis:\" <CRLF> <CRLF>\n   drc-field-list\n\
    \   drc-field-list       = *(drc-field <CRLF>)\n   drc-field = \"Subject-Submission-Identifier\"\
    \ \":\"\n                                   mts-msg-id\n             / \"Content-Identifier\"\
    \ \":\" printablestring\n             / \"Content-Type\" \":\" mts-content-type\n\
    \             / \"Original-Encoded-Information-Types\" \":\"\n               \
    \            encoded-info\n             / \"Originator-and-DL-Expansion-History\"\
    \ \":\"\n                           dl-history\n             / \"Reporting-DL-Name\"\
    \ \":\" mailbox\n             / \"Content-Correlator\" \":\" content-correlator\n\
    \             / \"Recipient-Info\" \":\" recipient-info\n   recipient-info  =\
    \ mailbox \",\" std-or \";\"\n                   report-type\n               \
    \    [ \"converted eits\" encoded-info \";\" ]\n                   [ \"originally\
    \ intended recipient\"\n                           mailbox \",\" std-or \";\"\
    \ ]\n                   [ \"supplementary info\" <\"> printablestring <\"> \"\
    ;\" ]\n                   [ \"redirection history\" 1#redirection \";\"\n    \
    \               [ \"physical forwarding address\"\n                          \
    \               printablestring \";\" ]\n   report-type     = \"SUCCESS\" drc-success\n\
    \                   / \"FAILURE\" drc-failure\n   drc-success     = \"delivered\
    \ at\" date-time \";\"\n                   [ \"type of MTS user\" labelled-integer\
    \ \";\" ]\n   drc-failure     = \"reason\" labelled-integer \";\"\n          \
    \         [ \"diagnostic\" labelled-integer \";\" ]\n   report-point = [ \"mta\"\
    \ word \"in\" ] global-id\n   content-correlator = *word\n   dl-history = 1#(\
    \ mailbox \"(\" date-time \")\")\n   mts-field = \"X400-MTS-Identifier\" \":\"\
    \ mts-msg-id\n             / \"X400-Originator\" \":\" mailbox\n             /\
    \ \"X400-Recipients\" \":\" 1#mailbox\n             / \"Original-Encoded-Information-Types\"\
    \ \":\"\n                               encoded-info\n             / \"X400-Content-Type\"\
    \ \":\" mts-content-type\n             / \"Content-Identifier\" \":\" printablestring\n\
    \             / \"Priority\" \":\" priority\n             / \"Originator-Return-Address\"\
    \ \":\" 1#mailbox\n             / \"DL-Expansion-History\" \":\" mailbox \";\"\
    \ date-time \";\"\n             / \"Redirection-History\" \":\" redirection\n\
    \             / \"Conversion\" \":\" prohibition\n             / \"Conversion-With-Loss\"\
    \ \":\" prohibition\n             / \"Requested-Delivery-Method\" \":\"\n    \
    \                         1*( labelled-integer )\n             / \"Delivery-Date\"\
    \ \":\" date-time\n             / \"Discarded-X400-MTS-Extensions\" \":\"\n  \
    \                           1#( oid / labelled-integer )\n   prohibition     =\
    \ \"Prohibited\" / \"Allowed\"\n   mts-msg-id       = \"[\" global-id \";\" *text\
    \ \"]\"\n   mts-content-type = \"P2\" /  labelled-integer\n                  \
    \ / object-identifer\n   priority        = \"normal\" / \"non-urgent\" / \"urgent\"\
    \n   redirection     = mailbox \";\" \"reason\" \"=\"\n                      \
    \     redirection-reason\n                           \";\" date-time\n   redirection-reason\
    \ =\n             \"Recipient Assigned Alternate Recipient\"\n           / \"\
    Originator Requested Alternate Recipient\"\n           / \"Recipient MD Assigned\
    \ Alternate Recipient\"\n   ipn-body-format = ipn-description <CRLF>\n       \
    \            [ ipn-extra-information <CRLF> ]\n                   ipn-content-return\n\
    \   ipn-description = ipn-receipt / ipn-non-receipt\n   ipn-receipt = \"Your message\
    \ to:\" preferred-recipient <CRLF>\n            \"was received at\" receipt-time\
    \ <CRLF> <CRLF>\n            \"This notification was generated\"\n           \
    \ acknowledgement-mode <CRLF>\n            \"The following extra information was\
    \ given:\" <CRLF>\n            ipn-suppl <CRLF>\n   ipn-non-receipt \"Your message\
    \ to:\"\n            preferred-recipient <CRLF>\n            ipn-reason\n   ipn-reason\
    \ = ipn-discarded / ipn-auto-forwarded\n   ipn-discarded = \"was discarded for\
    \ the following reason:\"\n                   discard-reason <CRLF>\n   ipn-auto-forwarded\
    \ = \"was automatically forwarded.\" <CRLF>\n                   [ \"The following\
    \ comment was made:\"\n                           auto-comment ]\n   ipn-extra-information\
    \ =\n            \"The following information types were converted:\"\n       \
    \     encoded-info\n   ipn-content-return = \"The Original Message is not available\"\
    \n                   / \"The Original Message follows:\"\n                   <CRLF>\
    \ <CRLF> message\n   preferred-recipient = mailbox\n   receipt-time        = date-time\n\
    \   auto-comment        = printablestring\n   ipn-suppl           = printablestring\n\
    \   non-receipt-reason = \"Discarded\" / \"Auto-Forwarded\"\n   discard-reason\
    \     = \"Expired\" / \"Obsoleted\" /\n                           \"User Subscription\
    \ Terminated\"\n   acknowledgement-mode = \"Manually\" / \"Automatically\"\n \
    \  ms-field = \"Obsoletes\" \":\" 1#msg-id\n            / \"Expiry-Date\" \":\"\
    \ date-time\n            / \"Reply-By\" \":\" date-time\n            / \"Importance\"\
    \ \":\" importance\n            / \"Sensitivity\" \":\" sensitivity\n        \
    \    / \"Autoforwarded\" \":\" boolean\n            / \"Incomplete-Copy\" \":\"\
    \n            / \"Language\" \":\" language\n            / \"Message-Type\" \"\
    :\" message-type\n            / \"Discarded-X400-IPMS-Extensions\" \":\" 1#oid\n\
    \   importance      = \"low\" / \"normal\" / \"high\"\n   sensitivity     = \"\
    Personal\" / \"Private\" /\n                          \"Company-Confidential\"\
    \n   language        = 2*ALPHA [ language-description ]\n   language-description\
    \ = printable-string\n   message-type    = \"Delivery Report\"\n             \
    \      / \"InterPersonal Notification\"\n                   / \"Multiple Part\"\
    \n"
- title: Appendix F - Format of address mapping tables
  contents:
  - "Appendix F - Format of address mapping tables\n   There is a need to specify\
    \ the association between the domain and\n   X.400 namespaces described in Chapter\
    \ 4.  The use of this association\n   leads to a better service on both sides\
    \ of the gateway, and so\n   defining mappings and distributing them in the form\
    \ defined in this\n   appendix is strongly encouraged.\n   This syntax defined\
    \ is initially in table form, but the syntax is\n   defined in a manner which\
    \ makes it suitable for use with domain\n   nameservices (such as the Internet\
    \ Domain nameservers or the UK NRS).\n   The mapping is not symmetric, and so\
    \ a separate table is specified\n   for each direction.  If multiple matches are\
    \ possible, the longest\n   possible match should be used.\n   First, an address\
    \ syntax is defined, which is compatible with the\n   syntax used for 822.domains.\
    \  It is intended that this syntax may be\n   used in conjunction with systems\
    \ which support this form of name.\n   To allow the mapping of null attributes\
    \  to be represented, the\n   pseudo-value \"@\" (not a printable string character)\
    \ is used to\n   indicate omission of a level in the hierarchy.  This is distinct\
    \ from\n   the form including the element with no value, although a correct\n\
    \   X.400 implementation will interpret both in the same manner.\n   This syntax\
    \ is not intended to be handled by users.\n      dmn-or-address  = dmn-part *(\
    \ \".\" dmn-part )\n      dmn-part        = attribute \"$\" value\n      attribute\
    \       = standard-type\n                      / \"~\" dmn-printablestring\n \
    \     value           = dmn-printablestring\n                      / \"@\"\n \
    \     dmn-printablestring =\n                          = *( dmn-char / dmn-pair\
    \ )\n      dmn-char        = <\"{\", \"}\", \"*\", and any ps-char\n         \
    \                                     except \".\">\n      dmn-pair        = \"\
    .\"\n      An example usage:\n      ~ROLE$Big.Chief.ADMD$ATT.C$US\n      PRMD$DEC.ADMD$@.C$US\n\
    \   The first example illustrates quoting of a \".\", and the second\n   omission\
    \ of the ADMD level.\n   Various further restrictions are placed on the usage\
    \ of dmn-or-\n   address:\n   1.   Only C, ADMD, PRMD, O, and OU may be used.\n\
    \   2.   There must be a strict ordering of all components, with the\n       \
    \ most significant components on the RHS.\n   3.   No components may be omitted\
    \ from the hierarchy, although\n        the hierarchy may terminate at any level.\
    \  If the mapping is\n        to an omitted component, the \"@\" syntax is used.\n\
    \   For domain -> X.400:\n          domain-syntax \"#\" dmn-or-address \"#\"\n\
    \   Note that the trailing \"#\" is used for clarity, as the dmn-or-\n   address\
    \ syntax can lead to values with trailing blanks.   Lines\n   staring with \"\
    #\" are comments.\n      For example:\n      AC.UK#PRMD$UK.AC.ADMD$GOLD 400.C$GB#\n\
    \      XEROX.COM#O$Xerox.ADMD$ATT.C$US#\n      GMD.DE#O$@.PRMD$GMD.ADMD$DBP.C$DE#\n\
    \   For X.400 -> domain:\n      dmn-or-address \"#\" domain-syntax \"#\"\n   \
    \   For example:\n      #\n      # Mapping table\n      #\n      PRMD$UK.AC.ADMD$GOLD\
    \ 400.C$GB#AC.UK#\n"
- title: References
  contents:
  - "References\n   [Braden89a]  Braden, R., Editor, \"Requirements for Internet Hosts\
    \ --\n   Application and Support\", RFC 1123, USC/Information Sciences\n   Institute,\
    \ October 1989.\n   [CCITT88a]  CCITT, \"CCITT Recommendations X.408\", Message\
    \ Handling\n   Systems: Encoded Information Type Conversion Rules, CCITT, December\n\
    \   1988.\n   [CCITT/ISO88a]  CCITT/ISO, \"CCITT Recommendations X.400/ ISO IS\n\
    \   10021-1\", Message Handling: System and Service Overview, CCITT/ISO,\n   December\
    \ 1988.\n   [CCITT/ISO88b]  CCITT/ISO, \"CCITT Recommendations X.420/ ISO IS\n\
    \   10021-7\", Message Handling Systems: Interpersonal Messaging System,\n   CCITT/ISO,\
    \ December 1988.\n   [CCITT/ISO88c]  CCITT/ISO, \"CCITT Recommendations X.411/\
    \ ISO IS\n   10021-4\", Message Handling Systems: Message Transfer System: Abstract\n\
    \   Service Definition and Procedures, CCITT/ISO, December 1988.\n   [CCITT/ISO88d]\
    \  CCITT/ISO, \"Specification of Abstract Syntax Notation\n   One (ASN.1)\", CCITT\
    \ Recommendation X.208 / ISO IS 8824, CCITT/ISO,\n   December 1988.\n   [Crocker82a]\
    \  Crocker, D., \"Standard of the Format of ARPA Internet\n   Text Messages\"\
    , RFC 822, August 1982.\n   [Horton86a]  Horton, M., \"UUCP Mail Interchange Format\
    \ Standard\", RFC\n   976, February 1986.\n   [Kille84b]  Kille, S., \"Gatewaying\
    \ between RFC 822 and JNT Mail\", JNT\n   Mailgroup Note 15, May 1984.\n   [Kille84a]\
    \  Kille, S., Editor, \"JNT Mail Protocol (revision 1.0)\",\n   Joint Network\
    \ Team, Rutherford Appleton Laboratory, March 1984.\n   [Kille86a]  Kille, S.,\
    \ \"Mapping Between X.400 and RFC 822\",  UK\n   Academic Community Report (MG.19)\
    \ / RFC 987, June 1986.\n   [Kille87a]  Kille, S., \"Addendum to RFC 987\", UK\
    \ Academic Community\n   Report (MG.23) / RFC 1026, August 1987.\n   [Kille89a]\
    \  Kille, S., \"A String Encoding of Presentation Address\",\n   UCL Research\
    \ Note 89/14, March 1989.\n   [Kille89b]  Kille, S., \"Mapping Between Full RFC\
    \ 822 and RFC 822 with\n   Restricted Encoding\", RFC 1137, December 1989.\n \
    \  [Larmouth83a]  Larmouth, J., \"JNT Name Registration Technical Guide\",\n \
    \  Salford University Computer Centre, April 1983.\n   [Mockapetris87a]  Mockapetris,\
    \ P., \"Domain Names - Concepts and\n   Facilities\", RFC 1034, USC/Information\
    \ Sciences Institute, November\n   1987.\n   [Postel82a]  Postel, J., \"Simple\
    \ Mail Transfer Protocol\", RFC 821,\n   USC/Information Sciences Institute, August\
    \ 1982.\n   [Rose85a]  Rose M., and E. Stefferud, \"Proposed Standard for Message\n\
    \   Encapsulation\", RFC 934, January 1985.\n   [Systems85a]  CEN/CENELEC/Information\
    \ Technology/Working Group on\n   Private Message Handling Systems, \"FUNCTIONAL\
    \ STANDARD A/3222\",\n   CEN/CLC/IT/WG/PMHS N 17, October 1985.\n"
- title: Security Considerations
  contents:
  - "Security Considerations\n   Security issues are not discussed in this memo.\n"
- title: Author's Address
  contents:
  - "Author's Address\n   Steve Kille\n   University College London\n   Gower Street\n\
    \   WC1E 6BT\n   England\n   Phone: +44-1-380-7294\n   EMail: S.Kille@Cs.Ucl.AC.UK\n"
