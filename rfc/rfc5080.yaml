- title: __initial_text__
  contents:
  - "       Common Remote Authentication Dial In User Service (RADIUS)\n         \
    \      Implementation Issues and Suggested Fixes\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Abstract
  contents:
  - "Abstract\n   This document describes common issues seen in Remote Authentication\n\
    \   Dial In User Service (RADIUS) implementations and suggests some\n   fixes.\
    \  Where applicable, ambiguities and errors in previous RADIUS\n   specifications\
    \ are clarified.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................2\n\
    \      1.1. Terminology ................................................3\n  \
    \    1.2. Requirements Language ......................................3\n   2.\
    \ Issues ..........................................................3\n      2.1.\
    \ Session Definition .........................................3\n           2.1.1.\
    \ State Attribute .....................................3\n           2.1.2. Request-ID\
    \ Supplementation ..........................6\n      2.2. Overload Conditions\
    \ ........................................7\n           2.2.1. Retransmission\
    \ Behavior .............................7\n           2.2.2. Duplicate Detection\
    \ and Orderly Delivery ...........10\n           2.2.3. Server Response to Overload\
    \ ........................11\n      2.3. Accounting Issues .........................................12\n\
    \           2.3.1. Attributes Allowed in an Interim Update ............12\n  \
    \         2.3.2. Acct-Session-Id and Acct-Multi-Session-Id ..........12\n    \
    \       2.3.3. Request Authenticator ..............................13\n      \
    \     2.3.4. Interim-Accounting-Interval ........................13\n        \
    \   2.3.5. Counter Values in the RADIUS Management\n                  Information\
    \ Base (MIB) .............................14\n      2.4. Multiple Filter-ID Attributes\
    \ .............................15\n      2.5. Mandatory and Optional Attributes\
    \ .........................16\n      2.6. Interpretation of Access-Reject ...........................18\n\
    \           2.6.1. Improper Use of Access-Reject ......................18\n  \
    \         2.6.2. Service Request Denial .............................19\n    \
    \  2.7. Addressing ................................................20\n      \
    \     2.7.1. Link-Local Addresses ...............................20\n        \
    \   2.7.2. Multiple Addresses .................................20\n      2.8.\
    \ Idle-Timeout ..............................................21\n      2.9. Unknown\
    \ Identity ..........................................21\n      2.10. Responses\
    \ After Retransmissions ..........................22\n      2.11. Framed-IPv6-Prefix\
    \ .......................................23\n   3. Security Considerations ........................................24\n\
    \   4. References .....................................................25\n  \
    \    4.1. Normative References ......................................25\n    \
    \  4.2. Informative References ....................................25\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   The last few years have seen an increase in the deployment\
    \ of RADIUS\n   clients and servers.  This document describes common issues seen\
    \ in\n   RADIUS implementations and suggests some fixes.  Where applicable,\n\
    \   ambiguities and errors in previous RADIUS specifications are\n   clarified.\n"
- title: 1.1.  Terminology
  contents:
  - "1.1.  Terminology\n   This document uses the following terms:\n   Network Access\
    \ Server (NAS)\n      The device providing access to the network.  Also known\
    \ as the\n      Authenticator in IEEE 802.1X or Extensible Authentication Protocol\n\
    \      (EAP) terminology, or RADIUS client.\n   service\n      The NAS provides\
    \ a service to the user, such as network access via\n      802.11 or Point to\
    \ Point Protocol (PPP).\n   session\n      Each service provided by the NAS to\
    \ a peer constitutes a session,\n      with the beginning of the session defined\
    \ as the point where\n      service is first provided, and the end of the session\
    \ is defined\n      as the point where service is ended.  A peer may have multiple\n\
    \      sessions in parallel or series if the NAS supports that, with each\n  \
    \    session generating a separate start and stop accounting record.\n   silently\
    \ discard\n      This means the implementation discards the packet without further\n\
    \      processing.  The implementation SHOULD provide the capability of\n    \
    \  logging the error, including the contents of the silently\n      discarded\
    \ packet, and SHOULD record the event in a statistics\n      counter.\n"
- title: 1.2.  Requirements Language
  contents:
  - "1.2.  Requirements Language\n   In this document, several words are used to signify\
    \ the requirements\n   of the specification.  The key words \"MUST\", \"MUST NOT\"\
    , \"REQUIRED\",\n   \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\"\
    ,  \"MAY\",\n   and \"OPTIONAL\" in this document are to be interpreted as described\
    \ in\n   [RFC2119].\n"
- title: 2.  Issues
  contents:
  - '2.  Issues

    '
- title: 2.1.  Session Definition
  contents:
  - '2.1.  Session Definition

    '
- title: 2.1.1.  State Attribute
  contents:
  - "2.1.1.  State Attribute\n   Regarding the State attribute, [RFC2865] Section\
    \ 5.24 states:\n      This Attribute is available to be sent by the server to\
    \ the client\n      in an Access-Challenge and MUST be sent unmodified from the\
    \ client\n      to the server in the new Access-Request reply to that challenge,\n\
    \      if any.\n      This Attribute is available to be sent by the server to\
    \ the client\n      in an Access-Accept that also includes a Termination-Action\n\
    \      Attribute with the value of RADIUS-Request.  If the NAS performs\n    \
    \  the Termination-Action by sending a new Access-Request upon\n      termination\
    \ of the current session, it MUST include the State\n      attribute unchanged\
    \ in that Access-Request.\n   Some RADIUS client implementations do not properly\
    \ use the State\n   attribute in order to distinguish a restarted EAP authentication\n\
    \   process from the continuation of an ongoing process (by the same user\n  \
    \ on the same NAS and port).  Where an EAP-Message attribute is\n   included in\
    \ an Access-Challenge or Access-Accept attribute, RADIUS\n   servers SHOULD also\
    \ include a State attribute.  See Section 2.1.2 on\n   Request ID supplementation\
    \ for additional benefits to using the State\n   attribute in this fashion.\n\
    \   As defined in [RFC2865] Table 5.44, Access-Request packets may\n   contain\
    \ a State attribute.  The table does not qualify this\n   statement, while the\
    \ text in Section 5.24 (quoted above) adds other\n   requirements not specified\
    \ in that table.\n   We extend the requirements of [RFC2865] to say that Access-Requests\n\
    \   that are part of an ongoing Access-Request / Access-Challenge\n   authentication\
    \ process SHOULD contain a State attribute.  It is the\n   responsibility of the\
    \ server, to send a State attribute in an\n   Access-Challenge packet, if that\
    \ server needs a State attribute in a\n   subsequent Access-Request to tie multiple\
    \ Access-Requests together\n   into one authentication session.  As defined in\
    \ [RFC2865] Section\n   5.24, the State MUST be sent unmodified from the client\
    \ to the server\n   in the new Access-Request reply to that challenge, if any.\n\
    \   While most server implementations require the presence of a State\n   attribute\
    \ in an Access-Challenge packet, some challenge-response\n   systems can distinguish\
    \ the initial request from the response to the\n   challenge without using a State\
    \ attribute to track an authentication\n   session.  The Access-Challenge and\
    \ subsequent Access-Request packets\n   for those systems do not need to contain\
    \ a State attribute.\n   Other authentication mechanisms need to tie a sequence\
    \ of Access-\n   Request / Access-Challenge packets together into one ongoing\n\
    \   authentication session.  Servers implementing those authentication\n   mechanisms\
    \ SHOULD include a State attribute in Access-Challenge\n   packets.\n   In general,\
    \ if the authentication process involves one or more\n   Access-Request / Access-Challenge\
    \ sequences, the State attribute\n   SHOULD be sent by the server in the Access-Challenge\
    \ packets.  Using\n   the State attribute to create a multi-packet session is\
    \ the simplest\n   method available in RADIUS today.  While other methods of creating\n\
    \   multi-packet sessions are possible (e.g., [RFC3579] Section 2.6.1),\n   those\
    \ methods are NOT RECOMMENDED.\n   The only permissible values for a State attribute\
    \ are values provided\n   in an Access-Accept, Access-Challenge, CoA-Request or\
    \ Disconnect-\n   Request packet.  A RADIUS client MUST use only those values\
    \ for the\n   State attribute that it has previously received from a server. \
    \ An\n   Access-Request sent as a result of a new or restarted authentication\n\
    \   run MUST NOT include the State attribute, even if a State attribute\n   has\
    \ previously been received in an Access-Challenge for the same user\n   and port.\n\
    \   Access-Request packets that contain a Service-Type attribute with the\n  \
    \ value Authorize Only (17) MUST contain a State attribute.  Access-\n   Request\
    \ packets that contain a Service-Type attribute with value Call\n   Check (10)\
    \ SHOULD NOT contain a State attribute.  Any other Access-\n   Request packet\
    \ that performs authorization checks MUST contain a\n   State attribute.  This\
    \ last requirement often means that an Access-\n   Accept needs to contain a State\
    \ attribute, which can then be used in\n   a later Access-Request that performs\
    \ authorization checks.\n   The standard use case for Call Check is pre-screening\
    \ authentication\n   based solely on the end-point identifier information, such\
    \ as phone\n   number or Media Access Control (MAC) address in Calling-Station-ID\n\
    \   and optionally Called-Station-ID.  In this use case, the NAS has no\n   way\
    \ to obtain a State attribute suitable for inclusion in an Access-\n   Request.\
    \  Other, non-standard, uses of Call Check may require or\n   permit the use of\
    \ a State attribute, but are beyond the scope of this\n   document.\n   In an\
    \ Access-Request with a Service-Type Attribute with value Call\n   Check, it is\
    \ NOT RECOMMENDED for the User-Name and User-Password\n   attributes to contain\
    \ the same values (e.g., a MAC address).\n   Implementing MAC address checking\
    \ without using a Service-Type of\n   Call Check is NOT RECOMMENDED.  This practice\
    \ gives an attacker both\n   the clear-text and cipher-text of the User-Password\
    \ field, which\n   permits many attacks on the security of the RADIUS protocol.\
    \  For\n   example, if the Request Authenticator does not satisfy the [RFC2865]\n\
    \   requirements on global and temporal uniqueness, the practice\n   described\
    \ above may lead to the compromise of the User-Password\n   attribute in other\
    \ Access-Requests for unrelated users.  Access to\n   the cipher-text enables\
    \ offline dictionary attacks, potentially\n   exposing the shared secret and compromising\
    \ the entire RADIUS\n   protocol.\n   Any Access-Request packet that performs\
    \ authorization checks,\n   including Call Check, SHOULD contain a Message-Authenticator\n\
    \   attribute.  Any response to an Access-Request performing an\n   authorization\
    \ check MUST NOT contain confidential information about\n   any user (such as\
    \ Tunnel-Password), unless that Access-Request\n   contains a State attribute.\
    \  The use of State here permits the\n   authorization check to be tied to an\
    \ earlier user authentication.  In\n   that case, the server MAY respond to the\
    \ NAS with confidential\n   information about that user.  The server MUST NOT\
    \ respond to that\n   authorization check with confidential information about\
    \ any other\n   user.\n   For an Access-Request packet performing an authorization\
    \ check that\n   does not contain a State attribute, the server MUST respond with\
    \ an\n   Access-Reject.\n"
- title: 2.1.2.  Request-ID Supplementation
  contents:
  - "2.1.2.  Request-ID Supplementation\n   [RFC3579] Section 2.6.1 states:\n    \
    \  In EAP, each session has its own unique Identifier space.  RADIUS\n      server\
    \ implementations MUST be able to distinguish between EAP\n      packets with\
    \ the same Identifier existing within distinct\n      sessions, originating on\
    \ the same NAS.  For this purpose, sessions\n      can be distinguished based\
    \ on NAS and session identification\n      attributes.  NAS identification attributes\
    \ include NAS-Identifier,\n      NAS-IPv6-Address and NAS-IPv4-Address.  Session\
    \ identification\n      attributes include User-Name, NAS-Port, NAS-Port-Type,\
    \ NAS-Port-\n      Id, Called-Station-Id, Calling-Station-Id and Originating-Line-\n\
    \      Info.\n   There are issues with the suggested algorithm.  Since proxies\
    \ may\n   modify Access-Request attributes such as NAS-IP-Address, depending on\n\
    \   any attribute under control of the NAS to distinguish request\n   identifiers\
    \ can result in deployment problems.\n   The FreeRADIUS implementation does not\
    \ track EAP identifiers by NAS-\n   IP-Address or other non-EAP attributes sent\
    \ by the NAS.  Instead, it\n   uses the EAP identifier, source Internet Protocol\
    \ (IP) address, and\n   the State attribute as a \"key\" to uniquely identify\
    \ each EAP session.\n   Since the State attribute is under the control of the\
    \ RADIUS server,\n   the uniqueness of each session is controlled by the server,\
    \ not the\n   NAS.  The algorithm used in FreeRADIUS is as follows:\n      if\
    \ (EAP start, or EAP identity) {\n        allocate unique State Attribute\n  \
    \      insert session into \"active session\" table with\n             key=(EAP\
    \ identifier, State, source IP)\n      } else {\n        look up active session\
    \ in table, with above key\n      }\n   This algorithm appears to work well in\
    \ a variety of situations,\n   including situations where home servers receive\
    \ messages via\n   intermediate RADIUS proxies.\n   Implementations that do not\
    \ use this algorithm are often restricted\n   to having an EAP Identifier space\
    \ per NAS, or perhaps one that is\n   global to the implementation.  These restrictions\
    \ are unnecessary\n   when the above algorithm is used, which gives each session\
    \ a unique\n   EAP Identifier space.  The above algorithm SHOULD be used to track\n\
    \   EAP sessions in preference to any other method.\n"
- title: 2.2.  Overload Conditions
  contents:
  - '2.2.  Overload Conditions

    '
- title: 2.2.1.  Retransmission Behavior
  contents:
  - "2.2.1.  Retransmission Behavior\n   [RFC2865] Section 2.4 describes the retransmission\
    \ requirements for\n   RADIUS clients:\n      At one extreme, RADIUS does not\
    \ require a \"responsive\" detection\n      of lost data.  The user is willing\
    \ to wait several seconds for the\n      authentication to complete.  The generally\
    \ aggressive Transmission\n      Control Protocol (TCP) retransmission (based\
    \ on average round trip\n      time) is not required, nor is the acknowledgment\
    \ overhead of TCP.\n      At the other extreme, the user is not willing to wait\
    \ several\n      minutes for authentication.  Therefore the reliable delivery\
    \ of\n      TCP data two minutes later is not useful.  The faster use of an\n\
    \      alternate server allows the user to gain access before giving up.\n   Some\
    \ existing RADIUS clients implement excessively aggressive\n   retransmission\
    \ behavior, utilizing default retransmission timeouts of\n   one second or less\
    \ without support for congestive backoff.  When\n   deployed at a large scale,\
    \ these implementations are susceptible to\n   congestive collapse.  For example,\
    \ as the result of a power failure,\n   a network with 3,000 NAS devices with\
    \ a fixed retransmission timer of\n   one second will continuously generate 3,000\
    \ RADIUS Access-Requests\n   per second.  This is sufficient to overwhelm most\
    \ RADIUS servers.\n   Suggested solutions include:\n      [a]   Jitter.  To avoid\
    \ synchronization, a RADIUS client SHOULD\n            incorporate induced jitter\
    \ within its retransmission\n            algorithm, as specified below.\n    \
    \  [b]   Congestive backoff.  While it is not necessary for RADIUS\n         \
    \   client implementations to implement complex retransmission\n            algorithms,\
    \ implementations SHOULD support congestive\n            backoff.\n   RADIUS retransmission\
    \ timers are based on the model used in Dynamic\n   Host Configuration Protocol\
    \ for IPv6 (DHCPv6) [RFC3315].  Variables\n   used here are also borrowed from\
    \ this specification.  RADIUS is a\n   request/response-based protocol.  The message\
    \ exchange terminates\n   when the requester successfully receives the answer,\
    \ or the message\n   exchange is considered to have failed according to the RECOMMENDED\n\
    \   retransmission mechanism described below.  Other retransmission\n   mechanisms\
    \ are possible, as long as they satisfy the requirements on\n   jitter and congestive\
    \ backoff.\n   The following algorithms apply to any client that originates RADIUS\n\
    \   packets, including but not limited to Access-Request, Accounting-\n   Request,\
    \ Disconnect-Request, and CoA-Request [RFC3576].\n   The retransmission behavior\
    \ is controlled and described by the\n   following variables:\n         RT   \
    \  Retransmission timeout\n         IRT    Initial retransmission time  (default\
    \ 2 seconds)\n         MRC    Maximum retransmission count (default 5 attempts)\n\
    \         MRT    Maximum retransmission time (default 16 seconds)\n         MRD\
    \    Maximum retransmission duration (default 30 seconds)\n         RAND   Randomization\
    \ factor\n   With each message transmission or retransmission, the sender sets\
    \ RT\n   according to the rules given below.  If RT expires before the message\n\
    \   exchange terminates, the sender re-computes RT and retransmits the\n   message.\n\
    \   Each of the computations of a new RT include a randomization factor\n   (RAND),\
    \ which is a random number chosen with a uniform distribution\n   between -0.1\
    \ and +0.1.  The randomization factor is included to\n   minimize the synchronization\
    \ of messages.\n   The algorithm for choosing a random number does not need to\
    \ be\n   cryptographically sound.  The algorithm SHOULD produce a different\n\
    \   sequence of random numbers from each invocation.\n   RT for the first message\
    \ transmission is based on IRT:\n         RT = IRT + RAND*IRT\n   RT for each\
    \ subsequent message retransmission is based on the\n   previous value of RT:\n\
    \         RT = 2*RTprev + RAND*RTprev\n   MRT specifies an upper bound on the\
    \ value of RT (disregarding the\n   randomization added by the use of RAND). \
    \ If MRT has a value of 0,\n   there is no upper limit on the value of RT.  Otherwise:\n\
    \         if (RT > MRT)\n            RT = MRT + RAND*MRT\n   MRD specifies an\
    \ upper bound on the length of time a sender may\n   retransmit a message.  The\
    \ message exchange fails once MRD seconds\n   have elapsed since the client first\
    \ transmitted the message.  MRD\n   MUST be set, and SHOULD have a value between\
    \ 5 and 30 seconds.  These\n   values mirror the values for a server's duplicate\
    \ detection cache, as\n   described in the next section.\n   MRC specifies an\
    \ upper bound on the number of times a sender may\n   retransmit a message.  If\
    \ MRC is zero, the message exchange fails\n   once MRD seconds have elapsed since\
    \ the client first transmitted the\n   message.  If MRC is non-zero, the message\
    \ exchange fails when either\n   the sender has transmitted the message MRC times,\
    \ or when MRD seconds\n   have elapsed since the client first transmitted the\
    \ message.\n   For Accounting-Request packets, the default values for MRC, MRD,\
    \ and\n   MRT SHOULD be zero.  These settings will enable a RADIUS client to\n\
    \   continue sending accounting requests to a RADIUS server until the\n   request\
    \ is acknowledged.  If any of MRC, MRD, or MRT are non-zero,\n   then the accounting\
    \ information could potentially be discarded\n   without being recorded.\n"
- title: 2.2.2.  Duplicate Detection and Orderly Delivery
  contents:
  - "2.2.2.  Duplicate Detection and Orderly Delivery\n   When packets are retransmitted\
    \ by a client, the server may receive\n   duplicate requests.  The limitations\
    \ of the transport protocol used\n   by RADIUS, the User Datagram Protocol (UDP),\
    \ means that the Access-\n   Request packets may be received, and potentially\
    \ processed, in an\n   order different from the order in which the packets were\
    \ sent.\n   However, the discussion of the Identifier field in Section 3 of\n\
    \   [RFC2865] says:\n      The RADIUS server can detect a duplicate request if\
    \ it has the\n      same client source IP address and source UDP port and Identifier\n\
    \      within a short span of time.\n   Also, Section 7 of [RFC4669] defines a\n\
    \   radiusAuthServDupAccessRequests object as:\n      The number of duplicate\
    \ Access-Request packets received.\n   This text has a number of implications.\
    \  First, without duplicate\n   detection, a RADIUS server may process an authentication\
    \ request\n   twice, leading to an erroneous conclusion that a user has logged\
    \ in\n   twice.  That behavior is undesirable, so duplicate detection is\n   desirable.\
    \  Second, the server may track not only the duplicate\n   request, but also the\
    \ replies to those requests.  This behavior\n   permits the server to send duplicate\
    \ replies in response to duplicate\n   requests, increasing network stability.\n\
    \   Since Access-Request packets may also be sent by the client in\n   response\
    \ to an Access-Challenge from the server, those packets form a\n   logically ordered\
    \ stream, and, therefore have additional ordering\n   requirements over Access-Request\
    \ packets for different sessions.\n   Implementing duplicate detection results\
    \ in new packets being\n   processed only once, ensuring order.\n   RADIUS servers\
    \ MUST therefore implement duplicate detection for\n   Access-Request packets,\
    \ as described in Section 3 of [RFC2865].\n   Implementations MUST also cache\
    \ the Responses (Access-Accept,\n   Access-Challenge, or Access-Reject) that they\
    \ send in response to\n   Access-Request packets.  If a server receives a valid\
    \ duplicate\n   Access-Request for which it has already sent a Response, it MUST\n\
    \   resend its original Response without reprocessing the request.  The\n   server\
    \ MUST silently discard any duplicate Access-Requests for which\n   a Response\
    \ has not yet been sent.\n   Each cache entry SHOULD be purged after a period\
    \ of time.  This time\n   SHOULD be no less than 5 seconds, and no more than 30\
    \ seconds.  After\n   about 30 seconds, most RADIUS clients and end users will\
    \ have given\n   up on the authentication request.  Therefore, there is little\
    \ value\n   in having a larger cache timeout.\n   Cache entries MUST also be purged\
    \ if the server receives a valid\n   Access-Request packet that matches a cached\
    \ Access-Request packet in\n   source address, source port, RADIUS Identifier,\
    \ and receiving socket,\n   but where the Request Authenticator field is different\
    \ from the one\n   in the cached packet.  If the request contains a Message-\n\
    \   Authenticator attribute, the request MUST be processed as described\n   in\
    \ [RFC3580] Section 3.2.  Packets with invalid Message-\n   Authenticators MUST\
    \ NOT affect the cache in any way.\n   However, Access-Request packets not containing\
    \ a Message-\n   Authenticator attribute always affect the cache, even though\
    \ they may\n   be trivially forged.  To avoid this issue, server implementations\
    \ may\n   be configured to require the presence of a Message-Authenticator\n \
    \  attribute in Access-Request packets.  Requests not containing a\n   Message-Authenticator\
    \ attribute MAY then be silently discarded.\n   Client implementations SHOULD\
    \ include a Message-Authenticator\n   attribute in every Access-Request to further\
    \ help mitigate this\n   issue.\n   When sending requests, RADIUS clients MUST\
    \ NOT reuse Identifiers for\n   a source IP address and source UDP port until\
    \ either a valid response\n   has been received, or the request has timed out.\
    \  Clients SHOULD\n   allocate Identifiers via a least-recently-used (LRU) method\
    \ for a\n   particular source IP address and source UDP port.\n   RADIUS clients\
    \ do not have to perform duplicate detection.  When a\n   client sends a request,\
    \ it processes the first response that has a\n   valid Response Authenticator\
    \ as defined in [RFC2865] Section 3.  Any\n   later responses MUST be silently\
    \ discarded, as they do not match a\n   pending request.  That is, later responses\
    \ are treated exactly the\n   same as unsolicited responses, and are silently\
    \ discarded.\n"
- title: 2.2.3.  Server Response to Overload
  contents:
  - "2.2.3.  Server Response to Overload\n   Some RADIUS server implementations are\
    \ not robust in response to\n   overload, dropping packets with even probability\
    \ across multiple\n   sessions.  In an overload situation, this results in a high\
    \ failure\n   rate for multi-round authentication protocols such as EAP [RFC3579].\n\
    \   Typically, users will continually retry in an attempt to gain access,\n  \
    \ increasing the load even further.\n   A more sensible approach is for a RADIUS\
    \ server to preferentially\n   accept RADIUS Access-Request packets containing\
    \ a valid State\n   attribute, so that multi-round authentication conversations,\
    \ once\n   begun, will be more likely to succeed.  Similarly, a server that is\n\
    \   proxying requests should preferentially process Access-Accept,\n   Access-Challenge,\
    \ or Access-Reject packets from home servers before\n   processing new requests\
    \ from a NAS.\n   These methods will allow some users to gain access to the network,\n\
    \   reducing the load created by ongoing access attempts.\n"
- title: 2.3.  Accounting Issues
  contents:
  - '2.3.  Accounting Issues

    '
- title: 2.3.1.  Attributes Allowed in an Interim Update
  contents:
  - "2.3.1.  Attributes Allowed in an Interim Update\n   [RFC2866] indicates that\
    \ Acct-Input-Octets, Acct-Output-Octets,\n   Acct-Session-Time, Acct-Input-Packets,\
    \ Acct-Output-Packets and Acct-\n   Terminate-Cause attributes \"can only be present\
    \ in Accounting-Request\n   records where the Acct-Status-Type is set to Stop\"\
    .\n   However [RFC2869] Section 2.1 states:\n      It is envisioned that an Interim\
    \ Accounting record (with Acct-\n      Status-Type = Interim-Update (3)) would\
    \ contain all of the\n      attributes normally found in an Accounting Stop message\
    \ with the\n      exception of the Acct-Term-Cause attribute.\n   Although [RFC2869]\
    \ does not indicate that it updates [RFC2866], this\n   is an oversight, and the\
    \ above attributes are allowable in an Interim\n   Accounting record.\n"
- title: 2.3.2.  Acct-Session-Id and Acct-Multi-Session-Id
  contents:
  - "2.3.2.  Acct-Session-Id and Acct-Multi-Session-Id\n   [RFC2866] Section 5.5 describes\
    \ Acct-Session-Id as Text within the\n   figure summarizing the attribute format,\
    \ but then goes on to state\n   that \"The String field SHOULD be a string of\
    \ UTF-8 encoded 10646\n   characters\".\n   [RFC2865] defines the Text type as\
    \ \"containing UTF-8 encoded 10646\n   characters\", which is compatible with\
    \ the description of Acct-\n   Session-Id.  Since other attributes are consistently\
    \ described as\n   \"Text\" within both the figure summarizing the attribute format,\
    \ and\n   the following attribute definition, it appears that this is a\n   typographical\
    \ error, and that Acct-Session-Id is of type Text, and\n   not of type String.\n\
    \   The definition of the Acct-Multi-Session-Id attribute also has\n   typographical\
    \ errors.  It says:\n      A summary of the Acct-Session-Id attribute format ...\n\
    \   This text should read:\n      A summary of the Acct-Multi-Session-Id attribute\
    \ format ...\n   The Acct-Multi-Session-Id attribute is also defined as being\
    \ of type\n   String.  However, the language in the text strongly recommends that\n\
    \   implementors consider the attribute as being of type Text.  It is\n   unclear\
    \ why the type String was chosen for this attribute when the\n   type Text would\
    \ be sufficient.  This attribute SHOULD be treated as\n   Text.\n"
- title: 2.3.3.  Request Authenticator
  contents:
  - "2.3.3.  Request Authenticator\n   [RFC2866] Section 4.1 states:\n      The Request\
    \ Authenticator of an Accounting-Request contains a 16-\n      octet MD5 hash\
    \ value calculated according to the method described\n      in \"Request Authenticator\"\
    \ above.\n   However, the text does not indicate any action to take when an\n\
    \   Accounting-Request packet contains an invalid Request Authenticator.\n   The\
    \ following text should be considered to be part of the above\n   description:\n\
    \      The Request Authenticator field MUST contain the correct data, as\n   \
    \   given by the above calculation.  Invalid packets are silently\n      discarded.\
    \  Note that some early implementations always set the\n      Request Authenticator\
    \ to all zeros.  New implementations of RADIUS\n      clients MUST use the above\
    \ algorithm to calculate the Request\n      Authenticator field.  New RADIUS server\
    \ implementations MUST\n      silently discard invalid packets.\n"
- title: 2.3.4.  Interim-Accounting-Interval
  contents:
  - "2.3.4.  Interim-Accounting-Interval\n   [RFC2869] Section 2.1 states:\n     \
    \ It is also possible to statically configure an interim value on\n      the NAS\
    \ itself.  Note that a locally configured value on the NAS\n      MUST override\
    \ the value found in an Access-Accept.\n   This requirement may be phrased too\
    \ strongly.  It is conceivable that\n   a NAS implementation has a setting for\
    \ a \"minimum\" value of Interim-\n   Accounting-Interval, based on resource constraints\
    \ in the NAS, and\n   network loading in the local environment of the NAS.  In\
    \ such cases,\n   the value administratively provisioned in the NAS should not\
    \ be\n   over-ridden by a smaller value from an Access-Accept message.  The\n\
    \   NAS's value could be over-ridden by a larger one, however.  The\n   intent\
    \ is that the NAS sends accounting information at fixed\n   intervals that are\
    \ short enough so that the potential loss of\n   billable revenue is limited,\
    \ but also that the accounting updates are\n   infrequent enough so that the NAS,\
    \ network, and RADIUS server are not\n   overloaded.\n"
- title: 2.3.5.  Counter Values in the RADIUS Management Information Base (MIB)
  contents:
  - "2.3.5.  Counter Values in the RADIUS Management Information Base (MIB)\n   The\
    \ RADIUS Authentication and Authorization Client MIB module\n   ([RFC2618] [RFC4668])\
    \ includes counters of packet statistics.  In the\n   descriptive text of the\
    \ MIB module, formulas are provided for certain\n   counter objects.  Implementors\
    \ have noted apparent inconsistencies in\n   the formulas that could result in\
    \ negative values.\n   Since the original MIB module specified in [RFC2618] had\
    \ been widely\n   implemented, the RADEXT WG chose not to change the object definitions\n\
    \   or to create new ones within the revised MIB module [RFC4668].\n   However,\
    \ this section explains the issues and provides guidance for\n   implementors\
    \ regarding the interpretation of the textual description\n   and comments for\
    \ certain MIB objects.\n   The issues raised can be summarized as follows:\n \
    \  Issue (1):\n   -- TotalIncomingPackets = Accepts + Rejects + Challenges +\n\
    \   UnknownTypes\n   --\n   -- TotalIncomingPackets - MalformedResponses - BadAuthenticators\
    \ -\n   -- UnknownTypes - PacketsDropped = Successfully received\n   --\n   --\
    \ AccessRequests + PendingRequests + ClientTimeouts =\n   -- Successfully Received\n\
    \   It appears that the value of \"Successfully Received\" could be\n   negative,\
    \ since various counters are subtracted from\n   TotalIncomingPackets that are\
    \ not included in the calculation of\n   TotalIncomingPackets.\n   It also appears\
    \ that \"AccessRequests + PendingRequests +\n   ClientTimeouts = Successfully\
    \ Received\" should read \"AccessRequests +\n   PendingRequests + ClientTimeouts\
    \ = Successfully Transmitted\".\n   \"TotalIncomingPackets\" and \"Successfully\
    \ Received\" are temporary\n   variables, i.e., not objects within the MIB module.\
    \  The comment text\n   in the MIB modules is intended, therefore, to aid in understanding.\n\
    \   What's of consequence is the consistency of values of the objects in\n   the\
    \ MIB module, and that does not appear to be impacted by the\n   inconsistencies\
    \ noted above.  It does appear, however, that the\n   \"Successfully Received\"\
    \ variable should be labeled \"Successfully\n   Transmitted\".\n   In addition,\
    \ the definition of Accept, Reject or Challenge counters\n   indicates that they\
    \ MUST be incremented before the message is\n   validated.  If the message is\
    \ invalid, one of MalformedResponses,\n   BadAuthenticators, or PacketsDropped\
    \ counters will be additionally\n   incremented.  In that case, the first two\
    \ equations are consistent,\n   i.e., \"Successfully Received\" could not be negative.\n\
    \   Issue (2):\n   It appears that the radiusAuthClientPendingRequests counter\
    \ is\n   decremented upon retransmission.  That would mean a retransmitted\n \
    \  packet is not considered as being pending, although such\n   retransmissions\
    \ can still be considered as being pending requests.\n   The definition of this\
    \ MIB object in [RFC2618] is as follows:\n      The number of RADIUS Access-Request\
    \ packets destined for this\n      server that have not yet timed out or received\
    \ a response.  This\n      variable is incremented when an Access-Request is sent\
    \ and\n      decremented due to receipt of an Access-Accept, Access-Reject or\n\
    \      Access-Challenge, a timeout or retransmission.\n   This object purports\
    \ to count the number of pending request packets.\n   It is open to interpretation\
    \ whether or not retransmissions of a\n   request are to be counted as additional\
    \ pending packets.  In either\n   event, it seems appropriate to treat retransmissions\
    \ consistently\n   with respect to incrementing and decrementing this counter.\n"
- title: 2.4.  Multiple Filter-ID Attributes
  contents:
  - "2.4.  Multiple Filter-ID Attributes\n   [RFC2865] Section 5.11 states:\n    \
    \  Zero or more Filter-Id attributes MAY be sent in an Access-Accept\n      packet.\n\
    \   In practice, the behavior of a RADIUS client receiving multiple\n   Filter-ID\
    \ attributes is implementation dependent.  For example, some\n   implementations\
    \ treat multiple instances of the Filter-ID attribute\n   as alternative filters;\
    \ the first Filter-ID attribute having a name\n   matching a locally defined filter\
    \ is used, and the remaining ones are\n   discarded.  Other implementations may\
    \ combine matching filters.\n   As a result, the interpretation of multiple Filter-ID\
    \ attributes is\n   undefined within RADIUS.  The sending of multiple Filter-ID\n\
    \   attributes within an Access-Accept SHOULD be avoided within\n   heterogeneous\
    \ deployments and roaming scenarios, where it is likely\n   to produce unpredictable\
    \ results.\n"
- title: 2.5.  Mandatory and Optional Attributes
  contents:
  - "2.5.  Mandatory and Optional Attributes\n   RADIUS attributes do not explicitly\
    \ state whether they are optional\n   or mandatory.  Nevertheless, there are instances\
    \ where RADIUS\n   attributes need to be treated as mandatory.\n   [RFC2865] Section\
    \ 1.1 states:\n      A NAS that does not implement a given service MUST NOT implement\n\
    \      the RADIUS attributes for that service.  For example, a NAS that\n    \
    \  is unable to offer Apple Remote Access Protocol (ARAP) service\n      MUST\
    \ NOT implement the RADIUS attributes for ARAP.  A NAS MUST\n      treat a RADIUS\
    \ access-accept authorizing an unavailable service as\n      an access-reject\
    \ instead.\n   With respect to the Service-Type attribute, [RFC2865] Section 5.6\n\
    \   says:\n      This Attribute indicates the type of service the user has\n \
    \     requested, or the type of service to be provided.  It MAY be used\n    \
    \  in both Access-Request and Access-Accept packets.  A NAS is not\n      required\
    \ to implement all of these service types, and MUST treat\n      unknown or unsupported\
    \ Service-Types as though an Access-Reject\n      had been received instead.\n\
    \   [RFC2865] Section 5 states:\n      A RADIUS server MAY ignore Attributes with\
    \ an unknown Type.\n      A RADIUS client MAY ignore Attributes with an unknown\
    \ Type.\n   With respect to Vendor-Specific Attributes (VSAs), [RFC2865] Section\n\
    \   5.26 states:\n      Servers not equipped to interpret the vendor-specific\
    \ information\n      sent by a client MUST ignore it (although it may be reported).\n\
    \      Clients which do not receive desired vendor-specific information\n    \
    \  SHOULD make an attempt to operate without it, although they may do\n      so\
    \ (and report they are doing so) in a degraded mode.\n   It is possible for either\
    \ a standard attribute or a VSA to represent\n   a request for an unavailable\
    \ service.  However, where the Type,\n   Vendor-ID, or Vendor-Type is unknown,\
    \ a RADIUS client will not know\n   whether or not the attribute defines a service.\n\
    \   In general, it is best for a RADIUS client to err on the side of\n   caution.\
    \  On receiving an Access-Accept including an attribute of\n   known Type for\
    \ an unimplemented service, a RADIUS client MUST treat\n   it as an Access-Reject,\
    \ as directed in [RFC2865] Section 1.1.  On\n   receiving an Access-Accept including\
    \ an attribute of unknown Type, a\n   RADIUS client SHOULD assume that it is a\
    \ potential service\n   definition, and treat it as an Access-Reject.  Unknown\
    \ VSAs SHOULD be\n   ignored by RADIUS clients.\n   In order to avoid introducing\
    \ changes in default behavior, existing\n   implementations that do not obey this\
    \ recommendation should make the\n   behavior configurable, with the legacy behavior\
    \ being enabled by\n   default.  A configuration flag such as \"treat unknown\
    \ attributes as\n   reject\" can be exposed to the system administrator.  If the\
    \ flag is\n   set to true, then Access-Accepts containing unknown attributes are\n\
    \   treated as Access-Rejects.  If the flag is set to false, then unknown\n  \
    \ attributes in Access-Accepts are silently ignored.\n   On receiving a packet\
    \ including an attribute of unknown Type, RADIUS\n   authentication server implementations\
    \ SHOULD ignore such attributes.\n   However, RADIUS accounting server implementations\
    \ typically do not\n   need to understand attributes in order to write them to\
    \ stable\n   storage or pass them to the billing engine.  Therefore, accounting\n\
    \   server implementations SHOULD be equipped to handle unknown\n   attributes.\n\
    \   To avoid misinterpretation of service requests encoded within VSAs,\n   RADIUS\
    \ servers SHOULD NOT send VSAs containing service requests to\n   RADIUS clients\
    \ that are not known to understand them.  For example, a\n   RADIUS server should\
    \ not send a VSA encoding a filter without\n   knowledge that the RADIUS client\
    \ supports the VSA.\n"
- title: 2.6.  Interpretation of Access-Reject
  contents:
  - '2.6.  Interpretation of Access-Reject

    '
- title: 2.6.1.  Improper Use of Access-Reject
  contents:
  - "2.6.1.  Improper Use of Access-Reject\n   The intent of an Access-Reject is to\
    \ deny access to the requested\n   service.  [RFC2865] Section 2 states:\n   \
    \   If any condition is not met, the RADIUS server sends an \"Access-\n      Reject\"\
    \ response indicating that this user request is invalid.  If\n      desired, the\
    \ server MAY include a text message in the Access-\n      Reject which MAY be\
    \ displayed by the client to the user.  No other\n      Attributes (except Proxy-State)\
    \ are permitted in an Access-Reject.\n   This text makes it clear that RADIUS\
    \ does not allow the provisioning\n   of services within an Access-Reject.  If\
    \ the desire is to allow\n   limited access, then an Access-Accept can be sent\
    \ with attributes\n   provisioning limited access.  Attributes within an Access-Reject\
    \ are\n   restricted to those necessary to route the message (e.g., Proxy-\n \
    \  State), attributes providing the user with an indication that access\n   has\
    \ been denied (e.g., an EAP-Message attribute containing an EAP-\n   Failure),\
    \ or attributes conveying an error message (e.g., a Reply-\n   Message or Error-Cause\
    \ attribute).\n   Unfortunately, there are examples where this requirement has\
    \ been\n   misunderstood.  [RFC2869] Section 2.2 states:\n      If that authentication\
    \ fails, the RADIUS server should return an\n      Access-Reject packet to the\
    \ NAS, with optional Password-Retry and\n      Reply-Messages attributes.  The\
    \ presence of Password-Retry\n      indicates the ARAP NAS MAY choose to initiate\
    \ another challenge-\n      response cycle...\n   This paragraph is problematic\
    \ from two perspectives.  Firstly, a\n   Password-Retry attribute is being returned\
    \ in an Access-Reject; this\n   attribute does not fit into the categories established\
    \ in [RFC2865].\n   Secondly, an Access-Reject packet is being sent in the context\
    \ of a\n   continuing authentication conversation; [RFC2865] requires use of an\n\
    \   Access-Challenge for this.  [RFC2869] uses the phrase \"challenge-\n   response\"\
    \ to describe this use of Access-Reject, indicating that the\n   semantics of\
    \ Access-Challenge are being used.\n   [RFC2865] Section 4.4 addresses the semantics\
    \ of Access-Challenge\n   being equivalent to Access-Reject in some cases:\n \
    \     If the NAS does not support challenge/response, it MUST treat an\n     \
    \ Access-Challenge as though it had received an Access-Reject\n      instead.\n\
    \   While it is difficult to correct existing deployments of [RFC2869],\n   we\
    \ make the following recommendations:\n      [1]   New RADIUS specifications and\
    \ implementations MUST NOT use\n            Access-Reject where the semantics\
    \ of Access-Challenge are\n            intended.\n      [2]   Access-Reject MUST\
    \ mean denial of access to the requested\n            service.  In response to\
    \ an Access-Reject, the NAS MUST NOT\n            send any additional Access-Request\
    \ packets for that user\n            session.\n      [3]   New deployments of\
    \ ARAP [RFC2869] SHOULD use Access-\n            Challenge instead of Access-Reject\
    \ packets in the\n            conversations described in [RFC2869] Section 2.2.\n\
    \   We also note that the table of attributes in [RFC2869] Section 5.19\n   has\
    \ an error for the Password-Retry attribute.  It says:\n   Request  Accept  Reject\
    \  Challenge   #    Attribute\n   0        0       0-1     0           75   Password-Retry\n\
    \   However, the text in [RFC2869], Section 2.3.2 says that Password-\n   Retry\
    \ can be included within an Access-Challenge packet for EAP\n   authentication\
    \ sessions.  We recommend a correction to the table that\n   removes the \"0-1\"\
    \ from the Reject column, and moves it to the\n   Challenge column.  We also add\
    \ a \"Note 2\" to follow the existing\n   \"Note 1\" in the document to clarify\
    \ the use of this attribute.\n   Request  Accept  Reject  Challenge   #    Attribute\n\
    \   0        0       0       0-1         75   Password-Retry [Note 2]\n   [Note\
    \ 2] As per RFC 3579, the use of the Password-Retry in EAP\n   authentications\
    \ is deprecated.  The Password-Retry attribute can be\n   used only for ARAP authentication.\n"
- title: 2.6.2.  Service Request Denial
  contents:
  - "2.6.2.  Service Request Denial\n   RADIUS has been deployed for purposes outside\
    \ network access\n   authentication, authorization, and accounting.  For example,\
    \ RADIUS\n   has been deployed as a \"back-end\" for authenticating Voice Over\
    \ IP\n   (VOIP) connections, Hypertext Transfer Protocol (HTTP) sessions\n   (e.g.,\
    \ Apache), File Transfer Protocol (FTP) sessions (e.g.,\n   proftpd), and machine\
    \ logins for multiple operating systems (e.g.,\n   bsdi, pam, and gina).  In those\
    \ contexts, an Access-Reject sent to\n   the RADIUS client MUST be interpreted\
    \ as a rejection of the request\n   for service, and the RADIUS client MUST NOT\
    \ offer that service to the\n   user.\n   For example, when an authentication\
    \ failure occurs in the context of\n   an FTP session, the normal semantics for\
    \ rejecting FTP services\n   apply.  The rejection does not necessarily cause\
    \ the FTP server to\n   terminate the underlying TCP connection, but the FTP server\
    \ MUST NOT\n   offer any services protected by user authentication.\n   Users\
    \ may request multiple services from the NAS.  Where those\n   services are independent,\
    \ the deployment MUST treat the RADIUS\n   sessions as being independent.\n  \
    \ For example, a NAS may offer multi-link services where a user may\n   have multiple\
    \ simultaneous network connections.  In that case, an\n   Access-Reject for a\
    \ later multi-link connection request does not\n   necessarily mean that earlier\
    \ multi-link connections are torn down.\n   Similarly, if a NAS offers both dialup\
    \ and VOIP services, the\n   rejection of a VOIP attempt does not mean that the\
    \ dialup session is\n   torn down.\n"
- title: 2.7.  Addressing
  contents:
  - '2.7.  Addressing

    '
- title: 2.7.1.  Link-Local Addresses
  contents:
  - "2.7.1.  Link-Local Addresses\n   Since Link-Local addresses are unique only on\
    \ the local link, if the\n   NAS and RADIUS server are not on the same link, then\
    \ an IPv6 Link-\n   Local address [RFC4862] or an IPv4 Link-Local Address [RFC3927]\n\
    \   cannot be used to uniquely identify the NAS.  A NAS SHOULD NOT\n   utilize\
    \ a link-scope address within a NAS-IPv6-Address or NAS-IP-\n   Address attribute.\
    \  A RADIUS server receiving a NAS-IPv6-Address or\n   NAS-IP-Address attribute\
    \ containing a Link-Local address SHOULD NOT\n   count such an attribute toward\
    \ satisfying the requirements of\n   [RFC3162] Section 2.1:\n      NAS-IPv6-Address\
    \ and/or NAS-IP-Address MAY be present in an\n      Access-Request packet; however,\
    \ if neither attribute is present\n      then NAS-Identifier MUST be present.\n"
- title: 2.7.2.  Multiple Addresses
  contents:
  - "2.7.2.  Multiple Addresses\n   There are situations in which a RADIUS client\
    \ or server may have\n   multiple addresses.  For example, a dual stack host can\
    \ have both\n   IPv4 and IPv6 addresses; a host that is a member of multiple VLANs\n\
    \   could have IPv4 and/or IPv6 addresses on each VLAN; a host can have\n   multiple\
    \ IPv4 or IPv6 addresses on a single interface.  However,\n   [RFC2865] Section\
    \ 5.44 only permits zero or one NAS-IP-Address\n   attributes within an Access-Request,\
    \ and [RFC3162] Section 3 only\n   permits zero or one NAS-IPv6-Address attributes\
    \ within an Access-\n   Request.  When a NAS has more than one global address\
    \ and no ability\n   to determine which is used for identification in a particular\n\
    \   request, it is RECOMMENDED that the NAS include the NAS-Identifier\n   attribute\
    \ in an Access-Request in order to identify itself to the\n   RADIUS server.\n\
    \   [RFC2865] Section 3 states:\n      A RADIUS server MUST use the source IP\
    \ address of the RADIUS UDP\n      packet to decide which shared secret to use,\
    \ so that RADIUS\n      requests can be proxied.\n   Therefore, if a RADIUS client\
    \ sends packets from more than one source\n   address, a shared secret will need\
    \ to be configured on both the\n   client and server for each source address.\n"
- title: 2.8.  Idle-Timeout
  contents:
  - "2.8.  Idle-Timeout\n   With respect to the Idle-Timeout attribute, [RFC2865]\
    \ Section 5.28\n   states:\n      This Attribute sets the maximum number of consecutive\
    \ seconds of\n      idle connection allowed to the user before termination of\
    \ the\n      session or prompt.  This Attribute is available to be sent by the\n\
    \      server to the client in an Access-Accept or Access-Challenge.\n   [RFC3580]\
    \ Section 3.12 states:\n      The Idle-Timeout attribute is described in [RFC2865].\
    \  For IEEE\n      802 media other than 802.11 the media are always on.  As a\
    \ result\n      the Idle-Timeout attribute is typically only used with wireless\n\
    \      media such as IEEE 802.11.  It is possible for a wireless device\n    \
    \  to wander out of range of all Access Points.  In this case, the\n      Idle-Timeout\
    \ attribute indicates the maximum time that a wireless\n      device may remain\
    \ idle.\n   In the above paragraphs \"idle\" may not necessarily mean \"no traffic\"\
    ;\n   the NAS may support filters defining what traffic is included in the\n \
    \  idle time determination.  As a result, an \"idle connection\" is\n   defined\
    \ by local policy in the absence of other attributes.\n"
- title: 2.9.  Unknown Identity
  contents:
  - "2.9.  Unknown Identity\n   [RFC3748] Section 5.1 states:\n      If the Identity\
    \ is unknown, the Identity Response field should be\n      zero bytes in length.\n\
    \   However, [RFC2865] Section 5.1 describes the User-Name attribute as\n   follows:\n\
    \      The String field is one or more octets.\n   How should the RADIUS client\
    \ behave if it receives an EAP-\n   Response/Identity that is zero octets in length?\n\
    \   [RFC2865] Section 5.1 states:\n      This Attribute indicates the name of\
    \ the user to be authenticated.\n      It MUST be sent in Access-Request packets\
    \ if available.\n   This suggests that the User-Name attribute may be omitted\
    \ if it is\n   unavailable.\n   However, [RFC3579] Section 2.1 states:\n     \
    \ In order to permit non-EAP aware RADIUS proxies to forward the\n      Access-Request\
    \ packet, if the NAS initially sends an EAP-\n      Request/Identity message to\
    \ the peer, the NAS MUST copy the\n      contents of the Type-Data field of the\
    \ EAP-Response/Identity\n      received from the peer into the User-Name attribute\
    \ and MUST\n      include the Type-Data field of the EAP-Response/Identity in\
    \ the\n      User-Name attribute in every subsequent Access-Request.\n   This\
    \ suggests that the User-Name attribute should contain the\n   contents of the\
    \ Type-Data field of the EAP-Response/Identity, even if\n   it is zero octets\
    \ in length.\n   Note that [RFC4282] does not permit a Network Access Identifier\
    \ (NAI)\n   of zero octets, so that an EAP-Response/Identity with a Type-Data\n\
    \   field of zero octets MUST NOT be construed as a request for privacy\n   (e.g.,\
    \ anonymous NAI).\n   When a NAS receives an EAP-Response/Identity with a Type-Data\
    \ field\n   that is zero octets in length, it is RECOMMENDED that it either omit\n\
    \   the User-Name attribute in the Access-Request or include the\n   Calling-Station-Id\
    \ in the User-Name attribute, along with a Calling-\n   Station-Id attribute.\n"
- title: 2.10.  Responses After Retransmissions
  contents:
  - "2.10.  Responses After Retransmissions\n   Some implementations do not correctly\
    \ handle the receipt of RADIUS\n   responses after retransmissions. [RFC2865]\
    \ Section 2.5 states:\n      If the NAS is retransmitting a RADIUS request to\
    \ the same server\n      as before, and the attributes haven't changed, you MUST\
    \ use the\n      same Request Authenticator, ID, and source port.  If any\n  \
    \    attributes have changed, you MUST use a new Request Authenticator\n     \
    \ and ID.\n   Note that changing the Request ID for a retransmission may have\n\
    \   undesirable side effects.  Since RADIUS does not have a clear\n   definition\
    \ of a \"session\", it is perfectly valid for a RADIUS server\n   to treat a retransmission\
    \ as a new session request, and to reject it\n   due to, for example, the enforcement\
    \ of restrictions on multiple\n   simultaneous logins.\n   In that situation,\
    \ the NAS may receive a belated Access-Accept for\n   the first request, and an\
    \ Access-Reject for the retransmitted\n   request, both of which apply to the\
    \ same \"session\".\n   We suggest that the contents of Access-Request packets\
    \ SHOULD NOT be\n   changed during retransmissions.  If they must be changed due\
    \ to the\n   inclusion of an Event-Timestamp attribute, for example, then\n  \
    \ responses to earlier transmissions MUST be silently discarded.  Any\n   response\
    \ to the current request MUST be treated as the definitive\n   response, even\
    \ if as noted above, it disagrees with earlier\n   responses.\n   This problem\
    \ can be made worse by implementations that use a fixed\n   retransmission timeout\
    \ (30 seconds is common).  We reiterate the\n   suggestions in Section 2.1 about\
    \ using congestive backoff.  In that\n   case, responses to earlier transmissions\
    \ MAY be used as data points\n   for congestive backoff, even if their contents\
    \ are discarded.\n"
- title: 2.11.  Framed-IPv6-Prefix
  contents:
  - "2.11.  Framed-IPv6-Prefix\n   [RFC3162] Section 2.3 says:\n      This Attribute\
    \ indicates an IPv6 prefix (and corresponding route)\n      to be configured for\
    \ the user.  It MAY be used in Access-Accept\n      packets, and can appear multiple\
    \ times.  It MAY be used in an\n      Access-Request packet as a hint by the NAS\
    \ to the server that it\n      would prefer these prefix(es), but the server is\
    \ not required to\n      honor the hint.  Since it is assumed that the NAS will\
    \ plumb a\n      route corresponding to the prefix, it is not necessary for the\n\
    \      server to also send a Framed-IPv6-Route attribute for the same\n      prefix.\n\
    \   An Internet Service Provider (ISP) may desire to support Prefix\n   Delegation\
    \ [RFC4818] at the same time that it would like to assign a\n   prefix for the\
    \ link between the NAS and the user.  The intent of the\n   paragraph was to enable\
    \ the NAS to advertise the prefix (such as via\n   a Router Advertisement).  If\
    \ the Framed-Routing attribute is used, it\n   is also possible that the prefix\
    \ would be advertised in a routing\n   protocol such as Routing Information Protocol\
    \ Next Generation\n   (RIPNG).  RFC 2865 Section 5.10 describes the purpose of\
    \ Framed-\n   Routing:\n      This Attribute indicates the routing method for\
    \ the user, when the\n      user is a router to a network.  It is only used in\
    \ Access-Accept\n      packets.\n   The description of the Prefix-Length field\
    \ in RFC 3162 indicates\n   excessively wide latitude:\n      The length of the\
    \ prefix, in bits.  At least 0 and no larger than\n      128.\n   This length\
    \ appears too broad, because it is not clear what a NAS\n   should do with a prefix\
    \ of greater granularity than /64.  For\n   example, the Framed-IPv6-Prefix may\
    \ contain a /128.  This does not\n   imply that the NAS should assign an IPv6\
    \ address to the end user,\n   because RFC 3162 already defines a Framed-IPv6-Identifier\
    \ attribute\n   to handle the Identifier portion.\n   It appears that the Framed-IPv6-Prefix\
    \ is used for the link between\n   the NAS and Customer Premises Equipment (CPE)\
    \ only if a /64 prefix is\n   assigned.  When a /64 or larger prefix is sent,\
    \ the intent is for the\n   NAS to send a routing advertisement containing the\
    \ information\n   present in the Framed-IPv6-Prefix attribute.\n   The CPE may\
    \ also require a delegated prefix for its own use, if it is\n   decrementing the\
    \ Hop Limit field of IP headers.  In that case, it\n   should be delegated a prefix\
    \ by the NAS via the Delegated-IPv6-Prefix\n   attribute [RFC4818].  If the CPE\
    \ is not decrementing Hop Limit, it\n   does not require a delegated prefix.\n"
- title: 3.  Security Considerations
  contents:
  - "3.  Security Considerations\n   The contents of the State attribute are available\
    \ to both the RADIUS\n   client and observers of the RADIUS protocol.  RADIUS\
    \ server\n   implementations should ensure that the State attribute does not\n\
    \   disclose sensitive information to a RADIUS client or third parties\n   observing\
    \ the RADIUS protocol.\n   The cache mechanism described in Section 2.2.2 is vulnerable\
    \ to\n   attacks when Access-Request packets do not contain a Message-\n   Authenticator\
    \ attribute.  If the server accepts requests without a\n   Message-Authenticator,\
    \ then RADIUS packets can be trivially forged by\n   an attacker.  Cache entries\
    \ can then be forcibly expired, negating\n   the utility of the cache.  This attack\
    \ can be mitigated by following\n   the suggestions in [RFC3579] Section 4, or\
    \ by requiring the presence\n   of Message-Authenticator, as described in Sections\
    \ 2.1.1 and 2.2.2.\n   Since this document describes the use of RADIUS for purposes\
    \ of\n   authentication, authorization, and accounting in a wide variety of\n\
    \   networks, applications using these specifications are vulnerable to\n   all\
    \ of the threats that are present in other RADIUS applications.\n   For a discussion\
    \ of these threats, see [RFC2865], [RFC2607],\n   [RFC3162], [RFC3579], and [RFC3580].\n"
- title: 4.  References
  contents:
  - '4.  References

    '
- title: 4.1.  Normative References
  contents:
  - "4.1.  Normative References\n   [RFC2119]   Bradner, S., \"Key words for use in\
    \ RFCs to Indicate\n               Requirement Levels\", BCP 14, RFC 2119, March\
    \ 1997.\n   [RFC2865]   Rigney, C., Willens, S., Rubens, A., and W. Simpson,\n\
    \               \"Remote Authentication Dial In User Service (RADIUS)\",\n   \
    \            RFC 2865, June 2000.\n   [RFC4818]   Salowey, J. and R. Droms, \"\
    RADIUS Delegated-IPv6-Prefix\n               Attribute\", RFC 4818, April 2007.\n"
- title: 4.2.  Informative References
  contents:
  - "4.2.  Informative References\n   [RFC2607]   Aboba, B. and J. Vollbrecht, \"\
    Proxy Chaining and Policy\n               Implementation in Roaming\", RFC 2607,\
    \ June 1999.\n   [RFC2618]   Aboba, B. and G. Zorn, \"RADIUS Authentication Client\n\
    \               MIB\", RFC 2618, June 1999.\n   [RFC2866]   Rigney, C., \"RADIUS\
    \ Accounting\", RFC 2866, June 2000.\n   [RFC2869]   Rigney, C., Willats, W.,\
    \ and P. Calhoun, \"RADIUS\n               Extensions\", RFC 2869, June 2000.\n\
    \   [RFC3162]   Aboba, B., Zorn, G., and D. Mitton, \"RADIUS and IPv6\",\n   \
    \            RFC 3162, August 2001.\n   [RFC3315]   Droms, R., Ed., Bound, J.,\
    \ Volz, B., Lemon, T., Perkins,\n               C., and M. Carney, \"Dynamic Host\
    \ Configuration Protocol\n               for IPv6 (DHCPv6)\", RFC 3315, July 2003.\n\
    \   [RFC3576]   Chiba, M., Dommety, G., Eklund, M., Mitton, D., and B.\n     \
    \          Aboba, \"Dynamic Authorization Extensions to Remote\n             \
    \  Authentication Dial In User Service (RADIUS)\", RFC 3576,\n               July\
    \ 2003.\n   [RFC3579]   Aboba, B. and P. Calhoun, \"RADIUS (Remote Authentication\n\
    \               Dial In User Service) Support For Extensible\n               Authentication\
    \ Protocol (EAP)\", RFC 3579, September 2003.\n   [RFC3580]   Congdon, P., Aboba,\
    \ B., Smith, A., Zorn, G., and J.\n               Roese, \"IEEE 802.1X Remote\
    \ Authentication Dial In User\n               Service (RADIUS) Usage Guidelines\"\
    , RFC 3580, September\n               2003.\n   [RFC3748]   Aboba, B., Blunk,\
    \ L., Vollbrecht, J., Carlson, J., and H.\n               Levkowetz, Ed., \"Extensible\
    \ Authentication Protocol\n               (EAP)\", RFC 3748, June 2004.\n   [RFC3927]\
    \   Cheshire, S., Aboba, B., and E. Guttman, \"Dynamic\n               Configuration\
    \ of IPv4 Link-Local Addresses\", RFC 3927,\n               May 2005.\n   [RFC4282]\
    \   Aboba, B., Beadles, M., Arkko, J., and P. Eronen, \"The\n               Network\
    \ Access Identifier\", RFC 4282, December 2005.\n   [RFC4668]   Nelson, D., \"\
    RADIUS Authentication Client MIB for IPv6\",\n               RFC 4668, August\
    \ 2006.\n   [RFC4669]   Nelson, D., \"RADIUS Authentication Server MIB for IPv6\"\
    ,\n               RFC 4669, August 2006.\n   [RFC4862]   Thomson, S., Narten,\
    \ T., and T. Jinmei, \"IPv6 Stateless\n               Address Autoconfiguration\"\
    , RFC 4862, September 2007.\n   [PANA]      Forsberg, D., Ohba, Y.,Ed., Patil,\
    \ B., Tschofenig, H.,\n               and A. Yegin, \"Protocol for Carrying Authentication\
    \ for\n               Network Access (PANA)\", Work in Progress.\n"
- title: Acknowledgments
  contents:
  - "Acknowledgments\n   The authors would like to acknowledge Glen Zorn and Bernard\
    \ Aboba for\n   contributions to this document.\n   The alternate algorithm to\
    \ [RFC3579] Section 2.6.1 that is described\n   in Section 2.1.2 of this document\
    \ was designed by Raghu Dendukuri.\n   The text discussing retransmissions in\
    \ Section 2.2.1 is taken with\n   minor edits from Section 9 of\" Protocol for\
    \ Carrying Authentication\n   for Network Access (PANA)\" [PANA].\n   Alan DeKok\
    \ wishes to acknowledge the support of Quiconnect Inc.,\n   where he was employed\
    \ during much of the work on this document.\n   David Nelson wishes to acknowledge\
    \ the support of Enterasys Networks,\n   where he was employed during much of\
    \ the work on this document.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   David B. Nelson\n   Elbrys Networks, Inc.\n   75 Rochester\
    \ Ave., Unit 3\n   Portsmouth, N.H. 03801 USA\n   Phone: +1.603.570.2636\n   EMail:\
    \ dnelson@elbrysnetworks.com\n   Alan DeKok\n   The FreeRADIUS Server Project\n\
    \   http://freeradius.org/\n   EMail: aland@freeradius.org\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The IETF Trust (2007).\n   This document\
    \ is subject to the rights, licenses and restrictions\n   contained in BCP 78,\
    \ and except as set forth therein, the authors\n   retain all their rights.\n\
    \   This document and the information contained herein are provided on an\n  \
    \ \"AS IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n  \
    \ OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY, THE IETF TRUST AND\n   THE\
    \ INTERNET ENGINEERING TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS\n   OR IMPLIED,\
    \ INCLUDING BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF\n   THE INFORMATION\
    \ HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY\
    \ OR FITNESS FOR A PARTICULAR PURPOSE.\n"
- title: Intellectual Property
  contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or\
    \ scope of any\n   Intellectual Property Rights or other rights that might be\
    \ claimed to\n   pertain to the implementation or use of the technology described\
    \ in\n   this document or the extent to which any license under such rights\n\
    \   might or might not be available; nor does it represent that it has\n   made\
    \ any independent effort to identify any such rights.  Information\n   on the\
    \ procedures with respect to rights in RFC documents can be\n   found in BCP 78\
    \ and BCP 79.\n   Copies of IPR disclosures made to the IETF Secretariat and any\n\
    \   assurances of licenses to be made available, or the result of an\n   attempt\
    \ made to obtain a general license or permission for the use of\n   such proprietary\
    \ rights by implementers or users of this\n   specification can be obtained from\
    \ the IETF on-line IPR repository at\n   http://www.ietf.org/ipr.\n   The IETF\
    \ invites any interested party to bring to its attention any\n   copyrights, patents\
    \ or patent applications, or other proprietary\n   rights that may cover technology\
    \ that may be required to implement\n   this standard.  Please address the information\
    \ to the IETF at\n   ietf-ipr@ietf.org.\n"
