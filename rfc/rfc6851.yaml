- contents:
  - '        Internet Message Access Protocol (IMAP) - MOVE Extension

    '
  title: __initial_text__
- contents:
  - "Abstract\n   This document defines an IMAP extension consisting of two new\n
    \  commands, MOVE and UID MOVE, that are used to move messages from one\n   mailbox
    to another.\n"
  title: Abstract
- contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This
    document is a product of the Internet Engineering Task Force\n   (IETF).  It represents
    the consensus of the IETF community.  It has\n   received public review and has
    been approved for publication by the\n   Internet Engineering Steering Group (IESG).
    \ Further information on\n   Internet Standards is available in Section 2 of RFC
    5741.\n   Information about the current status of this document, any errata,\n
    \  and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc6851.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2013 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n
    \  (http://trustee.ietf.org/license-info) in effect on the date of\n   publication
    of this document.  Please review these documents\n   carefully, as they describe
    your rights and restrictions with respect\n   to this document.  Code Components
    extracted from this document must\n   include Simplified BSD License text as described
    in Section 4.e of\n   the Trust Legal Provisions and are provided without warranty
    as\n   described in the Simplified BSD License.\n"
  title: Copyright Notice
- contents:
  - "1.  Introduction\n   This document defines an IMAP [RFC3501] extension to facilitate\n
    \  moving messages from one mailbox to another.  This is accomplished by\n   defining
    a new MOVE command and extending the UID command to allow\n   UID MOVE.\n   A
    move function is not provided in the base IMAP specification, so\n   clients have
    instead had to use a combination of the COPY, STORE, and\n   EXPUNGE commands
    to perform this very common operation.\n   Implementors have long pointed out
    some shortcomings with this\n   approach.  Because the moving of a message is
    not an atomic process,\n   interruptions can leave messages in intermediate states.
    \ Because\n   multiple clients can be accessing the mailboxes at the same time,\n
    \  clients can see messages in intermediate states even without\n   interruptions.
    \ If the source mailbox contains other messages that\n   are flagged for deletion,
    the third step can have the side effect of\n   expunging more than just the set
    of moved messages.  Additionally,\n   servers with certain types of back-end message
    stores might have\n   efficient ways of moving messages, which don't involve the
    actual\n   copying of data.  Such efficiencies are often not available to the\n
    \  COPY/STORE/EXPUNGE process.\n   The MOVE extension is present in any IMAP implementation
    that returns\n   \"MOVE\" as one of the supported capabilities to the CAPABILITY\n
    \  command.\n"
  title: 1.  Introduction
- contents:
  - "2.  Conventions Used in This Document\n   The key words \"MUST\", \"MUST NOT\",
    \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\",
    \"MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described
    in [RFC2119].\n   Formal syntax is specified using ABNF [RFC5234].\n   Example
    lines prefaced by \"C:\" are sent by the client and ones\n   prefaced by \"S:\"
    by the server.\n"
  title: 2.  Conventions Used in This Document
- contents:
  - '3.  MOVE and UID MOVE

    '
  - contents:
    - "3.1.  MOVE Command\n   Arguments: sequence set\n              mailbox name\n
      \  Responses: no specific responses for this command\n   Result: OK - move completed\n
      \          NO - move error: can't move those messages or to that name\n           BAD
      - command unknown or arguments invalid\n"
    title: 3.1.  MOVE Command
  - contents:
    - "3.2.  UID MOVE Command\n   This extends the first form of the UID command (see
      [RFC3501],\n   Section 6.4.8) to add the MOVE command defined above as a valid\n
      \  argument.\n"
    title: 3.2.  UID MOVE Command
  - contents:
    - "3.3.  Semantics of MOVE and UID MOVE\n   The MOVE command takes two arguments:
      a message set (sequence numbers\n   for MOVE, UIDs for UID MOVE) and a named
      mailbox.  Each message\n   included in the set is moved, rather than copied,
      from the selected\n   (source) mailbox to the named (target) mailbox.\n   This
      means that a new message is created in the target mailbox with a\n   new UID,
      the original message is removed from the source mailbox, and\n   it appears
      to the client as a single action.  This has the same\n   effect for each message
      as this sequence:\n   1.  [UID] COPY\n   2.  [UID] STORE +FLAGS.SILENT \\DELETED\n
      \  3.  UID EXPUNGE\n   Although the effect of the MOVE is the same as the preceding
      steps,\n   the semantics are not identical: The intermediate states produced
      by\n   those steps do not occur, and the response codes are different.  In\n
      \  particular, though the COPY and EXPUNGE response codes will be\n   returned,
      response codes for a STORE MUST NOT be generated and the\n   \\DELETED flag
      MUST NOT be set for any message.\n   Because a MOVE applies to a set of messages,
      it might fail partway\n   through the set.  Regardless of whether the command
      is successful in\n   moving the entire set, each individual message SHOULD either
      be moved\n   or unaffected.  The server MUST leave each message in a state where\n
      \  it is in at least one of the source or target mailboxes (no message\n   can
      be lost or orphaned).  The server SHOULD NOT leave any message in\n   both mailboxes
      (it would be bad for a partial failure to result in a\n   bunch of duplicate
      messages).  This is true even if the server\n   returns a tagged NO response
      to the command.\n   Because of the similarity of MOVE to COPY, extensions that
      affect\n   COPY affect MOVE in the same way.  Response codes such as TRYCREATE\n
      \  (see [RFC3501], Section 6.4.7), as well as those defined by\n   extensions,
      are sent as appropriate.  See Section 4 for more\n   information about how MOVE
      interacts with other IMAP extensions.\n   An example:\n       C: a UID MOVE
      42:69 foo\n       S: * OK [COPYUID 432432 42:69 1202:1229]\n       S: * 22 EXPUNGE\n
      \      S: (more expunges)\n       S: a OK Done\n   Note that the server may
      send unrelated EXPUNGE responses as well, if\n   any happen to have been expunged
      at the same time; this is normal\n   IMAP operation.\n   Implementers will need
      to read [RFC4315] to understand what UID\n   EXPUNGE does, though full implementation
      of [RFC4315] is not\n   necessary.\n   Note that moving a message to the currently
      selected mailbox (that\n   is, where the source and target mailboxes are the
      same) is allowed\n   when copying the message to the currently selected mailbox
      is\n   allowed.\n   The server may send EXPUNGE (or VANISHED) responses before
      the tagged\n   response, so the client cannot safely send more commands with
      message\n   sequence number arguments while the server is processing MOVE or
      UID\n   MOVE.\n   Both MOVE and UID MOVE can be pipelined with other commands,
      but care\n   has to be taken.  Both commands modify sequence numbers and also\n
      \  allow unrelated EXPUNGE responses.  The renumbering of other messages\n   in
      the source mailbox following any EXPUNGE response can be\n   surprising and
      makes it unsafe to pipeline any command that relies on\n   message sequence
      numbers after a MOVE or UID MOVE.  Similarly, MOVE\n   cannot be pipelined with
      a command that might cause message\n   renumbering.  See [RFC3501], Section
      5.5, for more information about\n   ambiguities as well as handling requirements
      for both clients and\n   servers.\n"
    title: 3.3.  Semantics of MOVE and UID MOVE
  title: 3.  MOVE and UID MOVE
- contents:
  - "4.  Interaction with Other Extensions\n   This section describes how MOVE interacts
    with some other IMAP\n   extensions.\n"
  - contents:
    - "4.1.  RFC 2087, QUOTA\n   The QUOTA extension (defined by [RFC2087]) may interact
      with MOVE on\n   some servers, in the sense that a MOVE command may succeed
      where COPY\n   would cause a quota overrun.\n"
    title: 4.1.  RFC 2087, QUOTA
  - contents:
    - "4.2.  RFC 4314, Access Control List (ACL)\n   The ACL rights [RFC4314] required
      for MOVE and UID MOVE are the union\n   of the ACL rights required for UID STORE,
      UID COPY, and UID EXPUNGE.\n"
    title: 4.2.  RFC 4314, Access Control List (ACL)
  - contents:
    - "4.3.  RFC 4315, UIDPLUS\n   Servers supporting UIDPLUS [RFC4315] SHOULD send
      COPYUID in response\n   to a UID MOVE command.  For additional information see
      Section 3 of\n   [RFC4315].\n   Servers implementing UIDPLUS are also advised
      to send the COPYUID\n   response code in an untagged OK before sending EXPUNGE
      or moved\n   responses.  (Sending COPYUID in the tagged OK, as described in
      the\n   UIDPLUS specification, means that clients first receive an EXPUNGE\n
      \  for a message and afterwards COPYUID for the same message.  It can be\n   unnecessarily
      difficult to process that sequence usefully.)\n"
    title: 4.3.  RFC 4315, UIDPLUS
  - contents:
    - "4.4.  RFC 5162, QRESYNC\n   The QRESYNC extension [RFC5162] states that the
      server SHOULD send\n   VANISHED rather than EXPUNGE in response to the UID EXPUNGE
      command.\n   The same requirement applies to MOVE, and a QRESYNC-enabled client\n
      \  needs to handle both VANISHED and EXPUNGE responses to a UID MOVE\n   command.\n
      \  If the server is capable of storing modification sequences for the\n   selected
      mailbox, it MUST increment the per-mailbox mod-sequence if\n   at least one
      message was permanently moved due to the execution of\n   the MOVE/UID MOVE
      command.  For each permanently removed message, the\n   server MUST remember
      the incremented mod-sequence and corresponding\n   UID.  If at least one message
      was moved, the server MUST send the\n   updated per-mailbox modification sequence
      using the HIGHESTMODSEQ\n   response code (defined in [RFC4551]) in the tagged
      or untagged OK\n   response.\n   When one or more messages are moved to a target
      mailbox, if the\n   server is capable of storing modification sequences for
      the mailbox,\n   the server MUST generate and assign new modification sequence
      numbers\n   to the moved messages that are higher than the highest modification\n
      \  sequence of the messages originally in the mailbox.\n"
    title: 4.4.  RFC 5162, QRESYNC
  - contents:
    - "4.5.  IMAP Events in Sieve\n   MOVE applies to IMAP events in Sieve [RFC6785]
      in the same way as\n   COPY does.  Therefore, MOVE can cause a Sieve script
      to be invoked\n   with the imap.cause set to \"COPY\".  Because MOVE does not
      cause flags\n   to be changed, a MOVE command will not result in a script invocation\n
      \  with the imap.cause set to \"FLAG\".\n"
    title: 4.5.  IMAP Events in Sieve
  title: 4.  Interaction with Other Extensions
- contents:
  - "5.  Formal Syntax\n   The following syntax specification uses the Augmented Backus-Naur\n
    \  Form (ABNF) notation as specified in [RFC5234].  [RFC3501] defines\n   the
    non-terminals \"capability\", \"command-select\", \"sequence-set\", and\n   \"mailbox\".\n
    \  Except as noted otherwise, all alphabetic characters are case\n   insensitive.
    \ The use of upper or lower case characters to define\n   token strings is for
    editorial clarity only.  Implementations MUST\n   accept these strings in a case-insensitive
    fashion.\n   capability     =/ \"MOVE\"\n   command-select =/ move\n   move           =
    \"MOVE\" SP sequence-set SP mailbox\n   uid            = \"UID\" SP (copy / fetch
    / search / store / move)\n"
  title: 5.  Formal Syntax
- contents:
  - "6.  Security Considerations\n   MOVE does not introduce any new capabilities
    to IMAP, and this limits\n   the security impact.  However, the transactional
    semantics of MOVE\n   may interact with specific implementations in ways that
    could have\n   unexpected consequences.  For example, moving messages between\n
    \  mailboxes under the quota root may require temporary suspension of\n   quota
    checking.\n   An additional area of concern is interaction with antispam,\n   antivirus,
    and other security scanning and auditing mechanisms.\n   Different mailboxes may
    have different security policies that could\n   interact with MOVE in complex
    ways.  Scanning with updated rules may\n   also be required when messages are
    moved even when the underlying\n   policy has not changed.\n   MOVE does relieve
    a problem with the base specification, since client\n   authors currently have
    to devise and implement complicated algorithms\n   to handle partial failures
    of the STORE/COPY/EXPUNGE trio.\n   Incomplete or improper implementation of these
    algorithms can lead to\n   mail loss.\n"
  title: 6.  Security Considerations
- contents:
  - "7.  IANA Considerations\n   The IANA has added MOVE to the \"IMAP 4 Capabilities\"
    registry,\n   <http://www.iana.org/assignments/imap4-capabilities>.\n"
  title: 7.  IANA Considerations
- contents:
  - "8.  Acknowledgments\n   This document is dedicated to the memory of Mark Crispin,
    the\n   inventor of the IMAP protocol, author of the IMAP protocol\n   specification
    [RFC3501], and contributor to many other email\n   specifications in the IETF.\n
    \  An extension like this has been proposed many times, by many people.\n   This
    document is based on several of those proposals, most recently\n   that by Witold
    Krecicki.  Witold, Benoit Claise, Adrien W. de Croy,\n   Stephen Farrell, Bron
    Gondwana, Dan Karp, Christian Ketterer, Murray\n   Kucherawy, Jan Kundrat, Barry
    Leiba, Alexey Melnikov, Kathleen\n   Moriarty, Zoltan Ordogh, Pete Resnick, Timo
    Sirainen, Michael\n   Slusarz, and others provided valuable comments.\n"
  title: 8.  Acknowledgments
- contents:
  - '9.  References

    '
  - contents:
    - "9.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use
      in RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119, March
      1997.\n   [RFC3501]  Crispin, M., \"INTERNET MESSAGE ACCESS PROTOCOL - VERSION\n
      \             4rev1\", RFC 3501, March 2003.\n   [RFC4314]  Melnikov, A., \"IMAP4
      Access Control List (ACL) Extension\",\n              RFC 4314, December 2005.\n
      \  [RFC4315]  Crispin, M., \"Internet Message Access Protocol (IMAP) -\n              UIDPLUS
      extension\", RFC 4315, December 2005.\n   [RFC4551]  Melnikov, A. and S. Hole,
      \"IMAP Extension for Conditional\n              STORE Operation or Quick Flag
      Changes Resynchronization\",\n              RFC 4551, June 2006.\n   [RFC5162]
      \ Melnikov, A., Cridland, D., and C. Wilson, \"IMAP4\n              Extensions
      for Quick Mailbox Resynchronization\", RFC 5162,\n              March 2008.\n
      \  [RFC5234]  Crocker, D. and P. Overell, \"Augmented BNF for Syntax\n              Specifications:
      ABNF\", STD 68, RFC 5234, January 2008.\n"
    title: 9.1.  Normative References
  - contents:
    - "9.2.  Informative References\n   [RFC2087]  Myers, J., \"IMAP4 QUOTA extension\",
      RFC 2087,\n              January 1997.\n   [RFC6785]  Leiba, B., \"Support for
      Internet Message Access Protocol\n              (IMAP) Events in Sieve\", RFC
      6785, November 2012.\n"
    title: 9.2.  Informative References
  title: 9.  References
- contents:
  - "Authors' Addresses\n   Arnt Gulbrandsen\n   Schweppermannstr. 8\n   D-81671 Muenchen\n
    \  Germany\n   Fax:   +49 89 4502 9758\n   EMail: arnt@gulbrandsen.priv.no\n   Ned
    Freed (editor)\n   Oracle\n   800 Royal Oaks\n   Monrovia, CA  91016-6347\n   USA\n
    \  EMail: ned+ietf@mrochek.com\n"
  title: Authors' Addresses
