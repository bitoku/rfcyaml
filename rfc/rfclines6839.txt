Abstract A content media type name sometimes includes partitioned meta  information distinguished by a structured syntax to permit noting an attribute of the media as a suffix to the name.
This document defines several structured syntax suffixes for use with media type registrations.
Introduction [RFC3023] created the  xml suffix convention that can be used when defining names for media types whose representation uses XML underneath.
That is, they could have been successfully parsed as if the media type had been application/xml in addition to their being parsed as their media type that is using the  xml suffix.
[RFC6838] defines the media type "Structured Syntax Suffix Registry" to be used for such structured syntax suffixes.
This document defines and registers these structured syntax suffixes in the Structured Syntax Suffix Registry, along with " ber" and " zip".
In addition, this document updates [RFC3023] to formally register the " xml" structured syntax suffix according to the procedure defined in [RFC6838].
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in [RFC2119].
When to Use These Structured Syntax Suffixes
Each of the structured syntax suffixes defined in this document is appropriate for use when the media type identifies the semantics of the protocol payload.
That is, knowing the semantics of the specific media type provides for more specific processing of the content than that afforded by generic processing of the underlying representation.
At the same time, using the suffix allows receivers of the media types to do generic processing of the underlying representation in cases where they do not need to perform special handling of the particular semantics of the exact media type, and there is no special knowledge needed by such a generic processor in order to parse that underlying representation other than what would be needed to parse any example of that underlying representation.
Initial Structured Syntax Suffix Definitions 3.1.
The  json Structured Syntax Suffix [RFC4627] defines the "application/json" media type.
The suffix " json" MAY be used with any media type whose representation follows that established for "application/json".
The media type structured syntax suffix registration form follows.
See [RFC6838] for definitions of each of the registration form headings.
[RFC4627] Encoding considerations: Per [RFC4627], JSON is allowed to be represented using UTF 8, UTF 16, or UTF 32.
When JSON is written in UTF 8, JSON is 8bit compatible ([RFC2045]).
When JSON is written in UTF 16 or UTF 32, JSON is binary ([RFC2045]).
Fragment identifier considerations: The syntax and semantics of fragment identifiers specified for  json SHOULD be as specified for "application/json".
(At publication of this document, there is no fragment identification syntax defined for "application/json".)
The syntax and semantics for fragment identifiers for a specific "xxx/yyy json" SHOULD be processed as follows:
For cases defined in  json, where the fragment identifier resolves per the  json rules, then process as specified in  json.
For cases defined in  json, where the fragment identifier does not resolve per the  json rules, then process as specified in "xxx/yyy json".
For cases not defined in  json, then process as specified in "xxx/yyy json".
Apps Area Working Group (apps discuss@ietf.org)
The Apps Area Working Group.
IESG has change control over this registration.
The  ber Structured Syntax Suffix
The ITU defined the Basic Encoding Rules (BER) transfer syntax in [ITU.X690.2008].
The suffix " ber" MAY be used with any media type whose representation follows the BER transfer syntax.
(The Expert Reviewer for media type structured syntax suffix registrations ought to be aware of the relationship between BER and DER to aid in selecting the proper suffix.)
The media type structured syntax suffix registration form for  ber follows:
Name:  Basic Encoding Rules (BER) transfer syntax
BER is a binary encoding.
Fragment identifier considerations: At publication of this document, there is no fragment identification syntax defined for  ber.
The syntax and semantics for fragment identifiers for a specific "xxx/yyy ber" SHOULD be processed as follows:
For cases defined in  ber, where the fragment identifier resolves per the  ber rules, then process as specified in  ber.
For cases defined in  ber, where the fragment identifier does not resolve per the  ber rules, then process as specified in "xxx/yyy ber".
For cases not defined in  ber, then process as specified in "xxx/yyy ber".
a Security considerations: Each individual media type registered with a  ber suffix can have additional security considerations.
BER has a type length value structure, and it is easy to construct malicious content with invalid length fields that can cause buffer overrun conditions.
BER allows for arbitrary levels of nesting, which may make it possible to construct malicious content that will cause a stack overflow.
Interpreters of the BER structures should be aware of these issues and should take appropriate measures to guard against buffer overflows and stack overruns in particular and malicious content in general.
Apps Area Working Group (apps discuss@ietf.org)
The Apps Area Working Group.
IESG has change control over this registration.
The  der Structured Syntax Suffix
The ITU defined the Distinguished Encoding Rules (DER) transfer syntax in [ITU.X690.2008].
The suffix " der" MAY be used with any media type whose representation follows the DER transfer syntax.
(The Expert Reviewer for media type structured syntax suffix registrations ought to be aware of the relationship between BER and DER to aid in selecting the proper suffix.)
The media type structured syntax suffix registration form for  der follows:
Name:  Distinguished Encoding Rules (DER) transfer
DER is a binary encoding.
Fragment identifier considerations: At publication of this document, there is no fragment identification syntax defined for  der.
The syntax and semantics for fragment identifiers for a specific "xxx/yyy der" SHOULD be processed as follows:
For cases defined in  der, where the fragment identifier resolves per the  der rules, then process as specified in  der.
For cases defined in  der, where the fragment identifier does not resolve per the  der rules, then process as specified in "xxx/yyy der".
For cases not defined in  der, then process as specified in "xxx/yyy der".
a Security considerations: Each individual media type registered with a  der suffix can have additional security considerations.
DER has a type length value structure, and it is easy to construct malicious content with invalid length fields that can cause buffer overrun conditions.
DER allows for arbitrary levels of nesting, which may make it possible to construct malicious content that will cause a stack overflow.
Interpreters of the DER structures should be aware of these issues and should take appropriate measures to guard against buffer overflows and stack overruns in particular and malicious content in general.
Apps Area Working Group (apps discuss@ietf.org)
The Apps Area Working Group.
IESG has change control over this registration.
The  fastinfoset Structured Syntax Suffix
The ITU defined the Fast Infoset document format as a binary representation of the XML Information Set in [ITU.X891.2005].
These documents further define the "application/fastinfoset" media type.
The suffix " fastinfoset" MAY be used with any media type whose representation follows that established for "application/ fastinfoset".
The media type structured syntax suffix registration form follows:
Name:  Fast Infoset document format
] Encoding considerations: Fast Infoset is a binary encoding.
The binary, quoted printable, and base64 content transfer encodings are suitable for use with Fast Infoset.
Fragment identifier considerations: The syntax and semantics of fragment identifiers specified for  fastinfoset SHOULD be as specified for "application/fastinfoset".
(At publication of this document, there is no fragment identification syntax defined for "application/fastinfoset".)
The syntax and semantics for fragment identifiers for a specific "xxx/ yyy fastinfoset" SHOULD be processed as follows:
For cases defined in  fastinfoset, where the fragment identifier resolves per the  fastinfoset rules, then process as specified in  fastinfoset.
For cases defined in  fastinfoset, where the fragment identifier does not resolve per the  fastinfoset rules, then process as specified in "xxx/yyy fastinfoset".
For cases not defined in  fastinfoset, then process as specified in "xxx/ yyy fastinfoset".
a Security considerations: There are no security considerations inherent in Fast Infoset.
Each individual media type registered with a  fastinfoset suffix can have additional security considerations.
Apps Area Working Group (apps discuss@ietf.org)
The Apps Area Working Group.
IESG has change control over this registration.
The  wbxml Structured Syntax Suffix
The Wireless Application Protocol (WAP)
Forum has defined the WAP Binary XML (WBXML) document format as a binary representation of XML in [WBXML].
This document further defines the "application/ vnd.wap.wbxml" media type.
The suffix " wbxml" MAY be used with any media type whose representation follows that established for "application/vnd.wap.wbxml".
The media type structured syntax suffix registration form follows:
WBXML is a binary encoding.
Fragment identifier considerations: The syntax and semantics of fragment identifiers specified for  wbxml SHOULD be as specified for "application/vnd.wap.wbxml".
(At publication of this document, there is no fragment identification syntax defined for "application/vnd.wap.wbxml".)
The syntax and semantics for fragment identifiers for a specific "xxx/yyy wbxml" SHOULD be processed as follows:
For cases defined in  wbxml, where the fragment identifier resolves per the  wbxml rules, then process as specified in  wbxml.
For cases defined in  wbxml, where the fragment identifier does not resolve per the  wbxml rules, then process as specified in "xxx/yyy wbxml".
For cases not defined in  wbxml, then process as specified in "xxx/yyy wbxml".
a Security considerations: There are no security considerations inherent in WBXML.
Each individual media type registered with a  wbxml suffix can have additional security considerations.
Apps Area Working Group (apps discuss@ietf.org)
The Apps Area Working Group.
IESG has change control over this registration.
The  zip Structured Syntax Suffix
The ZIP format is a public domain, cross platform, interoperable file storage and transfer format, originally defined by PKWARE, Inc.; it supports compression and encryption and is used as the underlying representation by a variety of file formats.
The media type "application/zip" has been registered for such files.
The suffix " zip" MAY be used with any media type whose representation follows that established for "application/zip".
The media type structured syntax suffix registration form follows:
Name:  ZIP file storage and transfer format
ZIP is a binary encoding.
Fragment identifier considerations: The syntax and semantics of fragment identifiers specified for  zip SHOULD be as specified for "application/zip".
(At publication of this document, there is no fragment identification syntax defined for "application/zip".)
The syntax and semantics for fragment identifiers for a specific "xxx/yyy zip" SHOULD be processed as follows:
For cases defined in  zip, where the fragment identifier resolves per the  zip rules, then process as specified in  zip.
For cases defined in  zip, where the fragment identifier does not resolve per the  zip rules, then process as specified in "xxx/yyy zip".
For cases not defined in  zip, then process as specified in "xxx/yyy zip".
a Security considerations: IP files support two forms of encryption: Strong Encryption and AES 128 bit, 192 bit, and 256 bit encryption; see the specification for further details.
Each individual media type registered with a  zip suffix can have additional security considerations.
Apps Area Working Group (apps discuss@ietf.org)
Author/Change controller:  The Apps Area Working Group.
IESG has change control over this registration.
IANA Considerations See the media type structured syntax suffix registration forms in Sections 3.1 3.6.
The  xml Structured Syntax Suffix
The following structured syntax suffix registration for " xml" shall be used to reflect the information found in [RFC3023], with the addition of fragment identifier considerations.
(Note that [RFC3023] is in the process of being updated by [XML MEDIATYPES].)
Name:  Extensible Markup Language (XML)
Encoding considerations: Per [RFC3023], XML is allowed to be represented using both 7 bit and 8 bit encodings.
When XML is written in UTF 8, XML is 8bit compatible ([RFC2045]).
When XML is written in UTF 16 or UTF 32, XML is binary ([RFC2045]).
Fragment identifier considerations: The syntax and semantics of fragment identifiers specified for  xml SHOULD be as specified for "application/xml".
(At publication of this document, the fragment identification syntax considerations for "application/xml" are defined in [RFC3023], Sections 5 and 7.)
The syntax and semantics for fragment identifiers for a specific "xxx/yyy xml" SHOULD be processed as follows:
For cases defined in  xml, where the fragment identifier resolves per the  xml rules, then process as specified in  xml.
For cases defined in  xml, where the fragment identifier does not resolve per the  xml rules, then process as specified in "xxx/yyy xml".
For cases not defined in  xml, then process as specified in "xxx/yyy xml".
Apps Area Working Group (apps discuss@ietf.org)
The Apps Area Working Group.
IESG has change control over this registration.
Security Considerations See the Security Considerations sections found in the media type structured syntax suffix registration forms from Sections 3 and 4.
When updating a  <suffix> registration, care should be taken to review all previously registered xxx/yyy <suffix> media types as to whether they might be affected by the updated  <suffix> registration.
Because the generic fragment identifier processing rules take precedence over media type specific rules, introducing new or changing existing definitions may break the existing registrations of specific media types, as well as particular implementations of applications that process affected media types.
Such changes can introduce interoperability and security issues.
When updating the fragment identifier processing rules for a specific xxx/yyy <suffix> media type, care should be taken to review the generic fragment identifier processing rules for the  <suffix> registration and not introduce any conflicts.
Because the generic fragment identifier processing rules take precedence over media type  specific rules, such conflicting processing requirements should be ignored by an implementation, but such conflicts can introduce interoperability and security issues.
Note that [FRAGID BP] provides additional advice to designers of fragment identifier rules for media type suffixes and specific media types.
