- title: __initial_text__
  contents:
  - '                   The Group Domain of Interpretation

    '
- title: Abstract
  contents:
  - "Abstract\n   This document describes the Group Domain of Interpretation (GDOI)\n\
    \   protocol specified in RFC 3547.  The GDOI provides group key\n   management\
    \ to support secure group communications according to the\n   architecture specified\
    \ in RFC 4046.  The GDOI manages group security\n   associations, which are used\
    \ by IPsec and potentially other data\n   security protocols.  This document replaces\
    \ RFC 3547.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This\
    \ document is a product of the Internet Engineering Task Force\n   (IETF).  It\
    \ represents the consensus of the IETF community.  It has\n   received public\
    \ review and has been approved for publication by the\n   Internet Engineering\
    \ Steering Group (IESG).  Further information on\n   Internet Standards is available\
    \ in Section 2 of RFC 5741.\n   Information about the current status of this document,\
    \ any errata,\n   and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc6407.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2011 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n   This document\
    \ may contain material from IETF Documents or IETF\n   Contributions published\
    \ or made publicly available before November\n   10, 2008.  The person(s) controlling\
    \ the copyright in some of this\n   material may not have granted the IETF Trust\
    \ the right to allow\n   modifications of such material outside the IETF Standards\
    \ Process.\n   Without obtaining an adequate license from the person(s) controlling\n\
    \   the copyright in such materials, this document may not be modified\n   outside\
    \ the IETF Standards Process, and derivative works of it may\n   not be created\
    \ outside the IETF Standards Process, except to format\n   it for publication\
    \ as an RFC or to translate it into languages other\n   than English.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction . . . . . . . . . . . . . . . . . . .\
    \ . . . . . .  3\n     1.1.  Requirements Notation  . . . . . . . . . . . . .\
    \ . . . . .  5\n     1.2.  Terminology  . . . . . . . . . . . . . . . . . . .\
    \ . . . .  6\n     1.3.  Acronyms and Abbreviations . . . . . . . . . . . . .\
    \ . . .  7\n   2.  GDOI Phase 1 Protocol  . . . . . . . . . . . . . . . . . .\
    \ . .  8\n     2.1.  DOI value  . . . . . . . . . . . . . . . . . . . . . . .\
    \ .  8\n     2.2.  UDP port . . . . . . . . . . . . . . . . . . . . . . . . .\
    \  8\n   3.  GROUPKEY-PULL Exchange . . . . . . . . . . . . . . . . . . . .  9\n\
    \     3.1.  Authorization  . . . . . . . . . . . . . . . . . . . . . .  9\n  \
    \   3.2.  Messages . . . . . . . . . . . . . . . . . . . . . . . . .  9\n    \
    \ 3.3.  Group Member Operations  . . . . . . . . . . . . . . . . . 12\n     3.4.\
    \  GCKS Operations  . . . . . . . . . . . . . . . . . . . . . 13\n     3.5.  Counter-Modes\
    \ of Operation . . . . . . . . . . . . . . . . 14\n   4.  GROUPKEY-PUSH Message\
    \  . . . . . . . . . . . . . . . . . . . . 16\n     4.1.  Use of Signature Keys\
    \  . . . . . . . . . . . . . . . . . . 17\n     4.2.  ISAKMP Header Initialization\
    \ . . . . . . . . . . . . . . . 17\n     4.3.  GCKS Operations  . . . . . . .\
    \ . . . . . . . . . . . . . . 17\n     4.4.  Group Member Operations  . . . .\
    \ . . . . . . . . . . . . . 18\n   5.  Payloads and Defined Values  . . . . .\
    \ . . . . . . . . . . . . 19\n     5.1.  Identification Payload . . . . . . .\
    \ . . . . . . . . . . . 20\n     5.2.  Security Association Payload . . . . .\
    \ . . . . . . . . . . 20\n     5.3.  SA KEK Payload . . . . . . . . . . . . .\
    \ . . . . . . . . . 21\n     5.4.  Group Associated Policy  . . . . . . . . .\
    \ . . . . . . . . 27\n     5.5.  SA TEK Payload . . . . . . . . . . . . . . .\
    \ . . . . . . . 30\n     5.6.  Key Download Payload . . . . . . . . . . . . .\
    \ . . . . . . 34\n     5.7.  Sequence Number Payload  . . . . . . . . . . . .\
    \ . . . . . 44\n     5.8.  Nonce  . . . . . . . . . . . . . . . . . . . . . .\
    \ . . . . 44\n     5.9.  Delete . . . . . . . . . . . . . . . . . . . . . . .\
    \ . . . 45\n   6.  Algorithm Selection  . . . . . . . . . . . . . . . . . . .\
    \ . . 45\n     6.1.  KEK  . . . . . . . . . . . . . . . . . . . . . . . . . .\
    \ . 46\n     6.2.  TEK  . . . . . . . . . . . . . . . . . . . . . . . . . . .\
    \ 46\n   7.  Security Considerations  . . . . . . . . . . . . . . . . . . . 47\n\
    \     7.1.  ISAKMP Phase 1 . . . . . . . . . . . . . . . . . . . . . . 47\n  \
    \   7.2.  GROUPKEY-PULL Exchange . . . . . . . . . . . . . . . . . . 48\n    \
    \ 7.3.  GROUPKEY-PUSH Exchange . . . . . . . . . . . . . . . . . . 50\n     7.4.\
    \  Forward and Backward Access Control  . . . . . . . . . . . 51\n     7.5.  Derivation\
    \ of Keying Material  . . . . . . . . . . . . . . 53\n   8.  IANA Considerations\
    \  . . . . . . . . . . . . . . . . . . . . . 53\n     8.1.  Additions to Current\
    \ Registries  . . . . . . . . . . . . . 53\n     8.2.  New Registries . . . .\
    \ . . . . . . . . . . . . . . . . . . 54\n     8.3.  Cleanup of Existing Registries\
    \ . . . . . . . . . . . . . . 55\n   9.  Acknowledgements . . . . . . . . . .\
    \ . . . . . . . . . . . . . 57\n   10. References . . . . . . . . . . . . . .\
    \ . . . . . . . . . . . . 57\n     10.1. Normative References . . . . . . . .\
    \ . . . . . . . . . . . 57\n     10.2. Informative References . . . . . . . .\
    \ . . . . . . . . . . 58\n   Appendix A.  GDOI Applications . . . . . . . . .\
    \ . . . . . . . . . 62\n   Appendix B.  Significant Changes from RFC 3547 . .\
    \ . . . . . . . . 62\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   Secure group and multicast applications require a method\
    \ by which\n   each group member shares common security policy and keying material.\n\
    \   This document describes the Group Domain of Interpretation (GDOI),\n   which\
    \ is an Internet Security Association and Key Management Protocol\n   (ISAMKP)\
    \ [RFC2408] Domain of Interpretation (DOI), a group key\n   management system.\
    \  The GDOI distributes security associations (SAs)\n   for IPsec Authentication\
    \ Header (AH) [RFC4302] and Encapsulating\n   Security Payload (ESP) [RFC4303]\
    \ protocols and potentially other data\n   security protocols used in group applications.\
    \  The GDOI uses the\n   group key management model defined in [RFC4046], and\
    \ described more\n   generally by \"The Multicast Group Security Architecture\"\
    \ [RFC3740].\n   In this group key management model, the GDOI protocol participants\n\
    \   are a Group Controller/Key Server (GCKS) and a group member (GM).  A\n   group\
    \ member contacts (\"registers with\") a GCKS to join the group.\n   During the\
    \ registration, mutual authentication and authorization are\n   achieved, after\
    \ which the GCKS distributes current group policy and\n   keying material to the\
    \ group member over an authenticated and\n   encrypted session.  The GCKS may\
    \ also initiate contact (\"rekeys\")\n   with group members to provide updates\
    \ to group policy.\n   ISAKMP defines two \"phases\" of negotiation (Section 2.3\
    \ of\n   [RFC2408]).  A Phase 1 security association provides mutual\n   authentication\
    \ and authorization, and a security association that is\n   used by the protocol\
    \ participants to execute a Phase 2 exchange.\n   This document incorporates (i.e.,\
    \ uses but does not redefine) the\n   Phase 1 security association definition\
    \ from the Internet DOI\n   [RFC2407], [RFC2409].  Although RFCs 2407, 2408, and\
    \ 2409 were\n   obsoleted by [RFC4306] (and subsequently [RFC5996]), they are\
    \ used by\n   this document because the protocol definitions remain relevant for\n\
    \   ISAKMP protocols other than IKEv2.\n   The GDOI includes two new Phase 2 ISAKMP\
    \ exchanges (protocols), as\n   well as necessary new payload definitions to the\
    \ ISAKMP standard\n   (Section 2.1 of [RFC2408]).  These two new protocols are:\n\
    \   1.  The GROUPKEY-PULL registration protocol exchange.  This exchange\n   \
    \    uses \"pull\" behavior since the member initiates the retrieval of\n    \
    \   these SAs from a GCKS.  It is protected by an ISAKMP Phase 1\n       protocol,\
    \ as described above.  At the culmination of a GROUPKEY-\n       PULL exchange,\
    \ an authorized group member has received and\n       installed a set of SAs that\
    \ represent group policy, and it is\n       ready to participate in secure group\
    \ communications.\n   2.  The GROUPKEY-PUSH rekey protocol exchange.  The rekey\
    \ protocol is\n       a datagram initiated (\"pushed\") by the GCKS, usually delivered\
    \ to\n       group members using a IP multicast address.  The rekey protocol\n\
    \       is an ISAKMP protocol, where cryptographic policy and keying\n       material\
    \ (\"Rekey SA\") are included in the group policy\n       distributed by the GCKS\
    \ in the GROUPKEY-PULL exchange.  At the\n       culmination of a GROUPKEY-PUSH\
    \ exchange, the key server has sent\n       group policy to all authorized group\
    \ members, allowing receiving\n       group members to participate in secure group\
    \ communications.  If\n       a group management method is included in group policy\
    \ (as\n       described in Section 7.4), at the conclusion of the GROUPKEY-PUSH\n\
    \       exchange, some members of the group may have been de-authorized\n    \
    \   and no longer able to participate in the secure group\n       communications.\n\
    \      +--------------------------------------------------------------+\n    \
    \  |                                                              |\n      | \
    \                   +--------------------+                    |\n      |     \
    \       +------>|     GDOI GCKS      |<------+            |\n      |         \
    \   |       +--------------------+       |            |\n      |            |\
    \                 |                  |            |\n      |       GROUPKEY-PULL\
    \          |             GROUPKEY-PULL     |\n      |         PROTOCOL       \
    \      |               PROTOCOL        |\n      |            |               \
    \  |                  |            |\n      |            v           GROUPKEY-PUSH\
    \            v            |\n      |   +-----------------+     PROTOCOL     +-----------------+\
    \   |\n      |   |                 |        |         |                 |   |\n\
    \      |   |    GDOI GM(s)   |<-------+-------->|    GDOI GM(S)   |   |\n    \
    \  |   |                 |                  |                 |   |\n      | \
    \  +-----------------+                  +-----------------+   |\n      |     \
    \       |                                    ^            |\n      |         \
    \   v                                    |            |\n      |            +-Data\
    \ Security Protocol (e.g., ESP)-+            |\n      |                      \
    \                                        |\n      +--------------------------------------------------------------+\n\
    \                   Figure 1. Group Key Management Model\n   Although the GROUPKEY-PUSH\
    \ protocol specified by this document can be\n   used to refresh the Rekey SA\
    \ protecting the GROUPKEY-PUSH protocol,\n   the most common use of GROUPKEY-PUSH\
    \ is to establish keying material\n   and policy for a data security protocol.\n\
    \   GDOI defines several payload types used to distribute policy and\n   keying\
    \ material within the GROUPKEY-PULL and GROUPKEY-PUSH protocols:\n   Security\
    \ Association (SA), SA KEK, SA TEK, Group Associated Policy\n   (GAP), Sequence\
    \ Number (SEQ), and Key Download (KD).  Format and\n   usage of these payloads\
    \ are defined in later sections of this memo.\n   In summary, GDOI is a group\
    \ security association management protocol:\n   all GDOI messages are used to\
    \ create, maintain, or delete security\n   associations for a group.  As described\
    \ above, these security\n   associations protect one or more data security protocol\
    \ SAs, a Rekey\n   SA, and/or other data shared by group members for multicast\
    \ and\n   groups security applications.\n"
- title: 1.1.  Requirements Notation
  contents:
  - "1.1.  Requirements Notation\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\"\
    , \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"\
    MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described\
    \ in [RFC2119].\n"
- title: 1.2.  Terminology
  contents:
  - "1.2.  Terminology\n   The following key terms are used throughout this document.\n\
    \   Data-Security SA  The security policy distributed by a GDOI GCKS\n       \
    \  describing traffic that is expected to be protected by group\n         members.\
    \  This document described the distribution of IPsec AH\n         and ESP Data-Security\
    \ SAs.\n   Group Controller/Key Server  A device that defines group policy and\n\
    \         distributes keys for that policy [RFC3740].\n   Group Member.  An authorized\
    \ member of a secure group, sending and/or\n         receiving IP packets related\
    \ to the group.\n   GROUPKEY-PULL.  A protocol used by a GDOI group member to\
    \ request\n         group policy and keying material.\n   GROUPKEY-PUSH.  A protocol\
    \ used by a GDOI GCKS to distribute updates\n         of group policy and keying\
    \ material to authorized group\n         members.\n   Key Encrypting Key.  The\
    \ symmetric cipher key used to protect the\n         GROUPKEY-PUSH message.\n\
    \   Logical Key Hierarchy.  A group management method defined in Section\n   \
    \      5.4 of [RFC2627].\n   Rekey SA.  The security policy protecting a GROUPKEY-PUSH\
    \ protocol.\n   SA Attribute Payload  A payload that follows the Security Association\n\
    \         payload and that describes group security attributes associated\n  \
    \       with the security association.  SA Attribute payloads include\n      \
    \   the SAK, SAT, and GAP payloads.\n   Security Parameter Index  An arbitrary\
    \ value that is used by a\n         receiver to identify a security association\
    \ such as an IPsec\n         ESP Security Association or a Rekey SA.\n   Traffic\
    \ Encryption Key.  The symmetric cipher key used to protect a\n         data security\
    \ protocol (e.g., IPsec ESP).\n"
- title: 1.3.  Acronyms and Abbreviations
  contents:
  - "1.3.  Acronyms and Abbreviations\n   The following acronyms and abbreviations\
    \ are used throughout this\n   document.\n   AH    IP Authentication Header\n\
    \   ATD   Activation Time Delay\n   DOI   Domain of Interpretation\n   DTD   Deactivation\
    \ Time Delay\n   ESP   IP Encapsulating Security Payload\n   GCKS  Group Controller/Key\
    \ Server\n   GDOI  Group Domain of Interpretation\n   GAP   Group Associated Policy\
    \ Payload\n   GM    Group Member\n   GSPD  Group Security Policy Database\n  \
    \ IV    Initialization Vector\n   KD    Key Download Payload\n   KEK   Key Encryption\
    \ Key\n   LKH   Logical Key Hierarchy\n   SA    Security Association\n   SAK \
    \  SA KEK Payload\n   SEQ   Sequence Number Payload\n   SAT   SA TEK Payload\n\
    \   SID   Sender-ID\n   SPI   Security Parameter Index\n   SSIV  Sender-Specific\
    \ IV\n   TEK   Traffic Encryption Key\n   TLV   Type/Length/Value\n   TV    Type/Value\n"
- title: 2.  GDOI Phase 1 Protocol
  contents:
  - "2.  GDOI Phase 1 Protocol\n   The GDOI GROUPKEY-PULL exchange is a Phase 2 protocol\
    \ that MUST be\n   protected by a Phase 1 protocol.  The Phase 1 protocol can\
    \ be any\n   protocol that provides for the following protections:\n   o  Peer\
    \ Authentication\n   o  Confidentiality\n   o  Message Integrity\n   The following\
    \ sections describe one such Phase 1 protocol.  Other\n   protocols which may\
    \ be potential Phase 1 protocols are described in\n   Appendix A.  However, the\
    \ use of the protocols listed there are not\n   considered part of this document.\n\
    \   This document defines how the ISAKMP Phase 1 exchanges as defined in\n   [RFC2409]\
    \ can be used a Phase 1 protocol for GDOI.  The following\n   sections define\
    \ characteristics of the ISAKMP Phase 1 protocols that\n   are unique for these\
    \ exchanges when used for GDOI.\n   Section 7.1 describes how the ISAKMP Phase\
    \ 1 protocols meet the\n   requirements of a GDOI Phase 1 protocol.\n"
- title: 2.1.  DOI value
  contents:
  - "2.1.  DOI value\n   The Phase 1 SA payload has a DOI value.  That value MUST\
    \ be the GDOI\n   DOI value as defined later in this document.\n"
- title: 2.2.  UDP port
  contents:
  - "2.2.  UDP port\n   IANA has assigned port 848 for the use of GDOI; this allows\
    \ for an\n   implementation to use separate ISAKMP implementations to service\
    \ GDOI\n   and the Internet Key Exchange Protocol (IKE) [RFC5996].  A GCKS\n \
    \  SHOULD listen on this port for GROUPKEY-PULL exchanges, and the GCKS\n   MAY\
    \ use this port to distribute GROUPKEY-PUSH messages.  An ISAKMP\n   Phase 1 exchange\
    \ implementation supporting NAT traversal [RFC3947]\n   MAY move to port 4500\
    \ to process the GROUPKEY-PULL exchange.\n"
- title: 3.  GROUPKEY-PULL Exchange
  contents:
  - "3.  GROUPKEY-PULL Exchange\n   The goal of the GROUPKEY-PULL exchange is to establish\
    \ a Rekey and/or\n   Data-Security SAs at the member for a particular group. \
    \ A Phase 1 SA\n   protects the GROUPKEY-PULL; there MAY be multiple GROUPKEY-PULL\n\
    \   exchanges for a given Phase 1 SA.  The GROUPKEY-PULL exchange\n   downloads\
    \ the data security keys (TEKs) and/or group key encrypting\n   key (KEK) or KEK\
    \ array under the protection of the Phase 1 SA.\n"
- title: 3.1.  Authorization
  contents:
  - "3.1.  Authorization\n   It is important that a group member explicitly trust\
    \ entities that it\n   expects to act as a GCKS for a particular group.  When\
    \ no\n   authorization is performed, it is possible for a rogue GDOI\n   participant\
    \ to perpetrate a man-in-the-middle attack between a group\n   member and a GCKS\
    \ [MP04].  A group member MUST specifically list each\n   authorized GCKS in its\
    \ Group Peer Authorization Database (GPAD)\n   [RFC5374].  A group member MUST\
    \ ensure that the Phase 1 identity of\n   the GCKS is an authorized GCKS.\n  \
    \ It is important that a GCKS explicitly authorize group members before\n   providing\
    \ them with group policy and keying material.  A GCKS\n   implementation SHOULD\
    \ have a method of authorizing group members\n   (e.g., by maintaining an authorization\
    \ list).  When the GCKS performs\n   authorization, it MUST use the Phase 1 identity\
    \ to authorize the\n   GROUPKEY-PULL request for group policy and keying material.\n"
- title: 3.2.  Messages
  contents:
  - "3.2.  Messages\n   The GROUPKEY-PULL is a Phase 2 exchange.  Phase 1 computes\
    \ SKEYID_a,\n   which is the \"key\" in the keyed hash used in the ISAKMP HASH\
    \ payloads\n   [RFC2408] included in GROUPKEY-PULL messages.  When using the Phase\
    \ 1\n   defined in this document, SKEYID_a is derived according to [RFC2409].\n\
    \   Each GROUPKEY-PULL message hashes a uniquely defined set of values\n   (described\
    \ below) and includes the result in the HASH payload.\n   Nonces permute the HASH\
    \ and provide some protection against replay\n   attacks.  Replay protection is\
    \ important to protect the GCKS from\n   attacks that a key management server\
    \ will attract.\n   The GROUPKEY-PULL uses nonces to guarantee \"liveness\" as\
    \ well as\n   against replay of a recent GROUPKEY-PULL message.  The replay attack\n\
    \   is only possible in the context of the current Phase 1.  If a\n   GROUPKEY-PULL\
    \ message is replayed based on a previous Phase 1, the\n   HASH calculation will\
    \ fail due to a wrong SKEYID_a.  The message will\n   fail processing before the\
    \ nonce is ever evaluated.\n   In order for either peer to get the benefit of\
    \ the replay protection,\n   it must postpone as much processing as possible until\
    \ it receives the\n   message in the protocol that proves the peer is live.  For\
    \ example,\n   the GCKS MUST NOT adjust its internal state (e.g., keeping a record\n\
    \   of the GM) until it receives a message with Nr included properly in\n   the\
    \ HASH payload.  This requirement ensures that replays of GDOI\n   messages will\
    \ not cause the GCKS to change the state of the group\n   until it has confirmation\
    \ that the initiating group member is live.\n           Group Member         \
    \             GCKS\n           ------------                      ----\n      \
    \ (1) HDR*, HASH(1), Ni, ID     -->\n       (2)                           <--\
    \     HDR*, HASH(2), Nr, SA\n       (3) HDR*, HASH(3) [,GAP]      -->\n      \
    \ (4)                           <--     HDR*, HASH(4), [SEQ,] KD\n           *\
    \ Protected by the Phase 1 SA; encryption occurs after HDR\n                 \
    \    Figure 2. GROUPKEY-PULL Exchange\n   Figure 2 demonstrates the four messages\
    \ that are part of a GROUPKEY-\n   PULL exchange.  HDR is an ISAKMP header payload\
    \ that uses the Phase 1\n   cookies and a message identifier (M-ID) as in ISAKMP.\
    \  Following each\n   HDR is a set of payloads conveying requests (messages 1\
    \ and 3\n   originated by the group member), or group policy and/or keying\n \
    \  material (messages 2 and 4 originated by the GCKS).\n   Hashes are computed\
    \ in the manner described within [RFC2409].  The\n   HASH computation for each\
    \ message is unique; it is shown in Figure 2\n   and below as HASH(n) where (n)\
    \ represents the GROUPKEY-PULL message\n   number.  Each HASH calculation is a\
    \ pseudo-random function (\"prf\")\n   over the message ID (M-ID) from the ISAKMP\
    \ header concatenated with\n   the entire message that follows the hash including\
    \ all payload\n   headers, but excluding any padding added for encryption.  The\
    \ GM\n   expects to find its nonce, Ni, in the HASH of a returned message, and\n\
    \   the GCKS expects to see its nonce, Nr, in the HASH of a returned\n   message.\
    \  HASH(2), HASH(3), and HASH(4) also include nonce values\n   previously passed\
    \ in the protocol (i.e., Ni or Nr minus the payload\n   header).  The nonce passed\
    \ in Ni is represented as Ni_b, and the\n   nonce passed in Nr is represented\
    \ as Nr_b.  The HASH payloads prove\n   that the peer has the Phase 1 secret (SKEYID_a)\
    \ and the nonce for the\n   exchange identified by message ID, M-ID.\n       \
    \ HASH(1) = prf(SKEYID_a, M-ID | Ni | ID)\n        HASH(2) = prf(SKEYID_a, M-ID\
    \ | Ni_b | Nr | SA)\n        HASH(3) = prf(SKEYID_a, M-ID | Ni_b | Nr_b [ | GAP\
    \ ])\n        HASH(4) = prf(SKEYID_a, M-ID | Ni_b | Nr_b [ | SEQ ] | KD)\n   In\
    \ addition to the Nonce and HASH payloads, the GM identifies the\n   group it\
    \ wishes to join through the ISAKMP ID payload.\n   The GCKS informs the member\
    \ of the cryptographic policies of the\n   group in the SA payload, which describes\
    \ the DOI, KEK, and/or TEK\n   keying material, authentication transforms, and\
    \ other group policy.\n   Each SPI is also determined by the GCKS and downloaded\
    \ in the SA\n   payload chain (see Section 5.2).  The SA KEK attribute contains\
    \ the\n   ISAKMP cookie pair for the Rekey SA, which is not negotiated but\n \
    \  downloaded.  Each SA TEK attribute contains a SPI as defined in\n   Section\
    \ 5.5 of this document.\n   After receiving and parsing the SA payload, the GM\
    \ responds with an\n   acknowledgement message proving its liveness.  It optionally\
    \ includes\n   a GAP payload requesting resources.\n   The GCKS informs the GM\
    \ of the value of the sequence number in the\n   SEQ payload.  This sequence number\
    \ provides anti-replay state\n   associated with a KEK, and its knowledge ensures\
    \ that the GM will not\n   accept GROUPKEY-PUSH messages sent prior to the GM\
    \ joining the group.\n   The SEQ payload has no other use and is omitted from\
    \ the GROUPKEY-\n   PULL exchange when a KEK attribute is not included in the\
    \ SA payload.\n   When a SEQ payload is included in the GROUPKEY-PULL exchange,\
    \ it\n   includes the most recently used sequence number for the group.  At\n\
    \   the conclusion of a GROUPKEY-PULL exchange, the initiating group\n   member\
    \ MUST NOT accept any rekey message with both the KEK attribute\n   SPI value\
    \ and a sequence number less than or equal to the one\n   received during the\
    \ GROUPKEY-PULL exchange.  When the first group\n   member initiates a GROUPKEY-PULL\
    \ exchange, the GCKS provides a\n   Sequence Number of zero, since no GROUPKEY-PUSH\
    \ messages have yet\n   been sent.  Note the sequence number increments only with\
    \ GROUPKEY-\n   PUSH messages.  The GROUPKEY-PULL exchange distributes the current\n\
    \   sequence number to the group member.  The sequence number resets to a\n  \
    \ value of one with the usage of a new KEK attribute.  Thus, the first\n   packet\
    \ sent for a given Rekey SA will have a Sequence Number of 1.\n   The sequence\
    \ number increments with each successive rekey.\n   The GCKS always returns a\
    \ KD payload containing keying material to\n   the GM.  If a Rekey SA is defined\
    \ in the SA payload, then KD will\n   contain the KEK; if one or more Data-Security\
    \ SAs are defined in the\n   SA payload, KD will contain the TEKs.\n"
- title: 3.2.1.  ISAKMP Header Initialization
  contents:
  - "3.2.1.  ISAKMP Header Initialization\n   Cookies are used in the ISAKMP header\
    \ to identify a particular GDOI\n   session.  The GDOI GROUPKEY-PULL exchange\
    \ uses cookies according to\n   ISAKMP [RFC2408].\n   Next Payload identifies\
    \ an ISAKMP or GDOI payload (see Section 5).\n   Major Version is 1 and Minor\
    \ Version is 0 according to ISAKMP\n   (Section 3.1 of [RFC2408]).\n   The Exchange\
    \ Type has value 32 for the GDOI GROUPKEY-PULL exchange.\n   Flags, Message ID,\
    \ and Length are according to ISAKMP (Section 3.1 of\n   [RFC2408]).  The Commit\
    \ flag is not useful because there is no\n   synchronization between the GROUPKEY-PULL\
    \ exchange and the data\n   traffic protected by the policy distributed by the\
    \ GROUPKEY-PULL\n   exchange.\n"
- title: 3.3.  Group Member Operations
  contents:
  - "3.3.  Group Member Operations\n   Before a GM contacts the GCKS, it needs to\
    \ determine the group\n   identifier and acceptable Phase 1 policy via an out-of-band\
    \ method.\n   Phase 1 is initiated using the GDOI DOI in the SA payload.  Once\n\
    \   Phase 1 is complete, the GM state machine moves to the GDOI protocol.\n  \
    \ To construct the first GDOI message, the GM chooses Ni, creates a\n   nonce\
    \ payload, builds an identity payload including the group\n   identifier, and\
    \ generates HASH(1).\n   Upon receipt of the second GDOI message, the GM validates\
    \ HASH(2),\n   extracts the nonce Nr, and interprets the SA payload (including\
    \ its\n   SA Attribute payloads) .  The SA payload contains policy describing\n\
    \   the security protocol and cryptographic protocols used by the group.\n   This\
    \ policy describes the Rekey SA (if present), Data-Security SAs,\n   and other\
    \ group policy.  If the policy in the SA payload is\n   acceptable to the GM,\
    \ it continues the protocol.  Otherwise, the GM\n   SHOULD tear down the Phase\
    \ 1 session after notifying the GCKS with an\n   ISAKMP Informational Exchange\
    \ containing a Delete payload.\n   When constructing the third GDOI message, it\
    \ first reviews each Data-\n   Security SA given to it.  If any describe the use\
    \ of a counter mode\n   cipher, the GM determines whether it requires more than\
    \ one Sender-ID\n   (SID) (see Section 3.5).  If so, it requests the required\
    \ number of\n   Sender-IDs for its exclusive use within the counter mode nonce\
    \ as\n   described in Section 5.4 of this document.  The GM then completes\n \
    \  construction of the third GDOI message by creating HASH(3).\n   Upon receipt\
    \ of the fourth GDOI message, the GM validates HASH(4).\n   If the SEQ payload\
    \ is present, the sequence number included in the\n   SEQ payload asserts the\
    \ lowest acceptable sequence number present in\n   a future GROUPKEY-PUSH message.\
    \  But if the KEK associated with this\n   sequence number had been previously\
    \ installed, due to the\n   asynchronous processing of GROUPKEY-PULL and GROUPKEY-PUSH\
    \ messages,\n   this sequence number may be lower than the sequence number contained\n\
    \   in the most recently received GROUPKEY-PUSH message.  In this case,\n   the\
    \ sequence number value in the SEQ payload MUST be considered stale\n   and ignored.\n\
    \   The GM interprets the KD key packets, where each key packet includes\n   the\
    \ keying material for SAs distributed in the SA payload.  Keying\n   material\
    \ is matched by comparing the SPI in each key packet to SPI\n   values previously\
    \ sent in the SA payloads.  Once TEKs and policy are\n   matched, the GM provides\
    \ them to the data security subsystem, and it\n   is ready to send or receive\
    \ packets matching the TEK policy.  If this\n   group has a KEK, the KEK policy\
    \ and keys are marked as ready for use,\n   and the GM knows to expect a sequence\
    \ number not less than the one\n   distributed in the SEQ payload.  The GM is\
    \ now ready to receive\n   GROUPKEY-PUSH messages.\n   If the KD payload included\
    \ an LKH array of keys, the GM takes the\n   last key in the array as the group\
    \ KEK.  The array is then stored\n   without further processing.\n"
- title: 3.4.  GCKS Operations
  contents:
  - "3.4.  GCKS Operations\n   The GCKS passively listens for incoming requests from\
    \ group members.\n   The Phase 1 authenticates the group member and sets up the\
    \ secure\n   session with them.\n   Upon receipt of the first GDOI message, the\
    \ GCKS validates HASH(1)\n   and extracts the Ni and group identifier in the ID\
    \ payload.  It\n   verifies that its database contains the group information for\
    \ the\n   group identifier and that the GM is authorized to participate in the\n\
    \   group.\n   The GCKS constructs the second GDOI message, including a nonce\
    \ Nr,\n   and the policy for the group in an SA payload, followed by SA\n   Attribute\
    \ payloads (i.e, SA KEK, GAP, and/or SA TEK payloads)\n   according to the GCKS\
    \ policy.  (See Section 5.2.1 for details on how\n   the GCKS chooses which payloads\
    \ to send.)\n   Upon receipt of the third GDOI message, the GCKS validates HASH(3).\n\
    \   If the message includes a GAP payload, it caches the requests\n   included\
    \ in that payload for the use of constructing the fourth GDOI\n   message.\n \
    \  The GCKS constructs the fourth GDOI message, including the SEQ\n   payload\
    \ (if the GCKS sends rekey messages), and the KD payload\n   containing keys corresponding\
    \ to policy previously sent in the SA TEK\n   and SA KEK payloads.  If a group\
    \ management algorithm is defined as\n   part of group policy, the GCKS will first\
    \ insert the group member\n   into the group management structure (e.g., a leaf\
    \ in the LKH tree),\n   and then create an LKH array of keys and include it in\
    \ the KD\n   payload.  The first key in the array is associated with the group\n\
    \   member leaf node, followed by each LKH node above it in the tree,\n   culminating\
    \ with the root node (which is also the KEK).  If one or\n   more Data-Security\
    \ SAs distributed in the SA payload included a\n   counter mode of operation,\
    \ the GCKS includes at least one SID value\n   in the KD payload, and possibly\
    \ more depending on a request received\n   in the third GDOI message.\n"
- title: 3.5.  Counter-Modes of Operation
  contents:
  - "3.5.  Counter-Modes of Operation\n   Several new counter-based modes of operation\
    \ have been specified for\n   ESP (e.g., AES-CTR [RFC3686], AES-GCM [RFC4106],\
    \ AES-CCM [RFC4309],\n   AES-GMAC [RFC4543]) and AH (e.g., AES-GMAC [RFC4543]).\
    \  These\n   counter-based modes require that no two senders in the group ever\n\
    \   send a packet with the same Initialization Vector (IV) using the same\n  \
    \ cipher key and mode.  This requirement is met in GDOI when the\n   following\
    \ requirements are met:\n   o  The GCKS distributes a unique key for each Data-Security\
    \ SA.\n   o  The GCKS uses the method described in [RFC6054], which assigns\n\
    \      each sender a portion of the IV space by provisioning each sender\n   \
    \   with one or more unique SID values.\n   When at least one Data-Security SA\
    \ included in the group policy\n   includes a counter-mode, the GCKS automatically\
    \ allocates and\n   distributes one SID to each group member acting in the role\
    \ of sender\n   on the Data-Security SA.  The SID value is used exclusively by\
    \ the\n   group member to which it was allocated.  The group member uses the\n\
    \   same SID for each Data-Security SA specifying the use of a counter-\n   based\
    \ mode of operation.  A GCKS MUST distribute unique keys for each\n   Data-Security\
    \ SA including a counter-based mode of operation in order\n   to maintain a unique\
    \ key and nonce usage.\n   When a group member receives a Data-Security SA in\
    \ a SA TEK payload\n   for which it is a sender, it can choose to request one\
    \ or more SID\n   values.  Requesting a value of 1 is not necessary since the\
    \ GCKS will\n   automatically allocate exactly one to the sending group member.\
    \  A\n   group member MUST request as many SIDs matching the number of\n   encryption\
    \ modules in which it will be installing the TEKs in the\n   outbound direction.\
    \  Alternatively, a group member MAY request more\n   than one SID and use them\
    \ serially.  This could be useful when it is\n   anticipated that the group member\
    \ will exhaust their range of Data-\n   Security SA nonces using a single SID\
    \ too quickly (e.g., before the\n   time-based policy in the TEK expires).\n \
    \  When group policy includes a counter-based mode of operation, a GCKS\n   SHOULD\
    \ use the following method to allocate SID values, which ensures\n   that each\
    \ SID will be allocated to just one group member.\n   1.  A GCKS maintains a SID-counter,\
    \ which records which SIDs have\n       been allocated.  SIDs are allocated sequentially,\
    \ with the first\n       SID allocated to be zero.\n   2.  Each time a SID is\
    \ allocated, the current value of the counter is\n       saved and allocated to\
    \ the group member.  The SID-counter is then\n       incremented in preparation\
    \ for the next allocation.\n   3.  When the GCKS distributes a Data-Security SA\
    \ specifying a\n       counter-based mode of operation, and a group member is\
    \ a sender,\n       a group member may request a count of SIDs in a GAP payload.\n\
    \       When the GCKS receives this request, it increments the SID-\n       counter\
    \ once for each requested SID, and distributes each SID\n       value to the group\
    \ member.\n   4.  A GCKS allocates new SID values for each GROUPKEY-PULL exchange\n\
    \       originated by a sender, regardless of whether a group member had\n   \
    \    previously contacted the GCKS.  In this way, the GCKS does not\n       have\
    \ a requirement of maintaining a record of which SID values it\n       had previously\
    \ allocated to each group member.  More importantly,\n       since the GCKS cannot\
    \ reliably detect whether the group member\n       had sent data on the current\
    \ group Data-Security SAs, it does not\n       know which Data-Security counter-mode\
    \ nonce values a group member\n       has used.  By distributing new SID values,\
    \ the key server ensures\n       that each time a conforming group member installs\
    \ a Data-Security\n       SA it will use a unique set of counter-based mode nonces.\n\
    \   5.  When the SID-counter maintained by the GCKS reaches its final SID\n  \
    \     value, no more SID values can be distributed.  Before\n       distributing\
    \ any new SID values, the GCKS MUST delete the Data-\n       Security SAs for\
    \ the group, followed by creation of new Data-\n       Security SAs, and resetting\
    \ the SID-counter to its initial value.\n   6.  The GCKS SHOULD send a GROUPKEY-PUSH\
    \ message deleting all Data-\n       Security SAs and the Rekey SA for the group.\
    \  This will result in\n       the group members initiating a new GROUPKEY-PULL\
    \ exchange, in\n       which they will receive both new SID values and new Data-Security\n\
    \       SAs.  The new SID values can safely be used because they are only\n  \
    \     used with the new Data-Security SAs.  Note that deletion of the\n      \
    \ Rekey SA is necessary to ensure that group members receiving a\n       GROUPKEY-PUSH\
    \ exchange before the re-register do not\n       inadvertently use their old SIDs\
    \ with the new Data-Security SAs.\n   Using the method above, at no time can two\
    \ group members use the same\n   IV values with the same Data-Security SA key.\n"
- title: 4.  GROUPKEY-PUSH Message
  contents:
  - "4.  GROUPKEY-PUSH Message\n   GDOI sends control information securely using group\
    \ communications.\n   Typically, this will be using IP multicast distribution\
    \ of a\n   GROUPKEY-PUSH message, but it can also be \"pushed\" using unicast\n\
    \   delivery if IP multicast is not possible.  The GROUPKEY-PUSH message\n   replaces\
    \ a Rekey SA KEK or KEK array, and/or it creates a new Data-\n   Security SA.\n\
    \        GM                    GCKS\n        --                    ----\n    \
    \                          <---- HDR*, SEQ, [D,] SA, KD, SIG\n        * Protected\
    \ by the Rekey SA KEK; encryption occurs after HDR\n                      Figure\
    \ 3. GROUPKEY-PUSH Message\n   HDR is defined below.  The SEQ payload is defined\
    \ in Section 5\n   (\"Payloads\").  One or more D (Delete) payloads (further described\
    \ in\n   Section 5.9) optionally specify the deletion of existing group\n   policy.\
    \  The SA defines the group policy for replacement Rekey SA\n   and/or Data-Security\
    \ SAs as described in Section 5, with the KD\n   providing keying material for\
    \ those SAs.\n   The SIG payload includes a signature of a hash of the entire\n\
    \   GROUPKEY-PUSH message (excepting the SIG payload octets) before it\n   has\
    \ been encrypted.  The HASH is taken over the string 'rekey', the\n   GROUPKEY-PUSH\
    \ HDR, followed by all payloads preceding the SIG\n   payload.  The prefixed string\
    \ ensures that the signature of the Rekey\n   datagram cannot be used for any\
    \ other purpose in the GDOI protocol.\n   The SIG payload is created using the\
    \ signature of the above hash,\n   with the receiver verifying the signature using\
    \ a public key\n   retrieved in a previous GDOI exchange.  The current KEK (also\n\
    \   previously distributed in a GROUPKEY-PULL exchange or GROUPKEY-PUSH\n   message)\
    \ encrypts all the payloads following the GROUPKEY-PUSH HDR.\n   Note: The rationale\
    \ for this order of operations is given in\n   Section 7.3.5.\n   If the SA defines\
    \ the use of a single KEK or an LKH KEK array, KD\n   MUST contain a corresponding\
    \ KEK or KEK array for a new Rekey SA,\n   which has a new cookie pair.  When\
    \ the KD payload carries a new SA\n   KEK attribute (Section 5.3), a Rekey SA\
    \ is replaced with a new SA\n   having the same group identifier (ID specified\
    \ in message 1 of\n   Section 3.2) and incrementing the same sequence counter,\
    \ which is\n   initialized in message 4 of Section 3.2.  Note the first packet\
    \ for\n   the given Rekey SA encrypted with the new KEK attribute will have a\n\
    \   Sequence number of 1.  If the SA defines an SA TEK payload, this\n   informs\
    \ the member that a new Data-Security SA has been created, with\n   keying material\
    \ carried in KD (Section 5.6).\n   If the SA defines a large LKH KEK array (e.g.,\
    \ during group\n   initialization and batched rekeying), parts of the array MAY\
    \ be sent\n   in different unique GROUPKEY-PUSH datagrams.  However, each of the\n\
    \   GROUPKEY-PUSH datagrams MUST be a fully formed GROUPKEY-PUSH\n   datagram.\
    \  This results in each datagram containing a sequence number\n   and the policy\
    \ in the SA payload, which corresponds to the KEK array\n   portion sent in the\
    \ KD payload.\n"
- title: 4.1.  Use of Signature Keys
  contents:
  - "4.1.  Use of Signature Keys\n   A signing key should not be used in more than\
    \ one context (e.g., used\n   for host authentication and also for message authentication).\
    \  Thus,\n   the GCKS SHOULD NOT use the same key to sign the SIG payload in the\n\
    \   GROUPKEY-PUSH message as was used for authentication in the GROUPKEY-\n  \
    \ PULL exchange.\n"
- title: 4.2.  ISAKMP Header Initialization
  contents:
  - "4.2.  ISAKMP Header Initialization\n   Unlike ISAKMP, the cookie pair is completely\
    \ determined by the GCKS.\n   The cookie pair in the GDOI ISAKMP header identifies\
    \ the Rekey SA to\n   differentiate the secure groups managed by a GCKS.  Thus,\
    \ GDOI uses\n   the cookie fields as an SPI.\n   Next Payload identifies an ISAKMP\
    \ or GDOI payload (see Section 5).\n   Major Version is 1 and Minor Version is\
    \ 0 according to ISAKMP\n   (Section 3.1 of [RFC2408]).\n   The Exchange Type\
    \ has value 33 for the GDOI GROUPKEY-PUSH message.\n   Flags MUST have the Encryption\
    \ bit set according to Section 3.1 of\n   [RFC2408].  All other bits MUST be set\
    \ to zero.\n   Message ID MUST be set to zero.\n   Length is according to ISAKMP\
    \ (Section 3.1 of [RFC2408]).\n"
- title: 4.3.  GCKS Operations
  contents:
  - "4.3.  GCKS Operations\n   GCKS may initiate a Rekey message for one of several\
    \ reasons, e.g.,\n   the group membership has changed or keys are due to expire.\n\
    \   To begin the rekey datagram, the GCKS builds an ISAKMP HDR with the\n   correct\
    \ cookie pair, and a SEQ payload that includes a sequence\n   number that is 1\
    \ greater than the previous rekey datagram.  If the\n   message is using the new\
    \ KEK attribute for the first time, the SEQ is\n   reset to 1 in this message.\n\
    \   An SA payload is then added.  This is identical in structure and\n   meaning\
    \ to an SA payload sent in a GROUPKEY-PULL exchange.  If there\n   are changes\
    \ to the KEK (including due to group members being\n   excluded, in the case of\
    \ LKH), an SA_KEK attribute is added to the\n   SA.  If there are one or more\
    \ new TEKs, then SA_TEK attributes are\n   added to describe that policy.\n  \
    \ A KD payload is then added.  This is identical in structure and\n   meaning\
    \ to a KD payload sent in a GROUPKEY-PULL exchange.  If an\n   SA_KEK attribute\
    \ was included in the SA payload, then corresponding\n   KEKs (or a KEK update\
    \ array) are included.  A KEK update array is\n   created by first determining\
    \ which group members have been excluded,\n   generating new keys as necessary,\
    \ and then distributing LKH update\n   arrays sufficient to provide the new KEK\
    \ to remaining group members\n   (see Section 5.4.1 of [RFC2627] for details).\
    \  TEKs are also sent for\n   each SA_TEK attribute included in the SA payload.\n\
    \   In the penultimate step, the GCKS creates the SIG payload and adds it\n  \
    \ to the datagram.\n   Lastly, the payloads following the HDR are encrypted using\
    \ the\n   current KEK.  The datagram can now be sent.\n"
- title: 4.4.  Group Member Operations
  contents:
  - "4.4.  Group Member Operations\n   A group member receiving the GROUPKEY-PUSH\
    \ datagram matches the\n   cookie pair in the ISAKMP HDR to an existing SA.  The\
    \ message is\n   decrypted, and the form of the datagram is validated.  This weeds\
    \ out\n   obvious ill-formed messages (which may be sent as part of a denial-\n\
    \   of-service attack on the group).\n   The sequence number in the SEQ payload\
    \ is validated to ensure that it\n   is greater than the previously received sequence\
    \ number.  The SIG\n   payload is then validated.  If the signature fails, the\
    \ message is\n   discarded.\n   The SA and KD payloads are processed, which results\
    \ in a new GDOI\n   Rekey SA (if the SA payload included an SA_KEK attribute)\
    \ and/or new\n   Data-Security SAs being added to the system.  If the KD payload\n\
    \   includes an LKH update array, the group member compares the LKH ID in\n  \
    \ each key update packet to the LKH IDs that it holds.  If it finds a\n   match,\
    \ it decrypts the key using the key prior to it in the key array\n   and stores\
    \ the new key in the LKH key array that it holds.  The final\n   decryption yields\
    \ the new group KEK.\n   If the SA payload includes one or more Data-Security\
    \ SAs including a\n   counter-mode of operation and if the receiving group member\
    \ is a\n   sender for that SA, the group member uses its current SID value with\n\
    \   the Data-Security SAs to create counter-mode nonces.  If it is a\n   sender\
    \ and does not hold a current SID value, it MUST NOT install the\n   Data-Security\
    \ SAs.  It MAY initiate a GROUPKEY-PULL exchange to the\n   GCKS in order to obtain\
    \ a SID value (along with current group\n   policy).\n"
- title: 5.  Payloads and Defined Values
  contents:
  - "5.  Payloads and Defined Values\n   This document specifies use of several ISAKMP\
    \ payloads, which are\n   defined in accordance with [RFC2408].  The following\
    \ payloads are\n   used as defined in [RFC2408].\n                  Next Payload\
    \ Type            Value\n                  -----------------            -----\n\
    \                  Hash Payload (HASH)            8\n                  Signature\
    \ (SIG)                9\n   The following payloads are extended or further specified.\n\
    \                  Next Payload Type            Value\n                  -----------------\
    \            -----\n                  Security Association (SA)      1\n     \
    \             Identification (ID)            5\n                  Nonce (N)  \
    \                   10\n                  Delete (D)                    12\n \
    \  Several payload formats specific to the group security exchanges are\n   required.\n\
    \                  Next Payload Type                Value\n                  -----------------\
    \                -----\n                  SA KEK (SAK)                      15\n\
    \                  SA TEK (SAT)                      16\n                  Key\
    \ Download (KD)                 17\n                  Sequence Number (SEQ)  \
    \           18\n                  Group Associated Policy (GAP)     22\n   All\
    \ multi-octet fields in GDOI payloads representing integers are\n   laid out in\
    \ big endian order (also known as \"most significant byte\n   first\" or \"network\
    \ byte order\").\n   All payloads including an ISAKMP Generic Payload Header create\
    \ a\n   Payload Length field that includes the length of the generic payload\n\
    \   header (Section 3.2 of [RFC2408]).\n"
- title: 5.1.  Identification Payload
  contents:
  - "5.1.  Identification Payload\n   The Identification payload is defined in [RFC2408].\
    \  For the GDOI, it\n   is used to identify a group identity that will later be\
    \ associated\n   with security associations for the group.  A group identity may\
    \ map\n   to a specific IPv4 or IPv6 multicast address, or may specify a more\n\
    \   general identifier, such as one that represents a set of related\n   multicast\
    \ streams.\n   When used with the GDOI, the DOI-Specific ID Data field MUST be\
    \ set\n   to 0.\n   When used with the GDOI, the ID_KEY_ID ID Type MUST be supported\
    \ by a\n   conforming implementation and MUST specify a 4-octet group identifier\n\
    \   as its value.  Implementations MAY also support other ID Types.\n"
- title: 5.2.  Security Association Payload
  contents:
  - "5.2.  Security Association Payload\n   The Security Association payload is defined\
    \ in [RFC2408].  For the\n   GDOI, it is used by the GCKS to assert security attributes\
    \ for both\n   Rekey and Data-Security SAs.\n       0                   1    \
    \               2                   3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5\
    \ 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-!\n\
    \      ! Next Payload  !   RESERVED    !         Payload Length        !\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      !\
    \                              DOI                              !\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-!\n\
    \      !                           Situation                           !\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-!\n      !\
    \ SA Attribute Next Payload     !          RESERVED2            !\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-!\n\
    \                  Figure 4. Security Association Payload\n   The Security Association\
    \ payload fields are defined as follows:\n   o  Next Payload (1 octet) -- Identifies\
    \ the next payload for the\n      GROUPKEY-PULL or the GROUPKEY-PUSH message as\
    \ defined above.  The\n      next payload MUST NOT be an SA Attribute payload;\
    \ it MUST be the\n      next payload following the Security Association type payload.\n\
    \   o  RESERVED (1 octet) -- MUST be zero.\n   o  Payload Length (2 octets) --\
    \ Is the octet length of the current\n      payload including the generic header\
    \ and all TEK and KEK payloads.\n   o  DOI (4 octets) -- Is the GDOI, which is\
    \ value 2.\n   o  Situation (4 octets) -- MUST be zero.\n   o  SA Attribute Next\
    \ Payload (2 octets) -- MUST be the code for an SA\n      Attribute payload type.\
    \  See Section 5.2.1 for a description of\n      which circumstances are required\
    \ for each payload type to be\n      present.\n   o  RESERVED (2 octets) -- MUST\
    \ be zero.\n"
- title: 5.2.1.  SA Attribute Payloads
  contents:
  - "5.2.1.  SA Attribute Payloads\n   Payloads that define specific security association\
    \ attributes for the\n   KEK and/or TEKs used by the group MUST follow the SA\
    \ payload.  How\n   many of each payload is dependent upon the group policy. \
    \ There may\n   be zero or one SAK payload, zero or one GAP payload, and zero\
    \ or more\n   SAT payloads, where either one SAK or SAT payload MUST be present.\n\
    \   When present, the order of the SA Attribute payloads MUST be: SAK,\n   GAP,\
    \ and SATs.\n   This latitude regarding SA Attribute payloads allows various group\n\
    \   policies to be accommodated.  For example, if the group policy does\n   not\
    \ require the use of a Rekey SA, the GCKS would not need to send an\n   SA KEK\
    \ attribute to the group member since all SA updates would be\n   performed using\
    \ the Registration SA.  Alternatively, group policy\n   might use a Rekey SA but\
    \ choose to download a KEK to the group member\n   only as part of the Registration\
    \ SA.  Therefore, the KEK policy (in\n   the SA KEK attribute) would not be necessary\
    \ as part of the Rekey SA\n   message SA payload.\n   Specifying multiple SATs\
    \ allows multiple sessions to be part of the\n   same group and multiple streams\
    \ to be associated with a session\n   (e.g., video, audio, and text) but each\
    \ with individual security\n   association policy.\n   A GAP payload allows for\
    \ the distribution of group-wide policy, such\n   as instructions as to when to\
    \ activate and deactivate SAs.\n"
- title: 5.3.  SA KEK Payload
  contents:
  - "5.3.  SA KEK Payload\n   The SA KEK (SAK) payload contains security attributes\
    \ for the KEK\n   method for a group and parameters specific to the GROUPKEY-PULL\n\
    \   operation.  The source and destination identities describe the\n   identities\
    \ used for the GROUPKEY-PULL datagram.\n       0                   1         \
    \          2                   3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8\
    \ 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-!\n\
    \      ! Next Payload  !   RESERVED    !         Payload Length        !\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-!\n      !\
    \    Protocol   !  SRC ID Type  !         SRC ID Port           !\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-!\n\
    \      !SRC ID Data Len!          SRC Identification Data              ~\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-!\n      !\
    \ DST ID Type   !         DST ID Port           !DST ID Data Len!\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-!\n\
    \      !                    DST Identification Data                    ~\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-!\n      !\
    \                                                               !\n      ~   \
    \                           SPI                              ~\n      !      \
    \                                                         !\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-!\n\
    \      !                           RESERVED2                           !\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-!\n      ~\
    \                        KEK Attributes                         ~\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-!\n\
    \                         Figure 5. SA KEK Payload\n   The SAK payload fields\
    \ are defined as follows:\n   o  Next Payload (1 octet) -- Identifies the next\
    \ payload for the\n      GROUPKEY-PULL or the GROUPKEY-PUSH message.  The only\
    \ valid next\n      payload types for this message are a GAP payload, SAT payload,\
    \ or\n      zero to indicate that no SA Attribute payloads follow.\n   o  RESERVED\
    \ (1 octet) -- MUST be zero.\n   o  Payload Length (2 octets) -- Length of this\
    \ payload, including the\n      KEK attributes.\n   o  Protocol (1 octet) -- Value\
    \ describing an IP protocol ID (e.g.,\n      UDP/TCP) [PROT-REG] for the GROUPKEY-PUSH\
    \ datagram.\n   o  SRC ID Type (1 octet) -- Value describing the identity information\n\
    \      found in the SRC Identification Data field.  Defined values are\n     \
    \ specified by the IPsec Identification Type section in the IANA\n      ISAKMP\
    \ registry [ISAKMP-REG].\n   o  SRC ID Port (2 octets) -- Value specifying a port\
    \ associated with\n      the source ID.  A value of zero means that the SRC ID\
    \ Port field\n      MUST be ignored.\n   o  SRC ID Data Len (1 octet) -- Value\
    \ specifying the length (in\n      octets) of the SRC Identification Data field.\n\
    \   o  SRC Identification Data (variable length) -- Value, as indicated\n    \
    \  by the SRC ID Type.\n   o  DST ID Type (1 octet) -- Value describing the identity\
    \ information\n      found in the DST Identification Data field.  Defined values\
    \ are\n      specified by the IPsec Identification Type section in the IANA\n\
    \      ISAKMP registry [ISAKMP-REG].\n   o  DST ID Prot (1 octet) -- Value describing\
    \ an IP protocol ID (e.g.,\n      UDP/TCP) [PROT-REG].\n   o  DST ID Port (2 octets)\
    \ -- Value specifying a port associated with\n      the source ID.\n   o  DST\
    \ ID Data Len (1 octet) -- Value specifying the length (in\n      octets) of the\
    \ DST Identification Data field.\n   o  DST Identification Data (variable length)\
    \ -- Value, as indicated\n      by the DST ID Type.\n   o  SPI (16 octets) --\
    \ Security Parameter Index for the KEK.  The SPI\n      is the ISAKMP Header cookie\
    \ pair where the first 8 octets become\n      the \"Initiator Cookie\" field of\
    \ the GROUPKEY-PUSH message ISAKMP\n      HDR, and the second 8 octets become\
    \ the \"Responder Cookie\" in the\n      same HDR.  As described above, these\
    \ cookies are assigned by the\n      GCKS.\n   o  RESERVED2 (4 octets) -- MUST\
    \ be zero.  These octets represent\n      fields previously defined but no longer\
    \ used by GDOI.\n   o  KEK Attributes -- Contains KEK policy attributes associated\
    \ with\n      the group.  The following attributes may be present in a SAK\n \
    \     payload.  The attributes must follow the format defined in ISAKMP\n    \
    \  (Section 3.3 of [RFC2408]).  In the table, attributes that are\n      defined\
    \ as TV are marked as Basic (B); attributes that are defined\n      as TLV are\
    \ marked as Variable (V).\n                ID Class                   Value  \
    \  Type\n                --------                   -----    ----\n          \
    \      RESERVED                     0\n                KEK_MANAGEMENT_ALGORITHM\
    \     1        B\n                KEK_ALGORITHM                2        B\n  \
    \              KEK_KEY_LENGTH               3        B\n                KEK_KEY_LIFETIME\
    \             4        V\n                SIG_HASH_ALGORITHM           5     \
    \   B\n                SIG_ALGORITHM                6        B\n             \
    \   SIG_KEY_LENGTH               7        B\n                RESERVED        \
    \             8        B\n                Unassigned                  9-127\n\
    \                Private Use               128-255\n                Unassigned\
    \                256-32767\n   The KEK_ALGORITHM and SIG_ALGORITHM attributes\
    \ MUST be included;\n   others are OPTIONAL and are included depending on group\
    \ policy.  The\n   KEK_MANAGEMENT_ALGORITHM attribute MUST NOT be included in\
    \ a\n   GROUPKEY-PULL message, and MUST be ignored if present.\n"
- title: 5.3.1.  KEK_MANAGEMENT_ALGORITHM
  contents:
  - "5.3.1.  KEK_MANAGEMENT_ALGORITHM\n   The KEK_MANAGEMENT_ALGORITHM class specifies\
    \ the group KEK management\n   algorithm used to provide forward or backward access\
    \ control (i.e.,\n   used to exclude group members).  Defined values are specified\
    \ in the\n   following table.\n                  KEK Management Type         \
    \      Value\n                  -------------------               -----\n    \
    \              Reserved                            0\n                  LKH  \
    \                               1\n                  Unassigned              \
    \           2-127\n                  Private Use                      128-255\n\
    \                  Unassigned                       256-65535\n"
- title: 5.3.1.1.  LKH
  contents:
  - "5.3.1.1.  LKH\n   This type indicates the group management method described in\
    \ Section\n   5.4 of [RFC2627].  A general discussion of LKH operations can also\
    \ be\n   found in Section 6.3 of \"Multicast and Group Security\" [HD03]\n"
- title: 5.3.2.  KEK_ALGORITHM
  contents:
  - "5.3.2.  KEK_ALGORITHM\n   The KEK_ALGORITHM class specifies the encryption algorithm\
    \ in which\n   the KEK is used to provide confidentiality for the GROUPKEY-PUSH\n\
    \   message.  Defined values are specified in the following table.  A\n   GDOI\
    \ implementation MUST abort if it encounters an attribute or\n   capability that\
    \ it does not understand.\n                   Algorithm Type      Value\n    \
    \               --------------      -----\n                   RESERVED       \
    \        0\n                   KEK_ALG_DES            1\n                   KEK_ALG_3DES\
    \           2\n                   KEK_ALG_AES            3\n                 \
    \  Unassigned            4-127\n                   Private Use         128-255\n\
    \                   Unassigned          256-32767\n   If a KEK_MANAGEMENT_ALGORITHM\
    \ is defined that specifies multiple keys\n   (e.g., LKH), and if the management\
    \ algorithm does not specify the\n   algorithm for those keys, then the algorithm\
    \ defined by the\n   KEK_ALGORITHM attribute MUST be used for all keys that are\
    \ included\n   as part of the management.\n"
- title: 5.3.2.1.  KEK_ALG_DES
  contents:
  - "5.3.2.1.  KEK_ALG_DES\n   This type specifies DES using the Cipher Block Chaining\
    \ (CBC) mode as\n   described in [FIPS81].\n"
- title: 5.3.2.2.  KEK_ALG_3DES
  contents:
  - "5.3.2.2.  KEK_ALG_3DES\n   This type specifies 3DES using three independent keys\
    \ as described in\n   \"Keying Option 1\" in [FIPS46-3].\n"
- title: 5.3.2.3.  KEK_ALG_AES
  contents:
  - "5.3.2.3.  KEK_ALG_AES\n   This type specifies AES as described in [FIPS197].\
    \  The mode of\n   operation for AES is CBC as defined in [SP.800-38A].\n"
- title: 5.3.3.  KEK_KEY_LENGTH
  contents:
  - "5.3.3.  KEK_KEY_LENGTH\n   The KEK_KEY_LENGTH class specifies the KEK Algorithm\
    \ key length (in\n   bits).  The Group Controller/Key Server (GCKS) adds the\n\
    \   KEK_KEY_LENGTH attribute to the SA payload when distributing KEK\n   policy\
    \ to group members.  The group member verifies whether or not it\n   has the capability\
    \ of using a cipher key of that size.  If the cipher\n   definition includes a\
    \ fixed key length (e.g., KEK_ALG_3DES), the\n   group member can make its decision\
    \ solely using the KEK_ALGORITHM\n   attribute and does not need the KEK_KEY_LENGTH\
    \ attribute.  Sending\n   the KEK_KEY_LENGTH attribute in the SA payload is OPTIONAL\
    \ if the KEK\n   cipher has a fixed key length.  Also, note that the KEK_KEY_LEN\n\
    \   includes only the actual length of the cipher key (the IV length is\n   not\
    \ included in this attribute).\n"
- title: 5.3.4.  KEK_KEY_LIFETIME
  contents:
  - "5.3.4.  KEK_KEY_LIFETIME\n   The KEK_KEY_LIFETIME class specifies the maximum\
    \ time for which the\n   KEK is valid.  The GCKS may refresh the KEK at any time\
    \ before the\n   end of the valid period.  The value is a 4-octet number defining\
    \ a\n   valid time period in seconds.\n"
- title: 5.3.5.  SIG_HASH_ALGORITHM
  contents:
  - "5.3.5.  SIG_HASH_ALGORITHM\n   SIG_HASH_ALGORITHM specifies the SIG payload hash\
    \ algorithm.  The\n   following table defines the algorithms for SIG_HASH_ALGORITHM.\n\
    \                   Algorithm Type     Value\n                   --------------\
    \     -----\n                   Reserved             0\n                   SIG_HASH_MD5\
    \         1\n                   SIG_HASH_SHA1        2\n                   SIG_HASH_SHA256\
    \      3\n                   SIG_HASH_SHA384      4\n                   SIG_HASH_SHA512\
    \      5\n                   Unassigned          6-127\n                   Private\
    \ Use       128-255\n                   Unassigned        256-65535\n   The SHA\
    \ hash algorithms are defined in the Secure Hash Standard\n   [FIPS180-3.2008].\n\
    \   If the SIG_ALGORITHM is SIG_ALG_ECDSA-256, SIG_ALG_ECDSA-384, or\n   SIG_ALG_ECDSA-521,\
    \ the hash algorithm is implicit in the definition,\n   and SIG_HASH_ALGORITHM\
    \ is OPTIONAL in a SAK payload.\n"
- title: 5.3.6.  SIG_ALGORITHM
  contents:
  - "5.3.6.  SIG_ALGORITHM\n   The SIG_ALGORITHM class specifies the SIG payload signature\n\
    \   algorithm.  Defined values are specified in the following table.\n       \
    \            Algorithm Type      Value\n                   --------------    \
    \  -----\n                   Reserved              0\n                   SIG_ALG_RSA\
    \           1\n                   SIG_ALG_DSS           2\n                  \
    \ SIG_ALG_ECDSS         3\n                   SIG_ALG_ECDSA-256     4\n      \
    \             SIG_ALG_ECDSA-384     5\n                   SIG_ALG_ECDSA-521  \
    \   6\n                   Unassigned           7-127\n                   Private\
    \ Use        128-255\n                   Unassigned         256-65535\n"
- title: 5.3.6.1.  SIG_ALG_RSA
  contents:
  - "5.3.6.1.  SIG_ALG_RSA\n   This algorithm specifies the RSA digital signature\
    \ algorithm using\n   the EMSA-PKCS1-v1_5 encoding method, as described in [RFC3447].\n"
- title: 5.3.6.2.  SIG_ALG_DSS
  contents:
  - "5.3.6.2.  SIG_ALG_DSS\n   This algorithm specifies the DSS digital signature\
    \ algorithm as\n   described in Section 4 of [FIPS186-3].\n"
- title: 5.3.6.3.  SIG_ALG_ECDSS
  contents:
  - "5.3.6.3.  SIG_ALG_ECDSS\n   This algorithm specifies the Elliptic Curve Digital\
    \ Signature\n   Algorithm as described in Section 5 of [FIPS186-3].  This definition\n\
    \   is deprecated in favor of the SIG_ALG_ECDSA family of algorithms.\n"
- title: 5.3.6.4.  SIG_ALG_ECDSA-256
  contents:
  - "5.3.6.4.  SIG_ALG_ECDSA-256\n   This algorithm specifies the 256-bit Random ECP\
    \ Group, as described\n   in [RFC5903].  The format of the signature in the SIG\
    \ payload MUST be\n   as specified in [RFC4754].\n"
- title: 5.3.6.5.  SIG_ALG_ECDSA-384
  contents:
  - "5.3.6.5.  SIG_ALG_ECDSA-384\n   This algorithm specifies the 384-bit Random ECP\
    \ Group, as described\n   in [RFC5903].  The format of the signature in the SIG\
    \ payload MUST be\n   as specified in [RFC4754].\n"
- title: 5.3.6.6.  SIG_ALG_ECDSA-521
  contents:
  - "5.3.6.6.  SIG_ALG_ECDSA-521\n   This algorithm specifies the 521-bit Random ECP\
    \ Group, as described\n   in [RFC5903].  The format of the signature in the SIG\
    \ payload MUST be\n   as specified in [RFC4754].\n"
- title: 5.3.7.  SIG_KEY_LENGTH
  contents:
  - "5.3.7.  SIG_KEY_LENGTH\n   The SIG_KEY_LENGTH class specifies the length of the\
    \ SIG payload key\n   in bits.\n"
- title: 5.4.  Group Associated Policy
  contents:
  - "5.4.  Group Associated Policy\n   A GCKS may have group-specific policy that\
    \ is not distributed in an\n   SA TEK or SA KEK.  Some of this policy is relevant\
    \ to all group\n   members, and some is sender-specific policy for a particular\
    \ group\n   member.  The former can be distributed in either a GROUPKEY-PULL or\n\
    \   GROUPKEY-PUSH exchange, whereas the latter MUST only be sent in a\n   GROUPKEY-PULL\
    \ exchange.  Additionally, a group member sometimes has\n   the need to make policy\
    \ requests for resources of the GCKS in a\n   GROUPKEY-PULL exchange.  GDOI distributes\
    \ this associated group\n   policy and the policy requests in the Group Associated\
    \ Policy (GAP)\n   payload.\n   The GAP payload can be distributed by the GCKS\
    \ as part of the SA\n   payload.  It follows any SA KEK payload and is placed\
    \ before any SA\n   TEK payloads.  In the case that group policy does not include\
    \ an SA\n   KEK, the SA Attribute Next Payload field in the SA payload MAY\n \
    \  indicate the GAP payload.\n   The GAP payload can be optionally included by\
    \ a group member in\n   message 3 of the GROUPKEY-PULL exchange in order to make\
    \ policy\n   requests.\n   The GAP payload is defined as follows:\n        0 \
    \                  1                   2                   3\n        0 1 2 3\
    \ 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-!\n\
    \       ! Next Payload  !   RESERVED    !        Payload Length         !\n  \
    \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-!\n    \
    \   !               Group Associated Policy Attributes              ~\n      \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-!\n        \
    \                   Figure 6. GAP Payload\n   The GAP payload fields are defined\
    \ as follows:\n   o  Next Payload (1 octet) -- Identifies the next payload present\
    \ in\n      the GROUPKEY-PULL or the GROUPKEY-PUSH message.  The only valid\n\
    \      next payload type for this message is an SA TEK or zero to\n      indicate\
    \ there are no more security association attributes.\n   o  RESERVED (1 octet)\
    \ -- MUST be zero.\n   o  Payload Length (2 octets) -- Length of this payload,\
    \ including the\n      GAP header and Attributes.\n   o  Group Associated Policy\
    \ Attributes (variable) -- Contains\n      attributes following the format defined\
    \ in Section 3.3 of\n      [RFC2408].  In the table, attributes that are defined\
    \ as TV are\n      marked as Basic (B); attributes that are defined as TLV are\
    \ marked\n      as Variable (V).\n              Attribute Type         Value \
    \      Type\n              --------------         -----       ----\n         \
    \     RESERVED                 0\n              ACTIVATION_TIME_DELAY    1   \
    \       B\n              DEACTIVATION_TIME_DELAY  2          B\n             \
    \ SENDER_ID_REQUEST        3          B\n              Unassigned            \
    \  4-127\n              Private Use           128-255\n              Unassigned\
    \            256-32767\n   Several group associated policy attributes are defined\
    \ in this memo.\n   A GDOI implementation MUST abort if it encounters an attribute\
    \ or\n   capability that it does not understand.  The values for these\n   attributes\
    \ are included in the IANA Considerations section of this\n   memo.\n"
- title: 5.4.1.  ACTIVATION_TIME_DELAY/DEACTIVATION_TIME_DELAY
  contents:
  - "5.4.1.  ACTIVATION_TIME_DELAY/DEACTIVATION_TIME_DELAY\n   Section 4.2.1 of [RFC5374]\
    \ specifies a key rollover method that\n   requires two values be given it from\
    \ the group key management\n   protocol.  The ACTIVATION_TIME_DELAY attribute\
    \ allows a GCKS to set\n   the Activation Time Delay (ATD) for SAs generated from\
    \ TEKs.  The ATD\n   defines how long after receiving new SAs that they are to\
    \ be\n   activated by the GM.  The ATD value is in seconds.\n   The DEACTIVATION_TIME_DELAY\
    \ allows the GCKS to set the Deactivation\n   Time Delay (DTD) for previously\
    \ distributed SAs.  The DTD defines how\n   long after receiving new SAs that\
    \ it SHOULD deactivate SAs that are\n   destroyed by the rekey event.  The value\
    \ is in seconds.\n   The values of ATD and DTD are independent.  However, the\
    \ most\n   effective policy will have the DTD value be the larger value, as this\n\
    \   allows new SAs to be activated before older SAs are deactivated.\n   Such\
    \ a policy ensures that protected group traffic will always flow\n   without interruption.\n"
- title: 5.4.2.  SENDER_ID_REQUEST
  contents:
  - "5.4.2.  SENDER_ID_REQUEST\n   The SENDER_ID_REQUEST attribute is used by a group\
    \ member to request\n   SIDs during the GROUPKEY-PULL message, and includes a\
    \ count of how\n   many SID values it desires.\n"
- title: 5.5.  SA TEK Payload
  contents:
  - "5.5.  SA TEK Payload\n   The SA TEK (SAT) payload contains security attributes\
    \ for a single\n   TEK associated with a group.\n       0                   1\
    \                   2                   3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3\
    \ 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-!\n\
    \      ! Next Payload  !   RESERVED    !         Payload Length        !\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-!\n      !\
    \ Protocol-ID   !       TEK Protocol-Specific Payload           ~\n      +-+-+-+-+-+-+-+-+\
    \                                               ~\n      ~                   \
    \                                            ~\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-!\n\
    \                         Figure 7. SA TEK Payload\n   The SAT payload fields\
    \ are defined as follows:\n   o  Next Payload (1 octet) -- Identifies the next\
    \ payload for the\n      GROUPKEY-PULL or the GROUPKEY-PUSH message.  The only\
    \ valid next\n      payload types for this message are another SAT payload or\
    \ zero to\n      indicate there are no more security association attributes.\n\
    \   o  RESERVED (1 octet) -- MUST be zero.\n   o  Payload Length (2 octets) --\
    \ Length of this payload, including the\n      TEK Protocol-Specific Payload.\n\
    \   o  Protocol-ID (1 octet) -- Value specifying the Security Protocol.\n    \
    \  The following table defines values for the Security Protocol.\n           \
    \  Protocol ID                       Value\n             -----------         \
    \              -----\n             RESERVED                            0\n   \
    \          GDOI_PROTO_IPSEC_ESP                1\n             GDOI_PROTO_IPSEC_AH\
    \                 2\n             Unassigned                         3-127\n \
    \            Private Use                      128-255\n   o  TEK Protocol-Specific\
    \ Payload (variable) -- Payload which\n      describes the attributes specific\
    \ for the Protocol-ID.\n"
- title: 5.5.1.  GDOI_PROTO_IPSEC_ESP/GDOI_PROTO_IPSEC_AH
  contents:
  - "5.5.1.  GDOI_PROTO_IPSEC_ESP/GDOI_PROTO_IPSEC_AH\n   The TEK Protocol-Specific\
    \ payload for ESP and AH is as follows:\n       0                   1        \
    \           2                   3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7\
    \ 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-!\n\
    \      !    Protocol   !  SRC ID Type  !         SRC ID Port           !\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-!\n      !SRC\
    \ ID Data Len!          SRC Identification Data              ~\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-!\n\
    \      ! DST ID Type   !         DST ID Port           !DST ID Data Len!\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-!\n      !\
    \ DST Identification Data                                       ~\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-!\n\
    \      ! Transform ID  !                        SPI                    !\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-!\n      !\
    \      SPI      !       RFC 2407 SA Attributes                  ~\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-!\n\
    \                       Figure 8. ESP/AH TEK Payload\n   The SAT payload fields\
    \ are defined as follows:\n   o  Protocol (1 octet) -- Value describing an IP\
    \ protocol ID (e.g.,\n      UDP/TCP) [PROT-REG].  A value of zero means that the\
    \ Protocol\n      field MUST be ignored.\n   o  SRC ID Type (1 octet) -- Value\
    \ describing the identity information\n      found in the SRC Identification Data\
    \ field.  Defined values are\n      specified by the IPsec Identification Type\
    \ section in the IANA\n      ISAKMP registry [ISAKMP-REG].\n   o  SRC ID Port\
    \ (2 octets) -- Value specifying a port associated with\n      the source ID.\
    \  A value of zero means that the SRC ID Port field\n      MUST be ignored.\n\
    \   o  SRC ID Data Len (1 octet) -- Value specifying the length (in\n      octets)\
    \ of the SRC Identification Data field.\n   o  SRC Identification Data (variable\
    \ length) -- Value, as indicated\n      by the SRC ID Type.  Set to 3 octets or\
    \ zero for multiple-source\n      multicast groups that use a common TEK for all\
    \ senders.\n   o  DST ID Type (1 octet) -- Value describing the identity information\n\
    \      found in the DST Identification Data field.  Defined values are\n     \
    \ specified by the IPsec Identification Type section in the IANA\n      ISAKMP\
    \ registry [ISAKMP-REG].\n   o  DST ID Prot (1 octet) -- Value describing an IP\
    \ protocol ID (e.g.,\n      UDP/TCP) [PROT-REG].  A value of zero means that the\
    \ DST ID Prot\n      field MUST be ignored.\n   o  DST ID Port (2 octets) -- Value\
    \ specifying a port associated with\n      the source ID.  A value of zero means\
    \ that the DST ID Port field\n      MUST be ignored.\n   o  DST ID Data Len (1\
    \ octet) -- Value specifying the length (in\n      octets) of the DST Identification\
    \ Data field.\n   o  DST Identification Data (variable length) -- Value, as indicated\n\
    \      by the DST ID Type.\n   o  Transform ID (1 octet) -- Value specifying which\
    \ ESP or AH\n      transform is to be used.  The list of valid values is defined\
    \ in\n      the IPsec ESP or IPsec AH Transform Identifiers section of the\n \
    \     IANA ISAKMP registry [ISAKMP-REG].\n   o  SPI (4 octets) -- Security Parameter\
    \ Index for ESP.\n   o  RFC 2407 Attributes -- ESP and AH Attributes from Section\
    \ 4.5 of\n      [RFC2407].  The GDOI supports all IPsec DOI SA Attributes for\n\
    \      GDOI_PROTO_IPSEC_ESP and GDOI_PROTO_IPSEC_AH, excluding the Group\n   \
    \   Description (Section 4.5 of [RFC2407]), which MUST NOT be sent by\n      a\
    \ GDOI implementation and is ignored by a GDOI implementation if\n      received.\
    \  The following attributes MUST be supported by an\n      implementation supporting\
    \ ESP and AH: SA Life Type, SA Life\n      Duration, and Encapsulation Mode. \
    \ An implementation supporting\n      ESP MUST also support the Authentication\
    \ Algorithm attribute if\n      the ESP transform includes authentication.  The\
    \ Authentication\n      Algorithm attribute of the IPsec DOI is group authentication\
    \ in\n      GDOI.\n"
- title: 5.5.1.1.  New IPsec Security Association Attributes
  contents:
  - "5.5.1.1.  New IPsec Security Association Attributes\n   \"Multicast Extensions\
    \ to the Security Architecture for the Internet\n   Protocol\" (RFC 5374) introduces\
    \ new requirements for a group key\n   management system distributing IPsec policy.\
    \  It also defines new\n   attributes as part of the Group Security Policy Database\
    \ (GSPD).\n   These attributes describe policy that a group key management system\n\
    \   must convey to a group member in order to support those extensions.\n   The\
    \ GDOI SA TEK payload distributes IPsec policy using IPsec security\n   association\
    \ attributes defined in [ISAKMP-REG].  This section defines\n   how GDOI can convey\
    \ the new attributes as IPsec Security Association\n   Attributes.\n"
- title: 5.5.1.1.1.  Address Preservation
  contents:
  - "5.5.1.1.1.  Address Preservation\n   Applications use the extensions in [RFC5374]\
    \ to copy the IP addresses\n   into the outer IP header when encapsulating an\
    \ IP packet as an IPsec\n   tunnel mode packet.  This allows an IP multicast packet\
    \ to continue\n   to be routed as a IP multicast packet.  This attribute also\
    \ provides\n   the necessary policy so that the GDOI group member can appropriately\n\
    \   set up the GSPD.  The following table defines values for the Address\n   Preservation\
    \ attribute.\n              Address Preservation Type               Value\n  \
    \            -------------------------               -----\n              Reserved\
    \                                  0\n              None                     \
    \                 1\n              Source-Only                               2\n\
    \              Destination-Only                          3\n              Source-and-Destination\
    \                    4\n              Unassigned                             \
    \  5-61439\n              Private Use                          61440-65535\n \
    \  Depending on group policy, several address preservation methods are\n   possible:\
    \ no address preservation (\"None\"), preservation of the\n   original source\
    \ address (\"Source-Only\"), preservation of the original\n   destination address\
    \ (\"Destination-Only\"), or both addresses (\"Source-\n   and-Destination\").\
    \  If this attribute is not included in a GDOI SA\n   TEK payload provided by\
    \ a GCKS, then Source-and-Destination address\n   preservation has been defined\
    \ for the SA TEK.\n"
- title: 5.5.1.1.2.  SA Direction
  contents:
  - "5.5.1.1.2.  SA Direction\n   Depending on group policy, an IPsec SA created from\
    \ an SA TEK payload\n   is defined to be in the sending and/or receiving direction.\
    \  The\n   following table defines values for the SA Direction attribute.\n  \
    \            Name                      Value\n              ----             \
    \         -----\n              Reserved                    0\n              Sender-Only\
    \                 1\n              Receiver-Only               2\n           \
    \   Symmetric                   3\n              Unassigned                 4-61439\n\
    \              Private Use            61440-65535\n   SA TEK policy used by multiple\
    \ senders MUST be installed in both the\n   sending and receiving direction (\"\
    Symmetric\"), whereas SA TEK for a\n   single sender SHOULD be installed in the\
    \ receiving direction by\n   receivers (\"Receiver-Only\") and in the sending\
    \ direction by the\n   sender (\"Sender-Only\").\n   An SA TEK payload that does\
    \ not include the SA Direction attribute is\n   treated as a Symmetric IPsec SA.\
    \  Note that Symmetric is the only\n   value that can be meaningfully described\
    \ for an SA TEK distributed in\n   a GROUPKEY-PUSH message.  Alternatively, Receiver-Only\
    \ could be\n   distributed, but group senders would need to be configured to not\n\
    \   receive GROUPKEY-PUSH messages in order to retain their role.\n"
- title: 5.5.2.  Other Security Protocols
  contents:
  - "5.5.2.  Other Security Protocols\n   Besides ESP and AH, GDOI should serve to\
    \ establish SAs for secure\n   groups needed by other Security Protocols that\
    \ operate at the\n   transport, application, and internetwork layers.  These other\n\
    \   Security Protocols, however, are in the process of being developed or\n  \
    \ do not yet exist.\n   The following information needs to be provided for a Security\n\
    \   Protocol to the GDOI.\n   o  The Protocol-ID for the particular Security Protocol\n\
    \   o  The SPI Size\n   o  The method of SPI generation\n   o  The transforms,\
    \ attributes, and keys needed by the Security\n      Protocol\n   All Security\
    \ Protocols MUST provide the information in the bulleted\n   list above to guide\
    \ the GDOI specification for that protocol.\n   Definitions for the support of\
    \ those Security Protocols in GDOI will\n   be specified in separate documents.\n\
    \   A Security Protocol MAY protect traffic at any level of the network\n   stack.\
    \  However, in all cases, applications of the Security Protocol\n   MUST protect\
    \ traffic that MAY be shared by more than two entities.\n"
- title: 5.6.  Key Download Payload
  contents:
  - "5.6.  Key Download Payload\n   The Key Download payload contains group keys for\
    \ the group specified\n   in the SA payload.  These Key Download payloads can\
    \ have several\n   security attributes applied to them based upon the security\
    \ policy of\n   the group as defined by the associated SA payload.\n       0 \
    \                  1                   2                   3\n       0 1 2 3 4\
    \ 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-!\n\
    \      ! Next Payload  !   RESERVED    !         Payload Length        !\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-!\n      !\
    \ Number of Key Packets         !            RESERVED2          !\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-!\n\
    \      ~                    Key Packets                                ~\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-!\n      \
    \                Figure 9. Key Download Payload\n   The Key Download payload fields\
    \ are defined as follows:\n   o  Next Payload (1 octet) -- Identifier for the\
    \ payload type of the\n      next payload in the message.  If the current payload\
    \ is the last\n      in the message, then this field will be zero.\n   o  RESERVED\
    \ (1 octet) -- Unused; set to zero.\n   o  Payload Length (2 octets) -- Length\
    \ in octets of the current\n      payload, including the generic payload header.\n\
    \   o  Number of Key Packets (2 octets) -- Contains the total number of\n    \
    \  key packets being passed in this data block.\n   o  Key Packets (variable)\
    \ -- Several types of key packets are\n      defined.  Each key packet has the\
    \ following format.\n       0                   1                   2        \
    \           3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7\
    \ 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-!\n\
    \      !   KD Type     !   RESERVED    !            KD Length          !\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-!\n      !\
    \    SPI Size   !                   SPI (variable)              ~\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-!\n\
    \      ~                    Key Packet Attributes                      ~\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-!\n      \
    \                      Figure 10. Key Packet\n   o  Key Download (KD) Type (1\
    \ octet) -- Identifier for the Key Data\n      field of this key packet.\n   \
    \                       Key Download Type        Value\n                     \
    \     -----------------        -----\n                          Reserved     \
    \              0\n                          TEK                        1\n   \
    \                       KEK                        2\n                       \
    \   LKH                        3\n                          SID              \
    \          4\n                          Unassigned                4-127\n    \
    \                      Private Use             128-255\n   \"KEK\" is a single\
    \ key, whereas LKH is an array of key-encrypting\n   keys.\n   o  Reserved (1\
    \ octet) -- Unused; set to zero.\n   o  Key Download Length (2 octets) -- Length\
    \ in octets of the Key\n      Packet data, including the Key Packet header.\n\
    \   o  SPI Size (1 octet) -- Value specifying the length in octets of the\n  \
    \    SPI as defined by the Protocol-ID.\n   o  SPI (variable length) -- Security\
    \ Parameter Index, which matches a\n      SPI previously sent in a SAK or SAT\
    \ payload.\n   o  Key Packet Attributes (variable length) -- Contains key\n  \
    \    information.  The format of this field is specific to the value of\n    \
    \  the KD Type field.  The following sections describe the format of\n      each\
    \ KD Type.\n"
- title: 5.6.1.  TEK Download Type
  contents:
  - "5.6.1.  TEK Download Type\n   The following attributes may be present in a TEK\
    \ Download Type.\n   Exactly one attribute matching each type sent in the SAT\
    \ payload MUST\n   be present.  The attributes must follow the format defined\
    \ in ISAKMP\n   (Section 3.3 of [RFC2408]).  In the table, attributes defined\
    \ as TV\n   are marked as Basic (B); attributes defined as TLV are marked as\n\
    \   Variable (V).\n                TEK Class                 Value      Type\n\
    \                ---------                 -----      ----\n                RESERVED\
    \                     0\n                TEK_ALGORITHM_KEY            1      \
    \  V\n                TEK_INTEGRITY_KEY            2        V\n              \
    \  TEK_SOURCE_AUTH_KEY          3        V\n                Unassigned       \
    \           4-127\n                Private Use               128-255\n       \
    \         Unassigned                256-32767\n   If no TEK key packets are included\
    \ in a Registration KD payload, the\n   group member can expect to receive the\
    \ TEK as part of a Rekey SA.  At\n   least one TEK must be included in each Rekey\
    \ KD payload.  Multiple\n   TEKs may be included if multiple streams associated\
    \ with the SA are\n   to be rekeyed.\n   When an algorithm specification specifies\
    \ the format of the keying\n   material, the value transported in the KD payload\
    \ for that key is\n   passed according to that specification.  The keying material\
    \ may\n   contain information besides a key.  For example, \"The Use of Galois/\n\
    \   Counter Mode (GCM) in IPsec Encapsulating Security Payload (ESP)\"\n   [RFC4106]\
    \ defines a salt value as part of KEYMAT.\n"
- title: 5.6.1.1.  TEK_ALGORITHM_KEY
  contents:
  - "5.6.1.1.  TEK_ALGORITHM_KEY\n   The TEK_ALGORITHM_KEY class declares that the\
    \ encryption key for this\n   SPI is contained as the Key Packet Attribute.  The\
    \ encryption\n   algorithm that will use this key was specified in the SAT payload.\n\
    \   In the case that the algorithm requires multiple keys (e.g., 3DES),\n   all\
    \ keys will be included in one attribute.\n   DES keys will consist of 64 bits\
    \ (the 56 key bits with parity bits).\n   Triple DES keys will be specified as\
    \ a single 192-bit attribute\n   (including parity bits) in the order that the\
    \ keys are to be used for\n   encryption (e.g., DES_KEY1, DES_KEY2, DES_KEY3).\n"
- title: 5.6.1.2.  TEK_INTEGRITY_KEY
  contents:
  - "5.6.1.2.  TEK_INTEGRITY_KEY\n   The TEK_INTEGRITY_KEY class declares that the\
    \ integrity key for this\n   SPI is contained as the Key Packet Attribute.  The\
    \ integrity\n   algorithm that will use this key was specified in the SAT payload.\n\
    \   Thus, GDOI assumes that both the symmetric encryption and integrity\n   keys\
    \ are pushed to the GM.  HMAC-SHA1 keys will consist of 160 bits\n   [RFC2404],\
    \ and HMAC-MD5 keys will consist of 128 bits [RFC2403].\n   HMAC-SHA2 and AES-GMAC\
    \ keys will have a key length equal to the\n   output length of the hash functions\
    \ [RFC4868] [RFC4543].\n"
- title: 5.6.1.3.  TEK_SOURCE_AUTH_KEY
  contents:
  - "5.6.1.3.  TEK_SOURCE_AUTH_KEY\n   The TEK_SOURCE_AUTH_KEY class declares that\
    \ the source authentication\n   key for this SPI is contained in the Key Packet\
    \ Attribute.  The\n   source authentication algorithm that will use this key was\
    \ specified\n   in the SAT payload.\n"
- title: 5.6.2.  KEK Download Type
  contents:
  - "5.6.2.  KEK Download Type\n   The following attributes may be present in a KEK\
    \ Download Type.\n   Exactly one attribute matching each type sent in the SAK\
    \ payload MUST\n   be present.  The attributes MUST follow the format defined\
    \ in ISAKMP\n   (Section 3.3 of [RFC2408]).  In the table, attributes defined\
    \ as TV\n   are marked as Basic (B); attributes defined as TLV are marked as\n\
    \   Variable (V).\n                KEK Class                 Value      Type\n\
    \                ---------                 -----      ----\n                RESERVED\
    \                     0\n                KEK_ALGORITHM_KEY            1      \
    \  V\n                SIG_ALGORITHM_KEY            2        V\n              \
    \  Unassigned                  3-127\n                Private Use            \
    \   128-255\n                Unassigned                256-32767\n   If the KEK\
    \ key packet is included, there MUST be only one present in\n   the KD payload.\n"
- title: 5.6.2.1.  KEK_ALGORITHM_KEY
  contents:
  - "5.6.2.1.  KEK_ALGORITHM_KEY\n   The KEK_ALGORITHM_KEY class declares the encryption\
    \ key for this SPI\n   is contained in the Key Packet Attribute.  The encryption\
    \ algorithm\n   that will use this key was specified in the SAK payload.\n   If\
    \ the mode of operation for the algorithm requires an IV, an\n   explicit IV MUST\
    \ be included in the KEK_ALGORITHM_KEY before the\n   actual key.\n"
- title: 5.6.2.2.  SIG_ALGORITHM_KEY
  contents:
  - "5.6.2.2.  SIG_ALGORITHM_KEY\n   The SIG_ALGORITHM_KEY class declares that the\
    \ public key for this SPI\n   is contained in the Key Packet Attribute, which\
    \ may be useful when no\n   public key infrastructure is available.  The signature\
    \ algorithm that\n   will use this key was specified in the SAK payload.\n"
- title: 5.6.3.  LKH Download Type
  contents:
  - "5.6.3.  LKH Download Type\n   The LKH key packet is comprised of attributes representing\
    \ different\n   nodes in the LKH key tree.\n   The following attributes are used\
    \ to pass an LKH KEK array in the KD\n   payload.  The attributes MUST follow\
    \ the format defined in ISAKMP\n   (Section 3.3 of [RFC2408]).  In the table,\
    \ attributes defined as TV\n   are marked as Basic (B); attributes defined as\
    \ TLV are marked as\n   Variable (V).\n                KEK Class             \
    \    Value      Type\n                ---------                 -----      ----\n\
    \                RESERVED                     0\n                LKH_DOWNLOAD_ARRAY\
    \           1        V\n                LKH_UPDATE_ARRAY             2       \
    \ V\n                SIG_ALGORITHM_KEY            3        V\n               \
    \ Unassigned                  4-127\n                Private Use             \
    \  128-255\n                Unassigned                256-32767\n   If an LKH\
    \ key packet is included in the KD payload, there MUST be\n   only one present.\n"
- title: 5.6.3.1.  LKH_DOWNLOAD_ARRAY
  contents:
  - "5.6.3.1.  LKH_DOWNLOAD_ARRAY\n   This attribute is used to download a set of\
    \ keys to a group member.\n   It MUST NOT be included in a GROUPKEY-PUSH message\
    \ KD payload if the\n   GROUPKEY-PUSH is sent to more than the group member. \
    \ If an\n   LKH_DOWNLOAD_ARRAY attribute is included in a KD payload, there MUST\n\
    \   be only one present.\n   This attribute consists of a header block, followed\
    \ by one or more\n   LKH keys.\n       0                   1                 \
    \  2                   3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2\
    \ 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      !  LKH Version  !          # of LKH Keys        !  RESERVED     !\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      !\
    \                             LKH Keys                          !\n      ~   \
    \                                                            ~\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                       Figure 11. LKH Download Array\n   The KEK_LKH attribute\
    \ fields are defined as follows:\n   o  LKH version (1 octet) -- Version of the\
    \ LKH data format.  Must be\n      one.\n   o  Number of LKH Keys (2 octets) --\
    \ This value is the number of\n      distinct LKH keys in this sequence.\n   o\
    \  RESERVED (1 octet) -- Unused; set to zero.  Each LKH Key is\n      defined\
    \ as follows:\n       0                   1                   2              \
    \     3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0\
    \ 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      !             LKH ID            !    Key Type   !    RESERVED   !\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      !\
    \                        Key Creation Date                      !\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      !                       Key Expiration Date                     !\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      !\
    \                           Key Handle                          !\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      !                                                               !\n   \
    \   ~                            Key Data                           ~\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                              Figure 12. LKH Key\n   o  LKH ID (2 octets) --\
    \ Identity of the LKH node.  A GCKS is free to\n      choose the ID in an implementation-specific\
    \ manner (e.g., the\n      position of this key in a binary tree structure used\
    \ by LKH).\n   o  Key Type (1 octet) -- Encryption algorithm for which this key\
    \ data\n      is to be used.  This value is specified in Section 5.3.3.\n   o\
    \  RESERVED (1 octet) -- Unused; set to zero.\n   o  Key Creation Date (4 octets)\
    \ -- Unsigned time value defining a\n      valid time period in seconds representing\
    \ the number of seconds\n      since 0 hours, 0 minutes, 0 seconds, January 1,\
    \ 1970, Coordinated\n      Universal Time (UTC), without including leap seconds.\
    \  [RFC5905].\n      This is the time when this key data was originally generated.\
    \  A\n      time value of zero indicates that there is no time before which\n\
    \      this key is not valid.\n   o  Key Expiration Date (4 octets) -- Unsigned\
    \ time value defining a\n      valid time period in seconds representing the number\
    \ of seconds\n      since 0 hours, 0 minutes, 0 seconds, January 1, 1970, Coordinated\n\
    \      Universal Time (UTC), without including leap seconds.  [RFC5905].\n   \
    \   This is the time when this key is no longer valid for use.  A time\n     \
    \ value of zero indicates that this key does not have an expiration\n      time.\n\
    \   o  Key Handle (4 octets) -- Value assigned by the GCKS to uniquely\n     \
    \ identify a key within an LKH ID.  Each new key distributed by the\n      GCKS\
    \ for this node will have a key handle identity distinct from\n      previous\
    \ or successive key handles specified for this node.\n   o  Key Data (variable\
    \ length) -- Key data, which is dependent on the\n      Key Type algorithm for\
    \ its format.  If the mode of operation for\n      the algorithm requires an IV,\
    \ an explicit IV MUST be included in\n      the Key Data field prepended to the\
    \ actual key.\n   The Key Creation Date and Key Expiration Dates MAY be zero.\
    \  This is\n   necessary in the case where time synchronization within the group\
    \ is\n   not possible.\n   The first LKH Key structure in an LKH_DOWNLOAD_ARRAY\
    \ attribute\n   contains the Leaf identifier and key for the group member.  The\
    \ rest\n   of the LKH Key structures contain keys along the path of the key tree\n\
    \   in order from the leaf, culminating in the group KEK.\n"
- title: 5.6.3.2.  LKH_UPDATE_ARRAY
  contents:
  - "5.6.3.2.  LKH_UPDATE_ARRAY\n   This attribute is used to update the keys for\
    \ a group.  It is most\n   likely to be included in a GROUPKEY-PUSH message KD\
    \ payload to rekey\n   the entire group.  This attribute consists of a header\
    \ block,\n   followed by one or more LKH keys, as defined in the previous section.\n\
    \   There may be any number of UPDATE_ARRAY attributes included in a KD\n   payload.\n\
    \       0                   1                   2                   3\n      \
    \ 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      !  LKH Version  !          # of LKH Keys        !  RESERVED     !\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      !\
    \            LKH ID             !           RESERVED2           !\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      !                           Key Handle                          !\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      !\
    \                            LKH Keys                           !\n      ~   \
    \                                                            ~\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                        Figure 13. LKH Update Array\n   o  LKH version (1 octet)\
    \ -- Version of the LKH data format.  Must be\n      one.\n   o  Number of LKH\
    \ Keys (2 octets) -- Number of distinct LKH keys in\n      this sequence.\n  \
    \ o  RESERVED (1 octet) -- Unused; set to zero.\n   o  LKH ID (2 octets) -- Node\
    \ identifier associated with the key used\n      to encrypt the first LKH Key.\n\
    \   o  RESERVED2 (2 octets) -- Unused; set to zero.\n   o  Key Handle (4 octets)\
    \ -- Value assigned by the GCKS to uniquely\n      identify the key within the\
    \ LKH ID used to encrypt the first LKH\n      Key.\n   The LKH Keys are as defined\
    \ in the previous section.  The LKH Key\n   structures contain keys along the\
    \ path of the key tree in order from\n   the LKH ID found in the LKH_UPDATE_ARRAY\
    \ header, culminating in the\n   group KEK.  The Key Data field of each LKH Key\
    \ is encrypted with the\n   LKH key preceding it in the LKH_UPDATE_ARRAY attribute.\
    \  The first\n   LKH Key is encrypted under the key defined by the LKH ID and\
    \ Key\n   Handle found in the LKH_UPDATE_ARRAY header.\n"
- title: 5.6.3.3.  SIG_ALGORITHM_KEY
  contents:
  - "5.6.3.3.  SIG_ALGORITHM_KEY\n   The SIG_ALGORITHM_KEY class declares that the\
    \ public key for this SPI\n   is contained in the Key Packet Attribute, which\
    \ may be useful when no\n   public key infrastructure is available.  The signature\
    \ algorithm that\n   will use this key was specified in the SAK payload.\n"
- title: 5.6.4.  SID Download Type
  contents:
  - "5.6.4.  SID Download Type\n   This attribute is used to download one or more\
    \ Sender-ID (SID) values\n   for the exclusive use of a group member.\n   The\
    \ SID Download Type does not require an SPI.  When the KD Type is\n   SID, the\
    \ SPI Size field MUST be zero, and the SPI field is omitted.\n               \
    \ SID Class                 Value      Type\n                ---------       \
    \          -----      ----\n                RESERVED                     0\n \
    \               NUMBER_OF_SID_BITS           1        B\n                SID_VALUE\
    \                    2        V\n                Unassigned                 3-128\n\
    \                Private Use              129-255\n                Unassigned\
    \               256-32767\n   Because a SID value is intended for a single group\
    \ member, the SID\n   Download type MUST NOT be distributed in a GROUPKEY-PUSH\
    \ message\n   distributed to multiple group members.\n"
- title: 5.6.4.1.  NUMBER_OF_SID_BITS
  contents:
  - "5.6.4.1.  NUMBER_OF_SID_BITS\n   The NUMBER_OF_SID_BITS class declares how many\
    \ bits of the cipher\n   nonce in which to represent a SID value.  This value\
    \ is applied to\n   each SID value distributed in the SID Download.\n"
- title: 5.6.4.2.  SID_VALUE
  contents:
  - "5.6.4.2.  SID_VALUE\n   The SID_VALUE class declares a single SID value for the\
    \ exclusive use\n   of the group member.  Multiple SID_VALUE attributes MAY be\
    \ included\n   in a SID Download.\n"
- title: 5.6.4.3.  Group Member Semantics
  contents:
  - "5.6.4.3.  Group Member Semantics\n   The SID_VALUE attribute value distributed\
    \ to the group member MUST be\n   used by that group member as the SID field portion\
    \ of the IV for all\n   Data-Security SAs including a counter-based mode of operation\n\
    \   distributed by the GCKS as a part of this group.\n   When the Sender-Specific\
    \ IV (SSIV) field for any Data-Security SA is\n   exhausted, the group member\
    \ MUST no longer act as a sender on that SA\n   using its active SID.  The group\
    \ member SHOULD re-register, at which\n   time the GCKS will issue a new SID to\
    \ the group member, along with\n   either the same Data-Security SAs or replacement\
    \ ones.  The new SID\n   replaces the existing SID used by this group member and\
    \ also resets\n   the SSIV value to its starting value.  A group member MAY re-register\n\
    \   prior to the actual exhaustion of the SSIV field to avoid dropping\n   data\
    \ packets due to the exhaustion of available SSIV values combined\n   with a particular\
    \ SID value.\n   GROUPKEY-PUSH message may include Data-Security SAs that are\n\
    \   distributed to the group member for the first time.  A SID previously\n  \
    \ issued to the receiving group member is used with counter-based mode\n   of\
    \ operation Data-Security SAs on which the group member acts as a\n   sender.\
    \  Because this Data-Security SA has not previously been used\n   for transmission,\
    \ the SSIV field should be set to its starting value.\n"
- title: 5.6.4.4.  GCKS Semantics
  contents:
  - "5.6.4.4.  GCKS Semantics\n   If any KD payload includes keying material that\
    \ is associated with a\n   counter-mode of operation, a SID Download Type KD payload\
    \ containing\n   at least one SID_VALUE attribute MUST be included.\n   The GCKS\
    \ MUST NOT send the SID Download Type KD payload as part of a\n   GROUPKEY-PUSH\
    \ message because distributing the same sender-specific\n   policy to more than\
    \ one group member will reduce the security of the\n   group.\n"
- title: 5.7.  Sequence Number Payload
  contents:
  - "5.7.  Sequence Number Payload\n   The Sequence Number (SEQ) Payload provides\
    \ an anti-replay protection\n   for GROUPKEY-PUSH messages.  Its use is similar\
    \ to the Sequence\n   Number field defined in the IPsec ESP protocol [RFC4303].\n\
    \       0                   1                   2                   3\n      \
    \ 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      ! Next Payload  !   RESERVED    !         Payload Length        !\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      !\
    \                      Sequence Number                          !\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                    Figure 14. Sequence Number Payload\n   The Sequence Number\
    \ Payload fields are defined as follows:\n   o  Next Payload (1 octet) -- Identifier\
    \ for the payload type of the\n      next payload in the message.  If the current\
    \ payload is the last\n      in the message, then this field will be zero.\n \
    \  o  RESERVED (1 octet) -- Unused; set to zero.\n   o  Payload Length (2 octets)\
    \ -- Length in octets of the current\n      payload, including the generic payload\
    \ header.  MUST be a value of\n      8.\n   o  Sequence Number (4 octets) -- This\
    \ field contains a monotonically\n      increasing counter value for the group.\
    \  It is initialized to zero\n      by the GCKS and incremented in each subsequently\
    \ transmitted\n      message.  Thus, the first packet sent for a given Rekey SA\
    \ will\n      have a Sequence Number of 1.  The GDOI implementation keeps a\n\
    \      sequence counter as an attribute for the Rekey SA and increments\n    \
    \  the counter upon receipt of a GROUPKEY-PUSH message.  The current\n      value\
    \ of the sequence number MUST be transmitted to group members\n      as a part\
    \ of the Registration SA payload.\n"
- title: 5.8.  Nonce
  contents:
  - "5.8.  Nonce\n   The data portion of the Nonce payload (i.e., Ni_b and Nr_b included\n\
    \   in the HASHs) MUST be a value between 8 and 128 octets.\n"
- title: 5.9.  Delete
  contents:
  - "5.9.  Delete\n   There are times the GCKS may want to signal to receivers to\
    \ delete\n   SAs, for example, at the end of a broadcast.  Deletion of keys may\
    \ be\n   accomplished by sending an ISAKMP Delete payload (Section 3.15 of\n \
    \  [RFC2408]) as part of a GDOI GROUPKEY-PUSH message.\n   One or more Delete\
    \ payloads MAY be placed following the SEQ payload\n   in a GROUPKEY-PUSH message.\
    \  If a GCKS has no further SAs to send to\n   group members, the SA and KD payloads\
    \ MUST be omitted from the\n   message.\n   The following fields of the Delete\
    \ payload are further defined as\n   follows:\n   o  The Domain of Interpretation\
    \ field contains the GDOI DOI.\n   o  The Protocol-ID field contains TEK protocol\
    \ ID values defined in\n      Section 5.5 of this document.  To delete a KEK SA,\
    \ the value of\n      zero MUST be used as the protocol ID.  Note that only one\
    \ protocol\n      ID value can be defined in a Delete payload.  Thus, if a TEK\
    \ SA\n      and a KEK SA are to be deleted, their SPI values MUST be sent in\n\
    \      different Delete payloads.\n   There may be circumstances where the GCKS\
    \ may want to start over with\n   a clean slate.  If the administrator is no longer\
    \ confident in the\n   integrity of the group, the GCKS can signal deletion of\
    \ all policy of\n   a particular TEK protocol by sending a TEK with an SPI value\
    \ equal to\n   zero in the delete payload.  For example, if the GCKS wishes to\n\
    \   remove all the KEKs and all the TEKs in the group, the GCKS SHOULD\n   send\
    \ a delete payload with an SPI of zero and a Protocol-ID of a TEK\n   Protocol-ID\
    \ value, followed by another delete payload with an SPI\n   value of zero and\
    \ Protocol-ID of zero, indicating that the KEK SA\n   should be deleted.\n"
- title: 6.  Algorithm Selection
  contents:
  - "6.  Algorithm Selection\n   For GDOI implementations to interoperate, they must\
    \ support one or\n   more security algorithms in common.  This section specifies\
    \ the\n   security algorithm implementation requirements for standards-\n   conformant\
    \ GDOI implementations.  In all cases, the choices are\n   intended to maintain\
    \ at least 112 bits of security [SP.800-131].\n   Algorithms not referenced in\
    \ this section MAY be used.\n"
- title: 6.1.  KEK
  contents:
  - "6.1.  KEK\n   These tables list the algorithm selections for values related to\
    \ the\n   KEK.\n                Requirement   KEK Management Algorithm\n     \
    \           -----------   ---------------------\n                SHOULD      \
    \  LKH\n                Requirement   KEK Algorithm (notes)\n                -----------\
    \   ---------------------\n                MUST          KEK_ALG_AES with 128-bit\
    \ keys\n                SHOULD NOT    KEK_ALG_DES  (1)\n                Requirement\
    \   KEK Signature Hash Algorithm (notes)\n                -----------   ------------------------------------\n\
    \                MUST          SIG_HASH_SHA256\n                SHOULD       \
    \ SIG_HASH_SHA1 (2)\n                SHOULD NOT    SIG_HASH_MD5 (3)\n        \
    \        Requirement   KEK Signature Algorithm (notes)\n                -----------\
    \   -------------------------------\n                MUST          SIG_ALG_RSA\
    \ with 2048-bit keys\n   Notes:\n   (1)  DES, with its small key size and corresponding\
    \ security\n        strength, is of questionable security for general use\n  \
    \ (2)  The use of SIG_HASH_SHA1 as a signature hash algorithm used with\n    \
    \    GROUPKEY-PUSH messages remains safe at the time of this writing,\n      \
    \  and it is a widely deployed signature hash algorithm.\n   (3)  Although a real\
    \ weakness with second preimage resistance with\n        MD5 has not been found\
    \ at the time of this writing, the security\n        strength of MD5 has been\
    \ shown to be rapidly declining over\n        time, and its use should be understood\
    \ and carefully weighed.\n"
- title: 6.2.  TEK
  contents:
  - "6.2.  TEK\n   The following table lists the requirements for Security Protocol\n\
    \   support for an implementation.\n                Requirement   KEK Management\
    \ Algorithm\n                -----------   ---------------------\n           \
    \     MUST          GDOI_PROTO_IPSEC_ESP\n"
- title: 7.  Security Considerations
  contents:
  - "7.  Security Considerations\n   GDOI is a security association (SA) management\
    \ protocol for groups of\n   senders and receivers.  This protocol performs authentication\
    \ of\n   communicating protocol participants (Group Member, Group Controller/\n\
    \   Key Server).  It provides confidentiality of key management messages,\n  \
    \ and it provides source authentication of those messages.  GDOI\n   includes\
    \ defenses against man-in-middle, connection hijacking,\n   replay, reflection,\
    \ and denial-of-service (DoS) attacks on unsecured\n   networks.  GDOI assumes\
    \ the network is not secure and may be under\n   the complete control of an attacker.\n\
    \   GDOI assumes that the group members and GCKS are secure even though\n   the\
    \ network is insecure.  GDOI ultimately establishes keys among\n   members of\
    \ a group, which MUST be trusted to use those keys in an\n   authorized manner\
    \ according to group policy.  A GDOI entity\n   compromised by an attacker may\
    \ reveal the secrets necessary to\n   eavesdrop on group traffic and/or take the\
    \ identity of a group\n   sender, so host security measures mitigating unauthorized\
    \ access are\n   of the utmost importance.  The latter threat could be mitigated\
    \ by\n   using source origin authentication in the Data-Security SAs (e.g.,\n\
    \   the use of RSA signatures [RFC4359] or TESLA [RFC4082]).  The choice\n   of\
    \ Data-Security SAs is a matter of group policy and is not within\n   the scope\
    \ of this memo.\n   There are three phases of GDOI as described in this document:\
    \ an\n   ISAKMP Phase 1 protocol, the GROUPKEY-PULL exchange protected by the\n\
    \   ISAKMP Phase 1 protocol, and the GROUPKEY-PUSH message.  Each phase\n   is\
    \ considered separately below.\n"
- title: 7.1.  ISAKMP Phase 1
  contents:
  - "7.1.  ISAKMP Phase 1\n   GDOI uses the Phase 1 exchanges defined in [RFC2409]\
    \ to protect the\n   GROUPKEY-PULL exchange.  Therefore, all security properties\
    \ and\n   considerations of those exchanges (as noted in [RFC2409]) are\n   relevant\
    \ for GDOI.\n   GDOI may inherit the problems of its ancestor protocols, such\
    \ as\n   identity exposure, absence of unidirectional authentication, or\n   stateful\
    \ cookies [PK01].\n"
- title: 7.1.1.  Authentication
  contents:
  - "7.1.1.  Authentication\n   Authentication is provided via the mechanisms defined\
    \ in [RFC2409],\n   namely pre-shared keys or public key encryption.\n"
- title: 7.1.2.  Confidentiality
  contents:
  - "7.1.2.  Confidentiality\n   Confidentiality is achieved in Phase 1 through a\
    \ Diffie-Hellman\n   exchange that provides keying material and through negotiation\
    \ of\n   encryption transforms.\n   The Phase 1 protocol will be protecting encryption\
    \ and integrity keys\n   sent in the GROUPKEY-PULL protocol.  The strength of\
    \ the encryption\n   used for Phase 1 SHOULD exceed that of the keys sent in the\
    \ GROUPKEY-\n   PULL protocol.\n"
- title: 7.1.3.  Man-in-the-Middle Attack Protection
  contents:
  - "7.1.3.  Man-in-the-Middle Attack Protection\n   A successful man-in-the-middle\
    \ or connection-hijacking attack foils\n   entity authentication of one or more\
    \ of the communicating entities\n   during key establishment.  GDOI relies on\
    \ Phase 1 authentication to\n   defeat man-in-the-middle attacks.\n"
- title: 7.1.4.  Replay/Reflection Attack Protection
  contents:
  - "7.1.4.  Replay/Reflection Attack Protection\n   In a replay/reflection attack,\
    \ an attacker captures messages between\n   GDOI entities and subsequently forwards\
    \ them to a GDOI entity.\n   Replay and reflection attacks seek to gain information\
    \ from a\n   subsequent GDOI message response or seek to disrupt the operation\
    \ of\n   a GDOI member or GCKS entity.  GDOI relies on the Phase 1 nonce\n   mechanism\
    \ in combination with a hash-based message authentication\n   code to protect\
    \ against the replay or reflection of previous key\n   management messages.\n"
- title: 7.1.5.  Denial-of-Service Protection
  contents:
  - "7.1.5.  Denial-of-Service Protection\n   A DoS attacker sends messages to a GDOI\
    \ entity to cause that entity\n   to perform unneeded message authentication operations.\
    \  GDOI uses the\n   Phase 1 cookie mechanism to identify spurious messages prior\
    \ to\n   cryptographic hash processing.  This is a \"weak\" form of DoS\n   protection\
    \ in that the GDOI entity must check for good cookies, which\n   can be successfully\
    \ imitated by a sophisticated attacker.  The Phase\n   1 cookie mechanism is stateful\
    \ and commits memory resources for\n   cookies.\n"
- title: 7.2.  GROUPKEY-PULL Exchange
  contents:
  - "7.2.  GROUPKEY-PULL Exchange\n   The GROUPKEY-PULL exchange allows a group member\
    \ to request SAs and\n   keys from a GCKS.  It runs as a Phase 2 protocol under\
    \ protection of\n   the Phase 1 security association.\n"
- title: 7.2.1.  Authentication
  contents:
  - "7.2.1.  Authentication\n   Peer authentication is not required in the GROUPKEY-PULL\
    \ protocol.\n   It is running in the context of the Phase 1 protocol, which has\n\
    \   previously authenticated the identity of the peer.\n   Message authentication\
    \ is provided by HASH payloads in each message,\n   where the HASH is defined\
    \ to be over SKEYID_a (derived in the Phase 1\n   exchange), the ISAKMP Message-ID,\
    \ and all payloads in the message.\n   Because only the two endpoints of the exchange\
    \ know the SKEYID_a\n   value, this provides confidence that the peer sent the\
    \ message.\n"
- title: 7.2.2.  Confidentiality
  contents:
  - "7.2.2.  Confidentiality\n   Confidentiality is provided by the Phase 1 security\
    \ association,\n   after the manner described in [RFC2409].\n"
- title: 7.2.3.  Man-in-the-Middle Attack Protection
  contents:
  - "7.2.3.  Man-in-the-Middle Attack Protection\n   Message authentication (described\
    \ above) includes a secret known only\n   to the group member and GCKS when constructing\
    \ a HASH payload.  This\n   prevents man-in-the-middle and connection-hijacking\
    \ attacks because\n   an attacker would not be able to change the message undetected.\n"
- title: 7.2.4.  Replay Protection
  contents:
  - "7.2.4.  Replay Protection\n   A GROUPKEY-PULL message identifies its messages\
    \ using a cookie pair\n   from the Phase 1 exchange that precedes it.  A GROUPKEY-PULL\
    \ message\n   with invalid cookies will be discarded.  Therefore, GDOI messages\n\
    \   that are not associated with a current GDOI session will be discarded\n  \
    \ without further processing.\n   Replayed GDOI messages that are associated with\
    \ a current GDOI\n   session will be decrypted and authenticated.  The M-ID in\
    \ the HDR\n   identifies a session.  Replayed packets will be processed according\n\
    \   to the state machine of that session.  Packets not matching that\n   state\
    \ machine will be discarded without processing.\n"
- title: 7.2.5.  Denial-of-Service Protection
  contents:
  - "7.2.5.  Denial-of-Service Protection\n   GCKS implementations SHOULD keep a record\
    \ of recently received\n   GROUPKEY-PULL messages (e.g., a hash of the packet)\
    \ and reject\n   messages that have already been processed.  This provides DoS\
    \ and\n   replay protection of previously sent messages.  An implementation MAY\n\
    \   choose to rate-limit the receipt of GDOI messages in order to\n   mitigate\
    \ overloading its computational resources.\n   The GCKS SHOULD NOT perform any\
    \ computationally expensive tasks\n   before receiving a HASH with its own nonce\
    \ included.  The GCKS MUST\n   NOT update the group management state (e.g., LKH\
    \ key tree, SID-\n   counter) until it receives the third message in the exchange\
    \ with a\n   valid HASH payload including its own nonce.\n"
- title: 7.2.6.  Authorization
  contents:
  - "7.2.6.  Authorization\n   A GCKS implementation SHOULD maintain an authorization\
    \ list of\n   authorized group members.  A group member MUST specifically list\
    \ each\n   authorized GCKS in its Group Peer Authorization Database (GPAD)\n \
    \  [RFC5374].\n"
- title: 7.3.  GROUPKEY-PUSH Exchange
  contents:
  - "7.3.  GROUPKEY-PUSH Exchange\n   The GROUPKEY-PUSH exchange is a single message\
    \ that allows a GCKS to\n   send SAs and keys to group members.  This is likely\
    \ to be sent to all\n   members using an IP multicast group.  This message provides\
    \ an\n   efficient rekey and group membership adjustment capability.\n"
- title: 7.3.1.  Authentication
  contents:
  - "7.3.1.  Authentication\n   The GROUPKEY-PULL exchange distributes a public key\
    \ that is used for\n   message authentication.  The GROUPKEY-PUSH message is digitally\n\
    \   signed using the corresponding private key held by the GCKS.  This\n   digital\
    \ signature provides source authentication for the message.\n   Thus, GDOI protects\
    \ the GCKS from impersonation in group\n   environments.\n"
- title: 7.3.2.  Confidentiality
  contents:
  - "7.3.2.  Confidentiality\n   The GCKS encrypts the GROUPKEY-PUSH message with\
    \ an encryption key\n   that was distributed in the GROUPKEY-PULL exchange or\
    \ a previous\n   GROUPKEY-PUSH exchange.  The encryption key may be a simple KEK\
    \ or\n   the result of a group management method (e.g., LKH) calculation.\n"
- title: 7.3.3.  Man-in-the-Middle Attack Protection
  contents:
  - "7.3.3.  Man-in-the-Middle Attack Protection\n   This combination of confidentiality\
    \ and message authentication\n   services protects the GROUPKEY-PUSH message from\
    \ man-in-middle and\n   connection-hijacking attacks.\n"
- title: 7.3.4.  Replay/Reflection Attack Protection
  contents:
  - "7.3.4.  Replay/Reflection Attack Protection\n   The GROUPKEY-PUSH message includes\
    \ a monotonically increasing\n   sequence number to protect against replay and\
    \ reflection attacks.  A\n   group member will discard sequence numbers associated\
    \ with the\n   current KEK SPI that have the same or lower value as the most\n\
    \   recently received replay number.\n   Implementations SHOULD keep a record\
    \ (e.g., a hash value) of recently\n   received GROUPKEY-PUSH messages and reject\
    \ duplicate messages prior\n   to performing cryptographic operations.  This enables\
    \ an early\n   discard of the replayed messages.\n"
- title: 7.3.5.  Denial-of-Service Protection
  contents:
  - "7.3.5.  Denial-of-Service Protection\n   A cookie pair identifies the security\
    \ association for the GROUPKEY-\n   PUSH message.  The cookies thus serve as a\
    \ weak form of DoS\n   protection for the GROUPKEY-PUSH message.\n   The digital\
    \ signature used for message authentication has a much\n   greater computational\
    \ cost than a message authentication code and\n   could amplify the effects of\
    \ a DoS attack on GDOI members who process\n   GROUPKEY-PUSH messages.  The added\
    \ cost of digital signatures is\n   justified by the need to prevent GCKS impersonation:\
    \ If a shared\n   symmetric key were used for GROUPKEY-PUSH message authentication,\n\
    \   then GCKS source authentication would be impossible, and any member\n   would\
    \ be capable of GCKS impersonation.\n   The potential of the digital signature\
    \ amplifying a DoS attack is\n   mitigated by the order of operations a group\
    \ member takes, where the\n   least expensive cryptographic operation is performed\
    \ first.  The\n   group member first decrypts the message using a symmetric cipher.\
    \  If\n   it is a validly formed message, then the sequence number is checked\n\
    \   against the most recently received sequence number.  Only when the\n   sequence\
    \ number is valid (i.e., it is a larger value than previously\n   received) is\
    \ the digital signature verified and the message further\n   processed.  Thus,\
    \ in order for a DoS attack to be mounted, an\n   attacker would need to know\
    \ both the symmetric encryption key used\n   for confidentiality and a valid sequence\
    \ number.  Generally speaking,\n   this means only current group members can effectively\
    \ deploy a DoS\n   attack.\n"
- title: 7.4.  Forward and Backward Access Control
  contents:
  - "7.4.  Forward and Backward Access Control\n   Through GROUPKEY-PUSH, the GDOI\
    \ supports group management methods\n   such as LKH (Section 5.4 of [RFC2627])\
    \ that have the property of\n   denying access to a new group key by a member\
    \ removed from the group\n   (forward access control) and to an old group key\
    \ by a member added to\n   the group (backward access control).  The concepts\
    \ \"forward access\n   control\" and \"backward access control\" have also been\
    \ described as\n   \"perfect forward security\" and \"perfect backward security\"\
    ,\n   respectively, in the literature [RFC2627].\n   Group management algorithms\
    \ providing forward and backward access\n   control other than LKH have been proposed\
    \ in the literature,\n   including one-way function trees [OFT] and Subset Difference\
    \ [NNL].\n   These algorithms could be used with GDOI, but are not specified as\
    \ a\n   part of this document.\n"
- title: 7.4.1.  Forward Access Control Requirements
  contents:
  - "7.4.1.  Forward Access Control Requirements\n   When group membership is altered\
    \ using a group management algorithm,\n   new Data-Security SAs are usually also\
    \ needed.  New SAs ensure that\n   members who were denied access can no longer\
    \ participate in the\n   group.\n   If forward access control is a desired property\
    \ of the group, new\n   Data-Security SAs MUST NOT be included in a GROUPKEY-PUSH\
    \ message\n   that changes group membership.  This is required because the new\n\
    \   Data-Security SAs are not protected with the new KEK.  Instead, two\n   sequential\
    \ GROUPKEY-PUSH messages must be sent by the GCKS; the first\n   changing the\
    \ KEK, and the second (protected with the new KEK)\n   distributing the new Data-Security\
    \ SAs.\n   Note that in the above sequence, although the new KEK can effectively\n\
    \   deny access to the group to some group members, they will be able to\n   view\
    \ the new KEK policy.  If forward access control policy for the\n   group includes\
    \ keeping the KEK policy secret as well as the KEK\n   itself secret, then two\
    \ GROUPKEY-PUSH messages changing the KEK must\n   occur before the new Data-Security\
    \ SAs are transmitted.\n   If other methods of using LKH or other group management\
    \ algorithms\n   are added to GDOI, those methods MAY remove the above restrictions\n\
    \   requiring multiple GROUPKEY-PUSH messages, providing those methods\n   specify\
    \ how forward access control policy is maintained within a\n   single GROUPKEY-PUSH\
    \ message.\n"
- title: 7.4.2.  Backward Access Control Requirements
  contents:
  - "7.4.2.  Backward Access Control Requirements\n   If backward access control is\
    \ a desired property of the group, a new\n   member MUST NOT be given Data-Security\
    \ SAs that were used prior to\n   its joining the group.  This can be accomplished\
    \ if the GCKS provides\n   only the Rekey SA to the new member in a GROUPKEY-PULL\
    \ exchange,\n   followed by a GROUPKEY-PUSH message that both deletes current\
    \ Data-\n   Security SAs and provides new replacement Data-Security SAs.  The\
    \ new\n   group member will effectively join the group at such time as the\n \
    \  existing members begin sending on the Data-Security SAs.\n   If there is a\
    \ possibility that the new group member has stored\n   GROUPKEY-PUSH messages\
    \ delivered prior to joining the group, then the\n   above procedure is not sufficient.\
    \  In this case, to achieve backward\n   access control, the GCKS needs to return\
    \ a new Rekey SA to the group\n   member in a GROUPKEY-PULL exchange rather than\
    \ the existing one.  The\n   GCKS would subsequently deliver two GROUPKEY-PUSH\
    \ messages.  The\n   first, intended for existing group members, distributes the\
    \ new Rekey\n   SA to existing members.  The GCKS would then deliver the second\n\
    \   GROUPKEY-PUSH message using the new Rekey SA that both deletes\n   current\
    \ Data-Security SAs and provides new replacement Data-Security\n   SAs.  Both\
    \ preexisting and new members would process the second\n   GROUPKEY-PUSH message,\
    \ and all would be able to communicate using the\n   new Data-Security SAs.\n"
- title: 7.5.  Derivation of Keying Material
  contents:
  - "7.5.  Derivation of Keying Material\n   A GCKS distributes keying material associated\
    \ with Data-Security SAs\n   and the Rekey SA.  Because these security associations\
    \ are used by a\n   set of group members, this keying material is not related\
    \ to any\n   pair-wise connection, and there is no requirement in \"The Multicast\n\
    \   Group Security Architecture\" [RFC3740] for group members to permute\n   group\
    \ keying material.  Because the GCKS is solely responsible for\n   the generation\
    \ of the keying material, the GCKS MUST derive the\n   keying material using a\
    \ strong random number generator.  Because\n   there are no interoperability concerns\
    \ with key generation, no method\n   is prescribed in GDOI.\n"
- title: 8.  IANA Considerations
  contents:
  - '8.  IANA Considerations

    '
- title: 8.1.  Additions to Current Registries
  contents:
  - "8.1.  Additions to Current Registries\n   The GDOI KEK Attribute named SIG_HASH_ALGORITHM\
    \ [GDOI-REG] has been\n   assigned several new Algorithm Type values from the\
    \ RESERVED space to\n   represent the SHA-256, SHA-384, and SHA-512 hash algorithms\
    \ as\n   defined in [FIPS180-3.2008].  The new algorithm names are\n   SIG_HASH_SHA256,\
    \ SIG_HASH_SHA384, and SIG_HASH_SHA512, respectively,\n   and have the values\
    \ of 3, 4, and 5, respectively.\n   The GDOI KEK Attribute named SIG_ALGORITHM\
    \ [GDOI-REG] has been\n   assigned several new Algorithm Type values from the\
    \ RESERVED space to\n   represent the SIG_ALG_ECDSA-256, SIG_ALG_ECDSA-384, and\n\
    \   SIG_ALG_ECDSA-521 signature algorithms.  The Algorithm Types values\n   are\
    \ 4, 5, and 6, respectively.\n   A new GDOI SA TEK type Protocol-ID type [GDOI-REG]\
    \ has been assigned\n   from the RESERVED space.  The new algorithm ID is called\n\
    \   GDOI_PROTO_IPSEC_AH, refers to the IPsec AH encapsulation, and has a\n   value\
    \ of 2.\n   A new Next Payload Type [ISAKMP-REG] has been assigned.  The new type\n\
    \   is called \"SA Group Associated Policy (GAP)\" and has a value of 22.\n  \
    \ A new Key Download Type Section 5.6 has been assigned.  The new type\n   is\
    \ called \"SID\" and has a value of 4.\n"
- title: 8.2.  New Registries
  contents:
  - "8.2.  New Registries\n   A new registry identifying the possible values of GAP\
    \ Payload Policy\n   Attributes (of the form described in Section 3.3 of [RFC2408])\
    \ has\n   been created in the GDOI Payloads registry [GDOI-REG].  This memo\n\
    \   defines the following values for this registry:\n              Attribute Type\
    \         Value       Type\n              ----                   -----       ----\n\
    \              RESERVED                 0\n              ACTIVATION_TIME_DELAY\
    \    1          B\n              DEACTIVATION_TIME_DELAY  2          B\n     \
    \         SENDER_ID_REQUEST        3          B\n              Unassigned    \
    \          4-127\n              Private Use           128-255\n              Unassigned\
    \            256-32767\n   The registration procedure is Standards Action.  The\
    \ terms Standards\n   Action and Private Use are to be applied as defined in [RFC5226].\n\
    \   A new IPsec Security Association Attribute [ISAKMP-REG] defining the\n   preservation\
    \ of IP addresses has been registered.  The attribute\n   class is called \"Address\
    \ Preservation\", and it is a Basic type.  The\n   following rules apply to define\
    \ the values of the attribute:\n              Name                      Value\n\
    \              ----                      -----\n              Reserved       \
    \           0\n              None                      1\n              Source-Only\
    \               2\n              Destination-Only          3\n              Source-and-Destination\
    \    4\n              Unassigned               5-61439\n              Private\
    \ Use          61440-65535\n   The registration procedure is Standards Action.\
    \  The terms Standards\n   Action and Private Use are to be applied as defined\
    \ in [RFC5226].\n   A new IPsec Security Association Attribute [ISAKMP-REG] defining\
    \ the\n   SA direction has been created.  The attribute class is called \"SA\n\
    \   Direction\", and it is a Basic type.  The following rules apply to\n   define\
    \ the values of the attribute:\n              Name                      Value\n\
    \              ----                      -----\n              Reserved       \
    \           0\n              Sender-Only               1\n              Receiver-Only\
    \             2\n              Symmetric                 3\n              Unassigned\
    \               4-61439\n              Private Use          61440-65535\n   The\
    \ registration procedure is Standards Action. terms Standards\n   Action and Private\
    \ Use are to be applied as defined in [RFC5226].\n   When the SID \"Key Download\
    \ Type\" (described in the previous section)\n   has a set of attributes, the\
    \ attributes must follow the format\n   defined in ISAKMP (Section 3.3 of [RFC2408]).\
    \  In the table,\n   attributes defined as TV are marked as Basic (B); attributes\
    \ defined\n   as TLV are marked as Variable (V).\n                SID Class  \
    \               Value      Type\n                ---------                 -----\
    \      ----\n                RESERVED                     0\n                NUMBER_OF_SID_BITS\
    \           1        B\n                SID_VALUE                    2       \
    \ V\n                Unassigned                 3-128\n                Private\
    \ Use              129-255\n                Unassigned               256-32767\n\
    \   The registration procedure is Standards Action. terms Standards\n   Action\
    \ and Private Use are to be applied as defined in [RFC5226].\n"
- title: 8.3.  Cleanup of Existing Registries
  contents:
  - "8.3.  Cleanup of Existing Registries\n   Several existing GDOI Payloads registries\
    \ do not use the terms in RFC\n   5226 and/or do not describe the entire range\
    \ of possible values.  The\n   following sections correct these registries.  The\
    \ terms Standards\n   Action, Unassigned, and Private Use are to be applied as\
    \ defined in\n   [RFC5226].\n"
- title: 8.3.1.  Pop Algorithm
  contents:
  - "8.3.1.  Pop Algorithm\n   The registration procedure is Standards Action.  Values\
    \ 4-27 are\n   designated Unassigned.  Values 256-32767 have been added and are\n\
    \   designated Unassigned.\n"
- title: 8.3.2.  KEK Attributes
  contents:
  - "8.3.2.  KEK Attributes\n   The registration procedure is Standards Action.  Values\
    \ 9-127 have\n   been added and are designated Unassigned.  Values 128-255 have\
    \ been\n   added and are designated Private Use.  Values 256-32767 have been\n\
    \   added and are designated Unassigned.\n"
- title: 8.3.3.  KEK_MANAGEMENT_ALGORITHM
  contents:
  - "8.3.3.  KEK_MANAGEMENT_ALGORITHM\n   The registration procedure is Standards\
    \ Action.  Values 2-127 are\n   designated Unassigned.  Values 128-255 have been\
    \ added and designated\n   Private Use.  Values 256-65535 have been added and\
    \ are designated\n   Unassigned.\n"
- title: 8.3.4.  KEK_ALGORITHM
  contents:
  - "8.3.4.  KEK_ALGORITHM\n   The registration procedure is Standards Action.  Values\
    \ 4-127 are\n   designated Unassigned.  Values 256-65535 have been added and are\n\
    \   designated Unassigned.\n"
- title: 8.3.5.  SIG_HASH_ALGORITHM
  contents:
  - "8.3.5.  SIG_HASH_ALGORITHM\n   The registration procedure is Standards Action.\
    \  Values 6-127 are\n   designated Unassigned.  Values 256-65535 have been added\
    \ and are\n   designated Unassigned.\n"
- title: 8.3.6.  SIG_ALGORITHM
  contents:
  - "8.3.6.  SIG_ALGORITHM\n   The registration procedure is Standards Action.  Values\
    \ 7-127 are\n   designated Unassigned.  Values 256-65535 have been added and are\n\
    \   designated Unassigned.\n"
- title: 8.3.7.  SA TEK Payload Values
  contents:
  - "8.3.7.  SA TEK Payload Values\n   The registration procedure is Standards Action.\
    \  Values 3-127 are\n   designated Unassigned.\n"
- title: 8.3.8.  Key Download Types
  contents:
  - "8.3.8.  Key Download Types\n   The registration procedure is Standards Action.\
    \  Values 5-127 are\n   designated Unassigned.\n"
- title: 8.3.9.  TEK Download Type
  contents:
  - "8.3.9.  TEK Download Type\n   The registration procedure is Standards Action.\
    \  Values 4-127 have\n   been added and are designated Unassigned.  Values 128-255\
    \ have been\n   added and are designated Private Use.  Values 256-32767 have been\n\
    \   added and are designated Unassigned.\n"
- title: 8.3.10.  KEK Download Type
  contents:
  - "8.3.10.  KEK Download Type\n   The registration procedure is Standards Action.\
    \  Values 3-127 are\n   designated Unassigned.  Values 128-255 have been added\
    \ and are\n   designated Private Use.  Values 256-32767 have been added and are\n\
    \   designated Unassigned.\n"
- title: 8.3.11.  LKH Download Type
  contents:
  - "8.3.11.  LKH Download Type\n   The registration procedure is Standards Action.\
    \  Values 4-127 are\n   designated Unassigned.  Values 256-32767 have been added\
    \ and are\n   designated Unassigned.\n"
- title: 9.  Acknowledgements
  contents:
  - "9.  Acknowledgements\n   This memo replaces RFC 3547, and the authors wish to\
    \ thank Mark\n   Baugher and Hugh Harney for their extensive contributions that\
    \ led to\n   this newer specification of GDOI.\n   The authors are grateful to\
    \ Catherine Meadows for her careful review\n   and suggestions for mitigating\
    \ the man-in-the-middle attack she had\n   previously identified.  Yoav Nir, Vincent\
    \ Roca, Sean Turner, and\n   Elwyn Davies provided many useful technical and editorial\
    \ comments\n   and suggestions for improvement.\n"
- title: 10.  References
  contents:
  - '10.  References

    '
- title: 10.1.  Normative References
  contents:
  - "10.1.  Normative References\n   [RFC2119]    Bradner, S., \"Key words for use\
    \ in RFCs to Indicate\n                Requirement Levels\", BCP 14, RFC 2119,\
    \ March 1997.\n   [RFC2403]    Madson, C. and R. Glenn, \"The Use of HMAC-MD5-96\
    \ within\n                ESP and AH\", RFC 2403, November 1998.\n   [RFC2404]\
    \    Madson, C. and R. Glenn, \"The Use of HMAC-SHA-1-96\n                within\
    \ ESP and AH\", RFC 2404, November 1998.\n   [RFC2407]    Piper, D., \"The Internet\
    \ IP Security Domain of\n                Interpretation for ISAKMP\", RFC 2407,\
    \ November 1998.\n   [RFC2408]    Maughan, D., Schneider, M., and M. Schertler,\
    \ \"Internet\n                Security Association and Key Management Protocol\n\
    \                (ISAKMP)\", RFC 2408, November 1998.\n   [RFC2409]    Harkins,\
    \ D. and D. Carrel, \"The Internet Key Exchange\n                (IKE)\", RFC\
    \ 2409, November 1998.\n   [RFC2627]    Wallner, D., Harder, E., and R. Agee,\
    \ \"Key Management\n                for Multicast: Issues and Architectures\"\
    , RFC 2627,\n                June 1999.\n   [RFC3447]    Jonsson, J. and B. Kaliski,\
    \ \"Public-Key Cryptography\n                Standards (PKCS) #1: RSA Cryptography\
    \ Specifications\n                Version 2.1\", RFC 3447, February 2003.\n  \
    \ [RFC4302]    Kent, S., \"IP Authentication Header\", RFC 4302,\n           \
    \     December 2005.\n   [RFC4303]    Kent, S., \"IP Encapsulating Security Payload\
    \ (ESP)\",\n                RFC 4303, December 2005.\n   [RFC4754]    Fu, D. and\
    \ J. Solinas, \"IKE and IKEv2 Authentication\n                Using the Elliptic\
    \ Curve Digital Signature Algorithm\n                (ECDSA)\", RFC 4754, January\
    \ 2007.\n   [RFC4868]    Kelly, S. and S. Frankel, \"Using HMAC-SHA-256, HMAC-SHA-\n\
    \                384, and HMAC-SHA-512 with IPsec\", RFC 4868, May 2007.\n   [RFC5374]\
    \    Weis, B., Gross, G., and D. Ignjatic, \"Multicast\n                Extensions\
    \ to the Security Architecture for the Internet\n                Protocol\", RFC\
    \ 5374, November 2008.\n   [RFC5903]    Fu, D. and J. Solinas, \"Elliptic Curve\
    \ Groups modulo a\n                Prime (ECP Groups) for IKE and IKEv2\", RFC\
    \ 5903,\n                June 2010.\n   [RFC6054]    McGrew, D. and B. Weis, \"\
    Using Counter Modes with\n                Encapsulating Security Payload (ESP)\
    \ and Authentication\n                Header (AH) to Protect Group Traffic\",\
    \ RFC 6054,\n                November 2010.\n"
- title: 10.2.  Informative References
  contents:
  - "10.2.  Informative References\n   [FIPS180-3.2008]\n                National\
    \ Institute of Standards and Technology, \"Secure\n                Hash Standard\"\
    , FIPS PUB 180-3, October 2008, <http://\n                csrc.nist.gov/publications/fips/fips180-3/\n\
    \                fips180-3_final.pdf>.\n   [FIPS186-3]  \"Digital Signature Standard\
    \ (DSS)\", United States of\n                America, National Institute of Science\
    \ and\n                Technology, Federal Information Processing Standard\n \
    \               (FIPS) 186-2, June 2009.\n   [FIPS197]    \"Advanced Encryption\
    \ Standard (AES)\", United States of\n                America, National Institute\
    \ of Science and\n                Technology, Federal Information Processing Standard\n\
    \                (FIPS) 197, November 2001.\n   [FIPS46-3]   \"Data Encryption\
    \ Standard (DES)\", United States of\n                America, National Institute\
    \ of Science and\n                Technology, Federal Information Processing Standard\n\
    \                (FIPS) 46-3, October 1999.\n   [FIPS81]     \"DES Modes of Operation\"\
    , United States of America,\n                National Institute of Science and\
    \ Technology, Federal\n                Information Processing Standard (FIPS)\
    \ 81,\n                December 1980.\n   [GDOI-REG]   Internet Assigned Numbers\
    \ Authority, \"Group Domain of\n                Interpretation (GDOI) Payload\
    \ Type Values\",\n                IANA Registry, December 2004,\n            \
    \    <http://www.iana.org/assignments/gdoi-payloads>.\n   [HD03]       Hardjono,\
    \ T. and L. Dondeti, \"Multicast and Group\n                Security\", Artech\
    \ House Computer Security Series, ISBN\n                1-58053-342-6, 2003.\n\
    \   [ISAKMP-REG] \"'Magic Numbers' for ISAKMP Protocol\",\n                <http://www.iana.org/assignments/isakmp-registry>.\n\
    \   [MP04]       Meadows, C. and D. Pavlovic, \"Deriving, Attacking, and\n   \
    \             Defending the GDOI Protocol\", European Symposium on\n         \
    \       Research in Computer Security (ESORICS) 2004, pp. 53-72,\n           \
    \     September 2004.\n   [NNL]        Naor, D., Noal, M., and J. Lotspiech, \"\
    Revocation and\n                Tracing Schemes for Stateless Receivers\", Advances\
    \ in\n                Cryptology, Crypto '01, Springer-Verlag LNCS 2139, 2001,\n\
    \                pp. 41-62, 2001,\n                <http://www.iacr.org/archive/crypto2001/21390040.pdf>.\n\
    \   [OFT]        Sherman, A. and D. McGrew, \"Key Establishment in Large\n   \
    \             Dynamic Groups Using One-Way Function Trees\", IEEE\n          \
    \      Transactions on Software Engineering, Vol. 29, Issue 5,\n             \
    \   pp. 444-458, May 2003,\n                <http://ieeexplore.ieee.org/search/\n\
    \                freesrchabstract.jsp?tp=&arnumber=1199073>.\n   [PK01]      \
    \ Perlman, R. and C. Kaufman, \"Analysis of the IPsec Key\n                Exchange\
    \ Standard\", Enabling Technologies:\n                Infrastructure for Collaborative\
    \ Enterprises, WET ICE\n                2001, Proceedings. Tenth IEEE International\
    \ Workshops on\n                IEEE Transactions on Software Engineering, pp.\
    \ 150-156,\n                June 2001, <http://ieeexplore.ieee.org/search/\n \
    \               freesrchabstract.jsp?tp=&arnumber=953405>.\n   [PROT-REG]   \"\
    Assigned Internet Protocol Numbers\",\n                <http://www.iana.org/assignments/protocol-numbers/>.\n\
    \   [RFC3686]    Housley, R., \"Using Advanced Encryption Standard (AES)\n   \
    \             Counter Mode With IPsec Encapsulating Security Payload\n       \
    \         (ESP)\", RFC 3686, January 2004.\n   [RFC3740]    Hardjono, T. and B.\
    \ Weis, \"The Multicast Group Security\n                Architecture\", RFC 3740,\
    \ March 2004.\n   [RFC3947]    Kivinen, T., Swander, B., Huttunen, A., and V.\
    \ Volpe,\n                \"Negotiation of NAT-Traversal in the IKE\", RFC 3947,\n\
    \                January 2005.\n   [RFC4046]    Baugher, M., Canetti, R., Dondeti,\
    \ L., and F. Lindholm,\n                \"Multicast Security (MSEC) Group Key\
    \ Management\n                Architecture\", RFC 4046, April 2005.\n   [RFC4082]\
    \    Perrig, A., Song, D., Canetti, R., Tygar, J., and B.\n                Briscoe,\
    \ \"Timed Efficient Stream Loss-Tolerant\n                Authentication (TESLA):\
    \ Multicast Source Authentication\n                Transform Introduction\", RFC\
    \ 4082, June 2005.\n   [RFC4106]    Viega, J. and D. McGrew, \"The Use of Galois/Counter\
    \ Mode\n                (GCM) in IPsec Encapsulating Security Payload (ESP)\"\
    ,\n                RFC 4106, June 2005.\n   [RFC4301]    Kent, S. and K. Seo,\
    \ \"Security Architecture for the\n                Internet Protocol\", RFC 4301,\
    \ December 2005.\n   [RFC4306]    Kaufman, C., \"Internet Key Exchange (IKEv2)\
    \ Protocol\",\n                RFC 4306, December 2005.\n   [RFC4309]    Housley,\
    \ R., \"Using Advanced Encryption Standard (AES)\n                CCM Mode with\
    \ IPsec Encapsulating Security Payload\n                (ESP)\", RFC 4309, December\
    \ 2005.\n   [RFC4359]    Weis, B., \"The Use of RSA/SHA-1 Signatures within\n\
    \                Encapsulating Security Payload (ESP) and Authentication\n   \
    \             Header (AH)\", RFC 4359, January 2006.\n   [RFC4543]    McGrew,\
    \ D. and J. Viega, \"The Use of Galois Message\n                Authentication\
    \ Code (GMAC) in IPsec ESP and AH\",\n                RFC 4543, May 2006.\n  \
    \ [RFC5226]    Narten, T. and H. Alvestrand, \"Guidelines for Writing an\n   \
    \             IANA Considerations Section in RFCs\", BCP 26, RFC 5226,\n     \
    \           May 2008.\n   [RFC5905]    Mills, D., Martin, J., Burbank, J., and\
    \ W. Kasch,\n                \"Network Time Protocol Version 4: Protocol and\n\
    \                Algorithms Specification\", RFC 5905, June 2010.\n   [RFC5996]\
    \    Kaufman, C., Hoffman, P., Nir, Y., and P. Eronen,\n                \"Internet\
    \ Key Exchange Protocol Version 2 (IKEv2)\",\n                RFC 5996, September\
    \ 2010.\n   [SP.800-131] Barker, E. and A. Roginsky, \"Recommendation for the\n\
    \                Transitioning of Cryptographic Algorithms and Key\n         \
    \       Lengths\", United States of America, National Institute\n            \
    \    of Science and Technology, DRAFT NIST Special\n                Publication\
    \ 800-131, June 2010.\n   [SP.800-38A] Dworkin, M., \"Recommendation for Block\
    \ Cipher Modes of\n                Operation\", United States of America, National\
    \ Institute\n                of Science and Technology, NIST Special Publication\n\
    \                800-38A 2001 Edition, December 2001.\n"
- title: Appendix A.  GDOI Applications
  contents:
  - "Appendix A.  GDOI Applications\n   GDOI can be used to distribute keys for several\
    \ secure multicast\n   applications, where different applications have different\
    \ key\n   management requirements.  This section outlines two examples of ways\n\
    \   that GDOI can be used.  Other examples can be found in Section 10 of\n   [HD03].\n\
    \   A simple application is secure delivery of periodic multicast content\n  \
    \ over an organization's IP network, perhaps a multicast video\n   broadcast.\
    \  Assuming the content delivery time frame is bounded and\n   the group membership\
    \ is not expected to change over time, there is no\n   need for group policy to\
    \ include a GROUPKEY-PUSH exchange, and there\n   is no need for the GCKS to distribute\
    \ a Rekey SA.  Thus, the GDOI\n   GCKS may only need to distribute a single set\
    \ of Data-Security SAs to\n   protect the time-bounded broadcast.\n   In contrast,\
    \ a persistent IP multicast application (e.g., stock-\n   ticker delivery service)\
    \ may have many group members, where the group\n   membership changes over time.\
    \  A periodic change of Data-Security SAs\n   may be desirable, and the potential\
    \ for change in group membership\n   requires the use of a group management method\
    \ enabling de-\n   authorization of group members.  The GDOI GCKS will distribute\
    \ the\n   current set of Data-Security SAs and a Rekey SA to registering group\n\
    \   members.  It will then use regularly scheduled GROUPKEY-PUSH\n   exchanges\
    \ to deliver the new SAs for the group.  Additionally, the\n   group membership\
    \ on the GCKS may be frequently adjusted, which will\n   result in a GROUPKEY-PUSH\
    \ exchange that delivers new Rekey SAs\n   protected by a group management method.\
    \  Each GROUPKEY-PUSH may\n   include Data-Security SAs and/or a Rekey SA.\n \
    \  In each example, the relevant policy is defined on the GCKS and\n   relayed\
    \ to group members using the GROUPKEY-PULL and/or GROUPKEY-PUSH\n   protocols.\
    \  Specific policy choices configured by the GCKS\n   administrator depend on\
    \ each application.\n"
- title: Appendix B.  Significant Changes from RFC 3547
  contents:
  - "Appendix B.  Significant Changes from RFC 3547\n   The following significant\
    \ changes have been made from RFC 3547.\n   o  The Proof of Possession (POP) payload\
    \ was removed from the\n      GROUPKEY-PULL exchange.  It provided an alternate\
    \ form of\n      authorization, but its use was underspecified.  Furthermore,\n\
    \      Meadows and Pavlovic [MP04] discussed a man-in-the-middle attack\n    \
    \  on the POP authorization method, which would require changes to\n      its\
    \ semantics.  No known implementation of RFC 3547 supported the\n      POP payload,\
    \ so it was removed.  Removal of the POP payload\n      obviated the need for\
    \ the CERT payload in that exchange, and it\n      was removed as well.\n   o\
    \  The Key Exchange payloads (KE_I, KE_R) were removed from the\n      GROUPKEY-PULL\
    \ exchange.  However, the specification for computing\n      keying material for\
    \ the additional encryption function in RFC 3547\n      is faulty.  Furthermore,\
    \ it has been observed that because the\n      GDOI registration message uses\
    \ strong ciphers and provides\n      authenticated encryption, additional encryption\
    \ of the keying\n      material in a GDOI registration message provides negligible\
    \ value.\n      Therefore, the use of KE payloads is deprecated in this memo.\n\
    \   o  The Certificate Payload (CERT) was removed from the GROUPKEY-PUSH\n   \
    \   exchange.  The use of this payload was underspecified.  In all\n      known\
    \ use cases, the public key used to verify the GROUPKEY-PUSH\n      payload is\
    \ distributed directly from the key server as part of the\n      GROUPKEY-PULL\
    \ exchange.\n   o  Supported cryptographic algorithms were changed to meet current\n\
    \      guidance.  Implementations are required to support AES with\n      128-bit\
    \ keys to encrypt the rekey message and support SHA-256 for\n      cryptographic\
    \ signatures.  The use of DES is deprecated.\n   o  New protocol support for AH.\n\
    \   o  New protocol definitions were added to conform to the most recent\n   \
    \   \"Security Architecture for the Internet Protocol\" [RFC4301] and\n      the\
    \ \"Multicast Extensions to the Security Architecture for the\n      Internet\
    \ Protocol\" [RFC5374].  This includes addition of the GAP\n      payload.\n \
    \  o  New protocol definitions and semantics were added to support\n      \"Using\
    \ Counter Modes with Encapsulating Security Payload (ESP) and\n      Authentication\
    \ Header (AH) to Protect Group Traffic\" [RFC6054].\n   o  Specification to IANA\
    \ was added to better clarify the use of the\n      GDOI Payloads registry.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Brian Weis\n   Cisco Systems\n   170 W. Tasman Drive\n\
    \   San Jose, California  95134-1706\n   USA\n   Phone: +1-408-526-4796\n   EMail:\
    \ bew@cisco.com\n   Sheela Rowles\n   Cisco Systems\n   170 W. Tasman Drive\n\
    \   San Jose, California  95134-1706\n   USA\n   Phone: +1-408-527-7677\n   EMail:\
    \ sheela@cisco.com\n   Thomas Hardjono\n   MIT\n   77 Massachusetts Ave.\n   Cambridge,\
    \ Massachusetts  02139\n   USA\n   Phone: +1-781-729-9559\n   EMail: hardjono@mit.edu\n"
