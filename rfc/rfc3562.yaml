- title: __initial_text__
  contents:
  - "                   Key Management Considerations for\n                     the\
    \ TCP MD5 Signature Option\n"
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard of any kind.  Distribution of\
    \ this\n   memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2003).  All Rights Reserved.\n"
- title: Abstract
  contents:
  - "Abstract\n   The TCP MD5 Signature Option (RFC 2385), used predominantly by BGP,\n\
    \   has seen significant deployment in critical areas of Internet\n   infrastructure.\
    \  The security of this option relies heavily on the\n   quality of the keying\
    \ material used to compute the MD5 signature.\n   This document addresses the\
    \ security requirements of that keying\n   material.\n"
- title: 1. Introduction
  contents:
  - "1. Introduction\n   The security of various cryptographic functions lies both\
    \ in the\n   strength of the functions themselves against various forms of attack,\n\
    \   and also, perhaps more importantly, in the keying material that is\n   used\
    \ with them.  While theoretical attacks against the simple MAC\n   construction\
    \ used in RFC 2385 are possible [MDXMAC], the number of\n   text-MAC pairs required\
    \ to mount a forgery make it vastly more\n   probable that key-guessing is the\
    \ main threat against RFC 2385.\n   We show a quantitative approach to determining\
    \ the security\n   requirements of keys used with [RFC2385], which tends to suggest\
    \ the\n   following:\n      o  Key lengths SHOULD be between 12 and 24 bytes,\
    \ with larger keys\n         having effectively zero additional computational\
    \ costs when\n         compared to shorter keys.\n      o  Key sharing SHOULD\
    \ be limited so that keys aren't shared among\n         multiple BGP peering arrangements.\n\
    \      o  Keys SHOULD be changed at least every 90 days.\n"
- title: 1.1. Requirements Keywords
  contents:
  - "1.1. Requirements Keywords\n   The keywords \"MUST\", \"MUST NOT\", \"REQUIRED\"\
    , \"SHOULD\", \"SHOULD NOT\",\n   and \"MAY\" that appear in this document are\
    \ to be interpreted as\n   described in [RFC2119].\n"
- title: 2. Performance assumptions
  contents:
  - "2. Performance assumptions\n   The most recent performance study of MD5 that\
    \ this author was able to\n   find was undertaken by J. Touch at ISI.  The results\
    \ of this study\n   were documented in [RFC1810].  The assumption is that Moores\
    \ Law\n   applies to the data in the study, which at the time showed a\n   best-possible\
    \ *software* performance for MD5 of 87Mbits/second.\n   Projecting this number\
    \ forward to the ca 2002 timeframe of this\n   document, would suggest a number\
    \ near 2.1Gbits/second.\n   For purposes of simplification, we will assume that\
    \ our key-guessing\n   attacker will attack short packets only.  A likely minimal\
    \ packet is\n   an ACK, with no data.  This leads to having to compute the MD5\
    \ over\n   about 40 bytes of data, along with some reasonable maximum number of\n\
    \   key bytes.  MD5 effectively pads its input to 512-bit boundaries (64\n   bytes)\
    \ (it's actually more complicated than that, but this\n   simplifying assumption\
    \ will suffice for this analysis).  That means\n   that a minimum MD5 \"block\"\
    \ is 64 bytes, so for a ca 2002-scaled\n   software performance of 2.1Gbits/second,\
    \ we get a single-CPU software\n   MD5 performance near 4.1e6 single-block MD5\
    \ operations per second.\n   These numbers are, of course, assuming that any key-guessing\
    \ attacker\n   is resource-constrained to a single CPU.  In reality, distributed\n\
    \   cryptographic key-guessing attacks have been remarkably successful in\n  \
    \ the recent past.\n   It may be instructive to look at recent Internet worm infections,\
    \ to\n   determine what the probable maximum number of hosts that could be\n \
    \  surreptitiously marshalled for a key-guessing attack against MD5.\n   CAIDA\
    \ [CAIDA2001] has reported that the Code Red worm infected over\n   350,000 Internet\
    \ hosts in the first 14 hours of operation.  It seems\n   reasonable to assume\
    \ that a worm whose \"payload\" is a mechanism for\n   quietly performing a key-guessing\
    \ attack (perhaps using idle CPU\n   cycles of the infected host) could be at\
    \ least as effective as Code\n   Red was.  If one assumes that such a worm were\
    \ engineered to be\n   maximally stealthy, then steady-state infection could conceivably\n\
    \   reach 1 million hosts or more.  That changes our single-CPU\n   performance\
    \ from 4.1e6 operations per second, to somewhere between\n   1.0e11 and 1.0e13\
    \ MD5 operations per second.\n   In 1997, John Gilmore, and the Electronic Frontier\
    \ Foundation [EFF98]\n   developed a special-purpose machine, for an investment\
    \ of\n   approximately USD$250,000.  This machine was able to mount a\n   key-guessing\
    \ attack against DES, and compute a key in under 1 week.\n   Given Moores Law,\
    \ the same investment today would yield a machine\n   that could do the same work\
    \ approximately 8 times faster.  It seems\n   reasonable to assume that a similar\
    \ hardware approach could be\n   brought to bear on key-guessing attacks against\
    \ MD5, for similar key\n   lengths to DES, with somewhat-reduced performance (MD5\
    \ performance in\n   hardware may be as much as 2-3 times slower than DES).\n"
- title: 3. Key Lifetimes
  contents:
  - "3. Key Lifetimes\n   Operational experience with RFC 2385 would suggest that\
    \ keys used\n   with this option may have lifetimes on the order of months.  It\
    \ would\n   seem prudent, then, to choose a minimum key length that guarantees\n\
    \   that key-guessing runtimes are some small multiple of the key-change\n   interval\
    \ under best-case (for the attacker) practical attack\n   performance assumptions.\n\
    \   The keys used with RFC 2385 are intended only to provide\n   authentication,\
    \ and not confidentiality.  Consequently, the ability\n   of an attacker to determine\
    \ the key used for old traffic (traffic\n   emitted before a key-change event)\
    \ is not considered a threat.\n"
- title: 3. Key Entropy
  contents:
  - "3. Key Entropy\n   If we make an assumption that key-change intervals are 90\
    \ days, and\n   that the reasonable upper-bound for software-based attack performance\n\
    \   is 1.0e13 MD5 operations per second, then the minimum required key\n   entropy\
    \ is approximately 68 bits.  It is reasonable to round this\n   number up to at\
    \ least 80 bits, or 10 bytes.  If one assumes that\n   hardware-based attacks\
    \ are likely, using an EFF-like development\n   process, but with small-country-sized\
    \ budgets, then the minimum key\n   size steps up considerably to around 83 bits,\
    \ or 11 bytes.  Since 11\n   is such an ugly number, rounding up to 12 bytes is\
    \ reasonable.\n   In order to achieve this much entropy with an English-language\
    \ key,\n   one needs to remember that English has an entropy of approximately\n\
    \   1.3 bits per character.  Other human languages are similar.  This\n   means\
    \ that a key derived from a human language would need to be\n   approximately\
    \ 61 bytes long to produce 80 bits of entropy, and 73\n   bytes to produce 96\
    \ bits of entropy.\n   A more reasonable approach would be to use the techniques\
    \ described\n   in [RFC1750] to produce a high quality random key of 96 bits or\
    \ more.\n   It has previously been noted that an attacker will tend to choose\n\
    \   short packets to mount an attack on, since that increases the\n   key-guessing\
    \ performance for the attacker.  It has also been noted\n   that MD5 operations\
    \ are effectively computed in blocks of 64 bytes.\n   Given that the shortest\
    \ packet an attacker could reasonably use would\n   consist of 40 bytes of IP+TCP\
    \ header data, with no payload, the\n   remaining 24 bytes of the MD5 block can\
    \ reasonably be used for keying\n   material without added CPU cost for routers,\
    \ but substantially\n   increase the burden on the attacker.  While this practice\
    \ will tend\n   to increase the CPU burden for ordinary short BGP packets, since\
    \ it\n   will tend to cause the MD5 calculations to overflow into a second MD5\n\
    \   block, it isn't currently seen to be a significant extra burden to\n   BGP\
    \ routing machinery.\n   The most reasonable practice, then, would be to choose\
    \ the largest\n   possible key length smaller than 25 bytes that is operationally\n\
    \   reasonable, but at least 12 bytes.\n   Some implementations restrict the key\
    \ to a string of ASCII\n   characters, much like simple passwords, usually of\
    \ 8 bytes or less.\n   The very real risk is that such keys are quite vulnerable\
    \ to\n   key-guessing attacks, as outlined above.  The worst-case scenario\n \
    \  would occur when the ASCII key/password is a human-language word, or\n   pseudo-word.\
    \  Such keys/passwords contain, at most, 12 bits of\n   entropy.  In such cases,\
    \ dictionary driven attacks can yield results\n   in a fraction of the time that\
    \ a brute-force approach would take.\n   Such implementations SHOULD permit users\
    \ to enter a direct binary key\n   using the command line interface.  One possible\
    \ implementation would\n   be to establish a convention that an ASCII key beginning\
    \ with the\n   prefix \"0x\" be interpreted as a string of bytes represented in\n\
    \   hexadecimal.  Ideally, such byte strings will have been derived from\n   a\
    \ random source, as outlined in [RFC1750].  Implementations SHOULD\n   NOT limit\
    \ the length of the key unnecessarily, and SHOULD allow keys\n   of at least 16\
    \ bytes, to allow for the inevitable threat from Moores\n   Law.\n"
- title: 4. Key management practices
  contents:
  - "4. Key management practices\n   In current operational use, TCP MD5 Signature\
    \ keys [RFC2385] may be\n   shared among significant numbers of systems.  Conventional\
    \ wisdom in\n   cryptography and security is that such sharing increases the\n\
    \   probability of accidental or deliberate exposure of keys.  The more\n   frequently\
    \ such keying material is handled, the more likely it is to\n   be accidentally\
    \ exposed to unauthorized parties.\n   Since it is possible for anyone in possession\
    \ of a key to forge\n   packets as if they originated with any of the other keyholders,\
    \ the\n   most reasonable security practice would be to limit keys to use\n  \
    \ between exactly two parties.  Current implementations may make this\n   difficult,\
    \ but it is the most secure approach when key lifetimes are\n   long.  Reducing\
    \ key lifetimes can partially mitigate widescale\n   key-sharing, by limiting\
    \ the window of opportunity for a \"rogue\"\n   keyholder.\n   Keying material\
    \ is extremely sensitive data, and as such, should be\n   handled with reasonable\
    \ caution.  When keys are transported\n   electronically, including when configuring\
    \ network elements like\n   routers, secure handling techniques MUST be used.\
    \  Use of protocols\n   such as S/MIME [RFC2633], TLS [RFC2246], Secure Shell\
    \ (SSH) SHOULD be\n   used where appropriate, to protect the transport of the\
    \ key.\n"
- title: 5. Security Considerations
  contents:
  - "5. Security Considerations\n   This document is entirely about security requirements\
    \ for keying\n   material used with RFC 2385.\n   No new security exposures are\
    \ created by this document.\n"
- title: 6. Acknowledgements
  contents:
  - "6. Acknowledgements\n   Steve Bellovin, Ran Atkinson, and Randy Bush provided\
    \ valuable\n   commentary in the development of this document.\n"
- title: 7. References
  contents:
  - "7. References\n   [RFC1771]   Rekhter, Y. and T. Li, \"A Border Gateway Protocol\
    \ 4\n               (BGP-4)\", RFC 1771, March 1995.\n   [RFC1810]   Touch, J.,\
    \ \"Report on MD5 Performance\", RFC 1810, June\n               1995.\n   [RFC2385]\
    \   Heffernan, A., \"Protection of BGP Sessions via the TCP\n               MD5\
    \ Signature Option\", RFC 2385, August 1998.\n   [RFC2119]   Bradner, S., \"Key\
    \ words for use in RFCs to Indicate\n               Requirement Levels\", BCP\
    \ 14, RFC 2119, March 1997.\n   [MDXMAC]    Van Oorschot, P. and B. Preneel, \"\
    MDx-MAC and Building\n               Fast MACs from Hash Functions\".  Proceedings\
    \ Crypto '95,\n               Springer-Verlag LNCS, August 1995.\n   [RFC1750]\
    \   Eastlake, D., Crocker, S. and J. Schiller, \"Randomness\n               Recommendations\
    \ for Security\", RFC 1750, December 1994.\n   [EFF98]     \"Cracking DES: Secrets\
    \ of Encryption Research, Wiretap\n               Politics, and Chip Design\"\
    .  Electronic Frontier\n               Foundation, 1998.\n   [RFC2633]   Ramsdell,\
    \ B., \"S/MIME Version 3 Message Specification\",\n               RFC 2633, June\
    \ 1999.\n   [RFC2246]   Dierks, T. and C. Allen, \"The TLS Protocol Version 1.0\"\
    ,\n               RFC 2246, January 1999.\n   [CAIDA2001] \"CAIDA Analysis of\
    \ Code Red\"\n               http://www.caida.org/analysis/security/code-red/\n"
- title: 8. Author's Address
  contents:
  - "8. Author's Address\n   Marcus D. Leech\n   Nortel Networks\n   P.O. Box 3511,\
    \ Station C\n   Ottawa, ON\n   Canada, K1Y 4H7\n   Phone: +1 613-763-9145\n  \
    \ EMail: mleech@nortelnetworks.com\n"
- title: 9.  Full Copyright Statement
  contents:
  - "9.  Full Copyright Statement\n   Copyright (C) The Internet Society (2003). \
    \ All Rights Reserved.\n   This document and translations of it may be copied\
    \ and furnished to\n   others, and derivative works that comment on or otherwise\
    \ explain it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assignees.\n\
    \   This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
