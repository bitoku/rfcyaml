- title: __initial_text__
  contents:
  - '            Simple Authentication and Security Layer (SASL)

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (1997).  All Rights Reserved.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.    Abstract ..............................................\
    \    2\n   2.    Organization of this Document .........................    2\n\
    \   2.1.  How to Read This Document .............................    2\n   2.2.\
    \  Conventions Used in this Document .....................    2\n   2.3.  Examples\
    \ ..............................................    3\n   3.    Introduction and\
    \ Overview .............................    3\n   4.    Profiling requirements\
    \ ................................    4\n   5.    Specific issues .......................................\
    \    5\n   5.1.  Client sends data first ...............................    5\n\
    \   5.2.  Server returns success with additional data ...........    5\n   5.3.\
    \  Multiple authentications ..............................    5\n   6.    Registration\
    \ procedures ...............................    6\n   6.1.  Comments on SASL mechanism\
    \ registrations ..............    6\n   6.2.  Location of Registered SASL Mechanism\
    \ List ............    6\n   6.3.  Change Control ........................................\
    \    7\n   6.4.  Registration Template .................................    7\n\
    \   7.    Mechanism definitions .................................    8\n   7.1.\
    \  Kerberos version 4 mechanism ..........................    8\n   7.2.  GSSAPI\
    \ mechanism ......................................    9\n   7.2.1 Client side\
    \ of authentication protocol exchange .......    9\n   7.2.2 Server side of authentication\
    \ protocol exchange .......   10\n   7.2.3 Security layer ........................................\
    \   11\n   7.3.  S/Key mechanism .......................................   11\n\
    \   7.4.  External mechanism ....................................   12\n   8.\
    \    References ............................................   13\n   9.    Security\
    \ Considerations ...............................   13\n   10.   Author's Address\
    \ ......................................   14\n   Appendix A. Relation of SASL\
    \ to Transport Security ..........   15\n   Full Copyright Statement ....................................\
    \   16\n"
- title: 1.    Abstract
  contents:
  - "1.    Abstract\n   This document describes a method for adding authentication\
    \ support to\n   connection-based protocols.  To use this specification, a protocol\n\
    \   includes a command for identifying and authenticating a user to a\n   server\
    \ and for optionally negotiating protection of subsequent\n   protocol interactions.\
    \  If its use is negotiated, a security layer is\n   inserted between the protocol\
    \ and the connection.  This document\n   describes how a protocol specifies such\
    \ a command, defines several\n   mechanisms for use by the command, and defines\
    \ the protocol used for\n   carrying a negotiated security layer over the connection.\n"
- title: 2.    Organization of this Document
  contents:
  - '2.    Organization of this Document

    '
- title: 2.1.  How to Read This Document
  contents:
  - "2.1.  How to Read This Document\n   This document is written to serve two different\
    \ audiences, protocol\n   designers using this specification to support authentication\
    \ in their\n   protocol, and implementors of clients or servers for those protocols\n\
    \   using this specification.\n   The sections \"Introduction and Overview\",\
    \ \"Profiling requirements\",\n   and \"Security Considerations\" cover issues\
    \ that protocol designers\n   need to understand and address in profiling this\
    \ specification for\n   use in a specific protocol.\n   Implementors of a protocol\
    \ using this specification need the\n   protocol-specific profiling information\
    \ in addition to the\n   information in this document.\n"
- title: 2.2.  Conventions Used in this Document
  contents:
  - "2.2.  Conventions Used in this Document\n   In examples, \"C:\" and \"S:\" indicate\
    \ lines sent by the client and\n   server respectively.\n   The key words \"MUST\"\
    , \"MUST NOT\", \"SHOULD\", \"SHOULD NOT\", and \"MAY\"\n   in this document are\
    \ to be interpreted as defined in \"Key words for\n   use in RFCs to Indicate\
    \ Requirement Levels\" [RFC 2119].\n"
- title: 2.3.  Examples
  contents:
  - "2.3.  Examples\n   Examples in this document are for the IMAP profile [RFC 2060]\
    \ of this\n   specification.  The base64 encoding of challenges and responses,\
    \ as\n   well as the \"+ \" preceding the responses are part of the IMAP4\n  \
    \ profile, not part of the SASL specification itself.\n"
- title: 3.    Introduction and Overview
  contents:
  - "3.    Introduction and Overview\n   The Simple Authentication and Security Layer\
    \ (SASL) is a method for\n   adding authentication support to connection-based\
    \ protocols.  To use\n   this specification, a protocol includes a command for\
    \ identifying and\n   authenticating a user to a server and for optionally negotiating\
    \ a\n   security layer for subsequent protocol interactions.\n   The command has\
    \ a required argument identifying a SASL mechanism.\n   SASL mechanisms are named\
    \ by strings, from 1 to 20 characters in\n   length, consisting of upper-case\
    \ letters, digits, hyphens, and/or\n   underscores.  SASL mechanism names must\
    \ be registered with the IANA.\n   Procedures for registering new SASL mechanisms\
    \ are given in the\n   section \"Registration procedures\"\n   If a server supports\
    \ the requested mechanism, it initiates an\n   authentication protocol exchange.\
    \  This consists of a series of\n   server challenges and client responses that\
    \ are specific to the\n   requested mechanism.  The challenges and responses are\
    \ defined by the\n   mechanisms as binary tokens of arbitrary length.  The protocol's\n\
    \   profile then specifies how these binary tokens are then encoded for\n   transfer\
    \ over the connection.\n   After receiving the authentication command or any client\
    \ response, a\n   server may issue a challenge, indicate failure, or indicate\n\
    \   completion.  The protocol's profile specifies how the server\n   indicates\
    \ which of the above it is doing.\n   After receiving a challenge, a client may\
    \ issue a response or abort\n   the exchange.  The protocol's profile specifies\
    \ how the client\n   indicates which of the above it is doing.\n   During the\
    \ authentication protocol exchange, the mechanism performs\n   authentication,\
    \ transmits an authorization identity (frequently known\n   as a userid) from\
    \ the client to server, and negotiates the use of a\n   mechanism-specific security\
    \ layer.  If the use of a security layer is\n   agreed upon, then the mechanism\
    \ must also define or negotiate the\n   maximum cipher-text buffer size that each\
    \ side is able to receive.\n   The transmitted authorization identity may be different\
    \ than the\n   identity in the client's authentication credentials.  This permits\n\
    \   agents such as proxy servers to authenticate using their own\n   credentials,\
    \ yet request the access privileges of the identity for\n   which they are proxying.\
    \  With any mechanism, transmitting an\n   authorization identity of the empty\
    \ string directs the server to\n   derive an authorization identity from the client's\
    \ authentication\n   credentials.\n   If use of a security layer is negotiated,\
    \ it is applied to all\n   subsequent data sent over the connection.  The security\
    \ layer takes\n   effect immediately following the last response of the authentication\n\
    \   exchange for data sent by the client and the completion indication\n   for\
    \ data sent by the server.  Once the security layer is in effect,\n   the protocol\
    \ stream is processed by the security layer into buffers\n   of cipher-text. \
    \ Each buffer is transferred over the connection as a\n   stream of octets prepended\
    \ with a four octet field in network byte\n   order that represents the length\
    \ of the following buffer.  The length\n   of the cipher-text buffer must be no\
    \ larger than the maximum size\n   that was defined or negotiated by the other\
    \ side.\n"
- title: 4.    Profiling requirements
  contents:
  - "4.    Profiling requirements\n   In order to use this specification, a protocol\
    \ definition must supply\n   the following information:\n   1. A service name,\
    \ to be selected from the IANA registry of \"service\"\n      elements for the\
    \ GSSAPI host-based service name form [RFC 2078].\n   2. A definition of the command\
    \ to initiate the authentication\n      protocol exchange.  This command must\
    \ have as a parameter the\n      mechanism name being selected by the client.\n\
    \      The command SHOULD have an optional parameter giving an initial\n     \
    \ response.  This optional parameter allows the client to avoid a\n      round\
    \ trip when using a mechanism which is defined to have the\n      client send\
    \ data first.  When this initial response is sent by the\n      client and the\
    \ selected mechanism is defined to have the server\n      start with an initial\
    \ challenge, the command fails.  See section\n      5.1 of this document for further\
    \ information.\n   3. A definition of the method by which the authentication protocol\n\
    \      exchange is carried out, including how the challenges and\n      responses\
    \ are encoded, how the server indicates completion or\n      failure of the exchange,\
    \ how the client aborts an exchange, and\n      how the exchange method interacts\
    \ with any line length limits in\n      the protocol.\n   4. Identification of\
    \ the octet where any negotiated security layer\n      starts to take effect,\
    \ in both directions.\n   5. A specification of how the authorization identity\
    \ passed from the\n      client to the server is to be interpreted.\n"
- title: 5.    Specific issues
  contents:
  - '5.    Specific issues

    '
- title: 5.1.  Client sends data first
  contents:
  - "5.1.  Client sends data first\n   Some mechanisms specify that the first data\
    \ sent in the\n   authentication protocol exchange is from the client to the server.\n\
    \   If a protocol's profile permits the command which initiates an\n   authentication\
    \ protocol exchange to contain an initial client\n   response, this parameter\
    \ SHOULD be used with such mechanisms.\n   If the initial client response parameter\
    \ is not given, or if a\n   protocol's profile does not permit the command which\
    \ initiates an\n   authentication protocol exchange to contain an initial client\n\
    \   response, then the server issues a challenge with no data.  The\n   client's\
    \ response to this challenge is then used as the initial\n   client response.\
    \  (The server then proceeds to send the next\n   challenge, indicates completion,\
    \ or indicates failure.)\n"
- title: 5.2.  Server returns success with additional data
  contents:
  - "5.2.  Server returns success with additional data\n   Some mechanisms may specify\
    \ that server challenge data be sent to the\n   client along with an indication\
    \ of successful completion of the\n   exchange.  This data would, for example,\
    \ authenticate the server to\n   the client.\n   If a protocol's profile does\
    \ not permit this server challenge to be\n   returned with a success indication,\
    \ then the server issues the server\n   challenge without an indication of successful\
    \ completion.  The client\n   then responds with no data.  After receiving this\
    \ empty response, the\n   server then indicates successful completion.\n"
- title: 5.3.  Multiple authentications
  contents:
  - "5.3.  Multiple authentications\n   Unless otherwise stated by the protocol's\
    \ profile, only one\n   successful SASL negotiation may occur in a protocol session.\
    \  In this\n   case, once an authentication protocol exchange has successfully\n\
    \   completed, further attempts to initiate an authentication protocol\n   exchange\
    \ fail.\n   In the case that a profile explicitly permits multiple successful\n\
    \   SASL negotiations to occur, then in no case may multiple security\n   layers\
    \ be simultaneously in effect.  If a security layer is in effect\n   and a subsequent\
    \ SASL negotiation selects no security layer, the\n   original security layer\
    \ remains in effect.  If a security layer is in\n   effect and a subsequent SASL\
    \ negotiation selects a second security\n   layer, then the second security layer\
    \ replaces the first.\n"
- title: 6.    Registration procedures
  contents:
  - "6.    Registration procedures\n   Registration of a SASL mechanism is done by\
    \ filling in the template\n   in section 6.4 and sending it in to iana@isi.edu.\
    \  IANA has the right\n   to reject obviously bogus registrations, but will perform\
    \ no review\n   of clams made in the registration form.\n   There is no naming\
    \ convention for SASL mechanisms; any name that\n   conforms to the syntax of\
    \ a SASL mechanism name can be registered.\n   While the registration procedures\
    \ do not require it, authors of SASL\n   mechanisms are encouraged to seek community\
    \ review and comment\n   whenever that is feasible.  Authors may seek community\
    \ review by\n   posting a specification of their proposed mechanism as an internet-\n\
    \   draft.  SASL mechanisms intended for widespread use should be\n   standardized\
    \ through the normal IETF process, when appropriate.\n"
- title: 6.1.  Comments on SASL mechanism registrations
  contents:
  - "6.1.  Comments on SASL mechanism registrations\n   Comments on registered SASL\
    \ mechanisms should first be sent to the\n   \"owner\" of the mechanism.  Submitters\
    \ of comments may, after a\n   reasonable attempt to contact the owner, request\
    \ IANA to attach their\n   comment to the SASL mechanism registration itself.\
    \  If IANA approves\n   of this the comment will be made accessible in conjunction\
    \ with the\n   SASL mechanism registration itself.\n"
- title: 6.2.  Location of Registered SASL Mechanism List
  contents:
  - "6.2.  Location of Registered SASL Mechanism List\n   SASL mechanism registrations\
    \ will be posted in the anonymous FTP\n   directory \"ftp://ftp.isi.edu/in-notes/iana/assignments/sasl-\n\
    \   mechanisms/\" and all registered SASL mechanisms will be listed in the\n \
    \  periodically issued \"Assigned Numbers\" RFC [currently STD 2, RFC\n   1700].\
    \  The SASL mechanism description and other supporting material\n   may also be\
    \ published as an Informational RFC by sending it to \"rfc-\n   editor@isi.edu\"\
    \ (please follow the instructions to RFC authors [RFC\n   2223]).\n"
- title: 6.3.  Change Control
  contents:
  - "6.3.  Change Control\n   Once a SASL mechanism registration has been published\
    \ by IANA, the\n   author may request a change to its definition.  The change\
    \ request\n   follows the same procedure as the registration request.\n   The\
    \ owner of a SASL mechanism may pass responsibility for the SASL\n   mechanism\
    \ to another person or agency by informing IANA; this can be\n   done without\
    \ discussion or review.\n   The IESG may reassign responsibility for a SASL mechanism.\
    \ The most\n   common case of this will be to enable changes to be made to\n \
    \  mechanisms where the author of the registration has died, moved out\n   of\
    \ contact or is otherwise unable to make changes that are important\n   to the\
    \ community.\n   SASL mechanism registrations may not be deleted; mechanisms which\
    \ are\n   no longer believed appropriate for use can be declared OBSOLETE by a\n\
    \   change to their \"intended use\" field; such SASL mechanisms will be\n   clearly\
    \ marked in the lists published by IANA.\n   The IESG is considered to be the\
    \ owner of all SASL mechanisms which\n   are on the IETF standards track.\n"
- title: 6.4.  Registration Template
  contents:
  - "6.4.  Registration Template\n   To: iana@iana.org\n   Subject: Registration of\
    \ SASL mechanism X\n   SASL mechanism name:\n   Security considerations:\n   Published\
    \ specification (optional, recommended):\n   Person & email address to contact\
    \ for further information:\n   Intended usage:\n   (One of COMMON, LIMITED USE\
    \ or OBSOLETE)\n   Author/Change controller:\n   (Any other information that the\
    \ author deems interesting may be\n   added below this line.)\n"
- title: 7.    Mechanism definitions
  contents:
  - "7.    Mechanism definitions\n   The following mechanisms are hereby defined.\n"
- title: 7.1.  Kerberos version 4 mechanism
  contents:
  - "7.1.  Kerberos version 4 mechanism\n   The mechanism name associated with Kerberos\
    \ version 4 is\n   \"KERBEROS_V4\".\n   The first challenge consists of a random\
    \ 32-bit number in network\n   byte order.  The client responds with a Kerberos\
    \ ticket and an\n   authenticator for the principal \"service.hostname@realm\"\
    , where\n   \"service\" is the service name specified in the protocol's profile,\n\
    \   \"hostname\" is the first component of the host name of the server with\n\
    \   all letters in lower case, and where \"realm\" is the Kerberos realm of\n\
    \   the server.  The encrypted checksum field included within the\n   Kerberos\
    \ authenticator contains the server provided challenge in\n   network byte order.\n\
    \   Upon decrypting and verifying the ticket and authenticator, the\n   server\
    \ verifies that the contained checksum field equals the original\n   server provided\
    \ random 32-bit number.  Should the verification be\n   successful, the server\
    \ must add one to the checksum and construct 8\n   octets of data, with the first\
    \ four octets containing the incremented\n   checksum in network byte order, the\
    \ fifth octet containing a bit-mask\n   specifying the security layers supported\
    \ by the server, and the sixth\n   through eighth octets containing, in network\
    \ byte order, the maximum\n   cipher-text buffer size the server is able to receive.\
    \  The server\n   must encrypt using DES ECB mode the 8 octets of data in the\
    \ session\n   key and issue that encrypted data in a second challenge.  The client\n\
    \   considers the server authenticated if the first four octets of the\n   un-encrypted\
    \ data is equal to one plus the checksum it previously\n   sent.\n   The client\
    \ must construct data with the first four octets containing\n   the original server-issued\
    \ checksum in network byte order, the fifth\n   octet containing the bit-mask\
    \ specifying the selected security layer,\n   the sixth through eighth octets\
    \ containing in network byte order the\n   maximum cipher-text buffer size the\
    \ client is able to receive, and\n   the following octets containing the authorization\
    \ identity.  The\n   client must then append from one to eight zero-valued octets\
    \ so that\n   the length of the data is a multiple of eight octets. The client\
    \ must\n   then encrypt using DES PCBC mode the data with the session key and\n\
    \   respond with the encrypted data.  The server decrypts the data and\n   verifies\
    \ the contained checksum.  The server must verify that the\n   principal identified\
    \ in the Kerberos ticket is authorized to connect\n   as that authorization identity.\
    \  After this verification, the\n   authentication process is complete.\n   The\
    \ security layers and their corresponding bit-masks are as follows:\n      1 No\
    \ security layer\n      2 Integrity (krb_mk_safe) protection\n      4 Privacy\
    \ (krb_mk_priv) protection\n   Other bit-masks may be defined in the future; bits\
    \ which are not\n   understood must be negotiated off.\n   EXAMPLE: The following\
    \ are two Kerberos version 4 login scenarios to\n   the IMAP4 protocol (note that\
    \ the line breaks in the sample\n   authenticators are for editorial clarity and\
    \ are not in real\n   authenticators)\n     S: * OK IMAP4 Server\n     C: A001\
    \ AUTHENTICATE KERBEROS_V4\n     S: + AmFYig==\n     C: BAcAQU5EUkVXLkNNVS5FRFUAOCAsho84kLN3/IJmrMG+25a4DT\n\
    \        +nZImJjnTNHJUtxAA+o0KPKfHEcAFs9a3CL5Oebe/ydHJUwYFd\n        WwuQ1MWiy6IesKvjL5rL9WjXUb9MwT9bpObYLGOKi1Qh\n\
    \     S: + or//EoAADZI=\n     C: DiAF5A4gA+oOIALuBkAAmw==\n     S: A001 OK Kerberos\
    \ V4 authentication successful\n     S: * OK IMAP4 Server\n     C: A001 AUTHENTICATE\
    \ KERBEROS_V4\n     S: + gcfgCA==\n     C: BAcAQU5EUkVXLkNNVS5FRFUAOCAsho84kLN3/IJmrMG+25a4DT\n\
    \        +nZImJjnTNHJUtxAA+o0KPKfHEcAFs9a3CL5Oebe/ydHJUwYFd\n        WwuQ1MWiy6IesKvjL5rL9WjXUb9MwT9bpObYLGOKi1Qh\n\
    \     S: A001 NO Kerberos V4 authentication failed\n"
- title: 7.2.  GSSAPI mechanism
  contents:
  - "7.2.  GSSAPI mechanism\n   The mechanism name associated with all mechanisms\
    \ employing the\n   GSSAPI [RFC 2078] is \"GSSAPI\".\n"
- title: 7.2.1 Client side of authentication protocol exchange
  contents:
  - "7.2.1 Client side of authentication protocol exchange\n   The client calls GSS_Init_sec_context,\
    \ passing in 0 for\n   input_context_handle (initially) and a targ_name equal\
    \ to output_name\n   from GSS_Import_Name called with input_name_type of\n   GSS_C_NT_HOSTBASED_SERVICE\
    \ and input_name_string of\n   \"service@hostname\" where \"service\" is the service\
    \ name specified in\n   the protocol's profile, and \"hostname\" is the fully\
    \ qualified host\n   name of the server.  The client then responds with the resulting\n\
    \   output_token.  If GSS_Init_sec_context returns GSS_S_CONTINUE_NEEDED,\n  \
    \ then the client should expect the server to issue a token in a\n   subsequent\
    \ challenge.  The client must pass the token to another call\n   to GSS_Init_sec_context,\
    \ repeating the actions in this paragraph.\n   When GSS_Init_sec_context returns\
    \ GSS_S_COMPLETE, the client takes\n   the following actions: If the last call\
    \ to GSS_Init_sec_context\n   returned an output_token, then the client responds\
    \ with the\n   output_token, otherwise the client responds with no data.  The\
    \ client\n   should then expect the server to issue a token in a subsequent\n\
    \   challenge.  The client passes this token to GSS_Unwrap and interprets\n  \
    \ the first octet of resulting cleartext as a bit-mask specifying the\n   security\
    \ layers supported by the server and the second through fourth\n   octets as the\
    \ maximum size output_message to send to the server.  The\n   client then constructs\
    \ data, with the first octet containing the\n   bit-mask specifying the selected\
    \ security layer, the second through\n   fourth octets containing in network byte\
    \ order the maximum size\n   output_message the client is able to receive, and\
    \ the remaining\n   octets containing the authorization identity.  The client\
    \ passes the\n   data to GSS_Wrap with conf_flag set to FALSE, and responds with\
    \ the\n   generated output_message.  The client can then consider the server\n\
    \   authenticated.\n"
- title: 7.2.2 Server side of authentication protocol exchange
  contents:
  - "7.2.2 Server side of authentication protocol exchange\n   The server passes the\
    \ initial client response to\n   GSS_Accept_sec_context as input_token, setting\
    \ input_context_handle\n   to 0 (initially).  If GSS_Accept_sec_context returns\n\
    \   GSS_S_CONTINUE_NEEDED, the server returns the generated output_token\n   to\
    \ the client in challenge and passes the resulting response to\n   another call\
    \ to GSS_Accept_sec_context, repeating the actions in this\n   paragraph.\n  \
    \ When GSS_Accept_sec_context returns GSS_S_COMPLETE, the client takes\n   the\
    \ following actions: If the last call to GSS_Accept_sec_context\n   returned an\
    \ output_token, the server returns it to the client in a\n   challenge and expects\
    \ a reply from the client with no data.  Whether\n   or not an output_token was\
    \ returned (and after receipt of any\n   response from the client to such an output_token),\
    \ the server then\n   constructs 4 octets of data, with the first octet containing\
    \ a bit-\n   mask specifying the security layers supported by the server and the\n\
    \   second through fourth octets containing in network byte order the\n   maximum\
    \ size output_token the server is able to receive.  The server\n   must then pass\
    \ the plaintext to GSS_Wrap with conf_flag set to FALSE\n   and issue the generated\
    \ output_message to the client in a challenge.\n   The server must then pass the\
    \ resulting response to GSS_Unwrap and\n   interpret the first octet of resulting\
    \ cleartext as the bit-mask for\n   the selected security layer, the second through\
    \ fourth octets as the\n   maximum size output_message to send to the client,\
    \ and the remaining\n   octets as the authorization identity.  The server must\
    \ verify that\n   the src_name is authorized to authenticate as the authorization\n\
    \   identity.  After these verifications, the authentication process is\n   complete.\n"
- title: 7.2.3 Security layer
  contents:
  - "7.2.3 Security layer\n   The security layers and their corresponding bit-masks\
    \ are as follows:\n     1 No security layer\n     2 Integrity protection.\n  \
    \     Sender calls GSS_Wrap with conf_flag set to FALSE\n     4 Privacy protection.\n\
    \       Sender calls GSS_Wrap with conf_flag set to TRUE\n   Other bit-masks may\
    \ be defined in the future; bits which are not\n   understood must be negotiated\
    \ off.\n"
- title: 7.3.  S/Key mechanism
  contents:
  - "7.3.  S/Key mechanism\n   The mechanism name associated with S/Key [RFC 1760]\
    \ using the MD4\n   digest algorithm is \"SKEY\".\n   The client sends an initial\
    \ response with the authorization identity.\n   The server then issues a challenge\
    \ which contains the decimal\n   sequence number followed by a single space and\
    \ the seed string for\n   the indicated authorization identity.  The client responds\
    \ with the\n   one-time-password, as either a 64-bit value in network byte order\
    \ or\n   encoded in the \"six English words\" format.\n   The server must verify\
    \ the one-time-password.  After this\n   verification, the authentication process\
    \ is complete.\n   S/Key authentication does not provide for any security layers.\n\
    \   EXAMPLE: The following are two S/Key login scenarios in the IMAP4\n   protocol.\n\
    \     S: * OK IMAP4 Server\n     C: A001 AUTHENTICATE SKEY\n     S: +\n     C:\
    \ bW9yZ2Fu\n     S: + OTUgUWE1ODMwOA==\n     C: Rk9VUiBNQU5OIFNPT04gRklSIFZBUlkgTUFTSA==\n\
    \     S: A001 OK S/Key authentication successful\n     S: * OK IMAP4 Server\n\
    \     C: A001 AUTHENTICATE SKEY\n     S: +\n     C: c21pdGg=\n     S: + OTUgUWE1ODMwOA==\n\
    \     C: BsAY3g4gBNo=\n     S: A001 NO S/Key authentication failed\n   The following\
    \ is an S/Key login scenario in an IMAP4-like protocol\n   which has an optional\
    \ \"initial response\" argument to the AUTHENTICATE\n   command.\n     S: * OK\
    \ IMAP4-Like Server\n     C: A001 AUTHENTICATE SKEY bW9yZ2Fu\n     S: + OTUgUWE1ODMwOA==\n\
    \     C: Rk9VUiBNQU5OIFNPT04gRklSIFZBUlkgTUFTSA==\n     S: A001 OK S/Key authentication\
    \ successful\n"
- title: 7.4.  External mechanism
  contents:
  - "7.4.  External mechanism\n   The mechanism name associated with external authentication\
    \ is\n   \"EXTERNAL\".\n   The client sends an initial response with the authorization\
    \ identity.\n   The server uses information, external to SASL, to determine whether\n\
    \   the client is authorized to authenticate as the authorization\n   identity.\
    \  If the client is so authorized, the server indicates\n   successful completion\
    \ of the authentication exchange; otherwise the\n   server indicates failure.\n\
    \   The system providing this external information may be, for example,\n   IPsec\
    \ or TLS.\n   If the client sends the empty string as the authorization identity\n\
    \   (thus requesting the authorization identity be derived from the\n   client's\
    \ authentication credentials), the authorization identity is\n   to be derived\
    \ from authentication credentials which exist in the\n   system which is providing\
    \ the external authentication.\n"
- title: 8.    References
  contents:
  - "8.    References\n   [RFC 2060] Crispin, M., \"Internet Message Access Protocol\
    \ - Version\n              4rev1\", RFC 2060, December 1996.\n   [RFC 2078] Linn,\
    \ J., \"Generic Security Service Application Program\n              Interface,\
    \ Version 2\", RFC 2078, January 1997.\n   [RFC 2119] Bradner, S., \"Key words\
    \ for use in RFCs to Indicate\n              Requirement Levels\", RFC 2119, March\
    \ 1997.\n   [RFC 2223] Postel, J., and J. Reynolds, \"Instructions to RFC\n  \
    \            Authors\", RFC 2223, October 1997.\n   [RFC 1760] Haller, N., \"\
    The S/Key One-Time Password System\", RFC\n              1760, February 1995.\n\
    \   [RFC 1700] Reynolds, J., and J. Postel, \"Assigned Numbers\", STD 2,\n   \
    \           RFC 1700, October 1994.\n"
- title: 9.    Security Considerations
  contents:
  - "9.    Security Considerations\n   Security issues are discussed throughout this\
    \ memo.\n   The mechanisms that support integrity protection are designed such\n\
    \   that the negotiation of the security layer and authorization identity\n  \
    \ is integrity protected.  When the client selects a security layer\n   with at\
    \ least integrity protection, this protects against an active\n   attacker hijacking\
    \ the connection and modifying the authentication\n   exchange to negotiate a\
    \ plaintext connection.\n   When a server or client supports multiple authentication\
    \ mechanisms,\n   each of which has a different security strength, it is possible\
    \ for\n   an active attacker to cause a party to use the least secure mechanism\n\
    \   supported.  To protect against this sort of attack, a client or\n   server\
    \ which supports mechanisms of different strengths should have a\n   configurable\
    \ minimum strength that it will use.  It is not sufficient\n   for this minimum\
    \ strength check to only be on the server, since an\n   active attacker can change\
    \ which mechanisms the client sees as being\n   supported, causing the client\
    \ to send authentication credentials for\n   its weakest supported mechanism.\n\
    \   The client's selection of a SASL mechanism is done in the clear and\n   may\
    \ be modified by an active attacker.  It is important for any new\n   SASL mechanisms\
    \ to be designed such that an active attacker cannot\n   obtain an authentication\
    \ with weaker security properties by modifying\n   the SASL mechanism name and/or\
    \ the challenges and responses.\n   Any protocol interactions prior to authentication\
    \ are performed in\n   the clear and may be modified by an active attacker.  In\
    \ the case\n   where a client selects integrity protection, it is important that\
    \ any\n   security-sensitive protocol negotiations be performed after\n   authentication\
    \ is complete.  Protocols should be designed such that\n   negotiations performed\
    \ prior to authentication should be either\n   ignored or revalidated once authentication\
    \ is complete.\n"
- title: 10.   Author's Address
  contents:
  - "10.   Author's Address\n   John G. Myers\n   Netscape Communications\n   501\
    \ E. Middlefield Road\n   Mail Stop MV-029\n   Mountain View, CA 94043-4042\n\
    \   EMail: jgmyers@netscape.com\n"
- title: Appendix A. Relation of SASL to Transport Security
  contents:
  - "Appendix A. Relation of SASL to Transport Security\n   Questions have been raised\
    \ about the relationship between SASL and\n   various services (such as IPsec\
    \ and TLS) which provide a secured\n   connection.\n   Two of the key features\
    \ of SASL are:\n   1. The separation of the authorization identity from the identity\
    \ in\n      the client's credentials.  This permits agents such as proxy\n   \
    \   servers to authenticate using their own credentials, yet request\n      the\
    \ access privileges of the identity for which they are proxying.\n   2. Upon successful\
    \ completion of an authentication exchange, the\n      server knows the authorization\
    \ identity the client wishes to use.\n      This allows servers to move to a \"\
    user is authenticated\" state in\n      the protocol.\n   These features are extremely\
    \ important to some application protocols,\n   yet Transport Security services\
    \ do not always provide them.  To\n   define SASL mechanisms based on these services\
    \ would be a very messy\n   task, as the framing of these services would be redundant\
    \ with the\n   framing of SASL and some method of providing these important SASL\n\
    \   features would have to be devised.\n   Sometimes it is desired to enable within\
    \ an existing connection the\n   use of a security service which does not fit\
    \ the SASL model.  (TLS is\n   an example of such a service.)  This can be done\
    \ by adding a command,\n   for example \"STARTTLS\", to the protocol.  Such a\
    \ command is outside\n   the scope of SASL, and should be different from the command\
    \ which\n   starts a SASL authentication protocol exchange.\n   In certain situations,\
    \ it is reasonable to use SASL underneath one of\n   these Transport Security\
    \ services.  The transport service would\n   secure the connection, either service\
    \ would authenticate the client,\n   and SASL would negotiate the authorization\
    \ identity.  The SASL\n   negotiation would be what moves the protocol from \"\
    unauthenticated\"\n   to \"authenticated\" state.  The \"EXTERNAL\" SASL mechanism\
    \ is\n   explicitly intended to handle the case where the transport service\n\
    \   secures the connection and authenticates the client and SASL\n   negotiates\
    \ the authorization identity.\n   When using SASL underneath a sufficiently strong\
    \ Transport Security\n   service, a SASL security layer would most likely be redundant.\
    \  The\n   client and server would thus probably want to negotiate off the use\n\
    \   of a SASL security layer.\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (1997).  All\
    \ Rights Reserved.\n   This document and translations of it may be copied and\
    \ furnished to\n   others, and derivative works that comment on or otherwise explain\
    \ it\n   or assist in its implmentation may be prepared, copied, published\n \
    \  andand distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
