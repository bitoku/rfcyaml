- title: __initial_text__
  contents:
  - "                 Managing Client-Initiated Connections\n                in the\
    \ Session Initiation Protocol (SIP)\n"
- title: Abstract
  contents:
  - "Abstract\n   The Session Initiation Protocol (SIP) allows proxy servers to\n\
    \   initiate TCP connections or to send asynchronous UDP datagrams to\n   User\
    \ Agents in order to deliver requests.  However, in a large number\n   of real\
    \ deployments, many practical considerations, such as the\n   existence of firewalls\
    \ and Network Address Translators (NATs) or the\n   use of TLS with server-provided\
    \ certificates, prevent servers from\n   connecting to User Agents in this way.\
    \  This specification defines\n   behaviors for User Agents, registrars, and proxy\
    \ servers that allow\n   requests to be delivered on existing connections established\
    \ by the\n   User Agent.  It also defines keep-alive behaviors needed to keep\
    \ NAT\n   bindings open and specifies the usage of multiple connections from\n\
    \   the User Agent to its registrar.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2009 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the BSD License.\n   This document may\
    \ contain material from IETF Documents or IETF\n   Contributions published or\
    \ made publicly available before November\n   10, 2008.  The person(s) controlling\
    \ the copyright in some of this\n   material may not have granted the IETF Trust\
    \ the right to allow\n   modifications of such material outside the IETF Standards\
    \ Process.\n   Without obtaining an adequate license from the person(s) controlling\n\
    \   the copyright in such materials, this document may not be modified\n   outside\
    \ the IETF Standards Process, and derivative works of it may\n   not be created\
    \ outside the IETF Standards Process, except to format\n   it for publication\
    \ as an RFC or to translate it into languages other\n   than English.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction . . . . . . . . . . . . . . . . . . .\
    \ . . . . . .  4\n   2.  Conventions and Terminology  . . . . . . . . . . . .\
    \ . . . . .  5\n     2.1.  Definitions  . . . . . . . . . . . . . . . . . . .\
    \ . . . .  5\n   3.  Overview . . . . . . . . . . . . . . . . . . . . . . . .\
    \ . . .  6\n     3.1.  Summary of Mechanism . . . . . . . . . . . . . . . . .\
    \ . .  6\n     3.2.  Single Registrar and UA  . . . . . . . . . . . . . . . .\
    \ .  7\n     3.3.  Multiple Connections from a User Agent . . . . . . . . . .\
    \  8\n     3.4.  Edge Proxies . . . . . . . . . . . . . . . . . . . . . . . 10\n\
    \     3.5.  Keep-Alive Technique . . . . . . . . . . . . . . . . . . . 11\n  \
    \     3.5.1.  CRLF Keep-Alive Technique  . . . . . . . . . . . . . . 12\n    \
    \   3.5.2.  STUN Keep-Alive Technique  . . . . . . . . . . . . . . 12\n   4. \
    \ User Agent Procedures  . . . . . . . . . . . . . . . . . . . . 13\n     4.1.\
    \  Instance ID Creation . . . . . . . . . . . . . . . . . . . 13\n     4.2.  Registrations\
    \  . . . . . . . . . . . . . . . . . . . . . . 14\n       4.2.1.  Initial Registrations\
    \  . . . . . . . . . . . . . . . . 14\n       4.2.2.  Subsequent REGISTER Requests\
    \ . . . . . . . . . . . . . 16\n       4.2.3.  Third-Party Registrations  . .\
    \ . . . . . . . . . . . . 17\n     4.3.  Sending Non-REGISTER Requests  . . .\
    \ . . . . . . . . . . . 17\n     4.4.  Keep-Alives and Detecting Flow Failure\
    \ . . . . . . . . . . 18\n       4.4.1.  Keep-Alive with CRLF . . . . . . . .\
    \ . . . . . . . . . 19\n       4.4.2.  Keep-Alive with STUN . . . . . . . . .\
    \ . . . . . . . . 21\n     4.5.  Flow Recovery  . . . . . . . . . . . . . . .\
    \ . . . . . . . 21\n   5.  Edge Proxy Procedures  . . . . . . . . . . . . . .\
    \ . . . . . . 22\n     5.1.  Processing Register Requests . . . . . . . . . .\
    \ . . . . . 22\n     5.2.  Generating Flow Tokens . . . . . . . . . . . . . .\
    \ . . . . 23\n     5.3.  Forwarding Non-REGISTER Requests . . . . . . . . . .\
    \ . . . 23\n       5.3.1.  Processing Incoming Requests . . . . . . . . . . .\
    \ . . 24\n       5.3.2.  Processing Outgoing Requests . . . . . . . . . . . .\
    \ . 24\n     5.4.  Edge Proxy Keep-Alive Handling . . . . . . . . . . . . . .\
    \ 25\n   6.  Registrar Procedures . . . . . . . . . . . . . . . . . . . . . 25\n\
    \   7.  Authoritative Proxy Procedures: Forwarding Requests  . . . . . 27\n  \
    \ 8.  STUN Keep-Alive Processing . . . . . . . . . . . . . . . . . . 28\n    \
    \ 8.1.  Use with SigComp . . . . . . . . . . . . . . . . . . . . . 29\n   9. \
    \ Example Message Flow . . . . . . . . . . . . . . . . . . . . . 30\n     9.1.\
    \  Subscription to Configuration Package  . . . . . . . . . . 30\n     9.2.  Registration\
    \ . . . . . . . . . . . . . . . . . . . . . . . 32\n     9.3.  Incoming Call and\
    \ Proxy Crash  . . . . . . . . . . . . . . 34\n     9.4.  Re-Registration  . .\
    \ . . . . . . . . . . . . . . . . . . . 37\n     9.5.  Outgoing Call  . . . .\
    \ . . . . . . . . . . . . . . . . . . 38\n   10. Grammar  . . . . . . . . . .\
    \ . . . . . . . . . . . . . . . . . 40\n   11. IANA Considerations  . . . . .\
    \ . . . . . . . . . . . . . . . . 40\n     11.1. Flow-Timer Header Field  . .\
    \ . . . . . . . . . . . . . . . 40\n     11.2. \"reg-id\" Contact Header Field\
    \ Parameter  . . . . . . . . . 40\n     11.3. SIP/SIPS URI Parameters  . . . .\
    \ . . . . . . . . . . . . . 41\n     11.4. SIP Option Tag . . . . . . . . . .\
    \ . . . . . . . . . . . . 41\n     11.5. 430 (Flow Failed) Response Code  . .\
    \ . . . . . . . . . . . 41\n     11.6. 439 (First Hop Lacks Outbound Support)\
    \ Response Code . . . 42\n     11.7. Media Feature Tag  . . . . . . . . . . .\
    \ . . . . . . . . . 42\n   12. Security Considerations  . . . . . . . . . . .\
    \ . . . . . . . . 43\n   13. Operational Notes on Transports  . . . . . . . .\
    \ . . . . . . . 44\n   14. Requirements . . . . . . . . . . . . . . . . . . .\
    \ . . . . . . 44\n   15. Acknowledgments  . . . . . . . . . . . . . . . . . .\
    \ . . . . . 45\n   16. References . . . . . . . . . . . . . . . . . . . . . .\
    \ . . . . 45\n     16.1. Normative References . . . . . . . . . . . . . . . .\
    \ . . . 45\n     16.2. Informative References . . . . . . . . . . . . . . . .\
    \ . . 47\n   Appendix A.  Default Flow Registration Backoff Times . . . . . .\
    \ . 49\n   Appendix B.  ABNF  . . . . . . . . . . . . . . . . . . . . . . . .\
    \ 49\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   There are many environments for SIP [RFC3261] deployments\
    \ in which\n   the User Agent (UA) can form a connection to a registrar or proxy\
    \ but\n   in which connections in the reverse direction to the UA are not\n  \
    \ possible.  This can happen for several reasons, but the most likely\n   is a\
    \ NAT or a firewall in between the SIP UA and the proxy.  Many\n   such devices\
    \ will only allow outgoing connections.  This\n   specification allows a SIP User\
    \ Agent behind such a firewall or NAT\n   to receive inbound traffic associated\
    \ with registrations or dialogs\n   that it initiates.\n   Most IP phones and\
    \ personal computers get their network\n   configurations dynamically via a protocol\
    \ such as the Dynamic Host\n   Configuration Protocol (DHCP) [RFC2131].  These\
    \ systems typically do\n   not have a useful name in the Domain Name System (DNS)\
    \ [RFC1035], and\n   they almost never have a long-term, stable DNS name that\
    \ is\n   appropriate for use in the subjectAltName of a certificate, as\n   required\
    \ by [RFC3261].  However, these systems can still act as a\n   Transport Layer\
    \ Security (TLS) [RFC5246] client and form outbound\n   connections to a proxy\
    \ or registrar that authenticates with a server\n   certificate.  The server can\
    \ authenticate the UA using a shared\n   secret in a digest challenge (as defined\
    \ in Section 22 of RFC 3261)\n   over that TLS connection.  This specification\
    \ allows a SIP User Agent\n   who has to initiate the TLS connection to receive\
    \ inbound traffic\n   associated with registrations or dialogs that it initiates.\n\
    \   The key idea of this specification is that when a UA sends a REGISTER\n  \
    \ request or a dialog-forming request, the proxy can later use this\n   same network\
    \ \"flow\" -- whether this is a bidirectional stream of UDP\n   datagrams, a TCP\
    \ connection, or an analogous concept in another\n   transport protocol -- to\
    \ forward any incoming requests that need to\n   go to this UA in the context\
    \ of the registration or dialog.\n   For a UA to receive incoming requests, the\
    \ UA has to connect to a\n   server.  Since the server can't connect to the UA,\
    \ the UA has to make\n   sure that a flow is always active.  This requires the\
    \ UA to detect\n   when a flow fails.  Since such detection takes time and leaves\
    \ a\n   window of opportunity for missed incoming requests, this mechanism\n \
    \  allows the UA to register over multiple flows at the same time.  This\n   specification\
    \ also defines two keep-alive schemes.  The keep-alive\n   mechanism is used to\
    \ keep NAT bindings fresh, and to allow the UA to\n   detect when a flow has failed.\n"
- title: 2.  Conventions and Terminology
  contents:
  - "2.  Conventions and Terminology\n   The key words \"MUST\", \"MUST NOT\", \"\
    REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\"\
    , \"MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described\
    \ in [RFC2119].\n"
- title: 2.1.  Definitions
  contents:
  - "2.1.  Definitions\n   Authoritative Proxy:  A proxy that handles non-REGISTER\
    \ requests for\n      a specific Address-of-Record (AOR), performs the logical\
    \ Location\n      Server lookup described in [RFC3261], and forwards those requests\n\
    \      to specific Contact URIs.  (In [RFC3261], the role that is\n      authoritative\
    \ for REGISTER requests for a specific AOR is a\n      Registration Server.)\n\
    \   Edge Proxy:  An edge proxy is any proxy that is located topologically\n  \
    \    between the registering User Agent and the Authoritative Proxy.\n      The\
    \ \"first\" edge proxy refers to the first edge proxy encountered\n      when\
    \ a UA sends a request.\n   Flow:  A Flow is a transport-layer association between\
    \ two hosts that\n      is represented by the network address and port number\
    \ of both ends\n      and by the transport protocol.  For TCP, a flow is equivalent\
    \ to a\n      TCP connection.  For UDP a flow is a bidirectional stream of\n \
    \     datagrams between a single pair of IP addresses and ports of both\n    \
    \  peers.  With TCP, a flow often has a one-to-one correspondence\n      with\
    \ a single file descriptor in the operating system.\n   Flow Token:  An identifier\
    \ that uniquely identifies a flow which can\n      be included in a SIP URI (Uniform\
    \ Resource Identifier [RFC3986]).\n   reg-id:  This refers to the value of a new\
    \ header field parameter\n      value for the Contact header field.  When a UA\
    \ registers multiple\n      times, each for a different flow, each concurrent\
    \ registration\n      gets a unique reg-id value.\n   instance-id:  This specification\
    \ uses the word instance-id to refer\n      to the value of the \"sip.instance\"\
    \ media feature tag which appears\n      as a \"+sip.instance\" Contact header\
    \ field parameter.  This is a\n      Uniform Resource Name (URN) that uniquely\
    \ identifies this specific\n      UA instance.\n   \"ob\" Parameter:  The \"ob\"\
    \ parameter is a SIP URI parameter that has a\n      different meaning depending\
    \ on context.  In a Path header field\n      value, it is used by the first edge\
    \ proxy to indicate that a flow\n      token was added to the URI.  In a Contact\
    \ or Route header field\n      value, it indicates that the UA would like other\
    \ requests in the\n      same dialog to be routed over the same flow.\n   outbound-proxy-set:\
    \  A set of SIP URIs (Uniform Resource Identifiers)\n      that represents each\
    \ of the outbound proxies (often edge proxies)\n      with which the UA will attempt\
    \ to maintain a direct flow.  The\n      first URI in the set is often referred\
    \ to as the primary outbound\n      proxy and the second as the secondary outbound\
    \ proxy.  There is no\n      difference between any of the URIs in this set, nor\
    \ does the\n      primary/secondary terminology imply that one is preferred over\
    \ the\n      other.\n"
- title: 3.  Overview
  contents:
  - "3.  Overview\n   The mechanisms defined in this document are useful in several\n\
    \   scenarios discussed below, including the simple co-located registrar\n   and\
    \ proxy, a User Agent desiring multiple connections to a resource\n   (for redundancy,\
    \ for example), and a system that uses edge proxies.\n   This entire section is\
    \ non-normative.\n"
- title: 3.1.  Summary of Mechanism
  contents:
  - "3.1.  Summary of Mechanism\n   Each UA has a unique instance-id that stays the\
    \ same for this UA even\n   if the UA reboots or is power cycled.  Each UA can\
    \ register multiple\n   times over different flows for the same SIP Address of\
    \ Record (AOR)\n   to achieve high reliability.  Each registration includes the\n\
    \   instance-id for the UA and a reg-id label that is different for each\n   flow.\
    \  The registrar can use the instance-id to recognize that two\n   different registrations\
    \ both correspond to the same UA.  The\n   registrar can use the reg-id label\
    \ to recognize whether a UA is\n   creating a new flow or refreshing or replacing\
    \ an old one, possibly\n   after a reboot or a network failure.\n   When a proxy\
    \ goes to route a message to a UA for which it has a\n   binding, it can use any\
    \ one of the flows on which a successful\n   registration has been completed.\
    \  A failure to deliver a request on a\n   particular flow can be tried again\
    \ on an alternate flow.  Proxies can\n   determine which flows go to the same\
    \ UA by comparing the instance-id.\n   Proxies can tell that a flow replaces a\
    \ previously abandoned flow by\n   looking at the reg-id.\n   When sending a dialog-forming\
    \ request, a UA can also ask its first\n   edge proxy to route subsequent requests\
    \ in that dialog over the same\n   flow.  This is necessary whether the UA has\
    \ registered or not.\n   UAs use a simple periodic message as a keep-alive mechanism\
    \ to keep\n   their flow to the proxy or registrar alive.  For connection-oriented\n\
    \   transports such as TCP this is based on carriage-return and line-feed\n  \
    \ sequences (CRLF), while for transports that are not connection\n   oriented,\
    \ this is accomplished by using a SIP-specific usage profile\n   of STUN (Session\
    \ Traversal Utilities for NAT) [RFC5389].\n"
- title: 3.2.  Single Registrar and UA
  contents:
  - "3.2.  Single Registrar and UA\n   In the topology shown below, a single server\
    \ is acting as both a\n   registrar and proxy.\n      +-----------+\n      | Registrar\
    \ |\n      | Proxy     |\n      +-----+-----+\n            |\n            |\n\
    \       +----+--+\n       | User  |\n       | Agent |\n       +-------+\n   User\
    \ Agents that form only a single flow continue to register\n   normally but include\
    \ the instance-id as described in Section 4.1.\n   The UA also includes a \"reg-id\"\
    \ Contact header field parameter that\n   is used to allow the registrar to detect\
    \ and avoid keeping invalid\n   contacts when a UA reboots or reconnects after\
    \ its old connection has\n   failed for some reason.\n   For clarity, here is\
    \ an example.  Bob's UA creates a new TCP flow to\n   the registrar and sends\
    \ the following REGISTER request.\n   REGISTER sip:example.com SIP/2.0\n   Via:\
    \ SIP/2.0/TCP 192.0.2.2;branch=z9hG4bK-bad0ce-11-1036\n   Max-Forwards: 70\n \
    \  From: Bob <sip:bob@example.com>;tag=d879h76\n   To: Bob <sip:bob@example.com>\n\
    \   Call-ID: 8921348ju72je840.204\n   CSeq: 1 REGISTER\n   Supported: path, outbound\n\
    \   Contact: <sip:line1@192.0.2.2;transport=tcp>; reg-id=1;\n    ;+sip.instance=\"\
    <urn:uuid:00000000-0000-1000-8000-000A95A0E128>\"\n   Content-Length: 0\n   The\
    \ registrar challenges this registration to authenticate Bob.  When\n   the registrar\
    \ adds an entry for this contact under the AOR for Bob,\n   the registrar also\
    \ keeps track of the connection over which it\n   received this registration.\n\
    \   The registrar saves the instance-id\n   (\"urn:uuid:00000000-0000-1000-8000-000A95A0E128\"\
    ) and reg-id (\"1\")\n   along with the rest of the Contact header field.  If\
    \ the instance-id\n   and reg-id are the same as a previous registration for the\
    \ same AOR,\n   the registrar replaces the old Contact URI and flow information.\n\
    \   This allows a UA that has rebooted to replace its previous\n   registration\
    \ for each flow with minimal impact on overall system\n   load.\n   When Alice\
    \ sends a request to Bob, his authoritative proxy selects\n   the target set.\
    \  The proxy forwards the request to elements in the\n   target set based on the\
    \ proxy's policy.  The proxy looks at the\n   target set and uses the instance-id\
    \ to understand if two targets both\n   end up routing to the same UA.  When the\
    \ proxy goes to forward a\n   request to a given target, it looks and finds the\
    \ flows over which it\n   received the registration.  The proxy then forwards\
    \ the request over\n   an existing flow, instead of resolving the Contact URI\
    \ using the\n   procedures in [RFC3263] and trying to form a new flow to that\n\
    \   contact.\n   As described in the next section, if the proxy has multiple flows\n\
    \   that all go to this UA, the proxy can choose any one of the\n   registration\
    \ bindings for this AOR that has the same instance-id as\n   the selected UA.\n"
- title: 3.3.  Multiple Connections from a User Agent
  contents:
  - "3.3.  Multiple Connections from a User Agent\n   There are various ways to deploy\
    \ SIP to build a reliable and scalable\n   system.  This section discusses one\
    \ such design that is possible with\n   the mechanisms in this specification.\
    \  Other designs are also\n   possible.\n   In the example system below, the logical\
    \ outbound proxy/registrar for\n   the domain is running on two hosts that share\
    \ the appropriate state\n   and can both provide registrar and outbound proxy\
    \ functionality for\n   the domain.  The UA will form connections to two of the\
    \ physical\n   hosts that can perform the authoritative proxy/registrar function\
    \ for\n   the domain.  Reliability is achieved by having the UA form two TCP\n\
    \   connections to the domain.\n       +-------------------+\n       | Domain\
    \            |\n       | Logical Proxy/Reg |\n       |                   |\n \
    \      |+-----+     +-----+|\n       ||Host1|     |Host2||\n       |+-----+  \
    \   +-----+|\n       +---\\------------/--+\n            \\          /\n     \
    \        \\        /\n              \\      /\n               \\    /\n      \
    \        +------+\n              | User |\n              | Agent|\n          \
    \    +------+\n   The UA is configured with multiple outbound proxy registration\
    \ URIs.\n   These URIs are configured into the UA through whatever the normal\n\
    \   mechanism is to configure the proxy address and AOR in the UA.  If\n   the\
    \ AOR is alice@example.com, the outbound-proxy-set might look\n   something like\
    \ \"sip:primary.example.com\" and \"sip:\n   secondary.example.com\".  Note that\
    \ each URI in the outbound-proxy-set\n   could resolve to several different physical\
    \ hosts.  The\n   administrative domain that created these URIs should ensure\
    \ that the\n   two URIs resolve to separate hosts.  These URIs are handled according\n\
    \   to normal SIP processing rules, so mechanisms like DNS SRV [RFC2782]\n   can\
    \ be used to do load-balancing across a proxy farm.  The approach\n   in this\
    \ document does not prevent future extensions, such as the SIP\n   UA configuration\
    \ framework [CONFIG-FMWK], from adding other ways for\n   a User Agent to discover\
    \ its outbound-proxy-set.\n   The domain also needs to ensure that a request for\
    \ the UA sent to\n   Host1 or Host2 is then sent across the appropriate flow to\
    \ the UA.\n   The domain might choose to use the Path header approach (as described\n\
    \   in the next section) to store this internal routing information on\n   Host1\
    \ or Host2.\n   When a single server fails, all the UAs that have a flow through\
    \ it\n   will detect a flow failure and try to reconnect.  This can cause\n  \
    \ large loads on the server.  When large numbers of hosts reconnect\n   nearly\
    \ simultaneously, this is referred to as the avalanche restart\n   problem, and\
    \ is further discussed in Section 4.5.  The multiple flows\n   to many servers\
    \ help reduce the load caused by the avalanche restart.\n   If a UA has multiple\
    \ flows, and one of the servers fails, the UA\n   delays a recommended amount\
    \ of time before trying to form a new\n   connection to replace the flow to the\
    \ server that failed.  By\n   spreading out the time used for all the UAs to reconnect\
    \ to a server,\n   the load on the server farm is reduced.\n   Scalability is\
    \ achieved by using DNS SRV [RFC2782] to load-balance\n   the primary connection\
    \ across a set of machines that can service the\n   primary connection, and also\
    \ using DNS SRV to load-balance across a\n   separate set of machines that can\
    \ service the secondary connection.\n   The deployment here requires that DNS\
    \ is configured with one entry\n   that resolves to all the primary hosts and\
    \ another entry that\n   resolves to all the secondary hosts.  While this introduces\n\
    \   additional DNS configuration, the approach works and requires no\n   additional\
    \ SIP extensions to [RFC3263].\n   Another motivation for maintaining multiple\
    \ flows between the UA and\n   its registrar is related to multihomed UAs.  Such\
    \ UAs can benefit\n   from multiple connections from different interfaces to protect\n\
    \   against the failure of an individual access link.\n"
- title: 3.4.  Edge Proxies
  contents:
  - "3.4.  Edge Proxies\n   Some SIP deployments use edge proxies such that the UA\
    \ sends the\n   REGISTER to an edge proxy that then forwards the REGISTER to the\n\
    \   registrar.  There could be a NAT or firewall between the UA and the\n   edge\
    \ proxy.\n                +---------+\n                |Registrar|\n         \
    \       |Proxy    |\n                +---------+\n                 /      \\\n\
    \                /        \\\n               /          \\\n            +-----+\
    \     +-----+\n            |Edge1|     |Edge2|\n            +-----+     +-----+\n\
    \               \\           /\n                \\         /\n        ----------------------------NAT/FW\n\
    \                  \\     /\n                   \\   /\n                  +------+\n\
    \                  |User  |\n                  |Agent |\n                  +------+\n\
    \   The edge proxy includes a Path header [RFC3327] so that when the\n   proxy/registrar\
    \ later forwards a request to this UA, the request is\n   routed through the edge\
    \ proxy.\n   These systems can use effectively the same mechanism as described\
    \ in\n   the previous sections but need to use the Path header.  When the edge\n\
    \   proxy receives a registration, it needs to create an identifier value\n  \
    \ that is unique to this flow (and not a subsequent flow with the same\n   addresses)\
    \ and put this identifier in the Path header URI.  This\n   identifier has two\
    \ purposes.  First, it allows the edge proxy to map\n   future requests back to\
    \ the correct flow.  Second, because the\n   identifier will only be returned\
    \ if the user authenticates with the\n   registrar successfully, it allows the\
    \ edge proxy to indirectly check\n   the user's authentication information via\
    \ the registrar.  The\n   identifier is placed in the user portion of a loose\
    \ route in the Path\n   header.  If the registration succeeds, the edge proxy\
    \ needs to map\n   future requests (that are routed to the identifier value from\
    \ the\n   Path header) to the associated flow.\n   The term edge proxy is often\
    \ used to refer to deployments where the\n   edge proxy is in the same administrative\
    \ domain as the registrar.\n   However, in this specification we use the term\
    \ to refer to any proxy\n   between the UA and the registrar.  For example, the\
    \ edge proxy may be\n   inside an enterprise that requires its use, and the registrar\
    \ could\n   be from a service provider with no relationship to the enterprise.\n\
    \   Regardless of whether they are in the same administrative domain,\n   this\
    \ specification requires that registrars and edge proxies support\n   the Path\
    \ header mechanism in [RFC3327].\n"
- title: 3.5.  Keep-Alive Technique
  contents:
  - "3.5.  Keep-Alive Technique\n   This document describes two keep-alive mechanisms:\
    \ a CRLF keep-alive\n   and a STUN keep-alive.  Each of these mechanisms uses\
    \ a client-to-\n   server \"ping\" keep-alive and a corresponding server-to-client\
    \ \"pong\"\n   message.  This ping-pong sequence allows the client, and optionally\n\
    \   the server, to tell if its flow is still active and useful for SIP\n   traffic.\
    \  The server responds to pings by sending pongs.  If the\n   client does not\
    \ receive a pong in response to its ping (allowing for\n   retransmission for\
    \ STUN as described in Section 4.4.2), it declares\n   the flow dead and opens\
    \ a new flow in its place.\n   This document also suggests timer values for these\
    \ client keep-alive\n   mechanisms.  These timer values were chosen to keep most\
    \ NAT and\n   firewall bindings open, to detect unresponsive servers within 2\n\
    \   minutes, and to mitigate against the avalanche restart problem.\n   However,\
    \ the client may choose different timer values to suit its\n   needs, for example\
    \ to optimize battery life.  In some environments,\n   the server can also keep\
    \ track of the time since a ping was received\n   over a flow to guess the likelihood\
    \ that the flow is still useful for\n   delivering SIP messages.\n   When the\
    \ UA detects that a flow has failed or that the flow\n   definition has changed,\
    \ the UA needs to re-register and will use the\n   back-off mechanism described\
    \ in Section 4.5 to provide congestion\n   relief when a large number of agents\
    \ simultaneously reboot.\n   A keep-alive mechanism needs to keep NAT bindings\
    \ refreshed; for\n   connections, it also needs to detect failure of a connection;\
    \ and for\n   connectionless transports, it needs to detect flow failures including\n\
    \   changes to the NAT public mapping.  For connection-oriented\n   transports\
    \ such as TCP [RFC0793] and SCTP [RFC4960], this\n   specification describes a\
    \ keep-alive approach based on sending CRLFs.\n   For connectionless transport,\
    \ such as UDP [RFC0768], this\n   specification describes using STUN [RFC5389]\
    \ over the same flow as\n   the SIP traffic to perform the keep-alive.\n   UAs\
    \ and Proxies are also free to use native transport keep-alives;\n   however,\
    \ the application may not be able to set these timers on a\n   per-connection\
    \ basis, and the server certainly cannot make any\n   assumption about what values\
    \ are used.  Use of native transport\n   keep-alives is outside the scope of this\
    \ document.\n"
- title: 3.5.1.  CRLF Keep-Alive Technique
  contents:
  - "3.5.1.  CRLF Keep-Alive Technique\n   This approach can only be used with connection-oriented\
    \ transports\n   such as TCP or SCTP.  The client periodically sends a double-CRLF\n\
    \   (the \"ping\") then waits to receive a single CRLF (the \"pong\").  If\n \
    \  the client does not receive a \"pong\" within an appropriate amount of\n  \
    \ time, it considers the flow failed.\n      Note: Sending a CRLF over a connection-oriented\
    \ transport is\n      backwards compatible (because of requirements in Section\
    \ 7.5 of\n      [RFC3261]), but only implementations which support this\n    \
    \  specification will respond to a \"ping\" with a \"pong\".\n"
- title: 3.5.2.  STUN Keep-Alive Technique
  contents:
  - "3.5.2.  STUN Keep-Alive Technique\n   This approach can only be used for connection-less\
    \ transports, such\n   as UDP.\n   For connection-less transports, a flow definition\
    \ could change\n   because a NAT device in the network path reboots and the resulting\n\
    \   public IP address or port mapping for the UA changes.  To detect\n   this,\
    \ STUN requests are sent over the same flow that is being used\n   for the SIP\
    \ traffic.  The proxy or registrar acts as a limited\n   Session Traversal Utilities\
    \ for NAT (STUN) [RFC5389] server on the\n   SIP signaling port.\n      Note:\
    \ The STUN mechanism is very robust and allows the detection\n      of a changed\
    \ IP address and port.  Many other options were\n      considered, but the SIP\
    \ Working Group selected the STUN-based\n      approach.  Approaches using SIP\
    \ requests were abandoned because\n      many believed that good performance and\
    \ full backwards\n      compatibility using this method were mutually exclusive.\n"
- title: 4.  User Agent Procedures
  contents:
  - '4.  User Agent Procedures

    '
- title: 4.1.  Instance ID Creation
  contents:
  - "4.1.  Instance ID Creation\n   Each UA MUST have an Instance Identifier Uniform\
    \ Resource Name (URN)\n   [RFC2141] that uniquely identifies the device.  Usage\
    \ of a URN\n   provides a persistent and unique name for the UA instance.  It\
    \ also\n   provides an easy way to guarantee uniqueness within the AOR.  This\n\
    \   URN MUST be persistent across power cycles of the device.  The\n   instance\
    \ ID MUST NOT change as the device moves from one network to\n   another.\n  \
    \ A UA SHOULD create a Universally Unique Identifier (UUID) URN\n   [RFC4122]\
    \ as its instance-id.  The UUID URN allows for non-\n   centralized computation\
    \ of a URN based on time, unique names (such as\n   a MAC address), or a random\
    \ number generator.\n      Note: A device like a \"soft phone\", when first installed,\
    \ can\n      generate a UUID [RFC4122] and then save this in persistent storage\n\
    \      for all future use.  For a device such as a \"hard phone\", which\n   \
    \   will only ever have a single SIP UA present, the UUID can include\n      the\
    \ MAC address and be generated at any time because it is\n      guaranteed that\
    \ no other UUID is being generated at the same time\n      on that physical device.\
    \  This means the value of the time\n      component of the UUID can be arbitrarily\
    \ selected to be any time\n      less than the time when the device was manufactured.\
    \  A time of 0\n      (as shown in the example in Section 3.2) is perfectly legal\
    \ as\n      long as the device knows no other UUIDs were generated at this\n \
    \     time on this device.\n   If a URN scheme other than UUID is used, the UA\
    \ MUST only use URNs\n   for which an RFC (from the IETF stream) defines how the\
    \ specific URN\n   needs to be constructed and used in the \"+sip.instance\" Contact\n\
    \   header field parameter for outbound behavior.\n   To convey its instance-id\
    \ in both requests and responses, the UA\n   includes a \"sip.instance\" media\
    \ feature tag as a UA characteristic\n   [RFC3840].  This media feature tag is\
    \ encoded in the Contact header\n   field as the \"+sip.instance\" Contact header\
    \ field parameter.  One\n   case where a UA could prefer to omit the \"sip.instance\"\
    \ media feature\n   tag is when it is making an anonymous request or some other\
    \ privacy\n   concern requires that the UA not reveal its identity.\n      Note:\
    \ [RFC3840] defines equality rules for callee capabilities\n      parameters,\
    \ and according to that specification, the\n      \"sip.instance\" media feature\
    \ tag will be compared by case-\n      sensitive string comparison.  This means\
    \ that the URN will be\n      encapsulated by angle brackets (\"<\" and \">\"\
    ) when it is placed\n      within the quoted string value of the \"+sip.instance\"\
    \ Contact\n      header field parameter.  The case-sensitive matching rules apply\n\
    \      only to the generic usages defined in the callee capabilities\n      [RFC3840]\
    \ and the caller preferences [RFC3841] specifications.\n      When the instance\
    \ ID is used in this specification, it is\n      \"extracted\" from the value\
    \ in the \"sip.instance\" media feature\n      tag.  Thus, equality comparisons\
    \ are performed using the rules for\n      URN equality that are specific to the\
    \ scheme in the URN.  If the\n      element performing the comparisons does not\
    \ understand the URN\n      scheme, it performs the comparisons using the lexical\
    \ equality\n      rules defined in [RFC2141].  Lexical equality could result in\
    \ two\n      URNs being considered unequal when they are actually equal.  In\n\
    \      this specific usage of URNs, the only element that provides the\n     \
    \ URN is the SIP UA instance identified by that URN.  As a result,\n      the\
    \ UA instance has to provide lexically equivalent URNs in each\n      registration\
    \ it generates.  This is likely to be normal behavior\n      in any case; clients\
    \ are not likely to modify the value of the\n      instance ID so that it remains\
    \ functionally equivalent to (yet\n      lexicographically different from) previous\
    \ registrations.\n"
- title: 4.2.  Registrations
  contents:
  - '4.2.  Registrations

    '
- title: 4.2.1.  Initial Registrations
  contents:
  - "4.2.1.  Initial Registrations\n   At configuration time, UAs obtain one or more\
    \ SIP URIs representing\n   the default outbound-proxy-set.  This specification\
    \ assumes the set\n   is determined via any of a number of configuration mechanisms,\
    \ and\n   future specifications can define additional mechanisms such as using\n\
    \   DNS to discover this set.  How the UA is configured is outside the\n   scope\
    \ of this specification.  However, a UA MUST support sets with at\n   least two\
    \ outbound proxy URIs and SHOULD support sets with up to four\n   URIs.\n   For\
    \ each outbound proxy URI in the set, the User Agent Client (UAC)\n   SHOULD send\
    \ a REGISTER request using this URI as the default outbound\n   proxy.  (Alternatively,\
    \ the UA could limit the number of flows formed\n   to conserve battery power,\
    \ for example).  If the set has more than\n   one URI, the UAC MUST send a REGISTER\
    \ request to at least two of the\n   default outbound proxies from the set.  UAs\
    \ that support this\n   specification MUST include the outbound option tag in\
    \ a Supported\n   header field in a REGISTER request.  Each of these REGISTER\
    \ requests\n   will use a unique Call-ID.  Forming the route set for the request\
    \ is\n   outside the scope of this document, but typically results in sending\n\
    \   the REGISTER such that the topmost Route header field contains a\n   loose\
    \ route to the outbound proxy URI.\n   REGISTER requests, other than those described\
    \ in Section 4.2.3, MUST\n   include an instance-id media feature tag as specified\
    \ in Section 4.1.\n   A UAC conforming to this specification MUST include in the\
    \ Contact\n   header field, a \"reg-id\" parameter that is distinct from other\n\
    \   \"reg-id\" parameters used in other registrations that use the same\n   \"\
    +sip.instance\" Contact header field parameter and AOR.  Each one of\n   these\
    \ registrations will form a new flow from the UA to the proxy.\n   The sequence\
    \ of reg-id values does not have to be sequential but MUST\n   be exactly the\
    \ same sequence of reg-id values each time the UA\n   instance power cycles or\
    \ reboots, so that the reg-id values will\n   collide with the previously used\
    \ reg-id values.  This is so the\n   registrar can replace the older registrations.\n\
    \      Note: The UAC can situationally decide whether to request outbound\n  \
    \    behavior by including or omitting the \"reg-id\" Contact header\n      field\
    \ parameter.  For example, imagine the outbound-proxy-set\n      contains two\
    \ proxies in different domains, EP1 and EP2.  If an\n      outbound-style registration\
    \ succeeded for a flow through EP1, the\n      UA might decide to include 'outbound'\
    \ in its Require header field\n      when registering with EP2, in order to ensure\
    \ consistency.\n      Similarly, if the registration through EP1 did not support\n\
    \      outbound, the UA might not register with EP2 at all.\n   The UAC MUST support\
    \ the Path header [RFC3327] mechanism, and\n   indicate its support by including\
    \ the 'path' option-tag in a\n   Supported header field value in its REGISTER\
    \ requests.  Other than\n   optionally examining the Path vector in the response,\
    \ this is all\n   that is required of the UAC to support Path.\n   The UAC examines\
    \ successful registration responses for the presence\n   of an outbound option-tag\
    \ in a Require header field value.  Presence\n   of this option-tag indicates\
    \ that the registrar is compliant with\n   this specification, and that any edge\
    \ proxies which needed to\n   participate are also compliant.  If the registrar\
    \ did not support\n   outbound, the UA has potentially registered an un-routable\
    \ contact.\n   It is the responsibility of the UA to remove any inappropriate\n\
    \   Contacts.\n   If outbound registration succeeded, as indicated by the presence\
    \ of\n   the outbound option-tag in the Require header field of a successful\n\
    \   registration response, the UA begins sending keep-alives as described\n  \
    \ in Section 4.4.\n      Note: The UA needs to honor 503 (Service Unavailable)\
    \ responses to\n      registrations as described in [RFC3261] and [RFC3263]. \
    \ In\n      particular, implementors should note that when receiving a 503\n \
    \     (Service Unavailable) response with a Retry-After header field,\n      the\
    \ UA is expected to wait the indicated amount of time and retry\n      the registration.\
    \  A Retry-After header field value of 0 is valid\n      and indicates the UA\
    \ is expected to retry the REGISTER request\n      immediately.  Implementations\
    \ need to ensure that when retrying\n      the REGISTER request, they revisit\
    \ the DNS resolution results such\n      that the UA can select an alternate host\
    \ from the one chosen the\n      previous time the URI was resolved.\n   If the\
    \ registering UA receives a 439 (First Hop Lacks Outbound\n   Support) response\
    \ to a REGISTER request, it MAY re-attempt\n   registration without using the\
    \ outbound mechanism (subject to local\n   policy at the client).  If the client\
    \ has one or more alternate\n   outbound proxies available, it MAY re-attempt\
    \ registration through\n   such outbound proxies.  See Section 11.6 for more information\
    \ on the\n   439 response code.\n"
- title: 4.2.2.  Subsequent REGISTER Requests
  contents:
  - "4.2.2.  Subsequent REGISTER Requests\n   Registrations for refreshing a binding\
    \ and for removing a binding use\n   the same instance-id and reg-id values as\
    \ the corresponding initial\n   registration where the binding was added.  Registrations\
    \ that merely\n   refresh an existing binding are sent over the same flow as the\n\
    \   original registration where the binding was added.\n   If a re-registration\
    \ is rejected with a recoverable error response,\n   for example by a 503 (Service\
    \ Unavailable) containing a Retry-After\n   header, the UAC SHOULD NOT tear down\
    \ the corresponding flow if the\n   flow uses a connection-oriented transport\
    \ such as TCP.  As long as\n   \"pongs\" are received in response to \"pings\"\
    , the flow SHOULD be kept\n   active until a non-recoverable error response is\
    \ received.  This\n   prevents unnecessary closing and opening of connections.\n"
- title: 4.2.3.  Third-Party Registrations
  contents:
  - "4.2.3.  Third-Party Registrations\n   In an initial registration or re-registration,\
    \ a UA MUST NOT include\n   a \"reg-id\" header field parameter in the Contact\
    \ header field if the\n   registering UA is not the same instance as the UA referred\
    \ to by the\n   target Contact header field.  (This practice is occasionally used\
    \ to\n   install forwarding policy into registrars.)\n   A UAC also MUST NOT include\
    \ an instance-id feature tag or \"reg-id\"\n   Contact header field parameter\
    \ in a request to un-register all\n   Contacts (a single Contact header field\
    \ value with the value of \"*\").\n"
- title: 4.3.  Sending Non-REGISTER Requests
  contents:
  - "4.3.  Sending Non-REGISTER Requests\n   When a UAC is about to send a request,\
    \ it first performs normal\n   processing to select the next hop URI.  The UA\
    \ can use a variety of\n   techniques to compute the route set and accordingly\
    \ the next hop URI.\n   Discussion of these techniques is outside the scope of\
    \ this document.\n   UAs that support this specification SHOULD include the outbound\n\
    \   option tag in a Supported header field in a request that is not a\n   REGISTER\
    \ request.\n   The UAC performs normal DNS resolution on the next hop URI (as\n\
    \   described in [RFC3263]) to find a protocol, IP address, and port.\n   For\
    \ protocols that don't use TLS, if the UAC has an existing flow to\n   this IP\
    \ address, and port with the correct protocol, then the UAC\n   MUST use the existing\
    \ connection.  For TLS protocols, there MUST also\n   be a match between the host\
    \ production in the next hop and one of the\n   URIs contained in the subjectAltName\
    \ in the peer certificate.  If the\n   UAC cannot use one of the existing flows,\
    \ then it SHOULD form a new\n   flow by sending a datagram or opening a new connection\
    \ to the next\n   hop, as appropriate for the transport protocol.\n   Typically,\
    \ a UAC using the procedures of this document and sending a\n   dialog-forming\
    \ request will want all subsequent requests in the\n   dialog to arrive over the\
    \ same flow.  If the UAC is using a Globally\n   Routable UA URI (GRUU) [RFC5627]\
    \ that was instantiated using a\n   Contact header field value that included an\
    \ \"ob\" parameter, the UAC\n   sends the request over the flow used for registration,\
    \ and subsequent\n   requests will arrive over that same flow.  If the UAC is\
    \ not using\n   such a GRUU, then the UAC adds an \"ob\" parameter to its Contact\n\
    \   header field value.  This will cause all subsequent requests in the\n   dialog\
    \ to arrive over the flow instantiated by the dialog-forming\n   request.  This\
    \ case is typical when the request is sent prior to\n   registration, such as\
    \ in the initial subscription dialog for the\n   configuration framework [CONFIG-FMWK].\n\
    \      Note: If the UAC wants a UDP flow to work through NATs or\n      firewalls,\
    \ it still needs to put the 'rport' parameter [RFC3581]\n      in its Via header\
    \ field value, and send from the port it is\n      prepared to receive on.  More\
    \ general information about NAT\n      traversal in SIP is described in [NAT-SCEN].\n"
- title: 4.4.  Keep-Alives and Detecting Flow Failure
  contents:
  - "4.4.  Keep-Alives and Detecting Flow Failure\n   Keep-alives are used for refreshing\
    \ NAT/firewall bindings and\n   detecting flow failure.  Flows can fail for many\
    \ reasons including\n   the rebooting of NATs and the crashing of edge proxies.\n\
    \   As described in Section 4.2, a UA that registers will begin sending\n   keep-alives\
    \ after an appropriate registration response.  A UA that\n   does not register\
    \ (for example, a PSTN gateway behind a firewall) can\n   also send keep-alives\
    \ under certain circumstances.\n   Under specific circumstances, a UAC might be\
    \ allowed to send STUN\n   keep-alives even if the procedures in Section 4.2 were\
    \ not completed,\n   provided that there is an explicit indication that the target\
    \ first-\n   hop SIP node supports STUN keep-alives.  For example, this applies\
    \ to\n   a non-registering UA or to a case where the UA registration\n   succeeded,\
    \ but the response did not include the outbound option-tag\n   in the Require\
    \ header field.\n      Note: A UA can \"always\" send a double CRLF (a \"ping\"\
    ) over\n      connection-oriented transports as this is already allowed by\n \
    \     Section 7.5 of [RFC3261].  However a UA that did not register\n      using\
    \ outbound registration cannot expect a CRLF in response (a\n      \"pong\") unless\
    \ the UA has an explicit indication that CRLF keep-\n      alives are supported\
    \ as described in this section.  Likewise, a UA\n      that did not successfully\
    \ register with outbound procedures needs\n      explicit indication that the\
    \ target first-hop SIP node supports\n      STUN keep-alives before it can send\
    \ any STUN messages.\n   A configuration option indicating keep-alive support\
    \ for a specific\n   target is considered an explicit indication.  If these conditions\
    \ are\n   satisfied, the UA sends its keep-alives according to the same\n   guidelines\
    \ as those used when UAs register; these guidelines are\n   described below.\n\
    \   The UA needs to detect when a specific flow fails.  The UA actively\n   tries\
    \ to detect failure by periodically sending keep-alive messages\n   using one\
    \ of the techniques described in Sections 4.4.1 or 4.4.2.  If\n   a flow with\
    \ a registration has failed, the UA follows the procedures\n   in Section 4.2\
    \ to form a new flow to replace the failed one.\n   When a successful registration\
    \ response contains the Flow-Timer\n   header field, the value of this header\
    \ field is the number of seconds\n   the server is prepared to wait without seeing\
    \ keep-alives before it\n   could consider the corresponding flow dead.  Note\
    \ that the server\n   would wait for an amount of time larger than the Flow-Timer\
    \ in order\n   to have a grace period to account for transport delay.  The UA\
    \ MUST\n   send keep-alives at least as often as this number of seconds.  If the\n\
    \   UA uses the server-recommended keep-alive frequency it SHOULD send\n   its\
    \ keep-alives so that the interval between each keep-alive is\n   randomly distributed\
    \ between 80% and 100% of the server-provided\n   time.  For example, if the server\
    \ suggests 120 seconds, the UA would\n   send each keep-alive with a different\
    \ frequency between 95 and 120\n   seconds.\n   If no Flow-Timer header field\
    \ was present in a register response for\n   this flow, the UA can send keep-alives\
    \ at its discretion.  The\n   sections below provide RECOMMENDED default values\
    \ for these keep-\n   alives.\n   The client needs to perform normal [RFC3263]\
    \ SIP DNS resolution on\n   the URI from the outbound-proxy-set to pick a transport.\
    \  Once a\n   transport is selected, the UA selects the keep-alive approach that\
    \ is\n   recommended for that transport.\n   Section 4.4.1 describes a keep-alive\
    \ mechanism for connection-\n   oriented transports such as TCP or SCTP.  Section\
    \ 4.4.2 describes a\n   keep-alive mechanism for connection-less transports such\
    \ as UDP.\n   Support for other transports such as DCCP [RFC4340] is for further\n\
    \   study.\n"
- title: 4.4.1.  Keep-Alive with CRLF
  contents:
  - "4.4.1.  Keep-Alive with CRLF\n   This approach MUST only be used with connection\
    \ oriented transports\n   such as TCP or SCTP; it MUST NOT be used with connection-less\n\
    \   transports such as UDP.\n   A User Agent that forms flows checks if the configured\
    \ URI to which\n   the UA is connecting resolves to a connection-oriented transport\n\
    \   (e.g., TCP and TLS over TCP).\n   For this mechanism, the client \"ping\"\
    \ is a double-CRLF sequence, and\n   the server \"pong\" is a single CRLF, as\
    \ defined in the ABNF below:\n   CRLF = CR LF\n   double-CRLF = CR LF CR LF\n\
    \   CR = %x0D\n   LF = %x0A\n   The \"ping\" and \"pong\" need to be sent between\
    \ SIP messages and cannot\n   be sent in the middle of a SIP message.  If sending\
    \ over TLS, the\n   CRLFs are sent inside the TLS protected channel.  If sending\
    \ over a\n   SigComp [RFC3320] compressed data stream, the CRLF keep-alives are\n\
    \   sent inside the compressed stream.  The double CRLF is considered a\n   single\
    \ SigComp message.  The specific mechanism for representing\n   these characters\
    \ is an implementation-specific matter to be handled\n   by the SigComp compressor\
    \ at the sending end.\n   If a pong is not received within 10 seconds after sending\
    \ a ping (or\n   immediately after processing any incoming message being received\
    \ when\n   that 10 seconds expires), then the client MUST treat the flow as\n\
    \   failed.  Clients MUST support this CRLF keep-alive.\n      Note: This value\
    \ of 10-second timeout was selected to be long\n      enough that it allows plenty\
    \ of time for a server to send a\n      response even if the server is temporarily\
    \ busy with an\n      administrative activity.  At the same time, it was selected\
    \ to be\n      small enough that a UA registered to two redundant servers with\n\
    \      unremarkable hardware uptime could still easily provide very high\n   \
    \   levels of overall reliability.  Although some Internet protocols\n      are\
    \ designed for round-trip times over 10 seconds, SIP for real-\n      time communications\
    \ is not really usable in these type of\n      environments as users often abandon\
    \ calls before waiting much more\n      than a few seconds.\n   When a Flow-Timer\
    \ header field is not provided in the most recent\n   success registration response,\
    \ the proper selection of keep-alive\n   frequency is primarily a trade-off between\
    \ battery usage and\n   availability.  The UA MUST select a random number between\
    \ a fixed or\n   configurable upper bound and a lower bound, where the lower bound\
    \ is\n   20% less then the upper bound.  The fixed upper bound or the default\n\
    \   configurable upper bound SHOULD be 120 seconds (95 seconds for the\n   lower\
    \ bound) where battery power is not a concern and 840 seconds\n   (672 seconds\
    \ for the lower bound) where battery power is a concern.\n   The random number\
    \ will be different for each keep-alive \"ping\".\n      Note on selection of\
    \ time values: the 120-second upper bound was\n      chosen based on the idea\
    \ that for a good user experience, failures\n      normally will be detected in\
    \ this amount of time and a new\n      connection will be set up.  The 14-minute\
    \ upper bound for battery-\n      powered devices was selected based on NATs with\
    \ TCP timeouts as\n      low as 15 minutes.  Operators that wish to change the\
    \ relationship\n      between load on servers and the expected time that a user\
    \ might\n      not receive inbound communications will probably adjust this time.\n\
    \      The 95-second lower bound was chosen so that the jitter introduced\n  \
    \    will result in a relatively even load on the servers after 30\n      minutes.\n"
- title: 4.4.2.  Keep-Alive with STUN
  contents:
  - "4.4.2.  Keep-Alive with STUN\n   This approach MUST only be used with connection-less\
    \ transports, such\n   as UDP; it MUST NOT be used for connection-oriented transports\
    \ such\n   as TCP and SCTP.\n   A User Agent that forms flows checks if the configured\
    \ URI to which\n   the UA is connecting resolves to use the UDP transport.  The\
    \ UA can\n   periodically perform keep-alive checks by sending STUN [RFC5389]\n\
    \   Binding Requests over the flow as described in Section 8.  Clients\n   MUST\
    \ support STUN-based keep-alives.\n   When a Flow-Timer header field is not included\
    \ in a successful\n   registration response, the time between each keep-alive\
    \ request\n   SHOULD be a random number between 24 and 29 seconds.\n      Note\
    \ on selection of time values: the upper bound of 29 seconds\n      was selected,\
    \ as many NATs have UDP timeouts as low as 30 seconds.\n      The 24-second lower\
    \ bound was selected so that after 10 minutes\n      the jitter introduced by\
    \ different timers will make the keep-alive\n      requests unsynchronized to\
    \ evenly spread the load on the servers.\n      Note that the short NAT timeouts\
    \ with UDP have a negative impact\n      on battery life.\n   If a STUN Binding\
    \ Error Response is received, or if no Binding\n   Response is received after\
    \ 7 retransmissions (16 times the STUN \"RTO\"\n   timer -- where RTO is an estimate\
    \ of round-trip time), the UA\n   considers the flow failed.  If the XOR-MAPPED-ADDRESS\
    \ in the STUN\n   Binding Response changes, the UA MUST treat this event as a\
    \ failure\n   on the flow.\n"
- title: 4.5.  Flow Recovery
  contents:
  - "4.5.  Flow Recovery\n   When a flow used for registration (through a particular\
    \ URI in the\n   outbound-proxy-set) fails, the UA needs to form a new flow to\
    \ replace\n   the old flow and replace any registrations that were previously\
    \ sent\n   over this flow.  Each new registration MUST have the same reg-id\n\
    \   value as the registration it replaces.  This is done in much the same\n  \
    \ way as forming a brand new flow as described in Section 4.2; however,\n   if\
    \ there is a failure in forming this flow, the UA needs to wait a\n   certain\
    \ amount of time before retrying to form a flow to this\n   particular next hop.\n\
    \   The amount of time to wait depends if the previous attempt at\n   establishing\
    \ a flow was successful.  For the purposes of this\n   section, a flow is considered\
    \ successful if outbound registration\n   succeeded, and if keep-alives are in\
    \ use on this flow, at least one\n   subsequent keep-alive response was received.\n\
    \   The number of seconds to wait is computed in the following way.  If\n   all\
    \ of the flows to every URI in the outbound proxy set have failed,\n   the base-time\
    \ is set to a lower value (with a default of 30 seconds);\n   otherwise, in the\
    \ case where at least one of the flows has not\n   failed, the base-time is set\
    \ to a higher value (with a default of 90\n   seconds).  The upper-bound wait\
    \ time (W) is computed by taking two\n   raised to the power of the number of\
    \ consecutive registration\n   failures for that URI, and multiplying this by\
    \ the base-time, up to a\n   configurable maximum time (with a default of 1800\
    \ seconds).\n   W = min (max-time, (base-time * (2 ^ consecutive-failures)))\n\
    \   These times MAY be configurable in the UA.  The three times are:\n   o  max-time\
    \ with a default of 1800 seconds\n   o  base-time (if all failed) with a default\
    \ of 30 seconds\n   o  base-time (if all have not failed) with a default of 90\
    \ seconds\n   For example, if the base-time is 30 seconds, and there were three\n\
    \   failures, then the upper-bound wait time is min(1800, 30*(2^3)) or\n   240\
    \ seconds.  The actual amount of time the UA waits before retrying\n   registration\
    \ (the retry delay time) is computed by selecting a\n   uniform random time between\
    \ 50 and 100% of the upper-bound wait time.\n   The UA MUST wait for at least\
    \ the value of the retry delay time\n   before trying another registration to\
    \ form a new flow for that URI (a\n   503 response to an earlier failed registration\
    \ attempt with a Retry-\n   After header field value may cause the UA to wait\
    \ longer).\n   To be explicitly clear on the boundary conditions: when the UA\
    \ boots,\n   it immediately tries to register.  If this fails and no registration\n\
    \   on other flows succeed, the first retry happens somewhere between 30\n   and\
    \ 60 seconds after the failure of the first registration request.\n   If the number\
    \ of consecutive-failures is large enough that the\n   maximum of 1800 seconds\
    \ is reached, the UA will keep trying\n   indefinitely with a random time of 15\
    \ to 30 minutes between each\n   attempt.\n"
- title: 5.  Edge Proxy Procedures
  contents:
  - '5.  Edge Proxy Procedures

    '
- title: 5.1.  Processing Register Requests
  contents:
  - "5.1.  Processing Register Requests\n   When an edge proxy receives a registration\
    \ request with a \"reg-id\"\n   header field parameter in the Contact header field,\
    \ it needs to\n   determine if it (the edge proxy) will have to be visited for\
    \ any\n   subsequent requests sent to the User Agent identified in the Contact\n\
    \   header field, or not.  If the edge proxy is the first hop, as\n   indicated\
    \ by the Via header field, it MUST insert its URI in a Path\n   header field value\
    \ as described in [RFC3327].  If it is not the first\n   hop, it might still decide\
    \ to add itself to the Path header based on\n   local policy.  In addition, if\
    \ the edge proxy is the first SIP node\n   after the UAC, the edge proxy either\
    \ MUST store a \"flow token\"\n   (containing information about the flow from\
    \ the previous hop) in its\n   Path URI or reject the request.  The flow token\
    \ MUST be an identifier\n   that is unique to this network flow.  The flow token\
    \ MAY be placed in\n   the userpart of the URI.  In addition, the first node MUST\
    \ include an\n   \"ob\" URI parameter in its Path header field value.  If the\
    \ edge proxy\n   is not the first SIP node after the UAC it MUST NOT place an\
    \ \"ob\" URI\n   parameter in a Path header field value.  The edge proxy can determine\n\
    \   if it is the first hop by examining the Via header field.\n"
- title: 5.2.  Generating Flow Tokens
  contents:
  - "5.2.  Generating Flow Tokens\n   A trivial but impractical way to satisfy the\
    \ flow token requirement\n   in Section 5.1 involves storing a mapping between\
    \ an incrementing\n   counter and the connection information; however, this would\
    \ require\n   the edge proxy to keep an infeasible amount of state.  It is unclear\n\
    \   when this state could be removed, and the approach would have\n   problems\
    \ if the proxy crashed and lost the value of the counter.  A\n   stateless example\
    \ is provided below.  A proxy can use any algorithm\n   it wants as long as the\
    \ flow token is unique to a flow, the flow can\n   be recovered from the token,\
    \ and the token cannot be modified by\n   attackers.\n      Example Algorithm:\
    \ When the proxy boots, it selects a 20-octet\n      crypto random key called\
    \ K that only the edge proxy knows.  A byte\n      array, called S, is formed\
    \ that contains the following information\n      about the flow the request was\
    \ received on: an enumeration\n      indicating the protocol, the local IP address\
    \ and port, the remote\n      IP address and port.  The HMAC of S is computed\
    \ using the key K\n      and the HMAC-SHA1-80 algorithm, as defined in [RFC2104].\
    \  The\n      concatenation of the HMAC and S are base64 encoded, as defined in\n\
    \      [RFC4648], and used as the flow identifier.  When using IPv4\n      addresses,\
    \ this will result in a 32-octet identifier.\n"
- title: 5.3.  Forwarding Non-REGISTER Requests
  contents:
  - "5.3.  Forwarding Non-REGISTER Requests\n   When an edge proxy receives a request,\
    \ it applies normal routing\n   procedures with the following additions.  If the\
    \ edge proxy receives\n   a request where the edge proxy is the host in the topmost\
    \ Route\n   header field value, and the Route header field value contains a flow\n\
    \   token, the proxy follows the procedures of this section.  Otherwise\n   the\
    \ edge proxy skips the procedures in this section, removes itself\n   from the\
    \ Route header field, and continues processing the request.\n   The proxy decodes\
    \ the flow token and compares the flow in the flow\n   token with the source of\
    \ the request to determine if this is an\n   \"incoming\" or \"outgoing\" request.\n\
    \   If the flow in the flow token identified by the topmost Route header\n   field\
    \ value matches the source IP address and port of the request,\n   the request\
    \ is an \"outgoing\" request; otherwise, it is an \"incoming\"\n   request.\n"
- title: 5.3.1.  Processing Incoming Requests
  contents:
  - "5.3.1.  Processing Incoming Requests\n   If the Route header value contains an\
    \ \"ob\" URI parameter, the Route\n   header was probably copied from the Path\
    \ header in a registration.\n   If the Route header value contains an \"ob\" URI\
    \ parameter, and the\n   request is a new dialog-forming request, the proxy needs\
    \ to adjust\n   the route set to ensure that subsequent requests in the dialog\
    \ can be\n   delivered over a valid flow to the UA instance identified by the\
    \ flow\n   token.\n      Note: A simple approach to satisfy this requirement is\
    \ for the\n      proxy to add a Record-Route header field value that contains\
    \ the\n      flow-token, by copying the URI in the Route header minus the \"ob\"\
    \n      parameter.\n   Next, whether the Route header field contained an \"ob\"\
    \ URI parameter\n   or not, the proxy removes the Route header field value and\
    \ forwards\n   the request over the 'logical flow' identified by the flow token,\n\
    \   that is known to deliver data to the specific target UA instance.  If\n  \
    \ the flow token has been tampered with, the proxy SHOULD send a 403\n   (Forbidden)\
    \ response.  If the flow no longer exists, the proxy SHOULD\n   send a 430 (Flow\
    \ Failed) response to the request.\n   Proxies that used the example algorithm\
    \ described in Section 5.2 to\n   form a flow token follow the procedures below\
    \ to determine the\n   correct flow.  To decode the flow token, take the flow\
    \ identifier in\n   the user portion of the URI and base64 decode it, then verify\
    \ the\n   HMAC is correct by recomputing the HMAC and checking that it matches.\n\
    \   If the HMAC is not correct, the request has been tampered with.\n"
- title: 5.3.2.  Processing Outgoing Requests
  contents:
  - "5.3.2.  Processing Outgoing Requests\n   For mid-dialog requests to work with\
    \ outbound UAs, the requests need\n   to be forwarded over some valid flow to\
    \ the appropriate UA instance.\n   If the edge proxy receives an outgoing dialog-forming\
    \ request, the\n   edge proxy can use the presence of the \"ob\" URI parameter\
    \ in the\n   UAC's Contact URI (or topmost Route header field) to determine if\
    \ the\n   edge proxy needs to assist in mid-dialog request routing.\n      Implementation\
    \ note: Specific procedures at the edge proxy to\n      ensure that mid-dialog\
    \ requests are routed over an existing flow\n      are not part of this specification.\
    \  However, an approach such as\n      having the edge proxy add a Record-Route\
    \ header with a flow token\n      is one way to ensure that mid-dialog requests\
    \ are routed over the\n      correct flow.\n"
- title: 5.4.  Edge Proxy Keep-Alive Handling
  contents:
  - "5.4.  Edge Proxy Keep-Alive Handling\n   All edge proxies compliant with this\
    \ specification MUST implement\n   support for STUN NAT keep-alives on their SIP\
    \ UDP ports as described\n   in Section 8.\n   When a server receives a double\
    \ CRLF sequence between SIP messages on\n   a connection-oriented transport such\
    \ as TCP or SCTP, it MUST\n   immediately respond with a single CRLF over the\
    \ same connection.\n   The last proxy to forward a successful registration response\
    \ to a UA\n   MAY include a Flow-Timer header field if the response contains the\n\
    \   outbound option-tag in a Require header field value in the response.\n   The\
    \ reason a proxy would send a Flow-Timer is if it wishes to detect\n   flow failures\
    \ proactively and take appropriate action (e.g., log\n   alarms, provide alternative\
    \ treatment if incoming requests for the UA\n   are received, etc.).  The server\
    \ MUST wait for an amount of time\n   larger than the Flow-Timer in order to have\
    \ a grace period to account\n   for transport delay.\n"
- title: 6.  Registrar Procedures
  contents:
  - "6.  Registrar Procedures\n   This specification updates the definition of a binding\
    \ in [RFC3261],\n   Section 10 and [RFC3327], Section 5.3.\n   Registrars that\
    \ implement this specification MUST support the Path\n   header mechanism [RFC3327].\n\
    \   When receiving a REGISTER request, the registrar MUST check from its\n   Via\
    \ header field if the registrar is the first hop or not.  If the\n   registrar\
    \ is not the first hop, it MUST examine the Path header of\n   the request.  If\
    \ the Path header field is missing or it exists but\n   the first URI does not\
    \ have an \"ob\" URI parameter, then outbound\n   processing MUST NOT be applied\
    \ to the registration.  In this case,\n   the following processing applies: if\
    \ the REGISTER request contains\n   the reg-id and the outbound option tag in\
    \ a Supported header field,\n   then the registrar MUST respond to the REGISTER\
    \ request with a 439\n   (First Hop Lacks Outbound Support) response; otherwise,\
    \ the registrar\n   MUST ignore the \"reg-id\" parameter of the Contact header.\
    \  See\n   Section 11.6 for more information on the 439 response code.\n   A Contact\
    \ header field value with an instance-id media feature tag\n   but no \"reg-id\"\
    \ header field parameter is valid (this combination\n   will result in the creation\
    \ of a GRUU, as described in the GRUU\n   specification [RFC5627]), but one with\
    \ a reg-id but no instance-id is\n   not valid.  If the registrar processes a\
    \ Contact header field value\n   with a reg-id but no instance-id, it simply ignores\
    \ the reg-id\n   parameter.\n   A registration containing a \"reg-id\" header\
    \ field parameter and a\n   non-zero expiration is used to register a single UA\
    \ instance over a\n   single flow, and can also de-register any Contact header\
    \ fields with\n   zero expiration.  Therefore, if the Contact header field contains\n\
    \   more than one header field value with a non-zero expiration and any\n   of\
    \ these header field values contain a \"reg-id\" Contact header field\n   parameter,\
    \ the entire registration SHOULD be rejected with a 400 (Bad\n   Request) response.\
    \  The justification for recommending rejection\n   versus making it mandatory\
    \ is that the receiver is allowed by\n   [RFC3261] to squelch (not respond to)\
    \ excessively malformed or\n   malicious messages.\n   If the Contact header did\
    \ not contain a \"reg-id\" Contact header field\n   parameter or if that parameter\
    \ was ignored (as described above), the\n   registrar MUST NOT include the outbound\
    \ option-tag in the Require\n   header field of its response.\n   The registrar\
    \ MUST be prepared to receive, simultaneously for the\n   same AOR, some registrations\
    \ that use instance-id and reg-id and some\n   registrations that do not.  The\
    \ registrar MAY be configured with\n   local policy to reject any registrations\
    \ that do not include the\n   instance-id and reg-id, or with Path header field\
    \ values that do not\n   contain the \"ob\" URI parameter.  If the Contact header\
    \ field does not\n   contain a \"+sip.instance\" Contact header field parameter,\
    \ the\n   registrar processes the request using the Contact binding rules in\n\
    \   [RFC3261].\n   When a \"+sip.instance\" Contact header field parameter and\
    \ a \"reg-id\"\n   Contact header field parameter are present in a Contact header\
    \ field\n   of a REGISTER request (after the Contact header validation as\n  \
    \ described above), the corresponding binding is between an AOR and the\n   combination\
    \ of the instance-id (from the \"+sip.instance\" Contact\n   header parameter)\
    \ and the value of \"reg-id\" Contact header field\n   parameter parameter.  The\
    \ registrar MUST store in the binding the\n   Contact URI, all the Contact header\
    \ field parameters, and any Path\n   header field values.  (Even though the Contact\
    \ URI is not used for\n   binding comparisons, it is still needed by the authoritative\
    \ proxy to\n   form the target set.)  Provided that the UAC had included an outbound\n\
    \   option-tag (defined in Section 11.4) in a Supported header field\n   value\
    \ in the REGISTER request, the registrar MUST include the\n   outbound option-tag\
    \ in a Require header field value in its response\n   to that REGISTER request.\n\
    \   If the UAC has a direct flow with the registrar, the registrar MUST\n   store\
    \ enough information to uniquely identify the network flow over\n   which the\
    \ request arrived.  For common operating systems with TCP,\n   this would typically\
    \ be just the handle to the file descriptor where\n   the handle would become\
    \ invalid if the TCP session was closed.  For\n   common operating systems with\
    \ UDP this would typically be the file\n   descriptor for the local socket that\
    \ received the request, the local\n   interface, and the IP address and port number\
    \ of the remote side that\n   sent the request.  The registrar MAY store this\
    \ information by adding\n   itself to the Path header field with an appropriate\
    \ flow token.\n   If the registrar receives a re-registration for a specific\n\
    \   combination of AOR, and instance-id and reg-id values, the registrar\n   MUST\
    \ update any information that uniquely identifies the network flow\n   over which\
    \ the request arrived if that information has changed, and\n   SHOULD update the\
    \ time the binding was last updated.\n   To be compliant with this specification,\
    \ registrars that can receive\n   SIP requests directly from a UAC without intervening\
    \ edge proxies\n   MUST implement the same keep-alive mechanisms as edge proxies\n\
    \   (Section 5.4).  Registrars with a direct flow with a UA MAY include a\n  \
    \ Flow-Timer header in a 2xx class registration response that includes\n   the\
    \ outbound option-tag in the Require header.\n"
- title: '7.  Authoritative Proxy Procedures: Forwarding Requests'
  contents:
  - "7.  Authoritative Proxy Procedures: Forwarding Requests\n   When a proxy uses\
    \ the location service to look up a registration\n   binding and then proxies\
    \ a request to a particular contact, it\n   selects a contact to use normally,\
    \ with a few additional rules:\n   o  The proxy MUST NOT populate the target set\
    \ with more than one\n      contact with the same AOR and instance-id at a time.\n\
    \   o  If a request for a particular AOR and instance-id fails with a 430\n  \
    \    (Flow Failed) response, the proxy SHOULD replace the failed branch\n    \
    \  with another target (if one is available) with the same AOR and\n      instance-id,\
    \ but a different reg-id.\n   o  If the proxy receives a final response from a\
    \ branch other than a\n      408 (Request Timeout) or a 430 (Flow Failed) response,\
    \ the proxy\n      MUST NOT forward the same request to another target representing\n\
    \      the same AOR and instance-id.  The targeted instance has already\n    \
    \  provided its response.\n   The proxy uses the next-hop target of the message\
    \ and the value of\n   any stored Path header field vector in the registration\
    \ binding to\n   decide how to forward and populate the Route header in the request.\n\
    \   If the proxy is co-located with the registrar and stored information\n   about\
    \ the flow to the UA that created the binding, then the proxy\n   MUST send the\
    \ request over the same 'logical flow' saved with the\n   binding, since that\
    \ flow is known to deliver data to the specific\n   target UA instance's network\
    \ flow that was saved with the binding.\n      Implementation note: Typically\
    \ this means that for TCP, the\n      request is sent on the same TCP socket that\
    \ received the REGISTER\n      request.  For UDP, the request is sent from the\
    \ same local IP\n      address and port over which the registration was received,\
    \ to the\n      same IP address and port from which the REGISTER was received.\n\
    \   If a proxy or registrar receives information from the network that\n   indicates\
    \ that no future messages will be delivered on a specific\n   flow, then the proxy\
    \ MUST invalidate all the bindings in the target\n   set that use that flow (regardless\
    \ of AOR).  Examples of this are a\n   TCP socket closing or receiving a destination\
    \ unreachable ICMP error\n   on a UDP flow.  Similarly, if a proxy closes a file\
    \ descriptor, it\n   MUST invalidate all the bindings in the target set with flows\
    \ that\n   use that file descriptor.\n"
- title: 8.  STUN Keep-Alive Processing
  contents:
  - "8.  STUN Keep-Alive Processing\n   This section describes changes to the SIP\
    \ transport layer that allow\n   SIP and STUN [RFC5389] Binding Requests to be\
    \ mixed over the same\n   flow.  This constitutes a new STUN usage.  The STUN\
    \ messages are used\n   to verify that connectivity is still available over a\
    \ UDP flow, and\n   to provide periodic keep-alives.  These STUN keep-alives are\
    \ always\n   sent to the next SIP hop.  STUN messages are not delivered end-to-\n\
    \   end.\n   The only STUN messages required by this usage are Binding Requests,\n\
    \   Binding Responses, and Binding Error Responses.  The UAC sends\n   Binding\
    \ Requests over the same UDP flow that is used for sending SIP\n   messages. \
    \ These Binding Requests do not require any STUN attributes.\n   The corresponding\
    \ Binding Responses do not require any STUN\n   attributes except the XOR-MAPPED-ADDRESS.\
    \  The UAS, proxy, or\n   registrar responds to a valid Binding Request with a\
    \ Binding Response\n   that MUST include the XOR-MAPPED-ADDRESS attribute.\n \
    \  If a server compliant to this section receives SIP requests on a\n   given\
    \ interface and UDP port, it MUST also provide a limited version\n   of a STUN\
    \ server on the same interface and UDP port.\n      Note: It is easy to distinguish\
    \ STUN and SIP packets sent over\n      UDP, because the first octet of a STUN\
    \ Binding method has a value\n      of 0 or 1, while the first octet of a SIP\
    \ message is never a 0 or\n      1.\n   Because sending and receiving binary STUN\
    \ data on the same ports used\n   for SIP is a significant and non-backwards compatible\
    \ change to RFC\n   3261, this section requires a number of checks before sending\
    \ STUN\n   messages to a SIP node.  If a SIP node sends STUN requests (for\n \
    \  example, due to incorrect configuration) despite these warnings, the\n   node\
    \ could be blacklisted for UDP traffic.\n   A SIP node MUST NOT send STUN requests\
    \ over a flow unless it has an\n   explicit indication that the target next-hop\
    \ SIP server claims to\n   support this specification.  UACs MUST NOT use an ambiguous\n\
    \   configuration option such as \"Work through NATs?\" or \"Do keep-\n   alives?\"\
    \ to imply next-hop STUN support.  A UAC MAY use the presence\n   of an \"ob\"\
    \ URI parameter in the Path header in a registration\n   response as an indication\
    \ that its first edge proxy supports the\n   keep-alives defined in this document.\n\
    \      Note: Typically, a SIP node first sends a SIP request and waits to\n  \
    \    receive a 2xx class response over a flow to a new target\n      destination,\
    \ before sending any STUN messages.  When scheduled for\n      the next NAT refresh,\
    \ the SIP node sends a STUN request to the\n      target.\n   Once a flow is established,\
    \ failure of a STUN request (including its\n   retransmissions) is considered\
    \ a failure of the underlying flow.  For\n   SIP over UDP flows, if the XOR-MAPPED-ADDRESS\
    \ returned over the flow\n   changes, this indicates that the underlying connectivity\
    \ has changed,\n   and is considered a flow failure.\n   The SIP keep-alive STUN\
    \ usage requires no backwards compatibility\n   with [RFC3489].\n"
- title: 8.1.  Use with SigComp
  contents:
  - "8.1.  Use with SigComp\n   When STUN is used together with SigComp [RFC3320]\
    \ compressed SIP\n   messages over the same flow, the STUN messages are simply\
    \ sent\n   uncompressed, \"outside\" of SigComp.  This is supported by\n   multiplexing\
    \ STUN messages with SigComp messages by checking the two\n   topmost bits of\
    \ the message.  These bits are always one for SigComp,\n   or zero for STUN.\n\
    \      Note: All SigComp messages contain a prefix (the five most\n      significant\
    \ bits of the first byte are set to one) that does not\n      occur in UTF-8 [RFC3629]\
    \ encoded text messages, so for\n      applications that use this encoding (or\
    \ ASCII encoding) it is\n      possible to multiplex uncompressed application\
    \ messages and\n      SigComp messages on the same UDP port.  The most significant\
    \ two\n      bits of every STUN Binding method are both zeroes.  This, combined\n\
    \      with the magic cookie, aids in differentiating STUN packets from\n    \
    \  other protocols when STUN is multiplexed with other protocols on\n      the\
    \ same port.\n"
- title: 9.  Example Message Flow
  contents:
  - "9.  Example Message Flow\n   Below is an example message flow illustrating most\
    \ of the concepts\n   discussed in this specification.  In many cases, Via, Content-Length,\n\
    \   and Max-Forwards headers are omitted for brevity and readability.\n   In these\
    \ examples, \"EP1\" and \"EP2\" are outbound proxies, and \"Proxy\"\n   is the\
    \ authoritativeProxy.\n   The section is subdivided into independent calls flows;\
    \ however, they\n   are structured in sequential order of a hypothetical sequence\
    \ of call\n   flows.\n"
- title: 9.1.  Subscription to Configuration Package
  contents:
  - "9.1.  Subscription to Configuration Package\n   If the outbound proxy set is\
    \ already configured on Bob's UA, then\n   this subsection can be skipped.  Otherwise,\
    \ if the outbound proxy set\n   is learned through the configuration package,\
    \ Bob's UA sends a\n   SUBSCRIBE request for the UA profile configuration package\n\
    \   [CONFIG-FMWK].  This request is a poll (Expires is zero).  After\n   receiving\
    \ the NOTIFY request, Bob's UA fetches the external\n   configuration using HTTPS\
    \ (not shown) and obtains a configuration\n   file that contains the outbound-proxy-set\
    \ \"sip:ep1.example.com;lr\"\n   and \"sip:ep2.example.com;lr\".\n     [----example.com\
    \ domain-------------------------]\n     Bob         EP1   EP2     Proxy     \
    \        Config\n      |           |     |        |                  |\n    1)|SUBSCRIBE->|\
    \     |        |                  |\n    2)|           |---SUBSCRIBE Event: ua-profile\
    \ ->|\n    3)|           |<--200 OK -----------------------|\n    4)|<--200 OK--|\
    \     |        |                  |\n    5)|           |<--NOTIFY------------------------|\n\
    \    6)|<--NOTIFY--|     |        |                  |\n    7)|---200 OK->|  \
    \   |        |                  |\n    8)|           |---200 OK ---------------------->|\n\
    \      |           |     |        |                  |\n   In this example, the\
    \ DNS server happens to be configured so that sip:\n   example.com resolves to\
    \ EP1 and EP2.\n   Example Message #1:\n   SUBSCRIBE sip:00000000-0000-1000-8000-AABBCCDDEEFF@example.com\n\
    \     SIP/2.0\n   Via: SIP/2.0/TCP 192.0.2.2;branch=z9hG4bKnlsdkdj2\n   Max-Forwards:\
    \ 70\n   From: <anonymous@example.com>;tag=23324\n   To: <sip:00000000-0000-1000-8000-AABBCCDDEEFF@example.com>\n\
    \   Call-ID: nSz1TWN54x7My0GvpEBj\n   CSeq: 1 SUBSCRIBE\n   Event: ua-profile\
    \ ;profile-type=device\n    ;vendor=\"example.com\";model=\"uPhone\";version=\"\
    1.1\"\n   Expires: 0\n   Supported: path, outbound\n   Accept: message/external-body,\
    \ application/x-uPhone-config\n   Contact: <sip:192.0.2.2;transport=tcp;ob>\n\
    \    ;+sip.instance=\"<urn:uuid:00000000-0000-1000-8000-AABBCCDDEEFF>\"\n   Content-Length:\
    \ 0\n   In message #2, EP1 adds the following Record-Route header:\n   Record-Route:\n\
    \    <sip:GopIKSsn0oGLPXRdV9BAXpT3coNuiGKV@ep1.example.com;lr>\n   In message\
    \ #5, the configuration server sends a NOTIFY with an\n   external URL for Bob\
    \ to fetch his configuration.  The NOTIFY has a\n   Subscription-State header\
    \ that ends the subscription.\n   Message #5\n   NOTIFY sip:192.0.2.2;transport=tcp;ob\
    \ SIP/2.0\n   Via: SIP/2.0/TCP 192.0.2.5;branch=z9hG4bKn81dd2\n   Max-Forwards:\
    \ 70\n   To: <anonymous@example.com>;tag=23324\n   From: <sip:00000000-0000-1000-8000-AABBCCDDEEFF@example.com>;tag=0983\n\
    \   Call-ID: nSz1TWN54x7My0GvpEBj\n   CSeq: 1 NOTIFY\n   Route: <sip:GopIKSsn0oGLPXRdV9BAXpT3coNuiGKV@ep1.example.com;lr>\n\
    \   Subscription-State: terminated;reason=timeout\n   Event: ua-profile\n   Content-Type:\
    \ message/external-body; access-type=\"URL\"\n    ;expiration=\"Thu, 01 Jan 2009\
    \ 09:00:00 UTC\"\n    ;URL=\"http://example.com/uPhone.cfg\"\n    ;size=9999;hash=10AB568E91245681AC1B\n\
    \   Content-Length: 0\n   EP1 receives this NOTIFY request, strips off the Route\
    \ header,\n   extracts the flow-token, calculates the correct flow, and forwards\n\
    \   the request (message #6) over that flow to Bob.\n   Bob's UA fetches the configuration\
    \ file and learns the outbound proxy\n   set.\n"
- title: 9.2.  Registration
  contents:
  - "9.2.  Registration\n   Now that Bob's UA is configured with the outbound-proxy-set\
    \ whether\n   through configuration or using the configuration framework procedures\n\
    \   of the previous section, Bob's UA sends REGISTER requests through\n   each\
    \ edge proxy in the set.  Once the registrations succeed, Bob's UA\n   begins\
    \ sending CRLF keep-alives about every 2 minutes.\n     Bob         EP1   EP2\
    \     Proxy     Alice\n      |           |     |        |         |\n    9)|-REGISTER->|\
    \     |        |         |\n   10)|           |---REGISTER-->|         |\n   11)|\
    \           |<----200 OK---|         |\n   12)|<-200 OK---|     |        |   \
    \      |\n   13)|----REGISTER---->|        |         |\n   14)|           |  \
    \   |--REG-->|         |\n   15)|           |     |<-200---|         |\n   16)|<----200\
    \ OK------|        |         |\n      |           |     |        |         |\n\
    \      |  about 120 seconds later...        |\n      |           |     |     \
    \   |         |\n   17)|--2CRLF--->|     |        |         |\n   18)|<--CRLF----|\
    \     |        |         |\n   19)|------2CRLF----->|        |         |\n   20)|<------CRLF------|\
    \        |         |\n      |           |     |        |         |\n   In message\
    \ #9, Bob's UA sends its first registration through the\n   first edge proxy in\
    \ the outbound-proxy-set by including a loose\n   route.  The UA includes an instance-id\
    \ and reg-id in its Contact\n   header field value.  Note the option-tags in the\
    \ Supported header.\n   Message #9\n   REGISTER sip:example.com SIP/2.0\n   Via:\
    \ SIP/2.0/TCP 192.0.2.2;branch=z9hG4bKnashds7\n   Max-Forwards: 70\n   From: Bob\
    \ <sip:bob@example.com>;tag=7F94778B653B\n   To: Bob <sip:bob@example.com>\n \
    \  Call-ID: 16CB75F21C70\n   CSeq: 1 REGISTER\n   Supported: path, outbound\n\
    \   Route: <sip:ep1.example.com;lr>\n   Contact: <sip:bob@192.0.2.2;transport=tcp>;reg-id=1\n\
    \    ;+sip.instance=\"<urn:uuid:00000000-0000-1000-8000-AABBCCDDEEFF>\"\n   Content-Length:\
    \ 0\n   Message #10 is similar.  EP1 removes the Route header field value,\n \
    \  decrements Max-Forwards, and adds its Via header field value.  Since\n   EP1\
    \ is the first edge proxy, it adds a Path header with a flow token\n   and includes\
    \ the \"ob\" parameter.\n   Path: <sip:VskztcQ/S8p4WPbOnHbuyh5iJvJIW3ib@ep1.example.com;lr;ob>\n\
    \   Since the response to the REGISTER (message #11) contains the\n   outbound\
    \ option-tag in the Require header field, Bob's UA will know\n   that the registrar\
    \ used outbound binding rules.  The response also\n   contains the currently active\
    \ Contacts, and the Path for the current\n   registration.\n   Message #11\n \
    \  SIP/2.0 200 OK\n   Via: SIP/2.0/TCP 192.0.2.15;branch=z9hG4bKnuiqisi\n   Via:\
    \ SIP/2.0/TCP 192.0.2.2;branch=z9hG4bKnashds7\n   From: Bob <sip:bob@example.com>;tag=7F94778B653B\n\
    \   To: Bob <sip:bob@example.com>;tag=6AF99445E44A\n   Call-ID: 16CB75F21C70\n\
    \   CSeq: 1 REGISTER\n   Supported: path, outbound\n   Require: outbound\n   Contact:\
    \ <sip:bob@192.0.2.2;transport=tcp>;reg-id=1;expires=3600\n    ;+sip.instance=\"\
    <urn:uuid:00000000-0000-1000-8000-AABBCCDDEEFF>\"\n   Path: <sip:VskztcQ/S8p4WPbOnHbuyh5iJvJIW3ib@ep1.example.com;lr;ob>\n\
    \   Content-Length: 0\n   The second registration through EP2 (message #13) is\
    \ similar except\n   that the Call-ID has changed, the reg-id is 2, and the Route\
    \ header\n   goes through EP2.\n   Message #13\n   REGISTER sip:example.com SIP/2.0\n\
    \   Via: SIP/2.0/TCP 192.0.2.2;branch=z9hG4bKnqr9bym\n   Max-Forwards: 70\n  \
    \ From: Bob <sip:bob@example.com>;tag=755285EABDE2\n   To: Bob <sip:bob@example.com>\n\
    \   Call-ID: E05133BD26DD\n   CSeq: 1 REGISTER\n   Supported: path, outbound\n\
    \   Route: <sip:ep2.example.com;lr>\n   Contact: <sip:bob@192.0.2.2;transport=tcp>;reg-id=2\n\
    \    ;+sip.instance=\"<urn:uuid:00000000-0000-1000-8000-AABBCCDDEEFF>\"\n   Content-Length:\
    \ 0\n   Likewise in message #14, EP2 adds a Path header with flow token and\n\
    \   \"ob\" parameter.\n   Path: <sip:wazHDLdIMtUg6r0I/oRZ15zx3zHE1w1Z@ep2.example.com;lr;ob>\n\
    \   Message #16 tells Bob's UA that outbound registration was successful,\n  \
    \ and shows both Contacts.  Note that only the Path corresponding to\n   the current\
    \ registration is returned.\n   Message #16\n   SIP/2.0 200 OK\n   Via: SIP/2.0/TCP\
    \ 192.0.2.2;branch=z9hG4bKnqr9bym\n   From: Bob <sip:bob@example.com>;tag=755285EABDE2\n\
    \   To: Bob <sip:bob@example.com>;tag=49A9AD0B3F6A\n   Call-ID: E05133BD26DD\n\
    \   Supported: path, outbound\n   Require: outbound\n   CSeq: 1 REGISTER\n   Contact:\
    \ <sip:bob@192.0.2.2;transport=tcp>;reg-id=1;expires=3600\n    ;+sip.instance=\"\
    <urn:uuid:00000000-0000-1000-8000-AABBCCDDEEFF>\"\n   Contact: <sip:bob@192.0.2.2;transport=tcp>;reg-id=2;expires=3600\n\
    \    ;+sip.instance=\"<urn:uuid:00000000-0000-1000-8000-AABBCCDDEEFF>\"\n   Path:\
    \ <sip:wazHDLdIMtUg6r0I/oRZ15zx3zHE1w1Z@ep2.example.com;lr;ob>\n   Content-Length:\
    \ 0\n"
- title: 9.3.  Incoming Call and Proxy Crash
  contents:
  - "9.3.  Incoming Call and Proxy Crash\n   In this example, after registration,\
    \ EP1 crashes and reboots.  Before\n   Bob's UA notices that its flow to EP1 is\
    \ no longer responding, Alice\n   calls Bob.  Bob's authoritative proxy first\
    \ tries the flow to EP1,\n   but EP1 no longer has a flow to Bob, so it responds\
    \ with a 430 (Flow\n   Failed) response.  The proxy removes the stale registration\
    \ and tries\n   the next binding for the same instance.\n     Bob         EP1\
    \   EP2     Proxy     Alice\n      |           |     |        |         |\n  \
    \    |    CRASH  X     |        |         |\n      |        Reboot   |       \
    \ |         |\n      |           |     |        |         |\n   21)|         \
    \  |     |        |<-INVITE-|\n   22)|           |<---INVITE----|         |\n\
    \   23)|           |----430------>|         |\n   24)|           |     |<-INVITE|\
    \         |\n   25)|<---INVITE-------|        |         |\n   26)|----200 OK------>|\
    \        |         |\n   27)|           |     |200 OK->|         |\n   28)|  \
    \         |     |        |-200 OK->|\n   29)|           |     |<----------ACK----|\n\
    \   30)|<---ACK----------|        |         |\n      |           |     |     \
    \   |         |\n   31)|           |     |<----------BYE----|\n   32)|<---BYE----------|\
    \        |         |\n   33)|----200 OK------>|        |         |\n   34)|  \
    \         |     |--------200 OK--->|\n      |           |     |        |     \
    \    |\n   Message #21\n   INVITE sip:bob@example.com SIP/2.0\n   To: Bob <sip:bob@example.com>\n\
    \   From: Alice <sip:alice@a.example>;tag=02935\n   Call-ID: klmvCxVWGp6MxJp2T2mb\n\
    \   CSeq: 1 INVITE\n   Bob's proxy rewrites the Request-URI to the Contact URI\
    \ used in Bob's\n   registration, and places the path for one of the registrations\n\
    \   towards Bob's UA instance into a Route header field.  This Route goes\n  \
    \ through EP1.\n   Message #22\n   INVITE sip:bob@192.0.2.2;transport=tcp SIP/2.0\n\
    \   To: Bob <sip:bob@example.com>\n   From: Alice <sip:alice@a.example>;tag=02935\n\
    \   Call-ID: klmvCxVWGp6MxJp2T2mb\n   CSeq: 1 INVITE\n   Route: <sip:VskztcQ/S8p4WPbOnHbuyh5iJvJIW3ib@ep1.example.com;lr;ob>\n\
    \   Since EP1 just rebooted, it does not have the flow described in the\n   flow\
    \ token.  It returns a 430 (Flow Failed) response.\n   Message #23\n   SIP/2.0\
    \ 430 Flow Failed\n   To: Bob <sip:bob@example.com>\n   From: Alice <sip:alice@a.example>;tag=02935\n\
    \   Call-ID: klmvCxVWGp6MxJp2T2mb\n   CSeq: 1 INVITE\n   The proxy deletes the\
    \ binding for this path and tries to forward the\n   INVITE again, this time with\
    \ the path through EP2.\n   Message #24\n   INVITE sip:bob@192.0.2.2;transport=tcp\
    \ SIP/2.0\n   To: Bob <sip:bob@example.com>\n   From: Alice <sip:alice@a.example>;tag=02935\n\
    \   Call-ID: klmvCxVWGp6MxJp2T2mb\n   CSeq: 1 INVITE\n   Route: <sip:wazHDLdIMtUg6r0I/oRZ15zx3zHE1w1Z@ep2.example.com;lr;ob>\n\
    \   In message #25, EP2 needs to add a Record-Route header field value,\n   so\
    \ that any subsequent in-dialog messages from Alice's UA arrive at\n   Bob's UA.\
    \  EP2 can determine it needs to Record-Route since the\n   request is a dialog-forming\
    \ request and the Route header contained a\n   flow token and an \"ob\" parameter.\
    \  This Record-Route information is\n   passed back to Alice's UA in the responses\
    \ (messages #26, 27, and\n   28).\n   Message #25\n   INVITE sip:bob@192.0.2.2;transport=tcp\
    \ SIP/2.0\n   To: Bob <sip:bob@example.com>\n   From: Alice <sip:alice@a.example>;tag=02935\n\
    \   Call-ID: klmvCxVWGp6MxJp2T2mb\n   CSeq: 1 INVITE\n   Record-Route:\n     <sip:wazHDLdIMtUg6r0I/oRZ15zx3zHE1w1Z@ep2.example.com;lr>\n\
    \   Message #26\n   SIP/2.0 200 OK\n   To: Bob <sip:bob@example.com>;tag=skduk2\n\
    \   From: Alice <sip:alice@a.example>;tag=02935\n   Call-ID: klmvCxVWGp6MxJp2T2mb\n\
    \   CSeq: 1 INVITE\n   Record-Route:\n     <sip:wazHDLdIMtUg6r0I/oRZ15zx3zHE1w1Z@ep2.example.com;lr>\n\
    \   At this point, both UAs have the correct route-set for the dialog.\n   Any\
    \ subsequent requests in this dialog will route correctly.  For\n   example, the\
    \ ACK request in message #29 is sent from Alice's UA\n   directly to EP2.  The\
    \ BYE request in message #31 uses the same route-\n   set.\n   Message #29\n \
    \  ACK sip:bob@192.0.2.2;transport=tcp SIP/2.0\n   To: Bob <sip:bob@example.com>;tag=skduk2\n\
    \   From: Alice <sip:alice@a.example>;tag=02935\n   Call-ID: klmvCxVWGp6MxJp2T2mb\n\
    \   CSeq: 1 ACK\n   Route: <sip:wazHDLdIMtUg6r0I/oRZ15zx3zHE1w1Z@ep2.example.com;lr>\n\
    \   Message #31\n   BYE sip:bob@192.0.2.2;transport=tcp SIP/2.0\n   To: Bob <sip:bob@example.com>;tag=skduk2\n\
    \   From: Alice <sip:alice@a.example>;tag=02935\n   Call-ID: klmvCxVWGp6MxJp2T2mb\n\
    \   CSeq: 2 BYE\n   Route: <sip:wazHDLdIMtUg6r0I/oRZ15zx3zHE1w1Z@ep2.example.com;lr>\n"
- title: 9.4.  Re-Registration
  contents:
  - "9.4.  Re-Registration\n   Somewhat later, Bob's UA sends keep-alives to both\
    \ its edge proxies,\n   but it discovers that the flow with EP1 failed.  Bob's\
    \ UA re-\n   registers through EP1 using the same reg-id and Call-ID it previously\n\
    \   used.\n     Bob         EP1   EP2     Proxy     Alice\n      |           |\
    \     |        |         |\n   35)|------2CRLF----->|        |         |\n   36)|<------CRLF------|\
    \        |         |\n   37)|--2CRLF->X |     |        |         |\n      |  \
    \         |     |        |         |\n   38)|-REGISTER->|     |        |     \
    \    |\n   39)|           |---REGISTER-->|         |\n   40)|           |<----200\
    \ OK---|         |\n   41)|<-200 OK---|     |        |         |\n      |    \
    \       |     |        |         |\n   Message #38\n   REGISTER sip:example.com\
    \ SIP/2.0\n   From: Bob <sip:bob@example.com>;tag=7F94778B653B\n   To: Bob <sip:bob@example.com>\n\
    \   Call-ID: 16CB75F21C70\n   CSeq: 2 REGISTER\n   Supported: path, outbound\n\
    \   Route: <sip:ep1.example.com;lr>\n   Contact: <sip:bob@192.0.2.2;transport=tcp>;reg-id=1\n\
    \    ;+sip.instance=\"<urn:uuid:00000000-0000-1000-8000-AABBCCDDEEFF>\"\n   In\
    \ message #39, EP1 inserts a Path header with a new flow token:\n   Path: <sip:3yJEbr1GYZK9cPYk5Snocez6DzO7w+AX@ep1.example.com;lr;ob>\n"
- title: 9.5.  Outgoing Call
  contents:
  - "9.5.  Outgoing Call\n   Finally, Bob makes an outgoing call to Alice.  Bob's\
    \ UA includes an\n   \"ob\" parameter in its Contact URI in message #42.  EP1\
    \ adds a Record-\n   Route with a flow-token in message #43.  The route-set is\
    \ returned to\n   Bob in the response (messages #45, 46, and 47), and either Bob\
    \ or\n   Alice can send in-dialog requests.\n     Bob         EP1   EP2     Proxy\
    \     Alice\n      |           |     |        |         |\n   42)|--INVITE-->|\
    \     |        |         |\n   43)|           |---INVITE---->|         |\n   44)|\
    \           |     |        |-INVITE->|\n   45)|           |     |        |<--200---|\n\
    \   46)|           |<----200 OK---|         |\n   47)|<-200 OK---|     |     \
    \   |         |\n   48)|--ACK----->|     |        |         |\n   49)|       \
    \    |-----ACK--------------->|\n      |           |     |        |         |\n\
    \   50)|-- BYE---->|     |        |         |\n   51)|           |-----------BYE--------->|\n\
    \   52)|           |<----------200 OK-------|\n   53)|<--200 OK--|     |     \
    \   |         |\n      |           |     |        |         |\n   Message #42\n\
    \   INVITE sip:alice@a.example SIP/2.0\n   From: Bob <sip:bob@example.com>;tag=ldw22z\n\
    \   To: Alice <sip:alice@a.example>\n   Call-ID: 95KGsk2V/Eis9LcpBYy3\n   CSeq:\
    \ 1 INVITE\n   Route: <sip:ep1.example.com;lr>\n   Contact: <sip:bob@192.0.2.2;transport=tcp;ob>\n\
    \   In message #43, EP1 adds the following Record-Route header.\n   Record-Route:\n\
    \     <sip:3yJEbr1GYZK9cPYk5Snocez6DzO7w+AX@ep1.example.com;lr>\n   When EP1 receives\
    \ the BYE (message #50) from Bob's UA, it can tell\n   that the request is an\
    \ \"outgoing\" request (since the source of the\n   request matches the flow in\
    \ the flow token) and simply deletes its\n   Route header field value and forwards\
    \ the request on to Alice's UA.\n   Message #50\n   BYE sip:alice@a.example SIP/2.0\n\
    \   From: Bob <sip:bob@example.com>;tag=ldw22z\n   To: Alice <sip:alice@a.example>;tag=plqus8\n\
    \   Call-ID: 95KGsk2V/Eis9LcpBYy3\n   CSeq: 2 BYE\n   Route: <sip:3yJEbr1GYZK9cPYk5Snocez6DzO7w+AX@ep1.example.com;lr>\n\
    \   Contact: <sip:bob@192.0.2.2;transport=tcp;ob>\n"
- title: 10.  Grammar
  contents:
  - "10.  Grammar\n   This specification defines a new header field \"Flow-Timer\"\
    , and new\n   Contact header field parameters, \"reg-id\" and \"+sip.instance\"\
    .  The\n   grammar includes the definitions from [RFC3261].  Flow-Timer is an\n\
    \   extension-header from the message-header in the [RFC3261] ABNF.\n   The ABNF\
    \ [RFC5234] is:\n    Flow-Timer     = \"Flow-Timer\" HCOLON 1*DIGIT\n    contact-params\
    \ =/ c-p-reg / c-p-instance\n    c-p-reg        = \"reg-id\" EQUAL 1*DIGIT ; 1\
    \ to (2^31 - 1)\n    c-p-instance   =  \"+sip.instance\" EQUAL\n             \
    \         DQUOTE \"<\" instance-val \">\" DQUOTE\n    instance-val   = 1*uric\
    \ ; defined in RFC 3261\n   The value of the reg-id MUST NOT be 0 and MUST be\
    \ less than 2^31.\n"
- title: 11.  IANA Considerations
  contents:
  - '11.  IANA Considerations

    '
- title: 11.1.  Flow-Timer Header Field
  contents:
  - "11.1.  Flow-Timer Header Field\n   This specification defines a new SIP header\
    \ field \"Flow-Timer\" whose\n   syntax is defined in Section 10.\n     Header\
    \ Name        compact    Reference\n     -----------------  -------    ---------\n\
    \     Flow-Timer                    [RFC5626]\n"
- title: 11.2.  "reg-id" Contact Header Field Parameter
  contents:
  - "11.2.  \"reg-id\" Contact Header Field Parameter\n   This specification defines\
    \ a new Contact header field parameter\n   called reg-id in the \"Header Field\
    \ Parameters and Parameter Values\"\n   sub-registry as per the registry created\
    \ by [RFC3968].  The syntax is\n   defined in Section 10.  The required information\
    \ is:\n                                                  Predefined\n   Header\
    \ Field            Parameter Name         Values      Reference\n   ----------------------\
    \  ---------------------  ----------  ---------\n   Contact                 reg-id\
    \                 No          [RFC5626]\n"
- title: 11.3.  SIP/SIPS URI Parameters
  contents:
  - "11.3.  SIP/SIPS URI Parameters\n   This specification augments the \"SIP/SIPS\
    \ URI Parameters\" sub-\n   registry as per the registry created by [RFC3969].\
    \  The required\n   information is:\n   Parameter Name     Predefined Values \
    \    Reference\n   --------------     -----------------     ---------\n   ob \
    \                No                    [RFC5626]\n"
- title: 11.4.  SIP Option Tag
  contents:
  - "11.4.  SIP Option Tag\n   This specification registers a new SIP option tag,\
    \ as per the\n   guidelines in Section 27.1 of [RFC3261].\n   Name:  outbound\n\
    \   Description:  This option-tag is used to identify UAs and registrars\n   \
    \   that support extensions for Client-Initiated Connections.  A UA\n      places\
    \ this option in a Supported header to communicate its\n      support for this\
    \ extension.  A registrar places this option-tag in\n      a Require header to\
    \ indicate to the registering User Agent that\n      the registrar used registrations\
    \ using the binding rules defined\n      in this extension.\n"
- title: 11.5.  430 (Flow Failed) Response Code
  contents:
  - "11.5.  430 (Flow Failed) Response Code\n   This document registers a new SIP\
    \ response code (430 Flow Failed), as\n   per the guidelines in Section 27.4 of\
    \ [RFC3261].  This response code\n   is used by an edge proxy to indicate to the\
    \ Authoritative Proxy that\n   a specific flow to a UA instance has failed.  Other\
    \ flows to the same\n   instance could still succeed.  The Authoritative Proxy\
    \ SHOULD attempt\n   to forward to another target (flow) with the same instance-id\
    \ and\n   AOR.  Endpoints should never receive a 430 response.  If an endpoint\n\
    \   receives a 430 response, it should treat it as a 400 (Bad Request)\n   per\
    \ normal procedures, as in Section 8.1.3.2 of [RFC3261].  This\n   response code\
    \ is defined by the following information, which has been\n   added to the method\
    \ and response-code sub-registry under the SIP\n   Parameters registry.\n    \
    \ Response Code                               Reference\n     ------------------------------------------\
    \  ---------\n     Request Failure 4xx\n       430 Flow Failed               \
    \            [RFC5626]\n"
- title: 11.6.  439 (First Hop Lacks Outbound Support) Response Code
  contents:
  - "11.6.  439 (First Hop Lacks Outbound Support) Response Code\n   This document\
    \ registers a new SIP response code (439 First Hop Lacks\n   Outbound Support),\
    \ as per the guidelines in Section 27.4 of\n   [RFC3261].  This response code\
    \ is used by a registrar to indicate\n   that it supports the 'outbound' feature\
    \ described in this\n   specification, but that the first outbound proxy that\
    \ the user is\n   attempting to register through does not.  Note that this response\n\
    \   code is only appropriate in the case that the registering User Agent\n   advertises\
    \ support for outbound processing by including the outbound\n   option tag in\
    \ a Supported header field.  Proxies MUST NOT send a 439\n   response to any requests\
    \ that do not contain a \"reg-id\" parameter and\n   an outbound option tag in\
    \ a Supported header field.  This response\n   code is defined by the following\
    \ information, which has been added to\n   the method and response-code sub-registry\
    \ under the SIP Parameters\n   registry.\n     Response Code                 \
    \              Reference\n     ------------------------------------------  ---------\n\
    \     Request Failure 4xx\n       439 First Hop Lacks Outbound Support      [RFC&rfc.number;]\n"
- title: 11.7.  Media Feature Tag
  contents:
  - "11.7.  Media Feature Tag\n   This section registers a new media feature tag,\
    \ per the procedures\n   defined in [RFC2506].  The tag is placed into the sip\
    \ tree, which is\n   defined in [RFC3840].\n   Media feature tag name:  sip.instance\n\
    \   ASN.1 Identifier:  23\n   Summary of the media feature indicated by this tag:\
    \  This feature tag\n      contains a string containing a URN that indicates a\
    \ unique\n      identifier associated with the UA instance registering the\n \
    \     Contact.\n   Values appropriate for use with this feature tag:  String (equality\n\
    \      relationship).\n   The feature tag is intended primarily for use in the\
    \ following\n      applications, protocols, services, or negotiation mechanisms:\n\
    \      This feature tag is most useful in a communications application,\n    \
    \  for describing the capabilities of a device, such as a phone or\n      PDA.\n\
    \   Examples of typical use:  Routing a call to a specific device.\n   Related\
    \ standards or documents:  RFC 5626\n   Security Considerations:  This media feature\
    \ tag can be used in ways\n      which affect application behaviors.  For example,\
    \ the SIP caller\n      preferences extension [RFC3841] allows for call routing\
    \ decisions\n      to be based on the values of these parameters.  Therefore,\
    \ if an\n      attacker can modify the values of this tag, they might be able\
    \ to\n      affect the behavior of applications.  As a result, applications\n\
    \      that utilize this media feature tag SHOULD provide a means for\n      ensuring\
    \ its integrity.  Similarly, this feature tag should only\n      be trusted as\
    \ valid when it comes from the user or User Agent\n      described by the tag.\
    \  As a result, protocols for conveying this\n      feature tag SHOULD provide\
    \ a mechanism for guaranteeing\n      authenticity.\n"
- title: 12.  Security Considerations
  contents:
  - "12.  Security Considerations\n   One of the key security concerns in this work\
    \ is making sure that an\n   attacker cannot hijack the sessions of a valid user\
    \ and cause all\n   calls destined to that user to be sent to the attacker.  Note\
    \ that\n   the intent is not to prevent existing active attacks on SIP UDP and\n\
    \   TCP traffic, but to ensure that no new attacks are added by\n   introducing\
    \ the outbound mechanism.\n   The simple case is when there are no edge proxies.\
    \  In this case, the\n   only time an entry can be added to the routing for a\
    \ given AOR is\n   when the registration succeeds.  SIP already protects against\n\
    \   attackers being able to successfully register, and this scheme relies\n  \
    \ on that security.  Some implementers have considered the idea of just\n   saving\
    \ the instance-id without relating it to the AOR with which it\n   registered.\
    \  This idea will not work because an attacker's UA can\n   impersonate a valid\
    \ user's instance-id and hijack that user's calls.\n   The more complex case involves\
    \ one or more edge proxies.  When a UA\n   sends a REGISTER request through an\
    \ edge proxy on to the registrar,\n   the edge proxy inserts a Path header field\
    \ value.  If the\n   registration is successfully authenticated, the registrar\
    \ stores the\n   value of the Path header field.  Later, when the registrar forwards\
    \ a\n   request destined for the UA, it copies the stored value of the Path\n\
    \   header field into the Route header field of the request and forwards\n   the\
    \ request to the edge proxy.\n   The only time an edge proxy will route over a\
    \ particular flow is when\n   it has received a Route header that has the flow\
    \ identifier\n   information that it has created.  An incoming request would have\n\
    \   gotten this information from the registrar.  The registrar will only\n   save\
    \ this information for a given AOR if the registration for the AOR\n   has been\
    \ successful; and the registration will only be successful if\n   the UA can correctly\
    \ authenticate.  Even if an attacker has spoofed\n   some bad information in the\
    \ Path header sent to the registrar, the\n   attacker will not be able to get\
    \ the registrar to accept this\n   information for an AOR that does not belong\
    \ to the attacker.  The\n   registrar will not hand out this bad information to\
    \ others, and\n   others will not be misled into contacting the attacker.\n  \
    \ The Security Considerations discussed in [RFC3261] and [RFC3327] are\n   also\
    \ relevant to this document.  For the security considerations of\n   generating\
    \ flow tokens, please also see Section 5.2.  A discussion of\n   preventing the\
    \ avalanche restart problem is in Section 4.5.\n   This document does not change\
    \ the mandatory-to-implement security\n   mechanisms in SIP.  User Agents are\
    \ already required to implement\n   Digest authentication while support of TLS\
    \ is recommended; proxy\n   servers are already required to implement Digest and\
    \ TLS.\n"
- title: 13.  Operational Notes on Transports
  contents:
  - "13.  Operational Notes on Transports\n   This entire section is non-normative.\n\
    \   [RFC3261] requires proxies, registrars, and User Agents to implement\n   both\
    \ TCP and UDP but deployments can chose which transport protocols\n   they want\
    \ to use.  Deployments need to be careful in choosing what\n   transports to use.\
    \  Many SIP features and extensions, such as large\n   presence notification bodies,\
    \ result in SIP requests that can be too\n   large to be reasonably transported\
    \ over UDP.  [RFC3261] states that\n   when a request is too large for UDP, the\
    \ device sending the request\n   attempts to switch over to TCP.  It is important\
    \ to note that when\n   using outbound, this will only work if the UA has formed\
    \ both UDP and\n   TCP outbound flows.  This specification allows the UA to do\
    \ so, but\n   in most cases it will probably make more sense for the UA to form\
    \ a\n   TCP outbound connection only, rather than forming both UDP and TCP\n \
    \  flows.  One of the key reasons that many deployments choose not to\n   use\
    \ TCP has to do with the difficulty of building proxies that can\n   maintain\
    \ a very large number of active TCP connections.  Many\n   deployments today use\
    \ SIP in such a way that the messages are small\n   enough that they work over\
    \ UDP but they can not take advantage of all\n   the functionality SIP offers.\
    \  Deployments that use only UDP outbound\n   connections are going to fail with\
    \ sufficiently large SIP messages.\n"
- title: 14.  Requirements
  contents:
  - "14.  Requirements\n   This specification was developed to meet the following\
    \ requirements:\n   1.  Must be able to detect that a UA supports these mechanisms.\n\
    \   2.  Support UAs behind NATs.\n   3.  Support TLS to a UA without a stable\
    \ DNS name or IP address.\n   4.  Detect failure of a connection and be able to\
    \ correct for this.\n   5.  Support many UAs simultaneously rebooting.\n   6.\
    \  Support a NAT rebooting or resetting.\n   7.  Minimize initial startup load\
    \ on a proxy.\n   8.  Support architectures with edge proxies.\n"
- title: 15.  Acknowledgments
  contents:
  - "15.  Acknowledgments\n   Francois Audet acted as document shepherd for this document,\
    \ tracking\n   hundreds of comments and incorporating many grammatical fixes as\
    \ well\n   as prodding the editors to \"get on with it\".  Jonathan Rosenberg,\n\
    \   Erkki Koivusalo, and Byron Campen provided many comments and useful\n   text.\
    \  Dave Oran came up with the idea of using the most recent\n   registration first\
    \ in the proxy.  Alan Hawrylyshen co-authored the\n   document that formed the\
    \ initial text of this specification.\n   Additionally, many of the concepts here\
    \ originated at a connection\n   reuse meeting at IETF 60 that included the authors,\
    \ Jon Peterson,\n   Jonathan Rosenberg, Alan Hawrylyshen, and Paul Kyzivat.  The\
    \ TCP\n   design team consisting of Chris Boulton, Scott Lawrence, Rajnish\n \
    \  Jain, Vijay K. Gurbani, and Ganesh Jayadevan provided input and text.\n   Nils\
    \ Ohlmeier provided many fixes and initial implementation\n   experience.  In\
    \ addition, thanks to the following folks for useful\n   comments: Francois Audet,\
    \ Flemming Andreasen, Mike Hammer, Dan Wing,\n   Srivatsa Srinivasan, Dale Worely,\
    \ Juha Heinanen, Eric Rescorla,\n   Lyndsay Campbell, Christer Holmberg, Kevin\
    \ Johns, Jeroen van Bemmel,\n   Derek MacDonald, Dean Willis, and Robert Sparks.\n"
- title: 16.  References
  contents:
  - '16.  References

    '
- title: 16.1.  Normative References
  contents:
  - "16.1.  Normative References\n   [RFC2119]      Bradner, S., \"Key words for use\
    \ in RFCs to Indicate\n                  Requirement Levels\", BCP 14, RFC 2119,\
    \ March 1997.\n   [RFC2141]      Moats, R., \"URN Syntax\", RFC 2141, May 1997.\n\
    \   [RFC2506]      Holtman, K., Mutz, A., and T. Hardie, \"Media Feature\n   \
    \               Tag Registration Procedure\", BCP 31, RFC 2506,\n            \
    \      March 1999.\n   [RFC3261]      Rosenberg, J., Schulzrinne, H., Camarillo,\
    \ G.,\n                  Johnston, A., Peterson, J., Sparks, R., Handley, M.,\n\
    \                  and E. Schooler, \"SIP: Session Initiation Protocol\",\n  \
    \                RFC 3261, June 2002.\n   [RFC3263]      Rosenberg, J. and H.\
    \ Schulzrinne, \"Session Initiation\n                  Protocol (SIP): Locating\
    \ SIP Servers\", RFC 3263,\n                  June 2002.\n   [RFC3327]      Willis,\
    \ D. and B. Hoeneisen, \"Session Initiation\n                  Protocol (SIP)\
    \ Extension Header Field for Registering\n                  Non-Adjacent Contacts\"\
    , RFC 3327, December 2002.\n   [RFC3581]      Rosenberg, J. and H. Schulzrinne,\
    \ \"An Extension to the\n                  Session Initiation Protocol (SIP) for\
    \ Symmetric\n                  Response Routing\", RFC 3581, August 2003.\n  \
    \ [RFC3629]      Yergeau, F., \"UTF-8, a transformation format of ISO\n      \
    \            10646\", STD 63, RFC 3629, November 2003.\n   [RFC3840]      Rosenberg,\
    \ J., Schulzrinne, H., and P. Kyzivat,\n                  \"Indicating User Agent\
    \ Capabilities in the Session\n                  Initiation Protocol (SIP)\",\
    \ RFC 3840, August 2004.\n   [RFC3841]      Rosenberg, J., Schulzrinne, H., and\
    \ P. Kyzivat,\n                  \"Caller Preferences for the Session Initiation\n\
    \                  Protocol (SIP)\", RFC 3841, August 2004.\n   [RFC3968]    \
    \  Camarillo, G., \"The Internet Assigned Number Authority\n                 \
    \ (IANA) Header Field Parameter Registry for the Session\n                  Initiation\
    \ Protocol (SIP)\", BCP 98, RFC 3968,\n                  December 2004.\n   [RFC3969]\
    \      Camarillo, G., \"The Internet Assigned Number Authority\n             \
    \     (IANA) Uniform Resource Identifier (URI) Parameter\n                  Registry\
    \ for the Session Initiation Protocol (SIP)\",\n                  BCP 99, RFC\
    \ 3969, December 2004.\n   [RFC4122]      Leach, P., Mealling, M., and R. Salz,\
    \ \"A Universally\n                  Unique IDentifier (UUID) URN Namespace\"\
    , RFC 4122,\n                  July 2005.\n   [RFC5234]      Crocker, D. and P.\
    \ Overell, \"Augmented BNF for Syntax\n                  Specifications: ABNF\"\
    , STD 68, RFC 5234, January 2008.\n   [RFC5389]      Rosenberg, J., Mahy, R.,\
    \ Matthews, P., and D. Wing,\n                  \"Session Traversal Utilities\
    \ for NAT (STUN)\",\n                  RFC 5389, October 2008.\n"
- title: 16.2.  Informative References
  contents:
  - "16.2.  Informative References\n   [CONFIG-FMWK]  Petrie, D. and S. Channabasappa,\
    \ Ed., \"A Framework for\n                  Session Initiation Protocol User Agent\
    \ Profile\n                  Delivery\", Work in Progress, February 2008.\n  \
    \ [NAT-SCEN]     Boulton, C., Rosenberg, J., Camarillo, G., and F.\n         \
    \         Audet, \"Best Current Practices for NAT Traversal for\n            \
    \      Client-Server SIP\", Work in Progress, September 2008.\n   [RFC0768]  \
    \    Postel, J., \"User Datagram Protocol\", STD 6, RFC 768,\n               \
    \   August 1980.\n   [RFC0793]      Postel, J., \"Transmission Control Protocol\"\
    , STD 7,\n                  RFC 793, September 1981.\n   [RFC1035]      Mockapetris,\
    \ P., \"Domain names - implementation and\n                  specification\",\
    \ STD 13, RFC 1035, November 1987.\n   [RFC2104]      Krawczyk, H., Bellare, M.,\
    \ and R. Canetti, \"HMAC:\n                  Keyed-Hashing for Message Authentication\"\
    , RFC 2104,\n                  February 1997.\n   [RFC2131]      Droms, R., \"\
    Dynamic Host Configuration Protocol\",\n                  RFC 2131, March 1997.\n\
    \   [RFC2782]      Gulbrandsen, A., Vixie, P., and L. Esibov, \"A DNS RR\n   \
    \               for specifying the location of services (DNS SRV)\",\n       \
    \           RFC 2782, February 2000.\n   [RFC3320]      Price, R., Bormann, C.,\
    \ Christoffersson, J., Hannu,\n                  H., Liu, Z., and J. Rosenberg,\
    \ \"Signaling Compression\n                  (SigComp)\", RFC 3320, January 2003.\n\
    \   [RFC3489]      Rosenberg, J., Weinberger, J., Huitema, C., and R.\n      \
    \            Mahy, \"STUN - Simple Traversal of User Datagram\n              \
    \    Protocol (UDP) Through Network Address Translators\n                  (NATs)\"\
    , RFC 3489, March 2003.\n   [RFC3986]      Berners-Lee, T., Fielding, R., and\
    \ L. Masinter,\n                  \"Uniform Resource Identifier (URI): Generic\
    \ Syntax\",\n                  STD 66, RFC 3986, January 2005.\n   [RFC4340] \
    \     Kohler, E., Handley, M., and S. Floyd, \"Datagram\n                  Congestion\
    \ Control Protocol (DCCP)\", RFC 4340,\n                  March 2006.\n   [RFC4648]\
    \      Josefsson, S., \"The Base16, Base32, and Base64 Data\n                \
    \  Encodings\", RFC 4648, October 2006.\n   [RFC4960]      Stewart, R., \"Stream\
    \ Control Transmission Protocol\",\n                  RFC 4960, September 2007.\n\
    \   [RFC5246]      Dierks, T. and E. Rescorla, \"The Transport Layer\n       \
    \           Security (TLS) Protocol Version 1.2\", RFC 5246,\n               \
    \   August 2008.\n   [RFC5627]      Rosenberg, J., \"Obtaining and Using Globally\
    \ Routable\n                  User Agent URIs (GRUUs) in the Session Initiation\n\
    \                  Protocol (SIP)\", RFC 5627, October 2009.\n"
- title: Appendix A.  Default Flow Registration Backoff Times
  contents:
  - "Appendix A.  Default Flow Registration Backoff Times\n   The base-time used for\
    \ the flow re-registration backoff times\n   described in Section 4.5 are configurable.\
    \  If the base-time-all-fail\n   value is set to the default of 30 seconds and\
    \ the base-time-not-\n   failed value is set to the default of 90 seconds, the\
    \ following table\n   shows the resulting amount of time the UA will wait to retry\n\
    \   registration.\n     +-------------------+--------------------+---------------------+\n\
    \     | # of reg failures | all flows unusable | > 1 non-failed flow |\n     +-------------------+--------------------+---------------------+\n\
    \     | 0                 | 0 s                | 0 s                 |\n     |\
    \ 1                 | 30-60 s            | 90-180 s            |\n     | 2   \
    \              | 1-2 min            | 3-6 min             |\n     | 3        \
    \         | 2-4 min            | 6-12 min            |\n     | 4             \
    \    | 4-8 min            | 12-24 min           |\n     | 5                 |\
    \ 8-16 min           | 15-30 min           |\n     | 6 or more         | 15-30\
    \ min          | 15-30 min           |\n     +-------------------+--------------------+---------------------+\n"
- title: Appendix B.  ABNF
  contents:
  - "Appendix B.  ABNF\n   This appendix contains the ABNF defined earlier in this\
    \ document.\n      CRLF = CR LF\n      double-CRLF = CR LF CR LF\n      CR = %x0D\n\
    \      LF = %x0A\n      Flow-Timer     = \"Flow-Timer\" HCOLON 1*DIGIT\n     \
    \ contact-params =/ c-p-reg / c-p-instance\n      c-p-reg        = \"reg-id\"\
    \ EQUAL 1*DIGIT ; 1 to (2^31 - 1)\n      c-p-instance   =  \"+sip.instance\" EQUAL\n\
    \                        DQUOTE \"<\" instance-val \">\" DQUOTE\n      instance-val\
    \   = 1*uric ; defined in RFC 3261\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Cullen Jennings (editor)\n   Cisco Systems\n   170 West\
    \ Tasman Drive\n   Mailstop SJC-21/2\n   San Jose, CA  95134\n   USA\n   Phone:\
    \ +1 408 902-3341\n   EMail: fluffy@cisco.com\n   Rohan Mahy (editor)\n   Unaffiliated\n\
    \   EMail: rohan@ekabal.com\n   Francois Audet (editor)\n   Skype Labs\n   EMail:\
    \ francois.audet@skypelabs.com\n"
