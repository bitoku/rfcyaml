- title: __initial_text__
  contents:
  - '    Open Pluggable Edge Services (OPES) Callout Protocol (OCP) Core

    '
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2005).\n"
- title: Abstract
  contents:
  - "Abstract\n   This document specifies the core of the Open Pluggable Edge Services\n\
    \   (OPES) Callout Protocol (OCP).  OCP marshals application messages\n   from\
    \ other communication protocols: An OPES intermediary sends\n   original application\
    \ messages to a callout server; the callout server\n   sends adapted application\
    \ messages back to the processor.  OCP is\n   designed with typical adaptation\
    \ tasks in mind (e.g., virus and spam\n   management, language and format translation,\
    \ message anonymization,\n   or advertisement manipulation).  As defined in this\
    \ document, the OCP\n   Core consists of application-agnostic mechanisms essential\
    \ for\n   efficient support of typical adaptations.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction . . . . . . . . . . . . . . . . . . .\
    \ . . . . . .  3\n       1.1.  Scope  . . . . . . . . . . . . . . . . . . . .\
    \ . . . . .  4\n       1.2.  OPES Document Map  . . . . . . . . . . . . . . .\
    \ . . . .  5\n       1.3.  Terminology  . . . . . . . . . . . . . . . . . . .\
    \ . . .  6\n   2.  Overall Operation  . . . . . . . . . . . . . . . . . . . .\
    \ . .  7\n       2.1.  Initialization . . . . . . . . . . . . . . . . . . . .\
    \ .  7\n       2.2.  Original Dataflow  . . . . . . . . . . . . . . . . . . .\
    \  8\n       2.3.  Adapted Dataflow . . . . . . . . . . . . . . . . . . . .  8\n\
    \       2.4.  Multiple Application Messages  . . . . . . . . . . . . .  9\n  \
    \     2.5.  Termination  . . . . . . . . . . . . . . . . . . . . . .  9\n    \
    \   2.6.  Message Exchange Patterns  . . . . . . . . . . . . . . .  9\n      \
    \ 2.7.  Timeouts . . . . . . . . . . . . . . . . . . . . . . . . 10\n       2.8.\
    \  Environment  . . . . . . . . . . . . . . . . . . . . . . 11\n   3.  Messages\
    \ . . . . . . . . . . . . . . . . . . . . . . . . . . . 11\n       3.1.  Message\
    \ Format . . . . . . . . . . . . . . . . . . . . . 12\n       3.2.  Message Rendering\
    \  . . . . . . . . . . . . . . . . . . . 13\n       3.3.  Message Examples . .\
    \ . . . . . . . . . . . . . . . . . . 14\n       3.4.  Message Names  . . . .\
    \ . . . . . . . . . . . . . . . . . 15\n   4.  Transactions . . . . . . . . .\
    \ . . . . . . . . . . . . . . . . 15\n   5.  Invalid Input  . . . . . . . . .\
    \ . . . . . . . . . . . . . . . 16\n   6.  Negotiation  . . . . . . . . . . .\
    \ . . . . . . . . . . . . . . 16\n       6.1.  Negotiation Phase  . . . . . .\
    \ . . . . . . . . . . . . . 17\n       6.2.  Negotiation Examples . . . . . .\
    \ . . . . . . . . . . . . 18\n   7.  'Data Preservation' Optimization . . . .\
    \ . . . . . . . . . . . 20\n   8.  'Premature Dataflow Termination' Optimizations\
    \ . . . . . . . . 21\n       8.1.  Original Dataflow  . . . . . . . . . . . .\
    \ . . . . . . . 22\n       8.2.  Adapted Dataflow . . . . . . . . . . . . . .\
    \ . . . . . . 23\n       8.3.  Getting Out of the Loop  . . . . . . . . . . .\
    \ . . . . . 24\n   9.  Protocol Element Type Declaration Mnemonic (PETDM) . .\
    \ . . . . 25\n       9.1     Optional Parameters  . . . . . . . . . . . . . .\
    \ . . . 27\n   10. Message Parameter Types  . . . . . . . . . . . . . . . . .\
    \ . . 28\n       10.1.   uri. . . . . . . . . . . . . . . . . . . . . . . . .\
    \ . 28\n       10.2.   uni. . . . . . . . . . . . . . . . . . . . . . . . . .\
    \ 28\n       10.3.   size . . . . . . . . . . . . . . . . . . . . . . . . . 29\n\
    \       10.4.   offset . . . . . . . . . . . . . . . . . . . . . . . . 29\n  \
    \     10.5.   percent  . . . . . . . . . . . . . . . . . . . . . . . 29\n    \
    \   10.6.   boolean. . . . . . . . . . . . . . . . . . . . . . . . 30\n      \
    \ 10.7.   xid .  . . . . . . . . . . . . . . . . . . . . . . . . 30\n       10.8.\
    \   sg-id. . . . . . . . . . . . . . . . . . . . . . . . . 30\n       10.9.  \
    \ modp. . . . . . . . . . . . . . . . . . . . . . . . .  30\n       10.10.  result.\
    \ . . . . . . . . . . . . . . . . . . . . . . .  30\n       10.11.  feature .\
    \ . . . . . . . . . . . . . . . . . . . . . .  32\n       10.12.  features. .\
    \ . . . . . . . . . . . . . . . . . . . . .  32\n       10.13.  service . . .\
    \ . . . . . . . . . . . . . . . . . . . .  32\n       10.14.  services. . . .\
    \ . . . . . . . . . . . . . . . . . . .  33\n       10.15.  Dataflow Specializations.\
    \ . . . . . . . . . . . . . .  33\n   11. Message Definitions . . . . . . . .\
    \ . . . . . . . . . . . . .  33\n       11.1.   Connection Start (CS) . . . .\
    \ . . . . . . . . . . . .  34\n       11.2.   Connection End (CE) . . . . . .\
    \ . . . . . . . . . . .  35\n       11.3.   Service Group Created (SGC) . . .\
    \ . . . . . . . . . .  35\n       11.4.   Service Group Destroyed (SGD) . . .\
    \ . . . . . . . . .  36\n       11.5.   Transaction Start (TS). . . . . . . .\
    \ . . . . . . . .  36\n       11.6.   Transaction End (TE). . . . . . . . . .\
    \ . . . . . . .  36\n       11.7.   Application Message Start (AMS) . . . . .\
    \ . . . . . .  37\n       11.8.   Application Message End (AME) . . . . . . .\
    \ . . . . .  37\n       11.9.   Data Use Mine (DUM) . . . . . . . . . . . . .\
    \ . . . .  38\n       11.10.  Data Use Yours (DUY). . . . . . . . . . . . . .\
    \ . . .  39\n       11.11.  Data Preservation Interest (DPI). . . . . . . . .\
    \ . .  39\n       11.12.  Want Stop Receiving Data (DWSR) . . . . . . . . . .\
    \ .  40\n       11.13.  Want Stop Sending Data (DWSS) . . . . . . . . . . . .\
    \  41\n       11.14.  Stop Sending Data (DSS) . . . . . . . . . . . . . . .  41\n\
    \       11.15.  Want Data Paused (DWP). . . . . . . . . . . . . . . .  42\n  \
    \     11.16.  Paused My Data (DPM). . . . . . . . . . . . . . . . .  43\n    \
    \   11.17.  Want More Data (DWM). . . . . . . . . . . . . . . . .  43\n      \
    \ 11.18.  Negotiation Offer (NO). . . . . . . . . . . . . . . .  44\n       11.19.\
    \  Negotiation Response (NR) . . . . . . . . . . . . . .  45\n       11.20.  Ability\
    \ Query (AQ). . . . . . . . . . . . . . . . . .  46\n       11.21.  Ability Answer\
    \ (AA) . . . . . . . . . . . . . . . . .  46\n       11.22.  Progress Query (PQ)\
    \ . . . . . . . . . . . . . . . . .  47\n       11.23.  Progress Answer (PA).\
    \ . . . . . . . . . . . . . . . .  47\n       11.24.  Progress Report (PR). .\
    \ . . . . . . . . . . . . . . .  48\n   12. IAB Considerations  . . . . . . .\
    \ . . . . . . . . . . . . . .  48\n   13. Security Considerations . . . . . .\
    \ . . . . . . . . . . . . .  48\n   14. IANA Considerations . . . . . . . . .\
    \ . . . . . . . . . . . .  50\n   15. Compliance  . . . . . . . . . . . . . .\
    \ . . . . . . . . . . .  50\n       15.1.  Extending OCP Core . . . . . . . .\
    \ . . . . . . . . . .  51\n   A.  Message Summary . . . . . . . . . . . . . .\
    \ . . . . . . . . .  52\n   B.  State Summary   . . . . . . . . . . . . . . .\
    \ . . . . . . . .  53\n   C.  Acknowledgements  . . . . . . . . . . . . . . .\
    \ . . . . . . .  54\n   16. References  . . . . . . . . . . . . . . . . . . .\
    \ . . . . . .  54\n       16.1.  Normative References . . . . . . . . . . . .\
    \ . . . . .  54\n       16.2.  Informative References . . . . . . . . . . . .\
    \ . . . .  54\n   Author's Address. . . . . . . . . . . . . . . . . . . . . .\
    \ . . .  55\n   Full Copyright Statement. . . . . . . . . . . . . . . . . . .\
    \ . .  56\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   The Open Pluggable Edge Services (OPES) architecture [RFC3835]\n\
    \   enables cooperative application services (OPES services) between a\n   data\
    \ provider, a data consumer, and zero or more OPES processors.\n   The application\
    \ services under consideration analyze and possibly\n   transform application-level\
    \ messages exchanged between the data\n   provider and the data consumer.\n  \
    \ The OPES processor can delegate the responsibility of service\n   execution\
    \ by communicating with callout servers.  As described in\n   [RFC3836], an OPES\
    \ processor invokes and communicates with services\n   on a callout server by\
    \ using an OPES callout protocol (OCP).  This\n   document specifies the core\
    \ of that protocol (\"OCP Core\").\n   The OCP Core specification documents general\
    \ application-independent\n   protocol mechanisms.  A separate series of documents\
    \ describes\n   application-specific aspects of OCP.  For example, \"HTTP Adaptation\n\
    \   with OPES\" [OPES-HTTP] describes, in part, how HTTP messages and HTTP\n \
    \  meta-information can be communicated over OCP.\n   Section 1.2 provides a brief\
    \ overview of the entire OPES document\n   collection, including documents describing\
    \ OPES use cases and\n   security threats.\n"
- title: 1.1.  Scope
  contents:
  - "1.1.  Scope\n   The OCP Core specification documents the behavior of OCP agents\
    \ and\n   the requirements for OCP extensions.  OCP Core does not contain\n  \
    \ requirements or mechanisms specific for application protocols being\n   adapted.\n\
    \   As an application proxy, the OPES processor proxies a single\n   application\
    \ protocol or converts from one application protocol to\n   another.  At the same\
    \ time, OPES processor may be an OCP client,\n   using OCP to facilitate adaptation\
    \ of proxied messages at callout\n   servers.  It is therefore natural to assume\
    \ that an OPES processor\n   takes application messages being proxied, marshals\
    \ them over OCP to\n   callout servers, and then puts the adaptation results back\
    \ on the\n   wire.  However, this assumption implies that OCP is applied directly\n\
    \   to application messages that OPES processor is proxying, which may\n   not\
    \ be the case.\n      OPES processor scope                         callout server\
    \ scope\n      +-----------------+                           +-----------------+\n\
    \      | pre-processing  |         OCP scope         |                 |\n   \
    \   |            +- - - - - - - - - - - - - - - - - - -+            |\n      |\
    \ iteration  |     <== ( application data ) ==>    | adaptation |\n      |   \
    \         +- - - - - - - - - - - - - - - - - - -+            |\n      | post-processing\
    \ |                           |                 |\n      +-----------------+ \
    \                          +-----------------+\n   An OPES processor may preprocess\
    \ (or postprocess) proxied application\n   messages before (or after) they are\
    \ adapted at callout servers.  For\n   example, a processor may take an HTTP response\
    \ being proxied and pass\n   it as-is, along with metadata about the corresponding\
    \ HTTP\n   connection.  Another processor may take an HTTP response, extract its\n\
    \   body, and pass that body along with the content-encoding metadata.\n   Moreover,\
    \ to perform adaptation, the OPES processor may execute\n   several callout services,\
    \ iterating over several callout servers.\n   Such preprocessing, postprocessing,\
    \ and iterations make it impossible\n   to rely on any specific relationship between\
    \ application messages\n   being proxied and application messages being sent to\
    \ a callout\n   service.  Similarly, specific adaptation actions at the callout\n\
    \   server are outside OCP Core scope.\n   This specification does not define\
    \ or require any specific\n   relationship among application messages being proxied\
    \ by an OPES\n   processor and application messages being exchanged between an\
    \ OPES\n   processor and a callout server via OCP.  The OPES processor usually\n\
    \   provides some mapping among these application messages, but the\n   processor's\
    \ specific actions are beyond OCP scope.  In other words,\n   this specification\
    \ is not concerned with the OPES processor role as\n   an application proxy or\
    \ as an iterator of callout services.  The\n   scope of OCP Core is communication\
    \ between a single OPES processor\n   and a single callout server.\n   Furthermore,\
    \ an OPES processor may choose which proxied application\n   messages or information\
    \ about them to send over OCP.  All proxied\n   messages on all proxied connections\
    \ (if connections are defined for a\n   given application protocol), everything\
    \ on some connections, selected\n   proxied messages, or nothing might be sent\
    \ over OCP to callout\n   servers.  OPES processor and callout server state related\
    \ to proxied\n   protocols can be relayed over OCP as application message metadata.\n"
- title: 1.2.  OPES Document Map
  contents:
  - "1.2.  OPES Document Map\n   This document belongs to a large set of OPES specifications\
    \ produced\n   by the IETF OPES Working Group.  Familiarity with the overall OPES\n\
    \   approach and typical scenarios is often essential when one tries to\n   comprehend\
    \ isolated OPES documents.  This section provides an index\n   of OPES documents\
    \ to assist the reader with finding \"missing\"\n   information.\n   o  \"OPES\
    \ Use Cases and Deployment Scenarios\" [RFC3752] describes a\n      set of services\
    \ and applications that are considered in scope for\n      OPES and that have\
    \ been used as a motivation and guidance in\n      designing the OPES architecture.\n\
    \   o  The OPES architecture and common terminology are described in \"An\n  \
    \    Architecture for Open Pluggable Edge Services (OPES)\" [RFC3835].\n   o \
    \ \"Policy, Authorization, and Enforcement Requirements of OPES\"\n      [RFC3838]\
    \ outlines requirements and assumptions on the policy\n      framework, without\
    \ specifying concrete authorization and\n      enforcement methods.\n   o  \"\
    Security Threats and Risks for OPES\" [RFC3837] provides OPES risk\n      analysis,\
    \ without recommending specific solutions.\n   o  \"OPES Treatment of IAB Considerations\"\
    \ [RFC3914] addresses all\n      architecture-level considerations expressed by\
    \ the IETF Internet\n      Architecture Board (IAB) when the OPES WG was chartered.\n\
    \   o  At the core of the OPES architecture are the OPES processor and\n     \
    \ the callout server, two network elements that communicate with\n      each other\
    \ via an OPES Callout Protocol (OCP).  The requirements\n      for this protocol\
    \ are discussed in \"Requirements for OPES Callout\n      Protocols\" [RFC3836].\n\
    \   o  This document specifies an application agnostic protocol core to\n    \
    \  be used for the communication between an OPES processor and a\n      callout\
    \ server.\n   o  \"OPES Entities and End Points Communications\" [RFC3897] specifies\n\
    \      generic tracing and bypass mechanisms for OPES.\n   o  The OCP Core and\
    \ communications documents are independent from the\n      application protocol\
    \ being adapted by OPES entities.  Their\n      generic mechanisms have to be\
    \ complemented by application-specific\n      profiles.  \"HTTP Adaptation with\
    \ OPES\" [OPES-HTTP] is such an\n      application profile for HTTP.  It specifies\
    \ how\n      application-agnostic OPES mechanisms are to be used and augmented\n\
    \      in order to support adaptation of HTTP messages.\n   o  Finally, \"P: Message\
    \ Processing Language\" [OPES-RULES] defines a\n      language for specifying\
    \ what OPES adaptations (e.g., translation)\n      must be applied to what application\
    \ messages (e.g., e-mail from\n      bob@example.com).  P language is intended\
    \ for configuring\n      application proxies (OPES processors).\n"
- title: 1.3.  Terminology
  contents:
  - "1.3.  Terminology\n   In this document, the keywords \"MUST\", \"MUST NOT\",\
    \ \"REQUIRED\",\n   \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\"\
    , \"MAY\",\n   and \"OPTIONAL\" in this document are to be interpreted as described\
    \ in\n   [RFC2119].  When used with the normative meanings, these keywords\n \
    \  will be all uppercase.  Occurrences of these words in lowercase\n   constitute\
    \ normal prose usage, with no normative implications.\n   The OPES processor works\
    \ with messages from application protocols and\n   may relay information about\
    \ those application messages to a callout\n   server.  OCP is also an application\
    \ protocol.  Thus, protocol\n   elements such as \"message\", \"connection\",\
    \ or \"transaction\" exist in\n   OCP and other application protocols.  In this\
    \ specification, all\n   references to elements from application protocols other\
    \ than OCP are\n   used with an explicit \"application\" qualifier.  References\
    \ without\n   the \"application\" qualifier refer to OCP elements.\n   OCP message:\
    \ A basic unit of communication between an OPES processor\n      and a callout\
    \ server.  The message is a sequence of octets\n      formatted according to syntax\
    \ rules (section 3.1).  Message\n      semantics is defined in section 11.\n \
    \  application message: An entity defined by OPES processor and callout\n    \
    \  server negotiation.  Usually, the negotiated definition would\n      match\
    \ the definition from an application protocol (e.g., [RFC2616]\n      definition\
    \ of an HTTP message).\n   application message data: An opaque sequence of octets\
    \ representing a\n      complete or partial application message.  OCP Core does\
    \ not\n      distinguish application message structures (if there are any).\n\
    \      Application message data may be empty.\n   data: Same as application message\
    \ data.\n   original: Referring to an application message flowing from the OPES\n\
    \      processor to a callout server.\n   adapted: Referring to an application\
    \ message flowing from an OPES\n      callout server to the OPES processor.\n\
    \   adaptation: Any kind of access by a callout server, including\n      modification,\
    \ generation, and copying.  For example, translating\n      or logging an SMTP\
    \ message is adaptation of that application\n      message.\n   agent: The actor\
    \ for a given communication protocol.  The OPES\n      processor and callout server\
    \ are OCP agents.  An agent can be\n      referred to as a sender or receiver,\
    \ depending on its actions in a\n      particular context.\n   immediate: Performing\
    \ the specified action before reacting to new\n      incoming messages or sending\
    \ any new messages unrelated to the\n      specified action.\n   OCP extension:\
    \ A specification extending or adjusting this document\n      for adaptation of\
    \ an application protocol (a.k.a., application\n      profile; e.g., [OPES-HTTP]),\
    \ new OCP functionality (e.g.,\n      transport encryption and authentication),\
    \ and/or new OCP Core\n      version.\n"
- title: 2.  Overall Operation
  contents:
  - "2.  Overall Operation\n   The OPES processor may use the OPES callout protocol\
    \ (OCP) to\n   communicate with callout servers.  Adaptation using callout services\n\
    \   is sometimes called \"bump in the wire\" architecture.\n"
- title: 2.1.  Initialization
  contents:
  - "2.1.  Initialization\n   The OPES processor establishes transport connections\
    \ with callout\n   servers to exchange application messages with the callout server(s)\n\
    \   by using OCP.  After a transport-layer connection (usually TCP/IP) is\n  \
    \ established, communicating OCP agents exchange Connection Start (CS)\n   messages.\
    \  Next, OCP features can be negotiated between the processor\n   and the callout\
    \ server (see section 6).  For example, OCP agents may\n   negotiate transport\
    \ encryption and application message definition.\n   When enough settings are\
    \ negotiated, OCP agents may start exchanging\n   application messages.\n   OCP\
    \ Core provides negotiation and other mechanisms for agents to\n   encrypt OCP\
    \ connections and authenticate each other.  OCP Core does\n   not require OCP\
    \ connection encryption or agent authentication.\n   Application profiles and\
    \ other OCP extensions may document and/or\n   require these and other security\
    \ mechanisms.  OCP is expected to be\n   used, in part, in closed environments\
    \ where trust and privacy are\n   established by means external to OCP.  Implementations\
    \ are expected\n   to demand necessary security features via the OCP Core negotiation\n\
    \   mechanism, depending on agent configuration and environment.\n"
- title: 2.2.  Original Dataflow
  contents:
  - "2.2.  Original Dataflow\n   When the OPES processor wants to adapt an application\
    \ message, it\n   sends a Transaction Start (TS) message to initiate an OCP transaction\n\
    \   dedicated to that application message.  The processor then sends an\n   Application\
    \ Message Start (AMS) message to prepare the callout server\n   for application\
    \ data that will follow.  Once the application message\n   scope is established,\
    \ application data can be sent to the callout\n   server by using Data Use Mine\
    \ (DUM) and related OCP message(s).  All\n   of these messages correspond to the\
    \ original dataflow.\n"
- title: 2.3.  Adapted Dataflow
  contents:
  - "2.3.  Adapted Dataflow\n   The callout server receives data and metadata sent\
    \ by the OPES\n   processor (original dataflow).  The callout server analyses\
    \ metadata\n   and adapts data as it comes in.  The server usually builds its\n\
    \   version of metadata and responds to the OPES processor with an\n   Application\
    \ Message Start (AMS) message.  Adapted application message\n   data can be sent\
    \ next, using Data Use Mine (DUM) OCP message(s).  The\n   application message\
    \ is then announced to be \"completed\" or \"closed\"\n   by using an Application\
    \ Message End (AME) message.  The transaction\n   may be closed by using a Transaction\
    \ End (TE) message, as well.  All\n   these messages correspond to adapted data\
    \ flow.\n       +---------------+                             +-------+\n    \
    \   |     OPES      | == (original data flow) ==> |callout|\n       |   processor\
    \   | <== (adapted data flow) === |server |\n       +---------------+        \
    \                     +-------+\n   The OPES processor receives the adapted application\
    \ message sent by\n   the callout server.  Other OPES processor actions specific\
    \ to the\n   application message received are outside scope of this specification.\n"
- title: 2.4.  Multiple Application Messages
  contents:
  - "2.4.  Multiple Application Messages\n   OCP Core specifies a transactions interface\
    \ dedicated to exchanging a\n   single original application message and a single\
    \ adapted application\n   message.  Some application protocols may require multiple\
    \ adapted\n   versions for a single original application message or even multiple\n\
    \   original messages to be exchanged as a part of a single OCP\n   transaction.\
    \  For example, a single original e-mail message may need\n   to be transformed\
    \ into several e-mail messages, with one custom\n   message for each recipient.\n\
    \   OCP extensions MAY document mechanisms for exchanging multiple\n   original\
    \ and/or multiple adapted application messages within a single\n   OCP transaction.\n"
- title: 2.5.  Termination
  contents:
  - "2.5.  Termination\n   Either OCP agent can terminate application message delivery,\n\
    \   transaction, or connection by sending an appropriate OCP message.\n   Usually,\
    \ the callout server terminates adapted application message\n   delivery and the\
    \ transaction.  Premature and abnormal terminations at\n   arbitrary times are\
    \ supported.  The termination message includes a\n   result description.\n"
- title: 2.6.  Message Exchange Patterns
  contents:
  - "2.6.  Message Exchange Patterns\n   In addition to messages carrying application\
    \ data, OCP agents may\n   also exchange messages related to their configuration,\
    \ state,\n   transport connections, application connections, etc.  A callout\n\
    \   server may remove itself from the application message processing\n   loop.\
    \  A single OPES processor can communicate with many callout\n   servers and vice\
    \ versa.  Though many OCP exchange patterns do not\n   follow a classic client-server\
    \ model, it is possible to think of an\n   OPES processor as an \"OCP client\"\
    \ and of a callout server as an \"OCP\n   server\".  The OPES architecture document\
    \ [RFC3835] describes\n   configuration possibilities.\n   The following informal\
    \ rules illustrate relationships between\n   connections, transactions, OCP messages,\
    \ and application messages:\n   o  An OCP agent may communicate with multiple\
    \ OCP agents.  This is\n      outside the scope of this specification.\n   o \
    \ An OPES processor may have multiple concurrent OCP connections to\n      a callout\
    \ server.  Communication over multiple OCP connections is\n      outside the scope\
    \ of this specification.\n   o  A connection may carry multiple concurrent transactions.\
    \  A\n      transaction is always associated with a single connection (i.e., a\n\
    \      transaction cannot span multiple concurrent connections).\n   o  A connection\
    \ may carry at most one message at a time, including\n      control messages and\
    \ transaction-related messages.  A message is\n      always associated with a\
    \ single connection (i.e., a message cannot\n      span multiple concurrent connections).\n\
    \   o  A transaction is a sequence of messages related to application of\n   \
    \   a given set of callout services to a single application message.\n      A\
    \ sequence of transaction messages from an OPES processor to a\n      callout\
    \ server is called original flow.  A sequence of transaction\n      messages from\
    \ a callout server to an OPES processor is called\n      adapted flow.  The two\
    \ flows may overlap in time.\n   o  In OCP Core, a transaction is associated with\
    \ a single original\n      and a single adapted application message.  OCP Core\
    \ extensions may\n      extend transaction scope to more application messages.\n\
    \   o  An application message (adapted or original) is transferred by\n      using\
    \ a sequence of OCP messages.\n"
- title: 2.7.  Timeouts
  contents:
  - "2.7.  Timeouts\n   OCP violations, resource limits, external dependencies, and\
    \ other\n   factors may lead to states in which an OCP agent is not receiving\n\
    \   required messages from the other OCP agent.  OCP Core defines no\n   messages\
    \ to address such situations.  In the absence of any extension\n   mechanism,\
    \ OCP agents must implement timeouts for OCP operations.  An\n   OCP agent MUST\
    \ forcefully terminate any OCP connection, negotiation,\n   transaction, etc.\
    \  that is not making progress.  This rule covers\n   both dead- and livelock\
    \ situations.\n   In their implementation, OCP agents MAY rely on transport-level\
    \ or\n   other external timeouts if such external timeouts are guaranteed to\n\
    \   happen for a given OCP operation.  Depending on the OCP operation, an\n  \
    \ agent may benefit from \"pinging\" the other side with a Progress Query\n  \
    \ (PQ) message before terminating an OCP transaction or connection.\n   The latter\
    \ is especially useful for adaptations that may take a long\n   time at the callout\
    \ server before producing any adapted data.\n"
- title: 2.8.  Environment
  contents:
  - "2.8.  Environment\n   OCP communication is assumed usually to take place over\
    \ TCP/IP\n   connections on the Internet (though no default TCP port is assigned\n\
    \   to OCP in this specification).  This does not preclude OCP from being\n  \
    \ implemented on top of other transport protocols, or on other\n   networks. \
    \ High-level transport protocols such as BEEP [RFC3080] may\n   be used.  OCP\
    \ Core requires a reliable and message-order-preserving\n   transport.  Any protocol\
    \ with these properties can be used; the\n   mapping of OCP message structures\
    \ onto the transport data units of\n   the protocol in question is outside the\
    \ scope of this specification.\n   OCP Core is application agnostic.  OCP messages\
    \ can carry\n   application-specific information as a payload or as\n   application-specific\
    \ message parameters.\n   OCP Core overhead in terms of extra traffic on the wire\
    \ is about 100\n   - 200 octets per small application message.  Pipelining, preview,\n\
    \   data preservation, and early termination optimizations, as well as\n   as-is\
    \ encapsulation of application data, make fast exchange of\n   application messages\
    \ possible.\n"
- title: 3.  Messages
  contents:
  - "3.  Messages\n   As defined in section 1.3, an OCP message is a basic unit of\n\
    \   communication between an OPES processor and a callout server.  A\n   message\
    \ is a sequence of octets formatted according to syntax rules\n   (section 3.1).\
    \  Message semantics is defined in section 11.  Messages\n   are transmitted on\
    \ top of OCP transport.\n   OCP messages deal with transport, transaction management,\
    \ and\n   application data exchange between a single OPES processor and a\n  \
    \ single callout server.  Some messages can be emitted only by an OPES\n   processor;\
    \ some only by a callout server; and some by both OPES\n   processor and callout\
    \ server.  Some messages require responses (one\n   could call such messages \"\
    requests\"); some can only be used in\n   response to other messages (\"responses\"\
    ); some may be sent without\n   solicitation; and some may not require a response.\n"
- title: 3.1.  Message Format
  contents:
  - "3.1.  Message Format\n   An OCP message consists of a message name followed by\
    \ optional\n   parameters and a payload.  The exact message syntax is defined\
    \ by the\n   following Augmented Backus-Naur Form (ABNF) [RFC2234]:\n   message\
    \ = name [SP anonym-parameters]\n             [CRLF named-parameters CRLF]\n \
    \            [CRLF payload CRLF]\n             \";\" CRLF\n   anonym-parameters\
    \ = value *(SP value)               ; space-separated\n   named-parameters  =\
    \ named-value *(CRLF named-value) ; CRLF-separated\n   list-items        = value\
    \ *(\",\" value)              ; comma-separated\n   payload = data\n   named-value\
    \ = name \":\" SP value\n   value     = structure / list / atom\n   structure\
    \ = \"{\" [anonym-parameters] [CRLF named-parameters CRLF] \"}\"\n   list    \
    \  = \"(\" [ list-items ] \")\"\n   atom      = bare-value / quoted-value\n  \
    \ name = ALPHA *safe-OCTET\n   bare-value = 1*safe-OCTET\n   quoted-value = DQUOTE\
    \ data DQUOTE\n   data = size \":\" *OCTET                   ; exactly size octets\n\
    \   safe-OCTET = ALPHA / DIGIT / \"-\" / \"_\"\n   size = dec-number         \
    \               ; 0-2147483647\n   dec-number = 1*DIGIT                     ;\
    \ no leading zeros or signs\n   Several normative rules accompany the above ABNF:\n\
    \   o  There is no \"implied linear space\" (LWS) rule.  LWS rules are\n     \
    \ common to MIME-based grammars but are not used here.  The\n      whitespace\
    \ syntax is restricted to what is explicitly allowed by\n      the above ABNF.\n\
    \   o  All protocol elements are case sensitive unless it is specified\n     \
    \ otherwise.  In particular, message names and parameter names are\n      case\
    \ sensitive.\n   o  Sizes are interpreted as decimal values and cannot have leading\n\
    \      zeros.\n   o  Sizes do not exceed 2147483647.\n   o  The size attribute\
    \ in a quoted-value encoding specifies the exact\n      number of octets following\
    \ the column (':') separator.  If size\n      octets are not followed by a quote\
    \ ('\"') character, the encoding\n      is syntactically invalid.\n   o  Empty\
    \ quoted values are encoded as a 4-octet sequence \"0:\".\n   o  Any bare value\
    \ can be encoded as a quoted value.  A quoted value\n      is interpreted after\
    \ the encoding is removed.  For example, number\n      1234 can be encoded as\
    \ four octets 1234 or as eight octets\n      \"4:1234\", yielding exactly the\
    \ same meaning.\n   o  Unicode UTF-8 is the default encoding.  Note that ASCII\
    \ is a UTF-8\n      subset, and that the syntax prohibits non-ASCII characters\
    \ outside\n      of the \"data\" element.\n   Messages violating formatting rules\
    \ are, by definition, invalid.  See\n   section 5 for rules governing processing\
    \ of invalid messages.\n"
- title: 3.2.  Message Rendering
  contents:
  - "3.2.  Message Rendering\n   OCP message samples in this specification and its\
    \ extensions may not\n   be typeset to depict minor syntactical details of OCP\
    \ message format.\n   Specifically, SP and CRLF characters are not shown explicitly.\
    \  No\n   rendering of an OCP message can be used to infer message format.  The\n\
    \   message format definition above is the only normative source for all\n   implementations.\n\
    \   On occasion, an OCP message line exceeds text width allowed by this\n   specification\
    \ format.  A backslash (\"\\\"), a \"soft line break\"\n   character, is used\
    \ to emphasize a protocol-violating\n   presentation-only linebreak.  Bare backslashes\
    \ are prohibited by OCP\n   syntax.  Similarly, an \"\\r\\n\" string is sometimes\
    \ used to emphasize\n   the presence of a CRLF sequence, usually before OCP message\
    \ payload.\n   Normally, the visible end of line corresponds to the CRLF sequence\
    \ on\n   the wire.\n   The next section (section 3.3) contains specific OCP message\n\
    \   examples, some of which illustrate the above rendering techniques.\n"
- title: 3.3.  Message Examples
  contents:
  - "3.3.  Message Examples\n   OCP syntax provides for compact representation of\
    \ short control\n   messages and required parameters while allowing for parameter\n\
    \   extensions.  Below are examples of short control messages.  The\n   required\
    \ CRLF sequence at the end of each line is not shown\n   explicitly (see section\
    \ 3.2).\n   PQ;\n   TS 1 2;\n   DWM 22;\n   DWP 22 16;\n   x-doit \"5:xyzzy\"\
    ;\n   The above examples contain atomic anonymous parameter values, such as\n\
    \   number and string constants.  OCP messages sometimes use more\n   complicated\
    \ parameters such as item lists or structures with named\n   values.  As both\
    \ messages below illustrate, structures and lists can\n   be nested:\n   NO ({\"\
    32:http://www.iana.org/assignments/opes/ocp/tls\"});\n   NO ({\"54:http://www.iana.org/assignments/opes/ocp/http/response\"\
    \n   Optional-Parts: (request-header)\n   },{\"54:http://www.iana.org/assignments/opes/ocp/http/response\"\
    \n   Optional-Parts: (request-header,request-body)\n   Transfer-Encodings: (chunked)\n\
    \   });\n   Optional parameters and extensions are possible with a named\n   parameters\
    \ approach, as illustrated by the following example.  The\n   DWM (section 11.17)\
    \ message in the example has two anonymous\n   parameters (the last one being\
    \ an extension) and two named parameters\n   (the last one being an extension).\n\
    \   DWM 1 3\n   Size-Request: 16384\n   X-Need-Info: \"26:twenty six octet extension\"\
    ;\n   Finally, any message may have a payload part.  For example, the Data\n \
    \  Use Mine (DUM) message below carries 8865 octets of raw data.\n   DUM 1 13\n\
    \   Modp: 75\n   \\r\\n\n   8865:... 8865 octets of raw data ...;\n"
- title: 3.4.  Message Names
  contents:
  - "3.4.  Message Names\n   Most OCP messages defined in this specification have\
    \ short names,\n   formed by abbreviating or compressing a longer but human-friendlier\n\
    \   message title.  Short names without a central registration system\n   (such\
    \ as this specification or the IANA registry) are likely to cause\n   conflicts.\
    \  Informal protocol extensions should avoid short names.\n   To emphasize what\
    \ is already defined by message syntax,\n   implementations cannot assume that\
    \ all message names are very short.\n"
- title: 4.  Transactions
  contents:
  - "4.  Transactions\n   An OCP transaction is a logical sequence of OCP messages\
    \ processing a\n   single original application message.  The result of the processing\n\
    \   may be zero or more application messages, adapted from the original.\n   A\
    \ typical transaction consists of two message flows: a flow from the\n   OPES\
    \ processor to the callout server (sending the original\n   application message),\
    \ and a flow from the callout server to the OPES\n   processor (sending adapted\
    \ application messages).  The number of\n   application messages produced by the\
    \ callout server and whether the\n   callout server actually modifies the original\
    \ application message may\n   depend on the requested callout service and other\
    \ factors.  The OPES\n   processor or the callout server can terminate the transaction\
    \ by\n   sending a corresponding message to the other side.\n   An OCP transaction\
    \ starts with a Transaction Start (TS) message sent\n   by the OPES processor.\
    \  A transaction ends with the first Transaction\n   End (TE) message sent or\
    \ received, explicit or implied.  A TE message\n   can be sent by either side.\
    \  Zero or more OCP messages associated\n   with the transaction can be exchanged\
    \ in between.  The figure below\n   illustrates a possible message sequence (prefix\
    \ \"P\" stands for the\n   OPES processor; prefix \"S\" stands for the callout\
    \ server).  Some\n   message details are omitted.\n   P: TS 10;\n   P: AMS 10\
    \ 1;\n      ... processor sending application data to the callout server\n   S:\
    \ AMS 10 2;\n      ... callout server sending application data to the processor\n\
    \      ... processor sending application data to the callout server\n   P: AME\
    \ 10 1 result;\n   S: AME 10 2 result;\n   P: TE 10 result;\n"
- title: 5.  Invalid Input
  contents:
  - "5.  Invalid Input\n   This specification contains many criteria for valid OCP\
    \ messages and\n   their parts, including syntax rules, semantics requirements,\
    \ and\n   relationship to agents state.  In this context, \"Invalid input\" means\n\
    \   messages or message parts that violate at least one of the normative\n   rules.\
    \  A message with an invalid part is, by definition, invalid.\n   If OCP agent\
    \ resources are exhausted while parsing or interpreting a\n   message, the agent\
    \ MUST treat the corresponding OCP message as\n   invalid.\n   Unless explicitly\
    \ allowed to do otherwise, an OCP agent MUST\n   terminate the transaction if\
    \ it receives an invalid message with\n   transaction scope and MUST terminate\
    \ the connection if it receives an\n   invalid message with a connection scope.\
    \  A terminating agent MUST\n   use the result status code of 400 and MAY specify\
    \ termination cause\n   information in the result status reason parameter (see\
    \ section\n   10.10).  If an OCP agent is unable to determine the scope of an\n\
    \   invalid message it received, the agent MUST treat the message as\n   having\
    \ connection scope.\n   OCP usually deals with optional but invasive application\
    \ message\n   manipulations for which correctness ought to be valued above\n \
    \  robustness.  For example, a failure to insert or remove certain\n   optional\
    \ web page content is usually far less disturbing than\n   corrupting (making\
    \ unusable) the host page while performing that\n   insertion or removal.  Most\
    \ OPES adaptations are high level in\n   nature, which makes it impossible to\
    \ assess correctness of the\n   adaptations automatically, especially if \"robustness\
    \ guesses\" are\n   involved.\n"
- title: 6.  Negotiation
  contents:
  - "6.  Negotiation\n   The negotiation mechanism allows OCP agents to agree on the\
    \ mutually\n   acceptable set of features, including optional and\n   application-specific\
    \ behavior and OCP extensions.  For example,\n   transport encryption, data format,\
    \ and support for a new message can\n   be negotiated.  Negotiation implies intent\
    \ for a behavioral change.\n   For a related mechanism allowing an agent to query\
    \ capabilities of\n   its counterpart without changing the counterpart's behavior,\
    \ see the\n   Ability Query (AQ) and Ability Answer (AA) message definitions.\n\
    \   Most negotiations require at least one round trip time delay.  In\n   rare\
    \ cases when the other side's response is not required\n   immediately, negotiation\
    \ delay can be eliminated, with an inherent\n   risk of an overly optimistic assumption\
    \ about the negotiation\n   response.\n   A detected violation of negotiation\
    \ rules leads to OCP connection\n   termination.  This design reduces the number\
    \ of negotiation scenarios\n   resulting in a deadlock when one of the agents\
    \ is not compliant.\n   Two core negotiation primitives are supported: negotiation\
    \ offer and\n   negotiation response.  A Negotiation Offer (NO) message allows\
    \ an\n   agent to specify a set of features from which the responder has to\n\
    \   select at most one feature that it prefers.  The selection is sent by\n  \
    \ using a Negotiation Response (NR) message.  If the response is\n   positive,\
    \ both sides assume that the selected feature is in effect\n   immediately (see\
    \ section 11.19 for details).  If the response is\n   negative, no behavioral\
    \ changes are assumed.  In either case, further\n   offers may follow.\n   Negotiating\
    \ OCP agents have to take into account prior negotiated\n   (i.e., already enabled)\
    \ features.  OCP agents MUST NOT make and MUST\n   reject offers that would lead\
    \ to a conflict with already negotiated\n   features.  For example, an agent cannot\
    \ offer an HTTP application\n   profile for a connection that already has an SMTP\
    \ application profile\n   enabled, as there would be no way to resolve the conflict\
    \ for a given\n   transaction.  Similarly, once TLSv1 connection encryption is\n\
    \   negotiated, an agent must not offer and must reject offers for SSLv2\n   connection\
    \ encryption (unless a negotiated feature explicitly allows\n   for changing an\
    \ encryption scheme on the fly).\n   Negotiation Offer (NO) messages may be sent\
    \ by either agent.  OCP\n   extensions documenting negotiation MAY assign the\
    \ initiator role to\n   one of the agents, depending on the feature being negotiated.\
    \  For\n   example, negotiation of transport security feature should be\n   initiated\
    \ by OPES processors to avoid situations where both agents\n   wait for the other\
    \ to make an offer.\n   As either agent may make an offer, two \"concurrent\"\
    \ offers may be\n   made at the same time, by the two communicating agents.  Unmanaged\n\
    \   concurrent offers may lead to a negotiation deadlock.  By giving OPES\n  \
    \ processor a priority, offer-handling rules (section 11.18) ensure\n   that only\
    \ one offer per OCP connection is honored at a time, and that\n   the other concurrent\
    \ offers are ignored by both agents.\n"
- title: 6.1.  Negotiation Phase
  contents:
  - "6.1.  Negotiation Phase\n   A Negotiation Phase is a mechanism ensuring that\
    \ both agents have a\n   chance to negotiate all features they require before\
    \ proceeding\n   further.  Negotiation Phases have OCP connection scope and do\
    \ not\n   overlap.  For each OCP agent, the Negotiation Phase starts with the\n\
    \   first Negotiation Offer (NO) message received or the first\n   Negotiation\
    \ Response (NR) message sent, provided the message is not a\n   part of an existing\
    \ Phase.  For each OCP agent, Negotiation Phase\n   ends with the first Negotiation\
    \ Response (NR) message (sent or\n   received), after which the agent expects\
    \ no more negotiations.  Agent\n   expectation rules are defined later in this\
    \ section.\n   During a Negotiation Phase, an OCP agent MUST NOT send messages\
    \ other\n   than the following \"Negotiation Phase messages\": Negotiation Offer\n\
    \   (NO), Negotiation Response (NR), Ability Query (AQ), Ability Answer\n   (AA),\
    \ Progress Query (PQ), Progress Answer (PA), Progress Report\n   (PR), and Connection\
    \ End (CE).\n   Multiple Negotiation Phases may happen during the lifespan of\
    \ a\n   single OCP connection.  An agent may attempt to start a new\n   Negotiation\
    \ Phase immediately after the old Phase is over, but it is\n   possible that the\
    \ other agent will send messages other than\n   \"Negotiation Phase messages\"\
    \ before receiving the new Negotiation\n   Offer (NO).  The agent that starts\
    \ a Phase has to be prepared to\n   handle those messages while its offer is reaching\
    \ the recipient.\n   An OPES processor MUST make a negotiation offer immediately\
    \ after\n   sending a Connection Start (CS) message.  If the OPES processor has\n\
    \   nothing to negotiate, the processor MUST send a Negotiation Offer\n   (NO)\
    \ message with an empty features list.  These two rules bootstrap\n   the first\
    \ Negotiation Phase.  Agents are expected to negotiate at\n   least the application\
    \ profile for OCP Core.  Thus, these\n   bootstrapping requirements are unlikely\
    \ to result in any extra work.\n   Once a Negotiation Phase starts, an agent MUST\
    \ expect further\n   negotiations if and only if the last NO sent or the last\
    \ NR received\n   contained a true \"Offer-Pending\" parameter value.  Informally,\
    \ an\n   agent can keep the phase open by sending true \"Offer-Pending\"\n   parameters\
    \ with negotiation offers or responses.  Moreover, if there\n   is a possibility\
    \ that the agent may need to continue the Negotiation\n   Phase, the agent must\
    \ send a true \"Offer-Pending\" parameter.\n"
- title: 6.2.  Negotiation Examples
  contents:
  - "6.2.  Negotiation Examples\n   Below is an example of the simplest negotiation\
    \ possible.  The OPES\n   processor is offering nothing and is predictably receiving\
    \ a\n   rejection.  Note that the NR message terminates the Negotiation Phase\n\
    \   in this case because neither of the messages contains a true\n   \"Offer-Pending\"\
    \ value:\n   P: NO ();\n   S: NR;\n   The next example illustrates how a callout\
    \ server can force\n   negotiation of a feature that an OPES processor has not\
    \ negotiated.\n   Note that the server sets the \"Offer-Pending\" parameter to\
    \ true when\n   responding to the processor Negotiation Offer (NO) message.  The\n\
    \   processor chooses to accept the feature:\n   P: NO ();\n   S: NR\n      Offer-Pending:\
    \ true\n      ;\n   S: NO ({\"22:ocp://feature/example/\"})\n      Offer-Pending:\
    \ false\n      ;\n   P: NR {\"22:ocp://feature/example/\"};\n   If the server\
    \ seeks to stop the above negotiations after sending a\n   true \"Offer-Pending\"\
    \ value, its only option would be send an empty\n   negotiation offer (see the\
    \ first example above).  If the server does\n   nothing instead, the OPES processor\
    \ would wait for the server and\n   would eventually time out the connection.\n\
    \   The following example shows a dialog with a callout server that\n   insists\
    \ on enabling two imaginary features: strong transport\n   encryption and volatile\
    \ storage for responses.  The server is\n   designed not to exchange sensitive\
    \ messages until both features are\n   enabled.  Naturally, the volatile storage\
    \ feature has to be\n   negotiated securely.  The OPES processor supports one\
    \ of the strong\n   encryption mechanisms but prefers not to offer (to volunteer\
    \ support\n   for) strong encryption, perhaps for performance reasons.  The server\n\
    \   has to send a true \"Offer-Pending\" parameter to get a chance to offer\n\
    \   strong encryption (which is successfully negotiated in this case).\n   Any\
    \ messages sent by either agent after the (only) successful NR\n   response are\
    \ encrypted with \"strongB\" encryption scheme.  The OPES\n   processor does not\
    \ understand the volatile storage feature, and the\n   last negotiation fails\
    \ (over a strongly encrypted transport\n   connection).\n   P: NO ({\"29:ocp://example/encryption/weak\"\
    })\n      ;\n   S: NR\n      Offer-Pending: true\n      ;\n   S: NO ({\"32:ocp://example/encryption/strongA\"\
    },\\\n      {\"32:ocp://example/encryption/strongB\"})\n      Offer-Pending: true\n\
    \      ;\n   P: NR {\"32:ocp://example/encryption/strongB\"}\n      ;\n   ...\
    \ all traffic below is encrypted using strongB ...\n   S: NO ({\"31:ocp://example/storage/volatile\"\
    })\n      Offer-Pending: false\n      ;\n   P: NR\n      Unknowns: ({\"31:ocp://example/storage/volatile\"\
    })\n      ;\n   S: CSE { 400 \"33:lack of VolStore protocol support\" }\n    \
    \  ;\n   The following example from [OPES-HTTP] illustrates successful HTTP\n\
    \   application profile negotiation:\n   P: NO ({\"54:http://www.iana.org/assignments/opes/ocp/http/response\"\
    \n      Aux-Parts: (request-header,request-body)\n      })\n      SG: 5;\n   S:\
    \ NR {\"54:http://www.iana.org/assignments/opes/ocp/http/response\"\n      Aux-Parts:\
    \ (request-header)\n      Pause-At-Body: 30\n      Wont-Send-Body: 2147483647\n\
    \      Content-Encodings: (gzip)\n      }\n      SG: 5;\n"
- title: 7.  'Data Preservation' Optimization
  contents:
  - "7.  'Data Preservation' Optimization\n   Many adaptations do not require any\
    \ data modifications (e.g., message\n   logging or blocking).  Some adaptations\
    \ modify only a small portion\n   of application message content (e.g., HTTP cookies\
    \ filtering or ad\n   insertion).  Yet, in many cases, the callout service has\
    \ to see\n   complete data.  By default, unmodified data would first travel from\n\
    \   the OPES processor to the callout server and then back.  The \"data\n   preservation\"\
    \ optimization in OCP helps eliminate the return trip if\n   both OCP agents cooperate.\
    \  Such cooperation is optional: OCP agents\n   MAY support data preservation\
    \ optimization.\n   To avoid sending back unmodified data, a callout service has\
    \ to know\n   that the OPES processor has a copy of the data.  As data sizes can\
    \ be\n   very large and the callout service may not know in advance whether it\n\
    \   will be able to use the processor copy, it is not possible to require\n  \
    \ the processor to keep a copy of the entire original data.  Instead,\n   it is\
    \ expected that a processor may keep some portion of the data,\n   depending on\
    \ processor settings and state.\n   When an OPES processor commits to keeping\
    \ a data chunk, it announces\n   its decision and the chunk parameters via a Kept\
    \ parameter of a Data\n   Use Mine (DUM) message.  The callout server MAY \"use\"\
    \ the chunk by\n   sending a Data Use Yours (DUY) message referring to the preserved\n\
    \   chunk.  That OCP message does not have payload and, therefore, the\n   return\
    \ trip is eliminated.\n   As the mapping between original and adapted data is\
    \ not known to the\n   processor, the processor MUST keep the announced-as-preserved\
    \ chunk\n   until the end of the corresponding transaction, unless the callout\n\
    \   server explicitly tells the processor that the chunk is not needed.\n   As\
    \ implied by the above requirement, the processor cannot assume that\n   a data\
    \ chunk is no longer needed just because the callout server sent\n   a Data Use\
    \ Yours (DUY) message or adapted data with, for instance,\n   the same offset\
    \ as the preserved chunk.\n   For simplicity, preserved data is always a contiguous\
    \ chunk of\n   original data, described by an (offset, size) pair using a \"Kept\"\
    \n   parameter of a Data Use Mine (DUM) message.  An OPES processor may\n   volunteer\
    \ to increase the size of the kept data.  An OPES processor\n   may increase the\
    \ offset if the callout server indicated that the kept\n   data is no longer needed.\n\
    \   Both agents may benefit from data reuse.  An OPES processor has to\n   allocate\
    \ storage to support this optimization, but a callout server\n   does not.  On\
    \ the other hand, it is the callout server that is\n   responsible for relieving\
    \ the processor from data preservation\n   commitments.  There is no simple way\
    \ to resolve this conflict of\n   interest on a protocol level.  Some OPES processors\
    \ may allocate a\n   relatively small buffer for data preservation purposes and\
    \ stop\n   preserving data when the buffer becomes full.  This technique would\n\
    \   benefit callout services that can quickly reuse or discard kept data.\n  \
    \ Another processor strategy would be to size the buffer based on\n   historical\
    \ data reuse statistics.  To improve chances of beneficial\n   cooperation, callout\
    \ servers are strongly encouraged to immediately\n   notify OPES processors of\
    \ unwanted data.  The callout server that\n   made a decision not to send Data\
    \ Use Yours (DUY) messages (for a\n   specific data ranges or at all) SHOULD immediately\
    \ inform the OPES\n   processor of that decision with the corresponding Data Preservation\n\
    \   Interest (DPI) message(s) or other mechanisms.\n"
- title: 8.  'Premature Dataflow Termination' Optimizations
  contents:
  - "8.  'Premature Dataflow Termination' Optimizations\n   Many callout services\
    \ adapt small portions of large messages and\n   would preferably not to be in\
    \ the loop when that adaptation is over.\n   Some callout services may not seek\
    \ data modification and would\n   preferably not send data back to the OPES processor,\
    \ even if the OPES\n   processor is not supporting the data preservation optimization\n\
    \   (Section 7).  By OCP design, unilateral premature dataflow\n   termination\
    \ by a callout server would lead to termination of an OCP\n   transaction with\
    \ an error.  Thus, the two agents must cooperate to\n   allow for error-free premature\
    \ termination.\n   This section documents two mechanisms for premature termination\
    \ of\n   original or adapted dataflow.  In combination, the mechanisms allow\n\
    \   the callout server to get out of the processing loop altogether.\n"
- title: 8.1.  Original Dataflow
  contents:
  - "8.1.  Original Dataflow\n   There are scenarios where a callout server is not\
    \ interested in the\n   remaining original dataflow.  For example, a simple access\
    \ blocking\n   or \"this site is temporary down\" callout service has to send\
    \ an\n   adapted (generated) application message but would preferably not\n  \
    \ receive original data from the OPES processor.\n   OCP Core supports premature\
    \ original dataflow termination via the\n   Want Stop Receiving Data (DWSR) message.\
    \  A callout server that does\n   not seek to receive additional original data\
    \ (beyond a certain size)\n   sends a DWSR message.  The OPES processor receiving\
    \ a DWSR message\n   terminates original dataflow by sending an Application Message\
    \ End\n   (AME) message with a 206 (partial) status code.\n   The following figure\
    \ illustrates a typical sequence of events.  The\n   downward lines connecting\
    \ the two dataflows illustrate the\n   transmission delay that allows for more\
    \ OCP messages to be sent while\n   an agent waits for the opposing agent reaction.\n\
    \   OPES                 Callout\n   Processor            Server\n       DUM>\
    \             <DUM\n       DUM>             <DWSR  <-- Server is ready to stop\
    \ receiving\n       ...        _____/<DUM   <-- Server continues as usual\n  \
    \     DUM>______/      <DUM\n       AME>             ...    <-- Processor stops\
    \ sending original data\n           \\_____       <DUM\n                 \\______<DUM\n\
    \                        <DUM   <-- Server continues to send adapted data\n  \
    \                      ...\n                        <AME\n   The mechanism described\
    \ in this section has no effect on the adapted\n   dataflow.  Receiving an Application\
    \ Message End (AME) message with\n   206 (partial) result status code from the\
    \ OPES processor does not\n   introduce any special requirements for the adapted\
    \ dataflow\n   termination.  However, it is not possible to terminate adapted\n\
    \   dataflow prematurely after the original dataflow has been prematurely\n  \
    \ terminated (see section 8.3).\n"
- title: 8.2.  Adapted Dataflow
  contents:
  - "8.2.  Adapted Dataflow\n   There are scenarios where a callout service may want\
    \ to stop sending\n   adapted data before a complete application message has been\
    \ sent.\n   For example, a logging-only callout service has to receive all\n \
    \  application messages but would preferably not send copies back to the\n   OPES\
    \ processor.\n   OCP Core supports premature adapted dataflow termination via\
    \ a\n   combination of Want Stop Sending Data (DWSS) and Stop Sending Data\n \
    \  (DSS) messages.  A callout service that seeks to stop sending data\n   sends\
    \ a DWSS message, soliciting an OPES processor permission to\n   stop.  While\
    \ waiting for the permission, the server continues with\n   its usual routine.\n\
    \   An OPES processor receiving a Want Stop Sending Data message responds\n  \
    \ with a Stop Sending Data (DSS) message.  The processor may then pause\n   to\
    \ wait for the callout server to terminate the adapted dataflow or\n   may continue\
    \ sending original data while making a copy of it.  Once\n   the server terminates\
    \ the adapted dataflow, the processor is\n   responsible for using original data\
    \ (sent or paused after sending\n   DSS) instead of the adapted data.\n   The\
    \ callout server receiving a DSS message terminates the adapted\n   dataflow (see\
    \ the Stop Sending Data (DSS) message definition for the\n   exact requirements\
    \ and corner cases).\n   The following figure illustrates a typical sequence of\
    \ events,\n   including a possible pause in original dataflow when the OPES\n\
    \   processor is waiting for the adapted dataflow to end.  The downward\n   lines\
    \ connecting the two dataflows illustrate the transmission delay\n   that allows\
    \ for more OCP messages to be sent while an agent waits for\n   the opposing agent\
    \ reaction.\n   OPES                 Callout\n   Processor            Server\n\
    \       DUM>             <DUM\n       DUM>             <DWSS    <-- Server is\
    \ ready to stop sending\n       ...        _____/<DUM     <-- Server continues\
    \ as usual,\n       DUM>______/      <DUM         waiting for DSS\n       DSS>\
    \             ...\n           \\_____       <DUM\n     possible    \\______<DUM\n\
    \     org-dataflow       <AME 206 <-- Server terminates adapted dataflow\n   \
    \  pause        _____/             upon receiving the DSS message\n          \
    \ ______/\n       DUM>                      <-- Processor resumes original dataflow\n\
    \       DUM>                          to the server and starts using\n       ...\
    \                           original data without adapting it\n       AME>\n \
    \  Premature adapted dataflow preservation is not trivial, as the OPES\n   processor\
    \ relies on the callout server to provide adapted data\n   (modified or not) to\
    \ construct the adapted application message.  If\n   the callout server seeks\
    \ to quit its job, special care must be taken\n   to ensure that the OPES processor\
    \ can construct the complete\n   application message.  On a logical level, this\
    \ mechanism is\n   equivalent to switching from one callout server to another\n\
    \   (non-modifying) callout server in the middle of an OCP transaction.\n   Other\
    \ than a possible pause in the original dataflow, the mechanism\n   described\
    \ in this section has no effect on the original dataflow.\n   Receiving an Application\
    \ Message End (AME) message with 206 (partial)\n   result status code from the\
    \ callout server does not introduce any\n   special requirements for the original\
    \ dataflow termination.\n"
- title: 8.3.  Getting Out of the Loop
  contents:
  - "8.3.  Getting Out of the Loop\n   Some adaptation services work on application\
    \ message prefixes and do\n   not seek to be in the adaptation loop once their\
    \ work is done.  For\n   example, an ad insertion service that did its job by\
    \ modifying the\n   first fragment of a web \"page\" would not seek to receive\
    \ more\n   original data or to perform further adaptations.  The 'Getting Out\
    \ of\n   the Loop' optimization allows a callout server to get completely out\n\
    \   of the application message processing loop.\n   The \"Getting Out of the Loop\"\
    \ optimization is made possible by\n   terminating the adapted dataflow (section\
    \ 8.2) and then by\n   terminating the original dataflow (section 8.1).  The order\
    \ of\n   termination is very important.\n   If the original dataflow is terminated\
    \ first, the OPES processor\n   would not allow the adapted dataflow to be terminated\
    \ prematurely, as\n   the processor would not be able to reconstruct the remaining\
    \ portion\n   of the adapted application message.  The processor would not know\n\
    \   which suffix of the remaining original data has to follow the adapted\n  \
    \ parts.  The mapping between original and adapted octets is known only\n   to\
    \ the callout service.\n   An OPES processor that received a DWSS message followed\
    \ by a DWSR\n   message MUST NOT send an AME message with a 206 (partial) status\
    \ code\n   before sending a DSS message.  Informally, this rule means that a\n\
    \   callout server that wants to get out of the loop fast should send a\n   DWSS\
    \ message immediately followed by a DWSR message; the server does\n   not have\
    \ to wait for the OPES processor's permission to terminate\n   adapted dataflow\
    \ before requesting that the OPES processor terminates\n   original dataflow.\n"
- title: 9.  Protocol Element Type Declaration Mnemonic (PETDM)
  contents:
  - "9.  Protocol Element Type Declaration Mnemonic (PETDM)\n   A protocol element\
    \ type is a named set of syntax and semantics rules.\n   This section defines\
    \ a simple, formal declaration mnemonic for\n   protocol element types, labeled\
    \ PETDM.  PETDM simplicity is meant to\n   ease type declarations in this specification.\
    \  PETDM formality is\n   meant to improve interoperability among implementations.\
    \  Two\n   protocol elements are supported by PETDM: message parameter values\n\
    \   and messages.\n   All OCP Core parameter and message types are declared by\
    \ using PETDM.\n   OCP extensions SHOULD use PETDM when declaring new types.\n\
    \   Atom, list, structure, and message constructs are four available base\n  \
    \ types.  Their syntax and semantics rules are defined in section 3.1.\n   New\
    \ types can be declared in PETDM to extend base types semantics by\n   using the\
    \ following declaration templates.  The new semantics rules\n   are meant to be\
    \ attached to each declaration using prose text.\n   Text in angle brackets \"\
    <>\" are template placeholders, to be\n   substituted with actual type names or\
    \ parameter name tokens.  Square\n   brackets \"[]\" surround optional elements\
    \ such as structure members or\n   message payload.\n   o  Declaring a new atomic\
    \ type:\n   <new-type-name>: extends atom;\n   o  Declaring a new list with old-type-name\
    \ items:\n   <new-type-name>: extends list of <old-type-name>;\n   Unless it is\
    \ explicitly noted otherwise, empty lists are valid and\n   have the semantics\
    \ of an absent parameter value.\n   o  Declaring a new structure with members:\n\
    \   <new-type-name>: extends structure with {\n           <old-type-nameA> <old-type-nameB>\
    \ [<old-type-nameC>] ...;\n           <member-name1>: <old-type-name1>;\n    \
    \       <member-name2>: <old-type-name2>;\n           [<member-name3>: <old-type-name3>];\n\
    \           ...\n   };\n   The new structure may have anonymous members and named\
    \ members.\n   Neither group has to exist.  Note that it is always possible for\n\
    \   extensions to add more members to old structures without affecting\n   type\
    \ semantics because unrecognized members are ignored by compliant\n   agents.\n\
    \   o  Declaring a new message with parameters:\n   <new-type-name>: extends message\
    \ with {\n           <old-type-nameA> <old-type-nameB> [<old-type-nameC>] ...;\n\
    \           <parameter-name1>: <old-type-name1>;\n           <parameter-name2>:\
    \ <old-type-name2>;\n           [<parameter-name3>: <old-type-name3>];\n     \
    \      ...\n   };\n   The new type name becomes the message name.  Just as when\
    \ a structure\n   is extended, the new message may have anonymous parameters and\
    \ named\n   parameters.  Neither group has to exist.  Note that it is always\n\
    \   possible for extensions to add more parameters to old messages\n   without\
    \ affecting type semantics because unrecognized parameters are\n   ignored by\
    \ compliant agents.\n   o  Extending a type with more semantics details:\n   <new-type-name>:\
    \ extends <old-type-name>;\n   o  Extending a structure- or message-base type:\n\
    \   <new-type-name>: extends <old-type-name> with {\n           <old-type-nameA>\
    \ <old-type-nameB> [<old-type-nameC>] ...;\n           <member-name1>: <old-type-name1>;\n\
    \           <member-name2>: <old-type-name2>;\n           [<member-name3>: <old-type-name3>];\n\
    \           ...\n   };\n   New anonymous members are appended to the anonymous\
    \ members of the\n   old type, and new named members are merged with named members\
    \ of the\n   old type.\n   o  Extending a message-base type with payload semantics:\n\
    \   <new-type-name>: extends <old-type-name> with {\n           ...\n   } and\
    \ payload;\n   Any any OCP message can have payload, but only some message types\n\
    \   have known payload semantics.  Like any parameter, payload may be\n   required\
    \ or optional.\n   o  Extending type semantics without renaming the type:\n  \
    \ <old-type-name>: extends <namespace>::<old-type-name>;\n   The above template\
    \ can be used by OCP Core extensions that seek to\n   change the semantics of\
    \ OCP Core types without renaming them.  This\n   technique is essential for extending\
    \ OCP messages because the message\n   name is the same as the message type name.\
    \  For example, an SMTP\n   profile for OCP might use the following declaration\
    \ to extend an\n   Application Message Start (AMS) message with Am-Id, a parameter\n\
    \   defined in that profile:\n   AMS: extends Core::AMS with {\n           Am-Id:\
    \ am-id;\n   };\n   All extended types may be used as replacements of the types\
    \ they\n   extend.  For example, a Negotiation Offer (NO) message uses a\n   parameter\
    \ of type Features.  Features (section 10.12) is a list of\n   feature (section\
    \ 10.11) items.  A Feature is a structure-based type.\n   An OCP extension (e.g.,\
    \ an HTTP application profile) may extend the\n   feature type and use a value\
    \ of that extended type in a negotiation\n   offer.  Recipients that are aware\
    \ of the extension will recognize\n   added members in feature items and negotiate\
    \ accordingly.  Other\n   recipients will ignore them.\n   The OCP Core namespace\
    \ tag is \"Core\".  OCP extensions that declare\n   types MUST define their namespace\
    \ tags (so that other extensions and\n   documentation can use them in their PETDM\
    \ declarations).\n"
- title: 9.1.  Optional Parameters
  contents:
  - "9.1.  Optional Parameters\n   Anonymous parameters are positional: The parameter's\
    \ position (i.e.,\n   the number of anonymous parameters to the left) is its \"\
    name\".  Thus,\n   when a structure or message has multiple optional anonymous\n\
    \   parameters, parameters to the right can be used only if all\n   parameters\
    \ to the left are present.  The following notation\n   [name1] [name2] [name3]\
    \ ... [nameN]\n   is interpreted as\n   [name1 [ name2 [ name3 ... [nameN] ...\
    \ ]]]\n   When an anonymous parameter is added to a structure or message that\n\
    \   has optional anonymous parameters, the new parameter has to be\n   optional\
    \ and can only be used if all old optional parameters are in\n   use.  Named parameters\
    \ do not have these limitations, as they are not\n   positional, but associative;\
    \ they are identified by their explicit\n   and unique names.\n"
- title: 10.  Message Parameter Types
  contents:
  - "10.  Message Parameter Types\n   This section defines parameter value types that\
    \ are used for message\n   definitions (section 11).  Before using a parameter\
    \ value, an OCP\n   agent MUST check whether the value has the expected type (i.e.,\n\
    \   whether it complies with all rules from the type definition).  A\n   single\
    \ rule violation means that the parameter is invalid.  See\n   Section 5 for rules\
    \ on processing invalid input.\n   OCP extensions MAY define their own types.\
    \  If they do, OCP\n   extensions MUST define types with exactly one base format\
    \ and MUST\n   specify the type of every new protocol element they introduce.\n"
- title: 10.1.  uri
  contents:
  - "10.1.  uri\n   uri: extends atom;\n   Uri (universal resource identifier) is\
    \ an atom formatted according to\n   URI rules in [RFC2396].\n   Often, a uri\
    \ parameter is used as a unique (within a given scope)\n   identifier.  Uni semantics\
    \ is incomplete without the scope\n   specification.  Many uri parameters are\
    \ URLs.  Unless it is noted\n   otherwise, URL identifiers do not imply the existence\
    \ of a\n   serviceable resource at the location they specify.  For example, an\n\
    \   HTTP request for an HTTP-based URI identifier may result in a 404\n   (Not\
    \ Found) response.\n"
- title: 10.2.  uni
  contents:
  - "10.2.  uni\n   uni: extends atom;\n   Uni (unique numeric identifier) is an atom\
    \ formatted as dec-number\n   and with a value in the [0, 2147483647] range, inclusive.\n\
    \   A uni parameter is used as a unique (within a given scope)\n   identifier.\
    \  Uni semantics is incomplete without the scope\n   specification.  Some OCP\
    \ messages create identifiers (i.e., bring\n   them into scope).  Some OCP messages\
    \ destroy them (i.e, remove them\n   from scope).  An OCP agent MUST NOT create\
    \ the same uni value more\n   than once within the same scope.  When creating\
    \ a new identifier of\n   the same type and within the same scope as some old\
    \ identifier, an\n   OCP agent MUST use a higher numerical value for the new identifier.\n\
    \   The first rule makes uni identifiers suitable for cross-referencing\n   logs\
    \ and other artifacts.  The second rule makes efficient checks of\n   the first\
    \ rule possible.\n   For example, a previously used transaction identifier \"\
    xid\" must not\n   be used for a new Transaction Start (TS) message within the\
    \ same OCP\n   transaction, even if a prior Transaction End (TE) message was sent\n\
    \   for the same transaction.\n   An OCP agent MUST terminate the state associated\
    \ with uni uniqueness\n   scope if all unique values have been used up.\n"
- title: 10.3.  size
  contents:
  - "10.3.  size\n   size: extends atom;\n   Size is an atom formatted as dec-number\
    \ and with a value in the [0,\n   2147483647] range, inclusive.\n   Size value\
    \ is the number of octets in the associated data chunk.\n   OCP Core cannot handle\
    \ application messages that exceed 2147483647\n   octets in size, that require\
    \ larger sizes as a part of OCP marshaling\n   process, or that use sizes with\
    \ granularity other than 8 bits.  This\n   limitation can be addressed by OCP\
    \ extensions, as hinted in section\n   15.1.\n"
- title: 10.4.  offset
  contents:
  - "10.4.  offset\n   offset: extends atom;\n   Offset is an atom formatted as dec-number\
    \ and with a value in the [0,\n   2147483647] range, inclusive.\n   Offset is\
    \ an octet position expressed in the number of octets\n   relative to the first\
    \ octet of the associated dataflow.  The offset\n   of the first data octet has\
    \ a value of zero.\n"
- title: 10.5.  percent
  contents:
  - "10.5.  percent\n   percent: extends atom;\n   Percent is an atom formatted as\
    \ dec-number and with a value in the\n   [0, 100] range, inclusive.\n   Percent\
    \ semantics is incomplete unless its value is associated with a\n   boolean statement\
    \ or assertion.  The value of 0 indicates absolute\n   impossibility.  The value\
    \ of 100 indicates an absolute certainty.  In\n   either case, the associated\
    \ statement can be relied upon as if it\n   were expressed in boolean rather than\
    \ probabilistic terms.  Values in\n   the [1,99] inclusive range indicate corresponding\
    \ levels of certainty\n   that the associated statement is true.\n"
- title: 10.6.  boolean
  contents:
  - "10.6.  boolean\n   boolean: extends atom;\n   Boolean type is an atom with two\
    \ valid values: true and false.  A\n   boolean parameter expresses the truthfulness\
    \ of the associated\n   statement.\n"
- title: 10.7.  xid
  contents:
  - "10.7.  xid\n   xid: extends uni;\n   Xid, an OCP transaction identifier, uniquely\
    \ identifies an OCP\n   transaction within an OCP connection.\n"
- title: 10.8.  sg-id
  contents:
  - "10.8.  sg-id\n   sg-id: extends uni;\n   Sg-id, a service group identifier, uniquely\
    \ identifies a group of\n   services on an OCP connection.\n"
- title: 10.9.  modp
  contents:
  - "10.9.  modp\n   modp: extends percent;\n   Modp extends the percent type to express\
    \ the sender's confidence that\n   application data will be modified.  The boolean\
    \ statement associated\n   with the percentage value is \"data will be modified\"\
    .  Modification\n   is defined as adaptation that changes the numerical value\
    \ of at least\n   one data octet.\n"
- title: 10.10.  result
  contents:
  - "10.10.  result\n   result: extends structure with {\n           atom [atom];\n\
    \   };\n   The OCP processing result is expressed as a structure with two\n  \
    \ documented members: a required Uni status code and an optional\n   reason. \
    \ The reason member contains informative textual information\n   not intended\
    \ for automated processing.  For example:\n   { 200 OK }\n   { 200 \"6:got it\"\
    \ }\n   { 200 \"27:27 octets in UTF-8 encoding\" }\n   This specification defines\
    \ the following status codes:\n   Result Status Codes\n   +--------+--------------+-------------------------------------------+\n\
    \   |   code |     text     | semantics                                 |\n  \
    \ +--------+--------------+-------------------------------------------+\n   |\
    \    200 |      OK      | Overall success.  This specification does |\n   |  \
    \      |              | not contain any general actions for a 200 |\n   |    \
    \    |              | status code recipient.                    |\n   |    206\
    \ |    partial   | Partial success.  This status code is     |\n   |        |\
    \              | documented for Application Message End    |\n   |        |  \
    \            | (AME) messages only.  The code indicates  |\n   |        |    \
    \          | that the agent terminated the             |\n   |        |      \
    \        | corresponding dataflow prematurely (i.e., |\n   |        |        \
    \      | more data would be needed to reconstruct  |\n   |        |          \
    \    | a complete application message).          |\n   |        |            \
    \  | Premature termination of one dataflow     |\n   |        |              |\
    \ does not introduce any special            |\n   |        |              | requirements\
    \ for the other dataflow       |\n   |        |              | termination.  See\
    \ dataflow termination    |\n   |        |              | optimizations (section\
    \ 8) for use cases.  |\n   |    400 |    failure   | An error, exception, or trouble.\
    \  A       |\n   |        |              | recipient of a 400 (failure) result\
    \ of an |\n   |        |              | AME, TE, or CE message MUST destroy any\
    \   |\n   |        |              | state or data associated with the        \
    \ |\n   |        |              | corresponding dataflow, transaction, or   |\n\
    \   |        |              | connection.  For example, an adapted      |\n  \
    \ |        |              | version of the application message data   |\n   |\
    \        |              | must be purged from the processor         |\n   |  \
    \      |              | cache if the OPES processor receives an   |\n   |    \
    \    |              | Application Message End (AME) message     |\n   |      \
    \  |              | with result code of 400.                  |\n   +--------+--------------+-------------------------------------------+\n\
    \   Specific OCP messages may require code-specific actions.\n   Extending result\
    \ semantics is made possible by adding new \"result\"\n   structure members or\
    \ by negotiating additional result codes (e.g., as\n   a part of a negotiated\
    \ profile).  A recipient of an unknown (in\n   then-current context) result code\
    \ MUST act as if code 400 (failure)\n   were received.\n   The recipient of a\
    \ message without the actual result parameter, but\n   with an optional formal\
    \ result parameter, MUST act as if code 200\n   (OK) were received.\n   Textual\
    \ information (the second anonymous parameter of the result\n   structure) is\
    \ often referred to as \"reason\" or \"reason phrase\".  To\n   assist manual\
    \ troubleshooting efforts, OCP agents are encouraged to\n   include descriptive\
    \ reasons with all results indicating a failure.\n   In this specification, an\
    \ OCP message with result status code of 400\n   (failure) is called \"a message\
    \ indicating a failure\".\n"
- title: 10.11.  feature
  contents:
  - "10.11.  feature\n   feature: extends structure with {\n           uri;\n   };\n\
    \   The feature type extends structure to relay an OCP feature identifier\n  \
    \ and to reserve a \"place\" for optional feature-specific parameters\n   (sometimes\
    \ called feature attributes).  Feature values are used to\n   declare support\
    \ for and to negotiate use of OCP features.\n   This specification does not define\
    \ any features.\n"
- title: 10.12.  features
  contents:
  - "10.12.  features\n   features: extends list of feature;\n   Features is a list\
    \ of feature values.  Unless it is noted otherwise,\n   the list can be empty,\
    \ and features are listed in decreasing\n   preference order.\n"
- title: 10.13.  service
  contents:
  - "10.13.  service\n   service: extends structure with {\n           uri;\n   };\n\
    \   Service structure has one anonymous member, an OPES service\n   identifier\
    \ of type uri.  Services may have service-dependent\n   parameters.  An OCP extension\
    \ defining a service for use with OCP\n   MUST define service identifier and service-dependent\
    \ parameters, if\n   there are any, as additional \"service\" structure members.\
    \  For\n   example, a service value may look like this:\n   {\"41:http://www.iana.org/assignments/opes/ocp/tls\"\
    \ \"8:blowfish\"}\n"
- title: 10.14.  services
  contents:
  - "10.14.  services\n   services: extends list of service;\n   Services is a list\
    \ of service values.  Unless it is noted otherwise,\n   the list can be empty,\
    \ and the order of the values is the requested\n   or actual service application\
    \ order.\n"
- title: 10.15.  Dataflow Specializations
  contents:
  - "10.15.  Dataflow Specializations\n   Several parameter types, such as offset\
    \ apply to both original and\n   adapted dataflow.  It is relatively easy to misidentify\
    \ a type's\n   dataflow affiliation, especially when parameters with different\n\
    \   affiliations are mixed together in one message declaration.  The\n   following\
    \ statements declare new dataflow-specific types by using\n   their dataflow-agnostic\
    \ versions (denoted by a <type> placeholder).\n   The following new types refer\
    \ to original data only:\n   org-<type>: extends <type>;\n   The following new\
    \ types refer to adapted data only:\n   adp-<type>: extends <type>;\n   The following\
    \ new types refer to the sender's dataflow only:\n   my-<type>: extends <type>;\n\
    \   The following new types refer to the recipient's dataflow only:\n   your-<type>:\
    \ extends <type>;\n   OCP Core uses the above type-naming scheme to implement\
    \ dataflow\n   specialization for the following types: offset, size, and sg-id.\
    \  OCP\n   extensions SHOULD use the same scheme.\n"
- title: 11.  Message Definitions
  contents:
  - "11.  Message Definitions\n   This section describes specific OCP messages.  Each\
    \ message is given\n   a unique name and usually has a set of anonymous and/or\
    \ named\n   parameters.  The order of anonymous parameters is specified in the\n\
    \   message definitions below.  No particular order for named parameters\n   is\
    \ implied by this specification.  OCP extensions MUST NOT introduce\n   order-dependent\
    \ named parameters.  No more than one named-parameter\n   with a given name can\
    \ appear in the message; messages with multiple\n   equally named parameters are\
    \ semantically invalid.\n   A recipient MUST be able to parse any message in valid\
    \ format (see\n   section 3.1), subject to the limitations of the recipient's\n\
    \   resources.\n   Unknown or unexpected message names, parameters, and payloads\
    \ may be\n   valid extensions.  For example, an \"extra\" named parameter may\
    \ be\n   used for a given message, in addition to what is documented in the\n\
    \   message definition below.  A recipient MUST ignore any valid but\n   unknown\
    \ or unexpected name, parameter, member, or payload.\n   Some message parameter\
    \ values use uni identifiers to refer to various\n   OCP states (see section 10.2\
    \ and Appendix B).  These identifiers are\n   created, used, and destroyed by\
    \ OCP agents via corresponding\n   messages.  Except when creating a new identifier,\
    \ an OCP agent MUST\n   NOT send a uni identifier that corresponds to an inactive\
    \ state\n   (i.e., that was either never created or already destroyed).  Such\n\
    \   identifiers invalidate the host OCP message (see section 5).  For\n   example,\
    \ the recipient must terminate the transaction when the xid\n   parameter in a\
    \ Data Use Mine (DUM) message refers to an unknown or\n   already terminated OCP\
    \ transaction.\n"
- title: 11.1.  Connection Start (CS)
  contents:
  - "11.1.  Connection Start (CS)\n   CS: extends message;\n   A Connection Start\
    \ (CS) message indicates the start of an OCP\n   connection.  An OCP agent MUST\
    \ send this message before it sends any\n   other message on the connection. \
    \ If the first message an OCP agent\n   receives is not Connection Start (CS),\
    \ the agent MUST terminate the\n   connection with a Connection End (CE) message\
    \ having 400 (failure)\n   result status code.  An OCP agent MUST send Connection\
    \ Start (CS)\n   message exactly once.  An OCP agent MUST ignore repeated Connection\n\
    \   Start (CS) messages.\n   At any time, a callout server MAY refuse further\
    \ processing on an OCP\n   connection by sending a Connection End (CE) message\
    \ with the status\n   code 400 (failure).  Note that the above requirement to\
    \ send a CS\n   message first still applies.\n   With TCP/IP as transport, raw\
    \ TCP connections (local and remote peer\n   IP addresses with port numbers) identify\
    \ an OCP connection.  Other\n   transports may provide OCP connection identifiers\
    \ to distinguish\n   logical connections that share the same transport.  For example,\
    \ a\n   single BEEP [RFC3080] channel may be designated as a single OCP\n   connection.\n"
- title: 11.2.  Connection End (CE)
  contents:
  - "11.2.  Connection End (CE)\n   CE: extends message with {\n           [result];\n\
    \   };\n   A Connection End (CE) Indicates the end of an OCP connection.  The\n\
    \   agent initiating closing or termination of a connection MUST send\n   this\
    \ message immediately prior to closing or termination.  The\n   recipient MUST\
    \ free associated state, including transport state.\n   Connection termination\
    \ without a Connection End (CE) message\n   indicates that the connection was\
    \ prematurely closed, possibly\n   without the closing-side agent's prior knowledge\
    \ or intent.  When an\n   OCP agent detects a prematurely closed connection, the\
    \ agent MUST act\n   as if a Connection End (CE) message indicating a failure\
    \ was\n   received.\n   A Connection End (CE) message implies the end of all transactions,\n\
    \   negotiations, and service groups opened or active on the connection\n   being\
    \ ended.\n"
- title: 11.3.  Service Group Created (SGC)
  contents:
  - "11.3.  Service Group Created (SGC)\n   SGC: extends message with {\n        \
    \   my-sg-id services;\n   };\n   A Service Group Created (SGC) message informs\
    \ the recipient that a\n   list of adaptation services has been associated with\
    \ the given\n   service group identifier (\"my-sg-id\").  Following this message,\
    \ the\n   sender can refer to the group by using the identifier.  The recipient\n\
    \   MUST maintain the association until a matching Service Group\n   Destroyed\
    \ (SGD) message is received or the corresponding OCP\n   connection is closed.\n\
    \   Service groups have a connection scope.  Transaction management\n   messages\
    \ do not affect existing service groups.\n   Maintaining service group associations\
    \ requires resources (e.g.,\n   storage to keep the group identifier and a list\
    \ of service IDs).\n   Thus, there is a finite number of associations an implementation\
    \ can\n   maintain.  Callout servers MUST be able to maintain at least one\n \
    \  association for each OCP connection they accept.  If a recipient of a\n   Service\
    \ Group Created (SGC) message does not create the requested\n   association, it\
    \ MUST immediately terminate the connection with a\n   Connection End (CE) message\
    \ indicating a failure.\n"
- title: 11.4.  Service Group Destroyed (SGD)
  contents:
  - "11.4.  Service Group Destroyed (SGD)\n   SGD: extends message with {\n      \
    \     my-sg-id;\n   };\n   A Service Group Destroyed (SGD) message instructs the\
    \ recipient to\n   forget about the service group associated with the specified\n\
    \   identifier.  The recipient MUST destroy the identified service group\n   association.\n"
- title: 11.5.  Transaction Start (TS)
  contents:
  - "11.5.  Transaction Start (TS)\n   TS: extends message with {\n           xid\
    \ my-sg-id;\n   };\n   Sent by an OPES processor, a Transaction Start (TS) message\
    \ indicates\n   the start of an OCP transaction.  Upon receiving this message,\
    \ the\n   callout server MAY refuse further transaction processing by\n   responding\
    \ with a corresponding Transaction End (TE) message.  A\n   callout server MUST\
    \ maintain the state until it receives a message\n   indicating the end of the\
    \ transaction or until it terminates the\n   transaction itself.\n   The required\
    \ \"my-sg-id\" identifier refers to a service group created\n   with an a Service\
    \ Group Created (SGC) message.  The callout server\n   MUST apply the list of\
    \ services associated with \"my-sg-id\", in the\n   specified order.\n   This\
    \ message introduces the transaction identifier (xid).\n"
- title: 11.6.  Transaction End (TE)
  contents:
  - "11.6.  Transaction End (TE)\n   TE: extends message with {\n           xid [result];\n\
    \   };\n   A Transaction End (TE) indicates the end of the identified OCP\n  \
    \ transaction.\n   An OCP agent MUST send a Transaction End (TE) message immediately\n\
    \   after it makes a decision to send no more messages related to the\n   corresponding\
    \ transaction.  Violating this requirement may cause, for\n   example, unnecessary\
    \ delays, rejection of new transactions, and even\n   timeouts for agents that\
    \ rely on this end-of-file condition to\n   proceed.\n   This message terminates\
    \ the life of the transaction identifier (xid).\n"
- title: 11.7.  Application Message Start (AMS)
  contents:
  - "11.7.  Application Message Start (AMS)\n   AMS: extends message with {\n    \
    \       xid;\n           [Services: services];\n   };\n   An Application Message\
    \ Start (AMS) message indicates the start of the\n   original or adapted application\
    \ message processing and dataflow.  The\n   recipient MAY refuse further processing\
    \ by sending an Application\n   Message End (AME) message indicating a failure.\n\
    \   When an AMS message is sent by the OPES processor, the callout server\n  \
    \ usually sends an AMS message back, announcing the creation of an\n   adapted\
    \ version of the original application message.  This\n   announcement may be delayed.\
    \  For example, the callout server may\n   wait for more information from the\
    \ OPES processor.\n   When an AMS message is sent by the callout server, an optional\n\
    \   \"Services\" parameter describes OPES services that the server MAY\n   apply\
    \ to the original application message.  Usually, the \"services\"\n   value matches\
    \ what was asked by the OPES processor.  The callout\n   server SHOULD send a\
    \ \"Services\" parameter if its value would differ\n   from the list of services\
    \ requested by the OPES processor.  As the\n   same service may be known under\
    \ many names, the mismatch does not\n   necessarily imply an error.\n"
- title: 11.8.  Application Message End (AME)
  contents:
  - "11.8.  Application Message End (AME)\n   AME: extends message with {\n      \
    \     xid [result];\n   };\n   An Application Message End (AME) message indicates\
    \ the end of the\n   original or adapted application message processing and dataflow.\
    \  The\n   recipient should expect no more data for the corresponding\n   application\
    \ message.\n   An Application Message End (AME) message ends any data preservation\n\
    \   commitments and any other state associated with the corresponding\n   application\
    \ message.\n   An OCP agent MUST send an Application Message End (AME) message\n\
    \   immediately after it makes a decision to stop processing of its\n   application\
    \ message.  Violating this requirement may cause, for\n   example, unnecessary\
    \ delays, rejection of new transactions, and even\n   timeouts for agents that\
    \ rely on this end-of-file condition to\n   proceed.\n"
- title: 11.9.  Data Use Mine (DUM)
  contents:
  - "11.9.  Data Use Mine (DUM)\n   DUM: extends message with {\n           xid my-offset;\n\
    \           [As-is: org-offset];\n           [Kept: org-offset org-size ];\n \
    \          [Modp: modp];\n   } and payload;\n   A Data Use Mine (DUM) message\
    \ carries application data.  It is the\n   only OCP Core message with a documented\
    \ payload.  The sender MUST NOT\n   make any gaps in data supplied by Data Use\
    \ Mine (DUM) and Data Use\n   Yours (DUY) messages (i.e., the my-offset of the\
    \ next data message\n   must be equal to the my-offset plus the payload size of\
    \ the previous\n   data message).  Messages with gaps are invalid.  The sender\
    \ MUST send\n   payload and MAY use empty payload (i.e., payload with zero size).\
    \  A\n   DUM message without payload is invalid.  Empty payloads are useful\n\
    \   for communicating meta-information about the data (e.g., modification\n  \
    \ predictions or preservation commitments) without sending data.\n   An OPES processor\
    \ MAY send a \"Kept\" parameter to indicate its current\n   data preservation\
    \ commitment (section 7) for original data.  When an\n   OPES processor sends\
    \ a \"Kept\" parameter, the processor MUST keep a\n   copy of the specified data\
    \ (the preservation commitment starts or\n   continues).  The Kept offset parameter\
    \ specifies the offset of the\n   first octet of the preserved data.  The Kept\
    \ size parameter is the\n   size of preserved data.  Note that data preservation\
    \ rules allow\n   (i.e., do not prohibit) an OPES processor to decrease offset\
    \ and to\n   specify a data range not yet fully delivered to the callout server.\n\
    \   OCP Core does not require any relationship between DUM payload and\n   the\
    \ \"Kept\" parameter.\n   If the \"Kept\" parameter value violates data preservation\
    \ rules but\n   the recipient has not sent any Data Use Yours (DUY) messages for\
    \ the\n   given OCP transaction yet, then the recipient MUST NOT use any\n   preserved\
    \ data for the given transaction (i.e., must not sent any\n   Data Use Yours (DUY)\
    \ messages).  If the \"Kept\" parameter value\n   violates data preservation rules\
    \ and the recipient has already sent\n   Data Use Yours (DUY) messages, the DUM\
    \ message is invalid, and the\n   rules of section 5 apply.  These requirements\
    \ help preserve data\n   integrity when \"Kept\" optimization is used by the OPES\
    \ processor.\n   A callout server MUST send a \"Modp\" parameter if the server\
    \ can\n   provide a reliable value and has not already sent the same parameter\n\
    \   value for the corresponding application message.  The definition of\n   \"\
    reliable\" is entirely up to the callout server.  The data\n   modification prediction\
    \ includes DUM payload.  That is, if the\n   attached payload has been modified,\
    \ the modp value cannot be 0%.\n   A callout server SHOULD send an \"As-is\" parameter\
    \ if the attached\n   data is identical to a fragment at the specified offset\
    \ in the\n   original dataflow.  An \"As-is\" parameter specifying a data fragment\n\
    \   that has not been sent to the callout server is invalid.  The\n   recipient\
    \ MUST ignore invalid \"As-is\" parameters.  Identical means\n   that all adapted\
    \ octets have the same numeric value as the\n   corresponding original octets.\
    \  This parameter is meant to allow for\n   partial data preservation optimizations\
    \ without a preservation\n   commitment.  The preserved data still crosses the\
    \ connection with the\n   callout server twice, but the OPES processor may be\
    \ able to optimize\n   its handling of the data.\n   The OPES processor MUST NOT\
    \ terminate its data preservation\n   commitment (section 7) in reaction to receiving\
    \ a Data Use Mine (DUM)\n   message.\n"
- title: 11.10.  Data Use Yours (DUY)
  contents:
  - "11.10.  Data Use Yours (DUY)\n   DUY: extends message with {\n           xid\
    \ org-offset org-size;\n   };\n   The callout server tells the OPES processor\
    \ to use the \"size\" bytes\n   of preserved original data, starting at the specified\
    \ offset, as if\n   that data chunk came from the callout server in a Data Use\
    \ Mine (DUM)\n   message.\n   The OPES processor MUST NOT terminate its data preservation\n\
    \   commitment (section 7) in reaction to receiving a Data Use Yours\n   (DUY)\
    \ message.\n"
- title: 11.11.  Data Preservation Interest (DPI)
  contents:
  - "11.11.  Data Preservation Interest (DPI)\n   DPI: extends message with {\n  \
    \         xid org-offset org-size;\n   };\n   The Data Preservation Interest (DPI)\
    \ message describes an original\n   data chunk by using the first octet offset\
    \ and size as parameters.\n   The chunk is the only area of original data that\
    \ the callout server\n   may be interested in referring to in future Data Use\
    \ Yours (DUY)\n   messages.  This data chunk is referred to as \"reusable data\"\
    .  The\n   rest of the original data is referred to as \"disposable data\".  Thus,\n\
    \   disposable data consists of octets below the specified offset and at\n   or\
    \ above the (offset + size) offset.\n   After sending this message, the callout\
    \ server MUST NOT send Data Use\n   Yours (DUY) messages referring to disposable\
    \ data chunk(s).  If an\n   OPES processor is not preserving some reusable data,\
    \ it MAY start\n   preserving that data.  If an OPES processor preserves some\
    \ disposable\n   data, it MAY stop preserving that data.  If an OPES processor\
    \ does\n   not preserve some disposable data, it MAY NOT start preserving that\n\
    \   data.\n   A callout server MUST NOT indicate reusable data areas that overlap\n\
    \   with disposable data areas indicated in previous Data Preservation\n   Interest\
    \ (DPI) messages.  In other words, reusable data must not\n   grow, and disposable\
    \ data must not shrink.  If a callout server\n   violates this rule, the Data\
    \ Preservation Interest (DPI) message is\n   invalid (see section 5).\n   The\
    \ Data Preservation Interest (DPI) message cannot force the OPES\n   processor\
    \ to preserve data.  In this context, the term reusable\n   stands for callout\
    \ server interest in reusing the data in the future,\n   given the OPES processor\
    \ cooperation.\n   For example, an offset value of zero and the size value of\
    \ 2147483647\n   indicate that the server may want to reuse all the original data.\n\
    \   The size value of zero indicates that the server is not going to send\n  \
    \ any more Data Use Yours (DUY) messages.\n"
- title: 11.12.  Want Stop Receiving Data (DWSR)
  contents:
  - "11.12.  Want Stop Receiving Data (DWSR)\n   DWSR: extends message with {\n  \
    \         xid org-size;\n   };\n   The Want Stop Receiving Data (DWSR) message\
    \ informs OPES processor\n   that the callout server wants to stop receiving original\
    \ data any\n   time after receiving at least an org-size amount of an application\n\
    \   message prefix.  That is, the server is asking the processor to\n   terminate\
    \ original dataflow prematurely (see section 8.1) after\n   sending at least org-size\
    \ octets.\n   An OPES processor receiving a Want Stop Receiving Data (DWSR) message\n\
    \   SHOULD terminate original dataflow by sending an Application Message\n   End\
    \ (AME) message with a 206 (partial) status code.\n   An OPES processor MUST NOT\
    \ terminate its data preservation commitment\n   (section 7) in reaction to receiving\
    \ a Want Stop Receiving Data\n   (DWSR) message.  Just like with any other message,\
    \ an OPES processor\n   may use information supplied by Want Stop Receiving Data\
    \ (DWSR) to\n   decide on future preservation commitments.\n"
- title: 11.13.  Want Stop Sending Data (DWSS)
  contents:
  - "11.13.  Want Stop Sending Data (DWSS)\n   DWSS: extends message with {\n    \
    \       xid;\n   };\n   The Want Stop Sending Data (DWSS) message informs the\
    \ OPES processor\n   that the callout server wants to stop sending adapted data\
    \ as soon as\n   possible; the server is asking the processor for permission to\n\
    \   terminate adapted dataflow prematurely (see section 8.2).  The OPES\n   processor\
    \ can grant this permission by using a Stop Sending Data\n   (DSS) message.\n\
    \   Once the DWSS message is sent, the callout server MUST NOT\n   prematurely\
    \ terminate adapted dataflow until the server receives a\n   DSS message from\
    \ the OPES processor.  If the server violates this\n   rule, the OPES processor\
    \ MUST act as if no DWSS message were\n   received.  The latter implies that the\
    \ OCP transaction is terminated\n   by the processor, with an error.\n   An OPES\
    \ processor receiving a DWSS message SHOULD respond with a Stop\n   Sending Data\
    \ (DSS) message, provided the processor would not violate\n   DSS message requirements\
    \ by doing so.  The processor SHOULD respond\n   immediately once DSS message\
    \ requirements can be satisfied.\n"
- title: 11.14.  Stop Sending Data (DSS)
  contents:
  - "11.14.  Stop Sending Data (DSS)\n   DSS: extends message with {\n           xid;\n\
    \   };\n   The Stop Sending Data (DSS) message instructs the callout server to\n\
    \   terminate adapted dataflow prematurely by sending an Application\n   Message\
    \ End (AME) message with a 206 (partial) status code.  A\n   callout server is\
    \ expected to solicit the Stop Sending Data (DSS)\n   message by sending a Want\
    \ Stop Sending Data (DWSS) message (see\n   section 8.2).\n   A callout server\
    \ receiving a solicited Stop Sending Data (DSS)\n   message for a yet-unterminated\
    \ adapted dataflow MUST immediately\n   terminate dataflow by sending an Application\
    \ Message End (AME)\n   message with a 206 (partial) status code.  If the callout\
    \ server\n   already terminated adapted dataflow, the callout server MUST ignore\n\
    \   the Stop Sending Data (DSS) message.  A callout server receiving an\n   unsolicited\
    \ DSS message for a yet-unterminated adapted dataflow MUST\n   either treat that\
    \ message as invalid or as solicited (i.e., the\n   server cannot simply ignore\
    \ unsolicited DSS messages).\n   The OPES processor sending a Stop Sending Data\
    \ (DSS) message MUST be\n   able to reconstruct the adapted application message\
    \ correctly after\n   the callout server terminates dataflow.  This requirement\
    \ implies\n   that the processor must have access to any original data sent to\
    \ the\n   callout after the Stop Sending Data (DSS) message, if there is any.\n\
    \   Consequently, the OPES processor either has to send no data at all or\n  \
    \ has to keep a copy of it.\n   If a callout server receives a DSS message and,\
    \ in violation of the\n   above rules, waits for more original data before sending\
    \ an\n   Application Message End (AME) response, a deadlock may occur: The\n \
    \  OPES processor may wait for the Application Message End (AME) message\n   to\
    \ send more original data.\n"
- title: 11.15.  Want Data Paused (DWP)
  contents:
  - "11.15.  Want Data Paused (DWP)\n   DWP: extends message with {\n           xid\
    \ your-offset;\n   };\n   The Want Data Paused (DWP) message indicates the sender's\
    \ temporary\n   lack of interest in receiving data starting with the specified\n\
    \   offset.  This disinterest implies nothing about sender's intent to\n   send\
    \ data.\n   The \"your-offset\" parameter refers to dataflow originating at the\
    \ OCP\n   agent receiving the parameter.\n   If, at the time the Want Data Paused\
    \ (DWP) message is received, the\n   recipient has already sent data at the specified\
    \ offset, the message\n   recipient MUST stop sending data immediately.  Otherwise,\
    \ the\n   recipient MUST stop sending data immediately after it sends the\n  \
    \ specified offset.  Once the recipient stops sending more data, it\n   MUST immediately\
    \ send a Paused My Data (DPM) message and MUST NOT\n   send more data until it\
    \ receives a Want More Data (DWM) message.\n   As are most OCP Core mechanisms,\
    \ data pausing is asynchronous.  The\n   sender of the Want Data Paused (DWP)\
    \ message MUST NOT rely on the\n   data being paused exactly at the specified\
    \ offset or at all.\n"
- title: 11.16.  Paused My Data (DPM)
  contents:
  - "11.16.  Paused My Data (DPM)\n   DPM: extends message with {\n           xid;\n\
    \   };\n   The Paused My Data (DPM) message indicates the sender's commitment\
    \ to\n   send no more data until the sender receives a Want More Data (DWM)\n\
    \   message.\n   The recipient of the Paused My Data (DPM) message MAY expect\
    \ the data\n   delivery being paused.  If the recipient receives data despite\
    \ this\n   expectation, it MAY abort the corresponding transaction with a\n  \
    \ Transaction End (TE) message indicating a failure.\n"
- title: 11.17.  Want More Data (DWM)
  contents:
  - "11.17.  Want More Data (DWM)\n   DWM: extends message with {\n           xid;\n\
    \           [Size-request: your-size];\n   };\n   The Want More Data (DWM) message\
    \ indicates the sender's need for more\n   data.\n   Message parameters always\
    \ refer to dataflow originating at the other\n   OCP agent.  When sent by an OPES\
    \ processor, your-size is adp-size;\n   when sent by a callout server, your-size\
    \ is org-size.\n   The \"Size-request\" parameter refers to dataflow originating\
    \ at the\n   OCP agent receiving the parameter.  If a \"Size-request\" parameter\
    \ is\n   present, its value is the suggested minimum data size.  It is meant\n\
    \   to allow the recipient to deliver data in fewer chunks.  The\n   recipient\
    \ MAY ignore the \"Size-request\" parameter.  An absent\n   \"Size-request\" parameter\
    \ implies \"any size\".\n   The message also cancels the Paused My Data (DPM)\
    \ message effect.  If\n   the recipient was not sending any data because of its\
    \ DPM message,\n   the recipient MAY resume sending data.  Note, however, that\
    \ the Want\n   More Data (DWM) message can be sent regardless of whether the\n\
    \   dataflow in question has been paused.  The \"Size-request\" parameter\n  \
    \ makes this message a useful stand-alone optimization.\n"
- title: 11.18.  Negotiation Offer (NO)
  contents:
  - "11.18.  Negotiation Offer (NO)\n   NO: extends message with {\n           features;\n\
    \           [SG: my-sg-id];\n           [Offer-Pending: boolean];\n   };\n   A\
    \ Negotiation Offer (NO) message solicits a selection of a single\n   \"best\"\
    \ feature out of a supplied list, using a Negotiation Response\n   (NR) message.\
    \  The sender is expected to list preferred features\n   first when it is possible.\
    \  The recipient MAY ignore sender\n   preferences.  If the list of features is\
    \ empty, the negotiation is\n   bound to fail but remains valid.\n   Both the\
    \ OPES processor and the callout server are allowed to send\n   Negotiation Offer\
    \ (NO) messages.  The rules in this section ensure\n   that only one offer is\
    \ honored if two offers are submitted\n   concurrently.  An agent MUST NOT send\
    \ a Negotiation Offer (NO)\n   message if it still expects a response to its previous\
    \ offer on the\n   same connection.\n   If an OPES processor receives a Negotiation\
    \ Offer (NO) message while\n   its own offer is pending, the processor MUST disregard\
    \ the server\n   offer.  Otherwise, it MUST respond immediately.\n   If a callout\
    \ server receives a Negotiation Offer (NO) message when\n   its own offer is pending,\
    \ the server MUST disregard its own offer.\n   In either case, the server MUST\
    \ respond immediately.\n   If an agent receives a message sequence that violates\
    \ any of the\n   above rules in this section, the agent MUST terminate the connection\n\
    \   with a Connection End (CE) message indicating a failure.\n   An optional \"\
    Offer-Pending\" parameter is used for Negotiation Phase\n   maintenance (section\
    \ 6.1).  The option's value defaults to \"false\".\n   An optional \"SG\" parameter\
    \ is used to narrow the scope of\n   negotiations to the specified service group.\
    \  If SG is present, the\n   negotiated features are negotiated and enabled only\
    \ for transactions\n   that use the specified service group ID.  Connection-scoped\
    \ features\n   are negotiated and enabled for all service groups.  The presence\
    \ of\n   scope does not imply automatic conflict resolution common to\n   programming\
    \ languages; no conflicts are allowed.  When negotiating\n   connection-scoped\
    \ features, an agent MUST check for conflicts within\n   each existing service\
    \ group.  When negotiating group-scoped features,\n   an agent MUST check for\
    \ conflicts with connection-scoped features\n   already negotiated.  For example,\
    \ it must not be possible to\n   negotiate a connection-scoped HTTP application\
    \ profile if one service\n   group already has an SMTP application profile, and\
    \ vice versa.\n   OCP agents SHOULD NOT send offers with service groups used by\
    \ pending\n   transactions.  Unless it is explicitly noted otherwise in a feature\n\
    \   documentation, OCP agents MUST NOT apply any negotiations to pending\n   transactions.\
    \  In other words, negotiated features take effect with\n   the new OCP transaction.\n\
    \   As with other protocol elements, OCP Core extensions may document\n   additional\
    \ negotiation restrictions.  For example, specification of a\n   transport security\
    \ feature may prohibit the use of the SG parameter\n   in negotiation offers,\
    \ to avoid situations where encryption is\n   enabled for only a portion of overlapping\
    \ transactions on the same\n   transport connection.\n"
- title: 11.19.  Negotiation Response (NR)
  contents:
  - "11.19.  Negotiation Response (NR)\n   NR: extends message with {\n          \
    \ [feature];\n           [SG: my-sg-id];\n           [Rejects: features];\n  \
    \         [Unknowns: features];\n           [Offer-Pending: boolean];\n   };\n\
    \   A Negotiation Response (NR) message conveys recipient's reaction to a\n  \
    \ Negotiation Offer (NO) request.  An accepted offer (a.k.a., positive\n   response)\
    \ is indicated by the presence of an anonymous \"feature\"\n   parameter, containing\
    \ the selected feature.  If the selected feature\n   does not match any of the\
    \ offered features, the offering agent MUST\n   consider negotiation failed and\
    \ MAY terminate the connection with a\n   Connection End (CE) message indicating\
    \ a failure.\n   A rejected offer (negative response) is indicated by omitting\
    \ the\n   anonymous \"feature\" parameter.\n   The successfully negotiated feature\
    \ becomes effective immediately.\n   The sender of a positive response MUST consider\
    \ the corresponding\n   feature enabled immediately after the response is sent;\
    \ the recipient\n   of a positive response MUST consider the corresponding feature\n\
    \   enabled immediately after the response is received.  Note that the\n   scope\
    \ of the negotiated feature application may be limited to a\n   specified service\
    \ group.  The negotiation phase state does not affect\n   enabling of the feature.\n\
    \   If negotiation offer contains an SG parameter, the responder MUST\n   include\
    \ that parameter in the Negotiation Response (NR) message.  The\n   recipient\
    \ of an NR message without the expected SG parameter MUST\n   treat negotiation\
    \ response as invalid.\n   If the negotiation offer lacks an SG parameter, the\
    \ responder MUST\n   NOT include that parameter in the Negotiation Response (NR)\
    \ message.\n   The recipient of an NR message with an unexpected SG parameter\
    \ MUST\n   treat the negotiation response as invalid.\n   An optional \"Offer-Pending\"\
    \ parameter is used for Negotiation Phase\n   maintenance (section 6.1).  The\
    \ option's value defaults to \"false\".\n   When accepting or rejecting an offer,\
    \ the sender of the Negotiation\n   Response (NR) message MAY supply additional\
    \ details via Rejects and\n   Unknowns parameters.  The Rejects parameter can\
    \ be used to list\n   features that were known to the Negotiation Offer (NO) recipient\
    \ but\n   could not be supported given negotiated state that existed when NO\n\
    \   message was received.  The Unknowns parameter can be used to list\n   features\
    \ that were unknown to the NO recipient.\n"
- title: 11.20.  Ability Query (AQ)
  contents:
  - "11.20.  Ability Query (AQ)\n   AQ: extends message with {\n           feature;\n\
    \   };\n   An Ability Query (AQ) message solicits an immediate Ability Answer\n\
    \   (AA) response.  The recipient MUST respond immediately with an AA\n   message.\
    \  This is a read-only, non-modifying interface.  The\n   recipient MUST NOT enable\
    \ or disable any features due to an AQ\n   request.\n   OCP extensions documenting\
    \ a feature MAY extend AQ messages to supply\n   additional information about\
    \ the feature or the query itself.\n   The primary intended purpose of the ability\
    \ inquiry interface is\n   debugging and troubleshooting and not automated fine-tuning\
    \ of agent\n   behavior and configuration.  The latter may be better achieved\
    \ by the\n   OCP negotiation mechanism (section 6).\n"
- title: 11.21.  Ability Answer (AA)
  contents:
  - "11.21.  Ability Answer (AA)\n   AA: extends message with {\n           boolean;\n\
    \   };\n   An Ability Answer (AA) message expresses the sender's support for a\n\
    \   feature requested via an Ability Query (AQ) message.  The sender MUST\n  \
    \ set the value of the anonymous boolean parameter to the truthfulness\n   of\
    \ the following statement: \"At the time of this answer generation,\n   the sender\
    \ supports the feature in question\".  The meaning of\n   \"support\" and additional\
    \ details are feature specific.  OCP\n   extensions documenting a feature MUST\
    \ document the definition of\n   \"support\" in the scope of the above statement\
    \ and MAY extend AA\n   messages to supply additional information about the feature\
    \ or the\n   answer itself.\n"
- title: 11.22.  Progress Query (PQ)
  contents:
  - "11.22.  Progress Query (PQ)\n   PQ: extends message with {\n           [xid];\n\
    \   };\n   A Progress Query (PQ) message solicits an immediate Progress Answer\n\
    \   (PA) response.  The recipient MUST immediately respond to a PQ\n   request,\
    \ even if the transaction identifier is invalid from the\n   recipient's point\
    \ of view.\n"
- title: 11.23.  Progress Answer (PA)
  contents:
  - "11.23.  Progress Answer (PA)\n   PA: extends message with {\n           [xid];\n\
    \           [Org-Data: org-size];\n   };\n   A PA message carries the sender's\
    \ state.  The \"Org-Data\" size is the\n   total original data size received or\
    \ sent by the agent so far for the\n   identified application message (an agent\
    \ can be either sending or\n   receiving original data, so there is no ambiguity).\
    \  When referring\n   to received data, progress information does not imply that\
    \ the data\n   has otherwise been processed in some way.\n   The progress inquiry\
    \ interface is useful for several purposes,\n   including keeping idle OCP connections\
    \ \"alive\", gauging the agent\n   processing speed, verifying the agent's progress,\
    \ and debugging OCP\n   communications.  Verifying progress, for example, may\
    \ be essential to\n   implement timeouts for callout servers that do not send\
    \ any adapted\n   data until the entire original application message is received\
    \ and\n   processed.\n   A recipient of a PA message MUST NOT assume that the\
    \ sender is not\n   working on any transaction or application message not identified\
    \ in\n   the PA message.  A PA message does not carry information about\n   multiple\
    \ transactions or application messages.\n   If an agent is working on the transaction\
    \ identified in the Progress\n   Query (PQ) request, the agent MUST send the corresponding\
    \ transaction\n   ID (xid) when answering the PQ with a PA message.  Otherwise,\
    \ the\n   agent MUST NOT send the transaction ID.  If an agent is working on\n\
    \   the original application message for the specified transaction, the\n   agent\
    \ MUST send the Org-Data parameter.  If the agent has already\n   sent or received\
    \ the Application Message End (AME) message for the\n   original dataflow, the\
    \ agent MUST NOT send the Org-data parameter.\n   Informally, the PA message relays\
    \ the sender's progress with the\n   transaction and original dataflow identified\
    \ by the Progress Query\n   (PQ) message, provided the transaction identifier\
    \ is still valid at\n   the time of the answer.  Absent information in the answer\
    \ indicates\n   invalid, unknown, or closed transaction and/or original dataflow\
    \ from\n   the query recipient's point of view.\n"
- title: 11.24.  Progress Report (PR)
  contents:
  - "11.24.  Progress Report (PR)\n   PR: extends message with {\n           [xid];\n\
    \           [Org-Data: org-size];\n   };\n   A Progress Report (PR) message carries\
    \ the sender's state.  The\n   message semantics and associated requirements are\
    \ identical to those\n   of a Progress Answer (PA) message except that the PR\
    \ message, is sent\n   unsolicited.  The sender MAY report progress at any time.\
    \  The sender\n   MAY report progress unrelated to any transaction or original\n\
    \   application message or related to any valid (current) transaction or\n   original\
    \ dataflow.\n   Unsolicited progress reports are especially useful for OCP extensions\n\
    \   dealing with \"slow\" callout services that introduce significant\n   delays\
    \ for the final application message recipient.  The report may\n   contain progress\
    \ information that will make that final recipient more\n   delay tolerant.\n"
- title: 12.  IAB Considerations
  contents:
  - "12.  IAB Considerations\n   OPES treatment of IETF Internet Architecture Board\
    \ (IAB)\n   considerations [RFC3238] are documented in [RFC3914].\n"
- title: 13.  Security Considerations
  contents:
  - "13.  Security Considerations\n   This section examines security considerations\
    \ for OCP.  OPES threats\n   are documented in [RFC3837]\n   OCP relays application\
    \ messages that may contain sensitive\n   information.  Appropriate transport\
    \ encryption can be negotiated to\n   prevent information leakage or modification\
    \ (see section 6), but OCP\n   agents may support unencrypted transport by default.\
    \  These\n   configurations will expose application messages to third-party\n\
    \   recording and modification, even if OPES proxies themselves are\n   secure.\n\
    \   OCP implementation bugs may lead to security vulnerabilities in OCP\n   agents,\
    \ even if OCP traffic itself remains secure.  For example, a\n   buffer overflow\
    \ in a callout server caused by a malicious OPES\n   processor may grant that\
    \ processor access to information from other\n   (100% secure) OCP connections,\
    \ including connections with other OPES\n   processors.\n   Careless OCP implementations\
    \ may rely on various OCP identifiers to\n   be unique across all OCP agents.\
    \  A malicious agent can inject an OCP\n   message that matches identifiers used\
    \ by other agents, in an attempt\n   to gain access to sensitive data.  OCP implementations\
    \ must always\n   check an identifier for being \"local\" to the corresponding\
    \ connection\n   before using that identifier.\n   OCP is a stateful protocol.\
    \  Several OCP commands increase the amount\n   of state that the recipient has\
    \ to maintain.  For example, a Service\n   Group Created (SGC) message instructs\
    \ the recipient to maintain an\n   association between a service group identifier\
    \ and a list of\n   services.\n   Implementations that cannot correctly handle\
    \ resource exhaustion\n   increase security risks.  The following are known OCP-related\n\
    \   resources that may be exhausted during a compliant OCP message\n   exchange:\n\
    \   OCP message structures: OCP message syntax does not limit the nesting\n  \
    \    depth of OCP message structures and does not place an upper limit\n     \
    \ on the length (number of OCTETs) of most syntax elements.\n   concurrent connections:\
    \ OCP does not place an upper limit on the\n      number of concurrent connections\
    \ that a callout server may be\n      instructed to create via Connection Start\
    \ (CS) messages.\n   service groups: OCP does not place an upper limit on the\
    \ number of\n      service group associations that a callout server may be instructed\n\
    \      to create via Service Group Created (SGC) messages.\n   concurrent transactions:\
    \ OCP does not place an upper limit on the\n      number of concurrent transactions\
    \ that a callout server may be\n      instructed to maintain via Transaction Start\
    \ (TS) messages.\n   concurrent flows: OCP Core does not place an upper limit\
    \ on the\n      number of concurrent adapted flows that an OPES processor may\
    \ be\n      instructed to maintain via Application Message Start (AMS)\n     \
    \ messages.\n"
- title: 14.  IANA Considerations
  contents:
  - "14.  IANA Considerations\n   The IANA maintains a list of OCP features, including\
    \ application\n   profiles (section 10.11).  For each feature, its uri parameter\
    \ value\n   is registered along with the extension parameters (if there are any).\n\
    \   Registered feature syntax and semantics are documented with PETDM\n   notation\
    \ (section 9).\n   The IESG is responsible for assigning a designated expert to\
    \ review\n   each standards-track registration prior to IANA assignment.  The\
    \ OPES\n   working group mailing list may be used to solicit commentary for both\n\
    \   standards-track and non-standards-track features.\n   Standards-track OCP\
    \ Core extensions SHOULD use\n   http://www.iana.org/assignments/opes/ocp/ prefix\
    \ for feature uri\n   parameters.  It is suggested that the IANA populate resources\n\
    \   identified by such \"uri\" parameters with corresponding feature\n   registrations.\
    \  It is also suggested that the IANA maintain an index\n   of all registered\
    \ OCP features at the\n   http://www.iana.org/assignments/opes/ocp/ URL or on\
    \ a page linked\n   from that URL.\n   This specification defines no OCP features\
    \ for IANA registration.\n"
- title: 15.  Compliance
  contents:
  - "15.  Compliance\n   This specification defines compliance for the following compliance\n\
    \   subjects:  OPES processors (OCP client implementations), callout\n   servers\
    \ (OCP server implementations), and OCP extensions.  An OCP\n   agent (a processor\
    \ or callout server) may also be referred to as the\n   \"sender\" or \"recipient\"\
    \ of an OCP message.\n   A compliance subject is compliant if it satisfies all\
    \ applicable\n   \"MUST\" and \"SHOULD\" requirements.  By definition, to satisfy\
    \ a \"MUST\"\n   requirement means to act as prescribed by the requirement; to\
    \ satisfy\n   a \"SHOULD\" requirement means either to act as prescribed by the\n\
    \   requirement or to have a reason to act differently.  A requirement is\n  \
    \ applicable to the subject if it instructs (addresses) the subject.\n   Informally,\
    \ OCP compliance means that there are no known \"MUST\"\n   violations, and that\
    \ all \"SHOULD\" violations are deliberate.  In\n   other words, \"SHOULD\" means\
    \ \"MUST satisfy or MUST have a reason to\n   violate\".  It is expected that\
    \ compliance claims be accompanied by a\n   list of unsupported SHOULDs (if any),\
    \ in an appropriate format,\n   explaining why the preferred behavior was not\
    \ chosen.\n   Only normative parts of this specification affect compliance.\n\
    \   Normative parts are those parts explicitly marked with the word\n   \"normative\"\
    , definitions, and phrases containing unquoted capitalized\n   keywords from [RFC2119].\
    \  Consequently, examples and illustrations\n   are not normative.\n"
- title: 15.1.  Extending OCP Core
  contents:
  - "15.1.  Extending OCP Core\n   OCP extensions MUST NOT change the OCP Core message\
    \ format, as\n   defined by ABNF and accompanying normative rules in Section 3.1.\n\
    \   This requirement is intended to allow OCP message viewers,\n   validators,\
    \ and \"intermediary\" software to at least isolate and\n   decompose any OCP\
    \ message, even a message with semantics unknown to\n   them (i.e., extended).\n\
    \   OCP extensions are allowed to change normative OCP Core requirements\n   for\
    \ OPES processors and callout servers.  However, OCP extensions\n   SHOULD NOT\
    \ make these changes and MUST require on a \"MUST\"-level that\n   these changes\
    \ are negotiated prior to taking effect.  Informally,\n   this specification defines\
    \ compliant OCP agent behavior until changes\n   to this specification (if any)\
    \ are successfully negotiated.\n   For example, if an RTSP profile for OCP requires\
    \ support for offsets\n   exceeding 2147483647 octets, the profile specification\
    \ can document\n   appropriate OCP changes while requiring that RTSP adaptation\
    \ agents\n   negotiate \"large offsets\" support before using large offsets. \
    \ This\n   negotiation can be bundled with negotiating another feature (e.g.,\n\
    \   negotiating an RTSP profile may imply support for \"large offsets\").\n  \
    \ As implied by the above rules, OCP extensions may dynamically alter\n   the\
    \ negotiation mechanism itself, but such an alternation would have\n   to be negotiated\
    \ first, using the negotiation mechanism defined by\n   this specification.  For\
    \ example, successfully negotiating a feature\n   might change the default \"\
    Offer-Pending\" value from false to true.\n"
- title: Appendix A.  Message Summary
  contents:
  - "Appendix A.  Message Summary\n   This appendix is not normative.  The table below\
    \ summarizes key OCP\n   message properties.  For each message, the table provides\
    \ the\n   following information:\n   name: Message name as seen on the wire.\n\
    \   title: Human-friendly message title.\n   P: Whether this specification documents\
    \ message semantics as sent by\n      an OPES processor.\n   S: Whether this specification\
    \ documents message semantics as sent by\n      a callout server.\n   tie: Related\
    \ messages such as associated request, response message,\n      or associated\
    \ state message.\n   +-------+----------------------------+-------+-------+--------------+\n\
    \   |  name |            title           |   P   |   S   |      tie     |\n  \
    \ +-------+----------------------------+-------+-------+--------------+\n   |\
    \   CS  |      Connection Start      |   X   |   X   |      CE      |\n   |  \
    \ CE  |       Connection End       |   X   |   X   |      CS      |\n   |  SGC\
    \  |    Service Group Created   |   X   |   X   |    SGD TS    |\n   |  SGD  |\
    \   Service Group Destroyed  |   X   |   X   |      SGC     |\n   |   TS  |  \
    \    Transaction Start     |   X   |       |    TE SGC    |\n   |   TE  |    \
    \   Transaction End      |   X   |   X   |      TS      |\n   |  AMS  |  Application\
    \ Message Start |   X   |   X   |      AME     |\n   |  AME  |   Application Message\
    \ End  |   X   |   X   |    AMS DSS   |\n   |  DUM  |        Data Use Mine   \
    \    |   X   |   X   |    DUY DWP   |\n   |  DUY  |       Data Use Yours     \
    \  |       |   X   |    DUM DPI   |\n   |  DPI  | Data Preservation Interest |\
    \       |   X   |      DUY     |\n   |  DWSS |   Want Stop Sending Data   |  \
    \     |   X   |   DWSR DSS   |\n   |  DWSR |  Want Stop Receiving Data  |    \
    \   |   X   |     DWSS     |\n   |  DSS  |      Stop Sending Data     |   X  \
    \ |       |     DWSS     |\n   |  DWP  |      Want Data Paused      |   X   |\
    \   X   |      DPM     |\n   |  DPM  |       Paused My Data       |   X   |  \
    \ X   |    DWP DWM   |\n   |  DWM  |       Want More Data       |   X   |   X\
    \   |      DPM     |\n   |   NO  |      Negotiation Offer     |   X   |   X  \
    \ |    NR SGC    |\n   |   NR  |    Negotiation Response    |   X   |   X   |\
    \      NO      |\n   |   PQ  |       Progress Query       |   X   |   X   |  \
    \    PA      |\n   |   PA  |       Progress Answer      |   X   |   X   |    \
    \ PQ PR    |\n   |   PR  |       Progress Report      |   X   |   X   |      PA\
    \      |\n   |   AQ  |        Ability Query       |   X   |   X   |      AA  \
    \    |\n   |   AA  |       Ability Answer       |   X   |   X   |      AQ    \
    \  |\n   +-------+----------------------------+-------+-------+--------------+\n"
- title: Appendix B.  State Summary
  contents:
  - "Appendix B.  State Summary\n   This appendix is not normative.  The table below\
    \ summarizes OCP\n   states.  Some states are maintained across multiple transactions\
    \ and\n   application messages.  Some correspond to a single request/response\n\
    \   dialog; the asynchronous nature of most OCP message exchanges\n   requires\
    \ OCP agents to process other messages while waiting for a\n   response to a request\
    \ and, hence, while maintaining the state of the\n   dialog.\n   For each state,\
    \ the table provides the following information:\n   state: Short state label.\n\
    \   birth: Messages creating this state.\n   death: Messages destroying this state.\n\
    \   ID: Associated identifier, if any.\n   +-------------------------------+-------------+-------------+-------+\n\
    \   |             state             | birth       | death       |   ID  |\n  \
    \ +-------------------------------+-------------+-------------+-------+\n   |\
    \           connection          | CS          | CE          |       |\n   |  \
    \       service group         | SGC         | SGD         | sg-id |\n   |    \
    \      transaction          | TS          | TE          |  xid  |\n   |    application\
    \ message and    | AMS         | AME         |       |\n   |            dataflow\
    \           |             |             |       |\n   |     premature org-dataflow\
    \    | DWSR        | AME         |       |\n   |          termination        \
    \  |             |             |       |\n   |     premature adp-dataflow    |\
    \ DWSS        | DSS AME     |       |\n   |          termination          |  \
    \           |             |       |\n   |        paused dataflow        | DPM\
    \         | DWM         |       |\n   |    preservation commitment    | DUM  \
    \       | DPI AME     |       |\n   |          negotiation          | NO     \
    \     | NR          |       |\n   |        progress inquiry       | PQ       \
    \   | PA          |       |\n   |        ability inquiry        | PQ         \
    \ | PA          |       |\n   +-------------------------------+-------------+-------------+-------+\n"
- title: Appendix C.  Acknowledgements
  contents:
  - "Appendix C.  Acknowledgements\n   The author gratefully acknowledges the contributions\
    \ of Abbie Barbir\n   (Nortel Networks), Oskar Batuner (Independent Consultant),\
    \ Larry\n   Masinter (Adobe), Karel Mittig (France Telecom R&D), Markus Hofmann\n\
    \   (Bell Labs), Hilarie Orman (The Purple Streak), Reinaldo Penno\n   (Nortel\
    \ Networks), and Martin Stecher (Webwasher), as well as an\n   anonymous OPES\
    \ working group participant.\n   Special thanks to Marshall Rose for his xml2rfc\
    \ tool.\n"
- title: 16.  References
  contents:
  - '16.  References

    '
- title: 16.1.  Normative References
  contents:
  - "16.1.  Normative References\n   [RFC2119]    Bradner, S., \"Key words for use\
    \ in RFCs to Indicate\n                Requirement Levels\", BCP 14, RFC 2119,\
    \ March 1997.\n   [RFC2234]    Crocker, D. and P. Overell, \"Augmented BNF for\
    \ Syntax\n                Specifications: ABNF\", RFC 2234, November 1997.\n \
    \  [RFC2396]    Berners-Lee, T., Fielding, R., and L. Masinter, \"Uniform\n  \
    \              Resource Identifiers (URI): Generic Syntax\", RFC 2396,\n     \
    \           August 1998.\n   [RFC3835]    Barbir, A., Penno, R., Chen, R., Hofmann,\
    \ M., and H.\n                Orman, \"An Architecture for Open Pluggable Edge\
    \ Services\n                (OPES)\", RFC 3835, August 2004.\n"
- title: 16.2.  Informative References
  contents:
  - "16.2.  Informative References\n   [RFC3836]    Beck, A., Hofmann, M., Orman,\
    \ H., Penno, R., and A.\n                Terzis, \"Requirements for Open Pluggable\
    \ Edge Services\n                (OPES) Callout Protocols\", RFC 3836, August\
    \ 2004.\n   [RFC3837]    Barbir, A., Batuner, O., Srinivas, B., Hofmann, M., and\n\
    \                H. Orman, \"Security Threats and Risks for Open Pluggable\n \
    \               Edge Services (OPES)\", RFC 3837, August 2004.\n   [RFC3752] \
    \   Barbir, A., Burger, E., Chen, R., McHenry, S., Orman,\n                H.,\
    \ and R. Penno, \"Open Pluggable Edge Services (OPES)\n                Use Cases\
    \ and Deployment Scenarios\", RFC 3752, April\n                2004.\n   [RFC3838]\
    \    Barbir, A., Batuner, O., Beck, A., Chan, T., and H.\n                Orman,\
    \ \"Policy, Authorization, and Enforcement\n                Requirements of the\
    \ Open Pluggable Edge Services\n                (OPES)\", RFC 3838, August 2004.\n\
    \   [RFC3897]    Barbir, A., \"Open Pluggable Edge Services (OPES)\n         \
    \       Entities and End Points Communication\", RFC 3897,\n                September\
    \ 2004.\n   [OPES-RULES] Beck, A. and A. Rousskov, \"P: Message Processing\n \
    \               Language\", Work in Progress, October 2003.\n   [RFC3914]    Barbir,\
    \ A. and A. Rousskov, \"Open Pluggable Edge\n                Services (OPES) Treatment\
    \ of IAB Considerations\", RFC\n                3914, October 2004.\n   [OPES-HTTP]\
    \  Rousskov, A. and M. Stecher, \"HTTP adaptation with\n                OPES\"\
    , Work in Progress, January 2004.\n   [RFC2616]    Fielding,  R., Gettys, J.,\
    \ Mogul, J., Frystyk, H.,\n                Masinter, L., Leach, P., and T. Berners-Lee,\
    \ \"Hypertext\n                Transfer Protocol -- HTTP/1.1\", RFC 2616, June\
    \ 1999.\n   [RFC3080]    Rose, M., \"The Blocks Extensible Exchange Protocol\n\
    \                Core\", RFC 3080, March 2001.\n   [RFC3238]    Floyd, S. and\
    \ L. Daigle, \"IAB Architectural and Policy\n                Considerations for\
    \ Open Pluggable Edge Services\", RFC\n                3238, January 2002.\n"
- title: Author's Address
  contents:
  - "Author's Address\n   Alex Rousskov\n   The Measurement Factory\n   EMail: rousskov@measurement-factory.com\n\
    \   URI:   http://www.measurement-factory.com/\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2005).\n   This\
    \ document is subject to the rights, licenses and restrictions\n   contained in\
    \ BCP 78, and except as set forth therein, the authors\n   retain all their rights.\n\
    \   This document and the information contained herein are provided on an\n  \
    \ \"AS IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n  \
    \ OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY AND THE INTERNET\n   ENGINEERING\
    \ TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS OR IMPLIED,\n   INCLUDING BUT NOT\
    \ LIMITED TO ANY WARRANTY THAT THE USE OF THE\n   INFORMATION HEREIN WILL NOT\
    \ INFRINGE ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY OR FITNESS\
    \ FOR A PARTICULAR PURPOSE.\n"
- title: Intellectual Property
  contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or\
    \ scope of any\n   Intellectual Property Rights or other rights that might be\
    \ claimed to\n   pertain to the implementation or use of the technology described\
    \ in\n   this document or the extent to which any license under such rights\n\
    \   might or might not be available; nor does it represent that it has\n   made\
    \ any independent effort to identify any such rights.  Information\n   on the\
    \ procedures with respect to rights in RFC documents can be\n   found in BCP 78\
    \ and BCP 79.\n   Copies of IPR disclosures made to the IETF Secretariat and any\n\
    \   assurances of licenses to be made available, or the result of an\n   attempt\
    \ made to obtain a general license or permission for the use of\n   such proprietary\
    \ rights by implementers or users of this\n   specification can be obtained from\
    \ the IETF on-line IPR repository at\n   http://www.ietf.org/ipr.\n   The IETF\
    \ invites any interested party to bring to its attention any\n   copyrights, patents\
    \ or patent applications, or other proprietary\n   rights that may cover technology\
    \ that may be required to implement\n   this standard.  Please address the information\
    \ to the IETF at ietf-\n   ipr@ietf.org.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
