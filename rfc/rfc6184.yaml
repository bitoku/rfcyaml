- contents:
  - '                   RTP Payload Format for H.264 Video

    '
  title: __initial_text__
- contents:
  - "Abstract\n   This memo describes an RTP Payload format for the ITU-T\n   Recommendation
    H.264 video codec and the technically identical\n   ISO/IEC International Standard
    14496-10 video codec, excluding the\n   Scalable Video Coding (SVC) extension
    and the Multiview Video Coding\n   extension, for which the RTP payload formats
    are defined elsewhere.\n   The RTP payload format allows for packetization of
    one or more\n   Network Abstraction Layer Units (NALUs), produced by an H.264
    video\n   encoder, in each RTP payload.  The payload format has wide\n   applicability,
    as it supports applications from simple low bitrate\n   conversational usage,
    to Internet video streaming with interleaved\n   transmission, to high bitrate
    video-on-demand.\n   This memo obsoletes RFC 3984.  Changes from RFC 3984 are
    summarized\n   in Section 14.  Issues on backward compatibility to RFC 3984 are\n
    \  discussed in Section 15.\n"
  title: Abstract
- contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This
    document is a product of the Internet Engineering Task Force\n   (IETF).  It represents
    the consensus of the IETF community.  It has\n   received public review and has
    been approved for publication by the\n   Internet Engineering Steering Group (IESG).
    \ Further information on\n   Internet Standards is available in Section 2 of RFC
    5741.\n   Information about the current status of this document, any errata,\n
    \  and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc6184.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2011 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n
    \  (http://trustee.ietf.org/license-info) in effect on the date of\n   publication
    of this document.  Please review these documents\n   carefully, as they describe
    your rights and restrictions with respect\n   to this document.  Code Components
    extracted from this document must\n   include Simplified BSD License text as described
    in Section 4.e of\n   the Trust Legal Provisions and are provided without warranty
    as\n   described in the Simplified BSD License.\n"
  title: Copyright Notice
- contents:
  - "Table of Contents\n   1. Introduction ....................................................4\n
    \     1.1. The H.264 Codec ............................................4\n      1.2.
    Parameter Set Concept ......................................5\n      1.3. Network
    Abstraction Layer Unit Types .......................6\n   2. Conventions .....................................................7\n
    \  3. Scope ...........................................................7\n   4.
    Definitions and Abbreviations ...................................7\n      4.1.
    Definitions ................................................7\n      4.2. Abbreviations
    ..............................................9\n   5. RTP Payload Format .............................................10\n
    \     5.1. RTP Header Usage ..........................................10\n      5.2.
    Payload Structures ........................................12\n      5.3. NAL
    Unit Header Usage .....................................13\n      5.4. Packetization
    Modes .......................................16\n      5.5. Decoding Order Number
    (DON) ...............................17\n      5.6. Single NAL Unit Packet ....................................19\n
    \     5.7. Aggregation Packets .......................................20\n           5.7.1.
    Single-Time Aggregation Packet (STAP) ..............22\n           5.7.2. Multi-Time
    Aggregation Packets (MTAPs) .............25\n      5.8. Fragmentation Units (FUs)
    .................................29\n   6. Packetization Rules ............................................33\n
    \     6.1. Common Packetization Rules ................................33\n      6.2.
    Single NAL Unit Mode ......................................34\n      6.3. Non-Interleaved
    Mode ......................................34\n      6.4. Interleaved Mode ..........................................34\n
    \  7. De-Packetization Process .......................................35\n      7.1.
    Single NAL Unit and Non-Interleaved Mode ..................35\n      7.2. Interleaved
    Mode ..........................................35\n           7.2.1. Size of the
    De-Interleaving Buffer .................36\n           7.2.2. De-Interleaving
    Process ............................36\n      7.3. Additional De-Packetization
    Guidelines ....................38\n   8. Payload Format Parameters ......................................39\n
    \     8.1. Media Type Registration ...................................39\n      8.2.
    SDP Parameters ............................................57\n           8.2.1.
    Mapping of Payload Type Parameters to SDP ..........57\n           8.2.2. Usage
    with the SDP Offer/Answer Model ..............58\n           8.2.3. Usage in Declarative
    Session Descriptions ..........66\n      8.3. Examples ..................................................68\n
    \     8.4. Parameter Set Considerations ..............................75\n      8.5.
    Decoder Refresh Point Procedure Using In-Band\n           Transport of Parameter
    Sets (Informative)..................78\n           8.5.1. IDR Procedure to Respond
    to a Request for\n                  a Decoder Refresh Point ............................78\n
    \          8.5.2. Gradual Recovery Procedure to Respond to\n                  a
    Request for a Decoder Refresh Point ..............79\n   9. Security Considerations
    ........................................79\n   10. Congestion Control ............................................80\n
    \  11. IANA Considerations ...........................................81\n   12.
    Informative Appendix: Application Examples ....................81\n      12.1.
    Video Telephony According to Annex A of ITU-T\n            Recommendation H.241
    .....................................81\n      12.2. Video Telephony, No Slice
    Data Partitioning, No\n            NAL Unit Aggregation .....................................82\n
    \     12.3. Video Telephony, Interleaved Packetization Using\n            NAL
    Unit Aggregation .....................................82\n      12.4. Video Telephony
    with Data Partitioning ...................83\n      12.5. Video Telephony or Streaming
    with FUs and Forward\n            Error Correction .........................................83\n
    \     12.6. Low Bitrate Streaming ....................................86\n      12.7.
    Robust Packet Scheduling in Video Streaming ..............86\n   13. Informative
    Appendix: Rationale for Decoding Order Number .....87\n      13.1. Introduction
    .............................................87\n      13.2. Example of Multi-Picture
    Slice Interleaving ..............88\n      13.3. Example of Robust Packet Scheduling
    ......................89\n      13.4. Robust Transmission Scheduling of Redundant
    Coded\n            Slices ...................................................93\n
    \     13.5. Remarks on Other Design Possibilities ....................94\n   14.
    Changes from RFC 3984 .........................................94\n   15. Backward
    Compatibility to RFC 3984 ............................96\n   16. Acknowledgements
    ..............................................98\n   17. References ....................................................98\n
    \     17.1. Normative References .....................................98\n      17.2.
    Informative References ...................................99\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   This memo specifies an RTP payload specification for the
    video coding\n   standard known as ITU-T Recommendation H.264 [1] and ISO/IEC\n
    \  International Standard 14496-10 [2] (both also known as Advanced\n   Video
    Coding (AVC)).  In this memo, the name H.264 is used for the\n   codec and the
    standard, but this memo is equally applicable to the\n   ISO/IEC counterpart of
    the coding standard.\n   This memo obsoletes RFC 3984.  Changes from RFC 3984
    are summarized\n   in Section 14.  Issues on backward compatibility to RFC 3984
    are\n   discussed in Section 15.\n"
  - contents:
    - "1.1.  The H.264 Codec\n   The H.264 video codec has a very broad application
      range that covers\n   all forms of digital compressed video, from low bitrate
      Internet\n   streaming applications to HDTV broadcast and Digital Cinema\n   applications
      with nearly lossless coding.  Compared to the current\n   state of technology,
      the overall performance of H.264 is such that\n   bitrate savings of 50% or
      more are reported.  Digital Satellite TV\n   quality, for example, was reported
      to be achievable at 1.5 Mbit/s,\n   compared to the current operation point
      of MPEG 2 video at around 3.5\n   Mbit/s [10].\n   The codec specification [1]
      itself conceptually distinguishes between\n   a Video Coding Layer (VCL) and
      a Network Abstraction Layer (NAL).\n   The VCL contains the signal processing
      functionality of the codec;\n   mechanisms such as transform, quantization,
      and motion-compensated\n   prediction; and a loop filter.  It follows the general
      concept of\n   most of today's video codecs, a macroblock-based coder that uses\n
      \  inter picture prediction with motion compensation and transform\n   coding
      of the residual signal.  The VCL encoder outputs slices: a bit\n   string that
      contains the macroblock data of an integer number of\n   macroblocks and the
      information of the slice header (containing the\n   spatial address of the first
      macroblock in the slice, the initial\n   quantization parameter, and similar
      information).  Macroblocks in\n   slices are arranged in scan order unless a
      different macroblock\n   allocation is specified using the syntax of slice groups.
      \ In-picture\n   prediction is used only within a slice.  More information is
      provided\n   in [10].\n   The NAL encoder encapsulates the slice output of the
      VCL encoder into\n   Network Abstraction Layer Units (NALUs), which are suitable
      for\n   transmission over packet networks or for use in packet-oriented\n   multiplex
      environments.  Annex B of H.264 defines an encapsulation\n   process to transmit
      such NALUs over bytestream-oriented networks.  In\n   the scope of this memo,
      Annex B is not relevant.\n   Internally, the NAL uses NAL units.  A NAL unit
      consists of a one-\n   byte header and the payload byte string.  The header
      indicates the\n   type of the NAL unit, the (potential) presence of bit errors
      or\n   syntax violations in the NAL unit payload, and information regarding\n
      \  the relative importance of the NAL unit for the decoding process.\n   This
      RTP payload specification is designed to be unaware of the bit\n   string in
      the NAL unit payload.\n   One of the main properties of H.264 is the complete
      decoupling of the\n   transmission time, the decoding time, and the sampling
      or\n   presentation time of slices and pictures.  The decoding process\n   specified
      in H.264 is unaware of time, and the H.264 syntax does not\n   carry information
      such as the number of skipped frames (as is common\n   in the form of the Temporal
      Reference in earlier video compression\n   standards).  Also, there are NAL
      units that affect many pictures and\n   that are, therefore, inherently timeless.
      \ For this reason, the\n   handling of the RTP timestamp requires some special
      considerations\n   for NAL units for which the sampling or presentation time
      is not\n   defined or, at transmission time, is unknown.\n"
    title: 1.1.  The H.264 Codec
  - contents:
    - "1.2.  Parameter Set Concept\n   One very fundamental design concept of H.264
      is to generate self-\n   contained packets, to make mechanisms such as the header
      duplication\n   of RFC 4629 [11] or MPEG-4 Visual's Header Extension Code (HEC)
      [12]\n   unnecessary.  This was achieved by decoupling information relevant
      to\n   more than one slice from the media stream.  This higher-layer meta\n
      \  information should be sent reliably, asynchronously, and in advance\n   from
      the RTP packet stream that contains the slice packets.\n   (Provisions for sending
      this information in-band are also available\n   for applications that do not
      have an out-of-band transport channel\n   appropriate for the purpose).  The
      combination of the higher-level\n   parameters is called a parameter set.  The
      H.264 specification\n   includes two types of parameter sets: sequence parameter
      sets and\n   picture parameter sets.  An active sequence parameter set remains\n
      \  unchanged throughout a coded video sequence, and an active picture\n   parameter
      set remains unchanged within a coded picture.  The sequence\n   and picture
      parameter set structures contain information such as\n   picture size, optional
      coding modes employed, and macroblock to slice\n   group map.\n   To be able
      to change picture parameters (such as the picture size)\n   without having to
      transmit parameter set updates synchronously to the\n   slice packet stream,
      the encoder and decoder can maintain a list of\n   more than one sequence and
      picture parameter set.  Each slice header\n   contains a codeword that indicates
      the sequence and picture parameter\n   set to be used.\n   This mechanism allows
      the decoupling of the transmission of parameter\n   sets from the packet stream
      and the transmission of them by external\n   means (e.g., as a side effect of
      the capability exchange) or through\n   a (reliable or unreliable) control protocol.
      \ It may even be possible\n   that they are never transmitted but are fixed
      by an application\n   design specification.\n"
    title: 1.2.  Parameter Set Concept
  - contents:
    - "1.3.  Network Abstraction Layer Unit Types\n   Tutorial information on the
      NAL design can be found in [13], [14],\n   and [15].\n   All NAL units consist
      of a single NAL unit type octet, which also\n   co-serves as the payload header
      of this RTP payload format.  A\n   description of the payload of a NAL unit
      follows.\n   The syntax and semantics of the NAL unit type octet are specified
      in\n   [1], but the essential properties of the NAL unit type octet are\n   summarized
      below.  The NAL unit type octet has the following format:\n      +---------------+\n
      \     |0|1|2|3|4|5|6|7|\n      +-+-+-+-+-+-+-+-+\n      |F|NRI|  Type   |\n
      \     +---------------+\n   The semantics of the components of the NAL unit
      type octet, as\n   specified in the H.264 specification, are described briefly
      below.\n   F:       1 bit\n            forbidden_zero_bit.  The H.264 specification
      declares a\n            value of 1 as a syntax violation.\n   NRI:     2 bits\n
      \           nal_ref_idc.  A value of 00 indicates that the content of\n            the
      NAL unit is not used to reconstruct reference pictures\n            for inter
      picture prediction.  Such NAL units can be\n            discarded without risking
      the integrity of the reference\n            pictures.  Values greater than 00
      indicate that the decoding\n            of the NAL unit is required to maintain
      the integrity of the\n            reference pictures.\n   Type:    5 bits\n
      \           nal_unit_type.  This component specifies the NAL unit\n            payload
      type as defined in Table 7-1 of [1] and later within\n            this memo.
      \ For a reference of all currently defined NAL\n            unit types and their
      semantics, please refer to Section\n            7.4.1 in [1].\n   This memo
      introduces new NAL unit types, which are presented in\n   Section 5.2.  The
      NAL unit types defined in this memo are marked as\n   unspecified in [1].  Moreover,
      this specification extends the\n   semantics of F and NRI as described in Section
      5.3.\n"
    title: 1.3.  Network Abstraction Layer Unit Types
  title: 1.  Introduction
- contents:
  - "2.  Conventions\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\",
    \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\"
    in this\n   document are to be interpreted as described in RFC 2119 [4].\n   This
    specification uses the notion of setting and clearing a bit when\n   bit fields
    are handled.  Setting a bit is the same as assigning that\n   bit the value of
    1 (On).  Clearing a bit is the same as assigning\n   that bit the value of 0 (Off).\n"
  title: 2.  Conventions
- contents:
  - "3.  Scope\n   This payload specification can only be used to carry the \"naked\"\n
    \  H.264 NAL unit stream over RTP and not the bitstream format discussed\n   in
    Annex B of H.264.  Likely, the first applications of this\n   specification will
    be in the conversational multimedia field, video\n   telephony or video conferencing,
    but the payload format also covers\n   other applications, such as Internet streaming
    and TV over IP.\n"
  title: 3.  Scope
- contents:
  - '4.  Definitions and Abbreviations

    '
  - contents:
    - "4.1.  Definitions\n   This document uses the definitions of [1].  The following
      terms,\n   defined in [1], are summed up for convenience:\n      access unit:
      A set of NAL units always containing a primary coded\n      picture.  In addition
      to the primary coded picture, an access unit\n      may also contain one or
      more redundant coded pictures or other NAL\n      units not containing slices
      or slice data partitions of a coded\n      picture.  The decoding of an access
      unit always results in a\n      decoded picture.\n      coded video sequence:
      A sequence of access units that consists, in\n      decoding order, of an instantaneous
      decoding refresh (IDR) access\n      unit followed by zero or more non-IDR access
      units including all\n      subsequent access units up to but not including any
      subsequent IDR\n      access unit.\n      IDR access unit: An access unit in
      which the primary coded picture\n      is an IDR picture.\n      IDR picture:
      A coded picture containing only slices with I or SI\n      slice types that
      causes a \"reset\" in the decoding process.  After\n      the decoding of an
      IDR picture, all following coded pictures in\n      decoding order can be decoded
      without inter prediction from any\n      picture decoded prior to the IDR picture.\n
      \     primary coded picture: The coded representation of a picture to be\n      used
      by the decoding process for a bitstream conforming to H.264.\n      The primary
      coded picture contains all macroblocks of the picture.\n      redundant coded
      picture: A coded representation of a picture or a\n      part of a picture.
      \ The content of a redundant coded picture shall\n      not be used by the decoding
      process for a bitstream conforming to\n      H.264.  The content of a redundant
      coded picture may be used by\n      the decoding process for a bitstream that
      contains errors or\n      losses.\n      VCL NAL unit: A collective term used
      to refer to coded slice and\n      coded data partition NAL units.\n   In addition,
      the following definitions apply:\n      decoding order number (DON): A field
      in the payload structure or a\n      derived variable indicating NAL unit decoding
      order.  Values of\n      DON are in the range of 0 to 65535, inclusive.  After
      reaching the\n      maximum value, the value of DON wraps around to 0.\n      NAL
      unit decoding order: A NAL unit order that conforms to the\n      constraints
      on NAL unit order given in Section 7.4.1.2 in [1].\n      NALU-time: The value
      that the RTP timestamp would have if the NAL\n      unit would be transported
      in its own RTP packet.\n      transmission order: The order of packets in ascending
      RTP sequence\n      number order (in modulo arithmetic).  Within an aggregation\n
      \     packet, the NAL unit transmission order is the same as the order\n      of
      appearance of NAL units in the packet.\n      media-aware network element (MANE):
      A network element, such as a\n      middlebox or application layer gateway that
      is capable of parsing\n      certain aspects of the RTP payload headers or the
      RTP payload and\n      reacting to the contents.\n         Informative note:
      The concept of a MANE goes beyond normal\n         routers or gateways in that
      a MANE has to be aware of the\n         signaling (e.g., to learn about the
      payload type mappings of\n         the media streams) and that it has to be
      trusted when working\n         with Secure Real-time Transport Protocol (SRTP).
      \ The advantage\n         of using MANEs is that they allow packets to be dropped\n
      \        according to the needs of the media coding.  For example, if a\n         MANE
      has to drop packets due to congestion on a certain link,\n         it can identify
      and remove those packets whose elimination\n         produces the least adverse
      effect on the user experience.\n      static macroblock: A certain amount of
      macroblocks in the video\n      stream can be defined as static, as defined
      in Section 8.3.2.8 in\n      [3].  Static macroblocks free up additional processing
      cycles for\n      the handling of non-static macroblocks.  Based on a given
      amount\n      of video processing resources and a given resolution, a higher\n
      \     number of static macroblocks enables a correspondingly higher\n      frame
      rate.\n      default sub-profile: The subset of coding tools, which may be all\n
      \     coding tools of one profile or the common subset of coding tools\n      of
      more than one profile, indicated by the profile-level-id\n      parameter.\n
      \     default level: The level indicated by the profile-level-id\n      parameter,
      which consists of three octets, profile_idc, profile-\n      iop, and level_idc.
      \ The default level is indicated by level_idc\n      in most cases, and, in
      some cases, additionally by profile-iop.\n"
    title: 4.1.  Definitions
  - contents:
    - "4.2.  Abbreviations\n      DON:        Decoding Order Number\n      DONB:       Decoding
      Order Number Base\n      DOND:       Decoding Order Number Difference\n      FEC:
      \       Forward Error Correction\n      FU:         Fragmentation Unit\n      IDR:
      \       Instantaneous Decoding Refresh\n      IEC:        International Electrotechnical
      Commission\n      ISO:        International Organization for Standardization\n
      \     ITU-T:      International Telecommunication Union,\n                  Telecommunication
      Standardization Sector\n      MANE:       Media-Aware Network Element\n      MTAP:
      \      Multi-Time Aggregation Packet\n      MTAP16:     MTAP with 16-bit timestamp
      offset\n      MTAP24:     MTAP with 24-bit timestamp offset\n      NAL:        Network
      Abstraction Layer\n      NALU:       NAL Unit\n      SAR:        Sample Aspect
      Ratio\n      SEI:        Supplemental Enhancement Information\n      STAP:       Single-Time
      Aggregation Packet\n      STAP-A:     STAP type A\n      STAP-B:     STAP type
      B\n      TS:         Timestamp\n      VCL:        Video Coding Layer\n      VUI:
      \       Video Usability Information\n"
    title: 4.2.  Abbreviations
  title: 4.  Definitions and Abbreviations
- contents:
  - '5.  RTP Payload Format

    '
  - contents:
    - "5.1.  RTP Header Usage\n   The format of the RTP header is specified in RFC
      3550 [5] and\n   reprinted in Figure 1 for convenience.  This payload format
      uses the\n   fields of the header in a manner consistent with that specification.\n
      \  When one NAL unit is encapsulated per RTP packet, the RECOMMENDED RTP\n   payload
      format is specified in Section 5.6.  The RTP payload (and the\n   settings for
      some RTP header bits) for aggregation packets and\n   fragmentation units are
      specified in Sections 5.7.2 and 5.8,\n   respectively.\n       0                   1
      \                  2                   3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3
      4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \     |V=2|P|X|  CC   |M|     PT      |       sequence number         |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \     |                           timestamp                           |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \     |           synchronization source (SSRC) identifier            |\n      +=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+\n
      \     |            contributing source (CSRC) identifiers             |\n      |
      \                            ....                              |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \     Figure 1.  RTP header according to RFC 3550\n   The RTP header information
      to be set according to this RTP payload\n   format is set as follows:\n   Marker
      bit (M): 1 bit\n      Set for the very last packet of the access unit indicated
      by the\n      RTP timestamp, in line with the normal use of the M bit in video\n
      \     formats, to allow an efficient playout buffer handling.  For\n      aggregation
      packets (STAP and MTAP), the marker bit in the RTP\n      header MUST be set
      to the value that the marker bit of the last\n      NAL unit of the aggregation
      packet would have been if it were\n      transported in its own RTP packet.
      \ Decoders MAY use this bit as\n      an early indication of the last packet
      of an access unit but MUST\n      NOT rely on this property.\n         Informative
      note: Only one M bit is associated with an\n         aggregation packet carrying
      multiple NAL units.  Thus, if a\n         gateway has re-packetized an aggregation
      packet into several\n         packets, it cannot reliably set the M bit of those
      packets.\n   Payload type (PT): 7 bits\n      The assignment of an RTP payload
      type for this new packet format\n      is outside the scope of this document
      and will not be specified\n      here.  The assignment of a payload type has
      to be performed either\n      through the profile used or in a dynamic way.\n
      \  Sequence number (SN): 16 bits\n      Set and used in accordance with RFC
      3550.  For the single NALU and\n      non-interleaved packetization mode, the
      sequence number is used to\n      determine decoding order for the NALU.\n   Timestamp:
      32 bits\n      The RTP timestamp is set to the sampling timestamp of the content.\n
      \     A 90 kHz clock rate MUST be used.\n      If the NAL unit has no timing
      properties of its own (e.g.,\n      parameter set and SEI NAL units), the RTP
      timestamp is set to the\n      RTP timestamp of the primary coded picture of
      the access unit in\n      which the NAL unit is included, according to Section
      7.4.1.2 of\n      [1].\n      The setting of the RTP timestamp for MTAPs is
      defined in Section\n      5.7.2.\n      Receivers SHOULD ignore any picture
      timing SEI messages included\n      in access units that have only one display
      timestamp.  Instead,\n      receivers SHOULD use the RTP timestamp for synchronizing
      the\n      display process.\n      If one access unit has more than one display
      timestamp carried in\n      a picture timing SEI message, then the information
      in the SEI\n      message SHOULD be treated as relative to the RTP timestamp,
      with\n      the earliest event occurring at the time given by the RTP\n      timestamp
      and subsequent events later, as given by the difference\n      in picture time
      values carried in the picture timing SEI message.\n      Let tSEI1, tSEI2, ...,
      tSEIn be the display timestamps carried in\n      the SEI message of an access
      unit, where tSEI1 is the earliest of\n      all such timestamps.  Let tmadjst()
      be a function that adjusts the\n      SEI messages time scale to a 90-kHz time
      scale.  Let TS be the RTP\n      timestamp.  Then, the display time for the
      event associated with\n      tSEI1 is TS.  The display time for the event with
      tSEIx, where x\n      is [2..n], is TS + tmadjst (tSEIx - tSEI1).\n         Informative
      note: Displaying coded frames as fields is needed\n         commonly in an operation
      known as 3:2 pulldown, in which film\n         content that consists of coded
      frames is displayed on a display\n         using interlaced scanning.  The picture
      timing SEI message\n         enables carriage of multiple timestamps for the
      same coded\n         picture, and therefore the 3:2 pulldown process is perfectly\n
      \        controlled.  The picture timing SEI message mechanism is\n         necessary
      because only one timestamp per coded frame can be\n         conveyed in the
      RTP timestamp.\n"
    title: 5.1.  RTP Header Usage
  - contents:
    - "5.2.  Payload Structures\n   The payload format defines three different basic
      payload structures.\n   A receiver can identify the payload structure by the
      first byte of\n   the RTP packet payload, which co-serves as the RTP payload
      header\n   and, in some cases, as the first byte of the payload.  This byte
      is\n   always structured as a NAL unit header.  The NAL unit type field\n   indicates
      which structure is present.  The possible structures are as\n   follows.\n   Single
      NAL Unit Packet: Contains only a single NAL unit in the\n   payload.  The NAL
      header type field is equal to the original NAL unit\n   type, i.e., in the range
      of 1 to 23, inclusive.  Specified in Section\n   5.6.\n   Aggregation Packet:
      Packet type used to aggregate multiple NAL units\n   into a single RTP payload.
      \ This packet exists in four versions, the\n   Single-Time Aggregation Packet
      type A (STAP-A), the Single-Time\n   Aggregation Packet type B (STAP-B), Multi-Time
      Aggregation Packet\n   (MTAP) with 16-bit offset (MTAP16), and Multi-Time Aggregation
      Packet\n   (MTAP) with 24-bit offset (MTAP24).  The NAL unit type numbers\n
      \  assigned for STAP-A, STAP-B, MTAP16, and MTAP24 are 24, 25, 26, and\n   27,
      respectively.  Specified in Section 5.7.\n   Fragmentation Unit: Used to fragment
      a single NAL unit over multiple\n   RTP packets.  Exists with two versions,
      FU-A and FU-B, identified\n   with the NAL unit type numbers 28 and 29, respectively.
      \ Specified in\n   Section 5.8.\n      Informative note: This specification
      does not limit the size of\n      NAL units encapsulated in single NAL unit
      packets and\n      fragmentation units.  The maximum size of a NAL unit encapsulated\n
      \     in any aggregation packet is 65535 bytes.\n   Table 1 summarizes NAL unit
      types and the corresponding RTP packet\n   types when each of these NAL units
      is directly used as a packet\n   payload, and where the types are described
      in this memo.\n      Table 1.  Summary of NAL unit types and the corresponding
      packet\n                types\n      NAL Unit  Packet    Packet Type Name               Section\n
      \     Type      Type\n      -------------------------------------------------------------\n
      \     0        reserved                                     -\n      1-23     NAL
      unit  Single NAL unit packet             5.6\n      24       STAP-A    Single-time
      aggregation packet     5.7.1\n      25       STAP-B    Single-time aggregation
      packet     5.7.1\n      26       MTAP16    Multi-time aggregation packet      5.7.2\n
      \     27       MTAP24    Multi-time aggregation packet      5.7.2\n      28
      \      FU-A      Fragmentation unit                 5.8\n      29       FU-B
      \     Fragmentation unit                 5.8\n      30-31    reserved                                     -\n"
    title: 5.2.  Payload Structures
  - contents:
    - "5.3.  NAL Unit Header Usage\n   The structure and semantics of the NAL unit
      header were introduced in\n   Section 1.3.  For convenience, the format of the
      NAL unit header is\n   reprinted below:\n      +---------------+\n      |0|1|2|3|4|5|6|7|\n
      \     +-+-+-+-+-+-+-+-+\n      |F|NRI|  Type   |\n      +---------------+\n
      \  This section specifies the semantics of F and NRI according to this\n   specification.\n
      \  F:    1 bit\n         forbidden_zero_bit.  A value of 0 indicates that the
      NAL unit\n         type octet and payload should not contain bit errors or other\n
      \        syntax violations.  A value of 1 indicates that the NAL unit\n         type
      octet and payload may contain bit errors or other syntax\n         violations.\n
      \        MANEs SHOULD set the F bit to indicate detected bit errors in\n         the
      NAL unit.  The H.264 specification requires that the F bit\n         be equal
      to 0.  When the F bit is set, the decoder is advised\n         that bit errors
      or any other syntax violations may be present\n         in the payload or in
      the NAL unit type octet.  The simplest\n         decoder reaction to a NAL unit
      in which the F bit is equal to 1\n         is to discard such a NAL unit and
      to conceal the lost data in\n         the discarded NAL unit.\n   NRI:  2 bits\n
      \        nal_ref_idc.  The semantics of value 00 and a non-zero value\n         remain
      unchanged from the H.264 specification.  In other words,\n         a value of
      00 indicates that the content of the NAL unit is not\n         used to reconstruct
      reference pictures for inter picture\n         prediction.  Such NAL units can
      be discarded without risking\n         the integrity of the reference pictures.
      \ Values greater than\n         00 indicate that the decoding of the NAL unit
      is required to\n         maintain the integrity of the reference pictures.\n
      \        In addition to the specification above, according to this RTP\n         payload
      specification, values of NRI indicate the relative\n         transport priority,
      as determined by the encoder.  MANEs can\n         use this information to protect
      more important NAL units better\n         than they do less important NAL units.
      \ The highest transport\n         priority is 11, followed by 10, and then by
      01; finally, 00 is\n         the lowest.\n            Informative note: Any
      non-zero value of NRI is handled\n            identically in H.264 decoders.
      \ Therefore, receivers need\n            not manipulate the value of NRI when
      passing NAL units to\n            the decoder.\n         An H.264 encoder MUST
      set the value of NRI according to the\n         H.264 specification (Subclause
      7.4.1) when the value of\n         nal_unit_type is in the range of 1 to 12,
      inclusive.  In\n         particular, the H.264 specification requires that the
      value of\n         NRI SHALL be equal to 0 for all NAL units having nal_unit_type\n
      \        equal to 6, 9, 10, 11, or 12.\n         For NAL units having nal_unit_type
      equal to 7 or 8 (indicating\n         a sequence parameter set or a picture
      parameter set,\n         respectively), an H.264 encoder SHOULD set the value
      of NRI to\n         11 (in binary format).  For coded slice NAL units of a primary\n
      \        coded picture having nal_unit_type equal to 5 (indicating a\n         coded
      slice belonging to an IDR picture), an H.264 encoder\n         SHOULD set the
      value of NRI to 11 (in binary format).\n         For a mapping of the remaining
      nal_unit_types to NRI values,\n         the following example MAY be used and
      has been shown to be\n         efficient in a certain environment [14].  Other
      mappings MAY\n         also be desirable, depending on the application and the
      H.264\n         profile in use.\n            Informative note: Data partitioning
      is not available in\n            certain profiles, e.g., in the Main or Baseline
      profiles.\n            Consequently, the NAL unit types 2, 3, and 4 can occur
      only\n            if the video bitstream conforms to a profile in which data\n
      \           partitioning is allowed and not in streams that conform to\n            the
      Main or Baseline profiles.\n      Table 2.  Example of NRI values for coded
      slices and coded slice\n                data partitions of primary coded reference
      pictures\n       NAL Unit Type     Content of NAL Unit              NRI (binary)\n
      \      ----------------------------------------------------------------\n        1
      \             non-IDR coded slice                         10\n        2              Coded
      slice data partition A                10\n        3              Coded slice
      data partition B                01\n        4              Coded slice data
      partition C                01\n            Informative note: As mentioned before,
      the NRI value of non-\n            reference pictures is 00 as mandated by H.264.\n
      \        An H.264 encoder SHOULD set the value of NRI for coded slice\n         and
      coded slice data partition NAL units of redundant coded\n         reference
      pictures equal to 01 (in binary format).\n         Definitions of the values
      for NRI for NAL unit types 24 to 29,\n         inclusive, are given in Sections
      5.7 and 5.8 of this memo.\n         No recommendation for the value of NRI is
      given for NAL units\n         having nal_unit_type in the range of 13 to 23,
      inclusive,\n         because these values are reserved for ITU-T and ISO/IEC.
      \ No\n         recommendation for the value of NRI is given for NAL units\n
      \        having nal_unit_type equal to 0 or in the range of 30 to 31,\n         inclusive,
      as the semantics of these values are not specified\n         in this memo.\n"
    title: 5.3.  NAL Unit Header Usage
  - contents:
    - "5.4.  Packetization Modes\n   This memo specifies three cases of packetization
      modes:\n   o  Single NAL unit mode\n   o  Non-interleaved mode\n   o  Interleaved
      mode\n   The single NAL unit mode is targeted for conversational systems that\n
      \  comply with ITU-T Recommendation H.241 [3]  (see Section 12.1).  The\n   non-interleaved
      mode is targeted for conversational systems that may\n   not comply with ITU-T
      Recommendation H.241.  In the non-interleaved\n   mode, NAL units are transmitted
      in NAL unit decoding order.  The\n   interleaved mode is targeted for systems
      that do not require very low\n   end-to-end latency.  The interleaved mode allows
      transmission of NAL\n   units out of NAL unit decoding order.\n   The packetization
      mode in use MAY be signaled by the value of the\n   OPTIONAL packetization-mode
      media type parameter.  The used\n   packetization mode governs which NAL unit
      types are allowed in RTP\n   payloads.  Table 3 summarizes the allowed packet
      payload types for\n   each packetization mode.  Packetization modes are explained
      in more\n   detail in Section 6.\n      Table 3.  Summary of allowed NAL unit
      types for each packetization\n                mode (yes = allowed, no = disallowed,
      ig = ignore)\n      Payload Packet    Single NAL    Non-Interleaved    Interleaved\n
      \     Type    Type      Unit Mode           Mode             Mode\n      -------------------------------------------------------------\n
      \     0      reserved      ig               ig               ig\n      1-23
      \  NAL unit     yes              yes               no\n      24     STAP-A        no
      \             yes               no\n      25     STAP-B        no               no
      \             yes\n      26     MTAP16        no               no              yes\n
      \     27     MTAP24        no               no              yes\n      28     FU-A
      \         no              yes              yes\n      29     FU-B          no
      \              no              yes\n      30-31  reserved      ig               ig
      \              ig\n   Some NAL unit or payload type values (indicated as reserved
      in Table\n   3) are reserved for future extensions.  NAL units of those types\n
      \  SHOULD NOT be sent by a sender (direct as packet payloads, as\n   aggregation
      units in aggregation packets, or as fragmented units in\n   FU packets) and
      MUST be ignored by a receiver.  For example, the\n   payload types 1-23, with
      the associated packet type \"NAL unit\", are\n   allowed in \"Single NAL Unit
      Mode\" and in \"Non-Interleaved Mode\" but\n   disallowed in \"Interleaved Mode\".
      \ However, NAL units of NAL unit\n   types 1-23 can be used in \"Interleaved
      Mode\" as aggregation units in\n   STAP-B, MTAP16, and MTAP24 packets as well
      as fragmented units in FU-\n   A and FU-B packets.  Similarly, NAL units of
      NAL unit types 1-23 can\n   also be used in the \"Non-Interleaved Mode\" as
      aggregation units in\n   STAP-A packets or fragmented units in FU-A packets,
      in addition to\n   being directly used as packet payloads.\n"
    title: 5.4.  Packetization Modes
  - contents:
    - "5.5.  Decoding Order Number (DON)\n   In the interleaved packetization mode,
      the transmission order of NAL\n   units is allowed to differ from the decoding
      order of the NAL units.\n   Decoding order number (DON) is a field in the payload
      structure or a\n   derived variable that indicates the NAL unit decoding order.\n
      \  Rationale and examples of use cases for transmission out of decoding\n   order
      and for the use of DON are given in Section 13.\n   The coupling of transmission
      and decoding order is controlled by the\n   OPTIONAL sprop-interleaving-depth
      media type parameter as follows.\n   When the value of the OPTIONAL sprop-interleaving-depth
      media type\n   parameter is equal to 0 (explicitly or per default), the transmission\n
      \  order of NAL units MUST conform to the NAL unit decoding order.  When\n   the
      value of the OPTIONAL sprop-interleaving-depth media type\n   parameter is greater
      than 0:\n   o  the order of NAL units in an MTAP16 and an MTAP24 is not required\n
      \     to be the NAL unit decoding order, and\n   o  the order of NAL units generated
      by de-packetizing STAP-Bs, MTAPs,\n      and FUs in two consecutive packets
      is not required to be the NAL\n      unit decoding order.\n   The RTP payload
      structures for a single NAL unit packet, an STAP-A,\n   and an FU-A do not include
      DON.  STAP-B and FU-B structures include\n   DON, and the structure of MTAPs
      enables derivation of DON, as\n   specified in Section 5.7.2.\n      Informative
      note: When an FU-A occurs in interleaved mode, it\n      always follows an FU-B,
      which sets its DON.\n      Informative note: If a transmitter wants to encapsulate
      a single\n      NAL unit per packet and transmit packets out of their decoding\n
      \     order, STAP-B packet type can be used.\n   In the single NAL unit packetization
      mode, the transmission order of\n   NAL units, determined by the RTP sequence
      number, MUST be the same as\n   their NAL unit decoding order.  In the non-interleaved
      packetization\n   mode, the transmission order of NAL units in single NAL unit
      packets,\n   STAP-As, and FU-As MUST be the same as their NAL unit decoding
      order.\n   The NAL units within an STAP MUST appear in the NAL unit decoding\n
      \  order.  Thus, the decoding order is first provided through the\n   implicit
      order within an STAP and then provided through the RTP\n   sequence number for
      the order between STAPs, FUs, and single NAL unit\n   packets.\n   The signaling
      of the value of DON for NAL units carried in STAP-B,\n   MTAP, and a series
      of fragmentation units starting with an FU-B is\n   specified in Sections 5.7.1,
      5.7.2, and 5.8, respectively.  The DON\n   value of the first NAL unit in transmission
      order MAY be set to any\n   value.  Values of DON are in the range of 0 to 65535,
      inclusive.\n   After reaching the maximum value, the value of DON wraps around
      to 0.\n   The decoding order of two NAL units contained in any STAP-B, MTAP,
      or\n   a series of fragmentation units starting with an FU-B is determined\n
      \  as follows.  Let DON(i) be the decoding order number of the NAL unit\n   having
      index i in the transmission order.  Function don_diff(m,n) is\n   specified
      as follows:\n      If DON(m) == DON(n), don_diff(m,n) = 0\n      If (DON(m)
      < DON(n) and DON(n) - DON(m) < 32768),\n      don_diff(m,n) = DON(n) - DON(m)\n
      \     If (DON(m) > DON(n) and DON(m) - DON(n) >= 32768),\n      don_diff(m,n)
      = 65536 - DON(m) + DON(n)\n      If (DON(m) < DON(n) and DON(n) - DON(m) >=
      32768),\n      don_diff(m,n) = - (DON(m) + 65536 - DON(n))\n      If (DON(m)
      > DON(n) and DON(m) - DON(n) < 32768),\n      don_diff(m,n) = - (DON(m) - DON(n))\n
      \  A positive value of don_diff(m,n) indicates that the NAL unit having\n   transmission
      order index n follows, in decoding order, the NAL unit\n   having transmission
      order index m.  When don_diff(m,n) is equal to 0,\n   the NAL unit decoding
      order of the two NAL units can be in either\n   order.  A negative value of
      don_diff(m,n) indicates that the NAL unit\n   having transmission order index
      n precedes, in decoding order, the\n   NAL unit having transmission order index
      m.\n   Values of DON-related fields (DON, DONB, and DOND; see Section 5.7)\n
      \  MUST be such that the decoding order determined by the values of DON,\n   as
      specified above, conforms to the NAL unit decoding order.\n   If the order of
      two NAL units in NAL unit decoding order is switched\n   and the new order does
      not conform to the NAL unit decoding order,\n   the NAL units MUST NOT have
      the same value of DON.  If the order of\n   two consecutive NAL units in the
      NAL unit stream is switched and the\n   new order still conforms to the NAL
      unit decoding order, the NAL\n   units MAY have the same value of DON.  For
      example, when arbitrary\n   slice order is allowed by the video coding profile
      in use, all the\n   coded slice NAL units of a coded picture are allowed to
      have the same\n   value of DON.  Consequently, NAL units having the same value
      of DON\n   can be decoded in any order, and two NAL units having a different\n
      \  value of DON should be passed to the decoder in the order specified\n   above.
      \ When two consecutive NAL units in the NAL unit decoding order\n   have a different
      value of DON, the value of DON for the second NAL\n   unit in decoding order
      SHOULD be the value of DON for the first,\n   incremented by one.\n   An example
      of the de-packetization process to recover the NAL unit\n   decoding order is
      given in Section 7.\n      Informative note: Receivers should not expect that
      the absolute\n      difference of values of DON for two consecutive NAL units
      in the\n      NAL unit decoding order will be equal to one, even in error-free\n
      \     transmission.  An increment by one is not required, as at the time\n      of
      associating values of DON to NAL units, it may not be known\n      whether all
      NAL units are delivered to the receiver.  For example,\n      a gateway may
      not forward coded slice NAL units of non-reference\n      pictures or SEI NAL
      units when there is a shortage of bitrate in\n      the network to which the
      packets are forwarded.  In another\n      example, a live broadcast is interrupted
      by pre-encoded content,\n      such as commercials, from time to time.  The
      first intra picture\n      of a pre-encoded clip is transmitted in advance to
      ensure that it\n      is readily available in the receiver.  When transmitting
      the first\n      intra picture, the originator does not exactly know how many
      NAL\n      units will be encoded before the first intra picture of the pre-\n
      \     encoded clip follows in decoding order.  Thus, the values of DON\n      for
      the NAL units of the first intra picture of the pre-encoded\n      clip have
      to be estimated when they are transmitted, and gaps in\n      values of DON
      may occur.\n"
    title: 5.5.  Decoding Order Number (DON)
  - contents:
    - "5.6.  Single NAL Unit Packet\n   The single NAL unit packet defined here MUST
      contain only one NAL\n   unit of the types defined in [1].  This means that
      neither an\n   aggregation packet nor a fragmentation unit can be used within
      a\n   single NAL unit packet.  A NAL unit stream composed by de-packetizing\n
      \  single NAL unit packets in RTP sequence number order MUST conform to\n   the
      NAL unit decoding order.  The structure of the single NAL unit\n   packet is
      shown in Figure 2.\n      Informative note: The first byte of a NAL unit co-serves
      as the\n      RTP payload header.\n     0                   1                   2
      \                  3\n     0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4
      5 6 7 8 9 0 1\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \   |F|NRI|  Type   |                                               |\n    +-+-+-+-+-+-+-+-+
      \                                              |\n    |                                                               |\n
      \   |               Bytes 2..n of a single NAL unit                 |\n    |
      \                                                              |\n    |                               +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \   |                               :...OPTIONAL RTP padding        |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \   Figure 2.  RTP payload format for single NAL unit packet\n"
    title: 5.6.  Single NAL Unit Packet
  - contents:
    - "5.7.  Aggregation Packets\n   Aggregation packets are the NAL unit aggregation
      scheme of this\n   payload specification.  The scheme is introduced to reflect
      the\n   dramatically different MTU sizes of two key target networks: wireline\n
      \  IP networks (with an MTU size that is often limited by the Ethernet\n   MTU
      size, roughly 1500 bytes) and IP-based or non-IP-based (e.g.,\n   ITU-T H.324/M)
      wireless communication systems with preferred\n   transmission unit sizes of
      254 bytes or less.  To prevent media\n   transcoding between the two worlds,
      and to avoid undesirable\n   packetization overhead, a NAL unit aggregation
      scheme is introduced.\n   Two types of aggregation packets are defined by this
      specification:\n   o  Single-time aggregation packet (STAP): aggregates NAL
      units with\n      identical NALU-times.  Two types of STAPs are defined, one
      without\n      DON (STAP-A) and another including DON (STAP-B).\n   o  Multi-time
      aggregation packet (MTAP): aggregates NAL units with\n      potentially differing
      NALU-times.  Two different MTAPs are\n      defined, differing in the length
      of the NAL unit timestamp offset.\n   Each NAL unit to be carried in an aggregation
      packet is encapsulated\n   in an aggregation unit.  Please see below for the
      four different\n   aggregation units and their characteristics.\n   The structure
      of the RTP payload format for aggregation packets is\n   presented in Figure
      3.\n     0                   1                   2                   3\n     0
      1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \   |F|NRI|  Type   |                                               |\n    +-+-+-+-+-+-+-+-+
      \                                              |\n    |                                                               |\n
      \   |             one or more aggregation units                     |\n    |
      \                                                              |\n    |                               +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \   |                               :...OPTIONAL RTP padding        |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \   Figure 3.  RTP payload format for aggregation packets\n   MTAPs and STAPs
      share the following packetization rules:\n   o  The RTP timestamp MUST be set
      to the earliest of the NALU-times of\n      all the NAL units to be aggregated.\n
      \  o  The type field of the NAL unit type octet MUST be set to the\n      appropriate
      value, as indicated in Table 4.\n   o  The F bit MUST be cleared if all F bits
      of the aggregated NAL\n      units are zero; otherwise, it MUST be set.\n   o
      \ The value of NRI MUST be the maximum of all the NAL units carried\n      in
      the aggregation packet.\n                 Table 4.  Type field for STAPs and
      MTAPs\n      Type   Packet    Timestamp offset   DON-related fields\n                       field
      length       (DON, DONB, DOND)\n                       (in bits)          present\n
      \     --------------------------------------------------------\n      24     STAP-A
      \      0                 no\n      25     STAP-B       0                 yes\n
      \     26     MTAP16      16                 yes\n      27     MTAP24      24
      \                yes\n   The marker bit in the RTP header is set to the value
      that the marker\n   bit of the last NAL unit of the aggregated packet would
      have if it\n   were transported in its own RTP packet.\n   The payload of an
      aggregation packet consists of one or more\n   aggregation units.  See Sections
      5.7.1 and 5.7.2 for the four\n   different types of aggregation units.  An aggregation
      packet can\n   carry as many aggregation units as necessary; however, the total\n
      \  amount of data in an aggregation packet obviously MUST fit into an IP\n   packet,
      and the size SHOULD be chosen so that the resulting IP packet\n   is smaller
      than the MTU size.  An aggregation packet MUST NOT contain\n   fragmentation
      units, as specified in Section 5.8.  Aggregation\n   packets MUST NOT be nested;
      that is, an aggregation packet MUST NOT\n   contain another aggregation packet.\n"
    - contents:
      - "5.7.1.  Single-Time Aggregation Packet (STAP)\n   A single-time aggregation
        packet (STAP) SHOULD be used whenever NAL\n   units are aggregated that all
        share the same NALU-time.  The payload\n   of an STAP-A does not include DON
        and consists of at least one\n   single-time aggregation unit, as presented
        in Figure 4.  The payload\n   of an STAP-B consists of a 16-bit unsigned decoding
        order number\n   (DON) (in network byte order) followed by at least one single-time\n
        \  aggregation unit, as presented in Figure 5.\n     0                   1
        \                  2                   3\n     0 1 2 3 4 5 6 7 8 9 0 1 2 3
        4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \                   :                                               |\n    +-+-+-+-+-+-+-+-+
        \                                              |\n    |                                                               |\n
        \   |                single-time aggregation units                  |\n    |
        \                                                              |\n    |                               +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \   |                               :\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \   Figure 4.  Payload format for STAP-A\n     0                   1                   2
        \                  3\n     0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3
        4 5 6 7 8 9 0 1\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \                   :  decoding order number (DON)  |               |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
        \              |\n    |                                                               |\n
        \   |                single-time aggregation units                  |\n    |
        \                                                              |\n    |                               +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \   |                               :\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \   Figure 5.  Payload format for STAP-B\n   The DON field specifies the value
        of DON for the first NAL unit in an\n   STAP-B in transmission order.  For
        each successive NAL unit in\n   appearance order in an STAP-B, the value of
        DON is equal to (the\n   value of DON of the previous NAL unit in the STAP-B
        + 1) % 65536, in\n   which '%' stands for the modulo operation.\n   A single-time
        aggregation unit consists of 16-bit unsigned size\n   information (in network
        byte order) that indicates the size of the\n   following NAL unit in bytes
        (excluding these two octets, but\n   including the NAL unit type octet of
        the NAL unit), followed by the\n   NAL unit itself, including its NAL unit
        type byte.  A single-time\n   aggregation unit is byte aligned within the
        RTP payload, but it may\n   not be aligned on a 32-bit word boundary.  Figure
        6 presents the\n   structure of the single-time aggregation unit.\n     0
        \                  1                   2                   3\n     0 1 2 3
        4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \                   :        NAL unit size          |               |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
        \              |\n    |                                                               |\n
        \   |                           NAL unit                            |\n    |
        \                                                              |\n    |                               +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \   |                               :\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \   Figure 6.  Structure for single-time aggregation unit\n   Figure 7 presents
        an example of an RTP packet that contains an STAP-\n   A.  The STAP contains
        two single-time aggregation units, labeled as 1\n   and 2 in the figure.\n
        \    0                   1                   2                   3\n     0
        1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \   |                          RTP Header                           |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \   |STAP-A NAL HDR |         NALU 1 Size           | NALU 1 HDR    |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \   |                         NALU 1 Data                           |\n    :
        \                                                              :\n    +               +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \   |               | NALU 2 Size                   | NALU 2 HDR    |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \   |                         NALU 2 Data                           |\n    :
        \                                                              :\n    |                               +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \   |                               :...OPTIONAL RTP padding        |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \   Figure 7.  An example of an RTP packet including an STAP-A\n               containing
        two single-time aggregation units\n   Figure 8 presents an example of an RTP
        packet that contains an STAP-\n   B.  The STAP contains two single-time aggregation
        units, labeled as 1\n   and 2 in the figure.\n     0                   1                   2
        \                  3\n     0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3
        4 5 6 7 8 9 0 1\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \   |                          RTP Header                           |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \   |STAP-B NAL HDR | DON                           | NALU 1 Size   |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \   | NALU 1 Size   | NALU 1 HDR    | NALU 1 Data                   |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
        \                              +\n    :                                                               :\n
        \   +               +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    |
        \              | NALU 2 Size                   | NALU 2 HDR    |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \   |                       NALU 2 Data                             |\n    :
        \                                                              :\n    |                               +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \   |                               :...OPTIONAL RTP padding        |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \   Figure 8.  An example of an RTP packet including an STAP-B\n               containing
        two single-time aggregation units\n"
      title: 5.7.1.  Single-Time Aggregation Packet (STAP)
    - contents:
      - "5.7.2.  Multi-Time Aggregation Packets (MTAPs)\n   The NAL unit payload of
        MTAPs consists of a 16-bit unsigned decoding\n   order number base (DONB)
        (in network byte order) and one or more\n   multi-time aggregation units,
        as presented in Figure 9.  DONB MUST\n   contain the value of DON for the
        first NAL unit in the NAL unit\n   decoding order among the NAL units of the
        MTAP.\n      Informative note: The first NAL unit in the NAL unit decoding\n
        \     order is not necessarily the first NAL unit in the order in which\n
        \     the NAL units are encapsulated in an MTAP.\n     0                   1
        \                  2                   3\n     0 1 2 3 4 5 6 7 8 9 0 1 2 3
        4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \                   :  decoding order number base   |               |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
        \              |\n    |                                                               |\n
        \   |                 multi-time aggregation units                  |\n    |
        \                                                              |\n    |                               +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \   |                               :\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \   Figure 9.  NAL unit payload format for MTAPs\n   Two different multi-time
        aggregation units are defined in this\n   specification.  Both of them consist
        of 16 bits of unsigned size\n   information of the following NAL unit (in
        network byte order), an\n   8-bit unsigned decoding order number difference
        (DOND), and n bits\n   (in network byte order) of timestamp offset (TS offset)
        for this NAL\n   unit, whereby n can be 16 or 24.  The choice between the
        different\n   MTAP types (MTAP16 and MTAP24) is application dependent: the
        larger\n   the timestamp offset is, the higher the flexibility of the MTAP,
        but\n   the overhead is also higher.\n   The structure of the multi-time aggregation
        units for MTAP16 and\n   MTAP24 are presented in Figures 10 and 11, respectively.
        \ The\n   starting or ending position of an aggregation unit within a packet
        is\n   not required to be on a 32-bit word boundary.  The DON of the NAL\n
        \  unit contained in a multi-time aggregation unit is equal to (DONB +\n   DOND)
        % 65536, in which % denotes the modulo operation.  This memo\n   does not
        specify how the NAL units within an MTAP are ordered, but,\n   in most cases,
        NAL unit decoding order SHOULD be used.\n   The timestamp offset field MUST
        be set to a value equal to the value\n   of the following formula: if the
        NALU-time is larger than or equal to\n   the RTP timestamp of the packet,
        then the timestamp offset equals\n   (the NALU-time of the NAL unit - the
        RTP timestamp of the packet).\n   If the NALU-time is smaller than the RTP
        timestamp of the packet,\n   then the timestamp offset is equal to the NALU-time
        + (2^32 - the RTP\n   timestamp of the packet).\n     0                   1
        \                  2                   3\n     0 1 2 3 4 5 6 7 8 9 0 1 2 3
        4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \   :        NAL unit size          |      DOND     |  TS offset    |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \   |  TS offset    |                                               |\n    +-+-+-+-+-+-+-+-+
        \             NAL unit                         |\n    |                                                               |\n
        \   |                               +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    |
        \                              :\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \   Figure 10.  Multi-time aggregation unit for MTAP16\n     0                   1
        \                  2                   3\n     0 1 2 3 4 5 6 7 8 9 0 1 2 3
        4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \   :        NAL unit size         |      DOND     |  TS offset    |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \   |         TS offset             |                               |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
        \                              |\n    |                              NAL unit
        \                        |\n    |                               +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \   |                               :\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \   Figure 11.  Multi-time aggregation unit for MTAP24\n   For the \"earliest\"
        multi-time aggregation unit in an MTAP, the\n   timestamp offset MUST be zero.
        \ Hence, the RTP timestamp of the MTAP\n   itself is identical to the earliest
        NALU-time.\n      Informative note: The \"earliest\" multi-time aggregation
        unit is\n      the one that would have the smallest extended RTP timestamp
        among\n      all the aggregation units of an MTAP if the NAL units contained
        in\n      the aggregation units were encapsulated in single NAL unit\n      packets.
        \ An extended timestamp is a timestamp that has more than\n      32 bits and
        is capable of counting the wraparound of the timestamp\n      field, thus
        enabling one to determine the smallest value if the\n      timestamp wraps.
        \ Such an \"earliest\" aggregation unit may not be\n      the first one in
        the order in which the aggregation units are\n      encapsulated in an MTAP.
        \ The \"earliest\" NAL unit need not be the\n      same as the first NAL unit
        in the NAL unit decoding order either.\n   Figure 12 presents an example of
        an RTP packet that contains a multi-\n   time aggregation packet of type MTAP16
        that contains two multi-time\n   aggregation units, labeled as 1 and 2 in
        the figure.\n     0                   1                   2                   3\n
        \    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \   |                          RTP Header                           |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \   |MTAP16 NAL HDR |  decoding order number base   | NALU 1 Size   |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \   |  NALU 1 Size  |  NALU 1 DOND  |       NALU 1 TS offset        |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \   |  NALU 1 HDR   |  NALU 1 DATA                                  |\n    +-+-+-+-+-+-+-+-+
        \                                              +\n    :                                                               :\n
        \   +               +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    |
        \              | NALU 2 SIZE                   |  NALU 2 DOND  |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \   |       NALU 2 TS offset        |  NALU 2 HDR   |  NALU 2 DATA  |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
        \              |\n    :                                                               :\n
        \   |                               +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    |
        \                              :...OPTIONAL RTP padding        |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \   Figure 12.  An RTP packet including a multi-time aggregation\n                packet
        of type MTAP16 containing two multi-time\n                aggregation units\n
        \  Figure 13 presents an example of an RTP packet that contains a multi-\n
        \  time aggregation packet of type MTAP24 that contains two multi-time\n   aggregation
        units, labeled as 1 and 2 in the figure.\n     0                   1                   2
        \                  3\n     0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3
        4 5 6 7 8 9 0 1\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \   |                          RTP Header                           |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \   |MTAP24 NAL HDR |  decoding order number base   | NALU 1 Size   |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \   |  NALU 1 Size  |  NALU 1 DOND  |       NALU 1 TS offs          |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \   |NALU 1 TS offs |  NALU 1 HDR   |  NALU 1 DATA                  |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
        \                              +\n    :                                                               :\n
        \   +               +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    |
        \              | NALU 2 SIZE                   |  NALU 2 DOND  |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \   |       NALU 2 TS offset                        |  NALU 2 HDR   |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \   |  NALU 2 DATA                                                  |\n    :
        \                                                              :\n    |                               +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \   |                               :...OPTIONAL RTP padding        |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \   Figure 13.  An RTP packet including a multi-time aggregation\n                packet
        of type MTAP24 containing two multi-time\n                aggregation units\n"
      title: 5.7.2.  Multi-Time Aggregation Packets (MTAPs)
    title: 5.7.  Aggregation Packets
  - contents:
    - "5.8.  Fragmentation Units (FUs)\n   This payload type allows fragmenting a
      NAL unit into several RTP\n   packets.  Doing so on the application layer instead
      of relying on\n   lower-layer fragmentation (e.g., by IP) has the following
      advantages:\n   o  The payload format is capable of transporting NAL units bigger\n
      \     than 64 kbytes over an IPv4 network that may be present in pre-\n      recorded
      video, particularly in High-Definition formats (there is\n      a limit of the
      number of slices per picture, which results in a\n      limit of NAL units per
      picture, which may result in big NAL\n      units).\n   o  The fragmentation
      mechanism allows fragmenting a single NAL unit\n      and applying generic forward
      error correction as described in\n      Section 12.5.\n   Fragmentation is defined
      only for a single NAL unit and not for any\n   aggregation packets.  A fragment
      of a NAL unit consists of an integer\n   number of consecutive octets of that
      NAL unit.  Each octet of the NAL\n   unit MUST be part of exactly one fragment
      of that NAL unit.\n   Fragments of the same NAL unit MUST be sent in consecutive
      order with\n   ascending RTP sequence numbers (with no other RTP packets within
      the\n   same RTP packet stream being sent between the first and last\n   fragment).
      \ Similarly, a NAL unit MUST be reassembled in RTP sequence\n   number order.\n
      \  When a NAL unit is fragmented and conveyed within fragmentation units\n   (FUs),
      it is referred to as a fragmented NAL unit.  STAPs and MTAPs\n   MUST NOT be
      fragmented.  FUs MUST NOT be nested; that is, an FU MUST\n   NOT contain another
      FU.\n   The RTP timestamp of an RTP packet carrying an FU is set to the NALU-\n
      \  time of the fragmented NAL unit.\n   Figure 14 presents the RTP payload format
      for FU-As.  An FU-A\n   consists of a fragmentation unit indicator of one octet,
      a\n   fragmentation unit header of one octet, and a fragmentation unit\n   payload.\n
      \    0                   1                   2                   3\n     0 1
      2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \   | FU indicator  |   FU header   |                               |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      \                              |\n    |                                                               |\n
      \   |                         FU payload                            |\n    |
      \                                                              |\n    |                               +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \   |                               :...OPTIONAL RTP padding        |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \   Figure 14.  RTP payload format for FU-A\n   Figure 15 presents the RTP payload
      format for FU-Bs.  An FU-B\n   consists of a fragmentation unit indicator of
      one octet, a\n   fragmentation unit header of one octet, a decoding order number
      (DON)\n   (in network byte order), and a fragmentation unit payload.  In other\n
      \  words, the structure of FU-B is the same as the structure of FU-A,\n   except
      for the additional DON field.\n     0                   1                   2
      \                  3\n     0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4
      5 6 7 8 9 0 1\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \   | FU indicator  |   FU header   |               DON             |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-|\n
      \   |                                                               |\n    |
      \                        FU payload                            |\n    |                                                               |\n
      \   |                               +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    |
      \                              :...OPTIONAL RTP padding        |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \   Figure 15.  RTP payload format for FU-B\n   NAL unit type FU-B MUST be used
      in the interleaved packetization mode\n   for the first fragmentation unit of
      a fragmented NAL unit.  NAL unit\n   type FU-B MUST NOT be used in any other
      case.  In other words, in the\n   interleaved packetization mode, each NALU
      that is fragmented has an\n   FU-B as the first fragment, followed by one or
      more FU-A fragments.\n   The FU indicator octet has the following format:\n
      \      +---------------+\n       |0|1|2|3|4|5|6|7|\n       +-+-+-+-+-+-+-+-+\n
      \      |F|NRI|  Type   |\n       +---------------+\n   Values equal to 28 and
      29 in the type field of the FU indicator octet\n   identify an FU-A and an FU-B,
      respectively.  The use of the F bit is\n   described in Section 5.3.  The value
      of the NRI field MUST be set\n   according to the value of the NRI field in
      the fragmented NAL unit.\n   The FU header has the following format:\n      +---------------+\n
      \     |0|1|2|3|4|5|6|7|\n      +-+-+-+-+-+-+-+-+\n      |S|E|R|  Type   |\n
      \     +---------------+\n   S:     1 bit\n          When set to one, the Start
      bit indicates the start of a\n          fragmented NAL unit.  When the following
      FU payload is not the\n          start of a fragmented NAL unit payload, the
      Start bit is set\n          to zero.\n   E:     1 bit\n          When set to
      one, the End bit indicates the end of a fragmented\n          NAL unit, i.e.,
      the last byte of the payload is also the last\n          byte of the fragmented
      NAL unit.  When the following FU\n          payload is not the last fragment
      of a fragmented NAL unit, the\n          End bit is set to zero.\n   R:     1
      bit\n          The Reserved bit MUST be equal to 0 and MUST be ignored by the\n
      \         receiver.\n   Type:  5 bits\n          The NAL unit payload type as
      defined in Table 7-1 of [1].\n   The value of DON in FU-Bs is selected as described
      in Section 5.5.\n      Informative note: The DON field in FU-Bs allows gateways
      to\n      fragment NAL units to FU-Bs without organizing the incoming NAL\n
      \     units to the NAL unit decoding order.\n   A fragmented NAL unit MUST NOT
      be transmitted in one FU; that is, the\n   Start bit and End bit MUST NOT both
      be set to one in the same FU\n   header.\n   The FU payload consists of fragments
      of the payload of the fragmented\n   NAL unit so that if the fragmentation unit
      payloads of consecutive\n   FUs are sequentially concatenated, the payload of
      the fragmented NAL\n   unit can be reconstructed.  The NAL unit type octet of
      the fragmented\n   NAL unit is not included as such in the fragmentation unit
      payload,\n   but rather the information of the NAL unit type octet of the\n
      \  fragmented NAL unit is conveyed in the F and NRI fields of the FU\n   indicator
      octet of the fragmentation unit and in the type field of\n   the FU header.
      \ An FU payload MAY have any number of octets and MAY\n   be empty.\n      Informative
      note: Empty FUs are allowed to reduce the latency of a\n      certain class
      of senders in nearly lossless environments.  These\n      senders can be characterized
      in that they packetize NALU fragments\n      before the NALU is completely generated
      and, hence, before the\n      NALU size is known.  If zero-length NALU fragments
      were not\n      allowed, the sender would have to generate at least one bit
      of\n      data of the following fragment before the current fragment could\n
      \     be sent.  Due to the characteristics of H.264, where sometimes\n      several
      macroblocks occupy zero bits, this is undesirable and can\n      add delay.
      \ However, the (potential) use of zero-length NALU\n      fragments should be
      carefully weighed against the increased risk\n      of the loss of at least
      a part of the NALU because of the\n      additional packets employed for its
      transmission.\n   If a fragmentation unit is lost, the receiver SHOULD discard
      all\n   following fragmentation units in transmission order corresponding to\n
      \  the same fragmented NAL unit.\n   A receiver in an endpoint or in a MANE
      MAY aggregate the first n-1\n   fragments of a NAL unit to an (incomplete) NAL
      unit, even if fragment\n   n of that NAL unit is not received.  In this case,
      the\n   forbidden_zero_bit of the NAL unit MUST be set to one to indicate a\n
      \  syntax violation.\n"
    title: 5.8.  Fragmentation Units (FUs)
  title: 5.  RTP Payload Format
- contents:
  - "6.  Packetization Rules\n   The packetization modes are introduced in Section
    5.2.  The\n   packetization rules common to more than one of the packetization\n
    \  modes are specified in Section 6.1.  The packetization rules for the\n   single
    NAL unit mode, the non-interleaved mode, and the interleaved\n   mode are specified
    in Sections 6.2, 6.3, and 6.4, respectively.\n"
  - contents:
    - "6.1.  Common Packetization Rules\n   All senders MUST enforce the following
      packetization rules,\n   regardless of the packetization mode in use:\n   o
      \ Coded slice NAL units or coded slice data partition NAL units\n      belonging
      to the same coded picture (and thus sharing the same RTP\n      timestamp value)
      MAY be sent in any order; however, for delay-\n      critical systems, they
      SHOULD be sent in their original decoding\n      order to minimize the delay.
      \ Note that the decoding order is the\n      order of the NAL units in the bitstream.\n
      \  o  Parameter sets are handled in accordance with the rules and\n      recommendations
      given in Section 8.4.\n   o  MANEs MUST NOT duplicate any NAL unit except for
      sequence or\n      picture parameter set NAL units, as neither this memo nor
      the\n      H.264 specification provides means to identify duplicated NAL\n      units.
      \ Sequence and picture parameter set NAL units MAY be\n      duplicated to make
      their correct reception more probable, but any\n      such duplication MUST
      NOT affect the contents of any active\n      sequence or picture parameter set.
      \ Duplication SHOULD be\n      performed on the application layer and not by
      duplicating RTP\n      packets (with identical sequence numbers).\n   Senders
      using the non-interleaved mode and the interleaved mode MUST\n   enforce the
      following packetization rule:\n   o  In an RTP translator, MANEs MAY convert
      single NAL unit packets\n      into one aggregation packet, convert an aggregation
      packet into\n      several single NAL unit packets, or mix both concepts.  The
      RTP\n      translator SHOULD take into account at least the following\n      parameters:
      path MTU size, unequal protection mechanisms (e.g.,\n      through packet-based
      FEC according to RFC 5109 [18], especially\n      for sequence and picture parameter
      set NAL units and coded slice\n      data partition A NAL units), bearable latency
      of the system, and\n      buffering capabilities of the receiver.\n         Informative
      note: An RTP translator is required to handle RTP\n         Control Protocol
      (RTCP) as per RFC 3550.\n"
    title: 6.1.  Common Packetization Rules
  - contents:
    - "6.2.  Single NAL Unit Mode\n   This mode is in use when the value of the OPTIONAL
      packetization-mode\n   media type parameter is equal to 0 or the packetization-mode
      is not\n   present.  All receivers MUST support this mode.  It is primarily\n
      \  intended for low-delay applications that are compatible with systems\n   using
      ITU-T Recommendation H.241 [3] (see Section 12.1).  Only single\n   NAL unit
      packets MAY be used in this mode.  STAPs, MTAPs, and FUs\n   MUST NOT be used.
      \ The transmission order of single NAL unit packets\n   MUST comply with the
      NAL unit decoding order.\n"
    title: 6.2.  Single NAL Unit Mode
  - contents:
    - "6.3.  Non-Interleaved Mode\n   This mode is in use when the value of the OPTIONAL
      packetization-mode\n   media type parameter is equal to 1.  This mode SHOULD
      be supported.\n   It is primarily intended for low-delay applications.  Only
      single NAL\n   unit packets, STAP-As, and FU-As MAY be used in this mode.  STAP-Bs,\n
      \  MTAPs, and FU-Bs MUST NOT be used.  The transmission order of NAL\n   units
      MUST comply with the NAL unit decoding order.\n"
    title: 6.3.  Non-Interleaved Mode
  - contents:
    - "6.4.  Interleaved Mode\n   This mode is in use when the value of the OPTIONAL
      packetization-mode\n   media type parameter is equal to 2.  Some receivers MAY
      support this\n   mode.  STAP-Bs, MTAPs, FU-As, and FU-Bs MAY be used.  STAP-As
      and\n   single NAL unit packets MUST NOT be used.  The transmission order of\n
      \  packets and NAL units is constrained as specified in Section 5.5.\n"
    title: 6.4.  Interleaved Mode
  title: 6.  Packetization Rules
- contents:
  - "7.  De-Packetization Process\n   The de-packetization process is implementation
    dependent.  Therefore,\n   the following description should be seen as an example
    of a suitable\n   implementation.  Other schemes may also be used as long as the
    output\n   for the same input is the same as the process described below.  The\n
    \  same output means that the resulting NAL units and their order are\n   identical.
    \ Optimizations relative to the described algorithms are\n   likely possible.
    \ Section 7.1 presents the de-packetization process\n   for the single NAL unit
    and non-interleaved packetization modes,\n   whereas Section 7.2 describes the
    process for the interleaved mode.\n   Section 7.3 includes additional de-packetization
    guidelines for\n   intelligent receivers.\n   All normal RTP mechanisms related
    to buffer management apply.  In\n   particular, duplicated or outdated RTP packets
    (as indicated by the\n   RTP sequence number and the RTP timestamp) are removed.
    \ To determine\n   the exact time for decoding, factors such as a possible intentional\n
    \  delay to allow for proper inter-stream synchronization must be\n   factored
    in.\n"
  - contents:
    - "7.1.  Single NAL Unit and Non-Interleaved Mode\n   The receiver includes a
      receiver buffer to compensate for\n   transmission delay jitter.  The receiver
      stores incoming packets in\n   reception order into the receiver buffer.  Packets
      are de-packetized\n   in RTP sequence number order.  If a de-packetized packet
      is a single\n   NAL unit packet, the NAL unit contained in the packet is passed\n
      \  directly to the decoder.  If a de-packetized packet is an STAP-A, the\n   NAL
      units contained in the packet are passed to the decoder in the\n   order in
      which they are encapsulated in the packet.  For all the FU-A\n   packets containing
      fragments of a single NAL unit, the de-packetized\n   fragments are concatenated
      in their sending order to recover the NAL\n   unit, which is then passed to
      the decoder.\n      Informative note: If the decoder supports arbitrary slice
      order,\n      coded slices of a picture can be passed to the decoder in any\n
      \     order, regardless of their reception and transmission order.\n"
    title: 7.1.  Single NAL Unit and Non-Interleaved Mode
  - contents:
    - "7.2.  Interleaved Mode\n   The general concept behind these de-packetization
      rules is to reorder\n   NAL units from transmission order to the NAL unit decoding
      order.\n   The receiver includes a receiver buffer, which is used to compensate\n
      \  for transmission delay jitter and to reorder NAL units from\n   transmission
      order to the NAL unit decoding order.  In this section,\n   the receiver operation
      is described under the assumption that there\n   is no transmission delay jitter.
      \ To differentiate the receiver\n   buffer from a practical receiver buffer
      that is also used for\n   compensation of transmission delay jitter, the receiver
      buffer is\n   hereafter called the de-interleaving buffer in this section.\n
      \  Receivers SHOULD also prepare for transmission delay jitter, i.e.,\n   either
      reserve separate buffers for transmission delay jitter\n   buffering and de-interleaving
      buffering or use a receiver buffer for\n   both transmission delay jitter and
      de-interleaving.  Moreover,\n   receivers SHOULD take transmission delay jitter
      into account in the\n   buffering operation, e.g., by additional initial buffering
      before\n   starting of decoding and playback.\n   This section is organized
      as follows: Subsection 7.2.1 presents how\n   to calculate the size of the de-interleaving
      buffer.  Subsection\n   7.2.2 specifies the receiver process on how to organize
      received NAL\n   units to the NAL unit decoding order.\n"
    - contents:
      - "7.2.1.  Size of the De-Interleaving Buffer\n   In either Offer/Answer or
        declarative Session Description Protocol\n   (SDP) usage, the sprop-deint-buf-req
        media type parameter signals the\n   requirement for the de-interleaving buffer
        size.  Therefore, it is\n   RECOMMENDED to set the de-interleaving buffer
        size, in terms of\n   number of bytes, equal to or greater than the value
        of the sprop-\n   deint-buf-req media type parameter.\n   When the SDP Offer/Answer
        model or any other capability exchange\n   procedure is used in session setup,
        the properties of the received\n   stream SHOULD be such that the receiver
        capabilities are not\n   exceeded.  In the SDP Offer/Answer model, the receiver
        can indicate\n   its capabilities to allocate a de-interleaving buffer with
        the deint-\n   buf-cap media type parameter.  See Section 8.1 for further\n
        \  information on the deint-buf-cap and sprop-deint-buf-req media type\n   parameters
        and Section 8.2.2 for further information on their use in\n   the SDP Offer/Answer
        model.\n"
      title: 7.2.1.  Size of the De-Interleaving Buffer
    - contents:
      - "7.2.2.  De-Interleaving Process\n   There are two buffering states in the
        receiver: initial buffering and\n   buffering while playing.  Initial buffering
        occurs when the RTP\n   session is initialized.  After initial buffering,
        decoding and\n   playback are started, and the buffering-while-playing mode
        is used.\n   Regardless of the buffering state, the receiver stores incoming
        NAL\n   units, in reception order, in the de-interleaving buffer as follows.\n
        \  NAL units of aggregation packets are stored in the de-interleaving\n   buffer
        individually.  The value of DON is calculated and stored for\n   each NAL
        unit.\n   The receiver operation is described below with the help of the\n
        \  following functions and constants:\n   o  Function AbsDON is specified
        in Section 8.1.\n   o  Function don_diff is specified in Section 5.5.\n   o
        \ Constant N is the value of the OPTIONAL sprop-interleaving-depth\n      media
        type parameter (see Section 8.1) incremented by 1.\n   Initial buffering lasts
        until one of the following conditions is\n   fulfilled:\n   o  There are N
        or more VCL NAL units in the de-interleaving buffer.\n   o  If sprop-max-don-diff
        is present, don_diff(m,n) is greater than\n      the value of sprop-max-don-diff,
        in which n corresponds to the NAL\n      unit having the greatest value of
        AbsDON among the received NAL\n      units and m corresponds to the NAL unit
        having the smallest value\n      of AbsDON among the received NAL units.\n
        \  o  Initial buffering has lasted for the duration equal to or greater\n
        \     than the value of the OPTIONAL sprop-init-buf-time media type\n      parameter.\n
        \  The NAL units to be removed from the de-interleaving buffer are\n   determined
        as follows:\n   o  If the de-interleaving buffer contains at least N VCL NAL
        units,\n      NAL units are removed from the de-interleaving buffer and passed\n
        \     to the decoder in the order specified below until the buffer\n      contains
        N-1 VCL NAL units.\n   o  If sprop-max-don-diff is present, all NAL units
        m for which\n      don_diff(m,n) is greater than sprop-max-don-diff are removed
        from\n      the de-interleaving buffer and passed to the decoder in the order\n
        \     specified below.  Herein, n corresponds to the NAL unit having the\n
        \     greatest value of AbsDON among the NAL units in the de-\n      interleaving
        buffer.\n   The order in which NAL units are passed to the decoder is specified\n
        \  as follows:\n   o  Let PDON be a variable that is initialized to 0 at the
        beginning\n      of the RTP session.\n   o  For each NAL unit associated with
        a value of DON, a DON distance\n      is calculated as follows.  If the value
        of DON of the NAL unit is\n      larger than the value of PDON, the DON distance
        is equal to DON -\n      PDON.  Otherwise, the DON distance is equal to 65535
        - PDON + DON\n      + 1.\n   o  NAL units are delivered to the decoder in
        ascending order of DON\n      distance.  If several NAL units share the same
        value of DON\n      distance, they can be passed to the decoder in any order.\n
        \  o  When a desired number of NAL units have been passed to the\n      decoder,
        the value of PDON is set to the value of DON for the last\n      NAL unit
        passed to the decoder.\n"
      title: 7.2.2.  De-Interleaving Process
    title: 7.2.  Interleaved Mode
  - contents:
    - "7.3.  Additional De-Packetization Guidelines\n   The following additional de-packetization
      rules may be used to\n   implement an operational H.264 de-packetizer:\n   o
      \ Intelligent RTP receivers (e.g., in gateways) may identify lost\n      coded
      slice data partitions A (DPAs).  If a lost DPA is detected,\n      after taking
      into account possible retransmission and FEC, a\n      gateway may decide not
      to send the corresponding coded slice data\n      partitions B and C, as their
      information is meaningless for H.264\n      decoders.  In this way, a MANE can
      reduce network load by\n      discarding useless packets without parsing a complex
      bitstream.\n   o  Intelligent RTP receivers (e.g., in gateways) may identify
      lost\n      FUs.  If a lost FU is found, a gateway may decide not to send the\n
      \     following FUs of the same fragmented NAL unit, as their\n      information
      is meaningless for H.264 decoders.  In this way, a\n      MANE can reduce network
      load by discarding useless packets without\n      parsing a complex bitstream.\n
      \  o  Intelligent receivers having to discard packets or NALUs should\n      first
      discard all packets/NALUs in which the value of the NRI\n      field of the
      NAL unit type octet is equal to 0.  This will\n      minimize the impact on
      user experience and keep the reference\n      pictures intact.  If more packets
      have to be discarded, then\n      packets with a numerically lower NRI value
      should be discarded\n      before packets with a numerically higher NRI value.
      \ However,\n      discarding any packets with an NRI bigger than 0 very likely
      leads\n      to decoder drift and SHOULD be avoided.\n"
    title: 7.3.  Additional De-Packetization Guidelines
  title: 7.  De-Packetization Process
- contents:
  - "8.  Payload Format Parameters\n   This section specifies the parameters that
    MAY be used to select\n   optional features of the payload format and certain
    features of the\n   bitstream.  The parameters are specified here as part of the
    media\n   subtype registration for the ITU-T H.264 | ISO/IEC 14496-10 codec.  A\n
    \  mapping of the parameters into the Session Description Protocol (SDP)\n   [6]
    is also provided for applications that use SDP.  Equivalent\n   parameters could
    be defined elsewhere for use with control protocols\n   that do not use SDP.\n
    \  Some parameters provide a receiver with the properties of the stream\n   that
    will be sent.  The names of all these parameters start with\n   \"sprop\" for
    stream properties.  Some of these \"sprop\" parameters are\n   limited by other
    payload or codec configuration parameters.  For\n   example, the sprop-parameter-sets
    parameter is constrained by the\n   profile-level-id parameter.\n"
  - contents:
    - "8.1.  Media Type Registration\n   The media subtype for the ITU-T H.264 | ISO/IEC
      14496-10 codec has\n   been allocated from the IETF tree.\n   Media Type name:
      \    video\n   Media subtype name:  H264\n   Required parameters: none\n   OPTIONAL
      parameters:\n      profile-level-id:\n         A base16 [7] (hexadecimal) representation
      of the following\n         three bytes in the sequence parameter set NAL unit
      is specified\n         in [1]: 1) profile_idc, 2) a byte herein referred to
      as\n         profile-iop, composed of the values of constraint_set0_flag,\n
      \        constraint_set1_flag, constraint_set2_flag,\n         constraint_set3_flag,
      constraint_set4_flag,\n         constraint_set5_flag, and reserved_zero_2bits
      in bit-\n         significance order, starting from the most-significant bit,
      and\n         3) level_idc.  Note that reserved_zero_2bits is required to be\n
      \        equal to 0 in [1], but other values for it may be specified in\n         the
      future by ITU-T or ISO/IEC.\n         The profile-level-id parameter indicates
      the default sub-\n         profile (i.e., the subset of coding tools that may
      have been\n         used to generate the stream or that the receiver supports)
      and\n         the default level of the stream or the receiver supports.\n         The
      default sub-profile is indicated collectively by the\n         profile_idc byte
      and some fields in the profile-iop byte.\n         Depending on the values of
      the fields in the profile-iop byte,\n         the default sub-profile may be
      the set of coding tools\n         supported by one profile, or a common subset
      of coding tools of\n         multiple profiles, as specified in Section 7.4.2.1.1
      of [1].\n         The default level is indicated by the level_idc byte, and,
      when\n         profile_idc is equal to 66, 77, or 88 (the Baseline, Main, or\n
      \        Extended profile) and level_idc is equal to 11, additionally by\n         bit
      4 (constraint_set3_flag) of the profile-iop byte.  When\n         profile_idc
      is equal to 66, 77, or 88 (the Baseline, Main, or\n         Extended profile),
      level_idc is equal to 11, and bit 4\n         (constraint_set3_flag) of the
      profile-iop byte is equal to 1,\n         the default level is Level 1b.\n         Table
      5 lists all profiles defined in Annex A of [1] and, for\n         each of the
      profiles, the possible combinations of profile_idc\n         and profile-iop
      that represent the same sub-profile.\n            Table 5.  Combinations of
      profile_idc and profile-iop\n            representing the same sub-profile corresponding
      to the full\n            set of coding tools supported by one profile.  In the\n
      \           following, x may be either 0 or 1, while the profile names\n            are
      indicated as follows.  CB: Constrained Baseline profile,\n            B: Baseline
      profile, M: Main profile, E: Extended profile,\n            H: High profile,
      H10: High 10 profile, H42: High 4:2:2\n            profile, H44: High 4:4:4
      Predictive profile, H10I: High 10\n            Intra profile, H42I: High 4:2:2
      Intra profile, H44I: High\n            4:4:4 Intra profile, and C44I: CAVLC
      4:4:4 Intra profile.\n              Profile     profile_idc        profile-iop\n
      \                         (hexadecimal)      (binary)\n              CB          42
      (B)             x1xx0000\n                 same as: 4D (M)             1xxx0000\n
      \                same as: 58 (E)             11xx0000\n              B           42
      (B)             x0xx0000\n                 same as: 58 (E)             10xx0000\n
      \             M           4D (M)             0x0x0000\n              E           58
      \                00xx0000\n              H           64                 00000000\n
      \             H10         6E                 00000000\n              H42         7A
      \                00000000\n              H44         F4                 00000000\n
      \             H10I        6E                 00010000\n              H42I        7A
      \                00010000\n              H44I        F4                 00010000\n
      \             C44I        2C                 00010000\n         For example,
      in the table above, profile_idc equal to 58\n         (Extended) with profile-iop
      equal to 11xx0000 indicates the\n         same sub-profile corresponding to
      profile_idc equal to 42\n         (Baseline) with profile-iop equal to x1xx0000.
      \ Note that other\n         combinations of profile_idc and profile-iop (not
      listed in\n         Table 5) may represent a sub-profile equivalent to the common\n
      \        subset of coding tools for more than one profile.  Note also\n         that
      a decoder conforming to a certain profile may be able to\n         decode bitstreams
      conforming to other profiles.\n         If the profile-level-id parameter is
      used to indicate\n         properties of a NAL unit stream, it indicates that,
      to decode\n         the stream, the minimum subset of coding tools a decoder
      has to\n         support is the default sub-profile, and the lowest level the\n
      \        decoder has to support is the default level.\n         If the profile-level-id
      parameter is used for capability\n         exchange or session setup, it indicates
      the subset of coding\n         tools, which is equal to the default sub-profile,
      that the\n         codec supports for both receiving and sending.  If max-recv-\n
      \        level is not present, the default level from profile-level-id\n         indicates
      the highest level the codec wishes to support.  If\n         max-recv-level
      is present, it indicates the highest level the\n         codec supports for
      receiving.  For either receiving or sending,\n         all levels that are lower
      than the highest level supported MUST\n         also be supported.\n            Informative
      note: Capability exchange and session setup\n            procedures should provide
      means to list the capabilities for\n            each supported sub-profile separately.
      \ For example, the\n            one-of-N codec selection procedure of the SDP
      Offer/Answer\n            model can be used (Section 10.2 of [8]).  The one-of-N
      codec\n            selection procedure may also be used to provide different\n
      \           combinations of profile_idc and profile-iop that represent\n            the
      same sub-profile.  When there are many different\n            combinations of
      profile_idc and profile-iop that represent\n            the same sub-profile,
      using the one-of-N codec selection\n            procedure may result in a fairly
      large SDP message.\n            Therefore, a receiver should understand the
      different\n            equivalent combinations of profile_idc and profile-iop
      that\n            represent the same sub-profile and be ready to accept an\n
      \           offer using any of the equivalent combinations.\n         If no
      profile-level-id is present, the Baseline profile,\n         without additional
      constraints at Level 1, MUST be inferred.\n      max-recv-level:\n         This
      parameter MAY be used to indicate the highest level a\n         receiver supports
      when the highest level is higher than the\n         default level (the level
      indicated by profile-level-id).  The\n         value of max-recv-level is a
      base16 (hexadecimal)\n         representation of the two bytes after the syntax
      element\n         profile_idc in the sequence parameter set NAL unit specified
      in\n         [1]: profile-iop (as defined above) and level_idc.  If the\n         level_idc
      byte of max-recv-level is equal to 11 and bit 4 of\n         the profile-iop
      byte of max-recv-level is equal to 1 or if the\n         level_idc byte of max-recv-level
      is equal to 9 and bit 4 of the\n         profile-iop byte of max-recv-level
      is equal to 0, the highest\n         level the receiver supports is Level 1b.
      \ Otherwise, the\n         highest level the receiver supports is equal to the
      level_idc\n         byte of max-recv-level divided by 10.\n         max-recv-level
      MUST NOT be present if the highest level the\n         receiver supports is
      not higher than the default level.\n      max-mbps, max-smbps, max-fs, max-cpb,
      max-dpb, and max-br:\n         These parameters MAY be used to signal the capabilities
      of a\n         receiver implementation.  These parameters MUST NOT be used for\n
      \        any other purpose.  The highest level conveyed in the value of\n         the
      profile-level-id parameter or the max-recv-level parameter\n         MUST be
      such that the receiver is fully capable of supporting.\n         max-mbps, max-smbps,
      max-fs, max-cpb, max-dpb, and max-br MAY\n         be used to indicate capabilities
      of the receiver that extend\n         the required capabilities of the signaled
      highest level, as\n         specified below.\n         When more than one parameter
      from the set (max-mbps, max-smbps,\n         max-fs, max-cpb, max-dpb, max-br)
      is present, the receiver MUST\n         support all signaled capabilities simultaneously.
      \ For example,\n         if both max-mbps and max-br are present, the signaled
      highest\n         level with the extension of both the frame rate and bitrate
      is\n         supported.  That is, the receiver is able to decode NAL unit\n
      \        streams in which the macroblock processing rate is up to max-\n         mbps
      (inclusive), the bitrate is up to max-br (inclusive), the\n         coded picture
      buffer size is derived as specified in the\n         semantics of the max-br
      parameter below, and the other\n         properties comply with the highest
      level specified in the value\n         of the profile-level-id parameter or
      the max-recv-level\n         parameter.\n         If a receiver can support
      all the properties of Level A, the\n         highest level specified in the
      value of the profile-level-id\n         parameter or the max-recv-level parameter
      MUST be Level A\n         (i.e., MUST NOT be lower than Level A).  In other
      words, a\n         receiver MUST NOT signal values of max-mbps, max-fs, max-cpb,\n
      \        max-dpb, and max-br that taken together meet the requirements\n         of
      a higher level compared to the highest level specified in\n         the value
      of the profile-level-id parameter or the max-recv-\n         level parameter.\n
      \           Informative note: When the OPTIONAL media type parameters\n            are
      used to signal the properties of a NAL unit stream, max-\n            mbps,
      max-smbps, max-fs, max-cpb, max-dpb, and max-br are\n            not present,
      and the value of profile-level-id must always\n            be such that the
      NAL unit stream complies fully with the\n            specified profile and level.\n
      \     max-mbps: The value of max-mbps is an integer indicating the\n         maximum
      macroblock processing rate in units of macroblocks per\n         second.  The
      max-mbps parameter signals that the receiver is\n         capable of decoding
      video at a higher rate than is required by\n         the signaled highest level
      conveyed in the value of the\n         profile-level-id parameter or the max-recv-level
      parameter.\n         When max-mbps is signaled, the receiver MUST be able to
      decode\n         NAL unit streams that conform to the signaled highest level,\n
      \        with the exception that the MaxMBPS value in Table A-1 of [1]\n         for
      the signaled highest level is replaced with the value of\n         max-mbps.
      \ The value of max-mbps MUST be greater than or equal\n         to the value
      of MaxMBPS given in Table A-1 of [1] for the\n         highest level.  Senders
      MAY use this knowledge to send pictures\n         of a given size at a higher
      picture rate than is indicated in\n         the signaled highest level.\n      max-smbps:
      The value of max-smbps is an integer indicating the\n         maximum static
      macroblock processing rate in units of static\n         macroblocks per second,
      under the hypothetical assumption that\n         all macroblocks are static
      macroblocks.  When max-smbps is\n         signaled, the MaxMBPS value in Table
      A-1 of [1] should be\n         replaced with the result of the following computation:\n
      \        o  If the parameter max-mbps is signaled, set a variable\n            MaxMacroblocksPerSecond
      to the value of max-mbps.\n            Otherwise, set MaxMacroblocksPerSecond
      equal to the value of\n            MaxMBPS in Table A-1 [1] for the signaled
      highest level\n            conveyed in the value of the profile-level-id parameter
      or\n            the max-recv-level parameter.\n         o  Set a variable P_non-static
      to the proportion of non-static\n            macroblocks in picture n.\n         o
      \ Set a variable P_static to the proportion of static\n            macroblocks
      in picture n.\n         o  The value of MaxMBPS in Table A-1 of [1] should be\n
      \           considered by the encoder to be equal to:\n            MaxMacroblocksPerSecond
      * max-smbps / (P_non-static *\n            max-smbps + P_static * MaxMacroblocksPerSecond)\n
      \        The encoder should recompute this value for each picture.  The\n         value
      of max-smbps MUST be greater than or equal to the value\n         of MaxMBPS
      given explicitly as the value of the max-mbps\n         parameter or implicitly
      in Table A-1 of [1] for the signaled\n         highest level.  Senders MAY use
      this knowledge to send pictures\n         of a given size at a higher picture
      rate than is indicated in\n         the signaled highest level.\n      max-fs:
      The value of max-fs is an integer indicating the maximum\n         frame size
      in units of macroblocks.  The max-fs parameter\n         signals that the receiver
      is capable of decoding larger picture\n         sizes than are required by the
      signaled highest level conveyed\n         in the value of the profile-level-id
      parameter or the max-recv-\n         level parameter.  When max-fs is signaled,
      the receiver MUST be\n         able to decode NAL unit streams that conform
      to the signaled\n         highest level, with the exception that the MaxFS value
      in Table\n         A-1 of [1] for the signaled highest level is replaced with
      the\n         value of max-fs.  The value of max-fs MUST be greater than or\n
      \        equal to the value of MaxFS given in Table A-1 of [1] for the\n         highest
      level.  Senders MAY use this knowledge to send larger\n         pictures at
      a proportionally lower frame rate than is indicated\n         in the signaled
      highest level.\n      max-cpb: The value of max-cpb is an integer indicating
      the maximum\n         coded picture buffer size in units of 1000 bits for the
      VCL HRD\n         parameters and in units of 1200 bits for the NAL HRD\n         parameters.
      \ Note that this parameter does not use units of\n         cpbBrVclFactor and
      cpbBrNALFactor (see Table A-1 of [1]).  The\n         max-cpb parameter signals
      that the receiver has more memory\n         than the minimum amount of coded
      picture buffer memory required\n         by the signaled highest level conveyed
      in the value of the\n         profile-level-id parameter or the max-recv-level
      parameter.\n         When max-cpb is signaled, the receiver MUST be able to
      decode\n         NAL unit streams that conform to the signaled highest level,\n
      \        with the exception that the MaxCPB value in Table A-1 of [1]\n         for
      the signaled highest level is replaced with the value of\n         max-cpb (after
      taking cpbBrVclFactor and cpbBrNALFactor into\n         consideration when needed).
      \ The value of max-cpb (after taking\n         cpbBrVclFactor and cpbBrNALFactor
      into consideration when\n         needed) MUST be greater than or equal to the
      value of MaxCPB\n         given in Table A-1 of [1] for the highest level.  Senders
      MAY\n         use this knowledge to construct coded video streams with\n         greater
      variation of bitrate than can be achieved with the\n         MaxCPB value in
      Table A-1 of [1].\n            Informative note: The coded picture buffer is
      used in the\n            hypothetical reference decoder (Annex C of H.264).
      \ The use\n            of the hypothetical reference decoder is recommended
      in\n            H.264 encoders to verify that the produced bitstream\n            conforms
      to the standard and to control the output bitrate.\n            Thus, the coded
      picture buffer is conceptually independent\n            of any other potential
      buffers in the receiver, including\n            de-interleaving and de-jitter
      buffers.  The coded picture\n            buffer need not be implemented in decoders
      as specified in\n            Annex C of H.264, but rather standard-compliant
      decoders can\n            have any buffering arrangements provided that they
      can\n            decode standard-compliant bitstreams.  Thus, in practice,\n
      \           the input buffer for a video decoder can be integrated with\n            de-interleaving
      and de-jitter buffers of the receiver.\n      max-dpb: The value of max-dpb
      is an integer indicating the maximum\n         decoded picture buffer size in
      units of 8/3 macroblocks.  The\n         max-dpb parameter signals that the
      receiver has more memory\n         than the minimum amount of decoded picture
      buffer memory\n         required by the signaled highest level conveyed in the
      value of\n         the profile-level-id parameter or the max-recv-level parameter.\n
      \        When max-dpb is signaled, the receiver MUST be able to decode\n         NAL
      unit streams that conform to the signaled highest level,\n         with the
      exception that the MaxDpbMbs value in Table A-1 of [1]\n         for the signaled
      highest level is replaced with the value of\n         max-dpb * 3 / 8.  Consequently,
      a receiver that signals max-dpb\n         MUST be capable of storing the following
      number of decoded\n         frames, complementary field pairs, and non-paired
      fields in its\n         decoded picture buffer:\n            Min(max-dpb * 3
      / 8 / ( PicWidthInMbs * FrameHeightInMbs),\n            16)\n         Wherein
      PicWidthInMbs and FrameHeightInMbs are defined in [1].\n         The value of
      max-dpb MUST be greater than or equal to the value\n         of MaxDpbMbs *
      3 / 8, wherein the value of MaxDpbMbs is given\n         in Table A-1 of [1]
      for the highest level.  Senders MAY use\n         this knowledge to construct
      coded video streams with improved\n         compression.\n            Informative
      note: This parameter was added primarily to\n            complement a similar
      codepoint in the ITU-T Recommendation\n            H.245, so as to facilitate
      signaling gateway designs.  The\n            decoded picture buffer stores reconstructed
      samples.  There\n            is no relationship between the size of the decoded
      picture\n            buffer and the buffers used in RTP, especially\n            de-interleaving
      and de-jitter buffers.\n            Informative note: In RFC 3984, which this
      document\n            obsoletes, the unit of this parameter was 1024 bytes.
      \ The\n            unit has been changed to 8/3 macroblocks in this document.\n
      \           The reason for this change was due to the changes from the\n            2003
      version of the H.264 specification referenced by RFC\n            3984 to the
      2010 version of the H.264 specification\n            referenced by this document,
      particularly the changes to\n            Table A-1 in the H.264 specification
      due to addition of\n            color formats and bit depths not supported earlier.
      \ The\n            changed semantics of this parameter keeps backward\n            compatibility
      to RFC 3984 and supports all profiles defined\n            in the 2010 version
      of the H.264 specification.\n      max-br: The value of max-br is an integer
      indicating the maximum\n         video bitrate in units of 1000 bits per second
      for the VCL HRD\n         parameters and in units of 1200 bits per second for
      the NAL HRD\n         parameters.  Note that this parameter does not use units
      of\n         cpbBrVclFactor and cpbBrNALFactor (see Table A-1 of [1]).\n         The
      max-br parameter signals that the video decoder of the\n         receiver is
      capable of decoding video at a higher bitrate than\n         is required by
      the signaled highest level conveyed in the value\n         of the profile-level-id
      parameter or the max-recv-level\n         parameter.\n         When max-br is
      signaled, the video codec of the receiver MUST\n         be able to decode NAL
      unit streams that conform to the signaled\n         highest level, with the
      following exceptions in the limits\n         specified by the highest level:\n
      \        o  The value of max-br (after taking cpbBrVclFactor and\n            cpbBrNALFactor
      into consideration when needed) replaces the\n            MaxBR value in Table
      A-1 of [1] for the highest level.\n         o  When the max-cpb parameter is
      not present, the result of the\n            following formula replaces the value
      of MaxCPB in Table A-1\n            of [1]: (MaxCPB of the signaled level) *
      max-br / (MaxBR of\n            the signaled highest level).\n         For example,
      if a receiver signals capability for Main profile\n         Level 1.2 with max-br
      equal to 1550, this indicates a maximum\n         video bitrate of 1550 kbits/sec
      for VCL HRD parameters, a\n         maximum video bitrate of 1860 kbits/sec
      for NAL HRD parameters,\n         and a CPB size of 4036458 bits (1550000 /
      384000 * 1000 *\n         1000).\n         The value of max-br (after taking
      cpbBrVclFactor and\n         cpbBrNALFactor into consideration when needed)
      MUST be greater\n         than or equal to the value MaxBR given in Table A-1
      of [1] for\n         the signaled highest level.\n         Senders MAY use this
      knowledge to send higher bitrate video as\n         allowed in the level definition
      of Annex A of H.264 to achieve\n         improved video quality.\n            Informative
      note: This parameter was added primarily to\n            complement a similar
      codepoint in the ITU-T Recommendation\n            H.245, so as to facilitate
      signaling gateway designs.  The\n            assumption that the network is
      capable of handling such\n            bitrates at any given time cannot be made
      from the value of\n            this parameter.  In particular, no conclusion
      can be drawn\n            that the signaled bitrate is possible under congestion\n
      \           control constraints.\n      redundant-pic-cap:\n         This parameter
      signals the capabilities of a receiver\n         implementation.  When equal
      to 0, the parameter indicates that\n         the receiver makes no attempt to
      use redundant coded pictures\n         to correct incorrectly decoded primary
      coded pictures.  When\n         equal to 0, the receiver is not capable of using
      redundant\n         slices; therefore, a sender SHOULD avoid sending redundant\n
      \        slices to save bandwidth.  When equal to 1, the receiver is\n         capable
      of decoding any such redundant slice that covers a\n         corrupted area
      in a primary decoded picture (at least partly),\n         and therefore a sender
      MAY send redundant slices.  When the\n         parameter is not present, a value
      of 0 MUST be used for\n         redundant-pic-cap.  When present, the value
      of redundant-pic-\n         cap MUST be either 0 or 1.\n         When the profile-level-id
      parameter is present in the same\n         signaling as the redundant-pic-cap
      parameter and the profile\n         indicated in profile-level-id is such that
      it disallows the use\n         of redundant coded pictures (e.g., Main profile),
      the value of\n         redundant-pic-cap MUST be equal to 0.  When a receiver\n
      \        indicates redundant-pic-cap equal to 0, the received stream\n         SHOULD
      NOT contain redundant coded pictures.\n            Informative note: Even if
      redundant-pic-cap is equal to 0,\n            the decoder is able to ignore
      redundant codec pictures\n            provided that the decoder supports a profile
      (Baseline,\n            Extended) in which redundant coded pictures are allowed.\n
      \           Informative note: Even if redundant-pic-cap is equal to 1,\n            the
      receiver may also choose other error concealment\n            strategies to
      replace or complement decoding of redundant\n            slices.\n      sprop-parameter-sets:\n
      \        This parameter MAY be used to convey any sequence and picture\n         parameter
      set NAL units (herein referred to as the initial\n         parameter set NAL
      units) that can be placed in the NAL unit\n         stream to precede any other
      NAL units in decoding order.  The\n         parameter MUST NOT be used to indicate
      codec capability in any\n         capability exchange procedure.  The value
      of the parameter is a\n         comma-separated (',') list of base64 [7] representations
      of\n         parameter set NAL units as specified in Sections 7.3.2.1 and\n
      \        7.3.2.2 of [1].  Note that the number of bytes in a parameter\n         set
      NAL unit is typically less than 10, but a picture parameter\n         set NAL
      unit can contain several hundred bytes.\n            Informative note: When
      several payload types are offered in\n            the SDP Offer/Answer model,
      each with its own sprop-\n            parameter-sets parameter, the receiver
      cannot assume that\n            those parameter sets do not use conflicting
      storage\n            locations (i.e., identical values of parameter set\n            identifiers).
      \ Therefore, a receiver should buffer all\n            sprop-parameter-sets
      and make them available to the decoder\n            instance that decodes a
      certain payload type.\n         The sprop-parameter-sets parameter MUST only
      contain parameter\n         sets that are conforming to the profile-level-id,
      i.e., the\n         subset of coding tools indicated by any of the parameter
      sets\n         MUST be equal to the default sub-profile, and the level\n         indicated
      by any of the parameter sets MUST be equal to the\n         default level.\n
      \     sprop-level-parameter-sets:\n         This parameter MAY be used to convey
      any sequence and picture\n         parameter set NAL units (herein referred
      to as the initial\n         parameter set NAL units) that can be placed in the
      NAL unit\n         stream to precede any other NAL units in decoding order and\n
      \        that are associated with one or more levels different than the\n         default
      level.  The parameter MUST NOT be used to indicate\n         codec capability
      in any capability exchange procedure.\n         The sprop-level-parameter-sets
      parameter contains parameter\n         sets for one or more levels that are
      different than the default\n         level.  All parameter sets associated with
      one level are\n         clustered and prefixed with a three-byte field that
      has the\n         same syntax as profile-level-id.  This enables the receiver
      to\n         install the parameter sets for one level and discard the rest.\n
      \        The three-byte field is named PLId, and all parameter sets\n         associated
      with one level are named PSL, which has the same\n         syntax as sprop-parameter-sets.
      \ Parameter sets for each level\n         are represented in the form of PLId:PSL,
      i.e., PLId followed by\n         a colon (':') and the base64 [7] representation
      of the initial\n         parameter set NAL units for the level.  Each pair of
      PLId:PSLs\n         is also separated by a colon.  Note that a PSL can contain\n
      \        multiple parameter sets for that level, separated with commas\n         (',').\n
      \        The subset of coding tools indicated by each PLId field MUST be\n         equal
      to the default sub-profile, and the level indicated by\n         each PLId field
      MUST be different than the default level.  All\n         sequence parameter
      sets contained in each PSL MUST have the\n         three bytes from profile_idc
      to level_idc, inclusive, equal to\n         the preceding PLId.\n            Informative
      note: This parameter allows for efficient level\n            downgrade or upgrade
      in SDP Offer/Answer and out-of-band\n            transport of parameter sets
      simultaneously.\n      use-level-src-parameter-sets:\n         This parameter
      MAY be used to indicate a receiver capability.\n         The value MAY be equal
      to either 0 or 1.  When the parameter is\n         not present, the value MUST
      be inferred to be equal to 0.  The\n         value 0 indicates that the receiver
      does not understand the\n         sprop-level-parameter-sets parameter, does
      not understand the\n         \"fmtp\" source attribute as specified in Section
      6.3 of [9],\n         will ignore sprop-level-parameter-sets when present, and
      will\n         ignore sprop-parameter-sets when conveyed using the \"fmtp\"\n
      \        source attribute.  The value 1 indicates that the receiver\n         understands
      the sprop-level-parameter-sets parameter,\n         understands the \"fmtp\"
      source attribute as specified in Section\n         6.3 of [9], and is capable
      of using parameter sets contained in\n         the sprop-level-parameter-sets
      or contained in the sprop-\n         parameter-sets that is conveyed using the
      \"fmtp\" source\n         attribute.\n            Informative note: An RFC 3984
      receiver does not understand\n            sprop-level-parameter-sets, use-level-src-parameter-sets,
      or\n            the \"fmtp\" source attribute as specified in Section 6.3 of\n
      \           [9].  Therefore, during SDP Offer/Answer, an RFC 3984\n            receiver
      as the answerer will simply ignore sprop-level-\n            parameter-sets
      when present in an offer and sprop-parameter-\n            sets conveyed using
      the \"fmtp\" source attribute, as\n            specified in Section 6.3 of [9].
      \ Assume that the offered\n            payload type was accepted at a level
      lower than the default\n            level.  If the offered payload type included
      sprop-level-\n            parameter-sets or included sprop-parameter-sets conveyed\n
      \           using the \"fmtp\" source attribute and if the offerer sees\n            that
      the answerer has not included use-level-src-parameter-\n            sets equal
      to 1 in the answer, the offerer knows that\n            in-band transport of
      parameter sets is needed.\n      in-band-parameter-sets:\n         This parameter
      MAY be used to indicate a receiver capability.\n         The value MAY be equal
      to either 0 or 1.  The value 1 indicates\n         that the receiver discards
      out-of-band parameter sets in sprop-\n         parameter-sets and sprop-level-parameter-sets;
      therefore, the\n         sender MUST transmit all parameter sets in-band.  The
      value 0\n         indicates that the receiver utilizes out-of-band parameter
      sets\n         included in sprop-parameter-sets and/or sprop-level-parameter-\n
      \        sets.  However, in this case, the sender MAY still choose to\n         send
      parameter sets in-band.  When in-band-parameter-sets is\n         equal to 1,
      use-level-src-parameter-sets MUST NOT be present or\n         MUST be equal
      to 0.  When the parameter is not present, this\n         receiver capability
      is not specified, and therefore the sender\n         MAY send out-of-band parameter
      sets only, it MAY send in-band-\n         parameter-sets only, or it MAY send
      both.\n      level-asymmetry-allowed:\n         This parameter MAY be used in
      SDP Offer/Answer to indicate\n         whether level asymmetry, i.e., sending
      media encoded at a\n         different level in the offerer-to-answerer direction
      than the\n         level in the answerer-to-offerer direction, is allowed.  The\n
      \        value MAY be equal to either 0 or 1.  When the parameter is not\n         present,
      the value MUST be inferred to be equal to 0.  The\n         value 1 in both
      the offer and the answer indicates that level\n         asymmetry is allowed.
      \ The value of 0 in either the offer or\n         the answer indicates that
      level asymmetry is not allowed.\n         If level-asymmetry-allowed is equal
      to 0 (or not present) in\n         either the offer or the answer, level asymmetry
      is not allowed.\n         In this case, the level to use in the direction from
      the\n         offerer to the answerer MUST be the same as the level to use in\n
      \        the opposite direction.\n      packetization-mode:\n         This parameter
      signals the properties of an RTP payload type or\n         the capabilities
      of a receiver implementation.  Only a single\n         configuration point can
      be indicated; thus, when capabilities\n         to support more than one packetization-mode
      are declared,\n         multiple configuration points (RTP payload types) must
      be used.\n         When the value of packetization-mode is equal to 0 or\n         packetization-mode
      is not present, the single NAL mode MUST be\n         used.  This mode is in
      use in standards using ITU-T\n         Recommendation H.241 [3] (see Section
      12.1).  When the value of\n         packetization-mode is equal to 1, the non-interleaved
      mode MUST\n         be used.  When the value of packetization-mode is equal
      to 2,\n         the interleaved mode MUST be used.  The value of packetization-\n
      \        mode MUST be an integer in the range of 0 to 2, inclusive.\n      sprop-interleaving-depth:\n
      \        This parameter MUST NOT be present when packetization-mode is\n         not
      present or the value of packetization-mode is equal to 0 or\n         1.  This
      parameter MUST be present when the value of\n         packetization-mode is
      equal to 2.\n         This parameter signals the properties of an RTP packet
      stream.\n         It specifies the maximum number of VCL NAL units that precede\n
      \        any VCL NAL unit in the RTP packet stream in transmission order\n         and
      that follow the VCL NAL unit in decoding order.\n         Consequently, it is
      guaranteed that receivers can reconstruct\n         NAL unit decoding order
      when the buffer size for NAL unit\n         decoding order recovery is at least
      the value of sprop-\n         interleaving-depth + 1 in terms of VCL NAL units.\n
      \        The value of sprop-interleaving-depth MUST be an integer in the\n         range
      of 0 to 32767, inclusive.\n      sprop-deint-buf-req:\n         This parameter
      MUST NOT be present when packetization-mode is\n         not present or the
      value of packetization-mode is equal to 0 or\n         1.  It MUST be present
      when the value of packetization-mode is\n         equal to 2.\n         sprop-deint-buf-req
      signals the required size of the\n         de-interleaving buffer for the RTP
      packet stream.  The value of\n         the parameter MUST be greater than or
      equal to the maximum\n         buffer occupancy (in units of bytes) required
      in such a\n         de-interleaving buffer that is specified in Section 7.2.
      \ It is\n         guaranteed that receivers can perform the de-interleaving
      of\n         interleaved NAL units into NAL unit decoding order, when the\n
      \        de-interleaving buffer size is at least the value of sprop-\n         deint-buf-req
      in terms of bytes.\n         The value of sprop-deint-buf-req MUST be an integer
      in the\n         range of 0 to 4294967295, inclusive.\n            Informative
      note: sprop-deint-buf-req indicates the required\n            size of the de-interleaving
      buffer only.  When network\n            jitter can occur, an appropriately sized
      jitter buffer has\n            to be provisioned for as well.\n      deint-buf-cap:\n
      \        This parameter signals the capabilities of a receiver\n         implementation
      and indicates the amount of de-interleaving\n         buffer space in units
      of bytes that the receiver has available\n         for reconstructing the NAL
      unit decoding order.  A receiver is\n         able to handle any stream for
      which the value of the sprop-\n         deint-buf-req parameter is smaller than
      or equal to this\n         parameter.\n         If the parameter is not present,
      then a value of 0 MUST be used\n         for deint-buf-cap.  The value of deint-buf-cap
      MUST be an\n         integer in the range of 0 to 4294967295, inclusive.\n            Informative
      note: deint-buf-cap indicates the maximum\n            possible size of the
      de-interleaving buffer of the receiver\n            only.  When network jitter
      can occur, an appropriately sized\n            jitter buffer has to be provisioned
      for as well.\n      sprop-init-buf-time:\n         This parameter MAY be used
      to signal the properties of an RTP\n         packet stream.  The parameter MUST
      NOT be present if the value\n         of packetization-mode is equal to 0 or
      1.\n         The parameter signals the initial buffering time that a\n         receiver
      MUST wait before starting decoding to recover the NAL\n         unit decoding
      order from the transmission order.  The parameter\n         is the maximum value
      of (decoding time of the NAL unit -\n         transmission time of a NAL unit),
      assuming reliable and\n         instantaneous transmission, the same timeline
      for transmission\n         and decoding, and commencement of decoding when the
      first\n         packet arrives.\n         An example of specifying the value
      of sprop-init-buf-time\n         follows.  A NAL unit stream is sent in the
      following\n         interleaved order, in which the value corresponds to the\n
      \        decoding time and the transmission order is from left to right:\n               0
      \ 2  1  3  5  4  6  8  7 ...\n         Assuming a steady transmission rate of
      NAL units, the\n         transmission times are:\n               0  1  2  3
      \ 4  5  6  7  8 ...\n         Subtracting the decoding time from the transmission
      time\n         column-wise results in the following series:\n               0
      -1  1  0 -1  1  0 -1  1 ...\n         Thus, in terms of intervals of NAL unit
      transmission times, the\n         value of sprop-init-buf-time in this example
      is 1.  The\n         parameter is coded as a non-negative base10 integer\n         representation
      in clock ticks of a 90-kHz clock.  If the\n         parameter is not present,
      then no initial buffering time value\n         is defined.  Otherwise, the value
      of sprop-init-buf-time MUST\n         be an integer in the range of 0 to 4294967295,
      inclusive.\n         In addition to the signaled sprop-init-buf-time, receivers\n
      \        SHOULD take into account the transmission delay jitter\n         buffering,
      including buffering for the delay jitter caused by\n         mixers, translators,
      gateways, proxies, traffic-shapers, and\n         other network elements.\n
      \     sprop-max-don-diff:\n         This parameter MAY be used to signal the
      properties of an RTP\n         packet stream.  It MUST NOT be used to signal
      transmitter,\n         receiver, or codec capabilities.  The parameter MUST
      NOT be\n         present if the value of packetization-mode is equal to 0 or
      1.\n         sprop-max-don-diff is an integer in the range of 0 to 32767,\n
      \        inclusive.  If sprop-max-don-diff is not present, the value of\n         the
      parameter is unspecified.  sprop-max-don-diff is calculated\n         as follows:\n
      \           sprop-max-don-diff = max{AbsDON(i) - AbsDON(j)},\n            for
      any i and any j>i,\n         where i and j indicate the index of the NAL unit
      in the\n         transmission order and AbsDON denotes a decoding order number\n
      \        of the NAL unit that does not wrap around to 0 after 65535.  In\n         other
      words, AbsDON is calculated as follows: let m and n be\n         consecutive
      NAL units in transmission order.  For the very\n         first NAL unit in transmission
      order (whose index is 0),\n         AbsDON(0) = DON(0).  For other NAL units,
      AbsDON is calculated\n         as follows:\n            If DON(m) == DON(n),
      AbsDON(n) = AbsDON(m)\n            If (DON(m) < DON(n) and DON(n) - DON(m) <
      32768),\n              AbsDON(n) = AbsDON(m) + DON(n) - DON(m)\n            If
      (DON(m) > DON(n) and DON(m) - DON(n) >= 32768),\n              AbsDON(n) = AbsDON(m)
      + 65536 - DON(m) + DON(n)\n            If (DON(m) < DON(n) and DON(n) - DON(m)
      >= 32768),\n              AbsDON(n) = AbsDON(m) - (DON(m) + 65536 - DON(n))\n
      \           If (DON(m) > DON(n) and DON(m) - DON(n) < 32768),\n              AbsDON(n)
      = AbsDON(m) - (DON(m) - DON(n))\n         where DON(i) is the decoding order
      number of the NAL unit\n         having index i in the transmission order.  The
      decoding order\n         number is specified in Section 5.5.\n            Informative
      note: Receivers may use sprop-max-don-diff to\n            trigger which NAL
      units in the receiver buffer can be passed\n            to the decoder.\n      max-rcmd-nalu-size:\n
      \        This parameter MAY be used to signal the capabilities of a\n         receiver.
      \ The parameter MUST NOT be used for any other\n         purposes.  The value
      of the parameter indicates the largest\n         NALU size in bytes that the
      receiver can handle efficiently.\n         The parameter value is a recommendation,
      not a strict upper\n         boundary.  The sender MAY create larger NALUs but
      must be aware\n         that the handling of these may come at a higher cost
      than NALUs\n         conforming to the limitation.\n         The value of max-rcmd-nalu-size
      MUST be an integer in the range\n         of 0 to 4294967295, inclusive.  If
      this parameter is not\n         specified, no known limitation to the NALU size
      exists.\n         Senders still have to consider the MTU size available between\n
      \        the sender and the receiver and SHOULD run MTU discovery for\n         this
      purpose.\n         This parameter is motivated by, for example, an IP to H.223\n
      \        video telephony gateway, where NALUs smaller than the H.223\n         transport
      data unit will be more efficient.  A gateway may\n         terminate IP; thus,
      MTU discovery will normally not work beyond\n         the gateway.\n            Informative
      note: Setting this parameter to a lower than\n            necessary value may
      have a negative impact.\n      sar-understood:\n         This parameter MAY
      be used to indicate a receiver capability\n         and nothing else.  The parameter
      indicates the maximum value of\n         aspect_ratio_idc (specified in [1])
      smaller than 255 that the\n         receiver understands.  Table E-1 of [1]
      specifies\n         aspect_ratio_idc equal to 0 as \"unspecified\"; 1 to 16,\n
      \        inclusive, as specific Sample Aspect Ratios (SARs); 17 to 254,\n         inclusive,
      as \"reserved\"; and 255 as the Extended SAR, for\n         which SAR width
      and SAR height are explicitly signaled.\n         Therefore, a receiver with
      a decoder according to [1]\n         understands aspect_ratio_idc in the range
      of 1 to 16,\n         inclusive, and aspect_ratio_idc equal to 255, in the sense
      that\n         the receiver knows exactly what the SAR is.  For such a\n         receiver,
      the value of sar-understood is 16.  In the future, if\n         Table E-1 of
      [1] is extended, e.g., such that the SAR for\n         aspect_ratio_idc equal
      to 17 is specified, then for a receiver\n         with a decoder that understands
      the extension, the value of\n         sar-understood is 17.  For a receiver
      with a decoder according\n         to the 2003 version of [1], the value of
      sar-understood is 13,\n         as the minimum reserved aspect_ratio_idc therein
      is 14.\n         When sar-understood is not present, the value MUST be inferred\n
      \        to be equal to 13.\n      sar-supported:\n         This parameter MAY
      be used to indicate a receiver capability\n         and nothing else.  The value
      of this parameter is an integer in\n         the range of 1 to sar-understood,
      inclusive, equal to 255.  The\n         value of sar-supported equal to N smaller
      than 255 indicates\n         that the receiver supports all the SARs corresponding
      to H.264\n         aspect_ratio_idc values (see Table E-1 of [1]) in the range\n
      \        from 1 to N, inclusive, without geometric distortion.  The\n         value
      of sar-supported equal to 255 indicates that the receiver\n         supports
      all sample aspect ratios that are expressible using\n         two 16-bit integer
      values as the numerator and denominator,\n         i.e., those that are expressible
      using the H.264\n         aspect_ratio_idc value of 255 (Extended_SAR, see Table
      E-1 of\n         [1]), without geometric distortion.\n         H.264-compliant
      encoders SHOULD NOT send an aspect_ratio_idc\n         equal to 0 or an aspect_ratio_idc
      larger than sar-understood\n         and smaller than 255.  H.264-compliant
      encoders SHOULD send an\n         aspect_ratio_idc that the receiver is able
      to display without\n         geometrical distortion.  However, H.264-compliant
      encoders MAY\n         choose to send pictures using any SAR.\n         Note
      that the actual sample aspect ratio or extended sample\n         aspect ratio,
      when present, of the stream is conveyed in the\n         Video Usability Information
      (VUI) part of the sequence\n         parameter set.\n      Encoding considerations:\n
      \        This type is only defined for transfer via RTP (RFC 3550).\n      Security
      considerations:\n         See Section 9 of RFC 6184.\n      Public specification:\n
      \        Please refer to RFC 6184 and its Section 17.\n      Additional information:\n
      \        None\n      File extensions:  none\n      Macintosh file type code:
      \ none\n      Object identifier or OID:  none\n      Person & email address
      to contact for further information:\n         Ye-Kui Wang, yekui.wang@huawei.com\n
      \     Intended usage:  COMMON\n      Author:\n         Ye-Kui Wang, yekui.wang@huawei.com\n
      \     Change controller:\n         IETF Audio/Video Transport working group
      delegated from the\n         IESG.\n"
    title: 8.1.  Media Type Registration
  - contents:
    - "8.2.  SDP Parameters\n   The receiver MUST ignore any parameter unspecified
      in this memo.\n"
    - contents:
      - "8.2.1.  Mapping of Payload Type Parameters to SDP\n   The media type video/H264
        string is mapped to fields in the Session\n   Description Protocol (SDP) [6]
        as follows:\n   o  The media name in the \"m=\" line of SDP MUST be video.\n
        \  o  The encoding name in the \"a=rtpmap\" line of SDP MUST be H264 (the\n
        \     media subtype).\n   o  The clock rate in the \"a=rtpmap\" line MUST
        be 90000.\n   o  The OPTIONAL parameters profile-level-id, max-recv-level,
        max-\n      mbps, max-smbps, max-fs, max-cpb, max-dpb, max-br, redundant-pic-\n
        \     cap, use-level-src-parameter-sets, in-band-parameter-sets, level-\n
        \     asymmetry-allowed, packetization-mode, sprop-interleaving-depth,\n      sprop-deint-buf-req,
        deint-buf-cap, sprop-init-buf-time, sprop-\n      max-don-diff, max-rcmd-nalu-size,
        sar-understood, and sar-\n      supported, when present, MUST be included
        in the \"a=fmtp\" line of\n      SDP.  These parameters are expressed as a
        media type string, in\n      the form of a semicolon-separated list of parameter=value
        pairs.\n   o  The OPTIONAL parameters sprop-parameter-sets and sprop-level-\n
        \     parameter-sets, when present, MUST be included in the \"a=fmtp\"\n      line
        of SDP or conveyed using the \"fmtp\" source attribute as\n      specified
        in Section 6.3 of [9].  For a particular media format\n      (i.e., RTP payload
        type), a sprop-parameter-sets or sprop-level-\n      parameter-sets MUST NOT
        be both included in the \"a=fmtp\" line of\n      SDP and conveyed using the
        \"fmtp\" source attribute.  When included\n      in the \"a=fmtp\" line of
        SDP, these parameters are expressed as a\n      media type string, in the
        form of a semicolon-separated list of\n      parameter=value pairs.  When
        conveyed using the \"fmtp\" source\n      attribute, these parameters are
        only associated with the given\n      source and payload type as parts of
        the \"fmtp\" source attribute.\n         Informative note: Conveyance of sprop-parameter-sets
        and sprop-\n         level-parameter-sets using the \"fmtp\" source attribute
        allows\n         for out-of-band transport of parameter sets in topologies
        like\n         Topo-Video-switch-MCU [29].\n   An example of media representation
        in SDP is as follows (Baseline\n   profile, Level 3.0, some of the constraints
        of the Main profile may\n   not be obeyed):\n      m=video 49170 RTP/AVP 98\n
        \     a=rtpmap:98 H264/90000\n      a=fmtp:98 profile-level-id=42A01E;\n                packetization-mode=1;\n
        \               sprop-parameter-sets=<parameter sets data>\n"
      title: 8.2.1.  Mapping of Payload Type Parameters to SDP
    - contents:
      - "8.2.2.  Usage with the SDP Offer/Answer Model\n   When H.264 is offered over
        RTP using SDP in an Offer/Answer model [8]\n   for negotiation for unicast
        usage, the following limitations and\n   rules apply:\n   o  The parameters
        identifying a media format configuration for H.264\n      are profile-level-id
        and packetization-mode.  These media format\n      configuration parameters
        (except for the level part of profile-\n      level-id) MUST be used symmetrically;
        that is, the answerer MUST\n      either maintain all configuration parameters
        or remove the media\n      format (payload type) completely if one or more
        of the parameter\n      values are not supported.  Note that the level part
        of profile-\n      level-id includes level_idc, and, for indication of Level
        1b when\n      profile_idc is equal to 66, 77, or 88, bit 4\n      (constraint_set3_flag)
        of profile-iop.  The level part of profile-\n      level-id is changeable.\n
        \        Informative note: The requirement for symmetric use does not\n         apply
        for the level part of profile-level-id and does not apply\n         for the
        other stream properties and capability parameters.\n         Informative note:
        In H.264 [1], all the levels except for Level\n         1b are equal to the
        value of level_idc divided by 10.  Level 1b\n         is a level higher than
        Level 1.0 but lower than Level 1.1 and\n         is signaled in an ad hoc
        manner, because the level was\n         specified after Level 1.0 and Level
        1.1.  For the Baseline,\n         Main, and Extended profiles (with profile_idc
        equal to 66, 77,\n         and 88, respectively), Level 1b is indicated by
        level_idc equal\n         to 11 (i.e., same as Level 1.1) and constraint_set3_flag
        equal\n         to 1.  For other profiles, Level 1b is indicated by level_idc\n
        \        equal to 9 (but note that Level 1b for these profiles are still\n
        \        higher than Level 1, which has level_idc equal to 10 and lower\n
        \        than Level 1.1).  In SDP Offer/Answer, an answer to an offer\n         may
        indicate a level equal to or lower than the level indicated\n         in the
        offer.  Due to the ad hoc indication of Level 1b,\n         offerers and answerers
        must check the value of bit 4\n         (constraint_set3_flag) of the middle
        octet of the parameter\n         profile-level-id, when profile_idc is equal
        to 66, 77, or 88\n         and level_idc is equal to 11.\n      To simplify
        the handling and matching of these configurations, the\n      same RTP payload
        type number used in the offer SHOULD also be used\n      in the answer, as
        specified in [8].  An answer MUST NOT contain\n      the payload type number
        used in the offer unless the configuration\n      is exactly the same as in
        the offer.\n         Informative note: When an offerer receives an answer,
        it has to\n         compare payload types not declared in the offer based
        on the\n         media type (i.e., video/H264) and the above media configuration\n
        \        parameters with any payload types it has already declared.\n         This
        will enable it to determine whether the configuration in\n         question
        is new or if it is equivalent to configuration already\n         offered,
        since a different payload type number may be used in\n         the answer.\n
        \  o  When present, the parameter max-recv-level declares the highest\n      level
        supported for receiving.  In case max-recv-level is not\n      present, the
        highest level supported for receiving is equal to the\n      default level
        indicated by the level part of profile-level-id.\n      When present, max-recv-level
        MUST be higher than the default\n      level.\n   o  The parameter level-asymmetry-allowed
        indicates whether level\n      asymmetry is allowed.\n      If level-asymmetry-allowed
        is equal to 0 (or not present) in\n      either the offer or the answer, level
        asymmetry is not allowed.\n      In this case, the level to use in the direction
        from the offerer\n      to the answerer MUST be the same as the level to use
        in the\n      opposite direction, and the common level to use is equal to
        the\n      lower value of the default level in the offer and the default\n
        \     level in the answer.\n      Otherwise, level-asymmetry-allowed equals
        1 in both the offer and\n      the answer, and level asymmetry is allowed.
        \ In this case, the\n      level to use in the offerer-to-answerer direction
        MUST be equal to\n      the highest level the answerer supports for receiving,
        and the\n      level to use in the answerer-to-offerer direction MUST be equal
        to\n      the highest level the offerer supports for receiving.\n      When
        level asymmetry is not allowed, level upgrade is not allowed,\n      i.e.,
        the default level in the answer MUST be equal to or lower\n      than the
        default level in the offer.\n   o  The parameters sprop-deint-buf-req, sprop-interleaving-depth,\n
        \     sprop-max-don-diff, and sprop-init-buf-time describe the\n      properties
        of the RTP packet stream that the offerer or answerer\n      is sending for
        the media format configuration.  This differs from\n      the normal usage
        of the Offer/Answer parameters: normally such\n      parameters declare the
        properties of the stream that the offerer\n      or the answerer is able to
        receive.  When dealing with H.264, the\n      offerer assumes that the answerer
        will be able to receive media\n      encoded using the configuration being
        offered.\n         Informative note: The above parameters apply for any stream\n
        \        sent by a declaring entity with the same configuration; i.e.,\n         they
        are dependent on their source.  Rather than being bound to\n         the payload
        type, the values may have to be applied to another\n         payload type
        when being sent, as they apply for the\n         configuration.\n   o  The
        capability parameters max-mbps, max-smbps, max-fs, max-cpb,\n      max-dpb,
        max-br, redundant-pic-cap, max-rcmd-nalu-size, sar-\n      understood, and
        sar-supported MAY be used to declare further\n      capabilities of the offerer
        or answerer for receiving.  These\n      parameters MUST NOT be present when
        the direction attribute is\n      \"sendonly\" and when the parameters describe
        the limitations of\n      what the offerer or answerer accepts for receiving
        streams.\n   o  An offerer has to include the size of the de-interleaving
        buffer,\n      sprop-deint-buf-req, in the offer for an interleaved H.264
        stream.\n      To enable the offerer and answerer to inform each other about\n
        \     their capabilities for de-interleaving buffering in receiving\n      streams,
        both parties are RECOMMENDED to include deint-buf-cap.\n      For interleaved
        streams, it is also RECOMMENDED to consider\n      offering multiple payload
        types with different buffering\n      requirements when the capabilities of
        the receiver are unknown.\n   o  The sprop-parameter-sets or sprop-level-parameter-sets
        parameter,\n      when present (included in the \"a=fmtp\" line of SDP or
        conveyed\n      using the \"fmtp\" source attribute as specified in Section
        6.3 of\n      [9]), is used for out-of-band transport of parameter sets.\n
        \     However, when out-of-band transport of parameter sets is used,\n      parameter
        sets MAY still be additionally transported in-band.\n      The answerer MAY
        use either out-of-band or in-band transport of\n      parameter sets for the
        stream it is sending, regardless of whether\n      out-of-band parameter sets
        transport has been used in the offerer-\n      to-answerer direction.  Parameter
        sets included in an answer are\n      independent of those parameter sets
        included in the offer, as they\n      are used for decoding two different
        video streams, one from the\n      answerer to the offerer and the other in
        the opposite direction.\n      The following rules apply to transport of parameter
        sets in the\n      offerer-to-answerer direction.\n         o  An offer MAY
        include either or both of sprop-parameter-sets\n            and sprop-level-parameter-sets.
        \ If neither sprop-parameter-\n            sets nor sprop-level-parameter-sets
        is present in the offer,\n            then only in-band transport of parameter
        sets is used.\n         o  If the answer includes in-band-parameter-sets equal
        to 1,\n            then the offerer MUST transmit parameter sets in-band.\n
        \           Otherwise, the following applies.\n               o  If the level
        to use in the offerer-to-answerer\n                  direction is equal to
        the default level in the offer,\n                  the following applies.\n
        \                    When there is a sprop-parameter-sets included in\n                     the
        \"a=fmtp\" line in the offer, the answerer MUST\n                     be prepared
        to use the parameter sets included in\n                     the sprop-parameter-sets
        for decoding the incoming\n                     NAL unit stream.\n                     When
        there is a sprop-parameter-sets conveyed using\n                     the \"fmtp\"
        source attribute in the offer, the\n                     following applies.
        \ If the answer includes use-\n                     level-src-parameter-sets
        equal to 1 or the \"fmtp\"\n                     source attribute, the answerer
        MUST be prepared to\n                     use the parameter sets included
        in the sprop-\n                     parameter-sets for decoding the incoming
        NAL unit\n                     stream;  otherwise, the offerer MUST transmit\n
        \                    parameter sets in-band.\n                     When sprop-parameter-sets
        is not present in the\n                     offer, the offerer MUST transmit
        parameter sets in-\n                     band.\n                     The answerer
        MUST ignore sprop-level-parameter-\n                     sets, when present
        (either included in the \"a=fmtp\"\n                     line or conveyed
        using the \"fmtp\" source attribute)\n                     in the offer.\n
        \              o  Otherwise, the level to use in the offerer-to-answerer\n
        \                 direction is not equal to the default level in the\n                  offer,
        and the following applies.\n                     The answerer MUST ignore
        sprop-parameter-sets, when\n                     present (either included
        in the \"a=fmtp\" line or\n                     conveyed using the \"fmtp\"
        source attribute) in the\n                     offer.\n                     When
        neither use-level-src-parameter-sets is equal\n                     to 1 nor
        the \"fmtp\" source attribute is present in\n                     the answer,
        the answerer MUST ignore sprop-level-\n                     parameter-sets,
        when present in the offer, and the\n                     offerer MUST transmit
        parameter sets in-band.\n                     When either use-level-src-parameter-sets
        is equal\n                     to 1 or the \"fmtp\" source attribute is present
        in\n                     the answer, the answerer MUST be prepared to use\n
        \                    the parameter sets that are included in sprop-\n                     level-parameter-sets
        for the accepted level (i.e.,\n                     the default level in the
        answer), when present in\n                     the offer, for decoding the
        incoming NAL unit\n                     stream, and ignore all other parameter
        sets\n                     included in sprop-level-parameter-sets.\n                     When
        no parameter sets for the level to use in the\n                     offerer-to-answerer
        direction are present in sprop-\n                     level-parameter-sets
        in the offer, the offerer MUST\n                     transmit parameter sets
        in-band.\n      The following rules apply to the transport of parameter sets
        in\n      the answerer-to-offerer direction.\n         o  An answer MAY include
        either sprop-parameter-sets or sprop-\n            level-parameter-sets but
        MUST NOT include both.  If neither\n            sprop-parameter-sets nor sprop-level-parameter-sets
        is\n            present in the answer, then only in-band transport of\n            parameter
        sets is used.\n         o  If the offer includes in-band-parameter-sets equal
        to 1, the\n            answerer MUST NOT include sprop-parameter-sets or sprop-\n
        \           level-parameter-sets in the answer and MUST transmit\n            parameter
        sets in-band.  Otherwise, the following applies.\n               o  If the
        level to use in the answerer-to-offerer\n                  direction is equal
        to the default level in the answer,\n                  the following applies.\n
        \                    When there is a sprop-parameter-sets included in\n                     the
        \"a=fmtp\" line in the answer, the offerer MUST\n                     be prepared
        to use the parameter sets included in\n                     the sprop-parameter-sets
        for decoding the incoming\n                     NAL unit stream.\n                     When
        there is a sprop-parameter-sets conveyed using\n                     the \"fmtp\"
        source attribute in the answer, the\n                     following applies.
        \ If the offer includes use-\n                     level-src-parameter-sets
        equal to 1 or the \"fmtp\"\n                     source attribute, the offerer
        MUST be prepared to\n                     use the parameter sets included
        in the sprop-\n                     parameter-sets for decoding the incoming
        NAL unit\n                     stream;  otherwise, the answerer MUST transmit\n
        \                    parameter sets in-band.\n                     When sprop-parameter-sets
        is not present in the\n                     answer, the answerer MUST transmit
        parameter sets\n                     in-band.\n                     The offerer
        MUST ignore sprop-level-parameter-sets,\n                     when present
        (either included in the \"a=fmtp\" line\n                     or conveyed
        using the \"fmtp\" source attribute) in\n                     the answer.\n
        \              o  Otherwise, the level to use in the answerer-to-offerer\n
        \                 direction is not equal to the default level in the\n                  answer,
        and the following applies.\n                     The offerer MUST ignore sprop-parameter-sets
        when\n                     present (either included in the \"a=fmtp\" line
        of\n                     SDP or conveyed using the \"fmtp\" source attribute)\n
        \                    in the answer.\n                     When neither use-level-src-parameter-sets
        is equal\n                     to 1 nor the \"fmtp\" source attribute is present
        in\n                     the offer, the offerer MUST ignore sprop-level-\n
        \                    parameter-sets, when present, and the answerer MUST\n
        \                    transmit parameter sets in-band.\n                     When
        either use-level-src-parameter-sets is equal\n                     to 1 or
        the \"fmtp\" source attribute is present in\n                     the offer,
        the offerer MUST be prepared to use the\n                     parameter sets
        that are included in sprop-level-\n                     parameter-sets for
        the level to use in the\n                     answerer-to-offerer direction,
        when present in the\n                     answer, for decoding the incoming
        NAL unit stream,\n                     and ignore all other parameter sets
        included in\n                     sprop-level-parameter-sets in the answer.\n
        \                    When no parameter sets for the level to use in the\n
        \                    answerer-to-offerer direction are present in sprop-\n
        \                    level-parameter-sets in the answer, the answerer\n                     MUST
        transmit parameter sets in-band.\n      When sprop-parameter-sets or sprop-level-parameter-sets
        is\n      conveyed using the \"fmtp\" source attribute as specified in Section\n
        \     6.3 of [9], the receiver of the parameters MUST store the\n      parameter
        sets included in the sprop-parameter-sets or sprop-\n      level-parameter-sets
        for the accepted level and associate them\n      with the source given as
        a part of the \"fmtp\" source attribute.\n      Parameter sets associated
        with one source MUST only be used to\n      decode NAL units conveyed in RTP
        packets from the same source.\n      When this mechanism is in use, SSRC collision
        detection and\n      resolution MUST be performed as specified in [9].\n         Informative
        note: Conveyance of sprop-parameter-sets and sprop-\n         level-parameter-sets
        using the \"fmtp\" source attribute may be\n         used in topologies like
        Topo-Video-switch-MCU [29] to enable\n         out-of-band transport of parameter
        sets.\n   For streams being delivered over multicast, the following rules\n
        \  apply:\n   o  The media format configuration is identified by \"profile-level-\n
        \     id\", including the level part, and packetization-mode.  These\n      media
        format configuration parameters (including the level part of\n      profile-level-id)
        MUST be used symmetrically; that is, the\n      answerer MUST either maintain
        all configuration parameters or\n      remove the media format (payload type)
        completely.  Note that this\n      implies that the level part of profile-level-id
        for Offer/Answer\n      in multicast is not changeable.\n      To simplify
        the handling and matching of these configurations, the\n      same RTP payload
        type number used in the offer SHOULD also be used\n      in the answer, as
        specified in [8].  An answer MUST NOT contain a\n      payload type number
        used in the offer unless the configuration is\n      the same as in the offer.\n
        \  o  Parameter sets received MUST be associated with the originating\n      source
        and MUST only be used in decoding the incoming NAL unit\n      stream from
        the same source.\n   o  The rules for other parameters are the same as above
        for unicast\n      as long as the above rules are obeyed.\n   Table 6 lists
        the interpretation of all the media type parameters\n   that MUST be used
        for the different direction attributes.\n       Table 6.  Interpretation of
        parameters for different direction\n                 attributes\n                                              sendonly
        --+\n                                           recvonly --+  |\n                                        sendrecv
        --+  |  |\n                                                   |  |  |\n                profile-level-id
        \                  C  C  P\n                max-recv-level                     R
        \ R  -\n                packetization-mode                 C  C  P\n                sprop-deint-buf-req
        \               P  -  P\n                sprop-interleaving-depth           P
        \ -  P\n                sprop-max-don-diff                 P  -  P\n                sprop-init-buf-time
        \               P  -  P\n                max-mbps                           R
        \ R  -\n                max-smbps                          R  R  -\n                max-fs
        \                            R  R  -\n                max-cpb                            R
        \ R  -\n                max-dpb                            R  R  -\n                max-br
        \                            R  R  -\n                redundant-pic-cap                  R
        \ R  -\n                deint-buf-cap                      R  R  -\n                max-rcmd-nalu-size
        \                R  R  -\n                sar-understood                     R
        \ R  -\n                sar-supported                      R  R  -\n                in-band-parameter-sets
        \            R  R  -\n                use-level-src-parameter-sets       R
        \ R  -\n                level-asymmetry-allowed            O  -  -\n                sprop-parameter-sets
        \              S  -  S\n                sprop-level-parameter-sets         S
        \ -  S\n             Legend:\n             C: configuration for sending and
        receiving streams\n             O: offer/answer mode\n             P: properties
        of the stream to be sent\n             R: receiver capabilities\n             S:
        out-of-band parameter sets\n             -: not usable (when present, SHOULD
        be ignored)\n   Parameters used for declaring receiver capabilities are in
        general\n   downgradable; that is, they express the upper limit for a sender's\n
        \  possible behavior.  Thus, a sender MAY select to set its encoder\n   using
        only lower/less or equal values of these parameters.\n   Parameters declaring
        a configuration point are not changeable, with\n   the exception of the level
        part of the profile-level-id parameter for\n   unicast usage.\n   When a sender's
        capabilities are declared and non-downgradable\n   parameters are used in
        this declaration, these parameters express a\n   configuration that is acceptable
        for the sender to receive streams.\n   In order to achieve high interoperability
        levels, it is often\n   advisable to offer multiple alternative configurations,
        e.g., for the\n   packetization mode.  It is impossible to offer multiple\n
        \  configurations in a single payload type.  Thus, when multiple\n   configuration
        offers are made, each offer requires its own RTP\n   payload type associated
        with the offer.\n   A receiver SHOULD understand all media type parameters,
        even if it\n   only supports a subset of the payload format's functionality.
        \ This\n   ensures that a receiver is capable of understanding when an offer
        to\n   receive media can be downgraded to what is supported by the receiver\n
        \  of the offer.\n   An answerer MAY extend the offer with additional media
        format\n   configurations.  However, to enable their usage, in most cases,
        a\n   second offer is required from the offerer to provide the stream\n   property
        parameters that the media sender will use.  This also has\n   the effect that
        the offerer has to be able to receive this media\n   format configuration,
        not only to send it.\n   If an offerer wishes to have non-symmetric capabilities
        between\n   sending and receiving, the offerer can allow asymmetric levels
        via\n   level-asymmetry-allowed being equal to 1.  Alternatively, the offerer\n
        \  could offer different RTP sessions, i.e., different media lines\n   declared
        as \"recvonly\" and \"sendonly\", respectively.  This may have\n   further
        implications on the system and may require additional\n   external semantics
        to associate the two media lines.\n"
      title: 8.2.2.  Usage with the SDP Offer/Answer Model
    - contents:
      - "8.2.3.  Usage in Declarative Session Descriptions\n   When H.264 over RTP
        is offered with SDP in a declarative style, as in\n   Real Time Streaming
        Protocol (RTSP) [27] or Session Announcement\n   Protocol (SAP) [28], the
        following considerations are necessary.\n   o  All parameters capable of indicating
        both stream properties and\n      receiver capabilities are used to indicate
        only stream properties.\n      For example, in this case, the parameter profile-level-id
        declares\n      only the values used by the stream, not the capabilities for\n
        \     receiving streams.  The result of this is that the following\n      interpretation
        of the parameters MUST be used:\n      Declaring actual configuration or stream
        properties:\n         - profile-level-id\n         - packetization-mode\n
        \        - sprop-interleaving-depth\n         - sprop-deint-buf-req\n         -
        sprop-max-don-diff\n         - sprop-init-buf-time\n      Out-of-band transporting
        of parameter sets:\n         - sprop-parameter-sets\n         - sprop-level-parameter-sets\n
        \     Not usable (when present, they SHOULD be ignored):\n         - max-mbps\n
        \        - max-smbps\n         - max-fs\n         - max-cpb\n         - max-dpb\n
        \        - max-br\n         - max-recv-level\n         - redundant-pic-cap\n
        \        - max-rcmd-nalu-size\n         - deint-buf-cap\n         - sar-understood\n
        \        - sar-supported\n         - in-band-parameter-sets\n         - level-asymmetry-allowed\n
        \        - use-level-src-parameter-sets\n   o  A receiver of the SDP is required
        to support all parameters and\n      values of the parameters provided; otherwise,
        the receiver MUST\n      reject (RTSP) or not participate in (SAP) the session.
        \ It falls\n      on the creator of the session to use values that are expected
        to\n      be supported by the receiving application.\n"
      title: 8.2.3.  Usage in Declarative Session Descriptions
    title: 8.2.  SDP Parameters
  - contents:
    - "8.3.  Examples\n   An SDP Offer/Answer exchange wherein both parties are expected
      to\n   both send and receive could look like the following.  Only the media-\n
      \  codec-specific parts of the SDP are shown.  Some lines are wrapped\n   due
      to text constraints.\n      Offerer -> Answerer SDP message:\n      m=video
      49170 RTP/AVP 100 99 98\n      a=rtpmap:98 H264/90000\n      a=fmtp:98 profile-level-id=42A01E;
      packetization-mode=0;\n        sprop-parameter-sets=<parameter sets data#0>\n
      \     a=rtpmap:99 H264/90000\n      a=fmtp:99 profile-level-id=42A01E; packetization-mode=1;\n
      \       sprop-parameter-sets=<parameter sets data#1>\n      a=rtpmap:100 H264/90000\n
      \     a=fmtp:100 profile-level-id=42A01E; packetization-mode=2;\n        sprop-parameter-sets=<parameter
      sets data#2>;\n        sprop-interleaving-depth=45; sprop-deint-buf-req=64000;\n
      \       sprop-init-buf-time=102478; deint-buf-cap=128000\n   The above offer
      presents the same codec configuration in three\n   different packetization formats.
      \ Payload type 98 represents single\n   NALU mode, payload type 99 represents
      non-interleaved mode, and\n   payload type 100 indicates the interleaved mode.
      \ In the interleaved\n   mode case, the interleaving parameters that the offerer
      would use if\n   the answer indicates support for payload type 100 are also
      included.\n   In all three cases, the parameter sprop-parameter-sets conveys
      the\n   initial parameter sets that are required by the answerer when\n   receiving
      a stream from the offerer when this configuration is\n   accepted.  Note that
      the value for sprop-parameter-sets could be\n   different for each payload type.\n
      \     Answerer -> Offerer SDP message:\n      m=video 49170 RTP/AVP 100 99 97\n
      \     a=rtpmap:97 H264/90000\n      a=fmtp:97 profile-level-id=42A01E; packetization-mode=0;\n
      \       sprop-parameter-sets=<parameter sets data#3>\n      a=rtpmap:99 H264/90000\n
      \     a=fmtp:99 profile-level-id=42A01E; packetization-mode=1;\n        sprop-parameter-sets=<parameter
      sets data#4>;\n        max-rcmd-nalu-size=3980\n      a=rtpmap:100 H264/90000\n
      \     a=fmtp:100 profile-level-id=42A01E; packetization-mode=2;\n        sprop-parameter-sets=<parameter
      sets data#5>;\n        sprop-interleaving-depth=60;\n        sprop-deint-buf-req=86000;
      sprop-init-buf-time=156320;\n        deint-buf-cap=128000; max-rcmd-nalu-size=3980\n
      \  As the Offer/Answer negotiation covers both sending and receiving\n   streams,
      an offer indicates the exact parameters for what the offerer\n   is willing
      to receive, whereas the answer indicates the same for what\n   the answerer
      is willing to receive.  In this case, the offerer\n   declared that it is willing
      to receive payload type 98.  The answerer\n   accepts this by declaring an equivalent
      payload type 97; that is, it\n   has identical values for the two parameters
      profile-level-id and\n   packetization-mode (since packetization-mode is equal
      to 0 and sprop-\n   deint-buf-req is not present).  As the offered payload type
      98 is\n   accepted, the answerer needs to store parameter sets included in\n
      \  sprop-parameter-sets=<parameter sets data#0> in case the offer\n   finally
      decides to use this configuration.  In the answer, the\n   answerer includes
      the parameter sets in sprop-parameter-\n   sets=<parameter sets data#3> that
      the answerer would use in the\n   stream sent from the answerer if this configuration
      is finally used.\n   The answerer also accepts the reception of the two configurations\n
      \  that payload types 99 and 100 represent.  Again, the answerer needs\n   to
      store parameter sets included in sprop-parameter-sets=<parameter\n   sets data#1>
      and sprop-parameter-sets=<parameter sets data#2> in case\n   the offer finally
      decides to use either of these two configurations.\n   The answerer provides
      the initial parameter sets for the answerer-to-\n   offerer direction, i.e.,
      the parameter sets in sprop-parameter-\n   sets=<parameter sets data#4> and
      sprop-parameter-sets=<parameter sets\n   data#5>, for payload types 99 and 100,
      respectively, that it will use\n   to send the payload types.  The answerer
      also provides the offerer\n   with its memory limit for de-interleaving operations
      by providing a\n   deint-buf-cap parameter.  This is only useful if the offerer
      decides\n   on making a second offer, where it can take the new value into\n
      \  account.  The max-rcmd-nalu-size indicates that the answerer can\n   efficiently
      process NALUs up to the size of 3980 bytes.  However,\n   there is no guarantee
      that the network supports this size.\n   In the following example, the offer
      is accepted without level\n   downgrading (i.e., the default level, Level 3.0,
      is accepted), and\n   both sprop-parameter-sets and sprop-level-parameter-sets
      are present\n   in the offer.  The answerer must ignore sprop-level-parameter-\n
      \  sets=<parameter sets data#1> and store parameter sets in sprop-\n   parameter-sets=<parameter
      sets data#0> for decoding the incoming NAL\n   unit stream.  The offerer must
      store the parameter sets in sprop-\n   parameter-sets=<parameter sets data#2>
      in the answer for decoding the\n   incoming NAL unit stream.  Note that in this
      example, parameter sets\n   in sprop-parameter-sets=<parameter sets data#2>
      must be associated\n   with Level 3.0.\n      Offer SDP:\n      m=video 49170
      RTP/AVP 98\n      a=rtpmap:98 H264/90000\n      a=fmtp:98 profile-level-id=42A01E;
      //Baseline profile, Level 3.0\n        packetization-mode=1;\n        sprop-parameter-sets=<parameter
      sets data#0>;\n        sprop-level-parameter-sets=<parameter sets data#1>\n
      \     Answer SDP:\n      m=video 49170 RTP/AVP 98\n      a=rtpmap:98 H264/90000\n
      \     a=fmtp:98 profile-level-id=42A01E; //Baseline profile, Level 3.0\n        packetization-mode=1;\n
      \       sprop-parameter-sets=<parameter sets data#2>\n   In the following example,
      the offer (Baseline profile, Level 1.1) is\n   accepted with level downgrading
      (the accepted level is Level 1b), and\n   both sprop-parameter-sets and sprop-level-parameter-sets
      are present\n   in the offer.  The answerer must ignore sprop-parameter-\n   sets=<parameter
      sets data#0> and all parameter sets not for the\n   accepted level (Level 1b)
      in sprop-level-parameter-sets=<parameter\n   sets data#1> and must store parameter
      sets for the accepted level\n   (Level 1b) in sprop-level-parameter-sets=<parameter
      sets data#1> for\n   decoding the incoming NAL unit stream.  The offerer must
      store the\n   parameter sets in sprop-parameter-sets=<parameter sets data#2>
      in the\n   answer for decoding the incoming NAL unit stream.  Note that in this\n
      \  example, parameter sets in sprop-parameter-sets=<parameter sets\n   data#2>
      must be associated with Level 1b.\n      Offer SDP:\n      m=video 49170 RTP/AVP
      98\n      a=rtpmap:98 H264/90000\n      a=fmtp:98 profile-level-id=42A00B; //Baseline
      profile, Level 1.1\n        packetization-mode=1;\n        sprop-parameter-sets=<parameter
      sets data#0>;\n        sprop-level-parameter-sets=<parameter sets data#1>\n
      \     Answer SDP:\n      m=video 49170 RTP/AVP 98\n      a=rtpmap:98 H264/90000\n
      \     a=fmtp:98 profile-level-id=42B00B; //Baseline profile, Level 1b\n        packetization-mode=1;\n
      \       sprop-parameter-sets=<parameter sets data#2>;\n        use-level-src-parameter-sets=1\n
      \  In the following example, the offer (Baseline profile, Level 1.1) is\n   accepted
      with level downgrading (the accepted level is Level 1b), and\n   both sprop-parameter-sets
      and sprop-level-parameter-sets are present\n   in the offer.  However, the answerer
      is a legacy RFC 3984\n   implementation and does not understand sprop-level-parameter-sets;\n
      \  hence, it does not include use-level-src-parameter-sets (which the\n   answerer
      does not understand either) in the answer.  Therefore, the\n   answerer must
      ignore both sprop-parameter-sets=<parameter sets\n   data#0> and sprop-level-parameter-sets=<parameter
      sets data#1>, and\n   the offerer must transport parameter sets in-band.\n      Offer
      SDP:\n      m=video 49170 RTP/AVP 98\n      a=rtpmap:98 H264/90000\n      a=fmtp:98
      profile-level-id=42A00B; //Baseline profile, Level 1.1\n        packetization-mode=1;\n
      \       sprop-parameter-sets=<parameter sets data#0>;\n        sprop-level-parameter-sets=<parameter
      sets data#1>\n      Answer SDP:\n      m=video 49170 RTP/AVP 98\n      a=rtpmap:98
      H264/90000\n      a=fmtp:98 profile-level-id=42B00B; //Baseline profile, Level
      1b\n        packetization-mode=1\n   In the following example, the offer is
      accepted without level\n   downgrading, and sprop-parameter-sets is present
      in the offer.\n   Parameter sets in sprop-parameter-sets=<parameter sets data#0>
      must\n   be stored and used by the encoder of the offerer and the decoder of\n
      \  the answerer, and parameter sets in sprop-parameter-sets=<parameter\n   sets
      data#1> must be used by the encoder of the answerer and the\n   decoder of the
      offerer.  Note that sprop-parameter-sets=<parameter\n   sets data#0> is basically
      independent of sprop-parameter-\n   sets=<parameter sets data#1>.\n      Offer
      SDP:\n      m=video 49170 RTP/AVP 98\n      a=rtpmap:98 H264/90000\n      a=fmtp:98
      profile-level-id=42A01E; //Baseline profile, Level 3.0\n        packetization-mode=1;\n
      \       sprop-parameter-sets=<parameter sets data#0>\n      Answer SDP:\n      m=video
      49170 RTP/AVP 98\n      a=rtpmap:98 H264/90000\n      a=fmtp:98 profile-level-id=42A01E;
      //Baseline profile, Level 3.0\n        packetization-mode=1;\n        sprop-parameter-sets=<parameter
      sets data#1>\n   In the following example, the offer is accepted without level\n
      \  downgrading, and neither sprop-parameter-sets nor sprop-level-\n   parameter-sets
      is present in the offer, meaning that there is no out-\n   of-band transmission
      of parameter sets, which then have to be\n   transported in-band.\n      Offer
      SDP:\n      m=video 49170 RTP/AVP 98\n      a=rtpmap:98 H264/90000\n      a=fmtp:98
      profile-level-id=42A01E; //Baseline profile, Level 3.0\n        packetization-mode=1\n
      \     Answer SDP:\n      m=video 49170 RTP/AVP 98\n      a=rtpmap:98 H264/90000\n
      \     a=fmtp:98 profile-level-id=42A01E; //Baseline profile, Level 3.0\n        packetization-mode=1\n
      \  In the following example, the offer is accepted with level\n   downgrading
      and sprop-parameter-sets is present in the offer.  As\n   sprop-parameter-sets=<parameter
      sets data#0> contains level_idc\n   indicating Level 3.0, it therefore cannot
      be used, as the answerer\n   wants Level 2.0, and must be ignored by the answerer,
      and in-band\n   parameter sets must be used.\n      Offer SDP:\n      m=video
      49170 RTP/AVP 98\n      a=rtpmap:98 H264/90000\n      a=fmtp:98 profile-level-id=42A01E;
      //Baseline profile, Level 3.0\n        packetization-mode=1;\n        sprop-parameter-sets=<parameter
      sets data#0>\n      Answer SDP:\n      m=video 49170 RTP/AVP 98\n      a=rtpmap:98
      H264/90000\n      a=fmtp:98 profile-level-id=42A014; //Baseline profile, Level
      2.0\n        packetization-mode=1\n   In the following example, the offer is
      also accepted with level\n   downgrading, and neither sprop-parameter-sets nor
      sprop-level-\n   parameter-sets is present in the offer, meaning that there
      is no out-\n   of-band transmission of parameter sets, which then have to be\n
      \  transported in-band.\n      Offer SDP:\n      m=video 49170 RTP/AVP 98\n
      \     a=rtpmap:98 H264/90000\n      a=fmtp:98 profile-level-id=42A01E; //Baseline
      profile, Level 3.0\n        packetization-mode=1\n      Answer SDP:\n      m=video
      49170 RTP/AVP 98\n      a=rtpmap:98 H264/90000\n      a=fmtp:98 profile-level-id=42A014;
      //Baseline profile, Level 2.0\n        packetization-mode=1\n   In the following
      example, the offer is accepted with level upgrading,\n   and neither sprop-parameter-sets
      nor sprop-level-parameter-sets is\n   present in the offer or the answer, meaning
      that there is no out-of-\n   band transmission of parameter sets, which then
      have to be\n   transported in-band.  The level to use in the offerer-to-answerer\n
      \  direction is Level 3.0, and the level to use in the answerer-to-\n   offerer
      direction is Level 2.0.  The answerer is allowed to send at\n   any level up
      to and including Level 2.0, and the offerer is allowed\n   to send at any level
      up to and including Level 3.0.\n      Offer SDP:\n      m=video 49170 RTP/AVP
      98\n      a=rtpmap:98 H264/90000\n      a=fmtp:98 profile-level-id=42A014; //Baseline
      profile, Level 2.0\n        packetization-mode=1; level-asymmetry-allowed=1\n
      \     Answer SDP:\n      m=video 49170 RTP/AVP 98\n      a=rtpmap:98 H264/90000\n
      \     a=fmtp:98 profile-level-id=42A01E; //Baseline profile, Level 3.0\n        packetization-mode=1;
      level-asymmetry-allowed=1\n   In the following example, the offerer is a Multipoint
      Control Unit\n   (MCU) in a topology like Topo-Video-switch-MCU [29], offering\n
      \  parameter sets received (using out-of-band transport) from three\n   other
      participants (B, C, and D) and receiving parameter sets from\n   the participant
      A, which is the answerer.  The participants are\n   identified by their values
      of canonical name (CNAME), which are\n   mapped to different SSRC values.  The
      same codec configuration is\n   used by all four participants.  The participant
      A stores and\n   associates the parameter sets included in <parameter sets data#B>,\n
      \  <parameter sets data#C>, and <parameter sets data#D> to participants\n   B,
      C, and D, respectively, and uses <parameter sets data#B> for\n   decoding NAL
      units carried in RTP packets originating from\n   participant B only, uses <parameter
      sets data#C> for decoding NAL\n   units carried in RTP packets originating from
      participant C only, and\n   uses <parameter sets data#D> for decoding NAL units
      carried in RTP\n   packets originating from participant D only.\n      Offer
      SDP:\n      m=video 49170 RTP/AVP 98\n      a=ssrc:SSRC-B cname:CNAME-B\n      a=ssrc:SSRC-C
      cname:CNAME-C\n      a=ssrc:SSRC-D cname:CNAME-D\n      a=ssrc:SSRC-B fmtp:98\n
      \       sprop-parameter-sets=<parameter sets data#B>\n      a=ssrc:SSRC-C fmtp:98\n
      \       sprop-parameter-sets=<parameter sets data#C>\n      a=ssrc:SSRC-D fmtp:98\n
      \       sprop-parameter-sets=<parameter sets data#D>\n      a=rtpmap:98 H264/90000\n
      \     a=fmtp:98 profile-level-id=42A01E; //Baseline profile, Level 3.0\n        packetization-mode=1\n
      \     Answer SDP:\n      m=video 49170 RTP/AVP 98\n      a=ssrc:SSRC-A cname:CNAME-A\n
      \     a=ssrc:SSRC-A fmtp:98\n        sprop-parameter-sets=<parameter sets data#A>\n
      \     a=rtpmap:98 H264/90000\n      a=fmtp:98 profile-level-id=42A01E; //Baseline
      profile, Level 3.0\n        packetization-mode=1\n"
    title: 8.3.  Examples
  - contents:
    - "8.4.  Parameter Set Considerations\n   The H.264 parameter sets are a fundamental
      part of the video codec\n   and vital to its operation (see Section 1.2).  Due
      to their\n   characteristics and their importance for the decoding process,
      lost\n   or erroneously transmitted parameter sets can hardly be concealed\n
      \  locally at the receiver.  A reference to a corrupt parameter set\n   normally
      has fatal results to the decoding process.  Corruption could\n   occur, for
      example, due to the erroneous transmission or loss of a\n   parameter set NAL
      unit but also due to the untimely transmission of a\n   parameter set update.
      \ A parameter set update refers to a change of\n   at least one parameter in
      a picture parameter set or sequence\n   parameter set for which the picture
      parameter set or sequence\n   parameter set identifier remains unchanged.  Therefore,
      the following\n   recommendations are provided as a guideline for the implementer
      of\n   the RTP sender.\n   Parameter set NALUs can be transported using three
      different\n   principles:\n   A.  Using a session control protocol (out-of-band)
      prior to the\n       actual RTP session.\n   B.  Using a session control protocol
      (out-of-band) during an ongoing\n       RTP session.\n   C.  Within the RTP
      packet stream in the payload (in-band) during an\n       ongoing RTP session.\n
      \  It is recommended to implement principles A and B within a session\n   control
      protocol.  SIP and SDP can be used as described in the SDP\n   Offer/Answer
      model and in the previous sections of this memo.\n   Section 8.2.2 includes
      a detailed discussion on transport of\n   parameter sets in-band or out-of-band
      in SDP Offer/Answer using media\n   type parameters sprop-parameter-sets, sprop-level-parameter-sets,\n
      \  use-level-src-parameter-sets, and in-band-parameter-sets.  This\n   section
      contains guidelines on how principles A and B should be\n   implemented within
      session control protocols.  It is independent of\n   the particular protocol
      used.  Principle C is supported by the RTP\n   payload format defined in this
      specification.  There are topologies\n   like Topo-Video-switch-MCU [29] for
      which the use of principle C may\n   be desirable.\n   If in-band signaling
      of parameter sets is used, the picture and\n   sequence parameter set NALUs
      SHOULD be transmitted in the RTP payload\n   using a reliable method of delivering
      of RTP (see below), as a loss\n   of a parameter set of either type will likely
      prevent decoding of a\n   considerable portion of the corresponding RTP packet
      stream.\n   If in-band signaling of parameter sets is used, the sender SHOULD\n
      \  take the error characteristics into account and use mechanisms to\n   provide
      a high probability for delivering the parameter sets\n   correctly.  Mechanisms
      that increase the probability for a correct\n   reception include packet repetition,
      FEC, and retransmission.  The\n   use of an unreliable, out-of-band control
      protocol has similar\n   disadvantages as the in-band signaling (possible loss)
      and, in\n   addition, may also lead to difficulties in the synchronization (see\n
      \  below).  Therefore, it is NOT RECOMMENDED.\n   Parameter sets MAY be added
      or updated during the lifetime of a\n   session using principles B and C.  It
      is required that parameter sets\n   be present at the decoder prior to the NAL
      units that refer to them.\n   Update or addition of parameter sets can result
      in further problems;\n   therefore, the following recommendations should be
      considered.\n   -  When parameter sets are added or updated, care SHOULD be
      taken to\n      ensure that any parameter set is delivered prior to its usage.\n
      \     When new parameter sets are added, previously unused parameter set\n      identifiers
      are used.  It is common that no synchronization is\n      present between out-of-band
      signaling and in-band traffic.  If\n      out-of-band signaling is used, it
      is RECOMMENDED that a sender not\n      start sending NALUs requiring the added
      or updated parameter sets\n      prior to acknowledgement of delivery from the
      signaling protocol.\n   -  When parameter sets are updated, the following synchronization\n
      \     issue should be taken into account.  When overwriting a parameter\n      set
      at the receiver, the sender has to ensure that the parameter\n      set in question
      is not needed by any NALU present in the network\n      or receiver buffers.
      \ Otherwise, decoding with a wrong parameter\n      set may occur.  To lessen
      this problem, it is RECOMMENDED either\n      to overwrite only those parameter
      sets that have not been used for\n      a sufficiently long time (to ensure
      that all related NALUs have\n      been consumed) or to add a new parameter
      set instead (which may\n      have negative consequences for the efficiency
      of the video\n      coding).\n         Informative note: In some topologies
      like Topo-Video-switch-\n         MCU [29], the origin of the whole set of parameter
      sets may\n         come from multiple sources that may use non-unique parameter\n
      \        set identifiers.  In this case, an offer may overwrite an\n         existing
      parameter set if no other mechanism that enables\n         uniqueness of the
      parameter sets in the out-of-band channel\n         exists.\n   -  In a multiparty
      session, one participant MUST associate parameter\n      sets coming from different
      sources with the source identification\n      whenever possible, e.g., by conveying
      out-of-band transported\n      parameter sets, as different sources typically
      use independent\n      parameter set identifier value spaces.\n   -  Adding
      or modifying parameter sets by using both principles B and\n      C in the same
      RTP session may lead to inconsistencies of the\n      parameter sets because
      of the lack of synchronization between the\n      control and the RTP channel.
      \ Therefore, principles B and C MUST\n      NOT both be used in the same session
      unless sufficient\n      synchronization can be provided.\n   In some scenarios
      (e.g., when only the subset of this payload format\n   specification corresponding
      to H.241 is used) or topologies, it is\n   not possible to employ out-of-band
      parameter set transmission.  In\n   this case, parameter sets have to be transmitted
      in-band.  Here, the\n   synchronization with the non-parameter-set-data in the
      bitstream is\n   implicit, but the possibility of a loss has to be taken into
      account.\n   The loss probability should be reduced using the mechanisms discussed\n
      \  above.  In case a loss of a parameter set is detected, recovery may\n   be
      achieved using a Decoder Refresh Point procedure, for example,\n   using RTCP
      feedback Full Intra Request (FIR) [30].  Two example\n   Decoder Refresh Point
      procedures are provided in the informative\n   Section 8.5.\n   -  When parameter
      sets are initially provided using principle A and\n      then later added or
      updated in-band (principle C), there is a risk\n      associated with updating
      the parameter sets delivered out-of-band.\n      If receivers miss some in-band
      updates (for example, because of a\n      loss or a late tune-in), those receivers
      attempt to decode the\n      bitstream using outdated parameters.  It is therefore
      RECOMMENDED\n      that parameter set IDs be partitioned between the out-of-band
      and\n      in-band parameter sets.\n"
    title: 8.4.  Parameter Set Considerations
  - contents:
    - "8.5.  Decoder Refresh Point Procedure Using In-Band Transport of\n      Parameter
      Sets (Informative)\n   When a sender with a video encoder according to [1] receives
      a\n   request for a decoder refresh point, the encoder shall enter the fast\n
      \  update mode by using one of the procedures specified in Sections\n   8.5.1
      or 8.5.2.  The procedure in Section 8.5.1 is the preferred\n   response in a
      lossless transmission environment.  Both procedures\n   satisfy the requirement
      to enter the fast update mode for H.264 video\n   encoding.\n"
    - contents:
      - "8.5.1.  IDR Procedure to Respond to a Request for a Decoder Refresh\n        Point\n
        \  This section gives one possible way to respond to a request for a\n   decoder
        refresh point.\n   The encoder shall, in the order presented here:\n   1)
        Immediately prepare to send an IDR picture.\n   2) Send a sequence parameter
        set to be used by the IDR picture to be\n      sent.  The encoder may optionally
        also send other sequence\n      parameter sets.\n   3) Send a picture parameter
        set to be used by the IDR picture to be\n      sent.  The encoder may optionally
        also send other picture\n      parameter sets.\n   4) Send the IDR picture.\n
        \  5) From this point forward in time, send any other sequence or\n      picture
        parameter sets that have not yet been sent in this\n      procedure, prior
        to their reference by any NAL unit, regardless of\n      whether such parameter
        sets were previously sent prior to\n      receiving the request for a decoder
        refresh point.  As needed,\n      such parameter sets may be sent in a batch,
        one at a time, or in\n      any combination of these two methods.  Parameter
        sets may be\n      re-sent at any time for redundancy.  Caution should be
        taken when\n      parameter set updates are present, as described above in
        Section\n      8.4.\n"
      title: 8.5.1.  IDR Procedure to Respond to a Request for a Decoder Refresh
    - contents:
      - "8.5.2.  Gradual Recovery Procedure to Respond to a Request for a Decoder\n
        \       Refresh Point\n   This section gives another possible way to respond
        to a request for a\n   decoder refresh point.\n   The encoder shall, in the
        order presented here:\n   1) Send a recovery point SEI message (see Sections
        D.1.7 and D.2.7 of\n      [1]).\n   2) Repeat any sequence and picture parameter
        sets that were sent\n      before the recovery point SEI message, prior to
        their reference by\n      a NAL unit.\n   The encoder shall ensure that the
        decoder has access to all reference\n   pictures for inter prediction of pictures
        at or after the recovery\n   point, which is indicated by the recovery point
        SEI message, in\n   output order, assuming that the transmission from now
        on is error-\n   free.\n   The value of the recovery_frame_cnt syntax element
        in the recovery\n   point SEI message should be small enough to ensure a fast
        recovery.\n   As needed, such parameter sets may be re-sent in a batch, one
        at a\n   time, or in any combination of these two methods.  Parameter sets
        may\n   be re-sent at any time for redundancy.  Caution should be taken when\n
        \  parameter set updates are present, as described above in Section 8.4.\n"
      title: 8.5.2.  Gradual Recovery Procedure to Respond to a Request for a Decoder
    title: 8.5.  Decoder Refresh Point Procedure Using In-Band Transport of
  title: 8.  Payload Format Parameters
- contents:
  - "9.  Security Considerations\n   RTP packets using the payload format defined
    in this specification\n   are subject to the security considerations discussed
    in the RTP\n   specification [5] and in any appropriate RTP profile (for example,\n
    \  [16]).  This implies that confidentiality of the media streams is\n   achieved
    by encryption, for example, through the application of SRTP\n   [26].  Because
    the data compression used with this payload format is\n   applied end-to-end,
    any encryption needs to be performed after\n   compression.  A potential denial-of-service
    threat exists for data\n   encodings using compression techniques that have non-uniform\n
    \  receiver-end computational load.  The attacker can inject\n   pathological
    datagrams into the stream that are complex to decode and\n   that cause the receiver
    to be overloaded.  H.264 is particularly\n   vulnerable to such attacks, as it
    is extremely simple to generate\n   datagrams containing NAL units that affect
    the decoding process of\n   many future NAL units.  Therefore, the usage of data
    origin\n   authentication and data integrity protection of at least the RTP\n
    \  packet is RECOMMENDED, for example, with SRTP [26].\n   Note that the appropriate
    mechanism to ensure confidentiality and\n   integrity of RTP packets and their
    payloads is very dependent on the\n   application and on the transport and signaling
    protocols employed.\n   Thus, although SRTP is given as an example above, other
    possible\n   choices exist.\n   Decoders MUST exercise caution with respect to
    the handling of user\n   data SEI messages, particularly if they contain active
    elements, and\n   MUST restrict their domain of applicability to the presentation\n
    \  containing the stream.\n   End-to-end security with either authentication,
    integrity, or\n   confidentiality protection will prevent a MANE from performing
    media-\n   aware operations other than discarding complete packets.  In the case\n
    \  of confidentiality protection, it will even be prevented from\n   discarding
    packets in a media-aware way.  To be allowed to perform\n   its operations, a
    MANE is required to be a trusted entity that is\n   included in the security context
    establishment.\n"
  title: 9.  Security Considerations
- contents:
  - "10.  Congestion Control\n   Congestion control for RTP SHALL be used in accordance
    with RFC 3550\n   [5] and with any applicable RTP profile, e.g., RFC 3551 [16].
    \ If\n   best-effort service is being used, an additional requirement is that\n
    \  users of this payload format MUST monitor packet loss to ensure that\n   the
    packet loss rate is within acceptable parameters.  Packet loss is\n   considered
    acceptable if a TCP flow across the same network path, and\n   experiencing the
    same network conditions, would achieve an average\n   throughput, measured on
    a reasonable timescale, that is not less than\n   the RTP flow is achieving.  This
    condition can be satisfied by\n   implementing congestion control mechanisms to
    adapt the transmission\n   rate (or the number of layers subscribed for a layered
    multicast\n   session) or by arranging for a receiver to leave the session if
    the\n   loss rate is unacceptably high.\n   The bitrate adaptation necessary for
    obeying the congestion control\n   principle is easily achievable when real-time
    encoding is used.\n   However, when pre-encoded content is being transmitted,
    bandwidth\n   adaptation requires the availability of more than one coded\n   representation
    of the same content, at different bitrates, or the\n   existence of non-reference
    pictures or sub-sequences [22] in the\n   bitstream.  The switching between the
    different representations can\n   normally be performed in the same RTP session,
    e.g., by employing a\n   concept known as SI/SP slices of the Extended profile
    or by switching\n   streams at IDR picture boundaries.  Only when non-downgradable\n
    \  parameters (such as the profile part of the profile/level ID) are\n   required
    to be changed does it become necessary to terminate and\n   restart the media
    stream.  This may be accomplished by using a\n   different RTP payload type.\n
    \  MANEs MAY follow the suggestions outlined in Section 7.3 and remove\n   certain
    unusable packets from the packet stream when that stream was\n   damaged due to
    previous packet losses.  This can help reduce the\n   network load in certain
    special cases.\n"
  title: 10.  Congestion Control
- contents:
  - "11.  IANA Considerations\n   The H264 media subtype name specified by RFC 3984
    has been updated as\n   defined in Section 8.1 of this memo.\n"
  title: 11.  IANA Considerations
- contents:
  - "12.  Informative Appendix: Application Examples\n   This payload specification
    is very flexible in its use, in order to\n   cover the extremely wide application
    space anticipated for H.264.\n   However, this great flexibility also makes it
    difficult for an\n   implementer to decide on a reasonable packetization scheme.
    \ Some\n   information on how to apply this specification to real-world\n   scenarios
    is likely to appear in the form of academic publications\n   and a test model
    software and description in the near future.\n   However, some preliminary usage
    scenarios are described here as well.\n"
  - contents:
    - "12.1.  Video Telephony According to Annex A of ITU-T Recommendation\n       H.241\n
      \  H.323-based video telephony systems that use H.264 as an optional\n   video
      compression scheme are required to support Annex A of H.241 [3]\n   as a packetization
      scheme.  The packetization mechanism defined in\n   this Annex is technically
      identical with a small subset of this\n   specification.\n   When a system operates
      according to Annex A of H.241, parameter set\n   NAL units are sent in-band.
      \ Only single NAL unit packets are used.\n   Many such systems are not sending
      IDR pictures regularly, but only\n   when required by user interaction or by
      control protocol means, e.g.,\n   when switching between video channels in a
      Multipoint Control Unit or\n   for error recovery requested by feedback.\n"
    title: 12.1.  Video Telephony According to Annex A of ITU-T Recommendation
  - contents:
    - "12.2.  Video Telephony, No Slice Data Partitioning, No NAL Unit\n       Aggregation\n
      \  The RTP part of this scheme is implemented and tested (though not the\n   control-protocol
      part; see below).\n   In most real-world video telephony applications, picture
      parameters\n   such as picture size or optional modes never change during the\n
      \  lifetime of a connection.  Therefore, all necessary parameter sets\n   (usually
      only one) are sent as a side effect of the capability\n   exchange/announcement
      process, e.g., according to the SDP syntax\n   specified in Section 8.2 of this
      document.  As all necessary\n   parameter set information is established before
      the RTP session\n   starts, there is no need for sending any parameter set NAL
      units.\n   Slice data partitioning is not used either.  Thus, the RTP packet\n
      \  stream basically consists of NAL units that carry single coded\n   slices.\n
      \  The encoder chooses the size of coded slice NAL units so that they\n   offer
      the best performance.  Often, this is done by adapting the\n   coded slice size
      to the MTU size of the IP network.  For small\n   picture sizes, this may result
      in a one-picture-per-one-packet\n   strategy.  Intra refresh algorithms clean
      up the loss of packets and\n   the resulting drift-related artifacts.\n"
    title: 12.2.  Video Telephony, No Slice Data Partitioning, No NAL Unit
  - contents:
    - "12.3.  Video Telephony, Interleaved Packetization Using NAL Unit\n       Aggregation\n
      \  This scheme allows better error concealment and is used in\n   H.263-based
      designs using RFC 4629 packetization [11].  It has been\n   implemented, and
      good results were reported [13].\n   The VCL encoder codes the source picture
      so that all macroblocks\n   (MBs) of one MB line are assigned to one slice.
      \ All slices with even\n   MB row addresses are combined into one STAP, and
      all slices with odd\n   MB row addresses are combined into another.  Those STAPs
      are\n   transmitted as RTP packets.  The establishment of the parameter sets\n
      \  is performed as discussed above.\n   Note that the use of STAPs is essential
      here, as the high number of\n   individual slices (18 for a Common Intermediate
      Format (CIF) picture)\n   would lead to unacceptably high IP/UDP/RTP header
      overhead (unless\n   the source coding tool FMO is used, which is not assumed
      in this\n   scenario).  Furthermore, some wireless video transmission systems,\n
      \  such as H.324M and the IP-based video telephony specified in 3GPP,\n   are
      likely to use relatively small transport packet size.  For\n   example, a typical
      MTU size of H.223 AL3 SDU is around 100 bytes\n   [17].  Coding individual slices
      according to this packetization\n   scheme provides further advantage in communication
      between wired and\n   wireless networks, as individual slices are likely to
      be smaller than\n   the preferred maximum packet size of wireless systems.  Consequently,\n
      \  a gateway can convert the STAPs used in a wired network into several\n   RTP
      packets with only one NAL unit, which are preferred in a wireless\n   network,
      and vice versa.\n"
    title: 12.3.  Video Telephony, Interleaved Packetization Using NAL Unit
  - contents:
    - "12.4.  Video Telephony with Data Partitioning\n   This scheme has been implemented
      and has been shown to offer good\n   performance, especially at higher packet
      loss rates [13].\n   Data partitioning is known to be useful only when some
      form of\n   unequal error protection is available.  Normally, in single-session\n
      \  RTP environments, even error characteristics are assumed; that is,\n   the
      packet loss probability of all packets of the session is the same\n   statistically.
      \ However, there are means to reduce the packet loss\n   probability of individual
      packets in an RTP session.  A FEC packet\n   according to RFC 5109 [18], for
      example, specifies which media\n   packets are associated with the FEC packet.\n
      \  In all cases, the incurred overhead is substantial but is in the same\n   order
      of magnitude as the number of bits that have otherwise been\n   spent for intra
      information.  However, this mechanism does not add\n   any delay to the system.\n
      \  Again, the complete parameter set establishment is performed through\n   control
      protocol means.\n"
    title: 12.4.  Video Telephony with Data Partitioning
  - contents:
    - "12.5.  Video Telephony or Streaming with FUs and Forward Error\n       Correction\n
      \  This scheme has been implemented and has been shown to provide good\n   performance,
      especially at higher packet loss rates [19].\n   The most efficient means to
      combat packet losses for scenarios where\n   retransmissions are not applicable
      is forward error correction (FEC).\n   Although application layer, end-to-end
      use of FEC is often less\n   efficient than a FEC-based protection of individual
      links (especially\n   when links of different characteristics are in the transmission\n
      \  path), application layer, end-to-end FEC is unavoidable in some\n   scenarios.
      \ RFC 5109 [18] provides means to use generic, application\n   layer, end-to-end
      FEC in packet loss environments.  A binary forward\n   error correcting code
      is generated by applying the XOR operation to\n   the bits at the same bit position
      in different packets.  The binary\n   code can be specified by the parameters
      (n,k), in which k is the\n   number of information packets used in the connection
      and n is the\n   total number of packets generated for k information packets;
      that is,\n   n-k parity packets are generated for k information packets.\n   When
      a code is used with parameters (n,k) within the RFC 5109\n   framework, the
      following properties are well known:\n   a) If applied over one RTP packet,
      RFC 5109 provides only packet\n      repetition.\n   b) RFC 5109 is most bitrate
      efficient if XOR-connected packets have\n      equal length.\n   c) At the same
      packet loss probability p and for a fixed k, the\n      greater the value of
      n, the smaller the residual error probability\n      becomes.  For example,
      for a packet loss probability of 10%, k=1,\n      and n=2, the residual error
      probability is about 1%, whereas for\n      n=3, the residual error probability
      is about 0.1%.\n   d) At the same packet loss probability p and for a fixed
      code rate\n      k/n, the greater the value of n, the smaller the residual error\n
      \     probability becomes.  For example, at a packet loss probability of\n      p=10%,
      k=1, and n=2, the residual error rate is about 1%, whereas\n      for an extended
      Golay code with k=12 and n=24, the residual error\n      rate is about 0.01%.\n
      \  For applying RFC 5109 in combination with H.264 baseline-coded video\n   without
      using FUs, several options might be considered:\n   1) The video encoder produces
      NAL units for which each video frame is\n      coded in a single slice.  Applying
      FEC, one could use a simple\n      code, e.g., (n=2, k=1).  That is, each NAL
      unit would basically\n      just be repeated.  The disadvantage is obviously
      the bad code\n      performance according to d), above, and the low flexibility,
      as\n      only (n, k=1) codes can be used.\n   2) The video encoder produces
      NAL units for which each video frame is\n      encoded in one or more consecutive
      slices.  Applying FEC, one\n      could use a better code, e.g., (n=24, k=12),
      over a sequence of\n      NAL units.  Depending on the number of RTP packets
      per frame, a\n      loss may introduce a significant delay, which is reduced
      when more\n      RTP packets are used per frame.  Packets of completely different\n
      \     lengths might also be connected, which decreases bitrate\n      efficiency
      according to b), above.  However, with some care and\n      for slices of 1
      kb or larger, similar length (100-200 bytes\n      difference) may be produced,
      which will not lower the bit\n      efficiency catastrophically.\n   3) The
      video encoder produces NAL units, for which a certain frame\n      contains
      k slices of possibly almost equal length.  Then, applying\n      FEC, a better
      code, e.g., (n=24, k=12), can be used over the\n      sequence of NAL units
      for each frame.  The delay compared to that\n      of 2), above, may be reduced,
      but several disadvantages are\n      obvious.  First, the coding efficiency
      of the encoded video is\n      lowered significantly, as slice-structured coding
      reduces intra-\n      frame prediction and additional slice overhead is necessary.\n
      \     Second, pre-encoded content or, when operating over a gateway, the\n      video
      is usually not appropriately coded with k slices such that\n      FEC can be
      applied.  Finally, the encoding of video producing k\n      slices of equal
      length is not straightforward and might require\n      more than one encoding
      pass.\n   Many of the mentioned disadvantages can be avoided by applying FUs
      in\n   combination with FEC.  Each NAL unit can be split into any number of\n
      \  FUs of basically equal length; therefore, FEC, with a reasonable k\n   and
      n, can be applied, even if the encoder made no effort to produce\n   slices
      of equal length.  For example, a coded slice NAL unit\n   containing an entire
      frame can be split to k FUs, and a parity check\n   code (n=k+1, k) can be applied.
      \ However, this has the disadvantage\n   that unless all created fragments can
      be recovered, the whole slice\n   will be lost.  Thus, a larger section is lost
      than would be if the\n   frame had been split into several slices.\n   The presented
      technique makes it possible to achieve good\n   transmission error tolerance,
      even if no additional source coding\n   layer redundancy (such as periodic intra
      frames) is present.\n   Consequently, the same coded video sequence can be used
      to achieve\n   the maximum compression efficiency and quality over error-free\n
      \  transmission and for transmission over error-prone networks.\n   Furthermore,
      the technique allows the application of FEC to pre-\n   encoded sequences without
      adding delay.  In this case, pre-encoded\n   sequences that are not encoded
      for error-prone networks can still be\n   transmitted almost reliably without
      adding extensive delays.  In\n   addition, FUs of equal length result in a bitrate
      efficient use of\n   RFC 5109.\n   If the error probability depends on the length
      of the transmitted\n   packet (e.g., in case of mobile transmission [15]), the
      benefits of\n   applying FUs with FEC are even more obvious.  Basically, the\n
      \  flexibility of the size of FUs allows appropriate FEC to be applied\n   for
      each NAL unit and unequal error protection of NAL units.\n   When FUs and FEC
      are used, the incurred overhead is substantial but\n   is in the same order
      of magnitude as the number of bits that have to\n   be spent for intra-coded
      macroblocks if no FEC is applied.  In [19],\n   it was shown that the overall
      performance of the FEC-based approach\n   enhanced quality when using the same
      error rate and same overall\n   bitrate, including the overhead.\n"
    title: 12.5.  Video Telephony or Streaming with FUs and Forward Error
  - contents:
    - "12.6.  Low Bitrate Streaming\n   This scheme has been implemented with H.263
      and non-standard RTP\n   packetization and has given good results [20].  There
      is no technical\n   reason why similarly good results could not be achievable
      with H.264.\n   In today's Internet streaming, some of the offered bitrates
      are\n   relatively low in order to allow terminals with dial-up modems to\n
      \  access the content.  In wired IP networks, relatively large packets,\n   say
      500 - 1500 bytes, are preferred to smaller and more frequently\n   occurring
      packets in order to reduce network congestion.  Moreover,\n   use of large packets
      decreases the amount of RTP/UDP/IP header\n   overhead.  For low bitrate video,
      the use of large packets means that\n   sometimes up to few pictures should
      be encapsulated in one packet.\n   However, the loss of a packet including many
      coded pictures would\n   have drastic consequences for visual quality, as there
      is practically\n   no way to conceal the loss of an entire picture other than
      repeating\n   the previous one.  One way to construct relatively large packets
      and\n   maintain possibilities for successful loss concealment is to\n   construct
      MTAPs that contain interleaved slices from several\n   pictures.  An MTAP should
      not contain spatially adjacent slices from\n   the same picture or spatially
      overlapping slices from any picture.\n   If a packet is lost, it is likely that
      a lost slice is surrounded by\n   spatially adjacent slices of the same picture
      and spatially\n   corresponding slices of the temporally previous and succeeding\n
      \  pictures.  Consequently, concealment of the lost slice is likely to\n   be
      relatively successful.\n"
    title: 12.6.  Low Bitrate Streaming
  - contents:
    - "12.7.  Robust Packet Scheduling in Video Streaming\n   Robust packet scheduling
      has been implemented with MPEG-4 Part 2 and\n   simulated in a wireless streaming
      environment [21].  There is no\n   technical reason why similar or better results
      could not be\n   achievable with H.264.\n   Streaming clients typically have
      a receiver buffer that is capable of\n   storing a relatively large amount of
      data.  Initially, when a\n   streaming session is established, a client does
      not start playing the\n   stream back immediately.  Rather, it typically buffers
      the incoming\n   data for a few seconds.  This buffering helps maintain continuous\n
      \  playback, as, in case of occasional increased transmission delays or\n   network
      throughput drops, the client can decode and play buffered\n   data.  Otherwise,
      without initial buffering, the client has to freeze\n   the display, stop decoding,
      and wait for incoming data.  The\n   buffering is also necessary for either
      automatic or selective\n   retransmission in any protocol level.  If any part
      of a picture is\n   lost, a retransmission mechanism may be used to resend the
      lost data.\n   If the retransmitted data is received before its scheduled decoding\n
      \  or playback time, the loss is recovered perfectly.  Coded pictures\n   can
      be ranked according to their importance in the subjective quality\n   of the
      decoded sequence.  For example, non-reference pictures, such\n   as conventional
      B pictures, are subjectively least important, as\n   their absence does not
      affect decoding of any other pictures.  In\n   addition to non-reference pictures,
      the ITU-T H.264 | ISO/IEC\n   14496-10 standard includes a temporal scalability
      method called sub-\n   sequences [22].  Subjective ranking can also be made
      on coded slice\n   data partition or slice group basis.  Coded slices and coded
      slice\n   data partitions that are subjectively the most important can be sent\n
      \  earlier than their decoding order indicates, whereas coded slices and\n   coded
      slice data partitions that are subjectively the least important\n   can be sent
      later than their natural coding order indicates.\n   Consequently, any retransmitted
      parts of the most important slices\n   and coded slice data partitions are more
      likely to be received before\n   their scheduled decoding or playback time compared
      to the least\n   important slices and slice data partitions.\n"
    title: 12.7.  Robust Packet Scheduling in Video Streaming
  title: '12.  Informative Appendix: Application Examples'
- contents:
  - '13.  Informative Appendix: Rationale for Decoding Order Number

    '
  - contents:
    - "13.1.  Introduction\n   The Decoding Order Number (DON) concept was introduced
      mainly to\n   enable efficient multi-picture slice interleaving (see Section
      12.6)\n   and robust packet scheduling (see Section 12.7).  In both of these\n
      \  applications, NAL units are transmitted out of decoding order.  DON\n   indicates
      the decoding order of NAL units and should be used in the\n   receiver to recover
      the decoding order.  Example use cases for\n   efficient multi-picture slice
      interleaving and for robust packet\n   scheduling are given in Sections 13.2
      and 13.3, respectively.\n   Section 13.4 describes the benefits of the DON concept
      in error\n   resiliency achieved by redundant coded pictures.  Section 13.5\n
      \  summarizes considered alternatives to DON and justifies why DON was\n   chosen
      for this RTP payload specification.\n"
    title: 13.1.  Introduction
  - contents:
    - "13.2.  Example of Multi-Picture Slice Interleaving\n   An example of multi-picture
      slice interleaving follows.  A subset of\n   a coded video sequence is depicted
      below in output order.  R denotes\n   a reference picture, N denotes a non-reference
      picture, and the\n   number indicates a relative output time.\n      ... R1
      N2 R3 N4 R5 ...\n   The decoding order of these pictures from left to right
      is as\n   follows:\n      ... R1 R3 N2 R5 N4 ...\n   The NAL units of pictures
      R1, R3, N2, R5, and N4 are marked with a\n   DON equal to 1, 2, 3, 4, and 5,
      respectively.\n   Each reference picture consists of three slice groups that
      are\n   scattered as follows (a number denotes the slice group number for\n
      \  each macroblock in a Quarter Common Intermediate Format (QCIF)\n   frame):\n
      \     0 1 2 0 1 2 0 1 2 0 1\n      2 0 1 2 0 1 2 0 1 2 0\n      1 2 0 1 2 0
      1 2 0 1 2\n      0 1 2 0 1 2 0 1 2 0 1\n      2 0 1 2 0 1 2 0 1 2 0\n      1
      2 0 1 2 0 1 2 0 1 2\n      0 1 2 0 1 2 0 1 2 0 1\n      2 0 1 2 0 1 2 0 1 2
      0\n      1 2 0 1 2 0 1 2 0 1 2\n   For the sake of simplicity, we assume that
      all the macroblocks of a\n   slice group are included in one slice.  Three MTAPs
      are constructed\n   from three consecutive reference pictures so that each MTAP
      contains\n   three aggregation units, each of which contains all the macroblocks\n
      \  from one slice group.  The first MTAP contains slice group 0 of\n   picture
      R1, slice group 1 of picture R3, and slice group 2 of picture\n   R5.  The second
      MTAP contains slice group 1 of picture R1, slice\n   group 2 of picture R3,
      and slice group 0 of picture R5.  The third\n   MTAP contains slice group 2
      of picture R1, slice group 0 of picture\n   R3, and slice group 1 of picture
      R5.  Each non-reference picture is\n   encapsulated into an STAP-B.\n   Consequently,
      the transmission order of NAL units is the following:\n      R1, slice group
      0, DON 1, carried in MTAP,RTP SN: N\n      R3, slice group 1, DON 2, carried
      in MTAP,RTP SN: N\n      R5, slice group 2, DON 4, carried in MTAP,RTP SN: N\n
      \     R1, slice group 1, DON 1, carried in MTAP,RTP SN: N+1\n      R3, slice
      group 2, DON 2, carried in MTAP,RTP SN: N+1\n      R5, slice group 0, DON 4,
      carried in MTAP,RTP SN: N+1\n      R1, slice group 2, DON 1, carried in MTAP,RTP
      SN: N+2\n      R3, slice group 1, DON 2, carried in MTAP,RTP SN: N+2\n      R5,
      slice group 0, DON 4, carried in MTAP,RTP SN: N+2\n      N2, DON 3, carried
      in STAP-B, RTP SN: N+3\n      N4, DON 5, carried in STAP-B, RTP SN: N+4\n   The
      receiver is able to organize the NAL units back in decoding order\n   based
      on the value of DON associated with each NAL unit.\n   If one of the MTAPs is
      lost, the spatially adjacent and temporally\n   co-located macroblocks are received
      and can be used to conceal the\n   loss efficiently.  If one of the STAPs is
      lost, the effect of the\n   loss does not propagate temporally.\n"
    title: 13.2.  Example of Multi-Picture Slice Interleaving
  - contents:
    - "13.3.  Example of Robust Packet Scheduling\n   An example of robust packet
      scheduling follows.  The communication\n   system used in the example consists
      of the following components in\n   the order that the video is processed from
      source to sink:\n   o camera and capturing\n   o pre-encoding buffer\n   o encoder\n
      \  o encoded picture buffer\n   o transmitter\n   o transmission channel\n   o
      receiver\n   o receiver buffer\n   o decoder\n   o decoded picture buffer\n
      \  o display\n   The video communication system used in this example operates
      as\n   follows.  Note that processing of the video stream happens gradually\n
      \  and at the same time in all components of the system.  The source\n   video
      sequence is shot and captured to a pre-encoding buffer.  The\n   pre-encoding
      buffer can be used to order pictures from sampling order\n   to encoding order
      or to analyze multiple uncompressed frames for\n   bitrate control purposes,
      for example.  In some cases, the pre-\n   encoding buffer may not exist; instead,
      the sampled pictures are\n   encoded right away.  The encoder encodes pictures
      from the pre-\n   encoding buffer and stores the output (i.e., coded pictures)
      to the\n   encoded picture buffer.  The transmitter encapsulates the coded\n
      \  pictures from the encoded picture buffer to transmission packets and\n   sends
      them to a receiver through a transmission channel.  The\n   receiver stores
      the received packets to the receiver buffer.  The\n   receiver buffering process
      typically includes buffering for\n   transmission delay jitter.  The receiver
      buffer can also be used to\n   recover correct decoding order of coded data.
      \ The decoder reads\n   coded data from the receiver buffer and produces decoded
      pictures as\n   output into the decoded picture buffer.  The decoded picture
      buffer\n   is used to recover the output (or display) order of pictures.\n   Finally,
      pictures are displayed.\n   In the following example figures, I denotes an IDR
      picture, R denotes\n   a reference picture, N denotes a non-reference picture,
      and the\n   number after I, R, or N indicates the sampling time relative to
      the\n   previous IDR picture in decoding order.  Values below the sequence of\n
      \  pictures indicate scaled system clock timestamps.  The system clock\n   is
      initialized arbitrarily in this example, and time runs from left\n   to right.
      \ Each I, R, and N picture is mapped into the same timeline\n   compared to
      the previous processing step, if any, assuming that\n   encoding, transmission,
      and decoding take no time.  Thus, events\n   happening at the same time are
      located in the same column throughout\n   all example figures.\n   A subset
      of a sequence of coded pictures is depicted below in\n   sampling order.\n       ...
      \ N58 N59 I00 N01 N02 R03 N04 N05 R06 ... N58 N59 I00 N01 ...\n       ... --|---|---|---|---|---|---|---|---|-
      ... -|---|---|---|- ...\n       ...  58  59  60  61  62  63  64  65  66  ...
      128 129 130 131 ...\n       Figure 16.  Sequence of pictures in sampling order\n
      \  The sampled pictures are buffered in the pre-encoding buffer to\n   arrange
      them in encoding order.  In this example, we assume that the\n   non-reference
      pictures are predicted from both the previous and the\n   next reference picture
      in output order, except for the non-reference\n   pictures immediately preceding
      an IDR picture, which are predicted\n   only from the previous reference picture
      in output order.  Thus, the\n   pre-encoding buffer has to contain at least
      two pictures, and the\n   buffering causes a delay of two picture intervals.
      \ The output of the\n   pre-encoding buffering process and the encoding (and
      decoding) order\n   of the pictures are as follows:\n       ... N58 N59 I00
      R03 N01 N02 R06 N04 N05 ...\n       ... -|---|---|---|---|---|---|---|---|-
      ...\n       ... 60  61  62  63  64  65  66  67  68  ...\n       Figure 17.  Reordered
      pictures in the pre-encoding buffer\n   The encoder or the transmitter can set
      the value of DON for each\n   picture to a value of DON for the previous picture
      in decoding order\n   plus one.\n   For the sake of simplicity, let us assume
      that:\n   o  the frame rate of the sequence is constant,\n   o  each picture
      consists of only one slice,\n   o  each slice is encapsulated in a single NAL
      unit packet,\n   o  there is no transmission delay, and\n   o  pictures are
      transmitted at constant intervals (that is, 1 /\n      (frame rate)).\n   When
      pictures are transmitted in decoding order, they are received as\n   follows:\n
      \      ... N58 N59 I00 R03 N01 N02 R06 N04 N05 ...\n       ... -|---|---|---|---|---|---|---|---|-
      ...\n       ... 60  61  62  63  64  65  66  67  68  ...\n       Figure 18.  Received
      pictures in decoding order\n   The OPTIONAL sprop-interleaving-depth media type
      parameter is set to\n   0, as the transmission (or reception) order is identical
      to the\n   decoding order.\n   Initially, the decoder has to buffer for one
      picture interval in its\n   decoded picture buffer to organize pictures from
      decoding order to\n   output order, as depicted below:\n       ... N58 N59 I00
      N01 N02 R03 N04 N05 R06 ...\n       ... -|---|---|---|---|---|---|---|---|-
      ...\n       ... 61  62  63  64  65  66  67  68  69  ...\n       Figure 19.  Output
      order\n   The amount of required initial buffering in the decoded picture\n
      \  buffer can be signaled in the buffering period SEI message or with\n   the
      num_reorder_frames syntax element of H.264 video usability\n   information.
      \ num_reorder_frames indicates the maximum number of\n   frames, complementary
      field pairs, or non-paired fields that precede\n   any frame, complementary
      field pair, or non-paired field in the\n   sequence in decoding order and that
      follow it in output order.  For\n   the sake of simplicity, we assume that num_reorder_frames
      is used to\n   indicate the initial buffer in the decoded picture buffer.  In
      this\n   example, num_reorder_frames is equal to 1.\n   It can be observed that
      if the IDR picture I00 is lost during\n   transmission and a retransmission
      request is issued when the value of\n   the system clock is 62, there is one
      picture interval of time (until\n   the system clock reaches timestamp 63) to
      receive the retransmitted\n   IDR picture I00.\n   Let us then assume that IDR
      pictures are transmitted two frame\n   intervals earlier than their decoding
      position; that is, the pictures\n   are transmitted as follows:\n       ...
      \ I00 N58 N59 R03 N01 N02 R06 N04 N05 ...\n       ... --|---|---|---|---|---|---|---|---|-
      ...\n       ...  62  63  64  65  66  67  68  69  70  ...\n       Figure 20.
      \ Interleaving: Early IDR pictures in sending order\n   The OPTIONAL sprop-interleaving-depth
      media type parameter is set\n   equal to 1 according to its definition.  (The
      value of sprop-\n   interleaving-depth in this example can be derived as follows:
      picture\n   I00 is the only picture preceding picture N58 or N59 in transmission\n
      \  order and following it in decoding order.  Except for pictures I00,\n   N58,
      and N59, the transmission order is the same as the decoding\n   order of pictures.
      \ As a coded picture is encapsulated into exactly\n   one NAL unit, the value
      of sprop-interleaving-depth is equal to the\n   maximum number of pictures preceding
      any picture in transmission\n   order and following the picture in decoding
      order).\n   The receiver buffering process contains two pictures at a time\n
      \  according to the value of the sprop-interleaving-depth parameter and\n   orders
      pictures from the reception order to the correct decoding\n   order based on
      the value of DON associated with each picture.  The\n   output of the receiver
      buffering process is as follows:\n       ... N58 N59 I00 R03 N01 N02 R06 N04
      N05 ...\n       ... -|---|---|---|---|---|---|---|---|- ...\n       ... 63  64
      \ 65  66  67  68  69  70  71  ...\n       Figure 21.  Interleaving: Receiver
      buffer\n   Again, an initial buffering delay of one picture interval is needed\n
      \  to organize pictures from decoding order to output order, as depicted\n   below:\n
      \       ... N58 N59 I00 N01 N02 R03 N04 N05 ...\n        ... -|---|---|---|---|---|---|---|-
      ...\n        ... 64  65  66  67  68  69  70  71  ...\n        Figure 22.  Interleaving:
      Receiver buffer after reordering\n   Note that the maximum delay that IDR pictures
      can undergo during\n   transmission, including possible application, transport,
      or link\n   layer retransmission, is equal to three picture intervals.  Thus,
      the\n   loss resiliency of IDR pictures is improved in systems supporting\n
      \  retransmission compared to the case in which pictures are transmitted\n   in
      their decoding order.\n"
    title: 13.3.  Example of Robust Packet Scheduling
  - contents:
    - "13.4.  Robust Transmission Scheduling of Redundant Coded Slices\n   A redundant
      coded picture is a coded representation of a picture or a\n   part of a picture
      that is not used in the decoding process if the\n   corresponding primary coded
      picture is correctly decoded.  There\n   should be no noticeable difference
      between any area of the decoded\n   primary picture and a corresponding area
      that would result from\n   application of the H.264 decoding process for any
      redundant picture\n   in the same access unit.  A redundant coded slice is a
      coded slice\n   that is a part of a redundant coded picture.\n   Redundant coded
      pictures can be used to provide unequal error\n   protection in error-prone
      video transmission.  If a primary coded\n   representation of a picture is decoded
      incorrectly, a corresponding\n   redundant coded picture can be decoded.  Examples
      of applications and\n   coding techniques using the redundant codec picture
      feature include\n   the video redundancy coding [23] and the protection of \"key
      pictures\"\n   in multicast streaming [24].\n   One property of many error-prone
      video communications systems is that\n   transmission errors are often bursty.
      \ Therefore, they may affect\n   more than one consecutive transmission packet
      in transmission order.\n   In low bitrate video communication, it is relatively
      common for an\n   entire coded picture to be encapsulated into one transmission
      packet.\n   Consequently, a primary coded picture and the corresponding redundant\n
      \  coded pictures may be transmitted in consecutive packets in\n   transmission
      order.  To make the transmission scheme more tolerant of\n   bursty transmission
      errors, it is beneficial to transmit the primary\n   coded picture and redundant
      coded picture separated by more than a\n   single packet.  The DON concept enables
      this.\n"
    title: 13.4.  Robust Transmission Scheduling of Redundant Coded Slices
  - contents:
    - "13.5.  Remarks on Other Design Possibilities\n   The slice header syntax structure
      of the H.264 coding standard\n   contains the frame_num syntax element that
      can indicate the decoding\n   order of coded frames.  However, the usage of
      the frame_num syntax\n   element is not feasible or desirable to recover the
      decoding order,\n   due to the following reasons:\n   o  The receiver is required
      to parse at least one slice header per\n      coded picture (before passing
      the coded data to the decoder).\n   o  Coded slices from multiple coded video
      sequences cannot be\n      interleaved, as the frame number syntax element is
      reset to 0 in\n      each IDR picture.\n   o  The coded fields of a complementary
      field pair share the same\n      value of the frame_num syntax element.  Thus,
      the decoding order\n      of the coded fields of a complementary field pair
      cannot be\n      recovered based on the frame_num syntax element or any other\n
      \     syntax element of the H.264 coding syntax.\n   The RTP payload format
      for transport of MPEG-4 elementary streams\n   [25] enables interleaving of
      access units and transmission of\n   multiple access units in the same RTP packet.
      \ An access unit is\n   specified in the H.264 coding standard to comprise all
      NAL units\n   associated with a primary coded picture according to Subclause\n
      \  7.4.1.2 of [1].  Consequently, slices of different pictures cannot be\n   interleaved,
      and the multi-picture slice interleaving technique (see\n   Section 12.6) for
      improved error resilience cannot be used.\n"
    title: 13.5.  Remarks on Other Design Possibilities
  title: '13.  Informative Appendix: Rationale for Decoding Order Number'
- contents:
  - "14.  Changes from RFC 3984\n   Following is the list of technical changes (including
    bug fixes) from\n   RFC 3984.  Besides this list of technical changes, numerous
    editorial\n   changes have been made, but not documented in this section.  Note\n
    \  that Section 8.2.2 is where much of the important changes in this\n   memo
    occurs and deserves particular attention.\n   1)  In Sections 5.4, 5.5, 6.2, 6.3,
    and 6.4, removed that the\n       packetization mode in use may be signaled by
    external means.\n   2)  In Section 7.2.2, changed the sentence\n       There are
    N VCL NAL units in the de-interleaving buffer.\n       to\n       There are N
    or more VCL NAL units in the de-interleaving buffer.\n   3)  In Section 8.1, the
    semantics of sprop-init-buf-time (paragraph\n       2), changed the sentence\n
    \      The parameter is the maximum value of (transmission time of a NAL\n       unit
    - decoding time of the NAL unit), assuming reliable and\n       instantaneous
    transmission, the same timeline for transmission\n       and decoding, and that
    decoding starts when the first packet\n       arrives.\n       to\n       The
    parameter is the maximum value of (decoding time of the NAL\n       unit - transmission
    time of a NAL unit), assuming reliable and\n       instantaneous transmission,
    the same timeline for transmission\n       and decoding, and that decoding starts
    when the first packet\n       arrives.\n   4)  Added media type parameters max-smbps,
    sprop-level-parameter-\n       sets, use-level-src-parameter-sets, in-band-parameter-sets,
    sar-\n       understood, and sar-supported.\n   5)  In Section 8.1, removed the
    specification of parameter-add.\n       Other descriptions of parameter-add (in
    Sections 8.2 and 8.4)\n       were also removed.\n   6)  In Section 8.1, added
    a constraint to sprop-parameter-sets such\n       that it can only contain parameter
    sets for the same profile and\n       level as indicated by profile-level-id.\n
    \  7)  In Section 8.2.1, added that sprop-parameter-sets and sprop-\n       level-parameter-sets
    may be either included in the \"a=fmtp\" line\n       of SDP or conveyed using
    the \"fmtp\" source attribute as specified\n       in Section 6.3 of [9].\n   8)
    \ In Section 8.2.2, removed sprop-deint-buf-req from being part of\n       the
    media format configuration in usage with the SDP Offer/Answer\n       model.\n
    \  9)  In Section 8.2.2, made it clear that level is downgradable in the\n       SDP
    Offer/Answer model, i.e., the use of the level part of\n       profile-level-id
    does not need to be symmetric (the level\n       included in the answer can be
    lower than or equal to the level\n       included in the offer).\n   10) In Section
    8.2.2, removed that the capability parameters may be\n       used to declare encoding
    capabilities.\n   11) In Section 8.2.2, added rules on how to use sprop-parameter-sets\n
    \      and sprop-level-parameter-sets for out-of-band transport of\n       parameter
    sets, with or without level downgrading.\n   12) In Section 8.2.2, clarified the
    rules of using the media type\n       parameters with SDP Offer/Answer for multicast.\n
    \  13) In Section 8.2.2, completed and corrected the list of how\n       different
    media type parameters shall be interpreted in the\n       different combinations
    of offer or answer and direction\n       attribute.\n   14) In Section 8.4, changed
    the text such that both out-of-band and\n       in-band transport of parameter
    sets are allowed, and neither is\n       recommended or required.\n   15) Added
    Section 8.5 (informative) providing example methods for\n       decoder refresh
    to handle parameter set losses.\n   16) Added media type parameters max-recv-level
    and level-asymmetry-\n       allowed and adjusted associated text and examples
    for level\n       upgrade and asymmetry.\n"
  title: 14.  Changes from RFC 3984
- contents:
  - "15.  Backward Compatibility to RFC 3984\n   The current document is a revision
    of RFC 3984 and obsoletes it.  The\n   technical changes relative to RFC 3984
    are listed in Section 14.\n   This section addresses the backward compatibility
    issues.\n   It should be noted that for the majority of cases, there will be no\n
    \  compatibility issues for legacy implementations per RFC 3984 and new\n   implementations
    per this document to interwork.  Compatibility issues\n   may only occur when
    both of the following conditions are true: 1)\n   legacy implementations and new
    implementations are interworking, and\n   2) parameter sets are transported out-of-band.
    \ When such\n   compatibility issues occur, it is easy to debug and find the reason\n
    \  for the incompatibility using the following analyses.\n   Items 1, 2, 3, 7,
    9, 10, 12, and 13 are bug-fix types of changes and\n   do not incur any backward
    compatibility issues.\n   Item 4 (addition of six new media type parameters) does
    not incur any\n   backward compatibility issues for SDP Offer/Answer-based\n   applications,
    as legacy RFC 3984 receivers ignore these parameters,\n   and it is fine for legacy
    RFC 3984 senders not to use these\n   parameters as they are optional.  However,
    there is a backward\n   compatibility issue for declarative-usage-based applications
    (only\n   for the parameter sprop-level-parameter-sets as the other five\n   parameters
    are not usable in declarative usage).  For example,\n   declarative-usage-based
    applications using RTSP and SAP have a\n   backward compatibility issue because
    the SDP receiver per RFC 3984\n   cannot accept a session for which the SDP includes
    an unrecognized\n   parameter.  Therefore, the RTSP or SAP server may have to
    prepare two\n   sets of streams, one for legacy RFC 3984 receivers and one for\n
    \  receivers according to this memo.\n   Items 5, 6, and 11 are related to out-of-band
    transport of parameter\n   sets.  There are following backward compatibility issues.\n
    \  1)  When a legacy sender per RFC 3984 includes parameter sets for a\n       level
    different than the default level indicated by profile-\n       level-id to sprop-parameter-sets,
    the parameter value of sprop-\n       parameter-sets is invalid to the receiver
    per this memo;\n       therefore, the session may be rejected.\n   2)  In SDP
    Offer/Answer between a legacy offerer per RFC 3984 and an\n       answerer per
    this memo, when the answerer includes in the answer\n       parameter sets that
    are not a superset of the parameter sets\n       included in the offer, the parameter
    value of sprop-parameter-\n       sets is invalid to the offerer, and the session
    may not be\n       initiated properly (related to change item 11).\n   3)  When
    one endpoint A per this memo includes in-band-parameter-sets\n       equal to
    1, the other side B per RFC 3984 does not understand\n       that it must transmit
    parameter sets in-band, and B may still\n       exclude parameter sets in the
    in-band stream it is sending.\n       Consequently, endpoint A cannot decode the
    stream it receives.\n   Item 7 (allowance of conveying sprop-parameter-sets and
    sprop-level-\n   parameter-sets using the \"fmtp\" source attribute as specified
    in\n   Section 6.3 of [9]) is similar to item 4.  It does not incur any\n   backward
    compatibility issues for SDP Offer/Answer-based\n   applications, as legacy RFC
    3984 receivers ignore the \"fmtp\" source\n   attribute, and it is fine for legacy
    RFC 3984 senders not to use the\n   \"fmtp\" source attribute as it is optional.
    \ However, there is a\n   backward compatibility issue for SDP declarative-usage-based\n
    \  applications, e.g., those using RTSP and SAP, because the SDP\n   receiver
    per RFC 3984 cannot accept a session for which the SDP\n   includes an unrecognized
    parameter (i.e., the \"fmtp\" source\n   attribute).  Therefore, the RTSP or SAP
    server may have to prepare\n   two sets of streams, one for legacy RFC 3984 receivers
    and one for\n   receivers according to this memo.\n   Item 14 does not incur any
    backward compatibility issues, as out-of-\n   band transport of parameter sets
    is still allowed.\n   Item 15 does not incur any backward compatibility issues,
    as the\n   added Section 8.5 is informative.\n   Item 16 does not create any backward
    compatibility issues as the\n   handling of the default level is the same if either
    end is RFC 3984\n   compliant, and, furthermore, RFC-3984-compliant ends would
    simply\n   ignore the new media type parameters, if present.\n"
  title: 15.  Backward Compatibility to RFC 3984
- contents:
  - "16.  Acknowledgements\n   Stephan Wenger, Miska Hannuksela, Thomas Stockhammer,
    Magnus\n   Westerlund, and David Singer are thanked as the authors of RFC 3984.\n
    \  Dave Lindbergh, Philippe Gentric, Gonzalo Camarillo, Gary Sullivan,\n   Joerg
    Ott, and Colin Perkins are thanked for careful review during\n   the development
    of RFC 3984. Stephen Botzko, Magnus Westerlund, Alex\n   Eleftheriadis, Thomas
    Schierl, Tom Taylor, Ali Begen, Aaron Wells,\n   Stuart Taylor, Robert Sparks,
    Dan Romascanu, and Niclas Comstedt are\n   thanked for their valuable comments
    and input during the development\n   of this memo.\n"
  title: 16.  Acknowledgements
- contents:
  - '17.  References

    '
  - contents:
    - "17.1.  Normative References\n   [1]   ITU-T Recommendation H.264, \"Advanced
      video coding for generic\n         audiovisual services\", March 2010.\n   [2]
      \  ISO/IEC International Standard 14496-10:2008.\n   [3]   ITU-T Recommendation
      H.241, \"Extended video procedures and\n         control signals for H.300-series
      terminals\", May 2006.\n   [4]   Bradner, S., \"Key words for use in RFCs to
      Indicate Requirement\n         Levels\", BCP 14, RFC 2119, March 1997.\n   [5]
      \  Schulzrinne, H., Casner, S., Frederick, R., and V. Jacobson,\n         \"RTP:
      A Transport Protocol for Real-Time Applications\", STD 64,\n         RFC 3550,
      July 2003.\n   [6]   Handley, M., Jacobson, V., and C. Perkins, \"SDP: Session\n
      \        Description Protocol\", RFC 4566, July 2006.\n   [7]   Josefsson, S.,
      \"The Base16, Base32, and Base64 Data Encodings\",\n         RFC 4648, October
      2006.\n   [8]   Rosenberg, J. and H. Schulzrinne, \"An Offer/Answer Model with\n
      \        Session Description Protocol (SDP)\", RFC 3264, June 2002.\n   [9]
      \  Lennox, J., Ott, J., and T. Schierl, \"Source-Specific Media\n         Attributes
      in the Session Description Protocol (SDP)\", RFC\n         5576, June 2009.\n"
    title: 17.1.  Normative References
  - contents:
    - "17.2.  Informative References\n   [10]  Luthra, A., Sullivan, G.J., and T.
      Wiegand (eds.),\n         \"Introduction to the special issue on the H.264/AVC
      video\n         coding standard\", IEEE Transactions on Circuits and Systems
      for\n         Video Technology, Vol. 13, No. 7, July 2003.\n   [11]  Ott, J.,
      Bormann, C., Sullivan, G., Wenger, S., and R. Even,\n         Ed., \"RTP Payload
      Format for ITU-T Rec. H.263 Video\", RFC 4629,\n         January 2007.\n   [12]
      \ ISO/IEC International Standard 14496-2:2004.\n   [13]  Wenger, S., \"H.264/AVC
      over IP\", IEEE Transaction on Circuits\n         and Systems for Video Technology,
      Vol. 13, No. 7, July 2003.\n   [14]  Wenger, S., \"H.26L over IP: The IP-Network
      Adaptation Layer\",\n         Proceedings Packet Video Workshop, April 2002.\n
      \  [15]  Stockhammer, T., Hannuksela, M.M., and S. Wenger, \"H.26L/JVT\n         Coding
      Network Abstraction Layer and IP-Based Transport\", IEEE\n         International
      Conference on Image Processing (ICIP 2002),\n         Rochester, NY, September
      2002.\n   [16]  Schulzrinne, H. and S. Casner, \"RTP Profile for Audio and Video\n
      \        Conferences with Minimal Control\", STD 65, RFC 3551, July 2003.\n
      \  [17]  ITU-T Recommendation H.223, \"Multiplexing protocol for low bit\n         rate
      multimedia communication\", July 2001.\n   [18]  Li, A., Ed., \"RTP Payload
      Format for Generic Forward Error\n         Correction\", RFC 5109, December
      2007.\n   [19]  Stockhammer, T., Wiegand, T., Oelbaum, T., and F. Obermeier,\n
      \        \"Video Coding and Transport Layer Techniques for H.264/AVC-\n         Based
      Transmission over Packet-Lossy Networks\", IEEE\n         International Conference
      on Image Processing (ICIP 2003),\n         Barcelona, Spain, September 2003.\n
      \  [20]  Varsa, V. and M. Karczewicz, \"Slice interleaving in compressed\n         video
      packetization\", Packet Video Workshop 2000.\n   [21]  Kang, S.H. and A. Zakhor,
      \"Packet scheduling algorithm for\n         wireless video streaming\", Packet
      Video Workshop 2002.\n   [22]  Hannuksela, M.M., \"Enhanced Concept of GOP\",
      JVT-B042,\n         available http://ftp3.itu.int/av-arch/video-site/0201_Gen/JVT-\n
      \        B042.doc, January 2002.\n   [23]  Wenger, S., \"Video Redundancy Coding
      in H.263+\", 1997\n         International Workshop on Audio-Visual Services
      over Packet\n         Networks, September 1997.\n   [24]  Wang, Y.-K., Hannuksela,
      M.M., and M. Gabbouj, \"Error Resilient\n         Video Coding Using Unequally
      Protected Key Pictures\", in Proc.\n         International Workshop VLBV03,
      September 2003.\n   [25]  van der Meer, J., Mackie, D., Swaminathan, V., Singer,
      D., and\n         P. Gentric, \"RTP Payload Format for Transport of MPEG-4\n
      \        Elementary Streams\", RFC 3640, November 2003.\n   [26]  Baugher, M.,
      McGrew, D., Naslund, M., Carrara, E., and K.\n         Norrman, \"The Secure
      Real-time Transport Protocol (SRTP)\", RFC\n         3711, March 2004.\n   [27]
      \ Schulzrinne, H., Rao, A., and R. Lanphier, \"Real Time Streaming\n         Protocol
      (RTSP)\", RFC 2326, April 1998.\n   [28]  Handley, M., Perkins, C., and E. Whelan,
      \"Session Announcement\n         Protocol\", RFC 2974, October 2000.\n   [29]
      \ Westerlund, M. and S. Wenger, \"RTP Topologies\", RFC 5117,\n         January
      2008.\n   [30]  Wenger, S., Chandra, U., Westerlund, M., and B. Burman, \"Codec\n
      \        Control Messages in the RTP Audio-Visual Profile with Feedback\n         (AVPF)\",
      RFC 5104, February 2008.\n"
    title: 17.2.  Informative References
  title: 17.  References
- contents:
  - "Authors' Addresses\n   Ye-Kui Wang\n   Huawei Technologies\n   400 Crossing Blvd,
    2nd Floor\n   Bridgewater, NJ 08807\n   USA\n   Phone: +1-908-541-3518\n   EMail:
    yekui.wang@huawei.com\n   Roni Even\n   Huawei Technologies\n   14 David Hamelech\n
    \  Tel Aviv 64953\n   Israel\n   Phone: +972-545481099\n   EMail: even.roni@huawei.com\n
    \  Tom Kristensen\n   TANDBERG\n   Philip Pedersens vei 22\n   N-1366 Lysaker\n
    \  Norway\n   Phone: +47 67125125\n   EMail: tom.kristensen@tandberg.com, tomkri@ifi.uio.no\n
    \  Randell Jesup\n   WorldGate Communications\n   3800 Horizon Blvd, Suite #103\n
    \  Trevose, PA 19053-4947\n   USA\n   Phone: +1-215-354-5166\n   EMail: rjesup@wgate.com,
    randell_ietf@jesup.org\n"
  title: Authors' Addresses
