Simple Authentication and Security Layer (SASL)
This document defines a profile of the Simple Authentication and Security Layer (SASL) for the Post Office Protocol (POP3).
This extension allows a POP3 client to indicate an authentication mechanism to the server, perform an authentication protocol exchange, and optionally negotiate a security layer for subsequent protocol interactions during this session.
This document seeks to consolidate the information related to POP3 AUTH into a single document.
To this end, this document obsoletes and replaces RFC 1734, and updates the information contained in Section 6.3 of RFC 2449.
AUTH command (see [RFC1734]) has suffered several problems in its specification.
The first is that it was very similar to a SASL framework defined by [RFC4422], but pre dated the initial SASL specification.
It was therefore missing some key components, such as a way to list the available authentication mechanisms.
Later, [RFC2449] attempted to remedy this situation by adding the CAPA command and allowing an initial client response with the AUTH command, but problems remained in the clarity of the specification of how the initial client response was to be handled.
Together, this means creating a full POP3 AUTH implementation requires an understanding of material in at least five different documents (and [RFC3206] provides additional response codes that are useful during authentication).
This document attempts to combine the information in [RFC1734] and [RFC2449] to simplify this situation.
Additionally, it aims to clarify and update the older specifications where appropriate.
Conventions Used in This Document
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "
SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in [RFC2119].
In examples, "C:" and "S:" indicate lines sent by the client and server respectively.
Formal syntax is defined by [RFC4234].
This section supersedes the definition of the SASL Capability in section 6.3 of [RFC2449].
Supported SASL Mechanisms Added commands:
None Announced states / possible differences:
both / no Commands valid in states:
This document and [RFC4422] Discussion:
The SASL capability permits the use of the AUTH command (as defined in Section 4 of this document) to begin a SASL negotiation (as defined in [RFC4422]).
The argument to the SASL capability is a space separated list of SASL mechanisms that are supported.
If a server either does not support the CAPA command or does not advertise the SASL capability, clients SHOULD NOT attempt the AUTH command.
If a client does attempt the AUTH command in such a situation, it MUST NOT supply the client initial response parameter (for backwards compatibility with [RFC1734]).
Note that the list of available mechanisms MAY change after a successful STLS command (see [RFC2595]).
However, as required by [RFC2449], implementations MUST continue to include the SASL capability even after a successful AUTH command has been completed (even though no further AUTH commands may be issued).
pop.example.com BlurdyBlurp POP3 server ready C: CAPA S:
OK List of capabilities follows S:
SASL PLAIN DIGEST MD5 GSSAPI ANONYMOUS S:
IMPLEMENTATION BlurdyBlurp POP3 server S: .
The AUTH Command AUTH mechanism [initial response]
A string identifying a SASL authentication mechanism.
initial response: An optional initial client response, as defined in Section 3 of [RFC4422].
After an AUTH command has been successfully completed, no more AUTH commands may be issued in the same session.
After a successful AUTH command completes, a server MUST reject any further AUTH commands with an  ERR reply.
The AUTH command may only be given during the AUTHORIZATION state.
The AUTH command initiates a SASL authentication exchange between the client and the server.
The client identifies the SASL mechanism to use with the first parameter of the AUTH command.
If the server supports the requested authentication mechanism, it performs the SASL exchange to authenticate the user.
Optionally, it also negotiates a security layer for subsequent protocol interactions during this session.
If the requested authentication mechanism is not supported, the server rejects the AUTH command with an  ERR reply.
The authentication protocol exchange consists of a series of server challenges and client responses that are specific to the chosen SASL mechanism.
This line MUST NOT contain any text other than the BASE64 encoded challenge.
A client response consists of a line containing a string encoded as Base64.
If the server receives such a response, it MUST reject the AUTH command by sending an  ERR reply.
The optional initial response argument to the AUTH command is used to save a round trip when using authentication mechanisms that support an initial client response.
If the initial response argument is omitted and the chosen mechanism requires an initial client response, the server MUST proceed by issuing an empty challenge, as defined in Section 3 of [RFC4422].
It MUST NOT contain any other data.
For the purposes of the initial client response, the 255 octet limit on the length of a single command, defined in Section 4 of [RFC2449], still applies.
If specifying an initial response would cause the AUTH command to exceed this length, the client MUST NOT use the initial response parameter (and must proceed instead by sending its initial response after an empty challenge from the server, as in Section 3 of [RFC4422]).
This indicates that the response is present, but contains no data.
If the client uses an initial response argument to the AUTH command with a SASL mechanism that does not support an initial client send, the server MUST reject the AUTH command with an  ERR reply.
If the server cannot Base64 decode a client response, it MUST reject the AUTH command with an  ERR reply.
In particular, servers and clients MUST reject (and not ignore)
Excepting the initial client response, these BASE64 strings may be of arbitrary length, depending on the authentication mechanism in use.
Clients and servers MUST be able to handle the largest encoded challenges and responses generated by the authentication mechanisms they support.
This requirement is independent of any line length limitations the client or server may have in other parts of its protocol implementation.
If the server is unable to authenticate the client, it MUST reject the AUTH command with an  ERR reply.
Should the client successfully complete the exchange, the server issues a  OK reply.
Additionally, upon success, the POP3 session enters the TRANSACTION state.
The authorization identity generated by the SASL exchange is a simple username, and SHOULD use the SASLprep profile (see [RFC4013]) of the StringPrep algorithm (see [RFC3454]) to prepare these names for matching.
If preparation of the authorization identity fails or results in an empty string (unless it was transmitted as the empty string), the server MUST fail the authentication.
If a security layer is negotiated during the SASL exchange, it takes effect for the client on the octet immediately following the CRLF that concludes the last response generated by the client.
For the server, it takes effect immediately following the CRLF of its success reply.
When a security layer takes effect, the server MUST discard any knowledge previously obtained from the client, which was not obtained from the SASL negotiation itself.
Likewise, the client MUST discard any knowledge obtained from the server, such as the list of available POP3 service extensions.
When both Transport Layer Security (TLS) (see [RFC4346]) and SASL security layers are in effect, the TLS encoding MUST be applied after the SASL encoding when sending data.
(According to [RFC2595], STLS can only be issued before AUTH in any case.)
Note that POP3 does not allow for additional data to be sent with a message indicating a successful outcome (see Section 3.6 of [RFC4422]).
The service name specified by this protocol's profile of SASL is "pop".
If an AUTH command fails, the client may try another authentication mechanism or present different credentials by issuing another AUTH command (or by using one of the other POP3 authentication mechanisms).
Likewise, the server MUST behave as if the client had not issued the AUTH command.
To ensure interoperability, client and server implementations of this extension MUST implement the PLAIN SASL mechanism [RFC4616] running over TLS
A server implementation MUST implement a configuration in which it does NOT advertise or permit any plaintext password mechanisms, unless the STLS command has been used to negotiate a TLS session (see [RFC2595]).
As described by RFC 4616, this configuration SHOULD be the default configuration.
Before using a plaintext password mechanism over a TLS session, client implementations MUST verify the TLS server certificate as required by RFC 2595, Section 2.4.
Client and server implementations SHOULD implement additional SASL mechanisms that do not send plaintext passwords, such as the GSSAPI [RFC4752] mechanism.
The following syntax specification uses the Augmented Backus Naur Form notation as specified in [RFC4234].
The rules CRLF, ALPHA, and DIGIT are imported from [RFC4234].
The sasl mech rule is from [RFC4422].
Except as noted otherwise, all alphabetic characters are case  insensitive.
The use of upper  or lower case characters to define token strings is for editorial clarity only.
Implementations MUST accept these strings in a case insensitive fashion.
[CRLF cancel response] CRLF initial response   base64 /
Examples Here is an example of a client attempting AUTH PLAIN (see [RFC4616]) under TLS and making use of the initial client response:
pop.example.com BlurdyBlurp POP3 server ready C: CAPA S:
OK List of capabilities follows S:
SASL DIGEST MD5 GSSAPI ANONYMOUS S:
IMPLEMENTATION BlurdyBlurp POP3 server S: .
OK Begin TLS negotiation now
(TLS negotiation proceeds, further commands protected by TLS layer)
CAPA S:  OK List of capabilities follows S:
SASL PLAIN DIGEST MD5 GSSAPI ANONYMOUS S:
IMPLEMENTATION BlurdyBlurp POP3 server S: .
OK Maildrop locked and ready Here
is another client that is attempting AUTH PLAIN under a TLS layer, this time without the initial response.
Parts of the negotiation before the TLS layer was established have been omitted: (TLS negotiation proceeds, further commands protected by TLS layer)
CAPA S:  OK List of capabilities follows S:
SASL PLAIN DIGEST MD5 GSSAPI ANONYMOUS S:
IMPLEMENTATION BlurdyBlurp POP3 server S: .
OK Maildrop locked and ready Here
is an example using a mechanism in which the exchange begins with a server challenge (the long lines are broken for editorial clarity only):
pop.example.com BlurdyBlurp POP3 server ready C: CAPA S:
OK List of capabilities follows S:
SASL DIGEST MD5 GSSAPI ANONYMOUS S:
IMPLEMENTATION BlurdyBlurp POP3 server S: .
S:  OK Maildrop locked and ready 7.
Security Considerations Security issues are discussed throughout this document.
The IANA has updated its site to refer to this RFC instead of [RFC1734] in http://www.iana.org/assignments/pop3 extension mechanism (the POP3 extension registry), and also in http://www.iana.org/assignments/gssapi service names (the GSSAPI/SASL service name registry).
Changes From RFC 1734, RFC 2449.
Updated references to newer versions of various specifications, particularly RFC 4422.
The SASL based semantics defined in RFC 2449 are now normative for the AUTH extension.
The proper behaviour and handling of initial client responses is defined, with examples and references to SASL.
New minimum requirement of support for TLS PLAIN.
The SASLprep profile SHOULD be used to prepare authorization identities.
Clarify that the TLS encoding should be applied after any encoding applied by SASL security layers.
Note that the mechanism list can change after STLS.
Note that POP3 doesn't allow additional data to be sent with  OK.
