Abstract This memo registers an extension report type for the Abuse Reporting Format (ARF), affecting multiple registries, for use in generating receipt time reports about messages that fail one or more email message authentication checks.
The Abuse Reporting Format [ARF] defines a message format for sending reports of abuse in the messaging infrastructure, with an eye towards automating both the generation and consumption of those reports.
There is now also a desire to extend the ARF to include the reporting of messages that fail to authenticate using known message authentication methods, such as DomainKeys Identified Mail [DKIM] and Sender Policy Framework [SPF], as these are sometimes evidence of abuse that can be detected and reported through automated means.
The same mechanism can be used to convey forensic information about the specific reason the authentication method failed.
Thus, this memo presents such extensions to ARF that allow for detailed reporting of message authentication method failures.
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "
SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in [KEYWORDS].
This memo uses some terms whose definitions and descriptions can be found in [EMAIL ARCH].
Base64 Base64 is defined in Section 4 of [BASE64].
The values that are base64 encodings MAY contain folding whitespace (FWS) for formatting purposes as per the usual header field wrapping defined in [MAIL].
During decoding, any characters not in the base64 alphabet are ignored so that such line wrapping does not harm the value.
The ABNF token "FWS" is defined in [DKIM].
No other extensions to the valid base64 character set are permitted.
There are technologies in email security that provide authentication services and some that do authorization.
A discussion that is useful for establishing context can be found in Section 1.5.2 of [AUTH RESULTS].
ARF Extension for Authentication Failure Reporting
The current report format defined in [ARF] lacks some specific features required to do effective email authentication failure reporting.
This section defines extensions to ARF to accommodate this requirement.
A single report describes a single email authentication failure.
Multiple reports MAY be used to report multiple failures for a single message.
A new feedback type, "auth failure", is defined in this document as an extension, per Section 7.3 of [ARF].
A message that uses this feedback type has the following modified header field requirements for the second (machine parseable)
[MIME] part of the report: Authentication Results:  Syntax as specified in [AUTH RESULTS].
Furthermore, [ARF] specifies this field is OPTIONAL and appears at most once; for this extension, this field MUST be present, but it MUST reflect only a single authentication method's result.
Syntax as specified in [ARF].
Furthermore, [ARF] specifies this field is OPTIONAL and appears at most once; for this extension, this field's inclusion is RECOMMENDED, where that value is available, to aid in diagnosing the authentication failure.
From:  Syntax as specified in [ARF].
Furthermore, [ARF] specifies this field is OPTIONAL and appears at most once; for this extension, this field's inclusion is RECOMMENDED, where that value is available, to aid in diagnosing the authentication failure.
Source IP:  Syntax as specified in [ARF].
Furthermore, [ARF] specifies this field is OPTIONAL and appears at most once; for this extension, this field's inclusion is RECOMMENDED, where that value is available, to aid in diagnosing the authentication failure.
Reported Domain:  Syntax as specified in [ARF].
Furthermore, [ARF] specifies this field is OPTIONAL and appears at most once; for this extension, this field MUST be present if such a value is available.
Delivery Result:  As specified in Section 3.2.2.
This field is OPTIONAL, but it MUST NOT appear more than once.
If present, it SHOULD indicate the outcome of the message in some meaningful way, but it MAY be set to "other" for local policy reasons.
The third MIME part of the message is either of type "message/rfc822" (as defined in [MIME TYPES]) or of type "text/rfc822 headers" (as defined in [REPORT]) and contains a copy of the entire header block from the original message.
This part MUST be included (contrary to [REPORT], which makes it optional).
For privacy reasons, report generators might need to redact portions of a reported message, such as an identifier or address associated with the end user whose complaint action resulted in the report.
A discussion of relevant issues and a suggested method for doing so can be found in [RFC6590].
New ARF Header Field Names
The following new ARF field names are defined as extensions to Section 3.1 of [ARF].
Indicates the failure from an email authentication method that is being reported.
The list of valid values is enumerated in Section 3.3.
Optional for All Reports Delivery Result:
The final message disposition that was enacted by the ADministrative Management Domain (ADMD) generating the report.
It MUST NOT appear more than once.
Possible values are as follows:
The message was delivered (not specific as to where).
The message was delivered to the recipient's spam folder (or equivalent).
The message was not delivered to the intended inbox due to a failure from an email authentication method.
The specific action taken is not specified.
The message had a final disposition not covered by one of the above values.
Required for DKIM Reports DKIM Domain:
The domain that signed the message, taken from the "d " tag of the signature.
The identity of the signature that failed verification, taken from the "i " tag of the signature.
The selector of the signature that failed verification, taken from the "s " tag of the signature.
DKIM Canonicalized Header:  A base64 encoding of the canonicalized header of the message as generated by the verifier.
DKIM Canonicalized Body:  A base64 encoding of the canonicalized body of the message as generated by the verifier.
The encoded content MUST be limited to those octets that contribute to the DKIM body hash (i.e., the value of the "l " tag; see Section 3.7 of [DKIM]).
If DKIM Canonicalized Header and DKIM Canonicalized Body encode redacted data, they MUST NOT be included.
Otherwise, they SHOULD be included.
The data presented there have to be exactly the canonicalized header and body as defined by [DKIM] and computed at the verifier.
This is because these fields are intended to aid in identifying message alterations that invalidate DKIM signatures in transit.
Including redacted data in them renders the data unusable.
(See also Sections 3.1 and 6.6 for further discussion.)
Required for ADSP Reports DKIM ADSP DNS
:  Includes the Author Domain Signing Practices (ADSP) policy used to obtain the verifier's ADSP result.
This MUST be formatted per Section 4.2.1 of [ADSP].
Required for SPF Reports SPF DNS:
This field MUST appear once for every SPF record [SPF] used to obtain the SPF result.
It MUST include the DNS RRTYPE used, the DNS domain from which the record was retrieved, and the content of that record.
The syntax is defined in Section 4.
The list of defined email authentication failure types used in the "Auth Failure:" header field (defined above), is as follows:
The message did not conform to the author domain's published [ADSP] signing practices.
The DKIM ADSP DNS field MUST be included in the report.
The body hash in the signature and the body hash computed by the verifier did not match.
The DKIM Canonicalized Body field SHOULD be included in the report (see Section 3.2.4).
The DKIM key referenced by the signature on the message has been revoked.
The DKIM Domain and DKIM Selector fields MUST be included in the report.
The DKIM signature on the message did not successfully verify against the header hash and public key.
The DKIM Domain and DKIM Selector fields MUST be included in the report, and the DKIM Canonicalized Header field SHOULD be included in the report (see Section 3.2.4).
The evaluation of the author domain's SPF record produced a "none", "fail", "softfail", "temperror", or "permerror" result.
("none" is not strictly a failure per [SPF], but a service that demands successful SPF evaluations of clients could treat it like a failure.)
Supplementary data MAY be included in the form of comments compliant with [MAIL].
For example, "Auth Failure: adsp" could be augmented by a comment to indicate that the failed message was rejected because it was not signed when it should have been.
See Appendix B for an example.
Syntax for Added ARF Header Fields
The [ABNF] definitions for the new fields are as follows: auth failure   "
[CFWS] CRLF ; "CFWS" is defined in [MAIL] delivery result   "
" [CFWS] base64string CRLF ; "base64string" is defined in [DKIM] dkim sig domain
"DKIM Domain:" [CFWS] domain name [CFWS] CRLF ; "domain name" is defined in [DKIM] dkim identity
" domain name [CFWS] CRLF ; "local part" is defined in [MAIL] dkim selector
"DKIM Selector:" [CFWS] selector [CFWS] CRLF ; "selector" is defined in [DKIM] dkim adsp dns   "DKIM ADSP DNS:
" [CFWS] quoted string [CFWS] CRLF ; "quoted string" is defined in [MAIL] dkim body
"DKIM Canonicalized Body:" [CFWS] base64string
"DKIM Selector DNS:" [CFWS] quoted
As required by [IANA], this section contains registry information for the extension to [ARF].
Updates to ARF Feedback Types
The following feedback type has been added to the Feedback Report Type Values registry:
Feedback Type: auth failure Description:
email authentication failure report Published in
: [RFC6591] Status: current 5.2.
Updates to ARF Header Field Names
The following headers are added to the Feedback Report Header Fields registry:
Type of email authentication method failure
Multiple Appearances: No Related "Feedback Type": auth failure Published in: [RFC6591] Status:
Final disposition of the subject message Multiple Appearances: No Related "Feedback Type": auth failure Published in: [RFC6591] Status:
current Field Name: DKIM ADSP
Retrieved DKIM ADSP record Multiple Appearances: No Related "Feedback Type": auth failure Published in: [RFC6591] Status:
: No Related "Feedback Type": auth failure Published in: [RFC6591] Status:
: No Related "Feedback Type": auth failure Published in: [RFC6591] Status:
DKIM signing domain from "d " tag Multiple Appearances: No Related "Feedback Type": auth failure Published in: [RFC6591] Status:
DKIM Identity Description: Identity from DKIM signature
: No Related "Feedback Type": auth failure Published in: [RFC6591] Status:
: No Related "Feedback Type": auth failure Published in: [RFC6591] Status:
Retrieved DKIM key record Multiple Appearances: No Related "Feedback Type": auth failure Published in: [RFC6591] Status:
Retrieved SPF record Multiple Appearances
: No Related "Feedback Type": auth failure Published in: [RFC6591] Status:
Security Considerations Security issues with respect to these reports are similar to those found in [DSN].
Inherited Considerations Implementers are advised to consider the Security Considerations sections of [DKIM], [ADSP], [SPF], and [ARF].
These reports can be forged as easily as ordinary Internet electronic mail.
User agents and automatic mail handling facilities (such as mail distribution list exploders) that wish to make automatic use of Delivery Status Notifications (DSNs) of any kind should take appropriate precautions to minimize the potential damage from denial  of service attacks.
Security threats related to forged DSNs include the sending of a.  A falsified email authentication method failure notification when the message was in fact delivered to the indicated recipient; b.  Falsified signature information, such as selector, domain, etc.
Perhaps the simplest means of mitigating this threat is to assert that these reports should themselves be signed with something like DKIM.
On the other hand, if there's a problem with the DKIM infrastructure at the verifier, signing DKIM failure reports might produce reports that aren't trusted or even accepted by their intended recipients.
Automatic Generation Automatic generation of these reports by verifying agents can cause a denial of service attack when a large volume of email is sent that causes email authentication failures for whatever reason.
Limiting the rate of generation of these messages might be appropriate but threatens to inhibit the distribution of important and possibly time sensitive information.
In general ARF feedback loop terms, it is suggested that report generators only create these (or any
) ARF reports after an out of  band arrangement has been made between two parties.
This mechanism then becomes a way to adjust parameters of an authorized abuse report feedback loop that is configured and activated by private agreement rather than starting to send them automatically based solely on discovered data in the DNS.
In the case of transmitted reports in the form of a new message, it is necessary to consider the construction and transmission of the message so as to avoid amplification attacks, deliberate or otherwise.
See Section 5 of [ARF] for further information.
If it is known that a particular host generates abuse reports upon certain incidents, an attacker could forge a high volume of messages that will trigger such a report.
The recipient of the report could then be inundated with reports.
This could easily be extended to a distributed denial of service attack by finding a number of report  generating servers.
The incident count referenced in [ARF] provides a limited form of mitigation.
The host generating reports may elect to send reports only periodically, with each report representing a number of identical or near identical incidents.
One might even do something inverse exponentially, sending reports for each of the first ten incidents, then every tenth incident up to 100, then every 100th incident up to 1000, etc., until some period of relative quiet after which the limitation resets.
The use of this technique for "near identical" incidents in particular causes a degradation in reporting quality, however.
If, for example, a large number of pieces of spam arrive from one attacker, a reporting agent might decide only to send a report about a fraction of those messages.
While this averts a flood of reports to a system administrator, the precise details of each incident are similarly not sent.
Redaction of Data in DKIM Reports This memo requires that the canonicalized header and body be returned without being subject to redaction when a DKIM failure is being reported.
This is necessary to ensure that the returned canonicalized forms are useful for debugging, as they must be compared to the equivalent form at the signer.
If a message is altered in transit, and the returned data are also redacted, the redacted portion and the altered portion may overlap, rendering the comparison results meaningless.
However, unredacted data can leak information the reporting entity considers to be private.
It is for this reason the return of the canonicalized forms is not required.
This section contains an example of the use of the extension defined by this memo.
Example Use of ARF Extension Headers
An ARF formatted report using the proposed ARF extension fields:
FW: You have a new bill from your bank Date:
Sat, 8 Oct 2011 15:15:59
MIME Version: 1.0 Content Type: multipart/report; boundary " Boundary 00  3BCR4Y7kX93yP9uUPRhg";
report type feedback report Content Transfer Encoding: 7bit  Boundary 00
text/plain; charset "us ascii" Content Disposition:
This is an authentication failure report for an email message received from a.sender.example on 8 Oct 2011 20:15:58  0000 (GMT).
For more information about this format, please see [RFC6591].
message/feedback report Content Transfer Encoding:
7bit Feedback Type: auth failure User Agent:
Someisp!Mail Feedback/1.0 Version: 1 Original Mail From: anexample.reply@a.sender.example Original Envelope
Authentication Results: mta1011.mail.tp2.receiver.example; dkim fail (bodyhash)
sender.example Auth Failure: bodyhash DKIM Canonicalized Body: VGhpcyBpcyBhIG1lc3NhZ2UgYm9keSB0 aGF0IGdvdCBtb2RpZmllZCBpbiB0cmFuc2l0LgoKQXQgdGhlIHNhbWU gdGltZSB0aGF0IHRoZSBib2R5aGFzaCBmYWlscyB0byB2ZXJpZnksIH RoZQptZXNzYWdlIGNvbnRlbnQgaXMgY2xlYXJseSBhYnVzaXZlIG9yI
BoaXNoaW5nIGluIGEgc2luZ2xlIHJlcG9ydC4K DKIM Domain: sender.example DKIM Identity:
testkey Arrival Date: 8 Oct 2011 20:15:58  0000 (GMT) Source IP:
text/rfc822 headers Content Transfer Encoding:
7bit Authentication Results: mta1011.mail.tp2.receiver.example; dkim fail (bodyhash)
; spf pass smtp.mailfrom anexample.reply@a.sender.example Received: from smtp out.sender.example by mta1011.mail.tp2.receiver.example with SMTP
d oB85W8xV000169; Sat, 08 Oct 2011 13:15:58  0700
(PDT) DKIM Signature: v 1; c relaxed/simple; a rsa sha256; s testkey; d sender.example
; h From:To:Subject:Date; bh 2jUSOH9NhtVGCQWNr9BrIAPreKQjO6Sn7XIkfJVOzv8 ; b AuUoFEfDxTDkHlLXSZEpZj79LICEps6eda7W3deTVFOk4yAUoqOB 4nujc7YopdG5dWLSdNg6xNAZpOPr
Received: from mail.sender.example by smtp out.sender.example with SMTP
Sat, 08 Oct 2011 13:15:31  0700
(PDT) Received: from internal client 001.sender.example by mail.sender.example with SMTP
id o3F3BwdY028431; Sat, 08 Oct 2011 13:15:24  0700
Sat, 8 Oct 2011 16:15:24
To: someuser@receiver.example Subject: You have a new bill from your bank Message ID: <87913910.1318094604546@out.sender.example>  Boundary 00
Example ARF Report Using These Extensions
This example ARF message is making the following assertion:  DKIM verification of the signature added within "sender.example" failed.
The cause of the verification failure was a mismatch between the body contents observed at the verifier and the body hash contained in the signature.
