- title: __initial_text__
  contents:
  - '                    HTTP State Management Mechanism

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2000).  All Rights Reserved.\n"
- title: IESG Note
  contents:
  - "IESG Note\n   The IESG notes that this mechanism makes use of the .local top-level\n\
    \   domain (TLD) internally when handling host names that don't contain\n   any\
    \ dots, and that this mechanism might not work in the expected way\n   should\
    \ an actual .local TLD ever be registered.\n"
- title: Abstract
  contents:
  - "Abstract\n   This document specifies a way to create a stateful session with\n\
    \   Hypertext Transfer Protocol (HTTP) requests and responses.  It\n   describes\
    \ three new headers, Cookie, Cookie2, and Set-Cookie2, which\n   carry state information\
    \ between participating origin servers and user\n   agents.  The method described\
    \ here differs from Netscape's Cookie\n   proposal [Netscape], but it can interoperate\
    \ with HTTP/1.0 user\n   agents that use Netscape's method.  (See the HISTORICAL\
    \ section.)\n   This document reflects implementation experience with RFC 2109\
    \ and\n   obsoletes it.\n"
- title: 1.  TERMINOLOGY
  contents:
  - "1.  TERMINOLOGY\n   The terms user agent, client, server, proxy, origin server,\
    \ and\n   http_URL have the same meaning as in the HTTP/1.1 specification\n  \
    \ [RFC2616].  The terms abs_path and absoluteURI have the same meaning\n   as\
    \ in the URI Syntax specification [RFC2396].\n   Host name (HN) means either the\
    \ host domain name (HDN) or the numeric\n   Internet Protocol (IP) address of\
    \ a host.  The fully qualified domain\n   name is preferred; use of numeric IP\
    \ addresses is strongly\n   discouraged.\n   The terms request-host and request-URI\
    \ refer to the values the client\n   would send to the server as, respectively,\
    \ the host (but not port)\n   and abs_path portions of the absoluteURI (http_URL)\
    \ of the HTTP\n   request line.  Note that request-host is a HN.\n   The term\
    \ effective host name is related to host name.  If a host name\n   contains no\
    \ dots, the effective host name is that name with the\n   string .local appended\
    \ to it.  Otherwise the effective host name is\n   the same as the host name.\
    \  Note that all effective host names\n   contain at least one dot.\n   The term\
    \ request-port refers to the port portion of the absoluteURI\n   (http_URL) of\
    \ the HTTP request line.  If the absoluteURI has no\n   explicit port, the request-port\
    \ is the HTTP default, 80.  The\n   request-port of a cookie is the request-port\
    \ of the request in which\n   a Set-Cookie2 response header was returned to the\
    \ user agent.\n   Host names can be specified either as an IP address or a HDN\
    \ string.\n   Sometimes we compare one host name with another.  (Such comparisons\n\
    \   SHALL be case-insensitive.)  Host A's name domain-matches host B's if\n  \
    \    *  their host name strings string-compare equal; or\n      * A is a HDN string\
    \ and has the form NB, where N is a non-empty\n         name string, B has the\
    \ form .B', and B' is a HDN string.  (So,\n         x.y.com domain-matches .Y.com\
    \ but not Y.com.)\n   Note that domain-match is not a commutative operation: a.b.c.com\n\
    \   domain-matches .c.com, but not the reverse.\n   The reach R of a host name\
    \ H is defined as follows:\n      *  If\n         -  H is the host domain name\
    \ of a host; and,\n         -  H has the form A.B; and\n         -  A has no embedded\
    \ (that is, interior) dots; and\n         -  B has at least one embedded dot,\
    \ or B is the string \"local\".\n            then the reach of H is .B.\n    \
    \  *  Otherwise, the reach of H is H.\n   For two strings that represent paths,\
    \ P1 and P2, P1 path-matches P2\n   if P2 is a prefix of P1 (including the case\
    \ where P1 and P2 string-\n   compare equal).  Thus, the string /tec/waldo path-matches\
    \ /tec.\n   Because it was used in Netscape's original implementation of state\n\
    \   management, we will use the term cookie to refer to the state\n   information\
    \ that passes between an origin server and user agent, and\n   that gets stored\
    \ by the user agent.\n"
- title: 1.1  Requirements
  contents:
  - "1.1  Requirements\n   The key words \"MAY\", \"MUST\", \"MUST NOT\", \"OPTIONAL\"\
    , \"RECOMMENDED\",\n   \"REQUIRED\", \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"\
    SHOULD NOT\" in this\n   document are to be interpreted as described in RFC 2119\
    \ [RFC2119].\n"
- title: 2.  STATE AND SESSIONS
  contents:
  - "2.  STATE AND SESSIONS\n   This document describes a way to create stateful sessions\
    \ with HTTP\n   requests and responses.  Currently, HTTP servers respond to each\n\
    \   client request without relating that request to previous or\n   subsequent\
    \ requests; the state management mechanism allows clients\n   and servers that\
    \ wish to exchange state information to place HTTP\n   requests and responses\
    \ within a larger context, which we term a\n   \"session\".  This context might\
    \ be used to create, for example, a\n   \"shopping cart\", in which user selections\
    \ can be aggregated before\n   purchase, or a magazine browsing system, in which\
    \ a user's previous\n   reading affects which offerings are presented.\n   Neither\
    \ clients nor servers are required to support cookies.  A\n   server MAY refuse\
    \ to provide content to a client that does not return\n   the cookies it sends.\n"
- title: 3.  DESCRIPTION
  contents:
  - "3.  DESCRIPTION\n   We describe here a way for an origin server to send state\
    \ information\n   to the user agent, and for the user agent to return the state\n\
    \   information to the origin server.  The goal is to have a minimal\n   impact\
    \ on HTTP and user agents.\n"
- title: '3.1  Syntax:  General'
  contents:
  - "3.1  Syntax:  General\n   The two state management headers, Set-Cookie2 and Cookie,\
    \ have common\n   syntactic properties involving attribute-value pairs.  The following\n\
    \   grammar uses the notation, and tokens DIGIT (decimal digits), token\n   (informally,\
    \ a sequence of non-special, non-white space characters),\n   and http_URL from\
    \ the HTTP/1.1 specification [RFC2616] to describe\n   their syntax.\n   av-pairs\
    \    =     av-pair *(\";\" av-pair)\n   av-pair     =     attr [\"=\" value] \
    \             ; optional value\n   attr        =     token\n   value       = \
    \    token | quoted-string\n   Attributes (names) (attr) are case-insensitive.\
    \  White space is\n   permitted between tokens.  Note that while the above syntax\n\
    \   description shows value as optional, most attrs require them.\n   NOTE: The\
    \ syntax above allows whitespace between the attribute and\n   the = sign.\n"
- title: 3.2  Origin Server Role
  contents:
  - "3.2  Origin Server Role\n   3.2.1  General  The origin server initiates a session,\
    \ if it so\n   desires.  To do so, it returns an extra response header to the\n\
    \   client, Set-Cookie2.  (The details follow later.)\n   A user agent returns\
    \ a Cookie request header (see below) to the\n   origin server if it chooses to\
    \ continue a session.  The origin server\n   MAY ignore it or use it to determine\
    \ the current state of the\n   session.  It MAY send back to the client a Set-Cookie2\
    \ response\n   header with the same or different information, or it MAY send no\n\
    \   Set-Cookie2 header at all.  The origin server effectively ends a\n   session\
    \ by sending the client a Set-Cookie2 header with Max-Age=0.\n   Servers MAY return\
    \ Set-Cookie2 response headers with any response.\n   User agents SHOULD send\
    \ Cookie request headers, subject to other\n   rules detailed below, with every\
    \ request.\n   An origin server MAY include multiple Set-Cookie2 headers in a\n\
    \   response.  Note that an intervening gateway could fold multiple such\n   headers\
    \ into a single header.\n   3.2.2  Set-Cookie2 Syntax  The syntax for the Set-Cookie2\
    \ response\n   header is\n   set-cookie      =       \"Set-Cookie2:\" cookies\n\
    \   cookies         =       1#cookie\n   cookie          =       NAME \"=\" VALUE\
    \ *(\";\" set-cookie-av)\n   NAME            =       attr\n   VALUE          \
    \ =       value\n   set-cookie-av   =       \"Comment\" \"=\" value\n        \
    \           |       \"CommentURL\" \"=\" <\"> http_URL <\">\n                \
    \   |       \"Discard\"\n                   |       \"Domain\" \"=\" value\n \
    \                  |       \"Max-Age\" \"=\" value\n                   |     \
    \  \"Path\" \"=\" value\n                   |       \"Port\" [ \"=\" <\"> portlist\
    \ <\"> ]\n                   |       \"Secure\"\n                   |       \"\
    Version\" \"=\" 1*DIGIT\n   portlist        =       1#portnum\n   portnum    \
    \     =       1*DIGIT\n   Informally, the Set-Cookie2 response header comprises\
    \ the token Set-\n   Cookie2:, followed by a comma-separated list of one or more\
    \ cookies.\n   Each cookie begins with a NAME=VALUE pair, followed by zero or\
    \ more\n   semi-colon-separated attribute-value pairs.  The syntax for\n   attribute-value\
    \ pairs was shown earlier.  The specific attributes and\n   the semantics of their\
    \ values follows.  The NAME=VALUE attribute-\n   value pair MUST come first in\
    \ each cookie.  The others, if present,\n   can occur in any order.  If an attribute\
    \ appears more than once in a\n   cookie, the client SHALL use only the value\
    \ associated with the first\n   appearance of the attribute; a client MUST ignore\
    \ values after the\n   first.\n   The NAME of a cookie MAY be the same as one\
    \ of the attributes in this\n   specification.  However, because the cookie's\
    \ NAME must come first in\n   a Set-Cookie2 response header, the NAME and its\
    \ VALUE cannot be\n   confused with an attribute-value pair.\n   NAME=VALUE\n\
    \      REQUIRED.  The name of the state information (\"cookie\") is NAME,\n  \
    \    and its value is VALUE.  NAMEs that begin with $ are reserved and\n     \
    \ MUST NOT be used by applications.\n      The VALUE is opaque to the user agent\
    \ and may be anything the\n      origin server chooses to send, possibly in a\
    \ server-selected\n      printable ASCII encoding.  \"Opaque\" implies that the\
    \ content is of\n      interest and relevance only to the origin server.  The\
    \ content\n      may, in fact, be readable by anyone that examines the Set-Cookie2\n\
    \      header.\n   Comment=value\n      OPTIONAL.  Because cookies can be used\
    \ to derive or store private\n      information about a user, the value of the\
    \ Comment attribute\n      allows an origin server to document how it intends\
    \ to use the\n      cookie.  The user can inspect the information to decide whether\
    \ to\n      initiate or continue a session with this cookie.  Characters in\n\
    \      value MUST be in UTF-8 encoding. [RFC2279]\n   CommentURL=\"http_URL\"\n\
    \      OPTIONAL.  Because cookies can be used to derive or store private\n   \
    \   information about a user, the CommentURL attribute allows an\n      origin\
    \ server to document how it intends to use the cookie.  The\n      user can inspect\
    \ the information identified by the URL to decide\n      whether to initiate or\
    \ continue a session with this cookie.\n   Discard\n      OPTIONAL.  The Discard\
    \ attribute instructs the user agent to\n      discard the cookie unconditionally\
    \ when the user agent terminates.\n   Domain=value\n      OPTIONAL.  The value\
    \ of the Domain attribute specifies the domain\n      for which the cookie is\
    \ valid.  If an explicitly specified value\n      does not start with a dot, the\
    \ user agent supplies a leading dot.\n   Max-Age=value\n      OPTIONAL.  The value\
    \ of the Max-Age attribute is delta-seconds,\n      the lifetime of the cookie\
    \ in seconds, a decimal non-negative\n      integer.  To handle cached cookies\
    \ correctly, a client SHOULD\n      calculate the age of the cookie according\
    \ to the age calculation\n      rules in the HTTP/1.1 specification [RFC2616].\
    \  When the age is\n      greater than delta-seconds seconds, the client SHOULD\
    \ discard the\n      cookie.  A value of zero means the cookie SHOULD be discarded\n\
    \      immediately.\n   Path=value\n      OPTIONAL.  The value of the Path attribute\
    \ specifies the subset of\n      URLs on the origin server to which this cookie\
    \ applies.\n   Port[=\"portlist\"]\n      OPTIONAL.  The Port attribute restricts\
    \ the port to which a cookie\n      may be returned in a Cookie request header.\
    \  Note that the syntax\n      REQUIREs quotes around the OPTIONAL portlist even\
    \ if there is only\n      one portnum in portlist.\n   Secure\n      OPTIONAL.\
    \  The Secure attribute (with no value) directs the user\n      agent to use only\
    \ (unspecified) secure means to contact the origin\n      server whenever it sends\
    \ back this cookie, to protect the\n      confidentially and authenticity of the\
    \ information in the cookie.\n      The user agent (possibly with user interaction)\
    \ MAY determine what\n      level of security it considers appropriate for \"\
    secure\" cookies.\n      The Secure attribute should be considered security advice\
    \ from the\n      server to the user agent, indicating that it is in the session's\n\
    \      interest to protect the cookie contents.  When it sends a \"secure\"\n\
    \      cookie back to a server, the user agent SHOULD use no less than\n     \
    \ the same level of security as was used when it received the cookie\n      from\
    \ the server.\n   Version=value\n      REQUIRED.  The value of the Version attribute,\
    \ a decimal integer,\n      identifies the version of the state management specification\
    \ to\n      which the cookie conforms.  For this specification, Version=1\n  \
    \    applies.\n   3.2.3  Controlling Caching  An origin server must be cognizant\
    \ of the\n   effect of possible caching of both the returned resource and the\n\
    \   Set-Cookie2 header.  Caching \"public\" documents is desirable.  For\n   example,\
    \ if the origin server wants to use a public document such as\n   a \"front door\"\
    \ page as a sentinel to indicate the beginning of a\n   session for which a Set-Cookie2\
    \ response header must be generated,\n   the page SHOULD be stored in caches \"\
    pre-expired\" so that the origin\n   server will see further requests.  \"Private\
    \ documents\", for example\n   those that contain information strictly private\
    \ to a session, SHOULD\n   NOT be cached in shared caches.\n   If the cookie is\
    \ intended for use by a single user, the Set-Cookie2\n   header SHOULD NOT be\
    \ cached.  A Set-Cookie2 header that is intended\n   to be shared by multiple\
    \ users MAY be cached.\n   The origin server SHOULD send the following additional\
    \ HTTP/1.1\n   response headers, depending on circumstances:\n      *  To suppress\
    \ caching of the Set-Cookie2 header:\n         Cache-control: no-cache=\"set-cookie2\"\
    \n   and one of the following:\n      *  To suppress caching of a private document\
    \ in shared caches:\n         Cache-control: private\n      *  To allow caching\
    \ of a document and require that it be validated\n         before returning it\
    \ to the client:\n         Cache-Control: must-revalidate, max-age=0\n      *\
    \  To allow caching of a document, but to require that proxy\n         caches\
    \ (not user agent caches) validate it before returning it\n         to the client:\n\
    \         Cache-Control: proxy-revalidate, max-age=0\n      *  To allow caching\
    \ of a document and request that it be validated\n         before returning it\
    \ to the client (by \"pre-expiring\" it):\n         Cache-control: max-age=0\n\
    \         Not all caches will revalidate the document in every case.\n   HTTP/1.1\
    \ servers MUST send Expires: old-date (where old-date is a\n   date long in the\
    \ past) on responses containing Set-Cookie2 response\n   headers unless they know\
    \ for certain (by out of band means) that\n   there are no HTTP/1.0 proxies in\
    \ the response chain.  HTTP/1.1\n   servers MAY send other Cache-Control directives\
    \ that permit caching\n   by HTTP/1.1 proxies in addition to the Expires: old-date\
    \ directive;\n   the Cache-Control directive will override the Expires: old-date\
    \ for\n   HTTP/1.1 proxies.\n"
- title: 3.3  User Agent Role
  contents:
  - "3.3  User Agent Role\n   3.3.1  Interpreting Set-Cookie2  The user agent keeps\
    \ separate track\n   of state information that arrives via Set-Cookie2 response\
    \ headers\n   from each origin server (as distinguished by name or IP address\
    \ and\n   port).  The user agent MUST ignore attribute-value pairs whose\n   attribute\
    \ it does not recognize.  The user agent applies these\n   defaults for optional\
    \ attributes that are missing:\n   Discard The default behavior is dictated by\
    \ the presence or absence\n           of a Max-Age attribute.\n   Domain  Defaults\
    \ to the effective request-host.  (Note that because\n           there is no dot\
    \ at the beginning of effective request-host,\n           the default Domain can\
    \ only domain-match itself.)\n   Max-Age The default behavior is to discard the\
    \ cookie when the user\n           agent exits.\n   Path    Defaults to the path\
    \ of the request URL that generated the\n           Set-Cookie2 response, up to\
    \ and including the right-most /.\n   Port    The default behavior is that a cookie\
    \ MAY be returned to any\n           request-port.\n   Secure  If absent, the\
    \ user agent MAY send the cookie over an\n           insecure channel.\n   3.3.2\
    \  Rejecting Cookies  To prevent possible security or privacy\n   violations,\
    \ a user agent rejects a cookie according to rules below.\n   The goal of the\
    \ rules is to try to limit the set of servers for which\n   a cookie is valid,\
    \ based on the values of the Path, Domain, and Port\n   attributes and the request-URI,\
    \ request-host and request-port.\n   A user agent rejects (SHALL NOT store its\
    \ information) if the Version\n   attribute is missing.  Moreover, a user agent\
    \ rejects (SHALL NOT\n   store its information) if any of the following is true\
    \ of the\n   attributes explicitly present in the Set-Cookie2 response header:\n\
    \      *  The value for the Path attribute is not a prefix of the\n         request-URI.\n\
    \      *  The value for the Domain attribute contains no embedded dots,\n    \
    \     and the value is not .local.\n      *  The effective host name that derives\
    \ from the request-host does\n         not domain-match the Domain attribute.\n\
    \      *  The request-host is a HDN (not IP address) and has the form HD,\n  \
    \       where D is the value of the Domain attribute, and H is a string\n    \
    \     that contains one or more dots.\n      *  The Port attribute has a \"port-list\"\
    , and the request-port was\n         not in the list.\n   Examples:\n      * \
    \ A Set-Cookie2 from request-host y.x.foo.com for Domain=.foo.com\n         would\
    \ be rejected, because H is y.x and contains a dot.\n      *  A Set-Cookie2 from\
    \ request-host x.foo.com for Domain=.foo.com\n         would be accepted.\n  \
    \    *  A Set-Cookie2 with Domain=.com or Domain=.com., will always be\n     \
    \    rejected, because there is no embedded dot.\n      *  A Set-Cookie2 with\
    \ Domain=ajax.com will be accepted, and the\n         value for Domain will be\
    \ taken to be .ajax.com, because a dot\n         gets prepended to the value.\n\
    \      *  A Set-Cookie2 with Port=\"80,8000\" will be accepted if the\n      \
    \   request was made to port 80 or 8000 and will be rejected\n         otherwise.\n\
    \      *  A Set-Cookie2 from request-host example for Domain=.local will\n   \
    \      be accepted, because the effective host name for the request-\n       \
    \  host is example.local, and example.local domain-matches .local.\n   3.3.3 \
    \ Cookie Management  If a user agent receives a Set-Cookie2\n   response header\
    \ whose NAME is the same as that of a cookie it has\n   previously stored, the\
    \ new cookie supersedes the old when: the old\n   and new Domain attribute values\
    \ compare equal, using a case-\n   insensitive string-compare; and, the old and\
    \ new Path attribute\n   values string-compare equal (case-sensitive).  However,\
    \ if the Set-\n   Cookie2 has a value for Max-Age of zero, the (old and new) cookie\
    \ is\n   discarded.  Otherwise a cookie persists (resources permitting) until\n\
    \   whichever happens first, then gets discarded: its Max-Age lifetime is\n  \
    \ exceeded; or, if the Discard attribute is set, the user agent\n   terminates\
    \ the session.\n   Because user agents have finite space in which to store cookies,\
    \ they\n   MAY also discard older cookies to make space for newer ones, using,\n\
    \   for example, a least-recently-used algorithm, along with constraints\n   on\
    \ the maximum number of cookies that each origin server may set.\n   If a Set-Cookie2\
    \ response header includes a Comment attribute, the\n   user agent SHOULD store\
    \ that information in a human-readable form\n   with the cookie and SHOULD display\
    \ the comment text as part of a\n   cookie inspection user interface.\n   If a\
    \ Set-Cookie2 response header includes a CommentURL attribute, the\n   user agent\
    \ SHOULD store that information in a human-readable form\n   with the cookie,\
    \ or, preferably, SHOULD allow the user to follow the\n   http_URL link as part\
    \ of a cookie inspection user interface.\n   The cookie inspection user interface\
    \ may include a facility whereby a\n   user can decide, at the time the user agent\
    \ receives the Set-Cookie2\n   response header, whether or not to accept the cookie.\
    \  A potentially\n   confusing situation could arise if the following sequence\
    \ occurs:\n      *  the user agent receives a cookie that contains a CommentURL\n\
    \         attribute;\n      *  the user agent's cookie inspection interface is\
    \ configured so\n         that it presents a dialog to the user before the user\
    \ agent\n         accepts the cookie;\n      *  the dialog allows the user to\
    \ follow the CommentURL link when\n         the user agent receives the cookie;\
    \ and,\n      *  when the user follows the CommentURL link, the origin server\n\
    \         (or another server, via other links in the returned content)\n     \
    \    returns another cookie.\n   The user agent SHOULD NOT send any cookies in\
    \ this context.  The user\n   agent MAY discard any cookie it receives in this\
    \ context that the\n   user has not, through some user agent mechanism, deemed\
    \ acceptable.\n   User agents SHOULD allow the user to control cookie destruction,\
    \ but\n   they MUST NOT extend the cookie's lifetime beyond that controlled by\n\
    \   the Discard and Max-Age attributes.  An infrequently-used cookie may\n   function\
    \ as a \"preferences file\" for network applications, and a user\n   may wish\
    \ to keep it even if it is the least-recently-used cookie. One\n   possible implementation\
    \ would be an interface that allows the\n   permanent storage of a cookie through\
    \ a checkbox (or, conversely, its\n   immediate destruction).\n   Privacy considerations\
    \ dictate that the user have considerable\n   control over cookie management.\
    \  The PRIVACY section contains more\n   information.\n   3.3.4  Sending Cookies\
    \ to the Origin Server  When it sends a request\n   to an origin server, the user\
    \ agent includes a Cookie request header\n   if it has stored cookies that are\
    \ applicable to the request, based on\n      * the request-host and request-port;\n\
    \      * the request-URI;\n      * the cookie's age.\n   The syntax for the header\
    \ is:\n"
- title: cookie          =  "Cookie:" cookie-version 1*((";" | ",") cookie-value)
  contents:
  - 'cookie          =  "Cookie:" cookie-version 1*((";" | ",") cookie-value)

    '
- title: cookie-value    =  NAME "=" VALUE [";" path] [";" domain] [";" port]
  contents:
  - 'cookie-value    =  NAME "=" VALUE [";" path] [";" domain] [";" port]

    '
- title: cookie-version  =  "$Version" "=" value
  contents:
  - 'cookie-version  =  "$Version" "=" value

    '
- title: NAME            =  attr
  contents:
  - 'NAME            =  attr

    '
- title: VALUE           =  value
  contents:
  - 'VALUE           =  value

    '
- title: path            =  "$Path" "=" value
  contents:
  - 'path            =  "$Path" "=" value

    '
- title: domain          =  "$Domain" "=" value
  contents:
  - 'domain          =  "$Domain" "=" value

    '
- title: port            =  "$Port" [ "=" <"> value <"> ]
  contents:
  - "port            =  \"$Port\" [ \"=\" <\"> value <\"> ]\n   The value of the cookie-version\
    \ attribute MUST be the value from the\n   Version attribute of the corresponding\
    \ Set-Cookie2 response header.\n   Otherwise the value for cookie-version is 0.\
    \  The value for the path\n   attribute MUST be the value from the Path attribute,\
    \ if one was\n   present, of the corresponding Set-Cookie2 response header.  Otherwise\n\
    \   the attribute SHOULD be omitted from the Cookie request header.  The\n   value\
    \ for the domain attribute MUST be the value from the Domain\n   attribute, if\
    \ one was present, of the corresponding Set-Cookie2\n   response header.  Otherwise\
    \ the attribute SHOULD be omitted from the\n   Cookie request header.\n   The\
    \ port attribute of the Cookie request header MUST mirror the Port\n   attribute,\
    \ if one was present, in the corresponding Set-Cookie2\n   response header.  That\
    \ is, the port attribute MUST be present if the\n   Port attribute was present\
    \ in the Set-Cookie2 header, and it MUST\n   have the same value, if any.  Otherwise,\
    \ if the Port attribute was\n   absent from the Set-Cookie2 header, the attribute\
    \ likewise MUST be\n   omitted from the Cookie request header.\n   Note that there\
    \ is neither a Comment nor a CommentURL attribute in\n   the Cookie request header\
    \ corresponding to the ones in the Set-\n   Cookie2 response header.  The user\
    \ agent does not return the comment\n   information to the origin server.\n  \
    \ The user agent applies the following rules to choose applicable\n   cookie-values\
    \ to send in Cookie request headers from among all the\n   cookies it has received.\n\
    \   Domain Selection\n      The origin server's effective host name MUST domain-match\
    \ the\n      Domain attribute of the cookie.\n   Port Selection\n      There are\
    \ three possible behaviors, depending on the Port\n      attribute in the Set-Cookie2\
    \ response header:\n      1. By default (no Port attribute), the cookie MAY be\
    \ sent to any\n         port.\n      2. If the attribute is present but has no\
    \ value (e.g., Port), the\n         cookie MUST only be sent to the request-port\
    \ it was received\n         from.\n      3. If the attribute has a port-list,\
    \ the cookie MUST only be\n         returned if the new request-port is one of\
    \ those listed in\n         port-list.\n   Path Selection\n      The request-URI\
    \ MUST path-match the Path attribute of the cookie.\n   Max-Age Selection\n  \
    \    Cookies that have expired should have been discarded and thus are\n     \
    \ not forwarded to an origin server.\n   If multiple cookies satisfy the criteria\
    \ above, they are ordered in\n   the Cookie header such that those with more specific\
    \ Path attributes\n   precede those with less specific.  Ordering with respect\
    \ to other\n   attributes (e.g., Domain) is unspecified.\n   Note: For backward\
    \ compatibility, the separator in the Cookie header\n   is semi-colon (;) everywhere.\
    \  A server SHOULD also accept comma (,)\n   as the separator between cookie-values\
    \ for future compatibility.\n   3.3.5  Identifying What Version is Understood:\
    \  Cookie2  The Cookie2\n   request header facilitates interoperation between\
    \ clients and servers\n   that understand different versions of the cookie specification.\
    \  When\n   the client sends one or more cookies to an origin server, if at least\n\
    \   one of those cookies contains a $Version attribute whose value is\n   different\
    \ from the version that the client understands, then the\n   client MUST also\
    \ send a Cookie2 request header, the syntax for which\n   is\n   cookie2 =   \
    \    \"Cookie2:\" cookie-version\n   Here the value for cookie-version is the\
    \ highest version of cookie\n   specification (currently 1) that the client understands.\
    \  The client\n   needs to send at most one such request header per request.\n\
    \   3.3.6  Sending Cookies in Unverifiable Transactions  Users MUST have\n   control\
    \ over sessions in order to ensure privacy.  (See PRIVACY\n   section below.)\
    \  To simplify implementation and to prevent an\n   additional layer of complexity\
    \ where adequate safeguards exist,\n   however, this document distinguishes between\
    \ transactions that are\n   verifiable and those that are unverifiable.  A transaction\
    \ is\n   verifiable if the user, or a user-designated agent, has the option to\n\
    \   review the request-URI prior to its use in the transaction.  A\n   transaction\
    \ is unverifiable if the user does not have that option.\n   Unverifiable transactions\
    \ typically arise when a user agent\n   automatically requests inlined or embedded\
    \ entities or when it\n   resolves redirection (3xx) responses from an origin\
    \ server.\n   Typically the origin transaction, the transaction that the user\n\
    \   initiates, is verifiable, and that transaction may directly or\n   indirectly\
    \ induce the user agent to make unverifiable transactions.\n   An unverifiable\
    \ transaction is to a third-party host if its request-\n   host U does not domain-match\
    \ the reach R of the request-host O in the\n   origin transaction.\n   When it\
    \ makes an unverifiable transaction, a user agent MUST disable\n   all cookie\
    \ processing (i.e., MUST NOT send cookies, and MUST NOT\n   accept any received\
    \ cookies) if the transaction is to a third-party\n   host.\n   This restriction\
    \ prevents a malicious service author from using\n   unverifiable transactions\
    \ to induce a user agent to start or continue\n   a session with a server in a\
    \ different domain.  The starting or\n   continuation of such sessions could be\
    \ contrary to the privacy\n   expectations of the user, and could also be a security\
    \ problem.\n   User agents MAY offer configurable options that allow the user\
    \ agent,\n   or any autonomous programs that the user agent executes, to ignore\n\
    \   the above rule, so long as these override options default to \"off\".\n  \
    \ (N.B.  Mechanisms may be proposed that will automate overriding the\n   third-party\
    \ restrictions under controlled conditions.)\n   Many current user agents already\
    \ provide a review option that would\n   render many links verifiable.  For instance,\
    \ some user agents display\n   the URL that would be referenced for a particular\
    \ link when the mouse\n   pointer is placed over that link.  The user can therefore\
    \ determine\n   whether to visit that site before causing the browser to do so.\n\
    \   (Though not implemented on current user agents, a similar technique\n   could\
    \ be used for a button used to submit a form -- the user agent\n   could display\
    \ the action to be taken if the user were to select that\n   button.)  However,\
    \ even this would not make all links verifiable; for\n   example, links to automatically\
    \ loaded images would not normally be\n   subject to \"mouse pointer\" verification.\n\
    \   Many user agents also provide the option for a user to view the HTML\n   source\
    \ of a document, or to save the source to an external file where\n   it can be\
    \ viewed by another application.  While such an option does\n   provide a crude\
    \ review mechanism, some users might not consider it\n   acceptable for this purpose.\n"
- title: 3.4  How an Origin Server Interprets the Cookie Header
  contents:
  - "3.4  How an Origin Server Interprets the Cookie Header\n   A user agent returns\
    \ much of the information in the Set-Cookie2\n   header to the origin server when\
    \ the request-URI path-matches the\n   Path attribute of the cookie.  When it\
    \ receives a Cookie header, the\n   origin server SHOULD treat cookies with NAMEs\
    \ whose prefix is $\n   specially, as an attribute for the cookie.\n"
- title: 3.5  Caching Proxy Role
  contents:
  - "3.5  Caching Proxy Role\n   One reason for separating state information from\
    \ both a URL and\n   document content is to facilitate the scaling that caching\
    \ permits.\n   To support cookies, a caching proxy MUST obey these rules already\
    \ in\n   the HTTP specification:\n      *  Honor requests from the cache, if possible,\
    \ based on cache\n         validity rules.\n      *  Pass along a Cookie request\
    \ header in any request that the\n         proxy must make of another server.\n\
    \      *  Return the response to the client.  Include any Set-Cookie2\n      \
    \   response header.\n      *  Cache the received response subject to the control\
    \ of the usual\n         headers, such as Expires,\n         Cache-control: no-cache\n\
    \         and\n         Cache-control: private\n      *  Cache the Set-Cookie2\
    \ subject to the control of the usual\n         header,\n         Cache-control:\
    \ no-cache=\"set-cookie2\"\n         (The Set-Cookie2 header should usually not\
    \ be cached.)\n   Proxies MUST NOT introduce Set-Cookie2 (Cookie) headers of their\
    \ own\n   in proxy responses (requests).\n"
- title: 4.  EXAMPLES
  contents:
  - '4.  EXAMPLES

    '
- title: 4.1  Example 1
  contents:
  - "4.1  Example 1\n   Most detail of request and response headers has been omitted.\
    \  Assume\n   the user agent has no stored cookies.\n      1. User Agent -> Server\n\
    \        POST /acme/login HTTP/1.1\n        [form data]\n        User identifies\
    \ self via a form.\n      2. Server -> User Agent\n        HTTP/1.1 200 OK\n \
    \       Set-Cookie2: Customer=\"WILE_E_COYOTE\"; Version=\"1\"; Path=\"/acme\"\
    \n        Cookie reflects user's identity.\n      3. User Agent -> Server\n  \
    \      POST /acme/pickitem HTTP/1.1\n        Cookie: $Version=\"1\"; Customer=\"\
    WILE_E_COYOTE\"; $Path=\"/acme\"\n        [form data]\n        User selects an\
    \ item for \"shopping basket\".\n      4. Server -> User Agent\n        HTTP/1.1\
    \ 200 OK\n        Set-Cookie2: Part_Number=\"Rocket_Launcher_0001\"; Version=\"\
    1\";\n                Path=\"/acme\"\n        Shopping basket contains an item.\n\
    \      5. User Agent -> Server\n        POST /acme/shipping HTTP/1.1\n       \
    \ Cookie: $Version=\"1\";\n                Customer=\"WILE_E_COYOTE\"; $Path=\"\
    /acme\";\n                Part_Number=\"Rocket_Launcher_0001\"; $Path=\"/acme\"\
    \n        [form data]\n        User selects shipping method from form.\n     \
    \ 6. Server -> User Agent\n        HTTP/1.1 200 OK\n        Set-Cookie2: Shipping=\"\
    FedEx\"; Version=\"1\"; Path=\"/acme\"\n        New cookie reflects shipping method.\n\
    \      7. User Agent -> Server\n        POST /acme/process HTTP/1.1\n        Cookie:\
    \ $Version=\"1\";\n                Customer=\"WILE_E_COYOTE\"; $Path=\"/acme\"\
    ;\n                Part_Number=\"Rocket_Launcher_0001\"; $Path=\"/acme\";\n  \
    \              Shipping=\"FedEx\"; $Path=\"/acme\"\n        [form data]\n    \
    \    User chooses to process order.\n      8. Server -> User Agent\n        HTTP/1.1\
    \ 200 OK\n        Transaction is complete.\n   The user agent makes a series of\
    \ requests on the origin server, after\n   each of which it receives a new cookie.\
    \  All the cookies have the\n   same Path attribute and (default) domain.  Because\
    \ the request-URIs\n   all path-match /acme, the Path attribute of each cookie,\
    \ each request\n   contains all the cookies received so far.\n"
- title: 4.2  Example 2
  contents:
  - "4.2  Example 2\n   This example illustrates the effect of the Path attribute.\
    \  All\n   detail of request and response headers has been omitted.  Assume the\n\
    \   user agent has no stored cookies.\n   Imagine the user agent has received,\
    \ in response to earlier requests,\n   the response headers\n   Set-Cookie2: Part_Number=\"\
    Rocket_Launcher_0001\"; Version=\"1\";\n           Path=\"/acme\"\n   and\n  \
    \ Set-Cookie2: Part_Number=\"Riding_Rocket_0023\"; Version=\"1\";\n          \
    \ Path=\"/acme/ammo\"\n   A subsequent request by the user agent to the (same)\
    \ server for URLs\n   of the form /acme/ammo/...  would include the following\
    \ request\n   header:\n   Cookie: $Version=\"1\";\n           Part_Number=\"Riding_Rocket_0023\"\
    ; $Path=\"/acme/ammo\";\n           Part_Number=\"Rocket_Launcher_0001\"; $Path=\"\
    /acme\"\n   Note that the NAME=VALUE pair for the cookie with the more specific\n\
    \   Path attribute, /acme/ammo, comes before the one with the less\n   specific\
    \ Path attribute, /acme.  Further note that the same cookie\n   name appears more\
    \ than once.\n   A subsequent request by the user agent to the (same) server for\
    \ a URL\n   of the form /acme/parts/ would include the following request header:\n\
    \   Cookie: $Version=\"1\"; Part_Number=\"Rocket_Launcher_0001\";\n   $Path=\"\
    /acme\"\n   Here, the second cookie's Path attribute /acme/ammo is not a prefix\n\
    \   of the request URL, /acme/parts/, so the cookie does not get\n   forwarded\
    \ to the server.\n"
- title: 5.  IMPLEMENTATION CONSIDERATIONS
  contents:
  - "5.  IMPLEMENTATION CONSIDERATIONS\n   Here we provide guidance on likely or desirable\
    \ details for an origin\n   server that implements state management.\n"
- title: 5.1  Set-Cookie2 Content
  contents:
  - "5.1  Set-Cookie2 Content\n   An origin server's content should probably be divided\
    \ into disjoint\n   application areas, some of which require the use of state\n\
    \   information.  The application areas can be distinguished by their\n   request\
    \ URLs.  The Set-Cookie2 header can incorporate information\n   about the application\
    \ areas by setting the Path attribute for each\n   one.\n   The session information\
    \ can obviously be clear or encoded text that\n   describes state.  However, if\
    \ it grows too large, it can become\n   unwieldy.  Therefore, an implementor might\
    \ choose for the session\n   information to be a key to a server-side resource.\
    \  Of course, using\n   a database creates some problems that this state management\n\
    \   specification was meant to avoid, namely:\n      1. keeping real state on\
    \ the server side;\n      2. how and when to garbage-collect the database entry,\
    \ in case the\n         user agent terminates the session by, for example, exiting.\n"
- title: 5.2  Stateless Pages
  contents:
  - "5.2  Stateless Pages\n   Caching benefits the scalability of WWW.  Therefore\
    \ it is important\n   to reduce the number of documents that have state embedded\
    \ in them\n   inherently.  For example, if a shopping-basket-style application\n\
    \   always displays a user's current basket contents on each page, those\n   pages\
    \ cannot be cached, because each user's basket's contents would\n   be different.\
    \  On the other hand, if each page contains just a link\n   that allows the user\
    \ to \"Look at My Shopping Basket\", the page can be\n   cached.\n"
- title: 5.3  Implementation Limits
  contents:
  - "5.3  Implementation Limits\n   Practical user agent implementations have limits\
    \ on the number and\n   size of cookies that they can store.  In general, user\
    \ agents' cookie\n   support should have no fixed limits.  They should strive\
    \ to store as\n   many frequently-used cookies as possible.  Furthermore, general-use\n\
    \   user agents SHOULD provide each of the following minimum capabilities\n  \
    \ individually, although not necessarily simultaneously:\n      *  at least 300\
    \ cookies\n      *  at least 4096 bytes per cookie (as measured by the characters\n\
    \         that comprise the cookie non-terminal in the syntax description\n  \
    \       of the Set-Cookie2 header, and as received in the Set-Cookie2\n      \
    \   header)\n      *  at least 20 cookies per unique host or domain name\n   User\
    \ agents created for specific purposes or for limited-capacity\n   devices SHOULD\
    \ provide at least 20 cookies of 4096 bytes, to ensure\n   that the user can interact\
    \ with a session-based origin server.\n   The information in a Set-Cookie2 response\
    \ header MUST be retained in\n   its entirety.  If for some reason there is inadequate\
    \ space to store\n   the cookie, it MUST be discarded, not truncated.\n   Applications\
    \ should use as few and as small cookies as possible, and\n   they should cope\
    \ gracefully with the loss of a cookie.\n   5.3.1  Denial of Service Attacks \
    \ User agents MAY choose to set an\n   upper bound on the number of cookies to\
    \ be stored from a given host\n   or domain name or on the size of the cookie\
    \ information.  Otherwise a\n   malicious server could attempt to flood a user\
    \ agent with many\n   cookies, or large cookies, on successive responses, which\
    \ would force\n   out cookies the user agent had received from other servers.\
    \  However,\n   the minima specified above SHOULD still be supported.\n"
- title: 6.  PRIVACY
  contents:
  - "6.  PRIVACY\n   Informed consent should guide the design of systems that use\
    \ cookies.\n   A user should be able to find out how a web site plans to use\n\
    \   information in a cookie and should be able to choose whether or not\n   those\
    \ policies are acceptable.  Both the user agent and the origin\n   server must\
    \ assist informed consent.\n"
- title: 6.1  User Agent Control
  contents:
  - "6.1  User Agent Control\n   An origin server could create a Set-Cookie2 header\
    \ to track the path\n   of a user through the server.  Users may object to this\
    \ behavior as\n   an intrusive accumulation of information, even if their identity\
    \ is\n   not evident.  (Identity might become evident, for example, if a user\n\
    \   subsequently fills out a form that contains identifying information.)\n  \
    \ This state management specification therefore requires that a user\n   agent\
    \ give the user control over such a possible intrusion, although\n   the interface\
    \ through which the user is given this control is left\n   unspecified.  However,\
    \ the control mechanisms provided SHALL at least\n   allow the user\n      * \
    \ to completely disable the sending and saving of cookies.\n      *  to determine\
    \ whether a stateful session is in progress.\n      *  to control the saving of\
    \ a cookie on the basis of the cookie's\n         Domain attribute.\n   Such control\
    \ could be provided, for example, by mechanisms\n      *  to notify the user when\
    \ the user agent is about to send a\n         cookie to the origin server, to\
    \ offer the option not to begin a\n         session.\n      * to display a visual\
    \ indication that a stateful session is in\n         progress.\n      * to let\
    \ the user decide which cookies, if any, should be saved\n         when the user\
    \ concludes a window or user agent session.\n      * to let the user examine and\
    \ delete the contents of a cookie at\n         any time.\n   A user agent usually\
    \ begins execution with no remembered state\n   information.  It SHOULD be possible\
    \ to configure a user agent never\n   to send Cookie headers, in which case it\
    \ can never sustain state with\n   an origin server.  (The user agent would then\
    \ behave like one that is\n   unaware of how to handle Set-Cookie2 response headers.)\n\
    \   When the user agent terminates execution, it SHOULD let the user\n   discard\
    \ all state information.  Alternatively, the user agent MAY ask\n   the user whether\
    \ state information should be retained; the default\n   should be \"no\".  If\
    \ the user chooses to retain state information, it\n   would be restored the next\
    \ time the user agent runs.\n   NOTE: User agents should probably be cautious\
    \ about using files to\n   store cookies long-term.  If a user runs more than\
    \ one instance of\n   the user agent, the cookies could be commingled or otherwise\n\
    \   corrupted.\n"
- title: 6.2  Origin Server Role
  contents:
  - "6.2  Origin Server Role\n   An origin server SHOULD promote informed consent\
    \ by adding CommentURL\n   or Comment information to the cookies it sends.  CommentURL\
    \ is\n   preferred because of the opportunity to provide richer information in\n\
    \   a multiplicity of languages.\n"
- title: 6.3  Clear Text
  contents:
  - "6.3  Clear Text\n   The information in the Set-Cookie2 and Cookie headers is\
    \ unprotected.\n   As a consequence:\n      1. Any sensitive information that\
    \ is conveyed in them is exposed\n         to intruders.\n      2. A malicious\
    \ intermediary could alter the headers as they travel\n         in either direction,\
    \ with unpredictable results.\n   These facts imply that information of a personal\
    \ and/or financial\n   nature should only be sent over a secure channel.  For\
    \ less sensitive\n   information, or when the content of the header is a database\
    \ key, an\n   origin server should be vigilant to prevent a bad Cookie value from\n\
    \   causing failures.\n   A user agent in a shared user environment poses a further\
    \ risk.\n   Using a cookie inspection interface, User B could examine the\n  \
    \ contents of cookies that were saved when User A used the machine.\n"
- title: 7.  SECURITY CONSIDERATIONS
  contents:
  - '7.  SECURITY CONSIDERATIONS

    '
- title: 7.1  Protocol Design
  contents:
  - "7.1  Protocol Design\n   The restrictions on the value of the Domain attribute,\
    \ and the rules\n   concerning unverifiable transactions, are meant to reduce\
    \ the ways\n   that cookies can \"leak\" to the \"wrong\" site.  The intent is\
    \ to\n   restrict cookies to one host, or a closely related set of hosts.\n  \
    \ Therefore a request-host is limited as to what values it can set for\n   Domain.\
    \  We consider it acceptable for hosts host1.foo.com and\n   host2.foo.com to\
    \ share cookies, but not a.com and b.com.\n   Similarly, a server can set a Path\
    \ only for cookies that are related\n   to the request-URI.\n"
- title: 7.2  Cookie Spoofing
  contents:
  - "7.2  Cookie Spoofing\n   Proper application design can avoid spoofing attacks\
    \ from related\n   domains.  Consider:\n      1. User agent makes request to victim.cracker.edu,\
    \ gets back\n         cookie session_id=\"1234\" and sets the default domain\n\
    \         victim.cracker.edu.\n      2. User agent makes request to spoof.cracker.edu,\
    \ gets back cookie\n         session-id=\"1111\", with Domain=\".cracker.edu\"\
    .\n      3. User agent makes request to victim.cracker.edu again, and\n      \
    \   passes\n         Cookie: $Version=\"1\"; session_id=\"1234\",\n          \
    \       $Version=\"1\"; session_id=\"1111\"; $Domain=\".cracker.edu\"\n      \
    \   The server at victim.cracker.edu should detect that the second\n         cookie\
    \ was not one it originated by noticing that the Domain\n         attribute is\
    \ not for itself and ignore it.\n"
- title: 7.3  Unexpected Cookie Sharing
  contents:
  - "7.3  Unexpected Cookie Sharing\n   A user agent SHOULD make every attempt to\
    \ prevent the sharing of\n   session information between hosts that are in different\
    \ domains.\n   Embedded or inlined objects may cause particularly severe privacy\n\
    \   problems if they can be used to share cookies between disparate\n   hosts.\
    \  For example, a malicious server could embed cookie\n   information for host\
    \ a.com in a URI for a CGI on host b.com.  User\n   agent implementors are strongly\
    \ encouraged to prevent this sort of\n   exchange whenever possible.\n"
- title: 7.4  Cookies For Account Information
  contents:
  - "7.4  Cookies For Account Information\n   While it is common practice to use them\
    \ this way, cookies are not\n   designed or intended to be used to hold authentication\
    \ information,\n   such as account names and passwords.  Unless such cookies are\n\
    \   exchanged over an encrypted path, the account information they\n   contain\
    \ is highly vulnerable to perusal and theft.\n"
- title: 8.  OTHER, SIMILAR, PROPOSALS
  contents:
  - "8.  OTHER, SIMILAR, PROPOSALS\n   Apart from RFC 2109, three other proposals\
    \ have been made to\n   accomplish similar goals.  This specification began as\
    \ an amalgam of\n   Kristol's State-Info proposal [DMK95] and Netscape's Cookie\
    \ proposal\n   [Netscape].\n   Brian Behlendorf proposed a Session-ID header that\
    \ would be user-\n   agent-initiated and could be used by an origin server to\
    \ track\n   \"clicktrails\".  It would not carry any origin-server-defined state,\n\
    \   however.  Phillip Hallam-Baker has proposed another client-defined\n   session\
    \ ID mechanism for similar purposes.\n   While both session IDs and cookies can\
    \ provide a way to sustain\n   stateful sessions, their intended purpose is different,\
    \ and,\n   consequently, the privacy requirements for them are different.  A\n\
    \   user initiates session IDs to allow servers to track progress through\n  \
    \ them, or to distinguish multiple users on a shared machine.  Cookies\n   are\
    \ server-initiated, so the cookie mechanism described here gives\n   users control\
    \ over something that would otherwise take place without\n   the users' awareness.\
    \  Furthermore, cookies convey rich, server-\n   selected information, whereas\
    \ session IDs comprise user-selected,\n   simple information.\n"
- title: 9.  HISTORICAL
  contents:
  - '9.  HISTORICAL

    '
- title: 9.1  Compatibility with Existing Implementations
  contents:
  - "9.1  Compatibility with Existing Implementations\n   Existing cookie implementations,\
    \ based on the Netscape specification,\n   use the Set-Cookie (not Set-Cookie2)\
    \ header.  User agents that\n   receive in the same response both a Set-Cookie\
    \ and Set-Cookie2\n   response header for the same cookie MUST discard the Set-Cookie\n\
    \   information and use only the Set-Cookie2 information.  Furthermore, a\n  \
    \ user agent MUST assume, if it received a Set-Cookie2 response header,\n   that\
    \ the sending server complies with this document and will\n   understand Cookie\
    \ request headers that also follow this\n   specification.\n   New cookies MUST\
    \ replace both equivalent old- and new-style cookies.\n   That is, if a user agent\
    \ that follows both this specification and\n   Netscape's original specification\
    \ receives a Set-Cookie2 response\n   header, and the NAME and the Domain and\
    \ Path attributes match (per\n   the Cookie Management section) a Netscape-style\
    \ cookie, the\n   Netscape-style cookie MUST be discarded, and the user agent\
    \ MUST\n   retain only the cookie adhering to this specification.\n   Older user\
    \ agents that do not understand this specification, but that\n   do understand\
    \ Netscape's original specification, will not recognize\n   the Set-Cookie2 response\
    \ header and will receive and send cookies\n   according to the older specification.\n\
    \   A user agent that supports both this specification and Netscape-style\n  \
    \ cookies SHOULD send a Cookie request header that follows the older\n   Netscape\
    \ specification if it received the cookie in a Set-Cookie\n   response header\
    \ and not in a Set-Cookie2 response header.  However,\n   it SHOULD send the following\
    \ request header as well:\n        Cookie2: $Version=\"1\"\n   The Cookie2 header\
    \ advises the server that the user agent understands\n   new-style cookies.  If\
    \ the server understands new-style cookies, as\n   well, it SHOULD continue the\
    \ stateful session by sending a Set-\n   Cookie2 response header, rather than\
    \ Set-Cookie.  A server that does\n   not understand new-style cookies will simply\
    \ ignore the Cookie2\n   request header.\n"
- title: 9.2  Caching and HTTP/1.0
  contents:
  - "9.2  Caching and HTTP/1.0\n   Some caches, such as those conforming to HTTP/1.0,\
    \ will inevitably\n   cache the Set-Cookie2 and Set-Cookie headers, because there\
    \ was no\n   mechanism to suppress caching of headers prior to HTTP/1.1.  This\n\
    \   caching can lead to security problems.  Documents transmitted by an\n   origin\
    \ server along with Set-Cookie2 and Set-Cookie headers usually\n   either will\
    \ be uncachable, or will be \"pre-expired\".  As long as\n   caches obey instructions\
    \ not to cache documents (following Expires:\n   <a date in the past> or Pragma:\
    \ no-cache (HTTP/1.0), or Cache-\n   control:  no-cache (HTTP/1.1)) uncachable\
    \ documents present no\n   problem.  However, pre-expired documents may be stored\
    \ in caches.\n   They require validation (a conditional GET) on each new request,\
    \ but\n   some cache operators loosen the rules for their caches, and sometimes\n\
    \   serve expired documents without first validating them.  This\n   combination\
    \ of factors can lead to cookies meant for one user later\n   being sent to another\
    \ user.  The Set-Cookie2 and Set-Cookie headers\n   are stored in the cache, and,\
    \ although the document is stale\n   (expired), the cache returns the document\
    \ in response to later\n   requests, including cached headers.\n"
- title: 10.  ACKNOWLEDGEMENTS
  contents:
  - "10.  ACKNOWLEDGEMENTS\n   This document really represents the collective efforts\
    \ of the HTTP\n   Working Group of the IETF and, particularly, the following people,\
    \ in\n   addition to the authors: Roy Fielding, Yaron Goland, Marc Hedlund,\n\
    \   Ted Hardie, Koen Holtman, Shel Kaphan, Rohit Khare, Foteos Macrides,\n   David\
    \ W. Morris.\n"
- title: 11.  AUTHORS' ADDRESSES
  contents:
  - "11.  AUTHORS' ADDRESSES\n   David M. Kristol\n   Bell Laboratories, Lucent Technologies\n\
    \   600 Mountain Ave.  Room 2A-333\n   Murray Hill, NJ  07974\n   Phone: (908)\
    \ 582-2250\n   Fax: (908) 582-1239\n   EMail: dmk@bell-labs.com\n   Lou Montulli\n\
    \   Epinions.com, Inc.\n   2037 Landings Dr.\n   Mountain View, CA  94301\n  \
    \ EMail: lou@montulli.org\n"
- title: 12.  REFERENCES
  contents:
  - "12.  REFERENCES\n   [DMK95]    Kristol, D.M., \"Proposed HTTP State-Info Mechanism\"\
    ,\n              available at <http://portal.research.bell-\n              labs.com/~dmk/state-info.html>,\
    \ September, 1995.\n   [Netscape] \"Persistent Client State -- HTTP Cookies\"\
    , available at\n              <http://www.netscape.com/newsref/std/cookie_spec.html>,\n\
    \              undated.\n   [RFC2109]  Kristol, D. and L. Montulli, \"HTTP State\
    \ Management\n              Mechanism\", RFC 2109, February 1997.\n   [RFC2119]\
    \  Bradner, S., \"Key words for use in RFCs to Indicate\n              Requirement\
    \ Levels\", BCP 14, RFC 2119, March 1997.\n   [RFC2279]  Yergeau, F., \"UTF-8,\
    \ a transformation format of Unicode\n              and ISO-10646\", RFC 2279,\
    \ January 1998.\n   [RFC2396]  Berners-Lee, T., Fielding, R. and L. Masinter,\
    \ \"Uniform\n              Resource Identifiers (URI): Generic Syntax\", RFC 2396,\n\
    \              August 1998.\n   [RFC2616]  Fielding, R., Gettys, J., Mogul, J.,\
    \ Frystyk, H. and T.\n              Berners-Lee, \"Hypertext Transfer Protocol\
    \ -- HTTP/1.1\",\n              RFC 2616, June 1999.\n"
- title: 13.  Full Copyright Statement
  contents:
  - "13.  Full Copyright Statement\n   Copyright (C) The Internet Society (2000).\
    \  All Rights Reserved.\n   This document and translations of it may be copied\
    \ and furnished to\n   others, and derivative works that comment on or otherwise\
    \ explain it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
