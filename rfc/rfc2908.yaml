- title: __initial_text__
  contents:
  - '         The Internet Multicast Address Allocation Architecture

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard of any kind.  Distribution of\
    \ this\n   memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2000).  All Rights Reserved.\n"
- title: Abstract
  contents:
  - "Abstract\n   This document proposes a multicast address allocation architecture\n\
    \   (MALLOC) for the Internet.  The architecture is modular with three\n   layers,\
    \ comprising a host-server mechanism, an intra-domain server-\n   server coordination\
    \ mechanism, and an inter-domain mechanism.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1: Introduction ................................................\
    \  2\n   2: Requirements ................................................  2\n\
    \   3.1: Address Dynamics ..........................................  4\n   3:\
    \ Overview of the Architecture ................................  5\n   4: Scoping\
    \ .....................................................  7\n   4.1: Allocation\
    \ Scope ..........................................  8\n   4.1.1: The IPv4 Allocation\
    \ Scope -- 239.251.0.0/16 .............  9\n   4.1.2: The IPv6 Allocation Scope\
    \ -- SCOP 6 .....................  9\n   5: Overview of the Allocation Process\
    \ ..........................  9\n   6: Security Considerations .....................................\
    \ 10\n   7: Acknowledgments ............................................. 11\n\
    \   8: References .................................................. 11\n   9:\
    \ Authors' Addresses .......................................... 12\n   10: Full\
    \ Copyright Statement ................................... 13\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   This document proposes a multicast address allocation architecture\n\
    \   (MALLOC) for the Internet, and is intended to be generic enough to\n   apply\
    \ to both IPv4 and IPv6 environments.\n   As with unicast addresses, the usage\
    \ of any given multicast address\n   is limited in two dimensions:\n   Lifetime:\n\
    \      An address has a start time and a (possibly infinite) end time,\n     \
    \ between which it is valid.\n   Scope:\n      An address is valid over a specific\
    \ area of the network.  For\n      example, it may be globally valid and unique,\
    \ or it may be a\n      private address which is valid only within a local area.\n\
    \   This architecture assumes that the primary scoping mechanism in use\n   is\
    \ administrative scoping, as described in RFC 2365 [1].  While\n   solutions that\
    \ work for TTL scoping are possible, they introduce\n   significant additional\
    \ complication for address allocation [2].\n   Moreover, TTL scoping is a poor\
    \ solution for multicast scope control,\n   and our assumption is that usage of\
    \ TTL scoping will decline before\n   this architecture is widely used.\n"
- title: 2.  Requirements
  contents:
  - "2.  Requirements\n   From a design point of view, the important properties of\
    \ multicast\n   allocation mechanisms are robustness, timeliness, low probability\
    \ of\n   clashing allocations, and good address space utilization in\n   situations\
    \ where space is scare.  Where this interacts with multicast\n   routing, it is\
    \ desirable for multicast addresses to be allocated in a\n   manner that aids\
    \ aggregation of routing state.\n   o  Robustness/Availability\n      The robustness\
    \ requirement is that an application requiring the\n      allocation of an address\
    \ should always be able to obtain one, even\n      in the presence of other network\
    \ failures.\n   o  Timeliness\n      From a timeliness point of view, a short\
    \ delay of up to a few\n      seconds is probably acceptable before the client\
    \ is given an\n      address with reasonable confidence in its uniqueness.  If\
    \ the\n      session is defined in advance, the address should be allocated as\n\
    \      soon as possible, and should not wait until just before the\n      session\
    \ starts.  It is in some cases acceptable to change the\n      multicast addresses\
    \ used by the session up until the time when the\n      session actually starts,\
    \ but this should only be done when it\n      averts a significant problem such\
    \ as an address clash that was\n      discovered after initial session definition.\n\
    \   o  Low Probability of Clashes\n      A multicast address allocation scheme\
    \ should always be able to\n      allocate an address that can be guaranteed not\
    \ to clash with that\n      of another session.  A top-down partitioning of the\
    \ address space\n      would be required to completely guarantee that no clashes\
    \ would\n      occur.\n   o  Address Space Packing in Scarcity Situations\n  \
    \    In situations where address space is scarce, simply partitioning\n      the\
    \ address space would result in significant fragmentation of the\n      address\
    \ space.    This is because one would need enough spare\n      space in each address\
    \ space partition to give a reasonable degree\n      of assurance that addresses\
    \ could still be allocated for a\n      significant time in the event of a network\
    \ partition.  In\n      addition, providing backup allocation servers in such\
    \ a hierarchy,\n      so that fail-over (including partitioning of a server and\
    \ its\n      backup from each other) does not cause collisions would add\n   \
    \   further to the address space fragmentation.\n      Since guaranteeing no clashes\
    \ in a robust manner requires\n      partitioning the address space, providing\
    \ a hard guarantee leads\n      to inefficient address space usage.  Hence, when\
    \ address space is\n      scarce, it is difficult to achieve constant availability\
    \ and\n      timeliness, guarantee no clashes, and achieve good address space\n\
    \      usage.  As a result, we must prioritize these properties.  We\n      believe\
    \ that, when address space is scarce, achieving good address\n      space packing\
    \ and constant availability are more important than\n      guaranteeing that address\
    \ clashes never occur.  What we aim for in\n      these situations is a very high\
    \ probability that an address clash\n      does not occur, but we accept that\
    \ there is a finite probability\n      of this happening.  Should a clash occur\
    \ (or should an application\n      start using an address it did not allocate,\
    \ which may also lead to\n      a clash), either the clash can be detected and\
    \ addresses changed,\n      or hosts receiving additional traffic can prune that\
    \ traffic using\n      source-specific prunes available in IGMP version 3, and\
    \ so we do\n      not believe that this is a disastrous situation.\n      In summary,\
    \ tolerating the possibility of clashes is likely to\n      allow allocation of\
    \ a very high proportion of the address space in\n      the presence of network\
    \ conditions such as those observed in [3].\n      We believe that we can get\
    \ good packing and good availability with\n      good collision avoidance, while\
    \ we would have to compromise\n      packing and availability significantly to\
    \ avoid all collisions.\n      Finally, in situations where address space is not\
    \ scarce, such as\n      with IPv6, achieving good address space usage is less\
    \ important,\n      and hence partitioning may potentially be used to guarantee\
    \ no\n      collisions among hosts that use this architecture.\n"
- title: 2.1.  Address Dynamics
  contents:
  - "2.1.  Address Dynamics\n   Multicast addresses may be allocated in any of three\
    \ ways:\n   Static:\n      Statically allocated addresses are allocated by IANA\
    \ for specific\n      protocols that require well-known addresses to work.  Examples\
    \ of\n      static addresses are 224.0.1.1 which is used for the Network Time\n\
    \      Protocol [13] and 224.2.127.255 which is used for global scope\n      multicast\
    \ session announcements.  Applications that use multicast\n      for bootstrap\
    \ purposes should not normally be given their own\n      static multicast address,\
    \ but should bootstrap themselves using a\n      well-known service location address\
    \ which can be used to announce\n      the binding between local services and\
    \ multicast addresses.\n      Static addresses typically have a permanent lifetime,\
    \ and a scope\n      defined by the scope range in which they reside.  As such,\
    \ a\n      static address is valid everywhere (although the set of receivers\n\
    \      may be different depending on location), and may be hard-coded\n      into\
    \ applications, devices, embedded systems, etc.  Static\n      addresses are also\
    \ useful for devices which support sending but\n      not receiving multicast\
    \ IP datagrams (Level 1 conformance as\n      specified in RFC 1112 [7]), or even\
    \ are incapable of receiving any\n      data at all, such as a wireless broadcasting\
    \ device.\n   Scope-relative:\n      RFC 2365 [1] reserves the highest 256 addresses\
    \ in every\n      administrative scope range for relative assignments.  Relative\n\
    \      assignments are made by IANA and consist of an offset which is\n      valid\
    \ in every scope.  Relative addresses are reserved for\n      infrastructure protocols\
    \ which require an address in every scope,\n      and this offset may be hard-coded\
    \ into applications, devices,\n      embedded systems, etc.  Such devices must\
    \ have a way (e.g. via\n      MZAP [9] or via MADCAP [4]) to obtain the list of\
    \ scopes in which\n      they reside.\n      The offsets assigned typically have\
    \ a permanent lifetime, and are\n      valid in every scope and location.  Hence,\
    \ the scope-relative\n      address in a given scope range has a lifetime equal\
    \ to that of the\n      scope range in which it falls.\n   Dynamic:\n      For\
    \ most purposes, the correct way to use multicast is to obtain a\n      dynamic\
    \ multicast address.  These addresses are provided on demand\n      and have a\
    \ specific lifetime.  An application should request an\n      address only for\
    \ as long as it expects to need the address.  Under\n      some circumstances,\
    \ an address will be granted for a period of\n      time that is less than the\
    \ time that was requested.  This will\n      occur rarely if the request is for\
    \ a reasonable amount of time.\n      Applications should be prepared to cope\
    \ with this when it occurs.\n      At any time during the lifetime of an existing\
    \ address,\n      applications may also request an extension of the lifetime,\
    \ and\n      such extensions will be granted when possible.  When the address\n\
    \      extension is not granted, the application is expected to request a\n  \
    \    new address to take over from the old address when it expires, and\n    \
    \  to be able to cope with this situation gracefully.  As with\n      unicast\
    \ addresses, no guarantee of reachability of an address is\n      provided by\
    \ the network once the lifetime expires.\n      These restrictions on address\
    \ lifetime are necessary to allow the\n      address allocation architecture to\
    \ be organized around address\n      usage patterns in a manner that ensures addresses\
    \ are aggregatable\n      and multicast routing is reasonably close to optimal.\
    \  In\n      contrast, statically allocated addresses may be given sub-optimal\n\
    \      routing.\n"
- title: 3.  Overview of the Architecture
  contents:
  - "3.  Overview of the Architecture\n   The architecture is modular so that each\
    \ layer may be used, upgraded,\n   or replaced independently of the others.  Layering\
    \ also provides\n   isolation, in that different mechanisms at the same layer\
    \ can be used\n   by different organizations without adversely impacting other\
    \ layers.\n   There are three layers in this architecture (Figure 1).  Note that\n\
    \   these layer numbers are different from the layer numbers in the\n   TCP/IP\
    \ stack, which describe the path of data packets.\n   +--------------------------+\
    \         +------------------------+\n   |                          |        \
    \ |                        |\n   |       to other peers     |         |   to other\
    \ peers       |\n   |          ||   //         |         |      ||  //   ||  \
    \     |\n   |          Prefix          |         |    Prefix     Prefix   |\n\
    \   |       Coordinator        |         |Coordinator  Coordinator|\n   +------------||------------+\
    \         +-------||----//---------+\n                ||Layer 3              \
    \         ||   //\n   +------------||------------------------------||--//-----------+\n\
    \   |          Prefix                          Prefix             |\n   |    \
    \   Coordinator=======================Coordinator         |\n   |            \
    \ ^                              ^                |\n   |             +----------------+-------------+\
    \                |\n   |             |       Layer 2  |             |        \
    \        |\n   |     MAAS<---/                |             +---> MAAS       |\n\
    \   |     ^   ^                    v                    ^         |\n   |    \
    \ .    .                 MAAS                   .         |\n   |     .     .Layer\
    \ 1           ^                    .Layer 1  |\n   |     v      v            \
    \     .Layer 1             v         |\n   | Client   Client              v  \
    \               Client       |\n   |                           Client        \
    \                    |\n   +-------------------------------------------------------------+\n\
    \  Figure 1: An Overview of the Multicast Address Allocation Architecture\n  \
    \ Layer 1\n      A protocol or mechanism that a multicast client uses to request\
    \ a\n      multicast address from a multicast address allocation server\n    \
    \  (MAAS).  When the server grants an address, it becomes the\n      server's\
    \ responsibility to ensure that this address is not then\n      reused elsewhere\
    \ within the address's scope during the lifetime\n      granted.\n      Examples\
    \ of possible protocols or mechanisms at this layer include\n      MADCAP [4],\
    \ HTTP to access a web page for allocation, and IANA\n      static address assignments.\n\
    \      An abstract API for applications to use for dynamic allocation,\n     \
    \ independent of the Layer 1 protocol/mechanism in use, is given in\n      [11].\n\
    \   Layer 2\n      An intra-domain protocol or mechanism that MAAS's use to\n\
    \      coordinate allocations to ensure they do not allocate duplicate\n     \
    \ addresses.  A MAAS must have stable storage, or some equivalent\n      robustness\
    \ mechanism, to ensure that uniqueness is preserved\n      across MAAS failures\
    \ and reboots.\n      MAASs also use the Layer 2 protocol/mechanism to acquire\
    \ (from\n      \"Prefix Coordinators\") the ranges of multicast addresses out\
    \ of\n      which they may allocate addresses.\n      In this document we use\
    \ the term \"allocation domain\" to mean an\n      administratively scoped multicast-capable\
    \ region of the network,\n      within which addresses in a specific range may\
    \ be allocated by a\n      Layer 2 protocol/mechanism.\n      Examples of protocols\
    \ or mechanisms at this layer include AAP [5],\n      and manual configuration\
    \ of MAAS's.\n   Layer 3\n      An inter-domain protocol or mechanism that allocates\
    \ multicast\n      address ranges (with lifetimes) to Prefix Coordinators.\n \
    \     Individual addresses may then be allocated out of these ranges by\n    \
    \  MAAS's inside allocation domains as described above.\n      Examples of protocols\
    \ or mechanisms at this layer include MASC [6]\n      (in which Prefix Coordinators\
    \ are typically routers without any\n      stable storage requirement), and static\
    \ allocations by AS number\n      as described in [10] (in which Prefix Coordinators\
    \ are typically\n      human administrators).\n   Each of the three layers serves\
    \ slightly different purposes and as\n   such, protocols or mechanisms at each\
    \ layer may require different\n   design tradeoffs.\n"
- title: 4.  Scoping
  contents:
  - "4.  Scoping\n   To allocate dynamic addresses within administrative scopes, a\
    \ MAAS\n   must be able to learn which scopes are in effect, what their address\n\
    \   ranges and names are, and which addresses or subranges within each\n   scope\
    \ are valid for dynamic allocation by the MAAS.\n   The first two tasks, learning\
    \ the scopes in effect and the address\n   range and name(s) of each scope, may\
    \ be provided by static\n   configuration or dynamically learned.  For example,\
    \ a MAAS may simply\n   passively listen to MZAP [9] messages to acquire this\
    \ information.\n   To determine the subrange for dynamic allocation, there are\
    \ two cases\n   for each scope, corresponding to small \"indivisible\" scopes,\
    \ and big\n   \"divisible\" scopes.  Note that MZAP identifies which scopes are\n\
    \   divisible and which are not.\n   (1) For small scopes, the allocation domain\
    \ corresponds to the entire\n       topology within the administrative scope.\
    \  Hence, all MAASs\n       inside the scope may use the entire address range\
    \ (minus the last\n       256 addresses reserved as scope-relative addresses),\
    \ and use the\n       Layer 2 mechanism/protocol to coordinate allocations.  For\
    \ small\n       scopes, Prefix Coordinators are not involved.\n       Hence, for\
    \ small scopes, the effective \"allocation domain\" area\n       may be different\
    \ for different scopes.  Note that a small,\n       indivisible scope could be\
    \ larger or smaller than the Allocation\n       Scope used for big scopes (see\
    \ below).\n   (2) For big scopes (including the global scope), the area inside\
    \ the\n       scope may be large enough that simply using a Layer 2\n       mechanism/protocol\
    \ may be inefficient or otherwise undesirable.\n       In this case, the scope\
    \ must span multiple allocation domains,\n       and the Layer 3 mechanism/protocol\
    \ must be used to divvy up the\n       scoped address space among the allocation\
    \ domains.  Hence, a MAAS\n       may learn of the scope via MZAP, but must acquire\
    \ a subrange from\n       which to allocate from a Prefix Coordinator.\n     \
    \  For simplicity, the effective \"allocation domain\" area will be\n       the\
    \ same for all big scopes, being the granularity at which all\n       big scopes\
    \ are divided up.  We define the administrative scope at\n       this granularity\
    \ to be the \"Allocation Scope\".\n"
- title: 4.1.  Allocation Scope
  contents:
  - "4.1.  Allocation Scope\n   The Allocation Scope is a new administrative scope,\
    \ defined in this\n   document and to be reserved by IANA with values as noted\
    \ below.  This\n   is the scope that is used by a Layer 2 protocol/mechanism to\n\
    \   coordinate address allocation for addresses in larger, divisible\n   scopes.\n\
    \   We expect that the Allocation Scope will often coincide with a\n   unicast\
    \ Autonomous System (AS) boundary.\n   If an AS is too large, or the network administrator\
    \ wishes to run\n   different intra-domain multicast routing in different parts\
    \ of an AS,\n   that AS can be split by manual setup of an allocation scope boundary\n\
    \   that is not an AS boundary.  This is done by setting up a multicast\n   boundary\
    \ dividing the unicast AS into two or more multicast\n   allocation domains.\n\
    \   If an AS is too small, and address space is scarce, address space\n   fragmentation\
    \ may occur if the AS is its own allocation domain.\n   Here, the AS can instead\
    \ be treated as part of its provider's\n   allocation domain, and use a Layer\
    \ 2 protocol/mechanism to coordinate\n   allocation between its MAAS's (if any)\
    \ and those of its provider.  An\n   AS should probably take this course of action\
    \ if:\n   o  it is connected to a single provider,\n   o  it does not provide\
    \ transit for another AS, and\n   o  it needs fewer than (say) 256 multicast addresses\
    \ of larger than\n      AS scope allocated on average.\n"
- title: 4.1.1.  The IPv4 Allocation Scope -- 239.251.0.0/16
  contents:
  - "4.1.1.  The IPv4 Allocation Scope -- 239.251.0.0/16\n   The address space 239.251.0.0/16\
    \ is to be reserved for the Allocation\n   Scope.  The ranges 239.248.0.0/16,\
    \ 239.249.0.0/16 and 239.250.0.0/16\n   are to be left unassigned and available\
    \ for expansion of this space.\n   These ranges should be left unassigned until\
    \ the 239.251.0.0/16 space\n   is no longer sufficient.\n"
- title: 4.1.2.  The IPv6 Allocation Scope -- SCOP 6
  contents:
  - "4.1.2.  The IPv6 Allocation Scope -- SCOP 6\n   The IPv6 \"scop\" value 6 is\
    \ to be used for the Allocation Scope.\n"
- title: 5.  Overview of the Allocation Process
  contents:
  - "5.  Overview of the Allocation Process\n   Once Layer 3 allocation has been performed\
    \ for large, divisible\n   scopes, and each Prefix Coordinator has acquired one\
    \ or more ranges,\n   then those ranges are passed to all MAAS's within the Prefix\n\
    \   Coordinator's domain via a Layer 2 mechanism/protocol.\n   MAAS's within the\
    \ domain receive these ranges and store them as the\n   currently allowable addresses\
    \ for that domain.  Each range is valid\n   for a given lifetime (also acquired\
    \ via the Layer 3\n   mechanism/protocol) and is not revoked before the lifetime\
    \ has\n   expired.  MAAS's also learn of small scopes (e.g., via MZAP) and\n \
    \  store the ranges associated with them.\n   Using the Layer 2 mechanism/protocol,\
    \ each MAAS ensures that it will\n   exclude any addresses which have been or\
    \ will be allocated by other\n   MAAS's within its domain.\n   When a client needs\
    \ a multicast address, it first needs to decide\n   what the scope of the intended\
    \ session should be, and locate a MAAS\n   capable of allocating addresses within\
    \ that scope.\n   To pick a scope, the client will either simply choose a well-known\n\
    \   scope, such as the global scope, or it will enumerate the available\n   scopes\
    \ (e.g., by sending a MADCAP query, or by listening to MZAP\n   messages over\
    \ time) and allow a user to select one.\n   Locating a MAAS can be done via a\
    \ variety of methods, including\n   manual configuration, using a service location\
    \ protocol such as SLP\n   [12], or via a mechanism provided by a Layer 1 protocol\
    \ itself.\n   MADCAP, for instance, includes such a facility.\n   Once the client\
    \ has chosen a scope and located a MAAS, it then\n   requests an address in that\
    \ scope from the MAAS located.  Along with\n   the request it also passes the\
    \ acceptable range for the lifetimes of\n   the allocation it desires.  For example,\
    \ if the Layer 1 protocol in\n   use is MADCAP, the client sends a MADCAP REQUEST\
    \ message to the MAAS,\n   and waits for a NAK message or an ACK message containing\
    \ the\n   allocated information.\n   Upon receiving a request from a client, the\
    \ MAAS then chooses an\n   unused address in a range for the specified scope,\
    \ with a lifetime\n   which both satisfies the acceptable range specified by the\
    \ client,\n   and is within the lifetime of the actual range.\n   The MAAS uses\
    \ the Layer 2 mechanism/protocol to ensure that such an\n   address does not clash\
    \ with any addresses allocated by other MAASs.\n   For example, if Layer 2 uses\
    \ manual configuration of non-overlapping\n   ranges, then this simply consists\
    \ of adhering to the range configured\n   in the local MAAS.  If, on the other\
    \ hand, AAP is used at Layer 2 to\n   provide less address space fragmentation,\
    \ the MAAS advertises the\n   proposed allocation domain-wide using AAP.  If no\
    \ clashing AAP claim\n   is received within a short time interval, then the address\
    \ is\n   returned to the client via the Layer 1 protocol/mechanism.  If a\n  \
    \ clashing claim is received by the MAAS, then it chooses a different\n   address\
    \ and tries again.  AAP also allows each MAAS to pre-reserve a\n   small \"pool\"\
    \ of addresses for which it need not wait to detect\n   clashes.\n   If a domain\
    \ ever begins to run out of available multicast addresses,\n   a Prefix Coordinator\
    \ in that domain uses the Layer 3\n   protocol/mechanism to acquire more space.\n"
- title: 6.  Security Considerations
  contents:
  - "6.  Security Considerations\n   The architecture described herein does not prevent\
    \ an application\n   from just sending to or joining a multicast address without\n\
    \   allocating it (just as the same is true for unicast addresses today).\n  \
    \ However, there is no guarantee that data for unallocated addresses\n   will\
    \ be delivered by the network.  That is, routers may drop data for\n   unallocated\
    \ addresses if they have some way of checking whether a\n   destination address\
    \ has been allocated.  For example, if the border\n   routers of a domain participate\
    \ in the Layer 2 protocol/mechanism and\n   cache the set of allocated addresses,\
    \ then data for unallocated\n   addresses in a range allocated by that domain\
    \ can be dropped by\n   creating multicast forwarding state with an empty outgoing\
    \ interface\n   list and/or pruning back the tree branches for those groups.\n\
    \   A malicious application may attempt a denial-of-service attack by\n   attempting\
    \ to allocate a large number of addresses, thus attempting\n   to exhaust the\
    \ supply of available addresses.  Other attacks include\n   releasing or modifying\
    \ the allocation of another party.  These\n   attacks can be combatted through\
    \ the use of authentication with\n   policy restrictions (such as a maximum number\
    \ of addresses that can\n   be allocated by a single party).\n   Hence, protocols/mechanisms\
    \ that implement layers of this\n   architecture should be deployable in a secure\
    \ fashion.  For example,\n   one should support authentication with policy restrictions,\
    \ and\n   should not allow someone unauthorized to release or modify the\n   allocation\
    \ of another party.\n"
- title: 7.  Acknowledgments
  contents:
  - "7.  Acknowledgments\n   Steve Hanna provided valuable feedback on this document.\
    \  The members\n   of the MALLOC WG and the MBone community provided the motivation\
    \ for\n   this work.\n"
- title: 8.  References
  contents:
  - "8.  References\n   [1]  Meyer, D., \"Administratively Scoped IP Multicast\",\
    \ BCP 23, RFC\n        2365, July 1998.\n   [2]  Mark Handley, \"Multicast Session\
    \ Directories and Address\n        Allocation\", Chapter 6 of PhD Thesis entitled\
    \ \"On Scalable\n        Multimedia Conferencing Systems\", University of London,\
    \ 1997.\n   [3]  Mark Handley, \"An Analysis of Mbone Performance\", Chapter 4\
    \ of\n        PhD Thesis entitled \"On Scalable Multimedia Conferencing\n    \
    \    Systems\", University of London, 1997.\n   [4]  Hanna, S., Patel, B. and\
    \ M. Shah, \"Multicast Address Dynamic\n        Client Allocation Protocol (MADCAP)\"\
    , RFC 2730, December 1999.\n   [5]  Handley, M. and S. Hanna, \"Multicast Address\
    \ Allocation Protocol\n        (AAP)\", Work in Progress.\n   [6]  Estrin, D.,\
    \ Govindan, R., Handley, M., Kumar, S., Radoslavov, P.\n        and D. Thaler,\
    \ \"The Multicast Address-Set Claim (MASC)\n        Protocol\", RFC 2909, September\
    \ 2000.\n   [7]  Deering, S., \"Host Extensions for IP Multicasting\", STD 5,\
    \ RFC\n        1112, August 1989.\n   [8]  Rekhter, Y. and T. Li, \"A Border Gateway\
    \ Protocol 4 (BGP-4)\",\n        RFC 1771, March 1995.\n   [9]  Handley, M., Thaler,\
    \ D. and R. Kermode, \"Multicast-Scope Zone\n        Announcement Protocol (MZAP)\"\
    , RFC 2776, February 2000.\n   [10] Meyer, D. and P. Lothberg, \"GLOP Addressing\
    \ in 233/8\", RFC 2770,\n        February 2000.\n   [11] Finlayson, R., \"Abstract\
    \ API for Multicast Address Allocation\",\n        RFC 2771, February 2000.\n\
    \   [12] Guttman, E., Perkins, C., Veizades, J. and M. Day, \"Service\n      \
    \  Location Protocol, Version 2\", RFC 2608, June 1999.\n   [13] Mills, D., \"\
    Network Time Protocol (Version 3) Specification,\n        Implementation and Analysis\"\
    , RFC 1305, March 1992.\n"
- title: 9.  Authors' Addresses
  contents:
  - "9.  Authors' Addresses\n   Dave Thaler\n   Microsoft Corporation\n   One Microsoft\
    \ Way\n   Redmond, WA  98052-6399\n   EMail: dthaler@microsoft.com\n   Mark Handley\n\
    \   AT&T Center for Internet Research at ICSI\n   1947 Center St, Suite 600\n\
    \   Berkeley, CA 94704\n   EMail: mjh@aciri.org\n   Deborah Estrin\n   Computer\
    \ Science Dept/ISI\n   University of Southern California\n   Los Angeles, CA 90089\n\
    \   EMail: estrin@usc.edu\n"
- title: 10.  Full Copyright Statement
  contents:
  - "10.  Full Copyright Statement\n   Copyright (C) The Internet Society (2000).\
    \  All Rights Reserved.\n   This document and translations of it may be copied\
    \ and furnished to\n   others, and derivative works that comment on or otherwise\
    \ explain it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
