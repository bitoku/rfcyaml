- title: __initial_text__
  contents:
  - "         A Session Initiation Protocol (SIP) Event Package for\n            \
    \           Session-Specific Policies\n"
- title: Abstract
  contents:
  - "Abstract\n   This specification defines a Session Initiation Protocol (SIP) event\n\
    \   package for session-specific policies.  This event package enables\n   user\
    \ agents (UAs) to subscribe to session policies for a SIP session\n   and to receive\
    \ notifications if these policies change.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This\
    \ document is a product of the Internet Engineering Task Force\n   (IETF).  It\
    \ represents the consensus of the IETF community.  It has\n   received public\
    \ review and has been approved for publication by the\n   Internet Engineering\
    \ Steering Group (IESG).  Further information on\n   Internet Standards is available\
    \ in Section 2 of RFC 5741.\n   Information about the current status of this document,\
    \ any errata,\n   and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc6795.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2012 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................2\n\
    \   2. Terminology .....................................................3\n  \
    \ 3. Event Package Formal Definition .................................3\n    \
    \  3.1. Event Package Name .........................................4\n      3.2.\
    \ Event Package Parameters ...................................4\n      3.3. SUBSCRIBE\
    \ Bodies ...........................................4\n      3.4. Subscription\
    \ Duration ......................................5\n      3.5. NOTIFY Bodies ..............................................5\n\
    \      3.6. Subscriber Generation of SUBSCRIBE Requests ................6\n  \
    \    3.7. Notifier Processing of SUBSCRIBE Requests ..................8\n    \
    \  3.8. Notifier Generation of NOTIFY Requests .....................9\n      3.9.\
    \ Subscriber Processing of NOTIFY Requests ..................10\n      3.10. Handling\
    \ of Forked Requests ..............................11\n      3.11. Rate of Notifications\
    \ ....................................11\n      3.12. State Agents .............................................11\n\
    \      3.13. Examples .................................................11\n  \
    \ 4. Security Considerations ........................................14\n   5.\
    \ IANA Considerations ............................................16\n      5.1.\
    \ Event Package Name ........................................16\n   6. References\
    \ .....................................................16\n      6.1. Normative\
    \ References ......................................16\n      6.2. Informative\
    \ References ....................................17\n   Appendix A. Acknowledgements\
    \ ......................................18\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   The Framework for Session Initiation Protocol (SIP) [RFC3261]\
    \ Session\n   Policies [RFC6794] defines a protocol framework that enables a proxy\n\
    \   to define and impact policies on sessions such as the codecs or media\n  \
    \ types to be used.  This framework identifies two types of session\n   policies:\
    \ session-specific and session-independent policies.\n   Session-specific policies\
    \ are policies that are created for one\n   particular session, based on the session\
    \ description of this session.\n   They enable a network intermediary to inspect\
    \ the session description\n   that a UA is proposing and to return a policy specifically\
    \ generated\n   for this session description.  For example, an intermediary could\n\
    \   open pinholes in a firewall/NAT for each media stream in a session\n   and\
    \ return a policy that replaces the internal IP addresses and ports\n   in the\
    \ session description with external ones.  Since session-\n   specific policies\
    \ are tailored to a session, they only apply to the\n   session for which they\
    \ are created.  A UA requests session-specific\n   policies on a session-by-session\
    \ basis at the time a session is\n   created and the session description is known.\
    \  Session-independent\n   policies, on the other hand, are policies that are\
    \ created\n   independently of a session and generally apply to all the SIP\n\
    \   sessions set up by a user agent.\n   \"A Framework for Session Initiation\
    \ Protocol (SIP) Session Policies\"\n   [RFC6794] defines a mechanism that enables\
    \ UAs to discover the URIs\n   of session-specific policy servers.  This specification\
    \ defines a SIP\n   event package [RFC6665] that enables UAs to subscribe to session-\n\
    \   specific policies on a policy server.  Subscribing to session-\n   specific\
    \ policies involves the following steps (see the Session\n   Policy Framework\
    \ [RFC6794]):\n   1.  A user agent submits the details of the session it is trying\
    \ to\n       establish to the policy server and asks whether a session using\n\
    \       these parameters is permissible.  For example, a user agent might\n  \
    \     propose a session that contains the media types audio and video.\n   2.\
    \  The policy server generates a policy decision for this session\n       and\
    \ returns the decision to the user agent.  Possible policy\n       decisions are\
    \ (1) to deny the session, (2) to propose changes to\n       the session parameters\
    \ with which the session would be\n       acceptable, or (3) to accept the session\
    \ as it was proposed.  An\n       example for a policy decision is to disallow\
    \ the use of video but\n       agree to all other aspects of the proposed session.\n\
    \   3.  The policy server can update the policy decision at a later time.\n  \
    \     A policy decision update can require additional changes to the\n       session\
    \ (e.g., because the available bandwidth has changed) or\n       deny a previously\
    \ accepted session (i.e., disallow the\n       continuation of a session).\n \
    \  The event package for session-specific policies enables a user agent\n   to\
    \ subscribe to the policies for a SIP session following the above\n   model. \
    \ The subscriber initiates a subscription by submitting the\n   details of the\
    \ session it is trying to establish to the notifier\n   (i.e., the policy server)\
    \ in the body of a SUBSCRIBE request.  The\n   notifier uses this information\
    \ to determine the policy decision for\n   this session.  It conveys the initial\
    \ policy decision to the\n   subscriber in a NOTIFY request and all changes to\
    \ this decision in\n   subsequent NOTIFY requests.\n"
- title: 2.  Terminology
  contents:
  - "2.  Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\"\
    , \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and\
    \ \"OPTIONAL\" in this\n   document are to be interpreted as described in RFC\
    \ 2119 [RFC2119].\n"
- title: 3.  Event Package Formal Definition
  contents:
  - "3.  Event Package Formal Definition\n   This document provides the details for\
    \ defining a SIP event package\n   as required by RFC 6665 [RFC6665].\n"
- title: 3.1.  Event Package Name
  contents:
  - "3.1.  Event Package Name\n   The name of the event package defined in this specification\
    \ is\n   \"session-spec-policy\".\n"
- title: 3.2.  Event Package Parameters
  contents:
  - "3.2.  Event Package Parameters\n   This package defines the following two event\
    \ package parameters:\n   local-only:  The \"local-only\" parameter is optional\
    \ and only defined\n      for NOTIFY requests.  The \"local-only\" parameter indicates\
    \ that\n      the remote session description is not required by the notifier.\n\
    \      It MUST be ignored if received in a SUBSCRIBE request.  The usage\n   \
    \   of the \"local-only\" parameter is described in Sections 3.6, 3.8\n      and\
    \ 3.9.\n   insufficient-info:  The \"insufficient-info\" parameter is optional\
    \ and\n      only defined for NOTIFY requests.  It is used by the notifier to\n\
    \      indicate that a policy decision could not be made due to\n      insufficient\
    \ information.  The \"insufficient-info\" parameter MUST\n      be ignored if\
    \ received in a SUBSCRIBE request.  The usage of the\n      \"insufficient-info\"\
    \ parameter is described in Sections 3.7, 3.8\n      and 3.9.\n"
- title: 3.3.  SUBSCRIBE Bodies
  contents:
  - "3.3.  SUBSCRIBE Bodies\n   A SUBSCRIBE for this event package MUST contain a\
    \ body that describes\n   a SIP session.  The purpose of this body is to enable\
    \ the notifier to\n   generate the policies in which the subscriber is interested.\
    \  In this\n   event package, the Request-URI, the event package name, and event\n\
    \   parameters are not sufficient to determine the resource a\n   subscription\
    \ is for.  However, with the session description in the\n   SUBSCRIBE body, the\
    \ notifier can generate the requested policy\n   decision and create policy events\
    \ for this resource.\n   All subscribers and notifiers MUST support the MIME type\n\
    \   \"application/media-policy-dataset+xml\" as defined in \"A User Agent\n  \
    \ Profile Data Set for Media Policy\" [RFC6796].  The \"application/\n   media-policy-dataset+xml\"\
    \ format is the default format for SUBSCRIBE\n   bodies in this event package.\
    \  Subscribers and notifiers MAY\n   negotiate the use of other formats capable\
    \ of representing a session.\n      Note: It has been proposed to directly use\
    \ Session Description\n      Protocol (SDP) [RFC4566] instead of encoding the\
    \ session\n      descriptions in the Media Policy [RFC6796] format.  However,\
    \ using\n      a separate format such as the Media Policy format has a number\
    \ of\n      advantages over the direct use of SDP: i) the Media Policy format\n\
    \      is more flexible and allows the inclusion of information that\n      can't\
    \ be expressed in SDP (e.g., the target URI), ii) the Media\n      Policy format\
    \ enables the encoding of local and remote session\n      descriptions in a single\
    \ document (not requiring the use of MIME\n      multipart and new content disposition\
    \ types), and iii) the Media\n      Policy format aligns the formats used for\
    \ session-specific and\n      session-independent policies.  A drawback is that\
    \ it requires the\n      UA to encode SDP and session information in Media Policy\n\
    \      documents.\n"
- title: 3.4.  Subscription Duration
  contents:
  - "3.4.  Subscription Duration\n   A subscription to the session-specific policy\
    \ package is usually\n   established at the beginning of a session and terminated\
    \ when the\n   corresponding session ends.  A typical duration of a phone call\
    \ is a\n   few minutes.\n   Since the duration of a subscription to the session-specific\
    \ policy\n   package is related to the lifetime of the corresponding session,\
    \ the\n   value for the duration of a subscription is largely irrelevant.\n  \
    \ However, the duration SHOULD be longer than the typical duration of a\n   session.\
    \  The default subscription duration for this event package is\n   set to two\
    \ hours.\n   A subscription MAY be terminated before a session ends by the\n \
    \  notifier.  For example, a notifier may terminate the subscription\n   after\
    \ the initial policy notification has been sent to the subscriber\n   if it knows\
    \ that these policies will not change during the session.\n   A subscriber MUST\
    \ NOT terminate a subscription unless it is\n   terminating the session this subscription\
    \ is for or discovers that\n   the notifier has been removed from the list of\
    \ policy servers\n   relevant for this session (see the Session Policy Framework\n\
    \   [RFC6794]).  A subscriber MUST refresh a subscription with a\n   SUBSCRIBE\
    \ request before the last SUBSCRIBE request expires to avoid\n   that the subscription\
    \ times out.\n"
- title: 3.5.  NOTIFY Bodies
  contents:
  - "3.5.  NOTIFY Bodies\n   In this event package, the body of a notification contains\
    \ the\n   session policy requested by the subscriber.  All subscribers and\n \
    \  notifiers MUST support the format \"application/\n   media-policy-dataset+xml\"\
    \ [RFC6796] as a format for NOTIFY bodies.\n   The SUBSCRIBE request MAY contain\
    \ an Accept header field.  If no such\n   header field is present, it has a default\
    \ value of \"application/\n   media-policy-dataset+xml\".  If the header field\
    \ is present, it MUST\n   include \"application/media-policy-dataset+xml\", and\
    \ it MAY include\n   any other MIME type capable of representing session-specific\n\
    \   policies.  As defined in RFC 6665 [RFC6665], the body of\n   notifications\
    \ MUST be in one of the formats defined in the Accept\n   header of the SUBSCRIBE\
    \ request or in the default format.\n   If the notifier uses the same format in\
    \ NOTIFY bodies that was used\n   by the subscriber in the SUBSCRIBE body (e.g.,\
    \ \"application/\n   media-policy-dataset+xml\"), the notifier can expect that\
    \ the\n   subscriber supports all format extensions that were used in the\n  \
    \ SUBSCRIBE body.  The notifier cannot assume that the subscriber\n   supports\
    \ other extensions beyond that and SHOULD NOT use such\n   extensions.\n   If\
    \ the SUBSCRIBE request contained a representation of the local\n   session description\
    \ and the subscription was accepted, then the\n   NOTIFY body MUST contain a policy\
    \ for the local session description.\n   If the SUBSCRIBE request of an accepted\
    \ subscription contained the\n   local and the remote session description, then\
    \ the NOTIFY body MUST\n   contain two policies: one for the local and one for\
    \ the remote\n   session description.\n"
- title: 3.6.  Subscriber Generation of SUBSCRIBE Requests
  contents:
  - "3.6.  Subscriber Generation of SUBSCRIBE Requests\n   The subscriber follows\
    \ the general rules for generating SUBSCRIBE\n   requests defined in RFC 6665\
    \ [RFC6665].  The subscriber MUST provide\n   sufficient information in the SUBSCRIBE\
    \ body to fully describe the\n   session for which it seeks to receive session-specific\
    \ policies.  The\n   subscriber MUST use the most recent session description as\
    \ a basis\n   for this information.\n   If the \"application/media-policy-dataset+xml\"\
    \ format is used in\n   SUBSCRIBE bodies, the subscriber MUST provide a value\
    \ for each field\n   that is defined for session information documents [RFC6796]\
    \ and for\n   which the subscriber has information available.  In other words,\
    \ the\n   subscriber MUST fill in the elements of a session information\n   document\
    \ as complete as possible.  If the subscriber supports\n   extensions of the \"\
    application/media-policy-dataset+xml\" format, the\n   subscriber MUST also provide\
    \ a value for each field defined by this\n   extension for session information\
    \ documents, if possible.  Providing\n   as much information as possible avoids\
    \ that a session is rejected due\n   to a lack of session information and the\
    \ negotiation of the\n   information to be disclosed between notifier and subscriber.\n\
    \   Subscriptions to this event package are typically created in\n   conjunction\
    \ with an SDP offer/answer exchange [RFC3264] during the\n   establishment of\
    \ a session (see the Session Policy Framework\n   [RFC6794]).  If used with an\
    \ offer/answer exchange, the subscriber\n   MUST insert the representation of\
    \ the local session description in\n   the SUBSCRIBE body.  The local session\
    \ description is the one that\n   was created by the subscriber (e.g., the offer\
    \ if the subscriber has\n   initiated the offer/answer exchange).  Under certain\
    \ circumstances, a\n   UA may not have a session description when subscribing\
    \ to session-\n   specific policies, for example, when it is composing an empty\
    \ INVITE\n   request (i.e., an INVITE request that does not contain an offer).\
    \  In\n   these cases, a UA SHOULD establish a subscription without including\
    \ a\n   representation of the local session description.  The UA MUST refresh\n\
    \   the subscription with a SUBSCRIBE request that contains this session\n   description\
    \ as soon as the session description becomes available, for\n   example, when\
    \ the UA receives a 200 OK to an empty INVITE request.  A\n   policy server can\
    \ choose to admit a session only after the UA has\n   disclosed the session descriptions.\n\
    \   The subscriber SHOULD also include a representation of the remote\n   session\
    \ description in the SUBSCRIBE body.  The remote session\n   description is the\
    \ one the subscriber has received (i.e., the answer\n   if the subscriber has\
    \ initiated the offer/answer exchange).  In some\n   scenarios, the remote session\
    \ description is not available to the\n   subscriber at the time the subscription\
    \ to session-specific policies\n   is established.  In this case, the initial\
    \ SUBSCRIBE message SHOULD\n   only contain a representation of the local session\
    \ description.  When\n   the remote description becomes available, the subscriber\
    \ SHOULD\n   refresh the subscription by sending another SUBSCRIBE request, which\n\
    \   then contains the local and the remote session description, unless\n   the\
    \ subscriber has received a NOTIFY request with the \"local-only\"\n   parameter.\
    \  This parameter indicates that the notifier does not need\n   to see the remote\
    \ session description.\n   A user agent can change the session description of\
    \ an ongoing\n   session.  A change in the session description will typically\
    \ affect\n   the policy decisions for this session.  A subscriber MUST refresh\
    \ the\n   subscription to session-specific policies every time the session\n \
    \  description of a session changes.  It does this by sending a\n   SUBSCRIBE\
    \ request, which contains the details of the updated session\n   descriptions.\n\
    \   A subscriber may receive an error that indicates a server failure in\n   response\
    \ to a SUBSCRIBE request.  In this case, the subscriber SHOULD\n   try to locate\
    \ an alternative server, for example, using the\n   procedures described in [RFC3263].\
    \  If no alternative server can be\n   located, the subscriber MAY continue with\
    \ the session for which it\n   wanted to receive session-specific policies without\
    \ subscribing to\n   session-specific policies.  This is to avoid that a failed\
    \ policy\n   server prevents a UA from setting up or continuing with a session.\n\
    \   Since the sessions created by the UA may not be policy compliant\n   without\
    \ this subscription, they may be blocked by policy enforcement\n   mechanisms\
    \ if they are in place.\n   Session policies can contain sensitive information.\
    \  Moreover, policy\n   decisions can significantly impact the behavior of a user\
    \ agent.  A\n   user agent should therefore verify the identity of a policy server\n\
    \   and make sure that policies have not been altered in transit.  All\n   implementations\
    \ of this package MUST support Transport Layer Security\n   (TLS) [RFC5246] and\
    \ the Session Initiation Protocol Secure (SIPS) URI\n   scheme.  A subscriber\
    \ SHOULD use SIPS URIs when subscribing to\n   session-specific policies so that\
    \ policies are transmitted over TLS.\n   See Section 4.\n"
- title: 3.7.  Notifier Processing of SUBSCRIBE Requests
  contents:
  - "3.7.  Notifier Processing of SUBSCRIBE Requests\n   All subscriptions to session-specific\
    \ policies SHOULD be\n   authenticated and authorized before approval.  However,\
    \ a policy\n   server may frequently encounter UAs it cannot authenticate.  In\
    \ these\n   cases, the policy server MAY provide a generic policy that does not\n\
    \   reveal sensitive information to these UAs.  For details, see\n   Section 4.\n\
    \   The authorization policy is at the discretion of the administrator.\n   In\
    \ general, all users SHOULD be allowed to subscribe to the session-\n   specific\
    \ policies of their sessions.  A subscription to this event\n   package will typically\
    \ be established by a device that needs to know\n   about the policies for its\
    \ sessions.  However, subscriptions may also\n   be established by applications\
    \ (e.g., a conference server).  In those\n   cases, an authorization policy will\
    \ typically be provided for these\n   applications.\n   Responding in a timely\
    \ manner to a SUBSCRIBE request is crucial for\n   this event package.  A notifier\
    \ must minimize the time needed for\n   processing SUBSCRIBE requests and generating\
    \ the initial NOTIFY\n   request.  This includes minimizing the time needed to\
    \ generate an\n   initial policy decision.  In particular, a short response time\
    \ is\n   important for this event package since it minimizes the delay for\n \
    \  fetching policies during an INVITE transaction and therefore reduces\n   call\
    \ setup time.  In addition, subscriptions to session-specific\n   policies can\
    \ be established while the subscriber is in an INVITE\n   transaction at a point\
    \ where it has received the 200 OK but before\n   sending the ACK.  Delaying the\
    \ creation of the initial NOTIFY request\n   would delay the transmission of the\
    \ ACK.  A more detailed discussion\n   of this scenario can be found in the Session\
    \ Policy Framework\n   [RFC6794].\n   A subscriber may not have disclosed enough\
    \ information in the\n   SUBSCRIBE request to enable the notifier to generate\
    \ a policy\n   decision.  For example, a UA may have subscribed to session-specific\n\
    \   policies without including the representation of a session\n   description.\
    \  The policy server SHOULD accept such a subscription.\n   The policy server\
    \ SHOULD generate a NOTIFY request that includes the\n   \"insufficient-info\"\
    \ event package parameter.  A NOTIFY request with\n   this parameter indicates\
    \ that a policy decision could not be made due\n   to insufficient information.\
    \  The body of such a NOTIFY request can\n   either be empty or contain a policy\
    \ decision document that provides\n   hints about which information was missing.\n"
- title: 3.8.  Notifier Generation of NOTIFY Requests
  contents:
  - "3.8.  Notifier Generation of NOTIFY Requests\n   A notifier sends a notification\
    \ in response to SUBSCRIBE requests as\n   defined in RFC 6665 [RFC6665].  In\
    \ addition, a notifier MAY send a\n   notification at any time during the subscription.\
    \  Typically, it will\n   send one every time the policy decision this subscription\
    \ is for has\n   changed.  When and why a policy decision changes is entirely\
    \ at the\n   discretion of the administrator.  A policy decision can change for\n\
    \   many reasons.  For example, a network may become congested due to an\n   increase\
    \ in traffic and reduce the bandwidth available to an\n   individual user.  Another\
    \ example is a session that has been started\n   during \"business hours\" and\
    \ continues into \"evening hours\" where more\n   bandwidth or video sessions\
    \ are available to the user according to\n   the service level agreement.\n  \
    \ Policy decisions are expressed in the format negotiated for the\n   NOTIFY body\
    \ (e.g., \"application/media-policy-dataset+xml\").  The\n   policy document in\
    \ a NOTIFY body MUST represent a complete policy\n   decision.  Notifications\
    \ that contain the deltas to previous policy\n   decisions or partial policy decisions\
    \ are not supported in this event\n   package.\n   The notifier SHOULD terminate\
    \ the subscription if the policy decision\n   is to reject a session and if it\
    \ can be expected that this decision\n   will not change in the foreseeable future.\
    \  The notifier SHOULD keep\n   the subscription alive, if it rejects a session\
    \ but expects that the\n   session can be admitted soon.  For example, if the\
    \ session was\n   rejected due to a temporary shortage of resources and the notifier\n\
    \   expects that these resources will become available again shortly it\n   should\
    \ keep the subscription alive.  The decision to reject a session\n   is expressed\
    \ in the policy decision document.  A session is admitted\n   by returning a policy\
    \ decision document that requires some or no\n   changes to the session.\n   If\
    \ the notifier has not received enough information to make a policy\n   decision\
    \ from the subscriber (e.g., because it did not receive a\n   session description),\
    \ the notifier SHOULD NOT terminate the\n   subscription since it can be expected\
    \ that the UA refreshes the\n   subscription with a SUBSCRIBE request that contains\
    \ more information.\n   The notifier SHOULD generate a NOTIFY request with the\
    \ \"insufficient-\n   info\" event package parameter to indicate that a policy\
    \ decision\n   could not be made due to insufficient information.  This NOTIFY\n\
    \   request can contain an empty body or a body that contains a policy\n   decision\
    \ document indicating which information was missing.\n   Some session-specific\
    \ policies do not require the disclosure of the\n   remote session description\
    \ to the notifier.  If a notifier determines\n   that this is the case after receiving\
    \ a SUBSCRIBE request, the\n   notifier SHOULD include the \"local-only\" event\
    \ parameter in NOTIFY\n   requests.\n"
- title: 3.9.  Subscriber Processing of NOTIFY Requests
  contents:
  - "3.9.  Subscriber Processing of NOTIFY Requests\n   A subscriber MUST apply the\
    \ policy decision received in a NOTIFY\n   request to the session associated with\
    \ this subscription.  If the UA\n   decides not to apply the received policy decision,\
    \ the UA MUST NOT\n   set up the session and MUST terminate the session if the\
    \ session is\n   already in progress.  If the UA has a pending INVITE transaction\
    \ for\n   this session, the UA MUST cancel or reject the INVITE request.\n   If\
    \ the subscriber receives a NOTIFY request indicating that the\n   session has\
    \ been rejected, the subscriber MUST NOT attempt to\n   establish this session.\
    \  If the notifier has terminated the\n   subscription after rejecting the session,\
    \ the subscriber SHOULD NOT\n   try to re-send the same SUBSCRIBE request again.\
    \  The termination of\n   the subscription by the notifier indicates that the\
    \ policy decision\n   for this session is final and will not change in the foreseeable\n\
    \   future.  The subscriber MAY try to re-subscribe for this session if\n   at\
    \ least one aspect of the session (e.g., a parameter in the session\n   description\
    \ or the target URI) has changed or if there is other\n   reason to believe that\
    \ re-trying the subscription will be successful\n   (e.g., because time has progressed\
    \ significantly since the last\n   attempt).\n   The notifier may keep up the\
    \ subscription after rejecting a session\n   to indicate that it may send an updated\
    \ policy decision for this\n   session to the subscriber at a later time.  This\
    \ is useful, for\n   example, if the session was rejected due to a temporary shortage\
    \ of\n   resources and the notifier expects that this problem to be resolved\n\
    \   shortly.  In another example, the session was rejected because it was\n  \
    \ attempted in a restricted period during the day but this period is\n   going\
    \ to end soon.  In this case, the subscriber SHOULD not terminate\n   the subscription\
    \ to session-specific policies.\n   The subscriber may receive a NOTIFY request\
    \ that contains an\n   \"insufficient-info\" event package parameter to indicate\
    \ that the\n   SUBSCRIBE request did not contain enough information.  The subscriber\n\
    \   SHOULD refresh the subscription with more complete information as\n   soon\
    \ as the missing information (e.g., the session description) is\n   available.\n\
    \   A subscriber may receive an update to a policy decision for a session\n  \
    \ that is already established.  The subscriber MUST apply the new\n   policy decision\
    \ to this session.  If a UA decides that it does not\n   want to apply the new\
    \ policy decision, the UA MUST terminate the\n   session.  An updated policy decision\
    \ may require the UA to generate a\n   re-INVITE or UPDATE request in this session\
    \ if the session\n   description has changed or it may need to terminate this\
    \ session.  A\n   policy update that requires a UA to terminate a session can,\
    \ for\n   example, be triggered by the user's account running out of credit or\n\
    \   the detection of an emergency that requires the termination of non-\n   emergency\
    \ calls.\n   If the subscriber receives a NOTIFY request that contains the \"\
    local-\n   only\" event parameter, the subscriber SHOULD NOT include the remote\n\
    \   session description in subsequent SUBSCRIBE requests within this\n   subscription.\n"
- title: 3.10.  Handling of Forked Requests
  contents:
  - "3.10.  Handling of Forked Requests\n   This event package allows the creation\
    \ of only one dialog as a result\n   of an initial SUBSCRIBE request.  The techniques\
    \ to achieve this\n   behavior are described in [RFC6665].\n"
- title: 3.11.  Rate of Notifications
  contents:
  - "3.11.  Rate of Notifications\n   It is anticipated that the rate of policy changes\
    \ will be very low.\n   In any case, notifications SHOULD NOT be generated at\
    \ a rate of more\n   than once every five seconds.\n"
- title: 3.12.  State Agents
  contents:
  - "3.12.  State Agents\n   State agents play no role in this package.\n"
- title: 3.13.  Examples
  contents:
  - "3.13.  Examples\n   The following message flow illustrates how a user agent (Alice's\n\
    \   phone) can subscribe to session-specific policies when establishing a\n  \
    \ call (here to Bob's phone).  The flow assumes that the user agent has\n   already\
    \ received the policy server URI (e.g., through configuration\n   or as described\
    \ in the Session Policy Framework [RFC6794]), and it\n   does not show messages\
    \ for authentication on a transport or SIP\n   level.\n   These call flow examples\
    \ are informative and not normative.\n   Implementers should consult the main\
    \ text of this document for exact\n   protocol details.\n   Policy Server    \
    \      Alice                Bob\n       |                   |                \
    \   |\n       |(1) SUBSCRIBE      |                   |\n       |<------------------|\
    \                   |\n       |(2) 200 OK         |                   |\n    \
    \   |------------------>|                   |\n       |(3) NOTIFY         |  \
    \                 |\n       |------------------>|                   |\n      \
    \ |(4) 200 OK         |                   |\n       |<------------------|    \
    \               |\n       |                   |(5) INVITE         |\n       |\
    \                   |------------------>|\n       |                   |      \
    \             |\n       |                   |(6) 200 OK         |\n       |  \
    \                 |<------------------|\n       |                   |(7) ACK \
    \           |\n       |                   |------------------>|\n       |(8) SUBSCRIBE\
    \      |                   |\n       |<------------------|                   |\n\
    \       |(9) 200 OK         |                   |\n       |------------------>|\
    \                   |\n       |(10) NOTIFY        |                   |\n    \
    \   |------------------>|                   |\n       |(11) 200 OK        |  \
    \                 |\n       |<------------------|                   |\n      \
    \ |                   |                   |\n     Message Details\n        (1)\
    \ SUBSCRIBE  Alice -> Policy Server\n        SUBSCRIBE sips:policy@biloxi.example.com\
    \ SIP/2.0\n        Via: SIP/2.0/TLS pc.biloxi.example.com:5061\n         ;branch=z9hG4bK74bf\n\
    \        Max-Forwards: 70\n        From: Alice <sips:alice@biloxi.example.com>;tag=8675309\n\
    \        To: PS <sips:policy@biloxi.example.com>\n        Call-ID: rt4353gs2egg@pc.biloxi.example.com\n\
    \        CSeq: 1 SUBSCRIBE\n        Contact: <sips:alice@pc.biloxi.example.com>\n\
    \        Expires: 7200\n        Event: session-spec-policy\n        Accept: application/media-policy-dataset+xml\n\
    \        Content-Type: application/media-policy-dataset+xml\n        Content-Length:\
    \ ...\n        [Local session description (offer)]\n        (2) 200 OK  Policy\
    \ Server -> Alice\n        (3) NOTIFY  Policy Server -> Alice\n        NOTIFY\
    \ sips:alice@pc.biloxi.example.com SIP/2.0\n        Via: SIP/2.0/TLS srvr.biloxi.example.com:5061\n\
    \         ;branch=z9hG4bK74br\n        Max-Forwards: 70\n        From: PS <sips:policy@biloxi.example.com>;tag=31451098\n\
    \        To: Alice <sips:alice@biloxi.example.com>;tag=8675309\n        Call-ID:\
    \ rt4353gs2egg@pc.biloxi.example.com\n        CSeq: 1 NOTIFY\n        Event: session-spec-policy\n\
    \        Subscription-State: active;expires=7200\n        Content-Type: application/media-policy-dataset+xml\n\
    \        Content-Length: ...\n        [Policy for local session description (offer)]\n\
    \        (4) 200 OK  Alice -> Policy Server\n        (5) INVITE  Alice -> Bob\n\
    \        (6) 200 OK  Bob -> Alice\n        (7) ACK  Alice -> Bob\n        (8)\
    \ SUBSCRIBE  Alice -> Policy Server\n        SUBSCRIBE sips:policy@biloxi.example.com\
    \ SIP/2.0\n        Via: SIP/2.0/TLS pc.biloxi.example.com:5061\n         ;branch=z9hG4bKna998sl\n\
    \        Max-Forwards: 70\n        From: Alice <sips:alice@biloxi.example.com>;tag=8675309\n\
    \        To: PS <sips:policy@biloxi.example.com>;tag=31451098\n        Call-ID:\
    \ rt4353gs2egg@pc.biloxi.example.com\n        CSeq: 2 SUBSCRIBE\n        Expires:\
    \ 7200\n        Event: session-spec-policy\n        Accept: application/media-policy-dataset+xml\n\
    \        Content-Type: application/media-policy-dataset+xml\n        Content-Length:\
    \ ...\n        [Local session description (offer)]\n        [Remote session description\
    \ (answer)]\n        (9) 200 OK  Policy Server -> Alice\n        (10) NOTIFY \
    \ Policy Server -> Alice\n        NOTIFY sips:alice@pc.biloxi.example.com SIP/2.0\n\
    \        Via: SIP/2.0/TLS srvr.biloxi.example.com:5061\n         ;branch=z9hG4bKna998sk\n\
    \        Max-Forwards: 70\n        From: PS <sips:policy@biloxi.example.com>;tag=31451098\n\
    \        To: Alice <sips:alice@biloxi.example.com>;tag=8675309\n        Call-ID:\
    \ rt4353gs2egg@pc.biloxi.example.com\n        CSeq: 2 NOTIFY\n        Event: session-spec-policy\n\
    \        Subscription-State: active;expires=7200\n        Content-Type: application/media-policy-dataset+xml\n\
    \        Content-Length: ...\n        [Policy for local session description (offer)]\n\
    \        [Policy for remote session description (answer)]\n        F6 200 OK \
    \ Alice -> Policy Server\n"
- title: 4.  Security Considerations
  contents:
  - "4.  Security Considerations\n   Session policies can significantly change the\
    \ behavior of a user\n   agent and can therefore be used by an attacker to compromise\
    \ a user\n   agent.  For example, session policies can be used to prevent a user\n\
    \   agent from successfully establishing a session (e.g., by setting the\n   available\
    \ bandwidth to zero).  Such a policy can be submitted to the\n   user agent during\
    \ a session, which may cause the UA to terminate the\n   session.\n   A user agent\
    \ transmits session information to a policy server.  This\n   information may\
    \ contain sensitive data the user may not want an\n   eavesdropper or an unauthorized\
    \ policy server to see.  For example,\n   the session information may contain\
    \ the encryption keys for media\n   streams.  Vice versa, session policies may\
    \ also contain sensitive\n   information about the network or service level agreements\
    \ the service\n   provider may not want to disclose to an eavesdropper or an\n\
    \   unauthorized user agent.\n   It is therefore important to secure the communication\
    \ between the\n   user agent and the policy server.  The following three discrete\n\
    \   attributes need to be protected:\n   1.  authentication of the policy server\
    \ and, if needed, the user\n       agent,\n   2.  confidentiality of the messages\
    \ exchanged between the user agent\n       and the policy server, and\n   3. \
    \ ensuring that private information is not exchanged between the\n       two parties,\
    \ even over a confidentiality-assured and\n       authenticated session.\n   Authentication\
    \ of the peers and protecting the confidentiality of the\n   policies in transit\
    \ is achieved by existing SIP security mechanisms\n   (the use of TLS and SIPS\
    \ URI scheme [RFC3261], [RFC5630]).\n   Accordingly, policy servers SHOULD be\
    \ addressable only through a SIPS\n   URI.  Policy server and user agent MUST\
    \ support TLS.  The\n   confidentiality of the communication between the policy\
    \ server and\n   the user agent will be assured as long as the policy server supports\n\
    \   TLS and is reached through a SIPS URI.\n   Authenticating the two parties\
    \ can be performed using X.509\n   certificates exchanged through TLS and other\
    \ techniques such as HTTP\n   Digest.  When the user agent establishes a TLS session\
    \ with the\n   policy server, the policy server will present it with an X.509\n\
    \   certificate.  The user agent SHOULD ensure that the identity of the\n   policy\
    \ server encoded in the certificate matches the URI of the\n   policy server the\
    \ user agent has received either using the Session\n   Policy Framework [RFC6794]\
    \ or other means such as configuration.\n   When a policy server receives a new\
    \ subscription (as opposed to a\n   refresh subscription), the policy server SHOULD\
    \ try to authenticate\n   the user agent using any means at its disposal.  If\
    \ the user agent\n   has an X.509 certificate suitable for use with TLS, the identity\
    \ of\n   the user agent SHOULD be contained in the certificate, or, if the\n \
    \  user agent does not possess a certificate, the policy server SHOULD\n   challenge\
    \ the user agent using HTTP Digest.  A policy server may\n   frequently encounter\
    \ UAs it cannot authenticate.  In these cases, the\n   policy server MAY provide\
    \ a generic policy that does not reveal\n   sensitive information to these UAs.\n\
    \   If the subscriber and notifier desire to protect the integrity of the\n  \
    \ policy exchange in an end-to-end manner, they MAY use S/MIME to\n   protect\
    \ the session policies.  However, RFC3261 cautions that\n   \"[i]mplementers should\
    \ note, however, that there may be rare network\n   intermediaries (not typical\
    \ proxy servers) that rely on viewing or\n   modifying the bodies of SIP messages\
    \ (especially SDP), and that\n   secure MIME may prevent these sorts of intermediaries\
    \ from\n   functioning\" [RFC3261].\n   And finally, the fact that the user agent\
    \ and the policy server have\n   successfully authenticated each other and have\
    \ established a secure\n   TLS session does not absolve either one from ensuring\
    \ that they do\n   not communicate sensitive information.  For example, a session\n\
    \   description may contain sensitive information -- session keys, for\n   example\
    \ -- that the user agent may not want to share with the policy\n   server; and\
    \ indeed, the policy server does not need such information\n   to effectively\
    \ formulate a policy.  Thus, the user agent should not\n   insert such sensitive\
    \ information in a session information document\n   that it sends to the policy\
    \ server.  Likewise, the policy server may\n   have information that is sensitive\
    \ and of no use to the user agent --\n   network service level agreements, or\
    \ network statistics, for example.\n   Thus, the policy server should refrain\
    \ from transmitting such\n   information to the user agent.\n"
- title: 5.  IANA Considerations
  contents:
  - '5.  IANA Considerations

    '
- title: 5.1.  Event Package Name
  contents:
  - "5.1.  Event Package Name\n   This specification registers an event package as\
    \ follows, based on\n   the registration procedures defined in RFC 6665 [RFC6665].\n\
    \   Package Name: session-spec-policy\n   Package or Template-Package: This is\
    \ a package.\n   Published Document: RFC 6795.\n   Person to Contact: Volker Hilt,\
    \ volker.hilt@bell-labs.com.\n"
- title: 6.  References
  contents:
  - '6.  References

    '
- title: 6.1.  Normative References
  contents:
  - "6.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use in\
    \ RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119, March\
    \ 1997.\n   [RFC3261]  Rosenberg, J., Schulzrinne, H., Camarillo, G., Johnston,\n\
    \              A., Peterson, J., Sparks, R., Handley, M., and E.\n           \
    \   Schooler, \"SIP: Session Initiation Protocol\", RFC 3261,\n              June\
    \ 2002.\n   [RFC3263]  Rosenberg, J. and H. Schulzrinne, \"Session Initiation\n\
    \              Protocol (SIP): Locating SIP Servers\", RFC 3263,\n           \
    \   June 2002.\n   [RFC5246]  Dierks, T. and E. Rescorla, \"The Transport Layer\
    \ Security\n              (TLS) Protocol Version 1.2\", RFC 5246, August 2008.\n\
    \   [RFC6665]  Roach, A., \"SIP-Specific Event Notification\", RFC 6665,\n   \
    \           July 2012.\n   [RFC6794]  Hilt, V., Camarillo, G., and J. Rosenberg,\
    \ \"A Framework\n              for Session Initiation Protocol (SIP) Session Policies\"\
    ,\n              RFC 6794, December 2012.\n   [RFC6796]  Hilt, V., Camarillo,\
    \ G., Rosenberg, J., and D. Worley, \"A\n              User Agent Profile Data\
    \ Set for Media Policy\", RFC 6796,\n              December 2012.\n"
- title: 6.2.  Informative References
  contents:
  - "6.2.  Informative References\n   [RFC3264]  Rosenberg, J. and H. Schulzrinne,\
    \ \"An Offer/Answer Model\n              with Session Description Protocol (SDP)\"\
    , RFC 3264,\n              June 2002.\n   [RFC4566]  Handley, M., Jacobson, V.,\
    \ and C. Perkins, \"SDP: Session\n              Description Protocol\", RFC 4566,\
    \ July 2006.\n   [RFC5630]  Audet, F., \"The Use of the SIPS URI Scheme in the\
    \ Session\n              Initiation Protocol (SIP)\", RFC 5630, October 2009.\n"
- title: Appendix A.  Acknowledgements
  contents:
  - "Appendix A.  Acknowledgements\n   Many thanks to Jonathan Rosenberg for the discussions\
    \ and suggestions\n   for this document.  Many thanks to Roni Even, Bob Penfield,\
    \ Mary\n   Barnes, Shida Schubert and Jon Peterson for reviewing the document\n\
    \   and to Vijay Gurbani for the contributions to the Security\n   Considerations\
    \ section.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Volker Hilt\n   Bell Labs/Alcatel-Lucent\n   Lorenzstrasse\
    \ 10\n   70435 Stuttgart\n   Germany\n   EMail: volker.hilt@bell-labs.com\n  \
    \ Gonzalo Camarillo\n   Ericsson\n   Hirsalantie 11\n   Jorvas  02420\n   Finland\n\
    \   EMail: Gonzalo.Camarillo@ericsson.com\n"
