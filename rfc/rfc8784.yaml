- title: __initial_text__
  contents:
  - " Mixing Preshared Keys in the Internet Key Exchange Protocol Version 2\n    \
    \               (IKEv2) for Post-quantum Security\n"
- title: Abstract
  contents:
  - "Abstract\n   The possibility of quantum computers poses a serious challenge to\n\
    \   cryptographic algorithms deployed widely today.  The Internet Key\n   Exchange\
    \ Protocol Version 2 (IKEv2) is one example of a cryptosystem\n   that could be\
    \ broken; someone storing VPN communications today could\n   decrypt them at a\
    \ later time when a quantum computer is available.\n   It is anticipated that\
    \ IKEv2 will be extended to support quantum-\n   secure key exchange algorithms;\
    \ however, that is not likely to happen\n   in the near term.  To address this\
    \ problem before then, this document\n   describes an extension of IKEv2 to allow\
    \ it to be resistant to a\n   quantum computer by using preshared keys.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This\
    \ document is a product of the Internet Engineering Task Force\n   (IETF).  It\
    \ represents the consensus of the IETF community.  It has\n   received public\
    \ review and has been approved for publication by the\n   Internet Engineering\
    \ Steering Group (IESG).  Further information on\n   Internet Standards is available\
    \ in Section 2 of RFC 7841.\n   Information about the current status of this document,\
    \ any errata,\n   and how to provide feedback on it may be obtained at\n   https://www.rfc-editor.org/info/rfc8784.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2020 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (https://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction\n     1.1.  Requirements Language\n  \
    \ 2.  Assumptions\n   3.  Exchanges\n   4.  Upgrade Procedure\n   5.  PPK\n  \
    \   5.1.  PPK_ID Format\n     5.2.  Operational Considerations\n       5.2.1.\
    \  PPK Distribution\n       5.2.2.  Group PPK\n       5.2.3.  PPK-Only Authentication\n\
    \   6.  Security Considerations\n   7.  IANA Considerations\n   8.  References\n\
    \     8.1.  Normative References\n     8.2.  Informative References\n   Appendix\
    \ A.  Discussion and Rationale\n   Acknowledgements\n   Authors' Addresses\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   Recent achievements in developing quantum computers demonstrate\
    \ that\n   it is probably feasible to build one that is cryptographically\n  \
    \ significant.  If such a computer is implemented, many of the\n   cryptographic\
    \ algorithms and protocols currently in use would be\n   insecure.  A quantum\
    \ computer would be able to solve Diffie-Hellman\n   (DH) and Elliptic Curve Diffie-Hellman\
    \ (ECDH) problems in polynomial\n   time [C2PQ], and this would imply that the\
    \ security of existing IKEv2\n   [RFC7296] systems would be compromised.  IKEv1\
    \ [RFC2409], when used\n   with strong preshared keys, is not vulnerable to quantum\
    \ attacks\n   because those keys are one of the inputs to the key derivation\n\
    \   function.  If the preshared key has sufficient entropy and the\n   Pseudorandom\
    \ Function (PRF), encryption, and authentication\n   transforms are quantum secure,\
    \ then the resulting system is believed\n   to be quantum secure -- that is, secure\
    \ against classical attackers\n   of today or future attackers with a quantum\
    \ computer.\n   This document describes a way to extend IKEv2 to have a similar\n\
    \   property; assuming that the two end systems share a long secret key,\n   then\
    \ the resulting exchange is quantum secure.  By bringing post-\n   quantum security\
    \ to IKEv2, this document removes the need to use an\n   obsolete version of IKE\
    \ in order to achieve that security goal.\n   The general idea is that we add\
    \ an additional secret that is shared\n   between the initiator and the responder;\
    \ this secret is in addition\n   to the authentication method that is already\
    \ provided within IKEv2.\n   We stir this secret into the SK_d value, which is\
    \ used to generate\n   the key material (KEYMAT) for the Child Security Associations\
    \ (SAs)\n   and the SKEYSEED for the IKE SAs created as a result of the initial\n\
    \   IKE SA rekey.  This secret provides quantum resistance to the IPsec\n   SAs\
    \ and any subsequent IKE SAs.  We also stir the secret into the\n   SK_pi and\
    \ SK_pr values; this allows both sides to detect a secret\n   mismatch cleanly.\n\
    \   It was considered important to minimize the changes to IKEv2.  The\n   existing\
    \ mechanisms to perform authentication and key exchange remain\n   in place (that\
    \ is, we continue to perform (EC)DH and potentially PKI\n   authentication if\
    \ configured).  This document does not replace the\n   authentication checks that\
    \ the protocol does; instead, they are\n   strengthened by using an additional\
    \ secret key.\n"
- title: 1.1.  Requirements Language
  contents:
  - "1.1.  Requirements Language\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\"\
    , \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"\
    NOT RECOMMENDED\", \"MAY\", and\n   \"OPTIONAL\" in this document are to be interpreted\
    \ as described in\n   BCP 14 [RFC2119] [RFC8174] when, and only when, they appear\
    \ in all\n   capitals, as shown here.\n"
- title: 2.  Assumptions
  contents:
  - "2.  Assumptions\n   We assume that each IKE peer has a list of Post-quantum Preshared\n\
    \   Keys (PPKs) along with their identifiers (PPK_ID), and any potential\n   IKE\
    \ initiator selects which PPK to use with any specific responder.\n   In addition,\
    \ implementations have a configurable flag that determines\n   whether this PPK\
    \ is mandatory.  This PPK is independent of the\n   preshared key (if any) that\
    \ the IKEv2 protocol uses to perform\n   authentication (because the preshared\
    \ key in IKEv2 is not used for\n   any key derivation and thus doesn't protect\
    \ against quantum\n   computers).  The PPK-specific configuration that is assumed\
    \ to be on\n   each node consists of the following tuple:\n   Peer, PPK, PPK_ID,\
    \ mandatory_or_not\n   We assume the reader is familiar with the payload notation\
    \ defined in\n   Section 1.2 of [RFC7296].\n"
- title: 3.  Exchanges
  contents:
  - "3.  Exchanges\n   If the initiator is configured to use a PPK with the responder\n\
    \   (whether or not the use of the PPK is mandatory), then it MUST\n   include\
    \ a notification USE_PPK in the IKE_SA_INIT request message as\n   follows:\n\
    \   Initiator                       Responder\n   HDR, SAi1, KEi, Ni, N(USE_PPK)\
    \  --->\n   N(USE_PPK) is a status notification payload with the type 16435; it\n\
    \   has a protocol ID of 0, no Security Parameter Index (SPI), and no\n   notification\
    \ data associated with it.\n   If the initiator needs to resend this initial message\
    \ with a COOKIE\n   notification, then the resend would include the USE_PPK notification\n\
    \   if the original message did (see Section 2.6 of [RFC7296]).\n   If the responder\
    \ does not support this specification or does not have\n   any PPK configured,\
    \ then it ignores the received notification (as\n   defined in [RFC7296] for unknown\
    \ status notifications) and continues\n   with the IKEv2 protocol as normal. \
    \ Otherwise, the responder replies\n   with the IKE_SA_INIT message, including\
    \ a USE_PPK notification in the\n   response:\n   Initiator                  \
    \     Responder\n                   <--- HDR, SAr1, KEr, Nr, [CERTREQ,] N(USE_PPK)\n\
    \   When the initiator receives this reply, it checks whether the\n   responder\
    \ included the USE_PPK notification.  If the responder did\n   not include the\
    \ USE_PPK notification and the flag mandatory_or_not\n   indicates that using\
    \ PPKs is mandatory for communication with this\n   responder, then the initiator\
    \ MUST abort the exchange.  This\n   situation may happen in case of misconfiguration,\
    \ i.e., when the\n   initiator believes it has a mandatory-to-use PPK for the\
    \ responder\n   and the responder either doesn't support PPKs at all or doesn't\
    \ have\n   any PPK configured for the initiator.  See Section 6 for discussion\n\
    \   of the possible impacts of this situation.\n   If the responder did not include\
    \ the USE_PPK notification and using a\n   PPK for this particular responder is\
    \ optional, then the initiator\n   continues with the IKEv2 protocol as normal,\
    \ without using PPKs.\n   If the responder did include the USE_PPK notification,\
    \ then the\n   initiator selects a PPK, along with its identifier PPK_ID.  Then,\
    \ it\n   computes this modification of the standard IKEv2 key derivation from\n\
    \   Section 2.14 of [RFC7296]:\n    SKEYSEED = prf(Ni | Nr, g^ir)\n    {SK_d'\
    \ | SK_ai | SK_ar | SK_ei | SK_er | SK_pi' | SK_pr'}\n                    = prf+\
    \ (SKEYSEED, Ni | Nr | SPIi | SPIr)\n    SK_d  = prf+ (PPK, SK_d')\n    SK_pi\
    \ = prf+ (PPK, SK_pi')\n    SK_pr = prf+ (PPK, SK_pr')\n   That is, we use the\
    \ standard IKEv2 key derivation process, except\n   that the three resulting subkeys\
    \ SK_d, SK_pi, and SK_pr (marked with\n   primes in the formula above) are then\
    \ run through the prf+ again,\n   this time using the PPK as the key.  The result\
    \ is the unprimed\n   versions of these keys, which are then used as inputs to\
    \ subsequent\n   steps of the IKEv2 exchange.\n   Using a prf+ construction ensures\
    \ that it is always possible to get\n   the resulting keys of the same size as\
    \ the initial ones, even if the\n   underlying PRF has an output size different\
    \ from its key size.  Note\n   that at the time of this writing, all PRFs defined\
    \ for use in IKEv2\n   (see the \"Transform Type 2 - Pseudorandom Function Transform\
    \ IDs\"\n   subregistry [IANA-IKEV2]) have an output size equal to the\n   (preferred)\
    \ key size.  For such PRFs, only the first iteration of\n   prf+ is needed:\n\
    \    SK_d  = prf (PPK, SK_d'  | 0x01)\n    SK_pi = prf (PPK, SK_pi' | 0x01)\n\
    \    SK_pr = prf (PPK, SK_pr' | 0x01)\n   Note that the PPK is used in SK_d, SK_pi,\
    \ and SK_pr calculations only\n   during the initial IKE SA setup.  It MUST NOT\
    \ be used when these\n   subkeys are calculated as result of IKE SA rekey, resumption,\
    \ or\n   other similar operations.\n   The initiator then sends the IKE_AUTH request\
    \ message, including the\n   PPK_ID value as follows:\n   Initiator          \
    \             Responder\n   HDR, SK {IDi, [CERT,] [CERTREQ,]\n       [IDr,] AUTH,\
    \ SAi2,\n       TSi, TSr, N(PPK_IDENTITY, PPK_ID), [N(NO_PPK_AUTH)]}  --->\n \
    \  PPK_IDENTITY is a status notification with the type 16436; it has a\n   protocol\
    \ ID of 0, no SPI, and notification data that consists of the\n   identifier PPK_ID.\n\
    \   A situation may happen when the responder has some PPKs but doesn't\n   have\
    \ a PPK with the PPK_ID received from the initiator.  In this\n   case, the responder\
    \ cannot continue with the PPK (in particular, it\n   cannot authenticate the\
    \ initiator), but the responder could be able\n   to continue with the normal\
    \ IKEv2 protocol if the initiator provided\n   its authentication data computed\
    \ as in the normal IKEv2 without using\n   PPKs.  For this purpose, if using PPKs\
    \ for communication with this\n   responder is optional for the initiator (based\
    \ on the\n   mandatory_or_not flag), then the initiator MUST include a NO_PPK_AUTH\n\
    \   notification in the above message.  This notification informs the\n   responder\
    \ that PPKs are optional and allows for authenticating the\n   initiator without\
    \ using PPKs.\n   NO_PPK_AUTH is a status notification with the type 16437; it\
    \ has a\n   protocol ID of 0 and no SPI.  The Notification Data field contains\n\
    \   the initiator's authentication data computed using SK_pi', which has\n   been\
    \ computed without using PPKs.  This is the same data that would\n   normally\
    \ be placed in the Authentication Data field of an AUTH\n   payload.  Since the\
    \ Auth Method field is not present in the\n   notification, the authentication\
    \ method used for computing the\n   authentication data MUST be the same as the\
    \ method indicated in the\n   AUTH payload.  Note that if the initiator decides\
    \ to include the\n   NO_PPK_AUTH notification, the initiator needs to perform\n\
    \   authentication data computation twice, which may consume computation\n   power\
    \ (e.g., if digital signatures are involved).\n   When the responder receives\
    \ this encrypted exchange, it first\n   computes the values:\n    SKEYSEED = prf(Ni\
    \ | Nr, g^ir)\n    {SK_d' | SK_ai | SK_ar | SK_ei | SK_er | SK_pi' | SK_pr'}\n\
    \                    = prf+ (SKEYSEED, Ni | Nr | SPIi | SPIr)\n   The responder\
    \ then uses the SK_ei/SK_ai values to decrypt/check the\n   message and then scans\
    \ through the payloads for the PPK_ID attached\n   to the PPK_IDENTITY notification.\
    \  If no PPK_IDENTITY notification is\n   found and the peers successfully exchanged\
    \ USE_PPK notifications in\n   the IKE_SA_INIT exchange, then the responder MUST\
    \ send back an\n   AUTHENTICATION_FAILED notification and then fail the negotiation.\n\
    \   If the PPK_IDENTITY notification contains a PPK_ID that is not known\n   to\
    \ the responder or is not configured for use for the identity from\n   the IDi\
    \ payload, then the responder checks whether using PPKs for\n   this initiator\
    \ is mandatory and whether the initiator included a\n   NO_PPK_AUTH notification\
    \ in the message.  If using PPKs is mandatory\n   or no NO_PPK_AUTH notification\
    \ is found, then the responder MUST send\n   back an AUTHENTICATION_FAILED notification\
    \ and then fail the\n   negotiation.  Otherwise (when a PPK is optional and the\
    \ initiator\n   included a NO_PPK_AUTH notification), the responder MAY continue\
    \ the\n   regular IKEv2 protocol, except that it uses the data from the\n   NO_PPK_AUTH\
    \ notification as the authentication data (which usually\n   resides in the AUTH\
    \ payload) for the purpose of the initiator\n   authentication.  Note that the\
    \ authentication method is still\n   indicated in the AUTH payload.\n   Table\
    \ 1 summarizes the above logic for the responder:\n   | Received | Received  \
    \  | Configured | PPK is    | Action         |\n   | USE_PPK  | NO_PPK_AUTH |\
    \ with PPK   | Mandatory |                |\n   | No       | *           | No\
    \         | *         | Standard IKEv2 |\n   | No       | *           | Yes  \
    \      | No        | Standard IKEv2 |\n   | No       | *           | Yes     \
    \   | Yes       | Abort          |\n   | Yes      | No          | No         |\
    \ *         | Abort          |\n   | Yes      | Yes         | No         | Yes\
    \       | Abort          |\n   | Yes      | Yes         | No         | No    \
    \    | Standard IKEv2 |\n   | Yes      | *           | Yes        | *        \
    \ | Use PPK        |\n   If a PPK is in use, then the responder extracts the corresponding\
    \ PPK\n   and computes the following values:\n    SK_d  = prf+ (PPK, SK_d')\n\
    \    SK_pi = prf+ (PPK, SK_pi')\n    SK_pr = prf+ (PPK, SK_pr')\n   The responder\
    \ then continues with the IKE_AUTH exchange (validating\n   the AUTH payload that\
    \ the initiator included) as usual and sends back\n   a response, which includes\
    \ the PPK_IDENTITY notification with no data\n   to indicate that the PPK is used\
    \ in the exchange:\n   Initiator                       Responder\n   When the\
    \ initiator receives the response, it checks for the presence\n   of the PPK_IDENTITY\
    \ notification.  If it receives one, it marks the\n   SA as using the configured\
    \ PPK to generate SK_d, SK_pi, and SK_pr (as\n   shown above); the content of\
    \ the received PPK_IDENTITY (if any) MUST\n   be ignored.  If the initiator does\
    \ not receive the PPK_IDENTITY, it\n   MUST either fail the IKE SA negotiation\
    \ sending the\n   AUTHENTICATION_FAILED notification in the INFORMATIONAL exchange\
    \ (if\n   the PPK was configured as mandatory) or continue without using the\n\
    \   PPK (if the PPK was not configured as mandatory and the initiator\n   included\
    \ the NO_PPK_AUTH notification in the request).\n   If the Extensible Authentication\
    \ Protocol (EAP) is used in the\n   IKE_AUTH exchange, then the initiator doesn't\
    \ include the AUTH\n   payload in the first request message; however, the responder\
    \ sends\n   back the AUTH payload in the first reply.  The peers then exchange\n\
    \   AUTH payloads after EAP is successfully completed.  As a result, the\n   responder\
    \ sends the AUTH payload twice -- in the first and last\n   IKE_AUTH reply message\
    \ -- while the initiator sends the AUTH payload\n   only in the last IKE_AUTH\
    \ request.  See more details about EAP\n   authentication in IKEv2 in Section\
    \ 2.16 of [RFC7296].\n   The general rule for using a PPK in the IKE_AUTH exchange,\
    \ which\n   covers the EAP authentication case too, is that the initiator\n  \
    \ includes a PPK_IDENTITY (and optionally a NO_PPK_AUTH) notification\n   in the\
    \ request message containing the AUTH payload.  Therefore, in\n   case of EAP,\
    \ the responder always computes the AUTH payload in the\n   first IKE_AUTH reply\
    \ message without using a PPK (by means of\n   SK_pr'), since PPK_ID is not yet\
    \ known to the responder.  Once the\n   IKE_AUTH request message containing the\
    \ PPK_IDENTITY notification is\n   received, the responder follows the rules described\
    \ above for the\n   non-EAP authentication case.\n      Initiator            \
    \             Responder\n      HDR, SK {IDi, [CERTREQ,]\n          [IDr,] SAi2,\n\
    \          TSi, TSr}  -->\n      HDR, SK {EAP}  -->\n      HDR, SK {AUTH,\n  \
    \        N(PPK_IDENTITY, PPK_ID)\n          [, N(NO_PPK_AUTH)]}  -->\n   Note\
    \ that the diagram above shows both the cases when the responder\n   uses a PPK\
    \ and when it chooses not to use it (provided the initiator\n   has included the\
    \ NO_PPK_AUTH notification); thus, the responder's\n   PPK_IDENTITY notification\
    \ is marked as optional.  Also, note that the\n   IKE_SA_INIT exchange using a\
    \ PPK is as described above (including\n   exchange of the USE_PPK notifications),\
    \ regardless of whether or not\n   EAP is employed in the IKE_AUTH.\n"
- title: 4.  Upgrade Procedure
  contents:
  - "4.  Upgrade Procedure\n   This algorithm was designed so that someone can introduce\
    \ PPKs into\n   an existing IKE network without causing network disruption.\n\
    \   In the initial phase of the network upgrade, the network\n   administrator\
    \ would visit each IKE node and configure:\n   *  The set of PPKs (and corresponding\
    \ PPK_IDs) that this node would\n      need to know.\n   *  The PPK that will\
    \ be used for each peer that this node would\n      initiate to.\n   *  The value\
    \ \"false\" for the mandatory_or_not flag for each peer that\n      this node\
    \ would initiate to (thus indicating that the use of PPKs\n      is not mandatory).\n\
    \   With this configuration, the node will continue to operate with nodes\n  \
    \ that have not yet been upgraded.  This is due to the USE_PPK\n   notification\
    \ and the NO_PPK_AUTH notification; if the initiator has\n   not been upgraded,\
    \ it will not send the USE_PPK notification (and so\n   the responder will know\
    \ that the peers will not use a PPK).  If the\n   responder has not been upgraded,\
    \ it will not send the USE_PPK\n   notification (and so the initiator will know\
    \ to not use a PPK).  If\n   both peers have been upgraded but the responder isn't\
    \ yet configured\n   with the PPK for the initiator, then the responder could\
    \ continue\n   with the standard IKEv2 protocol if the initiator sent a NO_PPK_AUTH\n\
    \   notification.  If both the responder and initiator have been upgraded\n  \
    \ and properly configured, they will both realize it, and the Child SAs\n   will\
    \ be quantum secure.\n   As an optional second step, after all nodes have been\
    \ upgraded, the\n   administrator should then go back through the nodes and mark\
    \ the use\n   of a PPK as mandatory.  This will not affect the strength against\
    \ a\n   passive attacker, but it would mean that an active attacker with a\n \
    \  quantum computer (which is sufficiently fast to be able to break the\n   (EC)DH\
    \ in real time) would not be able to perform a downgrade attack.\n"
- title: 5.  PPK
  contents:
  - '5.  PPK

    '
- title: 5.1.  PPK_ID Format
  contents:
  - "5.1.  PPK_ID Format\n   This standard requires that both the initiator and the\
    \ responder have\n   a secret PPK value, with the responder selecting the PPK\
    \ based on the\n   PPK_ID that the initiator sends.  In this standard, both the\n\
    \   initiator and the responder are configured with fixed PPK and PPK_ID\n   values\
    \ and perform the lookup based on the PPK_ID value.  It is\n   anticipated that\
    \ later specifications will extend this technique to\n   allow dynamically changing\
    \ PPK values.  To facilitate such an\n   extension, we specify that the PPK_ID\
    \ the initiator sends will have\n   its first octet be the PPK_ID type value.\
    \  This document defines two\n   values for the PPK_ID type:\n   *  PPK_ID_OPAQUE\
    \ (1) - For this type, the format of the PPK_ID (and\n      the PPK itself) is\
    \ not specified by this document; it is assumed\n      to be mutually intelligible\
    \ by both the initiator and the\n      responder.  This PPK_ID type is intended\
    \ for those implementations\n      that choose not to disclose the type of PPK\
    \ to active attackers.\n   *  PPK_ID_FIXED (2) - In this case, the format of the\
    \ PPK_ID and the\n      PPK are fixed octet strings; the remaining bytes of the\
    \ PPK_ID are\n      a configured value.  We assume that there is a fixed mapping\n\
    \      between PPK_ID and PPK, which is configured locally to both the\n     \
    \ initiator and the responder.  The responder can use the PPK_ID to\n      look\
    \ up the corresponding PPK value.  Not all implementations are\n      able to\
    \ configure arbitrary octet strings; to improve the\n      potential interoperability,\
    \ it is recommended that, in the\n      PPK_ID_FIXED case, both the PPK and the\
    \ PPK_ID strings be limited\n      to the base64 character set [RFC4648].\n"
- title: 5.2.  Operational Considerations
  contents:
  - "5.2.  Operational Considerations\n   The need to maintain several independent\
    \ sets of security credentials\n   can significantly complicate a security administrator's\
    \ job and can\n   potentially slow down widespread adoption of this specification.\
    \  It\n   is anticipated that administrators will try to simplify their job by\n\
    \   decreasing the number of credentials they need to maintain.  This\n   section\
    \ describes some of the considerations for PPK management.\n"
- title: 5.2.1.  PPK Distribution
  contents:
  - "5.2.1.  PPK Distribution\n   PPK_IDs of the type PPK_ID_FIXED (and the corresponding\
    \ PPKs) are\n   assumed to be configured within the IKE device in an out-of-band\n\
    \   fashion.  While the method of distribution is a local matter and is\n   out\
    \ of scope of this document or IKEv2, [RFC6030] describes a format\n   for the\
    \ transport and provisioning of symmetric keys.  That format\n   could be reused\
    \ using the PIN profile (defined in Section 10.2 of\n   [RFC6030]) with the \"\
    Id\" attribute of the <Key> element being the\n   PPK_ID (without the PPK_ID type\
    \ octet for a PPK_ID_FIXED) and the\n   <Secret> element containing the PPK.\n"
- title: 5.2.2.  Group PPK
  contents:
  - "5.2.2.  Group PPK\n   This document doesn't explicitly require that the PPK be\
    \ unique for\n   each pair of peers.  If this is the case, then this solution\
    \ provides\n   full peer authentication, but it also means that each host must\
    \ have\n   as many independent PPKs as peers it is going to communicate with.\n\
    \   As the number of peers grows, the PPKs will not scale.\n   It is possible\
    \ to use a single PPK for a group of users.  Since each\n   peer uses classical\
    \ public key cryptography in addition to a PPK for\n   key exchange and authentication,\
    \ members of the group can neither\n   impersonate each other nor read each other's\
    \ traffic unless they use\n   quantum computers to break public key operations.\
    \  However, group\n   members can record any traffic they have access to that\
    \ comes from\n   other group members and decrypt it later, when they get access\
    \ to a\n   quantum computer.\n   In addition, the fact that the PPK is known to\
    \ a (potentially large)\n   group of users makes it more susceptible to theft.\
    \  When an attacker\n   equipped with a quantum computer gets access to a group\
    \ PPK, all\n   communications inside the group are revealed.\n   For these reasons,\
    \ using a group PPK is NOT RECOMMENDED.\n"
- title: 5.2.3.  PPK-Only Authentication
  contents:
  - "5.2.3.  PPK-Only Authentication\n   If quantum computers become a reality, classical\
    \ public key\n   cryptography will provide little security, so administrators\
    \ may find\n   it attractive not to use it at all for authentication.  This will\n\
    \   reduce the number of credentials they need to maintain because they\n   only\
    \ need to maintain PPK credentials.  Combining group PPK and PPK-\n   only authentication\
    \ is NOT RECOMMENDED since, in this case, any\n   member of the group can impersonate\
    \ any other member, even without\n   the help of quantum computers.\n   PPK-only\
    \ authentication can be achieved in IKEv2 if the NULL\n   Authentication method\
    \ [RFC7619] is employed.  Without PPK, the NULL\n   Authentication method provides\
    \ no authentication of the peers;\n   however, since a PPK is stirred into the\
    \ SK_pi and the SK_pr, the\n   peers become authenticated if a PPK is in use.\
    \  Using PPKs MUST be\n   mandatory for the peers if they advertise support for\
    \ PPKs in\n   IKE_SA_INIT and use NULL Authentication.  Additionally, since the\n\
    \   peers are authenticated via PPKs, the ID Type in the IDi/IDr payloads\n  \
    \ SHOULD NOT be ID_NULL, despite using the NULL Authentication method.\n"
- title: 6.  Security Considerations
  contents:
  - "6.  Security Considerations\n   A critical consideration is how to ensure the\
    \ randomness of this\n   post-quantum preshared key.  Quantum computers are able\
    \ to perform\n   Grover's algorithm [GROVER]; that effectively halves the size\
    \ of a\n   symmetric key.  In addition, an adversary impersonating the server,\n\
    \   even with a conventional computer, can perform a dictionary search\n   over\
    \ plausible post-quantum preshared key values.  The strongest\n   practice is\
    \ to ensure that any post-quantum preshared key contains at\n   least 256 bits\
    \ of entropy; this will provide 128 bits of post-quantum\n   security, while providing\
    \ security against conventional dictionary\n   attacks.  That provides the security\
    \ equivalent to Category 5 as\n   defined in the NIST Post-Quantum Cryptography\
    \ Call for Proposals\n   [NISTPQCFP].  Deriving a post-quantum preshared key from\
    \ a password,\n   name, or other low-entropy source is not secure because of these\n\
    \   known attacks.\n   With this protocol, the computed SK_d is a function of\
    \ the PPK.\n   Assuming that the PPK has sufficient entropy (for example, at least\n\
    \   2^(256) possible values), even if an attacker was able to recover the\n  \
    \ rest of the inputs to the PRF function, it would be infeasible to use\n   Grover's\
    \ algorithm with a quantum computer to recover the SK_d value.\n   Similarly,\
    \ all keys that are a function of SK_d, which include all\n   Child SA keys and\
    \ all keys for subsequent IKE SAs (created when the\n   initial IKE SA is rekeyed),\
    \ are also quantum secure (assuming that\n   the PPK was of high enough entropy\
    \ and that all the subkeys are\n   sufficiently long).\n   An attacker with a\
    \ quantum computer that can decrypt the initial IKE\n   SA has access to all the\
    \ information exchanged over it, such as\n   identities of the peers, configuration\
    \ parameters, and all negotiated\n   IPsec SA information (including traffic selectors),\
    \ with the\n   exception of the cryptographic keys used by the IPsec SAs, which\
    \ are\n   protected by the PPK.\n   Deployments that treat this information as\
    \ sensitive or that send\n   other sensitive data (like cryptographic keys) over\
    \ IKE SAs MUST\n   rekey the IKE SA before the sensitive information is sent to\
    \ ensure\n   this information is protected by the PPK.  It is possible to create\
    \ a\n   childless IKE SA as specified in [RFC6023].  This prevents Child SA\n\
    \   configuration information from being transmitted in the original IKE\n   SA\
    \ that is not protected by a PPK.  Some information related to IKE\n   SA that\
    \ is sent in the IKE_AUTH exchange, such as peer identities,\n   feature notifications,\
    \ vendor IDs, etc., cannot be hidden from the\n   attack described above, even\
    \ if the additional IKE SA rekey is\n   performed.\n   In addition, the policy\
    \ SHOULD be set to negotiate only quantum-\n   secure symmetric algorithms; while\
    \ this RFC doesn't claim to give\n   advice as to what algorithms are secure (as\
    \ that may change based on\n   future cryptographical results), below is a list\
    \ of defined IKEv2 and\n   IPsec algorithms that should not be used, as they are\
    \ known to\n   provide less than 128 bits of post-quantum security:\n   *  Any\
    \ IKEv2 encryption algorithm, PRF, or integrity algorithm with a\n      key size\
    \ less than 256 bits.\n   *  Any ESP transform with a key size less than 256 bits.\n\
    \   *  PRF_AES128_XCBC and PRF_AES128_CBC: even though they can use as\n     \
    \ input a key of arbitrary size, such input keys are converted into\n      a 128-bit\
    \ key for internal use.\n   Section 3 requires the initiator to abort the initial\
    \ exchange if\n   using PPKs is mandatory for it but the responder does not include\
    \ the\n   USE_PPK notification in the response.  In this situation, when the\n\
    \   initiator aborts the negotiation, it leaves a half-open IKE SA on the\n  \
    \ responder (because IKE_SA_INIT completes successfully from the\n   responder's\
    \ point of view).  This half-open SA will eventually expire\n   and be deleted,\
    \ but if the initiator continues its attempts to create\n   IKE SA with a high\
    \ enough rate, then the responder may consider it a\n   denial-of-service (DoS)\
    \ attack and take protective measures (see\n   [RFC8019] for more details).  In\
    \ this situation, it is RECOMMENDED\n   that the initiator cache the negative\
    \ result of the negotiation and\n   not attempt to create it again for some time.\
    \  This period of time\n   may vary, but it is believed that waiting for at least\
    \ few minutes\n   will not cause the responder to treat it as a DoS attack.  Note\
    \ that\n   this situation would most likely be a result of misconfiguration, and\n\
    \   some reconfiguration of the peers would probably be needed.\n   If using PPKs\
    \ is optional for both peers and they authenticate\n   themselves using digital\
    \ signatures, then an attacker in between,\n   equipped with a quantum computer\
    \ capable of breaking public key\n   operations in real time, is able to mount\
    \ a downgrade attack by\n   removing the USE_PPK notification from the IKE_SA_INIT\
    \ and forging\n   digital signatures in the subsequent exchange.  If using PPKs\
    \ is\n   mandatory for at least one of the peers or if a preshared key mode is\n\
    \   used for authentication, then the attack will be detected and the SA\n   won't\
    \ be created.\n   If using PPKs is mandatory for the initiator, then an attacker\
    \ able\n   to eavesdrop and inject packets into the network can prevent creation\n\
    \   of an IKE SA by mounting the following attack.  The attacker\n   intercepts\
    \ the initial request containing the USE_PPK notification\n   and injects a forged\
    \ response containing no USE_PPK.  If the attacker\n   manages to inject this\
    \ packet before the responder sends a genuine\n   response, then the initiator\
    \ would abort the exchange.  To thwart\n   this kind of attack, it is RECOMMENDED\
    \ that, if using PPKs is\n   mandatory for the initiator and the received response\
    \ doesn't contain\n   the USE_PPK notification, the initiator not abort the exchange\n\
    \   immediately.  Instead, it waits for more response messages,\n   retransmitting\
    \ the request as if no responses were received at all,\n   until either the received\
    \ message contains the USE_PPK notification\n   or the exchange times out (see\
    \ Section 2.4 of [RFC7296] for more\n   details about retransmission timers in\
    \ IKEv2).  If none of the\n   received responses contains USE_PPK, then the exchange\
    \ is aborted.\n   If using a PPK is optional for both peers, then in case of\n\
    \   misconfiguration (e.g., mismatched PPK_ID), the IKE SA will be\n   created\
    \ without protection against quantum computers.  It is advised\n   that if a PPK\
    \ was configured but was not used for a particular IKE\n   SA, then implementations\
    \ SHOULD audit this event.\n"
- title: 7.  IANA Considerations
  contents:
  - "7.  IANA Considerations\n   This document defines three new Notify Message Types\
    \ in the \"IKEv2\n   Notify Message Types - Status Types\" subregistry under the\
    \ \"Internet\n   Key Exchange Version 2 (IKEv2) Parameters\" registry [IANA-IKEV2]:\n\
    \          | Value | NOTIFY MESSAGES - STATUS TYPES | Reference |\n          |\
    \ 16435 | USE_PPK                        | RFC 8784  |\n          | 16436 | PPK_IDENTITY\
    \                   | RFC 8784  |\n          | 16437 | NO_PPK_AUTH           \
    \         | RFC 8784  |\n   Per this document, IANA has created a new subregistry\
    \ titled \"IKEv2\n   Post-quantum Preshared Key ID Types\" under the \"Internet\
    \ Key Exchange\n   Version 2 (IKEv2) Parameters\" registry [IANA-IKEV2].  This\
    \ new\n   subregistry is for the PPK_ID types used in the PPK_IDENTITY\n   notification\
    \ defined in this specification.  The initial contents of\n   the new subregistry\
    \ are as follows:\n            | Value   | PPK_ID Type              | Reference\
    \ |\n            | 0       | Reserved                 | RFC 8784  |\n        \
    \    | 1       | PPK_ID_OPAQUE            | RFC 8784  |\n            | 2     \
    \  | PPK_ID_FIXED             | RFC 8784  |\n            | 3-127   | Unassigned\
    \               | RFC 8784  |\n            | 128-255 | Reserved for Private Use\
    \ | RFC 8784  |\n   The PPK_ID type value 0 is reserved; values 3-127 are to be\
    \ assigned\n   by IANA; and values 128-255 are for private use among mutually\n\
    \   consenting parties.  To register new PPK_IDs in the Unassigned range,\n  \
    \ a type name, a value between 3 and 127, and a reference specification\n   need\
    \ to be defined.  Changes and additions to the Unassigned range of\n   this registry\
    \ are made using the Expert Review policy [RFC8126].\n   Changes and additions\
    \ to the Reserved for Private Use range of this\n   registry are made using the\
    \ Private Use policy [RFC8126].\n"
- title: 8.  References
  contents:
  - '8.  References

    '
- title: 8.1.  Normative References
  contents:
  - "8.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use in\
    \ RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119,\n  \
    \            DOI 10.17487/RFC2119, March 1997,\n              <https://www.rfc-editor.org/info/rfc2119>.\n\
    \   [RFC7296]  Kaufman, C., Hoffman, P., Nir, Y., Eronen, P., and T.\n       \
    \       Kivinen, \"Internet Key Exchange Protocol Version 2\n              (IKEv2)\"\
    , STD 79, RFC 7296, DOI 10.17487/RFC7296, October\n              2014, <https://www.rfc-editor.org/info/rfc7296>.\n\
    \   [RFC8174]  Leiba, B., \"Ambiguity of Uppercase vs Lowercase in RFC\n     \
    \         2119 Key Words\", BCP 14, RFC 8174, DOI 10.17487/RFC8174,\n        \
    \      May 2017, <https://www.rfc-editor.org/info/rfc8174>.\n"
- title: 8.2.  Informative References
  contents:
  - "8.2.  Informative References\n   [C2PQ]     Hoffman, P., \"The Transition from\
    \ Classical to Post-\n              Quantum Cryptography\", Work in Progress,\
    \ Internet-Draft,\n              draft-hoffman-c2pq-07, 26 May 2020,\n       \
    \       <https://tools.ietf.org/html/draft-hoffman-c2pq-07>.\n   [GROVER]   Grover,\
    \ L., \"A Fast Quantum Mechanical Algorithm for\n              Database Search\"\
    , STOC '96: Proceedings of the Twenty-\n              Eighth Annual ACM Symposium\
    \ on the Theory of Computing,\n              pp. 212-219\", DOI 10.1145/237814.237866,\
    \ July 1996,\n              <https://doi.org/10.1145/237814.237866>.\n   [IANA-IKEV2]\n\
    \              IANA, \"Internet Key Exchange Version 2 (IKEv2)\n             \
    \ Parameters\",\n              <https://www.iana.org/assignments/ikev2-parameters/>.\n\
    \   [NISTPQCFP]\n              NIST, \"Submission Requirements and Evaluation\
    \ Criteria for\n              the Post-Quantum Cryptography Standardization Process\"\
    ,\n              December 2016, <https://csrc.nist.gov/CSRC/media/Projects/\n\
    \              Post-Quantum-Cryptography/documents/call-for-proposals-\n     \
    \         final-dec-2016.pdf>.\n   [RFC2409]  Harkins, D. and D. Carrel, \"The\
    \ Internet Key Exchange\n              (IKE)\", RFC 2409, DOI 10.17487/RFC2409,\
    \ November 1998,\n              <https://www.rfc-editor.org/info/rfc2409>.\n \
    \  [RFC4648]  Josefsson, S., \"The Base16, Base32, and Base64 Data\n         \
    \     Encodings\", RFC 4648, DOI 10.17487/RFC4648, October 2006,\n           \
    \   <https://www.rfc-editor.org/info/rfc4648>.\n   [RFC6023]  Nir, Y., Tschofenig,\
    \ H., Deng, H., and R. Singh, \"A\n              Childless Initiation of the Internet\
    \ Key Exchange Version\n              2 (IKEv2) Security Association (SA)\", RFC\
    \ 6023,\n              DOI 10.17487/RFC6023, October 2010,\n              <https://www.rfc-editor.org/info/rfc6023>.\n\
    \   [RFC6030]  Hoyer, P., Pei, M., and S. Machani, \"Portable Symmetric\n    \
    \          Key Container (PSKC)\", RFC 6030, DOI 10.17487/RFC6030,\n         \
    \     October 2010, <https://www.rfc-editor.org/info/rfc6030>.\n   [RFC7619] \
    \ Smyslov, V. and P. Wouters, \"The NULL Authentication\n              Method\
    \ in the Internet Key Exchange Protocol Version 2\n              (IKEv2)\", RFC\
    \ 7619, DOI 10.17487/RFC7619, August 2015,\n              <https://www.rfc-editor.org/info/rfc7619>.\n\
    \   [RFC8019]  Nir, Y. and V. Smyslov, \"Protecting Internet Key Exchange\n  \
    \            Protocol Version 2 (IKEv2) Implementations from\n              Distributed\
    \ Denial-of-Service Attacks\", RFC 8019,\n              DOI 10.17487/RFC8019,\
    \ November 2016,\n              <https://www.rfc-editor.org/info/rfc8019>.\n \
    \  [RFC8126]  Cotton, M., Leiba, B., and T. Narten, \"Guidelines for\n       \
    \       Writing an IANA Considerations Section in RFCs\", BCP 26,\n          \
    \    RFC 8126, DOI 10.17487/RFC8126, June 2017,\n              <https://www.rfc-editor.org/info/rfc8126>.\n"
- title: Appendix A.  Discussion and Rationale
  contents:
  - "Appendix A.  Discussion and Rationale\n   The primary goal of this document is\
    \ to augment the IKEv2 protocol to\n   provide protection against quantum computers\
    \ without requiring novel\n   cryptographic algorithms.  The idea behind this\
    \ document is that\n   while a quantum computer can easily reconstruct the shared\
    \ secret of\n   an (EC)DH exchange, it cannot as easily recover a secret from\
    \ a\n   symmetric exchange.  This document makes the SK_d (and thus also the\n\
    \   IPsec KEYMAT and any subsequent IKE SA's SKEYSEED) depend on both the\n  \
    \ symmetric PPK and the Diffie-Hellman exchange.  If we assume that the\n   attacker\
    \ knows everything except the PPK during the key exchange and\n   there are 2^(n)\
    \ plausible PPKs, then a quantum computer (using\n   Grover's algorithm) would\
    \ take O(2^(n/2)) time to recover the PPK.\n   So, even if the (EC)DH can be trivially\
    \ solved, the attacker still\n   can't recover any key material (except for the\
    \ SK_ei, SK_er, SK_ai,\n   and SK_ar values for the initial IKE exchange) unless\
    \ they can find\n   the PPK, which is too difficult if the PPK has enough entropy\
    \ (for\n   example, 256 bits).  Note that we do allow an attacker with a quantum\n\
    \   computer to rederive the keying material for the initial IKE SA; this\n  \
    \ was a compromise to allow the responder to select the correct PPK\n   quickly.\n\
    \   Another goal of this protocol is to minimize the number of changes\n   within\
    \ the IKEv2 protocol, in particular, within the cryptography of\n   IKEv2.  By\
    \ limiting our changes to notifications and only adjusting\n   the SK_d, SK_pi,\
    \ and SK_pr, it is hoped that this would be\n   implementable, even on systems\
    \ that perform most of the IKEv2\n   processing in hardware.\n   A third goal\
    \ is to be friendly to incremental deployment in\n   operational networks for\
    \ which we might not want to have a global\n   shared key or for which quantum-secure\
    \ IKEv2 is rolled out\n   incrementally.  This is why we specifically try to allow\
    \ the PPK to\n   be dependent on the peer and why we allow the PPK to be configured\
    \ as\n   optional.\n   A fourth goal is to avoid violating any of the security\
    \ properties\n   provided by IKEv2.\n"
- title: Acknowledgements
  contents:
  - "Acknowledgements\n   We would like to thank Tero Kivinen, Paul Wouters, Graham\
    \ Bartlett,\n   Tommy Pauly, Quynh Dang, and the rest of the IPSECME Working Group\n\
    \   for their feedback and suggestions for the scheme.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Scott Fluhrer\n   Cisco Systems\n   Email: sfluhrer@cisco.com\n\
    \   Panos Kampanakis\n   Cisco Systems\n   Email: pkampana@cisco.com\n   David\
    \ McGrew\n   Cisco Systems\n   Email: mcgrew@cisco.com\n   Valery Smyslov\n  \
    \ ELVIS-PLUS\n"
