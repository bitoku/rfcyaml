- title: __initial_text__
  contents:
  - "                     TCP Performance Implications\n                       of\
    \ Network Path Asymmetry\n"
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This document specifies an Internet Best Current Practices\
    \ for the\n   Internet Community, and requests discussion and suggestions for\n\
    \   improvements.  Distribution of this memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2002).  All Rights Reserved.\n"
- title: Abstract
  contents:
  - "Abstract\n   This document describes TCP performance problems that arise because\n\
    \   of asymmetric effects.  These problems arise in several access\n   networks,\
    \ including bandwidth-asymmetric networks and packet radio\n   subnetworks, for\
    \ different underlying reasons.  However, the end\n   result on TCP performance\
    \ is the same in both cases: performance\n   often degrades significantly because\
    \ of imperfection and variability\n   in the ACK feedback from the receiver to\
    \ the sender.\n   The document details several mitigations to these effects, which\
    \ have\n   either been proposed or evaluated in the literature, or are currently\n\
    \   deployed in networks.  These solutions use a combination of local\n   link-layer\
    \ techniques, subnetwork, and end-to-end mechanisms,\n   consisting of: (i) techniques\
    \ to manage the channel used for the\n   upstream bottleneck link carrying the\
    \ ACKs, typically using header\n   compression or reducing the frequency of TCP\
    \ ACKs, (ii) techniques to\n   handle this reduced ACK frequency to retain the\
    \ TCP sender's\n   acknowledgment-triggered self-clocking and (iii) techniques\
    \ to\n   schedule the data and ACK packets in the reverse direction to improve\n\
    \   performance in the presence of two-way traffic.  Each technique is\n   described,\
    \ together with known issues, and recommendations for use.\n   A summary of the\
    \ recommendations is provided at the end of the\n   document.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Conventions used in this Document ...............................3\n\
    \     2. Motivation ....................................................4\n  \
    \   2.1 Asymmetry due to Differences in Transmit\n         and Receive Capacity\
    \ .........................................4\n     2.2 Asymmetry due to Shared\
    \ Media in the Reverse Direction .......5\n     2.3 The General Problem ..........................................5\n\
    \   3. How does Asymmetry Degrade TCP Performance? .....................5\n  \
    \   3.1 Asymmetric Capacity ..........................................5\n    \
    \ 3.2 MAC Protocol Interactions ....................................7\n     3.3\
    \ Bidirectional Traffic ........................................8\n     3.4 Loss\
    \ in Asymmetric Network Paths ............................10\n   4. Improving\
    \ TCP Performance using Host Mitigations ...............10\n     4.1 Modified\
    \ Delayed ACKs .......................................11\n     4.2 Use of Large\
    \ MSS ............................................12\n     4.3 ACK Congestion\
    \ Control ......................................13\n     4.4 Window Prediction\
    \ Mechanism .................................14\n     4.5 Acknowledgement based\
    \ on Cwnd Estimation. ...................14\n     4.6 TCP Sender Pacing ...........................................14\n\
    \     4.7 TCP Byte Counting ...........................................15\n  \
    \   4.8 Backpressure ................................................16\n   5.\
    \ Improving TCP performance using Transparent Modifications ......17\n     5.1\
    \ TYPE 0: Header Compression ..................................18\n       5.1.1\
    \ TCP Header Compression ..................................18\n       5.1.2 Alternate\
    \ Robust Header Compression Algorithms ..........19\n     5.2 TYPE 1: Reverse\
    \ Link Bandwidth Management ...................19\n       5.2.1 ACK Filtering\
    \ ...........................................20\n       5.2.2 ACK Decimation ..........................................21\n\
    \     5.3 TYPE 2: Handling Infrequent ACKs ............................22\n  \
    \     5.3.1 ACK Reconstruction ......................................23\n    \
    \   5.3.2 ACK Compaction and Companding ...........................25\n      \
    \ 5.3.3 Mitigating TCP packet bursts generated by\n             Infrequent ACKs\
    \ .........................................26\n     5.4 TYPE 3: Upstream Link\
    \ Scheduling ............................27\n       5.4.1 Per-Flow queuing at\
    \ the Upstream Bottleneck Link ........27\n       5.4.2 ACKs-first Scheduling\
    \ ...................................28\n   6. Security Considerations ........................................29\n\
    \   7. Summary ........................................................30\n  \
    \ 8. Acknowledgments ................................................32\n   9.\
    \ References .....................................................32\n   10. IANA\
    \ Considerations ...........................................37\n   Appendix: Examples\
    \ of Subnetworks Exhibiting Network Path\n             Asymmetry ...............................................38\n\
    \   Authors' Addresses ................................................40\n  \
    \ Full Copyright Statement ..........................................41\n"
- title: 1. Conventions used in this Document
  contents:
  - "1. Conventions used in this Document\n   FORWARD DIRECTION: The dominant direction\
    \ of data transfer over an\n   asymmetric network path.  It corresponds to the\
    \ direction with better\n   characteristics in terms of capacity, latency, error\
    \ rate, etc.  Data\n   transfer in the forward direction is called \"forward transfer\"\
    .\n   Packets travelling in the forward direction follow the forward path\n  \
    \ through the IP network.\n   REVERSE DIRECTION: The direction in which acknowledgments\
    \ of a\n   forward TCP transfer flow.  Data transfer could also happen in this\n\
    \   direction (and is termed \"reverse transfer\"), but it is typically\n   less\
    \ voluminous than that in the forward direction.  The reverse\n   direction typically\
    \ exhibits worse characteristics than the forward\n   direction.  Packets travelling\
    \ in the reverse direction follow the\n   reverse path through the IP network.\n\
    \   UPSTREAM LINK: The specific bottleneck link that normally has much\n   less\
    \ capability than the corresponding downstream link.  Congestion\n   is not confined\
    \ to this link alone, and may also occur at any point\n   along the forward and\
    \ reverse directions (e.g., due to sharing with\n   other traffic flows).\n  \
    \ DOWNSTREAM LINK: A link on the forward path, corresponding to the\n   upstream\
    \ link.\n   ACK: A cumulative TCP acknowledgment [RFC791].  In this document,\n\
    \   this term refers to a TCP segment that carries a cumulative\n   acknowledgement\
    \ (ACK), but no data.\n   DELAYED ACK FACTOR, d: The number of TCP data segments\
    \ acknowledged\n   by a TCP ACK.  The minimum value of d is 1, since at most one\
    \ ACK\n   should be sent for each data packet [RFC1122, RFC2581].\n   STRETCH\
    \ ACK: Stretch ACKs are acknowledgements that cover more than 2\n   segments of\
    \ previously unacknowledged data (d>2) [RFC2581].  Stretch\n   ACKs can occur\
    \ by design (although this is not standard), due to\n   implementation bugs [All97b,\
    \ RFC2525], or due to ACK loss [RFC2760].\n   NORMALIZED BANDWIDTH RATIO, k: \
    \ The ratio of the raw bandwidth\n   (capacity) of the forward direction to the\
    \ return direction, divided\n   by the ratio of the packet sizes used in the two\
    \ directions [LMS97].\n   SOFTSTATE: Per-flow state established in a network device\
    \ that is\n   used by the protocol [Cla88].  The state expires after a period\
    \ of\n   time (i.e., is not required to be explicitly deleted when a session\n\
    \   expires), and is continuously refreshed while a flow continues (i.e.,\n  \
    \ lost state may be reconstructed without needing to exchange\n   additional control\
    \ messages).\n"
- title: 2. Motivation
  contents:
  - "2. Motivation\n   Asymmetric characteristics are exhibited by several network\n\
    \   technologies, including cable data networks, (e.g., DOCSIS cable TV\n   networks\
    \ [DS00, DS01]), direct broadcast satellite (e.g., an IP\n   service using Digital\
    \ Video Broadcast, DVB, [EN97] with an\n   interactive return channel), Very Small\
    \ Aperture satellite Terminals\n   (VSAT), Asymmetric Digital Subscriber Line\
    \ (ADSL) [ITU02, ANS01], and\n   several packet radio networks.  These networks\
    \ are increasingly being\n   deployed as high-speed Internet access networks,\
    \ and it is therefore\n   highly desirable to achieve good TCP performance.  However,\
    \ the\n   asymmetry of the network paths often makes this challenging.\n   Examples\
    \ of some networks that exhibit asymmetry are provided in the\n   Appendix.\n\
    \   Asymmetry may manifest itself as a difference in transmit and receive\n  \
    \ capacity, an imbalance in the packet loss rate, or differences\n   between the\
    \ transmit and receive paths [RFC3077].  For example, when\n   capacity is asymmetric,\
    \ such that there is reduced capacity on\n   reverse path used by TCP ACKs, slow\
    \ or infrequent ACK feedback\n   degrades TCP performance in the forward direction.\
    \  Similarly,\n   asymmetry in the underlying Medium Access Control (MAC) and\
    \ Physical\n   (PHY) protocols could make it expensive to transmit TCP ACKs\n\
    \   (disproportionately to their size), even when capacity is symmetric.\n"
- title: 2.1  Asymmetry due to Differences in Transmit and Receive Capacity
  contents:
  - "2.1  Asymmetry due to Differences in Transmit and Receive Capacity\n   Network\
    \ paths may be asymmetric because the upstream and downstream\n   links operate\
    \ at different rates and/or are implemented using\n   different technologies.\n\
    \   The asymmetry in capacity may be substantially increased when best\n   effort\
    \ IP flows carrying TCP ACKs share the available upstream\n   capacity with other\
    \ traffic flows, e.g., telephony, especially flows\n   that have reserved upstream\
    \ capacity.  This includes service\n   guarantees at the IP layer (e.g., the Guaranteed\
    \ Service [RFC2212])\n   or at the subnet layer (e.g., support of Voice over IP\
    \ [ITU01] using\n   the Unsolicited Grant service in DOCSIS [DS01], or CBR virtual\n\
    \   connections in ATM over ADSL [ITU02, ANS01]).\n   When multiple upstream links\
    \ exist the asymmetry may be reduced by\n   dividing upstream traffic between\
    \ a number of available upstream\n   links.\n"
- title: 2.2 Asymmetry due to Shared Media in the Reverse Direction
  contents:
  - "2.2 Asymmetry due to Shared Media in the Reverse Direction\n   In networks employing\
    \ centralized multiple access control, asymmetry\n   may be a fundamental consequence\
    \ of the hub-and-spokes architecture\n   of the network (i.e., a single base node\
    \ communicating with multiple\n   downstream nodes).  The central node often incurs\
    \ less transmission\n   overhead and does not incur latency in scheduling its\
    \ own downstream\n   transmissions.  In contrast, upstream transmission is subject\
    \ to\n   additional overhead and latency (e.g., due to guard times between\n \
    \  transmission bursts, and contention intervals).  This can produce\n   significant\
    \ network path asymmetry.\n   Upstream capacity may be further limited by the\
    \ requirement that each\n   node must first request per-packet bandwidth using\
    \ a contention MAC\n   protocol (e.g., DOCSIS 1.0 MAC restricts each node to sending\
    \ at most\n   a single packet in each upstream time-division interval [DS00]).\
    \   A\n   satellite network employing dynamic Bandwidth on Demand (BoD), also\n\
    \   consumes MAC resources for each packet sent (e.g., [EN00]).  In these\n  \
    \ schemes, the available uplink capacity is a function of the MAC\n   algorithm.\
    \  The MAC and PHY schemes also introduce overhead per\n   upstream transmission\
    \ which could be so significant that transmitting\n   short packets (including\
    \ TCP ACKs) becomes as costly as transmitting\n   MTU-sized data packets.\n"
- title: 2.3 The General Problem
  contents:
  - "2.3 The General Problem\n   Despite the technological differences between capacity-dependent\
    \ and\n   MAC-dependent asymmetries, both kinds of network path suffer reduced\n\
    \   TCP performance for the same fundamental reason: the imperfection and\n  \
    \ variability of ACK feedback.  This document discusses the problem in\n   detail\
    \ and describes several techniques that may reduce or eliminate\n   the constraints.\n"
- title: 3. How does Asymmetry Degrade TCP Performance?
  contents:
  - "3. How does Asymmetry Degrade TCP Performance?\n   This section describes the\
    \ implications of network path asymmetry on\n   TCP performance.  The reader is\
    \ referred to [BPK99, Bal98, Pad98,\n   FSS01, Sam99] for more details and experimental\
    \ results.\n"
- title: 3.1 Asymmetric Capacity
  contents:
  - "3.1 Asymmetric Capacity\n   The problems that degrade unidirectional transfer\
    \ performance when\n   the forward and return paths have very different capacities\
    \ depend on\n   the characteristics of the upstream link.  Two types of situations\n\
    \   arise for unidirectional traffic over such network paths: when the\n   upstream\
    \ bottleneck link has sufficient queuing to prevent packet\n   (ACK) losses, and\
    \ when the upstream bottleneck link has a small\n   buffer.  Each is considered\
    \ in turn.\n   If the upstream bottleneck link has deep queues, so that this does\n\
    \   not drop ACKs in the reverse direction, then performance is a strong\n   function\
    \ of the normalized bandwidth ratio, k.  For example, for a 10\n   Mbps downstream\
    \ link and a 50 Kbps upstream link, the raw capacity\n   ratio is 200.  With 1000-byte\
    \ data packets and 40-byte ACKs, the\n   ratio of the packet sizes is 25.  This\
    \ implies that k is 200/25 = 8.\n   Thus, if the receiver acknowledges more frequently\
    \ than one ACK every\n   8 (k) data packets, the upstream link will become saturated\
    \ before\n   the downstream link, limiting the throughput in the forward\n   direction.\
    \  Note that, the achieved TCP throughput is determined by\n   the minimum of\
    \ the receiver advertised window or TCP congestion\n   window, cwnd [RFC2581].\n\
    \   If ACKs are not dropped (at the upstream bottleneck link) and k > 1\n   or\
    \ k > 0.5 when delayed ACKs are used [RFC1122], TCP ACK-clocking\n   breaks down.\
    \  Consider two data packets transmitted by the sender in\n   quick succession.\
    \  En route to the receiver, these packets get spaced\n   apart according to the\
    \ capacity of the smallest bottleneck link in\n   the forward direction.  The\
    \ principle of ACK clocking is that the\n   ACKs generated in response to receiving\
    \ these data packets reflects\n   this temporal spacing all the way back to the\
    \ sender, enabling it to\n   transmit new data packets that maintain the same\
    \ spacing [Jac88]. ACK\n   clocking with delayed ACKs, reflects the spacing between\
    \ data packets\n   that actually trigger ACKs.  However, the limited upstream\
    \ capacity\n   and queuing at the upstream bottleneck router alters the inter-ACK\n\
    \   spacing of the reverse path, and hence that observed at the sender.\n   When\
    \ ACKs arrive at the upstream bottleneck link at a faster rate\n   than the link\
    \ can support, they get queued behind one another.  The\n   spacing between them\
    \ when they emerge from the link is dilated with\n   respect to their original\
    \ spacing, and is a function of the upstream\n   bottleneck capacity.  Thus the\
    \ TCP sender clocks out new data packets\n   at a slower rate than if there had\
    \ been no queuing of ACKs.  The\n   performance of the connection is no longer\
    \ dependent on the\n   downstream bottleneck link alone; instead, it is throttled\
    \ by the\n   rate of arriving ACKs.  As a side effect, the sender's rate of cwnd\n\
    \   growth also slows down.\n   A second side effect arises when the upstream\
    \ bottleneck link on the\n   reverse path is saturated.  The saturated link causes\
    \ persistent\n   queuing of packets, leading to an increasing path Round Trip\
    \ Time\n   (RTT) [RFC2998] observed by all end hosts using the bottleneck link.\n\
    \   This can impact the protocol control loops, and may also trigger\n   false\
    \ time out (underestimation of the path RTT by the sending host).\n   A different\
    \ situation arises when the upstream bottleneck link has a\n   relatively small\
    \ amount of buffer space to accommodate ACKs.  As the\n   transmission window\
    \ grows, this queue fills, and ACKs are dropped. If\n   the receiver were to acknowledge\
    \ every packet, only one of every k\n   ACKs would get through to the sender,\
    \ and the remaining (k-1) are\n   dropped due to buffer overflow at the upstream\
    \ link buffer (here k is\n   the normalized bandwidth ratio as before).  In this\
    \ case, the reverse\n   bottleneck link capacity and slow ACK arrival rate are\
    \ not directly\n   responsible for any degraded performance.  However, the infrequency\n\
    \   of ACKs leads to three reasons for degraded performance:\n   1. The sender\
    \ transmits data in large bursts of packets, limited only\n      by the available\
    \ cwnd.  If the sender receives only one ACK in k,\n      it transmits data in\
    \ bursts of k (or more) packets because each\n      ACK shifts the sliding window\
    \ by at least k (acknowledged) data\n      packets (TCP data segments).  This\
    \ increases the likelihood of\n      data packet loss along the forward path especially\
    \ when k is\n      large, because routers do not handle large bursts of packets\
    \ well.\n   2. Current TCP sender implementations increase their cwnd by counting\n\
    \      the number of ACKs they receive and not by how much data is\n      actually\
    \ acknowledged by each ACK.  The later approach, also known\n      as byte counting\
    \ (section 4.7), is a standard implementation\n      option for cwnd increase\
    \ during the congestion avoidance period\n      [RFC2581].  Thus fewer ACKs imply\
    \ a slower rate of growth of the\n      cwnd, which degrades performance over\
    \ long-delay connections.\n   3. The sender TCP's Fast Retransmission and Fast\
    \ Recovery algorithms\n      [RFC2581] are less effective when ACKs are lost.\
    \  The sender may\n      possibly not receive the threshold number of duplicate\
    \ ACKs even\n      if the receiver transmits more than the DupACK threshold (>\
    \ 3\n      DupACKs) [RFC2581].  Furthermore, the sender may possibly not\n   \
    \   receive enough duplicate ACKs to adequately inflate its cwnd\n      during\
    \ Fast Recovery.\n"
- title: 3.2 MAC Protocol Interactions
  contents:
  - "3.2 MAC Protocol Interactions\n   The interaction of TCP with MAC protocols may\
    \ degrade end-to-end\n   performance.  Variable round-trip delays and ACK queuing\
    \ are the main\n   symptoms of this problem.\n   One example is the impact on\
    \ terrestrial wireless networks [Bal98]. A\n   high per-packet overhead may arise\
    \ from the need for communicating\n   link nodes to first synchronise (e.g., via\
    \ a Ready To Send / Clear to\n   Send (RTS/CTS) protocol) before communication\
    \ and the significant\n   turn-around time for the wireless channel.  This overhead\
    \ is\n   variable, since the RTS/CTS exchange may need to back-off\n   exponentially\
    \ when the remote node is busy (e.g., engaged in a\n   conversation with a different\
    \ node).  This leads to large and\n   variable communication latencies in packet-radio\
    \ networks.\n   An asymmetric workload (more downstream than upstream traffic)\
    \ may\n   cause ACKs to be queued in some wireless nodes (especially in the end\n\
    \   host modems), exacerbating the variable latency.  Queuing may also\n   occur\
    \ in other shared media, e.g., cable modem uplinks, BoD access\n   systems often\
    \ employed on shared satellite channels.\n   Variable latency and ACK queuing\
    \ reduces the smoothness of the TCP\n   data flow.  In particular, ACK traffic\
    \ can interfere with the flow of\n   data packets, increasing the traffic load\
    \ of the system.\n   TCP measures the path RTT, and from this calculates a smoothed\
    \ RTT\n   estimate (srtt) and a linear deviation, rttvar.  These are used to\n\
    \   estimate a path retransmission timeout (RTO) [RFC2988], set to srtt +\n  \
    \ 4*rttvar.  For most wired TCP connections, the srtt remains constant\n   or\
    \ has a low linear deviation.  The RTO therefore tracks the path\n   RTT, and\
    \ the TCP sender will respond promptly when multiple losses\n   occur in a window.\
    \  In contrast, some wireless networks exhibit a\n   high variability in RTT,\
    \ causing the RTO to significantly increase\n   (e.g., on the order of 10 seconds).\
    \  Paths traversing multiple\n   wireless hops are especially vulnerable to this\
    \ effect, because this\n   increases the probability that the intermediate nodes\
    \ may already be\n   engaged in conversation with other nodes.  The overhead in\
    \ most MAC\n   schemes is a function of both the number and size of packets.\n\
    \   However, the MAC contention problem is a significant function of the\n   number\
    \ of packets (e.g., ACKs) transmitted rather than their size.\n   In other words,\
    \ there is a significant cost to transmitting a packet\n   regardless of packet\
    \ size.\n   Experiments conducted on the Ricochet packet radio network in 1996\n\
    \   and 1997 demonstrated the impact of radio turnarounds and the\n   corresponding\
    \ increased RTT variability, resulting in degraded TCP\n   performance.  It was\
    \ not uncommon for TCP connections to experience\n   timeouts of 9 - 12 seconds,\
    \ with the result that many connections\n   were idle for a significant fraction\
    \ of their lifetime (e.g.,\n   sometimes 35% of the total transfer time).  This\
    \ leads to under-\n   utilization of the available capacity.  These effects may\
    \ also occur\n   in other wireless subnetworks.\n"
- title: 3.3 Bidirectional Traffic
  contents:
  - "3.3 Bidirectional Traffic\n   Bidirectional traffic arises when there are simultaneous\
    \ TCP\n   transfers in the forward and reverse directions over an asymmetric\n\
    \   network path, e.g., a user who sends an e-mail message in the reverse\n  \
    \ direction while simultaneously receiving a web page in the forward\n   direction.\
    \  To simplify the discussion, only one TCP connection in\n   each direction is\
    \ considered.  In many practical cases, several\n   simultaneous connections need\
    \ to share the available capacity,\n   increasing the level of congestion.\n \
    \  Bidirectional traffic makes the effects discussed in section 3.1 more\n   pronounced,\
    \ because part of the upstream link bandwidth is consumed\n   by the reverse transfer.\
    \  This effectively increases the degree of\n   bandwidth asymmetry.  Other effects\
    \ also arise due to the interaction\n   between data packets of the reverse transfer\
    \ and ACKs of the forward\n   transfer.  Suppose at the time the forward TCP connection\
    \ is\n   initiated, the reverse TCP connection has already saturated the\n   bottleneck\
    \ upstream link with data packets.  There is then a high\n   probability that\
    \ many ACKs of the new forward TCP connection will\n   encounter a full upstream\
    \ link buffer and hence get dropped.  Even\n   after these initial problems, ACKs\
    \ of the forward connection could\n   get queued behind large data packets of\
    \ the reverse connection.  The\n   larger data packets may have correspondingly\
    \ long transmission times\n   (e.g., it takes about 280 ms to transmit a 1 Kbyte\
    \ data packet over a\n   28.8 kbps line).  This causes the forward transfer to\
    \ stall for long\n   periods of time.  It is only at times when the reverse connection\n\
    \   loses packets (due to a buffer overflow at an intermediate router)\n   and\
    \ slows down, that the forward connection gets the opportunity to\n   make rapid\
    \ progress and build up its cwnd.\n   When ACKs are queued behind other traffic\
    \ for appreciable periods of\n   time, the burst nature of TCP traffic and self-synchronizing\
    \ effects\n   can result in an effect known as ACK Compression [ZSC91], which\n\
    \   reduces the throughput of TCP.  It occurs when a series of ACKs, in\n   one\
    \ direction are queued behind a burst of other packets (e.g., data\n   packets\
    \ traveling in the same direction) and become compressed in\n   time.  This results\
    \ in an intense burst of data packets in the other\n   direction, in response\
    \ to the burst of compressed ACKs arriving at\n   the server.  This phenomenon\
    \ has been investigated in detail for\n   bidirectional traffic, and recent analytical\
    \ work [LMS97] has\n   predicted ACK Compression may also result from bi-directional\n\
    \   transmission with asymmetry, and was observed in practical asymmetric\n  \
    \ satellite subnetworks [FSS01].  In the case of extreme asymmetry\n   (k>>1),\
    \ the inter-ACK spacing can increase due to queuing (section\n   3.1), resulting\
    \ in ACK dilation.\n   In summary, sharing of the upstream bottleneck link by\
    \ multiple flows\n   (e.g., IP flows to the same end host, or flows to a number\
    \ of end\n   hosts sharing a common upstream link) increases the level of ACK\n\
    \   Congestion.  The presence of bidirectional traffic exacerbates the\n   constraints\
    \ introduced by bandwidth asymmetry because of the adverse\n   interaction between\
    \ (large) data packets of a reverse direction\n   connection and the ACKs of a\
    \ forward direction connection.\n"
- title: 3.4 Loss in Asymmetric Network Paths
  contents:
  - "3.4 Loss in Asymmetric Network Paths\n   Loss may occur in either the forward\
    \ or reverse direction.  For data\n   transfer in the forward direction this results\
    \ respectively in loss\n   of data packets and ACK packets.  Loss of ACKs is less\
    \ significant\n   than loss of data packets, because it generally results in stretch\n\
    \   ACKs [CR98, FSS01].\n   In the case of long delay paths, a slow upstream link\
    \ [RFC3150] can\n   lead to another complication when the end host uses TCP large\
    \ windows\n   [RFC1323] to maximize throughput in the forward direction.  Loss\
    \ of\n   data packets on the forward path, due to congestion, or link loss,\n\
    \   common for some wireless links, will generate a large number of\n   back-to-back\
    \ duplicate ACKs (or TCP SACK packets [RFC2018]), for each\n   correctly received\
    \ data packet following a loss.  The TCP sender\n   employs Fast Retransmission\
    \ and Recovery [RFC2581] to recover from\n   the loss, but even if this is successful,\
    \ the ACK to the\n   retransmitted data segment may be significantly delayed by\
    \ other\n   duplicate ACKs still queued at the upstream link buffer.  This can\n\
    \   ultimately lead to a timeout [RFC2988] and a premature end to the TCP\n  \
    \ Slow Start [RFC2581].  This results in poor forward path throughput.\n   Section\
    \ 5.3 describes some mitigations to counter this.\n"
- title: 4. Improving TCP Performance using Host Mitigations
  contents:
  - "4. Improving TCP Performance using Host Mitigations\n   There are two key issues\
    \ that need to be addressed to improve TCP\n   performance over asymmetric networks.\
    \  The first is to manage the\n   capacity of the upstream bottleneck link, used\
    \ by ACKs and possibly\n   other traffic.  A number of techniques exist which\
    \ work by reducing\n   the number of ACKs that flow in the reverse direction.\
    \  This has the\n   side effect of potentially destroying the desirable self-clocking\n\
    \   property of the TCP sender where transmission of new data packets is\n   triggered\
    \ by incoming ACKs.  Thus, the second issue is to avoid any\n   adverse impact\
    \ of infrequent ACKs.\n   Each of these issues can be handled by local link-layer\
    \ solutions\n   and/or by end-to-end techniques.  This section discusses end-to-end\n\
    \   modifications.  Some techniques require TCP receiver changes\n   (sections\
    \ 4.1 4.4, 4.5), some require TCP sender changes (sections\n   4.6, 4.7), and\
    \ a pair requires changes to both the TCP sender and\n   receiver (sections 4.2,\
    \ 4.3).  One technique requires a sender\n   modification at the receiving host\
    \ (section 4.8).  The techniques may\n   be used independently, however some sets\
    \ of techniques are\n   complementary, e.g., pacing (section 4.6) and byte counting\
    \ (section\n   4.7) which have been bundled into a single TCP Sender Adaptation\n\
    \   scheme [BPK99].\n   It is normally envisaged that these changes would occur\
    \ in the end\n   hosts using the asymmetric path, however they could, and have,\
    \ been\n   used in a middle-box or Protocol Enhancing Proxy (PEP) [RFC3135]\n\
    \   employing split TCP.  This document does not discuss the issues\n   concerning\
    \ PEPs.  Section 4 describes several techniques, which do\n   not require end-to-end\
    \ changes.\n"
- title: 4.1 Modified Delayed ACKs
  contents:
  - "4.1 Modified Delayed ACKs\n   There are two standard methods that can be used\
    \ by TCP receivers to\n   generate acknowledgments.  The method outlined in [RFC793]\
    \ generates\n   an ACK for each incoming data segment (i.e., d=1).  [RFC1122]\
    \ states\n   that hosts should use \"delayed acknowledgments\".  Using this\n\
    \   algorithm, an ACK is generated for at least every second full-sized\n   segment\
    \ (d=2), or if a second full-sized segment does not arrive\n   within a given\
    \ timeout (which must not exceed 500 ms [RFC1122],  and\n   is typically less\
    \ than 200 ms).  Relaxing the latter constraint\n   (i.e., allowing d>2) may generate\
    \ Stretch ACKs [RFC2760].  This\n   provides a possible mitigation, which reduces\
    \ the rate at which ACKs\n   are returned by the receiver.  An implementer should\
    \ only deviate\n   from this requirement after careful consideration of the implications\n\
    \   [RFC2581].\n   Reducing the number of ACKs per received data segment has a\
    \ number of\n   undesirable effects including:\n   (i)    Increased path RTT\n\
    \   (ii)   Increased time for TCP to open the cwnd\n   (iii)  Increased TCP sender\
    \ burst size, since cwnd opens in larger\n          steps\n   In addition, a TCP\
    \ receiver is often unable to determine an optimum\n   setting for a large d,\
    \ since it will normally be unaware of the\n   details of the properties of the\
    \ links that form the path in the\n   reverse direction.\n   RECOMMENDATION: A\
    \ TCP receiver must use the standard TCP algorithm\n   for sending ACKs as specified\
    \ in [RFC2581].  That is, it may delay\n   sending an ACK after it receives a\
    \ data segment [RFC1122].  When ACKs\n   are delayed, the receiver must generate\
    \ an ACK within 500 ms and the\n   ACK should be generated for at least every\
    \ second full sized segment\n   (MSS) of received data [RFC2581].  This will result\
    \ in an ACK delay\n   factor (d) that does not exceed a value of 2.  Changing\
    \ the algorithm\n   would require a host modification to the TCP receiver and\
    \ awareness\n   by the receiving host that it is using a connection with an\n\
    \   asymmetric path.  Such a change has many drawbacks in the general\n   case\
    \ and is currently not recommended for use within the Internet.\n"
- title: 4.2 Use of Large MSS
  contents:
  - "4.2 Use of Large MSS\n   A TCP sender that uses a large Maximum Segment Size\
    \ (MSS) reduces the\n   number of ACKs generated per transmitted byte of data.\n\
    \   Although individual subnetworks may support a large MTU, the majority\n  \
    \ of current Internet links employ an MTU of approx 1500 bytes (that of\n   Ethernet).\
    \  By setting the Don't Fragment (DF) bit in the IP header,\n   Path MTU (PMTU)\
    \ discovery [RFC1191] may be used to determine the\n   maximum packet size (and\
    \ hence MSS) a sender can use on a given\n   network path without being subjected\
    \ to IP fragmentation, and\n   provides a way to automatically select a suitable\
    \ MSS for a specific\n   path.  This also guarantees that routers will not perform\
    \ IP\n   fragmentation of normal data packets.\n   By electing not to use PMTU\
    \ Discovery, an end host may choose to use\n   IP fragmentation by routers along\
    \ the path in the forward direction\n   [RFC793].  This allows an MSS larger than\
    \ smallest MTU along the\n   path.  However, this increases the unit of error\
    \ recovery (TCP\n   segment) above the unit of transmission (IP packet).  This\
    \ is not\n   recommended, since it can increase the number of retransmitted\n\
    \   packets following loss of a single IP packet, leading to reduced\n   efficiency,\
    \ and potentially aggravating network congestion [Ken87].\n   Choosing an MSS\
    \ larger than the forward path minimum MTU also permits\n   the sender to transmit\
    \ more initial packets (a burst of IP fragments\n   for each TCP segment) when\
    \ a session starts or following RTO expiry,\n   increasing the aggressiveness\
    \ of the sender compared to standard TCP\n   [RFC2581].  This can adversely impact\
    \ other standard TCP sessions\n   that share a network path.\n   RECOMMENDATION:\n\
    \   A larger forward path MTU is desirable for paths with bandwidth\n   asymmetry.\
    \  Network providers may use a large MTU on links in the\n   forward direction.\
    \  TCP end hosts using Path MTU discovery may be\n   able to take advantage of\
    \ a large MTU by automatically selecting an\n   appropriate larger MSS, without\
    \ requiring modification.  The use of\n   Path MTU discovery [RFC1191] is therefore\
    \ recommended.\n   Increasing the unit of error recovery and congestion control\
    \ (MSS)\n   above the unit of transmission and congestion loss (the IP packet)\
    \ by\n   using a larger end host MSS and IP fragmentation in routers is not\n\
    \   recommended.\n"
- title: 4.3 ACK Congestion Control
  contents:
  - "4.3 ACK Congestion Control\n   ACK Congestion Control (ACC) is an experimental\
    \ technique that\n   operates end to end.  ACC extends congestion control to ACKs,\
    \ since\n   they may make non-negligible demands on resources (e.g., packet\n\
    \   buffers, and MAC transmission overhead) at an upstream bottleneck\n   link.\
    \  It has two parts: (a) a network mechanism indicating to the\n   receiver that\
    \ the ACK path is congested, and (b) the receiver's\n   response to such an indication.\n\
    \   A router feeding an upstream bottleneck link may detect incipient\n   congestion,\
    \ e.g., using an algorithm based on RED (Random Early\n   Detection) [FJ93]. \
    \ This may track the average queue size over a time\n   window in the recent past.\
    \  If the average exceeds a threshold, the\n   router may select a packet at random.\
    \  If the packet IP header has\n   the Explicit Congestion Notification Capable\
    \ Transport (ECT) bit set,\n   the router may mark the packet, i.e., sets an Explicit\
    \ Congestion\n   Notification (ECN) [RFC3168] bit(s) in the IP header, otherwise\
    \ the\n   packet is normally dropped.  The ECN notification received by the end\n\
    \   host is reflected back to the sending TCP end host, to trigger\n   congestion\
    \ avoidance [RFC3168].  Note that routers implementing RED\n   with ECN, do not\
    \ eliminate packet loss, and may drop a packet (even\n   when the ECT bit is set).\
    \  It is also possible to use an algorithm\n   other than RED to decide when to\
    \ set the ECN bit.\n   ACC extends ECN so that both TCP data packets and ACKs\
    \ set the ECT\n   bit and are thus candidates for being marked with an ECN bit.\n\
    \   Therefore, upon receiving an ACK with the ECN bit set [RFC3168], a\n   TCP\
    \ receiver reduces the rate at which it sends ACKs.  It maintains a\n   dynamically\
    \ varying delayed-ACK factor, d, and sends one ACK for\n   every d data packets\
    \ received.  When it receives a packet with the\n   ECN bit set, it increases\
    \ d multiplicatively, thereby\n   multiplicatively decreasing the frequency of\
    \ ACKs.  For each\n   subsequent RTT (e.g., determined using the TCP RTTM option\
    \ [RFC1323])\n   during which it does not receive an ECN, it linearly decreases\
    \ the\n   factor d, increasing the frequency of ACKs.  Thus, the receiver\n  \
    \ mimics the standard congestion control behavior of TCP senders in the\n   manner\
    \ in which it sends ACKs.\n   The maximum value of d is determined by the TCP\
    \ sender window size,\n   which could be conveyed to the receiver in a new (experimental)\
    \ TCP\n   option.  The receiver should send at least one ACK (preferably more)\n\
    \   for each window of data from the sender (i.e., d < (cwnd/mss)) to\n   prevent\
    \ the sender from stalling until the receiver's delayed ACK\n   timer triggers\
    \ an ACK to be sent.\n   RECOMMENDATION: ACK Congestion Control (ACC) is an experimental\n\
    \   technique that requires TCP sender and receiver modifications.  There\n  \
    \ is currently little experience of using such techniques in the\n   Internet.\
    \  Future versions of TCP may evolve to include this or\n   similar techniques.\
    \  These are the subject of ongoing research.  ACC\n   is not recommended for\
    \ use within the Internet in its current form.\n"
- title: 4.4 Window Prediction Mechanism
  contents:
  - "4.4 Window Prediction Mechanism\n   The Window Prediction Mechanism (WPM) is\
    \ a TCP receiver side\n   mechanism [CLP98] that uses a dynamic ACK delay factor\
    \ (varying d)\n   resembling the ACC scheme (section 4.3).  The TCP receiver\n\
    \   reconstructs the congestion control behavior of the TCP sender by\n   predicting\
    \ a cwnd value.  This value is used along with the allowed\n   window to adjust\
    \ the receiver's value of d.  WPM accommodates for\n   unnecessary retransmissions\
    \ resulting from losses due to link errors.\n   RECOMMENDATION: Window Prediction\
    \ Mechanism (WPM) is an experimental\n   TCP receiver side modification.  There\
    \ is currently little experience\n   of using such techniques in the Internet.\
    \  Future versions of TCP may\n   evolve to include this or similar techniques.\
    \  These are the subjects\n   of ongoing research.  WPM is not recommended for\
    \ use within the\n   Internet in its current form.\n"
- title: 4.5 Acknowledgement based on Cwnd Estimation.
  contents:
  - "4.5 Acknowledgement based on Cwnd Estimation.\n   Acknowledgement based on Cwnd\
    \ Estimation (ACE) [MJW00] attempts to\n   measure the cwnd at the TCP receiver\
    \ and maintain a varying ACK delay\n   factor (d).  The cwnd is estimated by counting\
    \ the number of packets\n   received during a path RTT.  The technique may improve\
    \ accuracy of\n   prediction of a suitable cwnd.\n   RECOMMENDATION: Acknowledgement\
    \ based on Cwnd Estimation (ACE) is an\n   experimental TCP receiver side modification.\
    \  There is currently\n   little experience of using such techniques in the Internet.\
    \  Future\n   versions of TCP may evolve to include this or similar techniques.\n\
    \   These are the subject of ongoing research.  ACE is not recommended\n   for\
    \ use within the Internet in its current form.\n"
- title: 4.6 TCP Sender Pacing
  contents:
  - "4.6 TCP Sender Pacing\n   Reducing the frequency of ACKs may alleviate congestion\
    \ of the\n   upstream bottleneck link, but can lead to increased size of TCP\n\
    \   sender bursts (section 4.1).  This may slow the growth of cwnd, and\n   is\
    \ undesirable when used over shared network paths since it may\n   significantly\
    \ increase the maximum number of packets in the\n   bottleneck link buffer, potentially\
    \ resulting in an increase in\n   network congestion.  This may also lead to ACK\
    \ Compression [ZSC91].\n   TCP Pacing [AST00], generally referred to as TCP Sender\
    \ pacing,\n   employs an adapted TCP sender to alleviating transmission burstiness.\n\
    \   A bound is placed on the maximum number of packets the TCP sender can\n  \
    \ transmit back-to-back (at local line rate), even if the window(s)\n   allow\
    \ the transmission of more data.  If necessary, more bursts of\n   data packets\
    \ are scheduled for later points in time computed based on\n   the transmission\
    \ rate of the TCP connection.  The transmission rate\n   may be estimated from\
    \ the ratio cwnd/srtt.  Thus, large bursts of\n   data packets get broken up into\
    \ smaller bursts spread over time.\n   A subnetwork may also provide pacing (e.g.,\
    \ Generic Traffic Shaping\n   (GTS)), but implies a significant increase in the\
    \ per-packet\n   processing overhead and buffer requirement at the router where\n\
    \   shaping is performed (section 5.3.3).\n   RECOMMENDATIONS: TCP Sender Pacing\
    \ requires a change to\n   implementation of the TCP sender.  It may be beneficial\
    \ in the\n   Internet and will significantly reduce the burst size of packets\n\
    \   transmitted by a host.  This successfully mitigates the impact of\n   receiving\
    \ Stretch ACKs.  TCP Sender Pacing implies increased\n   processing cost per packet,\
    \ and requires a prediction algorithm to\n   suggest a suitable transmission rate.\
    \  There are hence performance\n   trade-offs between end host cost and network\
    \ performance.\n   Specification of efficient algorithms remains an area of ongoing\n\
    \   research.  Use of TCP Sender Pacing is not expected to introduce new\n   problems.\
    \  It is an experimental mitigation for TCP hosts that may\n   control the burstiness\
    \ of transmission (e.g., resulting from Type 1\n   techniques, section 5.1.2),\
    \ however it is not currently widely\n   deployed.  It is not recommended for\
    \ use within the Internet in its\n   current form.\n"
- title: 4.7 TCP Byte Counting
  contents:
  - "4.7 TCP Byte Counting\n   The TCP sender can avoid slowing growth of cwnd by\
    \ taking into\n   account the volume of data acknowledged by each ACK, rather\
    \ than\n   opening the cwnd based on the number of received ACKs.  So, if an ACK\n\
    \   acknowledges d data packets (or TCP data segments), the cwnd would\n   grow\
    \ as if d separate ACKs had been received.  This is called TCP\n   Byte Counting\
    \ [RFC2581, RFC2760].  (One could treat the single ACK as\n   being equivalent\
    \ to d/2, instead of d ACKs, to mimic the effect of\n   the TCP delayed ACK algorithm.)\
    \  This policy works because cwnd\n   growth is only tied to the available capacity\
    \ in the forward\n   direction, so the number of ACKs is immaterial.\n   This\
    \ may mitigate the impact of asymmetry when used in combination\n   with other\
    \ techniques (e.g., a combination of TCP Pacing\n   (section4.6), and ACC (section\
    \ 4.3) associated with a duplicate ACK\n   threshold at the receiver.)\n   The\
    \ main issue is that TCP byte counting may generate undesirable\n   long bursts\
    \ of TCP packets at the sender host line rate.  An\n   implementation must also\
    \ consider that data packets in the forward\n   direction and ACKs in the reverse\
    \ direction may both travel over\n   network paths that perform some amount of\
    \ packet reordering.\n   Reordering of IP packets is currently common, and may\
    \ arise from\n   various causes [BPS00].\n   RECOMMENDATION: TCP Byte Counting\
    \ requires a small TCP sender\n   modification.  In its simplest form, it can\
    \ generate large bursts of\n   TCP data packets, particularly when Stretch ACKs\
    \ are received.\n   Unlimited byte counting is therefore not allowed [RFC2581]\
    \ for use\n   within the Internet.\n   It is therefore strongly recommended [RFC2581,\
    \ RFC2760] that any byte\n   counting scheme should include a method to mitigate\
    \ the potentially\n   large bursts of TCP data packets the algorithm can cause\
    \ (e.g., TCP\n   Sender Pacing (section 4.6), ABC [abc-ID]).  If the burst size\
    \ or\n   sending rate of the TCP sender can be controlled then the scheme may\n\
    \   be beneficial when Stretch ACKs are received.  Determining safe\n   algorithms\
    \ remain an area of ongoing research.  Further\n   experimentation will then be\
    \ required to assess the success of these\n   safeguards, before they can be recommended\
    \ for use in the Internet.\n"
- title: 4.8 Backpressure
  contents:
  - "4.8 Backpressure\n   Backpressure is a technique to enhance the performance of\n\
    \   bidirectional traffic for end hosts directly connected to the\n   upstream\
    \ bottleneck link [KVR98].  A limit is set on how many data\n   packets of upstream\
    \ transfers can be enqueued at the upstream\n   bottleneck link.  In other words,\
    \ the bottleneck link queue exerts\n   'backpressure' on the TCP (sender) layer.\
    \  This requires a modified\n   implementation, compared to that currently deployed\
    \ in many TCP\n   stacks.  Backpressure ensures that ACKs of downstream connections\
    \ do\n   not get starved at the upstream bottleneck, thereby improving\n   performance\
    \ of the downstream connections.  Similar generic schemes\n   that may be implemented\
    \ in hosts/routers are discussed in section\n   5.4.\n   Backpressure can be unfair\
    \ to a reverse direction connection and make\n   its throughput highly sensitive\
    \ to the dynamics of the forward\n   connection(s).\n   RECOMMENDATION: Backpressure\
    \ requires an experimental modification to\n   the sender protocol stack of a\
    \ host directly connected to an upstream\n   bottleneck link.  Use of backpressure\
    \ is an implementation issue,\n   rather than a network protocol issue.  Where\
    \ backpressure is\n   implemented, the optimizations described in this section\
    \ could be\n   desirable and can benefit bidirectional traffic for hosts.\n  \
    \ Specification of safe algorithms for providing backpressure is still\n   a subject\
    \ of ongoing research.  The technique is not recommended for\n   use within the\
    \ Internet in its current form.\n"
- title: 5. Improving TCP performance using Transparent Modifications
  contents:
  - "5. Improving TCP performance using Transparent Modifications\n   Various link\
    \ and network layer techniques have been suggested to\n   mitigate the effect\
    \ of an upstream bottleneck link.  These techniques\n   may provide benefit without\
    \ modification to either the TCP sender or\n   receiver, or may alternately be\
    \ used in conjunction with one or more\n   of the schemes identified in section\
    \ 4.  In this document, these\n   techniques are known as \"transparent\" [RFC3135],\
    \ because at the\n   transport layer, the TCP sender and receiver are not necessarily\n\
    \   aware of their existence.  This does not imply that they do not\n   modify\
    \ the pattern and timing of packets as observed at the network\n   layer.  The\
    \ techniques are classified here into three types based on\n   the point at which\
    \ they are introduced.\n   Most techniques require the individual TCP connections\
    \ passing over\n   the bottleneck link(s) to be separately identified and imply\
    \ that\n   some per-flow state is maintained for active TCP connections.  A link\n\
    \   scheduler may also be employed (section 5.4).  The techniques (with\n   one\
    \ exception, ACK Decimation (section 5.2.2) require:\n   (i)   Visibility of an\
    \ unencrypted IP and TCP packet header (e.g., no\n         use of IPSec with payload\
    \ encryption [RFC2406]).\n   (ii)  Knowledge of IP/TCP options and ability to\
    \ inspect packets with\n         tunnel encapsulations (e.g., [RFC2784]) or to\
    \ suspend\n         processing of packets with unknown formats.\n   (iii) Ability\
    \ to demultiplex flows (by using address/protocol/port\n         number, or an\
    \ explicit flow-id).\n   [RFC3135] describes a class of network device that provides\
    \ more than\n   forwarding of packets, and which is known as a Protocol Enhancing\n\
    \   Proxy (PEP).  A large spectrum of PEP devices exists, ranging from\n   simple\
    \ devices (e.g., ACK filtering) to more sophisticated devices\n   (e.g., stateful\
    \ devices that split a TCP connection into two separate\n   parts).  The techniques\
    \ described in section 5 of this document\n   belong to the simpler type, and\
    \ do not inspect or modify any TCP or\n   UDP payload data.  They also do not\
    \ modify port numbers or link\n   addresses.  Many of the risks associated with\
    \ more complex PEPs do\n   not exist for these schemes.  Further information about\
    \ the operation\n   and the risks associated with using PEPs are described in\
    \ [RFC3135].\n"
- title: '5.1 TYPE 0: Header Compression'
  contents:
  - "5.1 TYPE 0: Header Compression\n   A client may reduce the volume of bits used\
    \ to send a single ACK by\n   using compression [RFC3150, RFC3135].  Most modern\
    \ dial-up modems\n   support ITU-T V.42 bulk compression.  In contrast to bulk\n\
    \   compression, header compression is known to be very effective at\n   reducing\
    \ the number of bits sent on the upstream link [RFC1144]. This\n   relies on the\
    \ observation that most TCP packet headers vary only in a\n   few bit positions\
    \ between successive packets in a flow, and that the\n   variations can often\
    \ be predicted.\n"
- title: 5.1.1 TCP Header Compression
  contents:
  - "5.1.1 TCP Header Compression\n   TCP header compression [RFC1144] (sometimes\
    \ known as V-J compression)\n   is a Proposed Standard describing use over low\
    \ capacity links running\n   SLIP or PPP [RFC3150].  It greatly reduces the size\
    \ of ACKs on the\n   reverse link when losses are infrequent (a situation that\
    \ ensures\n   that the state of the compressor and decompressor are synchronized).\n\
    \   However, this alone does not address all of the asymmetry issues:\n   (i)\
    \   In some (e.g., wireless) subnetworks there is a significant\n         per-packet\
    \ MAC overhead that is independent of packet size\n         (section 3.2).\n \
    \  (ii)  A reduction in the size of ACKs does not prevent adverse\n         interaction\
    \ with large upstream data packets in the presence\n         of bidirectional\
    \ traffic (section 3.3).\n   (iii) TCP header compression cannot be used with\
    \ packets that have\n         IP or TCP options (including IPSec [RFC2402, RFC2406],\
    \ TCP\n         RTTM [RFC1323], TCP SACK [RFC2018], etc.).\n   (iv)  The performance\
    \ of header compression described by RFC1144 is\n         significantly degraded\
    \ when compressed packets are lost.  An\n         improvement, which can still\
    \ incur significant penalty on\n         long network paths is described in [RFC2507].\
    \  This suggests\n         it should only be used on links (or paths) that experience\
    \ a\n         low level of packet loss [RFC3150].\n   (v)   The normal implementation\
    \ of Header Compression inhibits\n         compression when IP is used to support\
    \ tunneling (e.g., L2TP,\n         GRE [RFC2794], IP-in-IP).  The tunnel encapsulation\n\
    \         complicates locating the appropriate packet headers.  Although\n   \
    \      GRE allows Header Compression on the inner (tunneled) IP\n         header\
    \ [RFC2784], this is not recommended, since loss of a\n         packet (e.g.,\
    \ due to router congestion along the tunnel path)\n         will result in discard\
    \ of all packets for one RTT [RFC1144].\n   RECOMMENDATION: TCP Header Compression\
    \ is a transparent modification\n   performed at both ends of the upstream bottleneck\
    \ link.  It offers no\n   benefit for flows employing IPSec [RFC2402, RFC2406],\
    \ or when\n   additional protocol headers are present (e.g., IP or TCP options,\n\
    \   and/or tunnel encapsulation headers).  The scheme is widely\n   implemented\
    \ and deployed and used over Internet links.  It is\n   recommended to improve\
    \ TCP performance for paths that have a low-to-\n   medium bandwidth asymmetry\
    \ (e.g., k<10).\n   In the form described in [RFC1144], TCP performance is degraded\
    \ when\n   used over links (or paths) that may exhibit appreciable rates of\n\
    \   packet loss [RFC3150].  It may also not provide significant\n   improvement\
    \ for upstream links with bidirectional traffic.  It is\n   therefore not desirable\
    \ for paths that have a high bandwidth\n   asymmetry (e.g., k>10).\n"
- title: 5.1.2 Alternate Robust Header Compression Algorithms
  contents:
  - "5.1.2 Alternate Robust Header Compression Algorithms\n   TCP header compression\
    \ [RFC1144] and IP header compression [RFC2507]\n   do not perform well when subject\
    \ to packet loss.  Further, they do\n   not compress packets with TCP option fields\
    \ (e.g., SACK [RFC2018] and\n   Timestamp (RTTM) [RFC1323]).  However, recent\
    \ work on more robust\n   schemes suggest that a new generation of compression\
    \ algorithms may\n   be developed which are much more robust.  The IETF ROHC working\
    \ group\n   has specified compression techniques for UDP-based traffic [RFC3095]\n\
    \   and is examining a number of schemes that may provide improve TCP\n   header\
    \ compression.  These could be beneficial for asymmetric network\n   paths.\n\
    \   RECOMMENDATION: Robust header compression is a transparent\n   modification\
    \ that may be performed at both ends of an upstream\n   bottleneck link.  This\
    \ class of techniques may also be suited to\n   Internet paths that suffer low\
    \ levels of re-ordering.  The techniques\n   benefit paths with a low-to-medium\
    \ bandwidth asymmetry (e.g., k>10)\n   and may be robust to packet loss.\n   Selection\
    \ of suitable compression algorithms remains an area of\n   ongoing research.\
    \  It is possible that schemes may be derived which\n   support IPSec authentication,\
    \ but not IPSec payload encryption. Such\n   schemes do not alone provide significant\
    \ improvement in asymmetric\n   networks with a high asymmetry and/or bidirectional\
    \ traffic.\n"
- title: '5.2 TYPE 1: Reverse Link Bandwidth Management'
  contents:
  - "5.2 TYPE 1: Reverse Link Bandwidth Management\n   Techniques beyond Type 0 header\
    \ compression are required to address\n   the performance problems caused by appreciable\
    \ asymmetry (k>>1). One\n   set of techniques is implemented only at one point\
    \ on the reverse\n   direction path, within the router/host connected to the upstream\n\
    \   bottleneck link.  These use flow class or per-flow queues at the\n   upstream\
    \ link interface to manage the queue of packets waiting for\n   transmission on\
    \ the bottleneck upstream link.\n   This type of technique bounds the upstream\
    \ link buffer queue size,\n   and employs an algorithm to remove (discard) excess\
    \ ACKs from each\n   queue.  This relies on the cumulative nature of ACKs (section\
    \ 4.1).\n   Two approaches are described which employ this type of mitigation.\n"
- title: 5.2.1 ACK Filtering
  contents:
  - "5.2.1 ACK Filtering\n   ACK Filtering (AF) [DMT96, BPK99] (also known as ACK\
    \ Suppression\n   [SF98, Sam99, FSS01]) is a TCP-aware link-layer technique that\n\
    \   reduces the number of ACKs sent on the upstream link.  This technique\n  \
    \ has been deployed in specific production networks (e.g., asymmetric\n   satellite\
    \ networks [ASB96]).  The challenge is to ensure that the\n   sender does not\
    \ stall waiting for ACKs, which may happen if ACKs are\n   indiscriminately removed.\n\
    \   When an ACK from the receiver is about to be enqueued at a upstream\n   bottleneck\
    \ link interface, the router or the end host link layer (if\n   the host is directly\
    \ connected to the upstream bottleneck link)\n   checks the transmit queue(s)\
    \ for older ACKs belonging to the same TCP\n   connection.  If ACKs are found,\
    \ some (or all of them) are removed\n   from the queue, reducing the number of\
    \ ACKs.\n   Some ACKs also have other functions in TCP [RFC1144], and should not\n\
    \   be deleted to ensure normal operation.  AF should therefore not\n   delete\
    \ an ACK that has any data or TCP flags set (SYN, RST, URG, and\n   FIN).  In\
    \ addition, it should avoid deleting a series of 3 duplicate\n   ACKs that indicate\
    \ the need for Fast Retransmission [RFC2581] or ACKs\n   with the Selective ACK\
    \ option (SACK)[RFC2018] from the queue to avoid\n   causing problems to TCP's\
    \ data-driven loss recovery mechanisms.\n   Appropriate treatment is also needed\
    \ to preserve correct operation of\n   ECN feedback (carried in the TCP header)\
    \ [RFC3168].\n   A range of policies to filter ACKs may be used.  These may be\
    \ either\n   deterministic or random (similar to a random-drop gateway, but should\n\
    \   take into consideration the semantics of the items in the queue).\n   Algorithms\
    \ have also been suggested to ensure a minimum ACK rate to\n   guarantee the TCP\
    \ sender window is updated [Sam99, FSS01], and to\n   limit the number of data\
    \ packets (TCP segments) acknowledged by a\n   Stretch ACK.  Per-flow state needs\
    \ to be maintained only for\n   connections with at least one packet in the queue\
    \ (similar to FRED\n   [LM97]).  This state is soft [Cla88], and if necessary,\
    \ can easily be\n   reconstructed from the contents of the queue.\n   The undesirable\
    \ effect of delayed DupACKs (section 3.4) can be\n   reduced by deleting duplicate\
    \ ACKs above a threshold value [MJW00,\n   CLP98] allowing Fast Retransmission,\
    \ but avoiding early TCP timeouts,\n   which may otherwise result from excessive\
    \ queuing of DupACKs.\n   Future schemes may include more advanced rules allowing\
    \ removal of\n   selected SACKs [RFC2018].  Such a scheme could prevent the upstream\n\
    \   link queue from becoming filled by back-to-back ACKs with SACK\n   blocks.\
    \  Since a SACK packet is much larger than an ACK, it would\n   otherwise add\
    \ significantly to the path delay in the reverse\n   direction.  Selection of\
    \ suitable algorithms remains an ongoing area\n   of research.\n   RECOMMENDATION:\
    \ ACK Filtering requires a modification to the upstream\n   link interface.  The\
    \ scheme has been deployed in some networks where\n   the extra processing overhead\
    \ (per ACK) may be compensated for by\n   avoiding the need to modify TCP.  ACK\
    \ Filtering can generate Stretch\n   ACKs resulting in large bursts of TCP data\
    \ packets.  Therefore on its\n   own, it is not recommended for use in the general\
    \ Internet.\n   ACK Filtering when used in combination with a scheme to mitigate\
    \ the\n   effect of Stretch ACKs (i.e., control TCP sender burst size) is\n  \
    \ recommended for paths with appreciable asymmetry (k>1) and/or with\n   bidirectional\
    \ traffic.  Suitable algorithms to support IPSec\n   authentication, SACK, and\
    \ ECN remain areas of ongoing research.\n"
- title: 5.2.2 ACK Decimation
  contents:
  - "5.2.2 ACK Decimation\n   ACK Decimation is based on standard router mechanisms.\
    \  By using an\n   appropriate configuration of (small) per-flow queues and a\
    \ chosen\n   dropping policy (e.g., Weighted Fair Queuing, WFQ) at the upstream\n\
    \   bottleneck link, a similar effect to AF (section 5.2.1) may be\n   obtained,\
    \ but with less control of the actual packets which are\n   dropped.\n   In this\
    \ scheme, the router/host at the bottleneck upstream link\n   maintains per-flow\
    \ queues and services them fairly (or with\n   priorities) by queuing and scheduling\
    \ of ACKs and data packets in the\n   reverse direction.  A small queue threshold\
    \ is maintained to drop\n   excessive ACKs from the tail of each queue, in order\
    \ to reduce ACK\n   Congestion.  The inability to identify special ACK packets\
    \ (c.f., AF)\n   introduces some major drawbacks to this approach, such as the\n\
    \   possibility of losing DupACKs, FIN/ACK, RST packets, or packets\n   carrying\
    \ ECN information [RFC3168].  Loss of these packets does not\n   significantly\
    \ impact network congestion, but does adversely impact\n   the performance of\
    \ the TCP session observing the loss.\n   A WFQ scheduler may assign a higher\
    \ priority to interactive traffic\n   (providing it has a mechanism to identify\
    \ such traffic) and provide a\n   fair share of the remaining capacity to the\
    \ bulk traffic.  In the\n   presence of bidirectional traffic, and with a suitable\
    \ scheduling\n   policy, this may ensure fairer sharing for ACK and data packets.\
    \  An\n   increased forward transmission rate is achieved over asymmetric links\n\
    \   by an increased ACK Decimation rate, leading to generation of Stretch\n  \
    \ ACKs.  As in AF, TCP sender burst size increases when Stretch ACKs\n   are received\
    \ unless other techniques are used in combination with\n   this technique.\n \
    \  This technique has been deployed in specific networks (e.g., a\n   network\
    \ with high bandwidth asymmetry supporting high-speed data\n   services to in-transit\
    \ mobile hosts [Seg00]).  Although not optimal,\n   it offered a potential mitigation\
    \ applicable when the TCP header is\n   difficult to identify or not visible to\
    \ the link layer (e.g., due to\n   IPSec encryption).\n   RECOMMENDATION: ACK\
    \ Decimation uses standard router mechanisms at the\n   upstream link interface\
    \ to constrain the rate at which ACKs are fed\n   to the upstream link.  The technique\
    \ is beneficial with paths having\n   appreciable asymmetry (k>1).  It is however\
    \ suboptimal, in that it\n   may lead to inefficient TCP error recovery (and hence\
    \ in some cases\n   degraded TCP performance), and provides only crude control\
    \ of link\n   behavior.  It is therefore recommended that where possible, ACK\n\
    \   Filtering should be used in preference to ACK Decimation.\n   When ACK Decimation\
    \ is used on paths with an appreciable asymmetry\n   (k>1) (or with bidirectional\
    \ traffic) it increases the burst size of\n   the TCP sender, use of a scheme\
    \ to mitigate the effect of Stretch\n   ACKs or control burstiness is therefore\
    \ strongly recommended.\n"
- title: '5.3 TYPE 2: Handling Infrequent ACKs'
  contents:
  - "5.3 TYPE 2: Handling Infrequent ACKs\n   TYPE 2 mitigations perform TYPE 1 upstream\
    \ link bandwidth management,\n   but also employ a second active element which\
    \ mitigates the effect of\n   the reduced ACK rate and burstiness of ACK transmission.\
    \  This is\n   desirable when end hosts use standard TCP sender implementations\n\
    \   (e.g., those not implementing the techniques in sections 4.6, 4.7).\n   Consider\
    \ a path where a TYPE 1 scheme forwards a Stretch ACK covering\n   d TCP packets\
    \ (i.e., where the acknowledgement number is d*MSS larger\n   than the last ACK\
    \ received by the TCP sender).  When the TCP sender\n   receives this ACK, it\
    \ can send a burst of d (or d+1) TCP data\n   packets.  The sender is also constrained\
    \ by the current cwnd.\n   Received ACKs also serve to increase cwnd (by at most\
    \ one MSS).\n   A TYPE 2 scheme mitigates the impact of the reduced ACK frequency\n\
    \   resulting when a TYPE 1 scheme is used.  This is achieved by\n   interspersing\
    \ additional ACKs before each received Stretch ACK.  The\n   additional ACKs,\
    \ together with the original ACK, provide the TCP\n   sender with sufficient ACKs\
    \ to allow the TCP cwnd to open in the same\n   way as if each of the original\
    \ ACKs sent by the TCP receiver had been\n   forwarded by the reverse path.  In\
    \ addition, by attempting to restore\n   the spacing between ACKs, such a scheme\
    \ can also restore the TCP\n   self-clocking behavior, and reduce the TCP sender\
    \ burst size.  Such\n   schemes need to ensure conservative behavior (i.e., should\
    \ not\n   introduce more ACKs than were originally sent) and reduce the\n   probability\
    \ of ACK Compression [ZSC91].\n   The action is performed at two points on the\
    \ return path: the\n   upstream link interface (where excess ACKs are removed),\
    \ and a point\n   further along the reverse path (after the bottleneck upstream\n\
    \   link(s)), where replacement ACKs are inserted.  This attempts to\n   reconstruct\
    \ the ACK stream sent by the TCP receiver when used in\n   combination with AF\
    \ (section 5.2.1), or ACK Decimation (section\n   5.2.2).\n   TYPE 2 mitigations\
    \ may be performed locally at the receive interface\n   directly following the\
    \ upstream bottleneck link, or may alternatively\n   be applied at any point further\
    \ along the reverse path (this is not\n   necessarily on the forward path, since\
    \ asymmetric routing may employ\n   different forward and reverse internet paths).\
    \  Since the techniques\n   may generate multiple ACKs upon reception of each\
    \ individual Stretch\n   ACK, it is strongly recommended that the expander implements\
    \ a scheme\n   to prevent exploitation as a \"packet amplifier\" in a Denial-of-\n\
    \   Service (DoS) attack (e.g., to verify the originator of the ACK).\n   Identification\
    \ of the sender could be accomplished by appropriately\n   configured packet filters\
    \ and/or by tunnel authentication procedures\n   (e.g., [RFC2402, RFC2406]). \
    \ A limit on the number of reconstructed\n   ACKs that may be generated from a\
    \ single packet may also be\n   desirable.\n"
- title: 5.3.1 ACK Reconstruction
  contents:
  - "5.3.1 ACK Reconstruction\n   ACK Reconstruction (AR) [BPK99] is used in conjunction\
    \ with AF\n   (section 5.2.1).  AR deploys a soft-state [Cla88] agent called an\
    \ ACK\n   Reconstructor on the reverse path following the upstream bottleneck\n\
    \   link.  The soft-state can be regenerated if lost, based on received\n   ACKs.\
    \  When a Stretch ACK is received, AR introduces additional ACKs\n   by filling\
    \ gaps in the ACK sequence.  Some potential Denial-of-\n   Service vulnerabilities\
    \ may arise (section 6) and need to be\n   addressed by appropriate security techniques.\n\
    \   The Reconstructor determines the number of additional ACKs, by\n   estimating\
    \ the number of filtered ACKs.  This uses implicit\n   information present in\
    \ the received ACK stream by observing the ACK\n   sequence number of each received\
    \ ACK.  An example implementation\n   could set an ACK threshold, ackthresh, to\
    \ twice the MSS (this assumes\n   the chosen MSS is known by the link).  The factor\
    \ of two corresponds\n   to standard TCP delayed-ACK policy (d=2).  Thus, if successive\
    \ ACKs\n   arrive separated by delta, the Reconstructor regenerates a maximum\
    \ of\n   ((delta/ackthresh) - 2) ACKs.\n   To reduce the TCP sender burst size\
    \ and allow the cwnd to increase at\n   a rate governed by the downstream link,\
    \ the reconstructed ACKs must\n   be sent at a consistent rate (i.e., temporal\
    \ spacing between\n   reconstructed ACKs).  One method is for the Reconstructor\
    \ to measure\n   the arrival rate of ACKs using an exponentially weighted moving\n\
    \   average estimator.  This rate depends on the output rate from the\n   upstream\
    \ link and on the presence of other traffic sharing the link.\n   The output of\
    \ the estimator indicates the average temporal spacing\n   for the ACKs (and the\
    \ average rate at which ACKs would reach the TCP\n   sender if there were no further\
    \ losses or delays).  This may be used\n   by the Reconstructor to set the temporal\
    \ spacing of reconstructed\n   ACKs.  The scheme may also be used in combination\
    \ with TCP sender\n   adaptation (e.g., a combination of the techniques in sections\
    \ 4.6 and\n   4.7).\n   The trade-off in AR is between obtaining less TCP sender\
    \ burstiness,\n   and a better rate of cwnd increase, with a reduction in RTT\n\
    \   variation, versus a modest increase in the path RTT.  The technique\n   cannot\
    \ perform reconstruction on connections using IPSec (AH\n   [RFC2402] or ESP [RFC2406]),\
    \ since it is unable to generate\n   appropriate security information.  It also\
    \ cannot regenerate other\n   packet header information (e.g., the exact pattern\
    \ of bits carried in\n   the IP packet ECN field [RFC3168] or the TCP RTTM option\
    \ [RFC1323]).\n   An ACK Reconstructor operates correctly (i.e., generates no\
    \ spurious\n   ACKs and preserves the end-to-end semantics of TCP), providing:\n\
    \   (i)   the TCP receiver uses ACK Delay (d=2) [RFC2581]\n   (ii)  the Reconstructor\
    \ receives only in-order ACKs\n   (iii) all ACKs are routed via the Reconstructor\n\
    \   (iv)  the Reconstructor correctly determines the TCP MSS used by\n       \
    \  the session\n   (v)   the packets do not carry additional header information\
    \ (e.g.,\n         TCP RTTM option [RFC1323], IPSec using AH [RFC2402]or ESP\n\
    \         [RFC2406]).\n   RECOMMENDATION: ACK Reconstruction is an experimental\
    \ transparent\n   modification performed on the reverse path following the upstream\n\
    \   bottleneck link.  It is designed to be used in conjunction with a\n   TYPE\
    \ 1 mitigation.  It reduces the burst size of TCP transmission in\n   the forward\
    \ direction, which may otherwise increase when TYPE 1\n   schemes are used alone.\
    \  It requires modification of equipment after\n   the upstream link (including\
    \ maintaining per-flow soft state).  The\n   scheme introduces implicit assumptions\
    \ about the network path and has\n   potential Denial-of-Service vulnerabilities\
    \ (i.e., acting as a packet\n   amplifier); these need to be better understood\
    \ and addressed by\n   appropriate security techniques.\n   Selection of appropriate\
    \ algorithms to pace the ACK traffic remains\n   an open research issue.  There\
    \ is also currently little experience of\n   the implications of using such techniques\
    \ in the Internet, and\n   therefore it is recommended that this technique should\
    \ not be used\n   within the Internet in its current form.\n"
- title: 5.3.2 ACK Compaction and Companding
  contents:
  - "5.3.2 ACK Compaction and Companding\n   ACK Compaction and ACK Companding [SAM99,\
    \ FSS01] are techniques that\n   operate at a point on the reverse path following\
    \ the constrained ACK\n   bottleneck.  Like AR (section 5.3.1), ACK Compaction\
    \ and ACK\n   Companding are both used in conjunction with an AF technique (section\n\
    \   5.2.1) and regenerate filtered ACKs, restoring the ACK stream.\n   However,\
    \ they differ from AR in that they use a modified AF (known as\n   a compactor\
    \ or compressor), in which explicit information is added to\n   all Stretch ACKs\
    \ generated by the AF.  This is used to explicitly\n   synchronize the reconstruction\
    \ operation (referred to here as\n   expansion).\n   The modified AF combines\
    \ two modifications:  First, when the\n   compressor deletes an ACK from the upstream\
    \ bottleneck link queue, it\n   appends explicit information (a prefix) to the\
    \ remaining ACK (this\n   ACK is marked to ensure it is not subsequently deleted).\
    \  The\n   additional information contains details the conditions under which\n\
    \   ACKs were previously filtered.  A variety of information may be\n   encoded\
    \ in the prefix.  This includes the number of ACKs deleted by\n   the AF and the\
    \ average number of bytes acknowledged.  This may\n   subsequently be used by\
    \ an expander at the remote end of the tunnel.\n   Further timing information\
    \ may also be added to control the pacing of\n   the regenerated ACKs [FSS01].\
    \  The temporal spacing of the filtered\n   ACKs may also be encoded.\n   To encode\
    \ the prefix requires the subsequent expander to recognize a\n   modified ACK\
    \ header.  This would normally limit the expander to\n   link-local operation\
    \ (at the receive interface of the upstream\n   bottleneck link).  If remote expansion\
    \ is needed further along the\n   reverse path, a tunnel may be used to pass the\
    \ modified ACKs to the\n   remote expander.  The tunnel introduces extra overhead,\
    \ however\n   networks with asymmetric capacity and symmetric routing frequently\n\
    \   already employ such tunnels (e.g., in a UDLR network [RFC3077], the\n   expander\
    \ may be co-located with the feed router).\n   ACK expansion uses a stateless\
    \ algorithm to expand the ACK (i.e.,\n   each received packet is processed independently\
    \ of previously\n   received packets).  It uses the prefix information together\
    \ with the\n   acknowledgment field in the received ACK, to produce an equivalent\n\
    \   number of ACKs to those previously deleted by the compactor.  These\n   ACKs\
    \ are forwarded to the original destination (i.e., the TCP\n   sender), preserving\
    \ normal TCP ACK clocking.  In this way, ACK\n   Compaction, unlike AR, is not\
    \ reliant on specific ACK policies, nor\n   must it see all ACKs associated with\
    \ the reverse path (e.g., it may\n   be compatible with schemes such as DAASS\
    \ [RFC2760]).\n   Some potential Denial-of-Service vulnerabilities may arise (section\n\
    \   6) and need to be addressed by appropriate security techniques.  The\n   technique\
    \ cannot perform reconstruction on connections using IPSec,\n   since they are\
    \ unable to regenerate appropriate security information.\n   It is possible to\
    \ explicitly encode IPSec security information from\n   suppressed packets, allowing\
    \ operation with IPSec AH, however this\n   remains an open research issue, and\
    \ implies an additional overhead\n   per ACK.\n   RECOMMENDATION: ACK Compaction\
    \ and Companding are experimental\n   transparent modifications performed on the\
    \ reverse path following the\n   upstream bottleneck link.  They are designed\
    \ to be used in\n   conjunction with a modified TYPE 1 mitigation and reduce the\
    \ burst\n   size of TCP transmission in the forward direction, which may\n   otherwise\
    \ increase when TYPE 1 schemes are used alone.\n   The technique is desirable,\
    \ but requires modification of equipment\n   after the upstream bottleneck link\
    \ (including processing of a\n   modified ACK header).  Selection of appropriate\
    \ algorithms to pace\n   the ACK traffic also remains an open research issue.\
    \  Some potential\n   Denial-of-Service vulnerabilities may arise with any device\
    \ that may\n   act as a packet amplifier.  These need to be addressed by appropriate\n\
    \   security techniques.  There is little experience of using the scheme\n   over\
    \ Internet paths.  This scheme is a subject of ongoing research\n   and is not\
    \ recommended for use within the Internet in its current\n   form.\n"
- title: 5.3.3 Mitigating TCP packet bursts generated by Infrequent ACKs
  contents:
  - "5.3.3 Mitigating TCP packet bursts generated by Infrequent ACKs\n   The bursts\
    \ of data packets generated when a Type 1 scheme is used on\n   the reverse direction\
    \ path may be mitigated by introducing a router\n   supporting Generic Traffic\
    \ Shaping (GTS) on the forward path [Seg00].\n   GTS is a standard router mechanism\
    \ implemented in many deployed\n   routers.  This technique does not eliminate\
    \ the bursts of data\n   generated by the TCP sender, but attempts to smooth out\
    \ the bursts by\n   employing scheduling and queuing techniques, producing traffic\
    \ which\n   resembles that when TCP Pacing is used (section 4.6).  These\n   techniques\
    \ require maintaining per-flow soft-state in the router, and\n   increase per-packet\
    \ processing overhead.  Some additional buffer\n   capacity is needed to queue\
    \ packets being shaped.\n   To perform GTS, the router needs to select appropriate\
    \ traffic\n   shaping parameters, which require knowledge of the network policy,\n\
    \   connection behavior and/or downstream bottleneck characteristics. GTS\n  \
    \ may also be used to enforce other network policies and promote\n   fairness\
    \ between competing TCP connections (and also UDP and\n   multicast flows).  It\
    \ also reduces the probability of ACK Compression\n   [ZSC91].\n   The smoothing\
    \ of packet bursts reduces the impact of the TCP\n   transmission bursts on routers\
    \ and hosts following the point at which\n   GTS is performed.  It is therefore\
    \ desirable to perform GTS near to\n   the sending host, or at least at a point\
    \ before the first forward\n   path bottleneck router.\n   RECOMMENDATIONS: Generic\
    \ Traffic Shaping (GTS) is a transparent\n   technique employed at a router on\
    \ the forward path.  The algorithms\n   to implement GTS are available in widely\
    \ deployed routers and may be\n   used on an Internet link, but do imply significant\
    \ additional per-\n   packet processing cost.\n   Configuration of a GTS is a\
    \ policy decision of a network service\n   provider.  When appropriately configured\
    \ the technique will reduce\n   size of TCP data packet bursts, mitigating the\
    \ effects of Type 1\n   techniques.  GTS is recommended for use in the Internet\
    \ in\n   conjunction with type 1 techniques such as ACK Filtering (section\n \
    \  5.2.1) and ACK Decimation (section 5.2.2).\n"
- title: '5.4 TYPE 3: Upstream Link Scheduling'
  contents:
  - "5.4 TYPE 3: Upstream Link Scheduling\n   Many of the above schemes imply using\
    \ per flow queues (or per\n   connection queues in the case of TCP) at the upstream\
    \ bottleneck\n   link.  Per-flow queuing (e.g., FQ, CBQ) offers benefit when used\
    \ on\n   any slow link (where the time to transmit a packet forms an\n   appreciable\
    \ part of the path RTT) [RFC3150].  Type 3 schemes offer\n   additional benefit\
    \ when used with one of the above techniques.\n"
- title: 5.4.1 Per-Flow queuing at the Upstream Bottleneck Link
  contents:
  - "5.4.1 Per-Flow queuing at the Upstream Bottleneck Link\n   When bidirectional\
    \ traffic exists in a bandwidth asymmetric network\n   competing ACK and packet\
    \ data flows along the return path may degrade\n   the performance of both upstream\
    \ and downstream flows [KVR98].\n   Therefore, it is highly desirable to use a\
    \ queuing strategy combined\n   with a scheduling mechanism at the upstream link.\
    \  This has also been\n   called priority-based multiplexing [RFC3135].\n   On\
    \ a slow upstream link, appreciable jitter may be introduced by\n   sending large\
    \ data packets ahead of ACKs [RFC3150].  A simple scheme\n   may be implemented\
    \ using per-flow queuing with a fair scheduler\n   (e.g., round robin service\
    \ to all flows, or priority scheduling).  A\n   modified scheduler [KVR98] could\
    \ place a limit on the number of ACKs\n   a host is allowed to transmit upstream\
    \ before transmitting a data\n   packet (assuming at least one data packet is\
    \ waiting in the upstream\n   link queue).  This guarantees at least a certain\
    \ minimum share of the\n   capacity to flows in the reverse direction, while enabling\
    \ flows in\n   the forward direction to improve TCP throughput.\n   Bulk (payload)\
    \ compression, a small MTU, link level transparent\n   fragmentation [RFC1991,\
    \ RFC2686] or link level suspend/resume\n   capability (where higher priority\
    \ frames may pre-empt transmission of\n   lower priority frames) may be used to\
    \ mitigate the impact (jitter) of\n   bidirectional traffic on low speed links\
    \ [RFC3150]. More advanced\n   schemes (e.g., WFQ) may also be used to improve\
    \ the performance of\n   transfers with multiple ACK streams such as http [Seg00].\n\
    \   RECOMMENDATION: Per-flow queuing is a transparent modification\n   performed\
    \ at the upstream bottleneck link.  Per-flow (or per-class)\n   scheduling does\
    \ not impact the congestion behavior of the Internet,\n   and may be used on any\
    \ Internet link.  The scheme has particular\n   benefits for slow links.  It is\
    \ widely implemented and widely\n   deployed on links operating at less than 2\
    \ Mbps.  This is recommended\n   as a mitigation on its own or in combination\
    \ with one of the other\n   described techniques.\n"
- title: 5.4.2 ACKs-first Scheduling
  contents:
  - "5.4.2 ACKs-first Scheduling\n   ACKs-first Scheduling is an experimental technique\
    \ to improve\n   performance of bidirectional transfers.  In this case data packets\n\
    \   and ACKs compete for resources at the upstream bottleneck link\n   [RFC3150].\
    \  A single First-In First-Out, FIFO, queue for both data\n   packets and ACKs\
    \ could impact the performance of forward transfers.\n   For example, if the upstream\
    \ bottleneck link is a 28.8 kbps dialup\n   line, the transmission of a 1 Kbyte\
    \ sized data packet would take\n   about 280 ms.  So even if just two such data\
    \ packets get queued ahead\n   of ACKs (not an uncommon occurrence since data\
    \ packets are sent out\n   in pairs during slow start), they would shut out ACKs\
    \ for well over\n   half a second.  If more than two data packets are queued up\
    \ ahead of\n   an ACK, the ACKs would be delayed by even more [RFC3150].\n   A\
    \ possible approach to alleviating this is to schedule data and ACKs\n   differently\
    \ from FIFO.  One algorithm, in particular, is ACKs-first\n   scheduling, which\
    \ accords a higher priority to ACKs over data\n   packets.  The motivation for\
    \ such scheduling is that it minimizes the\n   idle time for the forward connection\
    \ by minimizing the time that ACKs\n   spend queued behind data packets at the\
    \ upstream link.  At the same\n   time, with Type 0 techniques such as header\
    \ compression [RFC1144],\n   the transmission time of ACKs becomes small enough\
    \ that the impact on\n   subsequent data packets is minimal.  (Subnetworks in\
    \ which the per-\n   packet overhead of the upstream link is large, e.g., packet\
    \ radio\n   subnetworks, are an exception, section 3.2.)  This scheduling scheme\n\
    \   does not require the upstream bottleneck router/host to explicitly\n   identify\
    \ or maintain state for individual TCP connections.\n   ACKs-first scheduling\
    \ does not help avoid a delay due to a data\n   packet in transmission.  Link\
    \ fragmentation or suspend/resume may be\n   beneficial in this case.\n   RECOMMENDATION:\
    \ ACKs-first scheduling is an experimental transparent\n   modification performed\
    \ at the upstream bottleneck link.  If it is\n   used without a mechanism (such\
    \ as ACK Congestion Control (ACC),\n   section 4.3) to regulate the volume of\
    \ ACKs, it could lead to\n   starvation of data packets.  This is a performance\
    \ penalty\n   experienced by end hosts using the link and does not modify Internet\n\
    \   congestion behavior.  Experiments indicate that ACKs-first scheduling\n  \
    \ in combination with ACC is promising.  However, there is little\n   experience\
    \ of using the technique in the wider Internet. Further\n   development of the\
    \ technique remains an open research issue, and\n   therefore the scheme is not\
    \ currently recommended for use within the\n   Internet.\n"
- title: 6. Security Considerations
  contents:
  - "6. Security Considerations\n   The recommendations contained in this document\
    \ do not impact the\n   integrity of TCP, introduce new security implications\
    \ to the TCP\n   protocol, or applications using TCP.\n   Some security considerations\
    \ in the context of this document arise\n   from the implications of using IPSec\
    \ by the end hosts or routers\n   operating along the return path.  Use of IPSec\
    \ prevents, or\n   complicates, some of the mitigations.  For example:\n   (i)\
    \  When IPSec ESP [RFC2406] is used to encrypt the IP payload, the\n        TCP\
    \ header can neither be read nor modified by intermediate\n        entities. \
    \ This rules out header compression, ACK Filtering, ACK\n        Reconstruction,\
    \ and the ACK Compaction.\n   (ii) The TCP header information may be visible,\
    \ when some forms of\n        network layer security are used.  For example, using\
    \ IPSec AH\n        [RFC2402], the TCP header may be read, but not modified, by\n\
    \        intermediaries.  This may in future allow extensions to support\n   \
    \     ACK Filtering, but rules out the generation of new\n        packets by intermediaries\
    \ (e.g., ACK Reconstruction).  The\n        enhanced header compression scheme\
    \ discussed in [RFC2507] would\n        also work with IPSec AH.\n   There are\
    \ potential Denial-of-Service (DoS) implications when using\n   Type 2 schemes.\
    \  Unless additional security mechanisms are used, a\n   Reconstructor/expander\
    \ could be exploited as a packet amplifier.  A\n   third party may inject unauthorized\
    \ Stretch ACKs into the reverse\n   path, triggering the generation of additional\
    \ ACKs.  These ACKs would\n   consume capacity on the return path and processing\
    \ resources at the\n   systems along the path, including the destination host.\
    \  This\n   provides a potential platform for a DoS attack.  The usual\n   precautions\
    \ must be taken to verify the correct tunnel end point, and\n   to ensure that\
    \ applications cannot falsely inject packets that expand\n   to generate unwanted\
    \ traffic.  Imposing a rate limit and bound on the\n   delayed ACK factor(d) would\
    \ also lessen the impact of any undetected\n   exploitation.\n"
- title: 7. Summary
  contents:
  - "7. Summary\n   This document considers several TCP performance constraints that\n\
    \   arise from asymmetry in the properties of the forward and reverse\n   paths\
    \ across an IP network.  Such performance constraints arise,\n   e.g., as a result\
    \ of both bandwidth (capacity) asymmetry, asymmetric\n   shared media in the reverse\
    \ direction, and interactions with Media\n   Access Control (MAC) protocols. \
    \ Asymmetric capacity may cause TCP\n   Acknowledgments (ACKs) to be lost or become\
    \ inordinately delayed\n   (e.g., when a bottleneck link is shared between many\
    \ flows, or when\n   there is bidirectional traffic).  This effect may be exacerbated\
    \ with\n   media-access delays (e.g., in certain multi-hop radio subnetworks,\n\
    \   satellite Bandwidth on Demand access).  Asymmetry, and particular\n   high\
    \ asymmetry, raises a set of TCP performance issues.\n   A set of techniques providing\
    \ performance improvement is surveyed.\n   These include techniques to alleviate\
    \ ACK Congestion and techniques\n   that enable a TCP sender to cope with infrequent\
    \ ACKs without\n   destroying TCP self-clocking.  These techniques include both\
    \ end-to-\n   end, local link-layer, and subnetwork schemes.  Many of these\n\
    \   techniques have been evaluated in detail via analysis, simulation,\n   and/or\
    \ implementation on asymmetric subnetworks forming part of the\n   Internet. \
    \ There is however as yet insufficient operational\n   experience for some techniques,\
    \ and these therefore currently remain\n   items of on-going research and experimentation.\n\
    \   The following table summarizes the current recommendations.\n   Mechanisms\
    \ are classified as recommended (REC), not recommended (NOT\n   REC) or experimental\
    \ (EXP).  Experimental techniques may not be well\n   specified.  These techniques\
    \ will require further operational\n   experience before they can be recommended\
    \ for use in the public\n   Internet.\n   The recommendations for end-to-end host\
    \ modifications are summarized\n   in table 1.  This lists each technique, the\
    \ section in which each\n   technique is discussed, and where it is applied (S\
    \ denotes the host\n   sending TCP data packets in the forward direction, R denotes\
    \ the host\n   which receives these data packets).\n     +------------------------+-------------+------------+--------+\n\
    \     | Technique              |  Use        | Section    | Where  |\n     +------------------------+-------------+------------+--------+\n\
    \     | Modified Delayed ACKs  | NOT REC     | 4.1        | TCP R  |\n     | Large\
    \ MSS  & NO FRAG   | REC         | 4.2        | TCP SR |\n     | Large MSS  &\
    \ IP FRAG   | NOT REC     | 4.2        | TCP SR |\n     | ACK Congestion Control\
    \ | EXP         | 4.3        | TCP SR |\n     | Window Pred. Mech (WPM)| NOT REC\
    \     | 4.4        | TCP R  |\n     | Window Cwnd. Est. (ACE)| NOT REC     | 4.5\
    \        | TCP R  |\n     | TCP Sender Pacing      | EXP *1      | 4.6       \
    \ | TCP S  |\n     | Byte Counting          | NOT REC *2  | 4.7        | TCP S\
    \  |\n     | Backpressure           | EXP *1      | 4.8        | TCP R  |\n  \
    \   +------------------------+-------------+------------+--------+\n         Table\
    \ 1: Recommendations concerning host modifications.\n   *1 Implementation of the\
    \ technique may require changes to the\n      internal design of the protocol\
    \ stack in end hosts.\n   *2 Dependent on a scheme for preventing excessive TCP\
    \ transmission\n      burst.\n   The recommendations for techniques that do not\
    \ require the TCP sender\n   and receiver to be aware of their existence (i.e.,\
    \ transparent\n   techniques) are summarized in table 2.  Each technique is listed\n\
    \   along with the section in which each mechanism is discussed, and\n   where\
    \ the technique is applied (S denotes the sending interface prior\n   to the upstream\
    \ bottleneck link, R denotes receiving interface\n   following the upstream bottleneck\
    \ link).\n     +------------------------+-------------+------------+--------+\n\
    \     | Mechanism              |  Use        | Section    | Type   |\n     +------------------------+-------------+------------+--------+\n\
    \     | Header Compr. (V-J)    | REC *1      | 5.1.1      | 0 SR   |\n     | Header\
    \ Compr. (ROHC)   | REC *1 *2   | 5.1.2      | 0 SR   |\n     +------------------------+-------------+------------+--------+\n\
    \     | ACK Filtering (AF)     | EXP *3      | 5.2.1      | 1 S    |\n     | ACK\
    \ Decimation         | EXP *3      | 5.2.2      | 1 S    |\n     +------------------------+-------------+------------+--------+\n\
    \     | ACK Reconstruction (AR)| NOT REC     | 5.3.1      | 2   *4 |\n     | ACK\
    \ Compaction/Compand.| EXP         | 5.3.2      | 2 S *4 |\n     | Gen. Traff.\
    \ Shap. (GTS)| REC         | 5.3.3      | 2   *5 |\n     +------------------------+-------------+------------+--------+\n\
    \     | Fair Queueing (FQ)     | REC         | 5.4.1      | 3 S    |\n     | ACKs-First\
    \ Scheduling  | NOT REC     | 5.4.2      | 3 S    |\n     +------------------------+-------------+------------+--------+\n\
    \      Table 2: Recommendations concerning transparent modifications.\n   *1 At\
    \ high asymmetry these schemes may degrade TCP performance, but\n      are not\
    \ considered harmful to the Internet.\n   *2 Standardisation of new TCP compression\
    \ protocols is the subject of\n      ongoing work within the ROHC WG, refer to\
    \ other IETF RFCs on the\n      use of these techniques.\n   *3 Use in the Internet\
    \ is dependent on a scheme for preventing\n      excessive TCP transmission burst.\n\
    \   *4 Performed at a point along the reverse path after the upstream\n      bottleneck\
    \ link.\n   *5 Performed at a point along the forward path.\n"
- title: 8. Acknowledgments
  contents:
  - "8. Acknowledgments\n   This document has benefited from comments from the members\
    \ of the\n   Performance Implications of Links (PILC) Working Group.  In\n   particular,\
    \ the authors would like to thank John Border, Spencer\n   Dawkins, Aaron Falk,\
    \ Dan Grossman, Randy Katz, Jeff Mandin, Rod\n   Ragland, Ramon Segura, Joe Touch,\
    \ and Lloyd Wood for their useful\n   comments.  They also acknowledge the data\
    \ provided by Metricom Inc.,\n   concerning operation of their packet data network.\n"
- title: 9. References
  contents:
  - "9. References\n   References of the form RFCnnnn are Internet Request for Comments\n\
    \   (RFC) documents available online at http://www.rfc-editor.org/.\n"
- title: 9.1 Normative References
  contents:
  - "9.1 Normative References\n   [RFC793]  Postel, J., \"Transmission Control Protocol\"\
    , STD 7, RFC\n             793, September 1981.\n   [RFC1122] Braden, R., Ed.,\
    \ \"Requirements for Internet Hosts -\n             Communication Layers\", STD\
    \ 3, RFC 1122, October 1989.\n   [RFC1144] Jacobson, V., \"Compressing TCP/IP\
    \ Headers for Low-Speed\n             Serial Links\", RFC 1144, February 1990.\n\
    \   [RFC1191] Mogul, J. and S. Deering, \"Path MTU Discovery\", RFC 1191,\n  \
    \           November 1990.\n   [RFC2581] Allman, M., Paxson, V. and W. Stevens,\
    \ \"TCP Congestion\n             Control\", RFC 2581, April 1999.\n   [RFC2784]\
    \ Farinacci, D., Li, T., Hanks, S., Meyer, D. and P. Traina,\n             \"\
    Generic Routing Encapsulation (GRE)\", RFC 2784, March\n             2000.\n \
    \  [RFC3135] Border, J., Kojo, M., Griner, J., Montenegro, G. and Z.\n       \
    \      Shelby, \"Performance Enhancing Proxies Intended to Mitigate\n        \
    \     Link-Related Degradations\", RFC 3135, June 2001.\n"
- title: 9.2 Informative References
  contents:
  - "9.2 Informative References\n   [abc-ID]  Allman, M., \"TCP Congestion Control\
    \ with Appropriate Byte\n             Counting\", Work in Progress.\n   [All97b]\
    \  Allman, M., \"Fixing Two BSD TCP Bugs\", Technical Report\n             CR-204151,\
    \ NASA Lewis Research Center, October 1997.\n   [ANS01]   ANSI Standard T1.413,\
    \ \"Network to Customer Installation\n             Interfaces - Asymmetric Digital\
    \ Subscriber Lines (ADSL)\n             Metallic Interface\", November 1998.\n\
    \   [ASB96]   Arora, V., Suphasindhu, N., Baras, J.S. and D. Dillon,\n       \
    \      \"Asymmetric Internet Access over Satellite-Terrestrial\n             Networks\"\
    , Proc. AIAA: 16th International Communications\n             Satellite Systems\
    \ Conference and Exhibit, Part 1,\n             Washington, D.C., February 25-29,\
    \ 1996, pp.476-482.\n   [AST00]   Aggarwal, A., Savage, S., and T. Anderson, \"\
    Understanding\n             the Performance of TCP Pacing\", Proc. IEEE INFOCOM,\
    \ Tel-\n             Aviv, Israel, V.3, March 2000, pp. 1157-1165.\n   [Bal98]\
    \   Balakrishnan, H., \"Challenges to Reliable Data Transport\n             over\
    \ Heterogeneous Wireless Networks\", Ph.D. Thesis,\n             University of\
    \ California at Berkeley, USA, August 1998.\n             http://nms.lcs.mit.edu/papers/hari-phd/\n\
    \   [BPK99]   Balakrishnan, H., Padmanabhan, V. N., and R. H. Katz, \"The\n  \
    \           Effects of Asymmetry on TCP Performance\", ACM Mobile\n          \
    \   Networks and Applications (MONET), Vol.4, No.3, 1999, pp.\n             219-241.\
    \ An expanded version of a paper published at Proc.\n             ACM/IEEE Mobile\
    \ Communications Conference (MOBICOM), 1997.\n   [BPS00]   Bennett, J. C., Partridge,\
    \ C., and N. Schectman, \"Packet\n             Reordering is Not Pathological\
    \ Network Behaviour\", IEEE/ACM\n             Transactions on Networking, Vol.\
    \ 7, Issue. 6, 2000,\n             pp.789-798.\n   [Cla88]   Clark, D.D, \"The\
    \ Design Philosophy of the DARPA Internet\n             Protocols\", ACM Computer\
    \ Communications Review (CCR), Vol.\n             18, Issue 4, 1988, pp.106-114.\n\
    \   [CLC99]   Clausen, H., Linder, H., and B. Collini-Nocker, \"Internet\n   \
    \          over Broadcast Satellites\", IEEE Communications Magazine,\n      \
    \       Vol. 37, Issue. 6, 1999, pp.146-151.\n   [CLP98]   Calveras, A., Linares,\
    \ J., and J. Paradells, \"Window\n             Prediction Mechanism for Improving\
    \ TCP in Wireless\n             Asymmetric Links\". Proc. IEEE Global Communications\n\
    \             Conference (GLOBECOM), Sydney Australia, November 1998,\n      \
    \       pp.533-538.\n   [CR98]    Cohen, R., and Ramanathan, S., \"Tuning TCP\
    \ for High\n             Performance in Hybrid Fiber Coaxial Broad-Band Access\n\
    \             Networks\", IEEE/ACM Transactions on Networking, Vol.6,\n      \
    \       No.1, 1998, pp.15-29.\n   [DS00]    Cable Television Laboratories, Inc.,\
    \ Data-Over-Cable\n             Service Interface Specifications---Radio Frequency\n\
    \             Interface Specification SP-RFIv1.1-I04-00407, 2000\n   [DS01]  \
    \  Data-Over-Cable Service Interface Specifications, Radio\n             Frequency\
    \ Interface Specification 1.0, SP-RFI-I05-991105,\n             Cable Television\
    \ Laboratories, Inc., November 1999.\n   [DMT96]   Durst, R., Miller, G., and\
    \ E. Travis, \"TCP Extensions for\n             Space Communications\", ACM/IEEE\
    \ Mobile Communications\n             Conference (MOBICOM), New York, USA, November\
    \ 1996, pp.15-\n             26.\n   [EN97]    \"Digital Video Broadcasting (DVB);\
    \ DVB Specification for\n             Data Broadcasting\", European Standard (Telecommunications\n\
    \             series) EN 301 192, 1997.\n   [EN00]    \"Digital Video Broadcasting\
    \ (DVB); Interaction Channel for\n             Satellite Distribution Systems\"\
    , Draft European Standard\n             (Telecommunications series) ETSI, Draft\
    \ EN 301 790, v.1.2.1\n   [FJ93]    Floyd, S., and V. Jacobson, \"Random Early\
    \ Detection\n             gateways for Congestion Avoidance\", IEEE/ACM Transactions\n\
    \             on Networking, Vol.1, No.4, 1993, pp.397-413.\n   [FSS01]   Fairhurst,\
    \ G., Samaraweera, N.K.G, Sooriyabandara, M.,\n             Harun, H., Hodson,\
    \ K., and R. Donardio, \"Performance Issues\n             in Asymmetric Service\
    \ Provision using Broadband Satellite\",\n             IEE Proceedings on Communication,\
    \ Vol.148, No.2, 2001,\n             pp.95-99.\n   [ITU01]   ITU-T Recommendation\
    \ E.681, \"Traffic Engineering Methods\n             For IP Access Networks Based\
    \ on Hybrid Fiber/Coax System\",\n             September 2001.\n   [ITU02]   ITU-T\
    \ Recommendation G.992.1, \"Asymmetrical Digital\n             Subscriber Line\
    \ (ADSL) Transceivers\", July 1999.\n   [Jac88]   Jacobson, V., \"Congestion Avoidance\
    \ and Control\", Proc. ACM\n             SIGCOMM, Stanford, CA, ACM Computer Communications\
    \ Review\n             (CCR), Vol.18, No.4, 1988, pp.314-329.\n   [Ken87]   Kent\
    \ C.A., and J. C. Mogul, \"Fragmentation Considered\n             Harmful\", Proc.\
    \ ACM SIGCOMM, USA, ACM Computer\n             Communications Review (CCR), Vol.17,\
    \ No.5, 1988, pp.390-\n             401.\n   [KSG98]   Krout, T., Solsman, M.,\
    \ and J. Goldstein, \"The Effects of\n             Asymmetric Satellite Networks\
    \ on Protocols\", Proc. IEEE\n             Military Communications Conference\
    \ (MILCOM), Bradford, MA,\n             USA, Vol.3, 1998, pp.1072-1076.\n   [KVR98]\
    \   Kalampoukas, L., Varma, A., and Ramakrishnan, K.K.,\n             \"Improving\
    \ TCP Throughput over Two-Way Asymmetric Links:\n             Analysis and Solutions\"\
    , Proc. ACM SIGMETRICS, Medison,\n             USA, 1998, pp.78-89.\n   [LM97]\
    \    Lin, D., and R. Morris, \"Dynamics of Random Early\n             Detection\"\
    , Proc. ACM SIGCOMM, Cannes, France, ACM Computer\n             Communications\
    \ Review (CCR), Vol.27, No.4, 1997, pp.78-89.\n   [LMS97]   Lakshman, T.V., Madhow,\
    \ U., and B. Suter, \"Window-based\n             Error Recovery and Flow Control\
    \ with a Slow Acknowledgement\n             Channel: A Study of TCP/IP Performance\"\
    , Proc. IEEE\n             INFOCOM, Vol.3, Kobe, Japan, 1997, pp.1199-1209.\n\
    \   [MJW00]   Ming-Chit, I.T., Jinsong, D., and W. Wang,\"Improving TCP\n    \
    \         Performance Over Asymmetric Networks\", ACM SIGCOMM, ACM\n         \
    \    Computer Communications Review (CCR), Vol.30, No.3, 2000.\n   [Pad98]   Padmanabhan,\
    \ V.N., \"Addressing the Challenges of Web Data\n             Transport\", Ph.D.\
    \ Thesis, University of California at\n             Berkeley, USA, September 1998\
    \ (also Tech Report UCB/CSD-\n             98-1016). http://www.cs.berkeley.edu/~padmanab/phd-\n\
    \             thesis.html\n   [RFC1323] Jacobson, V., Braden, R. and D. Borman,\
    \ \"TCP Extensions for\n             High Performance\", RFC 1323, May 1992.\n\
    \   [RFC2018] Mathis, B., Mahdavi, J., Floyd, S. and A. Romanow, \"TCP\n     \
    \        Selective Acknowledgment Options\", RFC 2018, October 1996.\n   [RFC2402]\
    \ Kent, S. and R. Atkinson, \"IP Authentication Header\", RFC\n             2402,\
    \ November 1998.\n   [RFC2406] Kent, S. and R. Atkinson, \"IP Encapsulating Security\n\
    \             Payload (ESP)\", RFC 2406, November 1998.\n   [RFC2507] Degermark,\
    \ M., Nordgren, B. and S. Pink, \"IP Header\n             Compression\", RFC 2507,\
    \ February 1999.\n   [RFC2525] Paxson, V., Allman, M., Dawson, S., Heavens, I.\
    \ and B.\n             Volz, \"Known TCP Implementation Problems\", RFC 2525,\
    \ March\n             1999.\n   [RFC2686] Bormann, C., \"The Multi-Class Extension\
    \ to Multi-Link PPP\",\n             RFC 2686, September 1999.\n   [RFC2760] Allman,\
    \ M., Dawkins, S., Glover, D., Griner, J., Henderson,\n             T., Heidemann,\
    \ J., Kruse, H., Ostermann, S., Scott, K.,\n             Semke, J., Touch, J.\
    \ and D. Tran, \"Ongoing TCP Research\n             Related to Satellites\", RFC\
    \ 2760, February 2000.\n   [RFC2988] Paxson, V. and M. Allman, \"Computing TCP's\
    \ Retransmission\n             Timer\", RFC 2988, November 2000.\n   [RFC3077]\
    \ Duros, E., Dabbous, W., Izumiyama, H., Fujii, N. and Y.\n             Zhang,\
    \ \"A link Layer tunneling mechanism for unidirectional\n             links\"\
    , RFC 3077, March 2001.\n   [RFC3095] Bormann, C., Burmeister, C., Degermark,\
    \ M., Fukushima, H.,\n             Hannu, H., Jonsson, E., Hakenberg, R., Koren,\
    \ T., Le, K.,\n             Liu, Z., Martensson, A., Miyazaki, A., Svanbro, K.,\
    \ Wiebke,\n             T., Yoshimura, T. and H. Zheng, \"RObust Header Compression\n\
    \             (ROHC): Framework and four profiles: RTP, UDP ESP and\n        \
    \     uncompressed\", RFC 3095, July 2001.\n   [RFC3150] Dawkins, S., Montenegro,\
    \ G., Kojo, M. and V. Magret, \"End-\n             to-end Performance Implications\
    \ of Slow Links\", BCP 48, RFC\n             3150, July 2001.\n   [RFC3168] Ramakrishnan\
    \ K., Floyd, S. and D. Black, \"A Proposal to add\n             Explicit Congestion\
    \ Notification (ECN) to IP\", RFC 3168,\n             September 2001.\n   [Sam99]\
    \   Samaraweera, N.K.G, \"Return Link Optimization for Internet\n            \
    \ Service Provision Using DVB-S Networks\", ACM Computer\n             Communications\
    \ Review (CCR), Vol.29, No.3, 1999, pp.4-19.\n   [Seg00]   Segura R., \"Asymmetric\
    \ Networking Techniques For Hybrid\n             Satellite Communications\", NC3A,\
    \ The Hague, Netherlands,\n             NATO Technical Note 810, August 2000,\
    \ pp.32-37.\n   [SF98]    Samaraweera, N.K.G., and G. Fairhurst. \"High Speed\
    \ Internet\n             Access using Satellite-based DVB Networks\", Proc. IEEE\n\
    \             International Networks Conference (INC98), Plymouth, UK,\n     \
    \        1998, pp.23-28.\n   [ZSC91]   Zhang, L., Shenker, S., and D. D. Clark,\
    \ \"Observations and\n             Dynamics of a Congestion Control Algorithm:\
    \ The Effects of\n             Two-Way Traffic\", Proc. ACM SIGCOMM, ACM Computer\n\
    \             Communications Review (CCR), Vol 21, No 4, 1991, pp.133-\n     \
    \        147.\n"
- title: 10. IANA Considerations
  contents:
  - "10. IANA Considerations\n   There are no IANA considerations associated with\
    \ this document.\n"
- title: Appendix - Examples of Subnetworks Exhibiting Network Path Asymmetry
  contents:
  - "Appendix - Examples of Subnetworks Exhibiting Network Path Asymmetry\n   This\
    \ appendix provides a list of some subnetworks which are known to\n   experience\
    \ network path asymmetry.  The asymmetry in capacity of\n   these network paths\
    \ can require mitigations to provide acceptable\n   overall performance.  Examples\
    \ include the following:\n   -  IP service over some wide area and local area\
    \ wireless networks.\n      In such networks, the predominant network path asymmetry\
    \ arises\n      from the hub-and-spokes architecture of the network (e.g., a\n\
    \      single base station that communicates with multiple mobile\n      stations),\
    \ this requires a Ready To Send / Clear To Send (RTS/CTS)\n      protocol and\
    \ a Medium Access Control (MAC) protocol which needs to\n      accommodate the\
    \ significant turn-around time for the radios.  A\n      high per-packet transmission\
    \ overhead may lead to significant\n      network path asymmetry.\n   -  IP service\
    \ over a forward satellite link utilizing Digital Video\n      Broadcast (DVB)\
    \ transmission [EN97] (e.g., 38-45 Mbps), and a\n      slower upstream link using\
    \ terrestrial network technology (e.g.,\n      dial-up modem, line of sight microwave,\
    \ cellular radio) [CLC99].\n      Network path asymmetry arises from a difference\
    \ in the upstream\n      and downstream link capacities.\n   -  Certain military\
    \ networks [KSG98] providing Internet access to\n      in-transit or isolated\
    \ hosts [Seg00] using a high capacity\n      downstream satellite link (e.g.,\
    \ 2-3 Mbps) with a narrowband\n      upstream link (e.g., 2.4-9.6 kbps) using\
    \ either Demand Assigned\n      Multiple Access (DAMA) or fixed rate satellite\
    \ links.  The main\n      factor contributing to network path asymmetry is the\
    \ difference in\n      the upstream and downstream link capacities.  Some differences\n\
    \      between forward and reverse paths may arise from the way in which\n   \
    \   upstream link capacity is allocated.\n   -  Most data over cable TV networks\
    \ (e.g., DOCSIS [ITU01, DS00]),\n      where the analogue channels assigned for\
    \ upstream communication\n      (i.e., in the reverse direction) are narrower\
    \ and may be more\n      noisy than those assigned for the downstream link.  As\
    \ a\n      consequence, the upstream and downstream links differ in their\n  \
    \    transmission rate. For example, in DOCSIS 1.0 [DS00], the\n      downstream\
    \ transmission rate is either 27 or 52 Mbps.  Upstream\n      transmission rates\
    \ may be dynamically selected to be one of a\n      series of rates which range\
    \ between 166 kbps to 9 Mbps.  Operators\n      may assign multiple upstream channels\
    \ per downstream channel.\n      Physical layer (PHY) overhead (which accompanies\
    \ upstream\n      transmissions, but is not present in the downstream link) can\
    \ also\n      increase the network path asymmetry. The Best Effort service,\n\
    \      which is typically used to carry TCP, uses a\n      contention/reservation\
    \ MAC protocol.  A cable modem (CM) sending\n      an isolated packet (such as\
    \ a TCP ACK) on the upstream link must\n      contend with other CMs to request\
    \ capacity from the central cable\n      modem termination system (CMTS).  The\
    \ CMTS then grants timeslots\n      to a CM for the upstream transmission.  The\
    \ CM may \"piggyback\"\n      subsequent requests onto upstream packets, avoiding\
    \ contention\n      cycles; as a result, spacing of TCP ACKs can be dramatically\n\
    \      altered due to minor variations in load of the cable data network\n   \
    \   and inter-arrival times of TCP DATA packets.  Numerous other\n      complexities\
    \ may add to, or mitigate, the asymmetry in rate and\n      access latency experienced\
    \ by packets sent on the upstream link\n      relative to downstream packets in\
    \ DOCSIS.  The asymmetry\n      experienced by end hosts may also change dynamically\
    \ (e.g., with\n      network load), and when best effort services share capacity\
    \ with\n      services that have symmetric reserved capacity (e.g., IP telephony\n\
    \      over the Unsolicited Grant service) [ITU01].\n   -  Asymmetric Digital\
    \ Subscriber Line (ADSL), by definition, offers a\n      downstream link transmission\
    \ rate that is higher than that of the\n      upstream link.  The available rates\
    \ depend upon channel quality\n      and system configuration.  For example, one\
    \ widely deployed ADSL\n      technology [ITU02, ANS01] operates at rates that\
    \ are multiples of\n      32 kbps (up to 6.144 Mbps) in the downstream link, and\
    \ up to 640\n      kbps for the upstream link.  The network path asymmetry\n \
    \     experienced by end hosts may be further increased when best effort\n   \
    \   services, e.g., Internet access over ADSL, share the available\n      upstream\
    \ capacity with reserved services (e.g., constant bit rate\n      voice telephony).\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Hari Balakrishnan\n   Laboratory for Computer Science\n\
    \   200 Technology Square\n   Massachusetts Institute of Technology\n   Cambridge,\
    \ MA 02139\n   USA\n   Phone: +1-617-253-8713\n   EMail: hari@lcs.mit.edu\n  \
    \ Web: http://nms.lcs.mit.edu/~hari/\n   Venkata N. Padmanabhan\n   Microsoft\
    \ Research\n   One Microsoft Way\n   Redmond, WA 98052\n   USA\n   Phone: +1-425-705-2790\n\
    \   EMail: padmanab@microsoft.com\n   Web: http://www.research.microsoft.com/~padmanab/\n\
    \   Godred Fairhurst\n   Department of Engineering\n   Fraser Noble Building\n\
    \   University of Aberdeen\n   Aberdeen AB24 3UE\n   UK\n   EMail: gorry@erg.abdn.ac.uk\n\
    \   Web: http://www.erg.abdn.ac.uk/users/gorry\n   Mahesh Sooriyabandara\n   Department\
    \ of Engineering\n   Fraser Noble Building\n   University of Aberdeen\n   Aberdeen\
    \ AB24 3UE\n   UK\n   EMail: mahesh@erg.abdn.ac.uk\n   Web: http://www.erg.abdn.ac.uk/users/mahesh\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2002).  All\
    \ Rights Reserved.\n   This document and translations of it may be copied and\
    \ furnished to\n   others, and derivative works that comment on or otherwise explain\
    \ it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
