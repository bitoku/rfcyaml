- contents:
  - "                Internet X.509 Public Key Infrastructure\n                       Time-Stamp
    Protocol (TSP)\n"
  title: __initial_text__
- contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol
    for the\n   Internet community, and requests discussion and suggestions for\n
    \  improvements.  Please refer to the current edition of the \"Internet\n   Official
    Protocol Standards\" (STD 1) for the standardization state\n   and status of this
    protocol.  Distribution of this memo is unlimited.\n"
  title: Status of this Memo
- contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2001).  All Rights Reserved.\n"
  title: Copyright Notice
- contents:
  - "Abstract\n   This document describes the format of a request sent to a Time\n
    \  Stamping Authority (TSA) and of the response that is returned.  It\n   also
    establishes several security-relevant requirements for TSA\n   operation, with
    regards to processing requests to generate responses.\n"
  title: Abstract
- contents:
  - "1.  Introduction\n   A time-stamping service supports assertions of proof that
    a datum\n   existed before a particular time.  A TSA may be operated as a Trusted\n
    \  Third Party (TTP) service, though other operational models may be\n   appropriate,
    e.g., an organization might require a TSA for internal\n   time-stamping purposes.\n
    \  Non-repudiation services [ISONR] require the ability to establish the\n   existence
    of data before specified times.  This protocol may be used\n   as a building block
    to support such services.  An example of how to\n   prove that a digital signature
    was generated during the validity\n   period of a public key certificate is given
    in an annex.\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHOULD\",
    \"SHOULD NOT\",\n   \"SHALL\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this
    document (in\n   uppercase, as shown) are to be interpreted as described in [RFC2119].\n
    \  In order to associate a datum with a particular point in time, a Time\n   Stamp
    Authority (TSA) may need to be used.  This Trusted Third Party\n   provides a
    \"proof-of-existence\" for this particular datum at an\n   instant in time.\n
    \  The TSA's role is to time-stamp a datum to establish evidence\n   indicating
    that a datum existed before a particular time.  This can\n   then be used, for
    example, to verify that a digital signature was\n   applied to a message before
    the corresponding certificate was revoked\n   thus allowing a revoked public key
    certificate to be used for\n   verifying signatures created prior to the time
    of revocation.  This\n   is an important public key infrastructure operation.
    \ The TSA can\n   also be used to indicate the time of submission when a deadline
    is\n   critical, or to indicate the time of transaction for entries in a\n   log.
    \ An exhaustive list of possible uses of a TSA is beyond the\n   scope of this
    document.\n   This standard does not establish overall security requirements for\n
    \  TSA operation, just like other PKIX standards do not establish such\n   requirements
    for CA operation.  Rather, it is anticipated that a TSA\n   will make known to
    prospective clients the policies it implements to\n   ensure accurate time-stamp
    generation, and clients will make use of\n   the services of a TSA only if they
    are satisfied that these policies\n   meet their needs.\n"
  title: 1.  Introduction
- contents:
  - "2. The TSA\n   The TSA is a TTP that creates time-stamp tokens in order to indicate\n
    \  that a datum existed at a particular point in time.\n   For the remainder of
    this document a \"valid request\" shall mean one\n   that can be decoded correctly,
    is of the form specified in Section\n   2.4, and is from a supported TSA subscriber.\n"
  - contents:
    - "2.1. Requirements of the TSA\n   The TSA is REQUIRED:\n   1.    to use a trustworthy
      source of time.\n   2.    to include a trustworthy time value for each time-stamp
      token.\n   3.    to include a unique integer for each newly generated time-stamp\n
      \        token.\n   4.    to produce a time-stamp token upon receiving a valid
      request\n         from the requester, when it is possible.\n   5.    to include
      within each time-stamp token an identifier to\n         uniquely indicate the
      security policy under which the token was\n         created.\n   6.    to only
      time-stamp a hash representation of the datum, i.e., a\n         data imprint
      associated with a one-way collision resistant\n         hash-function uniquely
      identified by an OID.\n   7.    to examine the OID of the one-way collision
      resistant hash-\n         function and to verify that the hash value length
      is consistent\n         with the hash algorithm.\n   8.    not to examine the
      imprint being time-stamped in any way (other\n         than to check its length,
      as specified in the previous bullet).\n   9.    not to include any identification
      of the requesting entity in\n         the time-stamp tokens.\n   10.   to sign
      each time-stamp token using a key generated exclusively\n         for this purpose
      and have this property of the key indicated on\n         the corresponding certificate.\n
      \  11.   to include additional information in the time-stamp token, if\n         asked
      by the requester using the extensions field, only for the\n         extensions
      that are supported by the TSA.  If this is not\n         possible, the TSA SHALL
      respond with an error message.\n"
    title: 2.1. Requirements of the TSA
  - contents:
    - "2.2. TSA Transactions\n   As the first message of this mechanism, the requesting
      entity\n   requests a time-stamp token by sending a request (which is or\n   includes
      a TimeStampReq, as defined below) to the Time Stamping\n   Authority.  As the
      second message, the Time Stamping Authority\n   responds by sending a response
      (which is or includes a TimeStampResp,\n   as defined below) to the requesting
      entity.\n   Upon receiving the response (which is or includes a TimeStampResp\n
      \  that normally contains a TimeStampToken (TST), as defined below), the\n   requesting
      entity SHALL verify the status error returned in the\n   response and if no
      error is present it SHALL verify the various\n   fields contained in the TimeStampToken
      and the validity of the\n   digital signature of the TimeStampToken.  In particular,
      it SHALL\n   verify that what was time-stamped corresponds to what was requested\n
      \  to be time-stamped.  The requester SHALL verify that the\n   TimeStampToken
      contains the correct certificate identifier of the\n   TSA, the correct data
      imprint and the correct hash algorithm OID.  It\n   SHALL then verify the timeliness
      of the response by verifying either\n   the time included in the response against
      a local trusted time\n   reference, if one is available, or the value of the
      nonce (large\n   random number with a high probability that it is generated
      by the\n   client only once) included in the response against the value included\n
      \  in the request.  For more details about replay attack detection, see\n   the
      security considerations section (item 6).  If any of the\n   verifications above
      fails, the TimeStampToken SHALL be rejected.\n   Then, since the TSA's certificate
      may have been revoked, the status\n   of the certificate SHOULD be checked (e.g.,
      by checking the\n   appropriate CRL) to verify that the certificate is still
      valid.\n   Then, the client application SHOULD check the policy field to\n   determine
      whether or not the policy under which the token was issued\n   is acceptable
      for the application.\n"
    title: 2.2. TSA Transactions
  - contents:
    - "2.3. Identification of the TSA\n   The TSA MUST sign each time-stamp message
      with a key reserved\n   specifically for that purpose.  A TSA MAY have distinct
      private keys,\n   e.g., to accommodate different policies, different algorithms,\n
      \  different private key sizes or to increase the performance.  The\n   corresponding
      certificate MUST contain only one instance of the\n   extended key usage field
      extension as defined in [RFC2459] Section\n   4.2.1.13 with KeyPurposeID having
      value:\n   id-kp-timeStamping.  This extension MUST be critical.\n   The following
      object identifier identifies the KeyPurposeID having\n   value id-kp-timeStamping.\n
      \  id-kp-timeStamping OBJECT IDENTIFIER ::= {iso(1)\n                   identified-organization(3)
      dod(6)\n                   internet(1) security(5) mechanisms(5) pkix(7)\n                   kp
      (3) timestamping (8)}\n"
    title: 2.3. Identification of the TSA
  - contents:
    - '2.4. Request and Response Formats

      '
    - contents:
      - "2.4.1. Request Format\n   A time-stamping request is as follows:\n"
      - "TimeStampReq ::= SEQUENCE  {\n   version                      INTEGER  {
        v1(1) },\n   messageImprint               MessageImprint,\n     --a hash algorithm
        OID and the hash value of the data to be\n     --time-stamped\n   reqPolicy
        \            TSAPolicyId              OPTIONAL,\n   nonce                 INTEGER
        \                 OPTIONAL,\n   certReq               BOOLEAN                  DEFAULT
        FALSE,\n   extensions            [0] IMPLICIT Extensions  OPTIONAL  }\n   The
        version field (currently v1) describes the version of the Time-\n   Stamp
        request.\n   The messageImprint field SHOULD contain the hash of the datum
        to be\n   time-stamped.  The hash is represented as an OCTET STRING.  Its\n
        \  length MUST match the length of the hash value for that algorithm\n   (e.g.,
        20 bytes for SHA-1 or 16 bytes for MD5).\n   MessageImprint ::= SEQUENCE  {\n
        \       hashAlgorithm                AlgorithmIdentifier,\n        hashedMessage
        \               OCTET STRING  }\n   The hash algorithm indicated in the hashAlgorithm
        field SHOULD be a\n   known hash algorithm (one-way and collision resistant).
        \ That means\n   that it SHOULD be one-way and collision resistant.  The Time
        Stamp\n   Authority SHOULD check whether or not the given hash algorithm is\n
        \  known to be \"sufficient\" (based on the current state of knowledge in\n
        \  cryptanalysis and the current state of the art in computational\n   resources,
        for example).  If the TSA does not recognize the hash\n   algorithm or knows
        that the hash algorithm is weak (a decision left\n   to the discretion of
        each individual TSA), then the TSA SHOULD refuse\n   to provide the time-stamp
        token by returning a pkiStatusInfo of\n   'bad_alg'.\n   The reqPolicy field,
        if included, indicates the TSA policy under\n   which the TimeStampToken SHOULD
        be provided.  TSAPolicyId is defined\n   as follows:\n      TSAPolicyId ::=
        OBJECT IDENTIFIER\n   The nonce, if included, allows the client to verify
        the timeliness of\n   the response when no local clock is available.  The
        nonce is a large\n   random number with a high probability that the client
        generates it\n   only once (e.g., a 64 bit integer).  In such a case the same
        nonce\n   value MUST be included in the response, otherwise the response shall\n
        \  be rejected.\n   If the certReq field is present and set to true, the TSA's
        public key\n   certificate that is referenced by the ESSCertID identifier
        inside a\n   SigningCertificate attribute in the response MUST be provided
        by the\n   TSA in the certificates field from the SignedData structure in
        that\n   response.  That field may also contain other certificates.\n   If
        the certReq field is missing or if the certReq field is present\n   and set
        to false then the certificates field from the SignedData\n   structure MUST
        not be present in the response.\n   The extensions field is a generic way
        to add additional information\n   to the request in the future.  Extensions
        is defined in [RFC 2459].\n   If an extension, whether it is marked critical
        or not critical, is\n   used by a requester but is not recognized by a time-stamping
        server,\n   the server SHALL not issue a token and SHALL return a failure\n
        \  (unacceptedExtension).\n   The time-stamp request does not identify the
        requester, as this\n   information is not validated by the TSA (See Section
        2.1).  In\n   situations where the TSA requires the identity of the requesting\n
        \  entity, alternate identification /authentication means have to be\n   used
        (e.g., CMS encapsulation [CMS] or TLS authentication [RFC2246]).\n"
      title: 2.4.1. Request Format
    - contents:
      - "2.4.2. Response Format\n   A time-stamping response is as follows:\n   TimeStampResp
        ::= SEQUENCE  {\n      status                  PKIStatusInfo,\n      timeStampToken
        \         TimeStampToken     OPTIONAL  }\n   The status is based on the definition
        of status in section 3.2.3\n   of [RFC2510] as follows:\n   PKIStatusInfo
        ::= SEQUENCE {\n      status        PKIStatus,\n      statusString  PKIFreeText
        \    OPTIONAL,\n      failInfo      PKIFailureInfo  OPTIONAL  }\n   When the
        status contains the value zero or one, a TimeStampToken MUST\n   be present.
        \ When status contains a value other than zero or one, a\n   TimeStampToken
        MUST NOT be present.  One of the following values MUST\n   be contained in
        status:\n   PKIStatus ::= INTEGER {\n      granted                (0),\n      --
        when the PKIStatus contains the value zero a TimeStampToken, as\n         requested,
        is present.\n      grantedWithMods        (1),\n       -- when the PKIStatus
        contains the value one a TimeStampToken,\n         with modifications, is
        present.\n      rejection              (2),\n      waiting                (3),\n
        \     revocationWarning      (4),\n       -- this message contains a warning
        that a revocation is\n       -- imminent\n      revocationNotification (5)\n
        \      -- notification that a revocation has occurred  }\n   Compliant servers
        SHOULD NOT produce any other values. Compliant\n   clients MUST generate an
        error if values it does not understand are\n   present.\n   When the TimeStampToken
        is not present, the failInfo indicates the\n   reason why the time-stamp request
        was rejected and may be one of the\n   following values.\n"
      - "PKIFailureInfo ::= BIT STRING {\n   badAlg               (0),\n     -- unrecognized
        or unsupported Algorithm Identifier\n   badRequest           (2),\n     --
        transaction not permitted or supported\n   badDataFormat        (5),\n     --
        the data submitted has the wrong format\n   timeNotAvailable    (14),\n     --
        the TSA's time source is not available\n   unacceptedPolicy    (15),\n     --
        the requested TSA policy is not supported by the TSA\n   unacceptedExtension
        (16),\n     -- the requested extension is not supported by the TSA\n    addInfoNotAvailable
        (17)\n      -- the additional information requested could not be understood\n
        \     -- or is not available\n    systemFailure       (25)\n      -- the request
        cannot be handled due to system failure  }\n   These are the only values of
        PKIFailureInfo that SHALL be supported.\n   Compliant servers SHOULD NOT produce
        any other values. Compliant\n   clients MUST generate an error if values it
        does not understand are\n   present.\n   The statusString field of PKIStatusInfo
        MAY be used to include reason\n   text such as \"messageImprint field is not
        correctly formatted\".\n   A TimeStampToken is as follows.  It is defined
        as a ContentInfo\n   ([CMS]) and SHALL encapsulate a signed data content type.\n
        \  TimeStampToken ::= ContentInfo\n     -- contentType is id-signedData ([CMS])\n
        \    -- content is SignedData ([CMS])\n   The fields of type EncapsulatedContentInfo
        of the SignedData\n   construct have the following meanings:\n   eContentType
        is an object identifier that uniquely specifies the\n   content type.  For
        a time-stamp token it is defined as:\n   id-ct-TSTInfo  OBJECT IDENTIFIER
        ::= { iso(1) member-body(2)\n   us(840) rsadsi(113549) pkcs(1) pkcs-9(9) smime(16)
        ct(1) 4}\n   eContent is the content itself, carried as an octet string.\n
        \  The eContent SHALL be the DER-encoded value of TSTInfo.\n   The time-stamp
        token MUST NOT contain any signatures other than the\n   signature of the
        TSA.  The certificate identifier (ESSCertID) of the\n   TSA certificate MUST
        be included as a signerInfo attribute inside a\n   SigningCertificate attribute.\n"
      - "TSTInfo ::= SEQUENCE  {\n   version                      INTEGER  { v1(1)
        },\n   policy                       TSAPolicyId,\n   messageImprint               MessageImprint,\n
        \    -- MUST have the same value as the similar field in\n     -- TimeStampReq\n
        \  serialNumber                 INTEGER,\n    -- Time-Stamping users MUST
        be ready to accommodate integers\n    -- up to 160 bits.\n   genTime                      GeneralizedTime,\n
        \  accuracy                     Accuracy                 OPTIONAL,\n   ordering
        \                    BOOLEAN             DEFAULT FALSE,\n   nonce                        INTEGER
        \                 OPTIONAL,\n     -- MUST be present if the similar field
        was present\n     -- in TimeStampReq.  In that case it MUST have the same
        value.\n   tsa                          [0] GeneralName          OPTIONAL,\n
        \  extensions                   [1] IMPLICIT Extensions   OPTIONAL  }\n   The
        version field (currently v1) describes the version of the time-\n   stamp
        token.\n   Conforming time-stamping servers MUST be able to provide version
        1\n   time-stamp tokens.\n   Among the optional fields, only the nonce field
        MUST be supported.\n   Conforming time-stamping requesters MUST be able to
        recognize version\n   1 time-stamp tokens with all the optional fields present,
        but are not\n   mandated to understand the semantics of any extension, if
        present.\n   The policy field MUST indicate the TSA's policy under which the\n
        \  response was produced.  If a similar field was present in the\n   TimeStampReq,
        then it MUST have the same value, otherwise an error\n   (unacceptedPolicy)
        MUST be returned.  This policy MAY include the\n   following types of information
        (although this list is certainly not\n   exhaustive):\n   *  The conditions
        under which the time-stamp token may be used.\n   *  The availability of a
        time-stamp token log, to allow later\n      verification that a time-stamp
        token is authentic.\n   The messageImprint MUST have the same value as the
        similar field in\n   TimeStampReq, provided that the size of the hash value
        matches the\n   expected size of the hash algorithm identified in hashAlgorithm.\n
        \  The serialNumber field is an integer assigned by the TSA to each\n   TimeStampToken.
        \ It MUST be unique for each TimeStampToken issued by\n   a given TSA (i.e.,
        the TSA name and serial number identify a unique\n   TimeStampToken).  It
        should be noticed that the property MUST be\n   preserved even after a possible
        interruption (e.g., crash) of the\n   service.\n   genTime is the time at
        which the time-stamp token has been created by\n   the TSA.  It is expressed
        as UTC time (Coordinated Universal Time) to\n   reduce confusion with the
        local time zone use.  UTC is a time scale,\n   based on the second (SI), as
        defined and recommended by the CCIR, and\n   maintained by the Bureau International
        des Poids et Mesures (BIPM). A\n   synonym is \"Zulu\" time which is used
        by the civil aviation and\n   represented by the letter \"Z\" (phonetically
        \"Zulu\").\n   The ASN.1 GeneralizedTime syntax can include fraction-of-second\n
        \  details.  Such syntax, without the restrictions from [RFC 2459]\n   Section
        4.1.2.5.2, where GeneralizedTime is limited to represent the\n   time with
        a granularity of one second, may be used here.\n   GeneralizedTime values
        MUST include seconds.  However, when there is\n   no need to have a precision
        better than the second, then\n   GeneralizedTime with a precision limited
        to one second SHOULD be used\n   (as in [RFC 2459]).\n   The syntax is: YYYYMMDDhhmmss[.s...]Z\n
        \  Example: 19990609001326.34352Z\n   X.690 | ISO/IEC 8825-1 provides the
        following restrictions for a\n   DER-encoding.\n   The encoding MUST terminate
        with a \"Z\" (which means \"Zulu\" time). The\n   decimal point element, if
        present, MUST be the point option \".\". The\n   fractional-seconds elements,
        if present, MUST omit all trailing 0's;\n   if the elements correspond to
        0, they MUST be wholly omitted, and the\n   decimal point element also MUST
        be omitted.\n   Midnight (GMT) shall be represented in the form: \"YYYYMMDD000000Z\"\n
        \  where \"YYYYMMDD\" represents the day following the midnight in\n   question.\n
        \  Here are a few examples of valid representations:\n      \"19920521000000Z\"\n
        \     \"19920622123421Z\"\n      \"19920722132100.3Z\"\n   accuracy represents
        the time deviation around the UTC time contained\n   in GeneralizedTime.\n
        \  Accuracy ::= SEQUENCE {\n         seconds        INTEGER              OPTIONAL,\n
        \        millis     [0] INTEGER  (1..999)    OPTIONAL,\n         micros     [1]
        INTEGER  (1..999)    OPTIONAL  }\n   If either seconds, millis or micros is
        missing, then a value of zero\n   MUST be taken for the missing field.\n   By
        adding the accuracy value to the GeneralizedTime, an upper limit\n   of the
        time at which the time-stamp token has been created by the TSA\n   can be
        obtained.  In the same way, by subtracting the accuracy to the\n   GeneralizedTime,
        a lower limit of the time at which the time-stamp\n   token has been created
        by the TSA can be obtained.\n   accuracy can be decomposed in seconds, milliseconds
        (between 1-999)\n   and microseconds (1-999), all expressed as integer.\n
        \  When the accuracy optional field is not present, then the accuracy\n   may
        be available through other means, e.g., the TSAPolicyId.\n   If the ordering
        field is missing, or if the ordering field is present\n   and set to false,
        then the genTime field only indicates the time at\n   which the time-stamp
        token has been created by the TSA.  In such a\n   case, the ordering of time-stamp
        tokens issued by the same TSA or\n   different TSAs is only possible when
        the difference between the\n   genTime of the first time-stamp token and the
        genTime of the second\n   time-stamp token is greater than the sum of the
        accuracies of the\n   genTime for each time-stamp token.\n   If the ordering
        field is present and set to true, every time-stamp\n   token from the same
        TSA can always be ordered based on the genTime\n   field, regardless of the
        genTime accuracy.\n   The nonce field MUST be present if it was present in
        the\n   TimeStampReq. In such a case it MUST equal the value provided in the\n
        \  TimeStampReq structure.\n   The purpose of the tsa field is to give a hint
        in identifying the\n   name of the TSA.  If present, it MUST correspond to
        one of the\n   subject names included in the certificate that is to be used
        to\n   verify the token.  However, the actual identification of the entity\n
        \  that signed the response will always occur through the use of the\n   certificate
        identifier (ESSCertID Attribute) inside a\n   SigningCertificate attribute
        which is part of the signerInfo (See\n   Section 5 of [ESS]).\n   extensions
        is a generic way to add additional information in the\n   future.  Extensions
        is defined in [RFC 2459].\n   Particular extension field types may be specified
        in standards or may\n   be defined and registered by any organization or community.\n"
      title: 2.4.2. Response Format
    title: 2.4. Request and Response Formats
  title: 2. The TSA
- contents:
  - "3. Transports\n   There is no mandatory transport mechanism for TSA messages
    in this\n   document.  The mechanisms described below are optional; additional\n
    \  optional mechanisms may be defined in the future.\n"
  - contents:
    - "3.1. Time-Stamp Protocol Using E-mail\n   This section specifies a means for
      conveying ASN.1-encoded messages\n   for the protocol exchanges described in
      Section 2 and Appendix D via\n   Internet mail.\n   Two MIME objects are specified
      as follows:\n   Content-Type: application/timestamp-query\n   Content-Transfer-Encoding:
      base64\n   <<the ASN.1 DER-encoded Time-Stamp message, base64-encoded>>\n   Content-Type:
      application/timestamp-reply\n   Content-Transfer-Encoding: base64\n   <<the
      ASN.1 DER-encoded Time-Stamp message, base64-encoded>>\n   These MIME objects
      can be respectively sent and received using common\n   MIME processing engines
      and provides a simple Internet mail transport\n   for Time-Stamp messages.\n
      \  For the application/timestamp-query and application/timestamp-reply\n   MIME
      types, implementations SHOULD include the optional \"name\" and\n   \"filename\"
      parameters.  Including a file name helps preserve type\n   information when
      time-stamp queries and replies are saved as files.\n   When these parameters
      are included, a file name with the appropriate\n   extension SHOULD be selected:\n
      \          MIME Type                     File Extension\n      application/timestamp-query
      \           .TSQ\n      application/timestamp-reply            .TSR\n   In addition,
      the file name SHOULD be limited to eight characters\n   followed by a three
      letter extension.  The eight character filename\n   base can be any distinct
      name.\n"
    title: 3.1. Time-Stamp Protocol Using E-mail
  - contents:
    - "3.2. File Based Protocol\n   A file containing a time-stamp message MUST contain
      only the DER\n   encoding of one TSA message, i.e., there MUST be no extraneous
      header\n   or trailer information in the file.  Such files can be used to\n
      \  transport time stamp messages using for example, FTP.\n   A Time-Stamp Request
      SHOULD be contained in a file with file\n   extension .tsq (like Time-Stamp
      Query).  A Time-Stamp Response\n   SHOULD be contained in a file with file extension
      .tsr (like\n   Time-Stamp Reply).\n"
    title: 3.2. File Based Protocol
  - contents:
    - "3.3. Socket Based Protocol\n   The following simple TCP-based protocol is to
      be used for transport\n   of TSA messages.  This protocol is suitable for cases
      where an entity\n   initiates a transaction and can poll to pick up the results.\n
      \  The protocol basically assumes a listener process on a TSA that can\n   accept
      TSA messages on a well-defined port (IP port number 318).\n   Typically an initiator
      binds to this port and submits the initial TSA\n   message.  The responder replies
      with a TSA message and/or with a\n   reference number to be used later when
      polling for the actual TSA\n   message response.\n   If a number of TSA response
      messages are to be produced for a given\n   request (say if a receipt must be
      sent before the actual token can be\n   produced) then a new polling reference
      is also returned.\n   When the final TSA response message has been picked up
      by the\n   initiator then no new polling reference is supplied.\n   The initiator
      of a transaction sends a \"direct TCP-based TSA message\"\n   to the recipient.
      \ The recipient responds with a similar message.\n   A \"direct TCP-based TSA
      message\" consists of:\n         length (32-bits), flag (8-bits), value (defined
      below)\n   The length field contains the number of octets of the remainder of\n
      \  the message (i.e., number of octets of \"value\" plus one).  All 32-bit\n
      \  values in this protocol are specified to be in network byte order.\n   Message
      name   flag     value\n   tsaMsg         '00'H    DER-encoded TSA message\n
      \    -- TSA message\n   pollRep        '01'H    polling reference (32 bits),\n
      \                          time-to-check-back (32 bits)\n     -- poll response
      where no TSA message response ready; use polling\n     -- reference value (and
      estimated time value) for later polling\n   pollReq        '02'H    polling
      reference (32 bits)\n     -- request for a TSA message response to initial message\n
      \  negPollRep     '03'H    '00'H\n     -- no further polling responses (i.e.,
      transaction complete)\n   partialMsgRep  '04'H    next polling reference (32
      bits),\n                           time-to-check-back (32 bits),\n                           DER-encoded
      TSA message\n     -- partial response (receipt) to initial message plus new
      polling\n     -- reference (and estimated time value) to use to get next part
      of\n     -- response\n   finalMsgRep    '05'H    DER-encoded TSA message\n     --
      final (and possibly sole) response to initial message\n   errorMsgRep    '06'H
      \   human readable error message\n     -- produced when an error is detected
      (e.g., a polling reference\n     -- is received which doesn't exist or is finished
      with)\n   The sequence of messages that can occur is:\n      a) entity sends
      tsaMsg and receives one of pollRep, negPollRep,\n         partialMsgRep, or
      finalMsgRep in response.\n      b) end entity sends pollReq message and receives
      one of\n         negPollRep, partialMsgRep, finalMsgRep, or errorMsgRep in\n
      \        response.\n   The \"time-to-check-back\" parameter is an unsigned 32-bit
      integer. It\n   is the time in seconds indicating the minimum interval after
      which\n   the client SHOULD check the status again.\n   It provides an estimate
      of the time that the end entity should send\n   its next pollReq.\n"
    title: 3.3. Socket Based Protocol
  - contents:
    - "3.4. Time-Stamp Protocol via HTTP\n   This subsection specifies a means for
      conveying ASN.1-encoded\n   messages for the protocol exchanges described in
      Section 2 and\n   Appendix D via the HyperText Transfer Protocol.\n   Two MIME
      objects are specified as follows.\n   Content-Type: application/timestamp-query\n
      \     <<the ASN.1 DER-encoded Time-Stamp Request message>>\n   Content-Type:
      application/timestamp-reply\n      <<the ASN.1 DER-encoded Time-Stamp Response
      message>>\n   These MIME objects can be sent and received using common HTTP\n
      \  processing engines over WWW links and provides a simple browser-\n   server
      transport for Time-Stamp messages.\n   Upon receiving a valid request, the server
      MUST respond with either a\n   valid response with content type application/timestamp-response
      or\n   with an HTTP error.\n"
    title: 3.4. Time-Stamp Protocol via HTTP
  title: 3. Transports
- contents:
  - "4. Security Considerations\n   This entire document concerns security considerations.
    \ When\n   designing a TSA service, the following considerations have been\n   identified
    that have an impact upon the validity or \"trust\" in the\n   time-stamp token.\n
    \  1. When a TSA shall not be used anymore, but the TSA private key has\n      not
    been compromised, the authority's certificate SHALL be\n      revoked.  When the
    reasonCode extension relative to the revoked\n      certificate from the TSA is
    present in the CRL entry extensions,\n      it SHALL be set either to unspecified
    (0), affiliationChanged (3),\n      superseded (4) or cessationOfOperation (5).
    \ In that case, at any\n      future time, the tokens signed with the corresponding
    key will be\n      considered as invalid, but tokens generated before the revocation\n
    \     time will remain valid.  When the reasonCode extension relative to\n      the
    revoked certificate from the TSA is not present in the CRL\n      entry extensions,
    then all the tokens that have been signed with\n      the corresponding key SHALL
    be considered as invalid.  For that\n      reason, it is recommended to use the
    reasonCode extension.\n   2. When the TSA private key has been compromised, then
    the\n      corresponding certificate SHALL be revoked.  In that case, the\n      reasonCode
    extension relative to the revoked certificate from the\n      TSA may or may not
    be present in the CRL entry extensions.  When\n      it is present then it SHALL
    be set to keyCompromise (1).  Any\n      token signed by the TSA using that private
    key cannot be trusted\n      anymore.  For this reason, it is imperative that
    the TSA's private\n      key be guarded with proper security and controls in order
    to\n      minimize the possibility of compromise.  In case the private key\n      does
    become compromised, an audit trail of all tokens generated by\n      the TSA MAY
    provide a means to discriminate between genuine and\n      false backdated tokens.
    \ Two time-stamp tokens from two different\n      TSAs is another way to address
    this issue.\n   3. The TSA signing key MUST be of a sufficient length to allow
    for a\n      sufficiently long lifetime.  Even if this is done, the key will\n
    \     have a finite lifetime.  Thus, any token signed by the TSA SHOULD\n      be
    time-stamped again (if authentic copies of old CRLs are\n      available) or notarized
    (if they aren't) at a later date to renew\n      the trust that exists in the
    TSA's signature. time-stamp tokens\n      could also be kept with an Evidence
    Recording Authority to\n      maintain this trust.\n   4. A client application
    using only a nonce and no local clock SHOULD\n      be concerned about the amount
    of time it is willing to wait for a\n      response.  A `man-in-the-middle' attack
    can introduce delays.\n      Thus, any TimeStampResp that takes more than an acceptable
    period\n      of time SHOULD be considered suspect.  Since each transport method\n
    \     specified in this document has different delay characteristics,\n      the
    period of time that is considered acceptable will depend upon\n      the particular
    transport method used, as well as other environment\n      factors.\n   5. If
    different entities obtain time-stamp tokens on the same data\n      object using
    the same hash algorithm, or a single entity obtains\n      multiple time-stamp
    tokens on the same object, the generated\n      time-stamp tokens will include
    identical message imprints; as a\n      result, an observer with access to those
    time-stamp tokens could\n      infer that the time-stamps may refer to the same
    underlying data.\n   6. Inadvertent or deliberate replays for requests incorporating
    the\n      same hash algorithm and value may happen.  Inadvertent replays\n      occur
    when more than one copy of the same request message gets\n      sent to the TSA
    because of problems in the intervening network\n      elements.  Deliberate replays
    occur when a middleman is replaying\n      legitimate TS responses.  In order
    to detect these situations,\n      several techniques may be used.  Using a nonce
    always allows to\n      detect replays, and hence its use is RECOMMENDED.  Another\n
    \     possibility is to use both a local clock and a moving time window\n      during
    which the requester remembers all the hashes sent during\n      that time window.
    \ When receiving a response, the requester\n      ensures both that the time of
    the response is within the time\n      window and that there is only one occurrence
    of the hash value in\n      that time window.  If the same hash value is present
    more than\n      once within a time window, the requester may either use a nonce,\n
    \     or wait until the time window has moved to come back to the case\n      where
    the same hash value appears only once during that time\n      window.\n"
  title: 4. Security Considerations
- contents:
  - "5. Intellectual Property Rights\n   The IETF takes no position regarding the
    validity or scope of any\n   intellectual property or other rights that might
    be claimed to per-\n   tain to the implementation or use of the technology described
    in this\n   document or the extent to which any license under such rights might\n
    \  or might not be available; neither does it represent that it has made\n   any
    effort to identify any such rights.  Information on the IETF's\n   procedures
    with respect to rights in standards-track and standards-\n   related documentation
    can be found in BCP-11.  Copies of claims of\n   rights made available for publication
    and any assurances of licenses\n   to be made available, or the result of an attempt
    made to obtain a\n   general license or permission for the use of such proprietary
    rights\n   by implementors or users of this specification can be obtained from\n
    \  the IETF Secretariat.\n   The IETF invites any interested party to bring to
    its attention any\n   copyrights, patents or patent applications, or other proprietary\n
    \  rights which may cover technology that may be required to practice\n   this
    standard.  Please address the information to the IETF Executive\n   Director.\n
    \  The following eight (8) United States Patents related to time\n   stamping,
    listed in chronological order, are known by the authors to\n   exist at this time.
    \ This may not be an exhaustive list.  Other\n   patents MAY exist or be issued
    at any time.  This list is provided\n   for informational purposes; to date, the
    IETF has not been notified\n   of intellectual property rights claimed in regard
    to any of the\n   specification contained in this document.  Should this situation\n
    \  change, the current status may be found at the online list of claimed\n   rights
    (IETF Page of Intellectual Property Rights Notices).\n   Implementers of this
    protocol SHOULD perform their own patent search\n   and determine whether or not
    any encumbrances exist on their\n   implementation.\n   Users of this protocol
    SHOULD perform their own patent search and\n   determine whether or not any encumbrances
    exist on the use of this\n   standard.\n"
  - '# 5,001,752 Public/Key Date-Time Notary Facility

    '
  - 'Filing date: October 13, 1989

    '
  - 'Issued: March 19, 1991

    '
  - 'Inventor: Addison M. Fischer

    '
  - '# 5,022,080 Electronic Notary

    '
  - 'Filing date: April 16, 1989

    '
  - 'Issued: June 4, 1991

    '
  - 'Inventors: Robert T. Durst, Kevin D. Hunter

    '
  - '# 5,136,643 Public/Key Date-Time Notary Facility

    '
  - 'Filing date: December 20, 1990

    '
  - 'Issued: August 4, 1992

    '
  - 'Inventor:  Addison M. Fischer

    '
  - 'Note: This is a continuation of patent # 5,001,752.)

    '
  - '# 5,136,646 Digital Document Time-Stamping with Catenate Certificate

    '
  - 'Filing date: August 2, 1990

    '
  - 'Issued: August 4, 1992

    '
  - 'Inventors: Stuart A. Haber, Wakefield S. Stornetta Jr.

    '
  - '(assignee) Bell Communications Research, Inc.,

    '
  - '# 5,136,647 Method for Secure Time-Stamping of Digital Documents

    '
  - 'Filing date: August 2, 1990

    '
  - 'Issued: August 4, 1992

    '
  - 'Inventors: Stuart A. Haber, Wakefield S. Stornetta Jr.

    '
  - '(assignee) Bell Communications Research, Inc.,

    '
  - '# 5,373,561 Method of Extending the Validity of a Cryptographic

    '
  - 'Certificate

    '
  - 'Filing date: December 21, 1992

    '
  - 'Issued: December 13, 1994

    '
  - 'Inventors: Stuart A. Haber, Wakefield S. Stornetta Jr.

    '
  - '(assignee) Bell Communications Research, Inc.,

    '
  - '# 5,422,953  Personal Date/Time Notary Device

    '
  - 'Filing date: May 5, 1993

    '
  - 'Issued: June 6, 1995

    '
  - 'Inventor: Addison M. Fischer

    '
  - '# 5,781,629 Digital Document Authentication System

    '
  - 'Filing date: February 21, 1997

    '
  - 'Issued: July 14, 1998

    '
  - 'Inventor: Stuart A. Haber, Wakefield S. Stornetta Jr.

    '
  - '(assignee) Surety Technologies, Inc.,

    '
  title: 5. Intellectual Property Rights
- contents:
  - "6. References\n   [RFC2119]   Bradner, S., \"Key words for use in RFCs to Indicate\n
    \              Requirement Levels\", BCP 14, RFC 2119, March 1997.\n   [RFC2246]
    \  Dierks, T. and C. Allen, \"The TLS Protocol, Version 1.0\",\n               RFC
    2246, January 1999.\n   [RFC2510]   Adams, C. and S. Farrell, \"Internet X.509
    Public Key\n               Infrastructure, Certificate Management Protocols\",
    RFC\n               2510, March 1999.\n   [RFC2459]   Housley, R., Ford, W., Polk,
    W. and D. Solo, \"Internet\n               X.509 Public Key Infrastructure, Certificate
    and CRL\n               Profile\", RFC 2459, January 1999.\n   [CMS]       Housley,
    R., \"Cryptographic Message Syntax\", RFC 2630,\n               June 1999.\n   [DSS]
    \      Digital Signature Standard. FIPS Pub 186. National\n               Institute
    of Standards and Technology. 19 May 1994.\n   [ESS]       Hoffman, P., \"Enhanced
    Security Services for S/MIME\", RFC\n               2634, June 1999.\n   [ISONR]
    \    ISO/IEC 10181-5:  Security Frameworks in Open Systems.\n               Non-Repudiation
    Framework. April 1997.\n   [MD5]       Rivest, R., \"The MD5 Message-Digest Algorithm\",
    RFC 1321,\n               April 1992.\n   [SHA1]      Secure Hash Standard. FIPS
    Pub 180-1. National Institute\n               of Standards and Technology. 17
    April 1995.\n"
  title: 6. References
- contents:
  - "7. Authors' Addresses\n   Carlisle Adams\n   Entrust, Inc.\n   1000 Innovation
    Drive\n   Ottawa, Ontario\n   K2K 3E7\n   CANADA\n   EMail: cadams@entrust.com\n
    \  Pat Cain\n   BBN\n   70 Fawcett Street\n   Cambridge, MA 02138\n   U.S.A.\n
    \  EMail: pcain@bbn.com\n   Denis Pinkas\n   Integris\n   68 route de Versailles\n
    \  B.P. 434\n   78430 Louveciennes\n   FRANCE\n   EMail: Denis.Pinkas@bull.net\n
    \  Robert Zuccherato\n   Entrust, Inc.\n   1000 Innovation Drive\n   Ottawa, Ontario\n
    \  K2K 3E7\n   CANADA\n   EMail: robert.zuccherato@entrust.com\n"
  title: 7. Authors' Addresses
- contents:
  - "APPENDIX A - Signature Time-stamp attribute using CMS\n   One of the major uses
    of time-stamping is to time-stamp a digital\n   signature to prove that the digital
    signature was created before a\n   given time.  Should the corresponding public
    key certificate be\n   revoked this allows a verifier to know whether the signature
    was\n   created before or after the revocation date.\n   A sensible place to store
    a time-stamp is in a [CMS] structure as an\n   unsigned attribute.\n   This appendix
    defines a Signature Time-stamp attribute that may be\n   used to time-stamp a
    digital signature.\n   The following object identifier identifies the Signature
    Time-stamp\n   attribute:\n   id-aa-timeStampToken OBJECT IDENTIFIER ::= { iso(1)
    member-body(2)\n   us(840) rsadsi(113549) pkcs(1) pkcs-9(9) smime(16) aa(2) 14
    }\n   The Signature time-stamp attribute value has ASN.1 type\n   SignatureTimeStampToken:\n
    \  SignatureTimeStampToken ::= TimeStampToken\n   The value of messageImprint
    field within TimeStampToken shall be a\n   hash of the value of signature field
    within SignerInfo for the\n   signedData being time-stamped.\n"
  title: APPENDIX A - Signature Time-stamp attribute using CMS
- contents:
  - "APPENDIX B - Placing a Signature At a Particular Point in Time\n   We present
    an example of a possible use of this general time-stamping\n   service.  It places
    a signature at a particular point in time, from\n   which the appropriate certificate
    status information (e.g., CRLs)\n   MUST be checked.  This application is intended
    to be used in\n   conjunction with evidence generated using a digital signature\n
    \  mechanism.\n   Signatures can only be verified according to a non-repudiation\n
    \  policy. This policy MAY be implicit or explicit (i.e., indicated in\n   the
    evidence provided by the signer).  The non-repudiation policy can\n   specify,
    among other things, the time period allowed by a signer to\n   declare the compromise
    of a signature key used for the generation of\n   digital signatures.  Thus a
    signature may not be guaranteed to be\n   valid until the termination of this
    time period.\n   To verify a digital signature, the following basic technique
    may be\n   used:\n   A) Time-stamping information needs to be obtained soon after
    the\n      signature has been produced (e.g., within a few minutes or hours).\n
    \     1)    The signature is presented to the Time Stamping Authority\n            (TSA).
    \ The TSA then returns a TimeStampToken (TST) upon\n            that signature.\n
    \     2)    The invoker of the service MUST then verify that the\n            TimeStampToken
    is correct.\n   B) The validity of the digital signature may then be verified
    in the\n      following way:\n      1)    The time-stamp token itself MUST be
    verified and it MUST be\n            verified that it applies to the signature
    of the signer.\n      2)    The date/time indicated by the TSA in the TimeStampToken\n
    \           MUST be retrieved.\n      3)    The certificate used by the signer
    MUST be identified and\n            retrieved.\n      4)    The date/time indicated
    by the TSA MUST be within the\n            validity period of the signer's certificate.\n
    \     5)    The revocation information about that certificate, at the\n            date/time
    of the Time-Stamping operation, MUST be retrieved.\n      6)    Should the certificate
    be revoked, then the date/time of\n            revocation shall be later than
    the date/time indicated by\n            the TSA.\n   If all these conditions are
    successful, then the digital signature\n   shall be declared as valid.\n"
  title: APPENDIX B - Placing a Signature At a Particular Point in Time
- contents:
  - 'APPENDIX C: ASN.1 Module using 1988 Syntax

    '
  - "PKIXTSP {iso(1) identified-organization(3) dod(6) internet(1)\n   security(5)
    mechanisms(5) pkix(7) id-mod(0) id-mod-tsp(13)}\n"
  - 'DEFINITIONS IMPLICIT TAGS ::=

    '
  - 'BEGIN

    '
  - '-- EXPORTS ALL --

    '
  - "IMPORTS\n     Extensions, AlgorithmIdentifier\n     FROM PKIX1Explicit88 {iso(1)
    identified-organization(3)\n     dod(6) internet(1) security(5) mechanisms(5)
    pkix(7)\n     id-mod(0) id-pkix1-explicit-88(1)}\n     GeneralName FROM PKIX1Implicit88
    {iso(1)\n     identified-organization(3) dod(6) internet(1) security(5)\n     mechanisms(5)
    pkix(7) id-mod(0) id-pkix1-implicit-88(2)}\n     ContentInfo FROM CryptographicMessageSyntax
    {iso(1)\n     member-body(2) us(840) rsadsi(113549) pkcs(1) pkcs-9(9)\n     smime(16)
    modules(0) cms(1)}\n     PKIFreeText FROM PKIXCMP {iso(1) identified-organization(3)\n
    \    dod(6) internet(1) security(5) mechanisms(5) pkix(7) id-mod(0)\n     id-mod-cmp(9)}
    ;\n                     --  Locally defined OIDs  --\n"
  - '-- eContentType for a time-stamp token

    '
  - 'id-ct-TSTInfo  OBJECT IDENTIFIER ::= { iso(1) member-body(2)

    '
  - 'us(840) rsadsi(113549) pkcs(1) pkcs-9(9) smime(16) ct(1) 4}

    '
  - '-- 2.4.1

    '
  - "TimeStampReq ::= SEQUENCE  {\n   version                  INTEGER  { v1(1) },\n
    \  messageImprint           MessageImprint,\n     --a hash algorithm OID and the
    hash value of the data to be\n     --time-stamped\n   reqPolicy                TSAPolicyId
    \               OPTIONAL,\n   nonce                    INTEGER                    OPTIONAL,\n
    \  certReq                  BOOLEAN                    DEFAULT FALSE,\n   extensions
    \              [0] IMPLICIT Extensions    OPTIONAL  }\n"
  - "MessageImprint ::= SEQUENCE  {\n     hashAlgorithm                AlgorithmIdentifier,\n
    \    hashedMessage                OCTET STRING  }\n"
  - 'TSAPolicyId ::= OBJECT IDENTIFIER

    '
  - '-- 2.4.2

    '
  - "TimeStampResp ::= SEQUENCE  {\n     status                  PKIStatusInfo,\n
    \    timeStampToken          TimeStampToken     OPTIONAL  }\n"
  - '-- The status is based on the definition of status

    '
  - '-- in section 3.2.3 of [RFC2510]

    '
  - "PKIStatusInfo ::= SEQUENCE {\n    status        PKIStatus,\n    statusString
    \ PKIFreeText     OPTIONAL,\n    failInfo      PKIFailureInfo  OPTIONAL  }\n"
  - "PKIStatus ::= INTEGER {\n    granted                (0),\n    -- when the PKIStatus
    contains the value zero a TimeStampToken, as\n       requested, is present.\n
    \   grantedWithMods        (1),\n     -- when the PKIStatus contains the value
    one a TimeStampToken,\n       with modifications, is present.\n    rejection              (2),\n
    \   waiting                (3),\n    revocationWarning      (4),\n     -- this
    message contains a warning that a revocation is\n     -- imminent\n    revocationNotification
    (5)\n     -- notification that a revocation has occurred   }\n    -- When the
    TimeStampToken is not present\n    -- failInfo indicates the reason why the\n
    \   -- time-stamp request was rejected and\n    -- may be one of the following
    values.\n"
  - "PKIFailureInfo ::= BIT STRING {\n    badAlg               (0),\n      -- unrecognized
    or unsupported Algorithm Identifier\n    badRequest           (2),\n      -- transaction
    not permitted or supported\n    badDataFormat        (5),\n      -- the data submitted
    has the wrong format\n    timeNotAvailable    (14),\n      -- the TSA's time source
    is not available\n    unacceptedPolicy    (15),\n      -- the requested TSA policy
    is not supported by the TSA.\n    unacceptedExtension (16),\n      -- the requested
    extension is not supported by the TSA.\n    addInfoNotAvailable (17)\n      --
    the additional information requested could not be understood\n      -- or is not
    available\n    systemFailure       (25)\n      -- the request cannot be handled
    due to system failure  }\n"
  - "TimeStampToken ::= ContentInfo\n     -- contentType is id-signedData as defined
    in [CMS]\n     -- content is SignedData as defined in([CMS])\n     -- eContentType
    within SignedData is id-ct-TSTInfo\n     -- eContent within SignedData is TSTInfo\n"
  - "TSTInfo ::= SEQUENCE  {\n    version                      INTEGER  { v1(1) },\n
    \   policy                       TSAPolicyId,\n    messageImprint               MessageImprint,\n
    \     -- MUST have the same value as the similar field in\n      -- TimeStampReq\n
    \   serialNumber                 INTEGER,\n     -- Time-Stamping users MUST be
    ready to accommodate integers\n     -- up to 160 bits.\n    genTime                      GeneralizedTime,\n
    \   accuracy                     Accuracy                 OPTIONAL,\n    ordering
    \                    BOOLEAN             DEFAULT FALSE,\n    nonce                        INTEGER
    \                 OPTIONAL,\n      -- MUST be present if the similar field was
    present\n      -- in TimeStampReq.  In that case it MUST have the same value.\n
    \   tsa                          [0] GeneralName          OPTIONAL,\n    extensions
    \                  [1] IMPLICIT Extensions  OPTIONAL   }\n"
  - "Accuracy ::= SEQUENCE {\n                seconds        INTEGER           OPTIONAL,\n
    \               millis     [0] INTEGER  (1..999) OPTIONAL,\n                micros
    \    [1] INTEGER  (1..999) OPTIONAL  }\n"
  - 'END

    '
  title: 'APPENDIX C: ASN.1 Module using 1988 Syntax'
- contents:
  - "APPENDIX D: Access descriptors for Time-Stamping.\n   [This annex describes an
    extension based on the SIA extension that\n   will be defined in the \"son-of-RFC2459\".
    \ Since at the time of\n   publication of this document, \"son-of-RFC2459\" is
    not yet available,\n   its description is placed in an informative annex.  The
    contents of\n   this annex will eventually become incorporated into the son-of-\n
    \  RFC2459 document, at which time this annex will no longer be needed.\n   A
    future version of this document will likely omit this annex and\n   refer to son-of-RFC2459
    directly.]\n   A TSA's certificate MAY contain a Subject Information Access (SIA)\n
    \  extension (son of RFC2459) in order to convey the method of\n   contacting
    the TSA.  The accessMethod field in this extension MUST\n   contain the OID id-ad-timestamping:\n
    \  The following object identifier identifies the access descriptors for\n   time-Stamping.\n
    \  id-ad-timeStamping OBJECT IDENTIFIER ::= {iso(1)\n                         identified-organization(3)
    dod(6)\n                         internet(1) security(5) mechanisms(5) pkix(7)\n
    \                        ad (48) timestamping (3)}\n   The value of the accessLocation
    field defines the transport (e.g.,\n   HTTP) used to access the TSA and may contain
    other transport\n   dependent information (e.g., a URL).\n"
  title: 'APPENDIX D: Access descriptors for Time-Stamping.'
- contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2001).  All
    Rights Reserved.\n   This document and translations of it may be copied and furnished
    to\n   others, and derivative works that comment on or otherwise explain it\n
    \  or assist in its implementation may be prepared, copied, published\n   and
    distributed, in whole or in part, without restriction of any\n   kind, provided
    that the above copyright notice and this paragraph are\n   included on all such
    copies and derivative works.  However, this\n   document itself may not be modified
    in any way, such as by removing\n   the copyright notice or references to the
    Internet Society or other\n   Internet organizations, except as needed for the
    purpose of\n   developing Internet standards in which case the procedures for\n
    \  copyrights defined in the Internet Standards process must be\n   followed,
    or as required to translate it into languages other than\n   English.\n   The
    limited permissions granted above are perpetual and will not be\n   revoked by
    the Internet Society or its successors or assigns.\n   This document and the information
    contained herein is provided on an\n   \"AS IS\" basis and THE INTERNET SOCIETY
    AND THE INTERNET ENGINEERING\n   TASK FORCE DISCLAIMS ALL WARRANTIES, EXPRESS
    OR IMPLIED, INCLUDING\n   BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF THE
    INFORMATION\n   HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED WARRANTIES
    OF\n   MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.\n"
  title: Full Copyright Statement
- contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided
    by the\n   Internet Society.\n"
  title: Acknowledgement
