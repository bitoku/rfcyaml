- title: __initial_text__
  contents:
  - "                 Agent Extensibility (AgentX) Protocol\n                    \
    \           Version 1\n"
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (1998).  All Rights Reserved.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n       6.1.1 Context..................................................19\n\
    \     6.2 AgentX PDUs..................................................20\n  \
    \     6.2.1 The agentx-Open-PDU......................................20\n    \
    \   6.2.2 The agentx-Close-PDU.....................................21\n      \
    \ 6.2.3 The agentx-Register-PDU..................................22\n       6.2.4\
    \ The agentx-Unregister-PDU................................25\n       6.2.5 The\
    \ agentx-Get-PDU.......................................27\n       6.2.6 The agentx-GetNext-PDU...................................29\n\
    \       6.2.7 The agentx-GetBulk-PDU...................................30\n  \
    \     6.2.8 The agentx-TestSet-PDU...................................31\n    \
    \   6.2.9 The agentx-CommitSet, -UndoSet, -CleanupSet\n             PDUs.....................................................33\n\
    \       6.2.10 The agentx-Notify-PDU...................................33\n  \
    \     6.2.11 The agentx-Ping-PDU.....................................34\n    \
    \   6.2.12 The agentx-IndexAllocate-PDU............................35\n      \
    \ 6.2.13 The agentx-IndexDeallocate-PDU..........................36\n       6.2.14\
    \ The agentx-AddAgentCaps-PDU.............................37\n       6.2.15 The\
    \ agentx-RemoveAgentCaps-PDU..........................38\n       6.2.16 The agentx-Response-PDU.................................39\n\
    \   7 Elements of Procedure............................................41\n  \
    \   7.1 Processing AgentX Administrative Messages....................42\n    \
    \   7.1.1 Processing the agentx-Open-PDU...........................42\n      \
    \ 7.1.2 Processing the agentx-IndexAllocate-PDU..................43\n       7.1.3\
    \ Using the agentx-IndexAllocate-PDU.......................45\n       7.1.4 Processing\
    \ the agentx-IndexDeallocate-PDU................47\n       7.1.5 Processing the\
    \ agentx-Register-PDU.......................48\n         7.1.5.1 Handling Duplicate\
    \ OID Ranges........................50\n       7.1.6 Processing the agentx-Unregister-PDU.....................51\n\
    \       7.1.7 Processing the agentx-AddAgentCaps-PDU...................51\n  \
    \     7.1.8 Processing the agentx-RemoveAgentCaps-PDU................52\n    \
    \   7.1.9 Processing the agentx-Close-PDU..........................52\n      \
    \ 7.1.10 Detecting Connection Loss...............................53\n       7.1.11\
    \ Processing the agentx-Notify-PDU........................53\n       7.1.12 Processing\
    \ the agentx-Ping-PDU..........................54\n     7.2 Processing Received\
    \ SNMP Protocol Messages...................54\n       7.2.1 Dispatching AgentX\
    \ PDUs..................................55\n         7.2.1.1 agentx-Get-PDU.......................................57\n\
    \         7.2.1.2 agentx-GetNext-PDU...................................58\n  \
    \       7.2.1.3 agentx-GetBulk-PDU...................................59\n    \
    \     7.2.1.4 agentx-TestSet-PDU...................................60\n      \
    \   7.2.1.5 Dispatch.............................................60\n       7.2.2\
    \ Subagent Processing of agentx-Get, GetNext,\n             GetBulk-PDUs.............................................61\n\
    \         7.2.2.1 Subagent Processing of the agentx-Get-PDU............61\n  \
    \       7.2.2.2 Subagent Processing of the\n                 agentx-GetNext-PDU...................................62\n\
    \         7.2.2.3 Subagent Processing of the\n                 agentx-GetBulk-PDU...................................62\n\
    \       7.2.3 Subagent Processing of agentx-TestSet,\n             -CommitSet,\
    \ -UndoSet, -CleanupSet-PDUs...................63\n         7.2.3.1 Subagent Processing\
    \ of the\n                 agentx-TestSet-PDU...................................64\n\
    \         7.2.3.2 Subagent Processing of the\n                 agentx-CommitSet-PDU.................................65\n\
    \         7.2.3.3 Subagent Processing of the\n                 agentx-UndoSet-PDU...................................65\n\
    \         7.2.3.4 Subagent Processing of the\n                 agentx-CleanupSet-PDU................................65\n\
    \       7.2.4 Master Agent Processing of AgentX Responses..............66\n  \
    \       7.2.4.1 Common Processing of All AgentX Response\n                 PDUs.................................................66\n\
    \         7.2.4.2 Processing of Responses to agentx-Get-PDUs...........66\n  \
    \       7.2.4.3 Processing of Responses to\n                 agentx-GetNext-PDU\
    \ and agentx-GetBulk-PDU............67\n         7.2.4.4 Processing of Responses\
    \ to\n                 agentx-TestSet-PDUs..................................68\n\
    \         7.2.4.5 Processing of Responses to\n                 agentx-CommitSet-PDUs................................68\n\
    \         7.2.4.6 Processing of Responses to\n                 agentx-UndoSet-PDUs..................................69\n\
    \       7.2.5 Sending the SNMP Response-PDU............................69\n  \
    \     7.2.6 MIB Views................................................69\n    \
    \ 7.3 State Transitions............................................70\n      \
    \ 7.3.1 Set Transaction States...................................70\n       7.3.2\
    \ Transport Connection States..............................71\n       7.3.3 Session\
    \ States...........................................73\n   8 Transport Mappings...............................................74\n\
    \     8.1 AgentX over TCP..............................................74\n  \
    \     8.1.1 Well-known Values........................................74\n    \
    \   8.1.2 Operation................................................74\n     8.2\
    \ AgentX over UNIX-domain Sockets..............................75\n       8.2.1\
    \ Well-known Values........................................75\n       8.2.2 Operation................................................75\n\
    \   9 Security Considerations..........................................76\n  \
    \ 10 Acknowledgements................................................77\n   11\
    \ Authors' and Editor's Addresses.................................77\n   12 References......................................................78\n\
    \   13 Full Copyright Statement........................................80\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   This memo defines a standardized framework for extensible\
    \ SNMP\n   agents.  It defines processing entities called master agents and\n\
    \   subagents, a protocol (AgentX) used to communicate between them, and\n   the\
    \ elements of procedure by which the extensible agent processes\n   SNMP protocol\
    \ messages.\n"
- title: 2.  The SNMP Framework
  contents:
  - "2.  The SNMP Framework\n   A management system contains:  several (potentially\
    \ many) nodes, each\n   with a processing entity, termed an agent, which has access\
    \ to\n   management instrumentation; at least one management station; and, a\n\
    \   management protocol, used to convey management information between\n   the\
    \ agents and management stations.  Operations of the protocol are\n   carried\
    \ out under an administrative framework which defines\n   authentication, authorization,\
    \ access control, and privacy policies.\n   Management stations execute management\
    \ applications which monitor and\n   control managed elements.  Managed elements\
    \ are devices such as\n   hosts, routers, terminal servers, etc., which are monitored\
    \ and\n   controlled via access to their management information.\n   Management\
    \ information is viewed as a collection of managed objects,\n   residing in a\
    \ virtual information store, termed the Management\n   Information Base (MIB).\
    \  Collections of related objects are defined\n   in MIB modules.  These modules\
    \ are written using a subset of OSI's\n   Abstract Syntax Notation One (ASN.1)\
    \ [1], termed the Structure of\n   Management Information (SMI) (see RFC 1902\
    \ [2]).\n"
- title: 2.1.  A Note on Terminology
  contents:
  - "2.1.  A Note on Terminology\n   The term \"variable\" refers to an instance of\
    \ a non-aggregate object\n   type defined according to the conventions set forth\
    \ in the SMI (RFC\n   1902, [2]) or the textual conventions based on the SMI (RFC\
    \ 1903\n   [3]).  The term \"variable binding\" normally refers to the pairing\
    \ of\n   the name of a variable and its associated value.  However, if certain\n\
    \   kinds of exceptional conditions occur during processing of a\n   retrieval\
    \ request, a variable binding will pair a name and an\n   indication of that exception.\n\
    \   A variable-binding list is a simple list of variable bindings.\n   The name\
    \ of a variable is an OBJECT IDENTIFIER, which is the\n   concatenation of the\
    \ OBJECT IDENTIFIER of the corresponding object\n   type together with an OBJECT\
    \ IDENTIFIER fragment identifying the\n   instance.  The OBJECT IDENTIFIER of\
    \ the corresponding object-type is\n   called the OBJECT IDENTIFIER prefix of\
    \ the variable.  For the purpose\n   of exposition, the original Internet-standard\n\
    \   Network Management Framework, as described in RFCs 1155 (STD 16),\n   1157\
    \ (STD 15), and 1212 (STD 16), is termed the SNMP version 1\n   framework (SNMPv1).\
    \  The current framework, as described in RFCs\n   1902-1908, is termed the SNMP\
    \ version 2 framework (SNMPv2).\n"
- title: 3.  Extending the MIB
  contents:
  - "3.  Extending the MIB\n   New MIB modules that extend the Internet-standard MIB\
    \ are\n   continuously being defined by various IETF working groups.  It is\n\
    \   also common for enterprises or individuals to create or extend\n   enterprise-specific\
    \ or experimental MIBs.\n   As a result, managed devices are frequently complex\
    \ collections of\n   manageable components that have been independently installed\
    \ on a\n   managed node.  Each component provides instrumentation for the\n  \
    \ managed objects defined in the MIB module(s) it implements.\n   Neither the\
    \ SNMP version 1 nor version 2 framework describes how the\n   set of managed\
    \ objects supported by a particular agent may be changed\n   dynamically.\n"
- title: 3.1.  Motivation for AgentX
  contents:
  - "3.1.  Motivation for AgentX\n   This very real need to dynamically extend the\
    \ management objects\n   within a node has given rise to a variety of \"extensible\
    \ agents\",\n   which typically comprise\n      - a \"master\" agent that is available\
    \ on the standard transport\n        address and that accepts SNMP protocol messages\n\
    \      - a set of \"subagents\" that each contain management\n        instrumentation\n\
    \      - a protocol that operates between the master agent and subagents,\n  \
    \      permitting subagents to \"connect\" to the master agent, and the\n    \
    \    master agent to multiplex received SNMP protocol messages\n        amongst\
    \ the subagents.\n      - a set of tools to aid subagent development, and a runtime\
    \ (API)\n        environment that hides much of the protocol operation between\
    \ a\n        subagent and the master agent.\n   The wide deployment of extensible\
    \ SNMP agents, coupled with the lack\n   of Internet standards in this area, makes\
    \ it difficult to field\n   SNMP-manageable applications.  A vendor may have to\
    \ support several\n   different subagent environments (APIs) in order to support\
    \ different\n   target platforms.\n   It can also become quite cumbersome to configure\
    \ subagents and\n   (possibly multiple) master agents on a particular managed\
    \ node.\n   Specifying a standard protocol for agent extensibility (AgentX)\n\
    \   provides the technical foundation required to solve both of these\n   problems.\
    \  Independently developed AgentX-capable master agents and\n   subagents will\
    \ be able to interoperate at the protocol level.\n   Vendors can continue to differentiate\
    \ their products in all other\n   respects.\n"
- title: 4.  AgentX Framework
  contents:
  - "4.  AgentX Framework\n   Within the SNMP framework, a managed node contains a\
    \ processing\n   entity, called an agent, which has access to management information.\n\
    \   Within the AgentX framework, an agent is further defined to consist\n   of\n\
    \      - a single processing entity called the master agent, which sends\n   \
    \     and receives SNMP protocol messages in an agent role (as\n        specified\
    \ by the SNMP version 1 and version 2 framework\n        documents) but typically\
    \ has little or no direct access to\n        management information.\n      -\
    \ 0 or more processing entities called subagents, which are\n        \"shielded\"\
    \ from the SNMP protocol messages processed by the\n        master agent, but\
    \ which have access to management information.\n   The master and subagent entities\
    \ communicate via AgentX protocol\n   messages, as specified in this memo.  Other\
    \ interfaces (if any) on\n   these entities, and their associated protocols, are\
    \ outside the scope\n   of this document.  While some of the AgentX protocol messages\
    \ appear\n   similar in syntax and semantics to the SNMP, bear in mind that AgentX\n\
    \   is not SNMP.\n   The internal operations of AgentX are invisible to an SNMP\
    \ entity\n   operating in a manager role.  From a manager's point of view, an\n\
    \   extensible agent behaves exactly as would a non-extensible\n   (monolithic)\
    \ agent that has access to the same management\n   instrumentation.\n   This transparency\
    \ to managers is a fundamental requirement of AgentX,\n   and is what differentiates\
    \ AgentX subagents from SNMP proxy agents.\n"
- title: 4.1.  AgentX Roles
  contents:
  - "4.1.  AgentX Roles\n   An entity acting in a master agent role performs the following\n\
    \   functions:\n      - Accepts AgentX session establishment requests from subagents.\n\
    \      - Accepts registration of MIB regions by subagents.\n      - Sends and\
    \ accepts SNMP protocol messages on the agent's\n        specified transport addresses.\n\
    \      - Implements the agent role Elements of Procedure specified\n        for\
    \ the administrative framework applicable to the SNMP protocol\n        message,\
    \ except where they specify performing management\n        operations.  (The application\
    \ of MIB views, and the access\n        control policy for the managed node, are\
    \ implemented by the\n        master agent.)\n      - Provides instrumentation\
    \ for the MIB objects defined in RFC\n        1907 [5], and for any MIB objects\
    \ relevant to any administrative\n        framework it supports.\n      - Sends\
    \ and receives AgentX protocol messages to access\n        management information,\
    \ based on the current registry of MIB\n        regions.\n      - Forwards notifications\
    \ on behalf of subagents.\n   An entity acting in a subagent role performs the\
    \ following functions:\n      - Initiates an AgentX session with the master agent.\n\
    \      - Registers MIB regions with the master agent.\n      - Instantiates managed\
    \ objects.\n      - Binds OIDs within its registered MIB regions to actual\n \
    \       variables.\n      - Performs management operations on variables.\n   \
    \   - Initiates notifications.\n"
- title: 4.2  Applicability
  contents:
  - "4.2  Applicability\n   It is intended that this memo specify the smallest amount\
    \ of required\n   behavior necessary to achieve the largest benefit, that is,\
    \ to cover\n   a very large number of possible MIB implementations and\n   configurations\
    \ with minimum complexity and low \"cost of entry\".\n   This section discusses\
    \ several typical usage scenarios.\n   1) Subagents implement separate MIB modules--for\
    \ example,\n      subagent A implements \"mib-2\", subagent b implements \"host-\n\
    \      resources\".\n      It is anticipated that this will be the most common\
    \ subagent\n      configuration.\n   2) Subagents implement rows in a \"simple\
    \ table\".  A simple table\n      is one in which row creation is not specified,\
    \ and for which the\n      MIB does not define an object that counts entries in\
    \ the table.\n      Examples of simple tables are rdbmsDbTable, udpTable, and\n\
    \      hrSWRunTable.\n      This is the most commonly defined type of MIB table,\
    \ and probably\n      represents the next most typical configuration that AgentX\
    \ would\n      support.\n   3) Subagents share MIBs along non-row partitions.\
    \  Subagents\n      register \"chunks\" of the MIB that represent multiple rows,\
    \ due to\n      the nature of the MIB's index structure.  Examples include\n \
    \     registering ipNetToMediaEntry.n, where n represents the ifIndex\n      value\
    \ for an interface implemented by the subagent, and\n      tcpConnEntry.a.b.c.d,\
    \ where a.b.c.d represents an IP address on an\n      interface implemented by\
    \ the subagent.\n   AgentX supports these three common configurations, and all\n\
    \   permutations of them, completely.  The consensus is that they\n   comprise\
    \ a very large majority of current and likely future uses of\n   multi-vendor\
    \ extensible agent configurations.\n   4) Subagents implement rows in \"complex\
    \ tables\".  Complex tables\n      here are defined as tables permitting row creation,\
    \ or whose MIB\n      also defines an object that counts entries in the table.\
    \  Examples\n      include the MIB-2 ifTable (due to ifNumber), and the RMON\n\
    \      historyControlTable.\n   The subagent that implements such a counter object\
    \ (like ifNumber)\n   must go beyond AgentX to correctly implement it.  This is\
    \ an\n   implementation issue (and most new MIB designs no longer include such\n\
    \   objects).\n   To implement row creation in such tables, at least one AgentX\n\
    \   subagent must register at a point \"higher\" in the OID tree than an\n   individual\
    \ row (per AgentX's dispatching procedure).  Again, this is\n   an implementation\
    \ issue.\n   Scenarios in this category were thought to occur somewhat rarely\
    \ in\n   configurations where subagents are independently implemented by\n   different\
    \ vendors.  The focus of a standard protocol, however, must\n   be in just those\
    \ areas where multi- vendor interoperability must be\n   assured.\n   Note that\
    \ it would be inefficient (due to AgentX registration\n   overhead) to share a\
    \ table among AgentX subagents if the table\n   contains very dynamic instances,\
    \ and each subagent registers fully\n   qualified instances.  ipRouteTable could\
    \ be an example of such a\n   table in some environments.\n"
- title: 4.3.  Design Features of AgentX
  contents:
  - "4.3.  Design Features of AgentX\n   The primary features of the design described\
    \ in this memo are:\n   1) A general architectural division of labor between master\
    \ agent\n      and subagent: The master agent is MIB ignorant and SNMP\n     \
    \ omniscient, while the subagent is SNMP ignorant and MIB omniscient\n      (for\
    \ the MIB variables it instantiates).  That is, master agents,\n      exclusively,\
    \ are concerned with SNMP protocol operations and the\n      translations to and\
    \ from AgentX protocol operations needed to\n      carry them out; subagents are\
    \ exclusively concerned with\n      management instrumentation; and neither should\
    \ intrude on the\n      other's territory.\n   2) A standard protocol and \"rules\
    \ of engagement\" to enable\n      interoperability between management instrumentation\
    \ and extensible\n      agents.\n   3) Mechanisms for independently developed\
    \ subagents to\n      integrate into the extensible agent on a particular managed\
    \ node\n      in such a way that they need not be aware of any other existing\n\
    \      subagents.\n   4) A simple, deterministic registry and dispatching algorithm.\n\
    \      For a given extensible agent configuration, there is a single\n      subagent\
    \ who is \"authoritative\" for any particular region of the\n      MIB (where\
    \ \"region\" may extend from an entire MIB down to a single\n      object-instance).\n\
    \   5) Performance considerations.  It is likely that the master\n      agent\
    \ and all subagents will reside on the same host, and in such\n      cases AgentX\
    \ is more a form of inter-process communication than a\n      traditional communications\
    \ protocol.\n      Some of the design decisions made with this in mind include:\n\
    \         - 32-bit alignment of data within PDUs\n         - Native byte-order\
    \ encoding by subagents\n         - Large AgentX PDU payload sizes.\n"
- title: 4.4  Non-Goals
  contents:
  - "4.4  Non-Goals\n   1) Subagent-to-subagent communication.  This is out of scope,\n\
    \      due to the security ramifications and complexity involved.\n   2) Subagent\
    \ access (via the master agent) to MIB variables.\n      This is not addressed,\
    \ since various other mechanisms are\n      available and it was not a fundamental\
    \ requirement.\n   3) The ability to accommodate every conceivable extensible\n\
    \      agent configuration option. This was the most contentious aspect\n    \
    \  in the development of this protocol.  In essence, certain features\n      currently\
    \ available in some commercial extensible agent products\n      are not included\
    \ in AgentX.  Although useful or even vital in some\n      implementation strategies,\
    \ the rough consensus was that these\n      features were not appropriate for\
    \ an Internet Standard, or not\n      typically required for independently developed\
    \ subagents to\n      coexist.  The set of supported extensible agent configurations\
    \ is\n      described above, in Section 4.2.\n   Some possible future version\
    \ of the AgentX protocol may provide\n   coverage for one or more of these \"\
    non-goals\" or for new goals that\n   might be identified after greater deployment\
    \ experience.\n"
- title: 5.  AgentX Encodings
  contents:
  - "5.  AgentX Encodings\n   AgentX PDUs consist of a common header, followed by\
    \ PDU-specific data\n   of variable length.  Unlike SNMP PDUs, AgentX PDUs are\
    \ not encoded\n   using the BER (as specified in ISO 8824 [1]), but are transmitted\
    \ as\n   a contiguous byte stream.  The data within this stream is organized\n\
    \   to provide natural alignment with respect to the start of the PDU,\n   permitting\
    \ direct (integer) access by the processing entities.\n   The first four fields\
    \ in the header are single-byte values.  A bit\n   (NETWORK_BYTE_ORDER) in the\
    \ third field (h.flags) is used to indicate\n   the byte ordering of all multi-byte\
    \ integer values in the PDU,\n   including those which follow in the header itself.\
    \  This is described\n   in more detail in Section 6.1, \"AgentX PDU Header\"\
    , below.\n   PDUs are depicted in this memo using the following convention (where\n\
    \   byte 1 is the first transmitted byte):\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |  byte 1       |  byte 2       |  byte 3       |  byte 4       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |  byte 5       |  byte 6       |  byte 7       |  byte 8       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   Fields marked \"<reserved>\" are reserved for future use and must be\n   zero-filled.\n"
- title: 5.1.  Object Identifier
  contents:
  - "5.1.  Object Identifier\n   An object identifier is encoded as a 4-byte header,\
    \ followed by a\n   variable number of contiguous 4-byte fields representing sub-\n\
    \   identifiers.  This representation (termed Object Identifier) is as\n   follows:\n\
    \   Object Identifier\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |  n_subid      |  prefix       |  include      |  <reserved>   |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                       sub-identifier #1                       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |  \
    \                     sub-identifier #n_subid                 |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   Object Identifier header fields:\n      n_subid\n         The number (0-128)\
    \ of sub-identifiers in the object identifier.\n         An ordered list of \"\
    n_subid\" 4-byte sub-identifiers follows the\n         4-byte header.\n      prefix\n\
    \         An unsigned value used to reduce the length of object\n         identifier\
    \ encodings.  A non-zero value \"x\" is interpreted as\n         the first sub-identifier\
    \ after \"internet\" (1.3.6.1), and\n         indicates an implicit prefix \"\
    internet.x\" to the actual sub-\n         identifiers encoded in the Object Identifier.\
    \  For example, a\n         prefix field value 2 indicates an implicit prefix\
    \ \"1.3.6.1.2\".\n         A value of 0 in the prefix field indicates there is\
    \ no prefix\n         to the sub-identifiers.\n      include\n         Used only\
    \ when the Object Identifier is the start of a\n         SearchRange, as described\
    \ in section 5.2.\n   A null Object Identifier consists of the 4-byte header with\
    \ all bytes\n   set to 0.\n   Examples:\n   sysDescr.0 (1.3.6.1.2.1.1.1.0)\n \
    \  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   | 4 \
    \            | 2             | 0             | 0             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   | 1                                                             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   | 1                                                             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   | 1                                                             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   | 0                                                             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   1.2.3.4\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   | 4             | 0             | 0             | 0             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   | 1                                                             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   | 2                                                             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   | 3                                                             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   | 4                                                             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"
- title: 5.2.  SearchRange
  contents:
  - "5.2.  SearchRange\n   A SearchRange consists of two Object Identifiers.  In its\n\
    \   communication with a subagent, the master agent uses a SearchRange to\n  \
    \ identify a requested variable binding, and, in GetNext and GetBulk\n   operations,\
    \ to set an upper bound on the names of managed object\n   instances the subagent\
    \ may send in reply.\n   The first Object Identifier in a SearchRange (called\
    \ the starting\n   OID) indicates the beginning of the range.  It is frequently\
    \ (but not\n   necessarily) the name of a requested variable binding.\n   The\
    \ \"include\" field in this OID's header is a boolean value (0 or 1)\n   indicating\
    \ whether or not the starting OID is included in the range.\n   The second object\
    \ identifier indicates the non-inclusive end of the\n   range, and its \"include\"\
    \ field is always 0.\n   Example:  To indicate a search range from 1.3.6.1.2.1.25.2\n\
    \   (inclusive) to 1.3.6.1.2.1.25.2.1 (exclusive), the SearchRange would\n   be\n\
    \   (start)\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   | 3             | 2             | 1             |       0       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   | 1                                                             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   | 25                                                            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   | 2                                                             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   (end)\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   | 4             | 2             | 0             |       0       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   | 1                                                             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   | 25                                                            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   | 2                                                             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   | 1                                                             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   A SearchRangeList is a contiguous list of SearchRanges.\n"
- title: 5.3.  Octet String
  contents:
  - "5.3.  Octet String\n   An octet string is represented by a contiguous series\
    \ of bytes,\n   beginning with a 4-byte integer whose value is the number of octets\n\
    \   in the octet string, followed by the octets themselves.  This\n   representation\
    \ is termed an Octet String.  If the last octet does not\n   end on a 4-byte offset\
    \ from the start of the Octet String, padding\n   bytes are appended to achieve\
    \ alignment of following data.  This\n   padding must be added even if the Octet\
    \ String is the last item in\n   the PDU.  Padding bytes must be zero filled.\n\
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |  \
    \                   Octet String Length (L)                   |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |  Octet 1      |  Octet 2      |   Octet 3     |   Octet 4     |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |  Octet\
    \ L - 1  |  Octet L      |       Padding (as required)   |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   A null Octet String consists of a 4-byte length field set to 0.\n"
- title: 5.4.  Value Representation
  contents:
  - "5.4.  Value Representation\n   Variable bindings may be encoded within the variable-length\
    \ portion\n   of some PDUs.  The representation of a variable binding (termed\
    \ a\n   VarBind) consists of a 2-byte type field, a name (Object Identifier),\n\
    \   and the actual value data.\n   VarBind\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |          v.type               |          <reserved>           |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   (v.name)\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |  n_subid      |  prefix       |      0        |       0       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                       sub-identifier #1                       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |  \
    \                     sub-identifier #n_subid                 |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   (v.data)\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                       data                                    |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |  \
    \                     data                                    |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   VarBind fields:\n   v.type\n         Indicates the variable binding's syntax,\
    \ and must be one of\n         the following values:\n                     Integer\
    \                  (2),\n                     Octet String             (4),\n\
    \                     Null                     (5),\n                     Object\
    \ Identifier        (6),\n                     IpAddress               (64),\n\
    \                     Counter32               (65),\n                     Gauge32\
    \                 (66),\n                     TimeTicks               (67),\n\
    \                     Opaque                  (68),\n                     Counter64\
    \               (70),\n                     noSuchObject           (128),\n  \
    \                   noSuchInstance         (129),\n                     endOfMibView\
    \           (130)\n   v.name\n         The Object Identifier which names the variable.\n\
    \   v.data\n         The actual value, encoded as follows:\n          - Integer,\
    \ Counter32, Gauge32, and TimeTicks are encoded as\n            4 contiguous bytes.\
    \  If the NETWORK_BYTE_ORDER bit is set\n            in h.flags, the bytes are\
    \ ordered most significant to least\n            significant, otherwise they are\
    \ ordered least significant\n            to most significant.\n          - Counter64\
    \ is encoded as 8 contiguous bytes.  If the\n            NETWORK_BYTE_ORDER bit\
    \ is set in h.flags, the bytes are\n            ordered most significant to least\
    \ significant, otherwise\n            they are ordered least significant to most\
    \ significant.\n          - Object Identifiers are encoded as described in section\n\
    \            5.1, Object Identifier.\n          - IpAddress, Opaque, and Octet\
    \ String are all octet strings\n            and are encoded as described in section\
    \ 5.3, Octet String.\n            Value data always follows v.name whenever v.type\
    \ is one\n            of the above types.  These data bytes are present even if\n\
    \            they will not be used (as, for example, in certain types\n      \
    \      of index allocation).\n          - Null, noSuchObject, noSuchInstance,\
    \ and endOfMibView do not\n            contain any encoded value.  Value data\
    \ never follows\n            v.name in these cases.\n         Note that the VarBind\
    \ itself does not contain the value size.\n         That information is implied\
    \ for the fixed-length types, and\n         explicitly contained in the encodings\
    \ of variable-length types\n         (Object Identifier and Octet String).\n \
    \  A VarBindList is a contiguous list of VarBinds.  Within a\n   VarBindList,\
    \ a particular VarBind is identified by an index value.\n   The first VarBind\
    \ in a VarBindList has index value 1, the second\n   has index value 2, and so\
    \ on.\n"
- title: 6.  Protocol Definitions
  contents:
  - '6.  Protocol Definitions

    '
- title: 6.1.  AgentX PDU Header
  contents:
  - "6.1.  AgentX PDU Header\n   The AgentX PDU header is a fixed-format, 20-octet\
    \ structure:\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |   h.version   |    h.type     |    h.flags    |  <reserved>   |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                          h.sessionID                          |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                        h.transactionID                        |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                          h.packetID                           |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                        h.payload_length                       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   An AgentX PDU header contains the following fields:\n      h.version\n   \
    \      The version of the AgentX protocol (1 for this memo).\n      h.type\n \
    \        The PDU type; one of the following values:\n              agentx-Open-PDU\
    \             (1),\n              agentx-Close-PDU            (2),\n         \
    \     agentx-Register-PDU         (3),\n              agentx-Unregister-PDU  \
    \     (4),\n              agentx-Get-PDU              (5),\n              agentx-GetNext-PDU\
    \          (6),\n              agentx-GetBulk-PDU          (7),\n            \
    \  agentx-TestSet-PDU          (8),\n              agentx-CommitSet-PDU      \
    \  (9),\n              agentx-UndoSet-PDU         (10),\n              agentx-CleanupSet-PDU\
    \      (11),\n              agentx-Notify-PDU          (12),\n              agentx-Ping-PDU\
    \            (13),\n              agentx-IndexAllocate-PDU   (14),\n         \
    \     agentx-IndexDeallocate-PDU (15),\n              agentx-AddAgentCaps-PDU\
    \    (16),\n              agentx-RemoveAgentCaps-PDU (17),\n              agentx-Response-PDU\
    \        (18)\n      h.flags\n         A bitmask, with bit 0 the least significant\
    \ bit.  The bit\n         definitions are as follows:\n                 Bit  \
    \           Definition\n                 ---             ----------\n        \
    \         0               INSTANCE_REGISTRATION\n                 1          \
    \     NEW_INDEX\n                 2               ANY_INDEX\n                \
    \ 3               NON_DEFAULT_CONTEXT\n                 4               NETWORK_BYTE_ORDER\n\
    \                 5-7             (reserved)\n         The NETWORK_BYTE_ORDER\
    \ bit applies to all multi-byte integer\n         values in the entire AgentX\
    \ packet, including the remaining\n         header fields.  If set, then network\
    \ byte order (most\n         significant byte first; \"big endian\") is used.\
    \  If not set,\n         then least significant byte first (\"little endian\"\
    ) is used.\n         The NETWORK_BYTE_ORDER bit applies to all AgentX PDUs.\n\
    \         The NON_DEFAULT_CONTEXT bit is used only in the AgentX PDUs\n      \
    \   described in section 6.1.1.\n         The NEW_INDEX and ANY_INDEX bits are\
    \ used only within the\n         agentx-IndexAllocate-, and -IndexDeallocate-PDUs.\n\
    \         The INSTANCE_REGISTRATION bit is used only within the agentx-\n    \
    \     Register-PDU.\n      h.sessionID\n         The session ID uniquely identifies\
    \ a session over which AgentX\n         PDUs are exchanged between a subagent\
    \ and the master agent.\n         The session ID has no significance and no defined\
    \ value in the\n         agentx-Open-PDU sent by a subagent to open a session\
    \ with the\n         master agent; in this case, the master agent will assign\
    \ a\n         unique sessionID that it will pass back in the corresponding\n \
    \        agentx-Response-PDU.  From that point on, that same sessionID\n     \
    \    will appear in every AgentX PDU exchanged over that session\n         between\
    \ the master and the subagent.  A subagent may establish\n         multiple AgentX\
    \ sessions by sending multiple agentx-Open-PDUs\n         to the master agent.\n\
    \         In master agents that support multiple transport protocols, the\n  \
    \       sessionID should be globally unique rather than unique just to\n     \
    \    a particular transport.\n      h.transactionID\n         The transaction\
    \ ID uniquely identifies, for a given session,\n         the single SNMP management\
    \ request (and single SNMP PDU) with\n         which an AgentX PDU is associated.\
    \  If a single SNMP management\n         request results in multiple AgentX PDUs\
    \ being sent by the\n         master agent with the same sessionID, each of these\
    \ AgentX PDUs\n         must contain the same transaction ID; conversely, AgentX\
    \ PDUs\n         sent during a particular session, that result from distinct\n\
    \         SNMP management requests, must have distinct transaction IDs\n     \
    \    within the limits of the 32-bit field).\n         Note that the transaction\
    \ ID is not the same as the SNMP PDU's\n         request-id (as described in section\
    \ 4.1 of RFC 1905 [4]), nor\n         can it be, since a master agent might receive\
    \ SNMP requests\n         with the same request-ids from different managers.\n\
    \         The transaction ID has no significance and no defined value in\n   \
    \      AgentX administrative PDUs, i.e., AgentX PDUs that are not\n         associated\
    \ with an SNMP management request.\n      h.packetID\n         A packet ID generated\
    \ by the sender for all AgentX PDUs except\n         the agentx-Response-PDU.\
    \ In an agentx-Response-PDU, the packet\n         ID must be the same as that\
    \ in the received AgentX PDU to which\n         it is a response.  A master agent\
    \ might use this field to\n         associate subagent response PDUs with their\
    \ corresponding\n         request PDUs.  A subagent might use this field to correlate\n\
    \         responses to multiple (batched) registrations.\n      h.payload_length\n\
    \         The size in octets of the PDU contents, excluding the 20-byte\n    \
    \     header.  As a result of the encoding schemes and PDU layouts,\n        \
    \ this value will always be either 0, or a multiple of 4.\n"
- title: 6.1.1.  Context
  contents:
  - "6.1.1.  Context\n   In the SNMPv1 or v2c frameworks, the community string may\
    \ be used as\n   an index into a local repository of configuration information\
    \ that\n   may include community profiles or more complex context information.\n\
    \   Future versions of the SNMP will likely formalize this notion of\n   \"context\"\
    .\n   AgentX provides a mechanism for transmitting a context specification\n \
    \  within relevant PDUs, but does not place any constraints on the\n   content\
    \ of that specification.\n   An optional context field may be present in the agentx-Register-,\n\
    \   UnRegister-, AddAgentCaps-, RemoveAgentCaps-, Get-, GetNext-,\n   GetBulk-,\
    \ IndexAllocate-, IndexDeallocate-, Notify-, TestSet-, and\n   Ping- PDUs.\n \
    \  If the NON_DEFAULT_CONTEXT bit in the AgentX header field h.flags is\n   clear,\
    \ then there is no context field in the PDU, and the operation\n   refers to the\
    \ default context.\n   If the NON_DEFAULT_CONTEXT bit is set, then a context field\n\
    \   immediately follows the AgentX header, and the operation refers to\n   that\
    \ specific context.  The context is represented as an Octet\n   String.  There\
    \ are no constraints on its length or contents.\n   Thus, all of these AgentX\
    \ PDUs (that is, those listed immediately\n   above) refer to, or \"indicate\"\
    \ a context, which is either the default\n   context, or a non-default context\
    \ explicitly named in the PDU.\n"
- title: 6.2.  AgentX PDUs
  contents:
  - '6.2.  AgentX PDUs

    '
- title: 6.2.1.  The agentx-Open-PDU
  contents:
  - "6.2.1.  The agentx-Open-PDU\n   An agentx-Open-PDU is generated by a subagent\
    \ to request\n   establishment of an AgentX session with the master agent.\n \
    \  (AgentX header)\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   | h.version (1) |  h.type (1)   |    h.flags    |  <reserved>   |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                          h.sessionID                          |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                        h.transactionID                        |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                           h.packetID                          |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                        h.payload_length                       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |  o.timeout\
    \    |                     <reserved>                |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   (o.id)\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |  n_subid      |  prefix       |       0       |  <reserved>   |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |             subidentifier #1                                  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   ...                                                             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |             subidentifier #n_subid                            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   (o.descr)\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                     Octet String Length (L)                   |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |  Octet 1      |  Octet 2      |   Octet 3     |   Octet 4     |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   ...\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |  Octet L - 1  |  Octet L      |       Padding (as required)   |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   An agentx-Open-PDU contains the following fields:\n      o.timeout\n     \
    \    The length of time, in seconds, that a master agent should\n         allow\
    \ to elapse after dispatching a message to a subagent\n         before it regards\
    \ the subagent as not responding.  This is a\n         subagent-wide default value\
    \ that may be overridden by values\n         associated with specific registered\
    \ MIB regions.  The default\n         value of 0 indicates that no subagent-wide\
    \ value is requested.\n      o.id\n         An Object Identifier that identifies\
    \ the subagent.  Subagents\n         that do not support such an notion may send\
    \ a null Object\n         Identifier.\n      o.descr\n         An Octet String\
    \ containing a DisplayString describing the\n         subagent.\n"
- title: 6.2.2.  The agentx-Close-PDU
  contents:
  - "6.2.2.  The agentx-Close-PDU\n   An agentx-Close-PDU issued by either a subagent\
    \ or the master agent\n   terminates an AgentX session.\n   (AgentX header)\n\
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   | h.version\
    \ (1) |  h.type (2)   |    h.flags    |  <reserved>   |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                          h.sessionID                          |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                        h.transactionID                        |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                           h.packetID                          |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                        h.payload_length                       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |  c.reason\
    \     |                     <reserved>                |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   An agentx-Close-PDU contains the following field:\n      c.reason\n      \
    \   An enumerated value that gives the reason that the master agent\n        \
    \ or subagent closed the AgentX session.  This field may take one\n         of\
    \ the following values:\n            reasonOther(1)\n               None of the\
    \ following reasons\n            reasonParseError(2)\n               Too many\
    \ AgentX parse errors from peer\n            reasonProtocolError(3)\n        \
    \       Too many AgentX protocol errors from peer\n            reasonTimeouts(4)\n\
    \               Too many timeouts waiting for peer\n            reasonShutdown(5)\n\
    \               Sending entity is shutting down\n            reasonByManager(6)\n\
    \               Due to Set operation; this reason code can be used only\n    \
    \           by the master agent, in response to an SNMP management\n         \
    \      request.\n"
- title: 6.2.3.  The agentx-Register-PDU
  contents:
  - "6.2.3.  The agentx-Register-PDU\n   An agentx-Register-PDU is generated by a\
    \ subagent for each region of\n   the MIB variable naming tree (within one or\
    \ more contexts) that it\n   wishes to support.\n    (AgentX header)\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   | h.version (1) |  h.type (3)   |    h.flags    |  <reserved>   |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                          h.sessionID                          |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                        h.transactionID                        |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                           h.packetID                          |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                        h.payload_length                       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    (r.context) (OPTIONAL)\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |                     Octet String Length (L)                   |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |  Octet 1      |  Octet 2      |   Octet 3     |   Octet 4     |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    ...\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |  Octet L - 1  |  Octet L      |       Padding (as required)   |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    |\
    \  r.timeout    |  r.priority   | r.range_subid |  <reserved>   |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    (r.region)\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |  n_subid      |  prefix       |      0        |  <reserved>   |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |             sub-identifier #1                                 |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    ...\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |             sub-identifier #n_subid                           |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    (r.upper_bound)\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |             optional upper-bound sub-identifier               |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   An agentx-Register-PDU contains the following fields:\n      r.context\n \
    \        An optional non-default context.\n      r.timeout\n         The length\
    \ of time, in seconds, that a master agent should\n         allow to elapse after\
    \ dispatching a message to a subagent\n         before it regards the subagent\
    \ as not responding.  r.timeout\n         applies only to messages that concern\
    \ MIB objects within\n         r.region.  It overrides both the subagent-wide\
    \ value (if any)\n         indicated when the AgentX session with the master agent\
    \ was\n         established, and the master agent's default timeout.  The\n  \
    \       default value for r.timeout is 0 (no override).\n      r.priority\n  \
    \       A value between 1 and 255, used to achieve a desired\n         configuration\
    \ when different subagents register identical or\n         overlapping regions.\
    \  Subagents with no particular knowledge of\n         priority should register\
    \ with the default value of 255 (lowest\n         priority).\n         In the\
    \ master agent's dispatching algorithm, smaller values of\n         r.priority\
    \ take precedence over larger values, as described in\n         section 7.1.5.1.\n\
    \      r.region\n         An Object Identifier that, in conjunction with r.range_subid,\n\
    \         indicates a region of the MIB that a subagent wishes to\n         support.\
    \  It may be a fully-qualified instance name, a partial\n         instance name,\
    \ a MIB table, an entire MIB, or ranges of any of\n         these.\n         The\
    \ choice of what to register is implementation-specific; this\n         memo does\
    \ not specify permissible values.  Standard practice\n         however is for\
    \ a subagent to register at the highest level of\n         the naming tree that\
    \ makes sense.  Registration of fully-\n         qualified instances is typically\
    \ done only when a subagent can\n         perform management operations only on\
    \ particular rows of a\n         conceptual table.\n         If r.region is in\
    \ fact a fully qualified instance name, the\n         INSTANCE_REGISTRATION bit\
    \ in h.flags must be set, otherwise it\n         must be cleared.  The master\
    \ agent may save this information to\n         optimize subsequent operational\
    \ dispatching.\n      r.range_subid\n         Permits specifying a range in place\
    \ of one of r.region's sub-\n         identifiers.  If this value is 0, no range\
    \ is specified.\n         Otherwise the \"r.range_subid\"-th sub-identifier in\
    \ r.region is\n         a range lower bound, and the range upper bound sub-identifier\n\
    \         (r.upper_bound) immediately follows r.region.\n         This permits\
    \ registering a conceptual row with a single PDU.\n         For example, the following\
    \ PDU would register row 7 of the RFC\n         1573 ifTable (1.3.6.1.2.1.2.2.1.1-22.7):\n\
    \   (AgentX header)\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   | h.version (1) |  h.type (3)   |    h.flags    |  <reserved>   |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                          h.sessionID                          |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                        h.transactionID                        |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                           h.packetID                          |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                        h.payload_length                       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |  \
    \ r.timeout   |  r.priority   | 5             |  <reserved>   |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   (r.region)\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   | 6             |  2            |  0            |  <reserved>   |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   | 1                                                             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   | 2                                                             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   | 2                                                             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   | 1                                                             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   | 1                                                             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   | 7                                                             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   (r.upper_bound)\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   | 22                                                            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"
- title: 6.2.4.  The agentx-Unregister-PDU
  contents:
  - "6.2.4.  The agentx-Unregister-PDU\n   The agentx-Unregister-PDU is sent by a\
    \ subagent to remove a\n   previously registered MIB region from the master agent's\
    \ OID space.\n   (AgentX header)\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   | h.version (1) |  h.type (4)   |    h.flags    |  <reserved>   |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                          h.sessionID                          |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                        h.transactionID                        |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                           h.packetID                          |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                        h.payload_length                       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   (u.context) OPTIONAL\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                     Octet String Length (L)                   |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |  Octet 1      |  Octet 2      |   Octet 3     |   Octet 4     |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   ...\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |  Octet L - 1  |  Octet L      |       Padding (as required)   |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |  \
    \  <reserved> |  u.priority   | u.range_subid |  <reserved>   |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   (u.region)\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |  n_subid      |  prefix       |      0        |  <reserved>   |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |             sub-identifier #1                                 |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   ...\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |             sub-identifier #n_subid                           |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   (u.upper_bound)\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |             optional upper-bound sub-identifier               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   An agentx-Unregister-PDU contains the following fields:\n      u.context\n\
    \         An optional non-default context.\n      u.priority\n         The priority\
    \ at which this region was originally registered.\n      u.region\n         Indicates\
    \ a previously-registered region of the MIB that a\n         subagent no longer\
    \ wishes to support.\n"
- title: 6.2.5.  The agentx-Get-PDU
  contents:
  - "6.2.5.  The agentx-Get-PDU\n    (AgentX header)\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    | h.version (1) |  h.type (5)   |    h.flags    |  <reserved>   |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |                          h.sessionID                          |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |                        h.transactionID                        |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |                           h.packetID                          |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |                        h.payload_length                       |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    (g.context) OPTIONAL\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |                     Octet String Length (L)                   |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |  Octet 1      |  Octet 2      |   Octet 3     |   Octet 4     |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    ...\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |  Octet L - 1  |  Octet L      |       Padding (as required)   |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    (g.sr)\n    (start 1)\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |  n_subid      |  prefix       |  include      |  <reserved>   |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |             sub-identifier #1                                 |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    ...\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |             sub-identifier #n_subid                           |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    (end 1)\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    | 0             | 0             | 0             |       0       |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    ...\n    (start n)\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |  n_subid      |  prefix       |  include      |  <reserved>   |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |             sub-identifier #1                                 |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    ...\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |             sub-identifier #n_subid                           |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    (end n)\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    | 0             | 0             | 0             |       0       |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   An agentx-Get-PDU contains the following fields:\n      g.context\n      \
    \   An optional non-default context.\n      g.sr\n         A SearchRangeList containing\
    \ the requested variables for this\n         subagent.\n"
- title: 6.2.6.  The agentx-GetNext-PDU
  contents:
  - "6.2.6.  The agentx-GetNext-PDU\n    (AgentX header)\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    | h.version (1) |  h.type (6)   |    h.flags    |  <reserved>   |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |                          h.sessionID                          |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |                        h.transactionID                        |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |                           h.packetID                          |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |                        h.payload_length                       |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    (g.context) OPTIONAL\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |                     Octet String Length (L)                   |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |  Octet 1      |  Octet 2      |   Octet 3     |   Octet 4     |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    ...\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |  Octet L - 1  |  Octet L      |       Padding (as required)   |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    (g.sr)\n    (start 1)\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |  n_subid      |  prefix       |  include      |  <reserved>   |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |             sub-identifier #1                                 |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    ...\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |             sub-identifier #n_subid                           |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    (end 1)\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |  n_subid      |  prefix       |      0        |  <reserved>   |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |             sub-identifier #1                                 |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    ...\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |             sub-identifier #n_subid                           |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    ...\n    (start n)\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |  n_subid      |  prefix       |  include      |  <reserved>   |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |             sub-identifier #1                                 |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    ...\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |             sub-identifier #n_subid                           |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    (end n)\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |  n_subid      |  prefix       |      0        |  <reserved>   |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |             sub-identifier #1                                 |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    ...\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |             sub-identifier #n_subid                           |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    ...\n"
- title: 6.2.7.  The agentx-GetBulk-PDU
  contents:
  - "6.2.7.  The agentx-GetBulk-PDU\n    (AgentX header)\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    | h.version (1) |  h.type (7)   |    h.flags    |  <reserved>   |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |                          h.sessionID                          |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |                        h.transactionID                        |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |                           h.packetID                          |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |                        h.payload_length                       |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    (g.context) OPTIONAL\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |                     Octet String Length (L)                   |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |  Octet 1      |  Octet 2      |   Octet 3     |   Octet 4     |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    ...\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |  Octet L - 1  |  Octet L      |       Padding (as required)   |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    |\
    \             g.non_repeaters   |     g.max_repetitions         |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    (g.sr) as in agentx-GetNext-PDU above\n    ...\n"
- title: 6.2.8.  The agentx-TestSet-PDU
  contents:
  - "6.2.8.  The agentx-TestSet-PDU\n    (AgentX header)\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    | h.version (1) |  h.type (8)   |    h.flags    |  <reserved>   |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |                          h.sessionID                          |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |                        h.transactionID                        |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |                           h.packetID                          |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |                        h.payload_length                       |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    (t.context) OPTIONAL\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |                     Octet String Length (L)                   |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |  Octet 1      |  Octet 2      |   Octet 3     |   Octet 4     |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    ...\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |  Octet L - 1  |  Octet L      |       Padding (as required)   |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    (t.vb)\n    (VarBind 1)\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |          v.type               |        <reserved>             |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |  n_subid      |  prefix       |      0        |  <reserved>   |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |                       sub-identifier #1                       |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    ...\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |                       sub-identifier #n_subid                 |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |                       data                                    |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    ...\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |                       data                                    |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    ...\n    (VarBind n)\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |          v.type               |        <reserved>             |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |  n_subid      |  prefix       |      0        |  <reserved>   |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |                       sub-identifier #1                       |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    ...\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |                       sub-identifier #n_subid                 |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |                       data                                    |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    ...\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |                       data                                    |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   An agentx-TestSet-PDU contains the following fields:\n      t.context\n  \
    \       An optional non-default context.\n      t.vb\n         A VarBindList containing\
    \ the requested VarBinds for this\n         subagent.\n"
- title: 6.2.9.  The agentx-CommitSet, -UndoSet, -CleanupSet PDUs
  contents:
  - "6.2.9.  The agentx-CommitSet, -UndoSet, -CleanupSet PDUs\n   These PDUs consist\
    \ of the AgentX header only.\n   The agentx-CommitSet-, -UndoSet-, and -Cleanup-PDUs\
    \ are used in\n   processing an SNMP SetRequest operation.\n"
- title: 6.2.10.  The agentx-Notify-PDU
  contents:
  - "6.2.10.  The agentx-Notify-PDU\n   An agentx-Notify-PDU is sent by a subagent\
    \ to cause the master agent\n   to forward a notification.\n    (AgentX header)\n\
    \    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    |\
    \ h.version (1) |  h.type (12)  |    h.flags    |  <reserved>   |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |                          h.sessionID                          |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |                        h.transactionID                        |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |                           h.packetID                          |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |                        h.payload_length                       |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    (n.context) OPTIONAL\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |                     Octet String Length (L)                   |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |  Octet 1      |  Octet 2      |   Octet 3     |   Octet 4     |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    ...\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |  Octet L - 1  |  Octet L      |       Padding (as required)   |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    (n.vb)\n    ...\n   An agentx-Notify-PDU contains the following fields:\n\
    \      n.context\n         An optional non-default context.\n      n.vb\n    \
    \     A VarBindList whose contents define the actual PDU to be sent.\n       \
    \  This memo places the following restrictions on its contents:\n            \
    \ - If the subagent supplies sysUpTime.0, it must be\n               present as\
    \ the first varbind.\n             - snmpTrapOID.0 must be present, as the second\n\
    \               varbind if sysUpTime.0 was supplied, as the first if it\n    \
    \           was not.\n"
- title: 6.2.11  The agentx-Ping-PDU
  contents:
  - "6.2.11  The agentx-Ping-PDU\n   The agentx-Ping-PDU is sent by a subagent to\
    \ the master agent to\n   monitor the master agent's ability to receive and send\
    \ AgentX PDUs\n   over their AgentX session.\n    (AgentX header)\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    | h.version (1) |  h.type (13)  |    h.flags    |  <reserved>   |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |                          h.sessionID                          |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |                        h.transactionID                        |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |                           h.packetID                          |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |                        h.payload_length                       |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   (p.context) OPTIONAL\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |                     Octet String Length (L)                   |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |  Octet 1      |  Octet 2      |   Octet 3     |   Octet 4     |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    ...\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |  Octet L - 1  |  Octet L      |       Padding (as required)   |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   An agentx-Ping-PDU may contain the following field:\n      p.context\n   \
    \      An optional non-default context.\n   Using p.context a subagent can retrieve\
    \ the sysUpTime value for a\n   specific context, if required.\n"
- title: 6.2.12.  The agentx-IndexAllocate-PDU
  contents:
  - "6.2.12.  The agentx-IndexAllocate-PDU\n   An agentx-IndexAllocate-PDU is sent\
    \ by a subagent to request\n   allocation of a value for specific index objects.\
    \  Refer to section\n   7.1.3 (Using the agentx-IndexAllocate-PDU) for suggested\
    \ usage.\n    (AgentX header)\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    | h.version (1) |  h.type (14)  |    h.flags    |  <reserved>   |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |                          h.sessionID                          |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |                        h.transactionID                        |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |                           h.packetID                          |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |                        h.payload_length                       |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    (i.context) OPTIONAL\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |                     Octet String Length (L)                   |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |  Octet 1      |  Octet 2      |   Octet 3     |   Octet 4     |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    ...\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |  Octet L - 1  |  Octet L      |       Padding (as required)   |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    (i.vb)\n    ...\n   An agentx-IndexAllocate-PDU contains the following fields:\n\
    \      i.context\n         An optional non-default context.\n      i.vb\n    \
    \     A VarBindList containing the index names and values requested\n        \
    \ for allocation.\n"
- title: 6.2.13.  The agentx-IndexDeallocate-PDU
  contents:
  - "6.2.13.  The agentx-IndexDeallocate-PDU\n   An agentx-IndexDeallocate-PDU is\
    \ sent by a subagent to release\n   previously allocated index values.\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    | h.version (1) |  h.type (15)  |    h.flags    |  <reserved>   |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |                          h.sessionID                          |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |                        h.transactionID                        |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |                           h.packetID                          |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |                        h.payload_length                       |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    (i.context) OPTIONAL\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |                     Octet String Length (L)                   |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |  Octet 1      |  Octet 2      |   Octet 3     |   Octet 4     |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    ...\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |  Octet L - 1  |  Octet L      |       Padding (as required)   |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    (i.vb)\n    ...\n   An agentx-IndexDeallocate-PDU contains the following\
    \ fields:\n      i.context\n         An optional non-default context.\n      i.vb\n\
    \         A VarBindList containing the index names and values to be\n        \
    \ released.\n"
- title: 6.2.14.  The agentx-AddAgentCaps-PDU
  contents:
  - "6.2.14.  The agentx-AddAgentCaps-PDU\n   An agentx-AddAgentCaps-PDU is generated\
    \ by a subagent to inform the\n   master agent of its agent capabilities.\n  \
    \  (AgentX header)\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    | h.version (1) |  h.type (16)  |    h.flags    |  <reserved>   |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |                          h.sessionID                          |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |                        h.transactionID                        |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |                           h.packetID                          |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |                        h.payload_length                       |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    (a.context) (OPTIONAL)\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |                     Octet String Length (L)                   |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |  Octet 1      |  Octet 2      |   Octet 3     |   Octet 4     |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    ...\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |  Octet L - 1  |  Octet L      |       Optional Padding        |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    (a.id)\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |  n_subid      |  prefix       |      0        |  <reserved>   |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |             sub-identifier #1                                 |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    ...\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |             sub-identifier #n_subid                           |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    (a.descr)\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |                     Octet String Length (L)                   |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |  Octet 1      |  Octet 2      |   Octet 3     |   Octet 4     |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    ...\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |  Octet L - 1  |  Octet L      |       Optional Padding        |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   An agentx-AddAgentCaps-PDU contains the following fields:\n      a.context\n\
    \         An optional non-default context.\n      a.id\n         An Object Identifier\
    \ containing the value of an invocation of\n         the AGENT-CAPABILITIES macro,\
    \ which the master agent exports as\n         a value of sysORID for the indicated\
    \ context.  (Recall that the\n         value of an invocation of an AGENT-CAPABILITIES\
    \ macro is an\n         object identifier that describes a precise level of support\n\
    \         with respect to implemented MIB modules.  A more complete\n        \
    \ discussion of the AGENT-CAPABILITIES macro and related sysORID\n         values\
    \ can be found in section 6 of RFC 1904 [10].)\n      a.descr\n         An Octet\
    \ String containing a DisplayString to be used as the\n         value of sysORDescr\
    \ corresponding to the sysORID value above.\n"
- title: 6.2.15.  The agentx-RemoveAgentCaps-PDU
  contents:
  - "6.2.15.  The agentx-RemoveAgentCaps-PDU\n   An agentx-RemoveAgentCaps-PDU is\
    \ generated by a subagent to request\n   that the master agent stop exporting\
    \ a particular value of sysORID.\n   This value must have previously been advertised\
    \ by the subagent in an\n   agentx-AddAgentCaps-PDU.\n   (AgentX header)\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   | h.version (1) |  h.type (17)  |    h.flags    |  <reserved>   |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                          h.sessionID                          |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                        h.transactionID                        |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                           h.packetID                          |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                        h.payload_length                       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   (a.context) (OPTIONAL)\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                     Octet String Length (L)                   |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |  Octet 1      |  Octet 2      |   Octet 3     |   Octet 4     |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   ...\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |  Octet L - 1  |  Octet L      |       Optional Padding        |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   (a.id)\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |  n_subid      |  prefix       |       0       |   <reserved>  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |             sub-identifier #1                                 |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   ...\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |             sub-identifier #n_subid                           |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   An agentx-RemoveAgentCaps-PDU contains the following fields:\n      a.context\n\
    \         An optional non-default context.\n      a.id\n         An ObjectIdentifier\
    \ containing the value of sysORID that should\n         no longer be exported.\n"
- title: 6.2.16.  The agentx-Response-PDU
  contents:
  - "6.2.16.  The agentx-Response-PDU\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   | h.version (1) |  h.type (18)  |    h.flags    |  <reserved>   |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                          h.sessionID                          |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                        h.transactionID                        |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                           h.packetID                          |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                        h.payload_length                       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |  \
    \                      res.sysUpTime                          |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |             res.error         |     res.index                 |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   ...\n   An agentx-Response-PDU contains the following fields:\n      h.sessionID\n\
    \         If this is a response to a agentx-Open-PDU, then it contains\n     \
    \    the new and unique sessionID (as assigned by the master agent)\n        \
    \ for this session.\n         Otherwise it must be identical to the h.sessionID\
    \ value in the\n         PDU to which this PDU is a response.\n      h.transactionID\n\
    \         Must be identical to the h.transactionID value in the PDU to\n     \
    \    which this PDU is a response.\n         In an agentx response PDU from the\
    \ master agent to the\n         subagent, the value of h.transactionID has no\
    \ significance and\n         can be ignored by the subagent.\n      h.packetID\n\
    \         Must be identical to the h.packetID value in the PDU to which\n    \
    \     this PDU is a response.\n      res.sysUpTime\n         This field contains\
    \ the current value of sysUpTime for the\n         indicated context.  It is relevant\
    \ only in agentx response PDUs\n         sent from the master agent to a subagent\
    \ in response to the\n         following agentx PDUs:\n               agentx-Open-PDU\
    \               (1),\n               agentx-Close-PDU              (2),\n    \
    \           agentx-Register-PDU           (3),\n               agentx-Unregister-PDU\
    \         (4),\n               agentx-Ping-PDU              (13),\n          \
    \     agentx-IndexAllocate-PDU     (14),\n               agentx-IndexDeallocate-PDU\
    \   (15),\n               agentx-AddAgentCaps-PDU      (16),\n               agentx-RemoveAgentCaps-PDU\
    \   (17)\n         In an agentx response PDU from the subagent to the master\n\
    \         agent, the value of res.sysUpTime has no significance and is\n     \
    \    ignored by the master agent.\n      res.error\n         Indicates error status\
    \ (including `noError').  Values are\n         limited to those defined for errors\
    \ in the SNMPv2 SMI (RFC 1905\n         [4]), and the following AgentX-specific\
    \ values:\n                openFailed                 (256),\n               \
    \ notOpen                    (257),\n                indexWrongType          \
    \   (258),\n                indexAlreadyAllocated      (259),\n              \
    \  indexNoneAvailable         (260),\n                indexNotAllocated      \
    \    (261),\n                unsupportedContext         (262),\n             \
    \   duplicateRegistration      (263),\n                unknownRegistration   \
    \     (264),\n                unknownAgentCaps           (265)\n      res.index\n\
    \         In error cases, this is the index of the failed variable\n         binding\
    \ within a received request PDU.  (Note: As explained in\n         section 5.4,\
    \ Value Representation, the index values of variable\n         bindings within\
    \ a variable binding list are 1-based.)\n   A VarBindList may follow these latter\
    \ two fields, depending on which\n   AgentX PDU is being responded to.  These\
    \ data are specified in the\n   subsequent elements of procedure.\n"
- title: 7.  Elements of Procedure
  contents:
  - "7.  Elements of Procedure\n   This section describes the actions of protocol\
    \ entities (master\n   agents and subagents) implementing the AgentX protocol.\
    \  Note,\n   however, that it is not intended to constrain the internal\n   architecture\
    \ of any conformant implementation.\n   Specific error conditions and associated\
    \ actions are described in\n   various places.  Other error conditions not specifically\
    \ mentioned\n   fall into one of two categories, \"parse\" errors and \"protocol\"\
    \n   errors.\n   A parse error occurs when a receiving entity cannot decode the\
    \ PDU.\n   For instance, a VarBind contains an unknown type, or a PDU contains\
    \ a\n   malformed Object Identifier.\n   A protocol error occurs when a receiving\
    \ entity can parse a PDU, but\n   the resulting data is unspecified.  For instance,\
    \ an agentx-\n   Response-PDU is successfully parsed, but contains an unknown\n\
    \   res.error value.\n   An implementation may choose either to ignore such messages,\
    \ or to\n   close the session on which they are received, using the appropriate\n\
    \   reason code as defined in the agentx-Close-PDU.\n   The actions of AgentX\
    \ protocol entities can be broadly categorized\n   under two headings, each of\
    \ which is described separately:\n      (1) processing AgentX administrative messages\
    \ (e.g., connection\n          requests from a subagent to a master agent); and\n\
    \      (2) processing SNMP messages (the coordinated actions of a\n          master\
    \ agent and one or more subagents in processing, for\n          example, a received\
    \ SNMP GetRequest-PDU).\n"
- title: 7.1.  Processing AgentX Administrative Messages
  contents:
  - "7.1.  Processing AgentX Administrative Messages\n   This subsection describes\
    \ the actions of AgentX protocol entities in\n   processing AgentX administrative\
    \ messages.  Such messages include\n   those involved in establishing and terminating\
    \ an AgentX session\n   between a subagent and a master agent, those by which\
    \ a subagent\n   requests allocation of instance index values, and those by which\
    \ a\n   subagent communicates to a master agent which MIB regions it\n   supports.\n"
- title: 7.1.1.  Processing the agentx-Open-PDU
  contents:
  - "7.1.1.  Processing the agentx-Open-PDU\n   When the master agent receives an\
    \ agentx-Open-PDU, it processes it as\n   follows:\n   1) An agentx-Response-PDU\
    \ is created and res.sysUpTime is set to\n      the value of sysUpTime.0 for the\
    \ indicated context.\n   2) If the master agent is unable to open an AgentX session\
    \ for\n      any reason, it may refuse the session establishment request,\n  \
    \    sending in reply the agentx-Response-PDU, with res.error field set\n    \
    \  to `openFailed'.\n   3) Otherwise:  The master agent assigns a sessionID to\
    \ the new\n      session and puts the value in the h.sessionID field of the\n\
    \      agentx-Response-PDU.  This value must be unique among all existing\n  \
    \    open sessions.\n   4) The master agent retains session-specific information\n\
    \      from the PDU for this subagent:\n       - The NETWORK_BYTE_ORDER value\
    \ in h.flags is retained.\n         All subsequent AgentX protocol operations\
    \ initiated by the\n         master agent for this session must use this byte\
    \ ordering and\n         set this bit accordingly.\n         The subagent typically\
    \ sets this bit to correspond to its\n         native byte ordering, and typically\
    \ does not vary byte ordering\n         for an initiated session.  The master\
    \ agent must be able to\n         decode each PDU according to the h.flag NETWORK_BYTE_ORDER\
    \ bit\n         in the PDU, but does not need to toggle its retained value for\n\
    \         the session if the subagent varies its byte ordering.\n       - The\
    \ o.timeout value is used in calculating response\n         timeout conditions\
    \ for this subagent.\n       - The o.id and o.descr fields are used for informational\n\
    \         purposes.  (Such purposes are implementation-specific for now,\n   \
    \      and may be used in a possible future standard AgentX MIB.)\n   5) The agentx-Response-PDU\
    \ is sent with the res.error field\n      set to `noError'.\n   At this point,\
    \ an AgentX session is considered established between\n   the master agent and\
    \ the subagent.  An AgentX session is a distinct\n   channel for the exchange\
    \ of AgentX protocol messages between a master\n   agent and one subagent, qualified\
    \ by the session-specific attributes\n   listed in 4) above.  AgentX session establishment\
    \ is initiated by the\n   subagent.  An AgentX session can be terminated by either\
    \ the master\n   agent or the subagent.\n"
- title: 7.1.2.  Processing the agentx-IndexAllocate-PDU
  contents:
  - "7.1.2.  Processing the agentx-IndexAllocate-PDU\n   When the master agent receives\
    \ an agentx-IndexAllocate-PDU, it\n   processes it as follows:\n   1) An agentx-Response-PDU\
    \ is created and res.sysUpTime is set to\n      the value of sysUpTime.0 for the\
    \ default context.\n   2) If h.sessionID does not correspond to a currently established\n\
    \      session with this subagent, the agentx-Response-PDU is sent in\n      reply\
    \ with res.error set to `notOpen'.\n   3) If the NON_DEFAULT_CONTEXT bit is set,\
    \ and the master agent\n      supports only a default context, the agentx-Response-PDU\
    \ is\n      returned with res.error set to `unsupportedContext', and the\n   \
    \   requested allocation fails.  Otherwise: The value of res.sysUpTime\n     \
    \ is set to the value of sysUpTime.0 for the indicated context.\n   4) Each VarBind\
    \ in the VarBindList is processed until either all\n      are successful, or one\
    \ fails.  If any VarBind fails, the agentx-\n      Response-PDU is sent in reply\
    \ containing the original VarBindList,\n      with res.index set to indicate the\
    \ failed VarBind, and with\n      res.error set as described subsequently.  All\
    \ other VarBinds are\n      ignored; no index values are allocated.\n      VarBinds\
    \ are processed as follows:\n      - v.name is the name of the index for which\
    \ a value is to be\n        allocated.\n      - v.type is the syntax of the index\
    \ object.\n      - v.data indicates the specific index value requested.\n    \
    \    If the NEW_INDEX or the ANY_INDEX bit is set, the actual value\n        in\
    \ v.data is ignored and an appropriate index value is\n        generated.\n  \
    \    a) If there are no currently allocated index values for v.name\n        \
    \ in the indicated context, and v.type does not correspond to a\n         valid\
    \ index type value, the VarBind fails and res.error is set\n         to `indexWrongType'.\n\
    \      b) If there are currently allocated index values for v.name\n         in\
    \ the indicated context, but the syntax of those values does\n         not match\
    \ v.type, the VarBind fails and res.error is set to\n         `indexWrongType'.\n\
    \      c) Otherwise, if both the NEW_INDEX and ANY_INDEX bits are\n         clear,\
    \ allocation of a specific index value is being requested.\n         If the requested\
    \ index is already allocated for v.name in the\n         indicated context, the\
    \ VarBind fails and res.error is set to\n         `indexAlreadyAllocated'.\n \
    \     d) Otherwise, if the NEW_INDEX bit is set, the master agent\n         should\
    \ generate the next available index value for v.name in\n         the indicated\
    \ context, with the constraint that this value must\n         not have been allocated\
    \ (even if subsequently released) to any\n         subagent since the last re-initialization\
    \ of the master agent.\n         If no such value can be generated, the VarBind\
    \ fails and\n         res.error is set to `indexNoneAvailable'.\n      e) Otherwise,\
    \ if the ANY_INDEX bit is set, the master agent\n         should generate an index\
    \ value for v.name in the indicated\n         context, with the constraint that\
    \ this value is not currently\n         allocated to any subagent.  If no such\
    \ value can be generated,\n         then the VarBind fails and res.error is set\
    \ to\n         `indexNoneAvailable'.\n   5) If all VarBinds are processed successfully,\
    \ the\n      agentx-Response-PDU is sent in reply with res.error set to\n    \
    \  `noError'.  A VarBindList is included that is identical to the one\n      sent\
    \ in the agentx-IndexAllocate-PDU, except that VarBinds\n      requesting a NEW_INDEX\
    \ or ANY_INDEX value are generated with an\n      appropriate value.\n"
- title: 7.1.3.  Using the agentx-IndexAllocate-PDU
  contents:
  - "7.1.3.  Using the agentx-IndexAllocate-PDU\n   Index allocation is a service\
    \ provided by an AgentX master agent.  It\n   provides generic support for sharing\
    \ MIB conceptual tables among\n   subagents who are assumed to have no knowledge\
    \ of each other.\n   Each subagent sharing a table should first request allocation\
    \ of\n   index values, then use those index values to qualify MIB regions in\n\
    \   its subsequent registrations.\n   The master agent maintains a database of\
    \ index objects (OIDs), and,\n   for each index, the values that have been allocated\
    \ for it.  It is\n   unaware of what MIB variables (if any) the index objects\
    \ represent.\n   By convention, subagents use the MIB variable listed in the INDEX\n\
    \   clause as the index object for which values must be allocated.  For\n   tables\
    \ indexed by multiple variables, values may be allocated for\n   each index (although\
    \ this is frequently unnecessary; see example 2\n   below).  The subagent may\
    \ request allocation of\n        - a specific index value - an index value that\
    \ is not currently\n        allocated - an index value that has never been allocated\n\
    \   The last two alternatives reflect the uniqueness and constancy\n   requirements\
    \ present in many MIB specifications for arbitrary integer\n   indexes (e.g.,\
    \ ifIndex in the IF MIB (RFC 1573 [11]),\n   snmpFddiSMTIndex in the FDDI MIB\
    \ (RFC 1285 [12]), or\n   sysApplInstallPkgIndex in the System Application MIB\
    \ [13]).  The need\n   for subagents to share tables using such indexes is the\
    \ main\n   motivation for index allocation in AgentX.\n   Example 1:\n      A\
    \ subagent implements an interface, and wishes to register a\n      single row\
    \ of the RFC 1573 ifTable.  It requests an allocation for\n      the index object\
    \ \"ifIndex\", for a value that has never been\n      allocated (since ifIndex\
    \ values must be unique).  The master agent\n      returns the value \"7\".\n\
    \      The subagent now attempts to register row 7 of ifTable, by\n      specifying\
    \ a MIB region in the agentx-Register-PDU of\n      1.3.6.1.2.1.2.2.1.[1-22].7.\
    \  If the registration succeeds, no\n      further processing is required.  The\
    \ master agent will dispatch to\n      this subagent correctly.\n      But the\
    \ registration may fail.  Index allocation and MIB region\n      registration\
    \ are not coupled in the master agent.  Some other\n      subagent may have already\
    \ registered ifTable row 7 without first\n      having requested allocation of\
    \ the index.  The current state of\n      index allocations is not considered\
    \ when processing registration\n      requests, and the current registry is not\
    \ considered when\n      processing index allocation requests.  If subagents follow\
    \ the\n      model of \"first request allocation of an index, then register the\n\
    \      corresponding region\", then a successful index allocation request\n  \
    \    gives a subagent a good hint (but no guarantee) of what it should\n     \
    \ be able to register.\n      If the registration failed, the subagent should\
    \ request allocation\n      of a new index i, and attempt to register ifTable.[1-22].i,\
    \ until\n      successful.\n   Example 2:\n      This same subagent wishes to\
    \ register ipNetToMediaTable rows\n      corresponding to its interface (ifIndex\
    \ i).  Due to structure of\n      this table, no further index allocation need\
    \ be done.  The\n      subagent can register the MIB region ipNetToMediaTable.[1-4].i,\
    \ It\n      is claiming responsibility for all rows of the table whose value\n\
    \      of ipNetToMediaIfIndex is i.\n   Example 3:\n      A network device consists\
    \ of a set of processors, each of which\n      accepts network connections for\
    \ a unique set of IP addresses.\n      Further, each processor contains a subagent\
    \ that implements\n      tcpConnTable.  In order to represent tcpConnTable for\
    \ the entire\n      managed device, the subagents need to share tcpConnTable.\n\
    \      In this case, no index allocation need be done at all.  Each\n      subagent\
    \ can register a MIB region of tcpConnTable.[1-5].a.b.c.d,\n      where a.b.c.d\
    \ represents an unique IP address of the individual\n      processor.\n      Each\
    \ subagent is claiming responsibility for the region of\n      tcpConnTable where\
    \ the value of tcpConnLocalAddress is a.b.c.d.\n"
- title: 7.1.4   Processing the agentx-IndexDeallocate-PDU
  contents:
  - "7.1.4   Processing the agentx-IndexDeallocate-PDU\n   When the master agent receives\
    \ an agentx-IndexDeallocate-PDU, it\n   processes it as follows:\n   1) An agentx-Response-PDU\
    \ is created and res.sysUpTime is set to\n      the value of sysUpTime.0 for the\
    \ default context.\n   2) If h.sessionID does not correspond to a currently\n\
    \      established session with this subagent, the agentx-Response-PDU is\n  \
    \    sent in reply with res.error set to `notOpen'.\n   3) If the NON_DEFAULT_CONTEXT\
    \ bit is set, and the master agent\n      supports only a default context, the\
    \ agentx-Response-PDU is\n      returned with res.error set to `unsupportedContext',\
    \ and the\n      requested deallocation fails.  Otherwise: The value of\n    \
    \  res.sysUpTime is set to the value of sysUpTime.0 for the indicated\n      context.\n\
    \   4) Each VarBind in the VarBindList is processed until either all\n      are\
    \ successful, or one fails.  If any VarBind fails, the agentx-\n      Response-PDU\
    \ is sent in reply, containing the original\n      VarBindList, with res.index\
    \ set to indicate the failed VarBind,\n      and with res.error set as described\
    \ subsequently.  All other\n      VarBinds are ignored; no index values are released.\n\
    \      VarBinds are processed as follows:\n      - v.name is the name of the index\
    \ for which a value is to be\n        released\n      - v.type is the syntax of\
    \ the index object\n      - v.data indicates the specific index value to be released.\n\
    \        The NEW_INDEX and ANY_INDEX bits are ignored.\n      a) If the index\
    \ value for the named index is not currently\n         allocated to this subagent,\
    \ the VarBind fails and res.error is\n         set to `indexNotAllocated'.\n \
    \  5) If all VarBinds are processed successfully, res.error is\n      set to `noError'\
    \ and the agentx-Response-PDU is sent.  A\n      VarBindList is included which\
    \ is identical to the one sent in the\n      agentx-IndexDeallocate-PDU.\n   \
    \   All released index values are now available, and may be used in\n      response\
    \ to subsequent allocation requests for ANY_INDEX values\n      for the particular\
    \ index.\n"
- title: 7.1.5.  Processing the agentx-Register-PDU
  contents:
  - "7.1.5.  Processing the agentx-Register-PDU\n   When the master agent receives\
    \ an agentx-Register-PDU, it processes\n   it as follows:\n   1) An agentx-Response-PDU\
    \ is created and res.sysUpTime is set to\n      the value of sysUpTime.0 for the\
    \ default context.\n   2) If h.sessionID does not correspond to a currently\n\
    \      established session with this subagent, the agentx-Response-PDU is\n  \
    \    sent in reply with res.error set to `notOpen'.\n   3) If the NON_DEFAULT_CONTEXT\
    \ bit is set, and the master agent\n      supports only a default context, the\
    \ agentx-Response-PDU is\n      returned with res.error set to `unsupportedContext',\
    \ and the\n      requested registration fails.  Otherwise:  The value of\n   \
    \   res.sysUpTime is set to the value of sysUpTime.0 for the indicated\n     \
    \ context.\n      Note: Non-default contexts might be added on the fly by\n  \
    \          the master agent, or the master agent might require such\n        \
    \    non-default contexts to be pre-configured.  The choice is\n            implementation-specific.\n\
    \   4) Characterize the request.\n      If r.region (or any of its set of Object\
    \ Identifiers, if r.range\n      is non-zero) is exactly the same as any currently\
    \ registered value\n      of r.region (or any of its set of Object Identifiers),\
    \ this\n      registration is termed a duplicate region.\n      If r.region (or\
    \ any of its set of Object Identifiers, if r.range\n      is non-zero) is a subtree\
    \ of, or contains, any currently\n      registered value of r.region (or any of\
    \ its set of Object\n      Identifiers), this registration is termed an overlapping\
    \ region.\n      If the NON_DEFAULT_CONTEXT bit is set, this region is to be\n\
    \      logically registered within the context indicated by r.context.\n     \
    \ Otherwise this region is to be logically registered within the\n      default\
    \ context.\n      A registration that would result in a duplicate region with\
    \ the\n      same priority and within the same context as that of a current\n\
    \      registration is termed a duplicate registration.\n   5) Otherwise, if this\
    \ is a duplicate registration, the\n      agentx-Response-PDU is returned with\
    \ res.error set to\n      `duplicateRegistration', and the requested registration\
    \ fails.\n   6) Otherwise, the agentx-Response-PDU is returned with res.error\n\
    \      set to `noError'.\n      The master agent adds this region to its registered\
    \ OID space for\n      the indicated context, to be considered during the dispatching\n\
    \      phase for subsequently received SNMP protocol messages.\n      Note: The\
    \ following algorithm describes maintaining a set of OID\n      ranges derived\
    \ from \"splitting\" registered regions.  The algorithm\n      for operational\
    \ dispatching is also stated in terms of these OID\n      ranges.\n      These\
    \ OID ranges are a useful explanatory device, but are not\n      required for\
    \ a correct implementation.\n       - If r.region (R1) is a subtree of a currently\
    \ registered\n         region (R2), split R2 into 3 new regions (R2a, R2b, and\
    \ R2c)\n         such that R2b is an exact duplicate of R1.  Now remove R2 and\n\
    \         add R1, R2a, R2b, and R2c to the master agent's\n         lexicographically\
    \ ordered set of ranges (the registered OID\n         space).  Note: Though newly-added\
    \ ranges R1 and R2b are\n         identical in terms of the MIB objects they contain,\
    \ they are\n         registered by different subagents, possibly at different\n\
    \         priorities.\n         For instance, if subagent S2 registered \"ip\"\
    \ (R2 is\n         1.3.6.1.2.1.4) and subagent S1 subsequently registered\n  \
    \       \"ipNetToMediaTable\" (R1 is 1.3.6.1.2.1.4.22), the resulting set\n  \
    \       of registered regions would be:\n   1.3.6.1.2.1.4    up to but not including\
    \ 1.3.6.1.2.1.4.22     (by S2)\n   1.3.6.1.2.1.4.22 up to but not including 1.3.6.1.2.1.4.23\
    \     (by S2)\n   1.3.6.1.2.1.4.22 up to but not including 1.3.6.1.2.1.4.23  \
    \   (by S1)\n   1.3.6.1.2.1.4.23 up to but not including 1.3.6.1.2.1.5       \
    \ (by S2)\n       - If r.region (R1) overlaps one or more currently registered\n\
    \         regions, then for each overlapped region (R2) split R1 into 3\n    \
    \     new ranges (R1a, R1b, R1c) such that R1b is an exact\n         duplicate\
    \ of R2.  Add R1b and R2 into the lexicographically\n         ordered set of regions.\
    \  Apply (5) above iteratively to R1a and\n         R1c (since they may overlap,\
    \ or be subtrees of, other regions).\n         For instance, given the currently\
    \ registered regions in the\n         example above, if subagent S3 now registers\
    \ mib-2 (R1 is\n         1.3.6.1.2.1) the resulting set of regions would be:\n\
    \   1.3.6.1.2.1      up to but not including 1.3.6.1.2.1.4        (by S3)\n  \
    \ 1.3.6.1.2.1.4    up to but not including 1.3.6.1.2.1.4.22     (by S2)\n   1.3.6.1.2.1.4\
    \    up to but not including 1.3.6.1.2.1.4.22     (by S3)\n   1.3.6.1.2.1.4.22\
    \ up to but not including 1.3.6.1.2.1.4.23     (by S2)\n   1.3.6.1.2.1.4.22 up\
    \ to but not including 1.3.6.1.2.1.4.23     (by S1)\n   1.3.6.1.2.1.4.22 up to\
    \ but not including 1.3.6.1.2.1.4.23     (by S3)\n   1.3.6.1.2.1.4.23 up to but\
    \ not including 1.3.6.1.2.1.5        (by S2)\n   1.3.6.1.2.1.4.23 up to but not\
    \ including 1.3.6.1.2.1.5        (by S3)\n   1.3.6.1.2.1.5    up to but not including\
    \ 1.3.6.1.2.2          (by S3)\n   Note that at registration time a region may\
    \ be split into multiple\n   OID ranges due to pre-existing registrations, or\
    \ as a result of any\n   subsequent registration.  This region splitting is transparent\
    \ to\n   subagents.  Hence the master agent must always be able to associate\n\
    \   any OID range with the information contained in its original agentx-\n   Register-PDU.\n"
- title: 7.1.5.1.  Handling Duplicate OID Ranges
  contents:
  - "7.1.5.1.  Handling Duplicate OID Ranges\n   As a result of this registration\
    \ algorithm there are likely to be\n   duplicate OID ranges (regions of identical\
    \ MIB objects registered to\n   different subagents) in the master agent's registered\
    \ OID space.\n   Whenever the master agent's dispatching algorithm (see 7.2.1,\n\
    \   Dispatching AgentX PDUs) results in  a duplicate OID range, the\n   master\
    \ agent selects one to use, termed the 'authoritative region',\n   as follows:\n\
    \      1) Choose the one whose original agentx-Register-PDU\n         r.region\
    \ contained the most subids, i.e., the most specific\n         r.region.  Note:\
    \ The presence or absence of a range subid has\n         no bearing on how \"\
    specific\" one object identifier is compared\n         to another.\n      2) If\
    \ still ambiguous, there were duplicate regions.  Choose the\n         one whose\
    \ original agentx-Register-PDU specified the smaller\n         value of r.priority.\n"
- title: 7.1.6.  Processing the agentx-Unregister-PDU
  contents:
  - "7.1.6.  Processing the agentx-Unregister-PDU\n   1) An agentx-Response-PDU is\
    \ created and res.sysUpTime is set to\n      the value of sysUpTime.0 for the\
    \ default context.\n   2) If h.sessionID does not correspond to a currently\n\
    \      established session with this subagent, the agentx-Response-PDU is\n  \
    \    sent in reply with res.error set to `notOpen'.\n   3) If the NON_DEFAULT_CONTEXT\
    \ bit is set, and the master agent\n      supports only a default context, the\
    \ agentx-Response-PDU is\n      returned with res.error set to `unsupportedContext',\
    \ and the\n      requested unregistration fails.  Otherwise:  The value of\n \
    \     res.sysUpTime is set to the value of sysUpTime.0 for the indicated\n   \
    \   context.\n   4) If u.region, u.priority, and the indicated context do not\
    \ match\n      an existing registration made during this session, the agentx-\n\
    \      Response-PDU is returned with res.error set to\n      `unknownRegistration'.\n\
    \   5) Otherwise, the agentx-Response-PDU is sent in reply with res.error\n  \
    \    set to `noError', and the previous registration is removed:\n      - The\
    \ master agent removes u.region from its registered OID space\n        within\
    \ the indicated context.  If the original region had been\n        split, all\
    \ such related regions are removed.\n        For instance, given the example registry\
    \ above, if subagent S2\n        unregisters \"ip\", the resulting registry would\
    \ be:\n   1.3.6.1.2.1      up to but not including 1.3.6.1.2.1.4        (by S3)\n\
    \   1.3.6.1.2.1.4    up to but not including 1.3.6.1.2.1.4.22     (by S3)\n  \
    \ 1.3.6.1.2.1.4.22 up to but not including 1.3.6.1.2.1.4.23     (by S1)\n   1.3.6.1.2.1.4.22\
    \ up to but not including 1.3.6.1.2.1.4.23     (by S3)\n   1.3.6.1.2.1.4.23 up\
    \ to but not including 1.3.6.1.2.1.5        (by S3)\n   1.3.6.1.2.1.5    up to\
    \ but not including 1.3.6.1.2.2          (by S3)\n"
- title: 7.1.7.  Processing the agentx-AddAgentCaps-PDU
  contents:
  - "7.1.7.  Processing the agentx-AddAgentCaps-PDU\n   When the master agent receives\
    \ an agentx-AddAgentCaps-PDU, it\n   processes it as follows:\n   1) An agentx-Response-PDU\
    \ is created and res.sysUpTime is set to\n      the value of sysUpTime.0 for the\
    \ default context.\n   2) If h.sessionID does not correspond to a currently\n\
    \      established session with this subagent, the agentx-Response-PDU is\n  \
    \    sent in reply with res.error set to `notOpen'.\n   3) If the NON_DEFAULT_CONTEXT\
    \ bit is set, and the master agent\n      supports only a default context, the\
    \ agentx-Response-PDU is\n      returned with res.error set to `unsupportedContext',\
    \ and the\n      requested operation fails.  Otherwise:  The value of res.sysUpTime\n\
    \      is set to the value of sysUpTime.0 for the indicated context.\n   4) Otherwise,\
    \ the master agent adds the subagent's capabilities\n      information to the\
    \ sysORTable for the indicated context.  An\n      agentx-Response-PDU is sent\
    \ in reply with res.error set to\n      `noError'.\n"
- title: 7.1.8.  Processing the agentx-RemoveAgentCaps-PDU
  contents:
  - "7.1.8.  Processing the agentx-RemoveAgentCaps-PDU\n   1) An agentx-Response-PDU\
    \ is created and res.sysUpTime is set to\n      the value of sysUpTime.0 for the\
    \ default context.\n   2) If h.sessionID does not correspond to a currently\n\
    \      established session with this subagent, the agentx-Response-PDU is\n  \
    \    sent in reply with res.error set to `notOpen'.\n   3) If the NON_DEFAULT_CONTEXT\
    \ bit is set, and the master agent\n      supports only a default context, the\
    \ agentx-Response-PDU is\n      returned with res.error set to `unsupportedContext',\
    \ and the\n      requested operation fails.  Otherwise:  The value of res.sysUpTime\n\
    \      is set to the value of sysUpTime.0 for the indicated context.\n   4) If\
    \ the combination of a.id and the optional a.context does not\n      represent\
    \ a sysORTable entry that was added by this subagent,\n      during this session,\
    \ the agentx-Response-PDU is returned with\n      res.error set to `unknownAgentCaps'.\n\
    \   5) Otherwise the master agent deletes the corresponding sysORTable\n     \
    \ entry and sends in reply the agentx-Response-PDU, with res.error\n      set\
    \ to `noError'.\n"
- title: 7.1.9.  Processing the agentx-Close-PDU
  contents:
  - "7.1.9.  Processing the agentx-Close-PDU\n   When the master agent receives an\
    \ agentx-Close-PDU, it processes it\n   as follows:\n   1) An agentx-Response-PDU\
    \ is created and res.sysUpTime is set to\n      the value of sysUpTime.0 for the\
    \ default context.\n   2) If h.sessionID does not correspond to a currently\n\
    \      established session with this subagent, the agentx-Response-PDU is\n  \
    \    sent in reply with res.error set to `notOpen'.\n   3) Otherwise, the master\
    \ agent closes the AgentX session\n      as described below.  No agentx-Response-PDU\
    \ is sent.\n      - All MIB regions that have been registered during this session\n\
    \        are unregistered, as described in 7.1.6.\n      - All index values allocated\
    \ during this session are freed, as\n        described in section 7.1.4.\n   \
    \   - All sysORID values that were registered during this session\n        are\
    \ removed, as described in section 7.1.8.\n   The master agent does not maintain\
    \ state for closed sessions.  If a\n   subagent wishes to re-establish a session\
    \ after receiving an agentx-\n   Close-PDU, it needs to re-register MIB regions,\
    \ agent capabilities,\n   etc.\n"
- title: 7.1.10.  Detecting Connection Loss
  contents:
  - "7.1.10.  Detecting Connection Loss\n   If a master agent is able to detect (from\
    \ the underlying transport)\n   that a subagent cannot receive AgentX PDUs, it\
    \ should close all\n   affected AgentX sessions as described in 7.1.9, step 3).\n"
- title: 7.1.11.  Processing the agentx-Notify-PDU
  contents:
  - "7.1.11.  Processing the agentx-Notify-PDU\n   A subagent sending SNMPv1 trap\
    \ information must map this into\n   (minimally) a value of snmpTrapOID.0, as\
    \ described in 3.1.2 of RFC\n   1908 [8].\n   The master agent processes the agentx-Notify-PDU\
    \ as follows:\n   1) If h.sessionID does not correspond to a currently\n     \
    \    established session with this subagent, an agentx-Response-PDU\n        \
    \ is sent in reply with res.error set to `notOpen', and\n         res.sysUpTime\
    \ set to the value of sysUpTime.0 for the indicated\n         context.\n   2)\
    \ The VarBindList is parsed.  If it does not contain a value for\n         sysUpTime.0,\
    \ the master agent supplies the current value of\n         sysUpTime.0 for the\
    \ indicated context.  If the next VarBind\n         (either the first or second\
    \ VarBind; see section 6.2.10.1) is\n         not snmpTrapOID.0, the master agent\
    \ ceases further processing\n         of the notification.\n   3) Notifications\
    \ are sent according to the implementation-specific\n         configuration of\
    \ the master agent.\n         If SNMPv1 Trap PDUs are generated, the recommended\
    \ mapping is\n         as described in RFC 2089 [9].\n         Except in the case\
    \ of a `notOpen' error as described in (1)\n         above, no agentx-Response-PDU\
    \ is sent to the subagent when the\n         master agent finishes processing\
    \ the notification.\n"
- title: 7.1.12.  Processing the agentx-Ping-PDU
  contents:
  - "7.1.12.  Processing the agentx-Ping-PDU\n   When the master agent receives an\
    \ agentx-Ping-PDU, it processes it as\n   follows:\n   1) An agentx-Response-PDU\
    \ is created and res.sysUpTime is set to\n      the value of sysUpTime.0 for the\
    \ default context.\n   2) If h.sessionID does not correspond to a currently\n\
    \      established session with this subagent, the agentx-Response-PDU is\n  \
    \    sent in reply with res.error set to `notOpen'.\n   3) If the NON_DEFAULT_CONTEXT\
    \ bit is set, and the master agent\n      supports only a default context, the\
    \ agentx-Response-PDU is\n      returned with res.error set to `unsupportedContext'.\
    \  Otherwise:\n      The value of res.sysUpTime is set to the value of sysUpTime.0\
    \ for\n      the indicated context.\n   4) The agentx-Response-PDU is sent, with\
    \ res.error set to\n      `noError'.\n   If a subagent does not receive a response\
    \ to its pings, or if it is\n   able to detect (from the underlying transport)\
    \ that the master agent\n   is not able to receive AgentX messages, then it eventually\
    \ must\n   initiate a new AgentX session, re-register its regions, etc.\n"
- title: 7.2.  Processing Received SNMP Protocol Messages
  contents:
  - "7.2.  Processing Received SNMP Protocol Messages\n   When an SNMP GetRequest,\
    \ GetNextRequest, GetBulkRequest, or\n   SetRequest protocol message is received\
    \ by the master agent, the\n   master agent applies its access control policy.\n\
    \   In particular, for SNMPv1 or SNMPv2c PDUs, the master agent applies\n   the\
    \ Elements of Procedure defined in section 4.1 of RFC 1157 [6] that\n   apply\
    \ to receiving entities.  (For other versions of SNMP, the master\n   agent applies\
    \ the access control policy defined in the Elements of\n   Procedure for those\
    \ versions.)\n   In the SNMPv1 or v2c frameworks, the master agent uses the community\n\
    \   string as an index into a local repository of configuration\n   information\
    \ that may include community profiles or more complex\n   context information.\n\
    \   If application of the access control policy results in a valid SNMP\n   request\
    \ PDU, then an SNMP Response-PDU is constructed from\n   information gathered\
    \ in the exchange of AgentX PDUs between the\n   master agent and one or more\
    \ subagents.  Upon receipt and initial\n   validation of an SNMP request PDU,\
    \ a master agent uses the procedures\n   described below to dispatch AgentX PDUs\
    \ to the proper subagents,\n   marshal the subagent responses, and construct an\
    \ SNMP response PDU.\n"
- title: 7.2.1.  Dispatching AgentX PDUs
  contents:
  - "7.2.1.  Dispatching AgentX PDUs\n   Upon receipt and initial validation of an\
    \ SNMP request PDU, a master\n   agent uses the procedures described below to\
    \ dispatch AgentX PDUs to\n   the proper subagents.\n   Note: In the following\
    \ procedures, an object identifier is said to be\n   \"contained\" within an OID\
    \ range when both of the following are true:\n       - The object identifier does\
    \ not lexicographically precede\n         the range.\n       - The object identifier\
    \ lexicographically precedes the end\n         of the range.\n   General Rules\
    \ of Procedure\n   While processing a particular SNMP request, the master agent\
    \ may send\n   one or more AgentX PDUs to one or more subagents.  The following\n\
    \   rules of procedure apply in general to the AgentX master agent. PDU-\n   specific\
    \ rules are listed in the applicable sections.\n   1) Honoring the registry\n\
    \      Because AgentX supports overlapping registrations, it is possible\n   \
    \   for the master agent to obtain a value for a requested varbind\n      from\
    \ within multiple registered MIB regions.\n      The master agent must ensure\
    \ that the value (or exception)\n      actually returned in the SNMP response\
    \ PDU is taken from the\n      authoritative region (as defined in section 7.1.5.1).\n\
    \   2) GetNext and GetBulk Processing\n      The master agent may choose to send\
    \ agentx-Get-PDUs while\n      servicing an SNMP GetNextRequest-PDU.  The master\
    \ agent may choose\n      to send agentx-Get-PDUs or agentx-GetNext-PDUs while\
    \ servicing an\n      SNMP GetBulkRequest-PDU.  One possible reason for this would\
    \ be if\n      the current iteration has targeted instance-level registrations.\n\
    \      The master agent may choose to \"scope\" the possible instances\n     \
    \ returned by a subagent by specifying an ending OID in the\n      SearchRange.\
    \  If such scoping is used, typically the ending OID\n      would be the first\
    \ lexicographical successor to the target OID\n      range that was registered\
    \ by a subagent other than the target\n      subagent.  Regardless of this choice,\
    \ rule (1) must be obeyed.\n      The master agent may require multiple request-response\
    \ iterations\n      on the same subagent session, to determine the final value\
    \ of all\n      requested variables.\n      All AgentX PDUs sent on the session\
    \ while processing a given SNMP\n      request must contain identical values of\
    \ transactionID.  Each\n      different SNMP request processed by the master agent\
    \ must present\n      a unique value of transactionID (within the limits of the\
    \ 32-bit\n      field) to the session.\n   3) Number and order of variables sent\
    \ per AgentX PDU\n      For Get/GetNext/GetBulk operations, at any stage of the\
    \ possibly\n      iterative process, the master agent may need to dispatch several\n\
    \      SearchRanges to a particular subagent session.  The master agent\n    \
    \  may send one, some, or all of the SearchRanges in a single AgentX\n      PDU.\n\
    \      The master agent must ensure that the correct contents and\n      ordering\
    \ of the VarBindList in the SNMP Response-PDU are\n      maintained.\n      The\
    \ following rules govern the number of VarBinds in a given\n      AgentX PDU:\n\
    \         a) The subagent must support processing of AgentX PDUs\n           \
    \ with multiple VarBinds.\n         b) When processing an SNMP Set request, the\
    \ master agent\n            must send all of the VarBinds applicable to a particular\n\
    \            subagent session in a single Test/Set transaction.\n         c) When\
    \ processing an SNMP Get, GetNext, or GetBulk request,\n            the master\
    \ agent may send a single AgentX PDU to the\n            subagent with all applicable\
    \ VarBinds, or multiple PDUs with\n            single VarBinds, or something in\
    \ between those extremes. The\n            determination of which method to use\
    \ in a particular case is\n            implementation-specific.\n   4) Timeout\
    \ Values\n      The master agent chooses a timeout value for each MIB region being\n\
    \      queried, which is\n         a) the value specified during registration\
    \ of the MIB region,\n            if it was non-zero\n         b) otherwise, the\
    \ value specified during establishment of\n            the session in which this\
    \ region was subsequently\n            registered, if that value was non-zero.\n\
    \         c) otherwise, the master agent's default value\n      When an AgentX\
    \ PDU that references multiple MIB regions is\n      dispatched, the timeout value\
    \ used for the PDU is the maximum\n      value of the timeouts so determined for\
    \ each of the referenced MIB\n      regions.\n   5) Context\n      If the master\
    \ agent has determined that a specific non-default\n      context is associated\
    \ with the SNMP request PDU, that context is\n      encoded into the AgentX PDU's\
    \ context field and the\n      NON_DEFAULT_CONTEXT bit is set in h.flags.\n  \
    \    Otherwise, no context Octet String is added to the PDU, and the\n      NON_DEFAULT_CONTEXT\
    \ bit is cleared.\n"
- title: 7.2.1.1.  agentx-Get-PDU
  contents:
  - "7.2.1.1.  agentx-Get-PDU\n   Each variable binding in the SNMP request PDU is\
    \ processed as\n   follows:\n   (1) Identify the target OID range.\n       Within\
    \ a lexicographically ordered set of OID ranges, valid for\n       the indicated\
    \ context, locate the authoritative region that\n       contains the binding's\
    \ name.\n   (2) If no such OID range exists, the variable binding is not\n   \
    \    processed further, and its value is set to `noSuchObject'.\n   (3) Identify\
    \ the subagent session in which this region was\n       registered, termed the\
    \ target session.\n   (4) If this is the first variable binding to be dispatched\
    \ over\n       the target session in a request-response exchange entailed in the\n\
    \       processing of this management request:\n       - Create an agentx-Get-PDU\
    \ for this session, with the header\n         fields initialized as described\
    \ above (see 6.1 AgentX PDU\n         Header).\n   (5) Add a SearchRange to the\
    \ end of the target session's PDU\n       for this variable binding.\n       -\
    \ The variable binding's name is encoded into the starting OID.\n       - The\
    \ ending OID is encoded as null.\n"
- title: 7.2.1.2.  agentx-GetNext-PDU
  contents:
  - "7.2.1.2.  agentx-GetNext-PDU\n   Each variable binding in the SNMP request PDU\
    \ is processed as\n   follows:\n   (1) Identify the target OID range.\n      \
    \ Within a lexicographically ordered set of OID ranges, valid for\n       the\
    \ indicated context, locate\n        a) the authoritative OID range that contains\
    \ the variable\n           binding's name and is not a fully qualified instance,\
    \ or\n        b) the authoritative OID range that is the first\n           lexicographical\
    \ successor to the variable binding's name.\n   (2) If no such OID range exists,\
    \ the variable binding is not\n       processed further, and its value is set\
    \ to `endOfMibView'.\n   (3) Identify the subagent session in which this region\
    \ was\n       registered, termed the target session.\n   (4) If this is the first\
    \ variable binding to be dispatched over the\n       target session in a request-response\
    \ exchange entailed in the\n       processing of this management request:\n  \
    \     - Create an agentx-GetNext-PDU for the session, with\n         the header\
    \ fields initialized as described above (see 6.1\n         AgentX PDU Header).\n\
    \   (5) Add a SearchRange to the end of the target session's\n       agentx-GetNext-PDU\
    \ for this variable binding.\n        - if (1a) applies, the variable binding's\
    \ name is encoded\n          into the starting OID, and the OID's \"include\"\
    \ field is set to\n          0.\n        - if (1b) applies, the target OID is\
    \ encoded into the starting\n          OID, and its \"include\" field is set to\
    \ 1.\n"
- title: 7.2.1.3.  agentx-GetBulk-PDU
  contents:
  - "7.2.1.3.  agentx-GetBulk-PDU\n   (Note: The outline of the following procedure\
    \ is based closely on\n   section 4.2.3, \"The GetBulkRequest-PDU\" of RFC 1905\
    \ [4].  Please\n   refer to it for details on the format of the SNMP GetBulkRequest-PDU\n\
    \   itself.)\n   Each variable binding in the request PDU is processed as follows:\n\
    \   (1) Identify the authoritative target OID range and target session,\n    \
    \   exactly as described for the agentx-GetNext-PDU (see 7.2.1.2).\n   (2) If\
    \ this is the first variable binding to be dispatched over the\n       target\
    \ session in a request-response exchange entailed in the\n       processing of\
    \ this management request:\n       - Create an agentx-GetBulk-PDU for the session,\
    \ with\n         the header fields initialized as described above (see 6.1\n \
    \        AgentX PDU Header).\n   (3) Add a SearchRange to the end of the target\
    \ session's\n       agentx-GetBulk-PDU for this variable binding, as described\
    \ for\n       the agentx-GetNext-PDU.  If the variable binding was a non-\n  \
    \     repeater in the original request PDU, it must be a non-repeater\n      \
    \ in the agentx-GetBulk-PDU.\n   The value of g.max_repetitions in the agentx-GetBulk-PDU\
    \ may be less\n   than (but not greater than) the value in the original request\
    \ PDU.\n   The master agent may make such alterations due to simple sanity\n \
    \  checking, optimizations for the current iteration based on the\n   registry,\
    \ the maximum possible size of a potential Response-PDU,\n   known constraints\
    \ of the AgentX transport, or any other\n   implementation-specific constraint.\n"
- title: 7.2.1.4.  agentx-TestSet-PDU
  contents:
  - "7.2.1.4.  agentx-TestSet-PDU\n   AgentX employs test-commit-undo-cleanup phases\
    \ to achieve \"as if\n   simultaneous\" semantics of the SNMP SetRequest-PDU within\
    \ the\n   extensible agent.  The initial phase involves the agentx-TestSet-PDU.\n\
    \   Each variable binding in the SNMP request PDU is processed in order,\n   as\
    \ follows:\n   (1) Identify the target OID range.\n       Within a lexicographically\
    \ ordered set of OID ranges, valid for\n       the indicated context, locate the\
    \ authoritative range that\n       contains the variable binding's name.\n   (2)\
    \ If no such OID range exists, this variable binding fails with an\n       error\
    \ of `notWritable'.  Processing is complete for this request.\n   (3) Identify\
    \ the single subagent responsible for this OID range,\n       termed the target\
    \ subagent, and the applicable session, termed\n       the target session.\n \
    \  (4) If this is the first variable binding to be dispatched over\n       the\
    \ target session in a request-response exchange entailed in the\n       processing\
    \ of this management request:\n       - create an agentx-TestSet-PDU for the session,\
    \ with the\n         header fields initialized as described above (see 6.1 AgentX\n\
    \         PDU Header).\n   (5) Add a VarBind to the end of the target session's\
    \ PDU\n       for this variable binding, as described in section 5.4.\n    Note\
    \ that all VarBinds applicable to a given session must be sent in\n    a single\
    \ agentx-TestSet-PDU.\n"
- title: 7.2.1.5.  Dispatch
  contents:
  - "7.2.1.5.  Dispatch\n   A timeout value is calculated for each PDU to be sent,\
    \ which is the\n   maximum value of the timeouts determined for each of the PDU's\n\
    \   SearchRanges (as described above in 7.2.1 Dispatching AgentX PDUs,\n   item\
    \ 4). Each pending PDU is mapped (via its h.sessionID value) to a\n   particular\
    \ transport domain/endpoint, as described in section 8\n   (Transport Mappings).\n"
- title: 7.2.2.  Subagent Processing of agentx-Get, GetNext, GetBulk-PDUs
  contents:
  - "7.2.2.  Subagent Processing of agentx-Get, GetNext, GetBulk-PDUs\n   A conformant\
    \ AgentX subagent must support the agentx-Get, -GetNext,\n   and -GetBulk PDUs,\
    \ and must support multiple variables being supplied\n   in each PDU.\n   When\
    \ a subagent receives an agentx-Get-, GetNext-, or GetBulk-PDU, it\n   performs\
    \ the indicated management operations and returns an agentx-\n   Response-PDU.\n\
    \   The agentx-Response-PDU header fields are identical to the received\n   request\
    \ PDU except that, at the start of processing, the subagent\n   initializes h.type\
    \ to Response, res.error to `noError', res.index to\n   0, and the VarBindList\
    \ to null.\n   Each SearchRange in the request PDU's SearchRangeList is processed\
    \ as\n   described below, and a VarBind is added in the corresponding location\n\
    \   of the agentx-Response-PDU's  VarbindList.  If processing should fail\n  \
    \ for any reason not described below, res.error is set to `genErr',\n   res.index\
    \ to the index of the failed SearchRange, the VarBindList is\n   reset to null,\
    \ and this agentx-Response-PDU is returned to the master\n   agent.\n"
- title: 7.2.2.1.  Subagent Processing of the agentx-Get-PDU
  contents:
  - "7.2.2.1.  Subagent Processing of the agentx-Get-PDU\n   Upon the subagent's receipt\
    \ of an agentx-Get-PDU, each SearchRange in\n   the request is processed as follows:\n\
    \   (1) The starting OID is copied to v.name.\n   (2) If the starting OID exactly\
    \ matches the name of a\n       variable instantiated by this subagent within\
    \ the indicated\n       context and session, v.type and v.data are encoded to\
    \ represent\n       the variable's syntax and value, as described in section 5.4,\n\
    \       Value Representation.\n   (3) Otherwise, if the starting OID does not\
    \ match the object\n       identifier prefix of any variable instantiated within\
    \ the\n       indicated context and session, the VarBind is set to\n       `noSuchObject',\
    \ in the manner described in section 5.4, Value\n       Representation.\n   (4)\
    \ Otherwise, the VarBind is set to `noSuchInstance'\n       in the manner described\
    \ in section 5.4, Value Representation.\n"
- title: 7.2.2.2.  Subagent Processing of the agentx-GetNext-PDU
  contents:
  - "7.2.2.2.  Subagent Processing of the agentx-GetNext-PDU\n   Upon the subagent's\
    \ receipt of an agentx-GetNext-PDU, each\n   SearchRange in the request is processed\
    \ as follows:\n   (1) The subagent searches for a variable within the\n      \
    \ lexicographically ordered list of variable names for all\n       variables it\
    \ instantiates (without regard to registration of\n       regions) within the\
    \ indicated context and session, for which the\n       following are all true:\n\
    \       - if the \"include\" field of the starting OID is 0, the\n         variable's\
    \ name is the closest lexicographical successor to the\n         starting OID.\n\
    \       - if the \"include\" field of the starting OID is 1, the\n         variable's\
    \ name is either equal to, or the closest\n         lexicographical successor\
    \ to, the starting OID.\n       - If the ending OID is not null, the variable's\
    \ name\n         lexicographically precedes the ending OID.\n       If all of\
    \ these conditions are met, v.name is set to the located\n       variable's name.\
    \  v.type and v.data are encoded to represent the\n       variable's syntax and\
    \ value, as described in section 5.4, Value\n       Representation.\n   (2) If\
    \ no such variable exists, v.name is set to the starting OID,\n       and the\
    \ VarBind is set to `endOfMibView', in the manner described\n       in section\
    \ 5.4, Value Representation.\n"
- title: 7.2.2.3.  Subagent Processing of the agentx-GetBulk-PDU
  contents:
  - "7.2.2.3.  Subagent Processing of the agentx-GetBulk-PDU\n   A maximum of N +\
    \ (M * R) VarBinds are returned, where\n      N equals g.non_repeaters,\n    \
    \  M equals g.max_repetitions, and\n      R is (number of SearchRanges in the\
    \ GetBulk request) - N.\n   The first N SearchRanges are processed exactly as\
    \ for the agentx-\n   GetNext-PDU.\n   If M and R are both non-zero, the remaining\
    \ R SearchRanges are\n   processed iteratively to produce potentially many VarBinds.\
    \  For each\n   iteration i, such that i is greater than zero and less than or\
    \ equal\n   to M, and for each repeated SearchRange s, such that s is greater\n\
    \   than zero and less than or equal to R, the (N+((i-1)*R)+s)-th VarBind\n  \
    \ is added to the agentx-Response-PDU as follows:\n      1) The subagent searches\
    \ for a variable within the\n         lexicographically ordered list of variable\
    \ names for all\n         variables it instantiates (without regard to registration\
    \ of\n         regions) within the indicated context and session, for which\n\
    \         the following are all true:\n          - The variable's name is the\
    \ (i)-th lexicographical successor\n            to the (N+s)-th requested OID.\n\
    \            (Note that if i is 0 and the \"include\" field is 1, the\n      \
    \      variable's name may be equivalent to, or the first\n            lexicographical\
    \ successor to, the (N+s)-th requested OID.)\n          - If the ending OID is\
    \ not null, the variable's name\n            lexicographically precedes the ending\
    \ OID.\n         If all of these conditions are met, v.name is set to the\n  \
    \       located variable's name.  v.type and v.data are encoded to\n         represent\
    \ the variable's syntax and value, as described in\n         section 5.4, Value\
    \ Representation.\n      2) If no such variable exists, the VarBind is set to\n\
    \         `endOfMibView' as described in section 5.4, Value\n         Representation.\
    \  v.name is set to v.name of the (N+((i-\n         2)*R)+s)-th VarBind unless\
    \ i is currently 1, in which case it\n         is set to the value of the starting\
    \ OID in the (N+s)-th\n         SearchRange.\n   Note that further iterative processing\
    \ should stop if\n        - For any iteration i, all s values of v.type are\n\
    \          `endOfMibView'.\n        - An AgentX transport constraint or other\n\
    \          implementation-specific constraint is reached.\n"
- title: 7.2.3.  Subagent Processing of agentx-TestSet, -CommitSet, -UndoSet,
  contents:
  - "7.2.3.  Subagent Processing of agentx-TestSet, -CommitSet, -UndoSet,\n      \
    \            -CleanupSet-PDUs\n   A conformant AgentX subagent must support the\
    \ agentx-TestSet,\n   -CommitSet, -UndoSet, and -CleanupSet PDUs, and must support\
    \ multiple\n   variables being supplied in each PDU.\n   These four PDUs are used\
    \ to collectively perform the indicated\n   management operation.  An agentx-Response-PDU\
    \ is sent in reply to\n   each of the PDUs, to inform the master agent of the\
    \ state of the\n   operation.\n   The agentx-Response-PDU header fields are identical\
    \ to the received\n   request PDU except that, at the start of processing, the\
    \ subagent\n   initializes h.type to Response, res.error to `noError', and res.index\n\
    \   to 0.\n   These Response-PDUs do not contain a VarBindList.\n"
- title: 7.2.3.1.  Subagent Processing of the agentx-TestSet-PDU
  contents:
  - "7.2.3.1.  Subagent Processing of the agentx-TestSet-PDU\n   Upon the subagent's\
    \ receipt of an agentx-TestSet-PDU, each VarBind in\n   the PDU is validated until\
    \ they are all successful, or until one\n   fails, as described in section 4.2.5\
    \ of RFC 1905 [4]. The subagent\n   validates variables with respect to the context\
    \ and session indicated\n   in the testSet-PDU.\n   If each VarBind is successful,\
    \ the subagent has a further\n   responsibility to ensure the availability of\
    \ all resources (memory,\n   write access, etc.) required for successfully carrying\
    \ out a\n   subsequent agentx-CommitSet operation.  If this cannot be guaranteed,\n\
    \   the subagent should set res.error to `resourceUnavailable'.\n   As a result\
    \ of this validation step, an agentx-Response-PDU is sent\n   in reply whose res.error\
    \ field is set to one of the following (SNMPv2\n   SMI) values:\n            noError\
    \                    (0),\n            genErr                     (5),\n     \
    \       noAccess                   (6),\n            wrongType               \
    \   (7),\n            wrongLength                (8),\n            wrongEncoding\
    \              (9),\n            wrongValue                (10),\n           \
    \ noCreation                (11),\n            inconsistentValue         (12),\n\
    \            resourceUnavailable       (13),\n            notWritable        \
    \       (17),\n            inconsistentName          (18)\n   If this value is\
    \ not `noError', the res.index field must be set to\n   the index of the VarBind\
    \ for which validation failed.\n   Implementation of rigorous validation code\
    \ may be one of the most\n   demanding aspects of subagent development.  Implementors\
    \ are strongly\n   encouraged to do this right, so as to avoid if at all possible\
    \ the\n   extensible agent's having to return `commitFailed' or `undoFailed'\n\
    \   during subsequent processing.\n"
- title: 7.2.3.2.  Subagent Processing of the agentx-CommitSet-PDU
  contents:
  - "7.2.3.2.  Subagent Processing of the agentx-CommitSet-PDU\n   The agentx-CommitSet-PDU\
    \ indicates that the subagent should actually\n   perform (as described in the\
    \ post-validation sections of 4.2.5 of RFC\n   1905 [4]) the management operation\
    \ indicated by the previous\n   TestSet-PDU.  After carrying out the management\
    \ operation, the\n   subagent sends in reply an agentx-Response-PDU whose res.error\
    \ field\n   is set to one of the following (SNMPv2 SMI) values:\n            noError\
    \                    (0),\n            commitFailed              (14)\n   If this\
    \ value is `commitFailed', the res.index field must be set to\n   the index of\
    \ the VarBind for which the operation failed.  Otherwise\n   res.index is set\
    \ to 0.\n"
- title: 7.2.3.3.  Subagent Processing of the agentx-UndoSet-PDU
  contents:
  - "7.2.3.3.  Subagent Processing of the agentx-UndoSet-PDU\n   The agentx-UndoSet-PDU\
    \ indicates that the subagent should undo the\n   management operation requested\
    \ in a preceding CommitSet-PDU.  The\n   undo process is as described in section\
    \ 4.2.5 of RFC 1905 [4].\n   After carrying out the undo process, the subagent\
    \ sends in reply an\n   agentx-Response-PDU whose res.index field is set to 0,\
    \ and whose\n   res.error field is set to one of the following (SNMPv2 SMI) values:\n\
    \            noError                    (0),\n            undoFailed         \
    \       (15)\n   If this value is `undoFailed', the res.index field must be set\
    \ to the\n   index of the VarBind for which the operation failed.  Otherwise\n\
    \   res.index is set to 0.\n   This PDU also signals the end of processing of\
    \ the management\n   operation initiated by the previous TestSet-PDU.  The subagent\
    \ should\n   release resources, etc. as described in section 7.2.3.4.\n"
- title: 7.2.3.4.  Subagent Processing of the agentx-CleanupSet-PDU
  contents:
  - "7.2.3.4.  Subagent Processing of the agentx-CleanupSet-PDU\n   The agentx-CleanupSet-PDU\
    \ signals the end of processing of the\n   management operation requested in the\
    \ previous TestSet-PDU.  This is\n   an indication to the subagent that it may\
    \ now release any resources\n   it may have reserved in order to carry out the\
    \ management request.\n   No response is sent by the subagent.\n"
- title: 7.2.4.  Master Agent Processing of AgentX Responses
  contents:
  - "7.2.4.  Master Agent Processing of AgentX Responses\n   The master agent now\
    \ marshals all subagent AgentX response PDUs and\n   builds an SNMP response PDU.\
    \  In the next several subsections, the\n   initial processing of all subagent\
    \ AgentX response PDUs is described,\n   followed by descriptions of subsequent\
    \ processing for each specific\n   subagent Response.\n"
- title: 7.2.4.1.  Common Processing of All AgentX Response PDUs
  contents:
  - "7.2.4.1.  Common Processing of All AgentX Response PDUs\n   1) If a subagent\
    \ does not respond within the timeout interval for\n      this dispatch, it is\
    \ treated as if the subagent had returned\n      `genErr' and processed as described\
    \ below.\n      A timeout may be due to a variety of reasons, and does not\n \
    \     necessarily denote a failed or malfunctioning subagent.  As such,\n    \
    \  the master agent's response to a subagent timeout is\n      implementation-specific,\
    \ but with the following constraint:\n         A subagent that times out on three\
    \ consecutive requests is\n         considered unable to respond, and the master\
    \ agent must close\n         the AgentX session as described in 7.1.9, step (2).\n\
    \   2) Otherwise, the h.packetID, h.sessionID, and h.transactionID\n      fields\
    \ of the AgentX response PDU are used to correlate subagent\n      responses.\
    \  If the response does not pertain to this SNMP\n      operation, it is ignored.\n\
    \   3) Otherwise, the responses are processed jointly to form the SNMP\n     \
    \ response PDU.\n"
- title: 7.2.4.2.  Processing of Responses to agentx-Get-PDUs
  contents:
  - "7.2.4.2.  Processing of Responses to agentx-Get-PDUs\n   After common processing\
    \ of the subagent's response to an agentx-Get-\n   PDU (see 7.2.4.1 above), processing\
    \ continues with the following\n   steps:\n   1)  For any received AgentX response\
    \ PDU, if res.error is not\n       `noError', the SNMP response PDU's error code\
    \ is set to this\n       value, and its error index to the index of the variable\
    \ binding\n       corresponding to the failed VarBind in the subagent's AgentX\n\
    \       response PDU.\n       All other AgentX response PDUs received due to processing\
    \ this\n       SNMP request are ignored.  Processing is complete; the SNMP\n \
    \      Response PDU is ready to be sent (see section 7.2.5, Sending the\n    \
    \   SNMP Response-PDU).\n   2)  Otherwise, the content of each VarBind in the\
    \ AgentX response PDU\n       is used to update the corresponding variable binding\
    \ in the SNMP\n       Response-PDU.\n"
- title: 7.2.4.3.  Processing of Responses to agentx-GetNext-PDU and
  contents:
  - "7.2.4.3.  Processing of Responses to agentx-GetNext-PDU and\n               \
    \  agentx-GetBulk-PDU\n   After common processing of the subagent's response to\
    \ an agentx-\n   GetNext-PDU or agentx-GetBulk-PDU (see 7.2.4.1 above), processing\n\
    \   continues with the following steps:\n   1)  For any received AgentX response\
    \ PDU, if res.error is not\n       `noError', the SNMP response PDU's error code\
    \ is set to this\n       value, and its error index to the index of the VarBind\n\
    \       corresponding to the failed VarBind in the subagent's AgentX\n       response\
    \ PDU.\n       All other AgentX response PDUs received due to processing this\n\
    \       SNMP request are ignored.  Processing is complete; the SNMP\n       response\
    \ PDU is ready to be sent (see section 7.2.5, Sending the\n       SNMP Response\
    \ PDU).\n   2)  Otherwise, the content of each VarBind in the AgentX response\n\
    \       PDU is used to update the corresponding VarBind in the SNMP\n       response\
    \ PDU.\n   After all expected AgentX response PDUs have been processed, if any\n\
    \   VarBinds still contain the value `endOfMibView' in their v.type\n   fields,\
    \ processing must continue:\n   3)  A new iteration of AgentX request dispatching\
    \ is initiated\n       (as described in section 7.2.1.1), in which only those\
    \ VarBinds\n       whose v.type is `endOfMibView' are processed.\n   4)  For each\
    \ such VarBind, a target OID range is identified\n       which is the lexicographical\
    \ successor to the target OID range\n       for this VarBind on the last iteration.\
    \  The target subagent is\n       the one that registered the target OID range.\
    \  The target session\n       is the one in which the target OID range was registered.\n\
    \       If an agentx-GetNext- or GetBulk-PDU is being dispatched, the\n      \
    \ starting OID in the SearchRanges is set to the target OID range,\n       and\
    \ its \"include\" field is set to 1.\n   5)  The value of transactionID must be\
    \ identical to the value\n       used during the previous iteration.\n   6)  The\
    \ AgentX PDUs are sent to the subagent(s), and the responses\n       are received\
    \ and processed according to the steps described in\n       section 7.2.4.\n \
    \  7)  This process continues iteratively until a complete SNMP\n       Response-PDU\
    \ has been built, or until there remain no target OID\n       range lexicographical\
    \ successors.\n"
- title: 7.2.4.4.  Processing of Responses to agentx-TestSet-PDUs
  contents:
  - "7.2.4.4.  Processing of Responses to agentx-TestSet-PDUs\n   After common processing\
    \ of the subagent's response to an agentx-\n   TestSet-PDU (see 7.2.4.1 above),\
    \ processing continues with the\n   further exchange of AgentX PDUs.  The value\
    \ of h.transactionID in the\n   agentx-CommitSet, -UndoSet, and -CleanupSet-PDUs\
    \ must be identical to\n   the value sent in the testSet-PDU.\n   The state transitions\
    \ and PDU sequences are depicted in section 7.3.\n   1)  If any target subagent's\
    \ response is not `noError', all other\n       agentx-Response-PDUs received due\
    \ to processing this SNMP request\n       are ignored.\n       An agentx-CleanupSet-PDU\
    \ is sent to each target subagent that has\n       been sent a agentx-TestSet-PDU.\n\
    \       Processing is complete; the SNMP response PDU is constructed as\n    \
    \   described below in 7.2.4.6.\n   2)  Otherwise an agentx-CommitSet-PDU is sent\
    \ to each target\n       subagent.\n"
- title: 7.2.4.5.  Processing of Responses to agentx-CommitSet-PDUs
  contents:
  - "7.2.4.5.  Processing of Responses to agentx-CommitSet-PDUs\n   After common processing\
    \ of the subagent's response to an agentx-\n   CommitSet-PDU (see 7.2.4.1 above),\
    \ processing continues with the\n   following steps:\n   1)  If any response is\
    \ not `noError', all other\n       agentx-Response-PDUs received due to processing\
    \ this SNMP request\n       are ignored.\n       An agentx-UndoSet-PDU is sent\
    \ to each target subagent that has\n       been sent a agentx-CommitSet-PDU. \
    \ All other subagents are sent a\n       agentx-CleanupSet-PDU.\n   2)  Otherwise\
    \ an agentx-CleanupSet-PDU is sent to each target\n       subagent.  Processing\
    \ is complete; the SNMP response PDU is\n       constructed as described below\
    \ in 7.2.4.6.\n"
- title: 7.2.4.6.  Processing of Responses to agentx-UndoSet-PDUs
  contents:
  - "7.2.4.6.  Processing of Responses to agentx-UndoSet-PDUs\n   After common processing\
    \ of the subagent's response to an agentx-\n   UndoSet-PDU (see 7.2.4.1 above),\
    \ processing continues with the\n   following steps:\n   1)  If any response is\
    \ not `noError' the SNMP response\n       PDU's error code is set to this value,\
    \ and its error index to the\n       index of the VarBind corresponding to the\
    \ failed VarBind in the\n       agentx-TestSet-PDU.\n       Otherwise the SNMP\
    \ response PDU's error code is set to `noError'\n       and its error index to\
    \ 0.\n"
- title: 7.2.5.  Sending the SNMP Response-PDU
  contents:
  - "7.2.5.  Sending the SNMP Response-PDU\n   Once the processing described in sections\
    \ 7.2.1 - 7.2.4 is complete,\n   there is an SNMP response PDU available.  The\
    \ master agent now\n   implements the Elements of Procedure for the applicable\
    \ version of\n   the SNMP protocol in order to encapsulate the PDU into a message,\
    \ and\n   transmit it to the originator of the SNMP management request.  Note\n\
    \   that this may involve altering the PDU contents (for instance, to\n   replace\
    \ the original VarBinds if an error condition is to be\n   returned).\n   The\
    \ response PDU may also be altered in order to support the SNMP\n   version 1\
    \ framework.  In such cases the required mapping is that\n   defined in RFC 2089\
    \ [9].  (Note in particular that the rules for\n   handling Counter64 syntax may\
    \ require re-sending AgentX GetBulk or\n   GetNext PDUs until a VarBind of suitable\
    \ syntax is returned.)\n"
- title: 7.2.6.  MIB Views
  contents:
  - "7.2.6.  MIB Views\n   AgentX subagents are not aware of MIB views, since view\
    \ information\n   is not contained in AgentX PDUs.\n   As stated above, the descriptions\
    \ of procedures in section 7 of this\n   memo are not intended to constrain the\
    \ internal architecture of any\n   conformant implementation.  In particular,\
    \ the master agent\n   procedures described in sections 7.2.1 and 7.2.4 may be\
    \ altered so as\n   to optimize AgentX exchanges when implementing MIB views.\n\
    \   Such optimizations are beyond the scope of this memo.  But note that\n   section\
    \ 7.2.3 defines subagent behavior in such a way that alteration\n   of SearchRanges\
    \ may be used in such optimizations.\n"
- title: 7.3.  State Transitions
  contents:
  - "7.3.  State Transitions\n   State diagrams are presented from the master agent's\
    \ perspective for\n   transport connection and session establishment, and from\
    \ the\n   subagent's perspective for Set transaction processing.\n"
- title: 7.3.1.  Set Transaction States
  contents:
  - "7.3.1.  Set Transaction States\n   The following table presents, from the subagent's\
    \ perspective, the\n   state transitions involved in Set transaction processing:\n\
    \                                       STATE\n            +----------------+--------------+---------+--------+--------\n\
    \            |       A        |      B       |   C     |   D    |   E\n      \
    \      |   (Initial     |    TestOK    | Commit  | Test   | Commit\n         \
    \   |     State)     |              |  OK     | Fail   |  Fail\n            |\
    \                |              |         |        |\n    EVENT   |          \
    \      |              |         |        |\n   ---------+----------------+--------------+---------+--------+--------\n\
    \            | 7.2.3.1        |              |         |        |\n   Receive\
    \  | All varbinds   |              |         |        |\n   TestSet  | OK?   \
    \         |      X       |    X    |   X    |    X\n   PDU      |   Yes ->B  \
    \    |              |         |        |\n            |   No  ->D      |     \
    \         |         |        |\n   ---------+----------------+--------------+---------+--------+--------\n\
    \            |                |  7.2.3.2     |         |        |\n   Receive\
    \  |                |  NoError?    |         |        |\n   Commit-  |       X\
    \        |   Yes ->C    |    X    |   X    |    X\n   Set PDU  |             \
    \   |   No  ->E    |         |        |\n   ---------+----------------+--------------+---------+--------+--------\n\
    \   Receive  |                |              | 7.2.3.3 |        |7.2.4.5\n   UndoSet\
    \  |       X        |       X      | ->done  |   X    | ->done\n   PDU      |\
    \                |              |         |        |\n   ---------+----------------+--------------+---------+--------+--------\n\
    \   Receive  |                |  7.2.4.4     | 7.2.3.4 |7.2.4.4 |\n   Cleanup-\
    \ |       X        |   ->done     | ->done  | ->done |   X\n   Set PDU  |    \
    \            |              |         |        |\n   ---------+----------------+--------------+---------+--------+--------\n\
    \   Session  |                | rollback     | undo    |        |\n   Loss   \
    \  |  ->done        |  ->done      |  ->done | ->done | ->done\n   ---------+----------------+--------------+---------+--------+--------\n\
    \   There are three possible sequences that a subagent may follow for a\n   particular\
    \ set transaction:\n      1) TestSet CommitSet CleanupSet\n      2) TestSet CommitSet\
    \ UndoSet\n      3) TestSet           CleanupSet\n   Note that a single PDU sequence\
    \ may result in multiple paths through\n   the finite state machine (FSM).  For\
    \ example, the sequence\n      TestSet CommitSet UndoSet\n   may walk through\
    \ either of these two state sequences:\n      (initial) TestOK CommitOK   (done)\n\
    \      (initial) TestOK CommitFail (done)\n"
- title: 7.3.2  Transport Connection States
  contents:
  - "7.3.2  Transport Connection States\n   The following table presents, from the\
    \ master agent's perspective,\n   the state transitions involved in transport\
    \ connection setup and\n   teardown:\n                                STATE\n\
    \                   +--------------+--------------\n                   |     \
    \ A       |      B\n                   | No transport |  Transport\n         \
    \          |              |  connected\n                   |              |\n\
    \   EVENT           |              |\n   ----------------+--------------+--------------\n\
    \   Transport       |              |\n   connect         |     ->B      |    \
    \  X\n   indication      |              |\n   ----------------+--------------+--------------\n\
    \   Receive         |              | if duplicate\n   Open-PDU        |      \
    \        | session id,\n                   |              | reject, else\n   \
    \                |      X       | establish\n                   |            \
    \  | session\n                   |              |\n                   |      \
    \        |     ->B\n   ----------------+--------------+--------------\n   Receive\
    \         |              | if matching\n   Response-PDU    |              | session\
    \ id,\n                   |              | feed to that\n                   |\
    \      X       | session's FSM\n                   |              | else ignore\n\
    \                   |              |\n                   |              |    \
    \ ->B\n   ----------------+--------------+--------------\n   Receive other   |\
    \              | if matching\n   PDUs            |              | session id,\n\
    \                   |              | feed to that\n                   |      X\
    \       | session's FSM\n                   |              | else reject\n   \
    \                |              |\n                   |              |     ->B\n\
    \   ----------------+--------------+--------------\n   Transport       |     \
    \         |notify all\n   disconnect      |              |sessions on\n   indication\
    \      |      X       |this transport\n                   |              |\n \
    \                  |              |     ->A\n   ----------------+--------------+--------------\n"
- title: 7.3.3  Session States
  contents:
  - "7.3.3  Session States\n   The following table presents, from the master agent's\
    \ perspective,\n   the state transitions involved in session setup and teardown:\n\
    \                              STATE\n                  +-------------+----------------\n\
    \                  |     A       |      B\n                  |  No session | \
    \ Session\n                  |             |  established\n   EVENT          |\
    \             |\n   ---------------+-------------+----------------\n         \
    \         |  7.1.1      |\n   Receive        |             |      X\n   Open PDU\
    \       |    ->B      |\n   ---------------+-------------+----------------\n \
    \                 |             |  7.1.9\n   Receive        |      X      |\n\
    \   Close PDU      |             |    ->A\n   ---------------+-------------+----------------\n\
    \   Receive        |             |  7.1.5\n   Register PDU   |      X      |\n\
    \                  |             |    ->B\n   ---------------+-------------+----------------\n\
    \   Receive        |             |  7.1.6\n   Unregister     |      X      |\n\
    \   PDU            |             |    ->B\n   ---------------+-------------+----------------\n\
    \   Receive        |             |\n   Get PDU        |             |\n   GetNext\
    \ PDU    |             |\n   GetBulk PDU    |      X      |       X\n   TestSet\
    \ PDU    |             |\n   CommitSet PDU  |             |\n   UndoSet PDU  \
    \  |             |\n   CleanupSet PDU |             |\n   ---------------+-------------+----------------\n\
    \   Receive        |             |  7.1.11\n   Notify PDU     |      X      |\n\
    \                  |             |    ->B\n   ---------------+-------------+----------------\n\
    \   Receive Ping   |             |  7.1.12\n   PDU            |      X      |\n\
    \                  |             |    ->B\n   ---------------+-------------+----------------\n\
    \   (continued next page)\n   ---------------+-------------+----------------\n\
    \   Receive        |             |  7.1.2\n   IndexAllocate  |      X      |\n\
    \   PDU            |             |    ->B\n   ---------------+-------------+----------------\n\
    \   Receive        |             |  7.1.4\n   IndexDeallocate|      X      |\n\
    \   PDU            |             |    ->B\n   ---------------+-------------+----------------\n\
    \   Receive        |             |  7.1.7\n   AddAgentxCaps  |      X      |\n\
    \   PDU            |             |    ->B\n   ---------------+-------------+----------------\n\
    \   Receive        |             |  7.1.8\n   RemoveAgentxCap|      X      |\n\
    \   PDU            |             |    ->B\n   ---------------+-------------+----------------\n\
    \   Receive        |             |  7.2.4\n   Response PDU   |      X      |\n\
    \                  |             |    ->B\n   ---------------+-------------+----------------\n\
    \   Receive        |             |\n   Other PDU      |      X      |       X\n\
    \   ---------------+-------------+----------------\n"
- title: 8.  Transport Mappings
  contents:
  - "8.  Transport Mappings\n   The same AgentX PDU formats, encodings, and elements\
    \ of procedure are\n   used regardless of the underlying transport.\n"
- title: 8.1.  AgentX over TCP
  contents:
  - '8.1.  AgentX over TCP

    '
- title: 8.1.1.  Well-known Values
  contents:
  - "8.1.1.  Well-known Values\n   The master agent accepts TCP connection requests\
    \ for the well-known\n   port 705.  Subagents connect to the master agent using\
    \ this port\n   number.\n"
- title: 8.1.2.  Operation
  contents:
  - "8.1.2.  Operation\n   Once a TCP connection has been established, the AgentX\
    \ peers use this\n   connection to carry all AgentX PDUs. Multiple AgentX sessions\
    \ may be\n   established using the same TCP connection.  AgentX PDUs are sent\n\
    \   within an AgentX session.  AgentX peers are responsible for mapping\n   the\
    \ h.sessionID to a particular TCP connection.\n   All AgentX PDUs are presented\
    \ individually to the TCP, to be sent as\n   the data portion of a TCP PDU.\n"
- title: 8.2.  AgentX over UNIX-domain Sockets
  contents:
  - "8.2.  AgentX over UNIX-domain Sockets\n   Many (BSD-derived) implementations\
    \ of the UNIX operating system\n   support the UNIX pathname address family (AF_UNIX)\
    \ for socket\n   communications.  This provides a convenient method of sending\
    \ and\n   receiving data between processes on the same host.\n   Mapping AgentX\
    \ to this transport is useful for environments that\n       - wish to guarantee\
    \ subagents are running on the same\n         managed node as the master agent,\
    \ and where\n       - sockets provide better performance than TCP or UDP,\n  \
    \       especially in the presence of heavy network I/O\n"
- title: 8.2.1.  Well-known Values
  contents:
  - "8.2.1.  Well-known Values\n   The master agent creates a well-known UNIX-domain\
    \ socket endpoint\n   called \"/var/agentx/master\".  (It may create other, implementation-\n\
    \   specific endpoints.)\n   This endpoint name uses the character set encoding\
    \ native to the\n   managed node, and represents a UNIX-domain stream (SOCK_STREAM)\n\
    \   socket.\n"
- title: 8.2.2.  Operation
  contents:
  - "8.2.2.  Operation\n   Once a connection has been established, the AgentX peers\
    \ use this\n   connection to carry all AgentX PDUs.\n   Multiple AgentX sessions\
    \ may be established using the same\n   connection.  AgentX PDUs are sent within\
    \ an AgentX session.  AgentX\n   peers are responsible for mapping the h.sessionID\
    \ to a particular\n   connection.\n   All AgentX PDUs are presented individually\
    \ to the socket layer, to be\n   sent in the data stream.\n"
- title: 9.  Security Considerations
  contents:
  - "9.  Security Considerations\n   This memo defines a protocol between two processing\
    \ entities, one of\n   which (the master agent) is assumed to perform authentication\
    \ of\n   received SNMP requests and to control access to management\n   information.\
    \  The master agent performs these security operations\n   independently of the\
    \ other processing entity (the subagent).\n   Security considerations require\
    \ three questions to be answered:\n      1. Is a particular subagent allowed to\
    \ initiate a session with a\n         particular master agent?\n      2. During\
    \ an AgentX session, is any SNMP security-related\n         information (for example,\
    \ community names) passed from the\n         master agent to the subagent?\n \
    \     3. During an AgentX session, what part of the MIB tree is this\n       \
    \  subagent allowed to register?\n   The answer to the third question is: A subagent\
    \ can register any\n   subtree (subject to AgentX elements of procedure, section\
    \ 7.1.5).\n   Currently there is no access control mechanism defined in AgentX.\
    \ A\n   concern here is that a malicious subagent that registers an\n   unauthorized\
    \ \"sensitive\" subtree, could see modification requests to\n   those objects,\
    \ or by giving its own clever answer to NMS queries,\n   could cause the NMS to\
    \ do something that leads to information\n   disclosure or other damage.\n   The\
    \ answer to the second question is: No.\n   Now we can answer the first question.\
    \  AgentX does not contain a\n   mechanism for authorizing/refusing session initiations.\
    \  Thus,\n   controlling subagent access to the master agent may only be done\
    \ at a\n   lower layer (e.g., transport).\n   An AgentX subagent can connect to\
    \ a master agent using either a\n   network transport mechanism (e.g., TCP), or\
    \ a \"local\" mechanism\n   (e.g., shared memory, named pipes).\n   In the case\
    \ where a local transport mechanism is used and both\n   subagent and master agent\
    \ are running on the same host, connection\n   authorization can be delegated\
    \ to the operating system features.  The\n   answer to the first security question\
    \ then becomes: \"If and only if\n   the subagent has sufficient privileges, then\
    \ the operating system\n   will allow the connection\".\n   If a network transport\
    \ is used, currently there is no inherent\n   security.  Transport Layer Security\
    \ or SSL could be used to control\n   subagent connections, but that is beyond\
    \ the scope of this document.\n   Thus it is recommended that subagents always\
    \ run on the same host as\n   the master agent and that operating system features\
    \ be used to ensure\n   that only properly authorized subagents can establish\
    \ connections to\n   the master agent.\n"
- title: 10.  Acknowledgements
  contents:
  - "10.  Acknowledgements\n   The initial development of this memo was heavily influenced\
    \ by the\n   DPI 2.0 specification RFC 1592 [7].\n   This document was produced\
    \ by the IETF Agent Extensibility (AgentX)\n   Working Group, and benefited especially\
    \ from the contributions of the\n   following working group members:\n      David\
    \ Battle, Uri Blumenthal, Jeff Case, Maria Greene, Dave\n      Keeney, Harmen\
    \ van der Linde, Bob Natale, Randy Presuhn, Aleksey\n      Romanov, Don Ryan,\
    \ and Juergen Schoenwaelder.\n   The AgentX Working Group is chaired by:\n   Bob\
    \ Natale\n   ACE*COMM Corporation\n   704 Quince Orchard Road\n   Gaithersburg\
    \ MD  20878\n   Phone: +1-301-721-3000\n   Fax:   +1-301-721-3001\n   EMail: bnatale@acecomm.com\n"
- title: 11.  Authors' and Editor's Addresses
  contents:
  - "11.  Authors' and Editor's Addresses\n   Mike Daniele\n   Digital Equipment Corporation\n\
    \   110 Spit Brook Rd\n   Nashua, NH 03062\n   Phone: +1-603-881-1423\n   EMail:\
    \ daniele@zk3.dec.com\n   Bert Wijnen\n   IBM Professional Services\n   Watsonweg\
    \ 2\n   1423 ND Uithoorn\n   The Netherlands\n   Phone: +31-79-322-8316\n   EMail:\
    \ wijnen@vnet.ibm.com\n   Dale Francisco (editor)\n   Cisco Systems\n   150 Castilian\
    \ Dr\n   Goleta CA 93117\n   Phone: +1-805-961-3642\n   Fax:   +1-805-961-3600\n\
    \   EMail: dfrancis@cisco.com\n"
- title: 12.  References
  contents:
  - '12.  References

    '
- title: '[1]  Information processing systems - Open Systems Interconnection -'
  contents:
  - "[1]  Information processing systems - Open Systems Interconnection -\n     Specification\
    \ of Abstract Syntax Notation One (ASN.1),\n     International Organization for\
    \ Standardization.  International\n     Standard 8824, (December, 1987).\n"
- title: '[2]  Case, J., McCloghrie, K., Rose, M. and S. Waldbusser,'
  contents:
  - "[2]  Case, J., McCloghrie, K., Rose, M. and S. Waldbusser,\n     \"Structure\
    \ of Management Information for Version 2 of the Simple\n     Network Management\
    \ Protocol (SNMPv2)\", RFC 1902, January 1996.\n"
- title: '[3]  Case, J., McCloghrie, K., Rose, M. and S. Waldbusser,'
  contents:
  - "[3]  Case, J., McCloghrie, K., Rose, M. and S. Waldbusser,\n     \"Textual Conventions\
    \ for Version 2 of the Simple Network Management\n     Protocol (SNMPv2)\", RFC\
    \ 1903, January 1996.\n"
- title: '[4]  Case, J., McCloghrie, K., Rose, M., and S. Waldbusser,'
  contents:
  - "[4]  Case, J., McCloghrie, K., Rose, M., and S. Waldbusser,\n     \"Protocol\
    \ Operations for Version 2 of the Simple Network Management\n     Protocol (SNMPv2)\"\
    , RFC 1905, January 1996.\n"
- title: '[5]  Case, J., McCloghrie, K., Rose, M. and S. Waldbusser,'
  contents:
  - "[5]  Case, J., McCloghrie, K., Rose, M. and S. Waldbusser,\n     \"Management\
    \ Information Base for Version 2 of the Simple Network\n     Management Protocol\
    \ (SNMPv2)\", RFC 1907, January 1996.\n"
- title: '[6]  Case, J., Fedor, M., Schoffstall, M., and J. Davin, "Simple Network'
  contents:
  - "[6]  Case, J., Fedor, M., Schoffstall, M., and J. Davin, \"Simple Network\n \
    \    Management Protocol\", STD 15, RFC 1157, SNMP Research, Performance\n   \
    \  Systems International, MIT Laboratory for Computer Science, May\n     1990.\n"
- title: '[7]  Wijnen, B., Carpenter, G., Curran, K., Sehgal, A. and G. Waters,'
  contents:
  - "[7]  Wijnen, B., Carpenter, G., Curran, K., Sehgal, A. and G. Waters,\n     \"\
    Simple Network Management Protocol: Distributed Protocol\n     Interface, Version\
    \ 2.0\", RFC 1592, March 1994.\n"
- title: '[8]  Case, J., McCloghrie, K., Rose, M. and S. Waldbusser,'
  contents:
  - "[8]  Case, J., McCloghrie, K., Rose, M. and S. Waldbusser,\n     \"Coexistence\
    \ between Version 1 and Version 2 of the Internet-\n     standard Network Management\
    \ Framework\", RFC 1908, January 1996.\n"
- title: '[9]  Wijnen, B. and D. Levi, "V2ToV1: Mapping SNMPv2 onto SNMPv1'
  contents:
  - "[9]  Wijnen, B. and D. Levi, \"V2ToV1: Mapping SNMPv2 onto SNMPv1\n     Within\
    \ a Bilingual SNMP Agent\", RFC 2089, January 1997.\n"
- title: '[10] Case, J., McCloghrie, K., Rose, M. and S. Waldbusser,'
  contents:
  - "[10] Case, J., McCloghrie, K., Rose, M. and S. Waldbusser,\n     \"Conformance\
    \ Statements for Version 2 of the Simple Network\n     Management Protocol (SNMPv2)\"\
    , RFC 1904, January 1996.\n"
- title: '[11] McCloghrie, K. and F. Kastenholz, "Evolution of the'
  contents:
  - "[11] McCloghrie, K. and F. Kastenholz, \"Evolution of the\n     Interfaces Group\
    \ of MIB-II\", RFC 1573, January 1994.\n"
- title: '[12] Case, J., "FDDI Management Information Base", RFC 1285,'
  contents:
  - "[12] Case, J., \"FDDI Management Information Base\", RFC 1285,\n     January\
    \ 1992.\n"
- title: '[13] Application MIB Working Group, Krupczak, C., and J. Saperia,'
  contents:
  - "[13] Application MIB Working Group, Krupczak, C., and J. Saperia,\n     \"Definitions\
    \ of System-Level Managed Objects for Applications\",\n     draft-ietf-applmib-sysapplmib-08.txt,\
    \ 15 Apr 1997.\n"
- title: 13.  Full Copyright Statement
  contents:
  - "13.  Full Copyright Statement\n   Copyright (C) The Internet Society (1998).\
    \  All Rights Reserved.\n   This document and translations of it may be copied\
    \ and furnished to\n   others, and derivative works that comment on or otherwise\
    \ explain it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
