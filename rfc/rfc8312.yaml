- title: __initial_text__
  contents:
  - '                 CUBIC for Fast Long-Distance Networks

    '
- title: Abstract
  contents:
  - "Abstract\n   CUBIC is an extension to the current TCP standards.  It differs\
    \ from\n   the current TCP standards only in the congestion control algorithm\
    \ on\n   the sender side.  In particular, it uses a cubic function instead of\n\
    \   a linear window increase function of the current TCP standards to\n   improve\
    \ scalability and stability under fast and long-distance\n   networks.  CUBIC\
    \ and its predecessor algorithm have been adopted as\n   defaults by Linux and\
    \ have been used for many years.  This document\n   provides a specification of\
    \ CUBIC to enable third-party\n   implementations and to solicit community feedback\
    \ through\n   experimentation on the performance of CUBIC.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document is not an Internet Standards Track specification;\
    \ it is\n   published for informational purposes.\n   This document is a product\
    \ of the Internet Engineering Task Force\n   (IETF).  It represents the consensus\
    \ of the IETF community.  It has\n   received public review and has been approved\
    \ for publication by the\n   Internet Engineering Steering Group (IESG).  Not\
    \ all documents\n   approved by the IESG are a candidate for any level of Internet\n\
    \   Standard; see Section 2 of RFC 7841.\n   Information about the current status\
    \ of this document, any errata,\n   and how to provide feedback on it may be obtained\
    \ at\n   https://www.rfc-editor.org/info/rfc8312.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2018 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (https://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................3\n\
    \   2. Conventions .....................................................3\n  \
    \ 3. Design Principles of CUBIC ......................................4\n   4.\
    \ CUBIC Congestion Control ........................................6\n      4.1.\
    \ Window Increase Function ...................................6\n      4.2. TCP-Friendly\
    \ Region ........................................7\n      4.3. Concave Region\
    \ .............................................8\n      4.4. Convex Region ..............................................8\n\
    \      4.5. Multiplicative Decrease ....................................8\n  \
    \    4.6. Fast Convergence ...........................................9\n    \
    \  4.7. Timeout ...................................................10\n      4.8.\
    \ Slow Start ................................................10\n   5. Discussion\
    \ .....................................................10\n      5.1. Fairness\
    \ to Standard TCP ..................................11\n      5.2. Using Spare\
    \ Capacity ......................................13\n      5.3. Difficult Environments\
    \ ....................................13\n      5.4. Investigating a Range of\
    \ Environments .....................13\n      5.5. Protection against Congestion\
    \ Collapse ....................14\n      5.6. Fairness within the Alternative\
    \ Congestion Control\n           Algorithm .................................................14\n\
    \      5.7. Performance with Misbehaving Nodes and Outside Attackers ..14\n  \
    \    5.8. Behavior for Application-Limited Flows ....................14\n    \
    \  5.9. Responses to Sudden or Transient Events ...................14\n      5.10.\
    \ Incremental Deployment ...................................14\n   6. Security\
    \ Considerations ........................................15\n   7. IANA Considerations\
    \ ............................................15\n   8. References .....................................................15\n\
    \      8.1. Normative References ......................................15\n  \
    \    8.2. Informative References ....................................16\n   Acknowledgements\
    \ ..................................................17\n   Authors' Addresses\
    \ ................................................18\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   The low utilization problem of TCP in fast long-distance\
    \ networks is\n   well documented in [K03] and [RFC3649].  This problem arises\
    \ from a\n   slow increase of the congestion window following a congestion event\n\
    \   in a network with a large bandwidth-delay product (BDP).  [HKLRX06]\n   indicates\
    \ that this problem is frequently observed even in the range\n   of congestion\
    \ window sizes over several hundreds of packets.  This\n   problem is equally\
    \ applicable to all Reno-style TCP standards and\n   their variants, including\
    \ TCP-RENO [RFC5681], TCP-NewReno [RFC6582]\n   [RFC6675], SCTP [RFC4960], and\
    \ TFRC [RFC5348], which use the same\n   linear increase function for window growth,\
    \ which we refer to\n   collectively as \"Standard TCP\" below.\n   CUBIC, originally\
    \ proposed in [HRX08], is a modification to the\n   congestion control algorithm\
    \ of Standard TCP to remedy this problem.\n   This document describes the most\
    \ recent specification of CUBIC.\n   Specifically, CUBIC uses a cubic function\
    \ instead of a linear window\n   increase function of Standard TCP to improve\
    \ scalability and\n   stability under fast and long-distance networks.\n   Binary\
    \ Increase Congestion Control (BIC-TCP) [XHR04], a predecessor\n   of CUBIC, was\
    \ selected as the default TCP congestion control\n   algorithm by Linux in the\
    \ year 2005 and has been used for several\n   years by the Internet community\
    \ at large.  CUBIC uses a similar\n   window increase function as BIC-TCP and\
    \ is designed to be less\n   aggressive and fairer to Standard TCP in bandwidth\
    \ usage than BIC-TCP\n   while maintaining the strengths of BIC-TCP such as stability,\
    \ window\n   scalability, and RTT fairness.  CUBIC has already replaced BIC-TCP\
    \ as\n   the default TCP congestion control algorithm in Linux and has been\n\
    \   deployed globally by Linux.  Through extensive testing in various\n   Internet\
    \ scenarios, we believe that CUBIC is safe for testing and\n   deployment in the\
    \ global Internet.\n   In the following sections, we first briefly explain the\
    \ design\n   principles of CUBIC, then provide the exact specification of CUBIC,\n\
    \   and finally discuss the safety features of CUBIC following the\n   guidelines\
    \ specified in [RFC5033].\n"
- title: 2.  Conventions
  contents:
  - "2.  Conventions\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\"\
    , \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"NOT RECOMMENDED\"\
    , \"MAY\", and\n   \"OPTIONAL\" in this document are to be interpreted as described\
    \ in\n   BCP 14 [RFC2119] [RFC8174] when, and only when, they appear in all\n\
    \   capitals, as shown here.\n"
- title: 3.  Design Principles of CUBIC
  contents:
  - "3.  Design Principles of CUBIC\n   CUBIC is designed according to the following\
    \ design principles:\n      Principle 1: For better network utilization and stability,\
    \ CUBIC\n      uses both the concave and convex profiles of a cubic function to\n\
    \      increase the congestion window size, instead of using just a\n      convex\
    \ function.\n      Principle 2: To be TCP-friendly, CUBIC is designed to behave\
    \ like\n      Standard TCP in networks with short RTTs and small bandwidth where\n\
    \      Standard TCP performs well.\n      Principle 3: For RTT-fairness, CUBIC\
    \ is designed to achieve linear\n      bandwidth sharing among flows with different\
    \ RTTs.\n      Principle 4: CUBIC appropriately sets its multiplicative window\n\
    \      decrease factor in order to balance between the scalability and\n     \
    \ convergence speed.\n   Principle 1: For better network utilization and stability,\
    \ CUBIC\n   [HRX08] uses a cubic window increase function in terms of the elapsed\n\
    \   time from the last congestion event.  While most alternative\n   congestion\
    \ control algorithms to Standard TCP increase the congestion\n   window using\
    \ convex functions, CUBIC uses both the concave and convex\n   profiles of a cubic\
    \ function for window growth.  After a window\n   reduction in response to a congestion\
    \ event is detected by duplicate\n   ACKs or Explicit Congestion Notification-Echo\
    \ (ECN-Echo) ACKs\n   [RFC3168], CUBIC registers the congestion window size where\
    \ it got\n   the congestion event as W_max and performs a multiplicative decrease\n\
    \   of congestion window.  After it enters into congestion avoidance, it\n   starts\
    \ to increase the congestion window using the concave profile of\n   the cubic\
    \ function.  The cubic function is set to have its plateau at\n   W_max so that\
    \ the concave window increase continues until the window\n   size becomes W_max.\
    \  After that, the cubic function turns into a\n   convex profile and the convex\
    \ window increase begins.  This style of\n   window adjustment (concave and then\
    \ convex) improves the algorithm\n   stability while maintaining high network\
    \ utilization [CEHRX07].  This\n   is because the window size remains almost constant,\
    \ forming a plateau\n   around W_max where network utilization is deemed highest.\
    \  Under\n   steady state, most window size samples of CUBIC are close to W_max,\n\
    \   thus promoting high network utilization and stability.  Note that\n   those\
    \ congestion control algorithms using only convex functions to\n   increase the\
    \ congestion window size have the maximum increments\n   around W_max, and thus\
    \ introduce a large number of packet bursts\n   around the saturation point of\
    \ the network, likely causing frequent\n   global loss synchronizations.\n   Principle\
    \ 2: CUBIC promotes per-flow fairness to Standard TCP.  Note\n   that Standard\
    \ TCP performs well under short RTT and small bandwidth\n   (or small BDP) networks.\
    \  There is only a scalability problem in\n   networks with long RTTs and large\
    \ bandwidth (or large BDP).  An\n   alternative congestion control algorithm to\
    \ Standard TCP designed to\n   be friendly to Standard TCP on a per-flow basis\
    \ must operate to\n   increase its congestion window less aggressively in small\
    \ BDP\n   networks than in large BDP networks.  The aggressiveness of CUBIC\n\
    \   mainly depends on the maximum window size before a window reduction,\n   which\
    \ is smaller in small BDP networks than in large BDP networks.\n   Thus, CUBIC\
    \ increases its congestion window less aggressively in\n   small BDP networks\
    \ than in large BDP networks.  Furthermore, in cases\n   when the cubic function\
    \ of CUBIC increases its congestion window less\n   aggressively than Standard\
    \ TCP, CUBIC simply follows the window size\n   of Standard TCP to ensure that\
    \ CUBIC achieves at least the same\n   throughput as Standard TCP in small BDP\
    \ networks.  We call this\n   region where CUBIC behaves like Standard TCP, the\
    \ \"TCP-friendly\n   region\".\n   Principle 3: Two CUBIC flows with different\
    \ RTTs have their\n   throughput ratio linearly proportional to the inverse of\
    \ their RTT\n   ratio, where the throughput of a flow is approximately the size\
    \ of\n   its congestion window divided by its RTT.  Specifically, CUBIC\n   maintains\
    \ a window increase rate independent of RTTs outside of the\n   TCP-friendly region,\
    \ and thus flows with different RTTs have similar\n   congestion window sizes\
    \ under steady state when they operate outside\n   the TCP-friendly region.  This\
    \ notion of a linear throughput ratio is\n   similar to that of Standard TCP under\
    \ high statistical multiplexing\n   environments where packet losses are independent\
    \ of individual flow\n   rates.  However, under low statistical multiplexing environments,\
    \ the\n   throughput ratio of Standard TCP flows with different RTTs is\n   quadratically\
    \ proportional to the inverse of their RTT ratio [XHR04].\n   CUBIC always ensures\
    \ the linear throughput ratio independent of the\n   levels of statistical multiplexing.\
    \  This is an improvement over\n   Standard TCP.  While there is no consensus\
    \ on particular throughput\n   ratios of different RTT flows, we believe that\
    \ under wired Internet,\n   use of a linear throughput ratio seems more reasonable\
    \ than equal\n   throughputs (i.e., the same throughput for flows with different\
    \ RTTs)\n   or a higher-order throughput ratio (e.g., a quadratical throughput\n\
    \   ratio of Standard TCP under low statistical multiplexing\n   environments).\n\
    \   Principle 4: To balance between the scalability and convergence\n   speed,\
    \ CUBIC sets the multiplicative window decrease factor to 0.7\n   while Standard\
    \ TCP uses 0.5.  While this improves the scalability of\n   CUBIC, a side effect\
    \ of this decision is slower convergence,\n   especially under low statistical\
    \ multiplexing environments.  This\n   design choice is following the observation\
    \ that the author of\n   HighSpeed TCP (HSTCP) [RFC3649] has made along with other\
    \ researchers\n   (e.g., [GV02]): the current Internet becomes more asynchronous\
    \ with\n   less frequent loss synchronizations with high statistical\n   multiplexing.\
    \  Under this environment, even strict Multiplicative-\n   Increase Multiplicative-Decrease\
    \ (MIMD) can converge.  CUBIC flows\n   with the same RTT always converge to the\
    \ same throughput independent\n   of statistical multiplexing, thus achieving\
    \ intra-algorithm fairness.\n   We also find that under the environments with\
    \ sufficient statistical\n   multiplexing, the convergence speed of CUBIC flows\
    \ is reasonable.\n"
- title: 4.  CUBIC Congestion Control
  contents:
  - "4.  CUBIC Congestion Control\n   The unit of all window sizes in this document\
    \ is segments of the\n   maximum segment size (MSS), and the unit of all times\
    \ is seconds.\n   Let cwnd denote the congestion window size of a flow, and ssthresh\n\
    \   denote the slow-start threshold.\n"
- title: 4.1.  Window Increase Function
  contents:
  - "4.1.  Window Increase Function\n   CUBIC maintains the acknowledgment (ACK) clocking\
    \ of Standard TCP by\n   increasing the congestion window only at the reception\
    \ of an ACK.  It\n   does not make any change to the fast recovery and retransmit\
    \ of TCP,\n   such as TCP-NewReno [RFC6582] [RFC6675].  During congestion avoidance\n\
    \   after a congestion event where a packet loss is detected by duplicate\n  \
    \ ACKs or a network congestion is detected by ACKs with ECN-Echo flags\n   [RFC3168],\
    \ CUBIC changes the window increase function of Standard\n   TCP.  Suppose that\
    \ W_max is the window size just before the window is\n   reduced in the last congestion\
    \ event.\n   CUBIC uses the following window increase function:\n       W_cubic(t)\
    \ = C*(t-K)^3 + W_max (Eq. 1)\n   where C is a constant fixed to determine the\
    \ aggressiveness of window\n   increase in high BDP networks, t is the elapsed\
    \ time from the\n   beginning of the current congestion avoidance, and K is the\
    \ time\n   period that the above function takes to increase the current window\n\
    \   size to W_max if there are no further congestion events and is\n   calculated\
    \ using the following equation:\n       K = cubic_root(W_max*(1-beta_cubic)/C)\
    \ (Eq. 2)\n   where beta_cubic is the CUBIC multiplication decrease factor, that\n\
    \   is, when a congestion event is detected, CUBIC reduces its cwnd to\n   W_cubic(0)=W_max*beta_cubic.\
    \  We discuss how we set beta_cubic in\n   Section 4.5 and how we set C in Section\
    \ 5.\n   Upon receiving an ACK during congestion avoidance, CUBIC computes the\n\
    \   window increase rate during the next RTT period using Eq. 1.  It sets\n  \
    \ W_cubic(t+RTT) as the candidate target value of the congestion\n   window, where\
    \ RTT is the weighted average RTT calculated by Standard\n   TCP.\n   Depending\
    \ on the value of the current congestion window size cwnd,\n   CUBIC runs in three\
    \ different modes.\n   1.  The TCP-friendly region, which ensures that CUBIC achieves\
    \ at\n       least the same throughput as Standard TCP.\n   2.  The concave region,\
    \ if CUBIC is not in the TCP-friendly region\n       and cwnd is less than W_max.\n\
    \   3.  The convex region, if CUBIC is not in the TCP-friendly region and\n  \
    \     cwnd is greater than W_max.\n   Below, we describe the exact actions taken\
    \ by CUBIC in each region.\n"
- title: 4.2.  TCP-Friendly Region
  contents:
  - "4.2.  TCP-Friendly Region\n   Standard TCP performs well in certain types of\
    \ networks, for example,\n   under short RTT and small bandwidth (or small BDP)\
    \ networks.  In\n   these networks, we use the TCP-friendly region to ensure that\
    \ CUBIC\n   achieves at least the same throughput as Standard TCP.\n   The TCP-friendly\
    \ region is designed according to the analysis\n   described in [FHP00].  The\
    \ analysis studies the performance of an\n   Additive Increase and Multiplicative\
    \ Decrease (AIMD) algorithm with\n   an additive factor of alpha_aimd (segments\
    \ per RTT) and a\n   multiplicative factor of beta_aimd, denoted by AIMD(alpha_aimd,\n\
    \   beta_aimd).  Specifically, the average congestion window size of\n   AIMD(alpha_aimd,\
    \ beta_aimd) can be calculated using Eq. 3.  The\n   analysis shows that AIMD(alpha_aimd,\
    \ beta_aimd) with\n   alpha_aimd=3*(1-beta_aimd)/(1+beta_aimd) achieves the same\
    \ average\n   window size as Standard TCP that uses AIMD(1, 0.5).\n       AVG_W_aimd\
    \ = [ alpha_aimd * (1+beta_aimd) /\n                      (2*(1-beta_aimd)*p)\
    \ ]^0.5 (Eq. 3)\n   Based on the above analysis, CUBIC uses Eq. 4 to estimate\
    \ the window\n   size W_est of AIMD(alpha_aimd, beta_aimd) with\n   alpha_aimd=3*(1-beta_cubic)/(1+beta_cubic)\
    \ and beta_aimd=beta_cubic,\n   which achieves the same average window size as\
    \ Standard TCP.  When\n   receiving an ACK in congestion avoidance (cwnd could\
    \ be greater than\n   or less than W_max), CUBIC checks whether W_cubic(t) is\
    \ less than\n   W_est(t).  If so, CUBIC is in the TCP-friendly region and cwnd\
    \ SHOULD\n   be set to W_est(t) at each reception of an ACK.\n       W_est(t)\
    \ = W_max*beta_cubic +\n                   [3*(1-beta_cubic)/(1+beta_cubic)] *\
    \ (t/RTT) (Eq. 4)\n"
- title: 4.3.  Concave Region
  contents:
  - "4.3.  Concave Region\n   When receiving an ACK in congestion avoidance, if CUBIC\
    \ is not in the\n   TCP-friendly region and cwnd is less than W_max, then CUBIC\
    \ is in the\n   concave region.  In this region, cwnd MUST be incremented by\n\
    \   (W_cubic(t+RTT) - cwnd)/cwnd for each received ACK, where\n   W_cubic(t+RTT)\
    \ is calculated using Eq. 1.\n"
- title: 4.4.  Convex Region
  contents:
  - "4.4.  Convex Region\n   When receiving an ACK in congestion avoidance, if CUBIC\
    \ is not in the\n   TCP-friendly region and cwnd is larger than or equal to W_max,\
    \ then\n   CUBIC is in the convex region.  The convex region indicates that the\n\
    \   network conditions might have been perturbed since the last\n   congestion\
    \ event, possibly implying more available bandwidth after\n   some flow departures.\
    \  Since the Internet is highly asynchronous,\n   some amount of perturbation\
    \ is always possible without causing a\n   major change in available bandwidth.\
    \  In this region, CUBIC is being\n   very careful by very slowly increasing its\
    \ window size.  The convex\n   profile ensures that the window increases very\
    \ slowly at the\n   beginning and gradually increases its increase rate.  We also\
    \ call\n   this region the \"maximum probing phase\" since CUBIC is searching\
    \ for\n   a new W_max.  In this region, cwnd MUST be incremented by\n   (W_cubic(t+RTT)\
    \ - cwnd)/cwnd for each received ACK, where\n   W_cubic(t+RTT) is calculated using\
    \ Eq. 1.\n"
- title: 4.5.  Multiplicative Decrease
  contents:
  - "4.5.  Multiplicative Decrease\n   When a packet loss is detected by duplicate\
    \ ACKs or a network\n   congestion is detected by ECN-Echo ACKs, CUBIC updates\
    \ its W_max,\n   cwnd, and ssthresh as follows.  Parameter beta_cubic SHOULD be\
    \ set to\n   0.7.\n      W_max = cwnd;                 // save window size before\
    \ reduction\n      ssthresh = cwnd * beta_cubic; // new slow-start threshold\n\
    \      ssthresh = max(ssthresh, 2);  // threshold is at least 2 MSS\n      cwnd\
    \ = cwnd * beta_cubic;     // window reduction\n   A side effect of setting beta_cubic\
    \ to a value bigger than 0.5 is\n   slower convergence.  We believe that while\
    \ a more adaptive setting of\n   beta_cubic could result in faster convergence,\
    \ it will make the\n   analysis of CUBIC much harder.  This adaptive adjustment\
    \ of\n   beta_cubic is an item for the next version of CUBIC.\n"
- title: 4.6.  Fast Convergence
  contents:
  - "4.6.  Fast Convergence\n   To improve the convergence speed of CUBIC, we add\
    \ a heuristic in\n   CUBIC.  When a new flow joins the network, existing flows\
    \ in the\n   network need to give up some of their bandwidth to allow the new\
    \ flow\n   some room for growth if the existing flows have been using all the\n\
    \   bandwidth of the network.  To speed up this bandwidth release by\n   existing\
    \ flows, the following mechanism called \"fast convergence\"\n   SHOULD be implemented.\n\
    \   With fast convergence, when a congestion event occurs, before the\n   window\
    \ reduction of the congestion window, a flow remembers the last\n   value of W_max\
    \ before it updates W_max for the current congestion\n   event.  Let us call the\
    \ last value of W_max to be W_last_max.\n      if (W_max < W_last_max){ // should\
    \ we make room for others\n          W_last_max = W_max;             // remember\
    \ the last W_max\n          W_max = W_max*(1.0+beta_cubic)/2.0; // further reduce\
    \ W_max\n      } else {\n          W_last_max = W_max              // remember\
    \ the last W_max\n      }\n   At a congestion event, if the current value of W_max\
    \ is less than\n   W_last_max, this indicates that the saturation point experienced\
    \ by\n   this flow is getting reduced because of the change in available\n   bandwidth.\
    \  Then we allow this flow to release more bandwidth by\n   reducing W_max further.\
    \  This action effectively lengthens the time\n   for this flow to increase its\
    \ congestion window because the reduced\n   W_max forces the flow to have the\
    \ plateau earlier.  This allows more\n   time for the new flow to catch up to\
    \ its congestion window size.\n   The fast convergence is designed for network\
    \ environments with\n   multiple CUBIC flows.  In network environments with only\
    \ a single\n   CUBIC flow and without any other traffic, the fast convergence\
    \ SHOULD\n   be disabled.\n"
- title: 4.7.  Timeout
  contents:
  - "4.7.  Timeout\n   In case of timeout, CUBIC follows Standard TCP to reduce cwnd\n\
    \   [RFC5681], but sets ssthresh using beta_cubic (same as in\n   Section 4.5)\
    \ that is different from Standard TCP [RFC5681].\n   During the first congestion\
    \ avoidance after a timeout, CUBIC\n   increases its congestion window size using\
    \ Eq. 1, where t is the\n   elapsed time since the beginning of the current congestion\
    \ avoidance,\n   K is set to 0, and W_max is set to the congestion window size\
    \ at the\n   beginning of the current congestion avoidance.\n"
- title: 4.8.  Slow Start
  contents:
  - "4.8.  Slow Start\n   CUBIC MUST employ a slow-start algorithm, when the cwnd\
    \ is no more\n   than ssthresh.  Among the slow-start algorithms, CUBIC MAY choose\
    \ the\n   standard TCP slow start [RFC5681] in general networks, or the limited\n\
    \   slow start [RFC3742] or hybrid slow start [HR08] for fast and long-\n   distance\
    \ networks.\n   In the case when CUBIC runs the hybrid slow start [HR08], it may\
    \ exit\n   the first slow start without incurring any packet loss and thus W_max\n\
    \   is undefined.  In this special case, CUBIC switches to congestion\n   avoidance\
    \ and increases its congestion window size using Eq. 1, where\n   t is the elapsed\
    \ time since the beginning of the current congestion\n   avoidance, K is set to\
    \ 0, and W_max is set to the congestion window\n   size at the beginning of the\
    \ current congestion avoidance.\n"
- title: 5.  Discussion
  contents:
  - "5.  Discussion\n   In this section, we further discuss the safety features of\
    \ CUBIC\n   following the guidelines specified in [RFC5033].\n   With a deterministic\
    \ loss model where the number of packets between\n   two successive packet losses\
    \ is always 1/p, CUBIC always operates\n   with the concave window profile, which\
    \ greatly simplifies the\n   performance analysis of CUBIC.  The average window\
    \ size of CUBIC can\n   be obtained by the following function:\n       AVG_W_cubic\
    \ = [C*(3+beta_cubic)/(4*(1-beta_cubic))]^0.25 *\n                       (RTT^0.75)\
    \ / (p^0.75) (Eq. 5)\n   With beta_cubic set to 0.7, the above formula is reduced\
    \ to:\n       AVG_W_cubic = (C*3.7/1.2)^0.25 * (RTT^0.75) / (p^0.75) (Eq. 6)\n\
    \   We will determine the value of C in the following subsection using\n   Eq.\
    \ 6.\n"
- title: 5.1.  Fairness to Standard TCP
  contents:
  - "5.1.  Fairness to Standard TCP\n   In environments where Standard TCP is able\
    \ to make reasonable use of\n   the available bandwidth, CUBIC does not significantly\
    \ change this\n   state.\n   Standard TCP performs well in the following two types\
    \ of networks:\n   1.  networks with a small bandwidth-delay product (BDP)\n \
    \  2.  networks with a short RTTs, but not necessarily a small BDP\n   CUBIC is\
    \ designed to behave very similarly to Standard TCP in the\n   above two types\
    \ of networks.  The following two tables show the\n   average window sizes of\
    \ Standard TCP, HSTCP, and CUBIC.  The average\n   window sizes of Standard TCP\
    \ and HSTCP are from [RFC3649].  The\n   average window size of CUBIC is calculated\
    \ using Eq. 6 and the CUBIC\n   TCP-friendly region for three different values\
    \ of C.\n   +--------+----------+-----------+------------+-----------+----------+\n\
    \   |   Loss |  Average |   Average |      CUBIC |     CUBIC |    CUBIC |\n  \
    \ | Rate P |    TCP W |   HSTCP W |   (C=0.04) |   (C=0.4) |    (C=4) |\n   +--------+----------+-----------+------------+-----------+----------+\n\
    \   |  10^-2 |       12 |        12 |         12 |        12 |       12 |\n  \
    \ |  10^-3 |       38 |        38 |         38 |        38 |       59 |\n   |\
    \  10^-4 |      120 |       263 |        120 |       187 |      333 |\n   |  10^-5\
    \ |      379 |      1795 |        593 |      1054 |     1874 |\n   |  10^-6 |\
    \     1200 |     12279 |       3332 |      5926 |    10538 |\n   |  10^-7 |  \
    \   3795 |     83981 |      18740 |     33325 |    59261 |\n   |  10^-8 |    12000\
    \ |    574356 |     105383 |    187400 |   333250 |\n   +--------+----------+-----------+------------+-----------+----------+\n\
    \                                  Table 1\n   Table 1 describes the response\
    \ function of Standard TCP, HSTCP, and\n   CUBIC in networks with RTT = 0.1 seconds.\
    \  The average window size is\n   in MSS-sized segments.\n   +--------+-----------+-----------+------------+-----------+---------+\n\
    \   |   Loss |   Average |   Average |      CUBIC |     CUBIC |   CUBIC |\n  \
    \ | Rate P |     TCP W |   HSTCP W |   (C=0.04) |   (C=0.4) |   (C=4) |\n   +--------+-----------+-----------+------------+-----------+---------+\n\
    \   |  10^-2 |        12 |        12 |         12 |        12 |      12 |\n  \
    \ |  10^-3 |        38 |        38 |         38 |        38 |      38 |\n   |\
    \  10^-4 |       120 |       263 |        120 |       120 |     120 |\n   |  10^-5\
    \ |       379 |      1795 |        379 |       379 |     379 |\n   |  10^-6 |\
    \      1200 |     12279 |       1200 |      1200 |    1874 |\n   |  10^-7 |  \
    \    3795 |     83981 |       3795 |      5926 |   10538 |\n   |  10^-8 |    \
    \ 12000 |    574356 |      18740 |     33325 |   59261 |\n   +--------+-----------+-----------+------------+-----------+---------+\n\
    \                                  Table 2\n   Table 2 describes the response\
    \ function of Standard TCP, HSTCP, and\n   CUBIC in networks with RTT = 0.01 seconds.\
    \  The average window size\n   is in MSS-sized segments.\n   Both tables show\
    \ that CUBIC with any of these three C values is more\n   friendly to TCP than\
    \ HSTCP, especially in networks with a short RTT\n   where TCP performs reasonably\
    \ well.  For example, in a network with\n   RTT = 0.01 seconds and p=10^-6, TCP\
    \ has an average window of 1200\n   packets.  If the packet size is 1500 bytes,\
    \ then TCP can achieve an\n   average rate of 1.44 Gbps.  In this case, CUBIC\
    \ with C=0.04 or C=0.4\n   achieves exactly the same rate as Standard TCP, whereas\
    \ HSTCP is\n   about ten times more aggressive than Standard TCP.\n   We can see\
    \ that C determines the aggressiveness of CUBIC in competing\n   with other congestion\
    \ control algorithms for bandwidth.  CUBIC is\n   more friendly to Standard TCP,\
    \ if the value of C is lower.  However,\n   we do not recommend setting C to a\
    \ very low value like 0.04, since\n   CUBIC with a low C cannot efficiently use\
    \ the bandwidth in long RTT\n   and high-bandwidth networks.  Based on these observations\
    \ and our\n   experiments, we find C=0.4 gives a good balance between TCP-\n \
    \  friendliness and aggressiveness of window increase.  Therefore, C\n   SHOULD\
    \ be set to 0.4.  With C set to 0.4, Eq. 6 is reduced to:\n      AVG_W_cubic =\
    \ 1.054 * (RTT^0.75) / (p^0.75) (Eq. 7)\n   Eq. 7 is then used in the next subsection\
    \ to show the scalability of\n   CUBIC.\n"
- title: 5.2.  Using Spare Capacity
  contents:
  - "5.2.  Using Spare Capacity\n   CUBIC uses a more aggressive window increase function\
    \ than Standard\n   TCP under long RTT and high-bandwidth networks.\n   The following\
    \ table shows that to achieve the 10 Gbps rate, Standard\n   TCP requires a packet\
    \ loss rate of 2.0e-10, while CUBIC requires a\n   packet loss rate of 2.9e-8.\n\
    \      +------------------+-----------+---------+---------+---------+\n      |\
    \ Throughput(Mbps) | Average W | TCP P   | HSTCP P | CUBIC P |\n      +------------------+-----------+---------+---------+---------+\n\
    \      |                1 |       8.3 | 2.0e-2  | 2.0e-2  | 2.0e-2  |\n      |\
    \               10 |      83.3 | 2.0e-4  | 3.9e-4  | 2.9e-4  |\n      |      \
    \        100 |     833.3 | 2.0e-6  | 2.5e-5  | 1.4e-5  |\n      |            \
    \ 1000 |    8333.3 | 2.0e-8  | 1.5e-6  | 6.3e-7  |\n      |            10000 |\
    \   83333.3 | 2.0e-10 | 1.0e-7  | 2.9e-8  |\n      +------------------+-----------+---------+---------+---------+\n\
    \                                  Table 3\n   Table 3 describes the required\
    \ packet loss rate for Standard TCP,\n   HSTCP, and CUBIC to achieve a certain\
    \ throughput.  We use 1500-byte\n   packets and an RTT of 0.1 seconds.\n   Our\
    \ test results in [HKLRX06] indicate that CUBIC uses the spare\n   bandwidth left\
    \ unused by existing Standard TCP flows in the same\n   bottleneck link without\
    \ taking away much bandwidth from the existing\n   flows.\n"
- title: 5.3.  Difficult Environments
  contents:
  - "5.3.  Difficult Environments\n   CUBIC is designed to remedy the poor performance\
    \ of TCP in fast and\n   long-distance networks.\n"
- title: 5.4.  Investigating a Range of Environments
  contents:
  - "5.4.  Investigating a Range of Environments\n   CUBIC has been extensively studied\
    \ by using both NS-2 simulation and\n   test-bed experiments covering a wide range\
    \ of network environments.\n   More information can be found in [HKLRX06].\n \
    \  Same as Standard TCP, CUBIC is a loss-based congestion control\n   algorithm.\
    \  Because CUBIC is designed to be more aggressive (due to a\n   faster window\
    \ increase function and bigger multiplicative decrease\n   factor) than Standard\
    \ TCP in fast and long-distance networks, it can\n   fill large drop-tail buffers\
    \ more quickly than Standard TCP and\n   increase the risk of a standing queue\
    \ [KWAF17].  In this case, proper\n   queue sizing and management [RFC7567] could\
    \ be used to reduce the\n   packet queuing delay.\n"
- title: 5.5.  Protection against Congestion Collapse
  contents:
  - "5.5.  Protection against Congestion Collapse\n   With regard to the potential\
    \ of causing congestion collapse, CUBIC\n   behaves like Standard TCP since CUBIC\
    \ modifies only the window\n   adjustment algorithm of TCP.  Thus, it does not\
    \ modify the ACK\n   clocking and Timeout behaviors of Standard TCP.\n"
- title: 5.6.  Fairness within the Alternative Congestion Control Algorithm
  contents:
  - "5.6.  Fairness within the Alternative Congestion Control Algorithm\n   CUBIC\
    \ ensures convergence of competing CUBIC flows with the same RTT\n   in the same\
    \ bottleneck links to an equal throughput.  When competing\n   flows have different\
    \ RTTs, their throughput ratio is linearly\n   proportional to the inverse of\
    \ their RTT ratios.  This is true\n   independent of the level of statistical\
    \ multiplexing in the link.\n"
- title: 5.7.  Performance with Misbehaving Nodes and Outside Attackers
  contents:
  - "5.7.  Performance with Misbehaving Nodes and Outside Attackers\n   This is not\
    \ considered in the current CUBIC.\n"
- title: 5.8.  Behavior for Application-Limited Flows
  contents:
  - "5.8.  Behavior for Application-Limited Flows\n   CUBIC does not raise its congestion\
    \ window size if the flow is\n   currently limited by the application instead\
    \ of the congestion\n   window.  In case of long periods when cwnd has not been\
    \ updated due\n   to the application rate limit, such as idle periods, t in Eq.\
    \ 1 MUST\n   NOT include these periods; otherwise, W_cubic(t) might be very high\n\
    \   after restarting from these periods.\n"
- title: 5.9.  Responses to Sudden or Transient Events
  contents:
  - "5.9.  Responses to Sudden or Transient Events\n   If there is a sudden congestion,\
    \ a routing change, or a mobility\n   event, CUBIC behaves the same as Standard\
    \ TCP.\n"
- title: 5.10.  Incremental Deployment
  contents:
  - "5.10.  Incremental Deployment\n   CUBIC requires only the change of TCP senders,\
    \ and it does not make\n   any changes to TCP receivers.  That is, a CUBIC sender\
    \ works\n   correctly with the Standard TCP receivers.  In addition, CUBIC does\n\
    \   not require any changes to the routers and does not require any\n   assistance\
    \ from the routers.\n"
- title: 6.  Security Considerations
  contents:
  - "6.  Security Considerations\n   This proposal makes no changes to the underlying\
    \ security of TCP.\n   More information about TCP security concerns can be found\
    \ in\n   [RFC5681].\n"
- title: 7.  IANA Considerations
  contents:
  - "7.  IANA Considerations\n   This document does not require any IANA actions.\n"
- title: 8.  References
  contents:
  - '8.  References

    '
- title: 8.1.  Normative References
  contents:
  - "8.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use in\
    \ RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119,\n  \
    \            DOI 10.17487/RFC2119, March 1997,\n              <https://www.rfc-editor.org/info/rfc2119>.\n\
    \   [RFC3168]  Ramakrishnan, K., Floyd, S., and D. Black, \"The Addition\n   \
    \           of Explicit Congestion Notification (ECN) to IP\",\n             \
    \ RFC 3168, DOI 10.17487/RFC3168, September 2001,\n              <https://www.rfc-editor.org/info/rfc3168>.\n\
    \   [RFC3649]  Floyd, S., \"HighSpeed TCP for Large Congestion Windows\",\n  \
    \            RFC 3649, DOI 10.17487/RFC3649, December 2003,\n              <https://www.rfc-editor.org/info/rfc3649>.\n\
    \   [RFC3742]  Floyd, S., \"Limited Slow-Start for TCP with Large\n          \
    \    Congestion Windows\", RFC 3742, DOI 10.17487/RFC3742, March\n           \
    \   2004, <https://www.rfc-editor.org/info/rfc3742>.\n   [RFC4960]  Stewart, R.,\
    \ Ed., \"Stream Control Transmission Protocol\",\n              RFC 4960, DOI\
    \ 10.17487/RFC4960, September 2007,\n              <https://www.rfc-editor.org/info/rfc4960>.\n\
    \   [RFC5033]  Floyd, S. and M. Allman, \"Specifying New Congestion\n        \
    \      Control Algorithms\", BCP 133, RFC 5033,\n              DOI 10.17487/RFC5033,\
    \ August 2007,\n              <https://www.rfc-editor.org/info/rfc5033>.\n   [RFC5348]\
    \  Floyd, S., Handley, M., Padhye, J., and J. Widmer, \"TCP\n              Friendly\
    \ Rate Control (TFRC): Protocol Specification\",\n              RFC 5348, DOI\
    \ 10.17487/RFC5348, September 2008,\n              <https://www.rfc-editor.org/info/rfc5348>.\n\
    \   [RFC5681]  Allman, M., Paxson, V., and E. Blanton, \"TCP Congestion\n    \
    \          Control\", RFC 5681, DOI 10.17487/RFC5681, September 2009,\n      \
    \        <https://www.rfc-editor.org/info/rfc5681>.\n   [RFC6582]  Henderson,\
    \ T., Floyd, S., Gurtov, A., and Y. Nishida, \"The\n              NewReno Modification\
    \ to TCP's Fast Recovery Algorithm\",\n              RFC 6582, DOI 10.17487/RFC6582,\
    \ April 2012,\n              <https://www.rfc-editor.org/info/rfc6582>.\n   [RFC6675]\
    \  Blanton, E., Allman, M., Wang, L., Jarvinen, I., Kojo, M.,\n              and\
    \ Y. Nishida, \"A Conservative Loss Recovery Algorithm\n              Based on\
    \ Selective Acknowledgment (SACK) for TCP\",\n              RFC 6675, DOI 10.17487/RFC6675,\
    \ August 2012,\n              <https://www.rfc-editor.org/info/rfc6675>.\n   [RFC7567]\
    \  Baker, F., Ed. and G. Fairhurst, Ed., \"IETF\n              Recommendations\
    \ Regarding Active Queue Management\",\n              BCP 197, RFC 7567, DOI 10.17487/RFC7567,\
    \ July 2015,\n              <https://www.rfc-editor.org/info/rfc7567>.\n   [RFC8174]\
    \  Leiba, B., \"Ambiguity of Uppercase vs Lowercase in RFC\n              2119\
    \ Key Words\", BCP 14, RFC 8174, DOI 10.17487/RFC8174,\n              May 2017,\
    \ <https://www.rfc-editor.org/info/rfc8174>.\n"
- title: 8.2.  Informative References
  contents:
  - "8.2.  Informative References\n   [CEHRX07]  Cai, H., Eun, D., Ha, S., Rhee, I.,\
    \ and L. Xu, \"Stochastic\n              Ordering for Internet Congestion Control\
    \ and its\n              Applications\", In Proceedings of IEEE INFOCOM,\n   \
    \           DOI 10.1109/INFCOM.2007.111, May 2007.\n   [FHP00]    Floyd, S., Handley,\
    \ M., and J. Padhye, \"A Comparison of\n              Equation-Based and AIMD\
    \ Congestion Control\", May 2000.\n   [GV02]     Gorinsky, S. and H. Vin, \"Extended\
    \ Analysis of Binary\n              Adjustment Algorithms\", Technical Report\
    \ TR2002-29,\n              Department of Computer Sciences, The University of\n\
    \              Texas at Austin, August 2002.\n   [HKLRX06]  Ha, S., Kim, Y., Le,\
    \ L., Rhee, I., and L. Xu, \"A Step\n              toward Realistic Performance\
    \ Evaluation of High-Speed TCP\n              Variants\", International Workshop\
    \ on Protocols for Fast\n              Long-Distance Networks.\n   [HR08]    \
    \ Ha, S. and I. Rhee, \"Hybrid Slow Start for High-Bandwidth\n              and\
    \ Long-Distance Networks\", International Workshop on\n              Protocols\
    \ for Fast Long-Distance Networks.\n   [HRX08]    Ha, S., Rhee, I., and L. Xu,\
    \ \"CUBIC: A New TCP-Friendly\n              High-Speed TCP Variant\", ACM SIGOPS\
    \ Operating System\n              Review, DOI 10.1145/1400097.1400105, July 2008.\n\
    \   [K03]      Kelly, T., \"Scalable TCP: Improving Performance in\n         \
    \     HighSpeed Wide Area Networks\", ACM SIGCOMM\n              Computer Communication\
    \ Review, DOI 10.1145/956981.956989,\n              April 2003.\n   [KWAF17] \
    \  Khademi, N., Welzl, M., Armitage, G., and G. Fairhurst,\n              \"TCP\
    \ Alternative Backoff with ECN (ABE)\", Work in\n              Progress, draft-ietf-tcpm-alternativebackoff-ecn-05,\n\
    \              December 2017.\n   [XHR04]    Xu, L., Harfoush, K., and I. Rhee,\
    \ \"Binary Increase\n              Congestion Control for Fast, Long Distance\
    \ Networks\", In\n              Proceedings of IEEE INFOCOM,\n              DOI\
    \ 10.1109/INFCOM.2004.1354672, March 2004.\n"
- title: Acknowledgements
  contents:
  - "Acknowledgements\n   Alexander Zimmermann and Lars Eggert have received funding\
    \ from the\n   European Union's Horizon 2020 research and innovation program\n\
    \   2014-2018 under grant agreement No. 644866 (SSICLOPS).  This document\n  \
    \ reflects only the authors' views and the European Commission is not\n   responsible\
    \ for any use that may be made of the information it\n   contains.\n   The work\
    \ of Lisong Xu was partially supported by the National Science\n   Foundation\
    \ (NSF) under Grant No. 1526253.  Any opinions, findings,\n   and conclusions\
    \ or recommendations expressed in this material are\n   those of the authors and\
    \ do not necessarily reflect the views of the\n   NSF.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Injong Rhee\n   North Carolina State University\n   Department\
    \ of Computer Science\n   Raleigh, NC  27695-7534\n   United States of America\n\
    \   Email: rhee@ncsu.edu\n   Lisong Xu\n   University of Nebraska-Lincoln\n  \
    \ Department of Computer Science and Engineering\n   Lincoln, NE  68588-0115\n\
    \   United States of America\n   Email: xu@unl.edu\n   Sangtae Ha\n   University\
    \ of Colorado at Boulder\n   Department of Computer Science\n   Boulder, CO  80309-0430\n\
    \   United States of America\n   Email: sangtae.ha@colorado.edu\n   Alexander\
    \ Zimmermann\n   Phone: +49 175 5766838\n   Email: alexander.zimmermann@rwth-aachen.de\n\
    \   Lars Eggert\n   NetApp\n   Sonnenallee 1\n   Kirchheim  85551\n   Germany\n\
    \   Phone: +49 151 12055791\n   Email: lars@netapp.com\n   Richard Scheffenegger\n\
    \   NetApp\n   Am Europlatz 2\n   Vienna  1120\n   Austria\n   Email: rs.ietf@gmx.at\n"
