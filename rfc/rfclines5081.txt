Abstract This memo proposes extensions to the Transport Layer Security (TLS) protocol to support the OpenPGP key format.
The extensions discussed here include a certificate type negotiation mechanism, and the required modifications to the TLS Handshake Protocol.
The IETF has two sets of standards for public key certificates, one set for use of X.509 certificates [PKIX] and one for OpenPGP certificates [OpenPGP].
At the time of writing, TLS [TLS] standards are defined to use only X.509 certificates.
This document specifies a way to negotiate use of OpenPGP certificates for a TLS session, and specifies how to transport OpenPGP certificates via TLS.
The proposed extensions are backward compatible with the current TLS specification, so that existing client and server implementations that make use of X.509 certificates are not affected.
The term "OpenPGP key" is used in this document as in the OpenPGP specification [OpenPGP].
We use the term "OpenPGP certificate" to refer to OpenPGP keys that are enabled for authentication.
This document uses the same notation and terminology used in the TLS Protocol specification [TLS].
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in [RFC2119].
Changes to the Handshake Message Contents
This section describes the changes to the TLS handshake message contents when OpenPGP certificates are to be used for authentication.
In order to indicate the support of multiple certificate types, clients MUST include an extension of type "cert type" (see Section 5) to the extended client hello message.
The hello extension mechanism is described in [TLSEXT].
This extension carries a list of supported certificate types the client can use, sorted by client preference.
This extension MUST be omitted if the client only supports X.509 certificates.
The "extension data" field of this extension contains a CertificateTypeExtension structure.
enum { client, server } ClientOrServerExtension; enum { X.509(0), OpenPGP(1), (255) } CertificateType; struct { select(ClientOrServerExtension) { case client:
All existing cipher suites that support a compatible, with the key
, key exchange method can be used in combination with OpenPGP certificates.
If the server receives a client hello that contains the "cert type" extension and chooses a cipher suite that requires a certificate, then two outcomes are possible.
The server MUST either select a certificate type from the certificate types field in the extended client hello or terminate the connection with a fatal alert of type "unsupported certificate".
The certificate type selected by the server is encoded in a CertificateTypeExtension structure, which is included in the extended server hello message using an extension of type "cert type".
Servers that only support X.509 certificates MAY omit including the "cert type" extension in the extended server hello.
The contents of the certificate message sent from server to client and vice versa are determined by the negotiated certificate type and the selected cipher suite's key exchange algorithm.
If the OpenPGP certificate type is negotiated, then it is required to present an OpenPGP certificate in the certificate message.
The certificate must contain a public key that matches the selected key exchange algorithm, as shown below.
An OpenPGP certificate appearing in the certificate message is sent using the binary OpenPGP format.
The certificate MUST contain all the elements required by Section 11.1 of [OpenPGP].
The option is also available to send an OpenPGP fingerprint, instead of sending the entire certificate.
The process of fingerprint generation is described in Section 12.2 of [OpenPGP].
The peer shall respond with a "certificate unobtainable" fatal alert if the certificate with the given fingerprint cannot be found.
The "certificate unobtainable" fatal alert is defined in Section 4 of [TLSEXT].
enum { cert fingerprint (0), cert (1), (255)
} OpenPGPCertDescriptorType; opaque OpenPGPCertFingerprint<16..20>; opaque OpenPGPCert<0..
^24 1>; struct { OpenPGPCertDescriptorType descriptorType; select (descriptorType) {
; case cert: OpenPGPCert; }
The semantics of this message remain the same as in the TLS specification.
However, if this message is sent, and the negotiated certificate type is OpenPGP, the "certificate authorities" list MUST be empty.
This message is only sent in response to the certificate request message.
The client certificate message is sent using the same formatting as the server certificate message, and it is also required to present a certificate that matches the negotiated certificate type.
If OpenPGP certificates have been selected and no certificate is available from the client, then a certificate structure that contains an empty OpenPGPCert vector MUST be sent.
The server SHOULD respond with a "handshake failure" fatal alert if client authentication is required.
All the other handshake messages are identical to the TLS specification.
Security Considerations All security considerations discussed in [TLS]
, [TLSEXT], and [OpenPGP] apply to this document.
Considerations about the use of the web of trust or identity and certificate verification procedure are outside the scope of this document.
These are considered issues to be handled by the application layer protocols.
The protocol for certificate type negotiation is identical in operation to ciphersuite negotiation of the [TLS] specification with the addition of default values when the extension is omitted.
Since those omissions have a unique meaning and the same protection is applied to the values as with ciphersuites, it is believed that the security properties of this negotiation are the same as with ciphersuite negotiation.
When using OpenPGP fingerprints instead of the full certificates, the discussion in Section 6.3 of [TLSEXT] for "Client Certificate URLs" applies, especially when external servers are used to retrieve keys.
However, a major difference is that although the "client certificate url" extension allows identifying certificates without including the certificate hashes, this is not possible in the protocol proposed here.
In this protocol, the certificates, when not sent, are always identified by their fingerprint, which serves as a cryptographic hash of the certificate (see Section 12.2 of [OpenPGP]).
The information that is available to participating parties and eavesdroppers (when confidentiality is not available through a previous handshake) is the number and the types of certificates they hold, plus the contents of certificates.
This document defines a new TLS extension, "cert type", assigned a value of 9 from the TLS ExtensionType registry defined in [TLSEXT].
This value is used as the extension number for the extensions in both the client hello message and the server hello message.
The new extension type is used for certificate type negotiation.
The "cert type" extension contains an 8 bit CertificateType field, for which a new registry, named "TLS Certificate Types", is established in this document, to be maintained by IANA.
The registry is segmented in the following way: 1.
(X.509) and 1 (OpenPGP) are defined in this document.
Values from 2 through 223 decimal inclusive are assigned via IETF Consensus [RFC2434].
Values from 224 decimal through 255 decimal inclusive are reserved for Private Use [RFC2434].
