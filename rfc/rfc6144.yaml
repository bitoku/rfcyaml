- title: __initial_text__
  contents:
  - '                  Framework for IPv4/IPv6 Translation

    '
- title: Abstract
  contents:
  - "Abstract\n   This note describes a framework for IPv4/IPv6 translation.  This\
    \ is\n   in the context of replacing Network Address Translation - Protocol\n\
    \   Translation (NAT-PT), which was deprecated by RFC 4966, and to enable\n  \
    \ networks to have IPv4 and IPv6 coexist in a somewhat rational manner\n   while\
    \ transitioning to an IPv6 network.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document is not an Internet Standards Track specification;\
    \ it is\n   published for informational purposes.\n   This document is a product\
    \ of the Internet Engineering Task Force\n   (IETF).  It represents the consensus\
    \ of the IETF community.  It has\n   received public review and has been approved\
    \ for publication by the\n   Internet Engineering Steering Group (IESG).  Not\
    \ all documents\n   approved by the IESG are a candidate for any level of Internet\n\
    \   Standard; see Section 2 of RFC 5741.\n   Information about the current status\
    \ of this document, any errata,\n   and how to provide feedback on it may be obtained\
    \ at\n   http://www.rfc-editor.org/info/rfc6144.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2011 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction . . . . . . . . . . . . . . . . . . .\
    \ . . . . . .  3\n     1.1.  Why Translation? . . . . . . . . . . . . . . . .\
    \ . . . . .  4\n     1.2.  Terminology  . . . . . . . . . . . . . . . . . . .\
    \ . . . .  4\n     1.3.  Translation Objectives . . . . . . . . . . . . . . .\
    \ . . .  7\n     1.4.  Transition Plan  . . . . . . . . . . . . . . . . . . .\
    \ . .  9\n   2.  Scenarios for IPv4/IPv6 Translation  . . . . . . . . . . . .\
    \ . 11\n     2.1.  Scenario 1: An IPv6 Network to the IPv4 Internet . . . . .\
    \ 12\n     2.2.  Scenario 2: The IPv4 Internet to an IPv6 Network . . . . . 13\n\
    \     2.3.  Scenario 3: The IPv6 Internet to an IPv4 Network . . . . . 14\n  \
    \   2.4.  Scenario 4: An IPv4 Network to the IPv6 Internet . . . . . 15\n    \
    \ 2.5.  Scenario 5: An IPv6 Network to an IPv4 Network . . . . . . 16\n     2.6.\
    \  Scenario 6: An IPv4 Network to an IPv6 Network . . . . . . 17\n     2.7.  Scenario\
    \ 7: The IPv6 Internet to the IPv4 Internet . . . . 18\n     2.8.  Scenario 8:\
    \ The IPv4 Internet to the IPv6 Internet . . . . 19\n   3.  Framework  . . . .\
    \ . . . . . . . . . . . . . . . . . . . . . . 19\n     3.1.  Translation Components\
    \ . . . . . . . . . . . . . . . . . . 19\n       3.1.1.  Address Translation \
    \ . . . . . . . . . . . . . . . . . 19\n       3.1.2.  IP and ICMP Translation\
    \  . . . . . . . . . . . . . . . 21\n       3.1.3.  Maintaining Translation State\
    \  . . . . . . . . . . . . 21\n       3.1.4.  DNS64 and DNS46  . . . . . . . .\
    \ . . . . . . . . . . . 22\n       3.1.5.  ALGs for Other Applications Layer Protocols\
    \  . . . . . 22\n     3.2.  Operation Mode for Specific Scenarios  . . . . . .\
    \ . . . . 22\n       3.2.1.  Stateless Translation  . . . . . . . . . . . . .\
    \ . . . 23\n       3.2.2.  Stateful Translation . . . . . . . . . . . . . . .\
    \ . . 24\n     3.3.  Layout of the Related Documents  . . . . . . . . . . . .\
    \ . 26\n   4.  Translation in Operation . . . . . . . . . . . . . . . . . . .\
    \ 27\n   5.  Unsolved Problems  . . . . . . . . . . . . . . . . . . . . . . 28\n\
    \   6.  Security Considerations  . . . . . . . . . . . . . . . . . . . 28\n  \
    \ 7.  Acknowledgements . . . . . . . . . . . . . . . . . . . . . . . 29\n   8.\
    \  References . . . . . . . . . . . . . . . . . . . . . . . . . . 29\n     8.1.\
    \  Normative References . . . . . . . . . . . . . . . . . . . 29\n     8.2.  Informative\
    \ References . . . . . . . . . . . . . . . . . . 29\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   This note describes a framework for IPv4/IPv6 translation.\
    \  This is\n   in the context of replacing NAT-PT (Network Address Translation\
    \ -\n   Protocol Translation) [RFC2766], which was deprecated by [RFC4966],\n\
    \   and to enable networks to have IPv4 and IPv6 coexist in a somewhat\n   rational\
    \ manner while transitioning to an IPv6-only network.\n   NAT-PT was deprecated\
    \ to inform the community that NAT-PT had\n   operational issues and was not considered\
    \ a viable medium- or long-\n   term strategy for either coexistence or transition.\
    \  It wasn't\n   intended to say that IPv4<->IPv6 translation was bad, but the\
    \ way\n   that NAT-PT did it was bad, and in particular using NAT-PT as a\n  \
    \ general-purpose solution was bad.  As with the deprecation of the RIP\n   routing\
    \ protocol [RFC1923] at the time the Internet was converting to\n   Classless\
    \ Inter-Domain Routing (CIDR), the point was to encourage\n   network operators\
    \ to actually move away from technology with known\n   issues.\n   [RFC4213] describes\
    \ the IETF's view of the most sensible transition\n   model.  The IETF recommends,\
    \ in short, that network operators\n   (transit providers, service providers,\
    \ enterprise networks, small and\n   medium businesses, SOHO (Small Office, Home\
    \ Office) and residential\n   customers, and any other kind of network that may\
    \ currently be using\n   IPv4) obtain an IPv6 prefix, turn on IPv6 routing within\
    \ their\n   networks and between themselves and any peer, upstream, or downstream\n\
    \   neighbors, enable it on their computers, and use it in normal\n   processing.\
    \  This should be done while leaving IPv4 stable, until a\n   point is reached\
    \ that any communication that can be carried out could\n   use either protocol\
    \ equally well.  At that point, the economic\n   justification for running both\
    \ becomes debatable, and network\n   operators can justifiably turn IPv4 off.\
    \  This process is comparable\n   to that of [RFC4192], which describes how to\
    \ renumber a network using\n   the same address family without a flag day.  While\
    \ running stably\n   with the older system, deploy the new.  Use the coexistence\
    \ period to\n   work out such kinks as they arise.  When the new is also running\n\
    \   stably, shift production to it.  When network and economic conditions\n  \
    \ warrant, remove the old, which is now no longer necessary.\n   The question\
    \ arises: what if that is infeasible due to the time\n   available to deploy or\
    \ other considerations?  What if the process of\n   moving a network and its components\
    \ or customers is starting too late\n   for contract cycles to effect IPv6 turn-up\
    \ on important parts at a\n   point where it becomes uneconomical to deploy global\
    \ IPv4 addresses\n   in new services?  How does one continue to deploy new services\n\
    \   without balkanizing the network?\n   This document describes translation as\
    \ one of the tools networks\n   might use to facilitate coexistence and ultimate\
    \ transition.\n"
- title: 1.1.  Why Translation?
  contents:
  - "1.1.  Why Translation?\n   Besides dual-stack deployment, there are two fundamental\
    \ approaches\n   one could take to interworking between IPv4 and IPv6: tunneling\
    \ and\n   translation.  One could -- and in the [6NET] we did -- build an\n  \
    \ overlay network that tunnels one protocol over the other.  Various\n   proposals\
    \ take that model, including 6to4 [RFC3056], Teredo\n   [RFC4380], Intra-Site\
    \ Automatic Tunnel Addressing Protocol (ISATAP)\n   [RFC5214], and Dual-Stack\
    \ Lite [DS-LITE].  The advantage of doing so\n   is that the new protocol is enabled\
    \ to work without disturbing the\n   old protocol, providing connectivity between\
    \ users of the new\n   protocol.  There are two disadvantages to tunneling:\n\
    \   o  Users of the new architecture are unable to use the services of\n     \
    \ the underlying infrastructure -- it is just bandwidth, and\n   o  It doesn't\
    \ enable new protocol users to communicate with old\n      protocol users without\
    \ dual-stack hosts.\n   As noted, in this work, we look at Internet Protocol translation\
    \ as a\n   transition strategy.  [RFC4864] forcefully makes the point that\n \
    \  people use Network Address Translators to meet various needs, many of\n   which\
    \ are met as well by routing or protocol mechanisms that preserve\n   the end-to-end\
    \ addressability of the Internet.  What it did not\n   consider is the case in\
    \ which there is an ongoing requirement to\n   communicate with IPv4 systems,\
    \ but, for example, configuring IPv4\n   routing is not the most desirable strategy\
    \ in the network operator's\n   view, or is infeasible due to a shortage of global\
    \ address space.\n   Translation enables the client of a network, whether a transit\n\
    \   network, an access network, or an edge network, to access the\n   services\
    \ of the network and communicate with other network users\n   regardless of their\
    \ protocol usage -- within limits.  Like NAT-PT,\n   IPv4/IPv6 translation under\
    \ this rubric is not a long-term support\n   strategy, but it is a medium-term\
    \ coexistence strategy that can be\n   used to facilitate a long-term program\
    \ of transition.\n"
- title: 1.2.  Terminology
  contents:
  - "1.2.  Terminology\n   The following terminology is used in this document and\
    \ other\n   documents related to it.\n   An IPv4 network:  A specific network\
    \ that has an IPv4-only\n      deployment.  This could be an enterprise's IPv4-only\
    \ network, an\n      ISP's IPv4-only network, or even an IPv4-only host.  The\
    \ IPv4\n      Internet is the set of all interconnected IPv4 networks.\n   An\
    \ IPv6 network:  A specific network that has an IPv6-only\n      deployment. \
    \ This could be an enterprise's IPv6-only network, an\n      ISP's IPv6-only network,\
    \ or even an IPv6-only host.  The IPv6\n      Internet is the set of all interconnected\
    \ IPv6 networks.\n   DNS46:  A DNS translator that translates AAAA record to A\
    \ record.\n   DNS64:  A DNS translator that translates A record to AAAA record.\n\
    \   Dual-Stack implementation:  A dual-stack implementation, in this\n      context,\
    \ comprises an IPv4/IPv6-enabled end system stack,\n      applications plus routing\
    \ in the network.  It implies that two\n      application instances are capable\
    \ of communicating using either\n      IPv4 or IPv6 -- they have stacks, they\
    \ have addresses, and they\n      have any necessary network support including\
    \ routing.\n   IPv4-converted addresses:  IPv6 addresses used to represent IPv4\n\
    \      nodes in an IPv6 network.  They have an explicit mapping\n      relationship\
    \ to IPv4 addresses.  Both stateless and stateful\n      translators use IPv4-converted\
    \ addresses to represent IPv4\n      addresses.\n   IPv4-only:  An IPv4-only implementation,\
    \ in this context, comprises\n      an IPv4-enabled end system stack, applications\
    \ directly or\n      indirectly using that IPv4 stack, plus routing in the network.\
    \  It\n      implies that two application instances are capable of\n      communicating\
    \ using IPv4, but not IPv6 -- they have an IPv4 stack,\n      addresses, and network\
    \ support including IPv4 routing and\n      potentially IPv4/IPv4 translation,\
    \ but some element is missing\n      that prevents communication with IPv6 hosts.\n\
    \   IPv4-translatable addresses:  IPv6 addresses to be assigned to IPv6\n    \
    \  nodes for use with stateless translation.  They have an explicit\n      mapping\
    \ relationship to IPv4 addresses.  A stateless translator\n      uses the corresponding\
    \ IPv4 addresses to represent the IPv6\n      addresses.  A stateful translator\
    \ does not use this kind of\n      addresses, since IPv6 hosts are represented\
    \ by the IPv4 address\n      pool in the translator via dynamic state.\n   IPv6-only:\
    \  An IPv6-only implementation, in this context, comprises\n      an IPv6-enabled\
    \ end system stack, applications directly or\n      indirectly using that IPv6\
    \ stack, plus routing in the network.  It\n      implies that two application\
    \ instances are capable of\n      communicating using IPv6, but not IPv4 -- they\
    \ have an IPv6 stack,\n      addresses, and network support including routing\
    \ in IPv6, but some\n      element is missing that prevents communication with\
    \ IPv4 hosts.\n   Network-Specific Prefix (NSP):  From an IPv6 prefix assigned\
    \ to a\n      network operator, the operator chooses a longer prefix for use by\n\
    \      the operator's translator(s).  Hence, a given IPv4 address would\n    \
    \  have different IPv6 representations in different networks that use\n      different\
    \ network-specific prefixes.  A network-specific prefix is\n      also known as\
    \ a Local Internet Registry (LIR) prefix.\n   State:  \"State\" refers to dynamic\
    \ information that is stored in a\n      network element.  For example, if two\
    \ systems are communicating\n      using a TCP connection, each stores information\
    \ about the\n      connection, which is called \"connection state\".  In this\
    \ context,\n      the term refers to dynamic correlations between IP addresses\
    \ on\n      either side of a translator, or {IP address, transport protocol,\n\
    \      transport port number} tuples on either side of the translator.\n     \
    \ Of stateful algorithms, there are at least two major flavors\n      depending\
    \ on the kind of state they maintain:\n      Hidden state:  the existence of this\
    \ state is unknown outside the\n         network element that contains it.\n \
    \     Known state:  the existence of this state is known by other\n         network\
    \ elements.\n   Stateful Translation:  A translation algorithm may be said to\n\
    \      \"require state in a network element\" or be \"stateful\" if the\n    \
    \  transmission or reception of a packet creates or modifies a data\n      structure\
    \ in the relevant network element.\n   Stateful Translator:  A translator that\
    \ uses stateful translation for\n      either the source or destination address.\
    \  A stateful translator\n      typically also uses a stateless translation algorithm\
    \ for the\n      other type of address.\n   Stateless Translation:  A translation\
    \ algorithm that is not\n      \"stateful\" is \"stateless\".  It derives its\
    \ needed information\n      algorithmically from the messages it is translating\
    \ and from pre-\n      configured information.\n   Stateless Translator:  A translator\
    \ that uses only stateless\n      translation for both destination address and\
    \ source address.\n   Well-Known Prefix (WKP):  The IPv6 prefix defined in [RFC6052]\
    \ for\n      use in an algorithmic mapping.\n"
- title: 1.3.  Translation Objectives
  contents:
  - "1.3.  Translation Objectives\n   In any translation model, there is a question\
    \ of objectives.\n   Ideally, one would like to make any system and any application\n\
    \   running on it able to \"talk with\" -- exchange datagrams supporting\n   applications\
    \ with -- any other system running the same application\n   regardless of whether\
    \ they have an IPv4 stack and connectivity or\n   IPv6 stack and connectivity.\
    \  That was the model for NAT-PT, and the\n   things it necessitated led to scaling\
    \ and operational difficulties\n   [RFC4966].\n   So the question comes back to\
    \ what different kinds of connectivity\n   can be easily supported, what kinds\
    \ are harder, and what technologies\n   are needed to at least pick the low-hanging\
    \ fruit.  We observe that\n   applications today fall into two main categories:\n\
    \   Client/Server Application:  Per whatis.com, \"'Client/server'\n      describes\
    \ the relationship between two computer programs in which\n      one program,\
    \ the client, makes a service request from another\n      program, the server,\
    \ which fulfills the request.\"  In networking,\n      the behavior of the applications\
    \ is that connections are initiated\n      from client software and systems to\
    \ server software and systems.\n      Examples include mail handling between an\
    \ end user and his mail\n      system (POP3, IMAP, and MUA->MTA SMTP), FTP, the\
    \ web, and DNS name\n      resolution.\n   Peer-to-Peer (P2P) Application:  A\
    \ P2P application is an application\n      that uses the same endpoint to initiate\
    \ outgoing sessions to\n      peering hosts as well as accept incoming sessions\
    \ from peering\n      hosts.  These in turn fall broadly into two categories:\n\
    \      Peer-to-peer infrastructure applications:  Examples of\n         \"infrastructure\
    \ applications\" include SMTP between MTAs,\n         Network News, and SIP. \
    \ Any MTA might open an SMTP session with\n         any other at any time; any\
    \ SIP Proxy might similarly connect\n         with any other SIP Proxy.  An important\
    \ characteristic of these\n         applications is that they use ephemeral sessions\
    \ -- they open\n         sessions when they are needed and close them when they\
    \ are\n         done.\n      Peer-to-peer file exchange applications:  Examples\
    \ of these\n         include Limewire, BitTorrent, and UTorrent.  These are\n\
    \         applications that open some sessions between systems and leave\n   \
    \      them open for long periods of time, and where ephemeral\n         sessions\
    \ are important, these applications are able to learn\n         about the reliability\
    \ of peers from history or by reputation.\n         They use the long-term sessions\
    \ to map content availability.\n         Short-term sessions are used to exchange\
    \ content.  They tend to\n         prefer to ask for content from peers that they\
    \ find reliable\n         and available.\n   If the goal is the ability to open\
    \ connections between systems, then\n   one must ask who opens connections.\n\
    \   o  We need a technology that will enable systems that act as clients\n   \
    \   to be able to open sessions with other systems that act as\n      servers,\
    \ whether in the IPv6->IPv4 direction or the IPv4->IPv6\n      direction.  Ideally,\
    \ this is stateless; especially in a carrier\n      infrastructure, the preponderance\
    \ of accesses will be to servers,\n      and this optimizes access to them.  However,\
    \ a stateful algorithm\n      is acceptable if the complexity is minimized and\
    \ a stateless\n      algorithm cannot be constructed.\n   o  We also need a technology\
    \ that will allow peers to connect with\n      each other, whether in the IPv6->IPv4\
    \ direction or the IPv4->IPv6\n      direction.  Again, it would be ideal if this\
    \ was stateless, but a\n      stateful algorithm is acceptable if the complexity\
    \ is minimized\n      and a stateless algorithm cannot be constructed.\n   o \
    \ In some situations, hosts are purely clients.  In those\n      situations, we\
    \ do not need an algorithm to enable connections to\n      those hosts.\n   The\
    \ complexity arguments bring us in the direction of hidden state:\n   if state\
    \ must be shared between the application and the translator or\n   between translation\
    \ components, complexity and deployment issues are\n   greatly magnified.  The\
    \ objective of the translators is to avoid, as\n   much as possible, any software\
    \ changes in hosts or applications\n   necessary to support translation.\n   NAT-PT\
    \ is an example of a facility with known state -- at least two\n   software components\
    \ (the data-plane translator and the DNS\n   Application Layer Gateway, which\
    \ may be implemented in the same or\n   different systems) share and must coordinate\
    \ translation state.  A\n   typical IPv4/IPv4 NAT implements an algorithm with\
    \ hidden state.\n   Obviously, stateless translation requires less computational\
    \ overhead\n   than stateful translation, and less memory to maintain the state,\n\
    \   because the translation tables and their associated methods and\n   processes\
    \ exist in a stateful algorithm and don't exist in a\n   stateless one.\n"
- title: 1.4.  Transition Plan
  contents:
  - "1.4.  Transition Plan\n   While the design of IPv4 made it impossible for IPv6\
    \ to be compatible\n   on the wire, the designers intended that it would coexist\
    \ with IPv4\n   during a period of transition.  The primary mode of coexistence\
    \ was\n   dual-stack operation -- routers would be dual-stacked so that the\n\
    \   network could carry both address families, and IPv6-capable hosts\n   could\
    \ be dual-stack to maintain access to IPv4-only partners.  The\n   goal was that\
    \ the preponderance of hosts and routers in the Internet\n   would be IPv6-capable\
    \ long before IPv4 address space allocation was\n   completed.  At this time,\
    \ it appears the exhaustion of IPv4 address\n   space will occur before significant\
    \ IPv6 adoption.\n   Curran's \"A Transition Plan\" [RFC5211] proposes a three-phase\n\
    \   progression:\n   Preparation Phase (current):  characterized by pilot use\
    \ of IPv6,\n      primarily through transition mechanisms defined in [RFC4213],\
    \ and\n      planning activities.\n   Transition Phase (2010 through 2011):  characterized\
    \ by general\n      availability of IPv6 in provider networks, which should be\
    \ native\n      IPv6; organizations should provide IPv6 connectivity for their\n\
    \      Internet-facing servers, but should still provide IPv4-based\n      services\
    \ via a separate service name.\n   Post-Transition Phase (2012 and beyond):  characterized\
    \ by a\n      preponderance of IPv6-based services and diminishing support for\n\
    \      IPv4-based services.\n   Various timelines have been discussed, but most\
    \ will agree with the\n   pattern of the above three transition phases, also known\
    \ as an \"S\"\n   curve transition pattern.\n   In each of these phases, the coexistence\
    \ problem and solution space\n   have a different focus:\n   Preparation Phase:\
    \  Coexistence tools are needed to facilitate early\n      adopters by removing\
    \ impediments to IPv6 deployment and to assure\n      that nothing is lost by\
    \ adopting IPv6 -- in particular, that the\n      IPv6 adopter has unfettered\
    \ access to the global IPv4 Internet\n      regardless of whether they have a\
    \ global IPv4 address (or any IPv4\n      address or stack at all).  While it\
    \ might appear reasonable for\n      the cost and operational burden to be borne\
    \ by the early adopter,\n      the shared goal of promoting IPv6 adoption would\
    \ argue against\n      that model.  Additionally, current IPv4 users should not\
    \ be forced\n      to retire or upgrade their equipment, and the burden remains\
    \ on\n      service providers to carry and route native IPv4.  This is known\n\
    \      as the early stage of the \"S\" curve.\n   Transition Phase:  During the\
    \ middle stage of the \"S\" curve, while\n      IPv6 adoption can be expected\
    \ to accelerate, there will still be a\n      significant portion of the Internet\
    \ operating IPv4-only or\n      preferring IPv4.  During this phase, the norm\
    \ shifts from IPv4 to\n      IPv6, and coexistence tools evolve to ensure interoperability\n\
    \      between domains that may be restricted to IPv4 or IPv6.\n   Post-Transition\
    \ Phase:  This is the last stage of the \"S\" curve.  In\n      this phase, IPv6\
    \ is ubiquitous and the burden of maintaining\n      interoperability shifts to\
    \ those who choose to maintain IPv4-only\n      systems.  While these systems\
    \ should be allowed to live out their\n      economic life cycles, the IPv4-only\
    \ legacy users at the edges\n      should bear the cost of coexistence tools,\
    \ and at some point\n      service provider networks should not be expected to\
    \ carry and\n      route native IPv4 traffic.\n   The choice between the terms\
    \ \"transition\" versus \"coexistence\" has\n   engendered long philosophical\
    \ debate.  \"Transition\" carries the sense\n   that one is going somewhere, while\
    \ \"coexistence\" seems more like one\n   is sitting somewhere.  Historically\
    \ with the IETF, \"transition\" has\n   been the term of choice [RFC4213] [RFC5211],\
    \ and the tools for\n   interoperability have been called \"transition mechanisms\"\
    .  There is\n   some perception or conventional wisdom that adoption of IPv6 is\
    \ being\n   impeded by the deficiency of tools to facilitate interoperability\
    \ of\n   nodes or networks that are constrained (in some way, fully or\n   partially)\
    \ from full operation in one of the address families.  In\n   addition, it is\
    \ apparent that transition will involve a period of\n   coexistence; the only\
    \ real question is how long that will last.\n   Thus, coexistence is an integral\
    \ part of the transition plan, not in\n   conflict with it, but there will be\
    \ a balancing act.  It starts out\n   being a way for early IPv6 adopters to easily\
    \ exploit the bigger IPv4\n   Internet, and ends up being a way for late/never\
    \ adopters to hang on\n   with IPv4 (at their own expense, with minimal impact\
    \ or visibility to\n   the Internet).  One way to look at solutions is that cost\
    \ incentives\n   (both monetary cost and the operational overhead for the end\
    \ user)\n   should encourage IPv6 and discourage IPv4.  That way natural market\n\
    \   forces will keep the transition moving -- especially as the legacy\n   IPv4-only\
    \ stuff ages out of use.  The end goal should not be to\n   eliminate IPv4 by\
    \ fiat, but rather render it redundant through\n   ubiquitous IPv6 deployment.\
    \  IPv4 may never go away completely, but\n   rational plans should move the costs\
    \ of maintaining IPv4 to those who\n   insist on using it after wide adoption\
    \ of IPv6.\n"
- title: 2.  Scenarios for IPv4/IPv6 Translation
  contents:
  - "2.  Scenarios for IPv4/IPv6 Translation\n   It is important to note that the\
    \ choice of translation solution and\n   the assumptions about the network where\
    \ they are used impact the\n   consequences.  A translator for the general case\
    \ has a number of\n   issues that a translator for a more specific situation may\
    \ not have\n   at all.\n   The intention of this document is to focus on translation\
    \ solutions\n   under all kinds of situations.  All IPv4/IPv6 translation cases\
    \ can\n   be easily described in terms of \"interoperation between a set of\n\
    \   systems (applications) that only communicate using IPv4 and a set of\n   systems\
    \ that only communicate using IPv6\", but the differences at a\n   detailed level\
    \ make them interesting.\n   Based on the transition plan described in Section\
    \ 1.4, there are four\n   types of IPv4/IPv6 translation cases:\n   a.  Interoperation\
    \ between an IPv6 network and the IPv4 Internet\n   b.  Interoperation between\
    \ an IPv4 network and the IPv6 Internet\n   c.  Interoperation between an IPv6\
    \ network and an IPv4 network\n   d.  Interoperation between the IPv6 Internet\
    \ and the IPv4 Internet\n   Each one of the above can be divided into two scenarios,\
    \ depending on\n   whether the IPv6 side or the IPv4 side initiates communication,\
    \ so\n   there are a total of eight scenarios.\n   Scenario 1: an IPv6 network\
    \ to the IPv4 Internet\n   Scenario 2: the IPv4 Internet to an IPv6 network\n\
    \   Scenario 3: the IPv6 Internet to an IPv4 network\n   Scenario 4: an IPv4 network\
    \ to the IPv6 Internet\n   Scenario 5: an IPv6 network to an IPv4 network\n  \
    \ Scenario 6: an IPv4 network to an IPv6 network\n   Scenario 7: the IPv6 Internet\
    \ to the IPv4 Internet\n   Scenario 8: the IPv4 Internet to the IPv6 Internet\n\
    \   We will discuss each scenario in detail in the next section.\n"
- title: '2.1.  Scenario 1: An IPv6 Network to the IPv4 Internet'
  contents:
  - "2.1.  Scenario 1: An IPv6 Network to the IPv4 Internet\n   Due to the lack of\
    \ IPv4 addresses or due to other technical or\n   economical constraints, the\
    \ network is IPv6-only, but the hosts in\n   the network require communicating\
    \ with the global IPv4 Internet.\n   This is the typical scenario for what we\
    \ sometimes call \"green-field\"\n   deployments.  One example is an enterprise\
    \ network that wishes to\n   operate only IPv6 for operational simplicity, but\
    \ still wishes to\n   reach the content in the IPv4 Internet.  The green-field\
    \ enterprise\n   scenario is different from an ISP's network in the sense that\
    \ there\n   is only one place that the enterprise can easily modify: the border\n\
    \   between its network and the IPv4 Internet.  Obviously, the IPv4\n   Internet\
    \ operates the way it already does.  But, in addition, the\n   hosts in the enterprise\
    \ network are commercially available devices,\n   personal computers with existing\
    \ operating systems.  This restriction\n   drives us to a \"one box\" type of\
    \ solution, where IPv6 can be\n   translated into IPv4 to reach the public Internet.\n\
    \   Other cases that have been mentioned include wireless ISP networks\n   and\
    \ sensor networks.  These bear a striking resemblance to this\n   scenario as\
    \ well, if one considers the ISP network to simply be a\n   very special kind\
    \ of enterprise network.\n               --------\n             //        \\\\\
    \       -----------\n            /            \\     //          \\\\\n      \
    \     /             +----+              \\\n          |              |XLAT|  \
    \             |\n          |  The IPv4    +----+  An IPv6      |\n          |\
    \  Internet    +----+  Network      |  XLAT: IPv6/IPv4\n          |          \
    \    |DNS |               |        Translator\n           \\             +----+\
    \              /   DNS:  DNS64\n            \\            /     \\\\         \
    \ //\n             \\\\        //       -----------\n                --------\n\
    \                          <====\n                           Figure 1: Scenario\
    \ 1\n   Both stateless and stateful solutions can support Scenario 1.\n"
- title: '2.2.  Scenario 2: The IPv4 Internet to an IPv6 Network'
  contents:
  - "2.2.  Scenario 2: The IPv4 Internet to an IPv6 Network\n   When the enterprise\
    \ networks or ISP networks adopt Scenario 1, the\n   IPv6-only users will not\
    \ only want to access servers on the IPv4\n   Internet but also will want to setup\
    \ their own servers in the network\n   that are accessible by the users on the\
    \ IPv4 Internet, since the\n   majority of the Internet users are still in the\
    \ IPv4 Internet.  Thus,\n   with a translation solution for this scenario, the\
    \ benefits would be\n   clear.  Not only could servers move directly to IPv6 without\
    \ trudging\n   through a difficult transition period, but they could do so without\n\
    \   risk of losing connectivity with the IPv4-only Internet.\n               --------\n\
    \             //        \\\\        ----------\n            /            \\  \
    \   //          \\\\\n           /             +----+              \\\n      \
    \    |              |XLAT|               |\n          |  The IPv4    +----+  An\
    \ IPv6      |\n          |  Internet    +----+  Network      |  XLAT: IPv4/IPv6\n\
    \          |              |DNS |               |        Translator\n         \
    \  \\             +----+              /   DNS:  DNS46\n            \\        \
    \    /     \\\\          //\n             \\\\        //        ----------\n \
    \              --------\n                          ====>\n                   \
    \        Figure 2: Scenario 2\n   In general, this scenario presents a hard case\
    \ for translation.\n   Stateful translation such as NAT-PT [RFC2766] can be used\
    \ in this\n   scenario, but it requires a tightly coupled DNS Application Level\n\
    \   Gateway (ALG) in the translator, and this technique was deprecated by\n  \
    \ the IETF [RFC4966].\n   The stateless translation solution in Scenario 1 can\
    \ also work in\n   Scenario 2, since it can support IPv4-initiated communications\
    \ with a\n   subset of the IPv6 addresses (IPv4-translatable addresses) in an\
    \ IPv6\n   network.\n"
- title: '2.3.  Scenario 3: The IPv6 Internet to an IPv4 Network'
  contents:
  - "2.3.  Scenario 3: The IPv6 Internet to an IPv4 Network\n   There is a requirement\
    \ for a legacy IPv4 network to provide services\n   to IPv6 hosts.\n         \
    \                       -----------\n              ----------       //       \
    \  \\\\\n            //          \\\\    /             \\\n           /      \
    \       +----+              \\\n          |              |XLAT|              \
    \ |\n          |  An IPv4     +----+  The IPv6     |\n          |  Network   \
    \  +----+  Internet     |  XLAT: IPv6/IPv4\n          |              |DNS |  \
    \             |        Translator\n           \\             +----+          \
    \     /  DNS:  DNS64\n            \\\\         //      \\             /\n    \
    \          ---------         \\\\         //\n                               \
    \  -----------\n                         <====\n                           Figure\
    \ 3: Scenario 3\n   Stateless translation will not work for this scenario, because\
    \ an\n   IPv4 network needs to communicate with all of the IPv6 Internet, not\n\
    \   just a small subset, and stateless can only support a subset of the\n   IPv6\
    \ addresses.  However, IPv6-initiated communication can be\n   achieved through\
    \ stateful translation.  In this case, a Network\n   Specific Prefix assigned\
    \ to the translator will give the hosts unique\n   IPv4-converted IPv6 addresses,\
    \ no matter whether the legacy IPv4\n   network uses public IPv4 addresses or\
    \ [RFC1918] addresses.  Also\n   there is no need to synthesize AAAA from A records,\
    \ since static AAAA\n   records can be put in the regular DNS to represent these\
    \ IPv4-only\n   hosts as discussed in Section 7.3 of [RFC6147].\n"
- title: '2.4.  Scenario 4: An IPv4 Network to the IPv6 Internet'
  contents:
  - "2.4.  Scenario 4: An IPv4 Network to the IPv6 Internet\n   Due to technical or\
    \ economical constraints, the network is IPv4-only,\n   and IPv4-only hosts (applications)\
    \ may require communicating with the\n   global IPv6 Internet.\n             \
    \                   -----------\n              ----------       //         \\\\\
    \n            //          \\\\    /             \\\n           /             +----+\
    \              \\\n          |              |XLAT|               |\n         \
    \ |  An IPv4     +----+  The IPv6     |  XLAT: IPv4/IPv6\n          |  Network\
    \     +----+  Internet     |        Translator\n          |              |DNS\
    \ |               |  DNS:  DNS46\n           \\             +----+           \
    \    /\n            \\\\         //      \\             /\n              ---------\
    \         \\\\         //\n                                 ----------\n     \
    \                    =====>\n                           Figure 4: Scenario 4\n\
    \   In general, this scenario presents a hard case for translation.\n   Stateful\
    \ translation such as NAT-PT [RFC2766] can be used in this\n   scenario, but it\
    \ requires a tightly coupled DNS ALG in the\n   translator, and this technique\
    \ was deprecated by the IETF [RFC4966].\n   From the transition phase discussion\
    \ in Section 1.4, this scenario\n   will probably only occur when we are well\
    \ past the early stage of the\n   \"S\" curve, and the IPv4/IPv6 transition has\
    \ already moved to the\n   right direction.  Therefore, in-network translation\
    \ is not considered\n   viable for this scenario, and other techniques should\
    \ be considered.\n"
- title: '2.5.  Scenario 5: An IPv6 Network to an IPv4 Network'
  contents:
  - "2.5.  Scenario 5: An IPv6 Network to an IPv4 Network\n   In this scenario, both\
    \ an IPv4 network and an IPv6 network are within\n   the same organization.\n\
    \   The IPv4 addresses used are either public IPv4 addresses or [RFC1918]\n  \
    \ addresses.  The IPv6 addresses used are either public IPv6 addresses\n   or\
    \ ULAs (Unique Local Addresses) [RFC4193].\n              ---------          ---------\n\
    \            //         \\\\      //          \\\\\n           /             +----+\
    \              \\\n          |              |XLAT|               |\n         \
    \ |  An IPv4     +----+  An IPv6      |\n          |  Network     +----+  Network\
    \      |  XLAT: IPv6/IPv4\n          |              |DNS |               |   \
    \     Translator\n           \\             +----+              /   DNS:  DNS64\n\
    \            \\\\         //      \\\\          //\n               --------  \
    \        ---------\n                         <====\n                         \
    \  Figure 5: Scenario 5\n   The translation requirement from this scenario has\
    \ no significant\n   difference from Scenario 1, so both the stateful and stateless\n\
    \   translation schemes discussed in Section 2.1 apply here.\n"
- title: '2.6.  Scenario 6: An IPv4 Network to an IPv6 Network'
  contents:
  - "2.6.  Scenario 6: An IPv4 Network to an IPv6 Network\n   This is another scenario\
    \ when both an IPv4 network and an IPv6\n   network are within the same organization.\n\
    \   The IPv4 addresses used are either public IPv4 addresses or [RFC1918]\n  \
    \ addresses.  The IPv6 addresses used are either public IPv6 addresses\n   or\
    \ ULAs (Unique Local Addresses) [RFC4193].\n               --------          ---------\n\
    \            //         \\\\      //          \\\\\n           /             +----+\
    \              \\\n          |              |XLAT|               |\n         \
    \ |  An IPv4     +----+  An IPv6      |\n          |  Network     +----+  Network\
    \      |  XLAT: IPv4/IPv6\n          |              |DNS |               |   \
    \     Translator\n           \\             +----+              /   DNS:  DNS46\n\
    \             \\\\        //      \\\\          //\n               --------  \
    \        ---------\n                           ====>\n                       \
    \    Figure 6: Scenario 6\n   The translation requirement from this scenario has\
    \ no significant\n   difference from Scenario 2, so the translation scheme discussed\
    \ in\n   Section 2.2 applies here.\n"
- title: '2.7.  Scenario 7: The IPv6 Internet to the IPv4 Internet'
  contents:
  - "2.7.  Scenario 7: The IPv6 Internet to the IPv4 Internet\n   This seems the ideal\
    \ case for in-network translation technology,\n   where any IPv6-only host or\
    \ application on the global Internet can\n   initiate communication with any IPv4-only\
    \ host or application on the\n   global Internet.\n               --------   \
    \       ---------\n             //       \\\\        //        \\\\\n        \
    \    /           \\      /            \\\n           /             +----+    \
    \          \\\n          |              |XLAT|               |\n          |  The\
    \ IPv4    +----+  The IPv6     |\n          |  Internet    +----+  Internet  \
    \   |  XLAT: IPv6/IPv4\n          |              |DNS |               |      \
    \  Translator\n           \\             +----+              /   DNS:  DNS64\n\
    \             \\          /      \\            /\n              \\\\      // \
    \       \\\\        //\n               --------          ---------\n         \
    \                <====\n                           Figure 7: Scenario 7\n   Due\
    \ to the huge difference in size between the address spaces of the\n   IPv4 Internet\
    \ and the IPv6 Internet, there is no viable translation\n   technique to handle\
    \ unlimited IPv6 address translation.\n   If we ever run into this scenario, fortunately,\
    \ the IPv4/IPv6\n   transition has already passed the early stage of the \"S\"\
    \ curve.\n   Therefore, there is no obvious business reason to demand a\n   translation\
    \ solution as the only transition strategy.\n"
- title: '2.8.  Scenario 8: The IPv4 Internet to the IPv6 Internet'
  contents:
  - "2.8.  Scenario 8: The IPv4 Internet to the IPv6 Internet\n   This case is very\
    \ similar to Scenario 7.  The analysis and\n   conclusions for Scenario 7 also\
    \ apply for this scenario.\n               --------          ---------\n     \
    \        //       \\\\        //        \\\\\n            /           \\     \
    \ /            \\\n           /             +----+              \\\n         \
    \ |              |XLAT|               |\n          |  The IPv4    +----+  The\
    \ IPv6     |\n          |  Internet    +----+  Internet     |  XLAT: IPv4/IPv6\n\
    \          |              |DNS |               |        Translator\n         \
    \  \\             +----+              /   DNS:  DNS46\n             \\       \
    \   /      \\            /\n              \\\\      //        \\\\        //\n\
    \               --------          ---------\n                           ====>\n\
    \                           Figure 8: Scenario 8\n"
- title: 3.  Framework
  contents:
  - "3.  Framework\n   Having laid out the preferred transition model and the options\
    \ for\n   implementing it (Section 1.1), defined terms (Section 1.2),\n   considered\
    \ the requirements (Section 1.3), considered the transition\n   model (Section\
    \ 1.4), and considered the kinds of scenarios the\n   facility would support (Section\
    \ 2), we now turn to a framework for\n   IPv4/IPv6 translation.  The framework\
    \ contains the following\n   components:\n   o  Address translation\n   o  IP\
    \ and ICMP translation\n   o  Maintaining translation state\n   o  DNS64 and DNS46\n\
    \   o  ALGs for other application-layer protocols (e.g., FTP)\n"
- title: 3.1.  Translation Components
  contents:
  - '3.1.  Translation Components

    '
- title: 3.1.1.  Address Translation
  contents:
  - "3.1.1.  Address Translation\n   When IPv6/IPv4 translation is performed, we should\
    \ specify how an\n   individual IPv6 address is translated to a corresponding\
    \ IPv4\n   address, and vice versa, in cases where an algorithmic mapping is\n\
    \   used.  This includes the choice of IPv6 prefix and the choice of\n   method\
    \ by which the remainder of the IPv6 address is derived from an\n   IPv4 address\
    \ [RFC6052].  The usages of the IPv6 addresses are shown\n   in the following\
    \ figures.\n          ------------\n    H4 - (IPv4 network) - IPv4 address corresponding\
    \ to H6's IPv4-\n    (IPv4 ------------            translatable address\n    address)\
    \          \\\n                       --------------\n                      |Stateless\
    \ XLAT|\n                       --------------\n                             \
    \        \\\n                                     -----------\n    IPv4-converted\
    \ address of H4 - (IPv6 network) - H6 (IPv4-\n                               \
    \      -----------   translatable address)\n      Figure 9: IPv6 Address Representation\
    \ for Stateless Translation\n         ------------\n   H4 - (IPv4 network) - IPv4\
    \ address in the translator's IPv4 pool\n   (IPv4 ------------\n   address)  \
    \        \\\n                      --------------\n                     |Stateful\
    \ XLAT |\n                      --------------\n                             \
    \       \\\n                                    -----------\n   IPv4-converted\
    \ address of H4 - (IPv6 network) - H6 (any IPv6 address)\n                   \
    \                 -----------\n      Figure 10: IPv6 Address Representation for\
    \ Stateful Translation\n   For both stateless and stateful translation, an algorithmic\
    \ mapping\n   table is used to translate IPv6 destination addresses (IPv4-converted\n\
    \   addresses) to IPv4 destination addresses in the IPv6-to-IPv4\n   direction\
    \ and translate IPv4 source addresses to IPv6 source\n   addresses (IPv4-converted\
    \ addresses) in the IPv4-to-IPv6 direction.\n   Note that translating IPv6 source\
    \ addresses to IPv4 source addresses\n   in the IPv6-to-IPv4 direction and translating\
    \ IPv4 destination\n   addresses to IPv6 destination addresses in the IPv4-to-IPv6\
    \ direction\n   will be different for stateless translation and stateful translation.\n\
    \   o  For stateless translation, the same algorithmic mapping table is\n    \
    \  used to translate IPv6 source addresses (IPv4-translatable\n      addresses)\
    \ to IPv4 source addresses in the IPv6-to-IPv4 direction\n      and translate\
    \ IPv4 destination addresses to IPv6 destination\n      addresses (IPv4-translatable\
    \ addresses) in the IPv4-to-IPv6\n      direction.  In this case, blocks of the\
    \ service provider's IPv4\n      addresses are mapped into IPv6 and used by physical\
    \ IPv6 nodes.\n      The original IPv4 form of these blocks of the service provider's\n\
    \      IPv4 addresses are used to represent the physical IPv6 nodes in\n     \
    \ IPv4.  Note that stateless translation supports both IPv6\n      initiated as\
    \ well as IPv4 initiated communications.\n   o  For stateful translation, the\
    \ algorithmic mapping table is not\n      used to translate source addresses in\
    \ the IPv6-to-IPv4 direction\n      and destination addresses in the IPv4-to-IPv6\
    \ direction.  Instead,\n      a state table is used to translate IPv6 source addresses\
    \ to IPv4\n      source addresses in the IPv6-to-IPv4 direction and translate\
    \ IPv4\n      destination addresses to IPv6 destination addresses in the IPv4-\n\
    \      to-IPv6 direction.  In this case, blocks of the service provider's\n  \
    \    IPv4 addresses are maintained in the translator as the IPv4\n      address\
    \ pools and are dynamically bound to specific IPv6\n      addresses.  The original\
    \ IPv4 form of these blocks of the service\n      provider's IPv4 addresses is\
    \ used to represent the IPv6 address in\n      IPv4.  However, due to the dynamic\
    \ binding, stateful translation\n      in general only supports IPv6-initiated\
    \ communication.\n"
- title: 3.1.2.  IP and ICMP Translation
  contents:
  - "3.1.2.  IP and ICMP Translation\n   The IPv4/IPv6 translator is based on the\
    \ update to the Stateless IP/\n   ICMP Translation Algorithm (SIIT) described\
    \ in [RFC2765].  The\n   algorithm translates between IPv4 and IPv6 packet headers\
    \ (including\n   ICMP headers).\n   The IP and ICMP translation document [RFC6145]\
    \ discusses header\n   translation for both stateless and stateful modes, but\
    \ does not cover\n   maintaining state in the stateful mode.  In the stateless\
    \ mode,\n   translation is performed using a combination of information carried\n\
    \   in the address and information configured in the translator.  This\n   permits\
    \ both IPv4->IPv6 and IPv6->IPv4 session establishment.  In the\n   stateful mode,\
    \ translation state is maintained between IPv4 address/\n   transport port tuples\
    \ and IPv6 address/transport port tuples,\n   enabling IPv6 systems to open sessions\
    \ with IPv4 systems.  The choice\n   of operational mode is made by the operator\
    \ deploying the network and\n   is critical to the operation of the applications\
    \ using it.\n"
- title: 3.1.3.  Maintaining Translation State
  contents:
  - "3.1.3.  Maintaining Translation State\n   For the stateful translator, besides\
    \ IP and ICMP translation, special\n   action must be taken to maintain the translation\
    \ states.  [RFC6146]\n   describes a mechanism for maintaining state.\n"
- title: 3.1.4.  DNS64 and DNS46
  contents:
  - "3.1.4.  DNS64 and DNS46\n   DNS64 [RFC6147] and possible future DNS46 documents\
    \ describe the\n   mechanisms by which a DNS translator is intended to operate.\
    \  It is\n   designed to operate on the basis of known address translation\n \
    \  algorithms defined in [RFC6052].\n   There are at least two possible implementations\
    \ of a DNS64 and DNS46:\n   Static records:  One could literally populate DNS\
    \ with corresponding\n      A and AAAA records.  This mechanism works for scenarios\
    \ 2, 3, 5,\n      and 6.\n   Dynamic Translation of static records:  In more general\
    \ operation,\n      the preferred behavior is an A record to be (retrieved and)\n\
    \      translated to a AAAA record by the DNS64 if and only if no\n      reachable\
    \ AAAA record exists, or for a AAAA record to be\n      (retrieved and) translated\
    \ to an A record by the DNS46 if and only\n      if no reachable A record exists.\n"
- title: 3.1.5.  ALGs for Other Applications Layer Protocols
  contents:
  - "3.1.5.  ALGs for Other Applications Layer Protocols\n   In addition, some applications\
    \ require special support.  An example\n   is FTP.  FTP's active mode doesn't\
    \ work well across NATs without\n   extra support such as SOCKS [RFC1928] [RFC3089].\
    \  Across NATs, it\n   generally uses passive mode.  However, the designers of\
    \ FTP wrote\n   different and incompatible passive-mode implementations for IPv4\
    \ and\n   IPv6 networks.  Hence, either they need to fix FTP, or a translator\n\
    \   must be written for the application.  Other applications may be\n   similarly\
    \ broken.\n   As a general rule, a simple operational recommendation will work\n\
    \   around many application issues: there should be a server in each\n   domain,\
    \ or an instance of the server should have an interface in each\n   domain.  For\
    \ example, an SMTP MTA may be confused by finding an IPv6\n   address in its HELO\
    \ when it is connected to using IPv4 (or vice\n   versa), but would work perfectly\
    \ well if it had an interface in both\n   the IPv4 and IPv6 domains and was used\
    \ as an application-layer bridge\n   between them.\n"
- title: 3.2.  Operation Mode for Specific Scenarios
  contents:
  - "3.2.  Operation Mode for Specific Scenarios\n   Currently, the proposed solutions\
    \ for IPv6/IPv4 translation are\n   classified into stateless translation and\
    \ stateful translation.\n"
- title: 3.2.1.  Stateless Translation
  contents:
  - "3.2.1.  Stateless Translation\n   For stateless translation, the translation\
    \ information is carried in\n   the address itself plus configuration in the translators,\
    \ permitting\n   both IPv4->IPv6 and IPv6->IPv4 session initiation.  Stateless\n\
    \   translation supports end-to-end address transparency and has better\n   scalability\
    \ compared with stateful translation [RFC6145].\n   The stateless translation\
    \ mechanisms typically put constraints on\n   what IPv6 addresses can be assigned\
    \ to IPv6 nodes that want to\n   communicate with IPv4 destinations using an algorithmic\
    \ mapping.  For\n   Scenario 1 (\"an IPv6 network to the IPv4 Internet\"), it\
    \ is not a\n   serious drawback, since the address assignment policy can be applied\n\
    \   to satisfy this requirement for the IPv6 nodes that need to\n   communicate\
    \ with the IPv4 Internet.  In addition, stateless\n   translation supports Scenario\
    \ 2 (\"the IPv4 Internet to an IPv6\n   network\"), which means that not only\
    \ could servers move directly to\n   IPv6 without trudging through a difficult\
    \ transition period, but also\n   they could do so without risk of losing connectivity\
    \ with the IPv4-\n   only Internet.\n   Stateless translation can be used for\
    \ Scenarios 1, 2, 5, and 6, i.e.,\n   it supports \"an IPv6 network to the IPv4\
    \ Internet\", \"the IPv4\n   Internet to an IPv6 network\", \"an IPv6 network\
    \ to an IPv4 network\",\n   and \"an IPv4 network to an IPv6 network\".\n    \
    \        --------\n         //        \\\\       -----------\n        /      \
    \      \\     //          \\\\\n       /             +----+              \\\n\
    \      |              |XLAT|               |\n      |  The IPv4    +----+  An\
    \ IPv6      |\n      |  Internet    +----+  Network      |  XLAT: Stateless IPv4/IPv6\n\
    \      |              |DNS |  (address     |        Translator\n       \\    \
    \         +----+   subset)    /   DNS:  DNS64/DNS46\n        \\            / \
    \    \\\\          //\n         \\\\        //        ----------\n           --------\n\
    \                     <====>\n          Figure 11: Stateless Translation for Scenarios\
    \ 1 and 2\n           --------          ---------\n        //         \\\\   \
    \   //          \\\\\n       /             +----+              \\\n      |   \
    \           |XLAT|               |\n      |  An IPv4     +----+  An IPv6     \
    \ |\n      |  Network     +----+  Network      |  XLAT: Stateless IPv4/IPv6\n\
    \      |              |DNS |  (address     |        Translator\n       \\    \
    \         +----+   subset)    /   DNS:  DNS64/DNS46\n         \\\\        // \
    \     \\\\          //\n           --------          ---------\n             \
    \        <====>\n          Figure 12: Stateless Translation for Scenarios 5 and\
    \ 6\n   The implementation of the stateless translator needs to refer to\n   [RFC6145]\
    \ and [RFC6052].\n"
- title: 3.2.2.  Stateful Translation
  contents:
  - "3.2.2.  Stateful Translation\n   For stateful translation, the translation state\
    \ is maintained between\n   IPv4 address/port pairs and IPv6 address/port pairs,\
    \ enabling IPv6\n   systems to open sessions with IPv4 systems [RFC6145] [RFC6146].\n\
    \   Stateful translation can be used for Scenarios 1, 3, and 5, i.e., it\n   supports\
    \ \"an IPv6 network to the IPv4 Internet\", \"the IPv6 Internet\n   to an IPv4\
    \ network\", and \"an IPv6 network to an IPv4 network\".\n   For Scenario 1, any\
    \ IPv6 addresses in an IPv6 network can use\n   stateful translation; however,\
    \ it typically only supports initiation\n   from the IPv6 side.  In addition,\
    \ it does not result in stable\n   addresses of IPv6 nodes that can be used in\
    \ DNS, which may cause\n   problems for the protocols and applications that do\
    \ not deal well\n   with highly dynamic addresses.\n           --------\n    \
    \     //        \\\\       -----------\n        /            \\     //       \
    \   \\\\\n       /             +----+              \\\n      |              |XLAT|\
    \               |\n      |  The IPv4    +----+  An IPv6      |\n      |  Internet\
    \    +----+  Network      |  XLAT: Stateful IPv4/IPv6\n      |              |DNS\
    \ |               |        Translator\n       \\             +----+          \
    \    /   DNS:  DNS64\n        \\            /     \\\\          //\n         \\\
    \\        //       -----------\n           --------\n                      <====\n\
    \              Figure 13: Stateful Translation for Scenario 1\n   Scenario 3 handles\
    \ servers using IPv4 private addresses [RFC1918] and\n   being reached from the\
    \ IPv6 Internet.  This includes cases of servers\n   that for some reason cannot\
    \ be upgraded to IPv6 and don't have public\n   IPv4 addresses, and yet need to\
    \ be reached by IPv6 nodes in the IPv6\n   Internet.\n                       \
    \     -----------\n          ----------       //         \\\\\n         //   \
    \       \\\\    /             \\\n       /             +----+              \\\n\
    \      |              |XLAT|               |\n      |  An IPv4     +----+  The\
    \ IPv6     |\n      |  Network     +----+  Internet     |  XLAT: Stateful IPv4/IPv6\n\
    \      |              |DNS |               |        Translator\n       \\    \
    \         +----+               /  DNS:  DNS64\n        \\\\         //      \\\
    \             /\n          ---------         \\\\         //\n               \
    \             -----------\n                      <====\n              Figure 14:\
    \ Stateful Translation for Scenario 3\n   Similarly, stateful translation can\
    \ also be used for Scenario 5.\n           --------          ---------\n     \
    \   //         \\\\      //          \\\\\n       /             +----+       \
    \       \\\n      |              |XLAT|               |\n      |  An IPv4    \
    \ +----+  An IPv6      |\n      |  Network     +----+  Network      |  XLAT: Stateful\
    \ IPv4/IPv6\n      |              |DNS |               |        Translator\n \
    \      \\             +----+              /   DNS:  DNS64\n         \\\\     \
    \   //      \\\\          //\n           --------          ---------\n       \
    \               <====\n              Figure 15: Stateful Translation for Scenario\
    \ 5\n   The implementation of the stateful translator needs to refer to\n   [RFC6145],\
    \ [RFC6146], and [RFC6052].\n"
- title: 3.3.  Layout of the Related Documents
  contents:
  - "3.3.  Layout of the Related Documents\n   Based on the above analysis, the IPv4/IPv6\
    \ translation series\n   consists of the following documents.\n   o  Framework\
    \ for IPv4/IPv6 Translation (this document).\n   o  Address translation (the choice\
    \ of IPv6 prefix and the choice of\n      method by which the remainder of the\
    \ IPv6 address is derived from\n      an IPv4 address, part of the SIIT update)\
    \ [RFC6052].\n   o  IP and ICMP Translation (header translation and ICMP handling,\n\
    \      part of the SIIT update) [RFC6145].\n   o  Table maintenance (stateful\
    \ translation including session database\n      and mapping table handling) [RFC6146].\n\
    \   o  DNS64 (DNS64: A to AAAA mapping and DNSSEC discussion) [RFC6147].\n   o\
    \  FTP ALG [FTP64].\n   o  Others (DNS46, Multicast, etc.).\n   The relationship\
    \ among these documents is shown in the following\n   figure.\n              \
    \ -----------------------------------------\n              |   Framework for IPv4/IPv6\
    \ Translation  |\n               -----------------------------------------\n \
    \                ||                                 ||\n    -------------------------------------------------------------------\n\
    \   |             ||     stateless and stateful      ||                 |\n  \
    \ |   --------------------                   ---------------------    |\n   |\
    \  |Address Translation |   <========     | IP/ICMP Translation |   |\n   |  \
    \ --------------------                   ---------------------    |\n   |    \
    \      /\\                                        /\\             |\n   |    \
    \      ||                      ------------------||------------ |\n   |      \
    \    ||                     |  stateful        \\/             |\n   |   -----------------\
    \             |        ---------------------    |\n   |  |   DNS64/DNS46   | \
    \           |       |  Table Maintenance  |   |\n   |   -----------------    \
    \         |        ---------------------    |\n    -------------------------------------------------------------------\n\
    \              /\\                                        /\\\n              ||\
    \                                        ||\n       -----------------        \
    \               --------------------\n      |     FTP ALG     |              \
    \       |      Others        |\n       -----------------                     \
    \  --------------------\n                        Figure 16: Document Layout\n\
    \   In the document layout, the IP/ICMP Translation and DNS64/DNS46\n   normatively\
    \ refer to Address Translation.  The Table Maintenance and\n   IP/ICMP Translation\
    \ normatively refer to each other.\n   The FTP ALG and other documents normatively\
    \ refer to the Address\n   Format, IP/ICMP Translation, and Table Maintenance\
    \ documents.\n"
- title: 4.  Translation in Operation
  contents:
  - "4.  Translation in Operation\n   Operationally, there are two ways that translation\
    \ could be used --\n   as a permanent solution thereby making transition \"the\
    \ other guy's\n   problem\", and as a temporary solution for a new part of one's\
    \ network\n   while bringing up IPv6 services in the remaining parts of one's\n\
    \   network.  We obviously recommend the latter at the present stage.\n   For\
    \ the IPv4 parts of the network, [RFC4213]'s recommendation holds.\n   Bring IPv6\
    \ up in those domains, move production to it, and then take\n   down the now-unnecessary\
    \ IPv4 service when economics warrant.  This\n   approach to transition entails\
    \ the least risk.\n                           ----------------------\n       \
    \             //////                        \\\\\\\\\\\\\n                ///\
    \         IPv4 or Dual Stack           \\\\\\\n              ||    +----+    \
    \  Routing          +-----+    ||\n             |      |IPv4|                \
    \       |IPv4+|      |\n             |      |Host|                       |IPv6\
    \ |      |\n              ||    +----+                       |Host |    ||\n \
    \               \\\\\\                              +-----+ ///\n            \
    \        \\\\\\\\\\----+----+-+-----+ +----+-/////\n                         \
    \    |XLAT|-|DNS64|-|FTP |\n                             |    |-|DNS46|-|ALG |\n\
    \                    /////----+----+ +-----+ +----+-\\\\\\\\\\\n             \
    \   ///                                      \\\\\\\n              ||    +-----+\
    \                     +----+      ||\n             |      |IPv4+|            \
    \         |IPv6|        |\n             |      |IPv6 |                     |Host|\
    \        |\n              ||    |Host |                     +----+      ||\n \
    \               \\\\\\ +-----+  IPv6-only Routing           ///\n            \
    \        \\\\\\\\\\\\                        //////\n                        \
    \   ----------------------\n                 Figure 17: Translation Operational\
    \ Model\n   Figure 17 shows that, during the coexistence phase, one expects a\n\
    \   combination of hosts, applications, and networks.  Hosts might\n   include\
    \ IPv6-only gaming devices and handsets, older computer\n   operating systems\
    \ that are IPv4-only, and modern mainline operating\n   systems that support both.\
    \  Applications might include ones that are\n   IPv4-only and modern applications\
    \ that support both IPv4 and IPv6.\n   Networks might include dual-stack devices\
    \ operating in single-stack\n   networks (whether that stack is IPv4 or IPv6)\
    \ and fully functional\n   dual-stack networks.\n"
- title: 5.  Unsolved Problems
  contents:
  - "5.  Unsolved Problems\n   The framework does not cover all possible scenarios,\
    \ and it may be\n   extended in the future to address them.\n"
- title: 6.  Security Considerations
  contents:
  - "6.  Security Considerations\n   This document is the framework of IPv4/IPv6 translation.\
    \  The\n   security issues are addressed in individual IPv4/IPv6 translation\n\
    \   documents, i.e., [RFC6052], [RFC6145], [RFC6146], [RFC6147], and\n   [FTP64].\n"
- title: 7.  Acknowledgements
  contents:
  - "7.  Acknowledgements\n   This is under development by a large group of people.\
    \  Those who have\n   posted to the list during the discussion include Andrew\
    \ Sullivan,\n   Andrew Yourtchenko, Bo Zhou, Brian Carpenter, Dan Wing, Dave Thaler,\n\
    \   David Harrington, Ed Jankiewicz, Gang Chen, Hui Deng, Hiroshi Miyata,\n  \
    \ Iljitsch van Beijnum, John Schnizlein, Magnus Westerlund, Marcelo\n   Bagnulo\
    \ Braun, Margaret Wasserman, Masahito Endo, Phil Roberts,\n   Philip Matthews,\
    \ Remi Denis-Courmont, and Remi Despres.\n   Ed Jankiewicz described the transition\
    \ plan.\n"
- title: 8.  References
  contents:
  - '8.  References

    '
- title: 8.1.  Normative References
  contents:
  - "8.1.  Normative References\n   [RFC6052]  Bao, C., Huitema, C., Bagnulo, M.,\
    \ Boucadair, M., and X.\n              Li, \"IPv6 Addressing of IPv4/IPv6 Translators\"\
    , RFC 6052,\n              October 2010.\n   [RFC6145]  Li, X., Bao, C., and F.\
    \ Baker, \"IP/ICMP Translation\n              Algorithm\", RFC 6145, April 2011.\n\
    \   [RFC6146]  Bagnulo, M., Matthews, P., and I. Beijnum, \"Stateful\n       \
    \       NAT64: Network Address and Protocol Translation from IPv6\n          \
    \    Clients to IPv4 Servers\", RFC 6146, April 2011.\n   [RFC6147]  Bagnulo,\
    \ M., Sullivan, A., Matthews, P., and I. Beijnum,\n              \"DNS64: DNS\
    \ extensions for Network Address Translation\n              from IPv6 Clients\
    \ to IPv4 Servers\", RFC 6147, April 2011.\n"
- title: 8.2.  Informative References
  contents:
  - "8.2.  Informative References\n   [6NET]     6NET Consortium, \"6NET\", <http://www.6net.org/>.\n\
    \   [DS-LITE]  Durand, A., Droms, R., Woodyatt, J., and Y. Lee, \"Dual-\n    \
    \          Stack Lite Broadband Deployments Following IPv4\n              Exhaustion\"\
    , Work in Progress, March 2011.\n   [FTP64]    Beijnum, I., \"An FTP ALG for IPv6-to-IPv4\
    \ translation\",\n              Work in Progress, March 2011.\n   [RFC1918]  Rekhter,\
    \ Y., Moskowitz, R., Karrenberg, D., Groot, G., and\n              E. Lear, \"\
    Address Allocation for Private Internets\",\n              BCP 5, RFC 1918, February\
    \ 1996.\n   [RFC1923]  Halpern, J. and S. Bradner, \"RIPv1 Applicability Statement\n\
    \              for Historic Status\", RFC 1923, March 1996.\n   [RFC1928]  Leech,\
    \ M., Ganis, M., Lee, Y., Kuris, R., Koblas, D., and\n              L. Jones,\
    \ \"SOCKS Protocol Version 5\", RFC 1928,\n              March 1996.\n   [RFC2765]\
    \  Nordmark, E., \"Stateless IP/ICMP Translation Algorithm\n              (SIIT)\"\
    , RFC 2765, February 2000.\n   [RFC2766]  Tsirtsis, G. and P. Srisuresh, \"Network\
    \ Address\n              Translation - Protocol Translation (NAT-PT)\", RFC 2766,\n\
    \              February 2000.\n   [RFC3056]  Carpenter, B. and K. Moore, \"Connection\
    \ of IPv6 Domains\n              via IPv4 Clouds\", RFC 3056, February 2001.\n\
    \   [RFC3089]  Kitamura, H., \"A SOCKS-based IPv6/IPv4 Gateway Mechanism\",\n\
    \              RFC 3089, April 2001.\n   [RFC4192]  Baker, F., Lear, E., and R.\
    \ Droms, \"Procedures for\n              Renumbering an IPv6 Network without a\
    \ Flag Day\", RFC 4192,\n              September 2005.\n   [RFC4193]  Hinden,\
    \ R. and B. Haberman, \"Unique Local IPv6 Unicast\n              Addresses\",\
    \ RFC 4193, October 2005.\n   [RFC4213]  Nordmark, E. and R. Gilligan, \"Basic\
    \ Transition Mechanisms\n              for IPv6 Hosts and Routers\", RFC 4213,\
    \ October 2005.\n   [RFC4380]  Huitema, C., \"Teredo: Tunneling IPv6 over UDP\
    \ through\n              Network Address Translations (NATs)\", RFC 4380,\n  \
    \            February 2006.\n   [RFC4864]  Van de Velde, G., Hain, T., Droms,\
    \ R., Carpenter, B., and\n              E. Klein, \"Local Network Protection for\
    \ IPv6\", RFC 4864,\n              May 2007.\n   [RFC4966]  Aoun, C. and E. Davies,\
    \ \"Reasons to Move the Network\n              Address Translator - Protocol Translator\
    \ (NAT-PT) to\n              Historic Status\", RFC 4966, July 2007.\n   [RFC5211]\
    \  Curran, J., \"An Internet Transition Plan\", RFC 5211,\n              July\
    \ 2008.\n   [RFC5214]  Templin, F., Gleeson, T., and D. Thaler, \"Intra-Site\n\
    \              Automatic Tunnel Addressing Protocol (ISATAP)\", RFC 5214,\n  \
    \            March 2008.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Fred Baker\n   Cisco Systems\n   Santa Barbara, California\
    \  93117\n   USA\n   Phone: +1-408-526-4257\n   Fax:   +1-413-473-2403\n   EMail:\
    \ fred@cisco.com\n   Xing Li\n   CERNET Center/Tsinghua University\n   Room 225,\
    \ Main Building, Tsinghua University\n   Beijing,   100084\n   China\n   Phone:\
    \ +86 10-62785983\n   EMail: xing@cernet.edu.cn\n   Congxiao Bao\n   CERNET Center/Tsinghua\
    \ University\n   Room 225, Main Building, Tsinghua University\n   Beijing,   100084\n\
    \   China\n   Phone: +86 10-62785983\n   EMail: congxiao@cernet.edu.cn\n   Kevin\
    \ Yin\n   Cisco Systems\n   No. 2 Jianguomenwai Ave, Chaoyang District\n   Beijing,\
    \   100022\n   China\n   Phone: +86-10-8515-5094\n   EMail: kyin@cisco.com\n"
