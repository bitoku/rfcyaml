- title: __initial_text__
  contents:
  - " Using Generic Security Service Application Program Interface (GSS-API)\n   \
    \  Mechanisms in Simple Authentication and Security Layer (SASL):\n          \
    \              The GS2 Mechanism Family\n"
- title: Abstract
  contents:
  - "Abstract\n   This document describes how to use a Generic Security Service\n\
    \   Application Program Interface (GSS-API) mechanism in the Simple\n   Authentication\
    \ and Security Layer (SASL) framework.  This is done by\n   defining a new SASL\
    \ mechanism family, called GS2.  This mechanism\n   family offers a number of\
    \ improvements over the previous \"SASL/\n   GSSAPI\" mechanism: it is more general,\
    \ uses fewer messages for the\n   authentication phase in some cases, and supports\
    \ negotiable use of\n   channel binding.  Only GSS-API mechanisms that support\
    \ channel\n   binding and mutual authentication are supported.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This\
    \ document is a product of the Internet Engineering Task Force\n   (IETF).  It\
    \ represents the consensus of the IETF community.  It has\n   received public\
    \ review and has been approved for publication by the\n   Internet Engineering\
    \ Steering Group (IESG).  Further information on\n   Internet Standards is available\
    \ in Section 2 of RFC 5741.\n   Information about the current status of this document,\
    \ any errata,\n   and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc5801.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2010 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n   This document\
    \ may contain material from IETF Documents or IETF\n   Contributions published\
    \ or made publicly available before November\n   10, 2008.  The person(s) controlling\
    \ the copyright in some of this\n   material may not have granted the IETF Trust\
    \ the right to allow\n   modifications of such material outside the IETF Standards\
    \ Process.\n   Without obtaining an adequate license from the person(s) controlling\n\
    \   the copyright in such materials, this document may not be modified\n   outside\
    \ the IETF Standards Process, and derivative works of it may\n   not be created\
    \ outside the IETF Standards Process, except to format\n   it for publication\
    \ as an RFC or to translate it into languages other\n   than English.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................4\n\
    \   2. Conventions Used in This Document ...............................5\n  \
    \ 3. Mechanism Name ..................................................5\n    \
    \  3.1. Generating SASL Mechanism Names from GSS-API OIDs ..........5\n      3.2.\
    \ Computing Mechanism Names Manually .........................6\n      3.3. Examples\
    \ ...................................................6\n      3.4. Grandfathered\
    \ Mechanism Names ..............................7\n   4. SASL Authentication Exchange\
    \ Message Format .....................8\n   5. Channel Bindings ...............................................10\n\
    \      5.1. Content of GSS-CHANNEL-BINDINGS Structure .................11\n  \
    \    5.2. Default Channel Binding ...................................12\n   6.\
    \ Examples .......................................................12\n   7. Authentication\
    \ Conditions ......................................14\n   8. GSS-API Parameters\
    \ .............................................15\n   9. Naming .........................................................15\n\
    \   10. GSS_Inquire_SASLname_for_mech Call ............................15\n  \
    \    10.1. gss_inquire_saslname_for_mech ............................16\n   11.\
    \ GSS_Inquire_mech_for_SASLname Call ............................18\n      11.1.\
    \ gss_inquire_mech_for_saslname ............................19\n   12. Security\
    \ Layers ...............................................20\n   13. Interoperability\
    \ with the SASL GSSAPI Mechanism ...............20\n      13.1. The Interoperability\
    \ Problem .............................20\n      13.2. Resolving the Problem ....................................20\n\
    \      13.3. Additional Recommendations ...............................20\n  \
    \ 14. GSS-API Mechanisms That Negotiate Other Mechanisms ............21\n    \
    \  14.1. The Interoperability Problem .............................21\n      14.2.\
    \ Security Problem .........................................21\n      14.3. Resolving\
    \ the Problems ...................................21\n   15. IANA Considerations\
    \ ...........................................22\n   16. Security Considerations\
    \ .......................................22\n   17. Acknowledgements ..............................................24\n\
    \   18. References ....................................................24\n  \
    \    18.1. Normative References .....................................24\n    \
    \  18.2. Informative References ...................................25\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   Generic Security Service Application Program Interface (GSS-API)\n\
    \   [RFC2743] is a framework that provides security services to\n   applications\
    \ using a variety of authentication mechanisms.  Simple\n   Authentication and\
    \ Security Layer (SASL) [RFC4422] is a framework to\n   provide authentication\
    \ and security layers for connection-based\n   protocols, also using a variety\
    \ of mechanisms.  This document\n   describes how to use a GSS-API mechanism as\
    \ though it were a SASL\n   mechanism.  This facility is called GS2 -- a moniker\
    \ that indicates\n   that this is the second GSS-API->SASL mechanism bridge. \
    \ The original\n   GSS-API->SASL mechanism bridge was specified by [RFC2222],\
    \ now\n   [RFC4752]; we shall sometimes refer to the original bridge as GS1 in\n\
    \   this document.\n   All GSS-API mechanisms are implicitly registered for use\
    \ within SASL\n   by this specification.  The SASL mechanisms defined in this\
    \ document\n   are known as the GS2 family of mechanisms.\n   The GS1 bridge failed\
    \ to gain wide deployment for any GSS-API\n   mechanism other than \"The Kerberos\
    \ Version 5 GSS-API Mechanism\"\n   [RFC1964] [RFC4121], and has a number of problems\
    \ that led us to\n   desire a new bridge.  Specifically, a) GS1 was not round-trip\n\
    \   optimized and b) GS1 did not support channel binding [RFC5056].\n   These\
    \ problems and the opportunity to create the next SASL password-\n   based mechanism,\
    \ \"Salted Challenge Response Authentication Mechanism\n   (SCRAM) SASL and GSS-API\
    \ Mechanisms\" [RFC5802], as a GSS-API\n   mechanism used by SASL applications\
    \ via GS2, provide the motivation\n   for GS2.\n   In particular, the current\
    \ consensus of the SASL community appears to\n   be that SASL \"security layers\"\
    \ (i.e., confidentiality and integrity\n   protection of application data after\
    \ authentication) are too complex\n   and redundant because SASL applications\
    \ tend to have an option to run\n   over a Transport Layer Security (TLS) [RFC5246]\
    \ channel.  Use of SASL\n   security layers is best replaced with channel binding\
    \ to a TLS\n   channel.\n   GS2 is designed to be as simple as possible.  It adds\
    \ to GSS-API\n   security context token exchanges only the bare minimum to support\n\
    \   SASL semantics and negotiation of use of channel binding.\n   Specifically,\
    \ GS2 adds a small header (a few bytes plus the length of\n   the client-requested\
    \ SASL authorization identity) to the initial GSS-\n   API context token and to\
    \ the application channel binding data.  GS2\n   uses SASL mechanism negotiation\
    \ to implement channel binding\n   negotiation.  Security-relevant GS2 plaintext\
    \ is protected via the\n   use of GSS-API channel binding.  Additionally, to simplify\
    \ the\n   implementation of GS2 mechanisms for implementors who will not\n   implement\
    \ a GSS-API framework, we compress the initial security\n   context token header\
    \ required by [RFC2743], Section 3.1.\n   GS2 does not protect any plaintext exchanged\
    \ outside GS2, such as\n   SASL mechanism negotiation plaintext, or application\
    \ messages\n   following authentication.  But using channel binding to a secure\n\
    \   channel over which all SASL and application plaintext is sent will\n   cause\
    \ all that plaintext to be authenticated.\n"
- title: 2.  Conventions Used in This Document
  contents:
  - "2.  Conventions Used in This Document\n   The key words \"MUST\", \"MUST NOT\"\
    , \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\"\
    , \"MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described\
    \ in [RFC2119].\n   The document uses many terms and function names defined in\
    \ [RFC2743],\n   as updated by [RFC5554].\n"
- title: 3.  Mechanism Name
  contents:
  - "3.  Mechanism Name\n   There are two SASL mechanism names for any GSS-API mechanism\
    \ used\n   through this facility.  One denotes that the server supports channel\n\
    \   binding.  The other denotes that it does not.\n   The SASL mechanism name\
    \ for a GSS-API mechanism is that which is\n   provided by that mechanism when\
    \ it was specified, if one was\n   specified.  This name denotes that the server\
    \ does not support\n   channel binding.  Add the suffix \"-PLUS\" and the resulting\
    \ name\n   denotes that the server does support channel binding.  SASL\n   implementations\
    \ can use the GSS_Inquire_SASLname_for_mech call (see\n   below) to query for\
    \ the SASL mechanism name of a GSS-API mechanism.\n   If the GSS_Inquire_SASLname_for_mech\
    \ interface is not used, the GS2\n   implementation needs some other mechanism\
    \ to map mechanism Object\n   Identifiers (OIDs) to SASL names internally.  In\
    \ this case, the\n   implementation can only support the mechanisms for which\
    \ it knows the\n   SASL name.  If GSS_Inquire_SASLname_for_mech() fails and the\
    \ GS2\n   implementation cannot map the OID to a SASL mechanism name via some\n\
    \   other means, then the GS2 implementation MUST NOT use the given GSS-\n   API\
    \ mechanism.\n"
- title: 3.1.  Generating SASL Mechanism Names from GSS-API OIDs
  contents:
  - "3.1.  Generating SASL Mechanism Names from GSS-API OIDs\n   For GSS-API mechanisms\
    \ whose SASL names are not defined together with\n   the GSS-API mechanism or\
    \ in this document, the SASL mechanism name is\n   concatenation of the string\
    \ \"GS2-\" and the Base32 encoding [RFC4648]\n   (with an uppercase alphabet)\
    \ of the first 55 bits of the binary SHA-1\n   hash [FIPS.180-1.1995] string computed\
    \ over the ASN.1 DER encoding\n   [CCITT.X690.2002], including the tag and length\
    \ octets, of the GSS-\n   API mechanism's Object Identifier.  The Base32 rules\
    \ on padding\n   characters and characters outside of the Base32 alphabet are\
    \ not\n   relevant to this use of Base32.  If any padding or non-alphabet\n  \
    \ characters are encountered, the name is not a GS2 family mechanism\n   name.\
    \  This name denotes that the server does not support channel\n   binding.  Add\
    \ the suffix \"-PLUS\" and the resulting name denotes that\n   the server does\
    \ support channel binding.\n   A GS2 mechanism that has a non-OID-derived SASL\
    \ mechanism name is\n   said to have a \"user-friendly SASL mechanism name\".\n"
- title: 3.2.  Computing Mechanism Names Manually
  contents:
  - "3.2.  Computing Mechanism Names Manually\n   The hash-derived GS2 SASL mechanism\
    \ name may be computed manually.\n   This is useful when the set of supported\
    \ GSS-API mechanisms is known\n   in advance.  This eliminates the need to implement\
    \ Base32, SHA-1, and\n   DER in the SASL mechanism.  The computed mechanism name\
    \ can be used\n   directly in the implementation, and the implementation need\
    \ not be\n   concerned if the mechanism is part of a mechanism family.\n"
- title: 3.3.  Examples
  contents:
  - "3.3.  Examples\n   The OID for the Simple Public-Key GSS-API Mechanism (SPKM-1)\n\
    \   [RFC2025] is 1.3.6.1.5.5.1.1.  The ASN.1 DER encoding of the OID,\n   including\
    \ the tag and length, is (in hex) 06 07 2b 06 01 05 05 01 01.\n   The SHA-1 hash\
    \ of the ASN.1 DER encoding is (in hex) 1c f8 f4 2b 5a\n   9f 80 fa e9 f8 31 22\
    \ 6d 5d 9d 56 27 86 61 ad.  Convert the first 7\n   octets to binary, drop the\
    \ last bit, and re-group them in groups of\n   5, and convert them back to decimal,\
    \ which results in these\n   computations:\n   hex:\n   1c f8 f4 2b 5a 9f 80\n\
    \   binary:\n   00011100 11111000 11110100 00101011 01011010\n   10011111 1000000\n\
    \   binary in groups of 5:\n   00011 10011 11100 01111 01000 01010 11010 11010\n\
    \   10011 11110 00000\n   decimal of each group:\n   3 19 28 15 8 10 26 26 19\
    \ 30 0\n   base32 encoding:\n   D T 4 P I K 2 2 T 6 A\n   The last step translates\
    \ each decimal value using table 3 in Base32\n   [RFC4648].  Thus, the SASL mechanism\
    \ name for the SPKM-1 GSSAPI\n   mechanism is \"GS2-DT4PIK22T6A\".\n   The OID\
    \ for the Kerberos V5 GSS-API mechanism [RFC1964] is\n   1.2.840.113554.1.2.2\
    \ and its DER encoding is (in hex) 06 09 2A 86 48\n   86 F7 12 01 02 02.  The\
    \ SHA-1 hash is 82 d2 73 25 76 6b d6 c8 45 aa\n   93 25 51 6a fc ff 04 b0 43 60.\
    \  Convert the 7 octets to binary, drop\n   the last bit, and re-group them in\
    \ groups of 5, and convert them back\n   to decimal, which results in these computations:\n\
    \   hex:\n   82 d2 73 25 76 6b d6\n   binary:\n   10000010 11010010 01110011 00100101\
    \ 01110110\n   01101011 1101011\n   binary in groups of 5:\n   10000 01011 01001\
    \ 00111 00110 01001 01011 10110\n   01101 01111 01011\n   decimal of each group:\n\
    \   16 11 9 7 6 9 11 22 13 15 11\n   base32 encoding:\n   Q L J H G J L W N P\
    \ L\n   The last step translates each decimal value using table 3 in Base32\n\
    \   [RFC4648].  Thus, the SASL mechanism name for the Kerberos V5 GSS-API\n  \
    \ mechanism would be \"GS2-QLJHGJLWNPL\" and (because this mechanism\n   supports\
    \ channel binding) \"GS2-QLJHGJLWNPL-PLUS\".  Instead, the next\n   section assigns\
    \ the Kerberos V5 mechanism a non-hash-derived\n   mechanism name.\n"
- title: 3.4.  Grandfathered Mechanism Names
  contents:
  - "3.4.  Grandfathered Mechanism Names\n   Some older GSS-API mechanisms were not\
    \ specified with a SASL GS2\n   mechanism name.  Using a shorter name can be useful,\
    \ nonetheless.  We\n   specify the names \"GS2-KRB5\" and \"GS2-KRB5-PLUS\" for\
    \ the Kerberos V5\n   mechanism, to be used as if the original specification documented\
    \ it,\n   see Section 15.\n"
- title: 4.  SASL Authentication Exchange Message Format
  contents:
  - "4.  SASL Authentication Exchange Message Format\n   During the SASL authentication\
    \ exchange for GS2, a number of messages\n   following the following format are\
    \ sent between the client and\n   server.  On success, this number is the same\
    \ as the number of context\n   tokens that the GSS-API mechanism would normally\
    \ require in order to\n   establish a security context.  On failures, the exchange\
    \ can be\n   terminated early by any party.\n   When using a GS2 mechanism the\
    \ SASL client is always a GSS-API\n   initiator and the SASL server is always\
    \ a GSS-API acceptor.  The\n   client calls GSS_Init_sec_context and the server\
    \ calls\n   GSS_Accept_sec_context.\n   All the SASL authentication messages exchanged\
    \ are exactly the same\n   as the security context tokens of the GSS-API mechanism,\
    \ except for\n   the initial security context token.\n   The client and server\
    \ MAY send GSS-API error tokens (tokens output by\n   GSS_Init_sec_context() or\
    \ GSS_Accept_sec_context() when the major\n   status code is other than GSS_S_COMPLETE\
    \ or GSS_S_CONTINUE_NEEDED).\n   As this indicates an error condition, after sending\
    \ the token, the\n   sending side should fail the authentication.\n   The initial\
    \ security context token is modified as follows:\n   o  The initial context token\
    \ header (see Section 3.1 of [RFC2743])\n      MUST be removed if present.  If\
    \ the header is not present, the\n      client MUST send a \"gs2-nonstd-flag\"\
    \ flag (see below).  On the\n      server side, this header MUST be recomputed\
    \ and restored prior to\n      passing the token to GSS_Accept_sec_context, except\
    \ when the \"gs2-\n      nonstd-flag\" is sent.\n   o  A GS2 header MUST be prefixed\
    \ to the resulting initial context\n      token.  This header has the form \"\
    gs2-header\" given below in ABNF\n      [RFC5234].\n   The figure below describes\
    \ the permissible attributes, their use, and\n   the format of their values. \
    \ All attribute names are single US-ASCII\n   letters and are case sensitive.\n\
    \    UTF8-1-safe    = %x01-2B / %x2D-3C / %x3E-7F\n                     ;; As\
    \ UTF8-1 in RFC 3629 except\n                     ;; NUL, \"=\", and \",\".\n\
    \    UTF8-2         = <as defined in RFC 3629 (STD 63)>\n    UTF8-3         =\
    \ <as defined in RFC 3629 (STD 63)>\n    UTF8-4         = <as defined in RFC 3629\
    \ (STD 63)>\n    UTF8-char-safe = UTF8-1-safe / UTF8-2 / UTF8-3 / UTF8-4\n   \
    \ saslname       = 1*(UTF8-char-safe / \"=2C\" / \"=3D\")\n    gs2-authzid   \
    \ = \"a=\" saslname\n                      ;; GS2 has to transport an authzid\
    \ since\n                      ;; the GSS-API has no equivalent\n    gs2-nonstd-flag\
    \ = \"F\"\n                      ;; \"F\" means the mechanism is not a\n     \
    \                 ;; standard GSS-API mechanism in that the\n                \
    \      ;; RFC 2743, Section 3.1 header was missing\n    cb-name         = 1*(ALPHA\
    \ / DIGIT / \".\" / \"-\")\n                      ;; See RFC 5056, Section 7.\n\
    \    gs2-cb-flag     = (\"p=\" cb-name) / \"n\" / \"y\"\n                    \
    \  ;; GS2 channel binding (CB) flag\n                      ;; \"p\" -> client\
    \ supports and used CB\n                      ;; \"n\" -> client does not support\
    \ CB\n                      ;; \"y\" -> client supports CB, thinks the server\n\
    \                      ;;           does not\n    gs2-header = [gs2-nonstd-flag\
    \ \",\"] gs2-cb-flag \",\" [gs2-authzid] \",\"\n                        ;; The\
    \ GS2 header is gs2-header.\n   When the \"gs2-nonstd-flag\" flag is present,\
    \ the client did not find/\n   remove a token header ([RFC2743], Section 3.1)\
    \ from the initial token\n   returned by GSS_Init_sec_context.  This signals to\
    \ the server that it\n   MUST NOT re-add the data that is normally removed by\
    \ the client.\n   The \"gs2-cb-flag\" signals the channel binding mode.  One of\
    \ \"p\", \"n\",\n   or \"y\" is used.  A \"p\" means the client supports and used\
    \ a channel\n   binding, and the name of the channel binding type is indicated.\
    \  An\n   \"n\" means that the client does not support channel binding.  A \"\
    y\"\n   means the client supports channel binding, but believes the server\n \
    \  does not support it, so it did not use a channel binding.  See the\n   next\
    \ section for more details.\n   The \"gs2-authzid\" holds the SASL authorization\
    \ identity.  It is\n   encoded using UTF-8 [RFC3629] with three exceptions:\n\
    \   o  The NUL character is forbidden as required by section 3.4.1 of\n      [RFC4422].\n\
    \   o  The server MUST replace any \",\" (comma) in the string with \"=2C\".\n\
    \   o  The server MUST replace any \"=\" (equals) in the string with \"=3D\".\n\
    \   Upon receipt of this value, the server verifies its correctness\n   according\
    \ to the used SASL protocol profile.  Failed verification\n   results in a failed\
    \ authentication exchange.\n"
- title: 5.  Channel Bindings
  contents:
  - "5.  Channel Bindings\n   GS2 supports channel binding to external secure channels,\
    \ such as\n   TLS.  Clients and servers may or may not support channel binding;\n\
    \   therefore, the use of channel binding is negotiable.  However, GS2\n   does\
    \ not provide security layers; therefore, it is imperative that\n   GS2 provide\
    \ integrity protection for the negotiation of channel\n   binding.\n   Use of\
    \ channel binding is negotiated as follows:\n   o  Servers that support the use\
    \ of channel binding SHOULD advertise\n      both the non-PLUS and PLUS-variant\
    \ of each GS2 mechanism name.  If\n      the server cannot support channel binding,\
    \ it SHOULD advertise\n      only the non-PLUS-variant.  If the server would never\
    \ succeed in\n      the authentication of the non-PLUS-variant due to policy reasons,\n\
    \      it MUST advertise only the PLUS-variant.\n   o  If the client supports\
    \ channel binding and the server does not\n      appear to (i.e., the client did\
    \ not see the -PLUS name advertised\n      by the server), then the client MUST\
    \ NOT use an \"n\" gs2-cb-flag.\n   o  Clients that support mechanism negotiation\
    \ and channel binding\n      MUST use a \"p\" gs2-cb-flag when the server offers\
    \ the PLUS-variant\n      of the desired GS2 mechanism.\n   o  If the client does\
    \ not support channel binding, then it MUST use\n      an \"n\" gs2-cb-flag. \
    \ Conversely, if the client requires the use of\n      channel binding then it\
    \ MUST use a \"p\" gs2-cb-flag.  Clients that\n      do not support mechanism\
    \ negotiation never use a \"y\" gs2-cb-flag,\n      they use either \"p\" or \"\
    n\" according to whether they require and\n      support the use of channel binding\
    \ or whether they do not,\n      respectively.\n   o  The client generates the\
    \ chan_bindings input parameter for\n      GSS_Init_sec_context as described below.\n\
    \   o  Upon receipt of the initial authentication message, the server\n      checks\
    \ the gs2-cb-flag in the GS2 header and constructs a\n      chan_bindings parameter\
    \ for GSS_Accept_sec_context as described\n      below.  If the client channel\
    \ binding flag was \"y\" and the server\n      did advertise support for channel\
    \ bindings (by advertising the\n      PLUS-variant of the mechanism chosen by\
    \ the client), then the\n      server MUST fail authentication.  If the client\
    \ channel binding\n      flag was \"p\" and the server does not support the indicated\
    \ channel\n      binding type, then the server MUST fail authentication.\n   o\
    \  If the client used an \"n\" gs2-cb-flag and the server requires the\n     \
    \ use of channel binding, then the server MUST fail authentication.\n     FLAG\
    \ CLIENT CB SUPPORT   SERVER CB SUPPORT DISPOSITION\n     ---- -----------------\
    \   ----------------- -----------\n     n    no support          N/A         \
    \      If server disallows\n                                                non-channel-bound\n\
    \                                                authentication, then\n      \
    \                                          fail\n     y    Yes, not required \
    \  No                Authentication may\n                                    \
    \            succeed; CB not used\n     y    Yes, not required   Yes         \
    \      Authentication must fail\n     p    Yes                 Yes           \
    \    Authentication may\n                                                succeed,\
    \ with CB used\n     p    Yes                 No                Authentication\
    \ will fail\n     N/A  Yes, required       No                Client does not even\
    \ try\n   For more discussion of channel bindings, and the syntax of the\n   channel\
    \ binding data for various security protocols, see [RFC5056].\n"
- title: 5.1.  Content of GSS-CHANNEL-BINDINGS Structure
  contents:
  - "5.1.  Content of GSS-CHANNEL-BINDINGS Structure\n   The calls to GSS_Init_sec_context\
    \ and GSS_Accept_sec_context take a\n   chan_bindings parameter.  The value is\
    \ a GSS-CHANNEL-BINDINGS\n   structure [RFC5554].\n   The initiator-address-type\
    \ and acceptor-address-type fields of the\n   GSS-CHANNEL-BINDINGS structure MUST\
    \ be set to 0.  The initiator-\n   address and acceptor-address fields MUST be\
    \ the empty string.\n   The application-data field MUST be set to the gs2-header,\
    \ excluding\n   the initial [gs2-nonstd-flag \",\"] part, concatenated with, when\
    \ a\n   gs2-cb-flag of \"p\" is used, the application's channel binding data.\n"
- title: 5.2.  Default Channel Binding
  contents:
  - "5.2.  Default Channel Binding\n   A default channel binding type agreement process\
    \ for all SASL\n   application protocols that do not provide their own channel\
    \ binding\n   type agreement is provided as follows.\n   'tls-unique' is the default\
    \ channel binding type for any application\n   that doesn't specify one.\n   Servers\
    \ MUST implement the \"tls-unique\" [RFC5929] channel binding\n   type, if they\
    \ implement any channel binding.  Clients SHOULD\n   implement the \"tls-unique\"\
    \ channel binding type, if they implement\n   any channel binding.  Clients and\
    \ servers SHOULD choose the highest-\n   layer/innermost end-to-end TLS channel\
    \ as the channel to which to\n   bind.\n   Servers MUST choose the channel binding\
    \ type indicated by the client,\n   or fail authentication if they don't support\
    \ it.\n"
- title: 6.  Examples
  contents:
  - "6.  Examples\n   Example #1: a one round-trip GSS-API context token exchange,\
    \ no\n   channel binding, optional authzid given.\n         C: Request authentication\
    \ exchange\n         S: Empty Challenge\n         C: n,a=someuser,<initial context\
    \ token with standard\n                            header removed>\n         S:\
    \ Send reply context token as is\n         C: Empty message\n         S: Outcome\
    \ of authentication exchange\n   Example #2: a one and one half round-trip GSS-API\
    \ context token\n   exchange, no channel binding.\n         C: Request authentication\
    \ exchange\n         S: Empty Challenge\n         C: n,,<initial context token\
    \ with standard\n                            header removed>\n         S: Send\
    \ reply context token as is\n         C: Send reply context token as is\n    \
    \     S: Outcome of authentication exchange\n   Example #3: a two round-trip GSS-API\
    \ context token exchange, no\n   channel binding, no standard token header.\n\
    \         C: Request authentication exchange\n         S: Empty Challenge\n  \
    \       C: F,n,,<initial context token without\n                             standard\
    \ header>\n         S: Send reply context token as is\n         C: Send reply\
    \ context token as is\n         S: Send reply context token as is\n         C:\
    \ Empty message\n         S: Outcome of authentication exchange\n   Example #4:\
    \ using channel binding, optional authzid given.\n         C: Request authentication\
    \ exchange\n         S: Empty Challenge\n         C: p=tls-unique,a=someuser,<initial\
    \ context token with standard\n                                header removed>\n\
    \         S: Send reply context token as is\n         ...\n   Example #5: using\
    \ channel binding.\n         C: Request authentication exchange\n         S: Empty\
    \ Challenge\n         C: p=tls-unique,,<initial context token with standard\n\
    \                                header removed>\n         S: Send reply context\
    \ token as is\n         ...\n   Example #6: using non-standard channel binding\
    \ (requires out-of-band\n   negotiation).\n         C: Request authentication\
    \ exchange\n         S: Empty Challenge\n         C: p=tls-server-end-point,,<initial\
    \ context token with standard\n                                header removed>\n\
    \         S: Send reply context token as is\n         ...\n   Example #7: client\
    \ supports channel bindings but server does not,\n   optional authzid given.\n\
    \         C: Request authentication exchange\n         S: Empty Challenge\n  \
    \       C: y,a=someuser,<initial\n                           context token with\
    \ standard header removed>\n         S: Send reply context token as is\n     \
    \    ...\n   GSS-API authentication is always initiated by the client.  The SASL\n\
    \   framework allows either the client or the server to initiate\n   authentication.\
    \  In GS2, the server will send an initial empty\n   challenge (zero-byte string)\
    \ if it has not yet received a token from\n   the client.  See Section 3 of [RFC4422].\n"
- title: 7.  Authentication Conditions
  contents:
  - "7.  Authentication Conditions\n   Authentication MUST NOT succeed if any one\
    \ of the following\n   conditions are true:\n   o  If GSS_Init/Accept_sec_context\
    \ returns anything other than\n      GSS_S_CONTINUE_NEEDED or GSS_S_COMPLETE.\n\
    \   o  If the client's initial GS2 header does not match the ABNF.\n   o  In particular,\
    \ if the initial character of the client message is\n      anything except \"\
    F\", \"p\", \"n\", or \"y\".\n   o  If the client's GS2 channel binding flag was\
    \ \"y\" and the server\n      supports channel bindings.\n   o  If the client's\
    \ GS2 channel binding flag was \"p\" and the server\n      does not support the\
    \ indicated channel binding.\n   o  If the client requires use of channel binding\
    \ and the server did\n      not advertise support for channel binding.\n   o \
    \ If authorization of client principal (i.e., src_name in\n      GSS_Accept_sec_context)\
    \ to requested authzid failed.\n   o  If the client is not authorized to the requested\
    \ authzid or an\n      authzid could not be derived from the client's initiator\
    \ principal\n      name.\n"
- title: 8.  GSS-API Parameters
  contents:
  - "8.  GSS-API Parameters\n   GS2 does not use any GSS-API per-message tokens. \
    \ Therefore, the per-\n   message token ret_flags from GSS_Init_sec_context()\
    \ and\n   GSS_Accept_sec_context() are irrelevant; implementations SHOULD NOT\n\
    \   set the per-message req_flags.\n   The mutual_req_flag MUST be set.  Clients\
    \ MUST check that the\n   corresponding ret_flag is set when the context is fully\
    \ established,\n   else authentication MUST fail.\n   Use or non-use of deleg_req_flag\
    \ and anon_req_flag is an\n   implementation-specific detail.  SASL and GS2 implementors\
    \ are\n   encouraged to provide programming interfaces by which clients may\n\
    \   choose to delegate credentials and by which servers may receive them.\n  \
    \ SASL and GS2 implementors are encouraged to provide programming\n   interfaces\
    \ that provide a good mapping of GSS-API naming options.\n"
- title: 9.  Naming
  contents:
  - "9.  Naming\n   There is no requirement that any particular GSS-API name-types\
    \ be\n   used.  However, typically, SASL servers will have host-based acceptor\n\
    \   principal names (see [RFC2743], Section 4.1) and clients will\n   typically\
    \ have username initiator principal names (see [RFC2743],\n   Section 4.2).  When\
    \ a host-based acceptor principal name is used\n   (\"service@hostname\"), \"\
    service\" is the service name specified in the\n   protocol's profile and \"hostname\"\
    \ is the fully qualified host name of\n   the server.\n"
- title: 10.  GSS_Inquire_SASLname_for_mech Call
  contents:
  - "10.  GSS_Inquire_SASLname_for_mech Call\n   We specify a new GSS-API utility\
    \ function to allow SASL\n   implementations to more efficiently identify the\
    \ GSS-API mechanism to\n   which a particular SASL mechanism name refers.\n  \
    \    Inputs:\n      o  desired_mech OBJECT IDENTIFIER\n      Outputs:\n      o\
    \  major_status INTEGER\n      o  minor_status INTEGER\n      o  sasl_mech_name\
    \ UTF-8 STRING -- SASL name for this\n         mechanism; caller must release\
    \ with\n         GSS_Release_buffer()\n      o  mech_name UTF-8 STRING -- name\
    \ of this mechanism, possibly\n         localized; caller must release with GSS_Release_buffer()\n\
    \      o  mech_description UTF-8 STRING -- possibly localized\n         description\
    \ of this mechanism; caller must release with\n         GSS_Release_buffer()\n\
    \      Return major_status codes:\n      o  GSS_S_COMPLETE indicates successful\
    \ completion, and that\n         output parameters holds correct information.\n\
    \      o  GSS_S_BAD_MECH indicates that a desired_mech was unsupported\n     \
    \    by the GSS-API implementation.\n      o  GSS_S_FAILURE indicates that the\
    \ operation failed for reasons\n         unspecified at the GSS-API level.\n \
    \     The GSS_Inquire_SASLname_for_mech call is used to get the SASL\n      mechanism\
    \ name for a GSS-API mechanism.  It also returns a name\n      and description\
    \ of the mechanism in user-friendly form.\n      The output variable sasl_mech_name\
    \ will hold the IANA registered\n      mechanism name for the GSS-API mechanism,\
    \ or if none is\n      registered, a mechanism name computed from the OID as described\n\
    \      in Section 3.1 of this document.\n"
- title: 10.1.  gss_inquire_saslname_for_mech
  contents:
  - "10.1.  gss_inquire_saslname_for_mech\n   The C binding for the GSS_Inquire_SASLname_for_mech\
    \ call is as\n   follows.\n   As mentioned in [RFC2744], routines may return GSS_S_FAILURE,\n\
    \   indicating an implementation-specific or mechanism-specific error\n   condition,\
    \ further details of which are reported via the minor_status\n   parameter.\n\
    \      OM_uint32 gss_inquire_saslname_for_mech(\n        OM_uint32     *minor_status,\n\
    \        const gss_OID  desired_mech,\n        gss_buffer_t   sasl_mech_name,\n\
    \        gss_buffer_t   mech_name,\n        gss_buffer_t   mech_description\n\
    \      );\n      Purpose:\n      Output the SASL mechanism name of a GSS-API mechanism.\n\
    \      It also returns a name and description of the mechanism in a\n      user-friendly\
    \ form.\n      Parameters:\n      minor_status      Integer, modify\n        \
    \                Mechanism-specific status code.\n      desired_mech      OID,\
    \ read\n                        Identifies the GSS-API mechanism to query.\n \
    \     sasl_mech_name    buffer, character-string, modify, optional\n         \
    \               Buffer to receive SASL mechanism name.\n                     \
    \   The application must free storage associated\n                        with\
    \ this name after use with a call to\n                        gss_release_buffer().\n\
    \      mech_name         buffer, character-string, modify, optional\n        \
    \                Buffer to receive human-readable mechanism name.\n          \
    \              The application must free storage associated\n                \
    \        with this name after use with a call to\n                        gss_release_buffer().\n\
    \      mech_description  buffer, character-string, modify, optional\n        \
    \                Buffer to receive description of mechanism.\n               \
    \         The application must free storage associated\n                     \
    \   with this name after use with a call to\n                        gss_release_buffer().\n\
    \      Function value:   GSS status code:\n      GSS_S_COMPLETE    Successful\
    \ completion.\n      GSS_S_BAD_MECH    The desired_mech OID is unsupported.\n"
- title: 11.  GSS_Inquire_mech_for_SASLname Call
  contents:
  - "11.  GSS_Inquire_mech_for_SASLname Call\n   To allow SASL clients to more efficiently\
    \ identify to which GSS-API\n   mechanism a particular SASL mechanism name refers,\
    \ we specify a new\n   GSS-API utility function for this purpose.\n      Inputs:\n\
    \      o  sasl_mech_name UTF-8 STRING -- SASL name of mechanism.\n      Outputs:\n\
    \      o  major_status INTEGER\n      o  minor_status INTEGER\n      o  mech_type\
    \ OBJECT IDENTIFIER -- must be explicit mechanism,\n         and not \"default\"\
    \ specifier.  Caller should treat as read-only\n         and should not attempt\
    \ to release.\n      Return major_status codes:\n      o  GSS_S_COMPLETE indicates\
    \ successful completion, and that output\n         parameters holds correct information.\n\
    \      o  GSS_S_BAD_MECH indicates that no supported GSS-API mechanism\n     \
    \    had the indicated sasl_mech_name.\n      o  GSS_S_FAILURE indicates that\
    \ the operation failed for reasons\n         unspecified at the GSS-API level.\n\
    \      The GSS_Inquire_mech_for_SASLname call is used to get the GSS-API\n   \
    \   mechanism OID associated with a SASL mechanism name.\n"
- title: 11.1.  gss_inquire_mech_for_saslname
  contents:
  - "11.1.  gss_inquire_mech_for_saslname\n   The C binding for the GSS_Inquire_mech_for_SASLname\
    \ call is as\n   follows.\n   As mentioned in [RFC2744], routines may return GSS_S_FAILURE,\n\
    \   indicating an implementation-specific or mechanism-specific error\n   condition,\
    \ further details of which are reported via the minor_status\n   parameter.\n\
    \     OM_uint32 gss_inquire_mech_for_saslname(\n       OM_uint32           *minor_status,\n\
    \       const gss_buffer_t   sasl_mech_name,\n       gss_OID             *mech_type\n\
    \     );\n     Purpose:\n     Output GSS-API mechanism OID of mechanism associated\
    \ with given\n     sasl_mech_name.\n     Parameters:\n     minor_status      Integer,\
    \ modify\n                       Mechanism-specific status code.\n     sasl_mech_name\
    \    buffer, character-string, read\n                       Buffer with SASL mechanism\
    \ name.\n     mech_type         OID, modify, optional\n                      \
    \ Actual mechanism used.  The OID returned via\n                       this parameter\
    \ will be a pointer to static\n                       storage that should be treated\
    \ as read-only.\n                       In particular, the application should\
    \ not attempt\n                       to free it.  Specify NULL if not required.\n\
    \     Function value:   GSS status code:\n     GSS_S_COMPLETE    Successful completion.\n\
    \     GSS_S_BAD_MECH    There is no GSS-API mechanism known\n                \
    \       as sasl_mech_name.\n"
- title: 12.  Security Layers
  contents:
  - "12.  Security Layers\n   GS2 does not support SASL security layers.  Applications\
    \ that need\n   integrity or confidentiality protection can use either channel\n\
    \   binding to a secure external channel or another SASL mechanism that\n   does\
    \ provide security layers.\n"
- title: 13.  Interoperability with the SASL GSSAPI Mechanism
  contents:
  - "13.  Interoperability with the SASL GSSAPI Mechanism\n   The Kerberos V5 GSS-API\
    \ [RFC1964] mechanism is currently used in SASL\n   under the name GSSAPI, see\
    \ [RFC4752].  The Kerberos V5 mechanism may\n   also be used with the GS2 family.\
    \  This causes an interoperability\n   problem, which is discussed and resolved\
    \ below.\n"
- title: 13.1.  The Interoperability Problem
  contents:
  - "13.1.  The Interoperability Problem\n   The SASL \"GSSAPI\" mechanism is not\
    \ wire compatible with the Kerberos\n   V GSS-API mechanism used as a SASL GS2\
    \ mechanism.\n   If a client (or server) only support Kerberos V5 under the \"\
    GSSAPI\"\n   name, and the server (or client) only support Kerberos V5 under the\n\
    \   GS2 family, the mechanism negotiation will fail.\n"
- title: 13.2.  Resolving the Problem
  contents:
  - "13.2.  Resolving the Problem\n   If the Kerberos V5 mechanism is supported under\
    \ GS2 in a server, the\n   server SHOULD also support Kerberos V5 through the\
    \ \"GSSAPI\"\n   mechanism, to avoid interoperability problems with older clients.\n\
    \   Reasons for violating this recommendation may include security\n   considerations\
    \ regarding the absent features in the GS2 mechanism.\n   The SASL \"GSSAPI\"\
    \ mechanism lacks support for channel bindings, which\n   means that using an\
    \ external secure channel may not be sufficient\n   protection against active\
    \ attackers (see [RFC5056] and [MITM]).\n"
- title: 13.3.  Additional Recommendations
  contents:
  - "13.3.  Additional Recommendations\n   If the application requires SASL security\
    \ layers, then it MUST use\n   the SASL \"GSSAPI\" mechanism [RFC4752] instead\
    \ of \"GS2-KRB5\" or \"GS2-\n   KRB5-PLUS\".\n   If the application can use channel\
    \ binding to an external channel,\n   then it is RECOMMENDED that it select Kerberos\
    \ V5 through the GS2\n   mechanism rather than the \"GSSAPI\" mechanism.\n"
- title: 14.  GSS-API Mechanisms That Negotiate Other Mechanisms
  contents:
  - "14.  GSS-API Mechanisms That Negotiate Other Mechanisms\n   A GSS-API mechanism\
    \ that negotiates other mechanisms will interact\n   badly with the SASL mechanism\
    \ negotiation.  There are two problems.\n   The first is an interoperability problem\
    \ and the second is a security\n   concern.  The problems are described and resolved\
    \ below.\n"
- title: 14.1.  The Interoperability Problem
  contents:
  - "14.1.  The Interoperability Problem\n   If a client implements GSS-API mechanism\
    \ X, potentially negotiated\n   through a GSS-API mechanism Y, and the server\
    \ also implements GSS-API\n   mechanism X negotiated through a GSS-API mechanism\
    \ Z, the\n   authentication negotiation will fail.\n"
- title: 14.2.  Security Problem
  contents:
  - "14.2.  Security Problem\n   If a client's policy is to first prefer GSSAPI mechanism\
    \ X, then non-\n   GSSAPI mechanism Y, then GSSAPI mechanism Z, and if a server\
    \ supports\n   mechanisms Y and Z but not X, then if the client attempts to\n\
    \   negotiate mechanism X by using a GSS-API mechanism that negotiates\n   other\
    \ mechanisms (such as Simple and Protected GSS-API Negotiation\n   (SPNEGO) [RFC4178]),\
    \ it may end up using mechanism Z when it ideally\n   should have used mechanism\
    \ Y.  For this reason, the use of GSS-API\n   mechanisms that negotiate other\
    \ mechanisms is disallowed under GS2.\n"
- title: 14.3.  Resolving the Problems
  contents:
  - "14.3.  Resolving the Problems\n   GSS-API mechanisms that negotiate other mechanisms\
    \ MUST NOT be used\n   with the GS2 SASL mechanism.  Specifically, SPNEGO [RFC4178]\
    \ MUST NOT\n   be used as a GS2 mechanism.  To make this easier for SASL\n   implementations,\
    \ we assign a symbolic SASL mechanism name to the\n   SPNEGO GSS-API mechanism,\
    \ \"SPNEGO\".  SASL client implementations MUST\n   NOT choose the SPNEGO mechanism\
    \ under any circumstances.\n   The GSS_C_MA_MECH_NEGO attribute of GSS_Inquire_attrs_for_mech\n\
    \   [RFC5587] can be used to identify such mechanisms.\n"
- title: 15.  IANA Considerations
  contents:
  - "15.  IANA Considerations\n   The IANA has registered a SASL mechanism family\
    \ as per [RFC4422]\n   using the following information.\n     Subject: Registration\
    \ of SASL mechanism family GS2-*\n     SASL mechanism prefix: GS2-\n     Security\
    \ considerations: RFC 5801\n     Published specification: RFC 5801\n     Person\
    \ & email address to contact for further information:\n       Simon Josefsson\
    \ <simon@josefsson.org>\n     Intended usage: COMMON\n     Owner/Change controller:\
    \ iesg@ietf.org\n     Note: Compare with the GSSAPI and GSS-SPNEGO mechanisms.\n\
    \   The IANA is advised that SASL mechanism names starting with \"GS2-\"\n   are\
    \ reserved for SASL mechanisms that conform to this document.  The\n   IANA has\
    \ placed a statement to that effect in the SASL Mechanisms\n   registry.\n   The\
    \ IANA is further advised that GS2 SASL mechanism names MUST NOT\n   end in \"\
    -PLUS\" except as a version of another mechanism name simply\n   suffixed with\
    \ \"-PLUS\".\n   The SASL names for the Kerberos V5 GSS-API mechanism [RFC4121]\n\
    \   [RFC1964] used via GS2 SHALL be \"GS2-KRB5\" and \"GS2-KRB5-PLUS\".\n   The\
    \ SASL names for the SPNEGO GSS-API mechanism used via GS2 SHALL be\n   \"SPNEGO\"\
    \ and \"SPNEGO-PLUS\".  As described in Section 14, the SASL\n   \"SPNEGO\" and\
    \ \"SPNEGO-PLUS\" MUST NOT be used.  These names are\n   provided as a convenience\
    \ for SASL library implementors.\n"
- title: 16.  Security Considerations
  contents:
  - "16.  Security Considerations\n   Security issues are also discussed throughout\
    \ this memo.\n   The security provided by a GS2 mechanism depends on the security\
    \ of\n   the GSS-API mechanism.  The GS2 mechanism family depends on channel\n\
    \   binding support, so GSS-API mechanisms that do not support channel\n   binding\
    \ cannot be successfully used as SASL mechanisms via the GS2\n   bridge.\n   Because\
    \ GS2 does not support security layers, it is strongly\n   RECOMMENDED that channel\
    \ binding to a secure external channel be\n   used.  Successful channel binding\
    \ eliminates the possibility of man-\n   in-the-middle (MITM) attacks, provided\
    \ that the external channel and\n   its channel binding data are secure and that\
    \ the GSS-API mechanism\n   used is secure.  Authentication failure because of\
    \ channel binding\n   failure may indicate that an MITM attack was attempted,\
    \ but note that\n   a real MITM attacker would likely attempt to close the connection\
    \ to\n   the client or simulate network partition; thus, MITM attack detection\n\
    \   is heuristic.\n   Use of channel binding will also protect the SASL mechanism\n\
    \   negotiation -- if there is no MITM, then the external secure channel\n   will\
    \ have protected the SASL mechanism negotiation.\n   The channel binding data\
    \ MAY be sent (by the actual GSS-API mechanism\n   used) without confidentiality\
    \ protection and knowledge of it is\n   assumed to provide no advantage to an\
    \ MITM (who can, in any case,\n   compute the channel binding data independently).\
    \  If the external\n   channel does not provide confidentiality protection and\
    \ the GSS-API\n   mechanism does not provide confidentiality protection for the\
    \ channel\n   binding data, then passive attackers (eavesdroppers) can recover\
    \ the\n   channel binding data, see [RFC5056].\n   When constructing the input_name_string\
    \ for GSS_Import_name with the\n   GSS_C_NT_HOSTBASED_SERVICE name type, the client\
    \ SHOULD NOT\n   canonicalize the server's fully qualified domain name using an\n\
    \   insecure or untrusted directory service, such as the Domain Name\n   System\
    \ [RFC1034] without DNS Security (DNSSEC) [RFC4033].\n   SHA-1 is used to derive\
    \ SASL mechanism names, but no traditional\n   cryptographic properties are required\
    \ -- the required property is\n   that the truncated output for distinct inputs\
    \ are different for\n   practical input values.  GS2 does not use any other cryptographic\n\
    \   algorithm.  Therefore, GS2 is \"algorithm agile\", or, as agile as the\n \
    \  GSS-API mechanisms that are available for use in SASL applications\n   via\
    \ GS2.\n   GS2 does not protect against downgrade attacks of channel binding\n\
    \   types.  Negotiation of channel binding type was intentionally left\n   out\
    \ of scope for this document.\n   The security considerations of SASL [RFC4422],\
    \ the GSS-API [RFC2743],\n   channel binding [RFC5056], any external channels\
    \ (such as TLS,\n   [RFC5246], channel binding types (see the IANA channel binding\
    \ type\n   registry), and GSS-API mechanisms (such as the Kerberos V5 mechanism\n\
    \   [RFC4121] [RFC1964]), also apply.\n"
- title: 17.  Acknowledgements
  contents:
  - "17.  Acknowledgements\n   The history of GS2 can be traced to the \"GSSAPI\"\
    \ mechanism originally\n   specified by RFC 2222.  This document was derived from\
    \ [SASL-GSSAPI],\n   which was prepared by Alexey Melnikov with significant contributions\n\
    \   from John G. Myers, although the majority of this document has been\n   rewritten\
    \ by the current authors.\n   Contributions of many members of the SASL mailing\
    \ list are gratefully\n   acknowledged.  In particular, ideas and feedback from\
    \ Pasi Eronen,\n   Sam Hartman, Jeffrey Hutzelman, Alexey Melnikov, and Tom Yu\
    \ improved\n   the document and the protocol.  Other suggestions to the documents\n\
    \   were made by Spencer Dawkins, Ralph Droms, Adrian Farrel, Robert\n   Sparks,\
    \ and Glen Zorn.\n"
- title: 18.  References
  contents:
  - '18.  References

    '
- title: 18.1.  Normative References
  contents:
  - "18.1.  Normative References\n   [FIPS.180-1.1995]\n              National Institute\
    \ of Standards and Technology, \"Secure\n              Hash Standard\", FIPS PUB\
    \ 180-1, April 1995,\n              <http://www.itl.nist.gov/fipspubs/fip180-1.htm>.\n\
    \   [RFC2119]  Bradner, S., \"Key words for use in RFCs to Indicate\n        \
    \      Requirement Levels\", BCP 14, RFC 2119, March 1997.\n   [RFC2743]  Linn,\
    \ J., \"Generic Security Service Application Program\n              Interface\
    \ Version 2, Update 1\", RFC 2743, January 2000.\n   [RFC3629]  Yergeau, F., \"\
    UTF-8, a transformation format of ISO\n              10646\", STD 63, RFC 3629,\
    \ November 2003.\n   [RFC4422]  Melnikov, A. and K. Zeilenga, \"Simple Authentication\
    \ and\n              Security Layer (SASL)\", RFC 4422, June 2006.\n   [RFC4648]\
    \  Josefsson, S., \"The Base16, Base32, and Base64 Data\n              Encodings\"\
    , RFC 4648, October 2006.\n   [RFC5056]  Williams, N., \"On the Use of Channel\
    \ Bindings to Secure\n              Channels\", RFC 5056, November 2007.\n   [RFC5234]\
    \  Crocker, D. and P. Overell, \"Augmented BNF for Syntax\n              Specifications:\
    \ ABNF\", STD 68, RFC 5234, January 2008.\n   [RFC5554]  Williams, N., \"Clarifications\
    \ and Extensions to the\n              Generic Security Service Application Program\
    \ Interface\n              (GSS-API) for the Use of Channel Bindings\", RFC 5554,\n\
    \              May 2009.\n   [CCITT.X690.2002]\n              International Telephone\
    \ and Telegraph Consultative\n              Committee, \"ASN.1 encoding rules:\
    \ Specification of basic\n              encoding Rules (BER), Canonical encoding\
    \ rules (CER) and\n              Distinguished encoding rules (DER)\", CCITT Recommendation\n\
    \              X.690, July 2002.\n   [RFC5929]  Altman, J., Williams, N., and\
    \ L. Zhu, \"Channel Bindings\n              for TLS\", RFC 5929, July 2010.\n"
- title: 18.2.  Informative References
  contents:
  - "18.2.  Informative References\n   [RFC1034]  Mockapetris, P., \"Domain names\
    \ - concepts and facilities\",\n              STD 13, RFC 1034, November 1987.\n\
    \   [RFC1964]  Linn, J., \"The Kerberos Version 5 GSS-API Mechanism\",\n     \
    \         RFC 1964, June 1996.\n   [RFC2025]  Adams, C., \"The Simple Public-Key\
    \ GSS-API Mechanism\n              (SPKM)\", RFC 2025, October 1996.\n   [RFC2222]\
    \  Myers, J., \"Simple Authentication and Security Layer\n              (SASL)\"\
    , RFC 2222, October 1997.\n   [RFC2744]  Wray, J., \"Generic Security Service\
    \ API Version 2 :\n              C-bindings\", RFC 2744, January 2000.\n   [RFC4033]\
    \  Arends, R., Austein, R., Larson, M., Massey, D., and S.\n              Rose,\
    \ \"DNS Security Introduction and Requirements\",\n              RFC 4033, March\
    \ 2005.\n   [RFC4121]  Zhu, L., Jaganathan, K., and S. Hartman, \"The Kerberos\n\
    \              Version 5 Generic Security Service Application Program\n      \
    \        Interface (GSS-API) Mechanism: Version 2\", RFC 4121,\n             \
    \ July 2005.\n   [RFC4178]  Zhu, L., Leach, P., Jaganathan, K., and W. Ingersoll,\
    \ \"The\n              Simple and Protected Generic Security Service Application\n\
    \              Program Interface (GSS-API) Negotiation Mechanism\",\n        \
    \      RFC 4178, October 2005.\n   [RFC4752]  Melnikov, A., \"The Kerberos V5\
    \ (\"GSSAPI\") Simple\n              Authentication and Security Layer (SASL)\
    \ Mechanism\",\n              RFC 4752, November 2006.\n   [RFC5246]  Dierks,\
    \ T. and E. Rescorla, \"The Transport Layer Security\n              (TLS) Protocol\
    \ Version 1.2\", RFC 5246, August 2008.\n   [RFC5587]  Williams, N., \"Extended\
    \ Generic Security Service Mechanism\n              Inquiry APIs\", RFC 5587,\
    \ July 2009.\n   [RFC5802]  Menon-Sen, A., Melnikov, A., Newman, C., and N. Williams,\n\
    \              \"Salted Challenge Response Authentication Mechanism\n        \
    \      (SCRAM) SASL and GSS-API Mechanisms\", RFC 5802, July 2010.\n   [MITM]\
    \     Asokan, N., Niemi, V., and K. Nyberg, \"Man-in-the-Middle\n            \
    \  in Tunnelled Authentication\", in 11th Security\n              Protocols Workshop,\
    \ 2002.\n   [SASL-GSSAPI]\n              Melnikov, A., \"The Kerberos V5 (\"GSSAPI\"\
    ) SASL mechanism\",\n              Work in Progress, March 2005.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Simon Josefsson\n   SJD AB\n   Hagagatan 24\n   Stockholm\
    \  113 47\n   SE\n   EMail: simon@josefsson.org\n   URI:   http://josefsson.org/\n\
    \   Nicolas Williams\n   Oracle\n   5300 Riata Trace Ct\n   Austin, TX  78727\n\
    \   USA\n   EMail: Nicolas.Williams@oracle.com\n"
