- title: __initial_text__
  contents:
  - "                   TELNET Data Entry Terminal Option\n                      \
    \   DODIIS Implementation\n"
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This RFC suggests a proposed protocol on the TELNET Data\
    \ Entry\n   Terminal (DET) Option - DODIIS Implementation for the Internet\n \
    \  community.  It is intended that this specification be compatible with\n   the\
    \ specification of DET Option in RFC-732.  Discussion and\n   suggestions for\
    \ improvements are encouraged.  Distribution of this\n   memo is unlimited.\n"
- title: Introduction
  contents:
  - "Introduction\n   In the early 1980s, the Defense Intelligence Agency (DIA) undertook\n\
    \   the tasks of developing a TELNET capability to access full screen\n   applications\
    \ across a packet switching network.  This effort was\n   successful by implementing\
    \ Data Entry Terminal (DET) options within\n   the TELNET protocol based on RFC\
    \ 732.  These DET options have been\n   implemented on IAS, MVS, OS86 and UNIX\
    \ operating systems.  DET\n   options are being developed for VM and VMS operating\
    \ systems.\n   The Department of Defense Intelligence Information System (DODIIS)\
    \ is\n   a confederation of heterogeneous computer systems and remote\n   terminals\
    \ utilizing the Defense Data Network (DDN) as the\n   communications backbone\
    \ (namely the SCINET/DSNET-3).\n   Although the reason for implementing a DET\
    \ option specification was\n   based upon data base application interfaces, the\
    \ use of a full screen\n   TELNET provides a method to achieve higher efficiency\
    \ on the network.\n   Most terminal to host applications on the ARPANET are character\
    \ echo\n   TELNETs.  This is both costly in time and network utilization, since\n\
    \   one character pressed on the keyboard generates a datagram composed\n   of\
    \ TCP/IP headers plus the character sent to the host and the host\n   echoes back\
    \ a similar datagram.  In the DODIIS community, programmers\n   are highly encouraged\
    \ to implement full screen applications; line at\n   a time is acceptable; and\
    \ character remote echo mode is discouraged.\n   This RFC in its final form will\
    \ be implemented on SCINET.  During the\n   interim period, the \"DODIIS TELNET\
    \ Network Virtual Data Entry\n   Terminal (NVDET) Option Specification\", DIA,\
    \ April 1983, will be\n   implemented.\n                             TABLE OF\
    \ CONTENTS\n                                                                Page\
    \ No.\n                                                                --------\n\
    \   SECTION 1   COMMAND NAME AND OPTION CODE                          4\n   SECTION\
    \ 2   COMMAND MEANINGS                                      4\n              \
    \   Facilities Subcommands                              4\n                 Edit\
    \ Subcommands                                    8\n                 Transmit\
    \ Subcommands                                8\n                 Erase Subcommands\
    \                                  10\n                 Format Subcommands   \
    \                              10\n                 Miscellaneous Subcommands\
    \                          13\n   SECTION 3   DEFAULT AND MINIMAL IMPLEMENTATION\
    \                   15\n   SECTION 4   MOTIVATION FOR THE OPTION             \
    \               17\n   SECTION 5   DESCRIPTION AND IMPLEMENTATION RULES      \
    \           17\n                 The DODIIS DET Model                        \
    \       17\n                 Negotiating the DET Option                      \
    \   18\n                 DET Facilities Negotiation                         18\n\
    \                 General DET Interaction                            19\n    \
    \             Form Construction                                  20\n        \
    \         Form response                                      21\n            \
    \     Function Keys                                      22\n                \
    \ Field Selection                                    22\n                 Out-Of-Context\
    \ Data                                23\n                 Line Discipline   \
    \                                 23\n                 Standard TELNET Control\
    \ Functions                  24\n                 Other Implementation Notes \
    \                        24\n   APPENDIX 1  DET OPCODES AND SUBCOMMAND SYNTAX\
    \                    25\n   APPENDIX 2  DET ERROR CODES                      \
    \                26\n   The convention in the documentation of the TELNET NVDET\
    \ Protocol is\n   to express numbers in decimal.  Data fields are described left\
    \ to\n   right, with the most significant octet on the left and the least\n  \
    \ significant octet on the right.\n   The order of transmission of the data described\
    \ in this document is\n   resolved to the octet level.  Whenever a diagram shows\
    \ a group of\n   octets, the order of transmission of those octets is the normal\
    \ order\n   in which they are read in English.  For example, in the following\n\
    \   diagram the octets are transmitted in the order they are numbered.\n     \
    \  0                   1                   2                   3\n       0 1 2\
    \ 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |       1       |       2       |       3       |       4       |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \       5       |       6       |       7       |       8       |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |       9       |      10       |      11       |      12       |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      \
    \                  Transmission Order of Bytes\n   Whenever an octet represents\
    \ a numeric quantity, the left most bit in\n   the diagram is the high order or\
    \ most significant bit.  That is, the\n   bit labeled 0 is the most significant\
    \ bit.  For example, the\n   following diagram represents the value 170 (decimal).\n\
    \                              0 1 2 3 4 5 6 7\n                             +-+-+-+-+-+-+-+-+\n\
    \                             |1 0 1 0 1 0 1 0|\n                            \
    \ +-+-+-+-+-+-+-+-+\n                           Significance of Bits\n   Similarly,\
    \ whenever a multi-octet field represents a numeric\n   quantity, the left most\
    \ bit of the whole field is the most\n   significant bit.  When a multi-octet\
    \ quantity is transmitted the most\n   significant octet is transmitted first.\n\
    \   1. Command Name and Option Code\n      DET         20\n   2. Command Meanings\n\
    \      IAC WILL DET\n         The sender of this command REQUESTS permission to\
    \ begin, or\n         AGREES that it will begin, sending and receiving Data Entry\n\
    \         Terminal (DET) subcommands to control session interactions.\n      IAC\
    \ WONT DET\n         If the connection is already operating in DET mode, the sender\n\
    \         of this command DEMANDS that the connection stop operating in\n    \
    \     DET mode and begin operating in TELNET NVT mode.  If the\n         connection\
    \ is not operating in DET mode, the sender REFUSES to\n         begin operating\
    \ in DET mode.  A connection is operating in\n         TELNET NVT mode when both\
    \ parties are interpreting data as\n         described by the TELNET SPECIFICATION,\
    \ MIL-STD-1782.\n      IAC DO DET\n         The sender of this command REQUESTS\
    \ permission to begin, or\n         AGREES that it will begin, sending and receiving\
    \ Data Entry\n         Terminal (DET) subcommands to control session interactions.\n\
    \      IAC DONT DET\n         If the connection is already operating in DET mode,\
    \ the sender\n         of this command DEMANDS that the connection stop operating\
    \ in\n         DET mode and begin operating in TELNET NVT mode.  If the\n    \
    \     connection is not operating in DET mode, the sender REFUSES  to\n      \
    \   begin  operating in DET mode.    A connection is operating in\n         TELNET\
    \ NVT mode when both parties are interpreting data as\n         described by the\
    \ TELNET SPECIFICATION, MIL-STD-1782.\n      DODIIS implementations of the DET\
    \ option use the subcommands\n      described in the remainder of Section 2. \
    \ A description of the\n      DODIIS DET model and DET subcommand usage is contained\
    \ in Section\n      5.\n   FACILITIES SUBCOMMANDS.  Facilities subcommands are\
    \ used to negotiate\n   DET facilities (subcommands and attributes).  The facility\n\
    \   subcommands indicate the DET facilities the sender supports.\n   Facility\
    \ negotiation may be viewed as the terminal indicating the\n   facilities it provides\
    \ and the application indicating the facilities\n   it desires.  The bits of the\
    \ facility maps are numbered from the\n   right starting at zero.  Thus, if bit\
    \ 2 is set, the field will have a\n   decimal value of 4.\n      IAC SB DET EDIT-FACILITIES\
    \ <facility map> IAC SE\n         subcommand code:  1\n         This subcommand\
    \ indicates the edit facilities the sender\n         supports.  The <facility\
    \ map> parameter is one eight bit byte\n         containing the following flags:\n\
    \             Bits 5-7        Reserved\n             Bit  4          Read Cursor\n\
    \             Bits 0-3        Reserved\n         where:\n             If the Read-Cursor\
    \ bit is set, the sender supports the\n             READ-CURSOR and CURSOR-POSITION\
    \ subcommands.\n             Reserved bits represent edit facilities that are\
    \ not\n             defined for DODIIS implementations;  therefore, no\n     \
    \        descriptions are provided.  Reserved bits must be zeroed\n          \
    \   to indicate non support of the associated edit facilities.\n      IAC SB DET\
    \ ERASE-FACILITIES <facility map> IAC SE\n         subcommand code:  2\n     \
    \    This subcommand indicates the erase facilities the sender\n         supports.\
    \  The <facility map> parameter is one eight bit\n         byte containing flags.\
    \  Since no erase facilities are\n         defined for DODIIS implementations,\
    \ no descriptions are\n         provided.  The ERASE-FACILITIES subcommand is\
    \ part of the\n         minimal DET implementation and is included for that reason.\n\
    \         DODISI implementors must declare non support of erase\n         facilities\
    \ by sending this subcommand with a zeroed facility\n         map.\n      IAC\
    \ SB DET TRANSMIT-FACILITIES <facility map> IAC SE\n         subcommand code:\
    \  3\n         This subcommand indicates the transmit facilities the sender\n\
    \         supports.  The <facility map> parameter is one eight bit byte\n    \
    \     containing the following flags:\n             Bits 6-7        Reserved\n\
    \             Bit  5          Data Transmit\n             Bits 0-4        Reserved\n\
    \         where:\n             If the Data-Transmit bit is set, the sender supports\
    \ the\n             DATA-TRANSMIT subcommand.\n             Reserved bits represent\
    \ transmit facilities that are not\n             defined for DODIIS implementations;\
    \ therefore, no\n             descriptions are provided.  Reserved bits must be\
    \ zeroed\n             to indicate non support of the associated transmit\n  \
    \           facilities.\n      IAC SB DET FORMAT-FACILITIES <facility map> IAC\
    \ SE\n         subcommand code:  4\n         This subcommand indicates the format\
    \ facilities the sender\n         supports.  The <facility map> parameter is two\
    \ eight bit bytes\n         containing the following:\n             Byte 0\n \
    \               Bit  7       Function Key\n                Bit  6       Modified\n\
    \                Bit  5       Field Selection\n                Bit  4       Repeat\n\
    \                Bit  3       Blinking\n                Bit  2       Reverse Video\n\
    \                Bit  1       Right Justification\n                Bit  0    \
    \   Reserved\n             Byte 1\n                Bit  7       Reserved for color\n\
    \                Bit  6       Reserved\n                Bit  5       Protection\n\
    \                Bit  4       Alphabetic-Only\n                Bit  3       Numeric-Only\n\
    \                Bits 0-2     Intensity\n             where:\n               \
    \ If the Function-Key bit is set, the sender supports the\n                FUNCTION-KEY\
    \ and ENABLE-FUNCTION-KEY subcommands.\n                If the Modified bit is\
    \ set, the sender supports the\n                FORMAT-DATA subcommand's Modified\
    \ attribute and the\n                TRANSMIT-MODIFIED subcommand.\n         \
    \       If the Field-Selection bit is set, the sender supports\n             \
    \   the FORMAT-DATA subcommand's Selectable attribute and\n                the\
    \ SELECTED-FIELD subcommand.\n                If the Repeat bit is set the sender\
    \ supports the REPEAT\n                subcommand.\n                If the Blinking\
    \ bit is set, the sender requests or\n                provides the ability to\
    \ emphasize a string of characters\n                by causing them to blink when\
    \ displayed.  (See the\n                FORMAT-DATA subcommand.)\n           \
    \     If the Reverse-Video bit is set, the sender requests or\n              \
    \  provides the ability to emphasize a string of characters\n                by\
    \ \"reversing their video image\".  If characters are\n                normally\
    \ displayed as dark characters on a light\n                background, they are\
    \ reversed and displayed as light\n                characters on a dark background,\
    \ or\n                vice versa.  (See the FORMAT-DATA subcommand.)\n       \
    \         If the Right-Justification bit is set, the sender\n                requests\
    \ or provides the ability to cause data entered\n                in a field to\
    \ be right justified within the field.  (See\n                the FORMAT-DATA\
    \ subcommand.)\n                If the Protection bit is set, the sender requests\
    \ or\n                provides the ability to protect certain fields displayed\n\
    \                on the DET screen from being altered by the user and\n      \
    \          supports the ERASE-UNPROTECTED, FIELD-SEPARATOR, and\n            \
    \    TRANSMIT-UNPROTECTED subcommands.  (See the FORMAT-DATA\n               \
    \ subcommand.)\n                If the Alphabetic-Only bit is set, the sender\
    \ requests\n                or provides the ability to constrain the user of the\
    \ DET\n                such that only alphabetic data may be entered into\n  \
    \              certain fields.  (See the FORMAT-DATA subcommand.)\n          \
    \      If the Numeric-Only bit is set, the sender requests or\n              \
    \  provides the ability to constrain the user of the DET\n                such\
    \ that only numeric data may be entered into certain\n                fields.\
    \  (See the FORMAT-DATA subcommand.)\n                The Intensity parameter\
    \ is three bits wide and is\n                interpreted as a positive binary\
    \ integer indicating the\n                number of visible levels of intensity\
    \ that the sender\n                requests or provides for displaying data. \
    \ (See the\n                FORMAT-DATA subcommand.)\n                Reserved\
    \ bits represent format facilities that are not\n                defined for DODIIS\
    \ implementations; therefore, no\n                descriptions are provided. \
    \  Reserved bits must be\n                zeroed to indicate non support of the\
    \ associated format\n                facilities.\n   EDIT SUBCOMMANDS.  Edit subcommands\
    \ are sent by the application to\n   position the cursor on the DET screen.\n\
    \      IAC SB DET MOVE-CURSOR <x><y> IAC SE\n         subcommand code:  5\n  \
    \       This subcommand positions the DET cursor at screen location\n        \
    \ (x,y).  the <x> and <y> parameters are positive eight bit\n         binary integers\
    \ representing the character and line positions,\n         respectively, of a\
    \ DET screen location.  Values of x range\n         from zero (0) through M-1,\
    \ where M is the DET screen width in\n         characters.  Values of y range\
    \ from zero (0) through N-1,\n         where N is the DET screen length in lines.\n\
    \      IAC SB DET HOME-CURSOR IAC SE\n         subcommand code: 12\n         This\
    \ subcommand positions the cursor at DET screen address\n         (0,0).  It is\
    \ equivalent to the MOVE-CURSOR subcommand, where\n         x=0 and y=0.\n   TRANSMIT\
    \ SUBCOMMANDS.  Transmit subcommands are sent by the\n   application to request\
    \ data from the DET or by the terminal to\n   identify data returned from the\
    \ DET.\n      IAC SB DET READ-CURSOR IAC SE\n         subcommand code: 17\n  \
    \       This subcommand requests return of the DET cursor position.\n        \
    \ Use of this subcommand requires facility negotiation; see the\n         EDITFACILITIES\
    \ subcommand, Read-Cursor bit.\n      IAC SB DET CURSOR-POSITION <x><y> IAC SE\n\
    \         subcommand code: 18\n         This subcommand returns cursor position\
    \ in response to a\n         READCURSOR subcommand.  The <x> and <y> parameters\
    \ are\n         eight bit binary integers representing the cursor's position.\n\
    \         The <x> and <y> parameters are positive eight bit binary\n         integers\
    \ representing the character and line positions,\n         respectively, of a\
    \ DET screen location.  Values of x range\n         from zero (0) through M-1,\
    \ where M is the DET screen width in\n         characters.  Values of y range\
    \ from zero (0) through N-1,\n         where N is the DET screen length in lines.\
    \  Use of this\n         subcommand requires facility negotiation; see the\n \
    \        EDIT-FACILITIES subcommand, Read-Cursor bit.\n      IAC SB DET TRANSMIT-SCREEN\
    \ IAC SE\n         subcommand code: 20\n         This subcommand requests return\
    \ of all characters on the DET\n         screen beginning at cursor position (0,0).\
    \  M x N characters,\n         where M is the DET screen width in characters and\
    \ where N is\n         the DET screen length in lines, are returned with a SPACE\n\
    \         character returned for each character in the unwritten areas\n     \
    \    (the areas between defined fields).  FIELD-SEPARATOR and\n         DATA-TRANSMIT\
    \ subcommands are not required to delimit or\n         identify fields.\n    \
    \  IAC SB DET TRANSMIT-UNPROTECTED IAC SE\n         subcommand code: 21\n    \
    \     This subcommand requests return of all characters in\n         unprotected\
    \ fields.  Use of this subcommand requires facility\n         negotiation; see\
    \ the FORMAT-FACILITIES subcommand, Protection\n         bit.\n      IAC SB DET\
    \ TRANSMIT-MODIFIED IAC SE\n         subcommand code: 27\n         This subcommand\
    \ requests return of all characters in modified\n         fields.  Modified fields\
    \ are fields that have the Modified\n         attribute set (see FORMAT-DATA subcommand)\
    \ as well as fields\n         actually modified by the user.  Use of this subcommand\n\
    \         requires facility negotiation; see the FORMAT-FACILITIES\n         subcommand,\
    \ Modified bit.\n      IAC SB DET DATA-TRANSMIT <x><y> IAC SE\n         subcommand\
    \ code: 28\n         This subcommand identifies a field returned in response to\n\
    \         a TRANSMIT-MODIFIED subcommand.  The <x> and <y> parameters\n      \
    \   are positive eight bit binary integers indicating the cursor\n         position\
    \ of the field that follows the DATA-TRANSMIT\n         subcommand.  This subcommand\
    \ may precede the first field of\n         a transmission with subsequent fields\
    \ separated by the\n         FIELD-SEPARATOR subcommand or it may precede each\
    \ field.\n         Use of this subcommand requires facility negotiation; see\n\
    \         the TRANSMIT-FACILITIES subcommand, Data-Transmit bit.\n   ERASE SUBCOMMANDS.\
    \  Erase subcommands are used by the application to\n   erase the DET screen or\
    \ selected DET screen areas.  In performing\n   erase operations, the erased characters\
    \ are replaced with SPACE\n   characters.\n      IAC SB DET ERASE-SCREEN IAC SE\n\
    \         subcommand code: 29\n         This subcommand erases all characters\
    \ from the DET screen.\n         All fields regardless of their attributes are\
    \ deleted.  The\n         cursor position after the operation is at (0,0).  If\
    \ the\n         protection attribute has been negotiated, the erased screen\n\
    \         contains protected SPACE characters.\n      IAC SB DET ERASE-UNPROTECTED\
    \ IAC SE\n         subcommand code: 35\n         This subcommand erases all characters\
    \ in the unprotected fields\n         of the DET screen.  This subcommand replaces\
    \ field contents\n         with SPACE characters; field attributes and sizes are\
    \ not\n         changed.  The cursor position after the operation is at the\n\
    \         beginning of the first unprotected field or, if there is no\n      \
    \   unprotected field, at (0,0).  Use of this subcommand requires\n         facility\
    \ negotiation; see the FORMAT-FACILITIES subcommand,\n         Protection bit.\n\
    \   FORMAT SUBCOMMANDS.  The format subcommands are used by the\n   application\
    \ to define the fields of a form and by the terminal to\n   delimit fields sent\
    \ from the DET.\n      IAC SB DET FORMAT-DATA <format map><count> IAC SE\n   \
    \      subcommand code: 36\n         This subcommand defines the attributes and\
    \ size of a DET field.\n         The <format map> parameter defines the field\
    \ attributes and the\n         <count> parameter defines the field size.  The\
    \ field starts at\n         the position of the cursor when the subcommand is\
    \ acted upon.\n         The next <count> data characters in the data stream fill\
    \ the\n         field.\n         The <format map> parameter is two eight bit bytes\
    \ and contains\n         the following:\n             Byte 0\n               \
    \ Bit  7             Blinking\n                Bit  6             Reverse Video\n\
    \                Bit  5             Right Justification\n                Bits\
    \ 3-4           Protection\n                Bits 0-2           Intensity\n   \
    \          Byte 1\n                Bits 5-7           Reserved\n             \
    \   Bits 2-4           Reserved for color\n                Bit  1            \
    \ Modified\n                Bit  0             Selectable\n             where:\n\
    \                If the Blinking bit is set, the following field of\n        \
    \         <count> characters should have the Blinking attribute\n            \
    \    applied to it by the receiver.\n                If the Reverse Video bit\
    \ is set, the following field of\n                <count> characters should be\
    \ displayed by the receiver\n                with video reversed.\n          \
    \      If the Right Justification bit is set, characters\n                entered\
    \ into the field by the user should be right\n                justified.\n   \
    \             The Protection attribute is two bits wide and may take\n       \
    \         on the following values:\n                  0  No protection.  Any valid\
    \ DET data character may\n                     be entered in the field.\n    \
    \              1  Protected.  No data may be entered in the field.\n         \
    \         2  Alphabetic-only.  Only the alphabetic characters\n              \
    \       (A-Z and a-z) or the space character may be\n                     entered\
    \ in the field.\n                  3  Numeric-only.  Only the numeric characters\
    \ (0-9),\n                     the plus sign (+), the minus sign (-), the decimal\n\
    \                     point (.) or the space character may be entered in\n   \
    \                  the field.\n                The Intensity attribute is three\
    \ bits wide and indicates\n                the brightness to be used when displaying\
    \ the characters\n                in or entered into the field <count> characters\
    \ wide.\n                The available number of visible intensity levels should\n\
    \                have been negotiated using the FORMAT-FACILITY\n            \
    \    subcommand. A value of zero (0) indicates that\n                brightness\
    \ should be OFF; that is, characters in or\n                entered into the field\
    \ should not be displayed.  The\n                values 1-7 indicate relative\
    \ brightness; the exact\n                algorithm for mapping these values to\
    \ the available\n                levels of intensity is left to the implementors.\n\
    \                If the Modified bit is set, the field is considered to\n    \
    \            have been modified and will be returned, along with any\n       \
    \         user modified fields.\n                If the Selectable bit is set,\
    \ the field is a candidate\n                for field selection using the DET\
    \ field selection\n                device.\n      The <count> parameter is two\
    \ bytes and should be interpreted as a\n      positive 16-bit binary integer that\
    \ defines the field size.  The\n      high order bit is transmitted first.  Data,\
    \ not in the scope of\n      the count of a FORMAT-DATA subcommand, should be\
    \ displayed with\n      the default field attributes (no blinking, no reverse\
    \ video, no\n      justification, no protection, not modified, not selectable,\
    \ and a\n      visible intensity).  Minimum field size is one (1) character.\n\
    \      Maximum field size is determined by a field's starting location\n     \
    \ and the end of the screen or the start of the next field.\n      Use of field\
    \ attributes requires facility negotiation; see the\n      FORMAT-FACILITIES subcommand.\n\
    \   IAC SB DET REPEAT <count><char> IAC SE\n         subcommand code: 37\n   \
    \      This subcommand permits compression of DET data by encoding\n         strings\
    \ of identical characters as the character and a repeat\n         count.  The\
    \ <count> parameter is a positive 8-bit binary\n         integer.  The <char>\
    \ parameter is a valid DET data character.\n         Use of this subcommand requires\
    \ facility negotiation; see\n         the FORMAT-FACILITIES subcommand, Repeat\
    \ bit.\n      IAC SB DET FIELD-SEPARATOR IAC SE\n         subcommand code: 39\n\
    \         This subcommand separates fields returned by the DET in\n         response\
    \ to TRANSMIT-MODIFIED or TRANSMIT-UNPROTECTED\n         subcommands.  Use of\
    \ this subcommand requires facility\n         negotiation; see the FORMAT-FACILITIES\
    \ subcommand,\n         Protection bit.\n"
- title: MISCELLANEOUS SUBCOMMANDS
  contents:
  - "MISCELLANEOUS SUBCOMMANDS\n      IAC SB DET FUNCTION-KEY <code> IAC SE\n    \
    \     subcommand code: 40\n         This subcommand transmits a user entered function\
    \ key code.\n         The <code> parameter is one byte that identifies the virtual\n\
    \         function key entered.  Function key <code> values range from\n     \
    \    0 to 255.  This subcommand is used in conjunction with the\n         ENABLE-FUNCTION-KEY\
    \ subcommand.  Use of this subcommand\n         requires facility negotiation;\
    \ see the FORMAT-FACILITIES\n         subcommand, Function-Key bit.\n      IAC\
    \ SB DET ERROR <cmd><error code> IAC SE\n         subcommand code: 41\n      \
    \   This subcommand allows a DET option implementation to report\n         errors\
    \ it detects to the corresponding TELNET process.  The\n         <cmd> parameter\
    \ is one byte containing the subcommand code\n         of the subcommand causing\
    \ the error.  The <error code>\n         parameter is one byte containing a DET\
    \ error code.  (See\n         Appendix 2 for DET error codes.)\n         Errors\
    \ should be reported when detected.  However, the\n         implementation should\
    \ attempt to carry out the intent of\n         the subcommand or data in error.\n\
    \      IAC SB DET START-OUT-OF-CONTEXT-DATA IAC SE\n         subcommand code:\
    \ 42\n         This subcommand precedes out-of-context data.  The data\n     \
    \    following this subcommand and prior to the\n         END-OUT-OF-CONTEXT-DATA\
    \ subcommand is NOT part of the current\n         form.  The out-out-of-context\
    \ data should be interpreted as\n         NVT mode data (i.e., it may contain\
    \ carriage return and line\n         feed characters) and should be displayed\
    \ in a timely and\n         non-destructive fashion.\n      IAC SB DET END-OUT-OF-CONTEXT-DATA\
    \ IAC SE\n         subcommand code: 43\n         This subcommand indicates the\
    \ end of the out-of-context data.\n      IAC SB DET ENABLE-FUNCTION-KEYS <key-map>IAC\
    \ SE\n         subcommand code: 44\n         This subcommand enables (or disables)\
    \ virtual function keys and\n         indicates the application's data requirements\
    \ on function key\n         selection.  The <key-map> parameter is a variable\
    \ length byte\n         string.  Each byte contains four bit-pairs and each bit-pair\n\
    \         represents a single function key.  The first byte represents\n     \
    \    function keys zero (0) through three (3); the second byte,\n         function\
    \ keys four (4) through seven (7); and so on.  Bit-pair\n         values and there\
    \ meanings are as follows:\n             0  The virtual function key is disabled\
    \ (i.e., locked).\n             1  The virtual function key is enabled.  Only\
    \ the FUNCTION-\n                KEY subcommand is returned on function key selection.\n\
    \             2  The  virtual  function  key  is  enabled.  All requested\n  \
    \              screen data and/or cursor position, as well as, the\n         \
    \       FUNCTION-KEY subcommand are returned on function key\n               \
    \ selection.\n             3  Undefined.\n         Function keys not explicitly\
    \ represented in the bitmap are\n         disabled (i.e., they are assumed to\
    \ have a bit-pair value of\n         zero (0)).\n         Use of this subcommand\
    \ requires facility negotiation; see the\n         FORMAT-FACILITIES subcommand;\
    \ Function-Key bit.\n      IAC SB DET SELECTED-FIELD <x><y> IAC SE\n         subcommand\
    \ code: 45\n         This subcommand identifies a user selected field.  The <x>\
    \ and\n         <y> parameters are the cursor position of the character\n    \
    \     selected from within a selectable field (see the FORMAT-DATA\n         subcommand,\
    \ Selectable attribute.)  Use of this subcommand\n         requires negotiation;\
    \ see the FORMAT-FACILITIES subcommand,\n         Field-Selection bit.\n"
- title: 3. Default and Minimal Implementation
  contents:
  - "3. Default and Minimal Implementation\n      Default.\n         WONT DET -- DONT\
    \ DET\n         If the DET option cannot be negotiated, the connection is\n  \
    \       not operated in DET mode.\n      Minimal DET Implementation.\n       \
    \  The minimal DET implementation consists of all DET subcommands\n         that\
    \ may be used without prior negotiation.  These subcommands\n         are as follows:\n\
    \             EDIT-FACILITIES\n             ERASE-FACILITIES\n             TRANSMIT-FACILITIES\n\
    \             FORMAT-FACILITIES\n             MOVE-CURSOR\n             HOME-CURSOR\n\
    \             ERASE-SCREEN\n             TRANSMIT-SCREEN\n             FORMAT-DATA\n\
    \             ERROR\n             START-OUT-OF-CONTEXT-DATA\n             END-OUT-OF-CONTEXT-DATA\n\
    \      DODIIS DET implementation requirements.\n         The minimal DET implementation\
    \ set of subcommands is not broad\n         enough to support forms interactions\
    \ between DODIIS terminals\n         and DODIIS applications.  Therefore, DODIIS\
    \ implementations of\n         the DET option must support additional DET subcommands.\n\
    \         DODIIS terminal (User Host) implementations must implement and\n   \
    \      support all of the DET subcommands contained in Section 2, as\n       \
    \  well as those DET attributes supported by the terminal hardware\n         and\
    \ any DET attributes easily emulated in software.  DODIIS\n         application\
    \ (Server Host) implementations must implement and\n         support those DET\
    \ subcommands and attributes required by its\n         applications.\n       \
    \  DODIIS implementation recommendations are contained in the\n         table\
    \ that follows.  DODIIS implementors are cautioned that\n         failure to provide\
    \ recommended support may limit\n         interoperability.\n         Recommended\
    \ DET support levels for DODIIS implementations\n                            \
    \          USER HOST           SERVER HOST\n      DET SUBCOMMANDS            \
    \     SUPPORT LEVEL       SUPPORT LEVEL\n      ---------------               \
    \  -------------       -------------\n      EDIT-FACILITIES                 send\
    \ & receive      send & receive\n      ERASE-FACILITIES                send &\
    \ receive      send & receive\n      TRANSMIT-FACILITIES             send & receive\
    \      send & receive\n      FORMAT-FACILITIES               send & receive  \
    \    send & receive\n      REPEAT                          send & receive    \
    \  send & receive\n      ERROR                           send & receive      send\
    \ & receive\n      MOVE-CURSOR                     receive only        send only\n\
    \      HOME-CURSOR                     receive only        send only\n      READ-CURSOR\
    \                     receive only        send only\n      TRANSMIT-SCREEN   \
    \              receive only        send only\n      TRANSMIT-UNPROTECTED     \
    \       receive only        send only\n      TRANSMIT-MODIFIED               receive\
    \ only        send only\n      ERASE-SCREEN                    receive only  \
    \      send only\n      ERASE-UNPROTECTED               receive only        send\
    \ only\n      FORMAT-DATA                     receive only        send only\n\
    \      START-OUT-OF-CONTEXT-DATA       receive only        send only\n      END-OUT-OF-CONTEXT-DATA\
    \         receive only        send only\n      ENABLE-FUNCTION-KEYS          \
    \  receive only        send only\n      CURSOR-POSITION                 send only\
    \           receive only\n      DATA-TRANSMIT                   send only    \
    \       receive only\n      FIELD-SEPARATOR                 send only        \
    \   receive only\n      FUNCTION-KEY                    send only           receive\
    \ only\n      SELECTED-FIELD                  send only           receive only\n\
    \      DET ATTRIBUTES\n      --------------\n      Blinking                  \
    \      (1)                 (2)\n      Reverse video                   (1)    \
    \             (2)\n      Right justification             (1)                 (2)\n\
    \      Protection                      required            (2)\n      Alphabetic-only\
    \ protection      (1)                 (2)\n      Numeric-only protection     \
    \    (1)                 (2)\n      Intensity level > 1             (1)      \
    \           (2)\n      OTHER\n      -----\n      Page size (lines)           \
    \    24-48\n      Line size (characters)          80\n      Function keys (number)\
    \          64\n         (1)   Implement if supported by terminal hardware.\n \
    \        (2)   Implement if required by the application.\n"
- title: 4.  Motivation for the option
  contents:
  - "4.  Motivation for the option\n   In 1981, the TELNET DET option (RFC 732) was\
    \ selected as the protocol\n   to support interactions between DODIIS forms applications\
    \ and DODIIS\n   forms terminals.  The intent was to foster a high degree of\n\
    \   interoperability between DODIIS hosts with forms applications and\n   terminals.\
    \  Since that time, the DET option has been and is being\n   implemented by several\
    \ independent organizations within the DODIIS\n   community.\n   Motivated by\
    \ concern that the independently developed implementations\n   of the DET option\
    \ may not interoperate with one another, DODIIS\n   implementors met to identify\
    \ DODIIS implementation requirements and\n   to resolve implementation issues\
    \ that affect interoperability.\n   This document attempts to present the agreements\
    \ and recommendations\n   of the DODIIS implementors.\n"
- title: 5.  Description and Implementation Rules
  contents:
  - "5.  Description and Implementation Rules\n   The DODIIS DET model.\n   The conceptual\
    \ model of the DODIIS DET is that of a half-duplex,\n   forms oriented device\
    \ with the following:\n      a.  A rectangular screen for displaying protected\
    \ and unprotected\n         data (a form) and optional capability to support blinking,\n\
    \         reverse video, and up to seven display intensity levels.\n      b. \
    \ A keyboard and onboard mechanisms for editing unprotected\n         fields of\
    \ a form and returning the modified fields.\n      c.  Function keys that may\
    \ be enabled and disabled on a key-by-key\n         basis by the application.\n\
    \      d.  A field selection device, similar to a light pen, that permits\n  \
    \       user selection of characters within appropriately identified\n       \
    \  \"selectable\" fields.\n   The DODIIS DET screen has default sizes of 80 characters\
    \ and 24\n   lines.  These defaults may be changed through negotiation using the\n\
    \   Output Line Width and the Output Page Size options.  When the parties\n  \
    \ cannot agree on screen size through negotiation, the default values\n   will\
    \ be used.  By agreement, DODIIS terminal (User Host)\n   implementations of DET\
    \ will support page sizes of 24 to 48 lines.\n   The next writing position (x,y)\
    \ on the DET screen is indicated by a\n   special display character called the\
    \ cursor, where x is the position\n   of a character on a line and y is the line\
    \ position on the DET\n   screen.  Values of x range from 0 (the left most character\
    \ position\n   on the line) to M-1, where M is the line length.  Values of y range\n\
    \   from 0 (the top most line on the screen) to N-1, where N is the page\n   length.\
    \  The cursor may be moved to any position on the DET screen\n   without disturbing\
    \ the characters already displayed.\n   Valid field data for DET forms are the\
    \ displayable ASCII character\n   codes in the range 32 through 126 decimal and\
    \ character 7 \"BELL\".\n   Negotiating the DET option\n      The DET option is\
    \ negotiated when either party REQUESTS use of the\n      DET option and the other\
    \ party AGREES to its use.  The DET option\n      is requested by sending a DO\
    \ DET and WILL DET and is accepted by\n      sending a WILL DET and DO DET.  (In\
    \ the spirit of TELNET\n      negotiation, the DET option must be negotiated for\
    \ both directions\n      on the connection.)\n      Several TELNET options conflict\
    \ with the DET option.  Therefore,\n      when the DET option is negotiated, the\
    \ following TELNET options\n      should be refused (or explicitly terminated):\
    \  Echo, Suppress Go-\n      Ahead, and Binary.  (The Suppress Go-Ahead is the\
    \ default state of\n      DODIIS TELNET connections when they are first established.)\n\
    \   DET facilities negotiation\n      All implementations of the DET option are\
    \ required to support the\n      minimal DET implementation described in Section\
    \ 3.  In addition,\n      DODIIS implementations are required to support subcommands\
    \ and\n      attributes that are consistent with DODIIS implementation\n     \
    \ requirements.  Before any of these additional DET facilities may\n      be used,\
    \ an implementation must negotiate with its correspondent\n      for permission\
    \ to use them.\n      The four facility subcommands (EDIT-FACILITIES, ERASE-FACILITIES,\n\
    \      TRANSMIT-FACILITIES, and FORMAT-FACILITIES) are used to negotiate\n   \
    \   DET subcommands and attributes.  This negotiation consists of an\n      exchange\
    \ of facility subcommands and may be viewed as the terminal\n      (User Host)\
    \ indicating the facilities it provides and the\n      application program (Server\
    \ Host) indicating the facilities it\n      desires.  The facilities that are\
    \ jointly supported (and may be\n      used) are arrived at by forming the logical\
    \ intersection of the\n      facility map that was sent with the facility map\
    \ that was\n      received.  (For the intensity attribute, the lesser of the number\n\
    \      of intensity levels sent and the number of intensity levels\n      received\
    \ will be used.)  An implementation must record the\n      currently agreed upon\
    \ set of subcommands and attributes.  Only\n      subcommands and attributes reflected\
    \ in that set may be used\n      without further exchange of facility subcommands.\n\
    \      Either party or both parties may initiate facilities negotiation\n    \
    \  without confusion as long as care is taken to avoid non-\n      terminating\
    \ negotiation loops.  In particular, if you initiate\n      negotiation by sending\
    \ a facility subcommand, you must remember\n      that you did initiate the negotiation.\
    \  On receipt of a facility\n      subcommand; if you initiated the negotiation,\
    \ no response is\n      required and the negotiation is complete; if you did not\
    \ initiate\n      the negotiation, you must respond by sending the appropriate\n\
    \      facility subcommand to the requester.  (Note that there is no\n      requirement\
    \ to negotiate facilities one class at a time and that\n      the awareness of\
    \ who initiated the negotiation must be maintained\n      for each of the facility\
    \ subcommands.)\n      A TELNET implementation responding to a facility subcommand\
    \ is not\n      required to compute the logical intersection of the maps before\n\
    \      responding.  It should respond as quickly as possible with a\n      facility\
    \ map indicating all facilities of that class that it\n      supports.  There\
    \ is no confusion since both parties compute the\n      set of supported subcommands\
    \ and attributes in the same fashion.\n      Note that while both parties must\
    \ agree to the use of the optional\n      subcommands and attributes, either party\
    \ may disable use at any\n      time by merely sending the appropriate facility\
    \ subcommand.\n      Further, there are no restrictions on when facilities may\
    \ be sent.\n                                   CAUTION:\n                 All\
    \ facilities maps contain reserved bits.\n                 These reserved bits\
    \ must be zeroed when\n                 facility maps are sent to indicate non\n\
    \                 support and/or ignorance of the associated\n               \
    \  facility.  The reserved bits may be defined\n                 in the future.\n\
    \   General DET Interaction\n      In the general interaction, the application\
    \ implementation\n      constructs a form, negotiates the desired options, indicates\
    \ the\n      required responses, and sends the TELNET GO-AHEAD.  The GO-AHEAD\n\
    \      signals that the form construction is complete and that the DET\n     \
    \ keyboard may be unlocked to permit a user response.\n      The user normally\
    \ responds by editing the unprotected areas of the\n      form and signaling \"\
    form-complete\", entering a function key,\n      electing a field, or performing\
    \ a combination of the preceding.\n      In each case, the terminal implementation\
    \ sends the DET\n      subcommands indicating the user's response and returns\
    \ the GO-\n      AHEAD.  The GO-AHEAD signals the end of the user response.\n\
    \      The form, as edited by the user, remains on the virtual screen so\n   \
    \   the application may continue the interaction by altering the form.\n   Form\
    \ construction\n      The application implementation constructs a form on an erased\n\
    \      screen by defining each of the fields in the form.  The DET fields\n  \
    \    are defined by their starting cursor position, size, attributes,\n      and\
    \ contents (data).\n      A field's starting cursor position is the cursor position\
    \ of the\n      first character in the field.  The cursor may be positioned\n\
    \      explicitly by the MOVE-CURSOR subcommand or it may be positioned\n    \
    \  implicitly by field data or other DET subcommands (e.g.,\n      ERASESCREEN\
    \ and ERASE-UNPROTECTED).\n      Field size, attributes, and contents may be defined\
    \ using the\n      FORMAT-DATA subcommand followed by field data.  Alternatively,\
    \ a\n      field with default attributes may be defined using only the field\n\
    \      data.  In this case, field size is the data string length.  The\n     \
    \ data string is terminated by the GO-AHEAD or any DET subcommand,\n      except\
    \ the REPEAT subcommand.\n      There are no restrictions on attribute combinations\
    \ that might be\n      applied to a field even though some combinations may not\
    \ be\n      supported by terminal hardware.  The terminal implementation\n   \
    \   should display the field with a \"reasonable\" combination of\n      attributes.\
    \  There is an error code that might be returned when an\n      \"unsupported\
    \ combination of format attributes\" is detected.  It is\n      not clear what\
    \ the application should do about the error.  In any\n      event, this condition\
    \ should not provoke session termination.\n      Field contents (data) are restricted\
    \ to printable ASCII characters\n      and \"BELL\" (codes 32 through 126 and\
    \ 7 decimal).  It is the\n      responsibility of the application implementation\
    \ to properly\n      translate carriage returns, line feeds, tabs, etc.  to the\n\
    \      appropriate DET subcommands.\n      The maximum number of fields a screen\
    \ might contain is the screen\n      size in characters (the product of characters\
    \ per line and lines\n      per screen).\n      Fields may not overlap.  That\
    \ is, a new field may not start or end\n      within a previously defined field.\
    \  However, overwriting of a\n      field to change its attributes or contents\
    \ is permitted.\n      There are no restrictions on the order in which a form\
    \ is built\n      (e.g., left-to-right and top-to-bottom); the terminal\n    \
    \  implementation must be prepared to handle any order.  Terminal\n      implementations\
    \ are encouraged to display data as it arrives to\n      accommodate applications\
    \ that persist in displaying status updates\n      on the task(s) they are performing.\n\
    \      If an application elects to modify a user edited form, it must\n      properly\
    \ position the cursor making no assumptions about where the\n      user might\
    \ have left the cursor.  Further it must exactly\n      overwrite the existing\
    \ fields.\n      When form construction is complete, the application indicates\
    \ its\n      response requirements by sending the appropriate transmit\n     \
    \ subcommand.  It may send TRANSMIT-SCREEN, TRANSMIT-UNPROTECTED, or\n      TRANSMIT-MODIFIED\
    \ to request data and/or it may send READ-CURSOR\n      to request cursor position.\
    \  TRANSMIT-MODIFIED should be used\n      whenever possible to minimize the volume\
    \ of data transmitted\n      between user and server hosts.\n   Form response\n\
    \      A form response is generated by the terminal implementation when\n    \
    \  the user signals \"form-complete\" or enters an enabled function\n      key.\
    \  The data returned are determined by the application through\n      the transmit\
    \ subcommands.  If no transmit subcommand was sent the\n      Modified and Protection\
    \ attributes are used to determine an\n      implied transmit subcommand.  If\
    \ the Modified attribute has been\n      negotiated, assume TRANSMIT-MODIFIED.\
    \  If the Protection attribute\n      has been negotiated but the Modified has\
    \ not, assume\n      TRANSMITUNPROTECTED.  If neither has been negotiated, assume\n\
    \      TRANSMITSCREEN.  (The intent is to achieve transmission efficiency\n  \
    \    by returning the smallest amount of data permitted by the in-force\n    \
    \  DET attributes.)\n                                   CAUTION:\n           \
    \   With TRANSMIT-MODIFIED the terminal implementation\n              must return\
    \ all fields marked with the Modified\n              attribute in addition to\
    \ fields actually modified by\n              the terminal user.\n      Returned\
    \ fields are identified and delimited using the\n      DATATRANSMIT and/or FIELD-SEPARATOR\
    \ subcommands.  The DATA-\n      TRANSMIT subcommand indicates the cursor address\
    \ of the field that\n      follows it and there are no restrictions on the order\
    \ in which\n      fields are returned.  The FIELD-SEPARATOR subcommand conveys\n\
    \      left-to-right and top-to-bottom field ordering.  Data not preceded\n  \
    \    by one of these subcommands is assumed to be the first unprotected\n    \
    \  field in the form.  A FIELD-SEPARATOR followed by FIELD-SEPARATOR\n      indicates\
    \ a field was unchanged and not returned.\n      Unless otherwise restricted by\
    \ Numeric-only or Alphabetic-only\n      attributes, data entered into unprotected\
    \ fields is restricted to\n      the printable ASCII characters and \"BELL\" (codes\
    \ 32 through 126\n      and 7 decimal); no other characters are permitted.\n \
    \  Function keys\n      By general agreement, DODIIS terminal implementations\
    \ will support\n      64 function keys (key values 0 through 63).  Information\
    \ on\n      mapping function keys to application functions is the\n      responsibility\
    \ of the application and should be provided to the\n      terminal user in the\
    \ form of user documentation.\n      The application enables and disables the\
    \ function keys and\n      indicates its form response requirements by sending\
    \ the\n      ENABLEFUNCTION-KEY subcommand.  The terminal implementation\n   \
    \   validates function key selections based on information received in\n     \
    \ the ENABLE-FUNCTION-KEY bitmap.  When an enabled function key is\n      entered,\
    \ the terminal returns a form response (if indicated in the\n      bitmap), a\
    \ FUNCTION-KEY subcommand, and the GO-AHEAD.\n      Virtual function keys are\
    \ part of the DET's virtual keyboard and\n      are \"locked\" when the application\
    \ has the GO-AHEAD.  Since the\n      terminal sends the GO-AHEAD when a function\
    \ key is entered,\n      entering a function key \"re-locks\" all function keys\
    \ until the\n      GO-AHEAD is returned.\n   Field selection\n      Any character\
    \ within a field having the Selectable attribute is a\n      candidate for selection.\
    \  When selection is made, the terminal\n      returns a SELECTED-FIELD subcommand\
    \ identifying the character\n      position selected.  Multiple selections are\
    \ permitted; however,\n      the ordering of the selections need not be preserved.\
    \  Field\n      selection does not cause the GO-AHEAD to be sent.  The GO-AHEAD\n\
    \      must be sent as a result of another user action such as a function\n  \
    \    key entry or \"form-complete\" indication.  Field selection is\n      disabled\
    \ when the application has the GO-AHEAD.\n   Out-of-context data\n      The out-of-context-data\
    \ subcommands identify data that is clearly\n      not in the context of the form\
    \ interaction.  It is a convenient\n      not in the mechanism for sending ARE-YOU-THERE\
    \ responses or host\n      advisory messages to the user without disturbing the\
    \ DET's virtual\n      screen or altering the context of the form interaction.\n\
    \      The application may send out-of-context data at anytime.  The data\n  \
    \    must be preceded by the START-OUT-OF-CONTEXT-DATA subcommand and\n      followed\
    \ immediately by the END-OUT-OF-CONTEXT-DATA subcommand.\n      The out-of-context\
    \ data should contain carriage returns and line\n      feeds to facilitate formatting.\
    \  The sender should limit the\n      amount of data sent, since most terminal\
    \ implementations must\n      buffer the data prior to displaying it.  The terminal\n\
    \      implementation should display the data to the user in a timely\n      fashion.\
    \  The data is for display only, no user response is\n      required, and there\
    \ is no mechanism for user response.\n   Line Discipline\n      The subject of\
    \ DET and line discipline (controlling the connection\n      using the GO-AHEAD)\
    \ causes a bit of confusion.  The following\n      rules apply to GO-AHEAD and\
    \ the DET option:\n         When DET is negotiated, the application assumes the\
    \ GO-AHEAD.\n         GO-AHEAD is never passed implicitly; it is always passed\n\
    \         explicitly.\n         When the application has the GO-AHEAD, the terminal\n\
    \         implementation may send TELNET commands (INTERRUPT-PROCESS,\n      \
    \   ABORT-OUTPUT, BREAK, and ARE-YOU-THERE).  Nothing else is\n         valid.\n\
    \         When the terminal has the GO-AHEAD, the application may send\n     \
    \    out-of-context data or MOVE-CURSOR and FORMAT-DATA subcommands\n        \
    \ to update protected fields.  Nothing else is valid.  (The\n         terminal\
    \ implementation must display the out-of-context data\n         and the field\
    \ updates as soon as convenient.)\n         The terminal implementation sends\
    \ the GO-AHEAD, without further\n         action on the part of the terminal user,\
    \ when an enabled\n         function key or a \"form-complete\" is entered.\n\
    \      Since the terminal user must take explicit action to return the\n     \
    \ GO-AHEAD to the application, instances will occur when the user\n      has the\
    \ GO-AHEAD but the application needs it to display a new\n      form.  (This is\
    \ most likely to occur when the user enters an\n      INTERRUPT PROCESS.)  When\
    \ it does occur, the application should\n      send an out-of-context-context\
    \ message requesting the user to\n      enter a \"form-complete\".  If the user\
    \ cooperates, the application\n      can ignore any associated form response and\
    \ regain control of the\n      connection to display its form.\n      The line\
    \ discipline described here is more rigorous than that\n      described for NVT\
    \ in MIL-STD-1782.  These rules apply only when\n      operating in DET mode.\
    \  At other times, the descriptions contained\n      in MIL-STD-1782 apply.  This\
    \ distinction is necessary to ensure\n      interoperability with non-DET implementations\
    \ of TELNET.\n   Standard TELNET control functions\n      The TELNET control functions,\
    \ ERASE CHARACTER and ERASE LINE, are\n      NOT required and should not be sent\
    \ in DET mode.\n   Other implementation notes\n      a. The DODIIS DET conceptual\
    \ model does not support character\n         editors or basic scrolling applications.\n\
    \      b. Implementors are cautioned that DET subcommand parameters\n        \
    \ (e.g., facilities maps) may take on the value of the IAC\n         character\
    \ and must be replicated if they are to be properly\n         interpreted.\n \
    \     c. Principle of Robustness:  \"Be conservative in what you send; be\n  \
    \       liberal in what you accept from others.\"\n"
- title: APPENDIX 1 - DET OPCODES AND SUBCOMMAND SYNTAX.
  contents:
  - "APPENDIX 1 - DET OPCODES AND SUBCOMMAND SYNTAX.\n             OPCODE    SUBCOMMAND\
    \ SYNTAX\n             ------    -----------------\n              1     EDIT-FACILITIES\
    \ <facility map>\n              2     ERASE-FACILITIES <facility map>\n      \
    \        3     TRANSMIT-FACILITIES <facility map>\n              4     FORMAT-FACILITIES\
    \ <facility map 1><facility map 2>\n              5     MOVE-CURSOR <x><y>\n \
    \            12     HOME-CURSOR\n             17     READ-CURSOR\n           \
    \  18     CURSOR-POSITION <x><y>\n             20     TRANSMIT-SCREEN\n      \
    \       21     TRANSMIT-UNPROTECTED\n             27     TRANSMIT-MODIFIED\n \
    \            28     DATA-TRANSMIT <x><y>\n             29     ERASE-SCREEN\n \
    \            35     ERASE-UNPROTECTED\n             36     FORMAT-DATA <format\
    \ map><count>\n             37     REPEAT <count><character>\n             39\
    \     FIELD-SEPARATOR\n             40     FUNCTION-KEY <code>\n             41\
    \     ERROR <cmd><error code>\n             42     START-OUT-OF-CONTEXT-DATA\n\
    \             43     END-OUT-OF-CONTEXT-DATA\n             44     ENABLE-FUNCTION-KEYS\
    \ <key-map>\n             45     SELECTED-FIELD <x><y>\n"
- title: APPENDIX 2 - DET ERROR CODES
  contents:
  - "APPENDIX 2 - DET ERROR CODES\n              1        Facility not previously\
    \ negotiated.\n              2        Illegal subcommand code.\n             \
    \ 3        Cursor Address Out of Bounds.\n              4        Undefined FUNCTION-KEY\
    \ value.\n              5        Can't negotiate acceptable line width.\n    \
    \          6        Can't negotiate acceptable page length.\n              7 \
    \       Illegal parameter in subcommand.\n              8        Syntax error\
    \ in parsing subcommand.\n              9        Too many parameters in subcommand.\n\
    \             10        Too few parameters in subcommand.\n             11   \
    \     Undefined parameter value.\n             12        Unsupported combination\
    \ of Format Attributes.\n             13        Invalid field - overlap detected.\n"
