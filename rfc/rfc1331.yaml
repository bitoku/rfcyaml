- title: __initial_text__
  contents:
  - "                   The Point-to-Point Protocol (PPP)\n                Transmission\
    \ of Multi-protocol Datagrams\n                       over Point-to-Point Links\n"
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This RFC specifies an IAB standards track protocol for\
    \ the Internet\n   community, and requests discussion and suggestions for improvements.\n\
    \   Please refer to the current edition of the \"IAB Official Protocol\n   Standards\"\
    \ for the standardization state and status of this protocol.\n   Distribution\
    \ of this memo is unlimited.\n"
- title: Abstract
  contents:
  - "Abstract\n   The Point-to-Point Protocol (PPP) provides a method for transmitting\n\
    \   datagrams over serial point-to-point links.  PPP is comprised of\n   three\
    \ main components:\n      1. A method for encapsulating datagrams over serial\
    \ links.\n      2. A Link Control Protocol (LCP) for establishing, configuring,\n\
    \         and testing the data-link connection.\n      3. A family of Network\
    \ Control Protocols (NCPs) for establishing\n         and configuring different\
    \ network-layer protocols.\n   This document defines the PPP encapsulation scheme,\
    \ together with the\n   PPP Link Control Protocol (LCP), an extensible option\
    \ negotiation\n   protocol which is able to negotiate a rich assortment of\n \
    \  configuration parameters and provides additional management\n   functions.\n\
    \   This RFC is a product of the Point-to-Point Protocol Working Group of\n  \
    \ the Internet Engineering Task Force (IETF).  Comments on this memo\n   should\
    \ be submitted to the ietf-ppp@ucdavis.edu mailing list.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n     1.     Introduction ..........................................\
    \    1\n        1.1       Specification of Requirements ...................  \
    \  3\n        1.2       Terminology .....................................    3\n\
    \     2.     Physical Layer Requirements ...........................    4\n  \
    \   3.     The Data Link Layer ...................................    5\n    \
    \    3.1       Frame Format ....................................    6\n     4.\
    \     PPP Link Operation ....................................   10\n        4.1\
    \       Overview ........................................   10\n        4.2  \
    \     Phase Diagram ...................................   10\n        4.3    \
    \   Link Dead (physical-layer not ready) ............   10\n        4.4      \
    \ Link Establishment Phase ........................   11\n        4.5       Authentication\
    \ Phase ............................   11\n        4.6       Network-Layer Protocol\
    \ Phase ....................   12\n        4.7       Link Termination Phase ..........................\
    \   12\n     5.     The Option Negotiation Automaton ......................  \
    \ 14\n        5.1       State Diagram ...................................   15\n\
    \        5.2       State Transition Table ..........................   16\n  \
    \      5.3       States ..........................................   18\n    \
    \    5.4       Events ..........................................   20\n      \
    \  5.5       Actions .........................................   24\n        5.6\
    \       Loop Avoidance ..................................   26\n        5.7  \
    \     Counters and Timers .............................   27\n     6.     LCP\
    \ Packet Formats ....................................   28\n        6.1      \
    \ Configure-Request ...............................   30\n        6.2       Configure-Ack\
    \ ...................................   31\n        6.3       Configure-Nak ...................................\
    \   32\n        6.4       Configure-Reject ................................  \
    \ 33\n        6.5       Terminate-Request and Terminate-Ack .............   35\n\
    \        6.6       Code-Reject .....................................   36\n  \
    \      6.7       Protocol-Reject .................................   38\n    \
    \    6.8       Echo-Request and Echo-Reply .....................   39\n      \
    \  6.9       Discard-Request .................................   40\n     7. \
    \    LCP Configuration Options .............................   42\n        7.1\
    \       Format ..........................................   43\n        7.2  \
    \     Maximum-Receive-Unit ............................   44\n        7.3    \
    \   Async-Control-Character-Map .....................   45\n        7.4      \
    \ Authentication-Protocol .........................   47\n        7.5       Quality-Protocol\
    \ ................................   49\n        7.6       Magic-Number ....................................\
    \   51\n        7.7       Protocol-Field-Compression ......................  \
    \ 54\n        7.8       Address-and-Control-Field-Compression ...........   56\n\
    \     APPENDICES ...................................................   58\n  \
    \   A.     Asynchronous HDLC .....................................   58\n    \
    \ B.     Fast Frame Check Sequence (FCS) Implementation ........   61\n      \
    \  B.1       FCS Computation Method ..........................   61\n        B.2\
    \       Fast FCS table generator ........................   63\n     C.     LCP\
    \ Recommended Options ...............................   64\n     SECURITY CONSIDERATIONS\
    \ ......................................   65\n     REFERENCES ...................................................\
    \   65\n     ACKNOWLEDGEMENTS .............................................  \
    \ 66\n     CHAIR'S ADDRESS ..............................................   66\n\
    \     AUTHOR'S ADDRESS .............................................   66\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   Motivation\n      In the last few years, the Internet has\
    \ seen explosive growth in\n      the number of hosts supporting TCP/IP.  The\
    \ vast majority of these\n      hosts are connected to Local Area Networks (LANs)\
    \ of various\n      types, Ethernet being the most common.  Most of the other\
    \ hosts\n      are connected through Wide Area Networks (WANs) such as X.25 style\n\
    \      Public Data Networks (PDNs).  Relatively few of these hosts are\n     \
    \ connected with simple point-to-point (i.e., serial) links.  Yet,\n      point-to-point\
    \ links are among the oldest methods of data\n      communications and almost\
    \ every host supports point-to-point\n      connections.  For example, asynchronous\
    \ RS-232-C [1] interfaces\n      are essentially ubiquitous.\n   Encapsulation\n\
    \      One reason for the small number of point-to-point IP links is the\n   \
    \   lack of a standard encapsulation protocol.  There are plenty of\n      non-standard\
    \ (and at least one de facto standard) encapsulation\n      protocols available,\
    \ but there is not one which has been agreed\n      upon as an Internet Standard.\
    \  By contrast, standard encapsulation\n      schemes do exist for the transmission\
    \ of datagrams over most\n      popular LANs.\n      PPP provides an encapsulation\
    \ protocol over both bit-oriented\n      synchronous links and asynchronous links\
    \ with 8 bits of data and\n      no parity.  These links MUST be full-duplex,\
    \ but MAY be either\n      dedicated or circuit-switched.  PPP uses HDLC as a\
    \ basis for the\n      encapsulation.\n      PPP has been carefully designed to\
    \ retain compatibility with most\n      commonly used supporting hardware.  In\
    \ addition, an escape\n      mechanism is specified to allow control data such\
    \ as XON/XOFF to\n      be transmitted transparently over the link, and to remove\
    \ spurious\n      control data which may be injected into the link by intervening\n\
    \      hardware and software.\n      The PPP encapsulation also provides for multiplexing\
    \ of different\n      network-layer protocols simultaneously over the same link.\
    \  It is\n      intended that PPP provide a common solution for easy connection\
    \ of\n      a wide variety of hosts, bridges and routers.\n      Some protocols\
    \ expect error free transmission, and either provide\n      error detection only\
    \ on a conditional basis, or do not provide it\n      at all.  PPP uses the HDLC\
    \ Frame Check Sequence for error\n      detection.  This is commonly available\
    \ in hardware\n      implementations, and a software implementation is provided.\n\
    \      By default, only 8 additional octets are necessary to form the\n      encapsulation.\
    \  In environments where bandwidth is at a premium,\n      the encapsulation may\
    \ be shortened to as few as 2 octets.  To\n      support high speed hardware implementations,\
    \ PPP provides that the\n      default encapsulation header and information fields\
    \ fall on 32-bit\n      boundaries, and allows the trailer to be padded to an\
    \ arbitrary\n      boundary.\n   Link Control Protocol\n      More importantly,\
    \ the Point-to-Point Protocol defines more than\n      just an encapsulation scheme.\
    \  In order to be sufficiently\n      versatile to be portable to a wide variety\
    \ of environments, PPP\n      provides a Link Control Protocol (LCP).  The LCP\
    \ is used to\n      automatically agree upon the encapsulation format options,\
    \ handle\n      varying limits on sizes of packets, authenticate the identity\
    \ of\n      its peer on the link, determine when a link is functioning\n     \
    \ properly and when it is defunct, detect a looped-back link and\n      other\
    \ common misconfiguration errors, and terminate the link.\n   Network Control\
    \ Protocols\n      Point-to-Point links tend to exacerbate many problems with\
    \ the\n      current family of network protocols.  For instance, assignment and\n\
    \      management of IP addresses, which is a problem even in LAN\n      environments,\
    \ is especially difficult over circuit-switched\n      point-to-point links (such\
    \ as dial-up modem servers).  These\n      problems are handled by a family of\
    \ Network Control Protocols\n      (NCPs), which each manage the specific needs\
    \ required by their\n      respective network-layer protocols.  These NCPs are\
    \ defined in\n      other documents.\n   Configuration\n      It is intended that\
    \ PPP be easy to configure.  By design, the\n      standard defaults should handle\
    \ all common configurations.  The\n      implementor may specify improvements\
    \ to the default configuration,\n      which are automatically communicated to\
    \ the peer without operator\n      intervention.  Finally, the operator may explicitly\
    \ configure\n      options for the link which enable the link to operate in\n\
    \      environments where it would otherwise be impossible.\n      This self-configuration\
    \ is implemented through an extensible\n      option negotiation mechanism, wherein\
    \ each end of the link\n      describes to the other its capabilities and requirements.\n\
    \      Although the option negotiation mechanism described in this\n      document\
    \ is specified in terms of the Link Control Protocol (LCP),\n      the same facilities\
    \ may be used by the Internet Protocol Control\n      Protocol (IPCP) and others\
    \ in the family of NCPs.\n"
- title: 1.1.  Specification of Requirements
  contents:
  - "1.1.  Specification of Requirements\n   In this document, several words are used\
    \ to signify the requirements\n   of the specification.  These words are often\
    \ capitalized.\n   MUST\n      This word, or the adjective \"required\", means\
    \ that the definition\n      is an absolute requirement of the specification.\n\
    \   MUST NOT\n      This phrase means that the definition is an absolute prohibition\n\
    \      of the specification.\n   SHOULD\n      This word, or the adjective \"\
    recommended\", means that there may\n      exist valid reasons in particular circumstances\
    \ to ignore this\n      item, but the full implications should be understood and\
    \ carefully\n      weighed before choosing a different course.\n   MAY\n     \
    \ This word, or the adjective \"optional\", means that this item is\n      one\
    \ of an allowed set of alternatives.  An implementation which\n      does not\
    \ include this option MUST be prepared to interoperate with\n      another implementation\
    \ which does include the option.\n"
- title: 1.2.  Terminology
  contents:
  - "1.2.  Terminology\n   This document frequently uses the following terms:\n  \
    \ peer\n      The other end of the point-to-point link.\n   silently discard\n\
    \      This means the implementation discards the packet without further\n   \
    \   processing.  The implementation SHOULD provide the capability of\n      logging\
    \ the error, including the contents of the silently\n      discarded packet, and\
    \ SHOULD record the event in a statistics\n      counter.\n"
- title: 2.  Physical Layer Requirements
  contents:
  - "2.  Physical Layer Requirements\n   The Point-to-Point Protocol is capable of\
    \ operating across any\n   DTE/DCE interface (e.g., EIA RS-232-C, EIA RS-422,\
    \ EIA RS-423 and\n   CCITT V.35).  The only absolute requirement imposed by PPP\
    \ is the\n   provision of a full-duplex circuit, either dedicated or circuit-\n\
    \   switched, which can operate in either an asynchronous (start/stop) or\n  \
    \ synchronous bit-serial mode, transparent to PPP Data Link Layer\n   frames.\
    \  PPP does not impose any restrictions regarding transmission\n   rate, other\
    \ than those imposed by the particular DTE/DCE interface in\n   use.\n   PPP does\
    \ not require any particular synchronous encoding, such as FM,\n   NRZ, or NRZI.\n\
    \   Implementation Note:\n      NRZ is currently most widely available, and on\
    \ that basis is\n      recommended as a default.  When configuration of the encoding\
    \ is\n      allowed, NRZI is recommended as an alternative, because of its\n \
    \     relative immunity to signal inversion configuration errors.\n   PPP does\
    \ not require the use of modem control signals, such as\n   Request To Send (RTS),\
    \ Clear To Send (CTS), Data Carrier Detect\n   (DCD), and Data Terminal Ready\
    \ (DTR).\n   Implementation Note:\n      When available, using such signals can\
    \ allow greater functionality\n      and performance.  In particular, such signals\
    \ SHOULD be used to\n      signal the Up and Down events in the Option Negotiation\
    \ Automaton\n      (described below).\n"
- title: 3.  The Data Link Layer
  contents:
  - "3.  The Data Link Layer\n   The Point-to-Point Protocol uses the principles,\
    \ terminology, and\n   frame structure of the International Organization For\n\
    \   Standardization's (ISO) High-level Data Link Control (HDLC)\n   procedures\
    \ (ISO 3309-1979 [2]), as modified by ISO 3309:1984/PDAD1\n   \"Addendum 1: Start/stop\
    \ transmission\" [5].  ISO 3309-1979 specifies\n   the HDLC frame structure for\
    \ use in synchronous environments.  ISO\n   3309:1984/PDAD1 specifies proposed\
    \ modifications to ISO 3309-1979 to\n   allow its use in asynchronous environments.\n\
    \   The PPP control procedures use the definitions and Control field\n   encodings\
    \ standardized in ISO 4335-1979 [3] and ISO 4335-\n   1979/Addendum 1-1979 [4].\
    \  The PPP frame structure is also consistent\n   with CCITT Recommendation X.25\
    \ LAPB [6], since that too is based on\n   HDLC.\n   The purpose of this memo\
    \ is not to document what is already\n   standardized in ISO 3309.  We assume\
    \ that the reader is already\n   familiar with HDLC, or has access to a copy of\
    \ [2] or [6].  Instead,\n   this paper attempts to give a concise summary and\
    \ point out specific\n   options and features used by PPP.  Since \"Addendum 1:\
    \ Start/stop\n   transmission\", is not yet standardized and widely available,\
    \ it is\n   summarized in Appendix A.\n   To remain consistent with standard Internet\
    \ practice, and avoid\n   confusion for people used to reading RFCs, all binary\
    \ numbers in the\n   following descriptions are in Most Significant Bit to Least\n\
    \   Significant Bit order, reading from left to right, unless otherwise\n   indicated.\
    \  Note that this is contrary to standard ISO and CCITT\n   practice which orders\
    \ bits as transmitted (i.e., network bit order).\n   Keep this in mind when comparing\
    \ this document with the international\n   standards documents.\n"
- title: 3.1.  Frame Format
  contents:
  - "3.1.  Frame Format\n   A summary of the standard PPP frame structure is shown\
    \ below.  This\n   figure does not include start/stop bits (for asynchronous links),\
    \ nor\n   any bits or octets inserted for transparency.  The fields are\n   transmitted\
    \ from left to right.\n           +----------+----------+----------+----------+------------\n\
    \           |   Flag   | Address  | Control  | Protocol | Information\n      \
    \     | 01111110 | 11111111 | 00000011 | 16 bits  |      *\n           +----------+----------+----------+----------+------------\n\
    \                   ---+----------+----------+-----------------\n            \
    \          |   FCS    |   Flag   | Inter-frame Fill\n                      | 16\
    \ bits  | 01111110 | or next Address\n                   ---+----------+----------+-----------------\n\
    \   Inter-frame Time Fill\n   For asynchronous links, inter-frame time fill SHOULD\
    \ be accomplished\n   in the same manner as inter-octet time fill, by transmitting\n\
    \   continuous \"1\" bits (mark-hold state).\n   For synchronous links, the Flag\
    \ Sequence SHOULD be transmitted during\n   inter-frame time fill.  There is no\
    \ provision for inter-octet time\n   fill.\n   Implementation Note:\n      Mark\
    \ idle (continuous ones) SHOULD NOT be used for idle\n      synchronous inter-frame\
    \ time fill.  However, certain types of\n      circuit-switched links require\
    \ the use of mark idle, particularly\n      those that calculate accounting based\
    \ on bit activity.  When mark\n      idle is used on a synchronous link, the implementation\
    \ MUST ensure\n      at least 15 consecutive \"1\" bits between Flags, and that\
    \ the Flag\n      Sequence is generated at the beginning and end of a frame.\n"
- title: Flag Sequence
  contents:
  - "Flag Sequence\n   The Flag Sequence is a single octet and indicates the beginning\
    \ or\n   end of a frame.  The Flag Sequence consists of the binary sequence\n\
    \   01111110 (hexadecimal 0x7e).\n   The Flag is a frame separator.  Only one\
    \ Flag is required between two\n   frames.  Two consecutive Flags constitute an\
    \ empty frame, which is\n   ignored.\n   Implementation Note:\n      The \"shared\
    \ zero mode\" Flag Sequence \"011111101111110\" SHOULD NOT\n      be used.  When\
    \ not avoidable, such an implementation MUST ensure\n      that the first Flag\
    \ Sequence detected (the end of the frame) is\n      promptly communicated to\
    \ the link layer.\n"
- title: Address Field
  contents:
  - "Address Field\n   The Address field is a single octet and contains the binary\
    \ sequence\n   11111111 (hexadecimal 0xff), the All-Stations address.  PPP does\
    \ not\n   assign individual station addresses.  The All-Stations address MUST\n\
    \   always be recognized and received.  The use of other address lengths\n   and\
    \ values may be defined at a later time, or by prior agreement.\n   Frames with\
    \ unrecognized Addresses SHOULD be silently discarded, and\n   reported through\
    \ the normal network management facility.\n"
- title: Control Field
  contents:
  - "Control Field\n   The Control field is a single octet and contains the binary\
    \ sequence\n   00000011 (hexadecimal 0x03), the Unnumbered Information (UI) command\n\
    \   with the P/F bit set to zero.  Frames with other Control field values\n  \
    \ SHOULD be silently discarded.\n"
- title: Protocol Field
  contents:
  - "Protocol Field\n   The Protocol field is two octets and its value identifies\
    \ the\n   protocol encapsulated in the Information field of the frame.\n   This\
    \ Protocol field is defined by PPP and is not a field defined by\n   HDLC.  However,\
    \ the Protocol field is consistent with the ISO 3309\n   extension mechanism for\
    \ Address fields.  All Protocols MUST be odd;\n   the least significant bit of\
    \ the least significant octet MUST equal\n   \"1\".  Also, all Protocols MUST\
    \ be assigned such that the least\n   significant bit of the most significant\
    \ octet equals \"0\".  Frames\n   received which don't comply with these rules\
    \ MUST be considered as\n   having an unrecognized Protocol, and handled as specified\
    \ by the LCP.\n   The Protocol field is transmitted and received most significant\
    \ octet\n   first.\n   Protocol field values in the \"0---\" to \"3---\" range\
    \ identify the\n   network-layer protocol of specific datagrams, and values in\
    \ the \"8--\n   -\" to \"b---\" range identify datagrams belonging to the associated\n\
    \   Network Control Protocols (NCPs), if any.\n   Protocol field values in the\
    \ \"4---\" to \"7---\" range are used for\n   protocols with low volume traffic\
    \ which have no associated NCP.\n   Protocol field values in the \"c---\" to \"\
    f---\" range identify\n   datagrams as link-layer Control Protocols (such as LCP).\n\
    \   The most up-to-date values of the Protocol field are specified in the\n  \
    \ most recent \"Assigned Numbers\" RFC [11].  Current values are assigned\n  \
    \ as follows:\n      Value (in hex)  Protocol Name\n      0001 to 001f    reserved\
    \ (transparency inefficient)\n      0021            Internet Protocol\n      0023\
    \            OSI Network Layer\n      0025            Xerox NS IDP\n      0027\
    \            DECnet Phase IV\n      0029            Appletalk\n      002b    \
    \        Novell IPX\n      002d            Van Jacobson Compressed TCP/IP\n  \
    \    002f            Van Jacobson Uncompressed TCP/IP\n      0031            Bridging\
    \ PDU\n      0033            Stream Protocol (ST-II)\n      0035            Banyan\
    \ Vines\n      0037            reserved (until 1993)\n      00ff            reserved\
    \ (compression inefficient)\n      0201            802.1d Hello Packets\n    \
    \  0231            Luxcom\n      0233            Sigma Network Systems\n     \
    \ 8021            Internet Protocol Control Protocol\n      8023            OSI\
    \ Network Layer Control Protocol\n      8025            Xerox NS IDP Control Protocol\n\
    \      8027            DECnet Phase IV Control Protocol\n      8029          \
    \  Appletalk Control Protocol\n      802b            Novell IPX Control Protocol\n\
    \      802d            Reserved\n      802f            Reserved\n      8031  \
    \          Bridging NCP\n      8033            Stream Protocol Control Protocol\n\
    \      8035            Banyan Vines Control Protocol\n      c021            Link\
    \ Control Protocol\n      c023            Password Authentication Protocol\n \
    \     c025            Link Quality Report\n      c223            Challenge Handshake\
    \ Authentication Protocol\n   Developers of new protocols MUST obtain a number\
    \ from the Internet\n   Assigned Numbers Authority (IANA), at IANA@isi.edu.\n"
- title: Information Field
  contents:
  - "Information Field\n   The Information field is zero or more octets.  The Information\
    \ field\n   contains the datagram for the protocol specified in the Protocol\n\
    \   field.  The end of the Information field is found by locating the\n   closing\
    \ Flag Sequence and allowing two octets for the Frame Check\n   Sequence field.\
    \  The default maximum length of the Information field\n   is 1500 octets.  By\
    \ negotiation, consenting PPP implementations may\n   use other values for the\
    \ maximum Information field length.\n   On transmission, the Information field\
    \ may be padded with an\n   arbitrary number of octets up to the maximum length.\
    \  It is the\n   responsibility of each protocol to disambiguate padding octets\
    \ from\n   real information.\n"
- title: Frame Check Sequence (FCS) Field
  contents:
  - "Frame Check Sequence (FCS) Field\n   The Frame Check Sequence field is normally\
    \ 16 bits (two octets).  The\n   use of other FCS lengths may be defined at a\
    \ later time, or by prior\n   agreement.\n   The FCS field is calculated over\
    \ all bits of the Address, Control,\n   Protocol and Information fields not including\
    \ any start and stop bits\n   (asynchronous) and any bits (synchronous) or octets\
    \ (asynchronous)\n   inserted for transparency.  This does not include the Flag\
    \ Sequences\n   or the FCS field itself.  The FCS is transmitted with the coefficient\n\
    \   of the highest term first.\n      Note: When octets are received which are\
    \ flagged in the Async-\n      Control-Character-Map, they are discarded before\
    \ calculating the\n      FCS.  See the description in Appendix A.\n   For more\
    \ information on the specification of the FCS, see ISO 3309\n   [2] or CCITT X.25\
    \ [6].\n      Note: A fast, table-driven implementation of the 16-bit FCS\n  \
    \    algorithm is shown in Appendix B.  This implementation is based on\n    \
    \  [7], [8], and [9].\n"
- title: Modifications to the Basic Frame Format
  contents:
  - "Modifications to the Basic Frame Format\n   The Link Control Protocol can negotiate\
    \ modifications to the standard\n   PPP frame structure.  However, modified frames\
    \ will always be clearly\n   distinguishable from standard frames.\n"
- title: 4.  PPP Link Operation
  contents:
  - '4.  PPP Link Operation

    '
- title: 4.1.  Overview
  contents:
  - "4.1.  Overview\n   In order to establish communications over a point-to-point\
    \ link, each\n   end of the PPP link must first send LCP packets to configure\
    \ and test\n   the data link.  After the link has been established, the peer may\
    \ be\n   authenticated.  Then, PPP must send NCP packets to choose and\n   configure\
    \ one or more network-layer protocols.  Once each of the\n   chosen network-layer\
    \ protocols has been configured, datagrams from\n   each network-layer protocol\
    \ can be sent over the link.\n   The link will remain configured for communications\
    \ until explicit LCP\n   or NCP packets close the link down, or until some external\
    \ event\n   occurs (an inactivity timer expires or network administrator\n   intervention).\n"
- title: 4.2.  Phase Diagram
  contents:
  - "4.2.  Phase Diagram\n   In the process of configuring, maintaining and terminating\
    \ the\n   point-to-point link, the PPP link goes through several distinct\n  \
    \ phases:\n   +------+        +-----------+           +--------------+\n   | \
    \     | UP     |           | OPENED    |              | SUCCESS/NONE\n   | Dead\
    \ |------->| Establish |---------->| Authenticate |--+\n   |      |        | \
    \          |           |              |  |\n   +------+        +-----------+ \
    \          +--------------+  |\n      ^          FAIL |                   FAIL\
    \ |             |\n      +<--------------+             +----------+          \
    \   |\n      |                             |                        |\n      |\
    \            +-----------+    |           +---------+  |\n      |       DOWN |\
    \           |    |   CLOSING |         |  |\n      +------------| Terminate |<---+<----------|\
    \ Network |<-+\n                   |           |                |         |\n\
    \                   +-----------+                +---------+\n"
- title: 4.3.  Link Dead (physical-layer not ready)
  contents:
  - "4.3.  Link Dead (physical-layer not ready)\n   The link necessarily begins and\
    \ ends with this phase.  When an\n   external event (such as carrier detection\
    \ or network administrator\n   configuration) indicates that the physical-layer\
    \ is ready to be used,\n   PPP will proceed to the Link Establishment phase.\n\
    \   During this phase, the LCP automaton (described below) will be in the\n  \
    \ Initial or Starting states.  The transition to the Link Establishment\n   phase\
    \ will signal an Up event to the automaton.\n   Implementation Note:\n      Typically,\
    \ a link will return to this phase automatically after\n      the disconnection\
    \ of a modem.  In the case of a hard-wired line,\n      this phase may be extremely\
    \ short -- merely long enough to detect\n      the presence of the device.\n"
- title: 4.4.  Link Establishment Phase
  contents:
  - "4.4.  Link Establishment Phase\n   The Link Control Protocol (LCP) is used to\
    \ establish the connection\n   through an exchange of Configure packets.  This\
    \ exchange is complete,\n   and the LCP Opened state entered, once a Configure-Ack\
    \ packet\n   (described below) has been both sent and received.  Any non-LCP\n\
    \   packets received during this phase MUST be silently discarded.\n   All Configuration\
    \ Options are assumed to be at default values unless\n   altered by the configuration\
    \ exchange.  See the section on LCP\n   Configuration Options for further discussion.\n\
    \   It is important to note that only Configuration Options which are\n   independent\
    \ of particular network-layer protocols are configured by\n   LCP.  Configuration\
    \ of individual network-layer protocols is handled\n   by separate Network Control\
    \ Protocols (NCPs) during the Network-Layer\n   Protocol phase.\n"
- title: 4.5.  Authentication Phase
  contents:
  - "4.5.  Authentication Phase\n   On some links it may be desirable to require a\
    \ peer to authenticate\n   itself before allowing network-layer protocol packets\
    \ to be\n   exchanged.\n   By default, authentication is not necessary.  If an\
    \ implementation\n   requires that the peer authenticate with some specific authentication\n\
    \   protocol, then it MUST negotiate the use of that authentication\n   protocol\
    \ during Link Establishment phase.\n   Authentication SHOULD take place as soon\
    \ as possible after link\n   establishment.  However, link quality determination\
    \ MAY occur\n   concurrently.  An implementation MUST NOT allow the exchange of\
    \ link\n   quality determination packets to delay authentication indefinitely.\n\
    \   Advancement from the Authentication phase to the Network-Layer\n   Protocol\
    \ phase MUST NOT occur until the peer is successfully\n   authenticated using\
    \ the negotiated authentication protocol.  In the\n   event of failure to authenticate,\
    \ PPP SHOULD proceed instead to the\n   Link Termination phase.\n"
- title: 4.6.  Network-Layer Protocol Phase
  contents:
  - "4.6.  Network-Layer Protocol Phase\n   Once PPP has finished the previous phases,\
    \ each network-layer\n   protocol (such as IP) MUST be separately configured by\
    \ the\n   appropriate Network Control Protocol (NCP).\n   Each NCP may be Opened\
    \ and Closed at any time.\n   Implementation Note:\n      Because an implementation\
    \ may initially use a significant amount\n      of time for link quality determination,\
    \ implementations SHOULD\n      avoid fixed timeouts when waiting for their peers\
    \ to configure a\n      NCP.\n   After a NCP has reached the Opened state, PPP\
    \ will carry the\n   corresponding network-layer protocol packets.  Any network-layer\n\
    \   protocol packets received when the corresponding NCP is not in the\n   Opened\
    \ state SHOULD be silently discarded.\n   During this phase, link traffic consists\
    \ of any possible combinations\n   of LCP, NCP, and network-layer protocol packets.\
    \  Any NCP or\n   network-layer protocol packets received during any other phase\
    \ SHOULD\n   be silently discarded.\n   Implementation Note:\n      There is an\
    \ exception to the preceding paragraphs, due to the\n      availability of the\
    \ LCP Protocol-Reject (described below).  While\n      LCP is in the Opened state,\
    \ any protocol packet which is\n      unsupported by the implementation MUST be\
    \ returned in a Protocol-\n      Reject.  Only supported protocols are silently\
    \ discarded.\n"
- title: 4.7.  Link Termination Phase
  contents:
  - "4.7.  Link Termination Phase\n   PPP may terminate the link at any time.  This\
    \ will usually be done at\n   the request of a human user, but might happen because\
    \ of a physical\n   event such as the loss of carrier, authentication failure,\
    \ link\n   quality failure, or the expiration of an idle-period timer.\n   LCP\
    \ is used to close the link through an exchange of Terminate\n   packets.  When\
    \ the link is closing, PPP informs the network-layer\n   protocols so that they\
    \ may take appropriate action.\n   After the exchange of Terminate packets, the\
    \ implementation SHOULD\n   signal the physical-layer to disconnect in order to\
    \ enforce the\n   termination of the link, particularly in the case of an\n  \
    \ authentication failure.  The sender of the Terminate-Request SHOULD\n   disconnect\
    \ after receiving a Terminate-Ack, or after the Restart\n   counter expires. \
    \ The receiver of a Terminate-Request SHOULD wait for\n   the peer to disconnect,\
    \ and MUST NOT disconnect until at least one\n   Restart time has passed after\
    \ sending a Terminate-Ack.  PPP SHOULD\n   proceed to the Link Dead phase.\n \
    \  Implementation Note:\n      The closing of the link by LCP is sufficient. \
    \ There is no need\n      for each NCP to send a flurry of Terminate packets.\
    \  Conversely,\n      the fact that a NCP has Closed is not sufficient reason\
    \ to cause\n      the termination of the PPP link, even if that NCP was the only\n\
    \      currently NCP in the Opened state.\n"
- title: 5.  The Option Negotiation Automaton
  contents:
  - "5.  The Option Negotiation Automaton\n   The finite-state automaton is defined\
    \ by events, actions and state\n   transitions.  Events include reception of external\
    \ commands such as\n   Open and Close, expiration of the Restart timer, and reception\
    \ of\n   packets from a peer.  Actions include the starting of the Restart\n \
    \  timer and transmission of packets to the peer.\n   Some types of packets --\
    \ Configure-Naks and Configure-Rejects, or\n   Code-Rejects and Protocol-Rejects,\
    \ or Echo-Requests, Echo-Replies and\n   Discard-Requests -- are not differentiated\
    \ in the automaton\n   descriptions.  As will be described later, these packets\
    \ do indeed\n   serve different functions.  However, they always cause the same\n\
    \   transitions.\n   Events                                   Actions\n   Up \
    \  = lower layer is Up                 tlu = This-Layer-Up\n   Down = lower layer\
    \ is Down               tld = This-Layer-Down\n   Open = administrative Open \
    \              tls = This-Layer-Start\n   Close= administrative Close        \
    \      tlf = This-Layer-Finished\n   TO+  = Timeout with counter > 0         \
    \ irc = initialize restart\n                                                 \
    \ counter\n   TO-  = Timeout with counter expired      zrc = zero restart counter\n\
    \   RCR+ = Receive-Configure-Request (Good)  scr = Send-Configure-Request\n  \
    \ RCR- = Receive-Configure-Request (Bad)\n   RCA  = Receive-Configure-Ack    \
    \         sca = Send-Configure-Ack\n   RCN  = Receive-Configure-Nak/Rej      \
    \   scn = Send-Configure-Nak/Rej\n   RTR  = Receive-Terminate-Request        \
    \ str = Send-Terminate-Request\n   RTA  = Receive-Terminate-Ack             sta\
    \ = Send-Terminate-Ack\n   RUC  = Receive-Unknown-Code              scj = Send-Code-Reject\n\
    \   RXJ+ = Receive-Code-Reject (permitted)\n       or Receive-Protocol-Reject\n\
    \   RXJ- = Receive-Code-Reject (catastrophic)\n       or Receive-Protocol-Reject\n\
    \   RXR  = Receive-Echo-Request              ser = Send-Echo-Reply\n       or\
    \ Receive-Echo-Reply\n       or Receive-Discard-Request\n                    \
    \                         -  = illegal action\n"
- title: 5.1.  State Diagram
  contents:
  - "5.1.  State Diagram\n   The simplified state diagram which follows describes\
    \ the sequence of\n   events for reaching agreement on Configuration Options (opening\
    \ the\n   PPP link) and for later termination of the link.\n      This diagram\
    \ is not a complete representation of the automaton.\n      Implementation MUST\
    \ be done by consulting the actual state\n      transition table.\n   Events are\
    \ in upper case.  Actions are in lower case.  For these\n   purposes, the state\
    \ machine is initially in the Closed state.  Once\n   the Opened state has been\
    \ reached, both ends of the link have met the\n   requirement of having both sent\
    \ and received a Configure-Ack packet.\n                  RCR                \
    \    TO+\n                +--sta-->+             +------->+\n                |\
    \        |             |        |\n          +-------+      |   RTA +-------+\
    \      | Close +-------+\n          |       |<-----+<------|       |<-str-+<------|\
    \       |\n          |Closed |              |Closing|              |Opened |\n\
    \          |       | Open         |       |              |       |\n         \
    \ |       |------+       |       |              |       |\n          +-------+\
    \      |       +-------+              +-------+\n                         |  \
    \                              ^\n                         |                 \
    \               |\n                         |         +-sca----------------->+\n\
    \                         |         |                      ^\n               \
    \  RCN,TO+ V    RCR+ |     RCR-         RCA |    RCN,TO+\n                +------->+\
    \         |   +------->+         |   +--scr-->+\n                |        |  \
    \       |   |        |         |   |        |\n          +-------+      |   TO+\
    \ +-------+      |       +-------+      |\n          |       |<-scr-+<------|\
    \       |<-scn-+       |       |<-----+\n          | Req-  |              | Ack-\
    \  |              | Ack-  |\n          | Sent  | RCA          | Rcvd  |      \
    \        | Sent  |\n   +-scn->|       |------------->|       |       +-sca->|\
    \       |\n   |      +-------+              +-------+       |      +-------+\n\
    \   |   RCR- |   | RCR+                           |   RCR+ |   | RCR-\n   |  \
    \      |   +------------------------------->+<-------+   |\n   |        |    \
    \                                             |\n   +<-------+<------------------------------------------------+\n"
- title: 5.2.  State Transition Table
  contents:
  - "5.2.  State Transition Table\n   The complete state transition table follows.\
    \  States are indicated\n   horizontally, and events are read vertically.  State\
    \ transitions and\n   actions are represented in the form action/new-state.  Multiple\n\
    \   actions are separated by commas, and may continue on succeeding lines\n  \
    \ as space requires.  The state may be followed by a letter, which\n   indicates\
    \ an explanatory footnote.\n   Rationale:\n      In previous versions of this\
    \ table, a simplified non-deterministic\n      finite-state automaton was used,\
    \ with considerable detailed\n      information specified in the semantics.  This\
    \ lead to\n      interoperability problems from differing interpretations.\n \
    \     This table functions similarly to the previous versions, with the\n    \
    \  up/down flags expanded to explicit states, and the active/passive\n      paradigm\
    \ eliminated.  It is believed that this table interoperates\n      with previous\
    \ versions better than those versions themselves.\n      | State\n      |    0\
    \         1         2         3         4         5\n"
- title: Events| Initial   Starting  Closed    Stopped   Closing   Stopping
  contents:
  - 'Events| Initial   Starting  Closed    Stopped   Closing   Stopping

    '
- title: '------+-----------------------------------------------------------'
  contents:
  - "------+-----------------------------------------------------------\n Up   | \
    \   2     irc,scr/6     -         -         -         -\n Down |    -        \
    \ -         0       tls/1       0         1\n Open |  tls/1       1     irc,scr/6\
    \     3r        5r        5r\n Close|    0         0         2         2     \
    \    4         4\n      |\n  TO+ |    -         -         -         -       str/4\
    \     str/5\n  TO- |    -         -         -         -       tlf/2     tlf/3\n\
    \      |\n RCR+ |    -         -       sta/2 irc,scr,sca/8   4         5\n RCR-\
    \ |    -         -       sta/2 irc,scr,scn/6   4         5\n RCA  |    -     \
    \    -       sta/2     sta/3       4         5\n RCN  |    -         -       sta/2\
    \     sta/3       4         5\n      |\n RTR  |    -         -       sta/2   \
    \  sta/3     sta/4     sta/5\n RTA  |    -         -         2         3     \
    \  tlf/2     tlf/3\n      |\n RUC  |    -         -       scj/2     scj/3    \
    \ scj/4     scj/5\n RXJ+ |    -         -         2         3         4      \
    \   5\n RXJ- |    -         -       tlf/2     tlf/3     tlf/2     tlf/3\n    \
    \  |\n RXR  |    -         -         2         3         4         5\n      |\
    \ State\n      |    6         7         8           9\n"
- title: Events| Req-Sent  Ack-Rcvd  Ack-Sent    Opened
  contents:
  - 'Events| Req-Sent  Ack-Rcvd  Ack-Sent    Opened

    '
- title: '------+-----------------------------------------'
  contents:
  - "------+-----------------------------------------\n Up   |    -         -    \
    \     -           -\n Down |    1         1         1         tld/1\n Open | \
    \   6         7         8           9r\n Close|irc,str/4 irc,str/4 irc,str/4 tld,irc,str/4\n\
    \      |\n  TO+ |  scr/6     scr/6     scr/8         -\n  TO- |  tlf/3p    tlf/3p\
    \    tlf/3p        -\n      |\n RCR+ |  sca/8   sca,tlu/9   sca/8   tld,scr,sca/8\n\
    \ RCR- |  scn/6     scn/7     scn/6   tld,scr,scn/6\n RCA  |  irc/7     scr/6x\
    \  irc,tlu/9   tld,scr/6x\n RCN  |irc,scr/6   scr/6x  irc,scr/8   tld,scr/6x\n\
    \      |\n RTR  |  sta/6     sta/6     sta/6   tld,zrc,sta/5\n RTA  |    6   \
    \      6         8       tld,scr/6\n      |\n RUC  |  scj/6     scj/7     scj/8\
    \   tld,scj,scr/6\n RXJ+ |    6         6         8           9\n RXJ- |  tlf/3\
    \     tlf/3     tlf/3   tld,irc,str/5\n      |\n RXR  |    6         7       \
    \  8         ser/9\n   The states in which the Restart timer is running are identifiable\
    \ by\n   the presence of TO events.  Only the Send-Configure-Request, Send-\n\
    \   Terminate-Request and Zero-Restart-Counter actions start or re-start\n   the\
    \ Restart timer.  The Restart timer SHOULD be stopped when\n   transitioning from\
    \ any state where the timer is running to a state\n   where the timer is not running.\n\
    \   [p]   Passive option; see Stopped state discussion.\n   [r]   Restart option;\
    \ see Open event discussion.\n   [x]   Crossed connection; see RCA event discussion.\n"
- title: 5.3.  States
  contents:
  - "5.3.  States\n   Following is a more detailed description of each automaton state.\n\
    \   Initial\n      In the Initial state, the lower layer is unavailable (Down),\
    \ and\n      no Open has occurred.  The Restart timer is not running in the\n\
    \      Initial state.\n   Starting\n      The Starting state is the Open counterpart\
    \ to the Initial state.\n      An administrative Open has been initiated, but\
    \ the lower layer is\n      still unavailable (Down).  The Restart timer is not\
    \ running in the\n      Starting state.\n      When the lower layer becomes available\
    \ (Up), a Configure-Request\n      is sent.\n   Closed\n      In the Closed state,\
    \ the link is available (Up), but no Open has\n      occurred.  The Restart timer\
    \ is not running in the Closed state.\n      Upon reception of Configure-Request\
    \ packets, a Terminate-Ack is\n      sent.  Terminate-Acks are silently discarded\
    \ to avoid creating a\n      loop.\n   Stopped\n      The Stopped state is the\
    \ Open counterpart to the Closed state.  It\n      is entered when the automaton\
    \ is waiting for a Down event after\n      the This-Layer-Finished action, or\
    \ after sending a Terminate-Ack.\n      The Restart timer is not running in the\
    \ Stopped state.\n      Upon reception of Configure-Request packets, an appropriate\n\
    \      response is sent.  Upon reception of other packets, a Terminate-\n    \
    \  Ack is sent.  Terminate-Acks are silently discarded to avoid\n      creating\
    \ a loop.\n      Rationale:\n         The Stopped state is a junction state for\
    \ link termination,\n         link configuration failure, and other automaton\
    \ failure modes.\n         These potentially separate states have been combined.\n\
    \         There is a race condition between the Down event response (from\n  \
    \       the This-Layer-Finished action) and the Receive-Configure-\n         Request\
    \ event.  When a Configure-Request arrives before the\n         Down event, the\
    \ Down event will supercede by returning the\n         automaton to the Starting\
    \ state.  This prevents attack by\n         repetition.\n      Implementation\
    \ Option:\n         After the peer fails to respond to Configure-Requests, an\n\
    \         implementation MAY wait passively for the peer to send\n         Configure-Requests.\
    \  In this case, the This-Layer-Finished\n         action is not used for the\
    \ TO- event in states Req-Sent, Ack-\n         Rcvd and Ack-Sent.\n         This\
    \ option is useful for dedicated circuits, or circuits which\n         have no\
    \ status signals available, but SHOULD NOT be used for\n         switched circuits.\n\
    \   Closing\n      In the Closing state, an attempt is made to terminate the\n\
    \      connection.  A Terminate-Request has been sent and the Restart\n      timer\
    \ is running, but a Terminate-Ack has not yet been received.\n      Upon reception\
    \ of a Terminate-Ack, the Closed state is entered.\n      Upon the expiration\
    \ of the Restart timer, a new Terminate-Request\n      is transmitted and the\
    \ Restart timer is restarted.  After the\n      Restart timer has expired Max-Terminate\
    \ times, this action may be\n      skipped, and the Closed state may be entered.\n\
    \   Stopping\n      The Stopping state is the Open counterpart to the Closing\
    \ state.\n      A Terminate-Request has been sent and the Restart timer is\n \
    \     running, but a Terminate-Ack has not yet been received.\n      Rationale:\n\
    \         The Stopping state provides a well defined opportunity to\n        \
    \ terminate a link before allowing new traffic.  After the link\n         has\
    \ terminated, a new configuration may occur via the Stopped\n         or Starting\
    \ states.\n   Request-Sent\n      In the Request-Sent state an attempt is made\
    \ to configure the\n      connection.  A Configure-Request has been sent and the\
    \ Restart\n      timer is running, but a Configure-Ack has not yet been received\n\
    \      nor has one been sent.\n   Ack-Received\n      In the Ack-Received state,\
    \ a Configure-Request has been sent and a\n      Configure-Ack has been received.\
    \  The Restart timer is still\n      running since a Configure-Ack has not yet\
    \ been sent.\n   Ack-Sent\n      In the Ack-Sent state, a Configure-Request and\
    \ a Configure-Ack\n      have both been sent but a Configure-Ack has not yet been\
    \ received.\n      The Restart timer is always running in the Ack-Sent state.\n\
    \   Opened\n      In the Opened state, a Configure-Ack has been both sent and\n\
    \      received.  The Restart timer is not running in the Opened state.\n    \
    \  When entering the Opened state, the implementation SHOULD signal\n      the\
    \ upper layers that it is now Up.  Conversely, when leaving the\n      Opened\
    \ state, the implementation SHOULD signal the upper layers\n      that it is now\
    \ Down.\n"
- title: 5.4.  Events
  contents:
  - "5.4.  Events\n   Transitions and actions in the automaton are caused by events.\n\
    \   Up\n      The Up event occurs when a lower layer indicates that it is ready\n\
    \      to carry packets.  Typically, this event is used to signal LCP\n      that\
    \ the link is entering Link Establishment phase, or used to\n      signal a NCP\
    \ that the link is entering Network-Layer Protocol\n      phase.\n   Down\n  \
    \    The Down event occurs when a lower layer indicates that it is no\n      longer\
    \ ready to carry packets.  Typically, this event is used to\n      signal LCP\
    \ that the link is entering Link Dead phase, or used to\n      signal a NCP that\
    \ the link is leaving Network-Layer Protocol\n      phase.\n   Open\n      The\
    \ Open event indicates that the link is administratively\n      available for\
    \ traffic; that is, the network administrator (human\n      or program) has indicated\
    \ that the link is allowed to be Opened.\n      When this event occurs, and the\
    \ link is not in the Opened state,\n      the automaton attempts to send configuration\
    \ packets to the peer.\n      If the automaton is not able to begin configuration\
    \ (the lower\n      layer is Down, or a previous Close event has not completed),\
    \ the\n      establishment of the link is automatically delayed.\n      When a\
    \ Terminate-Request is received, or other events occur which\n      cause the\
    \ link to become unavailable, the automaton will progress\n      to a state where\
    \ the link is ready to re-open.  No additional\n      administrative intervention\
    \ should be necessary.\n      Implementation Note:\n         Experience has shown\
    \ that users will execute an additional Open\n         command when they want\
    \ to renegotiate the link.  Since this is\n         not the meaning of the Open\
    \ event, it is suggested that when an\n         Open user command is executed\
    \ in the Opened, Closing, Stopping,\n         or Stopped states, the implementation\
    \ issue a Down event,\n         immediately followed by an Up event.  This will\
    \ cause the\n         renegotiation of the link, without any harmful side effects.\n\
    \   Close\n      The Close event indicates that the link is not available for\n\
    \      traffic; that is, the network administrator (human or program) has\n  \
    \    indicated that the link is not allowed to be Opened.  When this\n      event\
    \ occurs, and the link is not in the Closed state, the\n      automaton attempts\
    \ to terminate the connection.  Futher attempts\n      to re-configure the link\
    \ are denied until a new Open event occurs.\n   Timeout (TO+,TO-)\n      This\
    \ event indicates the expiration of the Restart timer.  The\n      Restart timer\
    \ is used to time responses to Configure-Request and\n      Terminate-Request\
    \ packets.\n      The TO+ event indicates that the Restart counter continues to\
    \ be\n      greater than zero, which triggers the corresponding Configure-\n \
    \     Request or Terminate-Request packet to be retransmitted.\n      The TO-\
    \ event indicates that the Restart counter is not greater\n      than zero, and\
    \ no more packets need to be retransmitted.\n   Receive-Configure-Request (RCR+,RCR-)\n\
    \      This event occurs when a Configure-Request packet is received from\n  \
    \    the peer.  The Configure-Request packet indicates the desire to\n      open\
    \ a connection and may specify Configuration Options.  The\n      Configure-Request\
    \ packet is more fully described in a later\n      section.\n      The RCR+ event\
    \ indicates that the Configure-Request was\n      acceptable, and triggers the\
    \ transmission of a corresponding\n      Configure-Ack.\n      The RCR- event\
    \ indicates that the Configure-Request was\n      unacceptable, and triggers the\
    \ transmission of a corresponding\n      Configure-Nak or Configure-Reject.\n\
    \      Implementation Note:\n         These events may occur on a connection which\
    \ is already in the\n         Opened state.  The implementation MUST be prepared\
    \ to\n         immediately renegotiate the Configuration Options.\n   Receive-Configure-Ack\
    \ (RCA)\n      The Receive-Configure-Ack event occurs when a valid Configure-Ack\n\
    \      packet is received from the peer.  The Configure-Ack packet is a\n    \
    \  positive response to a Configure-Request packet.  An out of\n      sequence\
    \ or otherwise invalid packet is silently discarded.\n      Implementation Note:\n\
    \         Since the correct packet has already been received before\n        \
    \ reaching the Ack-Rcvd or Opened states, it is extremely\n         unlikely that\
    \ another such packet will arrive.  As specified,\n         all invalid Ack/Nak/Rej\
    \ packets are silently discarded, and do\n         not affect the transitions\
    \ of the automaton.\n         However, it is not impossible that a correctly formed\
    \ packet\n         will arrive through a coincidentally-timed cross-connection.\n\
    \         It is more likely to be the result of an implementation error.\n   \
    \      At the very least, this occurance should be logged.\n   Receive-Configure-Nak/Rej\
    \ (RCN)\n      This event occurs when a valid Configure-Nak or Configure-Reject\n\
    \      packet is received from the peer.  The Configure-Nak and\n      Configure-Reject\
    \ packets are negative responses to a Configure-\n      Request packet.  An out\
    \ of sequence or otherwise invalid packet is\n      silently discarded.\n    \
    \  Implementation Note:\n         Although the Configure-Nak and Configure-Reject\
    \ cause the same\n         state transition in the automaton, these packets have\n\
    \         significantly different effects on the Configuration Options\n     \
    \    sent in the resulting Configure-Request packet.\n   Receive-Terminate-Request\
    \ (RTR)\n      The Receive-Terminate-Request event occurs when a Terminate-\n\
    \      Request packet is received.  The Terminate-Request packet\n      indicates\
    \ the desire of the peer to close the connection.\n      Implementation Note:\n\
    \         This event is not identical to the Close event (see above), and\n  \
    \       does not override the Open commands of the local network\n         administrator.\
    \  The implementation MUST be prepared to receive\n         a new Configure-Request\
    \ without network administrator\n         intervention.\n   Receive-Terminate-Ack\
    \ (RTA)\n      The Receive-Terminate-Ack event occurs when a Terminate-Ack packet\n\
    \      is received from the peer.  The Terminate-Ack packet is usually a\n   \
    \   response to a Terminate-Request packet.  The Terminate-Ack packet\n      may\
    \ also indicate that the peer is in Closed or Stopped states,\n      and serves\
    \ to re-synchronize the link configuration.\n   Receive-Unknown-Code (RUC)\n \
    \     The Receive-Unknown-Code event occurs when an un-interpretable\n      packet\
    \ is received from the peer.  A Code-Reject packet is sent in\n      response.\n\
    \   Receive-Code-Reject, Receive-Protocol-Reject (RXJ+,RXJ-)\n      This event\
    \ occurs when a Code-Reject or a Protocol-Reject packet\n      is received from\
    \ the peer.\n      The RXJ+ event arises when the rejected value is acceptable,\
    \ such\n      as a Code-Reject of an extended code, or a Protocol-Reject of a\n\
    \      NCP.  These are within the scope of normal operation.  The\n      implementation\
    \ MUST stop sending the offending packet type.\n      The RXJ- event arises when\
    \ the rejected value is catastrophic,\n      such as a Code-Reject of Configure-Request,\
    \ or a Protocol-Reject\n      of LCP!  This event communicates an unrecoverable\
    \ error that\n      terminates the connection.\n   Receive-Echo-Request, Receive-Echo-Reply,\
    \ Receive-Discard-Request\n   (RXR)\n      This event occurs when an Echo-Request,\
    \ Echo-Reply or Discard-\n      Request packet is received from the peer.  The\
    \ Echo-Reply packet\n      is a response to a Echo-Request packet.  There is no\
    \ reply to an\n      Echo-Reply or Discard-Request packet.\n"
- title: 5.5.  Actions
  contents:
  - "5.5.  Actions\n   Actions in the automaton are caused by events and typically\
    \ indicate\n   the transmission of packets and/or the starting or stopping of\
    \ the\n   Restart timer.\n   Illegal-Event (-)\n      This indicates an event\
    \ that SHOULD NOT occur.  The implementation\n      probably has an internal error.\n\
    \   This-Layer-Up (tlu)\n      This action indicates to the upper layers that\
    \ the automaton is\n      entering the Opened state.\n      Typically, this action\
    \ MAY be used by the LCP to signal the Up\n      event to a NCP, Authentication\
    \ Protocol, or Link Quality Protocol,\n      or MAY be used by a NCP to indicate\
    \ that the link is available for\n      its traffic.\n   This-Layer-Down (tld)\n\
    \      This action indicates to the upper layers that the automaton is\n     \
    \ leaving the Opened state.\n      Typically, this action MAY be used by the LCP\
    \ to signal the Down\n      event to a NCP, Authentication Protocol, or Link Quality\
    \ Protocol,\n      or MAY be used by a NCP to indicate that the link is no longer\n\
    \      available for its traffic.\n   This-Layer-Start (tls)\n      This action\
    \ indicates to the lower layers that the automaton is\n      entering the Starting\
    \ state, and the lower layer is needed for the\n      link.  The lower layer SHOULD\
    \ respond with an Up event when the\n      lower layer is available.\n      This\
    \ action is highly implementation dependent.\n   This-Layer-Finished (tlf)\n \
    \     This action indicates to the lower layers that the automaton is\n      entering\
    \ the Stopped or Closed states, and the lower layer is no\n      longer needed\
    \ for the link.  The lower layer SHOULD respond with a\n      Down event when\
    \ the lower layer has terminated.\n      Typically, this action MAY be used by\
    \ the LCP to advance to the\n      Link Dead phase, or MAY be used by a NCP to\
    \ indicate to the LCP\n      that the link may terminate when there are no other\
    \ NCPs open.\n      This action is highly implementation dependent.\n   Initialize-Restart-Counter\
    \ (irc)\n      This action sets the Restart counter to the appropriate value\n\
    \      (Max-Terminate or Max-Configure).  The counter is decremented for\n   \
    \   each transmission, including the first.\n   Zero-Restart-Counter (zrc)\n \
    \     This action sets the Restart counter to zero.\n      Implementation Note:\n\
    \         This action enables the FSA to pause before proceeding to the\n    \
    \     desired final state.  In addition to zeroing the Restart\n         counter,\
    \ the implementation MUST set the timeout period to an\n         appropriate value.\n\
    \   Send-Configure-Request (scr)\n      The Send-Configure-Request action transmits\
    \ a Configure-Request\n      packet.  This indicates the desire to open a connection\
    \ with a\n      specified set of Configuration Options.  The Restart timer is\n\
    \      started when the Configure-Request packet is transmitted, to guard\n  \
    \    against packet loss.  The Restart counter is decremented each time\n    \
    \  a Configure-Request is sent.\n   Send-Configure-Ack (sca)\n      The Send-Configure-Ack\
    \ action transmits a Configure-Ack packet.\n      This acknowledges the reception\
    \ of a Configure-Request packet with\n      an acceptable set of Configuration\
    \ Options.\n   Send-Configure-Nak (scn)\n      The Send-Configure-Nak action transmits\
    \ a Configure-Nak or\n      Configure-Reject packet, as appropriate.  This negative\
    \ response\n      reports the reception of a Configure-Request packet with an\n\
    \      unacceptable set of Configuration Options.  Configure-Nak packets\n   \
    \   are used to refuse a Configuration Option value, and to suggest a\n      new,\
    \ acceptable value.  Configure-Reject packets are used to\n      refuse all negotiation\
    \ about a Configuration Option, typically\n      because it is not recognized\
    \ or implemented.  The use of\n      Configure-Nak versus Configure-Reject is\
    \ more fully described in\n      the section on LCP Packet Formats.\n   Send-Terminate-Request\
    \ (str)\n      The Send-Terminate-Request action transmits a Terminate-Request\n\
    \      packet.  This indicates the desire to close a connection.  The\n      Restart\
    \ timer is started when the Terminate-Request packet is\n      transmitted, to\
    \ guard against packet loss.  The Restart counter is\n      decremented each time\
    \ a Terminate-Request is sent.\n   Send-Terminate-Ack (sta)\n      The Send-Terminate-Ack\
    \ action transmits a Terminate-Ack packet.\n      This acknowledges the reception\
    \ of a Terminate-Request packet or\n      otherwise serves to synchronize the\
    \ state machines.\n   Send-Code-Reject (scj)\n      The Send-Code-Reject action\
    \ transmits a Code-Reject packet.  This\n      indicates the reception of an unknown\
    \ type of packet.\n   Send-Echo-Reply (ser)\n      The Send-Echo-Reply action\
    \ transmits an Echo-Reply packet.  This\n      acknowledges the reception of an\
    \ Echo-Request packet.\n"
- title: 5.6.  Loop Avoidance
  contents:
  - "5.6.  Loop Avoidance\n   The protocol makes a reasonable attempt at avoiding\
    \ Configuration\n   Option negotiation loops.  However, the protocol does NOT\
    \ guarantee\n   that loops will not happen.  As with any negotiation, it is possible\n\
    \   to configure two PPP implementations with conflicting policies that\n   will\
    \ never converge.  It is also possible to configure policies which\n   do converge,\
    \ but which take significant time to do so.  Implementors\n   should keep this\
    \ in mind and should implement loop detection\n   mechanisms or higher level timeouts.\n"
- title: 5.7.  Counters and Timers
  contents:
  - '5.7.  Counters and Timers

    '
- title: Restart Timer
  contents:
  - "Restart Timer\n   There is one special timer used by the automaton.  The Restart\
    \ timer\n   is used to time transmissions of Configure-Request and Terminate-\n\
    \   Request packets.  Expiration of the Restart timer causes a Timeout\n   event,\
    \ and retransmission of the corresponding Configure-Request or\n   Terminate-Request\
    \ packet.  The Restart timer MUST be configurable,\n   but MAY default to three\
    \ (3) seconds.\n   Implementation Note:\n      The Restart timer SHOULD be based\
    \ on the speed of the link.  The\n      default value is designed for low speed\
    \ (19,200 bps or less), high\n      switching latency links (typical telephone\
    \ lines).  Higher speed\n      links, or links with low switching latency, SHOULD\
    \ have\n      correspondingly faster retransmission times.\n"
- title: Max-Terminate
  contents:
  - "Max-Terminate\n   There is one required restart counter for Terminate-Requests.\
    \  Max-\n   Terminate indicates the number of Terminate-Request packets sent\n\
    \   without receiving a Terminate-Ack before assuming that the peer is\n   unable\
    \ to respond.  Max-Terminate MUST be configurable, but should\n   default to two\
    \ (2) transmissions.\n"
- title: Max-Configure
  contents:
  - "Max-Configure\n   A similar counter is recommended for Configure-Requests.  Max-\n\
    \   Configure indicates the number of Configure-Request packets sent\n   without\
    \ receiving a valid Configure-Ack, Configure-Nak or Configure-\n   Reject before\
    \ assuming that the peer is unable to respond.  Max-\n   Configure MUST be configurable,\
    \ but should default to ten (10)\n   transmissions.\n"
- title: Max-Failure
  contents:
  - "Max-Failure\n   A related counter is recommended for Configure-Nak.  Max-Failure\n\
    \   indicates the number of Configure-Nak packets sent without sending a\n   Configure-Ack\
    \ before assuming that configuration is not converging.\n   Any further Configure-Nak\
    \ packets are converted to Configure-Reject\n   packets.  Max-Failure MUST be\
    \ configurable, but should default to ten\n   (10) transmissions.\n"
- title: 6.  LCP Packet Formats
  contents:
  - "6.  LCP Packet Formats\n   There are three classes of LCP packets:\n      1.\
    \ Link Configuration packets used to establish and configure a\n         link\
    \ (Configure-Request, Configure-Ack, Configure-Nak and\n         Configure-Reject).\n\
    \      2. Link Termination packets used to terminate a link (Terminate-\n    \
    \     Request and Terminate-Ack).\n      3. Link Maintenance packets used to manage\
    \ and debug a link\n         (Code-Reject, Protocol-Reject, Echo-Request, Echo-Reply,\
    \ and\n         Discard-Request).\n   This document describes Version 1 of the\
    \ Link Control Protocol.  In\n   the interest of simplicity, there is no version\
    \ field in the LCP\n   packet.  If a new version of LCP is necessary in the future,\
    \ the\n   intention is that a new Data Link Layer Protocol field value will be\n\
    \   used to differentiate Version 1 LCP from all other versions.  A\n   correctly\
    \ functioning Version 1 LCP implementation will always\n   respond to unknown\
    \ Protocols (including other versions) with an\n   easily recognizable Version\
    \ 1 packet, thus providing a deterministic\n   fallback mechanism for implementations\
    \ of other versions.\n   Regardless of which Configuration Options are enabled,\
    \ all LCP Link\n   Configuration, Link Termination, and Code-Reject packets (codes\
    \ 1\n   through 7) are always sent in the full, standard form, as if no\n   Configuration\
    \ Options were enabled.  This ensures that LCP\n   Configure-Request packets are\
    \ always recognizable even when one end\n   of the link mistakenly believes the\
    \ link to be open.\n   Exactly one Link Control Protocol packet is encapsulated\
    \ in the\n   Information field of PPP Data Link Layer frames where the Protocol\n\
    \   field indicates type hex c021 (Link Control Protocol).\n   A summary of the\
    \ Link Control Protocol packet format is shown below.\n   The fields are transmitted\
    \ from left to right.\n    0                   1                   2         \
    \          3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9\
    \ 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |     Code      |  Identifier   |            Length             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |    Data ...\n   +-+-+-+-+\n   Code\n      The Code field is one octet and\
    \ identifies the kind of LCP packet.\n      When a packet is received with an\
    \ invalid Code field, a Code-\n      Reject packet is transmitted.\n      The\
    \ most up-to-date values of the LCP Code field are specified in\n      the most\
    \ recent \"Assigned Numbers\" RFC [11].  Current values are\n      assigned as\
    \ follows:\n         1       Configure-Request\n         2       Configure-Ack\n\
    \         3       Configure-Nak\n         4       Configure-Reject\n         5\
    \       Terminate-Request\n         6       Terminate-Ack\n         7       Code-Reject\n\
    \         8       Protocol-Reject\n         9       Echo-Request\n         10\
    \      Echo-Reply\n         11      Discard-Request\n         12      RESERVED\n\
    \   Identifier\n      The Identifier field is one octet and aids in matching requests\n\
    \      and replies.  When a packet is received with an invalid Identifier\n  \
    \    field, the packet is silently discarded.\n   Length\n      The Length field\
    \ is two octets and indicates the length of the LCP\n      packet including the\
    \ Code, Identifier, Length and Data fields.\n      Octets outside the range of\
    \ the Length field should be treated as\n      Data Link Layer padding and should\
    \ be ignored on reception.  When\n      a packet is received with an invalid Length\
    \ field, the packet is\n      silently discarded.\n   Data\n      The Data field\
    \ is zero or more octets as indicated by the Length\n      field.  The format\
    \ of the Data field is determined by the Code\n      field.\n"
- title: 6.1.  Configure-Request
  contents:
  - "6.1.  Configure-Request\n   Description\n      A LCP implementation wishing to\
    \ open a connection MUST transmit a\n      LCP packet with the Code field set\
    \ to 1 (Configure-Request) and\n      the Options field filled with any desired\
    \ changes to the default\n      link Configuration Options.\n      Upon reception\
    \ of a Configure-Request, an appropriate reply MUST\n      be transmitted.\n \
    \  A summary of the Configure-Request packet format is shown below.  The\n   fields\
    \ are transmitted from left to right.\n    0                   1             \
    \      2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\
    \ 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |     Code      |  Identifier   |            Length             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   | Options ...\n   +-+-+-+-+\n   Code\n      1 for Configure-Request.\n   Identifier\n\
    \      The Identifier field SHOULD be changed on each transmission.  On\n    \
    \  reception, the Identifier field should be copied into the\n      Identifier\
    \ field of the appropriate reply packet.\n   Options\n      The options field\
    \ is variable in length and contains the list of\n      zero or more Configuration\
    \ Options that the sender desires to\n      negotiate.  All Configuration Options\
    \ are always negotiated\n      simultaneously.  The format of Configuration Options\
    \ is further\n      described in a later section.\n"
- title: 6.2.  Configure-Ack
  contents:
  - "6.2.  Configure-Ack\n   Description\n      If every Configuration Option received\
    \ in a Configure-Request is\n      both recognizable and acceptable, then a LCP\
    \ implementation should\n      transmit a LCP packet with the Code field set to\
    \ 2 (Configure-\n      Ack), the Identifier field copied from the received Configure-\n\
    \      Request, and the Options field copied from the received\n      Configure-Request.\
    \  The acknowledged Configuration Options MUST\n      NOT be reordered or modified\
    \ in any way.\n      On reception of a Configure-Ack, the Identifier field must\
    \ match\n      that of the last transmitted Configure-Request.  Additionally,\
    \ the\n      Configuration Options in a Configure-Ack must exactly match those\n\
    \      of the last transmitted Configure-Request.  Invalid packets are\n     \
    \ silently discarded.\n   A summary of the Configure-Ack packet format is shown\
    \ below.  The\n   fields are transmitted from left to right.\n    0          \
    \         1                   2                   3\n    0 1 2 3 4 5 6 7 8 9 0\
    \ 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |     Code      |  Identifier   |            Length             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   | Options ...\n   +-+-+-+-+\n   Code\n      2 for Configure-Ack.\n   Identifier\n\
    \      The Identifier field is a copy of the Identifier field of the\n      Configure-Request\
    \ which caused this Configure-Ack.\n   Options\n      The Options field is variable\
    \ in length and contains the list of\n      zero or more Configuration Options\
    \ that the sender is\n      acknowledging.  All Configuration Options are always\
    \ acknowledged\n      simultaneously.\n"
- title: 6.3.  Configure-Nak
  contents:
  - "6.3.  Configure-Nak\n   Description\n      If every element of the received Configuration\
    \ Options is\n      recognizable but some are not acceptable, then a LCP\n   \
    \   implementation should transmit a LCP packet with the Code field\n      set\
    \ to 3 (Configure-Nak), the Identifier field copied from the\n      received Configure-Request,\
    \ and the Options field filled with only\n      the unacceptable Configuration\
    \ Options from the Configure-Request.\n      All acceptable Configuration Options\
    \ are filtered out of the\n      Configure-Nak, but otherwise the Configuration\
    \ Options from the\n      Configure-Request MUST NOT be reordered.\n      Each\
    \ of the Nak'd Configuration Options MUST be modified to a\n      value acceptable\
    \ to the Configure-Nak sender.  Options which have\n      no value fields (boolean\
    \ options) use the Configure-Reject reply\n      instead.\n      Finally, an implementation\
    \ may be configured to request the\n      negotiation of a specific option.  If\
    \ that option is not listed,\n      then that option may be appended to the list\
    \ of Nak'd\n      Configuration Options in order to request the peer to list that\n\
    \      option in its next Configure-Request packet.  Any value fields for\n  \
    \    the option MUST indicate values acceptable to the Configure-Nak\n      sender.\n\
    \      On reception of a Configure-Nak, the Identifier field must match\n    \
    \  that of the last transmitted Configure-Request.  Invalid packets\n      are\
    \ silently discarded.\n      Reception of a valid Configure-Nak indicates that\
    \ a new\n      Configure-Request MAY be sent with the Configuration Options\n\
    \      modified as specified in the Configure-Nak.\n      Some Configuration Options\
    \ have a variable length.  Since the\n      Nak'd Option has been modified by\
    \ the peer, the implementation\n      MUST be able to handle an Option length\
    \ which is different from\n      the original Configure-Request.\n   A summary\
    \ of the Configure-Nak packet format is shown below.  The\n   fields are transmitted\
    \ from left to right.\n    0                   1                   2         \
    \          3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9\
    \ 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |     Code      |  Identifier   |            Length             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   | Options ...\n   +-+-+-+-+\n   Code\n      3 for Configure-Nak.\n   Identifier\n\
    \      The Identifier field is a copy of the Identifier field of the\n      Configure-Request\
    \ which caused this Configure-Nak.\n   Options\n      The Options field is variable\
    \ in length and contains the list of\n      zero or more Configuration Options\
    \ that the sender is Nak'ing.\n      All Configuration Options are always Nak'd\
    \ simultaneously.\n"
- title: 6.4.  Configure-Reject
  contents:
  - "6.4.  Configure-Reject\n   Description\n      If some Configuration Options received\
    \ in a Configure-Request are\n      not recognizable or are not acceptable for\
    \ negotiation (as\n      configured by a network administrator), then a LCP implementation\n\
    \      should transmit a LCP packet with the Code field set to 4\n      (Configure-Reject),\
    \ the Identifier field copied from the received\n      Configure-Request, and\
    \ the Options field filled with only the\n      unacceptable Configuration Options\
    \ from the Configure-Request.\n      All recognizable and negotiable Configuration\
    \ Options are filtered\n      out of the Configure-Reject, but otherwise the Configuration\n\
    \      Options MUST NOT be reordered or modified in any way.\n      On reception\
    \ of a Configure-Reject, the Identifier field must\n      match that of the last\
    \ transmitted Configure-Request.\n      Additionally, the Configuration Options\
    \ in a Configure-Reject must\n      be a proper subset of those in the last transmitted\
    \ Configure-\n      Request.  Invalid packets are silently discarded.\n      Reception\
    \ of a valid Configure-Reject indicates that a new\n      Configure-Request SHOULD\
    \ be sent which does not include any of the\n      Configuration Options listed\
    \ in the Configure-Reject.\n   A summary of the Configure-Reject packet format\
    \ is shown below.  The\n   fields are transmitted from left to right.\n    0 \
    \                  1                   2                   3\n    0 1 2 3 4 5\
    \ 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |     Code      |  Identifier   |            Length             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   | Options ...\n   +-+-+-+-+\n   Code\n      4 for Configure-Reject.\n   Identifier\n\
    \      The Identifier field is a copy of the Identifier field of the\n      Configure-Request\
    \ which caused this Configure-Reject.\n   Options\n      The Options field is\
    \ variable in length and contains the list of\n      zero or more Configuration\
    \ Options that the sender is rejecting.\n      All Configuration Options are always\
    \ rejected simultaneously.\n"
- title: 6.5.  Terminate-Request and Terminate-Ack
  contents:
  - "6.5.  Terminate-Request and Terminate-Ack\n   Description\n      LCP includes\
    \ Terminate-Request and Terminate-Ack Codes in order to\n      provide a mechanism\
    \ for closing a connection.\n      A LCP implementation wishing to close a connection\
    \ should transmit\n      a LCP packet with the Code field set to 5 (Terminate-Request)\
    \ and\n      the Data field filled with any desired data.  Terminate-Request\n\
    \      packets should continue to be sent until Terminate-Ack is\n      received,\
    \ the lower layer indicates that it has gone down, or a\n      sufficiently large\
    \ number have been transmitted such that the peer\n      is down with reasonable\
    \ certainty.\n      Upon reception of a Terminate-Request, a LCP packet MUST be\n\
    \      transmitted with the Code field set to 6 (Terminate-Ack), the\n      Identifier\
    \ field copied from the Terminate-Request packet, and the\n      Data field filled\
    \ with any desired data.\n      Reception of an unelicited Terminate-Ack indicates\
    \ that the peer\n      is in the Closed or Stopped states, or is otherwise in\
    \ need of\n      re-negotiation.\n   A summary of the Terminate-Request and Terminate-Ack\
    \ packet formats\n   is shown below.  The fields are transmitted from left to\
    \ right.\n    0                   1                   2                   3\n\
    \    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |     Code      |  Identifier   |            Length             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |    Data ...\n   +-+-+-+-+\n   Code\n      5 for Terminate-Request;\n   \
    \   6 for Terminate-Ack.\n   Identifier\n      The Identifier field is one octet\
    \ and aids in matching requests\n      and replies.\n   Data\n      The Data field\
    \ is zero or more octets and contains uninterpreted\n      data for use by the\
    \ sender.  The data may consist of any binary\n      value and may be of any length\
    \ from zero to the peer's established\n      maximum Information field length\
    \ minus four.\n"
- title: 6.6.  Code-Reject
  contents:
  - "6.6.  Code-Reject\n   Description\n      Reception of a LCP packet with an unknown\
    \ Code indicates that one\n      of the communicating LCP implementations is faulty\
    \ or incomplete.\n      This error MUST be reported back to the sender of the\
    \ unknown Code\n      by transmitting a LCP packet with the Code field set to\
    \ 7 (Code-\n      Reject), and the inducing packet copied to the Rejected-\n \
    \     Information field.\n      Upon reception of a Code-Reject, the implementation\
    \ SHOULD report\n      the error, since it is unlikely that the situation can\
    \ be\n      rectified automatically.\n   A summary of the Code-Reject packet format\
    \ is shown below.  The\n   fields are transmitted from left to right.\n    0 \
    \                  1                   2                   3\n    0 1 2 3 4 5\
    \ 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |     Code      |  Identifier   |            Length             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   | Rejected-Packet ...\n   +-+-+-+-+-+-+-+-+\n   Code\n      7 for Code-Reject.\n\
    \   Identifier\n      The Identifier field is one octet and is for use by the\n\
    \      transmitter.\n   Rejected-Information\n      The Rejected-Information field\
    \ contains a copy of the LCP packet\n      which is being rejected.  It begins\
    \ with the Information field,\n      and does not include any PPP Data Link Layer\
    \ headers nor the FCS.\n      The Rejected-Information MUST be truncated to comply\
    \ with the\n      peer's established maximum Information field length.\n"
- title: 6.7.  Protocol-Reject
  contents:
  - "6.7.  Protocol-Reject\n   Description\n      Reception of a PPP frame with an\
    \ unknown Data Link Layer Protocol\n      indicates that the peer is attempting\
    \ to use a protocol which is\n      unsupported.  This usually occurs when the\
    \ peer attempts to\n      configure a new protocol.  If the LCP state machine\
    \ is in the\n      Opened state, then this error MUST be reported back to the\
    \ peer by\n      transmitting a LCP packet with the Code field set to 8 (Protocol-\n\
    \      Reject), the Rejected-Protocol field set to the received Protocol,\n  \
    \    and the inducing packet copied to the Rejected-Information field.\n     \
    \ Upon reception of a Protocol-Reject, a LCP implementation SHOULD\n      stop\
    \ transmitting frames of the indicated protocol.\n      Protocol-Reject packets\
    \ may only be sent in the LCP Opened state.\n      Protocol-Reject packets received\
    \ in any state other than the LCP\n      Opened state SHOULD be silently discarded.\n\
    \   A summary of the Protocol-Reject packet format is shown below.  The\n   fields\
    \ are transmitted from left to right.\n    0                   1             \
    \      2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\
    \ 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |     Code      |  Identifier   |            Length             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |       Rejected-Protocol       |      Rejected-Information ...\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   Code\n      8 for Protocol-Reject.\n   Identifier\n      The Identifier field\
    \ is one octet and is for use by the\n      transmitter.\n   Rejected-Protocol\n\
    \      The Rejected-Protocol field is two octets and contains the\n      Protocol\
    \ of the Data Link Layer frame which is being rejected.\n   Rejected-Information\n\
    \      The Rejected-Information field contains a copy from the frame\n      which\
    \ is being rejected.  It begins with the Information field,\n      and does not\
    \ include any PPP Data Link Layer headers nor the FCS.\n      The Rejected-Information\
    \ MUST be truncated to comply with the\n      peer's established maximum Information\
    \ field length.\n"
- title: 6.8.  Echo-Request and Echo-Reply
  contents:
  - "6.8.  Echo-Request and Echo-Reply\n   Description\n      LCP includes Echo-Request\
    \ and Echo-Reply Codes in order to provide\n      a Data Link Layer loopback mechanism\
    \ for use in exercising both\n      directions of the link.  This is useful as\
    \ an aid in debugging,\n      link quality determination, performance testing,\
    \ and for numerous\n      other functions.\n      An Echo-Request sender transmits\
    \ a LCP packet with the Code field\n      set to 9 (Echo-Request), the Identifier\
    \ field set, the local\n      Magic-Number inserted, and the Data field filled\
    \ with any desired\n      data, up to but not exceeding the peer's established\
    \ maximum\n      Information field length minus eight.\n      Upon reception of\
    \ an Echo-Request, a LCP packet MUST be\n      transmitted with the Code field\
    \ set to 10 (Echo-Reply), the\n      Identifier field copied from the received\
    \ Echo-Request, the local\n      Magic-Number inserted, and the Data field copied\
    \ from the Echo-\n      Request, truncating as necessary to avoid exceeding the\
    \ peer's\n      established maximum Information field length.\n      Echo-Request\
    \ and Echo-Reply packets may only be sent in the LCP\n      Opened state.  Echo-Request\
    \ and Echo-Reply packets received in any\n      state other than the LCP Opened\
    \ state SHOULD be silently\n      discarded.\n   A summary of the Echo-Request\
    \ and Echo-Reply packet formats is shown\n   below.  The fields are transmitted\
    \ from left to right.\n    0                   1                   2         \
    \          3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9\
    \ 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |     Code      |  Identifier   |            Length             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                         Magic-Number                          |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |    Data ...\n   +-+-+-+-+\n   Code\n      9 for Echo-Request;\n      10\
    \ for Echo-Reply.\n   Identifier\n      The Identifier field is one octet and\
    \ aids in matching Echo-\n      Requests and Echo-Replies.\n   Magic-Number\n\
    \      The Magic-Number field is four octets and aids in detecting links\n   \
    \   which are in the looped-back condition.  Unless modified by a\n      Configuration\
    \ Option, the Magic-Number MUST be transmitted as zero\n      and MUST be ignored\
    \ on reception.  See the Magic-Number\n      Configuration Option for further\
    \ explanation.\n   Data\n      The Data field is zero or more octets and contains\
    \ uninterpreted\n      data for use by the sender.  The data may consist of any\
    \ binary\n      value and may be of any length from zero to the peer's established\n\
    \      maximum Information field length minus eight.\n"
- title: 6.9.  Discard-Request
  contents:
  - "6.9.  Discard-Request\n   Description\n      LCP includes a Discard-Request Code\
    \ in order to provide a Data\n      Link Layer data sink mechanism for use in\
    \ exercising the local to\n      remote direction of the link.  This is useful\
    \ as an aid in\n      debugging, performance testing, and for numerous other functions.\n\
    \      A discard sender transmits a LCP packet with the Code field set to\n  \
    \    11 (Discard-Request) the Identifier field set, the local Magic-\n      Number\
    \ inserted, and the Data field filled with any desired data,\n      up to but\
    \ not exceeding the peer's established maximum Information\n      field length\
    \ minus eight.\n      A discard receiver MUST simply throw away an Discard-Request\
    \ that\n      it receives.\n      Discard-Request packets may only be sent in\
    \ the LCP Opened state.\n   A summary of the Discard-Request packet formats is\
    \ shown below.  The\n   fields are transmitted from left to right.\n    0    \
    \               1                   2                   3\n    0 1 2 3 4 5 6 7\
    \ 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |     Code      |  Identifier   |            Length             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                         Magic-Number                          |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |    Data ...\n   +-+-+-+-+\n   Code\n      11 for Discard-Request.\n   Identifier\n\
    \      The Identifier field is one octet and is for use by the Discard-\n    \
    \  Request transmitter.\n   Magic-Number\n      The Magic-Number field is four\
    \ octets and aids in detecting links\n      which are in the looped-back condition.\
    \  Unless modified by a\n      configuration option, the Magic-Number MUST be\
    \ transmitted as zero\n      and MUST be ignored on reception.  See the Magic-Number\n\
    \      Configuration Option for further explanation.\n   Data\n      The Data\
    \ field is zero or more octets and contains uninterpreted\n      data for use\
    \ by the sender.  The data may consist of any binary\n      value and may be of\
    \ any length from zero to the peer's established\n      maximum Information field\
    \ length minus four.\n"
- title: 7.  LCP Configuration Options
  contents:
  - "7.  LCP Configuration Options\n   LCP Configuration Options allow modifications\
    \ to the standard\n   characteristics of a point-to-point link to be negotiated.\n\
    \   Negotiable modifications include such things as the maximum receive\n   unit,\
    \ async control character mapping, the link authentication\n   method, etc.  If\
    \ a Configuration Option is not included in a\n   Configure-Request packet, the\
    \ default value for that Configuration\n   Option is assumed.\n   The end of the\
    \ list of Configuration Options is indicated by the\n   length of the LCP packet.\n\
    \   Unless otherwise specified, each Configuration Option is not listed\n   more\
    \ than once in a Configuration Options list.  Some Configuration\n   Options MAY\
    \ be listed more than once.  The effect of this is\n   Configuration Option specific\
    \ and is specified by each such\n   Configuration Option.\n   Also unless otherwise\
    \ specified, all Configuration Options apply in a\n   half-duplex fashion.  When\
    \ negotiated, they apply to only one\n   direction of the link, typically in the\
    \ receive direction when\n   interpreted from the point of view of the Configure-Request\
    \ sender.\n"
- title: 7.1.  Format
  contents:
  - "7.1.  Format\n   A summary of the Configuration Option format is shown below.\
    \  The\n   fields are transmitted from left to right.\n    0                 \
    \  1\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |     Type      |    Length     |    Data ...\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   Type\n      The Type field is one octet and indicates the type of\n      Configuration\
    \ Option.  The most up-to-date values of the LCP\n      Option Type field are\
    \ specified in the most recent \"Assigned\n      Numbers\" RFC [11].  Current\
    \ values are assigned as follows:\n         1       Maximum-Receive-Unit\n   \
    \      2       Async-Control-Character-Map\n         3       Authentication-Protocol\n\
    \         4       Quality-Protocol\n         5       Magic-Number\n         6\
    \       RESERVED\n         7       Protocol-Field-Compression\n         8    \
    \   Address-and-Control-Field-Compression\n   Length\n      The Length field is\
    \ one octet and indicates the length of this\n      Configuration Option including\
    \ the Type, Length and Data fields.\n      If a negotiable Configuration Option\
    \ is received in a Configure-\n      Request but with an invalid Length, a Configure-Nak\
    \ SHOULD be\n      transmitted which includes the desired Configuration Option\
    \ with\n      an appropriate Length and Data.\n   Data\n      The Data field is\
    \ zero or more octets and indicates the value or\n      other information for\
    \ this Configuration Option.  The format and\n      length of the Data field is\
    \ determined by the Type and Length\n      fields.\n"
- title: 7.2.  Maximum-Receive-Unit
  contents:
  - "7.2.  Maximum-Receive-Unit\n   Description\n      This Configuration Option may\
    \ be sent to inform the peer that the\n      implementation can receive larger\
    \ frames, or to request that the\n      peer send smaller frames.  If smaller\
    \ frames are requested, an\n      implementation MUST still be able to receive\
    \ 1500 octet frames in\n      case link synchronization is lost.\n   A summary\
    \ of the Maximum-Receive-Unit Configuration Option format is\n   shown below.\
    \  The fields are transmitted from left to right.\n    0                   1 \
    \                  2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5\
    \ 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |     Type      |    Length     |      Maximum-Receive-Unit     |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   Type\n      1\n   Length\n      4\n   Maximum-Receive-Unit\n      The Maximum-Receive-Unit\
    \ field is two octets and indicates the new\n      maximum receive unit.  The\
    \ Maximum-Receive-Unit covers only the\n      Data Link Layer Information field.\
    \  It does not include the\n      header, padding, FCS, nor any transparency bits\
    \ or bytes.\n   Default\n      1500\n"
- title: 7.3.  Async-Control-Character-Map
  contents:
  - "7.3.  Async-Control-Character-Map\n   Description\n      This Configuration Option\
    \ provides a way to negotiate the use of\n      control character mapping on asynchronous\
    \ links.  By default, PPP\n      maps all control characters into an appropriate\
    \ two character\n      sequence.  However, it is rarely necessary to map all control\n\
    \      characters and often it is unnecessary to map any characters.  A\n    \
    \  PPP implementation may use this Configuration Option to inform the\n      peer\
    \ which control characters must remain mapped and which control\n      characters\
    \ need not remain mapped when the peer sends them.  The\n      peer may still\
    \ send these control characters in mapped format if\n      it is necessary because\
    \ of constraints at the peer.\n      There may be some use of synchronous-to-asynchronous\
    \ converters\n      (some built into modems) in Point-to-Point links resulting\
    \ in a\n      synchronous PPP implementation on one end of a link and an\n   \
    \   asynchronous implementation on the other.  It is the\n      responsibility\
    \ of the converter to do all mapping conversions\n      during operation.  To\
    \ enable this functionality, synchronous PPP\n      implementations MUST always\
    \ accept a Async-Control-Character-Map\n      Configuration Option (it MUST always\
    \ respond to an LCP Configure-\n      Request specifying this Configuration Option\
    \ with an LCP\n      Configure-Ack).  However, acceptance of this Configuration\
    \ Option\n      does not imply that the synchronous implementation will do any\n\
    \      character mapping, since synchronous PPP uses bit-stuffing rather\n   \
    \   than character-stuffing.  Instead, all such character mapping will\n     \
    \ be performed by the asynchronous-to-synchronous converter.\n   A summary of\
    \ the Async-Control-Character-Map Configuration Option\n   format is shown below.\
    \  The fields are transmitted from left to\n   right.\n    0                 \
    \  1                   2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3\
    \ 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |     Type      |    Length     |  Async-Control-Character-Map\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \             ACCM (cont)           |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   Type\n      2\n   Length\n      6\n   Async-Control-Character-Map\n      The\
    \ Async-Control-Character-Map field is four octets and indicates\n      the new\
    \ async control character map.  The map is encoded in big-\n      endian fashion\
    \ where each numbered bit corresponds to the ASCII\n      control character of\
    \ the same value.  If the bit is cleared to\n      zero, then that ASCII control\
    \ character need not be mapped.  If\n      the bit is set to one, then that ASCII\
    \ control character must\n      remain mapped.  E.g., if bit 19 is set to zero,\
    \ then the ASCII\n      control character 19 (DC3, Control-S) may be sent in the\
    \ clear.\n         Note: The bit ordering of the map is as described in section\n\
    \         3.1, Most Significant Bit to Least Significant Bit.  The least\n   \
    \      significant bit of the least significant octet (the final octet\n     \
    \    transmitted) is numbered bit 0, and would map to the ASCII\n         control\
    \ character NUL.\n   Default\n      All ones (0xffffffff).\n"
- title: 7.4.  Authentication-Protocol
  contents:
  - "7.4.  Authentication-Protocol\n   Description\n      On some links it may be\
    \ desirable to require a peer to\n      authenticate itself before allowing network-layer\
    \ protocol packets\n      to be exchanged.  This Configuration Option provides\
    \ a way to\n      negotiate the use of a specific authentication protocol.  By\n\
    \      default, authentication is not necessary.\n      An implementation SHOULD\
    \ NOT include multiple Authentication-\n      Protocol Configuration Options in\
    \ its Configure-Request packets.\n      Instead, it SHOULD attempt to configure\
    \ the most desirable\n      protocol first.  If that protocol is Rejected, then\
    \ the\n      implementation could attempt the next most desirable protocol in\n\
    \      the next Configure-Request.\n      An implementation receiving a Configure-Request\
    \ specifying\n      Authentication-Protocols MAY choose at most one of the negotiable\n\
    \      authentication protocols and MUST send a Configure-Reject\n      including\
    \ the other specified authentication protocols.  The\n      implementation MAY\
    \ reject all of the proposed authentication\n      protocols.\n      If an implementation\
    \ sends a Configure-Ack with this Configuration\n      Option, then it is agreeing\
    \ to authenticate with the specified\n      protocol.  An implementation receiving\
    \ a Configure-Ack with this\n      Configuration Option SHOULD expect the peer\
    \ to authenticate with\n      the acknowledged protocol.\n      There is no requirement\
    \ that authentication be full duplex or that\n      the same protocol be used\
    \ in both directions.  It is perfectly\n      acceptable for different protocols\
    \ to be used in each direction.\n      This will, of course, depend on the specific\
    \ protocols negotiated.\n   A summary of the Authentication-Protocol Configuration\
    \ Option format\n   is shown below.  The fields are transmitted from left to right.\n\
    \    0                   1                   2                   3\n    0 1 2\
    \ 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |     Type      |    Length     |     Authentication-Protocol   |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |    Data ...\n   +-+-+-+-+\n   Type\n      3\n   Length\n      >= 4\n   Authentication-Protocol\n\
    \      The Authentication-Protocol field is two octets and indicates the\n   \
    \   authentication protocol desired.  Values for this field are always\n     \
    \ the same as the PPP Data Link Layer Protocol field values for that\n      same\
    \ authentication protocol.\n      The most up-to-date values of the Authentication-Protocol\
    \ field\n      are specified in the most recent \"Assigned Numbers\" RFC [11].\n\
    \      Current values are assigned as follows:\n         Value (in hex)      \
    \    Protocol\n         c023                    Password Authentication Protocol\n\
    \         c223                    Challenge Handshake Authentication\n       \
    \                          Protocol\n   Data\n      The Data field is zero or\
    \ more octets and contains additional data\n      as determined by the particular\
    \ protocol.\n"
- title: Default
  contents:
  - "Default\n   No authentication protocol necessary.\n"
- title: 7.5.  Quality-Protocol
  contents:
  - "7.5.  Quality-Protocol\n   Description\n      On some links it may be desirable\
    \ to determine when, and how\n      often, the link is dropping data.  This process\
    \ is called link\n      quality monitoring.\n      This Configuration Option provides\
    \ a way to negotiate the use of a\n      specific protocol for link quality monitoring.\
    \  By default, link\n      quality monitoring is disabled.\n      There is no\
    \ requirement that quality monitoring be full duplex or\n      that the same protocol\
    \ be used in both directions.  It is\n      perfectly acceptable for different\
    \ protocols to be used in each\n      direction.  This will, of course, depend\
    \ on the specific protocols\n      negotiated.\n   A summary of the Quality-Protocol\
    \ Configuration Option format is\n   shown below.  The fields are transmitted\
    \ from left to right.\n    0                   1                   2         \
    \          3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9\
    \ 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |     Type      |    Length     |        Quality-Protocol       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |    Data ...\n   +-+-+-+-+\n   Type\n      4\n   Length\n      >= 4\n   Quality-Protocol\n\
    \      The Quality-Protocol field is two octets and indicates the link\n     \
    \ quality monitoring protocol desired.  Values for this field are\n      always\
    \ the same as the PPP Data Link Layer Protocol field values\n      for that same\
    \ monitoring protocol.\n      The most up-to-date values of the Quality-Protocol\
    \ field are\n      specified in the most recent \"Assigned Numbers\" RFC [11].\
    \  Current\n      values are assigned as follows:\n         Value (in hex)   \
    \       Protocol\n         c025                    Link Quality Report\n   Data\n\
    \      The Data field is zero or more octets and contains additional data\n  \
    \    as determined by the particular protocol.\n   Default\n      None\n"
- title: 7.6.  Magic-Number
  contents:
  - "7.6.  Magic-Number\n   Description\n      This Configuration Option provides\
    \ a way to detect looped-back\n      links and other Data Link Layer anomalies.\
    \  This Configuration\n      Option MAY be required by some other Configuration\
    \ Options such as\n      the Monitoring-Protocol Configuration Option.\n     \
    \ Before this Configuration Option is requested, an implementation\n      must\
    \ choose its Magic-Number.  It is recommended that the Magic-\n      Number be\
    \ chosen in the most random manner possible in order to\n      guarantee with\
    \ very high probability that an implementation will\n      arrive at a unique\
    \ number.  A good way to choose a unique random\n      number is to start with\
    \ an unique seed.  Suggested sources of\n      uniqueness include machine serial\
    \ numbers, other network hardware\n      addresses, time-of-day clocks, etc. \
    \ Particularly good random\n      number seeds are precise measurements of the\
    \ inter-arrival time of\n      physical events such as packet reception on other\
    \ connected\n      networks, server response time, or the typing rate of a human\n\
    \      user.  It is also suggested that as many sources as possible be\n     \
    \ used simultaneously.\n      When a Configure-Request is received with a Magic-Number\n\
    \      Configuration Option, the received Magic-Number is compared with\n    \
    \  the Magic-Number of the last Configure-Request sent to the peer.\n      If\
    \ the two Magic-Numbers are different, then the link is not\n      looped-back,\
    \ and the Magic-Number should be acknowledged.  If the\n      two Magic-Numbers\
    \ are equal, then it is possible, but not certain,\n      that the link is looped-back\
    \ and that this Configure-Request is\n      actually the one last sent.  To determine\
    \ this, a Configure-Nak\n      should be sent specifying a different Magic-Number\
    \ value.  A new\n      Configure-Request should not be sent to the peer until\
    \ normal\n      processing would cause it to be sent (i.e., until a Configure-Nak\n\
    \      is received or the Restart timer runs out).\n      Reception of a Configure-Nak\
    \ with a Magic-Number different from\n      that of the last Configure-Nak sent\
    \ to the peer proves that a link\n      is not looped-back, and indicates a unique\
    \ Magic-Number.  If the\n      Magic-Number is equal to the one sent in the last\
    \ Configure-Nak,\n      the possibility of a looped-back link is increased, and\
    \ a new\n      Magic-Number should be chosen.  In either case, a new Configure-\n\
    \      Request should be sent with the new Magic-Number.\n      If the link is\
    \ indeed looped-back, this sequence (transmit\n      Configure-Request, receive\
    \ Configure-Request, transmit Configure-\n      Nak, receive Configure-Nak) will\
    \ repeat over and over again.  If\n      the link is not looped-back, this sequence\
    \ might occur a few\n      times, but it is extremely unlikely to occur repeatedly.\
    \  More\n      likely, the Magic-Numbers chosen at either end will quickly\n \
    \     diverge, terminating the sequence.  The following table shows the\n    \
    \  probability of collisions assuming that both ends of the link\n      select\
    \ Magic-Numbers with a perfectly uniform distribution:\n         Number of Collisions\
    \        Probability\n         --------------------   ---------------------\n\
    \                 1              1/2**32    = 2.3 E-10\n                 2   \
    \           1/2**32**2 = 5.4 E-20\n                 3              1/2**32**3\
    \ = 1.3 E-29\n      Good sources of uniqueness or randomness are required for\
    \ this\n      divergence to occur.  If a good source of uniqueness cannot be\n\
    \      found, it is recommended that this Configuration Option not be\n      enabled;\
    \ Configure-Requests with the option SHOULD NOT be\n      transmitted and any\
    \ Magic-Number Configuration Options which the\n      peer sends SHOULD be either\
    \ acknowledged or rejected.  In this\n      case, loop-backs cannot be reliably\
    \ detected by the\n      implementation, although they may still be detectable\
    \ by the peer.\n      If an implementation does transmit a Configure-Request with\
    \ a\n      Magic-Number Configuration Option, then it MUST NOT respond with a\n\
    \      Configure-Reject if its peer also transmits a Configure-Request\n     \
    \ with a Magic-Number Configuration Option.  That is, if an\n      implementation\
    \ desires to use Magic Numbers, then it MUST also\n      allow its peer to do\
    \ so.  If an implementation does receive a\n      Configure-Reject in response\
    \ to a Configure-Request, it can only\n      mean that the link is not looped-back,\
    \ and that its peer will not\n      be using Magic-Numbers.  In this case, an\
    \ implementation should\n      act as if the negotiation had been successful (as\
    \ if it had\n      instead received a Configure-Ack).\n      The Magic-Number\
    \ also may be used to detect looped-back links\n      during normal operation\
    \ as well as during Configuration Option\n      negotiation.  All LCP Echo-Request,\
    \ Echo-Reply, and Discard-\n      Request packets have a Magic-Number field which\
    \ MUST normally be\n      zero, and MUST normally be ignored on reception.  If\
    \ Magic-Number\n      has been successfully negotiated, an implementation MUST\
    \ transmit\n      these packets with the Magic-Number field set to its negotiated\n\
    \      Magic-Number.\n      The Magic-Number field of these packets SHOULD be\
    \ inspected on\n      reception.  All received Magic-Number fields MUST be equal\
    \ to\n      either zero or the peer's unique Magic-Number, depending on\n    \
    \  whether or not the peer negotiated one.\n      Reception of a Magic-Number\
    \ field equal to the negotiated local\n      Magic-Number indicates a looped-back\
    \ link.  Reception of a Magic-\n      Number other than the negotiated local Magic-Number\
    \ or the peer's\n      negotiated Magic-Number, or zero if the peer didn't negotiate\
    \ one,\n      indicates a link which has been (mis)configured for communications\n\
    \      with a different peer.\n      Procedures for recovery from either case\
    \ are unspecified and may\n      vary from implementation to implementation. \
    \ A somewhat\n      pessimistic procedure is to assume a LCP Down event.  A further\n\
    \      Open event will begin the process of re-establishing the link,\n      which\
    \ can't complete until the loop-back condition is terminated\n      and Magic-Numbers\
    \ are successfully negotiated.  A more optimistic\n      procedure (in the case\
    \ of a loop-back) is to begin transmitting\n      LCP Echo-Request packets until\
    \ an appropriate Echo-Reply is\n      received, indicating a termination of the\
    \ loop-back condition.\n   A summary of the Magic-Number Configuration Option\
    \ format is shown\n   below.  The fields are transmitted from left to right.\n\
    \    0                   1                   2                   3\n    0 1 2\
    \ 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |     Type      |    Length     |          Magic-Number\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \         Magic-Number (cont)       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   Type\n      5\n   Length\n      6\n   Magic-Number\n      The Magic-Number\
    \ field is four octets and indicates a number which\n      is very likely to be\
    \ unique to one end of the link.  A Magic-\n      Number of zero is illegal and\
    \ MUST always be Nak'd, if it is not\n      Rejected outright.\n   Default\n \
    \     None.\n"
- title: 7.7.  Protocol-Field-Compression
  contents:
  - "7.7.  Protocol-Field-Compression\n   Description\n      This Configuration Option\
    \ provides a way to negotiate the\n      compression of the Data Link Layer Protocol\
    \ field.  By default,\n      all implementations MUST transmit standard PPP frames\
    \ with two\n      octet Protocol fields.  However, PPP Protocol field numbers\
    \ are\n      chosen such that some values may be compressed into a single octet\n\
    \      form which is clearly distinguishable from the two octet form.\n      This\
    \ Configuration Option is sent to inform the peer that the\n      implementation\
    \ can receive such single octet Protocol fields.\n      Compressed Protocol fields\
    \ MUST NOT be transmitted unless this\n      Configuration Option has been negotiated.\n\
    \      As previously mentioned, the Protocol field uses an extension\n      mechanism\
    \ consistent with the ISO 3309 extension mechanism for the\n      Address field;\
    \ the Least Significant Bit (LSB) of each octet is\n      used to indicate extension\
    \ of the Protocol field.  A binary \"0\" as\n      the LSB indicates that the\
    \ Protocol field continues with the\n      following octet.  The presence of a\
    \ binary \"1\" as the LSB marks\n      the last octet of the Protocol field. \
    \ Notice that any number of\n      \"0\" octets may be prepended to the field,\
    \ and will still indicate\n      the same value (consider the two representations\
    \ for 3, 00000011\n      and 00000000 00000011).\n      In the interest of simplicity,\
    \ the standard PPP frame uses this\n      fact and always sends Protocol fields\
    \ with a two octet\n      representation.  Protocol field values less than 256\
    \ (decimal) are\n      prepended with a single zero octet even though transmission\
    \ of\n      this, the zero and most significant octet, is unnecessary.\n     \
    \ However, when using low speed links, it is desirable to conserve\n      bandwidth\
    \ by sending as little redundant data as possible.  The\n      Protocol Compression\
    \ Configuration Option allows a trade-off\n      between implementation simplicity\
    \ and bandwidth efficiency.  If\n      successfully negotiated, the ISO 3309 extension\
    \ mechanism may be\n      used to compress the Protocol field to one octet instead\
    \ of two.\n      The large majority of frames are compressible since data protocols\n\
    \      are typically assigned with Protocol field values less than 256.\n    \
    \  In addition, PPP implementations must continue to be robust and\n      MUST\
    \ accept PPP frames with either double-octet or single-octet\n      Protocol fields,\
    \ and MUST NOT distinguish between them.\n      The Protocol field is never compressed\
    \ when sending any LCP\n      packet.  This rule guarantees unambiguous recognition\
    \ of LCP\n      packets.\n      When a Protocol field is compressed, the Data\
    \ Link Layer FCS field\n      is calculated on the compressed frame, not the original\n\
    \      uncompressed frame.\n   A summary of the Protocol-Field-Compression Configuration\
    \ Option\n   format is shown below.  The fields are transmitted from left to\n\
    \   right.\n    0                   1\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5\n \
    \  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |     Type      |    Length     |\n \
    \  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   Type\n      7\n   Length\n      2\n \
    \  Default\n      Disabled.\n"
- title: 7.8.  Address-and-Control-Field-Compression
  contents:
  - "7.8.  Address-and-Control-Field-Compression\n   Description\n      This Configuration\
    \ Option provides a way to negotiate the\n      compression of the Data Link Layer\
    \ Address and Control fields.  By\n      default, all implementations MUST transmit\
    \ frames with Address and\n      Control fields and MUST use the hexadecimal values\
    \ 0xff and 0x03\n      respectively.  Since these fields have constant values,\
    \ they are\n      easily compressed.  This Configuration Option is sent to inform\n\
    \      the peer that the implementation can receive compressed Address\n     \
    \ and Control fields.\n      Compressed Address and Control fields are formed\
    \ by simply\n      omitting them.  By definition the first octet of a two octet\n\
    \      Protocol field will never be 0xff, and the Protocol field value\n     \
    \ 0x00ff is not allowed (reserved) to avoid ambiguity.\n      On reception, the\
    \ Address and Control fields are decompressed by\n      examining the first two\
    \ octets.  If they contain the values 0xff\n      and 0x03, they are assumed to\
    \ be the Address and Control fields.\n      If not, it is assumed that the fields\
    \ were compressed and were not\n      transmitted.\n      If a compressed frame\
    \ is received when Address-and-Control-Field-\n      Compression has not been\
    \ negotiated, the implementation MAY\n      silently discard the frame.\n    \
    \  The Address and Control fields MUST NOT be compressed when sending\n      any\
    \ LCP packet.  This rule guarantees unambiguous recognition of\n      LCP packets.\n\
    \      When the Address and Control fields are compressed, the Data Link\n   \
    \   Layer FCS field is calculated on the compressed frame, not the\n      original\
    \ uncompressed frame.\n   A summary of the Address-and-Control-Field-Compression\
    \ configuration\n   option format is shown below.  The fields are transmitted\
    \ from left\n   to right.\n    0                   1\n    0 1 2 3 4 5 6 7 8 9\
    \ 0 1 2 3 4 5\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |     Type      |    Length\
    \     |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   Type\n      8\n   Length\n \
    \     2\n   Default\n      Not compressed.\n"
- title: A.  Asynchronous HDLC
  contents:
  - "A.  Asynchronous HDLC\n   This appendix summarizes the modifications to ISO 3309-1979\
    \ proposed\n   in ISO 3309:1984/PDAD1, as applied in the Point-to-Point Protocol.\n\
    \   These modifications allow HDLC to be used with 8-bit asynchronous\n   links.\n\
    \   Transmission Considerations\n      All octets are transmitted with one start\
    \ bit, eight bits of data,\n      and one stop bit.  There is no provision in\
    \ either PPP or ISO\n      3309:1984/PDAD1 for seven bit asynchronous links.\n\
    \   Flag Sequence\n      The Flag Sequence is a single octet and indicates the\
    \ beginning or\n      end of a frame.  The Flag Sequence consists of the binary\
    \ sequence\n      01111110 (hexadecimal 0x7e).\n   Transparency\n      On asynchronous\
    \ links, a character stuffing procedure is used.\n      The Control Escape octet\
    \ is defined as binary 01111101\n      (hexadecimal 0x7d) where the bit positions\
    \ are numbered 87654321\n      (not 76543210, BEWARE).\n      After FCS computation,\
    \ the transmitter examines the entire frame\n      between the two Flag Sequences.\
    \  Each Flag Sequence, Control\n      Escape octet and octet with value less than\
    \ hexadecimal 0x20 which\n      is flagged in the Remote Async-Control-Character-Map\
    \ is replaced\n      by a two octet sequence consisting of the Control Escape\
    \ octet and\n      the original octet with bit 6 complemented (i.e., exclusive-or'd\n\
    \      with hexadecimal 0x20).\n      Prior to FCS computation, the receiver examines\
    \ the entire frame\n      between the two Flag Sequences.  Each octet with value\
    \ less than\n      hexadecimal 0x20 is checked.  If it is flagged in the Local\n\
    \      Async-Control-Character-Map, it is simply removed (it may have\n      been\
    \ inserted by intervening data communications equipment).  For\n      each Control\
    \ Escape octet, that octet is also removed, but bit 6\n      of the following\
    \ octet is complemented.  A Control Escape octet\n      immediately preceding\
    \ the closing Flag Sequence indicates an\n      invalid frame.\n         Note:\
    \ The inclusion of all octets less than hexadecimal 0x20\n         allows all\
    \ ASCII control characters [10] excluding DEL (Delete)\n         to be transparently\
    \ communicated through almost all known data\n         communications equipment.\n\
    \      The transmitter may also send octets with value in the range 0x40\n   \
    \   through 0xff (except 0x5e) in Control Escape format.  Since these\n      octet\
    \ values are not negotiable, this does not solve the problem\n      of receivers\
    \ which cannot handle all non-control characters.\n      Also, since the technique\
    \ does not affect the 8th bit, this does\n      not solve problems for communications\
    \ links that can send only 7-\n      bit characters.\n      A few examples may\
    \ make this more clear.  Packet data is\n      transmitted on the link as follows:\n\
    \         0x7e is encoded as 0x7d, 0x5e.\n         0x7d is encoded as 0x7d, 0x5d.\n\
    \         0x01 is encoded as 0x7d, 0x21.\n      Some modems with software flow\
    \ control may intercept outgoing DC1\n      and DC3 ignoring the 8th (parity)\
    \ bit.  This data would be\n      transmitted on the link as follows:\n      \
    \   0x11 is encoded as 0x7d, 0x31.\n         0x13 is encoded as 0x7d, 0x33.\n\
    \         0x91 is encoded as 0x7d, 0xb1.\n         0x93 is encoded as 0x7d, 0xb3.\n\
    \   Aborting a Transmission\n      On asynchronous links, frames may be aborted\
    \ by transmitting a \"0\"\n      stop bit where a \"1\" bit is expected (framing\
    \ error) or by\n      transmitting a Control Escape octet followed immediately\
    \ by a\n      closing Flag Sequence.\n   Time Fill\n      On asynchronous links,\
    \ inter-octet and inter-frame time fill MUST\n      be accomplished by transmitting\
    \ continuous \"1\" bits (mark-hold\n      state).\n         Note: On asynchronous\
    \ links, inter-frame time fill can be\n         viewed as extended inter-octet\
    \ time fill.  Doing so can save\n         one octet for every frame, decreasing\
    \ delay and increasing\n         bandwidth.  This is possible since a Flag Sequence\
    \ may serve as\n         both a frame close and a frame begin.  After having received\n\
    \         any frame, an idle receiver will always be in a frame begin\n      \
    \   state.\n         Robust transmitters should avoid using this trick over-\n\
    \         zealously since the price for decreased delay is decreased\n       \
    \  reliability.  Noisy links may cause the receiver to receive\n         garbage\
    \ characters and interpret them as part of an incoming\n         frame.  If the\
    \ transmitter does not transmit a new opening Flag\n         Sequence before sending\
    \ the next frame, then that frame will be\n         appended to the noise characters\
    \ causing an invalid frame (with\n         high reliability).  Transmitters should\
    \ avoid this by\n         transmitting an open Flag Sequence whenever \"appreciable\
    \ time\"\n         has elapsed since the prior closing Flag Sequence.  It is\n\
    \         suggested that implementations will achieve the best results by\n  \
    \       always sending an opening Flag Sequence if the new frame is not\n    \
    \     back-to-back with the last.  The maximum value for \"appreciable\n     \
    \    time\" is likely to be no greater than the typing rate of a slow\n      \
    \   to average typist, say 1 second.\n"
- title: B.  Fast Frame Check Sequence (FCS) Implementation
  contents:
  - 'B.  Fast Frame Check Sequence (FCS) Implementation

    '
- title: B.1.  FCS Computation Method
  contents:
  - "B.1.  FCS Computation Method\n   The following code provides a table lookup computation\
    \ for\n   calculating the Frame Check Sequence as data arrives at the\n   interface.\
    \  This implementation is based on [7], [8], and [9].  The\n   table is created\
    \ by the code in section B.2.\n   /*\n    * u16 represents an unsigned 16-bit\
    \ number.  Adjust the typedef for\n    * your hardware.\n    */\n   typedef unsigned\
    \ short u16;\n   /*\n    * FCS lookup table as calculated by the table generator\
    \ in section\n    * B.2.\n    */\n   static u16 fcstab[256] = {\n      0x0000,\
    \ 0x1189, 0x2312, 0x329b, 0x4624, 0x57ad, 0x6536, 0x74bf,\n      0x8c48, 0x9dc1,\
    \ 0xaf5a, 0xbed3, 0xca6c, 0xdbe5, 0xe97e, 0xf8f7,\n      0x1081, 0x0108, 0x3393,\
    \ 0x221a, 0x56a5, 0x472c, 0x75b7, 0x643e,\n      0x9cc9, 0x8d40, 0xbfdb, 0xae52,\
    \ 0xdaed, 0xcb64, 0xf9ff, 0xe876,\n      0x2102, 0x308b, 0x0210, 0x1399, 0x6726,\
    \ 0x76af, 0x4434, 0x55bd,\n      0xad4a, 0xbcc3, 0x8e58, 0x9fd1, 0xeb6e, 0xfae7,\
    \ 0xc87c, 0xd9f5,\n      0x3183, 0x200a, 0x1291, 0x0318, 0x77a7, 0x662e, 0x54b5,\
    \ 0x453c,\n      0xbdcb, 0xac42, 0x9ed9, 0x8f50, 0xfbef, 0xea66, 0xd8fd, 0xc974,\n\
    \      0x4204, 0x538d, 0x6116, 0x709f, 0x0420, 0x15a9, 0x2732, 0x36bb,\n     \
    \ 0xce4c, 0xdfc5, 0xed5e, 0xfcd7, 0x8868, 0x99e1, 0xab7a, 0xbaf3,\n      0x5285,\
    \ 0x430c, 0x7197, 0x601e, 0x14a1, 0x0528, 0x37b3, 0x263a,\n      0xdecd, 0xcf44,\
    \ 0xfddf, 0xec56, 0x98e9, 0x8960, 0xbbfb, 0xaa72,\n      0x6306, 0x728f, 0x4014,\
    \ 0x519d, 0x2522, 0x34ab, 0x0630, 0x17b9,\n      0xef4e, 0xfec7, 0xcc5c, 0xddd5,\
    \ 0xa96a, 0xb8e3, 0x8a78, 0x9bf1,\n      0x7387, 0x620e, 0x5095, 0x411c, 0x35a3,\
    \ 0x242a, 0x16b1, 0x0738,\n      0xffcf, 0xee46, 0xdcdd, 0xcd54, 0xb9eb, 0xa862,\
    \ 0x9af9, 0x8b70,\n      0x8408, 0x9581, 0xa71a, 0xb693, 0xc22c, 0xd3a5, 0xe13e,\
    \ 0xf0b7,\n      0x0840, 0x19c9, 0x2b52, 0x3adb, 0x4e64, 0x5fed, 0x6d76, 0x7cff,\n\
    \      0x9489, 0x8500, 0xb79b, 0xa612, 0xd2ad, 0xc324, 0xf1bf, 0xe036,\n     \
    \ 0x18c1, 0x0948, 0x3bd3, 0x2a5a, 0x5ee5, 0x4f6c, 0x7df7, 0x6c7e,\n      0xa50a,\
    \ 0xb483, 0x8618, 0x9791, 0xe32e, 0xf2a7, 0xc03c, 0xd1b5,\n      0x2942, 0x38cb,\
    \ 0x0a50, 0x1bd9, 0x6f66, 0x7eef, 0x4c74, 0x5dfd,\n      0xb58b, 0xa402, 0x9699,\
    \ 0x8710, 0xf3af, 0xe226, 0xd0bd, 0xc134,\n      0x39c3, 0x284a, 0x1ad1, 0x0b58,\
    \ 0x7fe7, 0x6e6e, 0x5cf5, 0x4d7c,\n      0xc60c, 0xd785, 0xe51e, 0xf497, 0x8028,\
    \ 0x91a1, 0xa33a, 0xb2b3,\n      0x4a44, 0x5bcd, 0x6956, 0x78df, 0x0c60, 0x1de9,\
    \ 0x2f72, 0x3efb,\n      0xd68d, 0xc704, 0xf59f, 0xe416, 0x90a9, 0x8120, 0xb3bb,\
    \ 0xa232,\n      0x5ac5, 0x4b4c, 0x79d7, 0x685e, 0x1ce1, 0x0d68, 0x3ff3, 0x2e7a,\n\
    \      0xe70e, 0xf687, 0xc41c, 0xd595, 0xa12a, 0xb0a3, 0x8238, 0x93b1,\n     \
    \ 0x6b46, 0x7acf, 0x4854, 0x59dd, 0x2d62, 0x3ceb, 0x0e70, 0x1ff9,\n      0xf78f,\
    \ 0xe606, 0xd49d, 0xc514, 0xb1ab, 0xa022, 0x92b9, 0x8330,\n      0x7bc7, 0x6a4e,\
    \ 0x58d5, 0x495c, 0x3de3, 0x2c6a, 0x1ef1, 0x0f78\n   };\n   #define PPPINITFCS\
    \      0xffff  /* Initial FCS value */\n   #define PPPGOODFCS      0xf0b8  /*\
    \ Good final FCS value */\n   /*\n    * Calculate a new fcs given the current\
    \ fcs and the new data.\n    */\n   u16 pppfcs(fcs, cp, len)\n       register\
    \ u16 fcs;\n       register unsigned char *cp;\n       register int len;\n   {\n\
    \       ASSERT(sizeof (u16) == 2);\n       ASSERT(((u16) -1) > 0);\n       while\
    \ (len--)\n           fcs = (fcs >> 8) ^ fcstab[(fcs ^ *cp++) & 0xff];\n     \
    \  return (fcs);\n   }\n"
- title: B.2.  Fast FCS table generator
  contents:
  - "B.2.  Fast FCS table generator\n   The following code creates the lookup table\
    \ used to calculate the\n   FCS.\n   /*\n    * Generate a FCS table for the HDLC\
    \ FCS.\n    *\n    * Drew D. Perkins at Carnegie Mellon University.\n    *\n \
    \   * Code liberally borrowed from Mohsen Banan and D. Hugh Redelmeier.\n    */\n\
    \   /*\n    * The HDLC polynomial: x**0 + x**5 + x**12 + x**16 (0x8408).\n   \
    \ */\n   #define P       0x8408\n   main()\n   {\n       register unsigned int\
    \ b, v;\n       register int i;\n       printf(\"typedef unsigned short u16;\\\
    n\");\n       printf(\"static u16 fcstab[256] = {\");\n       for (b = 0; ; )\
    \ {\n           if (b % 8 == 0)\n               printf(\"\\n\");\n           v\
    \ = b;\n           for (i = 8; i--; )\n               v = v & 1 ? (v >> 1) ^ P\
    \ : v >> 1;\n           printf(\"0x%04x\", v & 0xFFFF);\n           if (++b ==\
    \ 256)\n               break;\n           printf(\",\");\n       }\n       printf(\"\
    \\n};\\n\");\n   }\n"
- title: C.  LCP Recommended Options
  contents:
  - "C.  LCP Recommended Options\n   The following Configurations Options are recommended:\n\
    \      SYNC LINES\n      Magic Number\n      Link Quality Monitoring\n      No\
    \ Address and Control Field Compression\n      No Protocol Field Compression\n\
    \      ASYNC LINES\n      Async Control Character Map\n      Magic Number\n  \
    \    Address and Control Field Compression\n      Protocol Field Compression\n"
- title: Security Considerations
  contents:
  - "Security Considerations\n   Security issues are briefly discussed in sections\
    \ concerning the\n   Authentication Phase, and the Authentication-Protocol Configuration\n\
    \   Option.  Further discussion is planned in a separate document\n   entitled\
    \ PPP Authentication Protocols.\n"
- title: References
  contents:
  - "References\n   [1]   Electronic Industries Association, EIA Standard RS-232-C,\n\
    \         \"Interface Between Data Terminal Equipment and Data\n         Communications\
    \ Equipment Employing Serial Binary Data\n         Interchange\", August 1969.\n\
    \   [2]   International Organization For Standardization, ISO Standard\n     \
    \    3309-1979, \"Data communication - High-level data link control\n        \
    \ procedures - Frame structure\", 1979.\n   [3]   International Organization For\
    \ Standardization, ISO Standard\n         4335-1979, \"Data communication - High-level\
    \ data link control\n         procedures - Elements of procedures\", 1979.\n \
    \  [4]   International Organization For Standardization, ISO Standard\n      \
    \   4335-1979/Addendum 1, \"Data communication - High-level data\n         link\
    \ control procedures - Elements of procedures - Addendum 1\",\n         1979.\n\
    \   [5]   International Organization For Standardization, Proposed Draft\n   \
    \      International Standard ISO 3309:1983/PDAD1, \"Information\n         processing\
    \ systems - Data communication - High-level data link\n         control procedures\
    \ - Frame structure - Addendum 1: Start/stop\n         transmission\", 1984.\n\
    \   [6]   International Telecommunication Union, CCITT Recommendation\n      \
    \   X.25, \"Interface Between Data Terminal Equipment (DTE) and Data\n       \
    \  Circuit Terminating Equipment (DCE) for Terminals Operating in\n         the\
    \ Packet Mode on Public Data Networks\", CCITT Red Book,\n         Volume VIII,\
    \ Fascicle VIII.3, Rec. X.25., October 1984.\n   [7]   Perez, \"Byte-wise CRC\
    \ Calculations\", IEEE Micro, June, 1983.\n   [8]   Morse, G., \"Calculating CRC's\
    \ by Bits and Bytes\", Byte,\n         September 1986.\n   [9]   LeVan, J., \"\
    A Fast CRC\", Byte, November 1987.\n   [10]  American National Standards Institute,\
    \ ANSI X3.4-1977,\n         \"American National Standard Code for Information\
    \ Interchange\",\n         1977.\n   [11]  Reynolds, J., and J. Postel, \"Assigned\
    \ Numbers\", RFC 1060,\n         USC/Information Sciences Institute, March 1990.\n"
- title: Acknowledgments
  contents:
  - "Acknowledgments\n   Much of the text in this document is taken from the WG Requirements\n\
    \   (unpublished), and RFCs 1171 & 1172, by Drew Perkins of Carnegie\n   Mellon\
    \ University, and by Russ Hobby of the University of California\n   at Davis.\n\
    \   Many people spent significant time helping to develop the Point-to-\n   Point\
    \ Protocol.  The complete list of people is too numerous to list,\n   but the\
    \ following people deserve special thanks: Rick Adams (UUNET),\n   Ken Adelman\
    \ (TGV), Fred Baker (ACC), Mike Ballard (Telebit), Craig\n   Fox (NSC), Karl Fox\
    \ (Morning Star Technologies), Phill Gross (NRI),\n   former WG chair Russ Hobby\
    \ (UC Davis), David Kaufman (Proteon),\n   former WG chair Steve Knowles (FTP\
    \ Software), John LoVerso\n   (Xylogics), Bill Melohn (Sun Microsystems), Mike\
    \ Patton (MIT), former\n   WG chair Drew Perkins (CMU), Greg Satz (cisco systems)\
    \ and Asher\n   Waldfogel (Wellfleet).\n"
- title: Chair's Address
  contents:
  - "Chair's Address\n   The working group can be contacted via the current chair:\n\
    \      Brian Lloyd\n      Lloyd & Associates\n      3420 Sudbury Road\n      Cameron\
    \ Park, California 95682\n      Phone: (916) 676-1147\n      EMail: brian@ray.lloyd.com\n"
- title: Author's Address
  contents:
  - "Author's Address\n   Questions about this memo can also be directed to:\n   \
    \   William Allen Simpson\n      Daydreamer\n      Computer Systems Consulting\
    \ Services\n      P O Box 6205\n      East Lansing, MI  48826-6025\n      EMail:\
    \ bsimpson@ray.lloyd.com\n"
