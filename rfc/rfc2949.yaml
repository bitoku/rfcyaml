- title: __initial_text__
  contents:
  - '           Telnet Encryption: CAST-128 64 bit Output Feedback

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2000).  All Rights Reserved.\n"
- title: Abstract
  contents:
  - "Abstract\n   This document specifies how to use the CAST-128 encryption algorithm\n\
    \   in output feedback mode with the telnet encryption option.  Two key\n   sizes\
    \ are defined: 40 bit and 128 bit.\n"
- title: 1.  Command Names and Codes
  contents:
  - "1.  Command Names and Codes\n   Encryption Type\n      CAST5_40_OFB64   9\n \
    \     CAST128_OFB64   11\n   Suboption Commands\n      OFB64_IV         1\n  \
    \    OFB64_IV_OK      2\n      OFB64_IV_BAD     3\n"
- title: 2.  Command Meanings
  contents:
  - "2.  Command Meanings\n   IAC SB ENCRYPT IS CAST5_40_OFB64 OFB64_IV <initial vector>\
    \ IAC SE\n   IAC SB ENCRYPT IS CAST128_OFB64 OFB64_IV <initial vector> IAC SE\n\
    \     The sender of this command generates a random 8 byte initial\n     vector,\
    \ and sends it to the other side of the connection using the\n     OFB64_IV command.\
    \  The initial vector is sent in clear text.  Only\n     the side of the connection\
    \ that is WILL ENCRYPT may send the\n     OFB64_IV command.\n   IAC SB ENCRYPT\
    \ REPLY CAST5_40_OFB64 OFB64_IV_OK IAC SE\n   IAC SB ENCRYPT REPLY CAST128_OFB64\
    \ OFB64_IV_OK IAC SE\n   IAC SB ENCRYPT REPLY CAST5_40_OFB64 OFB64_IV_BAD IAC\
    \ SE\n   IAC SB ENCRYPT REPLY CAST128_OFB64 OFB64_IV_BAD IAC SE\n     The sender\
    \ of these commands either accepts or rejects the initial\n     vector received\
    \ in a OFB64_IV command.  Only the side of the\n     connection that is DO ENCRYPT\
    \ may send the OFB64_IV_OK and\n     OFB64_IV_BAD commands.  The OFB64_IV_OK command\
    \ MUST be sent for\n     backwards compatibility with existing implementations;\
    \ there\n     really isn't any reason why a sender would need to send the\n  \
    \   OFB64_IV_BAD command except in the case of a protocol violation\n     where\
    \ the IV sent was not of the correct length (i.e., 8 bytes).\n"
- title: 3.  Implementation Rules
  contents:
  - "3.  Implementation Rules\n   Once a OFB64_IV_OK command has been received, the\
    \ WILL ENCRYPT side\n   of the connection should do keyid negotiation using the\
    \ ENC_KEYID\n   command.  Once the keyid negotiation has successfully identified\
    \ a\n   common keyid, then START and END commands may be sent by the side of\n\
    \   the connection that is WILL ENCRYPT.  Data will be encrypted using\n   the\
    \ CAST128 64 bit Output Feedback algorithm.\n   If encryption (decryption) is\
    \ turned off and back on again, and the\n   same keyid is used when re-starting\
    \ the encryption (decryption), the\n   intervening clear text must not change\
    \ the state of the encryption\n   (decryption) machine.\n   If a START command\
    \ is sent (received) with a different keyid, the\n   encryption (decryption) machine\
    \ must be re-initialized immediately\n   following the end of the START command\
    \ with the new key and the\n   initial vector sent (received) in the last OFB64_IV\
    \ command.\n   If a new OFB64_IV command is sent (received), and encryption\n\
    \   (decryption) is enabled, the encryption (decryption) machine must be\n   re-initialized\
    \ immediately following the end of the OFB64_IV command\n   with the new initial\
    \ vector, and the keyid sent (received) in the\n   last START command.\n   If\
    \ encryption (decryption) is not enabled when a OFB64_IV command is\n   sent (received),\
    \ the encryption (decryption) machine must be re-\n   initialized after the next\
    \ START command, with the keyid sent\n   (received) in that START command, and\
    \ the initial vector sent\n   (received) in this OFB64_IV command.\n"
- title: 4.  Algorithm
  contents:
  - "4.  Algorithm\n   CAST 64 bit Output Feedback\n   key --->+------+\n        +->|\
    \ CAST |--+\n        |  +------+  |\n        +------------+\n                \
    \     v\n    INPUT --------->(+) ----> DATA\n   Given:\n      iV: Initial vector,\
    \ 64 bits (8 bytes) long.\n      Dn: the nth chunk of 64 bits (8 bytes) of data\
    \ to encrypt\n          (decrypt).\n      On: the nth chunk of 64 bits (8 bytes)\
    \ of encrypted (decrypted)\n          output.\n        V0 = CAST(iV, key)\n  \
    \      V(n+1) = CAST(Vn, key)\n        On = Dn ^ Vn\n"
- title: 5.  Integration with the AUTHENTICATION telnet option
  contents:
  - "5.  Integration with the AUTHENTICATION telnet option\n   As noted in the telnet\
    \ ENCRYPTION option specifications, a keyid\n   value of zero indicates the default\
    \ encryption key, as might be\n   derived from the telnet AUTHENTICATION option.\
    \  If the default\n   encryption key negotiated as a result of the telnet AUTHENTICATION\n\
    \   option contains less than 16 (5) bytes, then the CAST128_OFB64\n   (CAST5_40_OFB64)\
    \ option must not be offered or used as a valid telnet\n   encryption option.\n\
    \   If there are less than 32 (10) bytes of key data, the first 16 (5)\n   bytes\
    \ of key data are used as keyid 0 in each direction.  If there\n   are at least\
    \ 32 (10) bytes of key data, the first 16 (5) bytes of key\n   data are used to\
    \ encrypt the data sent by the telnet client to the\n   telnet server; the second\
    \ 16 (5) bytes of key data are used to\n   encrypt the data sent by the telnet\
    \ server to the telnet client.\n   Any extra key data is used as random data to\
    \ be sent as an\n   initialization vector.\n"
- title: 6.  Security Considerations
  contents:
  - "6.  Security Considerations\n   Encryption using Output Feedback does not ensure\
    \ data integrity; an\n   active attacker may be able to substitute text, if he\
    \ can predict the\n   clear-text that was being transmitted.\n   The tradeoff\
    \ here is that adding a message authentication code (MAC)\n   will significantly\
    \ increase the number of bytes needed to send a\n   single character in the telnet\
    \ protocol, which will impact\n   performance on slow (i.e. dialup) links.\n \
    \  This option was originally drafted back when CPU speeds where not\n   necessarily\
    \ fast enough to do allow use of CFB.  Since then, CPU's\n   have gotten much\
    \ faster.  Given the inherent weaknesses in Output\n   Feedback mode, perhaps\
    \ it should be deprecated in favor of CFB modes?\n   Encryption modes using 40-bit\
    \ keys are not to be considered secure.\n   The 40 bit key mode CAST5_40_OFB64\
    \ is listed here simply to document\n   the implementations that are already prevalent\
    \ on the Internet but\n   have never been documented.\n"
- title: 7.  Acknowledgments
  contents:
  - "7.  Acknowledgments\n   This document was based on the \"Telnet Encryption: DES\
    \ 64 bit Output\n   Feedback\" document originally written by Dave Borman of Cray\
    \ Research\n   with the assistance of the IETF Telnet Working Group.\n"
- title: 8.  References
  contents:
  - "8.  References\n   [1] Adams, C., \"The CAST-128 Encryption Algorithm\", RFC\
    \ 2144, May\n       1997.\n"
- title: Author's Address
  contents:
  - "Author's Address\n   Jeffrey Altman, Editor\n   Columbia University\n   612 West\
    \ 115th Street Room 716\n   New York NY 10025 USA\n   Phone: +1 (212) 854-1344\n\
    \   EMail: jaltman@columbia.edu\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2000).  All\
    \ Rights Reserved.\n   This document and translations of it may be copied and\
    \ furnished to\n   others, and derivative works that comment on or otherwise explain\
    \ it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
