- title: __initial_text__
  contents:
  - "                     Definitions of Managed Objects\n                      for\
    \ Character Stream Devices\n"
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This RFC specifies an IAB standards track protocol for\
    \ the Internet\n   community, and requests discussion and suggestions for improvements.\n\
    \   Please refer to the current edition of the \"IAB Official Protocol\n   Standards\"\
    \ for the standardization state and status of this protocol.\n   Distribution\
    \ of this memo is unlimited.\n"
- title: 1.  Abstract
  contents:
  - "1.  Abstract\n   This memo defines a portion of the Management Information Base\
    \ (MIB)\n   for use with network management protocols in TCP/IP based internets.\n\
    \   In particular it defines objects for the management of character\n   stream\
    \ devices.\n"
- title: 2.  The Network Management Framework
  contents:
  - "2.  The Network Management Framework\n   The Internet-standard Network Management\
    \ Framework consists of three\n   components.  They are:\n   RFC 1155 which defines\
    \ the SMI, the mechanisms used for describing\n   and naming objects for the purpose\
    \ of management. RFC 1212 defines a\n   more concise description mechanism, which\
    \ is wholly consistent with\n   the SMI.\n   RFC 1156 which defines MIB-I, the\
    \ core set of managed objects for the\n   Internet suite of protocols.  RFC 1213,\
    \ defines MIB-II, an evolution\n   of MIB-I based on implementation experience\
    \ and new operational\n   requirements.\n   RFC 1157 which defines the SNMP, the\
    \ protocol used for network access\n   to managed objects.\n   The Framework permits\
    \ new objects to be defined for the purpose of\n   experimentation and evaluation.\n"
- title: 3.  Objects
  contents:
  - "3.  Objects\n   Managed objects are accessed via a virtual information store,\
    \ termed\n   the Management Information Base or MIB. Objects in the MIB are\n\
    \   defined using the subset of Abstract Syntax Notation One (ASN.1) [7]\n   defined\
    \ in the SMI.  In particular, each object has a name, a syntax,\n   and an encoding.\
    \  The name is an object identifier, an\n   administratively assigned name, which\
    \ specifies an object type.\n   The object type together with an object instance\
    \ serves to uniquely\n   identify a specific instantiation of the object. For\
    \ human\n   convenience, we often use a textual string, termed the OBJECT\n  \
    \ DESCRIPTOR, to also refer to the object type.\n   The syntax of an object type\
    \ defines the abstract data structure\n   corresponding to that object type. \
    \ The ASN.1 language is used for\n   this purpose.  However, the SMI [3] purposely\
    \ restricts the ASN.1\n   constructs which may be used. These restrictions are\
    \ explicitly made\n   for simplicity.\n   The encoding of an object type is simply\
    \ how that object type is\n   represented using the object type's syntax. Implicitly\
    \ tied to the\n   notion of an object type's syntax and encoding is how the object\
    \ type\n   is represented when being transmitted on the network.\n   The SMI specifies\
    \ the use of the basic encoding rules of ASN.1 [8],\n   subject to the additional\
    \ requirements imposed by the SNMP.\n"
- title: 3.1.  Format of Definitions
  contents:
  - "3.1.  Format of Definitions\n   Section 5 contains the specification of all object\
    \ types contained in\n   this MIB module.  The object types are defined using\
    \ the conventions\n   defined in the SMI, as amended by the extensions specified\
    \ in [9,10].\n"
- title: 4.  Overview
  contents:
  - "4.  Overview\n   The Character MIB applies to interface ports that carry a character\n\
    \   stream, whether physical or virtual, serial or parallel, synchronous\n   or\
    \ asynchronous.  The most common example of a character port is a\n   hardware\
    \ terminal port with an RS-232 interface.  Another common\n   hardware example\
    \ is a parallel printer port, say with a Centronics\n   interface.  The concept\
    \ also includes virtual terminal ports, such as\n   a software connection point\
    \ for a remote console.\n   The Character MIB is one of a set of MIBs designed\
    \ for complementary\n   use.  At this writing, the set comprises:\n        Character\
    \ MIB\n        PPP MIB\n        RS-232-like MIB\n        Parallel-printer-like\
    \ MIB\n   The RS-232-like MIB and the Parallel-printer-like MIB represent the\n\
    \   physical layer, providing service to higher layers such as the\n   Character\
    \ MIB or PPP MIB.  Further MIBs may appear above these.\n   The following diagram\
    \ shows two possible \"MIB stacks\", each using the\n   RS-232-like MIB.\n   \
    \                                            .-----------------.\n           \
    \         .-----------------.        |  Standard MIB   |\n                   \
    \ |   Telnet MIB    |        | Interface Group |\n                    |-----------------|\
    \        |-----------------|\n                    |  Character MIB  |        |\
    \     PPP MIB     |\n                    |-----------------|        |-----------------|\n\
    \                    | RS-232-like MIB |        | RS-232-like MIB |\n        \
    \            `-----------------'        `-----------------'\n   The intent of\
    \ the model is for the physical-level MIBs to represent\n   the lowest level,\
    \ regardless of the higher level that may be using\n   it.  In turn, separate\
    \ higher level MIBs represent specific\n   applications, such as a terminal (the\
    \ Character MIB) or a network\n   connection (the PPP MIB).\n   For the most part,\
    \ character ports are distinct from network\n   interfaces (which are already\
    \ covered by the Interface group).  In\n   general, they are attachment points\
    \ for non-network devices.  The\n   exception is a character port that can support\
    \ a network protocol,\n   such as SLIP or PPP.  This implies the existence of\
    \ a corresponding\n   entry in the Interfaces table, with ifOperStatus of 'off'\
    \ while the\n   port is not running a network protocol and 'on' if it is.  The\
    \ intent\n   is that such usage is exclusive of non-network character stream\n\
    \   usage.  That is, while switched to network use, charPortOperStatus\n   would\
    \ be 'down' and Character MIB operational values such as\n   charPortInFlowState\
    \ and charPortInCharacters would be inactive.\n   The Character MIB is mandatory\
    \ for all systems that offer character\n   ports.  This includes, for example,\
    \ terminal servers, general-purpose\n   time-sharing hosts, and even such systems\
    \ as a bridge with a\n   (virtual) console port.  It may or may not include character\
    \ ports\n   that do not support network sessions, depending on the system's\n\
    \   needs.\n   The Character MIB's central abstraction is a port.  Physical ports\n\
    \   have a one-to-one correspondence with hardware ports. Virtual ports\n   are\
    \ software entities analogous to physical ports, but with no\n   hardware connector.\n\
    \   Each port supports one or more sessions.  A session represents a\n   virtual\
    \ connection that carries characters between the port and some\n   partner.  Sessions\
    \ typically operate over a stack of network\n   protocols.  A typical session,\
    \ for example, uses Telnet over TCP.\n   The MIB comprises one base object and\
    \ two tables, detailed in the\n   following sections.  The tables contain objects\
    \ for ports and\n   sessions.\n   The MIB intentionally contains no distinction\
    \ between what is often\n   called permanent and operational or volatile data\
    \ bases.  For the\n   purposes of this MIB, handling of such distinctions is implementation\n\
    \   specific.\n"
- title: 5.  Definitions
  contents:
  - "5.  Definitions\n                    RFC1316-MIB DEFINITIONS ::= BEGIN\n    \
    \                IMPORTS\n                            Counter, TimeTicks, Gauge\n\
    \                                    FROM RFC1155-SMI\n                      \
    \      DisplayString\n                                    FROM RFC1213-MIB\n \
    \                           OBJECT-TYPE\n                                    FROM\
    \ RFC-1212;\n            -- this is the MIB module for character stream devices\n\
    \            char    OBJECT IDENTIFIER ::= { mib-2 19 }\n            -- Textual\
    \ Conventions\n                AutonomousType    ::= OBJECT IDENTIFIER\n     \
    \       -- The object identifier is an independently extensible type\n       \
    \     -- identification value.  It may, for example indicate a\n            --\
    \ particular sub-tree with further MIB definitions, or\n            -- define\
    \ something like a protocol type or type of\n            -- hardware.\n      \
    \          InstancePointer   ::= OBJECT IDENTIFIER\n            -- The object\
    \ identifier is a pointer to a specific instance\n            -- of a MIB object\
    \ in this agent's implemented MIB.  By\n            -- convention, it is the first\
    \ object in the conceptual row\n            -- for the instance.\n           \
    \ -- the generic Character group\n            -- Implementation of this group\
    \ is mandatory for all\n            -- systems that offer character ports\n  \
    \          charNumber OBJECT-TYPE\n                SYNTAX INTEGER\n          \
    \      ACCESS read-only\n                STATUS mandatory\n                DESCRIPTION\n\
    \                    \"The number of entries in charPortTable, regardless\n  \
    \                  of their current state.\"\n                ::= { char 1 }\n\
    \            -- the Character Port table\n            charPortTable OBJECT-TYPE\n\
    \                SYNTAX SEQUENCE OF CharPortEntry\n                ACCESS not-accessible\n\
    \                STATUS mandatory\n                DESCRIPTION\n             \
    \       \"A list of port entries.  The number of entries is\n                \
    \    given by the value of charNumber.\"\n                ::= { char 2 }\n   \
    \         charPortEntry OBJECT-TYPE\n                SYNTAX CharPortEntry\n  \
    \              ACCESS not-accessible\n                STATUS mandatory\n     \
    \           DESCRIPTION\n                    \"Status and parameter values for\
    \ a character port.\"\n                INDEX { charPortIndex }\n             \
    \   ::= { charPortTable 1 }\n            CharPortEntry ::=\n                SEQUENCE\
    \ {\n                    charPortIndex\n                        INTEGER,\n   \
    \                 charPortName\n                        DisplayString,\n     \
    \               charPortType\n                        INTEGER,\n             \
    \       charPortHardware\n                        AutonomousType,\n          \
    \          charPortReset\n                        INTEGER,\n                 \
    \   charPortAdminStatus\n                        INTEGER,\n                  \
    \  charPortOperStatus\n                        INTEGER,\n                    charPortLastChange\n\
    \                        TimeTicks,\n                    charPortInFlowType\n\
    \                        INTEGER,\n                    charPortOutFlowType\n \
    \                       INTEGER,\n                    charPortInFlowState\n  \
    \                      INTEGER,\n                    charPortOutFlowState\n  \
    \                      INTEGER,\n                    charPortInCharacters\n  \
    \                      Counter,\n                    charPortOutCharacters\n \
    \                       Counter,\n                    charPortAdminOrigin\n  \
    \                      INTEGER,\n                    charPortSessionMaximum\n\
    \                        INTEGER,\n                    charPortSessionNumber\n\
    \                        Gauge,\n                    charPortSessionIndex\n  \
    \                      INTEGER\n                }\n            charPortIndex OBJECT-TYPE\n\
    \                SYNTAX INTEGER\n                ACCESS read-only\n          \
    \      STATUS mandatory\n                DESCRIPTION\n                    \"A\
    \ unique value for each character port.  Its value\n                    ranges\
    \ between 1 and the value of charNumber.  By\n                    convention and\
    \ if possible, hardware port numbers\n                    come first, with a simple,\
    \ direct mapping.  The\n                    value for each port must remain constant\
    \ at least\n                    from one re-initialization of the network management\n\
    \                    agent to the next.\"\n                ::= { charPortEntry\
    \ 1 }\n            charPortName OBJECT-TYPE\n                SYNTAX DisplayString\
    \ (SIZE (0..32))\n                ACCESS read-write\n                STATUS mandatory\n\
    \                DESCRIPTION\n                    \"An administratively assigned\
    \ name for the port,\n                    typically with some local significance.\"\
    \n                ::= { charPortEntry 2 }\n            charPortType OBJECT-TYPE\n\
    \                SYNTAX INTEGER { physical(1), virtual(2) }\n                ACCESS\
    \ read-only\n                STATUS mandatory\n                DESCRIPTION\n \
    \                   \"The port's type, 'physical' if the port represents\n   \
    \                 an external hardware connector, 'virtual' if it does\n     \
    \               not.\"\n                ::= { charPortEntry 3 }\n            charPortHardware\
    \ OBJECT-TYPE\n                SYNTAX AutonomousType\n                ACCESS read-only\n\
    \                STATUS mandatory\n                DESCRIPTION\n             \
    \       \"A reference to hardware MIB definitions specific to\n              \
    \      a physical port's external connector.  For example,\n                 \
    \   if the connector is RS-232, then the value of this\n                    object\
    \ refers to a MIB sub-tree defining objects\n                    specific to RS-232.\
    \  If an agent is not configured\n                    to have such values, the\
    \ agent returns the object\n                    identifier:\n                \
    \        nullHardware OBJECT IDENTIFIER ::= { 0 0 }\n                    \"\n\
    \                ::= { charPortEntry 4 }\n            charPortReset OBJECT-TYPE\n\
    \                SYNTAX INTEGER { ready(1), execute(2) }\n                ACCESS\
    \ read-write\n                STATUS mandatory\n                DESCRIPTION\n\
    \                    \"A control to force the port into a clean, initial\n   \
    \                 state, both hardware and software, disconnecting all\n     \
    \               the port's existing sessions.  In response to a\n            \
    \        get-request or get-next-request, the agent always\n                 \
    \   returns 'ready' as the value.  Setting the value to\n                    'execute'\
    \ causes a reset.\"\n                ::= { charPortEntry 5 }\n            charPortAdminStatus\
    \ OBJECT-TYPE\n                SYNTAX INTEGER { enabled(1), disabled(2), off(3),\n\
    \                                 maintenance(4) }\n                ACCESS read-write\n\
    \                STATUS mandatory\n                DESCRIPTION\n             \
    \       \"The port's desired state, independent of flow\n                    control.\
    \  'enabled' indicates that the port is\n                    allowed to pass characters\
    \ and form new sessions.\n                    'disabled' indicates that the port\
    \ is allowed to\n                    pass characters but not form new sessions.\
    \  'off'\n                    indicates that the port is not allowed to pass\n\
    \                    characters or have any sessions. 'maintenance'\n        \
    \            indicates a maintenance mode, exclusive of normal\n             \
    \       operation, such as running a test.\"\n                ::= { charPortEntry\
    \ 6 }\n            charPortOperStatus OBJECT-TYPE\n                SYNTAX INTEGER\
    \ { up(1), down(2),\n                                 maintenance(3), absent(4),\
    \ active(5) }\n                ACCESS read-only\n                STATUS mandatory\n\
    \                DESCRIPTION\n                    \"The port's actual, operational\
    \ state, independent\n                    of flow control.  'up' indicates able\
    \ to function\n                    normally.  'down' indicates inability to function\n\
    \                    for administrative or operational reasons.\n            \
    \        'maintenance' indicates a maintenance mode,\n                    exclusive\
    \ of normal operation, such as running a\n                    test.  'absent'\
    \ indicates that port hardware is not\n                    present.  'active'\
    \ indicates up with a user present\n                    (e.g. logged in).\"\n\
    \                ::= { charPortEntry 7 }\n            charPortLastChange OBJECT-TYPE\n\
    \                SYNTAX TimeTicks\n                ACCESS read-only\n        \
    \        STATUS mandatory\n                DESCRIPTION\n                    \"\
    The value of sysUpTime at the time the port entered\n                    its current\
    \ operational state.  If the current state\n                    was entered prior\
    \ to the last reinitialization of\n                    the local network management\
    \ subsystem, then this\n                    object contains a zero value.\"\n\
    \                ::= { charPortEntry 8 }\n            charPortInFlowType OBJECT-TYPE\n\
    \                SYNTAX INTEGER { none(1), xonXoff(2), hardware(3),\n        \
    \                         ctsRts(4), dsrDtr(5) }\n                ACCESS read-write\n\
    \                STATUS mandatory\n                DESCRIPTION\n             \
    \       \"The port's type of input flow control.  'none'\n                   \
    \ indicates no flow control at this level or below.\n                    'xonXoff'\
    \ indicates software flow control by\n                    recognizing XON and\
    \ XOFF characters.  'hardware'\n                    indicates flow control delegated\
    \ to the lower level,\n                    for example a parallel port.\n    \
    \                'ctsRts' and 'dsrDtr' are specific to RS-232-like\n         \
    \           ports.  Although not architecturally pure, they are\n            \
    \        included here for simplicity's sake.\"\n                ::= { charPortEntry\
    \ 9 }\n            charPortOutFlowType OBJECT-TYPE\n                SYNTAX INTEGER\
    \ { none(1), xonXoff(2), hardware(3),\n                                 ctsRts(4),\
    \ dsrDtr(5) }\n                ACCESS read-write\n                STATUS mandatory\n\
    \                DESCRIPTION\n                    \"The port's type of output\
    \ flow control.  'none'\n                    indicates no flow control at this\
    \ level or below.\n                    'xonXoff' indicates software flow control\
    \ by\n                    recognizing XON and XOFF characters.  'hardware'\n \
    \                   indicates flow control delegated to the lower level,\n   \
    \                 for example a parallel port.\n                    'ctsRts' and\
    \ 'dsrDtr' are specific to RS-232-like\n                    ports.  Although not\
    \ architecturally pure, they are\n                    included here for simplicy's\
    \ sake.\"\n                ::= { charPortEntry 10 }\n            charPortInFlowState\
    \ OBJECT-TYPE\n                SYNTAX INTEGER { none(1), unknown(2), stop(3),\
    \ go(4) }\n                ACCESS read-only\n                STATUS mandatory\n\
    \                DESCRIPTION\n                    \"The current operational state\
    \ of input flow control\n                    on the port.  'none' indicates not\
    \ applicable.\n                    'unknown' indicates this level does not know.\n\
    \                    'stop' indicates flow not allowed.  'go' indicates\n    \
    \                flow allowed.\"\n                ::= { charPortEntry 11 }\n \
    \           charPortOutFlowState OBJECT-TYPE\n                SYNTAX INTEGER {\
    \ none(1), unknown(2), stop(3), go(4) }\n                ACCESS read-only\n  \
    \              STATUS mandatory\n                DESCRIPTION\n               \
    \     \"The current operational state of output flow\n                    control\
    \ on the port.  'none' indicates not\n                    applicable.  'unknown'\
    \ indicates this level does not\n                    know.  'stop' indicates flow\
    \ not allowed.  'go'\n                    indicates flow allowed.\"\n        \
    \        ::= { charPortEntry 12 }\n            charPortInCharacters OBJECT-TYPE\n\
    \                SYNTAX Counter\n                ACCESS read-only\n          \
    \      STATUS mandatory\n                DESCRIPTION\n                    \"Total\
    \ number of characters detected as input from\n                    the port since\
    \ system re-initialization and while\n                    the port operational\
    \ state was 'up', 'active', or\n                    'maintenance', including,\
    \ for example, framing, flow\n                    control (i.e. XON and XOFF),\
    \ each occurrence of a\n                    BREAK condition, locally-processed\
    \ input, and input\n                    sent to all sessions.\"\n            \
    \    ::= { charPortEntry 13 }\n            charPortOutCharacters OBJECT-TYPE\n\
    \                SYNTAX Counter\n                ACCESS read-only\n          \
    \      STATUS mandatory\n                DESCRIPTION\n                    \"Total\
    \ number of characters detected as output to\n                    the port since\
    \ system re-initialization and while\n                    the port operational\
    \ state was 'up', 'active', or\n                    'maintenance', including,\
    \ for example, framing, flow\n                    control (i.e. XON and XOFF),\
    \ each occurrence of a\n                    BREAK condition, locally-created output,\
    \ and output\n                    received from all sessions.\"\n            \
    \    ::= { charPortEntry 14 }\n            charPortAdminOrigin OBJECT-TYPE\n \
    \               SYNTAX INTEGER { dynamic(1), network(2), local(3),\n         \
    \                        none(4) }\n                ACCESS read-write\n      \
    \          STATUS mandatory\n                DESCRIPTION\n                   \
    \ \"The administratively allowed origin for\n                    establishing\
    \ session on the port.  'dynamic' allows\n                    'network' or 'local'\
    \ session establishment. 'none'\n                    disallows session establishment.\"\
    \n                ::= { charPortEntry 15 }\n            charPortSessionMaximum\
    \ OBJECT-TYPE\n                SYNTAX INTEGER\n                ACCESS read-write\n\
    \                STATUS mandatory\n                DESCRIPTION\n             \
    \       \"The maximum number of concurrent sessions allowed\n                \
    \    on the port.  A value of -1 indicates no maximum.\n                    Setting\
    \ the maximum to less than the current number\n                    of sessions\
    \ has unspecified results.\"\n                ::= { charPortEntry 16 }\n     \
    \       charPortSessionNumber OBJECT-TYPE\n                SYNTAX Gauge\n    \
    \            ACCESS read-only\n                STATUS mandatory\n            \
    \    DESCRIPTION\n                    \"The number of open sessions on the port\
    \ that are in\n                    the connecting, connected, or disconnecting\
    \ state.\"\n                ::= { charPortEntry 17 }\n            charPortSessionIndex\
    \ OBJECT-TYPE\n                SYNTAX INTEGER\n                ACCESS read-only\n\
    \                STATUS mandatory\n                DESCRIPTION\n             \
    \       \"The value of charSessIndex for the port's first or\n               \
    \     only active session.  If the port has no active\n                    session,\
    \ the agent returns the value zero.\"\n                ::= { charPortEntry 18\
    \ }\n            -- the Character Session table\n            charSessTable OBJECT-TYPE\n\
    \                SYNTAX SEQUENCE OF CharSessEntry\n                ACCESS not-accessible\n\
    \                STATUS mandatory\n                DESCRIPTION\n             \
    \       \"A list of port session entries.\"\n                ::= { char 3 }\n\
    \            charSessEntry OBJECT-TYPE\n                SYNTAX CharSessEntry\n\
    \                ACCESS not-accessible\n                STATUS mandatory\n   \
    \             DESCRIPTION\n                    \"Status and parameter values for\
    \ a character port\n                    session.\"\n                INDEX { charSessPortIndex,\
    \ charSessIndex }\n                ::= { charSessTable 1 }\n            CharSessEntry\
    \ ::=\n                SEQUENCE {\n                    charSessPortIndex\n   \
    \                     INTEGER,\n                    charSessIndex\n          \
    \              INTEGER,\n                    charSessKill\n                  \
    \      INTEGER,\n                    charSessState\n                        INTEGER,\n\
    \                    charSessProtocol\n                        AutonomousType,\n\
    \                    charSessOperOrigin\n                        INTEGER,\n  \
    \                  charSessInCharacters\n                        Counter,\n  \
    \                  charSessOutCharacters\n                        Counter,\n \
    \                   charSessConnectionId\n                        InstancePointer,\n\
    \                    charSessStartTime\n                        TimeTicks\n  \
    \              }\n            charSessPortIndex OBJECT-TYPE\n                SYNTAX\
    \ INTEGER\n                ACCESS read-only\n                STATUS mandatory\n\
    \                DESCRIPTION\n                    \"The value of charPortIndex\
    \ for the port to which\n                    this session belongs.\"\n       \
    \         ::= { charSessEntry 1 }\n            charSessIndex OBJECT-TYPE\n   \
    \             SYNTAX INTEGER\n                ACCESS read-only\n             \
    \   STATUS mandatory\n                DESCRIPTION\n                    \"The session\
    \ index in the context of the port, a\n                    non-zero positive integer.\
    \  Session indexes within a\n                    port need not be sequential.\
    \  Session indexes may be\n                    reused for different ports.  For\
    \ example, port 1 and\n                    port 3 may both have a session 2 at\
    \ the same time.\n                    Session indexes may have any valid integer\
    \ value,\n                    with any meaning convenient to the agent\n     \
    \               implementation.\"\n                ::= { charSessEntry 2 }\n \
    \           charSessKill OBJECT-TYPE\n                SYNTAX INTEGER { ready(1),\
    \ execute(2) }\n                ACCESS read-write\n                STATUS mandatory\n\
    \                DESCRIPTION\n                    \"A control to terminate the\
    \ session.  In response to\n                    a get-request or get-next-request,\
    \ the agent always\n                    returns 'ready' as the value.  Setting\
    \ the value to\n                    'execute' causes termination.\"\n        \
    \        ::= { charSessEntry 3 }\n            charSessState OBJECT-TYPE\n    \
    \            SYNTAX INTEGER { connecting(1), connected(2),\n                 \
    \                disconnecting(3) }\n                ACCESS read-only\n      \
    \          STATUS mandatory\n                DESCRIPTION\n                   \
    \ \"The current operational state of the session,\n                    disregarding\
    \ flow control.  'connected' indicates\n                    that character data\
    \ could flow on the network side\n                    of session.  'connecting'\
    \ indicates moving from\n                    nonexistent toward 'connected'. \
    \ 'disconnecting'\n                    indicates moving from 'connected' or 'connecting'\
    \ to\n                    nonexistent.\"\n                ::= { charSessEntry\
    \ 4 }\n            charSessProtocol OBJECT-TYPE\n                SYNTAX AutonomousType\n\
    \                ACCESS read-only\n                STATUS mandatory\n        \
    \        DESCRIPTION\n                    \"The network protocol over which the\
    \ session is\n                    running.  Other OBJECT IDENTIFIER values may\
    \ be\n                    defined elsewhere, in association with specific\n  \
    \                  protocols.  However, this document assigns those of\n     \
    \               known interest as of this writing.\"\n                ::= { charSessEntry\
    \ 5 }\n            wellKnownProtocols OBJECT IDENTIFIER ::= { char 4 }\n     \
    \       protocolOther  OBJECT IDENTIFIER ::= {wellKnownProtocols 1}\n        \
    \    protocolTelnet OBJECT IDENTIFIER ::= {wellKnownProtocols 2}\n           \
    \ protocolRlogin OBJECT IDENTIFIER ::= {wellKnownProtocols 3}\n            protocolLat\
    \    OBJECT IDENTIFIER ::= {wellKnownProtocols 4}\n            protocolX29   \
    \ OBJECT IDENTIFIER ::= {wellKnownProtocols 5}\n            protocolVtp    OBJECT\
    \ IDENTIFIER ::= {wellKnownProtocols 6}\n            charSessOperOrigin OBJECT-TYPE\n\
    \                SYNTAX INTEGER { unknown(1), network(2), local(3) }\n       \
    \         ACCESS read-only\n                STATUS mandatory\n               \
    \ DESCRIPTION\n                    \"The session's source of establishment.\"\n\
    \                ::= { charSessEntry 6 }\n            charSessInCharacters OBJECT-TYPE\n\
    \                SYNTAX Counter\n                ACCESS read-only\n          \
    \      STATUS mandatory\n                DESCRIPTION\n                    \"This\
    \ session's subset of charPortInCharacters.\"\n                ::= { charSessEntry\
    \ 7 }\n            charSessOutCharacters OBJECT-TYPE\n                SYNTAX Counter\n\
    \                ACCESS read-only\n                STATUS mandatory\n        \
    \        DESCRIPTION\n                    \"This session's subset of charPortOutCharacters.\"\
    \n                ::= { charSessEntry 8 }\n            charSessConnectionId OBJECT-TYPE\n\
    \                SYNTAX InstancePointer\n                ACCESS read-only\n  \
    \              STATUS mandatory\n                DESCRIPTION\n               \
    \     \"A reference to additional local MIB information.\n                   \
    \ This should be the highest available related MIB,\n                    corresponding\
    \ to charSessProtocol, such as Telnet.\n                    For example, the value\
    \ for a TCP connection (in the\n                    absence of a Telnet MIB) is\
    \ the object identifier of\n                    tcpConnState.  If an agent is\
    \ not configured to have\n                    such values, the agent returns the\
    \ object\n                    identifier:\n                        nullConnectionId\
    \ OBJECT IDENTIFIER ::= { 0 0 }\n                    \"\n                ::= {\
    \ charSessEntry 9 }\n            charSessStartTime OBJECT-TYPE\n             \
    \   SYNTAX TimeTicks\n                ACCESS read-only\n                STATUS\
    \ mandatory\n                DESCRIPTION\n                    \"The value of sysUpTime\
    \ in MIB-2 when the session\n                    entered connecting state.\"\n\
    \                ::= { charSessEntry 10 }\n            END\n"
- title: 6.  Acknowledgements
  contents:
  - "6.  Acknowledgements\n   Based on several private MIBs, this document was produced\
    \ by the\n   Character MIB Working Group:\n                Anne Ambler, Spider\n\
    \                Charles Bazaar, Emulex\n                Christopher Bucci, Datability\n\
    \                Anthony Chung, Hughes LAN Systems\n                George Conant,\
    \ Xyplex\n                John Cook, Chipcom\n                James Davin, MIT-LCS\n\
    \                Shawn Gallagher, DEC\n                Tom Grant, Xylogics\n \
    \               Frank Huang, Emulex\n                David Jordan, Emulex\n  \
    \              Satish Joshi, SynOptics\n                Frank Kastenholz, Clearpoint\n\
    \                Ken Key, University of Tennessee\n                Jim Kinder,\
    \ Fibercom\n                Rajeev Kochhar, 3Com\n                John LoVerso,\
    \ Xylogics\n                Keith McCloghrie, Hughes LAN Systems\n           \
    \     Donald Merritt, BRL\n                David Perkins, 3Com\n             \
    \   Jim Reinstedler, Ungerman-Bass\n                Marshall Rose, PSI\n     \
    \           Ron Strich, SSDS\n                Dean Throop, DG\n              \
    \  Bill Townsend, Xylogics\n                Jesse Walker, DEC\n              \
    \  David Waitzman, BBN\n                Bill Westfield, cisco\n"
- title: 7.  References
  contents:
  - "7.  References\n   [1] Cerf, V., \"IAB Recommendations for the Development of\n\
    \       Internet  Network Management Standards\", RFC 1052, NRI,\n       April\
    \ 1988.\n   [2] Cerf, V., \"Report of the Second Ad Hoc Network\n       Management\
    \ Review  Group\", RFC 1109, NRI, August 1989.\n   [3] Rose M., and K. McCloghrie,\
    \ \"Structure and\n       Identification of  Management Information for TCP/IP-based\n\
    \       internets\", RFC 1155,  Performance Systems International,\n       Hughes\
    \ LAN Systems, May 1990.\n   [4] McCloghrie K., and M. Rose, \"Management Information\
    \ Base\n       for  Network Management of TCP/IP-based internets\", RFC\n    \
    \   1156, Hughes  LAN Systems, Performance Systems\n       International, May\
    \ 1990.\n   [5] Case, J., Fedor, M., Schoffstall, M., and J. Davin,\n       \"\
    Simple  Network Management Protocol\", RFC 1157, SNMP\n       Research,  Performance\
    \ Systems International, Performance\n       Systems  International, MIT Laboratory\
    \ for Computer Science,\n       May 1990.\n   [6] McCloghrie K., and M. Rose,\
    \ Editors, \"Management\n       Information Base  for Network Management of TCP/IP-based\n\
    \       internets\", RFC 1213,  Performance Systems International,\n       March\
    \ 1991.\n   [7] Information processing systems - Open Systems\n       Interconnection\
    \ -  Specification of Abstract Syntax Notation\n       One (ASN.1),  International\
    \ Organization for\n       Standardization, International  Standard 8824, December\n\
    \       1987.\n   [8] Information processing systems - Open Systems\n       Interconnection\
    \ -  Specification of Basic Encoding Rules for\n       Abstract Notation One \
    \ (ASN.1), International Organization\n       for Standardization,  International\
    \ Standard 8825, December\n       1987.\n   [9] Rose, M., and K. McCloghrie, Editors,\
    \ \"Concise MIB\n       Definitions\",  RFC 1212, Performance Systems International,\n\
    \       Hughes LAN Systems,  March 1991.\n  [10] Rose, M., Editor, \"A Convention\
    \ for Defining Traps for\n       use with  the SNMP\", RFC 1215, Performance Systems\n\
    \       International, March 1991.\n"
- title: 8.  Security Considerations
  contents:
  - "8.  Security Considerations\n   Security issues are not discussed in this memo.\n"
- title: 9.  Author's Address
  contents:
  - "9.  Author's Address\n   Bob Stewart\n   Xyplex, Inc.\n   330 Codman Hill Road\n\
    \   Boxborough, MA 01719\n   Phone: (508) 264-9900\n   EMail: rlstewart@eng.xyplex.com\n"
