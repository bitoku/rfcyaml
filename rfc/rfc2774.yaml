- title: __initial_text__
  contents:
  - '                      An HTTP Extension Framework

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo defines an Experimental Protocol for the Internet\n\
    \   community.  It does not specify an Internet standard of any kind.\n   Discussion\
    \ and suggestions for improvement are requested.\n   Distribution of this memo\
    \ is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2000).  All Rights Reserved.\n"
- title: IESG Note
  contents:
  - "IESG Note\n   This document was originally requested for Proposed Standard status.\n\
    \   However, due to mixed reviews during Last Call and within the HTTP\n   working\
    \ group, it is being published as an Experimental document.\n   This is not necessarily\
    \ an indication of technical flaws in the\n   document; rather, there is a more\
    \ general concern about whether this\n   document actually represents community\
    \ consensus regarding the\n   evolution of HTTP.  Additional study and discussion\
    \ are needed before\n   this can be determined.\n   Note also that when HTTP is\
    \ used as a substrate for other protocols,\n   it may be necessary or appropriate\
    \ to use other extension mechanisms\n   in addition to, or instead of, those defined\
    \ here.  This document\n   should therefore not be taken as a blueprint for adding\
    \ extensions to\n   HTTP, but it defines mechanisms that might be useful in such\n\
    \   circumstances.\n"
- title: Abstract
  contents:
  - "Abstract\n   A wide range of applications have proposed various extensions of\
    \ the\n   HTTP protocol. Current efforts span an enormous range, including\n \
    \  distributed authoring, collaboration, printing, and remote procedure\n   call\
    \ mechanisms. These HTTP extensions are not coordinated, since\n   there has been\
    \ no standard framework for defining extensions and\n   thus, separation of concerns.\
    \ This document describes a generic\n   extension mechanism for HTTP, which is\
    \ designed to address the\n   tension between private agreement and public specification\
    \ and to\n   accommodate extension of applications using HTTP clients, servers,\n\
    \   and proxies.  The proposal associates each extension with a globally\n   unique\
    \ identifier, and uses HTTP header fields to carry the extension\n   identifier\
    \ and related information between the parties involved in\n   the extended communication.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction ...............................................3\n\
    \   2.  Notational Conventions .....................................3\n   3. \
    \ Extension Declarations .....................................4\n    3.1   Header\
    \ Field Prefixes ...................................5\n   4.  Extension Header\
    \ Fields ....................................6\n    4.1   End-to-End Extensions\
    \ ...................................7\n    4.2   Hop-by-Hop Extensions ...................................7\n\
    \    4.3   Extension Response Header Fields ........................8\n   5. \
    \ Mandatory HTTP Requests ....................................8\n    5.1   Fulfilling\
    \ a Mandatory Request .........................10\n   6.  Mandatory HTTP Responses\
    \ ..................................11\n   7.  510 Not Extended ..........................................11\n\
    \   8.  Publishing an Extension ...................................11\n   9. \
    \ Caching Considerations ....................................12\n   10. Security\
    \ Considerations ...................................13\n   11. References ................................................13\n\
    \   12. Acknowledgements ..........................................14\n   13.\
    \ Authors' Addresses ........................................14\n   14. Summary\
    \ of Protocol Interactions ..........................15\n   15. Examples ..................................................16\n\
    \    15.1  User Agent to Origin Server ............................16\n    15.2\
    \  User Agent to Origin Server via HTTP/1.1 Proxy .........17\n    15.3  User\
    \ Agent to Origin Server via HTTP/1.0 Proxy .........18\n   Full Copyright Statement\
    \ ......................................20\n"
- title: 1. Introduction
  contents:
  - "1. Introduction\n   This proposal is designed to address the tension between\
    \ private\n   agreement and public specification; and to accommodate dynamic\n\
    \   extension of HTTP clients and servers by software components. The\n   kind\
    \ of extensions capable of being introduced range from:\n      o  extending a\
    \ single HTTP message;\n      o  introducing new encodings;\n      o  initiating\
    \ HTTP-derived protocols for new applications; to...\n      o  switching to protocols\
    \ which, once initiated, run independent\n         of the original protocol stack.\n\
    \   The proposal is intended to be used as follows:\n      o  Some party designs\
    \ and specifies an extension; the party\n         assigns the extension a globally\
    \ unique URI, and makes one or\n         more representations of the extension\
    \ available at that address\n         (see section 8).\n      o  An HTTP client\
    \ or server that implements this extension\n         mechanism (hereafter called\
    \ an agent) declares the use of the\n         extension by referencing its URI\
    \ in an extension declaration in\n         an HTTP message (see section 3).\n\
    \      o  The HTTP application which the extension declaration is\n         intended\
    \ for (hereafter called the ultimate recipient) can\n         deduce how to properly\
    \ interpret the extended message based on\n         the extension declaration.\n\
    \   The proposal uses features in HTTP/1.1 but is compatible with\n   HTTP/1.0\
    \ applications in such a way that extended applications can\n   coexist with existing\
    \ HTTP applications. Applications implementing\n   this proposal MUST be based\
    \ on HTTP/1.1 (or later versions of HTTP).\n"
- title: 2. Notational Conventions
  contents:
  - "2. Notational Conventions\n   This specification uses the same notational conventions\
    \ and basic\n   parsing constructs as RFC 2068 [5]. In particular the BNF constructs\n\
    \   \"token\", \"quoted-string\", \"Request-Line\", \"field-name\", and\n   \"\
    absoluteURI\" in this document are to be interpreted as described in\n   RFC 2068\
    \ [5].\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL\
    \ NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\"\
    \ in this\n   document are to be interpreted as described in RFC 2119 [6].\n \
    \  This proposal does not rely on particular features defined in URLs\n   [8]\
    \ that cannot potentially be expressed using URNs (see section 8).\n   Therefore,\
    \ the more generic term URI [8] is used throughout the\n   specification.\n"
- title: 3. Extension Declarations
  contents:
  - "3. Extension Declarations\n   An extension declaration can be used to indicate\
    \ that an extension\n   has been applied to a message and possibly to reserve\
    \ a part of the\n   header namespace identified by a header field prefix (see\
    \ 3.1). This\n   section defines the extension declaration itself; section 4 defines\
    \ a\n   set of header fields using the extension declaration.\n   This specification\
    \ does not define any ramifications of applying an\n   extension to a message\
    \ nor whether two extensions can or cannot\n   logically coexist within the same\
    \ message. It is simply a framework\n   for describing which extensions have been\
    \ applied and what the\n   ultimate recipient either must or may do in order to\
    \ properly\n   interpret any extension declarations within that message.\n   The\
    \ grammar for an extension declaration is as follows:\n       ext-decl       \
    \ = <\"> ( absoluteURI | field-name ) <\">\n                         [ namespace\
    \ ] [ decl-extensions ]\n       namespace       = \";\" \"ns\" \"=\" header-prefix\n\
    \       header-prefix   = 2*DIGIT\n       decl-extensions = *( decl-ext )\n  \
    \     decl-ext        = \";\" token [ \"=\" ( token | quoted-string ) ]\n   An\
    \ extension is identified by an absolute, globally unique URI or a\n   field-name.\
    \ A field-name MUST specify a header field uniquely defined\n   in an IETF Standards\
    \ Track RFC [3]. A URI can unambiguously be\n   distinguished from a field-name\
    \ by the presence of a colon (\":\").\n   The support for header field names as\
    \ extension identifiers provides\n   a transition strategy from decentralized\
    \ extensions to extensions\n   defined by IETF Standards Track RFCs until a mapping\
    \ between the\n   globally unique URI space and features defined in IETF Standards\n\
    \   Track RFCs has been defined according to the guidelines described in\n   section\
    \ 8.\n   Examples of extension declarations are\n       \"http://www.company.com/extension\"\
    ; ns=11\n       \"Range\"\n   An agent MAY use the decl-extensions mechanism to\
    \ include optional\n   extension declaration parameters but cannot assume these\
    \ parameters\n   to be recognized by the recipient. An agent MUST NOT use decl-\n\
    \   extensions to pass extension instance data, which MAY be passed using\n  \
    \ header field prefix values (see section 3.1). Unrecognized decl-ext\n   parameters\
    \ SHOULD be ignored and MUST NOT be removed by proxies when\n   forwarding the\
    \ extension declaration.\n"
- title: 3.1 Header Field Prefixes
  contents:
  - "3.1 Header Field Prefixes\n   The header-prefix is a dynamically generated string.\
    \ All header\n   fields in the message that match this string, using string prefix-\n\
    \   matching, belong to that extension declaration. Header field prefixes\n  \
    \ allow an extension declaration to dynamically reserve a subspace of\n   the\
    \ header space in a protocol message in order to prevent header\n   field name\
    \ clashes and to allow multiple declarations using the same\n   extension to be\
    \ applied to the same message without conflicting.\n   Header fields using a header-prefix\
    \ are of the form:\n       prefixed-header = prefix-match field-name\n       prefix-match\
    \    = header-prefix \"-\"\n   Linear white space (LWS) MUST NOT be used between\
    \ the header-prefix\n   and the dash (\"-\") or between the prefix-match and the\
    \ field-name.\n   The string prefix matching algorithm is applied to the prefix-match\n\
    \   string.\n   The format of the prefix using a combination of digits and the\
    \ dash\n   (\"-\") guarantees that no extension declaration can reserve the whole\n\
    \   header field name space. The header-prefix mechanism was preferred\n   over\
    \ other solutions for exchanging extension instance parameters\n   because it\
    \ is header based and therefore allows for easy integration\n   of new extensions\
    \ with existing HTTP features.\n   Agents MUST NOT reuse header-prefix values\
    \ in the same message unless\n   explicitly allowed by the extension (see section\
    \ 4.1 for a discussion\n   of the ultimate recipient of an extension declaration).\n\
    \   Clients SHOULD be as consistent as possible when generating header-\n   prefix\
    \ values as this facilitates use of the Vary header field in\n   responses that\
    \ vary as a function of the request extension\n   declaration(s) (see [5], section\
    \ 13.6).\n   Servers including prefixed-header header fields in a Vary header\n\
    \   field value MUST also include the corresponding extension declaration\n  \
    \ field-name as part of that value. For example, if a response depends\n   on\
    \ the value of the 16-use-transform header field defined by an\n   optional extension\
    \ declaration in the request, the Vary header field\n   in the response could\
    \ look like this:\n       Vary: Opt, 16-use-transform\n   Note, that header-prefix\
    \ consistency is no substitute for including\n   an extension declaration in the\
    \ message: header fields with header-\n   prefix values not defined by an extension\
    \ declaration in the same\n   message are not defined by this specification.\n\
    \   Examples of header-prefix values are\n       12\n       15\n       23\n  \
    \ Old applications may introduce header fields independent of this\n   extension\
    \ mechanism, potentially conflicting with header fields\n   introduced by the\
    \ prefix mechanism. In order to minimize this risk,\n   prefixes MUST contain\
    \ at least 2 digits.\n"
- title: 4. Extension Header Fields
  contents:
  - "4. Extension Header Fields\n   This proposal introduces two types of extension\
    \ declaration strength:\n   mandatory and optional, and two types of extension\
    \ declaration scope:\n   hop-by-hop and end-to-end (see section 4.1 and 4.2).\n\
    \   A mandatory extension declaration indicates that the ultimate\n   recipient\
    \ MUST consult and adhere to the rules given by the extension\n   when processing\
    \ the message or reporting an error (see section 5 and\n   7).\n   An optional\
    \ extension declaration indicates that the ultimate\n   recipient of the extension\
    \ MAY consult and adhere to the rules given\n   by the extension when processing\
    \ the message, or ignore the extension\n   declaration completely. An agent may\
    \ not be able to distinguish\n   whether the ultimate recipient does not understand\
    \ an extension\n   referred to by an optional extension or simply ignores the\
    \ extension\n   declaration.\n   The combination of the declaration strength and\
    \ scope defines a 2x2\n   matrix which is distinguished by four new general HTTP\
    \ header fields:\n   Man, Opt, C-Man, and C-Opt. (See sections 4.1 and 4.2; also\
    \ see\n   appendix 14, which has a table of interactions with origin servers\n\
    \   and proxies.)\n   The header fields are general header fields as they describe\
    \ which\n   extensions actually are applied to an HTTP message. Optional\n   declarations\
    \ MAY be applied to any HTTP message if appropriate (see\n   section 5 for how\
    \ to apply mandatory extension declarations to\n   requests and section 6 for\
    \ how to apply them to responses).\n"
- title: 4.1 End-to-End Extensions
  contents:
  - "4.1 End-to-End Extensions\n   End-to-end declarations MUST be transmitted to\
    \ the ultimate recipient\n   of the declaration. The Man and the Opt general header\
    \ fields are\n   end- to-end header fields and are defined as follows:\n     \
    \  mandatory       = \"Man\" \":\" 1#ext-decl\n       optional        = \"Opt\"\
    \ \":\" 1#ext-decl\n   For example\n       HTTP/1.1 200 OK\n       Content-Length:\
    \ 421\n       Opt: \"http://www.digest.org/Digest\"; ns=15\n       15-digest:\
    \ \"snfksjgor2tsajkt52\"\n       ...\n   The ultimate recipient of a mandatory\
    \ end-to-end extension\n   declaration MUST handle that extension declaration\
    \ as described in\n   section 5 and 6.\n"
- title: 4.2 Hop-by-Hop Extensions
  contents:
  - "4.2 Hop-by-Hop Extensions\n   Hop-by-hop extension declarations are meaningful\
    \ only for a single\n   HTTP connection. In HTTP/1.1, C-Man, C-Opt, and all header\
    \ fields\n   with matching header-prefix values defined by C-Man and C-Opt MUST\
    \ be\n   protected by a Connection header field. That is, these header fields\n\
    \   are to be included as Connection header field directives (see [5],\n   section\
    \ 14.10). The two header fields have the following grammar:\n       c-mandatory\
    \     = \"C-Man\" \":\" 1#ext-decl\n       c-optional      = \"C-Opt\" \":\" 1#ext-decl\n\
    \   For example\n       M-GET / HTTP/1.1\n       Host: some.host\n       C-Man:\
    \ \"http://www.digest.org/ProxyAuth\"; ns=14\n       14-Credentials=\"g5gj262jdw@4df\"\
    \n       Connection: C-Man, 14-Credentials\n   The ultimate recipient of a mandatory\
    \ hop-by-hop extension\n   declaration MUST handle that extension declaration\
    \ as described in\n   section 5 and 6.\n"
- title: 4.3 Extension Response Header Fields
  contents:
  - "4.3 Extension Response Header Fields\n   Two extension response header fields\
    \ are used to indicate that a\n   request containing mandatory extension declarations\
    \ has been\n   fulfilled by the ultimate recipient as described in section 5.1.\
    \ The\n   extension response header fields are exclusively intended to serve as\n\
    \   extension acknowledgements, and can not carry any other information.\n   The\
    \ Ext header field is used to indicate that all end-to-end\n   mandatory extension\
    \ declarations in the request were fulfilled:\n       ext             = \"Ext\"\
    \ \":\"\n   The C-Ext response header field is used to indicate that all hop-by-\n\
    \   hop mandatory extension declarations in the request were fulfilled.\n    \
    \   c-ext           = \"C-Ext\" \":\"\n   In HTTP/1.1, the C-Ext header fields\
    \ MUST be protected by a\n   Connection header (see [5], section 14.10).\n   The\
    \ Ext and the C-Ext header fields are not mutually exclusive; they\n   can both\
    \ occur within the same message as described in section 5.1.\n"
- title: 5. Mandatory HTTP Requests
  contents:
  - "5. Mandatory HTTP Requests\n   An HTTP request is called a mandatory request\
    \ if it includes at least\n   one mandatory extension declaration (using the Man\
    \ or the C-Man\n   header fields). The method name of a mandatory request MUST\
    \ be\n   prefixed by \"M-\". For example, a client might express the binding\n\
    \   rights- management constraints in an HTTP PUT request as follows:\n      \
    \ M-PUT /a-resource HTTP/1.1\n       Man: \"http://www.copyright.org/rights-management\"\
    ; ns=16\n       16-copyright: http://www.copyright.org/COPYRIGHT.html\n      \
    \ 16-contributions: http://www.copyright.org/PATCHES.html\n       Host: www.w3.org\n\
    \       Content-Length: 1203\n       Content-Type: text/html\n       <!doctype\
    \ html ...\n   An ultimate recipient conforming to this specification receiving\
    \ a\n   mandatory request MUST process the request by performing the\n   following\
    \ actions in the order listed below:\n      1. Identify all mandatory extension\
    \ declarations (both hop-by-hop\n         and end-to-end); the server MAY ignore\
    \ optional declarations\n         without affecting the result of processing the\
    \ HTTP message;\n      2. Examine all extensions identified in 1) and determine\
    \ if they\n         are supported for this message. If not, respond with a 510\
    \ (Not\n         Extended) status-code (see section 7);\n      3. If 2) did not\
    \ result in a 510 (Not Extended) status code, then\n         process the request\
    \ according to the semantics of the\n         extensions and of the existing HTTP\
    \ method name as defined in\n         HTTP/1.1 [5] or later versions of HTTP.\
    \ The HTTP method name\n         can be obtained by ignoring the \"M-\" method\
    \ name prefix.\n      4. If the evaluation in 3) was successful and the mandatory\n\
    \         request fulfilled, the server MUST respond as defined in\n         section\
    \ 5.1. A server MUST NOT fulfill a request without\n         understanding and\
    \ obeying all mandatory extension\n         declaration(s) in a request.\n   A\
    \ proxy that does not act as the ultimate recipient of a mandatory\n   extension\
    \ declaration MUST NOT remove the extension declaration or\n   the \"M-\" method\
    \ name prefix when forwarding the message (see section\n   5.1 for how to detect\
    \ when a mandatory extension has been fulfilled).\n   A server receiving an HTTP/1.0\
    \ (or earlier versions of HTTP) message\n   that includes a Connection header\
    \ MUST, for each connection-token in\n   this field, remove and ignore any header\
    \ field(s) from the message\n   with the same name as the connection-token.\n\
    \   A server receiving a mandatory request including the \"M-\" method name\n\
    \   prefix without any mandatory extension declarations to follow MUST\n   return\
    \ a 510 (Not Extended) response.\n   The \"M-\" prefix is reserved by this proposal\
    \ and MUST NOT be used by\n   other HTTP extensions.\n"
- title: 5.1 Fulfilling a Mandatory Request
  contents:
  - "5.1 Fulfilling a Mandatory Request\n   A server MUST NOT claim to have fulfilled\
    \ any mandatory request\n   unless it understood and obeyed all the mandatory\
    \ extension\n   declarations in the request. This section defines a mechanism\
    \ for\n   conveying this information to the client in such a way that it\n   interoperates\
    \ with existing HTTP applications and prevents broken\n   servers from giving\
    \ the false impression that an extended request was\n   fulfilled by responding\
    \ with a 200 (Ok) response without\n   understanding the method.\n   If any end-to-end\
    \ mandatory extension declarations were among the\n   fulfilled extensions then\
    \ the server MUST include an Ext response\n   header field in the response. In\
    \ order to avoid that the Ext header\n   field inadvertently is cached in an HTTP/1.1\
    \ cache, the response MUST\n   contain a no-cache cache-control directive. If\
    \ the response is\n   otherwise cachable, the no-cache cache-control directive\
    \ SHOULD be\n   limited to only affect the Ext header field:\n       HTTP/1.1\
    \ 200 OK\n       Ext:\n       Cache-Control: no-cache=\"Ext\"\n       ...\n  \
    \ If the mandatory request has been forwarded by an HTTP/1.0\n   intermediary\
    \ proxy then this is indicated either directly in the\n   Request-Line or by the\
    \ presence of an HTTP/1.1 Via header field. In\n   this case, the server MUST\
    \ include an Expires header field with a\n   date equal to or earlier than the\
    \ value of the Date header field (see\n   section 9 for a discussion on caching\
    \ considerations):\n       HTTP/1.1 200 OK\n       Date: Sun, 25 Oct 1998 08:12:31\
    \ GMT\n       Expires: Sun, 25 Oct 1998 08:12:31 GMT\n       Ext:\n       Cache-Control:\
    \ no-cache=\"Ext\", max-age=3600\n       ...\n   If any hop-by-hop mandatory extension\
    \ declarations were among the\n   fulfilled extensions then the server MUST include\
    \ a C-Ext response\n   header field in the response. The C-Ext header field MUST\
    \ be\n   protected by a Connection header field (see [5], section 14.10).\n  \
    \     HTTP/1.1 200 OK\n       C-Ext:\n       Connection: C-Ext\n   Note, that\
    \ the Ext and C-Ext header fields are not mutually\n   exclusive; they can be\
    \ both be present in a response when  fulfilling\n   mandatory request containing\
    \ both hop-by-hop as well as end-to-end\n   mandatory extension declarations.\n"
- title: 6. Mandatory HTTP Responses
  contents:
  - "6. Mandatory HTTP Responses\n   A server MUST NOT include mandatory extension\
    \ declarations in an HTTP\n   response unless it is responding to a mandatory\
    \ HTTP request whose\n   definition allowed for the mandatory response or the\
    \ server has some\n   a priori knowledge that the recipient can handle the extended\n\
    \   response.  A server MAY include optional extension declarations in\n   any\
    \ HTTP response (see section 4).\n   If a client is the ultimate recipient of\
    \ a mandatory HTTP response\n   containing mandatory extension declarations that\
    \ either the client\n   does not understand or does not want to use, then it SHOULD\
    \ discard\n   the complete response as if it were a 500 (Internal Server Error)\n\
    \   response.\n"
- title: 7. 510 Not Extended
  contents:
  - "7. 510 Not Extended\n   The policy for accessing the resource has not been met\
    \ in the\n   request.  The server should send back all the information necessary\n\
    \   for the client to issue an extended request. It is outside the scope\n   of\
    \ this specification to specify how the extensions inform the\n   client.\n  \
    \ If the 510 response contains information about extensions that were\n   not\
    \ present in the initial request then the client MAY repeat the\n   request if\
    \ it has reason to believe it can fulfill the extension\n   policy by modifying\
    \ the request according to the information provided\n   in the 510 response. Otherwise\
    \ the client MAY present any entity\n   included in the 510 response to the user,\
    \ since that entity may\n   include relevant diagnostic information.\n"
- title: 8. Publishing an Extension
  contents:
  - "8. Publishing an Extension\n   While the protocol extension definition should\
    \ be published at the\n   address of the extension identifier, this specification\
    \ does not\n   require it. The only absolute requirement is that extension\n \
    \  identifiers MUST be globally unique identifiers, and that distinct\n   names\
    \ be used for distinct semantics.\n   Likewise, applications are not required\
    \ to attempt resolving\n   extension identifiers included in an extension declaration.\
    \ The only\n   absolute requirement is that an application MUST NOT claim\n  \
    \ conformance with an extension that it does not recognize (regardless\n   of\
    \ whether it has tried to resolve the extension identifier or not).\n   This document\
    \ does not provide any policy for how long or how often\n   an application may\
    \ attempt to resolve an extension identifier.\n   The association between the\
    \ extension identifier and the\n   specification might be made by distributing\
    \ a specification, which\n   references the extension identifier.\n   It is strongly\
    \ recommended that the integrity and persistence of the\n   extension identifier\
    \ be maintained and kept unquestioned throughout\n   the lifetime of the extension.\
    \ Care should be taken not to distribute\n   conflicting specifications that reference\
    \ the same name. Even when an\n   extension specification is made available at\
    \ the address of the URI,\n   care must be taken that the specification made available\
    \ at that\n   address does not change over time. One agent may associate the\n\
    \   identifier with the old semantics, while another might associate it\n   with\
    \ the new semantics.\n   The extension definition may be made available in different\n\
    \   representations ranging from\n      o  a human-readable specification defining\
    \ the extension semantics\n         (see for example [7]),\n      o  downloadable\
    \ code which implements the semantics defined by the\n         extension,\n  \
    \    o  a formal interface description provided by the extension, to\n      o\
    \  a machine-readable specification defining the extension\n         semantics.\n\
    \   For example, a software component that implements the specification\n   may\
    \ reside at the same address as a human-readable specification\n   (distinguished\
    \ by content negotiation). The human-readable\n   representation serves to document\
    \ the extension and encourage\n   deployment, while the software component would\
    \ allow clients and\n   servers to be dynamically extended.\n"
- title: 9. Caching Considerations
  contents:
  - "9. Caching Considerations\n   Use of extensions using the syntax defined by this\
    \ document may have\n   additional implications on the cachability of HTTP response\
    \ messages\n   other than the ones described in section 5.1.\n   The originator\
    \ of an extended message should be able to determine\n   from the semantics of\
    \ the extension whether or not the extension's\n   presence impacts the caching\
    \ constraints of the response message. If\n   an extension does require tighter\
    \ constraints on the cachebility of\n   the response, the originator MUST include\
    \ the appropriate combination\n   of cache header fields (Cache-Control, Vary,\
    \ Expires) corresponding\n   to the required level of constraints of the extended\
    \ semantics.\n"
- title: 10. Security Considerations
  contents:
  - "10. Security Considerations\n   Dynamic installation of extension facilities\
    \ as described in the\n   introduction involves software written by one party\
    \ (the provider of\n   the implementation) to be executed under the authority\
    \ of another\n   (the party operating the host software). This opens the host\
    \ party to\n   a variety of \"Trojan horse\" attacks by the provider, or a malicious\n\
    \   third party that forges implementations under a provider's name. See,\n  \
    \ for example RFC2046 [4], section 4.5.2 for a discussion of these\n   risks.\n"
- title: 11. References
  contents:
  - "11. References\n   [1]  Crocker, D., \"Standard for the Format of ARPA Internet\
    \ Text\n        Messages\", STD 11, RFC 822, August 1982.\n   [2]  Berners-Lee,\
    \ T., Fielding, R. and H. Frystyk, \"Hypertext\n        Transfer Protocol -- HTTP/1.0\"\
    , RFC 1945, May 1996.\n   [3]  Bradner, S., \"The Internet Standards Process --\
    \ Revision 3\", BCP\n        9, RFC 2026, October 1996.\n   [4]  Freed, N. and\
    \ N. Borenstein, \"Multipurpose Internet Mail\n        Extensions (MIME) Part\
    \ Two: Media Types\", RFC 2046, November\n        1996.\n   [5]  Fielding, R.,\
    \ Gettys, J., Mogul, J., Frystyk, H. and T.\n        Berners-Lee, \"Hypertext\
    \ Transfer Protocol -- HTTP/1.1\", RFC\n        2068, January 1997.\n   [6]  Bradner,\
    \ S., \"Key words for use in RFCs to Indicate Requirement\n        Levels\", BCP\
    \ 14, RFC 2119, March 1997.\n   [7]  Masinter, L., \"Hyper Text Coffee Pot Control\
    \ Protocol\n        (HTCPCP/1.0)\", RFC 2324, 1 April 1998.\n   [8]  Berners-Lee,\
    \ T., Fielding, R. and L. Masinter, \"Uniform Resource\n        Identifiers (URI):\
    \ Generic Syntax\", RFC 2396, August 1998.\n   [9]  Nielsen, H., Connolly, D.\
    \ and R. Khare, \"PEP - an extension\n        mechanism for HTTP\", Work in Progress.\n"
- title: 12. Acknowledgements
  contents:
  - "12. Acknowledgements\n   Roy Fielding, Rohit Khare, Yaron Y. Goland, and Koen\
    \ Holtman, deserve\n   special recognition for their efforts in commenting in\
    \ all phases of\n   this specification. Also thanks to Josh Cohen, Ross Patterson,\
    \ Jim\n   Gettys, Larry Masinter, and to the people involved in PEP [9].\n   The\
    \ contribution of World Wide Web Consortium (W3C) staff is part of\n   the W3C\
    \ HTTP Activity (see \"http://www.w3.org/Protocols/Activity\").\n"
- title: 13. Authors' Addresses
  contents:
  - "13. Authors' Addresses\n   Henrik Frystyk Nielsen\n   Microsoft Corporation\n\
    \   1 Microsoft Way\n   Redmond, WA 98052, USA\n   EMail: frystyk@microsoft.com\n\
    \   Paul J. Leach\n   Microsoft Corporation\n   1 Microsoft Way\n   Redmond, WA\
    \ 98052, USA\n   EMail: paulle@microsoft.com\n   Scott Lawrence\n   Agranat Systems,\
    \ Inc.\n   5 Clocktower Place, Suite 400\n   Maynard, MA 01754, USA\n   EMail:\
    \ lawrence@agranat.com\n"
- title: Appendices
  contents:
  - 'Appendices

    '
- title: 14. Summary of Protocol Interactions
  contents:
  - "14. Summary of Protocol Interactions\n   The following tables summarize the outcome\
    \ of strength and scope rules\n   of the mandatory proposal of compliant and non-compliant\
    \ HTTP proxies\n   and origin servers. The summary is intended as a guide and\
    \ index to\n   the text, but is necessarily cryptic and incomplete. This summary\n\
    \   should never be used or referenced separately from the complete\n   specification.\n\
    \                        Table 1: Origin Server\n       Scope            Hop-by-hop\
    \                End-to-end\n     Strength      Optional     Required    Optional\
    \     Required\n                    (may)        (must)       (may)       (must)\n\
    \   Mandatory     Standard    501 (Not     Standard     501 (Not\n   unsupported\
    \   processing  Implemented) processing   Implemented)\n   Extension     Standard\
    \    510 (Not     Standard     510 (Not\n   unsupported   processing  Extended)\
    \    processing   Extended)\n   Extension     Extended    Extended     Extended\
    \     Extended\n   supported     processing  processing   processing   processing\n\
    \                         Table 2: Proxy Server\n       Scope            Hop-by-hop\
    \                End-to-end\n     Strength      Optional     Required    Optional\
    \     Required\n                    (may)        (must)       (may)       (must)\n\
    \   Mandatory     Strip       501 (Not     Forward      501 (Not\n   unsupported\
    \   extension   Implemented) extension    Implemented)\n                     \
    \        or tunnel                 or tunnel\n   Extension     Strip       510\
    \ (Not     Forward      Forward\n   unsupported   extension   Extended)    extension\
    \    extension\n   Extension     Extended    Extended     Extended     Extended\n\
    \   supported     processing  processing   processing,  processing,\n        \
    \         and strip   and strip    may strip    may strip\n"
- title: 15. Examples
  contents:
  - "15. Examples\n   The following examples show various scenarios using mandatory\
    \ in\n   HTTP/1.1 requests and responses. Information not essential for\n   illustrating\
    \ the examples is left out (referred to as \"...\")\n"
- title: 15.1 User Agent to Origin Server
  contents:
  - "15.1 User Agent to Origin Server\n               Table 3: User Agent directly\
    \ to origin server\n   Client issues a request M-GET /some-document HTTP/1.1\n\
    \   with one optional and   Opt: \"http://www.my.com/tracking\"\n   one mandatory\
    \ extension Man: \"http://www.foo.com/privacy\"\n                           ...\n\
    \   Origin server accepts   HTTP/1.1 200 OK\n   the mandatory extension Ext:\n\
    \   but ignores the         Cache-Control: max-age=120, no-cache=\"Ext\"\n   optional\
    \ one. The       ...\n   client can not see in\n   this case that the\n   optional\
    \ extension was\n   ignored.\n               Table 4: Origin server with Vary\
    \ header field\n   Client issues a request M-GET /p/q HTTP/1.1\n   with one mandatory\
    \      Man: \"http://www.x.y/transform\"; ns=16\n   extension               16-use-transform:\
    \ xyzzy\n                           ...\n   Origin server accepts   HTTP/1.1 200\
    \ OK\n   the mandatory but       Ext:\n   indicates that the      Vary: Man, 16-use-transform\n\
    \   response varies on the  Date: Sun, 25 Oct 1998 08:12:31 GMT\n   request extension\
    \       Expires: Sun, 25 Oct 1998 08:12:31 GMT\n   declaration             Cache-Control:\
    \ no-cache=\"Ext\", max-age=1000\n                           ...\n"
- title: 15.2 User Agent to Origin Server via HTTP/1.1 Proxy
  contents:
  - "15.2 User Agent to Origin Server via HTTP/1.1 Proxy\n   These two examples show\
    \ how an extended request interacts with an\n   HTTP/1.1 proxy.\n            \
    \  Table 5: HTTP/1.1 Proxy forwards extended request\n   Client issues a request\
    \ M-GET /some-document HTTP/1.1\n   with one optional and   C-Opt: \"http://www.meter.org/hits\"\
    \n   one mandatory hop-by-   C-Man: \"http://www.copy.org/rights\"\n   hop extension\
    \           Connection: C-Opt, C-Man\n                           ...\n   HTTP/1.1\
    \ proxy forwards M-GET /some-document HTTP/1.1\n   the request and takes   Via:\
    \ 1.1 new\n   out the connection      ...\n   headers\n   Origin server fails\
    \ as  HTTP/1.1 510 Not Extended\n   the request does not    ...\n   contain any\
    \ information\n   belonging to the M-GET\n   method\n         Table 6: HTTP/1.1\
    \ Proxy does not forward extended request\n   Client issues a request M-GET /some-document\
    \ HTTP/1.1\n   with one optional and   C-Opt: \"http://www.meter.org/hits\"\n\
    \   one mandatory hop-by-   C-Man: \"http://www.copy.org/rights\"\n   hop extension\
    \           Connection: C-Opt, C-Man\n                           ...\n   HTTP/1.1\
    \ proxy refuses  HTTP/1.1 501 Not Implemented\n   to forward the M-GET    ...\n\
    \   method and returns an\n   error\n   Origin server never\n   sees the extended\n\
    \   request\n"
- title: 15.3 User Agent to Origin Server via HTTP/1.0 Proxy
  contents:
  - "15.3 User Agent to Origin Server via HTTP/1.0 Proxy\n   These two examples show\
    \ how an extended request interacts with an\n   HTTP/1.0 proxy in the message\
    \ path\n             Table 7: HTTP/1.0 Proxy forwards extended request\n   Client\
    \ issues a request M-GET /some-document HTTP/1.1\n   with one mandatory      Man:\
    \ \"http://www.price.com/sale\"\n   extension               ...\n   HTTP/1.0 proxy\
    \ forwards M-GET /some-document HTTP/1.0\n   the request as a        Man: \"http://www.price.com/sale\"\
    \n   HTTP/1.0 request        ...\n   without changing the\n   method\n   Origin\
    \ server accepts   HTTP/1.1 200 OK\n   declaration and returns Ext:\n   a 200\
    \ response and an   Date: Sun, 25 Oct 1998 08:12:31 GMT\n   extension        \
    \       Expires: Sun, 25 Oct 1998 08:12:31 GMT\n   acknowledgement. The    Cache-Control:\
    \ no-cache=\"Ext\", max-age=600\n   response can be cached  ...\n   by HTTP/1.1\
    \ caches for\n   10 minutes.\n                Table 8: HTTP/1.0 and HTTP/1.1 Proxy\
    \ Chain\n   Client issues request   M-GET /some-document HTTP/1.1\n   with one\
    \ mandatory and  Man: \"http://www.copy.org/rights\"\n   one hop-by-hop optional\
    \ C-Opt: \"http://www.ads.org/noads\"\n   extension               Connection:\
    \ C-Opt\n                           ...\n   HTTP/1.0 proxy forwards M-GET /some-document\
    \ HTTP/1.0\n   request as HTTP/1.0     Man: \"http://www.copy.org/rights\"\n \
    \  request without         C-Opt: \"http://www.ads.org/noads\"\n   changing the\
    \ method and Connection: C-Man\n   without honoring the    ...\n   Connection\
    \ directives\n   HTTP/1.1 proxy deletes  M-GET /some-document HTTP/1.1\n   (and\
    \ ignores) optional  Man: \"http://www.copy.org/rights\"\n   extension and forwards\
    \  C-Man: \"http://www.ads.org/givemeads\"\n   the rest including a    Connection:\
    \ C-Man\n   via header field. It    Via: 1.0 new\n   also add a hop-by-hop   ...\n\
    \   mandatory extension\n   Origin server accepts   HTTP/1.1 200 OK\n   both mandatory\
    \          Ext:\n   extensions. The         C-Ext\n   response is not        \
    \ Connection: C-Ext\n   cachable by the         Date: Sun, 25 Oct 1998 08:12:31\
    \ GMT\n   HTTP/1.0 cache but can  Expires: Sun, 25 Oct 1998 08:12:31 GMT\n   be\
    \ cached for 1 hour by Cache-Control: no-cache=\"Ext\", max-age=3600\n   HTTP/1.1\
    \ caches.        ...\n   HTTP/1.1 proxy removes  HTTP/1.1 200 OK\n   the hop-by-hop\
    \          Ext:\n   extension               Date: Sun, 25 Oct 1998 08:12:31 GMT\n\
    \   acknowledgement and     Expires: Sun, 25 Oct 1998 08:12:31 GMT\n   forwards\
    \ the remainder  Cache-Control: no-cache=\"Ext\", max-age=3600\n   of the response.\
    \        ...\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2000).  All\
    \ Rights Reserved.\n   This document and translations of it may be copied and\
    \ furnished to\n   others, and derivative works that comment on or otherwise explain\
    \ it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
