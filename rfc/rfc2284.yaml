- title: __initial_text__
  contents:
  - '              PPP Extensible Authentication Protocol (EAP)

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (1998).  All Rights Reserved.\n"
- title: Abstract
  contents:
  - "Abstract\n   The Point-to-Point Protocol (PPP) [1] provides a standard method\
    \ for\n   transporting multi-protocol datagrams over point-to-point links.\n \
    \  PPP also defines an extensible Link Control Protocol, which allows\n   negotiation\
    \ of an Authentication Protocol for authenticating its peer\n   before allowing\
    \ Network Layer protocols to transmit over the link.\n   This document defines\
    \ the PPP Extensible Authentication Protocol.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n      3.4       MD5-Challenge ...................................\
    \   11\n      3.5       One-Time Password (OTP) .........................   11\n\
    \      3.6       Generic Token Card ..............................   12\n   REFERENCES\
    \ ...................................................   13\n   ACKNOWLEDGEMENTS\
    \ .............................................   14\n   CHAIR'S ADDRESS ..............................................\
    \   14\n   AUTHORS' ADDRESSES ...........................................   14\n\
    \   Full Copyright Statement .....................................   15\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   In order to establish communications over a point-to-point\
    \ link, each\n   end of the PPP link must first send LCP packets to configure\
    \ the data\n   link during Link Establishment phase.  After the link has been\n\
    \   established, PPP provides for an optional Authentication phase before\n  \
    \ proceeding to the Network-Layer Protocol phase.\n   By default, authentication\
    \ is not mandatory.  If authentication of\n   the link is desired, an implementation\
    \ MUST specify the\n   Authentication-Protocol Configuration Option during Link\n\
    \   Establishment phase.\n   These authentication protocols are intended for use\
    \ primarily by\n   hosts and routers that connect to a PPP network server via\
    \ switched\n   circuits or dial-up lines, but might be applied to dedicated links\
    \ as\n   well.  The server can use the identification of the connecting host\n\
    \   or router in the selection of options for network layer negotiations.\n  \
    \ This document defines the PPP Extensible Authentication Protocol\n   (EAP).\
    \  The Link Establishment and Authentication phases, and the\n   Authentication-Protocol\
    \ Configuration Option, are defined in The\n   Point-to-Point Protocol (PPP) [1].\n"
- title: 1.1.  Specification of Requirements
  contents:
  - "1.1.  Specification of Requirements\n   In this document, several words are used\
    \ to signify the requirements\n   of the specification.  These words are often\
    \ capitalized.  The key\n   words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\"\
    , \"SHALL NOT\", \"SHOULD\",\n   \"SHOULD NOT\", \"RECOMMENDED\",  \"MAY\", and\
    \ \"OPTIONAL\" in this document\n   are to be interpreted as described in RFC\
    \ 2119 [6].\n"
- title: 1.2.  Terminology
  contents:
  - "1.2.  Terminology\n   This document frequently uses the following terms:\n  \
    \ authenticator\n             The end of the link requiring the authentication.\
    \  The\n             authenticator specifies the authentication protocol to be\n\
    \             used in the Configure-Request during Link Establishment\n      \
    \       phase.\n   peer\n             The other end of the point-to-point link;\
    \ the end which is\n             being authenticated by the authenticator.\n \
    \  silently discard\n             This means the implementation discards the packet\
    \ without\n             further processing.  The implementation SHOULD provide\
    \ the\n             capability of logging the error, including the contents of\n\
    \             the silently discarded packet, and SHOULD record the event\n   \
    \          in a statistics counter.\n   displayable message\n             This\
    \ is interpreted to be a human readable string of\n             characters, and\
    \ MUST NOT affect operation of the protocol.\n             The message encoding\
    \ MUST follow the UTF-8 transformation\n             format [5].\n"
- title: 2.  PPP Extensible Authentication Protocol (EAP)
  contents:
  - "2.  PPP Extensible Authentication Protocol (EAP)\n   The PPP Extensible Authentication\
    \ Protocol (EAP)  is a general\n   protocol for PPP authentication which supports\
    \ multiple\n   authentication mechanisms.  EAP does not select a specific\n  \
    \ authentication mechanism at Link Control Phase, but rather postpones\n   this\
    \ until the Authentication Phase.  This allows the authenticator\n   to request\
    \ more information before determining the specific\n   authentication mechanism.\
    \  This also permits the use of a \"back-end\"\n   server which actually implements\
    \ the various mechanisms while the PPP\n   authenticator merely passes through\
    \ the authentication exchange.\n   1. After the Link Establishment phase is complete,\
    \ the authenticator\n      sends one or more Requests to authenticate the peer.\
    \  The Request\n      has a type field to indicate what is being requested.  Examples\
    \ of\n      Request types include Identity,  MD5-challenge, One-Time\n      Passwords,\
    \ Generic Token Card, etc.  The MD5-challenge type\n      corresponds closely\
    \ to the CHAP authentication protocol.\n      Typically, the authenticator will\
    \ send an initial Identity Request\n      followed by one or more Requests for\
    \ authentication information.\n      However, an initial Identity Request is not\
    \ required, and MAY be\n      bypassed in cases where the identity is presumed\
    \ (leased lines,\n      dedicated dial-ups, etc.).\n   2. The peer sends a Response\
    \ packet in reply to each Request.  As\n      with the Request packet, the Response\
    \ packet contains a type field\n      which corresponds to the type field of the\
    \ Request.\n   3. The authenticator ends the authentication phase with a Success\
    \ or\n      Failure packet.\n"
- title: Advantages
  contents:
  - "Advantages\n   The EAP protocol can support multiple authentication mechanisms\n\
    \   without having to pre-negotiate a particular one during LCP Phase.\n   Certain\
    \ devices (e.g. a NAS) do not necessarily have to understand\n   each request\
    \ type and may be able to simply act as a passthrough\n   agent for a \"back-end\"\
    \ server on a host.  The device only need look\n   for the success/failure code\
    \ to terminate the authentication phase.\n"
- title: Disadvantages
  contents:
  - "Disadvantages\n   EAP does require the addition of a new authentication type\
    \ to LCP and\n   thus PPP implementations will need to be modified to use it.\
    \  It also\n   strays from the previous PPP authentication model of negotiating\
    \ a\n   specific authentication mechanism during LCP.\n"
- title: 2.1.  Configuration Option Format
  contents:
  - "2.1.  Configuration Option Format\n   A summary of the Authentication-Protocol\
    \ Configuration Option format\n   to negotiate the EAP Authentication Protocol\
    \ is shown below.  The\n   fields are transmitted from left to right.\n    0 \
    \                  1                   2                   3\n    0 1 2 3 4 5\
    \ 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |     Type      |    Length     |     Authentication-Protocol   |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   Type\n      3\n   Length\n      4\n   Authentication-Protocol\n      C227\
    \ (Hex) for PPP Extensible Authentication Protocol (EAP)\n"
- title: 2.2.  Packet Format
  contents:
  - "2.2.  Packet Format\n   Exactly one PPP EAP packet is encapsulated in the Information\
    \ field\n   of a PPP Data Link Layer frame where the protocol field indicates\n\
    \   type hex C227 (PPP EAP).  A summary of the EAP packet format is shown\n  \
    \ below.  The fields are transmitted from left to right.\n    0              \
    \     1                   2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2\
    \ 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |     Code      |  Identifier   |            Length             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |    Data ...\n   +-+-+-+-+\n   Code\n      The Code field is one octet and\
    \ identifies the type of EAP packet.\n      EAP Codes are assigned as follows:\n\
    \         1       Request\n         2       Response\n         3       Success\n\
    \         4       Failure\n   Identifier\n          The Identifier field is one\
    \ octet and aids in matching\n          responses with requests.\n   Length\n\
    \          The Length field is two octets and indicates the length of the\n  \
    \        EAP packet including the Code, Identifier, Length and Data\n        \
    \  fields.  Octets outside the range of the Length field should\n          be\
    \ treated as Data Link Layer padding and should be ignored on\n          reception.\n\
    \   Data\n          The Data field is zero or more octets.  The format of the\
    \ Data\n          field is determined by the Code field.\n"
- title: 2.2.1.  Request and Response
  contents:
  - "2.2.1.  Request and Response\n   Description\n      The Request packet is sent\
    \ by the authenticator to the peer.  Each\n      Request has a type field which\
    \ serves to indicate what is being\n      requested.  The authenticator MUST transmit\
    \ an EAP packet with the\n      Code field set to 1 (Request).  Additional Request\
    \ packets MUST be\n      sent until a valid Response packet is received, or an\
    \ optional\n      retry counter expires.  Retransmitted Requests MUST be sent\
    \ with\n      the same Identifier value in order to distinguish them from new\n\
    \      Requests.  The contents of the data field is dependent on the\n      Request\
    \ type.  The peer MUST send a Response packet in reply to a\n      Request packet.\
    \  Responses MUST only be sent in reply to a\n      received Request and never\
    \ retransmitted on a timer.  The\n      Identifier field of the Response MUST\
    \ match that of the Request.\n         Implementation Note: Because the authentication\
    \ process will\n         often involve user input, some care must be taken when\
    \ deciding\n         upon retransmission strategies and authentication timeouts.\
    \  It\n         is suggested a retransmission timer of 6 seconds with a maximum\n\
    \         of 10 retransmissions be used as default.  One may wish to make\n  \
    \       these timeouts longer in certain cases (e.g. where Token Cards\n     \
    \    are involved).  Additionally, the peer must be prepared to\n         silently\
    \ discard received retransmissions while waiting for\n         user input.\n \
    \  A summary of the Request and Response packet format is shown below.\n   The\
    \ fields are transmitted from left to right.\n    0                   1      \
    \             2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8\
    \ 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |     Code      |  Identifier   |            Length             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |     Type      |  Type-Data ...\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-\n\
    \   Code\n      1 for Request;\n      2 for Response.\n   Identifier\n      The\
    \ Identifier field is one octet.  The Identifier field MUST be\n      the same\
    \ if a Request packet is retransmitted due to a timeout\n      while waiting for\
    \ a Response.  Any new (non-retransmission)\n      Requests MUST modify the Identifier\
    \ field.  If a peer recieves a\n      duplicate Request for which it has already\
    \ sent a Response, it\n      MUST resend it's Response.  If a peer receives a\
    \ duplicate Request\n      before it has sent a Response to the initial Request\
    \ (i.e. it's\n      waiting for user input), it MUST silently discard the duplicate\n\
    \      Request.\n   Length\n      The Length field is two octets and indicates\
    \ the length of the EAP\n      packet including the Code, Identifier, Length,\
    \ Type, and Type-Data\n      fields.  Octets outside the range of the Length field\
    \ should be\n      treated as Data Link Layer padding and should be ignored on\n\
    \      reception.\n   Type\n      The Type field is one octet.  This field indicates\
    \ the Type of\n      Request or Response.  Only one Type MUST be specified per\
    \ EAP\n      Request or Response.  Normally, the Type field of the Response\n\
    \      will be the same as the Type of the Request.  However, there is\n     \
    \ also a Nak Response Type for indicating that a Request type is\n      unacceptable\
    \ to the peer.  When sending a Nak in response to a\n      Request, the peer MAY\
    \ indicate an alternative desired\n      authentication Type which it supports.\
    \ An initial specification of\n      Types follows in a later section of this\
    \ document.\n   Type-Data\n      The Type-Data field varies with the Type of Request\
    \ and the\n      associated Response.\n"
- title: 2.2.2.  Success and Failure
  contents:
  - "2.2.2.  Success and Failure\n   Description\n      The Success packet is sent\
    \ by the authenticator to the peer to\n      acknowledge successful authentication.\
    \  The authenticator MUST\n      transmit an EAP packet with the Code field set\
    \ to 3 (Success).\n      If the authenticator cannot authenticate the peer (unacceptable\n\
    \      Responses to one or more Requests) then the implementation MUST\n     \
    \ transmit an EAP packet with the Code field set to 4 (Failure).  An\n      authenticator\
    \ MAY wish to issue multiple Requests before sending a\n      Failure response\
    \ in order to allow for human typing mistakes.\n         Implementation Note:\
    \ Because the Success and Failure packets\n         are not acknowledged, they\
    \ may be potentially lost.  A peer\n         MUST allow for this circumstance.\
    \  The peer can use a Network\n         Protocol packet as an alternative indication\
    \ of Success.\n         Likewise, the receipt of a LCP Terminate-Request can be\
    \ taken\n         as a Failure.\n   A summary of the Success and Failure packet\
    \ format is shown below.\n   The fields are transmitted from left to right.\n\
    \    0                   1                   2                   3\n    0 1 2\
    \ 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |     Code      |  Identifier   |            Length             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   Code\n      3 for Success;\n      4 for Failure.\n   Identifier\n      The\
    \ Identifier field is one octet and aids in matching replies to\n      Responses.\
    \  The Identifier field MUST match the Indentifier field\n      of the Response\
    \ packet that it is sent in response to.\n   Length\n      4\n"
- title: 3.  Initial EAP Request/Response Types
  contents:
  - "3.  Initial EAP Request/Response Types\n   This section defines the initial set\
    \ of EAP Types used in\n   Request/Response exchanges.  More Types may be defined\
    \ in follow-on\n   documents.  The Type field is one octet and identifies the\
    \ structure\n   of an EAP Request or Response packet.  The first 3 Types are\n\
    \   considered special case Types.  The remaining Types define\n   authentication\
    \ exchanges.  The Nak Type is valid only for Response\n   packets, it MUST NOT\
    \ be sent in a Request.  The Nak Type MUST only be\n   sent in repsonse to a Request\
    \ which uses an authentication Type code.\n   All EAP implementatins MUST support\
    \ Types 1-4.  These Types, as well\n   as types 5 and 6, are defined in this document.\
    \  Follow-on RFCs will\n   define additional EAP Types.\n      1       Identity\n\
    \      2       Notification\n      3       Nak (Response only)\n      4      \
    \ MD5-Challenge\n      5       One-Time Password (OTP) (RFC 1938)\n      6   \
    \    Generic Token Card\n"
- title: 3.1.  Identity
  contents:
  - "3.1.  Identity\n   Description\n      The Identity Type is used to query the\
    \ identity of the peer.\n      Generally, the authenticator will issue this as\
    \ the initial\n      Request.  An optional displayable message MAY be included\
    \ to\n      prompt the peer in the case where there expectation of interaction\n\
    \      with a user.  A Response MUST be sent to this Request with a Type\n   \
    \   of 1 (Identity).\n         Implementation Note:  The peer MAY obtain the Identity\
    \ via user\n         input.  It is suggested that the authenticator retry the\n\
    \         Indentity Request in the case of an invalid Identity or\n         authentication\
    \ failure to allow for potential typos on the part\n         of the user.  It\
    \ is suggested that the Identity Request be\n         retried a minimum of 3 times\
    \ before terminating the\n         authentication phase with a Failure reply.\
    \  The Notification\n         Request MAY be used to indicate an invalid authentication\n\
    \         attempt prior to transmitting a new Identity Request\n         (optionally,\
    \ the failure MAY be indicated within the message of\n         the new Identity\
    \ Request itself).\n   Type\n      1\n   Type-Data\n      This field MAY contain\
    \ a displayable message in the Request.  The\n      Response uses this field to\
    \ return the Identity.  If the Identity\n      is unknown, this field should be\
    \ zero bytes in length.  The field\n      MUST NOT be null terminated.  The length\
    \ of this field is derived\n      from the Length field of the Request/Response\
    \ packet and hence a\n      null is not required.\n"
- title: 3.2.  Notification
  contents:
  - "3.2.  Notification\n   Description\n      The Notification Type is optionally\
    \ used to convey a displayable\n      message from the authenticator to the peer.\
    \   The peer SHOULD\n      display this message to the user or log it if it cannot\
    \ be\n      displayed.  It is intended to provide an acknowledged notification\n\
    \      of some imperative nature.  Examples include a password with an\n     \
    \ expiration time that is about to expire, an OTP sequence integer\n      which\
    \ is nearing 0, an authentication failure warning, etc.   In\n      most circumstances,\
    \ notification should not be required.\n   Type\n      2\n   Type-Data\n     \
    \ The Type-Data field in the Request contains a displayable message\n      greater\
    \ than zero octets in length.  The length of the message is\n      determined\
    \ by Length field of the Request packet.  The message\n      MUST not be null\
    \ terminated.  A Response MUST be sent in reply to\n      the Request with a Type\
    \ field of 2 (Notification).  The Type-Data\n      field of the Response is zero\
    \ octets in length.   The Response\n      should be sent immediately (independent\
    \ of how the message is\n      displayed or logged).\n"
- title: 3.3.  Nak
  contents:
  - "3.3.  Nak\n   Description\n      The Nak Type is valid only in Response messages.\
    \  It is sent in\n      reply to a Request where the desired authentication Type\
    \ is\n      unacceptable.   Authentication Types are numbered 4 and above.\n \
    \     The Response contains the authentication Type desired by the peer.\n   Type\n\
    \      3\n   Type-Data\n      This field MUST contain a single octet indicating\
    \ the desired\n      authentication type.\n"
- title: 3.4.  MD5-Challenge
  contents:
  - "3.4.  MD5-Challenge\n   Description\n      The MD5-Challenge Type is analagous\
    \ to the PPP CHAP protocol [3]\n      (with MD5 as the specified algorithm). \
    \ The PPP Challenge\n      Handshake Authentication Protocol RFC [3] should be\
    \ referred to\n      for further implementation specifics.  The Request contains\
    \ a\n      \"challenge\" message to the peer.  A Repsonse MUST be sent in reply\n\
    \      to the Request.  The Response MAY be either of Type 4 (MD5-\n      Challenge)\
    \ or Type 3 (Nak).   The Nak reply indicates the peer's\n      desired authentication\
    \ mechanism Type.  All EAP implementations\n      MUST support the MD5-Challenge\
    \ mechanism.\n   Type\n      4\n   Type-Data\n      The contents of the Type-Data\
    \  field is summarized below.  For\n      reference on the use of this fields\
    \ see the PPP Challenge\n      Handshake Authentication Protocol [3].\n      \
    \ 0                   1                   2                   3\n       0 1 2\
    \ 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |  Value-Size   |  Value ...\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |  Name ...\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"
- title: 3.5.  One-Time Password (OTP)
  contents:
  - "3.5.  One-Time Password (OTP)\n   Description\n      The One-Time Password system\
    \ is defined in \"A One-Time Password\n      System\" [4].  The Request contains\
    \ a displayable message\n      containing an OTP challenge.  A Repsonse MUST be\
    \ sent in reply to\n      the Request.  The Response MUST be of Type 5 (OTP) or\
    \ Type 3\n      (Nak).  The Nak reply indicates the peer's desired authentication\n\
    \      mechanism Type.\n   Type\n      5\n   Type-Data\n      The Type-Data field\
    \ contains the OTP \"challenge\" as a displayable\n      message in the Request.\
    \  In the Response, this field is used for\n      the 6 words from the OTP dictionary\
    \ [4].  The messages MUST not be\n      null terminated.  The length of the field\
    \ is derived from the\n      Length field of the Request/Reply packet.\n"
- title: 3.6.  Generic Token Card
  contents:
  - "3.6.  Generic Token Card\n   Description\n      The Generic Token Card Type is\
    \ defined for use with various Token\n      Card implementations which require\
    \ user input.   The Request\n      contains an ASCII text message and the Reply\
    \ contains the Token\n      Card information necessary for authentication.  Typically,\
    \ this\n      would be information read by a user from the Token card device and\n\
    \      entered as ASCII text.\n   Type\n      6\n   Type-Data\n      The Type-Data\
    \ field in the Request contains a displayable message\n      greater than zero\
    \ octets in length.  The length of the message is\n      determined by Length\
    \ field of the Request packet.  The message\n      MUST not be null terminated.\
    \  A Response MUST be sent in reply to\n      the Request with a Type field of\
    \ 6 (Generic Token Card).  The\n      Response contains data from the Token Card\
    \ required for\n      authentication.  The length is of the data is determined\
    \ by the\n      Length field of the Response packet.\n"
- title: Security Considerations
  contents:
  - "Security Considerations\n   Security issues are the primary topic of this RFC.\n\
    \   The interaction of the authentication protocols within PPP are highly\n  \
    \ implementation dependent.\n   For example, upon failure of authentication, some\
    \ implementations do\n   not terminate the link.  Instead, the implementation\
    \ limits the kind\n   of traffic in the Network-Layer Protocols to a filtered\
    \ subset, which\n   in turn allows the user opportunity to update secrets or send\
    \ mail to\n   the network administrator indicating a problem.\n   There is no\
    \ provision for retries of failed authentication.  However,\n   the LCP state\
    \ machine can renegotiate the authentication protocol at\n   any time, thus allowing\
    \ a new attempt.  It is recommended that any\n   counters used for authentication\
    \ failure not be reset until after\n   successful authentication, or subsequent\
    \ termination of the failed\n   link.\n   There is no requirement that authentication\
    \ be full duplex or that\n   the same protocol be used in both directions.  It\
    \ is perfectly\n   acceptable for different protocols to be used in each direction.\n\
    \   This will, of course, depend on the specific protocols negotiated.\n   In\
    \ practice, within or associated with each PPP server, it is not\n   anticipated\
    \ that a particular named user would be authenticated by\n   multiple methods.\
    \  This would make the user vulnerable to attacks\n   which negotiate the least\
    \ secure method from among a set (such as PAP\n   rather than EAP).  Instead,\
    \ for each named user there should be an\n   indication of exactly one method\
    \ used to authenticate that user name.\n   If a user needs to make use of different\
    \ authentication methods under\n   different circumstances, then distinct identities\
    \ SHOULD be employed,\n   each of which identifies exactly one authentication\
    \ method.\n"
- title: References
  contents:
  - "References\n   [1]   Simpson, W., \"The Point-to-Point Protocol (PPP)\", STD\
    \ 51,\n         RFC 1661, July 1994.\n   [2]   Reynolds, J. and J. Postel, \"\
    Assigned Numbers\", STD 2,\n         RFC 1700, October 1994.\n   [3]   Simpson,\
    \ W., \"PPP Challenge Handshake Authentication Protocol\n         (CHAP)\", RFC\
    \ 1994, August 1996.\n   [4]   Haller, N. and C. Metz, \"A One-Time Password System\"\
    , RFC 1938,\n         May 1996.\n   [5]   Yergeau, F., \"UTF-8, a transformation\
    \ format of Unicode and ISO\n         10646\", RFC 2044, October 1996.\n   [6]\
    \   Bradner, S., \"Key words for use in RFCs to Indicate Requirement\n       \
    \  Levels\", RFC 2119, March 1997.\n"
- title: Acknowledgments
  contents:
  - "Acknowledgments\n   This protocol derives much of its inspiration from Dave Carrel's\
    \ AHA\n   draft as well as the PPP CHAP protocol [3].  Bill Simpson provided\n\
    \   much of the boilerplate used throughout this document.   Al Rubens\n   (Merit)\
    \ also provided valuable feedback.\n"
- title: Chair's Address
  contents:
  - "Chair's Address\n   The working group can be contacted via the current chair:\n\
    \   Karl F. Fox\n   Ascend Communications, Inc.\n   655 Metro Place South, Suite\
    \ 370\n   Dublin, Ohio  43017\n   EMail: karl@ascend.com\n   Phone: +1 614 760\
    \ 4041\n   Fax:   +1 614 760 4050\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Larry J. Blunk\n   Merit Network, Inc.\n   4251 Plymouth\
    \ Rd., Suite C\n   Ann Arbor, MI  48105\n   EMail: ljb@merit.edu\n   Phone: 734-763-6056\n\
    \   FAX:   734-647-3185\n   John R. Vollbrecht\n   Merit Network, Inc.\n   4251\
    \ Plymouth Rd., Suite C\n   Ann Arbor, MI  48105\n   EMail: jrv@merit.edu\n  \
    \ Phone: +1-313-763-1206\n   FAX: +1-734-647-3185\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (1998).  All\
    \ Rights Reserved.\n   This document and translations of it may be copied and\
    \ furnished to\n   others, and derivative works that comment on or otherwise explain\
    \ it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
